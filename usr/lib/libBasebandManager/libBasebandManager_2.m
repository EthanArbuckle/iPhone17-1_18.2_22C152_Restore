void sub_1C585CF98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,std::locale a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,void *a44,uint64_t a45,uint64_t a46,std::locale a47)
{
  uint64_t v47;

  if (a28 < 0)
  {
    operator delete(__p);
    if ((a15 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a21 & 0x80000000) == 0)
      {
LABEL_8:
        std::vector<std::string>::~vector[abi:ne180100](&a44);
        std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&a47);
        if (*(char *)(v47 - 161) < 0)
        {
          operator delete(*(void **)(v47 - 184));
          if ((*(char *)(v47 - 137) & 0x80000000) == 0)
          {
LABEL_10:
            if ((*(char *)(v47 - 113) & 0x80000000) == 0) {
              goto LABEL_11;
            }
            goto LABEL_15;
          }
        }
        else if ((*(char *)(v47 - 137) & 0x80000000) == 0)
        {
          goto LABEL_10;
        }
        operator delete(*(void **)(v47 - 160));
        if ((*(char *)(v47 - 113) & 0x80000000) == 0)
        {
LABEL_11:
          if ((*(char *)(v47 - 89) & 0x80000000) == 0) {
            goto LABEL_12;
          }
          goto LABEL_16;
        }
LABEL_15:
        operator delete(*(void **)(v47 - 136));
        if ((*(char *)(v47 - 89) & 0x80000000) == 0) {
LABEL_12:
        }
          _Unwind_Resume(a1);
LABEL_16:
        operator delete(*(void **)(v47 - 112));
        _Unwind_Resume(a1);
      }
LABEL_7:
      operator delete(a16);
      goto LABEL_8;
    }
  }
  else if ((a15 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a10);
  if ((a21 & 0x80000000) == 0) {
    goto LABEL_8;
  }
  goto LABEL_7;
}

BOOL support::fs::getPartitionInfo(uint64_t a1, void *a2, void *a3, unint64_t *a4)
{
  if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    if (*(unsigned char *)(a1 + 23))
    {
      memset(&v11, 0, sizeof(v11));
      int v7 = statvfs((const char *)a1, &v11);
      BOOL result = v7 == 0;
      if (v7) {
        return result;
      }
LABEL_7:
      *a4 = v11.f_frsize;
      uint64_t f_bavail = v11.f_bavail;
      *a2 = v11.f_blocks;
      *a3 = f_bavail;
      return result;
    }
    return 0;
  }
  if (!*(void *)(a1 + 8)) {
    return 0;
  }
  memset(&v11, 0, sizeof(v11));
  int v9 = statvfs(*(const char **)a1, &v11);
  BOOL result = v9 == 0;
  if (!v9) {
    goto LABEL_7;
  }
  return result;
}

void *support::fs::readCurrentLine@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::istream::tellg();
  uint64_t v4 = v10;
  if (v10 >= 2)
  {
    do
    {
      std::istream::seekg();
      if (std::istream::peek() == 10) {
        break;
      }
    }
    while (v4-- > 1);
  }
  std::istream::seekg();
  std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)));
  v6 = std::locale::use_facet(v9, MEMORY[0x1E4FBA258]);
  unsigned __int8 v7 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v6->__vftable[2].~facet_0)(v6, 10);
  std::locale::~locale(v9);
  return std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a1, (uint64_t)a2, v7);
}

void sub_1C585D30C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
}

void sub_1C585D320(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0)
  {
    operator delete(*(void **)v1);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void *std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(void *a1, uint64_t a2, unsigned __int8 a3)
{
  char v11 = -86;
  MEMORY[0x1C8791D80](&v11, a1, 1);
  if (!v11) {
    return a1;
  }
  if (*(char *)(a2 + 23) < 0)
  {
    **(unsigned char **)a2 = 0;
    *(void *)(a2 + 8) = 0;
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 23) = 0;
  }
  uint64_t v6 = 0;
  while (1)
  {
    unsigned __int8 v7 = *(void **)((char *)a1 + *(void *)(*a1 - 24) + 40);
    v8 = (unsigned char *)v7[3];
    if (v8 != (unsigned char *)v7[4])
    {
      v7[3] = v8 + 1;
      LOBYTE(v7) = *v8;
      goto LABEL_9;
    }
    LODWORD(v7) = (*(uint64_t (**)(void *))(*v7 + 80))(v7);
    if (v7 == -1) {
      break;
    }
LABEL_9:
    if (v7 == a3)
    {
      int v9 = 0;
      goto LABEL_17;
    }
    std::string::push_back((std::string *)a2, (std::string::value_type)v7);
    --v6;
    if (*(char *)(a2 + 23) < 0 && *(void *)(a2 + 8) == 0x7FFFFFFFFFFFFFF7)
    {
      int v9 = 4;
      goto LABEL_17;
    }
  }
  if (v6) {
    int v9 = 2;
  }
  else {
    int v9 = 6;
  }
LABEL_17:
  std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) | v9);
  return a1;
}

void sub_1C585D4B0(void *a1)
{
  __cxa_begin_catch(a1);
  uint64_t v2 = *v1;
  *(_DWORD *)((char *)v1 + *(void *)(*v1 - 24) + 32) |= 1u;
  if ((*((unsigned char *)v1 + *(void *)(v2 - 24) + 36) & 1) == 0)
  {
    __cxa_end_catch();
    JUMPOUT(0x1C585D470);
  }
  __cxa_rethrow();
}

void sub_1C585D52C(_Unwind_Exception *a1)
{
}

void metric::sendCoreAnalyticsEvent(const void **a1, xpc_object_t *a2)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  int v2 = *((char *)a1 + 23);
  if (v2 >= 0) {
    size_t v3 = *((unsigned __int8 *)a1 + 23);
  }
  else {
    size_t v3 = (size_t)a1[1];
  }
  unint64_t v4 = v3 + 20;
  memset(__p, 170, 24);
  if (v3 + 20 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v4 >= 0x17)
  {
    uint64_t v8 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v8 = v4 | 7;
    }
    uint64_t v9 = v8 + 1;
    uint64_t v10 = (char *)operator new(v8 + 1);
    __p[1] = (void *)(v3 + 20);
    __p[2] = (void *)(v9 | 0x8000000000000000);
    __p[0] = v10;
    unsigned __int8 v7 = v10 + 20;
    *((_DWORD *)v10 + 4) = 779710063;
    *(_OWORD *)uint64_t v10 = *(_OWORD *)"com.apple.Telephony.";
  }
  else
  {
    HIDWORD(__p[2]) = 0;
    HIBYTE(__p[2]) = v3 + 20;
    unsigned __int8 v7 = (char *)&__p[2] + 4;
    LODWORD(__p[2]) = 779710063;
    *(_OWORD *)__p = *(_OWORD *)"com.apple.Telephony.";
    if (!v3) {
      goto LABEL_15;
    }
  }
  if (v2 >= 0) {
    char v11 = a1;
  }
  else {
    char v11 = *a1;
  }
  memmove(v7, v11, v3);
LABEL_15:
  v7[v3] = 0;
  v12 = GetOsLogContext()[1];
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    v13 = __p;
    if (SHIBYTE(__p[2]) < 0) {
      v13 = (void **)__p[0];
    }
    *(_DWORD *)buf = 136315138;
    v17 = v13;
    _os_log_impl(&dword_1C5767000, v12, OS_LOG_TYPE_DEFAULT, "Sending CoreAnalytics event: %s", buf, 0xCu);
  }
  xpc_object_t object = *a2;
  if (*a2) {
    xpc_retain(*a2);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  analytics_send_event_lazy();
  xpc_release(object);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
}

void sub_1C585D784(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, xpc_object_t object, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

xpc_object_t ___ZN6metric22sendCoreAnalyticsEventENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEN3xpc4dictE_block_invoke(uint64_t a1)
{
  xpc_object_t v1 = *(xpc_object_t *)(a1 + 32);
  if (v1) {
    xpc_retain(*(xpc_object_t *)(a1 + 32));
  }
  else {
    xpc_object_t v1 = xpc_null_create();
  }
  xpc_object_t v2 = xpc_null_create();
  xpc_release(v2);
  return v1;
}

void sub_1C585D820(_Unwind_Exception *a1)
{
  xpc_release(v1);
  _Unwind_Resume(a1);
}

xpc_object_t __copy_helper_block_e8_32c15_ZTSN3xpc4dictE(uint64_t a1, uint64_t a2)
{
  size_t v3 = *(void **)(a2 + 32);
  *(void *)(a1 + 32) = v3;
  if (v3) {
    return xpc_retain(v3);
  }
  xpc_object_t result = xpc_null_create();
  *(void *)(a1 + 32) = result;
  return result;
}

void __destroy_helper_block_e8_32c15_ZTSN3xpc4dictE(uint64_t a1)
{
  *(void *)(a1 + 32) = 0;
}

void DataModule::create(capabilities::radio *a1@<X0>, uint64_t **a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  if (!capabilities::radio::supportsDataService(a1)) {
    return;
  }
  unint64_t v4 = operator new(0x140uLL);
  v5 = v4;
  uint64_t v6 = *(void *)a1;
  unsigned __int8 v7 = (std::__shared_weak_count *)*((void *)a1 + 1);
  v21[0] = v6;
  v21[1] = (uint64_t)v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  DataModule::DataModule((uint64_t)v4, v21);
  v22 = (uint64_t *)v5;
  unint64_t v23 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v8 = (std::__shared_weak_count *)operator new(0x20uLL);
  v8->__shared_owners_ = 0;
  p_shared_owners = &v8->__shared_owners_;
  v8->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20F8070;
  v8->__shared_weak_owners_ = 0;
  v8[1].__vftable = (std::__shared_weak_count_vtbl *)v5;
  unint64_t v23 = (unint64_t)v8;
  uint64_t v10 = (std::__shared_weak_count *)*((void *)v5 + 16);
  if (v10)
  {
    if (v10->__shared_owners_ != -1) {
      goto LABEL_10;
    }
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    *((void *)v5 + 15) = v5;
    *((void *)v5 + 16) = v8;
    std::__shared_weak_count::__release_weak(v10);
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
  atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  *((void *)v5 + 15) = v5;
  *((void *)v5 + 16) = v8;
  if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL))
  {
LABEL_9:
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
LABEL_10:
  char v11 = v22;
  if (v22[13])
  {
    v12 = (std::__shared_weak_count *)v22[16];
    if (!v12 || (uint64_t v13 = v22[15], (v14 = std::__shared_weak_count::lock(v12)) == 0)) {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    v15 = v14;
    uint64_t block = v13;
    uint64_t v30 = (uint64_t)v14;
    ctu::LoggerCommonBase::getLogDomain((ctu::LoggerCommonBase *)(v11 + 7));
    uint64_t v16 = v13 + 48;
    if (!v13) {
      uint64_t v16 = 0;
    }
    uint64_t v24 = v16;
    uint64_t v25 = (uint64_t)v15;
    uint64_t block = 0;
    uint64_t v30 = 0;
    ctu::TrackedLogger::registerLoggerToServer();
    v17 = (std::__shared_weak_count *)v25;
    if (v25 && !atomic_fetch_add((atomic_ullong *volatile)(v25 + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
    uint64_t v18 = (std::__shared_weak_count *)v30;
    if (v30 && !atomic_fetch_add((atomic_ullong *volatile)(v30 + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
    char v11 = v22;
  }
  unint64_t v19 = v23;
  *a2 = v11;
  a2[1] = (uint64_t *)v19;
  if (v7) {
    std::__shared_weak_count::__release_weak(v7);
  }
  uint64_t v24 = MEMORY[0x1E4F143A8];
  uint64_t v25 = 0x40000000;
  v26 = ___ZN10DataModule4initEv_block_invoke;
  v27 = &__block_descriptor_tmp_10;
  v22 = &v24;
  v28 = v11;
  uint64_t block = MEMORY[0x1E4F143A8];
  uint64_t v30 = 0x40000000;
  v31 = ___ZNK3ctu20SharedSynchronizableI10DataModuleE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  v32 = &__block_descriptor_tmp_77;
  v33 = v11 + 15;
  v34 = &v22;
  v20 = v11[17];
  if (v11[18]) {
    dispatch_async_and_wait(v20, &block);
  }
  else {
    dispatch_sync(v20, &block);
  }
}

void sub_1C585DBB4()
{
}

void sub_1C585DC00()
{
}

void sub_1C585DC10()
{
}

void sub_1C585DC1C(_Unwind_Exception *a1)
{
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_1C585DC7C(_Unwind_Exception *a1)
{
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void DataModule::init(DataModule *this)
{
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 0x40000000;
  v3[2] = ___ZN10DataModule4initEv_block_invoke;
  v3[3] = &__block_descriptor_tmp_10;
  v3[4] = this;
  unint64_t v4 = v3;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI10DataModuleE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  block[3] = &__block_descriptor_tmp_77;
  block[4] = (char *)this + 120;
  block[5] = &v4;
  xpc_object_t v2 = (char *)this + 136;
  uint64_t v1 = *((void *)this + 17);
  if (*((void *)v2 + 1)) {
    dispatch_async_and_wait(v1, block);
  }
  else {
    dispatch_sync(v1, block);
  }
}

const char *DataModule::getName(DataModule *this)
{
  return "data.mod";
}

unsigned char *DataModule::getShutdownStages@<X0>(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  size_t v3 = operator new(1uLL);
  *a1 = v3;
  *size_t v3 = 3;
  xpc_object_t result = v3 + 1;
  a1[1] = result;
  a1[2] = result;
  return result;
}

uint64_t DataModule::DataModule(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  unint64_t v4 = (std::__shared_weak_count *)a2[1];
  if (v4)
  {
    atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  *(void *)a1 = &unk_1F20FC1C8;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = v4;
  if (v4)
  {
    atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    *(void *)(a1 + 24) = 0;
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = 0;
    std::__shared_weak_count::__release_weak(v4);
    *(void *)a1 = &unk_1F20F0BE0;
    std::__shared_weak_count::__release_weak(v4);
  }
  else
  {
    *(void *)(a1 + 24) = 0;
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = 0;
    *(void *)a1 = &unk_1F20F0BE0;
  }
  *(void *)a1 = &unk_1F20F7CC0;
  *(void *)(a1 + 48) = &unk_1F20F7D30;
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v12, "com.apple.telephony.abm", "data.mod");
  GetABMLogServer(&v10);
  initially_inactive = dispatch_queue_attr_make_initially_inactive(0);
  uint64_t v6 = dispatch_queue_create_with_target_V2("data.mod", initially_inactive, 0);
  dispatch_set_qos_class_floor(v6, QOS_CLASS_DEFAULT, 0);
  dispatch_activate(v6);
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = v6;
  if (v6)
  {
    dispatch_retain(v6);
    *(void *)(a1 + 144) = 0;
    dispatch_release(v6);
  }
  else
  {
    *(void *)(a1 + 144) = 0;
  }
  *(void *)(a1 + 48) = &unk_1F20F8030;
  ctu::OsLogContext::OsLogContext();
  ctu::OsLogContext::OsLogContext();
  ctu::LoggerCommonBase::LoggerCommonBase();
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v14);
  *(void *)(a1 + 56) = &unk_1F20F0070;
  unsigned __int8 v7 = v11;
  *(void *)(a1 + 104) = v10;
  *(void *)(a1 + 112) = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v13);
  *(void *)(a1 + 48) = &unk_1F20F80C0;
  uint64_t v8 = v11;
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v12);
  *(void *)a1 = &unk_1F20F7CC0;
  *(void *)(a1 + 48) = &unk_1F20F7D30;
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 160) = 0;
  *(unsigned char *)(a1 + 176) = 1;
  *(void *)(a1 + 168) = &unk_1F20F0680;
  *(unsigned char *)(a1 + 192) = 1;
  *(void *)(a1 + 184) = &unk_1F20F06C8;
  *(unsigned char *)(a1 + 208) = 1;
  *(void *)(a1 + 200) = &unk_1F20F0710;
  *(unsigned char *)(a1 + 224) = 1;
  *(void *)(a1 + 216) = &unk_1F20F0758;
  *(unsigned char *)(a1 + 240) = 1;
  *(void *)(a1 + 232) = &unk_1F20F07A0;
  *(unsigned char *)(a1 + 256) = 1;
  *(void *)(a1 + 248) = &unk_1F20F06C8;
  *(unsigned char *)(a1 + 272) = 1;
  *(void *)(a1 + 264) = &unk_1F20F0710;
  *(void *)(a1 + 280) = "kKeyPropertyDataAggregationProtocol";
  *(void *)(a1 + 288) = "kKeyPropertyDataAggregationMaxDatagrams";
  *(void *)(a1 + 296) = "kKeyPropertyDataAggregationMaxSize";
  *(void *)(a1 + 304) = "kKeyPropertyDataFlowControl";
  *(void *)(a1 + 312) = "kKeyPropertyDataPowerSave";
  return a1;
}

void sub_1C585E184(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15)
{
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&a15);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&a13);
  ctu::SharedSynchronizable<DataStallDetection>::~SharedSynchronizable(v16);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&a11);
  Service::~Service(v15);
  _Unwind_Resume(a1);
}

void sub_1C585E1C8(_Unwind_Exception *a1)
{
  Service::~Service(v1);
  _Unwind_Resume(a1);
}

void DataModule::~DataModule(DataModule *this)
{
  *(void *)this = &unk_1F20F7CC0;
  *((void *)this + 6) = &unk_1F20F7D30;
  xpc_object_t v2 = (std::__shared_weak_count *)*((void *)this + 20);
  if (!v2 || atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    *((void *)this + 6) = &unk_1F20F8030;
    MEMORY[0x1C8790F40]((char *)this + 56);
    uint64_t v3 = *((void *)this + 18);
    if (!v3) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  *((void *)this + 6) = &unk_1F20F8030;
  MEMORY[0x1C8790F40]((char *)this + 56);
  uint64_t v3 = *((void *)this + 18);
  if (v3) {
LABEL_4:
  }
    dispatch_release(v3);
LABEL_5:
  unint64_t v4 = *((void *)this + 17);
  if (v4) {
    dispatch_release(v4);
  }
  v5 = (std::__shared_weak_count *)*((void *)this + 16);
  if (v5) {
    std::__shared_weak_count::__release_weak(v5);
  }
  *(void *)this = &unk_1F20FC1C8;
  uint64_t v6 = *((void *)this + 3);
  if (v6)
  {
    uint64_t v7 = *((void *)this + 4);
    uint64_t v8 = (void *)*((void *)this + 3);
    if (v7 != v6)
    {
      do
      {
        if (*(char *)(v7 - 1) < 0) {
          operator delete(*(void **)(v7 - 24));
        }
        v7 -= 24;
      }
      while (v7 != v6);
      uint64_t v8 = (void *)*((void *)this + 3);
    }
    *((void *)this + 4) = v6;
    operator delete(v8);
  }
  uint64_t v9 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v9) {
    std::__shared_weak_count::__release_weak(v9);
  }
}

{
  void *v1;
  uint64_t vars8;

  DataModule::~DataModule(this);

  operator delete(v1);
}

void non-virtual thunk to'DataModule::~DataModule(DataModule *this)
{
}

{
  void *v1;
  uint64_t vars8;

  DataModule::~DataModule((DataModule *)((char *)this - 48));

  operator delete(v1);
}

void ___ZN10DataModule4initEv_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(NSObject **)(*(void *)(a1 + 32) + 88);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)xpc_object_t v2 = 0;
    _os_log_impl(&dword_1C5767000, v1, OS_LOG_TYPE_DEFAULT, "#I Initializing", v2, 2u);
  }
}

void DataModule::shutdown(uint64_t a1)
{
  v1[0] = MEMORY[0x1E4F143A8];
  v1[1] = 0x40000000;
  v1[2] = ___ZN10DataModule8shutdownE13ShutdownStageN8dispatch13group_sessionE_block_invoke;
  v1[3] = &__block_descriptor_tmp_8;
  v1[4] = a1;
  ctu::SharedSynchronizable<DataModule>::execute_wrapped((uint64_t *)(a1 + 120), (uint64_t)v1);
}

void ___ZN10DataModule8shutdownE13ShutdownStageN8dispatch13group_sessionE_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  xpc_object_t v2 = *(std::__shared_weak_count **)(v1 + 160);
  *(void *)(v1 + 152) = 0;
  *(void *)(v1 + 160) = 0;
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
}

void DataModule::initialize(uint64_t *a1, NSObject **a2)
{
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 1174405120;
  v11[2] = ___ZN10DataModule10initializeEN8dispatch13group_sessionE_block_invoke;
  v11[3] = &__block_descriptor_tmp_12_1;
  uint64_t v3 = *a2;
  v11[4] = a1;
  dispatch_group_t group = v3;
  if (v3)
  {
    dispatch_retain(v3);
    dispatch_group_enter(group);
  }
  ctu::SharedSynchronizable<DataModule>::execute_wrapped(a1 + 15, (uint64_t)v11);
  unint64_t v4 = (std::__shared_weak_count *)a1[16];
  if (!v4 || (v5 = a1[15], (uint64_t v6 = std::__shared_weak_count::lock(v4)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v7 = v6;
  uint64_t v8 = operator new(8uLL);
  void *v8 = a1;
  uint64_t v9 = a1[17];
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v10 = operator new(0x18uLL);
  *uint64_t v10 = v8;
  v10[1] = v5;
  v10[2] = v7;
  dispatch_async_f(v9, v10, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<DataModule>::execute_wrapped<DataModule::initialize(dispatch::group_session)::$_0>(DataModule::initialize(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<DataModule::initialize(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<DataModule::initialize(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke);
  if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  if (group)
  {
    dispatch_group_leave(group);
    if (group) {
      dispatch_release(group);
    }
  }
}

void ___ZN10DataModule10initializeEN8dispatch13group_sessionE_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  xpc_object_t v2 = *(std::__shared_weak_count **)(v1 + 128);
  if (!v2 || (v3 = *(void *)(v1 + 120), (unint64_t v4 = std::__shared_weak_count::lock(v2)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v5 = v4;
  atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v5);
  }
  uint64_t v10 = (char *)operator new(0x19uLL);
  long long v11 = xmmword_1C599E880;
  strcpy(v10, "kCommandGetDataProperty");
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN10DataModule10initializeEN8dispatch13group_sessionE_block_invoke_2;
  aBlock[3] = &__block_descriptor_tmp_11_3;
  aBlock[4] = v1;
  aBlock[5] = v3;
  uint64_t v8 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  uint64_t v6 = _Block_copy(aBlock);
  uint64_t v9 = v6;
  Service::registerCommandHandler(v1, (uint64_t)&v10, &v9);
  if (v6) {
    _Block_release(v6);
  }
  if (SHIBYTE(v11) < 0) {
    operator delete(v10);
  }
  if (v8) {
    std::__shared_weak_count::__release_weak(v8);
  }
  std::__shared_weak_count::__release_weak(v5);
}

void sub_1C585E818(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (v17) {
    _Block_release(v17);
  }
  if (a16)
  {
    std::__shared_weak_count::__release_weak(a16);
    if ((*(char *)(v18 - 33) & 0x80000000) == 0)
    {
LABEL_5:
      std::__shared_weak_count::__release_weak(v16);
      _Unwind_Resume(a1);
    }
  }
  else if ((*(char *)(v18 - 33) & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(*(void **)(v18 - 56));
  std::__shared_weak_count::__release_weak(v16);
  _Unwind_Resume(a1);
}

void sub_1C585E874(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_weak(v1);
  _Unwind_Resume(a1);
}

void ___ZN10DataModule10initializeEN8dispatch13group_sessionE_block_invoke_2(void *a1, void **a2, void **a3)
{
  unint64_t v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    uint64_t v7 = a1[4];
    uint64_t v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      uint64_t v9 = v8;
      if (!a1[5])
      {
LABEL_12:
        if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
        return;
      }
      v12[0] = MEMORY[0x1E4F143A8];
      v12[1] = 1174405120;
      v12[2] = ___ZN10DataModule10initializeEN8dispatch13group_sessionE_block_invoke_3;
      v12[3] = &__block_descriptor_tmp_9_2;
      uint64_t v10 = *a2;
      v12[4] = v7;
      xpc_object_t object = v10;
      if (v10)
      {
        xpc_retain(v10);
        long long v11 = *a3;
        if (!*a3) {
          goto LABEL_9;
        }
      }
      else
      {
        xpc_object_t object = xpc_null_create();
        long long v11 = *a3;
        if (!*a3)
        {
LABEL_9:
          aBlock = v11;
          ctu::SharedSynchronizable<DataModule>::execute_wrapped((uint64_t *)(v7 + 120), (uint64_t)v12);
          if (aBlock) {
            _Block_release(aBlock);
          }
          xpc_release(object);
          xpc_object_t object = 0;
          goto LABEL_12;
        }
      }
      long long v11 = _Block_copy(v11);
      goto LABEL_9;
    }
  }
}

void ___ZN10DataModule10initializeEN8dispatch13group_sessionE_block_invoke_3(void *a1)
{
  uint64_t v3 = a1[4];
  xpc_object_t v2 = (xpc_object_t)a1[5];
  uint64_t v6 = v2;
  if (!v2)
  {
    xpc_object_t v2 = xpc_null_create();
    uint64_t v6 = v2;
    unint64_t v4 = (void *)a1[6];
    if (!v4) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  xpc_retain(v2);
  unint64_t v4 = (void *)a1[6];
  if (v4) {
LABEL_5:
  }
    unint64_t v4 = _Block_copy(v4);
LABEL_6:
  aBlock = v4;
  DataModule::getDataProperty_sync(v3, &v6, (uint64_t *)&aBlock);
  if (aBlock) {
    _Block_release(aBlock);
  }
  xpc_release(v2);
}

void sub_1C585EA8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *aBlock)
{
  if (aBlock) {
    _Block_release(aBlock);
  }
  xpc_release(v9);
  _Unwind_Resume(a1);
}

void DataModule::getDataProperty_sync(uint64_t a1, void **a2, uint64_t *a3)
{
  uint64_t v64 = *MEMORY[0x1E4F143B8];
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 88))(a1))
  {
    memset(buf, 170, 24);
    v63.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x19uLL);
    *(_OWORD *)&v63.__r_.__value_.__r.__words[1] = xmmword_1C599E880;
    strcpy(v63.__r_.__value_.__l.__data_, "kCommandGetDataProperty");
    uint64_t v6 = (char *)operator new(0x28uLL);
    strcpy(v6, " rejected; ABM is shutting down ");
    uint64_t v7 = std::string::append(&v63, v6, 0x20uLL);
    long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    *(void *)&buf[16] = *((void *)&v7->__r_.__value_.__l + 2);
    *(_OWORD *)buf = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    operator delete(v6);
    if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v63.__r_.__value_.__l.__data_);
      uint64_t v9 = *(NSObject **)(a1 + 88);
      if (!os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
LABEL_4:
        if (!*a3)
        {
LABEL_102:
          if ((char)buf[23] < 0) {
            operator delete(*(void **)buf);
          }
          return;
        }
LABEL_17:
        v63.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
        v63.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
        uint64_t v18 = buf[23];
        if ((buf[23] & 0x80u) != 0) {
          uint64_t v18 = *(void *)&buf[8];
        }
        if (v18)
        {
          xpc_object_t v19 = xpc_dictionary_create(0, 0, 0);
          if (v19 || (xpc_object_t v19 = xpc_null_create()) != 0)
          {
            if (MEMORY[0x1C8792D30](v19) == MEMORY[0x1E4F14590])
            {
              xpc_retain(v19);
              xpc_object_t v20 = v19;
            }
            else
            {
              xpc_object_t v20 = xpc_null_create();
            }
          }
          else
          {
            xpc_object_t v20 = xpc_null_create();
            xpc_object_t v19 = 0;
          }
          xpc_release(v19);
          xpc_object_t v42 = xpc_null_create();
          v43 = (void *)v63.__r_.__value_.__r.__words[0];
          v63.__r_.__value_.__r.__words[0] = (std::string::size_type)v20;
          xpc_release(v43);
          xpc_release(v42);
          if ((buf[23] & 0x80u) == 0) {
            v44 = buf;
          }
          else {
            v44 = *(uint8_t **)buf;
          }
          xpc_object_t v45 = xpc_string_create((const char *)v44);
          if (!v45) {
            xpc_object_t v45 = xpc_null_create();
          }
          xpc_dictionary_set_value(v20, (const char *)*MEMORY[0x1E4F4C240], v45);
          xpc_object_t v46 = xpc_null_create();
          xpc_release(v45);
          xpc_release(v46);
        }
        LODWORD(v56) = -534716415;
        dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(a3, (unsigned int *)&v56, (void **)&v63.__r_.__value_.__l.__data_);
        xpc_release(v63.__r_.__value_.__l.__data_);
        goto LABEL_102;
      }
    }
    else
    {
      uint64_t v9 = *(NSObject **)(a1 + 88);
      if (!os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_4;
      }
    }
    v17 = buf;
    if ((buf[23] & 0x80u) != 0) {
      v17 = *(uint8_t **)buf;
    }
    LODWORD(v63.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)v63.__r_.__value_.__r.__words + 4) = (std::string::size_type)v17;
    _os_log_impl(&dword_1C5767000, v9, OS_LOG_TYPE_DEFAULT, "#I %s", (uint8_t *)&v63, 0xCu);
    if (!*a3) {
      goto LABEL_102;
    }
    goto LABEL_17;
  }
  uint64_t v10 = *(std::__shared_weak_count **)(a1 + 128);
  if (!v10 || (uint64_t v11 = *(void *)(a1 + 120), (v12 = std::__shared_weak_count::lock(v10)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v13 = v12;
  p_shared_weak_owners = &v12->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v12->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v13);
  }
  v63.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
  v63.__r_.__value_.__l.__size_ = 0xAAAAAAAAAAAAAAAALL;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN10DataModule20getDataProperty_syncEN3xpc4dictEN8dispatch5blockIU13block_pointerFviS1_EEE_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_39_2;
  aBlock[4] = a1;
  aBlock[5] = v11;
  v59 = v13;
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  v15 = *a2;
  xpc_object_t v60 = v15;
  if (!v15)
  {
    xpc_object_t v60 = xpc_null_create();
    uint64_t v16 = (void *)*a3;
    if (!*a3) {
      goto LABEL_26;
    }
    goto LABEL_25;
  }
  xpc_retain(v15);
  uint64_t v16 = (void *)*a3;
  if (*a3) {
LABEL_25:
  }
    uint64_t v16 = _Block_copy(v16);
LABEL_26:
  v61 = v16;
  v21 = _Block_copy(aBlock);
  std::string::size_type v22 = *(void *)(a1 + 136);
  if (v22) {
    dispatch_retain(*(dispatch_object_t *)(a1 + 136));
  }
  v63.__r_.__value_.__r.__words[0] = (std::string::size_type)v21;
  v63.__r_.__value_.__l.__size_ = v22;
  xpc_object_t v56 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  v57 = (std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL;
  unint64_t v23 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  uint64_t v24 = (void *)off_1EBBDD2A0;
  if (!off_1EBBDD2A0)
  {
    CommandDriverFactory::create_default_global((uint64_t *)buf, v23);
    long long v25 = *(_OWORD *)buf;
    *(void *)buf = 0;
    *(void *)&buf[8] = 0;
    v26 = (std::__shared_weak_count *)*(&off_1EBBDD2A0 + 1);
    off_1EBBDD2A0 = v25;
    if (v26 && !atomic_fetch_add(&v26->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
    v27 = *(std::__shared_weak_count **)&buf[8];
    if (*(void *)&buf[8]
      && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
    uint64_t v24 = (void *)off_1EBBDD2A0;
  }
  v28 = (std::__shared_weak_count *)*(&off_1EBBDD2A0 + 1);
  v53[1] = v24;
  v53[2] = *((xpc_object_t *)&off_1EBBDD2A0 + 1);
  if (*(&off_1EBBDD2A0 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDD2A0 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(xpc_object_t *__return_ptr, void *))(*(void *)v24 + 96))(&object, v24);
  xpc_object_t v56 = 0;
  v57 = 0;
  if (v55)
  {
    v57 = std::__shared_weak_count::lock(v55);
    if (v57) {
      xpc_object_t v56 = object;
    }
    if (v55) {
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  if (v28 && !atomic_fetch_add(&v28->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
    std::__shared_weak_count::__release_weak(v28);
    xpc_object_t v29 = v56;
    if (v56) {
      goto LABEL_46;
    }
  }
  else
  {
    xpc_object_t v29 = v56;
    if (v56)
    {
LABEL_46:
      xpc_object_t v30 = *a2;
      v53[0] = v30;
      if (v30)
      {
        xpc_retain(v30);
      }
      else
      {
        xpc_object_t v30 = xpc_null_create();
        v53[0] = v30;
      }
      int DataPropertyTypeFromDict = abm::data::getDataPropertyTypeFromDict(v53);
      xpc_release(v30);
      v53[0] = 0;
      switch(DataPropertyTypeFromDict)
      {
        case 0:
          abm::data::DataAggregationProtocol::toDict((abm::data::DataAggregationProtocol *)(a1 + 168), &object);
          uint64_t v32 = *a3;
          *(void *)buf = object;
          xpc_object_t object = xpc_null_create();
          (*(void (**)(uint64_t, void, uint8_t *))(v32 + 16))(v32, 0, buf);
          xpc_release(*(xpc_object_t *)buf);
          xpc_release(object);
          break;
        case 1:
          v33 = (void *)v63.__r_.__value_.__r.__words[0];
          if (v63.__r_.__value_.__r.__words[0]) {
            v33 = _Block_copy(v63.__r_.__value_.__l.__data_);
          }
          v51 = v33;
          dispatch_object_t size = (dispatch_object_t)v63.__r_.__value_.__l.__size_;
          if (v63.__r_.__value_.__l.__size_) {
            dispatch_retain((dispatch_object_t)v63.__r_.__value_.__l.__size_);
          }
          (*(void (**)(xpc_object_t, void **))(*(void *)v29 + 48))(v29, &v51);
          if (size) {
            dispatch_release(size);
          }
          if (v51) {
            _Block_release(v51);
          }
          break;
        case 2:
          v34 = (void *)v63.__r_.__value_.__r.__words[0];
          if (v63.__r_.__value_.__r.__words[0]) {
            v34 = _Block_copy(v63.__r_.__value_.__l.__data_);
          }
          v49 = v34;
          dispatch_object_t v50 = (dispatch_object_t)v63.__r_.__value_.__l.__size_;
          if (v63.__r_.__value_.__l.__size_) {
            dispatch_retain((dispatch_object_t)v63.__r_.__value_.__l.__size_);
          }
          (*(void (**)(xpc_object_t, void **))(*(void *)v29 + 56))(v29, &v49);
          if (v50) {
            dispatch_release(v50);
          }
          if (v49) {
            _Block_release(v49);
          }
          break;
        case 3:
          v35 = (void *)v63.__r_.__value_.__r.__words[0];
          if (v63.__r_.__value_.__r.__words[0]) {
            v35 = _Block_copy(v63.__r_.__value_.__l.__data_);
          }
          v47 = v35;
          dispatch_object_t v48 = (dispatch_object_t)v63.__r_.__value_.__l.__size_;
          if (v63.__r_.__value_.__l.__size_) {
            dispatch_retain((dispatch_object_t)v63.__r_.__value_.__l.__size_);
          }
          (*(void (**)(xpc_object_t, void **))(*(void *)v29 + 64))(v29, &v47);
          if (v48) {
            dispatch_release(v48);
          }
          if (v47) {
            _Block_release(v47);
          }
          break;
        case 4:
          abm::data::DataPowerSave::toDict((abm::data::DataPowerSave *)(a1 + 232), &object);
          uint64_t v36 = *a3;
          *(void *)buf = object;
          xpc_object_t object = xpc_null_create();
          (*(void (**)(uint64_t, void, uint8_t *))(v36 + 16))(v36, 0, buf);
          xpc_release(*(xpc_object_t *)buf);
          xpc_release(object);
          break;
        default:
          v37 = *(NSObject **)(a1 + 88);
          if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)buf = 0;
            _os_log_error_impl(&dword_1C5767000, v37, OS_LOG_TYPE_ERROR, "Invalid property name", buf, 2u);
          }
          xpc_object_t v38 = xpc_null_create();
          uint64_t v39 = *a3;
          *(void *)buf = v38;
          xpc_object_t v40 = xpc_null_create();
          (*(void (**)(uint64_t, uint64_t, uint8_t *))(v39 + 16))(v39, 3760250880, buf);
          xpc_release(*(xpc_object_t *)buf);
          xpc_release(v40);
          break;
      }
    }
  }
  v41 = v57;
  if (v57 && !atomic_fetch_add(&v57->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
    std::__shared_weak_count::__release_weak(v41);
  }
  if (v63.__r_.__value_.__l.__size_) {
    dispatch_release((dispatch_object_t)v63.__r_.__value_.__l.__size_);
  }
  if (v63.__r_.__value_.__r.__words[0]) {
    _Block_release(v63.__r_.__value_.__l.__data_);
  }
  if (v61) {
    _Block_release(v61);
  }
  xpc_release(v60);
  xpc_object_t v60 = 0;
  if (v59) {
    std::__shared_weak_count::__release_weak(v59);
  }
  std::__shared_weak_count::__release_weak(v13);
}

void sub_1C585F3B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, xpc_object_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,std::__shared_weak_count *a28,xpc_object_t object,void *aBlock)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

xpc::dict *xpc::dict::dict(xpc::dict *this, void **a2)
{
  uint64_t v3 = *a2;
  *(void *)this = *a2;
  if (v3) {
    xpc_retain(v3);
  }
  else {
    *(void *)this = xpc_null_create();
  }
  return this;
}

uint64_t __copy_helper_block_e8_40c35_ZTSNSt3__18weak_ptrI10DataModuleEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c35_ZTSNSt3__18weak_ptrI10DataModuleEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void DataModule::finishInitialization_sync(std::__shared_weak_count **this)
{
  uint64_t v2 = (const char *)((uint64_t (*)(std::__shared_weak_count **))(*this)->__shared_weak_owners_)(this);
  size_t v3 = strlen(v2);
  if (v3 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  unint64_t v4 = (void *)v3;
  if (v3 >= 0x17)
  {
    uint64_t v6 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17) {
      uint64_t v6 = v3 | 7;
    }
    uint64_t v7 = v6 + 1;
    uint64_t v5 = (void **)operator new(v6 + 1);
    __dst[1] = v4;
    unint64_t v32 = v7 | 0x8000000000000000;
    __dst[0] = v5;
  }
  else
  {
    HIBYTE(v32) = v3;
    uint64_t v5 = __dst;
    if (!v3) {
      goto LABEL_9;
    }
  }
  memmove(v5, v2, (size_t)v4);
LABEL_9:
  *((unsigned char *)v4 + (void)v5) = 0;
  CFTypeRef cf = 0;
  AppleBasebandManager::create();
  long long v8 = v33;
  long long v33 = 0uLL;
  uint64_t v9 = this[20];
  *(_OWORD *)(this + 19) = v8;
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  uint64_t v10 = (std::__shared_weak_count *)*((void *)&v33 + 1);
  if (!*((void *)&v33 + 1)
    || atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v33 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    CFTypeRef v11 = cf;
    if (!cf) {
      goto LABEL_16;
    }
    goto LABEL_15;
  }
  ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
  std::__shared_weak_count::__release_weak(v10);
  CFTypeRef v11 = cf;
  if (cf) {
LABEL_15:
  }
    CFRelease(v11);
LABEL_16:
  if (SHIBYTE(v32) < 0) {
    operator delete(__dst[0]);
  }
  v12 = this[16];
  if (!v12 || (uint64_t v13 = this[15], (v14 = std::__shared_weak_count::lock(v12)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  v15 = v14;
  atomic_fetch_add_explicit(&v14->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v15);
  }
  uint64_t v16 = (const void *)*MEMORY[0x1E4F4CEF8];
  size_t v17 = strlen((const char *)*MEMORY[0x1E4F4CEF8]);
  if (v17 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v18 = (void *)v17;
  if (v17 >= 0x17)
  {
    uint64_t v20 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v17 | 7) != 0x17) {
      uint64_t v20 = v17 | 7;
    }
    uint64_t v21 = v20 + 1;
    xpc_object_t v19 = operator new(v20 + 1);
    __p[1] = v18;
    unint64_t v29 = v21 | 0x8000000000000000;
    __p[0] = v19;
    goto LABEL_29;
  }
  HIBYTE(v29) = v17;
  xpc_object_t v19 = __p;
  if (v17) {
LABEL_29:
  }
    memmove(v19, v16, (size_t)v18);
  *((unsigned char *)v18 + (void)v19) = 0;
  v24[0] = MEMORY[0x1E4F143A8];
  v24[1] = 1174405120;
  v24[2] = ___ZN10DataModule25finishInitialization_syncEv_block_invoke;
  v24[3] = &__block_descriptor_tmp_17_1;
  v24[4] = this;
  v24[5] = v13;
  long long v25 = v15;
  atomic_fetch_add_explicit(&v15->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  std::string::size_type v22 = _Block_copy(v24);
  unint64_t v23 = this[17];
  if (v23) {
    dispatch_retain((dispatch_object_t)this[17]);
  }
  aBlock = v22;
  dispatch_object_t object = v23;
  AppleBasebandManager::setEventHandler();
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (SHIBYTE(v29) < 0) {
    operator delete(__p[0]);
  }
  AppleBasebandManager::eventsOn((AppleBasebandManager *)this[19]);
  if (v25) {
    std::__shared_weak_count::__release_weak(v25);
  }
  std::__shared_weak_count::__release_weak(v15);
}

void sub_1C585F9FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a15) {
    std::__shared_weak_count::__release_weak(a15);
  }
  std::__shared_weak_count::__release_weak(v30);
  _Unwind_Resume(a1);
}

void ___ZN10DataModule25finishInitialization_syncEv_block_invoke(void *a1, abm::client::Event **a2)
{
  size_t v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    uint64_t v5 = a1[4];
    uint64_t v6 = std::__shared_weak_count::lock(v3);
    uint64_t v21 = v6;
    if (v6)
    {
      uint64_t v7 = v6;
      if (a1[5])
      {
        CFDictionaryRef v19 = (const __CFDictionary *)0xAAAAAAAAAAAAAAAALL;
        abm::client::Event::getData((uint64_t *)&v19, *a2);
        CFDictionaryRef v8 = v19;
        if (v19) {
          uint64_t v9 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
        }
        else {
          uint64_t v9 = 0;
        }
        if (v9)
        {
          v18[0] = 0xAAAAAAAAAAAAAAAALL;
          v18[1] = 0xAAAAAAAAAAAAAAAALL;
          ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v18, v19);
          __p[0] = 0;
          __p[1] = 0;
          uint64_t v17 = 0;
          ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v22, (const char *)*MEMORY[0x1E4F4C688]);
          ctu::cf::map_adapter::getString();
          MEMORY[0x1C8791110](&v22);
          uint64_t v17 = v15;
          *(_OWORD *)__p = v14;
          char v10 = HIBYTE(v15);
          if (v15 >= 0) {
            size_t v11 = HIBYTE(v15);
          }
          else {
            size_t v11 = *((void *)&v14 + 1);
          }
          if (v11 == strlen((const char *)*MEMORY[0x1E4F4CAE8]))
          {
            v12 = v15 >= 0 ? __p : (void **)__p[0];
            if (!memcmp(v12, (const void *)*MEMORY[0x1E4F4CAE8], v11))
            {
              v13[0] = MEMORY[0x1E4F143A8];
              v13[1] = 0x40000000;
              v13[2] = ___ZN10DataModule25finishInitialization_syncEv_block_invoke_2;
              v13[3] = &__block_descriptor_tmp_13_1;
              v13[4] = v5;
              ctu::SharedSynchronizable<DataModule>::execute_wrapped((uint64_t *)(v5 + 120), (uint64_t)v13);
              char v10 = HIBYTE(v17);
            }
          }
          if (v10 < 0) {
            operator delete(__p[0]);
          }
          MEMORY[0x1C8791160](v18);
          CFDictionaryRef v8 = v19;
        }
        if (v8) {
          CFRelease(v8);
        }
      }
      if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void ___ZN10DataModule25finishInitialization_syncEv_block_invoke_2(uint64_t a1)
{
  uint64_t v1 = *(DataModule **)(a1 + 32);
  DataModule::configureDataFormat_sync(v1);
  DataModule::configureQMAPSettings_sync(v1);
  DataModule::configureDataPowerSave_sync((dispatch_object_t *)v1);
  DataModule::configureCapabilities_sync(v1);
  DataModule::configureLowLatencyCapability_sync(v1);

  DataModule::configureLLDataFormat_sync(v1);
}

void DataModule::configureDataFormat_sync(DataModule *this)
{
  uint64_t v2 = (capabilities::abs *)capabilities::abs::dataAggregationProtocol(this);
  unsigned int v3 = v2;
  unint64_t v4 = (capabilities::abs *)capabilities::abs::dataAggregationDatagramMaxCount(v2);
  int v5 = (int)v4;
  int v6 = capabilities::abs::dataAggregationMaxSizeBytes(v4);
  if (v3 >= 3) {
    int v7 = 3;
  }
  else {
    int v7 = v3;
  }
  *((unsigned char *)this + 176) = v3 < 3;
  *((_DWORD *)this + 45) = v7;
  *((unsigned char *)this + 192) = 1;
  *((_DWORD *)this + 49) = v5;
  *((unsigned char *)this + 208) = 1;
  *((_DWORD *)this + 53) = v6;
  int v49 = -1431655766;
  int v52 = -1431655935;
  int v55 = -1431655935;
  LOBYTE(v49) = v3 < 3;
  dispatch_object_t v48 = &unk_1F20F0680;
  int v50 = v7;
  v51 = &unk_1F20F06C8;
  int v53 = v5;
  v54 = &unk_1F20F0710;
  int v56 = v6;
  CFDictionaryRef v8 = (std::__shared_weak_count *)*((void *)this + 16);
  if (!v8 || (uint64_t v9 = *((void *)this + 15), (v10 = std::__shared_weak_count::lock(v8)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  size_t v11 = v10;
  p_shared_weak_owners = &v10->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v10->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v11);
  }
  xpc_object_t v46 = (void *)0xAAAAAAAAAAAAAAAALL;
  dispatch_object_t v47 = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN10DataModule24configureDataFormat_syncEv_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_21_4;
  aBlock[4] = this;
  aBlock[5] = v9;
  xpc_object_t v45 = v11;
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  uint64_t v13 = _Block_copy(aBlock);
  long long v14 = *((void *)this + 17);
  if (v14) {
    dispatch_retain(v14);
  }
  xpc_object_t v46 = v13;
  dispatch_object_t v47 = v14;
  unint64_t v42 = 0xAAAAAAAAAAAAAAAALL;
  v43 = (std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL;
  uint64_t v15 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  uint64_t v16 = off_1EBBDD2A0;
  if (!off_1EBBDD2A0)
  {
    CommandDriverFactory::create_default_global((uint64_t *)&v57, v15);
    long long v17 = v57;
    long long v57 = 0uLL;
    uint64_t v18 = (std::__shared_weak_count *)*(&off_1EBBDD2A0 + 1);
    off_1EBBDD2A0 = v17;
    if (v18 && !atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
    CFDictionaryRef v19 = (std::__shared_weak_count *)*((void *)&v57 + 1);
    if (*((void *)&v57 + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v57 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
    uint64_t v16 = off_1EBBDD2A0;
  }
  uint64_t v20 = (std::__shared_weak_count *)*(&off_1EBBDD2A0 + 1);
  uint64_t v38 = v16;
  uint64_t v39 = *(&off_1EBBDD2A0 + 1);
  if (*(&off_1EBBDD2A0 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDD2A0 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(unint64_t *__return_ptr, uint64_t))(*(void *)v16 + 96))(&v40, v16);
  unint64_t v42 = 0;
  v43 = 0;
  uint64_t v21 = (capabilities::abs *)v41;
  if (v41)
  {
    v43 = std::__shared_weak_count::lock(v41);
    if (v43) {
      unint64_t v42 = v40;
    }
    uint64_t v21 = (capabilities::abs *)v41;
    if (v41) {
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  if (v20 && !atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
  uint64_t v22 = capabilities::abs::defaultDataInterfaceID(v21);
  unint64_t v23 = v42;
  if (v42)
  {
    uint64_t v24 = v22;
    char v30 = v49;
    unint64_t v29 = &unk_1F20F0680;
    int v31 = v50;
    char v33 = v52;
    unint64_t v32 = &unk_1F20F06C8;
    int v34 = v53;
    char v36 = v55;
    v35 = &unk_1F20F0710;
    int v37 = v56;
    long long v25 = v46;
    if (v46) {
      long long v25 = _Block_copy(v46);
    }
    v27 = v25;
    dispatch_object_t object = v47;
    if (v47) {
      dispatch_retain(v47);
    }
    (*(void (**)(unint64_t, void **, uint64_t, void **))(*(void *)v23 + 72))(v23, &v29, v24, &v27);
    if (object) {
      dispatch_release(object);
    }
    if (v27) {
      _Block_release(v27);
    }
  }
  v26 = v43;
  if (v43 && !atomic_fetch_add(&v43->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
    std::__shared_weak_count::__release_weak(v26);
  }
  if (v47) {
    dispatch_release(v47);
  }
  if (v46) {
    _Block_release(v46);
  }
  if (v45) {
    std::__shared_weak_count::__release_weak(v45);
  }
  std::__shared_weak_count::__release_weak(v11);
}

void sub_1C5860258(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,std::__shared_weak_count *a30)
{
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>::~callback(v31 - 128);
  if (a30) {
    std::__shared_weak_count::__release_weak(a30);
  }
  std::__shared_weak_count::__release_weak(v30);
  _Unwind_Resume(a1);
}

void DataModule::configureQMAPSettings_sync(DataModule *this)
{
  char v2 = capabilities::abs::dataFlowControlEnabled(this);
  *((unsigned char *)this + 224) = 1;
  *((unsigned char *)this + 225) = v2;
  unint64_t v34 = 0xAAAAAAAAAAAAAA01;
  char v33 = &unk_1F20F0758;
  BYTE1(v34) = v2;
  unsigned int v3 = (std::__shared_weak_count *)*((void *)this + 16);
  if (!v3 || (uint64_t v4 = *((void *)this + 15), (v5 = std::__shared_weak_count::lock(v3)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  int v6 = v5;
  p_shared_weak_owners = &v5->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v6);
  }
  uint64_t v31 = (void *)0xAAAAAAAAAAAAAAAALL;
  dispatch_object_t v32 = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN10DataModule26configureQMAPSettings_syncEv_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_27_1;
  aBlock[4] = this;
  aBlock[5] = v4;
  char v30 = v6;
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  CFDictionaryRef v8 = _Block_copy(aBlock);
  uint64_t v9 = *((void *)this + 17);
  if (v9) {
    dispatch_retain(v9);
  }
  uint64_t v31 = v8;
  dispatch_object_t v32 = v9;
  unint64_t v27 = 0xAAAAAAAAAAAAAAAALL;
  v28 = (std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL;
  char v10 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  uint64_t v11 = off_1EBBDD2A0;
  if (!off_1EBBDD2A0)
  {
    CommandDriverFactory::create_default_global((uint64_t *)&v35, v10);
    long long v12 = v35;
    long long v35 = 0uLL;
    uint64_t v13 = (std::__shared_weak_count *)*(&off_1EBBDD2A0 + 1);
    off_1EBBDD2A0 = v12;
    if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
    long long v14 = (std::__shared_weak_count *)*((void *)&v35 + 1);
    if (*((void *)&v35 + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v35 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
    uint64_t v11 = off_1EBBDD2A0;
  }
  uint64_t v15 = (std::__shared_weak_count *)*(&off_1EBBDD2A0 + 1);
  uint64_t v23 = v11;
  uint64_t v24 = *(&off_1EBBDD2A0 + 1);
  if (*(&off_1EBBDD2A0 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDD2A0 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(unint64_t *__return_ptr, uint64_t))(*(void *)v11 + 96))(&v25, v11);
  unint64_t v27 = 0;
  v28 = 0;
  if (v26)
  {
    v28 = std::__shared_weak_count::lock(v26);
    if (v28) {
      unint64_t v27 = v25;
    }
    if (v26) {
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
    unint64_t v16 = v27;
    if (!v27) {
      goto LABEL_33;
    }
  }
  else
  {
    unint64_t v16 = v27;
    if (!v27) {
      goto LABEL_33;
    }
  }
  __int16 v22 = v34;
  uint64_t v21 = &unk_1F20F0758;
  long long v17 = v31;
  if (v31) {
    long long v17 = _Block_copy(v31);
  }
  CFDictionaryRef v19 = v17;
  dispatch_object_t object = v32;
  if (v32) {
    dispatch_retain(v32);
  }
  (*(void (**)(unint64_t, void **, void **))(*(void *)v16 + 80))(v16, &v21, &v19);
  if (object) {
    dispatch_release(object);
  }
  if (v19) {
    _Block_release(v19);
  }
LABEL_33:
  uint64_t v18 = v28;
  if (v28 && !atomic_fetch_add(&v28->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
  if (v32) {
    dispatch_release(v32);
  }
  if (v31) {
    _Block_release(v31);
  }
  if (v30) {
    std::__shared_weak_count::__release_weak(v30);
  }
  std::__shared_weak_count::__release_weak(v6);
}

void sub_1C58606D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,std::__shared_weak_count *a26)
{
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>::~callback(v27 - 80);
  if (a26) {
    std::__shared_weak_count::__release_weak(a26);
  }
  std::__shared_weak_count::__release_weak(v26);
  _Unwind_Resume(a1);
}

void DataModule::configureDataPowerSave_sync(dispatch_object_t *this)
{
  char v2 = capabilities::abs::dataPowerSaveEnabled((capabilities::abs *)this);
  *((unsigned char *)this + 240) = 1;
  *((unsigned char *)this + 241) = v2;
  unsigned int v3 = (std::__shared_weak_count *)this[16];
  if (!v3 || (dispatch_object_t v4 = this[15], (v5 = std::__shared_weak_count::lock(v3)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  int v6 = v5;
  p_shared_weak_owners = &v5->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v6);
  }
  uint64_t v31 = (void *)0xAAAAAAAAAAAAAAAALL;
  dispatch_object_t v32 = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN10DataModule27configureDataPowerSave_syncEv_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_30_0;
  aBlock[4] = this;
  aBlock[5] = v4;
  char v30 = v6;
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  CFDictionaryRef v8 = _Block_copy(aBlock);
  uint64_t v9 = this[17];
  if (v9) {
    dispatch_retain(this[17]);
  }
  uint64_t v31 = v8;
  dispatch_object_t v32 = v9;
  unint64_t v27 = 0xAAAAAAAAAAAAAAAALL;
  v28 = (std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL;
  char v10 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  uint64_t v11 = off_1EBBDD2A0;
  if (!off_1EBBDD2A0)
  {
    CommandDriverFactory::create_default_global((uint64_t *)&v33, v10);
    long long v12 = v33;
    long long v33 = 0uLL;
    uint64_t v13 = (std::__shared_weak_count *)*(&off_1EBBDD2A0 + 1);
    off_1EBBDD2A0 = v12;
    if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
    long long v14 = (std::__shared_weak_count *)*((void *)&v33 + 1);
    if (*((void *)&v33 + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v33 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
    uint64_t v11 = off_1EBBDD2A0;
  }
  uint64_t v15 = (std::__shared_weak_count *)*(&off_1EBBDD2A0 + 1);
  uint64_t v23 = v11;
  uint64_t v24 = *(&off_1EBBDD2A0 + 1);
  if (*(&off_1EBBDD2A0 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDD2A0 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(unint64_t *__return_ptr, uint64_t))(*(void *)v11 + 96))(&v25, v11);
  unint64_t v27 = 0;
  v28 = 0;
  if (v26)
  {
    v28 = std::__shared_weak_count::lock(v26);
    if (v28) {
      unint64_t v27 = v25;
    }
    if (v26) {
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
    unint64_t v16 = v27;
    if (!v27) {
      goto LABEL_33;
    }
  }
  else
  {
    unint64_t v16 = v27;
    if (!v27) {
      goto LABEL_33;
    }
  }
  __int16 v22 = *((_WORD *)this + 120);
  uint64_t v21 = &unk_1F20F07A0;
  long long v17 = v31;
  if (v31) {
    long long v17 = _Block_copy(v31);
  }
  CFDictionaryRef v19 = v17;
  dispatch_object_t object = v32;
  if (v32) {
    dispatch_retain(v32);
  }
  (*(void (**)(unint64_t, void **, void **))(*(void *)v16 + 88))(v16, &v21, &v19);
  if (object) {
    dispatch_release(object);
  }
  if (v19) {
    _Block_release(v19);
  }
LABEL_33:
  uint64_t v18 = v28;
  if (v28 && !atomic_fetch_add(&v28->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
  if (v32) {
    dispatch_release(v32);
  }
  if (v31) {
    _Block_release(v31);
  }
  if (v30) {
    std::__shared_weak_count::__release_weak(v30);
  }
  std::__shared_weak_count::__release_weak(v6);
}

void sub_1C5860B10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,std::__shared_weak_count *a26)
{
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>::~callback(v27 - 64);
  if (a26) {
    std::__shared_weak_count::__release_weak(a26);
  }
  std::__shared_weak_count::__release_weak(v26);
  _Unwind_Resume(a1);
}

void DataModule::configureCapabilities_sync(DataModule *this)
{
  char v2 = (std::__shared_weak_count *)*((void *)this + 16);
  if (!v2 || (v3 = *((void *)this + 15), (dispatch_object_t v4 = std::__shared_weak_count::lock(v2)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  int v5 = v4;
  p_shared_weak_owners = &v4->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v5);
  }
  v28 = (void *)0xAAAAAAAAAAAAAAAALL;
  dispatch_object_t v29 = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN10DataModule26configureCapabilities_syncEv_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_33_1;
  aBlock[4] = this;
  aBlock[5] = v3;
  uint64_t v27 = v5;
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  int v7 = _Block_copy(aBlock);
  CFDictionaryRef v8 = *((void *)this + 17);
  if (v8) {
    dispatch_retain(v8);
  }
  v28 = v7;
  dispatch_object_t v29 = v8;
  unint64_t v24 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v25 = (std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL;
  uint64_t v9 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  uint64_t v10 = off_1EBBDD2A0;
  if (!off_1EBBDD2A0)
  {
    CommandDriverFactory::create_default_global((uint64_t *)&v30, v9);
    long long v11 = v30;
    long long v30 = 0uLL;
    long long v12 = (std::__shared_weak_count *)*(&off_1EBBDD2A0 + 1);
    off_1EBBDD2A0 = v11;
    if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
    uint64_t v13 = (std::__shared_weak_count *)*((void *)&v30 + 1);
    if (*((void *)&v30 + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v30 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
    uint64_t v10 = off_1EBBDD2A0;
  }
  long long v14 = (std::__shared_weak_count *)*(&off_1EBBDD2A0 + 1);
  uint64_t v20 = v10;
  uint64_t v21 = *(&off_1EBBDD2A0 + 1);
  if (*(&off_1EBBDD2A0 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDD2A0 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(unint64_t *__return_ptr, uint64_t))(*(void *)v10 + 96))(&v22, v10);
  unint64_t v24 = 0;
  unint64_t v25 = 0;
  if (v23)
  {
    unint64_t v25 = std::__shared_weak_count::lock(v23);
    if (v25) {
      unint64_t v24 = v22;
    }
    if (v23) {
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
    unint64_t v15 = v24;
    if (!v24) {
      goto LABEL_33;
    }
  }
  else
  {
    unint64_t v15 = v24;
    if (!v24) {
      goto LABEL_33;
    }
  }
  unint64_t v16 = v28;
  if (v28) {
    unint64_t v16 = _Block_copy(v28);
  }
  uint64_t v18 = v16;
  dispatch_object_t object = v29;
  if (v29) {
    dispatch_retain(v29);
  }
  (*(void (**)(unint64_t, void **))(*(void *)v15 + 96))(v15, &v18);
  if (object) {
    dispatch_release(object);
  }
  if (v18) {
    _Block_release(v18);
  }
LABEL_33:
  long long v17 = v25;
  if (v25 && !atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  if (v29) {
    dispatch_release(v29);
  }
  if (v28) {
    _Block_release(v28);
  }
  if (v27) {
    std::__shared_weak_count::__release_weak(v27);
  }
  std::__shared_weak_count::__release_weak(v5);
}

void sub_1C5860F14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,std::__shared_weak_count *a24)
{
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>::~callback(v25 - 64);
  if (a24) {
    std::__shared_weak_count::__release_weak(a24);
  }
  std::__shared_weak_count::__release_weak(v24);
  _Unwind_Resume(a1);
}

void DataModule::configureLowLatencyCapability_sync(DataModule *this)
{
  if (!capabilities::radio::supportsLowLatencyData(this)) {
    return;
  }
  char v2 = (std::__shared_weak_count *)*((void *)this + 16);
  if (!v2 || (v3 = *((void *)this + 15), (dispatch_object_t v4 = std::__shared_weak_count::lock(v2)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  int v5 = v4;
  p_shared_weak_owners = &v4->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v5);
  }
  v28 = (void *)0xAAAAAAAAAAAAAAAALL;
  dispatch_object_t v29 = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN10DataModule34configureLowLatencyCapability_syncEv_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_36_1;
  aBlock[4] = this;
  aBlock[5] = v3;
  uint64_t v27 = v5;
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  int v7 = _Block_copy(aBlock);
  CFDictionaryRef v8 = *((void *)this + 17);
  if (v8) {
    dispatch_retain(v8);
  }
  v28 = v7;
  dispatch_object_t v29 = v8;
  unint64_t v24 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v25 = (std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL;
  uint64_t v9 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  uint64_t v10 = off_1EBBDD2A0;
  if (!off_1EBBDD2A0)
  {
    CommandDriverFactory::create_default_global((uint64_t *)&v30, v9);
    long long v11 = v30;
    long long v30 = 0uLL;
    long long v12 = (std::__shared_weak_count *)*(&off_1EBBDD2A0 + 1);
    off_1EBBDD2A0 = v11;
    if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
    uint64_t v13 = (std::__shared_weak_count *)*((void *)&v30 + 1);
    if (*((void *)&v30 + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v30 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
    uint64_t v10 = off_1EBBDD2A0;
  }
  long long v14 = (std::__shared_weak_count *)*(&off_1EBBDD2A0 + 1);
  uint64_t v20 = v10;
  uint64_t v21 = *(&off_1EBBDD2A0 + 1);
  if (*(&off_1EBBDD2A0 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDD2A0 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(unint64_t *__return_ptr, uint64_t))(*(void *)v10 + 96))(&v22, v10);
  unint64_t v24 = 0;
  uint64_t v25 = 0;
  if (v23)
  {
    uint64_t v25 = std::__shared_weak_count::lock(v23);
    if (v25) {
      unint64_t v24 = v22;
    }
    if (v23) {
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
    unint64_t v15 = v24;
    if (v24) {
      goto LABEL_26;
    }
  }
  else
  {
    unint64_t v15 = v24;
    if (v24)
    {
LABEL_26:
      unint64_t v16 = v28;
      if (v28) {
        unint64_t v16 = _Block_copy(v28);
      }
      uint64_t v18 = v16;
      dispatch_object_t object = v29;
      if (v29) {
        dispatch_retain(v29);
      }
      (*(void (**)(unint64_t, void **))(*(void *)v15 + 104))(v15, &v18);
      if (object) {
        dispatch_release(object);
      }
      if (v18) {
        _Block_release(v18);
      }
    }
  }
  long long v17 = v25;
  if (v25 && !atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  if (v29) {
    dispatch_release(v29);
  }
  if (v28) {
    _Block_release(v28);
  }
  if (v27) {
    std::__shared_weak_count::__release_weak(v27);
  }
  std::__shared_weak_count::__release_weak(v5);
}

void sub_1C5861320(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,std::__shared_weak_count *a24)
{
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>::~callback(v25 - 64);
  if (a24) {
    std::__shared_weak_count::__release_weak(a24);
  }
  std::__shared_weak_count::__release_weak(v24);
  _Unwind_Resume(a1);
}

void DataModule::configureLLDataFormat_sync(DataModule *this)
{
  char v2 = (capabilities::abs *)capabilities::radio::supportsLowLatencyData(this);
  if (v2)
  {
    uint64_t v3 = (capabilities::abs *)capabilities::abs::dataAggregationProtocol(v2);
    unsigned int v4 = v3;
    int v5 = (capabilities::abs *)capabilities::abs::LLDataAggregationDatagramMaxCount(v3);
    int v6 = (int)v5;
    int v7 = capabilities::abs::LLDataAggregationMaxSizeBytes(v5);
    if (v4 >= 3) {
      int v8 = 3;
    }
    else {
      int v8 = v4;
    }
    *((unsigned char *)this + 176) = v4 < 3;
    *((_DWORD *)this + 45) = v8;
    *((unsigned char *)this + 256) = 1;
    *((_DWORD *)this + 65) = v6;
    *((unsigned char *)this + 272) = 1;
    *((_DWORD *)this + 69) = v7;
    int v50 = -1431655766;
    int v53 = -1431655935;
    int v56 = -1431655935;
    LOBYTE(v50) = v4 < 3;
    int v49 = &unk_1F20F0680;
    int v51 = v8;
    int v52 = &unk_1F20F06C8;
    int v54 = v6;
    int v55 = &unk_1F20F0710;
    int v57 = v7;
    uint64_t v9 = (std::__shared_weak_count *)*((void *)this + 16);
    if (!v9 || (v10 = *((void *)this + 15), (long long v11 = std::__shared_weak_count::lock(v9)) == 0)) {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    long long v12 = v11;
    p_shared_weak_owners = &v11->__shared_weak_owners_;
    atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v12);
    }
    dispatch_object_t v47 = (void *)0xAAAAAAAAAAAAAAAALL;
    dispatch_object_t v48 = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 1174405120;
    aBlock[2] = ___ZN10DataModule26configureLLDataFormat_syncEv_block_invoke;
    aBlock[3] = &__block_descriptor_tmp_24_4;
    aBlock[4] = this;
    aBlock[5] = v10;
    xpc_object_t v46 = v12;
    atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
    long long v14 = _Block_copy(aBlock);
    unint64_t v15 = *((void *)this + 17);
    if (v15) {
      dispatch_retain(v15);
    }
    dispatch_object_t v47 = v14;
    dispatch_object_t v48 = v15;
    unint64_t v43 = 0xAAAAAAAAAAAAAAAALL;
    v44 = (std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL;
    unint64_t v16 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
    uint64_t v17 = off_1EBBDD2A0;
    if (!off_1EBBDD2A0)
    {
      CommandDriverFactory::create_default_global((uint64_t *)&v58, v16);
      long long v18 = v58;
      long long v58 = 0uLL;
      CFDictionaryRef v19 = (std::__shared_weak_count *)*(&off_1EBBDD2A0 + 1);
      off_1EBBDD2A0 = v18;
      if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
      uint64_t v20 = (std::__shared_weak_count *)*((void *)&v58 + 1);
      if (*((void *)&v58 + 1)
        && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v58 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
      uint64_t v17 = off_1EBBDD2A0;
    }
    uint64_t v21 = (std::__shared_weak_count *)*(&off_1EBBDD2A0 + 1);
    uint64_t v39 = v17;
    uint64_t v40 = *(&off_1EBBDD2A0 + 1);
    if (*(&off_1EBBDD2A0 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDD2A0 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
    (*(void (**)(unint64_t *__return_ptr, uint64_t))(*(void *)v17 + 96))(&v41, v17);
    unint64_t v43 = 0;
    v44 = 0;
    unint64_t v22 = (capabilities::abs *)v42;
    if (v42)
    {
      v44 = std::__shared_weak_count::lock(v42);
      if (v44) {
        unint64_t v43 = v41;
      }
      unint64_t v22 = (capabilities::abs *)v42;
      if (v42) {
        std::__shared_weak_count::__release_weak(v42);
      }
    }
    if (v21 && !atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
    uint64_t v23 = capabilities::abs::LLDataInterfaceID(v22);
    unint64_t v24 = v43;
    if (v43)
    {
      uint64_t v25 = v23;
      char v31 = v50;
      long long v30 = &unk_1F20F0680;
      int v32 = v51;
      char v34 = v53;
      long long v33 = &unk_1F20F06C8;
      int v35 = v54;
      char v37 = v56;
      char v36 = &unk_1F20F0710;
      int v38 = v57;
      v26 = v47;
      if (v47) {
        v26 = _Block_copy(v47);
      }
      v28 = v26;
      dispatch_object_t object = v48;
      if (v48) {
        dispatch_retain(v48);
      }
      (*(void (**)(unint64_t, void **, uint64_t, void **))(*(void *)v24 + 72))(v24, &v30, v25, &v28);
      if (object) {
        dispatch_release(object);
      }
      if (v28) {
        _Block_release(v28);
      }
    }
    uint64_t v27 = v44;
    if (v44 && !atomic_fetch_add(&v44->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
    if (v48) {
      dispatch_release(v48);
    }
    if (v47) {
      _Block_release(v47);
    }
    if (v46) {
      std::__shared_weak_count::__release_weak(v46);
    }
    std::__shared_weak_count::__release_weak(v12);
  }
}

void sub_1C5861894(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,std::__shared_weak_count *a30)
{
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>::~callback(v31 - 128);
  if (a30) {
    std::__shared_weak_count::__release_weak(a30);
  }
  std::__shared_weak_count::__release_weak(v30);
  _Unwind_Resume(a1);
}

void ___ZN10DataModule24configureDataFormat_syncEv_block_invoke(void *a1, uint64_t *a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    uint64_t v5 = a1[4];
    int v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      int v7 = v6;
      if (a1[5])
      {
        uint64_t v8 = *a2;
        if (*a2) {
          uint64_t v9 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
        }
        else {
          uint64_t v9 = 0;
        }
        uint64_t v10 = *(NSObject **)(v5 + 88);
        if (v9)
        {
          if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
          {
            int v11 = 138412290;
            uint64_t v12 = v8;
            _os_log_error_impl(&dword_1C5767000, v10, OS_LOG_TYPE_ERROR, "Failed setting DataFormat: %@", (uint8_t *)&v11, 0xCu);
          }
        }
        else if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(v11) = 0;
          _os_log_impl(&dword_1C5767000, v10, OS_LOG_TYPE_DEFAULT, "#I Success setting DataFormat", (uint8_t *)&v11, 2u);
        }
      }
      if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void ___ZN10DataModule26configureLLDataFormat_syncEv_block_invoke(void *a1, uint64_t *a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    uint64_t v5 = a1[4];
    int v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      int v7 = v6;
      if (a1[5])
      {
        uint64_t v8 = *a2;
        if (*a2) {
          uint64_t v9 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
        }
        else {
          uint64_t v9 = 0;
        }
        uint64_t v10 = *(NSObject **)(v5 + 88);
        if (v9)
        {
          if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
          {
            int v11 = 138412290;
            uint64_t v12 = v8;
            _os_log_error_impl(&dword_1C5767000, v10, OS_LOG_TYPE_ERROR, "Failed setting Low Latency DataFormat: %@", (uint8_t *)&v11, 0xCu);
          }
        }
        else if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(v11) = 0;
          _os_log_impl(&dword_1C5767000, v10, OS_LOG_TYPE_DEFAULT, "#I Success setting Low Latency DataFormat", (uint8_t *)&v11, 2u);
        }
      }
      if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void ___ZN10DataModule26configureQMAPSettings_syncEv_block_invoke(void *a1, uint64_t *a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    uint64_t v5 = a1[4];
    int v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      int v7 = v6;
      if (a1[5])
      {
        uint64_t v8 = *a2;
        if (*a2) {
          uint64_t v9 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
        }
        else {
          uint64_t v9 = 0;
        }
        uint64_t v10 = *(NSObject **)(v5 + 88);
        if (v9)
        {
          if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
          {
            int v11 = 138412290;
            uint64_t v12 = v8;
            _os_log_error_impl(&dword_1C5767000, v10, OS_LOG_TYPE_ERROR, "Failed setting QMAPSettings: %@", (uint8_t *)&v11, 0xCu);
          }
        }
        else if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(v11) = 0;
          _os_log_impl(&dword_1C5767000, v10, OS_LOG_TYPE_DEFAULT, "#I Success setting QMAPSettings", (uint8_t *)&v11, 2u);
        }
      }
      if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void ___ZN10DataModule27configureDataPowerSave_syncEv_block_invoke(void *a1, uint64_t *a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    uint64_t v5 = a1[4];
    int v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      int v7 = v6;
      if (a1[5])
      {
        uint64_t v8 = *a2;
        if (*a2) {
          uint64_t v9 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
        }
        else {
          uint64_t v9 = 0;
        }
        uint64_t v10 = *(NSObject **)(v5 + 88);
        if (v9)
        {
          if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
          {
            int v11 = 138412290;
            uint64_t v12 = v8;
            _os_log_error_impl(&dword_1C5767000, v10, OS_LOG_TYPE_ERROR, "Failed setting DataPowerSave: %@", (uint8_t *)&v11, 0xCu);
          }
        }
        else if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(v11) = 0;
          _os_log_impl(&dword_1C5767000, v10, OS_LOG_TYPE_DEFAULT, "#I Success setting DataPowerSave", (uint8_t *)&v11, 2u);
        }
      }
      if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void ___ZN10DataModule26configureCapabilities_syncEv_block_invoke(void *a1, uint64_t *a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    uint64_t v5 = a1[4];
    int v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      int v7 = v6;
      if (a1[5])
      {
        uint64_t v8 = *a2;
        if (*a2) {
          uint64_t v9 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
        }
        else {
          uint64_t v9 = 0;
        }
        uint64_t v10 = *(NSObject **)(v5 + 88);
        if (v9)
        {
          if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
          {
            int v11 = 138412290;
            uint64_t v12 = v8;
            _os_log_error_impl(&dword_1C5767000, v10, OS_LOG_TYPE_ERROR, "Failed setting Capabilities: %@", (uint8_t *)&v11, 0xCu);
          }
        }
        else if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(v11) = 0;
          _os_log_impl(&dword_1C5767000, v10, OS_LOG_TYPE_DEFAULT, "#I Success setting Capabilities", (uint8_t *)&v11, 2u);
        }
      }
      if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void ___ZN10DataModule34configureLowLatencyCapability_syncEv_block_invoke(void *a1, uint64_t *a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    uint64_t v5 = a1[4];
    int v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      int v7 = v6;
      if (a1[5])
      {
        uint64_t v8 = *a2;
        if (*a2) {
          uint64_t v9 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
        }
        else {
          uint64_t v9 = 0;
        }
        uint64_t v10 = *(NSObject **)(v5 + 88);
        if (v9)
        {
          if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
          {
            int v11 = 138412290;
            uint64_t v12 = v8;
            _os_log_error_impl(&dword_1C5767000, v10, OS_LOG_TYPE_ERROR, "Failed setting low latency Capability: %@", (uint8_t *)&v11, 0xCu);
          }
        }
        else if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(v11) = 0;
          _os_log_impl(&dword_1C5767000, v10, OS_LOG_TYPE_DEFAULT, "#I Success setting low latency Capability", (uint8_t *)&v11, 2u);
        }
      }
      if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void ___ZN10DataModule20getDataProperty_syncEN3xpc4dictEN8dispatch5blockIU13block_pointerFviS1_EEE_block_invoke(uint64_t a1, uint64_t *a2, void *a3)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(void *)(a1 + 32);
  unsigned int v28 = 0;
  xpc_object_t v7 = xpc_null_create();
  xpc_object_t object = v7;
  uint64_t v8 = *(std::__shared_weak_count **)(a1 + 48);
  if (v8)
  {
    uint64_t v9 = std::__shared_weak_count::lock(v8);
    v26 = v9;
    if (v9)
    {
      uint64_t v10 = v9;
      if (*(void *)(a1 + 40))
      {
        if (*a2) {
          int v11 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
        }
        else {
          int v11 = 0;
        }
        if (v11)
        {
          uint64_t v12 = *(NSObject **)(v6 + 88);
          if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
          {
            xpc::dict::dict((xpc::dict *)&v24, (void **)(a1 + 56));
            DataPropertyNameFromDict = abm::data::getDataPropertyNameFromDict(&v24);
            uint64_t v20 = *a2;
            *(_DWORD *)buf = 136315394;
            long long v30 = DataPropertyNameFromDict;
            __int16 v31 = 2112;
            uint64_t v32 = v20;
            _os_log_error_impl(&dword_1C5767000, v12, OS_LOG_TYPE_ERROR, "Failed getting %s: %@", buf, 0x16u);
            xpc_release(v24);
            xpc_object_t v24 = 0;
          }
          unsigned int v28 = -534716414;
        }
        else
        {
          uint64_t v13 = MEMORY[0x1C8792D30](*a3);
          long long v14 = *(NSObject **)(v6 + 88);
          if (v13 == MEMORY[0x1E4F145D8])
          {
            if (os_log_type_enabled(*(os_log_t *)(v6 + 88), OS_LOG_TYPE_ERROR))
            {
              xpc::dict::dict((xpc::dict *)&v22, (void **)(a1 + 56));
              uint64_t v21 = abm::data::getDataPropertyNameFromDict(&v22);
              *(_DWORD *)buf = 136315138;
              long long v30 = v21;
              _os_log_error_impl(&dword_1C5767000, v14, OS_LOG_TYPE_ERROR, "Failed getting %s: invalid response data", buf, 0xCu);
              xpc_release(v22);
              xpc_object_t v22 = 0;
            }
            unsigned int v28 = -534716416;
          }
          else
          {
            if (os_log_type_enabled(*(os_log_t *)(v6 + 88), OS_LOG_TYPE_DEFAULT))
            {
              xpc_object_t v15 = *(xpc_object_t *)(a1 + 56);
              xpc_object_t v23 = v15;
              if (v15)
              {
                xpc_retain(v15);
              }
              else
              {
                xpc_object_t v15 = xpc_null_create();
                xpc_object_t v23 = v15;
              }
              unint64_t v16 = abm::data::getDataPropertyNameFromDict(&v23);
              *(_DWORD *)buf = 136315138;
              long long v30 = v16;
              _os_log_impl(&dword_1C5767000, v14, OS_LOG_TYPE_DEFAULT, "#I Success getting %s", buf, 0xCu);
              xpc_release(v15);
              xpc_object_t v23 = 0;
            }
            xpc_object_t v17 = (xpc_object_t)*a3;
            if (v17 && MEMORY[0x1C8792D30](v17) == MEMORY[0x1E4F14590]) {
              xpc_retain(v17);
            }
            else {
              xpc_object_t v17 = xpc_null_create();
            }
            xpc_object_t v18 = xpc_null_create();
            xpc_object_t object = v17;
            xpc_release(v7);
            xpc_release(v18);
          }
        }
        dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int &,xpc::dict&>((uint64_t *)(a1 + 64), &v28, &object);
      }
      if (!atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
  }
  xpc_release(object);
}

void sub_1C586245C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t a10, uint64_t a11, xpc_object_t a12, char a13, uint64_t a14, xpc_object_t object)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void *__copy_helper_block_e8_40c35_ZTSNSt3__18weak_ptrI10DataModuleEE56c15_ZTSN3xpc4dictE64c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE(void *a1, void *a2)
{
  uint64_t v4 = a2[6];
  a1[5] = a2[5];
  a1[6] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 16), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = (void *)a2[7];
  a1[7] = v5;
  if (v5)
  {
    xpc_retain(v5);
    xpc_object_t result = (void *)a2[8];
    if (!result) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  a1[7] = xpc_null_create();
  xpc_object_t result = (void *)a2[8];
  if (result) {
LABEL_7:
  }
    xpc_object_t result = _Block_copy(result);
LABEL_8:
  a1[8] = result;
  return result;
}

void __destroy_helper_block_e8_40c35_ZTSNSt3__18weak_ptrI10DataModuleEE56c15_ZTSN3xpc4dictE64c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE(uint64_t a1)
{
  char v2 = *(const void **)(a1 + 64);
  if (v2) {
    _Block_release(v2);
  }
  xpc_release(*(xpc_object_t *)(a1 + 56));
  *(void *)(a1 + 56) = 0;
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3)
  {
    std::__shared_weak_count::__release_weak(v3);
  }
}

uint64_t dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,xpc::object)>::~callback(uint64_t a1)
{
  char v2 = *(NSObject **)(a1 + 8);
  if (v2) {
    dispatch_release(v2);
  }
  if (*(void *)a1) {
    _Block_release(*(const void **)a1);
  }
  return a1;
}

uint64_t ctu::Loggable<DataModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig(uint64_t a1)
{
  return MEMORY[0x1F417DA50](a1 + 8);
}

size_t ctu::Loggable<DataModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = (const char *)(*(uint64_t (**)(void))(*(void *)(a1 - 48) + 16))();
  size_t result = strlen(v3);
  if (result >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v5 = result;
  if (result >= 0x17)
  {
    uint64_t v6 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17) {
      uint64_t v6 = result | 7;
    }
    uint64_t v7 = v6 + 1;
    uint64_t v8 = operator new(v6 + 1);
    a2[1] = v5;
    a2[2] = v7 | 0x8000000000000000;
    *a2 = v8;
    a2 = v8;
  }
  else
  {
    *((unsigned char *)a2 + 23) = result;
    if (!result)
    {
      *(unsigned char *)a2 = 0;
      return result;
    }
  }
  size_t result = (size_t)memmove(a2, v3, v5);
  *((unsigned char *)a2 + v5) = 0;
  return result;
}

uint64_t ctu::Loggable<DataModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return MEMORY[0x1F417DD10](a1 + 8);
}

void *ctu::Loggable<DataModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_1F20F8030;
  MEMORY[0x1C8790F40](a1 + 1);
  return a1;
}

void ctu::Loggable<DataModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_1F20F8030;
  MEMORY[0x1C8790F40](a1 + 1);

  operator delete(a1);
}

void std::__shared_ptr_pointer<DataModule *,std::shared_ptr<DataModule> ctu::SharedSynchronizable<DataModule>::make_shared_ptr<DataModule>(DataModule*)::{lambda(DataModule *)#1},std::allocator<DataModule>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<DataModule *,std::shared_ptr<DataModule> ctu::SharedSynchronizable<DataModule>::make_shared_ptr<DataModule>(DataModule*)::{lambda(DataModule *)#1},std::allocator<DataModule>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<DataModule *,std::shared_ptr<DataModule> ctu::SharedSynchronizable<DataModule>::make_shared_ptr<DataModule>(DataModule*)::{lambda(DataModule *)#1},std::allocator<DataModule>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableI10DataModuleE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_") {
    return a1 + 24;
  }
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableI10DataModuleE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableI10DataModuleE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_"))return 0; {
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableI10DataModuleE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  }
  return 0;
}

uint64_t std::shared_ptr<DataModule> ctu::SharedSynchronizable<DataModule>::make_shared_ptr<DataModule>(DataModule*)::{lambda(DataModule*)#1}::operator() const(DataModule*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void *ctu::SharedLoggable<DataModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(void *a1)
{
  *a1 = &unk_1F20F8030;
  MEMORY[0x1C8790F40](a1 + 1);
  char v2 = a1[12];
  if (v2) {
    dispatch_release(v2);
  }
  unint64_t v3 = a1[11];
  if (v3) {
    dispatch_release(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[10];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

void ctu::SharedLoggable<DataModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(void *a1)
{
  *a1 = &unk_1F20F8030;
  MEMORY[0x1C8790F40](a1 + 1);
  char v2 = a1[12];
  if (v2) {
    dispatch_release(v2);
  }
  unint64_t v3 = a1[11];
  if (v3) {
    dispatch_release(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[10];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }

  operator delete(a1);
}

void *___ZNK3ctu20SharedSynchronizableI10DataModuleE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke(uint64_t a1)
{
  return (*(void *(**)(void *__return_ptr))(**(void **)(a1 + 40) + 16))(*(void **)(a1 + 40));
}

void ctu::SharedSynchronizable<DataModule>::execute_wrapped(uint64_t *a1, uint64_t a2)
{
  unint64_t v3 = (std::__shared_weak_count *)a1[1];
  if (!v3 || (v5 = *a1, (uint64_t v6 = std::__shared_weak_count::lock(v3)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v7 = v6;
  uint64_t v8 = a1[2];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 1174405120;
  block[2] = ___ZNK3ctu20SharedSynchronizableI10DataModuleE15execute_wrappedEU13block_pointerFvvE_block_invoke;
  block[3] = &unk_1F20F80F8;
  block[5] = v5;
  uint64_t v12 = v7;
  p_shared_owners = &v7->__shared_owners_;
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  block[4] = a2;
  dispatch_async(v8, block);
  uint64_t v10 = v12;
  if (!v12 || atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      return;
    }
LABEL_8:
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    return;
  }
  ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
  std::__shared_weak_count::__release_weak(v10);
  if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_8;
  }
}

uint64_t ___ZNK3ctu20SharedSynchronizableI10DataModuleE15execute_wrappedEU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t __copy_helper_block_e8_40c39_ZTSNSt3__110shared_ptrIK10DataModuleEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c39_ZTSNSt3__110shared_ptrIK10DataModuleEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void dispatch::async<void ctu::SharedSynchronizable<DataModule>::execute_wrapped<DataModule::initialize(dispatch::group_session)::$_0>(DataModule::initialize(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<DataModule::initialize(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<DataModule::initialize(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count ****)a1;
  DataModule::finishInitialization_sync(**(std::__shared_weak_count ****)a1);
  operator delete(v2);
  unint64_t v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    uint64_t v4 = (void *)a1;
  }
  else
  {
    uint64_t v4 = (void *)a1;
  }
  operator delete(v4);
}

void sub_1C5862C38(_Unwind_Exception *a1)
{
  operator delete(v2);
  uint64_t v4 = (std::__shared_weak_count *)v1[2];
  if (v4)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t __cxx_global_var_init_40()
{
  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<ctu::power::assertion>::~PthreadMutexGuardPolicy, &ctu::Singleton<ctu::power::assertion,ctu::power::assertion,ctu::PthreadMutexGuardPolicy<ctu::power::assertion>>::sInstance, &dword_1C5767000);
  }
  return result;
}

uint64_t __cxx_global_var_init_41()
{
  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<CommandDriverFactory>::~PthreadMutexGuardPolicy, &ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance, &dword_1C5767000);
  }
  return result;
}

void ABMServerFactory::create(uint64_t *a1@<X8>)
{
}

void ABMServerFactory::ABMServerFactory(ABMServerFactory *this)
{
  Factory::Factory(this);
  *uint64_t v1 = &unk_1F20F8138;
}

{
  void *v1;

  Factory::Factory(this);
  *uint64_t v1 = &unk_1F20F8138;
}

void ABMServerFactory::~ABMServerFactory(ABMServerFactory *this)
{
  Factory::~Factory(this);

  operator delete(v1);
}

void ABMServerFactory::createServiceManager(uint64_t *a1@<X1>, _OWORD *a2@<X8>)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[1];
  v4[0] = *a1;
  v4[1] = (uint64_t)v2;
  if (v2) {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  double v3 = ABMServiceManager::create(v4, a2);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *, double))v2->__on_zero_shared)(v2, v3);
    std::__shared_weak_count::__release_weak(v2);
  }
}

void sub_1C5862E7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

double ABMServerFactory::createBBServerConnection@<D0>(_OWORD *a1@<X8>)
{
  _ZNSt3__115allocate_sharedB8ne180100I19QMIServerConnectionNS_9allocatorIS1_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_((uint64_t *)v4);
  double result = v4[0];
  *a1 = *(_OWORD *)v4;
  return result;
}

void ABMServerFactory::createRouterServer(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void _ZNSt3__115allocate_sharedB8ne180100I16ABMServerFactoryNS_9allocatorIS1_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(uint64_t *a1@<X8>)
{
  uint64_t v2 = (std::__shared_weak_count *)operator new(0x30uLL);
  v2->__shared_owners_ = 0;
  p_shared_owners = &v2->__shared_owners_;
  v2->__shared_weak_owners_ = 0;
  v2->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20F8188;
  Factory::Factory((Factory *)&v2[1]);
  v2[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20F8138;
  *a1 = v4;
  a1[1] = (uint64_t)v2;
  shared_weak_owners = (std::__shared_weak_count *)v2[1].__shared_weak_owners_;
  if (shared_weak_owners)
  {
    if (shared_weak_owners->__shared_owners_ != -1) {
      return;
    }
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v2->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v2[1].__shared_owners_ = v4;
    v2[1].__shared_weak_owners_ = (uint64_t)v2;
    std::__shared_weak_count::__release_weak(shared_weak_owners);
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      return;
    }
  }
  else
  {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v2->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v2[1].__shared_owners_ = v4;
    v2[1].__shared_weak_owners_ = (uint64_t)v2;
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      return;
    }
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);

  std::__shared_weak_count::__release_weak(v2);
}

void sub_1C5863004(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<ABMServerFactory>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20F8188;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ABMServerFactory>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20F8188;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t std::__shared_ptr_emplace<ABMServerFactory>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 24))();
}

void _ZNSt3__115allocate_sharedB8ne180100I19QMIServerConnectionNS_9allocatorIS1_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(uint64_t *a1@<X8>)
{
  uint64_t v2 = (std::__shared_weak_count *)operator new(0x90uLL);
  v2->__shared_owners_ = 0;
  p_shared_owners = &v2->__shared_owners_;
  v2->__shared_weak_owners_ = 0;
  v2->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20F81D8;
  uint64_t v4 = MEMORY[0x1C8790B00](&v2[1]);
  *a1 = v4;
  a1[1] = (uint64_t)v2;
  shared_weak_owners = (std::__shared_weak_count *)v2[1].__shared_weak_owners_;
  if (shared_weak_owners)
  {
    if (shared_weak_owners->__shared_owners_ != -1) {
      return;
    }
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v2->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v2[1].__shared_owners_ = v4;
    v2[1].__shared_weak_owners_ = (uint64_t)v2;
    std::__shared_weak_count::__release_weak(shared_weak_owners);
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      return;
    }
  }
  else
  {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v2->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v2[1].__shared_owners_ = v4;
    v2[1].__shared_weak_owners_ = (uint64_t)v2;
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      return;
    }
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);

  std::__shared_weak_count::__release_weak(v2);
}

void sub_1C58631BC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<QMIServerConnection>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20F81D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<QMIServerConnection>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20F81D8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t std::__shared_ptr_emplace<QMIServerConnection>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

const char *AccessorySimulatorDelegate::getName(AccessorySimulatorDelegate *this)
{
  return "AccessorySimulator.delegate";
}

uint64_t AccessorySimulatorDelegate::create@<X0>(void *a1@<X0>, NSObject **a2@<X1>, std::__shared_weak_count_vtbl **a3@<X8>)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  unint64_t v16 = 0;
  xpc_object_t v17 = 0;
  uint64_t v6 = (std::__shared_weak_count_vtbl *)operator new(0x80uLL);
  uint64_t v7 = a1[3];
  if (!v7) {
    goto LABEL_4;
  }
  if ((void *)v7 != a1)
  {
    uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 16))(v7);
LABEL_4:
    CFDictionaryRef v19 = (void *)v7;
    goto LABEL_6;
  }
  CFDictionaryRef v19 = v18;
  (*(void (**)(void *, void *))(*a1 + 24))(a1, v18);
LABEL_6:
  uint64_t v8 = *a2;
  xpc_object_t v15 = v8;
  if (v8) {
    dispatch_retain(v8);
  }
  AccessorySimulatorDelegate::AccessorySimulatorDelegate((uint64_t)v6, v18, &v15);
  int v11 = (std::__shared_weak_count *)operator new(0x20uLL);
  v11->__shared_owners_ = 0;
  p_shared_owners = &v11->__shared_owners_;
  v11->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20F82C0;
  v11->__shared_weak_owners_ = 0;
  v11[1].__vftable = v6;
  on_zero_shared = (std::__shared_weak_count *)v6->__on_zero_shared;
  if (!on_zero_shared)
  {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v6->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v6;
    v6->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v11;
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  if (on_zero_shared->__shared_owners_ == -1)
  {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v6->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v6;
    v6->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v11;
    std::__shared_weak_count::__release_weak(on_zero_shared);
    if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL))
    {
LABEL_13:
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
LABEL_14:
  unint64_t v16 = v6;
  xpc_object_t v17 = v11;
  if (v8) {
    dispatch_release(v8);
  }
  if (v19 == v18)
  {
    (*(void (**)(void *))(v18[0] + 32))(v18);
  }
  else if (v19)
  {
    (*(void (**)(void *, uint64_t, uint64_t))(*v19 + 40))(v19, v9, v10);
  }
  uint64_t result = (*((uint64_t (**)(std::__shared_weak_count_vtbl *))v6->~__shared_weak_count + 7))(v6);
  *a3 = v6;
  a3[1] = (std::__shared_weak_count_vtbl *)v11;
  return result;
}

void sub_1C58634E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12)
{
  operator delete(v12);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  _Unwind_Resume(a1);
}

uint64_t AccessorySimulatorDelegate::AccessorySimulatorDelegate(uint64_t a1, void *a2, NSObject **a3)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  *(void *)a1 = &unk_1F20F8228;
  uint64_t v5 = (void *)a2[3];
  if (v5)
  {
    if (v5 == a2)
    {
      int v11 = v10;
      (*(void (**)(void *, void *))(*a2 + 24))(a2, v10);
    }
    else
    {
      int v11 = (void *)(*(uint64_t (**)(void *))(*v5 + 16))(v5);
    }
  }
  else
  {
    int v11 = 0;
  }
  uint64_t v6 = *a3;
  uint64_t v9 = v6;
  if (v6) {
    dispatch_retain(v6);
  }
  uint64_t v7 = (char *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
  AccessoriesDelegateBase::AccessoriesDelegateBase(a1, (uint64_t)v10, &v9, v7);
  if (v6) {
    dispatch_release(v6);
  }
  if (v11 == v10)
  {
    (*(void (**)(void *))(v10[0] + 32))(v10);
  }
  else if (v11)
  {
    (*(void (**)(void *))(*v11 + 40))(v11);
  }
  *(void *)a1 = &unk_1F20F8228;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = 1065353216;
  return a1;
}

void sub_1C5863764(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (v10) {
    dispatch_release(v10);
  }
  std::function<void ()(ctu::cf::CFSharedRef<__CFError>,std::vector<abm::AccessoryInfo>)>::~function(&a10);
  _Unwind_Resume(a1);
}

void AccessorySimulatorDelegate::~AccessorySimulatorDelegate(AccessorySimulatorDelegate *this)
{
  *(void *)this = &unk_1F20F8228;
  uint64_t v2 = (void *)*((void *)this + 13);
  if (v2)
  {
    do
    {
      double v3 = (void *)*v2;
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = (void *)*((void *)this + 11);
  *((void *)this + 11) = 0;
  if (v4) {
    operator delete(v4);
  }

  AccessoriesDelegateBase::~AccessoriesDelegateBase(this);
}

{
  void *v2;
  void *v3;
  void *v4;
  uint64_t vars8;

  *(void *)this = &unk_1F20F8228;
  uint64_t v2 = (void *)*((void *)this + 13);
  if (v2)
  {
    do
    {
      double v3 = (void *)*v2;
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = (void *)*((void *)this + 11);
  *((void *)this + 11) = 0;
  if (v4) {
    operator delete(v4);
  }

  AccessoriesDelegateBase::~AccessoriesDelegateBase(this);
}

{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t vars8;

  *(void *)this = &unk_1F20F8228;
  uint64_t v2 = (void *)*((void *)this + 13);
  if (v2)
  {
    do
    {
      double v3 = (void *)*v2;
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = (void *)*((void *)this + 11);
  *((void *)this + 11) = 0;
  if (v4) {
    operator delete(v4);
  }
  AccessoriesDelegateBase::~AccessoriesDelegateBase(this);

  operator delete(v5);
}

uint64_t AccessorySimulatorDelegate::handleServerCommand(uint64_t a1, unsigned __int8 *a2, void **a3)
{
  uint64_t v6 = (const void *)*MEMORY[0x1E4F4D1E0];
  size_t v7 = strlen((const char *)*MEMORY[0x1E4F4D1E0]);
  if (v7 > 0x7FFFFFFFFFFFFFF7) {
LABEL_71:
  }
    std::string::__throw_length_error[abi:ne180100]();
  size_t v8 = v7;
  if (v7 >= 0x17)
  {
    uint64_t v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17) {
      uint64_t v10 = v7 | 7;
    }
    uint64_t v11 = v10 + 1;
    p_dst = (void **)operator new(v10 + 1);
    size_t v50 = v8;
    int64_t v51 = v11 | 0x8000000000000000;
    __dst = p_dst;
    goto LABEL_8;
  }
  HIBYTE(v51) = v7;
  p_dst = (void **)&__dst;
  if (v7) {
LABEL_8:
  }
    memmove(p_dst, v6, v8);
  BOOL v12 = 0;
  *((unsigned char *)p_dst + v8) = 0;
  uint64_t v13 = a2[23];
  if ((v13 & 0x80u) == 0) {
    uint64_t v14 = a2[23];
  }
  else {
    uint64_t v14 = *((void *)a2 + 1);
  }
  size_t v15 = HIBYTE(v51);
  int v16 = SHIBYTE(v51);
  if (v51 < 0) {
    size_t v15 = v50;
  }
  if (v14 != v15)
  {
LABEL_28:
    if ((v16 & 0x80000000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_32;
  }
  if (v51 >= 0) {
    xpc_object_t v17 = (void **)&__dst;
  }
  else {
    xpc_object_t v17 = __dst;
  }
  if ((v13 & 0x80) != 0)
  {
    BOOL v12 = memcmp(*(const void **)a2, v17, *((void *)a2 + 1)) == 0;
    goto LABEL_28;
  }
  if (a2[23])
  {
    uint64_t v18 = v13 - 1;
    CFDictionaryRef v19 = a2;
    do
    {
      int v21 = *v19++;
      int v20 = v21;
      int v23 = *(unsigned __int8 *)v17;
      xpc_object_t v17 = (void **)((char *)v17 + 1);
      int v22 = v23;
      BOOL v24 = v18-- != 0;
      char v25 = v24;
      BOOL v12 = v20 == v22;
    }
    while (v20 == v22 && (v25 & 1) != 0);
    goto LABEL_28;
  }
  BOOL v12 = 1;
  if ((SHIBYTE(v51) & 0x80000000) == 0)
  {
LABEL_29:
    if (!v12) {
      goto LABEL_37;
    }
    goto LABEL_33;
  }
LABEL_32:
  operator delete(__dst);
  if (!v12) {
    goto LABEL_37;
  }
LABEL_33:
  v47[0] = MEMORY[0x1E4F143A8];
  v47[1] = 1174405120;
  v47[2] = ___ZN26AccessorySimulatorDelegate19handleServerCommandENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEN3xpc4dictE_block_invoke;
  v47[3] = &__block_descriptor_tmp_32;
  v26 = *a3;
  v47[4] = a1;
  xpc_object_t object = v26;
  if (v26) {
    xpc_retain(v26);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  ctu::SharedSynchronizable<AccessoriesDelegateBase>::execute_wrapped((uint64_t *)(a1 + 8), (uint64_t)v47);
  xpc_release(object);
  xpc_object_t object = 0;
LABEL_37:
  uint64_t v27 = (const void *)*MEMORY[0x1E4F4D1A8];
  size_t v28 = strlen((const char *)*MEMORY[0x1E4F4D1A8]);
  if (v28 > 0x7FFFFFFFFFFFFFF7) {
    goto LABEL_71;
  }
  size_t v29 = v28;
  if (v28 >= 0x17)
  {
    uint64_t v31 = (v28 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v28 | 7) != 0x17) {
      uint64_t v31 = v28 | 7;
    }
    uint64_t v32 = v31 + 1;
    long long v30 = (void **)operator new(v31 + 1);
    size_t v50 = v29;
    int64_t v51 = v32 | 0x8000000000000000;
    __dst = v30;
    goto LABEL_44;
  }
  HIBYTE(v51) = v28;
  long long v30 = (void **)&__dst;
  if (v28) {
LABEL_44:
  }
    memmove(v30, v27, v29);
  BOOL v33 = 0;
  *((unsigned char *)v30 + v29) = 0;
  uint64_t v34 = a2[23];
  if ((v34 & 0x80u) == 0) {
    uint64_t v35 = a2[23];
  }
  else {
    uint64_t v35 = *((void *)a2 + 1);
  }
  size_t v36 = HIBYTE(v51);
  int v37 = SHIBYTE(v51);
  if (v51 < 0) {
    size_t v36 = v50;
  }
  if (v35 != v36)
  {
LABEL_64:
    if ((v37 & 0x80000000) == 0) {
      goto LABEL_65;
    }
LABEL_69:
    operator delete(__dst);
    if (!v33) {
      return v12;
    }
    goto LABEL_66;
  }
  if (v51 >= 0) {
    int v38 = (void **)&__dst;
  }
  else {
    int v38 = __dst;
  }
  if ((v34 & 0x80) != 0)
  {
    BOOL v33 = memcmp(*(const void **)a2, v38, *((void *)a2 + 1)) == 0;
    goto LABEL_64;
  }
  if (a2[23])
  {
    uint64_t v39 = v34 - 1;
    do
    {
      int v41 = *a2++;
      int v40 = v41;
      int v43 = *(unsigned __int8 *)v38;
      int v38 = (void **)((char *)v38 + 1);
      int v42 = v43;
      BOOL v24 = v39-- != 0;
      char v44 = v24;
      BOOL v33 = v40 == v42;
    }
    while (v40 == v42 && (v44 & 1) != 0);
    goto LABEL_64;
  }
  BOOL v33 = 1;
  if (SHIBYTE(v51) < 0) {
    goto LABEL_69;
  }
LABEL_65:
  if (v33)
  {
LABEL_66:
    v46[0] = MEMORY[0x1E4F143A8];
    v46[1] = 0x40000000;
    v46[2] = ___ZN26AccessorySimulatorDelegate19handleServerCommandENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEN3xpc4dictE_block_invoke_3;
    v46[3] = &__block_descriptor_tmp_4;
    v46[4] = a1;
    ctu::SharedSynchronizable<AccessoriesDelegateBase>::execute_wrapped((uint64_t *)(a1 + 8), (uint64_t)v46);
    return 1;
  }
  return v12;
}

void ___ZN26AccessorySimulatorDelegate19handleServerCommandENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEN3xpc4dictE_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v1 = *(void **)(a1 + 40);
  xpc_object_t object = v1;
  CFTypeRef v73 = 0;
  if (v1) {
    xpc_retain(v1);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  uint64_t v3 = abm::AccessoryInfo::create();
  int v5 = v4;
  xpc_release(object);
  xpc_object_t object = 0;
  unint64_t v6 = (unsigned __int16)v3;
  unint64_t v7 = *(void *)(v2 + 96);
  if ((v3 & 0xFFFF0000) != 0x10000)
  {
    if (v7)
    {
      uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
      v10.i16[0] = vaddlv_u8(v10);
      if (v10.u32[0] > 1uLL)
      {
        unint64_t v11 = (unsigned __int16)v3;
        if (v7 <= (unsigned __int16)v3) {
          unint64_t v11 = (unsigned __int16)v3 % v7;
        }
      }
      else
      {
        unint64_t v11 = (v7 - 1) & (unsigned __int16)v3;
      }
      CFDictionaryRef v19 = *(void ***)(*(void *)(v2 + 88) + 8 * v11);
      if (v19)
      {
        int v20 = (unsigned __int16 *)*v19;
        if (*v19)
        {
          if (v10.u32[0] < 2uLL)
          {
            while (1)
            {
              uint64_t v22 = *((void *)v20 + 1);
              if (v22 == (unsigned __int16)v3)
              {
                if (v20[8] == (unsigned __int16)v3) {
                  goto LABEL_121;
                }
              }
              else if ((v22 & (v7 - 1)) != v11)
              {
                goto LABEL_48;
              }
              int v20 = *(unsigned __int16 **)v20;
              if (!v20) {
                goto LABEL_48;
              }
            }
          }
          do
          {
            unint64_t v21 = *((void *)v20 + 1);
            if (v21 == (unsigned __int16)v3)
            {
              if (v20[8] == (unsigned __int16)v3) {
                goto LABEL_121;
              }
            }
            else
            {
              if (v21 >= v7) {
                v21 %= v7;
              }
              if (v21 != v11) {
                break;
              }
            }
            int v20 = *(unsigned __int16 **)v20;
          }
          while (v20);
        }
      }
    }
    else
    {
      unint64_t v11 = 0xAAAAAAAAAAAAAAAALL;
    }
LABEL_48:
    int v20 = (unsigned __int16 *)operator new(0x20uLL);
    *(void *)int v20 = 0;
    *((void *)v20 + 1) = (unsigned __int16)v3;
    v20[8] = v3;
    v20[9] = -1;
    *(void *)(v20 + 10) = 0;
    v20[14] = 0;
    float v23 = (float)(unint64_t)(*(void *)(v2 + 112) + 1);
    float v24 = *(float *)(v2 + 120);
    if (v7 && (float)(v24 * (float)v7) >= v23)
    {
      uint64_t v25 = *(void *)(v2 + 88);
      v26 = *(void **)(v25 + 8 * v11);
      if (v26)
      {
LABEL_51:
        *(void *)int v20 = *v26;
        goto LABEL_119;
      }
LABEL_113:
      *(void *)int v20 = *(void *)(v2 + 104);
      *(void *)(v2 + 104) = v20;
      *(void *)(v25 + 8 * v11) = v2 + 104;
      if (!*(void *)v20)
      {
LABEL_120:
        ++*(void *)(v2 + 112);
LABEL_121:
        CFTypeRef v18 = 0;
        *(void *)(v20 + 9) = v3;
        *(_DWORD *)(v20 + 13) = v5;
        goto LABEL_122;
      }
      unint64_t v52 = *(void *)(*(void *)v20 + 8);
      if ((v7 & (v7 - 1)) != 0)
      {
        if (v52 >= v7) {
          v52 %= v7;
        }
      }
      else
      {
        v52 &= v7 - 1;
      }
      v26 = (void *)(*(void *)(v2 + 88) + 8 * v52);
LABEL_119:
      void *v26 = v20;
      goto LABEL_120;
    }
    BOOL v27 = 1;
    if (v7 >= 3) {
      BOOL v27 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v28 = v27 | (2 * v7);
    unint64_t v29 = vcvtps_u32_f32(v23 / v24);
    if (v28 <= v29) {
      size_t prime = v29;
    }
    else {
      size_t prime = v28;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v7 = *(void *)(v2 + 96);
    }
    if (prime > v7)
    {
LABEL_62:
      if (prime >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v31 = operator new(8 * prime);
      uint64_t v32 = *(void **)(v2 + 88);
      *(void *)(v2 + 88) = v31;
      if (v32) {
        operator delete(v32);
      }
      uint64_t v33 = 0;
      *(void *)(v2 + 96) = prime;
      do
        *(void *)(*(void *)(v2 + 88) + 8 * v33++) = 0;
      while (prime != v33);
      uint64_t v35 = v2 + 104;
      uint64_t v34 = *(void **)(v2 + 104);
      if (!v34) {
        goto LABEL_94;
      }
      size_t v36 = v34[1];
      size_t v37 = prime - 1;
      if ((prime & (prime - 1)) == 0)
      {
        size_t v38 = v36 & v37;
        *(void *)(*(void *)(v2 + 88) + 8 * v38) = v35;
        for (i = (void *)*v34; *v34; i = (void *)*v34)
        {
          size_t v40 = i[1] & v37;
          if (v40 == v38)
          {
            uint64_t v34 = i;
          }
          else
          {
            uint64_t v41 = *(void *)(v2 + 88);
            if (*(void *)(v41 + 8 * v40))
            {
              void *v34 = *i;
              uint64_t v42 = 8 * v40;
              void *i = **(void **)(*(void *)(v2 + 88) + v42);
              **(void **)(*(void *)(v2 + 88) + v42) = i;
            }
            else
            {
              *(void *)(v41 + 8 * v40) = v34;
              uint64_t v34 = i;
              size_t v38 = v40;
            }
          }
        }
        goto LABEL_94;
      }
      if (v36 >= prime) {
        v36 %= prime;
      }
      *(void *)(*(void *)(v2 + 88) + 8 * v36) = v35;
      xpc_object_t v46 = (void *)*v34;
      if (!*v34)
      {
LABEL_94:
        unint64_t v7 = prime;
        if ((prime & (prime - 1)) != 0) {
          goto LABEL_95;
        }
        goto LABEL_112;
      }
      while (1)
      {
        size_t v48 = v46[1];
        if (v48 >= prime) {
          v48 %= prime;
        }
        if (v48 == v36) {
          goto LABEL_88;
        }
        uint64_t v49 = *(void *)(v2 + 88);
        if (*(void *)(v49 + 8 * v48))
        {
          void *v34 = *v46;
          uint64_t v47 = 8 * v48;
          *xpc_object_t v46 = **(void **)(*(void *)(v2 + 88) + v47);
          **(void **)(*(void *)(v2 + 88) + v47) = v46;
          xpc_object_t v46 = v34;
LABEL_88:
          uint64_t v34 = v46;
          xpc_object_t v46 = (void *)*v46;
          if (!v46) {
            goto LABEL_94;
          }
        }
        else
        {
          *(void *)(v49 + 8 * v48) = v34;
          uint64_t v34 = v46;
          xpc_object_t v46 = (void *)*v46;
          size_t v36 = v48;
          if (!v46) {
            goto LABEL_94;
          }
        }
      }
    }
    if (prime < v7)
    {
      unint64_t v43 = vcvtps_u32_f32((float)*(unint64_t *)(v2 + 112) / *(float *)(v2 + 120));
      if (v7 < 3 || (uint8x8_t v44 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v44.i16[0] = vaddlv_u8(v44), v44.u32[0] > 1uLL))
      {
        unint64_t v43 = std::__next_prime(v43);
      }
      else
      {
        uint64_t v45 = 1 << -(char)__clz(v43 - 1);
        if (v43 >= 2) {
          unint64_t v43 = v45;
        }
      }
      if (prime <= v43) {
        size_t prime = v43;
      }
      if (prime < v7)
      {
        if (!prime)
        {
          int64_t v51 = *(void **)(v2 + 88);
          *(void *)(v2 + 88) = 0;
          if (v51) {
            operator delete(v51);
          }
          unint64_t v7 = 0;
          *(void *)(v2 + 96) = 0;
          goto LABEL_112;
        }
        goto LABEL_62;
      }
      unint64_t v7 = *(void *)(v2 + 96);
    }
    if ((v7 & (v7 - 1)) != 0)
    {
LABEL_95:
      if (v7 <= (unsigned __int16)v3)
      {
        unint64_t v11 = (unsigned __int16)v3 % v7;
        uint64_t v25 = *(void *)(v2 + 88);
        v26 = *(void **)(v25 + 8 * v11);
        if (v26) {
          goto LABEL_51;
        }
      }
      else
      {
        unint64_t v11 = (unsigned __int16)v3;
        uint64_t v25 = *(void *)(v2 + 88);
        v26 = *(void **)(v25 + 8 * (unsigned __int16)v3);
        if (v26) {
          goto LABEL_51;
        }
      }
      goto LABEL_113;
    }
LABEL_112:
    unint64_t v11 = (v7 - 1) & (unsigned __int16)v3;
    uint64_t v25 = *(void *)(v2 + 88);
    v26 = *(void **)(v25 + 8 * v11);
    if (v26) {
      goto LABEL_51;
    }
    goto LABEL_113;
  }
  if (!v7) {
    goto LABEL_29;
  }
  uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
  v8.i16[0] = vaddlv_u8(v8);
  if (v8.u32[0] > 1uLL)
  {
    unint64_t v9 = (unsigned __int16)v3;
    if (v7 <= (unsigned __int16)v3) {
      unint64_t v9 = (unsigned __int16)v3 % v7;
    }
  }
  else
  {
    unint64_t v9 = (v7 - 1) & (unsigned __int16)v3;
  }
  uint64_t v12 = *(void *)(v2 + 88);
  uint64_t v13 = *(uint64_t ****)(v12 + 8 * v9);
  if (!v13 || (uint64_t v14 = *v13) == 0)
  {
LABEL_29:
    __p = operator new(0x48uLL);
    long long v70 = xmmword_1C59A1170;
    strcpy((char *)__p, "Invalid AccessoryID, could not find in cached accessory dictionary");
    (*(void (**)(CFTypeRef *__return_ptr, uint64_t, void **, uint64_t))(*(void *)v2 + 48))(&cf, v2, &__p, 5);
    CFTypeRef v18 = cf;
    CFTypeRef v73 = cf;
    CFTypeRef cf = 0;
    if (SHIBYTE(v70) < 0) {
      operator delete(__p);
    }
    goto LABEL_122;
  }
  unint64_t v15 = v7 - 1;
  if (v8.u32[0] < 2uLL)
  {
    while (1)
    {
      int v16 = v14[1];
      if (v16 == (uint64_t *)(unsigned __int16)v3)
      {
        if (*((unsigned __int16 *)v14 + 8) == (unsigned __int16)v3) {
          goto LABEL_100;
        }
      }
      else if (((unint64_t)v16 & v15) != v9)
      {
        goto LABEL_29;
      }
      uint64_t v14 = (uint64_t **)*v14;
      if (!v14) {
        goto LABEL_29;
      }
    }
  }
  while (1)
  {
    unint64_t v17 = (unint64_t)v14[1];
    if (v17 == (unsigned __int16)v3) {
      break;
    }
    if (v17 >= v7) {
      v17 %= v7;
    }
    if (v17 != v9) {
      goto LABEL_29;
    }
LABEL_24:
    uint64_t v14 = (uint64_t **)*v14;
    if (!v14) {
      goto LABEL_29;
    }
  }
  if (*((unsigned __int16 *)v14 + 8) != (unsigned __int16)v3) {
    goto LABEL_24;
  }
LABEL_100:
  if (v8.u32[0] > 1uLL)
  {
    unint64_t v50 = (unsigned __int16)v3;
    if (v7 <= (unsigned __int16)v3) {
      unint64_t v50 = (unsigned __int16)v3 % v7;
    }
  }
  else
  {
    unint64_t v50 = (v7 - 1) & (unsigned __int16)v3;
  }
  int v55 = *(void ***)(v12 + 8 * v50);
  if (!v55 || (int v56 = *v55) == 0)
  {
LABEL_151:
    CFTypeRef v18 = 0;
    goto LABEL_122;
  }
  if (v8.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v57 = v56[1];
      if (v57 == (unsigned __int16)v3)
      {
        if (*((unsigned __int16 *)v56 + 8) == (unsigned __int16)v3) {
          goto LABEL_152;
        }
      }
      else if ((v57 & v15) != v50)
      {
        goto LABEL_151;
      }
      CFTypeRef v18 = 0;
      int v56 = (void *)*v56;
      if (!v56) {
        goto LABEL_122;
      }
    }
  }
  while (2)
  {
    unint64_t v58 = v56[1];
    if (v58 != (unsigned __int16)v3)
    {
      if (v58 >= v7) {
        v58 %= v7;
      }
      if (v58 != v50) {
        goto LABEL_151;
      }
      goto LABEL_146;
    }
    if (*((unsigned __int16 *)v56 + 8) != (unsigned __int16)v3)
    {
LABEL_146:
      CFTypeRef v18 = 0;
      int v56 = (void *)*v56;
      if (!v56) {
        goto LABEL_122;
      }
      continue;
    }
    break;
  }
LABEL_152:
  if (v8.u32[0] > 1uLL)
  {
    if (v7 <= (unsigned __int16)v3) {
      unint64_t v6 = (unsigned __int16)v3 % v7;
    }
  }
  else
  {
    unint64_t v6 = v15 & (unsigned __int16)v3;
  }
  v59 = *(void **)(v12 + 8 * v6);
  do
  {
    xpc_object_t v60 = v59;
    v59 = (void *)*v59;
  }
  while (v59 != v56);
  if (v60 == (void *)(v2 + 104)) {
    goto LABEL_169;
  }
  unint64_t v61 = v60[1];
  if (v8.u32[0] > 1uLL)
  {
    if (v61 >= v7) {
      v61 %= v7;
    }
  }
  else
  {
    v61 &= v15;
  }
  if (v61 != v6)
  {
LABEL_169:
    if (!*v56) {
      goto LABEL_170;
    }
    unint64_t v62 = *(void *)(*v56 + 8);
    if (v8.u32[0] > 1uLL)
    {
      if (v62 >= v7) {
        v62 %= v7;
      }
    }
    else
    {
      v62 &= v15;
    }
    if (v62 != v6) {
LABEL_170:
    }
      *(void *)(v12 + 8 * v6) = 0;
  }
  uint64_t v63 = *v56;
  if (*v56)
  {
    unint64_t v64 = *(void *)(v63 + 8);
    if (v8.u32[0] > 1uLL)
    {
      if (v64 >= v7) {
        v64 %= v7;
      }
    }
    else
    {
      v64 &= v15;
    }
    if (v64 != v6)
    {
      *(void *)(*(void *)(v2 + 88) + 8 * v64) = v60;
      uint64_t v63 = *v56;
    }
  }
  *xpc_object_t v60 = v63;
  *int v56 = 0;
  --*(void *)(v2 + 112);
  operator delete(v56);
  CFTypeRef v18 = 0;
LABEL_122:
  if (*(unsigned char *)(v2 + 80) && *(void *)(v2 + 72))
  {
    CFTypeRef v68 = v18;
    if (v18) {
      CFRetain(v18);
    }
    int v53 = operator new(0xCuLL);
    v66 = v53 + 3;
    v67 = (char *)(v53 + 3);
    *(void *)int v53 = v3;
    v53[2] = v5;
    v65 = v53;
    uint64_t v54 = *(void *)(v2 + 72);
    if (!v54) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    (*(void (**)(uint64_t, CFTypeRef *, void **))(*(void *)v54 + 48))(v54, &v68, &v65);
    if (v65)
    {
      v66 = v65;
      operator delete(v65);
    }
    if (v68) {
      CFRelease(v68);
    }
  }
  if (v18) {
    CFRelease(v18);
  }
}

void sub_1C5864534(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, const void *a18)
{
  operator delete(v18);
  ctu::cf::CFSharedRef<__CFError>::~CFSharedRef(&a18);
  _Unwind_Resume(a1);
}

void sub_1C5864550(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  int v5 = va_arg(va1, const void *);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  ctu::cf::CFSharedRef<__CFError>::~CFSharedRef((const void **)va);
  ctu::cf::CFSharedRef<__CFError>::~CFSharedRef((const void **)va1);
  _Unwind_Resume(a1);
}

void sub_1C586456C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, char a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, xpc_object_t object,const void *a21)
{
  if (a18 < 0)
  {
    operator delete(__p);
    ctu::cf::CFSharedRef<__CFError>::~CFSharedRef(&a21);
    _Unwind_Resume(a1);
  }
  ctu::cf::CFSharedRef<__CFError>::~CFSharedRef(&a21);
  _Unwind_Resume(a1);
}

xpc_object_t __copy_helper_block_e8_40c15_ZTSN3xpc4dictE(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(a2 + 40);
  *(void *)(a1 + 40) = v3;
  if (v3) {
    return xpc_retain(v3);
  }
  xpc_object_t result = xpc_null_create();
  *(void *)(a1 + 40) = result;
  return result;
}

void __destroy_helper_block_e8_40c15_ZTSN3xpc4dictE(uint64_t a1)
{
  *(void *)(a1 + 40) = 0;
}

void ___ZN26AccessorySimulatorDelegate19handleServerCommandENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEN3xpc4dictE_block_invoke_3(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (*(unsigned char *)(v1 + 80))
  {
    uint64_t v2 = *(uint64_t **)(v1 + 104);
    if (v2)
    {
      uint64_t v3 = *(void *)(v1 + 72);
      if (v3)
      {
        *((_WORD *)v2 + 10) = 1;
LABEL_5:
        uint64_t v9 = *(uint64_t *)((char *)v2 + 18);
        int v10 = *(_DWORD *)((char *)v2 + 26);
        __p = 0;
        uint64_t v12 = 0;
        uint64_t v13 = 0;
        CFTypeRef cf = 0;
        int v4 = operator new(0xCuLL);
        uint64_t v12 = v4 + 3;
        uint64_t v13 = (char *)(v4 + 3);
        *(void *)int v4 = v9;
        uint64_t v4[2] = v10;
        __p = v4;
        (*(void (**)(uint64_t, CFTypeRef *, void **))(*(void *)v3 + 48))(v3, &cf, &__p);
        if (__p)
        {
          uint64_t v12 = __p;
          operator delete(__p);
        }
        if (cf) {
          CFRelease(cf);
        }
        while (1)
        {
          uint64_t v2 = (uint64_t *)*v2;
          if (!v2) {
            break;
          }
          uint64_t v3 = *(void *)(v1 + 72);
          *((_WORD *)v2 + 10) = 1;
          if (v3) {
            goto LABEL_5;
          }
        }
      }
      else
      {
        do
        {
          *((_WORD *)v2 + 10) = 1;
          uint64_t v2 = (uint64_t *)*v2;
        }
        while (v2);
      }
    }
  }
  if (*(void *)(v1 + 112))
  {
    int v5 = *(void **)(v1 + 104);
    if (v5)
    {
      do
      {
        unint64_t v6 = (void *)*v5;
        operator delete(v5);
        int v5 = v6;
      }
      while (v6);
    }
    *(void *)(v1 + 104) = 0;
    uint64_t v7 = *(void *)(v1 + 96);
    if (v7)
    {
      for (uint64_t i = 0; i != v7; ++i)
        *(void *)(*(void *)(v1 + 88) + 8 * i) = 0;
    }
    *(void *)(v1 + 112) = 0;
  }
}

void sub_1C58647DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, const void *a14)
{
  if (__p)
  {
    operator delete(__p);
    ctu::cf::CFSharedRef<__CFError>::~CFSharedRef(&a14);
    _Unwind_Resume(a1);
  }
  ctu::cf::CFSharedRef<__CFError>::~CFSharedRef(&a14);
  _Unwind_Resume(a1);
}

void AccessorySimulatorDelegate::start(AccessorySimulatorDelegate *this)
{
  v1[0] = MEMORY[0x1E4F143A8];
  v1[1] = 0x40000000;
  v1[2] = ___ZN26AccessorySimulatorDelegate5startEv_block_invoke;
  v1[3] = &__block_descriptor_tmp_5_3;
  v1[4] = this;
  ctu::SharedSynchronizable<AccessoriesDelegateBase>::execute_wrapped((uint64_t *)this + 1, (uint64_t)v1);
}

void ___ZN26AccessorySimulatorDelegate5startEv_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  int v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = *(NSObject **)(v1 + 40);
  BOOL v4 = os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);
  if (v2)
  {
    if (v4)
    {
      LOWORD(v8) = 0;
      _os_log_impl(&dword_1C5767000, v3, OS_LOG_TYPE_DEFAULT, "#I Already started", (uint8_t *)&v8, 2u);
    }
  }
  else
  {
    if (v4)
    {
      LOWORD(v8) = 0;
      _os_log_impl(&dword_1C5767000, v3, OS_LOG_TYPE_DEFAULT, "#I Starting", (uint8_t *)&v8, 2u);
    }
    *(unsigned char *)(v1 + 80) = 1;
    int v5 = *(uint64_t **)(v1 + 104);
    if (v5)
    {
      uint64_t v6 = *(void *)(v1 + 72);
      if (v6)
      {
LABEL_8:
        uint64_t v8 = *(uint64_t *)((char *)v5 + 18);
        int v9 = *(_DWORD *)((char *)v5 + 26);
        __p = 0;
        uint64_t v11 = 0;
        uint64_t v12 = 0;
        CFTypeRef cf = 0;
        uint64_t v7 = operator new(0xCuLL);
        uint64_t v11 = v7 + 3;
        uint64_t v12 = (char *)(v7 + 3);
        *(void *)uint64_t v7 = v8;
        v7[2] = v9;
        __p = v7;
        (*(void (**)(uint64_t, CFTypeRef *, void **))(*(void *)v6 + 48))(v6, &cf, &__p);
        if (__p)
        {
          uint64_t v11 = __p;
          operator delete(__p);
        }
        if (cf) {
          CFRelease(cf);
        }
        while (1)
        {
          int v5 = (uint64_t *)*v5;
          if (!v5) {
            break;
          }
          uint64_t v6 = *(void *)(v1 + 72);
          if (v6) {
            goto LABEL_8;
          }
        }
      }
      else
      {
        do
          int v5 = (uint64_t *)*v5;
        while (v5);
      }
    }
  }
}

void sub_1C5864A00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, const void *a14)
{
  if (__p)
  {
    operator delete(__p);
    ctu::cf::CFSharedRef<__CFError>::~CFSharedRef(&a14);
    _Unwind_Resume(a1);
  }
  ctu::cf::CFSharedRef<__CFError>::~CFSharedRef(&a14);
  _Unwind_Resume(a1);
}

void AccessorySimulatorDelegate::stop(AccessorySimulatorDelegate *this)
{
  v1[0] = MEMORY[0x1E4F143A8];
  v1[1] = 0x40000000;
  v1[2] = ___ZN26AccessorySimulatorDelegate4stopEv_block_invoke;
  v1[3] = &__block_descriptor_tmp_6_0;
  v1[4] = this;
  ctu::SharedSynchronizable<AccessoriesDelegateBase>::execute_wrapped((uint64_t *)this + 1, (uint64_t)v1);
}

void ___ZN26AccessorySimulatorDelegate4stopEv_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  int v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = *(NSObject **)(v1 + 40);
  BOOL v4 = os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);
  if (v2)
  {
    if (v4)
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1C5767000, v3, OS_LOG_TYPE_DEFAULT, "#I Stopping", buf, 2u);
    }
    *(unsigned char *)(v1 + 80) = 0;
  }
  else if (v4)
  {
    *(_WORD *)int v5 = 0;
    _os_log_impl(&dword_1C5767000, v3, OS_LOG_TYPE_DEFAULT, "#I Already stopped", v5, 2u);
  }
}

void std::__shared_ptr_pointer<AccessorySimulatorDelegate *,std::shared_ptr<AccessorySimulatorDelegate> ctu::SharedSynchronizable<AccessoriesDelegateBase>::make_shared_ptr<AccessorySimulatorDelegate>(AccessorySimulatorDelegate*)::{lambda(AccessorySimulatorDelegate *)#1},std::allocator<AccessorySimulatorDelegate>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<AccessorySimulatorDelegate *,std::shared_ptr<AccessorySimulatorDelegate> ctu::SharedSynchronizable<AccessoriesDelegateBase>::make_shared_ptr<AccessorySimulatorDelegate>(AccessorySimulatorDelegate*)::{lambda(AccessorySimulatorDelegate *)#1},std::allocator<AccessorySimulatorDelegate>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<AccessorySimulatorDelegate *,std::shared_ptr<AccessorySimulatorDelegate> ctu::SharedSynchronizable<AccessoriesDelegateBase>::make_shared_ptr<AccessorySimulatorDelegate>(AccessorySimulatorDelegate*)::{lambda(AccessorySimulatorDelegate *)#1},std::allocator<AccessorySimulatorDelegate>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableI23AccessoriesDelegateBaseE15make_shared_ptrI26AccessorySimulatorDelega"
                     "teEENSt3__110shared_ptrIT_EEPS7_EUlPS4_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableI23AccessoriesDelegateBaseE15make_shared_ptrI26AccessorySimu"
                                "latorDelegateEENSt3__110shared_ptrIT_EEPS7_EUlPS4_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableI23AccessoriesDelegateBaseE15make_shared_ptrI26AccessorySimulatorDelegateEENSt3__110shared_ptrIT_EEPS7_EUlPS4_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableI23AccessoriesDelegateBaseE15make_shared_ptrI26AccessorySimulatorDelegateEENSt3__110shared_ptrIT_EEPS7_EUlPS4_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24; {
  return 0;
  }
}

uint64_t std::shared_ptr<AccessorySimulatorDelegate> ctu::SharedSynchronizable<AccessoriesDelegateBase>::make_shared_ptr<AccessorySimulatorDelegate>(AccessorySimulatorDelegate*)::{lambda(AccessorySimulatorDelegate*)#1}::operator() const(AccessorySimulatorDelegate*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

char *ABMGetRootVersionString@<X0>(uint64_t a1@<X8>)
{
  xpc_object_t result = (char *)operator new(0x28uLL);
  *(void *)a1 = result;
  *(_OWORD *)(a1 + 8) = xmmword_1C599E860;
  strcpy(result, "AppleBasebandServices_Manager-1211");
  return result;
}

void WiFiManager::create(WiFiManager *this@<X0>, WiFiManager **a2@<X8>)
{
  int v5 = (WiFiManager *)operator new(0x40uLL);
  WiFiManager::WiFiManager(v5, (const char *)this);
  uint64_t v6 = (std::__shared_weak_count *)operator new(0x20uLL);
  v6->__shared_owners_ = 0;
  p_shared_owners = &v6->__shared_owners_;
  v6->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20F8340;
  v6->__shared_weak_owners_ = 0;
  v6[1].__vftable = (std::__shared_weak_count_vtbl *)v5;
  *(void *)buf = 0;
  uint64_t v8 = (std::__shared_weak_count *)*((void *)v5 + 2);
  if (!v8)
  {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    *((void *)v5 + 1) = v5;
    *((void *)v5 + 2) = v6;
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v8->__shared_owners_ == -1)
  {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    *((void *)v5 + 1) = v5;
    *((void *)v5 + 2) = v6;
    std::__shared_weak_count::__release_weak(v8);
    if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL))
    {
LABEL_6:
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
LABEL_7:
  if (*(void *)buf)
  {
    WiFiManager::~WiFiManager(*(WiFiManager **)buf);
    operator delete(v9);
  }
  if (v5 && (WiFiManager::init(v5) & 1) != 0)
  {
    *a2 = v5;
    a2[1] = (WiFiManager *)v6;
    return;
  }
  int v10 = GetOsLogContext()[1];
  if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_error_impl(&dword_1C5767000, v10, OS_LOG_TYPE_ERROR, "Failed to create WiFi Manager!", buf, 2u);
    *a2 = 0;
    a2[1] = 0;
    uint64_t v11 = v6;
    if (!v6) {
      return;
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
    uint64_t v11 = v6;
    if (!v6) {
      return;
    }
  }
  if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
}

void sub_1C5864F44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1C5864F58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1C5864F6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::unique_ptr<WiFiManager>::~unique_ptr[abi:ne180100]((WiFiManager **)va);
  _Unwind_Resume(a1);
}

void sub_1C5864F80(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t WiFiManager::init(WiFiManager *this)
{
  *((unsigned char *)this + 24) = 1;
  id v2 = objc_alloc_init(MEMORY[0x1E4F5E318]);
  *((void *)this + 4) = v2;
  if (v2)
  {
    [v2 activate];
    uint64_t v3 = *((void *)this + 1);
    BOOL v4 = (std::__shared_weak_count *)*((void *)this + 2);
    if (v4) {
      atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    v9[0] = MEMORY[0x1E4F143A8];
    v9[1] = 3321888768;
    v9[2] = ___ZN11WiFiManager4initEv_block_invoke;
    v9[3] = &__block_descriptor_56_e8_40c36_ZTSNSt3__18weak_ptrI11WiFiManagerEE_e18_v16__0__CWFEvent_8l;
    v9[4] = this;
    v9[5] = v3;
    int v10 = v4;
    if (v4) {
      atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    [*((id *)this + 4) setEventHandler:v9];
    uint64_t v8 = 0;
    uint64_t v5 = [*((id *)this + 4) startMonitoringEventType:1 error:&v8];
    if (v10) {
      std::__shared_weak_count::__release_weak(v10);
    }
    if (v4) {
      std::__shared_weak_count::__release_weak(v4);
    }
    return v5;
  }
  else
  {
    uint64_t v7 = *(NSObject **)this;
    if (os_log_type_enabled(*(os_log_t *)this, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v8) = 0;
      _os_log_error_impl(&dword_1C5767000, v7, OS_LOG_TYPE_ERROR, "Failed to create WiFiManager interface", (uint8_t *)&v8, 2u);
    }
    return 0;
  }
}

void sub_1C58650FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a16)
  {
    std::__shared_weak_count::__release_weak(a16);
    if (!v16) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if (!v16)
  {
    goto LABEL_3;
  }
  std::__shared_weak_count::__release_weak(v16);
  _Unwind_Resume(exception_object);
}

void WiFiManager::WiFiManager(WiFiManager *this, const char *__s)
{
  size_t v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  std::string::size_type v5 = v4;
  if (v4 >= 0x17)
  {
    uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v7 = v4 | 7;
    }
    uint64_t v8 = v7 + 1;
    p_dst = (std::string *)operator new(v7 + 1);
    __dst.__r_.__value_.__l.__size_ = v5;
    __dst.__r_.__value_.__r.__words[2] = v8 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_8;
  }
  *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v4;
  p_dst = &__dst;
  if (v4) {
LABEL_8:
  }
    memcpy(p_dst, __s, v5);
  p_dst->__r_.__value_.__s.__data_[v5] = 0;
  int v9 = std::string::append(&__dst, ".", 1uLL);
  long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v15.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v15.__r_.__value_.__l.__data_ = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  uint64_t v11 = std::string::append(&v15, "WiFiManager", 0xBuLL);
  long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  int64_t v17 = v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  if (v17 >= 0) {
    uint64_t v13 = __p;
  }
  else {
    uint64_t v13 = (void **)__p[0];
  }
  ctu::OsLogLogger::OsLogLogger(this, "com.apple.telephony.abm", (const char *)v13);
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v15.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_14;
    }
LABEL_17:
    operator delete(v15.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_15;
    }
LABEL_18:
    operator delete(__dst.__r_.__value_.__l.__data_);
    goto LABEL_15;
  }
  operator delete(__p[0]);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_17;
  }
LABEL_14:
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_18;
  }
LABEL_15:
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 6) = 0;
  *((void *)this + 7) = 0;
  *((void *)this + 5) = 0;
}

void sub_1C58652B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a15 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  if ((a15 & 0x80000000) == 0) {
LABEL_4:
  }
    _Unwind_Resume(exception_object);
LABEL_7:
  operator delete(a10);
  _Unwind_Resume(exception_object);
}

void WiFiManager::~WiFiManager(WiFiManager *this)
{
  uint64_t v2 = *((void *)this + 5);
  for (uint64_t i = *((void *)this + 6); i != v2; i -= 16)
  {
    size_t v4 = *(NSObject **)(i - 8);
    if (v4) {
      dispatch_release(v4);
    }
    std::string::size_type v5 = *(const void **)(i - 16);
    if (v5) {
      _Block_release(v5);
    }
  }
  *((void *)this + 6) = v2;
  [*((id *)this + 4) invalidate];
  uint64_t v6 = *((void *)this + 5);
  if (v6)
  {
    uint64_t v7 = *((void *)this + 6);
    uint64_t v8 = (void *)*((void *)this + 5);
    if (v7 != v6)
    {
      do
      {
        int v9 = *(NSObject **)(v7 - 8);
        if (v9) {
          dispatch_release(v9);
        }
        long long v10 = *(const void **)(v7 - 16);
        if (v10) {
          _Block_release(v10);
        }
        v7 -= 16;
      }
      while (v7 != v6);
      uint64_t v8 = (void *)*((void *)this + 5);
    }
    *((void *)this + 6) = v6;
    operator delete(v8);
  }
  uint64_t v11 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v11) {
    std::__shared_weak_count::__release_weak(v11);
  }

  JUMPOUT(0x1C8790F80);
}

void ___ZN11WiFiManager4initEv_block_invoke(void *a1, void *a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    std::string::size_type v5 = (os_log_t *)a1[4];
    uint64_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      uint64_t v7 = v6;
      uint64_t v8 = a1[5];
      if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v7);
      }
      if (v8 && [a2 type] == 1)
      {
        int v9 = *v5;
        if (os_log_type_enabled(*v5, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)long long v10 = 0;
          _os_log_debug_impl(&dword_1C5767000, v9, OS_LOG_TYPE_DEBUG, "#D WiFiManager Power Change Event", v10, 2u);
        }
        WiFiManager::notifyClients((id *)v5);
      }
    }
  }
}

void WiFiManager::notifyClients(id *this)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  int v2 = [this[4] powerOn];
  *((unsigned char *)this + 24) = v2;
  uint64_t v3 = *this;
  if (os_log_type_enabled((os_log_t)*this, OS_LOG_TYPE_DEFAULT))
  {
    size_t v4 = "Off";
    if (v2) {
      size_t v4 = "On";
    }
    LODWORD(v13) = 136315138;
    *(void *)((char *)&v13 + 4) = v4;
    _os_log_impl(&dword_1C5767000, v3, OS_LOG_TYPE_DEFAULT, "#I Notifying WiFi Power: %s", (uint8_t *)&v13, 0xCu);
  }
  std::string::size_type v5 = (char *)this[5];
  uint64_t v6 = (char *)this[6];
  if (v5 != v6)
  {
    while (!*(void *)v5)
    {
      uint64_t v7 = 0;
      uint64_t v8 = *((void *)v5 + 1);
      if (v8) {
        goto LABEL_10;
      }
LABEL_11:
      char v9 = *((unsigned char *)this + 24);
      if (!v7)
      {
        uint64_t v11 = 0;
        *(void *)&long long v13 = MEMORY[0x1E4F143A8];
        *((void *)&v13 + 1) = 3321888768;
        uint64_t v14 = ___ZNK8dispatch8callbackIU13block_pointerFvbEEclIJbEEEvDpT__block_invoke_0;
        std::string v15 = &__block_descriptor_41_e8_32c43_ZTSN8dispatch5blockIU13block_pointerFvbEEE_e5_v8__0l;
LABEL_17:
        long long v12 = 0;
        goto LABEL_18;
      }
      long long v10 = _Block_copy(v7);
      uint64_t v11 = v10;
      *(void *)&long long v13 = MEMORY[0x1E4F143A8];
      *((void *)&v13 + 1) = 3321888768;
      uint64_t v14 = ___ZNK8dispatch8callbackIU13block_pointerFvbEEclIJbEEEvDpT__block_invoke_0;
      std::string v15 = &__block_descriptor_41_e8_32c43_ZTSN8dispatch5blockIU13block_pointerFvbEEE_e5_v8__0l;
      if (!v10) {
        goto LABEL_17;
      }
      long long v12 = _Block_copy(v10);
LABEL_18:
      aBlock = v12;
      char v17 = v9;
      dispatch_async(v8, &v13);
      if (aBlock) {
        _Block_release(aBlock);
      }
      if (v11) {
        _Block_release(v11);
      }
      if (v8) {
        dispatch_release(v8);
      }
      if (v7) {
        _Block_release(v7);
      }
      v5 += 16;
      if (v5 == v6) {
        return;
      }
    }
    uint64_t v7 = _Block_copy(*(const void **)v5);
    uint64_t v8 = *((void *)v5 + 1);
    if (!v8) {
      goto LABEL_11;
    }
LABEL_10:
    dispatch_retain(v8);
    goto LABEL_11;
  }
}

void sub_1C586571C(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_40c36_ZTSNSt3__18weak_ptrI11WiFiManagerEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c36_ZTSNSt3__18weak_ptrI11WiFiManagerEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

uint64_t WiFiManager::getWiFiState(WiFiManager *this)
{
  return *((unsigned __int8 *)this + 24);
}

void WiFiManager::registerCallback(WiFiManager *this, void **a2)
{
  size_t v4 = (void *)*((void *)this + 6);
  if ((unint64_t)v4 >= *((void *)this + 7))
  {
    uint64_t v7 = std::vector<dispatch::callback<void({block_pointer})(BOOL)>>::__push_back_slow_path<dispatch::callback<void({block_pointer})(BOOL)> const&>((void *)this + 5, (uint64_t)a2);
  }
  else
  {
    std::string::size_type v5 = *a2;
    if (*a2) {
      std::string::size_type v5 = _Block_copy(v5);
    }
    uint64_t v6 = a2[1];
    *size_t v4 = v5;
    v4[1] = v6;
    if (v6) {
      dispatch_retain(v6);
    }
    uint64_t v7 = v4 + 2;
  }
  *((void *)this + 6) = v7;

  WiFiManager::notifyClients((id *)this);
}

WiFiManager **std::unique_ptr<WiFiManager>::~unique_ptr[abi:ne180100](WiFiManager **a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    WiFiManager::~WiFiManager(v2);
    operator delete(v3);
  }
  return a1;
}

void std::__shared_ptr_pointer<WiFiManager *,std::shared_ptr<WiFiManager>::__shared_ptr_default_delete<WiFiManager,WiFiManager>,std::allocator<WiFiManager>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<WiFiManager *,std::shared_ptr<WiFiManager>::__shared_ptr_default_delete<WiFiManager,WiFiManager>,std::allocator<WiFiManager>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1 = *(WiFiManager **)(a1 + 24);
  if (v1)
  {
    WiFiManager::~WiFiManager(v1);
    operator delete(v2);
  }
}

uint64_t std::__shared_ptr_pointer<WiFiManager *,std::shared_ptr<WiFiManager>::__shared_ptr_default_delete<WiFiManager,WiFiManager>,std::allocator<WiFiManager>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x80000001C59A1365) {
    return a1 + 24;
  }
  if (((v3 & 0x80000001C59A1365 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000001C59A1365)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001C59A1365 & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 24;
  }
  return 0;
}

uint64_t ___ZNK8dispatch8callbackIU13block_pointerFvbEEclIJbEEEvDpT__block_invoke_0(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *(unsigned __int8 *)(a1 + 40));
}

uint64_t AccessoriesDelegateBase::AccessoriesDelegateBase(uint64_t a1, uint64_t a2, NSObject **a3, char *a4)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  uint64_t v7 = a1 + 8;
  uint64_t v8 = *a3;
  *(void *)(v7 + 16) = *a3;
  if (v8) {
    dispatch_retain(v8);
  }
  *(void *)(a1 + 32) = 0;
  ctu::OsLogLogger::OsLogLogger((ctu::OsLogLogger *)(a1 + 40), "com.apple.telephony.abm", a4);
  *(void *)a1 = &unk_1F20F8390;
  uint64_t v9 = a1 + 48;
  uint64_t v10 = *(void *)(a2 + 24);
  if (!v10) {
    goto LABEL_6;
  }
  if (v10 != a2)
  {
    uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v10 + 16))(v10, v9);
LABEL_6:
    *(void *)(a1 + 72) = v10;
    *(unsigned char *)(a1 + 80) = 0;
    return a1;
  }
  *(void *)(a1 + 72) = v9;
  (*(void (**)(void))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24));
  *(unsigned char *)(a1 + 80) = 0;
  return a1;
}

void sub_1C5865A44(_Unwind_Exception *a1)
{
  ctu::SharedLoggable<AccessoriesDelegateBase,ctu::OsLogLogger>::~SharedLoggable(v1);
  _Unwind_Resume(a1);
}

void sub_1C5865A58(_Unwind_Exception *a1)
{
  ctu::SharedSynchronizable<DataStallDetection>::~SharedSynchronizable(v1);
  _Unwind_Resume(a1);
}

void *ctu::SharedLoggable<AccessoriesDelegateBase,ctu::OsLogLogger>::~SharedLoggable(void *a1)
{
  MEMORY[0x1C8790F80](a1 + 4);
  uint64_t v2 = a1[3];
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = a1[2];
  if (v3) {
    dispatch_release(v3);
  }
  size_t v4 = (std::__shared_weak_count *)a1[1];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

void AccessoriesDelegateBase::~AccessoriesDelegateBase(AccessoriesDelegateBase *this)
{
  *(void *)this = &unk_1F20F8390;
  uint64_t v2 = (char *)this + 48;
  uint64_t v3 = (char *)*((void *)this + 9);
  if (v3 == v2)
  {
    (*(void (**)(char *))(*(void *)v2 + 32))(v2);
    MEMORY[0x1C8790F80]((char *)this + 40);
    size_t v4 = *((void *)this + 4);
    if (v4) {
LABEL_5:
    }
      dispatch_release(v4);
  }
  else
  {
    if (v3) {
      (*(void (**)(char *))(*(void *)v3 + 40))(v3);
    }
    MEMORY[0x1C8790F80]((char *)this + 40);
    size_t v4 = *((void *)this + 4);
    if (v4) {
      goto LABEL_5;
    }
  }
  std::string::size_type v5 = *((void *)this + 3);
  if (v5) {
    dispatch_release(v5);
  }
  uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v6) {
    std::__shared_weak_count::__release_weak(v6);
  }
}

uint64_t AccessoriesDelegateBase::createError@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, CFIndex a3@<X2>, CFErrorRef *a4@<X8>)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  unint64_t v37 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v8 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v36[7] = v8;
  v36[8] = v8;
  v36[5] = v8;
  v36[6] = v8;
  v36[3] = v8;
  v36[4] = v8;
  v36[1] = v8;
  v36[2] = v8;
  long long v35 = v8;
  v36[0] = v8;
  *(_OWORD *)__p = v8;
  long long v34 = v8;
  long long v31 = v8;
  long long v32 = v8;
  long long v29 = v8;
  long long v30 = v8;
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v29);
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v29, (uint64_t)"\n", 1);
  uint64_t v10 = (const char *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
  size_t v11 = strlen(v10);
  long long v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
  long long v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)":\n", 2);
  int v14 = *(char *)(a2 + 23);
  if (v14 >= 0) {
    uint64_t v15 = a2;
  }
  else {
    uint64_t v15 = *(void *)a2;
  }
  if (v14 >= 0) {
    uint64_t v16 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    uint64_t v16 = *(void *)(a2 + 8);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, v15, v16);
  unint64_t v28 = 0xAAAAAAAAAAAAAAAALL;
  if ((BYTE8(v35) & 0x10) != 0)
  {
    uint64_t v18 = v35;
    if ((unint64_t)v35 < *((void *)&v32 + 1))
    {
      *(void *)&long long v35 = *((void *)&v32 + 1);
      uint64_t v18 = *((void *)&v32 + 1);
    }
    CFDictionaryRef v19 = (const void *)v32;
    std::string::size_type v20 = v18 - v32;
    if ((unint64_t)(v18 - v32) >= 0x7FFFFFFFFFFFFFF8) {
      goto LABEL_40;
    }
  }
  else
  {
    if ((BYTE8(v35) & 8) == 0)
    {
      *((unsigned char *)&v27.__r_.__value_.__s + 23) = 0;
      v27.__r_.__value_.__s.__data_[0] = 0;
      int v17 = 0;
LABEL_16:
      std::string v40 = v27;
      goto LABEL_22;
    }
    CFDictionaryRef v19 = (const void *)*((void *)&v30 + 1);
    std::string::size_type v20 = *((void *)&v31 + 1) - *((void *)&v30 + 1);
    if (*((void *)&v31 + 1) - *((void *)&v30 + 1) >= 0x7FFFFFFFFFFFFFF8uLL) {
LABEL_40:
    }
      std::string::__throw_length_error[abi:ne180100]();
  }
  if (v20 >= 0x17)
  {
    uint64_t v22 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v20 | 7) != 0x17) {
      uint64_t v22 = v20 | 7;
    }
    uint64_t v23 = v22 + 1;
    unint64_t v21 = (std::string *)operator new(v22 + 1);
    v27.__r_.__value_.__l.__size_ = v20;
    v27.__r_.__value_.__r.__words[2] = v23 | 0x8000000000000000;
    v27.__r_.__value_.__r.__words[0] = (std::string::size_type)v21;
LABEL_20:
    memmove(v21, v19, v20);
    v21->__r_.__value_.__s.__data_[v20] = 0;
    int v17 = SHIBYTE(v27.__r_.__value_.__r.__words[2]);
    if ((SHIBYTE(v27.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_21;
  }
  *((unsigned char *)&v27.__r_.__value_.__s + 23) = v20;
  unint64_t v21 = &v27;
  if (v20) {
    goto LABEL_20;
  }
  v27.__r_.__value_.__s.__data_[0] = 0;
  int v17 = SHIBYTE(v27.__r_.__value_.__r.__words[2]);
  if ((SHIBYTE(v27.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_16;
  }
LABEL_21:
  std::string::__init_copy_ctor_external(&v40, v27.__r_.__value_.__l.__data_, v27.__r_.__value_.__l.__size_);
LABEL_22:
  uint64_t v38 = 0;
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v41, v40.__r_.__value_.__l.__data_, v40.__r_.__value_.__l.__size_);
  }
  else {
    std::string v41 = v40;
  }
  uint64_t v39 = 0;
  CFAllocatorRef v24 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  if (ctu::cf::convert_copy()) {
    uint64_t v25 = v39;
  }
  else {
    uint64_t v25 = 0;
  }
  if ((SHIBYTE(v41.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    unint64_t v28 = (unint64_t)v25;
    if ((SHIBYTE(v40.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_30;
    }
LABEL_37:
    operator delete(v40.__r_.__value_.__l.__data_);
    if ((v17 & 0x80000000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_38;
  }
  operator delete(v41.__r_.__value_.__l.__data_);
  unint64_t v28 = (unint64_t)v25;
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_37;
  }
LABEL_30:
  if ((v17 & 0x80000000) == 0) {
    goto LABEL_31;
  }
LABEL_38:
  operator delete(v27.__r_.__value_.__l.__data_);
LABEL_31:
  v41.__r_.__value_.__r.__words[0] = *MEMORY[0x1E4F1D140];
  v40.__r_.__value_.__r.__words[0] = (std::string::size_type)v25;
  *a4 = (CFErrorRef)0xAAAAAAAAAAAAAAAALL;
  *a4 = CFErrorCreateWithUserInfoKeysAndValues(v24, (CFErrorDomain)*MEMORY[0x1E4F1D160], a3, (const void *const *)&v41.__r_.__value_.__l.__data_, (const void *const *)&v40.__r_.__value_.__l.__data_, 1);
  if (v25) {
    CFRelease(v25);
  }
  *(void *)&long long v29 = *MEMORY[0x1E4FBA418];
  *(void *)((char *)&v29 + *(void *)(v29 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  *((void *)&v29 + 1) = MEMORY[0x1E4FBA470] + 16;
  if (SHIBYTE(v34) < 0) {
    operator delete(__p[1]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1C8791FB0](v36);
}

void sub_1C5865FC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, char a12, int a13, __int16 a14, char a15, char a16)
{
  ctu::cf::CFSharedRef<__CFString const>::~CFSharedRef((const void **)(v17 - 144));
  if (*(char *)(v17 - 105) < 0)
  {
    operator delete(*(void **)(v17 - 128));
    if ((v16 & 0x80000000) == 0)
    {
LABEL_3:
      std::ostringstream::~ostringstream((uint64_t)&a14);
      _Unwind_Resume(a1);
    }
  }
  else if ((v16 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a14);
  _Unwind_Resume(a1);
}

void sub_1C586609C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1C58660B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t AccessoriesDelegateBase::handleServerCommand()
{
  return 0;
}

void *BasebandCrashReasonFilter::create@<X0>(void *a1@<X8>)
{
  *a1 = 0xAAAAAAAAAAAAAAAALL;
  a1[1] = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v3 = (BasebandCrashReasonFilter *)operator new(0x60uLL);
  BasebandCrashReasonFilter::BasebandCrashReasonFilter(v3);
  *a1 = 0xAAAAAAAAAAAAAAAALL;
  a1[1] = 0xAAAAAAAAAAAAAAAALL;

  return std::shared_ptr<BasebandCrashReasonFilter>::shared_ptr[abi:ne180100]<BasebandCrashReasonFilter,std::shared_ptr<BasebandCrashReasonFilter> ctu::SharedSynchronizable<BasebandCrashReasonFilter>::make_shared_ptr<BasebandCrashReasonFilter>(BasebandCrashReasonFilter*)::{lambda(BasebandCrashReasonFilter*)#1},void>(a1, (uint64_t)v3);
}

void sub_1C5866128(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void BasebandCrashReasonFilter::~BasebandCrashReasonFilter(BasebandCrashReasonFilter *this)
{
  *(void *)this = &unk_1F20F8478;
  uint64_t v2 = (char *)this + 40;
  uint64_t v3 = *((void *)this + 5);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long v13 = 0;
    _os_log_impl(&dword_1C5767000, v3, OS_LOG_TYPE_DEFAULT, "#I Gone!", v13, 2u);
  }
  uint64_t v4 = *((void *)this + 9);
  if (v4)
  {
    uint64_t v5 = *((void *)this + 10);
    uint64_t v6 = (void *)*((void *)this + 9);
    if (v5 != v4)
    {
      do
      {
        if (*(char *)(v5 - 9) < 0) {
          operator delete(*(void **)(v5 - 32));
        }
        v5 -= 32;
      }
      while (v5 != v4);
      uint64_t v6 = (void *)*((void *)this + 9);
    }
    *((void *)this + 10) = v4;
    operator delete(v6);
  }
  uint64_t v7 = *((void *)this + 6);
  if (v7)
  {
    uint64_t v8 = *((void *)this + 7);
    uint64_t v9 = (void *)*((void *)this + 6);
    if (v8 != v7)
    {
      do
      {
        if (*(char *)(v8 - 9) < 0) {
          operator delete(*(void **)(v8 - 32));
        }
        v8 -= 32;
      }
      while (v8 != v7);
      uint64_t v9 = (void *)*((void *)this + 6);
    }
    *((void *)this + 7) = v7;
    operator delete(v9);
  }
  MEMORY[0x1C8790F80](v2);
  uint64_t v10 = *((void *)this + 4);
  if (v10) {
    dispatch_release(v10);
  }
  size_t v11 = *((void *)this + 3);
  if (v11) {
    dispatch_release(v11);
  }
  long long v12 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v12) {
    std::__shared_weak_count::__release_weak(v12);
  }
}

{
  void *v1;
  uint64_t vars8;

  BasebandCrashReasonFilter::~BasebandCrashReasonFilter(this);

  operator delete(v1);
}

void **std::vector<ResetInfo::RegexPatternAndReasonMask>::~vector[abi:ne180100](void **a1)
{
  uint64_t v2 = (void **)*a1;
  if (*a1)
  {
    uint64_t v3 = (void **)a1[1];
    uint64_t v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        if (*((char *)v3 - 9) < 0) {
          operator delete(*(v3 - 4));
        }
        v3 -= 4;
      }
      while (v3 != v2);
      uint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void BasebandCrashReasonFilter::BasebandCrashReasonFilter(BasebandCrashReasonFilter *this)
{
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)&v12, "com.apple.telephony.abm", "bb.crashreason.fltr");
  initially_inactive = dispatch_queue_attr_make_initially_inactive(0);
  uint64_t v3 = dispatch_queue_create_with_target_V2("BasebandCrashReasonFilter", initially_inactive, 0);
  dispatch_set_qos_class_floor(v3, QOS_CLASS_UTILITY, 0);
  dispatch_activate(v3);
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = v3;
  if (v3)
  {
    dispatch_retain(v3);
    *((void *)this + 4) = 0;
    dispatch_release(v3);
  }
  else
  {
    *((void *)this + 4) = 0;
  }
  ctu::OsLogLogger::OsLogLogger();
  ctu::OsLogLogger::OsLogLogger((BasebandCrashReasonFilter *)((char *)this + 40), (const ctu::OsLogLogger *)v14);
  MEMORY[0x1C8790F80](v14);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&v12);
  *(void *)this = &unk_1F20F8478;
  *((_OWORD *)this + 3) = 0u;
  uint64_t v4 = (void **)((char *)this + 48);
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  uint64_t v5 = *((void *)this + 5);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v12) = 0;
    _os_log_impl(&dword_1C5767000, v5, OS_LOG_TYPE_DEFAULT, "#I initializing baseband crash reason patterns and masks from preferences file", (uint8_t *)&v12, 2u);
  }
  BasebandCrashReasonFilter::readBasebandCrashReasonPatternsFromPreferences(this, &v12);
  uint64_t v6 = (void **)*v4;
  if (*v4)
  {
    uint64_t v7 = (void **)*((void *)this + 7);
    uint64_t v8 = *v4;
    if (v7 != v6)
    {
      do
      {
        if (*((char *)v7 - 9) < 0) {
          operator delete(*(v7 - 4));
        }
        v7 -= 4;
      }
      while (v7 != v6);
      uint64_t v8 = *v4;
    }
    *((void *)this + 7) = v6;
    operator delete(v8);
    *uint64_t v4 = 0;
    *((void *)this + 7) = 0;
    *((void *)this + 8) = 0;
  }
  uint64_t v9 = v12;
  *((void *)this + 6) = v12;
  uint64_t v10 = (void *)v13;
  *(_OWORD *)((char *)this + 56) = v13;
  if (v10 == v9)
  {
    size_t v11 = *((void *)this + 5);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v12) = 0;
      _os_log_impl(&dword_1C5767000, v11, OS_LOG_TYPE_DEFAULT, "#I default pattern masks for baseband crash reason patterns and masks will be used", (uint8_t *)&v12, 2u);
    }
    std::vector<ResetInfo::RegexPatternAndReasonMask>::__assign_with_size[abi:ne180100]<ResetInfo::RegexPatternAndReasonMask*,ResetInfo::RegexPatternAndReasonMask*>((void **)this + 6, *((void ***)this + 9), *((char **)this + 10), (uint64_t)(*((void *)this + 10) - *((void *)this + 9)) >> 5);
  }
}

void sub_1C586653C(_Unwind_Exception *a1)
{
  std::vector<ResetInfo::RegexPatternAndReasonMask>::~vector[abi:ne180100]((void **)(v1 + 72));
  std::vector<ResetInfo::RegexPatternAndReasonMask>::~vector[abi:ne180100](v3);
  ctu::SharedLoggable<AccessoriesDelegateBase,ctu::OsLogLogger>::~SharedLoggable(v2);
  _Unwind_Resume(a1);
}

void BasebandCrashReasonFilter::readBasebandCrashReasonPatternsFromPreferences(BasebandCrashReasonFilter *this@<X0>, void **a2@<X8>)
{
  CFArrayRef v20 = 0;
  CFTypeRef cf = 0;
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  pthread_mutex_lock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
  if (!qword_1EBBDD0C0)
  {
    uint64_t v5 = (uint64_t (***)(void, uint64_t))operator new(0x18uLL);
    MEMORY[0x1C8791170](v5, @"com.apple.AppleBasebandManager", *MEMORY[0x1E4F1D3F0]);
    uint64_t v4 = operator new(0x20uLL);
    *uint64_t v4 = &unk_1F20F3BE0;
    v4[1] = 0;
    uint64_t v4[2] = 0;
    double v4[3] = v5;
    uint64_t v6 = (std::__shared_weak_count *)off_1EBBDD0C8;
    qword_1EBBDD0C0 = (uint64_t)v5;
    off_1EBBDD0C8 = v4;
    if (!v6)
    {
      uint64_t v17 = (uint64_t)v5;
      uint64_t v18 = (std::__shared_weak_count *)v4;
      goto LABEL_8;
    }
    if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  uint64_t v5 = (uint64_t (***)(void, uint64_t))qword_1EBBDD0C0;
  uint64_t v4 = off_1EBBDD0C8;
  uint64_t v17 = qword_1EBBDD0C0;
  uint64_t v18 = (std::__shared_weak_count *)off_1EBBDD0C8;
  if (off_1EBBDD0C8) {
LABEL_8:
  }
    atomic_fetch_add_explicit(v4 + 1, 1uLL, memory_order_relaxed);
  pthread_mutex_unlock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_1C59A14C0;
  strcpy((char *)__p[0], "BasebandCrashReasonRegexPatterns");
  BOOL v7 = Preferences::getPreference<__CFArray const*>(v5, (const char *)__p, &v20);
  if (v20) {
    BOOL v8 = v7;
  }
  else {
    BOOL v8 = 0;
  }
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v9 = v18;
  if (v18 && !atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
    if (v8) {
      goto LABEL_17;
    }
  }
  else if (v8)
  {
LABEL_17:
    CFArrayRef v10 = v20;
    CFTypeRef v11 = cf;
    CFTypeRef cf = v20;
    if (v11) {
      CFRelease(v11);
    }
    CFArrayRef v15 = v10;
    if (v10) {
      CFRetain(v10);
    }
    BasebandCrashReasonFilter::convertBasebandCrashReasonPatternsFromCFSharedArrayToVector(&v15, __p);
    long long v12 = (void **)*a2;
    if (*a2)
    {
      for (uint64_t i = (void **)a2[1]; i != v12; i -= 4)
      {
        if (*((char *)i - 9) < 0) {
          operator delete(*(i - 4));
        }
      }
      operator delete(v12);
      *a2 = 0;
      a2[1] = 0;
      a2[2] = 0;
    }
    *(_OWORD *)a2 = *(_OWORD *)__p;
    a2[2] = __p[2];
    memset(__p, 0, 24);
    if (v10) {
      CFRelease(v10);
    }
    goto LABEL_33;
  }
  int v14 = *((void *)this + 5);
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(__p[0]) = 0;
    _os_log_impl(&dword_1C5767000, v14, OS_LOG_TYPE_DEFAULT, "#I no baseband crash reason patterns entry found in ABMProperties", (uint8_t *)__p, 2u);
  }
LABEL_33:
  if (cf) {
    CFRelease(cf);
  }
}

uint64_t BasebandCrashReasonFilter::shouldSetSCD(uint64_t a1, uint64_t a2)
{
  return ResetInfo::reasonMatchesAtLeastOneApplicablePattern(2, a2, (long long **)(a1 + 48));
}

uint64_t BasebandCrashReasonFilter::shouldSetCOF(uint64_t a1, uint64_t a2)
{
  return ResetInfo::reasonMatchesAtLeastOneApplicablePattern(4, a2, (long long **)(a1 + 48));
}

uint64_t BasebandCrashReasonFilter::readBasebandCrashReasonPatternsFromFactoryFile@<X0>(void *a1@<X8>)
{
  memset(v10, 170, sizeof(v10));
  MEMORY[0x1C8791170](v10, @"/AppleInternal/Cellular/Factory/BasebandCOFSCD.plist", *MEMORY[0x1E4F1D3F0]);
  CFArrayRef v9 = 0;
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)v7, "BasebandCrashReasonRegexPatterns");
  CFArrayRef v3 = (const __CFArray *)ctu::cf::map_adapter::copyCFArrayRef((ctu::cf::map_adapter *)v10, v7[0]);
  MEMORY[0x1C8791110](v7);
  CFArrayRef v9 = v3;
  CFArrayRef v6 = v3;
  if (v3) {
    CFRetain(v3);
  }
  BasebandCrashReasonFilter::convertBasebandCrashReasonPatternsFromCFSharedArrayToVector(&v6, (void **)v7);
  uint64_t v4 = v8;
  *(_OWORD *)a1 = *(_OWORD *)v7;
  a1[2] = v4;
  v7[1] = 0;
  uint64_t v8 = 0;
  v7[0] = 0;
  if (v3)
  {
    CFRelease(v3);
    CFRelease(v3);
  }
  return MEMORY[0x1C8791180](v10);
}

void sub_1C5866A1C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v5 = va_arg(va1, const void *);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  ctu::cf::CFSharedRef<__CFArray const>::~CFSharedRef((const void **)va);
  std::vector<ResetInfo::RegexPatternAndReasonMask>::~vector[abi:ne180100](v2);
  ctu::cf::CFSharedRef<__CFArray const>::~CFSharedRef((const void **)va1);
  MEMORY[0x1C8791180](v3 - 40);
  _Unwind_Resume(a1);
}

void BasebandCrashReasonFilter::convertBasebandCrashReasonPatternsFromCFSharedArrayToVector(CFArrayRef *a1@<X1>, void **a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  if (!*a1) {
    return;
  }
  uint64_t v2 = a1;
  unint64_t Count = CFArrayGetCount(*a1);
  uint64_t v4 = a2;
  uint64_t v5 = (void **)*a2;
  if (Count > ((unsigned char *)a2[2] - (unsigned char *)*a2) >> 5)
  {
    CFArrayRef v6 = (void **)a2[1];
    uint64_t v7 = (char *)operator new(32 * Count);
    uint64_t v8 = &v7[32 * Count];
    uint64_t v9 = &v7[(char *)v6 - (char *)v5];
    if (v6 == v5)
    {
      uint64_t v4 = a2;
      *a2 = v9;
      a2[1] = v9;
      a2[2] = v8;
      if (v5) {
LABEL_12:
      }
        operator delete(v5);
    }
    else
    {
      uint64_t v10 = &v7[(char *)v6 - (char *)v5];
      do
      {
        long long v11 = *((_OWORD *)v6 - 2);
        *((void *)v10 - 2) = *(v6 - 2);
        *((_OWORD *)v10 - 2) = v11;
        *(v6 - 3) = 0;
        *(v6 - 2) = 0;
        *(v6 - 4) = 0;
        *((_DWORD *)v10 - 2) = *((_DWORD *)v6 - 2);
        v10 -= 32;
        v6 -= 4;
      }
      while (v6 != v5);
      uint64_t v5 = (void **)*a2;
      long long v12 = (void **)a2[1];
      *a2 = v10;
      a2[1] = v9;
      a2[2] = v8;
      while (v12 != v5)
      {
        if (*((char *)v12 - 9) < 0) {
          operator delete(*(v12 - 4));
        }
        v12 -= 4;
      }
      uint64_t v4 = a2;
      if (v5) {
        goto LABEL_12;
      }
    }
  }
  if (Count)
  {
    for (CFIndex i = 0; i != Count; ++i)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(*v2, i);
      CFArrayRef v15 = ValueAtIndex;
      if (ValueAtIndex && (CFTypeID v16 = CFGetTypeID(ValueAtIndex), v16 == CFDictionaryGetTypeID()))
      {
        std::string v40 = v15;
        CFRetain(v15);
      }
      else
      {
        CFArrayRef v15 = 0;
        std::string v40 = 0;
      }
      v39[0] = 0xAAAAAAAAAAAAAAAALL;
      v39[1] = 0xAAAAAAAAAAAAAAAALL;
      ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v39, (const __CFDictionary *)v15);
      memset(&v38, 170, sizeof(v38));
      memset(&__p, 0, sizeof(__p));
      ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v41, "BasebandCrashReasonRegexPattern");
      ctu::cf::map_adapter::getString();
      MEMORY[0x1C8791110](&v41);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&__p, "BasebandCrashReasonRegexPatternMask");
      int Int = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v39, (const __CFString *)__p.__r_.__value_.__l.__data_);
      MEMORY[0x1C8791110](&__p);
      if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&__p, v38.__r_.__value_.__l.__data_, v38.__r_.__value_.__l.__size_);
      }
      else {
        std::string __p = v38;
      }
      int v37 = Int;
      CFDictionaryRef v19 = (void **)v4[1];
      unint64_t v18 = (unint64_t)v4[2];
      if ((unint64_t)v19 < v18)
      {
        long long v20 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        v19[2] = (void *)__p.__r_.__value_.__r.__words[2];
        *(_OWORD *)CFDictionaryRef v19 = v20;
        memset(&__p, 0, sizeof(__p));
        *((_DWORD *)v19 + 6) = v37;
        v4[1] = v19 + 4;
        if ((SHIBYTE(v38.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_42;
        }
        goto LABEL_50;
      }
      unint64_t v21 = Count;
      uint64_t v22 = (void **)*v4;
      uint64_t v23 = ((char *)v19 - (char *)v22) >> 5;
      unint64_t v24 = v23 + 1;
      if ((unint64_t)(v23 + 1) >> 59) {
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v25 = v2;
      uint64_t v26 = v18 - (void)v22;
      if (v26 >> 4 > v24) {
        unint64_t v24 = v26 >> 4;
      }
      if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFE0) {
        unint64_t v27 = 0x7FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v27 = v24;
      }
      if (v27 >> 59) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      unint64_t v28 = (char *)operator new(32 * v27);
      long long v29 = &v28[32 * v23];
      *(std::string *)long long v29 = __p;
      long long v30 = &v28[32 * v27];
      memset(&__p, 0, sizeof(__p));
      *((_DWORD *)v29 + 6) = Int;
      long long v31 = v29 + 32;
      if (v19 == v22)
      {
        uint64_t v4 = a2;
        *a2 = v29;
        a2[1] = v31;
        a2[2] = v30;
        uint64_t v2 = v25;
        unint64_t Count = v21;
        if (v19) {
          goto LABEL_39;
        }
      }
      else
      {
        do
        {
          long long v32 = *((_OWORD *)v19 - 2);
          *((void *)v29 - 2) = *(v19 - 2);
          *((_OWORD *)v29 - 2) = v32;
          *(v19 - 3) = 0;
          *(v19 - 2) = 0;
          *(v19 - 4) = 0;
          *((_DWORD *)v29 - 2) = *((_DWORD *)v19 - 2);
          v29 -= 32;
          v19 -= 4;
        }
        while (v19 != v22);
        CFDictionaryRef v19 = (void **)*a2;
        uint64_t v33 = (void **)a2[1];
        *a2 = v29;
        a2[1] = v31;
        a2[2] = v30;
        uint64_t v2 = v25;
        for (unint64_t Count = v21; v33 != v19; v33 -= 4)
        {
          if (*((char *)v33 - 9) < 0) {
            operator delete(*(v33 - 4));
          }
        }
        uint64_t v4 = a2;
        if (v19) {
LABEL_39:
        }
          operator delete(v19);
      }
      int v34 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
      v4[1] = v31;
      if (v34 < 0)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v38.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_42:
          MEMORY[0x1C8791160](v39);
          if (!v15) {
            continue;
          }
LABEL_51:
          CFRelease(v15);
          continue;
        }
      }
      else if ((SHIBYTE(v38.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_42;
      }
LABEL_50:
      operator delete(v38.__r_.__value_.__l.__data_);
      MEMORY[0x1C8791160](v39);
      if (v15) {
        goto LABEL_51;
      }
    }
  }
}

void sub_1C5866E88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
}

void sub_1C5866EA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25,uint64_t a26,const void *a27)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  MEMORY[0x1C8791160](&a25);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&a27);
  std::vector<ResetInfo::RegexPatternAndReasonMask>::~vector[abi:ne180100](a10);
  _Unwind_Resume(a1);
}

void sub_1C5866F38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
}

void std::vector<ResetInfo::RegexPatternAndReasonMask>::__assign_with_size[abi:ne180100]<ResetInfo::RegexPatternAndReasonMask*,ResetInfo::RegexPatternAndReasonMask*>(void **a1, void **a2, char *a3, unint64_t a4)
{
  uint64_t v8 = (uint64_t)a1[2];
  uint64_t v9 = (void **)*a1;
  if (a4 <= (v8 - (uint64_t)*a1) >> 5)
  {
    long long v12 = (void **)a1[1];
    unint64_t v13 = ((char *)v12 - (char *)v9) >> 5;
    if (v13 >= a4)
    {
      if (a2 != (void **)a3)
      {
        unint64_t v23 = 0;
        do
        {
          uint64_t v26 = (char *)&v9[v23];
          unint64_t v27 = (char *)&a2[v23];
          if (a2 != v9)
          {
            char v28 = v27[23];
            if (v26[23] < 0)
            {
              if (v28 >= 0) {
                unint64_t v24 = (char *)&a2[v23];
              }
              else {
                unint64_t v24 = (char *)a2[v23];
              }
              if (v28 >= 0) {
                size_t v25 = v27[23];
              }
              else {
                size_t v25 = (size_t)a2[v23 + 1];
              }
              std::string::__assign_no_alias<false>(&v9[v23], v24, v25);
            }
            else if (v27[23] < 0)
            {
              std::string::__assign_no_alias<true>(&v9[v23], a2[v23], (size_t)a2[v23 + 1]);
            }
            else
            {
              long long v29 = *(_OWORD *)v27;
              *((void *)v26 + 2) = *((void *)v27 + 2);
              *(_OWORD *)uint64_t v26 = v29;
            }
          }
          *((_DWORD *)v26 + 6) = *((_DWORD *)v27 + 6);
          v23 += 4;
        }
        while (&a2[v23] != (void **)a3);
        long long v12 = (void **)a1[1];
        uint64_t v9 = (void **)((char *)v9 + v23 * 8);
      }
      while (v12 != v9)
      {
        if (*((char *)v12 - 9) < 0) {
          operator delete(*(v12 - 4));
        }
        v12 -= 4;
      }
      a1[1] = v9;
    }
    else
    {
      int v14 = (char *)&a2[4 * v13];
      if (v12 != v9)
      {
        unint64_t v15 = 0;
        uint64_t v16 = 32 * v13;
        do
        {
          CFDictionaryRef v19 = (char *)&v9[v15 / 8];
          long long v20 = (char *)&a2[v15 / 8];
          if (a2 != v9)
          {
            char v21 = v20[23];
            if (v19[23] < 0)
            {
              if (v21 >= 0) {
                uint64_t v17 = (char *)&a2[v15 / 8];
              }
              else {
                uint64_t v17 = (char *)a2[v15 / 8];
              }
              if (v21 >= 0) {
                size_t v18 = v20[23];
              }
              else {
                size_t v18 = (size_t)a2[v15 / 8 + 1];
              }
              std::string::__assign_no_alias<false>(&v9[v15 / 8], v17, v18);
            }
            else if (v20[23] < 0)
            {
              std::string::__assign_no_alias<true>(&v9[v15 / 8], a2[v15 / 8], (size_t)a2[v15 / 8 + 1]);
            }
            else
            {
              long long v22 = *(_OWORD *)v20;
              *((void *)v19 + 2) = *((void *)v20 + 2);
              *(_OWORD *)CFDictionaryRef v19 = v22;
            }
          }
          *((_DWORD *)v19 + 6) = *((_DWORD *)v20 + 6);
          v15 += 32;
        }
        while (v16 != v15);
        uint64_t v9 = (void **)a1[1];
      }
      std::string v38 = (char *)v9;
      if (v14 != a3)
      {
        uint64_t v39 = 0;
        do
        {
          uint64_t v41 = (std::string *)&v9[v39];
          uint64_t v42 = &v14[v39 * 8];
          if (v14[v39 * 8 + 23] < 0)
          {
            std::string::__init_copy_ctor_external(v41, *(const std::string::value_type **)v42, *((void *)v42 + 1));
          }
          else
          {
            long long v40 = *(_OWORD *)v42;
            v41->__r_.__value_.__r.__words[2] = *((void *)v42 + 2);
            *(_OWORD *)&v41->__r_.__value_.__l.__data_ = v40;
          }
          LODWORD(v9[v39 + 3]) = *(_DWORD *)&v14[v39 * 8 + 24];
          v39 += 4;
        }
        while (&v14[v39 * 8] != a3);
        std::string v38 = (char *)&v9[v39];
      }
      a1[1] = v38;
    }
  }
  else
  {
    if (v9)
    {
      uint64_t v10 = (void **)a1[1];
      long long v11 = *a1;
      if (v10 != v9)
      {
        do
        {
          if (*((char *)v10 - 9) < 0) {
            operator delete(*(v10 - 4));
          }
          v10 -= 4;
        }
        while (v10 != v9);
        long long v11 = *a1;
      }
      a1[1] = v9;
      operator delete(v11);
      uint64_t v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 >> 59) {
      goto LABEL_70;
    }
    uint64_t v30 = v8 >> 4;
    if (v8 >> 4 <= a4) {
      uint64_t v30 = a4;
    }
    BOOL v31 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0;
    unint64_t v32 = 0x7FFFFFFFFFFFFFFLL;
    if (!v31) {
      unint64_t v32 = v30;
    }
    if (v32 >> 59) {
LABEL_70:
    }
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    uint64_t v33 = 32 * v32;
    int v34 = (char *)operator new(32 * v32);
    *a1 = v34;
    a1[1] = v34;
    a1[2] = &v34[v33];
    if (a2 != (void **)a3)
    {
      uint64_t v35 = 0;
      do
      {
        size_t v36 = (std::string *)&v34[v35 * 8];
        int v37 = (char *)&a2[v35];
        if (SHIBYTE(a2[v35 + 2]) < 0)
        {
          std::string::__init_copy_ctor_external(v36, *(const std::string::value_type **)v37, *((void *)v37 + 1));
        }
        else
        {
          *(_OWORD *)&v36->__r_.__value_.__l.__data_ = *(_OWORD *)v37;
          v36->__r_.__value_.__r.__words[2] = *((void *)v37 + 2);
        }
        *(_DWORD *)&v34[v35 * 8 + 24] = a2[v35 + 3];
        v35 += 4;
      }
      while (&a2[v35] != (void **)a3);
      v34 += v35 * 8;
    }
    a1[1] = v34;
  }
}

void sub_1C58672C8(_Unwind_Exception *exception_object)
{
  for (; v3; v3 -= 32)
  {
    if (*(char *)(v2 + v3 - 9) < 0) {
      operator delete(*(void **)(v2 + v3 - 32));
    }
  }
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(exception_object);
}

void *std::shared_ptr<BasebandCrashReasonFilter>::shared_ptr[abi:ne180100]<BasebandCrashReasonFilter,std::shared_ptr<BasebandCrashReasonFilter> ctu::SharedSynchronizable<BasebandCrashReasonFilter>::make_shared_ptr<BasebandCrashReasonFilter>(BasebandCrashReasonFilter*)::{lambda(BasebandCrashReasonFilter*)#1},void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  uint64_t v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = &v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20F8530;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)a2;
  a1[1] = v4;
  if (!a2) {
    return a1;
  }
  CFArrayRef v6 = *(std::__shared_weak_count **)(a2 + 16);
  if (v6)
  {
    if (v6->__shared_owners_ == -1)
    {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      *(void *)(a2 + 8) = a2;
      *(void *)(a2 + 16) = v4;
      std::__shared_weak_count::__release_weak(v6);
      if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
        goto LABEL_8;
      }
    }
    return a1;
  }
  atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  *(void *)(a2 + 8) = a2;
  *(void *)(a2 + 16) = v4;
  if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
LABEL_8:
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void sub_1C5867414(void *a1)
{
  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[3], v1, (dispatch_function_t)std::shared_ptr<BasebandCrashReasonFilter> ctu::SharedSynchronizable<BasebandCrashReasonFilter>::make_shared_ptr<BasebandCrashReasonFilter>(BasebandCrashReasonFilter*)::{lambda(BasebandCrashReasonFilter*)#1}::operator() const(BasebandCrashReasonFilter*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_1C586743C(_Unwind_Exception *a1)
{
}

void std::__shared_ptr_pointer<BasebandCrashReasonFilter *,std::shared_ptr<BasebandCrashReasonFilter> ctu::SharedSynchronizable<BasebandCrashReasonFilter>::make_shared_ptr<BasebandCrashReasonFilter>(BasebandCrashReasonFilter*)::{lambda(BasebandCrashReasonFilter *)#1},std::allocator<BasebandCrashReasonFilter>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<BasebandCrashReasonFilter *,std::shared_ptr<BasebandCrashReasonFilter> ctu::SharedSynchronizable<BasebandCrashReasonFilter>::make_shared_ptr<BasebandCrashReasonFilter>(BasebandCrashReasonFilter*)::{lambda(BasebandCrashReasonFilter *)#1},std::allocator<BasebandCrashReasonFilter>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<BasebandCrashReasonFilter *,std::shared_ptr<BasebandCrashReasonFilter> ctu::SharedSynchronizable<BasebandCrashReasonFilter>::make_shared_ptr<BasebandCrashReasonFilter>(BasebandCrashReasonFilter*)::{lambda(BasebandCrashReasonFilter *)#1},std::allocator<BasebandCrashReasonFilter>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableI25BasebandCrashReasonFilterE15make_shared_ptrIS1_EENSt3__110shared_ptr"
                     "IT_EEPS6_EUlPS1_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableI25BasebandCrashReasonFilterE15make_shared_ptrIS1_EENSt3__11"
                                "0shared_ptrIT_EEPS6_EUlPS1_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableI25BasebandCrashReasonFilterE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableI25BasebandCrashReasonFilterE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24; {
  return 0;
  }
}

uint64_t std::shared_ptr<BasebandCrashReasonFilter> ctu::SharedSynchronizable<BasebandCrashReasonFilter>::make_shared_ptr<BasebandCrashReasonFilter>(BasebandCrashReasonFilter*)::{lambda(BasebandCrashReasonFilter*)#1}::operator() const(BasebandCrashReasonFilter*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t __cxx_global_var_init_12()
{
  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<ABMProperties>::~PthreadMutexGuardPolicy, &ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance, &dword_1C5767000);
  }
  return result;
}

{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<HealthEventDB>::~PthreadMutexGuardPolicy, &ctu::Singleton<HealthEventDB,HealthEventDB,ctu::PthreadMutexGuardPolicy<HealthEventDB>>::sInstance, &dword_1C5767000);
  }
  return result;
}

uint64_t abm::ParseWakeDataEureka(xpc_object_t *a1, xpc_object_t *a2)
{
  uint64_t v4 = MEMORY[0x1C8792D30](*a1);
  uint64_t v5 = MEMORY[0x1E4F14590];
  if (v4 != MEMORY[0x1E4F14590] || MEMORY[0x1C8792D30](*a2) != v5) {
    return 0;
  }
  xpc_object_t v7 = xpc_string_create((const char *)*MEMORY[0x1E4F4C610]);
  if (!v7) {
    xpc_object_t v7 = xpc_null_create();
  }
  xpc_dictionary_set_value(*a2, (const char *)*MEMORY[0x1E4F4C408], v7);
  xpc_object_t v8 = xpc_null_create();
  xpc_release(v7);
  xpc_release(v8);
  uint64_t v9 = (const char *)*MEMORY[0x1E4F4C910];
  xpc_object_t value = xpc_dictionary_get_value(*a1, (const char *)*MEMORY[0x1E4F4C910]);
  xpc_object_t v99 = value;
  if (value) {
    xpc_retain(value);
  }
  else {
    xpc_object_t v99 = xpc_null_create();
  }
  int v11 = xpc::dyn_cast_or_default((xpc *)&v99, 0);
  xpc_release(v99);
  xpc_object_t v12 = xpc_int64_create(v11);
  if (!v12) {
    xpc_object_t v12 = xpc_null_create();
  }
  xpc_dictionary_set_value(*a2, v9, v12);
  xpc_object_t v13 = xpc_null_create();
  xpc_release(v12);
  xpc_release(v13);
  int v14 = (const char *)*MEMORY[0x1E4F4C560];
  xpc_object_t v15 = xpc_dictionary_get_value(*a1, (const char *)*MEMORY[0x1E4F4C560]);
  if (v15)
  {
    xpc_object_t v16 = v15;
    xpc_retain(v15);
  }
  else
  {
    xpc_object_t v16 = xpc_null_create();
  }
  uint64_t v17 = MEMORY[0x1C8792D30](v16);
  uint64_t v18 = MEMORY[0x1E4F145D8];
  if (v17 != MEMORY[0x1E4F145D8])
  {
    if (v16)
    {
      xpc_retain(v16);
      xpc_object_t v19 = v16;
    }
    else
    {
      xpc_object_t v19 = xpc_null_create();
    }
    xpc_dictionary_set_value(*a2, v14, v19);
    xpc_object_t v20 = xpc_null_create();
    xpc_release(v19);
    xpc_release(v20);
  }
  switch(v11)
  {
    case 1:
      xpc_object_t v101 = xpc_string_create((const char *)*MEMORY[0x1E4F4C700]);
      if (!v101) {
        xpc_object_t v101 = xpc_null_create();
      }
      uint64_t v29 = *MEMORY[0x1E4F4C568];
      xpc_object_t v99 = a2;
      uint64_t v100 = v29;
      xpc::dict::object_proxy::operator=((uint64_t)&v99, &v101, &v102);
      xpc_release(v102);
      xpc_object_t v102 = 0;
      xpc_release(v101);
      xpc_object_t v101 = 0;
      xpc_object_t v97 = xpc_string_create((const char *)*MEMORY[0x1E4F4CBD0]);
      if (!v97) {
        xpc_object_t v97 = xpc_null_create();
      }
      uint64_t v30 = *MEMORY[0x1E4F4C918];
      xpc_object_t v99 = a2;
      uint64_t v100 = v30;
      xpc::dict::object_proxy::operator=((uint64_t)&v99, &v97, &v98);
      xpc_release(v98);
      xpc_object_t v98 = 0;
      xpc_release(v97);
      xpc_object_t v97 = 0;
      break;
    case 2:
      xpc_object_t v95 = xpc_string_create((const char *)*MEMORY[0x1E4F4C700]);
      if (!v95) {
        xpc_object_t v95 = xpc_null_create();
      }
      uint64_t v31 = *MEMORY[0x1E4F4C568];
      xpc_object_t v99 = a2;
      uint64_t v100 = v31;
      xpc::dict::object_proxy::operator=((uint64_t)&v99, &v95, &v96);
      xpc_release(v96);
      xpc_object_t v96 = 0;
      xpc_release(v95);
      xpc_object_t v95 = 0;
      xpc_object_t v93 = xpc_string_create((const char *)*MEMORY[0x1E4F4C998]);
      if (!v93) {
        xpc_object_t v93 = xpc_null_create();
      }
      uint64_t v32 = *MEMORY[0x1E4F4C918];
      xpc_object_t v99 = a2;
      uint64_t v100 = v32;
      xpc::dict::object_proxy::operator=((uint64_t)&v99, &v93, &v94);
      xpc_release(v94);
      xpc_object_t v94 = 0;
      xpc_release(v93);
      xpc_object_t v93 = 0;
      break;
    case 3:
    case 11:
      xpc_object_t v21 = xpc_string_create((const char *)*MEMORY[0x1E4F4C9A0]);
      if (!v21) {
        xpc_object_t v21 = xpc_null_create();
      }
      xpc_dictionary_set_value(*a2, (const char *)*MEMORY[0x1E4F4C568], v21);
      xpc_object_t v22 = xpc_null_create();
      xpc_release(v21);
      xpc_release(v22);
      xpc_object_t v23 = xpc_string_create((const char *)*MEMORY[0x1E4F4C848]);
      if (!v23) {
        xpc_object_t v23 = xpc_null_create();
      }
      xpc_dictionary_set_value(*a2, (const char *)*MEMORY[0x1E4F4C918], v23);
      xpc_object_t v24 = xpc_null_create();
      xpc_release(v23);
      xpc_release(v24);
      if (MEMORY[0x1C8792D30](v16) != v18)
      {
        xpc_object_t v91 = v16;
        v92 = (void *)0xAAAAAAAAAAAAAAAALL;
        if (v16) {
          xpc_retain(v16);
        }
        else {
          xpc_object_t v91 = xpc_null_create();
        }
        abm::_ParseEurekaQMI(&v92);
        xpc_release(v91);
        xpc_object_t v91 = 0;
        xpc::dict::dict((xpc::dict *)&v89, &v92);
        uint64_t v49 = *MEMORY[0x1E4F4CC78];
        xpc_object_t v99 = a2;
        uint64_t v100 = v49;
        xpc::dict::object_proxy::operator=((uint64_t)&v99, &v89, &v90);
        xpc_release(v90);
        xpc_object_t v90 = 0;
        xpc_release(v89);
        xpc_object_t v89 = 0;
        xpc_release(v92);
      }
      break;
    case 4:
    case 13:
      xpc_object_t v88 = *a1;
      if (v88) {
        xpc_retain(v88);
      }
      else {
        xpc_object_t v88 = xpc_null_create();
      }
      abm::ParseWakeDataIP(&v88, a2);
      xpc_release(v88);
      xpc_object_t v88 = 0;
      break;
    case 5:
    case 12:
      xpc_object_t v25 = xpc_string_create((const char *)*MEMORY[0x1E4F4C708]);
      if (!v25) {
        xpc_object_t v25 = xpc_null_create();
      }
      xpc_dictionary_set_value(*a2, (const char *)*MEMORY[0x1E4F4C568], v25);
      xpc_object_t v26 = xpc_null_create();
      xpc_release(v25);
      xpc_release(v26);
      xpc_object_t v27 = xpc_string_create((const char *)*MEMORY[0x1E4F4CBD8]);
      if (!v27) {
        xpc_object_t v27 = xpc_null_create();
      }
      xpc_dictionary_set_value(*a2, (const char *)*MEMORY[0x1E4F4C918], v27);
      xpc_object_t v28 = xpc_null_create();
      xpc_release(v27);
      xpc_release(v28);
      break;
    case 6:
      xpc_object_t v78 = xpc_string_create((const char *)*MEMORY[0x1E4F4C700]);
      if (!v78) {
        xpc_object_t v78 = xpc_null_create();
      }
      uint64_t v33 = *MEMORY[0x1E4F4C568];
      xpc_object_t v99 = a2;
      uint64_t v100 = v33;
      xpc::dict::object_proxy::operator=((uint64_t)&v99, &v78, &object);
      xpc_release(object);
      xpc_object_t object = 0;
      xpc_release(v78);
      xpc_object_t v78 = 0;
      xpc_object_t v76 = xpc_string_create((const char *)*MEMORY[0x1E4F4C978]);
      if (!v76) {
        xpc_object_t v76 = xpc_null_create();
      }
      uint64_t v34 = *MEMORY[0x1E4F4C918];
      xpc_object_t v99 = a2;
      uint64_t v100 = v34;
      xpc::dict::object_proxy::operator=((uint64_t)&v99, &v76, &v77);
      xpc_release(v77);
      xpc_object_t v77 = 0;
      xpc_release(v76);
      xpc_object_t v76 = 0;
      break;
    case 7:
      xpc_object_t v74 = xpc_string_create((const char *)*MEMORY[0x1E4F4C708]);
      if (!v74) {
        xpc_object_t v74 = xpc_null_create();
      }
      uint64_t v35 = *MEMORY[0x1E4F4C568];
      xpc_object_t v99 = a2;
      uint64_t v100 = v35;
      xpc::dict::object_proxy::operator=((uint64_t)&v99, &v74, &v75);
      xpc_release(v75);
      xpc_object_t v75 = 0;
      xpc_release(v74);
      xpc_object_t v74 = 0;
      xpc_object_t v72 = xpc_string_create((const char *)*MEMORY[0x1E4F4C970]);
      if (!v72) {
        xpc_object_t v72 = xpc_null_create();
      }
      uint64_t v36 = *MEMORY[0x1E4F4C918];
      xpc_object_t v99 = a2;
      uint64_t v100 = v36;
      xpc::dict::object_proxy::operator=((uint64_t)&v99, &v72, &v73);
      xpc_release(v73);
      xpc_object_t v73 = 0;
      xpc_release(v72);
      xpc_object_t v72 = 0;
      break;
    case 9:
      xpc_object_t v70 = xpc_string_create((const char *)*MEMORY[0x1E4F4C9A0]);
      if (!v70) {
        xpc_object_t v70 = xpc_null_create();
      }
      uint64_t v39 = *MEMORY[0x1E4F4C568];
      xpc_object_t v99 = a2;
      uint64_t v100 = v39;
      xpc::dict::object_proxy::operator=((uint64_t)&v99, &v70, &v71);
      xpc_release(v71);
      xpc_object_t v71 = 0;
      xpc_release(v70);
      xpc_object_t v70 = 0;
      xpc_object_t v68 = xpc_string_create((const char *)*MEMORY[0x1E4F4C990]);
      if (!v68) {
        xpc_object_t v68 = xpc_null_create();
      }
      uint64_t v40 = *MEMORY[0x1E4F4C918];
      xpc_object_t v99 = a2;
      uint64_t v100 = v40;
      xpc::dict::object_proxy::operator=((uint64_t)&v99, &v68, &v69);
      xpc_release(v69);
      xpc_object_t v69 = 0;
      xpc_release(v68);
      xpc_object_t v68 = 0;
      if (MEMORY[0x1C8792D30](v16) != v18)
      {
        xpc_object_t v66 = xpc_string_create((const char *)*MEMORY[0x1E4F4C848]);
        if (!v66) {
          xpc_object_t v66 = xpc_null_create();
        }
        xpc_object_t v99 = a2;
        uint64_t v100 = v40;
        xpc::dict::object_proxy::operator=((uint64_t)&v99, &v66, &v67);
        xpc_release(v67);
        xpc_object_t v67 = 0;
        xpc_release(v66);
        xpc_object_t v65 = v16;
        xpc_object_t v66 = 0;
        v92 = (void *)0xAAAAAAAAAAAAAAAALL;
        if (v16) {
          xpc_retain(v16);
        }
        else {
          xpc_object_t v65 = xpc_null_create();
        }
        abm::_ParseEurekaQMI(&v92);
        xpc_release(v65);
        xpc_object_t v65 = 0;
        xpc::dict::dict((xpc::dict *)&v63, &v92);
        uint64_t v50 = *MEMORY[0x1E4F4CC78];
        xpc_object_t v99 = a2;
        uint64_t v100 = v50;
        xpc::dict::object_proxy::operator=((uint64_t)&v99, &v63, &v64);
        xpc_release(v64);
        xpc_object_t v64 = 0;
        xpc_release(v63);
        xpc_object_t v63 = 0;
        xpc_release(v92);
      }
      break;
    case 10:
      xpc_object_t v61 = xpc_string_create((const char *)*MEMORY[0x1E4F4C618]);
      if (!v61) {
        xpc_object_t v61 = xpc_null_create();
      }
      uint64_t v41 = *MEMORY[0x1E4F4C568];
      xpc_object_t v99 = a2;
      uint64_t v100 = v41;
      xpc::dict::object_proxy::operator=((uint64_t)&v99, &v61, &v62);
      xpc_release(v62);
      xpc_object_t v62 = 0;
      xpc_release(v61);
      xpc_object_t v61 = 0;
      xpc_object_t v59 = xpc_string_create((const char *)*MEMORY[0x1E4F4C988]);
      if (!v59) {
        xpc_object_t v59 = xpc_null_create();
      }
      uint64_t v42 = *MEMORY[0x1E4F4C918];
      xpc_object_t v99 = a2;
      uint64_t v100 = v42;
      xpc::dict::object_proxy::operator=((uint64_t)&v99, &v59, &v60);
      xpc_release(v60);
      xpc_object_t v60 = 0;
      xpc_release(v59);
      xpc_object_t v59 = 0;
      break;
    case 14:
      xpc_object_t v57 = xpc_string_create((const char *)*MEMORY[0x1E4F4C858]);
      if (!v57) {
        xpc_object_t v57 = xpc_null_create();
      }
      uint64_t v43 = *MEMORY[0x1E4F4C568];
      xpc_object_t v99 = a2;
      uint64_t v100 = v43;
      xpc::dict::object_proxy::operator=((uint64_t)&v99, &v57, &v58);
      xpc_release(v58);
      xpc_object_t v58 = 0;
      xpc_release(v57);
      xpc_object_t v57 = 0;
      xpc_object_t v55 = xpc_string_create((const char *)*MEMORY[0x1E4F4CEC0]);
      if (!v55) {
        xpc_object_t v55 = xpc_null_create();
      }
      uint64_t v44 = *MEMORY[0x1E4F4C918];
      xpc_object_t v99 = a2;
      uint64_t v100 = v44;
      xpc::dict::object_proxy::operator=((uint64_t)&v99, &v55, &v56);
      xpc_release(v56);
      xpc_object_t v56 = 0;
      xpc_release(v55);
      xpc_object_t v55 = 0;
      break;
    case 15:
      xpc_object_t v86 = xpc_string_create((const char *)*MEMORY[0x1E4F4C708]);
      if (!v86) {
        xpc_object_t v86 = xpc_null_create();
      }
      uint64_t v45 = *MEMORY[0x1E4F4C568];
      xpc_object_t v99 = a2;
      uint64_t v100 = v45;
      xpc::dict::object_proxy::operator=((uint64_t)&v99, &v86, &v87);
      xpc_release(v87);
      xpc_object_t v87 = 0;
      xpc_release(v86);
      xpc_object_t v86 = 0;
      xpc_object_t v84 = xpc_string_create((const char *)*MEMORY[0x1E4F4C980]);
      if (!v84) {
        xpc_object_t v84 = xpc_null_create();
      }
      uint64_t v46 = *MEMORY[0x1E4F4C918];
      xpc_object_t v99 = a2;
      uint64_t v100 = v46;
      xpc::dict::object_proxy::operator=((uint64_t)&v99, &v84, &v85);
      xpc_release(v85);
      xpc_object_t v85 = 0;
      xpc_release(v84);
      xpc_object_t v84 = 0;
      break;
    case 16:
      xpc_object_t v82 = xpc_string_create((const char *)*MEMORY[0x1E4F4C708]);
      if (!v82) {
        xpc_object_t v82 = xpc_null_create();
      }
      uint64_t v47 = *MEMORY[0x1E4F4C568];
      xpc_object_t v99 = a2;
      uint64_t v100 = v47;
      xpc::dict::object_proxy::operator=((uint64_t)&v99, &v82, &v83);
      xpc_release(v83);
      xpc_object_t v83 = 0;
      xpc_release(v82);
      xpc_object_t v82 = 0;
      xpc_object_t v80 = xpc_string_create((const char *)*MEMORY[0x1E4F4C968]);
      if (!v80) {
        xpc_object_t v80 = xpc_null_create();
      }
      uint64_t v48 = *MEMORY[0x1E4F4C918];
      xpc_object_t v99 = a2;
      uint64_t v100 = v48;
      xpc::dict::object_proxy::operator=((uint64_t)&v99, &v80, &v81);
      xpc_release(v81);
      xpc_object_t v81 = 0;
      xpc_release(v80);
      xpc_object_t v80 = 0;
      break;
    default:
      xpc_object_t v53 = xpc_string_create((const char *)*MEMORY[0x1E4F4C9A8]);
      if (!v53) {
        xpc_object_t v53 = xpc_null_create();
      }
      uint64_t v37 = *MEMORY[0x1E4F4C568];
      xpc_object_t v99 = a2;
      uint64_t v100 = v37;
      xpc::dict::object_proxy::operator=((uint64_t)&v99, &v53, &v54);
      xpc_release(v54);
      xpc_object_t v54 = 0;
      xpc_release(v53);
      xpc_object_t v53 = 0;
      xpc_object_t v51 = xpc_string_create((const char *)*MEMORY[0x1E4F4CEC0]);
      if (!v51) {
        xpc_object_t v51 = xpc_null_create();
      }
      uint64_t v38 = *MEMORY[0x1E4F4C918];
      xpc_object_t v99 = a2;
      uint64_t v100 = v38;
      xpc::dict::object_proxy::operator=((uint64_t)&v99, &v51, &v52);
      xpc_release(v52);
      xpc_object_t v52 = 0;
      xpc_release(v51);
      xpc_object_t v51 = 0;
      break;
  }
  xpc_release(v16);
  return 1;
}

void sub_1C58681E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,xpc_object_t object)
{
  xpc_release(object);
  xpc_release(v23);
  _Unwind_Resume(a1);
}

void abm::_ParseEurekaQMI(xpc_object_t *a1)
{
  *a1 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  xpc_object_t v2 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v3 = v2;
  if (v2)
  {
    *a1 = v2;
  }
  else
  {
    xpc_object_t v3 = xpc_null_create();
    *a1 = v3;
    if (!v3)
    {
      xpc_object_t v4 = xpc_null_create();
      xpc_object_t v3 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1C8792D30](v3) != MEMORY[0x1E4F14590])
  {
    xpc_object_t v4 = xpc_null_create();
LABEL_8:
    *a1 = v4;
    goto LABEL_9;
  }
  xpc_retain(v3);
LABEL_9:
  xpc_release(v3);
  memset(v12, 170, sizeof(v12));
  xpc::dyn_cast_or_default();
  std::string __p = 0;
  p_p = &__p;
  uint64_t v10 = 0x2000000000;
  char v11 = 0;
  if (v12[1] == v12[0]) {
    goto LABEL_14;
  }
  xpc_object_t object = *a1;
  if (*a1) {
    xpc_retain(*a1);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  qmi::parse();
  xpc_release(object);
  if (!*((unsigned char *)p_p + 24))
  {
LABEL_14:
    xpc_object_t v5 = xpc_BOOL_create(1);
    if (!v5) {
      xpc_object_t v5 = xpc_null_create();
    }
    xpc_dictionary_set_value(*a1, (const char *)*MEMORY[0x1E4F4D110], v5);
    xpc_object_t v6 = xpc_null_create();
    xpc_release(v5);
    xpc_release(v6);
  }
  _Block_object_dispose(&__p, 8);
  if (v12[0])
  {
    v12[1] = v12[0];
    operator delete(v12[0]);
  }
}

void sub_1C5868678(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, xpc_object_t object, uint64_t a16, uint64_t a17)
{
  xpc_release(object);
  _Block_object_dispose(&a16, 8);
  xpc_object_t v20 = *(void **)(v18 - 56);
  if (v20)
  {
    *(void *)(v18 - 48) = v20;
    operator delete(v20);
  }
  xpc::dict::~dict(v17);
  _Unwind_Resume(a1);
}

void ___ZN3abmL15_ParseEurekaQMIEN3xpc6objectE_block_invoke(uint64_t a1, uint64_t a2, unsigned __int16 *a3, int a4, int a5)
{
  uint64_t v9 = a1;
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
  xpc_object_t v10 = xpc_int64_create(*(unsigned __int16 *)(a2 + 2));
  if (!v10) {
    xpc_object_t v10 = xpc_null_create();
  }
  xpc_dictionary_set_value(*(xpc_object_t *)(v9 + 40), (const char *)*MEMORY[0x1E4F4CB68], v10);
  xpc_object_t v11 = xpc_null_create();
  xpc_release(v10);
  xpc_release(v11);
  xpc_object_t v12 = xpc_int64_create(*(unsigned __int8 *)(a2 + 6));
  if (!v12) {
    xpc_object_t v12 = xpc_null_create();
  }
  xpc_dictionary_set_value(*(xpc_object_t *)(v9 + 40), (const char *)*MEMORY[0x1E4F4CD40], v12);
  xpc_object_t v13 = xpc_null_create();
  xpc_release(v12);
  xpc_release(v13);
  xpc_object_t v14 = xpc_int64_create(*(unsigned __int8 *)(a2 + 5));
  if (!v14) {
    xpc_object_t v14 = xpc_null_create();
  }
  xpc_dictionary_set_value(*(xpc_object_t *)(v9 + 40), (const char *)*MEMORY[0x1E4F4CF68], v14);
  xpc_object_t v15 = xpc_null_create();
  xpc_release(v14);
  xpc_release(v15);
  xpc_object_t v16 = (const char *)qmi::asString();
  xpc_object_t v17 = xpc_string_create(v16);
  if (!v17) {
    xpc_object_t v17 = xpc_null_create();
  }
  xpc_dictionary_set_value(*(xpc_object_t *)(v9 + 40), (const char *)*MEMORY[0x1E4F4CC88], v17);
  xpc_object_t v18 = xpc_null_create();
  xpc_release(v17);
  xpc_release(v18);
  if (a3 && a5 >= 2)
  {
    xpc_object_t v19 = xpc_int64_create(*a3);
    if (!v19) {
      xpc_object_t v19 = xpc_null_create();
    }
    xpc_dictionary_set_value(*(xpc_object_t *)(v9 + 40), (const char *)*MEMORY[0x1E4F4CA58], v19);
    xpc_object_t v20 = xpc_null_create();
    xpc_release(v19);
    xpc_release(v20);
  }
  BOOL v21 = 0;
  if (*(unsigned char *)a2 != 1 || *(unsigned __int8 *)(a2 + 4) != 128 || *(unsigned char *)(a2 + 5) != 5) {
    goto LABEL_106;
  }
  BOOL v21 = 0;
  if (a5 >= a4) {
    int v22 = a4;
  }
  else {
    int v22 = a5;
  }
  uint64_t v82 = 0;
  xpc_object_t v80 = &v81;
  xpc_object_t v81 = 0;
  unint64_t v83 = 0xAAAAAAAA00000000;
  uint64_t v23 = (v22 - 4);
  if (v22 < 4) {
    goto LABEL_105;
  }
  int v24 = *a3;
  LOWORD(v83) = *a3;
  int v25 = a3[1];
  WORD1(v83) = a3[1];
  if (v22 >= 8)
  {
    unsigned __int16 v26 = 0;
    xpc_object_t v27 = (unsigned __int8 *)(a3 + 2);
    uint64_t v75 = v9;
    uint64_t v76 = v23 - 3;
    while (1)
    {
      unsigned int v31 = *v27;
      unint64_t v32 = *(unsigned __int16 *)(v27 + 1);
      if (v76 - (unint64_t)v26 >= v32) {
        size_t v33 = *(unsigned __int16 *)(v27 + 1);
      }
      else {
        size_t v33 = v76 - v26;
      }
      if (v33)
      {
        uint64_t v34 = (char *)operator new(v33);
        uint64_t v35 = &v34[v33];
        bzero(v34, v33);
      }
      else
      {
        uint64_t v34 = 0;
        uint64_t v35 = 0;
      }
      memcpy(v34, v27 + 3, v33);
      uint64_t v36 = v81;
      uint64_t v37 = &v81;
LABEL_34:
      uint64_t v38 = v37;
      if (v36)
      {
        while (1)
        {
          uint64_t v37 = (uint64_t **)v36;
          unsigned int v39 = *((unsigned __int8 *)v36 + 32);
          if (v31 < v39)
          {
            uint64_t v36 = *v37;
            goto LABEL_34;
          }
          if (v39 >= v31) {
            break;
          }
          uint64_t v36 = v37[1];
          if (!v36)
          {
            uint64_t v38 = v37 + 1;
            goto LABEL_39;
          }
        }
        xpc_object_t v28 = (char *)v37;
        uint64_t v30 = v37 + 5;
        uint64_t v29 = v37[5];
        if (!v29) {
          goto LABEL_25;
        }
      }
      else
      {
LABEL_39:
        xpc_object_t v28 = (char *)operator new(0x40uLL);
        v28[32] = v31;
        *((void *)v28 + 6) = 0;
        *((void *)v28 + 7) = 0;
        *((void *)v28 + 5) = 0;
        *(void *)xpc_object_t v28 = 0;
        *((void *)v28 + 1) = 0;
        *((void *)v28 + 2) = v37;
        *uint64_t v38 = (uint64_t *)v28;
        uint64_t v40 = (uint64_t *)v28;
        if (*v80)
        {
          xpc_object_t v80 = (uint64_t **)*v80;
          uint64_t v40 = *v38;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v81, v40);
        ++v82;
        uint64_t v30 = v28 + 40;
        uint64_t v29 = (uint64_t *)*((void *)v28 + 5);
        if (!v29) {
          goto LABEL_25;
        }
      }
      *((void *)v28 + 6) = v29;
      operator delete(v29);
      *uint64_t v30 = 0;
      v30[1] = 0;
      v30[2] = 0;
LABEL_25:
      v27 += (v32 + 3);
      v26 += v32 + 3;
      *((void *)v28 + 5) = v34;
      *((void *)v28 + 6) = v35;
      *((void *)v28 + 7) = v35;
      if (v26 + 3 >= (int)v23)
      {
        int v25 = WORD1(v83);
        int v24 = (unsigned __int16)v83;
        uint64_t v9 = v75;
        break;
      }
    }
  }
  BOOL v21 = 0;
  if (!v25 || v24 != 1) {
    goto LABEL_105;
  }
  uint64_t v41 = v9;
  xpc_object_t v78 = 0;
  uint64_t v79 = 0;
  xpc_object_t v77 = &v78;
  uint64_t v42 = v80;
  if (v80 == &v81)
  {
    uint64_t v43 = 0;
LABEL_103:
    uint64_t v9 = v41;
    goto LABEL_104;
  }
  do
  {
    uint64_t v44 = v78;
    uint64_t v45 = &v78;
    if (v77 == &v78) {
      goto LABEL_55;
    }
    uint64_t v46 = v78;
    uint64_t v47 = &v78;
    if (v78)
    {
      do
      {
        uint64_t v45 = (uint64_t **)v46;
        uint64_t v46 = (uint64_t *)v46[1];
      }
      while (v46);
    }
    else
    {
      do
      {
        uint64_t v45 = (uint64_t **)v47[2];
        BOOL v48 = *v45 == (uint64_t *)v47;
        uint64_t v47 = v45;
      }
      while (v48);
    }
    unsigned int v49 = *((unsigned __int8 *)v42 + 32);
    if (*((unsigned __int8 *)v45 + 32) < v49)
    {
LABEL_55:
      if (v78) {
        uint64_t v50 = v45;
      }
      else {
        uint64_t v50 = &v78;
      }
      if (v78) {
        xpc_object_t v51 = (uint64_t ***)v45;
      }
      else {
        xpc_object_t v51 = &v77;
      }
      if (v78) {
        xpc_object_t v52 = v45 + 1;
      }
      else {
        xpc_object_t v52 = &v78;
      }
      if (v51[1]) {
        goto LABEL_79;
      }
LABEL_73:
      xpc_object_t v54 = operator new(0x40uLL);
      char v55 = *((unsigned char *)v42 + 32);
      v54[5] = 0;
      *((unsigned char *)v54 + 32) = v55;
      v54[6] = 0;
      v54[7] = 0;
      xpc_object_t v57 = v42[5];
      xpc_object_t v56 = v42[6];
      size_t v58 = (char *)v56 - (char *)v57;
      if (v56 != v57)
      {
        if ((v58 & 0x8000000000000000) != 0) {
          std::vector<std::string>::__throw_length_error[abi:ne180100]();
        }
        xpc_object_t v59 = (char *)operator new((char *)v56 - (char *)v57);
        v54[5] = v59;
        v54[6] = v59;
        xpc_object_t v60 = &v59[v58];
        v54[7] = &v59[v58];
        memcpy(v59, v57, v58);
        v54[6] = v60;
      }
      void *v54 = 0;
      v54[1] = 0;
      v54[2] = v50;
      *xpc_object_t v52 = v54;
      if (*v77)
      {
        xpc_object_t v77 = (uint64_t **)*v77;
        xpc_object_t v54 = *v52;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v78, v54);
      ++v79;
      goto LABEL_79;
    }
    xpc_object_t v52 = &v78;
    uint64_t v50 = &v78;
    if (!v78) {
      goto LABEL_73;
    }
    while (1)
    {
      while (1)
      {
        uint64_t v50 = (uint64_t **)v44;
        unsigned int v53 = *((unsigned __int8 *)v44 + 32);
        if (v53 <= v49) {
          break;
        }
        uint64_t v44 = *v50;
        xpc_object_t v52 = v50;
        if (!*v50) {
          goto LABEL_73;
        }
      }
      if (v53 >= v49) {
        break;
      }
      uint64_t v44 = v50[1];
      if (!v44)
      {
        xpc_object_t v52 = v50 + 1;
        goto LABEL_73;
      }
    }
LABEL_79:
    xpc_object_t v61 = v42[1];
    if (v61)
    {
      do
      {
        xpc_object_t v62 = (uint64_t **)v61;
        xpc_object_t v61 = (uint64_t *)*v61;
      }
      while (v61);
    }
    else
    {
      do
      {
        xpc_object_t v62 = (uint64_t **)v42[2];
        BOOL v48 = *v62 == (uint64_t *)v42;
        uint64_t v42 = v62;
      }
      while (!v48);
    }
    uint64_t v42 = v62;
  }
  while (v62 != &v81);
  uint64_t v43 = v78;
  if (!v78) {
    goto LABEL_103;
  }
  xpc_object_t v63 = &v78;
  xpc_object_t v64 = v78;
  uint64_t v9 = v41;
  do
  {
    xpc_object_t v65 = v64;
    xpc_object_t v66 = v63;
    unsigned int v67 = *((unsigned __int8 *)v64 + 32);
    if (v67 >= 0x11) {
      xpc_object_t v63 = (uint64_t **)v64;
    }
    else {
      ++v64;
    }
    xpc_object_t v64 = (uint64_t *)*v64;
  }
  while (v64);
  if (v63 != &v78)
  {
    xpc_object_t v68 = v67 >= 0x11 ? v65 : (uint64_t *)v66;
    if (*((unsigned __int8 *)v68 + 32) <= 0x11u)
    {
      if (v67 < 0x11) {
        xpc_object_t v65 = (uint64_t *)v66;
      }
      xpc_object_t v70 = (unsigned char *)v65[5];
      xpc_object_t v69 = (unsigned char *)v65[6];
      size_t v71 = v69 - v70;
      if (v69 != v70)
      {
        if ((v71 & 0x8000000000000000) != 0) {
          std::vector<std::string>::__throw_length_error[abi:ne180100]();
        }
        xpc_object_t v72 = operator new(v69 - v70);
        memcpy(v72, v70, v71);
        if (v71 >= 6 && v72[5] == 7)
        {
          operator delete(v72);
          std::__tree<std::__value_type<unsigned char,std::vector<unsigned char>>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,std::vector<unsigned char>>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,std::vector<unsigned char>>>>::destroy(v78);
          BOOL v21 = 1;
          goto LABEL_105;
        }
        operator delete(v72);
        uint64_t v43 = v78;
      }
    }
  }
LABEL_104:
  std::__tree<std::__value_type<unsigned char,std::vector<unsigned char>>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,std::vector<unsigned char>>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,std::vector<unsigned char>>>>::destroy(v43);
  BOOL v21 = 0;
LABEL_105:
  std::__tree<std::__value_type<unsigned char,std::vector<unsigned char>>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,std::vector<unsigned char>>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,std::vector<unsigned char>>>>::destroy(v81);
LABEL_106:
  xpc_object_t v73 = xpc_BOOL_create(v21);
  if (!v73) {
    xpc_object_t v73 = xpc_null_create();
  }
  xpc_dictionary_set_value(*(xpc_object_t *)(v9 + 40), (const char *)*MEMORY[0x1E4F4CA50], v73);
  xpc_object_t v74 = xpc_null_create();
  xpc_release(v73);
  xpc_release(v74);
}

void sub_1C5868DB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20)
{
  if (__p)
  {
    operator delete(__p);
    std::__tree<std::__value_type<unsigned char,std::vector<unsigned char>>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,std::vector<unsigned char>>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,std::vector<unsigned char>>>>::destroy(a17);
    std::__tree<std::__value_type<unsigned char,std::vector<unsigned char>>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,std::vector<unsigned char>>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,std::vector<unsigned char>>>>::destroy(a20);
    _Unwind_Resume(a1);
  }
  std::__tree<std::__value_type<unsigned char,std::vector<unsigned char>>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,std::vector<unsigned char>>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,std::vector<unsigned char>>>>::destroy(a17);
  std::__tree<std::__value_type<unsigned char,std::vector<unsigned char>>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,std::vector<unsigned char>>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,std::vector<unsigned char>>>>::destroy(a20);
  _Unwind_Resume(a1);
}

void sub_1C5868ECC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
}

void sub_1C5868EE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
  if (v20) {
    operator delete(v20);
  }
  std::__tree<std::__value_type<unsigned char,std::vector<unsigned char>>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,std::vector<unsigned char>>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,std::vector<unsigned char>>>>::destroy(a20);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<unsigned char,std::vector<unsigned char>>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,std::vector<unsigned char>>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,std::vector<unsigned char>>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<unsigned char,std::vector<unsigned char>>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,std::vector<unsigned char>>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,std::vector<unsigned char>>>>::destroy(*a1);
    std::__tree<std::__value_type<unsigned char,std::vector<unsigned char>>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,std::vector<unsigned char>>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,std::vector<unsigned char>>>>::destroy(a1[1]);
    xpc_object_t v2 = (void *)a1[5];
    if (v2)
    {
      a1[6] = v2;
      operator delete(v2);
    }
    operator delete(a1);
  }
}

const char *RouterIPCController::asString(unsigned int a1)
{
  if (a1 > 3) {
    return "Unknown";
  }
  else {
    return off_1E6517B00[a1];
  }
}

void RouterIPCController::create(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  xpc_object_t v4 = operator new(0xB8uLL);
  uint64_t v5 = (uint64_t)v4;
  uint64_t v6 = *a1;
  xpc_object_t v7 = (std::__shared_weak_count *)a1[1];
  v8[0] = v6;
  v8[1] = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  RouterIPCController::RouterIPCController((uint64_t)v4, v8);
  *a2 = 0xAAAAAAAAAAAAAAAALL;
  a2[1] = 0xAAAAAAAAAAAAAAAALL;
  std::shared_ptr<RouterIPCController>::shared_ptr[abi:ne180100]<RouterIPCController,std::shared_ptr<RouterIPCController> ctu::SharedSynchronizable<RouterIPCController>::make_shared_ptr<RouterIPCController>(RouterIPCController*)::{lambda(RouterIPCController*)#1},void>(a2, v5);
  ctu::Loggable<RouterIPCController,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(*a2);
  if (v7)
  {
    std::__shared_weak_count::__release_weak(v7);
  }
}

void sub_1C5869040(_Unwind_Exception *a1)
{
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v2);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(a1);
}

uint64_t RouterIPCController::RouterIPCController(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_1F20F85B8;
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v22, "com.apple.telephony.abm", "ipc.router.ctrl");
  GetABMLogServer(&v20);
  initially_inactive = dispatch_queue_attr_make_initially_inactive(0);
  uint64_t v5 = dispatch_queue_create_with_target_V2("ipc.router.ctrl", initially_inactive, 0);
  dispatch_set_qos_class_floor(v5, QOS_CLASS_DEFAULT, 0);
  dispatch_activate(v5);
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = v5;
  if (v5)
  {
    dispatch_retain(v5);
    *(void *)(a1 + 96) = 0;
    dispatch_release(v5);
  }
  else
  {
    *(void *)(a1 + 96) = 0;
  }
  *(void *)a1 = &unk_1F20F8690;
  ctu::OsLogContext::OsLogContext();
  ctu::OsLogContext::OsLogContext();
  ctu::LoggerCommonBase::LoggerCommonBase();
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&v17);
  *(void *)(a1 + 8) = &unk_1F20F0070;
  uint64_t v6 = v21;
  *(void *)(a1 + 56) = v20;
  *(void *)(a1 + 64) = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v23);
  *(void *)a1 = &unk_1F20F8720;
  xpc_object_t v7 = v21;
  if (v21 && !atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v22);
  *(void *)a1 = &unk_1F20F85B8;
  *(void *)(a1 + 104) = *a2;
  uint64_t v8 = a2[1];
  *(void *)(a1 + 112) = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 16), 1uLL, memory_order_relaxed);
  }
  uint64_t v9 = (RouterDelegate *)operator new(0x58uLL);
  RouterDelegate::RouterDelegate(v9);
  *(void *)(a1 + 120) = v9;
  xpc_object_t v10 = (capabilities::abs *)operator new(0x20uLL);
  *(void *)xpc_object_t v10 = &unk_1F20F9978;
  *((void *)v10 + 1) = 0;
  *((void *)v10 + 2) = 0;
  *((void *)v10 + 3) = v9;
  *(void *)(a1 + 128) = v10;
  uint64_t v12 = *((void *)v9 + 9);
  xpc_object_t v11 = (std::__shared_weak_count *)*((void *)v9 + 10);
  xpc_object_t v16 = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v13 = capabilities::abs::QMIPacketMaxSizeBytes(v10);
  uint64_t v17 = v12;
  xpc_object_t v18 = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v19 = v13;
  ATCSRouterIPCDriver::create();
  xpc_object_t v14 = v18;
  if (v18 && !atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
  }
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 152) = a1 + 160;
  *(_DWORD *)(a1 + 176) = 0;
  return a1;
}

void sub_1C58693A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v3);
  uint64_t v5 = (std::__shared_weak_count *)v2[14];
  if (v5) {
    std::__shared_weak_count::__release_weak(v5);
  }
  ctu::SharedLoggable<RouterIPCController,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(v2);
  _Unwind_Resume(a1);
}

void sub_1C5869430(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va2, a4);
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v11 = va_arg(va2, void);
  uint64_t v13 = va_arg(va2, void);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)va);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)(v5 - 64));
  ctu::SharedSynchronizable<DataStallDetection>::~SharedSynchronizable(v4);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)va2);
  _Unwind_Resume(a1);
}

void sub_1C5869464(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)va);
  _Unwind_Resume(a1);
}

void *ctu::SharedLoggable<RouterIPCController,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(void *a1)
{
  *a1 = &unk_1F20F8690;
  MEMORY[0x1C8790F40](a1 + 1);
  uint64_t v2 = a1[12];
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = a1[11];
  if (v3) {
    dispatch_release(v3);
  }
  xpc_object_t v4 = (std::__shared_weak_count *)a1[10];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = &unk_1F20F8690;
  MEMORY[0x1C8790F40](a1 + 1);
  uint64_t v2 = a1[12];
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = a1[11];
  if (v3) {
    dispatch_release(v3);
  }
  xpc_object_t v4 = (std::__shared_weak_count *)a1[10];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

void RouterIPCController::~RouterIPCController(RouterIPCController *this)
{
  *(void *)this = &unk_1F20F85B8;
  std::__tree<std::__value_type<int,QMux>,std::__map_value_compare<int,std::__value_type<int,QMux>,std::less<int>,true>,std::allocator<std::__value_type<int,QMux>>>::destroy(*((void **)this + 20));
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 18);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 16);
    if (!v3) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 16);
    if (!v3) {
      goto LABEL_7;
    }
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
LABEL_7:
  xpc_object_t v4 = (std::__shared_weak_count *)*((void *)this + 14);
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  *(void *)this = &unk_1F20F8690;
  MEMORY[0x1C8790F40]((char *)this + 8);
  uint64_t v5 = *((void *)this + 12);
  if (v5) {
    dispatch_release(v5);
  }
  uint64_t v6 = *((void *)this + 11);
  if (v6) {
    dispatch_release(v6);
  }
  uint64_t v7 = (std::__shared_weak_count *)*((void *)this + 10);
  if (v7) {
    std::__shared_weak_count::__release_weak(v7);
  }
}

{
  void *v1;
  uint64_t vars8;

  RouterIPCController::~RouterIPCController(this);

  operator delete(v1);
}

const char *RouterIPCController::getName(RouterIPCController *this)
{
  return "ipc.router.ctrl";
}

uint64_t RouterIPCController::activate(RouterIPCController *this)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *((void *)this + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v6) = 0;
    _os_log_impl(&dword_1C5767000, v2, OS_LOG_TYPE_DEFAULT, "#I Activating", (uint8_t *)&v6, 2u);
  }
  if (*((_DWORD *)this + 44))
  {
    uint64_t v5 = GetOsLogContext()[1];
    if (os_log_type_enabled(v5, OS_LOG_TYPE_FAULT))
    {
      int v6 = 136315906;
      uint64_t v7 = "ABM ASSERT";
      __int16 v8 = 2080;
      uint64_t v9 = "fState == State::kOffline";
      __int16 v10 = 2080;
      uint64_t v11 = "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices_Manager/AppleBasebandManager/BasebandManager/Ser"
            "ver/Transport/QMI/Driver/RouterIPCController.cpp";
      __int16 v12 = 1024;
      int v13 = 56;
      _os_log_fault_impl(&dword_1C5767000, v5, OS_LOG_TYPE_FAULT, "%s (%s): File: %s Line: %d", (uint8_t *)&v6, 0x26u);
    }
    __break(1u);
  }
  uint64_t v3 = *((void *)this + 5);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    int v6 = 136315394;
    uint64_t v7 = "kOffline";
    __int16 v8 = 2080;
    uint64_t v9 = "kDisengaged";
    _os_log_impl(&dword_1C5767000, v3, OS_LOG_TYPE_DEFAULT, "#I IPC state changing from %s -> %s", (uint8_t *)&v6, 0x16u);
  }
  *((_DWORD *)this + 44) = 2;
  return 1;
}

void RouterIPCController::changeState_sync(uint64_t a1, unsigned int a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  xpc_object_t v4 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(int *)(a1 + 176);
    if (v5 > 3)
    {
      int v6 = "Unknown";
      if (a2 > 3) {
        goto LABEL_4;
      }
    }
    else
    {
      int v6 = off_1E6517B00[v5];
      if (a2 > 3)
      {
LABEL_4:
        uint64_t v7 = "Unknown";
LABEL_7:
        int v8 = 136315394;
        uint64_t v9 = v6;
        __int16 v10 = 2080;
        uint64_t v11 = v7;
        _os_log_impl(&dword_1C5767000, v4, OS_LOG_TYPE_DEFAULT, "#I IPC state changing from %s -> %s", (uint8_t *)&v8, 0x16u);
        goto LABEL_8;
      }
    }
    uint64_t v7 = off_1E6517B00[a2];
    goto LABEL_7;
  }
LABEL_8:
  *(_DWORD *)(a1 + 176) = a2;
}

uint64_t RouterIPCController::engage(void *a1, void *a2)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (void *)a2[3];
  if (v3)
  {
    if (v3 == a2)
    {
      xpc_object_t v16 = v15;
      (*(void (**)(void *, void *))(*a2 + 24))(a2, v15);
    }
    else
    {
      xpc_object_t v16 = (void *)(*(uint64_t (**)(void *))(*v3 + 16))(v3);
    }
  }
  else
  {
    xpc_object_t v16 = 0;
  }
  xpc_object_t v4 = (std::__shared_weak_count *)a1[10];
  if (!v4 || (v5 = a1[9], (int v6 = std::__shared_weak_count::lock(v4)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v7 = v6;
  int v8 = operator new(0x28uLL);
  uint64_t v9 = v8;
  __int16 v10 = v16;
  void *v8 = a1;
  if (v10)
  {
    if (v10 == v15)
    {
      v8[4] = v8 + 1;
      (*(void (**)(void *))(v15[0] + 24))(v15);
    }
    else
    {
      v8[4] = v10;
      xpc_object_t v16 = 0;
    }
  }
  else
  {
    v8[4] = 0;
  }
  uint64_t v11 = a1[11];
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v12 = operator new(0x18uLL);
  void *v12 = v9;
  v12[1] = v5;
  v12[2] = v7;
  dispatch_async_f(v11, v12, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<RouterIPCController>::execute_wrapped<RouterIPCController::engage(std::function<void ()(BOOL,std::string)>)::$_0>(RouterIPCController::engage(std::function<void ()(BOOL,std::string)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<RouterIPCController::engage(std::function<void ()(BOOL,std::string)>)::$_0,std::default_delete<RouterIPCController::engage(std::function<void ()(BOOL,std::string)>)::$_0>>)::{lambda(void *)#1}::__invoke);
  if (atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    uint64_t result = (uint64_t)v16;
    if (v16 != v15) {
      goto LABEL_15;
    }
    return (*(uint64_t (**)(void *))(v15[0] + 32))(v15);
  }
  ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
  std::__shared_weak_count::__release_weak(v7);
  uint64_t result = (uint64_t)v16;
  if (v16 == v15) {
    return (*(uint64_t (**)(void *))(v15[0] + 32))(v15);
  }
LABEL_15:
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 40))(result);
  }
  return result;
}

void sub_1C5869B34(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t RouterIPCController::recover(void *a1, void *a2)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (void *)a2[3];
  if (v3)
  {
    if (v3 == a2)
    {
      xpc_object_t v16 = v15;
      (*(void (**)(void *, void *))(*a2 + 24))(a2, v15);
    }
    else
    {
      xpc_object_t v16 = (void *)(*(uint64_t (**)(void *))(*v3 + 16))(v3);
    }
  }
  else
  {
    xpc_object_t v16 = 0;
  }
  xpc_object_t v4 = (std::__shared_weak_count *)a1[10];
  if (!v4 || (v5 = a1[9], (int v6 = std::__shared_weak_count::lock(v4)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v7 = v6;
  int v8 = operator new(0x28uLL);
  uint64_t v9 = v8;
  __int16 v10 = v16;
  void *v8 = a1;
  if (v10)
  {
    if (v10 == v15)
    {
      v8[4] = v8 + 1;
      (*(void (**)(void *))(v15[0] + 24))(v15);
    }
    else
    {
      v8[4] = v10;
      xpc_object_t v16 = 0;
    }
  }
  else
  {
    v8[4] = 0;
  }
  uint64_t v11 = a1[11];
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v12 = operator new(0x18uLL);
  void *v12 = v9;
  v12[1] = v5;
  v12[2] = v7;
  dispatch_async_f(v11, v12, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<RouterIPCController>::execute_wrapped<RouterIPCController::recover(std::function<void ()(BOOL)>)::$_0>(RouterIPCController::recover(std::function<void ()(BOOL)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<RouterIPCController::recover(std::function<void ()(BOOL)>)::$_0,std::default_delete<RouterIPCController::recover(std::function<void ()(BOOL)>)::$_0>>)::{lambda(void *)#1}::__invoke);
  if (atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    uint64_t result = (uint64_t)v16;
    if (v16 != v15) {
      goto LABEL_15;
    }
    return (*(uint64_t (**)(void *))(v15[0] + 32))(v15);
  }
  ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
  std::__shared_weak_count::__release_weak(v7);
  uint64_t result = (uint64_t)v16;
  if (v16 == v15) {
    return (*(uint64_t (**)(void *))(v15[0] + 32))(v15);
  }
LABEL_15:
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 40))(result);
  }
  return result;
}

void sub_1C5869DA8(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t RouterIPCController::teardown(void *a1, void *a2)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (void *)a2[3];
  if (v3)
  {
    if (v3 == a2)
    {
      xpc_object_t v16 = v15;
      (*(void (**)(void *, void *))(*a2 + 24))(a2, v15);
    }
    else
    {
      xpc_object_t v16 = (void *)(*(uint64_t (**)(void *))(*v3 + 16))(v3);
    }
  }
  else
  {
    xpc_object_t v16 = 0;
  }
  xpc_object_t v4 = (std::__shared_weak_count *)a1[10];
  if (!v4 || (v5 = a1[9], (int v6 = std::__shared_weak_count::lock(v4)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v7 = v6;
  int v8 = operator new(0x28uLL);
  uint64_t v9 = v8;
  __int16 v10 = v16;
  void *v8 = a1;
  if (v10)
  {
    if (v10 == v15)
    {
      v8[4] = v8 + 1;
      (*(void (**)(void *))(v15[0] + 24))(v15);
    }
    else
    {
      v8[4] = v10;
      xpc_object_t v16 = 0;
    }
  }
  else
  {
    v8[4] = 0;
  }
  uint64_t v11 = a1[11];
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v12 = operator new(0x18uLL);
  void *v12 = v9;
  v12[1] = v5;
  v12[2] = v7;
  dispatch_async_f(v11, v12, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<RouterIPCController>::execute_wrapped<RouterIPCController::teardown(std::function<void ()(BOOL)>)::$_0>(RouterIPCController::teardown(std::function<void ()(BOOL)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<RouterIPCController::teardown(std::function<void ()(BOOL)>)::$_0,std::default_delete<RouterIPCController::teardown(std::function<void ()(BOOL)>)::$_0>>)::{lambda(void *)#1}::__invoke);
  if (atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    uint64_t result = (uint64_t)v16;
    if (v16 != v15) {
      goto LABEL_15;
    }
    return (*(uint64_t (**)(void *))(v15[0] + 32))(v15);
  }
  ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
  std::__shared_weak_count::__release_weak(v7);
  uint64_t result = (uint64_t)v16;
  if (v16 == v15) {
    return (*(uint64_t (**)(void *))(v15[0] + 32))(v15);
  }
LABEL_15:
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 40))(result);
  }
  return result;
}

void sub_1C586A01C(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t RouterIPCController::sleep(void *a1, void *a2)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (void *)a2[3];
  if (v3)
  {
    if (v3 == a2)
    {
      xpc_object_t v16 = v15;
      (*(void (**)(void *, void *))(*a2 + 24))(a2, v15);
    }
    else
    {
      xpc_object_t v16 = (void *)(*(uint64_t (**)(void *))(*v3 + 16))(v3);
    }
  }
  else
  {
    xpc_object_t v16 = 0;
  }
  xpc_object_t v4 = (std::__shared_weak_count *)a1[10];
  if (!v4 || (v5 = a1[9], (int v6 = std::__shared_weak_count::lock(v4)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v7 = v6;
  int v8 = operator new(0x28uLL);
  uint64_t v9 = v8;
  __int16 v10 = v16;
  void *v8 = a1;
  if (v10)
  {
    if (v10 == v15)
    {
      v8[4] = v8 + 1;
      (*(void (**)(void *))(v15[0] + 24))(v15);
    }
    else
    {
      v8[4] = v10;
      xpc_object_t v16 = 0;
    }
  }
  else
  {
    v8[4] = 0;
  }
  uint64_t v11 = a1[11];
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v12 = operator new(0x18uLL);
  void *v12 = v9;
  v12[1] = v5;
  v12[2] = v7;
  dispatch_async_f(v11, v12, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<RouterIPCController>::execute_wrapped<RouterIPCController::sleep(std::function<void ()(BOOL)>)::$_0>(RouterIPCController::sleep(std::function<void ()(BOOL)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<RouterIPCController::sleep(std::function<void ()(BOOL)>)::$_0,std::default_delete<RouterIPCController::sleep(std::function<void ()(BOOL)>)::$_0>>)::{lambda(void *)#1}::__invoke);
  if (atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    uint64_t result = (uint64_t)v16;
    if (v16 != v15) {
      goto LABEL_15;
    }
    return (*(uint64_t (**)(void *))(v15[0] + 32))(v15);
  }
  ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
  std::__shared_weak_count::__release_weak(v7);
  uint64_t result = (uint64_t)v16;
  if (v16 == v15) {
    return (*(uint64_t (**)(void *))(v15[0] + 32))(v15);
  }
LABEL_15:
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 40))(result);
  }
  return result;
}

void sub_1C586A290(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t RouterIPCController::wake(void *a1, void *a2)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (void *)a2[3];
  if (v3)
  {
    if (v3 == a2)
    {
      xpc_object_t v16 = v15;
      (*(void (**)(void *, void *))(*a2 + 24))(a2, v15);
    }
    else
    {
      xpc_object_t v16 = (void *)(*(uint64_t (**)(void *))(*v3 + 16))(v3);
    }
  }
  else
  {
    xpc_object_t v16 = 0;
  }
  xpc_object_t v4 = (std::__shared_weak_count *)a1[10];
  if (!v4 || (v5 = a1[9], (int v6 = std::__shared_weak_count::lock(v4)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v7 = v6;
  int v8 = operator new(0x28uLL);
  uint64_t v9 = v8;
  __int16 v10 = v16;
  void *v8 = a1;
  if (v10)
  {
    if (v10 == v15)
    {
      v8[4] = v8 + 1;
      (*(void (**)(void *))(v15[0] + 24))(v15);
    }
    else
    {
      v8[4] = v10;
      xpc_object_t v16 = 0;
    }
  }
  else
  {
    v8[4] = 0;
  }
  uint64_t v11 = a1[11];
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v12 = operator new(0x18uLL);
  void *v12 = v9;
  v12[1] = v5;
  v12[2] = v7;
  dispatch_async_f(v11, v12, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<RouterIPCController>::execute_wrapped<RouterIPCController::wake(std::function<void ()(BOOL)>)::$_0>(RouterIPCController::wake(std::function<void ()(BOOL)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<RouterIPCController::wake(std::function<void ()(BOOL)>)::$_0,std::default_delete<RouterIPCController::wake(std::function<void ()(BOOL)>)::$_0>>)::{lambda(void *)#1}::__invoke);
  if (atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    uint64_t result = (uint64_t)v16;
    if (v16 != v15) {
      goto LABEL_15;
    }
    return (*(uint64_t (**)(void *))(v15[0] + 32))(v15);
  }
  ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
  std::__shared_weak_count::__release_weak(v7);
  uint64_t result = (uint64_t)v16;
  if (v16 == v15) {
    return (*(uint64_t (**)(void *))(v15[0] + 32))(v15);
  }
LABEL_15:
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 40))(result);
  }
  return result;
}

void sub_1C586A504(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

BOOL RouterIPCController::setup_sync(RouterIPCController *this)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *((void *)this + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *((int *)this + 44);
    if (v3 > 3) {
      xpc_object_t v4 = "Unknown";
    }
    else {
      xpc_object_t v4 = off_1E6517B00[v3];
    }
    int v20 = 136315138;
    BOOL v21 = v4;
    _os_log_impl(&dword_1C5767000, v2, OS_LOG_TYPE_DEFAULT, "#I IPC state is  %s", (uint8_t *)&v20, 0xCu);
  }
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 10);
  if (!v5 || (v6 = *((void *)this + 9), (uint64_t v7 = std::__shared_weak_count::lock(v5)) == 0)) {
LABEL_30:
  }
    std::__throw_bad_weak_ptr[abi:ne180100]();
  int v8 = v7;
  p_shared_weak_owners = &v7->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v8);
  }
  uint64_t v10 = *((void *)this + 17);
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  uint64_t v29 = 0;
  uint64_t v11 = operator new(0x20uLL);
  *uint64_t v11 = &unk_1F20F8760;
  v11[1] = this;
  v11[2] = v6;
  v11[3] = v8;
  uint64_t v29 = v11;
  (*(void (**)(uint64_t, void *))(*(void *)v10 + 72))(v10, v28);
  if (v29 == v28)
  {
    (*(void (**)(void *))(v28[0] + 32))(v28);
  }
  else if (v29)
  {
    (*(void (**)(void))(*v29 + 40))();
  }
  ATCSRouterIPCDriver::resetErrorState(*((ATCSRouterIPCDriver **)this + 17));
  if (*((_DWORD *)this + 44))
  {
    uint64_t v12 = (RouterIPCController *)*((void *)this + 19);
    if (v12 == (RouterIPCController *)((char *)this + 160))
    {
LABEL_16:
      std::__shared_weak_count::__release_weak(v8);
      return 1;
    }
    while (*((void *)v12 + 5) ? QMux::BOOL_true_type : 0)
    {
      QMux::setDriverAndCookie();
      xpc_object_t v15 = (RouterIPCController *)*((void *)v12 + 1);
      if (v15)
      {
        do
        {
          xpc_object_t v16 = v15;
          xpc_object_t v15 = *(RouterIPCController **)v15;
        }
        while (v15);
      }
      else
      {
        do
        {
          xpc_object_t v16 = (RouterIPCController *)*((void *)v12 + 2);
          BOOL v17 = *(void *)v16 == (void)v12;
          uint64_t v12 = v16;
        }
        while (!v17);
      }
      uint64_t v12 = v16;
      if (v16 == (RouterIPCController *)((char *)this + 160)) {
        goto LABEL_16;
      }
    }
    xpc_object_t v18 = GetOsLogContext()[1];
    BOOL result = os_log_type_enabled(v18, OS_LOG_TYPE_FAULT);
    if (result)
    {
      int v20 = 136315906;
      BOOL v21 = "ABM ASSERT";
      __int16 v22 = 2080;
      uint64_t v23 = "dispatcher";
      __int16 v24 = 2080;
      int v25 = "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices_Manager/AppleBasebandManager/BasebandManager/Ser"
            "ver/Transport/QMI/Driver/RouterIPCController.cpp";
      __int16 v26 = 1024;
      int v27 = 148;
      _os_log_fault_impl(&dword_1C5767000, v18, OS_LOG_TYPE_FAULT, "%s (%s): File: %s Line: %d", (uint8_t *)&v20, 0x26u);
      __break(1u);
      goto LABEL_30;
    }
  }
  else
  {
    uint64_t v19 = GetOsLogContext()[1];
    BOOL result = os_log_type_enabled(v19, OS_LOG_TYPE_FAULT);
    if (result)
    {
      int v20 = 136315906;
      BOOL v21 = "ABM ASSERT";
      __int16 v22 = 2080;
      uint64_t v23 = "fState != State::kOffline";
      __int16 v24 = 2080;
      int v25 = "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices_Manager/AppleBasebandManager/BasebandManager/Ser"
            "ver/Transport/QMI/Driver/RouterIPCController.cpp";
      __int16 v26 = 1024;
      int v27 = 144;
      _os_log_fault_impl(&dword_1C5767000, v19, OS_LOG_TYPE_FAULT, "%s (%s): File: %s Line: %d", (uint8_t *)&v20, 0x26u);
      __break(1u);
    }
  }
  __break(1u);
  return result;
}

void sub_1C586A8E0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_weak(v1);
  _Unwind_Resume(a1);
}

void sub_1C586A8F4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_weak(v1);
  _Unwind_Resume(a1);
}

void sub_1C586A908(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  std::function<void ()(std::string)>::~function((uint64_t *)va);
  std::__shared_weak_count::__release_weak(v6);
  _Unwind_Resume(a1);
}

void sub_1C586A924(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_weak(v1);
  std::__shared_weak_count::__release_weak(v1);
  _Unwind_Resume(a1);
}

void sub_1C586A944(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_weak(v1);
  _Unwind_Resume(a1);
}

void sub_1C586A958(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_weak(v1);
  _Unwind_Resume(a1);
}

void *std::function<void ()(std::string)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
    return a1;
  }
  else
  {
    if (v2) {
      (*(void (**)(void *))(*v2 + 40))(v2);
    }
    return a1;
  }
}

BOOL RouterIPCController::engage_sync(RouterIPCController *this)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *((void *)this + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v15) = 0;
    _os_log_impl(&dword_1C5767000, v2, OS_LOG_TYPE_DEFAULT, "#I Engaging", (uint8_t *)&v15, 2u);
  }
  if (*((_DWORD *)this + 44) != 2)
  {
    uint64_t v14 = GetOsLogContext()[1];
    if (os_log_type_enabled(v14, OS_LOG_TYPE_FAULT))
    {
      int v15 = 136315906;
      xpc_object_t v16 = "ABM ASSERT";
      __int16 v17 = 2080;
      xpc_object_t v18 = "fState == State::kDisengaged";
      __int16 v19 = 2080;
      int v20 = "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices_Manager/AppleBasebandManager/BasebandManager/Ser"
            "ver/Transport/QMI/Driver/RouterIPCController.cpp";
      __int16 v21 = 1024;
      int v22 = 158;
      _os_log_fault_impl(&dword_1C5767000, v14, OS_LOG_TYPE_FAULT, "%s (%s): File: %s Line: %d", (uint8_t *)&v15, 0x26u);
    }
    __break(1u);
  }
  RouterIPCController::setup_sync(this);
  BOOL v3 = RouterDelegate::engage(*((RouterDelegate **)this + 15));
  xpc_object_t v4 = *((void *)this + 5);
  if (v3)
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = *((int *)this + 44);
      if (v7 > 3) {
        int v8 = "Unknown";
      }
      else {
        int v8 = off_1E6517B00[v7];
      }
      int v15 = 136315394;
      xpc_object_t v16 = v8;
      __int16 v17 = 2080;
      xpc_object_t v18 = "kEngaged";
      _os_log_impl(&dword_1C5767000, v4, OS_LOG_TYPE_DEFAULT, "#I IPC state changing from %s -> %s", (uint8_t *)&v15, 0x16u);
      *((_DWORD *)this + 44) = 1;
      uint64_t v5 = (char *)*((void *)this + 19);
      uint64_t v6 = (char *)this + 160;
      if (v5 == (char *)this + 160) {
        goto LABEL_14;
      }
    }
    else
    {
      *((_DWORD *)this + 44) = 1;
      uint64_t v5 = (char *)*((void *)this + 19);
      uint64_t v6 = (char *)this + 160;
      if (v5 == (char *)this + 160)
      {
LABEL_14:
        uint64_t v9 = *((void *)this + 5);
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(v15) = 0;
          _os_log_impl(&dword_1C5767000, v9, OS_LOG_TYPE_DEFAULT, "#I Finished engaging", (uint8_t *)&v15, 2u);
        }
        return v3;
      }
    }
    do
    {
      QMux::start((QMux *)(v5 + 40));
      uint64_t v11 = (char *)*((void *)v5 + 1);
      if (v11)
      {
        do
        {
          uint64_t v12 = v11;
          uint64_t v11 = *(char **)v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          uint64_t v12 = (char *)*((void *)v5 + 2);
          BOOL v13 = *(void *)v12 == (void)v5;
          uint64_t v5 = v12;
        }
        while (!v13);
      }
      uint64_t v5 = v12;
    }
    while (v12 != v6);
    goto LABEL_14;
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    LOWORD(v15) = 0;
    _os_log_error_impl(&dword_1C5767000, v4, OS_LOG_TYPE_ERROR, "Failed to engage router", (uint8_t *)&v15, 2u);
  }
  return v3;
}

uint64_t RouterIPCController::startWorkers_sync(RouterIPCController *this)
{
  uint64_t v1 = (void *)*((void *)this + 19);
  uint64_t v2 = (char *)this + 160;
  if (v1 != (void *)((char *)this + 160))
  {
    do
    {
      QMux::start((QMux *)(v1 + 5));
      xpc_object_t v4 = (void *)v1[1];
      if (v4)
      {
        do
        {
          uint64_t v5 = v4;
          xpc_object_t v4 = (void *)*v4;
        }
        while (v4);
      }
      else
      {
        do
        {
          uint64_t v5 = (void *)v1[2];
          BOOL v6 = *v5 == (void)v1;
          uint64_t v1 = v5;
        }
        while (!v6);
      }
      uint64_t v1 = v5;
    }
    while (v5 != (void *)v2);
  }
  return 1;
}

uint64_t RouterIPCController::recover_sync(RouterIPCController *this)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *((void *)this + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v8) = 0;
    _os_log_impl(&dword_1C5767000, v2, OS_LOG_TYPE_DEFAULT, "#I Recovering", (uint8_t *)&v8, 2u);
  }
  if (*((_DWORD *)this + 44))
  {
    uint64_t v7 = GetOsLogContext()[1];
    if (!os_log_type_enabled(v7, OS_LOG_TYPE_FAULT)) {
      goto LABEL_16;
    }
    int v8 = 136315906;
    uint64_t v9 = "ABM ASSERT";
    __int16 v10 = 2080;
    uint64_t v11 = "fState == State::kOffline";
    __int16 v12 = 2080;
    BOOL v13 = "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices_Manager/AppleBasebandManager/BasebandManager/Serve"
          "r/Transport/QMI/Driver/RouterIPCController.cpp";
    __int16 v14 = 1024;
    int v15 = 185;
    goto LABEL_15;
  }
  if (!RouterDelegate::recover(*((RouterDelegate **)this + 15)))
  {
    uint64_t v7 = GetOsLogContext()[1];
    if (!os_log_type_enabled(v7, OS_LOG_TYPE_FAULT)) {
      goto LABEL_16;
    }
    int v8 = 136315906;
    uint64_t v9 = "ABM ASSERT";
    __int16 v10 = 2080;
    uint64_t v11 = "success";
    __int16 v12 = 2080;
    BOOL v13 = "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices_Manager/AppleBasebandManager/BasebandManager/Serve"
          "r/Transport/QMI/Driver/RouterIPCController.cpp";
    __int16 v14 = 1024;
    int v15 = 187;
LABEL_15:
    _os_log_fault_impl(&dword_1C5767000, v7, OS_LOG_TYPE_FAULT, "%s (%s): File: %s Line: %d", (uint8_t *)&v8, 0x26u);
LABEL_16:
    __break(1u);
  }
  BOOL v3 = *((void *)this + 5);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *((int *)this + 44);
    if (v4 > 3) {
      uint64_t v5 = "Unknown";
    }
    else {
      uint64_t v5 = off_1E6517B00[v4];
    }
    int v8 = 136315394;
    uint64_t v9 = v5;
    __int16 v10 = 2080;
    uint64_t v11 = "kDisengaged";
    _os_log_impl(&dword_1C5767000, v3, OS_LOG_TYPE_DEFAULT, "#I IPC state changing from %s -> %s", (uint8_t *)&v8, 0x16u);
  }
  *((_DWORD *)this + 44) = 2;
  return 1;
}

uint64_t RouterIPCController::teardown_sync(RouterIPCController *this)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *((void *)this + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v7) = 0;
    _os_log_impl(&dword_1C5767000, v2, OS_LOG_TYPE_DEFAULT, "#I Tearing down", (uint8_t *)&v7, 2u);
  }
  RouterIPCController::stopWorkers_sync(this);
  BOOL v3 = *((void *)this + 5);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *((int *)this + 44);
    if (v4 > 3) {
      uint64_t v5 = "Unknown";
    }
    else {
      uint64_t v5 = off_1E6517B00[v4];
    }
    int v7 = 136315394;
    int v8 = v5;
    __int16 v9 = 2080;
    __int16 v10 = "kOffline";
    _os_log_impl(&dword_1C5767000, v3, OS_LOG_TYPE_DEFAULT, "#I IPC state changing from %s -> %s", (uint8_t *)&v7, 0x16u);
  }
  *((_DWORD *)this + 44) = 0;
  RouterDelegate::teardown(*((RouterDelegate **)this + 15));
  return 1;
}

void RouterIPCController::stopWorkers_sync(RouterIPCController *this)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *((void *)this + 17);
  if (v2)
  {
    BOOL v3 = (RouterIPCController *)*((void *)this + 19);
    if (v3 != (RouterIPCController *)((char *)this + 160))
    {
      do
      {
        QMux::setDriverAndCookie();
        QMux::stop((RouterIPCController *)((char *)v3 + 40));
        uint64_t v4 = (RouterIPCController *)*((void *)v3 + 1);
        if (v4)
        {
          do
          {
            uint64_t v5 = v4;
            uint64_t v4 = *(RouterIPCController **)v4;
          }
          while (v4);
        }
        else
        {
          do
          {
            uint64_t v5 = (RouterIPCController *)*((void *)v3 + 2);
            BOOL v6 = *(void *)v5 == (void)v3;
            BOOL v3 = v5;
          }
          while (!v6);
        }
        BOOL v3 = v5;
      }
      while (v5 != (RouterIPCController *)((char *)this + 160));
      uint64_t v2 = *((void *)this + 17);
    }
    __int16 v10 = 0;
    (*(void (**)(uint64_t, void *))(*(void *)v2 + 72))(v2, v9);
    if (v10 == v9)
    {
      (*(void (**)(void *))(v9[0] + 32))(v9);
    }
    else if (v10)
    {
      (*(void (**)(void))(*v10 + 40))();
    }
  }
  else
  {
    int v7 = *((void *)this + 5);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int v8 = 0;
      _os_log_impl(&dword_1C5767000, v7, OS_LOG_TYPE_DEFAULT, "#I No ipc driver", v8, 2u);
    }
  }
}

void sub_1C586B230(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<void ()(std::string)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

BOOL RouterIPCController::sleep_sync(RouterIPCController *this)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *((void *)this + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v9) = 0;
    _os_log_impl(&dword_1C5767000, v2, OS_LOG_TYPE_DEFAULT, "#I Sleeping", (uint8_t *)&v9, 2u);
  }
  if (*((_DWORD *)this + 44) != 1)
  {
    int v8 = GetOsLogContext()[1];
    if (os_log_type_enabled(v8, OS_LOG_TYPE_FAULT))
    {
      int v9 = 136315906;
      __int16 v10 = "ABM ASSERT";
      __int16 v11 = 2080;
      __int16 v12 = "fState == State::kEngaged";
      __int16 v13 = 2080;
      __int16 v14 = "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices_Manager/AppleBasebandManager/BasebandManager/Ser"
            "ver/Transport/QMI/Driver/RouterIPCController.cpp";
      __int16 v15 = 1024;
      int v16 = 204;
      _os_log_fault_impl(&dword_1C5767000, v8, OS_LOG_TYPE_FAULT, "%s (%s): File: %s Line: %d", (uint8_t *)&v9, 0x26u);
    }
    __break(1u);
  }
  (*(void (**)(void))(**((void **)this + 17) + 24))(*((void *)this + 17));
  BOOL v3 = RouterDelegate::sleep(*((RouterDelegate **)this + 15));
  uint64_t v4 = *((void *)this + 5);
  if (v3)
  {
    if (os_log_type_enabled(*((os_log_t *)this + 5), OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = *((int *)this + 44);
      if (v5 > 3) {
        BOOL v6 = "Unknown";
      }
      else {
        BOOL v6 = off_1E6517B00[v5];
      }
      int v9 = 136315394;
      __int16 v10 = v6;
      __int16 v11 = 2080;
      __int16 v12 = "kSleep";
      _os_log_impl(&dword_1C5767000, v4, OS_LOG_TYPE_DEFAULT, "#I IPC state changing from %s -> %s", (uint8_t *)&v9, 0x16u);
    }
    *((_DWORD *)this + 44) = 3;
  }
  else if (os_log_type_enabled(*((os_log_t *)this + 5), OS_LOG_TYPE_ERROR))
  {
    LOWORD(v9) = 0;
    _os_log_error_impl(&dword_1C5767000, v4, OS_LOG_TYPE_ERROR, "Failed to sleep", (uint8_t *)&v9, 2u);
  }
  return v3;
}

BOOL RouterIPCController::wake_sync(RouterIPCController *this)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *((void *)this + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v9) = 0;
    _os_log_impl(&dword_1C5767000, v2, OS_LOG_TYPE_DEFAULT, "#I Waking", (uint8_t *)&v9, 2u);
  }
  if (*((_DWORD *)this + 44) != 3)
  {
    int v7 = GetOsLogContext()[1];
    if (!os_log_type_enabled(v7, OS_LOG_TYPE_FAULT)) {
      goto LABEL_18;
    }
    int v9 = 136315906;
    __int16 v10 = "ABM ASSERT";
    __int16 v11 = 2080;
    __int16 v12 = "fState == State::kSleep";
    __int16 v13 = 2080;
    __int16 v14 = "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices_Manager/AppleBasebandManager/BasebandManager/Serve"
          "r/Transport/QMI/Driver/RouterIPCController.cpp";
    __int16 v15 = 1024;
    int v16 = 219;
    goto LABEL_17;
  }
  BOOL v3 = RouterDelegate::wake(*((RouterDelegate **)this + 15));
  if (!v3)
  {
    if (RouterDelegate::hasFatalErrorOccurred(*((RouterDelegate **)this + 15))) {
      goto LABEL_14;
    }
    int v7 = GetOsLogContext()[1];
    if (!os_log_type_enabled(v7, OS_LOG_TYPE_FAULT)) {
LABEL_18:
    }
      __break(1u);
    int v9 = 136315906;
    __int16 v10 = "ABM ASSERT";
    __int16 v11 = 2080;
    __int16 v12 = "fRouterDelegate->hasFatalErrorOccurred()";
    __int16 v13 = 2080;
    __int16 v14 = "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices_Manager/AppleBasebandManager/BasebandManager/Serve"
          "r/Transport/QMI/Driver/RouterIPCController.cpp";
    __int16 v15 = 1024;
    int v16 = 224;
LABEL_17:
    _os_log_fault_impl(&dword_1C5767000, v7, OS_LOG_TYPE_FAULT, "%s (%s): File: %s Line: %d", (uint8_t *)&v9, 0x26u);
    goto LABEL_18;
  }
  uint64_t v4 = *((void *)this + 5);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *((int *)this + 44);
    if (v5 > 3) {
      BOOL v6 = "Unknown";
    }
    else {
      BOOL v6 = off_1E6517B00[v5];
    }
    int v9 = 136315394;
    __int16 v10 = v6;
    __int16 v11 = 2080;
    __int16 v12 = "kEngaged";
    _os_log_impl(&dword_1C5767000, v4, OS_LOG_TYPE_DEFAULT, "#I IPC state changing from %s -> %s", (uint8_t *)&v9, 0x16u);
  }
  *((_DWORD *)this + 44) = 1;
LABEL_14:
  (*(void (**)(void))(**((void **)this + 17) + 32))(*((void *)this + 17));
  return v3;
}

void RouterIPCController::createQMuxChannels(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W3>, QMux *a4@<X8>)
{
  char v8 = a3;
  v7[0] = a1;
  v7[1] = a2;
  v7[2] = &v8;
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 0x40000000;
  v9[2] = ___ZNK3ctu20SharedSynchronizableI19RouterIPCControllerE20execute_wrapped_syncIZNS1_18createQMuxChannelsERKNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEbbE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOSE__block_invoke;
  void v9[3] = &__block_descriptor_tmp_11;
  v9[4] = a1 + 72;
  v9[5] = v7;
  __int16 v10 = v9;
  uint64_t v4 = *(NSObject **)(a1 + 88);
  if (*(void *)(a1 + 96))
  {
    *(void *)a4 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)a4 + 1) = 0xAAAAAAAAAAAAAAAALL;
    QMux::QMux(a4);
    uint64_t block = MEMORY[0x1E4F143A8];
    uint64_t v12 = 0x40000000;
    __int16 v13 = ___ZN8dispatch19async_and_wait_implIRU13block_pointerF4QMuxvEEENSt3__15decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS5_17integral_constantIbLb0EEE_block_invoke;
    __int16 v14 = &__block_descriptor_tmp_42;
    uint64_t v15 = v5;
    int v16 = &v10;
    dispatch_async_and_wait(v4, &block);
  }
  else
  {
    *(void *)a4 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)a4 + 1) = 0xAAAAAAAAAAAAAAAALL;
    QMux::QMux(a4);
    uint64_t block = MEMORY[0x1E4F143A8];
    uint64_t v12 = 0x40000000;
    __int16 v13 = ___ZN8dispatch9sync_implIRU13block_pointerF4QMuxvEEENSt3__15decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS5_17integral_constantIbLb0EEE_block_invoke;
    __int16 v14 = &__block_descriptor_tmp_41;
    uint64_t v15 = v6;
    int v16 = &v10;
    dispatch_sync(v4, &block);
  }
}

uint64_t ctu::Loggable<RouterIPCController,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig(uint64_t a1)
{
  return MEMORY[0x1F417DA50](a1 + 8);
}

size_t ctu::Loggable<RouterIPCController,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  BOOL v3 = (const char *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 48))(a1);
  size_t result = strlen(v3);
  if (result >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v5 = result;
  if (result >= 0x17)
  {
    uint64_t v6 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17) {
      uint64_t v6 = result | 7;
    }
    uint64_t v7 = v6 + 1;
    char v8 = operator new(v6 + 1);
    a2[1] = v5;
    a2[2] = v7 | 0x8000000000000000;
    *a2 = v8;
    a2 = v8;
  }
  else
  {
    *((unsigned char *)a2 + 23) = result;
    if (!result)
    {
      *(unsigned char *)a2 = 0;
      return result;
    }
  }
  size_t result = (size_t)memmove(a2, v3, v5);
  *((unsigned char *)a2 + v5) = 0;
  return result;
}

uint64_t ctu::Loggable<RouterIPCController,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return MEMORY[0x1F417DD10](a1 + 8);
}

void *ctu::Loggable<RouterIPCController,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_1F20F8690;
  MEMORY[0x1C8790F40](a1 + 1);
  return a1;
}

void ctu::Loggable<RouterIPCController,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_1F20F8690;
  MEMORY[0x1C8790F40](a1 + 1);

  operator delete(a1);
}

void ctu::Loggable<RouterIPCController,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(uint64_t a1)
{
  uint64_t v1 = a1 + 56;
  if (*(void *)(a1 + 56))
  {
    if (!*(void *)(a1 + 80) || (uint64_t v2 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(a1 + 80))) == 0) {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    BOOL v3 = v2;
    ctu::LoggerCommonBase::getLogDomain((ctu::LoggerCommonBase *)(v1 - 48));
    ctu::TrackedLogger::registerLoggerToServer();
    if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_1C586BB04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

void sub_1C586BB20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void *std::shared_ptr<RouterIPCController>::shared_ptr[abi:ne180100]<RouterIPCController,std::shared_ptr<RouterIPCController> ctu::SharedSynchronizable<RouterIPCController>::make_shared_ptr<RouterIPCController>(RouterIPCController*)::{lambda(RouterIPCController*)#1},void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  uint64_t v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = &v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20F86D0;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)a2;
  a1[1] = v4;
  if (!a2) {
    return a1;
  }
  uint64_t v6 = *(std::__shared_weak_count **)(a2 + 80);
  if (v6)
  {
    if (v6->__shared_owners_ == -1)
    {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      *(void *)(a2 + 72) = a2;
      *(void *)(a2 + 80) = v4;
      std::__shared_weak_count::__release_weak(v6);
      if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
        goto LABEL_8;
      }
    }
    return a1;
  }
  atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  *(void *)(a2 + 72) = a2;
  *(void *)(a2 + 80) = v4;
  if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
LABEL_8:
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void sub_1C586BC4C(void *a1)
{
  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[11], v1, (dispatch_function_t)std::shared_ptr<RouterIPCController> ctu::SharedSynchronizable<RouterIPCController>::make_shared_ptr<RouterIPCController>(RouterIPCController*)::{lambda(RouterIPCController*)#1}::operator() const(RouterIPCController*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_1C586BC74(_Unwind_Exception *a1)
{
}

void std::__shared_ptr_pointer<RouterIPCController *,std::shared_ptr<RouterIPCController> ctu::SharedSynchronizable<RouterIPCController>::make_shared_ptr<RouterIPCController>(RouterIPCController*)::{lambda(RouterIPCController *)#1},std::allocator<RouterIPCController>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<RouterIPCController *,std::shared_ptr<RouterIPCController> ctu::SharedSynchronizable<RouterIPCController>::make_shared_ptr<RouterIPCController>(RouterIPCController*)::{lambda(RouterIPCController *)#1},std::allocator<RouterIPCController>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<RouterIPCController *,std::shared_ptr<RouterIPCController> ctu::SharedSynchronizable<RouterIPCController>::make_shared_ptr<RouterIPCController>(RouterIPCController*)::{lambda(RouterIPCController *)#1},std::allocator<RouterIPCController>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableI19RouterIPCControllerE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_") {
    return a1 + 24;
  }
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableI19RouterIPCControllerE15make_shared_ptrIS1_EENSt3__110share"
                                "d_ptrIT_EEPS6_EUlPS1_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableI19RouterIPCControllerE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableI19RouterIPCControllerE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24; {
  return 0;
  }
}

uint64_t std::shared_ptr<RouterIPCController> ctu::SharedSynchronizable<RouterIPCController>::make_shared_ptr<RouterIPCController>(RouterIPCController*)::{lambda(RouterIPCController*)#1}::operator() const(RouterIPCController*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void ctu::SharedLoggable<RouterIPCController,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(void *a1)
{
  *a1 = &unk_1F20F8690;
  MEMORY[0x1C8790F40](a1 + 1);
  uint64_t v2 = a1[12];
  if (v2) {
    dispatch_release(v2);
  }
  unint64_t v3 = a1[11];
  if (v3) {
    dispatch_release(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[10];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }

  operator delete(a1);
}

void std::__tree<std::__value_type<int,QMux>,std::__map_value_compare<int,std::__value_type<int,QMux>,std::less<int>,true>,std::allocator<std::__value_type<int,QMux>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<int,QMux>,std::__map_value_compare<int,std::__value_type<int,QMux>,std::less<int>,true>,std::allocator<std::__value_type<int,QMux>>>::destroy(*a1);
    std::__tree<std::__value_type<int,QMux>,std::__map_value_compare<int,std::__value_type<int,QMux>,std::less<int>,true>,std::allocator<std::__value_type<int,QMux>>>::destroy(a1[1]);
    QMux::~QMux((QMux *)(a1 + 5));
    operator delete(a1);
  }
}

void dispatch::async<void ctu::SharedSynchronizable<RouterIPCController>::execute_wrapped<RouterIPCController::engage(std::function<void ()(BOOL,std::string)>)::$_0>(RouterIPCController::engage(std::function<void ()(BOOL,std::string)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<RouterIPCController::engage(std::function<void ()(BOOL,std::string)>)::$_0,std::default_delete<RouterIPCController::engage(std::function<void ()(BOOL,std::string)>)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = **a1;
  if (RouterDelegate::hasFatalErrorOccurred(*(RouterDelegate **)(v3 + 120)))
  {
    RouterDelegate::getFatalErrorReason(*(RouterDelegate **)(v3 + 120), (uint64_t *)__p);
    BOOL v11 = 0;
    uint64_t v4 = v2[4];
    if (!v4) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
  }
  else
  {
    BOOL v5 = *(_DWORD *)(v3 + 176) == 2 && RouterIPCController::engage_sync((RouterIPCController *)v3);
    __p[0] = 0;
    __p[1] = 0;
    uint64_t v10 = 0;
    BOOL v11 = v5;
    uint64_t v4 = v2[4];
    if (!v4) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
  }
  (*(void (**)(uint64_t, BOOL *, void **))(*(void *)v4 + 48))(v4, &v11, __p);
  if ((SHIBYTE(v10) & 0x80000000) == 0)
  {
    uint64_t v6 = v2 + 1;
    uint64_t v7 = (uint64_t *)v2[4];
    if (v7 != v2 + 1) {
      goto LABEL_10;
    }
LABEL_15:
    (*(void (**)(void *))(*v6 + 32))(v6);
    operator delete(v2);
    char v8 = (std::__shared_weak_count *)a1[2];
    if (!v8) {
      goto LABEL_18;
    }
    goto LABEL_16;
  }
  operator delete(__p[0]);
  uint64_t v6 = v2 + 1;
  uint64_t v7 = (uint64_t *)v2[4];
  if (v7 == v2 + 1) {
    goto LABEL_15;
  }
LABEL_10:
  if (v7) {
    (*(void (**)(uint64_t *))(*v7 + 40))(v7);
  }
  operator delete(v2);
  char v8 = (std::__shared_weak_count *)a1[2];
  if (v8)
  {
LABEL_16:
    if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
LABEL_18:
  operator delete(a1);
}

void sub_1C586C08C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  uint64_t v17 = (void *)v15[4];
  if (v17 == v15 + 1)
  {
    (*(void (**)(void *))(v15[1] + 32))(v15 + 1);
  }
  else if (v17)
  {
    (*(void (**)(void *))(*v17 + 40))(v17);
  }
  operator delete(v15);
  xpc_object_t v18 = (std::__shared_weak_count *)v14[2];
  if (v18)
  {
    if (!atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  operator delete(v14);
  _Unwind_Resume(a1);
}

void dispatch::async<void ctu::SharedSynchronizable<RouterIPCController>::execute_wrapped<RouterIPCController::recover(std::function<void ()(BOOL)>)::$_0>(RouterIPCController::recover(std::function<void ()(BOOL)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<RouterIPCController::recover(std::function<void ()(BOOL)>)::$_0,std::default_delete<RouterIPCController::recover(std::function<void ()(BOOL)>)::$_0>>)::{lambda(void *)#1}::__invoke(void *a1)
{
  uint64_t v2 = *(RouterIPCController ***)a1;
  uint64_t v3 = **(RouterIPCController ***)a1;
  if (!*((_DWORD *)v3 + 44)) {
    RouterIPCController::recover_sync(v3);
  }
  char v7 = 1;
  uint64_t v4 = v2[4];
  if (!v4) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  (*(void (**)(RouterIPCController *, char *))(*(void *)v4 + 48))(v4, &v7);
  BOOL v5 = (RouterIPCController **)v2[4];
  if (v5 == v2 + 1)
  {
    (*((void (**)(RouterIPCController **))v2[1] + 4))(v2 + 1);
    operator delete(v2);
    uint64_t v6 = (std::__shared_weak_count *)*((void *)a1 + 2);
    if (!v6) {
      goto LABEL_12;
    }
    goto LABEL_10;
  }
  if (v5) {
    (*((void (**)(RouterIPCController **))*v5 + 5))(v5);
  }
  operator delete(v2);
  uint64_t v6 = (std::__shared_weak_count *)*((void *)a1 + 2);
  if (v6)
  {
LABEL_10:
    if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
LABEL_12:
  operator delete(a1);
}

void sub_1C586C2C4(_Unwind_Exception *a1)
{
  uint64_t v4 = (void *)v2[4];
  if (v4 == v2 + 1)
  {
    (*(void (**)(void *))(v2[1] + 32))(v2 + 1);
  }
  else if (v4)
  {
    (*(void (**)(void *))(*v4 + 40))(v4);
  }
  operator delete(v2);
  BOOL v5 = (std::__shared_weak_count *)v1[2];
  if (v5)
  {
    if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void dispatch::async<void ctu::SharedSynchronizable<RouterIPCController>::execute_wrapped<RouterIPCController::teardown(std::function<void ()(BOOL)>)::$_0>(RouterIPCController::teardown(std::function<void ()(BOOL)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<RouterIPCController::teardown(std::function<void ()(BOOL)>)::$_0,std::default_delete<RouterIPCController::teardown(std::function<void ()(BOOL)>)::$_0>>)::{lambda(void *)#1}::__invoke(RouterIPCController ***a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = **a1;
  int v4 = *((_DWORD *)v3 + 44);
  if (v4)
  {
    if (v4 == 3) {
      RouterIPCController::wake_sync(**a1);
    }
    RouterIPCController::teardown_sync(v3);
  }
  char v8 = 1;
  BOOL v5 = v2[4];
  if (!v5) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  (*(void (**)(RouterIPCController *, char *))(*(void *)v5 + 48))(v5, &v8);
  uint64_t v6 = (RouterIPCController **)v2[4];
  if (v6 == v2 + 1)
  {
    (*((void (**)(RouterIPCController **))v2[1] + 4))(v2 + 1);
    operator delete(v2);
    char v7 = (std::__shared_weak_count *)a1[2];
    if (!v7) {
      goto LABEL_14;
    }
    goto LABEL_12;
  }
  if (v6) {
    (*((void (**)(RouterIPCController **))*v6 + 5))(v6);
  }
  operator delete(v2);
  char v7 = (std::__shared_weak_count *)a1[2];
  if (v7)
  {
LABEL_12:
    if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
LABEL_14:
  operator delete(a1);
}

void sub_1C586C4F0(_Unwind_Exception *a1)
{
  int v4 = (void *)v2[4];
  if (v4 == v2 + 1)
  {
    (*(void (**)(void *))(v2[1] + 32))(v2 + 1);
  }
  else if (v4)
  {
    (*(void (**)(void *))(*v4 + 40))(v4);
  }
  operator delete(v2);
  BOOL v5 = (std::__shared_weak_count *)v1[2];
  if (v5)
  {
    if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void dispatch::async<void ctu::SharedSynchronizable<RouterIPCController>::execute_wrapped<RouterIPCController::sleep(std::function<void ()(BOOL)>)::$_0>(RouterIPCController::sleep(std::function<void ()(BOOL)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<RouterIPCController::sleep(std::function<void ()(BOOL)>)::$_0,std::default_delete<RouterIPCController::sleep(std::function<void ()(BOOL)>)::$_0>>)::{lambda(void *)#1}::__invoke(void *a1)
{
  uint64_t v2 = *(RouterIPCController ***)a1;
  uint64_t v3 = **(RouterIPCController ***)a1;
  BOOL v4 = *((_DWORD *)v3 + 44) == 1 && RouterIPCController::sleep_sync(v3);
  BOOL v8 = v4;
  BOOL v5 = v2[4];
  if (!v5) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  (*(void (**)(RouterIPCController *, BOOL *))(*(void *)v5 + 48))(v5, &v8);
  uint64_t v6 = (RouterIPCController **)v2[4];
  if (v6 == v2 + 1)
  {
    (*((void (**)(RouterIPCController **))v2[1] + 4))(v2 + 1);
    operator delete(v2);
    char v7 = (std::__shared_weak_count *)*((void *)a1 + 2);
    if (!v7) {
      goto LABEL_13;
    }
    goto LABEL_11;
  }
  if (v6) {
    (*((void (**)(RouterIPCController **))*v6 + 5))(v6);
  }
  operator delete(v2);
  char v7 = (std::__shared_weak_count *)*((void *)a1 + 2);
  if (v7)
  {
LABEL_11:
    if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
LABEL_13:
  operator delete(a1);
}

void sub_1C586C710(_Unwind_Exception *a1)
{
  BOOL v4 = (void *)v2[4];
  if (v4 == v2 + 1)
  {
    (*(void (**)(void *))(v2[1] + 32))(v2 + 1);
  }
  else if (v4)
  {
    (*(void (**)(void *))(*v4 + 40))(v4);
  }
  operator delete(v2);
  BOOL v5 = (std::__shared_weak_count *)v1[2];
  if (v5)
  {
    if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void dispatch::async<void ctu::SharedSynchronizable<RouterIPCController>::execute_wrapped<RouterIPCController::wake(std::function<void ()(BOOL)>)::$_0>(RouterIPCController::wake(std::function<void ()(BOOL)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<RouterIPCController::wake(std::function<void ()(BOOL)>)::$_0,std::default_delete<RouterIPCController::wake(std::function<void ()(BOOL)>)::$_0>>)::{lambda(void *)#1}::__invoke(void *a1)
{
  uint64_t v2 = *(RouterIPCController ***)a1;
  uint64_t v3 = **(RouterIPCController ***)a1;
  BOOL v4 = *((_DWORD *)v3 + 44) == 3 && RouterIPCController::wake_sync(v3);
  BOOL v8 = v4;
  BOOL v5 = v2[4];
  if (!v5) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  (*(void (**)(RouterIPCController *, BOOL *))(*(void *)v5 + 48))(v5, &v8);
  uint64_t v6 = (RouterIPCController **)v2[4];
  if (v6 == v2 + 1)
  {
    (*((void (**)(RouterIPCController **))v2[1] + 4))(v2 + 1);
    operator delete(v2);
    char v7 = (std::__shared_weak_count *)*((void *)a1 + 2);
    if (!v7) {
      goto LABEL_13;
    }
    goto LABEL_11;
  }
  if (v6) {
    (*((void (**)(RouterIPCController **))*v6 + 5))(v6);
  }
  operator delete(v2);
  char v7 = (std::__shared_weak_count *)*((void *)a1 + 2);
  if (v7)
  {
LABEL_11:
    if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
LABEL_13:
  operator delete(a1);
}

void sub_1C586C930(_Unwind_Exception *a1)
{
  BOOL v4 = (void *)v2[4];
  if (v4 == v2 + 1)
  {
    (*(void (**)(void *))(v2[1] + 32))(v2 + 1);
  }
  else if (v4)
  {
    (*(void (**)(void *))(*v4 + 40))(v4);
  }
  operator delete(v2);
  BOOL v5 = (std::__shared_weak_count *)v1[2];
  if (v5)
  {
    if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__function::__func<RouterIPCController::setup_sync(void)::$_0,std::allocator<RouterIPCController::setup_sync(void)::$_0>,void ()(std::string)>::~__func(void *a1)
{
  *a1 = &unk_1F20F8760;
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void std::__function::__func<RouterIPCController::setup_sync(void)::$_0,std::allocator<RouterIPCController::setup_sync(void)::$_0>,void ()(std::string)>::~__func(void *__p)
{
  void *__p = &unk_1F20F8760;
  uint64_t v2 = (std::__shared_weak_count *)__p[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  operator delete(__p);
}

char *std::__function::__func<RouterIPCController::setup_sync(void)::$_0,std::allocator<RouterIPCController::setup_sync(void)::$_0>,void ()(std::string)>::__clone(uint64_t a1)
{
  size_t result = (char *)operator new(0x20uLL);
  *(void *)size_t result = &unk_1F20F8760;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 24);
  *((void *)result + 3) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t std::__function::__func<RouterIPCController::setup_sync(void)::$_0,std::allocator<RouterIPCController::setup_sync(void)::$_0>,void ()(std::string)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F20F8760;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  uint64_t v2 = *(void *)(result + 24);
  *(void *)(a2 + 24) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<RouterIPCController::setup_sync(void)::$_0,std::allocator<RouterIPCController::setup_sync(void)::$_0>,void ()(std::string)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__function::__func<RouterIPCController::setup_sync(void)::$_0,std::allocator<RouterIPCController::setup_sync(void)::$_0>,void ()(std::string)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  operator delete(__p);
}

void std::__function::__func<RouterIPCController::setup_sync(void)::$_0,std::allocator<RouterIPCController::setup_sync(void)::$_0>,void ()(std::string)>::operator()(void *a1, uint64_t a2)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  *(_OWORD *)std::string __p = *(_OWORD *)a2;
  uint64_t v15 = *(void *)(a2 + 16);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  uint64_t v3 = (std::__shared_weak_count *)a1[3];
  if (!v3) {
    goto LABEL_18;
  }
  BOOL v4 = (void *)a1[1];
  BOOL v5 = std::__shared_weak_count::lock(v3);
  if (!v5) {
    goto LABEL_18;
  }
  uint64_t v6 = v5;
  if (a1[2])
  {
    char v7 = v4[5];
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      BOOL v8 = __p;
      if (v15 < 0) {
        BOOL v8 = (void **)__p[0];
      }
      *(_DWORD *)buf = 136315138;
      uint64_t v17 = v8;
      _os_log_impl(&dword_1C5767000, v7, OS_LOG_TYPE_DEFAULT, "#I Triggering fatal error for '%s'", buf, 0xCu);
    }
    int v9 = (std::__shared_weak_count *)v4[14];
    if (v9)
    {
      uint64_t v10 = std::__shared_weak_count::lock(v9);
      if (v10)
      {
        BOOL v11 = v10;
        uint64_t v12 = v4[13];
        if (v12)
        {
          if (v15 >= 0) {
            __int16 v13 = __p;
          }
          else {
            __int16 v13 = (void **)__p[0];
          }
          (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v12 + 16))(v12, v13, 1);
        }
        if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }
    }
  }
  if (atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
LABEL_18:
    if ((SHIBYTE(v15) & 0x80000000) == 0) {
      return;
    }
    goto LABEL_19;
  }
  ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
  std::__shared_weak_count::__release_weak(v6);
  if (SHIBYTE(v15) < 0) {
LABEL_19:
  }
    operator delete(__p[0]);
}

void sub_1C586CD78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_3;
    }
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
    if (atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
LABEL_3:
      if ((a14 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
  std::__shared_weak_count::__release_weak(v14);
  if ((a14 & 0x80000000) == 0) {
LABEL_4:
  }
    _Unwind_Resume(exception_object);
LABEL_7:
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<RouterIPCController::setup_sync(void)::$_0,std::allocator<RouterIPCController::setup_sync(void)::$_0>,void ()(std::string)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN19RouterIPCController10setup_syncEvE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"ZN19RouterIPCController10setup_syncEvE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19RouterIPCController10setup_syncEvE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19RouterIPCController10setup_syncEvE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *std::__function::__func<RouterIPCController::setup_sync(void)::$_0,std::allocator<RouterIPCController::setup_sync(void)::$_0>,void ()(std::string)>::target_type()
{
}

void ___ZNK3ctu20SharedSynchronizableI19RouterIPCControllerE20execute_wrapped_syncIZNS1_18createQMuxChannelsERKNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEbbE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOSE__block_invoke(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  unint64_t v3 = *(uint64_t **)(a1 + 40);
  uint64_t v4 = *v3;
  int ChannelForService = RouterDelegate::getChannelForService(*(void *)(*v3 + 120), (uint64_t *)v3[1]);
  int v6 = ChannelForService;
  BOOL v8 = (uint64_t **)(v4 + 160);
  uint64_t v7 = *(void *)(v4 + 160);
  if (v7)
  {
    uint64_t v9 = v4 + 160;
    do
    {
      int v10 = *(_DWORD *)(v7 + 32);
      BOOL v11 = v10 < ChannelForService;
      if (v10 >= ChannelForService) {
        uint64_t v12 = (uint64_t *)v7;
      }
      else {
        uint64_t v12 = (uint64_t *)(v7 + 8);
      }
      if (!v11) {
        uint64_t v9 = v7;
      }
      uint64_t v7 = *v12;
    }
    while (*v12);
    if ((uint64_t **)v9 != v8 && ChannelForService >= *(_DWORD *)(v9 + 32))
    {
      unsigned int v31 = *(NSObject **)(v4 + 40);
      if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
      {
        unint64_t v32 = (uint64_t **)v3[1];
        if (*((char *)v32 + 23) < 0) {
          unint64_t v32 = (uint64_t **)*v32;
        }
        *(_DWORD *)std::string __dst = 136315394;
        *(void *)&__dst[4] = v32;
        *(_WORD *)&__dst[12] = 2080;
        *(void *)&__dst[14] = mav_router_channel_get_name_as_cstr();
        _os_log_impl(&dword_1C5767000, v31, OS_LOG_TYPE_DEFAULT, "#I Reusing QMux for service %s, channel %s", __dst, 0x16u);
      }
      *a2 = *(void *)(v9 + 40);
      uint64_t v33 = *(void *)(v9 + 48);
      a2[1] = v33;
      if (v33) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v33 + 8), 1uLL, memory_order_relaxed);
      }
      return;
    }
  }
  *a2 = 0xAAAAAAAAAAAAAAAALL;
  a2[1] = 0xAAAAAAAAAAAAAAAALL;
  __int16 v13 = (const char *)v3[1];
  if (v13[23] < 0) {
    __int16 v13 = *(const char **)v13;
  }
  size_t v14 = strlen(v13);
  if (v14 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v15 = v14;
  if (v14 >= 0x17)
  {
    uint64_t v27 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v14 | 7) != 0x17) {
      uint64_t v27 = v14 | 7;
    }
    uint64_t v28 = v27 + 1;
    int v16 = operator new(v27 + 1);
    *(void *)&__dst[8] = v15;
    *(void *)&__dst[16] = v28 | 0x8000000000000000;
    *(void *)std::string __dst = v16;
  }
  else
  {
    __dst[23] = v14;
    int v16 = __dst;
    if (!v14)
    {
      __dst[0] = 0;
      uint64_t v17 = *(std::__shared_weak_count **)(v4 + 112);
      uint64_t v34 = *(void *)(v4 + 104);
      uint64_t v35 = v17;
      if (!v17) {
        goto LABEL_18;
      }
      goto LABEL_17;
    }
  }
  memmove(v16, v13, v15);
  v16[v15] = 0;
  uint64_t v17 = *(std::__shared_weak_count **)(v4 + 112);
  uint64_t v34 = *(void *)(v4 + 104);
  uint64_t v35 = v17;
  if (v17) {
LABEL_17:
  }
    atomic_fetch_add_explicit(&v17->__shared_weak_owners_, 1uLL, memory_order_relaxed);
LABEL_18:
  MEMORY[0x1C8791900](a2, 0, 0, __dst, &v34, *(unsigned __int8 *)v3[2], 0);
  if (v35) {
    std::__shared_weak_count::__release_weak(v35);
  }
  if ((__dst[23] & 0x80000000) == 0)
  {
    uint64_t v18 = *(NSObject **)(v4 + 40);
    if (!os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_22;
    }
LABEL_44:
    uint64_t v29 = (uint64_t **)v3[1];
    if (*((char *)v29 + 23) < 0) {
      uint64_t v29 = (uint64_t **)*v29;
    }
    uint64_t name_as_cstr = mav_router_channel_get_name_as_cstr();
    *(_DWORD *)std::string __dst = 136315394;
    *(void *)&__dst[4] = v29;
    *(_WORD *)&__dst[12] = 2080;
    *(void *)&__dst[14] = name_as_cstr;
    _os_log_impl(&dword_1C5767000, v18, OS_LOG_TYPE_DEFAULT, "#I Creating new QMux for service %s, channel %s", __dst, 0x16u);
    *(_DWORD *)std::string __dst = v6;
    uint64_t v20 = *a2;
    uint64_t v19 = a2[1];
    *(void *)&__dst[8] = *a2;
    *(void *)&__dst[16] = v19;
    if (!v19) {
      goto LABEL_24;
    }
    goto LABEL_23;
  }
  operator delete(*(void **)__dst);
  uint64_t v18 = *(NSObject **)(v4 + 40);
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT)) {
    goto LABEL_44;
  }
LABEL_22:
  *(_DWORD *)std::string __dst = v6;
  uint64_t v20 = *a2;
  uint64_t v19 = a2[1];
  *(void *)&__dst[8] = *a2;
  *(void *)&__dst[16] = v19;
  if (v19) {
LABEL_23:
  }
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v19 + 8), 1uLL, memory_order_relaxed);
LABEL_24:
  __int16 v21 = *v8;
  int v22 = (uint64_t **)(v4 + 160);
  if (*v8)
  {
    while (1)
    {
      while (1)
      {
        int v22 = (uint64_t **)v21;
        int v23 = *((_DWORD *)v21 + 8);
        if (v6 >= v23) {
          break;
        }
        __int16 v21 = *v22;
        BOOL v8 = v22;
        if (!*v22) {
          goto LABEL_31;
        }
      }
      if (v23 >= v6) {
        break;
      }
      __int16 v21 = v22[1];
      if (!v21)
      {
        BOOL v8 = v22 + 1;
        goto LABEL_31;
      }
    }
  }
  else
  {
LABEL_31:
    __int16 v24 = (uint64_t *)operator new(0x38uLL);
    int v25 = v24;
    *((_DWORD *)v24 + 8) = v6;
    v24[5] = v20;
    void v24[6] = v19;
    if (v19) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v19 + 8), 1uLL, memory_order_relaxed);
    }
    *__int16 v24 = 0;
    v24[1] = 0;
    v24[2] = (uint64_t)v22;
    std::__shared_weak_count *v8 = v24;
    uint64_t v26 = **(void **)(v4 + 152);
    if (v26)
    {
      *(void *)(v4 + 152) = v26;
      int v25 = *v8;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v4 + 160), v25);
    ++*(void *)(v4 + 168);
  }
  QMux::~QMux((QMux *)&__dst[8]);
}

void sub_1C586D260(_Unwind_Exception *a1)
{
  QMux::~QMux(v1);
  _Unwind_Resume(a1);
}

void sub_1C586D274(_Unwind_Exception *a1)
{
  QMux::~QMux(v2);
  QMux::~QMux(v1);
  _Unwind_Resume(a1);
}

void sub_1C586D290(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a10) {
    std::__shared_weak_count::__release_weak(a10);
  }
  if (a16 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN8dispatch9sync_implIRU13block_pointerF4QMuxvEEENSt3__15decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS5_17integral_constantIbLb0EEE_block_invoke(uint64_t a1)
{
  (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 40) + 16))(&v6);
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v4 = v6;
  uint64_t v3 = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  BOOL v5 = (std::__shared_weak_count *)v2[1];
  *uint64_t v2 = v4;
  v2[1] = v3;
  if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    QMux::~QMux((QMux *)&v6);
  }
  else
  {
    QMux::~QMux((QMux *)&v6);
  }
}

void ___ZN8dispatch19async_and_wait_implIRU13block_pointerF4QMuxvEEENSt3__15decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS5_17integral_constantIbLb0EEE_block_invoke(uint64_t a1)
{
  (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 40) + 16))(&v6);
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v4 = v6;
  uint64_t v3 = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  BOOL v5 = (std::__shared_weak_count *)v2[1];
  *uint64_t v2 = v4;
  v2[1] = v3;
  if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    QMux::~QMux((QMux *)&v6);
  }
  else
  {
    QMux::~QMux((QMux *)&v6);
  }
}

void *ABMServerRegistryBuilder::create@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  size_t result = operator new(0x28uLL);
  result[1] = 0;
  result[2] = 0;
  *size_t result = &unk_1F20F87F0;
  uint64_t v6 = *a1;
  uint64_t v5 = a1[1];
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  result[3] = v6;
  result[4] = v5;
  *a2 = result + 3;
  a2[1] = result;
  return result;
}

__n128 ABMServerRegistryBuilder::ABMServerRegistryBuilder(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  return result;
}

{
  __n128 result;

  __n128 result = *a2;
  *a1 = *a2;
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  return result;
}

void ABMServerRegistryBuilder::~ABMServerRegistryBuilder(ABMServerRegistryBuilder *this)
{
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 1);
  if (v1)
  {
    if (!atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

{
  std::__shared_weak_count *v1;

  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 1);
  if (v1)
  {
    if (!atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void ABMServerRegistryBuilder::setupQMIServer(uint64_t a1, Registry **a2, uint64_t *a3)
{
  RegistryModel = (void **)Registry::getRegistryModel(*a2);
  uint64_t v6 = *RegistryModel;
  if (!**RegistryModel)
  {
    uint64_t v7 = *a3;
    if (*a3)
    {
      uint64_t v8 = a3[1];
      if (v8) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v9 = (std::__shared_weak_count *)v6[1];
      void *v6 = v7;
      v6[1] = v8;
      if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    else
    {
      (*(void (**)(long long *__return_ptr))(**(void **)a1 + 8))(&v13);
      long long v10 = v13;
      long long v13 = 0uLL;
      BOOL v11 = (std::__shared_weak_count *)v6[1];
      *(_OWORD *)uint64_t v6 = v10;
      if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
      uint64_t v12 = (std::__shared_weak_count *)*((void *)&v13 + 1);
      if (*((void *)&v13 + 1)
        && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
  }
}

void ABMServerRegistryBuilder::setupRouterServer(uint64_t a1, Registry **a2, uint64_t *a3)
{
  uint64_t RegistryModel = Registry::getRegistryModel(*a2);
  uint64_t v6 = *(void *)RegistryModel;
  if (!*(void *)(*(void *)RegistryModel + 16))
  {
    uint64_t v7 = *a3;
    if (*a3)
    {
      uint64_t v8 = a3[1];
      if (v8) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v9 = *(std::__shared_weak_count **)(v6 + 24);
      *(void *)(v6 + 16) = v7;
      *(void *)(v6 + 24) = v8;
      if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    else
    {
      (*(void (**)(long long *__return_ptr))(**(void **)a1 + 16))(&v13);
      long long v10 = v13;
      long long v13 = 0uLL;
      BOOL v11 = *(std::__shared_weak_count **)(v6 + 24);
      *(_OWORD *)(v6 + 16) = v10;
      if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
      uint64_t v12 = (std::__shared_weak_count *)*((void *)&v13 + 1);
      if (*((void *)&v13 + 1)
        && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
  }
}

void std::__shared_ptr_emplace<ABMServerRegistryBuilder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20F87F0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ABMServerRegistryBuilder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20F87F0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_emplace<ABMServerRegistryBuilder>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 32);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void ResetInfo::ResetInfo(ResetInfo *this)
{
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 13) = 0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((void *)this + 8) = 0;
}

{
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 13) = 0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((void *)this + 8) = 0;
}

uint64_t ResetInfo::ResetInfo(uint64_t a1, uint64_t a2, uint64_t a3, long long *a4, uint64_t a5, int a6, long long *a7)
{
  uint64_t v18 = 0;
  ctu::cf::assign();
  *(_OWORD *)a1 = 0uLL;
  *(void *)(a1 + 16) = v18;
  long long v17 = 0uLL;
  uint64_t v18 = 0;
  ctu::cf::assign();
  *(_OWORD *)(a1 + 24) = 0uLL;
  *(void *)(a1 + 40) = v18;
  if (*((char *)a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 48), *(const std::string::value_type **)a4, *((void *)a4 + 1));
  }
  else
  {
    long long v12 = *a4;
    *(void *)(a1 + 64) = *((void *)a4 + 2);
    *(_OWORD *)(a1 + 48) = v12;
  }
  if (*(char *)(a5 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a5, *(void *)(a5 + 8));
  }
  else {
    std::string __p = *(std::string *)a5;
  }
  *(void *)(a1 + 72) = Timestamp::convert((uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    *(_DWORD *)(a1 + 80) = a6;
    long long v13 = (std::string *)(a1 + 88);
    if ((*((char *)a7 + 23) & 0x80000000) == 0) {
      goto LABEL_9;
    }
LABEL_11:
    std::string::__init_copy_ctor_external(v13, *(const std::string::value_type **)a7, *((void *)a7 + 1));
    return a1;
  }
  *(_DWORD *)(a1 + 80) = a6;
  long long v13 = (std::string *)(a1 + 88);
  if (*((char *)a7 + 23) < 0) {
    goto LABEL_11;
  }
LABEL_9:
  long long v14 = *a7;
  v13->__r_.__value_.__r.__words[2] = *((void *)a7 + 2);
  *(_OWORD *)&v13->__r_.__value_.__l.__data_ = v14;
  return a1;
}

void sub_1C586DB98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (*(char *)(v20 + 47) < 0) {
    operator delete(*v21);
  }
  if (*(char *)(v20 + 23) < 0) {
    operator delete(*(void **)v20);
  }
  _Unwind_Resume(exception_object);
}

void ResetInfo::ResetInfo(std::string *this, long long *a2, long long *a3, long long *a4, uint64_t a5, int a6, long long *a7)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
    long long v14 = this + 1;
    if ((*((char *)a3 + 23) & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else
  {
    long long v13 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v13;
    long long v14 = this + 1;
    if ((*((char *)a3 + 23) & 0x80000000) == 0)
    {
LABEL_3:
      long long v15 = *a3;
      v14->__r_.__value_.__r.__words[2] = *((void *)a3 + 2);
      *(_OWORD *)&v14->__r_.__value_.__l.__data_ = v15;
      goto LABEL_6;
    }
  }
  std::string::__init_copy_ctor_external(v14, *(const std::string::value_type **)a3, *((void *)a3 + 1));
LABEL_6:
  if (*((char *)a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this + 2, *(const std::string::value_type **)a4, *((void *)a4 + 1));
  }
  else
  {
    long long v16 = *a4;
    this[2].__r_.__value_.__r.__words[2] = *((void *)a4 + 2);
    *(_OWORD *)&this[2].__r_.__value_.__l.__data_ = v16;
  }
  if (*(char *)(a5 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a5, *(void *)(a5 + 8));
  }
  else {
    std::string __p = *(std::string *)a5;
  }
  this[3].__r_.__value_.__r.__words[0] = (std::string::size_type)Timestamp::convert((uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    LODWORD(this[3].__r_.__value_.__r.__words[1]) = a6;
    long long v17 = (std::string *)((char *)this + 88);
    if ((*((char *)a7 + 23) & 0x80000000) == 0) {
      goto LABEL_14;
    }
  }
  else
  {
    LODWORD(this[3].__r_.__value_.__r.__words[1]) = a6;
    long long v17 = (std::string *)((char *)this + 88);
    if ((*((char *)a7 + 23) & 0x80000000) == 0)
    {
LABEL_14:
      long long v18 = *a7;
      v17->__r_.__value_.__r.__words[2] = *((void *)a7 + 2);
      *(_OWORD *)&v17->__r_.__value_.__l.__data_ = v18;
      return;
    }
  }
  std::string::__init_copy_ctor_external(v17, *(const std::string::value_type **)a7, *((void *)a7 + 1));
}

void sub_1C586DDA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (*(char *)(v14 + 47) < 0)
  {
    operator delete(*v15);
    if ((*(char *)(v14 + 23) & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((*(char *)(v14 + 23) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)v14);
  _Unwind_Resume(exception_object);
}

void ResetInfo::~ResetInfo(void **this)
{
  if (*((char *)this + 111) < 0)
  {
    operator delete(this[11]);
    if ((*((char *)this + 71) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*((char *)this + 47) & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }
  else if ((*((char *)this + 71) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(this[6]);
  if ((*((char *)this + 47) & 0x80000000) == 0)
  {
LABEL_4:
    if ((*((char *)this + 23) & 0x80000000) == 0) {
      return;
    }
LABEL_9:
    operator delete(*this);
    return;
  }
LABEL_8:
  operator delete(this[3]);
  if (*((char *)this + 23) < 0) {
    goto LABEL_9;
  }
}

{
  if (*((char *)this + 111) < 0)
  {
    operator delete(this[11]);
    if ((*((char *)this + 71) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*((char *)this + 47) & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }
  else if ((*((char *)this + 71) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(this[6]);
  if ((*((char *)this + 47) & 0x80000000) == 0)
  {
LABEL_4:
    if ((*((char *)this + 23) & 0x80000000) == 0) {
      return;
    }
LABEL_9:
    operator delete(*this);
    return;
  }
LABEL_8:
  operator delete(this[3]);
  if (*((char *)this + 23) < 0) {
    goto LABEL_9;
  }
}

void ResetInfo::getType(ResetInfo *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)this, *((void *)this + 1));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)this;
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 2);
  }
}

void ResetInfo::getSubType(ResetInfo *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 47) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 3), *((void *)this + 4));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 24);
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 5);
  }
}

void ResetInfo::getReason(ResetInfo *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 71) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 6), *((void *)this + 7));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *((_OWORD *)this + 3);
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 8);
  }
}

void ResetInfo::getTime(ResetInfo *this@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = *((void *)this + 9);
  uint64_t v4 = operator new(0x38uLL);
  v4[8] = 0;
  *(void *)uint64_t v4 = 0;
  *((void *)v4 + 1) = 0;
  *((void *)v4 + 2) = v6;
  uint64_t v5 = v4;
  v6[0] = v4;
  *((unsigned char *)v4 + 24) = 1;
  v6[1] = (void *)1;
  *((void *)v4 + 5) = v3;
  *((void *)v4 + 6) = 0xAAAAAAAA00000000;
  Timestamp::asString((uint64_t)&v5, 0, 9, a2);
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&v5, v6[0]);
}

void sub_1C586E06C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, void *a11)
{
}

uint64_t ResetInfo::getChronoTime(ResetInfo *this)
{
  return *((void *)this + 9);
}

uint64_t ResetInfo::getRadar(ResetInfo *this)
{
  return *((unsigned int *)this + 20);
}

void ResetInfo::getCrashReason(ResetInfo *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 111) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 11), *((void *)this + 12));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 88);
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 13);
  }
}

void ResetInfo::setType(ResetInfo *this, const __CFString *a2)
{
  if (*((char *)this + 23) < 0) {
    operator delete(*(void **)this);
  }
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *(void *)((char *)this + 15) = 0;
  *((unsigned char *)this + 23) = 0;
}

void sub_1C586E164(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ResetInfo::setSubType(ResetInfo *this, const __CFString *a2)
{
  if (*((char *)this + 47) < 0) {
    operator delete(*((void **)this + 3));
  }
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;
  *(void *)((char *)this + 39) = 0;
  *((unsigned char *)this + 47) = 0;
}

void sub_1C586E224(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void **ResetInfo::setReason(uint64_t a1, void **a2)
{
  __n128 result = (void **)(a1 + 48);
  if (result != a2)
  {
    if (*(char *)(a1 + 71) < 0)
    {
      size_t v5 = (size_t)a2[1];
      if (*((char *)a2 + 23) >= 0)
      {
        size_t v6 = *((unsigned __int8 *)a2 + 23);
      }
      else
      {
        a2 = (void **)*a2;
        size_t v6 = v5;
      }
      return std::string::__assign_no_alias<false>(result, a2, v6);
    }
    else if ((*((unsigned char *)a2 + 23) & 0x80) != 0)
    {
      return (void **)std::string::__assign_no_alias<true>(result, *a2, (size_t)a2[1]);
    }
    else
    {
      long long v4 = *(_OWORD *)a2;
      result[2] = a2[2];
      *(_OWORD *)__n128 result = v4;
    }
  }
  return result;
}

void ResetInfo::setTime(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string __p = *(std::string *)a2;
  }
  *(void *)(a1 + 72) = Timestamp::convert((uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1C586E318(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ResetInfo::setRadar(uint64_t result, int a2)
{
  *(_DWORD *)(result + 80) = a2;
  return result;
}

void **ResetInfo::setCrashReason(uint64_t a1, void **a2)
{
  __n128 result = (void **)(a1 + 88);
  if (result != a2)
  {
    if (*(char *)(a1 + 111) < 0)
    {
      size_t v5 = (size_t)a2[1];
      if (*((char *)a2 + 23) >= 0)
      {
        size_t v6 = *((unsigned __int8 *)a2 + 23);
      }
      else
      {
        a2 = (void **)*a2;
        size_t v6 = v5;
      }
      return std::string::__assign_no_alias<false>(result, a2, v6);
    }
    else if ((*((unsigned char *)a2 + 23) & 0x80) != 0)
    {
      return (void **)std::string::__assign_no_alias<true>(result, *a2, (size_t)a2[1]);
    }
    else
    {
      long long v4 = *(_OWORD *)a2;
      result[2] = a2[2];
      *(_OWORD *)__n128 result = v4;
    }
  }
  return result;
}

uint64_t ResetInfo::asString@<X0>(ResetInfo *this@<X0>, unsigned char *a2@<X8>)
{
  if (ResetInfo::readResetReasonPatterns(void)::sOnce != -1) {
    dispatch_once(&ResetInfo::readResetReasonPatterns(void)::sOnce, &__block_literal_global_5);
  }
  unint64_t v54 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v53[7] = v4;
  v53[8] = v4;
  v53[5] = v4;
  v53[6] = v4;
  xpc_object_t v53[3] = v4;
  v53[4] = v4;
  v53[1] = v4;
  v53[2] = v4;
  long long v52 = v4;
  v53[0] = v4;
  *(_OWORD *)uint64_t v50 = v4;
  long long v51 = v4;
  long long v48 = v4;
  long long v49 = v4;
  long long v46 = v4;
  long long v47 = v4;
  long long v45 = v4;
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v45);
  size_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v46, (uint64_t)"ResetInfo { Type='", 18);
  int v6 = *((char *)this + 23);
  if (v6 >= 0) {
    uint64_t v7 = this;
  }
  else {
    uint64_t v7 = *(ResetInfo **)this;
  }
  if (v6 >= 0) {
    uint64_t v8 = *((unsigned __int8 *)this + 23);
  }
  else {
    uint64_t v8 = *((void *)this + 1);
  }
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)v7, v8);
  long long v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"' SubType='", 11);
  int v11 = *((char *)this + 47);
  if (v11 >= 0) {
    long long v12 = (char *)this + 24;
  }
  else {
    long long v12 = (char *)*((void *)this + 3);
  }
  if (v11 >= 0) {
    uint64_t v13 = *((unsigned __int8 *)this + 47);
  }
  else {
    uint64_t v13 = *((void *)this + 4);
  }
  uint64_t v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)v12, v13);
  long long v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"' Time='", 8);
  uint64_t v16 = *((void *)this + 9);
  xpc_object_t v56 = 0;
  uint64_t v57 = 0;
  char v55 = &v56;
  long long v17 = operator new(0x38uLL);
  v17[8] = 0;
  *(void *)long long v17 = 0;
  *((void *)v17 + 1) = 0;
  *((void *)v17 + 2) = &v56;
  char v55 = (void **)v17;
  xpc_object_t v56 = v17;
  *((unsigned char *)v17 + 24) = 1;
  uint64_t v57 = 1;
  *((void *)v17 + 5) = v16;
  *((void *)v17 + 6) = 0xAAAAAAAA00000000;
  Timestamp::asString((uint64_t)&v55, 0, 9, __p);
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&v55, v56);
  if ((v44 & 0x80u) == 0) {
    long long v18 = __p;
  }
  else {
    long long v18 = (void **)__p[0];
  }
  if ((v44 & 0x80u) == 0) {
    uint64_t v19 = v44;
  }
  else {
    uint64_t v19 = (uint64_t)__p[1];
  }
  uint64_t v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v18, v19);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"' Radar='", 9);
  __int16 v21 = (void *)std::ostream::operator<<();
  int v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"' Reason='", 10);
  int v23 = (char *)this + 48;
  int v24 = *((char *)this + 71);
  if (v24 >= 0) {
    int v25 = (char *)this + 48;
  }
  else {
    int v25 = (char *)*((void *)this + 6);
  }
  if (v24 >= 0) {
    uint64_t v26 = *((unsigned __int8 *)this + 71);
  }
  else {
    uint64_t v26 = *((void *)this + 7);
  }
  uint64_t v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)v25, v26);
  uint64_t v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"' MTBF='", 8);
  *(_DWORD *)((char *)v28 + *(void *)(*v28 - 24) + 8) |= 1u;
  ResetInfo::isMTBF((ResetInfo **)this);
  uint64_t v29 = (void *)std::ostream::operator<<();
  uint64_t v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"' SCD='", 7);
  *(_DWORD *)((char *)v30 + *(void *)(*v30 - 24) + 8) |= 1u;
  ResetInfo::reasonMatchesAtLeastOneApplicablePattern(2, (uint64_t)v23, (long long **)&ResetInfo::sPatternMasks);
  unsigned int v31 = (void *)std::ostream::operator<<();
  unint64_t v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"' COF='", 7);
  *(_DWORD *)((char *)v32 + *(void *)(*v32 - 24) + 8) |= 1u;
  ResetInfo::reasonMatchesAtLeastOneApplicablePattern(4, (uint64_t)v23, (long long **)&ResetInfo::sPatternMasks);
  uint64_t v33 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)"' }", 3);
  if (((char)v44 & 0x80000000) == 0)
  {
    char v34 = BYTE8(v52);
    if ((BYTE8(v52) & 0x10) == 0) {
      goto LABEL_29;
    }
LABEL_32:
    uint64_t v36 = v52;
    if ((unint64_t)v52 < *((void *)&v49 + 1))
    {
      *(void *)&long long v52 = *((void *)&v49 + 1);
      uint64_t v36 = *((void *)&v49 + 1);
    }
    uint64_t v37 = (const void *)v49;
    size_t v35 = v36 - v49;
    if ((unint64_t)(v36 - v49) >= 0x7FFFFFFFFFFFFFF8) {
      goto LABEL_46;
    }
    goto LABEL_35;
  }
  operator delete(__p[0]);
  char v34 = BYTE8(v52);
  if ((BYTE8(v52) & 0x10) != 0) {
    goto LABEL_32;
  }
LABEL_29:
  if ((v34 & 8) == 0)
  {
    size_t v35 = 0;
    a2[23] = 0;
    goto LABEL_42;
  }
  uint64_t v37 = (const void *)*((void *)&v47 + 1);
  size_t v35 = *((void *)&v48 + 1) - *((void *)&v47 + 1);
  if (*((void *)&v48 + 1) - *((void *)&v47 + 1) >= 0x7FFFFFFFFFFFFFF8uLL) {
LABEL_46:
  }
    std::string::__throw_length_error[abi:ne180100]();
LABEL_35:
  if (v35 >= 0x17)
  {
    uint64_t v38 = (v35 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v35 | 7) != 0x17) {
      uint64_t v38 = v35 | 7;
    }
    uint64_t v39 = v38 + 1;
    uint64_t v40 = operator new(v38 + 1);
    *((void *)a2 + 1) = v35;
    *((void *)a2 + 2) = v39 | 0x8000000000000000;
    *(void *)a2 = v40;
    a2 = v40;
    goto LABEL_41;
  }
  a2[23] = v35;
  if (v35) {
LABEL_41:
  }
    memmove(a2, v37, v35);
LABEL_42:
  a2[v35] = 0;
  *(void *)&long long v45 = *MEMORY[0x1E4FBA408];
  uint64_t v41 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)&v45 + *(void *)(v45 - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  *(void *)&long long v46 = v41;
  *((void *)&v46 + 1) = MEMORY[0x1E4FBA470] + 16;
  if (SHIBYTE(v51) < 0) {
    operator delete(v50[1]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1C8791FB0](v53);
}

void sub_1C586E88C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy(v5 - 88, *(void **)(v5 - 80));
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1C586E8AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1C586E8C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1C586E8D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void ResetInfo::readResetReasonPatterns(ResetInfo *this)
{
  if (ResetInfo::readResetReasonPatterns(void)::sOnce != -1) {
    dispatch_once(&ResetInfo::readResetReasonPatterns(void)::sOnce, &__block_literal_global_5);
  }
}

uint64_t ResetInfo::isMTBF(ResetInfo **this)
{
  uint64_t v2 = (char *)*MEMORY[0x1E4F4C6E8];
  if (*((char *)this + 23) < 0)
  {
    long long v4 = *this;
    int64_t v3 = (int64_t)this[1];
    int64_t v5 = strlen((const char *)*MEMORY[0x1E4F4C6E8]);
    if (!v5) {
      return ResetInfo::reasonMatchesAtLeastOneApplicablePattern(1, (uint64_t)(this + 6), (long long **)&ResetInfo::sPatternMasks) ^ 1;
    }
  }
  else
  {
    int64_t v3 = *((unsigned __int8 *)this + 23);
    long long v4 = (ResetInfo *)this;
    int64_t v5 = strlen((const char *)*MEMORY[0x1E4F4C6E8]);
    if (!v5) {
      return ResetInfo::reasonMatchesAtLeastOneApplicablePattern(1, (uint64_t)(this + 6), (long long **)&ResetInfo::sPatternMasks) ^ 1;
    }
  }
  int64_t v6 = v5;
  if (v3 < v5) {
    return 0;
  }
  uint64_t v8 = (char *)v4 + v3;
  int v9 = *v2;
  long long v10 = v4;
  while (1)
  {
    if (v3 - v6 == -1) {
      return 0;
    }
    uint64_t result = (uint64_t)memchr(v10, v9, v3 - v6 + 1);
    if (!result) {
      return result;
    }
    uint64_t v11 = result;
    uint64_t result = memcmp((const void *)result, v2, v6);
    if (!result) {
      break;
    }
    long long v10 = (ResetInfo *)(v11 + 1);
    int64_t v3 = (int64_t)&v8[-v11 - 1];
    if (v3 < v6) {
      return 0;
    }
  }
  if ((char *)v11 != v8 && v11 - (void)v4 != -1) {
    return ResetInfo::reasonMatchesAtLeastOneApplicablePattern(1, (uint64_t)(this + 6), (long long **)&ResetInfo::sPatternMasks) ^ 1;
  }
  return result;
}

uint64_t ResetInfo::shouldSetSCD(ResetInfo *this)
{
  return ResetInfo::reasonMatchesAtLeastOneApplicablePattern(2, (uint64_t)this + 48, (long long **)&ResetInfo::sPatternMasks);
}

uint64_t ResetInfo::shouldSetCOF(ResetInfo *this)
{
  return ResetInfo::reasonMatchesAtLeastOneApplicablePattern(4, (uint64_t)this + 48, (long long **)&ResetInfo::sPatternMasks);
}

uint64_t ResetInfo::addToDict(uint64_t result, __CFDictionary **a2, uint64_t a3, uint64_t a4, const __CFAllocator *a5)
{
  if (*a2) {
    int64_t v5 = ctu::SharedRef<__CFDictionary,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary>::get;
  }
  else {
    int64_t v5 = 0;
  }
  if (v5)
  {
    uint64_t v7 = result;
    if (ResetInfo::readResetReasonPatterns(void)::sOnce != -1) {
      dispatch_once(&ResetInfo::readResetReasonPatterns(void)::sOnce, &__block_literal_global_5);
    }
    CFAllocatorRef v8 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    int v9 = *a2;
    long long v10 = (const __CFString **)*MEMORY[0x1E4F4C690];
    if (*(char *)(v7 + 23) < 0) {
      std::string::__init_copy_ctor_external(&v30, *(const std::string::value_type **)v7, *(void *)(v7 + 8));
    }
    else {
      std::string v30 = *(std::string *)v7;
    }
    ctu::cf::update<char const*,std::string>(v9, v10, (uint64_t)&v30, (uint64_t)v8, a5);
    if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v30.__r_.__value_.__l.__data_);
      long long v12 = *a2;
      uint64_t v13 = (const __CFString **)*MEMORY[0x1E4F4CA38];
      if ((*(char *)(v7 + 47) & 0x80000000) == 0) {
        goto LABEL_12;
      }
    }
    else
    {
      long long v12 = *a2;
      uint64_t v13 = (const __CFString **)*MEMORY[0x1E4F4CA38];
      if ((*(char *)(v7 + 47) & 0x80000000) == 0)
      {
LABEL_12:
        std::string v30 = *(std::string *)(v7 + 24);
        goto LABEL_15;
      }
    }
    std::string::__init_copy_ctor_external(&v30, *(const std::string::value_type **)(v7 + 24), *(void *)(v7 + 32));
LABEL_15:
    ctu::cf::update<char const*,std::string>(v12, v13, (uint64_t)&v30, (uint64_t)v8, v11);
    if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v30.__r_.__value_.__l.__data_);
    }
    long long v15 = (_OWORD *)(v7 + 48);
    uint64_t v16 = *a2;
    long long v17 = (const __CFString **)*MEMORY[0x1E4F4C8F0];
    if (*(char *)(v7 + 71) < 0)
    {
      std::string::__init_copy_ctor_external(&v30, *(const std::string::value_type **)(v7 + 48), *(void *)(v7 + 56));
    }
    else
    {
      *(_OWORD *)&v30.__r_.__value_.__l.__data_ = *v15;
      v30.__r_.__value_.__r.__words[2] = *(void *)(v7 + 64);
    }
    ctu::cf::update<char const*,std::string>(v16, v17, (uint64_t)&v30, (uint64_t)v8, v14);
    if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v30.__r_.__value_.__l.__data_);
    }
    uint64_t v18 = *(void *)(v7 + 72);
    uint64_t v19 = operator new(0x38uLL);
    v19[8] = 0;
    *(void *)uint64_t v19 = 0;
    *((void *)v19 + 1) = 0;
    *((void *)v19 + 2) = &v30.__r_.__value_.__l.__size_;
    v30.__r_.__value_.__r.__words[0] = (std::string::size_type)v19;
    v30.__r_.__value_.__l.__size_ = (std::string::size_type)v19;
    *((unsigned char *)v19 + 24) = 1;
    v30.__r_.__value_.__r.__words[2] = 1;
    *((void *)v19 + 5) = v18;
    *((void *)v19 + 6) = 0xAAAAAAAA00000000;
    Timestamp::asString((uint64_t)&v30, 0, 9, &__p);
    std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&v30, (void *)v30.__r_.__value_.__l.__size_);
    __int16 v21 = *a2;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v30, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    }
    else {
      std::string v30 = __p;
    }
    ctu::cf::update<char const*,std::string>(v21, (const __CFString **)*MEMORY[0x1E4F4C4C8], (uint64_t)&v30, (uint64_t)v8, v20);
    if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v30.__r_.__value_.__l.__data_);
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_27;
      }
    }
    else if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_27:
      ctu::cf::update<char const*,unsigned int>(*a2, (const __CFString **)*MEMORY[0x1E4F4C180], *(_DWORD *)(v7 + 80), v8, v22);
      int isMTBF = ResetInfo::isMTBF((ResetInfo **)v7);
      ctu::cf::update<char const*,BOOL>(*a2, (const __CFString **)*MEMORY[0x1E4F4C8E8], isMTBF, (uint64_t)v8, v24);
      int v25 = ResetInfo::reasonMatchesAtLeastOneApplicablePattern(2, (uint64_t)v15, (long long **)&ResetInfo::sPatternMasks);
      ctu::cf::update<char const*,BOOL>(*a2, (const __CFString **)*MEMORY[0x1E4F4C900], v25, (uint64_t)v8, v26);
      int v27 = ResetInfo::reasonMatchesAtLeastOneApplicablePattern(4, (uint64_t)v15, (long long **)&ResetInfo::sPatternMasks);
      return ctu::cf::update<char const*,BOOL>(*a2, (const __CFString **)*MEMORY[0x1E4F4C8F8], v27, (uint64_t)v8, v28);
    }
    operator delete(__p.__r_.__value_.__l.__data_);
    goto LABEL_27;
  }
  return result;
}

void sub_1C586EDA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ResetInfo::addToDict(ResetInfo *this, xpc_object_t *a2)
{
  if (MEMORY[0x1C8792D30](*a2) != MEMORY[0x1E4F14590]) {
    return;
  }
  if (ResetInfo::readResetReasonPatterns(void)::sOnce != -1)
  {
    dispatch_once(&ResetInfo::readResetReasonPatterns(void)::sOnce, &__block_literal_global_5);
    long long v4 = (const char *)this;
    if ((*((char *)this + 23) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  long long v4 = (const char *)this;
  if (*((char *)this + 23) < 0) {
LABEL_4:
  }
    long long v4 = *(const char **)this;
LABEL_5:
  xpc_object_t v5 = xpc_string_create(v4);
  if (!v5) {
    xpc_object_t v5 = xpc_null_create();
  }
  xpc_dictionary_set_value(*a2, (const char *)*MEMORY[0x1E4F4C690], v5);
  xpc_object_t v6 = xpc_null_create();
  xpc_release(v5);
  xpc_release(v6);
  uint64_t v7 = (char *)this + 24;
  if (*((char *)this + 47) < 0) {
    uint64_t v7 = *(const char **)v7;
  }
  xpc_object_t v8 = xpc_string_create(v7);
  if (!v8) {
    xpc_object_t v8 = xpc_null_create();
  }
  xpc_dictionary_set_value(*a2, (const char *)*MEMORY[0x1E4F4CA38], v8);
  xpc_object_t v9 = xpc_null_create();
  xpc_release(v8);
  xpc_release(v9);
  long long v10 = (const char **)((char *)this + 48);
  CFAllocatorRef v11 = (char *)this + 48;
  if (*((char *)this + 71) < 0) {
    CFAllocatorRef v11 = *v10;
  }
  xpc_object_t v12 = xpc_string_create(v11);
  if (!v12) {
    xpc_object_t v12 = xpc_null_create();
  }
  xpc_dictionary_set_value(*a2, (const char *)*MEMORY[0x1E4F4C8F0], v12);
  xpc_object_t v13 = xpc_null_create();
  xpc_release(v12);
  xpc_release(v13);
  uint64_t v14 = *((void *)this + 9);
  long long v15 = operator new(0x38uLL);
  v15[8] = 0;
  *(void *)long long v15 = 0;
  *((void *)v15 + 1) = 0;
  *((void *)v15 + 2) = v33;
  unint64_t v32 = v15;
  v33[0] = v15;
  *((unsigned char *)v15 + 24) = 1;
  v33[1] = (void *)1;
  *((void *)v15 + 5) = v14;
  *((void *)v15 + 6) = 0xAAAAAAAA00000000;
  Timestamp::asString((uint64_t)&v32, 0, 9, __p);
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&v32, v33[0]);
  if (v31 >= 0) {
    uint64_t v16 = __p;
  }
  else {
    uint64_t v16 = (void **)__p[0];
  }
  xpc_object_t v17 = xpc_string_create((const char *)v16);
  if (!v17) {
    xpc_object_t v17 = xpc_null_create();
  }
  xpc_dictionary_set_value(*a2, (const char *)*MEMORY[0x1E4F4C4C8], v17);
  xpc_object_t v18 = xpc_null_create();
  xpc_release(v17);
  xpc_release(v18);
  if (v31 < 0) {
    operator delete(__p[0]);
  }
  xpc_object_t v19 = xpc_int64_create(*((unsigned int *)this + 20));
  if (!v19) {
    xpc_object_t v19 = xpc_null_create();
  }
  xpc_dictionary_set_value(*a2, (const char *)*MEMORY[0x1E4F4C180], v19);
  xpc_object_t v20 = xpc_null_create();
  xpc_release(v19);
  xpc_release(v20);
  char isMTBF = ResetInfo::isMTBF((ResetInfo **)this);
  xpc_object_t v22 = xpc_BOOL_create(isMTBF);
  if (!v22) {
    xpc_object_t v22 = xpc_null_create();
  }
  xpc_dictionary_set_value(*a2, (const char *)*MEMORY[0x1E4F4C8E8], v22);
  xpc_object_t v23 = xpc_null_create();
  xpc_release(v22);
  xpc_release(v23);
  char v24 = ResetInfo::reasonMatchesAtLeastOneApplicablePattern(2, (uint64_t)v10, (long long **)&ResetInfo::sPatternMasks);
  xpc_object_t v25 = xpc_BOOL_create(v24);
  if (!v25) {
    xpc_object_t v25 = xpc_null_create();
  }
  xpc_dictionary_set_value(*a2, (const char *)*MEMORY[0x1E4F4C900], v25);
  xpc_object_t v26 = xpc_null_create();
  xpc_release(v25);
  xpc_release(v26);
  char v27 = ResetInfo::reasonMatchesAtLeastOneApplicablePattern(4, (uint64_t)v10, (long long **)&ResetInfo::sPatternMasks);
  xpc_object_t v28 = xpc_BOOL_create(v27);
  if (!v28) {
    xpc_object_t v28 = xpc_null_create();
  }
  xpc_dictionary_set_value(*a2, (const char *)*MEMORY[0x1E4F4C8F8], v28);
  xpc_object_t v29 = xpc_null_create();
  xpc_release(v28);
  xpc_release(v29);
}

void sub_1C586F224(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, void *a13)
{
}

void ResetInfo::fetchFromDict(void **this, xpc_object_t *a2)
{
  if (MEMORY[0x1C8792D30](*a2) != MEMORY[0x1E4F14590]) {
    return;
  }
  xpc_object_t value = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E4F4C690]);
  xpc_object_t object = value;
  if (value) {
    xpc_retain(value);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  std::string __p = 0;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  xpc::dyn_cast_or_default();
  if (*((char *)this + 23) < 0) {
    operator delete(*this);
  }
  *(_OWORD *)this = v14;
  this[2] = v15;
  HIBYTE(v15) = 0;
  LOBYTE(v14) = 0;
  xpc_release(object);
  xpc_object_t v5 = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E4F4CA38]);
  xpc_object_t object = v5;
  if (v5) {
    xpc_retain(v5);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  std::string __p = 0;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  xpc::dyn_cast_or_default();
  xpc_object_t v6 = this + 3;
  if (*((char *)this + 47) < 0) {
    operator delete(*v6);
  }
  *(_OWORD *)xpc_object_t v6 = v14;
  this[5] = v15;
  HIBYTE(v15) = 0;
  LOBYTE(v14) = 0;
  xpc_release(object);
  xpc_object_t v7 = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E4F4C8F0]);
  xpc_object_t object = v7;
  if (v7) {
    xpc_retain(v7);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  std::string __p = 0;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  xpc::dyn_cast_or_default();
  xpc_object_t v8 = this + 6;
  if (*((char *)this + 71) < 0) {
    operator delete(*v8);
  }
  *(_OWORD *)xpc_object_t v8 = v14;
  this[8] = v15;
  HIBYTE(v15) = 0;
  LOBYTE(v14) = 0;
  xpc_release(object);
  xpc_object_t v9 = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E4F4C4C8]);
  xpc_object_t object = v9;
  if (v9) {
    xpc_retain(v9);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  Timestamp::Timestamp((Timestamp *)&v14);
  Timestamp::asString((uint64_t)&v14, 0, 9, &__p);
  xpc::dyn_cast_or_default();
  this[9] = Timestamp::convert((uint64_t)&v11);
  if (v12 < 0)
  {
    operator delete(v11);
    if ((SHIBYTE(v18) & 0x80000000) == 0) {
      goto LABEL_22;
    }
LABEL_25:
    operator delete(__p);
    goto LABEL_22;
  }
  if (SHIBYTE(v18) < 0) {
    goto LABEL_25;
  }
LABEL_22:
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&v14, *((void **)&v14 + 1));
  xpc_release(object);
  xpc_object_t v10 = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E4F4C180]);
  std::string __p = v10;
  if (v10) {
    xpc_retain(v10);
  }
  else {
    std::string __p = xpc_null_create();
  }
  *((_DWORD *)this + 20) = xpc::dyn_cast_or_default((xpc *)&__p, (const object *)7);
  xpc_release(__p);
}

void sub_1C586F578(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, xpc_object_t a15, char a16, uint64_t a17, uint64_t a18, xpc_object_t object, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
}

uint64_t ResetInfo::reasonMatchesAtLeastOneApplicablePattern(int a1, uint64_t a2, long long **a3)
{
  uint64_t v57 = *MEMORY[0x1E4F143B8];
  int64_t v3 = *a3;
  size_t v35 = a3[1];
  if (*a3 != v35)
  {
    int v4 = 0;
    while (1)
    {
      *(void *)&long long v5 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
      *(_OWORD *)uint64_t v40 = v5;
      *(_OWORD *)&v40[16] = v5;
      if (*((char *)v3 + 23) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)v40, *(const std::string::value_type **)v3, *((void *)v3 + 1));
      }
      else
      {
        long long v6 = *v3;
        *(void *)&v40[16] = *((void *)v3 + 2);
        *(_OWORD *)uint64_t v40 = v6;
      }
      *(_DWORD *)&v40[24] = *((_DWORD *)v3 + 6);
      if ((*(_DWORD *)&v40[24] & a1) != 0)
      {
        memset(&v39, 170, sizeof(v39));
        if ((v40[23] & 0x80000000) != 0) {
          std::string::__init_copy_ctor_external(&v39, *(const std::string::value_type **)v40, *(std::string::size_type *)&v40[8]);
        }
        else {
          std::string v39 = *(std::string *)v40;
        }
        *(void *)&long long v8 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
        *(_OWORD *)&v38[16] = v8;
        *(_OWORD *)&v38[32] = v8;
        *(_OWORD *)&v37[0].__locale_ = v8;
        *(_OWORD *)uint64_t v38 = v8;
        MEMORY[0x1C8791F60](v37);
        v37[1].__locale_ = (std::locale::__imp *)std::locale::use_facet(v37, MEMORY[0x1E4FBA258]);
        *(void *)uint64_t v38 = std::locale::use_facet(v37, MEMORY[0x1E4FBA280]);
        memset(&v38[8], 0, 40);
        std::string::size_type size = HIBYTE(v39.__r_.__value_.__r.__words[2]);
        if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          xpc_object_t v10 = &v39;
        }
        else {
          xpc_object_t v10 = (std::string *)v39.__r_.__value_.__r.__words[0];
        }
        if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type size = v39.__r_.__value_.__l.__size_;
        }
        if ((char *)v10 + size != std::basic_regex<char,std::regex_traits<char>>::__parse<std::__wrap_iter<char const*>>((uint64_t)v37, (char *)v10, (char *)v10 + size))std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)17>(); {
        uint64_t v11 = *(unsigned __int8 *)(a2 + 23);
        }
        if ((v11 & 0x80u) == 0) {
          char v12 = (std::sub_match<const char *> *)a2;
        }
        else {
          char v12 = *(std::sub_match<const char *> **)a2;
        }
        if ((v11 & 0x80u) != 0) {
          uint64_t v11 = *(void *)(a2 + 8);
        }
        xpc_object_t v13 = (char *)v12 + v11;
        *(void *)&long long v14 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v14 + 1) = 0xAAAAAAAAAAAAAAAALL;
        long long v47 = v14;
        unint64_t v44 = 0xAAAAAAAAAAAAAA00;
        *(void *)&v41[40] = 0xAAAAAAAAAAAAAAAALL;
        uint64_t v42 = 0;
        uint64_t v43 = 0;
        long long v45 = 0;
        long long v46 = 0;
        LOBYTE(v47) = 0;
        BYTE8(v47) = 0;
        long long v48 = 0;
        memset(v41, 0, 41);
        long long v55 = v14;
        unint64_t v52 = 0xAAAAAAAAAAAAAA00;
        v49[1].__end_cap_.__value_ = (std::sub_match<const char *> *)0xAAAAAAAAAAAAAAAALL;
        uint64_t v50 = 0;
        uint64_t v51 = 0;
        uint64_t v53 = 0;
        uint64_t v54 = 0;
        LOBYTE(v55) = 0;
        BYTE8(v55) = 0;
        uint64_t v56 = 0;
        memset(v49, 0, 41);
        int v15 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>((uint64_t)v37, v12, (std::sub_match<const char *> *)((char *)v12 + v11), v49, 4160);
        uint64_t v16 = v50;
        unint64_t v17 = 0xAAAAAAAAAAAAAAABLL * (((char *)v49[0].__end_ - (char *)v49[0].__begin_) >> 3);
        int64_t v19 = *(void *)&v41[8];
        uint64_t v18 = *(char **)v41;
        unint64_t v20 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)&v41[8] - *(void *)v41) >> 3);
        if (v17 <= v20)
        {
          if (v17 < v20)
          {
            int64_t v19 = *(void *)v41 + 8 * (((char *)v49[0].__end_ - (char *)v49[0].__begin_) >> 3);
            *(void *)&v41[8] = v19;
          }
        }
        else
        {
          std::vector<std::sub_match<std::__wrap_iter<char const*>>>::__append((std::vector<std::ssub_match> *)v41, v17 - v20);
          int64_t v19 = *(void *)&v41[8];
          uint64_t v18 = *(char **)v41;
        }
        if ((char *)v19 == v18)
        {
          begin = v49[0].__begin_;
        }
        else
        {
          uint64_t v21 = 0;
          unint64_t v22 = 0;
          std::vector<std::csub_match>::pointer end = v49[0].__end_;
          begin = v49[0].__begin_;
          do
          {
            unint64_t v25 = 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)begin) >> 3);
            xpc_object_t v26 = (std::vector<std::csub_match> *)&begin[v21];
            if (v25 <= v22) {
              xpc_object_t v26 = &v49[1];
            }
            *(void *)&v18[v21 * 24] = (char *)v12 + (unint64_t)v26->__begin_ - v16;
            if (0xAAAAAAAAAAAAAAABLL * (((char *)v49[0].__end_ - (char *)v49[0].__begin_) >> 3) <= v22) {
              p_std::vector<std::csub_match>::pointer end = &v49[1].__end_;
            }
            else {
              p_std::vector<std::csub_match>::pointer end = &v49[0].__begin_[v21].second;
            }
            *(void *)(*(void *)v41 + v21 * 24 + 8) = (char *)v12 + *p_end - v16;
            std::vector<std::csub_match>::pointer end = v49[0].__end_;
            begin = v49[0].__begin_;
            if (0xAAAAAAAAAAAAAAABLL * (((char *)v49[0].__end_ - (char *)v49[0].__begin_) >> 3) <= v22) {
              p_end_cap = &v49[1].__end_cap_;
            }
            else {
              p_end_cap = &v49[0].__begin_[v21].matched;
            }
            uint64_t v18 = *(char **)v41;
            *(unsigned char *)(*(void *)v41 + v21 * 24 + 16) = *p_end_cap;
            ++v22;
            ++v21;
          }
          while (v22 < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)&v41[8] - (void)v18) >> 3));
        }
        *(void *)&v41[24] = v13;
        *(void *)&v41[32] = v13;
        uint64_t v42 = (char *)v12 + v50 - v16;
        uint64_t v43 = (char *)v12 + v51 - v16;
        LOBYTE(v44) = v52;
        v41[40] = 0;
        long long v45 = (char *)v12 + v53 - v16;
        long long v46 = (char *)v12 + v54 - v16;
        int v29 = v55;
        LOBYTE(v47) = v55;
        long long v48 = v42;
        BYTE8(v47) = BYTE8(v55);
        if (begin)
        {
          v49[0].__end_ = begin;
          operator delete(begin);
          int v29 = v47;
          uint64_t v18 = *(char **)v41;
        }
        if (v29) {
          int v30 = v15 ^ 1;
        }
        else {
          int v30 = 1;
        }
        if (v18)
        {
          *(void *)&v41[8] = v18;
          operator delete(v18);
        }
        int v31 = v15 & v30;
        if (v31) {
          int v7 = 2;
        }
        else {
          int v7 = 0;
        }
        unint64_t v32 = *(std::__shared_weak_count **)&v38[32];
        if (*(void *)&v38[32]
          && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&v38[32] + 8), 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
          std::__shared_weak_count::__release_weak(v32);
          std::locale::~locale(v37);
          if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
          {
LABEL_60:
            operator delete(v39.__r_.__value_.__l.__data_);
            v4 |= v31;
            if ((v40[23] & 0x80000000) == 0) {
              goto LABEL_56;
            }
LABEL_55:
            operator delete(*(void **)v40);
            goto LABEL_56;
          }
        }
        else
        {
          std::locale::~locale(v37);
          if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
            goto LABEL_60;
          }
        }
        v4 |= v31;
        if ((v40[23] & 0x80000000) != 0) {
          goto LABEL_55;
        }
      }
      else
      {
        int v7 = 3;
        if ((v40[23] & 0x80000000) != 0) {
          goto LABEL_55;
        }
      }
LABEL_56:
      if (v7 == 3 || !v7)
      {
        v3 += 2;
        if (v3 != v35) {
          continue;
        }
      }
      return v4 & 1;
    }
  }
  LOBYTE(v4) = 0;
  return v4 & 1;
}

void sub_1C586FB74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (a36 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1C586FB80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, std::locale a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void **__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,long long a52)
{
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a24);
  std::locale::~locale(&a19);
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    long long v55 = GetOsLogContext()[1];
    if (os_log_type_enabled(v55, OS_LOG_TYPE_ERROR))
    {
      p_p = (void **)&__p;
      if (a32 < 0) {
        p_p = __p;
      }
      *(_DWORD *)(v52 - 224) = 136315138;
      *(void *)((char *)&a52 + 4) = p_p;
      _os_log_error_impl(&dword_1C5767000, v55, OS_LOG_TYPE_ERROR, "Exception with %s", (uint8_t *)(v52 - 224), 0xCu);
    }
    __cxa_rethrow();
  }
  if (a32 < 0) {
    operator delete(__p);
  }
  if (SHIBYTE(a36) < 0)
  {
    operator delete(a34);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1C586FC98);
}

void sub_1C586FC5C()
{
}

void sub_1C586FC90(void *a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C586FC98);
  }
  __clang_call_terminate(a1);
}

void ___ZN9ResetInfo23readResetReasonPatternsEv_block_invoke()
{
  v0 = GetOsLogContext()[1];
  if (os_log_type_enabled(v0, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t v1 = 0;
    _os_log_debug_impl(&dword_1C5767000, v0, OS_LOG_TYPE_DEBUG, "Default pattern masks will be used", v1, 2u);
  }
  std::vector<ResetInfo::RegexPatternAndReasonMask>::__assign_with_size[abi:ne180100]<ResetInfo::RegexPatternAndReasonMask*,ResetInfo::RegexPatternAndReasonMask*>((void **)&ResetInfo::sPatternMasks, (void **)kDefaultPatternMasks, (char *)qword_1EBBDD728, (qword_1EBBDD728 - kDefaultPatternMasks) >> 5);
}

void ***std::__exception_guard_exceptions<std::vector<ResetInfo::RegexPatternAndReasonMask>::__destroy_vector>::~__exception_guard_exceptions[abi:ne180100](void ***result)
{
  uint64_t v1 = result;
  if (!*((unsigned char *)result + 8))
  {
    uint64_t v2 = *result;
    int64_t v3 = (void **)**result;
    if (v3)
    {
      int v4 = (void **)v2[1];
      long long v5 = **result;
      if (v4 != v3)
      {
        do
        {
          if (*((char *)v4 - 9) < 0) {
            operator delete(*(v4 - 4));
          }
          v4 -= 4;
        }
        while (v4 != v3);
        long long v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

void ctu::cf::update<char const*,std::string>(__CFDictionary *a1, const __CFString **a2, uint64_t a3, uint64_t a4, const __CFAllocator *a5)
{
  xpc_object_t value = 0;
  ctu::cf::convert_copy((ctu::cf *)&value, a2, (const char *)0x8000100, a4, a5);
  long long v6 = value;
  xpc_object_t value = 0;
  ctu::cf::convert_copy();
  int v7 = value;
  if (v6) {
    BOOL v8 = value == 0;
  }
  else {
    BOOL v8 = 1;
  }
  if (v8)
  {
    if (!value) {
      goto LABEL_8;
    }
  }
  else
  {
    CFDictionarySetValue(a1, v6, value);
  }
  CFRelease(v7);
LABEL_8:
  if (v6) {
    CFRelease(v6);
  }
}

void sub_1C586FE74(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  int64_t v3 = va_arg(va1, const void *);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va1);
  _Unwind_Resume(a1);
}

void sub_1C586FE98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t ctu::cf::update<char const*,BOOL>(__CFDictionary *a1, const __CFString **a2, int a3, uint64_t a4, const __CFAllocator *a5)
{
  key = 0;
  ctu::cf::convert_copy((ctu::cf *)&key, a2, (const char *)0x8000100, a4, a5);
  int v7 = key;
  BOOL v8 = (void **)MEMORY[0x1E4F1CFD0];
  if (!a3) {
    BOOL v8 = (void **)MEMORY[0x1E4F1CFC8];
  }
  xpc_object_t v9 = *v8;
  key = *v8;
  if (v7) {
    BOOL v10 = v9 == 0;
  }
  else {
    BOOL v10 = 1;
  }
  uint64_t v11 = !v10;
  if (v10)
  {
    if (!v9) {
      goto LABEL_13;
    }
  }
  else
  {
    CFDictionarySetValue(a1, v7, v9);
  }
  CFRelease(v9);
LABEL_13:
  if (v7) {
    CFRelease(v7);
  }
  return v11;
}

void sub_1C586FF5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, const void *a10)
{
}

uint64_t _GLOBAL__sub_I_ResetInfo_cpp()
{
  uint64_t v74 = *MEMORY[0x1E4F143B8];
  __cxa_atexit((void (*)(void *))std::vector<ResetInfo::RegexPatternAndReasonMask>::~vector[abi:ne180100], &ResetInfo::sPatternMasks, &dword_1C5767000);
  char v6 = 15;
  strcpy((char *)v5, ".*\\[abmtool\\].*");
  v7[0] = 1;
  char v9 = 14;
  strcpy((char *)v8, ".*\\[bbutil\\].*");
  int v10 = 1;
  uint64_t v11 = operator new(0x50uLL);
  long long v12 = xmmword_1C59A1AC0;
  strcpy((char *)v11, ".*AP forced coredump via SPMI - Please analyze reason from AP perspective.*");
  int v13 = 1;
  long long v14 = operator new(0x19uLL);
  long long v15 = xmmword_1C599E880;
  strcpy((char *)v14, ".*(after OTASP/OTAPA).*");
  int v16 = 1;
  unint64_t v17 = operator new(0x38uLL);
  long long v18 = xmmword_1C59A1AD0;
  strcpy((char *)v17, ".*Carrier bundle updated settings that require reset");
  int v19 = 1;
  unint64_t v20 = operator new(0x28uLL);
  long long v21 = xmmword_1C599E860;
  strcpy((char *)v20, ".*Manually Triggering BB Core Dump");
  int v22 = 1;
  xpc_object_t v23 = operator new(0x28uLL);
  long long v24 = xmmword_1C59A1AE0;
  strcpy((char *)v23, ".*modem manager triggered reset.*");
  int v25 = 1;
  xpc_object_t v26 = operator new(0x38uLL);
  long long v27 = xmmword_1C59A1AF0;
  strcpy((char *)v26, ".*User requested to change Baseband field test config");
  int v28 = 1;
  int v29 = operator new(0x28uLL);
  uint64_t v30 = 33;
  unint64_t v31 = 0x8000000000000028;
  strcpy((char *)v29, ".*applebbproxy setup AT interface");
  int v32 = 1;
  uint64_t v33 = operator new(0x28uLL);
  uint64_t v34 = 36;
  unint64_t v35 = 0x8000000000000028;
  strcpy((char *)v33, ".*Resetting Baseband after restore.*");
  int v36 = 1;
  uint64_t v37 = operator new(0x30uLL);
  uint64_t v38 = 42;
  unint64_t v39 = 0x8000000000000030;
  strcpy((char *)v37, ".*Resetting baseband after pushing files.*");
  int v40 = 1;
  uint64_t v41 = operator new(0x40uLL);
  uint64_t v42 = 59;
  unint64_t v43 = 0x8000000000000040;
  strcpy((char *)v41, ".*Resetting Baseband after successful restore of carrier NV");
  int v44 = 1;
  long long v45 = operator new(0x30uLL);
  uint64_t v46 = 41;
  unint64_t v47 = 0x8000000000000030;
  strcpy((char *)v45, ".*Resetting modem from WirelessAutomation");
  int v48 = 1;
  long long v49 = operator new(0x20uLL);
  uint64_t v50 = 25;
  unint64_t v51 = 0x8000000000000020;
  strcpy((char *)v49, ".*Requesting Soft Reset.*");
  int v52 = 1;
  uint64_t v53 = operator new(0x30uLL);
  uint64_t v54 = 42;
  unint64_t v55 = 0x8000000000000030;
  strcpy((char *)v53, ".*AP-triggered((?!: locationd PDS).*|(.*))");
  int v56 = 1;
  unint64_t v59 = 0x8000000000000038;
  uint64_t v57 = operator new(0x38uLL);
  uint64_t v58 = 50;
  strcpy((char *)v57, ".*User ((requested state)|(Triggered Core))dump.*");
  int v60 = 1;
  HIBYTE(v61[2]) = 19;
  strcpy((char *)v61, ".*SIM APNs change.*");
  int v62 = 1;
  xpc_object_t v63 = operator new(0x28uLL);
  unint64_t v65 = 0x8000000000000028;
  uint64_t v64 = 34;
  strcpy((char *)v63, ".*AttachAPN Push to force detach.*");
  int v66 = 1;
  char v68 = 14;
  strcpy((char *)v67, ".*CSIM reset.*");
  int v69 = 1;
  std::string __p = operator new(0x20uLL);
  unint64_t v72 = 0x8000000000000020;
  uint64_t v71 = 25;
  strcpy((char *)__p, ".*com\\.apple\\.symptomsd.*");
  int v73 = 1;
  qword_1EBBDD728 = 0;
  qword_1EBBDD730 = 0;
  kDefaultPatternMasks = 0;
  v0 = (char *)operator new(0x280uLL);
  unint64_t v1 = 0;
  kDefaultPatternMasks = (uint64_t)v0;
  qword_1EBBDD728 = (uint64_t)v0;
  qword_1EBBDD730 = (uint64_t)(v0 + 640);
  do
  {
    uint64_t v2 = (std::string *)&v0[v1 * 4];
    int64_t v3 = &v5[v1 / 2];
    if (*(&v6 + v1 * 4) < 0)
    {
      std::string::__init_copy_ctor_external(v2, (const std::string::value_type *)*v3, (std::string::size_type)v3[1]);
    }
    else
    {
      *(_OWORD *)&v2->__r_.__value_.__l.__data_ = *(_OWORD *)v3;
      v2->__r_.__value_.__r.__words[2] = (std::string::size_type)v3[2];
    }
    *(_DWORD *)&v0[v1 * 4 + 24] = v7[v1];
    v1 += 8;
  }
  while (v1 != 160);
  qword_1EBBDD728 = (uint64_t)(v0 + 640);
  if (SHIBYTE(v72) < 0)
  {
    operator delete(__p);
    if ((v68 & 0x80000000) == 0)
    {
LABEL_8:
      if ((SHIBYTE(v65) & 0x80000000) == 0) {
        goto LABEL_9;
      }
      goto LABEL_31;
    }
  }
  else if ((v68 & 0x80000000) == 0)
  {
    goto LABEL_8;
  }
  operator delete(v67[0]);
  if ((SHIBYTE(v65) & 0x80000000) == 0)
  {
LABEL_9:
    if ((SHIBYTE(v61[2]) & 0x80000000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_32;
  }
LABEL_31:
  operator delete(v63);
  if ((SHIBYTE(v61[2]) & 0x80000000) == 0)
  {
LABEL_10:
    if ((SHIBYTE(v59) & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_33;
  }
LABEL_32:
  operator delete(v61[0]);
  if ((SHIBYTE(v59) & 0x80000000) == 0)
  {
LABEL_11:
    if ((SHIBYTE(v55) & 0x80000000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_34;
  }
LABEL_33:
  operator delete(v57);
  if ((SHIBYTE(v55) & 0x80000000) == 0)
  {
LABEL_12:
    if ((SHIBYTE(v51) & 0x80000000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_35;
  }
LABEL_34:
  operator delete(v53);
  if ((SHIBYTE(v51) & 0x80000000) == 0)
  {
LABEL_13:
    if ((SHIBYTE(v47) & 0x80000000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_36;
  }
LABEL_35:
  operator delete(v49);
  if ((SHIBYTE(v47) & 0x80000000) == 0)
  {
LABEL_14:
    if ((SHIBYTE(v43) & 0x80000000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_37;
  }
LABEL_36:
  operator delete(v45);
  if ((SHIBYTE(v43) & 0x80000000) == 0)
  {
LABEL_15:
    if ((SHIBYTE(v39) & 0x80000000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_38;
  }
LABEL_37:
  operator delete(v41);
  if ((SHIBYTE(v39) & 0x80000000) == 0)
  {
LABEL_16:
    if ((SHIBYTE(v35) & 0x80000000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_39;
  }
LABEL_38:
  operator delete(v37);
  if ((SHIBYTE(v35) & 0x80000000) == 0)
  {
LABEL_17:
    if ((SHIBYTE(v31) & 0x80000000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_40;
  }
LABEL_39:
  operator delete(v33);
  if ((SHIBYTE(v31) & 0x80000000) == 0)
  {
LABEL_18:
    if ((SHIBYTE(v27) & 0x80000000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_41;
  }
LABEL_40:
  operator delete(v29);
  if ((SHIBYTE(v27) & 0x80000000) == 0)
  {
LABEL_19:
    if ((SHIBYTE(v24) & 0x80000000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_42;
  }
LABEL_41:
  operator delete(v26);
  if ((SHIBYTE(v24) & 0x80000000) == 0)
  {
LABEL_20:
    if ((SHIBYTE(v21) & 0x80000000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_43;
  }
LABEL_42:
  operator delete(v23);
  if ((SHIBYTE(v21) & 0x80000000) == 0)
  {
LABEL_21:
    if ((SHIBYTE(v18) & 0x80000000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_44;
  }
LABEL_43:
  operator delete(v20);
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
LABEL_22:
    if ((SHIBYTE(v15) & 0x80000000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_45;
  }
LABEL_44:
  operator delete(v17);
  if ((SHIBYTE(v15) & 0x80000000) == 0)
  {
LABEL_23:
    if ((SHIBYTE(v12) & 0x80000000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_46;
  }
LABEL_45:
  operator delete(v14);
  if ((SHIBYTE(v12) & 0x80000000) == 0)
  {
LABEL_24:
    if ((v9 & 0x80000000) == 0) {
      goto LABEL_25;
    }
LABEL_47:
    operator delete(v8[0]);
    if ((v6 & 0x80000000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_48;
  }
LABEL_46:
  operator delete(v11);
  if (v9 < 0) {
    goto LABEL_47;
  }
LABEL_25:
  if ((v6 & 0x80000000) == 0) {
    goto LABEL_26;
  }
LABEL_48:
  operator delete(v5[0]);
LABEL_26:

  return __cxa_atexit((void (*)(void *))std::vector<ResetInfo::RegexPatternAndReasonMask>::~vector[abi:ne180100], &kDefaultPatternMasks, &dword_1C5767000);
}

void sub_1C5870770(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59,uint64_t a60,void *a61,uint64_t a62,int a63)
{
  std::__exception_guard_exceptions<std::vector<ResetInfo::RegexPatternAndReasonMask>::__destroy_vector>::~__exception_guard_exceptions[abi:ne180100](&a10);
  if (SLOBYTE(STACK[0x28F]) < 0)
  {
    operator delete((void *)STACK[0x278]);
    if ((SLOBYTE(STACK[0x26F]) & 0x80000000) == 0)
    {
LABEL_3:
      if ((SLOBYTE(STACK[0x24F]) & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_24;
    }
  }
  else if ((SLOBYTE(STACK[0x26F]) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete((void *)STACK[0x258]);
  if ((SLOBYTE(STACK[0x24F]) & 0x80000000) == 0)
  {
LABEL_4:
    if ((SLOBYTE(STACK[0x22F]) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_25;
  }
LABEL_24:
  operator delete((void *)STACK[0x238]);
  if ((SLOBYTE(STACK[0x22F]) & 0x80000000) == 0)
  {
LABEL_5:
    if ((SLOBYTE(STACK[0x20F]) & 0x80000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_26;
  }
LABEL_25:
  operator delete((void *)STACK[0x218]);
  if ((SLOBYTE(STACK[0x20F]) & 0x80000000) == 0)
  {
LABEL_6:
    if ((a84 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_27;
  }
LABEL_26:
  operator delete(a85);
  if ((a84 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a82 & 0x80000000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_28;
  }
LABEL_27:
  operator delete(a83);
  if ((a82 & 0x80000000) == 0)
  {
LABEL_8:
    if ((a80 & 0x80000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_29;
  }
LABEL_28:
  operator delete(a81);
  if ((a80 & 0x80000000) == 0)
  {
LABEL_9:
    if ((a78 & 0x80000000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_30;
  }
LABEL_29:
  operator delete(a79);
  if ((a78 & 0x80000000) == 0)
  {
LABEL_10:
    if ((a76 & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_31;
  }
LABEL_30:
  operator delete(a77);
  if ((a76 & 0x80000000) == 0)
  {
LABEL_11:
    if ((a74 & 0x80000000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_32;
  }
LABEL_31:
  operator delete(a75);
  if ((a74 & 0x80000000) == 0)
  {
LABEL_12:
    if ((a72 & 0x80000000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_33;
  }
LABEL_32:
  operator delete(a73);
  if ((a72 & 0x80000000) == 0)
  {
LABEL_13:
    if ((a66 & 0x80000000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_34;
  }
LABEL_33:
  operator delete(a68);
  if ((a66 & 0x80000000) == 0)
  {
LABEL_14:
    if ((a59 & 0x80000000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_35;
  }
LABEL_34:
  operator delete(a61);
  if ((a59 & 0x80000000) == 0)
  {
LABEL_15:
    if ((a52 & 0x80000000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_36;
  }
LABEL_35:
  operator delete(a54);
  if ((a52 & 0x80000000) == 0)
  {
LABEL_16:
    if ((a45 & 0x80000000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_37;
  }
LABEL_36:
  operator delete(a47);
  if ((a45 & 0x80000000) == 0)
  {
LABEL_17:
    if ((a38 & 0x80000000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_38;
  }
LABEL_37:
  operator delete(a40);
  if ((a38 & 0x80000000) == 0)
  {
LABEL_18:
    if ((a31 & 0x80000000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_39;
  }
LABEL_38:
  operator delete(a33);
  if ((a31 & 0x80000000) == 0)
  {
LABEL_19:
    if ((a24 & 0x80000000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_40;
  }
LABEL_39:
  operator delete(a26);
  if ((a24 & 0x80000000) == 0)
  {
LABEL_20:
    if ((a17 & 0x80000000) == 0) {
LABEL_42:
    }
      _Unwind_Resume(a1);
LABEL_41:
    operator delete(a12);
    _Unwind_Resume(a1);
  }
LABEL_40:
  operator delete(a19);
  if ((a17 & 0x80000000) == 0) {
    goto LABEL_42;
  }
  goto LABEL_41;
}

uint64_t abm::stats::typeAsString@<X0>(uint64_t result@<X0>, char *a2@<X8>)
{
  if (result)
  {
    strcpy(a2, "UNKNOWN");
    a2[23] = 7;
  }
  else
  {
    strcpy(a2, "Boot Statistics");
    a2[23] = 15;
  }
  return result;
}

void ResetDetection::create(NSObject **a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  *a4 = 0xAAAAAAAAAAAAAAAALL;
  a4[1] = 0xAAAAAAAAAAAAAAAALL;
  BOOL v8 = operator new(0xB8uLL);
  char v9 = *a1;
  dispatch_object_t object = v9;
  if (v9) {
    dispatch_retain(v9);
  }
  int v10 = (std::__shared_weak_count *)a2[1];
  uint64_t v12 = *a2;
  int v13 = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  ResetDetection::ResetDetection((uint64_t)v8, &object, &v12, a3);
  *a4 = 0xAAAAAAAAAAAAAAAALL;
  a4[1] = 0xAAAAAAAAAAAAAAAALL;
  std::shared_ptr<ResetDetection>::shared_ptr[abi:ne180100]<ResetDetection,std::shared_ptr<ResetDetection> ctu::SharedSynchronizable<ResetDetection>::make_shared_ptr<ResetDetection>(ResetDetection*)::{lambda(ResetDetection*)#1},void>(a4, (uint64_t)v8);
  ctu::Loggable<ResetDetection,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(*a4);
  uint64_t v11 = v13;
  if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  if (object) {
    dispatch_release(object);
  }
}

void sub_1C5870B30(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v3);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  if (v2) {
    dispatch_release(v2);
  }
  _Unwind_Resume(a1);
}

uint64_t ResetDetection::ResetDetection(uint64_t a1, NSObject **a2, void *a3, uint64_t a4)
{
  *(void *)a1 = &unk_1F20F8860;
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v10, "com.apple.telephony.abm", "reset.detect");
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  BOOL v8 = *a2;
  *(void *)(a1 + 88) = *a2;
  if (v8) {
    dispatch_retain(v8);
  }
  *(void *)(a1 + 96) = 0;
  ctu::Loggable<ResetDetection,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::Loggable<ctu::OsLogContext,std::shared_ptr<ctu::LogServer>&>((void *)a1, (uint64_t)v10, a3);
  *(void *)a1 = &unk_1F20F8A20;
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v10);
  *(void *)a1 = &unk_1F20F8860;
  *(void *)(a1 + 104) = a4;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = TelephonyBasebandCreateController();
  *(_DWORD *)(a1 + 128) = 2;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 136) = a1 + 144;
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 160) = a1 + 168;
  return a1;
}

void sub_1C5870C90(_Unwind_Exception *a1)
{
  ctu::SharedLoggable<ResetDetection,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(v1);
  _Unwind_Resume(a1);
}

void sub_1C5870CA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  ctu::SharedSynchronizable<DataStallDetection>::~SharedSynchronizable(v9);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&a9);
  _Unwind_Resume(a1);
}

const char *ResetDetection::getName(ResetDetection *this)
{
  return "reset.detect";
}

void *ctu::SharedLoggable<ResetDetection,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(void *a1)
{
  *a1 = &unk_1F20F8990;
  MEMORY[0x1C8790F40](a1 + 1);
  uint64_t v2 = a1[12];
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = a1[11];
  if (v3) {
    dispatch_release(v3);
  }
  int v4 = (std::__shared_weak_count *)a1[10];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = &unk_1F20F8990;
  MEMORY[0x1C8790F40](a1 + 1);
  uint64_t v2 = a1[12];
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = a1[11];
  if (v3) {
    dispatch_release(v3);
  }
  int v4 = (std::__shared_weak_count *)a1[10];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

void ResetDetection::~ResetDetection(ResetDetection *this)
{
  *(void *)this = &unk_1F20F8860;
  uint64_t v2 = (const void *)*((void *)this + 15);
  *((void *)this + 15) = 0;
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = (__CFRunLoop *)*((void *)this + 13);
  uint64_t v4 = *((void *)this + 14);
  *((void *)this + 14) = 0;
  long long v5 = (const void *)*MEMORY[0x1E4F1D418];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = ___ZN14ResetDetectionD2Ev_block_invoke;
  block[3] = &__block_descriptor_tmp_13;
  block[4] = v4;
  CFRunLoopPerformBlock(v3, v5, block);
  CFRunLoopWakeUp(*((CFRunLoopRef *)this + 13));
  std::__tree<std::__value_type<std::string,std::pair<dispatch_source_s *,dispatch::block<void({block_pointer})(int)>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<dispatch_source_s *,dispatch::block<void({block_pointer})(int)>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<dispatch_source_s *,dispatch::block<void({block_pointer})(int)>>>>>::destroy(*((char **)this + 21));
  std::__tree<std::__value_type<std::string,std::pair<dispatch_source_s *,dispatch::block<void({block_pointer})(int)>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<dispatch_source_s *,dispatch::block<void({block_pointer})(int)>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<dispatch_source_s *,dispatch::block<void({block_pointer})(int)>>>>>::destroy(*((char **)this + 18));
  char v6 = (const void *)*((void *)this + 15);
  if (v6) {
    CFRelease(v6);
  }
  *(void *)this = &unk_1F20F8990;
  MEMORY[0x1C8790F40]((char *)this + 8);
  int v7 = *((void *)this + 12);
  if (v7) {
    dispatch_release(v7);
  }
  BOOL v8 = *((void *)this + 11);
  if (v8) {
    dispatch_release(v8);
  }
  char v9 = (std::__shared_weak_count *)*((void *)this + 10);
  if (v9) {
    std::__shared_weak_count::__release_weak(v9);
  }
}

{
  void *v1;
  uint64_t vars8;

  ResetDetection::~ResetDetection(this);

  operator delete(v1);
}

void ___ZN14ResetDetectionD2Ev_block_invoke(uint64_t a1)
{
  unint64_t v1 = *(void **)(a1 + 32);
  if (v1)
  {
    uint64_t v2 = (std::__shared_weak_count *)v1[1];
    if (v2) {
      std::__shared_weak_count::__release_weak(v2);
    }
    operator delete(v1);
  }
}

void ResetDetection::start(ResetDetection *this)
{
  v1[0] = MEMORY[0x1E4F143A8];
  v1[1] = 0x40000000;
  v1[2] = ___ZN14ResetDetection5startEv_block_invoke;
  v1[3] = &__block_descriptor_tmp_3;
  v1[4] = this;
  ctu::SharedSynchronizable<ResetDetection>::execute_wrapped((uint64_t *)this + 9, (uint64_t)v1);
}

void ___ZN14ResetDetection5startEv_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(NSObject **)(v1 + 40);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1C5767000, v2, OS_LOG_TYPE_DEFAULT, "#I Started", buf, 2u);
  }
  uint64_t v3 = operator new(0x10uLL);
  uint64_t v4 = *(std::__shared_weak_count **)(v1 + 80);
  if (!v4 || (v5 = *(void *)(v1 + 72), (char v6 = std::__shared_weak_count::lock(v4)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  int v7 = v6;
  *uint64_t v3 = v5;
  v3[1] = v6;
  atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  *(void *)(v1 + 112) = v3;
  if (atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (TelephonyBasebandRegisterForReset()) {
      goto LABEL_10;
    }
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v7);
    if (TelephonyBasebandRegisterForReset()) {
      goto LABEL_10;
    }
  }
  BOOL v8 = *(NSObject **)(v1 + 40);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)uint64_t v12 = 0;
    _os_log_error_impl(&dword_1C5767000, v8, OS_LOG_TYPE_ERROR, "failed registering for reset detect", v12, 2u);
    if (*(void *)(v1 + 120)) {
      uint64_t v11 = ctu::SharedRef<__TelephonyBasebandControllerHandle_tag,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__TelephonyBasebandControllerHandle_tag>::get;
    }
    else {
      uint64_t v11 = 0;
    }
    if (v11) {
      goto LABEL_14;
    }
    return;
  }
LABEL_10:
  if (*(void *)(v1 + 120)) {
    char v9 = ctu::SharedRef<__TelephonyBasebandControllerHandle_tag,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__TelephonyBasebandControllerHandle_tag>::get;
  }
  else {
    char v9 = 0;
  }
  if (v9)
  {
LABEL_14:
    unsigned __int8 v15 = 1;
    if (TelephonyBasebandGetReset())
    {
      *(_DWORD *)(v1 + 128) = v15;
    }
    else
    {
      int v10 = *(NSObject **)(v1 + 40);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)long long v14 = 0;
        _os_log_error_impl(&dword_1C5767000, v10, OS_LOG_TYPE_ERROR, "failed to poll for reset detect", v14, 2u);
      }
    }
  }
}

void sub_1C5871174(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t ctu::SharedRef<__TelephonyBasebandControllerHandle_tag,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__TelephonyBasebandControllerHandle_tag>::get(uint64_t a1)
{
  return *(void *)a1;
}

void ResetDetection::sResetDetectCallback(ResetDetection *this, void *a2, int a3, unsigned int a4, void *a5)
{
  if (this)
  {
    uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 1);
    if (v5)
    {
      uint64_t v7 = *(void *)this;
      atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      BOOL v8 = std::__shared_weak_count::lock(v5);
      if (v8)
      {
        char v9 = v8;
        if (v7)
        {
          v10[0] = MEMORY[0x1E4F143A8];
          v10[1] = 0x40000000;
          v10[2] = ___ZN14ResetDetection19resetDetectCallbackEPvjjS0__block_invoke;
          void v10[3] = &__block_descriptor_tmp_6_1;
          v10[4] = v7;
          int v11 = a3;
          ctu::SharedSynchronizable<ResetDetection>::execute_wrapped((uint64_t *)(v7 + 72), (uint64_t)v10);
        }
        if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

uint64_t ResetDetection::poll(ResetDetection *this, BOOL *a2)
{
  if (*((void *)this + 15)) {
    uint64_t v3 = ctu::SharedRef<__TelephonyBasebandControllerHandle_tag,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__TelephonyBasebandControllerHandle_tag>::get;
  }
  else {
    uint64_t v3 = 0;
  }
  if (!v3) {
    return 0;
  }
  BOOL v9 = 1;
  uint64_t Reset = TelephonyBasebandGetReset();
  if (Reset)
  {
    *a2 = v9;
    return Reset;
  }
  uint64_t v7 = *((void *)this + 5);
  if (!os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
    return Reset;
  }
  *(_WORD *)BOOL v8 = 0;
  _os_log_error_impl(&dword_1C5767000, v7, OS_LOG_TYPE_ERROR, "failed to poll for reset detect", v8, 2u);
  return Reset;
}

void ResetDetection::add(uint64_t a1, uint64_t a2, char a3, void **a4, uint64_t a5)
{
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 1174405120;
  v10[2] = ___ZN14ResetDetection3addENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEbN8dispatch5blockIU13block_pointerFviEEEy_block_invoke;
  void v10[3] = &__block_descriptor_tmp_4_3;
  v10[4] = a1;
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    char v14 = a3;
    BOOL v9 = *a4;
    if (!*a4) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  std::string __p = *(std::string *)a2;
  char v14 = a3;
  BOOL v9 = *a4;
  if (*a4) {
LABEL_5:
  }
    BOOL v9 = _Block_copy(v9);
LABEL_6:
  aBlock = v9;
  uint64_t v13 = a5;
  ctu::SharedSynchronizable<ResetDetection>::execute_wrapped((uint64_t *)(a1 + 72), (uint64_t)v10);
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void ___ZN14ResetDetection3addENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEbN8dispatch5blockIU13block_pointerFviEEEy_block_invoke(uint64_t a1)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(NSObject **)(v2 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = (void *)(a1 + 40);
    if (*(char *)(a1 + 63) < 0) {
      uint64_t v4 = (void *)*v4;
    }
    int v5 = *(unsigned __int8 *)(a1 + 80);
    *(_DWORD *)buf = 136315394;
    int v25 = v4;
    __int16 v26 = 1024;
    int v27 = v5;
    _os_log_impl(&dword_1C5767000, v3, OS_LOG_TYPE_DEFAULT, "#I Added detection with key '%s', reset=%d", buf, 0x12u);
  }
  int v6 = *(_DWORD *)(v2 + 128);
  int v7 = *(unsigned __int8 *)(a1 + 80);
  if (v6)
  {
    if (v6 != 2)
    {
      BOOL v8 = v6 != 1 || v7 == 0;
      BOOL v9 = !v8;
      BOOL v10 = v6 | v7 || v6 == 1;
      BOOL v11 = !v10 && v7 == 0;
      if (v11 || v9) {
        goto LABEL_28;
      }
    }
  }
  else if (!*(unsigned char *)(a1 + 80))
  {
LABEL_28:
    (*(void (**)(void))(*(void *)(a1 + 64) + 16))();
    return;
  }
  uint64_t v13 = (_OWORD *)(a1 + 40);
  int v14 = *(char *)(a1 + 63);
  if (*(unsigned char *)(a1 + 80))
  {
    if (v14 < 0)
    {
      std::string::__init_copy_ctor_external(&v23, *(const std::string::value_type **)(a1 + 40), *(void *)(a1 + 48));
    }
    else
    {
      *(_OWORD *)&v23.__r_.__value_.__l.__data_ = *v13;
      v23.__r_.__value_.__r.__words[2] = *(void *)(a1 + 56);
    }
    unsigned __int8 v15 = *(const void **)(a1 + 64);
    if (v15) {
      int v16 = _Block_copy(v15);
    }
    else {
      int v16 = 0;
    }
    int v22 = v16;
    ResetDetection::addToBlocks_sync(v2, (uint64_t)&v23, &v22, (uint64_t **)(v2 + 136), *(void *)(a1 + 72));
    if (v16) {
      _Block_release(v16);
    }
    if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
    {
      unint64_t v17 = (void *)v23.__r_.__value_.__r.__words[0];
LABEL_47:
      operator delete(v17);
    }
  }
  else
  {
    if (v14 < 0)
    {
      std::string::__init_copy_ctor_external(&v21, *(const std::string::value_type **)(a1 + 40), *(void *)(a1 + 48));
    }
    else
    {
      *(_OWORD *)&v21.__r_.__value_.__l.__data_ = *v13;
      v21.__r_.__value_.__r.__words[2] = *(void *)(a1 + 56);
    }
    long long v18 = *(const void **)(a1 + 64);
    if (v18) {
      int v19 = _Block_copy(v18);
    }
    else {
      int v19 = 0;
    }
    unint64_t v20 = v19;
    ResetDetection::addToBlocks_sync(v2, (uint64_t)&v21, &v20, (uint64_t **)(v2 + 160), *(void *)(a1 + 72));
    if (v19) {
      _Block_release(v19);
    }
    if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    {
      unint64_t v17 = (void *)v21.__r_.__value_.__r.__words[0];
      goto LABEL_47;
    }
  }
}

void sub_1C58716BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void ResetDetection::addToBlocks_sync(uint64_t a1, uint64_t a2, void **a3, uint64_t **a4, dispatch_time_t a5)
{
  BOOL v10 = dispatch_source_create(MEMORY[0x1E4F14490], 1uLL, 0, *(dispatch_queue_t *)(a1 + 88));
  dispatch_source_set_timer(v10, a5, 0xFFFFFFFFFFFFFFFFLL, 0x5F5E100uLL);
  BOOL v11 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v11 || (v12 = *(void *)(a1 + 72), (uint64_t v13 = std::__shared_weak_count::lock(v11)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  int v14 = v13;
  p_shared_weak_owners = &v13->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v13->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v14);
  }
  handler[0] = MEMORY[0x1E4F143A8];
  handler[1] = 1174405120;
  handler[2] = ___ZN14ResetDetection16addToBlocks_syncENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEN8dispatch5blockIU13block_pointerFviEEERNS0_3mapIS6_NS0_4pairIP17dispatch_source_sSB_EENS0_4lessIS6_EENS4_INSD_IKS6_SG_EEEEEEy_block_invoke;
  handler[3] = &__block_descriptor_tmp_5_13;
  handler[4] = a1;
  handler[5] = v12;
  unint64_t v39 = v14;
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  int v40 = a4;
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string __p = *(std::string *)a2;
  }
  dispatch_source_set_event_handler(v10, handler);
  dispatch_activate(v10);
  int v16 = *a3;
  if (*a3) {
    int v16 = _Block_copy(v16);
  }
  uint64_t v37 = (uint64_t *)v16;
  long long v18 = a4 + 1;
  unint64_t v17 = a4[1];
  if (v17)
  {
    int v19 = *(char *)(a2 + 23);
    if (v19 >= 0) {
      unint64_t v20 = (const std::string::value_type *)a2;
    }
    else {
      unint64_t v20 = *(const std::string::value_type **)a2;
    }
    if (v19 >= 0) {
      size_t v21 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      size_t v21 = *(void *)(a2 + 8);
    }
    while (1)
    {
      int v22 = (uint64_t **)v17;
      int v25 = (const void *)v17[4];
      std::string v23 = v17 + 4;
      long long v24 = v25;
      int v26 = *((char *)v23 + 23);
      if (v26 >= 0) {
        int v27 = v23;
      }
      else {
        int v27 = v24;
      }
      if (v26 >= 0) {
        size_t v28 = *((unsigned __int8 *)v23 + 23);
      }
      else {
        size_t v28 = v23[1];
      }
      if (v28 >= v21) {
        size_t v29 = v21;
      }
      else {
        size_t v29 = v28;
      }
      int v30 = memcmp(v20, v27, v29);
      if (v30)
      {
        if (v30 < 0) {
          goto LABEL_17;
        }
LABEL_31:
        int v31 = memcmp(v27, v20, v29);
        if (v31)
        {
          if ((v31 & 0x80000000) == 0) {
            goto LABEL_45;
          }
        }
        else if (v28 >= v21)
        {
LABEL_45:
          int v36 = v22[8];
          v22[7] = (uint64_t *)v10;
          v22[8] = v37;
          if (v36) {
            goto LABEL_46;
          }
          goto LABEL_47;
        }
        unint64_t v17 = v22[1];
        if (!v17)
        {
          long long v18 = v22 + 1;
          goto LABEL_38;
        }
      }
      else
      {
        if (v21 >= v28) {
          goto LABEL_31;
        }
LABEL_17:
        unint64_t v17 = *v22;
        long long v18 = v22;
        if (!*v22) {
          goto LABEL_38;
        }
      }
    }
  }
  int v22 = a4 + 1;
LABEL_38:
  int v32 = operator new(0x48uLL);
  uint64_t v33 = (std::string *)(v32 + 4);
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v33, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&v33->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    v32[6] = *(void *)(a2 + 16);
  }
  v32[7] = 0;
  v32[8] = 0;
  void *v32 = 0;
  v32[1] = 0;
  v32[2] = v22;
  *long long v18 = v32;
  uint64_t v34 = (uint64_t *)**a4;
  unint64_t v35 = v32;
  if (v34)
  {
    *a4 = v34;
    unint64_t v35 = *v18;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a4[1], v35);
  a4[2] = (uint64_t *)((char *)a4[2] + 1);
  int v36 = (uint64_t *)v32[8];
  v32[7] = v10;
  v32[8] = v37;
  if (v36) {
LABEL_46:
  }
    _Block_release(v36);
LABEL_47:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v39) {
    std::__shared_weak_count::__release_weak(v39);
  }
  std::__shared_weak_count::__release_weak(v14);
}

void sub_1C5871A60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  operator delete(v26);
  std::pair<dispatch_source_s *,dispatch::block<void({block_pointer})(int)>>::~pair((uint64_t)&a10);
  if (a25 < 0)
  {
    operator delete(__p);
    size_t v28 = a18;
    if (a18) {
      goto LABEL_3;
    }
  }
  else
  {
    size_t v28 = a18;
    if (a18)
    {
LABEL_3:
      std::__shared_weak_count::__release_weak(v28);
      std::__shared_weak_count::__release_weak(v25);
      _Unwind_Resume(a1);
    }
  }
  std::__shared_weak_count::__release_weak(v25);
  _Unwind_Resume(a1);
}

void *__copy_helper_block_e8_40c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE64c43_ZTSN8dispatch5blockIU13block_pointerFviEEE(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (std::string *)(a1 + 40);
  if ((*(char *)(a2 + 63) & 0x80000000) == 0)
  {
    long long v5 = *(_OWORD *)(a2 + 40);
    v4->__r_.__value_.__r.__words[2] = *(void *)(a2 + 56);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
    uint64_t result = *(void **)(a2 + 64);
    if (!result) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)(a2 + 40), *(void *)(a2 + 48));
  uint64_t result = *(void **)(a2 + 64);
  if (result) {
LABEL_5:
  }
    uint64_t result = _Block_copy(result);
LABEL_6:
  *(void *)(a1 + 64) = result;
  return result;
}

void __destroy_helper_block_e8_40c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE64c43_ZTSN8dispatch5blockIU13block_pointerFviEEE(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 64);
  if (v2) {
    _Block_release(v2);
  }
  if (*(char *)(a1 + 63) < 0)
  {
    uint64_t v3 = *(void **)(a1 + 40);
    operator delete(v3);
  }
}

void ___ZN14ResetDetection16addToBlocks_syncENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEN8dispatch5blockIU13block_pointerFviEEERNS0_3mapIS6_NS0_4pairIP17dispatch_source_sSB_EENS0_4lessIS6_EENS4_INSD_IKS6_SG_EEEEEEy_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (!v2) {
    return;
  }
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = std::__shared_weak_count::lock(v2);
  if (!v4) {
    return;
  }
  long long v5 = v4;
  if (!*(void *)(a1 + 40)) {
    goto LABEL_54;
  }
  uint64_t v6 = *(void *)(a1 + 56);
  BOOL v9 = *(uint64_t ***)(v6 + 8);
  int v7 = (uint64_t *)(v6 + 8);
  BOOL v8 = v9;
  if (!v9) {
    goto LABEL_54;
  }
  int v10 = *(char *)(a1 + 87);
  if (v10 >= 0) {
    BOOL v11 = (const void *)(a1 + 64);
  }
  else {
    BOOL v11 = *(const void **)(a1 + 64);
  }
  if (v10 >= 0) {
    size_t v12 = *(unsigned __int8 *)(a1 + 87);
  }
  else {
    size_t v12 = *(void *)(a1 + 72);
  }
  uint64_t v13 = v7;
  do
  {
    while (1)
    {
      int v14 = *((char *)v8 + 55);
      unsigned __int8 v15 = v14 >= 0 ? (uint64_t *)(v8 + 4) : v8[4];
      size_t v16 = v14 >= 0 ? *((unsigned __int8 *)v8 + 55) : (size_t)v8[5];
      size_t v17 = v12 >= v16 ? v16 : v12;
      int v18 = memcmp(v15, v11, v17);
      if (v18) {
        break;
      }
      if (v16 >= v12) {
        goto LABEL_26;
      }
LABEL_12:
      BOOL v8 = (uint64_t **)v8[1];
      if (!v8) {
        goto LABEL_27;
      }
    }
    if (v18 < 0) {
      goto LABEL_12;
    }
LABEL_26:
    uint64_t v13 = (uint64_t *)v8;
    BOOL v8 = (uint64_t **)*v8;
  }
  while (v8);
LABEL_27:
  if (v13 != v7)
  {
    int v19 = *((char *)v13 + 55);
    if (v19 >= 0) {
      unint64_t v20 = v13 + 4;
    }
    else {
      unint64_t v20 = (const void *)v13[4];
    }
    if (v19 >= 0) {
      size_t v21 = *((unsigned __int8 *)v13 + 55);
    }
    else {
      size_t v21 = v13[5];
    }
    if (v21 >= v12) {
      size_t v22 = v12;
    }
    else {
      size_t v22 = v21;
    }
    int v23 = memcmp(v11, v20, v22);
    if (v23)
    {
      if (v23 < 0) {
        goto LABEL_54;
      }
LABEL_41:
      ResetDetection::invokeBlock_sync(v3, (uint64_t)(v13 + 4), 3760250883);
      long long v24 = *(uint64_t ***)(a1 + 56);
      int v25 = (uint64_t *)v13[1];
      if (v25)
      {
        do
        {
          int v26 = v25;
          int v25 = (uint64_t *)*v25;
        }
        while (v25);
      }
      else
      {
        int v27 = v13;
        do
        {
          int v26 = (uint64_t *)v27[2];
          BOOL v28 = *v26 == (void)v27;
          int v27 = v26;
        }
        while (!v28);
      }
      if (*v24 == v13) {
        *long long v24 = v26;
      }
      size_t v29 = v24[1];
      v24[2] = (uint64_t *)((char *)v24[2] - 1);
      std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v29, v13);
      int v30 = (const void *)v13[8];
      if (v30) {
        _Block_release(v30);
      }
      if (*((char *)v13 + 55) < 0) {
        operator delete((void *)v13[4]);
      }
      operator delete(v13);
    }
    else if (v12 >= v21)
    {
      goto LABEL_41;
    }
  }
LABEL_54:
  if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void sub_1C5871DE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void ResetDetection::invokeBlock_sync(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  memset(&__p, 170, sizeof(__p));
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string __p = *(std::string *)a2;
  }
  int v7 = *(NSObject **)(a2 + 24);
  uint64_t v6 = *(const void **)(a2 + 32);
  if (v6)
  {
    BOOL v8 = (void (**)(void *, void))_Block_copy(v6);
    *(void *)(a2 + 24) = 0;
    if (!v7) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  BOOL v8 = 0;
  *(void *)(a2 + 24) = 0;
  if (v7)
  {
LABEL_6:
    dispatch_source_cancel(v7);
    dispatch_release(v7);
  }
LABEL_7:
  BOOL v9 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    p_p = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)buf = 136315138;
    uint64_t v13 = p_p;
    _os_log_impl(&dword_1C5767000, v9, OS_LOG_TYPE_DEFAULT, "#I Signalling %s", buf, 0xCu);
  }
  v8[2](v8, a3);
  _Block_release(v8);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1C5871F60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void __copy_helper_block_e8_40c39_ZTSNSt3__18weak_ptrI14ResetDetectionEE64c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(void *a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 48);
  a1[5] = *(void *)(a2 + 40);
  a1[6] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = (std::string *)(a1 + 8);
  if (*(char *)(a2 + 87) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)(a2 + 64), *(void *)(a2 + 72));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 64);
    a1[10] = *(void *)(a2 + 80);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  }
}

void sub_1C5872014(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 48);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_40c39_ZTSNSt3__18weak_ptrI14ResetDetectionEE64c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1)
{
  if (*(char *)(a1 + 87) < 0)
  {
    operator delete(*(void **)(a1 + 64));
    uint64_t v2 = *(std::__shared_weak_count **)(a1 + 48);
    if (!v2) {
      return;
    }
  }
  else
  {
    uint64_t v2 = *(std::__shared_weak_count **)(a1 + 48);
    if (!v2) {
      return;
    }
  }

  std::__shared_weak_count::__release_weak(v2);
}

uint64_t std::pair<dispatch_source_s *,dispatch::block<void({block_pointer})(int)>>::~pair(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 8);
  if (v2) {
    _Block_release(v2);
  }
  return a1;
}

void ResetDetection::notifyResetDetectBlocks_sync(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = &v15;
  uint64_t v4 = *(char **)(a2 + 8);
  unsigned __int8 v15 = *(void **)a2;
  v16[0] = v4;
  uint64_t v5 = *(void *)(a2 + 16);
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 8) = 0;
  v16[1] = v5;
  if (v5) {
    uint64_t v3 = v4 + 16;
  }
  *uint64_t v3 = v16;
  *(void *)a2 = a2 + 8;
  uint64_t v6 = v15;
  if (v15 != v16)
  {
    while (1)
    {
      aBlock = (void *)0xAAAAAAAAAAAAAAAALL;
      *(void *)&long long v7 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
      *(_OWORD *)std::string __p = v7;
      long long v13 = v7;
      if (*((char *)v6 + 55) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)__p, (const std::string::value_type *)v6[4], v6[5]);
      }
      else
      {
        *(_OWORD *)std::string __p = *((_OWORD *)v6 + 2);
        *(void *)&long long v13 = v6[6];
      }
      BOOL v8 = (void *)v6[8];
      *((void *)&v13 + 1) = v6[7];
      if (v8) {
        BOOL v8 = _Block_copy(v8);
      }
      aBlock = v8;
      ResetDetection::invokeBlock_sync(a1, (uint64_t)__p, 0);
      if (aBlock) {
        _Block_release(aBlock);
      }
      if (SBYTE7(v13) < 0)
      {
        operator delete(__p[0]);
        BOOL v9 = (void *)v6[1];
        if (v9)
        {
          do
          {
LABEL_17:
            int v10 = v9;
            BOOL v9 = (void *)*v9;
          }
          while (v9);
          goto LABEL_5;
        }
      }
      else
      {
        BOOL v9 = (void *)v6[1];
        if (v9) {
          goto LABEL_17;
        }
      }
      do
      {
        int v10 = (void *)v6[2];
        BOOL v11 = *v10 == (void)v6;
        uint64_t v6 = v10;
      }
      while (!v11);
LABEL_5:
      uint64_t v6 = v10;
      if (v10 == v16)
      {
        uint64_t v4 = (char *)v16[0];
        break;
      }
    }
  }
  std::__tree<std::__value_type<std::string,std::pair<dispatch_source_s *,dispatch::block<void({block_pointer})(int)>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<dispatch_source_s *,dispatch::block<void({block_pointer})(int)>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<dispatch_source_s *,dispatch::block<void({block_pointer})(int)>>>>>::destroy(v4);
}

void sub_1C5872204(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char *a15)
{
}

void sub_1C5872220(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char *a15)
{
}

uint64_t std::pair<std::string const,std::pair<dispatch_source_s *,dispatch::block<void({block_pointer})(int)>>>::~pair(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 32);
  if (v2) {
    _Block_release(v2);
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void ResetDetection::resetDetectCallback(ResetDetection *this, void *a2, unsigned int a3, int a4, void *a5)
{
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 0x40000000;
  v5[2] = ___ZN14ResetDetection19resetDetectCallbackEPvjjS0__block_invoke;
  v5[3] = &__block_descriptor_tmp_6_1;
  v5[4] = this;
  int v6 = a4;
  ctu::SharedSynchronizable<ResetDetection>::execute_wrapped((uint64_t *)this + 9, (uint64_t)v5);
}

void ___ZN14ResetDetection19resetDetectCallbackEPvjjS0__block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  int v2 = *(_DWORD *)(a1 + 40);
  if (v2 == -469794815)
  {
    uint64_t v5 = *(NSObject **)(v1 + 40);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(state.opaque[0]) = 0;
      _os_log_impl(&dword_1C5767000, v5, OS_LOG_TYPE_DEFAULT, "#I baseband alive detected", (uint8_t *)&state, 2u);
    }
    *(_DWORD *)(v1 + 128) = 0;
    ResetDetection::notifyResetDetectBlocks_sync(v1, v1 + 160);
  }
  else if (v2 == -469794816)
  {
    uint64_t v3 = _os_activity_create(&dword_1C5767000, "Baseband state: reset detected", MEMORY[0x1E4F144F0], OS_ACTIVITY_FLAG_DEFAULT);
    state.opaque[1] = 0xAAAAAAAAAAAAAAAALL;
    state.opaque[0] = 0xAAAAAAAAAAAAAAAALL;
    os_activity_scope_enter(v3, &state);
    os_activity_scope_leave(&state);
    uint64_t v4 = *(NSObject **)(v1 + 40);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(state.opaque[0]) = 0;
      _os_log_impl(&dword_1C5767000, v4, OS_LOG_TYPE_DEFAULT, "#I baseband reset detected", (uint8_t *)&state, 2u);
    }
    *(_DWORD *)(v1 + 128) = 1;
    ResetDetection::notifyResetDetectBlocks_sync(v1, v1 + 136);
    if (v3) {
      os_release(v3);
    }
  }
}

void sub_1C587245C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ctu::os::scoped_activity::~scoped_activity((void **)va);
  _Unwind_Resume(a1);
}

uint64_t ctu::Loggable<ResetDetection,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig(uint64_t a1)
{
  return MEMORY[0x1F417DA50](a1 + 8);
}

void ctu::Loggable<ResetDetection,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName(char *a1@<X8>)
{
  a1[23] = 12;
  strcpy(a1, "reset.detect");
}

uint64_t ctu::Loggable<ResetDetection,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return MEMORY[0x1F417DD10](a1 + 8);
}

void *ctu::Loggable<ResetDetection,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_1F20F8990;
  MEMORY[0x1C8790F40](a1 + 1);
  return a1;
}

void ctu::Loggable<ResetDetection,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_1F20F8990;
  MEMORY[0x1C8790F40](a1 + 1);

  operator delete(a1);
}

void ctu::Loggable<ResetDetection,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(uint64_t a1)
{
  uint64_t v1 = a1 + 56;
  if (*(void *)(a1 + 56))
  {
    if (!*(void *)(a1 + 80) || (int v2 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(a1 + 80))) == 0) {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    uint64_t v3 = v2;
    ctu::LoggerCommonBase::getLogDomain((ctu::LoggerCommonBase *)(v1 - 48));
    ctu::TrackedLogger::registerLoggerToServer();
    if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_1C5872668(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

void sub_1C5872684(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void *std::shared_ptr<ResetDetection>::shared_ptr[abi:ne180100]<ResetDetection,std::shared_ptr<ResetDetection> ctu::SharedSynchronizable<ResetDetection>::make_shared_ptr<ResetDetection>(ResetDetection*)::{lambda(ResetDetection*)#1},void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  uint64_t v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = &v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20F89D0;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)a2;
  a1[1] = v4;
  if (!a2) {
    return a1;
  }
  int v6 = *(std::__shared_weak_count **)(a2 + 80);
  if (v6)
  {
    if (v6->__shared_owners_ == -1)
    {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      *(void *)(a2 + 72) = a2;
      *(void *)(a2 + 80) = v4;
      std::__shared_weak_count::__release_weak(v6);
      if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
        goto LABEL_8;
      }
    }
    return a1;
  }
  atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  *(void *)(a2 + 72) = a2;
  *(void *)(a2 + 80) = v4;
  if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
LABEL_8:
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void sub_1C58727B0(void *a1)
{
  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[11], v1, (dispatch_function_t)std::shared_ptr<ResetDetection> ctu::SharedSynchronizable<ResetDetection>::make_shared_ptr<ResetDetection>(ResetDetection*)::{lambda(ResetDetection*)#1}::operator() const(ResetDetection*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_1C58727D8(_Unwind_Exception *a1)
{
}

void std::__shared_ptr_pointer<ResetDetection *,std::shared_ptr<ResetDetection> ctu::SharedSynchronizable<ResetDetection>::make_shared_ptr<ResetDetection>(ResetDetection*)::{lambda(ResetDetection *)#1},std::allocator<ResetDetection>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<ResetDetection *,std::shared_ptr<ResetDetection> ctu::SharedSynchronizable<ResetDetection>::make_shared_ptr<ResetDetection>(ResetDetection*)::{lambda(ResetDetection *)#1},std::allocator<ResetDetection>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<ResetDetection *,std::shared_ptr<ResetDetection> ctu::SharedSynchronizable<ResetDetection>::make_shared_ptr<ResetDetection>(ResetDetection*)::{lambda(ResetDetection *)#1},std::allocator<ResetDetection>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableI14ResetDetectionE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_") {
    return a1 + 24;
  }
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableI14ResetDetectionE15make_shared_ptrIS1_EENSt3__110shared_ptr"
                                "IT_EEPS6_EUlPS1_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableI14ResetDetectionE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableI14ResetDetectionE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24; {
  return 0;
  }
}

uint64_t std::shared_ptr<ResetDetection> ctu::SharedSynchronizable<ResetDetection>::make_shared_ptr<ResetDetection>(ResetDetection*)::{lambda(ResetDetection*)#1}::operator() const(ResetDetection*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void *ctu::Loggable<ResetDetection,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::Loggable<ctu::OsLogContext,std::shared_ptr<ctu::LogServer>&>(void *a1, uint64_t a2, void *a3)
{
  *a1 = &unk_1F20F8990;
  ctu::OsLogContext::OsLogContext();
  ctu::OsLogContext::OsLogContext();
  ctu::LoggerCommonBase::LoggerCommonBase();
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v8);
  a1[1] = &unk_1F20F0070;
  a1[7] = *a3;
  uint64_t v5 = a3[1];
  a1[8] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&v7);
  return a1;
}

void sub_1C5872998(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

void ctu::SharedLoggable<ResetDetection,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(void *a1)
{
  *a1 = &unk_1F20F8990;
  MEMORY[0x1C8790F40](a1 + 1);
  int v2 = a1[12];
  if (v2) {
    dispatch_release(v2);
  }
  unint64_t v3 = a1[11];
  if (v3) {
    dispatch_release(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[10];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }

  operator delete(a1);
}

void std::__tree<std::__value_type<std::string,std::pair<dispatch_source_s *,dispatch::block<void({block_pointer})(int)>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<dispatch_source_s *,dispatch::block<void({block_pointer})(int)>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<dispatch_source_s *,dispatch::block<void({block_pointer})(int)>>>>>::destroy(char *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,std::pair<dispatch_source_s *,dispatch::block<void({block_pointer})(int)>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<dispatch_source_s *,dispatch::block<void({block_pointer})(int)>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<dispatch_source_s *,dispatch::block<void({block_pointer})(int)>>>>>::destroy(*(void *)a1);
    std::__tree<std::__value_type<std::string,std::pair<dispatch_source_s *,dispatch::block<void({block_pointer})(int)>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<dispatch_source_s *,dispatch::block<void({block_pointer})(int)>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<dispatch_source_s *,dispatch::block<void({block_pointer})(int)>>>>>::destroy(*((void *)a1 + 1));
    int v2 = (const void *)*((void *)a1 + 8);
    if (v2) {
      _Block_release(v2);
    }
    if (a1[55] < 0)
    {
      operator delete(*((void **)a1 + 4));
      unint64_t v3 = a1;
    }
    else
    {
      unint64_t v3 = a1;
    }
    operator delete(v3);
  }
}

void ctu::SharedSynchronizable<ResetDetection>::execute_wrapped(uint64_t *a1, uint64_t a2)
{
  unint64_t v3 = (std::__shared_weak_count *)a1[1];
  if (!v3 || (v5 = *a1, (int v6 = std::__shared_weak_count::lock(v3)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v7 = v6;
  BOOL v8 = a1[2];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 1174405120;
  block[2] = ___ZNK3ctu20SharedSynchronizableI14ResetDetectionE15execute_wrappedEU13block_pointerFvvE_block_invoke;
  block[3] = &unk_1F20F8A58;
  void block[5] = v5;
  size_t v12 = v7;
  p_shared_owners = &v7->__shared_owners_;
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  block[4] = a2;
  dispatch_async(v8, block);
  int v10 = v12;
  if (!v12 || atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      return;
    }
LABEL_8:
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    return;
  }
  ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
  std::__shared_weak_count::__release_weak(v10);
  if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_8;
  }
}

uint64_t ___ZNK3ctu20SharedSynchronizableI14ResetDetectionE15execute_wrappedEU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t __copy_helper_block_e8_40c43_ZTSNSt3__110shared_ptrIK14ResetDetectionEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c43_ZTSNSt3__110shared_ptrIK14ResetDetectionEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

uint64_t TraceFilter::determineFilterAction(std::string *a1)
{
  uint64_t v79 = *MEMORY[0x1E4F143B8];
  std::string::__assign_external(a1, (const std::string::value_type *)*MEMORY[0x1E4F4C820]);
  if (TelephonyUtilIsInternalBuild())
  {
    unsigned int v69 = -1431655766;
    uint64_t v2 = (const void *)*MEMORY[0x1E4F4C6C8];
    size_t v3 = strlen((const char *)*MEMORY[0x1E4F4C6C8]);
    if (v3 > 0x7FFFFFFFFFFFFFF7) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    size_t v4 = v3;
    if (v3 >= 0x17)
    {
      uint64_t v7 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v3 | 7) != 0x17) {
        uint64_t v7 = v3 | 7;
      }
      uint64_t v8 = v7 + 1;
      p_dst = (long long *)operator new(v7 + 1);
      *((void *)&__dst + 1) = v4;
      int64_t v74 = v8 | 0x8000000000000000;
      *(void *)&long long __dst = p_dst;
    }
    else
    {
      HIBYTE(v74) = v3;
      p_dst = &__dst;
      if (!v3)
      {
LABEL_11:
        *((unsigned char *)p_dst + v4) = 0;
        memset(&__p, 0, 24);
        if (prop::logfilter::get((char *)&__dst, (uint64_t)&__p))
        {
          int v9 = util::convert<int>((const std::string *)&__p, &v69, 0);
          if ((SHIBYTE(__p.st_gid) & 0x80000000) == 0) {
            goto LABEL_16;
          }
        }
        else
        {
          int v9 = 0;
          if ((SHIBYTE(__p.st_gid) & 0x80000000) == 0) {
            goto LABEL_16;
          }
        }
        operator delete(*(void **)&__p.st_dev);
LABEL_16:
        if (SHIBYTE(v74) < 0)
        {
          operator delete((void *)__dst);
          if (v9)
          {
LABEL_18:
            __darwin_ino64_t v10 = v69;
            v72.__r_.__value_.__l.__size_ = 0xAAAAAAAAAAAAAAAALL;
            v72.__r_.__value_.__r.__words[2] = 0xAAAAAAAAAAAAAALL;
            v72.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAA00;
            BOOL v11 = (const void *)*MEMORY[0x1E4F4F928];
            size_t v12 = strlen((const char *)*MEMORY[0x1E4F4F928]);
            if (v12 > 0x7FFFFFFFFFFFFFF7) {
              std::string::__throw_length_error[abi:ne180100]();
            }
            size_t v13 = v12;
            if (v12 >= 0x17)
            {
              uint64_t v25 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v12 | 7) != 0x17) {
                uint64_t v25 = v12 | 7;
              }
              uint64_t v26 = v25 + 1;
              uint64_t v14 = (long long *)operator new(v25 + 1);
              *((void *)&__dst + 1) = v13;
              int64_t v74 = v26 | 0x8000000000000000;
              *(void *)&long long __dst = v14;
            }
            else
            {
              HIBYTE(v74) = v12;
              uint64_t v14 = &__dst;
              if (!v12)
              {
                LOBYTE(__dst) = 0;
                int v15 = SHIBYTE(v74);
                if ((SHIBYTE(v74) & 0x80000000) == 0) {
                  goto LABEL_22;
                }
                goto LABEL_40;
              }
            }
            memmove(v14, v11, v13);
            *((unsigned char *)v14 + v13) = 0;
            int v15 = SHIBYTE(v74);
            if ((SHIBYTE(v74) & 0x80000000) == 0)
            {
LABEL_22:
              if (v15)
              {
                memset(&__p, 0, 64);
                int v16 = statvfs((const char *)&__dst, (statvfs *)&__p);
                __darwin_ino64_t st_ino = __p.st_ino;
                uint64_t st_rdev = __p.st_rdev;
                if ((v15 & 0x80000000) == 0) {
                  goto LABEL_25;
                }
                goto LABEL_24;
              }
              goto LABEL_44;
            }
LABEL_40:
            if (*((void *)&__dst + 1))
            {
              memset(&__p, 0, 64);
              int v16 = statvfs((const char *)__dst, (statvfs *)&__p);
              __darwin_ino64_t st_ino = __p.st_ino;
              uint64_t st_rdev = __p.st_rdev;
              if ((v15 & 0x80000000) == 0)
              {
LABEL_25:
                if (!v16)
                {
                  __darwin_ino64_t v19 = (st_ino * st_rdev) >> 20;
                  if ((v10 & 0x80000000) == 0 && v19 <= v10) {
                    std::string::__assign_external(&v72, (const std::string::value_type *)*MEMORY[0x1E4F4C818]);
                  }
                  GetABMLogServer(buf);
                  unint64_t v20 = *((void *)GetGlobalLogger(buf) + 4);
                  size_t v21 = *(std::__shared_weak_count **)&buf[8];
                  if (*(void *)&buf[8]
                    && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
                  {
                    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
                    std::__shared_weak_count::__release_weak(v21);
                  }
                  if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
                  {
                    __p.st_dev = 136315394;
                    *(void *)&__p.st_mode = "trace.filter";
                    WORD2(__p.st_ino) = 2048;
                    *(__darwin_ino64_t *)((char *)&__p.st_ino + 6) = v19;
                    _os_log_impl(&dword_1C5767000, v20, OS_LOG_TYPE_DEFAULT, "#I %s: Free disk space = %lu MB", (uint8_t *)&__p, 0x16u);
                  }
                }
                goto LABEL_44;
              }
LABEL_24:
              operator delete((void *)__dst);
              goto LABEL_25;
            }
            operator delete((void *)__dst);
LABEL_44:
            std::string::size_type size = v72.__r_.__value_.__l.__size_;
            size_t v22 = (void *)v72.__r_.__value_.__r.__words[0];
            uint64_t v24 = v72.__r_.__value_.__r.__words[2];
LABEL_45:
            int v68 = -1431655766;
            int v27 = (const void *)*MEMORY[0x1E4F4C950];
            size_t v28 = strlen((const char *)*MEMORY[0x1E4F4C950]);
            if (v28 > 0x7FFFFFFFFFFFFFF7) {
              std::string::__throw_length_error[abi:ne180100]();
            }
            size_t v29 = v28;
            if (v28 >= 0x17)
            {
              uint64_t v31 = (v28 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v28 | 7) != 0x17) {
                uint64_t v31 = v28 | 7;
              }
              uint64_t v32 = v31 + 1;
              int v30 = (long long *)operator new(v31 + 1);
              *((void *)&__dst + 1) = v29;
              int64_t v74 = v32 | 0x8000000000000000;
              *(void *)&long long __dst = v30;
            }
            else
            {
              HIBYTE(v74) = v28;
              int v30 = &__dst;
              if (!v28)
              {
LABEL_53:
                *((unsigned char *)v30 + v29) = 0;
                memset(&__p, 0, 24);
                if (prop::logfilter::get((char *)&__dst, (uint64_t)&__p))
                {
                  uint64_t v6 = util::convert<int>((const std::string *)&__p, &v68, 0);
                  if ((SHIBYTE(__p.st_gid) & 0x80000000) == 0) {
                    goto LABEL_58;
                  }
                }
                else
                {
                  uint64_t v6 = 0;
                  if ((SHIBYTE(__p.st_gid) & 0x80000000) == 0) {
                    goto LABEL_58;
                  }
                }
                operator delete(*(void **)&__p.st_dev);
LABEL_58:
                if (SHIBYTE(v74) < 0)
                {
                  operator delete((void *)__dst);
                  if (v6)
                  {
LABEL_60:
                    int v33 = v68;
                    memset(&v67, 0, sizeof(v67));
                    if (v68 < 0)
                    {
                      unsigned __int8 v44 = 0;
                      std::string::size_type v43 = 0;
                      uint64_t v42 = 0;
                      unint64_t v46 = HIBYTE(v24);
                      if (v24 < 0) {
                        unint64_t v46 = size;
                      }
                      if (v46) {
                        goto LABEL_139;
                      }
                      goto LABEL_136;
                    }
                    long long __dst = 0uLL;
                    int64_t v74 = 0;
                    pthread_mutex_lock(&ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance);
                    uint64_t v34 = (os_unfair_lock_s *)off_1EBBDD340;
                    if (!off_1EBBDD340)
                    {
                      SharedData::create_default_global(&__p);
                      long long v35 = *(_OWORD *)&__p.st_dev;
                      *(void *)&__p.st_dev = 0;
                      __p.__darwin_ino64_t st_ino = 0;
                      int v36 = (std::__shared_weak_count *)*(&off_1EBBDD340 + 1);
                      off_1EBBDD340 = v35;
                      if (v36 && !atomic_fetch_add(&v36->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                      {
                        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
                        std::__shared_weak_count::__release_weak(v36);
                      }
                      uint64_t v37 = (std::__shared_weak_count *)__p.st_ino;
                      if (__p.st_ino
                        && !atomic_fetch_add((atomic_ullong *volatile)(__p.st_ino + 8), 0xFFFFFFFFFFFFFFFFLL))
                      {
                        ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
                        std::__shared_weak_count::__release_weak(v37);
                      }
                      uint64_t v34 = (os_unfair_lock_s *)off_1EBBDD340;
                    }
                    *(void *)buf = v34;
                    *(void *)&uint8_t buf[8] = *(&off_1EBBDD340 + 1);
                    if (*(&off_1EBBDD340 + 1)) {
                      atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDD340 + 1) + 8), 1uLL, memory_order_relaxed);
                    }
                    pthread_mutex_unlock(&ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance);
                    uint64_t v38 = (const void *)*MEMORY[0x1E4F4F950];
                    size_t v39 = strlen((const char *)*MEMORY[0x1E4F4F950]);
                    if (v39 > 0x7FFFFFFFFFFFFFF7) {
                      std::string::__throw_length_error[abi:ne180100]();
                    }
                    std::string::size_type v40 = v39;
                    if (v39 >= 0x17)
                    {
                      unint64_t v65 = v22;
                      uint64_t v47 = (v39 & 0xFFFFFFFFFFFFFFF8) + 8;
                      if ((v39 | 7) != 0x17) {
                        uint64_t v47 = v39 | 7;
                      }
                      uint64_t v48 = v47 + 1;
                      uint64_t v41 = operator new(v47 + 1);
                      v72.__r_.__value_.__l.__size_ = v40;
                      v72.__r_.__value_.__r.__words[2] = v48 | 0x8000000000000000;
                      v72.__r_.__value_.__r.__words[0] = (std::string::size_type)v41;
                      size_t v22 = v65;
                    }
                    else
                    {
                      *((unsigned char *)&v72.__r_.__value_.__s + 23) = v39;
                      uint64_t v41 = &v72;
                      if (!v39)
                      {
LABEL_88:
                        v41[v40] = 0;
                        *(void *)&__p.st_dev = &v72;
                        __p.__darwin_ino64_t st_ino = (__darwin_ino64_t)&__dst;
                        *(void *)&__p.st_uid = v34;
                        ctu::SharedLockable<SharedData>::execute_sync<BOOL SharedData::getPreference<std::string>(std::string const&,std::string &)::{lambda(void)#1}>(v34 + 6, (uint64_t)&__p);
                        if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0) {
                          operator delete(v72.__r_.__value_.__l.__data_);
                        }
                        long long v49 = *(std::__shared_weak_count **)&buf[8];
                        if (*(void *)&buf[8]
                          && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
                        {
                          ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
                          std::__shared_weak_count::__release_weak(v49);
                        }
                        v50.tv_sec = 0xAAAAAAAAAAAAAAAALL;
                        v50.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
                        *(timespec *)&__p.st_blkstd::string::size_type size = v50;
                        *(timespec *)__p.st_qspare = v50;
                        __p.st_birthtimespec = v50;
                        *(timespec *)&__p.st_std::string::size_type size = v50;
                        __p.st_mtimespec = v50;
                        __p.st_ctimespec = v50;
                        *(timespec *)&__p.st_uid = v50;
                        __p.st_atimespec = v50;
                        *(timespec *)&__p.st_dev = v50;
                        if (v74 >= 0) {
                          unint64_t v51 = (const char *)&__dst;
                        }
                        else {
                          unint64_t v51 = (const char *)__dst;
                        }
                        if (stat(v51, &__p))
                        {
                          int v52 = -1;
                          goto LABEL_123;
                        }
                        if (SHIBYTE(v74) < 0)
                        {
                          std::string::__init_copy_ctor_external((std::string *)&__p, (const std::string::value_type *)__dst, *((std::string::size_type *)&__dst + 1));
                        }
                        else
                        {
                          *(_OWORD *)&__p.st_dev = __dst;
                          *(void *)&__p.st_uid = v74;
                        }
                        uint64_t v53 = (const void *)*MEMORY[0x1E4F4F918];
                        size_t v54 = strlen((const char *)*MEMORY[0x1E4F4F918]);
                        if (v54 > 0x7FFFFFFFFFFFFFF7) {
                          std::string::__throw_length_error[abi:ne180100]();
                        }
                        std::string::size_type v55 = v54;
                        if (v54 >= 0x17)
                        {
                          int v66 = v22;
                          uint64_t v57 = (v54 & 0xFFFFFFFFFFFFFFF8) + 8;
                          if ((v54 | 7) != 0x17) {
                            uint64_t v57 = v54 | 7;
                          }
                          uint64_t v58 = v57 + 1;
                          int v56 = operator new(v57 + 1);
                          v72.__r_.__value_.__l.__size_ = v55;
                          v72.__r_.__value_.__r.__words[2] = v58 | 0x8000000000000000;
                          v72.__r_.__value_.__r.__words[0] = (std::string::size_type)v56;
                          size_t v22 = v66;
                        }
                        else
                        {
                          *((unsigned char *)&v72.__r_.__value_.__s + 23) = v54;
                          int v56 = &v72;
                          if (!v54)
                          {
LABEL_109:
                            v56[v55] = 0;
                            unint64_t NumberOfLogDumps = util::getNumberOfLogDumps((uint64_t)&__p, (const void **)&v72.__r_.__value_.__l.__data_);
                            if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0)
                            {
                              operator delete(v72.__r_.__value_.__l.__data_);
                              if ((SHIBYTE(__p.st_gid) & 0x80000000) == 0)
                              {
LABEL_111:
                                if (NumberOfLogDumps >> 31) {
                                  int v52 = -1;
                                }
                                else {
                                  int v52 = NumberOfLogDumps;
                                }
                                if (v52 == -1) {
                                  goto LABEL_123;
                                }
LABEL_121:
                                if (v52 >= v33)
                                {
                                  std::string::__assign_external(&v67, (const std::string::value_type *)*MEMORY[0x1E4F4C818]);
                                  int v52 = NumberOfLogDumps;
                                }
LABEL_123:
                                GetABMLogServer(&v70);
                                int v60 = *((void *)GetGlobalLogger(&v70) + 4);
                                xpc_object_t v61 = v71;
                                if (v71 && !atomic_fetch_add(&v71->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                                {
                                  ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
                                  std::__shared_weak_count::__release_weak(v61);
                                }
                                if (os_log_type_enabled(v60, OS_LOG_TYPE_DEFAULT))
                                {
                                  *(_DWORD *)buf = 136315650;
                                  *(void *)&uint8_t buf[4] = "trace.filter";
                                  *(_WORD *)&buf[12] = 1024;
                                  *(_DWORD *)&buf[14] = v52;
                                  __int16 v76 = 1024;
                                  int v77 = v33;
                                  _os_log_impl(&dword_1C5767000, v60, OS_LOG_TYPE_DEFAULT, "#I %s: log dump count = %d, max log limit = %d", buf, 0x18u);
                                }
                                if (SHIBYTE(v74) < 0)
                                {
                                  operator delete((void *)__dst);
                                  std::string::size_type v43 = v67.__r_.__value_.__l.__size_;
                                  uint64_t v42 = (void *)v67.__r_.__value_.__r.__words[0];
                                  unsigned __int8 v44 = HIBYTE(v67.__r_.__value_.__r.__words[2]);
                                  unint64_t v63 = HIBYTE(v24);
                                  if (v24 < 0) {
                                    unint64_t v63 = size;
                                  }
                                  if (v63) {
                                    goto LABEL_139;
                                  }
                                }
                                else
                                {
                                  std::string::size_type v43 = v67.__r_.__value_.__l.__size_;
                                  uint64_t v42 = (void *)v67.__r_.__value_.__r.__words[0];
                                  unsigned __int8 v44 = HIBYTE(v67.__r_.__value_.__r.__words[2]);
                                  unint64_t v62 = HIBYTE(v24);
                                  if (v24 < 0) {
                                    unint64_t v62 = size;
                                  }
                                  if (v62) {
                                    goto LABEL_139;
                                  }
                                }
LABEL_136:
                                if ((v44 & 0x80u) == 0) {
                                  std::string::size_type v43 = v44;
                                }
                                if (!v43)
                                {
LABEL_140:
                                  if ((v44 & 0x80) != 0)
                                  {
                                    operator delete(v42);
                                    if ((v24 & 0x8000000000000000) == 0) {
                                      return v6;
                                    }
                                  }
                                  else if ((v24 & 0x8000000000000000) == 0)
                                  {
                                    return v6;
                                  }
                                  operator delete(v22);
                                  return v6;
                                }
LABEL_139:
                                std::string::__assign_external(a1, (const std::string::value_type *)*MEMORY[0x1E4F4C818]);
                                goto LABEL_140;
                              }
                            }
                            else if ((SHIBYTE(__p.st_gid) & 0x80000000) == 0)
                            {
                              goto LABEL_111;
                            }
                            operator delete(*(void **)&__p.st_dev);
                            if (NumberOfLogDumps >> 31) {
                              int v52 = -1;
                            }
                            else {
                              int v52 = NumberOfLogDumps;
                            }
                            if (v52 == -1) {
                              goto LABEL_123;
                            }
                            goto LABEL_121;
                          }
                        }
                        memmove(v56, v53, v55);
                        goto LABEL_109;
                      }
                    }
                    memmove(v41, v38, v40);
                    goto LABEL_88;
                  }
                }
                else if (v6)
                {
                  goto LABEL_60;
                }
                uint64_t v42 = 0;
                std::string::size_type v43 = 0;
                unsigned __int8 v44 = 0;
                unint64_t v45 = HIBYTE(v24);
                if (v24 < 0) {
                  unint64_t v45 = size;
                }
                if (v45) {
                  goto LABEL_139;
                }
                goto LABEL_136;
              }
            }
            memmove(v30, v27, v29);
            goto LABEL_53;
          }
        }
        else if (v9)
        {
          goto LABEL_18;
        }
        size_t v22 = 0;
        std::string::size_type size = 0;
        uint64_t v24 = 0;
        goto LABEL_45;
      }
    }
    memmove(p_dst, v2, v4);
    goto LABEL_11;
  }
  return 1;
}

void sub_1C587371C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  if (a31 < 0) {
    operator delete(__p);
  }
  if (a16 < 0) {
    operator delete(a11);
  }
  if (v42 < 0) {
    operator delete(v41);
  }
  _Unwind_Resume(exception_object);
}

void sub_1C587385C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a35 < 0) {
    operator delete(__p);
  }
  if (a25 < 0) {
    JUMPOUT(0x1C5873850);
  }
  JUMPOUT(0x1C5873854);
}

uint64_t __cxx_global_var_init_13()
{
  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<SharedData>::~PthreadMutexGuardPolicy, &ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance, &dword_1C5767000);
  }
  return result;
}

uint64_t data::TransportService::ThrottlingConfig::asString@<X0>(data::TransportService::ThrottlingConfig *this@<X0>, unsigned char *a2@<X8>)
{
  unint64_t v24 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v23[7] = v4;
  v23[8] = v4;
  v23[5] = v4;
  v23[6] = v4;
  v23[3] = v4;
  v23[4] = v4;
  v23[1] = v4;
  v23[2] = v4;
  long long v22 = v4;
  v23[0] = v4;
  *(_OWORD *)stat __p = v4;
  long long v21 = v4;
  long long v18 = v4;
  *(_OWORD *)__src = v4;
  long long v16 = v4;
  long long v17 = v4;
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v16);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v16, (uint64_t)"enabled ", 8);
  uint64_t v6 = "???";
  if (!*(_DWORD *)this) {
    uint64_t v6 = "Disabled";
  }
  if (*(_DWORD *)this == 1) {
    uint64_t v7 = "Enabled";
  }
  else {
    uint64_t v7 = v6;
  }
  size_t v8 = strlen(v7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)v7, v8);
  if (*(_DWORD *)this == 1)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v16, (uint64_t)", timeout ", 10);
    std::ostream::operator<<();
  }
  if ((BYTE8(v22) & 0x10) != 0)
  {
    __darwin_ino64_t v10 = (unsigned char *)v22;
    if ((void *)v22 < __src[1])
    {
      *(void **)&long long v22 = __src[1];
      __darwin_ino64_t v10 = __src[1];
    }
    BOOL v11 = __src[0];
    size_t v9 = v10 - (char *)__src[0];
    if ((unint64_t)(v10 - (char *)__src[0]) >= 0x7FFFFFFFFFFFFFF8) {
      goto LABEL_25;
    }
  }
  else
  {
    if ((BYTE8(v22) & 8) == 0)
    {
      size_t v9 = 0;
      a2[23] = 0;
      goto LABEL_21;
    }
    BOOL v11 = (const void *)*((void *)&v17 + 1);
    size_t v9 = *((void *)&v18 + 1) - *((void *)&v17 + 1);
    if (*((void *)&v18 + 1) - *((void *)&v17 + 1) >= 0x7FFFFFFFFFFFFFF8uLL) {
LABEL_25:
    }
      std::string::__throw_length_error[abi:ne180100]();
  }
  if (v9 >= 0x17)
  {
    uint64_t v12 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v12 = v9 | 7;
    }
    uint64_t v13 = v12 + 1;
    uint64_t v14 = operator new(v12 + 1);
    *((void *)a2 + 1) = v9;
    *((void *)a2 + 2) = v13 | 0x8000000000000000;
    *(void *)a2 = v14;
    a2 = v14;
    goto LABEL_20;
  }
  a2[23] = v9;
  if (v9) {
LABEL_20:
  }
    memmove(a2, v11, v9);
LABEL_21:
  a2[v9] = 0;
  *(void *)&long long v16 = *MEMORY[0x1E4FBA418];
  *(void *)((char *)&v16 + *(void *)(v16 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  *((void *)&v16 + 1) = MEMORY[0x1E4FBA470] + 16;
  if (SHIBYTE(v21) < 0) {
    operator delete(__p[1]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1C8791FB0](v23);
}

void sub_1C5873B60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *data::TransportService::TransportService(void *this)
{
  *this = 0;
  this[1] = 0;
  return this;
}

{
  *this = 0;
  this[1] = 0;
  return this;
}

unint64_t *data::TransportService::TransportService(unint64_t *a1, uint64_t *a2)
{
  size_t v3 = (std::__shared_weak_count *)a2[1];
  uint64_t v6 = *a2;
  uint64_t v7 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  data::TransportService::State::create((capabilities::abs *)&v6, a1);
  long long v4 = v7;
  if (!v7 || atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v6;
  std::__shared_weak_count *v7;

  size_t v3 = (std::__shared_weak_count *)a2[1];
  uint64_t v6 = *a2;
  uint64_t v7 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  data::TransportService::State::create((capabilities::abs *)&v6, a1);
  long long v4 = v7;
  if (!v7 || atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void sub_1C5873C30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void data::TransportService::State::create(capabilities::abs *a1@<X0>, unint64_t *a2@<X8>)
{
  uint64_t v68 = *MEMORY[0x1E4F143B8];
  *a2 = 0;
  a2[1] = 0;
  if (capabilities::abs::supportsDataTransportService(a1))
  {
    long long v4 = (char *)operator new(0xA8uLL);
    uint64_t v5 = (std::__shared_weak_count *)*((void *)a1 + 1);
    uint64_t v49 = *(void *)a1;
    timespec v50 = v5;
    if (v5) {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    HIBYTE(v63) = 12;
    strcpy(label, "ipc.svc.data");
    HIBYTE(v55) = 12;
    strcpy((char *)&__p, "ipc.svc.data");
    ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)&v52, "com.apple.telephony.abm", (const char *)&__p);
    uint64_t v6 = dispatch_queue_create(label, 0);
    *((void *)v4 + 9) = 0;
    *((void *)v4 + 10) = 0;
    *((void *)v4 + 11) = v6;
    if (v6)
    {
      uint64_t v7 = v6;
      dispatch_retain(v6);
      *((void *)v4 + 12) = 0;
      dispatch_release(v7);
    }
    else
    {
      *((void *)v4 + 12) = 0;
    }
    *(void *)long long v4 = &unk_1F20F8BF8;
    ctu::OsLogContext::OsLogContext();
    ctu::OsLogContext::OsLogContext();
    ctu::LoggerCommonBase::LoggerCommonBase();
    ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&v66);
    *((void *)v4 + 1) = &unk_1F20F0070;
    *((void *)v4 + 7) = v49;
    *((void *)v4 + 8) = v50;
    if (v50) {
      atomic_fetch_add_explicit(&v50->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&object);
    *(void *)long long v4 = &unk_1F20F8BB8;
    ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&v52);
    if (SHIBYTE(v55) < 0)
    {
      operator delete((void *)__p);
      if ((SHIBYTE(v63) & 0x80000000) == 0) {
        goto LABEL_11;
      }
    }
    else if ((SHIBYTE(v63) & 0x80000000) == 0)
    {
      goto LABEL_11;
    }
    operator delete(*(void **)label);
LABEL_11:
    *(void *)long long v4 = &unk_1F20F8AE8;
    *((_DWORD *)v4 + 28) = 0;
    *((void *)v4 + 15) = v4 + 120;
    *((void *)v4 + 16) = v4 + 120;
    *(_OWORD *)(v4 + 136) = 0u;
    *(_OWORD *)(v4 + 152) = 0u;
    *((void *)v4 + 13) = 0x2D00000000;
    v51[0] = (unint64_t)v4;
    size_t v8 = (std::__shared_weak_count *)operator new(0x20uLL);
    v8->__shared_owners_ = 0;
    p_shared_owners = &v8->__shared_owners_;
    v8->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20F8A98;
    v8->__shared_weak_owners_ = 0;
    v8[1].__vftable = (std::__shared_weak_count_vtbl *)v4;
    v51[1] = (unint64_t)v8;
    __darwin_ino64_t v10 = (std::__shared_weak_count *)*((void *)v4 + 10);
    if (v10)
    {
      if (v10->__shared_owners_ != -1
        || (atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed),
            atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed),
            *((void *)v4 + 9) = v4,
            *((void *)v4 + 10) = v8,
            std::__shared_weak_count::__release_weak(v10),
            atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)))
      {
LABEL_19:
        unint64_t v11 = v51[0];
        if (*(void *)(v51[0] + 56))
        {
          uint64_t v12 = *(std::__shared_weak_count **)(v51[0] + 80);
          if (!v12 || (uint64_t v13 = *(void *)(v51[0] + 72), (v14 = std::__shared_weak_count::lock(v12)) == 0)) {
            std::__throw_bad_weak_ptr[abi:ne180100]();
          }
          int v15 = v14;
          *(void *)label = v13;
          *(void *)&label[8] = v14;
          ctu::LoggerCommonBase::getLogDomain((ctu::LoggerCommonBase *)(v51[0] + 8));
          *(void *)&long long __p = v13;
          *((void *)&__p + 1) = v15;
          memset(label, 0, sizeof(label));
          ctu::TrackedLogger::registerLoggerToServer();
          long long v16 = (std::__shared_weak_count *)*((void *)&__p + 1);
          if (*((void *)&__p + 1)
            && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&__p + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
            std::__shared_weak_count::__release_weak(v16);
          }
          long long v17 = *(std::__shared_weak_count **)&label[8];
          if (*(void *)&label[8]
            && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&label[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
            std::__shared_weak_count::__release_weak(v17);
          }
          unint64_t v11 = v51[0];
        }
        unint64_t v18 = v51[1];
        *(_OWORD *)unint64_t v51 = 0uLL;
        *a2 = v11;
        a2[1] = v18;
        if (v50 && !atomic_fetch_add(&v50->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
          std::__shared_weak_count::__release_weak(v50);
        }
        unint64_t v19 = *a2;
        unint64_t v20 = *(NSObject **)(*a2 + 40);
        if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)label = 0;
          _os_log_impl(&dword_1C5767000, v20, OS_LOG_TYPE_DEFAULT, "#I Inited", (uint8_t *)label, 2u);
        }
        unint64_t v52 = 0xAAAAAAAAAAAAAAAALL;
        unint64_t v53 = 0xAAAAAAAAAAAAAAAALL;
        pthread_mutex_lock(&ctu::Singleton<sys::UIObserver,sys::UIObserver,ctu::PthreadMutexGuardPolicy<sys::UIObserver>>::sInstance);
        unint64_t v21 = off_1EBBDD3E0;
        if (!off_1EBBDD3E0)
        {
          memset(label, 170, sizeof(label));
          long long v22 = (sys::UIObserver *)operator new(0x40uLL);
          sys::UIObserver::UIObserver(v22);
          std::shared_ptr<sys::UIObserver>::shared_ptr[abi:ne180100]<sys::UIObserver,void>((std::__shared_weak_count_vtbl **)label, (std::__shared_weak_count_vtbl *)v22);
          long long v23 = *(_OWORD *)label;
          memset(label, 0, sizeof(label));
          unint64_t v24 = (std::__shared_weak_count *)*(&off_1EBBDD3E0 + 1);
          off_1EBBDD3E0 = v23;
          if (v24 && !atomic_fetch_add(&v24->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v24);
          }
          uint64_t v25 = *(std::__shared_weak_count **)&label[8];
          if (*(void *)&label[8]
            && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&label[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
            std::__shared_weak_count::__release_weak(v25);
          }
          unint64_t v21 = off_1EBBDD3E0;
        }
        unint64_t v52 = v21;
        unint64_t v53 = *(&off_1EBBDD3E0 + 1);
        if (*(&off_1EBBDD3E0 + 1)) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDD3E0 + 1) + 8), 1uLL, memory_order_relaxed);
        }
        pthread_mutex_unlock(&ctu::Singleton<sys::UIObserver,sys::UIObserver,ctu::PthreadMutexGuardPolicy<sys::UIObserver>>::sInstance);
        *(void *)&long long __p = MEMORY[0x1E4F143A8];
        *((void *)&__p + 1) = 0x40000000;
        std::string::size_type v55 = ___ZN3ctu20SharedSynchronizableIN4data16TransportService5StateEE13connect_eventIN5boost8signals26signalIFvbENS7_19optional_last_valueIvEEiNSt3__14lessIiEENS6_8functionIS9_EENSF_IFvRKNS7_10connectionEbEEENS7_5mutexEEES3_vJbEEEDTcl7connectfp_cvNSC_10shared_ptrIS3_EE_EcvP16dispatch_queue_s_EcvPFT1_DpT2_ELi0EEERT_MT0_FSS_SU_E_block_invoke;
        int v56 = &__block_descriptor_tmp_14;
        unint64_t v57 = v19 + 72;
        uint64_t v58 = data::TransportService::State::handleUILockStateChange_sync;
        uint64_t v59 = 0;
        uint64_t v26 = _Block_copy(&__p);
        int v27 = *(std::__shared_weak_count **)(v19 + 80);
        if (!v27 || (v28 = *(void *)(v19 + 72), (size_t v29 = std::__shared_weak_count::lock(v27)) == 0)) {
          std::__throw_bad_weak_ptr[abi:ne180100]();
        }
        int v30 = v29;
        uint64_t v31 = *(NSObject **)(v19 + 88);
        dispatch_object_t object = v31;
        if (v26) {
          uint64_t v32 = _Block_copy(v26);
        }
        else {
          uint64_t v32 = 0;
        }
        aBlock = v32;
        dispatch_retain(v31);
        boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>::slot<ctu::DispatchSlot<dispatch::block<void({block_pointer})(BOOL)>>>(label, (uint64_t)&object);
        atomic_fetch_add_explicit(&v30->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        int v33 = operator new(0x18uLL);
        void *v33 = &unk_1F20F8D90;
        v33[1] = v28;
        v33[2] = v30;
        atomic_fetch_add_explicit(&v30->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        uint64_t v34 = operator new(0x18uLL);
        void *v34 = &unk_1F20F8D90;
        v34[1] = v28;
        v34[2] = v30;
        atomic_fetch_add_explicit(&v30->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        std::string v67 = v34;
        int v66 = 2;
        uint64_t v35 = *(void *)&label[8];
        if (*(void *)&label[8] >= v63)
        {
          uint64_t v37 = std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::__push_back_slow_path<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>((uint64_t *)label, (uint64_t)&v66);
        }
        else
        {
          int v36 = operator new(0x18uLL);
          *int v36 = &unk_1F20F8D90;
          v36[1] = v28;
          v36[2] = v30;
          atomic_fetch_add_explicit(&v30->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          *(void *)(v35 + 8) = v36;
          *(_DWORD *)uint64_t v35 = 2;
          uint64_t v37 = v35 + 24;
        }
        *(void *)&label[8] = v37;
        boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>::destroy_content((uint64_t)&v66);
        (*(void (**)(void *))(*v33 + 8))(v33);
        std::__shared_weak_count::__release_weak(v30);
        boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::connect(*(void *)(v21 + 40), (uint64_t)label, 0, v51);
        if (v64)
        {
          if ((v64 & 1) == 0)
          {
            uint64_t v38 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(v64 & 0xFFFFFFFFFFFFFFFELL);
            if (v38) {
              v38(v65, v65, 2);
            }
          }
          uint64_t v64 = 0;
        }
        uint64_t v39 = *(void *)label;
        if (*(void *)label)
        {
          uint64_t v40 = *(void *)&label[8];
          uint64_t v41 = *(void **)label;
          if (*(void *)&label[8] != *(void *)label)
          {
            do
            {
              v40 -= 24;
              boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>::destroy_content(v40);
            }
            while (v40 != v39);
            uint64_t v41 = *(void **)label;
          }
          *(void *)&label[8] = v39;
          operator delete(v41);
        }
        dispatch_release(object);
        if (aBlock) {
          _Block_release(aBlock);
        }
        if (atomic_fetch_add(&v30->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          if (!v26)
          {
LABEL_69:
            uint64_t v42 = operator new(0x20uLL);
            v42[1] = *(_OWORD *)v51;
            uint64_t v43 = *(void *)(v19 + 120);
            *(void *)uint64_t v42 = v43;
            *((void *)v42 + 1) = v19 + 120;
            *(void *)(v43 + 8) = v42;
            *(void *)(v19 + 120) = v42;
            ++*(void *)(v19 + 136);
            unsigned __int8 v44 = (ApplePDPHelperInterface *)capabilities::ipc::supportsIPMetadataTrailer((capabilities::ipc *)v42);
            if (v44)
            {
              Instance = (ApplePDPHelperInterface *)ApplePDPHelperInterface::getInstance(v44);
              int v46 = ApplePDPHelperInterface::enableMetadataTrailer(Instance, 1, 0);
              uint64_t v47 = *(NSObject **)(v19 + 40);
              if (v46)
              {
                if (os_log_type_enabled(*(os_log_t *)(v19 + 40), OS_LOG_TYPE_DEFAULT))
                {
                  *(_WORD *)label = 0;
                  _os_log_impl(&dword_1C5767000, v47, OS_LOG_TYPE_DEFAULT, "#I Enabled IP metadata trailer appending", (uint8_t *)label, 2u);
                  uint64_t v48 = (std::__shared_weak_count *)v53;
                  if (!v53) {
                    return;
                  }
LABEL_76:
                  if (!atomic_fetch_add(&v48->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                  {
                    ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
                    std::__shared_weak_count::__release_weak(v48);
                  }
                  return;
                }
              }
              else if (os_log_type_enabled(*(os_log_t *)(v19 + 40), OS_LOG_TYPE_ERROR))
              {
                *(_WORD *)label = 0;
                _os_log_error_impl(&dword_1C5767000, v47, OS_LOG_TYPE_ERROR, "Failed to enable IP metadata trailer appending", (uint8_t *)label, 2u);
                uint64_t v48 = (std::__shared_weak_count *)v53;
                if (!v53) {
                  return;
                }
                goto LABEL_76;
              }
            }
            uint64_t v48 = (std::__shared_weak_count *)v53;
            if (!v53) {
              return;
            }
            goto LABEL_76;
          }
        }
        else
        {
          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
          std::__shared_weak_count::__release_weak(v30);
          if (!v26) {
            goto LABEL_69;
          }
        }
        _Block_release(v26);
        goto LABEL_69;
      }
    }
    else
    {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      *((void *)v4 + 9) = v4;
      *((void *)v4 + 10) = v8;
      if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
        goto LABEL_19;
      }
    }
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    goto LABEL_19;
  }
}

void sub_1C58745C8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,char a25)
{
  operator delete(v25);
  pthread_mutex_unlock(&ctu::Singleton<sys::UIObserver,sys::UIObserver,ctu::PthreadMutexGuardPolicy<sys::UIObserver>>::sInstance);
  JUMPOUT(0x1C58747B0);
}

void sub_1C5874638(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  JUMPOUT(0x1C58747B0);
}

void sub_1C5874660(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C58747B8);
  }
  JUMPOUT(0x1C58746B0);
}

void sub_1C587466C(uint64_t a1, int a2)
{
  if (a2) {
    JUMPOUT(0x1C5874674);
  }
  JUMPOUT(0x1C58747B8);
}

void sub_1C58746A0(uint64_t a1, int a2)
{
  if (a2) {
    JUMPOUT(0x1C58746A8);
  }
  JUMPOUT(0x1C58747B8);
}

void sub_1C58746BC(uint64_t a1, int a2)
{
  if (a2) {
    JUMPOUT(0x1C58746C4);
  }
  JUMPOUT(0x1C58747B8);
}

void sub_1C58746DC(void *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    dispatch_barrier_async_f(v2[11], v2, (dispatch_function_t)std::shared_ptr<data::TransportService::State> ctu::SharedSynchronizable<data::TransportService::State>::make_shared_ptr<data::TransportService::State>(data::TransportService::State*)::{lambda(data::TransportService::State*)#1}::operator() const(data::TransportService::State*)::{lambda(void *)#1}::__invoke);
    __cxa_rethrow();
  }
  JUMPOUT(0x1C58747B8);
}

void sub_1C5874710()
{
}

void sub_1C5874720(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)(v35 - 112));
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&a26);
  ctu::SharedSynchronizable<DataStallDetection>::~SharedSynchronizable(v34);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&a14);
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  operator delete(v33);
  JUMPOUT(0x1C58747B0);
}

void sub_1C587479C(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1C587486C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10)
  {
    if (!atomic_fetch_add(&a10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

void data::TransportService::enterLowPower(data::TransportService *this)
{
  uint64_t v1 = *(void *)this;
  if (*(void *)this)
  {
    v3[0] = MEMORY[0x1E4F143A8];
    v3[1] = 0x40000000;
    v3[2] = ___ZN4data16TransportService5State13enterLowPowerEv_block_invoke;
    v3[3] = &__block_descriptor_tmp_54;
    v3[4] = v1;
    long long v4 = v3;
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 0x40000000;
    block[2] = ___ZNK3ctu20SharedSynchronizableIN4data16TransportService5StateEE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS9__block_invoke;
    block[3] = &__block_descriptor_tmp_55_0;
    block[4] = v1 + 72;
    void block[5] = &v4;
    uint64_t v2 = *(NSObject **)(v1 + 88);
    if (*(void *)(v1 + 96)) {
      dispatch_async_and_wait(v2, block);
    }
    else {
      dispatch_sync(v2, block);
    }
  }
}

void data::TransportService::exitLowPower(data::TransportService *this)
{
  uint64_t v1 = *(void *)this;
  if (*(void *)this)
  {
    v2[0] = MEMORY[0x1E4F143A8];
    v2[1] = 0x40000000;
    v2[2] = ___ZN4data16TransportService5State12exitLowPowerEv_block_invoke;
    v2[3] = &__block_descriptor_tmp_56_0;
    v2[4] = v1;
    ctu::SharedSynchronizable<data::TransportService::State>::execute_wrapped((uint64_t *)(v1 + 72), (uint64_t)v2);
  }
}

void data::TransportService::setConfig(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    uint64_t v3 = *a2;
    v4[0] = MEMORY[0x1E4F143A8];
    v4[1] = 0x40000000;
    uint64_t v4[2] = ___ZN4data16TransportService5State9setConfigENS0_16ThrottlingConfigE_block_invoke;
    double v4[3] = &__block_descriptor_tmp_59_0;
    v4[4] = v2;
    v4[5] = v3;
    ctu::SharedSynchronizable<data::TransportService::State>::execute_wrapped((uint64_t *)(v2 + 72), (uint64_t)v4);
  }
}

void data::TransportService::dumpState(data::TransportService *this)
{
  uint64_t v1 = *(void *)this;
  if (*(void *)this)
  {
    v3[0] = MEMORY[0x1E4F143A8];
    v3[1] = 0x40000000;
    v3[2] = ___ZNK4data16TransportService5State9dumpStateEv_block_invoke;
    v3[3] = &__block_descriptor_tmp_60_0;
    v3[4] = v1;
    long long v4 = v3;
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 0x40000000;
    block[2] = ___ZNK3ctu20SharedSynchronizableIN4data16TransportService5StateEE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS9__block_invoke;
    block[3] = &__block_descriptor_tmp_55_0;
    block[4] = v1 + 72;
    void block[5] = &v4;
    uint64_t v2 = *(NSObject **)(v1 + 88);
    if (*(void *)(v1 + 96)) {
      dispatch_async_and_wait(v2, block);
    }
    else {
      dispatch_sync(v2, block);
    }
  }
}

void data::TransportService::unblockThrottling(data::TransportService *this)
{
  uint64_t v1 = *(void *)this;
  if (*(void *)this)
  {
    v3[0] = MEMORY[0x1E4F143A8];
    v3[1] = 0x40000000;
    v3[2] = ___ZN4data16TransportService5State17unblockThrottlingEv_block_invoke;
    v3[3] = &__block_descriptor_tmp_61_0;
    v3[4] = v1;
    long long v4 = v3;
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 0x40000000;
    block[2] = ___ZNK3ctu20SharedSynchronizableIN4data16TransportService5StateEE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS9__block_invoke;
    block[3] = &__block_descriptor_tmp_55_0;
    block[4] = v1 + 72;
    void block[5] = &v4;
    uint64_t v2 = *(NSObject **)(v1 + 88);
    if (*(void *)(v1 + 96)) {
      dispatch_async_and_wait(v2, block);
    }
    else {
      dispatch_sync(v2, block);
    }
  }
}

uint64_t ctu::PthreadMutexGuardPolicy<sys::UIObserver>::~PthreadMutexGuardPolicy(uint64_t a1)
{
  pthread_mutex_lock((pthread_mutex_t *)a1);
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 72);
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 72);
  if (!v3 || atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void std::__shared_ptr_pointer<data::TransportService::State *,std::shared_ptr<data::TransportService::State> ctu::SharedSynchronizable<data::TransportService::State>::make_shared_ptr<data::TransportService::State>(data::TransportService::State*)::{lambda(data::TransportService::State *)#1},std::allocator<data::TransportService::State>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<data::TransportService::State *,std::shared_ptr<data::TransportService::State> ctu::SharedSynchronizable<data::TransportService::State>::make_shared_ptr<data::TransportService::State>(data::TransportService::State*)::{lambda(data::TransportService::State *)#1},std::allocator<data::TransportService::State>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<data::TransportService::State *,std::shared_ptr<data::TransportService::State> ctu::SharedSynchronizable<data::TransportService::State>::make_shared_ptr<data::TransportService::State>(data::TransportService::State*)::{lambda(data::TransportService::State *)#1},std::allocator<data::TransportService::State>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableIN4data16TransportService5StateEE15make_shared_ptrIS3_EENSt3__110shared"
                     "_ptrIT_EEPS8_EUlPS3_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableIN4data16TransportService5StateEE15make_shared_ptrIS3_EENSt3"
                                "__110shared_ptrIT_EEPS8_EUlPS3_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableIN4data16TransportService5StateEE15make_shared_ptrIS3_EENSt3__110shared_ptrIT_EEPS8_EUlPS3_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableIN4data16TransportService5StateEE15make_shared_ptrIS3_EENSt3__110shared_ptrIT_EEPS8_EUlPS3_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24; {
  return 0;
  }
}

uint64_t std::shared_ptr<data::TransportService::State> ctu::SharedSynchronizable<data::TransportService::State>::make_shared_ptr<data::TransportService::State>(data::TransportService::State*)::{lambda(data::TransportService::State*)#1}::operator() const(data::TransportService::State*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void data::TransportService::State::~State(data::TransportService::State *this)
{
  data::TransportService::State::~State(this);

  operator delete(v1);
}

{
  char *v2;
  char *v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  atomic_uint *v8;
  NSObject *v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  atomic_uint *v15;
  NSObject *v16;
  NSObject *v17;
  std::__shared_weak_count *v18;

  *(void *)this = &unk_1F20F8AE8;
  uint64_t v2 = (char *)this + 120;
  unint64_t v3 = (char *)*((void *)this + 16);
  if (v3 != (char *)this + 120)
  {
    do
    {
      boost::signals2::connection::disconnect((boost::signals2::connection *)(v3 + 16));
      unint64_t v3 = (char *)*((void *)v3 + 1);
    }
    while (v3 != v2);
  }
  if (*((void *)this + 17))
  {
    long long v4 = *((void *)this + 15);
    uint64_t v5 = (char *)*((void *)this + 16);
    uint64_t v6 = *(void *)v5;
    *(void *)(v6 + 8) = *(void *)(v4 + 8);
    **(void **)(v4 + 8) = v6;
    *((void *)this + 17) = 0;
    if (v5 != v2)
    {
      do
      {
        uint64_t v7 = (char *)*((void *)v5 + 1);
        size_t v8 = (atomic_uint *)*((void *)v5 + 3);
        if (v8 && atomic_fetch_add(v8 + 3, 0xFFFFFFFF) == 1) {
          (*(void (**)(atomic_uint *))(*(void *)v8 + 24))(v8);
        }
        operator delete(v5);
        uint64_t v5 = v7;
      }
      while (v7 != v2);
    }
  }
  size_t v9 = *((void *)this + 20);
  if (v9) {
    dispatch_release(v9);
  }
  __darwin_ino64_t v10 = (std::__shared_weak_count *)*((void *)this + 19);
  if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
    if (!*((void *)this + 17)) {
      goto LABEL_22;
    }
  }
  else if (!*((void *)this + 17))
  {
    goto LABEL_22;
  }
  unint64_t v11 = *((void *)this + 15);
  uint64_t v12 = (char *)*((void *)this + 16);
  uint64_t v13 = *(void *)v12;
  *(void *)(v13 + 8) = *(void *)(v11 + 8);
  **(void **)(v11 + 8) = v13;
  *((void *)this + 17) = 0;
  if (v12 != v2)
  {
    do
    {
      uint64_t v14 = (char *)*((void *)v12 + 1);
      int v15 = (atomic_uint *)*((void *)v12 + 3);
      if (v15 && atomic_fetch_add(v15 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v15 + 24))(v15);
      }
      operator delete(v12);
      uint64_t v12 = v14;
    }
    while (v14 != v2);
  }
LABEL_22:
  *(void *)this = &unk_1F20F8BF8;
  MEMORY[0x1C8790F40]((char *)this + 8);
  long long v16 = *((void *)this + 12);
  if (v16) {
    dispatch_release(v16);
  }
  long long v17 = *((void *)this + 11);
  if (v17) {
    dispatch_release(v17);
  }
  unint64_t v18 = (std::__shared_weak_count *)*((void *)this + 10);
  if (v18) {
    std::__shared_weak_count::__release_weak(v18);
  }
}

uint64_t ctu::Loggable<data::TransportService::State,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig(uint64_t a1)
{
  return MEMORY[0x1F417DA50](a1 + 8);
}

void ctu::Loggable<data::TransportService::State,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName(char *a1@<X8>)
{
  a1[23] = 12;
  strcpy(a1, "ipc.svc.data");
}

uint64_t ctu::Loggable<data::TransportService::State,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return MEMORY[0x1F417DD10](a1 + 8);
}

void *ctu::SharedLoggable<data::TransportService::State,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(void *a1)
{
  *a1 = &unk_1F20F8BF8;
  MEMORY[0x1C8790F40](a1 + 1);
  uint64_t v2 = a1[12];
  if (v2) {
    dispatch_release(v2);
  }
  unint64_t v3 = a1[11];
  if (v3) {
    dispatch_release(v3);
  }
  long long v4 = (std::__shared_weak_count *)a1[10];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

void ctu::SharedLoggable<data::TransportService::State,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(void *a1)
{
  *a1 = &unk_1F20F8BF8;
  MEMORY[0x1C8790F40](a1 + 1);
  uint64_t v2 = a1[12];
  if (v2) {
    dispatch_release(v2);
  }
  unint64_t v3 = a1[11];
  if (v3) {
    dispatch_release(v3);
  }
  long long v4 = (std::__shared_weak_count *)a1[10];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }

  operator delete(a1);
}

void *ctu::Loggable<data::TransportService::State,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_1F20F8BF8;
  MEMORY[0x1C8790F40](a1 + 1);
  return a1;
}

void ctu::Loggable<data::TransportService::State,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_1F20F8BF8;
  MEMORY[0x1C8790F40](a1 + 1);

  operator delete(a1);
}

void data::TransportService::State::handleUILockStateChange_sync(data::TransportService::State *this, int a2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  long long v4 = *((void *)this + 5);
  if (!os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    if (a2) {
      return;
    }
LABEL_7:
    data::TransportService::State::unblockThrottling_sync(this);
    return;
  }
  uint64_t v5 = "unlocked";
  if (a2) {
    uint64_t v5 = "locked";
  }
  int v6 = 136315138;
  uint64_t v7 = v5;
  _os_log_impl(&dword_1C5767000, v4, OS_LOG_TYPE_DEFAULT, "#I UI has %s", (uint8_t *)&v6, 0xCu);
  if ((a2 & 1) == 0) {
    goto LABEL_7;
  }
}

uint64_t ___ZN3ctu20SharedSynchronizableIN4data16TransportService5StateEE13connect_eventIN5boost8signals26signalIFvbENS7_19optional_last_valueIvEEiNSt3__14lessIiEENS6_8functionIS9_EENSF_IFvRKNS7_10connectionEbEEENS7_5mutexEEES3_vJbEEEDTcl7connectfp_cvNSC_10shared_ptrIS3_EE_EcvP16dispatch_queue_s_EcvPFT1_DpT2_ELi0EEERT_MT0_FSS_SU_E_block_invoke(void *a1)
{
  uint64_t v1 = (uint64_t (*)(void *))a1[5];
  uint64_t v2 = a1[6];
  unint64_t v3 = (void *)(a1[4] + (v2 >> 1) - 72);
  if (v2) {
    return (*(uint64_t (**)(void))(*v3 + v1))();
  }
  else {
    return v1(v3);
  }
}

_OWORD *boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>::slot<ctu::DispatchSlot<dispatch::block<void({block_pointer})(BOOL)>>>(_OWORD *a1, uint64_t a2)
{
  *a1 = 0u;
  a1[1] = 0u;
  boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>::init_slot_function<ctu::DispatchSlot<dispatch::block<void({block_pointer})(BOOL)>>>((uint64_t)a1, a2);
  return a1;
}

void sub_1C5875380(_Unwind_Exception *exception_object)
{
  unint64_t v3 = (unint64_t)v1[3];
  if (v3)
  {
    if ((v3 & 1) == 0)
    {
      long long v4 = *(void (**)(void **, void **, uint64_t))(v3 & 0xFFFFFFFFFFFFFFFELL);
      if (v4) {
        v4(v1 + 4, v1 + 4, 2);
      }
    }
    v1[3] = 0;
  }
  uint64_t v5 = *v1;
  if (*v1)
  {
    uint64_t v6 = (uint64_t)v1[1];
    uint64_t v7 = *v1;
    if ((void *)v6 != v5)
    {
      do
      {
        v6 -= 24;
        boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>::destroy_content(v6);
      }
      while ((void *)v6 != v5);
      uint64_t v7 = *v1;
    }
    v1[1] = v5;
    operator delete(v7);
  }
  _Unwind_Resume(exception_object);
}

void **boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>::~slot(void **a1)
{
  unint64_t v2 = (unint64_t)a1[3];
  if (v2)
  {
    if ((v2 & 1) == 0)
    {
      unint64_t v3 = *(void (**)(void **, void **, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
      if (v3) {
        v3(a1 + 4, a1 + 4, 2);
      }
    }
    a1[3] = 0;
  }
  long long v4 = *a1;
  if (*a1)
  {
    uint64_t v5 = (uint64_t)a1[1];
    uint64_t v6 = *a1;
    if ((void *)v5 != v4)
    {
      do
      {
        v5 -= 24;
        boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>::destroy_content(v5);
      }
      while ((void *)v5 != v4);
      uint64_t v6 = *a1;
    }
    a1[1] = v4;
    operator delete(v6);
  }
  return a1;
}

uint64_t ctu::DispatchSlot<dispatch::block<void({block_pointer})(BOOL)>>::~DispatchSlot(uint64_t a1)
{
  dispatch_release(*(dispatch_object_t *)a1);
  unint64_t v2 = *(const void **)(a1 + 8);
  if (v2) {
    _Block_release(v2);
  }
  return a1;
}

void boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::connect(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, unint64_t *a4@<X8>)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  *(void *)&long long v8 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v13[8] = v8;
  v13[9] = v8;
  v13[6] = v8;
  v13[7] = v8;
  v13[4] = v8;
  void v13[5] = v8;
  v13[2] = v8;
  v13[3] = v8;
  v13[0] = v8;
  v13[1] = v8;
  size_t v9 = *(pthread_mutex_t **)(a1 + 24);
  unint64_t v14 = 10;
  long long __p = v13;
  uint64_t v16 = 0;
  long long v17 = v9;
  pthread_mutex_lock(v9);
  boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::nolock_connect((uint64_t ***)a1, v13, a2, a3, a4);
  pthread_mutex_unlock(v17);
  __darwin_ino64_t v10 = (char *)__p;
  if (__p)
  {
    if (v16 - 1 >= 0)
    {
      unint64_t v11 = (char *)__p + 16 * v16;
      do
      {
        uint64_t v12 = (atomic_uint *)*((void *)v11 - 1);
        if (v12)
        {
          if (atomic_fetch_add(v12 + 2, 0xFFFFFFFF) == 1)
          {
            (*(void (**)(atomic_uint *))(*(void *)v12 + 16))(v12);
            if (atomic_fetch_add(v12 + 3, 0xFFFFFFFF) == 1) {
              (*(void (**)(atomic_uint *))(*(void *)v12 + 24))(v12);
            }
          }
        }
        v11 -= 16;
      }
      while (v11 > v10);
    }
    if (v14 >= 0xB) {
      operator delete(__p);
    }
  }
}

void sub_1C5875640(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

atomic_uint *boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::nolock_connect@<X0>(uint64_t ***a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, unint64_t *a5@<X8>)
{
  unint64_t v13 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v14 = 0xAAAAAAAAAAAAAAAALL;
  boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::create_new_connection((uint64_t)a1, a2, a3, (uint64_t)&v13);
  *(void *)uint64_t v12 = 0xAAAAAA00AAAAAAAALL;
  *(_DWORD *)&v12[8] = -1431655766;
  if (a4)
  {
    *(_DWORD *)uint64_t v12 = 0;
    long long v8 = **a1;
    int v15 = (uint64_t *)v8[3];
  }
  else
  {
    *(_DWORD *)uint64_t v12 = 2;
    long long v8 = **a1;
    int v15 = v8 + 4;
  }
  boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>::m_insert(v8, (uint64_t *)&v15, (int *)v12, &v13);
  unint64_t v10 = v13;
  uint64_t result = (atomic_uint *)v14;
  *(_DWORD *)(v13 + 64) = *(_DWORD *)v12;
  *(void *)(v10 + 68) = *(void *)&v12[4];
  if (!result)
  {
    *a5 = v10;
    a5[1] = 0;
    unint64_t v11 = (atomic_uint *)v14;
    if (!v14) {
      return result;
    }
    goto LABEL_10;
  }
  atomic_fetch_add_explicit(result + 3, 1u, memory_order_relaxed);
  *a5 = v10;
  a5[1] = (unint64_t)result;
  atomic_fetch_add_explicit(result + 3, 1u, memory_order_relaxed);
  if (atomic_fetch_add(result + 3, 0xFFFFFFFF) == 1) {
    uint64_t result = (atomic_uint *)(*(uint64_t (**)(atomic_uint *))(*(void *)result + 24))(result);
  }
  unint64_t v11 = (atomic_uint *)v14;
  if (v14)
  {
LABEL_10:
    if (atomic_fetch_add(v11 + 2, 0xFFFFFFFF) == 1)
    {
      uint64_t result = (atomic_uint *)(*(uint64_t (**)(atomic_uint *))(*(void *)v11 + 16))(v11);
      if (atomic_fetch_add(v11 + 3, 0xFFFFFFFF) == 1) {
        return (atomic_uint *)(*(uint64_t (**)(atomic_uint *))(*(void *)v11 + 24))(v11);
      }
    }
  }
  return result;
}

void sub_1C58758DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>::~shared_ptr((uint64_t)va);
  _Unwind_Resume(a1);
}

atomic_uint *boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::create_new_connection@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::nolock_force_unique_connection_list((uint64_t ***)a1, a2);
  uint64_t v7 = operator new(0x50uLL);
  boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>::connection_body((uint64_t)v7, a3, (void *)(a1 + 24));
  *(void *)a4 = v7;
  *(void *)(a4 + 8) = 0;
  return boost::detail::sp_pointer_construct<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>,boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>(a4, (uint64_t)v7, (atomic_uint **)(a4 + 8));
}

void sub_1C5875958(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *v1;
  if (*v1 && atomic_fetch_add(v3 + 2, 0xFFFFFFFF) == 1)
  {
    (*(void (**)(atomic_uint *))(*(void *)v3 + 16))(v3);
    if (atomic_fetch_add(v3 + 3, 0xFFFFFFFF) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)v3 + 24))(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_1C58759E8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>::~shared_ptr(uint64_t a1)
{
  unint64_t v2 = *(atomic_uint **)(a1 + 8);
  if (v2)
  {
    if (atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
      if (atomic_fetch_add(v2 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v2 + 24))(v2);
      }
    }
  }
  return a1;
}

uint64_t *boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::nolock_force_unique_connection_list(uint64_t ***a1, void *a2)
{
  unint64_t v2 = a2;
  unint64_t v3 = a1;
  long long v4 = a1[1];
  if (v4 && atomic_load_explicit((atomic_uint *volatile)v4 + 2, memory_order_acquire) == 1)
  {
    uint64_t v5 = **a1;
    uint64_t v6 = a1[2];
    if (v6 == (uint64_t **)v5) {
      uint64_t v6 = (uint64_t **)v5[1];
    }
    *(void *)&long long v16 = v6;
    int v7 = 2;
  }
  else
  {
    long long v8 = (uint64_t *)operator new(0x20uLL);
    size_t v9 = (uint64_t *)*v3;
    uint64_t v10 = (uint64_t)**v3;
    unint64_t v11 = operator new(0x40uLL);
    boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>::grouped_list((uint64_t)v11, v10);
    boost::shared_ptr<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>>::shared_ptr<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>>(v8, (uint64_t)v11);
    void v8[2] = v9[2];
    uint64_t v12 = v9[3];
    v8[3] = v12;
    if (v12) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 + 8), 1u, memory_order_relaxed);
    }
    boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::invocation_state>::shared_ptr<boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::invocation_state>((uint64_t *)&v16, (uint64_t)v8);
    unint64_t v13 = (uint64_t *)*v3;
    unint64_t v14 = (atomic_uint *)v3[1];
    *(_OWORD *)unint64_t v3 = v16;
    *(void *)&long long v16 = v13;
    *((void *)&v16 + 1) = v14;
    if (v14)
    {
      if (atomic_fetch_add(v14 + 2, 0xFFFFFFFF) == 1)
      {
        (*(void (**)(atomic_uint *))(*(void *)v14 + 16))(v14);
        if (atomic_fetch_add(v14 + 3, 0xFFFFFFFF) == 1) {
          (*(void (**)(atomic_uint *))(*(void *)v14 + 24))(v14);
        }
      }
    }
    *(void *)&long long v16 = (**v3)[1];
    a1 = v3;
    a2 = v2;
    int v7 = 0;
  }
  return boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::nolock_cleanup_connections_from(a1, a2, 1, (uint64_t **)&v16, v7);
}

void sub_1C5875C44(_Unwind_Exception *a1)
{
  operator delete(v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1C5875C60(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::nolock_cleanup_connections_from(uint64_t ***a1, void *a2, char a3, uint64_t **a4, int a5)
{
  uint64_t result = *a4;
  long long v22 = result;
  int v7 = *a1;
  long long v8 = **a1;
  if (v8 != result)
  {
    unsigned int v9 = a5 - 1;
    if (a3)
    {
      unsigned int v11 = 0;
      do
      {
        uint64_t v13 = result[2];
        unint64_t v14 = *(uint64_t **)(v13 + 32);
        if (v14)
        {
          for (uint64_t i = *v14; i != v14[1]; i += 24)
          {
            if ((*(_DWORD *)i ^ (*(int *)i >> 31)) > 1)
            {
              if ((*(uint64_t (**)(void))(**(void **)(i + 8) + 24))(*(void *)(i + 8))) {
                goto LABEL_18;
              }
            }
            else
            {
              uint64_t v16 = *(void *)(i + 16);
              if (!v16 || !atomic_load_explicit((atomic_uint *volatile)(v16 + 8), memory_order_acquire))
              {
LABEL_18:
                if (*(unsigned char *)(v13 + 24))
                {
                  *(unsigned char *)(v13 + 24) = 0;
                  boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::mutex>((_DWORD *)v13, a2);
                }
                break;
              }
            }
          }
        }
        uint64_t v17 = v22[2];
        if (*(unsigned char *)(v17 + 24)) {
          uint64_t result = (uint64_t *)v22[1];
        }
        else {
          uint64_t result = (uint64_t *)boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>::erase(**a1, (int *)(v17 + 64), &v22);
        }
        long long v22 = result;
        ++v11;
      }
      while (result != **a1 && v9 >= v11);
    }
    else
    {
      unsigned int v18 = 1;
      do
      {
        while (1)
        {
          uint64_t v20 = result[2];
          if (*(unsigned char *)(v20 + 24)) {
            break;
          }
          uint64_t result = (uint64_t *)boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>::erase(v8, (int *)(v20 + 64), &v22);
          int v7 = *a1;
          long long v22 = result;
          long long v8 = *v7;
          if (result == *v7 || v9 < v18++) {
            goto LABEL_33;
          }
        }
        uint64_t result = (uint64_t *)result[1];
        long long v22 = result;
        long long v8 = *v7;
      }
      while (result != *v7 && v9 >= v18++);
    }
  }
LABEL_33:
  a1[2] = (uint64_t **)result;
  return result;
}

uint64_t *boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::invocation_state>::shared_ptr<boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::invocation_state>(uint64_t *a1, uint64_t a2)
{
  *a1 = a2;
  a1[1] = 0;
  boost::detail::shared_count::shared_count<boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::invocation_state>(&v5, a2);
  unint64_t v3 = (atomic_uint *)a1[1];
  a1[1] = (uint64_t)v5;
  uint64_t v5 = v3;
  if (v3)
  {
    if (atomic_fetch_add(v3 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v3 + 16))(v3);
      if (atomic_fetch_add(v3 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v3 + 24))(v3);
      }
    }
  }
  return a1;
}

void sub_1C5875EE0(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(atomic_uint **)(v1 + 8);
  if (v3 && atomic_fetch_add(v3 + 2, 0xFFFFFFFF) == 1)
  {
    (*(void (**)(atomic_uint *))(*(void *)v3 + 16))(v3);
    if (atomic_fetch_add(v3 + 3, 0xFFFFFFFF) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)v3 + 24))(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

void *boost::detail::shared_count::shared_count<boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::invocation_state>(void *a1, uint64_t a2)
{
  *a1 = 0;
  long long v4 = operator new(0x18uLL);
  v4[1] = 0x100000001;
  *long long v4 = &unk_1F20F8EE8;
  uint64_t v4[2] = a2;
  *a1 = v4;
  return a1;
}

void sub_1C5875FD0(void *a1)
{
  __cxa_begin_catch(a1);
  if (v1)
  {
    unint64_t v2 = (atomic_uint *)v1[3];
    if (v2)
    {
      if (atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1)
      {
        (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
        if (atomic_fetch_add(v2 + 3, 0xFFFFFFFF) == 1) {
          (*(void (**)(atomic_uint *))(*(void *)v2 + 24))(v2);
        }
      }
    }
    unint64_t v3 = (atomic_uint *)v1[1];
    if (v3 && atomic_fetch_add(v3 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v3 + 16))(v3);
      if (atomic_fetch_add(v3 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v3 + 24))(v3);
      }
    }
    operator delete(v1);
  }
  __cxa_rethrow();
}

void sub_1C58760F0(_Unwind_Exception *a1)
{
}

void boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::invocation_state>::dispose(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 16);
  if (v1)
  {
    unint64_t v2 = (atomic_uint *)v1[3];
    if (v2)
    {
      if (atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1)
      {
        (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
        if (atomic_fetch_add(v2 + 3, 0xFFFFFFFF) == 1) {
          (*(void (**)(atomic_uint *))(*(void *)v2 + 24))(v2);
        }
      }
    }
    unint64_t v3 = (atomic_uint *)v1[1];
    if (v3)
    {
      if (atomic_fetch_add(v3 + 2, 0xFFFFFFFF) == 1)
      {
        (*(void (**)(atomic_uint *))(*(void *)v3 + 16))(v3);
        if (atomic_fetch_add(v3 + 3, 0xFFFFFFFF) == 1) {
          (*(void (**)(atomic_uint *))(*(void *)v3 + 24))(v3);
        }
      }
    }
    operator delete(v1);
  }
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::invocation_state>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::invocation_state>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::invocation_state>::get_untyped_deleter()
{
  return 0;
}

uint64_t *boost::shared_ptr<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>>::shared_ptr<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>>(uint64_t *a1, uint64_t a2)
{
  *a1 = a2;
  a1[1] = 0;
  boost::detail::shared_count::shared_count<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>>(&v5, a2);
  unint64_t v3 = (atomic_uint *)a1[1];
  a1[1] = (uint64_t)v5;
  uint64_t v5 = v3;
  if (v3)
  {
    if (atomic_fetch_add(v3 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v3 + 16))(v3);
      if (atomic_fetch_add(v3 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v3 + 24))(v3);
      }
    }
  }
  return a1;
}

void sub_1C5876338(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(atomic_uint **)(v1 + 8);
  if (v3 && atomic_fetch_add(v3 + 2, 0xFFFFFFFF) == 1)
  {
    (*(void (**)(atomic_uint *))(*(void *)v3 + 16))(v3);
    if (atomic_fetch_add(v3 + 3, 0xFFFFFFFF) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)v3 + 24))(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>::grouped_list(uint64_t a1, uint64_t a2)
{
  long long v4 = std::list<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>::list((void *)a1, (void *)a2);
  double v4[3] = 0;
  v4[4] = 0;
  v4[5] = 0;
  *((unsigned char *)v4 + 48) = *(unsigned char *)(a2 + 48);
  double v4[3] = v4 + 4;
  uint64_t v5 = (void *)(a2 + 32);
  std::map<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>,boost::signals2::detail::group_key_less<int,std::less<int>>,std::allocator<std::pair<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>> const,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>>>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>>,std::__tree_node<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>>,void *> *,long>>>(v4 + 3, *(int **)(a2 + 24), (int *)(a2 + 32));
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  uint64_t v6 = *(void **)(a2 + 24);
  if (v6 != (void *)(a2 + 32))
  {
    int v7 = *(void **)(a1 + 24);
    uint64_t v8 = *(void *)(a1 + 8);
    do
    {
      v7[6] = v8;
      uint64_t v9 = a2;
      if (v6 != v5) {
        uint64_t v9 = v6[6];
      }
      uint64_t v10 = (void *)v6[1];
      unsigned int v11 = v10;
      uint64_t v12 = v6;
      if (v10)
      {
        do
        {
          uint64_t v13 = v11;
          unsigned int v11 = (void *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          uint64_t v13 = (void *)v12[2];
          BOOL v14 = *v13 == (void)v12;
          uint64_t v12 = v13;
        }
        while (!v14);
      }
      uint64_t v15 = a2;
      if (v13 != v5) {
        uint64_t v15 = v13[6];
      }
      while (v9 != v15)
      {
        uint64_t v9 = *(void *)(v9 + 8);
        uint64_t v8 = *(void *)(v8 + 8);
      }
      if (v10)
      {
        do
        {
          uint64_t v16 = v10;
          uint64_t v10 = (void *)*v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          uint64_t v16 = (void *)v6[2];
          BOOL v14 = *v16 == (void)v6;
          uint64_t v6 = v16;
        }
        while (!v14);
      }
      uint64_t v17 = (void *)v7[1];
      if (v17)
      {
        do
        {
          unsigned int v18 = v17;
          uint64_t v17 = (void *)*v17;
        }
        while (v17);
      }
      else
      {
        do
        {
          unsigned int v18 = (void *)v7[2];
          BOOL v14 = *v18 == (void)v7;
          int v7 = v18;
        }
        while (!v14);
      }
      uint64_t v6 = v16;
      int v7 = v18;
    }
    while (v16 != v5);
  }
  return a1;
}

void sub_1C5876524(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy(v2, *(void **)(v1 + 32));
  std::list<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>::~list((uint64_t *)v1);
  _Unwind_Resume(a1);
}

void *std::list<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>::list(void *a1, void *a2)
{
  *a1 = a1;
  a1[1] = a1;
  a1[2] = 0;
  unint64_t v3 = (void *)a2[1];
  if (v3 != a2)
  {
    uint64_t v5 = 0;
    uint64_t v6 = a1;
    do
    {
      int v7 = operator new(0x20uLL);
      uint64_t v8 = v3[3];
      _DWORD v7[2] = v3[2];
      void v7[3] = v8;
      if (v8)
      {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v8 + 8), 1u, memory_order_relaxed);
        uint64_t v6 = (void *)*a1;
        uint64_t v5 = a1[2];
      }
      *int v7 = v6;
      v7[1] = a1;
      v6[1] = v7;
      *a1 = v7;
      a1[2] = ++v5;
      unint64_t v3 = (void *)v3[1];
      uint64_t v6 = v7;
    }
    while (v3 != a2);
  }
  return a1;
}

void sub_1C58765EC(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    uint64_t v5 = (uint64_t *)v1[1];
    uint64_t v6 = *v5;
    *(void *)(v6 + 8) = *(void *)(v3 + 8);
    **(void **)(v3 + 8) = v6;
    v1[2] = 0;
    if (v5 != v1)
    {
      do
      {
        int v7 = (uint64_t *)v5[1];
        uint64_t v8 = (atomic_uint *)v5[3];
        if (v8 && atomic_fetch_add(v8 + 2, 0xFFFFFFFF) == 1)
        {
          (*(void (**)(atomic_uint *))(*(void *)v8 + 16))(v8);
          if (atomic_fetch_add(v8 + 3, 0xFFFFFFFF) == 1) {
            (*(void (**)(atomic_uint *))(*(void *)v8 + 24))(v8);
          }
        }
        operator delete(v5);
        uint64_t v5 = v7;
      }
      while (v7 != v1);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::list<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>::~list(uint64_t *a1)
{
  if (a1[2])
  {
    uint64_t v2 = *a1;
    uint64_t v3 = (uint64_t *)a1[1];
    uint64_t v4 = *v3;
    *(void *)(v4 + 8) = *(void *)(*a1 + 8);
    **(void **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        uint64_t v5 = (uint64_t *)v3[1];
        uint64_t v6 = (atomic_uint *)v3[3];
        if (v6)
        {
          if (atomic_fetch_add(v6 + 2, 0xFFFFFFFF) == 1)
          {
            (*(void (**)(atomic_uint *))(*(void *)v6 + 16))(v6);
            if (atomic_fetch_add(v6 + 3, 0xFFFFFFFF) == 1) {
              (*(void (**)(atomic_uint *))(*(void *)v6 + 24))(v6);
            }
          }
        }
        operator delete(v3);
        uint64_t v3 = v5;
      }
      while (v5 != a1);
    }
  }
  return a1;
}

uint64_t *std::map<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>,boost::signals2::detail::group_key_less<int,std::less<int>>,std::allocator<std::pair<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>> const,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>>>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>>,std::__tree_node<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>>,void *> *,long>>>(uint64_t *result, int *a2, int *a3)
{
  if (a2 != a3)
  {
    v19[9] = v3;
    v19[10] = v4;
    uint64_t v6 = a2;
    int v7 = result;
    uint64_t v8 = result + 1;
    do
    {
      unsigned int v18 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
      v19[0] = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
      uint64_t result = std::__tree<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>>,std::__map_value_compare<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>>,boost::signals2::detail::group_key_less<int,std::less<int>>,false>,std::allocator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>>>>::__find_equal<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>>(v7, v8, v19, &v18, v6 + 8);
      if (*result)
      {
        uint64_t v9 = (int *)*((void *)v6 + 1);
        if (v9) {
          goto LABEL_11;
        }
      }
      else
      {
        uint64_t v10 = result;
        unsigned int v11 = operator new(0x38uLL);
        uint64_t v12 = *((void *)v6 + 6);
        v11[2] = *((_OWORD *)v6 + 2);
        *((void *)v11 + 6) = v12;
        uint64_t v13 = v19[0];
        *(void *)unsigned int v11 = 0;
        *((void *)v11 + 1) = 0;
        *((void *)v11 + 2) = v13;
        *uint64_t v10 = (uint64_t)v11;
        BOOL v14 = *(void **)*v7;
        if (v14)
        {
          *int v7 = (uint64_t)v14;
          uint64_t v15 = (uint64_t *)*v10;
        }
        else
        {
          uint64_t v15 = (uint64_t *)v11;
        }
        uint64_t result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v7[1], v15);
        ++v7[2];
        uint64_t v9 = (int *)*((void *)v6 + 1);
        if (v9)
        {
          do
          {
LABEL_11:
            uint64_t v16 = v9;
            uint64_t v9 = *(int **)v9;
          }
          while (v9);
          goto LABEL_3;
        }
      }
      do
      {
        uint64_t v16 = (int *)*((void *)v6 + 2);
        BOOL v17 = *(void *)v16 == (void)v6;
        uint64_t v6 = v16;
      }
      while (!v17);
LABEL_3:
      uint64_t v6 = v16;
    }
    while (v16 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>>,std::__map_value_compare<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>>,boost::signals2::detail::group_key_less<int,std::less<int>>,false>,std::allocator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>>>>::__find_equal<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>>(void *a1, uint64_t *a2, uint64_t **a3, uint64_t **a4, int *a5)
{
  uint64_t v5 = a1 + 1;
  if (a1 + 1 == a2) {
    goto LABEL_8;
  }
  int v6 = *a5;
  int v7 = *((_DWORD *)a2 + 8);
  if (*a5 == v7)
  {
    if (v6 != 1)
    {
LABEL_6:
      *a3 = a2;
      *a4 = a2;
      return (uint64_t *)a4;
    }
    int v8 = a5[2];
    int v9 = *((_DWORD *)a2 + 10);
    if (v8 >= v9)
    {
      if (v9 >= v8) {
        goto LABEL_6;
      }
      goto LABEL_15;
    }
LABEL_8:
    unsigned int v11 = (uint64_t *)*a2;
    if ((uint64_t *)*a1 == a2)
    {
      uint64_t v13 = a2;
    }
    else
    {
      if (v11)
      {
        uint64_t v12 = (uint64_t *)*a2;
        do
        {
          uint64_t v13 = v12;
          uint64_t v12 = (uint64_t *)v12[1];
        }
        while (v12);
      }
      else
      {
        BOOL v17 = a2;
        do
        {
          uint64_t v13 = (uint64_t *)v17[2];
          BOOL v18 = *v13 == (void)v17;
          BOOL v17 = v13;
        }
        while (v18);
      }
      int v19 = *((_DWORD *)v13 + 8);
      int v20 = *a5;
      if (v19 == *a5)
      {
        if (v19 != 1 || *((_DWORD *)v13 + 10) >= a5[2]) {
          goto LABEL_24;
        }
      }
      else if (v19 >= v20)
      {
LABEL_24:
        unint64_t v21 = (void *)*v5;
        if (!*v5)
        {
          *a3 = v5;
          return a1 + 1;
        }
        if (v20 != 1)
        {
          while (1)
          {
            int v26 = *((_DWORD *)v21 + 8);
            long long v23 = v21;
            if (v20 == v26) {
              break;
            }
            if (v20 < v26)
            {
              unint64_t v21 = (void *)*v21;
              uint64_t v5 = v23;
              if (!*v23) {
                break;
              }
            }
            else
            {
              if (v26 >= v20) {
                break;
              }
              uint64_t v5 = v21 + 1;
              unint64_t v21 = (void *)v21[1];
              if (!v21) {
                break;
              }
            }
          }
LABEL_40:
          *a3 = v23;
          return v5;
        }
        int v22 = a5[2];
        while (1)
        {
          long long v23 = v21;
          int v24 = *((_DWORD *)v21 + 8);
          if (v24 == 1)
          {
            int v25 = *((_DWORD *)v23 + 10);
            if (v22 >= v25)
            {
              if (v25 >= v22) {
                goto LABEL_40;
              }
              goto LABEL_33;
            }
LABEL_27:
            unint64_t v21 = (void *)*v23;
            uint64_t v5 = v23;
            if (!*v23) {
              goto LABEL_40;
            }
          }
          else
          {
            if (v24 > 1) {
              goto LABEL_27;
            }
LABEL_33:
            uint64_t v5 = v23 + 1;
            unint64_t v21 = (void *)v23[1];
            if (!v21) {
              goto LABEL_40;
            }
          }
        }
      }
    }
    if (v11)
    {
      *a3 = v13;
      return v13 + 1;
    }
    else
    {
      *a3 = a2;
      return a2;
    }
  }
  if (v6 < v7) {
    goto LABEL_8;
  }
  if (v7 >= v6) {
    goto LABEL_6;
  }
LABEL_15:
  uint64_t v14 = a2[1];
  if (v14)
  {
    uint64_t v15 = (uint64_t *)a2[1];
    do
    {
      uint64_t v16 = v15;
      uint64_t v15 = (uint64_t *)*v15;
    }
    while (v15);
  }
  else
  {
    int v27 = a2;
    do
    {
      uint64_t v16 = (uint64_t *)v27[2];
      BOOL v18 = *v16 == (void)v27;
      int v27 = v16;
    }
    while (!v18);
  }
  if (v16 == v5) {
    goto LABEL_56;
  }
  int v28 = *((_DWORD *)v16 + 8);
  if (v6 == v28)
  {
    if (v6 == 1)
    {
      int v29 = a5[2];
      if (v29 >= *((_DWORD *)v16 + 10))
      {
        int v30 = (void *)*v5;
        if (!*v5)
        {
          *a3 = v5;
          return a1 + 1;
        }
        goto LABEL_61;
      }
      goto LABEL_56;
    }
    goto LABEL_58;
  }
  if (v6 < v28)
  {
LABEL_56:
    if (v14)
    {
      *a3 = v16;
      return v16;
    }
    else
    {
      *a3 = a2;
      return a2 + 1;
    }
  }
LABEL_58:
  int v30 = (void *)*v5;
  if (*v5)
  {
    if (v6 == 1)
    {
      int v29 = a5[2];
LABEL_61:
      uint64_t v31 = v30;
      while (1)
      {
        int v30 = v31;
        int v32 = *((_DWORD *)v31 + 8);
        if (v32 == 1)
        {
          int v33 = *((_DWORD *)v30 + 10);
          if (v29 >= v33)
          {
            if (v33 >= v29) {
              goto LABEL_72;
            }
            goto LABEL_68;
          }
LABEL_62:
          uint64_t v31 = (void *)*v30;
          uint64_t v5 = v30;
          if (!*v30) {
            goto LABEL_72;
          }
        }
        else
        {
          if (v32 > 1) {
            goto LABEL_62;
          }
LABEL_68:
          uint64_t v5 = v30 + 1;
          uint64_t v31 = (void *)v30[1];
          if (!v31) {
            goto LABEL_72;
          }
        }
      }
    }
    int v34 = *((_DWORD *)v30 + 8);
    while (v6 != v34)
    {
      if (v6 < v34)
      {
        uint64_t v35 = *v30;
        uint64_t v5 = v30;
        if (!*v30) {
          break;
        }
      }
      else
      {
        if (v34 >= v6) {
          break;
        }
        uint64_t v5 = v30 + 1;
        uint64_t v35 = v30[1];
        if (!v35) {
          break;
        }
      }
      int v34 = *(_DWORD *)(v35 + 32);
      int v30 = (void *)v35;
    }
  }
  else
  {
    int v30 = a1 + 1;
  }
LABEL_72:
  *a3 = v30;
  return v5;
}

void *boost::detail::shared_count::shared_count<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>>(void *a1, uint64_t a2)
{
  *a1 = 0;
  uint64_t v4 = operator new(0x18uLL);
  v4[1] = 0x100000001;
  *uint64_t v4 = &unk_1F20F8E88;
  uint64_t v4[2] = a2;
  *a1 = v4;
  return a1;
}

void sub_1C5876C44(void *a1)
{
  __cxa_begin_catch(a1);
  if (v1)
  {
    std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)(v1 + 3), (void *)v1[4]);
    if (v1[2])
    {
      uint64_t v2 = (void *)*v1;
      uint64_t v3 = (uint64_t *)v1[1];
      uint64_t v4 = *v3;
      *(void *)(v4 + 8) = *(void *)(*v1 + 8);
      *(void *)v2[1] = v4;
      v1[2] = 0;
      if (v3 != v1)
      {
        do
        {
          uint64_t v5 = (uint64_t *)v3[1];
          int v6 = (atomic_uint *)v3[3];
          if (v6 && atomic_fetch_add(v6 + 2, 0xFFFFFFFF) == 1)
          {
            (*(void (**)(atomic_uint *))(*(void *)v6 + 16))(v6);
            if (atomic_fetch_add(v6 + 3, 0xFFFFFFFF) == 1) {
              (*(void (**)(atomic_uint *))(*(void *)v6 + 24))(v6);
            }
          }
          operator delete(v3);
          uint64_t v3 = v5;
        }
        while (v5 != v1);
      }
    }
    operator delete(v1);
  }
  __cxa_rethrow();
}

void sub_1C5876D34(_Unwind_Exception *a1)
{
}

void boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>>::dispose(uint64_t a1)
{
  uint64_t v1 = *(uint64_t **)(a1 + 16);
  if (v1)
  {
    std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)(v1 + 3), (void *)v1[4]);
    if (v1[2])
    {
      uint64_t v2 = (void *)*v1;
      uint64_t v3 = (uint64_t *)v1[1];
      uint64_t v4 = *v3;
      *(void *)(v4 + 8) = *(void *)(*v1 + 8);
      *(void *)v2[1] = v4;
      v1[2] = 0;
      if (v3 != v1)
      {
        do
        {
          uint64_t v5 = (uint64_t *)v3[1];
          int v6 = (atomic_uint *)v3[3];
          if (v6)
          {
            if (atomic_fetch_add(v6 + 2, 0xFFFFFFFF) == 1)
            {
              (*(void (**)(atomic_uint *))(*(void *)v6 + 16))(v6);
              if (atomic_fetch_add(v6 + 3, 0xFFFFFFFF) == 1) {
                (*(void (**)(atomic_uint *))(*(void *)v6 + 24))(v6);
              }
            }
          }
          operator delete(v3);
          uint64_t v3 = v5;
        }
        while (v5 != v1);
      }
    }
    operator delete(v1);
  }
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>>::get_untyped_deleter()
{
  return 0;
}

uint64_t boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>::erase(uint64_t *a1, int *a2, uint64_t **a3)
{
  int v6 = a1 + 4;
  uint64_t v5 = (uint64_t *)a1[4];
  if (!v5)
  {
    uint64_t v23 = a1[10];
    if ((uint64_t *)v23 != *a3) {
      goto LABEL_55;
    }
    int v19 = *(uint64_t **)(v23 + 8);
    int v9 = v6;
    int v24 = (uint64_t **)(v6 - 1);
    if (v19 != a1)
    {
LABEL_46:
      uint64_t v39 = a2;
      std::__tree<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>>,std::__map_value_compare<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>>,boost::signals2::detail::group_key_less<int,std::less<int>>,false>,std::allocator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>>>>::__emplace_unique_key_args<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::piecewise_construct_t const&,std::tuple<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>> const&>,std::tuple<>>(v24, a2, (uint64_t)&std::piecewise_construct, &v39)[6] = v19;
      goto LABEL_55;
    }
    goto LABEL_31;
  }
  int v7 = *a2;
  int v8 = a2[2];
  int v9 = v6;
  uint64_t v10 = v5;
  if (*a2 == 1)
  {
    do
    {
      while (1)
      {
        int v16 = *((_DWORD *)v10 + 8);
        BOOL v17 = v16 < 1;
        if (v16 == 1) {
          BOOL v17 = *((_DWORD *)v10 + 10) < v8;
        }
        if (!v17) {
          break;
        }
        uint64_t v10 = (uint64_t *)v10[1];
        if (!v10) {
          goto LABEL_19;
        }
      }
      int v9 = v10;
      uint64_t v10 = (uint64_t *)*v10;
    }
    while (v10);
  }
  else
  {
    do
    {
      int v11 = *((_DWORD *)v10 + 8);
      BOOL v12 = v11 == v7;
      BOOL v13 = v11 < v7;
      if (v11 >= v7) {
        uint64_t v14 = (uint64_t **)v10;
      }
      else {
        uint64_t v14 = (uint64_t **)(v10 + 1);
      }
      if (v13) {
        uint64_t v15 = v9;
      }
      else {
        uint64_t v15 = v10;
      }
      if (v12)
      {
        uint64_t v14 = (uint64_t **)v10;
        int v9 = v10;
      }
      else
      {
        int v9 = v15;
      }
      uint64_t v10 = *v14;
    }
    while (*v14);
  }
LABEL_19:
  uint64_t v18 = v9[6];
  if ((uint64_t *)v18 == *a3)
  {
    int v19 = *(uint64_t **)(v18 + 8);
    int v20 = v6;
    if (v7 == 1)
    {
      unint64_t v21 = v5;
      while (1)
      {
        int v22 = *((_DWORD *)v21 + 8);
        if (v22 == 1)
        {
          if (v8 < *((_DWORD *)v21 + 10)) {
            goto LABEL_27;
          }
LABEL_22:
          unint64_t v21 = (uint64_t *)v21[1];
          if (!v21) {
            goto LABEL_44;
          }
        }
        else
        {
          if (v22 <= 1) {
            goto LABEL_22;
          }
LABEL_27:
          int v20 = v21;
          unint64_t v21 = (uint64_t *)*v21;
          if (!v21) {
            goto LABEL_44;
          }
        }
      }
    }
    int v27 = v5;
    do
    {
      int v28 = *((_DWORD *)v27 + 8);
      int v29 = (uint64_t **)(v27 + 1);
      BOOL v30 = v7 == v28;
      BOOL v31 = v7 < v28;
      if (v7 >= v28) {
        int v32 = (uint64_t **)(v27 + 1);
      }
      else {
        int v32 = (uint64_t **)v27;
      }
      if (!v31) {
        int v27 = v20;
      }
      if (v30) {
        int v32 = v29;
      }
      else {
        int v20 = v27;
      }
      int v27 = *v32;
    }
    while (*v32);
LABEL_44:
    if (v20 == v6)
    {
      int v24 = (uint64_t **)(v6 - 1);
      if (v19 != a1) {
        goto LABEL_46;
      }
    }
    else
    {
      int v24 = (uint64_t **)(v6 - 1);
      if (v19 != (uint64_t *)v20[6]) {
        goto LABEL_46;
      }
    }
LABEL_31:
    int v25 = (uint64_t *)v9[1];
    if (v25)
    {
      do
      {
        int v26 = v25;
        int v25 = (uint64_t *)*v25;
      }
      while (v25);
    }
    else
    {
      int v33 = v9;
      do
      {
        int v26 = (uint64_t *)v33[2];
        BOOL v12 = *v26 == (void)v33;
        int v33 = v26;
      }
      while (!v12);
    }
    if (*v24 == v9) {
      *int v24 = v26;
    }
    --a1[5];
    std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v5, v9);
    operator delete(v9);
  }
LABEL_55:
  int v34 = *a3;
  uint64_t v35 = **a3;
  uint64_t v36 = (*a3)[1];
  *(void *)(v35 + 8) = v36;
  *(void *)v34[1] = v35;
  --a1[2];
  uint64_t v37 = (atomic_uint *)v34[3];
  if (v37)
  {
    if (atomic_fetch_add(v37 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v37 + 16))(v37);
      if (atomic_fetch_add(v37 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v37 + 24))(v37);
      }
    }
  }
  operator delete(v34);
  return v36;
}

uint64_t **std::__tree<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>>,std::__map_value_compare<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>>,boost::signals2::detail::group_key_less<int,std::less<int>>,false>,std::allocator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>>>>::__emplace_unique_key_args<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::piecewise_construct_t const&,std::tuple<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>> const&>,std::tuple<>>(uint64_t **a1, int *a2, uint64_t a3, void **a4)
{
  int v7 = a1 + 1;
  int v6 = a1[1];
  if (v6)
  {
    int v8 = *a2;
    if (*a2 != 1)
    {
      int v18 = *((_DWORD *)v6 + 8);
      if (v8 == v18) {
        return (uint64_t **)v6;
      }
      uint64_t v10 = (uint64_t **)a1[1];
      while (1)
      {
        if (v8 < v18)
        {
          int v6 = *v10;
          int v7 = v10;
          if (!*v10) {
            goto LABEL_13;
          }
        }
        else
        {
          if (v18 >= v8) {
            return v10;
          }
          int v6 = v10[1];
          if (!v6)
          {
LABEL_11:
            int v7 = v10 + 1;
            goto LABEL_13;
          }
        }
        int v18 = *((_DWORD *)v6 + 8);
        uint64_t v10 = (uint64_t **)v6;
        if (v8 == v18) {
          return (uint64_t **)v6;
        }
      }
    }
    int v9 = a2[2];
    while (1)
    {
      uint64_t v10 = (uint64_t **)v6;
      int v11 = *((_DWORD *)v6 + 8);
      if (v11 == 1)
      {
        int v12 = *((_DWORD *)v6 + 10);
        if (v9 >= v12)
        {
          if (v12 >= v9) {
            return v10;
          }
          goto LABEL_10;
        }
LABEL_4:
        int v6 = (uint64_t *)*v6;
        int v7 = v10;
        if (!*v10) {
          goto LABEL_13;
        }
      }
      else
      {
        if (v11 > 1) {
          goto LABEL_4;
        }
LABEL_10:
        int v6 = (uint64_t *)v6[1];
        if (!v6) {
          goto LABEL_11;
        }
      }
    }
  }
  uint64_t v10 = a1 + 1;
LABEL_13:
  BOOL v13 = operator new(0x38uLL);
  int v14 = *((_DWORD *)*a4 + 2);
  v13[4] = **a4;
  *((_DWORD *)v13 + 10) = v14;
  v13[6] = 0;
  *BOOL v13 = 0;
  v13[1] = 0;
  v13[2] = v10;
  *int v7 = v13;
  uint64_t v15 = (uint64_t *)**a1;
  int v16 = v13;
  if (v15)
  {
    *a1 = v15;
    int v16 = *v7;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v16);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return (uint64_t **)v13;
}

uint64_t boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>::connection_body(uint64_t a1, uint64_t a2, void *a3)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 1;
  *(_DWORD *)(a1 + 28) = 1;
  *(void *)a1 = &unk_1F20F8C38;
  int v6 = operator new(0x38uLL);
  std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::vector(v6, (uint64_t *)a2);
  v6[3] = 0;
  uint64_t v7 = *(void *)(a2 + 24);
  if (v7)
  {
    v6[3] = v7;
    if (v7)
    {
      *((_OWORD *)v6 + 2) = *(_OWORD *)(a2 + 32);
      v6[6] = *(void *)(a2 + 48);
    }
    else
    {
      (*(void (**)(uint64_t, void *, void))(v7 & 0xFFFFFFFFFFFFFFFELL))(a2 + 32, v6 + 4, 0);
    }
  }
  boost::shared_ptr<boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>>::shared_ptr<boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>>((uint64_t *)(a1 + 32), (uint64_t)v6);
  uint64_t v8 = a3[1];
  *(void *)(a1 + 48) = *a3;
  *(void *)(a1 + 56) = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 + 8), 1u, memory_order_relaxed);
  }
  *(_DWORD *)(a1 + 64) = 0;
  *(unsigned char *)(a1 + 68) = 0;
  return a1;
}

void sub_1C58773D0(_Unwind_Exception *a1)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    uint64_t v5 = (uint64_t)v2[1];
    int v6 = *v2;
    if ((void *)v5 != v4)
    {
      do
      {
        v5 -= 24;
        boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>::destroy_content(v5);
      }
      while ((void *)v5 != v4);
      int v6 = *v2;
    }
    v2[1] = v4;
    operator delete(v6);
  }
  operator delete(v2);
  boost::signals2::detail::connection_body_base::~connection_body_base(v1);
  _Unwind_Resume(a1);
}

void sub_1C587742C(_Unwind_Exception *a1)
{
  boost::signals2::detail::connection_body_base::~connection_body_base(v1);
  _Unwind_Resume(a1);
}

uint64_t *boost::shared_ptr<boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>>::shared_ptr<boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>>(uint64_t *a1, uint64_t a2)
{
  *a1 = a2;
  a1[1] = 0;
  boost::detail::shared_count::shared_count<boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>>(&v5, a2);
  uint64_t v3 = (atomic_uint *)a1[1];
  a1[1] = (uint64_t)v5;
  uint64_t v5 = v3;
  if (v3)
  {
    if (atomic_fetch_add(v3 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v3 + 16))(v3);
      if (atomic_fetch_add(v3 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v3 + 24))(v3);
      }
    }
  }
  return a1;
}

void sub_1C5877508(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(atomic_uint **)(v1 + 8);
  if (v3 && atomic_fetch_add(v3 + 2, 0xFFFFFFFF) == 1)
  {
    (*(void (**)(atomic_uint *))(*(void *)v3 + 16))(v3);
    if (atomic_fetch_add(v3 + 3, 0xFFFFFFFF) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)v3 + 24))(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

void boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>::~connection_body(void *a1)
{
  uint64_t v1 = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>::~connection_body(a1);

  operator delete(v1);
}

BOOL boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>::connected(uint64_t a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  *(void *)&long long v2 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v2 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v9[8] = v2;
  v9[9] = v2;
  void v9[6] = v2;
  v9[7] = v2;
  v9[4] = v2;
  v9[5] = v2;
  v9[2] = v2;
  void v9[3] = v2;
  v9[0] = v2;
  v9[1] = v2;
  uint64_t v3 = *(pthread_mutex_t **)(a1 + 48);
  unint64_t v10 = 10;
  long long __p = v9;
  uint64_t v12 = 0;
  BOOL v13 = v3;
  pthread_mutex_lock(v3);
  boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>::nolock_grab_tracked_objects<boost::signals2::mutex,boost::iterators::function_output_iterator<boost::signals2::detail::does_nothing>>(a1, v9);
  int v4 = *(unsigned __int8 *)(a1 + 24);
  pthread_mutex_unlock(v13);
  uint64_t v5 = (char *)__p;
  if (__p)
  {
    if (v12 - 1 >= 0)
    {
      int v6 = (char *)__p + 16 * v12;
      do
      {
        uint64_t v7 = (atomic_uint *)*((void *)v6 - 1);
        if (v7)
        {
          if (atomic_fetch_add(v7 + 2, 0xFFFFFFFF) == 1)
          {
            (*(void (**)(atomic_uint *))(*(void *)v7 + 16))(v7);
            if (atomic_fetch_add(v7 + 3, 0xFFFFFFFF) == 1) {
              (*(void (**)(atomic_uint *))(*(void *)v7 + 24))(v7);
            }
          }
        }
        v6 -= 16;
      }
      while (v6 > v5);
    }
    if (v10 >= 0xB) {
      operator delete(__p);
    }
  }
  return v4 != 0;
}

void sub_1C5877738(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>::lock(uint64_t a1)
{
  return pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 48));
}

uint64_t boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>::unlock(uint64_t a1)
{
  return pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 48));
}

uint64_t boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>::release_slot@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(result + 40);
  long long v2 = (void *)(result + 32);
  *a2 = *(void *)(result + 32);
  a2[1] = v3;
  if (v3)
  {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 + 8), 1u, memory_order_relaxed);
    int v4 = *(atomic_uint **)(result + 40);
    *long long v2 = 0;
    *(void *)(result + 40) = 0;
    if (v4 && atomic_fetch_add(v4 + 2, 0xFFFFFFFF) == 1)
    {
      uint64_t result = (*(uint64_t (**)(atomic_uint *))(*(void *)v4 + 16))(v4);
      if (atomic_fetch_add(v4 + 3, 0xFFFFFFFF) == 1) {
        return (*(uint64_t (**)(atomic_uint *))(*(void *)v4 + 24))(v4);
      }
    }
  }
  else
  {
    *long long v2 = 0;
    *(void *)(result + 40) = 0;
  }
  return result;
}

void *boost::detail::shared_count::shared_count<boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>>(void *a1, uint64_t a2)
{
  *a1 = 0;
  int v4 = operator new(0x18uLL);
  v4[1] = 0x100000001;
  *int v4 = &unk_1F20F8C90;
  uint64_t v4[2] = a2;
  *a1 = v4;
  return a1;
}

void sub_1C587797C(void *a1)
{
  __cxa_begin_catch(a1);
  if (v1)
  {
    unint64_t v2 = (unint64_t)v1[3];
    if (v2)
    {
      if ((v2 & 1) == 0)
      {
        uint64_t v3 = *(void (**)(void **, void **, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
        if (v3) {
          v3(v1 + 4, v1 + 4, 2);
        }
      }
      v1[3] = 0;
    }
    int v4 = *v1;
    if (*v1)
    {
      uint64_t v5 = (uint64_t)v1[1];
      int v6 = *v1;
      if ((void *)v5 != v4)
      {
        do
        {
          v5 -= 24;
          boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>::destroy_content(v5);
        }
        while ((void *)v5 != v4);
        int v6 = *v1;
      }
      v1[1] = v4;
      operator delete(v6);
    }
    operator delete(v1);
  }
  __cxa_rethrow();
}

void sub_1C58779FC(_Unwind_Exception *a1)
{
}

void boost::detail::sp_counted_impl_p<boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>>::dispose(uint64_t a1)
{
  uint64_t v1 = *(void ***)(a1 + 16);
  if (v1)
  {
    unint64_t v2 = (unint64_t)v1[3];
    if (v2)
    {
      if ((v2 & 1) == 0)
      {
        uint64_t v3 = *(void (**)(void **, void **, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
        if (v3) {
          v3(v1 + 4, v1 + 4, 2);
        }
      }
      v1[3] = 0;
    }
    int v4 = *v1;
    if (*v1)
    {
      uint64_t v5 = (uint64_t)v1[1];
      int v6 = *v1;
      if ((void *)v5 != v4)
      {
        do
        {
          v5 -= 24;
          boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>::destroy_content(v5);
        }
        while ((void *)v5 != v4);
        int v6 = *v1;
      }
      v1[1] = v4;
      operator delete(v6);
    }
    operator delete(v1);
  }
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>>::get_untyped_deleter()
{
  return 0;
}

void *boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>::~connection_body(void *a1)
{
  *a1 = &unk_1F20F8C38;
  unint64_t v2 = (atomic_uint *)a1[7];
  if (v2)
  {
    if (atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
      if (atomic_fetch_add(v2 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v2 + 24))(v2);
      }
    }
  }
  uint64_t v3 = (atomic_uint *)a1[5];
  if (v3)
  {
    if (atomic_fetch_add(v3 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v3 + 16))(v3);
      if (atomic_fetch_add(v3 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v3 + 24))(v3);
      }
    }
  }
  *a1 = &unk_1F20F20E8;
  int v4 = (atomic_uint *)a1[2];
  if (v4 && atomic_fetch_add(v4 + 3, 0xFFFFFFFF) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v4 + 24))(v4);
  }
  return a1;
}

void boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>::nolock_grab_tracked_objects<boost::signals2::mutex,boost::iterators::function_output_iterator<boost::signals2::detail::does_nothing>>(uint64_t a1, void *a2)
{
  void v9[3] = *MEMORY[0x1E4F143B8];
  unint64_t v2 = *(uint64_t **)(a1 + 32);
  if (v2)
  {
    uint64_t v3 = *v2;
    if (*v2 != v2[1])
    {
      while (1)
      {
        memset(v9, 170, 24);
        boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>::apply_visitor<boost::signals2::detail::lock_weak_ptr_visitor const>(v3, (uint64_t)v9);
        if ((*(_DWORD *)v3 ^ (*(int *)v3 >> 31)) == 2)
        {
          if (!(*(unsigned int (**)(void))(**(void **)(v3 + 8) + 24))(*(void *)(v3 + 8))) {
            goto LABEL_6;
          }
        }
        else
        {
          uint64_t v6 = *(void *)(v3 + 16);
          if (v6 && atomic_load_explicit((atomic_uint *volatile)(v6 + 8), memory_order_acquire))
          {
LABEL_6:
            char v7 = 0;
            if (LODWORD(v9[0]) == SLODWORD(v9[0]) >> 31) {
              goto LABEL_13;
            }
            goto LABEL_7;
          }
        }
        if (*(unsigned char *)(a1 + 24))
        {
          *(unsigned char *)(a1 + 24) = 0;
          boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::mutex>((_DWORD *)a1, a2);
        }
        char v7 = 1;
        if (LODWORD(v9[0]) == SLODWORD(v9[0]) >> 31)
        {
LABEL_13:
          uint64_t v8 = (atomic_uint *)v9[2];
          if (v9[2])
          {
            if (atomic_fetch_add((atomic_uint *volatile)(v9[2] + 8), 0xFFFFFFFF) == 1)
            {
              (*(void (**)(atomic_uint *))(*(void *)v8 + 16))(v8);
              if (atomic_fetch_add(v8 + 3, 0xFFFFFFFF) == 1) {
                (*(void (**)(atomic_uint *))(*(void *)v8 + 24))(v8);
              }
            }
          }
          goto LABEL_17;
        }
LABEL_7:
        if (v9[1]) {
          (*(void (**)(void))(*(void *)v9[1] + 8))(v9[1]);
        }
LABEL_17:
        if ((v7 & 1) == 0)
        {
          v3 += 24;
          if (v3 != *(void *)(*(void *)(a1 + 32) + 8)) {
            continue;
          }
        }
        return;
      }
    }
  }
}

void sub_1C5877E80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

atomic_uint *boost::detail::sp_pointer_construct<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>,boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>(uint64_t a1, uint64_t a2, atomic_uint **a3)
{
  uint64_t result = (atomic_uint *)operator new(0x18uLL);
  *((void *)result + 1) = 0x100000001;
  *(void *)uint64_t result = &unk_1F20F8CF0;
  *((void *)result + 2) = a2;
  uint64_t v6 = *a3;
  *a3 = result;
  if (v6 && atomic_fetch_add(v6 + 2, 0xFFFFFFFF) == 1)
  {
    uint64_t result = (atomic_uint *)(*(uint64_t (**)(atomic_uint *))(*(void *)v6 + 16))(v6);
    if (atomic_fetch_add(v6 + 3, 0xFFFFFFFF) == 1) {
      return (atomic_uint *)(*(uint64_t (**)(atomic_uint *))(*(void *)v6 + 24))(v6);
    }
  }
  return result;
}

void sub_1C5877FA0(void *a1)
{
  __cxa_begin_catch(a1);
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  __cxa_rethrow();
}

void sub_1C5877FD8(_Unwind_Exception *a1)
{
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>::dispose(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 16);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>::get_untyped_deleter()
{
  return 0;
}

void boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>::m_insert(uint64_t *a1, uint64_t *a2, int *a3, void *a4)
{
  uint64_t v8 = a1 + 4;
  int v9 = a1;
  if ((uint64_t *)*a2 != a1 + 4) {
    int v9 = *(uint64_t **)(*a2 + 48);
  }
  unint64_t v10 = operator new(0x20uLL);
  int v11 = v10;
  uint64_t v12 = a4[1];
  v10[2] = *a4;
  void v10[3] = v12;
  if (v12) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v12 + 8), 1u, memory_order_relaxed);
  }
  uint64_t v13 = *v9;
  *(void *)(v13 + 8) = v10;
  *unint64_t v10 = v13;
  *int v9 = (uint64_t)v10;
  v10[1] = v9;
  ++a1[2];
  uint64_t v14 = a1 + 3;
  uint64_t v15 = *a2;
  if ((void *)v15 == v8) {
    goto LABEL_14;
  }
  int v16 = *a3;
  int v17 = *(_DWORD *)(v15 + 32);
  BOOL v18 = *a3 < v17;
  if (*a3 == v17)
  {
    if (v16 != 1) {
      goto LABEL_16;
    }
    int v16 = a3[2];
    int v17 = *(_DWORD *)(v15 + 40);
    BOOL v18 = v16 < v17;
  }
  if (v18 || v17 < v16)
  {
LABEL_14:
    int v20 = (uint64_t *)*v8;
    if (*v8) {
      goto LABEL_25;
    }
LABEL_48:
    uint64_t v36 = *(void *)a3;
    int v37 = a3[2];
    uint64_t v38 = v11;
    std::__tree<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>>,std::__map_value_compare<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>>,boost::signals2::detail::group_key_less<int,std::less<int>>,false>,std::allocator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>>>>::__emplace_unique_key_args<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::pair<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>> const,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>>>((uint64_t **)a1 + 3, (int *)&v36, (uint64_t)&v36);
    return;
  }
LABEL_16:
  unint64_t v21 = *(void **)(v15 + 8);
  if (v21)
  {
    do
    {
      int v22 = v21;
      unint64_t v21 = (void *)*v21;
    }
    while (v21);
  }
  else
  {
    uint64_t v23 = (void *)v15;
    do
    {
      int v22 = (void *)v23[2];
      BOOL v29 = *v22 == (void)v23;
      uint64_t v23 = v22;
    }
    while (!v29);
  }
  if (*v14 == v15) {
    void *v14 = v22;
  }
  int v24 = (uint64_t *)a1[4];
  --a1[5];
  std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v24, (uint64_t *)v15);
  operator delete((void *)v15);
  int v20 = (uint64_t *)*v8;
  if (!*v8) {
    goto LABEL_48;
  }
LABEL_25:
  int v25 = *a3;
  int v26 = a3[2];
  int v27 = v8;
  if (*a3 == 1)
  {
    do
    {
      while (1)
      {
        int v32 = *((_DWORD *)v20 + 8);
        BOOL v33 = v32 < 1;
        if (v32 == 1) {
          BOOL v33 = *((_DWORD *)v20 + 10) < v26;
        }
        if (!v33) {
          break;
        }
        int v20 = (uint64_t *)v20[1];
        if (!v20) {
          goto LABEL_40;
        }
      }
      int v27 = v20;
      int v20 = (uint64_t *)*v20;
    }
    while (v20);
  }
  else
  {
    do
    {
      int v28 = *((_DWORD *)v20 + 8);
      BOOL v29 = v28 == v25;
      BOOL v30 = v28 < v25;
      if (v28 >= v25) {
        BOOL v31 = (uint64_t **)v20;
      }
      else {
        BOOL v31 = (uint64_t **)(v20 + 1);
      }
      if (!v30) {
        int v27 = v20;
      }
      if (v29)
      {
        BOOL v31 = (uint64_t **)v20;
        int v27 = v20;
      }
      int v20 = *v31;
    }
    while (*v31);
  }
LABEL_40:
  if (v27 == v8 || *((_DWORD *)v27 + 8) != v25) {
    goto LABEL_48;
  }
  if (v25 == 1)
  {
    int v34 = *((_DWORD *)v27 + 10);
    if (v34 < v26 || v26 < v34) {
      goto LABEL_48;
    }
  }
}

uint64_t **std::__tree<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>>,std::__map_value_compare<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>>,boost::signals2::detail::group_key_less<int,std::less<int>>,false>,std::allocator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>>>>::__emplace_unique_key_args<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::pair<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>> const,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>>>(uint64_t **a1, int *a2, uint64_t a3)
{
  uint64_t v6 = a1 + 1;
  uint64_t v5 = a1[1];
  if (v5)
  {
    int v7 = *a2;
    if (*a2 != 1)
    {
      int v16 = *((_DWORD *)v5 + 8);
      if (v7 == v16) {
        return (uint64_t **)v5;
      }
      int v9 = (uint64_t **)a1[1];
      while (1)
      {
        if (v7 < v16)
        {
          uint64_t v5 = *v9;
          uint64_t v6 = v9;
          if (!*v9) {
            goto LABEL_13;
          }
        }
        else
        {
          if (v16 >= v7) {
            return v9;
          }
          uint64_t v5 = v9[1];
          if (!v5)
          {
LABEL_11:
            uint64_t v6 = v9 + 1;
            goto LABEL_13;
          }
        }
        int v16 = *((_DWORD *)v5 + 8);
        int v9 = (uint64_t **)v5;
        if (v7 == v16) {
          return (uint64_t **)v5;
        }
      }
    }
    int v8 = a2[2];
    while (1)
    {
      int v9 = (uint64_t **)v5;
      int v10 = *((_DWORD *)v5 + 8);
      if (v10 == 1)
      {
        int v11 = *((_DWORD *)v5 + 10);
        if (v8 >= v11)
        {
          if (v11 >= v8) {
            return v9;
          }
          goto LABEL_10;
        }
LABEL_4:
        uint64_t v5 = (uint64_t *)*v5;
        uint64_t v6 = v9;
        if (!*v9) {
          goto LABEL_13;
        }
      }
      else
      {
        if (v10 > 1) {
          goto LABEL_4;
        }
LABEL_10:
        uint64_t v5 = (uint64_t *)v5[1];
        if (!v5) {
          goto LABEL_11;
        }
      }
    }
  }
  int v9 = a1 + 1;
LABEL_13:
  uint64_t v12 = operator new(0x38uLL);
  v12[2] = *(_OWORD *)a3;
  *((void *)v12 + 6) = *(void *)(a3 + 16);
  *(void *)uint64_t v12 = 0;
  *((void *)v12 + 1) = 0;
  *((void *)v12 + 2) = v9;
  atomic_uint *v6 = (uint64_t *)v12;
  uint64_t v13 = (uint64_t *)**a1;
  uint64_t v14 = (uint64_t *)v12;
  if (v13)
  {
    *a1 = v13;
    uint64_t v14 = *v6;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v14);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return (uint64_t **)v12;
}

void boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>::init_slot_function<ctu::DispatchSlot<dispatch::block<void({block_pointer})(BOOL)>>>(uint64_t a1, uint64_t a2)
{
  int v4 = *(NSObject **)a2;
  uint64_t v3 = *(void **)(a2 + 8);
  dispatch_object_t object = *(dispatch_object_t *)a2;
  if (v3) {
    uint64_t v3 = _Block_copy(v3);
  }
  aBlock = v3;
  dispatch_retain(v4);
  boost::function<void ()(BOOL)>::operator=<ctu::DispatchSlot<dispatch::block<void({block_pointer})(BOOL)>>>((uint64_t *)(a1 + 24), (uint64_t)&object);
  dispatch_release(object);
  if (aBlock) {
    _Block_release(aBlock);
  }
}

void sub_1C587843C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t *boost::function<void ()(BOOL)>::~function(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    if ((v2 & 1) == 0)
    {
      uint64_t v3 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
      if (v3) {
        v3(a1 + 1, a1 + 1, 2);
      }
    }
    *a1 = 0;
  }
  return a1;
}

uint64_t *boost::function<void ()(BOOL)>::operator=<ctu::DispatchSlot<dispatch::block<void({block_pointer})(BOOL)>>>(uint64_t *a1, uint64_t a2)
{
  int v4 = *(NSObject **)a2;
  uint64_t v3 = *(void **)(a2 + 8);
  dispatch_object_t object = *(dispatch_object_t *)a2;
  if (v3) {
    uint64_t v3 = _Block_copy(v3);
  }
  aBlock = v3;
  dispatch_retain(v4);
  boost::function<void ()(BOOL)>::function<ctu::DispatchSlot<dispatch::block<void({block_pointer})(BOOL)>>>(&v9, (uint64_t)&object);
  boost::function1<void,BOOL>::swap(&v9, a1);
  if (v9)
  {
    if ((v9 & 1) == 0)
    {
      uint64_t v5 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(v9 & 0xFFFFFFFFFFFFFFFELL);
      if (v5) {
        v5(v10, v10, 2);
      }
    }
    uint64_t v9 = 0;
  }
  dispatch_release(object);
  if (aBlock) {
    _Block_release(aBlock);
  }
  return a1;
}

void sub_1C5878558(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
}

void sub_1C5878574(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t *boost::function1<void,BOOL>::swap(uint64_t *result, uint64_t *a2)
{
  if (a2 != result)
  {
    uint64_t v3 = (uint64_t)result;
    uint64_t v5 = 0;
    memset(v6, 170, sizeof(v6));
    boost::function1<void,BOOL>::move_assign((uint64_t)&v5, result);
    boost::function1<void,BOOL>::move_assign(v3, a2);
    uint64_t result = (uint64_t *)boost::function1<void,BOOL>::move_assign((uint64_t)a2, &v5);
    if (v5)
    {
      if ((v5 & 1) == 0)
      {
        int v4 = *(uint64_t (**)(void *, void *, uint64_t))(v5 & 0xFFFFFFFFFFFFFFFELL);
        if (v4) {
          return (uint64_t *)v4(v6, v6, 2);
        }
      }
    }
  }
  return result;
}

void sub_1C5878624(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *boost::function<void ()(BOOL)>::function<ctu::DispatchSlot<dispatch::block<void({block_pointer})(BOOL)>>>(void *a1, uint64_t a2)
{
  int v4 = *(NSObject **)a2;
  uint64_t v3 = *(void **)(a2 + 8);
  dispatch_object_t object = *(dispatch_object_t *)a2;
  if (v3) {
    uint64_t v3 = _Block_copy(v3);
  }
  aBlock = v3;
  dispatch_retain(v4);
  boost::function1<void,BOOL>::function1<ctu::DispatchSlot<dispatch::block<void({block_pointer})(BOOL)>>>(a1, (uint64_t)&object);
  dispatch_release(object);
  if (aBlock) {
    _Block_release(aBlock);
  }
  return a1;
}

void sub_1C58786AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *boost::function1<void,BOOL>::function1<ctu::DispatchSlot<dispatch::block<void({block_pointer})(BOOL)>>>(void *a1, uint64_t a2)
{
  *a1 = 0;
  int v4 = *(NSObject **)a2;
  uint64_t v3 = *(void **)(a2 + 8);
  dispatch_object_t object = *(dispatch_object_t *)a2;
  if (v3) {
    uint64_t v3 = _Block_copy(v3);
  }
  aBlock = v3;
  dispatch_retain(v4);
  boost::function1<void,BOOL>::assign_to<ctu::DispatchSlot<dispatch::block<void({block_pointer})(BOOL)>>>((uint64_t)a1, (uint64_t)&object);
  dispatch_release(object);
  if (aBlock) {
    _Block_release(aBlock);
  }
  return a1;
}

void sub_1C5878734(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void boost::function1<void,BOOL>::assign_to<ctu::DispatchSlot<dispatch::block<void({block_pointer})(BOOL)>>>(uint64_t a1, uint64_t a2)
{
  int v4 = *(NSObject **)a2;
  uint64_t v3 = *(void **)(a2 + 8);
  dispatch_object_t object = *(dispatch_object_t *)a2;
  if (v3) {
    uint64_t v3 = _Block_copy(v3);
  }
  aBlock = v3;
  dispatch_retain(v4);
  int v5 = boost::detail::function::basic_vtable1<void,BOOL>::assign_to<ctu::DispatchSlot<dispatch::block<void({block_pointer})(BOOL)>>>((uint64_t)boost::function1<void,BOOL>::assign_to<ctu::DispatchSlot<dispatch::block<void({block_pointer})(BOOL)>>>(ctu::DispatchSlot<dispatch::block<void({block_pointer})(BOOL)>>)::stored_vtable, (uint64_t)&object, (NSObject **)(a1 + 8));
  dispatch_release(object);
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v5) {
    uint64_t v6 = boost::function1<void,BOOL>::assign_to<ctu::DispatchSlot<dispatch::block<void({block_pointer})(BOOL)>>>(ctu::DispatchSlot<dispatch::block<void({block_pointer})(BOOL)>>)::stored_vtable;
  }
  else {
    uint64_t v6 = 0;
  }
  *(void *)a1 = v6;
}

void sub_1C58787D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void boost::detail::function::functor_manager<ctu::DispatchSlot<dispatch::block<void({block_pointer})(BOOL)>>>::manage(uint64_t a1, _WORD *a2, unsigned int a3)
{
  if (a3 == 4)
  {
    a2[4] = 0;
  }
  else
  {
    boost::detail::function::functor_manager_common<ctu::DispatchSlot<dispatch::block<void({block_pointer})(BOOL)>>>::manage_small(a1, a2, a3);
  }
}

uint64_t boost::detail::function::basic_vtable1<void,BOOL>::assign_to<ctu::DispatchSlot<dispatch::block<void({block_pointer})(BOOL)>>>(uint64_t a1, uint64_t a2, NSObject **a3)
{
  uint64_t v6 = *(NSObject **)a2;
  int v5 = *(void **)(a2 + 8);
  dispatch_object_t object = *(dispatch_object_t *)a2;
  if (v5) {
    int v5 = _Block_copy(v5);
  }
  aBlock = v5;
  dispatch_retain(v6);
  uint64_t v7 = boost::detail::function::basic_vtable1<void,BOOL>::assign_to<ctu::DispatchSlot<dispatch::block<void({block_pointer})(BOOL)>>>(a1, (uint64_t)&object, a3);
  dispatch_release(object);
  if (aBlock) {
    _Block_release(aBlock);
  }
  return v7;
}

{
  const void *v4;
  NSObject *v5;
  void *v6;
  NSObject *v7;
  NSObject *v8;

  int v5 = *(NSObject **)a2;
  int v4 = *(const void **)(a2 + 8);
  if (!v4)
  {
    dispatch_retain(*(dispatch_object_t *)a2);
    *a3 = v5;
    goto LABEL_5;
  }
  uint64_t v6 = _Block_copy(v4);
  dispatch_retain(v5);
  *a3 = v5;
  if (!v6)
  {
LABEL_5:
    a3[1] = 0;
    dispatch_retain(v5);
    dispatch_release(v5);
    return 1;
  }
  uint64_t v7 = _Block_copy(v6);
  int v8 = *a3;
  a3[1] = v7;
  dispatch_retain(v8);
  dispatch_release(v5);
  _Block_release(v6);
  return 1;
}

void sub_1C5878894(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void boost::detail::function::functor_manager_common<ctu::DispatchSlot<dispatch::block<void({block_pointer})(BOOL)>>>::manage_small(uint64_t a1, _WORD *a2, unsigned int a3)
{
  if (a3 > 1)
  {
    if (a3 == 3)
    {
      uint64_t v9 = (const char *)(*(void *)(*(void *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL);
      if (v9 == (const char *)(0x80000001C59A2167 & 0x7FFFFFFFFFFFFFFFLL)
        || !strcmp(v9, (const char *)(0x80000001C59A2167 & 0x7FFFFFFFFFFFFFFFLL)))
      {
        *(void *)a2 = a1;
      }
      else
      {
        *(void *)a2 = 0;
      }
    }
    else
    {
      if (a3 != 2)
      {
        a2[4] = 0;
        return;
      }
      dispatch_release(*(dispatch_object_t *)a2);
      int v8 = (const void *)*((void *)a2 + 1);
      if (v8) {
        goto LABEL_6;
      }
    }
  }
  else
  {
    uint64_t v6 = *(NSObject **)a1;
    uint64_t v7 = *(void **)(a1 + 8);
    *(void *)a2 = *(void *)a1;
    if (v7)
    {
      uint64_t v7 = _Block_copy(v7);
      uint64_t v6 = *(NSObject **)a2;
    }
    *((void *)a2 + 1) = v7;
    dispatch_retain(v6);
    if (a3 == 1)
    {
      dispatch_release(*(dispatch_object_t *)a1);
      int v8 = *(const void **)(a1 + 8);
      if (v8) {
LABEL_6:
      }
        _Block_release(v8);
    }
  }
}

void ctu::DispatchSlot<dispatch::block<void({block_pointer})(BOOL)>>::operator()<BOOL>(uint64_t a1, char a2)
{
  int v4 = *(NSObject **)a1;
  uint64_t v3 = *(void **)(a1 + 8);
  if (v3) {
    uint64_t v3 = _Block_copy(v3);
  }
  aBlock = v3;
  boost::function<void ()(BOOL)>::function<dispatch::block<void({block_pointer})(BOOL)>>(&v11, &aBlock);
  int v5 = operator new(1uLL);
  unsigned char *v5 = a2;
  uint64_t v6 = (char *)operator new(0x20uLL);
  uint64_t v7 = v6;
  *(void *)uint64_t v6 = 0;
  uint64_t v8 = v11;
  if (v11)
  {
    *(void *)uint64_t v6 = v11;
    if (v8)
    {
      *(_OWORD *)(v6 + 8) = v12;
      *((void *)v6 + 3) = v13;
    }
    else
    {
      (*(void (**)(long long *, char *, void))(v8 & 0xFFFFFFFFFFFFFFFELL))(&v12, v6 + 8, 0);
    }
  }
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = ___Z13execute_blockP16dispatch_queue_sRKN5boost8functionIFvbEEEb_block_invoke;
  block[3] = &__block_descriptor_tmp_37;
  block[4] = v7;
  void block[5] = v5;
  dispatch_async(v4, block);
  if (v11)
  {
    if ((v11 & 1) == 0)
    {
      uint64_t v9 = *(void (**)(long long *, long long *, uint64_t))(v11 & 0xFFFFFFFFFFFFFFFELL);
      if (v9) {
        v9(&v12, &v12, 2);
      }
    }
    uint64_t v11 = 0;
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
}

void sub_1C5878B10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *aBlock, uint64_t a11)
{
  operator delete(v11);
  boost::function<void ()(BOOL)>::~function(&a11);
  if (aBlock) {
    _Block_release(aBlock);
  }
  _Unwind_Resume(a1);
}

void ___Z13execute_blockP16dispatch_queue_sRKN5boost8functionIFvbEEEb_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  if (!*v1)
  {
    std::runtime_error::runtime_error(&v7, "call to empty boost::function");
    v7.__vftable = (std::runtime_error_vtbl *)&unk_1F20F2330;
    boost::throw_exception<boost::bad_function_call>(&v7);
  }
  (*(void (**)(void *, void))((*v1 & 0xFFFFFFFFFFFFFFFELL) + 8))(v1 + 1, **(unsigned __int8 **)(a1 + 40));
  uint64_t v3 = *(uint64_t **)(a1 + 32);
  if (v3)
  {
    uint64_t v4 = *v3;
    if (*v3)
    {
      if ((v4 & 1) == 0)
      {
        int v5 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v4 & 0xFFFFFFFFFFFFFFFELL);
        if (v5) {
          v5(v3 + 1, v3 + 1, 2);
        }
      }
      *uint64_t v3 = 0;
    }
    operator delete(v3);
  }
  uint64_t v6 = *(void **)(a1 + 40);
  if (v6)
  {
    operator delete(v6);
  }
}

void sub_1C5878C44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::runtime_error a9)
{
}

void *boost::function<void ()(BOOL)>::function<dispatch::block<void({block_pointer})(BOOL)>>(void *a1, void **a2)
{
  uint64_t v3 = *a2;
  if (*a2) {
    uint64_t v3 = _Block_copy(v3);
  }
  aBlock = v3;
  boost::function1<void,BOOL>::function1<dispatch::block<void({block_pointer})(BOOL)>>(a1, &aBlock);
  if (aBlock) {
    _Block_release(aBlock);
  }
  return a1;
}

void sub_1C5878CB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *aBlock)
{
  if (aBlock) {
    _Block_release(aBlock);
  }
  _Unwind_Resume(exception_object);
}

void *boost::function1<void,BOOL>::function1<dispatch::block<void({block_pointer})(BOOL)>>(void *a1, void **a2)
{
  *a1 = 0;
  uint64_t v3 = *a2;
  if (*a2) {
    uint64_t v3 = _Block_copy(v3);
  }
  aBlock = v3;
  boost::function1<void,BOOL>::assign_to<dispatch::block<void({block_pointer})(BOOL)>>((uint64_t)a1, &aBlock);
  if (aBlock) {
    _Block_release(aBlock);
  }
  return a1;
}

void sub_1C5878D34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *aBlock)
{
  if (aBlock) {
    _Block_release(aBlock);
  }
  _Unwind_Resume(exception_object);
}

void boost::function1<void,BOOL>::assign_to<dispatch::block<void({block_pointer})(BOOL)>>(uint64_t a1, void **a2)
{
  uint64_t v3 = *a2;
  if (*a2) {
    uint64_t v3 = _Block_copy(v3);
  }
  aBlock = v3;
  int v4 = boost::detail::function::basic_vtable1<void,BOOL>::assign_to<dispatch::block<void({block_pointer})(BOOL)>>((uint64_t)boost::function1<void,BOOL>::assign_to<dispatch::block<void({block_pointer})(BOOL)>>(dispatch::block<void({block_pointer})(BOOL)>)::stored_vtable, (const void **)&aBlock, (void **)(a1 + 8));
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v4) {
    int v5 = boost::function1<void,BOOL>::assign_to<dispatch::block<void({block_pointer})(BOOL)>>(dispatch::block<void({block_pointer})(BOOL)>)::stored_vtable;
  }
  else {
    int v5 = 0;
  }
  *(void *)a1 = v5;
}

void sub_1C5878DCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *aBlock)
{
  if (aBlock) {
    _Block_release(aBlock);
  }
  _Unwind_Resume(exception_object);
}

void boost::detail::function::functor_manager<dispatch::block<void({block_pointer})(BOOL)>>::manage(void **a1, _WORD *a2, unsigned int a3)
{
  if (a3 == 4)
  {
    a2[4] = 0;
  }
  else
  {
    boost::detail::function::functor_manager_common<dispatch::block<void({block_pointer})(BOOL)>>::manage_small(a1, a2, a3);
  }
}

uint64_t boost::detail::function::void_function_obj_invoker1<dispatch::block<void({block_pointer})(BOOL)>,void,BOOL>::invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 16))();
}

uint64_t boost::detail::function::basic_vtable1<void,BOOL>::assign_to<dispatch::block<void({block_pointer})(BOOL)>>(uint64_t a1, const void **a2, void **a3)
{
  if (*a2 && (int v4 = _Block_copy(*a2), (v5 = v4) != 0))
  {
    uint64_t v6 = _Block_copy(v4);
    std::runtime_error v7 = v6;
    if (v6)
    {
      *a3 = _Block_copy(v6);
      _Block_release(v7);
    }
    else
    {
      *a3 = 0;
    }
    _Block_release(v5);
    return 1;
  }
  else
  {
    *a3 = 0;
    return 1;
  }
}

void boost::detail::function::functor_manager_common<dispatch::block<void({block_pointer})(BOOL)>>::manage_small(void **a1, _WORD *a2, unsigned int a3)
{
  if (a3 > 1)
  {
    if (a3 == 3)
    {
      uint64_t v8 = (const char *)(*(void *)(*(void *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL);
      if (v8 == (const char *)(0x80000001C59A21A5 & 0x7FFFFFFFFFFFFFFFLL)
        || !strcmp(v8, (const char *)(0x80000001C59A21A5 & 0x7FFFFFFFFFFFFFFFLL)))
      {
        *(void *)a2 = a1;
      }
      else
      {
        *(void *)a2 = 0;
      }
    }
    else
    {
      if (a3 != 2)
      {
        a2[4] = 0;
        return;
      }
      std::runtime_error v7 = *(void **)a2;
      if (*(void *)a2) {
        goto LABEL_6;
      }
    }
  }
  else
  {
    uint64_t v6 = *a1;
    if (*a1) {
      uint64_t v6 = _Block_copy(v6);
    }
    *(void *)a2 = v6;
    if (a3 == 1)
    {
      std::runtime_error v7 = *a1;
      if (*a1) {
LABEL_6:
      }
        _Block_release(v7);
    }
  }
}

uint64_t boost::function1<void,BOOL>::move_assign(uint64_t result, uint64_t *a2)
{
  if (a2 != (uint64_t *)result)
  {
    uint64_t v2 = a2;
    uint64_t v3 = (uint64_t *)result;
    uint64_t v4 = *a2;
    if (*a2)
    {
      *(void *)uint64_t result = v4;
      if (v4)
      {
        long long v7 = *(_OWORD *)(a2 + 1);
        *(void *)(result + 24) = a2[3];
        *(_OWORD *)(result + 8) = v7;
      }
      else
      {
        uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v4 & 0xFFFFFFFFFFFFFFFELL))(a2 + 1, result + 8, 1);
      }
    }
    else
    {
      uint64_t v5 = *(void *)result;
      if (!*(void *)result) {
        return result;
      }
      if ((v5 & 1) == 0)
      {
        uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 & 0xFFFFFFFFFFFFFFFELL);
        if (v6) {
          uint64_t result = v6(result + 8, result + 8, 2);
        }
      }
      uint64_t v2 = v3;
    }
    *uint64_t v2 = 0;
  }
  return result;
}

void sub_1C587911C(void *a1)
{
  __cxa_begin_catch(a1);
  *uint64_t v1 = 0;
  __cxa_rethrow();
}

void sub_1C587912C(_Unwind_Exception *a1)
{
}

uint64_t *boost::function1<void,BOOL>::~function1(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    if ((v2 & 1) == 0)
    {
      uint64_t v3 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
      if (v3) {
        v3(a1 + 1, a1 + 1, 2);
      }
    }
    *a1 = 0;
  }
  return a1;
}

void *boost::signals2::detail::foreign_weak_ptr_impl<std::weak_ptr<data::TransportService::State>>::~foreign_weak_ptr_impl(void *a1)
{
  *a1 = &unk_1F20F8D90;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void boost::signals2::detail::foreign_weak_ptr_impl<std::weak_ptr<data::TransportService::State>>::~foreign_weak_ptr_impl(void *__p)
{
  void *__p = &unk_1F20F8D90;
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  operator delete(__p);
}

void boost::signals2::detail::foreign_weak_ptr_impl<std::weak_ptr<data::TransportService::State>>::lock(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (v4)
  {
    uint64_t v5 = std::__shared_weak_count::lock(v4);
    if (v5)
    {
      uint64_t v6 = *(void *)(a1 + 8);
      goto LABEL_6;
    }
  }
  else
  {
    uint64_t v5 = 0;
  }
  uint64_t v6 = 0;
LABEL_6:
  long long v7 = operator new(0x18uLL);
  *long long v7 = &unk_1F20F8DE0;
  v7[1] = v6;
  _DWORD v7[2] = v5;
  if (v5)
  {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    *a2 = v7;
    if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  else
  {
    *a2 = v7;
  }
}

void sub_1C5879350(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

BOOL boost::signals2::detail::foreign_weak_ptr_impl<std::weak_ptr<data::TransportService::State>>::expired(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  return !v1 || *(void *)(v1 + 8) == -1;
}

void *boost::signals2::detail::foreign_weak_ptr_impl<std::weak_ptr<data::TransportService::State>>::clone(uint64_t a1)
{
  uint64_t result = operator new(0x18uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *uint64_t result = &unk_1F20F8D90;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void *boost::signals2::detail::foreign_shared_ptr_impl<std::shared_ptr<data::TransportService::State>>::~foreign_shared_ptr_impl(void *result)
{
  uint64_t v1 = result;
  *uint64_t result = &unk_1F20F8DE0;
  uint64_t v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void boost::signals2::detail::foreign_shared_ptr_impl<std::shared_ptr<data::TransportService::State>>::~foreign_shared_ptr_impl(void *__p)
{
  uint64_t v1 = __p;
  void *__p = &unk_1F20F8DE0;
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    long long __p = v1;
  }
  else if (((vars8 ^ (2 * vars8)) & 0x4000000000000000) != 0)
  {
    __break(0xC471u);
  }
  operator delete(__p);
}

void *boost::signals2::detail::foreign_shared_ptr_impl<std::shared_ptr<data::TransportService::State>>::clone(uint64_t a1)
{
  uint64_t result = operator new(0x18uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *uint64_t result = &unk_1F20F8DE0;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void data::TransportService::State::unblockThrottling_sync(data::TransportService::State *this)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *((void *)this + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v11) = 0;
    _os_log_impl(&dword_1C5767000, v2, OS_LOG_TYPE_DEFAULT, "#I Disabling throttling", (uint8_t *)&v11, 2u);
  }
  if (*((void *)this + 18))
  {
    uint64_t v3 = *((void *)this + 5);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v11) = 0;
      _os_log_impl(&dword_1C5767000, v3, OS_LOG_TYPE_DEFAULT, "#I Stop Listening for UI events", (uint8_t *)&v11, 2u);
    }
    uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 19);
    *((void *)this + 18) = 0;
    *((void *)this + 19) = 0;
    if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  uint64_t v5 = *((void *)this + 20);
  if (v5)
  {
    dispatch_source_cancel(v5);
    uint64_t v6 = *((void *)this + 20);
    *((void *)this + 20) = 0;
    if (v6) {
      dispatch_release(v6);
    }
    long long v7 = *((void *)this + 5);
    uint64_t v5 = os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
    if (v5)
    {
      LOWORD(v11) = 0;
      _os_log_impl(&dword_1C5767000, v7, OS_LOG_TYPE_DEFAULT, "#I Limit timer stopped", (uint8_t *)&v11, 2u);
    }
  }
  if (*((_DWORD *)this + 26) == 1)
  {
    if (*((_DWORD *)this + 28) == 1)
    {
      uint64_t v8 = *((void *)this + 5);
      uint64_t v5 = os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
      if (v5)
      {
        int v11 = 136315394;
        long long v12 = "Throttled";
        __int16 v13 = 2080;
        uint64_t v14 = "Idle";
        _os_log_impl(&dword_1C5767000, v8, OS_LOG_TYPE_DEFAULT, "#I State changing from %s to %s", (uint8_t *)&v11, 0x16u);
      }
      *((_DWORD *)this + 28) = 0;
    }
    Instance = (ApplePDPHelperInterface *)ApplePDPHelperInterface::getInstance((ApplePDPHelperInterface *)v5);
    if ((ApplePDPHelperInterface::activateLowPowerPDPThrottle(Instance) & 1) == 0)
    {
      int v10 = *((void *)this + 5);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        LOWORD(v11) = 0;
        _os_log_error_impl(&dword_1C5767000, v10, OS_LOG_TYPE_ERROR, "Failed to disable flow for throttling", (uint8_t *)&v11, 2u);
      }
    }
  }
}

void ___ZN4data16TransportService5State13enterLowPowerEv_block_invoke(uint64_t a1)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(NSObject **)(v1 + 160);
  if (v2)
  {
    dispatch_source_cancel(v2);
    uint64_t v3 = *(NSObject **)(v1 + 160);
    *(void *)(v1 + 160) = 0;
    if (v3) {
      dispatch_release(v3);
    }
    uint64_t v4 = *(NSObject **)(v1 + 40);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v9) = 0;
      _os_log_impl(&dword_1C5767000, v4, OS_LOG_TYPE_DEFAULT, "#I Limit timer stopped", (uint8_t *)&v9, 2u);
    }
  }
  unsigned int v5 = *(_DWORD *)(v1 + 112);
  if (v5 >= 2)
  {
    if (v5 == 2) {
      return;
    }
  }
  else
  {
    uint64_t v6 = *(NSObject **)(v1 + 40);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      long long v7 = "???";
      if (!v5) {
        long long v7 = "Idle";
      }
      if (v5 == 1) {
        long long v7 = "Throttled";
      }
      int v9 = 136315394;
      int v10 = v7;
      __int16 v11 = 2080;
      long long v12 = "LowPower";
      _os_log_impl(&dword_1C5767000, v6, OS_LOG_TYPE_DEFAULT, "#I State changing from %s to %s", (uint8_t *)&v9, 0x16u);
    }
    *(_DWORD *)(v1 + 112) = 2;
  }
  uint64_t v8 = *(NSObject **)(v1 + 40);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v9) = 0;
    _os_log_impl(&dword_1C5767000, v8, OS_LOG_TYPE_DEFAULT, "#I Entered low power", (uint8_t *)&v9, 2u);
  }
}

void *___ZNK3ctu20SharedSynchronizableIN4data16TransportService5StateEE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS9__block_invoke(uint64_t a1)
{
  return (*(void *(**)(void *__return_ptr))(**(void **)(a1 + 40) + 16))(*(void **)(a1 + 40));
}

void ___ZN4data16TransportService5State12exitLowPowerEv_block_invoke(uint64_t a1)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(void *)(a1 + 32);
  int v2 = *(_DWORD *)(v1 + 112);
  if ((v2 - 1) <= 1)
  {
    uint64_t v3 = *(NSObject **)(v1 + 40);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v4 = "???";
      if (v2 == 1) {
        uint64_t v4 = "Throttled";
      }
      if (v2 == 2) {
        uint64_t v4 = "LowPower";
      }
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = v4;
      *(_WORD *)&buf[12] = 2080;
      *(void *)&buf[14] = "Throttled";
      _os_log_impl(&dword_1C5767000, v3, OS_LOG_TYPE_DEFAULT, "#I State changing from %s to %s", buf, 0x16u);
    }
    *(_DWORD *)(v1 + 112) = 1;
    data::TransportService::State::startLimitTimer_sync((data::TransportService::State *)v1);
  }
  unsigned int v5 = *(NSObject **)(v1 + 40);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1C5767000, v5, OS_LOG_TYPE_DEFAULT, "#I Exited Low Power", buf, 2u);
  }
  if (!*(void *)(v1 + 144))
  {
    uint64_t v6 = *(NSObject **)(v1 + 40);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1C5767000, v6, OS_LOG_TYPE_DEFAULT, "#I Listening for UI events", buf, 2u);
    }
    pthread_mutex_lock(&ctu::Singleton<sys::UIObserver,sys::UIObserver,ctu::PthreadMutexGuardPolicy<sys::UIObserver>>::sInstance);
    long long v7 = (sys::UIObserver *)off_1EBBDD3E0;
    if (!off_1EBBDD3E0)
    {
      memset(buf, 170, 16);
      uint64_t v8 = (sys::UIObserver *)operator new(0x40uLL);
      sys::UIObserver::UIObserver(v8);
      std::shared_ptr<sys::UIObserver>::shared_ptr[abi:ne180100]<sys::UIObserver,void>((std::__shared_weak_count_vtbl **)buf, (std::__shared_weak_count_vtbl *)v8);
      long long v9 = *(_OWORD *)buf;
      *(void *)buf = 0;
      *(void *)&uint8_t buf[8] = 0;
      int v10 = (std::__shared_weak_count *)*(&off_1EBBDD3E0 + 1);
      off_1EBBDD3E0 = v9;
      if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
      __int16 v11 = *(std::__shared_weak_count **)&buf[8];
      if (*(void *)&buf[8]
        && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
      long long v7 = (sys::UIObserver *)off_1EBBDD3E0;
    }
    long long v12 = (std::__shared_weak_count *)*(&off_1EBBDD3E0 + 1);
    if (*(&off_1EBBDD3E0 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDD3E0 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    pthread_mutex_unlock(&ctu::Singleton<sys::UIObserver,sys::UIObserver,ctu::PthreadMutexGuardPolicy<sys::UIObserver>>::sInstance);
    sys::UIObserver::observe(v7, 1, (std::__shared_weak_count_vtbl **)&v16);
    long long v13 = v16;
    long long v16 = 0uLL;
    uint64_t v14 = *(std::__shared_weak_count **)(v1 + 152);
    *(_OWORD *)(v1 + 144) = v13;
    if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
    uint64_t v15 = (std::__shared_weak_count *)*((void *)&v16 + 1);
    if (*((void *)&v16 + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v16 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
    if (v12)
    {
      if (!atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
  }
}

void sub_1C5879CF4(_Unwind_Exception *a1)
{
  operator delete(v1);
  pthread_mutex_unlock(&ctu::Singleton<sys::UIObserver,sys::UIObserver,ctu::PthreadMutexGuardPolicy<sys::UIObserver>>::sInstance);
  _Unwind_Resume(a1);
}

void data::TransportService::State::startLimitTimer_sync(data::TransportService::State *this)
{
  if (*((_DWORD *)this + 26) == 1)
  {
    dispatch_time_t v2 = dispatch_time(0, 1000000000 * *((unsigned int *)this + 27) + 500000000);
    uint64_t v3 = *((void *)this + 20);
    if (v3)
    {
      dispatch_source_cancel(v3);
      uint64_t v4 = *((void *)this + 20);
      *((void *)this + 20) = 0;
      if (v4) {
        dispatch_release(v4);
      }
      unsigned int v5 = *((void *)this + 5);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1C5767000, v5, OS_LOG_TYPE_DEFAULT, "#I Limit timer stopped", buf, 2u);
      }
    }
    uint64_t v6 = dispatch_source_create(MEMORY[0x1E4F14490], 1uLL, 0, *((dispatch_queue_t *)this + 11));
    long long v7 = *((void *)this + 20);
    *((void *)this + 20) = v6;
    if (v7)
    {
      dispatch_release(v7);
      uint64_t v6 = *((void *)this + 20);
    }
    dispatch_source_set_timer(v6, v2, 0xFFFFFFFFFFFFFFFFLL, 0x1DCD6500uLL);
    uint64_t v8 = (std::__shared_weak_count *)*((void *)this + 10);
    if (!v8 || (uint64_t v9 = *((void *)this + 9), (v10 = std::__shared_weak_count::lock(v8)) == 0)) {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    __int16 v11 = v10;
    p_shared_weak_owners = &v10->__shared_weak_owners_;
    atomic_fetch_add_explicit(&v10->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v11);
    }
    long long v13 = *((void *)this + 20);
    handler[0] = MEMORY[0x1E4F143A8];
    handler[1] = 1174405120;
    handler[2] = ___ZN4data16TransportService5State20startLimitTimer_syncEv_block_invoke;
    handler[3] = &__block_descriptor_tmp_58;
    handler[4] = this;
    handler[5] = v9;
    long long v16 = v11;
    atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
    dispatch_source_set_event_handler(v13, handler);
    dispatch_activate(*((dispatch_object_t *)this + 20));
    uint64_t v14 = *((void *)this + 5);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1C5767000, v14, OS_LOG_TYPE_DEFAULT, "#I Limit timer started", buf, 2u);
    }
    if (v16) {
      std::__shared_weak_count::__release_weak(v16);
    }
    std::__shared_weak_count::__release_weak(v11);
  }
}

void ctu::SharedSynchronizable<data::TransportService::State>::execute_wrapped(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[1];
  if (!v3 || (v5 = *a1, (uint64_t v6 = std::__shared_weak_count::lock(v3)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  long long v7 = v6;
  uint64_t v8 = a1[2];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 1174405120;
  block[2] = ___ZNK3ctu20SharedSynchronizableIN4data16TransportService5StateEE15execute_wrappedEU13block_pointerFvvE_block_invoke;
  block[3] = &unk_1F20F8E18;
  void block[5] = v5;
  long long v12 = v7;
  p_shared_owners = &v7->__shared_owners_;
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  block[4] = a2;
  dispatch_async(v8, block);
  int v10 = v12;
  if (!v12 || atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      return;
    }
LABEL_8:
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    return;
  }
  ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
  std::__shared_weak_count::__release_weak(v10);
  if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_8;
  }
}

uint64_t ___ZNK3ctu20SharedSynchronizableIN4data16TransportService5StateEE15execute_wrappedEU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t __copy_helper_block_e8_40c58_ZTSNSt3__110shared_ptrIKN4data16TransportService5StateEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c58_ZTSNSt3__110shared_ptrIKN4data16TransportService5StateEEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void ___ZN4data16TransportService5State20startLimitTimer_syncEv_block_invoke(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    uint64_t v3 = (data::TransportService::State *)a1[4];
    uint64_t v4 = std::__shared_weak_count::lock(v2);
    uint64_t v9 = v4;
    if (v4)
    {
      uint64_t v5 = v4;
      if (a1[5])
      {
        uint64_t v6 = *((void *)v3 + 5);
        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long v7 = 0;
          _os_log_impl(&dword_1C5767000, v6, OS_LOG_TYPE_DEFAULT, "#I Limit timer expired", v7, 2u);
        }
        data::TransportService::State::unblockThrottling_sync(v3);
      }
      if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void sub_1C587A29C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_40c54_ZTSNSt3__18weak_ptrIN4data16TransportService5StateEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c54_ZTSNSt3__18weak_ptrIN4data16TransportService5StateEEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void ___ZN4data16TransportService5State9setConfigENS0_16ThrottlingConfigE_block_invoke(uint64_t a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(NSObject **)(v2 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT)
    && ((data::TransportService::ThrottlingConfig::asString((data::TransportService::ThrottlingConfig *)(a1 + 40), __p),
         v13 >= 0)
      ? (uint64_t v4 = __p)
      : (uint64_t v4 = (void **)__p[0]),
        *(_DWORD *)buf = 136315138,
        uint64_t v15 = v4,
        _os_log_impl(&dword_1C5767000, v3, OS_LOG_TYPE_DEFAULT, "#I Config set to %s", buf, 0xCu),
        v13 < 0))
  {
    operator delete(__p[0]);
    int v5 = *(_DWORD *)(v2 + 104);
    int v6 = *(_DWORD *)(a1 + 40);
    if (v5 == v6) {
      goto LABEL_13;
    }
  }
  else
  {
    int v5 = *(_DWORD *)(v2 + 104);
    int v6 = *(_DWORD *)(a1 + 40);
    if (v5 == v6) {
      goto LABEL_13;
    }
  }
  *(_DWORD *)(v2 + 104) = v6;
  long long v7 = *(NSObject **)(v2 + 40);
  BOOL v8 = os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
  if (v8)
  {
    LODWORD(__p[0]) = 67109120;
    HIDWORD(__p[0]) = v6;
    _os_log_impl(&dword_1C5767000, v7, OS_LOG_TYPE_DEFAULT, "#I Throttling %d", (uint8_t *)__p, 8u);
  }
  Instance = (ApplePDPHelperInterface *)ApplePDPHelperInterface::getInstance((ApplePDPHelperInterface *)v8);
  if ((ApplePDPHelperInterface::enableLowPowerPDPThrottle(Instance) & 1) == 0)
  {
    int v10 = *(NSObject **)(v2 + 40);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      LODWORD(__p[0]) = 67109120;
      HIDWORD(__p[0]) = v6;
      _os_log_error_impl(&dword_1C5767000, v10, OS_LOG_TYPE_ERROR, "Failed setting throttling to %d", (uint8_t *)__p, 8u);
    }
  }
  int v5 = *(_DWORD *)(a1 + 40);
LABEL_13:
  if (v5 == 1)
  {
    int v11 = *(_DWORD *)(a1 + 44);
    if (*(_DWORD *)(v2 + 108) != v11)
    {
      *(_DWORD *)(v2 + 108) = v11;
      if (*(void *)(v2 + 160)) {
        data::TransportService::State::startLimitTimer_sync((data::TransportService::State *)v2);
      }
    }
  }
}

void ___ZNK4data16TransportService5State9dumpStateEv_block_invoke(uint64_t a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(NSObject **)(v1 + 40);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    data::TransportService::ThrottlingConfig::asString((data::TransportService::ThrottlingConfig *)(v1 + 104), __p);
    if (v12 >= 0) {
      uint64_t v3 = __p;
    }
    else {
      uint64_t v3 = *(unsigned char **)__p;
    }
    *(_DWORD *)buf = 136315138;
    *(void *)&uint8_t buf[4] = v3;
    _os_log_impl(&dword_1C5767000, v2, OS_LOG_TYPE_DEFAULT, "#I Config: %s", buf, 0xCu);
    if (v12 < 0) {
      operator delete(*(void **)__p);
    }
    uint64_t v2 = *(NSObject **)(v1 + 40);
  }
  BOOL v4 = os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT);
  if (v4)
  {
    uint64_t v5 = *(int *)(v1 + 112);
    if (v5 > 2) {
      int v6 = "???";
    }
    else {
      int v6 = off_1E6517CA0[v5];
    }
    *(_DWORD *)long long __p = 136315138;
    *(void *)&__p[4] = v6;
    _os_log_impl(&dword_1C5767000, v2, OS_LOG_TYPE_DEFAULT, "#I Low Power State %s", __p, 0xCu);
  }
  memset(buf, 0, 12);
  ApplePDPHelperInterface::getInstance((ApplePDPHelperInterface *)v4);
  int NumLowPowerPDPThrottleStats = ApplePDPHelperInterface::getNumLowPowerPDPThrottleStats();
  BOOL v8 = *(NSObject **)(v1 + 40);
  if (NumLowPowerPDPThrottleStats)
  {
    if (os_log_type_enabled(*(os_log_t *)(v1 + 40), OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long __p = 67109632;
      *(_DWORD *)&__p[4] = *(_DWORD *)buf;
      *(_WORD *)&__p[8] = 1024;
      *(_DWORD *)&__p[10] = *(_DWORD *)&buf[4];
      __int16 v10 = 1024;
      int v11 = *(_DWORD *)&buf[8];
      _os_log_impl(&dword_1C5767000, v8, OS_LOG_TYPE_DEFAULT, "#I Blocked outgoing packets: %u, non-baseband wakes: %u, incoming traffic deactivations: %u", __p, 0x14u);
    }
  }
  else if (os_log_type_enabled(*(os_log_t *)(v1 + 40), OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)long long __p = 0;
    _os_log_error_impl(&dword_1C5767000, v8, OS_LOG_TYPE_ERROR, "Failed to query throttle stats", __p, 2u);
  }
}

void ___ZN4data16TransportService5State17unblockThrottlingEv_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(data::TransportService::State **)(a1 + 32);
  uint64_t v2 = *((void *)v1 + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl(&dword_1C5767000, v2, OS_LOG_TYPE_DEFAULT, "#I Unblocking throttling", v3, 2u);
  }
  data::TransportService::State::unblockThrottling_sync(v1);
}

void LegacyAccessoryManager::create(LegacyAccessoryManager *this@<X0>, const char *a2@<X1>, queue a3@<0:X2>, LegacyAccessoryManager **a4@<X8>)
{
  long long v7 = (LegacyAccessoryManager *)operator new(0x78uLL);
  BOOL v8 = *(NSObject **)a2;
  uint64_t v18 = v8;
  if (v8) {
    dispatch_retain(v8);
  }
  v9.fObj.fObj = (dispatch_object_s *)&v18;
  LegacyAccessoryManager::LegacyAccessoryManager(v7, (const char *)this, v9);
  int v19 = v7;
  *(void *)buf = v7;
  __int16 v10 = (std::__shared_weak_count *)operator new(0x20uLL);
  v10->__shared_owners_ = 0;
  p_shared_owners = &v10->__shared_owners_;
  v10->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20F8FA8;
  v10->__shared_weak_owners_ = 0;
  v10[1].__vftable = (std::__shared_weak_count_vtbl *)v7;
  int v20 = v10;
  *(void *)buf = 0;
  char v12 = (std::__shared_weak_count *)*((void *)v7 + 2);
  if (!v12)
  {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v10->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    *((void *)v7 + 1) = v7;
    *((void *)v7 + 2) = v10;
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
  if (v12->__shared_owners_ == -1)
  {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v10->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    *((void *)v7 + 1) = v7;
    *((void *)v7 + 2) = v10;
    std::__shared_weak_count::__release_weak(v12);
    if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL))
    {
LABEL_8:
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
LABEL_9:
  if (*(void *)buf)
  {
    LegacyAccessoryManager::~LegacyAccessoryManager(*(LegacyAccessoryManager **)buf);
    operator delete(v13);
  }
  if (v8) {
    dispatch_release(v8);
  }
  uint64_t v14 = v19;
  if (v19 && (LegacyAccessoryManager::init(v19) & 1) != 0)
  {
    uint64_t v15 = (LegacyAccessoryManager *)v20;
    *a4 = v14;
    a4[1] = v15;
    return;
  }
  uint64_t v16 = GetOsLogContext()[1];
  if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_error_impl(&dword_1C5767000, v16, OS_LOG_TYPE_ERROR, "Failed to create OBD Manager!", buf, 2u);
    *a4 = 0;
    a4[1] = 0;
    int v17 = v20;
    if (!v20) {
      return;
    }
  }
  else
  {
    *a4 = 0;
    a4[1] = 0;
    int v17 = v20;
    if (!v20) {
      return;
    }
  }
  if (!atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
}

void sub_1C587A9D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1C587A9F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  std::unique_ptr<LegacyAccessoryManager>::~unique_ptr[abi:ne180100]((LegacyAccessoryManager **)va);
  if (v5) {
    dispatch_release(v5);
  }
  _Unwind_Resume(a1);
}

uint64_t LegacyAccessoryManager::init(LegacyAccessoryManager *this)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if (*((void *)this + 9) || *((void *)this + 7))
  {
    uint64_t v3 = *((void *)this + 1);
    uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 2);
    if (v2) {
      atomic_fetch_add_explicit(&v2->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    LegacyAccessoryManager::generateAccessoryMapping((uint64_t *)this);
    if (*((void *)this + 9))
    {
      aBlock[0] = MEMORY[0x1E4F143A8];
      aBlock[1] = 1174405120;
      aBlock[2] = ___ZN22LegacyAccessoryManager4initEv_block_invoke;
      aBlock[3] = &__block_descriptor_tmp_34;
      aBlock[4] = this;
      aBlock[5] = v3;
      uint64_t v16 = v2;
      if (v2) {
        atomic_fetch_add_explicit(&v2->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      int v17 = _Block_copy(aBlock);
      ctu::iokit::IOHIDController::registerKeyboardCallback();
      if (v17) {
        _Block_release(v17);
      }
      ctu::iokit::IOHIDController::start(*((ctu::iokit::IOHIDController **)this + 9));
      if (v16) {
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    uint64_t v4 = *((void *)this + 7);
    if (!v4) {
      goto LABEL_32;
    }
    v13[0] = MEMORY[0x1E4F143A8];
    v13[1] = 1174405120;
    v13[2] = ___ZN22LegacyAccessoryManager4initEv_block_invoke_5;
    v13[3] = &__block_descriptor_tmp_9_3;
    v13[4] = this;
    void v13[5] = v3;
    uint64_t v14 = v2;
    if (v2) {
      atomic_fetch_add_explicit(&v2->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v5 = _Block_copy(v13);
    int v6 = *((void *)this + 3);
    if (v6) {
      dispatch_retain(*((dispatch_object_t *)this + 3));
    }
    if (v5)
    {
      long long v7 = _Block_copy(v5);
      BOOL v8 = *(const void **)(v4 + 88);
      *(void *)(v4 + 88) = v7;
      if (!v8) {
        goto LABEL_22;
      }
    }
    else
    {
      BOOL v8 = *(const void **)(v4 + 88);
      *(void *)(v4 + 88) = 0;
      if (!v8)
      {
LABEL_22:
        if (v6) {
          dispatch_retain(v6);
        }
        queue v9 = *(NSObject **)(v4 + 96);
        *(void *)(v4 + 96) = v6;
        if (v9) {
          dispatch_release(v9);
        }
        if (v6) {
          dispatch_release(v6);
        }
        if (v5) {
          _Block_release(v5);
        }
        IOKitEventNotifier::start(*((IOKitEventNotifier **)this + 7));
        if (v14) {
          std::__shared_weak_count::__release_weak(v14);
        }
LABEL_32:
        if (v2) {
          std::__shared_weak_count::__release_weak(v2);
        }
        return 1;
      }
    }
    _Block_release(v8);
    goto LABEL_22;
  }
  int v11 = *(NSObject **)this;
  BOOL v12 = os_log_type_enabled(*(os_log_t *)this, OS_LOG_TYPE_DEFAULT);
  uint64_t result = 0;
  if (v12)
  {
    *(_DWORD *)buf = 136315138;
    int v19 = "LegacyAccessoryManager";
    _os_log_impl(&dword_1C5767000, v11, OS_LOG_TYPE_DEFAULT, "#I No IOKit controllers created for the %s", buf, 0xCu);
    return 0;
  }
  return result;
}

void sub_1C587ACC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void LegacyAccessoryManager::LegacyAccessoryManager(LegacyAccessoryManager *this, const char *__s, queue a3)
{
  size_t v6 = strlen(__s);
  if (v6 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  std::string::size_type v7 = v6;
  if (v6 >= 0x17)
  {
    uint64_t v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17) {
      uint64_t v9 = v6 | 7;
    }
    uint64_t v10 = v9 + 1;
    p_dst = (std::string *)operator new(v9 + 1);
    __dst.__r_.__value_.__l.__size_ = v7;
    __dst.__r_.__value_.__r.__words[2] = v10 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_8;
  }
  *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v6;
  p_dst = &__dst;
  if (v6) {
LABEL_8:
  }
    memcpy(p_dst, __s, v7);
  p_dst->__r_.__value_.__s.__data_[v7] = 0;
  int v11 = std::string::append(&__dst, ".", 1uLL);
  long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  v28.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  char v13 = std::string::append(&v28, "LegacyAccessoryManager", 0x16uLL);
  long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  int64_t v30 = v13->__r_.__value_.__r.__words[2];
  *(_OWORD *)long long __p = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  if (v30 >= 0) {
    uint64_t v15 = __p;
  }
  else {
    uint64_t v15 = (void **)__p[0];
  }
  ctu::OsLogLogger::OsLogLogger(this, "com.apple.telephony.abm", (const char *)v15);
  if (SHIBYTE(v30) < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(v28.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_14:
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_15;
      }
      goto LABEL_40;
    }
  }
  else if ((SHIBYTE(v28.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_14;
  }
  operator delete(v28.__r_.__value_.__l.__data_);
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_15:
    *((void *)this + 1) = 0;
    *((void *)this + 2) = 0;
    uint64_t v16 = *(NSObject **)a3.fObj.fObj;
    *((void *)this + 3) = *(void *)a3.fObj.fObj;
    if (!v16) {
      goto LABEL_17;
    }
    goto LABEL_16;
  }
LABEL_40:
  operator delete(__dst.__r_.__value_.__l.__data_);
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  uint64_t v16 = *(NSObject **)a3.fObj.fObj;
  *((void *)this + 3) = *(void *)a3.fObj.fObj;
  if (v16) {
LABEL_16:
  }
    dispatch_retain(v16);
LABEL_17:
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  *((void *)this + 6) = 0;
  GetABMLogServer(&v25);
  pthread_mutex_lock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
  std::string::size_type v17 = off_1EBBDCFD0;
  if (!off_1EBBDCFD0)
  {
    ABMServer::create_default_global(__p);
    long long v18 = *(_OWORD *)__p;
    __p[0] = 0;
    __p[1] = 0;
    int v19 = (std::__shared_weak_count *)*(&off_1EBBDCFD0 + 1);
    off_1EBBDCFD0 = v18;
    if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
    uint64_t v20 = (std::__shared_weak_count *)__p[1];
    if (__p[1] && !atomic_fetch_add((atomic_ullong *volatile)__p[1] + 1, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
    std::string::size_type v17 = off_1EBBDCFD0;
  }
  unint64_t v21 = (std::__shared_weak_count *)*(&off_1EBBDCFD0 + 1);
  v28.__r_.__value_.__r.__words[0] = v17;
  v28.__r_.__value_.__l.__size_ = *(&off_1EBBDCFD0 + 1);
  if (*(&off_1EBBDCFD0 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDCFD0 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
  __p[0] = *(void **)(*(void *)v17 + 208);
  *((void *)this + 7) = 0xAAAAAAAAAAAAAAAALL;
  *((void *)this + 8) = 0xAAAAAAAAAAAAAAAALL;
  int v22 = operator new(0xD8uLL);
  v22[1] = 0;
  v22[2] = 0;
  void *v22 = &unk_1F20F3AC0;
  std::__construct_at[abi:ne180100]<IOKitEventNotifier,std::shared_ptr<ctu::LogServer> &,__CFRunLoop *&,IOKitEventNotifier*>((uint64_t)(v22 + 3), &v25, (uint64_t *)__p);
  *((void *)this + 7) = v22 + 3;
  *((void *)this + 8) = v22;
  if (v21 && !atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v21);
  }
  uint64_t v23 = v26;
  if (v26 && !atomic_fetch_add(&v26->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
  }
  int v24 = *(NSObject **)a3.fObj.fObj;
  if (*(void *)a3.fObj.fObj) {
    dispatch_retain(*(dispatch_object_t *)a3.fObj.fObj);
  }
  ctu::iokit::IOHIDController::create();
  if (v24) {
    dispatch_release(v24);
  }
  *((unsigned char *)this + 92) = 0;
  *((void *)this + 14) = 0;
  *((void *)this + 13) = 0;
  *((void *)this + 12) = (char *)this + 104;
}

void sub_1C587B124(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_object_t object, dispatch_object_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  pthread_mutex_unlock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  std::vector<dispatch::callback<void({block_pointer})>>::~vector[abi:ne180100](v18);
  uint64_t v20 = *(NSObject **)(v17 + 24);
  if (v20) {
    dispatch_release(v20);
  }
  unint64_t v21 = *(std::__shared_weak_count **)(v17 + 16);
  if (v21) {
    std::__shared_weak_count::__release_weak(v21);
  }
  MEMORY[0x1C8790F80](v17);
  _Unwind_Resume(a1);
}

void sub_1C587B1D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a32 < 0)
  {
    operator delete(a27);
    if ((a25 & 0x80000000) == 0)
    {
LABEL_3:
      if (a19 < 0) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else if ((a25 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a20);
  if (a19 < 0)
  {
LABEL_4:
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
LABEL_7:
  _Unwind_Resume(exception_object);
}

void **std::vector<dispatch::callback<void({block_pointer})(unsigned int)>>::~vector[abi:ne180100](void **a1)
{
  uint64_t v2 = (char *)*a1;
  if (*a1)
  {
    uint64_t v3 = (char *)a1[1];
    uint64_t v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        uint64_t v5 = *((void *)v3 - 1);
        if (v5) {
          dispatch_release(v5);
        }
        size_t v6 = (const void *)*((void *)v3 - 2);
        if (v6) {
          _Block_release(v6);
        }
        v3 -= 16;
      }
      while (v3 != v2);
      uint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void LegacyAccessoryManager::~LegacyAccessoryManager(LegacyAccessoryManager *this)
{
  uint64_t v2 = *((void *)this + 4);
  for (uint64_t i = *((void *)this + 5); i != v2; i -= 16)
  {
    uint64_t v4 = *(NSObject **)(i - 8);
    if (v4) {
      dispatch_release(v4);
    }
    uint64_t v5 = *(const void **)(i - 16);
    if (v5) {
      _Block_release(v5);
    }
  }
  *((void *)this + 5) = v2;
  size_t v6 = (ctu::iokit::IOHIDController *)*((void *)this + 9);
  if (v6) {
    ctu::iokit::IOHIDController::stop(v6);
  }
  std::string::size_type v7 = (IOKitEventNotifier *)*((void *)this + 7);
  if (v7) {
    IOKitEventNotifier::shutdown(v7);
  }
  std::__tree<std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>>>::destroy(*((void **)this + 13));
  BOOL v8 = (std::__shared_weak_count *)*((void *)this + 10);
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  uint64_t v9 = (std::__shared_weak_count *)*((void *)this + 8);
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
    uint64_t v10 = (char *)*((void *)this + 4);
    if (!v10) {
      goto LABEL_27;
    }
  }
  else
  {
    uint64_t v10 = (char *)*((void *)this + 4);
    if (!v10) {
      goto LABEL_27;
    }
  }
  int v11 = (char *)*((void *)this + 5);
  long long v12 = v10;
  if (v11 != v10)
  {
    do
    {
      char v13 = *((void *)v11 - 1);
      if (v13) {
        dispatch_release(v13);
      }
      long long v14 = (const void *)*((void *)v11 - 2);
      if (v14) {
        _Block_release(v14);
      }
      v11 -= 16;
    }
    while (v11 != v10);
    long long v12 = (char *)*((void *)this + 4);
  }
  *((void *)this + 5) = v10;
  operator delete(v12);
LABEL_27:
  uint64_t v15 = *((void *)this + 3);
  if (v15) {
    dispatch_release(v15);
  }
  uint64_t v16 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v16) {
    std::__shared_weak_count::__release_weak(v16);
  }

  JUMPOUT(0x1C8790F80);
}

uint64_t *LegacyAccessoryManager::generateAccessoryMapping(uint64_t *this)
{
  uint64_t v1 = (uint64_t)this;
  uint64_t v3 = (uint64_t **)(this + 13);
  uint64_t v2 = (unsigned int *)this[13];
  uint64_t v4 = (uint64_t **)(this + 13);
  uint64_t v5 = this + 13;
  if (v2)
  {
    size_t v6 = (unsigned int *)this[13];
    while (1)
    {
      while (1)
      {
        uint64_t v5 = v6;
        unsigned int v7 = v6[7];
        if (v7 < 3) {
          break;
        }
        size_t v6 = (unsigned int *)*v5;
        uint64_t v4 = (uint64_t **)v5;
        if (!*v5) {
          goto LABEL_8;
        }
      }
      if (v7 == 2) {
        break;
      }
      size_t v6 = (unsigned int *)v5[1];
      if (!v6)
      {
        uint64_t v4 = (uint64_t **)(v5 + 1);
        goto LABEL_8;
      }
    }
  }
  else
  {
LABEL_8:
    BOOL v8 = v5;
    uint64_t v5 = operator new(0x28uLL);
    *(void *)((char *)v5 + 28) = 2;
    void *v5 = 0;
    v5[1] = 0;
    v5[2] = v8;
    *uint64_t v4 = v5;
    uint64_t v9 = **(void **)(v1 + 96);
    uint64_t v10 = v5;
    if (v9)
    {
      *(void *)(v1 + 96) = v9;
      uint64_t v10 = *v4;
    }
    this = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v1 + 104), v10);
    uint64_t v2 = *(unsigned int **)(v1 + 104);
    ++*(void *)(v1 + 112);
  }
  *((_DWORD *)v5 + 8) = 16;
  int v11 = v3;
  long long v12 = v3;
  if (v2)
  {
    while (1)
    {
      while (1)
      {
        long long v12 = v2;
        unsigned int v13 = v2[7];
        if (v13 < 5) {
          break;
        }
        uint64_t v2 = (unsigned int *)*v12;
        int v11 = (uint64_t **)v12;
        if (!*v12) {
          goto LABEL_18;
        }
      }
      if (v13 == 4) {
        break;
      }
      uint64_t v2 = (unsigned int *)v12[1];
      if (!v2)
      {
        int v11 = (uint64_t **)(v12 + 1);
        goto LABEL_18;
      }
    }
  }
  else
  {
LABEL_18:
    long long v14 = v12;
    long long v12 = operator new(0x28uLL);
    *(void *)((char *)v12 + 28) = 4;
    void *v12 = 0;
    v12[1] = 0;
    v12[2] = v14;
    *int v11 = v12;
    uint64_t v15 = **(void **)(v1 + 96);
    uint64_t v16 = v12;
    if (v15)
    {
      *(void *)(v1 + 96) = v15;
      uint64_t v16 = *v11;
    }
    this = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v1 + 104), v16);
    ++*(void *)(v1 + 112);
  }
  *((_DWORD *)v12 + 8) = 32;
  uint64_t v17 = (unsigned int *)*v3;
  long long v18 = v3;
  int v19 = v3;
  if (*v3)
  {
    uint64_t v20 = (unsigned int *)*v3;
    while (1)
    {
      while (1)
      {
        int v19 = v20;
        unsigned int v21 = v20[7];
        if (v21 < 9) {
          break;
        }
        uint64_t v20 = (unsigned int *)*v19;
        long long v18 = (uint64_t **)v19;
        if (!*v19) {
          goto LABEL_28;
        }
      }
      if (v21 == 8) {
        break;
      }
      uint64_t v20 = (unsigned int *)v19[1];
      if (!v20)
      {
        long long v18 = (uint64_t **)(v19 + 1);
        goto LABEL_28;
      }
    }
  }
  else
  {
LABEL_28:
    int v22 = v19;
    int v19 = operator new(0x28uLL);
    *(void *)((char *)v19 + 28) = 8;
    *int v19 = 0;
    v19[1] = 0;
    v19[2] = v22;
    *long long v18 = v19;
    uint64_t v23 = **(void **)(v1 + 96);
    int v24 = v19;
    if (v23)
    {
      *(void *)(v1 + 96) = v23;
      int v24 = *v18;
    }
    this = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v1 + 104), v24);
    uint64_t v17 = *(unsigned int **)(v1 + 104);
    ++*(void *)(v1 + 112);
  }
  *((_DWORD *)v19 + 8) = 64;
  uint64_t v25 = v3;
  int v26 = v3;
  if (v17)
  {
    while (1)
    {
      while (1)
      {
        int v26 = v17;
        unsigned int v27 = v17[7];
        if (v27 < 0x11) {
          break;
        }
        uint64_t v17 = (unsigned int *)*v26;
        uint64_t v25 = (uint64_t **)v26;
        if (!*v26) {
          goto LABEL_38;
        }
      }
      if (v27 == 16) {
        break;
      }
      uint64_t v17 = (unsigned int *)v26[1];
      if (!v17)
      {
        uint64_t v25 = (uint64_t **)(v26 + 1);
        goto LABEL_38;
      }
    }
  }
  else
  {
LABEL_38:
    std::string v28 = v26;
    int v26 = operator new(0x28uLL);
    *(void *)((char *)v26 + 28) = 16;
    void *v26 = 0;
    v26[1] = 0;
    v26[2] = v28;
    *uint64_t v25 = v26;
    uint64_t v29 = **(void **)(v1 + 96);
    int64_t v30 = v26;
    if (v29)
    {
      *(void *)(v1 + 96) = v29;
      int64_t v30 = *v25;
    }
    this = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v1 + 104), v30);
    ++*(void *)(v1 + 112);
  }
  *((_DWORD *)v26 + 8) = 1024;
  BOOL v31 = (unsigned int *)*v3;
  int v32 = v3;
  BOOL v33 = v3;
  if (*v3)
  {
    int v34 = (unsigned int *)*v3;
    while (1)
    {
      while (1)
      {
        BOOL v33 = v34;
        unsigned int v35 = v34[7];
        if (v35 < 0x21) {
          break;
        }
        int v34 = (unsigned int *)*v33;
        int v32 = (uint64_t **)v33;
        if (!*v33) {
          goto LABEL_48;
        }
      }
      if (v35 == 32) {
        break;
      }
      int v34 = (unsigned int *)v33[1];
      if (!v34)
      {
        int v32 = (uint64_t **)(v33 + 1);
        goto LABEL_48;
      }
    }
  }
  else
  {
LABEL_48:
    uint64_t v36 = v33;
    BOOL v33 = operator new(0x28uLL);
    *(void *)((char *)v33 + 28) = 32;
    void *v33 = 0;
    v33[1] = 0;
    v33[2] = v36;
    void *v32 = v33;
    uint64_t v37 = **(void **)(v1 + 96);
    uint64_t v38 = v33;
    if (v37)
    {
      *(void *)(v1 + 96) = v37;
      uint64_t v38 = *v32;
    }
    this = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v1 + 104), v38);
    BOOL v31 = *(unsigned int **)(v1 + 104);
    ++*(void *)(v1 + 112);
  }
  *((_DWORD *)v33 + 8) = 256;
  uint64_t v39 = v3;
  uint64_t v40 = v3;
  if (v31)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v40 = v31;
        unsigned int v41 = v31[7];
        if (v41 < 0x41) {
          break;
        }
        BOOL v31 = (unsigned int *)*v40;
        uint64_t v39 = (uint64_t **)v40;
        if (!*v40) {
          goto LABEL_58;
        }
      }
      if (v41 == 64) {
        break;
      }
      BOOL v31 = (unsigned int *)v40[1];
      if (!v31)
      {
        uint64_t v39 = (uint64_t **)(v40 + 1);
        goto LABEL_58;
      }
    }
  }
  else
  {
LABEL_58:
    uint64_t v42 = v40;
    uint64_t v40 = operator new(0x28uLL);
    *(void *)((char *)v40 + 28) = 64;
    *uint64_t v40 = 0;
    v40[1] = 0;
    v40[2] = v42;
    *uint64_t v39 = v40;
    uint64_t v43 = **(void **)(v1 + 96);
    unsigned __int8 v44 = v40;
    if (v43)
    {
      *(void *)(v1 + 96) = v43;
      unsigned __int8 v44 = *v39;
    }
    this = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v1 + 104), v44);
    ++*(void *)(v1 + 112);
  }
  *((_DWORD *)v40 + 8) = 2048;
  unint64_t v45 = (unsigned int *)*v3;
  int v46 = v3;
  uint64_t v47 = v3;
  if (*v3)
  {
    uint64_t v48 = (unsigned int *)*v3;
    while (1)
    {
      while (1)
      {
        uint64_t v47 = v48;
        unsigned int v49 = v48[7];
        if (v49 < 0x81) {
          break;
        }
        uint64_t v48 = (unsigned int *)*v47;
        int v46 = (uint64_t **)v47;
        if (!*v47) {
          goto LABEL_68;
        }
      }
      if (v49 == 128) {
        break;
      }
      uint64_t v48 = (unsigned int *)v47[1];
      if (!v48)
      {
        int v46 = (uint64_t **)(v47 + 1);
        goto LABEL_68;
      }
    }
  }
  else
  {
LABEL_68:
    timespec v50 = v47;
    uint64_t v47 = operator new(0x28uLL);
    *(void *)((char *)v47 + 28) = 128;
    void *v47 = 0;
    v47[1] = 0;
    v47[2] = v50;
    *int v46 = v47;
    uint64_t v51 = **(void **)(v1 + 96);
    unint64_t v52 = v47;
    if (v51)
    {
      *(void *)(v1 + 96) = v51;
      unint64_t v52 = *v46;
    }
    this = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v1 + 104), v52);
    unint64_t v45 = *(unsigned int **)(v1 + 104);
    ++*(void *)(v1 + 112);
  }
  *((_DWORD *)v47 + 8) = 4096;
  unint64_t v53 = v3;
  size_t v54 = v3;
  if (v45)
  {
    while (1)
    {
      while (1)
      {
        size_t v54 = v45;
        unsigned int v55 = v45[7];
        if (v55 < 0x101) {
          break;
        }
        unint64_t v45 = (unsigned int *)*v54;
        unint64_t v53 = (uint64_t **)v54;
        if (!*v54) {
          goto LABEL_78;
        }
      }
      if (v55 == 256) {
        break;
      }
      unint64_t v45 = (unsigned int *)v54[1];
      if (!v45)
      {
        unint64_t v53 = (uint64_t **)(v54 + 1);
        goto LABEL_78;
      }
    }
  }
  else
  {
LABEL_78:
    int v56 = v54;
    size_t v54 = operator new(0x28uLL);
    *(void *)((char *)v54 + 28) = 256;
    void *v54 = 0;
    v54[1] = 0;
    v54[2] = v56;
    *unint64_t v53 = v54;
    uint64_t v57 = **(void **)(v1 + 96);
    uint64_t v58 = v54;
    if (v57)
    {
      *(void *)(v1 + 96) = v57;
      uint64_t v58 = *v53;
    }
    this = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v1 + 104), v58);
    ++*(void *)(v1 + 112);
  }
  *((_DWORD *)v54 + 8) = 0x2000;
  uint64_t v59 = (unsigned int *)*v3;
  int v60 = v3;
  xpc_object_t v61 = v3;
  if (*v3)
  {
    unint64_t v62 = (unsigned int *)*v3;
    while (1)
    {
      while (1)
      {
        xpc_object_t v61 = v62;
        unsigned int v63 = v62[7];
        if (v63 < 0x201) {
          break;
        }
        unint64_t v62 = (unsigned int *)*v61;
        int v60 = (uint64_t **)v61;
        if (!*v61) {
          goto LABEL_88;
        }
      }
      if (v63 == 512) {
        break;
      }
      unint64_t v62 = (unsigned int *)v61[1];
      if (!v62)
      {
        int v60 = (uint64_t **)(v61 + 1);
        goto LABEL_88;
      }
    }
  }
  else
  {
LABEL_88:
    uint64_t v64 = v61;
    xpc_object_t v61 = operator new(0x28uLL);
    *(void *)((char *)v61 + 28) = 512;
    void *v61 = 0;
    v61[1] = 0;
    v61[2] = v64;
    *int v60 = v61;
    uint64_t v65 = **(void **)(v1 + 96);
    int v66 = v61;
    if (v65)
    {
      *(void *)(v1 + 96) = v65;
      int v66 = *v60;
    }
    this = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v1 + 104), v66);
    uint64_t v59 = *(unsigned int **)(v1 + 104);
    ++*(void *)(v1 + 112);
  }
  *((_DWORD *)v61 + 8) = 0x4000;
  std::string v67 = v3;
  uint64_t v68 = v3;
  if (v59)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v68 = v59;
        unsigned int v69 = v59[7];
        if (v69 < 0x401) {
          break;
        }
        uint64_t v59 = (unsigned int *)*v68;
        std::string v67 = (uint64_t **)v68;
        if (!*v68) {
          goto LABEL_98;
        }
      }
      if (v69 == 1024) {
        break;
      }
      uint64_t v59 = (unsigned int *)v68[1];
      if (!v59)
      {
        std::string v67 = (uint64_t **)(v68 + 1);
        goto LABEL_98;
      }
    }
  }
  else
  {
LABEL_98:
    uint64_t v70 = v68;
    uint64_t v68 = operator new(0x28uLL);
    *(void *)((char *)v68 + 28) = 1024;
    *uint64_t v68 = 0;
    v68[1] = 0;
    v68[2] = v70;
    void *v67 = v68;
    uint64_t v71 = **(void **)(v1 + 96);
    std::string v72 = v68;
    if (v71)
    {
      *(void *)(v1 + 96) = v71;
      std::string v72 = *v67;
    }
    this = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v1 + 104), v72);
    ++*(void *)(v1 + 112);
  }
  *((_DWORD *)v68 + 8) = 0x8000;
  int v73 = (unsigned int *)*v3;
  int64_t v74 = v3;
  uint64_t v75 = v3;
  if (*v3)
  {
    __int16 v76 = (unsigned int *)*v3;
    while (1)
    {
      while (1)
      {
        uint64_t v75 = v76;
        unsigned int v77 = v76[7];
        if (v77 < 0x801) {
          break;
        }
        __int16 v76 = (unsigned int *)*v75;
        int64_t v74 = (uint64_t **)v75;
        if (!*v75) {
          goto LABEL_108;
        }
      }
      if (v77 == 2048) {
        break;
      }
      __int16 v76 = (unsigned int *)v75[1];
      if (!v76)
      {
        int64_t v74 = (uint64_t **)(v75 + 1);
        goto LABEL_108;
      }
    }
  }
  else
  {
LABEL_108:
    xpc_object_t v78 = v75;
    uint64_t v75 = operator new(0x28uLL);
    *(void *)((char *)v75 + 28) = 2048;
    *uint64_t v75 = 0;
    v75[1] = 0;
    v75[2] = v78;
    *int64_t v74 = v75;
    uint64_t v79 = **(void **)(v1 + 96);
    xpc_object_t v80 = v75;
    if (v79)
    {
      *(void *)(v1 + 96) = v79;
      xpc_object_t v80 = *v74;
    }
    this = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v1 + 104), v80);
    int v73 = *(unsigned int **)(v1 + 104);
    ++*(void *)(v1 + 112);
  }
  *((_DWORD *)v75 + 8) = 0x10000;
  xpc_object_t v81 = v3;
  if (v73)
  {
    while (1)
    {
      while (1)
      {
        xpc_object_t v81 = v73;
        unsigned int v82 = v73[7];
        if (v82 <= 0x1000) {
          break;
        }
        int v73 = (unsigned int *)*v81;
        uint64_t v3 = (uint64_t **)v81;
        if (!*v81) {
          goto LABEL_118;
        }
      }
      if (v82 == 4096) {
        break;
      }
      int v73 = (unsigned int *)v81[1];
      if (!v73)
      {
        uint64_t v3 = (uint64_t **)(v81 + 1);
        goto LABEL_118;
      }
    }
  }
  else
  {
LABEL_118:
    unint64_t v83 = v81;
    xpc_object_t v81 = operator new(0x28uLL);
    *(void *)((char *)v81 + 28) = 4096;
    *xpc_object_t v81 = 0;
    v81[1] = 0;
    v81[2] = v83;
    *uint64_t v3 = v81;
    uint64_t v84 = **(void **)(v1 + 96);
    xpc_object_t v85 = v81;
    if (v84)
    {
      *(void *)(v1 + 96) = v84;
      xpc_object_t v85 = *v3;
    }
    this = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v1 + 104), v85);
    ++*(void *)(v1 + 112);
  }
  *((_DWORD *)v81 + 8) = 0x20000;
  return this;
}

void ___ZN22LegacyAccessoryManager4initEv_block_invoke(void *a1, int a2)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (std::__shared_weak_count *)a1[6];
  if (!v3) {
    return;
  }
  uint64_t v5 = a1[4];
  size_t v6 = std::__shared_weak_count::lock(v3);
  if (!v6) {
    return;
  }
  unsigned int v7 = v6;
  uint64_t v8 = a1[5];
  if (atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (!v8) {
      return;
    }
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v7);
    if (!v8) {
      return;
    }
  }
  if (*(unsigned __int8 *)(v5 + 92) == a2) {
    return;
  }
  uint64_t v9 = *(NSObject **)v5;
  if (os_log_type_enabled(*(os_log_t *)v5, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v10 = "OPENED";
    if (a2) {
      uint64_t v10 = "CLOSED";
    }
    LODWORD(v30) = 136315138;
    *(void *)((char *)&v30 + 4) = v10;
    _os_log_impl(&dword_1C5767000, v9, OS_LOG_TYPE_DEFAULT, "#I Smart Keyboard Cover: %s", (uint8_t *)&v30, 0xCu);
  }
  long long v12 = (uint64_t **)(v5 + 104);
  int v11 = *(uint64_t **)(v5 + 104);
  *(unsigned char *)(v5 + 92) = a2;
  unsigned int v13 = (uint64_t **)(v5 + 104);
  if (a2)
  {
    if (v11)
    {
      while (1)
      {
        while (1)
        {
          unsigned int v13 = (uint64_t **)v11;
          unsigned int v14 = *((_DWORD *)v11 + 7);
          if (v14 <= 0x1000) {
            break;
          }
          int v11 = *v13;
          long long v12 = v13;
          if (!*v13) {
            goto LABEL_20;
          }
        }
        if (v14 == 4096) {
          break;
        }
        int v11 = v13[1];
        if (!v11)
        {
          long long v12 = v13 + 1;
          goto LABEL_20;
        }
      }
      uint64_t v15 = (uint64_t *)v13;
    }
    else
    {
LABEL_20:
      uint64_t v15 = (uint64_t *)operator new(0x28uLL);
      *(uint64_t *)((char *)v15 + 28) = 4096;
      uint64_t *v15 = 0;
      v15[1] = 0;
      v15[2] = (uint64_t)v13;
      void *v12 = v15;
      uint64_t v16 = **(void **)(v5 + 96);
      uint64_t v17 = v15;
      if (v16)
      {
        *(void *)(v5 + 96) = v16;
        uint64_t v17 = *v12;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v5 + 104), v17);
      ++*(void *)(v5 + 112);
    }
    *(_DWORD *)(v5 + 88) |= *((_DWORD *)v15 + 8);
    uint64_t v22 = *(void *)(v5 + 32);
    uint64_t v23 = *(void *)(v5 + 40);
    if (v22 != v23) {
      goto LABEL_40;
    }
    return;
  }
  if (v11)
  {
    while (1)
    {
      while (1)
      {
        unsigned int v13 = (uint64_t **)v11;
        unsigned int v18 = *((_DWORD *)v11 + 7);
        if (v18 <= 0x1000) {
          break;
        }
        int v11 = *v13;
        long long v12 = v13;
        if (!*v13) {
          goto LABEL_30;
        }
      }
      if (v18 == 4096) {
        break;
      }
      int v11 = v13[1];
      if (!v11)
      {
        long long v12 = v13 + 1;
        goto LABEL_30;
      }
    }
    int v19 = (uint64_t *)v13;
  }
  else
  {
LABEL_30:
    int v19 = (uint64_t *)operator new(0x28uLL);
    *(uint64_t *)((char *)v19 + 28) = 4096;
    *int v19 = 0;
    v19[1] = 0;
    v19[2] = (uint64_t)v13;
    void *v12 = v19;
    uint64_t v20 = **(void **)(v5 + 96);
    unsigned int v21 = v19;
    if (v20)
    {
      *(void *)(v5 + 96) = v20;
      unsigned int v21 = *v12;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v5 + 104), v21);
    ++*(void *)(v5 + 112);
  }
  *(_DWORD *)(v5 + 88) &= ~*((_DWORD *)v19 + 8);
  uint64_t v22 = *(void *)(v5 + 32);
  uint64_t v23 = *(void *)(v5 + 40);
  if (v22 != v23)
  {
LABEL_40:
    while (!*(void *)v22)
    {
      int v24 = 0;
      uint64_t v25 = *(NSObject **)(v22 + 8);
      if (v25) {
        goto LABEL_42;
      }
LABEL_43:
      int v26 = *(_DWORD *)(v5 + 88);
      if (!v24)
      {
        std::string v28 = 0;
        *(void *)&long long v30 = MEMORY[0x1E4F143A8];
        *((void *)&v30 + 1) = 1174405120;
        BOOL v31 = ___ZNK8dispatch8callbackIU13block_pointerFvjEEclIJjEEEvDpT__block_invoke;
        int v32 = &__block_descriptor_tmp_17_2;
LABEL_49:
        uint64_t v29 = 0;
        goto LABEL_50;
      }
      unsigned int v27 = _Block_copy(v24);
      std::string v28 = v27;
      *(void *)&long long v30 = MEMORY[0x1E4F143A8];
      *((void *)&v30 + 1) = 1174405120;
      BOOL v31 = ___ZNK8dispatch8callbackIU13block_pointerFvjEEclIJjEEEvDpT__block_invoke;
      int v32 = &__block_descriptor_tmp_17_2;
      if (!v27) {
        goto LABEL_49;
      }
      uint64_t v29 = _Block_copy(v27);
LABEL_50:
      aBlock = v29;
      int v34 = v26;
      dispatch_async(v25, &v30);
      if (aBlock) {
        _Block_release(aBlock);
      }
      if (v28) {
        _Block_release(v28);
      }
      if (v25) {
        dispatch_release(v25);
      }
      if (v24) {
        _Block_release(v24);
      }
      v22 += 16;
      if (v22 == v23) {
        return;
      }
    }
    int v24 = _Block_copy(*(const void **)v22);
    uint64_t v25 = *(NSObject **)(v22 + 8);
    if (!v25) {
      goto LABEL_43;
    }
LABEL_42:
    dispatch_retain(v25);
    goto LABEL_43;
  }
}

void sub_1C587BFFC(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_40c47_ZTSNSt3__18weak_ptrI22LegacyAccessoryManagerEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c47_ZTSNSt3__18weak_ptrI22LegacyAccessoryManagerEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void ___ZN22LegacyAccessoryManager4initEv_block_invoke_5(void *a1, unint64_t a2, int a3)
{
  uint64_t v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    uint64_t v7 = a1[4];
    uint64_t v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      uint64_t v9 = v8;
      uint64_t v10 = a1[5];
      if (atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        if (!v10) {
          return;
        }
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v9);
        if (!v10) {
          return;
        }
      }
      LegacyAccessoryManager::accessoryNotification_sync(v7, a2, a3);
    }
  }
}

void LegacyAccessoryManager::accessoryNotification_sync(uint64_t a1, unint64_t a2, int a3)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  size_t v6 = *(NSObject **)a1;
  if (os_log_type_enabled(*(os_log_t *)a1, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(__p[0]) = 67109120;
    HIDWORD(__p[0]) = a3;
    _os_log_impl(&dword_1C5767000, v6, OS_LOG_TYPE_DEFAULT, "#I Accessory Port Number: %u", (uint8_t *)__p, 8u);
    size_t v6 = *(NSObject **)a1;
  }
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    ctu::iokit::asString();
    if (v31 >= 0) {
      uint64_t v7 = __p;
    }
    else {
      uint64_t v7 = (void **)__p[0];
    }
    *(_DWORD *)buf = 136315138;
    BOOL v33 = v7;
    _os_log_impl(&dword_1C5767000, v6, OS_LOG_TYPE_DEFAULT, "#I Accessory Status: %s", buf, 0xCu);
    if (v31 < 0) {
      operator delete(__p[0]);
    }
    size_t v6 = *(NSObject **)a1;
  }
  unint64_t v8 = HIDWORD(a2);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT)
    && ((ctu::iokit::asString(), v31 >= 0) ? (uint64_t v9 = __p) : (uint64_t v9 = (void **)__p[0]),
        *(_DWORD *)buf = 136315138,
        BOOL v33 = v9,
        _os_log_impl(&dword_1C5767000, v6, OS_LOG_TYPE_DEFAULT, "#I Accessory Type: %s", buf, 0xCu),
        v31 < 0))
  {
    operator delete(__p[0]);
    if ((a3 - 3) <= 0xFFFFFFFD)
    {
LABEL_16:
      uint64_t v10 = *(NSObject **)a1;
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(__p[0]) = 67109120;
        HIDWORD(__p[0]) = a3;
        _os_log_impl(&dword_1C5767000, v10, OS_LOG_TYPE_DEFAULT, "#I This port (%d) is not supported.", (uint8_t *)__p, 8u);
      }
      return;
    }
  }
  else if ((a3 - 3) <= 0xFFFFFFFD)
  {
    goto LABEL_16;
  }
  int v11 = *(NSObject **)a1;
  BOOL v12 = os_log_type_enabled(*(os_log_t *)a1, OS_LOG_TYPE_DEBUG);
  if (a2 == 1)
  {
    if (!v12)
    {
      if (HIDWORD(a2) == 4096) {
        goto LABEL_42;
      }
LABEL_22:
      unsigned int v13 = *(NSObject **)a1;
      if (os_log_type_enabled(*(os_log_t *)a1, OS_LOG_TYPE_DEBUG))
      {
        LOWORD(__p[0]) = 0;
        _os_log_debug_impl(&dword_1C5767000, v13, OS_LOG_TYPE_DEBUG, "#D Detected not keyboard type. Setting the accessory bitmask", (uint8_t *)__p, 2u);
        uint64_t v15 = (void *)(a1 + 104);
        uint64_t v14 = *(void *)(a1 + 104);
        if (v14)
        {
          while (1)
          {
LABEL_33:
            while (1)
            {
              uint64_t v16 = (void *)v14;
              unsigned int v17 = *(_DWORD *)(v14 + 28);
              if (v17 <= v8) {
                break;
              }
              uint64_t v14 = *v16;
              uint64_t v15 = v16;
              if (!*v16) {
                goto LABEL_37;
              }
            }
            if (v17 >= v8) {
              break;
            }
            uint64_t v14 = v16[1];
            if (!v14)
            {
              uint64_t v15 = v16 + 1;
              goto LABEL_37;
            }
          }
          unsigned int v18 = v16;
          goto LABEL_41;
        }
      }
      else
      {
        uint64_t v15 = (void *)(a1 + 104);
        uint64_t v14 = *(void *)(a1 + 104);
        if (v14) {
          goto LABEL_33;
        }
      }
      uint64_t v16 = v15;
LABEL_37:
      unsigned int v18 = operator new(0x28uLL);
      v18[7] = v8;
      v18[8] = 0;
      *(void *)unsigned int v18 = 0;
      *((void *)v18 + 1) = 0;
      *((void *)v18 + 2) = v16;
      void *v15 = v18;
      uint64_t v19 = **(void **)(a1 + 96);
      uint64_t v20 = (uint64_t *)v18;
      if (v19)
      {
        *(void *)(a1 + 96) = v19;
        uint64_t v20 = (uint64_t *)*v15;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 104), v20);
      ++*(void *)(a1 + 112);
LABEL_41:
      *(_DWORD *)(a1 + 88) |= v18[8];
      goto LABEL_42;
    }
    LOWORD(__p[0]) = 0;
    _os_log_debug_impl(&dword_1C5767000, v11, OS_LOG_TYPE_DEBUG, "#D An accessory is attached", (uint8_t *)__p, 2u);
    if (HIDWORD(a2) != 4096) {
      goto LABEL_22;
    }
  }
  else
  {
    if (v12)
    {
      LOWORD(__p[0]) = 0;
      _os_log_debug_impl(&dword_1C5767000, v11, OS_LOG_TYPE_DEBUG, "#D An accessory is detached. Clear all the bits in the accessory state", (uint8_t *)__p, 2u);
    }
    *(_DWORD *)(a1 + 88) = 0;
  }
LABEL_42:
  unsigned int v21 = *(NSObject **)a1;
  if (*(unsigned char *)(a1 + 92))
  {
    if (os_log_type_enabled(*(os_log_t *)a1, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(__p[0]) = 0;
      _os_log_debug_impl(&dword_1C5767000, v21, OS_LOG_TYPE_DEBUG, "#D If a keyboard is covered, we should set the keyboard accessory state regardless of the accessory event", (uint8_t *)__p, 2u);
      uint64_t v23 = (uint64_t **)(a1 + 104);
      uint64_t v22 = *(uint64_t **)(a1 + 104);
      if (v22)
      {
        while (1)
        {
LABEL_49:
          while (1)
          {
            int v24 = (uint64_t **)v22;
            unsigned int v25 = *((_DWORD *)v22 + 7);
            if (v25 <= 0x1000) {
              break;
            }
            uint64_t v22 = *v24;
            uint64_t v23 = v24;
            if (!*v24) {
              goto LABEL_53;
            }
          }
          if (v25 == 4096) {
            break;
          }
          uint64_t v22 = v24[1];
          if (!v22)
          {
            uint64_t v23 = v24 + 1;
            goto LABEL_53;
          }
        }
        int v26 = (uint64_t *)v24;
        goto LABEL_57;
      }
    }
    else
    {
      uint64_t v23 = (uint64_t **)(a1 + 104);
      uint64_t v22 = *(uint64_t **)(a1 + 104);
      if (v22) {
        goto LABEL_49;
      }
    }
    int v24 = v23;
LABEL_53:
    int v26 = (uint64_t *)operator new(0x28uLL);
    *(uint64_t *)((char *)v26 + 28) = 4096;
    uint64_t *v26 = 0;
    v26[1] = 0;
    v26[2] = (uint64_t)v24;
    *uint64_t v23 = v26;
    uint64_t v27 = **(void **)(a1 + 96);
    std::string v28 = v26;
    if (v27)
    {
      *(void *)(a1 + 96) = v27;
      std::string v28 = *v23;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 104), v28);
    ++*(void *)(a1 + 112);
LABEL_57:
    *(_DWORD *)(a1 + 88) |= *((_DWORD *)v26 + 8);
    unsigned int v21 = *(NSObject **)a1;
  }
  if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
  {
    int v29 = *(_DWORD *)(a1 + 88);
    LODWORD(__p[0]) = 67109120;
    HIDWORD(__p[0]) = v29;
    _os_log_impl(&dword_1C5767000, v21, OS_LOG_TYPE_DEFAULT, "#I Accessory State: 0x%x\n", (uint8_t *)__p, 8u);
  }
  LegacyAccessoryManager::notifyClients((NSObject **)a1);
}

void LegacyAccessoryManager::notifyClients(NSObject **this)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *this;
  if (os_log_type_enabled(*this, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = *((_DWORD *)this + 22);
    LODWORD(v12) = 67109120;
    HIDWORD(v12) = v3;
    _os_log_impl(&dword_1C5767000, v2, OS_LOG_TYPE_DEFAULT, "#I Notifying Accessory State: 0x%x\n", (uint8_t *)&v12, 8u);
  }
  uint64_t v4 = this[4];
  uint64_t v5 = this[5];
  if (v4 != v5)
  {
    while (!v4->isa)
    {
      size_t v6 = 0;
      isa = v4[1].isa;
      if (isa) {
        goto LABEL_8;
      }
LABEL_9:
      int v8 = *((_DWORD *)this + 22);
      if (!v6)
      {
        uint64_t v10 = 0;
        uint64_t v12 = MEMORY[0x1E4F143A8];
        uint64_t v13 = 1174405120;
        uint64_t v14 = ___ZNK8dispatch8callbackIU13block_pointerFvjEEclIJjEEEvDpT__block_invoke;
        uint64_t v15 = &__block_descriptor_tmp_17_2;
LABEL_15:
        int v11 = 0;
        goto LABEL_16;
      }
      uint64_t v9 = _Block_copy(v6);
      uint64_t v10 = v9;
      uint64_t v12 = MEMORY[0x1E4F143A8];
      uint64_t v13 = 1174405120;
      uint64_t v14 = ___ZNK8dispatch8callbackIU13block_pointerFvjEEclIJjEEEvDpT__block_invoke;
      uint64_t v15 = &__block_descriptor_tmp_17_2;
      if (!v9) {
        goto LABEL_15;
      }
      int v11 = _Block_copy(v9);
LABEL_16:
      aBlock = v11;
      int v17 = v8;
      dispatch_async(isa, &v12);
      if (aBlock) {
        _Block_release(aBlock);
      }
      if (v10) {
        _Block_release(v10);
      }
      if (isa) {
        dispatch_release(isa);
      }
      if (v6) {
        _Block_release(v6);
      }
      v4 += 2;
      if (v4 == v5) {
        return;
      }
    }
    size_t v6 = _Block_copy(v4->isa);
    isa = v4[1].isa;
    if (!isa) {
      goto LABEL_9;
    }
LABEL_8:
    dispatch_retain(isa);
    goto LABEL_9;
  }
}

void sub_1C587C7FC(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void *LegacyAccessoryManager::registerCallback(void *a1, void **a2)
{
  uint64_t v4 = (void *)a1[5];
  if ((unint64_t)v4 >= a1[6])
  {
    uint64_t result = std::vector<dispatch::callback<void({block_pointer})>>::__push_back_slow_path<dispatch::callback<void({block_pointer})> const&>(a1 + 4, (uint64_t)a2);
    a1[5] = result;
  }
  else
  {
    uint64_t v5 = *a2;
    if (*a2) {
      uint64_t v5 = _Block_copy(v5);
    }
    size_t v6 = a2[1];
    *uint64_t v4 = v5;
    v4[1] = v6;
    if (v6) {
      dispatch_retain(v6);
    }
    uint64_t result = v4 + 2;
    a1[5] = v4 + 2;
  }
  return result;
}

void *std::vector<dispatch::callback<void({block_pointer})(unsigned int)>>::__push_back_slow_path<dispatch::callback<void({block_pointer})(unsigned int)> const&>(void *a1, uint64_t a2)
{
  uint64_t v2 = a1[1] - *a1;
  unint64_t v3 = (v2 >> 4) + 1;
  if (v3 >> 60) {
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v6 = a1[2] - *a1;
  if (v6 >> 3 > v3) {
    unint64_t v3 = v6 >> 3;
  }
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v7 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v7 = v3;
  }
  if (!v7)
  {
    int v8 = 0;
    uint64_t v9 = *(void **)a2;
    if (!*(void *)a2) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v7 >> 60) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  int v8 = (char *)operator new(16 * v7);
  uint64_t v9 = *(void **)a2;
  if (*(void *)a2) {
LABEL_12:
  }
    uint64_t v9 = _Block_copy(v9);
LABEL_13:
  uint64_t v10 = *(NSObject **)(a2 + 8);
  int v11 = &v8[16 * (v2 >> 4)];
  *(void *)int v11 = v9;
  *((void *)v11 + 1) = v10;
  if (v10) {
    dispatch_retain(v10);
  }
  uint64_t v12 = &v8[16 * v7];
  uint64_t v13 = v11 + 16;
  uint64_t v14 = (char *)*a1;
  uint64_t v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v11;
    a1[1] = v13;
    a1[2] = v12;
  }
  else
  {
    unint64_t v16 = (unint64_t)&v15[-*a1 - 16];
    if (v16 < 0xD0) {
      goto LABEL_17;
    }
    uint64_t v23 = &v15[-(v16 & 0xFFFFFFFFFFFFFFF0)];
    BOOL v24 = &v8[v2 - 8 - (v16 & 0xFFFFFFFFFFFFFFF0)] >= v15 || v23 - 8 >= v11;
    BOOL v25 = !v24;
    if (v23 - 16 < &v8[v2 - 8] && &v8[v2 - (v16 & 0xFFFFFFFFFFFFFFF0) - 16] < v15 - 8) {
      goto LABEL_17;
    }
    if (v25) {
      goto LABEL_17;
    }
    uint64_t v27 = (v16 >> 4) + 1;
    uint64_t v28 = 16 * (v27 & 0x1FFFFFFFFFFFFFFELL);
    int v17 = &v11[-v28];
    int v29 = &v15[-v28];
    long long v30 = (double *)(v11 - 32);
    char v31 = (const double *)(v15 - 32);
    uint64_t v32 = v27 & 0x1FFFFFFFFFFFFFFELL;
    do
    {
      float64x2x2_t v33 = vld2q_f64(v31);
      vst2q_f64(v30, v33);
      *(_OWORD *)char v31 = 0uLL;
      *((_OWORD *)v31 + 1) = 0uLL;
      v31 -= 4;
      v30 -= 4;
      v32 -= 2;
    }
    while (v32);
    int v11 = v17;
    uint64_t v15 = v29;
    if (v27 != (v27 & 0x1FFFFFFFFFFFFFFELL))
    {
LABEL_17:
      int v17 = v11;
      do
      {
        long long v18 = *((_OWORD *)v15 - 1);
        v15 -= 16;
        *((_OWORD *)v17 - 1) = v18;
        v17 -= 16;
        *(void *)uint64_t v15 = 0;
        *((void *)v15 + 1) = 0;
      }
      while (v15 != v14);
    }
    uint64_t v15 = (char *)*a1;
    uint64_t v19 = (char *)a1[1];
    *a1 = v17;
    a1[1] = v13;
    a1[2] = v12;
    while (v19 != v15)
    {
      uint64_t v20 = *((void *)v19 - 1);
      if (v20) {
        dispatch_release(v20);
      }
      unsigned int v21 = (const void *)*((void *)v19 - 2);
      if (v21) {
        _Block_release(v21);
      }
      v19 -= 16;
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v13;
}

LegacyAccessoryManager **std::unique_ptr<LegacyAccessoryManager>::~unique_ptr[abi:ne180100](LegacyAccessoryManager **a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    LegacyAccessoryManager::~LegacyAccessoryManager(v2);
    operator delete(v3);
  }
  return a1;
}

void std::__shared_ptr_pointer<LegacyAccessoryManager *,std::shared_ptr<LegacyAccessoryManager>::__shared_ptr_default_delete<LegacyAccessoryManager,LegacyAccessoryManager>,std::allocator<LegacyAccessoryManager>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<LegacyAccessoryManager *,std::shared_ptr<LegacyAccessoryManager>::__shared_ptr_default_delete<LegacyAccessoryManager,LegacyAccessoryManager>,std::allocator<LegacyAccessoryManager>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1 = *(LegacyAccessoryManager **)(a1 + 24);
  if (v1)
  {
    LegacyAccessoryManager::~LegacyAccessoryManager(v1);
    operator delete(v2);
  }
}

uint64_t std::__shared_ptr_pointer<LegacyAccessoryManager *,std::shared_ptr<LegacyAccessoryManager>::__shared_ptr_default_delete<LegacyAccessoryManager,LegacyAccessoryManager>,std::allocator<LegacyAccessoryManager>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x80000001C59A252FLL) {
    return a1 + 24;
  }
  if (((v3 & 0x80000001C59A252FLL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000001C59A252FLL)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001C59A252FLL & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 24;
  }
  return 0;
}

uint64_t ___ZNK8dispatch8callbackIU13block_pointerFvjEEclIJjEEEvDpT__block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *(unsigned int *)(a1 + 40));
}

void *__copy_helper_block_e8_32c43_ZTSN8dispatch5blockIU13block_pointerFvjEEE(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void **)(a2 + 32);
  if (result) {
    uint64_t result = _Block_copy(result);
  }
  *(void *)(a1 + 32) = result;
  return result;
}

void __destroy_helper_block_e8_32c43_ZTSN8dispatch5blockIU13block_pointerFvjEEE(uint64_t a1)
{
  uint64_t v1 = *(const void **)(a1 + 32);
  if (v1) {
    _Block_release(v1);
  }
}

uint64_t __cxx_global_var_init_14()
{
  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<ABMServer>::~PthreadMutexGuardPolicy, &ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance, &dword_1C5767000);
  }
  return result;
}

const char *IOPortUSBCAccessoriesDelegate::getName(IOPortUSBCAccessoriesDelegate *this)
{
  return "IOPortUSBCAccessories.delegate";
}

uint64_t IOPortUSBCAccessoriesDelegate::create@<X0>(void *a1@<X0>, NSObject **a2@<X1>, std::__shared_weak_count_vtbl **a3@<X8>)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  unint64_t v16 = 0;
  int v17 = 0;
  uint64_t v6 = (std::__shared_weak_count_vtbl *)operator new(0x70uLL);
  uint64_t v7 = a1[3];
  if (!v7) {
    goto LABEL_4;
  }
  if ((void *)v7 != a1)
  {
    uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 16))(v7);
LABEL_4:
    uint64_t v19 = (void *)v7;
    goto LABEL_6;
  }
  uint64_t v19 = v18;
  (*(void (**)(void *, void *))(*a1 + 24))(a1, v18);
LABEL_6:
  int v8 = *a2;
  uint64_t v15 = v8;
  if (v8) {
    dispatch_retain(v8);
  }
  IOPortUSBCAccessoriesDelegate::IOPortUSBCAccessoriesDelegate(v6, v18, &v15);
  int v11 = (std::__shared_weak_count *)operator new(0x20uLL);
  v11->__shared_owners_ = 0;
  p_shared_owners = &v11->__shared_owners_;
  v11->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20F90C0;
  v11->__shared_weak_owners_ = 0;
  v11[1].__vftable = v6;
  on_zero_shared = (std::__shared_weak_count *)v6->__on_zero_shared;
  if (!on_zero_shared)
  {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v6->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v6;
    v6->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v11;
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  if (on_zero_shared->__shared_owners_ == -1)
  {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v6->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v6;
    v6->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v11;
    std::__shared_weak_count::__release_weak(on_zero_shared);
    if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL))
    {
LABEL_13:
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
LABEL_14:
  unint64_t v16 = v6;
  int v17 = v11;
  if (v8) {
    dispatch_release(v8);
  }
  if (v19 == v18)
  {
    (*(void (**)(void *))(v18[0] + 32))(v18);
  }
  else if (v19)
  {
    (*(void (**)(void *, uint64_t, uint64_t))(*v19 + 40))(v19, v9, v10);
  }
  uint64_t result = (*((uint64_t (**)(std::__shared_weak_count_vtbl *))v6->~__shared_weak_count + 7))(v6);
  *a3 = v6;
  a3[1] = (std::__shared_weak_count_vtbl *)v11;
  return result;
}

void sub_1C587CF00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12)
{
  operator delete(v12);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void *IOPortUSBCAccessoriesDelegate::IOPortUSBCAccessoriesDelegate(void *a1, void *a2, NSObject **a3)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  *a1 = &unk_1F20F9028;
  uint64_t v5 = (void *)a2[3];
  if (v5)
  {
    if (v5 == a2)
    {
      int v11 = v10;
      (*(void (**)(void *, void *))(*a2 + 24))(a2, v10);
    }
    else
    {
      int v11 = (void *)(*(uint64_t (**)(void *))(*v5 + 16))(v5);
    }
  }
  else
  {
    int v11 = 0;
  }
  uint64_t v6 = *a3;
  uint64_t v9 = v6;
  if (v6) {
    dispatch_retain(v6);
  }
  uint64_t v7 = (char *)(*(uint64_t (**)(void *))(*a1 + 16))(a1);
  AccessoriesDelegateBase::AccessoriesDelegateBase((uint64_t)a1, (uint64_t)v10, &v9, v7);
  if (v6) {
    dispatch_release(v6);
  }
  if (v11 == v10)
  {
    (*(void (**)(void *))(v10[0] + 32))(v10);
  }
  else if (v11)
  {
    (*(void (**)(void *))(*v11 + 40))(v11);
  }
  *a1 = &unk_1F20F9028;
  a1[11] = 0;
  a1[12] = 0;
  return a1;
}

void sub_1C587D170(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (v10) {
    dispatch_release(v10);
  }
  std::function<void ()(ctu::cf::CFSharedRef<__CFError>,std::vector<abm::AccessoryInfo>)>::~function(&a10);
  _Unwind_Resume(a1);
}

void IOPortUSBCAccessoriesDelegate::~IOPortUSBCAccessoriesDelegate(std::__shared_weak_count **this)
{
  uint64_t v1 = (IOPortUSBCAccessoriesDelegate *)this;
  *this = (std::__shared_weak_count *)&unk_1F20F9028;
  uint64_t v2 = this[12];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    this = (std::__shared_weak_count **)v1;
  }
  else if (((vars8 ^ (2 * vars8)) & 0x4000000000000000) != 0)
  {
    __break(0xC471u);
  }
  AccessoriesDelegateBase::~AccessoriesDelegateBase((AccessoriesDelegateBase *)this);
}

{
  IOPortUSBCAccessoriesDelegate *v1;
  std::__shared_weak_count *v2;
  uint64_t vars8;

  uint64_t v1 = (IOPortUSBCAccessoriesDelegate *)this;
  *this = (std::__shared_weak_count *)&unk_1F20F9028;
  uint64_t v2 = this[12];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    this = (std::__shared_weak_count **)v1;
  }
  else if (((vars8 ^ (2 * vars8)) & 0x4000000000000000) != 0)
  {
    __break(0xC471u);
  }
  AccessoriesDelegateBase::~AccessoriesDelegateBase((AccessoriesDelegateBase *)this);
}

void IOPortUSBCAccessoriesDelegate::~IOPortUSBCAccessoriesDelegate(IOPortUSBCAccessoriesDelegate *this)
{
  *(void *)this = &unk_1F20F9028;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 12);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    AccessoriesDelegateBase::~AccessoriesDelegateBase(this);
  }
  else
  {
    AccessoriesDelegateBase::~AccessoriesDelegateBase(this);
  }
  operator delete(v3);
}

void IOPortUSBCAccessoriesDelegate::start(IOPortUSBCAccessoriesDelegate *this)
{
  v1[0] = MEMORY[0x1E4F143A8];
  v1[1] = 0x40000000;
  v1[2] = ___ZN29IOPortUSBCAccessoriesDelegate5startEv_block_invoke;
  v1[3] = &__block_descriptor_tmp_5_4;
  v1[4] = this;
  ctu::SharedSynchronizable<AccessoriesDelegateBase>::execute_wrapped((uint64_t *)this + 1, (uint64_t)v1);
}

void ___ZN29IOPortUSBCAccessoriesDelegate5startEv_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (!*(unsigned char *)(v1 + 80))
  {
    uint64_t v2 = *(NSObject **)(v1 + 40);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1C5767000, v2, OS_LOG_TYPE_DEFAULT, "#I Starting", buf, 2u);
    }
    *(unsigned char *)(v1 + 80) = 1;
    uint64_t v3 = *(std::__shared_weak_count **)(v1 + 16);
    if (!v3 || (uint64_t v4 = *(void *)(v1 + 8), (v5 = std::__shared_weak_count::lock(v3)) == 0)) {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    uint64_t v7 = v5;
    atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v7);
    }
    int v8 = *(NSObject **)(v1 + 24);
    dispatch_object_t v20 = v8;
    if (v8) {
      dispatch_retain(v8);
    }
    v9.fObj.fObj = (dispatch_object_s *)"com.apple.telephony.abm";
    ctu::iokit::IOPortUSBCController::create((uint64_t *)buf, (ctu::iokit::IOPortUSBCController *)&v20, v9, "IOPortUSBCAccessories.delegate", v6);
    long long v10 = *(_OWORD *)buf;
    memset(buf, 0, sizeof(buf));
    int v11 = *(std::__shared_weak_count **)(v1 + 96);
    *(_OWORD *)(v1 + 88) = v10;
    if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    uint64_t v12 = *(std::__shared_weak_count **)&buf[8];
    if (*(void *)&buf[8]
      && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
    if (v20) {
      dispatch_release(v20);
    }
    if (*(void *)(v1 + 88))
    {
      v16[0] = MEMORY[0x1E4F143A8];
      v16[1] = 1174405120;
      void v16[2] = ___ZN29IOPortUSBCAccessoriesDelegate5startEv_block_invoke_2;
      v16[3] = &__block_descriptor_tmp_35;
      v16[4] = v1;
      v16[5] = v4;
      int v17 = v7;
      atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      uint64_t v13 = _Block_copy(v16);
      uint64_t v14 = *(NSObject **)(v1 + 24);
      if (v14) {
        dispatch_retain(v14);
      }
      aBlock = v13;
      dispatch_object_t object = v14;
      ctu::iokit::IOPortUSBCController::registerCallback();
      if (object) {
        dispatch_release(object);
      }
      if (aBlock) {
        _Block_release(aBlock);
      }
      if (v17) {
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    else
    {
      uint64_t v15 = *(NSObject **)(v1 + 40);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_error_impl(&dword_1C5767000, v15, OS_LOG_TYPE_ERROR, "Failed to create IOPort Controller!", buf, 2u);
      }
    }
    std::__shared_weak_count::__release_weak(v7);
  }
}

void sub_1C587D704(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, char a16)
{
  dispatch::callback<void({block_pointer})(ctu::iokit::USBCAccessory)>::~callback((uint64_t)&a16);
  if (a15)
  {
    std::__shared_weak_count::__release_weak(a15);
    std::__shared_weak_count::__release_weak(v16);
    _Unwind_Resume(a1);
  }
  std::__shared_weak_count::__release_weak(v16);
  _Unwind_Resume(a1);
}

void ___ZN29IOPortUSBCAccessoriesDelegate5startEv_block_invoke_2(void *a1, int a2)
{
  *(void *)&v103[5] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    uint64_t v5 = a1[4];
    uint64_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      uint64_t v7 = v6;
      uint64_t v8 = a1[5];
      if (atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        if (!v8) {
          return;
        }
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v7);
        if (!v8) {
          return;
        }
      }
      queue v9 = *(NSObject **)(v5 + 40);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        ctu::iokit::IOPortUSBCController::asString();
        long long v10 = (v101 & 0x8000000000000000) == 0 ? &__p : (void **)__p;
        *(_DWORD *)buf = 136315138;
        *(void *)v103 = v10;
        _os_log_impl(&dword_1C5767000, v9, OS_LOG_TYPE_DEFAULT, "#I Detected Accessory: %s\n", buf, 0xCu);
        if (SHIBYTE(v101) < 0) {
          operator delete(__p);
        }
      }
      if (*(void *)(v5 + 72))
      {
        long long __p = 0;
        uint64_t v100 = 0;
        unint64_t v101 = 0;
        if (ctu::iokit::operator&())
        {
          int v11 = v100;
          if ((unint64_t)v100 < v101)
          {
            uint64_t v12 = 131089;
LABEL_20:
            *(void *)int v11 = v12;
            *((_DWORD *)v11 + 2) = 0x20000;
            uint64_t v13 = v11 + 12;
LABEL_50:
            uint64_t v100 = v13;
            int v19 = 1;
LABEL_51:
            if (ctu::iokit::operator&())
            {
              char v31 = v100;
              if ((unint64_t)v100 < v101)
              {
                uint64_t v32 = 131090;
LABEL_57:
                *(void *)char v31 = v32;
                *((_DWORD *)v31 + 2) = 0x20000;
                float64x2x2_t v33 = v31 + 12;
LABEL_86:
                uint64_t v100 = v33;
                int v19 = 1;
LABEL_87:
                if (ctu::iokit::operator&())
                {
                  timespec v50 = v100;
                  if ((unint64_t)v100 < v101)
                  {
                    uint64_t v51 = 131091;
LABEL_93:
                    *(void *)timespec v50 = v51;
                    *((_DWORD *)v50 + 2) = 0x20000;
                    unint64_t v52 = v50 + 12;
LABEL_122:
                    uint64_t v100 = v52;
                    int v19 = 1;
LABEL_123:
                    if (ctu::iokit::operator&())
                    {
                      unsigned int v69 = v100;
                      if ((unint64_t)v100 < v101)
                      {
                        uint64_t v70 = 131092;
LABEL_129:
                        *(void *)unsigned int v69 = v70;
                        v69[2] = 0x20000;
                        uint64_t v71 = (char *)(v69 + 3);
                        goto LABEL_163;
                      }
                      std::string v72 = __p;
                      unint64_t v73 = 0xAAAAAAAAAAAAAAABLL * ((v100 - (unsigned char *)__p) >> 2);
                      unint64_t v74 = v73 + 1;
                      if (v73 + 1 > 0x1555555555555555) {
                        std::vector<std::string>::__throw_length_error[abi:ne180100]();
                      }
                      if (0x5555555555555556 * ((uint64_t)(v101 - (void)__p) >> 2) > v74) {
                        unint64_t v74 = 0x5555555555555556 * ((uint64_t)(v101 - (void)__p) >> 2);
                      }
                      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v101 - (void)__p) >> 2) >= 0xAAAAAAAAAAAAAAALL) {
                        unint64_t v75 = 0x1555555555555555;
                      }
                      else {
                        unint64_t v75 = v74;
                      }
                      if (v75)
                      {
                        if (v75 > 0x1555555555555555) {
                          std::__throw_bad_array_new_length[abi:ne180100]();
                        }
                        __int16 v76 = (char *)operator new(12 * v75);
                      }
                      else
                      {
                        __int16 v76 = 0;
                      }
                      uint64_t v84 = &v76[12 * v73];
                      xpc_object_t v85 = &v76[12 * v75];
                      *(void *)uint64_t v84 = 131092;
                      *((_DWORD *)v84 + 2) = 0x20000;
                      uint64_t v71 = v84 + 12;
                      if (v69 != v72)
                      {
                        do
                        {
                          uint64_t v86 = *(void *)(v69 - 3);
                          v69 -= 3;
                          int v87 = v69[2];
                          *(void *)(v84 - 12) = v86;
                          v84 -= 12;
                          *((_DWORD *)v84 + 2) = v87;
                        }
                        while (v69 != v72);
LABEL_160:
                        unsigned int v69 = __p;
                      }
                    }
                    else
                    {
                      if (!ctu::iokit::operator&())
                      {
                        if (!v19)
                        {
                          xpc_object_t v88 = *(NSObject **)(v5 + 40);
                          if (os_log_type_enabled(v88, OS_LOG_TYPE_ERROR))
                          {
                            int v89 = *(_DWORD *)(v5 + 104);
                            *(_DWORD *)buf = 67109376;
                            v103[0] = v89;
                            LOWORD(v103[1]) = 1024;
                            *(_DWORD *)((char *)&v103[1] + 2) = a2;
                            _os_log_error_impl(&dword_1C5767000, v88, OS_LOG_TYPE_ERROR, "Failed to parse bitmask (current: 0x%x, received: 0x%x)", buf, 0xEu);
                          }
                          goto LABEL_171;
                        }
                        *(_DWORD *)(v5 + 104) = a2;
                        xpc_object_t v97 = 0;
                        CFTypeRef cf = 0;
                        xpc_object_t v95 = 0;
                        xpc_object_t v96 = 0;
                        unsigned int v77 = __p;
                        int64_t v78 = v100 - (unsigned char *)__p;
                        if (v100 != __p) {
                          goto LABEL_164;
                        }
                        goto LABEL_166;
                      }
                      unsigned int v69 = v100;
                      if ((unint64_t)v100 < v101)
                      {
                        uint64_t v70 = 65556;
                        goto LABEL_129;
                      }
                      uint64_t v79 = __p;
                      unint64_t v80 = 0xAAAAAAAAAAAAAAABLL * ((v100 - (unsigned char *)__p) >> 2);
                      unint64_t v81 = v80 + 1;
                      if (v80 + 1 > 0x1555555555555555) {
                        std::vector<std::string>::__throw_length_error[abi:ne180100]();
                      }
                      if (0x5555555555555556 * ((uint64_t)(v101 - (void)__p) >> 2) > v81) {
                        unint64_t v81 = 0x5555555555555556 * ((uint64_t)(v101 - (void)__p) >> 2);
                      }
                      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v101 - (void)__p) >> 2) >= 0xAAAAAAAAAAAAAAALL) {
                        unint64_t v82 = 0x1555555555555555;
                      }
                      else {
                        unint64_t v82 = v81;
                      }
                      if (v82)
                      {
                        if (v82 > 0x1555555555555555) {
                          std::__throw_bad_array_new_length[abi:ne180100]();
                        }
                        unint64_t v83 = (char *)operator new(12 * v82);
                      }
                      else
                      {
                        unint64_t v83 = 0;
                      }
                      uint64_t v84 = &v83[12 * v80];
                      xpc_object_t v85 = &v83[12 * v82];
                      *(void *)uint64_t v84 = 65556;
                      *((_DWORD *)v84 + 2) = 0x20000;
                      uint64_t v71 = v84 + 12;
                      if (v69 != v79)
                      {
                        do
                        {
                          uint64_t v90 = *(void *)(v69 - 3);
                          v69 -= 3;
                          int v91 = v69[2];
                          *(void *)(v84 - 12) = v90;
                          v84 -= 12;
                          *((_DWORD *)v84 + 2) = v91;
                        }
                        while (v69 != v79);
                        goto LABEL_160;
                      }
                    }
                    long long __p = v84;
                    uint64_t v100 = v71;
                    unint64_t v101 = (unint64_t)v85;
                    if (v69) {
                      operator delete(v69);
                    }
LABEL_163:
                    uint64_t v100 = v71;
                    *(_DWORD *)(v5 + 104) = a2;
                    xpc_object_t v97 = 0;
                    CFTypeRef cf = 0;
                    xpc_object_t v95 = 0;
                    xpc_object_t v96 = 0;
                    unsigned int v77 = __p;
                    int64_t v78 = v71 - (unsigned char *)__p;
                    if (v71 != __p)
                    {
LABEL_164:
                      if (0xAAAAAAAAAAAAAAABLL * (v78 >> 2) > 0x1555555555555555) {
                        std::vector<std::string>::__throw_length_error[abi:ne180100]();
                      }
                      v92 = (char *)operator new(v78);
                      xpc_object_t v93 = &v92[4 * (v78 >> 2)];
                      xpc_object_t v95 = v92;
                      xpc_object_t v97 = v93;
                      memcpy(v92, v77, v78);
                      xpc_object_t v96 = v93;
                    }
LABEL_166:
                    uint64_t v94 = *(void *)(v5 + 72);
                    if (!v94) {
                      std::__throw_bad_function_call[abi:ne180100]();
                    }
                    (*(void (**)(uint64_t, CFTypeRef *, void **))(*(void *)v94 + 48))(v94, &cf, &v95);
                    if (v95)
                    {
                      xpc_object_t v96 = v95;
                      operator delete(v95);
                    }
                    if (cf) {
                      CFRelease(cf);
                    }
LABEL_171:
                    if (__p)
                    {
                      uint64_t v100 = (char *)__p;
                      operator delete(__p);
                    }
                    return;
                  }
                  unint64_t v53 = (char *)__p;
                  unint64_t v54 = 0xAAAAAAAAAAAAAAABLL * ((v100 - (unsigned char *)__p) >> 2);
                  unint64_t v55 = v54 + 1;
                  if (v54 + 1 > 0x1555555555555555) {
                    std::vector<std::string>::__throw_length_error[abi:ne180100]();
                  }
                  if (0x5555555555555556 * ((uint64_t)(v101 - (void)__p) >> 2) > v55) {
                    unint64_t v55 = 0x5555555555555556 * ((uint64_t)(v101 - (void)__p) >> 2);
                  }
                  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v101 - (void)__p) >> 2) >= 0xAAAAAAAAAAAAAAALL) {
                    unint64_t v56 = 0x1555555555555555;
                  }
                  else {
                    unint64_t v56 = v55;
                  }
                  if (v56)
                  {
                    if (v56 > 0x1555555555555555) {
                      std::__throw_bad_array_new_length[abi:ne180100]();
                    }
                    uint64_t v57 = (char *)operator new(12 * v56);
                  }
                  else
                  {
                    uint64_t v57 = 0;
                  }
                  unsigned int v63 = &v57[12 * v54];
                  uint64_t v64 = &v57[12 * v56];
                  *(void *)unsigned int v63 = 131091;
                  *((_DWORD *)v63 + 2) = 0x20000;
                  unint64_t v52 = v63 + 12;
                  if (v50 != v53)
                  {
                    do
                    {
                      uint64_t v65 = *(void *)(v50 - 12);
                      v50 -= 12;
                      int v66 = *((_DWORD *)v50 + 2);
                      *(void *)(v63 - 12) = v65;
                      v63 -= 12;
                      *((_DWORD *)v63 + 2) = v66;
                    }
                    while (v50 != v53);
LABEL_119:
                    timespec v50 = (char *)__p;
                  }
                }
                else
                {
                  if (!ctu::iokit::operator&()) {
                    goto LABEL_123;
                  }
                  timespec v50 = v100;
                  if ((unint64_t)v100 < v101)
                  {
                    uint64_t v51 = 65555;
                    goto LABEL_93;
                  }
                  uint64_t v58 = (char *)__p;
                  unint64_t v59 = 0xAAAAAAAAAAAAAAABLL * ((v100 - (unsigned char *)__p) >> 2);
                  unint64_t v60 = v59 + 1;
                  if (v59 + 1 > 0x1555555555555555) {
                    std::vector<std::string>::__throw_length_error[abi:ne180100]();
                  }
                  if (0x5555555555555556 * ((uint64_t)(v101 - (void)__p) >> 2) > v60) {
                    unint64_t v60 = 0x5555555555555556 * ((uint64_t)(v101 - (void)__p) >> 2);
                  }
                  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v101 - (void)__p) >> 2) >= 0xAAAAAAAAAAAAAAALL) {
                    unint64_t v61 = 0x1555555555555555;
                  }
                  else {
                    unint64_t v61 = v60;
                  }
                  if (v61)
                  {
                    if (v61 > 0x1555555555555555) {
                      std::__throw_bad_array_new_length[abi:ne180100]();
                    }
                    unint64_t v62 = (char *)operator new(12 * v61);
                  }
                  else
                  {
                    unint64_t v62 = 0;
                  }
                  unsigned int v63 = &v62[12 * v59];
                  uint64_t v64 = &v62[12 * v61];
                  *(void *)unsigned int v63 = 65555;
                  *((_DWORD *)v63 + 2) = 0x20000;
                  unint64_t v52 = v63 + 12;
                  if (v50 != v58)
                  {
                    do
                    {
                      uint64_t v67 = *(void *)(v50 - 12);
                      v50 -= 12;
                      int v68 = *((_DWORD *)v50 + 2);
                      *(void *)(v63 - 12) = v67;
                      v63 -= 12;
                      *((_DWORD *)v63 + 2) = v68;
                    }
                    while (v50 != v58);
                    goto LABEL_119;
                  }
                }
                long long __p = v63;
                uint64_t v100 = v52;
                unint64_t v101 = (unint64_t)v64;
                if (v50) {
                  operator delete(v50);
                }
                goto LABEL_122;
              }
              uint64_t v34 = (char *)__p;
              unint64_t v35 = 0xAAAAAAAAAAAAAAABLL * ((v100 - (unsigned char *)__p) >> 2);
              unint64_t v36 = v35 + 1;
              if (v35 + 1 > 0x1555555555555555) {
                std::vector<std::string>::__throw_length_error[abi:ne180100]();
              }
              if (0x5555555555555556 * ((uint64_t)(v101 - (void)__p) >> 2) > v36) {
                unint64_t v36 = 0x5555555555555556 * ((uint64_t)(v101 - (void)__p) >> 2);
              }
              if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v101 - (void)__p) >> 2) >= 0xAAAAAAAAAAAAAAALL) {
                unint64_t v37 = 0x1555555555555555;
              }
              else {
                unint64_t v37 = v36;
              }
              if (v37)
              {
                if (v37 > 0x1555555555555555) {
                  std::__throw_bad_array_new_length[abi:ne180100]();
                }
                uint64_t v38 = (char *)operator new(12 * v37);
              }
              else
              {
                uint64_t v38 = 0;
              }
              unsigned __int8 v44 = &v38[12 * v35];
              unint64_t v45 = &v38[12 * v37];
              *(void *)unsigned __int8 v44 = 131090;
              *((_DWORD *)v44 + 2) = 0x20000;
              float64x2x2_t v33 = v44 + 12;
              if (v31 != v34)
              {
                do
                {
                  uint64_t v46 = *(void *)(v31 - 12);
                  v31 -= 12;
                  int v47 = *((_DWORD *)v31 + 2);
                  *(void *)(v44 - 12) = v46;
                  v44 -= 12;
                  *((_DWORD *)v44 + 2) = v47;
                }
                while (v31 != v34);
LABEL_83:
                char v31 = (char *)__p;
              }
            }
            else
            {
              if (!ctu::iokit::operator&()) {
                goto LABEL_87;
              }
              char v31 = v100;
              if ((unint64_t)v100 < v101)
              {
                uint64_t v32 = 65554;
                goto LABEL_57;
              }
              uint64_t v39 = (char *)__p;
              unint64_t v40 = 0xAAAAAAAAAAAAAAABLL * ((v100 - (unsigned char *)__p) >> 2);
              unint64_t v41 = v40 + 1;
              if (v40 + 1 > 0x1555555555555555) {
                std::vector<std::string>::__throw_length_error[abi:ne180100]();
              }
              if (0x5555555555555556 * ((uint64_t)(v101 - (void)__p) >> 2) > v41) {
                unint64_t v41 = 0x5555555555555556 * ((uint64_t)(v101 - (void)__p) >> 2);
              }
              if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v101 - (void)__p) >> 2) >= 0xAAAAAAAAAAAAAAALL) {
                unint64_t v42 = 0x1555555555555555;
              }
              else {
                unint64_t v42 = v41;
              }
              if (v42)
              {
                if (v42 > 0x1555555555555555) {
                  std::__throw_bad_array_new_length[abi:ne180100]();
                }
                uint64_t v43 = (char *)operator new(12 * v42);
              }
              else
              {
                uint64_t v43 = 0;
              }
              unsigned __int8 v44 = &v43[12 * v40];
              unint64_t v45 = &v43[12 * v42];
              *(void *)unsigned __int8 v44 = 65554;
              *((_DWORD *)v44 + 2) = 0x20000;
              float64x2x2_t v33 = v44 + 12;
              if (v31 != v39)
              {
                do
                {
                  uint64_t v48 = *(void *)(v31 - 12);
                  v31 -= 12;
                  int v49 = *((_DWORD *)v31 + 2);
                  *(void *)(v44 - 12) = v48;
                  v44 -= 12;
                  *((_DWORD *)v44 + 2) = v49;
                }
                while (v31 != v39);
                goto LABEL_83;
              }
            }
            long long __p = v44;
            uint64_t v100 = v33;
            unint64_t v101 = (unint64_t)v45;
            if (v31) {
              operator delete(v31);
            }
            goto LABEL_86;
          }
          uint64_t v14 = (char *)__p;
          unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((v100 - (unsigned char *)__p) >> 2);
          unint64_t v16 = v15 + 1;
          if (v15 + 1 > 0x1555555555555555) {
            std::vector<std::string>::__throw_length_error[abi:ne180100]();
          }
          if (0x5555555555555556 * ((uint64_t)(v101 - (void)__p) >> 2) > v16) {
            unint64_t v16 = 0x5555555555555556 * ((uint64_t)(v101 - (void)__p) >> 2);
          }
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v101 - (void)__p) >> 2) >= 0xAAAAAAAAAAAAAAALL) {
            unint64_t v17 = 0x1555555555555555;
          }
          else {
            unint64_t v17 = v16;
          }
          if (v17)
          {
            if (v17 > 0x1555555555555555) {
              std::__throw_bad_array_new_length[abi:ne180100]();
            }
            long long v18 = (char *)operator new(12 * v17);
          }
          else
          {
            long long v18 = 0;
          }
          BOOL v25 = &v18[12 * v15];
          int v26 = &v18[12 * v17];
          *(void *)BOOL v25 = 131089;
          *((_DWORD *)v25 + 2) = 0x20000;
          uint64_t v13 = v25 + 12;
          if (v11 != v14)
          {
            do
            {
              uint64_t v27 = *(void *)(v11 - 12);
              v11 -= 12;
              int v28 = *((_DWORD *)v11 + 2);
              *(void *)(v25 - 12) = v27;
              v25 -= 12;
              *((_DWORD *)v25 + 2) = v28;
            }
            while (v11 != v14);
LABEL_47:
            int v11 = (char *)__p;
          }
        }
        else
        {
          if (!ctu::iokit::operator&())
          {
            int v19 = 0;
            goto LABEL_51;
          }
          int v11 = v100;
          if ((unint64_t)v100 < v101)
          {
            uint64_t v12 = 65553;
            goto LABEL_20;
          }
          dispatch_object_t v20 = (char *)__p;
          unint64_t v21 = 0xAAAAAAAAAAAAAAABLL * ((v100 - (unsigned char *)__p) >> 2);
          unint64_t v22 = v21 + 1;
          if (v21 + 1 > 0x1555555555555555) {
            std::vector<std::string>::__throw_length_error[abi:ne180100]();
          }
          if (0x5555555555555556 * ((uint64_t)(v101 - (void)__p) >> 2) > v22) {
            unint64_t v22 = 0x5555555555555556 * ((uint64_t)(v101 - (void)__p) >> 2);
          }
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v101 - (void)__p) >> 2) >= 0xAAAAAAAAAAAAAAALL) {
            unint64_t v23 = 0x1555555555555555;
          }
          else {
            unint64_t v23 = v22;
          }
          if (v23)
          {
            if (v23 > 0x1555555555555555) {
              std::__throw_bad_array_new_length[abi:ne180100]();
            }
            BOOL v24 = (char *)operator new(12 * v23);
          }
          else
          {
            BOOL v24 = 0;
          }
          BOOL v25 = &v24[12 * v21];
          int v26 = &v24[12 * v23];
          *(void *)BOOL v25 = 65553;
          *((_DWORD *)v25 + 2) = 0x20000;
          uint64_t v13 = v25 + 12;
          if (v11 != v20)
          {
            do
            {
              uint64_t v29 = *(void *)(v11 - 12);
              v11 -= 12;
              int v30 = *((_DWORD *)v11 + 2);
              *(void *)(v25 - 12) = v29;
              v25 -= 12;
              *((_DWORD *)v25 + 2) = v30;
            }
            while (v11 != v20);
            goto LABEL_47;
          }
        }
        long long __p = v25;
        uint64_t v100 = v13;
        unint64_t v101 = (unint64_t)v26;
        if (v11) {
          operator delete(v11);
        }
        goto LABEL_50;
      }
    }
  }
}

void sub_1C587E1FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, char a13, void *__p, uint64_t a15)
{
  if (!__p) {
    _Unwind_Resume(exception_object);
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t dispatch::callback<void({block_pointer})(ctu::iokit::USBCAccessory)>::~callback(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 8);
  if (v2) {
    dispatch_release(v2);
  }
  if (*(void *)a1) {
    _Block_release(*(const void **)a1);
  }
  return a1;
}

void IOPortUSBCAccessoriesDelegate::stop(IOPortUSBCAccessoriesDelegate *this)
{
  v1[0] = MEMORY[0x1E4F143A8];
  v1[1] = 0x40000000;
  v1[2] = ___ZN29IOPortUSBCAccessoriesDelegate4stopEv_block_invoke;
  v1[3] = &__block_descriptor_tmp_6_2;
  v1[4] = this;
  ctu::SharedSynchronizable<AccessoriesDelegateBase>::execute_wrapped((uint64_t *)this + 1, (uint64_t)v1);
}

void ___ZN29IOPortUSBCAccessoriesDelegate4stopEv_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  int v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = *(NSObject **)(v1 + 40);
  BOOL v4 = os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);
  if (v2)
  {
    if (v4)
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1C5767000, v3, OS_LOG_TYPE_DEFAULT, "#I Stopping", buf, 2u);
    }
    uint64_t v6 = (void *)(v1 + 88);
    uint64_t v5 = *(void *)(v1 + 88);
    *(unsigned char *)(v1 + 80) = 0;
    if (v5)
    {
      uint64_t v7 = *(std::__shared_weak_count **)(v1 + 96);
      *(void *)(v1 + 88) = 0;
      *(void *)(v1 + 96) = 0;
      if (v7)
      {
        if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
        uint64_t v8 = *(std::__shared_weak_count **)(v1 + 96);
        void *v6 = 0;
        *(void *)(v1 + 96) = 0;
        if (v8)
        {
          if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
            std::__shared_weak_count::__release_weak(v8);
          }
        }
      }
      else
      {
        void *v6 = 0;
        *(void *)(v1 + 96) = 0;
      }
    }
  }
  else if (v4)
  {
    *(_WORD *)queue v9 = 0;
    _os_log_impl(&dword_1C5767000, v3, OS_LOG_TYPE_DEFAULT, "#I Already stopped", v9, 2u);
  }
}

void std::__shared_ptr_pointer<IOPortUSBCAccessoriesDelegate *,std::shared_ptr<IOPortUSBCAccessoriesDelegate> ctu::SharedSynchronizable<AccessoriesDelegateBase>::make_shared_ptr<IOPortUSBCAccessoriesDelegate>(IOPortUSBCAccessoriesDelegate*)::{lambda(IOPortUSBCAccessoriesDelegate *)#1},std::allocator<IOPortUSBCAccessoriesDelegate>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<IOPortUSBCAccessoriesDelegate *,std::shared_ptr<IOPortUSBCAccessoriesDelegate> ctu::SharedSynchronizable<AccessoriesDelegateBase>::make_shared_ptr<IOPortUSBCAccessoriesDelegate>(IOPortUSBCAccessoriesDelegate*)::{lambda(IOPortUSBCAccessoriesDelegate *)#1},std::allocator<IOPortUSBCAccessoriesDelegate>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<IOPortUSBCAccessoriesDelegate *,std::shared_ptr<IOPortUSBCAccessoriesDelegate> ctu::SharedSynchronizable<AccessoriesDelegateBase>::make_shared_ptr<IOPortUSBCAccessoriesDelegate>(IOPortUSBCAccessoriesDelegate*)::{lambda(IOPortUSBCAccessoriesDelegate *)#1},std::allocator<IOPortUSBCAccessoriesDelegate>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableI23AccessoriesDelegateBaseE15make_shared_ptrI29IOPortUSBCAccessoriesDel"
                     "egateEENSt3__110shared_ptrIT_EEPS7_EUlPS4_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableI23AccessoriesDelegateBaseE15make_shared_ptrI29IOPortUSBCAcc"
                                "essoriesDelegateEENSt3__110shared_ptrIT_EEPS7_EUlPS4_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableI23AccessoriesDelegateBaseE15make_shared_ptrI29IOPortUSBCAccessoriesDelegateEENSt3__110shared_ptrIT_EEPS7_EUlPS4_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableI23AccessoriesDelegateBaseE15make_shared_ptrI29IOPortUSBCAccessoriesDelegateEENSt3__110shared_ptrIT_EEPS7_EUlPS4_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24; {
  return 0;
  }
}

uint64_t std::shared_ptr<IOPortUSBCAccessoriesDelegate> ctu::SharedSynchronizable<AccessoriesDelegateBase>::make_shared_ptr<IOPortUSBCAccessoriesDelegate>(IOPortUSBCAccessoriesDelegate*)::{lambda(IOPortUSBCAccessoriesDelegate*)#1}::operator() const(IOPortUSBCAccessoriesDelegate*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void BootStats::BootStats(BootStats *this)
{
  char v3 = 16;
  strcpy(__p, "Stats::BootStats");
  Stats::Stats(this, (uint64_t)__p);
  if (v3 < 0) {
    operator delete(*(void **)__p);
  }
  *(void *)this = &unk_1F20F9110;
}

{
  char __p[17];
  char v3;

  char v3 = 16;
  strcpy(__p, "Stats::BootStats");
  Stats::Stats(this, (uint64_t)__p);
  if (v3 < 0) {
    operator delete(*(void **)__p);
  }
  *(void *)this = &unk_1F20F9110;
}

void sub_1C587E618(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1C587E6B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void BootStats::~BootStats(BootStats *this)
{
  *(void *)this = &unk_1F20F9B30;
  MEMORY[0x1C8790F40]((char *)this + 8);
  int v2 = *((void *)this + 12);
  if (v2) {
    dispatch_release(v2);
  }
  char v3 = *((void *)this + 11);
  if (v3) {
    dispatch_release(v3);
  }
  BOOL v4 = (std::__shared_weak_count *)*((void *)this + 10);
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
}

{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *(void *)this = &unk_1F20F9B30;
  MEMORY[0x1C8790F40]((char *)this + 8);
  int v2 = *((void *)this + 12);
  if (v2) {
    dispatch_release(v2);
  }
  char v3 = *((void *)this + 11);
  if (v3) {
    dispatch_release(v3);
  }
  BOOL v4 = (std::__shared_weak_count *)*((void *)this + 10);
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
}

{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;
  uint64_t vars8;

  *(void *)this = &unk_1F20F9B30;
  MEMORY[0x1C8790F40]((char *)this + 8);
  int v2 = *((void *)this + 12);
  if (v2) {
    dispatch_release(v2);
  }
  char v3 = *((void *)this + 11);
  if (v3) {
    dispatch_release(v3);
  }
  BOOL v4 = (std::__shared_weak_count *)*((void *)this + 10);
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }

  operator delete(this);
}

double BootStats::createInternal@<D0>(void *a1@<X8>)
{
  *a1 = 0xAAAAAAAAAAAAAAAALL;
  a1[1] = 0xAAAAAAAAAAAAAAAALL;
  char v3 = operator new(0x78uLL);
  char v7 = 16;
  strcpy(__p, "Stats::BootStats");
  Stats::Stats(v3, (uint64_t)__p);
  if (v7 < 0) {
    operator delete(*(void **)__p);
  }
  *char v3 = &unk_1F20F9110;
  *(void *)&long long v5 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  std::shared_ptr<BootStats>::shared_ptr[abi:ne180100]<BootStats,std::shared_ptr<BootStats> ctu::SharedSynchronizable<Stats>::make_shared_ptr<BootStats>(BootStats*)::{lambda(BootStats*)#1},void>(&v5, (uint64_t)v3);
  ctu::Loggable<Stats,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(v5);
  double result = *(double *)&v5;
  *(_OWORD *)a1 = v5;
  return result;
}

void sub_1C587E8C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1C587E8D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  operator delete(v16);
  _Unwind_Resume(a1);
}

uint64_t BootStats::init(uint64_t a1, int a2)
{
  *(_DWORD *)(a1 + 104) = a2;
  *(void *)(a1 + 112) = 0;
  return 1;
}

void BootStats::updateData(uint64_t a1@<X0>, CFDictionaryRef *a2@<X1>, xpc_object_t *a3@<X2>, __CFDictionary **a4@<X8>)
{
  int v26 = 0;
  if (*a2) {
    uint64_t v8 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
  }
  else {
    uint64_t v8 = 0;
  }
  CFAllocatorRef v9 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  if (v8)
  {
    MutableCopy = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, *a2);
  }
  else
  {
    MutableCopy = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (!MutableCopy) {
      goto LABEL_8;
    }
  }
  int v26 = MutableCopy;
LABEL_8:
  int v11 = (char *)*MEMORY[0x1E4F4CF20];
  if (xpc_dictionary_get_value(*a3, (const char *)*MEMORY[0x1E4F4CF20]))
  {
    xpc_object_t value = xpc_dictionary_get_value(*a3, v11);
    object[0] = value;
    if (value) {
      xpc_retain(value);
    }
    else {
      object[0] = xpc_null_create();
    }
    time_t v13 = xpc::dyn_cast_or_default((xpc *)object, 0);
    xpc_release(object[0]);
  }
  else
  {
    ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)object, *a2);
    ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v27, v11);
    LODWORD(v13) = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)object, v27);
    MEMORY[0x1C8791110](&v27);
    time_t v13 = (int)v13;
    MEMORY[0x1C8791160](object);
  }
  uint64_t v14 = (char *)*MEMORY[0x1E4F4CF78];
  if (xpc_dictionary_get_value(*a3, (const char *)*MEMORY[0x1E4F4CF78]))
  {
    xpc_object_t v15 = xpc_dictionary_get_value(*a3, v14);
    object[0] = v15;
    if (v15) {
      xpc_retain(v15);
    }
    else {
      object[0] = xpc_null_create();
    }
    time_t v16 = xpc::dyn_cast_or_default((xpc *)object, 0);
    xpc_release(object[0]);
  }
  else
  {
    ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)object, *a2);
    ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v27, v14);
    LODWORD(v16) = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)object, v27);
    MEMORY[0x1C8791110](&v27);
    time_t v16 = (int)v16;
    MEMORY[0x1C8791160](object);
  }
  unint64_t v17 = (const char **)MEMORY[0x1E4F4C4B8];
  if (v13 && v16 && v16 >= v13)
  {
    uint64_t v19 = (uint64_t)difftime(v16, v13);
    dispatch_object_t v20 = *(const void **)(a1 + 112);
    if (v20) {
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)object, *a2);
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v27, *v17);
  LODWORD(v19) = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)object, v27);
  MEMORY[0x1C8791110](&v27);
  uint64_t v19 = (int)v19;
  MEMORY[0x1C8791160](object);
  dispatch_object_t v20 = *(const void **)(a1 + 112);
  if (!v20)
  {
LABEL_24:
    uint64_t v19 = 0;
    time_t v16 = 0;
    *(void *)(a1 + 112) = v13;
    dispatch_object_t v20 = (const void *)v13;
  }
LABEL_25:
  ctu::cf::update<char const*,long>(MutableCopy, (const __CFString **)*MEMORY[0x1E4F4CE98], v20, v9, v18);
  ctu::cf::update<char const*,long>(MutableCopy, (const __CFString **)v11, (const void *)v13, v9, v21);
  ctu::cf::update<char const*,long>(MutableCopy, (const __CFString **)v14, (const void *)v16, v9, v22);
  ctu::cf::update<char const*,long>(MutableCopy, (const __CFString **)*v17, (const void *)v19, v9, v23);
  if (MutableCopy)
  {
    CFTypeID v24 = CFGetTypeID(MutableCopy);
    if (v24 == CFDictionaryGetTypeID())
    {
      *a4 = MutableCopy;
      CFRetain(MutableCopy);
    }
    else
    {
      *a4 = 0;
    }
    CFRelease(MutableCopy);
  }
  else
  {
    *a4 = 0;
  }
}

void sub_1C587EC34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, const void *a11, char a12)
{
}

void sub_1C587EC88(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object)
{
}

void sub_1C587ECA8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object)
{
}

void sub_1C587ECD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t ctu::Loggable<Stats,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig(uint64_t a1)
{
  return MEMORY[0x1F417DA50](a1 + 8);
}

uint64_t ctu::Loggable<Stats,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName@<X0>(uint64_t result@<X0>, char *a2@<X8>)
{
  if (*(_DWORD *)(result + 104))
  {
    strcpy(a2, "UNKNOWN");
    a2[23] = 7;
  }
  else
  {
    strcpy(a2, "Boot Statistics");
    a2[23] = 15;
  }
  return result;
}

uint64_t ctu::Loggable<Stats,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return MEMORY[0x1F417DD10](a1 + 8);
}

void ctu::Loggable<Stats,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(uint64_t a1)
{
  uint64_t v1 = a1 + 56;
  if (*(void *)(a1 + 56))
  {
    if (!*(void *)(a1 + 80) || (int v2 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(a1 + 80))) == 0) {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    char v3 = v2;
    ctu::LoggerCommonBase::getLogDomain((ctu::LoggerCommonBase *)(v1 - 48));
    ctu::TrackedLogger::registerLoggerToServer();
    if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_1C587EE78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

void sub_1C587EE94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void *std::shared_ptr<BootStats>::shared_ptr[abi:ne180100]<BootStats,std::shared_ptr<BootStats> ctu::SharedSynchronizable<Stats>::make_shared_ptr<BootStats>(BootStats*)::{lambda(BootStats*)#1},void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  BOOL v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = &v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20F9178;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)a2;
  a1[1] = v4;
  if (!a2) {
    return a1;
  }
  uint64_t v6 = *(std::__shared_weak_count **)(a2 + 80);
  if (v6)
  {
    if (v6->__shared_owners_ == -1)
    {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      *(void *)(a2 + 72) = a2;
      *(void *)(a2 + 80) = v4;
      std::__shared_weak_count::__release_weak(v6);
      if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
        goto LABEL_8;
      }
    }
    return a1;
  }
  atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  *(void *)(a2 + 72) = a2;
  *(void *)(a2 + 80) = v4;
  if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
LABEL_8:
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void sub_1C587EFC0(void *a1)
{
  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[11], v1, (dispatch_function_t)std::shared_ptr<BootStats> ctu::SharedSynchronizable<Stats>::make_shared_ptr<BootStats>(BootStats*)::{lambda(BootStats*)#1}::operator() const(BootStats*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_1C587EFE8(_Unwind_Exception *a1)
{
}

void std::__shared_ptr_pointer<BootStats *,std::shared_ptr<BootStats> ctu::SharedSynchronizable<Stats>::make_shared_ptr<BootStats>(BootStats*)::{lambda(BootStats *)#1},std::allocator<BootStats>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<BootStats *,std::shared_ptr<BootStats> ctu::SharedSynchronizable<Stats>::make_shared_ptr<BootStats>(BootStats*)::{lambda(BootStats *)#1},std::allocator<BootStats>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<BootStats *,std::shared_ptr<BootStats> ctu::SharedSynchronizable<Stats>::make_shared_ptr<BootStats>(BootStats*)::{lambda(BootStats *)#1},std::allocator<BootStats>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableI5StatsE15make_shared_ptrI9BootStatsEENSt3__110shared_ptrIT_EEPS7_EUlPS4_E_") {
    return a1 + 24;
  }
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableI5StatsE15make_shared_ptrI9BootStatsEENSt3__110shared_ptrIT_EEPS7_EUlPS4_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableI5StatsE15make_shared_ptrI9BootStatsEENSt3__110shared_ptrIT_EEPS7_EUlPS4_E_"))return 0; {
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableI5StatsE15make_shared_ptrI9BootStatsEENSt3__110shared_ptrIT_EEPS7_EUlPS4_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  }
  return 0;
}

uint64_t std::shared_ptr<BootStats> ctu::SharedSynchronizable<Stats>::make_shared_ptr<BootStats>(BootStats*)::{lambda(BootStats*)#1}::operator() const(BootStats*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

BOOL prop::get(char *a1, char *a2, uint64_t a3)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if (a1[23] < 0)
  {
    uint64_t v6 = *(const char **)a1;
    if (strcasecmp(*(const char **)a1, (const char *)*MEMORY[0x1E4F4C1F8])
      && strcasecmp(v6, (const char *)*MEMORY[0x1E4F4D2F0])
      && strcasecmp(v6, (const char *)*MEMORY[0x1E4F4F980])
      && strcasecmp(v6, (const char *)*MEMORY[0x1E4F4F978]))
    {
      if (strcasecmp(v6, (const char *)*MEMORY[0x1E4F4C200]))
      {
        if (strcasecmp(v6, (const char *)*MEMORY[0x1E4F4D338]) && strcasecmp(v6, (const char *)*MEMORY[0x1E4F4C288]))
        {
          if (strcasecmp(v6, (const char *)*MEMORY[0x1E4F4C390]))
          {
            if (strcasecmp(v6, (const char *)*MEMORY[0x1E4F4C398]))
            {
              if (strcasecmp(v6, (const char *)*MEMORY[0x1E4F4C300]))
              {
                if (strcasecmp(v6, (const char *)*MEMORY[0x1E4F4C138]))
                {
                  if (strcasecmp(v6, (const char *)*MEMORY[0x1E4F4C2F8]))
                  {
                    if (strcasecmp(v6, (const char *)*MEMORY[0x1E4F4C1B8]))
                    {
                      if (strcasecmp(v6, (const char *)*MEMORY[0x1E4F4C210]))
                      {
LABEL_16:
                        if (!strcasecmp(v6, (const char *)*MEMORY[0x1E4F4C208]))
                        {
                          return prop::tracesettings::get(a2, a3);
                        }
                        else
                        {
                          char v7 = GetOsLogContext()[1];
                          if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
                          {
                            if (a1[23] >= 0) {
                              CFAllocatorRef v9 = a1;
                            }
                            else {
                              CFAllocatorRef v9 = *(char **)a1;
                            }
                            if (a2[23] >= 0) {
                              long long v10 = a2;
                            }
                            else {
                              long long v10 = *(char **)a2;
                            }
                            int v11 = 136315650;
                            uint64_t v12 = "prop";
                            __int16 v13 = 2080;
                            uint64_t v14 = v9;
                            __int16 v15 = 2080;
                            time_t v16 = v10;
                            _os_log_error_impl(&dword_1C5767000, v7, OS_LOG_TYPE_ERROR, "%s: get: Invalid domain; domain='%s' key='%s'",
                              (uint8_t *)&v11,
                              0x20u);
                          }
                          return 0;
                        }
                      }
                      goto LABEL_33;
                    }
                    goto LABEL_60;
                  }
                  goto LABEL_57;
                }
                goto LABEL_54;
              }
              goto LABEL_51;
            }
            goto LABEL_48;
          }
          goto LABEL_45;
        }
        goto LABEL_39;
      }
      goto LABEL_42;
    }
  }
  else if (strcasecmp(a1, (const char *)*MEMORY[0x1E4F4C1F8]) {
         && strcasecmp(a1, (const char *)*MEMORY[0x1E4F4D2F0])
  }
         && strcasecmp(a1, (const char *)*MEMORY[0x1E4F4F980])
         && strcasecmp(a1, (const char *)*MEMORY[0x1E4F4F978]))
  {
    if (strcasecmp(a1, (const char *)*MEMORY[0x1E4F4C200]))
    {
      if (strcasecmp(a1, (const char *)*MEMORY[0x1E4F4D338]) && strcasecmp(a1, (const char *)*MEMORY[0x1E4F4C288]))
      {
        if (strcasecmp(a1, (const char *)*MEMORY[0x1E4F4C390]))
        {
          if (strcasecmp(a1, (const char *)*MEMORY[0x1E4F4C398]))
          {
            if (strcasecmp(a1, (const char *)*MEMORY[0x1E4F4C300]))
            {
              if (strcasecmp(a1, (const char *)*MEMORY[0x1E4F4C138]))
              {
                if (strcasecmp(a1, (const char *)*MEMORY[0x1E4F4C2F8]))
                {
                  if (strcasecmp(a1, (const char *)*MEMORY[0x1E4F4C1B8]))
                  {
                    uint64_t v6 = a1;
                    if (strcasecmp(a1, (const char *)*MEMORY[0x1E4F4C210])) {
                      goto LABEL_16;
                    }
LABEL_33:
                    return prop::tailspin::get(a2, a3);
                  }
LABEL_60:
                  return prop::profile::get(a2, a3);
                }
LABEL_57:
                return prop::systemlogs::get(a2, a3);
              }
LABEL_54:
              return prop::logfilter::get(a2, a3);
            }
LABEL_51:
            return prop::ttr::get(a2, a3);
          }
LABEL_48:
          return prop::compression::get(a2, a3);
        }
LABEL_45:
        return prop::bbipc::get(a2, a3);
      }
LABEL_39:
      return prop::ipc::get(a2, a3);
    }
LABEL_42:
    return prop::coredump::get(a2, a3);
  }

  return prop::bbtrace::get(a2, a3);
}

BOOL prop::bbtrace::get(char *a1, uint64_t a2)
{
  BOOL v4 = (const void *)*MEMORY[0x1E4F4D2F0];
  size_t v5 = strlen((const char *)*MEMORY[0x1E4F4D2F0]);
  if (v5 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v6 = (void *)v5;
  if (v5 >= 0x17)
  {
    uint64_t v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17) {
      uint64_t v8 = v5 | 7;
    }
    uint64_t v9 = v8 + 1;
    char v7 = (void **)operator new(v8 + 1);
    __dst[1] = v6;
    unint64_t v13 = v9 | 0x8000000000000000;
    __dst[0] = v7;
    goto LABEL_8;
  }
  HIBYTE(v13) = v5;
  char v7 = __dst;
  if (v5) {
LABEL_8:
  }
    memmove(v7, v4, (size_t)v6);
  *((unsigned char *)v6 + (void)v7) = 0;
  BOOL v10 = prop::get_from_file((char *)__dst, a1, a2);
  if (SHIBYTE(v13) < 0) {
    operator delete(__dst[0]);
  }
  return v10;
}

void sub_1C587F88C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL prop::coredump::get(char *a1, uint64_t a2)
{
  BOOL v4 = (const void *)*MEMORY[0x1E4F4C200];
  size_t v5 = strlen((const char *)*MEMORY[0x1E4F4C200]);
  if (v5 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v6 = (void *)v5;
  if (v5 >= 0x17)
  {
    uint64_t v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17) {
      uint64_t v8 = v5 | 7;
    }
    uint64_t v9 = v8 + 1;
    char v7 = (void **)operator new(v8 + 1);
    __dst[1] = v6;
    unint64_t v13 = v9 | 0x8000000000000000;
    __dst[0] = v7;
    goto LABEL_8;
  }
  HIBYTE(v13) = v5;
  char v7 = __dst;
  if (v5) {
LABEL_8:
  }
    memmove(v7, v4, (size_t)v6);
  *((unsigned char *)v6 + (void)v7) = 0;
  BOOL v10 = prop::get_from_file((char *)__dst, a1, a2);
  if (SHIBYTE(v13) < 0) {
    operator delete(__dst[0]);
  }
  return v10;
}

void sub_1C587F994(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL prop::ipc::get(char *a1, uint64_t a2)
{
  BOOL v4 = (const void *)*MEMORY[0x1E4F4D338];
  size_t v5 = strlen((const char *)*MEMORY[0x1E4F4D338]);
  if (v5 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v6 = (void *)v5;
  if (v5 >= 0x17)
  {
    uint64_t v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17) {
      uint64_t v8 = v5 | 7;
    }
    uint64_t v9 = v8 + 1;
    char v7 = (void **)operator new(v8 + 1);
    __dst[1] = v6;
    unint64_t v13 = v9 | 0x8000000000000000;
    __dst[0] = v7;
    goto LABEL_8;
  }
  HIBYTE(v13) = v5;
  char v7 = __dst;
  if (v5) {
LABEL_8:
  }
    memmove(v7, v4, (size_t)v6);
  *((unsigned char *)v6 + (void)v7) = 0;
  BOOL v10 = prop::get_from_file((char *)__dst, a1, a2);
  if (SHIBYTE(v13) < 0) {
    operator delete(__dst[0]);
  }
  return v10;
}

void sub_1C587FA9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL prop::bbipc::get(char *a1, uint64_t a2)
{
  BOOL v4 = (const void *)*MEMORY[0x1E4F4C390];
  size_t v5 = strlen((const char *)*MEMORY[0x1E4F4C390]);
  if (v5 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v6 = (void *)v5;
  if (v5 >= 0x17)
  {
    uint64_t v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17) {
      uint64_t v8 = v5 | 7;
    }
    uint64_t v9 = v8 + 1;
    char v7 = (void **)operator new(v8 + 1);
    __dst[1] = v6;
    unint64_t v13 = v9 | 0x8000000000000000;
    __dst[0] = v7;
    goto LABEL_8;
  }
  HIBYTE(v13) = v5;
  char v7 = __dst;
  if (v5) {
LABEL_8:
  }
    memmove(v7, v4, (size_t)v6);
  *((unsigned char *)v6 + (void)v7) = 0;
  BOOL v10 = prop::get_from_file((char *)__dst, a1, a2);
  if (SHIBYTE(v13) < 0) {
    operator delete(__dst[0]);
  }
  return v10;
}

void sub_1C587FBA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL prop::compression::get(char *a1, uint64_t a2)
{
  BOOL v4 = (const void *)*MEMORY[0x1E4F4C398];
  size_t v5 = strlen((const char *)*MEMORY[0x1E4F4C398]);
  if (v5 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v6 = (void *)v5;
  if (v5 >= 0x17)
  {
    uint64_t v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17) {
      uint64_t v8 = v5 | 7;
    }
    uint64_t v9 = v8 + 1;
    char v7 = (void **)operator new(v8 + 1);
    __dst[1] = v6;
    unint64_t v13 = v9 | 0x8000000000000000;
    __dst[0] = v7;
    goto LABEL_8;
  }
  HIBYTE(v13) = v5;
  char v7 = __dst;
  if (v5) {
LABEL_8:
  }
    memmove(v7, v4, (size_t)v6);
  *((unsigned char *)v6 + (void)v7) = 0;
  BOOL v10 = prop::get_from_file((char *)__dst, a1, a2);
  if (SHIBYTE(v13) < 0) {
    operator delete(__dst[0]);
  }
  return v10;
}

void sub_1C587FCAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL prop::ttr::get(char *a1, uint64_t a2)
{
  BOOL v4 = (const void *)*MEMORY[0x1E4F4C300];
  size_t v5 = strlen((const char *)*MEMORY[0x1E4F4C300]);
  if (v5 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v6 = (void *)v5;
  if (v5 >= 0x17)
  {
    uint64_t v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17) {
      uint64_t v8 = v5 | 7;
    }
    uint64_t v9 = v8 + 1;
    char v7 = (void **)operator new(v8 + 1);
    __dst[1] = v6;
    unint64_t v13 = v9 | 0x8000000000000000;
    __dst[0] = v7;
    goto LABEL_8;
  }
  HIBYTE(v13) = v5;
  char v7 = __dst;
  if (v5) {
LABEL_8:
  }
    memmove(v7, v4, (size_t)v6);
  *((unsigned char *)v6 + (void)v7) = 0;
  BOOL v10 = prop::get_from_file((char *)__dst, a1, a2);
  if (SHIBYTE(v13) < 0) {
    operator delete(__dst[0]);
  }
  return v10;
}

void sub_1C587FDB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL prop::logfilter::get(char *a1, uint64_t a2)
{
  BOOL v4 = (const void *)*MEMORY[0x1E4F4C138];
  size_t v5 = strlen((const char *)*MEMORY[0x1E4F4C138]);
  if (v5 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v6 = (void *)v5;
  if (v5 >= 0x17)
  {
    uint64_t v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17) {
      uint64_t v8 = v5 | 7;
    }
    uint64_t v9 = v8 + 1;
    char v7 = (void **)operator new(v8 + 1);
    __dst[1] = v6;
    unint64_t v13 = v9 | 0x8000000000000000;
    __dst[0] = v7;
    goto LABEL_8;
  }
  HIBYTE(v13) = v5;
  char v7 = __dst;
  if (v5) {
LABEL_8:
  }
    memmove(v7, v4, (size_t)v6);
  *((unsigned char *)v6 + (void)v7) = 0;
  BOOL v10 = prop::get_from_file((char *)__dst, a1, a2);
  if (SHIBYTE(v13) < 0) {
    operator delete(__dst[0]);
  }
  return v10;
}

void sub_1C587FEBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL prop::systemlogs::get(char *a1, uint64_t a2)
{
  BOOL v4 = (const void *)*MEMORY[0x1E4F4C2F8];
  size_t v5 = strlen((const char *)*MEMORY[0x1E4F4C2F8]);
  if (v5 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v6 = (void *)v5;
  if (v5 >= 0x17)
  {
    uint64_t v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17) {
      uint64_t v8 = v5 | 7;
    }
    uint64_t v9 = v8 + 1;
    char v7 = (void **)operator new(v8 + 1);
    __dst[1] = v6;
    unint64_t v13 = v9 | 0x8000000000000000;
    __dst[0] = v7;
    goto LABEL_8;
  }
  HIBYTE(v13) = v5;
  char v7 = __dst;
  if (v5) {
LABEL_8:
  }
    memmove(v7, v4, (size_t)v6);
  *((unsigned char *)v6 + (void)v7) = 0;
  BOOL v10 = prop::get_from_file((char *)__dst, a1, a2);
  if (SHIBYTE(v13) < 0) {
    operator delete(__dst[0]);
  }
  return v10;
}

void sub_1C587FFC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL prop::profile::get(char *a1, uint64_t a2)
{
  BOOL v4 = (const void *)*MEMORY[0x1E4F4C1B8];
  size_t v5 = strlen((const char *)*MEMORY[0x1E4F4C1B8]);
  if (v5 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v6 = (void *)v5;
  if (v5 >= 0x17)
  {
    uint64_t v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17) {
      uint64_t v8 = v5 | 7;
    }
    uint64_t v9 = v8 + 1;
    char v7 = (void **)operator new(v8 + 1);
    __dst[1] = v6;
    unint64_t v13 = v9 | 0x8000000000000000;
    __dst[0] = v7;
    goto LABEL_8;
  }
  HIBYTE(v13) = v5;
  char v7 = __dst;
  if (v5) {
LABEL_8:
  }
    memmove(v7, v4, (size_t)v6);
  *((unsigned char *)v6 + (void)v7) = 0;
  BOOL v10 = prop::get_from_file((char *)__dst, a1, a2);
  if (SHIBYTE(v13) < 0) {
    operator delete(__dst[0]);
  }
  return v10;
}

void sub_1C58800CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL prop::tailspin::get(char *a1, uint64_t a2)
{
  BOOL v4 = (const void *)*MEMORY[0x1E4F4C210];
  size_t v5 = strlen((const char *)*MEMORY[0x1E4F4C210]);
  if (v5 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v6 = (void *)v5;
  if (v5 >= 0x17)
  {
    uint64_t v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17) {
      uint64_t v8 = v5 | 7;
    }
    uint64_t v9 = v8 + 1;
    char v7 = (void **)operator new(v8 + 1);
    __dst[1] = v6;
    unint64_t v13 = v9 | 0x8000000000000000;
    __dst[0] = v7;
    goto LABEL_8;
  }
  HIBYTE(v13) = v5;
  char v7 = __dst;
  if (v5) {
LABEL_8:
  }
    memmove(v7, v4, (size_t)v6);
  *((unsigned char *)v6 + (void)v7) = 0;
  BOOL v10 = prop::get_from_file((char *)__dst, a1, a2);
  if (SHIBYTE(v13) < 0) {
    operator delete(__dst[0]);
  }
  return v10;
}

void sub_1C58801D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL prop::tracesettings::get(char *a1, uint64_t a2)
{
  BOOL v4 = (const void *)*MEMORY[0x1E4F4C208];
  size_t v5 = strlen((const char *)*MEMORY[0x1E4F4C208]);
  if (v5 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v6 = (void *)v5;
  if (v5 >= 0x17)
  {
    uint64_t v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17) {
      uint64_t v8 = v5 | 7;
    }
    uint64_t v9 = v8 + 1;
    char v7 = (void **)operator new(v8 + 1);
    __dst[1] = v6;
    unint64_t v13 = v9 | 0x8000000000000000;
    __dst[0] = v7;
    goto LABEL_8;
  }
  HIBYTE(v13) = v5;
  char v7 = __dst;
  if (v5) {
LABEL_8:
  }
    memmove(v7, v4, (size_t)v6);
  *((unsigned char *)v6 + (void)v7) = 0;
  BOOL v10 = prop::get_from_file((char *)__dst, a1, a2);
  if (SHIBYTE(v13) < 0) {
    operator delete(__dst[0]);
  }
  return v10;
}

void sub_1C58802DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t prop::set(char *a1, char *a2, char *a3)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if (a1[23] < 0)
  {
    uint64_t v6 = *(const char **)a1;
    if (strcasecmp(*(const char **)a1, (const char *)*MEMORY[0x1E4F4C1F8])
      && strcasecmp(v6, (const char *)*MEMORY[0x1E4F4D2F0])
      && strcasecmp(v6, (const char *)*MEMORY[0x1E4F4F980])
      && strcasecmp(v6, (const char *)*MEMORY[0x1E4F4F978]))
    {
      if (strcasecmp(v6, (const char *)*MEMORY[0x1E4F4C200]))
      {
        if (strcasecmp(v6, (const char *)*MEMORY[0x1E4F4D338]) && strcasecmp(v6, (const char *)*MEMORY[0x1E4F4C288]))
        {
          if (strcasecmp(v6, (const char *)*MEMORY[0x1E4F4C390]))
          {
            if (strcasecmp(v6, (const char *)*MEMORY[0x1E4F4C398]))
            {
              if (strcasecmp(v6, (const char *)*MEMORY[0x1E4F4C300]))
              {
                if (strcasecmp(v6, (const char *)*MEMORY[0x1E4F4C138]))
                {
                  if (strcasecmp(v6, (const char *)*MEMORY[0x1E4F4C2F8]))
                  {
                    if (strcasecmp(v6, (const char *)*MEMORY[0x1E4F4C1B8]))
                    {
                      if (strcasecmp(v6, (const char *)*MEMORY[0x1E4F4C210]))
                      {
LABEL_16:
                        if (!strcasecmp(v6, (const char *)*MEMORY[0x1E4F4C208]))
                        {
                          return prop::tracesettings::set(a2, (uint64_t)a3);
                        }
                        else
                        {
                          char v7 = GetOsLogContext()[1];
                          if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
                          {
                            if (a1[23] >= 0) {
                              uint64_t v9 = a1;
                            }
                            else {
                              uint64_t v9 = *(char **)a1;
                            }
                            if (a2[23] >= 0) {
                              BOOL v10 = a2;
                            }
                            else {
                              BOOL v10 = *(char **)a2;
                            }
                            if (a3[23] >= 0) {
                              int v11 = a3;
                            }
                            else {
                              int v11 = *(char **)a3;
                            }
                            int v12 = 136315906;
                            unint64_t v13 = "prop";
                            __int16 v14 = 2080;
                            __int16 v15 = v9;
                            __int16 v16 = 2080;
                            uint64_t v17 = v10;
                            __int16 v18 = 2080;
                            uint64_t v19 = v11;
                            _os_log_error_impl(&dword_1C5767000, v7, OS_LOG_TYPE_ERROR, "%s: set: Invalid domain; domain='%s' key='%s' value='%s'",
                              (uint8_t *)&v12,
                              0x2Au);
                          }
                          return 0;
                        }
                      }
                      goto LABEL_33;
                    }
                    goto LABEL_60;
                  }
                  goto LABEL_57;
                }
                goto LABEL_54;
              }
              goto LABEL_51;
            }
            goto LABEL_48;
          }
          goto LABEL_45;
        }
        goto LABEL_39;
      }
      goto LABEL_42;
    }
  }
  else if (strcasecmp(a1, (const char *)*MEMORY[0x1E4F4C1F8]) {
         && strcasecmp(a1, (const char *)*MEMORY[0x1E4F4D2F0])
  }
         && strcasecmp(a1, (const char *)*MEMORY[0x1E4F4F980])
         && strcasecmp(a1, (const char *)*MEMORY[0x1E4F4F978]))
  {
    if (strcasecmp(a1, (const char *)*MEMORY[0x1E4F4C200]))
    {
      if (strcasecmp(a1, (const char *)*MEMORY[0x1E4F4D338]) && strcasecmp(a1, (const char *)*MEMORY[0x1E4F4C288]))
      {
        if (strcasecmp(a1, (const char *)*MEMORY[0x1E4F4C390]))
        {
          if (strcasecmp(a1, (const char *)*MEMORY[0x1E4F4C398]))
          {
            if (strcasecmp(a1, (const char *)*MEMORY[0x1E4F4C300]))
            {
              if (strcasecmp(a1, (const char *)*MEMORY[0x1E4F4C138]))
              {
                if (strcasecmp(a1, (const char *)*MEMORY[0x1E4F4C2F8]))
                {
                  if (strcasecmp(a1, (const char *)*MEMORY[0x1E4F4C1B8]))
                  {
                    uint64_t v6 = a1;
                    if (strcasecmp(a1, (const char *)*MEMORY[0x1E4F4C210])) {
                      goto LABEL_16;
                    }
LABEL_33:
                    return prop::tailspin::set((uint64_t)a2, a3);
                  }
LABEL_60:
                  return prop::profile::set(a2, a3);
                }
LABEL_57:
                return prop::systemlogs::set(a2, a3);
              }
LABEL_54:
              return prop::logfilter::set(a2, a3);
            }
LABEL_51:
            return prop::ttr::set(a2, a3);
          }
LABEL_48:
          return prop::compression::set(a2, a3);
        }
LABEL_45:
        return prop::bbipc::set(a2, a3);
      }
LABEL_39:
      return prop::ipc::set(a2, a3);
    }
LABEL_42:
    return prop::coredump::set((uint64_t)a2, a3);
  }

  return prop::bbtrace::set(a2, a3);
}

uint64_t prop::bbtrace::set(char *a1, const char *a2)
{
  int v2 = a2;
  uint64_t v91 = *MEMORY[0x1E4F143B8];
  memset(&v86, 170, sizeof(v86));
  if (a2[23] < 0)
  {
    std::string::__init_copy_ctor_external(&v86, *(const std::string::value_type **)a2, *((void *)a2 + 1));
    if (v2[23] < 0) {
      int v2 = *(const char **)v2;
    }
    if (strcmp(v2, "default")) {
      goto LABEL_8;
    }
  }
  else
  {
    std::string v86 = *(std::string *)a2;
    if (strcmp(a2, "default")) {
      goto LABEL_8;
    }
  }
  if (!defaults::bbtrace::get(a1, (std::string::size_type *)&v86)) {
    goto LABEL_217;
  }
LABEL_8:
  int v4 = a1[23];
  if ((v4 & 0x80000000) == 0)
  {
    if (strcasecmp(a1, (const char *)*MEMORY[0x1E4F4C2D8]))
    {
      if (strcasecmp(a1, (const char *)*MEMORY[0x1E4F4C380]))
      {
        if (strcasecmp(a1, (const char *)*MEMORY[0x1E4F4C5B8]))
        {
          if (strcasecmp(a1, (const char *)*MEMORY[0x1E4F4C198]))
          {
            if (strcasecmp(a1, (const char *)*MEMORY[0x1E4F4CCD0]))
            {
              if (strcasecmp(a1, (const char *)*MEMORY[0x1E4F4C490]))
              {
                if (strcasecmp(a1, (const char *)*MEMORY[0x1E4F4C428]))
                {
                  size_t v5 = (char *)*MEMORY[0x1E4F4C2E0];
                  uint64_t v6 = a1;
                  if (strcasecmp(a1, (const char *)*MEMORY[0x1E4F4C2E0])) {
                    goto LABEL_17;
                  }
                  goto LABEL_33;
                }
LABEL_97:
                *(_DWORD *)std::string __dst = -1431655766;
                if (!util::convert<int>(&v86, __dst, 0)) {
                  goto LABEL_217;
                }
                int v47 = *(_DWORD *)__dst;
                std::string::basic_string[abi:ne180100]<0>(__dst, (char *)*MEMORY[0x1E4F4D2F0]);
                LODWORD(__p.__r_.__value_.__l.__data_) = v47;
                uint64_t v14 = prop::file::set<unsigned int>((const void **)__dst, (uint64_t)a1, (unsigned int *)&__p);
LABEL_109:
                uint64_t v12 = v14;
LABEL_110:
                if ((__dst[23] & 0x80000000) != 0) {
                  operator delete(*(void **)__dst);
                }
                goto LABEL_218;
              }
LABEL_83:
              unint64_t v37 = (const void *)*MEMORY[0x1E4F4D2F0];
              size_t v38 = strlen((const char *)*MEMORY[0x1E4F4D2F0]);
              if (v38 > 0x7FFFFFFFFFFFFFF7) {
                std::string::__throw_length_error[abi:ne180100]();
              }
              size_t v39 = v38;
              if (v38 >= 0x17)
              {
                uint64_t v48 = (v38 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v38 | 7) != 0x17) {
                  uint64_t v48 = v38 | 7;
                }
                uint64_t v49 = v48 + 1;
                unint64_t v40 = operator new(v48 + 1);
                *(void *)&__dst[8] = v39;
                *(void *)&__dst[16] = v49 | 0x8000000000000000;
                *(void *)std::string __dst = v40;
              }
              else
              {
                __dst[23] = v38;
                unint64_t v40 = __dst;
                if (!v38) {
                  goto LABEL_103;
                }
              }
              memmove(v40, v37, v39);
LABEL_103:
              v40[v39] = 0;
              uint64_t v14 = prop::file::set<std::string>((const void **)__dst, (uint64_t)a1, (uint64_t)&v86);
              goto LABEL_109;
            }
LABEL_69:
            *(_DWORD *)std::string __dst = -1431655766;
            if (!util::convert<int>(&v86, __dst, 0)) {
              goto LABEL_217;
            }
            int v29 = *(_DWORD *)__dst;
            int v30 = (const void *)*MEMORY[0x1E4F4D2F0];
            size_t v31 = strlen((const char *)*MEMORY[0x1E4F4D2F0]);
            if (v31 > 0x7FFFFFFFFFFFFFF7) {
              std::string::__throw_length_error[abi:ne180100]();
            }
            size_t v32 = v31;
            if (v31 >= 0x17)
            {
              uint64_t v50 = (v31 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v31 | 7) != 0x17) {
                uint64_t v50 = v31 | 7;
              }
              uint64_t v51 = v50 + 1;
              float64x2x2_t v33 = operator new(v50 + 1);
              *(void *)&__dst[8] = v32;
              *(void *)&__dst[16] = v51 | 0x8000000000000000;
              *(void *)std::string __dst = v33;
            }
            else
            {
              __dst[23] = v31;
              float64x2x2_t v33 = __dst;
              if (!v31) {
                goto LABEL_108;
              }
            }
            memmove(v33, v30, v32);
LABEL_108:
            v33[v32] = 0;
            LODWORD(__p.__r_.__value_.__l.__data_) = v29;
            uint64_t v14 = prop::file::set<unsigned int>((const void **)__dst, (uint64_t)a1, (unsigned int *)&__p);
            goto LABEL_109;
          }
LABEL_59:
          LODWORD(__p.__r_.__value_.__l.__data_) = -1431655766;
          CFAllocatorRef v23 = (capabilities::radio *)util::convert<int>(&v86, &__p, 0);
          int v24 = (int)v23;
          BOOL v25 = (capabilities::radio *)capabilities::radio::maverick(v23);
          if (v25)
          {
            if (LODWORD(__p.__r_.__value_.__l.__data_) < 5) {
              char v26 = v24;
            }
            else {
              char v26 = 0;
            }
            if ((v26 & 1) == 0) {
              goto LABEL_217;
            }
          }
          else
          {
            int v34 = capabilities::radio::ice(v25);
            if ((v34 & v24) == 1)
            {
              uint64_t v12 = 0;
              if (LODWORD(__p.__r_.__value_.__l.__data_) > 6 || ((1 << __p.__r_.__value_.__s.__data_[0]) & 0x45) == 0) {
                goto LABEL_218;
              }
            }
            else if ((v24 & ~v34) != 1)
            {
              goto LABEL_217;
            }
          }
          unint64_t v41 = (const void *)*MEMORY[0x1E4F4D2F0];
          size_t v42 = strlen((const char *)*MEMORY[0x1E4F4D2F0]);
          if (v42 > 0x7FFFFFFFFFFFFFF7) {
            std::string::__throw_length_error[abi:ne180100]();
          }
          size_t v43 = v42;
          if (v42 >= 0x17)
          {
            uint64_t v45 = (v42 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v42 | 7) != 0x17) {
              uint64_t v45 = v42 | 7;
            }
            uint64_t v46 = v45 + 1;
            unsigned __int8 v44 = operator new(v45 + 1);
            *(void *)&__dst[8] = v43;
            *(void *)&__dst[16] = v46 | 0x8000000000000000;
            *(void *)std::string __dst = v44;
          }
          else
          {
            __dst[23] = v42;
            unsigned __int8 v44 = __dst;
            if (!v42) {
              goto LABEL_96;
            }
          }
          memmove(v44, v41, v43);
LABEL_96:
          v44[v43] = 0;
          uint64_t v14 = prop::file::set<int>((const void **)__dst, (uint64_t)a1, (int *)&__p);
          goto LABEL_109;
        }
LABEL_50:
        __p.__r_.__value_.__s.__data_[0] = -86;
        if (!util::convert<BOOL>(&v86, (BOOL *)&__p, 0)) {
          goto LABEL_217;
        }
        __int16 v15 = (const void *)*MEMORY[0x1E4F4D2F0];
        size_t v20 = strlen((const char *)*MEMORY[0x1E4F4D2F0]);
        if (v20 > 0x7FFFFFFFFFFFFFF7) {
          std::string::__throw_length_error[abi:ne180100]();
        }
        size_t v17 = v20;
        if (v20 >= 0x17)
        {
          uint64_t v35 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v20 | 7) != 0x17) {
            uint64_t v35 = v20 | 7;
          }
          uint64_t v36 = v35 + 1;
          __int16 v18 = operator new(v35 + 1);
          *(void *)&__dst[8] = v17;
          *(void *)&__dst[16] = v36 | 0x8000000000000000;
          *(void *)std::string __dst = v18;
        }
        else
        {
          __dst[23] = v20;
          __int16 v18 = __dst;
          if (!v20) {
            goto LABEL_82;
          }
        }
        goto LABEL_81;
      }
LABEL_45:
      __p.__r_.__value_.__s.__data_[0] = -86;
      if (!util::convert<BOOL>(&v86, (BOOL *)&__p, 0)) {
        goto LABEL_217;
      }
      __int16 v15 = (const void *)*MEMORY[0x1E4F4D2F0];
      size_t v19 = strlen((const char *)*MEMORY[0x1E4F4D2F0]);
      if (v19 > 0x7FFFFFFFFFFFFFF7) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      size_t v17 = v19;
      if (v19 >= 0x17)
      {
        uint64_t v27 = (v19 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v19 | 7) != 0x17) {
          uint64_t v27 = v19 | 7;
        }
        uint64_t v28 = v27 + 1;
        __int16 v18 = operator new(v27 + 1);
        *(void *)&__dst[8] = v17;
        *(void *)&__dst[16] = v28 | 0x8000000000000000;
        *(void *)std::string __dst = v18;
      }
      else
      {
        __dst[23] = v19;
        __int16 v18 = __dst;
        if (!v19) {
          goto LABEL_82;
        }
      }
      goto LABEL_81;
    }
LABEL_40:
    __p.__r_.__value_.__s.__data_[0] = -86;
    if (!util::convert<BOOL>(&v86, (BOOL *)&__p, 0)) {
      goto LABEL_217;
    }
    __int16 v15 = (const void *)*MEMORY[0x1E4F4D2F0];
    size_t v16 = strlen((const char *)*MEMORY[0x1E4F4D2F0]);
    if (v16 > 0x7FFFFFFFFFFFFFF7) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    size_t v17 = v16;
    if (v16 >= 0x17)
    {
      uint64_t v21 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v16 | 7) != 0x17) {
        uint64_t v21 = v16 | 7;
      }
      uint64_t v22 = v21 + 1;
      __int16 v18 = operator new(v21 + 1);
      *(void *)&__dst[8] = v17;
      *(void *)&__dst[16] = v22 | 0x8000000000000000;
      *(void *)std::string __dst = v18;
    }
    else
    {
      __dst[23] = v16;
      __int16 v18 = __dst;
      if (!v16) {
        goto LABEL_82;
      }
    }
LABEL_81:
    memmove(v18, v15, v17);
LABEL_82:
    v18[v17] = 0;
    uint64_t v14 = prop::file::set<BOOL>((const void **)__dst, (uint64_t)a1, (unsigned __int8 *)&__p);
    goto LABEL_109;
  }
  uint64_t v6 = *(const char **)a1;
  if (!strcasecmp(*(const char **)a1, (const char *)*MEMORY[0x1E4F4C2D8])) {
    goto LABEL_40;
  }
  if (!strcasecmp(v6, (const char *)*MEMORY[0x1E4F4C380])) {
    goto LABEL_45;
  }
  if (!strcasecmp(v6, (const char *)*MEMORY[0x1E4F4C5B8])) {
    goto LABEL_50;
  }
  if (!strcasecmp(v6, (const char *)*MEMORY[0x1E4F4C198])) {
    goto LABEL_59;
  }
  if (!strcasecmp(v6, (const char *)*MEMORY[0x1E4F4CCD0])) {
    goto LABEL_69;
  }
  if (!strcasecmp(v6, (const char *)*MEMORY[0x1E4F4C490])) {
    goto LABEL_83;
  }
  if (!strcasecmp(v6, (const char *)*MEMORY[0x1E4F4C428])) {
    goto LABEL_97;
  }
  size_t v5 = (char *)*MEMORY[0x1E4F4C2E0];
  if (strcasecmp(v6, (const char *)*MEMORY[0x1E4F4C2E0]))
  {
LABEL_17:
    char v7 = (capabilities::radio *)strcasecmp(v6, diag::config::kEnabledDuringSleepKey[0]);
    if (!v7)
    {
      unint64_t v52 = (capabilities::radio *)capabilities::radio::maverick(v7);
      if (v52 & 1) != 0 || (capabilities::radio::ice(v52))
      {
        *(_DWORD *)std::string __dst = -1431655766;
        if ((util::convert<int>(&v86, __dst, 0) & 1) == 0) {
          goto LABEL_217;
        }
        int v53 = *(_DWORD *)__dst;
        if (*(_DWORD *)__dst > 2u) {
          goto LABEL_217;
        }
        std::string::basic_string[abi:ne180100]<0>(__dst, (char *)*MEMORY[0x1E4F4D2F0]);
        LODWORD(__p.__r_.__value_.__l.__data_) = v53;
        uint64_t v14 = prop::file::set<unsigned int>((const void **)__dst, (uint64_t)a1, (unsigned int *)&__p);
        goto LABEL_109;
      }
      LOBYTE(v4) = a1[23];
    }
    uint64_t v8 = *(const char **)a1;
    if ((v4 & 0x80u) == 0) {
      uint64_t v9 = a1;
    }
    else {
      uint64_t v9 = *(const char **)a1;
    }
    BOOL v10 = (capabilities::radio *)strcasecmp(v9, diag::config::kBufferingOnAPAwake[0]);
    if (!v10)
    {
      if (capabilities::radio::maverick(v10))
      {
        __p.__r_.__value_.__s.__data_[0] = -86;
        if (util::convert<BOOL>(&v86, (BOOL *)&__p, 0)) {
          goto LABEL_215;
        }
        goto LABEL_217;
      }
      LOBYTE(v4) = a1[23];
      uint64_t v8 = *(const char **)a1;
    }
    if ((v4 & 0x80u) == 0) {
      unint64_t v54 = a1;
    }
    else {
      unint64_t v54 = v8;
    }
    unint64_t v55 = (capabilities::radio *)strcasecmp(v54, diag::config::kStallDetectionKey[0]);
    if (!v55)
    {
      if (capabilities::radio::maverick(v55))
      {
        __p.__r_.__value_.__s.__data_[0] = -86;
        if (util::convert<BOOL>(&v86, (BOOL *)&__p, 0)) {
          goto LABEL_215;
        }
        goto LABEL_217;
      }
      LOBYTE(v4) = a1[23];
      uint64_t v8 = *(const char **)a1;
    }
    if ((v4 & 0x80u) == 0) {
      unint64_t v56 = a1;
    }
    else {
      unint64_t v56 = v8;
    }
    uint64_t v57 = (capabilities::radio *)strcasecmp(v56, diag::config::kStallDetectionRetriesKey[0]);
    if (!v57)
    {
      if (capabilities::radio::maverick(v57))
      {
        LODWORD(__p.__r_.__value_.__l.__data_) = -1431655766;
        if (!util::convert<unsigned int>(&v86, &__p)) {
          goto LABEL_217;
        }
        std::string::basic_string[abi:ne180100]<0>(__dst, (char *)*MEMORY[0x1E4F4D2F0]);
        uint64_t v14 = prop::file::set<unsigned int>((const void **)__dst, (uint64_t)a1, (unsigned int *)&__p);
        goto LABEL_109;
      }
      LOBYTE(v4) = a1[23];
      uint64_t v8 = *(const char **)a1;
    }
    if ((v4 & 0x80u) == 0) {
      uint64_t v58 = a1;
    }
    else {
      uint64_t v58 = v8;
    }
    unint64_t v59 = (capabilities::radio *)strcasecmp(v58, diag::config::kStallDetectionRecoveryKey[0]);
    if (!v59)
    {
      if (capabilities::radio::maverick(v59))
      {
        LODWORD(__p.__r_.__value_.__l.__data_) = -1431655766;
        if (!diag::config::asEnum((uint64_t)&v86, &__p)) {
          goto LABEL_217;
        }
        std::string::basic_string[abi:ne180100]<0>(__dst, (char *)*MEMORY[0x1E4F4D2F0]);
        int data = (int)__p.__r_.__value_.__l.__data_;
        uint64_t v14 = prop::file::set<unsigned int>((const void **)__dst, (uint64_t)a1, (unsigned int *)&data);
        goto LABEL_109;
      }
      LOBYTE(v4) = a1[23];
    }
    if ((v4 & 0x80) != 0)
    {
      unint64_t v60 = *(const char **)a1;
      if (strcasecmp(*(const char **)a1, diag::config::kKeepScratchLogsKey[0]))
      {
LABEL_145:
        unint64_t v61 = (capabilities::radio *)strcasecmp(v60, (const char *)*MEMORY[0x1E4F4CCC8]);
        if (!v61)
        {
          if (capabilities::radio::maverick(v61)) {
            goto LABEL_190;
          }
          LOBYTE(v4) = a1[23];
        }
        if ((v4 & 0x80) != 0)
        {
          unint64_t v62 = *(const char **)a1;
          if (!strcasecmp(*(const char **)a1, (const char *)*MEMORY[0x1E4F4CEA8])) {
            goto LABEL_190;
          }
        }
        else
        {
          unint64_t v62 = a1;
          if (!strcasecmp(a1, (const char *)*MEMORY[0x1E4F4CEA8])) {
            goto LABEL_190;
          }
        }
        unsigned int v63 = (capabilities::radio *)strcasecmp(v62, diag::config::kExtraDMCFileKey[0]);
        if (!v63)
        {
          if (capabilities::radio::maverick(v63)) {
            goto LABEL_190;
          }
          LOBYTE(v4) = a1[23];
        }
        if ((v4 & 0x80u) == 0) {
          uint64_t v64 = a1;
        }
        else {
          uint64_t v64 = *(const char **)a1;
        }
        uint64_t v65 = (capabilities::radio *)strcasecmp(v64, (const char *)*MEMORY[0x1E4F4CAA8]);
        if (!v65)
        {
          if (capabilities::radio::maverick(v65))
          {
LABEL_190:
            std::string::basic_string[abi:ne180100]<0>(__dst, (char *)*MEMORY[0x1E4F4D2F0]);
            uint64_t v14 = prop::file::set<std::string>((const void **)__dst, (uint64_t)a1, (uint64_t)&v86);
            goto LABEL_109;
          }
          LOBYTE(v4) = a1[23];
        }
        if ((v4 & 0x80) != 0)
        {
          int v66 = *(const char **)a1;
          if (!strcasecmp(*(const char **)a1, (const char *)*MEMORY[0x1E4F4CD88])) {
            goto LABEL_190;
          }
          if (strcasecmp(v66, (const char *)*MEMORY[0x1E4F4D248]))
          {
            if (!strcasecmp(v66, (const char *)*MEMORY[0x1E4F4D200])
              || !strcasecmp(v66, (const char *)*MEMORY[0x1E4F4D208]))
            {
              goto LABEL_190;
            }
            if (strcasecmp(v66, (const char *)*MEMORY[0x1E4F4C378]))
            {
              if (!strcasecmp(v66, (const char *)*MEMORY[0x1E4F4C940])
                || !strcasecmp(v66, (const char *)*MEMORY[0x1E4F4CAB8]))
              {
                goto LABEL_190;
              }
LABEL_174:
              if (!strcasecmp(v66, (const char *)*MEMORY[0x1E4F4CEA0]))
              {
                __p.__r_.__value_.__s.__data_[0] = -86;
                if (util::convert<BOOL>(&v86, (BOOL *)&__p, 0))
                {
LABEL_215:
                  std::string::basic_string[abi:ne180100]<0>(__dst, (char *)*MEMORY[0x1E4F4D2F0]);
                  uint64_t v14 = prop::file::set<BOOL>((const void **)__dst, (uint64_t)a1, (unsigned __int8 *)&__p);
                  goto LABEL_109;
                }
LABEL_217:
                uint64_t v12 = 0;
                goto LABEL_218;
              }
              uint64_t v67 = GetOsLogContext()[1];
              if (!os_log_type_enabled(v67, OS_LOG_TYPE_ERROR)) {
                goto LABEL_217;
              }
              uint64_t v68 = *MEMORY[0x1E4F4D2F0];
              if (a1[23] >= 0) {
                unsigned int v69 = a1;
              }
              else {
                unsigned int v69 = *(char **)a1;
              }
              uint64_t v70 = &v86;
              if ((v86.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                uint64_t v70 = (std::string *)v86.__r_.__value_.__r.__words[0];
              }
              *(_DWORD *)std::string __dst = 136315906;
              *(void *)&__dst[4] = "prop";
              *(_WORD *)&__dst[12] = 2080;
              *(void *)&__dst[14] = v68;
              *(_WORD *)&__dst[22] = 2080;
              xpc_object_t v88 = v69;
              __int16 v89 = 2080;
              uint64_t v90 = v70;
              uint64_t v71 = "%s: [bbtrace] set: Invalid key; domain='%s' key='%s' value='%s'";
              std::string v72 = v67;
              uint32_t v73 = 42;
LABEL_182:
              _os_log_error_impl(&dword_1C5767000, v72, OS_LOG_TYPE_ERROR, v71, __dst, v73);
              goto LABEL_217;
            }
LABEL_196:
            int data = -1431655766;
            unint64_t v74 = (capabilities::radio *)util::convert<unsigned int>(&v86, &data);
            if (v74)
            {
              unsigned int v75 = data;
              __int16 v76 = (capabilities::abs *)capabilities::radio::vendor(v74);
              shouldUseMinBasebandTransportIOReadSize = (capabilities::radio *)capabilities::abs::shouldUseMinBasebandTransportIOReadSize(v76);
              if (shouldUseMinBasebandTransportIOReadSize) {
                unsigned int v78 = 0x4000;
              }
              else {
                unsigned int v78 = 0x8000;
              }
              if (v75 >= v78)
              {
                if (!v75)
                {
                  unint64_t v81 = GetOsLogContext()[1];
                  if (!os_log_type_enabled(v81, OS_LOG_TYPE_ERROR)) {
                    goto LABEL_217;
                  }
                  *(_WORD *)std::string __dst = 0;
                  uint64_t v71 = "file size cannot be 0";
                  std::string v72 = v81;
                  uint32_t v73 = 2;
                  goto LABEL_182;
                }
              }
              else
              {
                uint64_t v79 = (capabilities::abs *)capabilities::radio::vendor(shouldUseMinBasebandTransportIOReadSize);
                if (capabilities::abs::shouldUseMinBasebandTransportIOReadSize(v79)) {
                  unsigned int v75 = 0x4000;
                }
                else {
                  unsigned int v75 = 0x8000;
                }
              }
              int data = 1 << (__clz(v75) ^ 0x1F);
              std::string::basic_string[abi:ne180100]<0>(__dst, (char *)*MEMORY[0x1E4F4D2F0]);
              unint64_t v74 = (capabilities::radio *)prop::file::set<unsigned int>((const void **)__dst, (uint64_t)a1, (unsigned int *)&data);
              int v80 = (int)v74;
              if ((__dst[23] & 0x80000000) != 0) {
                operator delete(*(void **)__dst);
              }
            }
            else
            {
              int v80 = 0;
            }
            int __val = capabilities::trace::defaultHistorySizeMB(v74);
            std::string::basic_string[abi:ne180100]<0>(__dst, v5);
            prop::bbtrace::get<int>(__dst, &__val);
            if ((__dst[23] & 0x80000000) != 0) {
              operator delete(*(void **)__dst);
            }
            if (v80)
            {
              std::string::basic_string[abi:ne180100]<0>(__dst, v5);
              std::to_string(&__p, __val);
              uint64_t v12 = prop::bbtrace::set(__dst, &__p);
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__p.__r_.__value_.__l.__data_);
              }
              goto LABEL_110;
            }
            goto LABEL_217;
          }
        }
        else
        {
          if (!strcasecmp(a1, (const char *)*MEMORY[0x1E4F4CD88])) {
            goto LABEL_190;
          }
          if (strcasecmp(a1, (const char *)*MEMORY[0x1E4F4D248]))
          {
            if (!strcasecmp(a1, (const char *)*MEMORY[0x1E4F4D200])
              || !strcasecmp(a1, (const char *)*MEMORY[0x1E4F4D208]))
            {
              goto LABEL_190;
            }
            if (strcasecmp(a1, (const char *)*MEMORY[0x1E4F4C378]))
            {
              if (!strcasecmp(a1, (const char *)*MEMORY[0x1E4F4C940])) {
                goto LABEL_190;
              }
              int v66 = a1;
              if (!strcasecmp(a1, (const char *)*MEMORY[0x1E4F4CAB8])) {
                goto LABEL_190;
              }
              goto LABEL_174;
            }
            goto LABEL_196;
          }
        }
        __p.__r_.__value_.__s.__data_[0] = 0;
        if (util::convert<BOOL>(&v86, (BOOL *)&__p, 0)) {
          goto LABEL_215;
        }
        goto LABEL_217;
      }
    }
    else
    {
      unint64_t v60 = a1;
      if (strcasecmp(a1, diag::config::kKeepScratchLogsKey[0])) {
        goto LABEL_145;
      }
    }
    __p.__r_.__value_.__s.__data_[0] = -86;
    if (util::convert<BOOL>(&v86, (BOOL *)&__p, 0)) {
      goto LABEL_215;
    }
    goto LABEL_217;
  }
LABEL_33:
  LODWORD(__p.__r_.__value_.__l.__data_) = -1431655766;
  int v11 = (capabilities::trace *)util::convert<int>(&v86, &__p, 0);
  uint64_t v12 = (uint64_t)v11;
  if (SLODWORD(__p.__r_.__value_.__l.__data_) < 0) {
    int v13 = (int)v11;
  }
  else {
    int v13 = 0;
  }
  if (v13 == 1) {
    LODWORD(__p.__r_.__value_.__l.__data_) = capabilities::trace::defaultHistorySizeMB(v11);
  }
  if (v12)
  {
    std::string::basic_string[abi:ne180100]<0>(__dst, (char *)*MEMORY[0x1E4F4D2F0]);
    uint64_t v14 = prop::file::set<int>((const void **)__dst, (uint64_t)a1, (int *)&__p);
    goto LABEL_109;
  }
LABEL_218:
  if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v86.__r_.__value_.__l.__data_);
  }
  return v12;
}

void sub_1C5881AC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a21 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t prop::coredump::set(uint64_t a1, char *a2)
{
  int v2 = a2;
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  memset(&v18, 170, sizeof(v18));
  if (a2[23] < 0)
  {
    std::string::__init_copy_ctor_external(&v18, *(const std::string::value_type **)a2, *((void *)a2 + 1));
    if (v2[23] < 0) {
      int v2 = *(char **)v2;
    }
    if (strcasecmp(v2, "default")) {
      goto LABEL_8;
    }
  }
  else
  {
    std::string v18 = *(std::string *)a2;
    if (strcasecmp(a2, "default")) {
      goto LABEL_8;
    }
  }
  if (!defaults::coredump::get((const char *)a1, (uint64_t)&v18)) {
    goto LABEL_24;
  }
LABEL_8:
  if (*(char *)(a1 + 23) >= 0) {
    int v4 = (const char *)a1;
  }
  else {
    int v4 = *(const char **)a1;
  }
  if (strcasecmp(v4, (const char *)*MEMORY[0x1E4F4C2D8]))
  {
    size_t v5 = GetOsLogContext()[1];
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      uint64_t v6 = *MEMORY[0x1E4F4C200];
      if (*(char *)(a1 + 23) >= 0) {
        char v7 = (const char *)a1;
      }
      else {
        char v7 = *(const char **)a1;
      }
      uint64_t v8 = &v18;
      if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        uint64_t v8 = (std::string *)v18.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)buf = 136315906;
      *(void *)&uint8_t buf[4] = "prop";
      *(_WORD *)&buf[12] = 2080;
      *(void *)&buf[14] = v6;
      *(_WORD *)&unsigned char buf[22] = 2080;
      size_t v20 = v7;
      __int16 v21 = 2080;
      uint64_t v22 = v8;
      _os_log_error_impl(&dword_1C5767000, v5, OS_LOG_TYPE_ERROR, "%s: [coredump] set: Invalid key; domain='%s' key='%s' value='%s'",
        buf,
        0x2Au);
    }
    goto LABEL_24;
  }
  char v17 = -86;
  if (!util::convert<BOOL>(&v18, (BOOL *)&v17, 0))
  {
LABEL_24:
    uint64_t v13 = 0;
    goto LABEL_25;
  }
  uint64_t v9 = (const void *)*MEMORY[0x1E4F4C200];
  size_t v10 = strlen((const char *)*MEMORY[0x1E4F4C200]);
  if (v10 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v11 = v10;
  if (v10 >= 0x17)
  {
    uint64_t v15 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v10 | 7) != 0x17) {
      uint64_t v15 = v10 | 7;
    }
    uint64_t v16 = v15 + 1;
    uint64_t v12 = operator new(v15 + 1);
    *(void *)&uint8_t buf[8] = v11;
    *(void *)&uint8_t buf[16] = v16 | 0x8000000000000000;
    *(void *)buf = v12;
    goto LABEL_31;
  }
  buf[23] = v10;
  uint64_t v12 = buf;
  if (v10) {
LABEL_31:
  }
    memmove(v12, v9, v11);
  v12[v11] = 0;
  uint64_t v13 = prop::file::set<BOOL>((const void **)buf, a1, (unsigned __int8 *)&v17);
  if ((buf[23] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
LABEL_25:
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v18.__r_.__value_.__l.__data_);
  }
  return v13;
}

void sub_1C5881EF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a16 < 0) {
    operator delete(a11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t prop::ipc::set(char *a1, char *a2)
{
  int v2 = a2;
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  memset(&v28, 170, sizeof(v28));
  if (a2[23] < 0)
  {
    std::string::__init_copy_ctor_external(&v28, *(const std::string::value_type **)a2, *((void *)a2 + 1));
    if (v2[23] < 0) {
      int v2 = *(char **)v2;
    }
    if (strcasecmp(v2, "default")) {
      goto LABEL_8;
    }
  }
  else
  {
    std::string v28 = *(std::string *)a2;
    if (strcasecmp(a2, "default")) {
      goto LABEL_8;
    }
  }
  if (!defaults::ipc::get(a1, (uint64_t)&v28)) {
    goto LABEL_35;
  }
LABEL_8:
  if ((a1[23] & 0x80000000) == 0)
  {
    if (strcasecmp(a1, (const char *)*MEMORY[0x1E4F4C2D8]))
    {
      int v4 = a1;
      if (strcasecmp(a1, (const char *)*MEMORY[0x1E4F4C2E0])) {
        goto LABEL_11;
      }
      goto LABEL_22;
    }
LABEL_30:
    LOBYTE(v27) = -86;
    if (util::convert<BOOL>(&v28, (BOOL *)&v27, 0))
    {
      uint64_t v16 = (const void *)*MEMORY[0x1E4F4D338];
      size_t v17 = strlen((const char *)*MEMORY[0x1E4F4D338]);
      if (v17 > 0x7FFFFFFFFFFFFFF7) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      size_t v18 = v17;
      if (v17 >= 0x17)
      {
        uint64_t v22 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v17 | 7) != 0x17) {
          uint64_t v22 = v17 | 7;
        }
        uint64_t v23 = v22 + 1;
        size_t v19 = operator new(v22 + 1);
        *(void *)&uint8_t buf[8] = v18;
        *(void *)&uint8_t buf[16] = v23 | 0x8000000000000000;
        *(void *)buf = v19;
      }
      else
      {
        buf[23] = v17;
        size_t v19 = buf;
        if (!v17) {
          goto LABEL_43;
        }
      }
      memmove(v19, v16, v18);
LABEL_43:
      v19[v18] = 0;
      uint64_t v24 = prop::file::set<BOOL>((const void **)buf, (uint64_t)a1, (unsigned __int8 *)&v27);
      goto LABEL_49;
    }
LABEL_35:
    uint64_t v20 = 0;
    goto LABEL_36;
  }
  int v4 = *(const char **)a1;
  if (!strcasecmp(*(const char **)a1, (const char *)*MEMORY[0x1E4F4C2D8])) {
    goto LABEL_30;
  }
  if (strcasecmp(v4, (const char *)*MEMORY[0x1E4F4C2E0]))
  {
LABEL_11:
    size_t v5 = (capabilities::ipc *)strcasecmp(v4, "BufferCount");
    if (v5 || (capabilities::ipc::supportsPCI(v5) & 1) == 0)
    {
      uint64_t v6 = GetOsLogContext()[1];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      {
        uint64_t v7 = *MEMORY[0x1E4F4D338];
        if (a1[23] >= 0) {
          uint64_t v8 = a1;
        }
        else {
          uint64_t v8 = *(char **)a1;
        }
        uint64_t v9 = &v28;
        if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          uint64_t v9 = (std::string *)v28.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)buf = 136315906;
        *(void *)&uint8_t buf[4] = "prop";
        *(_WORD *)&buf[12] = 2080;
        *(void *)&buf[14] = v7;
        *(_WORD *)&unsigned char buf[22] = 2080;
        int v30 = v8;
        __int16 v31 = 2080;
        size_t v32 = v9;
        _os_log_error_impl(&dword_1C5767000, v6, OS_LOG_TYPE_ERROR, "%s: [ipc] set: Invalid key; domain='%s' key='%s' value='%s'",
          buf,
          0x2Au);
      }
    }
    goto LABEL_35;
  }
LABEL_22:
  int v27 = -1431655766;
  int v10 = util::convert<int>(&v28, &v27, 0);
  if (v27 >= 0) {
    int v11 = v10;
  }
  else {
    int v11 = 0;
  }
  if (v11 != 1) {
    goto LABEL_35;
  }
  uint64_t v12 = (const void *)*MEMORY[0x1E4F4D338];
  size_t v13 = strlen((const char *)*MEMORY[0x1E4F4D338]);
  if (v13 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v14 = v13;
  if (v13 >= 0x17)
  {
    uint64_t v25 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v13 | 7) != 0x17) {
      uint64_t v25 = v13 | 7;
    }
    uint64_t v26 = v25 + 1;
    uint64_t v15 = operator new(v25 + 1);
    *(void *)&uint8_t buf[8] = v14;
    *(void *)&uint8_t buf[16] = v26 | 0x8000000000000000;
    *(void *)buf = v15;
  }
  else
  {
    buf[23] = v13;
    uint64_t v15 = buf;
    if (!v13) {
      goto LABEL_48;
    }
  }
  memmove(v15, v12, v14);
LABEL_48:
  v15[v14] = 0;
  uint64_t v24 = prop::file::set<int>((const void **)buf, (uint64_t)a1, &v27);
LABEL_49:
  uint64_t v20 = v24;
  if ((buf[23] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
LABEL_36:
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v28.__r_.__value_.__l.__data_);
  }
  return v20;
}

void sub_1C5882314(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a16 < 0)
  {
    operator delete(a11);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t prop::bbipc::set(char *a1, char *a2)
{
  int v2 = a2;
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  memset(&v31, 170, sizeof(v31));
  if (a2[23] < 0)
  {
    std::string::__init_copy_ctor_external(&v31, *(const std::string::value_type **)a2, *((void *)a2 + 1));
    if (v2[23] < 0) {
      int v2 = *(char **)v2;
    }
    if (strcasecmp(v2, "default")) {
      goto LABEL_8;
    }
  }
  else
  {
    std::string v31 = *(std::string *)a2;
    if (strcasecmp(a2, "default")) {
      goto LABEL_8;
    }
  }
  if (!defaults::bbipc::get(a1, (uint64_t)&v31)) {
    goto LABEL_36;
  }
LABEL_8:
  if ((a1[23] & 0x80000000) == 0)
  {
    if (strcasecmp(a1, (const char *)*MEMORY[0x1E4F4C2D8]))
    {
      int v4 = a1;
      if (strcasecmp(a1, (const char *)*MEMORY[0x1E4F4C388])) {
        goto LABEL_11;
      }
LABEL_21:
      int v30 = -1431655766;
      if (!util::convert<int>(&v31, &v30, 0)) {
        goto LABEL_36;
      }
      uint64_t v9 = (const void *)*MEMORY[0x1E4F4C390];
      size_t v10 = strlen((const char *)*MEMORY[0x1E4F4C390]);
      if (v10 > 0x7FFFFFFFFFFFFFF7) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      size_t v11 = v10;
      if (v10 >= 0x17)
      {
        uint64_t v25 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v10 | 7) != 0x17) {
          uint64_t v25 = v10 | 7;
        }
        uint64_t v26 = v25 + 1;
        uint64_t v12 = operator new(v25 + 1);
        *(void *)&uint8_t buf[8] = v11;
        *(void *)&uint8_t buf[16] = v26 | 0x8000000000000000;
        *(void *)buf = v12;
      }
      else
      {
        buf[23] = v10;
        uint64_t v12 = buf;
        if (!v10) {
          goto LABEL_47;
        }
      }
      memmove(v12, v9, v11);
LABEL_47:
      v12[v11] = 0;
      uint64_t v24 = prop::file::set<int>((const void **)buf, (uint64_t)a1, &v30);
      goto LABEL_53;
    }
LABEL_26:
    LOBYTE(v30) = -86;
    if (!util::convert<BOOL>(&v31, (BOOL *)&v30, 0)) {
      goto LABEL_36;
    }
    size_t v13 = (const void *)*MEMORY[0x1E4F4C390];
    size_t v14 = strlen((const char *)*MEMORY[0x1E4F4C390]);
    if (v14 > 0x7FFFFFFFFFFFFFF7) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    size_t v15 = v14;
    if (v14 >= 0x17)
    {
      uint64_t v22 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v14 | 7) != 0x17) {
        uint64_t v22 = v14 | 7;
      }
      uint64_t v23 = v22 + 1;
      uint64_t v16 = operator new(v22 + 1);
      *(void *)&uint8_t buf[8] = v15;
      *(void *)&uint8_t buf[16] = v23 | 0x8000000000000000;
      *(void *)buf = v16;
    }
    else
    {
      buf[23] = v14;
      uint64_t v16 = buf;
      if (!v14) {
        goto LABEL_42;
      }
    }
    memmove(v16, v13, v15);
LABEL_42:
    v16[v15] = 0;
    uint64_t v24 = prop::file::set<BOOL>((const void **)buf, (uint64_t)a1, (unsigned __int8 *)&v30);
    goto LABEL_53;
  }
  int v4 = *(const char **)a1;
  if (!strcasecmp(*(const char **)a1, (const char *)*MEMORY[0x1E4F4C2D8])) {
    goto LABEL_26;
  }
  if (!strcasecmp(v4, (const char *)*MEMORY[0x1E4F4C388])) {
    goto LABEL_21;
  }
LABEL_11:
  if (!strcasecmp(v4, (const char *)*MEMORY[0x1E4F4C5C0]))
  {
    int v30 = -1431655766;
    if (!util::convert<unsigned int>(&v31, &v30)) {
      goto LABEL_36;
    }
    size_t v17 = (const void *)*MEMORY[0x1E4F4C390];
    size_t v18 = strlen((const char *)*MEMORY[0x1E4F4C390]);
    if (v18 > 0x7FFFFFFFFFFFFFF7) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    size_t v19 = v18;
    if (v18 >= 0x17)
    {
      uint64_t v27 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v18 | 7) != 0x17) {
        uint64_t v27 = v18 | 7;
      }
      uint64_t v28 = v27 + 1;
      uint64_t v20 = operator new(v27 + 1);
      *(void *)&uint8_t buf[8] = v19;
      *(void *)&uint8_t buf[16] = v28 | 0x8000000000000000;
      *(void *)buf = v20;
    }
    else
    {
      buf[23] = v18;
      uint64_t v20 = buf;
      if (!v18) {
        goto LABEL_52;
      }
    }
    memmove(v20, v17, v19);
LABEL_52:
    v20[v19] = 0;
    uint64_t v24 = prop::file::set<unsigned int>((const void **)buf, (uint64_t)a1, (unsigned int *)&v30);
LABEL_53:
    uint64_t v21 = v24;
    if ((buf[23] & 0x80000000) != 0)
    {
      operator delete(*(void **)buf);
      if ((SHIBYTE(v31.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        return v21;
      }
    }
    else if ((SHIBYTE(v31.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      return v21;
    }
LABEL_57:
    operator delete(v31.__r_.__value_.__l.__data_);
    return v21;
  }
  size_t v5 = GetOsLogContext()[1];
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
  {
    uint64_t v6 = *MEMORY[0x1E4F4C390];
    if (a1[23] >= 0) {
      uint64_t v7 = a1;
    }
    else {
      uint64_t v7 = *(char **)a1;
    }
    uint64_t v8 = &v31;
    if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      uint64_t v8 = (std::string *)v31.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)buf = 136315906;
    *(void *)&uint8_t buf[4] = "prop";
    *(_WORD *)&buf[12] = 2080;
    *(void *)&buf[14] = v6;
    *(_WORD *)&unsigned char buf[22] = 2080;
    uint64_t v33 = v7;
    __int16 v34 = 2080;
    uint64_t v35 = v8;
    _os_log_error_impl(&dword_1C5767000, v5, OS_LOG_TYPE_ERROR, "%s: [bbipc] set: Invalid key; domain='%s' key='%s' value='%s'",
      buf,
      0x2Au);
  }
LABEL_36:
  uint64_t v21 = 0;
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_57;
  }
  return v21;
}

void sub_1C5882808(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a16 < 0)
  {
    operator delete(a11);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t prop::compression::set(char *a1, char *a2)
{
  int v2 = a2;
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  memset(&v27, 170, sizeof(v27));
  if (a2[23] < 0)
  {
    std::string::__init_copy_ctor_external(&v27, *(const std::string::value_type **)a2, *((void *)a2 + 1));
    if (v2[23] < 0) {
      int v2 = *(char **)v2;
    }
    if (strcasecmp(v2, "default")) {
      goto LABEL_8;
    }
  }
  else
  {
    std::string v27 = *(std::string *)a2;
    if (strcasecmp(a2, "default")) {
      goto LABEL_8;
    }
  }
  if (!defaults::compression::get(a1, (uint64_t)&v27)) {
    goto LABEL_42;
  }
LABEL_8:
  int v4 = a1[23];
  size_t v5 = *(const char **)a1;
  if (v4 >= 0) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(const char **)a1;
  }
  if (strcasecmp(v6, (const char *)*MEMORY[0x1E4F47258]))
  {
    uint64_t v7 = 0;
    goto LABEL_26;
  }
  int v26 = 0;
  if (util::convert<int>(&v27, &v26, 0))
  {
    uint64_t v8 = (const void *)*MEMORY[0x1E4F4C398];
    size_t v9 = strlen((const char *)*MEMORY[0x1E4F4C398]);
    if (v9 > 0x7FFFFFFFFFFFFFF7) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    size_t v10 = v9;
    if (v9 >= 0x17)
    {
      uint64_t v12 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v9 | 7) != 0x17) {
        uint64_t v12 = v9 | 7;
      }
      uint64_t v13 = v12 + 1;
      size_t v11 = operator new(v12 + 1);
      *(void *)&__dst[8] = v10;
      *(void *)&__dst[16] = v13 | 0x8000000000000000;
      *(void *)std::string __dst = v11;
    }
    else
    {
      __dst[23] = v9;
      size_t v11 = __dst;
      if (!v9)
      {
LABEL_23:
        v11[v10] = 0;
        uint64_t v7 = prop::file::set<int>((const void **)__dst, (uint64_t)a1, &v26);
        if ((__dst[23] & 0x80000000) != 0) {
          operator delete(*(void **)__dst);
        }
        goto LABEL_25;
      }
    }
    memmove(v11, v8, v10);
    goto LABEL_23;
  }
  uint64_t v7 = 0;
LABEL_25:
  LOBYTE(v4) = a1[23];
  size_t v5 = *(const char **)a1;
LABEL_26:
  if ((v4 & 0x80u) == 0) {
    size_t v14 = a1;
  }
  else {
    size_t v14 = v5;
  }
  if (strcasecmp(v14, (const char *)*MEMORY[0x1E4F47108]))
  {
    size_t v15 = GetOsLogContext()[1];
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      uint64_t v16 = *MEMORY[0x1E4F4C398];
      if (a1[23] >= 0) {
        size_t v17 = a1;
      }
      else {
        size_t v17 = *(char **)a1;
      }
      size_t v18 = &v27;
      if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        size_t v18 = (std::string *)v27.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)std::string __dst = 136315906;
      *(void *)&__dst[4] = "prop";
      *(_WORD *)&__dst[12] = 2080;
      *(void *)&__dst[14] = v16;
      *(_WORD *)&__dst[22] = 2080;
      int v29 = v17;
      __int16 v30 = 2080;
      std::string v31 = v18;
      _os_log_error_impl(&dword_1C5767000, v15, OS_LOG_TYPE_ERROR, "%s: [compression] set: Invalid key; domain='%s' key='%s' value='%s'",
        __dst,
        0x2Au);
    }
    goto LABEL_49;
  }
  LOBYTE(v26) = 1;
  if (!util::convert<BOOL>(&v27, (BOOL *)&v26, 0))
  {
LABEL_42:
    uint64_t v7 = 0;
    goto LABEL_49;
  }
  size_t v19 = (const void *)*MEMORY[0x1E4F4C398];
  size_t v20 = strlen((const char *)*MEMORY[0x1E4F4C398]);
  if (v20 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v21 = v20;
  if (v20 >= 0x17)
  {
    uint64_t v23 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v20 | 7) != 0x17) {
      uint64_t v23 = v20 | 7;
    }
    uint64_t v24 = v23 + 1;
    uint64_t v22 = operator new(v23 + 1);
    *(void *)&__dst[8] = v21;
    *(void *)&__dst[16] = v24 | 0x8000000000000000;
    *(void *)std::string __dst = v22;
    goto LABEL_46;
  }
  __dst[23] = v20;
  uint64_t v22 = __dst;
  if (v20) {
LABEL_46:
  }
    memmove(v22, v19, v21);
  v22[v21] = 0;
  uint64_t v7 = prop::file::set<BOOL>((const void **)__dst, (uint64_t)a1, (unsigned __int8 *)&v26);
  if ((__dst[23] & 0x80000000) != 0) {
    operator delete(*(void **)__dst);
  }
LABEL_49:
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v27.__r_.__value_.__l.__data_);
  }
  return v7;
}

void sub_1C5882C08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a16 < 0) {
    operator delete(a11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t prop::ttr::set(char *a1, char *a2)
{
  int v2 = a2;
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  memset(&v25, 170, sizeof(v25));
  if (a2[23] < 0)
  {
    std::string::__init_copy_ctor_external(&v25, *(const std::string::value_type **)a2, *((void *)a2 + 1));
    if (v2[23] < 0) {
      int v2 = *(char **)v2;
    }
    if (strcasecmp(v2, "default")) {
      goto LABEL_8;
    }
  }
  else
  {
    std::string v25 = *(std::string *)a2;
    if (strcasecmp(a2, "default")) {
      goto LABEL_8;
    }
  }
  if (!defaults::ttr::get(a1, (uint64_t)&v25)) {
    goto LABEL_35;
  }
LABEL_8:
  if ((a1[23] & 0x80000000) == 0)
  {
    int v4 = a1;
    if (strcasecmp(a1, (const char *)*MEMORY[0x1E4F4C198])) {
      goto LABEL_10;
    }
LABEL_19:
    unsigned int v24 = -1431655766;
    int v9 = util::convert<unsigned int>(&v25, &v24);
    if (v24 < 4) {
      int v10 = v9;
    }
    else {
      int v10 = 0;
    }
    if (v10 == 1)
    {
      size_t v11 = (const void *)*MEMORY[0x1E4F4C300];
      size_t v12 = strlen((const char *)*MEMORY[0x1E4F4C300]);
      if (v12 > 0x7FFFFFFFFFFFFFF7) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      size_t v13 = v12;
      if (v12 >= 0x17)
      {
        uint64_t v20 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v12 | 7) != 0x17) {
          uint64_t v20 = v12 | 7;
        }
        uint64_t v21 = v20 + 1;
        size_t v14 = operator new(v20 + 1);
        *(void *)&uint8_t buf[8] = v13;
        *(void *)&uint8_t buf[16] = v21 | 0x8000000000000000;
        *(void *)buf = v14;
      }
      else
      {
        buf[23] = v12;
        size_t v14 = buf;
        if (!v12) {
          goto LABEL_47;
        }
      }
      goto LABEL_46;
    }
LABEL_35:
    uint64_t v18 = 0;
    goto LABEL_36;
  }
  int v4 = *(const char **)a1;
  if (!strcasecmp(*(const char **)a1, (const char *)*MEMORY[0x1E4F4C198])) {
    goto LABEL_19;
  }
LABEL_10:
  if (strcasecmp(v4, (const char *)*MEMORY[0x1E4F4CD80]))
  {
    size_t v5 = GetOsLogContext()[1];
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      uint64_t v6 = *MEMORY[0x1E4F4C300];
      if (a1[23] >= 0) {
        uint64_t v7 = a1;
      }
      else {
        uint64_t v7 = *(char **)a1;
      }
      uint64_t v8 = &v25;
      if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        uint64_t v8 = (std::string *)v25.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)buf = 136315906;
      *(void *)&uint8_t buf[4] = "prop";
      *(_WORD *)&buf[12] = 2080;
      *(void *)&buf[14] = v6;
      *(_WORD *)&unsigned char buf[22] = 2080;
      std::string v27 = v7;
      __int16 v28 = 2080;
      int v29 = v8;
      _os_log_error_impl(&dword_1C5767000, v5, OS_LOG_TYPE_ERROR, "%s: [ttr] set: Invalid key; domain='%s' key='%s' value='%s'",
        buf,
        0x2Au);
    }
    goto LABEL_35;
  }
  unsigned int v24 = -1431655766;
  int v15 = util::convert<unsigned int>(&v25, &v24);
  if (v24) {
    int v16 = v15;
  }
  else {
    int v16 = 0;
  }
  if (v16 != 1) {
    goto LABEL_35;
  }
  size_t v11 = (const void *)*MEMORY[0x1E4F4C300];
  size_t v17 = strlen((const char *)*MEMORY[0x1E4F4C300]);
  if (v17 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v13 = v17;
  if (v17 >= 0x17)
  {
    uint64_t v22 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v17 | 7) != 0x17) {
      uint64_t v22 = v17 | 7;
    }
    uint64_t v23 = v22 + 1;
    size_t v14 = operator new(v22 + 1);
    *(void *)&uint8_t buf[8] = v13;
    *(void *)&uint8_t buf[16] = v23 | 0x8000000000000000;
    *(void *)buf = v14;
    goto LABEL_46;
  }
  buf[23] = v17;
  size_t v14 = buf;
  if (v17) {
LABEL_46:
  }
    memmove(v14, v11, v13);
LABEL_47:
  v14[v13] = 0;
  uint64_t v18 = prop::file::set<unsigned int>((const void **)buf, (uint64_t)a1, &v24);
  if ((buf[23] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
LABEL_36:
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v25.__r_.__value_.__l.__data_);
  }
  return v18;
}

void sub_1C588300C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a16 < 0)
  {
    operator delete(a11);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t prop::logfilter::set(char *a1, char *a2)
{
  int v2 = a2;
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  memset(&v32, 170, sizeof(v32));
  if (a2[23] < 0)
  {
    std::string::__init_copy_ctor_external(&v32, *(const std::string::value_type **)a2, *((void *)a2 + 1));
    if (v2[23] < 0) {
      int v2 = *(char **)v2;
    }
    if (strcasecmp(v2, "default")) {
      goto LABEL_8;
    }
  }
  else
  {
    std::string v32 = *(std::string *)a2;
    if (strcasecmp(a2, "default")) {
      goto LABEL_8;
    }
  }
  if (!defaults::logfilter::get(a1, (uint64_t)&v32)) {
    goto LABEL_42;
  }
LABEL_8:
  if ((a1[23] & 0x80000000) == 0)
  {
    if (strcasecmp(a1, (const char *)*MEMORY[0x1E4F4C6C8]))
    {
      int v4 = a1;
      if (strcasecmp(a1, (const char *)*MEMORY[0x1E4F4C950])) {
        goto LABEL_11;
      }
LABEL_21:
      int v31 = -1431655766;
      int v9 = util::convert<int>(&v32, &v31, 0);
      if (v31 > -2) {
        int v10 = v9;
      }
      else {
        int v10 = 0;
      }
      if (v10 != 1) {
        goto LABEL_42;
      }
      size_t v11 = (const void *)*MEMORY[0x1E4F4C138];
      size_t v12 = strlen((const char *)*MEMORY[0x1E4F4C138]);
      if (v12 > 0x7FFFFFFFFFFFFFF7) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      size_t v13 = v12;
      if (v12 >= 0x17)
      {
        uint64_t v26 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v12 | 7) != 0x17) {
          uint64_t v26 = v12 | 7;
        }
        uint64_t v27 = v26 + 1;
        size_t v14 = operator new(v26 + 1);
        *(void *)&uint8_t buf[8] = v13;
        *(void *)&uint8_t buf[16] = v27 | 0x8000000000000000;
        *(void *)buf = v14;
      }
      else
      {
        buf[23] = v12;
        size_t v14 = buf;
        if (!v12) {
          goto LABEL_48;
        }
      }
LABEL_47:
      memmove(v14, v11, v13);
LABEL_48:
      v14[v13] = 0;
      uint64_t v25 = prop::file::set<int>((const void **)buf, (uint64_t)a1, &v31);
      goto LABEL_58;
    }
LABEL_29:
    int v31 = -1431655766;
    int v15 = util::convert<int>(&v32, &v31, 0);
    if (v31 > -2) {
      int v16 = v15;
    }
    else {
      int v16 = 0;
    }
    if (v16 != 1) {
      goto LABEL_42;
    }
    size_t v11 = (const void *)*MEMORY[0x1E4F4C138];
    size_t v17 = strlen((const char *)*MEMORY[0x1E4F4C138]);
    if (v17 > 0x7FFFFFFFFFFFFFF7) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    size_t v13 = v17;
    if (v17 >= 0x17)
    {
      uint64_t v23 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v17 | 7) != 0x17) {
        uint64_t v23 = v17 | 7;
      }
      uint64_t v24 = v23 + 1;
      size_t v14 = operator new(v23 + 1);
      *(void *)&uint8_t buf[8] = v13;
      *(void *)&uint8_t buf[16] = v24 | 0x8000000000000000;
      *(void *)buf = v14;
    }
    else
    {
      buf[23] = v17;
      size_t v14 = buf;
      if (!v17) {
        goto LABEL_48;
      }
    }
    goto LABEL_47;
  }
  int v4 = *(const char **)a1;
  if (!strcasecmp(*(const char **)a1, (const char *)*MEMORY[0x1E4F4C6C8])) {
    goto LABEL_29;
  }
  if (!strcasecmp(v4, (const char *)*MEMORY[0x1E4F4C950])) {
    goto LABEL_21;
  }
LABEL_11:
  if (!strcasecmp(v4, (const char *)*MEMORY[0x1E4F4D268]))
  {
    LOBYTE(v31) = 1;
    if (!util::convert<BOOL>(&v32, (BOOL *)&v31, 0)) {
      goto LABEL_42;
    }
    uint64_t v18 = (const void *)*MEMORY[0x1E4F4C138];
    size_t v19 = strlen((const char *)*MEMORY[0x1E4F4C138]);
    if (v19 > 0x7FFFFFFFFFFFFFF7) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    size_t v20 = v19;
    if (v19 >= 0x17)
    {
      uint64_t v28 = (v19 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v19 | 7) != 0x17) {
        uint64_t v28 = v19 | 7;
      }
      uint64_t v29 = v28 + 1;
      uint64_t v21 = operator new(v28 + 1);
      *(void *)&uint8_t buf[8] = v20;
      *(void *)&uint8_t buf[16] = v29 | 0x8000000000000000;
      *(void *)buf = v21;
    }
    else
    {
      buf[23] = v19;
      uint64_t v21 = buf;
      if (!v19) {
        goto LABEL_57;
      }
    }
    memmove(v21, v18, v20);
LABEL_57:
    v21[v20] = 0;
    uint64_t v25 = prop::file::set<BOOL>((const void **)buf, (uint64_t)a1, (unsigned __int8 *)&v31);
LABEL_58:
    uint64_t v22 = v25;
    if ((buf[23] & 0x80000000) != 0)
    {
      operator delete(*(void **)buf);
      if ((SHIBYTE(v32.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        return v22;
      }
    }
    else if ((SHIBYTE(v32.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      return v22;
    }
LABEL_62:
    operator delete(v32.__r_.__value_.__l.__data_);
    return v22;
  }
  size_t v5 = GetOsLogContext()[1];
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
  {
    uint64_t v6 = *MEMORY[0x1E4F4C138];
    if (a1[23] >= 0) {
      uint64_t v7 = a1;
    }
    else {
      uint64_t v7 = *(char **)a1;
    }
    uint64_t v8 = &v32;
    if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      uint64_t v8 = (std::string *)v32.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)buf = 136315906;
    *(void *)&uint8_t buf[4] = "prop";
    *(_WORD *)&buf[12] = 2080;
    *(void *)&buf[14] = v6;
    *(_WORD *)&unsigned char buf[22] = 2080;
    __int16 v34 = v7;
    __int16 v35 = 2080;
    uint64_t v36 = v8;
    _os_log_error_impl(&dword_1C5767000, v5, OS_LOG_TYPE_ERROR, "%s: [logfilter] set: Invalid key; domain='%s' key='%s' value='%s'",
      buf,
      0x2Au);
  }
LABEL_42:
  uint64_t v22 = 0;
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_62;
  }
  return v22;
}

void sub_1C5883520(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a16 < 0)
  {
    operator delete(a11);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t prop::systemlogs::set(char *a1, char *a2)
{
  int v2 = a2;
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  memset(&v35, 170, sizeof(v35));
  if (a2[23] < 0)
  {
    std::string::__init_copy_ctor_external(&v35, *(const std::string::value_type **)a2, *((void *)a2 + 1));
    if (v2[23] < 0) {
      int v2 = *(char **)v2;
    }
    if (strcasecmp(v2, "default")) {
      goto LABEL_8;
    }
  }
  else
  {
    std::string v35 = *(std::string *)a2;
    if (strcasecmp(a2, "default")) {
      goto LABEL_8;
    }
  }
  if (!defaults::systemlogs::get(a1, (uint64_t)&v35)) {
    goto LABEL_46;
  }
LABEL_8:
  if ((a1[23] & 0x80000000) == 0)
  {
    if (strcasecmp(a1, (const char *)*MEMORY[0x1E4F4C198]))
    {
      int v4 = a1;
      if (strcasecmp(a1, (const char *)*MEMORY[0x1E4F4C2E0])) {
        goto LABEL_11;
      }
LABEL_21:
      unsigned int v34 = -1431655766;
      int v9 = util::convert<int>(&v35, &v34, 0);
      if ((int)v34 > 0) {
        int v10 = v9;
      }
      else {
        int v10 = 0;
      }
      if (v10 != 1) {
        goto LABEL_46;
      }
      size_t v11 = (const void *)*MEMORY[0x1E4F4C2F8];
      size_t v12 = strlen((const char *)*MEMORY[0x1E4F4C2F8]);
      if (v12 > 0x7FFFFFFFFFFFFFF7) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      size_t v13 = v12;
      if (v12 >= 0x17)
      {
        uint64_t v27 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v12 | 7) != 0x17) {
          uint64_t v27 = v12 | 7;
        }
        uint64_t v28 = v27 + 1;
        size_t v14 = operator new(v27 + 1);
        *(void *)&uint8_t buf[8] = v13;
        *(void *)&uint8_t buf[16] = v28 | 0x8000000000000000;
        *(void *)buf = v14;
      }
      else
      {
        buf[23] = v12;
        size_t v14 = buf;
        if (!v12) {
          goto LABEL_54;
        }
      }
      memmove(v14, v11, v13);
LABEL_54:
      v14[v13] = 0;
      uint64_t v29 = prop::file::set<int>((const void **)buf, (uint64_t)a1, (int *)&v34);
      goto LABEL_65;
    }
LABEL_29:
    unsigned int v34 = -1431655766;
    if (TelephonyUtilIsInternalBuild()) {
      int IsCarrierBuild = 1;
    }
    else {
      int IsCarrierBuild = TelephonyUtilIsCarrierBuild();
    }
    if (!util::convert<unsigned int>(&v35, &v34)) {
      goto LABEL_46;
    }
    unsigned int v16 = IsCarrierBuild ? 3 : 2;
    if (v34 >= v16) {
      goto LABEL_46;
    }
    size_t v17 = (const void *)*MEMORY[0x1E4F4C2F8];
    size_t v18 = strlen((const char *)*MEMORY[0x1E4F4C2F8]);
    if (v18 > 0x7FFFFFFFFFFFFFF7) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    size_t v19 = v18;
    if (v18 >= 0x17)
    {
      uint64_t v30 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v18 | 7) != 0x17) {
        uint64_t v30 = v18 | 7;
      }
      uint64_t v31 = v30 + 1;
      size_t v20 = operator new(v30 + 1);
      *(void *)&uint8_t buf[8] = v19;
      *(void *)&uint8_t buf[16] = v31 | 0x8000000000000000;
      *(void *)buf = v20;
    }
    else
    {
      buf[23] = v18;
      size_t v20 = buf;
      if (!v18) {
        goto LABEL_59;
      }
    }
    memmove(v20, v17, v19);
LABEL_59:
    v20[v19] = 0;
    uint64_t v29 = prop::file::set<unsigned int>((const void **)buf, (uint64_t)a1, &v34);
    goto LABEL_65;
  }
  int v4 = *(const char **)a1;
  if (!strcasecmp(*(const char **)a1, (const char *)*MEMORY[0x1E4F4C198])) {
    goto LABEL_29;
  }
  if (!strcasecmp(v4, (const char *)*MEMORY[0x1E4F4C2E0])) {
    goto LABEL_21;
  }
LABEL_11:
  if (strcasecmp(v4, (const char *)*MEMORY[0x1E4F4CBA8]))
  {
    size_t v5 = GetOsLogContext()[1];
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      uint64_t v6 = *MEMORY[0x1E4F4C2F8];
      if (a1[23] >= 0) {
        uint64_t v7 = a1;
      }
      else {
        uint64_t v7 = *(char **)a1;
      }
      uint64_t v8 = &v35;
      if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        uint64_t v8 = (std::string *)v35.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)buf = 136315906;
      *(void *)&uint8_t buf[4] = "prop";
      *(_WORD *)&buf[12] = 2080;
      *(void *)&buf[14] = v6;
      *(_WORD *)&unsigned char buf[22] = 2080;
      uint64_t v37 = v7;
      __int16 v38 = 2080;
      size_t v39 = v8;
      _os_log_error_impl(&dword_1C5767000, v5, OS_LOG_TYPE_ERROR, "%s: [systemlogs] set: Invalid key; domain='%s' key='%s' value='%s'",
        buf,
        0x2Au);
    }
    goto LABEL_46;
  }
  LOBYTE(v34) = -86;
  if (!util::convert<BOOL>(&v35, (BOOL *)&v34, 0))
  {
LABEL_46:
    uint64_t v25 = 0;
    goto LABEL_47;
  }
  uint64_t v21 = (const void *)*MEMORY[0x1E4F4C2F8];
  size_t v22 = strlen((const char *)*MEMORY[0x1E4F4C2F8]);
  if (v22 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v23 = v22;
  if (v22 >= 0x17)
  {
    uint64_t v32 = (v22 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v22 | 7) != 0x17) {
      uint64_t v32 = v22 | 7;
    }
    uint64_t v33 = v32 + 1;
    uint64_t v24 = operator new(v32 + 1);
    *(void *)&uint8_t buf[8] = v23;
    *(void *)&uint8_t buf[16] = v33 | 0x8000000000000000;
    *(void *)buf = v24;
  }
  else
  {
    buf[23] = v22;
    uint64_t v24 = buf;
    if (!v22) {
      goto LABEL_64;
    }
  }
  memmove(v24, v21, v23);
LABEL_64:
  v24[v23] = 0;
  uint64_t v29 = prop::file::set<BOOL>((const void **)buf, (uint64_t)a1, (unsigned __int8 *)&v34);
LABEL_65:
  uint64_t v25 = v29;
  if ((buf[23] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
LABEL_47:
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v35.__r_.__value_.__l.__data_);
  }
  return v25;
}

void sub_1C5883A4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a16 < 0) {
    operator delete(a11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t prop::profile::set(char *a1, char *a2)
{
  int v2 = a2;
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  memset(&v25, 170, sizeof(v25));
  if (a2[23] < 0)
  {
    std::string::__init_copy_ctor_external(&v25, *(const std::string::value_type **)a2, *((void *)a2 + 1));
    if (v2[23] < 0) {
      int v2 = *(char **)v2;
    }
    if (strcasecmp(v2, "default")) {
      goto LABEL_8;
    }
  }
  else
  {
    std::string v25 = *(std::string *)a2;
    if (strcasecmp(a2, "default")) {
      goto LABEL_8;
    }
  }
  if (!defaults::profile::get(a1, (uint64_t)&v25)) {
    goto LABEL_29;
  }
LABEL_8:
  if ((a1[23] & 0x80000000) == 0)
  {
    int v4 = a1;
    if (strcasecmp(a1, (const char *)*MEMORY[0x1E4F4C0E0])) {
      goto LABEL_10;
    }
LABEL_19:
    LOBYTE(v24) = -86;
    if (!util::convert<BOOL>(&v25, (BOOL *)&v24, 0)) {
      goto LABEL_29;
    }
    int v9 = (const void *)*MEMORY[0x1E4F4C1B8];
    size_t v10 = strlen((const char *)*MEMORY[0x1E4F4C1B8]);
    if (v10 > 0x7FFFFFFFFFFFFFF7) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    size_t v11 = v10;
    if (v10 >= 0x17)
    {
      uint64_t v19 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v10 | 7) != 0x17) {
        uint64_t v19 = v10 | 7;
      }
      uint64_t v20 = v19 + 1;
      size_t v12 = operator new(v19 + 1);
      *(void *)&uint8_t buf[8] = v11;
      *(void *)&uint8_t buf[16] = v20 | 0x8000000000000000;
      *(void *)buf = v12;
    }
    else
    {
      buf[23] = v10;
      size_t v12 = buf;
      if (!v10) {
        goto LABEL_37;
      }
    }
    memmove(v12, v9, v11);
LABEL_37:
    v12[v11] = 0;
    uint64_t v21 = prop::file::set<BOOL>((const void **)buf, (uint64_t)a1, (unsigned __int8 *)&v24);
    goto LABEL_43;
  }
  int v4 = *(const char **)a1;
  if (!strcasecmp(*(const char **)a1, (const char *)*MEMORY[0x1E4F4C0E0])) {
    goto LABEL_19;
  }
LABEL_10:
  if (strcasecmp(v4, (const char *)*MEMORY[0x1E4F4D220]))
  {
    size_t v5 = GetOsLogContext()[1];
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      uint64_t v6 = *MEMORY[0x1E4F4C1B8];
      if (a1[23] >= 0) {
        uint64_t v7 = a1;
      }
      else {
        uint64_t v7 = *(char **)a1;
      }
      uint64_t v8 = &v25;
      if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        uint64_t v8 = (std::string *)v25.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)buf = 136315906;
      *(void *)&uint8_t buf[4] = "prop";
      *(_WORD *)&buf[12] = 2080;
      *(void *)&buf[14] = v6;
      *(_WORD *)&unsigned char buf[22] = 2080;
      uint64_t v27 = v7;
      __int16 v28 = 2080;
      uint64_t v29 = v8;
      _os_log_error_impl(&dword_1C5767000, v5, OS_LOG_TYPE_ERROR, "%s: [profile] set: Invalid key; domain='%s' key='%s' value='%s'",
        buf,
        0x2Au);
    }
    goto LABEL_29;
  }
  int v24 = -1431655766;
  if (!util::convert<int>(&v25, &v24, 0))
  {
LABEL_29:
    uint64_t v17 = 0;
    goto LABEL_30;
  }
  size_t v13 = (const void *)*MEMORY[0x1E4F4C1B8];
  size_t v14 = strlen((const char *)*MEMORY[0x1E4F4C1B8]);
  if (v14 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v15 = v14;
  if (v14 >= 0x17)
  {
    uint64_t v22 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v14 | 7) != 0x17) {
      uint64_t v22 = v14 | 7;
    }
    uint64_t v23 = v22 + 1;
    unsigned int v16 = operator new(v22 + 1);
    *(void *)&uint8_t buf[8] = v15;
    *(void *)&uint8_t buf[16] = v23 | 0x8000000000000000;
    *(void *)buf = v16;
  }
  else
  {
    buf[23] = v14;
    unsigned int v16 = buf;
    if (!v14) {
      goto LABEL_42;
    }
  }
  memmove(v16, v13, v15);
LABEL_42:
  v16[v15] = 0;
  uint64_t v21 = prop::file::set<std::string>((const void **)buf, (uint64_t)a1, (uint64_t)&v25);
LABEL_43:
  uint64_t v17 = v21;
  if ((buf[23] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
LABEL_30:
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v25.__r_.__value_.__l.__data_);
  }
  return v17;
}

void sub_1C5883E44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a16 < 0)
  {
    operator delete(a11);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t prop::tailspin::set(uint64_t a1, char *a2)
{
  int v2 = a2;
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  memset(&v18, 170, sizeof(v18));
  if (a2[23] < 0)
  {
    std::string::__init_copy_ctor_external(&v18, *(const std::string::value_type **)a2, *((void *)a2 + 1));
    if (v2[23] < 0) {
      int v2 = *(char **)v2;
    }
    if (strcasecmp(v2, "default")) {
      goto LABEL_8;
    }
  }
  else
  {
    std::string v18 = *(std::string *)a2;
    if (strcasecmp(a2, "default")) {
      goto LABEL_8;
    }
  }
  if (!defaults::tailspin::get((const char *)a1, (uint64_t)&v18)) {
    goto LABEL_24;
  }
LABEL_8:
  if (*(char *)(a1 + 23) >= 0) {
    int v4 = (const char *)a1;
  }
  else {
    int v4 = *(const char **)a1;
  }
  if (strcasecmp(v4, (const char *)*MEMORY[0x1E4F4C0E0]))
  {
    size_t v5 = GetOsLogContext()[1];
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      uint64_t v6 = *MEMORY[0x1E4F4C210];
      if (*(char *)(a1 + 23) >= 0) {
        uint64_t v7 = (const char *)a1;
      }
      else {
        uint64_t v7 = *(const char **)a1;
      }
      uint64_t v8 = &v18;
      if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        uint64_t v8 = (std::string *)v18.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)buf = 136315906;
      *(void *)&uint8_t buf[4] = "prop";
      *(_WORD *)&buf[12] = 2080;
      *(void *)&buf[14] = v6;
      *(_WORD *)&unsigned char buf[22] = 2080;
      uint64_t v20 = v7;
      __int16 v21 = 2080;
      uint64_t v22 = v8;
      _os_log_error_impl(&dword_1C5767000, v5, OS_LOG_TYPE_ERROR, "%s: [tailspin] set: Invalid key; domain='%s' key='%s' value='%s'",
        buf,
        0x2Au);
    }
    goto LABEL_24;
  }
  char v17 = -86;
  if (!util::convert<BOOL>(&v18, (BOOL *)&v17, 0))
  {
LABEL_24:
    uint64_t v13 = 0;
    goto LABEL_25;
  }
  int v9 = (const void *)*MEMORY[0x1E4F4C210];
  size_t v10 = strlen((const char *)*MEMORY[0x1E4F4C210]);
  if (v10 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v11 = v10;
  if (v10 >= 0x17)
  {
    uint64_t v15 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v10 | 7) != 0x17) {
      uint64_t v15 = v10 | 7;
    }
    uint64_t v16 = v15 + 1;
    size_t v12 = operator new(v15 + 1);
    *(void *)&uint8_t buf[8] = v11;
    *(void *)&uint8_t buf[16] = v16 | 0x8000000000000000;
    *(void *)buf = v12;
    goto LABEL_31;
  }
  buf[23] = v10;
  size_t v12 = buf;
  if (v10) {
LABEL_31:
  }
    memmove(v12, v9, v11);
  v12[v11] = 0;
  uint64_t v13 = prop::file::set<BOOL>((const void **)buf, a1, (unsigned __int8 *)&v17);
  if ((buf[23] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
LABEL_25:
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v18.__r_.__value_.__l.__data_);
  }
  return v13;
}

void sub_1C5884148(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a16 < 0) {
    operator delete(a11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t prop::tracesettings::set(char *a1, uint64_t a2)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  memset(&v30, 170, sizeof(v30));
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v30, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v30 = *(std::string *)a2;
  }
  if ((a1[23] & 0x80000000) == 0)
  {
    if (strcasecmp(a1, (const char *)*MEMORY[0x1E4F4CAA0]))
    {
      if (strcasecmp(a1, (const char *)*MEMORY[0x1E4F4CB98]))
      {
        unint64_t v3 = a1;
        if (strcasecmp(a1, (const char *)*MEMORY[0x1E4F4C5C8])) {
          goto LABEL_8;
        }
LABEL_19:
        uint64_t v8 = (const void *)*MEMORY[0x1E4F4C208];
        size_t v9 = strlen((const char *)*MEMORY[0x1E4F4C208]);
        if (v9 > 0x7FFFFFFFFFFFFFF7) {
          std::string::__throw_length_error[abi:ne180100]();
        }
        size_t v10 = v9;
        if (v9 >= 0x17)
        {
          uint64_t v24 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v9 | 7) != 0x17) {
            uint64_t v24 = v9 | 7;
          }
          uint64_t v25 = v24 + 1;
          size_t v11 = operator new(v24 + 1);
          *(void *)&uint8_t buf[8] = v10;
          *(void *)&uint8_t buf[16] = v25 | 0x8000000000000000;
          *(void *)buf = v11;
        }
        else
        {
          buf[23] = v9;
          size_t v11 = buf;
          if (!v9) {
            goto LABEL_36;
          }
        }
LABEL_35:
        memmove(v11, v8, v10);
LABEL_36:
        v11[v10] = 0;
        uint64_t v19 = prop::file::set<std::string>((const void **)buf, (uint64_t)a1, (uint64_t)&v30);
        goto LABEL_57;
      }
LABEL_28:
      uint64_t v8 = (const void *)*MEMORY[0x1E4F4C208];
      size_t v16 = strlen((const char *)*MEMORY[0x1E4F4C208]);
      if (v16 > 0x7FFFFFFFFFFFFFF7) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      size_t v10 = v16;
      if (v16 >= 0x17)
      {
        uint64_t v17 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v16 | 7) != 0x17) {
          uint64_t v17 = v16 | 7;
        }
        uint64_t v18 = v17 + 1;
        size_t v11 = operator new(v17 + 1);
        *(void *)&uint8_t buf[8] = v10;
        *(void *)&uint8_t buf[16] = v18 | 0x8000000000000000;
        *(void *)buf = v11;
      }
      else
      {
        buf[23] = v16;
        size_t v11 = buf;
        if (!v16) {
          goto LABEL_36;
        }
      }
      goto LABEL_35;
    }
LABEL_23:
    int v29 = -1431655766;
    if (!util::convert<int>(&v30, &v29, 0)) {
      goto LABEL_46;
    }
    size_t v12 = (const void *)*MEMORY[0x1E4F4C208];
    size_t v13 = strlen((const char *)*MEMORY[0x1E4F4C208]);
    if (v13 > 0x7FFFFFFFFFFFFFF7) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    size_t v14 = v13;
    if (v13 >= 0x17)
    {
      uint64_t v20 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v13 | 7) != 0x17) {
        uint64_t v20 = v13 | 7;
      }
      uint64_t v21 = v20 + 1;
      uint64_t v15 = operator new(v20 + 1);
      *(void *)&uint8_t buf[8] = v14;
      *(void *)&uint8_t buf[16] = v21 | 0x8000000000000000;
      *(void *)buf = v15;
    }
    else
    {
      buf[23] = v13;
      uint64_t v15 = buf;
      if (!v13) {
        goto LABEL_56;
      }
    }
LABEL_55:
    memmove(v15, v12, v14);
LABEL_56:
    v15[v14] = 0;
    uint64_t v19 = prop::file::set<int>((const void **)buf, (uint64_t)a1, &v29);
LABEL_57:
    uint64_t v23 = v19;
    if ((buf[23] & 0x80000000) != 0)
    {
      operator delete(*(void **)buf);
      if ((SHIBYTE(v30.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        return v23;
      }
    }
    else if ((SHIBYTE(v30.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      return v23;
    }
LABEL_61:
    operator delete(v30.__r_.__value_.__l.__data_);
    return v23;
  }
  unint64_t v3 = *(const char **)a1;
  if (!strcasecmp(*(const char **)a1, (const char *)*MEMORY[0x1E4F4CAA0])) {
    goto LABEL_23;
  }
  if (!strcasecmp(v3, (const char *)*MEMORY[0x1E4F4CB98])) {
    goto LABEL_28;
  }
  if (!strcasecmp(v3, (const char *)*MEMORY[0x1E4F4C5C8])) {
    goto LABEL_19;
  }
LABEL_8:
  if (!strcasecmp(v3, (const char *)*MEMORY[0x1E4F4C938]))
  {
    int v29 = -1431655766;
    if (!util::convert<int>(&v30, &v29, 0)) {
      goto LABEL_46;
    }
    size_t v12 = (const void *)*MEMORY[0x1E4F4C208];
    size_t v22 = strlen((const char *)*MEMORY[0x1E4F4C208]);
    if (v22 > 0x7FFFFFFFFFFFFFF7) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    size_t v14 = v22;
    if (v22 >= 0x17)
    {
      uint64_t v26 = (v22 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v22 | 7) != 0x17) {
        uint64_t v26 = v22 | 7;
      }
      uint64_t v27 = v26 + 1;
      uint64_t v15 = operator new(v26 + 1);
      *(void *)&uint8_t buf[8] = v14;
      *(void *)&uint8_t buf[16] = v27 | 0x8000000000000000;
      *(void *)buf = v15;
    }
    else
    {
      buf[23] = v22;
      uint64_t v15 = buf;
      if (!v22) {
        goto LABEL_56;
      }
    }
    goto LABEL_55;
  }
  int v4 = GetOsLogContext()[1];
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    uint64_t v5 = *MEMORY[0x1E4F4C208];
    if (a1[23] >= 0) {
      uint64_t v6 = a1;
    }
    else {
      uint64_t v6 = *(char **)a1;
    }
    uint64_t v7 = &v30;
    if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      uint64_t v7 = (std::string *)v30.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)buf = 136315906;
    *(void *)&uint8_t buf[4] = "prop";
    *(_WORD *)&buf[12] = 2080;
    *(void *)&buf[14] = v5;
    *(_WORD *)&unsigned char buf[22] = 2080;
    uint64_t v32 = v6;
    __int16 v33 = 2080;
    unsigned int v34 = v7;
    _os_log_error_impl(&dword_1C5767000, v4, OS_LOG_TYPE_ERROR, "%s: [tracesettings] set: Invalid key; domain='%s' key='%s' value='%s'",
      buf,
      0x2Au);
  }
LABEL_46:
  uint64_t v23 = 0;
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_61;
  }
  return v23;
}

void sub_1C5884698(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a16 < 0)
  {
    operator delete(a11);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

BOOL prop::get_from_file(char *a1, char *a2, uint64_t a3)
{
  memset(&__p, 0, sizeof(__p));
  BOOL v6 = defaults::get(a1, a2, &__p);
  if (v6)
  {
    prop::file::get<std::string>((const void **)a1, (uint64_t)a2, (uint64_t)&__p, &v8);
    if (*(char *)(a3 + 23) < 0) {
      operator delete(*(void **)a3);
    }
    *(std::string *)a3 = v8;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return v6;
}

void sub_1C58847AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::string::basic_string[abi:ne180100]<0>(void *a1, char *__s)
{
  size_t v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v5 = v4;
  if (v4 >= 0x17)
  {
    uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v7 = v4 | 7;
    }
    uint64_t v8 = v7 + 1;
    BOOL v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((unsigned char *)a1 + 23) = v4;
    BOOL v6 = a1;
    if (!v4) {
      goto LABEL_9;
    }
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((unsigned char *)v6 + v5) = 0;
  return a1;
}

uint64_t prop::file::set<BOOL>(const void **a1, uint64_t a2, unsigned __int8 *a3)
{
  memset(__p, 170, 24);
  int v3 = *((char *)a1 + 23);
  if (v3 >= 0) {
    size_t v4 = *((unsigned __int8 *)a1 + 23);
  }
  else {
    size_t v4 = (size_t)a1[1];
  }
  unint64_t v5 = v4 + 1;
  memset(&__dst, 170, sizeof(__dst));
  if (v4 + 1 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v5 >= 0x17)
  {
    uint64_t v10 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17) {
      uint64_t v10 = v5 | 7;
    }
    uint64_t v11 = v10 + 1;
    p_dst = (std::string *)operator new(v10 + 1);
    __dst.__r_.__value_.__l.__size_ = v4 + 1;
    __dst.__r_.__value_.__r.__words[2] = v11 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  }
  else
  {
    memset(&__dst, 0, sizeof(__dst));
    p_dst = &__dst;
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v4 + 1;
    if (!v4) {
      goto LABEL_15;
    }
  }
  if (v3 >= 0) {
    size_t v12 = a1;
  }
  else {
    size_t v12 = *a1;
  }
  memmove(p_dst, v12, v4);
LABEL_15:
  *(_WORD *)((char *)&p_dst->__r_.__value_.__l.__data_ + v4) = 46;
  int v13 = *(char *)(a2 + 23);
  if (v13 >= 0) {
    size_t v14 = (const std::string::value_type *)a2;
  }
  else {
    size_t v14 = *(const std::string::value_type **)a2;
  }
  if (v13 >= 0) {
    std::string::size_type v15 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    std::string::size_type v15 = *(void *)(a2 + 8);
  }
  size_t v16 = std::string::append(&__dst, v14, v15);
  long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  __p[2] = (void *)v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p[2]) >= 0) {
    uint64_t v18 = (void **)((char *)__p + HIBYTE(__p[2]));
  }
  else {
    uint64_t v18 = (void **)((char *)__p[0] + (unint64_t)__p[1]);
  }
  if (SHIBYTE(__p[2]) >= 0) {
    uint64_t v19 = __p;
  }
  else {
    uint64_t v19 = (void **)__p[0];
  }
  for (; v19 != v18; uint64_t v19 = (void **)((char *)v19 + 1))
    *(unsigned char *)uint64_t v19 = __tolower(*(char *)v19);
  std::to_string(&__dst, *a3);
  long long v20 = *(_OWORD *)&__dst.__r_.__value_.__l.__data_;
  std::string::size_type v21 = __dst.__r_.__value_.__r.__words[2];
  pthread_mutex_lock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
  if (!qword_1EBBDD0C0)
  {
    uint64_t v23 = operator new(0x18uLL);
    MEMORY[0x1C8791170](v23, @"com.apple.AppleBasebandManager", *MEMORY[0x1E4F1D3F0]);
    size_t v22 = operator new(0x20uLL);
    void *v22 = &unk_1F20F3BE0;
    v22[1] = 0;
    v22[2] = 0;
    v22[3] = v23;
    uint64_t v24 = (std::__shared_weak_count *)off_1EBBDD0C8;
    qword_1EBBDD0C0 = (uint64_t)v23;
    off_1EBBDD0C8 = v22;
    if (!v24)
    {
      uint64_t v30 = (uint64_t)v23;
      uint64_t v31 = (std::__shared_weak_count *)v22;
      goto LABEL_38;
    }
    if (!atomic_fetch_add(&v24->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  LODWORD(v23) = qword_1EBBDD0C0;
  size_t v22 = off_1EBBDD0C8;
  uint64_t v30 = qword_1EBBDD0C0;
  uint64_t v31 = (std::__shared_weak_count *)off_1EBBDD0C8;
  if (off_1EBBDD0C8) {
LABEL_38:
  }
    atomic_fetch_add_explicit(v22 + 1, 1uLL, memory_order_relaxed);
  pthread_mutex_unlock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
  if ((v21 & 0x8000000000000000) == 0)
  {
    *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v20;
    v29.__r_.__value_.__r.__words[2] = v21;
LABEL_42:
    std::string __dst = v29;
    goto LABEL_43;
  }
  std::string::__init_copy_ctor_external(&v29, (const std::string::value_type *)v20, *((std::string::size_type *)&v20 + 1));
  if ((SHIBYTE(v29.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_42;
  }
  std::string::__init_copy_ctor_external(&__dst, v29.__r_.__value_.__l.__data_, v29.__r_.__value_.__l.__size_);
LABEL_43:
  if (SHIBYTE(__p[2]) >= 0) {
    uint64_t v25 = (char *)__p;
  }
  else {
    uint64_t v25 = (char *)__p[0];
  }
  uint64_t v26 = ctu::cf::plist_adapter::set<std::string>((int)v23, (uint64_t)&__dst, v25);
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v29.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_48;
    }
LABEL_51:
    operator delete(v29.__r_.__value_.__l.__data_);
    uint64_t v27 = v31;
    if (!v31) {
      goto LABEL_53;
    }
    goto LABEL_52;
  }
  operator delete(__dst.__r_.__value_.__l.__data_);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_51;
  }
LABEL_48:
  uint64_t v27 = v31;
  if (!v31)
  {
LABEL_53:
    if ((v21 & 0x8000000000000000) == 0) {
      goto LABEL_54;
    }
LABEL_57:
    operator delete((void *)v20);
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0) {
      return v26;
    }
LABEL_58:
    operator delete(__p[0]);
    return v26;
  }
LABEL_52:
  if (atomic_fetch_add(&v27->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_53;
  }
  ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
  std::__shared_weak_count::__release_weak(v27);
  if ((v21 & 0x8000000000000000) != 0) {
    goto LABEL_57;
  }
LABEL_54:
  if (SHIBYTE(__p[2]) < 0) {
    goto LABEL_58;
  }
  return v26;
}

void sub_1C5884C10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  if (v31 < 0) {
    operator delete(v30);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  _Unwind_Resume(a1);
}

uint64_t prop::file::set<int>(const void **a1, uint64_t a2, int *a3)
{
  memset(__p, 170, 24);
  int v3 = *((char *)a1 + 23);
  if (v3 >= 0) {
    size_t v4 = *((unsigned __int8 *)a1 + 23);
  }
  else {
    size_t v4 = (size_t)a1[1];
  }
  unint64_t v5 = v4 + 1;
  memset(&__dst, 170, sizeof(__dst));
  if (v4 + 1 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v5 >= 0x17)
  {
    uint64_t v10 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17) {
      uint64_t v10 = v5 | 7;
    }
    uint64_t v11 = v10 + 1;
    p_dst = (std::string *)operator new(v10 + 1);
    __dst.__r_.__value_.__l.__size_ = v4 + 1;
    __dst.__r_.__value_.__r.__words[2] = v11 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  }
  else
  {
    memset(&__dst, 0, sizeof(__dst));
    p_dst = &__dst;
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v4 + 1;
    if (!v4) {
      goto LABEL_15;
    }
  }
  if (v3 >= 0) {
    size_t v12 = a1;
  }
  else {
    size_t v12 = *a1;
  }
  memmove(p_dst, v12, v4);
LABEL_15:
  *(_WORD *)((char *)&p_dst->__r_.__value_.__l.__data_ + v4) = 46;
  int v13 = *(char *)(a2 + 23);
  if (v13 >= 0) {
    size_t v14 = (const std::string::value_type *)a2;
  }
  else {
    size_t v14 = *(const std::string::value_type **)a2;
  }
  if (v13 >= 0) {
    std::string::size_type v15 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    std::string::size_type v15 = *(void *)(a2 + 8);
  }
  size_t v16 = std::string::append(&__dst, v14, v15);
  long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  __p[2] = (void *)v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p[2]) >= 0) {
    uint64_t v18 = (void **)((char *)__p + HIBYTE(__p[2]));
  }
  else {
    uint64_t v18 = (void **)((char *)__p[0] + (unint64_t)__p[1]);
  }
  if (SHIBYTE(__p[2]) >= 0) {
    uint64_t v19 = __p;
  }
  else {
    uint64_t v19 = (void **)__p[0];
  }
  for (; v19 != v18; uint64_t v19 = (void **)((char *)v19 + 1))
    *(unsigned char *)uint64_t v19 = __tolower(*(char *)v19);
  std::to_string(&__dst, *a3);
  long long v20 = *(_OWORD *)&__dst.__r_.__value_.__l.__data_;
  std::string::size_type v21 = __dst.__r_.__value_.__r.__words[2];
  pthread_mutex_lock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
  if (!qword_1EBBDD0C0)
  {
    uint64_t v23 = operator new(0x18uLL);
    MEMORY[0x1C8791170](v23, @"com.apple.AppleBasebandManager", *MEMORY[0x1E4F1D3F0]);
    size_t v22 = operator new(0x20uLL);
    void *v22 = &unk_1F20F3BE0;
    v22[1] = 0;
    v22[2] = 0;
    v22[3] = v23;
    uint64_t v24 = (std::__shared_weak_count *)off_1EBBDD0C8;
    qword_1EBBDD0C0 = (uint64_t)v23;
    off_1EBBDD0C8 = v22;
    if (!v24)
    {
      uint64_t v30 = (uint64_t)v23;
      uint64_t v31 = (std::__shared_weak_count *)v22;
      goto LABEL_38;
    }
    if (!atomic_fetch_add(&v24->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  LODWORD(v23) = qword_1EBBDD0C0;
  size_t v22 = off_1EBBDD0C8;
  uint64_t v30 = qword_1EBBDD0C0;
  uint64_t v31 = (std::__shared_weak_count *)off_1EBBDD0C8;
  if (off_1EBBDD0C8) {
LABEL_38:
  }
    atomic_fetch_add_explicit(v22 + 1, 1uLL, memory_order_relaxed);
  pthread_mutex_unlock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
  if ((v21 & 0x8000000000000000) == 0)
  {
    *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v20;
    v29.__r_.__value_.__r.__words[2] = v21;
LABEL_42:
    std::string __dst = v29;
    goto LABEL_43;
  }
  std::string::__init_copy_ctor_external(&v29, (const std::string::value_type *)v20, *((std::string::size_type *)&v20 + 1));
  if ((SHIBYTE(v29.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_42;
  }
  std::string::__init_copy_ctor_external(&__dst, v29.__r_.__value_.__l.__data_, v29.__r_.__value_.__l.__size_);
LABEL_43:
  if (SHIBYTE(__p[2]) >= 0) {
    uint64_t v25 = (char *)__p;
  }
  else {
    uint64_t v25 = (char *)__p[0];
  }
  uint64_t v26 = ctu::cf::plist_adapter::set<std::string>((int)v23, (uint64_t)&__dst, v25);
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v29.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_48;
    }
LABEL_51:
    operator delete(v29.__r_.__value_.__l.__data_);
    uint64_t v27 = v31;
    if (!v31) {
      goto LABEL_53;
    }
    goto LABEL_52;
  }
  operator delete(__dst.__r_.__value_.__l.__data_);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_51;
  }
LABEL_48:
  uint64_t v27 = v31;
  if (!v31)
  {
LABEL_53:
    if ((v21 & 0x8000000000000000) == 0) {
      goto LABEL_54;
    }
LABEL_57:
    operator delete((void *)v20);
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0) {
      return v26;
    }
LABEL_58:
    operator delete(__p[0]);
    return v26;
  }
LABEL_52:
  if (atomic_fetch_add(&v27->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_53;
  }
  ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
  std::__shared_weak_count::__release_weak(v27);
  if ((v21 & 0x8000000000000000) != 0) {
    goto LABEL_57;
  }
LABEL_54:
  if (SHIBYTE(__p[2]) < 0) {
    goto LABEL_58;
  }
  return v26;
}

void sub_1C588507C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  if (v31 < 0) {
    operator delete(v30);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  _Unwind_Resume(a1);
}

uint64_t prop::file::set<unsigned int>(const void **a1, uint64_t a2, unsigned int *a3)
{
  memset(__p, 170, 24);
  int v3 = *((char *)a1 + 23);
  if (v3 >= 0) {
    size_t v4 = *((unsigned __int8 *)a1 + 23);
  }
  else {
    size_t v4 = (size_t)a1[1];
  }
  unint64_t v5 = v4 + 1;
  memset(&__dst, 170, sizeof(__dst));
  if (v4 + 1 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v5 >= 0x17)
  {
    uint64_t v10 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17) {
      uint64_t v10 = v5 | 7;
    }
    uint64_t v11 = v10 + 1;
    p_dst = (std::string *)operator new(v10 + 1);
    __dst.__r_.__value_.__l.__size_ = v4 + 1;
    __dst.__r_.__value_.__r.__words[2] = v11 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  }
  else
  {
    memset(&__dst, 0, sizeof(__dst));
    p_dst = &__dst;
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v4 + 1;
    if (!v4) {
      goto LABEL_15;
    }
  }
  if (v3 >= 0) {
    size_t v12 = a1;
  }
  else {
    size_t v12 = *a1;
  }
  memmove(p_dst, v12, v4);
LABEL_15:
  *(_WORD *)((char *)&p_dst->__r_.__value_.__l.__data_ + v4) = 46;
  int v13 = *(char *)(a2 + 23);
  if (v13 >= 0) {
    size_t v14 = (const std::string::value_type *)a2;
  }
  else {
    size_t v14 = *(const std::string::value_type **)a2;
  }
  if (v13 >= 0) {
    std::string::size_type v15 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    std::string::size_type v15 = *(void *)(a2 + 8);
  }
  size_t v16 = std::string::append(&__dst, v14, v15);
  long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  __p[2] = (void *)v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p[2]) >= 0) {
    uint64_t v18 = (void **)((char *)__p + HIBYTE(__p[2]));
  }
  else {
    uint64_t v18 = (void **)((char *)__p[0] + (unint64_t)__p[1]);
  }
  if (SHIBYTE(__p[2]) >= 0) {
    uint64_t v19 = __p;
  }
  else {
    uint64_t v19 = (void **)__p[0];
  }
  for (; v19 != v18; uint64_t v19 = (void **)((char *)v19 + 1))
    *(unsigned char *)uint64_t v19 = __tolower(*(char *)v19);
  std::to_string(&__dst, *a3);
  long long v20 = *(_OWORD *)&__dst.__r_.__value_.__l.__data_;
  std::string::size_type v21 = __dst.__r_.__value_.__r.__words[2];
  pthread_mutex_lock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
  if (!qword_1EBBDD0C0)
  {
    uint64_t v23 = operator new(0x18uLL);
    MEMORY[0x1C8791170](v23, @"com.apple.AppleBasebandManager", *MEMORY[0x1E4F1D3F0]);
    size_t v22 = operator new(0x20uLL);
    void *v22 = &unk_1F20F3BE0;
    v22[1] = 0;
    v22[2] = 0;
    v22[3] = v23;
    uint64_t v24 = (std::__shared_weak_count *)off_1EBBDD0C8;
    qword_1EBBDD0C0 = (uint64_t)v23;
    off_1EBBDD0C8 = v22;
    if (!v24)
    {
      uint64_t v30 = (uint64_t)v23;
      uint64_t v31 = (std::__shared_weak_count *)v22;
      goto LABEL_38;
    }
    if (!atomic_fetch_add(&v24->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  LODWORD(v23) = qword_1EBBDD0C0;
  size_t v22 = off_1EBBDD0C8;
  uint64_t v30 = qword_1EBBDD0C0;
  uint64_t v31 = (std::__shared_weak_count *)off_1EBBDD0C8;
  if (off_1EBBDD0C8) {
LABEL_38:
  }
    atomic_fetch_add_explicit(v22 + 1, 1uLL, memory_order_relaxed);
  pthread_mutex_unlock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
  if ((v21 & 0x8000000000000000) == 0)
  {
    *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v20;
    v29.__r_.__value_.__r.__words[2] = v21;
LABEL_42:
    std::string __dst = v29;
    goto LABEL_43;
  }
  std::string::__init_copy_ctor_external(&v29, (const std::string::value_type *)v20, *((std::string::size_type *)&v20 + 1));
  if ((SHIBYTE(v29.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_42;
  }
  std::string::__init_copy_ctor_external(&__dst, v29.__r_.__value_.__l.__data_, v29.__r_.__value_.__l.__size_);
LABEL_43:
  if (SHIBYTE(__p[2]) >= 0) {
    uint64_t v25 = (char *)__p;
  }
  else {
    uint64_t v25 = (char *)__p[0];
  }
  uint64_t v26 = ctu::cf::plist_adapter::set<std::string>((int)v23, (uint64_t)&__dst, v25);
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v29.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_48;
    }
LABEL_51:
    operator delete(v29.__r_.__value_.__l.__data_);
    uint64_t v27 = v31;
    if (!v31) {
      goto LABEL_53;
    }
    goto LABEL_52;
  }
  operator delete(__dst.__r_.__value_.__l.__data_);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_51;
  }
LABEL_48:
  uint64_t v27 = v31;
  if (!v31)
  {
LABEL_53:
    if ((v21 & 0x8000000000000000) == 0) {
      goto LABEL_54;
    }
LABEL_57:
    operator delete((void *)v20);
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0) {
      return v26;
    }
LABEL_58:
    operator delete(__p[0]);
    return v26;
  }
LABEL_52:
  if (atomic_fetch_add(&v27->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_53;
  }
  ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
  std::__shared_weak_count::__release_weak(v27);
  if ((v21 & 0x8000000000000000) != 0) {
    goto LABEL_57;
  }
LABEL_54:
  if (SHIBYTE(__p[2]) < 0) {
    goto LABEL_58;
  }
  return v26;
}

void sub_1C58854E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  if (v31 < 0) {
    operator delete(v30);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  _Unwind_Resume(a1);
}

uint64_t prop::file::set<std::string>(const void **a1, uint64_t a2, uint64_t a3)
{
  memset(v30, 170, 24);
  int v3 = *((char *)a1 + 23);
  if (v3 >= 0) {
    size_t v4 = *((unsigned __int8 *)a1 + 23);
  }
  else {
    size_t v4 = (size_t)a1[1];
  }
  unint64_t v5 = v4 + 1;
  memset(&__dst, 170, sizeof(__dst));
  if (v4 + 1 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v5 >= 0x17)
  {
    uint64_t v10 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17) {
      uint64_t v10 = v5 | 7;
    }
    uint64_t v11 = v10 + 1;
    p_dst = (std::string *)operator new(v10 + 1);
    __dst.__r_.__value_.__l.__size_ = v4 + 1;
    __dst.__r_.__value_.__r.__words[2] = v11 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  }
  else
  {
    memset(&__dst, 0, sizeof(__dst));
    p_dst = &__dst;
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v4 + 1;
    if (!v4) {
      goto LABEL_15;
    }
  }
  if (v3 >= 0) {
    size_t v12 = a1;
  }
  else {
    size_t v12 = *a1;
  }
  memmove(p_dst, v12, v4);
LABEL_15:
  *(_WORD *)((char *)&p_dst->__r_.__value_.__l.__data_ + v4) = 46;
  int v13 = *(char *)(a2 + 23);
  if (v13 >= 0) {
    size_t v14 = (const std::string::value_type *)a2;
  }
  else {
    size_t v14 = *(const std::string::value_type **)a2;
  }
  if (v13 >= 0) {
    std::string::size_type v15 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    std::string::size_type v15 = *(void *)(a2 + 8);
  }
  size_t v16 = std::string::append(&__dst, v14, v15);
  long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v30[2] = (void *)v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)uint64_t v30 = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v30[2]) >= 0) {
    uint64_t v18 = (void **)((char *)v30 + HIBYTE(v30[2]));
  }
  else {
    uint64_t v18 = (void **)((char *)v30[0] + (unint64_t)v30[1]);
  }
  if (SHIBYTE(v30[2]) >= 0) {
    uint64_t v19 = v30;
  }
  else {
    uint64_t v19 = (void **)v30[0];
  }
  for (; v19 != v18; uint64_t v19 = (void **)((char *)v19 + 1))
    *(unsigned char *)uint64_t v19 = __tolower(*(char *)v19);
  pthread_mutex_lock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
  if (!qword_1EBBDD0C0)
  {
    std::string::size_type v21 = operator new(0x18uLL);
    MEMORY[0x1C8791170](v21, @"com.apple.AppleBasebandManager", *MEMORY[0x1E4F1D3F0]);
    long long v20 = operator new(0x20uLL);
    void *v20 = &unk_1F20F3BE0;
    v20[1] = 0;
    v20[2] = 0;
    v20[3] = v21;
    size_t v22 = (std::__shared_weak_count *)off_1EBBDD0C8;
    qword_1EBBDD0C0 = (uint64_t)v21;
    off_1EBBDD0C8 = v20;
    if (!v22)
    {
      uint64_t v28 = (uint64_t)v21;
      std::string v29 = (std::__shared_weak_count *)v20;
      goto LABEL_38;
    }
    if (!atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  LODWORD(v21) = qword_1EBBDD0C0;
  long long v20 = off_1EBBDD0C8;
  uint64_t v28 = qword_1EBBDD0C0;
  std::string v29 = (std::__shared_weak_count *)off_1EBBDD0C8;
  if (off_1EBBDD0C8) {
LABEL_38:
  }
    atomic_fetch_add_explicit(v20 + 1, 1uLL, memory_order_relaxed);
  pthread_mutex_unlock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
  if (*(char *)(a3 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else {
    std::string __p = *(std::string *)a3;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__dst, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else {
    std::string __dst = __p;
  }
  if (SHIBYTE(v30[2]) >= 0) {
    uint64_t v23 = (char *)v30;
  }
  else {
    uint64_t v23 = (char *)v30[0];
  }
  uint64_t v24 = ctu::cf::plist_adapter::set<std::string>((int)v21, (uint64_t)&__dst, v23);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__dst.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_50:
      uint64_t v25 = v29;
      if (!v29) {
        goto LABEL_55;
      }
      goto LABEL_54;
    }
  }
  else if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_50;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  uint64_t v25 = v29;
  if (!v29) {
    goto LABEL_55;
  }
LABEL_54:
  if (!atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
    std::__shared_weak_count::__release_weak(v25);
    if ((SHIBYTE(v30[2]) & 0x80000000) == 0) {
      return v24;
    }
    goto LABEL_56;
  }
LABEL_55:
  if (SHIBYTE(v30[2]) < 0) {
LABEL_56:
  }
    operator delete(v30[0]);
  return v24;
}

void sub_1C5885938(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  if (a23 < 0) {
    operator delete(a18);
  }
  _Unwind_Resume(a1);
}

uint64_t util::convert<unsigned int>(const std::string *a1, _DWORD *a2)
{
  if ((SHIBYTE(a1->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    LODWORD(v4) = strcasecmp((const char *)a1, "false");
    if (!v4) {
      goto LABEL_29;
    }
    LODWORD(v4) = strcasecmp((const char *)a1, "off");
    if (!v4) {
      goto LABEL_29;
    }
    LODWORD(v4) = strcasecmp((const char *)a1, "no");
    if (!v4) {
      goto LABEL_29;
    }
    if (strcasecmp((const char *)a1, "true")
      && strcasecmp((const char *)a1, "on")
      && strcasecmp((const char *)a1, "yes")
      && strcasecmp((const char *)a1, "full")
      && strcasecmp((const char *)a1, "streaming"))
    {
      unint64_t v5 = (const char *)a1;
      if (!strcasecmp((const char *)a1, "lite")) {
        goto LABEL_30;
      }
      goto LABEL_21;
    }
LABEL_28:
    LODWORD(v4) = 1;
    goto LABEL_29;
  }
  unint64_t v5 = (const char *)a1->__r_.__value_.__r.__words[0];
  LODWORD(v4) = strcasecmp(a1->__r_.__value_.__l.__data_, "false");
  if (!v4) {
    goto LABEL_29;
  }
  LODWORD(v4) = strcasecmp(v5, "off");
  if (!v4) {
    goto LABEL_29;
  }
  LODWORD(v4) = strcasecmp(v5, "no");
  if (!v4) {
    goto LABEL_29;
  }
  if (!strcasecmp(v5, "true")
    || !strcasecmp(v5, "on")
    || !strcasecmp(v5, "yes")
    || !strcasecmp(v5, "full")
    || !strcasecmp(v5, "streaming"))
  {
    goto LABEL_28;
  }
  if (!strcasecmp(v5, "lite"))
  {
LABEL_30:
    LODWORD(v4) = 2;
    goto LABEL_29;
  }
LABEL_21:
  if (!strcasecmp(v5, "background")) {
    goto LABEL_30;
  }
  size_t __idx = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v4 = std::stol(a1, &__idx, 0);
  std::string::size_type size = HIBYTE(a1->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) != 0) {
    std::string::size_type size = a1->__r_.__value_.__l.__size_;
  }
  if (__idx != size || (v4 & 0x8000000000000000) != 0 || HIDWORD(v4)) {
    return 0;
  }
LABEL_29:
  *a2 = v4;
  return 1;
}

uint64_t sub_1C5885C1C(void *a1)
{
  return 0;
}

void prop::bbtrace::get<int>(char *a1, _DWORD *a2)
{
  memset(&__p, 0, sizeof(__p));
  if (prop::bbtrace::get(a1, (uint64_t)&__p)) {
    util::convert<int>(&__p, a2, 0);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1C5885CA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL prop::tracesettings::enabled(prop::tracesettings *this, const char *a2)
{
  BOOL v34 = 0;
  if ((prop::tracesettings *)*MEMORY[0x1E4F4C2F8] == this)
  {
    size_t v6 = strlen((const char *)this);
    if (v6 > 0x7FFFFFFFFFFFFFF7) {
LABEL_59:
    }
      std::string::__throw_length_error[abi:ne180100]();
    size_t v7 = v6;
    if (v6 >= 0x17)
    {
      uint64_t v17 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v6 | 7) != 0x17) {
        uint64_t v17 = v6 | 7;
      }
      uint64_t v18 = v17 + 1;
      p_dst = (void **)operator new(v17 + 1);
      size_t v32 = v7;
      unint64_t v33 = v18 | 0x8000000000000000;
      std::string __dst = p_dst;
    }
    else
    {
      HIBYTE(v33) = v6;
      p_dst = (void **)&__dst;
      if (!v6)
      {
LABEL_35:
        *((unsigned char *)p_dst + v7) = 0;
        uint64_t v19 = (const void *)*MEMORY[0x1E4F4C198];
        size_t v20 = strlen((const char *)*MEMORY[0x1E4F4C198]);
        if (v20 > 0x7FFFFFFFFFFFFFF7) {
          std::string::__throw_length_error[abi:ne180100]();
        }
        size_t v21 = v20;
        if (v20 >= 0x17)
        {
          uint64_t v23 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v20 | 7) != 0x17) {
            uint64_t v23 = v20 | 7;
          }
          uint64_t v24 = v23 + 1;
          size_t v22 = operator new(v23 + 1);
          size_t v29 = v21;
          unint64_t v30 = v24 | 0x8000000000000000;
          uint64_t v28 = v22;
        }
        else
        {
          HIBYTE(v30) = v20;
          size_t v22 = &v28;
          if (!v20)
          {
LABEL_43:
            *((unsigned char *)v22 + v21) = 0;
            memset(&__p, 0, sizeof(__p));
            int v25 = -1431655766;
            if (prop::get((char *)&__dst, (char *)&v28, (uint64_t)&__p))
            {
              int v35 = -1431655766;
              int v26 = util::convert<int>(&__p, &v35, 0);
              if (v26) {
                int v25 = v35;
              }
              else {
                int v25 = -1431655766;
              }
              if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
LABEL_51:
                if (SHIBYTE(v30) < 0)
                {
                  operator delete(v28);
                  if ((SHIBYTE(v33) & 0x80000000) == 0)
                  {
LABEL_53:
                    if (!v26) {
                      return v34;
                    }
                    return v25 != 0;
                  }
                }
                else if ((SHIBYTE(v33) & 0x80000000) == 0)
                {
                  goto LABEL_53;
                }
                operator delete(__dst);
                if (!v26) {
                  return v34;
                }
                return v25 != 0;
              }
            }
            else
            {
              int v26 = 0;
              if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                goto LABEL_51;
              }
            }
            operator delete(__p.__r_.__value_.__l.__data_);
            goto LABEL_51;
          }
        }
        memmove(v22, v19, v21);
        goto LABEL_43;
      }
    }
    memcpy(p_dst, this, v7);
    goto LABEL_35;
  }
  size_t v3 = strlen((const char *)this);
  if (v3 > 0x7FFFFFFFFFFFFFF7) {
    goto LABEL_59;
  }
  size_t v4 = v3;
  if (v3 >= 0x17)
  {
    uint64_t v9 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17) {
      uint64_t v9 = v3 | 7;
    }
    uint64_t v10 = v9 + 1;
    unint64_t v5 = (void **)operator new(v9 + 1);
    size_t v32 = v4;
    unint64_t v33 = v10 | 0x8000000000000000;
    std::string __dst = v5;
    goto LABEL_13;
  }
  HIBYTE(v33) = v3;
  unint64_t v5 = (void **)&__dst;
  if (v3) {
LABEL_13:
  }
    memcpy(v5, this, v4);
  *((unsigned char *)v5 + v4) = 0;
  uint64_t v11 = (const void *)*MEMORY[0x1E4F4C2D8];
  size_t v12 = strlen((const char *)*MEMORY[0x1E4F4C2D8]);
  if (v12 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v13 = v12;
  if (v12 >= 0x17)
  {
    uint64_t v15 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v12 | 7) != 0x17) {
      uint64_t v15 = v12 | 7;
    }
    uint64_t v16 = v15 + 1;
    size_t v14 = operator new(v15 + 1);
    size_t v29 = v13;
    unint64_t v30 = v16 | 0x8000000000000000;
    uint64_t v28 = v14;
    goto LABEL_21;
  }
  HIBYTE(v30) = v12;
  size_t v14 = &v28;
  if (v12) {
LABEL_21:
  }
    memmove(v14, v11, v13);
  *((unsigned char *)v14 + v13) = 0;
  memset(&__p, 0, sizeof(__p));
  if (prop::get((char *)&__dst, (char *)&v28, (uint64_t)&__p)) {
    util::convert<BOOL>(&__p, &v34, 0);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v30) & 0x80000000) == 0)
    {
LABEL_26:
      if (SHIBYTE(v33) < 0) {
        goto LABEL_30;
      }
      return v34;
    }
  }
  else if ((SHIBYTE(v30) & 0x80000000) == 0)
  {
    goto LABEL_26;
  }
  operator delete(v28);
  if (SHIBYTE(v33) < 0) {
LABEL_30:
  }
    operator delete(__dst);
  return v34;
}

void sub_1C5886030(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0)
  {
    operator delete(__p);
    if ((a14 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a20 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else if ((a14 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a9);
  if ((a20 & 0x80000000) == 0) {
LABEL_4:
  }
    _Unwind_Resume(exception_object);
LABEL_7:
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

BOOL prop::tracesettings::anyEnabled(prop::tracesettings *this, const char *a2)
{
  if (prop::tracesettings::enabled((prop::tracesettings *)*MEMORY[0x1E4F4C1F8], a2)
    || prop::tracesettings::enabled((prop::tracesettings *)*MEMORY[0x1E4F4C2F8], v2)
    || prop::tracesettings::enabled((prop::tracesettings *)*MEMORY[0x1E4F4C200], v3)
    || prop::tracesettings::enabled((prop::tracesettings *)*MEMORY[0x1E4F4D338], v4)
    || prop::tracesettings::enabled((prop::tracesettings *)*MEMORY[0x1E4F4C288], v5)
    || prop::tracesettings::enabled((prop::tracesettings *)*MEMORY[0x1E4F4C390], v6))
  {
    return 1;
  }
  uint64_t v9 = (prop::tracesettings *)*MEMORY[0x1E4F4C210];

  return prop::tracesettings::enabled(v9, v7);
}

BOOL prop::tracesettings::isContinuous(prop::tracesettings *this, const char *a2)
{
  if (prop::tracesettings::enabled((prop::tracesettings *)*MEMORY[0x1E4F4C1F8], a2)
    || prop::tracesettings::enabled((prop::tracesettings *)*MEMORY[0x1E4F4D338], v2))
  {
    return 1;
  }
  unint64_t v5 = (prop::tracesettings *)*MEMORY[0x1E4F4C288];

  return prop::tracesettings::enabled(v5, v3);
}

BOOL prop::tracesettings::mobileBasebandServicesEnabled(prop::tracesettings *this, const char *a2)
{
  if (prop::tracesettings::enabled((prop::tracesettings *)*MEMORY[0x1E4F4C1F8], a2)
    || prop::tracesettings::enabled((prop::tracesettings *)*MEMORY[0x1E4F4D338], v2))
  {
    return 1;
  }
  unint64_t v5 = (prop::tracesettings *)*MEMORY[0x1E4F4C288];

  return prop::tracesettings::enabled(v5, v3);
}

void prop::file::get<std::string>(const void **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, std::string *a4@<X8>)
{
  memset(v30, 170, sizeof(v30));
  int v5 = *((char *)a1 + 23);
  if (v5 >= 0) {
    size_t v6 = *((unsigned __int8 *)a1 + 23);
  }
  else {
    size_t v6 = (size_t)a1[1];
  }
  unint64_t v7 = v6 + 1;
  std::string __dst = (void **)0xAAAAAAAAAAAAAAAALL;
  size_t v29 = (std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL;
  if (v6 + 1 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v7 >= 0x17)
  {
    uint64_t v12 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17) {
      uint64_t v12 = v7 | 7;
    }
    uint64_t v13 = v12 + 1;
    p_dst = (void **)operator new(v12 + 1);
    size_t v29 = (std::__shared_weak_count *)(v6 + 1);
    v30[0] = v13 | 0x8000000000000000;
    std::string __dst = p_dst;
  }
  else
  {
    size_t v29 = 0;
    v30[0] = 0;
    std::string __dst = 0;
    p_dst = (void **)&__dst;
    HIBYTE(v30[0]) = v6 + 1;
    if (!v6) {
      goto LABEL_15;
    }
  }
  if (v5 >= 0) {
    size_t v14 = a1;
  }
  else {
    size_t v14 = *a1;
  }
  memmove(p_dst, v14, v6);
LABEL_15:
  *(_WORD *)((char *)p_dst + v6) = 46;
  int v15 = *(char *)(a2 + 23);
  if (v15 >= 0) {
    uint64_t v16 = (const std::string::value_type *)a2;
  }
  else {
    uint64_t v16 = *(const std::string::value_type **)a2;
  }
  if (v15 >= 0) {
    std::string::size_type v17 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    std::string::size_type v17 = *(void *)(a2 + 8);
  }
  uint64_t v18 = std::string::append((std::string *)&__dst, v16, v17);
  long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  v30[3] = *((void *)&v18->__r_.__value_.__l + 2);
  *(_OWORD *)&v30[1] = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v30[0]) < 0) {
    operator delete(__dst);
  }
  if (v30[3] >= 0) {
    size_t v20 = (char *)&v30[1] + HIBYTE(v30[3]);
  }
  else {
    size_t v20 = (char *)(v30[1] + v30[2]);
  }
  if (v30[3] >= 0) {
    size_t v21 = (char *)&v30[1];
  }
  else {
    size_t v21 = (char *)v30[1];
  }
  for (; v21 != v20; ++v21)
    char *v21 = __tolower(*v21);
  memset(a4, 170, sizeof(std::string));
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a4, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&a4->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    a4->__r_.__value_.__r.__words[2] = *(void *)(a3 + 16);
  }
  pthread_mutex_lock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
  if (!qword_1EBBDD0C0)
  {
    uint64_t v23 = (void **)operator new(0x18uLL);
    MEMORY[0x1C8791170](v23, @"com.apple.AppleBasebandManager", *MEMORY[0x1E4F1D3F0]);
    size_t v22 = operator new(0x20uLL);
    void *v22 = &unk_1F20F3BE0;
    v22[1] = 0;
    v22[2] = 0;
    v22[3] = v23;
    uint64_t v24 = (std::__shared_weak_count *)off_1EBBDD0C8;
    qword_1EBBDD0C0 = (uint64_t)v23;
    off_1EBBDD0C8 = v22;
    if (!v24)
    {
      std::string __dst = v23;
      size_t v29 = (std::__shared_weak_count *)v22;
      goto LABEL_41;
    }
    if (!atomic_fetch_add(&v24->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  uint64_t v23 = (void **)qword_1EBBDD0C0;
  size_t v22 = off_1EBBDD0C8;
  std::string __dst = (void **)qword_1EBBDD0C0;
  size_t v29 = (std::__shared_weak_count *)off_1EBBDD0C8;
  if (off_1EBBDD0C8) {
LABEL_41:
  }
    atomic_fetch_add_explicit(v22 + 1, 1uLL, memory_order_relaxed);
  pthread_mutex_unlock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
  if (v30[3] >= 0) {
    int v25 = (const char *)&v30[1];
  }
  else {
    int v25 = (const char *)v30[1];
  }
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v31, v25);
  int v26 = (const void *)(*(uint64_t (**)(void **, uint64_t))*v23)(v23, v31);
  if (v26)
  {
    ctu::cf::assign();
    CFRelease(v26);
  }
  MEMORY[0x1C8791110](&v31);
  uint64_t v27 = v29;
  if (!v29 || atomic_fetch_add(&v29->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if ((SHIBYTE(v30[3]) & 0x80000000) == 0) {
      return;
    }
    goto LABEL_50;
  }
  ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
  std::__shared_weak_count::__release_weak(v27);
  if (SHIBYTE(v30[3]) < 0) {
LABEL_50:
  }
    operator delete((void *)v30[1]);
}

uint64_t __cxx_global_var_init_15()
{
  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<ABMProperties>::~PthreadMutexGuardPolicy, &ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance, &dword_1C5767000);
  }
  return result;
}

void HealthModule::create(uint64_t *a1@<X0>, void *a2@<X8>)
{
  *a2 = 0xAAAAAAAAAAAAAAAALL;
  a2[1] = 0xAAAAAAAAAAAAAAAALL;
  size_t v4 = operator new(0xC0uLL);
  int v5 = (std::__shared_weak_count *)a1[1];
  uint64_t v24 = *a1;
  int v25 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  size_t v6 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  uint64_t v7 = off_1EBBDD2A0;
  if (!off_1EBBDD2A0)
  {
    CommandDriverFactory::create_default_global((uint64_t *)&v28, v6);
    long long v8 = v28;
    long long v28 = 0uLL;
    uint64_t v9 = (std::__shared_weak_count *)*(&off_1EBBDD2A0 + 1);
    off_1EBBDD2A0 = v8;
    if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
    uint64_t v10 = (std::__shared_weak_count *)*((void *)&v28 + 1);
    if (*((void *)&v28 + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v28 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
    uint64_t v7 = off_1EBBDD2A0;
  }
  uint64_t v11 = (std::__shared_weak_count *)*(&off_1EBBDD2A0 + 1);
  if (*(&off_1EBBDD2A0 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDD2A0 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(dispatch_object_t *__return_ptr, uint64_t))(*(void *)v7 + 24))(&object, v7);
  HealthModule::HealthModule((uint64_t)v4, &v24, &object);
  *a2 = v4;
  a2[1] = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v12 = (std::__shared_weak_count *)operator new(0x20uLL);
  v12->__shared_owners_ = 0;
  p_shared_owners = &v12->__shared_owners_;
  v12->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20F93C8;
  v12->__shared_weak_owners_ = 0;
  v12[1].__vftable = (std::__shared_weak_count_vtbl *)v4;
  a2[1] = v12;
  size_t v14 = (std::__shared_weak_count *)*((void *)v4 + 16);
  if (v14)
  {
    if (v14->__shared_owners_ == -1)
    {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v12->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      *((void *)v4 + 15) = v4;
      *((void *)v4 + 16) = v12;
      std::__shared_weak_count::__release_weak(v14);
      if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL))
      {
LABEL_16:
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
        int v15 = (void *)*a2;
        if (!*(void *)(*a2 + 104)) {
          goto LABEL_30;
        }
        goto LABEL_20;
      }
    }
  }
  else
  {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v12->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    *((void *)v4 + 15) = v4;
    *((void *)v4 + 16) = v12;
    if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_16;
    }
  }
  int v15 = (void *)*a2;
  if (!*(void *)(*a2 + 104)) {
    goto LABEL_30;
  }
LABEL_20:
  uint64_t v16 = (std::__shared_weak_count *)v15[16];
  if (!v16 || (v17 = v15[15], (uint64_t v18 = std::__shared_weak_count::lock(v16)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  long long v19 = v18;
  *(void *)&long long v28 = v17;
  *((void *)&v28 + 1) = v18;
  ctu::LoggerCommonBase::getLogDomain((ctu::LoggerCommonBase *)(v15 + 7));
  uint64_t v20 = v17 + 48;
  if (!v17) {
    uint64_t v20 = 0;
  }
  uint64_t v26 = v20;
  uint64_t v27 = v19;
  long long v28 = 0uLL;
  ctu::TrackedLogger::registerLoggerToServer();
  size_t v21 = v27;
  if (v27 && !atomic_fetch_add(&v27->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v21);
  }
  size_t v22 = (std::__shared_weak_count *)*((void *)&v28 + 1);
  if (*((void *)&v28 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v28 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
  }
LABEL_30:
  if (object) {
    dispatch_release(object);
  }
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  if (v25) {
    std::__shared_weak_count::__release_weak(v25);
  }
}

void sub_1C5886A34(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, dispatch_object_t object, uint64_t a13, uint64_t a14, char a15, uint64_t a16, char a17)
{
}

void sub_1C5886A9C()
{
}

void sub_1C5886AAC()
{
}

void sub_1C5886AB8()
{
}

void sub_1C5886AC8()
{
}

unsigned char *HealthModule::getShutdownStages@<X0>(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  size_t v3 = operator new(1uLL);
  *a1 = v3;
  *size_t v3 = 3;
  uint64_t result = v3 + 1;
  a1[1] = result;
  a1[2] = result;
  return result;
}

void HealthModule::initialize(void *a1, dispatch_object_t *a2)
{
  uint64_t v6 = a1[15];
  size_t v4 = (std::__shared_weak_count *)a1[16];
  int v5 = a1 + 15;
  if (!v4 || (long long v8 = std::__shared_weak_count::lock(v4)) == 0) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v9 = v8;
  atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
  }
  uint64_t v10 = *a2;
  size_t v21 = a1;
  dispatch_group_t group = v10;
  if (v10)
  {
    dispatch_retain(v10);
    dispatch_group_enter(v10);
  }
  uint64_t v23 = v6;
  uint64_t v24 = v9;
  atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI12HealthModuleE20execute_wrapped_syncIZNS1_10initializeEN8dispatch13group_sessionEE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  block[3] = &__block_descriptor_tmp_30;
  block[4] = v5;
  void block[5] = &v21;
  uint64_t v11 = a1[17];
  if (!a1[18])
  {
    dispatch_sync(v11, block);
    uint64_t v12 = v24;
    if (!v24) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
  dispatch_async_and_wait(v11, block);
  uint64_t v12 = v24;
  if (v24) {
LABEL_9:
  }
    std::__shared_weak_count::__release_weak(v12);
LABEL_10:
  if (group)
  {
    dispatch_group_leave(group);
    if (group) {
      dispatch_release(group);
    }
  }
  uint64_t v13 = *a2;
  if (*a2)
  {
    dispatch_retain(*a2);
    dispatch_group_enter(v13);
  }
  atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  size_t v14 = (std::__shared_weak_count *)a1[16];
  if (!v14 || (v15 = a1[15], (uint64_t v16 = std::__shared_weak_count::lock(v14)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v17 = v16;
  uint64_t v18 = operator new(0x20uLL);
  *uint64_t v18 = a1;
  v18[1] = v13;
  void v18[2] = v6;
  void v18[3] = v9;
  long long v19 = a1[17];
  atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v20 = operator new(0x18uLL);
  void *v20 = v18;
  v20[1] = v15;
  v20[2] = v17;
  dispatch_async_f(v19, v20, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<HealthModule>::execute_wrapped<HealthModule::initialize(dispatch::group_session)::$_1>(HealthModule::initialize(dispatch::group_session)::$_1 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<HealthModule::initialize(dispatch::group_session)::$_1,dispatch_queue_s *::default_delete<HealthModule::initialize(dispatch::group_session)::$_1>>)::{lambda(void *)#1}::__invoke);
  if (!atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  std::__shared_weak_count::__release_weak(v9);
}

void HealthModule::shutdown(void *a1, char a2, NSObject **a3)
{
  v13[0] = MEMORY[0x1E4F143A8];
  v13[1] = 1174405120;
  v13[2] = ___ZN12HealthModule8shutdownE13ShutdownStageN8dispatch13group_sessionE_block_invoke;
  v13[3] = &__block_descriptor_tmp_36;
  int v5 = *a3;
  v13[4] = a1;
  dispatch_group_t group = v5;
  if (v5)
  {
    dispatch_retain(v5);
    dispatch_group_enter(group);
  }
  char v15 = a2;
  uint64_t v6 = (std::__shared_weak_count *)a1[16];
  if (!v6 || (uint64_t v7 = a1[15], (v8 = std::__shared_weak_count::lock(v6)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v9 = v8;
  uint64_t v10 = a1[17];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 1174405120;
  block[2] = ___ZNK3ctu20SharedSynchronizableI12HealthModuleE15execute_wrappedEU13block_pointerFvvE_block_invoke;
  block[3] = &unk_1F20F9500;
  void block[5] = v7;
  uint64_t v17 = v9;
  p_shared_owners = &v9->__shared_owners_;
  atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  block[4] = v13;
  dispatch_async(v10, block);
  uint64_t v12 = v17;
  if (!v17 || atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
  ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
  std::__shared_weak_count::__release_weak(v12);
  if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL))
  {
LABEL_8:
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
LABEL_9:
  if (group)
  {
    dispatch_group_leave(group);
    if (group) {
      dispatch_release(group);
    }
  }
}

void ___ZN12HealthModule8shutdownE13ShutdownStageN8dispatch13group_sessionE_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  int v2 = *(std::__shared_weak_count **)(v1 + 160);
  *(void *)(v1 + 152) = 0;
  *(void *)(v1 + 160) = 0;
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
}

const char *HealthModule::getName(HealthModule *this)
{
  return "health.mod";
}

void HealthModule::~HealthModule(HealthModule *this)
{
  *(void *)this = &unk_1F20F91F8;
  *((void *)this + 6) = &unk_1F20F9268;
  int v2 = *((void *)this + 11);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v13 = 0;
    _os_log_impl(&dword_1C5767000, v2, OS_LOG_TYPE_DEFAULT, "#I Gone!", v13, 2u);
  }
  uint64_t v3 = *((void *)this + 23);
  *((void *)this + 23) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  size_t v4 = (std::__shared_weak_count *)*((void *)this + 22);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    int v5 = (std::__shared_weak_count *)*((void *)this + 20);
    if (!v5) {
      goto LABEL_11;
    }
  }
  else
  {
    int v5 = (std::__shared_weak_count *)*((void *)this + 20);
    if (!v5) {
      goto LABEL_11;
    }
  }
  if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  *((void *)this + 6) = &unk_1F20F9388;
  MEMORY[0x1C8790F40]((char *)this + 56);
  uint64_t v6 = *((void *)this + 18);
  if (v6) {
    dispatch_release(v6);
  }
  uint64_t v7 = *((void *)this + 17);
  if (v7) {
    dispatch_release(v7);
  }
  long long v8 = (std::__shared_weak_count *)*((void *)this + 16);
  if (v8) {
    std::__shared_weak_count::__release_weak(v8);
  }
  *(void *)this = &unk_1F20FC1C8;
  uint64_t v9 = *((void *)this + 3);
  if (v9)
  {
    uint64_t v10 = *((void *)this + 4);
    uint64_t v11 = (void *)*((void *)this + 3);
    if (v10 != v9)
    {
      do
      {
        if (*(char *)(v10 - 1) < 0) {
          operator delete(*(void **)(v10 - 24));
        }
        v10 -= 24;
      }
      while (v10 != v9);
      uint64_t v11 = (void *)*((void *)this + 3);
    }
    *((void *)this + 4) = v9;
    operator delete(v11);
  }
  uint64_t v12 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v12) {
    std::__shared_weak_count::__release_weak(v12);
  }
}

{
  void *v1;
  uint64_t vars8;

  HealthModule::~HealthModule(this);

  operator delete(v1);
}

void *ctu::SharedLoggable<HealthModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(void *a1)
{
  *a1 = &unk_1F20F9388;
  MEMORY[0x1C8790F40](a1 + 1);
  int v2 = a1[12];
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = a1[11];
  if (v3) {
    dispatch_release(v3);
  }
  size_t v4 = (std::__shared_weak_count *)a1[10];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = &unk_1F20F9388;
  MEMORY[0x1C8790F40](a1 + 1);
  int v2 = a1[12];
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = a1[11];
  if (v3) {
    dispatch_release(v3);
  }
  size_t v4 = (std::__shared_weak_count *)a1[10];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

void non-virtual thunk to'HealthModule::~HealthModule(HealthModule *this)
{
}

{
  void *v1;
  uint64_t vars8;

  HealthModule::~HealthModule((HealthModule *)((char *)this - 48));

  operator delete(v1);
}

uint64_t HealthModule::HealthModule(uint64_t a1, uint64_t *a2, NSObject **a3)
{
  uint64_t v5 = *a2;
  uint64_t v6 = (std::__shared_weak_count *)a2[1];
  if (v6)
  {
    atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  *(void *)a1 = &unk_1F20FC1C8;
  *(void *)(a1 + 8) = v5;
  *(void *)(a1 + 16) = v6;
  if (v6)
  {
    atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    *(void *)(a1 + 24) = 0;
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = 0;
    std::__shared_weak_count::__release_weak(v6);
    *(void *)a1 = &unk_1F20F0BE0;
    std::__shared_weak_count::__release_weak(v6);
  }
  else
  {
    *(void *)(a1 + 24) = 0;
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = 0;
    *(void *)a1 = &unk_1F20F0BE0;
  }
  *(void *)a1 = &unk_1F20F91F8;
  *(void *)(a1 + 48) = &unk_1F20F9268;
  uint64_t v7 = *a3;
  if (v7)
  {
    dispatch_retain(v7);
    long long v8 = *(uint64_t (***)(void))a1;
  }
  else
  {
    long long v8 = (uint64_t (**)(void))&unk_1F20F91F8;
  }
  uint64_t v9 = (const char *)v8[2](a1);
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v23, "com.apple.telephony.abm", v9);
  GetABMLogServer(&v21);
  if (v7) {
    dispatch_retain(v7);
  }
  initially_inactive = dispatch_queue_attr_make_initially_inactive(0);
  uint64_t v11 = dispatch_queue_create_with_target_V2("health.mod", initially_inactive, v7);
  dispatch_set_qos_class_floor(v11, QOS_CLASS_BACKGROUND, 0);
  dispatch_activate(v11);
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = v11;
  if (v11) {
    dispatch_retain(v11);
  }
  *(void *)(a1 + 144) = v7;
  if (v7) {
    dispatch_retain(v7);
  }
  if (v11) {
    dispatch_release(v11);
  }
  if (v7) {
    dispatch_release(v7);
  }
  *(void *)(a1 + 48) = &unk_1F20F9388;
  ctu::OsLogContext::OsLogContext();
  ctu::OsLogContext::OsLogContext();
  ctu::LoggerCommonBase::LoggerCommonBase();
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&v25);
  *(void *)(a1 + 56) = &unk_1F20F0070;
  uint64_t v12 = v22;
  *(void *)(a1 + 104) = v21;
  *(void *)(a1 + 112) = v12;
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v24);
  *(void *)(a1 + 48) = &unk_1F20F9540;
  uint64_t v13 = v22;
  if (v22 && !atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v23);
  if (v7) {
    dispatch_release(v7);
  }
  *(void *)a1 = &unk_1F20F91F8;
  *(void *)(a1 + 48) = &unk_1F20F9268;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(void *)(a1 + 184) = 0;
  GetABMLogServer(&v19);
  ctu::DispatchTimerService::create();
  long long v14 = v25;
  long long v25 = 0uLL;
  char v15 = *(std::__shared_weak_count **)(a1 + 176);
  *(_OWORD *)(a1 + 168) = v14;
  if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  uint64_t v16 = (std::__shared_weak_count *)*((void *)&v25 + 1);
  if (*((void *)&v25 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v25 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
  }
  uint64_t v17 = v20;
  if (v20 && !atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  return a1;
}

void sub_1C5887740(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  uint64_t v14 = *((void *)v9 + 23);
  *((void *)v9 + 23) = 0;
  if (v14) {
    (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
  }
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v12);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v11);
  ctu::SharedLoggable<HealthModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(v10);
  Service::~Service(v9);
  _Unwind_Resume(a1);
}

void sub_1C58877AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va3, a3);
  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v10 = va_arg(va2, void);
  uint64_t v12 = va_arg(va2, void);
  va_copy(va3, va2);
  uint64_t v13 = va_arg(va3, void);
  uint64_t v15 = va_arg(va3, void);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)va3);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)va2);
  ctu::SharedSynchronizable<DataStallDetection>::~SharedSynchronizable(v5);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)va1);
  if (v4) {
    dispatch_release(v4);
  }
  Service::~Service(v3);
  _Unwind_Resume(a1);
}

void HealthModule::getBasebandFWVersion_sync(void *a1, void **a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[16];
  if (!v3 || (v5 = a1[15], (uint64_t v6 = std::__shared_weak_count::lock(v3)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v7 = v6;
  p_shared_weak_owners = &v6->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v7);
  }
  size_t v32 = (void *)0xAAAAAAAAAAAAAAAALL;
  dispatch_object_t v33 = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN12HealthModule25getBasebandFWVersion_syncEN8dispatch5blockIU13block_pointerFvNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEEE_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_6_7;
  aBlock[4] = a1;
  aBlock[5] = v5;
  unint64_t v30 = v7;
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  uint64_t v9 = *a2;
  if (*a2) {
    uint64_t v9 = _Block_copy(v9);
  }
  uint64_t v31 = v9;
  uint64_t v10 = _Block_copy(aBlock);
  uint64_t v11 = a1[17];
  if (v11) {
    dispatch_retain(v11);
  }
  size_t v32 = v10;
  dispatch_object_t v33 = v11;
  unint64_t v27 = 0xAAAAAAAAAAAAAAAALL;
  long long v28 = (std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL;
  uint64_t v12 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  uint64_t v13 = off_1EBBDD2A0;
  if (!off_1EBBDD2A0)
  {
    CommandDriverFactory::create_default_global((uint64_t *)&v34, v12);
    long long v14 = v34;
    long long v34 = 0uLL;
    uint64_t v15 = (std::__shared_weak_count *)*(&off_1EBBDD2A0 + 1);
    off_1EBBDD2A0 = v14;
    if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
    uint64_t v16 = (std::__shared_weak_count *)*((void *)&v34 + 1);
    if (*((void *)&v34 + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v34 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
    uint64_t v13 = off_1EBBDD2A0;
  }
  uint64_t v17 = (std::__shared_weak_count *)*(&off_1EBBDD2A0 + 1);
  uint64_t v23 = v13;
  uint64_t v24 = *(&off_1EBBDD2A0 + 1);
  if (*(&off_1EBBDD2A0 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDD2A0 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(unint64_t *__return_ptr, uint64_t))(*(void *)v13 + 16))(&v25, v13);
  unint64_t v27 = 0;
  long long v28 = 0;
  if (v26)
  {
    long long v28 = std::__shared_weak_count::lock(v26);
    if (v28) {
      unint64_t v27 = v25;
    }
    if (v26) {
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  if (v17 && !atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
    unint64_t v18 = v27;
    if (!v27) {
      goto LABEL_35;
    }
  }
  else
  {
    unint64_t v18 = v27;
    if (!v27) {
      goto LABEL_35;
    }
  }
  uint64_t v19 = v32;
  if (v32) {
    uint64_t v19 = _Block_copy(v32);
  }
  uint64_t v21 = v19;
  dispatch_object_t object = v33;
  if (v33) {
    dispatch_retain(v33);
  }
  (*(void (**)(unint64_t, void **))(*(void *)v18 + 112))(v18, &v21);
  if (object) {
    dispatch_release(object);
  }
  if (v21) {
    _Block_release(v21);
  }
LABEL_35:
  uint64_t v20 = v28;
  if (v28 && !atomic_fetch_add(&v28->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
  if (v33) {
    dispatch_release(v33);
  }
  if (v32) {
    _Block_release(v32);
  }
  if (v31) {
    _Block_release(v31);
  }
  if (v30) {
    std::__shared_weak_count::__release_weak(v30);
  }
  std::__shared_weak_count::__release_weak(v7);
}

void sub_1C5887BB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,std::__shared_weak_count *a23,void *aBlock)
{
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>::~callback(v25 - 80);
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (a23) {
    std::__shared_weak_count::__release_weak(a23);
  }
  std::__shared_weak_count::__release_weak(v24);
  _Unwind_Resume(a1);
}

void ___ZN12HealthModule25getBasebandFWVersion_syncEN8dispatch5blockIU13block_pointerFvNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEEE_block_invoke(void *a1, std::string::size_type *a2, const __CFDictionary **a3)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  size_t v4 = (std::__shared_weak_count *)a1[6];
  if (!v4) {
    return;
  }
  uint64_t v7 = a1[4];
  long long v8 = std::__shared_weak_count::lock(v4);
  uint64_t v21 = v8;
  if (!v8) {
    return;
  }
  uint64_t v9 = (std::string::value_type *)0xAAAAAAAAAAAAAA00;
  std::string::size_type v10 = 0xAAAAAAAAAAAAAALL;
  if (a1[5])
  {
    std::string::size_type v11 = *a2;
    if (v11) {
      uint64_t v12 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
    }
    else {
      uint64_t v12 = 0;
    }
    if (v12)
    {
      uint64_t v13 = *(NSObject **)(v7 + 88);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        LODWORD(v22.__r_.__value_.__l.__data_) = 138412290;
        *(std::string::size_type *)((char *)v22.__r_.__value_.__r.__words + 4) = v11;
        _os_log_error_impl(&dword_1C5767000, v13, OS_LOG_TYPE_ERROR, "%@", (uint8_t *)&v22, 0xCu);
      }
    }
    else
    {
      CFDictionaryRef v17 = *a3;
      if (*a3) {
        unint64_t v18 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
      }
      else {
        unint64_t v18 = 0;
      }
      if (v18)
      {
        v19[0] = 0xAAAAAAAAAAAAAAAALL;
        v19[1] = 0xAAAAAAAAAAAAAAAALL;
        ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v19, v17);
        ctu::cf::map_adapter::getString();
        std::string::size_type size = v22.__r_.__value_.__l.__size_;
        uint64_t v9 = (std::string::value_type *)v22.__r_.__value_.__r.__words[0];
        std::string::size_type v10 = v22.__r_.__value_.__r.__words[2];
        *((unsigned char *)&v22.__r_.__value_.__s + 23) = 0;
        v22.__r_.__value_.__s.__data_[0] = 0;
        MEMORY[0x1C8791160](v19);
        uint64_t v14 = a1[7];
        if ((v10 & 0x8000000000000000) != 0)
        {
          std::string::__init_copy_ctor_external(&v22, v9, size);
          goto LABEL_12;
        }
LABEL_11:
        v22.__r_.__value_.__r.__words[0] = (std::string::size_type)v9;
        v22.__r_.__value_.__l.__size_ = size;
        v22.__r_.__value_.__r.__words[2] = v10;
LABEL_12:
        (*(void (**)(uint64_t, std::string *))(v14 + 16))(v14, &v22);
        if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v22.__r_.__value_.__l.__data_);
          uint64_t v16 = v21;
          if (!v21) {
            goto LABEL_25;
          }
        }
        else
        {
          uint64_t v16 = v21;
          if (!v21)
          {
LABEL_25:
            if ((v10 & 0x8000000000000000) == 0) {
              return;
            }
            goto LABEL_26;
          }
        }
        if (atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
          goto LABEL_25;
        }
        goto LABEL_28;
      }
    }
    uint64_t v14 = a1[7];
    std::string::size_type size = 0xAAAAAAAAAAAAAAAALL;
    goto LABEL_11;
  }
  uint64_t v16 = v8;
  if (atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_25;
  }
LABEL_28:
  ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
  std::__shared_weak_count::__release_weak(v16);
  if ((v10 & 0x8000000000000000) != 0) {
LABEL_26:
  }
    operator delete(v9);
}

void sub_1C5887EB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  operator delete(v7);
  _Unwind_Resume(a1);
}

void sub_1C5887ECC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, char a18)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  MEMORY[0x1C8791160](&a16);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  _Unwind_Resume(a1);
}

void sub_1C5887F00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  if (v23 < 0) {
    operator delete(v22);
  }
  _Unwind_Resume(a1);
}

void *__copy_helper_block_e8_40c37_ZTSNSt3__18weak_ptrI12HealthModuleEE56c106_ZTSN8dispatch5blockIU13block_pointerFvNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEEE(void *a1, void *a2)
{
  uint64_t v3 = a2[6];
  a1[5] = a2[5];
  a1[6] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  uint64_t result = (void *)a2[7];
  if (result) {
    uint64_t result = _Block_copy(result);
  }
  a1[7] = result;
  return result;
}

void __destroy_helper_block_e8_40c37_ZTSNSt3__18weak_ptrI12HealthModuleEE56c106_ZTSN8dispatch5blockIU13block_pointerFvNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEEE(uint64_t a1)
{
  int v2 = *(const void **)(a1 + 56);
  if (v2) {
    _Block_release(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3)
  {
    std::__shared_weak_count::__release_weak(v3);
  }
}

uint64_t HealthModule::getFailureCountInHealthEventDB_sync(NSObject **this)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  pthread_mutex_lock(&ctu::Singleton<HealthEventDB,HealthEventDB,ctu::PthreadMutexGuardPolicy<HealthEventDB>>::sInstance);
  if ((void)xmmword_1EBBDD2F0) {
    goto LABEL_2;
  }
  int v2 = (HealthEventDB *)operator new(0xA0uLL);
  HealthEventDB::HealthEventDB(v2);
  uint64_t v3 = (std::__shared_weak_count *)operator new(0x20uLL);
  v3->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20F4858;
  v3->__shared_owners_ = 0;
  v3->__shared_weak_owners_ = 0;
  v3[1].__vftable = (std::__shared_weak_count_vtbl *)v2;
  size_t v4 = (std::__shared_weak_count *)*((void *)&xmmword_1EBBDD2F0 + 1);
  *(void *)&xmmword_1EBBDD2F0 = v2;
  *((void *)&xmmword_1EBBDD2F0 + 1) = v3;
  if (v4)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
LABEL_2:
    uint64_t v3 = (std::__shared_weak_count *)*((void *)&xmmword_1EBBDD2F0 + 1);
    int v2 = (HealthEventDB *)xmmword_1EBBDD2F0;
    if (!*((void *)&xmmword_1EBBDD2F0 + 1)) {
      goto LABEL_8;
    }
  }
  atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
LABEL_8:
  pthread_mutex_unlock(&ctu::Singleton<HealthEventDB,HealthEventDB,ctu::PthreadMutexGuardPolicy<HealthEventDB>>::sInstance);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  memset(v19, 170, sizeof(v19));
  HealthModule::findMostRecentBarrierHealthEvent_sync((HealthModule *)this, v19);
  if (((LOBYTE(v19[1]) - 3) & 0xFD) != 0) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = v19[2];
  }
  if (!*((void *)v2 + 14) || (uint64_t v6 = *((void *)v2 + 12)) == 0)
  {
    uint64_t v7 = 0;
    uint64_t v14 = 0;
    CFDictionaryRef v17 = this[11];
    if (!os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT)) {
      return v14 + v7;
    }
    goto LABEL_43;
  }
  uint64_t v7 = 0;
  uint64_t v9 = *((void *)v2 + 10);
  uint64_t v8 = *((void *)v2 + 11);
  uint64_t v10 = *((void *)v2 + 12);
  uint64_t v11 = *((void *)v2 + 13);
  do
  {
    if (*(void *)(v10 + 16) >= v5 && *(unsigned char *)(v10 + 8) == 1) {
      ++v7;
    }
    v10 += 24;
    if (v10 == v8) {
      uint64_t v10 = *((void *)v2 + 10);
    }
  }
  while (v10 != v11 && v10 != 0);
  uint64_t v14 = 0;
  do
  {
    if (*(void *)(v6 + 16) >= v5 && *(unsigned char *)(v6 + 8) == 4) {
      ++v14;
    }
    v6 += 24;
    if (v6 == v8) {
      uint64_t v6 = v9;
    }
  }
  while (v6 != v11 && v6 != 0);
  CFDictionaryRef v17 = this[11];
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
  {
LABEL_43:
    *(_DWORD *)buf = 134218240;
    uint64_t v21 = v7;
    __int16 v22 = 2048;
    uint64_t v23 = v14;
    _os_log_impl(&dword_1C5767000, v17, OS_LOG_TYPE_DEFAULT, "#I boot failure count: %ld, ping failure count: %ld", buf, 0x16u);
  }
  return v14 + v7;
}

void sub_1C588826C(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  pthread_mutex_unlock(&ctu::Singleton<HealthEventDB,HealthEventDB,ctu::PthreadMutexGuardPolicy<HealthEventDB>>::sInstance);
  _Unwind_Resume(a1);
}

void HealthModule::findMostRecentBarrierHealthEvent_sync(HealthModule *this@<X0>, void *a2@<X8>)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  memset(a2, 170, 24);
  Timestamp::Timestamp((Timestamp *)&v35);
  Timestamp::asString((uint64_t)&v35, 0, 9, v37);
  *a2 = &unk_1F20F9640;
  *((unsigned char *)a2 + 8) = 0;
  if (SHIBYTE(v38) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)__p, (const std::string::value_type *)v37[0], (std::string::size_type)v37[1]);
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)v37;
    *(void *)&long long v33 = v38;
  }
  a2[2] = Timestamp::convert((uint64_t)__p);
  if (SBYTE7(v33) < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(v38) & 0x80000000) == 0) {
      goto LABEL_6;
    }
  }
  else if ((SHIBYTE(v38) & 0x80000000) == 0)
  {
    goto LABEL_6;
  }
  operator delete(v37[0]);
LABEL_6:
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&v35, (void *)v35.__imp_.__imp_);
  unint64_t v34 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)std::string __p = v4;
  long long v33 = v4;
  pthread_mutex_lock(&ctu::Singleton<HealthEventDB,HealthEventDB,ctu::PthreadMutexGuardPolicy<HealthEventDB>>::sInstance);
  if (!(void)xmmword_1EBBDD2F0)
  {
    uint64_t v6 = (HealthEventDB *)operator new(0xA0uLL);
    HealthEventDB::HealthEventDB(v6);
    uint64_t v5 = operator new(0x20uLL);
    void *v5 = &unk_1F20F4858;
    v5[1] = 0;
    v5[2] = 0;
    v5[3] = v6;
    uint64_t v7 = (std::__shared_weak_count *)*((void *)&xmmword_1EBBDD2F0 + 1);
    *(void *)&xmmword_1EBBDD2F0 = v6;
    *((void *)&xmmword_1EBBDD2F0 + 1) = v5;
    if (!v7)
    {
      *(void *)buf = v6;
      *(void *)&uint8_t buf[8] = v5;
      goto LABEL_15;
    }
    if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  uint64_t v5 = (void *)*((void *)&xmmword_1EBBDD2F0 + 1);
  uint64_t v6 = (HealthEventDB *)xmmword_1EBBDD2F0;
  *(_OWORD *)buf = xmmword_1EBBDD2F0;
  if (*((void *)&xmmword_1EBBDD2F0 + 1)) {
LABEL_15:
  }
    atomic_fetch_add_explicit(v5 + 1, 1uLL, memory_order_relaxed);
  pthread_mutex_unlock(&ctu::Singleton<HealthEventDB,HealthEventDB,ctu::PthreadMutexGuardPolicy<HealthEventDB>>::sInstance);
  unint64_t v8 = *((void *)v6 + 14);
  unint64_t v34 = v8;
  uint64_t v10 = *((void *)v6 + 10);
  uint64_t v9 = *((void *)v6 + 11);
  unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((v9 - v10) >> 3);
  if (v11 >= 0xAAAAAAAAAAAAAABLL)
  {
    std::logic_error::logic_error(&v35, "circular_buffer");
    v35.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4D0] + 16);
    boost::throw_exception<std::length_error>(&v35);
  }
  if (v9 == v10)
  {
    uint64_t v12 = 0;
    uint64_t v14 = (char *)(8 * ((v9 - v10) >> 3));
    __p[0] = 0;
    __p[1] = (void *)(24 * v11);
    *(void *)&long long v33 = 0;
    uint64_t v15 = 0;
    if (!v8) {
      goto LABEL_30;
    }
  }
  else
  {
    uint64_t v12 = (char *)operator new(v9 - v10);
    uint64_t v13 = *((void *)v6 + 14);
    uint64_t v14 = &v12[24 * v11];
    __p[0] = v12;
    __p[1] = v14;
    *(void *)&long long v33 = v12;
    uint64_t v15 = v12;
    if (!v13) {
      goto LABEL_30;
    }
  }
  uint64_t v16 = *((void *)v6 + 12);
  uint64_t v15 = v12;
  if (v16)
  {
    uint64_t v18 = *((void *)v6 + 10);
    uint64_t v17 = *((void *)v6 + 11);
    uint64_t v19 = v12;
    uint64_t v15 = v12;
    uint64_t v20 = *((void *)v6 + 13);
    do
    {
      *(void *)uint64_t v15 = &unk_1F20F9640;
      *(_OWORD *)(v15 + 8) = *(_OWORD *)(v16 + 8);
      v16 += 24;
      if (v16 == v17) {
        uint64_t v16 = v18;
      }
      v15 += 24;
      v19 += 24;
    }
    while (v16 != v20 && v16 != 0);
  }
LABEL_30:
  if (v15 == v14) {
    __int16 v22 = v12;
  }
  else {
    __int16 v22 = v15;
  }
  *((void *)&v33 + 1) = v22;
  uint64_t v23 = *(std::__shared_weak_count **)&buf[8];
  if (*(void *)&buf[8]
    && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
  }
  unint64_t v24 = v34;
  uint64_t v25 = (void (***)(void))v33;
  if (v34 && (void)v33)
  {
    if ((void *)(v33 + 24) == __p[1]) {
      uint64_t v26 = (char *)__p[0];
    }
    else {
      uint64_t v26 = (char *)(v33 + 24);
    }
    BOOL v27 = v26 == *((char **)&v33 + 1) || v26 == 0;
    long long v28 = (char *)v33;
    if (!v27)
    {
      long long v28 = (char *)v33;
      do
      {
        if (((v28[8] - 3) & 0xFD) != 0)
        {
          if (((v26[8] - 3) & 0xFD) == 0) {
            goto LABEL_51;
          }
        }
        else if (((v26[8] - 3) & 0xFD) != 0)
        {
          goto LABEL_52;
        }
        if (*((void *)v28 + 2) < *((void *)v26 + 2)) {
LABEL_51:
        }
          long long v28 = v26;
LABEL_52:
        v26 += 24;
        if (v26 == __p[1]) {
          uint64_t v26 = (char *)__p[0];
        }
      }
      while (v26 != *((char **)&v33 + 1) && v26);
    }
    *(_OWORD *)(a2 + 1) = *(_OWORD *)(v28 + 8);
  }
  size_t v29 = *((void *)this + 11);
  if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
  {
    HealthEvent::asString((HealthEvent *)a2, &v35);
    unint64_t v30 = v36 >= 0 ? &v35 : (std::logic_error *)v35.__vftable;
    *(_DWORD *)buf = 136315138;
    *(void *)&uint8_t buf[4] = v30;
    _os_log_impl(&dword_1C5767000, v29, OS_LOG_TYPE_DEFAULT, "#I Found preliminary barrier event: %s", buf, 0xCu);
    if (v36 < 0) {
      operator delete(v35.__vftable);
    }
  }
  if (v24)
  {
    unint64_t v31 = 0;
    do
    {
      (**v25)(v25);
      uint64_t v25 = (void (***)(void))(v33 + 24);
      *(void *)&long long v33 = v25;
      if (v25 == __p[1])
      {
        uint64_t v25 = (void (***)(void))__p[0];
        *(void **)&long long v33 = __p[0];
      }
      ++v31;
    }
    while (v31 < v34);
  }
  if (__p[0]) {
    operator delete(__p[0]);
  }
}

void sub_1C58887CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  (*(void (**)(uint64_t))(*(void *)v26 + 8))(v26);
  pthread_mutex_unlock(&ctu::Singleton<HealthEventDB,HealthEventDB,ctu::PthreadMutexGuardPolicy<HealthEventDB>>::sInstance);
  _Unwind_Resume(a1);
}

BOOL HealthModule::hasBarrierEventType(uint64_t a1)
{
  return ((*(unsigned __int8 *)(a1 + 8) - 3) & 0xFD) == 0;
}

uint64_t boost::circular_buffer<HealthEvent,std::allocator<HealthEvent>>::~circular_buffer(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    unint64_t v2 = 0;
    uint64_t v3 = *(void (****)(void))(a1 + 16);
    do
    {
      (**v3)(v3);
      long long v4 = *(void (****)(void))(a1 + 8);
      uint64_t v3 = (void (***)(void))(*(void *)(a1 + 16) + 24);
      *(void *)(a1 + 16) = v3;
      if (v3 == v4)
      {
        uint64_t v3 = *(void (****)(void))a1;
        *(void *)(a1 + 16) = *(void *)a1;
      }
      ++v2;
    }
    while (v2 < *(void *)(a1 + 32));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void HealthModule::checkFailuresAgainstThresholdAndEraseEFSAccordingly_sync(NSObject **this)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  uint64_t FailureCountInHealthEventDB_sync = HealthModule::getFailureCountInHealthEventDB_sync(this);
  if (FailureCountInHealthEventDB_sync >= 10)
  {
    int v3 = capabilities::abs::supportsEFSEraseOnBootLoop((capabilities::abs *)FailureCountInHealthEventDB_sync);
    long long v4 = this[11];
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = ", but EFS erase is not supported";
      if (v3) {
        uint64_t v5 = "; requesting EFS erase";
      }
      *(void *)buf = 0xA04000202;
      *(_WORD *)&uint8_t buf[8] = 2080;
      *(void *)&buf[10] = v5;
      _os_log_impl(&dword_1C5767000, v4, OS_LOG_TYPE_DEFAULT, "#I Total health failure count reached EFS erase threshold (%d)%s", buf, 0x12u);
    }
    if (v3)
    {
      xpc_object_t v6 = xpc_dictionary_create(0, 0, 0);
      if (v6 || (xpc_object_t v6 = xpc_null_create()) != 0)
      {
        if (MEMORY[0x1C8792D30](v6) == MEMORY[0x1E4F14590])
        {
          xpc_retain(v6);
          xpc_object_t v7 = v6;
        }
        else
        {
          xpc_object_t v7 = xpc_null_create();
        }
      }
      else
      {
        xpc_object_t v7 = xpc_null_create();
        xpc_object_t v6 = 0;
      }
      xpc_release(v6);
      xpc_object_t v8 = xpc_string_create((const char *)*MEMORY[0x1E4F4C4E8]);
      if (!v8) {
        xpc_object_t v8 = xpc_null_create();
      }
      xpc_dictionary_set_value(v7, (const char *)*MEMORY[0x1E4F4CA30], v8);
      xpc_object_t v9 = xpc_null_create();
      xpc_release(v8);
      xpc_release(v9);
      uint64_t v10 = (const void *)*MEMORY[0x1E4F4C720];
      size_t v11 = strlen((const char *)*MEMORY[0x1E4F4C720]);
      if (v11 >= 0x7FFFFFFFFFFFFFF8) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      size_t v12 = v11;
      if (v11 >= 0x17)
      {
        uint64_t v14 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v11 | 7) != 0x17) {
          uint64_t v14 = v11 | 7;
        }
        uint64_t v15 = v14 + 1;
        uint64_t v13 = operator new(v14 + 1);
        *(void *)&uint8_t buf[8] = v12;
        *(void *)&uint8_t buf[16] = v15 | 0x8000000000000000;
        *(void *)buf = v13;
      }
      else
      {
        buf[23] = v11;
        uint64_t v13 = buf;
        if (!v11)
        {
          buf[0] = 0;
          xpc_object_t v20 = v7;
          if (v7)
          {
LABEL_19:
            xpc_retain(v7);
            goto LABEL_25;
          }
LABEL_24:
          xpc_object_t v20 = xpc_null_create();
LABEL_25:
          abm::client::Command::create();
          xpc_release(v20);
          if ((buf[23] & 0x80000000) != 0) {
            operator delete(*(void **)buf);
          }
          atomic_fetch_add_explicit((atomic_ullong *volatile)0xAAAAAAAAAAAAAAB2, 1uLL, memory_order_relaxed);
          AppleBasebandManager::perform();
          if (!atomic_fetch_add((atomic_ullong *volatile)0xAAAAAAAAAAAAAAB2, 0xFFFFFFFFFFFFFFFFLL))
          {
            (*(void (**)(unint64_t))(MEMORY[0xAAAAAAAAAAAAAAAA] + 16))(0xAAAAAAAAAAAAAAAALL);
            std::__shared_weak_count::__release_weak((std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL);
          }
          pthread_mutex_lock(&ctu::Singleton<HealthEventDB,HealthEventDB,ctu::PthreadMutexGuardPolicy<HealthEventDB>>::sInstance);
          if (!(void)xmmword_1EBBDD2F0)
          {
            uint64_t v17 = (HealthEventDB *)operator new(0xA0uLL);
            HealthEventDB::HealthEventDB(v17);
            uint64_t v16 = operator new(0x20uLL);
            *uint64_t v16 = &unk_1F20F4858;
            v16[1] = 0;
            void v16[2] = 0;
            v16[3] = v17;
            uint64_t v18 = (std::__shared_weak_count *)*((void *)&xmmword_1EBBDD2F0 + 1);
            *(void *)&xmmword_1EBBDD2F0 = v17;
            *((void *)&xmmword_1EBBDD2F0 + 1) = v16;
            if (!v18)
            {
              *(void *)buf = v17;
              *(void *)&uint8_t buf[8] = v16;
              goto LABEL_36;
            }
            if (!atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
              std::__shared_weak_count::__release_weak(v18);
            }
          }
          uint64_t v16 = (void *)*((void *)&xmmword_1EBBDD2F0 + 1);
          uint64_t v17 = (HealthEventDB *)xmmword_1EBBDD2F0;
          *(_OWORD *)buf = xmmword_1EBBDD2F0;
          if (!*((void *)&xmmword_1EBBDD2F0 + 1))
          {
LABEL_37:
            pthread_mutex_unlock(&ctu::Singleton<HealthEventDB,HealthEventDB,ctu::PthreadMutexGuardPolicy<HealthEventDB>>::sInstance);
            HealthEventDB::addHealthEvent(v17, 5);
            uint64_t v19 = *(std::__shared_weak_count **)&buf[8];
            if (*(void *)&buf[8]
              && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
              std::__shared_weak_count::__release_weak(v19);
            }
            if (!atomic_fetch_add((atomic_ullong *volatile)0xAAAAAAAAAAAAAAB2, 0xFFFFFFFFFFFFFFFFLL))
            {
              (*(void (**)(unint64_t))(MEMORY[0xAAAAAAAAAAAAAAAA] + 16))(0xAAAAAAAAAAAAAAAALL);
              std::__shared_weak_count::__release_weak((std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL);
            }
            xpc_release(v7);
            return;
          }
LABEL_36:
          atomic_fetch_add_explicit(v16 + 1, 1uLL, memory_order_relaxed);
          goto LABEL_37;
        }
      }
      memmove(v13, v10, v12);
      v13[v12] = 0;
      xpc_object_t v20 = v7;
      if (v7) {
        goto LABEL_19;
      }
      goto LABEL_24;
    }
  }
}

void sub_1C5888E38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, xpc_object_t object, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  (*(void (**)(uint64_t))(*(void *)v23 + 8))(v23);
  pthread_mutex_unlock(&ctu::Singleton<HealthEventDB,HealthEventDB,ctu::PthreadMutexGuardPolicy<HealthEventDB>>::sInstance);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  xpc_release(v22);
  _Unwind_Resume(a1);
}

uint64_t dispatch::callback<void({block_pointer})(int,ctu::cf::CFSharedRef<__CFDictionary const>)>::~callback(uint64_t a1)
{
  unint64_t v2 = *(NSObject **)(a1 + 8);
  if (v2) {
    dispatch_release(v2);
  }
  if (*(void *)a1) {
    _Block_release(*(const void **)a1);
  }
  return a1;
}

void HealthModule::sendUserNotificationForCellularDiagnostics(HealthModule *this)
{
  if (config::hw::watch(this)) {
    return;
  }
  *(_OWORD *)long long v4 = 0u;
  memset(v5, 0, 56);
  std::string::__assign_external((std::string *)&v5[8], "Cellular_Issue_Detected", 0x17uLL);
  v5[7] = 13;
  strcpy((char *)v4, "CellularIssue");
  if ((v5[7] & 0x80000000) != 0)
  {
    std::string::__init_copy_ctor_external(&v1, (const std::string::value_type *)v4[0], (std::string::size_type)v4[1]);
  }
  else
  {
    *(_OWORD *)&v1.__r_.__value_.__l.__data_ = *(_OWORD *)v4;
    v1.__r_.__value_.__r.__words[2] = *(void *)v5;
  }
  if ((v5[31] & 0x80000000) != 0) {
    std::string::__init_copy_ctor_external(&v2, *(const std::string::value_type **)&v5[8], *(std::string::size_type *)&v5[16]);
  }
  else {
    std::string v2 = *(std::string *)&v5[8];
  }
  if ((v5[55] & 0x80000000) != 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)&v5[32], *(std::string::size_type *)&v5[40]);
  }
  else {
    std::string __p = *(std::string *)&v5[32];
  }
  support::ui::showNotification(2u, (uint64_t)&v1, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v2.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_13:
      if ((SHIBYTE(v1.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_14;
      }
      goto LABEL_20;
    }
  }
  else if ((SHIBYTE(v2.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_13;
  }
  operator delete(v2.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v1.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_14:
    if ((v5[55] & 0x80000000) == 0) {
      goto LABEL_15;
    }
LABEL_21:
    operator delete(*(void **)&v5[32]);
    if ((v5[31] & 0x80000000) == 0)
    {
LABEL_16:
      if ((v5[7] & 0x80000000) == 0) {
        return;
      }
LABEL_23:
      operator delete(v4[0]);
      return;
    }
    goto LABEL_22;
  }
LABEL_20:
  operator delete(v1.__r_.__value_.__l.__data_);
  if ((v5[55] & 0x80000000) != 0) {
    goto LABEL_21;
  }
LABEL_15:
  if ((v5[31] & 0x80000000) == 0) {
    goto LABEL_16;
  }
LABEL_22:
  operator delete(*(void **)&v5[8]);
  if ((v5[7] & 0x80000000) != 0) {
    goto LABEL_23;
  }
}

void sub_1C5889158(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25)
{
  if (a20 < 0)
  {
    operator delete(__p);
    if ((a14 & 0x80000000) == 0)
    {
LABEL_3:
      support::ui::NotificationInfo::~NotificationInfo(&a25);
      _Unwind_Resume(a1);
    }
  }
  else if ((a14 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a9);
  support::ui::NotificationInfo::~NotificationInfo(&a25);
  _Unwind_Resume(a1);
}

void sub_1C58891B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19)
{
}

void sub_1C58891D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  support::ui::NotificationInfo::~NotificationInfo((void **)va);
  _Unwind_Resume(a1);
}

uint64_t ctu::Loggable<HealthModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig(uint64_t a1)
{
  return MEMORY[0x1F417DA50](a1 + 8);
}

size_t ctu::Loggable<HealthModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  int v3 = (const char *)(*(uint64_t (**)(void))(*(void *)(a1 - 48) + 16))();
  size_t result = strlen(v3);
  if (result >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v5 = result;
  if (result >= 0x17)
  {
    uint64_t v6 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17) {
      uint64_t v6 = result | 7;
    }
    uint64_t v7 = v6 + 1;
    xpc_object_t v8 = operator new(v6 + 1);
    a2[1] = v5;
    a2[2] = v7 | 0x8000000000000000;
    *a2 = v8;
    a2 = v8;
  }
  else
  {
    *((unsigned char *)a2 + 23) = result;
    if (!result)
    {
      *(unsigned char *)a2 = 0;
      return result;
    }
  }
  size_t result = (size_t)memmove(a2, v3, v5);
  *((unsigned char *)a2 + v5) = 0;
  return result;
}

uint64_t ctu::Loggable<HealthModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return MEMORY[0x1F417DD10](a1 + 8);
}

void *ctu::Loggable<HealthModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_1F20F9388;
  MEMORY[0x1C8790F40](a1 + 1);
  return a1;
}

void ctu::Loggable<HealthModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_1F20F9388;
  MEMORY[0x1C8790F40](a1 + 1);

  operator delete(a1);
}

void std::__shared_ptr_pointer<HealthModule *,std::shared_ptr<HealthModule> ctu::SharedSynchronizable<HealthModule>::make_shared_ptr<HealthModule>(HealthModule*)::{lambda(HealthModule *)#1},std::allocator<HealthModule>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<HealthModule *,std::shared_ptr<HealthModule> ctu::SharedSynchronizable<HealthModule>::make_shared_ptr<HealthModule>(HealthModule*)::{lambda(HealthModule *)#1},std::allocator<HealthModule>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<HealthModule *,std::shared_ptr<HealthModule> ctu::SharedSynchronizable<HealthModule>::make_shared_ptr<HealthModule>(HealthModule*)::{lambda(HealthModule *)#1},std::allocator<HealthModule>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableI12HealthModuleE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_") {
    return a1 + 24;
  }
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableI12HealthModuleE15make_shared_ptrIS1_EENSt3__110shared_ptrIT"
                                "_EEPS6_EUlPS1_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableI12HealthModuleE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableI12HealthModuleE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24; {
  return 0;
  }
}

uint64_t std::shared_ptr<HealthModule> ctu::SharedSynchronizable<HealthModule>::make_shared_ptr<HealthModule>(HealthModule*)::{lambda(HealthModule*)#1}::operator() const(HealthModule*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void *HealthEventDB::create_default_global(HealthEventDB *this)
{
  std::string v2 = (HealthEventDB *)operator new(0xA0uLL);
  HealthEventDB::HealthEventDB(v2);
  *(void *)this = v2;
  size_t result = operator new(0x20uLL);
  *size_t result = &unk_1F20F4858;
  result[1] = 0;
  result[2] = 0;
  result[3] = v2;
  *((void *)this + 1) = result;
  return result;
}

void sub_1C58894B4(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_1C58894E8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::shared_ptr<HealthEventDB>::operator=[abi:ne180100](uint64_t a1)
{
  long long v1 = *(_OWORD *)a1;
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  std::string v2 = (std::__shared_weak_count *)*((void *)&xmmword_1EBBDD2F0 + 1);
  xmmword_1EBBDD2F0 = v1;
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
}

void ___ZNK3ctu20SharedSynchronizableI12HealthModuleE20execute_wrapped_syncIZNS1_10initializeEN8dispatch13group_sessionEE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke(uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 40);
  pthread_mutex_lock(&ctu::Singleton<HealthEventDB,HealthEventDB,ctu::PthreadMutexGuardPolicy<HealthEventDB>>::sInstance);
  if (!qword_1EBBDD2F0)
  {
    long long v4 = (HealthEventDB *)operator new(0xA0uLL);
    HealthEventDB::HealthEventDB(v4);
    std::string v2 = (std::__shared_weak_count *)operator new(0x20uLL);
    v2->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20F4858;
    v2->__shared_owners_ = 0;
    v2->__shared_weak_owners_ = 0;
    v2[1].__vftable = (std::__shared_weak_count_vtbl *)v4;
    size_t v5 = (std::__shared_weak_count *)off_1EBBDD2F8;
    qword_1EBBDD2F0 = (uint64_t)v4;
    off_1EBBDD2F8 = v2;
    if (!v5) {
      goto LABEL_7;
    }
    if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  std::string v2 = (std::__shared_weak_count *)off_1EBBDD2F8;
  if (off_1EBBDD2F8)
  {
LABEL_7:
    char v3 = 0;
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
    goto LABEL_8;
  }
  char v3 = 1;
LABEL_8:
  uint64_t v6 = (sys *)pthread_mutex_unlock(&ctu::Singleton<HealthEventDB,HealthEventDB,ctu::PthreadMutexGuardPolicy<HealthEventDB>>::sInstance);
  if ((v3 & 1) != 0 || atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (!sys::isBootSessionChanged(v6)) {
      return;
    }
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    if (!sys::isBootSessionChanged(v11)) {
      return;
    }
  }
  uint64_t v7 = *(NSObject **)(v1 + 88);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1C5767000, v7, OS_LOG_TYPE_DEFAULT, "#I AP reboot detected; resetting CommCenter and baseband stats",
      buf,
      2u);
  }
  xpc_object_t v8 = xpc_dictionary_create(0, 0, 0);
  uint64_t v9 = MEMORY[0x1E4F14590];
  if (v8 || (xpc_object_t v8 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C8792D30](v8) == v9)
    {
      xpc_retain(v8);
      xpc_object_t v10 = v8;
    }
    else
    {
      xpc_object_t v10 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v10 = xpc_null_create();
    xpc_object_t v8 = 0;
  }
  xpc_release(v8);
  if (MEMORY[0x1C8792D30](v10) != v9)
  {
    size_t v12 = *(NSObject **)(v1 + 88);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_1C5767000, v12, OS_LOG_TYPE_ERROR, "Failed to create xpc dictionary to reset CommCenter stats", buf, 2u);
    }
    goto LABEL_24;
  }
  xpc_object_t v15 = xpc_int64_create(1);
  if (!v15) {
    xpc_object_t v15 = xpc_null_create();
  }
  xpc_dictionary_set_value(v10, "KeyCommCenterStatsLaunchCount", v15);
  xpc_object_t v16 = xpc_null_create();
  xpc_release(v15);
  xpc_release(v16);
  time_t v17 = time(0);
  xpc_object_t v18 = xpc_int64_create(v17);
  if (!v18) {
    xpc_object_t v18 = xpc_null_create();
  }
  xpc_dictionary_set_value(v10, "KeyCommCenterStatsFirstLaunchTime", v18);
  xpc_object_t v19 = xpc_null_create();
  xpc_release(v18);
  xpc_release(v19);
  pthread_mutex_lock(&ctu::Singleton<HealthEventDB,HealthEventDB,ctu::PthreadMutexGuardPolicy<HealthEventDB>>::sInstance);
  if (!qword_1EBBDD2F0)
  {
    xpc_object_t v20 = (HealthEventDB *)operator new(0xA0uLL);
    HealthEventDB::HealthEventDB(v20);
    uint64_t v21 = (std::__shared_weak_count *)operator new(0x20uLL);
    v21->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20F4858;
    v21->__shared_owners_ = 0;
    v21->__shared_weak_owners_ = 0;
    v21[1].__vftable = (std::__shared_weak_count_vtbl *)v20;
    size_t v29 = (std::__shared_weak_count *)off_1EBBDD2F8;
    qword_1EBBDD2F0 = (uint64_t)v20;
    off_1EBBDD2F8 = v21;
    if (!v29) {
      goto LABEL_50;
    }
    if (!atomic_fetch_add(&v29->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  xpc_object_t v20 = (HealthEventDB *)qword_1EBBDD2F0;
  uint64_t v21 = (std::__shared_weak_count *)off_1EBBDD2F8;
  if (off_1EBBDD2F8) {
LABEL_50:
  }
    atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
  pthread_mutex_unlock(&ctu::Singleton<HealthEventDB,HealthEventDB,ctu::PthreadMutexGuardPolicy<HealthEventDB>>::sInstance);
  xpc_object_t v37 = v10;
  if (v10) {
    xpc_retain(v10);
  }
  else {
    xpc_object_t v37 = xpc_null_create();
  }
  HealthEventDB::updateCommCenterStats((uint64_t *)v20, &v37);
  xpc_release(v37);
  xpc_object_t v37 = 0;
  if (v21 && !atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v21);
  }
LABEL_24:
  xpc_release(v10);
  xpc_object_t object = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  xpc_object_t v13 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v14 = v13;
  if (v13)
  {
    xpc_object_t object = v13;
  }
  else
  {
    xpc_object_t v14 = xpc_null_create();
    xpc_object_t object = v14;
    if (!v14)
    {
      xpc_object_t v22 = xpc_null_create();
      xpc_object_t v14 = 0;
      goto LABEL_38;
    }
  }
  if (MEMORY[0x1C8792D30](v14) == v9)
  {
    xpc_retain(v14);
    goto LABEL_39;
  }
  xpc_object_t v22 = xpc_null_create();
LABEL_38:
  xpc_object_t object = v22;
LABEL_39:
  xpc_release(v14);
  if (MEMORY[0x1C8792D30](object) == v9)
  {
    uint64_t v24 = *MEMORY[0x1E4F4CD70];
    *(void *)buf = &object;
    uint64_t v34 = v24;
    xpc::dict::object_proxy::operator=((uint64_t)buf, &v35);
    xpc_release(v35);
    xpc_object_t v35 = 0;
    uint64_t v25 = *MEMORY[0x1E4F4CD78];
    *(void *)buf = &object;
    uint64_t v34 = v25;
    xpc::dict::object_proxy::operator=((uint64_t)buf, &v32);
    xpc_release(v32);
    xpc_object_t v32 = 0;
    uint64_t v26 = *MEMORY[0x1E4F4CE98];
    *(void *)buf = &object;
    uint64_t v34 = v26;
    xpc::dict::object_proxy::operator=((uint64_t)buf, &v31);
    xpc_release(v31);
    xpc_object_t v31 = 0;
    pthread_mutex_lock(&ctu::Singleton<HealthEventDB,HealthEventDB,ctu::PthreadMutexGuardPolicy<HealthEventDB>>::sInstance);
    if (!qword_1EBBDD2F0)
    {
      long long v28 = (HealthEventDB *)operator new(0xA0uLL);
      HealthEventDB::HealthEventDB(v28);
      BOOL v27 = (std::__shared_weak_count *)operator new(0x20uLL);
      v27->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20F4858;
      v27->__shared_owners_ = 0;
      v27->__shared_weak_owners_ = 0;
      v27[1].__vftable = (std::__shared_weak_count_vtbl *)v28;
      unint64_t v30 = (std::__shared_weak_count *)off_1EBBDD2F8;
      qword_1EBBDD2F0 = (uint64_t)v28;
      off_1EBBDD2F8 = v27;
      if (!v30)
      {
LABEL_60:
        atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
LABEL_61:
        pthread_mutex_unlock(&ctu::Singleton<HealthEventDB,HealthEventDB,ctu::PthreadMutexGuardPolicy<HealthEventDB>>::sInstance);
        *(void *)buf = object;
        if (object) {
          xpc_retain(object);
        }
        else {
          *(void *)buf = xpc_null_create();
        }
        HealthEventDB::updateBootStats((uint64_t *)v28, (void **)buf);
        xpc_release(*(xpc_object_t *)buf);
        *(void *)buf = 0;
        if (v27 && !atomic_fetch_add(&v27->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
          std::__shared_weak_count::__release_weak(v27);
        }
        goto LABEL_42;
      }
      if (!atomic_fetch_add(&v30->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
    long long v28 = (HealthEventDB *)qword_1EBBDD2F0;
    BOOL v27 = (std::__shared_weak_count *)off_1EBBDD2F8;
    if (!off_1EBBDD2F8) {
      goto LABEL_61;
    }
    goto LABEL_60;
  }
  uint64_t v23 = *(NSObject **)(v1 + 88);
  if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_error_impl(&dword_1C5767000, v23, OS_LOG_TYPE_ERROR, "Failed to create xpc dictionary to reset Baseband stats", buf, 2u);
  }
LABEL_42:
  xpc_release(object);
}

void sub_1C5889C60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, xpc_object_t a11, uint64_t a12, uint64_t a13, uint64_t a14, xpc_object_t object, xpc_object_t a16)
{
  (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
  pthread_mutex_unlock(&ctu::Singleton<HealthEventDB,HealthEventDB,ctu::PthreadMutexGuardPolicy<HealthEventDB>>::sInstance);
  xpc_release(object);
  _Unwind_Resume(a1);
}

void xpc::dict::object_proxy::operator=(uint64_t a1@<X0>, void *a2@<X8>)
{
  xpc_object_t v4 = xpc_null_create();
  xpc_dictionary_set_value(**(xpc_object_t **)a1, *(const char **)(a1 + 8), v4);
  *a2 = v4;
  xpc_object_t v5 = xpc_null_create();
  xpc_release(v5);
}

void dispatch::async<void ctu::SharedSynchronizable<HealthModule>::execute_wrapped<HealthModule::initialize(dispatch::group_session)::$_1>(HealthModule::initialize(dispatch::group_session)::$_1 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<HealthModule::initialize(dispatch::group_session)::$_1,dispatch_queue_s *::default_delete<HealthModule::initialize(dispatch::group_session)::$_1>>)::{lambda(void *)#1}::__invoke(void *a1)
{
  std::string v2 = *(uint64_t **)a1;
  uint64_t v3 = **(void **)a1;
  xpc_object_t v4 = *(NSObject **)(v3 + 88);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1C5767000, v4, OS_LOG_TYPE_DEFAULT, "#I Initializing", buf, 2u);
  }
  xpc_object_t v5 = (const char *)(*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
  size_t v6 = strlen(v5);
  if (v6 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (void *)v6;
  if (v6 >= 0x17)
  {
    uint64_t v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17) {
      uint64_t v9 = v6 | 7;
    }
    uint64_t v10 = v9 + 1;
    xpc_object_t v8 = (void **)operator new(v9 + 1);
    __dst[1] = v7;
    unint64_t v64 = v10 | 0x8000000000000000;
    __dst[0] = v8;
  }
  else
  {
    HIBYTE(v64) = v6;
    xpc_object_t v8 = __dst;
    if (!v6) {
      goto LABEL_11;
    }
  }
  memmove(v8, v5, (size_t)v7);
LABEL_11:
  *((unsigned char *)v7 + (void)v8) = 0;
  unint64_t v62 = 0;
  AppleBasebandManager::create();
  long long v11 = *(_OWORD *)buf;
  *(void *)buf = 0;
  *(void *)&uint8_t buf[8] = 0;
  size_t v12 = *(std::__shared_weak_count **)(v3 + 160);
  *(_OWORD *)(v3 + 152) = v11;
  if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  xpc_object_t v13 = *(std::__shared_weak_count **)&buf[8];
  if (!*(void *)&buf[8]
    || atomic_fetch_add((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    xpc_object_t v14 = v62;
    if (!v62) {
      goto LABEL_18;
    }
    goto LABEL_17;
  }
  ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
  std::__shared_weak_count::__release_weak(v13);
  xpc_object_t v14 = v62;
  if (v62) {
LABEL_17:
  }
    CFRelease(v14);
LABEL_18:
  if (SHIBYTE(v64) < 0) {
    operator delete(__dst[0]);
  }
  buf[23] = 21;
  strcpy(buf, "CommandGetHealthStats");
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZZN12HealthModule10initializeEN8dispatch13group_sessionEENK3__1clEv_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_33_2;
  aBlock[4] = v2[2];
  xpc_object_t v15 = (std::__shared_weak_count *)v2[3];
  unint64_t v60 = v15;
  if (v15) {
    atomic_fetch_add_explicit(&v15->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v16 = _Block_copy(aBlock);
  unint64_t v61 = v16;
  Service::registerCommandHandler(v3, (uint64_t)buf, &v61);
  if (v16) {
    _Block_release(v16);
  }
  if ((buf[23] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  *(void *)buf = operator new(0x20uLL);
  *(_OWORD *)&uint8_t buf[8] = xmmword_1C599E820;
  strcpy(*(char **)buf, "CommandUpdateBBBootStats");
  v56[0] = MEMORY[0x1E4F143A8];
  v56[1] = 1174405120;
  v56[2] = ___ZZN12HealthModule10initializeEN8dispatch13group_sessionEENK3__1clEv_block_invoke_34;
  v56[3] = &__block_descriptor_tmp_37_1;
  v56[4] = v2[2];
  time_t v17 = (std::__shared_weak_count *)v2[3];
  uint64_t v57 = v17;
  if (v17) {
    atomic_fetch_add_explicit(&v17->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  xpc_object_t v18 = _Block_copy(v56);
  uint64_t v58 = v18;
  Service::registerCommandHandler(v3, (uint64_t)buf, &v58);
  if (v18) {
    _Block_release(v18);
  }
  if ((buf[23] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  xpc_object_t v19 = (const void *)*MEMORY[0x1E4F4CEF8];
  size_t v20 = strlen((const char *)*MEMORY[0x1E4F4CEF8]);
  if (v20 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v21 = (void *)v20;
  if (v20 >= 0x17)
  {
    uint64_t v23 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v20 | 7) != 0x17) {
      uint64_t v23 = v20 | 7;
    }
    uint64_t v24 = v23 + 1;
    xpc_object_t v22 = operator new(v23 + 1);
    __p[1] = v21;
    unint64_t v55 = v24 | 0x8000000000000000;
    __p[0] = v22;
    goto LABEL_39;
  }
  HIBYTE(v55) = v20;
  xpc_object_t v22 = __p;
  if (v20) {
LABEL_39:
  }
    memmove(v22, v19, (size_t)v21);
  *((unsigned char *)v21 + (void)v22) = 0;
  *(void *)buf = MEMORY[0x1E4F143A8];
  *(void *)&uint8_t buf[8] = 1174405120;
  *(void *)&uint8_t buf[16] = ___ZZN12HealthModule10initializeEN8dispatch13group_sessionEENK3__1clEv_block_invoke_38;
  uint64_t v48 = &__block_descriptor_tmp_48_2;
  uint64_t v49 = v3;
  uint64_t v50 = v2[2];
  uint64_t v25 = (std::__shared_weak_count *)v2[3];
  uint64_t v51 = v25;
  if (v25) {
    atomic_fetch_add_explicit(&v25->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v26 = _Block_copy(buf);
  BOOL v27 = *(NSObject **)(v3 + 136);
  if (v27) {
    dispatch_retain(*(dispatch_object_t *)(v3 + 136));
  }
  unint64_t v52 = v26;
  dispatch_object_t object = v27;
  AppleBasebandManager::setEventHandler();
  if (object) {
    dispatch_release(object);
  }
  if (v52) {
    _Block_release(v52);
  }
  if (SHIBYTE(v55) < 0) {
    operator delete(__p[0]);
  }
  long long v28 = (const void *)*MEMORY[0x1E4F4C830];
  size_t v29 = strlen((const char *)*MEMORY[0x1E4F4C830]);
  if (v29 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  unint64_t v30 = (void *)v29;
  if (v29 >= 0x17)
  {
    uint64_t v32 = (v29 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v29 | 7) != 0x17) {
      uint64_t v32 = v29 | 7;
    }
    uint64_t v33 = v32 + 1;
    xpc_object_t v31 = operator new(v32 + 1);
    v45[1] = v30;
    unint64_t v46 = v33 | 0x8000000000000000;
    v45[0] = v31;
    goto LABEL_57;
  }
  HIBYTE(v46) = v29;
  xpc_object_t v31 = v45;
  if (v29) {
LABEL_57:
  }
    memmove(v31, v28, (size_t)v30);
  *((unsigned char *)v30 + (void)v31) = 0;
  v41[0] = MEMORY[0x1E4F143A8];
  v41[1] = 1174405120;
  v41[2] = ___ZZN12HealthModule10initializeEN8dispatch13group_sessionEENK3__1clEv_block_invoke_49;
  v41[3] = &__block_descriptor_tmp_52_1;
  v41[4] = v3;
  v41[5] = v2[2];
  uint64_t v34 = (std::__shared_weak_count *)v2[3];
  size_t v42 = v34;
  if (v34) {
    atomic_fetch_add_explicit(&v34->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  xpc_object_t v35 = _Block_copy(v41);
  char v36 = *(NSObject **)(v3 + 136);
  if (v36) {
    dispatch_retain(*(dispatch_object_t *)(v3 + 136));
  }
  size_t v43 = v35;
  dispatch_object_t v44 = v36;
  AppleBasebandManager::setEventHandler();
  if (v44) {
    dispatch_release(v44);
  }
  if (v43) {
    _Block_release(v43);
  }
  if (SHIBYTE(v46) < 0) {
    operator delete(v45[0]);
  }
  AppleBasebandManager::eventsOn(*(AppleBasebandManager **)(v3 + 152));
  if (v42) {
    std::__shared_weak_count::__release_weak(v42);
  }
  if (v51) {
    std::__shared_weak_count::__release_weak(v51);
  }
  if (v57) {
    std::__shared_weak_count::__release_weak(v57);
  }
  if (v60) {
    std::__shared_weak_count::__release_weak(v60);
  }
  xpc_object_t v37 = (std::__shared_weak_count *)v2[3];
  if (v37) {
    std::__shared_weak_count::__release_weak(v37);
  }
  uint64_t v38 = v2[1];
  if (v38)
  {
    dispatch_group_leave(v38);
    size_t v39 = v2[1];
    if (v39) {
      dispatch_release(v39);
    }
  }
  operator delete(v2);
  uint64_t v40 = (std::__shared_weak_count *)*((void *)a1 + 2);
  if (v40 && !atomic_fetch_add(&v40->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
    std::__shared_weak_count::__release_weak(v40);
  }
  operator delete(a1);
}

void sub_1C588A634(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, void *aBlock, dispatch_object_t object, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,std::__shared_weak_count *a33,void *a34,dispatch_object_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,std::__shared_weak_count *a47)
{
  if (a15) {
    std::__shared_weak_count::__release_weak(a15);
  }
  if (a33) {
    std::__shared_weak_count::__release_weak(a33);
  }
  if (a47) {
    std::__shared_weak_count::__release_weak(a47);
  }
  uint64_t v51 = *(std::__shared_weak_count **)(v49 - 144);
  if (v51) {
    std::__shared_weak_count::__release_weak(v51);
  }
  unint64_t v52 = (std::__shared_weak_count *)v48[3];
  if (v52) {
    std::__shared_weak_count::__release_weak(v52);
  }
  int v53 = v48[1];
  if (v53)
  {
    dispatch_group_leave(v53);
    unint64_t v54 = v48[1];
    if (v54) {
      dispatch_release(v54);
    }
  }
  operator delete(v48);
  unint64_t v55 = (std::__shared_weak_count *)v47[2];
  if (v55)
  {
    if (!atomic_fetch_add(&v55->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  operator delete(v47);
  _Unwind_Resume(a1);
}

void ___ZZN12HealthModule10initializeEN8dispatch13group_sessionEENK3__1clEv_block_invoke(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  xpc_object_t v4 = *(std::__shared_weak_count **)(a1 + 40);
  if (!v4) {
    return;
  }
  size_t v6 = std::__shared_weak_count::lock(v4);
  uint64_t v16 = v6;
  if (!v6) {
    return;
  }
  if (!*(void *)(a1 + 32))
  {
    uint64_t v9 = v6;
LABEL_20:
    if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
    return;
  }
  xpc_object_t v14 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  pthread_mutex_lock(&ctu::Singleton<HealthEventDB,HealthEventDB,ctu::PthreadMutexGuardPolicy<HealthEventDB>>::sInstance);
  if (qword_1EBBDD2F0)
  {
LABEL_5:
    xpc_object_t v8 = (HealthEventDB *)qword_1EBBDD2F0;
    uint64_t v7 = (std::__shared_weak_count *)off_1EBBDD2F8;
    xpc_object_t object = (xpc_object_t)qword_1EBBDD2F0;
    xpc_object_t v13 = (std::__shared_weak_count *)off_1EBBDD2F8;
    if (!off_1EBBDD2F8) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  xpc_object_t v8 = (HealthEventDB *)operator new(0xA0uLL);
  HealthEventDB::HealthEventDB(v8);
  uint64_t v7 = (std::__shared_weak_count *)operator new(0x20uLL);
  v7->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20F4858;
  v7->__shared_owners_ = 0;
  v7->__shared_weak_owners_ = 0;
  v7[1].__vftable = (std::__shared_weak_count_vtbl *)v8;
  uint64_t v10 = (std::__shared_weak_count *)off_1EBBDD2F8;
  qword_1EBBDD2F0 = (uint64_t)v8;
  off_1EBBDD2F8 = v7;
  if (v10)
  {
    if (!atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
    goto LABEL_5;
  }
  xpc_object_t object = v8;
  xpc_object_t v13 = v7;
LABEL_12:
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
LABEL_13:
  pthread_mutex_unlock(&ctu::Singleton<HealthEventDB,HealthEventDB,ctu::PthreadMutexGuardPolicy<HealthEventDB>>::sInstance);
  HealthEventDB::getHealthInfo(v8, &v14);
  if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  if (MEMORY[0x1C8792D30](v14) == MEMORY[0x1E4F14590])
  {
    LODWORD(object) = 0;
    dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(a3, (unsigned int *)&object, &v14);
  }
  else
  {
    uint64_t v11 = *a3;
    xpc_object_t object = xpc_null_create();
    (*(void (**)(uint64_t, uint64_t, xpc_object_t *))(v11 + 16))(v11, 3760250880, &object);
    xpc_release(object);
  }
  xpc_release(v14);
  uint64_t v9 = v16;
  if (v16) {
    goto LABEL_20;
  }
}

void sub_1C588AA74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t a10, uint64_t a11, xpc_object_t object, char a13)
{
}

uint64_t __copy_helper_block_e8_32c37_ZTSNSt3__18weak_ptrI12HealthModuleEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c37_ZTSNSt3__18weak_ptrI12HealthModuleEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void ___ZZN12HealthModule10initializeEN8dispatch13group_sessionEENK3__1clEv_block_invoke_34(uint64_t a1, void **a2, uint64_t *a3)
{
  uint64_t v19 = 0;
  size_t v20 = 0;
  xpc_object_t v4 = *(std::__shared_weak_count **)(a1 + 40);
  if (!v4) {
    goto LABEL_21;
  }
  size_t v20 = std::__shared_weak_count::lock(v4);
  if (!v20) {
    return;
  }
  uint64_t v19 = *(void *)(a1 + 32);
  if (!v19) {
    goto LABEL_21;
  }
  pthread_mutex_lock(&ctu::Singleton<HealthEventDB,HealthEventDB,ctu::PthreadMutexGuardPolicy<HealthEventDB>>::sInstance);
  if (qword_1EBBDD2F0)
  {
LABEL_5:
    xpc_object_t v8 = (HealthEventDB *)qword_1EBBDD2F0;
    uint64_t v7 = off_1EBBDD2F8;
    xpc_object_t v17 = (xpc_object_t)qword_1EBBDD2F0;
    xpc_object_t v18 = (std::__shared_weak_count *)off_1EBBDD2F8;
    if (!off_1EBBDD2F8) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }
  xpc_object_t v8 = (HealthEventDB *)operator new(0xA0uLL);
  HealthEventDB::HealthEventDB(v8);
  uint64_t v7 = operator new(0x20uLL);
  *uint64_t v7 = &unk_1F20F4858;
  v7[1] = 0;
  _DWORD v7[2] = 0;
  void v7[3] = v8;
  uint64_t v9 = (std::__shared_weak_count *)off_1EBBDD2F8;
  qword_1EBBDD2F0 = (uint64_t)v8;
  off_1EBBDD2F8 = v7;
  if (v9)
  {
    if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
    goto LABEL_5;
  }
  xpc_object_t v17 = v8;
  xpc_object_t v18 = (std::__shared_weak_count *)v7;
LABEL_11:
  atomic_fetch_add_explicit(v7 + 1, 1uLL, memory_order_relaxed);
LABEL_12:
  pthread_mutex_unlock(&ctu::Singleton<HealthEventDB,HealthEventDB,ctu::PthreadMutexGuardPolicy<HealthEventDB>>::sInstance);
  uint64_t v10 = *a2;
  xpc_object_t object = v10;
  if (v10) {
    xpc_retain(v10);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  char updated = HealthEventDB::updateBootStats((uint64_t *)v8, &object);
  xpc_release(object);
  xpc_object_t object = 0;
  size_t v12 = v18;
  if (v18 && !atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
    if (updated) {
      goto LABEL_18;
    }
  }
  else if (updated)
  {
LABEL_18:
    uint64_t v13 = *a3;
    xpc_object_t v17 = xpc_null_create();
    (*(void (**)(uint64_t, void, xpc_object_t *))(v13 + 16))(v13, 0, &v17);
    xpc_release(v17);
    goto LABEL_21;
  }
  uint64_t v14 = *a3;
  xpc_object_t v17 = xpc_null_create();
  (*(void (**)(uint64_t, uint64_t, xpc_object_t *))(v14 + 16))(v14, 3760250880, &v17);
  xpc_release(v17);
LABEL_21:
  xpc_object_t v15 = v20;
  if (v20)
  {
    if (!atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void sub_1C588ADDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t a10, xpc_object_t object, uint64_t a12, char a13)
{
  (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
  pthread_mutex_unlock(&ctu::Singleton<HealthEventDB,HealthEventDB,ctu::PthreadMutexGuardPolicy<HealthEventDB>>::sInstance);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void ___ZZN12HealthModule10initializeEN8dispatch13group_sessionEENK3__1clEv_block_invoke_38(void *a1, abm::client::Event **a2)
{
  uint64_t v55 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (std::__shared_weak_count *)a1[6];
  if (!v3) {
    return;
  }
  uint64_t v5 = a1[4];
  size_t v6 = std::__shared_weak_count::lock(v3);
  unint64_t v52 = v6;
  if (!v6) {
    return;
  }
  if (!a1[5])
  {
    uint64_t v26 = v6;
LABEL_100:
    if (!atomic_fetch_add(&v26->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
    return;
  }
  CFDictionaryRef v50 = (const __CFDictionary *)0xAAAAAAAAAAAAAAAALL;
  abm::client::Event::getData((uint64_t *)&v50, *a2);
  CFDictionaryRef v7 = v50;
  if (v50) {
    xpc_object_t v8 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
  }
  else {
    xpc_object_t v8 = 0;
  }
  if (v8)
  {
    v49[0] = 0xAAAAAAAAAAAAAAAALL;
    v49[1] = 0xAAAAAAAAAAAAAAAALL;
    ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v49, v50);
    memset(v48, 170, sizeof(v48));
    uint64_t v9 = (const char *)*MEMORY[0x1E4F4C688];
    buf[23] = 0;
    buf[0] = 0;
    ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v46, v9);
    ctu::cf::map_adapter::getString();
    MEMORY[0x1C8791110](&v46);
    if ((buf[23] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    int v10 = SHIBYTE(v48[2]);
    if (SHIBYTE(v48[2]) >= 0) {
      size_t v11 = HIBYTE(v48[2]);
    }
    else {
      size_t v11 = (size_t)v48[1];
    }
    if (v11 != strlen((const char *)*MEMORY[0x1E4F4CCD8])
      || (SHIBYTE(v48[2]) >= 0 ? (size_t v12 = v48) : (size_t v12 = (void **)v48[0]),
          memcmp(v12, (const void *)*MEMORY[0x1E4F4CCD8], v11)))
    {
      if (v11 != strlen((const char *)*MEMORY[0x1E4F4C6E0])
        || (v10 >= 0 ? (uint64_t v13 = v48) : (uint64_t v13 = (void **)v48[0]), memcmp(v13, (const void *)*MEMORY[0x1E4F4C6E0], v11)))
      {
        if (v11 == strlen((const char *)*MEMORY[0x1E4F4CAE8]))
        {
          uint64_t v14 = v10 >= 0 ? v48 : (void **)v48[0];
          if (!memcmp(v14, (const void *)*MEMORY[0x1E4F4CAE8], v11))
          {
            if (*(void *)(v5 + 184))
            {
              xpc_object_t v15 = *(NSObject **)(v5 + 88);
              if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)buf = 0;
                _os_log_impl(&dword_1C5767000, v15, OS_LOG_TYPE_DEFAULT, "#I Baseband ping timer already running", buf, 2u);
                xpc_object_t v15 = *(NSObject **)(v5 + 88);
              }
              if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)buf = 0;
                _os_log_impl(&dword_1C5767000, v15, OS_LOG_TYPE_DEFAULT, "#I Canceling baseband ping timer", buf, 2u);
              }
              (*(void (**)(void))(**(void **)(v5 + 184) + 16))(*(void *)(v5 + 184));
              uint64_t v16 = *(void *)(v5 + 184);
              *(void *)(v5 + 184) = 0;
              if (v16) {
                (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
              }
              pthread_mutex_lock(&ctu::Singleton<HealthEventDB,HealthEventDB,ctu::PthreadMutexGuardPolicy<HealthEventDB>>::sInstance);
              uint64_t v17 = xmmword_1EBBDD2F0;
              if (!(void)xmmword_1EBBDD2F0)
              {
                HealthEventDB::create_default_global((HealthEventDB *)buf);
                std::shared_ptr<HealthEventDB>::operator=[abi:ne180100]((uint64_t)buf);
                std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)buf);
                uint64_t v17 = xmmword_1EBBDD2F0;
              }
              *(void *)&long long v46 = v17;
              *((void *)&v46 + 1) = *((void *)&xmmword_1EBBDD2F0 + 1);
              if (*((void *)&xmmword_1EBBDD2F0 + 1)) {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&xmmword_1EBBDD2F0 + 1) + 8), 1uLL, memory_order_relaxed);
              }
              pthread_mutex_unlock(&ctu::Singleton<HealthEventDB,HealthEventDB,ctu::PthreadMutexGuardPolicy<HealthEventDB>>::sInstance);
              HealthEventDB::addHealthEvent((HealthEventDB *)v46, 4);
              std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&v46);
            }
            xpc_object_t v18 = *(NSObject **)(v5 + 88);
            if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
            {
              *(void *)buf = 0xA04000100;
              _os_log_impl(&dword_1C5767000, v18, OS_LOG_TYPE_DEFAULT, "#I Starting %u sec timer before pinging baseband", buf, 8u);
            }
            uint64_t v19 = *(void *)(v5 + 168);
            std::string __p = operator new(0x28uLL);
            long long v45 = xmmword_1C59A14C0;
            strcpy((char *)__p, "Baseband HealthModule Ping Timer");
            size_t v20 = *(NSObject **)(v5 + 136);
            dispatch_object_t object = v20;
            if (v20) {
              dispatch_retain(v20);
            }
            v40[0] = MEMORY[0x1E4F143A8];
            v40[1] = 1174405120;
            v40[2] = ___ZZN12HealthModule10initializeEN8dispatch13group_sessionEENK3__1clEv_block_invoke_40;
            v40[3] = &__block_descriptor_tmp_44_0;
            uint64_t v22 = a1[5];
            uint64_t v21 = (std::__shared_weak_count *)a1[6];
            v40[4] = v5;
            v40[5] = v22;
            unint64_t v41 = v21;
            if (v21) {
              atomic_fetch_add_explicit(&v21->__shared_weak_owners_, 1uLL, memory_order_relaxed);
            }
            aBlock = _Block_copy(v40);
            ctu::TimerService::createOneShotTimer(v19, (uint64_t)&__p, 0, 10000000, &object, &aBlock);
            uint64_t v23 = *(void *)buf;
            *(void *)buf = 0;
            uint64_t v24 = *(void *)(v5 + 184);
            *(void *)(v5 + 184) = v23;
            if (v24)
            {
              (*(void (**)(uint64_t))(*(void *)v24 + 8))(v24);
              uint64_t v25 = *(void *)buf;
              *(void *)buf = 0;
              if (v25) {
                (*(void (**)(uint64_t))(*(void *)v25 + 8))(v25);
              }
            }
            if (aBlock) {
              _Block_release(aBlock);
            }
            if (object) {
              dispatch_release(object);
            }
            if (SHIBYTE(v45) < 0) {
              operator delete(__p);
            }
            if (v41) {
              std::__shared_weak_count::__release_weak(v41);
            }
          }
        }
LABEL_94:
        HealthModule::checkFailuresAgainstThresholdAndEraseEFSAccordingly_sync((NSObject **)v5);
        if (SHIBYTE(v48[2]) < 0) {
          operator delete(v48[0]);
        }
        MEMORY[0x1C8791160](v49);
        CFDictionaryRef v7 = v50;
        goto LABEL_97;
      }
      pthread_mutex_lock(&ctu::Singleton<HealthEventDB,HealthEventDB,ctu::PthreadMutexGuardPolicy<HealthEventDB>>::sInstance);
      if (!(void)xmmword_1EBBDD2F0)
      {
        uint64_t v34 = (HealthEventDB *)operator new(0xA0uLL);
        HealthEventDB::HealthEventDB(v34);
        uint64_t v33 = operator new(0x20uLL);
        void *v33 = &unk_1F20F4858;
        v33[1] = 0;
        v33[2] = 0;
        v33[3] = v34;
        xpc_object_t v35 = (std::__shared_weak_count *)*((void *)&xmmword_1EBBDD2F0 + 1);
        *(void *)&xmmword_1EBBDD2F0 = v34;
        *((void *)&xmmword_1EBBDD2F0 + 1) = v33;
        if (!v35)
        {
          *(void *)buf = v34;
          *(void *)&uint8_t buf[8] = v33;
          goto LABEL_78;
        }
        if (!atomic_fetch_add(&v35->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
          std::__shared_weak_count::__release_weak(v35);
        }
      }
      uint64_t v33 = (void *)*((void *)&xmmword_1EBBDD2F0 + 1);
      uint64_t v34 = (HealthEventDB *)xmmword_1EBBDD2F0;
      *(_OWORD *)buf = xmmword_1EBBDD2F0;
      if (!*((void *)&xmmword_1EBBDD2F0 + 1))
      {
LABEL_79:
        pthread_mutex_unlock(&ctu::Singleton<HealthEventDB,HealthEventDB,ctu::PthreadMutexGuardPolicy<HealthEventDB>>::sInstance);
        char v36 = (HealthModule *)HealthEventDB::addHealthEvent(v34, 2);
        xpc_object_t v37 = *(std::__shared_weak_count **)&buf[8];
        if (*(void *)&buf[8]
          && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
          std::__shared_weak_count::__release_weak(v37);
        }
        HealthModule::sendUserNotificationForCellularDiagnostics(v36);
        goto LABEL_94;
      }
LABEL_78:
      atomic_fetch_add_explicit(v33 + 1, 1uLL, memory_order_relaxed);
      goto LABEL_79;
    }
    memset(buf, 170, sizeof(buf));
    BOOL v27 = (const char *)*MEMORY[0x1E4F4CA38];
    char v47 = 0;
    LOBYTE(v46) = 0;
    ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v53, v27);
    ctu::cf::map_adapter::getString();
    MEMORY[0x1C8791110](&v53);
    if (v47 < 0) {
      operator delete((void *)v46);
    }
    char v28 = buf[23];
    if (buf[23] >= 0) {
      size_t v29 = buf[23];
    }
    else {
      size_t v29 = *(void *)&buf[8];
    }
    if (v29 != strlen((const char *)*MEMORY[0x1E4F4D030])
      || (buf[23] >= 0 ? (unint64_t v30 = buf) : (unint64_t v30 = *(unsigned char **)buf), memcmp(v30, (const void *)*MEMORY[0x1E4F4D030], v29)))
    {
LABEL_92:
      if (v28 < 0) {
        operator delete(*(void **)buf);
      }
      goto LABEL_94;
    }
    pthread_mutex_lock(&ctu::Singleton<HealthEventDB,HealthEventDB,ctu::PthreadMutexGuardPolicy<HealthEventDB>>::sInstance);
    if (!(void)xmmword_1EBBDD2F0)
    {
      uint64_t v32 = (HealthEventDB *)operator new(0xA0uLL);
      HealthEventDB::HealthEventDB(v32);
      xpc_object_t v31 = operator new(0x20uLL);
      *xpc_object_t v31 = &unk_1F20F4858;
      v31[1] = 0;
      v31[2] = 0;
      v31[3] = v32;
      uint64_t v38 = (std::__shared_weak_count *)*((void *)&xmmword_1EBBDD2F0 + 1);
      *(void *)&xmmword_1EBBDD2F0 = v32;
      *((void *)&xmmword_1EBBDD2F0 + 1) = v31;
      if (!v38)
      {
        *(void *)&long long v46 = v32;
        *((void *)&v46 + 1) = v31;
        goto LABEL_87;
      }
      if (!atomic_fetch_add(&v38->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
        std::__shared_weak_count::__release_weak(v38);
      }
    }
    xpc_object_t v31 = (void *)*((void *)&xmmword_1EBBDD2F0 + 1);
    uint64_t v32 = (HealthEventDB *)xmmword_1EBBDD2F0;
    long long v46 = xmmword_1EBBDD2F0;
    if (!*((void *)&xmmword_1EBBDD2F0 + 1))
    {
LABEL_88:
      pthread_mutex_unlock(&ctu::Singleton<HealthEventDB,HealthEventDB,ctu::PthreadMutexGuardPolicy<HealthEventDB>>::sInstance);
      HealthEventDB::addHealthEvent(v32, 1);
      size_t v39 = (std::__shared_weak_count *)*((void *)&v46 + 1);
      if (*((void *)&v46 + 1)
        && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v46 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
        std::__shared_weak_count::__release_weak(v39);
      }
      char v28 = buf[23];
      goto LABEL_92;
    }
LABEL_87:
    atomic_fetch_add_explicit(v31 + 1, 1uLL, memory_order_relaxed);
    goto LABEL_88;
  }
LABEL_97:
  if (v7) {
    CFRelease(v7);
  }
  uint64_t v26 = v52;
  if (v52) {
    goto LABEL_100;
  }
}

void sub_1C588B720(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, void *aBlock, dispatch_object_t object, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  (*(void (**)(uint64_t))(*(void *)v35 + 8))(v35);
  pthread_mutex_unlock(&ctu::Singleton<HealthEventDB,HealthEventDB,ctu::PthreadMutexGuardPolicy<HealthEventDB>>::sInstance);
  if (*(char *)(v36 - 57) < 0) {
    operator delete(*(void **)(v36 - 80));
  }
  if (a35 < 0) {
    operator delete(__p);
  }
  MEMORY[0x1C8791160](v36 - 128);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)(v36 - 112));
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v36 - 104);
  _Unwind_Resume(a1);
}

void ___ZZN12HealthModule10initializeEN8dispatch13group_sessionEENK3__1clEv_block_invoke_40(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    uint64_t v3 = (void *)a1[4];
    xpc_object_t v4 = std::__shared_weak_count::lock(v2);
    size_t v12 = v4;
    if (v4)
    {
      uint64_t v5 = v4;
      if (a1[5])
      {
        size_t v6 = v3[11];
        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_1C5767000, v6, OS_LOG_TYPE_DEFAULT, "#I Pinging baseband to verify it is healthy", buf, 2u);
        }
        v8[0] = MEMORY[0x1E4F143A8];
        v8[1] = 0x40000000;
        void v8[2] = ___ZZN12HealthModule10initializeEN8dispatch13group_sessionEENK3__1clEv_block_invoke_41;
        v8[3] = &__block_descriptor_tmp_43;
        v8[4] = v3;
        CFDictionaryRef v7 = _Block_copy(v8);
        uint64_t v9 = v7;
        HealthModule::getBasebandFWVersion_sync(v3, &v9);
        if (v7) {
          _Block_release(v7);
        }
      }
      if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void sub_1C588BAA0(_Unwind_Exception *a1)
{
  if (v1) {
    _Block_release(v1);
  }
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v2 - 48);
  _Unwind_Resume(a1);
}

void ___ZZN12HealthModule10initializeEN8dispatch13group_sessionEENK3__1clEv_block_invoke_41(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (void *)a2;
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(NSObject ***)(a1 + 32);
  char v4 = *(unsigned char *)(a2 + 23);
  if (v4 < 0)
  {
    if (*(void *)(a2 + 8))
    {
LABEL_3:
      uint64_t v5 = v3[11];
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        if (v4 < 0) {
          uint64_t v2 = (void *)*v2;
        }
        LODWORD(v13) = 136315138;
        *(void *)((char *)&v13 + 4) = v2;
        _os_log_impl(&dword_1C5767000, v5, OS_LOG_TYPE_DEFAULT, "#I Successfully received ping response from baseband (firmware version is %s)", (uint8_t *)&v13, 0xCu);
      }
      pthread_mutex_lock(&ctu::Singleton<HealthEventDB,HealthEventDB,ctu::PthreadMutexGuardPolicy<HealthEventDB>>::sInstance);
      if (!(void)xmmword_1EBBDD2F0)
      {
        CFDictionaryRef v7 = (HealthEventDB *)operator new(0xA0uLL);
        HealthEventDB::HealthEventDB(v7);
        size_t v6 = operator new(0x20uLL);
        void *v6 = &unk_1F20F4858;
        v6[1] = 0;
        v6[2] = 0;
        void v6[3] = v7;
        int v10 = (std::__shared_weak_count *)*((void *)&xmmword_1EBBDD2F0 + 1);
        *(void *)&xmmword_1EBBDD2F0 = v7;
        *((void *)&xmmword_1EBBDD2F0 + 1) = v6;
        if (!v10)
        {
          *(void *)&long long v13 = v7;
          *((void *)&v13 + 1) = v6;
          goto LABEL_21;
        }
        if (!atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
      size_t v6 = (void *)*((void *)&xmmword_1EBBDD2F0 + 1);
      CFDictionaryRef v7 = (HealthEventDB *)xmmword_1EBBDD2F0;
      long long v13 = xmmword_1EBBDD2F0;
      if (!*((void *)&xmmword_1EBBDD2F0 + 1))
      {
LABEL_22:
        pthread_mutex_unlock(&ctu::Singleton<HealthEventDB,HealthEventDB,ctu::PthreadMutexGuardPolicy<HealthEventDB>>::sInstance);
        HealthEventDB::addHealthEvent(v7, 3);
        size_t v12 = (std::__shared_weak_count *)*((void *)&v13 + 1);
        if (*((void *)&v13 + 1))
        {
          if (!atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
            std::__shared_weak_count::__release_weak(v12);
          }
        }
        return;
      }
LABEL_21:
      atomic_fetch_add_explicit(v6 + 1, 1uLL, memory_order_relaxed);
      goto LABEL_22;
    }
  }
  else if (*(unsigned char *)(a2 + 23))
  {
    goto LABEL_3;
  }
  pthread_mutex_lock(&ctu::Singleton<HealthEventDB,HealthEventDB,ctu::PthreadMutexGuardPolicy<HealthEventDB>>::sInstance);
  if (!(void)xmmword_1EBBDD2F0)
  {
    uint64_t v9 = (HealthEventDB *)operator new(0xA0uLL);
    HealthEventDB::HealthEventDB(v9);
    xpc_object_t v8 = operator new(0x20uLL);
    void *v8 = &unk_1F20F4858;
    v8[1] = 0;
    void v8[2] = 0;
    v8[3] = v9;
    size_t v11 = (std::__shared_weak_count *)*((void *)&xmmword_1EBBDD2F0 + 1);
    *(void *)&xmmword_1EBBDD2F0 = v9;
    *((void *)&xmmword_1EBBDD2F0 + 1) = v8;
    if (!v11)
    {
      *(void *)&long long v13 = v9;
      *((void *)&v13 + 1) = v8;
      goto LABEL_27;
    }
    if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  xpc_object_t v8 = (void *)*((void *)&xmmword_1EBBDD2F0 + 1);
  uint64_t v9 = (HealthEventDB *)xmmword_1EBBDD2F0;
  long long v13 = xmmword_1EBBDD2F0;
  if (*((void *)&xmmword_1EBBDD2F0 + 1)) {
LABEL_27:
  }
    atomic_fetch_add_explicit(v8 + 1, 1uLL, memory_order_relaxed);
  pthread_mutex_unlock(&ctu::Singleton<HealthEventDB,HealthEventDB,ctu::PthreadMutexGuardPolicy<HealthEventDB>>::sInstance);
  HealthEventDB::addHealthEvent(v9, 4);
  if (*((void *)&v13 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    (*(void (**)(void))(**((void **)&v13 + 1) + 16))(*((void *)&v13 + 1));
    std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v13 + 1));
  }

  HealthModule::checkFailuresAgainstThresholdAndEraseEFSAccordingly_sync(v3);
}

void sub_1C588BE14(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  pthread_mutex_unlock(&ctu::Singleton<HealthEventDB,HealthEventDB,ctu::PthreadMutexGuardPolicy<HealthEventDB>>::sInstance);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_40c37_ZTSNSt3__18weak_ptrI12HealthModuleEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c37_ZTSNSt3__18weak_ptrI12HealthModuleEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void ___ZZN12HealthModule10initializeEN8dispatch13group_sessionEENK3__1clEv_block_invoke_49(void *a1, abm::client::Event **a2)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    uint64_t v5 = a1[4];
    size_t v6 = std::__shared_weak_count::lock(v3);
    uint64_t v26 = v6;
    if (v6)
    {
      if (!a1[5])
      {
        uint64_t v17 = v6;
LABEL_47:
        if (!atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
        return;
      }
      CFTypeRef cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
      abm::client::Event::getData((uint64_t *)&cf, *a2);
      if (cf) {
        CFDictionaryRef v7 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
      }
      else {
        CFDictionaryRef v7 = 0;
      }
      if (!v7)
      {
        xpc_object_t v18 = *(NSObject **)(v5 + 88);
        if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(__p[0]) = 0;
          _os_log_impl(&dword_1C5767000, v18, OS_LOG_TYPE_DEFAULT, "#I Empty info passed", (uint8_t *)__p, 2u);
        }
        CFTypeRef v19 = cf;
        if (!cf)
        {
LABEL_46:
          uint64_t v17 = v26;
          if (!v26) {
            return;
          }
          goto LABEL_47;
        }
LABEL_45:
        CFRelease(v19);
        goto LABEL_46;
      }
      v23[0] = 0xAAAAAAAAAAAAAAAALL;
      v23[1] = 0xAAAAAAAAAAAAAAAALL;
      ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v23, (const __CFDictionary *)cf);
      memset(__p, 170, 24);
      xpc_object_t v8 = (const char *)*MEMORY[0x1E4F4C898];
      char v29 = 0;
      LOBYTE(buf) = 0;
      ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v27, v8);
      ctu::cf::map_adapter::getString();
      MEMORY[0x1C8791110](&v27);
      if (v29 < 0) {
        operator delete((void *)buf);
      }
      uint64_t v9 = *(NSObject **)(v5 + 88);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        int v10 = __p;
        if (SHIBYTE(__p[2]) < 0) {
          int v10 = (void **)__p[0];
        }
        LODWORD(buf) = 136315138;
        *(void *)((char *)&buf + 4) = v10;
        _os_log_impl(&dword_1C5767000, v9, OS_LOG_TYPE_DEFAULT, "#I %s detected", (uint8_t *)&buf, 0xCu);
      }
      char v11 = HIBYTE(__p[2]);
      if (SHIBYTE(__p[2]) >= 0) {
        size_t v12 = HIBYTE(__p[2]);
      }
      else {
        size_t v12 = (size_t)__p[1];
      }
      if (v12 != strlen((const char *)*MEMORY[0x1E4F4D1E8])
        || (SHIBYTE(__p[2]) >= 0 ? (long long v13 = __p) : (long long v13 = (void **)__p[0]),
            memcmp(v13, (const void *)*MEMORY[0x1E4F4D1E8], v12)))
      {
LABEL_41:
        if (v11 < 0)
        {
          operator delete(__p[0]);
          MEMORY[0x1C8791160](v23);
          CFTypeRef v19 = cf;
          if (!cf) {
            goto LABEL_46;
          }
        }
        else
        {
          MEMORY[0x1C8791160](v23);
          CFTypeRef v19 = cf;
          if (!cf) {
            goto LABEL_46;
          }
        }
        goto LABEL_45;
      }
      uint64_t v14 = *(NSObject **)(v5 + 88);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(buf) = 0;
        _os_log_impl(&dword_1C5767000, v14, OS_LOG_TYPE_DEFAULT, "#I Cleaning up health event db due to change in hardware model", (uint8_t *)&buf, 2u);
      }
      pthread_mutex_lock(&ctu::Singleton<HealthEventDB,HealthEventDB,ctu::PthreadMutexGuardPolicy<HealthEventDB>>::sInstance);
      if (!(void)xmmword_1EBBDD2F0)
      {
        uint64_t v16 = (HealthEventDB *)operator new(0xA0uLL);
        HealthEventDB::HealthEventDB(v16);
        xpc_object_t v15 = operator new(0x20uLL);
        void *v15 = &unk_1F20F4858;
        v15[1] = 0;
        v15[2] = 0;
        void v15[3] = v16;
        size_t v20 = (std::__shared_weak_count *)*((void *)&xmmword_1EBBDD2F0 + 1);
        *(void *)&xmmword_1EBBDD2F0 = v16;
        *((void *)&xmmword_1EBBDD2F0 + 1) = v15;
        if (!v20)
        {
          *(void *)&long long buf = v16;
          *((void *)&buf + 1) = v15;
          goto LABEL_36;
        }
        if (!atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
        }
      }
      xpc_object_t v15 = (void *)*((void *)&xmmword_1EBBDD2F0 + 1);
      uint64_t v16 = (HealthEventDB *)xmmword_1EBBDD2F0;
      long long buf = xmmword_1EBBDD2F0;
      if (!*((void *)&xmmword_1EBBDD2F0 + 1))
      {
LABEL_37:
        pthread_mutex_unlock(&ctu::Singleton<HealthEventDB,HealthEventDB,ctu::PthreadMutexGuardPolicy<HealthEventDB>>::sInstance);
        HealthEventDB::clearDB(v16);
        uint64_t v21 = (std::__shared_weak_count *)*((void *)&buf + 1);
        if (*((void *)&buf + 1)
          && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&buf + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
        char v11 = HIBYTE(__p[2]);
        goto LABEL_41;
      }
LABEL_36:
      atomic_fetch_add_explicit(v15 + 1, 1uLL, memory_order_relaxed);
      goto LABEL_37;
    }
  }
}

void sub_1C588C328(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, const void *a18, __int16 a19, char a20,char a21)
{
  (*(void (**)(uint64_t))(*(void *)v21 + 8))(v21);
  pthread_mutex_unlock(&ctu::Singleton<HealthEventDB,HealthEventDB,ctu::PthreadMutexGuardPolicy<HealthEventDB>>::sInstance);
  if (a14 < 0) {
    operator delete(__p);
  }
  MEMORY[0x1C8791160](&a16);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&a18);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t ___ZNK3ctu20SharedSynchronizableI12HealthModuleE15execute_wrappedEU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t __copy_helper_block_e8_40c41_ZTSNSt3__110shared_ptrIK12HealthModuleEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c41_ZTSNSt3__110shared_ptrIK12HealthModuleEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void ctu::SharedLoggable<HealthModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(void *a1)
{
  *a1 = &unk_1F20F9388;
  MEMORY[0x1C8790F40](a1 + 1);
  uint64_t v2 = a1[12];
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = a1[11];
  if (v3) {
    dispatch_release(v3);
  }
  char v4 = (std::__shared_weak_count *)a1[10];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }

  operator delete(a1);
}

void boost::throw_exception<std::length_error>(const std::logic_error *a1)
{
  exception = __cxa_allocate_exception(0x40uLL);
  uint64_t v3 = (void *)boost::wrapexcept<std::length_error>::wrapexcept((uint64_t)exception, a1);
}

uint64_t boost::wrapexcept<std::length_error>::wrapexcept(uint64_t a1, const std::logic_error *a2)
{
  *(void *)a1 = &unk_1F20F2300;
  std::logic_error::logic_error((std::logic_error *)(a1 + 8), a2);
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = -1;
  *(void *)a1 = &unk_1F20F95C8;
  *(void *)(a1 + 8) = &unk_1F20F95F8;
  *(void *)(a1 + 24) = &unk_1F20F9620;
  return a1;
}

uint64_t boost::wrapexcept<std::length_error>::~wrapexcept(uint64_t a1)
{
  *(void *)(a1 + 24) = &unk_1F20F2358;
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2 && (*(unsigned int (**)(uint64_t))(*(void *)v2 + 32))(v2)) {
    *(void *)(a1 + 32) = 0;
  }
  MEMORY[0x1C8791C30](a1 + 8);
  return a1;
}

char *boost::wrapexcept<std::length_error>::clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x40uLL);
  *(void *)uint64_t v2 = &unk_1F20F2300;
  std::logic_error::logic_error((std::logic_error *)(v2 + 8), (const std::logic_error *)(a1 + 8));
  *((void *)v2 + 1) = MEMORY[0x1E4FBA4D0] + 16;
  uint64_t v3 = *(void *)(a1 + 32);
  *((void *)v2 + 3) = &unk_1F20F2358;
  *((void *)v2 + 4) = v3;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 24))(v3);
  }
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  *((_DWORD *)v2 + 14) = *(_DWORD *)(a1 + 56);
  *(void *)uint64_t v2 = &unk_1F20F95C8;
  *((void *)v2 + 1) = &unk_1F20F95F8;
  *((void *)v2 + 3) = &unk_1F20F9620;
  boost::exception_detail::copy_boost_exception((uint64_t)(v2 + 24), a1 + 24);
  return v2;
}

void boost::wrapexcept<std::length_error>::rethrow(uint64_t a1)
{
  exception = __cxa_allocate_exception(0x40uLL);
  boost::wrapexcept<std::length_error>::wrapexcept((uint64_t)exception, a1);
}

void sub_1C588C8D8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void boost::wrapexcept<std::length_error>::~wrapexcept(void *a1)
{
  a1[3] = &unk_1F20F2358;
  uint64_t v2 = a1[4];
  if (v2 && (*(unsigned int (**)(uint64_t))(*(void *)v2 + 32))(v2)) {
    a1[4] = 0;
  }
  MEMORY[0x1C8791C30](a1 + 1);

  operator delete(a1);
}

void non-virtual thunk to'boost::wrapexcept<std::length_error>::~wrapexcept(uint64_t a1)
{
  *(void *)(a1 + 16) = &unk_1F20F2358;
  uint64_t v2 = *(void *)(a1 + 24);
  if (v2 && (*(unsigned int (**)(uint64_t))(*(void *)v2 + 32))(v2)) {
    *(void *)(a1 + 24) = 0;
  }

  JUMPOUT(0x1C8791C30);
}

{
  uint64_t v2;
  uint64_t vars8;

  *(void *)(a1 + 16) = &unk_1F20F2358;
  uint64_t v2 = *(void *)(a1 + 24);
  if (v2 && (*(unsigned int (**)(uint64_t))(*(void *)v2 + 32))(v2)) {
    *(void *)(a1 + 24) = 0;
  }
  MEMORY[0x1C8791C30](a1);

  operator delete((void *)(a1 - 8));
}

void non-virtual thunk to'boost::wrapexcept<std::length_error>::~wrapexcept(void *a1)
{
  *a1 = &unk_1F20F2358;
  uint64_t v2 = a1[1];
  if (v2 && (*(unsigned int (**)(uint64_t))(*(void *)v2 + 32))(v2)) {
    a1[1] = 0;
  }

  JUMPOUT(0x1C8791C30);
}

{
  uint64_t v2;
  uint64_t vars8;

  *a1 = &unk_1F20F2358;
  uint64_t v2 = a1[1];
  if (v2 && (*(unsigned int (**)(uint64_t))(*(void *)v2 + 32))(v2)) {
    a1[1] = 0;
  }
  MEMORY[0x1C8791C30](a1 - 2);

  operator delete(a1 - 3);
}

uint64_t boost::wrapexcept<std::length_error>::wrapexcept(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F20F2300;
  std::logic_error::logic_error((std::logic_error *)(a1 + 8), (const std::logic_error *)(a2 + 8));
  *(void *)(a1 + 8) = MEMORY[0x1E4FBA4D0] + 16;
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = &unk_1F20F2358;
  *(void *)(a1 + 32) = v4;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
  }
  long long v5 = *(_OWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v5;
  *(void *)a1 = &unk_1F20F95C8;
  *(void *)(a1 + 8) = &unk_1F20F95F8;
  *(void *)(a1 + 24) = &unk_1F20F9620;
  return a1;
}

void HKWorkoutManager::create(NSObject **a1@<X0>, uint64_t *a2@<X8>)
{
  *a2 = 0xAAAAAAAAAAAAAAAALL;
  a2[1] = 0xAAAAAAAAAAAAAAAALL;
  std::allocate_shared[abi:ne180100]<HKWorkoutManager,std::allocator<HKWorkoutManager>,dispatch::workloop &,void>(a1, a2);
}

uint64_t HKWorkoutManager::HKWorkoutManager(uint64_t a1, dispatch_object_t *a2)
{
  uint64_t v3 = (uint64_t (**)(void))&unk_1F20F9670;
  *(void *)a1 = &unk_1F20F9670;
  uint64_t v4 = *a2;
  if (*a2)
  {
    dispatch_retain(*a2);
    uint64_t v3 = *(uint64_t (***)(void))a1;
  }
  long long v5 = (const char *)v3[6](a1);
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v20, "com.apple.telephony.abm", v5);
  GetABMLogServer(&v18);
  if (v4) {
    dispatch_retain(v4);
  }
  initially_inactive = dispatch_queue_attr_make_initially_inactive(0);
  CFDictionaryRef v7 = dispatch_queue_create_with_target_V2("workout.hk", initially_inactive, v4);
  dispatch_set_qos_class_floor(v7, QOS_CLASS_DEFAULT, 0);
  dispatch_activate(v7);
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = v7;
  if (v7) {
    dispatch_retain(v7);
  }
  *(void *)(a1 + 96) = v4;
  if (v4) {
    dispatch_retain(v4);
  }
  if (v7) {
    dispatch_release(v7);
  }
  if (v4) {
    dispatch_release(v4);
  }
  *(void *)a1 = &unk_1F20F9798;
  ctu::OsLogContext::OsLogContext();
  ctu::OsLogContext::OsLogContext();
  ctu::LoggerCommonBase::LoggerCommonBase();
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v22);
  *(void *)(a1 + 8) = &unk_1F20F0070;
  xpc_object_t v8 = v19;
  *(void *)(a1 + 56) = v18;
  *(void *)(a1 + 64) = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v21);
  *(void *)a1 = &unk_1F20F9828;
  uint64_t v9 = v19;
  if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v20);
  if (v4) {
    dispatch_release(v4);
  }
  *(void *)a1 = &unk_1F20F9670;
  *(void *)(a1 + 128) = 0;
  *(unsigned char *)(a1 + 136) = 0;
  *(_DWORD *)(a1 + 140) = 0;
  int v10 = (std::__shared_weak_count *)operator new(0x30uLL);
  v10->__shared_owners_ = 0;
  p_shared_owners = &v10->__shared_owners_;
  v10->__shared_weak_owners_ = 0;
  v10->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20F9748;
  v10[1].__vftable = 0;
  v10[1].__shared_owners_ = 0;
  v10[1].__shared_weak_owners_ = 0;
  id v12 = objc_alloc(MEMORY[0x1E4F2B998]);
  id v13 = objc_alloc_init(MEMORY[0x1E4F2B0C0]);
  uint64_t v14 = [v12 initWithHealthStore:v13];
  shared_weak_owners = (void *)v10[1].__shared_weak_owners_;
  v10[1].__shared_weak_owners_ = v14;

  *(void *)(a1 + 144) = v10 + 1;
  *(void *)(a1 + 152) = v10;
  shared_owners = (std::__shared_weak_count *)v10[1].__shared_owners_;
  if (shared_owners)
  {
    if (shared_owners->__shared_owners_ == -1)
    {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v10->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      v10[1].__vftable = (std::__shared_weak_count_vtbl *)&v10[1];
      v10[1].__shared_owners_ = (uint64_t)v10;
      std::__shared_weak_count::__release_weak(shared_owners);
      if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
        goto LABEL_25;
      }
    }
  }
  else
  {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v10->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v10[1].__vftable = (std::__shared_weak_count_vtbl *)&v10[1];
    v10[1].__shared_owners_ = (uint64_t)v10;
    if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL))
    {
LABEL_25:
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  return a1;
}

void sub_1C588D108(_Unwind_Exception *a1)
{
  long long v5 = *(std::__shared_weak_count **)(v2 + 32);
  if (v5) {
    std::__shared_weak_count::__release_weak(v5);
  }
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v2);
  operator delete(v6);
  std::function<void ()(abm::WorkoutType,abm::WorkoutState,abm::WorkoutLocation,abm::SwimLocation)>::~function(v1 + 13);
  ctu::SharedLoggable<HKWorkoutManager,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(v1);
  _Unwind_Resume(a1);
}

void *std::function<void ()(abm::WorkoutType,abm::WorkoutState,abm::WorkoutLocation,abm::SwimLocation)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
    return a1;
  }
  else
  {
    if (v2) {
      (*(void (**)(void *))(*v2 + 40))(v2);
    }
    return a1;
  }
}

void *ctu::SharedLoggable<HKWorkoutManager,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(void *a1)
{
  *a1 = &unk_1F20F9798;
  MEMORY[0x1C8790F40](a1 + 1);
  uint64_t v2 = a1[12];
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = a1[11];
  if (v3) {
    dispatch_release(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[10];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = &unk_1F20F9798;
  MEMORY[0x1C8790F40](a1 + 1);
  uint64_t v2 = a1[12];
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = a1[11];
  if (v3) {
    dispatch_release(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[10];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

void HKWorkoutManager::~HKWorkoutManager(HKWorkoutManager *this)
{
  *(void *)this = &unk_1F20F9670;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 19);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = (char *)this + 104;
    uint64_t v4 = (HKWorkoutManager *)*((void *)this + 16);
    if (v4 != (HKWorkoutManager *)((char *)this + 104))
    {
LABEL_4:
      if (v4) {
        (*(void (**)(HKWorkoutManager *))(*(void *)v4 + 40))(v4);
      }
      *(void *)this = &unk_1F20F9798;
      MEMORY[0x1C8790F40]((char *)this + 8);
      long long v5 = *((void *)this + 12);
      if (v5) {
        goto LABEL_7;
      }
      goto LABEL_8;
    }
  }
  else
  {
    uint64_t v3 = (char *)this + 104;
    uint64_t v4 = (HKWorkoutManager *)*((void *)this + 16);
    if (v4 != (HKWorkoutManager *)((char *)this + 104)) {
      goto LABEL_4;
    }
  }
  (*(void (**)(char *))(*(void *)v3 + 32))(v3);
  *(void *)this = &unk_1F20F9798;
  MEMORY[0x1C8790F40]((char *)this + 8);
  long long v5 = *((void *)this + 12);
  if (v5) {
LABEL_7:
  }
    dispatch_release(v5);
LABEL_8:
  size_t v6 = *((void *)this + 11);
  if (v6) {
    dispatch_release(v6);
  }
  CFDictionaryRef v7 = (std::__shared_weak_count *)*((void *)this + 10);
  if (v7) {
    std::__shared_weak_count::__release_weak(v7);
  }
}

{
  void *v1;
  uint64_t vars8;

  HKWorkoutManager::~HKWorkoutManager(this);

  operator delete(v1);
}

const char *HKWorkoutManager::getName(HKWorkoutManager *this)
{
  return "workout.hk";
}

void HKWorkoutManager::start(HKWorkoutManager *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 10);
  if (!v2 || (v3 = *((void *)this + 9), (uint64_t v4 = std::__shared_weak_count::lock(v2)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  long long v5 = v4;
  size_t v6 = operator new(8uLL);
  void *v6 = this;
  CFDictionaryRef v7 = *((void *)this + 11);
  atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  xpc_object_t v8 = operator new(0x18uLL);
  void *v8 = v6;
  v8[1] = v3;
  void v8[2] = v5;
  dispatch_async_f(v7, v8, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<HKWorkoutManager>::execute_wrapped<HKWorkoutManager::start(void)::$_0>(HKWorkoutManager::start(void)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<HKWorkoutManager::start(void)::$_0,dispatch_queue_s *::default_delete<HKWorkoutManager::start(void)::$_0>>)::{lambda(void *)#1}::__invoke);
  if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void HKWorkoutManager::stop(HKWorkoutManager *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 10);
  if (!v2 || (v3 = *((void *)this + 9), (uint64_t v4 = std::__shared_weak_count::lock(v2)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  long long v5 = v4;
  size_t v6 = operator new(8uLL);
  void *v6 = this;
  CFDictionaryRef v7 = *((void *)this + 11);
  atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  xpc_object_t v8 = operator new(0x18uLL);
  void *v8 = v6;
  v8[1] = v3;
  void v8[2] = v5;
  dispatch_async_f(v7, v8, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<HKWorkoutManager>::execute_wrapped<HKWorkoutManager::stop(void)::$_0>(HKWorkoutManager::stop(void)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<HKWorkoutManager::stop(void)::$_0,dispatch_queue_s *::default_delete<HKWorkoutManager::stop(void)::$_0>>)::{lambda(void *)#1}::__invoke);
  if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

uint64_t HKWorkoutManager::registerCallback(void *a1, void *a2)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (void *)a2[3];
  if (v3)
  {
    if (v3 == a2)
    {
      uint64_t v16 = v15;
      (*(void (**)(void *, void *))(*a2 + 24))(a2, v15);
    }
    else
    {
      uint64_t v16 = (void *)(*(uint64_t (**)(void *))(*v3 + 16))(v3);
    }
  }
  else
  {
    uint64_t v16 = 0;
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[10];
  if (!v4 || (v5 = a1[9], (size_t v6 = std::__shared_weak_count::lock(v4)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  CFDictionaryRef v7 = v6;
  xpc_object_t v8 = operator new(0x28uLL);
  uint64_t v9 = v8;
  int v10 = v16;
  void *v8 = a1;
  if (v10)
  {
    if (v10 == v15)
    {
      v8[4] = v8 + 1;
      (*(void (**)(void *))(v15[0] + 24))(v15);
    }
    else
    {
      v8[4] = v10;
      uint64_t v16 = 0;
    }
  }
  else
  {
    v8[4] = 0;
  }
  char v11 = a1[11];
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  id v12 = operator new(0x18uLL);
  void *v12 = v9;
  v12[1] = v5;
  v12[2] = v7;
  dispatch_async_f(v11, v12, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<HKWorkoutManager>::execute_wrapped<HKWorkoutManager::registerCallback(std::function<void ()(abm::WorkoutType,abm::WorkoutState,abm::WorkoutLocation,abm::SwimLocation)>)::$_0>(HKWorkoutManager::registerCallback(std::function<void ()(abm::WorkoutType,abm::WorkoutState,abm::WorkoutLocation,abm::SwimLocation)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<HKWorkoutManager::registerCallback(std::function<void ()(abm::WorkoutType,abm::WorkoutState,abm::WorkoutLocation,abm::SwimLocation)>)::$_0,std::default_delete<HKWorkoutManager::registerCallback(std::function<void ()(abm::WorkoutType,abm::WorkoutState,abm::WorkoutLocation,abm::SwimLocation)>)::$_0>>)::{lambda(void *)#1}::__invoke);
  if (atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    uint64_t result = (uint64_t)v16;
    if (v16 != v15) {
      goto LABEL_15;
    }
    return (*(uint64_t (**)(void *))(v15[0] + 32))(v15);
  }
  ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
  std::__shared_weak_count::__release_weak(v7);
  uint64_t result = (uint64_t)v16;
  if (v16 == v15) {
    return (*(uint64_t (**)(void *))(v15[0] + 32))(v15);
  }
LABEL_15:
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 40))(result);
  }
  return result;
}

void sub_1C588D8AC(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t ctu::Loggable<HKWorkoutManager,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig(uint64_t a1)
{
  return MEMORY[0x1F417DA50](a1 + 8);
}

size_t ctu::Loggable<HKWorkoutManager,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = (const char *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 48))(a1);
  size_t result = strlen(v3);
  if (result >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v5 = result;
  if (result >= 0x17)
  {
    uint64_t v6 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17) {
      uint64_t v6 = result | 7;
    }
    uint64_t v7 = v6 + 1;
    xpc_object_t v8 = operator new(v6 + 1);
    a2[1] = v5;
    a2[2] = v7 | 0x8000000000000000;
    *a2 = v8;
    a2 = v8;
  }
  else
  {
    *((unsigned char *)a2 + 23) = result;
    if (!result)
    {
      *(unsigned char *)a2 = 0;
      return result;
    }
  }
  size_t result = (size_t)memmove(a2, v3, v5);
  *((unsigned char *)a2 + v5) = 0;
  return result;
}

uint64_t ctu::Loggable<HKWorkoutManager,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return MEMORY[0x1F417DD10](a1 + 8);
}

void std::__shared_ptr_emplace<HealthStoreManager>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20F9748;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<HealthStoreManager>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20F9748;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_emplace<HealthStoreManager>::__on_zero_shared(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2)
  {
    std::__shared_weak_count::__release_weak(v2);
  }
}

void *ctu::Loggable<HKWorkoutManager,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_1F20F9798;
  MEMORY[0x1C8790F40](a1 + 1);
  return a1;
}

void ctu::Loggable<HKWorkoutManager,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_1F20F9798;
  MEMORY[0x1C8790F40](a1 + 1);

  operator delete(a1);
}

void std::allocate_shared[abi:ne180100]<HKWorkoutManager,std::allocator<HKWorkoutManager>,dispatch::workloop &,void>(NSObject **a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v4 = (std::__shared_weak_count *)operator new(0xB8uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = &v4->__shared_owners_;
  v4->__shared_weak_owners_ = 0;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20F97D8;
  uint64_t v6 = (uint64_t)&v4[1];
  uint64_t v7 = *a1;
  dispatch_object_t v9 = v7;
  if (v7) {
    dispatch_retain(v7);
  }
  HKWorkoutManager::HKWorkoutManager(v6, &v9);
  if (v7) {
    dispatch_release(v7);
  }
  *a2 = v6;
  a2[1] = (uint64_t)v4;
  shared_owners = (std::__shared_weak_count *)v4[4].__shared_owners_;
  if (shared_owners)
  {
    if (shared_owners->__shared_owners_ != -1) {
      return;
    }
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v4[4].__vftable = (std::__shared_weak_count_vtbl *)v6;
    v4[4].__shared_owners_ = (uint64_t)v4;
    std::__shared_weak_count::__release_weak(shared_owners);
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      return;
    }
  }
  else
  {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v4[4].__vftable = (std::__shared_weak_count_vtbl *)v6;
    v4[4].__shared_owners_ = (uint64_t)v4;
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      return;
    }
  }
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);

  std::__shared_weak_count::__release_weak(v4);
}

void sub_1C588DC54(_Unwind_Exception *a1)
{
  if (v2) {
    dispatch_release(v2);
  }
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v4);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<HKWorkoutManager>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20F97D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<HKWorkoutManager>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20F97D8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t std::__shared_ptr_emplace<HKWorkoutManager>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void ctu::SharedLoggable<HKWorkoutManager,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(void *a1)
{
  *a1 = &unk_1F20F9798;
  MEMORY[0x1C8790F40](a1 + 1);
  uint64_t v2 = a1[12];
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = a1[11];
  if (v3) {
    dispatch_release(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[10];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }

  operator delete(a1);
}

void dispatch::async<void ctu::SharedSynchronizable<HKWorkoutManager>::execute_wrapped<HKWorkoutManager::start(void)::$_0>(HKWorkoutManager::start(void)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<HKWorkoutManager::start(void)::$_0,dispatch_queue_s *::default_delete<HKWorkoutManager::start(void)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *a1;
  uint64_t v3 = **a1;
  if (!*(unsigned char *)(v3 + 136))
  {
    *(unsigned char *)(v3 + 136) = 1;
    uint64_t v4 = *(std::__shared_weak_count **)(v3 + 80);
    if (!v4 || (v5 = *(void *)(v3 + 72), (uint64_t v6 = std::__shared_weak_count::lock(v4)) == 0)) {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    uint64_t v7 = v6;
    p_shared_weak_owners = &v6->__shared_weak_owners_;
    atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v7);
    }
    dispatch_object_t v9 = (const char *)*MEMORY[0x1E4F2BDE8];
    int v10 = *(NSObject **)(v3 + 88);
    handler[0] = MEMORY[0x1E4F143A8];
    handler[1] = 3321888768;
    handler[2] = ___ZZN16HKWorkoutManager5startEvENK3__0clEv_block_invoke;
    handler[3] = &__block_descriptor_56_ea8_40c41_ZTSNSt3__18weak_ptrI16HKWorkoutManagerEE_e8_v12__0i8l;
    handler[4] = v3;
    handler[5] = v5;
    uint64_t v18 = v7;
    atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
    notify_register_dispatch(v9, (int *)(v3 + 140), v10, handler);
    char v11 = *(NSObject **)(v3 + 40);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v16 = 0;
      _os_log_impl(&dword_1C5767000, v11, OS_LOG_TYPE_DEFAULT, "#I Workout manager started", v16, 2u);
    }
    uint64_t v12 = *(void *)(v3 + 128);
    if (v12)
    {
      id v13 = *(uint64_t **)(v3 + 144);
      if (v12 == v3 + 104)
      {
        size_t v20 = v19;
        (*(void (**)(uint64_t, void *))(*(void *)v12 + 24))(v12, v19);
      }
      else
      {
        size_t v20 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v12 + 16))(v12);
      }
      HealthStoreManager::queryWorkoutInfo(v13, v19);
      if (v20 == v19)
      {
        (*(void (**)(void *))(v19[0] + 32))(v19);
        uint64_t v14 = v18;
        if (!v18) {
          goto LABEL_17;
        }
        goto LABEL_16;
      }
      if (v20) {
        (*(void (**)(void))(*v20 + 40))();
      }
    }
    uint64_t v14 = v18;
    if (!v18)
    {
LABEL_17:
      std::__shared_weak_count::__release_weak(v7);
      goto LABEL_18;
    }
LABEL_16:
    std::__shared_weak_count::__release_weak(v14);
    goto LABEL_17;
  }
LABEL_18:
  operator delete(v2);
  xpc_object_t v15 = (std::__shared_weak_count *)a1[2];
  if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  operator delete(a1);
}

void sub_1C588E0D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (a21 == v24)
  {
    (*(void (**)(uint64_t *))(a18 + 32))(&a18);
  }
  else if (a21)
  {
    (*(void (**)(void))(*(void *)a21 + 40))();
  }
  if (a17) {
    std::__shared_weak_count::__release_weak(a17);
  }
  std::__shared_weak_count::__release_weak(v23);
  operator delete(v22);
  uint64_t v26 = (std::__shared_weak_count *)v21[2];
  if (v26)
  {
    if (!atomic_fetch_add(&v26->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  operator delete(v21);
  _Unwind_Resume(a1);
}

void ___ZZN16HKWorkoutManager5startEvENK3__0clEv_block_invoke(void *a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    uint64_t v3 = (void *)a1[4];
    uint64_t v4 = std::__shared_weak_count::lock(v2);
    char v11 = v4;
    if (v4)
    {
      uint64_t v5 = v4;
      if (!a1[5]) {
        goto LABEL_13;
      }
      uint64_t v6 = v3[5];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)dispatch_object_t v9 = 0;
        _os_log_impl(&dword_1C5767000, v6, OS_LOG_TYPE_DEFAULT, "#I Workout notification received", v9, 2u);
      }
      uint64_t v7 = (void *)v3[16];
      if (!v7)
      {
LABEL_13:
        if (atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
          return;
        }
        goto LABEL_14;
      }
      xpc_object_t v8 = (uint64_t *)v3[18];
      if (v7 == v3 + 13)
      {
        id v13 = v12;
        (*(void (**)(void *, void *))(*v7 + 24))(v7, v12);
      }
      else
      {
        id v13 = (void *)(*(uint64_t (**)(void *))(*v7 + 16))(v7);
      }
      HealthStoreManager::queryWorkoutInfo(v8, v12);
      if (v13 != v12)
      {
        if (v13) {
          (*(void (**)(void))(*v13 + 40))();
        }
        goto LABEL_13;
      }
      (*(void (**)(void *))(v12[0] + 32))(v12);
      if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
LABEL_14:
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void sub_1C588E3BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  std::function<void ()(abm::WorkoutType,abm::WorkoutState,abm::WorkoutLocation,abm::SwimLocation)>::~function((uint64_t *)va1);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1C588E3D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void HealthStoreManager::queryWorkoutInfo(uint64_t *a1, void *a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (std::__shared_weak_count *)a1[1];
  if (!v3 || (v5 = *a1, (uint64_t v6 = std::__shared_weak_count::lock(v3)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v7 = v6;
  p_shared_weak_owners = &v6->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v7);
  }
  dispatch_object_t v9 = (void *)a1[2];
  v12[0] = MEMORY[0x1E4F143A8];
  v12[1] = 3321888768;
  v12[2] = ___ZN18HealthStoreManager16queryWorkoutInfoENSt3__18functionIFvN3abm11WorkoutTypeENS2_12WorkoutStateENS2_15WorkoutLocationENS2_12SwimLocationEEEE_block_invoke;
  void v12[3] = &__block_descriptor_80_ea8_32c43_ZTSNSt3__18weak_ptrI18HealthStoreManagerEE48c105_ZTSNSt3__18functionIFvN3abm11WorkoutTypeENS1_12WorkoutStateENS1_15WorkoutLocationENS1_12SwimLocationEEEE_e47_v24__0___HKCurrentWorkoutSnapshot_8__NSError_16l;
  v12[4] = v5;
  id v13 = v7;
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  uint64_t v10 = a2[3];
  if (!v10) {
    goto LABEL_8;
  }
  if ((void *)v10 != a2)
  {
    uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 16))(v10);
LABEL_8:
    xpc_object_t v15 = (void *)v10;
    goto LABEL_10;
  }
  xpc_object_t v15 = v14;
  (*(void (**)(void *, void *))(*a2 + 24))(a2, v14);
LABEL_10:
  [v9 currentWorkoutSnapshotWithCompletion:v12];
  if (v15 == v14)
  {
    (*(void (**)(void *))(v14[0] + 32))(v14);
    char v11 = v13;
    if (!v13) {
      goto LABEL_15;
    }
    goto LABEL_14;
  }
  if (v15) {
    (*(void (**)(void))(*v15 + 40))();
  }
  char v11 = v13;
  if (v13) {
LABEL_14:
  }
    std::__shared_weak_count::__release_weak(v11);
LABEL_15:
  std::__shared_weak_count::__release_weak(v7);
}

void sub_1C588E608(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15)
{
  if (a15) {
    std::__shared_weak_count::__release_weak(a15);
  }
  std::__shared_weak_count::__release_weak(v15);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_ea8_40c41_ZTSNSt3__18weak_ptrI16HKWorkoutManagerEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_ea8_40c41_ZTSNSt3__18weak_ptrI16HKWorkoutManagerEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void ___ZN18HealthStoreManager16queryWorkoutInfoENSt3__18functionIFvN3abm11WorkoutTypeENS2_12WorkoutStateENS2_15WorkoutLocationENS2_12SwimLocationEEEE_block_invoke(void *a1, void *a2, void *a3)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = (std::__shared_weak_count *)a1[5];
  if (v7)
  {
    xpc_object_t v8 = std::__shared_weak_count::lock(v7);
    uint64_t v26 = v8;
    if (v8)
    {
      dispatch_object_t v9 = v8;
      uint64_t v25 = a1[4];
      if (v25)
      {
        uint64_t v10 = a1[9];
        if (v10)
        {
          BOOL v11 = os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT);
          if (v5)
          {
            if (v11)
            {
              uint64_t v12 = [v5 configuration];
              *(_DWORD *)long long buf = 134218240;
              uint64_t v30 = [v12 activityType];
              __int16 v31 = 2048;
              uint64_t v32 = [v5 state];
              _os_log_impl(&dword_1C5767000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "#I Workout callback; activity=%lu  session=%lu",
                buf,
                0x16u);
            }
            id v13 = [v5 configuration:v25, v26];
            uint64_t v14 = [v13 activityType];

            int v15 = 1;
            switch(v14)
            {
              case 13:
                int v15 = 4;
                break;
              case 16:
                int v15 = 3;
                break;
              case 35:
                int v15 = 7;
                break;
              case 37:
                int v15 = 6;
                break;
              case 46:
                break;
              case 52:
                int v15 = 2;
                break;
              case 63:
                int v15 = 8;
                break;
              case 68:
                int v15 = 5;
                break;
              default:
                int v15 = 9;
                break;
            }
            uint64_t v16 = [v5 state];
            if (v16 == 2) {
              int v17 = 1;
            }
            else {
              int v17 = 2 * (v16 == 4);
            }
            uint64_t v18 = [v5 configuration];
            uint64_t v19 = [v18 locationType];

            if ((unint64_t)(v19 - 1) >= 3) {
              int v20 = 3;
            }
            else {
              int v20 = v19 - 1;
            }
            uint64_t v21 = [v5 configuration];
            unint64_t v22 = [v21 swimmingLocationType];

            int v23 = 3;
            if (v22 < 3) {
              int v23 = v22;
            }
            *(_DWORD *)long long buf = v15;
            int v27 = v23;
            unint64_t v28 = __PAIR64__(v17, v20);
            uint64_t v24 = a1[9];
            if (!v24) {
              std::__throw_bad_function_call[abi:ne180100]();
            }
            (*(void (**)(uint64_t, uint8_t *, char *, unint64_t *, int *))(*(void *)v24 + 48))(v24, buf, (char *)&v28 + 4, &v28, &v27);
          }
          else
          {
            if (v11)
            {
              *(_WORD *)long long buf = 0;
              _os_log_impl(&dword_1C5767000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "#I Workout callback with no data", buf, 2u);
              uint64_t v10 = a1[9];
              *(_DWORD *)long long buf = 0;
              unint64_t v28 = 0;
              int v27 = 0;
              if (!v10) {
                std::__throw_bad_function_call[abi:ne180100]();
              }
            }
            else
            {
              *(_DWORD *)long long buf = 0;
              unint64_t v28 = 0;
              int v27 = 0;
            }
            (*(void (**)(uint64_t, uint8_t *, char *, unint64_t *, int *))(*(void *)v10 + 48))(v10, buf, (char *)&v28 + 4, &v28, &v27);
          }
        }
      }
      if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
}

void sub_1C588E9B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);

  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_ea8_32c43_ZTSNSt3__18weak_ptrI18HealthStoreManagerEE48c105_ZTSNSt3__18functionIFvN3abm11WorkoutTypeENS1_12WorkoutStateENS1_15WorkoutLocationENS1_12SwimLocationEEEE(void *a1, void *a2)
{
  uint64_t v3 = a2[5];
  a1[4] = a2[4];
  a1[5] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  uint64_t result = a2[9];
  if (!result) {
    goto LABEL_6;
  }
  if ((void *)result != a2 + 6)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 16))(result);
LABEL_6:
    a1[9] = result;
    return result;
  }
  a1[9] = a1 + 6;
  return (*(uint64_t (**)(void, void *))(*(void *)a2[9] + 24))(a2[9], a1 + 6);
}

void sub_1C588EBB4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 40);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_ea8_32c43_ZTSNSt3__18weak_ptrI18HealthStoreManagerEE48c105_ZTSNSt3__18functionIFvN3abm11WorkoutTypeENS1_12WorkoutStateENS1_15WorkoutLocationENS1_12SwimLocationEEEE(uint64_t a1)
{
  uint64_t v2 = a1 + 48;
  uint64_t v3 = *(void *)(a1 + 72);
  if (v3 == v2)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 32))(v2);
    uint64_t v4 = *(std::__shared_weak_count **)(a1 + 40);
    if (!v4) {
      return;
    }
    goto LABEL_5;
  }
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 40))(v3);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 40);
  if (v4)
  {
LABEL_5:
    std::__shared_weak_count::__release_weak(v4);
  }
}

void dispatch::async<void ctu::SharedSynchronizable<HKWorkoutManager>::execute_wrapped<HKWorkoutManager::stop(void)::$_0>(HKWorkoutManager::stop(void)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<HKWorkoutManager::stop(void)::$_0,dispatch_queue_s *::default_delete<HKWorkoutManager::stop(void)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = **a1;
  if (*(unsigned char *)(v3 + 136))
  {
    *(unsigned char *)(v3 + 136) = 0;
    int v4 = *(_DWORD *)(v3 + 140);
    if (v4)
    {
      notify_cancel(v4);
      *(_DWORD *)(v3 + 140) = 0;
    }
    id v5 = *(NSObject **)(v3 + 40);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v7 = 0;
      _os_log_impl(&dword_1C5767000, v5, OS_LOG_TYPE_DEFAULT, "#I Workout manager stopped", v7, 2u);
    }
  }
  operator delete(v2);
  id v6 = (std::__shared_weak_count *)a1[2];
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  operator delete(a1);
}

void sub_1C588ED60(_Unwind_Exception *a1)
{
  operator delete(v2);
  int v4 = (std::__shared_weak_count *)v1[2];
  if (v4)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void dispatch::async<void ctu::SharedSynchronizable<HKWorkoutManager>::execute_wrapped<HKWorkoutManager::registerCallback(std::function<void ()(abm::WorkoutType,abm::WorkoutState,abm::WorkoutLocation,abm::SwimLocation)>)::$_0>(HKWorkoutManager::registerCallback(std::function<void ()(abm::WorkoutType,abm::WorkoutState,abm::WorkoutLocation,abm::SwimLocation)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<HKWorkoutManager::registerCallback(std::function<void ()(abm::WorkoutType,abm::WorkoutState,abm::WorkoutLocation,abm::SwimLocation)>)::$_0,std::default_delete<HKWorkoutManager::registerCallback(std::function<void ()(abm::WorkoutType,abm::WorkoutState,abm::WorkoutLocation,abm::SwimLocation)>)::$_0>>)::{lambda(void *)#1}::__invoke(std::__shared_weak_count **a1)
{
  void v15[3] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *a1;
  uint64_t v3 = (*a1)->__vftable;
  uint64_t p_shared_owners = (uint64_t)&(*a1)->__shared_owners_;
  uint64_t shared_owners = (*a1)[1].__shared_owners_;
  if (!shared_owners) {
    goto LABEL_4;
  }
  if (shared_owners != p_shared_owners)
  {
    uint64_t shared_owners = (*(uint64_t (**)(uint64_t))(*(void *)shared_owners + 16))(shared_owners);
LABEL_4:
    uint64_t v14 = (void (__cdecl *)(std::__shared_weak_count *__hidden))shared_owners;
    goto LABEL_6;
  }
  uint64_t v14 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v13;
  (*(void (**)(uint64_t, void *))(*(void *)p_shared_owners + 24))(p_shared_owners, v13);
LABEL_6:
  p_get_deleter = &v3[2].__get_deleter;
  if (&v3[2].__get_deleter == v13) {
    goto LABEL_15;
  }
  uint64_t v7 = v14;
  xpc_object_t v8 = v3[3].~__shared_weak_count_0;
  if ((char *)v14 != (char *)v13)
  {
    if ((char *)v8 != (char *)p_get_deleter)
    {
      uint64_t v14 = v3[3].~__shared_weak_count_0;
      v3[3].~__shared_weak_count_0 = v7;
      dispatch_object_t v9 = v8;
      if ((char *)v8 == (char *)v13) {
        goto LABEL_24;
      }
      goto LABEL_16;
    }
    (*((void (**)(const void *(__cdecl **)(const std::__shared_weak_count *__hidden, const std::type_info *), void *))*p_get_deleter
     + 3))(&v3[2].__get_deleter, v13);
    (*(void (**)(void (__cdecl *)(std::__shared_weak_count *__hidden)))(*(void *)v3[3].~__shared_weak_count_0
                                                                                 + 32))(v3[3].~__shared_weak_count_0);
    v3[3].~__shared_weak_count_0 = v14;
    uint64_t v14 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v13;
LABEL_15:
    dispatch_object_t v9 = v14;
    if ((char *)v14 == (char *)v13) {
      goto LABEL_24;
    }
    goto LABEL_16;
  }
  if ((char *)v8 == (char *)p_get_deleter)
  {
    memset(v15, 170, 24);
    (*(void (**)(void *, void *))(v13[0] + 24))(v13, v15);
    (*(void (**)(void (__cdecl *)(std::__shared_weak_count *__hidden)))(*(void *)v14 + 32))(v14);
    uint64_t v14 = 0;
    (*(void (**)(void (__cdecl *)(std::__shared_weak_count *__hidden), void *))(*(void *)v3[3].~__shared_weak_count_0
                                                                                           + 24))(v3[3].~__shared_weak_count_0, v13);
    (*(void (**)(void (__cdecl *)(std::__shared_weak_count *__hidden)))(*(void *)v3[3].~__shared_weak_count_0
                                                                                 + 32))(v3[3].~__shared_weak_count_0);
    v3[3].~__shared_weak_count_0 = 0;
    uint64_t v14 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v13;
    (*(void (**)(void *, const void *(__cdecl **)(const std::__shared_weak_count *__hidden, const std::type_info *)))(v15[0] + 24))(v15, &v3[2].__get_deleter);
    (*(void (**)(void *))(v15[0] + 32))(v15);
    v3[3].~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))p_get_deleter;
    dispatch_object_t v9 = v14;
    if ((char *)v14 == (char *)v13) {
      goto LABEL_24;
    }
  }
  else
  {
    (*(void (**)(void *, const void *(__cdecl **)(const std::__shared_weak_count *__hidden, const std::type_info *)))(v13[0] + 24))(v13, &v3[2].__get_deleter);
    (*(void (**)(void (__cdecl *)(std::__shared_weak_count *__hidden)))(*(void *)v14 + 32))(v14);
    uint64_t v14 = v3[3].~__shared_weak_count_0;
    uint64_t v10 = v14;
    v3[3].~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))p_get_deleter;
    dispatch_object_t v9 = v10;
    if ((char *)v10 == (char *)v13)
    {
LABEL_24:
      (*(void (**)(void *))(v13[0] + 32))(v13);
      uint64_t v11 = v2[1].__shared_owners_;
      if (v11 == p_shared_owners) {
        goto LABEL_25;
      }
      goto LABEL_19;
    }
  }
LABEL_16:
  if (v9) {
    (*(void (**)(void (__cdecl *)(std::__shared_weak_count *__hidden)))(*(void *)v9 + 40))(v9);
  }
  uint64_t v11 = v2[1].__shared_owners_;
  if (v11 == p_shared_owners)
  {
LABEL_25:
    (*(void (**)(uint64_t))(*(void *)p_shared_owners + 32))(p_shared_owners);
    operator delete(v2);
    uint64_t v12 = a1[2];
    if (!v12) {
      goto LABEL_28;
    }
    goto LABEL_26;
  }
LABEL_19:
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 40))(v11);
  }
  operator delete(v2);
  uint64_t v12 = a1[2];
  if (v12)
  {
LABEL_26:
    if (!atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
LABEL_28:
  operator delete(a1);
}

void sub_1C588F230(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t hasBasebandEntitlement(xpc_object_t *a1, char a2)
{
  uint64_t v4 = MEMORY[0x1C8792D30](*a1);
  uint64_t v5 = MEMORY[0x1E4F14590];
  if (v4 == MEMORY[0x1E4F14590])
  {
    xpc_connection_t remote_connection = xpc_dictionary_get_remote_connection(*a1);
    if (remote_connection)
    {
      xpc_object_t v8 = remote_connection;
      xpc_retain(remote_connection);
    }
    else
    {
      xpc_object_t v8 = xpc_null_create();
    }
    if (MEMORY[0x1C8792D30](v8) != MEMORY[0x1E4F14578])
    {
      uint64_t v6 = 0;
LABEL_94:
      xpc_release(v8);
      return v6;
    }
    *(void *)&long long v9 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v9 + 1) = 0xAAAAAAAAAAAAAAAALL;
    long long v47 = v9;
    long long v48 = v9;
    xpc_connection_get_audit_token();
    xpc_object_t xdict = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
    uint64_t v10 = (void *)xpc_copy_entitlement_for_token();
    xpc_object_t v11 = v10;
    if (v10)
    {
      xpc_object_t xdict = v10;
    }
    else
    {
      xpc_object_t v11 = xpc_null_create();
      xpc_object_t xdict = v11;
      if (!v11)
      {
        xpc_object_t v12 = xpc_null_create();
        xpc_object_t v11 = 0;
        goto LABEL_15;
      }
    }
    if (MEMORY[0x1C8792D30](v11) == v5)
    {
      xpc_retain(v11);
      goto LABEL_16;
    }
    xpc_object_t v12 = xpc_null_create();
LABEL_15:
    xpc_object_t xdict = v12;
LABEL_16:
    xpc_release(v11);
    xpc_object_t v13 = xpc_null_create();
    if (MEMORY[0x1C8792D30](xdict) == v5)
    {
      std::string __p = &xdict;
      uint64_t v50 = kKeyEntitlementFineGrained;
      xpc::dict::object_proxy::operator xpc::array((uint64_t)&__p, object);
      xpc_object_t v14 = object[0];
      object[0] = xpc_null_create();
      xpc_release(v13);
      xpc_release(object[0]);
      xpc_object_t v13 = v14;
    }
    uint64_t v15 = MEMORY[0x1C8792D30](v13);
    uint64_t v16 = MEMORY[0x1E4F14568];
    if (v15 != MEMORY[0x1E4F14568])
    {
      uint64_t v6 = 0;
LABEL_36:
      if ((a2 & 1) == 0)
      {
        if (MEMORY[0x1C8792D30](xdict) == v5)
        {
          xpc_object_t value = xpc_dictionary_get_value(xdict, (const char *)kKeyEntitlementBasebanddAllow);
          xpc_object_t v31 = value;
          std::string __p = value;
          if (value)
          {
            xpc_retain(value);
          }
          else
          {
            xpc_object_t v31 = xpc_null_create();
            std::string __p = v31;
          }
          if (MEMORY[0x1C8792D30](v31) == MEMORY[0x1E4F145D8])
          {
            uint64_t v6 = 0;
          }
          else
          {
            uint64_t v6 = xpc::dyn_cast_or_default((xpc *)&__p, 0);
            xpc_object_t v31 = __p;
          }
          xpc_release(v31);
        }
        else
        {
          uint64_t v6 = 0;
        }
      }
LABEL_93:
      xpc_release(v13);
      xpc_release(xdict);
      goto LABEL_94;
    }
    if (v13)
    {
      xpc_retain(v13);
      xpc_object_t v17 = v13;
    }
    else
    {
      xpc_object_t v17 = xpc_null_create();
      if (!v17)
      {
        xpc_object_t v17 = xpc_null_create();
        uint64_t v18 = 0;
LABEL_24:
        xpc_release(v18);
        if (v13)
        {
          xpc_retain(v13);
          xpc_object_t v19 = v13;
        }
        else
        {
          xpc_object_t v19 = xpc_null_create();
        }
        xpc_object_t v41 = v13;
        if (MEMORY[0x1C8792D30](v13) == v16)
        {
          size_t count = xpc_array_get_count(v13);
          if (v19) {
            goto LABEL_29;
          }
        }
        else
        {
          size_t count = 0;
          if (v19)
          {
LABEL_29:
            xpc_retain(v19);
            xpc_object_t v43 = v19;
            goto LABEL_32;
          }
        }
        xpc_object_t v43 = xpc_null_create();
LABEL_32:
        xpc_release(v19);
        if (!count && v17 == v43)
        {
          char v42 = 0;
LABEL_35:
          xpc_release(v43);
          xpc_release(v17);
          xpc_object_t v13 = v41;
          uint64_t v6 = v42 & 1;
          if (v42) {
            goto LABEL_93;
          }
          goto LABEL_36;
        }
        if (a2)
        {
          char v42 = 0;
          size_t v21 = 0;
          size_t v22 = count - 1;
          while (1)
          {
            xpc_object_t v45 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
            xpc_object_t v23 = xpc_array_get_value(v17, v21);
            xpc_object_t v45 = v23;
            if (v23) {
              xpc_retain(v23);
            }
            else {
              xpc_object_t v45 = xpc_null_create();
            }
            memset(object, 170, sizeof(object));
            std::string __p = 0;
            uint64_t v50 = 0;
            uint64_t v51 = 0;
            xpc::dyn_cast_or_default();
            if (SHIBYTE(v51) < 0) {
              operator delete(__p);
            }
            int v24 = SHIBYTE(object[2]);
            xpc_object_t v25 = SHIBYTE(object[2]) >= 0 ? (xpc_object_t)HIBYTE(object[2]) : object[1];
            if (v25 != (xpc_object_t)strlen((const char *)kBasebandXpcRestricted)) {
              break;
            }
            uint64_t v26 = SHIBYTE(object[2]) >= 0 ? object : (xpc_object_t *)object[0];
            if (memcmp(v26, (const void *)kBasebandXpcRestricted, (size_t)v25)) {
              break;
            }
            int v27 = 0;
            char v42 = 1;
            if (v24 < 0) {
              goto LABEL_55;
            }
LABEL_56:
            xpc_release(v45);
            if (v27)
            {
              size_t v28 = v21 + 1;
              BOOL v29 = v22 == v21++;
              if (!v29) {
                continue;
              }
              size_t v21 = v28;
              if (v17 != v43) {
                continue;
              }
            }
            goto LABEL_35;
          }
          int v27 = 1;
          if ((v24 & 0x80000000) == 0) {
            goto LABEL_56;
          }
LABEL_55:
          operator delete(object[0]);
          goto LABEL_56;
        }
        char v42 = 0;
        size_t v32 = 0;
        size_t v33 = count - 1;
        while (1)
        {
          xpc_object_t v45 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
          xpc_object_t v34 = xpc_array_get_value(v17, v32);
          xpc_object_t v45 = v34;
          if (v34) {
            xpc_retain(v34);
          }
          else {
            xpc_object_t v45 = xpc_null_create();
          }
          memset(object, 170, sizeof(object));
          std::string __p = 0;
          uint64_t v50 = 0;
          uint64_t v51 = 0;
          xpc::dyn_cast_or_default();
          if (SHIBYTE(v51) < 0) {
            operator delete(__p);
          }
          int v35 = SHIBYTE(object[2]);
          xpc_object_t v36 = SHIBYTE(object[2]) >= 0 ? (xpc_object_t)HIBYTE(object[2]) : object[1];
          if (v36 != (xpc_object_t)strlen((const char *)kBasebandXpc)) {
            break;
          }
          xpc_object_t v37 = SHIBYTE(object[2]) >= 0 ? object : (xpc_object_t *)object[0];
          if (memcmp(v37, (const void *)kBasebandXpc, (size_t)v36)) {
            break;
          }
          int v38 = 0;
          char v42 = 1;
          if (v35 < 0) {
            goto LABEL_80;
          }
LABEL_81:
          xpc_release(v45);
          if (v38)
          {
            size_t v39 = v32 + 1;
            BOOL v29 = v33 == v32++;
            if (!v29) {
              continue;
            }
            size_t v32 = v39;
            if (v17 != v43) {
              continue;
            }
          }
          goto LABEL_35;
        }
        int v38 = 1;
        if ((v35 & 0x80000000) == 0) {
          goto LABEL_81;
        }
LABEL_80:
        operator delete(object[0]);
        goto LABEL_81;
      }
    }
    xpc_retain(v17);
    uint64_t v18 = v17;
    goto LABEL_24;
  }
  return 0;
}

void sub_1C588F840(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t a9, uint64_t a10, xpc_object_t a11, uint64_t a12, uint64_t a13, uint64_t a14, xpc_object_t a15, xpc_object_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,xpc_object_t object,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  xpc_release(object);
  xpc_release(v28);
  xpc_release(a16);
  xpc_release(v27);
  _Unwind_Resume(a1);
}

RouterDelegate *RouterDelegate::create@<X0>(RouterDelegate **a1@<X8>)
{
  uint64_t v3 = (RouterDelegate *)operator new(0x58uLL);
  RouterDelegate::RouterDelegate(v3);
  *a1 = v3;
  uint64_t result = (RouterDelegate *)operator new(0x20uLL);
  *(void *)uint64_t result = &unk_1F20F9978;
  *((void *)result + 1) = 0;
  *((void *)result + 2) = 0;
  *((void *)result + 3) = v3;
  a1[1] = result;
  return result;
}

void sub_1C588F9D8(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_1C588FA0C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void RouterDelegate::RouterDelegate(RouterDelegate *this)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  *(void *)this = &unk_1F20F98C8;
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v23, "com.apple.telephony.abm", "ipc.router.delegate");
  GetABMLogServer(&v21);
  *(void *)this = &unk_1F20F9938;
  ctu::OsLogContext::OsLogContext();
  ctu::OsLogContext::OsLogContext();
  ctu::LoggerCommonBase::LoggerCommonBase();
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&v18);
  *((void *)this + 1) = &unk_1F20F0070;
  uint64_t v2 = v22;
  *((void *)this + 7) = v21;
  *((void *)this + 8) = v2;
  if (v2) {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)buf);
  uint64_t v3 = v22;
  if (v22 && !atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v23);
  *(void *)this = &unk_1F20F98C8;
  *((void *)this + 9) = 0;
  *((void *)this + 10) = 0;
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&v19[16] = v4;
  long long v20 = v4;
  long long v18 = v4;
  *(_OWORD *)xpc_object_t v19 = v4;
  *(void *)xpc_object_t v19 = operator new(0x38uLL);
  *(_OWORD *)&v19[8] = xmmword_1C59A1AD0;
  strcpy(*(char **)v19, "/var/wireless/Library/Logs/CoreTelephonyTraceScratch");
  *(void *)&v19[24] = 0;
  *(void *)&long long v20 = 0xB00000015;
  DWORD2(v20) = 17;
  LODWORD(v18) = 1;
  *((void *)&v18 + 1) = RouterDelegate::getTime;
  std::string::__assign_external((std::string *)v19, (const std::string::value_type *)*MEMORY[0x1E4F4F920]);
  if ((v19[23] & 0x80000000) != 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v19, *(std::string::size_type *)&v19[8]);
  }
  else {
    std::string __p = *(std::string *)v19;
  }
  dispatch_object_t v15 = *(dispatch_object_t *)&v19[24];
  if (*(void *)&v19[24]) {
    dispatch_retain(*(dispatch_object_t *)&v19[24]);
  }
  uint64_t v16 = v20;
  int v17 = DWORD2(v20);
  mav_router_t::create();
  long long v5 = *(_OWORD *)buf;
  *(void *)long long buf = 0;
  *(void *)&uint8_t buf[8] = 0;
  uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 10);
  *(_OWORD *)((char *)this + 72) = v5;
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  uint64_t v7 = *(std::__shared_weak_count **)&buf[8];
  if (*(void *)&buf[8]
    && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  if (v15) {
    dispatch_release(v15);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  xpc_object_t v8 = *((void *)this + 5);
  BOOL v9 = os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
  uint64_t v10 = *((void *)this + 9);
  if (v9)
  {
    uint64_t v11 = *(void *)(v10 + 16);
    *(_DWORD *)long long buf = 134217984;
    *(void *)&uint8_t buf[4] = v11;
    _os_log_impl(&dword_1C5767000, v8, OS_LOG_TYPE_DEFAULT, "#I MavRouter is %p", buf, 0xCu);
    xpc_object_t v8 = *((void *)this + 5);
    uint64_t v10 = *((void *)this + 9);
    if (!os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
LABEL_23:
      if (*(void *)(v10 + 24)) {
        goto LABEL_24;
      }
LABEL_31:
      xpc_object_t v13 = GetOsLogContext()[1];
      if (os_log_type_enabled(v13, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)long long buf = 136315906;
        *(void *)&uint8_t buf[4] = "ABM ASSERT";
        *(_WORD *)&buf[12] = 2080;
        *(void *)&buf[14] = "fRouter->interface";
        __int16 v25 = 2080;
        uint64_t v26 = "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices_Manager/AppleBasebandManager/BasebandManager/S"
              "erver/Transport/QMI/Driver/RouterDelegate.cpp";
        __int16 v27 = 1024;
        int v28 = 28;
        _os_log_fault_impl(&dword_1C5767000, v13, OS_LOG_TYPE_FAULT, "%s (%s): File: %s Line: %d", buf, 0x26u);
      }
      __break(1u);
    }
  }
  else if (!os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    goto LABEL_23;
  }
  uint64_t v12 = *(void *)(v10 + 24);
  *(_DWORD *)long long buf = 134217984;
  *(void *)&uint8_t buf[4] = v12;
  _os_log_impl(&dword_1C5767000, v8, OS_LOG_TYPE_DEFAULT, "#I MavInterface is %p", buf, 0xCu);
  if (!*(void *)(*((void *)this + 9) + 24)) {
    goto LABEL_31;
  }
LABEL_24:
  if (*(void *)&v19[24]) {
    dispatch_release(*(dispatch_object_t *)&v19[24]);
  }
  if ((v19[23] & 0x80000000) != 0) {
    operator delete(*(void **)v19);
  }
}

void sub_1C588FEF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  mav_router_parameters_t::~mav_router_parameters_t((mav_router_parameters_t *)va);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v12);
  *BOOL v9 = v11;
  MEMORY[0x1C8790F40](v10);
  _Unwind_Resume(a1);
}

void sub_1C588FF38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,char a27)
{
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&a17);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)(v27 - 128));
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&a27);
  _Unwind_Resume(a1);
}

void sub_1C588FF64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

const char *RouterDelegate::getName(RouterDelegate *this)
{
  return "ipc.router.delegate";
}

uint64_t RouterDelegate::getTime(RouterDelegate *this, unsigned int *a2, unsigned int *a3)
{
  v6.tv_sec = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&v6.tv_usec = 0xAAAAAAAAAAAAAAAALL;
  uint64_t result = gettimeofday(&v6, 0);
  *(_DWORD *)this = v6.tv_sec;
  *a2 = 1000 * v6.tv_usec;
  return result;
}

void mav_router_parameters_t::~mav_router_parameters_t(mav_router_parameters_t *this)
{
  uint64_t v2 = *((void *)this + 5);
  if (v2) {
    dispatch_release(v2);
  }
  if (*((char *)this + 39) < 0) {
    operator delete(*((void **)this + 2));
  }
}

void RouterDelegate::~RouterDelegate(RouterDelegate *this)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  *(void *)this = &unk_1F20F98C8;
  if (!*(void *)(*((void *)this + 9) + 24))
  {
    uint64_t v3 = GetOsLogContext()[1];
    if (os_log_type_enabled(v3, OS_LOG_TYPE_FAULT))
    {
      int v4 = 136315906;
      long long v5 = "ABM ASSERT";
      __int16 v6 = 2080;
      uint64_t v7 = "fRouter->interface";
      __int16 v8 = 2080;
      BOOL v9 = "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices_Manager/AppleBasebandManager/BasebandManager/Serv"
           "er/Transport/QMI/Driver/RouterDelegate.cpp";
      __int16 v10 = 1024;
      int v11 = 33;
      _os_log_fault_impl(&dword_1C5767000, v3, OS_LOG_TYPE_FAULT, "%s (%s): File: %s Line: %d", (uint8_t *)&v4, 0x26u);
    }
    __break(1u);
  }
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 10);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1F20F9938;
  MEMORY[0x1C8790F40]((char *)this + 8);
}

{
  void *v1;
  uint64_t vars8;

  RouterDelegate::~RouterDelegate(this);

  operator delete(v1);
}

void sub_1C58901A8(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

uint64_t RouterDelegate::getRouterInstance@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(this + 80);
  *a2 = *(void *)(this + 72);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

uint64_t RouterDelegate::getChannelForService(uint64_t a1, uint64_t *a2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    if (*((char *)a2 + 23) >= 0) {
      int v4 = a2;
    }
    else {
      int v4 = (uint64_t *)*a2;
    }
    int v6 = 136315138;
    uint64_t v7 = v4;
    _os_log_impl(&dword_1C5767000, v3, OS_LOG_TYPE_DEFAULT, "#I Get channel for service %s", (uint8_t *)&v6, 0xCu);
  }
  return mav_router_t::get_channel_for_service();
}

BOOL RouterDelegate::engage(RouterDelegate *this)
{
  uint64_t v2 = *((void *)this + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)int v4 = 0;
    _os_log_debug_impl(&dword_1C5767000, v2, OS_LOG_TYPE_DEBUG, "#D Engaging", v4, 2u);
  }
  return mav_router::device::controller::engage(*(mav_router::device::controller **)(*((void *)this + 9)
                                                                                                 + 24)) == 0;
}

uint64_t RouterDelegate::disengage(RouterDelegate *this)
{
  uint64_t v1 = *((void *)this + 5);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t v3 = 0;
    _os_log_debug_impl(&dword_1C5767000, v1, OS_LOG_TYPE_DEBUG, "#D Disengaging", v3, 2u);
  }
  return 1;
}

BOOL RouterDelegate::sleep(RouterDelegate *this)
{
  uint64_t v2 = *((void *)this + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)int v4 = 0;
    _os_log_debug_impl(&dword_1C5767000, v2, OS_LOG_TYPE_DEBUG, "#D Sleeping", v4, 2u);
  }
  return (*(unsigned int (**)(void))(**(void **)(*((void *)this + 9) + 24) + 56))(*(void *)(*((void *)this + 9) + 24)) == 0;
}

BOOL RouterDelegate::wake(RouterDelegate *this)
{
  uint64_t v2 = *((void *)this + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)int v4 = 0;
    _os_log_debug_impl(&dword_1C5767000, v2, OS_LOG_TYPE_DEBUG, "#D Waking", v4, 2u);
  }
  return (*(unsigned int (**)(void))(**(void **)(*((void *)this + 9) + 24) + 64))(*(void *)(*((void *)this + 9) + 24)) == 0;
}

BOOL RouterDelegate::teardown(RouterDelegate *this)
{
  uint64_t v2 = *((void *)this + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)int v4 = 0;
    _os_log_debug_impl(&dword_1C5767000, v2, OS_LOG_TYPE_DEBUG, "#D Tearingdown", v4, 2u);
  }
  return (*(unsigned int (**)(void))(**(void **)(*((void *)this + 9) + 24) + 40))(*(void *)(*((void *)this + 9) + 24)) == 0;
}

BOOL RouterDelegate::recover(RouterDelegate *this)
{
  uint64_t v2 = *((void *)this + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)int v4 = 0;
    _os_log_debug_impl(&dword_1C5767000, v2, OS_LOG_TYPE_DEBUG, "#D Recovering", v4, 2u);
  }
  return (*(unsigned int (**)(void))(**(void **)(*((void *)this + 9) + 24) + 48))(*(void *)(*((void *)this + 9) + 24)) == 0;
}

BOOL RouterDelegate::hasFatalErrorOccurred(RouterDelegate *this)
{
  char v5 = 0;
  (*(void (**)(void, char *))(**(void **)(*((void *)this + 9) + 24) + 72))(*(void *)(*((void *)this + 9) + 24), &v5);
  if (!v5) {
    return 0;
  }
  uint64_t v2 = *((void *)this + 5);
  if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT)) {
    return 1;
  }
  *(_WORD *)int v4 = 0;
  _os_log_impl(&dword_1C5767000, v2, OS_LOG_TYPE_DEFAULT, "#I Fatal error has occurred", v4, 2u);
  return v5 != 0;
}

void RouterDelegate::getFatalErrorReason(RouterDelegate *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  (*(void (**)(void, uint64_t *))(**(void **)(*((void *)this + 9) + 24) + 80))(*(void *)(*((void *)this + 9) + 24), a2);
  uint64_t v4 = *((unsigned __int8 *)a2 + 23);
  int v5 = (char)v4;
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = a2[1];
  }
  if (v4)
  {
    int v6 = *((void *)this + 5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = (uint64_t *)*a2;
      if (v5 >= 0) {
        uint64_t v7 = a2;
      }
      int v8 = 136315138;
      BOOL v9 = v7;
      _os_log_impl(&dword_1C5767000, v6, OS_LOG_TYPE_DEFAULT, "#I Fatal error reason is '%s'", (uint8_t *)&v8, 0xCu);
    }
  }
}

void sub_1C58907FC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::Loggable<RouterDelegate,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig(uint64_t a1)
{
  return MEMORY[0x1F417DA50](a1 + 8);
}

void ctu::Loggable<RouterDelegate,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName(char *a1@<X8>)
{
  a1[23] = 19;
  strcpy(a1, "ipc.router.delegate");
}

uint64_t ctu::Loggable<RouterDelegate,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return MEMORY[0x1F417DD10](a1 + 8);
}

void *ctu::Loggable<RouterDelegate,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_1F20F9938;
  MEMORY[0x1C8790F40](a1 + 1);
  return a1;
}

void ctu::Loggable<RouterDelegate,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_1F20F9938;
  MEMORY[0x1C8790F40](a1 + 1);

  operator delete(a1);
}

void std::__shared_ptr_pointer<RouterDelegate *,std::shared_ptr<RouterDelegate>::__shared_ptr_default_delete<RouterDelegate,RouterDelegate>,std::allocator<RouterDelegate>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t std::__shared_ptr_pointer<RouterDelegate *,std::shared_ptr<RouterDelegate>::__shared_ptr_default_delete<RouterDelegate,RouterDelegate>,std::allocator<RouterDelegate>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<RouterDelegate *,std::shared_ptr<RouterDelegate>::__shared_ptr_default_delete<RouterDelegate,RouterDelegate>,std::allocator<RouterDelegate>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x80000001C59A2D58) {
    return a1 + 24;
  }
  if (((v3 & 0x80000001C59A2D58 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000001C59A2D58)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001C59A2D58 & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 24;
  }
  return 0;
}

void abm::AWDHelperSetConnection(uint64_t *a1)
{
  uint64_t v1 = a1[1];
  uint64_t v5 = *a1;
  int v6 = (std::__shared_weak_count *)v1;
  if (v1) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v1 + 8), 1uLL, memory_order_relaxed);
  }
  abm::AWDHelper::create(&v5, &v7);
  pthread_mutex_lock(&ctu::Singleton<abm::AWDHelper,abm::AWDHelper,ctu::PthreadMutexGuardPolicy<abm::AWDHelper>>::sInstance);
  uint64_t v2 = (std::__shared_weak_count *)off_1EBBDD028;
  *(_OWORD *)&qword_1EBBDD020 = v7;
  long long v7 = 0uLL;
  pthread_mutex_unlock(&ctu::Singleton<abm::AWDHelper,abm::AWDHelper,ctu::PthreadMutexGuardPolicy<abm::AWDHelper>>::sInstance);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)&v7 + 1);
  if (*((void *)&v7 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v7 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  uint64_t v4 = v6;
  if (v6)
  {
    if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_1C5890B28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

void sub_1C5890B44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t abm::isWISServerAvailable(abm *this)
{
  return 1;
}

void abm::AWDHelper::create(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0x10uLL);
  uint64_t v5 = v4;
  uint64_t v6 = *a1;
  long long v7 = (std::__shared_weak_count *)a1[1];
  if (v7)
  {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    *uint64_t v4 = v6;
    v4[1] = v7;
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  else
  {
    *uint64_t v4 = v6;
    v4[1] = 0;
  }
  *a2 = v4;
  int v8 = operator new(0x20uLL);
  void *v8 = &unk_1F20F99C8;
  v8[1] = 0;
  void v8[2] = 0;
  v8[3] = v5;
  a2[1] = v8;
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void sub_1C5890C5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (v9)
  {
    if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  operator delete(v10);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void abm::AWDHelperGetConnection(void *a1@<X8>)
{
  pthread_mutex_lock(&ctu::Singleton<abm::AWDHelper,abm::AWDHelper,ctu::PthreadMutexGuardPolicy<abm::AWDHelper>>::sInstance);
  uint64_t v3 = (void *)qword_1EBBDD020;
  if (!qword_1EBBDD020)
  {
    uint64_t v4 = (wis::WISServerConnection *)operator new(0x10uLL);
    wis::WISServerConnection::WISServerConnection(v4);
    uint64_t v16 = v4;
    uint64_t v5 = (std::__shared_weak_count *)operator new(0x20uLL);
    v5->__shared_owners_ = 0;
    v5->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20F9A18;
    v5->__shared_weak_owners_ = 0;
    v5[1].__vftable = (std::__shared_weak_count_vtbl *)v4;
    int v17 = v5;
    xpc_object_t v14 = v4;
    dispatch_object_t v15 = v5;
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    abm::AWDHelper::create((uint64_t *)&v14, &v13);
    uint64_t v6 = v15;
    if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
    long long v7 = v17;
    if (v17 && !atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    long long v8 = v13;
    long long v13 = 0uLL;
    BOOL v9 = (std::__shared_weak_count *)off_1EBBDD028;
    *(_OWORD *)&qword_1EBBDD020 = v8;
    if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
    uint64_t v10 = (std::__shared_weak_count *)*((void *)&v13 + 1);
    if (*((void *)&v13 + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
    uint64_t v3 = (void *)qword_1EBBDD020;
  }
  int v11 = (std::__shared_weak_count *)off_1EBBDD028;
  if (off_1EBBDD028) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)off_1EBBDD028 + 1, 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<abm::AWDHelper,abm::AWDHelper,ctu::PthreadMutexGuardPolicy<abm::AWDHelper>>::sInstance);
  uint64_t v12 = v3[1];
  *a1 = *v3;
  a1[1] = v12;
  if (v12) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
  }
  if (v11)
  {
    if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

void sub_1C5890F28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  pthread_mutex_unlock(&ctu::Singleton<abm::AWDHelper,abm::AWDHelper,ctu::PthreadMutexGuardPolicy<abm::AWDHelper>>::sInstance);
  _Unwind_Resume(a1);
}

uint64_t ctu::PthreadMutexGuardPolicy<abm::AWDHelper>::~PthreadMutexGuardPolicy(uint64_t a1)
{
  pthread_mutex_lock((pthread_mutex_t *)a1);
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 72);
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 72);
  if (!v3 || atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void std::__shared_ptr_pointer<abm::AWDHelper *,std::shared_ptr<abm::AWDHelper>::__shared_ptr_default_delete<abm::AWDHelper,abm::AWDHelper>,std::allocator<abm::AWDHelper>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<abm::AWDHelper *,std::shared_ptr<abm::AWDHelper>::__shared_ptr_default_delete<abm::AWDHelper,abm::AWDHelper>,std::allocator<abm::AWDHelper>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count ***)(a1 + 24);
  if (v1)
  {
    uint64_t v2 = v1[1];
    if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      uint64_t v3 = v1;
    }
    else
    {
      uint64_t v3 = v1;
    }
    operator delete(v3);
  }
}

uint64_t std::__shared_ptr_pointer<abm::AWDHelper *,std::shared_ptr<abm::AWDHelper>::__shared_ptr_default_delete<abm::AWDHelper,abm::AWDHelper>,std::allocator<abm::AWDHelper>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x80000001C59A2E23) {
    return a1 + 24;
  }
  if (((v3 & 0x80000001C59A2E23 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000001C59A2E23)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001C59A2E23 & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 24;
  }
  return 0;
}

void std::__shared_ptr_pointer<wis::WISServerConnection *,std::shared_ptr<wis::WISServerConnection>::__shared_ptr_default_delete<wis::WISServerConnection,wis::WISServerConnection>,std::allocator<wis::WISServerConnection>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<wis::WISServerConnection *,std::shared_ptr<wis::WISServerConnection>::__shared_ptr_default_delete<wis::WISServerConnection,wis::WISServerConnection>,std::allocator<wis::WISServerConnection>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1 = *(wis::WISServerConnection **)(a1 + 24);
  if (v1)
  {
    wis::WISServerConnection::~WISServerConnection(v1);
    operator delete(v2);
  }
}

uint64_t std::__shared_ptr_pointer<wis::WISServerConnection *,std::shared_ptr<wis::WISServerConnection>::__shared_ptr_default_delete<wis::WISServerConnection,wis::WISServerConnection>,std::allocator<wis::WISServerConnection>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x80000001C59A2EF9) {
    return a1 + 24;
  }
  if (((v3 & 0x80000001C59A2EF9 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000001C59A2EF9)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001C59A2EF9 & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 24;
  }
  return 0;
}

uint64_t __cxx_global_var_init_16()
{
  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<abm::AWDHelper>::~PthreadMutexGuardPolicy, &ctu::Singleton<abm::AWDHelper,abm::AWDHelper,ctu::PthreadMutexGuardPolicy<abm::AWDHelper>>::sInstance, &dword_1C5767000);
  }
  return result;
}

void *Stats::Stats(void *a1, uint64_t a2)
{
  uint64_t v4 = (const char *)a2;
  if (*(char *)(a2 + 23) < 0) {
    uint64_t v4 = *(const char **)a2;
  }
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v9, "com.apple.telephony.abm", v4);
  GetABMLogServer(&v7);
  dispatch_object_t object = 0;
  ctu::SharedSynchronizable<Stats>::SharedSynchronizable(a1 + 9, a2, 0, &object);
  if (object) {
    dispatch_release(object);
  }
  ctu::Loggable<Stats,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::Loggable<ctu::OsLogContext,std::shared_ptr<ctu::LogServer>>(a1, (uint64_t)v9, &v7);
  *a1 = &unk_1F20F9B70;
  uint64_t v5 = v8;
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v9);
  *a1 = &unk_1F20F9A68;
  return a1;
}

void sub_1C5891404(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, dispatch_object_t object)
{
  ctu::SharedSynchronizable<DataStallDetection>::~SharedSynchronizable(v14);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&a12);
  _Unwind_Resume(a1);
}

void sub_1C589143C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)va);
  _Unwind_Resume(a1);
}

void Stats::~Stats(Stats *this)
{
  *(void *)this = &unk_1F20F9B30;
  MEMORY[0x1C8790F40]((char *)this + 8);
  uint64_t v2 = *((void *)this + 12);
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = *((void *)this + 11);
  if (v3) {
    dispatch_release(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 10);
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
}

uint64_t Stats::create@<X0>(int a1@<W0>, void *a2@<X8>)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  *a2 = 0;
  a2[1] = 0;
  if (a1)
  {
    uint64_t v5 = GetOsLogContext()[1];
    if (os_log_type_enabled(v5, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t v6 = 136315906;
      *(void *)&v6[4] = "ABM ASSERT";
      *(_WORD *)&v6[12] = 2080;
      *(void *)&v6[14] = "statsType != statsType";
      __int16 v7 = 2080;
      long long v8 = "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices_Manager/AppleBasebandManager/BasebandManager/Serv"
           "er/Stats/Stats.cpp";
      __int16 v9 = 1024;
      int v10 = 33;
      _os_log_fault_impl(&dword_1C5767000, v5, OS_LOG_TYPE_FAULT, "%s (%s): File: %s Line: %d", v6, 0x26u);
    }
    __break(1u);
  }
  BootStats::createInternal(v6);
  __n128 v3 = *(__n128 *)v6;
  *(_OWORD *)a2 = *(_OWORD *)v6;
  uint64_t result = v3.n128_u64[0];
  if (v3.n128_u64[0]) {
    return (*(uint64_t (**)(unint64_t, void, __n128))(*(void *)v3.n128_u64[0] + 48))(v3.n128_u64[0], 0, v3);
  }
  return result;
}

void sub_1C58915E8(_Unwind_Exception *a1)
{
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_1C58915FC(_Unwind_Exception *a1)
{
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_1C5891610(_Unwind_Exception *a1)
{
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t Stats::init(uint64_t a1, int a2)
{
  *(_DWORD *)(a1 + 104) = a2;
  return 1;
}

void *ctu::Loggable<Stats,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_1F20F9B30;
  MEMORY[0x1C8790F40](a1 + 1);
  return a1;
}

void ctu::Loggable<Stats,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_1F20F9B30;
  MEMORY[0x1C8790F40](a1 + 1);

  operator delete(a1);
}

void *ctu::SharedSynchronizable<Stats>::SharedSynchronizable(void *a1, uint64_t a2, dispatch_queue_attr_t attr, dispatch_object_t *a4)
{
  if (*(char *)(a2 + 23) >= 0) {
    uint64_t v6 = (const char *)a2;
  }
  else {
    uint64_t v6 = *(const char **)a2;
  }
  __int16 v7 = *a4;
  if (*a4)
  {
    dispatch_retain(*a4);
    dispatch_retain(v7);
    long long v8 = dispatch_queue_create_with_target_V2(v6, attr, v7);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = v8;
    if (!v8) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  long long v8 = dispatch_queue_create(v6, attr);
  *a1 = 0;
  a1[1] = 0;
  a1[2] = v8;
  if (v8) {
LABEL_6:
  }
    dispatch_retain(v8);
LABEL_7:
  a1[3] = v7;
  if (v7) {
    dispatch_retain(v7);
  }
  if (v8) {
    dispatch_release(v8);
  }
  if (v7)
  {
    dispatch_release(v7);
    dispatch_release(v7);
  }
  return a1;
}

void *ctu::Loggable<Stats,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::Loggable<ctu::OsLogContext,std::shared_ptr<ctu::LogServer>>(void *a1, uint64_t a2, void *a3)
{
  *a1 = &unk_1F20F9B30;
  ctu::OsLogContext::OsLogContext();
  ctu::OsLogContext::OsLogContext();
  ctu::LoggerCommonBase::LoggerCommonBase();
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v8);
  a1[1] = &unk_1F20F0070;
  a1[7] = *a3;
  uint64_t v5 = a3[1];
  a1[8] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&v7);
  return a1;
}

void sub_1C589185C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

void *ctu::SharedLoggable<Stats,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(void *a1)
{
  *a1 = &unk_1F20F9B30;
  MEMORY[0x1C8790F40](a1 + 1);
  uint64_t v2 = a1[12];
  if (v2) {
    dispatch_release(v2);
  }
  __n128 v3 = a1[11];
  if (v3) {
    dispatch_release(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[10];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

void ctu::SharedLoggable<Stats,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(void *a1)
{
  *a1 = &unk_1F20F9B30;
  MEMORY[0x1C8790F40](a1 + 1);
  uint64_t v2 = a1[12];
  if (v2) {
    dispatch_release(v2);
  }
  __n128 v3 = a1[11];
  if (v3) {
    dispatch_release(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[10];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }

  operator delete(a1);
}

void AntennaModule::create(uint64_t *a1@<X0>, NSObject ***a2@<X8>)
{
  uint64_t v4 = dispatch_workloop_create("antenna.wl");
  *a2 = (NSObject **)0xAAAAAAAAAAAAAAAALL;
  a2[1] = (NSObject **)0xAAAAAAAAAAAAAAAALL;
  uint64_t v5 = operator new(0xC0uLL);
  uint64_t v6 = *a1;
  uint64_t v7 = (std::__shared_weak_count *)a1[1];
  v9[0] = v6;
  v9[1] = (uint64_t)v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  long long v8 = v4;
  if (v4) {
    dispatch_retain(v4);
  }
  AntennaModule::AntennaModule((uint64_t)v5, v9, &v8);
  *a2 = (NSObject **)0xAAAAAAAAAAAAAAAALL;
  a2[1] = (NSObject **)0xAAAAAAAAAAAAAAAALL;
  std::shared_ptr<AntennaModule>::shared_ptr[abi:ne180100]<AntennaModule,std::shared_ptr<AntennaModule> ctu::SharedSynchronizable<AntennaModule>::make_shared_ptr<AntennaModule>(AntennaModule*)::{lambda(AntennaModule*)#1},void>(a2, (uint64_t)v5);
  ctu::Loggable<AntennaModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync((uint64_t)(*a2 + 6));
  if (v4) {
    dispatch_release(v4);
  }
  if (v7) {
    std::__shared_weak_count::__release_weak(v7);
  }
  AntennaModule::init(*a2);
  if (v4)
  {
    dispatch_release(v4);
  }
}

void sub_1C5891A68(_Unwind_Exception *a1)
{
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v3);
  if (v1)
  {
    dispatch_release(v1);
    if (!v2) {
      goto LABEL_3;
    }
  }
  else if (!v2)
  {
    goto LABEL_3;
  }
  std::__shared_weak_count::__release_weak(v2);
LABEL_3:
  if (!v1) {
    _Unwind_Resume(a1);
  }
  dispatch_release(v1);
  _Unwind_Resume(a1);
}

void AntennaModule::init(NSObject **this)
{
  uint64_t v4 = (AntennaModule *)this;
  if (this[18])
  {
    if (dispatch_workloop_is_current())
    {
      AntennaModule::init(void)::$_0::operator()((uint64_t)this);
      return;
    }
    BOOL v2 = this[18] == 0;
  }
  else
  {
    BOOL v2 = 1;
  }
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI13AntennaModuleE20execute_wrapped_syncIZNS1_4initEvE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS5__block_invoke;
  block[3] = &__block_descriptor_tmp_74;
  block[4] = this + 15;
  void block[5] = &v4;
  uint64_t v3 = this[17];
  if (v2) {
    dispatch_sync(v3, block);
  }
  else {
    dispatch_async_and_wait(v3, block);
  }
}

const char *AntennaModule::getName(AntennaModule *this)
{
  return "antenna.mod";
}

uint64_t AntennaModule::AntennaModule(uint64_t a1, uint64_t *a2, NSObject **a3)
{
  uint64_t v5 = *a2;
  uint64_t v6 = (std::__shared_weak_count *)a2[1];
  if (v6)
  {
    atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  *(void *)a1 = &unk_1F20FC1C8;
  *(void *)(a1 + 8) = v5;
  *(void *)(a1 + 16) = v6;
  if (v6)
  {
    atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    *(void *)(a1 + 24) = 0;
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = 0;
    std::__shared_weak_count::__release_weak(v6);
    *(void *)a1 = &unk_1F20F0BE0;
    std::__shared_weak_count::__release_weak(v6);
  }
  else
  {
    *(void *)(a1 + 24) = 0;
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = 0;
    *(void *)a1 = &unk_1F20F0BE0;
  }
  *(void *)a1 = &unk_1F20F9BC8;
  *(void *)(a1 + 48) = &unk_1F20F9C38;
  uint64_t v7 = *a3;
  long long v8 = (uint64_t (**)(void))&unk_1F20F9BC8;
  if (v7)
  {
    dispatch_retain(v7);
    long long v8 = *(uint64_t (***)(void))a1;
  }
  __int16 v9 = (const char *)v8[2](a1);
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v17, "com.apple.telephony.abm", v9);
  GetABMLogServer(&v15);
  if (v7) {
    dispatch_retain(v7);
  }
  initially_inactive = dispatch_queue_attr_make_initially_inactive(0);
  uint64_t v11 = dispatch_queue_create_with_target_V2("antenna.mod", initially_inactive, v7);
  dispatch_set_qos_class_floor(v11, QOS_CLASS_DEFAULT, 0);
  dispatch_activate(v11);
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = v11;
  if (v11) {
    dispatch_retain(v11);
  }
  *(void *)(a1 + 144) = v7;
  if (v7) {
    dispatch_retain(v7);
  }
  if (v11) {
    dispatch_release(v11);
  }
  if (v7) {
    dispatch_release(v7);
  }
  *(void *)(a1 + 48) = &unk_1F20F9F38;
  ctu::OsLogContext::OsLogContext();
  ctu::OsLogContext::OsLogContext();
  ctu::LoggerCommonBase::LoggerCommonBase();
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v19);
  *(void *)(a1 + 56) = &unk_1F20F0070;
  uint64_t v12 = v16;
  *(void *)(a1 + 104) = v15;
  *(void *)(a1 + 112) = v12;
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v18);
  *(void *)(a1 + 48) = &unk_1F20F9FC8;
  long long v13 = v16;
  if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v17);
  if (v7) {
    dispatch_release(v7);
  }
  *(void *)a1 = &unk_1F20F9BC8;
  *(void *)(a1 + 48) = &unk_1F20F9C38;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(void *)(a1 + 184) = 0;
  return a1;
}

void sub_1C5891EE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15)
{
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&a15);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&a13);
  ctu::SharedSynchronizable<DataStallDetection>::~SharedSynchronizable(v17);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&a11);
  if (v16) {
    dispatch_release(v16);
  }
  Service::~Service(v15);
  _Unwind_Resume(a1);
}

void AntennaModule::~AntennaModule(AntennaModule *this)
{
  *(void *)this = &unk_1F20F9BC8;
  *((void *)this + 6) = &unk_1F20F9C38;
  BOOL v2 = *((void *)this + 11);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v15[0] = 0;
    _os_log_impl(&dword_1C5767000, v2, OS_LOG_TYPE_DEFAULT, "#I Gone!", (uint8_t *)v15, 2u);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 23);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    uint64_t v4 = (char *)this + 56;
    uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 21);
    if (!v5) {
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v4 = (char *)this + 56;
    uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 21);
    if (!v5) {
      goto LABEL_9;
    }
  }
  if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_9:
  uint64_t v6 = (void **)*((void *)this + 19);
  if (v6)
  {
    do
    {
      long long v13 = (void **)*v6;
      if (*((char *)v6 + 31) < 0) {
        operator delete(v6[1]);
      }
      operator delete(v6);
      uint64_t v6 = v13;
    }
    while (v13);
  }
  *((void *)this + 19) = 0;
  *((void *)this + 6) = &unk_1F20F9F38;
  MEMORY[0x1C8790F40](v4);
  uint64_t v7 = *((void *)this + 18);
  if (v7) {
    dispatch_release(v7);
  }
  long long v8 = *((void *)this + 17);
  if (v8) {
    dispatch_release(v8);
  }
  __int16 v9 = (std::__shared_weak_count *)*((void *)this + 16);
  if (v9) {
    std::__shared_weak_count::__release_weak(v9);
  }
  *(void *)this = &unk_1F20FC1C8;
  uint64_t v10 = *((void *)this + 3);
  if (v10)
  {
    uint64_t v11 = *((void *)this + 4);
    uint64_t v12 = (void *)*((void *)this + 3);
    if (v11 != v10)
    {
      do
      {
        if (*(char *)(v11 - 1) < 0) {
          operator delete(*(void **)(v11 - 24));
        }
        v11 -= 24;
      }
      while (v11 != v10);
      uint64_t v12 = (void *)*((void *)this + 3);
    }
    *((void *)this + 4) = v10;
    operator delete(v12);
  }
  xpc_object_t v14 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v14) {
    std::__shared_weak_count::__release_weak(v14);
  }
}

{
  void *v1;
  uint64_t vars8;

  AntennaModule::~AntennaModule(this);

  operator delete(v1);
}

void non-virtual thunk to'AntennaModule::~AntennaModule(AntennaModule *this)
{
}

{
  void *v1;
  uint64_t vars8;

  AntennaModule::~AntennaModule((AntennaModule *)((char *)this - 48));

  operator delete(v1);
}

_WORD *AntennaModule::getShutdownStages@<X0>(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v3 = operator new(2uLL);
  *a1 = v3;
  *uint64_t v3 = 770;
  uint64_t result = v3 + 1;
  a1[1] = result;
  a1[2] = result;
  return result;
}

void AntennaModule::shutdown(uint64_t a1, int a2, NSObject **a3)
{
  if (a2 != 3)
  {
    if (a2 != 2) {
      return;
    }
    uint64_t v3 = (uint64_t *)(a1 + 120);
    v10[0] = MEMORY[0x1E4F143A8];
    v10[1] = 1174405120;
    v10[2] = ___ZN13AntennaModule8shutdownE13ShutdownStageN8dispatch13group_sessionE_block_invoke;
    void v10[3] = &__block_descriptor_tmp_37;
    uint64_t v4 = *a3;
    v10[4] = a1;
    dispatch_group_t group = v4;
    if (v4)
    {
      dispatch_retain(v4);
      dispatch_group_enter(group);
    }
    ctu::SharedSynchronizable<AntennaModule>::execute_wrapped(v3, (uint64_t)v10);
    if (!group) {
      return;
    }
    dispatch_group_leave(group);
    uint64_t v5 = group;
    if (!group) {
      return;
    }
LABEL_12:
    dispatch_release(v5);
    return;
  }
  uint64_t v6 = (uint64_t *)(a1 + 120);
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 1174405120;
  void v8[2] = ___ZN13AntennaModule8shutdownE13ShutdownStageN8dispatch13group_sessionE_block_invoke_5;
  v8[3] = &__block_descriptor_tmp_8_2;
  uint64_t v7 = *a3;
  v8[4] = a1;
  dispatch_group_t object = v7;
  if (v7)
  {
    dispatch_retain(v7);
    dispatch_group_enter(object);
  }
  ctu::SharedSynchronizable<AntennaModule>::execute_wrapped(v6, (uint64_t)v8);
  if (object)
  {
    dispatch_group_leave(object);
    uint64_t v5 = object;
    if (object) {
      goto LABEL_12;
    }
  }
}

void ___ZN13AntennaModule8shutdownE13ShutdownStageN8dispatch13group_sessionE_block_invoke(uint64_t a1)
{
  uint64_t v1 = **(antenna::Service::Internal ***)(*(void *)(a1 + 32) + 176);
  if (v1) {
    antenna::Service::Internal::shutdown(v1);
  }
}

void ___ZN13AntennaModule8shutdownE13ShutdownStageN8dispatch13group_sessionE_block_invoke_5(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  BOOL v2 = *(std::__shared_weak_count **)(v1 + 168);
  *(void *)(v1 + 160) = 0;
  *(void *)(v1 + 168) = 0;
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
}

void AntennaModule::initialize(uint64_t *a1, NSObject **a2)
{
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 1174405120;
  v11[2] = ___ZN13AntennaModule10initializeEN8dispatch13group_sessionE_block_invoke;
  v11[3] = &__block_descriptor_tmp_25_1;
  uint64_t v3 = *a2;
  v11[4] = a1;
  dispatch_group_t group = v3;
  if (v3)
  {
    dispatch_retain(v3);
    dispatch_group_enter(group);
  }
  ctu::SharedSynchronizable<AntennaModule>::execute_wrapped(a1 + 15, (uint64_t)v11);
  uint64_t v4 = (std::__shared_weak_count *)a1[16];
  if (!v4 || (v5 = a1[15], (uint64_t v6 = std::__shared_weak_count::lock(v4)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v7 = v6;
  long long v8 = operator new(8uLL);
  void *v8 = a1;
  __int16 v9 = a1[17];
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v10 = operator new(0x18uLL);
  *uint64_t v10 = v8;
  v10[1] = v5;
  v10[2] = v7;
  dispatch_async_f(v9, v10, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<AntennaModule>::execute_wrapped<AntennaModule::initialize(dispatch::group_session)::$_0>(AntennaModule::initialize(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<AntennaModule::initialize(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<AntennaModule::initialize(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke);
  if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  if (group)
  {
    dispatch_group_leave(group);
    if (group) {
      dispatch_release(group);
    }
  }
}

void ___ZN13AntennaModule10initializeEN8dispatch13group_sessionE_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  BOOL v2 = *(std::__shared_weak_count **)(v1 + 128);
  if (!v2 || (v3 = *(void *)(v1 + 120), (uint64_t v4 = std::__shared_weak_count::lock(v2)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v5 = v4;
  atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v5);
  }
  uint64_t v6 = (const void *)*MEMORY[0x1E4F4C640];
  size_t v7 = strlen((const char *)*MEMORY[0x1E4F4C640]);
  if (v7 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v8 = v7;
  if (v7 >= 0x17)
  {
    uint64_t v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17) {
      uint64_t v10 = v7 | 7;
    }
    uint64_t v11 = v10 + 1;
    p_dst = (void **)operator new(v10 + 1);
    size_t v47 = v8;
    unint64_t v48 = v11 | 0x8000000000000000;
    std::string __dst = p_dst;
    goto LABEL_12;
  }
  HIBYTE(v48) = v7;
  p_dst = (void **)&__dst;
  if (v7) {
LABEL_12:
  }
    memmove(p_dst, v6, v8);
  *((unsigned char *)p_dst + v8) = 0;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN13AntennaModule10initializeEN8dispatch13group_sessionE_block_invoke_2;
  aBlock[3] = &__block_descriptor_tmp_10_2;
  aBlock[4] = v1;
  void aBlock[5] = v3;
  dispatch_object_t v44 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  uint64_t v12 = _Block_copy(aBlock);
  xpc_object_t v45 = v12;
  Service::registerCommandHandler(v1, (uint64_t)&__dst, &v45);
  if (v12) {
    _Block_release(v12);
  }
  if (SHIBYTE(v48) < 0) {
    operator delete(__dst);
  }
  long long v13 = (const void *)*MEMORY[0x1E4F4C318];
  size_t v14 = strlen((const char *)*MEMORY[0x1E4F4C318]);
  if (v14 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v15 = v14;
  if (v14 >= 0x17)
  {
    uint64_t v17 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v14 | 7) != 0x17) {
      uint64_t v17 = v14 | 7;
    }
    uint64_t v18 = v17 + 1;
    uint64_t v16 = (void **)operator new(v17 + 1);
    size_t v47 = v15;
    unint64_t v48 = v18 | 0x8000000000000000;
    std::string __dst = v16;
    goto LABEL_24;
  }
  HIBYTE(v48) = v14;
  uint64_t v16 = (void **)&__dst;
  if (v14) {
LABEL_24:
  }
    memmove(v16, v13, v15);
  *((unsigned char *)v16 + v15) = 0;
  v40[0] = MEMORY[0x1E4F143A8];
  v40[1] = 1174405120;
  v40[2] = ___ZN13AntennaModule10initializeEN8dispatch13group_sessionE_block_invoke_11;
  v40[3] = &__block_descriptor_tmp_14_1;
  v40[4] = v1;
  v40[5] = v3;
  xpc_object_t v41 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  xpc_object_t v19 = _Block_copy(v40);
  char v42 = v19;
  Service::registerCommandHandler(v1, (uint64_t)&__dst, &v42);
  if (v19) {
    _Block_release(v19);
  }
  if (SHIBYTE(v48) < 0) {
    operator delete(__dst);
  }
  long long v20 = (const void *)*MEMORY[0x1E4F4CC20];
  size_t v21 = strlen((const char *)*MEMORY[0x1E4F4CC20]);
  if (v21 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v22 = v21;
  if (v21 >= 0x17)
  {
    uint64_t v24 = (v21 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v21 | 7) != 0x17) {
      uint64_t v24 = v21 | 7;
    }
    uint64_t v25 = v24 + 1;
    xpc_object_t v23 = (void **)operator new(v24 + 1);
    size_t v47 = v22;
    unint64_t v48 = v25 | 0x8000000000000000;
    std::string __dst = v23;
    goto LABEL_36;
  }
  HIBYTE(v48) = v21;
  xpc_object_t v23 = (void **)&__dst;
  if (v21) {
LABEL_36:
  }
    memmove(v23, v20, v22);
  *((unsigned char *)v23 + v22) = 0;
  v37[0] = MEMORY[0x1E4F143A8];
  v37[1] = 1174405120;
  std::locale v37[2] = ___ZN13AntennaModule10initializeEN8dispatch13group_sessionE_block_invoke_15;
  v37[3] = &__block_descriptor_tmp_18_1;
  v37[4] = v1;
  v37[5] = v3;
  int v38 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  uint64_t v26 = _Block_copy(v37);
  size_t v39 = v26;
  Service::registerCommandHandler(v1, (uint64_t)&__dst, &v39);
  if (v26) {
    _Block_release(v26);
  }
  if (SHIBYTE(v48) < 0) {
    operator delete(__dst);
  }
  uint64_t v27 = (const void *)*MEMORY[0x1E4F4CC10];
  size_t v28 = strlen((const char *)*MEMORY[0x1E4F4CC10]);
  if (v28 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v29 = v28;
  if (v28 >= 0x17)
  {
    uint64_t v31 = (v28 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v28 | 7) != 0x17) {
      uint64_t v31 = v28 | 7;
    }
    uint64_t v32 = v31 + 1;
    uint64_t v30 = (void **)operator new(v31 + 1);
    size_t v47 = v29;
    unint64_t v48 = v32 | 0x8000000000000000;
    std::string __dst = v30;
    goto LABEL_48;
  }
  HIBYTE(v48) = v28;
  uint64_t v30 = (void **)&__dst;
  if (v28) {
LABEL_48:
  }
    memmove(v30, v27, v29);
  *((unsigned char *)v30 + v29) = 0;
  v34[0] = MEMORY[0x1E4F143A8];
  v34[1] = 1174405120;
  v34[2] = ___ZN13AntennaModule10initializeEN8dispatch13group_sessionE_block_invoke_19;
  v34[3] = &__block_descriptor_tmp_22_2;
  v34[4] = v1;
  v34[5] = v3;
  int v35 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  size_t v33 = _Block_copy(v34);
  xpc_object_t v36 = v33;
  Service::registerCommandHandler(v1, (uint64_t)&__dst, &v36);
  if (v33) {
    _Block_release(v33);
  }
  if (SHIBYTE(v48) < 0) {
    operator delete(__dst);
  }
  if (v35) {
    std::__shared_weak_count::__release_weak(v35);
  }
  if (v38) {
    std::__shared_weak_count::__release_weak(v38);
  }
  if (v41) {
    std::__shared_weak_count::__release_weak(v41);
  }
  if (v44) {
    std::__shared_weak_count::__release_weak(v44);
  }
  std::__shared_weak_count::__release_weak(v5);
}

void sub_1C5892AE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,std::__shared_weak_count *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,std::__shared_weak_count *a32)
{
  if (v33) {
    _Block_release(v33);
  }
  if (a16)
  {
    std::__shared_weak_count::__release_weak(a16);
    if ((*(char *)(v34 - 97) & 0x80000000) == 0)
    {
LABEL_5:
      xpc_object_t v36 = a24;
      if (!a24)
      {
LABEL_10:
        if (a32) {
          std::__shared_weak_count::__release_weak(a32);
        }
        xpc_object_t v37 = *(std::__shared_weak_count **)(v34 - 136);
        if (v37)
        {
          std::__shared_weak_count::__release_weak(v37);
          std::__shared_weak_count::__release_weak(v32);
          _Unwind_Resume(a1);
        }
        std::__shared_weak_count::__release_weak(v32);
        _Unwind_Resume(a1);
      }
LABEL_9:
      std::__shared_weak_count::__release_weak(v36);
      goto LABEL_10;
    }
  }
  else if ((*(char *)(v34 - 97) & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(*(void **)(v34 - 120));
  xpc_object_t v36 = a24;
  if (!a24) {
    goto LABEL_10;
  }
  goto LABEL_9;
}

void ___ZN13AntennaModule10initializeEN8dispatch13group_sessionE_block_invoke_2(void *a1, xpc_object_t *a2, const void **a3)
{
  uint64_t v4 = (std::__shared_weak_count *)a1[6];
  if (!v4) {
    return;
  }
  size_t v7 = (void *)a1[4];
  size_t v8 = std::__shared_weak_count::lock(v4);
  if (!v8) {
    return;
  }
  __int16 v9 = v8;
  uint64_t v10 = a1[5];
  if (atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (!v10) {
      return;
    }
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
    if (!v10) {
      return;
    }
  }
  xpc_object_t v11 = *a2;
  if (v11)
  {
    xpc_retain(v11);
    uint64_t v12 = *a3;
    if (*a3) {
      goto LABEL_9;
    }
  }
  else
  {
    xpc_object_t v11 = xpc_null_create();
    uint64_t v12 = *a3;
    if (*a3)
    {
LABEL_9:
      long long v13 = _Block_copy(v12);
      size_t v14 = (std::__shared_weak_count *)v7[16];
      if (!v14) {
LABEL_18:
      }
        std::__throw_bad_weak_ptr[abi:ne180100]();
      goto LABEL_13;
    }
  }
  long long v13 = 0;
  size_t v14 = (std::__shared_weak_count *)v7[16];
  if (!v14) {
    goto LABEL_18;
  }
LABEL_13:
  uint64_t v15 = v7[15];
  uint64_t v16 = std::__shared_weak_count::lock(v14);
  if (!v16) {
    goto LABEL_18;
  }
  uint64_t v17 = v16;
  uint64_t v18 = operator new(0x18uLL);
  *uint64_t v18 = v7;
  v18[1] = v11;
  xpc_object_t v19 = xpc_null_create();
  void v18[2] = v13;
  long long v20 = v7[17];
  atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
  size_t v21 = operator new(0x18uLL);
  void *v21 = v18;
  v21[1] = v15;
  uint64_t v21[2] = v17;
  dispatch_async_f(v20, v21, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI13AntennaModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb0_E3__1EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_);
  if (!atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  xpc_release(v19);
}

uint64_t __copy_helper_block_e8_40c38_ZTSNSt3__18weak_ptrI13AntennaModuleEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c38_ZTSNSt3__18weak_ptrI13AntennaModuleEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void ___ZN13AntennaModule10initializeEN8dispatch13group_sessionE_block_invoke_11(void *a1, xpc_object_t *a2, const void **a3)
{
  uint64_t v4 = (std::__shared_weak_count *)a1[6];
  if (!v4) {
    return;
  }
  size_t v7 = (void *)a1[4];
  size_t v8 = std::__shared_weak_count::lock(v4);
  if (!v8) {
    return;
  }
  __int16 v9 = v8;
  uint64_t v10 = a1[5];
  if (atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (!v10) {
      return;
    }
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
    if (!v10) {
      return;
    }
  }
  xpc_object_t v11 = *a2;
  if (v11)
  {
    xpc_retain(v11);
    uint64_t v12 = *a3;
    if (*a3) {
      goto LABEL_9;
    }
  }
  else
  {
    xpc_object_t v11 = xpc_null_create();
    uint64_t v12 = *a3;
    if (*a3)
    {
LABEL_9:
      long long v13 = _Block_copy(v12);
      size_t v14 = (std::__shared_weak_count *)v7[16];
      if (!v14) {
LABEL_18:
      }
        std::__throw_bad_weak_ptr[abi:ne180100]();
      goto LABEL_13;
    }
  }
  long long v13 = 0;
  size_t v14 = (std::__shared_weak_count *)v7[16];
  if (!v14) {
    goto LABEL_18;
  }
LABEL_13:
  uint64_t v15 = v7[15];
  uint64_t v16 = std::__shared_weak_count::lock(v14);
  if (!v16) {
    goto LABEL_18;
  }
  uint64_t v17 = v16;
  uint64_t v18 = operator new(0x18uLL);
  *uint64_t v18 = v7;
  v18[1] = v11;
  xpc_object_t v19 = xpc_null_create();
  void v18[2] = v13;
  long long v20 = v7[17];
  atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
  size_t v21 = operator new(0x18uLL);
  void *v21 = v18;
  v21[1] = v15;
  uint64_t v21[2] = v17;
  dispatch_async_f(v20, v21, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI13AntennaModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb1_E3__2EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_);
  if (!atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  xpc_release(v19);
}

void ___ZN13AntennaModule10initializeEN8dispatch13group_sessionE_block_invoke_15(void *a1, xpc_object_t *a2, const void **a3)
{
  uint64_t v4 = (std::__shared_weak_count *)a1[6];
  if (!v4) {
    return;
  }
  size_t v7 = (void *)a1[4];
  size_t v8 = std::__shared_weak_count::lock(v4);
  if (!v8) {
    return;
  }
  __int16 v9 = v8;
  uint64_t v10 = a1[5];
  if (atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (!v10) {
      return;
    }
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
    if (!v10) {
      return;
    }
  }
  xpc_object_t v11 = *a2;
  if (v11)
  {
    xpc_retain(v11);
    uint64_t v12 = *a3;
    if (*a3) {
      goto LABEL_9;
    }
  }
  else
  {
    xpc_object_t v11 = xpc_null_create();
    uint64_t v12 = *a3;
    if (*a3)
    {
LABEL_9:
      long long v13 = _Block_copy(v12);
      size_t v14 = (std::__shared_weak_count *)v7[16];
      if (!v14) {
LABEL_18:
      }
        std::__throw_bad_weak_ptr[abi:ne180100]();
      goto LABEL_13;
    }
  }
  long long v13 = 0;
  size_t v14 = (std::__shared_weak_count *)v7[16];
  if (!v14) {
    goto LABEL_18;
  }
LABEL_13:
  uint64_t v15 = v7[15];
  uint64_t v16 = std::__shared_weak_count::lock(v14);
  if (!v16) {
    goto LABEL_18;
  }
  uint64_t v17 = v16;
  uint64_t v18 = operator new(0x18uLL);
  *uint64_t v18 = v7;
  v18[1] = v11;
  xpc_object_t v19 = xpc_null_create();
  void v18[2] = v13;
  long long v20 = v7[17];
  atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
  size_t v21 = operator new(0x18uLL);
  void *v21 = v18;
  v21[1] = v15;
  uint64_t v21[2] = v17;
  dispatch_async_f(v20, v21, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI13AntennaModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb2_E3__3EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_);
  if (!atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  xpc_release(v19);
}

void ___ZN13AntennaModule10initializeEN8dispatch13group_sessionE_block_invoke_19(void *a1, xpc_object_t *a2, const void **a3)
{
  uint64_t v4 = (std::__shared_weak_count *)a1[6];
  if (!v4) {
    return;
  }
  size_t v7 = (void *)a1[4];
  size_t v8 = std::__shared_weak_count::lock(v4);
  if (!v8) {
    return;
  }
  __int16 v9 = v8;
  uint64_t v10 = a1[5];
  if (atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (!v10) {
      return;
    }
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
    if (!v10) {
      return;
    }
  }
  xpc_object_t v11 = *a2;
  if (v11)
  {
    xpc_retain(v11);
    uint64_t v12 = *a3;
    if (*a3) {
      goto LABEL_9;
    }
  }
  else
  {
    xpc_object_t v11 = xpc_null_create();
    uint64_t v12 = *a3;
    if (*a3)
    {
LABEL_9:
      long long v13 = _Block_copy(v12);
      size_t v14 = (std::__shared_weak_count *)v7[16];
      if (!v14) {
LABEL_18:
      }
        std::__throw_bad_weak_ptr[abi:ne180100]();
      goto LABEL_13;
    }
  }
  long long v13 = 0;
  size_t v14 = (std::__shared_weak_count *)v7[16];
  if (!v14) {
    goto LABEL_18;
  }
LABEL_13:
  uint64_t v15 = v7[15];
  uint64_t v16 = std::__shared_weak_count::lock(v14);
  if (!v16) {
    goto LABEL_18;
  }
  uint64_t v17 = v16;
  uint64_t v18 = operator new(0x18uLL);
  *uint64_t v18 = v7;
  v18[1] = v11;
  xpc_object_t v19 = xpc_null_create();
  void v18[2] = v13;
  long long v20 = v7[17];
  atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
  size_t v21 = operator new(0x18uLL);
  void *v21 = v18;
  v21[1] = v15;
  uint64_t v21[2] = v17;
  dispatch_async_f(v20, v21, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI13AntennaModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb3_E3__4EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_);
  if (!atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  xpc_release(v19);
}

void AntennaModule::finishInitialization_sync(std::__shared_weak_count **this)
{
  uint64_t v2 = (const char *)((uint64_t (*)(std::__shared_weak_count **))(*this)->__shared_weak_owners_)(this);
  size_t v3 = strlen(v2);
  if (v3 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v4 = (void *)v3;
  if (v3 >= 0x17)
  {
    uint64_t v6 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17) {
      uint64_t v6 = v3 | 7;
    }
    uint64_t v7 = v6 + 1;
    uint64_t v5 = (void **)operator new(v6 + 1);
    __dst[1] = v4;
    unint64_t v74 = v7 | 0x8000000000000000;
    __dst[0] = v5;
  }
  else
  {
    HIBYTE(v74) = v3;
    uint64_t v5 = __dst;
    if (!v3) {
      goto LABEL_9;
    }
  }
  memmove(v5, v2, (size_t)v4);
LABEL_9:
  *((unsigned char *)v4 + (void)v5) = 0;
  std::string v72 = 0;
  AppleBasebandManager::create();
  long long v8 = v75;
  long long v75 = 0uLL;
  __int16 v9 = this[21];
  *((_OWORD *)this + 10) = v8;
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  uint64_t v10 = (std::__shared_weak_count *)*((void *)&v75 + 1);
  if (!*((void *)&v75 + 1)
    || atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v75 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    xpc_object_t v11 = v72;
    if (!v72) {
      goto LABEL_16;
    }
    goto LABEL_15;
  }
  ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
  std::__shared_weak_count::__release_weak(v10);
  xpc_object_t v11 = v72;
  if (v72) {
LABEL_15:
  }
    CFRelease(v11);
LABEL_16:
  if (SHIBYTE(v74) < 0) {
    operator delete(__dst[0]);
  }
  uint64_t v12 = this[16];
  if (!v12 || (long long v13 = this[15], (v14 = std::__shared_weak_count::lock(v12)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v15 = v14;
  atomic_fetch_add_explicit(&v14->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v15);
  }
  uint64_t v16 = (const void *)*MEMORY[0x1E4F4CB10];
  size_t v17 = strlen((const char *)*MEMORY[0x1E4F4CB10]);
  if (v17 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v18 = (void *)v17;
  if (v17 >= 0x17)
  {
    uint64_t v20 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v17 | 7) != 0x17) {
      uint64_t v20 = v17 | 7;
    }
    uint64_t v21 = v20 + 1;
    xpc_object_t v19 = (void **)operator new(v20 + 1);
    v70[1] = v18;
    unint64_t v71 = v21 | 0x8000000000000000;
    v70[0] = v19;
    goto LABEL_29;
  }
  HIBYTE(v71) = v17;
  xpc_object_t v19 = v70;
  if (v17) {
LABEL_29:
  }
    memmove(v19, v16, (size_t)v18);
  *((unsigned char *)v18 + (void)v19) = 0;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN13AntennaModule25finishInitialization_syncEv_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_29_2;
  aBlock[4] = this;
  void aBlock[5] = v13;
  uint64_t v67 = v15;
  atomic_fetch_add_explicit(&v15->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  size_t v22 = _Block_copy(aBlock);
  xpc_object_t v23 = this[17];
  if (v23) {
    dispatch_retain((dispatch_object_t)this[17]);
  }
  uint64_t v68 = v22;
  dispatch_object_t v69 = v23;
  AppleBasebandManager::setEventHandler();
  if (v69) {
    dispatch_release(v69);
  }
  if (v68) {
    _Block_release(v68);
  }
  if (SHIBYTE(v71) < 0) {
    operator delete(v70[0]);
  }
  uint64_t v24 = (const void *)*MEMORY[0x1E4F4CB18];
  size_t v25 = strlen((const char *)*MEMORY[0x1E4F4CB18]);
  if (v25 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v26 = (void *)v25;
  if (v25 >= 0x17)
  {
    uint64_t v28 = (v25 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v25 | 7) != 0x17) {
      uint64_t v28 = v25 | 7;
    }
    uint64_t v29 = v28 + 1;
    uint64_t v27 = operator new(v28 + 1);
    __p[1] = v26;
    unint64_t v65 = v29 | 0x8000000000000000;
    __p[0] = v27;
    goto LABEL_45;
  }
  HIBYTE(v65) = v25;
  uint64_t v27 = __p;
  if (v25) {
LABEL_45:
  }
    memmove(v27, v24, (size_t)v26);
  *((unsigned char *)v26 + (void)v27) = 0;
  v60[0] = MEMORY[0x1E4F143A8];
  v60[1] = 1174405120;
  v60[2] = ___ZN13AntennaModule25finishInitialization_syncEv_block_invoke_30;
  v60[3] = &__block_descriptor_tmp_33_3;
  v60[4] = this;
  v60[5] = v13;
  unint64_t v61 = v15;
  atomic_fetch_add_explicit(&v15->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  uint64_t v30 = _Block_copy(v60);
  uint64_t v31 = this[17];
  if (v31) {
    dispatch_retain((dispatch_object_t)this[17]);
  }
  unint64_t v62 = v30;
  dispatch_object_t object = v31;
  AppleBasebandManager::setEventHandler();
  if (object) {
    dispatch_release(object);
  }
  if (v62) {
    _Block_release(v62);
  }
  if (SHIBYTE(v65) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v32 = (const void *)*MEMORY[0x1E4F4CEF8];
  size_t v33 = strlen((const char *)*MEMORY[0x1E4F4CEF8]);
  if (v33 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v34 = (void *)v33;
  if (v33 >= 0x17)
  {
    uint64_t v36 = (v33 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v33 | 7) != 0x17) {
      uint64_t v36 = v33 | 7;
    }
    uint64_t v37 = v36 + 1;
    int v35 = operator new(v36 + 1);
    v58[1] = v34;
    unint64_t v59 = v37 | 0x8000000000000000;
    v58[0] = v35;
    goto LABEL_61;
  }
  HIBYTE(v59) = v33;
  int v35 = v58;
  if (v33) {
LABEL_61:
  }
    memmove(v35, v32, (size_t)v34);
  *((unsigned char *)v34 + (void)v35) = 0;
  v54[0] = MEMORY[0x1E4F143A8];
  v54[1] = 1174405120;
  v54[2] = ___ZN13AntennaModule25finishInitialization_syncEv_block_invoke_34;
  v54[3] = &__block_descriptor_tmp_37_2;
  v54[4] = this;
  v54[5] = v13;
  uint64_t v55 = v15;
  atomic_fetch_add_explicit(&v15->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  int v38 = _Block_copy(v54);
  size_t v39 = this[17];
  if (v39) {
    dispatch_retain((dispatch_object_t)this[17]);
  }
  unint64_t v56 = v38;
  dispatch_object_t v57 = v39;
  AppleBasebandManager::setEventHandler();
  if (v57) {
    dispatch_release(v57);
  }
  if (v56) {
    _Block_release(v56);
  }
  if (SHIBYTE(v59) < 0) {
    operator delete(v58[0]);
  }
  uint64_t v40 = (const void *)*MEMORY[0x1E4F4C220];
  size_t v41 = strlen((const char *)*MEMORY[0x1E4F4C220]);
  if (v41 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  char v42 = (void *)v41;
  if (v41 >= 0x17)
  {
    uint64_t v44 = (v41 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v41 | 7) != 0x17) {
      uint64_t v44 = v41 | 7;
    }
    uint64_t v45 = v44 + 1;
    xpc_object_t v43 = operator new(v44 + 1);
    v52[1] = v42;
    unint64_t v53 = v45 | 0x8000000000000000;
    v52[0] = v43;
    goto LABEL_77;
  }
  HIBYTE(v53) = v41;
  xpc_object_t v43 = v52;
  if (v41) {
LABEL_77:
  }
    memmove(v43, v40, (size_t)v42);
  *((unsigned char *)v42 + (void)v43) = 0;
  v48[0] = MEMORY[0x1E4F143A8];
  v48[1] = 1174405120;
  v48[2] = ___ZN13AntennaModule25finishInitialization_syncEv_block_invoke_38;
  v48[3] = &__block_descriptor_tmp_41_2;
  v48[4] = this;
  v48[5] = v13;
  uint64_t v49 = v15;
  atomic_fetch_add_explicit(&v15->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  long long v46 = _Block_copy(v48);
  size_t v47 = this[17];
  if (v47) {
    dispatch_retain((dispatch_object_t)this[17]);
  }
  uint64_t v50 = v46;
  dispatch_object_t v51 = v47;
  AppleBasebandManager::setEventHandler();
  if (v51) {
    dispatch_release(v51);
  }
  if (v50) {
    _Block_release(v50);
  }
  if (SHIBYTE(v53) < 0) {
    operator delete(v52[0]);
  }
  AppleBasebandManager::eventsOn((AppleBasebandManager *)this[20]);
  if (v49) {
    std::__shared_weak_count::__release_weak(v49);
  }
  if (v55) {
    std::__shared_weak_count::__release_weak(v55);
  }
  if (v61) {
    std::__shared_weak_count::__release_weak(v61);
  }
  if (v67) {
    std::__shared_weak_count::__release_weak(v67);
  }
  std::__shared_weak_count::__release_weak(v15);
}

void sub_1C5893AAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,std::__shared_weak_count *a30,char a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,std::__shared_weak_count *a45,char a46,uint64_t a47,void *a48,uint64_t a49,int a50,__int16 a51,char a52,char a53)
{
  if (a15) {
    std::__shared_weak_count::__release_weak(a15);
  }
  if (a30) {
    std::__shared_weak_count::__release_weak(a30);
  }
  if (a45) {
    std::__shared_weak_count::__release_weak(a45);
  }
  unint64_t v56 = *(std::__shared_weak_count **)(v54 - 192);
  if (v56) {
    std::__shared_weak_count::__release_weak(v56);
  }
  std::__shared_weak_count::__release_weak(v53);
  _Unwind_Resume(a1);
}

void ___ZN13AntennaModule25finishInitialization_syncEv_block_invoke(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    uint64_t v3 = a1[4];
    uint64_t v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = a1[5];
      if (atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        if (!v6) {
          return;
        }
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v5);
        if (!v6) {
          return;
        }
      }
      uint64_t v7 = *(antenna::Service::Internal ***)(v3 + 176);
      if (v7)
      {
        long long v8 = *v7;
        if (*v7)
        {
          antenna::Service::Internal::dumpState(v8);
        }
      }
    }
  }
}

void ___ZN13AntennaModule25finishInitialization_syncEv_block_invoke_30(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    uint64_t v3 = a1[4];
    uint64_t v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = a1[5];
      if (atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        if (!v6) {
          return;
        }
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v5);
        if (!v6) {
          return;
        }
      }
      uint64_t v7 = *(antenna::Service::Internal ***)(v3 + 176);
      if (v7)
      {
        long long v8 = *v7;
        if (*v7)
        {
          antenna::Service::Internal::dumpState(v8);
        }
      }
    }
  }
}

void ___ZN13AntennaModule25finishInitialization_syncEv_block_invoke_34(void *a1, abm::client::Event **a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    uint64_t v5 = a1[4];
    uint64_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      uint64_t v7 = v6;
      uint64_t v8 = a1[5];
      if (atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        if (!v8) {
          return;
        }
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v7);
        if (!v8) {
          return;
        }
      }
      if (*(void *)(v5 + 176))
      {
        CFDictionaryRef v24 = (const __CFDictionary *)0xAAAAAAAAAAAAAAAALL;
        abm::client::Event::getData((uint64_t *)&v24, *a2);
        CFDictionaryRef v9 = v24;
        if (v24) {
          uint64_t v10 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
        }
        else {
          uint64_t v10 = 0;
        }
        if (v10)
        {
          v23[0] = 0xAAAAAAAAAAAAAAAALL;
          v23[1] = 0xAAAAAAAAAAAAAAAALL;
          ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v23, v24);
          __p[0] = 0;
          __p[1] = 0;
          uint64_t v22 = 0;
          ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v25, (const char *)*MEMORY[0x1E4F4C688]);
          ctu::cf::map_adapter::getString();
          MEMORY[0x1C8791110](&v25);
          uint64_t v22 = v20;
          *(_OWORD *)std::string __p = v19;
          if (v20 >= 0) {
            size_t v11 = HIBYTE(v20);
          }
          else {
            size_t v11 = *((void *)&v19 + 1);
          }
          if (v11 == strlen((const char *)*MEMORY[0x1E4F4CAE8])
            && (v20 >= 0 ? (uint64_t v12 = __p) : (uint64_t v12 = (void **)__p[0]), !memcmp(v12, (const void *)*MEMORY[0x1E4F4CAE8], v11)))
          {
            uint64_t v18 = **(antenna::Service::Internal ***)(v5 + 176);
            if (v18) {
              antenna::Service::Internal::startService(v18);
            }
          }
          else if (v11 == strlen((const char *)*MEMORY[0x1E4F4CCD8]) {
                 && (v20 >= 0 ? (long long v13 = __p) : (long long v13 = (void **)__p[0]),
          }
                     !memcmp(v13, (const void *)*MEMORY[0x1E4F4CCD8], v11))
                 || v11 == strlen((const char *)*MEMORY[0x1E4F4CEB8])
                 && (v20 >= 0 ? (size_t v14 = __p) : (size_t v14 = (void **)__p[0]),
                     !memcmp(v14, (const void *)*MEMORY[0x1E4F4CEB8], v11))
                 || v11 == strlen((const char *)*MEMORY[0x1E4F4C6E0])
                 && (v20 >= 0 ? (uint64_t v15 = __p) : (uint64_t v15 = (void **)__p[0]),
                     !memcmp(v15, (const void *)*MEMORY[0x1E4F4C6E0], v11))
                 || v11 == strlen((const char *)*MEMORY[0x1E4F4CAF0])
                 && (v20 >= 0 ? (uint64_t v16 = __p) : (uint64_t v16 = (void **)__p[0]),
                     !memcmp(v16, (const void *)*MEMORY[0x1E4F4CAF0], v11)))
          {
            size_t v17 = **(antenna::Service::Internal ***)(v5 + 176);
            if (v17) {
              antenna::Service::Internal::stopService(v17);
            }
          }
          if (SHIBYTE(v22) < 0) {
            operator delete(__p[0]);
          }
          MEMORY[0x1C8791160](v23);
          CFDictionaryRef v9 = v24;
        }
        if (v9) {
          CFRelease(v9);
        }
      }
    }
  }
}

BOOL std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(const void **a1, char *__s)
{
  int v4 = *((char *)a1 + 23);
  if (v4 >= 0) {
    size_t v5 = *((unsigned __int8 *)a1 + 23);
  }
  else {
    size_t v5 = (size_t)a1[1];
  }
  if (v5 != strlen(__s)) {
    return 0;
  }
  if (v4 >= 0) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *a1;
  }
  return memcmp(v6, __s, v5) == 0;
}

void ___ZN13AntennaModule25finishInitialization_syncEv_block_invoke_38(void *a1, abm::client::Event **a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    uint64_t v5 = a1[4];
    uint64_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      uint64_t v7 = v6;
      uint64_t v8 = a1[5];
      if (atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        if (!v8) {
          return;
        }
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v7);
        if (!v8) {
          return;
        }
      }
      if (*(void *)(v5 + 176))
      {
        *(void *)long long buf = 0xAAAAAAAAAAAAAAAALL;
        abm::client::Event::getData((uint64_t *)buf, *a2);
        if (*(void *)buf) {
          uint64_t v10 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
        }
        else {
          uint64_t v10 = 0;
        }
        if (v10)
        {
          ctu::cf_to_xpc((uint64_t *)object, *(ctu **)buf, v9);
          xpc_object_t v11 = object[0];
          if (object[0] && MEMORY[0x1C8792D30](object[0]) == MEMORY[0x1E4F14590]) {
            xpc_retain(v11);
          }
          else {
            xpc_object_t v11 = xpc_null_create();
          }
          xpc_release(object[0]);
          xpc_object_t value = xpc_dictionary_get_value(v11, (const char *)*MEMORY[0x1E4F4C1B0]);
          object[0] = value;
          if (value) {
            xpc_retain(value);
          }
          else {
            object[0] = xpc_null_create();
          }
          int v15 = xpc::dyn_cast_or_default((xpc *)object, 0);
          xpc_release(object[0]);
          uint64_t v16 = *(antenna::Service **)(v5 + 176);
          if (v15) {
            antenna::Service::callActive(v16);
          }
          else {
            antenna::Service::callInactive(v16);
          }
          xpc_release(v11);
        }
        else
        {
          long long v13 = *(NSObject **)(v5 + 88);
          if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
          {
            LOWORD(object[0]) = 0;
            _os_log_error_impl(&dword_1C5767000, v13, OS_LOG_TYPE_ERROR, "No input is given for voice call active state", (uint8_t *)object, 2u);
          }
        }
        if (*(void *)buf) {
          CFRelease(*(CFTypeRef *)buf);
        }
      }
      else
      {
        uint64_t v12 = *(NSObject **)(v5 + 88);
        if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)long long buf = 0;
          _os_log_error_impl(&dword_1C5767000, v12, OS_LOG_TYPE_ERROR, "Antenna Service has not created yet.", buf, 2u);
        }
      }
    }
  }
}

void sub_1C5894338(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object, uint64_t a10, const void *a11)
{
  xpc_release(v11);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&a11);
  _Unwind_Resume(a1);
}

void AntennaModule::sleep(void *a1, dispatch_object_t *a2)
{
  uint64_t v3 = *a2;
  if (*a2)
  {
    dispatch_retain(*a2);
    dispatch_group_enter(v3);
  }
  int v4 = (std::__shared_weak_count *)a1[16];
  if (!v4 || (v5 = a1[15], (uint64_t v6 = std::__shared_weak_count::lock(v4)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v7 = v6;
  uint64_t v8 = operator new(0x10uLL);
  void *v8 = a1;
  v8[1] = v3;
  CFDictionaryRef v9 = a1[17];
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v10 = operator new(0x18uLL);
  *uint64_t v10 = v8;
  v10[1] = v5;
  v10[2] = v7;
  dispatch_async_f(v9, v10, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<AntennaModule>::execute_wrapped<AntennaModule::sleep(dispatch::group_session)::$_0>(AntennaModule::sleep(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<AntennaModule::sleep(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<AntennaModule::sleep(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke);
  if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void AntennaModule::wake(void *a1, dispatch_object_t *a2)
{
  uint64_t v3 = *a2;
  if (*a2)
  {
    dispatch_retain(*a2);
    dispatch_group_enter(v3);
  }
  int v4 = (std::__shared_weak_count *)a1[16];
  if (!v4 || (v5 = a1[15], (uint64_t v6 = std::__shared_weak_count::lock(v4)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v7 = v6;
  uint64_t v8 = operator new(0x10uLL);
  void *v8 = a1;
  v8[1] = v3;
  CFDictionaryRef v9 = a1[17];
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v10 = operator new(0x18uLL);
  *uint64_t v10 = v8;
  v10[1] = v5;
  v10[2] = v7;
  dispatch_async_f(v9, v10, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<AntennaModule>::execute_wrapped<AntennaModule::wake(dispatch::group_session)::$_0>(AntennaModule::wake(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<AntennaModule::wake(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<AntennaModule::wake(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke);
  if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void AntennaModule::setProperty_sync(AntennaModule *this, xpc_object_t *a2)
{
  uint64_t v4 = MEMORY[0x1C8792D30](*a2);
  uint64_t v5 = MEMORY[0x1E4F14590];
  if (v4 != MEMORY[0x1E4F14590])
  {
    uint64_t v6 = *((void *)this + 11);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      _os_log_error_impl(&dword_1C5767000, v6, OS_LOG_TYPE_ERROR, "Failed to get input!", (uint8_t *)&buf, 2u);
    }
    return;
  }
  memset(&buf, 170, sizeof(buf));
  xpc_object_t value = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E4F4C878]);
  v111.__r_.__value_.__r.__words[0] = (std::string::size_type)value;
  if (value) {
    xpc_retain(value);
  }
  else {
    v111.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
  }
  xpc::dyn_cast_or_default((uint64_t *)&buf, (xpc *)&v111, (const object *)"", v8);
  xpc_release(v111.__r_.__value_.__l.__data_);
  std::string::size_type size = HIBYTE(buf.__r_.__value_.__r.__words[2]);
  if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = buf.__r_.__value_.__l.__size_;
  }
  if (!size || MEMORY[0x1C8792D30](*a2) != v5) {
    goto LABEL_73;
  }
  uint64_t v10 = (const void *)*MEMORY[0x1E4F4CAF8];
  size_t v11 = strlen((const char *)*MEMORY[0x1E4F4CAF8]);
  size_t v12 = v11;
  std::string::size_type v13 = HIBYTE(buf.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
  {
    if (v11 != -1)
    {
      std::string::size_type v14 = buf.__r_.__value_.__l.__size_;
      if (buf.__r_.__value_.__l.__size_ >= v11) {
        size_t v16 = v11;
      }
      else {
        size_t v16 = buf.__r_.__value_.__l.__size_;
      }
      if (memcmp(buf.__r_.__value_.__l.__data_, v10, v16)) {
        goto LABEL_27;
      }
      goto LABEL_23;
    }
LABEL_212:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v11 == -1) {
    goto LABEL_212;
  }
  std::string::size_type v14 = HIBYTE(buf.__r_.__value_.__r.__words[2]);
  if (HIBYTE(buf.__r_.__value_.__r.__words[2]) >= v11) {
    size_t v15 = v11;
  }
  else {
    size_t v15 = HIBYTE(buf.__r_.__value_.__r.__words[2]);
  }
  if (memcmp(&buf, v10, v15)) {
    goto LABEL_27;
  }
LABEL_23:
  if (v14 == v12)
  {
    xdict.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
    std::string::size_type v17 = *MEMORY[0x1E4F4C628];
    v111.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
    v111.__r_.__value_.__l.__size_ = v17;
    xpc::dict::object_proxy::operator xpc::dict((uint64_t)&v111, &xdict);
    if (MEMORY[0x1C8792D30](xdict.__r_.__value_.__r.__words[0]) == v5)
    {
      memset(&v111, 170, sizeof(v111));
      xpc_object_t v18 = xpc_dictionary_get_value(xdict.__r_.__value_.__l.__data_, (const char *)*MEMORY[0x1E4F4D290]);
      xpc_object_t object = v18;
      if (v18) {
        xpc_retain(v18);
      }
      else {
        xpc_object_t object = xpc_null_create();
      }
      xpc::dyn_cast_or_default((uint64_t *)&v111, (xpc *)&object, (const object *)"", v19);
      xpc_release(object);
      if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v110, v111.__r_.__value_.__l.__data_, v111.__r_.__value_.__l.__size_);
      }
      else {
        std::string v110 = v111;
      }
      AntennaModule::setPreference_sync<std::string>((uint64_t)this, (const void **)&buf.__r_.__value_.__l.__data_, (uint64_t)&v110);
      if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v110.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v111.__r_.__value_.__l.__data_);
      }
    }
    xpc_release(xdict.__r_.__value_.__l.__data_);
    goto LABEL_73;
  }
LABEL_27:
  size_t v20 = strlen((const char *)*MEMORY[0x1E4F4C508]);
  std::string::size_type v21 = v20;
  if ((v13 & 0x80) == 0)
  {
    if (v20 != -1)
    {
      p_std::string buf = &buf;
      std::string::size_type v23 = v13;
      goto LABEL_32;
    }
LABEL_213:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v20 == -1) {
    goto LABEL_213;
  }
  std::string::size_type v23 = buf.__r_.__value_.__l.__size_;
  p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
LABEL_32:
  if (v23 >= v21) {
    size_t v24 = v21;
  }
  else {
    size_t v24 = v23;
  }
  if (!memcmp(p_buf, (const void *)*MEMORY[0x1E4F4C508], v24) && v23 == v21)
  {
    memset(&v111, 170, sizeof(v111));
    xpc_object_t v25 = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E4F4C628]);
    xdict.__r_.__value_.__r.__words[0] = (std::string::size_type)v25;
    if (v25) {
      xpc_retain(v25);
    }
    else {
      xdict.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
    }
    xpc::dyn_cast_or_default((uint64_t *)&v111, (xpc *)&xdict, (const object *)"", v26);
    xpc_release(xdict.__r_.__value_.__l.__data_);
    if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v109, v111.__r_.__value_.__l.__data_, v111.__r_.__value_.__l.__size_);
    }
    else {
      std::string v109 = v111;
    }
    AntennaModule::setPreference_sync<std::string>((uint64_t)this, (const void **)&buf.__r_.__value_.__l.__data_, (uint64_t)&v109);
    if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0)
    {
      int v38 = (void *)v109.__r_.__value_.__r.__words[0];
LABEL_61:
      operator delete(v38);
    }
LABEL_62:
    if ((SHIBYTE(v111.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_73;
    }
    goto LABEL_63;
  }
  size_t v27 = strlen((const char *)*MEMORY[0x1E4F4C710]);
  std::string::size_type v28 = v27;
  if ((v13 & 0x80) == 0)
  {
    if (v27 != -1)
    {
      uint64_t v29 = &buf;
      std::string::size_type v30 = v13;
      goto LABEL_44;
    }
LABEL_214:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v27 == -1) {
    goto LABEL_214;
  }
  std::string::size_type v30 = buf.__r_.__value_.__l.__size_;
  uint64_t v29 = (std::string *)buf.__r_.__value_.__r.__words[0];
LABEL_44:
  if (v30 >= v28) {
    size_t v31 = v28;
  }
  else {
    size_t v31 = v30;
  }
  if (!memcmp(v29, (const void *)*MEMORY[0x1E4F4C710], v31) && v30 == v28)
  {
    xpc_object_t object = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
    std::string::size_type v32 = *MEMORY[0x1E4F4C628];
    v111.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
    v111.__r_.__value_.__l.__size_ = v32;
    xpc::dict::object_proxy::operator xpc::dict((uint64_t)&v111, &object);
    if (MEMORY[0x1C8792D30](object) == v5)
    {
      memset(&v111, 170, sizeof(v111));
      std::string::size_type v33 = *MEMORY[0x1E4F4D0C8];
      xdict.__r_.__value_.__r.__words[0] = (std::string::size_type)&object;
      xdict.__r_.__value_.__l.__size_ = v33;
      xpc::dict::object_proxy::operator xpc::object((uint64_t)&xdict, &v108);
      xpc::dyn_cast_or_default((uint64_t *)&v111, (xpc *)&v108, (const object *)"", v34);
      xpc_release(v108);
      if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v107, v111.__r_.__value_.__l.__data_, v111.__r_.__value_.__l.__size_);
      }
      else {
        std::string v107 = v111;
      }
      AntennaModule::setPreference_sync<std::string>((uint64_t)this, (const void **)&buf.__r_.__value_.__l.__data_, (uint64_t)&v107);
      if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v107.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v111.__r_.__value_.__l.__data_);
      }
    }
LABEL_143:
    xpc_release(object);
    goto LABEL_73;
  }
  size_t v35 = strlen((const char *)*MEMORY[0x1E4F4C868]);
  std::string::size_type v36 = v35;
  if ((v13 & 0x80) == 0)
  {
    if (v35 != -1)
    {
      uint64_t v37 = &buf;
      goto LABEL_78;
    }
LABEL_215:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v35 == -1) {
    goto LABEL_215;
  }
  std::string::size_type v13 = buf.__r_.__value_.__l.__size_;
  uint64_t v37 = (std::string *)buf.__r_.__value_.__r.__words[0];
LABEL_78:
  if (v13 >= v36) {
    size_t v39 = v36;
  }
  else {
    size_t v39 = v13;
  }
  if (!memcmp(v37, (const void *)*MEMORY[0x1E4F4C868], v39) && v13 == v36)
  {
    xpc_object_t object = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
    std::string::size_type v40 = *MEMORY[0x1E4F4C628];
    v111.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
    v111.__r_.__value_.__l.__size_ = v40;
    xpc::dict::object_proxy::operator xpc::dict((uint64_t)&v111, &object);
    if (MEMORY[0x1C8792D30](object) == v5)
    {
      memset(&v111, 170, sizeof(v111));
      std::string::size_type v41 = *MEMORY[0x1E4F4D140];
      xdict.__r_.__value_.__r.__words[0] = (std::string::size_type)&object;
      xdict.__r_.__value_.__l.__size_ = v41;
      xpc::dict::object_proxy::operator xpc::object((uint64_t)&xdict, &v108);
      xpc::dyn_cast_or_default((uint64_t *)&v111, (xpc *)&v108, (const object *)"", v42);
      xpc_release(v108);
      if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v106, v111.__r_.__value_.__l.__data_, v111.__r_.__value_.__l.__size_);
      }
      else {
        std::string v106 = v111;
      }
      AntennaModule::setPreference_sync<std::string>((uint64_t)this, (const void **)&buf.__r_.__value_.__l.__data_, (uint64_t)&v106);
      if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v106.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v111.__r_.__value_.__l.__data_);
      }
    }
    goto LABEL_143;
  }
  if (!std::string::compare(&buf, (const std::string::value_type *)*MEMORY[0x1E4F4CFA8]))
  {
    xpc_object_t object = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
    std::string::size_type v43 = *MEMORY[0x1E4F4C628];
    v111.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
    v111.__r_.__value_.__l.__size_ = v43;
    xpc::dict::object_proxy::operator xpc::dict((uint64_t)&v111, &object);
    if (MEMORY[0x1C8792D30](object) == v5)
    {
      memset(&v111, 170, sizeof(v111));
      std::string::size_type v44 = *MEMORY[0x1E4F4D270];
      xdict.__r_.__value_.__r.__words[0] = (std::string::size_type)&object;
      xdict.__r_.__value_.__l.__size_ = v44;
      xpc::dict::object_proxy::operator xpc::object((uint64_t)&xdict, &v108);
      xpc::dyn_cast_or_default((uint64_t *)&v111, (xpc *)&v108, (const object *)"", v45);
      xpc_release(v108);
      if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v105, v111.__r_.__value_.__l.__data_, v111.__r_.__value_.__l.__size_);
      }
      else {
        std::string v105 = v111;
      }
      AntennaModule::setPreference_sync<std::string>((uint64_t)this, (const void **)&buf.__r_.__value_.__l.__data_, (uint64_t)&v105);
      if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v105.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v111.__r_.__value_.__l.__data_);
      }
    }
    goto LABEL_143;
  }
  if (!std::string::compare(&buf, (const std::string::value_type *)*MEMORY[0x1E4F4CFD0]))
  {
    memset(&v111, 170, sizeof(v111));
    long long v46 = (char *)*MEMORY[0x1E4F4C308];
    xdict.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
    xdict.__r_.__value_.__l.__size_ = (std::string::size_type)v46;
    xpc::dict::object_proxy::operator xpc::object((uint64_t)&xdict, &object);
    xpc::dyn_cast_or_default((uint64_t *)&v111, (xpc *)&object, (const object *)"", v47);
    xpc_release(object);
    memset(&xdict, 170, sizeof(xdict));
    unint64_t v48 = (char *)*MEMORY[0x1E4F4C4F0];
    xpc_object_t object = a2;
    xpc_object_t v102 = v48;
    xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v108);
    xpc::dyn_cast_or_default((uint64_t *)&xdict, (xpc *)&v108, (const object *)"", v49);
    xpc_release(v108);
    std::string::basic_string[abi:ne180100]<0>(&object, v46);
    if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v100, v111.__r_.__value_.__l.__data_, v111.__r_.__value_.__l.__size_);
    }
    else {
      std::string v100 = v111;
    }
    AntennaModule::setPreference_sync<std::string>((uint64_t)this, (const void **)&object, (uint64_t)&v100);
    if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v100.__r_.__value_.__l.__data_);
    }
    if (v103 < 0) {
      operator delete(object);
    }
    std::string::basic_string[abi:ne180100]<0>(&object, v48);
    if (SHIBYTE(xdict.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v99, xdict.__r_.__value_.__l.__data_, xdict.__r_.__value_.__l.__size_);
    }
    else {
      std::string v99 = xdict;
    }
    AntennaModule::setPreference_sync<std::string>((uint64_t)this, (const void **)&object, (uint64_t)&v99);
    if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v99.__r_.__value_.__l.__data_);
      if ((v103 & 0x80000000) == 0)
      {
LABEL_128:
        if ((SHIBYTE(xdict.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_62;
        }
        goto LABEL_132;
      }
    }
    else if ((v103 & 0x80000000) == 0)
    {
      goto LABEL_128;
    }
    operator delete(object);
    if ((SHIBYTE(xdict.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_62;
    }
LABEL_132:
    int v38 = (void *)xdict.__r_.__value_.__r.__words[0];
    goto LABEL_61;
  }
  if (!std::string::compare(&buf, (const std::string::value_type *)*MEMORY[0x1E4F4C808]))
  {
    memset(&v111, 170, sizeof(v111));
    std::string::size_type v50 = *MEMORY[0x1E4F4C628];
    xdict.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
    xdict.__r_.__value_.__l.__size_ = v50;
    xpc::dict::object_proxy::operator xpc::object((uint64_t)&xdict, &object);
    xpc::dyn_cast_or_default((uint64_t *)&v111, (xpc *)&object, (const object *)"", v51);
    xpc_release(object);
    if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v98, v111.__r_.__value_.__l.__data_, v111.__r_.__value_.__l.__size_);
    }
    else {
      std::string v98 = v111;
    }
    AntennaModule::setPreference_sync<std::string>((uint64_t)this, (const void **)&buf.__r_.__value_.__l.__data_, (uint64_t)&v98);
    if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0)
    {
      int v38 = (void *)v98.__r_.__value_.__r.__words[0];
      goto LABEL_61;
    }
    goto LABEL_62;
  }
  if (!std::string::compare(&buf, (const std::string::value_type *)*MEMORY[0x1E4F4CFA0]))
  {
    memset(&v111, 170, sizeof(v111));
    std::string::size_type v52 = *MEMORY[0x1E4F4C628];
    xdict.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
    xdict.__r_.__value_.__l.__size_ = v52;
    xpc::dict::object_proxy::operator xpc::object((uint64_t)&xdict, &object);
    xpc::dyn_cast_or_default((uint64_t *)&v111, (xpc *)&object, (const object *)"", v53);
    xpc_release(object);
    if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v97, v111.__r_.__value_.__l.__data_, v111.__r_.__value_.__l.__size_);
    }
    else {
      std::string v97 = v111;
    }
    AntennaModule::setPreference_sync<std::string>((uint64_t)this, (const void **)&buf.__r_.__value_.__l.__data_, (uint64_t)&v97);
    if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
    {
      int v38 = (void *)v97.__r_.__value_.__r.__words[0];
      goto LABEL_61;
    }
    goto LABEL_62;
  }
  if (!std::string::compare(&buf, (const std::string::value_type *)*MEMORY[0x1E4F4CF90]))
  {
    memset(&v111, 170, sizeof(v111));
    std::string::size_type v54 = *MEMORY[0x1E4F4C628];
    xdict.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
    xdict.__r_.__value_.__l.__size_ = v54;
    xpc::dict::object_proxy::operator xpc::object((uint64_t)&xdict, &object);
    xpc::dyn_cast_or_default((uint64_t *)&v111, (xpc *)&object, (const object *)"", v55);
    xpc_release(object);
    if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v96, v111.__r_.__value_.__l.__data_, v111.__r_.__value_.__l.__size_);
    }
    else {
      std::string v96 = v111;
    }
    AntennaModule::setPreference_sync<std::string>((uint64_t)this, (const void **)&buf.__r_.__value_.__l.__data_, (uint64_t)&v96);
    if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0)
    {
      int v38 = (void *)v96.__r_.__value_.__r.__words[0];
      goto LABEL_61;
    }
    goto LABEL_62;
  }
  if (!std::string::compare(&buf, (const std::string::value_type *)*MEMORY[0x1E4F4C810]))
  {
    memset(&v111, 170, sizeof(v111));
    std::string::size_type v56 = *MEMORY[0x1E4F4C628];
    xdict.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
    xdict.__r_.__value_.__l.__size_ = v56;
    xpc::dict::object_proxy::operator xpc::object((uint64_t)&xdict, &object);
    xpc::dyn_cast_or_default((uint64_t *)&v111, (xpc *)&object, (const object *)"", v57);
    xpc_release(object);
    if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v95, v111.__r_.__value_.__l.__data_, v111.__r_.__value_.__l.__size_);
    }
    else {
      std::string v95 = v111;
    }
    AntennaModule::setPreference_sync<std::string>((uint64_t)this, (const void **)&buf.__r_.__value_.__l.__data_, (uint64_t)&v95);
    if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0)
    {
      int v38 = (void *)v95.__r_.__value_.__r.__words[0];
      goto LABEL_61;
    }
    goto LABEL_62;
  }
  if (!std::string::compare(&buf, (const std::string::value_type *)*MEMORY[0x1E4F4D018]))
  {
    memset(&v111, 170, sizeof(v111));
    std::string::size_type v58 = *MEMORY[0x1E4F4C628];
    xdict.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
    xdict.__r_.__value_.__l.__size_ = v58;
    xpc::dict::object_proxy::operator xpc::object((uint64_t)&xdict, &object);
    xpc::dyn_cast_or_default((uint64_t *)&v111, (xpc *)&object, (const object *)"", v59);
    xpc_release(object);
    if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v94, v111.__r_.__value_.__l.__data_, v111.__r_.__value_.__l.__size_);
    }
    else {
      std::string v94 = v111;
    }
    AntennaModule::setPreference_sync<std::string>((uint64_t)this, (const void **)&buf.__r_.__value_.__l.__data_, (uint64_t)&v94);
    if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v94.__r_.__value_.__l.__data_);
    }
    char v62 = HIBYTE(v111.__r_.__value_.__r.__words[2]);
    if ((v111.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unsigned int v63 = &v111;
    }
    else {
      unsigned int v63 = (std::string *)v111.__r_.__value_.__r.__words[0];
    }
    size_t v64 = strlen((const char *)*MEMORY[0x1E4F4D2C8]);
    if (strncasecmp((const char *)v63, (const char *)*MEMORY[0x1E4F4D2C8], v64))
    {
      unint64_t v65 = (const char *)*MEMORY[0x1E4F4D278];
      std::string::basic_string[abi:ne180100]<0>(&xdict, (char *)*MEMORY[0x1E4F4D278]);
      xpc_object_t object = a2;
      xpc_object_t v102 = v65;
      xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v108);
      int v66 = xpc::dyn_cast_or_default((xpc *)&v108, 0);
      AntennaModule::setPreference_sync<int>((uint64_t)this, (const void **)&xdict.__r_.__value_.__l.__data_, v66);
      xpc_release(v108);
      if (SHIBYTE(xdict.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(xdict.__r_.__value_.__l.__data_);
      }
      uint64_t v67 = (const char *)*MEMORY[0x1E4F4D230];
      std::string::basic_string[abi:ne180100]<0>(&xdict, (char *)*MEMORY[0x1E4F4D230]);
      xpc_object_t object = a2;
      xpc_object_t v102 = v67;
      xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v108);
      int v68 = xpc::dyn_cast_or_default((xpc *)&v108, 0);
      AntennaModule::setPreference_sync<int>((uint64_t)this, (const void **)&xdict.__r_.__value_.__l.__data_, v68);
      xpc_release(v108);
      if (SHIBYTE(xdict.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(xdict.__r_.__value_.__l.__data_);
      }
      dispatch_object_t v69 = (const char *)*MEMORY[0x1E4F4D080];
      std::string::basic_string[abi:ne180100]<0>(&xdict, (char *)*MEMORY[0x1E4F4D080]);
      xpc_object_t object = a2;
      xpc_object_t v102 = v69;
      xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v108);
      int v70 = xpc::dyn_cast_or_default((xpc *)&v108, 0);
      AntennaModule::setPreference_sync<int>((uint64_t)this, (const void **)&xdict.__r_.__value_.__l.__data_, v70);
      xpc_release(v108);
      if (SHIBYTE(xdict.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(xdict.__r_.__value_.__l.__data_);
      }
      unint64_t v71 = (const char *)*MEMORY[0x1E4F4D078];
      std::string::basic_string[abi:ne180100]<0>(&xdict, (char *)*MEMORY[0x1E4F4D078]);
      xpc_object_t object = a2;
      xpc_object_t v102 = v71;
      xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v108);
      int v72 = xpc::dyn_cast_or_default((xpc *)&v108, 0);
      AntennaModule::setPreference_sync<int>((uint64_t)this, (const void **)&xdict.__r_.__value_.__l.__data_, v72);
      xpc_release(v108);
      goto LABEL_187;
    }
  }
  else
  {
    if (std::string::compare(&buf, "kSetWorkoutInfo"))
    {
      if (!std::string::compare(&buf, (const std::string::value_type *)*MEMORY[0x1E4F4C108]))
      {
        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v92, buf.__r_.__value_.__l.__data_, buf.__r_.__value_.__l.__size_);
        }
        else {
          std::string v92 = buf;
        }
        AntennaModule::setPreference_sync<std::string>((uint64_t)this, (const void **)&buf.__r_.__value_.__l.__data_, (uint64_t)&v92);
        if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v92.__r_.__value_.__l.__data_);
        }
        xpc_object_t object = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
        std::string::size_type v79 = *MEMORY[0x1E4F4C628];
        v111.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
        v111.__r_.__value_.__l.__size_ = v79;
        xpc::dict::object_proxy::operator xpc::object((uint64_t)&v111, &xdict);
        xpc_object_t v80 = xpc_null_create();
        unint64_t v81 = (void *)xdict.__r_.__value_.__r.__words[0];
        xpc_object_t object = (xpc_object_t)xdict.__r_.__value_.__r.__words[0];
        if (xdict.__r_.__value_.__r.__words[0] && MEMORY[0x1C8792D30](xdict.__r_.__value_.__r.__words[0]) == v5) {
          xpc_retain(v81);
        }
        else {
          xpc_object_t object = xpc_null_create();
        }
        if (MEMORY[0x1C8792D30]() != v5) {
          xpc::dict::operator=(&object, v80);
        }
        xpc_release(v80);
        xpc_release(xdict.__r_.__value_.__l.__data_);
        std::string::size_type v82 = *MEMORY[0x1E4F4CCB0];
        std::string::basic_string[abi:ne180100]<0>(&v111, (char *)*MEMORY[0x1E4F4CCB0]);
        xdict.__r_.__value_.__r.__words[0] = (std::string::size_type)&object;
        xdict.__r_.__value_.__l.__size_ = v82;
        xpc::dict::object_proxy::operator xpc::object((uint64_t)&xdict, &v108);
        xpc::dyn_cast_or_default((uint64_t *)__p, (xpc *)&v108, (const object *)"", v83);
        AntennaModule::setPreference_sync<std::string>((uint64_t)this, (const void **)&v111.__r_.__value_.__l.__data_, (uint64_t)__p);
        if (v91 < 0) {
          operator delete(__p[0]);
        }
        xpc_release(v108);
        if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v111.__r_.__value_.__l.__data_);
        }
        std::string::size_type v84 = *MEMORY[0x1E4F4C460];
        std::string::basic_string[abi:ne180100]<0>(&v111, (char *)*MEMORY[0x1E4F4C460]);
        xdict.__r_.__value_.__r.__words[0] = (std::string::size_type)&object;
        xdict.__r_.__value_.__l.__size_ = v84;
        xpc::dict::object_proxy::operator xpc::object((uint64_t)&xdict, &v108);
        unsigned int v85 = xpc::dyn_cast_or_default((xpc *)&v108, (const object *)0x7FFF);
        AntennaModule::setPreference_sync<unsigned int>((uint64_t)this, (const void **)&v111.__r_.__value_.__l.__data_, v85);
        xpc_release(v108);
        if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v111.__r_.__value_.__l.__data_);
        }
        std::string::size_type v86 = *MEMORY[0x1E4F4C620];
        std::string::basic_string[abi:ne180100]<0>(&v111, (char *)*MEMORY[0x1E4F4C620]);
        xdict.__r_.__value_.__r.__words[0] = (std::string::size_type)&object;
        xdict.__r_.__value_.__l.__size_ = v86;
        xpc::dict::object_proxy::operator xpc::object((uint64_t)&xdict, &v108);
        unsigned int v87 = xpc::dyn_cast_or_default((xpc *)&v108, (const object *)0x7FFF);
        AntennaModule::setPreference_sync<unsigned int>((uint64_t)this, (const void **)&v111.__r_.__value_.__l.__data_, v87);
        xpc_release(v108);
        if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v111.__r_.__value_.__l.__data_);
        }
        std::string::size_type v88 = *MEMORY[0x1E4F4C290];
        std::string::basic_string[abi:ne180100]<0>(&v111, (char *)*MEMORY[0x1E4F4C290]);
        xdict.__r_.__value_.__r.__words[0] = (std::string::size_type)&object;
        xdict.__r_.__value_.__l.__size_ = v88;
        xpc::dict::object_proxy::operator xpc::object((uint64_t)&xdict, &v108);
        unsigned int v89 = xpc::dyn_cast_or_default((xpc *)&v108, (const object *)0x7FFF);
        AntennaModule::setPreference_sync<unsigned int>((uint64_t)this, (const void **)&v111.__r_.__value_.__l.__data_, v89);
        xpc_release(v108);
        if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v111.__r_.__value_.__l.__data_);
        }
        xpc_release(object);
      }
      goto LABEL_73;
    }
    memset(&v111, 170, sizeof(v111));
    std::string::size_type v60 = *MEMORY[0x1E4F4C628];
    xdict.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
    xdict.__r_.__value_.__l.__size_ = v60;
    xpc::dict::object_proxy::operator xpc::object((uint64_t)&xdict, &object);
    xpc::dyn_cast_or_default((uint64_t *)&v111, (xpc *)&object, (const object *)"", v61);
    xpc_release(object);
    if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v93, v111.__r_.__value_.__l.__data_, v111.__r_.__value_.__l.__size_);
    }
    else {
      std::string v93 = v111;
    }
    AntennaModule::setPreference_sync<std::string>((uint64_t)this, (const void **)&buf.__r_.__value_.__l.__data_, (uint64_t)&v93);
    if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v93.__r_.__value_.__l.__data_);
    }
    char v62 = HIBYTE(v111.__r_.__value_.__r.__words[2]);
    if ((v111.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint32_t v73 = &v111;
    }
    else {
      uint32_t v73 = (std::string *)v111.__r_.__value_.__r.__words[0];
    }
    size_t v74 = strlen((const char *)*MEMORY[0x1E4F4D2C8]);
    if (strncasecmp((const char *)v73, (const char *)*MEMORY[0x1E4F4D2C8], v74))
    {
      std::string::basic_string[abi:ne180100]<0>(&xdict, "kKeyWorkoutType");
      xpc_object_t object = a2;
      xpc_object_t v102 = "kKeyWorkoutType";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v108);
      unsigned int v75 = xpc::dyn_cast_or_default((xpc *)&v108, 0);
      AntennaModule::setPreference_sync<unsigned int>((uint64_t)this, (const void **)&xdict.__r_.__value_.__l.__data_, v75);
      xpc_release(v108);
      if (SHIBYTE(xdict.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(xdict.__r_.__value_.__l.__data_);
      }
      std::string::basic_string[abi:ne180100]<0>(&xdict, "kKeyWorkoutState");
      xpc_object_t object = a2;
      xpc_object_t v102 = "kKeyWorkoutState";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v108);
      unsigned int v76 = xpc::dyn_cast_or_default((xpc *)&v108, 0);
      AntennaModule::setPreference_sync<unsigned int>((uint64_t)this, (const void **)&xdict.__r_.__value_.__l.__data_, v76);
      xpc_release(v108);
      if (SHIBYTE(xdict.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(xdict.__r_.__value_.__l.__data_);
      }
      std::string::basic_string[abi:ne180100]<0>(&xdict, "kKeyWorkoutLocation");
      xpc_object_t object = a2;
      xpc_object_t v102 = "kKeyWorkoutLocation";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v108);
      unsigned int v77 = xpc::dyn_cast_or_default((xpc *)&v108, 0);
      AntennaModule::setPreference_sync<unsigned int>((uint64_t)this, (const void **)&xdict.__r_.__value_.__l.__data_, v77);
      xpc_release(v108);
      if (SHIBYTE(xdict.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(xdict.__r_.__value_.__l.__data_);
      }
      std::string::basic_string[abi:ne180100]<0>(&xdict, "kKeySwimLocation");
      xpc_object_t object = a2;
      xpc_object_t v102 = "kKeySwimLocation";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v108);
      unsigned int v78 = xpc::dyn_cast_or_default((xpc *)&v108, 0);
      AntennaModule::setPreference_sync<unsigned int>((uint64_t)this, (const void **)&xdict.__r_.__value_.__l.__data_, v78);
      xpc_release(v108);
LABEL_187:
      if (SHIBYTE(xdict.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(xdict.__r_.__value_.__l.__data_);
      }
      char v62 = HIBYTE(v111.__r_.__value_.__r.__words[2]);
    }
  }
  if (v62 < 0) {
LABEL_63:
  }
    operator delete(v111.__r_.__value_.__l.__data_);
LABEL_73:
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf.__r_.__value_.__l.__data_);
  }
}

void sub_1C5895818(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 113) < 0) {
    operator delete(*(void **)(v1 - 136));
  }
  if (*(char *)(v1 - 89) < 0)
  {
    operator delete(*(void **)(v1 - 112));
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void AntennaModule::setPreference_sync<std::string>(uint64_t a1, const void **a2, uint64_t a3)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  pthread_mutex_lock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
  if (!qword_1EBBDD0C0)
  {
    uint64_t v7 = operator new(0x18uLL);
    MEMORY[0x1C8791170](v7, @"com.apple.AppleBasebandManager", *MEMORY[0x1E4F1D3F0]);
    uint64_t v6 = operator new(0x20uLL);
    void *v6 = &unk_1F20F3BE0;
    v6[1] = 0;
    v6[2] = 0;
    void v6[3] = v7;
    uint64_t v8 = (std::__shared_weak_count *)off_1EBBDD0C8;
    qword_1EBBDD0C0 = (uint64_t)v7;
    off_1EBBDD0C8 = v6;
    if (!v8)
    {
      uint64_t v23 = (uint64_t)v7;
      size_t v24 = (std::__shared_weak_count *)v6;
      goto LABEL_8;
    }
    if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  LODWORD(v7) = qword_1EBBDD0C0;
  uint64_t v6 = off_1EBBDD0C8;
  uint64_t v23 = qword_1EBBDD0C0;
  size_t v24 = (std::__shared_weak_count *)off_1EBBDD0C8;
  if (off_1EBBDD0C8) {
LABEL_8:
  }
    atomic_fetch_add_explicit(v6 + 1, 1uLL, memory_order_relaxed);
  pthread_mutex_unlock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
  int v9 = *((char *)a2 + 23);
  if (v9 >= 0) {
    size_t v10 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v10 = (size_t)a2[1];
  }
  unint64_t v11 = v10 + 16;
  memset(buf, 170, sizeof(buf));
  if (v10 + 16 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v11 >= 0x17)
  {
    uint64_t v13 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17) {
      uint64_t v13 = v11 | 7;
    }
    uint64_t v14 = v13 + 1;
    size_t v15 = operator new(v13 + 1);
    *(void *)&uint8_t buf[8] = v10 + 16;
    *(void *)&uint8_t buf[16] = v14 | 0x8000000000000000;
    *(void *)std::string buf = v15;
    _OWORD *v15 = *(_OWORD *)"AntennaSetting::";
    size_t v12 = (uint8_t *)(v15 + 1);
LABEL_20:
    if (v9 >= 0) {
      size_t v16 = a2;
    }
    else {
      size_t v16 = *a2;
    }
    memmove(v12, v16, v10);
    v12[v10] = 0;
    if ((*(char *)(a3 + 23) & 0x80000000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_24;
  }
  size_t v12 = &buf[16];
  *(void *)&uint8_t buf[16] = 0;
  buf[23] = v10 + 16;
  *(_OWORD *)std::string buf = *(_OWORD *)"AntennaSetting::";
  if (v10) {
    goto LABEL_20;
  }
  uint8_t buf[16] = 0;
  if ((*(char *)(a3 + 23) & 0x80000000) == 0)
  {
LABEL_16:
    std::string __p = *(std::string *)a3;
    goto LABEL_25;
  }
LABEL_24:
  std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
LABEL_25:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v25, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else {
    std::string v25 = __p;
  }
  if ((buf[23] & 0x80u) == 0) {
    std::string::size_type v17 = (char *)buf;
  }
  else {
    std::string::size_type v17 = *(char **)buf;
  }
  char v18 = ctu::cf::plist_adapter::set<std::string>((int)v7, (uint64_t)&v25, v17);
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v25.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_33:
      if (((char)buf[23] & 0x80000000) == 0) {
        goto LABEL_34;
      }
      goto LABEL_38;
    }
  }
  else if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_33;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (((char)buf[23] & 0x80000000) == 0)
  {
LABEL_34:
    long long v19 = v24;
    if (!v24) {
      goto LABEL_40;
    }
    goto LABEL_39;
  }
LABEL_38:
  operator delete(*(void **)buf);
  long long v19 = v24;
  if (!v24) {
    goto LABEL_40;
  }
LABEL_39:
  if (!atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
    if (v18) {
      return;
    }
    goto LABEL_41;
  }
LABEL_40:
  if (v18) {
    return;
  }
LABEL_41:
  size_t v20 = *(NSObject **)(a1 + 88);
  if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
  {
    *(_OWORD *)&v25.__r_.__value_.__l.__data_ = *(_OWORD *)"AntennaSetting::";
    v25.__r_.__value_.__r.__words[2] = 0x1000000000000000;
    if (*((char *)a2 + 23) >= 0) {
      std::string::size_type v21 = a2;
    }
    else {
      std::string::size_type v21 = (void *)*a2;
    }
    *(_DWORD *)std::string buf = 136315394;
    *(void *)&uint8_t buf[4] = &v25;
    *(_WORD *)&buf[12] = 2080;
    *(void *)&buf[14] = v21;
    _os_log_error_impl(&dword_1C5767000, v20, OS_LOG_TYPE_ERROR, "Failed to set property with %s%s", buf, 0x16u);
    if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v25.__r_.__value_.__l.__data_);
    }
  }
}

void sub_1C5896260(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a30 & 0x80000000) == 0)
    {
LABEL_3:
      std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
      _Unwind_Resume(a1);
    }
  }
  else if ((a30 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a25);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_1C5896334(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void AntennaModule::setPreference_sync<int>(uint64_t a1, const void **a2, int a3)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  pthread_mutex_lock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
  if (!qword_1EBBDD0C0)
  {
    uint64_t v7 = (CFStringRef *)operator new(0x18uLL);
    MEMORY[0x1C8791170](v7, @"com.apple.AppleBasebandManager", *MEMORY[0x1E4F1D3F0]);
    uint64_t v6 = operator new(0x20uLL);
    void *v6 = &unk_1F20F3BE0;
    v6[1] = 0;
    v6[2] = 0;
    void v6[3] = v7;
    uint64_t v8 = (std::__shared_weak_count *)off_1EBBDD0C8;
    qword_1EBBDD0C0 = (uint64_t)v7;
    off_1EBBDD0C8 = v6;
    if (!v8)
    {
      *(void *)std::string buf = v7;
      *(void *)&uint8_t buf[8] = v6;
      goto LABEL_8;
    }
    if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  uint64_t v7 = (CFStringRef *)qword_1EBBDD0C0;
  uint64_t v6 = off_1EBBDD0C8;
  *(void *)std::string buf = qword_1EBBDD0C0;
  *(void *)&uint8_t buf[8] = off_1EBBDD0C8;
  if (off_1EBBDD0C8) {
LABEL_8:
  }
    atomic_fetch_add_explicit(v6 + 1, 1uLL, memory_order_relaxed);
  pthread_mutex_unlock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
  int v9 = *((char *)a2 + 23);
  if (v9 >= 0) {
    size_t v10 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v10 = (size_t)a2[1];
  }
  unint64_t v11 = v10 + 16;
  memset(__p, 170, sizeof(__p));
  if (v10 + 16 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v11 >= 0x17)
  {
    uint64_t v13 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17) {
      uint64_t v13 = v11 | 7;
    }
    uint64_t v14 = v13 + 1;
    size_t v15 = (void **)operator new(v13 + 1);
    __p[1] = (void *)(v10 + 16);
    __p[2] = (void *)(v14 | 0x8000000000000000);
    __p[0] = v15;
    *(_OWORD *)size_t v15 = *(_OWORD *)"AntennaSetting::";
    size_t v12 = v15 + 2;
  }
  else
  {
    size_t v12 = &__p[2];
    __p[2] = 0;
    HIBYTE(__p[2]) = v10 + 16;
    *(_OWORD *)std::string __p = *(_OWORD *)"AntennaSetting::";
    if (!v10) {
      goto LABEL_23;
    }
  }
  if (v9 >= 0) {
    size_t v16 = a2;
  }
  else {
    size_t v16 = *a2;
  }
  memmove(v12, v16, v10);
LABEL_23:
  *((unsigned char *)v12 + v10) = 0;
  if (SHIBYTE(__p[2]) >= 0) {
    std::string::size_type v17 = __p;
  }
  else {
    std::string::size_type v17 = (void **)__p[0];
  }
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)v27, (const char *)v17);
  CFStringRef v18 = (const __CFString *)v27[0];
  CFAllocatorRef v19 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  int valuePtr = a3;
  CFNumberRef v20 = CFNumberCreate(v19, kCFNumberIntType, &valuePtr);
  v27[1] = v20;
  if (v20)
  {
    CFStringRef v21 = (const __CFString *)*MEMORY[0x1E4F1D3E0];
    CFPreferencesSetValue(v18, v20, v7[1], v7[2], (CFStringRef)*MEMORY[0x1E4F1D3E0]);
    BOOL v22 = CFPreferencesSynchronize(v7[1], v7[2], v21) != 0;
    CFRelease(v20);
    MEMORY[0x1C8791110](v27);
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0) {
      goto LABEL_28;
    }
  }
  else
  {
    BOOL v22 = 0;
    MEMORY[0x1C8791110](v27);
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
    {
LABEL_28:
      uint64_t v23 = *(std::__shared_weak_count **)&buf[8];
      if (!*(void *)&buf[8]) {
        goto LABEL_33;
      }
      goto LABEL_32;
    }
  }
  operator delete(__p[0]);
  uint64_t v23 = *(std::__shared_weak_count **)&buf[8];
  if (!*(void *)&buf[8]) {
    goto LABEL_33;
  }
LABEL_32:
  if (!atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
    if (v22) {
      return;
    }
    goto LABEL_34;
  }
LABEL_33:
  if (v22) {
    return;
  }
LABEL_34:
  size_t v24 = *(NSObject **)(a1 + 88);
  if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
  {
    *(_OWORD *)std::string __p = *(_OWORD *)"AntennaSetting::";
    __p[2] = (void *)0x1000000000000000;
    if (*((char *)a2 + 23) >= 0) {
      std::string v25 = a2;
    }
    else {
      std::string v25 = (void *)*a2;
    }
    *(_DWORD *)std::string buf = 136315394;
    *(void *)&uint8_t buf[4] = __p;
    *(_WORD *)&buf[12] = 2080;
    *(void *)&buf[14] = v25;
    _os_log_error_impl(&dword_1C5767000, v24, OS_LOG_TYPE_ERROR, "Failed to set property with %s%s", buf, 0x16u);
    if (SHIBYTE(__p[2]) < 0) {
      operator delete(__p[0]);
    }
  }
}

void AntennaModule::setPreference_sync<unsigned int>(uint64_t a1, const void **a2, unsigned int a3)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  pthread_mutex_lock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
  if (!qword_1EBBDD0C0)
  {
    uint64_t v7 = operator new(0x18uLL);
    MEMORY[0x1C8791170](v7, @"com.apple.AppleBasebandManager", *MEMORY[0x1E4F1D3F0]);
    uint64_t v6 = operator new(0x20uLL);
    void *v6 = &unk_1F20F3BE0;
    v6[1] = 0;
    v6[2] = 0;
    void v6[3] = v7;
    uint64_t v8 = (std::__shared_weak_count *)off_1EBBDD0C8;
    qword_1EBBDD0C0 = (uint64_t)v7;
    off_1EBBDD0C8 = v6;
    if (!v8)
    {
      *(void *)std::string buf = v7;
      *(void *)&uint8_t buf[8] = v6;
      goto LABEL_8;
    }
    if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  uint64_t v7 = (void *)qword_1EBBDD0C0;
  uint64_t v6 = off_1EBBDD0C8;
  *(void *)std::string buf = qword_1EBBDD0C0;
  *(void *)&uint8_t buf[8] = off_1EBBDD0C8;
  if (off_1EBBDD0C8) {
LABEL_8:
  }
    atomic_fetch_add_explicit(v6 + 1, 1uLL, memory_order_relaxed);
  pthread_mutex_unlock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
  int v9 = *((char *)a2 + 23);
  if (v9 >= 0) {
    size_t v10 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v10 = (size_t)a2[1];
  }
  unint64_t v11 = v10 + 16;
  memset(__p, 170, sizeof(__p));
  if (v10 + 16 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v11 >= 0x17)
  {
    uint64_t v13 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17) {
      uint64_t v13 = v11 | 7;
    }
    uint64_t v14 = v13 + 1;
    size_t v15 = (void **)operator new(v13 + 1);
    __p[1] = (void *)(v10 + 16);
    __p[2] = (void *)(v14 | 0x8000000000000000);
    __p[0] = v15;
    *(_OWORD *)size_t v15 = *(_OWORD *)"AntennaSetting::";
    size_t v12 = v15 + 2;
  }
  else
  {
    size_t v12 = &__p[2];
    __p[2] = 0;
    HIBYTE(__p[2]) = v10 + 16;
    *(_OWORD *)std::string __p = *(_OWORD *)"AntennaSetting::";
    if (!v10) {
      goto LABEL_23;
    }
  }
  if (v9 >= 0) {
    size_t v16 = a2;
  }
  else {
    size_t v16 = *a2;
  }
  memmove(v12, v16, v10);
LABEL_23:
  *((unsigned char *)v12 + v10) = 0;
  if (SHIBYTE(__p[2]) >= 0) {
    std::string::size_type v17 = __p;
  }
  else {
    std::string::size_type v17 = (void **)__p[0];
  }
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v23, (const char *)v17);
  BOOL v18 = ctu::cf::plist_adapter::set<unsigned int>((uint64_t)v7, a3, v23, 1);
  MEMORY[0x1C8791110](&v23);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  CFAllocatorRef v19 = *(std::__shared_weak_count **)&buf[8];
  if (*(void *)&buf[8]
    && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
    if (v18) {
      return;
    }
  }
  else if (v18)
  {
    return;
  }
  CFNumberRef v20 = *(NSObject **)(a1 + 88);
  if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
  {
    *(_OWORD *)std::string __p = *(_OWORD *)"AntennaSetting::";
    __p[2] = (void *)0x1000000000000000;
    if (*((char *)a2 + 23) >= 0) {
      CFStringRef v21 = a2;
    }
    else {
      CFStringRef v21 = (void *)*a2;
    }
    *(_DWORD *)std::string buf = 136315394;
    *(void *)&uint8_t buf[4] = __p;
    *(_WORD *)&buf[12] = 2080;
    *(void *)&buf[14] = v21;
    _os_log_error_impl(&dword_1C5767000, v20, OS_LOG_TYPE_ERROR, "Failed to set property with %s%s", buf, 0x16u);
    if (SHIBYTE(__p[2]) < 0) {
      operator delete(__p[0]);
    }
  }
}

void AntennaModule::initializeProperty(AntennaModule *this)
{
  for (uint64_t i = (uint64_t *)*((void *)this + 19); i; uint64_t i = (uint64_t *)*i)
  {
    memset(&v13, 170, sizeof(v13));
    if (*((char *)i + 31) < 0)
    {
      std::string::__init_copy_ctor_external(&v13, (const std::string::value_type *)i[1], i[2]);
      unint64_t v11 = this;
      if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
      {
LABEL_8:
        std::string::__init_copy_ctor_external(&__p, v13.__r_.__value_.__l.__data_, v13.__r_.__value_.__l.__size_);
        goto LABEL_9;
      }
    }
    else
    {
      long long v3 = *(_OWORD *)(i + 1);
      v13.__r_.__value_.__r.__words[2] = i[3];
      *(_OWORD *)&v13.__r_.__value_.__l.__data_ = v3;
      unint64_t v11 = this;
      if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
        goto LABEL_8;
      }
    }
    std::string __p = v13;
LABEL_9:
    uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 16);
    if (!v4 || (v5 = *((void *)this + 15), (uint64_t v6 = std::__shared_weak_count::lock(v4)) == 0)) {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    uint64_t v7 = v6;
    uint64_t v8 = (char *)operator new(0x20uLL);
    *(void *)uint64_t v8 = v11;
    *(std::string *)(v8 + 8) = __p;
    memset(&__p, 0, sizeof(__p));
    int v9 = *((void *)this + 17);
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    size_t v10 = operator new(0x18uLL);
    *size_t v10 = v8;
    v10[1] = v5;
    v10[2] = v7;
    dispatch_async_f(v9, v10, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<AntennaModule>::execute_wrapped<AntennaModule::initializeProperty(void)::$_0>(AntennaModule::initializeProperty(void)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<AntennaModule::initializeProperty(void)::$_0,dispatch_queue_s *::default_delete<AntennaModule::initializeProperty(void)::$_0>>)::{lambda(void *)#1}::__invoke);
    if (atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_13;
      }
    }
    else
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_13:
        if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
          goto LABEL_17;
        }
        continue;
      }
    }
    operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
LABEL_17:
    }
      operator delete(v13.__r_.__value_.__l.__data_);
  }
}

void sub_1C5896D68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void AntennaModule::initializeProperty_sync(uint64_t a1, uint64_t a2)
{
  xpc_object_t v396 = xpc_null_create();
  uint64_t v4 = (const void *)*MEMORY[0x1E4F4CAF8];
  size_t v5 = strlen((const char *)*MEMORY[0x1E4F4CAF8]);
  size_t v6 = v5;
  size_t v7 = *(unsigned __int8 *)(a2 + 23);
  if (*(char *)(a2 + 23) < 0)
  {
    if (v5 == -1) {
      goto LABEL_775;
    }
    int v9 = *(const void **)a2;
    size_t v8 = *(void *)(a2 + 8);
  }
  else
  {
    size_t v8 = *(unsigned __int8 *)(a2 + 23);
    int v9 = (const void *)a2;
    if (v6 == -1) {
LABEL_775:
    }
      std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v8 >= v6) {
    size_t v10 = v6;
  }
  else {
    size_t v10 = v8;
  }
  BOOL v11 = !memcmp(v9, v4, v10) && v8 == v6;
  uint64_t v12 = MEMORY[0x1E4F14590];
  if (v11)
  {
    v393 = 0;
    uint64_t v394 = 0;
    uint64_t v395 = 0;
    pthread_mutex_lock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
    if (!qword_1EBBDD0C0)
    {
      CFAllocatorRef v19 = (uint64_t (***)(void *, int64_t))operator new(0x18uLL);
      MEMORY[0x1C8791170](v19, @"com.apple.AppleBasebandManager", *MEMORY[0x1E4F1D3F0]);
      BOOL v18 = operator new(0x20uLL);
      *BOOL v18 = &unk_1F20F3BE0;
      v18[1] = 0;
      void v18[2] = 0;
      void v18[3] = v19;
      uint64_t v29 = (std::__shared_weak_count *)off_1EBBDD0C8;
      qword_1EBBDD0C0 = (uint64_t)v19;
      off_1EBBDD0C8 = v18;
      if (!v29)
      {
        __p[0] = v19;
        __p[1] = v18;
        goto LABEL_61;
      }
      if (!atomic_fetch_add(&v29->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
    CFAllocatorRef v19 = (uint64_t (***)(void *, int64_t))qword_1EBBDD0C0;
    BOOL v18 = off_1EBBDD0C8;
    __p[0] = (void *)qword_1EBBDD0C0;
    __p[1] = off_1EBBDD0C8;
    if (!off_1EBBDD0C8)
    {
LABEL_62:
      pthread_mutex_unlock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
      int v39 = *(char *)(a2 + 23);
      if (v39 >= 0) {
        size_t v40 = *(unsigned __int8 *)(a2 + 23);
      }
      else {
        size_t v40 = *(void *)(a2 + 8);
      }
      unint64_t v41 = v40 + 16;
      memset(__dst, 170, 24);
      if (v40 + 16 > 0x7FFFFFFFFFFFFFF7) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      if (v41 >= 0x17)
      {
        uint64_t v43 = (v41 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v41 | 7) != 0x17) {
          uint64_t v43 = v41 | 7;
        }
        uint64_t v44 = v43 + 1;
        uint64_t v45 = operator new(v43 + 1);
        *((void *)&__dst[0] + 1) = v40 + 16;
        *(void *)&__dst[1] = v44 | 0x8000000000000000;
        *(void *)&__dst[0] = v45;
        *uint64_t v45 = *(_OWORD *)"AntennaSetting::";
        char v42 = v45 + 1;
      }
      else
      {
        char v42 = &__dst[1];
        *(void *)&__dst[1] = 0;
        BYTE7(__dst[1]) = v40 + 16;
        __dst[0] = *(_OWORD *)"AntennaSetting::";
        if (!v40) {
          goto LABEL_76;
        }
      }
      if (v39 >= 0) {
        long long v46 = (const void *)a2;
      }
      else {
        long long v46 = *(const void **)a2;
      }
      memmove(v42, v46, v40);
LABEL_76:
      *((unsigned char *)v42 + v40) = 0;
      if ((SBYTE7(__dst[1]) & 0x80u) == 0) {
        size_t v47 = (const char *)__dst;
      }
      else {
        size_t v47 = *(const char **)&__dst[0];
      }
      ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&value, v47);
      unint64_t v48 = (const void *)(**v19)(v19, value);
      if (v48)
      {
        int v49 = ctu::cf::assign();
        CFRelease(v48);
        MEMORY[0x1C8791110](&value);
        if ((SBYTE7(__dst[1]) & 0x80000000) == 0) {
          goto LABEL_81;
        }
      }
      else
      {
        int v49 = 0;
        MEMORY[0x1C8791110](&value);
        if ((SBYTE7(__dst[1]) & 0x80000000) == 0)
        {
LABEL_81:
          std::string::size_type v50 = (std::__shared_weak_count *)__p[1];
          if (!__p[1]) {
            goto LABEL_86;
          }
          goto LABEL_85;
        }
      }
      operator delete(*(void **)&__dst[0]);
      std::string::size_type v50 = (std::__shared_weak_count *)__p[1];
      if (!__p[1]) {
        goto LABEL_86;
      }
LABEL_85:
      if (!atomic_fetch_add(&v50->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
        std::__shared_weak_count::__release_weak(v50);
        if (!v49) {
          goto LABEL_769;
        }
LABEL_87:
        xpc_object_t v51 = xpc_dictionary_create(0, 0, 0);
        if (v51 || (xpc_object_t v51 = xpc_null_create()) != 0)
        {
          if (MEMORY[0x1C8792D30](v51) == v12)
          {
            xpc_retain(v51);
            xpc_object_t v52 = v51;
          }
          else
          {
            xpc_object_t v52 = xpc_null_create();
          }
        }
        else
        {
          xpc_object_t v52 = xpc_null_create();
          xpc_object_t v51 = 0;
        }
        xpc_release(v51);
        xpc_object_t v76 = xpc_null_create();
        unsigned int v77 = v396;
        xpc_object_t v396 = v52;
        xpc_release(v77);
        xpc_release(v76);
        xpc_object_t v78 = xpc_string_create((const char *)v4);
        if (!v78) {
          xpc_object_t v78 = xpc_null_create();
        }
        xpc_dictionary_set_value(v396, (const char *)*MEMORY[0x1E4F4C878], v78);
        xpc_object_t v79 = xpc_null_create();
        xpc_release(v78);
        xpc_release(v79);
        xpc_object_t v80 = xpc_dictionary_create(0, 0, 0);
        if (v80 || (xpc_object_t v80 = xpc_null_create()) != 0)
        {
          if (MEMORY[0x1C8792D30](v80) == v12)
          {
            xpc_retain(v80);
            xpc_object_t v81 = v80;
          }
          else
          {
            xpc_object_t v81 = xpc_null_create();
          }
        }
        else
        {
          xpc_object_t v81 = xpc_null_create();
          xpc_object_t v80 = 0;
        }
        xpc_release(v80);
        if (v395 >= 0) {
          std::string::size_type v82 = (const char *)&v393;
        }
        else {
          std::string::size_type v82 = v393;
        }
        xpc_object_t v83 = xpc_string_create(v82);
        if (!v83) {
          xpc_object_t v83 = xpc_null_create();
        }
        xpc_dictionary_set_value(v81, (const char *)*MEMORY[0x1E4F4D290], v83);
        xpc_object_t v84 = xpc_null_create();
        xpc_release(v83);
        xpc_release(v84);
        if (v81)
        {
LABEL_476:
          xpc_retain(v81);
          xpc_object_t v234 = v81;
LABEL_478:
          xpc_dictionary_set_value(v396, (const char *)*MEMORY[0x1E4F4C628], v234);
          xpc_object_t v235 = xpc_null_create();
          xpc_release(v234);
          xpc_release(v235);
          xpc_release(v81);
          goto LABEL_769;
        }
LABEL_477:
        xpc_object_t v234 = xpc_null_create();
        goto LABEL_478;
      }
LABEL_86:
      if (!v49) {
        goto LABEL_769;
      }
      goto LABEL_87;
    }
LABEL_61:
    atomic_fetch_add_explicit(v18 + 1, 1uLL, memory_order_relaxed);
    goto LABEL_62;
  }
  std::string v13 = (const char *)*MEMORY[0x1E4F4C508];
  size_t v14 = strlen((const char *)*MEMORY[0x1E4F4C508]);
  size_t v15 = v14;
  if ((v7 & 0x80) != 0)
  {
    if (v14 == -1) {
      goto LABEL_776;
    }
    std::string::size_type v17 = *(const void **)a2;
    size_t v16 = *(void *)(a2 + 8);
  }
  else
  {
    size_t v16 = v7;
    std::string::size_type v17 = (const void *)a2;
    if (v15 == -1) {
LABEL_776:
    }
      std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v16 >= v15) {
    size_t v20 = v15;
  }
  else {
    size_t v20 = v16;
  }
  if (!memcmp(v17, v13, v20) && v16 == v15)
  {
    v393 = 0;
    uint64_t v394 = 0;
    uint64_t v395 = 0;
    pthread_mutex_lock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
    if (!qword_1EBBDD0C0)
    {
      std::string::size_type v28 = (uint64_t (***)(void *, int64_t))operator new(0x18uLL);
      MEMORY[0x1C8791170](v28, @"com.apple.AppleBasebandManager", *MEMORY[0x1E4F1D3F0]);
      uint64_t v27 = operator new(0x20uLL);
      void *v27 = &unk_1F20F3BE0;
      v27[1] = 0;
      void v27[2] = 0;
      v27[3] = v28;
      int v38 = (std::__shared_weak_count *)off_1EBBDD0C8;
      qword_1EBBDD0C0 = (uint64_t)v28;
      off_1EBBDD0C8 = v27;
      if (!v38)
      {
        __p[0] = v28;
        __p[1] = v27;
        goto LABEL_114;
      }
      if (!atomic_fetch_add(&v38->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
        std::__shared_weak_count::__release_weak(v38);
      }
    }
    std::string::size_type v28 = (uint64_t (***)(void *, int64_t))qword_1EBBDD0C0;
    uint64_t v27 = off_1EBBDD0C8;
    __p[0] = (void *)qword_1EBBDD0C0;
    __p[1] = off_1EBBDD0C8;
    if (!off_1EBBDD0C8)
    {
LABEL_115:
      pthread_mutex_unlock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
      int v62 = *(char *)(a2 + 23);
      if (v62 >= 0) {
        size_t v63 = *(unsigned __int8 *)(a2 + 23);
      }
      else {
        size_t v63 = *(void *)(a2 + 8);
      }
      unint64_t v64 = v63 + 16;
      memset(__dst, 170, 24);
      if (v63 + 16 > 0x7FFFFFFFFFFFFFF7) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      if (v64 >= 0x17)
      {
        uint64_t v66 = (v64 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v64 | 7) != 0x17) {
          uint64_t v66 = v64 | 7;
        }
        uint64_t v67 = v66 + 1;
        int v68 = operator new(v66 + 1);
        *((void *)&__dst[0] + 1) = v63 + 16;
        *(void *)&__dst[1] = v67 | 0x8000000000000000;
        *(void *)&__dst[0] = v68;
        *int v68 = *(_OWORD *)"AntennaSetting::";
        unint64_t v65 = v68 + 1;
      }
      else
      {
        unint64_t v65 = &__dst[1];
        *(void *)&__dst[1] = 0;
        BYTE7(__dst[1]) = v63 + 16;
        __dst[0] = *(_OWORD *)"AntennaSetting::";
        if (!v63) {
          goto LABEL_129;
        }
      }
      if (v62 >= 0) {
        dispatch_object_t v69 = (const void *)a2;
      }
      else {
        dispatch_object_t v69 = *(const void **)a2;
      }
      memmove(v65, v69, v63);
LABEL_129:
      *((unsigned char *)v65 + v63) = 0;
      if ((SBYTE7(__dst[1]) & 0x80u) == 0) {
        int v70 = (const char *)__dst;
      }
      else {
        int v70 = *(const char **)&__dst[0];
      }
      ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&value, v70);
      unint64_t v71 = (const void *)(**v28)(v28, value);
      if (v71)
      {
        int v72 = ctu::cf::assign();
        CFRelease(v71);
        MEMORY[0x1C8791110](&value);
        if ((SBYTE7(__dst[1]) & 0x80000000) == 0) {
          goto LABEL_134;
        }
      }
      else
      {
        int v72 = 0;
        MEMORY[0x1C8791110](&value);
        if ((SBYTE7(__dst[1]) & 0x80000000) == 0)
        {
LABEL_134:
          uint32_t v73 = (std::__shared_weak_count *)__p[1];
          if (!__p[1]) {
            goto LABEL_139;
          }
          goto LABEL_138;
        }
      }
      operator delete(*(void **)&__dst[0]);
      uint32_t v73 = (std::__shared_weak_count *)__p[1];
      if (!__p[1]) {
        goto LABEL_139;
      }
LABEL_138:
      if (!atomic_fetch_add(&v73->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
        std::__shared_weak_count::__release_weak(v73);
        if (!v72) {
          goto LABEL_769;
        }
LABEL_140:
        xpc_object_t v74 = xpc_dictionary_create(0, 0, 0);
        if (v74 || (xpc_object_t v74 = xpc_null_create()) != 0)
        {
          if (MEMORY[0x1C8792D30](v74) == v12)
          {
            xpc_retain(v74);
            xpc_object_t v75 = v74;
          }
          else
          {
            xpc_object_t v75 = xpc_null_create();
          }
        }
        else
        {
          xpc_object_t v75 = xpc_null_create();
          xpc_object_t v74 = 0;
        }
        xpc_release(v74);
        xpc_object_t v108 = xpc_null_create();
        std::string v109 = v396;
        xpc_object_t v396 = v75;
        xpc_release(v109);
        xpc_release(v108);
        xpc_object_t v110 = xpc_string_create(v13);
        if (!v110) {
          xpc_object_t v110 = xpc_null_create();
        }
        xpc_dictionary_set_value(v396, (const char *)*MEMORY[0x1E4F4C878], v110);
        xpc_object_t v111 = xpc_null_create();
        xpc_release(v110);
        xpc_release(v111);
        if (v395 >= 0) {
          v112 = (const char *)&v393;
        }
        else {
          v112 = v393;
        }
        xpc_object_t v113 = xpc_string_create(v112);
        if (!v113) {
          xpc_object_t v113 = xpc_null_create();
        }
        xpc_dictionary_set_value(v396, (const char *)*MEMORY[0x1E4F4C628], v113);
        xpc_object_t v114 = xpc_null_create();
        xpc_release(v113);
        xpc_release(v114);
        goto LABEL_769;
      }
LABEL_139:
      if (!v72) {
        goto LABEL_769;
      }
      goto LABEL_140;
    }
LABEL_114:
    atomic_fetch_add_explicit(v27 + 1, 1uLL, memory_order_relaxed);
    goto LABEL_115;
  }
  BOOL v22 = (const void *)*MEMORY[0x1E4F4C710];
  size_t v23 = strlen((const char *)*MEMORY[0x1E4F4C710]);
  size_t v24 = v23;
  if ((v7 & 0x80) == 0)
  {
    size_t v25 = v7;
    if (v23 != -1)
    {
      if (v7 >= v23) {
        size_t v26 = v23;
      }
      else {
        size_t v26 = v7;
      }
      if (memcmp((const void *)a2, v22, v26)) {
        goto LABEL_50;
      }
LABEL_46:
      if (v25 != v24) {
        goto LABEL_50;
      }
      v393 = 0;
      uint64_t v394 = 0;
      uint64_t v395 = 0;
      pthread_mutex_lock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
      if (!qword_1EBBDD0C0)
      {
        std::string::size_type v32 = (uint64_t (***)(void *, int64_t))operator new(0x18uLL);
        MEMORY[0x1C8791170](v32, @"com.apple.AppleBasebandManager", *MEMORY[0x1E4F1D3F0]);
        size_t v31 = operator new(0x20uLL);
        *size_t v31 = &unk_1F20F3BE0;
        v31[1] = 0;
        v31[2] = 0;
        v31[3] = v32;
        unint64_t v61 = (std::__shared_weak_count *)off_1EBBDD0C8;
        qword_1EBBDD0C0 = (uint64_t)v32;
        off_1EBBDD0C8 = v31;
        if (!v61)
        {
          __p[0] = v32;
          __p[1] = v31;
          goto LABEL_179;
        }
        if (!atomic_fetch_add(&v61->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
          std::__shared_weak_count::__release_weak(v61);
        }
      }
      std::string::size_type v32 = (uint64_t (***)(void *, int64_t))qword_1EBBDD0C0;
      size_t v31 = off_1EBBDD0C8;
      __p[0] = (void *)qword_1EBBDD0C0;
      __p[1] = off_1EBBDD0C8;
      if (!off_1EBBDD0C8)
      {
LABEL_180:
        pthread_mutex_unlock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
        int v94 = *(char *)(a2 + 23);
        if (v94 >= 0) {
          size_t v95 = *(unsigned __int8 *)(a2 + 23);
        }
        else {
          size_t v95 = *(void *)(a2 + 8);
        }
        unint64_t v96 = v95 + 16;
        memset(__dst, 170, 24);
        if (v95 + 16 > 0x7FFFFFFFFFFFFFF7) {
          std::string::__throw_length_error[abi:ne180100]();
        }
        if (v96 >= 0x17)
        {
          uint64_t v98 = (v96 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v96 | 7) != 0x17) {
            uint64_t v98 = v96 | 7;
          }
          uint64_t v99 = v98 + 1;
          std::string v100 = operator new(v98 + 1);
          *((void *)&__dst[0] + 1) = v95 + 16;
          *(void *)&__dst[1] = v99 | 0x8000000000000000;
          *(void *)&__dst[0] = v100;
          *std::string v100 = *(_OWORD *)"AntennaSetting::";
          std::string v97 = v100 + 1;
        }
        else
        {
          std::string v97 = &__dst[1];
          *(void *)&__dst[1] = 0;
          BYTE7(__dst[1]) = v95 + 16;
          __dst[0] = *(_OWORD *)"AntennaSetting::";
          if (!v95) {
            goto LABEL_194;
          }
        }
        if (v94 >= 0) {
          unint64_t v101 = (const void *)a2;
        }
        else {
          unint64_t v101 = *(const void **)a2;
        }
        memmove(v97, v101, v95);
LABEL_194:
        *((unsigned char *)v97 + v95) = 0;
        if ((SBYTE7(__dst[1]) & 0x80u) == 0) {
          xpc_object_t v102 = (const char *)__dst;
        }
        else {
          xpc_object_t v102 = *(const char **)&__dst[0];
        }
        ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&value, v102);
        char v103 = (const void *)(**v32)(v32, value);
        if (v103)
        {
          int v104 = ctu::cf::assign();
          CFRelease(v103);
          MEMORY[0x1C8791110](&value);
          if ((SBYTE7(__dst[1]) & 0x80000000) == 0) {
            goto LABEL_199;
          }
        }
        else
        {
          int v104 = 0;
          MEMORY[0x1C8791110](&value);
          if ((SBYTE7(__dst[1]) & 0x80000000) == 0)
          {
LABEL_199:
            std::string v105 = (std::__shared_weak_count *)__p[1];
            if (!__p[1]) {
              goto LABEL_205;
            }
            goto LABEL_203;
          }
        }
        operator delete(*(void **)&__dst[0]);
        std::string v105 = (std::__shared_weak_count *)__p[1];
        if (!__p[1]) {
          goto LABEL_205;
        }
LABEL_203:
        if (!atomic_fetch_add(&v105->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
          std::__shared_weak_count::__release_weak(v105);
        }
LABEL_205:
        if (!v104) {
          goto LABEL_769;
        }
        xpc_object_t v106 = xpc_dictionary_create(0, 0, 0);
        if (v106 || (xpc_object_t v106 = xpc_null_create()) != 0)
        {
          if (MEMORY[0x1C8792D30](v106) == v12)
          {
            xpc_retain(v106);
            xpc_object_t v107 = v106;
          }
          else
          {
            xpc_object_t v107 = xpc_null_create();
          }
        }
        else
        {
          xpc_object_t v107 = xpc_null_create();
          xpc_object_t v106 = 0;
        }
        xpc_release(v106);
        xpc_object_t v137 = xpc_null_create();
        v138 = v396;
        xpc_object_t v396 = v107;
        xpc_release(v138);
        xpc_release(v137);
        xpc_object_t v139 = xpc_string_create((const char *)v22);
        if (!v139) {
          xpc_object_t v139 = xpc_null_create();
        }
        xpc_dictionary_set_value(v396, (const char *)*MEMORY[0x1E4F4C878], v139);
        xpc_object_t v140 = xpc_null_create();
        xpc_release(v139);
        xpc_release(v140);
        xpc_object_t v141 = xpc_dictionary_create(0, 0, 0);
        if (v141 || (xpc_object_t v141 = xpc_null_create()) != 0)
        {
          if (MEMORY[0x1C8792D30](v141) == v12)
          {
            xpc_retain(v141);
            xpc_object_t v81 = v141;
          }
          else
          {
            xpc_object_t v81 = xpc_null_create();
          }
        }
        else
        {
          xpc_object_t v81 = xpc_null_create();
          xpc_object_t v141 = 0;
        }
        xpc_release(v141);
        if (v395 >= 0) {
          v142 = (const char *)&v393;
        }
        else {
          v142 = v393;
        }
        xpc_object_t v143 = xpc_string_create(v142);
        if (!v143) {
          xpc_object_t v143 = xpc_null_create();
        }
        xpc_dictionary_set_value(v81, (const char *)*MEMORY[0x1E4F4D0C8], v143);
        xpc_object_t v144 = xpc_null_create();
        xpc_release(v143);
        xpc_release(v144);
        if (v81) {
          goto LABEL_476;
        }
        goto LABEL_477;
      }
LABEL_179:
      atomic_fetch_add_explicit(v31 + 1, 1uLL, memory_order_relaxed);
      goto LABEL_180;
    }
LABEL_778:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v23 == -1) {
    goto LABEL_778;
  }
  size_t v25 = *(void *)(a2 + 8);
  if (v25 >= v23) {
    size_t v30 = v23;
  }
  else {
    size_t v30 = *(void *)(a2 + 8);
  }
  if (!memcmp(*(const void **)a2, v22, v30)) {
    goto LABEL_46;
  }
LABEL_50:
  std::string::size_type v33 = (const void *)*MEMORY[0x1E4F4C868];
  size_t v34 = strlen((const char *)*MEMORY[0x1E4F4C868]);
  size_t v35 = v34;
  if ((v7 & 0x80) == 0)
  {
    size_t v36 = v7;
    if (v34 != -1)
    {
      if (v7 >= v34) {
        size_t v37 = v34;
      }
      else {
        size_t v37 = v7;
      }
      if (memcmp((const void *)a2, v33, v37)) {
        goto LABEL_103;
      }
LABEL_99:
      if (v36 != v35) {
        goto LABEL_103;
      }
      v393 = 0;
      uint64_t v394 = 0;
      uint64_t v395 = 0;
      pthread_mutex_lock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
      if (!qword_1EBBDD0C0)
      {
        uint64_t v55 = (uint64_t (***)(void *, int64_t))operator new(0x18uLL);
        MEMORY[0x1C8791170](v55, @"com.apple.AppleBasebandManager", *MEMORY[0x1E4F1D3F0]);
        std::string::size_type v54 = operator new(0x20uLL);
        void *v54 = &unk_1F20F3BE0;
        v54[1] = 0;
        v54[2] = 0;
        v54[3] = v55;
        std::string v93 = (std::__shared_weak_count *)off_1EBBDD0C8;
        qword_1EBBDD0C0 = (uint64_t)v55;
        off_1EBBDD0C8 = v54;
        if (!v93)
        {
          __p[0] = v55;
          __p[1] = v54;
          goto LABEL_238;
        }
        if (!atomic_fetch_add(&v93->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
          std::__shared_weak_count::__release_weak(v93);
        }
      }
      uint64_t v55 = (uint64_t (***)(void *, int64_t))qword_1EBBDD0C0;
      std::string::size_type v54 = off_1EBBDD0C8;
      __p[0] = (void *)qword_1EBBDD0C0;
      __p[1] = off_1EBBDD0C8;
      if (!off_1EBBDD0C8)
      {
LABEL_239:
        pthread_mutex_unlock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
        int v123 = *(char *)(a2 + 23);
        if (v123 >= 0) {
          size_t v124 = *(unsigned __int8 *)(a2 + 23);
        }
        else {
          size_t v124 = *(void *)(a2 + 8);
        }
        unint64_t v125 = v124 + 16;
        memset(__dst, 170, 24);
        if (v124 + 16 > 0x7FFFFFFFFFFFFFF7) {
          std::string::__throw_length_error[abi:ne180100]();
        }
        if (v125 >= 0x17)
        {
          uint64_t v127 = (v125 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v125 | 7) != 0x17) {
            uint64_t v127 = v125 | 7;
          }
          uint64_t v128 = v127 + 1;
          v129 = operator new(v127 + 1);
          *((void *)&__dst[0] + 1) = v124 + 16;
          *(void *)&__dst[1] = v128 | 0x8000000000000000;
          *(void *)&__dst[0] = v129;
          _OWORD *v129 = *(_OWORD *)"AntennaSetting::";
          v126 = v129 + 1;
        }
        else
        {
          v126 = &__dst[1];
          *(void *)&__dst[1] = 0;
          BYTE7(__dst[1]) = v124 + 16;
          __dst[0] = *(_OWORD *)"AntennaSetting::";
          if (!v124) {
            goto LABEL_253;
          }
        }
        if (v123 >= 0) {
          v130 = (const void *)a2;
        }
        else {
          v130 = *(const void **)a2;
        }
        memmove(v126, v130, v124);
LABEL_253:
        *((unsigned char *)v126 + v124) = 0;
        if ((SBYTE7(__dst[1]) & 0x80u) == 0) {
          v131 = (const char *)__dst;
        }
        else {
          v131 = *(const char **)&__dst[0];
        }
        ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&value, v131);
        v132 = (const void *)(**v55)(v55, value);
        if (v132)
        {
          int v133 = ctu::cf::assign();
          CFRelease(v132);
          MEMORY[0x1C8791110](&value);
          if ((SBYTE7(__dst[1]) & 0x80000000) == 0) {
            goto LABEL_258;
          }
        }
        else
        {
          int v133 = 0;
          MEMORY[0x1C8791110](&value);
          if ((SBYTE7(__dst[1]) & 0x80000000) == 0)
          {
LABEL_258:
            v134 = (std::__shared_weak_count *)__p[1];
            if (!__p[1]) {
              goto LABEL_264;
            }
            goto LABEL_262;
          }
        }
        operator delete(*(void **)&__dst[0]);
        v134 = (std::__shared_weak_count *)__p[1];
        if (!__p[1]) {
          goto LABEL_264;
        }
LABEL_262:
        if (!atomic_fetch_add(&v134->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
          std::__shared_weak_count::__release_weak(v134);
        }
LABEL_264:
        if (!v133) {
          goto LABEL_769;
        }
        xpc_object_t v135 = xpc_dictionary_create(0, 0, 0);
        if (v135 || (xpc_object_t v135 = xpc_null_create()) != 0)
        {
          if (MEMORY[0x1C8792D30](v135) == v12)
          {
            xpc_retain(v135);
            xpc_object_t v136 = v135;
          }
          else
          {
            xpc_object_t v136 = xpc_null_create();
          }
        }
        else
        {
          xpc_object_t v136 = xpc_null_create();
          xpc_object_t v135 = 0;
        }
        xpc_release(v135);
        xpc_object_t v169 = xpc_null_create();
        v170 = v396;
        xpc_object_t v396 = v136;
        xpc_release(v170);
        xpc_release(v169);
        xpc_object_t v171 = xpc_string_create((const char *)v33);
        if (!v171) {
          xpc_object_t v171 = xpc_null_create();
        }
        xpc_dictionary_set_value(v396, (const char *)*MEMORY[0x1E4F4C878], v171);
        xpc_object_t v172 = xpc_null_create();
        xpc_release(v171);
        xpc_release(v172);
        xpc_object_t v173 = xpc_dictionary_create(0, 0, 0);
        if (v173 || (xpc_object_t v173 = xpc_null_create()) != 0)
        {
          if (MEMORY[0x1C8792D30](v173) == v12)
          {
            xpc_retain(v173);
            xpc_object_t v81 = v173;
          }
          else
          {
            xpc_object_t v81 = xpc_null_create();
          }
        }
        else
        {
          xpc_object_t v81 = xpc_null_create();
          xpc_object_t v173 = 0;
        }
        xpc_release(v173);
        if (v395 >= 0) {
          v174 = (const char *)&v393;
        }
        else {
          v174 = v393;
        }
        xpc_object_t v175 = xpc_string_create(v174);
        if (!v175) {
          xpc_object_t v175 = xpc_null_create();
        }
        xpc_dictionary_set_value(v81, (const char *)*MEMORY[0x1E4F4D140], v175);
        xpc_object_t v176 = xpc_null_create();
        xpc_release(v175);
        xpc_release(v176);
        if (v81) {
          goto LABEL_476;
        }
        goto LABEL_477;
      }
LABEL_238:
      atomic_fetch_add_explicit(v54 + 1, 1uLL, memory_order_relaxed);
      goto LABEL_239;
    }
LABEL_780:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v34 == -1) {
    goto LABEL_780;
  }
  size_t v36 = *(void *)(a2 + 8);
  if (v36 >= v34) {
    size_t v53 = v34;
  }
  else {
    size_t v53 = *(void *)(a2 + 8);
  }
  if (!memcmp(*(const void **)a2, v33, v53)) {
    goto LABEL_99;
  }
LABEL_103:
  std::string::size_type v56 = (const void *)*MEMORY[0x1E4F4CFA8];
  size_t v57 = strlen((const char *)*MEMORY[0x1E4F4CFA8]);
  size_t v58 = v57;
  if ((v7 & 0x80) == 0)
  {
    size_t v59 = v7;
    if (v57 != -1)
    {
      if (v7 >= v57) {
        size_t v60 = v57;
      }
      else {
        size_t v60 = v7;
      }
      if (memcmp((const void *)a2, v56, v60)) {
        goto LABEL_172;
      }
LABEL_168:
      if (v59 != v58) {
        goto LABEL_172;
      }
      v393 = 0;
      uint64_t v394 = 0;
      uint64_t v395 = 0;
      pthread_mutex_lock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
      if (!qword_1EBBDD0C0)
      {
        unsigned int v87 = (uint64_t (***)(void *, int64_t))operator new(0x18uLL);
        MEMORY[0x1C8791170](v87, @"com.apple.AppleBasebandManager", *MEMORY[0x1E4F1D3F0]);
        std::string::size_type v86 = operator new(0x20uLL);
        *std::string::size_type v86 = &unk_1F20F3BE0;
        v86[1] = 0;
        v86[2] = 0;
        v86[3] = v87;
        v122 = (std::__shared_weak_count *)off_1EBBDD0C8;
        qword_1EBBDD0C0 = (uint64_t)v87;
        off_1EBBDD0C8 = v86;
        if (!v122)
        {
          __p[0] = v87;
          __p[1] = v86;
          goto LABEL_309;
        }
        if (!atomic_fetch_add(&v122->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
          std::__shared_weak_count::__release_weak(v122);
        }
      }
      unsigned int v87 = (uint64_t (***)(void *, int64_t))qword_1EBBDD0C0;
      std::string::size_type v86 = off_1EBBDD0C8;
      __p[0] = (void *)qword_1EBBDD0C0;
      __p[1] = off_1EBBDD0C8;
      if (!off_1EBBDD0C8)
      {
LABEL_310:
        pthread_mutex_unlock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
        int v156 = *(char *)(a2 + 23);
        if (v156 >= 0) {
          size_t v157 = *(unsigned __int8 *)(a2 + 23);
        }
        else {
          size_t v157 = *(void *)(a2 + 8);
        }
        unint64_t v158 = v157 + 16;
        memset(__dst, 170, 24);
        if (v157 + 16 > 0x7FFFFFFFFFFFFFF7) {
          std::string::__throw_length_error[abi:ne180100]();
        }
        if (v158 >= 0x17)
        {
          uint64_t v160 = (v158 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v158 | 7) != 0x17) {
            uint64_t v160 = v158 | 7;
          }
          uint64_t v161 = v160 + 1;
          v162 = operator new(v160 + 1);
          *((void *)&__dst[0] + 1) = v157 + 16;
          *(void *)&__dst[1] = v161 | 0x8000000000000000;
          *(void *)&__dst[0] = v162;
          _OWORD *v162 = *(_OWORD *)"AntennaSetting::";
          v159 = v162 + 1;
        }
        else
        {
          v159 = &__dst[1];
          *(void *)&__dst[1] = 0;
          BYTE7(__dst[1]) = v157 + 16;
          __dst[0] = *(_OWORD *)"AntennaSetting::";
          if (!v157) {
            goto LABEL_324;
          }
        }
        if (v156 >= 0) {
          v163 = (const void *)a2;
        }
        else {
          v163 = *(const void **)a2;
        }
        memmove(v159, v163, v157);
LABEL_324:
        *((unsigned char *)v159 + v157) = 0;
        if ((SBYTE7(__dst[1]) & 0x80u) == 0) {
          v164 = (const char *)__dst;
        }
        else {
          v164 = *(const char **)&__dst[0];
        }
        ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&value, v164);
        v165 = (const void *)(**v87)(v87, value);
        if (v165)
        {
          int v166 = ctu::cf::assign();
          CFRelease(v165);
        }
        else
        {
          int v166 = 0;
        }
        MEMORY[0x1C8791110](&value);
        if (SBYTE7(__dst[1]) < 0) {
          operator delete(*(void **)&__dst[0]);
        }
        if (__p[1] && !atomic_fetch_add((atomic_ullong *volatile)__p[1] + 1, 0xFFFFFFFFFFFFFFFFLL))
        {
          (*(void (**)(void *))(*(void *)__p[1] + 16))(__p[1]);
          std::__shared_weak_count::__release_weak((std::__shared_weak_count *)__p[1]);
        }
        if (!v166) {
          goto LABEL_769;
        }
        xpc_object_t v167 = xpc_dictionary_create(0, 0, 0);
        if (v167 || (xpc_object_t v167 = xpc_null_create()) != 0)
        {
          if (MEMORY[0x1C8792D30](v167) == v12)
          {
            xpc_retain(v167);
            xpc_object_t v168 = v167;
          }
          else
          {
            xpc_object_t v168 = xpc_null_create();
          }
        }
        else
        {
          xpc_object_t v168 = xpc_null_create();
          xpc_object_t v167 = 0;
        }
        xpc_release(v167);
        xpc_object_t v226 = xpc_null_create();
        v227 = v396;
        xpc_object_t v396 = v168;
        xpc_release(v227);
        xpc_release(v226);
        xpc_object_t v228 = xpc_string_create((const char *)v56);
        if (!v228) {
          xpc_object_t v228 = xpc_null_create();
        }
        xpc_dictionary_set_value(v396, (const char *)*MEMORY[0x1E4F4C878], v228);
        xpc_object_t v229 = xpc_null_create();
        xpc_release(v228);
        xpc_release(v229);
        xpc_object_t v230 = xpc_dictionary_create(0, 0, 0);
        if (v230 || (xpc_object_t v230 = xpc_null_create()) != 0)
        {
          if (MEMORY[0x1C8792D30](v230) == v12)
          {
            xpc_retain(v230);
            xpc_object_t v81 = v230;
          }
          else
          {
            xpc_object_t v81 = xpc_null_create();
          }
        }
        else
        {
          xpc_object_t v81 = xpc_null_create();
          xpc_object_t v230 = 0;
        }
        xpc_release(v230);
        if (v395 >= 0) {
          v231 = (const char *)&v393;
        }
        else {
          v231 = v393;
        }
        xpc_object_t v232 = xpc_string_create(v231);
        if (!v232) {
          xpc_object_t v232 = xpc_null_create();
        }
        xpc_dictionary_set_value(v81, (const char *)*MEMORY[0x1E4F4D270], v232);
        xpc_object_t v233 = xpc_null_create();
        xpc_release(v232);
        xpc_release(v233);
        if (v81) {
          goto LABEL_476;
        }
        goto LABEL_477;
      }
LABEL_309:
      atomic_fetch_add_explicit(v86 + 1, 1uLL, memory_order_relaxed);
      goto LABEL_310;
    }
LABEL_782:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v57 == -1) {
    goto LABEL_782;
  }
  size_t v59 = *(void *)(a2 + 8);
  if (v59 >= v57) {
    size_t v85 = v57;
  }
  else {
    size_t v85 = *(void *)(a2 + 8);
  }
  if (!memcmp(*(const void **)a2, v56, v85)) {
    goto LABEL_168;
  }
LABEL_172:
  std::string::size_type v88 = (const char *)*MEMORY[0x1E4F4CFD0];
  size_t v89 = strlen((const char *)*MEMORY[0x1E4F4CFD0]);
  size_t v90 = v89;
  if ((v7 & 0x80) != 0)
  {
    if (v89 == -1) {
      goto LABEL_784;
    }
    std::string v92 = *(const void **)a2;
    size_t v91 = *(void *)(a2 + 8);
  }
  else
  {
    size_t v91 = v7;
    std::string v92 = (const void *)a2;
    if (v90 == -1) {
LABEL_784:
    }
      std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v91 >= v90) {
    size_t v115 = v90;
  }
  else {
    size_t v115 = v91;
  }
  if (!memcmp(v92, v88, v115) && v91 == v90)
  {
    xpc_object_t v116 = xpc_dictionary_create(0, 0, 0);
    if (v116 || (xpc_object_t v116 = xpc_null_create()) != 0)
    {
      if (MEMORY[0x1C8792D30](v116) == v12)
      {
        xpc_retain(v116);
        xpc_object_t v117 = v116;
      }
      else
      {
        xpc_object_t v117 = xpc_null_create();
      }
    }
    else
    {
      xpc_object_t v117 = xpc_null_create();
      xpc_object_t v116 = 0;
    }
    xpc_release(v116);
    xpc_object_t v194 = xpc_null_create();
    v195 = v396;
    xpc_object_t v396 = v117;
    xpc_release(v195);
    xpc_release(v194);
    v393 = 0;
    uint64_t v394 = 0;
    uint64_t v395 = 0;
    xpc_object_t v196 = xpc_string_create(v88);
    if (!v196) {
      xpc_object_t v196 = xpc_null_create();
    }
    xpc_dictionary_set_value(v396, (const char *)*MEMORY[0x1E4F4C878], v196);
    xpc_object_t v197 = xpc_null_create();
    xpc_release(v196);
    xpc_release(v197);
    pthread_mutex_lock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
    v198 = (uint64_t (***)(void *, int64_t))qword_1EBBDD0C0;
    if (!qword_1EBBDD0C0)
    {
      ABMProperties::create_default_global((ABMProperties *)__dst);
      std::shared_ptr<ABMProperties>::operator=[abi:ne180100](__dst);
      std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)__dst);
      v198 = (uint64_t (***)(void *, int64_t))qword_1EBBDD0C0;
    }
    v199 = (std::__shared_weak_count *)off_1EBBDD0C8;
    __p[0] = v198;
    __p[1] = off_1EBBDD0C8;
    if (off_1EBBDD0C8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)off_1EBBDD0C8 + 1, 1uLL, memory_order_relaxed);
    }
    pthread_mutex_unlock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
    v200 = (const void *)*MEMORY[0x1E4F4C308];
    size_t v201 = strlen((const char *)*MEMORY[0x1E4F4C308]);
    unint64_t v202 = v201 + 16;
    memset(__dst, 170, 24);
    if (v201 + 16 > 0x7FFFFFFFFFFFFFF7) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    size_t v203 = v201;
    if (v202 >= 0x17)
    {
      uint64_t v205 = (v202 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v202 | 7) != 0x17) {
        uint64_t v205 = v202 | 7;
      }
      uint64_t v206 = v205 + 1;
      v207 = operator new(v205 + 1);
      *((void *)&__dst[0] + 1) = v202;
      *(void *)&__dst[1] = v206 | 0x8000000000000000;
      *(void *)&__dst[0] = v207;
      _OWORD *v207 = *(_OWORD *)"AntennaSetting::";
      v204 = v207 + 1;
    }
    else
    {
      v204 = &__dst[1];
      *(void *)&__dst[1] = 0;
      BYTE7(__dst[1]) = v201 + 16;
      __dst[0] = *(_OWORD *)"AntennaSetting::";
      if (!v201)
      {
LABEL_413:
        *((unsigned char *)v204 + v203) = 0;
        if ((SBYTE7(__dst[1]) & 0x80u) == 0) {
          v208 = (const char *)__dst;
        }
        else {
          v208 = *(const char **)&__dst[0];
        }
        ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&value, v208);
        v209 = (const void *)(**v198)(v198, value);
        if (v209)
        {
          int v210 = ctu::cf::assign();
          CFRelease(v209);
        }
        else
        {
          int v210 = 0;
        }
        MEMORY[0x1C8791110](&value);
        if (SBYTE7(__dst[1]) < 0) {
          operator delete(*(void **)&__dst[0]);
        }
        if (v199 && !atomic_fetch_add(&v199->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v199->__on_zero_shared)(v199);
          std::__shared_weak_count::__release_weak(v199);
        }
        if (v210)
        {
          if (v395 >= 0) {
            v211 = (const char *)&v393;
          }
          else {
            v211 = v393;
          }
          xpc_object_t v390 = xpc_string_create(v211);
          if (!v390) {
            xpc_object_t v390 = xpc_null_create();
          }
          *(void *)&__dst[0] = &v396;
          *((void *)&__dst[0] + 1) = v200;
          xpc::dict::object_proxy::operator=((uint64_t)__dst, &v390, &v391);
          xpc_release(v391);
          xpc_object_t v391 = 0;
          xpc_release(v390);
          xpc_object_t v390 = 0;
        }
        pthread_mutex_lock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
        v212 = (uint64_t (***)(void *, int64_t))qword_1EBBDD0C0;
        if (!qword_1EBBDD0C0)
        {
          ABMProperties::create_default_global((ABMProperties *)__dst);
          std::shared_ptr<ABMProperties>::operator=[abi:ne180100](__dst);
          std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)__dst);
          v212 = (uint64_t (***)(void *, int64_t))qword_1EBBDD0C0;
        }
        v213 = (std::__shared_weak_count *)off_1EBBDD0C8;
        __p[0] = v212;
        __p[1] = off_1EBBDD0C8;
        if (off_1EBBDD0C8) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)off_1EBBDD0C8 + 1, 1uLL, memory_order_relaxed);
        }
        pthread_mutex_unlock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
        v214 = (const void *)*MEMORY[0x1E4F4C4F0];
        size_t v215 = strlen((const char *)*MEMORY[0x1E4F4C4F0]);
        unint64_t v216 = v215 + 16;
        memset(__dst, 170, 24);
        if (v215 + 16 > 0x7FFFFFFFFFFFFFF7) {
          std::string::__throw_length_error[abi:ne180100]();
        }
        size_t v217 = v215;
        if (v216 >= 0x17)
        {
          uint64_t v219 = (v216 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v216 | 7) != 0x17) {
            uint64_t v219 = v216 | 7;
          }
          uint64_t v220 = v219 + 1;
          v221 = operator new(v219 + 1);
          *((void *)&__dst[0] + 1) = v216;
          *(void *)&__dst[1] = v220 | 0x8000000000000000;
          *(void *)&__dst[0] = v221;
          _OWORD *v221 = *(_OWORD *)"AntennaSetting::";
          v218 = v221 + 1;
        }
        else
        {
          v218 = &__dst[1];
          *(void *)&__dst[1] = 0;
          BYTE7(__dst[1]) = v215 + 16;
          __dst[0] = *(_OWORD *)"AntennaSetting::";
          if (!v215) {
            goto LABEL_443;
          }
        }
        memmove(v218, v214, v217);
LABEL_443:
        *((unsigned char *)v218 + v217) = 0;
        if ((SBYTE7(__dst[1]) & 0x80u) == 0) {
          v222 = (const char *)__dst;
        }
        else {
          v222 = *(const char **)&__dst[0];
        }
        ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&value, v222);
        v223 = (const void *)(**v212)(v212, value);
        if (v223)
        {
          int v224 = ctu::cf::assign();
          CFRelease(v223);
        }
        else
        {
          int v224 = 0;
        }
        MEMORY[0x1C8791110](&value);
        if (SBYTE7(__dst[1]) < 0) {
          operator delete(*(void **)&__dst[0]);
        }
        if (v213 && !atomic_fetch_add(&v213->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v213->__on_zero_shared)(v213);
          std::__shared_weak_count::__release_weak(v213);
        }
        if (v224)
        {
          if (v395 >= 0) {
            v225 = (const char *)&v393;
          }
          else {
            v225 = v393;
          }
          xpc_object_t v388 = xpc_string_create(v225);
          if (!v388) {
            xpc_object_t v388 = xpc_null_create();
          }
          *(void *)&__dst[0] = &v396;
          *((void *)&__dst[0] + 1) = v214;
          xpc::dict::object_proxy::operator=((uint64_t)__dst, &v388, &v389);
          xpc_release(v389);
          xpc_object_t v389 = 0;
          xpc_release(v388);
          xpc_object_t v388 = 0;
        }
        goto LABEL_769;
      }
    }
    memmove(v204, v200, v203);
    goto LABEL_413;
  }
  size_t v118 = strlen((const char *)*MEMORY[0x1E4F4C808]);
  size_t v119 = v118;
  if ((v7 & 0x80) != 0)
  {
    if (v118 == -1) {
      goto LABEL_786;
    }
    v121 = *(const void **)a2;
    size_t v120 = *(void *)(a2 + 8);
  }
  else
  {
    size_t v120 = v7;
    v121 = (const void *)a2;
    if (v119 == -1) {
LABEL_786:
    }
      std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v120 >= v119) {
    size_t v145 = v119;
  }
  else {
    size_t v145 = v120;
  }
  if (!memcmp(v121, (const void *)*MEMORY[0x1E4F4C808], v145) && v120 == v119)
  {
    v393 = 0;
    uint64_t v394 = 0;
    uint64_t v395 = 0;
    pthread_mutex_lock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
    v146 = (uint64_t (***)(void *, int64_t))qword_1EBBDD0C0;
    if (!qword_1EBBDD0C0)
    {
      ABMProperties::create_default_global((ABMProperties *)__dst);
      std::shared_ptr<ABMProperties>::operator=[abi:ne180100](__dst);
      std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)__dst);
      v146 = (uint64_t (***)(void *, int64_t))qword_1EBBDD0C0;
    }
    v147 = (std::__shared_weak_count *)off_1EBBDD0C8;
    __p[0] = v146;
    __p[1] = off_1EBBDD0C8;
    if (off_1EBBDD0C8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)off_1EBBDD0C8 + 1, 1uLL, memory_order_relaxed);
    }
    pthread_mutex_unlock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
    int v148 = *(char *)(a2 + 23);
    if (v148 >= 0) {
      size_t v149 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      size_t v149 = *(void *)(a2 + 8);
    }
    unint64_t v150 = v149 + 16;
    memset(__dst, 170, 24);
    if (v149 + 16 > 0x7FFFFFFFFFFFFFF7) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    if (v150 >= 0x17)
    {
      uint64_t v177 = (v150 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v150 | 7) != 0x17) {
        uint64_t v177 = v150 | 7;
      }
      uint64_t v178 = v177 + 1;
      v179 = operator new(v177 + 1);
      *((void *)&__dst[0] + 1) = v149 + 16;
      *(void *)&__dst[1] = v178 | 0x8000000000000000;
      *(void *)&__dst[0] = v179;
      _OWORD *v179 = *(_OWORD *)"AntennaSetting::";
      v151 = v179 + 1;
    }
    else
    {
      v151 = &__dst[1];
      *(void *)&__dst[1] = 0;
      BYTE7(__dst[1]) = v149 + 16;
      __dst[0] = *(_OWORD *)"AntennaSetting::";
      if (!v149) {
        goto LABEL_365;
      }
    }
    if (v148 >= 0) {
      v180 = (const void *)a2;
    }
    else {
      v180 = *(const void **)a2;
    }
    memmove(v151, v180, v149);
LABEL_365:
    *((unsigned char *)v151 + v149) = 0;
    if ((SBYTE7(__dst[1]) & 0x80u) == 0) {
      v181 = (const char *)__dst;
    }
    else {
      v181 = *(const char **)&__dst[0];
    }
    ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&value, v181);
    v182 = (const void *)(**v146)(v146, value);
    if (v182)
    {
      int v183 = ctu::cf::assign();
      CFRelease(v182);
    }
    else
    {
      int v183 = 0;
    }
    MEMORY[0x1C8791110](&value);
    if (SBYTE7(__dst[1]) < 0) {
      operator delete(*(void **)&__dst[0]);
    }
    if (v147 && !atomic_fetch_add(&v147->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v147->__on_zero_shared)(v147);
      std::__shared_weak_count::__release_weak(v147);
    }
    if (!v183) {
      goto LABEL_769;
    }
    xpc_object_t v192 = xpc_dictionary_create(0, 0, 0);
    xpc_object_t v193 = v192;
    if (v192)
    {
      *(void *)&__dst[0] = v192;
    }
    else
    {
      xpc_object_t v193 = xpc_null_create();
      *(void *)&__dst[0] = v193;
      if (!v193)
      {
        xpc_object_t v245 = xpc_null_create();
        xpc_object_t v193 = 0;
        goto LABEL_526;
      }
    }
    if (MEMORY[0x1C8792D30](v193) == v12)
    {
      xpc_retain(v193);
LABEL_527:
      xpc_release(v193);
      xpc::dict::operator=(&v396, (xpc_object_t *)__dst);
      xpc_release(*(xpc_object_t *)&__dst[0]);
      if (*(char *)(a2 + 23) >= 0) {
        v251 = (const char *)a2;
      }
      else {
        v251 = *(const char **)a2;
      }
      xpc_object_t v386 = xpc_string_create(v251);
      if (!v386) {
        xpc_object_t v386 = xpc_null_create();
      }
      uint64_t v252 = *MEMORY[0x1E4F4C878];
      *(void *)&__dst[0] = &v396;
      *((void *)&__dst[0] + 1) = v252;
      xpc::dict::object_proxy::operator=((uint64_t)__dst, &v386, &v387);
      xpc_release(v387);
      xpc_object_t v387 = 0;
      xpc_release(v386);
      xpc_object_t v386 = 0;
      if (v395 >= 0) {
        v253 = (const char *)&v393;
      }
      else {
        v253 = v393;
      }
      xpc_object_t v384 = xpc_string_create(v253);
      if (!v384) {
        xpc_object_t v384 = xpc_null_create();
      }
      uint64_t v254 = *MEMORY[0x1E4F4C628];
      *(void *)&__dst[0] = &v396;
      *((void *)&__dst[0] + 1) = v254;
      xpc::dict::object_proxy::operator=((uint64_t)__dst, &v384, &v385);
      xpc_release(v385);
      xpc_object_t v385 = 0;
      xpc_release(v384);
      xpc_object_t v384 = 0;
      goto LABEL_769;
    }
    xpc_object_t v245 = xpc_null_create();
LABEL_526:
    *(void *)&__dst[0] = v245;
    goto LABEL_527;
  }
  size_t v152 = strlen((const char *)*MEMORY[0x1E4F4CFA0]);
  size_t v153 = v152;
  if ((v7 & 0x80) != 0)
  {
    if (v152 == -1) {
      goto LABEL_789;
    }
    v155 = *(const void **)a2;
    size_t v154 = *(void *)(a2 + 8);
  }
  else
  {
    size_t v154 = v7;
    v155 = (const void *)a2;
    if (v153 == -1) {
LABEL_789:
    }
      std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v154 >= v153) {
    size_t v184 = v153;
  }
  else {
    size_t v184 = v154;
  }
  if (!memcmp(v155, (const void *)*MEMORY[0x1E4F4CFA0], v184) && v154 == v153)
  {
    v393 = 0;
    uint64_t v394 = 0;
    uint64_t v395 = 0;
    pthread_mutex_lock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
    v185 = (void *)qword_1EBBDD0C0;
    if (!qword_1EBBDD0C0)
    {
      ABMProperties::create_default_global((ABMProperties *)__dst);
      std::shared_ptr<ABMProperties>::operator=[abi:ne180100](__dst);
      std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)__dst);
      v185 = (void *)qword_1EBBDD0C0;
    }
    __p[0] = v185;
    __p[1] = off_1EBBDD0C8;
    if (off_1EBBDD0C8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)off_1EBBDD0C8 + 1, 1uLL, memory_order_relaxed);
    }
    pthread_mutex_unlock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__dst, (const void **)"AntennaSetting::", (const void **)a2);
    int v186 = Preferences::getPreference<std::string>((uint64_t (***)(void, uint64_t))__p[0], (const char *)__dst);
    if (SBYTE7(__dst[1]) < 0) {
      operator delete(*(void **)&__dst[0]);
    }
    std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)__p);
    if (!v186) {
      goto LABEL_769;
    }
    xpc_object_t v187 = xpc_dictionary_create(0, 0, 0);
    xpc_object_t v188 = v187;
    if (v187)
    {
      *(void *)&__dst[0] = v187;
    }
    else
    {
      xpc_object_t v188 = xpc_null_create();
      *(void *)&__dst[0] = v188;
      if (!v188)
      {
        xpc_object_t v250 = xpc_null_create();
        xpc_object_t v188 = 0;
        goto LABEL_561;
      }
    }
    if (MEMORY[0x1C8792D30](v188) == v12)
    {
      xpc_retain(v188);
LABEL_562:
      xpc_release(v188);
      xpc::dict::operator=(&v396, (xpc_object_t *)__dst);
      xpc_release(*(xpc_object_t *)&__dst[0]);
      if (*(char *)(a2 + 23) >= 0) {
        v264 = (const char *)a2;
      }
      else {
        v264 = *(const char **)a2;
      }
      xpc_object_t v382 = xpc_string_create(v264);
      if (!v382) {
        xpc_object_t v382 = xpc_null_create();
      }
      uint64_t v265 = *MEMORY[0x1E4F4C878];
      *(void *)&__dst[0] = &v396;
      *((void *)&__dst[0] + 1) = v265;
      xpc::dict::object_proxy::operator=((uint64_t)__dst, &v382, &v383);
      xpc_release(v383);
      xpc_object_t v383 = 0;
      xpc_release(v382);
      xpc_object_t v382 = 0;
      if (v395 >= 0) {
        v266 = (const char *)&v393;
      }
      else {
        v266 = v393;
      }
      xpc_object_t v380 = xpc_string_create(v266);
      if (!v380) {
        xpc_object_t v380 = xpc_null_create();
      }
      uint64_t v267 = *MEMORY[0x1E4F4C628];
      *(void *)&__dst[0] = &v396;
      *((void *)&__dst[0] + 1) = v267;
      xpc::dict::object_proxy::operator=((uint64_t)__dst, &v380, &v381);
      xpc_release(v381);
      xpc_object_t v381 = 0;
      xpc_release(v380);
      xpc_object_t v380 = 0;
      goto LABEL_769;
    }
    xpc_object_t v250 = xpc_null_create();
LABEL_561:
    *(void *)&__dst[0] = v250;
    goto LABEL_562;
  }
  size_t v189 = strlen((const char *)*MEMORY[0x1E4F4CF90]);
  size_t v190 = v189;
  if ((v7 & 0x80) != 0)
  {
    if (v189 == -1) {
      goto LABEL_791;
    }
    v191 = *(const void **)a2;
    size_t v7 = *(void *)(a2 + 8);
  }
  else
  {
    v191 = (const void *)a2;
    if (v190 == -1) {
LABEL_791:
    }
      std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v7 >= v190) {
    size_t v236 = v190;
  }
  else {
    size_t v236 = v7;
  }
  if (!memcmp(v191, (const void *)*MEMORY[0x1E4F4CF90], v236) && v7 == v190)
  {
    v393 = 0;
    uint64_t v394 = 0;
    uint64_t v395 = 0;
    pthread_mutex_lock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
    v237 = (void *)qword_1EBBDD0C0;
    if (!qword_1EBBDD0C0)
    {
      ABMProperties::create_default_global((ABMProperties *)__dst);
      std::shared_ptr<ABMProperties>::operator=[abi:ne180100](__dst);
      std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)__dst);
      v237 = (void *)qword_1EBBDD0C0;
    }
    __p[0] = v237;
    __p[1] = off_1EBBDD0C8;
    if (off_1EBBDD0C8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)off_1EBBDD0C8 + 1, 1uLL, memory_order_relaxed);
    }
    pthread_mutex_unlock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__dst, (const void **)"AntennaSetting::", (const void **)a2);
    int v238 = Preferences::getPreference<std::string>((uint64_t (***)(void, uint64_t))__p[0], (const char *)__dst);
    if (SBYTE7(__dst[1]) < 0) {
      operator delete(*(void **)&__dst[0]);
    }
    std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)__p);
    if (!v238) {
      goto LABEL_769;
    }
    xpc_object_t v239 = xpc_dictionary_create(0, 0, 0);
    xpc_object_t v240 = v239;
    if (v239)
    {
      *(void *)&__dst[0] = v239;
    }
    else
    {
      xpc_object_t v240 = xpc_null_create();
      *(void *)&__dst[0] = v240;
      if (!v240)
      {
        xpc_object_t v259 = xpc_null_create();
        xpc_object_t v240 = 0;
        goto LABEL_577;
      }
    }
    if (MEMORY[0x1C8792D30](v240) == v12)
    {
      xpc_retain(v240);
LABEL_578:
      xpc_release(v240);
      xpc::dict::operator=(&v396, (xpc_object_t *)__dst);
      xpc_release(*(xpc_object_t *)&__dst[0]);
      if (*(char *)(a2 + 23) >= 0) {
        v269 = (const char *)a2;
      }
      else {
        v269 = *(const char **)a2;
      }
      xpc_object_t v378 = xpc_string_create(v269);
      if (!v378) {
        xpc_object_t v378 = xpc_null_create();
      }
      uint64_t v270 = *MEMORY[0x1E4F4C878];
      *(void *)&__dst[0] = &v396;
      *((void *)&__dst[0] + 1) = v270;
      xpc::dict::object_proxy::operator=((uint64_t)__dst, &v378, &v379);
      xpc_release(v379);
      xpc_object_t v379 = 0;
      xpc_release(v378);
      xpc_object_t v378 = 0;
      if (v395 >= 0) {
        v271 = (const char *)&v393;
      }
      else {
        v271 = v393;
      }
      xpc_object_t v376 = xpc_string_create(v271);
      if (!v376) {
        xpc_object_t v376 = xpc_null_create();
      }
      uint64_t v272 = *MEMORY[0x1E4F4C628];
      *(void *)&__dst[0] = &v396;
      *((void *)&__dst[0] + 1) = v272;
      xpc::dict::object_proxy::operator=((uint64_t)__dst, &v376, &object);
      xpc_release(object);
      xpc_object_t object = 0;
      xpc_release(v376);
      xpc_object_t v376 = 0;
      goto LABEL_769;
    }
    xpc_object_t v259 = xpc_null_create();
LABEL_577:
    *(void *)&__dst[0] = v259;
    goto LABEL_578;
  }
  if (!std::string::compare((const std::string *)a2, (const std::string::value_type *)*MEMORY[0x1E4F4C810]))
  {
    v393 = 0;
    uint64_t v394 = 0;
    uint64_t v395 = 0;
    pthread_mutex_lock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
    v246 = (void *)qword_1EBBDD0C0;
    if (!qword_1EBBDD0C0)
    {
      ABMProperties::create_default_global((ABMProperties *)__dst);
      std::shared_ptr<ABMProperties>::operator=[abi:ne180100](__dst);
      std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)__dst);
      v246 = (void *)qword_1EBBDD0C0;
    }
    __p[0] = v246;
    __p[1] = off_1EBBDD0C8;
    if (off_1EBBDD0C8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)off_1EBBDD0C8 + 1, 1uLL, memory_order_relaxed);
    }
    pthread_mutex_unlock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__dst, (const void **)"AntennaSetting::", (const void **)a2);
    int v247 = Preferences::getPreference<std::string>((uint64_t (***)(void, uint64_t))__p[0], (const char *)__dst);
    if (SBYTE7(__dst[1]) < 0) {
      operator delete(*(void **)&__dst[0]);
    }
    std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)__p);
    if (!v247) {
      goto LABEL_769;
    }
    xpc_object_t v248 = xpc_dictionary_create(0, 0, 0);
    xpc_object_t v249 = v248;
    if (v248)
    {
      *(void *)&__dst[0] = v248;
    }
    else
    {
      xpc_object_t v249 = xpc_null_create();
      *(void *)&__dst[0] = v249;
      if (!v249)
      {
        xpc_object_t v268 = xpc_null_create();
        xpc_object_t v249 = 0;
        goto LABEL_598;
      }
    }
    if (MEMORY[0x1C8792D30](v249) == v12)
    {
      xpc_retain(v249);
LABEL_599:
      xpc_release(v249);
      xpc::dict::operator=(&v396, (xpc_object_t *)__dst);
      xpc_release(*(xpc_object_t *)&__dst[0]);
      if (*(char *)(a2 + 23) >= 0) {
        v275 = (const char *)a2;
      }
      else {
        v275 = *(const char **)a2;
      }
      xpc_object_t v374 = xpc_string_create(v275);
      if (!v374) {
        xpc_object_t v374 = xpc_null_create();
      }
      uint64_t v276 = *MEMORY[0x1E4F4C878];
      *(void *)&__dst[0] = &v396;
      *((void *)&__dst[0] + 1) = v276;
      xpc::dict::object_proxy::operator=((uint64_t)__dst, &v374, &v375);
      xpc_release(v375);
      xpc_object_t v375 = 0;
      xpc_release(v374);
      xpc_object_t v374 = 0;
      if (v395 >= 0) {
        v277 = (const char *)&v393;
      }
      else {
        v277 = v393;
      }
      xpc_object_t v372 = xpc_string_create(v277);
      if (!v372) {
        xpc_object_t v372 = xpc_null_create();
      }
      uint64_t v278 = *MEMORY[0x1E4F4C628];
      *(void *)&__dst[0] = &v396;
      *((void *)&__dst[0] + 1) = v278;
      xpc::dict::object_proxy::operator=((uint64_t)__dst, &v372, &v373);
      xpc_release(v373);
      xpc_object_t v373 = 0;
      xpc_release(v372);
      xpc_object_t v372 = 0;
      goto LABEL_769;
    }
    xpc_object_t v268 = xpc_null_create();
LABEL_598:
    *(void *)&__dst[0] = v268;
    goto LABEL_599;
  }
  if (!std::string::compare((const std::string *)a2, (const std::string::value_type *)*MEMORY[0x1E4F4D018]))
  {
    v393 = 0;
    uint64_t v394 = 0;
    uint64_t v395 = 0;
    pthread_mutex_lock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
    v255 = (void *)qword_1EBBDD0C0;
    if (!qword_1EBBDD0C0)
    {
      ABMProperties::create_default_global((ABMProperties *)__dst);
      std::shared_ptr<ABMProperties>::operator=[abi:ne180100](__dst);
      std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)__dst);
      v255 = (void *)qword_1EBBDD0C0;
    }
    __p[0] = v255;
    __p[1] = off_1EBBDD0C8;
    if (off_1EBBDD0C8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)off_1EBBDD0C8 + 1, 1uLL, memory_order_relaxed);
    }
    pthread_mutex_unlock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__dst, (const void **)"AntennaSetting::", (const void **)a2);
    int v256 = Preferences::getPreference<std::string>((uint64_t (***)(void, uint64_t))__p[0], (const char *)__dst);
    if (SBYTE7(__dst[1]) < 0) {
      operator delete(*(void **)&__dst[0]);
    }
    std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)__p);
    if (!v256) {
      goto LABEL_769;
    }
    xpc_object_t v257 = xpc_dictionary_create(0, 0, 0);
    xpc_object_t v258 = v257;
    if (v257)
    {
      *(void *)&__dst[0] = v257;
    }
    else
    {
      xpc_object_t v258 = xpc_null_create();
      *(void *)&__dst[0] = v258;
      if (!v258)
      {
        xpc_object_t v273 = xpc_null_create();
        xpc_object_t v258 = 0;
        goto LABEL_615;
      }
    }
    if (MEMORY[0x1C8792D30](v258) == v12)
    {
      xpc_retain(v258);
LABEL_616:
      xpc_release(v258);
      xpc::dict::operator=(&v396, (xpc_object_t *)__dst);
      xpc_release(*(xpc_object_t *)&__dst[0]);
      if (*(char *)(a2 + 23) >= 0) {
        v280 = (const char *)a2;
      }
      else {
        v280 = *(const char **)a2;
      }
      xpc_object_t v370 = xpc_string_create(v280);
      if (!v370) {
        xpc_object_t v370 = xpc_null_create();
      }
      uint64_t v281 = *MEMORY[0x1E4F4C878];
      *(void *)&__dst[0] = &v396;
      *((void *)&__dst[0] + 1) = v281;
      xpc::dict::object_proxy::operator=((uint64_t)__dst, &v370, &v371);
      xpc_release(v371);
      xpc_object_t v371 = 0;
      xpc_release(v370);
      xpc_object_t v370 = 0;
      if (v395 >= 0) {
        v282 = (const char *)&v393;
      }
      else {
        v282 = v393;
      }
      xpc_object_t v368 = xpc_string_create(v282);
      if (!v368) {
        xpc_object_t v368 = xpc_null_create();
      }
      uint64_t v283 = *MEMORY[0x1E4F4C628];
      *(void *)&__dst[0] = &v396;
      *((void *)&__dst[0] + 1) = v283;
      xpc::dict::object_proxy::operator=((uint64_t)__dst, &v368, &v369);
      xpc_release(v369);
      xpc_object_t v369 = 0;
      xpc_release(v368);
      xpc_object_t v368 = 0;
      if (v395 >= 0) {
        v284 = (const char *)&v393;
      }
      else {
        v284 = v393;
      }
      size_t v285 = strlen((const char *)*MEMORY[0x1E4F4CB08]);
      if (!strncasecmp(v284, (const char *)*MEMORY[0x1E4F4CB08], v285))
      {
        LODWORD(value) = 0;
        pthread_mutex_lock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
        v286 = (void *)qword_1EBBDD0C0;
        if (!qword_1EBBDD0C0)
        {
          ABMProperties::create_default_global((ABMProperties *)__dst);
          std::shared_ptr<ABMProperties>::operator=[abi:ne180100](__dst);
          std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)__dst);
          v286 = (void *)qword_1EBBDD0C0;
        }
        __p[0] = v286;
        __p[1] = off_1EBBDD0C8;
        if (off_1EBBDD0C8) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)off_1EBBDD0C8 + 1, 1uLL, memory_order_relaxed);
        }
        pthread_mutex_unlock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
        v287 = (uint64_t (***)(void, uint64_t))__p[0];
        uint64_t v288 = *MEMORY[0x1E4F4D278];
        std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__dst, (const void **)"AntennaSetting::", (char *)*MEMORY[0x1E4F4D278]);
        Preferences::getPreference<unsigned int>(v287, (const char *)__dst, (ctu::cf *)&value);
        if (SBYTE7(__dst[1]) < 0) {
          operator delete(*(void **)&__dst[0]);
        }
        std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)__p);
        xpc_object_t v366 = xpc_int64_create(value);
        if (!v366) {
          xpc_object_t v366 = xpc_null_create();
        }
        *(void *)&__dst[0] = &v396;
        *((void *)&__dst[0] + 1) = v288;
        xpc::dict::object_proxy::operator=((uint64_t)__dst, &v366, &v367);
        xpc_release(v367);
        xpc_object_t v367 = 0;
        xpc_release(v366);
        xpc_object_t v366 = 0;
        pthread_mutex_lock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
        v289 = (void *)qword_1EBBDD0C0;
        if (!qword_1EBBDD0C0)
        {
          ABMProperties::create_default_global((ABMProperties *)__dst);
          std::shared_ptr<ABMProperties>::operator=[abi:ne180100](__dst);
          std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)__dst);
          v289 = (void *)qword_1EBBDD0C0;
        }
        __p[0] = v289;
        __p[1] = off_1EBBDD0C8;
        if (off_1EBBDD0C8) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)off_1EBBDD0C8 + 1, 1uLL, memory_order_relaxed);
        }
        pthread_mutex_unlock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
        v290 = (uint64_t (***)(void, uint64_t))__p[0];
        uint64_t v291 = *MEMORY[0x1E4F4D230];
        std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__dst, (const void **)"AntennaSetting::", (char *)*MEMORY[0x1E4F4D230]);
        Preferences::getPreference<unsigned int>(v290, (const char *)__dst, (ctu::cf *)&value);
        if (SBYTE7(__dst[1]) < 0) {
          operator delete(*(void **)&__dst[0]);
        }
        std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)__p);
        xpc_object_t v364 = xpc_int64_create(value);
        if (!v364) {
          xpc_object_t v364 = xpc_null_create();
        }
        *(void *)&__dst[0] = &v396;
        *((void *)&__dst[0] + 1) = v291;
        xpc::dict::object_proxy::operator=((uint64_t)__dst, &v364, &v365);
        xpc_release(v365);
        xpc_object_t v365 = 0;
        xpc_release(v364);
        xpc_object_t v364 = 0;
        pthread_mutex_lock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
        v292 = (void *)qword_1EBBDD0C0;
        if (!qword_1EBBDD0C0)
        {
          ABMProperties::create_default_global((ABMProperties *)__dst);
          std::shared_ptr<ABMProperties>::operator=[abi:ne180100](__dst);
          std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)__dst);
          v292 = (void *)qword_1EBBDD0C0;
        }
        __p[0] = v292;
        __p[1] = off_1EBBDD0C8;
        if (off_1EBBDD0C8) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)off_1EBBDD0C8 + 1, 1uLL, memory_order_relaxed);
        }
        pthread_mutex_unlock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
        v293 = (uint64_t (***)(void, uint64_t))__p[0];
        uint64_t v294 = *MEMORY[0x1E4F4D080];
        std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__dst, (const void **)"AntennaSetting::", (char *)*MEMORY[0x1E4F4D080]);
        Preferences::getPreference<unsigned int>(v293, (const char *)__dst, (ctu::cf *)&value);
        if (SBYTE7(__dst[1]) < 0) {
          operator delete(*(void **)&__dst[0]);
        }
        std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)__p);
        xpc_object_t v362 = xpc_int64_create(value);
        if (!v362) {
          xpc_object_t v362 = xpc_null_create();
        }
        *(void *)&__dst[0] = &v396;
        *((void *)&__dst[0] + 1) = v294;
        xpc::dict::object_proxy::operator=((uint64_t)__dst, &v362, &v363);
        xpc_release(v363);
        xpc_object_t v363 = 0;
        xpc_release(v362);
        xpc_object_t v362 = 0;
        pthread_mutex_lock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
        v295 = (void *)qword_1EBBDD0C0;
        if (!qword_1EBBDD0C0)
        {
          ABMProperties::create_default_global((ABMProperties *)__dst);
          std::shared_ptr<ABMProperties>::operator=[abi:ne180100](__dst);
          std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)__dst);
          v295 = (void *)qword_1EBBDD0C0;
        }
        __p[0] = v295;
        __p[1] = off_1EBBDD0C8;
        if (off_1EBBDD0C8) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)off_1EBBDD0C8 + 1, 1uLL, memory_order_relaxed);
        }
        pthread_mutex_unlock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
        v296 = (uint64_t (***)(void, uint64_t))__p[0];
        uint64_t v297 = *MEMORY[0x1E4F4D078];
        std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__dst, (const void **)"AntennaSetting::", (char *)*MEMORY[0x1E4F4D078]);
        Preferences::getPreference<unsigned int>(v296, (const char *)__dst, (ctu::cf *)&value);
        if (SBYTE7(__dst[1]) < 0) {
          operator delete(*(void **)&__dst[0]);
        }
        std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)__p);
        xpc_object_t v360 = xpc_int64_create(value);
        if (!v360) {
          xpc_object_t v360 = xpc_null_create();
        }
        *(void *)&__dst[0] = &v396;
        *((void *)&__dst[0] + 1) = v297;
        xpc::dict::object_proxy::operator=((uint64_t)__dst, &v360, &v361);
        xpc_release(v361);
        xpc_object_t v361 = 0;
        xpc_release(v360);
        xpc_object_t v360 = 0;
      }
      goto LABEL_769;
    }
    xpc_object_t v273 = xpc_null_create();
LABEL_615:
    *(void *)&__dst[0] = v273;
    goto LABEL_616;
  }
  if (!std::string::compare((const std::string *)a2, "kSetWorkoutInfo"))
  {
    v393 = 0;
    uint64_t v394 = 0;
    uint64_t v395 = 0;
    pthread_mutex_lock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
    v260 = (void *)qword_1EBBDD0C0;
    if (!qword_1EBBDD0C0)
    {
      ABMProperties::create_default_global((ABMProperties *)__dst);
      std::shared_ptr<ABMProperties>::operator=[abi:ne180100](__dst);
      std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)__dst);
      v260 = (void *)qword_1EBBDD0C0;
    }
    __p[0] = v260;
    __p[1] = off_1EBBDD0C8;
    if (off_1EBBDD0C8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)off_1EBBDD0C8 + 1, 1uLL, memory_order_relaxed);
    }
    pthread_mutex_unlock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__dst, (const void **)"AntennaSetting::", (const void **)a2);
    int v261 = Preferences::getPreference<std::string>((uint64_t (***)(void, uint64_t))__p[0], (const char *)__dst);
    if (SBYTE7(__dst[1]) < 0) {
      operator delete(*(void **)&__dst[0]);
    }
    std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)__p);
    if (!v261) {
      goto LABEL_769;
    }
    xpc_object_t v262 = xpc_dictionary_create(0, 0, 0);
    xpc_object_t v263 = v262;
    if (v262)
    {
      *(void *)&__dst[0] = v262;
    }
    else
    {
      xpc_object_t v263 = xpc_null_create();
      *(void *)&__dst[0] = v263;
      if (!v263)
      {
        xpc_object_t v274 = xpc_null_create();
        xpc_object_t v263 = 0;
        goto LABEL_665;
      }
    }
    if (MEMORY[0x1C8792D30](v263) == v12)
    {
      xpc_retain(v263);
LABEL_666:
      xpc_release(v263);
      xpc::dict::operator=(&v396, (xpc_object_t *)__dst);
      xpc_release(*(xpc_object_t *)&__dst[0]);
      if (*(char *)(a2 + 23) >= 0) {
        v298 = (const char *)a2;
      }
      else {
        v298 = *(const char **)a2;
      }
      xpc_object_t v358 = xpc_string_create(v298);
      if (!v358) {
        xpc_object_t v358 = xpc_null_create();
      }
      uint64_t v299 = *MEMORY[0x1E4F4C878];
      *(void *)&__dst[0] = &v396;
      *((void *)&__dst[0] + 1) = v299;
      xpc::dict::object_proxy::operator=((uint64_t)__dst, &v358, &v359);
      xpc_release(v359);
      xpc_object_t v359 = 0;
      xpc_release(v358);
      xpc_object_t v358 = 0;
      if (v395 >= 0) {
        v300 = (const char *)&v393;
      }
      else {
        v300 = v393;
      }
      xpc_object_t v356 = xpc_string_create(v300);
      if (!v356) {
        xpc_object_t v356 = xpc_null_create();
      }
      uint64_t v301 = *MEMORY[0x1E4F4C628];
      *(void *)&__dst[0] = &v396;
      *((void *)&__dst[0] + 1) = v301;
      xpc::dict::object_proxy::operator=((uint64_t)__dst, &v356, &v357);
      xpc_release(v357);
      xpc_object_t v357 = 0;
      xpc_release(v356);
      xpc_object_t v356 = 0;
      if (v395 >= 0) {
        v302 = (const char *)&v393;
      }
      else {
        v302 = v393;
      }
      if (!strncasecmp(v302, "OVERRIDE", 8uLL))
      {
        LODWORD(value) = 0;
        pthread_mutex_lock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
        v303 = (void *)qword_1EBBDD0C0;
        if (!qword_1EBBDD0C0)
        {
          ABMProperties::create_default_global((ABMProperties *)__dst);
          std::shared_ptr<ABMProperties>::operator=[abi:ne180100](__dst);
          std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)__dst);
          v303 = (void *)qword_1EBBDD0C0;
        }
        __p[0] = v303;
        __p[1] = off_1EBBDD0C8;
        if (off_1EBBDD0C8) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)off_1EBBDD0C8 + 1, 1uLL, memory_order_relaxed);
        }
        pthread_mutex_unlock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
        v304 = (uint64_t (***)(void, uint64_t))__p[0];
        std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__dst, (const void **)"AntennaSetting::", "kKeyWorkoutType");
        Preferences::getPreference<unsigned int>(v304, (const char *)__dst, (ctu::cf *)&value);
        if (SBYTE7(__dst[1]) < 0) {
          operator delete(*(void **)&__dst[0]);
        }
        std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)__p);
        xpc_object_t v354 = xpc_int64_create(value);
        if (!v354) {
          xpc_object_t v354 = xpc_null_create();
        }
        *(void *)&__dst[0] = &v396;
        *((void *)&__dst[0] + 1) = "kKeyWorkoutType";
        xpc::dict::object_proxy::operator=((uint64_t)__dst, &v354, &v355);
        xpc_release(v355);
        xpc_object_t v355 = 0;
        xpc_release(v354);
        xpc_object_t v354 = 0;
        LODWORD(v347) = 0;
        pthread_mutex_lock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
        v305 = (void *)qword_1EBBDD0C0;
        if (!qword_1EBBDD0C0)
        {
          ABMProperties::create_default_global((ABMProperties *)__dst);
          std::shared_ptr<ABMProperties>::operator=[abi:ne180100](__dst);
          std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)__dst);
          v305 = (void *)qword_1EBBDD0C0;
        }
        __p[0] = v305;
        __p[1] = off_1EBBDD0C8;
        if (off_1EBBDD0C8) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)off_1EBBDD0C8 + 1, 1uLL, memory_order_relaxed);
        }
        pthread_mutex_unlock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
        v306 = (uint64_t (***)(void, uint64_t))__p[0];
        std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__dst, (const void **)"AntennaSetting::", "kKeyWorkoutState");
        Preferences::getPreference<unsigned int>(v306, (const char *)__dst, (ctu::cf *)&v347);
        if (SBYTE7(__dst[1]) < 0) {
          operator delete(*(void **)&__dst[0]);
        }
        std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)__p);
        *(void *)&v352[1] = xpc_int64_create(v347);
        if (!*(void *)&v352[1]) {
          *(void *)&v352[1] = xpc_null_create();
        }
        *(void *)&__dst[0] = &v396;
        *((void *)&__dst[0] + 1) = "kKeyWorkoutState";
        xpc::dict::object_proxy::operator=((uint64_t)__dst, (xpc_object_t *)&v352[1], &v353);
        xpc_release(v353);
        xpc_object_t v353 = 0;
        xpc_release(*(xpc_object_t *)&v352[1]);
        memset(v352, 0, sizeof(v352));
        pthread_mutex_lock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
        v307 = (void *)qword_1EBBDD0C0;
        if (!qword_1EBBDD0C0)
        {
          ABMProperties::create_default_global((ABMProperties *)__dst);
          std::shared_ptr<ABMProperties>::operator=[abi:ne180100](__dst);
          std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)__dst);
          v307 = (void *)qword_1EBBDD0C0;
        }
        __p[0] = v307;
        __p[1] = off_1EBBDD0C8;
        if (off_1EBBDD0C8) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)off_1EBBDD0C8 + 1, 1uLL, memory_order_relaxed);
        }
        pthread_mutex_unlock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
        v308 = (uint64_t (***)(void, uint64_t))__p[0];
        std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__dst, (const void **)"AntennaSetting::", "kKeyWorkoutLocation");
        Preferences::getPreference<unsigned int>(v308, (const char *)__dst, (ctu::cf *)v352);
        if (SBYTE7(__dst[1]) < 0) {
          operator delete(*(void **)&__dst[0]);
        }
        std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)__p);
        *(void *)&v350[1] = xpc_int64_create(v352[0]);
        if (!*(void *)&v350[1]) {
          *(void *)&v350[1] = xpc_null_create();
        }
        *(void *)&__dst[0] = &v396;
        *((void *)&__dst[0] + 1) = "kKeyWorkoutLocation";
        xpc::dict::object_proxy::operator=((uint64_t)__dst, (xpc_object_t *)&v350[1], &v351);
        xpc_release(v351);
        xpc_object_t v351 = 0;
        xpc_release(*(xpc_object_t *)&v350[1]);
        memset(v350, 0, sizeof(v350));
        pthread_mutex_lock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
        v309 = (void *)qword_1EBBDD0C0;
        if (!qword_1EBBDD0C0)
        {
          ABMProperties::create_default_global((ABMProperties *)__dst);
          std::shared_ptr<ABMProperties>::operator=[abi:ne180100](__dst);
          std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)__dst);
          v309 = (void *)qword_1EBBDD0C0;
        }
        __p[0] = v309;
        __p[1] = off_1EBBDD0C8;
        if (off_1EBBDD0C8) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)off_1EBBDD0C8 + 1, 1uLL, memory_order_relaxed);
        }
        pthread_mutex_unlock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
        v310 = (uint64_t (***)(void, uint64_t))__p[0];
        std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__dst, (const void **)"AntennaSetting::", "kKeySwimLocation");
        Preferences::getPreference<unsigned int>(v310, (const char *)__dst, (ctu::cf *)v350);
        if (SBYTE7(__dst[1]) < 0) {
          operator delete(*(void **)&__dst[0]);
        }
        std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)__p);
        xpc_object_t v348 = xpc_int64_create(v350[0]);
        if (!v348) {
          xpc_object_t v348 = xpc_null_create();
        }
        *(void *)&__dst[0] = &v396;
        *((void *)&__dst[0] + 1) = "kKeySwimLocation";
        xpc::dict::object_proxy::operator=((uint64_t)__dst, &v348, &v349);
        xpc_release(v349);
        xpc_object_t v349 = 0;
        xpc_release(v348);
        xpc_object_t v348 = 0;
      }
      goto LABEL_769;
    }
    xpc_object_t v274 = xpc_null_create();
LABEL_665:
    *(void *)&__dst[0] = v274;
    goto LABEL_666;
  }
  if (std::string::compare((const std::string *)a2, (const std::string::value_type *)*MEMORY[0x1E4F4C108])) {
    goto LABEL_771;
  }
  v393 = 0;
  uint64_t v394 = 0;
  uint64_t v395 = 0;
  pthread_mutex_lock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
  v241 = (void *)qword_1EBBDD0C0;
  if (!qword_1EBBDD0C0)
  {
    ABMProperties::create_default_global((ABMProperties *)__dst);
    std::shared_ptr<ABMProperties>::operator=[abi:ne180100](__dst);
    std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)__dst);
    v241 = (void *)qword_1EBBDD0C0;
  }
  __p[0] = v241;
  __p[1] = off_1EBBDD0C8;
  if (off_1EBBDD0C8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)off_1EBBDD0C8 + 1, 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__dst, (const void **)"AntennaSetting::", (const void **)a2);
  int v242 = Preferences::getPreference<std::string>((uint64_t (***)(void, uint64_t))__p[0], (const char *)__dst);
  if (SBYTE7(__dst[1]) < 0) {
    operator delete(*(void **)&__dst[0]);
  }
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)__p);
  if (v242)
  {
    xpc_object_t v243 = xpc_dictionary_create(0, 0, 0);
    xpc_object_t v244 = v243;
    if (v243)
    {
      *(void *)&__dst[0] = v243;
    }
    else
    {
      xpc_object_t v244 = xpc_null_create();
      *(void *)&__dst[0] = v244;
      if (!v244)
      {
        xpc_object_t v279 = xpc_null_create();
        xpc_object_t v244 = 0;
        goto LABEL_714;
      }
    }
    if (MEMORY[0x1C8792D30](v244) == v12)
    {
      xpc_retain(v244);
      goto LABEL_715;
    }
    xpc_object_t v279 = xpc_null_create();
LABEL_714:
    *(void *)&__dst[0] = v279;
LABEL_715:
    xpc_release(v244);
    xpc::dict::operator=(&v396, (xpc_object_t *)__dst);
    xpc_release(*(xpc_object_t *)&__dst[0]);
    int64_t v347 = 0xAAAAAAAAAAAAAAAALL;
    xpc_object_t v311 = xpc_dictionary_create(0, 0, 0);
    xpc_object_t v312 = v311;
    if (v311)
    {
      int64_t v347 = (int64_t)v311;
    }
    else
    {
      xpc_object_t v312 = xpc_null_create();
      int64_t v347 = (int64_t)v312;
      if (!v312)
      {
        xpc_object_t v313 = xpc_null_create();
        xpc_object_t v312 = 0;
        goto LABEL_722;
      }
    }
    if (MEMORY[0x1C8792D30](v312) == v12)
    {
      xpc_retain(v312);
      goto LABEL_723;
    }
    xpc_object_t v313 = xpc_null_create();
LABEL_722:
    int64_t v347 = (int64_t)v313;
LABEL_723:
    xpc_release(v312);
    if (*(char *)(a2 + 23) >= 0) {
      v314 = (const char *)a2;
    }
    else {
      v314 = *(const char **)a2;
    }
    xpc_object_t v345 = xpc_string_create(v314);
    if (!v345) {
      xpc_object_t v345 = xpc_null_create();
    }
    uint64_t v315 = *MEMORY[0x1E4F4C878];
    *(void *)&__dst[0] = &v396;
    *((void *)&__dst[0] + 1) = v315;
    xpc::dict::object_proxy::operator=((uint64_t)__dst, &v345, &v346);
    xpc_release(v346);
    xpc_object_t v346 = 0;
    xpc_release(v345);
    xpc_object_t v345 = 0;
    memset(__dst, 170, 24);
    std::string::basic_string[abi:ne180100]<0>(__dst, "");
    v352[0] = 0x7FFF;
    pthread_mutex_lock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
    int64_t v316 = qword_1EBBDD0C0;
    if (!qword_1EBBDD0C0)
    {
      ABMProperties::create_default_global((ABMProperties *)__p);
      std::shared_ptr<ABMProperties>::operator=[abi:ne180100]((long long *)__p);
      std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)__p);
      int64_t v316 = qword_1EBBDD0C0;
    }
    int64_t value = v316;
    v344 = off_1EBBDD0C8;
    if (off_1EBBDD0C8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)off_1EBBDD0C8 + 1, 1uLL, memory_order_relaxed);
    }
    pthread_mutex_unlock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
    v317 = (uint64_t (***)(void, uint64_t))value;
    v318 = (void *)*MEMORY[0x1E4F4CCB0];
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__p, (const void **)"AntennaSetting::", (char *)*MEMORY[0x1E4F4CCB0]);
    Preferences::getPreference<std::string>(v317, (const char *)__p);
    if (v342 < 0) {
      operator delete(__p[0]);
    }
    std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&value);
    if (SBYTE7(__dst[1]) < 0)
    {
      if (*((void *)&__dst[0] + 1))
      {
        v319 = *(const char **)&__dst[0];
        goto LABEL_739;
      }
    }
    else if (BYTE7(__dst[1]))
    {
      v319 = (const char *)__dst;
LABEL_739:
      xpc_object_t v339 = xpc_string_create(v319);
      if (!v339) {
        xpc_object_t v339 = xpc_null_create();
      }
      __p[0] = &v347;
      __p[1] = v318;
      xpc::dict::object_proxy::operator=((uint64_t)__p, &v339, &v340);
      xpc_release(v340);
      xpc_object_t v340 = 0;
      xpc_release(v339);
      xpc_object_t v339 = 0;
    }
    pthread_mutex_lock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
    int64_t v320 = qword_1EBBDD0C0;
    if (!qword_1EBBDD0C0)
    {
      ABMProperties::create_default_global((ABMProperties *)__p);
      std::shared_ptr<ABMProperties>::operator=[abi:ne180100]((long long *)__p);
      std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)__p);
      int64_t v320 = qword_1EBBDD0C0;
    }
    int64_t value = v320;
    v344 = off_1EBBDD0C8;
    if (off_1EBBDD0C8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)off_1EBBDD0C8 + 1, 1uLL, memory_order_relaxed);
    }
    pthread_mutex_unlock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
    v321 = (uint64_t (***)(void, uint64_t))value;
    v322 = (void *)*MEMORY[0x1E4F4C460];
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__p, (const void **)"AntennaSetting::", (char *)*MEMORY[0x1E4F4C460]);
    Preferences::getPreference<unsigned int>(v321, (const char *)__p, (ctu::cf *)v352);
    if (v342 < 0) {
      operator delete(__p[0]);
    }
    std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&value);
    xpc_object_t v337 = xpc_int64_create(v352[0]);
    if (!v337) {
      xpc_object_t v337 = xpc_null_create();
    }
    __p[0] = &v347;
    __p[1] = v322;
    xpc::dict::object_proxy::operator=((uint64_t)__p, &v337, &v338);
    xpc_release(v338);
    xpc_object_t v338 = 0;
    xpc_release(v337);
    xpc_object_t v337 = 0;
    pthread_mutex_lock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
    int64_t v323 = qword_1EBBDD0C0;
    if (!qword_1EBBDD0C0)
    {
      ABMProperties::create_default_global((ABMProperties *)__p);
      std::shared_ptr<ABMProperties>::operator=[abi:ne180100]((long long *)__p);
      std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)__p);
      int64_t v323 = qword_1EBBDD0C0;
    }
    int64_t value = v323;
    v344 = off_1EBBDD0C8;
    if (off_1EBBDD0C8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)off_1EBBDD0C8 + 1, 1uLL, memory_order_relaxed);
    }
    pthread_mutex_unlock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
    v324 = (uint64_t (***)(void, uint64_t))value;
    v325 = (void *)*MEMORY[0x1E4F4C620];
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__p, (const void **)"AntennaSetting::", (char *)*MEMORY[0x1E4F4C620]);
    Preferences::getPreference<unsigned int>(v324, (const char *)__p, (ctu::cf *)v352);
    if (v342 < 0) {
      operator delete(__p[0]);
    }
    std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&value);
    xpc_object_t v335 = xpc_int64_create(v352[0]);
    if (!v335) {
      xpc_object_t v335 = xpc_null_create();
    }
    __p[0] = &v347;
    __p[1] = v325;
    xpc::dict::object_proxy::operator=((uint64_t)__p, &v335, &v336);
    xpc_release(v336);
    xpc_object_t v336 = 0;
    xpc_release(v335);
    xpc_object_t v335 = 0;
    pthread_mutex_lock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
    int64_t v326 = qword_1EBBDD0C0;
    if (!qword_1EBBDD0C0)
    {
      ABMProperties::create_default_global((ABMProperties *)__p);
      std::shared_ptr<ABMProperties>::operator=[abi:ne180100]((long long *)__p);
      std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)__p);
      int64_t v326 = qword_1EBBDD0C0;
    }
    int64_t value = v326;
    v344 = off_1EBBDD0C8;
    if (off_1EBBDD0C8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)off_1EBBDD0C8 + 1, 1uLL, memory_order_relaxed);
    }
    pthread_mutex_unlock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
    v327 = (uint64_t (***)(void, uint64_t))value;
    v328 = (void *)*MEMORY[0x1E4F4C290];
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__p, (const void **)"AntennaSetting::", (char *)*MEMORY[0x1E4F4C290]);
    Preferences::getPreference<unsigned int>(v327, (const char *)__p, (ctu::cf *)v352);
    if (v342 < 0) {
      operator delete(__p[0]);
    }
    std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&value);
    xpc_object_t v333 = xpc_int64_create(v352[0]);
    if (!v333) {
      xpc_object_t v333 = xpc_null_create();
    }
    __p[0] = &v347;
    __p[1] = v328;
    xpc::dict::object_proxy::operator=((uint64_t)__p, &v333, &v334);
    xpc_release(v334);
    xpc_object_t v334 = 0;
    xpc_release(v333);
    xpc_object_t v333 = 0;
    xpc::dict::dict((xpc::dict *)&v331, (void **)&v347);
    v329 = (void *)*MEMORY[0x1E4F4C628];
    __p[0] = &v396;
    __p[1] = v329;
    xpc::dict::object_proxy::operator=((uint64_t)__p, &v331, &v332);
    xpc_release(v332);
    xpc_object_t v332 = 0;
    xpc_release(v331);
    xpc_object_t v331 = 0;
    if (SBYTE7(__dst[1]) < 0) {
      operator delete(*(void **)&__dst[0]);
    }
    xpc_release((xpc_object_t)v347);
  }
LABEL_769:
  if (SHIBYTE(v395) < 0) {
    operator delete(v393);
  }
LABEL_771:
  if (MEMORY[0x1C8792D30](v396) == v12)
  {
    v330 = **(antenna::Service::Internal ***)(a1 + 176);
    if (v330) {
      antenna::Service::Internal::antennaSetProperty(v330, &v396);
    }
  }
  xpc_release(v396);
}

void sub_1C589A83C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,xpc_object_t object)
{
  pthread_mutex_unlock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
  if (*(char *)(v29 - 89) < 0) {
    operator delete(*(void **)(v29 - 112));
  }
  xpc_release(*(xpc_object_t *)(v29 - 88));
  _Unwind_Resume(a1);
}

uint64_t Preferences::getPreference<std::string>(uint64_t (***a1)(void, uint64_t), const char *a2)
{
  if (a2[23] < 0) {
    a2 = *(const char **)a2;
  }
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v6, a2);
  long long v3 = (const void *)(**a1)(a1, v6);
  if (v3)
  {
    uint64_t v4 = ctu::cf::assign();
    CFRelease(v3);
  }
  else
  {
    uint64_t v4 = 0;
  }
  MEMORY[0x1C8791110](&v6);
  return v4;
}

void *std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(void *__dst, const void **a2, const void **a3)
{
  long long v3 = __dst;
  int v4 = *((char *)a2 + 23);
  if (v4 >= 0) {
    size_t v5 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v5 = (size_t)a2[1];
  }
  int v6 = *((char *)a3 + 23);
  if (v6 >= 0) {
    size_t v7 = *((unsigned __int8 *)a3 + 23);
  }
  else {
    size_t v7 = (size_t)a3[1];
  }
  unint64_t v8 = v7 + v5;
  memset(__dst, 170, 24);
  if (v7 + v5 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v8 <= 0x16)
  {
    __dst[1] = 0;
    long long __dst[2] = 0;
    *std::string __dst = 0;
    *((unsigned char *)__dst + 23) = v8;
    if (!v5) {
      goto LABEL_18;
    }
    goto LABEL_14;
  }
  uint64_t v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v8 | 7) != 0x17) {
    uint64_t v11 = v8 | 7;
  }
  uint64_t v12 = v11 + 1;
  std::string __dst = operator new(v11 + 1);
  v3[1] = v8;
  v3[2] = v12 | 0x8000000000000000;
  *long long v3 = __dst;
  long long v3 = __dst;
  if (v5)
  {
LABEL_14:
    if (v4 >= 0) {
      std::string v13 = a2;
    }
    else {
      std::string v13 = *a2;
    }
    std::string __dst = memmove(v3, v13, v5);
  }
LABEL_18:
  size_t v14 = (char *)v3 + v5;
  if (v7)
  {
    if (v6 >= 0) {
      size_t v15 = a3;
    }
    else {
      size_t v15 = *a3;
    }
    std::string __dst = memmove(v14, v15, v7);
  }
  v14[v7] = 0;
  return __dst;
}

void *std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(void *a1, const void **a2, char *__s)
{
  int v6 = *((char *)a2 + 23);
  if (v6 >= 0) {
    size_t v7 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v7 = (size_t)a2[1];
  }
  uint64_t result = (void *)strlen(__s);
  unint64_t v9 = (unint64_t)result + v7;
  memset(a1, 170, 24);
  if ((unint64_t)result + v7 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v10 = (size_t)result;
  if (v9 <= 0x16)
  {
    a1[1] = 0;
    a1[2] = 0;
    *a1 = 0;
    *((unsigned char *)a1 + 23) = v9;
    if (!v7) {
      goto LABEL_15;
    }
LABEL_11:
    if (v6 >= 0) {
      std::string v13 = a2;
    }
    else {
      std::string v13 = *a2;
    }
    uint64_t result = memmove(a1, v13, v7);
    goto LABEL_15;
  }
  uint64_t v11 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v9 | 7) != 0x17) {
    uint64_t v11 = v9 | 7;
  }
  uint64_t v12 = v11 + 1;
  uint64_t result = operator new(v11 + 1);
  a1[1] = v9;
  a1[2] = v12 | 0x8000000000000000;
  *a1 = result;
  a1 = result;
  if (v7) {
    goto LABEL_11;
  }
LABEL_15:
  size_t v14 = (char *)a1 + v7;
  if (v10) {
    uint64_t result = memmove(v14, __s, v10);
  }
  v14[v10] = 0;
  return result;
}

void AntennaModule::reportTransmitState(AntennaModule *this, void **a2)
{
  CFTypeRef v21 = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  long long v3 = *a2;
  xpc_object_t object = v3;
  if (v3) {
    xpc_retain(v3);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  xpc::bridge((uint64_t *)&cf, (xpc *)&object, v4);
  CFTypeRef v5 = cf;
  if (!cf || (CFTypeID v6 = CFGetTypeID(cf), v6 != CFDictionaryGetTypeID()))
  {
    CFTypeRef v5 = 0;
    CFTypeRef v21 = 0;
    CFTypeRef v7 = cf;
    if (!cf) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
  CFTypeRef v21 = v5;
  CFRetain(v5);
  CFTypeRef v7 = cf;
  if (cf) {
LABEL_9:
  }
    CFRelease(v7);
LABEL_10:
  xpc_release(object);
  if (v5) {
    unint64_t v8 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
  }
  else {
    unint64_t v8 = 0;
  }
  if (!v8) {
    goto LABEL_29;
  }
  unint64_t v9 = (const void *)*MEMORY[0x1E4F4CDF0];
  size_t v10 = strlen((const char *)*MEMORY[0x1E4F4CDF0]);
  if (v10 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v11 = (void *)v10;
  if (v10 >= 0x17)
  {
    uint64_t v13 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v10 | 7) != 0x17) {
      uint64_t v13 = v10 | 7;
    }
    uint64_t v14 = v13 + 1;
    uint64_t v12 = (void **)operator new(v13 + 1);
    __dst[1] = v11;
    unint64_t v18 = v14 | 0x8000000000000000;
    __dst[0] = v12;
LABEL_22:
    memmove(v12, v9, (size_t)v11);
    *((unsigned char *)v11 + (void)v12) = 0;
    CFTypeRef v5 = v21;
    CFTypeRef v16 = v21;
    if (!v21) {
      goto LABEL_24;
    }
    goto LABEL_23;
  }
  HIBYTE(v18) = v10;
  uint64_t v12 = __dst;
  if (v10) {
    goto LABEL_22;
  }
  LOBYTE(__dst[0]) = 0;
  CFTypeRef v5 = v21;
  CFTypeRef v16 = v21;
  if (v21) {
LABEL_23:
  }
    CFRetain(v5);
LABEL_24:
  aBlock = 0;
  Service::broadcastEvent((uint64_t)this, (uint64_t)__dst, &v16, (const void **)&aBlock);
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v16) {
    CFRelease(v16);
  }
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
LABEL_29:
    if (!v5) {
      return;
    }
    goto LABEL_30;
  }
  operator delete(__dst[0]);
  if (v5) {
LABEL_30:
  }
    CFRelease(v5);
}

void sub_1C589B834(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *aBlock, const void *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, const void *a19)
{
  if (aBlock) {
    _Block_release(aBlock);
  }
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&a10);
  if (a16 < 0) {
    operator delete(__p);
  }
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&a19);
  _Unwind_Resume(a1);
}

void sub_1C589B880(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, xpc_object_t object, char a15)
{
}

void AntennaModule::releasePowerAssertion(AntennaModule *this)
{
  unint64_t v5 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v6 = 0xAAAAAAAAAAAAAAAALL;
  (*(void (**)(unint64_t *__return_ptr))(*(void *)this + 80))(&v5);
  unint64_t v1 = v5;
  if (v5)
  {
    uint64_t v2 = (char *)operator new(0x28uLL);
    strcpy(v2, "com.apple.AppleBasebandManager.Antenna");
    uint64_t v3 = *(void *)(v1 + 104);
    std::string::__init_copy_ctor_external(&v7, v2, 0x26uLL);
    (*(void (**)(uint64_t, std::string *))(*(void *)v3 + 32))(v3, &v7);
    if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v7.__r_.__value_.__l.__data_);
    }
    operator delete(v2);
  }
  int v4 = (std::__shared_weak_count *)v6;
  if (v6)
  {
    if (!atomic_fetch_add((atomic_ullong *volatile)(v6 + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_1C589B9E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  operator delete(v17);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void sub_1C589BA14(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void AntennaModule::createPowerAssertion(AntennaModule *this)
{
  unint64_t v6 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v7 = 0xAAAAAAAAAAAAAAAALL;
  (*(void (**)(unint64_t *__return_ptr))(*(void *)this + 80))(&v6);
  unint64_t v1 = v6;
  if (v6)
  {
    uint64_t v2 = (char *)operator new(0x28uLL);
    strcpy(v2, "com.apple.AppleBasebandManager.Antenna");
    uint64_t v3 = *(void *)(v1 + 104);
    std::string::__init_copy_ctor_external(&v8, v2, 0x26uLL);
    (*(void (**)(dispatch_object_t *__return_ptr, uint64_t, std::string *, void))(*(void *)v3 + 24))(&object, v3, &v8, 0);
    if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v8.__r_.__value_.__l.__data_);
    }
    if (object) {
      dispatch_release(object);
    }
    operator delete(v2);
  }
  int v4 = (std::__shared_weak_count *)v7;
  if (v7)
  {
    if (!atomic_fetch_add((atomic_ullong *volatile)(v7 + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_1C589BB70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  operator delete(v17);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void sub_1C589BBA4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void AntennaModule::processCallback(AntennaModule *this, xpc_object_t *a2)
{
  int v4 = (const char *)*MEMORY[0x1E4F4C7D8];
  if (xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E4F4C7D8]))
  {
    memset(__s1, 170, sizeof(__s1));
    xpc_object_t value = xpc_dictionary_get_value(*a2, v4);
    object[0] = value;
    if (value) {
      xpc_retain(value);
    }
    else {
      object[0] = xpc_null_create();
    }
    xpc::dyn_cast_or_default(__s1, (xpc *)object, (const object *)"", v6);
    xpc_release(object[0]);
    size_t v7 = strlen((const char *)*MEMORY[0x1E4F4C750]);
    unint64_t v8 = v7;
    unsigned __int8 v9 = HIBYTE(__s1[2]);
    if (SHIBYTE(__s1[2]) < 0)
    {
      if (v7 != -1)
      {
        uint64_t v11 = (uint64_t *)__s1[0];
        unint64_t v10 = __s1[1];
LABEL_10:
        if (v10 >= v8) {
          size_t v12 = v8;
        }
        else {
          size_t v12 = v10;
        }
        if (!memcmp(v11, (const void *)*MEMORY[0x1E4F4C750], v12) && v10 == v8)
        {
          AntennaModule::reportTransmitState(this, a2);
          unsigned __int8 v9 = HIBYTE(__s1[2]);
        }
        uint64_t v14 = (const void *)*MEMORY[0x1E4F4C310];
        size_t v15 = strlen((const char *)*MEMORY[0x1E4F4C310]);
        size_t v16 = v15;
        if ((v9 & 0x80) != 0)
        {
          if (v15 != -1)
          {
            uint64_t v17 = __s1[1];
            if (__s1[1] >= v15) {
              size_t v19 = v15;
            }
            else {
              size_t v19 = __s1[1];
            }
            if (memcmp((const void *)__s1[0], v14, v19)) {
              goto LABEL_43;
            }
            goto LABEL_31;
          }
        }
        else if (v15 != -1)
        {
          uint64_t v17 = v9;
          if (v9 >= v15) {
            size_t v18 = v15;
          }
          else {
            size_t v18 = v9;
          }
          if (memcmp(__s1, v14, v18)) {
            goto LABEL_43;
          }
LABEL_31:
          if (v17 != v16)
          {
LABEL_43:
            if ((v9 & 0x80) != 0) {
              operator delete((void *)__s1[0]);
            }
            return;
          }
          size_t v20 = (const void *)*MEMORY[0x1E4F4C738];
          size_t v21 = strlen((const char *)*MEMORY[0x1E4F4C738]);
          if (v21 >= 0x7FFFFFFFFFFFFFF8) {
            std::string::__throw_length_error[abi:ne180100]();
          }
          BOOL v22 = (void *)v21;
          if (v21 >= 0x17)
          {
            uint64_t v24 = (v21 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v21 | 7) != 0x17) {
              uint64_t v24 = v21 | 7;
            }
            uint64_t v25 = v24 + 1;
            size_t v23 = operator new(v24 + 1);
            object[1] = v22;
            unint64_t v31 = v25 | 0x8000000000000000;
            object[0] = v23;
          }
          else
          {
            HIBYTE(v31) = v21;
            size_t v23 = object;
            if (!v21) {
              goto LABEL_40;
            }
          }
          memmove(v23, v20, (size_t)v22);
LABEL_40:
          *((unsigned char *)v22 + (void)v23) = 0;
          uint64_t v26 = *MEMORY[0x1E4F4C338];
          v28[0] = a2;
          v28[1] = v26;
          xpc::dict::object_proxy::operator xpc::dict((uint64_t)v28, &v29);
          uint64_t v27 = 0;
          Service::runCommand((uint64_t)this, (uint64_t)object, &v29, &v27);
          xpc_release(v29);
          xpc_object_t v29 = 0;
          if (SHIBYTE(v31) < 0) {
            operator delete(object[0]);
          }
          unsigned __int8 v9 = HIBYTE(__s1[2]);
          goto LABEL_43;
        }
        std::string::__throw_out_of_range[abi:ne180100]();
      }
    }
    else if (v7 != -1)
    {
      unint64_t v10 = HIBYTE(__s1[2]);
      uint64_t v11 = __s1;
      goto LABEL_10;
    }
    std::string::__throw_out_of_range[abi:ne180100]();
  }
}

void sub_1C589BE50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, xpc_object_t object, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a24 < 0)
  {
    operator delete(a19);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t ctu::Loggable<AntennaModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig(uint64_t a1)
{
  return MEMORY[0x1F417DA50](a1 + 8);
}

size_t ctu::Loggable<AntennaModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = (const char *)(*(uint64_t (**)(void))(*(void *)(a1 - 48) + 16))();
  size_t result = strlen(v3);
  if (result >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v5 = result;
  if (result >= 0x17)
  {
    uint64_t v6 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17) {
      uint64_t v6 = result | 7;
    }
    uint64_t v7 = v6 + 1;
    unint64_t v8 = operator new(v6 + 1);
    a2[1] = v5;
    a2[2] = v7 | 0x8000000000000000;
    *a2 = v8;
    a2 = v8;
  }
  else
  {
    *((unsigned char *)a2 + 23) = result;
    if (!result)
    {
      *(unsigned char *)a2 = 0;
      return result;
    }
  }
  size_t result = (size_t)memmove(a2, v3, v5);
  *((unsigned char *)a2 + v5) = 0;
  return result;
}

uint64_t ctu::Loggable<AntennaModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return MEMORY[0x1F417DD10](a1 + 8);
}

void *ctu::Loggable<AntennaModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_1F20F9F38;
  MEMORY[0x1C8790F40](a1 + 1);
  return a1;
}

void ctu::Loggable<AntennaModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_1F20F9F38;
  MEMORY[0x1C8790F40](a1 + 1);

  operator delete(a1);
}

void **xpc::dict::operator=(void **a1, xpc_object_t object)
{
  if (object)
  {
    xpc_object_t v3 = object;
    xpc_retain(object);
  }
  else
  {
    xpc_object_t v3 = xpc_null_create();
  }
  int v4 = *a1;
  *a1 = v3;
  xpc_release(v4);
  return a1;
}

void ctu::Loggable<AntennaModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(uint64_t a1)
{
  uint64_t v1 = a1 + 56;
  if (*(void *)(a1 + 56))
  {
    if (!*(void *)(a1 + 80) || (uint64_t v2 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(a1 + 80))) == 0) {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    xpc_object_t v3 = v2;
    ctu::LoggerCommonBase::getLogDomain((ctu::LoggerCommonBase *)(v1 - 48));
    ctu::TrackedLogger::registerLoggerToServer();
    if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_1C589C1C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

void sub_1C589C1E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void *std::shared_ptr<AntennaModule>::shared_ptr[abi:ne180100]<AntennaModule,std::shared_ptr<AntennaModule> ctu::SharedSynchronizable<AntennaModule>::make_shared_ptr<AntennaModule>(AntennaModule*)::{lambda(AntennaModule*)#1},void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  int v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  uint64_t p_shared_owners = &v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20F9F78;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)a2;
  a1[1] = v4;
  if (!a2) {
    return a1;
  }
  uint64_t v6 = *(std::__shared_weak_count **)(a2 + 128);
  if (v6)
  {
    if (v6->__shared_owners_ == -1)
    {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      *(void *)(a2 + 120) = a2;
      *(void *)(a2 + 128) = v4;
      std::__shared_weak_count::__release_weak(v6);
      if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
        goto LABEL_8;
      }
    }
    return a1;
  }
  atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  *(void *)(a2 + 120) = a2;
  *(void *)(a2 + 128) = v4;
  if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
LABEL_8:
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void sub_1C589C310(void *a1)
{
  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[17], v1, (dispatch_function_t)std::shared_ptr<AntennaModule> ctu::SharedSynchronizable<AntennaModule>::make_shared_ptr<AntennaModule>(AntennaModule*)::{lambda(AntennaModule*)#1}::operator() const(AntennaModule*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_1C589C338(_Unwind_Exception *a1)
{
}

void std::__shared_ptr_pointer<AntennaModule *,std::shared_ptr<AntennaModule> ctu::SharedSynchronizable<AntennaModule>::make_shared_ptr<AntennaModule>(AntennaModule*)::{lambda(AntennaModule *)#1},std::allocator<AntennaModule>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<AntennaModule *,std::shared_ptr<AntennaModule> ctu::SharedSynchronizable<AntennaModule>::make_shared_ptr<AntennaModule>(AntennaModule*)::{lambda(AntennaModule *)#1},std::allocator<AntennaModule>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<AntennaModule *,std::shared_ptr<AntennaModule> ctu::SharedSynchronizable<AntennaModule>::make_shared_ptr<AntennaModule>(AntennaModule*)::{lambda(AntennaModule *)#1},std::allocator<AntennaModule>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableI13AntennaModuleE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_") {
    return a1 + 24;
  }
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableI13AntennaModuleE15make_shared_ptrIS1_EENSt3__110shared_ptrI"
                                "T_EEPS6_EUlPS1_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableI13AntennaModuleE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableI13AntennaModuleE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24; {
  return 0;
  }
}

uint64_t std::shared_ptr<AntennaModule> ctu::SharedSynchronizable<AntennaModule>::make_shared_ptr<AntennaModule>(AntennaModule*)::{lambda(AntennaModule*)#1}::operator() const(AntennaModule*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void *ctu::SharedLoggable<AntennaModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(void *a1)
{
  *a1 = &unk_1F20F9F38;
  MEMORY[0x1C8790F40](a1 + 1);
  uint64_t v2 = a1[12];
  if (v2) {
    dispatch_release(v2);
  }
  unint64_t v3 = a1[11];
  if (v3) {
    dispatch_release(v3);
  }
  int v4 = (std::__shared_weak_count *)a1[10];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

void ctu::SharedLoggable<AntennaModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(void *a1)
{
  *a1 = &unk_1F20F9F38;
  MEMORY[0x1C8790F40](a1 + 1);
  uint64_t v2 = a1[12];
  if (v2) {
    dispatch_release(v2);
  }
  unint64_t v3 = a1[11];
  if (v3) {
    dispatch_release(v3);
  }
  int v4 = (std::__shared_weak_count *)a1[10];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }

  operator delete(a1);
}

void AntennaModule::init(void)::$_0::operator()(uint64_t a1)
{
  uint64_t v157 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(NSObject **)(a1 + 88);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl(&dword_1C5767000, v2, OS_LOG_TYPE_DEFAULT, "#I Initializing", buf, 2u);
  }
  unint64_t v3 = *(std::__shared_weak_count **)(a1 + 128);
  if (!v3 || (uint64_t v4 = *(void *)(a1 + 120), (v5 = std::__shared_weak_count::lock(v3)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v6 = v5;
  p_shared_weak_owners = &v5->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v6);
  }
  uint64_t v128 = (void *)0xAAAAAAAAAAAAAAAALL;
  dispatch_object_t v129 = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZZN13AntennaModule4initEvENK3__0clEv_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_73_1;
  aBlock[4] = a1;
  void aBlock[5] = v4;
  uint64_t v127 = v6;
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  unint64_t v8 = _Block_copy(aBlock);
  unsigned __int8 v9 = *(NSObject **)(a1 + 136);
  if (v9) {
    dispatch_retain(*(dispatch_object_t *)(a1 + 136));
  }
  uint64_t v128 = v8;
  dispatch_object_t v129 = v9;
  unint64_t v10 = operator new(0x10uLL);
  GetABMLogServer(&v124);
  if (v8)
  {
    v122 = _Block_copy(v8);
    dispatch_object_t v123 = v9;
    if (!v9) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }
  v122 = 0;
  dispatch_object_t v123 = v9;
  if (v9) {
LABEL_11:
  }
    dispatch_retain(v9);
LABEL_12:
  uint64_t v11 = *(NSObject **)(a1 + 144);
  dispatch_object_t object = v11;
  if (v11) {
    dispatch_retain(v11);
  }
  antenna::Service::Service(v10, &v124, (uint64_t)&v122, &object);
  size_t v12 = operator new(0x20uLL);
  void *v12 = &unk_1F20FA038;
  v12[1] = 0;
  v12[2] = 0;
  void v12[3] = v10;
  uint64_t v13 = *(std::__shared_weak_count **)(a1 + 184);
  *(void *)(a1 + 176) = v10;
  *(void *)(a1 + 184) = v12;
  if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  if (object) {
    dispatch_release(object);
  }
  if (v123) {
    dispatch_release(v123);
  }
  if (v122) {
    _Block_release(v122);
  }
  uint64_t v14 = v125;
  if (v125 && !atomic_fetch_add(&v125->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  size_t v15 = (const void *)*MEMORY[0x1E4F4CAF8];
  size_t v16 = strlen((const char *)*MEMORY[0x1E4F4CAF8]);
  if (v16 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v17 = v16;
  if (v16 >= 0x17)
  {
    uint64_t v19 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v16 | 7) != 0x17) {
      uint64_t v19 = v16 | 7;
    }
    uint64_t v20 = v19 + 1;
    size_t v18 = operator new(v19 + 1);
    size_t v131 = v17;
    unint64_t v132 = v20 | 0x8000000000000000;
    *(void *)std::string buf = v18;
    goto LABEL_33;
  }
  HIBYTE(v132) = v16;
  size_t v18 = buf;
  if (v16) {
LABEL_33:
  }
    memmove(v18, v15, v17);
  *((unsigned char *)v18 + v17) = 0;
  size_t v21 = v133;
  BOOL v22 = (const void *)*MEMORY[0x1E4F4C508];
  size_t v23 = strlen((const char *)*MEMORY[0x1E4F4C508]);
  if (v23 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v24 = (void *)v23;
  if (v23 >= 0x17)
  {
    uint64_t v25 = (v23 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v23 | 7) != 0x17) {
      uint64_t v25 = v23 | 7;
    }
    uint64_t v26 = v25 + 1;
    uint64_t v27 = operator new(v25 + 1);
    v133[1] = v24;
    unint64_t v134 = v26 | 0x8000000000000000;
    v133[0] = v27;
    size_t v21 = (void **)v27;
    goto LABEL_41;
  }
  HIBYTE(v134) = v23;
  if (v23) {
LABEL_41:
  }
    memmove(v21, v22, (size_t)v24);
  *((unsigned char *)v24 + (void)v21) = 0;
  std::string::size_type v28 = v135;
  xpc_object_t v29 = (const void *)*MEMORY[0x1E4F4C710];
  size_t v30 = strlen((const char *)*MEMORY[0x1E4F4C710]);
  if (v30 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  unint64_t v31 = (void *)v30;
  if (v30 >= 0x17)
  {
    uint64_t v32 = (v30 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v30 | 7) != 0x17) {
      uint64_t v32 = v30 | 7;
    }
    uint64_t v33 = v32 + 1;
    size_t v34 = operator new(v32 + 1);
    v135[1] = v31;
    unint64_t v136 = v33 | 0x8000000000000000;
    v135[0] = v34;
    std::string::size_type v28 = (void **)v34;
    goto LABEL_49;
  }
  HIBYTE(v136) = v30;
  if (v30) {
LABEL_49:
  }
    memmove(v28, v29, (size_t)v31);
  *((unsigned char *)v31 + (void)v28) = 0;
  size_t v35 = v137;
  size_t v36 = (const void *)*MEMORY[0x1E4F4C868];
  size_t v37 = strlen((const char *)*MEMORY[0x1E4F4C868]);
  if (v37 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  int v38 = (void *)v37;
  if (v37 >= 0x17)
  {
    uint64_t v39 = (v37 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v37 | 7) != 0x17) {
      uint64_t v39 = v37 | 7;
    }
    uint64_t v40 = v39 + 1;
    unint64_t v41 = operator new(v39 + 1);
    v137[1] = v38;
    unint64_t v138 = v40 | 0x8000000000000000;
    v137[0] = v41;
    size_t v35 = (void **)v41;
    goto LABEL_57;
  }
  HIBYTE(v138) = v37;
  if (v37) {
LABEL_57:
  }
    memmove(v35, v36, (size_t)v38);
  *((unsigned char *)v38 + (void)v35) = 0;
  char v42 = v139;
  uint64_t v43 = (const void *)*MEMORY[0x1E4F4CFA8];
  size_t v44 = strlen((const char *)*MEMORY[0x1E4F4CFA8]);
  if (v44 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v45 = (void *)v44;
  if (v44 >= 0x17)
  {
    uint64_t v46 = (v44 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v44 | 7) != 0x17) {
      uint64_t v46 = v44 | 7;
    }
    uint64_t v47 = v46 + 1;
    unint64_t v48 = operator new(v46 + 1);
    v139[1] = v45;
    unint64_t v140 = v47 | 0x8000000000000000;
    v139[0] = v48;
    char v42 = (void **)v48;
    goto LABEL_65;
  }
  HIBYTE(v140) = v44;
  if (v44) {
LABEL_65:
  }
    memmove(v42, v43, (size_t)v45);
  *((unsigned char *)v45 + (void)v42) = 0;
  int v49 = v141;
  std::string::size_type v50 = (const void *)*MEMORY[0x1E4F4CFD0];
  size_t v51 = strlen((const char *)*MEMORY[0x1E4F4CFD0]);
  if (v51 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  xpc_object_t v52 = (void *)v51;
  if (v51 >= 0x17)
  {
    uint64_t v53 = (v51 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v51 | 7) != 0x17) {
      uint64_t v53 = v51 | 7;
    }
    uint64_t v54 = v53 + 1;
    uint64_t v55 = operator new(v53 + 1);
    v141[1] = v52;
    unint64_t v142 = v54 | 0x8000000000000000;
    v141[0] = v55;
    int v49 = (void **)v55;
    goto LABEL_73;
  }
  HIBYTE(v142) = v51;
  if (v51) {
LABEL_73:
  }
    memmove(v49, v50, (size_t)v52);
  *((unsigned char *)v52 + (void)v49) = 0;
  std::string::size_type v56 = v143;
  size_t v57 = (const void *)*MEMORY[0x1E4F4C808];
  size_t v58 = strlen((const char *)*MEMORY[0x1E4F4C808]);
  if (v58 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v59 = (void *)v58;
  if (v58 >= 0x17)
  {
    uint64_t v60 = (v58 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v58 | 7) != 0x17) {
      uint64_t v60 = v58 | 7;
    }
    uint64_t v61 = v60 + 1;
    int v62 = operator new(v60 + 1);
    v143[1] = v59;
    unint64_t v144 = v61 | 0x8000000000000000;
    v143[0] = v62;
    std::string::size_type v56 = (void **)v62;
    goto LABEL_81;
  }
  HIBYTE(v144) = v58;
  if (v58) {
LABEL_81:
  }
    memmove(v56, v57, (size_t)v59);
  *((unsigned char *)v59 + (void)v56) = 0;
  size_t v63 = v145;
  unint64_t v64 = (const void *)*MEMORY[0x1E4F4CFA0];
  size_t v65 = strlen((const char *)*MEMORY[0x1E4F4CFA0]);
  if (v65 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v66 = (void *)v65;
  if (v65 >= 0x17)
  {
    uint64_t v67 = (v65 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v65 | 7) != 0x17) {
      uint64_t v67 = v65 | 7;
    }
    uint64_t v68 = v67 + 1;
    dispatch_object_t v69 = operator new(v67 + 1);
    v145[1] = v66;
    unint64_t v146 = v68 | 0x8000000000000000;
    v145[0] = v69;
    size_t v63 = (void **)v69;
    goto LABEL_89;
  }
  HIBYTE(v146) = v65;
  if (v65) {
LABEL_89:
  }
    memmove(v63, v64, (size_t)v66);
  *((unsigned char *)v66 + (void)v63) = 0;
  int v70 = v147;
  unint64_t v71 = (const void *)*MEMORY[0x1E4F4CF90];
  size_t v72 = strlen((const char *)*MEMORY[0x1E4F4CF90]);
  if (v72 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint32_t v73 = (void *)v72;
  if (v72 >= 0x17)
  {
    uint64_t v74 = (v72 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v72 | 7) != 0x17) {
      uint64_t v74 = v72 | 7;
    }
    uint64_t v75 = v74 + 1;
    xpc_object_t v76 = operator new(v74 + 1);
    v147[1] = v73;
    unint64_t v148 = v75 | 0x8000000000000000;
    v147[0] = v76;
    int v70 = (void **)v76;
    goto LABEL_97;
  }
  HIBYTE(v148) = v72;
  if (v72) {
LABEL_97:
  }
    memmove(v70, v71, (size_t)v73);
  *((unsigned char *)v73 + (void)v70) = 0;
  unsigned int v77 = v149;
  xpc_object_t v78 = (const void *)*MEMORY[0x1E4F4C810];
  size_t v79 = strlen((const char *)*MEMORY[0x1E4F4C810]);
  if (v79 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  xpc_object_t v80 = (void *)v79;
  if (v79 >= 0x17)
  {
    uint64_t v81 = (v79 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v79 | 7) != 0x17) {
      uint64_t v81 = v79 | 7;
    }
    uint64_t v82 = v81 + 1;
    xpc_object_t v83 = operator new(v81 + 1);
    v149[1] = v80;
    unint64_t v150 = v82 | 0x8000000000000000;
    v149[0] = v83;
    unsigned int v77 = (void **)v83;
    goto LABEL_105;
  }
  HIBYTE(v150) = v79;
  if (v79) {
LABEL_105:
  }
    memmove(v77, v78, (size_t)v80);
  *((unsigned char *)v80 + (void)v77) = 0;
  xpc_object_t v84 = v151;
  size_t v85 = (const void *)*MEMORY[0x1E4F4D018];
  size_t v86 = strlen((const char *)*MEMORY[0x1E4F4D018]);
  if (v86 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  unsigned int v87 = (void *)v86;
  if (v86 >= 0x17)
  {
    uint64_t v88 = (v86 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v86 | 7) != 0x17) {
      uint64_t v88 = v86 | 7;
    }
    uint64_t v89 = v88 + 1;
    size_t v90 = operator new(v88 + 1);
    v151[1] = v87;
    unint64_t v152 = v89 | 0x8000000000000000;
    v151[0] = v90;
    xpc_object_t v84 = (void **)v90;
    goto LABEL_113;
  }
  HIBYTE(v152) = v86;
  if (v86) {
LABEL_113:
  }
    memmove(v84, v85, (size_t)v87);
  *((unsigned char *)v87 + (void)v84) = 0;
  char v154 = 15;
  strcpy((char *)v153, "kSetWorkoutInfo");
  size_t v91 = __p;
  std::string v92 = (const void *)*MEMORY[0x1E4F4C108];
  size_t v93 = strlen((const char *)*MEMORY[0x1E4F4C108]);
  if (v93 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  int v94 = (void *)v93;
  if (v93 >= 0x17)
  {
    uint64_t v109 = (v93 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v93 | 7) != 0x17) {
      uint64_t v109 = v93 | 7;
    }
    uint64_t v110 = v109 + 1;
    xpc_object_t v111 = operator new(v109 + 1);
    __p[1] = v94;
    unint64_t v156 = v110 | 0x8000000000000000;
    __p[0] = v111;
    size_t v91 = (void **)v111;
  }
  else
  {
    HIBYTE(v156) = v93;
    if (!v93)
    {
      LOBYTE(__p[0]) = 0;
      unint64_t v96 = (void **)(a1 + 152);
      size_t v95 = *(uint64_t **)(a1 + 152);
      if (v95) {
        goto LABEL_118;
      }
LABEL_145:
      uint64_t v98 = 0;
      goto LABEL_149;
    }
  }
  memmove(v91, v92, (size_t)v94);
  *((unsigned char *)v94 + (void)v91) = 0;
  unint64_t v96 = (void **)(a1 + 152);
  size_t v95 = *(uint64_t **)(a1 + 152);
  if (!v95) {
    goto LABEL_145;
  }
LABEL_118:
  uint64_t v97 = 0;
  uint64_t v98 = 0;
  do
  {
    uint64_t v99 = &buf[v97];
    std::string v100 = (void **)(v95 + 1);
    if (&buf[v97] != (uint8_t *)(v95 + 1))
    {
      signed __int8 v101 = v99[23];
      if (*((char *)v95 + 31) < 0)
      {
        if (v101 >= 0) {
          char v103 = &buf[v97];
        }
        else {
          char v103 = *(uint8_t **)&buf[v97];
        }
        if (v101 >= 0) {
          size_t v104 = v99[23];
        }
        else {
          size_t v104 = *(void *)&buf[v97 + 8];
        }
        std::string::__assign_no_alias<false>(v100, v103, v104);
      }
      else if ((v99[23] & 0x80) != 0)
      {
        std::string::__assign_no_alias<true>(v100, *(void **)&buf[v97], *(void *)&buf[v97 + 8]);
      }
      else
      {
        long long v102 = *(_OWORD *)v99;
        v95[3] = *((void *)v99 + 2);
        *(_OWORD *)std::string v100 = v102;
      }
    }
    unint64_t v96 = (void **)*v96;
    size_t v95 = (uint64_t *)*v95;
    ++v98;
    uint64_t v105 = v97 + 24;
    if (!v95) {
      break;
    }
    BOOL v106 = v97 == 288;
    v97 += 24;
  }
  while (!v106);
  if (v95)
  {
    if (v96)
    {
      xpc_object_t v107 = (void **)*v96;
      if (*v96)
      {
        *unint64_t v96 = 0;
        do
        {
          xpc_object_t v108 = (void **)*v107;
          if (*((char *)v107 + 31) < 0) {
            operator delete(v107[1]);
          }
          operator delete(v107);
          xpc_object_t v107 = v108;
        }
        while (v108);
      }
    }
    goto LABEL_154;
  }
  if (v105 == 312) {
    goto LABEL_154;
  }
LABEL_149:
  v112 = operator new(0x20uLL);
  xpc_object_t v113 = &buf[24 * v98];
  void *v112 = 0;
  xpc_object_t v114 = (std::string *)(v112 + 1);
  if ((char)v113[23] < 0)
  {
    std::string::__init_copy_ctor_external(v114, *(const std::string::value_type **)v113, *((void *)v113 + 1));
  }
  else
  {
    *(_OWORD *)&v114->__r_.__value_.__l.__data_ = *(_OWORD *)v113;
    v112[3] = *((void *)v113 + 2);
  }
  size_t v115 = v112;
  uint64_t v116 = v98 - 12;
  if (v98 != 12)
  {
    xpc_object_t v117 = &v133[3 * v98];
    size_t v118 = v112;
    do
    {
      size_t v115 = operator new(0x20uLL);
      *size_t v115 = 0;
      size_t v120 = (std::string *)(v115 + 1);
      if (*((char *)v117 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v120, (const std::string::value_type *)*v117, (std::string::size_type)v117[1]);
      }
      else
      {
        *(_OWORD *)&v120->__r_.__value_.__l.__data_ = *(_OWORD *)v117;
        v115[3] = v117[2];
      }
      *size_t v118 = v115;
      v117 += 3;
      size_t v118 = v115;
    }
    while (!__CFADD__(v116++, 1));
  }
  *size_t v115 = *v96;
  *unint64_t v96 = v112;
LABEL_154:
  if (SHIBYTE(v156) < 0)
  {
    operator delete(__p[0]);
    if ((v154 & 0x80000000) == 0)
    {
LABEL_156:
      if ((SHIBYTE(v152) & 0x80000000) == 0) {
        goto LABEL_157;
      }
      goto LABEL_176;
    }
  }
  else if ((v154 & 0x80000000) == 0)
  {
    goto LABEL_156;
  }
  operator delete(v153[0]);
  if ((SHIBYTE(v152) & 0x80000000) == 0)
  {
LABEL_157:
    if ((SHIBYTE(v150) & 0x80000000) == 0) {
      goto LABEL_158;
    }
    goto LABEL_177;
  }
LABEL_176:
  operator delete(v151[0]);
  if ((SHIBYTE(v150) & 0x80000000) == 0)
  {
LABEL_158:
    if ((SHIBYTE(v148) & 0x80000000) == 0) {
      goto LABEL_159;
    }
    goto LABEL_178;
  }
LABEL_177:
  operator delete(v149[0]);
  if ((SHIBYTE(v148) & 0x80000000) == 0)
  {
LABEL_159:
    if ((SHIBYTE(v146) & 0x80000000) == 0) {
      goto LABEL_160;
    }
    goto LABEL_179;
  }
LABEL_178:
  operator delete(v147[0]);
  if ((SHIBYTE(v146) & 0x80000000) == 0)
  {
LABEL_160:
    if ((SHIBYTE(v144) & 0x80000000) == 0) {
      goto LABEL_161;
    }
    goto LABEL_180;
  }
LABEL_179:
  operator delete(v145[0]);
  if ((SHIBYTE(v144) & 0x80000000) == 0)
  {
LABEL_161:
    if ((SHIBYTE(v142) & 0x80000000) == 0) {
      goto LABEL_162;
    }
    goto LABEL_181;
  }
LABEL_180:
  operator delete(v143[0]);
  if ((SHIBYTE(v142) & 0x80000000) == 0)
  {
LABEL_162:
    if ((SHIBYTE(v140) & 0x80000000) == 0) {
      goto LABEL_163;
    }
    goto LABEL_182;
  }
LABEL_181:
  operator delete(v141[0]);
  if ((SHIBYTE(v140) & 0x80000000) == 0)
  {
LABEL_163:
    if ((SHIBYTE(v138) & 0x80000000) == 0) {
      goto LABEL_164;
    }
    goto LABEL_183;
  }
LABEL_182:
  operator delete(v139[0]);
  if ((SHIBYTE(v138) & 0x80000000) == 0)
  {
LABEL_164:
    if ((SHIBYTE(v136) & 0x80000000) == 0) {
      goto LABEL_165;
    }
    goto LABEL_184;
  }
LABEL_183:
  operator delete(v137[0]);
  if ((SHIBYTE(v136) & 0x80000000) == 0)
  {
LABEL_165:
    if ((SHIBYTE(v134) & 0x80000000) == 0) {
      goto LABEL_166;
    }
LABEL_185:
    operator delete(v133[0]);
    if ((SHIBYTE(v132) & 0x80000000) == 0) {
      goto LABEL_167;
    }
    goto LABEL_186;
  }
LABEL_184:
  operator delete(v135[0]);
  if (SHIBYTE(v134) < 0) {
    goto LABEL_185;
  }
LABEL_166:
  if ((SHIBYTE(v132) & 0x80000000) == 0) {
    goto LABEL_167;
  }
LABEL_186:
  operator delete(*(void **)buf);
LABEL_167:
  AntennaModule::initializeProperty((AntennaModule *)a1);
  if (v129) {
    dispatch_release(v129);
  }
  if (v128) {
    _Block_release(v128);
  }
  if (v127) {
    std::__shared_weak_count::__release_weak(v127);
  }
  std::__shared_weak_count::__release_weak(v6);
}

void sub_1C589D1C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::__shared_weak_count *a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,void *a53,uint64_t a54,int a55,__int16 a56,char a57,char a58,void *a59,uint64_t a60,int a61,__int16 a62,char a63)
{
  operator delete(v81);
  if (a80 < 0)
  {
    operator delete(__p);
    if ((a78 & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else if ((a78 & 0x80000000) == 0)
  {
LABEL_3:
    if (a76 < 0) {
      goto LABEL_4;
    }
    goto LABEL_17;
  }
  operator delete(a77);
  if (a76 < 0)
  {
LABEL_4:
    operator delete(a75);
    if ((a74 & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
LABEL_17:
  if ((a74 & 0x80000000) == 0)
  {
LABEL_5:
    if (a72 < 0) {
      goto LABEL_6;
    }
    goto LABEL_19;
  }
LABEL_18:
  operator delete(a73);
  if (a72 < 0)
  {
LABEL_6:
    operator delete(a71);
    if ((a70 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_20;
  }
LABEL_19:
  if ((a70 & 0x80000000) == 0)
  {
LABEL_7:
    if (a64 < 0) {
      goto LABEL_8;
    }
    goto LABEL_21;
  }
LABEL_20:
  operator delete(a65);
  if (a64 < 0)
  {
LABEL_8:
    operator delete(a59);
    if ((a58 & 0x80000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_22;
  }
LABEL_21:
  if ((a58 & 0x80000000) == 0)
  {
LABEL_9:
    if (a52 < 0) {
      goto LABEL_10;
    }
    goto LABEL_23;
  }
LABEL_22:
  operator delete(a53);
  if (a52 < 0)
  {
LABEL_10:
    operator delete(a47);
    if ((a46 & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_24;
  }
LABEL_23:
  if ((a46 & 0x80000000) == 0)
  {
LABEL_11:
    if (a40 < 0) {
      goto LABEL_12;
    }
    goto LABEL_25;
  }
LABEL_24:
  operator delete(a41);
  if (a40 < 0)
  {
LABEL_12:
    operator delete(a35);
    if ((a34 & 0x80000000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_26;
  }
LABEL_25:
  if ((a34 & 0x80000000) == 0)
  {
LABEL_13:
    if ((a28 & 0x80000000) == 0)
    {
LABEL_28:
      dispatch::callback<void({block_pointer})(xpc::dict)>::~callback((uint64_t)&a21);
      if (a20) {
        std::__shared_weak_count::__release_weak(a20);
      }
      std::__shared_weak_count::__release_weak(v80);
      _Unwind_Resume(a1);
    }
LABEL_27:
    operator delete(a23);
    goto LABEL_28;
  }
LABEL_26:
  operator delete(a29);
  if ((a28 & 0x80000000) == 0) {
    goto LABEL_28;
  }
  goto LABEL_27;
}

void sub_1C589D1D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::__shared_weak_count *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,void *a53,uint64_t a54,int a55,__int16 a56,char a57,char a58,void *a59,uint64_t a60,int a61,__int16 a62,char a63)
{
  if (a80 < 0)
  {
    operator delete(a79);
    if ((a78 & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else if ((a78 & 0x80000000) == 0)
  {
LABEL_3:
    if (a76 < 0) {
      goto LABEL_4;
    }
    goto LABEL_17;
  }
  operator delete(a77);
  if (a76 < 0)
  {
LABEL_4:
    operator delete(a75);
    if ((a74 & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
LABEL_17:
  if ((a74 & 0x80000000) == 0)
  {
LABEL_5:
    if (a72 < 0) {
      goto LABEL_6;
    }
    goto LABEL_19;
  }
LABEL_18:
  operator delete(a73);
  if (a72 < 0)
  {
LABEL_6:
    operator delete(a71);
    if ((a70 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_20;
  }
LABEL_19:
  if ((a70 & 0x80000000) == 0)
  {
LABEL_7:
    if (a64 < 0) {
      goto LABEL_8;
    }
    goto LABEL_21;
  }
LABEL_20:
  operator delete(a65);
  if (a64 < 0)
  {
LABEL_8:
    operator delete(a59);
    if ((a58 & 0x80000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_22;
  }
LABEL_21:
  if ((a58 & 0x80000000) == 0)
  {
LABEL_9:
    if (a52 < 0) {
      goto LABEL_10;
    }
    goto LABEL_23;
  }
LABEL_22:
  operator delete(a53);
  if (a52 < 0)
  {
LABEL_10:
    operator delete(a47);
    if ((a46 & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_24;
  }
LABEL_23:
  if ((a46 & 0x80000000) == 0)
  {
LABEL_11:
    if (a40 < 0) {
      goto LABEL_12;
    }
    goto LABEL_25;
  }
LABEL_24:
  operator delete(a41);
  if (a40 < 0)
  {
LABEL_12:
    operator delete(a35);
    if ((a34 & 0x80000000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_26;
  }
LABEL_25:
  if ((a34 & 0x80000000) == 0)
  {
LABEL_13:
    if ((a28 & 0x80000000) == 0)
    {
LABEL_28:
      dispatch::callback<void({block_pointer})(xpc::dict)>::~callback((uint64_t)&a21);
      if (a20) {
        std::__shared_weak_count::__release_weak(a20);
      }
      std::__shared_weak_count::__release_weak(v80);
      _Unwind_Resume(a1);
    }
LABEL_27:
    operator delete(a23);
    goto LABEL_28;
  }
LABEL_26:
  operator delete(a29);
  if ((a28 & 0x80000000) == 0) {
    goto LABEL_28;
  }
  goto LABEL_27;
}

void sub_1C589D268(uint64_t a1, int a2)
{
  if (a2) {
    JUMPOUT(0x1C589D270);
  }
  JUMPOUT(0x1C589D414);
}

void sub_1C589D2AC()
{
}

void sub_1C589D424(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  while (1)
  {
    if (*((char *)v23 - 1) < 0) {
      operator delete(*(v23 - 3));
    }
    v23 -= 3;
    if (v23 == (void **)&a23) {
      JUMPOUT(0x1C589D3E8);
    }
  }
}

void ___ZZN13AntennaModule4initEvENK3__0clEv_block_invoke(void *a1, xpc_object_t *a2)
{
  unint64_t v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    size_t v5 = (AntennaModule *)a1[4];
    uint64_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      uint64_t v7 = v6;
      uint64_t v8 = a1[5];
      if (atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        if (!v8) {
          return;
        }
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v7);
        if (!v8) {
          return;
        }
      }
      AntennaModule::processCallback(v5, a2);
    }
  }
}

uint64_t dispatch::callback<void({block_pointer})(xpc::dict)>::~callback(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 8);
  if (v2) {
    dispatch_release(v2);
  }
  if (*(void *)a1) {
    _Block_release(*(const void **)a1);
  }
  return a1;
}

void std::__shared_ptr_pointer<antenna::Service *,std::shared_ptr<antenna::Service>::__shared_ptr_default_delete<antenna::Service,antenna::Service>,std::allocator<antenna::Service>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<antenna::Service *,std::shared_ptr<antenna::Service>::__shared_ptr_default_delete<antenna::Service,antenna::Service>,std::allocator<antenna::Service>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count ***)(a1 + 24);
  if (v1)
  {
    uint64_t v2 = v1[1];
    if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      unint64_t v3 = v1;
    }
    else
    {
      unint64_t v3 = v1;
    }
    operator delete(v3);
  }
}

uint64_t std::__shared_ptr_pointer<antenna::Service *,std::shared_ptr<antenna::Service>::__shared_ptr_default_delete<antenna::Service,antenna::Service>,std::allocator<antenna::Service>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x80000001C59A3317) {
    return a1 + 24;
  }
  if (((v3 & 0x80000001C59A3317 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000001C59A3317)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001C59A3317 & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 24;
  }
  return 0;
}

void ___ZNK3ctu20SharedSynchronizableI13AntennaModuleE20execute_wrapped_syncIZNS1_4initEvE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS5__block_invoke(uint64_t a1)
{
}

void ctu::SharedSynchronizable<AntennaModule>::execute_wrapped(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[1];
  if (!v3 || (v5 = *a1, (uint64_t v6 = std::__shared_weak_count::lock(v3)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v7 = v6;
  uint64_t v8 = a1[2];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 1174405120;
  block[2] = ___ZNK3ctu20SharedSynchronizableI13AntennaModuleE15execute_wrappedEU13block_pointerFvvE_block_invoke;
  block[3] = &unk_1F20FA080;
  void block[5] = v5;
  size_t v12 = v7;
  uint64_t p_shared_owners = &v7->__shared_owners_;
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  block[4] = a2;
  dispatch_async(v8, block);
  unint64_t v10 = v12;
  if (!v12 || atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      return;
    }
LABEL_8:
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    return;
  }
  ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
  std::__shared_weak_count::__release_weak(v10);
  if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_8;
  }
}

uint64_t ___ZNK3ctu20SharedSynchronizableI13AntennaModuleE15execute_wrappedEU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t __copy_helper_block_e8_40c42_ZTSNSt3__110shared_ptrIK13AntennaModuleEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c42_ZTSNSt3__110shared_ptrIK13AntennaModuleEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI13AntennaModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb0_E3__1EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_(uint64_t **a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *a1;
  uint64_t v3 = **a1;
  uint64_t v4 = (xpc::object *)(*a1 + 1);
  uint64_t v5 = 3760250880;
  if (MEMORY[0x1C8792D30](*(void *)v4) == MEMORY[0x1E4F14590])
  {
    uint64_t v6 = *(void ***)(v3 + 176);
    if (v6)
    {
      uint64_t v7 = *(NSObject **)(v3 + 88);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
      {
        xpc::object::to_string((uint64_t *)__p, v4);
        if (v16 >= 0) {
          unint64_t v10 = __p;
        }
        else {
          unint64_t v10 = (void **)__p[0];
        }
        *(_DWORD *)std::string buf = 136315138;
        size_t v18 = v10;
        _os_log_debug_impl(&dword_1C5767000, v7, OS_LOG_TYPE_DEBUG, "#D Received Audio State: %s", buf, 0xCu);
        if (v16 < 0) {
          operator delete(__p[0]);
        }
        uint64_t v6 = *(void ***)(v3 + 176);
        xpc_object_t v8 = *(xpc_object_t *)v4;
        if (*(void *)v4)
        {
LABEL_5:
          xpc_retain(v8);
          unsigned __int8 v9 = *v6;
          if (!*v6) {
            goto LABEL_18;
          }
          goto LABEL_14;
        }
      }
      else
      {
        xpc_object_t v8 = *(xpc_object_t *)v4;
        if (*(void *)v4) {
          goto LABEL_5;
        }
      }
      xpc_object_t v8 = xpc_null_create();
      unsigned __int8 v9 = *v6;
      if (!*v6)
      {
LABEL_18:
        xpc_release(v8);
        uint64_t v5 = 0;
        goto LABEL_19;
      }
LABEL_14:
      __p[0] = v8;
      if (v8)
      {
        xpc_retain(v8);
        xpc_object_t v11 = v8;
      }
      else
      {
        xpc_object_t v11 = xpc_null_create();
        __p[0] = v11;
      }
      antenna::Service::Internal::setAudioState(v9, __p);
      xpc_release(v11);
      goto LABEL_18;
    }
  }
LABEL_19:
  uint64_t v12 = v2[2];
  __p[0] = xpc_null_create();
  (*(void (**)(uint64_t, uint64_t, void **))(v12 + 16))(v12, v5, __p);
  xpc_release(__p[0]);
  uint64_t v13 = (const void *)v2[2];
  if (v13) {
    _Block_release(v13);
  }
  xpc_release(*(xpc_object_t *)v4);
  operator delete(v2);
  uint64_t v14 = (std::__shared_weak_count *)a1[2];
  if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  operator delete(a1);
}

void sub_1C589DADC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI13AntennaModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb1_E3__2EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_(uint64_t **a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = **a1;
  uint64_t v4 = 3760250880;
  if (MEMORY[0x1C8792D30]((*a1)[1]) == MEMORY[0x1E4F14590])
  {
    uint64_t v5 = *(CMOnBodyDelegate ****)(v3 + 176);
    if (v5)
    {
      uint64_t v6 = (ctu *)v2[1];
      unint64_t v10 = v6;
      if (v6)
      {
        xpc_retain(v6);
      }
      else
      {
        uint64_t v6 = (ctu *)xpc_null_create();
        unint64_t v10 = v6;
      }
      antenna::Service::setMotionThresholds(v5, &v10);
      xpc_release(v6);
      uint64_t v4 = 0;
      unint64_t v10 = 0;
    }
  }
  uint64_t v7 = v2[2];
  xpc_object_t object = xpc_null_create();
  (*(void (**)(uint64_t, uint64_t, xpc_object_t *))(v7 + 16))(v7, v4, &object);
  xpc_release(object);
  xpc_object_t v8 = (const void *)v2[2];
  if (v8) {
    _Block_release(v8);
  }
  xpc_release((xpc_object_t)v2[1]);
  operator delete(v2);
  unsigned __int8 v9 = (std::__shared_weak_count *)a1[2];
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  operator delete(a1);
}

void sub_1C589DCDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  uint64_t v13 = v12;
  xpc_release(v13);
  size_t v15 = *(const void **)(v11 + 16);
  if (v15) {
    _Block_release(v15);
  }
  xpc_release(*(xpc_object_t *)(v11 + 8));
  operator delete((void *)v11);
  char v16 = (std::__shared_weak_count *)v10[2];
  if (v16)
  {
    if (!atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  operator delete(v10);
  _Unwind_Resume(a1);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI13AntennaModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb2_E3__3EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_(AntennaModule ***a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = **a1;
  uint64_t v4 = (xpc_object_t *)(*a1 + 1);
  uint64_t v5 = 3760250880;
  if (MEMORY[0x1C8792D30](*v4) == MEMORY[0x1E4F14590])
  {
    uint64_t v6 = (antenna::Service::Internal **)*((void *)v3 + 22);
    if (v6)
    {
      if (*v6) {
        antenna::Service::Internal::antennaSetProperty(*v6, v4);
      }
      AntennaModule::setProperty_sync(v3, v4);
      uint64_t v5 = 0;
    }
  }
  uint64_t v7 = v2[2];
  xpc_object_t object = xpc_null_create();
  (*((void (**)(AntennaModule *, uint64_t, xpc_object_t *))v7 + 2))(v7, v5, &object);
  xpc_release(object);
  xpc_object_t v8 = v2[2];
  if (v8) {
    _Block_release(v8);
  }
  xpc_release(*v4);
  operator delete(v2);
  unsigned __int8 v9 = (std::__shared_weak_count *)a1[2];
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  operator delete(a1);
}

void sub_1C589DECC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  xpc_release(object);
  uint64_t v14 = (const void *)v11[2];
  if (v14) {
    _Block_release(v14);
  }
  xpc_release(*v12);
  operator delete(v11);
  size_t v15 = (std::__shared_weak_count *)v10[2];
  if (v15)
  {
    if (!atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  operator delete(v10);
  _Unwind_Resume(a1);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI13AntennaModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb3_E3__4EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_(uint64_t **a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = **a1;
  unsigned int v11 = -534716416;
  xpc_object_t v4 = xpc_null_create();
  xpc_object_t v10 = v4;
  if (MEMORY[0x1C8792D30](v2[1]) == MEMORY[0x1E4F14590])
  {
    uint64_t v5 = *(NSObject ****)(v3 + 176);
    if (v5)
    {
      antenna::Service::antennaGetProperty(v5, (void **)v2 + 1, &object);
      xpc_object_t v6 = object;
      xpc_object_t object = xpc_null_create();
      xpc_object_t v10 = v6;
      xpc_release(v4);
      xpc_release(object);
      unsigned int v11 = 0;
    }
  }
  dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int &,xpc::dict&>(v2 + 2, &v11, &v10);
  xpc_release(v10);
  uint64_t v7 = (const void *)v2[2];
  if (v7) {
    _Block_release(v7);
  }
  xpc_release((xpc_object_t)v2[1]);
  operator delete(v2);
  xpc_object_t v8 = (std::__shared_weak_count *)a1[2];
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  operator delete(a1);
}

void sub_1C589E0A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  xpc_release(v14);
  char v16 = (const void *)v12[2];
  if (v16) {
    _Block_release(v16);
  }
  xpc_release(*v13);
  operator delete(v12);
  size_t v17 = (std::__shared_weak_count *)v11[2];
  if (v17)
  {
    if (!atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  operator delete(v11);
  _Unwind_Resume(a1);
}

void dispatch::async<void ctu::SharedSynchronizable<AntennaModule>::execute_wrapped<AntennaModule::initialize(dispatch::group_session)::$_0>(AntennaModule::initialize(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<AntennaModule::initialize(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<AntennaModule::initialize(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count ****)a1;
  AntennaModule::finishInitialization_sync(**(std::__shared_weak_count ****)a1);
  operator delete(v2);
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    xpc_object_t v4 = (void *)a1;
  }
  else
  {
    xpc_object_t v4 = (void *)a1;
  }
  operator delete(v4);
}

void sub_1C589E204(_Unwind_Exception *a1)
{
  operator delete(v2);
  xpc_object_t v4 = (std::__shared_weak_count *)v1[2];
  if (v4)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void dispatch::async<void ctu::SharedSynchronizable<AntennaModule>::execute_wrapped<AntennaModule::sleep(dispatch::group_session)::$_0>(AntennaModule::sleep(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<AntennaModule::sleep(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<AntennaModule::sleep(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke(void *a1)
{
  uint64_t v2 = (void *)*a1;
  uint64_t v3 = *(antenna::Service::Internal ***)(*(void *)*a1 + 176);
  if (v3 && *v3) {
    antenna::Service::Internal::enterLowPower(*v3);
  }
  xpc_object_t v4 = v2[1];
  if (v4)
  {
    dispatch_group_leave(v4);
    uint64_t v5 = v2[1];
    if (v5) {
      dispatch_release(v5);
    }
  }
  operator delete(v2);
  xpc_object_t v6 = (std::__shared_weak_count *)a1[2];
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    uint64_t v7 = a1;
  }
  else
  {
    uint64_t v7 = a1;
  }
  operator delete(v7);
}

void dispatch::async<void ctu::SharedSynchronizable<AntennaModule>::execute_wrapped<AntennaModule::wake(dispatch::group_session)::$_0>(AntennaModule::wake(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<AntennaModule::wake(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<AntennaModule::wake(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke(void *a1)
{
  uint64_t v2 = (void *)*a1;
  uint64_t v3 = *(antenna::Service::Internal ***)(*(void *)*a1 + 176);
  if (v3 && *v3) {
    antenna::Service::Internal::exitLowPower(*v3);
  }
  xpc_object_t v4 = v2[1];
  if (v4)
  {
    dispatch_group_leave(v4);
    uint64_t v5 = v2[1];
    if (v5) {
      dispatch_release(v5);
    }
  }
  operator delete(v2);
  xpc_object_t v6 = (std::__shared_weak_count *)a1[2];
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    uint64_t v7 = a1;
  }
  else
  {
    uint64_t v7 = a1;
  }
  operator delete(v7);
}

void dispatch::async<void ctu::SharedSynchronizable<AntennaModule>::execute_wrapped<AntennaModule::initializeProperty(void)::$_0>(AntennaModule::initializeProperty(void)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<AntennaModule::initializeProperty(void)::$_0,dispatch_queue_s *::default_delete<AntennaModule::initializeProperty(void)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  uint64_t v2 = *(uint64_t **)a1;
  uint64_t v3 = (void **)(*(void *)a1 + 8);
  AntennaModule::initializeProperty_sync(**(void **)a1, (uint64_t)v3);
  if (*((char *)v2 + 31) < 0) {
    operator delete(*v3);
  }
  operator delete(v2);
  xpc_object_t v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    uint64_t v5 = (void *)a1;
  }
  else
  {
    uint64_t v5 = (void *)a1;
  }
  operator delete(v5);
}

void sub_1C589E4EC(_Unwind_Exception *a1)
{
  if (v2[31] < 0) {
    operator delete(*v3);
  }
  operator delete(v2);
  uint64_t v5 = (std::__shared_weak_count *)v1[2];
  if (v5)
  {
    if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *ABMProperties::create_default_global(ABMProperties *this)
{
  uint64_t v2 = operator new(0x18uLL);
  MEMORY[0x1C8791170](v2, @"com.apple.AppleBasebandManager", *MEMORY[0x1E4F1D3F0]);
  *(void *)this = v2;
  size_t result = operator new(0x20uLL);
  *size_t result = &unk_1F20F3BE0;
  result[1] = 0;
  result[2] = 0;
  result[3] = v2;
  *((void *)this + 1) = result;
  return result;
}

void std::shared_ptr<ABMProperties>::operator=[abi:ne180100](long long *a1)
{
  long long v1 = *a1;
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  uint64_t v2 = (std::__shared_weak_count *)off_1EBBDD0C8;
  *(_OWORD *)&qword_1EBBDD0C0 = v1;
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
}

uint64_t __cxx_global_var_init_44()
{
  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<ctu::power::assertion>::~PthreadMutexGuardPolicy, &ctu::Singleton<ctu::power::assertion,ctu::power::assertion,ctu::PthreadMutexGuardPolicy<ctu::power::assertion>>::sInstance, &dword_1C5767000);
  }
  return result;
}

uint64_t __cxx_global_var_init_45()
{
  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<ABMProperties>::~PthreadMutexGuardPolicy, &ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance, &dword_1C5767000);
  }
  return result;
}

void *PowerManager::PowerManager(void *a1, uint64_t *a2)
{
  *a1 = &unk_1F20FA0C0;
  uint64_t v3 = a1 + 1;
  xpc_object_t v4 = (std::__shared_weak_count *)a2[1];
  uint64_t v6 = *a2;
  uint64_t v7 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  PowerManager::State::create(&v6, v3);
  if (v7) {
    std::__shared_weak_count::__release_weak(v7);
  }
  PowerManager::State::init((PowerManager::State *)*v3);
  return a1;
}

{
  uint64_t *v3;
  std::__shared_weak_count *v4;
  uint64_t v6;
  std::__shared_weak_count *v7;

  *a1 = &unk_1F20FA0C0;
  uint64_t v3 = a1 + 1;
  xpc_object_t v4 = (std::__shared_weak_count *)a2[1];
  uint64_t v6 = *a2;
  uint64_t v7 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  PowerManager::State::create(&v6, v3);
  if (v7) {
    std::__shared_weak_count::__release_weak(v7);
  }
  PowerManager::State::init((PowerManager::State *)*v3);
  return a1;
}

void sub_1C589E798(_Unwind_Exception *a1)
{
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_1C589E7AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (!a10) {
    _Unwind_Resume(exception_object);
  }
  std::__shared_weak_count::__release_weak(a10);
  _Unwind_Resume(exception_object);
}

void PowerManager::State::create(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  xpc_object_t v4 = operator new(0x120uLL);
  uint64_t v5 = (uint64_t)v4;
  uint64_t v6 = (std::__shared_weak_count *)a1[1];
  uint64_t v7 = *a1;
  xpc_object_t v8 = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  PowerManager::State::State((uint64_t)v4, &v7);
  *a2 = 0xAAAAAAAAAAAAAAAALL;
  a2[1] = 0xAAAAAAAAAAAAAAAALL;
  std::shared_ptr<PowerManager::State>::shared_ptr[abi:ne180100]<PowerManager::State,std::shared_ptr<PowerManager::State> ctu::SharedSynchronizable<PowerManager::State>::make_shared_ptr<PowerManager::State>(PowerManager::State*)::{lambda(PowerManager::State*)#1},void>(a2, v5);
  ctu::Loggable<PowerManager::State,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(*a2);
  if (v8) {
    std::__shared_weak_count::__release_weak(v8);
  }
}

void sub_1C589E860(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v10);
  if (a10) {
    std::__shared_weak_count::__release_weak(a10);
  }
  _Unwind_Resume(a1);
}

void PowerManager::State::init(PowerManager::State *this)
{
  uint64_t v5 = *((void *)this + 9);
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 10);
  xpc_object_t v4 = (char *)this + 72;
  if (!v3 || (uint64_t v6 = std::__shared_weak_count::lock(v3)) == 0) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v7 = v6;
  p_shared_weak_owners = &v6->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v7);
  }
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 1174405120;
  v11[2] = ___ZN12PowerManager5State4initEv_block_invoke;
  v11[3] = &__block_descriptor_tmp_32_2;
  v11[4] = this;
  void v11[5] = v5;
  uint64_t v12 = v7;
  uint64_t v13 = v11;
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableIN12PowerManager5StateEE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS8__block_invoke;
  block[3] = &__block_descriptor_tmp_33;
  block[4] = v4;
  void block[5] = &v13;
  unsigned __int8 v9 = *((void *)this + 11);
  if (!*((void *)this + 12))
  {
    dispatch_sync(v9, block);
    uint64_t v10 = v12;
    if (!v12) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  dispatch_async_and_wait(v9, block);
  uint64_t v10 = v12;
  if (v12) {
LABEL_7:
  }
    std::__shared_weak_count::__release_weak(v10);
LABEL_8:
  std::__shared_weak_count::__release_weak(v7);
}

void sub_1C589EA9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v12 = *(std::__shared_weak_count **)(v10 + 16);
  if (v12)
  {
    if (!atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  _Unwind_Resume(exception_object);
}

void PowerManager::create(uint64_t *a1@<X0>, void *a2@<X8>)
{
  xpc_object_t v4 = operator new(0x18uLL);
  uint64_t v5 = v4;
  uint64_t v6 = *a1;
  uint64_t v7 = (std::__shared_weak_count *)a1[1];
  v9[0] = v6;
  v9[1] = (uint64_t)v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  PowerManager::PowerManager(v4, v9);
  *a2 = v5;
  xpc_object_t v8 = operator new(0x20uLL);
  void *v8 = &unk_1F20FA5B8;
  v8[1] = 0;
  void v8[2] = 0;
  v8[3] = v5;
  a2[1] = v8;
  if (v7)
  {
    std::__shared_weak_count::__release_weak(v7);
  }
}

void sub_1C589EBC0(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 48))(v1);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  _Unwind_Resume(a1);
}

void PowerManager::registerForPowerEvents(uint64_t a1, const void **a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (*a2) {
    uint64_t v3 = _Block_copy(*a2);
  }
  else {
    uint64_t v3 = 0;
  }
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 1174405120;
  v5[2] = ___ZN12PowerManager5State22registerForPowerEventsEN8dispatch5blockIU13block_pointerFv10PowerStateNS1_13group_sessionEEEE_block_invoke;
  v5[3] = &__block_descriptor_tmp_38_2;
  v5[4] = v2;
  if (v3) {
    xpc_object_t v4 = _Block_copy(v3);
  }
  else {
    xpc_object_t v4 = 0;
  }
  aBlock = v4;
  ctu::SharedSynchronizable<PowerManager::State>::execute_wrapped((uint64_t *)(v2 + 72), (uint64_t)v5);
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v3) {
    _Block_release(v3);
  }
}

void PowerManager::createPowerAssertion(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, NSObject **a4@<X8>)
{
  uint64_t v6 = *(void **)(a1 + 8);
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v17, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v17 = *(std::string *)a2;
  }
  uint64_t v7 = dispatch_group_create();
  *a4 = v7;
  size_t v18 = v6;
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__p, v17.__r_.__value_.__l.__data_, v17.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = v17;
  }
  uint64_t v20 = a3;
  dispatch_group_t group = v7;
  if (v7)
  {
    dispatch_retain(v7);
    if (group) {
      dispatch_group_enter(group);
    }
  }
  xpc_object_t v8 = (std::__shared_weak_count *)v6[10];
  if (!v8 || (uint64_t v9 = v6[9], (v10 = std::__shared_weak_count::lock(v8)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  unsigned int v11 = v10;
  uint64_t v12 = operator new(0x30uLL);
  void *v12 = v18;
  uint64_t v13 = (std::string *)(v12 + 1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v13, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v13->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    void v12[3] = *((void *)&__p.__r_.__value_.__l + 2);
  }
  dispatch_group_t v14 = group;
  v12[4] = v20;
  void v12[5] = v14;
  dispatch_group_t group = 0;
  size_t v15 = v6[11];
  atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  char v16 = operator new(0x18uLL);
  *char v16 = v12;
  v16[1] = v9;
  void v16[2] = v11;
  dispatch_async_f(v15, v16, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<PowerManager::State>::execute_wrapped<PowerManager::State::createPowerAssertion(std::string,std::chrono::duration<long long,std::ratio<1l,1000l>>)::{lambda(void)#1}>(PowerManager::State::createPowerAssertion(std::string,std::chrono::duration<long long,std::ratio<1l,1000l>>)::{lambda(void)#1} &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<PowerManager::State::createPowerAssertion(std::string,std::chrono::duration<long long,std::ratio<1l,1000l>>)::{lambda(void)#1},std::default_delete<PowerManager::State::createPowerAssertion(std::string,std::chrono::duration<long long,std::ratio<1l,1000l>>)::{lambda(void)#1}>>)::{lambda(void *)#1}::__invoke);
  if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  if (group)
  {
    dispatch_group_leave(group);
    if (group) {
      dispatch_release(group);
    }
  }
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v17.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
LABEL_24:
    operator delete(v17.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_24;
  }
}

void sub_1C589EEFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (v14)
  {
    dispatch_release(v14);
    if ((a14 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a14 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

void PowerManager::releasePowerAssertion(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)(a1 + 8);
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v11, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    uint64_t v12 = v2;
    if ((SHIBYTE(v11.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_3;
    }
LABEL_5:
    std::string::__init_copy_ctor_external(&__p, v11.__r_.__value_.__l.__data_, v11.__r_.__value_.__l.__size_);
    goto LABEL_6;
  }
  std::string v11 = *(std::string *)a2;
  uint64_t v12 = v2;
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_5;
  }
LABEL_3:
  std::string __p = v11;
LABEL_6:
  uint64_t v3 = (std::__shared_weak_count *)v2[10];
  if (!v3 || (uint64_t v4 = v2[9], (v5 = std::__shared_weak_count::lock(v3)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v6 = v5;
  uint64_t v7 = operator new(0x20uLL);
  *uint64_t v7 = v12;
  xpc_object_t v8 = (std::string *)(v7 + 1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v8, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    void v7[3] = *((void *)&__p.__r_.__value_.__l + 2);
  }
  uint64_t v9 = v2[11];
  atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v10 = operator new(0x18uLL);
  *uint64_t v10 = v7;
  v10[1] = v4;
  v10[2] = v6;
  dispatch_async_f(v9, v10, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<PowerManager::State>::execute_wrapped<PowerManager::State::releasePowerAssertion(std::string)::{lambda(void)#1}>(PowerManager::State::releasePowerAssertion(std::string)::{lambda(void)#1} &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<PowerManager::State::releasePowerAssertion(std::string)::{lambda(void)#1},std::default_delete<PowerManager::State::releasePowerAssertion(std::string)::{lambda(void)#1}>>)::{lambda(void *)#1}::__invoke);
  if (atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_13;
    }
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_13:
      if ((SHIBYTE(v11.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        return;
      }
LABEL_17:
      operator delete(v11.__r_.__value_.__l.__data_);
      return;
    }
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_17;
  }
}

void sub_1C589F0FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void PowerManager::initialize(PowerManager *this)
{
  uint64_t v1 = *((void *)this + 1);
  v2[0] = MEMORY[0x1E4F143A8];
  v2[1] = 0x40000000;
  v2[2] = ___ZN12PowerManager5State10initializeEv_block_invoke;
  v2[3] = &__block_descriptor_tmp_60_1;
  v2[4] = v1;
  ctu::SharedSynchronizable<PowerManager::State>::execute_wrapped((uint64_t *)(v1 + 72), (uint64_t)v2);
}

void PowerManager::shutdown(PowerManager *this)
{
  uint64_t v1 = *((void *)this + 1);
  v2[0] = MEMORY[0x1E4F143A8];
  v2[1] = 0x40000000;
  v2[2] = ___ZN12PowerManager5State8shutdownEv_block_invoke;
  v2[3] = &__block_descriptor_tmp_61_1;
  v2[4] = v1;
  ctu::SharedSynchronizable<PowerManager::State>::execute_wrapped((uint64_t *)(v1 + 72), (uint64_t)v2);
}

void PowerManager::~PowerManager(PowerManager *this)
{
  *(void *)this = &unk_1F20FA0C0;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v1)
  {
    if (!atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void PowerManager::~PowerManager(std::__shared_weak_count **this)
{
  uint64_t v1 = (PowerManager *)this;
  *this = (std::__shared_weak_count *)&unk_1F20FA0C0;
  uint64_t v2 = this[2];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    this = (std::__shared_weak_count **)v1;
  }
  else if (((vars8 ^ (2 * vars8)) & 0x4000000000000000) != 0)
  {
    __break(0xC471u);
  }
  operator delete(this);
}

void ctu::Loggable<PowerManager::State,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(uint64_t a1)
{
  uint64_t v1 = a1 + 56;
  if (*(void *)(a1 + 56))
  {
    if (!*(void *)(a1 + 80) || (uint64_t v2 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(a1 + 80))) == 0) {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    uint64_t v3 = v2;
    ctu::LoggerCommonBase::getLogDomain((ctu::LoggerCommonBase *)(v1 - 48));
    ctu::TrackedLogger::registerLoggerToServer();
    if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_1C589F478(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

void sub_1C589F494(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void *std::shared_ptr<PowerManager::State>::shared_ptr[abi:ne180100]<PowerManager::State,std::shared_ptr<PowerManager::State> ctu::SharedSynchronizable<PowerManager::State>::make_shared_ptr<PowerManager::State>(PowerManager::State*)::{lambda(PowerManager::State*)#1},void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  uint64_t v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  uint64_t p_shared_owners = &v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20FA130;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)a2;
  a1[1] = v4;
  if (!a2) {
    return a1;
  }
  uint64_t v6 = *(std::__shared_weak_count **)(a2 + 80);
  if (v6)
  {
    if (v6->__shared_owners_ == -1)
    {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      *(void *)(a2 + 72) = a2;
      *(void *)(a2 + 80) = v4;
      std::__shared_weak_count::__release_weak(v6);
      if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
        goto LABEL_8;
      }
    }
    return a1;
  }
  atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  *(void *)(a2 + 72) = a2;
  *(void *)(a2 + 80) = v4;
  if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
LABEL_8:
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void sub_1C589F5C0(void *a1)
{
  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[11], v1, (dispatch_function_t)std::shared_ptr<PowerManager::State> ctu::SharedSynchronizable<PowerManager::State>::make_shared_ptr<PowerManager::State>(PowerManager::State*)::{lambda(PowerManager::State*)#1}::operator() const(PowerManager::State*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_1C589F5E8(_Unwind_Exception *a1)
{
}

void std::__shared_ptr_pointer<PowerManager::State *,std::shared_ptr<PowerManager::State> ctu::SharedSynchronizable<PowerManager::State>::make_shared_ptr<PowerManager::State>(PowerManager::State*)::{lambda(PowerManager::State *)#1},std::allocator<PowerManager::State>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<PowerManager::State *,std::shared_ptr<PowerManager::State> ctu::SharedSynchronizable<PowerManager::State>::make_shared_ptr<PowerManager::State>(PowerManager::State*)::{lambda(PowerManager::State *)#1},std::allocator<PowerManager::State>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<PowerManager::State *,std::shared_ptr<PowerManager::State> ctu::SharedSynchronizable<PowerManager::State>::make_shared_ptr<PowerManager::State>(PowerManager::State*)::{lambda(PowerManager::State *)#1},std::allocator<PowerManager::State>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableIN12PowerManager5StateEE15make_shared_ptrIS2_EENSt3__110shared_ptrIT_EEPS7_EUlPS2_E_") {
    return a1 + 24;
  }
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableIN12PowerManager5StateEE15make_shared_ptrIS2_EENSt3__110shar"
                                "ed_ptrIT_EEPS7_EUlPS2_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableIN12PowerManager5StateEE15make_shared_ptrIS2_EENSt3__110shared_ptrIT_EEPS7_EUlPS2_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableIN12PowerManager5StateEE15make_shared_ptrIS2_EENSt3__110shared_ptrIT_EEPS7_EUlPS2_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24; {
  return 0;
  }
}

uint64_t std::shared_ptr<PowerManager::State> ctu::SharedSynchronizable<PowerManager::State>::make_shared_ptr<PowerManager::State>(PowerManager::State*)::{lambda(PowerManager::State*)#1}::operator() const(PowerManager::State*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t PowerManager::State::State(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_1F20FA180;
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v14, "com.apple.telephony.abm", "power.mgr");
  GetABMLogServer(&v12);
  initially_inactive = dispatch_queue_attr_make_initially_inactive(0);
  uint64_t v5 = dispatch_queue_create_with_target_V2("power.mgr", initially_inactive, 0);
  dispatch_set_qos_class_floor(v5, QOS_CLASS_DEFAULT, 0);
  dispatch_activate(v5);
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = v5;
  if (v5)
  {
    dispatch_retain(v5);
    *(void *)(a1 + 96) = 0;
    dispatch_release(v5);
  }
  else
  {
    *(void *)(a1 + 96) = 0;
  }
  *(void *)a1 = &unk_1F20FA290;
  ctu::OsLogContext::OsLogContext();
  ctu::OsLogContext::OsLogContext();
  ctu::LoggerCommonBase::LoggerCommonBase();
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v16);
  *(void *)(a1 + 8) = &unk_1F20F0070;
  uint64_t v6 = v13;
  *(void *)(a1 + 56) = v12;
  *(void *)(a1 + 64) = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v15);
  *(void *)a1 = &unk_1F20FA250;
  uint64_t v7 = v13;
  if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v14);
  *(void *)a1 = &unk_1F20FA180;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = 0x200000001;
  *(_DWORD *)(a1 + 128) = -536870144;
  xpc_object_t v8 = (PowerStats *)operator new(0x88uLL);
  PowerStats::PowerStats(v8);
  *(void *)(a1 + 136) = v8;
  uint64_t v9 = operator new(0x20uLL);
  *uint64_t v9 = &unk_1F20FC148;
  v9[1] = 0;
  uint64_t v9[2] = 0;
  void v9[3] = v8;
  *(_OWORD *)(a1 + 152) = 0u;
  *(void *)(a1 + 144) = v9;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(void *)(a1 + 208) = 0;
  *(void *)(a1 + 200) = a1 + 208;
  *(void *)(a1 + 232) = 0;
  *(void *)(a1 + 216) = 0;
  *(void *)(a1 + 224) = a1 + 232;
  *(void *)(a1 + 264) = 0;
  *(void *)(a1 + 256) = 0;
  *(void *)(a1 + 240) = 0;
  *(void *)(a1 + 248) = a1 + 256;
  *(void *)(a1 + 272) = *a2;
  uint64_t v10 = a2[1];
  *(void *)(a1 + 280) = v10;
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 16), 1uLL, memory_order_relaxed);
  }
  ctu::LoggerCommonBase::setLogLevel();
  return a1;
}

void sub_1C589F99C(_Unwind_Exception *a1)
{
  xpc_object_t v8 = *(std::__shared_weak_count **)(v1 + 280);
  if (v8) {
    std::__shared_weak_count::__release_weak(v8);
  }
  std::__tree<std::__value_type<std::string,dispatch::group_session>,std::__map_value_compare<std::string,std::__value_type<std::string,dispatch::group_session>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dispatch::group_session>>>::destroy(*(char **)(v1 + 256));
  std::__tree<std::__value_type<std::string,std::shared_ptr<support::misc::Watchdog>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<support::misc::Watchdog>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<support::misc::Watchdog>>>>::destroy(*(void *)(v1 + 232));
  std::__tree<std::__value_type<std::string,std::shared_ptr<support::misc::Watchdog>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<support::misc::Watchdog>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<support::misc::Watchdog>>>>::destroy(*(void *)(v1 + 208));
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v5);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v4);
  uint64_t v9 = *(const void **)(v1 + 160);
  if (v9) {
    _Block_release(v9);
  }
  if (*v6) {
    _Block_release(*v6);
  }
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v3);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v2);
  ctu::SharedLoggable<PowerManager::State,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable((void *)v1);
  _Unwind_Resume(a1);
}

void sub_1C589FA14(_Unwind_Exception *a1)
{
  PowerStats::~PowerStats(v3);
  operator delete(v3);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v2);
  ctu::SharedLoggable<PowerManager::State,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(v1);
  _Unwind_Resume(a1);
}

void sub_1C589FA48(_Unwind_Exception *a1)
{
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v2);
  ctu::SharedLoggable<PowerManager::State,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(v1);
  _Unwind_Resume(a1);
}

void sub_1C589FA64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15)
{
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&a15);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&a13);
  ctu::SharedSynchronizable<DataStallDetection>::~SharedSynchronizable(v15);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&a11);
  _Unwind_Resume(a1);
}

void sub_1C589FA98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)va);
  _Unwind_Resume(a1);
}

void *ctu::SharedLoggable<PowerManager::State,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(void *a1)
{
  *a1 = &unk_1F20FA290;
  MEMORY[0x1C8790F40](a1 + 1);
  uint64_t v2 = a1[12];
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = a1[11];
  if (v3) {
    dispatch_release(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[10];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = &unk_1F20FA290;
  MEMORY[0x1C8790F40](a1 + 1);
  uint64_t v2 = a1[12];
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = a1[11];
  if (v3) {
    dispatch_release(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[10];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

void PowerManager::State::~State(PowerManager::State *this)
{
  PowerManager::State::~State(this);

  operator delete(v1);
}

{
  uint64_t v2;
  const void *v3;
  NSObject *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  const void *v8;
  const void *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  NSObject *v12;
  NSObject *v13;
  std::__shared_weak_count *v14;
  uint8_t v15[16];

  *(void *)this = &unk_1F20FA180;
  uint64_t v2 = *((void *)this + 20);
  if (v2)
  {
    (*(void (**)(uint64_t, uint64_t))(v2 + 16))(v2, 1);
    uint64_t v3 = (const void *)*((void *)this + 20);
    *((void *)this + 20) = 0;
    if (v3) {
      _Block_release(v3);
    }
  }
  uint64_t v4 = *((void *)this + 5);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)size_t v15 = 0;
    _os_log_impl(&dword_1C5767000, v4, OS_LOG_TYPE_DEFAULT, "#I Gone!", v15, 2u);
  }
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 35);
  if (v5) {
    std::__shared_weak_count::__release_weak(v5);
  }
  std::__tree<std::__value_type<std::string,dispatch::group_session>,std::__map_value_compare<std::string,std::__value_type<std::string,dispatch::group_session>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dispatch::group_session>>>::destroy(*((char **)this + 32));
  std::__tree<std::__value_type<std::string,std::shared_ptr<support::misc::Watchdog>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<support::misc::Watchdog>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<support::misc::Watchdog>>>>::destroy(*((void *)this + 29));
  std::__tree<std::__value_type<std::string,std::shared_ptr<support::misc::Watchdog>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<support::misc::Watchdog>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<support::misc::Watchdog>>>>::destroy(*((void *)this + 26));
  uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 24);
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  uint64_t v7 = (std::__shared_weak_count *)*((void *)this + 22);
  if (!v7 || atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    xpc_object_t v8 = (const void *)*((void *)this + 20);
    if (!v8) {
      goto LABEL_15;
    }
    goto LABEL_14;
  }
  ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
  std::__shared_weak_count::__release_weak(v7);
  xpc_object_t v8 = (const void *)*((void *)this + 20);
  if (v8) {
LABEL_14:
  }
    _Block_release(v8);
LABEL_15:
  uint64_t v9 = (const void *)*((void *)this + 19);
  if (v9) {
    _Block_release(v9);
  }
  uint64_t v10 = (std::__shared_weak_count *)*((void *)this + 18);
  if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  std::string v11 = (std::__shared_weak_count *)*((void *)this + 14);
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  *(void *)this = &unk_1F20FA290;
  MEMORY[0x1C8790F40]((char *)this + 8);
  uint64_t v12 = *((void *)this + 12);
  if (v12) {
    dispatch_release(v12);
  }
  uint64_t v13 = *((void *)this + 11);
  if (v13) {
    dispatch_release(v13);
  }
  dispatch_group_t v14 = (std::__shared_weak_count *)*((void *)this + 10);
  if (v14) {
    std::__shared_weak_count::__release_weak(v14);
  }
}

uint64_t ctu::Loggable<PowerManager::State,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig(uint64_t a1)
{
  return MEMORY[0x1F417DA50](a1 + 8);
}

void ctu::Loggable<PowerManager::State,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName(char *a1@<X8>)
{
  a1[23] = 9;
  strcpy(a1, "power.mgr");
}

uint64_t ctu::Loggable<PowerManager::State,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return MEMORY[0x1F417DD10](a1 + 8);
}

void ctu::SharedLoggable<PowerManager::State,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(void *a1)
{
  *a1 = &unk_1F20FA290;
  MEMORY[0x1C8790F40](a1 + 1);
  uint64_t v2 = a1[12];
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = a1[11];
  if (v3) {
    dispatch_release(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[10];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }

  operator delete(a1);
}

void *ctu::Loggable<PowerManager::State,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_1F20FA290;
  MEMORY[0x1C8790F40](a1 + 1);
  return a1;
}

void ctu::Loggable<PowerManager::State,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_1F20FA290;
  MEMORY[0x1C8790F40](a1 + 1);

  operator delete(a1);
}

void std::__tree<std::__value_type<std::string,dispatch::group_session>,std::__map_value_compare<std::string,std::__value_type<std::string,dispatch::group_session>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dispatch::group_session>>>::destroy(char *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,dispatch::group_session>,std::__map_value_compare<std::string,std::__value_type<std::string,dispatch::group_session>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dispatch::group_session>>>::destroy(*(void *)a1);
    std::__tree<std::__value_type<std::string,dispatch::group_session>,std::__map_value_compare<std::string,std::__value_type<std::string,dispatch::group_session>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dispatch::group_session>>>::destroy(*((void *)a1 + 1));
    uint64_t v2 = *((void *)a1 + 7);
    if (v2)
    {
      dispatch_group_leave(v2);
      uint64_t v3 = *((void *)a1 + 7);
      if (v3) {
        dispatch_release(v3);
      }
    }
    if (a1[55] < 0)
    {
      operator delete(*((void **)a1 + 4));
      uint64_t v4 = a1;
    }
    else
    {
      uint64_t v4 = a1;
    }
    operator delete(v4);
  }
}

void std::__tree<std::__value_type<std::string,std::shared_ptr<support::misc::Watchdog>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<support::misc::Watchdog>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<support::misc::Watchdog>>>>::destroy(uint64_t a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,std::shared_ptr<support::misc::Watchdog>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<support::misc::Watchdog>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<support::misc::Watchdog>>>>::destroy(*(void *)a1);
    std::__tree<std::__value_type<std::string,std::shared_ptr<support::misc::Watchdog>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<support::misc::Watchdog>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<support::misc::Watchdog>>>>::destroy(*(void *)(a1 + 8));
    uint64_t v2 = *(std::__shared_weak_count **)(a1 + 64);
    if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      {
LABEL_5:
        uint64_t v3 = (void *)a1;
LABEL_7:
        operator delete(v3);
        return;
      }
    }
    else if ((*(char *)(a1 + 55) & 0x80000000) == 0)
    {
      goto LABEL_5;
    }
    operator delete(*(void **)(a1 + 32));
    uint64_t v3 = (void *)a1;
    goto LABEL_7;
  }
}

void ___ZN12PowerManager5State4initEv_block_invoke(uint64_t a1)
{
  v40.__r_.__value_.__r.__words[2] = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v2 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v2 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v39 = v2;
  *(_OWORD *)&v40.__r_.__value_.__l.__data_ = v2;
  long long v38 = v2;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN12PowerManager5State4initEv_block_invoke_2;
  aBlock[3] = &__block_descriptor_tmp_38;
  long long v21 = *(_OWORD *)(a1 + 32);
  long long v36 = v21;
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 48);
  size_t v37 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = _Block_copy(aBlock);
  uint64_t v5 = *(NSObject **)(v21 + 88);
  *(void *)&long long v38 = 1;
  *((void *)&v38 + 1) = v5;
  if (v5) {
    dispatch_retain(v5);
  }
  if (v4)
  {
    long long v39 = (unint64_t)_Block_copy(v4);
    v40.__r_.__value_.__r.__words[0] = 5063233;
    *((unsigned char *)&v40.__r_.__value_.__s + 23) = 3;
    _Block_release(v4);
  }
  else
  {
    long long v39 = 0uLL;
    v40.__r_.__value_.__r.__words[0] = 5063233;
    *((unsigned char *)&v40.__r_.__value_.__s + 23) = 3;
  }
  ctu::power::manager::get(buf, (ctu::power::manager *)v5);
  long long v6 = *(_OWORD *)buf;
  memset(buf, 0, 16);
  uint64_t v7 = *(std::__shared_weak_count **)(v21 + 176);
  *(_OWORD *)(v21 + 168) = v6;
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  xpc_object_t v8 = (std::__shared_weak_count *)buf[1];
  if (buf[1] && !atomic_fetch_add((atomic_ullong *volatile)(buf[1] + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  long long v30 = v38;
  if (*((void *)&v38 + 1)) {
    dispatch_retain(*((dispatch_object_t *)&v38 + 1));
  }
  uint64_t v9 = (void *)v39;
  if ((void)v39) {
    uint64_t v9 = _Block_copy((const void *)v39);
  }
  unint64_t v31 = v9;
  uint64_t v10 = (void *)*((void *)&v39 + 1);
  if (*((void *)&v39 + 1)) {
    uint64_t v10 = _Block_copy(*((const void **)&v39 + 1));
  }
  uint64_t v32 = v10;
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__p, v40.__r_.__value_.__l.__data_, v40.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = v40;
  }
  ctu::power::manager::registerListener();
  long long v11 = *(_OWORD *)buf;
  memset(buf, 0, 16);
  uint64_t v12 = *(std::__shared_weak_count **)(v21 + 192);
  *(_OWORD *)(v21 + 184) = v11;
  if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  uint64_t v13 = (std::__shared_weak_count *)buf[1];
  if (!buf[1] || atomic_fetch_add((atomic_ullong *volatile)(buf[1] + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_29;
    }
LABEL_32:
    operator delete(__p.__r_.__value_.__l.__data_);
    dispatch_group_t v14 = v32;
    if (!v32) {
      goto LABEL_34;
    }
    goto LABEL_33;
  }
  ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
  std::__shared_weak_count::__release_weak(v13);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_32;
  }
LABEL_29:
  dispatch_group_t v14 = v32;
  if (v32) {
LABEL_33:
  }
    _Block_release(v14);
LABEL_34:
  if (v31) {
    _Block_release(v31);
  }
  if (*((void *)&v30 + 1)) {
    dispatch_release(*((dispatch_object_t *)&v30 + 1));
  }
  size_t v15 = *(NSObject **)(v21 + 40);
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf[0]) = 0;
    _os_log_impl(&dword_1C5767000, v15, OS_LOG_TYPE_DEFAULT, "#I Registered power listener", (uint8_t *)buf, 2u);
  }
  memset(buf, 170, 16);
  abm::AWDHelperGetConnection(buf);
  if (buf[0])
  {
    uint64_t v23 = MEMORY[0x1E4F143A8];
    uint64_t v24 = 1174405120;
    uint64_t v25 = ___ZN12PowerManager5State4initEv_block_invoke_22;
    uint64_t v26 = &__block_descriptor_tmp_29_3;
    uint64_t v17 = *(void *)(a1 + 40);
    char v16 = *(std::__shared_weak_count **)(a1 + 48);
    uint64_t v27 = v21;
    uint64_t v28 = v17;
    xpc_object_t v29 = v16;
    if (v16) {
      atomic_fetch_add_explicit(&v16->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    wis::WISServerConnection::RegisterQueriableMetricCallbackForIdentifier();
    if (v29)
    {
      std::__shared_weak_count::__release_weak(v29);
      size_t v18 = (std::__shared_weak_count *)buf[1];
      if (!buf[1]) {
        goto LABEL_50;
      }
      goto LABEL_48;
    }
  }
  else
  {
    uint64_t v19 = *(NSObject **)(v21 + 40);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)BOOL v22 = 0;
      _os_log_error_impl(&dword_1C5767000, v19, OS_LOG_TYPE_ERROR, "AWD connection setup failed", v22, 2u);
      size_t v18 = (std::__shared_weak_count *)buf[1];
      if (!buf[1]) {
        goto LABEL_50;
      }
      goto LABEL_48;
    }
  }
  size_t v18 = (std::__shared_weak_count *)buf[1];
  if (!buf[1]) {
    goto LABEL_50;
  }
LABEL_48:
  if (!atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
LABEL_50:
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v40.__r_.__value_.__l.__data_);
    uint64_t v20 = (const void *)*((void *)&v39 + 1);
    if (!*((void *)&v39 + 1)) {
      goto LABEL_55;
    }
    goto LABEL_54;
  }
  uint64_t v20 = (const void *)*((void *)&v39 + 1);
  if (*((void *)&v39 + 1)) {
LABEL_54:
  }
    _Block_release(v20);
LABEL_55:
  if ((void)v39) {
    _Block_release((const void *)v39);
  }
  if (*((void *)&v38 + 1)) {
    dispatch_release(*((dispatch_object_t *)&v38 + 1));
  }
  if (v37) {
    std::__shared_weak_count::__release_weak(v37);
  }
}

void sub_1C58A05B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, std::__shared_weak_count *a19, char a20,dispatch_object_t object,void *a22,void *aBlock,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,std::__shared_weak_count *a36)
{
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (a22) {
    _Block_release(a22);
  }
  if (object)
  {
    dispatch_release(object);
    ctu::power::manager::parameters::~parameters((void **)(v36 - 128));
    long long v38 = a36;
    if (!a36) {
LABEL_7:
    }
      _Unwind_Resume(a1);
  }
  else
  {
    ctu::power::manager::parameters::~parameters((void **)(v36 - 128));
    long long v38 = a36;
    if (!a36) {
      goto LABEL_7;
    }
  }
  std::__shared_weak_count::__release_weak(v38);
  _Unwind_Resume(a1);
}

void ___ZN12PowerManager5State4initEv_block_invoke_2(void *a1, ctu::power::manager *a2, const void **a3)
{
  uint64_t v64 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = a1[4];
  long long v6 = (std::__shared_weak_count *)a1[6];
  if (!v6)
  {
    xpc_object_t v8 = 0;
    goto LABEL_7;
  }
  xpc_object_t v8 = std::__shared_weak_count::lock(v6);
  if (!v8 || !a1[5])
  {
LABEL_7:
    (*((void (**)(void))*a3 + 2))();
    if (!v8) {
      return;
    }
    goto LABEL_90;
  }
  if (*a3) {
    uint64_t v9 = (void (**)(void *, uint64_t))_Block_copy(*a3);
  }
  else {
    uint64_t v9 = 0;
  }
  int v10 = *(_DWORD *)(v5 + 120);
  uint64_t v11 = *(void *)(v5 + 124);
  int v46 = v11;
  HIDWORD(v12) = a2;
  LODWORD(v12) = a2 + 536870288;
  switch((v12 >> 4))
  {
    case 0u:
      if (v10 != 1) {
        goto LABEL_34;
      }
      int v13 = 0;
      int v14 = 1;
      if (*(void *)(v5 + 216)) {
        goto LABEL_31;
      }
      goto LABEL_49;
    case 1u:
      if (v10 != 1) {
        goto LABEL_34;
      }
      int v14 = 0;
      int v13 = v11 != 0;
      if (!*(void *)(v5 + 216)) {
        goto LABEL_49;
      }
      goto LABEL_31;
    case 2u:
      if (!v11) {
        goto LABEL_24;
      }
      goto LABEL_34;
    case 9u:
      if (v10) {
        BOOL v15 = 0;
      }
      else {
        BOOL v15 = v11 == 2;
      }
      if (!v15) {
        goto LABEL_34;
      }
LABEL_24:
      int v13 = 2;
      int v14 = 1;
      if (!*(void *)(v5 + 216)) {
        goto LABEL_49;
      }
      goto LABEL_31;
    case 0xBu:
      if (v10) {
        BOOL v16 = 1;
      }
      else {
        BOOL v16 = v11 == 2;
      }
      if (v16) {
        goto LABEL_34;
      }
      int v14 = 0;
      int v13 = 2;
      if (!*(void *)(v5 + 216)) {
        goto LABEL_49;
      }
LABEL_31:
      if (a2 == -536870288) {
        goto LABEL_34;
      }
      if (a2 != -536870272)
      {
LABEL_49:
        *(_DWORD *)(v5 + 120) = v14;
        *(_DWORD *)(v5 + 124) = v13;
        *(_DWORD *)(v5 + 128) = a2;
        uint64_t v26 = *(void *)(v5 + 136);
        int v54 = (int)a2;
        int v55 = v10;
        uint64_t v56 = v11;
        unint64_t v53 = __PAIR64__(v13, v14);
        PowerStats::reportSystemStateChange(v26, (uint64_t)&v55, (uint64_t *)&v53);
        uint64_t v27 = *(NSObject **)(v5 + 40);
        if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v28 = ctu::power::manager::asCString(a2);
          xpc_object_t v29 = "Unknown";
          long long v30 = "PoweredOn";
          int v31 = *(_DWORD *)(v5 + 120);
          uint64_t v32 = *(int *)(v5 + 124);
          if (v31 != 1) {
            long long v30 = "Unknown";
          }
          if (!v31) {
            long long v30 = "LowPower";
          }
          if (v32 <= 2) {
            xpc_object_t v29 = off_1E6517DD8[v32];
          }
          *(_DWORD *)std::string buf = 136315650;
          *(void *)&uint8_t buf[4] = v28;
          __int16 v58 = 2080;
          *(void *)size_t v59 = v30;
          *(_WORD *)&v59[8] = 2080;
          *(void *)&v59[10] = v29;
          _os_log_impl(&dword_1C5767000, v27, OS_LOG_TYPE_DEFAULT, "#I Power notification: %s, Power state: %s, Sleep state: %s", buf, 0x20u);
        }
        int v33 = *(_DWORD *)(v5 + 128);
        switch(v33)
        {
          case -536870144:
            goto LABEL_60;
          case -536870256:
            v9[2](v9, 1);
            uint64_t v42 = *(void *)(v5 + 264);
            if (v42)
            {
              uint64_t v43 = *(NSObject **)(v5 + 40);
              if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)std::string buf = 134217984;
                *(void *)&uint8_t buf[4] = v42;
                _os_log_impl(&dword_1C5767000, v43, OS_LOG_TYPE_DEFAULT, "#I Allowing deferred work to run (after WillNotSleep); count=%zd",
                  buf,
                  0xCu);
              }
              std::__tree<std::__value_type<std::string,dispatch::group_session>,std::__map_value_compare<std::string,std::__value_type<std::string,dispatch::group_session>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dispatch::group_session>>>::destroy(*(char **)(v5 + 256));
              *(void *)(v5 + 256) = 0;
              *(void *)(v5 + 264) = 0;
              *(void *)(v5 + 248) = v5 + 256;
            }
            break;
          case -536870272:
LABEL_60:
            uint64_t v34 = *(unsigned int *)(v5 + 120);
            size_t v35 = dispatch_group_create();
            uint64_t v36 = *(void *)(v5 + 152);
            if (v36)
            {
              if (v35)
              {
                dispatch_retain(v35);
                dispatch_group_enter(v35);
                uint64_t v36 = *(void *)(v5 + 152);
              }
              *(void *)std::string buf = v35;
              (*(void (**)(uint64_t, uint64_t, unsigned char *))(v36 + 16))(v36, v34, buf);
              if (*(void *)buf)
              {
                dispatch_group_leave(*(dispatch_group_t *)buf);
                if (*(void *)buf) {
                  dispatch_release(*(dispatch_object_t *)buf);
                }
              }
            }
            size_t v37 = *(std::__shared_weak_count **)(v5 + 80);
            if (!v37 || (uint64_t v38 = *(void *)(v5 + 72), (v39 = std::__shared_weak_count::lock(v37)) == 0)) {
              std::__throw_bad_weak_ptr[abi:ne180100]();
            }
            std::string v40 = v39;
            atomic_fetch_add_explicit(&v39->__shared_weak_owners_, 1uLL, memory_order_relaxed);
            if (!atomic_fetch_add(&v39->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
              std::__shared_weak_count::__release_weak(v40);
            }
            block[0] = MEMORY[0x1E4F143A8];
            block[1] = 1174405120;
            block[2] = ___ZN12PowerManager5State28handlePowerNotification_syncEN8dispatch5blockIU13block_pointerFvbEEEj_block_invoke;
            block[3] = &__block_descriptor_tmp_36_2;
            block[4] = v5;
            dispatch_object_t object = v35;
            if (v35) {
              dispatch_retain(v35);
            }
            if (v9) {
              unint64_t v41 = _Block_copy(v9);
            }
            else {
              unint64_t v41 = 0;
            }
            aBlock = v41;
            uint64_t v50 = v38;
            size_t v51 = v40;
            atomic_fetch_add_explicit(&v40->__shared_weak_owners_, 1uLL, memory_order_relaxed);
            int v52 = v34;
            dispatch_group_notify(v35, *(dispatch_queue_t *)(v5 + 88), block);
            if (v51) {
              std::__shared_weak_count::__release_weak(v51);
            }
            if (aBlock) {
              _Block_release(aBlock);
            }
            if (object) {
              dispatch_release(object);
            }
            std::__shared_weak_count::__release_weak(v40);
            if (v35) {
              dispatch_release(v35);
            }
LABEL_88:
            if (!v9) {
              goto LABEL_90;
            }
            break;
          default:
            v9[2](v9, 1);
            break;
        }
LABEL_89:
        _Block_release(v9);
        goto LABEL_90;
      }
      if (*(void *)(v5 + 264))
      {
LABEL_34:
        v9[2](v9, 0);
        int v17 = 0;
        size_t v18 = *(NSObject **)(v5 + 40);
        if (!os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_42;
        }
        goto LABEL_35;
      }
      if (v9) {
        size_t v44 = _Block_copy(v9);
      }
      else {
        size_t v44 = 0;
      }
      uint64_t v45 = *(const void **)(v5 + 160);
      *(void *)(v5 + 160) = v44;
      if (v45) {
        _Block_release(v45);
      }
      int v17 = 1;
      size_t v18 = *(NSObject **)(v5 + 40);
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
      {
LABEL_35:
        uint64_t v19 = ctu::power::manager::asCString(a2);
        uint64_t v20 = *(void *)(v5 + 216);
        long long v21 = "Unknown";
        uint64_t v22 = *(void *)(v5 + 264);
        if (v10 == 1) {
          long long v21 = "PoweredOn";
        }
        *(_DWORD *)std::string buf = 136316418;
        *(void *)&uint8_t buf[4] = v19;
        __int16 v58 = 1024;
        if (!v10) {
          long long v21 = "LowPower";
        }
        *(_DWORD *)size_t v59 = v46;
        uint64_t v23 = "false";
        *(_WORD *)&v59[4] = 2080;
        *(void *)&v59[6] = v21;
        *(_WORD *)&v59[14] = 2048;
        if (v17) {
          uint64_t v23 = "true";
        }
        *(void *)&v59[16] = v20;
        __int16 v60 = 2048;
        uint64_t v61 = v22;
        __int16 v62 = 2080;
        size_t v63 = v23;
        _os_log_impl(&dword_1C5767000, v18, OS_LOG_TYPE_DEFAULT, "#I Cannot accept notification: %s, SleepState: %u, PowerState: %s, Assertions: %lu, Assertions-deferred: %lu, Deferred-ack: %s", buf, 0x3Au);
      }
LABEL_42:
      if (a2 != -536870144 && a2 != -536870256) {
        goto LABEL_88;
      }
      uint64_t v24 = *(void *)(v5 + 264);
      if (!v24) {
        goto LABEL_88;
      }
      uint64_t v25 = *(NSObject **)(v5 + 40);
      if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)std::string buf = 134217984;
        *(void *)&uint8_t buf[4] = v24;
        _os_log_impl(&dword_1C5767000, v25, OS_LOG_TYPE_DEFAULT, "#I Allowing deferred work to run (skipping power event); count=%zd",
          buf,
          0xCu);
      }
      std::__tree<std::__value_type<std::string,dispatch::group_session>,std::__map_value_compare<std::string,std::__value_type<std::string,dispatch::group_session>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dispatch::group_session>>>::destroy(*(char **)(v5 + 256));
      *(void *)(v5 + 256) = 0;
      *(void *)(v5 + 264) = 0;
      *(void *)(v5 + 248) = v5 + 256;
      if (v9) {
        goto LABEL_89;
      }
LABEL_90:
      if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
      return;
    default:
      goto LABEL_34;
  }
}

void sub_1C58A0DBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,dispatch_group_t group)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_40c45_ZTSNSt3__18weak_ptrIN12PowerManager5StateEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c45_ZTSNSt3__18weak_ptrIN12PowerManager5StateEEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void ___ZN12PowerManager5State4initEv_block_invoke_22(void *a1, int a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    uint64_t v5 = a1[4];
    long long v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      uint64_t v7 = v6;
      if (a1[5])
      {
        v8[0] = MEMORY[0x1E4F143A8];
        v8[1] = 0x40000000;
        void v8[2] = ___ZN12PowerManager5State4initEv_block_invoke_2_23;
        v8[3] = &__block_descriptor_tmp_25;
        v8[4] = v5;
        int v9 = a2;
        ctu::SharedSynchronizable<PowerManager::State>::execute_wrapped((uint64_t *)(v5 + 72), (uint64_t)v8);
      }
      if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void ___ZN12PowerManager5State4initEv_block_invoke_2_23(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 40) == 524466) {
    PowerStats::submitLowPowerStatsMetric_sync(*(os_log_t **)(*(void *)(a1 + 32) + 136));
  }
}

void *___ZNK3ctu20SharedSynchronizableIN12PowerManager5StateEE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS8__block_invoke(uint64_t a1)
{
  return (*(void *(**)(void *__return_ptr))(**(void **)(a1 + 40) + 16))(*(void **)(a1 + 40));
}

void ___ZN12PowerManager5State28handlePowerNotification_syncEN8dispatch5blockIU13block_pointerFvbEEEj_block_invoke(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 32);
  (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 64);
  if (v3)
  {
    uint64_t v4 = std::__shared_weak_count::lock(v3);
    if (v4)
    {
      uint64_t v5 = v4;
      if (*(void *)(a1 + 56))
      {
        if (*(_DWORD *)(a1 + 72) == 1)
        {
          uint64_t v6 = *(void *)(v2 + 264);
          if (v6)
          {
            uint64_t v7 = *(NSObject **)(v2 + 40);
            if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
            {
              int v8 = 134217984;
              uint64_t v9 = v6;
              _os_log_impl(&dword_1C5767000, v7, OS_LOG_TYPE_DEFAULT, "#I Allowing deferred work to run; count=%zd",
                (uint8_t *)&v8,
                0xCu);
            }
            std::__tree<std::__value_type<std::string,dispatch::group_session>,std::__map_value_compare<std::string,std::__value_type<std::string,dispatch::group_session>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dispatch::group_session>>>::destroy(*(char **)(v2 + 256));
            *(void *)(v2 + 256) = 0;
            *(void *)(v2 + 264) = 0;
            *(void *)(v2 + 248) = v2 + 256;
          }
        }
      }
      if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void *__copy_helper_block_e8_40c21_ZTSN8dispatch5groupE48c43_ZTSN8dispatch5blockIU13block_pointerFvbEEE56c45_ZTSNSt3__18weak_ptrIN12PowerManager5StateEEE(void *a1, void *a2)
{
  uint64_t v4 = a2[5];
  a1[5] = v4;
  if (v4) {
    dispatch_retain(v4);
  }
  uint64_t result = (void *)a2[6];
  if (result) {
    uint64_t result = _Block_copy(result);
  }
  uint64_t v7 = a2[7];
  uint64_t v6 = a2[8];
  a1[6] = result;
  a1[7] = v7;
  a1[8] = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c21_ZTSN8dispatch5groupE48c43_ZTSN8dispatch5blockIU13block_pointerFvbEEE56c45_ZTSNSt3__18weak_ptrIN12PowerManager5StateEEE(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[8];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = (const void *)a1[6];
  if (v3) {
    _Block_release(v3);
  }
  uint64_t v4 = a1[5];
  if (v4)
  {
    dispatch_release(v4);
  }
}

void ctu::power::manager::parameters::~parameters(void **this)
{
  if (*((char *)this + 55) < 0)
  {
    operator delete(this[4]);
    uint64_t v2 = this[3];
    if (!v2) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  uint64_t v2 = this[3];
  if (v2) {
LABEL_5:
  }
    _Block_release(v2);
LABEL_6:
  uint64_t v3 = this[2];
  if (v3) {
    _Block_release(v3);
  }
  uint64_t v4 = this[1];
  if (v4) {
    dispatch_release(v4);
  }
}

void ctu::SharedSynchronizable<PowerManager::State>::execute_wrapped(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[1];
  if (!v3 || (v5 = *a1, (uint64_t v6 = std::__shared_weak_count::lock(v3)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v7 = v6;
  int v8 = a1[2];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 1174405120;
  block[2] = ___ZNK3ctu20SharedSynchronizableIN12PowerManager5StateEE15execute_wrappedEU13block_pointerFvvE_block_invoke;
  block[3] = &unk_1F20FA388;
  void block[5] = v5;
  unint64_t v12 = v7;
  uint64_t p_shared_owners = &v7->__shared_owners_;
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  block[4] = a2;
  dispatch_async(v8, block);
  uint64_t v10 = v12;
  if (!v12 || atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      return;
    }
LABEL_8:
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    return;
  }
  ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
  std::__shared_weak_count::__release_weak(v10);
  if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_8;
  }
}

uint64_t ___ZNK3ctu20SharedSynchronizableIN12PowerManager5StateEE15execute_wrappedEU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t __copy_helper_block_e8_40c49_ZTSNSt3__110shared_ptrIKN12PowerManager5StateEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c49_ZTSNSt3__110shared_ptrIKN12PowerManager5StateEEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void ___ZN12PowerManager5State22registerForPowerEventsEN8dispatch5blockIU13block_pointerFv10PowerStateNS1_13group_sessionEEEE_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v1 = *(void **)(a1 + 40);
  if (v1) {
    uint64_t v1 = _Block_copy(v1);
  }
  uint64_t v3 = *(const void **)(v2 + 152);
  *(void *)(v2 + 152) = v1;
  if (v3) {
    _Block_release(v3);
  }
}

void *__copy_helper_block_e8_40c73_ZTSN8dispatch5blockIU13block_pointerFv10PowerStateNS_13group_sessionEEEE(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void **)(a2 + 40);
  if (result) {
    uint64_t result = _Block_copy(result);
  }
  *(void *)(a1 + 40) = result;
  return result;
}

void __destroy_helper_block_e8_40c73_ZTSN8dispatch5blockIU13block_pointerFv10PowerStateNS_13group_sessionEEEE(uint64_t a1)
{
  uint64_t v1 = *(const void **)(a1 + 40);
  if (v1) {
    _Block_release(v1);
  }
}

void dispatch::async<void ctu::SharedSynchronizable<PowerManager::State>::execute_wrapped<PowerManager::State::createPowerAssertion(std::string,std::chrono::duration<long long,std::ratio<1l,1000l>>)::{lambda(void)#1}>(PowerManager::State::createPowerAssertion(std::string,std::chrono::duration<long long,std::ratio<1l,1000l>>)::{lambda(void)#1} &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<PowerManager::State::createPowerAssertion(std::string,std::chrono::duration<long long,std::ratio<1l,1000l>>)::{lambda(void)#1},std::default_delete<PowerManager::State::createPowerAssertion(std::string,std::chrono::duration<long long,std::ratio<1l,1000l>>)::{lambda(void)#1}>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t v173 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  uint64_t v164 = (uint64_t)(*a1 + 1);
  unint64_t v166 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v167 = 0xAAAAAAAAAAAAAAAALL;
  v163 = v1;
  pthread_mutex_lock(&ctu::Singleton<ctu::power::assertion,ctu::power::assertion,ctu::PthreadMutexGuardPolicy<ctu::power::assertion>>::sInstance);
  if (qword_1EBBDD110) {
    goto LABEL_11;
  }
  uint64_t v3 = (std::__shared_weak_count_vtbl *)operator new(0x38uLL);
  MEMORY[0x1C8791510]();
  uint64_t v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  uint64_t p_shared_owners = &v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20FA428;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = v3;
  uint64_t v6 = (std::__shared_weak_count *)v3->~__shared_weak_count_0;
  if (v6)
  {
    if (v6->__shared_owners_ == -1)
    {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      v3->~__shared_weak_size_t count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v3;
      v3->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v4;
      std::__shared_weak_count::__release_weak(v6);
      if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
        goto LABEL_7;
      }
    }
  }
  else
  {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v3->~__shared_weak_size_t count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v3;
    v3->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v4;
    if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL))
    {
LABEL_7:
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  uint64_t v7 = (std::__shared_weak_count *)off_1EBBDD118;
  qword_1EBBDD110 = (uint64_t)v3;
  off_1EBBDD118 = v4;
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
LABEL_11:
  int v8 = (std::__shared_weak_count *)off_1EBBDD118;
  if (off_1EBBDD118) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)off_1EBBDD118 + 1, 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<ctu::power::assertion,ctu::power::assertion,ctu::PthreadMutexGuardPolicy<ctu::power::assertion>>::sInstance);
  ctu::power::assertion::createInternal();
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    unint64_t v9 = v166;
    if (v166) {
      goto LABEL_16;
    }
LABEL_57:
    uint64_t v32 = *(NSObject **)(v2 + 40);
    if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
    {
      uint64_t v33 = v164;
      if (*((char *)v1 + 31) < 0) {
        uint64_t v33 = *(void *)v164;
      }
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v33;
      _os_log_error_impl(&dword_1C5767000, v32, OS_LOG_TYPE_ERROR, "Failed to create power assertion '%s'", (uint8_t *)&buf, 0xCu);
    }
    goto LABEL_315;
  }
  unint64_t v9 = v166;
  if (!v166) {
    goto LABEL_57;
  }
LABEL_16:
  uint64_t v159 = v9;
  uint64_t v161 = v2;
  uint64_t v10 = (uint64_t **)(v2 + 208);
  uint64_t v11 = *(uint64_t **)(v2 + 208);
  if (!v11)
  {
    uint64_t v24 = (uint64_t **)(v2 + 208);
    if (*(uint64_t ***)(v2 + 200) == v10)
    {
      uint64_t v34 = 0;
      uint64_t v24 = (uint64_t **)(v2 + 208);
      size_t v35 = (uint64_t **)(v2 + 208);
      goto LABEL_114;
    }
LABEL_72:
    size_t v35 = v24;
    do
    {
      uint64_t v38 = (uint64_t *)v35;
      size_t v35 = (uint64_t **)v35[2];
    }
    while (*v35 == v38);
    uint64_t v34 = 0;
    size_t v12 = *((unsigned __int8 *)v1 + 31);
    int v13 = (const void *)v1[1];
    size_t v14 = v1[2];
    char v37 = *((unsigned char *)v1 + 31);
    goto LABEL_75;
  }
  size_t v12 = *((unsigned __int8 *)v1 + 31);
  int v13 = (const void *)v1[1];
  size_t v14 = v1[2];
  if ((v12 & 0x80u) == 0) {
    BOOL v15 = (const void *)v164;
  }
  else {
    BOOL v15 = (const void *)v1[1];
  }
  if ((v12 & 0x80u) == 0) {
    size_t v16 = *((unsigned __int8 *)v1 + 31);
  }
  else {
    size_t v16 = v1[2];
  }
  int v17 = v10;
  size_t v18 = v11;
  do
  {
    while (1)
    {
      int v19 = *((char *)v18 + 55);
      uint64_t v20 = v19 >= 0 ? v18 + 4 : (uint64_t *)v18[4];
      size_t v21 = v19 >= 0 ? *((unsigned __int8 *)v18 + 55) : v18[5];
      size_t v22 = v16 >= v21 ? v21 : v16;
      int v23 = memcmp(v20, v15, v22);
      if (v23) {
        break;
      }
      if (v21 >= v16) {
        goto LABEL_38;
      }
LABEL_24:
      size_t v18 = (uint64_t *)v18[1];
      if (!v18) {
        goto LABEL_39;
      }
    }
    if (v23 < 0) {
      goto LABEL_24;
    }
LABEL_38:
    int v17 = (uint64_t **)v18;
    size_t v18 = (uint64_t *)*v18;
  }
  while (v18);
LABEL_39:
  uint64_t v24 = v10;
  if (v17 != v10)
  {
    int v25 = *((char *)v17 + 55);
    if (v25 >= 0) {
      uint64_t v26 = (uint64_t *)(v17 + 4);
    }
    else {
      uint64_t v26 = v17[4];
    }
    if (v25 >= 0) {
      size_t v27 = *((unsigned __int8 *)v17 + 55);
    }
    else {
      size_t v27 = (size_t)v17[5];
    }
    if (v27 >= v16) {
      size_t v28 = v16;
    }
    else {
      size_t v28 = v27;
    }
    int v29 = memcmp(v15, v26, v28);
    if (v29)
    {
      if ((v29 & 0x80000000) == 0)
      {
LABEL_51:
        unint64_t v30 = v167;
        if (v167) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v167 + 8), 1uLL, memory_order_relaxed);
        }
        int v31 = (std::__shared_weak_count *)v17[8];
        uint64_t v2 = v161;
        v17[7] = (uint64_t *)v159;
        v17[8] = (uint64_t *)v30;
        if (v31 && !atomic_fetch_add(&v31->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
          std::__shared_weak_count::__release_weak(v31);
        }
        goto LABEL_130;
      }
    }
    else if (v16 >= v27)
    {
      goto LABEL_51;
    }
    uint64_t v24 = v17;
  }
  uint64_t v34 = *v24;
  if (*(uint64_t ***)(v161 + 200) == v24)
  {
    size_t v35 = v24;
    uint64_t v2 = v161;
    goto LABEL_114;
  }
  if (!v34)
  {
    uint64_t v1 = v163;
    goto LABEL_72;
  }
  uint64_t v36 = *v24;
  do
  {
    size_t v35 = (uint64_t **)v36;
    uint64_t v36 = (uint64_t *)v36[1];
  }
  while (v36);
  char v37 = v12;
LABEL_75:
  int v39 = *((char *)v35 + 55);
  if (v39 >= 0) {
    std::string v40 = (uint64_t *)(v35 + 4);
  }
  else {
    std::string v40 = v35[4];
  }
  if (v39 >= 0) {
    size_t v41 = *((unsigned __int8 *)v35 + 55);
  }
  else {
    size_t v41 = (size_t)v35[5];
  }
  char __p = v37;
  if (v37 >= 0) {
    uint64_t v42 = (const void *)v164;
  }
  else {
    uint64_t v42 = v13;
  }
  if (v37 >= 0) {
    size_t v14 = v12;
  }
  if (v14 >= v41) {
    size_t v43 = v41;
  }
  else {
    size_t v43 = v14;
  }
  int v44 = memcmp(v40, v42, v43);
  if (!v44)
  {
    uint64_t v2 = v161;
    if (v41 >= v14) {
      goto LABEL_91;
    }
LABEL_114:
    if (v34) {
      uint64_t v10 = v35 + 1;
    }
    else {
      uint64_t v10 = v24;
    }
    if (!*v10)
    {
      if (v34) {
        uint64_t v45 = v35;
      }
      else {
        uint64_t v45 = v24;
      }
      int v52 = v163;
      char v53 = *((unsigned char *)v163 + 31);
      goto LABEL_124;
    }
    goto LABEL_130;
  }
  uint64_t v2 = v161;
  if (v44 < 0) {
    goto LABEL_114;
  }
LABEL_91:
  if (!v11)
  {
    uint64_t v45 = v10;
    goto LABEL_123;
  }
  while (2)
  {
    while (2)
    {
      uint64_t v45 = (uint64_t **)v11;
      int v46 = *((char *)v11 + 55);
      if (v46 >= 0) {
        uint64_t v47 = v11 + 4;
      }
      else {
        uint64_t v47 = (const void *)v11[4];
      }
      if (v46 >= 0) {
        size_t v48 = *((unsigned __int8 *)v11 + 55);
      }
      else {
        size_t v48 = v11[5];
      }
      if (v48 >= v14) {
        size_t v49 = v14;
      }
      else {
        size_t v49 = v48;
      }
      int v50 = memcmp(v42, v47, v49);
      if (v50)
      {
        if (v50 < 0) {
          break;
        }
        goto LABEL_107;
      }
      if (v14 >= v48)
      {
LABEL_107:
        int v51 = memcmp(v47, v42, v49);
        if (v51)
        {
          if ((v51 & 0x80000000) == 0) {
            goto LABEL_130;
          }
        }
        else if (v48 >= v14)
        {
          goto LABEL_130;
        }
        uint64_t v11 = v45[1];
        if (!v11)
        {
          uint64_t v10 = v45 + 1;
          goto LABEL_123;
        }
        continue;
      }
      break;
    }
    uint64_t v11 = *v45;
    if (*v45) {
      continue;
    }
    break;
  }
  uint64_t v10 = v45;
LABEL_123:
  int v52 = v163;
  char v53 = __p;
LABEL_124:
  int v54 = (uint64_t *)operator new(0x48uLL);
  int v55 = (std::string *)(v54 + 4);
  if (v53 < 0)
  {
    std::string::__init_copy_ctor_external(v55, (const std::string::value_type *)v52[1], v52[2]);
    unint64_t v57 = v167;
    v54[7] = v166;
    v54[8] = v57;
    if (v57) {
LABEL_126:
    }
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v57 + 8), 1uLL, memory_order_relaxed);
  }
  else
  {
    long long v56 = *(_OWORD *)v164;
    void v54[6] = *(void *)(v164 + 16);
    *(_OWORD *)&v55->__r_.__value_.__l.__data_ = v56;
    unint64_t v57 = v167;
    v54[7] = v159;
    v54[8] = v57;
    if (v57) {
      goto LABEL_126;
    }
  }
  uint64_t *v54 = 0;
  v54[1] = 0;
  v54[2] = (uint64_t)v45;
  *uint64_t v10 = v54;
  uint64_t v58 = **(void **)(v2 + 200);
  if (v58)
  {
    *(void *)(v2 + 200) = v58;
    int v54 = *v10;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v2 + 208), v54);
  ++*(void *)(v2 + 216);
LABEL_130:
  int v59 = *(_DWORD *)(v166 + 32);
  int v60 = *(_DWORD *)(v2 + 120);
  uint64_t v61 = *(NSObject **)(v2 + 40);
  BOOL v62 = os_log_type_enabled(v61, OS_LOG_TYPE_DEFAULT);
  if (!v60)
  {
    uint64_t v1 = v163;
    if (!v62)
    {
LABEL_145:
      uint64_t v70 = *(void *)(v2 + 160);
      if (v70)
      {
        (*(void (**)(uint64_t, uint64_t))(v70 + 16))(v70, 1);
        unint64_t v71 = *(const void **)(v2 + 160);
        *(void *)(v2 + 160) = 0;
        if (v71) {
          _Block_release(v71);
        }
        size_t v72 = *(NSObject **)(v2 + 40);
        if (os_log_type_enabled(v72, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(buf.__r_.__value_.__l.__data_) = 0;
          int v59 = 2;
          _os_log_impl(&dword_1C5767000, v72, OS_LOG_TYPE_DEFAULT, "#I Assertion held, but action will be deferred; acknowledging previous notification",
            (uint8_t *)&buf,
            2u);
          uint64_t v65 = *(void *)(v2 + 136);
          if (*((char *)v163 + 31) < 0) {
            goto LABEL_135;
          }
        }
        else
        {
          int v59 = 2;
          uint64_t v65 = *(void *)(v2 + 136);
          if (*((char *)v163 + 31) < 0) {
            goto LABEL_135;
          }
        }
        goto LABEL_153;
      }
      int v59 = 2;
      goto LABEL_152;
    }
    std::string::size_type v66 = v164;
    if (*((char *)v163 + 31) < 0)
    {
      std::string::size_type v66 = *(void *)v164;
      std::string::size_type v67 = v163[4];
      uint64_t v68 = *(int *)(v2 + 124);
      if (v68 <= 2) {
        goto LABEL_139;
      }
    }
    else
    {
      std::string::size_type v67 = v163[4];
      uint64_t v68 = *(int *)(v2 + 124);
      if (v68 <= 2)
      {
LABEL_139:
        dispatch_object_t v69 = off_1E6517DD8[v68];
LABEL_144:
        LODWORD(buf.__r_.__value_.__l.__data_) = 136316162;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v66;
        WORD2(buf.__r_.__value_.__r.__words[1]) = 2048;
        *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v67;
        HIWORD(buf.__r_.__value_.__r.__words[2]) = 1024;
        *(_DWORD *)dispatch_group_t group = v59;
        *(_WORD *)&group[4] = 1024;
        *(_DWORD *)&group[6] = 2;
        *(_WORD *)&group[10] = 2080;
        *(void *)&group[12] = v69;
        _os_log_impl(&dword_1C5767000, v61, OS_LOG_TYPE_DEFAULT, "#I Power assertion created for '%s' during sleep; Timeout (millisec): %llu, Status = %d, Override = %d; Sleep state: %s",
          (uint8_t *)&buf,
          0x2Cu);
        goto LABEL_145;
      }
    }
    dispatch_object_t v69 = "Unknown";
    goto LABEL_144;
  }
  uint64_t v1 = v163;
  if (!v62)
  {
LABEL_152:
    uint64_t v65 = *(void *)(v2 + 136);
    if (*((char *)v1 + 31) < 0) {
      goto LABEL_135;
    }
    goto LABEL_153;
  }
  std::string::size_type v63 = v164;
  if (*((char *)v163 + 31) < 0) {
    std::string::size_type v63 = *(void *)v164;
  }
  std::string::size_type v64 = v163[4];
  LODWORD(buf.__r_.__value_.__l.__data_) = 136315650;
  *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v63;
  WORD2(buf.__r_.__value_.__r.__words[1]) = 2048;
  *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v64;
  HIWORD(buf.__r_.__value_.__r.__words[2]) = 1024;
  *(_DWORD *)dispatch_group_t group = v59;
  _os_log_impl(&dword_1C5767000, v61, OS_LOG_TYPE_DEFAULT, "#I Power assertion created for '%s'; Timeout (millisec): %llu, Status = %d",
    (uint8_t *)&buf,
    0x1Cu);
  uint64_t v65 = *(void *)(v2 + 136);
  if (*((char *)v163 + 31) < 0)
  {
LABEL_135:
    std::string::__init_copy_ctor_external(&v165, (const std::string::value_type *)v1[1], v1[2]);
    goto LABEL_154;
  }
LABEL_153:
  long long v73 = *(_OWORD *)v164;
  v165.__r_.__value_.__r.__words[2] = *(void *)(v164 + 16);
  *(_OWORD *)&v165.__r_.__value_.__l.__data_ = v73;
LABEL_154:
  PowerStats::gotAssertion(v65, (uint64_t)&v165, v59);
  if ((SHIBYTE(v165.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (v59 == 2) {
      goto LABEL_156;
    }
LABEL_159:
    if (v1[4] < 1) {
      goto LABEL_315;
    }
    uint64_t v75 = *(std::__shared_weak_count **)(v2 + 80);
    if (!v75 || (uint64_t v76 = *(void *)(v2 + 72), (v77 = std::__shared_weak_count::lock(v75)) == 0)) {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    xpc_object_t v78 = v77;
    p_shared_weak_owners = &v77->__shared_weak_owners_;
    atomic_fetch_add_explicit(&v77->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v77->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
      std::__shared_weak_count::__release_weak(v78);
    }
    xpc_object_t v80 = v163;
    buf.__r_.__value_.__r.__words[0] = MEMORY[0x1E4F143A8];
    buf.__r_.__value_.__l.__size_ = 1174405120;
    buf.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZZN12PowerManager5State20createPowerAssertionENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS1_6chrono8durationIxNS1_5ratioILl1ELl1000EEEEEENKUlvE_clEv_block_invoke;
    *(void *)dispatch_group_t group = &__block_descriptor_tmp_39_3;
    *(void *)&group[8] = v2;
    *(void *)&group[16] = v76;
    v170 = v78;
    atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
    uint64_t v160 = v78;
    if (*((char *)v163 + 31) < 0)
    {
      std::string::__init_copy_ctor_external(&v171, (const std::string::value_type *)v163[1], v163[2]);
    }
    else
    {
      long long v81 = *(_OWORD *)v164;
      v171.__r_.__value_.__r.__words[2] = *(void *)(v164 + 16);
      *(_OWORD *)&v171.__r_.__value_.__l.__data_ = v81;
    }
    uint64_t v172 = v163[4];
    std::string v100 = (uint64_t *)operator new(0x10uLL);
    signed __int8 v101 = _Block_copy(&buf);
    *std::string v100 = (uint64_t)"Watchdog timed out";
    TelephonyBasebandWatchdogStart();
    if (v101) {
      _Block_release(v101);
    }
    __pa = v100;
    long long v102 = (uint64_t **)(v2 + 232);
    char v103 = *(uint64_t **)(v2 + 232);
    if (v103)
    {
      size_t v104 = *((unsigned __int8 *)v163 + 31);
      uint64_t v105 = (const void *)v163[1];
      size_t v106 = v163[2];
      if ((v104 & 0x80u) == 0) {
        xpc_object_t v107 = (const void *)v164;
      }
      else {
        xpc_object_t v107 = (const void *)v163[1];
      }
      if ((v104 & 0x80u) == 0) {
        size_t v108 = *((unsigned __int8 *)v163 + 31);
      }
      else {
        size_t v108 = v163[2];
      }
      uint64_t v109 = v102;
      uint64_t v110 = v103;
      while (2)
      {
        while (1)
        {
          int v111 = *((char *)v110 + 55);
          v112 = v111 >= 0 ? v110 + 4 : (uint64_t *)v110[4];
          size_t v113 = v111 >= 0 ? *((unsigned __int8 *)v110 + 55) : v110[5];
          size_t v114 = v108 >= v113 ? v113 : v108;
          int v115 = memcmp(v112, v107, v114);
          if (!v115) {
            break;
          }
          if ((v115 & 0x80000000) == 0) {
            goto LABEL_236;
          }
LABEL_222:
          uint64_t v110 = (uint64_t *)v110[1];
          if (!v110) {
            goto LABEL_237;
          }
        }
        if (v113 < v108) {
          goto LABEL_222;
        }
LABEL_236:
        uint64_t v109 = (uint64_t **)v110;
        uint64_t v110 = (uint64_t *)*v110;
        if (v110) {
          continue;
        }
        break;
      }
LABEL_237:
      uint64_t v116 = v102;
      if (v109 == v102) {
        goto LABEL_257;
      }
      int v117 = *((char *)v109 + 55);
      if (v117 >= 0) {
        size_t v118 = (uint64_t *)(v109 + 4);
      }
      else {
        size_t v118 = v109[4];
      }
      if (v117 >= 0) {
        size_t v119 = *((unsigned __int8 *)v109 + 55);
      }
      else {
        size_t v119 = (size_t)v109[5];
      }
      if (v119 >= v108) {
        size_t v120 = v108;
      }
      else {
        size_t v120 = v119;
      }
      int v121 = memcmp(v107, v118, v120);
      if (!v121)
      {
        if (v108 < v119) {
          goto LABEL_256;
        }
LABEL_249:
        v122 = v160;
        dispatch_object_t v123 = (uint64_t *)operator new(0x20uLL);
        *dispatch_object_t v123 = (uint64_t)&unk_1F20FA478;
        v123[1] = 0;
        v123[2] = 0;
        v123[3] = (uint64_t)__pa;
        uint64_t v124 = (std::__shared_weak_count *)v109[8];
        v109[7] = __pa;
        v109[8] = v123;
        if (v124 && !atomic_fetch_add(&v124->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
          std::__shared_weak_count::__release_weak(v124);
          if (SHIBYTE(v171.__r_.__value_.__r.__words[2]) < 0) {
            goto LABEL_339;
          }
          goto LABEL_312;
        }
        goto LABEL_311;
      }
      if ((v121 & 0x80000000) == 0) {
        goto LABEL_249;
      }
LABEL_256:
      uint64_t v116 = v109;
LABEL_257:
      unint64_t v125 = *v116;
      if (*(uint64_t ***)(v161 + 224) == v116)
      {
        v126 = v116;
        goto LABEL_306;
      }
      if (v125)
      {
        uint64_t v127 = *v116;
        do
        {
          v126 = (uint64_t **)v127;
          uint64_t v127 = (uint64_t *)v127[1];
        }
        while (v127);
        char v128 = v104;
LABEL_267:
        int v130 = *((char *)v126 + 55);
        if (v130 >= 0) {
          size_t v131 = (uint64_t *)(v126 + 4);
        }
        else {
          size_t v131 = v126[4];
        }
        if (v130 >= 0) {
          size_t v132 = *((unsigned __int8 *)v126 + 55);
        }
        else {
          size_t v132 = (size_t)v126[5];
        }
        char v156 = v128;
        if (v128 >= 0) {
          int v133 = (const void *)v164;
        }
        else {
          int v133 = v105;
        }
        if (v128 >= 0) {
          size_t v106 = v104;
        }
        if (v106 >= v132) {
          size_t v134 = v132;
        }
        else {
          size_t v134 = v106;
        }
        int v135 = memcmp(v131, v133, v134);
        if (v135)
        {
          if ((v135 & 0x80000000) == 0)
          {
LABEL_283:
            if (!v103)
            {
              unint64_t v136 = v102;
              goto LABEL_332;
            }
            while (1)
            {
              unint64_t v136 = (uint64_t **)v103;
              size_t v137 = *((unsigned __int8 *)v103 + 55);
              size_t v138 = v103[5];
              if ((v137 & 0x80u) == 0) {
                xpc_object_t v139 = v103 + 4;
              }
              else {
                xpc_object_t v139 = (const void *)v103[4];
              }
              if ((v137 & 0x80u) == 0) {
                size_t v140 = v137;
              }
              else {
                size_t v140 = v138;
              }
              if (v140 >= v106) {
                size_t v141 = v106;
              }
              else {
                size_t v141 = v140;
              }
              int v142 = memcmp(v133, v139, v141);
              if (v142)
              {
                if (v142 < 0) {
                  goto LABEL_285;
                }
LABEL_299:
                int v143 = memcmp(v139, v133, v141);
                if (v143)
                {
                  if ((v143 & 0x80000000) == 0) {
                    goto LABEL_310;
                  }
                }
                else if (v140 >= v106)
                {
                  goto LABEL_310;
                }
                char v103 = v136[1];
                if (!v103)
                {
                  long long v102 = v136 + 1;
                  goto LABEL_332;
                }
              }
              else
              {
                if (v106 >= v140) {
                  goto LABEL_299;
                }
LABEL_285:
                char v103 = *v136;
                if (!*v136)
                {
                  long long v102 = v136;
LABEL_332:
                  size_t v149 = v163;
                  char v150 = v156;
LABEL_333:
                  v122 = v160;
                  v151 = (char *)operator new(0x48uLL);
                  unint64_t v152 = (uint64_t *)v151;
                  if (v150 < 0)
                  {
                    std::string::__init_copy_ctor_external((std::string *)(v151 + 32), (const std::string::value_type *)v149[1], v149[2]);
                  }
                  else
                  {
                    long long v153 = *(_OWORD *)v164;
                    *((void *)v151 + 6) = *(void *)(v164 + 16);
                    *((_OWORD *)v151 + 2) = v153;
                  }
                  v152[7] = (uint64_t)__pa;
                  char v154 = operator new(0x20uLL);
                  *char v154 = &unk_1F20FA478;
                  v154[1] = 0;
                  v154[2] = 0;
                  v154[3] = __pa;
                  v152[8] = (uint64_t)v154;
                  *unint64_t v152 = 0;
                  v152[1] = 0;
                  v152[2] = (uint64_t)v136;
                  *long long v102 = v152;
                  uint64_t v155 = **(void **)(v161 + 224);
                  if (v155)
                  {
                    *(void *)(v161 + 224) = v155;
                    unint64_t v152 = *v102;
                  }
                  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v161 + 232), v152);
                  ++*(void *)(v161 + 240);
                  if (SHIBYTE(v171.__r_.__value_.__r.__words[2]) < 0)
                  {
LABEL_339:
                    operator delete(v171.__r_.__value_.__l.__data_);
                    unint64_t v144 = v170;
                    uint64_t v1 = v163;
                    if (!v170) {
                      goto LABEL_314;
                    }
LABEL_313:
                    std::__shared_weak_count::__release_weak(v144);
LABEL_314:
                    std::__shared_weak_count::__release_weak(v122);
                    goto LABEL_315;
                  }
LABEL_312:
                  unint64_t v144 = v170;
                  uint64_t v1 = v163;
                  if (v170) {
                    goto LABEL_313;
                  }
                  goto LABEL_314;
                }
              }
            }
          }
        }
        else if (v132 >= v106)
        {
          goto LABEL_283;
        }
LABEL_306:
        if (v125) {
          long long v102 = v126 + 1;
        }
        else {
          long long v102 = v116;
        }
        if (!*v102)
        {
          if (v125) {
            unint64_t v136 = v126;
          }
          else {
            unint64_t v136 = v116;
          }
          size_t v149 = v163;
          char v150 = *((unsigned char *)v163 + 31);
          goto LABEL_333;
        }
LABEL_310:
        TelephonyBasebandWatchdogStop();
        operator delete(__pa);
        v122 = v160;
LABEL_311:
        if (SHIBYTE(v171.__r_.__value_.__r.__words[2]) < 0) {
          goto LABEL_339;
        }
        goto LABEL_312;
      }
      xpc_object_t v80 = v163;
    }
    else
    {
      uint64_t v116 = (uint64_t **)(v2 + 232);
      if (*(uint64_t ***)(v2 + 224) == v102)
      {
        unint64_t v125 = 0;
        uint64_t v116 = (uint64_t **)(v2 + 232);
        v126 = (uint64_t **)(v2 + 232);
        goto LABEL_306;
      }
    }
    v126 = v116;
    do
    {
      dispatch_object_t v129 = (uint64_t *)v126;
      v126 = (uint64_t **)v126[2];
    }
    while (*v126 == v129);
    unint64_t v125 = 0;
    size_t v104 = *((unsigned __int8 *)v80 + 31);
    uint64_t v105 = (const void *)v80[1];
    size_t v106 = v80[2];
    char v128 = *((unsigned char *)v80 + 31);
    goto LABEL_267;
  }
  operator delete(v165.__r_.__value_.__l.__data_);
  if (v59 != 2) {
    goto LABEL_159;
  }
LABEL_156:
  if (*((char *)v1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&buf, (const std::string::value_type *)v1[1], v1[2]);
  }
  else
  {
    long long v74 = *(_OWORD *)v164;
    buf.__r_.__value_.__r.__words[2] = *(void *)(v164 + 16);
    *(_OWORD *)&buf.__r_.__value_.__l.__data_ = v74;
  }
  uint64_t v82 = v1[5];
  *(void *)dispatch_group_t group = v82;
  if (v82)
  {
    dispatch_retain(v82);
    if (*(void *)group) {
      dispatch_group_enter(*(dispatch_group_t *)group);
    }
  }
  xpc_object_t v83 = *(uint64_t **)(v2 + 256);
  if (!v83)
  {
    size_t v86 = (uint64_t **)(v2 + 256);
    unsigned int v87 = (uint64_t **)(v2 + 256);
    goto LABEL_198;
  }
  if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_std::string buf = &buf;
  }
  else {
    p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
  }
  if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(buf.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = buf.__r_.__value_.__l.__size_;
  }
  do
  {
    while (2)
    {
      unsigned int v87 = (uint64_t **)v83;
      size_t v90 = (const void *)v83[4];
      uint64_t v88 = v83 + 4;
      uint64_t v89 = v90;
      int v91 = *((char *)v88 + 23);
      if (v91 >= 0) {
        std::string v92 = v88;
      }
      else {
        std::string v92 = v89;
      }
      if (v91 >= 0) {
        size_t v93 = *((unsigned __int8 *)v88 + 23);
      }
      else {
        size_t v93 = v88[1];
      }
      if (v93 >= size) {
        size_t v94 = size;
      }
      else {
        size_t v94 = v93;
      }
      int v95 = memcmp(p_buf, v92, v94);
      if (v95)
      {
        if (v95 < 0) {
          goto LABEL_177;
        }
      }
      else if (size < v93)
      {
LABEL_177:
        xpc_object_t v83 = *v87;
        size_t v86 = v87;
        if (!*v87) {
          goto LABEL_198;
        }
        continue;
      }
      break;
    }
    int v96 = memcmp(v92, p_buf, v94);
    if (v96)
    {
      if ((v96 & 0x80000000) == 0) {
        goto LABEL_204;
      }
    }
    else if (v93 >= size)
    {
      goto LABEL_204;
    }
    xpc_object_t v83 = v87[1];
  }
  while (v83);
  size_t v86 = v87 + 1;
LABEL_198:
  uint64_t v97 = (uint64_t *)operator new(0x40uLL);
  uint64_t v98 = (std::string *)(v97 + 4);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v98, buf.__r_.__value_.__l.__data_, buf.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v98->__r_.__value_.__l.__data_ = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
    v97[6] = buf.__r_.__value_.__r.__words[2];
  }
  v97[7] = *(void *)group;
  *(void *)dispatch_group_t group = 0;
  *uint64_t v97 = 0;
  v97[1] = 0;
  v97[2] = (uint64_t)v87;
  *size_t v86 = v97;
  uint64_t v99 = **(void **)(v2 + 248);
  if (v99)
  {
    *(void *)(v2 + 248) = v99;
    uint64_t v97 = *v86;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v2 + 256), v97);
  ++*(void *)(v2 + 264);
LABEL_204:
  if (*(void *)group)
  {
    dispatch_group_leave(*(dispatch_group_t *)group);
    if (*(void *)group) {
      dispatch_release(*(dispatch_object_t *)group);
    }
  }
  uint64_t v1 = v163;
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf.__r_.__value_.__l.__data_);
  }
LABEL_315:
  size_t v145 = (std::__shared_weak_count *)v167;
  if (v167 && !atomic_fetch_add((atomic_ullong *volatile)(v167 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v145->__on_zero_shared)(v145);
    std::__shared_weak_count::__release_weak(v145);
  }
  unint64_t v146 = v1[5];
  if (v146)
  {
    dispatch_group_leave(v146);
    v147 = v1[5];
    if (v147) {
      dispatch_release(v147);
    }
  }
  if (*((char *)v1 + 31) < 0) {
    operator delete(*(void **)v164);
  }
  operator delete(v1);
  unint64_t v148 = (std::__shared_weak_count *)a1[2];
  if (v148 && !atomic_fetch_add(&v148->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v148->__on_zero_shared)(v148);
    std::__shared_weak_count::__release_weak(v148);
  }
  operator delete(a1);
}

void sub_1C58A2578(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, std::__shared_weak_count *a12, uint64_t a13, void *a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,dispatch_group_t group,uint64_t a30,uint64_t a31,std::__shared_weak_count *a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
}

void sub_1C58A26AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, void **a16)
{
  __cxa_end_catch();
  pthread_mutex_unlock(&ctu::Singleton<ctu::power::assertion,ctu::power::assertion,ctu::PthreadMutexGuardPolicy<ctu::power::assertion>>::sInstance);
  size_t v16 = *(NSObject **)(a15 + 40);
  if (v16)
  {
    dispatch_group_leave(v16);
    int v17 = *(NSObject **)(a15 + 40);
    if (v17) {
      dispatch_release(v17);
    }
  }
  if (*(char *)(a15 + 31) < 0) {
    operator delete(*a16);
  }
  operator delete((void *)a15);
  size_t v18 = (std::__shared_weak_count *)a14[2];
  if (v18 && !atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
  operator delete(a14);
  JUMPOUT(0x1C58A2850);
}

void sub_1C58A26E0()
{
}

void sub_1C58A26EC()
{
}

void sub_1C58A26F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    JUMPOUT(0x1C58A2704);
  }
  JUMPOUT(0x1C58A2708);
}

void sub_1C58A275C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, void **a16)
{
  if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
  }
  int v17 = *(NSObject **)(a15 + 40);
  if (v17)
  {
    dispatch_group_leave(v17);
    size_t v18 = *(NSObject **)(a15 + 40);
    if (v18) {
      dispatch_release(v18);
    }
  }
  if (*(char *)(a15 + 31) < 0) {
    operator delete(*a16);
  }
  operator delete((void *)a15);
  int v19 = (std::__shared_weak_count *)a14[2];
  if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
  operator delete(a14);
  JUMPOUT(0x1C58A2850);
}

void sub_1C58A27A8(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void ___ZZN12PowerManager5State20createPowerAssertionENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS1_6chrono8durationIxNS1_5ratioILl1ELl1000EEEEEENKUlvE_clEv_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = std::__shared_weak_count::lock(v2);
    int v19 = v4;
    if (v4)
    {
      uint64_t v5 = *(void **)(a1 + 40);
      size_t v18 = v5;
      if (!v5)
      {
        uint64_t v6 = v4;
LABEL_19:
        if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
        return;
      }
      uint64_t v15 = v3;
      if (*(char *)(a1 + 79) < 0) {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a1 + 56), *(void *)(a1 + 64));
      }
      else {
        std::string __p = *(std::string *)(a1 + 56);
      }
      uint64_t v17 = *(void *)(a1 + 80);
      uint64_t v7 = (std::__shared_weak_count *)v5[10];
      if (!v7 || (v8 = v5[9], (unint64_t v9 = std::__shared_weak_count::lock(v7)) == 0)) {
        std::__throw_bad_weak_ptr[abi:ne180100]();
      }
      uint64_t v10 = v9;
      uint64_t v11 = operator new(0x28uLL);
      *uint64_t v11 = v15;
      size_t v12 = (std::string *)(v11 + 1);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(v12, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
      }
      else
      {
        *(_OWORD *)&v12->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        v11[3] = *((void *)&__p.__r_.__value_.__l + 2);
      }
      v11[4] = v17;
      int v13 = v5[11];
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      size_t v14 = operator new(0x18uLL);
      void *v14 = v11;
      v14[1] = v8;
      v14[2] = v10;
      dispatch_async_f(v13, v14, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN12PowerManager5StateEE15execute_wrappedIZZZNS4_20createPowerAssertionENSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEENS7_6chrono8durationIxNS7_5ratioILl1ELl1000EEEEEENKUlvE_clEvEUb_EUlvE_EEvOT_EUlvE_EEvP16dispatch_queue_sNS7_10unique_ptrISL_NS7_14default_deleteISL_EEEEENUlPvE_8__invokeESU_);
      if (atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_15;
        }
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
        if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_15:
          uint64_t v6 = v19;
          if (!v19) {
            return;
          }
          goto LABEL_19;
        }
      }
      operator delete(__p.__r_.__value_.__l.__data_);
      uint64_t v6 = v19;
      if (!v19) {
        return;
      }
      goto LABEL_19;
    }
  }
}

void sub_1C58A2A54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void __copy_helper_block_e8_40c45_ZTSNSt3__18weak_ptrIN12PowerManager5StateEEE56c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(void *a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 48);
  a1[5] = *(void *)(a2 + 40);
  a1[6] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = (std::string *)(a1 + 7);
  if (*(char *)(a2 + 79) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)(a2 + 56), *(void *)(a2 + 64));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 56);
    a1[9] = *(void *)(a2 + 72);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  }
}

void sub_1C58A2AE0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 48);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_40c45_ZTSNSt3__18weak_ptrIN12PowerManager5StateEEE56c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1)
{
  if (*(char *)(a1 + 79) < 0)
  {
    operator delete(*(void **)(a1 + 56));
    uint64_t v2 = *(std::__shared_weak_count **)(a1 + 48);
    if (!v2) {
      return;
    }
  }
  else
  {
    uint64_t v2 = *(std::__shared_weak_count **)(a1 + 48);
    if (!v2) {
      return;
    }
  }

  std::__shared_weak_count::__release_weak(v2);
}

void **std::unique_ptr<support::misc::Watchdog>::~unique_ptr[abi:ne180100](void **a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    TelephonyBasebandWatchdogStop();
    operator delete(v2);
  }
  return a1;
}

void std::__shared_ptr_pointer<ctu::power::assertion *,std::shared_ptr<ctu::power::assertion> ctu::SharedSynchronizable<ctu::power::assertion>::make_shared_ptr<ctu::power::assertion>(ctu::power::assertion*)::{lambda(ctu::power::assertion *)#1},std::allocator<ctu::power::assertion>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<ctu::power::assertion *,std::shared_ptr<ctu::power::assertion> ctu::SharedSynchronizable<ctu::power::assertion>::make_shared_ptr<ctu::power::assertion>(ctu::power::assertion*)::{lambda(ctu::power::assertion *)#1},std::allocator<ctu::power::assertion>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<ctu::power::assertion *,std::shared_ptr<ctu::power::assertion> ctu::SharedSynchronizable<ctu::power::assertion>::make_shared_ptr<ctu::power::assertion>(ctu::power::assertion*)::{lambda(ctu::power::assertion *)#1},std::allocator<ctu::power::assertion>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableINS_5power9assertionEE15make_shared_ptrIS2_EENSt3__110shared_ptrIT_EEPS7_EUlPS2_E_") {
    return a1 + 24;
  }
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableINS_5power9assertionEE15make_shared_ptrIS2_EENSt3__110shared"
                                "_ptrIT_EEPS7_EUlPS2_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableINS_5power9assertionEE15make_shared_ptrIS2_EENSt3__110shared_ptrIT_EEPS7_EUlPS2_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableINS_5power9assertionEE15make_shared_ptrIS2_EENSt3__110shared_ptrIT_EEPS7_EUlPS2_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24; {
  return 0;
  }
}

void std::shared_ptr<ctu::power::assertion> ctu::SharedSynchronizable<ctu::power::assertion>::make_shared_ptr<ctu::power::assertion>(ctu::power::assertion*)::{lambda(ctu::power::assertion*)#1}::operator() const(ctu::power::assertion*)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,std::weak_ptr<ctu::power::assertion::HandleRaw>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::weak_ptr<ctu::power::assertion::HandleRaw>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::weak_ptr<ctu::power::assertion::HandleRaw>>>>::destroy(*(char **)(a1 + 40));
    uint64_t v2 = *(NSObject **)(a1 + 24);
    if (v2) {
      dispatch_release(v2);
    }
    unint64_t v3 = *(NSObject **)(a1 + 16);
    if (v3) {
      dispatch_release(v3);
    }
    uint64_t v4 = *(std::__shared_weak_count **)(a1 + 8);
    if (v4) {
      std::__shared_weak_count::__release_weak(v4);
    }
    operator delete((void *)a1);
  }
}

void std::__tree<std::__value_type<std::string,std::weak_ptr<ctu::power::assertion::HandleRaw>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::weak_ptr<ctu::power::assertion::HandleRaw>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::weak_ptr<ctu::power::assertion::HandleRaw>>>>::destroy(char *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,std::weak_ptr<ctu::power::assertion::HandleRaw>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::weak_ptr<ctu::power::assertion::HandleRaw>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::weak_ptr<ctu::power::assertion::HandleRaw>>>>::destroy(*(void *)a1);
    std::__tree<std::__value_type<std::string,std::weak_ptr<ctu::power::assertion::HandleRaw>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::weak_ptr<ctu::power::assertion::HandleRaw>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::weak_ptr<ctu::power::assertion::HandleRaw>>>>::destroy(*((void *)a1 + 1));
    uint64_t v2 = (std::__shared_weak_count *)*((void *)a1 + 8);
    if (v2) {
      std::__shared_weak_count::__release_weak(v2);
    }
    if (a1[55] < 0)
    {
      operator delete(*((void **)a1 + 4));
      unint64_t v3 = a1;
    }
    else
    {
      unint64_t v3 = a1;
    }
    operator delete(v3);
  }
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN12PowerManager5StateEE15execute_wrappedIZZZNS4_20createPowerAssertionENSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEENS7_6chrono8durationIxNS7_5ratioILl1ELl1000EEEEEENKUlvE_clEvEUb_EUlvE_EEvOT_EUlvE_EEvP16dispatch_queue_sNS7_10unique_ptrISL_NS7_14default_deleteISL_EEEEENUlPvE_8__invokeESU_(void ***a1)
{
  uint64_t v64 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *a1;
  unint64_t v3 = **a1;
  unint64_t v62 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v61[7] = v4;
  v61[8] = v4;
  v61[5] = v4;
  v61[6] = v4;
  v61[3] = v4;
  v61[4] = v4;
  v61[1] = v4;
  v61[2] = v4;
  long long v60 = v4;
  v61[0] = v4;
  *(_OWORD *)std::string __p = v4;
  long long v59 = v4;
  long long v56 = v4;
  long long v57 = v4;
  long long v54 = v4;
  long long v55 = v4;
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v54);
  long long v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v54, (uint64_t)"Power assertion watchdog fired for '", 36);
  uint64_t v6 = v2 + 1;
  int v7 = *((char *)v2 + 31);
  if (v7 >= 0) {
    uint64_t v8 = (uint64_t)(v2 + 1);
  }
  else {
    uint64_t v8 = (uint64_t)v2[1];
  }
  if (v7 >= 0) {
    uint64_t v9 = *((unsigned __int8 *)v2 + 31);
  }
  else {
    uint64_t v9 = (uint64_t)v2[2];
  }
  uint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, v8, v9);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"'; Timeout (millisec): ",
    23);
  std::ostream::operator<<();
  if (*((char *)v2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v53, (const std::string::value_type *)v2[1], (std::string::size_type)v2[2]);
  }
  else
  {
    long long v11 = *(_OWORD *)v6;
    v53.__r_.__value_.__r.__words[2] = (std::string::size_type)v2[3];
    *(_OWORD *)&v53.__r_.__value_.__l.__data_ = v11;
  }
  PowerManager::State::releasePowerAssertion_sync(v3, (const void **)&v53.__r_.__value_.__l.__data_);
  if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v53.__r_.__value_.__l.__data_);
  }
  if (TelephonyUtilIsInternalBuild())
  {
    size_t v12 = (std::__shared_weak_count *)v3[35];
    if (!v12) {
      goto LABEL_89;
    }
    int v13 = std::__shared_weak_count::lock(v12);
    if (!v13) {
      goto LABEL_89;
    }
    size_t v14 = v13;
    uint64_t v15 = v3[34];
    if (!v15) {
      goto LABEL_69;
    }
    xpc_object_t v16 = xpc_dictionary_create(0, 0, 0);
    if (v16 || (xpc_object_t v16 = xpc_null_create()) != 0)
    {
      if (MEMORY[0x1C8792D30](v16) == MEMORY[0x1E4F14590])
      {
        xpc_retain(v16);
        xpc_object_t v17 = v16;
      }
      else
      {
        xpc_object_t v17 = xpc_null_create();
      }
    }
    else
    {
      xpc_object_t v17 = xpc_null_create();
      xpc_object_t v16 = 0;
    }
    xpc_release(v16);
    if ((BYTE8(v60) & 0x10) != 0)
    {
      uint64_t v23 = v60;
      if ((unint64_t)v60 < *((void *)&v57 + 1))
      {
        *(void *)&long long v60 = *((void *)&v57 + 1);
        uint64_t v23 = *((void *)&v57 + 1);
      }
      uint64_t v24 = (const void *)v57;
      size_t v21 = v23 - v57;
      if ((unint64_t)(v23 - v57) > 0x7FFFFFFFFFFFFFF7) {
        goto LABEL_72;
      }
    }
    else
    {
      if ((BYTE8(v60) & 8) == 0)
      {
        size_t v21 = 0;
        HIBYTE(v52) = 0;
        p_dst = (void **)&__dst;
        goto LABEL_39;
      }
      uint64_t v24 = (const void *)*((void *)&v55 + 1);
      size_t v21 = *((void *)&v56 + 1) - *((void *)&v55 + 1);
      if (*((void *)&v56 + 1) - *((void *)&v55 + 1) > 0x7FFFFFFFFFFFFFF7uLL) {
LABEL_72:
      }
        std::string::__throw_length_error[abi:ne180100]();
    }
    if (v21 >= 0x17)
    {
      uint64_t v25 = (v21 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v21 | 7) != 0x17) {
        uint64_t v25 = v21 | 7;
      }
      uint64_t v26 = v25 + 1;
      p_dst = (void **)operator new(v25 + 1);
      size_t v51 = v21;
      int64_t v52 = v26 | 0x8000000000000000;
      std::string __dst = p_dst;
    }
    else
    {
      HIBYTE(v52) = v21;
      p_dst = (void **)&__dst;
      if (!v21)
      {
LABEL_39:
        *((unsigned char *)p_dst + v21) = 0;
        if (v52 >= 0) {
          size_t v27 = (const char *)&__dst;
        }
        else {
          size_t v27 = (const char *)__dst;
        }
        xpc_object_t v28 = xpc_string_create(v27);
        if (!v28) {
          xpc_object_t v28 = xpc_null_create();
        }
        xpc_dictionary_set_value(v17, (const char *)*MEMORY[0x1E4F4CA98], v28);
        xpc_object_t v29 = xpc_null_create();
        xpc_release(v28);
        xpc_release(v29);
        if (SHIBYTE(v52) < 0) {
          operator delete(__dst);
        }
        xpc_object_t v30 = xpc_int64_create(0);
        if (!v30) {
          xpc_object_t v30 = xpc_null_create();
        }
        xpc_dictionary_set_value(v17, (const char *)*MEMORY[0x1E4F4C180], v30);
        xpc_object_t v31 = xpc_null_create();
        xpc_release(v30);
        xpc_release(v31);
        Timestamp::Timestamp((Timestamp *)buf);
        Timestamp::asString(v32, 0, 9, &__dst);
        if (v52 >= 0) {
          uint64_t v33 = (const char *)&__dst;
        }
        else {
          uint64_t v33 = (const char *)__dst;
        }
        xpc_object_t v34 = xpc_string_create(v33);
        if (!v34) {
          xpc_object_t v34 = xpc_null_create();
        }
        xpc_dictionary_set_value(v17, (const char *)*MEMORY[0x1E4F4C4C8], v34);
        xpc_object_t v35 = xpc_null_create();
        xpc_release(v34);
        xpc_release(v35);
        if (SHIBYTE(v52) < 0) {
          operator delete(__dst);
        }
        std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)buf, *((void **)&buf[0] + 1));
        uint64_t v36 = (const void *)*MEMORY[0x1E4F4C748];
        size_t v37 = strlen((const char *)*MEMORY[0x1E4F4C748]);
        if (v37 > 0x7FFFFFFFFFFFFFF7) {
          std::string::__throw_length_error[abi:ne180100]();
        }
        size_t v38 = v37;
        if (v37 >= 0x17)
        {
          uint64_t v40 = (v37 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v37 | 7) != 0x17) {
            uint64_t v40 = v37 | 7;
          }
          uint64_t v41 = v40 + 1;
          int v39 = (void **)operator new(v40 + 1);
          size_t v51 = v38;
          int64_t v52 = v41 | 0x8000000000000000;
          std::string __dst = v39;
        }
        else
        {
          HIBYTE(v52) = v37;
          int v39 = (void **)&__dst;
          if (!v37) {
            goto LABEL_63;
          }
        }
        memmove(v39, v36, v38);
LABEL_63:
        *((unsigned char *)v39 + v38) = 0;
        *(void *)&buf[0] = v17;
        if (v17) {
          xpc_retain(v17);
        }
        else {
          *(void *)&buf[0] = xpc_null_create();
        }
        size_t v49 = 0;
        ServiceManager::runCommand(v15, (uint64_t)&__dst, (void **)buf, &v49);
        xpc_release(*(xpc_object_t *)&buf[0]);
        *(void *)&buf[0] = 0;
        if (SHIBYTE(v52) < 0) {
          operator delete(__dst);
        }
        xpc_release(v17);
LABEL_69:
        if (!atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
        goto LABEL_89;
      }
    }
    memmove(p_dst, v24, v21);
    goto LABEL_39;
  }
  size_t v18 = v3[5];
  if (!os_log_type_enabled(v18, OS_LOG_TYPE_FAULT)) {
    goto LABEL_89;
  }
  if ((BYTE8(v60) & 0x10) != 0)
  {
    uint64_t v42 = v60;
    if ((unint64_t)v60 < *((void *)&v57 + 1))
    {
      *(void *)&long long v60 = *((void *)&v57 + 1);
      uint64_t v42 = *((void *)&v57 + 1);
    }
    size_t v43 = (const void **)&v57;
  }
  else
  {
    if ((BYTE8(v60) & 8) == 0)
    {
      size_t v19 = 0;
      HIBYTE(v52) = 0;
      uint64_t v20 = (void **)&__dst;
      goto LABEL_85;
    }
    size_t v43 = (const void **)&v55 + 1;
    uint64_t v42 = *((void *)&v56 + 1);
  }
  int v44 = *v43;
  size_t v19 = v42 - (void)*v43;
  if (v19 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v19 >= 0x17)
  {
    uint64_t v45 = (v19 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v19 | 7) != 0x17) {
      uint64_t v45 = v19 | 7;
    }
    uint64_t v46 = v45 + 1;
    uint64_t v20 = (void **)operator new(v45 + 1);
    size_t v51 = v19;
    int64_t v52 = v46 | 0x8000000000000000;
    std::string __dst = v20;
  }
  else
  {
    HIBYTE(v52) = v42 - *(unsigned char *)v43;
    uint64_t v20 = (void **)&__dst;
    if (!v19) {
      goto LABEL_85;
    }
  }
  memmove(v20, v44, v19);
LABEL_85:
  *((unsigned char *)v20 + v19) = 0;
  uint64_t v47 = (void **)&__dst;
  if (v52 < 0) {
    uint64_t v47 = __dst;
  }
  LODWORD(buf[0]) = 136315138;
  *(void *)((char *)buf + 4) = v47;
  _os_log_fault_impl(&dword_1C5767000, v18, OS_LOG_TYPE_FAULT, "%s", (uint8_t *)buf, 0xCu);
  if (SHIBYTE(v52) < 0) {
    operator delete(__dst);
  }
LABEL_89:
  *(void *)&long long v54 = *MEMORY[0x1E4FBA418];
  *(void *)((char *)&v54 + *(void *)(v54 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  *((void *)&v54 + 1) = MEMORY[0x1E4FBA470] + 16;
  if (SHIBYTE(v59) < 0) {
    operator delete(__p[1]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1C8791FB0](v61);
  if (*((char *)v2 + 31) < 0) {
    operator delete(*v6);
  }
  operator delete(v2);
  size_t v48 = (std::__shared_weak_count *)a1[2];
  if (v48 && !atomic_fetch_add(&v48->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
    std::__shared_weak_count::__release_weak(v48);
  }
  operator delete(a1);
}

void sub_1C58A34D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void PowerManager::State::releasePowerAssertion_sync(void *a1, const void **a2)
{
  uint64_t v2 = a2;
  uint64_t v56 = *MEMORY[0x1E4F143B8];
  long long v5 = a1 + 26;
  long long v4 = (uint64_t *)a1[26];
  if (!v4) {
    goto LABEL_40;
  }
  char v6 = *((unsigned char *)a2 + 23);
  if (v6 >= 0) {
    int v7 = a2;
  }
  else {
    int v7 = *a2;
  }
  if (v6 >= 0) {
    size_t v8 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v8 = (size_t)a2[1];
  }
  uint64_t v9 = a1 + 26;
  uint64_t v10 = (uint64_t *)a1[26];
  do
  {
    while (1)
    {
      int v11 = *((char *)v10 + 55);
      size_t v12 = v11 >= 0 ? v10 + 4 : (uint64_t *)v10[4];
      size_t v13 = v11 >= 0 ? *((unsigned __int8 *)v10 + 55) : v10[5];
      size_t v14 = v8 >= v13 ? v13 : v8;
      int v15 = memcmp(v12, v7, v14);
      if (v15) {
        break;
      }
      if (v13 >= v8) {
        goto LABEL_23;
      }
LABEL_9:
      uint64_t v10 = (uint64_t *)v10[1];
      if (!v10) {
        goto LABEL_24;
      }
    }
    if (v15 < 0) {
      goto LABEL_9;
    }
LABEL_23:
    uint64_t v9 = v10;
    uint64_t v10 = (uint64_t *)*v10;
  }
  while (v10);
LABEL_24:
  if (v9 == v5) {
    goto LABEL_40;
  }
  int v16 = *((char *)v9 + 55);
  if (v16 >= 0) {
    xpc_object_t v17 = v9 + 4;
  }
  else {
    xpc_object_t v17 = (const void *)v9[4];
  }
  if (v16 >= 0) {
    size_t v18 = *((unsigned __int8 *)v9 + 55);
  }
  else {
    size_t v18 = v9[5];
  }
  if (v18 >= v8) {
    size_t v19 = v8;
  }
  else {
    size_t v19 = v18;
  }
  int v20 = memcmp(v7, v17, v19);
  if (v20)
  {
    if ((v20 & 0x80000000) == 0) {
      goto LABEL_36;
    }
LABEL_40:
    uint64_t v23 = a1[5];
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v24 = v2;
      if (*((char *)v2 + 23) < 0) {
        uint64_t v24 = (const void **)*v2;
      }
      int v54 = 136315138;
      long long v55 = v24;
      uint64_t v25 = "#I Attempt to release non-existent power assertion '%s'";
LABEL_58:
      _os_log_impl(&dword_1C5767000, v23, OS_LOG_TYPE_DEFAULT, v25, (uint8_t *)&v54, 0xCu);
    }
  }
  else
  {
    if (v8 < v18) {
      goto LABEL_40;
    }
LABEL_36:
    size_t v21 = (void *)v9[1];
    if (v21)
    {
      do
      {
        size_t v22 = v21;
        size_t v21 = (void *)*v21;
      }
      while (v21);
    }
    else
    {
      uint64_t v26 = v9;
      do
      {
        size_t v22 = (void *)v26[2];
        BOOL v27 = *v22 == (void)v26;
        uint64_t v26 = v22;
      }
      while (!v27);
    }
    if ((void *)a1[25] == v9) {
      a1[25] = v22;
    }
    --a1[27];
    std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v4, v9);
    xpc_object_t v28 = (std::__shared_weak_count *)v9[8];
    if (v28 && !atomic_fetch_add(&v28->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
    if (*((char *)v9 + 55) < 0) {
      operator delete((void *)v9[4]);
    }
    operator delete(v9);
    uint64_t v23 = a1[5];
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
    {
      xpc_object_t v29 = v2;
      if (*((char *)v2 + 23) < 0) {
        xpc_object_t v29 = (const void **)*v2;
      }
      int v54 = 136315138;
      long long v55 = v29;
      uint64_t v25 = "#I Released power assertion '%s'";
      goto LABEL_58;
    }
  }
  xpc_object_t v30 = (uint64_t *)a1[29];
  if (!v30) {
    goto LABEL_113;
  }
  char v31 = *((unsigned char *)v2 + 23);
  if (v31 >= 0) {
    uint64_t v32 = v2;
  }
  else {
    uint64_t v32 = *v2;
  }
  if (v31 >= 0) {
    size_t v33 = *((unsigned __int8 *)v2 + 23);
  }
  else {
    size_t v33 = (size_t)v2[1];
  }
  xpc_object_t v34 = a1 + 29;
  xpc_object_t v35 = (uint64_t *)a1[29];
  while (2)
  {
    while (2)
    {
      int v36 = *((char *)v35 + 55);
      if (v36 >= 0) {
        size_t v37 = v35 + 4;
      }
      else {
        size_t v37 = (const void *)v35[4];
      }
      if (v36 >= 0) {
        size_t v38 = *((unsigned __int8 *)v35 + 55);
      }
      else {
        size_t v38 = v35[5];
      }
      if (v33 >= v38) {
        size_t v39 = v38;
      }
      else {
        size_t v39 = v33;
      }
      int v40 = memcmp(v37, v32, v39);
      if (v40)
      {
        if ((v40 & 0x80000000) == 0) {
          break;
        }
        goto LABEL_67;
      }
      if (v38 < v33)
      {
LABEL_67:
        xpc_object_t v35 = (uint64_t *)v35[1];
        if (!v35) {
          goto LABEL_82;
        }
        continue;
      }
      break;
    }
    xpc_object_t v34 = v35;
    xpc_object_t v35 = (uint64_t *)*v35;
    if (v35) {
      continue;
    }
    break;
  }
LABEL_82:
  if (v34 != a1 + 29)
  {
    int v41 = *((char *)v34 + 55);
    if (v41 >= 0) {
      uint64_t v42 = v34 + 4;
    }
    else {
      uint64_t v42 = (const void *)v34[4];
    }
    if (v41 >= 0) {
      size_t v43 = *((unsigned __int8 *)v34 + 55);
    }
    else {
      size_t v43 = v34[5];
    }
    if (v43 >= v33) {
      size_t v44 = v33;
    }
    else {
      size_t v44 = v43;
    }
    int v45 = memcmp(v32, v42, v44);
    if (v45)
    {
      if (v45 < 0) {
        goto LABEL_113;
      }
LABEL_96:
      uint64_t v46 = (void *)v34[1];
      if (v46)
      {
        do
        {
          uint64_t v47 = v46;
          uint64_t v46 = (void *)*v46;
        }
        while (v46);
      }
      else
      {
        size_t v48 = v34;
        do
        {
          uint64_t v47 = (void *)v48[2];
          BOOL v27 = *v47 == (void)v48;
          size_t v48 = v47;
        }
        while (!v27);
      }
      if ((void *)a1[28] == v34) {
        a1[28] = v47;
      }
      --a1[30];
      std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v30, v34);
      size_t v49 = (std::__shared_weak_count *)v34[8];
      if (v49 && !atomic_fetch_add(&v49->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
        std::__shared_weak_count::__release_weak(v49);
      }
      if (*((char *)v34 + 55) < 0) {
        operator delete((void *)v34[4]);
      }
      operator delete(v34);
      int v50 = a1[5];
      if (os_log_type_enabled(v50, OS_LOG_TYPE_DEFAULT))
      {
        if (*((char *)v2 + 23) < 0) {
          uint64_t v2 = (const void **)*v2;
        }
        int v54 = 136315138;
        long long v55 = v2;
        _os_log_impl(&dword_1C5767000, v50, OS_LOG_TYPE_DEFAULT, "#I Clear watchdog timer for power assertion '%s'", (uint8_t *)&v54, 0xCu);
      }
    }
    else if (v33 >= v43)
    {
      goto LABEL_96;
    }
  }
LABEL_113:
  if (!a1[27])
  {
    *(unsigned char *)(a1[17] + 88) = 0;
    uint64_t v51 = a1[20];
    if (v51)
    {
      int64_t v52 = a1[5];
      if (os_log_type_enabled(v52, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v54) = 0;
        _os_log_impl(&dword_1C5767000, v52, OS_LOG_TYPE_DEFAULT, "#I No more assertions held, acknowledging previous notification", (uint8_t *)&v54, 2u);
        uint64_t v51 = a1[20];
      }
      (*(void (**)(uint64_t, uint64_t))(v51 + 16))(v51, 1);
      std::string v53 = (const void *)a1[20];
      a1[20] = 0;
      if (v53) {
        _Block_release(v53);
      }
    }
  }
}

void sub_1C58A3C54(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<support::misc::Watchdog  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<support::misc::Watchdog  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 24);
  if (v1)
  {
    TelephonyBasebandWatchdogStop();
    operator delete(v1);
  }
}

uint64_t std::__shared_ptr_pointer<support::misc::Watchdog  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x80000001C59A3764) {
    return a1 + 24;
  }
  if (((v3 & 0x80000001C59A3764 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000001C59A3764)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001C59A3764 & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 24;
  }
  return 0;
}

void dispatch::async<void ctu::SharedSynchronizable<PowerManager::State>::execute_wrapped<PowerManager::State::releasePowerAssertion(std::string)::{lambda(void)#1}>(PowerManager::State::releasePowerAssertion(std::string)::{lambda(void)#1} &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<PowerManager::State::releasePowerAssertion(std::string)::{lambda(void)#1},std::default_delete<PowerManager::State::releasePowerAssertion(std::string)::{lambda(void)#1}>>)::{lambda(void *)#1}::__invoke(void *a1)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = **(void ***)a1;
  long long v4 = (void **)(*(void *)a1 + 8);
  if (*(char *)(*(void *)a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v7, (const std::string::value_type *)v2[1], v2[2]);
  }
  else
  {
    long long v5 = *(_OWORD *)v4;
    v7.__r_.__value_.__r.__words[2] = v2[3];
    *(_OWORD *)&v7.__r_.__value_.__l.__data_ = v5;
  }
  PowerManager::State::releasePowerAssertion_sync(v3, (const void **)&v7.__r_.__value_.__l.__data_);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v7.__r_.__value_.__l.__data_);
    if ((*((char *)v2 + 31) & 0x80000000) == 0)
    {
LABEL_6:
      operator delete(v2);
      char v6 = (std::__shared_weak_count *)*((void *)a1 + 2);
      if (!v6) {
        goto LABEL_12;
      }
      goto LABEL_10;
    }
  }
  else if ((*((char *)v2 + 31) & 0x80000000) == 0)
  {
    goto LABEL_6;
  }
  operator delete(*v4);
  operator delete(v2);
  char v6 = (std::__shared_weak_count *)*((void *)a1 + 2);
  if (!v6) {
    goto LABEL_12;
  }
LABEL_10:
  if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
LABEL_12:

  operator delete(a1);
}

void sub_1C58A3E74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  std::unique_ptr<PowerManager::State::releasePowerAssertion(std::string)::{lambda(void)#1},std::default_delete<PowerManager::State::releasePowerAssertion(std::string)::{lambda(void)#1}>>::~unique_ptr[abi:ne180100](&a10);
  size_t v18 = (std::__shared_weak_count *)v16[2];
  if (v18)
  {
    if (!atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  operator delete(v16);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<PowerManager::State::releasePowerAssertion(std::string)::{lambda(void)#1},std::default_delete<PowerManager::State::releasePowerAssertion(std::string)::{lambda(void)#1}>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*(char *)(v2 + 31) < 0) {
      operator delete(*(void **)(v2 + 8));
    }
    operator delete((void *)v2);
  }
  return a1;
}

void ___ZN12PowerManager5State10initializeEv_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(std::__shared_weak_count **)(v1 + 80);
  if (!v2 || (v3 = *(void *)(v1 + 72), (long long v4 = std::__shared_weak_count::lock(v2)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  long long v5 = v4;
  atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    uint64_t v67 = 0;
    uint64_t v68 = 0;
    char v6 = *(std::__shared_weak_count **)(v1 + 280);
    if (!v6) {
      goto LABEL_90;
    }
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v5);
    uint64_t v67 = 0;
    uint64_t v68 = 0;
    char v6 = *(std::__shared_weak_count **)(v1 + 280);
    if (!v6) {
      goto LABEL_90;
    }
  }
  uint64_t v68 = std::__shared_weak_count::lock(v6);
  if (!v68) {
    goto LABEL_93;
  }
  uint64_t v7 = *(void *)(v1 + 272);
  uint64_t v67 = v7;
  if (v7)
  {
    size_t v8 = abm::kCommandSetPowerDownMessageList[0];
    size_t v9 = strlen(abm::kCommandSetPowerDownMessageList[0]);
    if (v9 > 0x7FFFFFFFFFFFFFF7) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    size_t v10 = v9;
    if (v9 >= 0x17)
    {
      uint64_t v12 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v9 | 7) != 0x17) {
        uint64_t v12 = v9 | 7;
      }
      uint64_t v13 = v12 + 1;
      p_dst = (long long *)operator new(v12 + 1);
      *((void *)&__dst + 1) = v10;
      unint64_t v66 = v13 | 0x8000000000000000;
      *(void *)&long long __dst = p_dst;
    }
    else
    {
      HIBYTE(v66) = v9;
      p_dst = &__dst;
      if (!v9)
      {
LABEL_17:
        *((unsigned char *)p_dst + v10) = 0;
        aBlock[0] = MEMORY[0x1E4F143A8];
        aBlock[1] = 1174405120;
        aBlock[2] = ___ZN12PowerManager5State10initializeEv_block_invoke_2;
        aBlock[3] = &__block_descriptor_tmp_47_1;
        void aBlock[4] = v1;
        void aBlock[5] = v3;
        std::string::size_type v63 = v5;
        atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        size_t v14 = _Block_copy(aBlock);
        uint64_t v64 = v14;
        ServiceManager::registerCommandHandler(v7, (uint64_t)&__dst, &v64);
        if (v14) {
          _Block_release(v14);
        }
        if (SHIBYTE(v66) < 0) {
          operator delete((void *)__dst);
        }
        char v61 = 9;
        long long v59 = 0;
        strcpy((char *)v60, "power.mgr");
        AppleBasebandManager::create();
        long long v15 = __dst;
        long long __dst = 0uLL;
        int v16 = *(std::__shared_weak_count **)(v1 + 112);
        *(_OWORD *)(v1 + 104) = v15;
        if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
        xpc_object_t v17 = (std::__shared_weak_count *)*((void *)&__dst + 1);
        if (*((void *)&__dst + 1)
          && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&__dst + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
          size_t v18 = v59;
          if (!v59)
          {
LABEL_28:
            if (v61 < 0) {
              operator delete(v60[0]);
            }
            size_t v19 = (const void *)*MEMORY[0x1E4F4CB10];
            size_t v20 = strlen((const char *)*MEMORY[0x1E4F4CB10]);
            if (v20 > 0x7FFFFFFFFFFFFFF7) {
              std::string::__throw_length_error[abi:ne180100]();
            }
            size_t v21 = (void *)v20;
            if (v20 >= 0x17)
            {
              uint64_t v23 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v20 | 7) != 0x17) {
                uint64_t v23 = v20 | 7;
              }
              uint64_t v24 = v23 + 1;
              size_t v22 = operator new(v23 + 1);
              __p[1] = v21;
              unint64_t v58 = v24 | 0x8000000000000000;
              __p[0] = v22;
            }
            else
            {
              HIBYTE(v58) = v20;
              size_t v22 = __p;
              if (!v20)
              {
LABEL_38:
                *((unsigned char *)v21 + (void)v22) = 0;
                v53[0] = MEMORY[0x1E4F143A8];
                v53[1] = 1174405120;
                v53[2] = ___ZN12PowerManager5State10initializeEv_block_invoke_48;
                xpc_object_t v53[3] = &__block_descriptor_tmp_52_2;
                v53[4] = v1;
                v53[5] = v3;
                int v54 = v5;
                atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
                uint64_t v25 = _Block_copy(v53);
                uint64_t v26 = *(NSObject **)(v1 + 88);
                if (v26) {
                  dispatch_retain(*(dispatch_object_t *)(v1 + 88));
                }
                long long v55 = v25;
                dispatch_object_t object = v26;
                AppleBasebandManager::setEventHandler();
                if (object) {
                  dispatch_release(object);
                }
                if (v55) {
                  _Block_release(v55);
                }
                if (SHIBYTE(v58) < 0) {
                  operator delete(__p[0]);
                }
                BOOL v27 = (const void *)*MEMORY[0x1E4F4CB18];
                size_t v28 = strlen((const char *)*MEMORY[0x1E4F4CB18]);
                if (v28 > 0x7FFFFFFFFFFFFFF7) {
                  std::string::__throw_length_error[abi:ne180100]();
                }
                xpc_object_t v29 = (void *)v28;
                if (v28 >= 0x17)
                {
                  uint64_t v31 = (v28 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v28 | 7) != 0x17) {
                    uint64_t v31 = v28 | 7;
                  }
                  uint64_t v32 = v31 + 1;
                  xpc_object_t v30 = operator new(v31 + 1);
                  v51[1] = v29;
                  unint64_t v52 = v32 | 0x8000000000000000;
                  v51[0] = v30;
                }
                else
                {
                  HIBYTE(v52) = v28;
                  xpc_object_t v30 = v51;
                  if (!v28)
                  {
LABEL_54:
                    *((unsigned char *)v29 + (void)v30) = 0;
                    v47[0] = MEMORY[0x1E4F143A8];
                    v47[1] = 1174405120;
                    v47[2] = ___ZN12PowerManager5State10initializeEv_block_invoke_53;
                    v47[3] = &__block_descriptor_tmp_56_2;
                    v47[4] = v1;
                    void v47[5] = v3;
                    size_t v48 = v5;
                    atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
                    size_t v33 = _Block_copy(v47);
                    xpc_object_t v34 = *(NSObject **)(v1 + 88);
                    if (v34) {
                      dispatch_retain(*(dispatch_object_t *)(v1 + 88));
                    }
                    size_t v49 = v33;
                    dispatch_object_t v50 = v34;
                    AppleBasebandManager::setEventHandler();
                    if (v50) {
                      dispatch_release(v50);
                    }
                    if (v49) {
                      _Block_release(v49);
                    }
                    if (SHIBYTE(v52) < 0) {
                      operator delete(v51[0]);
                    }
                    AppleBasebandManager::eventsOn(*(AppleBasebandManager **)(v1 + 104));
                    uint64_t v35 = *(void *)(v1 + 136);
                    v43[0] = MEMORY[0x1E4F143A8];
                    v43[1] = 1174405120;
                    v43[2] = ___ZN12PowerManager5State10initializeEv_block_invoke_57;
                    v43[3] = &__block_descriptor_tmp_59_2;
                    v43[4] = v3;
                    size_t v44 = v5;
                    atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
                    uint64_t v45 = v67;
                    uint64_t v46 = v68;
                    if (v68) {
                      atomic_fetch_add_explicit(&v68->__shared_owners_, 1uLL, memory_order_relaxed);
                    }
                    int v36 = _Block_copy(v43);
                    size_t v37 = *(NSObject **)(v1 + 88);
                    if (v37) {
                      dispatch_retain(*(dispatch_object_t *)(v1 + 88));
                    }
                    if (v36)
                    {
                      size_t v38 = _Block_copy(v36);
                      size_t v39 = *(const void **)(v35 + 104);
                      *(void *)(v35 + 104) = v38;
                      if (!v39) {
                        goto LABEL_71;
                      }
                    }
                    else
                    {
                      size_t v39 = *(const void **)(v35 + 104);
                      *(void *)(v35 + 104) = 0;
                      if (!v39)
                      {
LABEL_71:
                        if (v37) {
                          dispatch_retain(v37);
                        }
                        int v40 = *(NSObject **)(v35 + 112);
                        *(void *)(v35 + 112) = v37;
                        if (v40) {
                          dispatch_release(v40);
                        }
                        if (v37) {
                          dispatch_release(v37);
                        }
                        if (v36) {
                          _Block_release(v36);
                        }
                        int v41 = v46;
                        if (v46 && !atomic_fetch_add(&v46->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                        {
                          ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
                          std::__shared_weak_count::__release_weak(v41);
                        }
                        if (v44) {
                          std::__shared_weak_count::__release_weak(v44);
                        }
                        if (v48) {
                          std::__shared_weak_count::__release_weak(v48);
                        }
                        if (v54) {
                          std::__shared_weak_count::__release_weak(v54);
                        }
                        if (v63) {
                          std::__shared_weak_count::__release_weak(v63);
                        }
                        goto LABEL_90;
                      }
                    }
                    _Block_release(v39);
                    goto LABEL_71;
                  }
                }
                memmove(v30, v27, (size_t)v29);
                goto LABEL_54;
              }
            }
            memmove(v22, v19, (size_t)v21);
            goto LABEL_38;
          }
        }
        else
        {
          size_t v18 = v59;
          if (!v59) {
            goto LABEL_28;
          }
        }
        CFRelease(v18);
        goto LABEL_28;
      }
    }
    memmove(p_dst, v8, v10);
    goto LABEL_17;
  }
LABEL_90:
  uint64_t v42 = v68;
  if (v68 && !atomic_fetch_add(&v68->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
    std::__shared_weak_count::__release_weak(v42);
  }
LABEL_93:
  std::__shared_weak_count::__release_weak(v5);
}

void sub_1C58A4680(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,std::__shared_weak_count *a23,char a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,std::__shared_weak_count *a38,char a39,uint64_t a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  if (a23) {
    std::__shared_weak_count::__release_weak(a23);
  }
  if (a38) {
    std::__shared_weak_count::__release_weak(a38);
  }
  size_t v49 = *(std::__shared_weak_count **)(v47 - 160);
  if (v49)
  {
    std::__shared_weak_count::__release_weak(v49);
    std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v47 - 112);
    std::__shared_weak_count::__release_weak(v46);
    _Unwind_Resume(a1);
  }
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v47 - 112);
  std::__shared_weak_count::__release_weak(v46);
  _Unwind_Resume(a1);
}

void ___ZN12PowerManager5State10initializeEv_block_invoke_2(void *a1, void **a2, void **a3)
{
  long long v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    uint64_t v7 = a1[4];
    size_t v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      size_t v9 = v8;
      if (!a1[5])
      {
LABEL_12:
        if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
        return;
      }
      v12[0] = MEMORY[0x1E4F143A8];
      v12[1] = 1174405120;
      v12[2] = ___ZN12PowerManager5State10initializeEv_block_invoke_3;
      void v12[3] = &__block_descriptor_tmp_43_0;
      size_t v10 = *a2;
      v12[4] = v7;
      xpc_object_t object = v10;
      if (v10)
      {
        xpc_retain(v10);
        int v11 = *a3;
        if (!*a3) {
          goto LABEL_9;
        }
      }
      else
      {
        xpc_object_t object = xpc_null_create();
        int v11 = *a3;
        if (!*a3)
        {
LABEL_9:
          aBlock = v11;
          ctu::SharedSynchronizable<PowerManager::State>::execute_wrapped((uint64_t *)(v7 + 72), (uint64_t)v12);
          if (aBlock) {
            _Block_release(aBlock);
          }
          xpc_release(object);
          xpc_object_t object = 0;
          goto LABEL_12;
        }
      }
      int v11 = _Block_copy(v11);
      goto LABEL_9;
    }
  }
}

void ___ZN12PowerManager5State10initializeEv_block_invoke_3(void *a1)
{
  uint64_t v3 = a1[4];
  uint64_t v2 = (void *)a1[5];
  uint64_t v4 = *(void *)(v3 + 136);
  xpc_object_t object = v2;
  if (v2) {
    xpc_retain(v2);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  PowerStats::setPowerdownMessage(v4, &object);
  xpc_release(object);
  xpc_object_t object = 0;
  xpc_object_t v5 = xpc_null_create();
  uint64_t v6 = a1[6];
  xpc_object_t v9 = v5;
  xpc_object_t v7 = xpc_null_create();
  (*(void (**)(uint64_t, void, xpc_object_t *))(v6 + 16))(v6, 0, &v9);
  xpc_release(v9);
  xpc_release(v7);
}

void sub_1C58A49C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t a9, xpc_object_t object)
{
  xpc_release(object);
  xpc_release(v10);
  _Unwind_Resume(a1);
}

void ___ZN12PowerManager5State10initializeEv_block_invoke_48(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    uint64_t v3 = a1[4];
    uint64_t v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      xpc_object_t v5 = v4;
      if (a1[5]) {
        PowerStats::dumpState(*(os_log_t **)(v3 + 136));
      }
      if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void sub_1C58A4ACC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void ___ZN12PowerManager5State10initializeEv_block_invoke_53(void *a1)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    uint64_t v3 = (void *)a1[4];
    uint64_t v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      xpc_object_t v5 = v4;
      uint64_t v6 = a1[5];
      if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v5);
      }
      if (v6)
      {
        xpc_object_t v7 = (os_log_t *)v3[17];
        if (v7) {
          PowerStats::dumpState(v7);
        }
        size_t v8 = (void *)v3[25];
        if (v8 != v3 + 26)
        {
          do
          {
            xpc_object_t v9 = v3[5];
            if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
            {
              size_t v10 = v8 + 4;
              if (*((char *)v8 + 55) < 0) {
                size_t v10 = (void *)*v10;
              }
              *(_DWORD *)std::string buf = 136315138;
              size_t v20 = v10;
              _os_log_impl(&dword_1C5767000, v9, OS_LOG_TYPE_DEFAULT, "#I Pending power assertion '%s'", buf, 0xCu);
            }
            int v11 = (void *)v8[1];
            if (v11)
            {
              do
              {
                uint64_t v12 = v11;
                int v11 = (void *)*v11;
              }
              while (v11);
            }
            else
            {
              do
              {
                uint64_t v12 = (void *)v8[2];
                BOOL v13 = *v12 == (void)v8;
                size_t v8 = v12;
              }
              while (!v13);
            }
            size_t v8 = v12;
          }
          while (v12 != v3 + 26);
        }
        size_t v14 = (void *)v3[31];
        if (v14 != v3 + 32)
        {
          do
          {
            long long v15 = v3[5];
            if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
            {
              int v16 = v14 + 4;
              if (*((char *)v14 + 55) < 0) {
                int v16 = (void *)*v16;
              }
              *(_DWORD *)std::string buf = 136315138;
              size_t v20 = v16;
              _os_log_impl(&dword_1C5767000, v15, OS_LOG_TYPE_DEFAULT, "#I Deferred work due to sleep '%s'", buf, 0xCu);
            }
            xpc_object_t v17 = (void *)v14[1];
            if (v17)
            {
              do
              {
                size_t v18 = v17;
                xpc_object_t v17 = (void *)*v17;
              }
              while (v17);
            }
            else
            {
              do
              {
                size_t v18 = (void *)v14[2];
                BOOL v13 = *v18 == (void)v14;
                size_t v14 = v18;
              }
              while (!v13);
            }
            size_t v14 = v18;
          }
          while (v18 != v3 + 32);
        }
      }
    }
  }
}

void ___ZN12PowerManager5State10initializeEv_block_invoke_57(void *a1, xpc_object_t *a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[5];
  if (!v3) {
    return;
  }
  xpc_object_t v5 = std::__shared_weak_count::lock(v3);
  size_t v20 = v5;
  if (!v5) {
    return;
  }
  uint64_t v6 = v5;
  uint64_t v19 = a1[4];
  if (!v19 || (uint64_t v7 = a1[6]) == 0)
  {
LABEL_18:
    if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
    return;
  }
  size_t v8 = (const void *)*MEMORY[0x1E4F4C738];
  size_t v9 = strlen((const char *)*MEMORY[0x1E4F4C738]);
  if (v9 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v10 = (void *)v9;
  if (v9 >= 0x17)
  {
    uint64_t v13 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v13 = v9 | 7;
    }
    uint64_t v14 = v13 + 1;
    int v11 = (void **)operator new(v13 + 1);
    __dst[1] = v10;
    unint64_t v18 = v14 | 0x8000000000000000;
    __dst[0] = v11;
LABEL_13:
    memmove(v11, v8, (size_t)v10);
    *((unsigned char *)v10 + (void)v11) = 0;
    xpc_object_t v12 = *a2;
    int v16 = v12;
    if (v12) {
      goto LABEL_9;
    }
    goto LABEL_14;
  }
  HIBYTE(v18) = v9;
  int v11 = __dst;
  if (v9) {
    goto LABEL_13;
  }
  LOBYTE(__dst[0]) = 0;
  xpc_object_t v12 = *a2;
  int v16 = v12;
  if (v12)
  {
LABEL_9:
    xpc_retain(v12);
    goto LABEL_15;
  }
LABEL_14:
  xpc_object_t v12 = xpc_null_create();
  int v16 = v12;
LABEL_15:
  long long v15 = 0;
  ServiceManager::runCommand(v7, (uint64_t)__dst, &v16, &v15);
  xpc_release(v12);
  int v16 = 0;
  if (SHIBYTE(v18) < 0) {
    operator delete(__dst[0]);
  }
  uint64_t v6 = v20;
  if (v20) {
    goto LABEL_18;
  }
}

void sub_1C58A4EDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  xpc_release(v18);
  if (a17 < 0)
  {
    operator delete(__p);
    std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
    _Unwind_Resume(a1);
  }
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  _Unwind_Resume(a1);
}

void *__copy_helper_block_e8_32c45_ZTSNSt3__18weak_ptrIN12PowerManager5StateEEE48c42_ZTSNSt3__110shared_ptrI14ServiceManagerEE(void *result, void *a2)
{
  uint64_t v2 = a2[5];
  result[4] = a2[4];
  result[5] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  uint64_t v3 = a2[7];
  result[6] = a2[6];
  result[7] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c45_ZTSNSt3__18weak_ptrIN12PowerManager5StateEEE48c42_ZTSNSt3__110shared_ptrI14ServiceManagerEE(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 56);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = *(std::__shared_weak_count **)(a1 + 40);
    if (!v3) {
      return;
    }
  }
  else
  {
    uint64_t v3 = *(std::__shared_weak_count **)(a1 + 40);
    if (!v3) {
      return;
    }
  }

  std::__shared_weak_count::__release_weak(v3);
}

void ___ZN12PowerManager5State8shutdownEv_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  uint64_t v2 = (std::__shared_weak_count *)v1[10];
  if (!v2 || (v3 = v1[9], (uint64_t v4 = std::__shared_weak_count::lock(v2)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  xpc_object_t v5 = v4;
  uint64_t v6 = operator new(8uLL);
  void *v6 = v1;
  uint64_t v7 = v1[11];
  atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  size_t v8 = operator new(0x18uLL);
  void *v8 = v6;
  v8[1] = v3;
  void v8[2] = v5;
  dispatch_async_f(v7, v8, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<PowerManager::State>::execute_wrapped<PowerManager::State::releasePendingPowerAssertions(void)::{lambda(void)#1}>(PowerManager::State::releasePendingPowerAssertions(void)::{lambda(void)#1} &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<PowerManager::State::releasePendingPowerAssertions(void)::{lambda(void)#1},dispatch_queue_s *::default_delete<PowerManager::State::releasePendingPowerAssertions(void)::{lambda(void)#1}>>)::{lambda(void *)#1}::__invoke);
  if (atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    size_t v9 = (std::__shared_weak_count *)v1[14];
    v1[13] = 0;
    v1[14] = 0;
    if (!v9) {
      return;
    }
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    size_t v9 = (std::__shared_weak_count *)v1[14];
    v1[13] = 0;
    v1[14] = 0;
    if (!v9) {
      return;
    }
  }
  if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
}

void dispatch::async<void ctu::SharedSynchronizable<PowerManager::State>::execute_wrapped<PowerManager::State::releasePendingPowerAssertions(void)::{lambda(void)#1}>(PowerManager::State::releasePendingPowerAssertions(void)::{lambda(void)#1} &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<PowerManager::State::releasePendingPowerAssertions(void)::{lambda(void)#1},dispatch_queue_s *::default_delete<PowerManager::State::releasePendingPowerAssertions(void)::{lambda(void)#1}>>)::{lambda(void *)#1}::__invoke(void *a1)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (void *)*a1;
  uint64_t v3 = *(void **)*a1;
  uint64_t v4 = (void *)v3[25];
  xpc_object_t v5 = v3 + 26;
  if (v4 != v3 + 26)
  {
    do
    {
      uint64_t v6 = v3[5];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v7 = v4 + 4;
        if (*((char *)v4 + 55) < 0) {
          uint64_t v7 = (void *)*v7;
        }
        *(_DWORD *)std::string buf = 136315138;
        xpc_object_t v17 = v7;
        _os_log_impl(&dword_1C5767000, v6, OS_LOG_TYPE_DEFAULT, "#I Forcefully releasing power assertion '%s'", buf, 0xCu);
      }
      size_t v8 = (void *)v4[1];
      if (v8)
      {
        do
        {
          size_t v9 = v8;
          size_t v8 = (void *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          size_t v9 = (void *)v4[2];
          BOOL v10 = *v9 == (void)v4;
          uint64_t v4 = v9;
        }
        while (!v10);
      }
      uint64_t v4 = v9;
    }
    while (v9 != v5);
  }
  std::__tree<std::__value_type<std::string,std::shared_ptr<support::misc::Watchdog>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<support::misc::Watchdog>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<support::misc::Watchdog>>>>::destroy(v3[26]);
  uint64_t v11 = v3[29];
  v3[25] = v5;
  v3[26] = 0;
  v3[27] = 0;
  std::__tree<std::__value_type<std::string,std::shared_ptr<support::misc::Watchdog>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<support::misc::Watchdog>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<support::misc::Watchdog>>>>::destroy(v11);
  v3[28] = v3 + 29;
  v3[29] = 0;
  v3[30] = 0;
  *(unsigned char *)(v3[17] + 88) = 0;
  uint64_t v12 = v3[20];
  if (v12)
  {
    uint64_t v13 = v3[5];
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl(&dword_1C5767000, v13, OS_LOG_TYPE_DEFAULT, "#I No more assertions held, acknowledging previous notification", buf, 2u);
      uint64_t v12 = v3[20];
    }
    (*(void (**)(uint64_t, uint64_t))(v12 + 16))(v12, 1);
    uint64_t v14 = (const void *)v3[20];
    v3[20] = 0;
    if (v14) {
      _Block_release(v14);
    }
  }
  operator delete(v2);
  long long v15 = (std::__shared_weak_count *)a1[2];
  if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }

  operator delete(a1);
}

void sub_1C58A5374(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<PowerManager *,std::shared_ptr<PowerManager>::__shared_ptr_default_delete<PowerManager,PowerManager>,std::allocator<PowerManager>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t std::__shared_ptr_pointer<PowerManager *,std::shared_ptr<PowerManager>::__shared_ptr_default_delete<PowerManager,PowerManager>,std::allocator<PowerManager>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 48))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<PowerManager *,std::shared_ptr<PowerManager>::__shared_ptr_default_delete<PowerManager,PowerManager>,std::allocator<PowerManager>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x80000001C59A3814) {
    return a1 + 24;
  }
  if (((v3 & 0x80000001C59A3814 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000001C59A3814)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001C59A3814 & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 24;
  }
  return 0;
}

uint64_t __cxx_global_var_init_17()
{
  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<ctu::power::assertion>::~PthreadMutexGuardPolicy, &ctu::Singleton<ctu::power::assertion,ctu::power::assertion,ctu::PthreadMutexGuardPolicy<ctu::power::assertion>>::sInstance, &dword_1C5767000);
  }
  return result;
}

void LogDumpDB::LogDumpDB(LogDumpDB *this)
{
  *(void *)this = &unk_1F20FA608;
  *((_DWORD *)this + 4) = 10;
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  LogDumpDB::init(this);
}

{
  ctu::OsLogLogger::OsLogLogger((LogDumpDB *)((char *)this + 8), "com.apple.telephony.abm", "Log Dump History");
  *(void *)this = &unk_1F20FA608;
  *((_DWORD *)this + 4) = 10;
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  LogDumpDB::init(this);
}

void sub_1C58A5588(_Unwind_Exception *a1)
{
  std::vector<ResetInfo>::~vector[abi:ne180100](v2);
  MEMORY[0x1C8790F80](v1);
  _Unwind_Resume(a1);
}

void LogDumpDB::init(LogDumpDB *this)
{
  int v36 = 0;
  pthread_mutex_lock(&ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance);
  uint64_t v2 = off_1EBBDD340;
  if (!off_1EBBDD340)
  {
    SharedData::create_default_global(__p);
    long long v3 = *(_OWORD *)__p;
    *(void *)std::string __p = 0;
    *(void *)&__p[8] = 0;
    uint64_t v4 = (std::__shared_weak_count *)*(&off_1EBBDD340 + 1);
    off_1EBBDD340 = v3;
    if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    xpc_object_t v5 = *(std::__shared_weak_count **)&__p[8];
    if (*(void *)&__p[8]
      && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&__p[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    uint64_t v2 = off_1EBBDD340;
  }
  uint64_t v6 = (std::__shared_weak_count *)*(&off_1EBBDD340 + 1);
  if (*(&off_1EBBDD340 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDD340 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance);
  __p[23] = 16;
  strcpy(__p, "Log Dump History");
  os_unfair_lock_lock((os_unfair_lock_t)(v2 + 40));
  Preferences::getPreference<__CFArray const*>((uint64_t (***)(void, uint64_t))v2, __p, &v36);
  os_unfair_lock_unlock((os_unfair_lock_t)(v2 + 40));
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    uint64_t v7 = v36;
    uint64_t v35 = v36;
    if (!v36) {
      goto LABEL_71;
    }
  }
  else
  {
    uint64_t v7 = v36;
    uint64_t v35 = v36;
    if (!v36) {
      goto LABEL_71;
    }
  }
  CFRetain(v7);
  if (ctu::SharedRef<__CFArray const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFArray const>::get)
  {
    uint64_t Count = CFArrayGetCount((CFArrayRef)v7);
    if (Count)
    {
      CFIndex v8 = 0;
      uint64_t v19 = (char *)*MEMORY[0x1E4F4C4C8];
      size_t v9 = (const char *)*MEMORY[0x1E4F4CA98];
      BOOL v10 = (const char *)*MEMORY[0x1E4F4C690];
      uint64_t v11 = (const char *)*MEMORY[0x1E4F4CA38];
      uint64_t v12 = (const char *)*MEMORY[0x1E4F4C8D8];
      do
      {
        ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)v7, v8);
        uint64_t v14 = ValueAtIndex;
        if (ValueAtIndex && (CFTypeID v15 = CFGetTypeID(ValueAtIndex), v15 == CFDictionaryGetTypeID()))
        {
          xpc_object_t v34 = v14;
          CFRetain(v14);
        }
        else
        {
          uint64_t v14 = 0;
          xpc_object_t v34 = 0;
        }
        v33[0] = 0xAAAAAAAAAAAAAAAALL;
        v33[1] = 0xAAAAAAAAAAAAAAAALL;
        ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v33, (const __CFDictionary *)v14);
        memset((char *)&v32[1] + 8, 170, 24);
        memset(__p, 0, 24);
        ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)v32, v19);
        ctu::cf::map_adapter::getString();
        MEMORY[0x1C8791110](v32);
        if ((__p[23] & 0x80000000) != 0) {
          operator delete(*(void **)__p);
        }
        memset(v32, 170, 24);
        memset(__p, 0, 24);
        ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)v31, v9);
        ctu::cf::map_adapter::getString();
        MEMORY[0x1C8791110](v31);
        if ((__p[23] & 0x80000000) != 0) {
          operator delete(*(void **)__p);
        }
        memset(v31, 170, sizeof(v31));
        memset(__p, 0, 24);
        ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)v30, v10);
        ctu::cf::map_adapter::getString();
        MEMORY[0x1C8791110](v30);
        if ((__p[23] & 0x80000000) != 0) {
          operator delete(*(void **)__p);
        }
        memset(v30, 170, sizeof(v30));
        memset(__p, 0, 24);
        ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v29, v11);
        ctu::cf::map_adapter::getString();
        MEMORY[0x1C8791110](&v29);
        if ((__p[23] & 0x80000000) != 0) {
          operator delete(*(void **)__p);
        }
        memset(&v29, 170, sizeof(v29));
        memset(__p, 0, 24);
        ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)v37, v12);
        ctu::cf::map_adapter::getString();
        MEMORY[0x1C8791110](v37);
        if ((__p[23] & 0x80000000) != 0) {
          operator delete(*(void **)__p);
        }
        *(void *)&long long v16 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v16 + 1) = 0xAAAAAAAAAAAAAAAALL;
        *(_OWORD *)BOOL v27 = v16;
        long long v28 = v16;
        *(_OWORD *)uint64_t v25 = v16;
        long long v26 = v16;
        *(_OWORD *)&__p[16] = v16;
        long long v24 = v16;
        *(_OWORD *)std::string __p = v16;
        if (SHIBYTE(v32[2]) < 0) {
          std::string::__init_copy_ctor_external(&v22, *((const std::string::value_type **)&v32[1] + 1), *(std::string::size_type *)&v32[2]);
        }
        else {
          std::string v22 = *(std::string *)((char *)&v32[1] + 8);
        }
        if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v21, v29.__r_.__value_.__l.__data_, v29.__r_.__value_.__l.__size_);
        }
        else {
          std::string v21 = v29;
        }
        ResetInfo::ResetInfo((std::string *)__p, (long long *)v31, (long long *)v30, v32, (uint64_t)&v22, 7, (long long *)&v21);
        if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v21.__r_.__value_.__l.__data_);
          if ((SHIBYTE(v22.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_45:
            xpc_object_t v17 = (std::string *)*((void *)this + 4);
            if ((unint64_t)v17 < *((void *)this + 5)) {
              goto LABEL_46;
            }
            goto LABEL_49;
          }
        }
        else if ((SHIBYTE(v22.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          goto LABEL_45;
        }
        operator delete(v22.__r_.__value_.__l.__data_);
        xpc_object_t v17 = (std::string *)*((void *)this + 4);
        if ((unint64_t)v17 < *((void *)this + 5))
        {
LABEL_46:
          ResetInfo::ResetInfo(v17, (long long *)__p);
          uint64_t v18 = &v17[4].__r_.__value_.__s.__data_[16];
          *((void *)this + 4) = (char *)v17 + 112;
          goto LABEL_50;
        }
LABEL_49:
        uint64_t v18 = std::vector<ResetInfo>::__push_back_slow_path<ResetInfo const&>((void *)this + 3, (long long *)__p);
LABEL_50:
        *((void *)this + 4) = v18;
        if (SHIBYTE(v28) < 0)
        {
          operator delete(v27[1]);
          if ((SBYTE7(v26) & 0x80000000) == 0)
          {
LABEL_52:
            if ((SHIBYTE(v24) & 0x80000000) == 0) {
              goto LABEL_53;
            }
            goto LABEL_63;
          }
        }
        else if ((SBYTE7(v26) & 0x80000000) == 0)
        {
          goto LABEL_52;
        }
        operator delete(v25[0]);
        if ((SHIBYTE(v24) & 0x80000000) == 0)
        {
LABEL_53:
          if ((__p[23] & 0x80000000) == 0) {
            goto LABEL_54;
          }
          goto LABEL_64;
        }
LABEL_63:
        operator delete(*(void **)&__p[24]);
        if ((__p[23] & 0x80000000) == 0)
        {
LABEL_54:
          if ((SHIBYTE(v29.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_55;
          }
          goto LABEL_65;
        }
LABEL_64:
        operator delete(*(void **)__p);
        if ((SHIBYTE(v29.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_55:
          if ((SHIBYTE(v30[2]) & 0x80000000) == 0) {
            goto LABEL_56;
          }
          goto LABEL_66;
        }
LABEL_65:
        operator delete(v29.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v30[2]) & 0x80000000) == 0)
        {
LABEL_56:
          if ((v31[23] & 0x80000000) == 0) {
            goto LABEL_57;
          }
          goto LABEL_67;
        }
LABEL_66:
        operator delete(v30[0]);
        if ((v31[23] & 0x80000000) == 0)
        {
LABEL_57:
          if ((SBYTE7(v32[1]) & 0x80000000) == 0) {
            goto LABEL_58;
          }
          goto LABEL_68;
        }
LABEL_67:
        operator delete(*(void **)v31);
        if ((SBYTE7(v32[1]) & 0x80000000) == 0)
        {
LABEL_58:
          if ((SHIBYTE(v32[2]) & 0x80000000) == 0) {
            goto LABEL_59;
          }
          goto LABEL_69;
        }
LABEL_68:
        operator delete(*(void **)&v32[0]);
        if ((SHIBYTE(v32[2]) & 0x80000000) == 0)
        {
LABEL_59:
          MEMORY[0x1C8791160](v33);
          if (!v14) {
            goto LABEL_22;
          }
LABEL_70:
          CFRelease(v14);
          goto LABEL_22;
        }
LABEL_69:
        operator delete(*((void **)&v32[1] + 1));
        MEMORY[0x1C8791160](v33);
        if (v14) {
          goto LABEL_70;
        }
LABEL_22:
        ++v8;
      }
      while (Count != v8);
    }
  }
LABEL_71:
  if (v7) {
    CFRelease(v7);
  }
}

void sub_1C58A5BF0(_Unwind_Exception *a1)
{
}

void sub_1C58A5C10(_Unwind_Exception *a1)
{
  ctu::cf::CFSharedRef<__CFArray const>::~CFSharedRef((const void **)(v1 - 120));
  _Unwind_Resume(a1);
}

void sub_1C58A5C34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,void *a51,uint64_t a52,int a53,__int16 a54,char a55,char a56)
{
  if (a25 < 0)
  {
    operator delete(__p);
    if ((a50 & 0x80000000) == 0) {
      goto LABEL_6;
    }
  }
  else if ((a50 & 0x80000000) == 0)
  {
LABEL_6:
    if (a56 < 0) {
      operator delete(a51);
    }
    if (*(char *)(v56 - 193) < 0) {
      operator delete(*(void **)(v56 - 216));
    }
    if (*(char *)(v56 - 169) < 0) {
      operator delete(*(void **)(v56 - 192));
    }
    if (*(char *)(v56 - 145) < 0) {
      operator delete(*(void **)(v56 - 168));
    }
    MEMORY[0x1C8791160](v56 - 144);
    ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)(v56 - 128));
    ctu::cf::CFSharedRef<__CFArray const>::~CFSharedRef((const void **)(v56 - 120));
    _Unwind_Resume(a1);
  }
  operator delete(a45);
  goto LABEL_6;
}

void **std::vector<ResetInfo>::~vector[abi:ne180100](void **a1)
{
  uint64_t v2 = (void **)*a1;
  if (*a1)
  {
    long long v3 = (void **)a1[1];
    uint64_t v4 = *a1;
    if (v3 == v2)
    {
LABEL_15:
      a1[1] = v2;
      operator delete(v4);
      return a1;
    }
    while (1)
    {
      if (*((char *)v3 - 1) < 0)
      {
        operator delete(*(v3 - 3));
        if ((*((char *)v3 - 41) & 0x80000000) == 0)
        {
LABEL_7:
          if ((*((char *)v3 - 65) & 0x80000000) == 0) {
            goto LABEL_8;
          }
          goto LABEL_12;
        }
      }
      else if ((*((char *)v3 - 41) & 0x80000000) == 0)
      {
        goto LABEL_7;
      }
      operator delete(*(v3 - 8));
      if ((*((char *)v3 - 65) & 0x80000000) == 0)
      {
LABEL_8:
        if (*((char *)v3 - 89) < 0) {
          goto LABEL_13;
        }
        goto LABEL_4;
      }
LABEL_12:
      operator delete(*(v3 - 11));
      if (*((char *)v3 - 89) < 0) {
LABEL_13:
      }
        operator delete(*(v3 - 14));
LABEL_4:
      v3 -= 14;
      if (v3 == v2)
      {
        uint64_t v4 = *a1;
        goto LABEL_15;
      }
    }
  }
  return a1;
}

void sub_1C58A5F50(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;
  size_t v9 = v4;
  uint64_t v6 = (void **)*v4;
  if (*v4)
  {
    uint64_t v7 = *(void ***)(v2 + 32);
    CFIndex v8 = *v4;
    if (v7 != v6)
    {
      do
        ResetInfo::~ResetInfo(v7 - 14);
      while (v7 != v6);
      CFIndex v8 = *v9;
    }
    *(void *)(v2 + 32) = v6;
    operator delete(v8);
  }
  MEMORY[0x1C8790F80](v1);
  _Unwind_Resume(a1);
}

BOOL LogDumpDB::isDuplicated(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v32 = 0;
  if (*(char *)(a2 + 47) < 0) {
    std::string::__init_copy_ctor_external(&v31, *(const std::string::value_type **)(a2 + 24), *(void *)(a2 + 32));
  }
  else {
    std::string v31 = *(std::string *)(a2 + 24);
  }
  int v6 = SHIBYTE(v31.__r_.__value_.__r.__words[2]);
  if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t size = HIBYTE(v31.__r_.__value_.__r.__words[2]);
  }
  else {
    size_t size = v31.__r_.__value_.__l.__size_;
  }
  if (size != strlen((const char *)*MEMORY[0x1E4F4D138]))
  {
    BOOL v9 = 0;
    if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
      goto LABEL_16;
    }
LABEL_14:
    if (!v9) {
      goto LABEL_17;
    }
    return 0;
  }
  if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    CFIndex v8 = &v31;
  }
  else {
    CFIndex v8 = (std::string *)v31.__r_.__value_.__r.__words[0];
  }
  BOOL v9 = memcmp(v8, (const void *)*MEMORY[0x1E4F4D138], size) == 0;
  if ((v6 & 0x80000000) == 0) {
    goto LABEL_14;
  }
LABEL_16:
  operator delete(v31.__r_.__value_.__l.__data_);
  if (v9) {
    return 0;
  }
LABEL_17:
  uint64_t v11 = *(NSObject **)(a1 + 8);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
  {
    LOWORD(v31.__r_.__value_.__l.__data_) = 0;
    _os_log_debug_impl(&dword_1C5767000, v11, OS_LOG_TYPE_DEBUG, "#D Checking if log dump is duplicated", (uint8_t *)&v31, 2u);
  }
  uint64_t v12 = *(const ResetInfo **)(a1 + 24);
  uint64_t v13 = *(const ResetInfo **)(a1 + 32);
  v22[0] = &v32;
  v22[1] = a1;
  ResetInfo::ResetInfo(&v23, (long long *)a2);
  uint64_t v30 = a3;
  if (v12 != v13)
  {
    while (!LogDumpDB::isDuplicated(ResetInfo const&,std::chrono::duration<long long,std::ratio<1l,1l>>)::$_0::operator()((uint64_t)v22, v12))
    {
      uint64_t v12 = (const ResetInfo *)((char *)v12 + 112);
      if (v12 == v13)
      {
        uint64_t v12 = v13;
        goto LABEL_29;
      }
    }
    if (v12 != v13)
    {
      for (uint64_t i = (char *)v12 + 112; i != (char *)v13; i += 112)
      {
        if (!LogDumpDB::isDuplicated(ResetInfo const&,std::chrono::duration<long long,std::ratio<1l,1l>>)::$_0::operator()((uint64_t)v22, (const ResetInfo *)i))
        {
          ResetInfo::operator=((char *)v12, i);
          uint64_t v12 = (const ResetInfo *)((char *)v12 + 112);
        }
      }
    }
  }
LABEL_29:
  if (v29 < 0)
  {
    operator delete(__p);
    if ((v27 & 0x80000000) == 0)
    {
LABEL_31:
      if ((v25 & 0x80000000) == 0) {
        goto LABEL_32;
      }
      goto LABEL_38;
    }
  }
  else if ((v27 & 0x80000000) == 0)
  {
    goto LABEL_31;
  }
  operator delete(v26);
  if ((v25 & 0x80000000) == 0)
  {
LABEL_32:
    if ((SHIBYTE(v23.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_33;
    }
    goto LABEL_39;
  }
LABEL_38:
  operator delete(v24);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
  {
LABEL_39:
    operator delete(v23.__r_.__value_.__l.__data_);
    CFTypeID v15 = *(const ResetInfo **)(a1 + 32);
    if (v12 == v15) {
      goto LABEL_34;
    }
    while (1)
    {
LABEL_42:
      if (v15 == v12)
      {
        *(void *)(a1 + 32) = v12;
        if (!v32) {
          goto LABEL_53;
        }
        goto LABEL_54;
      }
      if (*((char *)v15 - 1) < 0)
      {
        operator delete(*((void **)v15 - 3));
        if ((*((char *)v15 - 41) & 0x80000000) == 0)
        {
LABEL_45:
          if (*((char *)v15 - 65) < 0) {
            goto LABEL_50;
          }
          goto LABEL_46;
        }
      }
      else if ((*((char *)v15 - 41) & 0x80000000) == 0)
      {
        goto LABEL_45;
      }
      operator delete(*((void **)v15 - 8));
      if (*((char *)v15 - 65) < 0)
      {
LABEL_50:
        operator delete(*((void **)v15 - 11));
        if ((*((char *)v15 - 89) & 0x80000000) == 0) {
          goto LABEL_41;
        }
        goto LABEL_51;
      }
LABEL_46:
      if ((*((char *)v15 - 89) & 0x80000000) == 0) {
        goto LABEL_41;
      }
LABEL_51:
      operator delete(*((void **)v15 - 14));
LABEL_41:
      CFTypeID v15 = (const ResetInfo *)((char *)v15 - 112);
    }
  }
LABEL_33:
  CFTypeID v15 = *(const ResetInfo **)(a1 + 32);
  if (v12 != v15) {
    goto LABEL_42;
  }
LABEL_34:
  if (v32) {
    goto LABEL_54;
  }
LABEL_53:
  long long v16 = *(NSObject **)(a1 + 8);
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
  {
    LOWORD(v31.__r_.__value_.__l.__data_) = 0;
    _os_log_debug_impl(&dword_1C5767000, v16, OS_LOG_TYPE_DEBUG, "#D Not found duplicated log", (uint8_t *)&v31, 2u);
    uint64_t v12 = *(const ResetInfo **)(a1 + 32);
    if ((unint64_t)v12 < *(void *)(a1 + 40)) {
      goto LABEL_55;
    }
LABEL_57:
    xpc_object_t v17 = std::vector<ResetInfo>::__push_back_slow_path<ResetInfo const&>((void *)(a1 + 24), (long long *)a2);
    goto LABEL_58;
  }
LABEL_54:
  if ((unint64_t)v12 >= *(void *)(a1 + 40)) {
    goto LABEL_57;
  }
LABEL_55:
  ResetInfo::ResetInfo((std::string *)v12, (long long *)a2);
  xpc_object_t v17 = (char *)v12 + 112;
  *(void *)(a1 + 32) = (char *)v12 + 112;
LABEL_58:
  *(void *)(a1 + 32) = v17;
  uint64_t v18 = *(char **)(a1 + 24);
  if (0x6DB6DB6DB6DB6DB7 * ((v17 - v18) >> 4) <= (unint64_t)*(unsigned int *)(a1 + 16)) {
    goto LABEL_76;
  }
  if (v18 + 112 == v17)
  {
    uint64_t v19 = *(std::string::value_type **)(a1 + 24);
  }
  else
  {
    uint64_t v19 = *(std::string::value_type **)(a1 + 24);
    do
    {
      size_t v20 = v18 + 112;
      v19 += 112;
      std::string v21 = ResetInfo::operator=(v18, v18 + 112) + 224;
      uint64_t v18 = v20;
    }
    while (v21 != v17);
    xpc_object_t v17 = *(std::string::value_type **)(a1 + 32);
  }
  while (v17 != v19)
  {
    if (*(v17 - 1) < 0)
    {
      operator delete(*((void **)v17 - 3));
      if ((*(v17 - 41) & 0x80000000) == 0)
      {
LABEL_68:
        if (*(v17 - 65) < 0) {
          goto LABEL_73;
        }
        goto LABEL_69;
      }
    }
    else if ((*(v17 - 41) & 0x80000000) == 0)
    {
      goto LABEL_68;
    }
    operator delete(*((void **)v17 - 8));
    if (*(v17 - 65) < 0)
    {
LABEL_73:
      operator delete(*((void **)v17 - 11));
      if ((*(v17 - 89) & 0x80000000) == 0) {
        goto LABEL_64;
      }
      goto LABEL_74;
    }
LABEL_69:
    if ((*(v17 - 89) & 0x80000000) == 0) {
      goto LABEL_64;
    }
LABEL_74:
    operator delete(*((void **)v17 - 14));
LABEL_64:
    v17 -= 112;
  }
  *(void *)(a1 + 32) = v19;
LABEL_76:
  LogDumpDB::commitToDisk((LogDumpDB *)a1);
  return v32 != 0;
}

void sub_1C58A642C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 32) = v2;
  _Unwind_Resume(a1);
}

void sub_1C58A6434(_Unwind_Exception *a1)
{
  ResetInfo::~ResetInfo(v1);
  _Unwind_Resume(a1);
}

void sub_1C58A6448(_Unwind_Exception *a1)
{
  ResetInfo::~ResetInfo(v1);
  _Unwind_Resume(a1);
}

void LogDumpDB::commitToDisk(LogDumpDB *this)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  CFMutableArrayRef cf = 0;
  CFAllocatorRef v2 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  uint64_t v4 = Mutable;
  if (Mutable) {
    CFMutableArrayRef cf = Mutable;
  }
  int v6 = (long long *)*((void *)this + 3);
  xpc_object_t v5 = (long long *)*((void *)this + 4);
  long long v28 = this;
  if (v6 != v5)
  {
    std::string v31 = (const __CFString **)*MEMORY[0x1E4F4C4C8];
    uint64_t v30 = (const __CFString **)*MEMORY[0x1E4F4C690];
    char v29 = (const __CFString **)*MEMORY[0x1E4F4CA38];
    uint64_t v7 = (const __CFString **)*MEMORY[0x1E4F4CA98];
    CFIndex v8 = (const __CFString **)*MEMORY[0x1E4F4C8D8];
    do
    {
      BOOL v9 = CFDictionaryCreateMutable(v2, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      uint64_t v10 = *((void *)v6 + 9);
      uint64_t v11 = operator new(0x38uLL);
      v11[8] = 0;
      *(void *)uint64_t v11 = 0;
      *((void *)v11 + 1) = 0;
      *((void *)v11 + 2) = &v35.__r_.__value_.__l.__size_;
      v35.__r_.__value_.__r.__words[0] = (std::string::size_type)v11;
      v35.__r_.__value_.__l.__size_ = (std::string::size_type)v11;
      *((unsigned char *)v11 + 24) = 1;
      v35.__r_.__value_.__r.__words[2] = 1;
      *((void *)v11 + 5) = v10;
      *((void *)v11 + 6) = 0xAAAAAAAA00000000;
      Timestamp::asString((uint64_t)&v35, 0, 9, &__p);
      std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&v35, (void *)v35.__r_.__value_.__l.__size_);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v35, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
      }
      else {
        std::string v35 = __p;
      }
      ctu::cf::insert<char const*,std::string>(v9, v31, (uint64_t)&v35, (uint64_t)v2, v12);
      if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v35.__r_.__value_.__l.__data_);
        if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_11:
          if ((*((char *)v6 + 23) & 0x80000000) == 0) {
            goto LABEL_12;
          }
          goto LABEL_15;
        }
      }
      else if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_11;
      }
      operator delete(__p.__r_.__value_.__l.__data_);
      if ((*((char *)v6 + 23) & 0x80000000) == 0)
      {
LABEL_12:
        long long v14 = *v6;
        __p.__r_.__value_.__r.__words[2] = *((void *)v6 + 2);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v14;
        goto LABEL_16;
      }
LABEL_15:
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v6, *((void *)v6 + 1));
LABEL_16:
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v35, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
      }
      else {
        std::string v35 = __p;
      }
      ctu::cf::insert<char const*,std::string>(v9, v30, (uint64_t)&v35, (uint64_t)v2, v13);
      if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v35.__r_.__value_.__l.__data_);
        if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_21:
          if ((*((char *)v6 + 47) & 0x80000000) == 0) {
            goto LABEL_22;
          }
          goto LABEL_25;
        }
      }
      else if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_21;
      }
      operator delete(__p.__r_.__value_.__l.__data_);
      if ((*((char *)v6 + 47) & 0x80000000) == 0)
      {
LABEL_22:
        long long v16 = *(long long *)((char *)v6 + 24);
        __p.__r_.__value_.__r.__words[2] = *((void *)v6 + 5);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v16;
        goto LABEL_26;
      }
LABEL_25:
      std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)v6 + 3), *((void *)v6 + 4));
LABEL_26:
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v35, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
      }
      else {
        std::string v35 = __p;
      }
      ctu::cf::insert<char const*,std::string>(v9, v29, (uint64_t)&v35, (uint64_t)v2, v15);
      if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v35.__r_.__value_.__l.__data_);
        if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_31:
          if ((*((char *)v6 + 71) & 0x80000000) == 0) {
            goto LABEL_32;
          }
          goto LABEL_35;
        }
      }
      else if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_31;
      }
      operator delete(__p.__r_.__value_.__l.__data_);
      if ((*((char *)v6 + 71) & 0x80000000) == 0)
      {
LABEL_32:
        long long v18 = v6[3];
        __p.__r_.__value_.__r.__words[2] = *((void *)v6 + 8);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v18;
        goto LABEL_36;
      }
LABEL_35:
      std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)v6 + 6), *((void *)v6 + 7));
LABEL_36:
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v35, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
      }
      else {
        std::string v35 = __p;
      }
      ctu::cf::insert<char const*,std::string>(v9, v7, (uint64_t)&v35, (uint64_t)v2, v17);
      if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v35.__r_.__value_.__l.__data_);
        if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_41:
          if ((*((char *)v6 + 111) & 0x80000000) == 0) {
            goto LABEL_42;
          }
          goto LABEL_45;
        }
      }
      else if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_41;
      }
      operator delete(__p.__r_.__value_.__l.__data_);
      if ((*((char *)v6 + 111) & 0x80000000) == 0)
      {
LABEL_42:
        long long v20 = *(long long *)((char *)v6 + 88);
        __p.__r_.__value_.__r.__words[2] = *((void *)v6 + 13);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
        goto LABEL_46;
      }
LABEL_45:
      std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)v6 + 11), *((void *)v6 + 12));
LABEL_46:
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v35, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
      }
      else {
        std::string v35 = __p;
      }
      ctu::cf::insert<char const*,std::string>(v9, v8, (uint64_t)&v35, (uint64_t)v2, v19);
      if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v35.__r_.__value_.__l.__data_);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
LABEL_54:
        }
          operator delete(__p.__r_.__value_.__l.__data_);
      }
      else if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        goto LABEL_54;
      }
      CFArrayAppendValue(v4, v9);
      if (v9) {
        CFRelease(v9);
      }
      v6 += 7;
    }
    while (v6 != v5);
  }
  std::string v21 = *((void *)v28 + 1);
  if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG))
  {
    LODWORD(v35.__r_.__value_.__l.__data_) = 138412290;
    *(std::string::size_type *)((char *)v35.__r_.__value_.__r.__words + 4) = (std::string::size_type)v4;
    _os_log_debug_impl(&dword_1C5767000, v21, OS_LOG_TYPE_DEBUG, "#D Current tracking list: %@", (uint8_t *)&v35, 0xCu);
  }
  pthread_mutex_lock(&ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance);
  std::string v22 = (os_unfair_lock_s *)off_1EBBDD340;
  if (!off_1EBBDD340)
  {
    SharedData::create_default_global(&v35);
    long long v23 = *(_OWORD *)&v35.__r_.__value_.__l.__data_;
    *(_OWORD *)&v35.__r_.__value_.__l.__data_ = 0uLL;
    long long v24 = (std::__shared_weak_count *)*(&off_1EBBDD340 + 1);
    off_1EBBDD340 = v23;
    if (v24 && !atomic_fetch_add(&v24->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
    size_t size = (std::__shared_weak_count *)v35.__r_.__value_.__l.__size_;
    if (v35.__r_.__value_.__l.__size_
      && !atomic_fetch_add((atomic_ullong *volatile)(v35.__r_.__value_.__l.__size_ + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
    std::string v22 = (os_unfair_lock_s *)off_1EBBDD340;
  }
  long long v26 = (std::__shared_weak_count *)*(&off_1EBBDD340 + 1);
  if (*(&off_1EBBDD340 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDD340 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance);
  *((unsigned char *)&__p.__r_.__value_.__s + 23) = 16;
  strcpy((char *)&__p, "Log Dump History");
  CFMutableArrayRef v34 = cf;
  v35.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  v35.__r_.__value_.__l.__size_ = (std::string::size_type)&v34;
  v35.__r_.__value_.__r.__words[2] = (std::string::size_type)v22;
  ctu::SharedLockable<SharedData>::execute_sync<BOOL SharedData::setPreference<__CFArray *>(std::string const&,__CFArray *)::{lambda(void)#1}>(v22 + 6, (uint64_t *)&v35);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v26 && !atomic_fetch_add(&v26->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
    std::__shared_weak_count::__release_weak(v26);
    CFMutableArrayRef v27 = cf;
    if (!cf) {
      return;
    }
  }
  else
  {
    CFMutableArrayRef v27 = cf;
    if (!cf) {
      return;
    }
  }
  CFRelease(v27);
}

void sub_1C58A6AA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, const void *a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
}

const char *LogDumpDB::getName(LogDumpDB *this)
{
  return "Log Dump History";
}

BOOL LogDumpDB::checkIfDuplicatedSignature(LogDumpDB *this, const ResetInfo *a2, const ResetInfo *a3)
{
  uint64_t v97 = *MEMORY[0x1E4F143B8];
  if (*((char *)a3 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v94, *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else {
    std::string v94 = *(std::string *)a3;
  }
  if (*((char *)a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v96, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else {
    std::string v96 = *(std::string *)a2;
  }
  int v6 = SHIBYTE(v96.__r_.__value_.__r.__words[2]);
  uint64_t v7 = (void *)v96.__r_.__value_.__r.__words[0];
  char v8 = HIBYTE(v94.__r_.__value_.__r.__words[2]);
  if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v94.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v94.__r_.__value_.__l.__size_;
  }
  if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v10 = &v94;
  }
  else {
    uint64_t v10 = (std::string *)v94.__r_.__value_.__r.__words[0];
  }
  if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v11 = HIBYTE(v96.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v11 = v96.__r_.__value_.__l.__size_;
  }
  if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    CFAllocatorRef v12 = &v96;
  }
  else {
    CFAllocatorRef v12 = (std::string *)v96.__r_.__value_.__r.__words[0];
  }
  if (v11 >= size) {
    size_t v13 = size;
  }
  else {
    size_t v13 = v11;
  }
  BOOL v14 = memcmp(v10, v12, v13) == 0;
  BOOL v15 = v11 == size && v14;
  if (v6 < 0)
  {
    operator delete(v7);
    if ((*((unsigned char *)&v94.__r_.__value_.__s + 23) & 0x80) == 0)
    {
LABEL_27:
      if (v15) {
        goto LABEL_28;
      }
LABEL_32:
      long long v16 = *((void *)this + 1);
      BOOL result = os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG);
      if (!result) {
        return result;
      }
      LOWORD(v94.__r_.__value_.__l.__data_) = 0;
      long long v18 = "#D Two reset types are not same. No need to check duplicated signature";
      goto LABEL_34;
    }
  }
  else if ((v8 & 0x80) == 0)
  {
    goto LABEL_27;
  }
  operator delete(v94.__r_.__value_.__l.__data_);
  if (!v15) {
    goto LABEL_32;
  }
LABEL_28:
  if (*((char *)a3 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v94, *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else {
    std::string v94 = *(std::string *)a3;
  }
  size_t v19 = strlen((const char *)*MEMORY[0x1E4F4C6E8]);
  std::string::size_type v20 = v19;
  char v21 = HIBYTE(v94.__r_.__value_.__r.__words[2]);
  if ((SHIBYTE(v94.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (v19 != -1)
    {
      std::string v22 = &v94;
      std::string::size_type v23 = HIBYTE(v94.__r_.__value_.__r.__words[2]);
      goto LABEL_41;
    }
LABEL_254:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v19 == -1) {
    goto LABEL_254;
  }
  std::string::size_type v23 = v94.__r_.__value_.__l.__size_;
  std::string v22 = (std::string *)v94.__r_.__value_.__r.__words[0];
LABEL_41:
  if (v23 >= v20) {
    size_t v24 = v20;
  }
  else {
    size_t v24 = v23;
  }
  BOOL v25 = memcmp(v22, (const void *)*MEMORY[0x1E4F4C6E8], v24) == 0;
  BOOL v26 = v23 == v20 && v25;
  if ((v21 & 0x80) == 0)
  {
    if (v26) {
      goto LABEL_49;
    }
LABEL_53:
    if (*((char *)a2 + 71) < 0) {
      std::string::__init_copy_ctor_external(&v94, *((const std::string::value_type **)a2 + 6), *((void *)a2 + 7));
    }
    else {
      std::string v94 = *(std::string *)((unsigned char *)a2 + 2);
    }
    long long v28 = (_OWORD *)((char *)a3 + 48);
    if (*((char *)a3 + 71) < 0)
    {
      std::string::__init_copy_ctor_external(&v96, *((const std::string::value_type **)a3 + 6), *((void *)a3 + 7));
    }
    else
    {
      *(_OWORD *)&v96.__r_.__value_.__l.__data_ = *v28;
      v96.__r_.__value_.__r.__words[2] = *((void *)a3 + 8);
    }
    *(void *)long long __dst = operator new(0x68uLL);
    *(_OWORD *)&__dst[8] = xmmword_1C59A3860;
    strcpy(*(char **)__dst, "(Power assertion watchdog fired for 'com.apple.AppleBasebandManager.RadioNotReady.Bootup'; Timeout =).*");
    int v29 = util::compareTwoStringsWithPattern((uint64_t)&v94, (uint64_t)&v96, (uint64_t)__dst);
    if ((__dst[23] & 0x80000000) != 0)
    {
      operator delete(*(void **)__dst);
      if ((SHIBYTE(v96.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_61:
        if ((SHIBYTE(v94.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_62;
        }
        goto LABEL_121;
      }
    }
    else if ((SHIBYTE(v96.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_61;
    }
    operator delete(v96.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v94.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_62:
      if (!v29) {
        return 0;
      }
      goto LABEL_122;
    }
LABEL_121:
    operator delete(v94.__r_.__value_.__l.__data_);
    if (!v29) {
      return 0;
    }
LABEL_122:
    dispatch_object_t v50 = *((void *)this + 1);
    if (!os_log_type_enabled(v50, OS_LOG_TYPE_DEBUG)) {
      return 1;
    }
    if (*((char *)a3 + 71) < 0)
    {
      std::string::__init_copy_ctor_external(&v94, *((const std::string::value_type **)a3 + 6), *((void *)a3 + 7));
    }
    else
    {
      *(_OWORD *)&v94.__r_.__value_.__l.__data_ = *v28;
      v94.__r_.__value_.__r.__words[2] = *((void *)a3 + 8);
    }
    int v91 = &v94;
    if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      int v91 = (std::string *)v94.__r_.__value_.__r.__words[0];
    }
    LODWORD(v96.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)v96.__r_.__value_.__r.__words + 4) = (std::string::size_type)v91;
LABEL_244:
    _os_log_debug_impl(&dword_1C5767000, v50, OS_LOG_TYPE_DEBUG, "#D This is duplicated signature based on the dump reason: \"%s\"", (uint8_t *)&v96, 0xCu);
    if ((SHIBYTE(v94.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return 1;
    }
    operator delete(v94.__r_.__value_.__l.__data_);
    return 1;
  }
  operator delete(v94.__r_.__value_.__l.__data_);
  if (!v26) {
    goto LABEL_53;
  }
LABEL_49:
  CFMutableArrayRef v27 = *((void *)this + 1);
  if (os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG))
  {
    if (*((char *)a3 + 111) < 0) {
      std::string::__init_copy_ctor_external(&v94, *((const std::string::value_type **)a3 + 11), *((void *)a3 + 12));
    }
    else {
      std::string v94 = *(std::string *)((char *)a3 + 88);
    }
    int v75 = SHIBYTE(v94.__r_.__value_.__r.__words[2]);
    std::string::size_type v76 = v94.__r_.__value_.__r.__words[0];
    if (*((char *)a2 + 111) < 0) {
      std::string::__init_copy_ctor_external(&v96, *((const std::string::value_type **)a2 + 11), *((void *)a2 + 12));
    }
    else {
      std::string v96 = *(std::string *)((char *)a2 + 88);
    }
    unsigned int v77 = &v94;
    if (v75 < 0) {
      unsigned int v77 = (std::string *)v76;
    }
    xpc_object_t v78 = &v96;
    if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      xpc_object_t v78 = (std::string *)v96.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)long long __dst = 136315394;
    *(void *)&__dst[4] = v77;
    *(_WORD *)&__dst[12] = 2080;
    *(void *)&__dst[14] = v78;
    _os_log_debug_impl(&dword_1C5767000, v27, OS_LOG_TYPE_DEBUG, "#D Comparing current reason, \"%s\", and the recorded reason, \"%s\"", __dst, 0x16u);
    if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v96.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v94.__r_.__value_.__l.__data_);
    }
  }
  if (*((char *)a3 + 111) < 0) {
    std::string::__init_copy_ctor_external(&v94, *((const std::string::value_type **)a3 + 11), *((void *)a3 + 12));
  }
  else {
    std::string v94 = *(std::string *)((char *)a3 + 88);
  }
  if (*((char *)a2 + 111) < 0) {
    std::string::__init_copy_ctor_external(&v96, *((const std::string::value_type **)a2 + 11), *((void *)a2 + 12));
  }
  else {
    std::string v96 = *(std::string *)((char *)a2 + 88);
  }
  int v30 = SHIBYTE(v96.__r_.__value_.__r.__words[2]);
  std::string v31 = (void *)v96.__r_.__value_.__r.__words[0];
  char v32 = HIBYTE(v94.__r_.__value_.__r.__words[2]);
  if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v33 = HIBYTE(v94.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v33 = v94.__r_.__value_.__l.__size_;
  }
  if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    CFMutableArrayRef v34 = &v94;
  }
  else {
    CFMutableArrayRef v34 = (std::string *)v94.__r_.__value_.__r.__words[0];
  }
  if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v35 = HIBYTE(v96.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v35 = v96.__r_.__value_.__l.__size_;
  }
  if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v36 = &v96;
  }
  else {
    uint64_t v36 = (std::string *)v96.__r_.__value_.__r.__words[0];
  }
  if (v35 >= v33) {
    size_t v37 = v33;
  }
  else {
    size_t v37 = v35;
  }
  BOOL v38 = memcmp(v34, v36, v37) == 0;
  BOOL v39 = v35 == v33 && v38;
  if ((v30 & 0x80000000) == 0)
  {
    if ((v32 & 0x80) == 0) {
      goto LABEL_88;
    }
LABEL_116:
    operator delete(v94.__r_.__value_.__l.__data_);
    if (v39) {
      goto LABEL_89;
    }
    goto LABEL_117;
  }
  operator delete(v31);
  if ((*((unsigned char *)&v94.__r_.__value_.__s + 23) & 0x80) != 0) {
    goto LABEL_116;
  }
LABEL_88:
  if (!v39)
  {
LABEL_117:
    long long v16 = *((void *)this + 1);
    BOOL result = os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG);
    if (!result) {
      return result;
    }
    LOWORD(v94.__r_.__value_.__l.__data_) = 0;
    long long v18 = "#D Two crash reasons are not identical. No need to check duplicated signature";
LABEL_34:
    _os_log_debug_impl(&dword_1C5767000, v16, OS_LOG_TYPE_DEBUG, v18, (uint8_t *)&v94, 2u);
    return 0;
  }
LABEL_89:
  uint64_t v40 = 0;
  int v41 = (_OWORD *)((char *)a3 + 48);
  do
  {
    if (*((char *)a2 + 71) < 0) {
      std::string::__init_copy_ctor_external(&v94, *((const std::string::value_type **)a2 + 6), *((void *)a2 + 7));
    }
    else {
      std::string v94 = *(std::string *)((unsigned char *)a2 + 2);
    }
    if (*((char *)a3 + 71) < 0)
    {
      std::string::__init_copy_ctor_external(&v96, *((const std::string::value_type **)a3 + 6), *((void *)a3 + 7));
    }
    else
    {
      *(_OWORD *)&v96.__r_.__value_.__l.__data_ = *v41;
      v96.__r_.__value_.__r.__words[2] = *((void *)a3 + 8);
    }
    uint64_t v42 = abm::kInterestingHardResetReasonSignatures[v40];
    size_t v43 = strlen(v42);
    if (v43 >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    size_t v44 = v43;
    if (v43 >= 0x17)
    {
      uint64_t v46 = (v43 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v43 | 7) != 0x17) {
        uint64_t v46 = v43 | 7;
      }
      uint64_t v47 = v46 + 1;
      uint64_t v45 = operator new(v46 + 1);
      *(void *)&__dst[8] = v44;
      *(void *)&__dst[16] = v47 | 0x8000000000000000;
      *(void *)long long __dst = v45;
LABEL_103:
      memmove(v45, v42, v44);
      goto LABEL_104;
    }
    __dst[23] = v43;
    uint64_t v45 = __dst;
    if (v43) {
      goto LABEL_103;
    }
LABEL_104:
    v45[v44] = 0;
    int v48 = util::compareTwoStringsWithPattern((uint64_t)&v94, (uint64_t)&v96, (uint64_t)__dst);
    if ((__dst[23] & 0x80000000) != 0)
    {
      operator delete(*(void **)__dst);
      if ((SHIBYTE(v96.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_106:
        if ((SHIBYTE(v94.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_107;
        }
        goto LABEL_111;
      }
    }
    else if ((SHIBYTE(v96.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_106;
    }
    operator delete(v96.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v94.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_107:
      if (v48) {
        goto LABEL_125;
      }
      goto LABEL_112;
    }
LABEL_111:
    operator delete(v94.__r_.__value_.__l.__data_);
    if (v48)
    {
LABEL_125:
      dispatch_object_t v50 = *((void *)this + 1);
      if (!os_log_type_enabled(v50, OS_LOG_TYPE_DEBUG)) {
        return 1;
      }
      if (*((char *)a3 + 71) < 0)
      {
        std::string::__init_copy_ctor_external(&v94, *((const std::string::value_type **)a3 + 6), *((void *)a3 + 7));
      }
      else
      {
        *(_OWORD *)&v94.__r_.__value_.__l.__data_ = *v41;
        v94.__r_.__value_.__r.__words[2] = *((void *)a3 + 8);
      }
      std::string v92 = &v94;
      if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string v92 = (std::string *)v94.__r_.__value_.__r.__words[0];
      }
      LODWORD(v96.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)v96.__r_.__value_.__r.__words + 4) = (std::string::size_type)v92;
      goto LABEL_244;
    }
LABEL_112:
    ++v40;
  }
  while (v40 != 8);
  if (*((char *)a3 + 111) < 0)
  {
    std::string::__init_copy_ctor_external(&v94, *((const std::string::value_type **)a3 + 11), *((void *)a3 + 12));
    size_t v49 = (std::string *)((char *)a3 + 88);
  }
  else
  {
    size_t v49 = (std::string *)((char *)a3 + 88);
    std::string v94 = *(std::string *)((char *)a3 + 88);
  }
  int v51 = SHIBYTE(v94.__r_.__value_.__r.__words[2]);
  unint64_t v52 = (void *)v94.__r_.__value_.__r.__words[0];
  if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string v53 = &v94;
  }
  else {
    std::string v53 = (std::string *)v94.__r_.__value_.__r.__words[0];
  }
  int64_t v54 = HIBYTE(v94.__r_.__value_.__r.__words[2]);
  if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    int64_t v54 = v94.__r_.__value_.__l.__size_;
  }
  long long v55 = (char *)v53 + v54;
  if (v54 >= 17)
  {
    unint64_t v58 = v53;
    long long v57 = this;
    do
    {
      uint64_t v56 = (char *)memchr(v58, 67, v54 - 16);
      if (!v56) {
        break;
      }
      if (*(void *)v56 == 0x63206D6F74737543 && *((void *)v56 + 1) == 0x7079742068736172 && v56[16] == 101) {
        goto LABEL_146;
      }
      unint64_t v58 = (std::string *)(v56 + 1);
      int64_t v54 = v55 - (char *)v58;
    }
    while (v55 - (char *)v58 > 16);
    uint64_t v56 = v55;
  }
  else
  {
    uint64_t v56 = (char *)v53 + v54;
    long long v57 = this;
  }
LABEL_146:
  BOOL v62 = v56 == v55 || v56 - (char *)v53 == -1;
  if (v51 < 0) {
    operator delete(v52);
  }
  if (v62)
  {
    if (*((char *)a3 + 111) < 0)
    {
      std::string::__init_copy_ctor_external(&v94, *((const std::string::value_type **)a3 + 11), *((void *)a3 + 12));
      size_t v49 = (std::string *)((char *)a3 + 88);
    }
    else
    {
      std::string v94 = *v49;
    }
    int v64 = SHIBYTE(v94.__r_.__value_.__r.__words[2]);
    uint64_t v65 = (void *)v94.__r_.__value_.__r.__words[0];
    if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unint64_t v66 = &v94;
    }
    else {
      unint64_t v66 = (std::string *)v94.__r_.__value_.__r.__words[0];
    }
    int64_t v67 = HIBYTE(v94.__r_.__value_.__r.__words[2]);
    if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      int64_t v67 = v94.__r_.__value_.__l.__size_;
    }
    uint64_t v68 = (char *)v66 + v67;
    if (v67 >= 18)
    {
      uint64_t v70 = v66;
      long long v57 = this;
      do
      {
        dispatch_object_t v69 = (char *)memchr(v70, 67, v67 - 17);
        if (!v69) {
          break;
        }
        if (*(void *)v69 == 0x7274206873617243
          && *((void *)v69 + 1) == 0x2064657265676769
          && *((_WORD *)v69 + 8) == 31074)
        {
          goto LABEL_179;
        }
        uint64_t v70 = (std::string *)(v69 + 1);
        int64_t v67 = v68 - (char *)v70;
      }
      while (v68 - (char *)v70 >= 18);
      dispatch_object_t v69 = v68;
    }
    else
    {
      dispatch_object_t v69 = (char *)v66 + v67;
      long long v57 = this;
    }
LABEL_179:
    BOOL v74 = v69 == v68 || v69 - (char *)v66 == -1;
    if (v64 < 0) {
      operator delete(v65);
    }
    if (v74)
    {
      if (*((char *)a3 + 111) < 0)
      {
        std::string::__init_copy_ctor_external(&v94, *((const std::string::value_type **)a3 + 11), *((void *)a3 + 12));
        size_t v49 = (std::string *)((char *)a3 + 88);
      }
      else
      {
        std::string v94 = *v49;
      }
      int v79 = SHIBYTE(v94.__r_.__value_.__r.__words[2]);
      xpc_object_t v80 = (void *)v94.__r_.__value_.__r.__words[0];
      if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        long long v81 = &v94;
      }
      else {
        long long v81 = (std::string *)v94.__r_.__value_.__r.__words[0];
      }
      int64_t v82 = HIBYTE(v94.__r_.__value_.__r.__words[2]);
      if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        int64_t v82 = v94.__r_.__value_.__l.__size_;
      }
      xpc_object_t v83 = (char *)v81 + v82;
      if (v82 >= 14)
      {
        size_t v85 = v81;
        long long v57 = this;
        do
        {
          xpc_object_t v84 = (char *)memchr(v85, 67, v82 - 13);
          if (!v84) {
            break;
          }
          if (*(void *)v84 == 0x6E69206873617243 && *(void *)(v84 + 6) == 0x64657463656A6E69) {
            goto LABEL_219;
          }
          size_t v85 = (std::string *)(v84 + 1);
          int64_t v82 = v83 - (char *)v85;
        }
        while (v83 - (char *)v85 >= 14);
        xpc_object_t v84 = v83;
      }
      else
      {
        xpc_object_t v84 = (char *)v81 + v82;
        long long v57 = this;
      }
LABEL_219:
      BOOL v88 = v84 == v83 || v84 - (char *)v81 == -1;
      if (v79 < 0) {
        operator delete(v80);
      }
      if (v88)
      {
        uint64_t v89 = *((void *)v57 + 1);
        if (os_log_type_enabled(v89, OS_LOG_TYPE_DEBUG))
        {
          LOWORD(v94.__r_.__value_.__l.__data_) = 0;
          _os_log_debug_impl(&dword_1C5767000, v89, OS_LOG_TYPE_DEBUG, "#D The crash reason has duplicated signature", (uint8_t *)&v94, 2u);
        }
        return 1;
      }
      std::string::size_type v63 = "Crash injected";
    }
    else
    {
      std::string::size_type v63 = "Crash triggered by";
    }
  }
  else
  {
    std::string::size_type v63 = "Custom crash type";
  }
  size_t v90 = *((void *)v57 + 1);
  BOOL result = os_log_type_enabled(v90, OS_LOG_TYPE_DEBUG);
  if (!result) {
    return result;
  }
  if (*((char *)a3 + 111) < 0) {
    std::string::__init_copy_ctor_external(&v94, *((const std::string::value_type **)a3 + 11), *((void *)a3 + 12));
  }
  else {
    std::string v94 = *v49;
  }
  size_t v93 = &v94;
  if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    size_t v93 = (std::string *)v94.__r_.__value_.__r.__words[0];
  }
  LODWORD(v96.__r_.__value_.__l.__data_) = 136315394;
  *(std::string::size_type *)((char *)v96.__r_.__value_.__r.__words + 4) = (std::string::size_type)v93;
  WORD2(v96.__r_.__value_.__r.__words[1]) = 2080;
  *(std::string::size_type *)((char *)&v96.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v63;
  _os_log_debug_impl(&dword_1C5767000, v90, OS_LOG_TYPE_DEBUG, "#D This is NOT duplicated signature based on the crash reason: \"%s\" has \"%s\"", (uint8_t *)&v96, 0x16u);
  if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v94.__r_.__value_.__l.__data_);
  }
  return 0;
}

void sub_1C58A7720(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a16 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void LogDumpDB::clearDB(LogDumpDB *this)
{
  CFTypeRef cf = 0;
  CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  if (Mutable) {
    CFTypeRef cf = Mutable;
  }
  pthread_mutex_lock(&ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance);
  long long v3 = (os_unfair_lock_s *)off_1EBBDD340;
  if (!off_1EBBDD340)
  {
    SharedData::create_default_global(buf);
    long long v4 = *(_OWORD *)buf;
    memset(buf, 0, sizeof(buf));
    xpc_object_t v5 = (std::__shared_weak_count *)*(&off_1EBBDD340 + 1);
    off_1EBBDD340 = v4;
    if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    int v6 = *(std::__shared_weak_count **)&buf[8];
    if (*(void *)&buf[8]
      && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
    long long v3 = (os_unfair_lock_s *)off_1EBBDD340;
  }
  uint64_t v7 = (std::__shared_weak_count *)*(&off_1EBBDD340 + 1);
  if (*(&off_1EBBDD340 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDD340 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance);
  char v12 = 16;
  strcpy(__p, "Log Dump History");
  CFTypeRef v16 = cf;
  *(void *)std::string buf = __p;
  *(void *)&uint8_t buf[8] = &v16;
  BOOL v15 = v3;
  ctu::SharedLockable<SharedData>::execute_sync<BOOL SharedData::setPreference<__CFArray *>(std::string const&,__CFArray *)::{lambda(void)#1}>(v3 + 6, (uint64_t *)buf);
  if (v12 < 0) {
    operator delete(*(void **)__p);
  }
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  uint64_t v8 = *((void *)this + 3);
  for (uint64_t i = *((void *)this + 4); i != v8; i -= 112)
  {
    if (*(char *)(i - 1) < 0)
    {
      operator delete(*(void **)(i - 24));
      if ((*(char *)(i - 41) & 0x80000000) == 0)
      {
LABEL_23:
        if (*(char *)(i - 65) < 0) {
          goto LABEL_28;
        }
        goto LABEL_24;
      }
    }
    else if ((*(char *)(i - 41) & 0x80000000) == 0)
    {
      goto LABEL_23;
    }
    operator delete(*(void **)(i - 64));
    if (*(char *)(i - 65) < 0)
    {
LABEL_28:
      operator delete(*(void **)(i - 88));
      if ((*(char *)(i - 89) & 0x80000000) == 0) {
        continue;
      }
      goto LABEL_29;
    }
LABEL_24:
    if ((*(char *)(i - 89) & 0x80000000) == 0) {
      continue;
    }
LABEL_29:
    operator delete(*(void **)(i - 112));
  }
  *((void *)this + 4) = v8;
  uint64_t v10 = *((void *)this + 1);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl(&dword_1C5767000, v10, OS_LOG_TYPE_DEFAULT, "#I Log Dump DB is cleared", buf, 2u);
  }
  if (cf) {
    CFRelease(cf);
  }
}

void sub_1C58A7A68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  pthread_mutex_unlock(&ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance);
  ctu::cf::CFSharedRef<__CFArray>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

std::string::value_type *std::vector<ResetInfo>::__push_back_slow_path<ResetInfo const&>(void *a1, long long *a2)
{
  uint64_t v2 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(a1[1] - *a1) >> 4);
  unint64_t v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) > 0x249249249249249) {
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  }
  if (0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(a1[2] - *a1) >> 4) > v3) {
    unint64_t v3 = 0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(a1[2] - *a1) >> 4);
  }
  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((uint64_t)(a1[2] - *a1) >> 4)) >= 0x124924924924924) {
    unint64_t v6 = 0x249249249249249;
  }
  else {
    unint64_t v6 = v3;
  }
  if (v6)
  {
    if (v6 > 0x249249249249249) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    uint64_t v7 = (char *)operator new(112 * v6);
  }
  else
  {
    uint64_t v7 = 0;
  }
  BOOL v15 = (std::string *)&v7[112 * v2];
  *((void *)&v16 + 1) = &v7[112 * v6];
  ResetInfo::ResetInfo(v15, a2);
  uint64_t v8 = 0;
  uint64_t v10 = (void **)*a1;
  for (uint64_t i = a1[1]; (void **)(i + v8) != v10; ResetInfo::ResetInfo((std::string *)((char *)v15 + v8), (long long *)(v8 + i)))v8 -= 112;
  std::string::size_type v11 = (char *)v15 + v8;
  char v12 = (void **)*a1;
  size_t v13 = (void **)a1[1];
  *a1 = v11;
  *(void *)&long long v16 = (char *)v15 + 112;
  *(_OWORD *)(a1 + 1) = v16;
  while (v13 != v12)
  {
    if (*((char *)v13 - 1) < 0)
    {
      operator delete(*(v13 - 3));
      if ((*((char *)v13 - 41) & 0x80000000) == 0)
      {
LABEL_19:
        if (*((char *)v13 - 65) < 0) {
          goto LABEL_24;
        }
        goto LABEL_20;
      }
    }
    else if ((*((char *)v13 - 41) & 0x80000000) == 0)
    {
      goto LABEL_19;
    }
    operator delete(*(v13 - 8));
    if (*((char *)v13 - 65) < 0)
    {
LABEL_24:
      operator delete(*(v13 - 11));
      if ((*((char *)v13 - 89) & 0x80000000) == 0) {
        goto LABEL_15;
      }
      goto LABEL_25;
    }
LABEL_20:
    if ((*((char *)v13 - 89) & 0x80000000) == 0) {
      goto LABEL_15;
    }
LABEL_25:
    operator delete(*(v13 - 14));
LABEL_15:
    v13 -= 14;
  }
  if (v12) {
    operator delete(v12);
  }
  return &v15[4].__r_.__value_.__s.__data_[16];
}

void sub_1C58A7C6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::__split_buffer<ResetInfo>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<ResetInfo>::~__split_buffer(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v2; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 112;
    if (*(char *)(i - 1) < 0)
    {
      operator delete(*(void **)(i - 24));
      if ((*(char *)(i - 41) & 0x80000000) == 0)
      {
LABEL_6:
        if (*(char *)(i - 65) < 0) {
          goto LABEL_11;
        }
        goto LABEL_7;
      }
    }
    else if ((*(char *)(i - 41) & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(*(void **)(i - 64));
    if (*(char *)(i - 65) < 0)
    {
LABEL_11:
      operator delete(*(void **)(i - 88));
      if ((*(char *)(i - 89) & 0x80000000) == 0) {
        continue;
      }
      goto LABEL_12;
    }
LABEL_7:
    if ((*(char *)(i - 89) & 0x80000000) == 0) {
      continue;
    }
LABEL_12:
    operator delete(*(void **)(i - 112));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

BOOL LogDumpDB::isDuplicated(ResetInfo const&,std::chrono::duration<long long,std::ratio<1l,1l>>)::$_0::operator()(uint64_t a1, const ResetInfo *a2)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  long long v4 = *(LogDumpDB **)(a1 + 8);
  BOOL v5 = LogDumpDB::checkIfDuplicatedSignature(v4, a2, (const ResetInfo *)(a1 + 16));
  if (v5)
  {
    uint64_t v6 = *((void *)a2 + 9);
    if (*(void *)(a1 + 88) - v6 < *(void *)(a1 + 128))
    {
      uint64_t v7 = *((void *)v4 + 1);
      if (!os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
LABEL_23:
        **(unsigned char **)a1 = 1;
        return v5;
      }
      uint64_t v8 = operator new(0x38uLL);
      uint8_t v8[8] = 0;
      *(void *)uint64_t v8 = 0;
      *((void *)v8 + 1) = 0;
      *((void *)v8 + 2) = &v24.__r_.__value_.__l.__size_;
      v24.__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
      v24.__r_.__value_.__l.__size_ = (std::string::size_type)v8;
      *((unsigned char *)v8 + 24) = 1;
      v24.__r_.__value_.__r.__words[2] = 1;
      *((void *)v8 + 5) = v6;
      *((void *)v8 + 6) = 0xAAAAAAAA00000000;
      BOOL v9 = v22;
      Timestamp::asString((uint64_t)&v24, 0, 9, v22);
      std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&v24, (void *)v24.__r_.__value_.__l.__size_);
      if (v23 < 0) {
        BOOL v9 = (void **)v22[0];
      }
      uint64_t v10 = *(void *)(a1 + 88);
      std::string::size_type v11 = operator new(0x38uLL);
      v11[8] = 0;
      *(void *)std::string::size_type v11 = 0;
      *((void *)v11 + 1) = 0;
      *((void *)v11 + 2) = &v24.__r_.__value_.__l.__size_;
      v24.__r_.__value_.__r.__words[0] = (std::string::size_type)v11;
      v24.__r_.__value_.__l.__size_ = (std::string::size_type)v11;
      *((unsigned char *)v11 + 24) = 1;
      v24.__r_.__value_.__r.__words[2] = 1;
      *((void *)v11 + 5) = v10;
      *((void *)v11 + 6) = 0xAAAAAAAA00000000;
      Timestamp::asString((uint64_t)&v24, 0, 9, v20);
      std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&v24, (void *)v24.__r_.__value_.__l.__size_);
      if (v21 >= 0) {
        char v12 = v20;
      }
      else {
        char v12 = (void **)v20[0];
      }
      uint64_t v13 = *(void *)(a1 + 88);
      if (*(char *)(a1 + 87) < 0) {
        std::string::__init_copy_ctor_external(&v24, *(const std::string::value_type **)(a1 + 64), *(void *)(a1 + 72));
      }
      else {
        std::string v24 = *(std::string *)(a1 + 64);
      }
      int v14 = SHIBYTE(v24.__r_.__value_.__r.__words[2]);
      std::string::size_type v15 = v24.__r_.__value_.__r.__words[0];
      if (*(char *)(a1 + 127) < 0) {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a1 + 104), *(void *)(a1 + 112));
      }
      else {
        std::string __p = *(std::string *)(a1 + 104);
      }
      long long v16 = &v24;
      if (v14 < 0) {
        long long v16 = (std::string *)v15;
      }
      p_p = &__p;
      *(_DWORD *)std::string buf = 136316418;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      BOOL v26 = v9;
      __int16 v27 = 2050;
      uint64_t v28 = v6;
      __int16 v29 = 2080;
      int v30 = v12;
      __int16 v31 = 2050;
      uint64_t v32 = v13;
      __int16 v33 = 2082;
      CFMutableArrayRef v34 = v16;
      __int16 v35 = 2082;
      uint64_t v36 = p_p;
      _os_log_impl(&dword_1C5767000, v7, OS_LOG_TYPE_DEFAULT, "#I Found duplicated log at timestamp: %s[%{public}llu], new log timestamp: %s[%{public}llu], dump reason: %{public}s, crash reason: %{public}s", buf, 0x3Eu);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v24.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_21:
          if ((v21 & 0x80000000) == 0) {
            goto LABEL_22;
          }
          goto LABEL_27;
        }
      }
      else if ((SHIBYTE(v24.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_21;
      }
      operator delete(v24.__r_.__value_.__l.__data_);
      if ((v21 & 0x80000000) == 0)
      {
LABEL_22:
        if ((v23 & 0x80000000) == 0) {
          goto LABEL_23;
        }
LABEL_28:
        operator delete(v22[0]);
        goto LABEL_23;
      }
LABEL_27:
      operator delete(v20[0]);
      if ((v23 & 0x80000000) == 0) {
        goto LABEL_23;
      }
      goto LABEL_28;
    }
  }
  return v5;
}

void sub_1C58A8050(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a30 < 0)
  {
    operator delete(__p);
    if ((a18 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a24 & 0x80000000) == 0) {
LABEL_8:
      }
        _Unwind_Resume(exception_object);
LABEL_7:
      operator delete(a19);
      _Unwind_Resume(exception_object);
    }
  }
  else if ((a18 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a13);
  if ((a24 & 0x80000000) == 0) {
    goto LABEL_8;
  }
  goto LABEL_7;
}

char *ResetInfo::operator=(char *a1, char *a2)
{
  if (a1 == a2) {
    return a1;
  }
  unint64_t v3 = a2;
  if ((a1[23] & 0x80000000) == 0)
  {
    if (a2[23] < 0)
    {
      std::string::__assign_no_alias<true>(a1, *(void **)a2, *((void *)a2 + 1));
      BOOL v5 = (void **)(a1 + 24);
      uint64_t v6 = v3 + 24;
      size_t v7 = v3[47];
      if (a1[47] < 0) {
        goto LABEL_14;
      }
    }
    else
    {
      long long v4 = *(_OWORD *)a2;
      *((void *)a1 + 2) = *((void *)a2 + 2);
      *(_OWORD *)a1 = v4;
      BOOL v5 = (void **)(a1 + 24);
      uint64_t v6 = a2 + 24;
      size_t v7 = a2[47];
      if (a1[47] < 0) {
        goto LABEL_14;
      }
    }
LABEL_10:
    if ((v7 & 0x80) != 0)
    {
      std::string::__assign_no_alias<true>(v5, *((void **)v3 + 3), *((void *)v3 + 4));
      uint64_t v10 = (void **)(a1 + 48);
      std::string::size_type v11 = v3 + 48;
      size_t v12 = v3[71];
      if (a1[71] < 0) {
        goto LABEL_24;
      }
    }
    else
    {
      long long v9 = *(_OWORD *)v6;
      v5[2] = (void *)*((void *)v6 + 2);
      *(_OWORD *)BOOL v5 = v9;
      uint64_t v10 = (void **)(a1 + 48);
      std::string::size_type v11 = v3 + 48;
      size_t v12 = v3[71];
      if (a1[71] < 0) {
        goto LABEL_24;
      }
    }
LABEL_21:
    if ((v12 & 0x80) != 0)
    {
      std::string::__assign_no_alias<true>(v10, *((void **)v3 + 6), *((void *)v3 + 7));
    }
    else
    {
      long long v15 = *(_OWORD *)v11;
      v10[2] = (void *)v11[2];
      *(_OWORD *)uint64_t v10 = v15;
    }
    goto LABEL_32;
  }
  if (a2[23] >= 0)
  {
    size_t v8 = a2[23];
  }
  else
  {
    a2 = *(char **)a2;
    size_t v8 = *((void *)v3 + 1);
  }
  std::string::__assign_no_alias<false>((void **)a1, a2, v8);
  BOOL v5 = (void **)(a1 + 24);
  uint64_t v6 = v3 + 24;
  size_t v7 = v3[47];
  if ((a1[47] & 0x80000000) == 0) {
    goto LABEL_10;
  }
LABEL_14:
  if ((v7 & 0x80u) == 0) {
    uint64_t v13 = v6;
  }
  else {
    uint64_t v13 = (void *)*((void *)v3 + 3);
  }
  if ((v7 & 0x80u) == 0) {
    size_t v14 = v7;
  }
  else {
    size_t v14 = *((void *)v3 + 4);
  }
  std::string::__assign_no_alias<false>(v5, v13, v14);
  uint64_t v10 = (void **)(a1 + 48);
  std::string::size_type v11 = v3 + 48;
  size_t v12 = v3[71];
  if ((a1[71] & 0x80000000) == 0) {
    goto LABEL_21;
  }
LABEL_24:
  if ((v12 & 0x80u) == 0) {
    long long v16 = v11;
  }
  else {
    long long v16 = (void *)*((void *)v3 + 6);
  }
  if ((v12 & 0x80u) == 0) {
    size_t v17 = v12;
  }
  else {
    size_t v17 = *((void *)v3 + 7);
  }
  std::string::__assign_no_alias<false>(v10, v16, v17);
LABEL_32:
  uint64_t v18 = *((void *)v3 + 9);
  *((_DWORD *)a1 + 20) = *((_DWORD *)v3 + 20);
  *((void *)a1 + 9) = v18;
  size_t v19 = (void **)(a1 + 88);
  char v20 = v3[111];
  if (a1[111] < 0)
  {
    if (v20 >= 0) {
      char v23 = v3 + 88;
    }
    else {
      char v23 = (void *)*((void *)v3 + 11);
    }
    if (v20 >= 0) {
      size_t v24 = v3[111];
    }
    else {
      size_t v24 = *((void *)v3 + 12);
    }
    std::string::__assign_no_alias<false>(v19, v23, v24);
    return a1;
  }
  else
  {
    if ((v3[111] & 0x80) == 0)
    {
      long long v21 = *(_OWORD *)(v3 + 88);
      *((void *)a1 + 13) = *((void *)v3 + 13);
      *(_OWORD *)size_t v19 = v21;
      return a1;
    }
    std::string::__assign_no_alias<true>(v19, *((void **)v3 + 11), *((void *)v3 + 12));
    return a1;
  }
}

uint64_t __cxx_global_var_init_18()
{
  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<SharedData>::~PthreadMutexGuardPolicy, &ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance, &dword_1C5767000);
  }
  return result;
}

const char *SARModule::getName(SARModule *this)
{
  return "sar.mod";
}

void SARModule::create(uint64_t *a1@<X0>, SARModule **a2@<X8>)
{
  *a2 = (SARModule *)0xAAAAAAAAAAAAAAAALL;
  a2[1] = (SARModule *)0xAAAAAAAAAAAAAAAALL;
  long long v4 = (std::__shared_weak_count **)operator new(0x150uLL);
  BOOL v5 = v4;
  uint64_t v6 = *a1;
  size_t v7 = (std::__shared_weak_count *)a1[1];
  v14[0] = v6;
  v14[1] = (uint64_t)v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  SARModule::SARModule((uint64_t)v4, v14);
  *a2 = (SARModule *)v5;
  a2[1] = (SARModule *)0xAAAAAAAAAAAAAAAALL;
  size_t v8 = (std::__shared_weak_count *)operator new(0x20uLL);
  v8->__shared_owners_ = 0;
  uint64_t p_shared_owners = &v8->__shared_owners_;
  v8->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20FA910;
  v8->__shared_weak_owners_ = 0;
  v8[1].__vftable = (std::__shared_weak_count_vtbl *)v5;
  a2[1] = (SARModule *)v8;
  uint64_t v10 = v5[7];
  if (!v10)
  {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v5[6] = (std::__shared_weak_count *)v5;
    v5[7] = v8;
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
  if (v10->__shared_owners_ == -1)
  {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v5[6] = (std::__shared_weak_count *)v5;
    v5[7] = v8;
    std::__shared_weak_count::__release_weak(v10);
    if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL))
    {
LABEL_8:
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
LABEL_9:
  if (v7) {
    std::__shared_weak_count::__release_weak(v7);
  }
  std::string::size_type v11 = *a2;
  if (!*a2)
  {
    size_t v12 = GetOsLogContext()[1];
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      v13[0] = 0;
      _os_log_error_impl(&dword_1C5767000, v12, OS_LOG_TYPE_ERROR, "Failed to create SAR Module!", (uint8_t *)v13, 2u);
    }
  }
  SARModule::init(v11);
}

void sub_1C58A84C8(_Unwind_Exception *a1)
{
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_1C58A84E0(void *a1)
{
  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[8], v1, (dispatch_function_t)std::shared_ptr<SARModule> ctu::SharedSynchronizable<SARModule>::make_shared_ptr<SARModule>(SARModule*)::{lambda(SARModule*)#1}::operator() const(SARModule*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_1C58A8508(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(a1);
}

void SARModule::init(SARModule *this)
{
  uint64_t v2 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  unint64_t v3 = off_1EBBDD2A0;
  if (!off_1EBBDD2A0)
  {
    CommandDriverFactory::create_default_global((uint64_t *)buf, v2);
    long long v4 = *(_OWORD *)buf;
    memset(buf, 0, sizeof(buf));
    BOOL v5 = (std::__shared_weak_count *)*(&off_1EBBDD2A0 + 1);
    off_1EBBDD2A0 = v4;
    if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    uint64_t v6 = *(std::__shared_weak_count **)&buf[8];
    if (*(void *)&buf[8]
      && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
    unint64_t v3 = off_1EBBDD2A0;
  }
  object[1] = v3;
  size_t v24 = (std::__shared_weak_count *)*(&off_1EBBDD2A0 + 1);
  if (*(&off_1EBBDD2A0 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDD2A0 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  size_t v7 = *((void *)this + 9);
  object[0] = v7;
  if (v7) {
    dispatch_retain(v7);
  }
  (*((void (**)(long long *__return_ptr, NSObject *, dispatch_object_t *))v3->isa + 7))(&v25, v3, object);
  size_t v8 = (void *)((char *)this + 280);
  long long v9 = v25;
  long long v25 = 0uLL;
  uint64_t v10 = (std::__shared_weak_count *)*((void *)this + 36);
  *(_OWORD *)((char *)this + 280) = v9;
  if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  std::string::size_type v11 = (std::__shared_weak_count *)*((void *)&v25 + 1);
  if (*((void *)&v25 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v25 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  size_t v12 = (capabilities::radio *)object[0];
  if (object[0]) {
    dispatch_release(object[0]);
  }
  uint64_t v13 = v24;
  if (v24 && !atomic_fetch_add(&v24->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
    if (*v8)
    {
LABEL_24:
      if (capabilities::radio::maverick(v12))
      {
        memset(buf, 170, sizeof(buf));
        uint64_t v15 = *((void *)this + 6);
        size_t v14 = (std::__shared_weak_count *)*((void *)this + 7);
        if (!v14 || (long long v16 = std::__shared_weak_count::lock(v14)) == 0) {
          std::__throw_bad_weak_ptr[abi:ne180100]();
        }
        size_t v17 = v16;
        uint64_t v18 = (std::__shared_weak_count *)operator new(0x30uLL);
        size_t v19 = v18;
        v18->__shared_owners_ = 0;
        v18->__shared_weak_owners_ = 0;
        v18->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20FA960;
        char v20 = &v18[1].__vftable;
        v18[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20FAA08;
        v18[1].__shared_owners_ = v15;
        v18[1].__shared_weak_owners_ = (uint64_t)v17;
        atomic_fetch_add_explicit(&v17->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        if (atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          v18[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20FA9B0;
          *(void *)std::string buf = v18 + 1;
          *(void *)&uint8_t buf[8] = v18;
        }
        else
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
          v19[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20FA9B0;
          *(void *)std::string buf = v20;
          *(void *)&uint8_t buf[8] = v19;
        }
        atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
        antenna::CommandDriver::registerHandler();
        if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
        std::string v22 = *(std::__shared_weak_count **)&buf[8];
        if (*(void *)&buf[8])
        {
          if (!atomic_fetch_add((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
            std::__shared_weak_count::__release_weak(v22);
          }
        }
      }
      return;
    }
  }
  else if (*v8)
  {
    goto LABEL_24;
  }
  long long v21 = *((void *)this + 10);
  if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_error_impl(&dword_1C5767000, v21, OS_LOG_TYPE_ERROR, "Failed to create antenna command driver", buf, 2u);
  }
}

void sub_1C58A8A34(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v2 - 64);
  _Unwind_Resume(a1);
}

void sub_1C58A8A50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1C58A8A64(_Unwind_Exception *a1)
{
}

void sub_1C58A8A80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, dispatch_object_t object, char a15)
{
  if (object) {
    dispatch_release(object);
  }
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t SARModule::SARModule(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  long long v4 = (std::__shared_weak_count *)a2[1];
  if (v4)
  {
    atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  *(void *)a1 = &unk_1F20FC1C8;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = v4;
  if (v4)
  {
    atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    *(void *)(a1 + 24) = 0;
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = 0;
    std::__shared_weak_count::__release_weak(v4);
    *(void *)a1 = &unk_1F20F0BE0;
    std::__shared_weak_count::__release_weak(v4);
  }
  else
  {
    *(void *)(a1 + 24) = 0;
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = 0;
    *(void *)a1 = &unk_1F20F0BE0;
  }
  *(void *)a1 = &unk_1F20FA678;
  initially_inactive = dispatch_queue_attr_make_initially_inactive(0);
  uint64_t v6 = dispatch_queue_create_with_target_V2("sar.mod", initially_inactive, 0);
  dispatch_set_qos_class_floor(v6, QOS_CLASS_UTILITY, 0);
  dispatch_activate(v6);
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = v6;
  if (v6)
  {
    dispatch_retain(v6);
    *(void *)(a1 + 72) = 0;
    dispatch_release(v6);
  }
  else
  {
    *(void *)(a1 + 72) = 0;
  }
  ctu::OsLogLogger::OsLogLogger((ctu::OsLogLogger *)(a1 + 80), "com.apple.telephony.abm", "sar.mod");
  *(void *)a1 = &unk_1F20FA678;
  *(void *)(a1 + 268) = 0;
  *(void *)(a1 + 304) = 0;
  *(unsigned char *)(a1 + 312) = 0;
  *(void *)(a1 + 320) = 0;
  *(void *)(a1 + 328) = 0;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(unsigned char *)(a1 + 136) = 0;
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 144) = 0;
  *(_DWORD *)(a1 + 168) = 0;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(void *)(a1 + 248) = 0;
  *(void *)(a1 + 256) = 0;
  *(unsigned char *)(a1 + 264) = 0;
  *(void *)(a1 + 280) = 0;
  *(void *)(a1 + 288) = 0;
  *(unsigned char *)(a1 + 296) = 0;
  return a1;
}

void sub_1C58A8C5C(_Unwind_Exception *a1)
{
  ctu::SharedSynchronizable<DataStallDetection>::~SharedSynchronizable(v2);
  Service::~Service(v1);
  _Unwind_Resume(a1);
}

void SARModule::~SARModule(SARModule *this)
{
  *(void *)this = &unk_1F20FA678;
  uint64_t v2 = (char *)this + 80;
  uint64_t v3 = *((void *)this + 10);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)size_t v24 = 0;
    _os_log_impl(&dword_1C5767000, v3, OS_LOG_TYPE_DEFAULT, "#I Gone!", v24, 2u);
  }
  long long v4 = (std::__shared_weak_count *)*((void *)this + 19);
  *((void *)this + 18) = 0;
  *((void *)this + 19) = 0;
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    BOOL v5 = (std::__shared_weak_count *)*((void *)this + 16);
    *((void *)this + 15) = 0;
    *((void *)this + 16) = 0;
    if (!v5) {
      goto LABEL_9;
    }
  }
  else
  {
    BOOL v5 = (std::__shared_weak_count *)*((void *)this + 16);
    *((void *)this + 15) = 0;
    *((void *)this + 16) = 0;
    if (!v5) {
      goto LABEL_9;
    }
  }
  if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_9:
  uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 41);
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    size_t v7 = (std::__shared_weak_count *)*((void *)this + 36);
    if (!v7) {
      goto LABEL_15;
    }
  }
  else
  {
    size_t v7 = (std::__shared_weak_count *)*((void *)this + 36);
    if (!v7) {
      goto LABEL_15;
    }
  }
  if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
LABEL_15:
  size_t v8 = (std::__shared_weak_count *)*((void *)this + 32);
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    long long v9 = (std::__shared_weak_count *)*((void *)this + 29);
    if (!v9) {
      goto LABEL_21;
    }
  }
  else
  {
    long long v9 = (std::__shared_weak_count *)*((void *)this + 29);
    if (!v9) {
      goto LABEL_21;
    }
  }
  if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
LABEL_21:
  uint64_t v10 = (std::__shared_weak_count *)*((void *)this + 27);
  if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
    std::string::size_type v11 = (std::__shared_weak_count *)*((void *)this + 25);
    if (!v11) {
      goto LABEL_27;
    }
  }
  else
  {
    std::string::size_type v11 = (std::__shared_weak_count *)*((void *)this + 25);
    if (!v11) {
      goto LABEL_27;
    }
  }
  if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
LABEL_27:
  size_t v12 = (std::__shared_weak_count *)*((void *)this + 23);
  if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
    uint64_t v13 = (std::__shared_weak_count *)*((void *)this + 19);
    if (!v13) {
      goto LABEL_33;
    }
  }
  else
  {
    uint64_t v13 = (std::__shared_weak_count *)*((void *)this + 19);
    if (!v13) {
      goto LABEL_33;
    }
  }
  if (!atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
LABEL_33:
  size_t v14 = (std::__shared_weak_count *)*((void *)this + 16);
  if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
    uint64_t v15 = (std::__shared_weak_count *)*((void *)this + 14);
    if (!v15) {
      goto LABEL_39;
    }
  }
  else
  {
    uint64_t v15 = (std::__shared_weak_count *)*((void *)this + 14);
    if (!v15) {
      goto LABEL_39;
    }
  }
  if (!atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
LABEL_39:
  long long v16 = (std::__shared_weak_count *)*((void *)this + 12);
  if (!v16 || atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    MEMORY[0x1C8790F80](v2);
    size_t v17 = *((void *)this + 9);
    if (!v17) {
      goto LABEL_43;
    }
    goto LABEL_42;
  }
  ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
  std::__shared_weak_count::__release_weak(v16);
  MEMORY[0x1C8790F80](v2);
  size_t v17 = *((void *)this + 9);
  if (v17) {
LABEL_42:
  }
    dispatch_release(v17);
LABEL_43:
  uint64_t v18 = *((void *)this + 8);
  if (v18) {
    dispatch_release(v18);
  }
  size_t v19 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v19) {
    std::__shared_weak_count::__release_weak(v19);
  }
  *(void *)this = &unk_1F20FC1C8;
  uint64_t v20 = *((void *)this + 3);
  if (v20)
  {
    uint64_t v21 = *((void *)this + 4);
    std::string v22 = (void *)*((void *)this + 3);
    if (v21 != v20)
    {
      do
      {
        if (*(char *)(v21 - 1) < 0) {
          operator delete(*(void **)(v21 - 24));
        }
        v21 -= 24;
      }
      while (v21 != v20);
      std::string v22 = (void *)*((void *)this + 3);
    }
    *((void *)this + 4) = v20;
    operator delete(v22);
  }
  char v23 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v23) {
    std::__shared_weak_count::__release_weak(v23);
  }
}

{
  void *v1;
  uint64_t vars8;

  SARModule::~SARModule(this);

  operator delete(v1);
}

void SARModule::shutdown(void *a1, uint64_t a2, dispatch_object_t *a3)
{
  long long v4 = *a3;
  if (*a3)
  {
    dispatch_retain(*a3);
    dispatch_group_enter(v4);
  }
  BOOL v5 = (std::__shared_weak_count *)a1[7];
  if (!v5 || (v6 = a1[6], (size_t v7 = std::__shared_weak_count::lock(v5)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  size_t v8 = v7;
  long long v9 = operator new(0x10uLL);
  *long long v9 = a1;
  v9[1] = v4;
  uint64_t v10 = a1[8];
  atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  std::string::size_type v11 = operator new(0x18uLL);
  *std::string::size_type v11 = v9;
  v11[1] = v6;
  v11[2] = v8;
  dispatch_async_f(v10, v11, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<SARModule>::execute_wrapped<SARModule::shutdown(ShutdownStage,dispatch::group_session)::$_0>(SARModule::shutdown(ShutdownStage,dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<SARModule::shutdown(ShutdownStage,dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<SARModule::shutdown(ShutdownStage,dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke);
  if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
}

unsigned char *SARModule::getShutdownStages@<X0>(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v3 = operator new(1uLL);
  *a1 = v3;
  *uint64_t v3 = 3;
  uint64_t result = v3 + 1;
  a1[1] = result;
  a1[2] = result;
  return result;
}

void SARModule::initialize(void *a1, dispatch_object_t *a2)
{
  long long v4 = a1[10];
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v13 = 0;
    _os_log_impl(&dword_1C5767000, v4, OS_LOG_TYPE_DEFAULT, "#I initialize", v13, 2u);
  }
  BOOL v5 = *a2;
  if (*a2)
  {
    dispatch_retain(*a2);
    dispatch_group_enter(v5);
  }
  uint64_t v6 = (std::__shared_weak_count *)a1[7];
  if (!v6 || (uint64_t v7 = a1[6], (v8 = std::__shared_weak_count::lock(v6)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  long long v9 = v8;
  uint64_t v10 = operator new(0x10uLL);
  *uint64_t v10 = a1;
  v10[1] = v5;
  std::string::size_type v11 = a1[8];
  atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  size_t v12 = operator new(0x18uLL);
  void *v12 = v10;
  v12[1] = v7;
  v12[2] = v9;
  dispatch_async_f(v11, v12, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<SARModule>::execute_wrapped<SARModule::initialize(dispatch::group_session)::$_0>(SARModule::initialize(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<SARModule::initialize(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<SARModule::initialize(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke);
  if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
}

void SARModule::finishInitialization_sync(SARModule *this)
{
  v148[1] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *((void *)this + 10);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf) = 0;
    _os_log_impl(&dword_1C5767000, v2, OS_LOG_TYPE_DEFAULT, "#I Finish Initialization", (uint8_t *)&buf, 2u);
  }
  uint64_t v3 = (const char *)(*(uint64_t (**)(SARModule *))(*(void *)this + 16))(this);
  size_t v4 = strlen(v3);
  if (v4 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  BOOL v5 = (void *)v4;
  if (v4 >= 0x17)
  {
    uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v7 = v4 | 7;
    }
    uint64_t v8 = v7 + 1;
    uint64_t v6 = (void **)operator new(v7 + 1);
    __dst[1] = v5;
    unint64_t v145 = v8 | 0x8000000000000000;
    __dst[0] = v6;
  }
  else
  {
    HIBYTE(v145) = v4;
    uint64_t v6 = __dst;
    if (!v4) {
      goto LABEL_11;
    }
  }
  memmove(v6, v3, (size_t)v5);
LABEL_11:
  *((unsigned char *)v5 + (void)v6) = 0;
  int v143 = 0;
  AppleBasebandManager::create();
  long long v9 = buf;
  long long buf = 0uLL;
  uint64_t v10 = (std::__shared_weak_count *)*((void *)this + 12);
  *(_OWORD *)((char *)this + 88) = v9;
  if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  std::string::size_type v11 = (std::__shared_weak_count *)*((void *)&buf + 1);
  if (!*((void *)&buf + 1)
    || atomic_fetch_add((atomic_ullong *volatile)(*((void *)&buf + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    size_t v12 = v143;
    if (!v143) {
      goto LABEL_18;
    }
    goto LABEL_17;
  }
  ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
  std::__shared_weak_count::__release_weak(v11);
  size_t v12 = v143;
  if (v143) {
LABEL_17:
  }
    CFRelease(v12);
LABEL_18:
  if (SHIBYTE(v145) < 0) {
    operator delete(__dst[0]);
  }
  uint64_t v13 = (std::__shared_weak_count *)*((void *)this + 7);
  if (!v13 || (uint64_t v14 = *((void *)this + 6), (v15 = std::__shared_weak_count::lock(v13)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  long long v16 = v15;
  atomic_fetch_add_explicit(&v15->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v16);
  }
  size_t v17 = (const void *)*MEMORY[0x1E4F4CEF8];
  size_t v18 = strlen((const char *)*MEMORY[0x1E4F4CEF8]);
  if (v18 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v19 = (void *)v18;
  if (v18 >= 0x17)
  {
    uint64_t v21 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v18 | 7) != 0x17) {
      uint64_t v21 = v18 | 7;
    }
    uint64_t v22 = v21 + 1;
    uint64_t v20 = (void **)operator new(v21 + 1);
    v141[1] = v19;
    unint64_t v142 = v22 | 0x8000000000000000;
    v141[0] = v20;
    goto LABEL_31;
  }
  HIBYTE(v142) = v18;
  uint64_t v20 = v141;
  if (v18) {
LABEL_31:
  }
    memmove(v20, v17, (size_t)v19);
  *((unsigned char *)v19 + (void)v20) = 0;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 3321888768;
  aBlock[2] = ___ZN9SARModule25finishInitialization_syncEv_block_invoke;
  aBlock[3] = &__block_descriptor_56_e8_40c33_ZTSNSt3__18weak_ptrI9SARModuleEE_e70_v24__0_shared_ptr_abm::client::Event____Event_____shared_weak_count__8l;
  void aBlock[4] = this;
  void aBlock[5] = v14;
  size_t v138 = v16;
  atomic_fetch_add_explicit(&v16->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  char v23 = _Block_copy(aBlock);
  size_t v24 = *((void *)this + 8);
  if (v24) {
    dispatch_retain(*((dispatch_object_t *)this + 8));
  }
  xpc_object_t v139 = v23;
  dispatch_object_t v140 = v24;
  AppleBasebandManager::setEventHandler();
  if (v140) {
    dispatch_release(v140);
  }
  if (v139) {
    _Block_release(v139);
  }
  if (SHIBYTE(v142) < 0) {
    operator delete(v141[0]);
  }
  long long v25 = (const void *)*MEMORY[0x1E4F4CB10];
  size_t v26 = strlen((const char *)*MEMORY[0x1E4F4CB10]);
  if (v26 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  __int16 v27 = (void *)v26;
  if (v26 >= 0x17)
  {
    uint64_t v29 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v26 | 7) != 0x17) {
      uint64_t v29 = v26 | 7;
    }
    uint64_t v30 = v29 + 1;
    uint64_t v28 = operator new(v29 + 1);
    __p[1] = v27;
    unint64_t v136 = v30 | 0x8000000000000000;
    __p[0] = v28;
    goto LABEL_47;
  }
  HIBYTE(v136) = v26;
  uint64_t v28 = __p;
  if (v26) {
LABEL_47:
  }
    memmove(v28, v25, (size_t)v27);
  *((unsigned char *)v27 + (void)v28) = 0;
  v131[0] = MEMORY[0x1E4F143A8];
  v131[1] = 3321888768;
  v131[2] = ___ZN9SARModule25finishInitialization_syncEv_block_invoke_4;
  v131[3] = &__block_descriptor_56_e8_40c33_ZTSNSt3__18weak_ptrI9SARModuleEE_e70_v24__0_shared_ptr_abm::client::Event____Event_____shared_weak_count__8l;
  v131[4] = this;
  v131[5] = v14;
  size_t v132 = v16;
  atomic_fetch_add_explicit(&v16->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  __int16 v31 = _Block_copy(v131);
  uint64_t v32 = *((void *)this + 8);
  if (v32) {
    dispatch_retain(*((dispatch_object_t *)this + 8));
  }
  int v133 = v31;
  dispatch_object_t object = v32;
  AppleBasebandManager::setEventHandler();
  if (object) {
    dispatch_release(object);
  }
  if (v133) {
    _Block_release(v133);
  }
  if (SHIBYTE(v136) < 0) {
    operator delete(__p[0]);
  }
  __int16 v33 = (const void *)*MEMORY[0x1E4F4C220];
  size_t v34 = strlen((const char *)*MEMORY[0x1E4F4C220]);
  if (v34 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  __int16 v35 = (void *)v34;
  if (v34 >= 0x17)
  {
    uint64_t v37 = (v34 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v34 | 7) != 0x17) {
      uint64_t v37 = v34 | 7;
    }
    uint64_t v38 = v37 + 1;
    uint64_t v36 = operator new(v37 + 1);
    v129[1] = v35;
    unint64_t v130 = v38 | 0x8000000000000000;
    v129[0] = v36;
    goto LABEL_63;
  }
  HIBYTE(v130) = v34;
  uint64_t v36 = v129;
  if (v34) {
LABEL_63:
  }
    memmove(v36, v33, (size_t)v35);
  *((unsigned char *)v35 + (void)v36) = 0;
  v125[0] = MEMORY[0x1E4F143A8];
  v125[1] = 3321888768;
  v125[2] = ___ZN9SARModule25finishInitialization_syncEv_block_invoke_2;
  v125[3] = &__block_descriptor_56_e8_40c33_ZTSNSt3__18weak_ptrI9SARModuleEE_e70_v24__0_shared_ptr_abm::client::Event____Event_____shared_weak_count__8l;
  v125[4] = this;
  v125[5] = v14;
  v126 = v16;
  atomic_fetch_add_explicit(&v16->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  BOOL v39 = _Block_copy(v125);
  uint64_t v40 = *((void *)this + 8);
  if (v40) {
    dispatch_retain(*((dispatch_object_t *)this + 8));
  }
  uint64_t v127 = v39;
  dispatch_object_t v128 = v40;
  AppleBasebandManager::setEventHandler();
  if (v128) {
    dispatch_release(v128);
  }
  if (v127) {
    _Block_release(v127);
  }
  if (SHIBYTE(v130) < 0) {
    operator delete(v129[0]);
  }
  int v41 = (capabilities::abs *)AppleBasebandManager::eventsOn(*((AppleBasebandManager **)this + 11));
  capabilities::abs::supportedSARFeatures(v41);
  uint64_t v42 = capabilities::abs::operator&();
  if (v42)
  {
    size_t v43 = *((void *)this + 10);
    if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf) = 0;
      _os_log_impl(&dword_1C5767000, v43, OS_LOG_TYPE_DEFAULT, "#I Getting WiFi Status from kernel", (uint8_t *)&buf, 2u);
    }
    size_t v44 = (AppleSARHelper *)pthread_mutex_lock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
    uint64_t v45 = (AppleSARHelper *)off_1EBBDD250;
    if (!off_1EBBDD250)
    {
      AppleSARHelper::create_default_global((uint64_t *)&buf, v44);
      long long v46 = buf;
      long long buf = 0uLL;
      uint64_t v47 = (std::__shared_weak_count *)*(&off_1EBBDD250 + 1);
      off_1EBBDD250 = v46;
      if (v47 && !atomic_fetch_add(&v47->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
        std::__shared_weak_count::__release_weak(v47);
      }
      int v48 = (std::__shared_weak_count *)*((void *)&buf + 1);
      if (*((void *)&buf + 1)
        && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&buf + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
        std::__shared_weak_count::__release_weak(v48);
      }
      uint64_t v45 = (AppleSARHelper *)off_1EBBDD250;
    }
    size_t v49 = (std::__shared_weak_count *)*(&off_1EBBDD250 + 1);
    if (*(&off_1EBBDD250 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDD250 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    pthread_mutex_unlock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
    if (*((_DWORD *)v45 + 1))
    {
      *(void *)&long long buf = 3;
      v148[0] = 0;
      unsigned int v146 = 1;
      char v50 = AppleSARHelper::callUserClientMethod(v45, 0, (const unint64_t *)&buf, 1, (char *)this + 136, 1, v148, &v146, (char *)this + 136, 1uLL);
      if (!v49) {
        goto LABEL_92;
      }
    }
    else
    {
      char v50 = 0;
      if (!v49) {
        goto LABEL_92;
      }
    }
    if (!atomic_fetch_add(&v49->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
      int v51 = *((void *)this + 10);
      unint64_t v52 = v51;
      if (v50)
      {
LABEL_93:
        if (os_log_type_enabled(v52, OS_LOG_TYPE_DEFAULT))
        {
          if (*((unsigned char *)this + 136)) {
            std::string v53 = "On";
          }
          else {
            std::string v53 = "Off";
          }
          LODWORD(buf) = 136315138;
          *(void *)((char *)&buf + 4) = v53;
          _os_log_impl(&dword_1C5767000, v51, OS_LOG_TYPE_DEFAULT, "#I Succeeded getting WiFi State: %s", (uint8_t *)&buf, 0xCu);
          int64_t v54 = *((void *)this + 10);
          if (!os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT))
          {
LABEL_103:
            long long v55 = (AppleSARHelper *)pthread_mutex_lock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
            uint64_t v56 = (AppleSARHelper *)off_1EBBDD250;
            if (!off_1EBBDD250)
            {
              AppleSARHelper::create_default_global((uint64_t *)&buf, v55);
              long long v57 = buf;
              long long buf = 0uLL;
              unint64_t v58 = (std::__shared_weak_count *)*(&off_1EBBDD250 + 1);
              off_1EBBDD250 = v57;
              if (v58 && !atomic_fetch_add(&v58->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
                std::__shared_weak_count::__release_weak(v58);
              }
              long long v59 = (std::__shared_weak_count *)*((void *)&buf + 1);
              if (*((void *)&buf + 1)
                && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&buf + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
                std::__shared_weak_count::__release_weak(v59);
              }
              uint64_t v56 = (AppleSARHelper *)off_1EBBDD250;
            }
            long long v60 = (std::__shared_weak_count *)*(&off_1EBBDD250 + 1);
            if (*(&off_1EBBDD250 + 1)) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDD250 + 1) + 8), 1uLL, memory_order_relaxed);
            }
            pthread_mutex_unlock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
            if (*((_DWORD *)v56 + 1))
            {
              *(void *)&long long buf = 3;
              v148[0] = 0;
              unsigned int v146 = 1;
              char v61 = AppleSARHelper::callUserClientMethod(v56, 1, (const unint64_t *)&buf, 1, (char *)this + 160, 1, v148, &v146, (char *)this + 160, 1uLL);
              if (!v60) {
                goto LABEL_118;
              }
            }
            else
            {
              char v61 = 0;
              if (!v60) {
                goto LABEL_118;
              }
            }
            if (!atomic_fetch_add(&v60->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
              std::__shared_weak_count::__release_weak(v60);
              BOOL v62 = *((void *)this + 10);
              std::string::size_type v63 = v62;
              if (v61)
              {
LABEL_119:
                if (os_log_type_enabled(v63, OS_LOG_TYPE_DEFAULT))
                {
                  if (*((unsigned char *)this + 160)) {
                    int v64 = "On";
                  }
                  else {
                    int v64 = "Off";
                  }
                  LODWORD(buf) = 136315138;
                  *(void *)((char *)&buf + 4) = v64;
                  _os_log_impl(&dword_1C5767000, v62, OS_LOG_TYPE_DEFAULT, "#I Succeeded getting Bluetooth State: %s", (uint8_t *)&buf, 0xCu);
                  uint64_t v65 = *((void *)this + 10);
                  if (!os_log_type_enabled(v65, OS_LOG_TYPE_DEFAULT))
                  {
LABEL_129:
                    unint64_t v66 = (AppleSARHelper *)pthread_mutex_lock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
                    int64_t v67 = (AppleSARHelper *)off_1EBBDD250;
                    if (!off_1EBBDD250)
                    {
                      AppleSARHelper::create_default_global((uint64_t *)&buf, v66);
                      long long v68 = buf;
                      long long buf = 0uLL;
                      dispatch_object_t v69 = (std::__shared_weak_count *)*(&off_1EBBDD250 + 1);
                      off_1EBBDD250 = v68;
                      if (v69 && !atomic_fetch_add(&v69->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                      {
                        ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
                        std::__shared_weak_count::__release_weak(v69);
                      }
                      uint64_t v70 = (std::__shared_weak_count *)*((void *)&buf + 1);
                      if (*((void *)&buf + 1)
                        && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&buf + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
                      {
                        ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
                        std::__shared_weak_count::__release_weak(v70);
                      }
                      int64_t v67 = (AppleSARHelper *)off_1EBBDD250;
                    }
                    unint64_t v71 = (std::__shared_weak_count *)*(&off_1EBBDD250 + 1);
                    if (*(&off_1EBBDD250 + 1)) {
                      atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDD250 + 1) + 8), 1uLL, memory_order_relaxed);
                    }
                    pthread_mutex_unlock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
                    if (*((_DWORD *)v67 + 1))
                    {
                      *(void *)&long long buf = 3;
                      v148[0] = 0;
                      unsigned int v146 = 1;
                      char v72 = AppleSARHelper::callUserClientMethod(v67, 33, (const unint64_t *)&buf, 1, (char *)this + 312, 1, v148, &v146, (char *)this + 312, 1uLL);
                      if (!v71) {
                        goto LABEL_144;
                      }
                    }
                    else
                    {
                      char v72 = 0;
                      if (!v71) {
                        goto LABEL_144;
                      }
                    }
                    if (!atomic_fetch_add(&v71->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                    {
                      ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
                      std::__shared_weak_count::__release_weak(v71);
                      long long v73 = *((void *)this + 10);
                      BOOL v74 = v73;
                      if (v72)
                      {
LABEL_145:
                        uint64_t v42 = os_log_type_enabled(v74, OS_LOG_TYPE_DEFAULT);
                        if (v42)
                        {
                          if (*((unsigned char *)this + 312)) {
                            int v75 = "On";
                          }
                          else {
                            int v75 = "Off";
                          }
                          LODWORD(buf) = 136315138;
                          *(void *)((char *)&buf + 4) = v75;
                          _os_log_impl(&dword_1C5767000, v73, OS_LOG_TYPE_DEFAULT, "#I Succeeded getting call state: %s", (uint8_t *)&buf, 0xCu);
                        }
                        goto LABEL_153;
                      }
                      goto LABEL_151;
                    }
LABEL_144:
                    long long v73 = *((void *)this + 10);
                    BOOL v74 = v73;
                    if (v72) {
                      goto LABEL_145;
                    }
LABEL_151:
                    uint64_t v42 = os_log_type_enabled(v74, OS_LOG_TYPE_ERROR);
                    if (v42)
                    {
                      LOWORD(buf) = 0;
                      _os_log_error_impl(&dword_1C5767000, v73, OS_LOG_TYPE_ERROR, "Failed to get call state!", (uint8_t *)&buf, 2u);
                    }
                    goto LABEL_153;
                  }
LABEL_128:
                  LOWORD(buf) = 0;
                  _os_log_impl(&dword_1C5767000, v65, OS_LOG_TYPE_DEFAULT, "#I Getting call state", (uint8_t *)&buf, 2u);
                  goto LABEL_129;
                }
                goto LABEL_127;
              }
LABEL_126:
              if (os_log_type_enabled(v63, OS_LOG_TYPE_ERROR))
              {
                LOWORD(buf) = 0;
                _os_log_error_impl(&dword_1C5767000, v62, OS_LOG_TYPE_ERROR, "Failed to get Bluetooth state!", (uint8_t *)&buf, 2u);
                uint64_t v65 = *((void *)this + 10);
                if (!os_log_type_enabled(v65, OS_LOG_TYPE_DEFAULT)) {
                  goto LABEL_129;
                }
                goto LABEL_128;
              }
LABEL_127:
              uint64_t v65 = *((void *)this + 10);
              if (!os_log_type_enabled(v65, OS_LOG_TYPE_DEFAULT)) {
                goto LABEL_129;
              }
              goto LABEL_128;
            }
LABEL_118:
            BOOL v62 = *((void *)this + 10);
            std::string::size_type v63 = v62;
            if (v61) {
              goto LABEL_119;
            }
            goto LABEL_126;
          }
LABEL_102:
          LOWORD(buf) = 0;
          _os_log_impl(&dword_1C5767000, v54, OS_LOG_TYPE_DEFAULT, "#I Getting Bluetooth Status from kernel", (uint8_t *)&buf, 2u);
          goto LABEL_103;
        }
        goto LABEL_101;
      }
LABEL_100:
      if (os_log_type_enabled(v52, OS_LOG_TYPE_ERROR))
      {
        LOWORD(buf) = 0;
        _os_log_error_impl(&dword_1C5767000, v51, OS_LOG_TYPE_ERROR, "Failed to get WiFi state!", (uint8_t *)&buf, 2u);
        int64_t v54 = *((void *)this + 10);
        if (!os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_103;
        }
        goto LABEL_102;
      }
LABEL_101:
      int64_t v54 = *((void *)this + 10);
      if (!os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_103;
      }
      goto LABEL_102;
    }
LABEL_92:
    int v51 = *((void *)this + 10);
    unint64_t v52 = v51;
    if (v50) {
      goto LABEL_93;
    }
    goto LABEL_100;
  }
LABEL_153:
  capabilities::abs::supportedSARFeatures((capabilities::abs *)v42);
  if (!capabilities::abs::operator&()) {
    goto LABEL_264;
  }
  std::string::size_type v76 = *((void *)this + 10);
  if (os_log_type_enabled(v76, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf) = 0;
    _os_log_impl(&dword_1C5767000, v76, OS_LOG_TYPE_DEFAULT, "#I Getting SAR Fusion Status from kernel", (uint8_t *)&buf, 2u);
  }
  unsigned int v77 = (AppleSARHelper *)pthread_mutex_lock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  xpc_object_t v78 = (AppleSARHelper *)off_1EBBDD250;
  if (!off_1EBBDD250)
  {
    AppleSARHelper::create_default_global((uint64_t *)&buf, v77);
    long long v79 = buf;
    long long buf = 0uLL;
    xpc_object_t v80 = (std::__shared_weak_count *)*(&off_1EBBDD250 + 1);
    off_1EBBDD250 = v79;
    if (v80 && !atomic_fetch_add(&v80->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
      std::__shared_weak_count::__release_weak(v80);
    }
    long long v81 = (std::__shared_weak_count *)*((void *)&buf + 1);
    if (*((void *)&buf + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&buf + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
      std::__shared_weak_count::__release_weak(v81);
    }
    xpc_object_t v78 = (AppleSARHelper *)off_1EBBDD250;
  }
  int64_t v82 = (std::__shared_weak_count *)*(&off_1EBBDD250 + 1);
  if (*(&off_1EBBDD250 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDD250 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  if (*((_DWORD *)v78 + 1))
  {
    *(void *)&long long buf = 3;
    v148[0] = 0;
    unsigned int v146 = 1;
    char v83 = AppleSARHelper::callUserClientMethod(v78, 2, (const unint64_t *)&buf, 1, (char *)this + 161, 4, v148, &v146, (char *)this + 161, 4uLL);
    if (!v82) {
      goto LABEL_171;
    }
  }
  else
  {
    char v83 = 0;
    if (!v82) {
      goto LABEL_171;
    }
  }
  if (!atomic_fetch_add(&v82->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
    std::__shared_weak_count::__release_weak(v82);
    if (v83) {
      goto LABEL_174;
    }
    goto LABEL_172;
  }
LABEL_171:
  if (v83) {
    goto LABEL_174;
  }
LABEL_172:
  xpc_object_t v84 = *((void *)this + 10);
  if (os_log_type_enabled(v84, OS_LOG_TYPE_ERROR))
  {
    LOWORD(buf) = 0;
    _os_log_error_impl(&dword_1C5767000, v84, OS_LOG_TYPE_ERROR, "Failed to get Accessory State!", (uint8_t *)&buf, 2u);
  }
LABEL_174:
  size_t v85 = (AppleSARHelper *)pthread_mutex_lock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  size_t v86 = (AppleSARHelper *)off_1EBBDD250;
  if (!off_1EBBDD250)
  {
    AppleSARHelper::create_default_global((uint64_t *)&buf, v85);
    long long v87 = buf;
    long long buf = 0uLL;
    BOOL v88 = (std::__shared_weak_count *)*(&off_1EBBDD250 + 1);
    off_1EBBDD250 = v87;
    if (v88 && !atomic_fetch_add(&v88->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
      std::__shared_weak_count::__release_weak(v88);
    }
    uint64_t v89 = (std::__shared_weak_count *)*((void *)&buf + 1);
    if (*((void *)&buf + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&buf + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
      std::__shared_weak_count::__release_weak(v89);
    }
    size_t v86 = (AppleSARHelper *)off_1EBBDD250;
  }
  size_t v90 = (std::__shared_weak_count *)*(&off_1EBBDD250 + 1);
  if (*(&off_1EBBDD250 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDD250 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  if (*((_DWORD *)v86 + 1))
  {
    *(void *)&long long buf = 3;
    v148[0] = 0;
    unsigned int v146 = 1;
    char v91 = AppleSARHelper::callUserClientMethod(v86, 3, (const unint64_t *)&buf, 1, (char *)this + 165, 1, v148, &v146, (char *)this + 165, 1uLL);
    if (!v90) {
      goto LABEL_189;
    }
  }
  else
  {
    char v91 = 0;
    if (!v90) {
      goto LABEL_189;
    }
  }
  if (!atomic_fetch_add(&v90->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
    std::__shared_weak_count::__release_weak(v90);
    if (v91) {
      goto LABEL_192;
    }
    goto LABEL_190;
  }
LABEL_189:
  if (v91) {
    goto LABEL_192;
  }
LABEL_190:
  std::string v92 = *((void *)this + 10);
  if (os_log_type_enabled(v92, OS_LOG_TYPE_ERROR))
  {
    LOWORD(buf) = 0;
    _os_log_error_impl(&dword_1C5767000, v92, OS_LOG_TYPE_ERROR, "Failed to get OBD and Tuner State!", (uint8_t *)&buf, 2u);
  }
LABEL_192:
  *((unsigned char *)this + 166) = *((unsigned char *)this + 165);
  size_t v93 = (AppleSARHelper *)pthread_mutex_lock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  std::string v94 = (AppleSARHelper *)off_1EBBDD250;
  if (!off_1EBBDD250)
  {
    AppleSARHelper::create_default_global((uint64_t *)&buf, v93);
    long long v95 = buf;
    long long buf = 0uLL;
    std::string v96 = (std::__shared_weak_count *)*(&off_1EBBDD250 + 1);
    off_1EBBDD250 = v95;
    if (v96 && !atomic_fetch_add(&v96->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
      std::__shared_weak_count::__release_weak(v96);
    }
    uint64_t v97 = (std::__shared_weak_count *)*((void *)&buf + 1);
    if (*((void *)&buf + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&buf + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
      std::__shared_weak_count::__release_weak(v97);
    }
    std::string v94 = (AppleSARHelper *)off_1EBBDD250;
  }
  uint64_t v98 = (std::__shared_weak_count *)*(&off_1EBBDD250 + 1);
  if (*(&off_1EBBDD250 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDD250 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  if (*((_DWORD *)v94 + 1))
  {
    *(void *)&long long buf = 3;
    v148[0] = 0;
    unsigned int v146 = 1;
    char v99 = AppleSARHelper::callUserClientMethod(v94, 6, (const unint64_t *)&buf, 1, (char *)this + 167, 1, v148, &v146, (char *)this + 167, 1uLL);
    if (!v98) {
      goto LABEL_207;
    }
  }
  else
  {
    char v99 = 0;
    if (!v98) {
      goto LABEL_207;
    }
  }
  if (!atomic_fetch_add(&v98->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
    std::__shared_weak_count::__release_weak(v98);
    if (v99) {
      goto LABEL_210;
    }
    goto LABEL_208;
  }
LABEL_207:
  if (v99) {
    goto LABEL_210;
  }
LABEL_208:
  std::string v100 = *((void *)this + 10);
  if (os_log_type_enabled(v100, OS_LOG_TYPE_ERROR))
  {
    LOWORD(buf) = 0;
    _os_log_error_impl(&dword_1C5767000, v100, OS_LOG_TYPE_ERROR, "Failed to get Speaker State!", (uint8_t *)&buf, 2u);
  }
LABEL_210:
  signed __int8 v101 = (AppleSARHelper *)pthread_mutex_lock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  long long v102 = (AppleSARHelper *)off_1EBBDD250;
  if (!off_1EBBDD250)
  {
    AppleSARHelper::create_default_global((uint64_t *)&buf, v101);
    long long v103 = buf;
    long long buf = 0uLL;
    size_t v104 = (std::__shared_weak_count *)*(&off_1EBBDD250 + 1);
    off_1EBBDD250 = v103;
    if (v104 && !atomic_fetch_add(&v104->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
      std::__shared_weak_count::__release_weak(v104);
    }
    uint64_t v105 = (std::__shared_weak_count *)*((void *)&buf + 1);
    if (*((void *)&buf + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&buf + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
      std::__shared_weak_count::__release_weak(v105);
    }
    long long v102 = (AppleSARHelper *)off_1EBBDD250;
  }
  size_t v106 = (std::__shared_weak_count *)*(&off_1EBBDD250 + 1);
  if (*(&off_1EBBDD250 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDD250 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  if (*((_DWORD *)v102 + 1))
  {
    *(void *)&long long buf = 3;
    v148[0] = 0;
    unsigned int v146 = 1;
    char v107 = AppleSARHelper::callUserClientMethod(v102, 7, (const unint64_t *)&buf, 1, (char *)this + 168, 1, v148, &v146, (char *)this + 168, 1uLL);
    if (!v106) {
      goto LABEL_225;
    }
  }
  else
  {
    char v107 = 0;
    if (!v106) {
      goto LABEL_225;
    }
  }
  if (!atomic_fetch_add(&v106->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
    std::__shared_weak_count::__release_weak(v106);
    if (v107) {
      goto LABEL_228;
    }
    goto LABEL_226;
  }
LABEL_225:
  if (v107) {
    goto LABEL_228;
  }
LABEL_226:
  size_t v108 = *((void *)this + 10);
  if (os_log_type_enabled(v108, OS_LOG_TYPE_ERROR))
  {
    LOWORD(buf) = 0;
    _os_log_error_impl(&dword_1C5767000, v108, OS_LOG_TYPE_ERROR, "Failed to get Grip State!", (uint8_t *)&buf, 2u);
  }
LABEL_228:
  *((unsigned char *)this + 169) = *((unsigned char *)this + 168);
  uint64_t v109 = (AppleSARHelper *)pthread_mutex_lock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  uint64_t v110 = (AppleSARHelper *)off_1EBBDD250;
  if (!off_1EBBDD250)
  {
    AppleSARHelper::create_default_global((uint64_t *)&buf, v109);
    long long v111 = buf;
    long long buf = 0uLL;
    v112 = (std::__shared_weak_count *)*(&off_1EBBDD250 + 1);
    off_1EBBDD250 = v111;
    if (v112 && !atomic_fetch_add(&v112->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
      std::__shared_weak_count::__release_weak(v112);
    }
    size_t v113 = (std::__shared_weak_count *)*((void *)&buf + 1);
    if (*((void *)&buf + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&buf + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
      std::__shared_weak_count::__release_weak(v113);
    }
    uint64_t v110 = (AppleSARHelper *)off_1EBBDD250;
  }
  size_t v114 = (std::__shared_weak_count *)*(&off_1EBBDD250 + 1);
  if (*(&off_1EBBDD250 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDD250 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  if (*((_DWORD *)v110 + 1))
  {
    *(void *)&long long buf = 3;
    v148[0] = 0;
    unsigned int v146 = 1;
    char v115 = AppleSARHelper::callUserClientMethod(v110, 8, (const unint64_t *)&buf, 1, (char *)this + 170, 1, v148, &v146, (char *)this + 170, 1uLL);
    if (!v114) {
      goto LABEL_243;
    }
  }
  else
  {
    char v115 = 0;
    if (!v114) {
      goto LABEL_243;
    }
  }
  if (!atomic_fetch_add(&v114->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
    std::__shared_weak_count::__release_weak(v114);
    if (v115) {
      goto LABEL_246;
    }
    goto LABEL_244;
  }
LABEL_243:
  if (v115) {
    goto LABEL_246;
  }
LABEL_244:
  uint64_t v116 = *((void *)this + 10);
  if (os_log_type_enabled(v116, OS_LOG_TYPE_ERROR))
  {
    LOWORD(buf) = 0;
    _os_log_error_impl(&dword_1C5767000, v116, OS_LOG_TYPE_ERROR, "Failed to get Power State!", (uint8_t *)&buf, 2u);
  }
LABEL_246:
  int v117 = (AppleSARHelper *)pthread_mutex_lock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  size_t v118 = (AppleSARHelper *)off_1EBBDD250;
  if (!off_1EBBDD250)
  {
    AppleSARHelper::create_default_global((uint64_t *)&buf, v117);
    long long v119 = buf;
    long long buf = 0uLL;
    size_t v120 = (std::__shared_weak_count *)*(&off_1EBBDD250 + 1);
    off_1EBBDD250 = v119;
    if (v120 && !atomic_fetch_add(&v120->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
      std::__shared_weak_count::__release_weak(v120);
    }
    int v121 = (std::__shared_weak_count *)*((void *)&buf + 1);
    if (*((void *)&buf + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&buf + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
      std::__shared_weak_count::__release_weak(v121);
    }
    size_t v118 = (AppleSARHelper *)off_1EBBDD250;
  }
  v122 = (std::__shared_weak_count *)*(&off_1EBBDD250 + 1);
  if (*(&off_1EBBDD250 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDD250 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  if (*((_DWORD *)v118 + 1))
  {
    *(void *)&long long buf = 3;
    v148[0] = 0;
    unsigned int v146 = 1;
    char v123 = AppleSARHelper::callUserClientMethod(v118, 9, (const unint64_t *)&buf, 1, (char *)this + 171, 1, v148, &v146, (char *)this + 171, 1uLL);
    if (!v122) {
      goto LABEL_261;
    }
  }
  else
  {
    char v123 = 0;
    if (!v122) {
      goto LABEL_261;
    }
  }
  if (!atomic_fetch_add(&v122->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
    std::__shared_weak_count::__release_weak(v122);
    if (v123) {
      goto LABEL_264;
    }
    goto LABEL_262;
  }
LABEL_261:
  if (v123) {
    goto LABEL_264;
  }
LABEL_262:
  uint64_t v124 = *((void *)this + 10);
  if (os_log_type_enabled(v124, OS_LOG_TYPE_ERROR))
  {
    LOWORD(buf) = 0;
    _os_log_error_impl(&dword_1C5767000, v124, OS_LOG_TYPE_ERROR, "Failed to get Wrist State!", (uint8_t *)&buf, 2u);
  }
LABEL_264:
  if (v126) {
    std::__shared_weak_count::__release_weak(v126);
  }
  if (v132) {
    std::__shared_weak_count::__release_weak(v132);
  }
  if (v138) {
    std::__shared_weak_count::__release_weak(v138);
  }
  std::__shared_weak_count::__release_weak(v16);
}

void sub_1C58AADC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::__shared_weak_count *a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,std::__shared_weak_count *a35,char a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,std::__shared_weak_count *a50)
{
  pthread_mutex_unlock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  if (a20) {
    std::__shared_weak_count::__release_weak(a20);
  }
  if (a35) {
    std::__shared_weak_count::__release_weak(a35);
  }
  if (a50) {
    std::__shared_weak_count::__release_weak(a50);
  }
  std::__shared_weak_count::__release_weak(v50);
  _Unwind_Resume(a1);
}

void ___ZN9SARModule25finishInitialization_syncEv_block_invoke(void *a1, uint64_t a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    BOOL v5 = (void *)a1[4];
    uint64_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      uint64_t v7 = v6;
      uint64_t v8 = a1[5];
      if (atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        if (!v8) {
          return;
        }
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v7);
        if (!v8) {
          return;
        }
      }
      CFDictionaryRef v36 = (const __CFDictionary *)0xAAAAAAAAAAAAAAAALL;
      abm::client::Event::getData((uint64_t *)&v36, *(abm::client::Event **)a2);
      CFDictionaryRef v9 = v36;
      if (v36) {
        uint64_t v10 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
      }
      else {
        uint64_t v10 = 0;
      }
      if (!v10) {
        goto LABEL_39;
      }
      v35[0] = 0xAAAAAAAAAAAAAAAALL;
      v35[1] = 0xAAAAAAAAAAAAAAAALL;
      ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v35, v36);
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v34 = 0;
      ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v37, (const char *)*MEMORY[0x1E4F4C688]);
      ctu::cf::map_adapter::getString();
      MEMORY[0x1C8791110](&v37);
      uint64_t v34 = v32;
      *(_OWORD *)std::string __p = v31;
      if (v32 >= 0) {
        size_t v11 = HIBYTE(v32);
      }
      else {
        size_t v11 = *((void *)&v31 + 1);
      }
      if (v11 == strlen((const char *)*MEMORY[0x1E4F4CAE8])
        && (v32 >= 0 ? (size_t v12 = __p) : (size_t v12 = (void **)__p[0]), !memcmp(v12, (const void *)*MEMORY[0x1E4F4CAE8], v11)))
      {
        long long v25 = *(abm::client::Event **)a2;
        uint64_t v26 = *(void *)(a2 + 8);
        if (v26) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v26 + 8), 1uLL, memory_order_relaxed);
        }
        __int16 v27 = (std::__shared_weak_count *)v5[7];
        if (!v27 || (v28 = v5[6], (uint64_t v29 = std::__shared_weak_count::lock(v27)) == 0)) {
          std::__throw_bad_weak_ptr[abi:ne180100]();
        }
        size_t v19 = v29;
        uint64_t v30 = operator new(0x18uLL);
        *uint64_t v30 = v5;
        v30[1] = v25;
        v30[2] = v26;
        uint64_t v21 = v5[8];
        uint64_t p_shared_owners = &v19->__shared_owners_;
        atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
        char v23 = operator new(0x18uLL);
        *char v23 = v30;
        v23[1] = v28;
        void v23[2] = v19;
        size_t v24 = (void (__cdecl *)(void *))_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI9SARModuleE15execute_wrappedIZZNS3_25finishInitialization_syncEvEUb_E3__2EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS7_NSC_14default_deleteIS7_EEEEENUlPvE_8__invokeESH_;
      }
      else
      {
        if (v11 != strlen((const char *)*MEMORY[0x1E4F4CCD8])
          || (v32 >= 0 ? (uint64_t v13 = __p) : (uint64_t v13 = (void **)__p[0]), memcmp(v13, (const void *)*MEMORY[0x1E4F4CCD8], v11)))
        {
LABEL_36:
          if (SHIBYTE(v34) < 0) {
            operator delete(__p[0]);
          }
          MEMORY[0x1C8791160](v35);
          CFDictionaryRef v9 = v36;
LABEL_39:
          if (v9) {
            CFRelease(v9);
          }
          return;
        }
        uint64_t v14 = *(abm::client::Event **)a2;
        uint64_t v15 = *(void *)(a2 + 8);
        if (v15) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 8), 1uLL, memory_order_relaxed);
        }
        long long v16 = (std::__shared_weak_count *)v5[7];
        if (!v16 || (v17 = v5[6], (size_t v18 = std::__shared_weak_count::lock(v16)) == 0)) {
          std::__throw_bad_weak_ptr[abi:ne180100]();
        }
        size_t v19 = v18;
        uint64_t v20 = operator new(0x18uLL);
        void *v20 = v5;
        v20[1] = v14;
        v20[2] = v15;
        uint64_t v21 = v5[8];
        uint64_t p_shared_owners = &v19->__shared_owners_;
        atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
        char v23 = operator new(0x18uLL);
        *char v23 = v20;
        v23[1] = v17;
        void v23[2] = v19;
        size_t v24 = (void (__cdecl *)(void *))_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI9SARModuleE15execute_wrappedIZZNS3_25finishInitialization_syncEvEUb_E3__3EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS7_NSC_14default_deleteIS7_EEEEENUlPvE_8__invokeESH_;
      }
      dispatch_async_f(v21, v23, v24);
      if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
      goto LABEL_36;
    }
  }
}

uint64_t __copy_helper_block_e8_40c33_ZTSNSt3__18weak_ptrI9SARModuleEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c33_ZTSNSt3__18weak_ptrI9SARModuleEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void ___ZN9SARModule25finishInitialization_syncEv_block_invoke_4(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    uint64_t v3 = (SARModule *)a1[4];
    size_t v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      BOOL v5 = v4;
      uint64_t v6 = a1[5];
      if (atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        if (!v6) {
          return;
        }
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v5);
        if (!v6) {
          return;
        }
      }
      SARModule::dumpSARFusionState(v3);
    }
  }
}

void SARModule::dumpSARFusionState(SARModule *this)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *((void *)this + 10);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v3 = sar::toStringAccessory((sar *)*(unsigned int *)((char *)this + 161));
    int v4 = *(_DWORD *)((char *)this + 161);
    int v13 = 136315394;
    uint64_t v14 = v3;
    __int16 v15 = 1024;
    int v16 = v4;
    _os_log_debug_impl(&dword_1C5767000, v2, OS_LOG_TYPE_DEBUG, "#D SAR Fusion: Accessory: %s (0x%x)", (uint8_t *)&v13, 0x12u);
    uint64_t v2 = *((void *)this + 10);
    if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
    {
LABEL_3:
      if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG)) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    goto LABEL_3;
  }
  uint64_t v5 = sar::toString();
  int v13 = 136315138;
  uint64_t v14 = v5;
  _os_log_debug_impl(&dword_1C5767000, v2, OS_LOG_TYPE_DEBUG, "#D SAR Fusion: Sar Selection: %s", (uint8_t *)&v13, 0xCu);
  uint64_t v2 = *((void *)this + 10);
  if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
LABEL_4:
    if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG)) {
      goto LABEL_5;
    }
    goto LABEL_12;
  }
LABEL_11:
  uint64_t v6 = sar::toString();
  int v13 = 136315138;
  uint64_t v14 = v6;
  _os_log_debug_impl(&dword_1C5767000, v2, OS_LOG_TYPE_DEBUG, "#D SAR Fusion: Tuner State: %s SPACE", (uint8_t *)&v13, 0xCu);
  uint64_t v2 = *((void *)this + 10);
  if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
LABEL_5:
    if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG)) {
      goto LABEL_6;
    }
    goto LABEL_16;
  }
LABEL_12:
  if (*((unsigned char *)this + 167)) {
    uint64_t v7 = "ON";
  }
  else {
    uint64_t v7 = "OFF";
  }
  int v13 = 136315138;
  uint64_t v14 = (uint64_t)v7;
  _os_log_debug_impl(&dword_1C5767000, v2, OS_LOG_TYPE_DEBUG, "#D SAR Fusion: Speaker: %s", (uint8_t *)&v13, 0xCu);
  uint64_t v2 = *((void *)this + 10);
  if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
LABEL_6:
    if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG)) {
      goto LABEL_7;
    }
    goto LABEL_22;
  }
LABEL_16:
  int v8 = *((unsigned __int8 *)this + 168);
  CFDictionaryRef v9 = "Default Hand Position";
  if (v8 == 1) {
    CFDictionaryRef v9 = "Left Hand";
  }
  if (v8 == 2) {
    uint64_t v10 = "Right Hand";
  }
  else {
    uint64_t v10 = v9;
  }
  int v13 = 136315138;
  uint64_t v14 = (uint64_t)v10;
  _os_log_debug_impl(&dword_1C5767000, v2, OS_LOG_TYPE_DEBUG, "#D SAR Fusion: Hand Grip: %s", (uint8_t *)&v13, 0xCu);
  uint64_t v2 = *((void *)this + 10);
  if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
LABEL_7:
    if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG)) {
      return;
    }
    goto LABEL_30;
  }
LABEL_22:
  if ((*((unsigned char *)this + 170) & 8) != 0)
  {
    size_t v11 = "Arcas";
  }
  else if ((*((unsigned char *)this + 170) & 4) != 0)
  {
    size_t v11 = "Callisto";
  }
  else if ((*((unsigned char *)this + 170) & 2) != 0)
  {
    size_t v11 = "USB";
  }
  else
  {
    size_t v11 = "Power Off";
  }
  int v13 = 136315138;
  uint64_t v14 = (uint64_t)v11;
  _os_log_debug_impl(&dword_1C5767000, v2, OS_LOG_TYPE_DEBUG, "#D SAR Fusion: Power: %s", (uint8_t *)&v13, 0xCu);
  uint64_t v2 = *((void *)this + 10);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
LABEL_30:
    if (*((unsigned char *)this + 171)) {
      size_t v12 = "ON";
    }
    else {
      size_t v12 = "OFF";
    }
    int v13 = 136315138;
    uint64_t v14 = (uint64_t)v12;
    _os_log_debug_impl(&dword_1C5767000, v2, OS_LOG_TYPE_DEBUG, "#D SAR Fusion: Wrist: %s", (uint8_t *)&v13, 0xCu);
  }
}

void ___ZN9SARModule25finishInitialization_syncEv_block_invoke_2(void *a1, abm::client::Event **a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    uint64_t v5 = (SARModule *)a1[4];
    uint64_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      uint64_t v7 = v6;
      uint64_t v8 = a1[5];
      if (atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        if (!v8) {
          return;
        }
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v7);
        if (!v8) {
          return;
        }
      }
      CFTypeRef cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
      abm::client::Event::getData((uint64_t *)&cf, *a2);
      if (cf) {
        uint64_t v10 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
      }
      else {
        uint64_t v10 = 0;
      }
      if (v10)
      {
        ctu::cf_to_xpc((uint64_t *)&object, (ctu *)cf, v9);
        xpc_object_t v11 = object;
        if (object && MEMORY[0x1C8792D30](object) == MEMORY[0x1E4F14590]) {
          xpc_retain(v11);
        }
        else {
          xpc_object_t v11 = xpc_null_create();
        }
        xpc_release(object);
        xpc_object_t value = xpc_dictionary_get_value(v11, (const char *)*MEMORY[0x1E4F4C1B0]);
        xpc_object_t object = value;
        if (value) {
          xpc_retain(value);
        }
        else {
          xpc_object_t object = xpc_null_create();
        }
        int v14 = xpc::dyn_cast_or_default((xpc *)&object, 0);
        xpc_release(object);
        if (v14) {
          SARModule::submitCASARFusion((uint64_t)v5, 0);
        }
        SARModule::processCallStatus(v5, v14);
        xpc_release(v11);
      }
      else
      {
        size_t v12 = *((void *)v5 + 10);
        if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
        {
          LOWORD(object) = 0;
          _os_log_error_impl(&dword_1C5767000, v12, OS_LOG_TYPE_ERROR, "No input is given for voice call active state", (uint8_t *)&object, 2u);
        }
      }
      if (cf) {
        CFRelease(cf);
      }
    }
  }
}

void sub_1C58ABA20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object, const void *a10)
{
  xpc_release(v10);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&a10);
  _Unwind_Resume(a1);
}

void SARModule::submitCASARFusion(uint64_t a1, int a2)
{
  v64.tv_sec = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&v64.tv_usec = 0xAAAAAAAAAAAAAAAALL;
  gettimeofday(&v64, 0);
  xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
  uint64_t v5 = MEMORY[0x1E4F14590];
  if (v4 || (xpc_object_t v4 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C8792D30](v4) == v5)
    {
      xpc_retain(v4);
      xpc_object_t v6 = v4;
    }
    else
    {
      xpc_object_t v6 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v6 = xpc_null_create();
    xpc_object_t v4 = 0;
  }
  xpc_release(v4);
  uint64_t v7 = *(void *)(a1 + 304);
  if (v7)
  {
    *(void *)(a1 + 304) = v64.tv_sec - v7;
    if ((*(unsigned char *)(a1 + 166) & 0xF) != 0) {
      uint64_t v8 = "Head";
    }
    else {
      uint64_t v8 = "Body";
    }
    xpc_object_t v9 = xpc_string_create(v8);
    if (!v9) {
      xpc_object_t v9 = xpc_null_create();
    }
    xpc_dictionary_set_value(v6, (const char *)*MEMORY[0x1E4F4CCA8], v9);
    xpc_object_t v10 = xpc_null_create();
    xpc_release(v9);
    xpc_release(v10);
    if (*(unsigned __int8 *)(a1 + 166) >= 0x10u) {
      xpc_object_t v11 = "Freespace";
    }
    else {
      xpc_object_t v11 = "Non-Freespace";
    }
    xpc_object_t v12 = xpc_string_create(v11);
    if (!v12) {
      xpc_object_t v12 = xpc_null_create();
    }
    xpc_dictionary_set_value(v6, (const char *)*MEMORY[0x1E4F4CE50], v12);
    xpc_object_t v13 = xpc_null_create();
    xpc_release(v12);
    xpc_release(v13);
    if (*(unsigned char *)(a1 + 169) == 2)
    {
      int v14 = "Right";
    }
    else if (*(unsigned char *)(a1 + 168) == 1)
    {
      int v14 = "Left";
    }
    else
    {
      int v14 = "Default";
    }
    xpc_object_t v19 = xpc_string_create(v14);
    if (!v19) {
      xpc_object_t v19 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v15 = xpc_string_create("NONE");
    if (!v15) {
      xpc_object_t v15 = xpc_null_create();
    }
    xpc_dictionary_set_value(v6, (const char *)*MEMORY[0x1E4F4CCA8], v15);
    xpc_object_t v16 = xpc_null_create();
    xpc_release(v15);
    xpc_release(v16);
    xpc_object_t v17 = xpc_string_create("NONE");
    if (!v17) {
      xpc_object_t v17 = xpc_null_create();
    }
    xpc_dictionary_set_value(v6, (const char *)*MEMORY[0x1E4F4CE50], v17);
    xpc_object_t v18 = xpc_null_create();
    xpc_release(v17);
    xpc_release(v18);
    xpc_object_t v19 = xpc_string_create("NONE");
    if (!v19) {
      xpc_object_t v19 = xpc_null_create();
    }
  }
  xpc_dictionary_set_value(v6, (const char *)*MEMORY[0x1E4F4CCA0], v19);
  xpc_object_t v20 = xpc_null_create();
  xpc_release(v19);
  xpc_release(v20);
  if ((*(unsigned char *)(a1 + 165) & 0xF) != 0) {
    uint64_t v21 = "Head";
  }
  else {
    uint64_t v21 = "Body";
  }
  xpc_object_t v22 = xpc_string_create(v21);
  if (!v22) {
    xpc_object_t v22 = xpc_null_create();
  }
  xpc_dictionary_set_value(v6, (const char *)*MEMORY[0x1E4F4CC98], v22);
  xpc_object_t v23 = xpc_null_create();
  xpc_release(v22);
  xpc_release(v23);
  if (*(unsigned __int8 *)(a1 + 165) >= 0x10u) {
    size_t v24 = "Freespace";
  }
  else {
    size_t v24 = "Non-Freespace";
  }
  xpc_object_t v25 = xpc_string_create(v24);
  if (!v25) {
    xpc_object_t v25 = xpc_null_create();
  }
  xpc_dictionary_set_value(v6, (const char *)*MEMORY[0x1E4F4CE48], v25);
  xpc_object_t v26 = xpc_null_create();
  xpc_release(v25);
  xpc_release(v26);
  int v27 = *(unsigned __int8 *)(a1 + 168);
  uint64_t v28 = "Default";
  if (v27 == 1) {
    uint64_t v28 = "Left";
  }
  if (v27 == 2) {
    uint64_t v29 = "Right";
  }
  else {
    uint64_t v29 = v28;
  }
  xpc_object_t v30 = xpc_string_create(v29);
  uint64_t v31 = MEMORY[0x1E4F14590];
  if (!v30) {
    xpc_object_t v30 = xpc_null_create();
  }
  xpc_dictionary_set_value(v6, (const char *)*MEMORY[0x1E4F4CC90], v30);
  xpc_object_t v32 = xpc_null_create();
  xpc_release(v30);
  xpc_release(v32);
  if (a2 == 1)
  {
    HIBYTE(v63) = 12;
    strcpy((char *)&string, "EventUpdated");
  }
  else
  {
    if (a2) {
      __int16 v33 = "UnknownReason";
    }
    else {
      __int16 v33 = "CallConnected";
    }
    HIBYTE(v63) = 13;
    *(void *)&long long string = *(void *)v33;
    *(void *)((char *)&string + 5) = *(void *)(v33 + 5);
    BYTE13(string) = 0;
  }
  xpc_object_t v34 = xpc_string_create((const char *)&string);
  if (!v34) {
    xpc_object_t v34 = xpc_null_create();
  }
  xpc_dictionary_set_value(v6, (const char *)*MEMORY[0x1E4F4D170], v34);
  xpc_object_t v35 = xpc_null_create();
  xpc_release(v34);
  xpc_release(v35);
  if (SHIBYTE(v63) < 0) {
    operator delete((void *)string);
  }
  xpc_object_t v36 = xpc_int64_create(*(void *)(a1 + 304));
  if (!v36) {
    xpc_object_t v36 = xpc_null_create();
  }
  xpc_dictionary_set_value(v6, (const char *)*MEMORY[0x1E4F4CA60], v36);
  xpc_object_t v37 = xpc_null_create();
  xpc_release(v36);
  xpc_release(v37);
  xpc_object_t v38 = xpc_dictionary_create(0, 0, 0);
  if (v38 || (xpc_object_t v38 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C8792D30](v38) == v31)
    {
      xpc_retain(v38);
      xpc_object_t v39 = v38;
    }
    else
    {
      xpc_object_t v39 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v39 = xpc_null_create();
    xpc_object_t v38 = 0;
  }
  xpc_release(v38);
  xpc_object_t v40 = xpc_string_create((const char *)*MEMORY[0x1E4F4C4C0]);
  if (!v40) {
    xpc_object_t v40 = xpc_null_create();
  }
  xpc_dictionary_set_value(v39, (const char *)*MEMORY[0x1E4F4C540], v40);
  xpc_object_t v41 = xpc_null_create();
  xpc_release(v40);
  xpc_release(v41);
  xpc_object_t v42 = xpc_string_create((const char *)*MEMORY[0x1E4F4C7B8]);
  if (!v42) {
    xpc_object_t v42 = xpc_null_create();
  }
  xpc_dictionary_set_value(v39, (const char *)*MEMORY[0x1E4F4C548], v42);
  xpc_object_t v43 = xpc_null_create();
  xpc_release(v42);
  xpc_release(v43);
  xpc_object_t v44 = xpc_string_create((const char *)*MEMORY[0x1E4F4C368]);
  if (!v44) {
    xpc_object_t v44 = xpc_null_create();
  }
  xpc_dictionary_set_value(v39, (const char *)*MEMORY[0x1E4F4C3C8], v44);
  xpc_object_t v45 = xpc_null_create();
  xpc_release(v44);
  xpc_release(v45);
  if (v6)
  {
    xpc_retain(v6);
    xpc_object_t v46 = v6;
  }
  else
  {
    xpc_object_t v46 = xpc_null_create();
  }
  xpc_dictionary_set_value(v39, (const char *)*MEMORY[0x1E4F4CB40], v46);
  xpc_object_t v47 = xpc_null_create();
  xpc_release(v46);
  xpc_release(v47);
  xpc_object_t v48 = xpc_dictionary_create(0, 0, 0);
  if (v48 || (xpc_object_t v48 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C8792D30](v48) == v31)
    {
      xpc_retain(v48);
      xpc_object_t v49 = v48;
    }
    else
    {
      xpc_object_t v49 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v49 = xpc_null_create();
    xpc_object_t v48 = 0;
  }
  xpc_release(v48);
  xpc_object_t v50 = xpc_string_create((const char *)*MEMORY[0x1E4F4C158]);
  if (!v50) {
    xpc_object_t v50 = xpc_null_create();
  }
  xpc_dictionary_set_value(v49, (const char *)*MEMORY[0x1E4F4C190], v50);
  xpc_object_t v51 = xpc_null_create();
  xpc_release(v50);
  xpc_release(v51);
  if (v39)
  {
    xpc_retain(v39);
    xpc_object_t v52 = v39;
  }
  else
  {
    xpc_object_t v52 = xpc_null_create();
  }
  xpc_dictionary_set_value(v49, (const char *)*MEMORY[0x1E4F4C188], v52);
  xpc_object_t v53 = xpc_null_create();
  xpc_release(v52);
  xpc_release(v53);
  int64_t v54 = (const void *)*MEMORY[0x1E4F4C738];
  size_t v55 = strlen((const char *)*MEMORY[0x1E4F4C738]);
  if (v55 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v56 = v55;
  if (v55 >= 0x17)
  {
    uint64_t v58 = (v55 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v55 | 7) != 0x17) {
      uint64_t v58 = v55 | 7;
    }
    uint64_t v59 = v58 + 1;
    p_long long string = (long long *)operator new(v58 + 1);
    *((void *)&string + 1) = v56;
    unint64_t v63 = v59 | 0x8000000000000000;
    *(void *)&long long string = p_string;
LABEL_95:
    memmove(p_string, v54, v56);
    *((unsigned char *)p_string + v56) = 0;
    xpc_object_t object = v49;
    if (v49) {
      goto LABEL_91;
    }
    goto LABEL_96;
  }
  HIBYTE(v63) = v55;
  p_long long string = &string;
  if (v55) {
    goto LABEL_95;
  }
  LOBYTE(string) = 0;
  xpc_object_t object = v49;
  if (v49)
  {
LABEL_91:
    xpc_retain(v49);
    goto LABEL_97;
  }
LABEL_96:
  xpc_object_t object = xpc_null_create();
LABEL_97:
  long long v60 = 0;
  Service::runCommand(a1, (uint64_t)&string, &object, &v60);
  xpc_release(object);
  xpc_object_t object = 0;
  if (SHIBYTE(v63) < 0) {
    operator delete((void *)string);
  }
  *(void *)(a1 + 304) = v64.tv_sec;
  xpc_release(v49);
  xpc_release(v39);
  xpc_release(v6);
}

void sub_1C58AC404(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, xpc_object_t object, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  xpc_release(object);
  if (a17 < 0) {
    operator delete(__p);
  }
  xpc_release(v19);
  xpc_release(v18);
  xpc_release(v17);
  _Unwind_Resume(a1);
}

void SARModule::processCallStatus(SARModule *this, char a2)
{
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 7);
  if (!v3 || (v5 = *((void *)this + 6), (xpc_object_t v6 = std::__shared_weak_count::lock(v3)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v7 = v6;
  uint64_t v8 = operator new(0x10uLL);
  *(void *)uint64_t v8 = this;
  uint8_t v8[8] = a2;
  xpc_object_t v9 = *((void *)this + 8);
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  xpc_object_t v10 = operator new(0x18uLL);
  *xpc_object_t v10 = v8;
  v10[1] = v5;
  v10[2] = v7;
  dispatch_async_f(v9, v10, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<SARModule>::execute_wrapped<SARModule::processCallStatus(BOOL)::$_0>(SARModule::processCallStatus(BOOL)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<SARModule::processCallStatus(BOOL)::$_0,dispatch_queue_s *::default_delete<SARModule::processCallStatus(BOOL)::$_0>>)::{lambda(void *)#1}::__invoke);
  if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void SARModule::initializeHelpers_sync(SARModule *this)
{
  uint64_t v2 = *((void *)this + 10);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_1C5767000, v2, OS_LOG_TYPE_DEFAULT, "#I Set up SAR Helpers", buf, 2u);
  }
  xpc_object_t v4 = *((void *)this + 8);
  uint64_t v31 = v4;
  if (v4) {
    dispatch_retain(v4);
  }
  CMOnBodyDelegate::create(&v31, v3, buf);
  long long v5 = *(_OWORD *)buf;
  memset(buf, 0, sizeof(buf));
  xpc_object_t v6 = (std::__shared_weak_count *)*((void *)this + 14);
  *(_OWORD *)((char *)this + 104) = v5;
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  uint64_t v7 = *(std::__shared_weak_count **)&buf[8];
  if (*(void *)&buf[8]
    && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  uint64_t v8 = (capabilities::abs *)v31;
  if (v31) {
    dispatch_release(v31);
  }
  if (*((void *)this + 13)
    || (xpc_object_t v9 = *((void *)this + 10),
        uint64_t v8 = (capabilities::abs *)os_log_type_enabled(v9, OS_LOG_TYPE_ERROR),
        !v8))
  {
    capabilities::abs::supportedSARFeatures(v8);
    if (!capabilities::abs::operator&()) {
      goto LABEL_17;
    }
    goto LABEL_16;
  }
  *(_WORD *)long long buf = 0;
  _os_log_error_impl(&dword_1C5767000, v9, OS_LOG_TYPE_ERROR, "Failed to create core motion on-body manager", buf, 2u);
  capabilities::abs::supportedSARFeatures(v24);
  if (capabilities::abs::operator&())
  {
LABEL_16:
    SARModule::initializeWiFi_sync(this);
    SARModule::initializeBluetooth_sync(this);
    SARModule::initializeVoIPCallDetection_sync(this);
  }
LABEL_17:
  SARModule::initializeAudio_sync(this);
  if (CMHandDetectionDelegate::isSupported(v10)) {
    SARModule::initializeHandDetection_sync(this);
  }
  SARModule::initializeOBD_sync(this);
  SARModule::initializeAccessory_sync(this);
  SARModule::initializePowerSource_sync(this);
  xpc_object_t v11 = (std::__shared_weak_count *)*((void *)this + 7);
  if (!v11 || (v12 = *((void *)this + 6), (xpc_object_t v13 = std::__shared_weak_count::lock(v11)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  int v14 = v13;
  atomic_fetch_add_explicit(&v13->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v14);
  }
  xpc_object_t v15 = (AppleSARHelper *)pthread_mutex_lock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  uint64_t v16 = off_1EBBDD250;
  if (!off_1EBBDD250)
  {
    AppleSARHelper::create_default_global((uint64_t *)buf, v15);
    long long v17 = *(_OWORD *)buf;
    memset(buf, 0, sizeof(buf));
    xpc_object_t v18 = (std::__shared_weak_count *)*(&off_1EBBDD250 + 1);
    off_1EBBDD250 = v17;
    if (v18 && !atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
    xpc_object_t v19 = *(std::__shared_weak_count **)&buf[8];
    if (*(void *)&buf[8]
      && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
    uint64_t v16 = off_1EBBDD250;
  }
  xpc_object_t v20 = (std::__shared_weak_count *)*(&off_1EBBDD250 + 1);
  uint64_t v29 = v16;
  uint64_t v30 = *(&off_1EBBDD250 + 1);
  if (*(&off_1EBBDD250 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDD250 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  v25[0] = MEMORY[0x1E4F143A8];
  v25[1] = 3321888768;
  v25[2] = ___ZN9SARModule22initializeHelpers_syncEv_block_invoke;
  v25[3] = &__block_descriptor_56_e8_40c33_ZTSNSt3__18weak_ptrI9SARModuleEE_e12_v20__0i8_v12l;
  v25[4] = this;
  v25[5] = v12;
  xpc_object_t v26 = v14;
  atomic_fetch_add_explicit(&v14->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  uint64_t v21 = _Block_copy(v25);
  xpc_object_t v22 = *((void *)this + 8);
  if (v22) {
    dispatch_retain(*((dispatch_object_t *)this + 8));
  }
  aBlock = v21;
  dispatch_object_t object = v22;
  AppleSARHelper::registerSARServiceCallback();
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (!v20 || atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    xpc_object_t v23 = *((void *)this + 10);
    if (!os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_43;
    }
    goto LABEL_42;
  }
  ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
  std::__shared_weak_count::__release_weak(v20);
  xpc_object_t v23 = *((void *)this + 10);
  if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
  {
LABEL_42:
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_1C5767000, v23, OS_LOG_TYPE_DEFAULT, "#I Finish Initialization Done", buf, 2u);
  }
LABEL_43:
  if (v26) {
    std::__shared_weak_count::__release_weak(v26);
  }
  std::__shared_weak_count::__release_weak(v14);
}

void sub_1C58ACAE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, char a16, uint64_t a17, char a18)
{
  pthread_mutex_unlock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  std::__shared_weak_count::__release_weak(v18);
  _Unwind_Resume(a1);
}

void sub_1C58ACB40(_Unwind_Exception *a1)
{
  queue v3 = *(NSObject **)(v1 - 72);
  if (v3)
  {
    dispatch_release(v3);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1C58ACB38);
}

void SARModule::initializeWiFi_sync(SARModule *this)
{
  uint64_t v2 = *((void *)this + 10);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_1C5767000, v2, OS_LOG_TYPE_DEFAULT, "#I Initializing WiFi", buf, 2u);
  }
  queue v3 = (WiFiManager *)(*(uint64_t (**)(SARModule *))(*(void *)this + 16))(this);
  WiFiManager::create(v3, (WiFiManager **)buf);
  long long v4 = *(_OWORD *)buf;
  memset(buf, 0, sizeof(buf));
  long long v5 = (std::__shared_weak_count *)*((void *)this + 16);
  *(_OWORD *)((char *)this + 120) = v4;
  if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  xpc_object_t v6 = *(std::__shared_weak_count **)&buf[8];
  if (*(void *)&buf[8]
    && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    uint64_t v7 = *((void *)this + 15);
    if (v7)
    {
LABEL_9:
      aBlock[0] = MEMORY[0x1E4F143A8];
      aBlock[1] = 3221225472;
      aBlock[2] = ___ZN9SARModule19initializeWiFi_syncEv_block_invoke;
      aBlock[3] = &__block_descriptor_40_e8_v12__0B8l;
      void aBlock[4] = this;
      uint64_t v8 = _Block_copy(aBlock);
      xpc_object_t v9 = *((void *)this + 8);
      if (v9) {
        dispatch_retain(v9);
      }
      xpc_object_t v15 = v8;
      dispatch_object_t object = v9;
      xpc_object_t v10 = *(void **)(v7 + 48);
      if ((unint64_t)v10 >= *(void *)(v7 + 56))
      {
        uint64_t v12 = std::vector<dispatch::callback<void({block_pointer})(BOOL)>>::__push_back_slow_path<dispatch::callback<void({block_pointer})(BOOL)> const&>((void *)(v7 + 40), (uint64_t)&v15);
        goto LABEL_17;
      }
      if (v8)
      {
        xpc_object_t v11 = _Block_copy(v8);
        xpc_object_t v9 = object;
        *xpc_object_t v10 = v11;
        v10[1] = v9;
        if (!v9)
        {
LABEL_15:
          uint64_t v12 = v10 + 2;
LABEL_17:
          *(void *)(v7 + 48) = v12;
          WiFiManager::notifyClients((id *)v7);
          if (object) {
            dispatch_release(object);
          }
          if (v15) {
            _Block_release(v15);
          }
          return;
        }
      }
      else
      {
        *xpc_object_t v10 = 0;
        v10[1] = v9;
        if (!v9) {
          goto LABEL_15;
        }
      }
      dispatch_retain(v9);
      goto LABEL_15;
    }
  }
  else
  {
    uint64_t v7 = *((void *)this + 15);
    if (v7) {
      goto LABEL_9;
    }
  }
  xpc_object_t v13 = *((void *)this + 10);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)long long buf = 0;
    _os_log_error_impl(&dword_1C5767000, v13, OS_LOG_TYPE_ERROR, "Failed to create WiFi Manager", buf, 2u);
  }
}

void sub_1C58ACDD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  dispatch::callback<void({block_pointer})(BOOL)>::~callback((uint64_t)va);
  _Unwind_Resume(a1);
}

void SARModule::initializeBluetooth_sync(SARModule *this)
{
  uint64_t v2 = *((void *)this + 10);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_1C5767000, v2, OS_LOG_TYPE_DEFAULT, "#I Initializing Bluetooth", buf, 2u);
  }
  queue v3 = (BluetoothManager *)(*(uint64_t (**)(SARModule *))(*(void *)this + 16))(this);
  BluetoothManager::create(v3, (BluetoothManager **)buf);
  long long v4 = *(_OWORD *)buf;
  memset(buf, 0, sizeof(buf));
  long long v5 = (std::__shared_weak_count *)*((void *)this + 19);
  *((_OWORD *)this + 9) = v4;
  if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  xpc_object_t v6 = *(std::__shared_weak_count **)&buf[8];
  if (*(void *)&buf[8]
    && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    uint64_t v7 = *((void *)this + 18);
    if (v7)
    {
LABEL_9:
      aBlock[0] = MEMORY[0x1E4F143A8];
      aBlock[1] = 3221225472;
      aBlock[2] = ___ZN9SARModule24initializeBluetooth_syncEv_block_invoke;
      aBlock[3] = &__block_descriptor_40_e8_v12__0B8l;
      void aBlock[4] = this;
      uint64_t v8 = _Block_copy(aBlock);
      xpc_object_t v9 = *((void *)this + 8);
      if (v9) {
        dispatch_retain(v9);
      }
      xpc_object_t v15 = v8;
      dispatch_object_t object = v9;
      xpc_object_t v10 = *(void **)(v7 + 48);
      if ((unint64_t)v10 >= *(void *)(v7 + 56))
      {
        uint64_t v12 = std::vector<dispatch::callback<void({block_pointer})(BOOL)>>::__push_back_slow_path<dispatch::callback<void({block_pointer})(BOOL)> const&>((void *)(v7 + 40), (uint64_t)&v15);
        goto LABEL_17;
      }
      if (v8)
      {
        xpc_object_t v11 = _Block_copy(v8);
        xpc_object_t v9 = object;
        *xpc_object_t v10 = v11;
        v10[1] = v9;
        if (!v9)
        {
LABEL_15:
          uint64_t v12 = v10 + 2;
LABEL_17:
          *(void *)(v7 + 48) = v12;
          BluetoothManager::notifyClients((id *)v7);
          if (object) {
            dispatch_release(object);
          }
          if (v15) {
            _Block_release(v15);
          }
          return;
        }
      }
      else
      {
        *xpc_object_t v10 = 0;
        v10[1] = v9;
        if (!v9) {
          goto LABEL_15;
        }
      }
      dispatch_retain(v9);
      goto LABEL_15;
    }
  }
  else
  {
    uint64_t v7 = *((void *)this + 18);
    if (v7) {
      goto LABEL_9;
    }
  }
  xpc_object_t v13 = *((void *)this + 10);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)long long buf = 0;
    _os_log_error_impl(&dword_1C5767000, v13, OS_LOG_TYPE_ERROR, "Failed to create Bluetooth Manager", buf, 2u);
  }
}

void sub_1C58AD06C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  dispatch::callback<void({block_pointer})(BOOL)>::~callback((uint64_t)va);
  _Unwind_Resume(a1);
}

void SARModule::initializeVoIPCallDetection_sync(SARModule *this)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *((void *)this + 10);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_1C5767000, v2, OS_LOG_TYPE_DEFAULT, "#I Initializing FT Call Detection", buf, 2u);
  }
  queue v3 = (std::__shared_weak_count *)*((void *)this + 7);
  if (!v3 || (uint64_t v4 = *((void *)this + 6), (v5 = std::__shared_weak_count::lock(v3)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  xpc_object_t v6 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v6);
  }
  uint64_t v7 = *((void *)this + 8);
  dispatch_object_t object = v7;
  if (v7) {
    dispatch_retain(v7);
  }
  v12[0] = MEMORY[0x1E4F143A8];
  v12[1] = 3321888768;
  v12[2] = ___ZN9SARModule32initializeVoIPCallDetection_syncEv_block_invoke;
  void v12[3] = &__block_descriptor_56_e8_40c33_ZTSNSt3__18weak_ptrI9SARModuleEE_e15_v24__0B8B12r_16l;
  v12[4] = this;
  void v12[5] = v4;
  xpc_object_t v13 = v6;
  atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  xpc_object_t v18 = 0;
  uint64_t v16 = (void (**)(void **))&unk_1F20FAA30;
  long long v17 = (capabilities::abs *)_Block_copy(v12);
  xpc_object_t v18 = (void **)&v16;
  capabilities::abs::supportedSARFeatures(v17);
  if (capabilities::abs::operator&())
  {
    uint64_t v8 = (char *)operator new(0x28uLL);
    *((void *)v8 + 1) = 0;
    *((void *)v8 + 2) = 0;
    *(void *)uint64_t v8 = &unk_1F20F5738;
    std::construct_at[abi:ne180100]<VoIPCallDelegate,dispatch::queue &,std::function<void ()(BOOL,BOOL,char const*)> &,VoIPCallDelegate*>((void ***)v8 + 3, &object, &v16);
    xpc_object_t v9 = (std::__shared_weak_count *)*((void *)this + 41);
    *((void *)this + 40) = v8 + 24;
    *((void *)this + 41) = v8;
    if (!v9)
    {
LABEL_14:
      xpc_object_t v10 = v18;
      if (v18 != (void **)&v16) {
        goto LABEL_15;
      }
      goto LABEL_23;
    }
  }
  else
  {
    xpc_object_t v9 = (std::__shared_weak_count *)*((void *)this + 41);
    *((void *)this + 40) = 0;
    *((void *)this + 41) = 0;
    if (!v9) {
      goto LABEL_14;
    }
  }
  if (atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_14;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  xpc_object_t v10 = v18;
  if (v18 != (void **)&v16)
  {
LABEL_15:
    if (v10) {
      (*((void (**)(void **))*v10 + 5))(v10);
    }
    xpc_object_t v11 = object;
    if (object) {
      goto LABEL_18;
    }
    goto LABEL_19;
  }
LABEL_23:
  v16[4]((void **)&v16);
  xpc_object_t v11 = object;
  if (object) {
LABEL_18:
  }
    dispatch_release(v11);
LABEL_19:
  if (v13) {
    std::__shared_weak_count::__release_weak(v13);
  }
  std::__shared_weak_count::__release_weak(v6);
}

void sub_1C58AD378(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, dispatch_object_t object, uint64_t a17, uint64_t a18)
{
  std::__shared_weak_count::~__shared_weak_count(v19);
  operator delete(v21);
  std::function<void ()(BOOL,BOOL,char const*)>::~function(&a18);
  if (a15)
  {
    std::__shared_weak_count::__release_weak(a15);
    xpc_object_t v22 = object;
    if (!object)
    {
LABEL_3:
      std::__shared_weak_count::__release_weak(v18);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    xpc_object_t v22 = object;
    if (!object) {
      goto LABEL_3;
    }
  }
  dispatch_release(v22);
  std::__shared_weak_count::__release_weak(v18);
  _Unwind_Resume(a1);
}

void SARModule::initializeAudio_sync(SARModule *this)
{
  uint64_t v2 = *((void *)this + 10);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_1C5767000, v2, OS_LOG_TYPE_DEFAULT, "#I Initializing Audio", buf, 2u);
  }
  queue v3 = (AudioManager *)(*(uint64_t (**)(SARModule *))(*(void *)this + 16))(this);
  AudioManager::create(v3, (AudioManager **)buf);
  long long v4 = *(_OWORD *)buf;
  memset(buf, 0, sizeof(buf));
  long long v5 = (std::__shared_weak_count *)*((void *)this + 23);
  *((_OWORD *)this + 11) = v4;
  if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  xpc_object_t v6 = *(std::__shared_weak_count **)&buf[8];
  if (*(void *)&buf[8]
    && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    if (*((void *)this + 22)) {
      goto LABEL_9;
    }
LABEL_19:
    xpc_object_t v13 = *((void *)this + 10);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl(&dword_1C5767000, v13, OS_LOG_TYPE_ERROR, "Failed to create Audio Manager", buf, 2u);
    }
    return;
  }
  if (!*((void *)this + 22)) {
    goto LABEL_19;
  }
LABEL_9:
  {
    if (v20)
    {
      AudioManager::isAudioWiredPortSupported(void)::audioJackSupported = capabilities::txpower::supportsAudioJackReport(v20);
    }
  }
  if (AudioManager::isAudioWiredPortSupported(void)::audioJackSupported)
  {
    uint64_t v7 = (void *)*((void *)this + 22);
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 3221225472;
    aBlock[2] = ___ZN9SARModule20initializeAudio_syncEv_block_invoke;
    aBlock[3] = &__block_descriptor_40_e8_v12__0B8l;
    void aBlock[4] = this;
    uint64_t v8 = _Block_copy(aBlock);
    xpc_object_t v9 = *((void *)this + 8);
    if (v9) {
      dispatch_retain(*((dispatch_object_t *)this + 8));
    }
    xpc_object_t v26 = v8;
    dispatch_object_t object = v9;
    xpc_object_t v10 = (void *)v7[17];
    if ((unint64_t)v10 >= v7[18])
    {
      uint64_t v12 = std::vector<dispatch::callback<void({block_pointer})(BOOL)>>::__push_back_slow_path<dispatch::callback<void({block_pointer})(BOOL)> const&>(v7 + 16, (uint64_t)&v26);
      goto LABEL_22;
    }
    if (v8)
    {
      xpc_object_t v11 = _Block_copy(v8);
      xpc_object_t v9 = object;
      *xpc_object_t v10 = v11;
      v10[1] = v9;
      if (!v9)
      {
LABEL_17:
        uint64_t v12 = v10 + 2;
LABEL_22:
        v7[17] = v12;
        if (object) {
          dispatch_release(object);
        }
        if (v26) {
          _Block_release(v26);
        }
        goto LABEL_26;
      }
    }
    else
    {
      *xpc_object_t v10 = 0;
      v10[1] = v9;
      if (!v9) {
        goto LABEL_17;
      }
    }
    dispatch_retain(v9);
    goto LABEL_17;
  }
LABEL_26:
  {
    if (v21)
    {
      AudioManager::isAudioSpeakerSupported(void)::audioSpeakerSupported = capabilities::txpower::supportsAudioSpeaker(v21);
    }
  }
  if (AudioManager::isAudioSpeakerSupported(void)::audioSpeakerSupported)
  {
    int v14 = (void *)*((void *)this + 22);
    v22[0] = MEMORY[0x1E4F143A8];
    v22[1] = 3221225472;
    void v22[2] = ___ZN9SARModule20initializeAudio_syncEv_block_invoke_2;
    v22[3] = &__block_descriptor_40_e8_v12__0B8l;
    v22[4] = this;
    xpc_object_t v15 = _Block_copy(v22);
    uint64_t v16 = *((void *)this + 8);
    if (v16) {
      dispatch_retain(v16);
    }
    xpc_object_t v23 = v15;
    dispatch_object_t v24 = v16;
    long long v17 = (void *)v14[13];
    if ((unint64_t)v17 >= v14[14])
    {
      uint64_t v19 = std::vector<dispatch::callback<void({block_pointer})(BOOL)>>::__push_back_slow_path<dispatch::callback<void({block_pointer})(BOOL)> const&>(v14 + 12, (uint64_t)&v23);
      goto LABEL_36;
    }
    if (v15)
    {
      xpc_object_t v18 = _Block_copy(v15);
      uint64_t v16 = v24;
      void *v17 = v18;
      v17[1] = v16;
      if (!v16)
      {
LABEL_34:
        uint64_t v19 = v17 + 2;
LABEL_36:
        v14[13] = v19;
        if (v24) {
          dispatch_release(v24);
        }
        if (v23) {
          _Block_release(v23);
        }
        return;
      }
    }
    else
    {
      void *v17 = 0;
      v17[1] = v16;
      if (!v16) {
        goto LABEL_34;
      }
    }
    dispatch_retain(v16);
    goto LABEL_34;
  }
}

void sub_1C58AD7A8(_Unwind_Exception *a1)
{
}

void sub_1C58AD7C0(_Unwind_Exception *a1)
{
}

void sub_1C58AD7E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  dispatch::callback<void({block_pointer})(BOOL)>::~callback((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1C58AD7F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  dispatch::callback<void({block_pointer})(BOOL)>::~callback((uint64_t)va);
  _Unwind_Resume(a1);
}

void SARModule::initializeHandDetection_sync(SARModule *this)
{
  uint64_t v2 = *((void *)this + 10);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_1C5767000, v2, OS_LOG_TYPE_DEFAULT, "#I Initializing Hand Detection", buf, 2u);
  }
  queue v3 = (char *)(*(uint64_t (**)(SARModule *))(*(void *)this + 16))(this);
  long long v4 = *((void *)this + 8);
  xpc_object_t v36 = v4;
  if (v4) {
    dispatch_retain(v4);
  }
  long long v5 = *((void *)this + 9);
  xpc_object_t v35 = v5;
  if (v5) {
    dispatch_retain(v5);
  }
  xpc_object_t v6 = (std::__shared_weak_count *)*((void *)this + 23);
  uint64_t v33 = *((void *)this + 22);
  xpc_object_t v34 = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v31 = 0;
  xpc_object_t v32 = 0;
  uint64_t v7 = (std::__shared_weak_count *)*((void *)this + 14);
  uint64_t v29 = *((void *)this + 13);
  uint64_t v30 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  HandDetectionManager::create(v3, &v36, &v35, &v33, &v31, &v29, (HandDetectionManager **)buf);
  long long v8 = *(_OWORD *)buf;
  memset(buf, 0, sizeof(buf));
  xpc_object_t v9 = (std::__shared_weak_count *)*((void *)this + 32);
  *(_OWORD *)((char *)this + 248) = v8;
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  xpc_object_t v10 = *(std::__shared_weak_count **)&buf[8];
  if (*(void *)&buf[8]
    && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  xpc_object_t v11 = v30;
  if (v30 && !atomic_fetch_add(&v30->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  uint64_t v12 = v32;
  if (v32 && !atomic_fetch_add(&v32->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  xpc_object_t v13 = v34;
  if (v34 && !atomic_fetch_add(&v34->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  if (v35) {
    dispatch_release(v35);
  }
  if (v36) {
    dispatch_release(v36);
  }
  if (*((void *)this + 31))
  {
    int v14 = (std::__shared_weak_count *)*((void *)this + 7);
    if (!v14 || (v15 = *((void *)this + 6), (uint64_t v16 = std::__shared_weak_count::lock(v14)) == 0)) {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    long long v17 = v16;
    p_shared_weak_owners = &v16->__shared_weak_owners_;
    atomic_fetch_add_explicit(&v16->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v17);
    }
    uint64_t v19 = (void *)*((void *)this + 31);
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 3321888768;
    aBlock[2] = ___ZN9SARModule28initializeHandDetection_syncEv_block_invoke;
    aBlock[3] = &__block_descriptor_56_e8_40c33_ZTSNSt3__18weak_ptrI9SARModuleEE_e8_v12__0i8l;
    void aBlock[4] = this;
    void aBlock[5] = v15;
    xpc_object_t v26 = v17;
    atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
    xpc_object_t v20 = _Block_copy(aBlock);
    uint64_t v21 = *((void *)this + 8);
    if (v21) {
      dispatch_retain(v21);
    }
    int v27 = v20;
    uint64_t v28 = v21;
    xpc_object_t v22 = (void **)v19[4];
    if ((unint64_t)v22 >= v19[5])
    {
      dispatch_object_t v24 = std::vector<dispatch::callback<void({block_pointer})(CMHandDetectionDelegate::CMHandDetectionResult)>>::__push_back_slow_path<dispatch::callback<void({block_pointer})(CMHandDetectionDelegate::CMHandDetectionResult)> const&>(v19 + 3, (uint64_t)&v27);
      uint64_t v21 = v28;
      v19[4] = v24;
      if (!v21) {
        goto LABEL_43;
      }
      goto LABEL_42;
    }
    if (v20)
    {
      NSObject *v22 = _Block_copy(v20);
      v22[1] = v21;
      if (!v21) {
        goto LABEL_41;
      }
    }
    else
    {
      NSObject *v22 = 0;
      v22[1] = v21;
      if (!v21)
      {
LABEL_41:
        v19[4] = v22 + 2;
        if (!v21)
        {
LABEL_43:
          if (v27) {
            _Block_release(v27);
          }
          if (v26) {
            std::__shared_weak_count::__release_weak(v26);
          }
          std::__shared_weak_count::__release_weak(v17);
          return;
        }
LABEL_42:
        dispatch_release(v21);
        goto LABEL_43;
      }
    }
    dispatch_retain(v21);
    goto LABEL_41;
  }
  xpc_object_t v23 = *((void *)this + 10);
  if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)long long buf = 0;
    _os_log_error_impl(&dword_1C5767000, v23, OS_LOG_TYPE_ERROR, "Failed to create hand detection manager!", buf, 2u);
  }
}

void sub_1C58ADC80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, char a17)
{
  dispatch::callback<void({block_pointer})(CMHandDetectionDelegate::CMHandDetectionResult)>::~callback((uint64_t)&a17);
  if (a16) {
    std::__shared_weak_count::__release_weak(a16);
  }
  std::__shared_weak_count::__release_weak(v17);
  _Unwind_Resume(a1);
}

void sub_1C58ADCB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va1, a11);
  va_start(va, a11);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v11 - 96);
  xpc_object_t v13 = *(NSObject **)(v11 - 80);
  if (v13) {
    dispatch_release(v13);
  }
  int v14 = *(NSObject **)(v11 - 72);
  if (!v14) {
    _Unwind_Resume(a1);
  }
  dispatch_release(v14);
  _Unwind_Resume(a1);
}

void SARModule::initializeOBD_sync(SARModule *this)
{
  uint64_t v2 = *((void *)this + 10);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_1C5767000, v2, OS_LOG_TYPE_DEFAULT, "#I Initializing OBD", buf, 2u);
  }
  queue v3 = (std::__shared_weak_count *)*((void *)this + 7);
  if (!v3 || (uint64_t v4 = *((void *)this + 6), (v5 = std::__shared_weak_count::lock(v3)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  xpc_object_t v6 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v6);
  }
  uint64_t v7 = (char *)(*(uint64_t (**)(SARModule *))(*(void *)this + 16))(this);
  long long v8 = *((void *)this + 8);
  uint64_t v30 = v8;
  if (v8) {
    dispatch_retain(v8);
  }
  xpc_object_t v9 = (std::__shared_weak_count *)*((void *)this + 23);
  uint64_t v28 = *((void *)this + 22);
  uint64_t v29 = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  xpc_object_t v10 = (std::__shared_weak_count *)*((void *)this + 14);
  uint64_t v26 = *((void *)this + 13);
  int v27 = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  OBDManager::create(v7, &v30, &v28, &v26, (OBDManager **)buf);
  long long v11 = *(_OWORD *)buf;
  memset(buf, 0, sizeof(buf));
  uint64_t v12 = (std::__shared_weak_count *)*((void *)this + 25);
  *((_OWORD *)this + 12) = v11;
  if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  xpc_object_t v13 = *(std::__shared_weak_count **)&buf[8];
  if (*(void *)&buf[8]
    && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  int v14 = v27;
  if (v27 && !atomic_fetch_add(&v27->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  uint64_t v15 = v29;
  if (v29 && !atomic_fetch_add(&v29->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  if (v30) {
    dispatch_release(v30);
  }
  uint64_t v16 = (void *)*((void *)this + 24);
  if (v16)
  {
    v22[0] = MEMORY[0x1E4F143A8];
    v22[1] = 3321888768;
    void v22[2] = ___ZN9SARModule18initializeOBD_syncEv_block_invoke;
    v22[3] = &__block_descriptor_56_e8_40c33_ZTSNSt3__18weak_ptrI9SARModuleEE_e11_v16__0C8C12l;
    v22[4] = this;
    void v22[5] = v4;
    xpc_object_t v23 = v6;
    atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    uint64_t v17 = _Block_copy(v22);
    xpc_object_t v18 = *((void *)this + 8);
    if (v18) {
      dispatch_retain(v18);
    }
    aBlock = v17;
    xpc_object_t v25 = v18;
    uint64_t v19 = (void **)v16[6];
    if ((unint64_t)v19 >= v16[7])
    {
      uint64_t v21 = std::vector<dispatch::callback<void({block_pointer})(sar::OBDState,sar::TunerState)>>::__push_back_slow_path<dispatch::callback<void({block_pointer})(sar::OBDState,sar::TunerState)> const&>(v16 + 5, (uint64_t)&aBlock);
      xpc_object_t v18 = v25;
      void v16[6] = v21;
      if (!v18) {
        goto LABEL_36;
      }
      goto LABEL_35;
    }
    if (v17)
    {
      *uint64_t v19 = _Block_copy(v17);
      v19[1] = v18;
      if (!v18) {
        goto LABEL_34;
      }
    }
    else
    {
      *uint64_t v19 = 0;
      v19[1] = v18;
      if (!v18)
      {
LABEL_34:
        void v16[6] = v19 + 2;
        if (!v18)
        {
LABEL_36:
          if (aBlock) {
            _Block_release(aBlock);
          }
          if (v23) {
            std::__shared_weak_count::__release_weak(v23);
          }
          goto LABEL_42;
        }
LABEL_35:
        dispatch_release(v18);
        goto LABEL_36;
      }
    }
    dispatch_retain(v18);
    goto LABEL_34;
  }
  xpc_object_t v20 = *((void *)this + 10);
  if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)long long buf = 0;
    _os_log_error_impl(&dword_1C5767000, v20, OS_LOG_TYPE_ERROR, "Failed to create OBD Manager", buf, 2u);
  }
LABEL_42:
  std::__shared_weak_count::__release_weak(v6);
}

void sub_1C58AE0DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, char a16, uint64_t a17, char a18, uint64_t a19, char a20)
{
  dispatch::callback<void({block_pointer})(sar::OBDState,sar::TunerState)>::~callback((uint64_t)&a16);
  if (a15)
  {
    std::__shared_weak_count::__release_weak(a15);
    std::__shared_weak_count::__release_weak(v20);
    _Unwind_Resume(a1);
  }
  std::__shared_weak_count::__release_weak(v20);
  _Unwind_Resume(a1);
}

void SARModule::initializeAccessory_sync(SARModule *this)
{
  uint64_t v2 = *((void *)this + 10);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_1C5767000, v2, OS_LOG_TYPE_DEFAULT, "#I Initializing Accessory", buf, 2u);
  }
  queue v3 = (std::__shared_weak_count *)*((void *)this + 7);
  if (!v3 || (uint64_t v4 = *((void *)this + 6), (v5 = std::__shared_weak_count::lock(v3)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  xpc_object_t v6 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v6);
  }
  long long v8 = (LegacyAccessoryManager *)(*(uint64_t (**)(SARModule *))(*(void *)this + 16))(this);
  xpc_object_t v9 = *((void *)this + 8);
  dispatch_object_t object = v9;
  if (v9) {
    dispatch_retain(v9);
  }
  LegacyAccessoryManager::create(v8, (const char *)&object, v7, (LegacyAccessoryManager **)buf);
  long long v10 = *(_OWORD *)buf;
  memset(buf, 0, sizeof(buf));
  long long v11 = (std::__shared_weak_count *)*((void *)this + 27);
  *((_OWORD *)this + 13) = v10;
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  uint64_t v12 = *(std::__shared_weak_count **)&buf[8];
  if (*(void *)&buf[8]
    && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  if (object) {
    dispatch_release(object);
  }
  xpc_object_t v13 = (void *)*((void *)this + 26);
  if (v13)
  {
    v19[0] = MEMORY[0x1E4F143A8];
    v19[1] = 3321888768;
    void v19[2] = ___ZN9SARModule24initializeAccessory_syncEv_block_invoke;
    void v19[3] = &__block_descriptor_56_e8_40c33_ZTSNSt3__18weak_ptrI9SARModuleEE_e8_v12__0I8l;
    v19[4] = this;
    v19[5] = v4;
    xpc_object_t v20 = v6;
    atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    int v14 = _Block_copy(v19);
    uint64_t v15 = *((void *)this + 8);
    if (v15) {
      dispatch_retain(v15);
    }
    aBlock = v14;
    xpc_object_t v22 = v15;
    uint64_t v16 = (void **)v13[5];
    if ((unint64_t)v16 >= v13[6])
    {
      xpc_object_t v18 = std::vector<dispatch::callback<void({block_pointer})>>::__push_back_slow_path<dispatch::callback<void({block_pointer})> const&>(v13 + 4, (uint64_t)&aBlock);
      uint64_t v15 = v22;
      void v13[5] = v18;
      if (!v15) {
        goto LABEL_26;
      }
      goto LABEL_25;
    }
    if (v14)
    {
      *uint64_t v16 = _Block_copy(v14);
      v16[1] = v15;
      if (!v15) {
        goto LABEL_24;
      }
    }
    else
    {
      *uint64_t v16 = 0;
      v16[1] = v15;
      if (!v15)
      {
LABEL_24:
        void v13[5] = v16 + 2;
        if (!v15)
        {
LABEL_26:
          if (aBlock) {
            _Block_release(aBlock);
          }
          if (v20) {
            std::__shared_weak_count::__release_weak(v20);
          }
          goto LABEL_32;
        }
LABEL_25:
        dispatch_release(v15);
        goto LABEL_26;
      }
    }
    dispatch_retain(v15);
    goto LABEL_24;
  }
  uint64_t v17 = *((void *)this + 10);
  if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)long long buf = 0;
    _os_log_error_impl(&dword_1C5767000, v17, OS_LOG_TYPE_ERROR, "Failed to create Legacy Accessory Manager", buf, 2u);
  }
LABEL_32:
  std::__shared_weak_count::__release_weak(v6);
}

void sub_1C58AE470(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, char a16, uint64_t a17, dispatch_object_t object)
{
  dispatch::callback<void({block_pointer})>::~callback((uint64_t)&a16);
  if (a15)
  {
    std::__shared_weak_count::__release_weak(a15);
    std::__shared_weak_count::__release_weak(v18);
    _Unwind_Resume(a1);
  }
  std::__shared_weak_count::__release_weak(v18);
  _Unwind_Resume(a1);
}

void SARModule::initializePowerSource_sync(SARModule *this)
{
  uint64_t v2 = *((void *)this + 10);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_1C5767000, v2, OS_LOG_TYPE_DEFAULT, "#I Initializing Power Source", buf, 2u);
  }
  GetABMLogServer(&v30);
  pthread_mutex_lock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
  uint64_t v3 = off_1EBBDCFD0;
  if (!off_1EBBDCFD0)
  {
    ABMServer::create_default_global(buf);
    long long v4 = *(_OWORD *)buf;
    memset(buf, 0, sizeof(buf));
    long long v5 = (std::__shared_weak_count *)*(&off_1EBBDCFD0 + 1);
    off_1EBBDCFD0 = v4;
    if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    xpc_object_t v6 = *(std::__shared_weak_count **)&buf[8];
    if (*(void *)&buf[8]
      && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
    uint64_t v3 = off_1EBBDCFD0;
  }
  uint64_t v28 = v3;
  uint64_t v29 = (std::__shared_weak_count *)*(&off_1EBBDCFD0 + 1);
  if (*(&off_1EBBDCFD0 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDCFD0 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
  uint64_t v7 = *(void *)(*(void *)v3 + 208);
  long long v8 = operator new(0xD8uLL);
  xpc_object_t v9 = v8;
  v8[1] = 0;
  void v8[2] = 0;
  void *v8 = &unk_1F20F3AC0;
  long long v10 = v8 + 3;
  *(void *)long long buf = v30;
  *(void *)&uint8_t buf[8] = v31;
  if (v31) {
    atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  IOKitEventNotifier::IOKitEventNotifier((uint64_t)(v8 + 3), buf, v7);
  long long v11 = *(std::__shared_weak_count **)&buf[8];
  if (*(void *)&buf[8]
    && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  uint64_t v12 = (std::__shared_weak_count *)*((void *)this + 29);
  *((void *)this + 28) = v10;
  *((void *)this + 29) = v9;
  if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  if (v29 && !atomic_fetch_add(&v29->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
    std::__shared_weak_count::__release_weak(v29);
  }
  xpc_object_t v13 = v31;
  if (v31 && !atomic_fetch_add(&v31->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
    if (*((void *)this + 28)) {
      goto LABEL_27;
    }
  }
  else if (*((void *)this + 28))
  {
LABEL_27:
    int v14 = (std::__shared_weak_count *)*((void *)this + 7);
    if (!v14 || (v15 = *((void *)this + 6), (uint64_t v16 = std::__shared_weak_count::lock(v14)) == 0)) {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    uint64_t v17 = v16;
    p_shared_weak_owners = &v16->__shared_weak_owners_;
    atomic_fetch_add_explicit(&v16->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v17);
    }
    uint64_t v19 = *((void *)this + 28);
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 3321888768;
    aBlock[2] = ___ZN9SARModule26initializePowerSource_syncEv_block_invoke;
    aBlock[3] = &__block_descriptor_56_e8_40c33_ZTSNSt3__18weak_ptrI9SARModuleEE_e8_v12__0I8l;
    void aBlock[4] = this;
    void aBlock[5] = v15;
    int v27 = v17;
    atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
    xpc_object_t v20 = _Block_copy(aBlock);
    uint64_t v21 = *((void *)this + 8);
    if (v21) {
      dispatch_retain(*((dispatch_object_t *)this + 8));
    }
    if (v20)
    {
      xpc_object_t v22 = _Block_copy(v20);
      xpc_object_t v23 = *(const void **)(v19 + 136);
      *(void *)(v19 + 136) = v22;
      if (!v23) {
        goto LABEL_41;
      }
    }
    else
    {
      xpc_object_t v23 = *(const void **)(v19 + 136);
      *(void *)(v19 + 136) = 0;
      if (!v23)
      {
LABEL_41:
        if (v21) {
          dispatch_retain(v21);
        }
        xpc_object_t v25 = *(NSObject **)(v19 + 144);
        *(void *)(v19 + 144) = v21;
        if (v25) {
          dispatch_release(v25);
        }
        if (v21) {
          dispatch_release(v21);
        }
        if (v20) {
          _Block_release(v20);
        }
        IOKitEventNotifier::start(*((IOKitEventNotifier **)this + 28));
        if (v27) {
          std::__shared_weak_count::__release_weak(v27);
        }
        std::__shared_weak_count::__release_weak(v17);
        return;
      }
    }
    _Block_release(v23);
    goto LABEL_41;
  }
  dispatch_object_t v24 = *((void *)this + 10);
  if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)long long buf = 0;
    _os_log_error_impl(&dword_1C5767000, v24, OS_LOG_TYPE_ERROR, "Failed to create Power Source Notifier", buf, 2u);
  }
}

void sub_1C58AE994(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, char a17, uint64_t a18, char a19)
{
}

void ___ZN9SARModule22initializeHelpers_syncEv_block_invoke(void *a1, int a2, uint64_t a3)
{
  uint64_t v71 = *MEMORY[0x1E4F143B8];
  long long v4 = (std::__shared_weak_count *)a1[6];
  if (!v4) {
    return;
  }
  uint64_t v7 = (SARModule *)a1[4];
  long long v8 = std::__shared_weak_count::lock(v4);
  if (!v8) {
    return;
  }
  xpc_object_t v9 = v8;
  uint64_t v10 = a1[5];
  if (atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (!v10) {
      return;
    }
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
    if (!v10) {
      return;
    }
  }
  if (a2 == -469794809)
  {
    long long v11 = *((void *)v7 + 10);
    BOOL v12 = os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
    if (a3)
    {
      if (v12)
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_1C5767000, v11, OS_LOG_TYPE_DEFAULT, "#I Tx is on from SPMI", buf, 2u);
      }
      if ((capabilities::radio::maverick((capabilities::radio *)v12) & 1) == 0) {
        SARModule::processTxOn_sync(v7);
      }
    }
    else
    {
      if (v12)
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_1C5767000, v11, OS_LOG_TYPE_DEFAULT, "#I Tx is off from SPMI", buf, 2u);
      }
      if ((capabilities::radio::maverick((capabilities::radio *)v12) & 1) == 0) {
        SARModule::processTxOff_sync(v7);
      }
    }
    return;
  }
  if ((a2 + 469794805) > 1) {
    return;
  }
  xpc_object_t v13 = (ctu::Gestalt *)pthread_mutex_lock(&ctu::Singleton<ctu::Gestalt,ctu::Gestalt,ctu::PthreadMutexGuardPolicy<ctu::Gestalt>>::sInstance);
  uint64_t v14 = off_1EBBDD200;
  if (!off_1EBBDD200)
  {
    ctu::Gestalt::create_default_global((uint64_t *)buf, v13);
    long long v15 = *(_OWORD *)buf;
    *(void *)long long buf = 0;
    *(void *)&uint8_t buf[8] = 0;
    uint64_t v16 = (std::__shared_weak_count *)*(&off_1EBBDD200 + 1);
    off_1EBBDD200 = v15;
    if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
    uint64_t v17 = *(std::__shared_weak_count **)&buf[8];
    if (*(void *)&buf[8]
      && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
    uint64_t v14 = off_1EBBDD200;
  }
  xpc_object_t v18 = (std::__shared_weak_count *)*(&off_1EBBDD200 + 1);
  *(void *)&long long v55 = v14;
  *((void *)&v55 + 1) = *(&off_1EBBDD200 + 1);
  if (*(&off_1EBBDD200 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDD200 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<ctu::Gestalt,ctu::Gestalt,ctu::PthreadMutexGuardPolicy<ctu::Gestalt>>::sInstance);
  int v19 = (*(uint64_t (**)(uint64_t))(*(void *)v14 + 96))(v14);
  if (v18 && !atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
  if (v19)
  {
    xpc_object_t v20 = *((void *)v7 + 10);
    if (!os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    *(_WORD *)long long buf = 0;
    uint64_t v21 = "#I We don't trigger the coredump request from the kernel driver in Restore Mode";
    goto LABEL_30;
  }
  if ((TelephonyUtilIsInternalBuild() & 1) == 0 && (TelephonyUtilIsCarrierBuild() & 1) == 0)
  {
    xpc_object_t v20 = *((void *)v7 + 10);
    if (!os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    *(_WORD *)long long buf = 0;
    uint64_t v21 = "#I We don't trigger the coredump request from the kernel driver if it is not Carrier/Internal build";
LABEL_30:
    _os_log_impl(&dword_1C5767000, v20, OS_LOG_TYPE_DEFAULT, v21, buf, 2u);
    return;
  }
  long long v55 = 0uLL;
  uint64_t v56 = 0;
  if (a2 == -469794805)
  {
    qmemcpy(&v55, "SPMI Bus error", 14);
    char v22 = 14;
  }
  else
  {
    long long v55 = *(_OWORD *)"OCP packet error";
    char v22 = 16;
  }
  HIBYTE(v56) = v22;
  memset(&__p, 170, sizeof(__p));
  p_p = &__p;
  config::hw::getBootArgs(&__p);
  int64_t size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
  {
    int64_t size = __p.__r_.__value_.__l.__size_;
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if (size >= 17)
  {
    xpc_object_t v25 = (char *)p_p + size;
    uint64_t v26 = p_p;
    while (1)
    {
      int v27 = (char *)memchr(v26, 115, size - 16);
      if (!v27) {
        goto LABEL_60;
      }
      BOOL v28 = *(void *)v27 == 0x696D70732D726173 && *((void *)v27 + 1) == 0x6D756465726F632DLL;
      if (v28 && v27[16] == 112) {
        break;
      }
      uint64_t v26 = (std::string *)(v27 + 1);
      int64_t size = v25 - (char *)v26;
      if (v25 - (char *)v26 < 17) {
        goto LABEL_60;
      }
    }
    if (v27 == v25 || v27 - (char *)p_p == -1) {
      goto LABEL_60;
    }
    xpc_object_t v53 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
    xpc_object_t v30 = xpc_dictionary_create(0, 0, 0);
    xpc_object_t v31 = v30;
    if (v30)
    {
      xpc_object_t v53 = v30;
    }
    else
    {
      xpc_object_t v31 = xpc_null_create();
      xpc_object_t v53 = v31;
      if (!v31)
      {
        xpc_object_t v34 = xpc_null_create();
        xpc_object_t v31 = 0;
        goto LABEL_74;
      }
    }
    if (MEMORY[0x1C8792D30](v31) == MEMORY[0x1E4F14590])
    {
      xpc_retain(v31);
LABEL_75:
      xpc_release(v31);
      xpc_object_t v51 = xpc_string_create((const char *)*MEMORY[0x1E4F4C6E8]);
      if (!v51) {
        xpc_object_t v51 = xpc_null_create();
      }
      uint64_t v35 = *MEMORY[0x1E4F4C690];
      *(void *)long long buf = &v53;
      *(void *)&uint8_t buf[8] = v35;
      xpc::dict::object_proxy::operator=((uint64_t)buf, &v51, &object);
      xpc_release(object);
      xpc_object_t object = 0;
      xpc_release(v51);
      xpc_object_t v51 = 0;
      xpc_object_t v49 = xpc_string_create((const char *)*MEMORY[0x1E4F4D1A0]);
      if (!v49) {
        xpc_object_t v49 = xpc_null_create();
      }
      uint64_t v36 = *MEMORY[0x1E4F4CA38];
      *(void *)long long buf = &v53;
      *(void *)&uint8_t buf[8] = v36;
      xpc::dict::object_proxy::operator=((uint64_t)buf, &v49, &v50);
      xpc_release(v50);
      xpc_object_t v50 = 0;
      xpc_release(v49);
      xpc_object_t v37 = (const char *)&v55;
      if (v56 < 0) {
        xpc_object_t v37 = (const char *)v55;
      }
      xpc_object_t v49 = 0;
      long long v69 = 0u;
      memset(v70, 0, sizeof(v70));
      long long v67 = 0u;
      long long v68 = 0u;
      long long v65 = 0u;
      long long v66 = 0u;
      long long v63 = 0u;
      long long v64 = 0u;
      long long v61 = 0u;
      long long v62 = 0u;
      long long v59 = 0u;
      long long v60 = 0u;
      long long v58 = 0u;
      memset(buf, 0, sizeof(buf));
      snprintf((char *)buf, 0xFFuLL, "%s (0x%x)", v37, a3);
      xpc_object_t v47 = xpc_string_create((const char *)buf);
      if (!v47) {
        xpc_object_t v47 = xpc_null_create();
      }
      xpc_object_t v38 = (void *)*MEMORY[0x1E4F4C8F0];
      v43[0] = &v53;
      v43[1] = v38;
      xpc::dict::object_proxy::operator=((uint64_t)v43, &v47, &v48);
      xpc_release(v48);
      xpc_object_t v48 = 0;
      xpc_release(v47);
      xpc_object_t v46 = 0;
      xpc_object_t v47 = 0;
      uint64_t v45 = 0;
      xpc_object_t v39 = (std::__shared_weak_count *)a1[6];
      if (v39 && (xpc_object_t v46 = std::__shared_weak_count::lock(v39)) != 0)
      {
        uint64_t v40 = a1[5];
        uint64_t v45 = v40;
      }
      else
      {
        uint64_t v40 = 0;
      }
      std::string::basic_string[abi:ne180100]<0>(v43, (char *)*MEMORY[0x1E4F4C638]);
      xpc::dict::dict((xpc::dict *)&v42, &v53);
      xpc_object_t v41 = 0;
      Service::runCommand(v40, (uint64_t)v43, &v42, &v41);
      xpc_release(v42);
      xpc_object_t v42 = 0;
      if (v44 < 0) {
        operator delete(v43[0]);
      }
      std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&v45);
      xpc_release(v53);
      goto LABEL_61;
    }
    xpc_object_t v34 = xpc_null_create();
LABEL_74:
    xpc_object_t v53 = v34;
    goto LABEL_75;
  }
LABEL_60:
  xpc_object_t v32 = *((void *)v7 + 10);
  if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
  {
    uint64_t v33 = &v55;
    if (v56 < 0) {
      uint64_t v33 = (long long *)v55;
    }
    *(_DWORD *)long long buf = 136315394;
    *(void *)&uint8_t buf[4] = v33;
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = "sar-spmi-coredump";
    _os_log_error_impl(&dword_1C5767000, v32, OS_LOG_TYPE_ERROR, "Detected %s, but AP won't trigger the coredump since %s is not found in the boot-args", buf, 0x16u);
  }
LABEL_61:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v56) < 0) {
    operator delete((void *)v55);
  }
}

void sub_1C58AF1E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, xpc_object_t object, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,xpc_object_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void SARModule::processTxOn_sync(SARModule *this)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *((void *)this + 10);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(cf[0]) = 0;
    _os_log_impl(&dword_1C5767000, v2, OS_LOG_TYPE_DEFAULT, "#I Tx is on", (uint8_t *)cf, 2u);
  }
  *((unsigned char *)this + 264) = 1;
  uint64_t v3 = (OBDManager *)*((void *)this + 24);
  if (v3) {
    OBDManager::start(v3, 2000);
  }
  long long v4 = (HandDetectionManager *)*((void *)this + 31);
  if (v4) {
    HandDetectionManager::setTxState(v4, *((unsigned __int8 *)this + 264));
  }
  xpc_object_t v5 = xpc_dictionary_create(0, 0, 0);
  if (v5 || (xpc_object_t v5 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C8792D30](v5) == MEMORY[0x1E4F14590])
    {
      xpc_retain(v5);
      xpc_object_t v6 = v5;
    }
    else
    {
      xpc_object_t v6 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v6 = xpc_null_create();
    xpc_object_t v5 = 0;
  }
  xpc_release(v5);
  xpc_object_t v7 = xpc_string_create((const char *)*MEMORY[0x1E4F4D0C0]);
  if (!v7) {
    xpc_object_t v7 = xpc_null_create();
  }
  xpc_dictionary_set_value(v6, (const char *)*MEMORY[0x1E4F4CD50], v7);
  xpc_object_t v8 = xpc_null_create();
  xpc_release(v7);
  xpc_release(v8);
  CFTypeRef v33 = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  *(void *)xpc_object_t object = v6;
  if (v6) {
    xpc_retain(v6);
  }
  else {
    *(void *)xpc_object_t object = xpc_null_create();
  }
  xpc::bridge((uint64_t *)cf, (xpc *)object, v9);
  CFTypeRef v10 = cf[0];
  if (!cf[0] || (CFTypeID v11 = CFGetTypeID(cf[0]), v11 != CFDictionaryGetTypeID()))
  {
    CFTypeRef v10 = 0;
    CFTypeRef v33 = 0;
    CFTypeRef v12 = cf[0];
    if (!cf[0]) {
      goto LABEL_24;
    }
    goto LABEL_23;
  }
  CFTypeRef v33 = v10;
  CFRetain(v10);
  CFTypeRef v12 = cf[0];
  if (cf[0]) {
LABEL_23:
  }
    CFRelease(v12);
LABEL_24:
  xpc_release(*(xpc_object_t *)object);
  if (v10) {
    xpc_object_t v13 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
  }
  else {
    xpc_object_t v13 = 0;
  }
  if (!v13)
  {
    xpc_object_t v18 = *((void *)this + 10);
    if (!os_log_type_enabled(v18, OS_LOG_TYPE_ERROR)) {
      goto LABEL_49;
    }
    int v19 = (char *)MEMORY[0x1C8792C60](v6);
    memset(cf, 170, 24);
    size_t v20 = strlen(v19);
    if (v20 > 0x7FFFFFFFFFFFFFF7) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    uint64_t v21 = (const void *)v20;
    if (v20 >= 0x17)
    {
      uint64_t v25 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v20 | 7) != 0x17) {
        uint64_t v25 = v20 | 7;
      }
      uint64_t v26 = v25 + 1;
      char v22 = operator new(v25 + 1);
      cf[1] = v21;
      cf[2] = (CFTypeRef)(v26 | 0x8000000000000000);
      cf[0] = v22;
    }
    else
    {
      HIBYTE(cf[2]) = v20;
      char v22 = cf;
      if (!v20)
      {
LABEL_56:
        *((unsigned char *)v21 + (void)v22) = 0;
        free(v19);
        int v27 = cf;
        if (SHIBYTE(cf[2]) < 0) {
          int v27 = (CFTypeRef *)cf[0];
        }
        *(_DWORD *)xpc_object_t object = 136315138;
        *(void *)&object[4] = v27;
        _os_log_error_impl(&dword_1C5767000, v18, OS_LOG_TYPE_ERROR, "Failed to convert the transmit State data and no sending the message: %s", object, 0xCu);
        if (SHIBYTE(cf[2]) < 0) {
          operator delete((void *)cf[0]);
        }
        CFTypeRef v10 = v33;
        if (v33) {
          goto LABEL_50;
        }
        goto LABEL_51;
      }
    }
    memcpy(v22, v19, (size_t)v21);
    goto LABEL_56;
  }
  uint64_t v14 = (const void *)*MEMORY[0x1E4F4CDF0];
  size_t v15 = strlen((const char *)*MEMORY[0x1E4F4CDF0]);
  if (v15 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v16 = (void *)v15;
  if (v15 >= 0x17)
  {
    uint64_t v23 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v15 | 7) != 0x17) {
      uint64_t v23 = v15 | 7;
    }
    uint64_t v24 = v23 + 1;
    uint64_t v17 = (void **)operator new(v23 + 1);
    __dst[1] = v16;
    unint64_t v32 = v24 | 0x8000000000000000;
    __dst[0] = v17;
  }
  else
  {
    HIBYTE(v32) = v15;
    uint64_t v17 = __dst;
    if (!v15)
    {
      LOBYTE(__dst[0]) = 0;
      CFTypeRef v10 = v33;
      CFTypeRef v30 = v33;
      if (!v33) {
        goto LABEL_43;
      }
      goto LABEL_42;
    }
  }
  memmove(v17, v14, (size_t)v16);
  *((unsigned char *)v16 + (void)v17) = 0;
  CFTypeRef v10 = v33;
  CFTypeRef v30 = v33;
  if (v33) {
LABEL_42:
  }
    CFRetain(v10);
LABEL_43:
  aBlock = 0;
  Service::broadcastEvent((uint64_t)this, (uint64_t)__dst, &v30, (const void **)&aBlock);
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v30) {
    CFRelease(v30);
  }
  if (SHIBYTE(v32) < 0) {
    operator delete(__dst[0]);
  }
LABEL_49:
  if (v10) {
LABEL_50:
  }
    CFRelease(v10);
LABEL_51:
  xpc_release(v6);
}

void sub_1C58AF720(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *aBlock, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,xpc_object_t object)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void SARModule::processTxOff_sync(SARModule *this)
{
  v50[1] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *((void *)this + 10);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_1C5767000, v2, OS_LOG_TYPE_DEFAULT, "#I Tx is off", buf, 2u);
  }
  *((unsigned char *)this + 264) = 0;
  uint64_t v3 = (OBDManager *)*((void *)this + 24);
  if (v3) {
    OBDManager::stop(v3);
  }
  long long v4 = (HandDetectionManager *)*((void *)this + 31);
  if (!v4)
  {
LABEL_30:
    v50[0] = 0xAAAAAAAAAAAAAAAALL;
    xpc_object_t v20 = xpc_dictionary_create(0, 0, 0);
    xpc_object_t v21 = v20;
    if (v20)
    {
      v50[0] = (unint64_t)v20;
    }
    else
    {
      xpc_object_t v21 = xpc_null_create();
      v50[0] = (unint64_t)v21;
      if (!v21)
      {
        xpc_object_t v22 = xpc_null_create();
        xpc_object_t v21 = 0;
        goto LABEL_40;
      }
    }
    if (MEMORY[0x1C8792D30](v21) == MEMORY[0x1E4F14590])
    {
      xpc_retain(v21);
      goto LABEL_41;
    }
    xpc_object_t v22 = xpc_null_create();
LABEL_40:
    v50[0] = (unint64_t)v22;
LABEL_41:
    xpc_release(v21);
    xpc_object_t v24 = xpc_string_create((const char *)*MEMORY[0x1E4F4CDB0]);
    if (!v24) {
      xpc_object_t v24 = xpc_null_create();
    }
    uint64_t v25 = (void *)v50[0];
    xpc_dictionary_set_value((xpc_object_t)v50[0], (const char *)*MEMORY[0x1E4F4CD50], v24);
    xpc_object_t v26 = xpc_null_create();
    xpc_release(v24);
    xpc_release(v26);
    CFTypeRef cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
    *(void *)&long long v49 = v25;
    if (v25) {
      xpc_retain(v25);
    }
    else {
      *(void *)&long long v49 = xpc_null_create();
    }
    xpc::bridge((uint64_t *)buf, (xpc *)&v49, v27);
    CFTypeRef v28 = *(CFTypeRef *)buf;
    if (*(void *)buf && (CFTypeID v29 = CFGetTypeID(*(CFTypeRef *)buf), v29 == CFDictionaryGetTypeID()))
    {
      CFTypeRef cf = v28;
      CFRetain(v28);
      CFTypeRef v30 = *(const void **)buf;
      if (!*(void *)buf)
      {
LABEL_52:
        xpc_release((xpc_object_t)v49);
        if (v28) {
          xpc_object_t v31 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
        }
        else {
          xpc_object_t v31 = 0;
        }
        if (!v31)
        {
          uint64_t v36 = *((void *)this + 10);
          if (!os_log_type_enabled(v36, OS_LOG_TYPE_ERROR)) {
            goto LABEL_77;
          }
          xpc::dict::to_debug_string((xpc::dict *)v50, buf);
          xpc_object_t v37 = v48 >= 0 ? buf : *(uint8_t **)buf;
          LODWORD(v49) = 136315138;
          *(void *)((char *)&v49 + 4) = v37;
          _os_log_error_impl(&dword_1C5767000, v36, OS_LOG_TYPE_ERROR, "Failed to convert the transmit State data and no sending the message: %s", (uint8_t *)&v49, 0xCu);
          if ((v48 & 0x80000000) == 0) {
            goto LABEL_77;
          }
          xpc_object_t v38 = *(void **)buf;
          goto LABEL_82;
        }
        unint64_t v32 = (const void *)*MEMORY[0x1E4F4CDF0];
        size_t v33 = strlen((const char *)*MEMORY[0x1E4F4CDF0]);
        if (v33 >= 0x7FFFFFFFFFFFFFF8) {
          std::string::__throw_length_error[abi:ne180100]();
        }
        size_t v34 = v33;
        if (v33 >= 0x17)
        {
          uint64_t v39 = (v33 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v33 | 7) != 0x17) {
            uint64_t v39 = v33 | 7;
          }
          uint64_t v40 = v39 + 1;
          uint64_t v35 = operator new(v39 + 1);
          __dst[1] = v34;
          unint64_t v44 = v40 | 0x8000000000000000;
          __dst[0] = v35;
        }
        else
        {
          HIBYTE(v44) = v33;
          uint64_t v35 = __dst;
          if (!v33)
          {
            LOBYTE(__dst[0]) = 0;
            CFTypeRef v28 = cf;
            CFTypeRef v42 = cf;
            if (!cf) {
              goto LABEL_72;
            }
            goto LABEL_71;
          }
        }
        memmove(v35, v32, v34);
        *((unsigned char *)v35 + v34) = 0;
        CFTypeRef v28 = cf;
        CFTypeRef v42 = cf;
        if (!cf)
        {
LABEL_72:
          aBlock = 0;
          Service::broadcastEvent((uint64_t)this, (uint64_t)__dst, &v42, (const void **)&aBlock);
          if (aBlock) {
            _Block_release(aBlock);
          }
          if (v42) {
            CFRelease(v42);
          }
          if ((SHIBYTE(v44) & 0x80000000) == 0)
          {
LABEL_77:
            if (!v28)
            {
LABEL_79:
              xpc_release((xpc_object_t)v50[0]);
              return;
            }
LABEL_78:
            CFRelease(v28);
            goto LABEL_79;
          }
          xpc_object_t v38 = (void *)__dst[0];
LABEL_82:
          operator delete(v38);
          if (!v28) {
            goto LABEL_79;
          }
          goto LABEL_78;
        }
LABEL_71:
        CFRetain(v28);
        goto LABEL_72;
      }
    }
    else
    {
      CFTypeRef v28 = 0;
      CFTypeRef cf = 0;
      CFTypeRef v30 = *(const void **)buf;
      if (!*(void *)buf) {
        goto LABEL_52;
      }
    }
    CFRelease(v30);
    goto LABEL_52;
  }
  HandDetectionManager::setTxState(v4, *((unsigned __int8 *)this + 264));
  *((unsigned char *)this + 168) = 0;
  xpc_object_t v5 = *((void *)this + 10);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = 0;
    _os_log_impl(&dword_1C5767000, v5, OS_LOG_TYPE_DEFAULT, "#I Sending Grip State due to Tx is off: 0x%x\n", buf, 8u);
  }
  xpc_object_t v6 = (AppleSARHelper *)pthread_mutex_lock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  xpc_object_t v7 = (AppleSARHelper *)off_1EBBDD250;
  if (!off_1EBBDD250)
  {
    AppleSARHelper::create_default_global((uint64_t *)buf, v6);
    long long v8 = *(_OWORD *)buf;
    memset(buf, 0, sizeof(buf));
    xpc_object_t v9 = (std::__shared_weak_count *)*(&off_1EBBDD250 + 1);
    off_1EBBDD250 = v8;
    if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
    CFTypeRef v10 = *(std::__shared_weak_count **)&buf[8];
    if (*(void *)&buf[8]
      && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
    xpc_object_t v7 = (AppleSARHelper *)off_1EBBDD250;
  }
  CFTypeID v11 = (std::__shared_weak_count *)*(&off_1EBBDD250 + 1);
  *(void *)&long long v49 = v7;
  *((void *)&v49 + 1) = *(&off_1EBBDD250 + 1);
  if (*(&off_1EBBDD250 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDD250 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  char v46 = *((unsigned char *)this + 168);
  if (*((_DWORD *)v7 + 1))
  {
    *(void *)long long buf = 0;
    v50[0] = 0;
    LODWORD(cf) = 1;
    char v12 = AppleSARHelper::callUserClientMethod(v7, 7, (const unint64_t *)buf, 1, &v46, 1, v50, (unsigned int *)&cf, &v46, 1uLL);
    if (!v11) {
      goto LABEL_23;
    }
  }
  else
  {
    char v12 = 0;
    if (!v11) {
      goto LABEL_23;
    }
  }
  if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
    if (v12) {
      goto LABEL_24;
    }
    goto LABEL_37;
  }
LABEL_23:
  if (v12)
  {
LABEL_24:
    if (*((unsigned __int8 *)this + 169) != *((unsigned __int8 *)this + 168) || !*((void *)this + 38))
    {
      xpc_object_t v13 = (std::__shared_weak_count *)*((void *)this + 7);
      if (!v13 || (uint64_t v14 = *((void *)this + 6), (v15 = std::__shared_weak_count::lock(v13)) == 0)) {
        std::__throw_bad_weak_ptr[abi:ne180100]();
      }
      uint64_t v16 = v15;
      uint64_t v17 = operator new(8uLL);
      void *v17 = this;
      xpc_object_t v18 = *((void *)this + 8);
      atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
      int v19 = operator new(0x18uLL);
      *int v19 = v17;
      v19[1] = v14;
      void v19[2] = v16;
      dispatch_async_f(v18, v19, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<SARModule>::execute_wrapped<SARModule::processTxOff_sync(void)::$_0>(SARModule::processTxOff_sync(void)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<SARModule::processTxOff_sync(void)::$_0,dispatch_queue_s *::default_delete<SARModule::processTxOff_sync(void)::$_0>>)::{lambda(void *)#1}::__invoke);
      if (!atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    goto LABEL_30;
  }
LABEL_37:
  uint64_t v23 = *((void *)this + 10);
  if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)long long buf = 0;
    _os_log_error_impl(&dword_1C5767000, v23, OS_LOG_TYPE_ERROR, "Failed to get SAR Fusion State!", buf, 2u);
  }
}

void sub_1C58AFE80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *aBlock, char a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20,uint64_t a21,char a22)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t dispatch::callback<void({block_pointer})(sar::AppleSARMessageType,void *)>::~callback(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 8);
  if (v2) {
    dispatch_release(v2);
  }
  if (*(void *)a1) {
    _Block_release(*(const void **)a1);
  }
  return a1;
}

void ___ZN9SARModule19initializeWiFi_syncEv_block_invoke(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = (std::__shared_weak_count *)v2[7];
  if (!v3 || (v5 = v2[6], (xpc_object_t v6 = std::__shared_weak_count::lock(v3)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  xpc_object_t v7 = v6;
  long long v8 = operator new(0x10uLL);
  *(void *)long long v8 = v2;
  uint8_t v8[8] = a2;
  xpc_object_t v9 = v2[8];
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  CFTypeRef v10 = operator new(0x18uLL);
  *CFTypeRef v10 = v8;
  v10[1] = v5;
  v10[2] = v7;
  dispatch_async_f(v9, v10, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI9SARModuleE15execute_wrappedIZZNS3_19initializeWiFi_syncEvEUb0_E3__4EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS7_NSC_14default_deleteIS7_EEEEENUlPvE_8__invokeESH_);
  if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

uint64_t dispatch::callback<void({block_pointer})(BOOL)>::~callback(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 8);
  if (v2) {
    dispatch_release(v2);
  }
  if (*(void *)a1) {
    _Block_release(*(const void **)a1);
  }
  return a1;
}

void ___ZN9SARModule24initializeBluetooth_syncEv_block_invoke(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = (std::__shared_weak_count *)v2[7];
  if (!v3 || (v5 = v2[6], (xpc_object_t v6 = std::__shared_weak_count::lock(v3)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  xpc_object_t v7 = v6;
  long long v8 = operator new(0x10uLL);
  *(void *)long long v8 = v2;
  uint8_t v8[8] = a2;
  xpc_object_t v9 = v2[8];
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  CFTypeRef v10 = operator new(0x18uLL);
  *CFTypeRef v10 = v8;
  v10[1] = v5;
  v10[2] = v7;
  dispatch_async_f(v9, v10, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI9SARModuleE15execute_wrappedIZZNS3_24initializeBluetooth_syncEvEUb1_E3__5EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS7_NSC_14default_deleteIS7_EEEEENUlPvE_8__invokeESH_);
  if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void ___ZN9SARModule20initializeAudio_syncEv_block_invoke(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = (std::__shared_weak_count *)v2[7];
  if (!v3 || (v5 = v2[6], (xpc_object_t v6 = std::__shared_weak_count::lock(v3)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  xpc_object_t v7 = v6;
  long long v8 = operator new(0x10uLL);
  *(void *)long long v8 = v2;
  uint8_t v8[8] = a2;
  xpc_object_t v9 = v2[8];
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  CFTypeRef v10 = operator new(0x18uLL);
  *CFTypeRef v10 = v8;
  v10[1] = v5;
  v10[2] = v7;
  dispatch_async_f(v9, v10, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI9SARModuleE15execute_wrappedIZZNS3_20initializeAudio_syncEvEUb2_E3__6EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS7_NSC_14default_deleteIS7_EEEEENUlPvE_8__invokeESH_);
  if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void ___ZN9SARModule20initializeAudio_syncEv_block_invoke_2(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = (std::__shared_weak_count *)v2[7];
  if (!v3 || (v5 = v2[6], (xpc_object_t v6 = std::__shared_weak_count::lock(v3)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  xpc_object_t v7 = v6;
  long long v8 = operator new(0x10uLL);
  *(void *)long long v8 = v2;
  uint8_t v8[8] = a2;
  xpc_object_t v9 = v2[8];
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  CFTypeRef v10 = operator new(0x18uLL);
  *CFTypeRef v10 = v8;
  v10[1] = v5;
  v10[2] = v7;
  dispatch_async_f(v9, v10, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI9SARModuleE15execute_wrappedIZZNS3_20initializeAudio_syncEvEUb3_E3__7EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS7_NSC_14default_deleteIS7_EEEEENUlPvE_8__invokeESH_);
  if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void ___ZN9SARModule18initializeOBD_syncEv_block_invoke(void *a1, char a2, char a3)
{
  v30[1] = *MEMORY[0x1E4F143B8];
  long long v4 = (std::__shared_weak_count *)a1[6];
  if (!v4) {
    return;
  }
  uint64_t v7 = a1[4];
  long long v8 = std::__shared_weak_count::lock(v4);
  if (!v8) {
    return;
  }
  xpc_object_t v9 = v8;
  uint64_t v10 = a1[5];
  if (atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (!v10) {
      return;
    }
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
    if (!v10) {
      return;
    }
  }
  *(unsigned char *)(v7 + 165) = a2 & 0xF | (16 * a3);
  CFTypeID v11 = *(NSObject **)(v7 + 80);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 67109376;
    *(_DWORD *)&uint8_t buf[4] = a2 & 0xF;
    *(_WORD *)&uint8_t buf[8] = 1024;
    *(_DWORD *)&buf[10] = a3 & 0xF;
    _os_log_impl(&dword_1C5767000, v11, OS_LOG_TYPE_DEFAULT, "#I Sending SAR Selection: 0x%x, Tuner State: 0x%x\n", buf, 0xEu);
  }
  char v12 = (AppleSARHelper *)pthread_mutex_lock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  xpc_object_t v13 = (AppleSARHelper *)off_1EBBDD250;
  if (!off_1EBBDD250)
  {
    AppleSARHelper::create_default_global((uint64_t *)buf, v12);
    long long v14 = *(_OWORD *)buf;
    memset(buf, 0, sizeof(buf));
    size_t v15 = (std::__shared_weak_count *)*(&off_1EBBDD250 + 1);
    off_1EBBDD250 = v14;
    if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
    uint64_t v16 = *(std::__shared_weak_count **)&buf[8];
    if (*(void *)&buf[8]
      && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
    xpc_object_t v13 = (AppleSARHelper *)off_1EBBDD250;
  }
  uint64_t v17 = (std::__shared_weak_count *)*(&off_1EBBDD250 + 1);
  if (*(&off_1EBBDD250 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDD250 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  char v27 = *(unsigned char *)(v7 + 165);
  if (*((_DWORD *)v13 + 1))
  {
    *(void *)long long buf = 0;
    v30[0] = 0;
    unsigned int v28 = 1;
    char v18 = AppleSARHelper::callUserClientMethod(v13, 3, (const unint64_t *)buf, 1, &v27, 1, v30, &v28, &v27, 1uLL);
    if (!v17) {
      goto LABEL_25;
    }
  }
  else
  {
    char v18 = 0;
    if (!v17) {
      goto LABEL_25;
    }
  }
  if (!atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
LABEL_25:
  if ((v18 & 1) == 0 && (int v19 = *(NSObject **)(v7 + 80), os_log_type_enabled(v19, OS_LOG_TYPE_ERROR)))
  {
    *(_WORD *)long long buf = 0;
    _os_log_error_impl(&dword_1C5767000, v19, OS_LOG_TYPE_ERROR, "Failed to set SAR Fusion!", buf, 2u);
    if (*(unsigned __int8 *)(v7 + 166) == *(unsigned __int8 *)(v7 + 165))
    {
LABEL_28:
      if (*(void *)(v7 + 304)) {
        return;
      }
    }
  }
  else if (*(unsigned __int8 *)(v7 + 166) == *(unsigned __int8 *)(v7 + 165))
  {
    goto LABEL_28;
  }
  xpc_object_t v20 = *(std::__shared_weak_count **)(v7 + 56);
  if (!v20 || (v21 = *(void *)(v7 + 48), (xpc_object_t v22 = std::__shared_weak_count::lock(v20)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v23 = v22;
  xpc_object_t v24 = operator new(8uLL);
  *xpc_object_t v24 = v7;
  uint64_t v25 = *(NSObject **)(v7 + 64);
  atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
  xpc_object_t v26 = operator new(0x18uLL);
  void *v26 = v24;
  v26[1] = v21;
  v26[2] = v23;
  dispatch_async_f(v25, v26, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI9SARModuleE15execute_wrappedIZZNS3_18initializeOBD_syncEvEUb4_E3__8EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS7_NSC_14default_deleteIS7_EEEEENUlPvE_8__invokeESH_);
  if (!atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
  }
}

void sub_1C58B0808(_Unwind_Exception *a1)
{
}

uint64_t dispatch::callback<void({block_pointer})(sar::OBDState,sar::TunerState)>::~callback(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 8);
  if (v2) {
    dispatch_release(v2);
  }
  if (*(void *)a1) {
    _Block_release(*(const void **)a1);
  }
  return a1;
}

void ___ZN9SARModule24initializeAccessory_syncEv_block_invoke(void *a1, int a2)
{
  v24[1] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (std::__shared_weak_count *)a1[6];
  if (!v3) {
    return;
  }
  uint64_t v5 = a1[4];
  xpc_object_t v6 = std::__shared_weak_count::lock(v3);
  if (!v6) {
    return;
  }
  uint64_t v7 = v6;
  uint64_t v8 = a1[5];
  if (atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (!v8) {
      return;
    }
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v7);
    if (!v8) {
      return;
    }
  }
  if (a2)
  {
    int v9 = *(_DWORD *)(v5 + 272) | a2;
    int v10 = *(_DWORD *)(v5 + 268);
  }
  else
  {
    int v9 = 0;
    int v10 = 0;
  }
  *(_DWORD *)(v5 + 272) = v9;
  *(_DWORD *)(v5 + 268) = v10;
  int v11 = v10 | v9;
  *(_DWORD *)(v5 + 161) = v10 | v9;
  char v12 = *(NSObject **)(v5 + 80);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v11;
    _os_log_impl(&dword_1C5767000, v12, OS_LOG_TYPE_DEFAULT, "#I Sending Accessory State: 0x%x", buf, 8u);
  }
  xpc_object_t v13 = (AppleSARHelper *)pthread_mutex_lock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  long long v14 = (AppleSARHelper *)off_1EBBDD250;
  if (!off_1EBBDD250)
  {
    AppleSARHelper::create_default_global((uint64_t *)buf, v13);
    long long v15 = *(_OWORD *)buf;
    memset(buf, 0, sizeof(buf));
    uint64_t v16 = (std::__shared_weak_count *)*(&off_1EBBDD250 + 1);
    off_1EBBDD250 = v15;
    if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
    uint64_t v17 = *(std::__shared_weak_count **)&buf[8];
    if (*(void *)&buf[8]
      && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
    long long v14 = (AppleSARHelper *)off_1EBBDD250;
  }
  char v18 = (std::__shared_weak_count *)*(&off_1EBBDD250 + 1);
  if (*(&off_1EBBDD250 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDD250 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  int v21 = *(_DWORD *)(v5 + 161);
  if (!*((_DWORD *)v14 + 1))
  {
    char v19 = 0;
    if (!v18) {
      goto LABEL_28;
    }
LABEL_26:
    if (!atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
    goto LABEL_28;
  }
  *(void *)long long buf = 0;
  v24[0] = 0;
  unsigned int v22 = 1;
  char v19 = AppleSARHelper::callUserClientMethod(v14, 2, (const unint64_t *)buf, 1, &v21, 4, v24, &v22, &v21, 4uLL);
  if (v18) {
    goto LABEL_26;
  }
LABEL_28:
  if ((v19 & 1) == 0)
  {
    xpc_object_t v20 = *(NSObject **)(v5 + 80);
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl(&dword_1C5767000, v20, OS_LOG_TYPE_ERROR, "Failed to set SAR Fusion State!", buf, 2u);
    }
  }
}

void sub_1C58B0BB4(_Unwind_Exception *a1)
{
}

uint64_t dispatch::callback<void({block_pointer})(unsigned int)>::~callback(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 8);
  if (v2) {
    dispatch_release(v2);
  }
  if (*(void *)a1) {
    _Block_release(*(const void **)a1);
  }
  return a1;
}

void ___ZN9SARModule26initializePowerSource_syncEv_block_invoke(void *a1, int a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    uint64_t v5 = (SARModule *)a1[4];
    xpc_object_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      uint64_t v7 = v6;
      uint64_t v8 = a1[5];
      if (atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        if (!v8) {
          return;
        }
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v7);
        if (!v8) {
          return;
        }
      }
      *((_DWORD *)v5 + 60) = a2;
      SARModule::sendPowerSource_sync(v5);
    }
  }
}

void SARModule::sendPowerSource_sync(SARModule *this)
{
  v15[1] = *MEMORY[0x1E4F143B8];
  int v2 = *((_DWORD *)this + 60);
  *((unsigned char *)this + 170) = v2;
  uint64_t v3 = *((void *)this + 10);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v2;
    _os_log_impl(&dword_1C5767000, v3, OS_LOG_TYPE_DEFAULT, "#I Sending Power Source: 0x%x\n", buf, 8u);
  }
  long long v4 = (AppleSARHelper *)pthread_mutex_lock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  uint64_t v5 = (AppleSARHelper *)off_1EBBDD250;
  if (!off_1EBBDD250)
  {
    AppleSARHelper::create_default_global((uint64_t *)buf, v4);
    long long v6 = *(_OWORD *)buf;
    memset(buf, 0, sizeof(buf));
    uint64_t v7 = (std::__shared_weak_count *)*(&off_1EBBDD250 + 1);
    off_1EBBDD250 = v6;
    if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    uint64_t v8 = *(std::__shared_weak_count **)&buf[8];
    if (*(void *)&buf[8]
      && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
    uint64_t v5 = (AppleSARHelper *)off_1EBBDD250;
  }
  int v9 = (std::__shared_weak_count *)*(&off_1EBBDD250 + 1);
  if (*(&off_1EBBDD250 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDD250 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  char v12 = *((unsigned char *)this + 170);
  if (*((_DWORD *)v5 + 1))
  {
    *(void *)long long buf = 0;
    v15[0] = 0;
    unsigned int v13 = 1;
    char v10 = AppleSARHelper::callUserClientMethod(v5, 8, (const unint64_t *)buf, 1, &v12, 1, v15, &v13, &v12, 1uLL);
    if (!v9)
    {
LABEL_18:
      if (v10) {
        return;
      }
      goto LABEL_19;
    }
  }
  else
  {
    char v10 = 0;
    if (!v9) {
      goto LABEL_18;
    }
  }
  if (atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_18;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  if (v10) {
    return;
  }
LABEL_19:
  int v11 = *((void *)this + 10);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)long long buf = 0;
    _os_log_error_impl(&dword_1C5767000, v11, OS_LOG_TYPE_ERROR, "Failed to send power state", buf, 2u);
  }
}

void sub_1C58B0F74(_Unwind_Exception *a1)
{
}

uint64_t dispatch::callback<void({block_pointer})(CMHandDetectionDelegate::CMHandDetectionResult)>::~callback(uint64_t a1)
{
  int v2 = *(NSObject **)(a1 + 8);
  if (v2) {
    dispatch_release(v2);
  }
  if (*(void *)a1) {
    _Block_release(*(const void **)a1);
  }
  return a1;
}

void ___ZN9SARModule32initializeVoIPCallDetection_syncEv_block_invoke(void *a1, int a2, int a3, uint64_t a4)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = (std::__shared_weak_count *)a1[6];
  if (v5)
  {
    int v9 = (NSObject **)a1[4];
    char v10 = std::__shared_weak_count::lock(v5);
    if (v10)
    {
      int v11 = v10;
      uint64_t v12 = a1[5];
      if (atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        if (!v12) {
          return;
        }
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v11);
        if (!v12) {
          return;
        }
      }
      unsigned int v13 = v9[10];
      if (a4)
      {
        if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
        {
          long long v14 = "NO";
          if (a2) {
            long long v15 = "YES";
          }
          else {
            long long v15 = "NO";
          }
          int v19 = 136315650;
          uint64_t v20 = a4;
          __int16 v21 = 2080;
          unsigned int v22 = v15;
          if (a3) {
            long long v14 = "YES";
          }
          __int16 v23 = 2080;
          xpc_object_t v24 = v14;
          _os_log_impl(&dword_1C5767000, v13, OS_LOG_TYPE_DEFAULT, "#I %s: callStarting: %s, callActive: %s", (uint8_t *)&v19, 0x20u);
        }
        if (a2 && (a3 & 1) == 0)
        {
          uint64_t v16 = (SARModule *)v9;
          char v17 = 1;
LABEL_23:
          SARModule::processCallStatus(v16, v17);
          return;
        }
        if ((a2 & 1) == 0 && (a3 & 1) == 0)
        {
          uint64_t v16 = (SARModule *)v9;
          char v17 = 0;
          goto LABEL_23;
        }
        char v18 = v9[10];
        if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
        {
          LOWORD(v19) = 0;
          _os_log_debug_impl(&dword_1C5767000, v18, OS_LOG_TYPE_DEBUG, "#D No matching condition to check FT Call status", (uint8_t *)&v19, 2u);
        }
      }
      else if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        LOWORD(v19) = 0;
        _os_log_error_impl(&dword_1C5767000, v13, OS_LOG_TYPE_ERROR, "No provider ID. Reject this call", (uint8_t *)&v19, 2u);
      }
    }
  }
}

void SARModule::sendCurrentState_sync(SARModule *this)
{
  v73[1] = *MEMORY[0x1E4F143B8];
  int v2 = *((void *)this + 10);
  BOOL v3 = os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT);
  if (v3)
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_1C5767000, v2, OS_LOG_TYPE_DEFAULT, "#I Processing Cached Values", buf, 2u);
  }
  capabilities::abs::supportedSARFeatures((capabilities::abs *)v3);
  if (capabilities::abs::operator&())
  {
    BYTE2(v70) = 0;
    LOWORD(v70) = 0;
    long long v4 = (AppleSARHelper *)pthread_mutex_lock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
    uint64_t v5 = (AppleSARHelper *)off_1EBBDD250;
    if (!off_1EBBDD250)
    {
      AppleSARHelper::create_default_global((uint64_t *)buf, v4);
      long long v6 = *(_OWORD *)buf;
      memset(buf, 0, sizeof(buf));
      uint64_t v7 = (std::__shared_weak_count *)*(&off_1EBBDD250 + 1);
      off_1EBBDD250 = v6;
      if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
      uint64_t v8 = *(std::__shared_weak_count **)&buf[8];
      if (*(void *)&buf[8]
        && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
      uint64_t v5 = (AppleSARHelper *)off_1EBBDD250;
    }
    int v9 = (std::__shared_weak_count *)*(&off_1EBBDD250 + 1);
    long long v68 = v5;
    uint64_t v69 = *(&off_1EBBDD250 + 1);
    if (*(&off_1EBBDD250 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDD250 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    pthread_mutex_unlock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
    if (*((_DWORD *)v5 + 1))
    {
      *(void *)long long buf = 3;
      v73[0] = 0;
      unsigned int v71 = 1;
      char v10 = AppleSARHelper::callUserClientMethod(v5, 31, (const unint64_t *)buf, 1, &v70, 3, v73, &v71, &v70, 3uLL);
      if (!v9) {
        goto LABEL_19;
      }
    }
    else
    {
      char v10 = 0;
      if (!v9) {
        goto LABEL_19;
      }
    }
    if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
      if (v10)
      {
LABEL_20:
        int v11 = (std::__shared_weak_count *)*((void *)this + 7);
        if (!v11 || (v12 = *((void *)this + 6), (unsigned int v13 = std::__shared_weak_count::lock(v11)) == 0)) {
          std::__throw_bad_weak_ptr[abi:ne180100]();
        }
        long long v14 = v13;
        p_shared_weak_owners = &v13->__shared_weak_owners_;
        atomic_fetch_add_explicit(&v13->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        if (!atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v14);
        }
        uint64_t v16 = *((void *)this + 35);
        uint64_t v17 = *(unsigned __int16 *)((char *)&v70 + 1);
        aBlock[0] = MEMORY[0x1E4F143A8];
        aBlock[1] = 3321888768;
        aBlock[2] = ___ZN9SARModule21sendCurrentState_syncEv_block_invoke;
        aBlock[3] = &__block_descriptor_59_e8_40c33_ZTSNSt3__18weak_ptrI9SARModuleEE_e21_v20__0B8_object__v_12l;
        void aBlock[4] = this;
        void aBlock[5] = v12;
        long long v63 = v14;
        atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
        __int16 v64 = v70;
        char v65 = BYTE2(v70);
        char v18 = _Block_copy(aBlock);
        int v19 = *((void *)this + 8);
        if (v19) {
          dispatch_retain(*((dispatch_object_t *)this + 8));
        }
        long long v66 = v18;
        dispatch_object_t object = v19;
        (*(void (**)(uint64_t, uint64_t, void **))(*(void *)v16 + 64))(v16, v17, &v66);
        if (object) {
          dispatch_release(object);
        }
        if (v66) {
          _Block_release(v66);
        }
        if (v63) {
          std::__shared_weak_count::__release_weak(v63);
        }
        std::__shared_weak_count::__release_weak(v14);
        goto LABEL_36;
      }
      goto LABEL_34;
    }
LABEL_19:
    if (v10) {
      goto LABEL_20;
    }
LABEL_34:
    uint64_t v20 = *((void *)this + 10);
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl(&dword_1C5767000, v20, OS_LOG_TYPE_ERROR, "Failed to get SAR transition time!", buf, 2u);
    }
  }
LABEL_36:
  __int16 v21 = (AppleSARHelper *)pthread_mutex_lock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  unsigned int v22 = (AppleSARHelper *)off_1EBBDD250;
  if (!off_1EBBDD250)
  {
    AppleSARHelper::create_default_global((uint64_t *)buf, v21);
    long long v23 = *(_OWORD *)buf;
    memset(buf, 0, sizeof(buf));
    xpc_object_t v24 = (std::__shared_weak_count *)*(&off_1EBBDD250 + 1);
    off_1EBBDD250 = v23;
    if (v24 && !atomic_fetch_add(&v24->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
    uint64_t v25 = *(std::__shared_weak_count **)&buf[8];
    if (*(void *)&buf[8]
      && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
    unsigned int v22 = (AppleSARHelper *)off_1EBBDD250;
  }
  xpc_object_t v26 = (std::__shared_weak_count *)*(&off_1EBBDD250 + 1);
  long long v68 = v22;
  uint64_t v69 = *(&off_1EBBDD250 + 1);
  if (*(&off_1EBBDD250 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDD250 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  int v70 = *(_DWORD *)((char *)this + 161);
  if (*((_DWORD *)v22 + 1))
  {
    *(void *)long long buf = 0;
    v73[0] = 0;
    unsigned int v71 = 1;
    char v27 = AppleSARHelper::callUserClientMethod(v22, 2, (const unint64_t *)buf, 1, &v70, 4, v73, &v71, &v70, 4uLL);
    if (!v26)
    {
LABEL_51:
      if (v27) {
        goto LABEL_52;
      }
LABEL_66:
      uint64_t v35 = *((void *)this + 10);
      if (!os_log_type_enabled(v35, OS_LOG_TYPE_ERROR)) {
        return;
      }
      *(_WORD *)long long buf = 0;
      uint64_t v36 = "Failed to send accessory state";
      goto LABEL_144;
    }
  }
  else
  {
    char v27 = 0;
    if (!v26) {
      goto LABEL_51;
    }
  }
  if (atomic_fetch_add(&v26->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_51;
  }
  ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
  std::__shared_weak_count::__release_weak(v26);
  if ((v27 & 1) == 0) {
    goto LABEL_66;
  }
LABEL_52:
  unsigned int v28 = (AppleSARHelper *)pthread_mutex_lock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  CFTypeID v29 = (AppleSARHelper *)off_1EBBDD250;
  if (!off_1EBBDD250)
  {
    AppleSARHelper::create_default_global((uint64_t *)buf, v28);
    long long v30 = *(_OWORD *)buf;
    memset(buf, 0, sizeof(buf));
    xpc_object_t v31 = (std::__shared_weak_count *)*(&off_1EBBDD250 + 1);
    off_1EBBDD250 = v30;
    if (v31 && !atomic_fetch_add(&v31->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
    unint64_t v32 = *(std::__shared_weak_count **)&buf[8];
    if (*(void *)&buf[8]
      && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
    CFTypeID v29 = (AppleSARHelper *)off_1EBBDD250;
  }
  size_t v33 = (std::__shared_weak_count *)*(&off_1EBBDD250 + 1);
  long long v68 = v29;
  uint64_t v69 = *(&off_1EBBDD250 + 1);
  if (*(&off_1EBBDD250 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDD250 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  LOBYTE(v70) = *((unsigned char *)this + 165);
  if (*((_DWORD *)v29 + 1))
  {
    *(void *)long long buf = 0;
    v73[0] = 0;
    unsigned int v71 = 1;
    char v34 = AppleSARHelper::callUserClientMethod(v29, 3, (const unint64_t *)buf, 1, &v70, 1, v73, &v71, &v70, 1uLL);
    if (!v33)
    {
LABEL_70:
      if (v34) {
        goto LABEL_71;
      }
LABEL_85:
      uint64_t v35 = *((void *)this + 10);
      if (!os_log_type_enabled(v35, OS_LOG_TYPE_ERROR)) {
        return;
      }
      *(_WORD *)long long buf = 0;
      uint64_t v36 = "Failed to send sar_selection and tuner state";
      goto LABEL_144;
    }
  }
  else
  {
    char v34 = 0;
    if (!v33) {
      goto LABEL_70;
    }
  }
  if (atomic_fetch_add(&v33->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_70;
  }
  ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
  std::__shared_weak_count::__release_weak(v33);
  if ((v34 & 1) == 0) {
    goto LABEL_85;
  }
LABEL_71:
  xpc_object_t v37 = (AppleSARHelper *)pthread_mutex_lock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  xpc_object_t v38 = (AppleSARHelper *)off_1EBBDD250;
  if (!off_1EBBDD250)
  {
    AppleSARHelper::create_default_global((uint64_t *)buf, v37);
    long long v39 = *(_OWORD *)buf;
    memset(buf, 0, sizeof(buf));
    uint64_t v40 = (std::__shared_weak_count *)*(&off_1EBBDD250 + 1);
    off_1EBBDD250 = v39;
    if (v40 && !atomic_fetch_add(&v40->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
    xpc_object_t v41 = *(std::__shared_weak_count **)&buf[8];
    if (*(void *)&buf[8]
      && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
    xpc_object_t v38 = (AppleSARHelper *)off_1EBBDD250;
  }
  CFTypeRef v42 = (std::__shared_weak_count *)*(&off_1EBBDD250 + 1);
  long long v68 = v38;
  uint64_t v69 = *(&off_1EBBDD250 + 1);
  if (*(&off_1EBBDD250 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDD250 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  LOBYTE(v70) = *((unsigned char *)this + 167);
  if (*((_DWORD *)v38 + 1))
  {
    *(void *)long long buf = 0;
    v73[0] = 0;
    unsigned int v71 = 1;
    char v43 = AppleSARHelper::callUserClientMethod(v38, 6, (const unint64_t *)buf, 1, &v70, 1, v73, &v71, &v70, 1uLL);
    if (!v42)
    {
LABEL_89:
      if (v43) {
        goto LABEL_90;
      }
LABEL_104:
      uint64_t v35 = *((void *)this + 10);
      if (!os_log_type_enabled(v35, OS_LOG_TYPE_ERROR)) {
        return;
      }
      *(_WORD *)long long buf = 0;
      uint64_t v36 = "Failed to send speaker state";
      goto LABEL_144;
    }
  }
  else
  {
    char v43 = 0;
    if (!v42) {
      goto LABEL_89;
    }
  }
  if (atomic_fetch_add(&v42->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_89;
  }
  ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
  std::__shared_weak_count::__release_weak(v42);
  if ((v43 & 1) == 0) {
    goto LABEL_104;
  }
LABEL_90:
  unint64_t v44 = (AppleSARHelper *)pthread_mutex_lock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  uint64_t v45 = (AppleSARHelper *)off_1EBBDD250;
  if (!off_1EBBDD250)
  {
    AppleSARHelper::create_default_global((uint64_t *)buf, v44);
    long long v46 = *(_OWORD *)buf;
    memset(buf, 0, sizeof(buf));
    xpc_object_t v47 = (std::__shared_weak_count *)*(&off_1EBBDD250 + 1);
    off_1EBBDD250 = v46;
    if (v47 && !atomic_fetch_add(&v47->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
    char v48 = *(std::__shared_weak_count **)&buf[8];
    if (*(void *)&buf[8]
      && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
    uint64_t v45 = (AppleSARHelper *)off_1EBBDD250;
  }
  long long v49 = (std::__shared_weak_count *)*(&off_1EBBDD250 + 1);
  long long v68 = v45;
  uint64_t v69 = *(&off_1EBBDD250 + 1);
  if (*(&off_1EBBDD250 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDD250 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  LOBYTE(v70) = *((unsigned char *)this + 168);
  if (*((_DWORD *)v45 + 1))
  {
    *(void *)long long buf = 0;
    v73[0] = 0;
    unsigned int v71 = 1;
    char v50 = AppleSARHelper::callUserClientMethod(v45, 7, (const unint64_t *)buf, 1, &v70, 1, v73, &v71, &v70, 1uLL);
    if (!v49) {
      goto LABEL_109;
    }
  }
  else
  {
    char v50 = 0;
    if (!v49) {
      goto LABEL_109;
    }
  }
  if (!atomic_fetch_add(&v49->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
    std::__shared_weak_count::__release_weak(v49);
  }
LABEL_109:
  if ((v50 & 1) == 0)
  {
    uint64_t v35 = *((void *)this + 10);
    if (!os_log_type_enabled(v35, OS_LOG_TYPE_ERROR)) {
      return;
    }
    *(_WORD *)long long buf = 0;
    uint64_t v36 = "Failed to send grip state";
    goto LABEL_144;
  }
  xpc_object_t v51 = (AppleSARHelper *)pthread_mutex_lock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  xpc_object_t v52 = (AppleSARHelper *)off_1EBBDD250;
  if (!off_1EBBDD250)
  {
    AppleSARHelper::create_default_global((uint64_t *)buf, v51);
    long long v53 = *(_OWORD *)buf;
    memset(buf, 0, sizeof(buf));
    int64_t v54 = (std::__shared_weak_count *)*(&off_1EBBDD250 + 1);
    off_1EBBDD250 = v53;
    if (v54 && !atomic_fetch_add(&v54->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
    }
    long long v55 = *(std::__shared_weak_count **)&buf[8];
    if (*(void *)&buf[8]
      && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
    xpc_object_t v52 = (AppleSARHelper *)off_1EBBDD250;
  }
  uint64_t v56 = (std::__shared_weak_count *)*(&off_1EBBDD250 + 1);
  long long v68 = v52;
  uint64_t v69 = *(&off_1EBBDD250 + 1);
  if (*(&off_1EBBDD250 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDD250 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  LOBYTE(v70) = *((unsigned char *)this + 170);
  if (*((_DWORD *)v52 + 1))
  {
    *(void *)long long buf = 0;
    v73[0] = 0;
    unsigned int v71 = 1;
    char v57 = AppleSARHelper::callUserClientMethod(v52, 8, (const unint64_t *)buf, 1, &v70, 1, v73, &v71, &v70, 1uLL);
    if (!v56) {
      goto LABEL_128;
    }
  }
  else
  {
    char v57 = 0;
    if (!v56) {
      goto LABEL_128;
    }
  }
  if (!atomic_fetch_add(&v56->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
    std::__shared_weak_count::__release_weak(v56);
  }
LABEL_128:
  if ((v57 & 1) == 0)
  {
    uint64_t v35 = *((void *)this + 10);
    if (!os_log_type_enabled(v35, OS_LOG_TYPE_ERROR)) {
      return;
    }
    *(_WORD *)long long buf = 0;
    uint64_t v36 = "Failed to send power state";
    goto LABEL_144;
  }
  long long v58 = (AppleSARHelper *)pthread_mutex_lock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  long long v59 = (AppleSARHelper *)off_1EBBDD250;
  if (!off_1EBBDD250)
  {
    AppleSARHelper::create_default_global((uint64_t *)buf, v58);
    std::shared_ptr<AppleSARHelper>::operator=[abi:ne180100]((long long *)buf);
    std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    long long v59 = (AppleSARHelper *)off_1EBBDD250;
  }
  long long v60 = (std::__shared_weak_count *)*(&off_1EBBDD250 + 1);
  long long v68 = v59;
  uint64_t v69 = *(&off_1EBBDD250 + 1);
  if (*(&off_1EBBDD250 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDD250 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  LOBYTE(v70) = *((unsigned char *)this + 171);
  if (*((_DWORD *)v59 + 1))
  {
    *(void *)long long buf = 0;
    v73[0] = 0;
    unsigned int v71 = 1;
    char v61 = AppleSARHelper::callUserClientMethod(v59, 9, (const unint64_t *)buf, 1, &v70, 1, v73, &v71, &v70, 1uLL);
  }
  else
  {
    char v61 = 0;
  }
  if (v60 && !atomic_fetch_add(&v60->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
    std::__shared_weak_count::__release_weak(v60);
  }
  if ((v61 & 1) == 0)
  {
    uint64_t v35 = *((void *)this + 10);
    if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      uint64_t v36 = "Failed to send wrist state";
LABEL_144:
      _os_log_error_impl(&dword_1C5767000, v35, OS_LOG_TYPE_ERROR, v36, buf, 2u);
    }
  }
}

void sub_1C58B1FDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18, uint64_t a19, char a20,uint64_t a21,char a22)
{
}

void ___ZN9SARModule21sendCurrentState_syncEv_block_invoke(uint64_t a1, int a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  BOOL v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3)
  {
    uint64_t v5 = *(void *)(a1 + 32);
    long long v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      uint64_t v7 = v6;
      uint64_t v8 = *(void *)(a1 + 40);
      if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v7);
      }
      if (v8)
      {
        int v9 = *(NSObject **)(v5 + 80);
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
        {
          char v10 = "Failed to send";
          int v11 = *(unsigned __int16 *)(a1 + 57);
          if (a2) {
            char v10 = "Succeeded in sending";
          }
          int v12 = 136315394;
          unsigned int v13 = v10;
          __int16 v14 = 1024;
          int v15 = v11;
          _os_log_impl(&dword_1C5767000, v9, OS_LOG_TYPE_DEFAULT, "#I %s stewie SAR wait time (%u sec)", (uint8_t *)&v12, 0x12u);
        }
      }
    }
  }
}

uint64_t dispatch::callback<void({block_pointer})(BOOL,xpc::object)>::~callback(uint64_t a1)
{
  int v2 = *(NSObject **)(a1 + 8);
  if (v2) {
    dispatch_release(v2);
  }
  if (*(void *)a1) {
    _Block_release(*(const void **)a1);
  }
  return a1;
}

uint64_t SARModule::convertUSBCAccessoryBitMask(uint64_t a1, unsigned __int16 **a2)
{
  int v2 = *a2;
  BOOL v3 = a2[1];
  if (*a2 != v3)
  {
    LODWORD(v4) = 0;
    while (1)
    {
      int v6 = *v2;
      int v7 = v2[1];
      if (v6 == 17 && v7 == 2) {
        LODWORD(v4) = v4 | 0x40000;
      }
      if (v6 == 18 && v7 == 2) {
        LODWORD(v4) = v4 | 0x80000;
      }
      if (v6 == 19 && v7 == 2) {
        LODWORD(v4) = v4 | 0x100000;
      }
      if (v6 == 20 && v7 == 2) {
        uint64_t v4 = v4 | 0x200000;
      }
      else {
        uint64_t v4 = v4;
      }
      int v8 = v2[3];
      if (v8 == 3 && v6 == 2055)
      {
        if (v7 == 2)
        {
          uint64_t v4 = v4 | 0x400000;
LABEL_25:
          unsigned int v5 = *(_DWORD *)(a1 + 272) | 1;
          goto LABEL_5;
        }
        uint64_t v4 = v4 & 0xFFBFFFFF;
      }
      else
      {
        if (v6 == 4) {
          *(_DWORD *)(a1 + 272) = *(_DWORD *)(a1 + 272) & 0xFFFFFBFF | ((v7 == 2) << 10);
        }
        if (!v8 || v8 == 0xFFFF) {
          goto LABEL_6;
        }
        if (v7 == 2) {
          goto LABEL_25;
        }
      }
      unsigned int v5 = *(_DWORD *)(a1 + 272) & 0xFFFFFFFE;
LABEL_5:
      *(_DWORD *)(a1 + 272) = v5;
LABEL_6:
      v2 += 6;
      if (v2 == v3) {
        return v4;
      }
    }
  }
  return 0;
}

void SARModule::setupTxIndicationWorkaround(SARModule *this)
{
  if (*((void *)this + 35))
  {
    xpc_object_t v2 = xpc_dictionary_create(0, 0, 0);
    uint64_t v3 = MEMORY[0x1E4F14590];
    if (v2 || (xpc_object_t v2 = xpc_null_create()) != 0)
    {
      if (MEMORY[0x1C8792D30](v2) == v3)
      {
        xpc_retain(v2);
        xpc_object_t v4 = v2;
      }
      else
      {
        xpc_object_t v4 = xpc_null_create();
      }
    }
    else
    {
      xpc_object_t v4 = xpc_null_create();
      xpc_object_t v2 = 0;
    }
    xpc_release(v2);
    xpc_object_t v6 = xpc_string_create((const char *)*MEMORY[0x1E4FB9D70]);
    if (!v6) {
      xpc_object_t v6 = xpc_null_create();
    }
    int v7 = (const char *)*MEMORY[0x1E4FB9C68];
    xpc_dictionary_set_value(v4, (const char *)*MEMORY[0x1E4FB9C68], v6);
    xpc_object_t v8 = xpc_null_create();
    xpc_release(v6);
    xpc_release(v8);
    xpc_object_t v9 = xpc_BOOL_create(1);
    if (!v9) {
      xpc_object_t v9 = xpc_null_create();
    }
    xpc_dictionary_set_value(v4, (const char *)*MEMORY[0x1E4FB9D48], v9);
    xpc_object_t v10 = xpc_null_create();
    xpc_release(v9);
    xpc_release(v10);
    int v11 = (std::__shared_weak_count *)*((void *)this + 7);
    if (!v11 || (v12 = *((void *)this + 6), (unsigned int v13 = std::__shared_weak_count::lock(v11)) == 0)) {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    __int16 v14 = v13;
    atomic_fetch_add_explicit(&v13->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    if (atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      uint64_t v15 = *((void *)this + 35);
      v61[0] = v4;
      if (v4)
      {
LABEL_18:
        xpc_retain(v4);
        goto LABEL_21;
      }
    }
    else
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v14);
      uint64_t v15 = *((void *)this + 35);
      v61[0] = v4;
      if (v4) {
        goto LABEL_18;
      }
    }
    v61[0] = xpc_null_create();
LABEL_21:
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 3321888768;
    aBlock[2] = ___ZN9SARModule27setupTxIndicationWorkaroundEv_block_invoke;
    aBlock[3] = &__block_descriptor_64_e8_40c33_ZTSNSt3__18weak_ptrI9SARModuleEE56c15_ZTSN3xpc4dictE_e21_v20__0B8_object__v_12l;
    void aBlock[4] = this;
    void aBlock[5] = v12;
    char v57 = v14;
    atomic_fetch_add_explicit(&v14->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    xpc_object_t object = v4;
    if (v4) {
      xpc_retain(v4);
    }
    else {
      xpc_object_t object = xpc_null_create();
    }
    uint64_t v16 = _Block_copy(aBlock);
    uint64_t v17 = *((void *)this + 8);
    if (v17) {
      dispatch_retain(*((dispatch_object_t *)this + 8));
    }
    *(void *)long long buf = v16;
    dispatch_object_t v60 = v17;
    (*(void (**)(uint64_t, xpc_object_t *, uint8_t *))(*(void *)v15 + 48))(v15, v61, buf);
    if (v60) {
      dispatch_release(v60);
    }
    if (*(void *)buf) {
      _Block_release(*(const void **)buf);
    }
    xpc_release(v61[0]);
    v61[0] = 0;
    xpc_release(object);
    xpc_object_t object = 0;
    if (v57) {
      std::__shared_weak_count::__release_weak(v57);
    }
    std::__shared_weak_count::__release_weak(v14);
    xpc_release(v4);
    xpc_object_t v18 = xpc_dictionary_create(0, 0, 0);
    if (v18 || (xpc_object_t v18 = xpc_null_create()) != 0)
    {
      if (MEMORY[0x1C8792D30](v18) == v3)
      {
        xpc_retain(v18);
        xpc_object_t v19 = v18;
      }
      else
      {
        xpc_object_t v19 = xpc_null_create();
      }
    }
    else
    {
      xpc_object_t v19 = xpc_null_create();
      xpc_object_t v18 = 0;
    }
    xpc_release(v18);
    uint64_t v20 = MEMORY[0x1C8792D30](v19);
    if (v20 != v3)
    {
      __int16 v21 = *((void *)this + 10);
      if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)long long buf = 0;
        _os_log_error_impl(&dword_1C5767000, v21, OS_LOG_TYPE_ERROR, "Failed to create dictionary for antenna command driver!", buf, 2u);
      }
      goto LABEL_68;
    }
    xpc_object_t v22 = xpc_string_create((const char *)*MEMORY[0x1E4FB9DB8]);
    if (!v22) {
      xpc_object_t v22 = xpc_null_create();
    }
    xpc_dictionary_set_value(v19, v7, v22);
    xpc_object_t v23 = xpc_null_create();
    xpc_release(v22);
    xpc_release(v23);
    xpc_object_t v24 = xpc_BOOL_create(1);
    if (!v24) {
      xpc_object_t v24 = xpc_null_create();
    }
    xpc_dictionary_set_value(v19, (const char *)*MEMORY[0x1E4FB9D80], v24);
    xpc_object_t v25 = xpc_null_create();
    xpc_release(v24);
    xpc_release(v25);
    xpc_object_t v26 = xpc_string_create((const char *)*MEMORY[0x1E4FB9DA0]);
    if (!v26) {
      xpc_object_t v26 = xpc_null_create();
    }
    xpc_dictionary_set_value(v19, (const char *)*MEMORY[0x1E4FB9D98], v26);
    xpc_object_t v27 = xpc_null_create();
    xpc_release(v26);
    xpc_release(v27);
    xpc_object_t v28 = xpc_int64_create(1);
    if (!v28) {
      xpc_object_t v28 = xpc_null_create();
    }
    xpc_dictionary_set_value(v19, (const char *)*MEMORY[0x1E4FB9D58], v28);
    xpc_object_t v29 = xpc_null_create();
    xpc_release(v28);
    xpc_release(v29);
    long long v30 = (std::__shared_weak_count *)*((void *)this + 7);
    if (!v30 || (v31 = *((void *)this + 6), (unint64_t v32 = std::__shared_weak_count::lock(v30)) == 0)) {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    size_t v33 = v32;
    atomic_fetch_add_explicit(&v32->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    if (atomic_fetch_add(&v32->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      uint64_t v34 = *((void *)this + 35);
      xpc_object_t v55 = v19;
      if (v19)
      {
LABEL_53:
        xpc_retain(v19);
LABEL_56:
        v52[0] = MEMORY[0x1E4F143A8];
        v52[1] = 3321888768;
        v52[2] = ___ZN9SARModule27setupTxIndicationWorkaroundEv_block_invoke_51;
        v52[3] = &__block_descriptor_64_e8_40c33_ZTSNSt3__18weak_ptrI9SARModuleEE56c15_ZTSN3xpc4dictE_e21_v20__0B8_object__v_12l;
        v52[4] = this;
        v52[5] = v31;
        long long v53 = v33;
        atomic_fetch_add_explicit(&v33->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        xpc_object_t v54 = v19;
        if (v19) {
          xpc_retain(v19);
        }
        else {
          xpc_object_t v54 = xpc_null_create();
        }
        uint64_t v35 = _Block_copy(v52);
        uint64_t v36 = *((void *)this + 8);
        if (v36) {
          dispatch_retain(*((dispatch_object_t *)this + 8));
        }
        *(void *)long long buf = v35;
        dispatch_object_t v60 = v36;
        (*(void (**)(uint64_t, xpc_object_t *, uint8_t *))(*(void *)v34 + 48))(v34, &v55, buf);
        if (v60) {
          dispatch_release(v60);
        }
        if (*(void *)buf) {
          _Block_release(*(const void **)buf);
        }
        xpc_release(v55);
        xpc_object_t v55 = 0;
        xpc_release(v54);
        xpc_object_t v54 = 0;
        if (v53) {
          std::__shared_weak_count::__release_weak(v53);
        }
        std::__shared_weak_count::__release_weak(v33);
LABEL_68:
        xpc_release(v19);
        if (v20 != v3) {
          return;
        }
        xpc_object_t v37 = xpc_dictionary_create(0, 0, 0);
        if (v37 || (xpc_object_t v37 = xpc_null_create()) != 0)
        {
          if (MEMORY[0x1C8792D30](v37) == v3)
          {
            xpc_retain(v37);
            xpc_object_t v38 = v37;
          }
          else
          {
            xpc_object_t v38 = xpc_null_create();
          }
        }
        else
        {
          xpc_object_t v38 = xpc_null_create();
          xpc_object_t v37 = 0;
        }
        xpc_release(v37);
        xpc_object_t v39 = xpc_string_create((const char *)*MEMORY[0x1E4FB9DE8]);
        if (!v39) {
          xpc_object_t v39 = xpc_null_create();
        }
        xpc_dictionary_set_value(v38, v7, v39);
        xpc_object_t v40 = xpc_null_create();
        xpc_release(v39);
        xpc_release(v40);
        xpc_object_t v41 = (std::__shared_weak_count *)*((void *)this + 7);
        if (!v41 || (uint64_t v42 = *((void *)this + 6), (v43 = std::__shared_weak_count::lock(v41)) == 0)) {
          std::__throw_bad_weak_ptr[abi:ne180100]();
        }
        unint64_t v44 = v43;
        atomic_fetch_add_explicit(&v43->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        if (atomic_fetch_add(&v43->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          uint64_t v45 = *((void *)this + 35);
          xpc_object_t v51 = v38;
          if (v38)
          {
LABEL_81:
            xpc_retain(v38);
LABEL_84:
            v48[0] = MEMORY[0x1E4F143A8];
            v48[1] = 3321888768;
            v48[2] = ___ZN9SARModule27setupTxIndicationWorkaroundEv_block_invoke_52;
            v48[3] = &__block_descriptor_64_e8_40c33_ZTSNSt3__18weak_ptrI9SARModuleEE56c15_ZTSN3xpc4dictE_e21_v20__0B8_object__v_12l;
            v48[4] = this;
            v48[5] = v42;
            long long v49 = v44;
            atomic_fetch_add_explicit(&v44->__shared_weak_owners_, 1uLL, memory_order_relaxed);
            xpc_object_t v50 = v38;
            if (v38) {
              xpc_retain(v38);
            }
            else {
              xpc_object_t v50 = xpc_null_create();
            }
            long long v46 = _Block_copy(v48);
            xpc_object_t v47 = *((void *)this + 8);
            if (v47) {
              dispatch_retain(v47);
            }
            *(void *)long long buf = v46;
            dispatch_object_t v60 = v47;
            (*(void (**)(uint64_t, xpc_object_t *, uint8_t *))(*(void *)v45 + 48))(v45, &v51, buf);
            if (v60) {
              dispatch_release(v60);
            }
            if (*(void *)buf) {
              _Block_release(*(const void **)buf);
            }
            xpc_release(v51);
            xpc_object_t v51 = 0;
            xpc_release(v50);
            xpc_object_t v50 = 0;
            if (v49) {
              std::__shared_weak_count::__release_weak(v49);
            }
            std::__shared_weak_count::__release_weak(v44);
            xpc_release(v38);
            return;
          }
        }
        else
        {
          ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
          std::__shared_weak_count::__release_weak(v44);
          uint64_t v45 = *((void *)this + 35);
          xpc_object_t v51 = v38;
          if (v38) {
            goto LABEL_81;
          }
        }
        xpc_object_t v51 = xpc_null_create();
        goto LABEL_84;
      }
    }
    else
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v33);
      uint64_t v34 = *((void *)this + 35);
      xpc_object_t v55 = v19;
      if (v19) {
        goto LABEL_53;
      }
    }
    xpc_object_t v55 = xpc_null_create();
    goto LABEL_56;
  }
  unsigned int v5 = *((void *)this + 10);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)long long buf = 0;
    _os_log_error_impl(&dword_1C5767000, v5, OS_LOG_TYPE_ERROR, "Check if it is mav device or antenna command driver is ready yet!", buf, 2u);
  }
}

void sub_1C58B2D2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, xpc_object_t object, xpc_object_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,std::__shared_weak_count *a24,xpc_object_t a25,xpc_object_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,std::__shared_weak_count *a33,xpc_object_t a34)
{
  dispatch::callback<void({block_pointer})(BOOL,xpc::object)>::~callback(v36 - 128);
  xpc_release(object);
  if (a15) {
    std::__shared_weak_count::__release_weak(a15);
  }
  xpc_release(a17);
  std::__shared_weak_count::__release_weak(v34);
  xpc_release(v35);
  _Unwind_Resume(a1);
}

void ___ZN9SARModule27setupTxIndicationWorkaroundEv_block_invoke(void *a1, char a2)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    uint64_t v5 = a1[4];
    xpc_object_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      int v7 = v6;
      uint64_t v8 = a1[5];
      if (atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        if (!v8) {
          return;
        }
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v7);
        if (!v8) {
          return;
        }
      }
      if (a2)
      {
        xpc_object_t v9 = *(NSObject **)(v5 + 80);
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl(&dword_1C5767000, v9, OS_LOG_TYPE_DEFAULT, "#I Succeeded in enabling Tx Capping Enable", buf, 2u);
        }
      }
      else
      {
        int v11 = (void *)a1[7];
        xpc_object_t v10 = a1 + 7;
        uint64_t v12 = *MEMORY[0x1E4FB9C68];
        if (xpc_dictionary_get_value(v11, (const char *)*MEMORY[0x1E4FB9C68]))
        {
          unsigned int v13 = *(NSObject **)(v5 + 80);
          if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
          {
            v16[0] = v10;
            v16[1] = v12;
            xpc::dict::object_proxy::operator xpc::object((uint64_t)v16, &object);
            xpc::dyn_cast_or_default((uint64_t *)buf, (xpc *)&object, (const object *)"None", v14);
            if (v19 >= 0) {
              uint64_t v15 = buf;
            }
            else {
              uint64_t v15 = *(uint8_t **)buf;
            }
            *(_DWORD *)uint64_t v20 = 136315138;
            __int16 v21 = v15;
            _os_log_error_impl(&dword_1C5767000, v13, OS_LOG_TYPE_ERROR, "Failed to run command driver: %s", v20, 0xCu);
            if (v19 < 0) {
              operator delete(*(void **)buf);
            }
            xpc_release(object);
          }
        }
      }
    }
  }
}

void sub_1C58B3100(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, xpc_object_t object)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

xpc_object_t __copy_helper_block_e8_40c33_ZTSNSt3__18weak_ptrI9SARModuleEE56c15_ZTSN3xpc4dictE(void *a1, void *a2)
{
  uint64_t v3 = a2[6];
  a1[5] = a2[5];
  a1[6] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  xpc_object_t v4 = (void *)a2[7];
  a1[7] = v4;
  if (v4) {
    return xpc_retain(v4);
  }
  xpc_object_t result = xpc_null_create();
  a1[7] = result;
  return result;
}

void __destroy_helper_block_e8_40c33_ZTSNSt3__18weak_ptrI9SARModuleEE56c15_ZTSN3xpc4dictE(uint64_t a1)
{
  xpc_release(*(xpc_object_t *)(a1 + 56));
  *(void *)(a1 + 56) = 0;
  xpc_object_t v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2)
  {
    std::__shared_weak_count::__release_weak(v2);
  }
}

void ___ZN9SARModule27setupTxIndicationWorkaroundEv_block_invoke_51(void *a1, char a2)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    uint64_t v5 = a1[4];
    xpc_object_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      int v7 = v6;
      uint64_t v8 = a1[5];
      if (atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        if (!v8) {
          return;
        }
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v7);
        if (!v8) {
          return;
        }
      }
      if (a2)
      {
        xpc_object_t v9 = *(NSObject **)(v5 + 80);
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl(&dword_1C5767000, v9, OS_LOG_TYPE_DEFAULT, "#I Succeeded in enabling Tx indication", buf, 2u);
        }
      }
      else
      {
        int v11 = (void *)a1[7];
        xpc_object_t v10 = a1 + 7;
        uint64_t v12 = *MEMORY[0x1E4FB9C68];
        if (xpc_dictionary_get_value(v11, (const char *)*MEMORY[0x1E4FB9C68]))
        {
          unsigned int v13 = *(NSObject **)(v5 + 80);
          if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
          {
            v16[0] = v10;
            v16[1] = v12;
            xpc::dict::object_proxy::operator xpc::object((uint64_t)v16, &object);
            xpc::dyn_cast_or_default((uint64_t *)buf, (xpc *)&object, (const object *)"None", v14);
            if (v19 >= 0) {
              uint64_t v15 = buf;
            }
            else {
              uint64_t v15 = *(uint8_t **)buf;
            }
            *(_DWORD *)uint64_t v20 = 136315138;
            __int16 v21 = v15;
            _os_log_error_impl(&dword_1C5767000, v13, OS_LOG_TYPE_ERROR, "Failed to run command driver: %s", v20, 0xCu);
            if (v19 < 0) {
              operator delete(*(void **)buf);
            }
            xpc_release(object);
          }
        }
      }
    }
  }
}

void sub_1C58B33B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, xpc_object_t object)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN9SARModule27setupTxIndicationWorkaroundEv_block_invoke_52(void *a1, char a2)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    uint64_t v5 = a1[4];
    xpc_object_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      int v7 = v6;
      uint64_t v8 = a1[5];
      if (atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        if (!v8) {
          return;
        }
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v7);
        if (!v8) {
          return;
        }
      }
      if (a2)
      {
        xpc_object_t v9 = *(NSObject **)(v5 + 80);
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl(&dword_1C5767000, v9, OS_LOG_TYPE_DEFAULT, "#I Succeeded in registering Tx indication", buf, 2u);
        }
      }
      else
      {
        int v11 = (void *)a1[7];
        xpc_object_t v10 = a1 + 7;
        uint64_t v12 = *MEMORY[0x1E4FB9C68];
        if (xpc_dictionary_get_value(v11, (const char *)*MEMORY[0x1E4FB9C68]))
        {
          unsigned int v13 = *(NSObject **)(v5 + 80);
          if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
          {
            v16[0] = v10;
            v16[1] = v12;
            xpc::dict::object_proxy::operator xpc::object((uint64_t)v16, &object);
            xpc::dyn_cast_or_default((uint64_t *)buf, (xpc *)&object, (const object *)"None", v14);
            if (v19 >= 0) {
              uint64_t v15 = buf;
            }
            else {
              uint64_t v15 = *(uint8_t **)buf;
            }
            *(_DWORD *)uint64_t v20 = 136315138;
            __int16 v21 = v15;
            _os_log_error_impl(&dword_1C5767000, v13, OS_LOG_TYPE_ERROR, "Failed to run command driver: %s", v20, 0xCu);
            if (v19 < 0) {
              operator delete(*(void **)buf);
            }
            xpc_release(object);
          }
        }
      }
    }
  }
}

void sub_1C58B35AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, xpc_object_t object)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void SARModule::transmitStateHandler(void *a1, int a2, int a3)
{
  xpc_object_t v4 = (std::__shared_weak_count *)a1[7];
  if (!v4 || (uint64_t v7 = a1[6], (v8 = std::__shared_weak_count::lock(v4)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  xpc_object_t v9 = v8;
  xpc_object_t v10 = operator new(0x10uLL);
  *(void *)xpc_object_t v10 = a1;
  v10[2] = a2;
  void v10[3] = a3;
  int v11 = a1[8];
  atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v12 = operator new(0x18uLL);
  void *v12 = v10;
  v12[1] = v7;
  v12[2] = v9;
  dispatch_async_f(v11, v12, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<SARModule>::execute_wrapped<SARModule::transmitStateHandler(antenna::BBTransmitState,antenna::BBTransmitTrigger)::$_0>(SARModule::transmitStateHandler(antenna::BBTransmitState,antenna::BBTransmitTrigger)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<SARModule::transmitStateHandler(antenna::BBTransmitState,antenna::BBTransmitTrigger)::$_0,dispatch_queue_s *::default_delete<SARModule::transmitStateHandler(antenna::BBTransmitState,antenna::BBTransmitTrigger)::$_0>>)::{lambda(void *)#1}::__invoke);
  if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
}

void SARModule::createTransmitStateDict_sync(capabilities::radio *a1@<X0>, int a2@<W1>, int a3@<W2>, xpc_object_t *a4@<X8>)
{
  if (capabilities::radio::maverick(a1))
  {
    xpc_object_t v8 = xpc_dictionary_create(0, 0, 0);
    if (v8 || (xpc_object_t v8 = xpc_null_create()) != 0)
    {
      if (MEMORY[0x1C8792D30](v8) == MEMORY[0x1E4F14590])
      {
        xpc_retain(v8);
        xpc_object_t v9 = v8;
      }
      else
      {
        xpc_object_t v9 = xpc_null_create();
      }
    }
    else
    {
      xpc_object_t v9 = xpc_null_create();
      xpc_object_t v8 = 0;
    }
    xpc_release(v8);
    if (a2 == 1)
    {
      xpc_object_t v11 = xpc_string_create((const char *)*MEMORY[0x1E4F4D0C0]);
      if (!v11) {
        xpc_object_t v11 = xpc_null_create();
      }
    }
    else
    {
      if (a2)
      {
        *a4 = xpc_null_create();
LABEL_35:
        xpc_release(v9);
        return;
      }
      xpc_object_t v11 = xpc_string_create((const char *)*MEMORY[0x1E4F4CDB0]);
      if (!v11) {
        xpc_object_t v11 = xpc_null_create();
      }
    }
    xpc_dictionary_set_value(v9, (const char *)*MEMORY[0x1E4F4CD50], v11);
    xpc_object_t v12 = xpc_null_create();
    xpc_release(v11);
    xpc_release(v12);
    switch(a3)
    {
      case 0:
        xpc_object_t v13 = xpc_string_create((const char *)*MEMORY[0x1E4F4CEC8]);
        if (!v13) {
          xpc_object_t v13 = xpc_null_create();
        }
        goto LABEL_31;
      case 1:
        xpc_object_t v13 = xpc_string_create((const char *)*MEMORY[0x1E4F4CD00]);
        if (!v13) {
          xpc_object_t v13 = xpc_null_create();
        }
        goto LABEL_31;
      case 2:
        xpc_object_t v13 = xpc_string_create((const char *)*MEMORY[0x1E4F4CDA8]);
        if (!v13) {
          xpc_object_t v13 = xpc_null_create();
        }
        goto LABEL_31;
      case 3:
        xpc_object_t v13 = xpc_string_create((const char *)*MEMORY[0x1E4F4CBE0]);
        if (!v13) {
          xpc_object_t v13 = xpc_null_create();
        }
LABEL_31:
        xpc_dictionary_set_value(v9, (const char *)*MEMORY[0x1E4F4CF18], v13);
        xpc_object_t v14 = xpc_null_create();
        xpc_release(v13);
        xpc_release(v14);
        break;
      default:
        break;
    }
    xpc_object_t v15 = xpc_string_create((const char *)*MEMORY[0x1E4F4C750]);
    if (!v15) {
      xpc_object_t v15 = xpc_null_create();
    }
    xpc_dictionary_set_value(v9, (const char *)*MEMORY[0x1E4F4C7D8], v15);
    xpc_object_t v16 = xpc_null_create();
    xpc_release(v15);
    xpc_release(v16);
    *a4 = v9;
    xpc_object_t v9 = xpc_null_create();
    goto LABEL_35;
  }
  xpc_object_t v10 = *((void *)a1 + 10);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)uint64_t v17 = 0;
    _os_log_error_impl(&dword_1C5767000, v10, OS_LOG_TYPE_ERROR, "This is not supported device", v17, 2u);
  }
  *a4 = xpc_null_create();
}

uint64_t SARModule::asString@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  if (result == 1)
  {
    *(unsigned char *)(a2 + 23) = 12;
    strcpy((char *)a2, "EventUpdated");
  }
  else
  {
    if (result) {
      xpc_object_t v2 = "UnknownReason";
    }
    else {
      xpc_object_t v2 = "CallConnected";
    }
    *(unsigned char *)(a2 + 23) = 13;
    *(void *)a2 = *(void *)v2;
    *(void *)(a2 + 5) = *(void *)(v2 + 5);
    *(unsigned char *)(a2 + 13) = 0;
  }
  return result;
}

uint64_t ctu::PthreadMutexGuardPolicy<AppleSARHelper>::~PthreadMutexGuardPolicy(uint64_t a1)
{
  pthread_mutex_lock((pthread_mutex_t *)a1);
  xpc_object_t v2 = *(std::__shared_weak_count **)(a1 + 72);
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 72);
  if (!v3 || atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void std::__shared_ptr_pointer<SARModule *,std::shared_ptr<SARModule> ctu::SharedSynchronizable<SARModule>::make_shared_ptr<SARModule>(SARModule*)::{lambda(SARModule *)#1},std::allocator<SARModule>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<SARModule *,std::shared_ptr<SARModule> ctu::SharedSynchronizable<SARModule>::make_shared_ptr<SARModule>(SARModule*)::{lambda(SARModule *)#1},std::allocator<SARModule>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<SARModule *,std::shared_ptr<SARModule> ctu::SharedSynchronizable<SARModule>::make_shared_ptr<SARModule>(SARModule*)::{lambda(SARModule *)#1},std::allocator<SARModule>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableI9SARModuleE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_") {
    return a1 + 24;
  }
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableI9SARModuleE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableI9SARModuleE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_"))return 0; {
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableI9SARModuleE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  }
  return 0;
}

uint64_t std::shared_ptr<SARModule> ctu::SharedSynchronizable<SARModule>::make_shared_ptr<SARModule>(SARModule*)::{lambda(SARModule*)#1}::operator() const(SARModule*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void dispatch::async<void ctu::SharedSynchronizable<SARModule>::execute_wrapped<SARModule::shutdown(ShutdownStage,dispatch::group_session)::$_0>(SARModule::shutdown(ShutdownStage,dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<SARModule::shutdown(ShutdownStage,dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<SARModule::shutdown(ShutdownStage,dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke(void *a1)
{
  xpc_object_t v2 = (void *)*a1;
  unint64_t v3 = *(void **)*a1;
  xpc_object_t v4 = (std::__shared_weak_count *)v3[12];
  v3[11] = 0;
  v3[12] = 0;
  if (!v4 || atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (!v3[35]) {
      goto LABEL_6;
    }
    goto LABEL_4;
  }
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  if (v3[35]) {
LABEL_4:
  }
    antenna::CommandDriver::registerHandler();
LABEL_6:
  uint64_t v5 = (IOKitEventNotifier *)v3[28];
  if (v5) {
    IOKitEventNotifier::shutdown(v5);
  }
  xpc_object_t v6 = v2[1];
  if (v6)
  {
    dispatch_group_leave(v6);
    uint64_t v7 = v2[1];
    if (v7) {
      dispatch_release(v7);
    }
  }
  operator delete(v2);
  xpc_object_t v8 = (std::__shared_weak_count *)a1[2];
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  operator delete(a1);
}

void sub_1C58B3F08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  xpc_object_t v13 = v11[1];
  if (v13)
  {
    dispatch_group_leave(v13);
    xpc_object_t v14 = v11[1];
    if (v14) {
      dispatch_release(v14);
    }
  }
  operator delete(v11);
  xpc_object_t v15 = (std::__shared_weak_count *)v10[2];
  if (v15)
  {
    if (!atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  operator delete(v10);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<antenna::AntennaCommandDriverDelegate<SARModule>::create(std::shared_ptr<SARModule>)::MakeSharedEnabler,std::allocator<antenna::AntennaCommandDriverDelegate<SARModule>::create(std::shared_ptr<SARModule>)::MakeSharedEnabler>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20FA960;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<antenna::AntennaCommandDriverDelegate<SARModule>::create(std::shared_ptr<SARModule>)::MakeSharedEnabler,std::allocator<antenna::AntennaCommandDriverDelegate<SARModule>::create(std::shared_ptr<SARModule>)::MakeSharedEnabler>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20FA960;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t std::__shared_ptr_emplace<antenna::AntennaCommandDriverDelegate<SARModule>::create(std::shared_ptr<SARModule>)::MakeSharedEnabler,std::allocator<antenna::AntennaCommandDriverDelegate<SARModule>::create(std::shared_ptr<SARModule>)::MakeSharedEnabler>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void antenna::AntennaCommandDriverDelegate<SARModule>::create(std::shared_ptr<SARModule>)::MakeSharedEnabler::~MakeSharedEnabler(antenna::AntennaCommandDriverDelegateInterface *this)
{
  *(void *)this = &unk_1F20FAA08;
  xpc_object_t v2 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  antenna::AntennaCommandDriverDelegateInterface::~AntennaCommandDriverDelegateInterface(this);
}

{
  std::__shared_weak_count *v2;
  void *v3;
  uint64_t vars8;

  *(void *)this = &unk_1F20FAA08;
  xpc_object_t v2 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  antenna::AntennaCommandDriverDelegateInterface::~AntennaCommandDriverDelegateInterface(this);

  operator delete(v3);
}

void antenna::AntennaCommandDriverDelegate<SARModule>::signalTransmitState(uint64_t a1, int a2, int a3)
{
  xpc_object_t v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (v4)
  {
    uint64_t v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      xpc_object_t v8 = v7;
      xpc_object_t v9 = *(void **)(a1 + 8);
      if (v9) {
        SARModule::transmitStateHandler(v9, a2, a3);
      }
      if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
}

void antenna::AntennaCommandDriverDelegate<SARModule>::~AntennaCommandDriverDelegate(antenna::AntennaCommandDriverDelegateInterface *this)
{
  *(void *)this = &unk_1F20FAA08;
  xpc_object_t v2 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  antenna::AntennaCommandDriverDelegateInterface::~AntennaCommandDriverDelegateInterface(this);
}

{
  std::__shared_weak_count *v2;
  void *v3;
  uint64_t vars8;

  *(void *)this = &unk_1F20FAA08;
  xpc_object_t v2 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  antenna::AntennaCommandDriverDelegateInterface::~AntennaCommandDriverDelegateInterface(this);

  operator delete(v3);
}

void std::shared_ptr<AppleSARHelper>::operator=[abi:ne180100](long long *a1)
{
  long long v1 = *a1;
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  xpc_object_t v2 = (std::__shared_weak_count *)*(&off_1EBBDD250 + 1);
  off_1EBBDD250 = v1;
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
}

void dispatch::async<void ctu::SharedSynchronizable<SARModule>::execute_wrapped<SARModule::initialize(dispatch::group_session)::$_0>(SARModule::initialize(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<SARModule::initialize(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<SARModule::initialize(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke(void *a1)
{
  xpc_object_t v2 = *(SARModule ***)a1;
  unint64_t v3 = **(SARModule ***)a1;
  SARModule::initializeHelpers_sync(v3);
  xpc_object_t v4 = (const void *)*MEMORY[0x1E4F4C640];
  size_t v5 = strlen((const char *)*MEMORY[0x1E4F4C640]);
  if (v5 > 0x7FFFFFFFFFFFFFF7) {
    goto LABEL_80;
  }
  size_t v6 = v5;
  if (v5 >= 0x17)
  {
    uint64_t v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17) {
      uint64_t v8 = v5 | 7;
    }
    uint64_t v9 = v8 + 1;
    p_dst = (void **)operator new(v8 + 1);
    uint64_t v76 = v6;
    unint64_t v77 = v9 | 0x8000000000000000;
    long long __dst = p_dst;
    goto LABEL_8;
  }
  HIBYTE(v77) = v5;
  p_dst = (void **)&__dst;
  if (v5) {
LABEL_8:
  }
    memmove(p_dst, v4, v6);
  *((unsigned char *)p_dst + v6) = 0;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 3221225472;
  aBlock[2] = ___ZZN9SARModule10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke;
  aBlock[3] = &__block_descriptor_40_e63_v24__0_dict__object__v__8_block_void_____int__xpc::dict______16l;
  void aBlock[4] = v3;
  xpc_object_t v10 = _Block_copy(aBlock);
  int64_t v82 = v10;
  Service::registerCommandHandler((uint64_t)v3, (uint64_t)&__dst, &v82);
  if (v10) {
    _Block_release(v10);
  }
  if (SHIBYTE(v77) < 0) {
    operator delete(__dst);
  }
  xpc_object_t v11 = (const void *)*MEMORY[0x1E4F4C318];
  size_t v12 = strlen((const char *)*MEMORY[0x1E4F4C318]);
  if (v12 > 0x7FFFFFFFFFFFFFF7) {
LABEL_80:
  }
    std::string::__throw_length_error[abi:ne180100]();
  size_t v13 = v12;
  if (v12 >= 0x17)
  {
    uint64_t v15 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v12 | 7) != 0x17) {
      uint64_t v15 = v12 | 7;
    }
    uint64_t v16 = v15 + 1;
    p_p = operator new(v15 + 1);
    uint64_t v70 = v13;
    unint64_t v71 = v16 | 0x8000000000000000;
    std::string __p = p_p;
    goto LABEL_20;
  }
  HIBYTE(v71) = v12;
  p_p = &__p;
  if (v12) {
LABEL_20:
  }
    memmove(p_p, v11, v13);
  *((unsigned char *)p_p + v13) = 0;
  long long __dst = (void **)MEMORY[0x1E4F143A8];
  uint64_t v76 = 3221225472;
  unint64_t v77 = (unint64_t)___ZZN9SARModule10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_2;
  xpc_object_t v78 = &__block_descriptor_40_e63_v24__0_dict__object__v__8_block_void_____int__xpc::dict______16l;
  long long v79 = v3;
  uint64_t v17 = _Block_copy(&__dst);
  xpc_object_t v80 = v17;
  Service::registerCommandHandler((uint64_t)v3, (uint64_t)&__p, &v80);
  if (v17) {
    _Block_release(v17);
  }
  if (SHIBYTE(v71) < 0) {
    operator delete(__p);
  }
  xpc_object_t v18 = (const void *)*MEMORY[0x1E4F4CB00];
  size_t v19 = strlen((const char *)*MEMORY[0x1E4F4CB00]);
  if (v19 > 0x7FFFFFFFFFFFFFF7) {
    goto LABEL_80;
  }
  size_t v20 = v19;
  if (v19 >= 0x17)
  {
    uint64_t v22 = (v19 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v19 | 7) != 0x17) {
      uint64_t v22 = v19 | 7;
    }
    uint64_t v23 = v22 + 1;
    __int16 v21 = operator new(v22 + 1);
    uint64_t v64 = v20;
    unint64_t v65 = v23 | 0x8000000000000000;
    long long v63 = v21;
    goto LABEL_32;
  }
  HIBYTE(v65) = v19;
  __int16 v21 = &v63;
  if (v19) {
LABEL_32:
  }
    memmove(v21, v18, v20);
  *((unsigned char *)v21 + v20) = 0;
  std::string __p = (void *)MEMORY[0x1E4F143A8];
  uint64_t v70 = 3221225472;
  unint64_t v71 = (unint64_t)___ZZN9SARModule10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_3;
  char v72 = &__block_descriptor_40_e63_v24__0_dict__object__v__8_block_void_____int__xpc::dict______16l;
  long long v73 = v3;
  xpc_object_t v24 = _Block_copy(&__p);
  BOOL v74 = v24;
  Service::registerCommandHandler((uint64_t)v3, (uint64_t)&v63, &v74);
  if (v24) {
    _Block_release(v24);
  }
  if (SHIBYTE(v65) < 0) {
    operator delete(v63);
  }
  xpc_object_t v25 = (const void *)*MEMORY[0x1E4F4C9D0];
  size_t v26 = strlen((const char *)*MEMORY[0x1E4F4C9D0]);
  if (v26 > 0x7FFFFFFFFFFFFFF7) {
    goto LABEL_80;
  }
  size_t v27 = v26;
  if (v26 >= 0x17)
  {
    uint64_t v29 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v26 | 7) != 0x17) {
      uint64_t v29 = v26 | 7;
    }
    uint64_t v30 = v29 + 1;
    xpc_object_t v28 = operator new(v29 + 1);
    uint64_t v58 = v27;
    unint64_t v59 = v30 | 0x8000000000000000;
    char v57 = v28;
    goto LABEL_44;
  }
  HIBYTE(v59) = v26;
  xpc_object_t v28 = &v57;
  if (v26) {
LABEL_44:
  }
    memmove(v28, v25, v27);
  *((unsigned char *)v28 + v27) = 0;
  long long v63 = (void *)MEMORY[0x1E4F143A8];
  uint64_t v64 = 3221225472;
  unint64_t v65 = (unint64_t)___ZZN9SARModule10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_4;
  long long v66 = &__block_descriptor_40_e63_v24__0_dict__object__v__8_block_void_____int__xpc::dict______16l;
  long long v67 = v3;
  uint64_t v31 = _Block_copy(&v63);
  long long v68 = v31;
  Service::registerCommandHandler((uint64_t)v3, (uint64_t)&v57, &v68);
  if (v31) {
    _Block_release(v31);
  }
  if (SHIBYTE(v59) < 0) {
    operator delete(v57);
  }
  unint64_t v32 = (const void *)*MEMORY[0x1E4F4CC28];
  size_t v33 = strlen((const char *)*MEMORY[0x1E4F4CC28]);
  if (v33 > 0x7FFFFFFFFFFFFFF7) {
    goto LABEL_80;
  }
  size_t v34 = v33;
  if (v33 >= 0x17)
  {
    uint64_t v36 = (v33 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v33 | 7) != 0x17) {
      uint64_t v36 = v33 | 7;
    }
    uint64_t v37 = v36 + 1;
    uint64_t v35 = operator new(v36 + 1);
    uint64_t v50 = v34;
    unint64_t v51 = v37 | 0x8000000000000000;
    long long v49 = v35;
    goto LABEL_56;
  }
  HIBYTE(v51) = v33;
  uint64_t v35 = &v49;
  if (v33) {
LABEL_56:
  }
    memmove(v35, v32, v34);
  *((unsigned char *)v35 + v34) = 0;
  char v57 = (void *)MEMORY[0x1E4F143A8];
  uint64_t v58 = 3221225472;
  unint64_t v59 = (unint64_t)___ZZN9SARModule10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_5;
  dispatch_object_t v60 = &__block_descriptor_40_e63_v24__0_dict__object__v__8_block_void_____int__xpc::dict______16l;
  char v61 = v3;
  xpc_object_t v38 = _Block_copy(&v57);
  long long v62 = v38;
  Service::registerCommandHandler((uint64_t)v3, (uint64_t)&v49, &v62);
  if (v38) {
    _Block_release(v38);
  }
  if (SHIBYTE(v51) < 0) {
    operator delete(v49);
  }
  xpc_object_t v39 = (const void *)*MEMORY[0x1E4F4CC10];
  size_t v40 = strlen((const char *)*MEMORY[0x1E4F4CC10]);
  if (v40 > 0x7FFFFFFFFFFFFFF7) {
    goto LABEL_80;
  }
  xpc_object_t v41 = (void *)v40;
  if (v40 >= 0x17)
  {
    uint64_t v43 = (v40 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v40 | 7) != 0x17) {
      uint64_t v43 = v40 | 7;
    }
    uint64_t v44 = v43 + 1;
    uint64_t v42 = operator new(v43 + 1);
    v55[1] = v41;
    unint64_t v56 = v44 | 0x8000000000000000;
    v55[0] = v42;
    goto LABEL_68;
  }
  HIBYTE(v56) = v40;
  uint64_t v42 = v55;
  if (v40) {
LABEL_68:
  }
    memmove(v42, v39, (size_t)v41);
  *((unsigned char *)v41 + (void)v42) = 0;
  long long v49 = (void *)MEMORY[0x1E4F143A8];
  uint64_t v50 = 3221225472;
  unint64_t v51 = (unint64_t)___ZZN9SARModule10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_6;
  xpc_object_t v52 = &__block_descriptor_40_e63_v24__0_dict__object__v__8_block_void_____int__xpc::dict______16l;
  long long v53 = v3;
  uint64_t v45 = _Block_copy(&v49);
  xpc_object_t v54 = v45;
  Service::registerCommandHandler((uint64_t)v3, (uint64_t)v55, &v54);
  if (v45) {
    _Block_release(v45);
  }
  if (SHIBYTE(v56) < 0) {
    operator delete(v55[0]);
  }
  SARModule::finishInitialization_sync(v3);
  long long v46 = v2[1];
  if (v46)
  {
    dispatch_group_leave(v46);
    xpc_object_t v47 = v2[1];
    if (v47) {
      dispatch_release(v47);
    }
  }
  operator delete(v2);
  char v48 = (std::__shared_weak_count *)*((void *)a1 + 2);
  if (v48 && !atomic_fetch_add(&v48->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
    std::__shared_weak_count::__release_weak(v48);
  }
  operator delete(a1);
}

void sub_1C58B49F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48)
{
  if (v50) {
    _Block_release(v50);
  }
  if (a24 < 0) {
    operator delete(__p);
  }
  xpc_object_t v52 = v49[1];
  if (v52)
  {
    dispatch_group_leave(v52);
    long long v53 = v49[1];
    if (v53) {
      dispatch_release(v53);
    }
  }
  operator delete(v49);
  xpc_object_t v54 = (std::__shared_weak_count *)v48[2];
  if (v54)
  {
    if (!atomic_fetch_add(&v54->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
    }
  }
  operator delete(v48);
  _Unwind_Resume(a1);
}

void ___ZZN9SARModule10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_2(uint64_t a1, xpc_object_t *a2, const void **a3)
{
  xpc_object_t v4 = *(void **)(a1 + 32);
  xpc_object_t v5 = *a2;
  if (*a2)
  {
    xpc_retain(*a2);
    size_t v6 = *a3;
    if (*a3) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t v7 = 0;
    uint64_t v8 = (std::__shared_weak_count *)v4[7];
    if (!v8) {
      goto LABEL_11;
    }
    goto LABEL_7;
  }
  xpc_object_t v5 = xpc_null_create();
  size_t v6 = *a3;
  if (!*a3) {
    goto LABEL_6;
  }
LABEL_3:
  uint64_t v7 = _Block_copy(v6);
  uint64_t v8 = (std::__shared_weak_count *)v4[7];
  if (!v8) {
LABEL_11:
  }
    std::__throw_bad_weak_ptr[abi:ne180100]();
LABEL_7:
  uint64_t v9 = v4[6];
  xpc_object_t v10 = std::__shared_weak_count::lock(v8);
  if (!v10) {
    goto LABEL_11;
  }
  xpc_object_t v11 = v10;
  size_t v12 = operator new(0x18uLL);
  void *v12 = v4;
  v12[1] = v5;
  xpc_object_t v13 = xpc_null_create();
  v12[2] = v7;
  xpc_object_t v14 = v4[8];
  atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v15 = operator new(0x18uLL);
  void *v15 = v12;
  v15[1] = v9;
  unint64_t v15[2] = v11;
  dispatch_async_f(v14, v15, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI9SARModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEENK3__0clEvEUb0_EUlvE_EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_);
  if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  xpc_release(v13);
}

void ___ZZN9SARModule10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_3(uint64_t a1, xpc_object_t *a2, const void **a3)
{
  xpc_object_t v4 = *(void **)(a1 + 32);
  xpc_object_t v5 = *a2;
  if (*a2)
  {
    xpc_retain(*a2);
    size_t v6 = *a3;
    if (*a3) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t v7 = 0;
    uint64_t v8 = (std::__shared_weak_count *)v4[7];
    if (!v8) {
      goto LABEL_11;
    }
    goto LABEL_7;
  }
  xpc_object_t v5 = xpc_null_create();
  size_t v6 = *a3;
  if (!*a3) {
    goto LABEL_6;
  }
LABEL_3:
  uint64_t v7 = _Block_copy(v6);
  uint64_t v8 = (std::__shared_weak_count *)v4[7];
  if (!v8) {
LABEL_11:
  }
    std::__throw_bad_weak_ptr[abi:ne180100]();
LABEL_7:
  uint64_t v9 = v4[6];
  xpc_object_t v10 = std::__shared_weak_count::lock(v8);
  if (!v10) {
    goto LABEL_11;
  }
  xpc_object_t v11 = v10;
  size_t v12 = operator new(0x18uLL);
  void *v12 = v4;
  v12[1] = v5;
  xpc_object_t v13 = xpc_null_create();
  v12[2] = v7;
  xpc_object_t v14 = v4[8];
  atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v15 = operator new(0x18uLL);
  void *v15 = v12;
  v15[1] = v9;
  unint64_t v15[2] = v11;
  dispatch_async_f(v14, v15, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI9SARModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEENK3__0clEvEUb1_EUlvE_EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_);
  if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  xpc_release(v13);
}

void ___ZZN9SARModule10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_4(uint64_t a1, uint64_t a2, const void **a3)
{
  unint64_t v3 = *(void **)(a1 + 32);
  if (*a3)
  {
    xpc_object_t v4 = _Block_copy(*a3);
    xpc_object_t v5 = (std::__shared_weak_count *)v3[7];
    if (!v5) {
LABEL_10:
    }
      std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  else
  {
    xpc_object_t v4 = 0;
    xpc_object_t v5 = (std::__shared_weak_count *)v3[7];
    if (!v5) {
      goto LABEL_10;
    }
  }
  uint64_t v6 = v3[6];
  uint64_t v7 = std::__shared_weak_count::lock(v5);
  if (!v7) {
    goto LABEL_10;
  }
  uint64_t v8 = v7;
  uint64_t v9 = operator new(0x10uLL);
  *uint64_t v9 = v3;
  v9[1] = v4;
  xpc_object_t v10 = v3[8];
  atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  xpc_object_t v11 = operator new(0x18uLL);
  *xpc_object_t v11 = v9;
  v11[1] = v6;
  v11[2] = v8;
  dispatch_async_f(v10, v11, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI9SARModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEENK3__0clEvEUb2_EUlvE_EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_);
  if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
}

void ___ZZN9SARModule10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_5(uint64_t a1, uint64_t a2, const void **a3)
{
  unint64_t v3 = *(void **)(a1 + 32);
  if (*a3)
  {
    xpc_object_t v4 = _Block_copy(*a3);
    xpc_object_t v5 = (std::__shared_weak_count *)v3[7];
    if (!v5) {
LABEL_10:
    }
      std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  else
  {
    xpc_object_t v4 = 0;
    xpc_object_t v5 = (std::__shared_weak_count *)v3[7];
    if (!v5) {
      goto LABEL_10;
    }
  }
  uint64_t v6 = v3[6];
  uint64_t v7 = std::__shared_weak_count::lock(v5);
  if (!v7) {
    goto LABEL_10;
  }
  uint64_t v8 = v7;
  uint64_t v9 = operator new(0x10uLL);
  *uint64_t v9 = v3;
  v9[1] = v4;
  xpc_object_t v10 = v3[8];
  atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  xpc_object_t v11 = operator new(0x18uLL);
  *xpc_object_t v11 = v9;
  v11[1] = v6;
  v11[2] = v8;
  dispatch_async_f(v10, v11, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI9SARModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEENK3__0clEvEUb3_EUlvE_EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_);
  if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
}

void ___ZZN9SARModule10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_6(uint64_t a1, xpc_object_t *a2, const void **a3)
{
  xpc_object_t v4 = *(void **)(a1 + 32);
  xpc_object_t v5 = *a2;
  if (*a2)
  {
    xpc_retain(*a2);
    uint64_t v6 = *a3;
    if (*a3) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t v7 = 0;
    uint64_t v8 = (std::__shared_weak_count *)v4[7];
    if (!v8) {
      goto LABEL_11;
    }
    goto LABEL_7;
  }
  xpc_object_t v5 = xpc_null_create();
  uint64_t v6 = *a3;
  if (!*a3) {
    goto LABEL_6;
  }
LABEL_3:
  uint64_t v7 = _Block_copy(v6);
  uint64_t v8 = (std::__shared_weak_count *)v4[7];
  if (!v8) {
LABEL_11:
  }
    std::__throw_bad_weak_ptr[abi:ne180100]();
LABEL_7:
  uint64_t v9 = v4[6];
  xpc_object_t v10 = std::__shared_weak_count::lock(v8);
  if (!v10) {
    goto LABEL_11;
  }
  xpc_object_t v11 = v10;
  size_t v12 = operator new(0x18uLL);
  void *v12 = v4;
  v12[1] = v5;
  xpc_object_t v13 = xpc_null_create();
  v12[2] = v7;
  xpc_object_t v14 = v4[8];
  atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v15 = operator new(0x18uLL);
  void *v15 = v12;
  v15[1] = v9;
  unint64_t v15[2] = v11;
  dispatch_async_f(v14, v15, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI9SARModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEENK3__0clEvEUb4_EUlvE_EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_);
  if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  xpc_release(v13);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI9SARModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEENK3__0clEvEUb0_EUlvE_EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_(uint64_t **a1)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  xpc_object_t v2 = *a1;
  uint64_t v3 = **a1;
  uint64_t v4 = MEMORY[0x1C8792D30]((*a1)[1]);
  xpc_object_t v5 = *(NSObject **)(v3 + 80);
  if (v4 != MEMORY[0x1E4F14590])
  {
    uint64_t v6 = 3760250880;
    if (os_log_type_enabled(*(os_log_t *)(v3 + 80), OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl(&dword_1C5767000, v5, OS_LOG_TYPE_ERROR, "Motion parameter dictionary is empty!", buf, 2u);
    }
    goto LABEL_50;
  }
  if (os_log_type_enabled(*(os_log_t *)(v3 + 80), OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = (char *)MEMORY[0x1C8792C60](v2[1]);
    memset(buf, 170, 24);
    size_t v8 = strlen(v7);
    if (v8 >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    size_t v9 = v8;
    if (v8 >= 0x17)
    {
      uint64_t v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v8 | 7) != 0x17) {
        uint64_t v11 = v8 | 7;
      }
      uint64_t v12 = v11 + 1;
      xpc_object_t v10 = operator new(v11 + 1);
      *(void *)&uint8_t buf[8] = v9;
      *(void *)&uint8_t buf[16] = v12 | 0x8000000000000000;
      *(void *)long long buf = v10;
    }
    else
    {
      buf[23] = v8;
      xpc_object_t v10 = buf;
      if (!v8) {
        goto LABEL_13;
      }
    }
    memcpy(v10, v7, v9);
LABEL_13:
    *((unsigned char *)v10 + v9) = 0;
    free(v7);
    xpc_object_t v13 = buf;
    if ((buf[23] & 0x80u) != 0) {
      xpc_object_t v13 = *(uint8_t **)buf;
    }
    *(_DWORD *)uint64_t v29 = 136315138;
    *(void *)&v29[4] = v13;
    _os_log_impl(&dword_1C5767000, v5, OS_LOG_TYPE_DEFAULT, "#I Motion parameter is given: %s", v29, 0xCu);
    if ((char)buf[23] < 0) {
      operator delete(*(void **)buf);
    }
    xpc_object_t v5 = *(NSObject **)(v3 + 80);
  }
  if (!*(void *)(v3 + 104))
  {
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)long long buf = 0;
      _os_log_debug_impl(&dword_1C5767000, v5, OS_LOG_TYPE_DEBUG, "#D CoreMotion On Body Handler is empty", buf, 2u);
    }
    goto LABEL_31;
  }
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_1C5767000, v5, OS_LOG_TYPE_DEFAULT, "#I Set CoreMotion On Body Handler's motion parameter!", buf, 2u);
  }
  ctu::xpc_to_cf((uint64_t *)buf, (ctu *)v2[1], v14);
  uint64_t v15 = *(const void **)buf;
  if (*(void *)buf)
  {
    CFTypeID v16 = CFGetTypeID(*(CFTypeRef *)buf);
    if (v16 == CFDictionaryGetTypeID())
    {
      CFRetain(v15);
      uint64_t v17 = *(const void **)buf;
      if (!*(void *)buf) {
        goto LABEL_29;
      }
    }
    else
    {
      uint64_t v15 = 0;
      uint64_t v17 = *(const void **)buf;
      if (!*(void *)buf) {
        goto LABEL_29;
      }
    }
    CFRelease(v17);
  }
LABEL_29:
  CMOnBodyDelegate::setThresholds(*(CMOnBodyDelegate **)(v3 + 104), v15);
  if (v15) {
    CFRelease(v15);
  }
LABEL_31:
  uint64_t v18 = *(void *)(v3 + 192);
  size_t v19 = *(NSObject **)(v3 + 80);
  if (v18)
  {
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1C5767000, v19, OS_LOG_TYPE_DEFAULT, "#I Setting OBD manager's motion parameter!", buf, 2u);
      uint64_t v18 = *(void *)(v3 + 192);
    }
    xpc_object_t v20 = (xpc_object_t)v2[1];
    *(void *)uint64_t v29 = v20;
    if (v20)
    {
      xpc_retain(v20);
    }
    else
    {
      xpc_object_t v20 = xpc_null_create();
      *(void *)uint64_t v29 = v20;
    }
    OBDManager::setMotionParameter(v18, (ctu **)v29);
    xpc_release(v20);
    *(void *)uint64_t v29 = 0;
  }
  else if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)long long buf = 0;
    _os_log_debug_impl(&dword_1C5767000, v19, OS_LOG_TYPE_DEBUG, "#D OBD manager is empty", buf, 2u);
  }
  uint64_t v21 = *(void *)(v3 + 248);
  uint64_t v22 = *(NSObject **)(v3 + 80);
  if (v21)
  {
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1C5767000, v22, OS_LOG_TYPE_DEFAULT, "#I Setting hand detection manager's motion parameter!", buf, 2u);
      uint64_t v21 = *(void *)(v3 + 248);
    }
    uint64_t v23 = (ctu *)v2[1];
    size_t v27 = v23;
    if (v23)
    {
      xpc_retain(v23);
    }
    else
    {
      uint64_t v23 = (ctu *)xpc_null_create();
      size_t v27 = v23;
    }
    HandDetectionManager::setMotionParameter(v21, &v27);
    xpc_release(v23);
    uint64_t v6 = 0;
    size_t v27 = 0;
  }
  else
  {
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)long long buf = 0;
      _os_log_debug_impl(&dword_1C5767000, v22, OS_LOG_TYPE_DEBUG, "#D hand detection manager is empty", buf, 2u);
    }
    uint64_t v6 = 0;
  }
LABEL_50:
  uint64_t v24 = v2[2];
  *(void *)long long buf = xpc_null_create();
  (*(void (**)(uint64_t, uint64_t, uint8_t *))(v24 + 16))(v24, v6, buf);
  xpc_release(*(xpc_object_t *)buf);
  xpc_object_t v25 = (const void *)v2[2];
  if (v25) {
    _Block_release(v25);
  }
  xpc_release((xpc_object_t)v2[1]);
  operator delete(v2);
  size_t v26 = (std::__shared_weak_count *)a1[2];
  if (v26 && !atomic_fetch_add(&v26->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
    std::__shared_weak_count::__release_weak(v26);
  }
  operator delete(a1);
}

void sub_1C58B5678(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, CFTypeRef cf)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI9SARModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEENK3__0clEvEUb1_EUlvE_EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_(uint64_t **a1)
{
  v45[1] = *MEMORY[0x1E4F143B8];
  xpc_object_t v2 = *a1;
  uint64_t v3 = **a1;
  xpc_object_t value = xpc_dictionary_get_value((xpc_object_t)(*a1)[1], (const char *)*MEMORY[0x1E4F4C358]);
  xpc_object_t v5 = value;
  if (value) {
    xpc_retain(value);
  }
  else {
    xpc_object_t v5 = xpc_null_create();
  }
  if (MEMORY[0x1C8792D30](v5) == MEMORY[0x1E4F145D8])
  {
    uint64_t v6 = *(NSObject **)(v3 + 80);
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      if (!v2[2]) {
        goto LABEL_8;
      }
      goto LABEL_7;
    }
    LOWORD(object[0]) = 0;
    _os_log_error_impl(&dword_1C5767000, v6, OS_LOG_TYPE_ERROR, "Failed to get accessory information!", (uint8_t *)object, 2u);
    if (v2[2])
    {
LABEL_7:
      xpc_object_t v7 = xpc_null_create();
      uint64_t v8 = v2[2];
      object[0] = v7;
      xpc_object_t v9 = xpc_null_create();
      (*(void (**)(uint64_t, uint64_t, xpc_object_t *))(v8 + 16))(v8, 3760250880, object);
      xpc_release(object[0]);
      xpc_release(v9);
    }
  }
LABEL_8:
  bytes_ptr = (char *)xpc_data_get_bytes_ptr(v5);
  size_t length = xpc_data_get_length(v5);
  if (length >= 0xC)
  {
    size_t v23 = 12 * (length / 0xC);
    uint64_t v24 = (char *)operator new(v23);
    uint64_t v12 = v24;
    uint64_t v25 = 0;
    do
    {
      size_t v26 = &v24[v25];
      uint64_t v27 = *(void *)&bytes_ptr[v25];
      *((_DWORD *)v26 + 2) = *(_DWORD *)&bytes_ptr[v25 + 8];
      *(void *)size_t v26 = v27;
      v25 += 12;
    }
    while (v23 != v25);
    int v13 = 0;
    xpc_object_t v28 = v24;
    while (1)
    {
      int v30 = *(unsigned __int16 *)v28;
      int v31 = *((unsigned __int16 *)v28 + 1);
      if (v30 == 17 && v31 == 2) {
        v13 |= 0x40000u;
      }
      if (v30 == 18 && v31 == 2) {
        v13 |= 0x80000u;
      }
      if (v30 == 19 && v31 == 2) {
        v13 |= 0x100000u;
      }
      if (v30 == 20 && v31 == 2) {
        v13 |= 0x200000u;
      }
      int v32 = *((unsigned __int16 *)v28 + 3);
      if (v32 == 3 && v30 == 2055)
      {
        if (v31 == 2)
        {
          v13 |= 0x400000u;
LABEL_49:
          unsigned int v29 = *(_DWORD *)(v3 + 272) | 1;
          goto LABEL_30;
        }
        v13 &= ~0x400000u;
      }
      else
      {
        if (v30 == 4) {
          *(_DWORD *)(v3 + 272) = *(_DWORD *)(v3 + 272) & 0xFFFFFBFF | ((v31 == 2) << 10);
        }
        if (!v32 || v32 == 0xFFFF) {
          goto LABEL_31;
        }
        if (v31 == 2) {
          goto LABEL_49;
        }
      }
      unsigned int v29 = *(_DWORD *)(v3 + 272) & 0xFFFFFFFE;
LABEL_30:
      *(_DWORD *)(v3 + 272) = v29;
LABEL_31:
      v28 += 12;
      if (v28 == &v24[v23]) {
        goto LABEL_10;
      }
    }
  }
  uint64_t v12 = 0;
  int v13 = 0;
LABEL_10:
  *(_DWORD *)(v3 + 268) = v13;
  int v14 = *(_DWORD *)(v3 + 272) | v13;
  *(_DWORD *)(v3 + 161) = v14;
  uint64_t v15 = *(NSObject **)(v3 + 80);
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(object[0]) = 67109120;
    HIDWORD(object[0]) = v14;
    _os_log_impl(&dword_1C5767000, v15, OS_LOG_TYPE_DEFAULT, "#I Sending Accessory State with USB-C: 0x%x", (uint8_t *)object, 8u);
  }
  CFTypeID v16 = (AppleSARHelper *)pthread_mutex_lock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  uint64_t v17 = (AppleSARHelper *)off_1EBBDD250;
  if (!off_1EBBDD250)
  {
    AppleSARHelper::create_default_global((uint64_t *)object, v16);
    long long v18 = *(_OWORD *)object;
    object[0] = 0;
    object[1] = 0;
    size_t v19 = (std::__shared_weak_count *)*(&off_1EBBDD250 + 1);
    off_1EBBDD250 = v18;
    if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
    xpc_object_t v20 = (std::__shared_weak_count *)object[1];
    if (object[1] && !atomic_fetch_add((atomic_ullong *volatile)object[1] + 1, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
    uint64_t v17 = (AppleSARHelper *)off_1EBBDD250;
  }
  uint64_t v21 = (std::__shared_weak_count *)*(&off_1EBBDD250 + 1);
  if (*(&off_1EBBDD250 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDD250 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  int v42 = *(_DWORD *)(v3 + 161);
  if (*((_DWORD *)v17 + 1))
  {
    object[0] = 0;
    v45[0] = 0;
    unsigned int v43 = 1;
    char v22 = AppleSARHelper::callUserClientMethod(v17, 2, (const unint64_t *)object, 1, &v42, 4, v45, &v43, &v42, 4uLL);
    if (!v21)
    {
LABEL_52:
      if (v22) {
        goto LABEL_53;
      }
LABEL_56:
      uint64_t v36 = *(NSObject **)(v3 + 80);
      if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
      {
        LOWORD(object[0]) = 0;
        _os_log_error_impl(&dword_1C5767000, v36, OS_LOG_TYPE_ERROR, "Failed to set SAR Fusion State!", (uint8_t *)object, 2u);
        if (!v2[2]) {
          goto LABEL_59;
        }
      }
      else if (!v2[2])
      {
        goto LABEL_59;
      }
      xpc_object_t v37 = xpc_null_create();
      uint64_t v38 = v2[2];
      object[0] = v37;
      xpc_object_t v39 = xpc_null_create();
      (*(void (**)(uint64_t, uint64_t, xpc_object_t *))(v38 + 16))(v38, 3760250880, object);
      xpc_release(object[0]);
      xpc_release(v39);
      goto LABEL_59;
    }
  }
  else
  {
    char v22 = 0;
    if (!v21) {
      goto LABEL_52;
    }
  }
  if (atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_52;
  }
  ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
  std::__shared_weak_count::__release_weak(v21);
  if ((v22 & 1) == 0) {
    goto LABEL_56;
  }
LABEL_53:
  if (v2[2])
  {
    xpc_object_t v33 = xpc_null_create();
    uint64_t v34 = v2[2];
    object[0] = v33;
    xpc_object_t v35 = xpc_null_create();
    (*(void (**)(uint64_t, void, xpc_object_t *))(v34 + 16))(v34, 0, object);
    xpc_release(object[0]);
    xpc_release(v35);
  }
LABEL_59:
  if (v12) {
    operator delete(v12);
  }
  xpc_release(v5);
  size_t v40 = (const void *)v2[2];
  if (v40) {
    _Block_release(v40);
  }
  xpc_release((xpc_object_t)v2[1]);
  operator delete(v2);
  xpc_object_t v41 = (std::__shared_weak_count *)a1[2];
  if (v41 && !atomic_fetch_add(&v41->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
    std::__shared_weak_count::__release_weak(v41);
  }
  operator delete(a1);
}

void sub_1C58B5D8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, xpc_object_t object)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI9SARModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEENK3__0clEvEUb2_EUlvE_EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_(uint64_t **a1)
{
  v20[1] = *MEMORY[0x1E4F143B8];
  xpc_object_t v2 = *a1;
  uint64_t v3 = **a1;
  *(unsigned char *)(v3 + 296) = 1;
  uint64_t v4 = *(NSObject **)(v3 + 80);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_1C5767000, v4, OS_LOG_TYPE_DEFAULT, "#I Blocking accessories", buf, 2u);
  }
  xpc_object_t v5 = (AppleSARHelper *)pthread_mutex_lock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  uint64_t v6 = (AppleSARHelper *)off_1EBBDD250;
  if (!off_1EBBDD250)
  {
    AppleSARHelper::create_default_global((uint64_t *)buf, v5);
    long long v7 = *(_OWORD *)buf;
    memset(buf, 0, sizeof(buf));
    uint64_t v8 = (std::__shared_weak_count *)*(&off_1EBBDD250 + 1);
    off_1EBBDD250 = v7;
    if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
    xpc_object_t v9 = *(std::__shared_weak_count **)&buf[8];
    if (*(void *)&buf[8]
      && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
    uint64_t v6 = (AppleSARHelper *)off_1EBBDD250;
  }
  xpc_object_t v10 = (std::__shared_weak_count *)*(&off_1EBBDD250 + 1);
  if (*(&off_1EBBDD250 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDD250 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  char v17 = *(unsigned char *)(v3 + 296);
  if (*((_DWORD *)v6 + 1))
  {
    *(void *)long long buf = 0;
    v20[0] = 0;
    unsigned int v18 = 1;
    char v11 = AppleSARHelper::callUserClientMethod(v6, 29, (const unint64_t *)buf, 1, &v17, 1, v20, &v18, &v17, 1uLL);
    if (!v10)
    {
LABEL_18:
      if (v11) {
        goto LABEL_19;
      }
LABEL_22:
      int v13 = *(NSObject **)(v3 + 80);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)long long buf = 0;
        _os_log_error_impl(&dword_1C5767000, v13, OS_LOG_TYPE_ERROR, "Failed to set blocking accessories", buf, 2u);
        uint64_t v14 = v2[1];
        if (!v14) {
          goto LABEL_25;
        }
      }
      else
      {
        uint64_t v14 = v2[1];
        if (!v14) {
          goto LABEL_25;
        }
      }
      *(void *)long long buf = xpc_null_create();
      (*(void (**)(uint64_t, uint64_t, uint8_t *))(v14 + 16))(v14, 3760250880, buf);
      xpc_release(*(xpc_object_t *)buf);
      goto LABEL_25;
    }
  }
  else
  {
    char v11 = 0;
    if (!v10) {
      goto LABEL_18;
    }
  }
  if (atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_18;
  }
  ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
  std::__shared_weak_count::__release_weak(v10);
  if ((v11 & 1) == 0) {
    goto LABEL_22;
  }
LABEL_19:
  uint64_t v12 = v2[1];
  if (v12)
  {
    *(void *)long long buf = xpc_null_create();
    (*(void (**)(uint64_t, void, uint8_t *))(v12 + 16))(v12, 0, buf);
    xpc_release(*(xpc_object_t *)buf);
  }
LABEL_25:
  uint64_t v15 = (const void *)v2[1];
  if (v15) {
    _Block_release(v15);
  }
  operator delete(v2);
  CFTypeID v16 = (std::__shared_weak_count *)a1[2];
  if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
  }
  operator delete(a1);
}

void sub_1C58B62B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, xpc_object_t object)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI9SARModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEENK3__0clEvEUb3_EUlvE_EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_(uint64_t **a1)
{
  v20[1] = *MEMORY[0x1E4F143B8];
  xpc_object_t v2 = *a1;
  uint64_t v3 = **a1;
  *(unsigned char *)(v3 + 296) = 0;
  uint64_t v4 = *(NSObject **)(v3 + 80);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_1C5767000, v4, OS_LOG_TYPE_DEFAULT, "#I Unblocking accessories", buf, 2u);
  }
  xpc_object_t v5 = (AppleSARHelper *)pthread_mutex_lock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  uint64_t v6 = (AppleSARHelper *)off_1EBBDD250;
  if (!off_1EBBDD250)
  {
    AppleSARHelper::create_default_global((uint64_t *)buf, v5);
    long long v7 = *(_OWORD *)buf;
    memset(buf, 0, sizeof(buf));
    uint64_t v8 = (std::__shared_weak_count *)*(&off_1EBBDD250 + 1);
    off_1EBBDD250 = v7;
    if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
    xpc_object_t v9 = *(std::__shared_weak_count **)&buf[8];
    if (*(void *)&buf[8]
      && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
    uint64_t v6 = (AppleSARHelper *)off_1EBBDD250;
  }
  xpc_object_t v10 = (std::__shared_weak_count *)*(&off_1EBBDD250 + 1);
  if (*(&off_1EBBDD250 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDD250 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  char v17 = *(unsigned char *)(v3 + 296);
  if (*((_DWORD *)v6 + 1))
  {
    *(void *)long long buf = 0;
    v20[0] = 0;
    unsigned int v18 = 1;
    char v11 = AppleSARHelper::callUserClientMethod(v6, 29, (const unint64_t *)buf, 1, &v17, 1, v20, &v18, &v17, 1uLL);
    if (!v10)
    {
LABEL_18:
      if (v11) {
        goto LABEL_19;
      }
LABEL_22:
      int v13 = *(NSObject **)(v3 + 80);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)long long buf = 0;
        _os_log_error_impl(&dword_1C5767000, v13, OS_LOG_TYPE_ERROR, "Failed to set unblocking accessories", buf, 2u);
        uint64_t v14 = v2[1];
        if (!v14) {
          goto LABEL_25;
        }
      }
      else
      {
        uint64_t v14 = v2[1];
        if (!v14) {
          goto LABEL_25;
        }
      }
      *(void *)long long buf = xpc_null_create();
      (*(void (**)(uint64_t, uint64_t, uint8_t *))(v14 + 16))(v14, 3760250880, buf);
      xpc_release(*(xpc_object_t *)buf);
      goto LABEL_25;
    }
  }
  else
  {
    char v11 = 0;
    if (!v10) {
      goto LABEL_18;
    }
  }
  if (atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_18;
  }
  ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
  std::__shared_weak_count::__release_weak(v10);
  if ((v11 & 1) == 0) {
    goto LABEL_22;
  }
LABEL_19:
  uint64_t v12 = v2[1];
  if (v12)
  {
    *(void *)long long buf = xpc_null_create();
    (*(void (**)(uint64_t, void, uint8_t *))(v12 + 16))(v12, 0, buf);
    xpc_release(*(xpc_object_t *)buf);
  }
LABEL_25:
  uint64_t v15 = (const void *)v2[1];
  if (v15) {
    _Block_release(v15);
  }
  operator delete(v2);
  CFTypeID v16 = (std::__shared_weak_count *)a1[2];
  if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
  }
  operator delete(a1);
}

void sub_1C58B6734(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, xpc_object_t object)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI9SARModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEENK3__0clEvEUb4_EUlvE_EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_(const void ***a1)
{
  xpc_object_t object[3] = *(xpc_object_t *)MEMORY[0x1E4F143B8];
  xpc_object_t v2 = *a1;
  uint64_t v3 = **a1;
  xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v5 = v4;
  if (v4)
  {
    xpc_object_t xdict = v4;
  }
  else
  {
    xpc_object_t v5 = xpc_null_create();
    xpc_object_t xdict = v5;
    if (!v5)
    {
      xpc_object_t v6 = xpc_null_create();
      xpc_object_t v5 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1C8792D30](v5) == MEMORY[0x1E4F14590])
  {
    xpc_retain(v5);
    goto LABEL_9;
  }
  xpc_object_t v6 = xpc_null_create();
LABEL_8:
  xpc_object_t xdict = v6;
LABEL_9:
  xpc_release(v5);
  memset(__p, 170, sizeof(__p));
  xpc_object_t value = xpc_dictionary_get_value((xpc_object_t)v2[1], (const char *)*MEMORY[0x1E4F4C878]);
  object[0] = value;
  if (value) {
    xpc_retain(value);
  }
  else {
    object[0] = xpc_null_create();
  }
  xpc::dyn_cast_or_default((uint64_t *)__p, (xpc *)object, (const object *)"", v8);
  xpc_release(object[0]);
  xpc_object_t v9 = (const void *)*MEMORY[0x1E4F4CD50];
  xpc_object_t v10 = (void *)strlen((const char *)*MEMORY[0x1E4F4CD50]);
  char v11 = v10;
  char v12 = HIBYTE(__p[2]);
  if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
  {
    if (v10 != (void *)-1)
    {
      int v13 = (void *)HIBYTE(__p[2]);
      if (HIBYTE(__p[2]) >= (unint64_t)v10) {
        size_t v14 = (size_t)v10;
      }
      else {
        size_t v14 = HIBYTE(__p[2]);
      }
      if (memcmp(__p, v9, v14)) {
        goto LABEL_31;
      }
      goto LABEL_24;
    }
LABEL_58:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v10 == (void *)-1) {
    goto LABEL_58;
  }
  int v13 = __p[1];
  if (__p[1] >= v10) {
    uint64_t v15 = v10;
  }
  else {
    uint64_t v15 = __p[1];
  }
  if (memcmp(__p[0], v9, (size_t)v15))
  {
LABEL_31:
    uint64_t v21 = *((void *)v3 + 10);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
    {
      char v22 = __p;
      if (v12 < 0) {
        char v22 = (void **)__p[0];
      }
      LODWORD(object[0]) = 136315138;
      *(xpc_object_t *)((char *)object + 4) = v22;
      _os_log_impl(&dword_1C5767000, v21, OS_LOG_TYPE_DEFAULT, "#I Get property for \"%s\" command is not supported", (uint8_t *)object, 0xCu);
    }
    goto LABEL_50;
  }
LABEL_24:
  if (v13 != v11) {
    goto LABEL_31;
  }
  memset(object, 170, 24);
  CFTypeID v16 = (const char **)MEMORY[0x1E4F4D0C0];
  if (!*((unsigned char *)v3 + 264)) {
    CFTypeID v16 = (const char **)MEMORY[0x1E4F4CDB0];
  }
  char v17 = *v16;
  size_t v18 = strlen(*v16);
  if (v18 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v19 = (void *)v18;
  if (v18 >= 0x17)
  {
    uint64_t v23 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v18 | 7) != 0x17) {
      uint64_t v23 = v18 | 7;
    }
    uint64_t v24 = v23 + 1;
    xpc_object_t v20 = operator new(v23 + 1);
    object[1] = v19;
    xpc_object_t object[2] = (xpc_object_t)(v24 | 0x8000000000000000);
    object[0] = v20;
  }
  else
  {
    HIBYTE(object[2]) = v18;
    xpc_object_t v20 = object;
    if (!v18) {
      goto LABEL_39;
    }
  }
  memmove(v20, v17, (size_t)v19);
LABEL_39:
  *((unsigned char *)v19 + (void)v20) = 0;
  if (SHIBYTE(object[2]) >= 0) {
    uint64_t v25 = object;
  }
  else {
    uint64_t v25 = (xpc_object_t *)object[0];
  }
  xpc_object_t v26 = xpc_string_create((const char *)v25);
  if (!v26) {
    xpc_object_t v26 = xpc_null_create();
  }
  xpc_dictionary_set_value(xdict, (const char *)v9, v26);
  xpc_object_t v27 = xpc_null_create();
  xpc_release(v26);
  xpc_release(v27);
  xpc_object_t v28 = *((void *)v3 + 10);
  if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v29 = object;
    if (SHIBYTE(object[2]) < 0) {
      unsigned int v29 = (xpc_object_t *)object[0];
    }
    *(_DWORD *)long long buf = 136315138;
    xpc_object_t v35 = v29;
    _os_log_impl(&dword_1C5767000, v28, OS_LOG_TYPE_DEFAULT, "#I cellular transmit state: %s", buf, 0xCu);
  }
  if (SHIBYTE(object[2]) < 0) {
    operator delete(object[0]);
  }
LABEL_50:
  int v30 = v2 + 2;
  LODWORD(object[0]) = 0;
  dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>((uint64_t *)v2 + 2, (unsigned int *)object, &xdict);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  xpc_release(xdict);
  if (*v30) {
    _Block_release(*v30);
  }
  xpc_release((xpc_object_t)v2[1]);
  operator delete(v2);
  int v31 = (std::__shared_weak_count *)a1[2];
  if (v31 && !atomic_fetch_add(&v31->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
    std::__shared_weak_count::__release_weak(v31);
  }
  operator delete(a1);
}

void sub_1C58B6C80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, xpc_object_t object, uint64_t a16, uint64_t a17, xpc_object_t a18)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI9SARModuleE15execute_wrappedIZZNS3_25finishInitialization_syncEvEUb_E3__2EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS7_NSC_14default_deleteIS7_EEEEENUlPvE_8__invokeESH_(SARModule ***a1)
{
  xpc_object_t v2 = *a1;
  uint64_t v3 = **a1;
  if (capabilities::radio::maverick((capabilities::radio *)a1)) {
    SARModule::setupTxIndicationWorkaround(v3);
  }
  SARModule::sendCurrentState_sync(v3);
  xpc_object_t v4 = (std::__shared_weak_count *)v2[2];
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  operator delete(v2);
  xpc_object_t v5 = (std::__shared_weak_count *)a1[2];
  if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    xpc_object_t v6 = a1;
  }
  else
  {
    xpc_object_t v6 = a1;
  }
  operator delete(v6);
}

void sub_1C58B6EA8(_Unwind_Exception *a1)
{
  xpc_object_t v4 = (std::__shared_weak_count *)v2[2];
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  operator delete(v2);
  xpc_object_t v5 = (std::__shared_weak_count *)v1[2];
  if (v5)
  {
    if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI9SARModuleE15execute_wrappedIZZNS3_25finishInitialization_syncEvEUb_E3__3EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS7_NSC_14default_deleteIS7_EEEEENUlPvE_8__invokeESH_(uint64_t a1)
{
  xpc_object_t v2 = *(SARModule ***)a1;
  SARModule::processTxOff_sync(**(SARModule ***)a1);
  uint64_t v3 = (std::__shared_weak_count *)v2[2];
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  operator delete(v2);
  xpc_object_t v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    xpc_object_t v5 = (void *)a1;
  }
  else
  {
    xpc_object_t v5 = (void *)a1;
  }
  operator delete(v5);
}

void sub_1C58B7058(_Unwind_Exception *a1)
{
  xpc_object_t v4 = (std::__shared_weak_count *)v2[2];
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  operator delete(v2);
  xpc_object_t v5 = (std::__shared_weak_count *)v1[2];
  if (v5)
  {
    if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI9SARModuleE15execute_wrappedIZZNS3_19initializeWiFi_syncEvEUb0_E3__4EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS7_NSC_14default_deleteIS7_EEEEENUlPvE_8__invokeESH_(uint64_t **a1)
{
  v16[1] = *MEMORY[0x1E4F143B8];
  xpc_object_t v2 = *a1;
  uint64_t v3 = **a1;
  *(unsigned char *)(v3 + 136) = *((unsigned char *)*a1 + 8);
  xpc_object_t v4 = (AppleSARHelper *)pthread_mutex_lock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  xpc_object_t v5 = (AppleSARHelper *)off_1EBBDD250;
  if (!off_1EBBDD250)
  {
    AppleSARHelper::create_default_global((uint64_t *)buf, v4);
    long long v6 = *(_OWORD *)buf;
    memset(buf, 0, sizeof(buf));
    long long v7 = (std::__shared_weak_count *)*(&off_1EBBDD250 + 1);
    off_1EBBDD250 = v6;
    if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    uint64_t v8 = *(std::__shared_weak_count **)&buf[8];
    if (*(void *)&buf[8]
      && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
    xpc_object_t v5 = (AppleSARHelper *)off_1EBBDD250;
  }
  xpc_object_t v9 = (std::__shared_weak_count *)*(&off_1EBBDD250 + 1);
  if (*(&off_1EBBDD250 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDD250 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  char v13 = *(unsigned char *)(v3 + 136);
  if (*((_DWORD *)v5 + 1))
  {
    *(void *)long long buf = 0;
    v16[0] = 0;
    unsigned int v14 = 1;
    char v10 = AppleSARHelper::callUserClientMethod(v5, 0, (const unint64_t *)buf, 1, &v13, 1, v16, &v14, &v13, 1uLL);
    if (!v9)
    {
LABEL_16:
      if (v10) {
        goto LABEL_19;
      }
      goto LABEL_17;
    }
  }
  else
  {
    char v10 = 0;
    if (!v9) {
      goto LABEL_16;
    }
  }
  if (atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_16;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  if (v10) {
    goto LABEL_19;
  }
LABEL_17:
  char v11 = *(NSObject **)(v3 + 80);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)long long buf = 0;
    _os_log_error_impl(&dword_1C5767000, v11, OS_LOG_TYPE_ERROR, "Failed to set WiFi state!", buf, 2u);
  }
LABEL_19:
  operator delete(v2);
  char v12 = (std::__shared_weak_count *)a1[2];
  if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  operator delete(a1);
}

void sub_1C58B739C(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  operator delete(v2);
  xpc_object_t v4 = (std::__shared_weak_count *)v1[2];
  if (v4)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI9SARModuleE15execute_wrappedIZZNS3_24initializeBluetooth_syncEvEUb1_E3__5EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS7_NSC_14default_deleteIS7_EEEEENUlPvE_8__invokeESH_(uint64_t **a1)
{
  v16[1] = *MEMORY[0x1E4F143B8];
  xpc_object_t v2 = *a1;
  uint64_t v3 = **a1;
  *(unsigned char *)(v3 + 160) = *((unsigned char *)*a1 + 8);
  xpc_object_t v4 = (AppleSARHelper *)pthread_mutex_lock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  xpc_object_t v5 = (AppleSARHelper *)off_1EBBDD250;
  if (!off_1EBBDD250)
  {
    AppleSARHelper::create_default_global((uint64_t *)buf, v4);
    long long v6 = *(_OWORD *)buf;
    memset(buf, 0, sizeof(buf));
    long long v7 = (std::__shared_weak_count *)*(&off_1EBBDD250 + 1);
    off_1EBBDD250 = v6;
    if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    uint64_t v8 = *(std::__shared_weak_count **)&buf[8];
    if (*(void *)&buf[8]
      && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
    xpc_object_t v5 = (AppleSARHelper *)off_1EBBDD250;
  }
  xpc_object_t v9 = (std::__shared_weak_count *)*(&off_1EBBDD250 + 1);
  if (*(&off_1EBBDD250 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDD250 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  char v13 = *(unsigned char *)(v3 + 160);
  if (*((_DWORD *)v5 + 1))
  {
    *(void *)long long buf = 0;
    v16[0] = 0;
    unsigned int v14 = 1;
    char v10 = AppleSARHelper::callUserClientMethod(v5, 1, (const unint64_t *)buf, 1, &v13, 1, v16, &v14, &v13, 1uLL);
    if (!v9)
    {
LABEL_16:
      if (v10) {
        goto LABEL_19;
      }
      goto LABEL_17;
    }
  }
  else
  {
    char v10 = 0;
    if (!v9) {
      goto LABEL_16;
    }
  }
  if (atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_16;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  if (v10) {
    goto LABEL_19;
  }
LABEL_17:
  char v11 = *(NSObject **)(v3 + 80);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)long long buf = 0;
    _os_log_error_impl(&dword_1C5767000, v11, OS_LOG_TYPE_ERROR, "Failed to set Bluetooth state!", buf, 2u);
  }
LABEL_19:
  operator delete(v2);
  char v12 = (std::__shared_weak_count *)a1[2];
  if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  operator delete(a1);
}

void sub_1C58B7714(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  operator delete(v2);
  xpc_object_t v4 = (std::__shared_weak_count *)v1[2];
  if (v4)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI9SARModuleE15execute_wrappedIZZNS3_20initializeAudio_syncEvEUb2_E3__6EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS7_NSC_14default_deleteIS7_EEEEENUlPvE_8__invokeESH_(uint64_t **a1)
{
  v18[1] = *MEMORY[0x1E4F143B8];
  xpc_object_t v2 = *a1;
  uint64_t v3 = **a1;
  unsigned int v4 = *(_DWORD *)(v3 + 161) & 0xFFFFFFF7 | (8 * *((unsigned __int8 *)*a1 + 8));
  *(_DWORD *)(v3 + 161) = v4;
  xpc_object_t v5 = *(NSObject **)(v3 + 80);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v4;
    _os_log_impl(&dword_1C5767000, v5, OS_LOG_TYPE_DEFAULT, "#I Sending Accessory State due to Audio Wired Port: 0x%x", buf, 8u);
  }
  long long v6 = (AppleSARHelper *)pthread_mutex_lock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  long long v7 = (AppleSARHelper *)off_1EBBDD250;
  if (!off_1EBBDD250)
  {
    AppleSARHelper::create_default_global((uint64_t *)buf, v6);
    long long v8 = *(_OWORD *)buf;
    memset(buf, 0, sizeof(buf));
    xpc_object_t v9 = (std::__shared_weak_count *)*(&off_1EBBDD250 + 1);
    off_1EBBDD250 = v8;
    if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
    char v10 = *(std::__shared_weak_count **)&buf[8];
    if (*(void *)&buf[8]
      && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
    long long v7 = (AppleSARHelper *)off_1EBBDD250;
  }
  char v11 = (std::__shared_weak_count *)*(&off_1EBBDD250 + 1);
  if (*(&off_1EBBDD250 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDD250 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  int v15 = *(_DWORD *)(v3 + 161);
  if (*((_DWORD *)v7 + 1))
  {
    *(void *)long long buf = 0;
    v18[0] = 0;
    unsigned int v16 = 1;
    char v12 = AppleSARHelper::callUserClientMethod(v7, 2, (const unint64_t *)buf, 1, &v15, 4, v18, &v16, &v15, 4uLL);
    if (!v11)
    {
LABEL_18:
      if (v12) {
        goto LABEL_21;
      }
      goto LABEL_19;
    }
  }
  else
  {
    char v12 = 0;
    if (!v11) {
      goto LABEL_18;
    }
  }
  if (atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_18;
  }
  ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
  std::__shared_weak_count::__release_weak(v11);
  if (v12) {
    goto LABEL_21;
  }
LABEL_19:
  char v13 = *(NSObject **)(v3 + 80);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)long long buf = 0;
    _os_log_error_impl(&dword_1C5767000, v13, OS_LOG_TYPE_ERROR, "Failed to set SAR Fusion State!", buf, 2u);
  }
LABEL_21:
  operator delete(v2);
  unsigned int v14 = (std::__shared_weak_count *)a1[2];
  if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  operator delete(a1);
}

void sub_1C58B7AE4(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  operator delete(v2);
  unsigned int v4 = (std::__shared_weak_count *)v1[2];
  if (v4)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI9SARModuleE15execute_wrappedIZZNS3_20initializeAudio_syncEvEUb3_E3__7EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS7_NSC_14default_deleteIS7_EEEEENUlPvE_8__invokeESH_(uint64_t **a1)
{
  v18[1] = *MEMORY[0x1E4F143B8];
  xpc_object_t v2 = *a1;
  uint64_t v3 = **a1;
  int v4 = *((unsigned __int8 *)*a1 + 8);
  *(unsigned char *)(v3 + 167) = v4;
  xpc_object_t v5 = *(NSObject **)(v3 + 80);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v4;
    _os_log_impl(&dword_1C5767000, v5, OS_LOG_TYPE_DEFAULT, "#I Sending Speaker State: 0x%x\n", buf, 8u);
  }
  long long v6 = (AppleSARHelper *)pthread_mutex_lock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  long long v7 = (AppleSARHelper *)off_1EBBDD250;
  if (!off_1EBBDD250)
  {
    AppleSARHelper::create_default_global((uint64_t *)buf, v6);
    long long v8 = *(_OWORD *)buf;
    memset(buf, 0, sizeof(buf));
    xpc_object_t v9 = (std::__shared_weak_count *)*(&off_1EBBDD250 + 1);
    off_1EBBDD250 = v8;
    if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
    char v10 = *(std::__shared_weak_count **)&buf[8];
    if (*(void *)&buf[8]
      && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
    long long v7 = (AppleSARHelper *)off_1EBBDD250;
  }
  char v11 = (std::__shared_weak_count *)*(&off_1EBBDD250 + 1);
  if (*(&off_1EBBDD250 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDD250 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  char v15 = *(unsigned char *)(v3 + 167);
  if (*((_DWORD *)v7 + 1))
  {
    *(void *)long long buf = 0;
    v18[0] = 0;
    unsigned int v16 = 1;
    char v12 = AppleSARHelper::callUserClientMethod(v7, 6, (const unint64_t *)buf, 1, &v15, 1, v18, &v16, &v15, 1uLL);
    if (!v11)
    {
LABEL_18:
      if (v12) {
        goto LABEL_21;
      }
      goto LABEL_19;
    }
  }
  else
  {
    char v12 = 0;
    if (!v11) {
      goto LABEL_18;
    }
  }
  if (atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_18;
  }
  ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
  std::__shared_weak_count::__release_weak(v11);
  if (v12) {
    goto LABEL_21;
  }
LABEL_19:
  char v13 = *(NSObject **)(v3 + 80);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)long long buf = 0;
    _os_log_error_impl(&dword_1C5767000, v13, OS_LOG_TYPE_ERROR, "Failed to set SAR Fusion State!", buf, 2u);
  }
LABEL_21:
  operator delete(v2);
  unsigned int v14 = (std::__shared_weak_count *)a1[2];
  if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  operator delete(a1);
}

void sub_1C58B7EA4(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  operator delete(v2);
  int v4 = (std::__shared_weak_count *)v1[2];
  if (v4)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI9SARModuleE15execute_wrappedIZZNS3_18initializeOBD_syncEvEUb4_E3__8EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS7_NSC_14default_deleteIS7_EEEEENUlPvE_8__invokeESH_(uint64_t a1)
{
  xpc_object_t v2 = *(uint64_t **)a1;
  uint64_t v3 = **(void **)a1;
  SARModule::submitCASARFusion(v3, 1);
  *(unsigned char *)(v3 + 166) = *(unsigned char *)(v3 + 165);
  operator delete(v2);
  int v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    xpc_object_t v5 = (void *)a1;
  }
  else
  {
    xpc_object_t v5 = (void *)a1;
  }
  operator delete(v5);
}

void sub_1C58B8050(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;
  operator delete(v3);
  xpc_object_t v5 = (std::__shared_weak_count *)v1[2];
  if (v5)
  {
    if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI9SARModuleE15execute_wrappedIZZNS3_28initializeHandDetection_syncEvEUb5_E3__9EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS7_NSC_14default_deleteIS7_EEEEENUlPvE_8__invokeESH_(uint64_t a1)
{
  xpc_object_t v2 = *(uint64_t **)a1;
  uint64_t v3 = **(void **)a1;
  SARModule::submitCASARFusion(v3, 1);
  *(unsigned char *)(v3 + 169) = *(unsigned char *)(v3 + 168);
  operator delete(v2);
  int v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    xpc_object_t v5 = (void *)a1;
  }
  else
  {
    xpc_object_t v5 = (void *)a1;
  }
  operator delete(v5);
}

void sub_1C58B8184(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;
  operator delete(v3);
  xpc_object_t v5 = (std::__shared_weak_count *)v1[2];
  if (v5)
  {
    if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void({block_pointer})(BOOL,BOOL,char const*),std::allocator<void({block_pointer})(BOOL,BOOL,char const*)>,void ()(BOOL,BOOL,char const*)>::__clone()
{
  return 0;
}

void *std::__function::__func<void({block_pointer})(BOOL,BOOL,char const*),std::allocator<void({block_pointer})(BOOL,BOOL,char const*)>,void ()(BOOL,BOOL,char const*)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F20FAA30;
  xpc_object_t result = *(void **)(a1 + 8);
  if (result) {
    xpc_object_t result = _Block_copy(result);
  }
  a2[1] = result;
  return result;
}

void std::__function::__func<void({block_pointer})(BOOL,BOOL,char const*),std::allocator<void({block_pointer})(BOOL,BOOL,char const*)>,void ()(BOOL,BOOL,char const*)>::destroy(uint64_t a1)
{
  xpc_object_t v2 = *(const void **)(a1 + 8);
  if (v2) {
    _Block_release(v2);
  }
  *(void *)(a1 + 8) = 0;
}

uint64_t std::__function::__func<void({block_pointer})(BOOL,BOOL,char const*),std::allocator<void({block_pointer})(BOOL,BOOL,char const*)>,void ()(BOOL,BOOL,char const*)>::operator()(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 8) + 16))();
}

uint64_t std::__function::__func<void({block_pointer})(BOOL,BOOL,char const*),std::allocator<void({block_pointer})(BOOL,BOOL,char const*)>,void ()(BOOL,BOOL,char const*)>::target(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x80000001C59A3C53) {
    return a1 + 8;
  }
  if (((v3 & 0x80000001C59A3C53 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000001C59A3C53)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001C59A3C53 & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 8;
  }
  return 0;
}

void *std::__function::__func<void({block_pointer})(BOOL,BOOL,char const*),std::allocator<void({block_pointer})(BOOL,BOOL,char const*)>,void ()(BOOL,BOOL,char const*)>::target_type()
{
}

void dispatch::async<void ctu::SharedSynchronizable<SARModule>::execute_wrapped<SARModule::processTxOff_sync(void)::$_0>(SARModule::processTxOff_sync(void)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<SARModule::processTxOff_sync(void)::$_0,dispatch_queue_s *::default_delete<SARModule::processTxOff_sync(void)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  xpc_object_t v2 = *(uint64_t **)a1;
  uint64_t v3 = **(void **)a1;
  SARModule::submitCASARFusion(v3, 1);
  *(unsigned char *)(v3 + 169) = *(unsigned char *)(v3 + 168);
  operator delete(v2);
  int v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    xpc_object_t v5 = (void *)a1;
  }
  else
  {
    xpc_object_t v5 = (void *)a1;
  }
  operator delete(v5);
}

void sub_1C58B83F4(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;
  operator delete(v3);
  xpc_object_t v5 = (std::__shared_weak_count *)v1[2];
  if (v5)
  {
    if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void dispatch::async<void ctu::SharedSynchronizable<SARModule>::execute_wrapped<SARModule::transmitStateHandler(antenna::BBTransmitState,antenna::BBTransmitTrigger)::$_0>(SARModule::transmitStateHandler(antenna::BBTransmitState,antenna::BBTransmitTrigger)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<SARModule::transmitStateHandler(antenna::BBTransmitState,antenna::BBTransmitTrigger)::$_0,dispatch_queue_s *::default_delete<SARModule::transmitStateHandler(antenna::BBTransmitState,antenna::BBTransmitTrigger)::$_0>>)::{lambda(void *)#1}::__invoke(int **a1)
{
  uint64_t v53 = *MEMORY[0x1E4F143B8];
  xpc_object_t v2 = *a1;
  uint64_t v3 = *(capabilities::radio **)*a1;
  if (capabilities::radio::maverick((capabilities::radio *)a1))
  {
    unint64_t v41 = 0xAAAAAAAAAAAAAAAALL;
    SARModule::createTransmitStateDict_sync(v3, v2[2], v2[3], (xpc_object_t *)&v41);
    xpc_object_t v4 = (xpc_object_t)v41;
    if (MEMORY[0x1C8792D30](v41) != MEMORY[0x1E4F14590])
    {
      xpc_object_t v5 = *((void *)v3 + 10);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      {
        int v6 = v2[2];
        int v7 = v2[3];
        *(_DWORD *)long long buf = 67109376;
        *(_DWORD *)&uint8_t buf[4] = v6;
        *(_WORD *)&uint8_t buf[8] = 1024;
        *(_DWORD *)&buf[10] = v7;
        _os_log_error_impl(&dword_1C5767000, v5, OS_LOG_TYPE_ERROR, "Failed to get the Tx state from the state (%d) and trigger (%d)", buf, 0xEu);
      }
      goto LABEL_71;
    }
    memset(v40, 170, sizeof(v40));
    xpc_object_t value = xpc_dictionary_get_value(v4, (const char *)*MEMORY[0x1E4F4CD50]);
    *(void *)long long buf = value;
    if (value) {
      xpc_retain(value);
    }
    else {
      *(void *)long long buf = xpc_null_create();
    }
    xpc::dyn_cast_or_default((uint64_t *)v40, (xpc *)buf, (const object *)"", v10);
    xpc_release(*(xpc_object_t *)buf);
    memset(v39, 170, sizeof(v39));
    xpc_object_t v11 = xpc_dictionary_get_value(v4, (const char *)*MEMORY[0x1E4F4CF18]);
    *(void *)long long buf = v11;
    if (v11) {
      xpc_retain(v11);
    }
    else {
      *(void *)long long buf = xpc_null_create();
    }
    xpc::dyn_cast_or_default((uint64_t *)v39, (xpc *)buf, (const object *)"", v12);
    xpc_release(*(xpc_object_t *)buf);
    unint64_t v52 = 0xAAAAAAAAAAAAAAAALL;
    *(void *)&long long v13 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v13 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v51[7] = v13;
    v51[8] = v13;
    v51[5] = v13;
    v51[6] = v13;
    unint64_t v51[3] = v13;
    v51[4] = v13;
    v51[1] = v13;
    v51[2] = v13;
    long long v50 = v13;
    v51[0] = v13;
    *(_OWORD *)char v48 = v13;
    long long v49 = v13;
    long long v46 = v13;
    long long v47 = v13;
    *(_OWORD *)long long buf = v13;
    long long v45 = v13;
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)buf);
    unsigned int v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(buf, (uint64_t)"Transmit State: ", 16);
    if (SHIBYTE(v40[2]) >= 0) {
      char v15 = v40;
    }
    else {
      char v15 = (void **)v40[0];
    }
    if (SHIBYTE(v40[2]) >= 0) {
      uint64_t v16 = HIBYTE(v40[2]);
    }
    else {
      uint64_t v16 = (uint64_t)v40[1];
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    char v17 = (void *)HIBYTE(v39[2]);
    if (SHIBYTE(v39[2]) < 0) {
      char v17 = v39[1];
    }
    if (v17)
    {
      size_t v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(buf, (uint64_t)" (", 2);
      if (SHIBYTE(v39[2]) >= 0) {
        size_t v19 = v39;
      }
      else {
        size_t v19 = (void **)v39[0];
      }
      if (SHIBYTE(v39[2]) >= 0) {
        uint64_t v20 = HIBYTE(v39[2]);
      }
      else {
        uint64_t v20 = (uint64_t)v39[1];
      }
      uint64_t v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)v19, v20);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)")", 1);
    }
    char v22 = *((void *)v3 + 10);
    if (!os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
    {
LABEL_47:
      int v30 = SHIBYTE(v40[2]);
      if (SHIBYTE(v40[2]) >= 0) {
        size_t v31 = HIBYTE(v40[2]);
      }
      else {
        size_t v31 = (size_t)v40[1];
      }
      if (v31 == strlen((const char *)*MEMORY[0x1E4F4D0C0])
        && (SHIBYTE(v40[2]) >= 0 ? (int v32 = v40) : (int v32 = (void **)v40[0]),
            !memcmp(v32, (const void *)*MEMORY[0x1E4F4D0C0], v31)))
      {
        xpc_object_t v35 = *((void *)v3 + 10);
        if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(__p[0]) = 0;
          _os_log_impl(&dword_1C5767000, v35, OS_LOG_TYPE_DEFAULT, "#I Tx is on from QMI", (uint8_t *)__p, 2u);
        }
        SARModule::processTxOn_sync(v3);
      }
      else if (v31 == strlen((const char *)*MEMORY[0x1E4F4CDB0]))
      {
        xpc_object_t v33 = v30 >= 0 ? v40 : (void **)v40[0];
        if (!memcmp(v33, (const void *)*MEMORY[0x1E4F4CDB0], v31))
        {
          uint64_t v34 = *((void *)v3 + 10);
          if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
          {
            LOWORD(__p[0]) = 0;
            _os_log_impl(&dword_1C5767000, v34, OS_LOG_TYPE_DEFAULT, "#I Tx is off from QMI", (uint8_t *)__p, 2u);
          }
          SARModule::processTxOff_sync(v3);
        }
      }
      *(void *)long long buf = *MEMORY[0x1E4FBA418];
      *(void *)&buf[*(void *)(*(void *)buf - 24)] = *(void *)(MEMORY[0x1E4FBA418] + 24);
      *(void *)&uint8_t buf[8] = MEMORY[0x1E4FBA470] + 16;
      if (SHIBYTE(v49) < 0) {
        operator delete(v48[1]);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x1C8791FB0](v51);
      if (SHIBYTE(v39[2]) < 0)
      {
        operator delete(v39[0]);
        if ((SHIBYTE(v40[2]) & 0x80000000) == 0) {
          goto LABEL_70;
        }
      }
      else if ((SHIBYTE(v40[2]) & 0x80000000) == 0)
      {
LABEL_70:
        xpc_object_t v4 = (xpc_object_t)v41;
LABEL_71:
        xpc_release(v4);
        goto LABEL_72;
      }
      operator delete(v40[0]);
      goto LABEL_70;
    }
    if ((BYTE8(v50) & 0x10) != 0)
    {
      uint64_t v25 = v50;
      if ((unint64_t)v50 < *((void *)&v47 + 1))
      {
        *(void *)&long long v50 = *((void *)&v47 + 1);
        uint64_t v25 = *((void *)&v47 + 1);
      }
      xpc_object_t v26 = (const void *)v47;
      size_t v23 = v25 - v47;
      if ((unint64_t)(v25 - v47) >= 0x7FFFFFFFFFFFFFF8) {
        goto LABEL_79;
      }
    }
    else
    {
      if ((BYTE8(v50) & 8) == 0)
      {
        size_t v23 = 0;
        HIBYTE(v38) = 0;
        uint64_t v24 = __p;
        goto LABEL_43;
      }
      xpc_object_t v26 = (const void *)*((void *)&v45 + 1);
      size_t v23 = *((void *)&v46 + 1) - *((void *)&v45 + 1);
      if (*((void *)&v46 + 1) - *((void *)&v45 + 1) >= 0x7FFFFFFFFFFFFFF8uLL) {
LABEL_79:
      }
        std::string::__throw_length_error[abi:ne180100]();
    }
    if (v23 >= 0x17)
    {
      uint64_t v27 = (v23 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v23 | 7) != 0x17) {
        uint64_t v27 = v23 | 7;
      }
      uint64_t v28 = v27 + 1;
      uint64_t v24 = operator new(v27 + 1);
      __p[1] = (void *)v23;
      int64_t v38 = v28 | 0x8000000000000000;
      __p[0] = v24;
    }
    else
    {
      HIBYTE(v38) = v23;
      uint64_t v24 = __p;
      if (!v23) {
        goto LABEL_43;
      }
    }
    memmove(v24, v26, v23);
LABEL_43:
    *((unsigned char *)v24 + v23) = 0;
    unsigned int v29 = __p;
    if (v38 < 0) {
      unsigned int v29 = (void **)__p[0];
    }
    *(_DWORD *)int v42 = 136315138;
    unsigned int v43 = v29;
    _os_log_impl(&dword_1C5767000, v22, OS_LOG_TYPE_DEFAULT, "#I %s", v42, 0xCu);
    if (SHIBYTE(v38) < 0) {
      operator delete(__p[0]);
    }
    goto LABEL_47;
  }
  long long v8 = *((void *)v3 + 10);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)long long buf = 0;
    _os_log_error_impl(&dword_1C5767000, v8, OS_LOG_TYPE_ERROR, "This is not supported device", buf, 2u);
  }
LABEL_72:
  operator delete(v2);
  uint64_t v36 = (std::__shared_weak_count *)a1[2];
  if (v36 && !atomic_fetch_add(&v36->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
    std::__shared_weak_count::__release_weak(v36);
  }
  operator delete(a1);
}

void sub_1C58B8AE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,xpc_object_t object,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44)
{
  a27 = (void *)*MEMORY[0x1E4FBA418];
  *(void **)((char *)&a27 + *(a27 - 3)) = *(void **)(MEMORY[0x1E4FBA418] + 24);
  a28 = MEMORY[0x1E4FBA470] + 16;
  if (a41 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1C8791FB0](&a44);
  if (a17 < 0) {
    operator delete(a12);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  xpc_release(object);
  operator delete(v45);
  long long v47 = (std::__shared_weak_count *)v44[2];
  if (v47)
  {
    if (!atomic_fetch_add(&v47->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  operator delete(v44);
  _Unwind_Resume(a1);
}

void dispatch::async<void ctu::SharedSynchronizable<SARModule>::execute_wrapped<SARModule::processCallStatus(BOOL)::$_0>(SARModule::processCallStatus(BOOL)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<SARModule::processCallStatus(BOOL)::$_0,dispatch_queue_s *::default_delete<SARModule::processCallStatus(BOOL)::$_0>>)::{lambda(void *)#1}::__invoke(unsigned __int8 **a1)
{
  v35[1] = *MEMORY[0x1E4F143B8];
  xpc_object_t v2 = *a1;
  uint64_t v3 = *(void *)*a1;
  xpc_object_t v4 = *(NSObject **)(v3 + 80);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_1C5767000, v4, OS_LOG_TYPE_DEFAULT, "#I Getting call state", buf, 2u);
  }
  xpc_object_t v5 = (AppleSARHelper *)pthread_mutex_lock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  int v6 = (AppleSARHelper *)off_1EBBDD250;
  if (!off_1EBBDD250)
  {
    AppleSARHelper::create_default_global((uint64_t *)buf, v5);
    long long v7 = *(_OWORD *)buf;
    memset(buf, 0, sizeof(buf));
    long long v8 = (std::__shared_weak_count *)*(&off_1EBBDD250 + 1);
    off_1EBBDD250 = v7;
    if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
    xpc_object_t v9 = *(std::__shared_weak_count **)&buf[8];
    if (*(void *)&buf[8]
      && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
    int v6 = (AppleSARHelper *)off_1EBBDD250;
  }
  char v10 = (std::__shared_weak_count *)*(&off_1EBBDD250 + 1);
  if (*(&off_1EBBDD250 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDD250 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  xpc_object_t v11 = (char *)(v3 + 312);
  if (*((_DWORD *)v6 + 1))
  {
    *(void *)long long buf = 3;
    v35[0] = 0;
    unsigned int v33 = 1;
    char v12 = AppleSARHelper::callUserClientMethod(v6, 33, (const unint64_t *)buf, 1, (const void *)(v3 + 312), 1, v35, &v33, (void *)(v3 + 312), 1uLL);
    if (!v10)
    {
LABEL_18:
      long long v13 = *(NSObject **)(v3 + 80);
      unsigned int v14 = v13;
      if (v12) {
        goto LABEL_19;
      }
LABEL_26:
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)long long buf = 0;
        _os_log_error_impl(&dword_1C5767000, v13, OS_LOG_TYPE_ERROR, "Failed to get call state!", buf, 2u);
        int v16 = v2[8];
        if (v16 != *v11) {
          goto LABEL_33;
        }
LABEL_28:
        char v17 = *(NSObject **)(v3 + 80);
        if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
        {
          size_t v18 = "YES";
          if (!v16) {
            size_t v18 = "NO";
          }
          *(_DWORD *)long long buf = 136315138;
          *(void *)&uint8_t buf[4] = v18;
          size_t v19 = "#I Call state is same as before. No update the HSAR Voice Call: %s";
          uint64_t v20 = v17;
LABEL_54:
          _os_log_impl(&dword_1C5767000, v20, OS_LOG_TYPE_DEFAULT, v19, buf, 0xCu);
          operator delete(v2);
          size_t v31 = (std::__shared_weak_count *)a1[2];
          if (!v31) {
            goto LABEL_61;
          }
          goto LABEL_59;
        }
LABEL_58:
        operator delete(v2);
        size_t v31 = (std::__shared_weak_count *)a1[2];
        if (!v31) {
          goto LABEL_61;
        }
        goto LABEL_59;
      }
LABEL_27:
      int v16 = v2[8];
      if (v16 != *v11) {
        goto LABEL_33;
      }
      goto LABEL_28;
    }
  }
  else
  {
    char v12 = 0;
    if (!v10) {
      goto LABEL_18;
    }
  }
  if (atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_18;
  }
  ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
  std::__shared_weak_count::__release_weak(v10);
  long long v13 = *(NSObject **)(v3 + 80);
  unsigned int v14 = v13;
  if ((v12 & 1) == 0) {
    goto LABEL_26;
  }
LABEL_19:
  if (!os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT)) {
    goto LABEL_27;
  }
  if (*v11) {
    char v15 = "On";
  }
  else {
    char v15 = "Off";
  }
  *(_DWORD *)long long buf = 136315138;
  *(void *)&uint8_t buf[4] = v15;
  _os_log_impl(&dword_1C5767000, v13, OS_LOG_TYPE_DEFAULT, "#I Succeeded getting call state: %s", buf, 0xCu);
  int v16 = v2[8];
  if (v16 == *v11) {
    goto LABEL_28;
  }
LABEL_33:
  *xpc_object_t v11 = v16;
  uint64_t v21 = (AppleSARHelper *)pthread_mutex_lock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  char v22 = (AppleSARHelper *)off_1EBBDD250;
  if (!off_1EBBDD250)
  {
    AppleSARHelper::create_default_global((uint64_t *)buf, v21);
    long long v23 = *(_OWORD *)buf;
    memset(buf, 0, sizeof(buf));
    uint64_t v24 = (std::__shared_weak_count *)*(&off_1EBBDD250 + 1);
    off_1EBBDD250 = v23;
    if (v24 && !atomic_fetch_add(&v24->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
    uint64_t v25 = *(std::__shared_weak_count **)&buf[8];
    if (*(void *)&buf[8]
      && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
    char v22 = (AppleSARHelper *)off_1EBBDD250;
  }
  xpc_object_t v26 = (std::__shared_weak_count *)*(&off_1EBBDD250 + 1);
  if (*(&off_1EBBDD250 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDD250 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  char v32 = *v11;
  if (*((_DWORD *)v22 + 1))
  {
    *(void *)long long buf = 0;
    v35[0] = 0;
    unsigned int v33 = 1;
    char v27 = AppleSARHelper::callUserClientMethod(v22, 33, (const unint64_t *)buf, 1, &v32, 1, v35, &v33, &v32, 1uLL);
    if (!v26)
    {
LABEL_48:
      uint64_t v28 = *(NSObject **)(v3 + 80);
      unsigned int v29 = v28;
      if (v27) {
        goto LABEL_49;
      }
      goto LABEL_57;
    }
  }
  else
  {
    char v27 = 0;
    if (!v26) {
      goto LABEL_48;
    }
  }
  if (atomic_fetch_add(&v26->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_48;
  }
  ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
  std::__shared_weak_count::__release_weak(v26);
  uint64_t v28 = *(NSObject **)(v3 + 80);
  unsigned int v29 = v28;
  if (v27)
  {
LABEL_49:
    if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
    {
      if (*v11) {
        int v30 = "YES";
      }
      else {
        int v30 = "NO";
      }
      *(_DWORD *)long long buf = 136315138;
      *(void *)&uint8_t buf[4] = v30;
      size_t v19 = "#I Setting HSAR Voice Call: %s";
      uint64_t v20 = v28;
      goto LABEL_54;
    }
    goto LABEL_58;
  }
LABEL_57:
  if (!os_log_type_enabled(v29, OS_LOG_TYPE_ERROR)) {
    goto LABEL_58;
  }
  *(_WORD *)long long buf = 0;
  _os_log_error_impl(&dword_1C5767000, v28, OS_LOG_TYPE_ERROR, "Failed to set call state!", buf, 2u);
  operator delete(v2);
  size_t v31 = (std::__shared_weak_count *)a1[2];
  if (!v31) {
    goto LABEL_61;
  }
LABEL_59:
  if (!atomic_fetch_add(&v31->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
    std::__shared_weak_count::__release_weak(v31);
  }
LABEL_61:
  operator delete(a1);
}

void sub_1C58B92C8(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(&ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance);
  operator delete(v2);
  xpc_object_t v4 = (std::__shared_weak_count *)v1[2];
  if (v4)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t __cxx_global_var_init_64()
{
  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<CommandDriverFactory>::~PthreadMutexGuardPolicy, &ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance, &dword_1C5767000);
  }
  return result;
}

uint64_t __cxx_global_var_init_65()
{
  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<AppleSARHelper>::~PthreadMutexGuardPolicy, &ctu::Singleton<AppleSARHelper,AppleSARHelper,ctu::PthreadMutexGuardPolicy<AppleSARHelper>>::sInstance, &dword_1C5767000);
  }
  return result;
}

uint64_t __cxx_global_var_init_66()
{
  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<ctu::Gestalt>::~PthreadMutexGuardPolicy, &ctu::Singleton<ctu::Gestalt,ctu::Gestalt,ctu::PthreadMutexGuardPolicy<ctu::Gestalt>>::sInstance, &dword_1C5767000);
  }
  return result;
}

uint64_t __cxx_global_var_init_67()
{
  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<ABMServer>::~PthreadMutexGuardPolicy, &ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance, &dword_1C5767000);
  }
  return result;
}

void ServerClientState::ServerClientState(ServerClientState *this)
{
  *(void *)this = 0;
  *((void *)this + 1) = 0;
}

{
  *(void *)this = 0;
  *((void *)this + 1) = 0;
}

std::string **ServerClientState::ServerClientState(std::string **a1, uint64_t a2)
{
  xpc_object_t v4 = (std::string *)operator new(0x38uLL);
  xpc_object_t v5 = v4;
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    v4->__r_.__value_.__r.__words[2] = *(void *)(a2 + 16);
  }
  v5[1].__r_.__value_.__s.__data_[0] = 0;
  v5[2].__r_.__value_.__r.__words[0] = 0;
  v5[1].__r_.__value_.__r.__words[2] = 0;
  v5[1].__r_.__value_.__l.__size_ = (std::string::size_type)&v5[1].__r_.__value_.__r.__words[2];
  *a1 = v5;
  int v6 = (std::string *)operator new(0x20uLL);
  v6->__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F20FAAC0;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6[1].__r_.__value_.__r.__words[0] = (std::string::size_type)v5;
  a1[1] = v6;
  return a1;
}

void sub_1C58B9578(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1C58B958C(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  operator delete((void *)v1);
  _Unwind_Resume(a1);
}

void ***ServerClientState::setCheckedIn(void ***result, void **a2)
{
  xpc_object_t v2 = *result;
  if (*result == a2) {
    goto LABEL_5;
  }
  if (*((char *)v2 + 23) < 0)
  {
    size_t v4 = (size_t)a2[1];
    if (*((char *)a2 + 23) >= 0)
    {
      size_t v5 = *((unsigned __int8 *)a2 + 23);
    }
    else
    {
      a2 = (void **)*a2;
      size_t v5 = v4;
    }
    uint64_t result = (void ***)std::string::__assign_no_alias<false>(*result, a2, v5);
    *((unsigned char *)v2 + 24) = 1;
  }
  else
  {
    if ((*((unsigned char *)a2 + 23) & 0x80) == 0)
    {
      long long v3 = *(_OWORD *)a2;
      v2[2] = a2[2];
      *(_OWORD *)xpc_object_t v2 = v3;
LABEL_5:
      *((unsigned char *)v2 + 24) = 1;
      return result;
    }
    uint64_t result = (void ***)std::string::__assign_no_alias<true>(*result, *a2, (size_t)a2[1]);
    *((unsigned char *)v2 + 24) = 1;
  }
  return result;
}

BOOL ServerClientState::isNotificationRegistered_sync(uint64_t *a1, const void **a2)
{
  uint64_t v2 = *a1;
  return v2 + 40 != (void)std::__tree<std::string>::find<std::string>(*a1 + 32, a2);
}

void ServerClientState::registerNotification_sync(void **a1, int a2, const void **a3)
{
  size_t v4 = *a1;
  size_t v5 = *a3;
  if (*a3) {
    CFRetain(v5);
  }
  v6.size_t length = CFArrayGetCount((CFArrayRef)v5);
  if (a2) {
    long long v7 = (void (__cdecl *)(const void *, void *))ServerClientState::State::registerNotificationApplier;
  }
  else {
    long long v7 = (void (__cdecl *)(const void *, void *))ServerClientState::State::unregisterNotificationApplier;
  }
  v6.location = 0;
  CFArrayApplyFunction((CFArrayRef)v5, v6, v7, v4);
  if (v5) {
    CFRelease(v5);
  }
}

void sub_1C58B9728(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ctu::cf::CFSharedRef<__CFArray const>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void ServerClientState::getName(ServerClientState *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v2 = *(long long **)this;
  if (*(char *)(*(void *)this + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)v2, *((void *)v2 + 1));
  }
  else
  {
    long long v3 = *v2;
    a2->__r_.__value_.__r.__words[2] = *((void *)v2 + 2);
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v3;
  }
}

void ServerClientState::State::registerNotificationApplier(ServerClientState::State *this, uint64_t **a2, void *a3)
{
  long long v6 = 0uLL;
  uint64_t v7 = 0;
  ctu::cf::assign();
  *(_OWORD *)std::string __p = 0uLL;
  uint64_t v5 = 0;
  std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>(a2 + 4, (const void **)__p, (uint64_t)__p);
  if (SHIBYTE(v5) < 0) {
    operator delete(__p[0]);
  }
}

void sub_1C58B97E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ServerClientState::State::unregisterNotificationApplier(ServerClientState::State *this, void *a2, void *a3)
{
  long long v14 = 0uLL;
  uint64_t v15 = 0;
  ctu::cf::assign();
  *(_OWORD *)std::string __p = 0uLL;
  uint64_t v13 = 0;
  size_t v4 = (uint64_t **)(a2 + 4);
  uint64_t v5 = std::__tree<std::string>::find<std::string>((uint64_t)(a2 + 4), (const void **)__p);
  long long v6 = v5;
  if (a2 + 5 != v5)
  {
    uint64_t v7 = (uint64_t *)v5[1];
    if (v7)
    {
      do
      {
        long long v8 = v7;
        uint64_t v7 = (uint64_t *)*v7;
      }
      while (v7);
    }
    else
    {
      xpc_object_t v9 = v5;
      do
      {
        long long v8 = (uint64_t *)v9[2];
        BOOL v10 = *v8 == (void)v9;
        xpc_object_t v9 = v8;
      }
      while (!v10);
    }
    if (*v4 == v5) {
      *size_t v4 = v8;
    }
    xpc_object_t v11 = (uint64_t *)a2[5];
    --a2[6];
    std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v11, v6);
    if (*((char *)v6 + 55) < 0) {
      operator delete((void *)v6[4]);
    }
    operator delete(v6);
  }
  if (SHIBYTE(v13) < 0) {
    operator delete(__p[0]);
  }
}

void sub_1C58B9918(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<ServerClientState::State *,std::shared_ptr<ServerClientState::State>::__shared_ptr_default_delete<ServerClientState::State,ServerClientState::State>,std::allocator<ServerClientState::State>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<ServerClientState::State *,std::shared_ptr<ServerClientState::State>::__shared_ptr_default_delete<ServerClientState::State,ServerClientState::State>,std::allocator<ServerClientState::State>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 24);
  if (v1)
  {
    std::__tree<std::string>::destroy(v1 + 32, *(char **)(v1 + 40));
    if (*(char *)(v1 + 23) < 0)
    {
      operator delete(*(void **)v1);
      uint64_t v2 = (void *)v1;
    }
    else
    {
      uint64_t v2 = (void *)v1;
    }
    operator delete(v2);
  }
}

uint64_t std::__shared_ptr_pointer<ServerClientState::State *,std::shared_ptr<ServerClientState::State>::__shared_ptr_default_delete<ServerClientState::State,ServerClientState::State>,std::allocator<ServerClientState::State>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x80000001C59A3CF6) {
    return a1 + 24;
  }
  if (((v3 & 0x80000001C59A3CF6 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000001C59A3CF6)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001C59A3CF6 & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 24;
  }
  return 0;
}

uint64_t awd::metrics::protobuf_ShutdownFile_CCMetricsABM_2eproto(awd::metrics *this)
{
  if (awd::metrics::CommCenterBasebandBootTime::default_instance_) {
    (*(void (**)(uint64_t))(*(void *)awd::metrics::CommCenterBasebandBootTime::default_instance_ + 8))(awd::metrics::CommCenterBasebandBootTime::default_instance_);
  }
  if (awd::metrics::CrashReasonType::default_instance_) {
    (*(void (**)(uint64_t))(*(void *)awd::metrics::CrashReasonType::default_instance_ + 8))(awd::metrics::CrashReasonType::default_instance_);
  }
  if (awd::metrics::CommCenterBasebanCrash::default_instance_) {
    (*(void (**)(uint64_t))(*(void *)awd::metrics::CommCenterBasebanCrash::default_instance_ + 8))(awd::metrics::CommCenterBasebanCrash::default_instance_);
  }
  if (awd::metrics::CommCenterBasebandTrace::default_instance_) {
    (*(void (**)(uint64_t))(*(void *)awd::metrics::CommCenterBasebandTrace::default_instance_ + 8))(awd::metrics::CommCenterBasebandTrace::default_instance_);
  }
  if (awd::metrics::CommCenterNVMSync::default_instance_) {
    (*(void (**)(uint64_t))(*(void *)awd::metrics::CommCenterNVMSync::default_instance_ + 8))(awd::metrics::CommCenterNVMSync::default_instance_);
  }
  if (awd::metrics::CommCenterAccessoryInformation::default_instance_) {
    (*(void (**)(uint64_t))(*(void *)awd::metrics::CommCenterAccessoryInformation::default_instance_ + 8))(awd::metrics::CommCenterAccessoryInformation::default_instance_);
  }
  uint64_t result = awd::metrics::MetricsCCBasebandReset::default_instance_;
  if (awd::metrics::MetricsCCBasebandReset::default_instance_)
  {
    uint64_t v2 = *(uint64_t (**)(void))(*(void *)awd::metrics::MetricsCCBasebandReset::default_instance_ + 8);
    return v2();
  }
  return result;
}

void awd::metrics::protobuf_AddDesc_CCMetricsABM_2eproto(awd::metrics *this, uint64_t a2, uint64_t a3, const char *a4)
{
  if ((awd::metrics::protobuf_AddDesc_CCMetricsABM_2eproto(void)::already_here & 1) == 0)
  {
    awd::metrics::protobuf_AddDesc_CCMetricsABM_2eproto(void)::already_here = 1;
    wireless_diagnostics::google::protobuf::internal::VerifyVersion((wireless_diagnostics::google::protobuf::internal *)0x1E9808, 2005000, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices_Manager/AppleBasebandManager/BasebandManager/Server/AWD/Generated/CCMetricsABM.pb.cc", a4);
    size_t v4 = operator new(0x30uLL);
    v4[4] = 0;
    *((_DWORD *)v4 + 10) = 0;
    v4[1] = 0;
    uint64_t v4[2] = 0;
    *size_t v4 = &unk_1F20FAB10;
    *(void *)((char *)v4 + 21) = 0;
    awd::metrics::CommCenterBasebandBootTime::default_instance_ = (uint64_t)v4;
    uint64_t v5 = operator new(0x28uLL);
    uint64_t v6 = MEMORY[0x1E4FBA920];
    void *v5 = &unk_1F20FAB88;
    v5[1] = v6;
    v5[3] = 0;
    v5[2] = v6;
    *((_DWORD *)v5 + 8) = 0;
    awd::metrics::CrashReasonType::default_instance_ = (uint64_t)v5;
    uint64_t v7 = operator new(0x30uLL);
    v7[5] = 0;
    *uint64_t v7 = &unk_1F20FAC00;
    v7[1] = 0;
    _DWORD v7[2] = 0;
    void v7[3] = 0;
    *((_DWORD *)v7 + 8) = 0;
    awd::metrics::CommCenterBasebanCrash::default_instance_ = (uint64_t)v7;
    long long v8 = operator new(0x28uLL);
    void *v8 = &unk_1F20FAC78;
    v8[1] = 0;
    void v8[2] = v6;
    v8[3] = v6;
    v8[4] = 0;
    awd::metrics::CommCenterBasebandTrace::default_instance_ = (uint64_t)v8;
    xpc_object_t v9 = operator new(0x28uLL);
    void v9[4] = 0;
    v9[1] = 0;
    uint64_t v9[2] = 0;
    *xpc_object_t v9 = &unk_1F20FACF0;
    *(void *)((char *)v9 + 22) = 0;
    awd::metrics::CommCenterNVMSync::default_instance_ = (uint64_t)v9;
    BOOL v10 = operator new(0x20uLL);
    *BOOL v10 = &unk_1F20FAD68;
    v10[1] = 0;
    v10[2] = 0;
    void v10[3] = 0;
    awd::metrics::CommCenterAccessoryInformation::default_instance_ = (uint64_t)v10;
    xpc_object_t v11 = operator new(0x48uLL);
    *xpc_object_t v11 = &unk_1F20FADE0;
    v11[1] = v6;
    *((_WORD *)v11 + 20) = 0;
    v11[2] = 0;
    v11[3] = v6;
    v11[4] = v6;
    *((_DWORD *)v11 + 11) = 0;
    void v11[6] = v6;
    v11[7] = 0;
    v11[8] = 0;
    awd::metrics::MetricsCCBasebandReset::default_instance_ = (uint64_t)v11;
    MEMORY[0x1F4181D28](awd::metrics::protobuf_ShutdownFile_CCMetricsABM_2eproto);
  }
}

uint64_t awd::metrics::CommCenterBasebandBootTime::CommCenterBasebandBootTime(uint64_t this)
{
  *(void *)(this + 32) = 0;
  *(_DWORD *)(this + 40) = 0;
  *(void *)(this + 8) = 0;
  *(void *)(this + 16) = 0;
  *(void *)this = &unk_1F20FAB10;
  *(void *)(this + 21) = 0;
  return this;
}

{
  *(void *)(this + 32) = 0;
  *(_DWORD *)(this + 40) = 0;
  *(void *)(this + 8) = 0;
  *(void *)(this + 16) = 0;
  *(void *)this = &unk_1F20FAB10;
  *(void *)(this + 21) = 0;
  return this;
}

uint64_t awd::metrics::CrashReasonType::CrashReasonType(uint64_t this)
{
  uint64_t v1 = MEMORY[0x1E4FBA920];
  *(void *)this = &unk_1F20FAB88;
  *(void *)(this + 8) = v1;
  *(void *)(this + 16) = v1;
  *(void *)(this + 24) = 0;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

{
  uint64_t v1;

  uint64_t v1 = MEMORY[0x1E4FBA920];
  *(void *)this = &unk_1F20FAB88;
  *(void *)(this + 8) = v1;
  *(void *)(this + 16) = v1;
  *(void *)(this + 24) = 0;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

uint64_t awd::metrics::CommCenterBasebanCrash::CommCenterBasebanCrash(uint64_t this)
{
  *(void *)(this + 40) = 0;
  *(void *)this = &unk_1F20FAC00;
  *(void *)(this + 8) = 0;
  *(void *)(this + 16) = 0;
  *(void *)(this + 24) = 0;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

{
  *(void *)(this + 40) = 0;
  *(void *)this = &unk_1F20FAC00;
  *(void *)(this + 8) = 0;
  *(void *)(this + 16) = 0;
  *(void *)(this + 24) = 0;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

void *awd::metrics::CommCenterBasebandTrace::CommCenterBasebandTrace(void *this)
{
  uint64_t v1 = MEMORY[0x1E4FBA920];
  *this = &unk_1F20FAC78;
  this[1] = 0;
  this[2] = v1;
  this[3] = v1;
  this[4] = 0;
  return this;
}

{
  uint64_t v1;

  uint64_t v1 = MEMORY[0x1E4FBA920];
  *this = &unk_1F20FAC78;
  this[1] = 0;
  this[2] = v1;
  this[3] = v1;
  this[4] = 0;
  return this;
}

void *awd::metrics::CommCenterNVMSync::CommCenterNVMSync(void *this)
{
  this[4] = 0;
  this[1] = 0;
  this[2] = 0;
  *this = &unk_1F20FACF0;
  *(void *)((char *)this + 22) = 0;
  return this;
}

{
  this[4] = 0;
  this[1] = 0;
  this[2] = 0;
  *this = &unk_1F20FACF0;
  *(void *)((char *)this + 22) = 0;
  return this;
}

void *awd::metrics::CommCenterAccessoryInformation::CommCenterAccessoryInformation(void *this)
{
  *this = &unk_1F20FAD68;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  return this;
}

{
  *this = &unk_1F20FAD68;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  return this;
}

double awd::metrics::MetricsCCBasebandReset::MetricsCCBasebandReset(awd::metrics::MetricsCCBasebandReset *this)
{
  uint64_t v1 = MEMORY[0x1E4FBA920];
  *(void *)this = &unk_1F20FADE0;
  *((void *)this + 1) = v1;
  *((_WORD *)this + 20) = 0;
  double result = 0.0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = v1;
  *((void *)this + 4) = v1;
  *((_DWORD *)this + 11) = 0;
  *((void *)this + 6) = v1;
  *((void *)this + 7) = 0;
  *((void *)this + 8) = 0;
  return result;
}

{
  uint64_t v1;
  double result;

  uint64_t v1 = MEMORY[0x1E4FBA920];
  *(void *)this = &unk_1F20FADE0;
  *((void *)this + 1) = v1;
  *((_WORD *)this + 20) = 0;
  double result = 0.0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = v1;
  *((void *)this + 4) = v1;
  *((_DWORD *)this + 11) = 0;
  *((void *)this + 6) = v1;
  *((void *)this + 7) = 0;
  *((void *)this + 8) = 0;
  return result;
}

BOOL awd::metrics::CommCenterNVMSyncReason_IsValid(awd::metrics *this)
{
  return this < 6;
}

uint64_t awd::metrics::CommCenterBasebandBootTime::SharedCtor(uint64_t this)
{
  *(void *)(this + 32) = 0;
  *(_DWORD *)(this + 40) = 0;
  *(void *)(this + 8) = 0;
  *(void *)(this + 16) = 0;
  *(void *)(this + 21) = 0;
  return this;
}

awd::metrics::CommCenterBasebandBootTime *awd::metrics::CommCenterBasebandBootTime::CommCenterBasebandBootTime(awd::metrics::CommCenterBasebandBootTime *this, const awd::metrics::CommCenterBasebandBootTime *a2)
{
  *((void *)this + 4) = 0;
  *((_DWORD *)this + 10) = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *(void *)this = &unk_1F20FAB10;
  *(void *)((char *)this + 21) = 0;
  awd::metrics::CommCenterBasebandBootTime::MergeFrom(this, a2);
  return this;
}

{
  *((void *)this + 4) = 0;
  *((_DWORD *)this + 10) = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *(void *)this = &unk_1F20FAB10;
  *(void *)((char *)this + 21) = 0;
  awd::metrics::CommCenterBasebandBootTime::MergeFrom(this, a2);
  return this;
}

void sub_1C58BA024(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

void awd::metrics::CommCenterBasebandBootTime::MergeFrom(awd::metrics::CommCenterBasebandBootTime *this, const awd::metrics::CommCenterBasebandBootTime *a2)
{
  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v10);
  }
  LOBYTE(v4) = *((unsigned char *)a2 + 40);
  if ((_BYTE)v4)
  {
    if (*((unsigned char *)a2 + 40))
    {
      uint64_t v6 = *((void *)a2 + 1);
      *((_DWORD *)this + 10) |= 1u;
      *((void *)this + 1) = v6;
      int v4 = *((_DWORD *)a2 + 10);
      if ((v4 & 2) == 0)
      {
LABEL_6:
        if ((v4 & 4) == 0) {
          goto LABEL_7;
        }
        goto LABEL_13;
      }
    }
    else if ((*((unsigned char *)a2 + 40) & 2) == 0)
    {
      goto LABEL_6;
    }
    uint64_t v7 = *((void *)a2 + 2);
    *((_DWORD *)this + 10) |= 2u;
    *((void *)this + 2) = v7;
    int v4 = *((_DWORD *)a2 + 10);
    if ((v4 & 4) == 0)
    {
LABEL_7:
      if ((v4 & 8) == 0) {
        goto LABEL_8;
      }
      goto LABEL_14;
    }
LABEL_13:
    int v8 = *((_DWORD *)a2 + 6);
    *((_DWORD *)this + 10) |= 4u;
    *((_DWORD *)this + 6) = v8;
    int v4 = *((_DWORD *)a2 + 10);
    if ((v4 & 8) == 0)
    {
LABEL_8:
      if ((v4 & 0x10) == 0) {
        return;
      }
      goto LABEL_9;
    }
LABEL_14:
    char v9 = *((unsigned char *)a2 + 28);
    *((_DWORD *)this + 10) |= 8u;
    *((unsigned char *)this + 28) = v9;
    if ((*((_DWORD *)a2 + 10) & 0x10) == 0) {
      return;
    }
LABEL_9:
    int v5 = *((_DWORD *)a2 + 8);
    *((_DWORD *)this + 10) |= 0x10u;
    *((_DWORD *)this + 8) = v5;
  }
}

void sub_1C58BA14C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1C58BA160(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1C58BA1C8(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

void awd::metrics::CommCenterBasebandBootTime::~CommCenterBasebandBootTime(awd::metrics::CommCenterBasebandBootTime *this)
{
  *(void *)this = &unk_1F20FAB10;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  *(void *)this = &unk_1F20FAB10;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  void *v1;
  uint64_t vars8;

  *(void *)this = &unk_1F20FAB10;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);

  operator delete(v1);
}

uint64_t awd::metrics::CommCenterBasebandBootTime::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 36) = a2;
  return this;
}

uint64_t awd::metrics::CommCenterBasebandBootTime::default_instance(awd::metrics::CommCenterBasebandBootTime *this, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t result = awd::metrics::CommCenterBasebandBootTime::default_instance_;
  if (!awd::metrics::CommCenterBasebandBootTime::default_instance_)
  {
    awd::metrics::protobuf_AddDesc_CCMetricsABM_2eproto(0, a2, a3, a4);
    return awd::metrics::CommCenterBasebandBootTime::default_instance_;
  }
  return result;
}

void *awd::metrics::CommCenterBasebandBootTime::New(awd::metrics::CommCenterBasebandBootTime *this)
{
  uint64_t result = operator new(0x30uLL);
  result[4] = 0;
  *((_DWORD *)result + 10) = 0;
  result[1] = 0;
  result[2] = 0;
  *uint64_t result = &unk_1F20FAB10;
  *(void *)((char *)result + 21) = 0;
  return result;
}

uint64_t awd::metrics::CommCenterBasebandBootTime::Clear(uint64_t this)
{
  if (*(unsigned char *)(this + 40))
  {
    *(_DWORD *)(this + 32) = 0;
    *(void *)(this + 8) = 0;
    *(void *)(this + 16) = 0;
    *(void *)(this + 21) = 0;
  }
  *(_DWORD *)(this + 40) = 0;
  return this;
}

uint64_t awd::metrics::CommCenterBasebandBootTime::MergePartialFromCodedStream(awd::metrics::CommCenterBasebandBootTime *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  int v4 = (unint64_t *)((char *)this + 8);
  int v5 = (unint64_t *)((char *)this + 16);
  uint64_t v6 = (unsigned int *)((char *)this + 24);
  uint64_t v7 = (unsigned int *)((char *)this + 32);
  while (1)
  {
    int v8 = (char *)*((void *)a2 + 1);
    if ((unint64_t)v8 < *((void *)a2 + 2) && (*v8 & 0x80000000) == 0)
    {
      unint64_t TagFallback = *v8;
      *((_DWORD *)a2 + 8) = TagFallback;
      *((void *)a2 + 1) = v8 + 1;
      if (!TagFallback) {
        return 1;
      }
      goto LABEL_7;
    }
    unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
    *((_DWORD *)a2 + 8) = TagFallback;
    if (!TagFallback) {
      return 1;
    }
LABEL_7:
    switch(TagFallback >> 3)
    {
      case 1u:
        int v10 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_24;
        }
        char v12 = (char *)*((void *)a2 + 1);
        unint64_t v11 = *((void *)a2 + 2);
        if ((unint64_t)v12 >= v11 || *v12 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2, v4);
          if (!result) {
            return result;
          }
          uint64_t v13 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v11 = *((void *)a2 + 2);
          *((_DWORD *)this + 10) |= 1u;
          if ((unint64_t)v13 >= v11) {
            continue;
          }
        }
        else
        {
          *int v4 = *v12;
          uint64_t v13 = v12 + 1;
          *((void *)a2 + 1) = v13;
          *((_DWORD *)this + 10) |= 1u;
          if ((unint64_t)v13 >= v11) {
            continue;
          }
        }
        if (*v13 != 16) {
          continue;
        }
        long long v14 = v13 + 1;
        *((void *)a2 + 1) = v14;
        if ((unint64_t)v14 >= v11) {
          goto LABEL_36;
        }
        goto LABEL_33;
      case 2u:
        int v10 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_24;
        }
        long long v14 = (char *)*((void *)a2 + 1);
        unint64_t v11 = *((void *)a2 + 2);
        if ((unint64_t)v14 >= v11) {
          goto LABEL_36;
        }
LABEL_33:
        if (*v14 < 0)
        {
LABEL_36:
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2, v5);
          if (!result) {
            return result;
          }
          size_t v18 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v11 = *((void *)a2 + 2);
          *((_DWORD *)this + 10) |= 2u;
          if ((unint64_t)v18 >= v11) {
            continue;
          }
        }
        else
        {
          unint64_t *v5 = *v14;
          size_t v18 = v14 + 1;
          *((void *)a2 + 1) = v18;
          *((_DWORD *)this + 10) |= 2u;
          if ((unint64_t)v18 >= v11) {
            continue;
          }
        }
        if (*v18 != 24) {
          continue;
        }
        uint64_t v15 = v18 + 1;
        *((void *)a2 + 1) = v15;
        if ((unint64_t)v15 >= v11) {
          goto LABEL_43;
        }
LABEL_40:
        if (*v15 < 0)
        {
LABEL_43:
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v6);
          if (!result) {
            return result;
          }
          size_t v19 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v11 = *((void *)a2 + 2);
          *((_DWORD *)this + 10) |= 4u;
          if ((unint64_t)v19 >= v11) {
            continue;
          }
        }
        else
        {
          unsigned int *v6 = *v15;
          size_t v19 = v15 + 1;
          *((void *)a2 + 1) = v19;
          *((_DWORD *)this + 10) |= 4u;
          if ((unint64_t)v19 >= v11) {
            continue;
          }
        }
        if (*v19 != 32) {
          continue;
        }
        int v16 = v19 + 1;
        *((void *)a2 + 1) = v16;
        unsigned int v26 = -1431655766;
        if ((unint64_t)v16 >= v11) {
          goto LABEL_49;
        }
LABEL_47:
        if (*v16 < 0)
        {
LABEL_49:
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v26);
          if (!result) {
            return result;
          }
          unsigned int v20 = v26;
          uint64_t v21 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v11 = *((void *)a2 + 2);
        }
        else
        {
          unsigned int v20 = *v16;
          uint64_t v21 = v16 + 1;
          *((void *)a2 + 1) = v21;
        }
        *((unsigned char *)this + 28) = v20 != 0;
        *((_DWORD *)this + 10) |= 8u;
        if ((unint64_t)v21 >= v11 || *v21 != 40) {
          continue;
        }
        char v17 = v21 + 1;
        *((void *)a2 + 1) = v17;
        if ((unint64_t)v17 >= v11) {
          goto LABEL_57;
        }
LABEL_54:
        if (*v17 < 0)
        {
LABEL_57:
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v7);
          if (!result) {
            return result;
          }
          uint64_t v24 = *((void *)a2 + 1);
          uint64_t v23 = *((void *)a2 + 2);
          *((_DWORD *)this + 10) |= 0x10u;
          if (v24 != v23) {
            continue;
          }
        }
        else
        {
          *uint64_t v7 = *v17;
          char v22 = (unsigned __int8 *)(v17 + 1);
          *((void *)a2 + 1) = v22;
          *((_DWORD *)this + 10) |= 0x10u;
          if (v22 != (unsigned __int8 *)v11) {
            continue;
          }
        }
        if (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10))
        {
          *((_DWORD *)a2 + 8) = 0;
          uint64_t result = 1;
          *((unsigned char *)a2 + 36) = 1;
          return result;
        }
        break;
      case 3u:
        int v10 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_24;
        }
        uint64_t v15 = (char *)*((void *)a2 + 1);
        unint64_t v11 = *((void *)a2 + 2);
        if ((unint64_t)v15 >= v11) {
          goto LABEL_43;
        }
        goto LABEL_40;
      case 4u:
        int v10 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_24;
        }
        int v16 = (char *)*((void *)a2 + 1);
        unint64_t v11 = *((void *)a2 + 2);
        unsigned int v26 = -1431655766;
        if ((unint64_t)v16 >= v11) {
          goto LABEL_49;
        }
        goto LABEL_47;
      case 5u:
        int v10 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_24;
        }
        char v17 = (char *)*((void *)a2 + 1);
        unint64_t v11 = *((void *)a2 + 2);
        if ((unint64_t)v17 >= v11) {
          goto LABEL_57;
        }
        goto LABEL_54;
      default:
        int v10 = TagFallback & 7;
LABEL_24:
        if (v10 == 4) {
          return 1;
        }
        if (wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback))continue; {
        return 0;
        }
    }
  }
}

uint64_t awd::metrics::CommCenterBasebandBootTime::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = this;
  int v6 = *(_DWORD *)(this + 40);
  if (v6)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(void *)(this + 8), (uint64_t)a2, a4);
    int v6 = *(_DWORD *)(v5 + 40);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(void *)(v5 + 16), (uint64_t)a2, a4);
  int v6 = *(_DWORD *)(v5 + 40);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0) {
      goto LABEL_5;
    }
LABEL_10:
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, *(unsigned __int8 *)(v5 + 28), (uint64_t)a2, a4);
    if ((*(_DWORD *)(v5 + 40) & 0x10) == 0) {
      return this;
    }
    goto LABEL_11;
  }
LABEL_9:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, *(unsigned int *)(v5 + 24), (uint64_t)a2, a4);
  int v6 = *(_DWORD *)(v5 + 40);
  if ((v6 & 8) != 0) {
    goto LABEL_10;
  }
LABEL_5:
  if ((v6 & 0x10) == 0) {
    return this;
  }
LABEL_11:
  uint64_t v7 = *(unsigned int *)(v5 + 32);

  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, v7, (uint64_t)a2, a4);
}

uint64_t awd::metrics::CommCenterBasebandBootTime::ByteSize(awd::metrics::CommCenterBasebandBootTime *this)
{
  LOBYTE(v2) = *((unsigned char *)this + 40);
  if (!(_BYTE)v2)
  {
    uint64_t v3 = 0;
    goto LABEL_6;
  }
  if (*((unsigned char *)this + 40))
  {
    LODWORD(v3) = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*((wireless_diagnostics::google::protobuf::io::CodedOutputStream **)this
                                                                                              + 1))
                + 1;
    int v2 = *((_DWORD *)this + 10);
    if ((v2 & 2) == 0) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
  LODWORD(v3) = 0;
  if ((*((unsigned char *)this + 40) & 2) != 0)
  {
LABEL_8:
    LODWORD(v3) = v3
                + wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*((wireless_diagnostics::google::protobuf::io::CodedOutputStream **)this
                                                                                              + 2))
                + 1;
    int v2 = *((_DWORD *)this + 10);
  }
LABEL_9:
  if ((v2 & 4) != 0)
  {
    uint64_t v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 6);
    if (v5 >= 0x80)
    {
      int v6 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5);
      int v7 = *((_DWORD *)this + 10);
      LODWORD(v3) = v6 + 1 + v3;
      if ((v7 & 8) != 0) {
        uint64_t v3 = (v3 + 2);
      }
      else {
        uint64_t v3 = v3;
      }
      if ((v7 & 0x10) != 0) {
        goto LABEL_25;
      }
    }
    else
    {
      LODWORD(v3) = v3 + 2;
      if ((v2 & 8) != 0) {
        uint64_t v3 = (v3 + 2);
      }
      else {
        uint64_t v3 = v3;
      }
      if ((v2 & 0x10) != 0) {
        goto LABEL_25;
      }
    }
LABEL_6:
    *((_DWORD *)this + 9) = v3;
    return v3;
  }
  if ((v2 & 8) != 0) {
    uint64_t v3 = (v3 + 2);
  }
  else {
    uint64_t v3 = v3;
  }
  if ((v2 & 0x10) == 0) {
    goto LABEL_6;
  }
LABEL_25:
  int v8 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 8);
  if (v8 >= 0x80) {
    uint64_t v9 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v8)
  }
       + 1
       + v3;
  else {
    uint64_t v9 = (v3 + 2);
  }
  *((_DWORD *)this + 9) = v9;
  return v9;
}

void awd::metrics::CommCenterBasebandBootTime::CopyFrom(awd::metrics::CommCenterBasebandBootTime *this, const awd::metrics::CommCenterBasebandBootTime *a2)
{
  if (a2 != this)
  {
    (*(void (**)(awd::metrics::CommCenterBasebandBootTime *))(*(void *)this + 32))(this);
    awd::metrics::CommCenterBasebandBootTime::MergeFrom(this, a2);
  }
}

uint64_t awd::metrics::CommCenterBasebandBootTime::IsInitialized(awd::metrics::CommCenterBasebandBootTime *this)
{
  return 1;
}

uint64_t awd::metrics::CommCenterBasebandBootTime::Swap(uint64_t this, awd::metrics::CommCenterBasebandBootTime *a2)
{
  if (a2 != (awd::metrics::CommCenterBasebandBootTime *)this)
  {
    uint64_t v2 = *(void *)(this + 8);
    *(void *)(this + 8) = *((void *)a2 + 1);
    *((void *)a2 + 1) = v2;
    uint64_t v3 = *(void *)(this + 16);
    *(void *)(this + 16) = *((void *)a2 + 2);
    *((void *)a2 + 2) = v3;
    LODWORD(v3) = *(_DWORD *)(this + 24);
    *(_DWORD *)(this + 24) = *((_DWORD *)a2 + 6);
    *((_DWORD *)a2 + 6) = v3;
    LOBYTE(v3) = *(unsigned char *)(this + 28);
    *(unsigned char *)(this + 28) = *((unsigned char *)a2 + 28);
    *((unsigned char *)a2 + 28) = v3;
    LODWORD(v3) = *(_DWORD *)(this + 32);
    *(_DWORD *)(this + 32) = *((_DWORD *)a2 + 8);
    *((_DWORD *)a2 + 8) = v3;
    LODWORD(v3) = *(_DWORD *)(this + 40);
    *(_DWORD *)(this + 40) = *((_DWORD *)a2 + 10);
    *((_DWORD *)a2 + 10) = v3;
    LODWORD(v3) = *(_DWORD *)(this + 36);
    *(_DWORD *)(this + 36) = *((_DWORD *)a2 + 9);
    *((_DWORD *)a2 + 9) = v3;
  }
  return this;
}

char *awd::metrics::CommCenterBasebandBootTime::GetTypeName@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = (char *)operator new(0x28uLL);
  *(void *)a1 = result;
  *(_OWORD *)(a1 + 8) = xmmword_1C59A3D50;
  strcpy(result, "awd.metrics.CommCenterBasebandBootTime");
  return result;
}

uint64_t awd::metrics::CrashReasonType::SharedCtor(uint64_t this)
{
  uint64_t v1 = MEMORY[0x1E4FBA920];
  *(void *)(this + 16) = MEMORY[0x1E4FBA920];
  *(void *)(this + 24) = 0;
  *(void *)(this + 8) = v1;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

awd::metrics::CrashReasonType *awd::metrics::CrashReasonType::CrashReasonType(awd::metrics::CrashReasonType *this, const awd::metrics::CrashReasonType *a2)
{
  uint64_t v3 = MEMORY[0x1E4FBA920];
  *(void *)this = &unk_1F20FAB88;
  *((void *)this + 1) = v3;
  *((void *)this + 2) = v3;
  *((void *)this + 3) = 0;
  *((_DWORD *)this + 8) = 0;
  awd::metrics::CrashReasonType::MergeFrom(this, a2);
  return this;
}

{
  uint64_t v3;

  uint64_t v3 = MEMORY[0x1E4FBA920];
  *(void *)this = &unk_1F20FAB88;
  *((void *)this + 1) = v3;
  *((void *)this + 2) = v3;
  *((void *)this + 3) = 0;
  *((_DWORD *)this + 8) = 0;
  awd::metrics::CrashReasonType::MergeFrom(this, a2);
  return this;
}

void sub_1C58BAA94(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

void awd::metrics::CrashReasonType::MergeFrom(awd::metrics::CrashReasonType *this, const awd::metrics::CrashReasonType *a2)
{
  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v19);
  }
  if (*((unsigned char *)a2 + 32))
  {
    int v4 = (void **)MEMORY[0x1E4FBA920];
    if (*((unsigned char *)a2 + 32))
    {
      uint64_t v5 = (void **)*((void *)a2 + 1);
      *((_DWORD *)this + 8) |= 1u;
      int v6 = (void **)*((void *)this + 1);
      if (v6 == v4)
      {
        int v6 = (void **)operator new(0x18uLL);
        v6[1] = 0;
        v6[2] = 0;
        unsigned int *v6 = 0;
        *((void *)this + 1) = v6;
      }
      if (v6 != v5)
      {
        char v7 = *((unsigned char *)v5 + 23);
        if ((*((char *)v6 + 23) & 0x80000000) == 0)
        {
          if ((*((unsigned char *)v5 + 23) & 0x80) != 0)
          {
            std::string::__assign_no_alias<true>(v6, *v5, (size_t)v5[1]);
            int v9 = *((_DWORD *)a2 + 8);
            if ((v9 & 2) == 0)
            {
LABEL_21:
              if ((v9 & 4) != 0)
              {
                uint64_t v13 = (void **)*((void *)a2 + 2);
                *((_DWORD *)this + 8) |= 4u;
                long long v14 = (void **)*((void *)this + 2);
                if (v14 == v4)
                {
                  long long v14 = (void **)operator new(0x18uLL);
                  v14[1] = 0;
                  uint64_t v14[2] = 0;
                  char *v14 = 0;
                  *((void *)this + 2) = v14;
                }
                if (v14 != v13)
                {
                  char v15 = *((unsigned char *)v13 + 23);
                  if (*((char *)v14 + 23) < 0)
                  {
                    if (v15 >= 0) {
                      char v17 = v13;
                    }
                    else {
                      char v17 = *v13;
                    }
                    if (v15 >= 0) {
                      size_t v18 = *((unsigned __int8 *)v13 + 23);
                    }
                    else {
                      size_t v18 = (size_t)v13[1];
                    }
                    std::string::__assign_no_alias<false>(v14, v17, v18);
                  }
                  else if ((*((unsigned char *)v13 + 23) & 0x80) != 0)
                  {
                    std::string::__assign_no_alias<true>(v14, *v13, (size_t)v13[1]);
                  }
                  else
                  {
                    long long v16 = *(_OWORD *)v13;
                    uint64_t v14[2] = v13[2];
                    *(_OWORD *)long long v14 = v16;
                  }
                }
              }
              return;
            }
          }
          else
          {
            long long v8 = *(_OWORD *)v5;
            v6[2] = v5[2];
            *(_OWORD *)int v6 = v8;
            int v9 = *((_DWORD *)a2 + 8);
            if ((v9 & 2) == 0) {
              goto LABEL_21;
            }
          }
LABEL_20:
          int v12 = *((_DWORD *)a2 + 6);
          *((_DWORD *)this + 8) |= 2u;
          *((_DWORD *)this + 6) = v12;
          int v9 = *((_DWORD *)a2 + 8);
          goto LABEL_21;
        }
        if (v7 >= 0) {
          int v10 = v5;
        }
        else {
          int v10 = *v5;
        }
        if (v7 >= 0) {
          size_t v11 = *((unsigned __int8 *)v5 + 23);
        }
        else {
          size_t v11 = (size_t)v5[1];
        }
        std::string::__assign_no_alias<false>(v6, v10, v11);
      }
    }
    int v9 = *((_DWORD *)a2 + 8);
    if ((v9 & 2) == 0) {
      goto LABEL_21;
    }
    goto LABEL_20;
  }
}

void sub_1C58BAC88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1C58BAC9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1C58BAD04(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

void awd::metrics::CrashReasonType::~CrashReasonType(awd::metrics::CrashReasonType *this)
{
  *(void *)this = &unk_1F20FAB88;
  uint64_t v2 = *((void *)this + 1);
  uint64_t v3 = MEMORY[0x1E4FBA920];
  if (v2 == MEMORY[0x1E4FBA920] || v2 == 0)
  {
    uint64_t v5 = *((void *)this + 2);
    if (v5 != MEMORY[0x1E4FBA920] && v5 != 0)
    {
LABEL_20:
      if (*(char *)(v5 + 23) < 0) {
        operator delete(*(void **)v5);
      }
      operator delete((void *)v5);
      char v7 = this;
      goto LABEL_13;
    }
  }
  else
  {
    if (*(char *)(v2 + 23) < 0) {
      operator delete(*(void **)v2);
    }
    operator delete((void *)v2);
    uint64_t v5 = *((void *)this + 2);
    if (v5 != v3 && v5 != 0) {
      goto LABEL_20;
    }
  }
  char v7 = this;

LABEL_13:
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v7);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  wireless_diagnostics::google::protobuf::MessageLite *v7;
  uint64_t vars8;

  *(void *)this = &unk_1F20FAB88;
  uint64_t v2 = *((void *)this + 1);
  uint64_t v3 = MEMORY[0x1E4FBA920];
  if (v2 == MEMORY[0x1E4FBA920] || v2 == 0)
  {
    uint64_t v5 = *((void *)this + 2);
    if (v5 != MEMORY[0x1E4FBA920] && v5 != 0)
    {
LABEL_20:
      if (*(char *)(v5 + 23) < 0) {
        operator delete(*(void **)v5);
      }
      operator delete((void *)v5);
      char v7 = this;
      goto LABEL_13;
    }
  }
  else
  {
    if (*(char *)(v2 + 23) < 0) {
      operator delete(*(void **)v2);
    }
    operator delete((void *)v2);
    uint64_t v5 = *((void *)this + 2);
    if (v5 != v3 && v5 != 0) {
      goto LABEL_20;
    }
  }
  char v7 = this;

LABEL_13:
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v7);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  void *v7;
  uint64_t vars8;

  *(void *)this = &unk_1F20FAB88;
  uint64_t v2 = *((void *)this + 1);
  uint64_t v3 = MEMORY[0x1E4FBA920];
  if (v2 != MEMORY[0x1E4FBA920] && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0) {
      operator delete(*(void **)v2);
    }
    operator delete((void *)v2);
  }
  uint64_t v5 = *((void *)this + 2);
  if (v5 != v3 && v5 != 0)
  {
    if (*(char *)(v5 + 23) < 0) {
      operator delete(*(void **)v5);
    }
    operator delete((void *)v5);
  }
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);

  operator delete(v7);
}

void awd::metrics::CrashReasonType::SharedDtor(awd::metrics::CrashReasonType *this)
{
  uint64_t v2 = *((void *)this + 1);
  uint64_t v3 = MEMORY[0x1E4FBA920];
  if (v2 == MEMORY[0x1E4FBA920] || v2 == 0)
  {
    uint64_t v5 = *((void *)this + 2);
    if (v5 == MEMORY[0x1E4FBA920] || v5 == 0) {
      return;
    }
    goto LABEL_18;
  }
  if (*(char *)(v2 + 23) < 0) {
    operator delete(*(void **)v2);
  }
  operator delete((void *)v2);
  uint64_t v5 = *((void *)this + 2);
  if (v5 != v3 && v5 != 0)
  {
LABEL_18:
    if (*(char *)(v5 + 23) < 0)
    {
      operator delete(*(void **)v5);
      long long v8 = (void *)v5;
    }
    else
    {
      long long v8 = (void *)v5;
    }
    operator delete(v8);
  }
}

uint64_t awd::metrics::CrashReasonType::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 28) = a2;
  return this;
}

uint64_t awd::metrics::CrashReasonType::default_instance(awd::metrics::CrashReasonType *this, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t result = awd::metrics::CrashReasonType::default_instance_;
  if (!awd::metrics::CrashReasonType::default_instance_)
  {
    awd::metrics::protobuf_AddDesc_CCMetricsABM_2eproto(0, a2, a3, a4);
    return awd::metrics::CrashReasonType::default_instance_;
  }
  return result;
}

void *awd::metrics::CrashReasonType::New(awd::metrics::CrashReasonType *this)
{
  uint64_t result = operator new(0x28uLL);
  uint64_t v2 = MEMORY[0x1E4FBA920];
  *uint64_t result = &unk_1F20FAB88;
  result[1] = v2;
  result[2] = v2;
  result[3] = 0;
  *((_DWORD *)result + 8) = 0;
  return result;
}

uint64_t awd::metrics::CrashReasonType::Clear(uint64_t this)
{
  if (!*(unsigned char *)(this + 32)) {
    goto LABEL_12;
  }
  uint64_t v1 = MEMORY[0x1E4FBA920];
  if (*(unsigned char *)(this + 32))
  {
    uint64_t v2 = *(void *)(this + 8);
    if (v2 != MEMORY[0x1E4FBA920])
    {
      if (*(char *)(v2 + 23) < 0)
      {
        **(unsigned char **)uint64_t v2 = 0;
        *(void *)(v2 + 8) = 0;
        *(_DWORD *)(this + 24) = 0;
        if ((*(unsigned char *)(this + 32) & 4) == 0) {
          goto LABEL_12;
        }
        goto LABEL_7;
      }
      *(unsigned char *)uint64_t v2 = 0;
      *(unsigned char *)(v2 + 23) = 0;
    }
  }
  *(_DWORD *)(this + 24) = 0;
  if ((*(unsigned char *)(this + 32) & 4) == 0)
  {
LABEL_12:
    *(_DWORD *)(this + 32) = 0;
    return this;
  }
LABEL_7:
  uint64_t v3 = *(void *)(this + 16);
  if (v3 == v1) {
    goto LABEL_12;
  }
  if (*(char *)(v3 + 23) < 0)
  {
    **(unsigned char **)uint64_t v3 = 0;
    *(void *)(v3 + 8) = 0;
  }
  else
  {
    *(unsigned char *)uint64_t v3 = 0;
    *(unsigned char *)(v3 + 23) = 0;
  }
  *(_DWORD *)(this + 32) = 0;
  return this;
}

uint64_t awd::metrics::CrashReasonType::MergePartialFromCodedStream(awd::metrics::CrashReasonType *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  int v4 = (unsigned int *)((char *)this + 24);
  uint64_t v5 = MEMORY[0x1E4FBA920];
  while (1)
  {
    do
    {
      while (1)
      {
        while (1)
        {
          while (1)
          {
            int v6 = (char *)*((void *)a2 + 1);
            if ((unint64_t)v6 >= *((void *)a2 + 2) || *v6 < 0)
            {
              unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
              *((_DWORD *)a2 + 8) = TagFallback;
              if (!TagFallback) {
                return 1;
              }
            }
            else
            {
              unint64_t TagFallback = *v6;
              *((_DWORD *)a2 + 8) = TagFallback;
              *((void *)a2 + 1) = v6 + 1;
              if (!TagFallback) {
                return 1;
              }
            }
            unsigned int v8 = TagFallback >> 3;
            if (TagFallback >> 3 != 1) {
              break;
            }
            int v9 = TagFallback & 7;
            if (v9 != 2) {
              goto LABEL_32;
            }
            *((_DWORD *)this + 8) |= 1u;
            if (*((void *)this + 1) == v5)
            {
              int v12 = operator new(0x18uLL);
              v12[1] = 0;
              v12[2] = 0;
              void *v12 = 0;
              *((void *)this + 1) = v12;
            }
            uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
            if (!result) {
              return result;
            }
            long long v14 = (unsigned char *)*((void *)a2 + 1);
            unint64_t v13 = *((void *)a2 + 2);
            if ((unint64_t)v14 < v13 && *v14 == 16)
            {
              char v15 = v14 + 1;
              *((void *)a2 + 1) = v15;
              goto LABEL_27;
            }
          }
          if (v8 == 2) {
            break;
          }
          if (v8 == 3)
          {
            int v9 = TagFallback & 7;
            if (v9 == 2)
            {
              *((_DWORD *)this + 8) |= 4u;
              if (*((void *)this + 2) != v5) {
                goto LABEL_13;
              }
LABEL_12:
              int v10 = operator new(0x18uLL);
              v10[1] = 0;
              v10[2] = 0;
              *int v10 = 0;
              *((void *)this + 2) = v10;
              goto LABEL_13;
            }
          }
          else
          {
            int v9 = TagFallback & 7;
          }
LABEL_32:
          if (v9 == 4) {
            return 1;
          }
          if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) == 0)return 0; {
        }
          }
        int v9 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_32;
        }
        char v15 = (unsigned __int8 *)*((void *)a2 + 1);
        unint64_t v13 = *((void *)a2 + 2);
LABEL_27:
        if ((unint64_t)v15 < v13 && ((char)*v15 & 0x80000000) == 0) {
          break;
        }
        uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v4);
        if (!result) {
          return result;
        }
        long long v16 = (unsigned char *)*((void *)a2 + 1);
        unint64_t v18 = *((void *)a2 + 2);
        int v17 = *((_DWORD *)this + 8) | 2;
        *((_DWORD *)this + 8) = v17;
        if ((unint64_t)v16 < v18) {
          goto LABEL_37;
        }
      }
      *int v4 = *v15;
      long long v16 = v15 + 1;
      *((void *)a2 + 1) = v16;
      int v17 = *((_DWORD *)this + 8) | 2;
      *((_DWORD *)this + 8) = v17;
    }
    while ((unint64_t)v16 >= v13);
LABEL_37:
    if (*v16 == 26)
    {
      *((void *)a2 + 1) = v16 + 1;
      *((_DWORD *)this + 8) = v17 | 4;
      if (*((void *)this + 2) == v5) {
        goto LABEL_12;
      }
LABEL_13:
      uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
      if (!result) {
        return result;
      }
      if (*((void *)a2 + 1) == *((void *)a2 + 2)
        && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
      {
        break;
      }
    }
  }
  *((_DWORD *)a2 + 8) = 0;
  uint64_t result = 1;
  *((unsigned char *)a2 + 36) = 1;
  return result;
}

uint64_t awd::metrics::CrashReasonType::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = this;
  int v6 = *(_DWORD *)(this + 32);
  if ((v6 & 1) == 0)
  {
    if ((v6 & 2) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(unsigned int *)(v5 + 24), (uint64_t)a2, a4);
    if ((*(_DWORD *)(v5 + 32) & 4) == 0) {
      return this;
    }
    goto LABEL_7;
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  int v6 = *(_DWORD *)(v5 + 32);
  if ((v6 & 2) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v6 & 4) == 0) {
    return this;
  }
LABEL_7:

  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
}

uint64_t awd::metrics::CrashReasonType::ByteSize(awd::metrics::CrashReasonType *this)
{
  LOBYTE(v2) = *((unsigned char *)this + 32);
  if (!(_BYTE)v2)
  {
    uint64_t v3 = 0;
LABEL_6:
    *((_DWORD *)this + 7) = v3;
    return v3;
  }
  if ((*((unsigned char *)this + 32) & 1) == 0)
  {
    uint64_t v3 = 0;
    if ((*((unsigned char *)this + 32) & 2) == 0) {
      goto LABEL_22;
    }
    goto LABEL_18;
  }
  uint64_t v5 = *((void *)this + 1);
  int v6 = *(unsigned __int8 *)(v5 + 23);
  if ((v6 & 0x80u) == 0) {
    unint64_t v7 = *(unsigned __int8 *)(v5 + 23);
  }
  else {
    unint64_t v7 = *(void *)(v5 + 8);
  }
  if (v7 < 0x80)
  {
    if ((v6 & 0x80u) != 0) {
      int v6 = *(void *)(v5 + 8);
    }
    uint64_t v3 = (v6 + 2);
    if ((v2 & 2) == 0) {
      goto LABEL_22;
    }
LABEL_18:
    int v10 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 6);
    if (v10 >= 0x80)
    {
      int v11 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v10) + 1;
      int v2 = *((_DWORD *)this + 8);
    }
    else
    {
      int v11 = 2;
    }
    uint64_t v3 = (v11 + v3);
    goto LABEL_22;
  }
  int v8 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v7);
  int v9 = *(unsigned __int8 *)(v5 + 23);
  int v2 = *((_DWORD *)this + 8);
  if (*(char *)(v5 + 23) < 0) {
    int v9 = *(void *)(v5 + 8);
  }
  uint64_t v3 = (v8 + 1 + v9);
  if ((v2 & 2) != 0) {
    goto LABEL_18;
  }
LABEL_22:
  if ((v2 & 4) == 0) {
    goto LABEL_6;
  }
  uint64_t v12 = *((void *)this + 2);
  int v13 = *(unsigned __int8 *)(v12 + 23);
  char v14 = v13;
  uint64_t v15 = *(void *)(v12 + 8);
  if ((v13 & 0x80u) == 0) {
    unint64_t v16 = *(unsigned __int8 *)(v12 + 23);
  }
  else {
    unint64_t v16 = v15;
  }
  if (v16 >= 0x80)
  {
    int v17 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v16);
    int v13 = *(unsigned __int8 *)(v12 + 23);
    uint64_t v15 = *(void *)(v12 + 8);
    char v14 = *(unsigned char *)(v12 + 23);
  }
  else
  {
    int v17 = 1;
  }
  if (v14 < 0) {
    int v13 = v15;
  }
  int v18 = v3 + v17 + v13;
  *((_DWORD *)this + 7) = v18 + 1;
  return (v18 + 1);
}

void awd::metrics::CrashReasonType::CopyFrom(awd::metrics::CrashReasonType *this, const awd::metrics::CrashReasonType *a2)
{
  if (a2 != this)
  {
    (*(void (**)(awd::metrics::CrashReasonType *))(*(void *)this + 32))(this);
    awd::metrics::CrashReasonType::MergeFrom(this, a2);
  }
}

uint64_t awd::metrics::CrashReasonType::IsInitialized(awd::metrics::CrashReasonType *this)
{
  return 1;
}

uint64_t awd::metrics::CrashReasonType::Swap(uint64_t this, awd::metrics::CrashReasonType *a2)
{
  if (a2 != (awd::metrics::CrashReasonType *)this)
  {
    uint64_t v2 = *(void *)(this + 8);
    *(void *)(this + 8) = *((void *)a2 + 1);
    *((void *)a2 + 1) = v2;
    LODWORD(v2) = *(_DWORD *)(this + 24);
    *(_DWORD *)(this + 24) = *((_DWORD *)a2 + 6);
    *((_DWORD *)a2 + 6) = v2;
    uint64_t v3 = *(void *)(this + 16);
    *(void *)(this + 16) = *((void *)a2 + 2);
    *((void *)a2 + 2) = v3;
    LODWORD(v3) = *(_DWORD *)(this + 32);
    *(_DWORD *)(this + 32) = *((_DWORD *)a2 + 8);
    *((_DWORD *)a2 + 8) = v3;
    LODWORD(v3) = *(_DWORD *)(this + 28);
    *(_DWORD *)(this + 28) = *((_DWORD *)a2 + 7);
    *((_DWORD *)a2 + 7) = v3;
  }
  return this;
}

double awd::metrics::CrashReasonType::GetTypeName@<D0>(uint64_t a1@<X8>)
{
  uint64_t v3 = (char *)operator new(0x20uLL);
  *(void *)a1 = v3;
  *(_OWORD *)(a1 + 8) = xmmword_1C599E830;
  strcpy(v3, "awd.metrics.CrashReasonType");
  return *(double *)".CrashReasonType";
}

uint64_t awd::metrics::CommCenterBasebanCrash::SharedCtor(uint64_t this)
{
  *(void *)(this + 8) = 0;
  *(void *)(this + 40) = 0;
  return this;
}

uint64_t wireless_diagnostics::google::protobuf::RepeatedPtrField<awd::metrics::CrashReasonType>::~RepeatedPtrField(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 12);
  if (v2 >= 1)
  {
    for (uint64_t i = 0; i < v2; ++i)
    {
      uint64_t v4 = *(void *)(*(void *)a1 + 8 * i);
      if (v4)
      {
        (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
        int v2 = *(_DWORD *)(a1 + 12);
      }
    }
  }
  if (*(void *)a1) {
    operator delete[](*(void **)a1);
  }
  return a1;
}

awd::metrics::CommCenterBasebanCrash *awd::metrics::CommCenterBasebanCrash::CommCenterBasebanCrash(awd::metrics::CommCenterBasebanCrash *this, const awd::metrics::CommCenterBasebanCrash *a2)
{
  *((void *)this + 5) = 0;
  *(void *)this = &unk_1F20FAC00;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((_DWORD *)this + 8) = 0;
  awd::metrics::CommCenterBasebanCrash::MergeFrom(this, a2);
  return this;
}

{
  *((void *)this + 5) = 0;
  *(void *)this = &unk_1F20FAC00;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((_DWORD *)this + 8) = 0;
  awd::metrics::CommCenterBasebanCrash::MergeFrom(this, a2);
  return this;
}

void sub_1C58BB7F8(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::RepeatedPtrField<awd::metrics::CrashReasonType>::~RepeatedPtrField((uint64_t)v1 + 16);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

void awd::metrics::CommCenterBasebanCrash::MergeFrom(awd::metrics::CommCenterBasebanCrash *this, const awd::metrics::CommCenterBasebanCrash *a2)
{
  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v14);
  }
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((awd::metrics::CommCenterBasebanCrash *)((char *)this + 16));
  if (*((int *)a2 + 6) >= 1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = MEMORY[0x1E4FBA920];
    do
    {
      while (1)
      {
        int v9 = *(const awd::metrics::CrashReasonType **)(*((void *)a2 + 2) + 8 * v4);
        int v10 = *((_DWORD *)this + 7);
        uint64_t v11 = *((int *)this + 6);
        if ((int)v11 >= v10) {
          break;
        }
        uint64_t v12 = *((void *)this + 2);
        *((_DWORD *)this + 6) = v11 + 1;
        awd::metrics::CrashReasonType::MergeFrom(*(awd::metrics::CrashReasonType **)(v12 + 8 * v11), v9);
        if (++v4 >= *((int *)a2 + 6)) {
          goto LABEL_11;
        }
      }
      if (v10 == *((_DWORD *)this + 8))
      {
        wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((awd::metrics::CommCenterBasebanCrash *)((char *)this + 16));
        int v10 = *((_DWORD *)this + 7);
      }
      *((_DWORD *)this + 7) = v10 + 1;
      int v6 = operator new(0x28uLL);
      void *v6 = &unk_1F20FAB88;
      v6[1] = v5;
      v6[2] = v5;
      void v6[3] = 0;
      *((_DWORD *)v6 + 8) = 0;
      uint64_t v7 = *((void *)this + 2);
      uint64_t v8 = *((int *)this + 6);
      *((_DWORD *)this + 6) = v8 + 1;
      *(void *)(v7 + 8 * v8) = v6;
      awd::metrics::CrashReasonType::MergeFrom((awd::metrics::CrashReasonType *)v6, v9);
      ++v4;
    }
    while (v4 < *((int *)a2 + 6));
  }
LABEL_11:
  if (*((unsigned char *)a2 + 44))
  {
    uint64_t v13 = *((void *)a2 + 1);
    *((_DWORD *)this + 11) |= 1u;
    *((void *)this + 1) = v13;
  }
}

void sub_1C58BB9A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1C58BB9BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1C58BBA28(_Unwind_Exception *a1)
{
  int v3 = *(_DWORD *)(v1 + 28);
  if (v3 >= 1)
  {
    for (uint64_t i = 0; i < v3; ++i)
    {
      uint64_t v5 = *(void *)(*(void *)(v1 + 16) + 8 * i);
      if (v5)
      {
        (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
        int v3 = *(_DWORD *)(v1 + 28);
      }
    }
  }
  int v6 = *(void **)(v1 + 16);
  if (v6) {
    operator delete[](v6);
  }
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite((wireless_diagnostics::google::protobuf::MessageLite *)v1);
  _Unwind_Resume(a1);
}

void awd::metrics::CommCenterBasebanCrash::~CommCenterBasebanCrash(awd::metrics::CommCenterBasebanCrash *this)
{
  *(void *)this = &unk_1F20FAC00;
  int v2 = *((_DWORD *)this + 7);
  if (v2 >= 1)
  {
    for (uint64_t i = 0; i < v2; ++i)
    {
      uint64_t v4 = *(void *)(*((void *)this + 2) + 8 * i);
      if (v4)
      {
        (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
        int v2 = *((_DWORD *)this + 7);
      }
    }
  }
  uint64_t v5 = (void *)*((void *)this + 2);
  if (v5) {
    operator delete[](v5);
  }

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  int v2;
  uint64_t i;
  uint64_t v4;
  void *v5;
  uint64_t vars8;

  *(void *)this = &unk_1F20FAC00;
  int v2 = *((_DWORD *)this + 7);
  if (v2 >= 1)
  {
    for (uint64_t i = 0; i < v2; ++i)
    {
      uint64_t v4 = *(void *)(*((void *)this + 2) + 8 * i);
      if (v4)
      {
        (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
        int v2 = *((_DWORD *)this + 7);
      }
    }
  }
  uint64_t v5 = (void *)*((void *)this + 2);
  if (v5) {
    operator delete[](v5);
  }

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  int v2;
  uint64_t i;
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t vars8;

  *(void *)this = &unk_1F20FAC00;
  int v2 = *((_DWORD *)this + 7);
  if (v2 >= 1)
  {
    for (uint64_t i = 0; i < v2; ++i)
    {
      uint64_t v4 = *(void *)(*((void *)this + 2) + 8 * i);
      if (v4)
      {
        (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
        int v2 = *((_DWORD *)this + 7);
      }
    }
  }
  uint64_t v5 = (void *)*((void *)this + 2);
  if (v5) {
    operator delete[](v5);
  }
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);

  operator delete(v6);
}

uint64_t awd::metrics::CommCenterBasebanCrash::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 40) = a2;
  return this;
}

uint64_t awd::metrics::CommCenterBasebanCrash::default_instance(awd::metrics::CommCenterBasebanCrash *this, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t result = awd::metrics::CommCenterBasebanCrash::default_instance_;
  if (!awd::metrics::CommCenterBasebanCrash::default_instance_)
  {
    awd::metrics::protobuf_AddDesc_CCMetricsABM_2eproto(0, a2, a3, a4);
    return awd::metrics::CommCenterBasebanCrash::default_instance_;
  }
  return result;
}

void *awd::metrics::CommCenterBasebanCrash::New(awd::metrics::CommCenterBasebanCrash *this)
{
  uint64_t result = operator new(0x30uLL);
  result[5] = 0;
  *uint64_t result = &unk_1F20FAC00;
  result[1] = 0;
  result[2] = 0;
  result[3] = 0;
  *((_DWORD *)result + 8) = 0;
  return result;
}

uint64_t awd::metrics::CommCenterBasebanCrash::Clear(uint64_t this)
{
  uint64_t v1 = this;
  if (*(unsigned char *)(this + 44)) {
    *(void *)(this + 8) = 0;
  }
  if (*(int *)(this + 24) >= 1)
  {
    uint64_t v2 = 0;
    do
    {
      uint64_t v3 = *(void *)(*(void *)(v1 + 16) + 8 * v2);
      this = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 32))(v3);
      ++v2;
    }
    while (v2 < *(int *)(v1 + 24));
  }
  *(_DWORD *)(v1 + 24) = 0;
  *(_DWORD *)(v1 + 44) = 0;
  return this;
}

uint64_t awd::metrics::CommCenterBasebanCrash::MergePartialFromCodedStream(awd::metrics::CommCenterBasebanCrash *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  uint64_t v4 = (unint64_t *)((char *)this + 8);
  uint64_t v5 = (awd::metrics::CommCenterBasebanCrash *)((char *)this + 16);
  uint64_t v6 = MEMORY[0x1E4FBA920];
  while (1)
  {
    while (1)
    {
      uint64_t v7 = (char *)*((void *)a2 + 1);
      if ((unint64_t)v7 >= *((void *)a2 + 2) || *v7 < 0)
      {
        unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
        *((_DWORD *)a2 + 8) = TagFallback;
        if (!TagFallback) {
          return 1;
        }
      }
      else
      {
        unint64_t TagFallback = *v7;
        *((_DWORD *)a2 + 8) = TagFallback;
        *((void *)a2 + 1) = v7 + 1;
        if (!TagFallback) {
          return 1;
        }
      }
      if (TagFallback >> 3 != 1) {
        break;
      }
      int v9 = TagFallback & 7;
      if ((TagFallback & 7) != 0) {
        goto LABEL_18;
      }
      char v14 = (char *)*((void *)a2 + 1);
      unint64_t v15 = *((void *)a2 + 2);
      if ((unint64_t)v14 >= v15 || *v14 < 0)
      {
        uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2, v4);
        if (!result) {
          return result;
        }
        unint64_t v16 = (unsigned char *)*((void *)a2 + 1);
        unint64_t v18 = *((void *)a2 + 2);
        *((_DWORD *)this + 11) |= 1u;
        if ((unint64_t)v16 < v18) {
          goto LABEL_23;
        }
      }
      else
      {
        *uint64_t v4 = *v14;
        unint64_t v16 = v14 + 1;
        *((void *)a2 + 1) = v16;
        *((_DWORD *)this + 11) |= 1u;
        if ((unint64_t)v16 < v15)
        {
LABEL_23:
          if (*v16 == 18)
          {
            do
            {
              *((void *)a2 + 1) = v16 + 1;
              int v10 = *((_DWORD *)this + 7);
              uint64_t v11 = *((int *)this + 6);
              if ((int)v11 < v10) {
                goto LABEL_11;
              }
LABEL_25:
              if (v10 == *((_DWORD *)this + 8))
              {
                wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v5);
                int v10 = *((_DWORD *)this + 7);
              }
              *((_DWORD *)this + 7) = v10 + 1;
              uint64_t v13 = operator new(0x28uLL);
              *uint64_t v13 = &unk_1F20FAB88;
              v13[1] = v6;
              v13[2] = v6;
              void v13[3] = 0;
              *((_DWORD *)v13 + 8) = 0;
              uint64_t v19 = *((void *)this + 2);
              uint64_t v20 = *((int *)this + 6);
              *((_DWORD *)this + 6) = v20 + 1;
              *(void *)(v19 + 8 * v20) = v13;
LABEL_28:
              unsigned int v28 = -1431655766;
              uint64_t v21 = (char *)*((void *)a2 + 1);
              if ((unint64_t)v21 >= *((void *)a2 + 2) || *v21 < 0)
              {
                if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v28))return 0; {
              }
                }
              else
              {
                unsigned int v28 = *v21;
                *((void *)a2 + 1) = v21 + 1;
              }
              int v22 = *((_DWORD *)a2 + 14);
              int v23 = *((_DWORD *)a2 + 15);
              *((_DWORD *)a2 + 14) = v22 + 1;
              if (v22 >= v23) {
                return 0;
              }
              wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
              if (!awd::metrics::CrashReasonType::MergePartialFromCodedStream((awd::metrics::CrashReasonType *)v13, a2)|| !*((unsigned char *)a2 + 36))
              {
                return 0;
              }
              wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
              int v24 = *((_DWORD *)a2 + 14);
              BOOL v25 = __OFSUB__(v24, 1);
              int v26 = v24 - 1;
              if (v26 < 0 == v25) {
                *((_DWORD *)a2 + 14) = v26;
              }
              unint64_t v16 = (unsigned char *)*((void *)a2 + 1);
              char v27 = (unsigned char *)*((void *)a2 + 2);
            }
            while (v16 < v27 && *v16 == 18);
            if (v16 == v27 && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
            {
              *((_DWORD *)a2 + 8) = 0;
              uint64_t result = 1;
              *((unsigned char *)a2 + 36) = 1;
              return result;
            }
          }
        }
      }
    }
    if (TagFallback >> 3 == 2)
    {
      int v9 = TagFallback & 7;
      if (v9 == 2)
      {
        int v10 = *((_DWORD *)this + 7);
        uint64_t v11 = *((int *)this + 6);
        if ((int)v11 >= v10) {
          goto LABEL_25;
        }
LABEL_11:
        uint64_t v12 = *((void *)this + 2);
        *((_DWORD *)this + 6) = v11 + 1;
        uint64_t v13 = *(void **)(v12 + 8 * v11);
        goto LABEL_28;
      }
    }
    else
    {
      int v9 = TagFallback & 7;
    }
LABEL_18:
    if (v9 == 4) {
      return 1;
    }
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) == 0)return 0; {
  }
    }
}

uint64_t awd::metrics::CommCenterBasebanCrash::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = this;
  if (*(unsigned char *)(this + 44)) {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(void *)(this + 8), (uint64_t)a2, a4);
  }
  if (*(int *)(v5 + 24) >= 1)
  {
    uint64_t v6 = 0;
    do
      this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(void *)(*(void *)(v5 + 16) + 8 * v6++), a2, a4);
    while (v6 < *(int *)(v5 + 24));
  }
  return this;
}

uint64_t awd::metrics::CommCenterBasebanCrash::ByteSize(wireless_diagnostics::google::protobuf::io::CodedOutputStream **this)
{
  if (*((unsigned char *)this + 44))
  {
    int v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(this[1]);
    int v5 = *((_DWORD *)this + 6);
    uint64_t v3 = (v5 + v4 + 1);
    if (v5 < 1) {
      goto LABEL_9;
    }
  }
  else
  {
    int v2 = *((_DWORD *)this + 6);
    uint64_t v3 = v2;
    if (v2 < 1) {
      goto LABEL_9;
    }
  }
  uint64_t v6 = 0;
  do
  {
    while (1)
    {
      uint64_t v7 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)awd::metrics::CrashReasonType::ByteSize(*((awd::metrics::CrashReasonType **)this[2] + v6));
      if (v7 < 0x80) {
        break;
      }
      uint64_t v3 = v7
         + v3
         + wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v7);
      if (++v6 >= *((int *)this + 6)) {
        goto LABEL_9;
      }
    }
    uint64_t v3 = (v7 + v3 + 1);
    ++v6;
  }
  while (v6 < *((int *)this + 6));
LABEL_9:
  *((_DWORD *)this + 10) = v3;
  return v3;
}

void awd::metrics::CommCenterBasebanCrash::CopyFrom(awd::metrics::CommCenterBasebanCrash *this, const awd::metrics::CommCenterBasebanCrash *a2)
{
  if (a2 != this)
  {
    (*(void (**)(awd::metrics::CommCenterBasebanCrash *))(*(void *)this + 32))(this);
    awd::metrics::CommCenterBasebanCrash::MergeFrom(this, a2);
  }
}

uint64_t awd::metrics::CommCenterBasebanCrash::IsInitialized(awd::metrics::CommCenterBasebanCrash *this)
{
  return 1;
}

awd::metrics::CommCenterBasebanCrash *awd::metrics::CommCenterBasebanCrash::Swap(awd::metrics::CommCenterBasebanCrash *this, awd::metrics::CommCenterBasebanCrash *a2)
{
  if (a2 != this)
  {
    uint64_t v3 = this;
    uint64_t v4 = *((void *)this + 1);
    *((void *)this + 1) = *((void *)a2 + 1);
    *((void *)a2 + 1) = v4;
    this = (awd::metrics::CommCenterBasebanCrash *)wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Swap();
    int v5 = *((_DWORD *)v3 + 11);
    *((_DWORD *)v3 + 11) = *((_DWORD *)a2 + 11);
    *((_DWORD *)a2 + 11) = v5;
    int v6 = *((_DWORD *)v3 + 10);
    *((_DWORD *)v3 + 10) = *((_DWORD *)a2 + 10);
    *((_DWORD *)a2 + 10) = v6;
  }
  return this;
}

char *awd::metrics::CommCenterBasebanCrash::GetTypeName@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = (char *)operator new(0x28uLL);
  *(void *)a1 = result;
  *(_OWORD *)(a1 + 8) = xmmword_1C599E860;
  strcpy(result, "awd.metrics.CommCenterBasebanCrash");
  return result;
}

void *awd::metrics::CommCenterBasebandTrace::SharedCtor(void *this)
{
  uint64_t v1 = MEMORY[0x1E4FBA920];
  this[1] = 0;
  this[2] = v1;
  this[3] = v1;
  this[4] = 0;
  return this;
}

awd::metrics::CommCenterBasebandTrace *awd::metrics::CommCenterBasebandTrace::CommCenterBasebandTrace(awd::metrics::CommCenterBasebandTrace *this, const awd::metrics::CommCenterBasebandTrace *a2)
{
  *(void *)this = &unk_1F20FAC78;
  *((void *)this + 1) = 0;
  uint64_t v3 = MEMORY[0x1E4FBA920];
  *((void *)this + 2) = MEMORY[0x1E4FBA920];
  *((void *)this + 3) = v3;
  *((void *)this + 4) = 0;
  awd::metrics::CommCenterBasebandTrace::MergeFrom(this, a2);
  return this;
}

{
  uint64_t v3;

  *(void *)this = &unk_1F20FAC78;
  *((void *)this + 1) = 0;
  uint64_t v3 = MEMORY[0x1E4FBA920];
  *((void *)this + 2) = MEMORY[0x1E4FBA920];
  *((void *)this + 3) = v3;
  *((void *)this + 4) = 0;
  awd::metrics::CommCenterBasebandTrace::MergeFrom(this, a2);
  return this;
}

void sub_1C58BC3B4(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

void awd::metrics::CommCenterBasebandTrace::MergeFrom(awd::metrics::CommCenterBasebandTrace *this, const awd::metrics::CommCenterBasebandTrace *a2)
{
  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v19);
  }
  LOBYTE(v4) = *((unsigned char *)a2 + 36);
  if ((_BYTE)v4)
  {
    if (*((unsigned char *)a2 + 36))
    {
      uint64_t v5 = *((void *)a2 + 1);
      *((_DWORD *)this + 9) |= 1u;
      *((void *)this + 1) = v5;
      int v4 = *((_DWORD *)a2 + 9);
    }
    int v6 = (void **)MEMORY[0x1E4FBA920];
    if ((v4 & 2) != 0)
    {
      uint64_t v7 = (void **)*((void *)a2 + 2);
      *((_DWORD *)this + 9) |= 2u;
      uint64_t v8 = (void **)*((void *)this + 2);
      if (v8 == v6)
      {
        uint64_t v8 = (void **)operator new(0x18uLL);
        v8[1] = 0;
        void v8[2] = 0;
        void *v8 = 0;
        *((void *)this + 2) = v8;
      }
      if (v8 != v7)
      {
        char v9 = *((unsigned char *)v7 + 23);
        if ((*((char *)v8 + 23) & 0x80000000) == 0)
        {
          if ((*((unsigned char *)v7 + 23) & 0x80) != 0)
          {
            std::string::__assign_no_alias<true>(v8, *v7, (size_t)v7[1]);
            if ((*((unsigned char *)a2 + 36) & 4) == 0) {
              return;
            }
          }
          else
          {
            long long v10 = *(_OWORD *)v7;
            void v8[2] = v7[2];
            *(_OWORD *)uint64_t v8 = v10;
            if ((*((unsigned char *)a2 + 36) & 4) == 0) {
              return;
            }
          }
          goto LABEL_22;
        }
        if (v9 >= 0) {
          uint64_t v11 = v7;
        }
        else {
          uint64_t v11 = *v7;
        }
        if (v9 >= 0) {
          size_t v12 = *((unsigned __int8 *)v7 + 23);
        }
        else {
          size_t v12 = (size_t)v7[1];
        }
        std::string::__assign_no_alias<false>(v8, v11, v12);
      }
    }
    if ((*((unsigned char *)a2 + 36) & 4) == 0) {
      return;
    }
LABEL_22:
    uint64_t v13 = (void **)*((void *)a2 + 3);
    *((_DWORD *)this + 9) |= 4u;
    char v14 = (void **)*((void *)this + 3);
    if (v14 == v6)
    {
      char v14 = (void **)operator new(0x18uLL);
      v14[1] = 0;
      uint64_t v14[2] = 0;
      char *v14 = 0;
      *((void *)this + 3) = v14;
    }
    if (v14 != v13)
    {
      char v15 = *((unsigned char *)v13 + 23);
      if (*((char *)v14 + 23) < 0)
      {
        if (v15 >= 0) {
          int v17 = v13;
        }
        else {
          int v17 = *v13;
        }
        if (v15 >= 0) {
          size_t v18 = *((unsigned __int8 *)v13 + 23);
        }
        else {
          size_t v18 = (size_t)v13[1];
        }
        std::string::__assign_no_alias<false>(v14, v17, v18);
      }
      else if ((*((unsigned char *)v13 + 23) & 0x80) != 0)
      {
        std::string::__assign_no_alias<true>(v14, *v13, (size_t)v13[1]);
      }
      else
      {
        long long v16 = *(_OWORD *)v13;
        uint64_t v14[2] = v13[2];
        *(_OWORD *)char v14 = v16;
      }
    }
  }
}

void sub_1C58BC5A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1C58BC5BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1C58BC624(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

void awd::metrics::CommCenterBasebandTrace::~CommCenterBasebandTrace(awd::metrics::CommCenterBasebandTrace *this)
{
  *(void *)this = &unk_1F20FAC78;
  uint64_t v2 = *((void *)this + 2);
  uint64_t v3 = MEMORY[0x1E4FBA920];
  if (v2 == MEMORY[0x1E4FBA920] || v2 == 0)
  {
    uint64_t v5 = *((void *)this + 3);
    if (v5 != MEMORY[0x1E4FBA920] && v5 != 0)
    {
LABEL_20:
      if (*(char *)(v5 + 23) < 0) {
        operator delete(*(void **)v5);
      }
      operator delete((void *)v5);
      uint64_t v7 = this;
      goto LABEL_13;
    }
  }
  else
  {
    if (*(char *)(v2 + 23) < 0) {
      operator delete(*(void **)v2);
    }
    operator delete((void *)v2);
    uint64_t v5 = *((void *)this + 3);
    if (v5 != v3 && v5 != 0) {
      goto LABEL_20;
    }
  }
  uint64_t v7 = this;

LABEL_13:
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v7);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  wireless_diagnostics::google::protobuf::MessageLite *v7;
  uint64_t vars8;

  *(void *)this = &unk_1F20FAC78;
  uint64_t v2 = *((void *)this + 2);
  uint64_t v3 = MEMORY[0x1E4FBA920];
  if (v2 == MEMORY[0x1E4FBA920] || v2 == 0)
  {
    uint64_t v5 = *((void *)this + 3);
    if (v5 != MEMORY[0x1E4FBA920] && v5 != 0)
    {
LABEL_20:
      if (*(char *)(v5 + 23) < 0) {
        operator delete(*(void **)v5);
      }
      operator delete((void *)v5);
      uint64_t v7 = this;
      goto LABEL_13;
    }
  }
  else
  {
    if (*(char *)(v2 + 23) < 0) {
      operator delete(*(void **)v2);
    }
    operator delete((void *)v2);
    uint64_t v5 = *((void *)this + 3);
    if (v5 != v3 && v5 != 0) {
      goto LABEL_20;
    }
  }
  uint64_t v7 = this;

LABEL_13:
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v7);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  void *v7;
  uint64_t vars8;

  *(void *)this = &unk_1F20FAC78;
  uint64_t v2 = *((void *)this + 2);
  uint64_t v3 = MEMORY[0x1E4FBA920];
  if (v2 != MEMORY[0x1E4FBA920] && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0) {
      operator delete(*(void **)v2);
    }
    operator delete((void *)v2);
  }
  uint64_t v5 = *((void *)this + 3);
  if (v5 != v3 && v5 != 0)
  {
    if (*(char *)(v5 + 23) < 0) {
      operator delete(*(void **)v5);
    }
    operator delete((void *)v5);
  }
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);

  operator delete(v7);
}

void awd::metrics::CommCenterBasebandTrace::SharedDtor(awd::metrics::CommCenterBasebandTrace *this)
{
  uint64_t v2 = *((void *)this + 2);
  uint64_t v3 = MEMORY[0x1E4FBA920];
  if (v2 == MEMORY[0x1E4FBA920] || v2 == 0)
  {
    uint64_t v5 = *((void *)this + 3);
    if (v5 == MEMORY[0x1E4FBA920] || v5 == 0) {
      return;
    }
    goto LABEL_18;
  }
  if (*(char *)(v2 + 23) < 0) {
    operator delete(*(void **)v2);
  }
  operator delete((void *)v2);
  uint64_t v5 = *((void *)this + 3);
  if (v5 != v3 && v5 != 0)
  {
LABEL_18:
    if (*(char *)(v5 + 23) < 0)
    {
      operator delete(*(void **)v5);
      uint64_t v8 = (void *)v5;
    }
    else
    {
      uint64_t v8 = (void *)v5;
    }
    operator delete(v8);
  }
}

uint64_t awd::metrics::CommCenterBasebandTrace::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 32) = a2;
  return this;
}

uint64_t awd::metrics::CommCenterBasebandTrace::default_instance(awd::metrics::CommCenterBasebandTrace *this, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t result = awd::metrics::CommCenterBasebandTrace::default_instance_;
  if (!awd::metrics::CommCenterBasebandTrace::default_instance_)
  {
    awd::metrics::protobuf_AddDesc_CCMetricsABM_2eproto(0, a2, a3, a4);
    return awd::metrics::CommCenterBasebandTrace::default_instance_;
  }
  return result;
}

void *awd::metrics::CommCenterBasebandTrace::New(awd::metrics::CommCenterBasebandTrace *this)
{
  uint64_t result = operator new(0x28uLL);
  uint64_t v2 = MEMORY[0x1E4FBA920];
  *uint64_t result = &unk_1F20FAC78;
  result[1] = 0;
  result[2] = v2;
  result[3] = v2;
  result[4] = 0;
  return result;
}

uint64_t awd::metrics::CommCenterBasebandTrace::Clear(uint64_t this)
{
  char v1 = *(unsigned char *)(this + 36);
  if (!v1) {
    goto LABEL_12;
  }
  *(void *)(this + 8) = 0;
  uint64_t v2 = MEMORY[0x1E4FBA920];
  if ((v1 & 2) != 0)
  {
    uint64_t v3 = *(void *)(this + 16);
    if (v3 != MEMORY[0x1E4FBA920])
    {
      if (*(char *)(v3 + 23) < 0)
      {
        **(unsigned char **)uint64_t v3 = 0;
        *(void *)(v3 + 8) = 0;
        if ((*(unsigned char *)(this + 36) & 4) == 0) {
          goto LABEL_12;
        }
        goto LABEL_7;
      }
      *(unsigned char *)uint64_t v3 = 0;
      *(unsigned char *)(v3 + 23) = 0;
    }
  }
  if ((*(unsigned char *)(this + 36) & 4) == 0)
  {
LABEL_12:
    *(_DWORD *)(this + 36) = 0;
    return this;
  }
LABEL_7:
  uint64_t v4 = *(void *)(this + 24);
  if (v4 == v2) {
    goto LABEL_12;
  }
  if (*(char *)(v4 + 23) < 0)
  {
    **(unsigned char **)uint64_t v4 = 0;
    *(void *)(v4 + 8) = 0;
  }
  else
  {
    *(unsigned char *)uint64_t v4 = 0;
    *(unsigned char *)(v4 + 23) = 0;
  }
  *(_DWORD *)(this + 36) = 0;
  return this;
}

uint64_t awd::metrics::CommCenterBasebandTrace::MergePartialFromCodedStream(awd::metrics::CommCenterBasebandTrace *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  uint64_t v4 = (unint64_t *)((char *)this + 8);
  uint64_t v5 = MEMORY[0x1E4FBA920];
  while (1)
  {
    while (1)
    {
      while (1)
      {
        int v6 = (char *)*((void *)a2 + 1);
        if ((unint64_t)v6 >= *((void *)a2 + 2) || *v6 < 0)
        {
          unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
          *((_DWORD *)a2 + 8) = TagFallback;
          if (!TagFallback) {
            return 1;
          }
        }
        else
        {
          unint64_t TagFallback = *v6;
          *((_DWORD *)a2 + 8) = TagFallback;
          *((void *)a2 + 1) = v6 + 1;
          if (!TagFallback) {
            return 1;
          }
        }
        unsigned int v8 = TagFallback >> 3;
        if (TagFallback >> 3 != 1) {
          break;
        }
        int v9 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_32;
        }
        size_t v12 = (char *)*((void *)a2 + 1);
        unint64_t v11 = *((void *)a2 + 2);
        if ((unint64_t)v12 >= v11 || *v12 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2, v4);
          if (!result) {
            return result;
          }
          uint64_t v13 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v18 = *((void *)a2 + 2);
          int v14 = *((_DWORD *)this + 9) | 1;
          *((_DWORD *)this + 9) = v14;
          if ((unint64_t)v13 < v18) {
            goto LABEL_37;
          }
        }
        else
        {
          *uint64_t v4 = *v12;
          uint64_t v13 = v12 + 1;
          *((void *)a2 + 1) = v13;
          int v14 = *((_DWORD *)this + 9) | 1;
          *((_DWORD *)this + 9) = v14;
          if ((unint64_t)v13 < v11)
          {
LABEL_37:
            if (*v13 == 18)
            {
              *((void *)a2 + 1) = v13 + 1;
              *((_DWORD *)this + 9) = v14 | 2;
              if (*((void *)this + 2) != v5) {
                goto LABEL_22;
              }
LABEL_21:
              char v15 = operator new(0x18uLL);
              v15[1] = 0;
              unint64_t v15[2] = 0;
              void *v15 = 0;
              *((void *)this + 2) = v15;
              goto LABEL_22;
            }
          }
        }
      }
      if (v8 == 2) {
        break;
      }
      if (v8 == 3)
      {
        int v9 = TagFallback & 7;
        if (v9 == 2)
        {
          *((_DWORD *)this + 9) |= 4u;
          if (*((void *)this + 3) != v5) {
            goto LABEL_12;
          }
          goto LABEL_26;
        }
      }
      else
      {
        int v9 = TagFallback & 7;
      }
LABEL_32:
      if (v9 == 4) {
        return 1;
      }
      if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) == 0)return 0; {
    }
      }
    int v9 = TagFallback & 7;
    if (v9 != 2) {
      goto LABEL_32;
    }
    *((_DWORD *)this + 9) |= 2u;
    if (*((void *)this + 2) == v5) {
      goto LABEL_21;
    }
LABEL_22:
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
    if (!result) {
      return result;
    }
    long long v16 = (unsigned char *)*((void *)a2 + 1);
    if ((unint64_t)v16 < *((void *)a2 + 2) && *v16 == 26)
    {
      *((void *)a2 + 1) = v16 + 1;
      *((_DWORD *)this + 9) |= 4u;
      if (*((void *)this + 3) != v5)
      {
LABEL_12:
        uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!result) {
          return result;
        }
        goto LABEL_27;
      }
LABEL_26:
      int v17 = operator new(0x18uLL);
      v17[1] = 0;
      v17[2] = 0;
      void *v17 = 0;
      *((void *)this + 3) = v17;
      uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
      if (!result) {
        return result;
      }
LABEL_27:
      if (*((void *)a2 + 1) == *((void *)a2 + 2)
        && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
      {
        break;
      }
    }
  }
  *((_DWORD *)a2 + 8) = 0;
  uint64_t result = 1;
  *((unsigned char *)a2 + 36) = 1;
  return result;
}

uint64_t awd::metrics::CommCenterBasebandTrace::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v4 = this;
  int v5 = *(_DWORD *)(this + 36);
  if ((v5 & 1) == 0)
  {
    if ((v5 & 2) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
    if ((*(_DWORD *)(v4 + 36) & 4) == 0) {
      return this;
    }
    goto LABEL_7;
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(void *)(this + 8), (uint64_t)a2, a4);
  int v5 = *(_DWORD *)(v4 + 36);
  if ((v5 & 2) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v5 & 4) == 0) {
    return this;
  }
LABEL_7:

  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
}

uint64_t awd::metrics::CommCenterBasebandTrace::ByteSize(awd::metrics::CommCenterBasebandTrace *this)
{
  LOBYTE(v2) = *((unsigned char *)this + 36);
  if (!(_BYTE)v2)
  {
    uint64_t v3 = 0;
LABEL_6:
    *((_DWORD *)this + 8) = v3;
    return v3;
  }
  if (*((unsigned char *)this + 36))
  {
    uint64_t v3 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*((wireless_diagnostics::google::protobuf::io::CodedOutputStream **)this + 1))
       + 1;
    int v2 = *((_DWORD *)this + 9);
    if ((v2 & 2) == 0) {
      goto LABEL_17;
    }
  }
  else
  {
    uint64_t v3 = 0;
    if ((*((unsigned char *)this + 36) & 2) == 0) {
      goto LABEL_17;
    }
  }
  uint64_t v5 = *((void *)this + 2);
  int v6 = *(unsigned __int8 *)(v5 + 23);
  char v7 = v6;
  uint64_t v8 = *(void *)(v5 + 8);
  if ((v6 & 0x80u) == 0) {
    unint64_t v9 = *(unsigned __int8 *)(v5 + 23);
  }
  else {
    unint64_t v9 = v8;
  }
  if (v9 >= 0x80)
  {
    int v10 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v9);
    int v6 = *(unsigned __int8 *)(v5 + 23);
    uint64_t v8 = *(void *)(v5 + 8);
    int v2 = *((_DWORD *)this + 9);
    char v7 = *(unsigned char *)(v5 + 23);
  }
  else
  {
    int v10 = 1;
  }
  if (v7 < 0) {
    int v6 = v8;
  }
  uint64_t v3 = (v3 + v10 + v6 + 1);
LABEL_17:
  if ((v2 & 4) == 0) {
    goto LABEL_6;
  }
  uint64_t v11 = *((void *)this + 3);
  int v12 = *(unsigned __int8 *)(v11 + 23);
  char v13 = v12;
  uint64_t v14 = *(void *)(v11 + 8);
  if ((v12 & 0x80u) == 0) {
    unint64_t v15 = *(unsigned __int8 *)(v11 + 23);
  }
  else {
    unint64_t v15 = v14;
  }
  if (v15 >= 0x80)
  {
    int v16 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v15);
    int v12 = *(unsigned __int8 *)(v11 + 23);
    uint64_t v14 = *(void *)(v11 + 8);
    char v13 = *(unsigned char *)(v11 + 23);
  }
  else
  {
    int v16 = 1;
  }
  if (v13 < 0) {
    int v12 = v14;
  }
  int v17 = v3 + v16 + v12;
  *((_DWORD *)this + 8) = v17 + 1;
  return (v17 + 1);
}

void awd::metrics::CommCenterBasebandTrace::CopyFrom(awd::metrics::CommCenterBasebandTrace *this, const awd::metrics::CommCenterBasebandTrace *a2)
{
  if (a2 != this)
  {
    (*(void (**)(awd::metrics::CommCenterBasebandTrace *))(*(void *)this + 32))(this);
    awd::metrics::CommCenterBasebandTrace::MergeFrom(this, a2);
  }
}

uint64_t awd::metrics::CommCenterBasebandTrace::IsInitialized(awd::metrics::CommCenterBasebandTrace *this)
{
  return 1;
}

uint64_t awd::metrics::CommCenterBasebandTrace::Swap(uint64_t this, awd::metrics::CommCenterBasebandTrace *a2)
{
  if (a2 != (awd::metrics::CommCenterBasebandTrace *)this)
  {
    uint64_t v2 = *(void *)(this + 8);
    uint64_t v3 = *(void *)(this + 16);
    uint64_t v4 = *((void *)a2 + 2);
    *(void *)(this + 8) = *((void *)a2 + 1);
    *(void *)(this + 16) = v4;
    *((void *)a2 + 1) = v2;
    *((void *)a2 + 2) = v3;
    uint64_t v5 = *(void *)(this + 24);
    *(void *)(this + 24) = *((void *)a2 + 3);
    *((void *)a2 + 3) = v5;
    LODWORD(v5) = *(_DWORD *)(this + 36);
    *(_DWORD *)(this + 36) = *((_DWORD *)a2 + 9);
    *((_DWORD *)a2 + 9) = v5;
    LODWORD(v5) = *(_DWORD *)(this + 32);
    *(_DWORD *)(this + 32) = *((_DWORD *)a2 + 8);
    *((_DWORD *)a2 + 8) = v5;
  }
  return this;
}

char *awd::metrics::CommCenterBasebandTrace::GetTypeName@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = (char *)operator new(0x28uLL);
  *(void *)a1 = result;
  *(_OWORD *)(a1 + 8) = xmmword_1C59A3D60;
  strcpy(result, "awd.metrics.CommCenterBasebandTrace");
  return result;
}

void *awd::metrics::CommCenterNVMSync::SharedCtor(void *this)
{
  this[4] = 0;
  this[1] = 0;
  this[2] = 0;
  *(void *)((char *)this + 22) = 0;
  return this;
}

awd::metrics::CommCenterNVMSync *awd::metrics::CommCenterNVMSync::CommCenterNVMSync(awd::metrics::CommCenterNVMSync *this, const awd::metrics::CommCenterNVMSync *a2)
{
  *((void *)this + 4) = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *(void *)this = &unk_1F20FACF0;
  *(void *)((char *)this + 22) = 0;
  awd::metrics::CommCenterNVMSync::MergeFrom(this, a2);
  return this;
}

{
  *((void *)this + 4) = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *(void *)this = &unk_1F20FACF0;
  *(void *)((char *)this + 22) = 0;
  awd::metrics::CommCenterNVMSync::MergeFrom(this, a2);
  return this;
}

void sub_1C58BD084(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

void awd::metrics::CommCenterNVMSync::MergeFrom(awd::metrics::CommCenterNVMSync *this, const awd::metrics::CommCenterNVMSync *a2)
{
  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v10);
  }
  LOBYTE(v4) = *((unsigned char *)a2 + 36);
  if ((_BYTE)v4)
  {
    if (*((unsigned char *)a2 + 36))
    {
      uint64_t v6 = *((void *)a2 + 1);
      *((_DWORD *)this + 9) |= 1u;
      *((void *)this + 1) = v6;
      int v4 = *((_DWORD *)a2 + 9);
      if ((v4 & 2) == 0)
      {
LABEL_6:
        if ((v4 & 4) == 0) {
          goto LABEL_7;
        }
        goto LABEL_13;
      }
    }
    else if ((*((unsigned char *)a2 + 36) & 2) == 0)
    {
      goto LABEL_6;
    }
    int v7 = *((_DWORD *)a2 + 6);
    *((_DWORD *)this + 9) |= 2u;
    *((_DWORD *)this + 6) = v7;
    int v4 = *((_DWORD *)a2 + 9);
    if ((v4 & 4) == 0)
    {
LABEL_7:
      if ((v4 & 8) == 0) {
        goto LABEL_8;
      }
      goto LABEL_14;
    }
LABEL_13:
    uint64_t v8 = *((void *)a2 + 2);
    *((_DWORD *)this + 9) |= 4u;
    *((void *)this + 2) = v8;
    int v4 = *((_DWORD *)a2 + 9);
    if ((v4 & 8) == 0)
    {
LABEL_8:
      if ((v4 & 0x10) == 0) {
        return;
      }
      goto LABEL_9;
    }
LABEL_14:
    char v9 = *((unsigned char *)a2 + 28);
    *((_DWORD *)this + 9) |= 8u;
    *((unsigned char *)this + 28) = v9;
    if ((*((_DWORD *)a2 + 9) & 0x10) == 0) {
      return;
    }
LABEL_9:
    char v5 = *((unsigned char *)a2 + 29);
    *((_DWORD *)this + 9) |= 0x10u;
    *((unsigned char *)this + 29) = v5;
  }
}

void sub_1C58BD1AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1C58BD1C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1C58BD224(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

void awd::metrics::CommCenterNVMSync::~CommCenterNVMSync(awd::metrics::CommCenterNVMSync *this)
{
  *(void *)this = &unk_1F20FACF0;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  *(void *)this = &unk_1F20FACF0;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  void *v1;
  uint64_t vars8;

  *(void *)this = &unk_1F20FACF0;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);

  operator delete(v1);
}

uint64_t awd::metrics::CommCenterNVMSync::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 32) = a2;
  return this;
}

uint64_t awd::metrics::CommCenterNVMSync::default_instance(awd::metrics::CommCenterNVMSync *this, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t result = awd::metrics::CommCenterNVMSync::default_instance_;
  if (!awd::metrics::CommCenterNVMSync::default_instance_)
  {
    awd::metrics::protobuf_AddDesc_CCMetricsABM_2eproto(0, a2, a3, a4);
    return awd::metrics::CommCenterNVMSync::default_instance_;
  }
  return result;
}

void *awd::metrics::CommCenterNVMSync::New(awd::metrics::CommCenterNVMSync *this)
{
  uint64_t result = operator new(0x28uLL);
  result[4] = 0;
  result[1] = 0;
  result[2] = 0;
  *uint64_t result = &unk_1F20FACF0;
  *(void *)((char *)result + 22) = 0;
  return result;
}

uint64_t awd::metrics::CommCenterNVMSync::Clear(uint64_t this)
{
  if (*(unsigned char *)(this + 36))
  {
    *(void *)(this + 8) = 0;
    *(void *)(this + 16) = 0;
    *(void *)(this + 22) = 0;
  }
  *(_DWORD *)(this + 36) = 0;
  return this;
}

uint64_t awd::metrics::CommCenterNVMSync::MergePartialFromCodedStream(awd::metrics::CommCenterNVMSync *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  int v4 = (unint64_t *)((char *)this + 8);
  char v5 = (unsigned int *)((char *)this + 24);
  uint64_t v6 = (unint64_t *)((char *)this + 16);
  while (2)
  {
    int v7 = (char *)*((void *)a2 + 1);
    if ((unint64_t)v7 >= *((void *)a2 + 2) || *v7 < 0)
    {
      unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
      *((_DWORD *)a2 + 8) = TagFallback;
      if (!TagFallback) {
        return 1;
      }
    }
    else
    {
      unint64_t TagFallback = *v7;
      *((_DWORD *)a2 + 8) = TagFallback;
      *((void *)a2 + 1) = v7 + 1;
      if (!TagFallback) {
        return 1;
      }
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        int v9 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_24;
        }
        uint64_t v11 = (char *)*((void *)a2 + 1);
        unint64_t v10 = *((void *)a2 + 2);
        if ((unint64_t)v11 >= v10 || *v11 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2, v4);
          if (!result) {
            return result;
          }
          int v12 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v10 = *((void *)a2 + 2);
          *((_DWORD *)this + 9) |= 1u;
          if ((unint64_t)v12 >= v10) {
            continue;
          }
        }
        else
        {
          *int v4 = *v11;
          int v12 = v11 + 1;
          *((void *)a2 + 1) = v12;
          *((_DWORD *)this + 9) |= 1u;
          if ((unint64_t)v12 >= v10) {
            continue;
          }
        }
        if (*v12 != 16) {
          continue;
        }
        char v13 = v12 + 1;
        *((void *)a2 + 1) = v13;
        if ((unint64_t)v13 >= v10) {
          goto LABEL_36;
        }
        goto LABEL_33;
      case 2u:
        int v9 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_24;
        }
        char v13 = (char *)*((void *)a2 + 1);
        unint64_t v10 = *((void *)a2 + 2);
        if ((unint64_t)v13 >= v10) {
          goto LABEL_36;
        }
LABEL_33:
        if ((*v13 & 0x80000000) == 0)
        {
          unsigned int *v5 = *v13;
          int v17 = v13 + 1;
          *((void *)a2 + 1) = v17;
          *((_DWORD *)this + 9) |= 2u;
          if ((unint64_t)v17 < v10) {
            goto LABEL_38;
          }
          continue;
        }
LABEL_36:
        uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v5);
        if (!result) {
          return result;
        }
        int v17 = (unsigned char *)*((void *)a2 + 1);
        unint64_t v10 = *((void *)a2 + 2);
        *((_DWORD *)this + 9) |= 2u;
        if ((unint64_t)v17 >= v10) {
          continue;
        }
LABEL_38:
        if (*v17 != 24) {
          continue;
        }
        uint64_t v14 = v17 + 1;
        *((void *)a2 + 1) = v14;
        if ((unint64_t)v14 >= v10)
        {
LABEL_43:
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2, v6);
          if (!result) {
            return result;
          }
          unint64_t v18 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v10 = *((void *)a2 + 2);
          *((_DWORD *)this + 9) |= 4u;
          if ((unint64_t)v18 < v10) {
            goto LABEL_45;
          }
          continue;
        }
LABEL_40:
        if ((char)*v14 < 0) {
          goto LABEL_43;
        }
        unint64_t *v6 = *v14;
        unint64_t v18 = v14 + 1;
        *((void *)a2 + 1) = v18;
        *((_DWORD *)this + 9) |= 4u;
        if ((unint64_t)v18 >= v10) {
          continue;
        }
LABEL_45:
        if (*v18 != 32) {
          continue;
        }
        unint64_t v15 = v18 + 1;
        *((void *)a2 + 1) = v15;
        unsigned int v25 = -1431655766;
        if ((unint64_t)v15 >= v10) {
          goto LABEL_49;
        }
LABEL_47:
        if ((char)*v15 < 0)
        {
LABEL_49:
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v25);
          if (!result) {
            return result;
          }
          unsigned int v19 = v25;
          uint64_t v20 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v10 = *((void *)a2 + 2);
          goto LABEL_51;
        }
        unsigned int v19 = *v15;
        uint64_t v20 = v15 + 1;
        *((void *)a2 + 1) = v20;
LABEL_51:
        *((unsigned char *)this + 28) = v19 != 0;
        *((_DWORD *)this + 9) |= 8u;
        if ((unint64_t)v20 >= v10 || *v20 != 40) {
          continue;
        }
        int v16 = v20 + 1;
        *((void *)a2 + 1) = v16;
        unsigned int v24 = -1431655766;
        if ((unint64_t)v16 < v10)
        {
LABEL_54:
          if ((*v16 & 0x80000000) == 0)
          {
            unsigned int v21 = *v16;
            int v22 = (unsigned __int8 *)(v16 + 1);
            *((void *)a2 + 1) = v22;
            goto LABEL_58;
          }
        }
LABEL_56:
        uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v24);
        if (!result) {
          return result;
        }
        unsigned int v21 = v24;
        int v22 = (unsigned __int8 *)*((void *)a2 + 1);
        unint64_t v10 = *((void *)a2 + 2);
LABEL_58:
        *((unsigned char *)this + 29) = v21 != 0;
        *((_DWORD *)this + 9) |= 0x10u;
        if (v22 != (unsigned __int8 *)v10 || !*((_DWORD *)a2 + 11) && *((_DWORD *)a2 + 6) != *((_DWORD *)a2 + 10)) {
          continue;
        }
        *((_DWORD *)a2 + 8) = 0;
        uint64_t result = 1;
        *((unsigned char *)a2 + 36) = 1;
        return result;
      case 3u:
        int v9 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_24;
        }
        uint64_t v14 = (unsigned __int8 *)*((void *)a2 + 1);
        unint64_t v10 = *((void *)a2 + 2);
        if ((unint64_t)v14 >= v10) {
          goto LABEL_43;
        }
        goto LABEL_40;
      case 4u:
        int v9 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_24;
        }
        unint64_t v15 = (unsigned __int8 *)*((void *)a2 + 1);
        unint64_t v10 = *((void *)a2 + 2);
        unsigned int v25 = -1431655766;
        if ((unint64_t)v15 >= v10) {
          goto LABEL_49;
        }
        goto LABEL_47;
      case 5u:
        int v9 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_24;
        }
        int v16 = (char *)*((void *)a2 + 1);
        unint64_t v10 = *((void *)a2 + 2);
        unsigned int v24 = -1431655766;
        if ((unint64_t)v16 >= v10) {
          goto LABEL_56;
        }
        goto LABEL_54;
      default:
        int v9 = TagFallback & 7;
LABEL_24:
        if (v9 == 4) {
          return 1;
        }
        if (wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback))continue; {
        return 0;
        }
    }
  }
}

uint64_t awd::metrics::CommCenterNVMSync::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = this;
  int v6 = *(_DWORD *)(this + 36);
  if (v6)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(void *)(this + 8), (uint64_t)a2, a4);
    int v6 = *(_DWORD *)(v5 + 36);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(unsigned int *)(v5 + 24), (uint64_t)a2, a4);
  int v6 = *(_DWORD *)(v5 + 36);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0) {
      goto LABEL_5;
    }
LABEL_10:
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, *(unsigned __int8 *)(v5 + 28), (uint64_t)a2, a4);
    if ((*(_DWORD *)(v5 + 36) & 0x10) == 0) {
      return this;
    }
    goto LABEL_11;
  }
LABEL_9:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, *(void *)(v5 + 16), (uint64_t)a2, a4);
  int v6 = *(_DWORD *)(v5 + 36);
  if ((v6 & 8) != 0) {
    goto LABEL_10;
  }
LABEL_5:
  if ((v6 & 0x10) == 0) {
    return this;
  }
LABEL_11:
  uint64_t v7 = *(unsigned __int8 *)(v5 + 29);

  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, v7, (uint64_t)a2, a4);
}

uint64_t awd::metrics::CommCenterNVMSync::ByteSize(awd::metrics::CommCenterNVMSync *this)
{
  LOBYTE(v2) = *((unsigned char *)this + 36);
  if (!(_BYTE)v2)
  {
    uint64_t result = 0;
    *((_DWORD *)this + 8) = 0;
    return result;
  }
  if ((*((unsigned char *)this + 36) & 1) == 0)
  {
    unsigned int v3 = 0;
    if ((*((unsigned char *)this + 36) & 2) == 0) {
      goto LABEL_11;
    }
LABEL_7:
    uint64_t v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 6);
    if (v5 >= 0x80)
    {
      int v6 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5) + 1;
      int v2 = *((_DWORD *)this + 9);
    }
    else
    {
      int v6 = 2;
    }
    v3 += v6;
    goto LABEL_11;
  }
  unsigned int v3 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*((wireless_diagnostics::google::protobuf::io::CodedOutputStream **)this
                                                                                   + 1))
     + 1;
  int v2 = *((_DWORD *)this + 9);
  if ((v2 & 2) != 0) {
    goto LABEL_7;
  }
LABEL_11:
  if ((v2 & 4) != 0)
  {
    v3 += wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*((wireless_diagnostics::google::protobuf::io::CodedOutputStream **)this
                                                                                      + 2))
        + 1;
    int v2 = *((_DWORD *)this + 9);
  }
  unsigned int v7 = v3 + 2;
  if ((v2 & 8) == 0) {
    unsigned int v7 = v3;
  }
  if ((v2 & 0x10) != 0) {
    uint64_t result = v7 + 2;
  }
  else {
    uint64_t result = v7;
  }
  *((_DWORD *)this + 8) = result;
  return result;
}

void awd::metrics::CommCenterNVMSync::CopyFrom(awd::metrics::CommCenterNVMSync *this, const awd::metrics::CommCenterNVMSync *a2)
{
  if (a2 != this)
  {
    (*(void (**)(awd::metrics::CommCenterNVMSync *))(*(void *)this + 32))(this);
    awd::metrics::CommCenterNVMSync::MergeFrom(this, a2);
  }
}

uint64_t awd::metrics::CommCenterNVMSync::IsInitialized(awd::metrics::CommCenterNVMSync *this)
{
  return 1;
}

uint64_t awd::metrics::CommCenterNVMSync::Swap(uint64_t this, awd::metrics::CommCenterNVMSync *a2)
{
  if (a2 != (awd::metrics::CommCenterNVMSync *)this)
  {
    uint64_t v2 = *(void *)(this + 8);
    *(void *)(this + 8) = *((void *)a2 + 1);
    *((void *)a2 + 1) = v2;
    LODWORD(v2) = *(_DWORD *)(this + 24);
    *(_DWORD *)(this + 24) = *((_DWORD *)a2 + 6);
    *((_DWORD *)a2 + 6) = v2;
    uint64_t v3 = *(void *)(this + 16);
    *(void *)(this + 16) = *((void *)a2 + 2);
    *((void *)a2 + 2) = v3;
    LOBYTE(v3) = *(unsigned char *)(this + 28);
    *(unsigned char *)(this + 28) = *((unsigned char *)a2 + 28);
    *((unsigned char *)a2 + 28) = v3;
    LOBYTE(v3) = *(unsigned char *)(this + 29);
    *(unsigned char *)(this + 29) = *((unsigned char *)a2 + 29);
    *((unsigned char *)a2 + 29) = v3;
    LODWORD(v3) = *(_DWORD *)(this + 36);
    *(_DWORD *)(this + 36) = *((_DWORD *)a2 + 9);
    *((_DWORD *)a2 + 9) = v3;
    LODWORD(v3) = *(_DWORD *)(this + 32);
    *(_DWORD *)(this + 32) = *((_DWORD *)a2 + 8);
    *((_DWORD *)a2 + 8) = v3;
  }
  return this;
}

double awd::metrics::CommCenterNVMSync::GetTypeName@<D0>(uint64_t a1@<X8>)
{
  uint64_t v3 = (char *)operator new(0x20uLL);
  *(void *)a1 = v3;
  *(_OWORD *)(a1 + 8) = xmmword_1C599E720;
  strcpy(v3, "awd.metrics.CommCenterNVMSync");
  return *(double *)"ommCenterNVMSync";
}

void *awd::metrics::CommCenterAccessoryInformation::SharedCtor(void *this)
{
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  return this;
}

awd::metrics::CommCenterAccessoryInformation *awd::metrics::CommCenterAccessoryInformation::CommCenterAccessoryInformation(awd::metrics::CommCenterAccessoryInformation *this, const awd::metrics::CommCenterAccessoryInformation *a2)
{
  *(void *)this = &unk_1F20FAD68;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  awd::metrics::CommCenterAccessoryInformation::MergeFrom(this, a2);
  return this;
}

{
  *(void *)this = &unk_1F20FAD68;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  awd::metrics::CommCenterAccessoryInformation::MergeFrom(this, a2);
  return this;
}

void sub_1C58BDA84(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

void awd::metrics::CommCenterAccessoryInformation::MergeFrom(awd::metrics::CommCenterAccessoryInformation *this, const awd::metrics::CommCenterAccessoryInformation *a2)
{
  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v8);
  }
  LOBYTE(v4) = *((unsigned char *)a2 + 28);
  if ((_BYTE)v4)
  {
    if (*((unsigned char *)a2 + 28))
    {
      uint64_t v6 = *((void *)a2 + 1);
      *((_DWORD *)this + 7) |= 1u;
      *((void *)this + 1) = v6;
      int v4 = *((_DWORD *)a2 + 7);
      if ((v4 & 2) == 0)
      {
LABEL_6:
        if ((v4 & 4) == 0) {
          return;
        }
        goto LABEL_7;
      }
    }
    else if ((*((unsigned char *)a2 + 28) & 2) == 0)
    {
      goto LABEL_6;
    }
    int v7 = *((_DWORD *)a2 + 4);
    *((_DWORD *)this + 7) |= 2u;
    *((_DWORD *)this + 4) = v7;
    if ((*((_DWORD *)a2 + 7) & 4) == 0) {
      return;
    }
LABEL_7:
    int v5 = *((_DWORD *)a2 + 5);
    *((_DWORD *)this + 7) |= 4u;
    *((_DWORD *)this + 5) = v5;
  }
}

void sub_1C58BDB6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1C58BDB80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1C58BDBDC(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

void awd::metrics::CommCenterAccessoryInformation::~CommCenterAccessoryInformation(awd::metrics::CommCenterAccessoryInformation *this)
{
  *(void *)this = &unk_1F20FAD68;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  *(void *)this = &unk_1F20FAD68;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  void *v1;
  uint64_t vars8;

  *(void *)this = &unk_1F20FAD68;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);

  operator delete(v1);
}

uint64_t awd::metrics::CommCenterAccessoryInformation::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 24) = a2;
  return this;
}

uint64_t awd::metrics::CommCenterAccessoryInformation::default_instance(awd::metrics::CommCenterAccessoryInformation *this, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t result = awd::metrics::CommCenterAccessoryInformation::default_instance_;
  if (!awd::metrics::CommCenterAccessoryInformation::default_instance_)
  {
    awd::metrics::protobuf_AddDesc_CCMetricsABM_2eproto(0, a2, a3, a4);
    return awd::metrics::CommCenterAccessoryInformation::default_instance_;
  }
  return result;
}

void *awd::metrics::CommCenterAccessoryInformation::New(awd::metrics::CommCenterAccessoryInformation *this)
{
  uint64_t result = operator new(0x20uLL);
  *uint64_t result = &unk_1F20FAD68;
  result[1] = 0;
  result[2] = 0;
  result[3] = 0;
  return result;
}

uint64_t awd::metrics::CommCenterAccessoryInformation::Clear(uint64_t this)
{
  if (*(unsigned char *)(this + 28))
  {
    *(void *)(this + 8) = 0;
    *(void *)(this + 16) = 0;
  }
  *(_DWORD *)(this + 28) = 0;
  return this;
}

uint64_t awd::metrics::CommCenterAccessoryInformation::MergePartialFromCodedStream(awd::metrics::CommCenterAccessoryInformation *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  int v4 = (unint64_t *)((char *)this + 8);
  int v5 = (unsigned int *)((char *)this + 16);
  uint64_t v6 = (unsigned int *)((char *)this + 20);
  while (1)
  {
    while (1)
    {
      while (1)
      {
        while (1)
        {
          int v7 = (char *)*((void *)a2 + 1);
          if ((unint64_t)v7 >= *((void *)a2 + 2) || *v7 < 0)
          {
            unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
            *((_DWORD *)a2 + 8) = TagFallback;
            if (!TagFallback) {
              return 1;
            }
          }
          else
          {
            unint64_t TagFallback = *v7;
            *((_DWORD *)a2 + 8) = TagFallback;
            *((void *)a2 + 1) = v7 + 1;
            if (!TagFallback) {
              return 1;
            }
          }
          unsigned int v9 = TagFallback >> 3;
          if (TagFallback >> 3 != 1) {
            break;
          }
          int v10 = TagFallback & 7;
          if ((TagFallback & 7) != 0) {
            goto LABEL_22;
          }
          char v13 = (char *)*((void *)a2 + 1);
          unint64_t v11 = *((void *)a2 + 2);
          if ((unint64_t)v13 >= v11 || *v13 < 0)
          {
            uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2, v4);
            if (!result) {
              return result;
            }
            uint64_t v14 = (unsigned char *)*((void *)a2 + 1);
            unint64_t v11 = *((void *)a2 + 2);
            *((_DWORD *)this + 7) |= 1u;
            if ((unint64_t)v14 < v11) {
              goto LABEL_27;
            }
          }
          else
          {
            *int v4 = *v13;
            uint64_t v14 = v13 + 1;
            *((void *)a2 + 1) = v14;
            *((_DWORD *)this + 7) |= 1u;
            if ((unint64_t)v14 < v11)
            {
LABEL_27:
              if (*v14 == 16)
              {
                unint64_t v15 = v14 + 1;
                *((void *)a2 + 1) = v15;
                if ((unint64_t)v15 < v11) {
                  goto LABEL_29;
                }
LABEL_32:
                uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v5);
                if (!result) {
                  return result;
                }
                int v16 = (unsigned char *)*((void *)a2 + 1);
                unint64_t v11 = *((void *)a2 + 2);
                *((_DWORD *)this + 7) |= 2u;
                if ((unint64_t)v16 < v11) {
                  goto LABEL_34;
                }
              }
            }
          }
        }
        if (v9 != 2) {
          break;
        }
        int v10 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_22;
        }
        unint64_t v15 = (unsigned __int8 *)*((void *)a2 + 1);
        unint64_t v11 = *((void *)a2 + 2);
        if ((unint64_t)v15 >= v11) {
          goto LABEL_32;
        }
LABEL_29:
        if ((char)*v15 < 0) {
          goto LABEL_32;
        }
        unsigned int *v5 = *v15;
        int v16 = v15 + 1;
        *((void *)a2 + 1) = v16;
        *((_DWORD *)this + 7) |= 2u;
        if ((unint64_t)v16 < v11)
        {
LABEL_34:
          if (*v16 == 24)
          {
            int v12 = v16 + 1;
            *((void *)a2 + 1) = v12;
            if ((unint64_t)v12 < v11) {
              goto LABEL_36;
            }
LABEL_39:
            uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v6);
            if (!result) {
              return result;
            }
            uint64_t v19 = *((void *)a2 + 1);
            uint64_t v18 = *((void *)a2 + 2);
            *((_DWORD *)this + 7) |= 4u;
            if (v19 == v18) {
              goto LABEL_41;
            }
          }
        }
      }
      if (v9 != 3) {
        break;
      }
      int v10 = TagFallback & 7;
      if ((TagFallback & 7) != 0) {
        goto LABEL_22;
      }
      int v12 = (unsigned __int8 *)*((void *)a2 + 1);
      unint64_t v11 = *((void *)a2 + 2);
      if ((unint64_t)v12 >= v11) {
        goto LABEL_39;
      }
LABEL_36:
      if ((char)*v12 < 0) {
        goto LABEL_39;
      }
      unsigned int *v6 = *v12;
      int v17 = (char *)(v12 + 1);
      *((void *)a2 + 1) = v17;
      *((_DWORD *)this + 7) |= 4u;
      if (v17 == (char *)v11)
      {
LABEL_41:
        if (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10))
        {
          *((_DWORD *)a2 + 8) = 0;
          uint64_t result = 1;
          *((unsigned char *)a2 + 36) = 1;
          return result;
        }
      }
    }
    int v10 = TagFallback & 7;
LABEL_22:
    if (v10 == 4) {
      return 1;
    }
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) == 0)return 0; {
  }
    }
}

uint64_t awd::metrics::CommCenterAccessoryInformation::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  int v5 = (unsigned int *)this;
  unsigned int v6 = *(_DWORD *)(this + 28);
  if ((v6 & 1) == 0)
  {
    if ((v6 & 2) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, v5[4], (uint64_t)a2, a4);
    if ((v5[7] & 4) == 0) {
      return this;
    }
    goto LABEL_7;
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(void *)(this + 8), (uint64_t)a2, a4);
  unsigned int v6 = v5[7];
  if ((v6 & 2) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v6 & 4) == 0) {
    return this;
  }
LABEL_7:
  uint64_t v7 = v5[5];

  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, v7, (uint64_t)a2, a4);
}

uint64_t awd::metrics::CommCenterAccessoryInformation::ByteSize(awd::metrics::CommCenterAccessoryInformation *this)
{
  LOBYTE(v2) = *((unsigned char *)this + 28);
  if (!(_BYTE)v2)
  {
    uint64_t v3 = 0;
LABEL_6:
    *((_DWORD *)this + 6) = v3;
    return v3;
  }
  if (*((unsigned char *)this + 28))
  {
    uint64_t v3 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*((wireless_diagnostics::google::protobuf::io::CodedOutputStream **)this + 1))
       + 1;
    int v2 = *((_DWORD *)this + 7);
    if ((v2 & 2) == 0) {
      goto LABEL_12;
    }
  }
  else
  {
    uint64_t v3 = 0;
    if ((*((unsigned char *)this + 28) & 2) == 0) {
      goto LABEL_12;
    }
  }
  int v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 4);
  if (v5 >= 0x80)
  {
    int v6 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5) + 1;
    int v2 = *((_DWORD *)this + 7);
  }
  else
  {
    int v6 = 2;
  }
  uint64_t v3 = (v6 + v3);
LABEL_12:
  if ((v2 & 4) == 0) {
    goto LABEL_6;
  }
  uint64_t v7 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 5);
  if (v7 >= 0x80) {
    uint64_t v8 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v7)
  }
       + 1
       + v3;
  else {
    uint64_t v8 = (v3 + 2);
  }
  *((_DWORD *)this + 6) = v8;
  return v8;
}

void awd::metrics::CommCenterAccessoryInformation::CopyFrom(awd::metrics::CommCenterAccessoryInformation *this, const awd::metrics::CommCenterAccessoryInformation *a2)
{
  if (a2 != this)
  {
    (*(void (**)(awd::metrics::CommCenterAccessoryInformation *))(*(void *)this + 32))(this);
    awd::metrics::CommCenterAccessoryInformation::MergeFrom(this, a2);
  }
}

uint64_t awd::metrics::CommCenterAccessoryInformation::IsInitialized(awd::metrics::CommCenterAccessoryInformation *this)
{
  return 1;
}

uint64_t awd::metrics::CommCenterAccessoryInformation::Swap(uint64_t this, awd::metrics::CommCenterAccessoryInformation *a2)
{
  if (a2 != (awd::metrics::CommCenterAccessoryInformation *)this)
  {
    uint64_t v2 = *(void *)(this + 8);
    *(void *)(this + 8) = *((void *)a2 + 1);
    *((void *)a2 + 1) = v2;
    LODWORD(v2) = *(_DWORD *)(this + 16);
    *(_DWORD *)(this + 16) = *((_DWORD *)a2 + 4);
    *((_DWORD *)a2 + 4) = v2;
    LODWORD(v2) = *(_DWORD *)(this + 20);
    *(_DWORD *)(this + 20) = *((_DWORD *)a2 + 5);
    *((_DWORD *)a2 + 5) = v2;
    LODWORD(v2) = *(_DWORD *)(this + 28);
    *(_DWORD *)(this + 28) = *((_DWORD *)a2 + 7);
    *((_DWORD *)a2 + 7) = v2;
    LODWORD(v2) = *(_DWORD *)(this + 24);
    *(_DWORD *)(this + 24) = *((_DWORD *)a2 + 6);
    *((_DWORD *)a2 + 6) = v2;
  }
  return this;
}

double awd::metrics::CommCenterAccessoryInformation::GetTypeName@<D0>(uint64_t a1@<X8>)
{
  uint64_t v3 = (char *)operator new(0x30uLL);
  *(void *)a1 = v3;
  *(_OWORD *)(a1 + 8) = xmmword_1C59A3D70;
  strcpy(v3, "awd.metrics.CommCenterAccessoryInformation");
  return *(double *)"ssoryInformation";
}

double awd::metrics::MetricsCCBasebandReset::SharedCtor(awd::metrics::MetricsCCBasebandReset *this)
{
  uint64_t v1 = MEMORY[0x1E4FBA920];
  *((void *)this + 1) = MEMORY[0x1E4FBA920];
  *((_WORD *)this + 20) = 0;
  double result = 0.0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = v1;
  *((void *)this + 4) = v1;
  *((_DWORD *)this + 11) = 0;
  *((void *)this + 6) = v1;
  *((void *)this + 7) = 0;
  *((void *)this + 8) = 0;
  return result;
}

awd::metrics::MetricsCCBasebandReset *awd::metrics::MetricsCCBasebandReset::MetricsCCBasebandReset(awd::metrics::MetricsCCBasebandReset *this, const awd::metrics::MetricsCCBasebandReset *a2)
{
  uint64_t v3 = MEMORY[0x1E4FBA920];
  *(void *)this = &unk_1F20FADE0;
  *((void *)this + 1) = v3;
  *((_WORD *)this + 20) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = v3;
  *((void *)this + 4) = v3;
  *((_DWORD *)this + 11) = 0;
  *((void *)this + 6) = v3;
  *((void *)this + 7) = 0;
  *((void *)this + 8) = 0;
  awd::metrics::MetricsCCBasebandReset::MergeFrom(this, a2);
  return this;
}

{
  uint64_t v3;

  uint64_t v3 = MEMORY[0x1E4FBA920];
  *(void *)this = &unk_1F20FADE0;
  *((void *)this + 1) = v3;
  *((_WORD *)this + 20) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = v3;
  *((void *)this + 4) = v3;
  *((_DWORD *)this + 11) = 0;
  *((void *)this + 6) = v3;
  *((void *)this + 7) = 0;
  *((void *)this + 8) = 0;
  awd::metrics::MetricsCCBasebandReset::MergeFrom(this, a2);
  return this;
}

void sub_1C58BE2F0(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

void awd::metrics::MetricsCCBasebandReset::MergeFrom(awd::metrics::MetricsCCBasebandReset *this, const awd::metrics::MetricsCCBasebandReset *a2)
{
  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v37);
  }
  int v4 = *((_DWORD *)a2 + 17);
  if (!(_BYTE)v4) {
    goto LABEL_76;
  }
  int v5 = (void **)MEMORY[0x1E4FBA920];
  if ((v4 & 1) == 0) {
    goto LABEL_19;
  }
  int v6 = (void **)*((void *)a2 + 1);
  *((_DWORD *)this + 17) |= 1u;
  uint64_t v7 = (void **)*((void *)this + 1);
  if (v7 == v5)
  {
    uint64_t v7 = (void **)operator new(0x18uLL);
    v7[1] = 0;
    _DWORD v7[2] = 0;
    *uint64_t v7 = 0;
    *((void *)this + 1) = v7;
  }
  if (v7 == v6)
  {
LABEL_19:
    int v10 = *((_DWORD *)a2 + 17);
    if ((v10 & 2) != 0) {
      goto LABEL_25;
    }
    goto LABEL_20;
  }
  char v8 = *((unsigned char *)v6 + 23);
  if (*((char *)v7 + 23) < 0)
  {
    if (v8 >= 0) {
      unint64_t v11 = v6;
    }
    else {
      unint64_t v11 = *v6;
    }
    if (v8 >= 0) {
      size_t v12 = *((unsigned __int8 *)v6 + 23);
    }
    else {
      size_t v12 = (size_t)v6[1];
    }
    std::string::__assign_no_alias<false>(v7, v11, v12);
    goto LABEL_19;
  }
  if ((*((unsigned char *)v6 + 23) & 0x80) != 0)
  {
    std::string::__assign_no_alias<true>(v7, *v6, (size_t)v6[1]);
    int v10 = *((_DWORD *)a2 + 17);
    if ((v10 & 2) != 0) {
      goto LABEL_25;
    }
LABEL_20:
    if ((v10 & 4) != 0) {
      goto LABEL_26;
    }
LABEL_21:
    if ((v10 & 8) != 0) {
      goto LABEL_27;
    }
    goto LABEL_22;
  }
  long long v9 = *(_OWORD *)v6;
  _DWORD v7[2] = v6[2];
  *(_OWORD *)uint64_t v7 = v9;
  int v10 = *((_DWORD *)a2 + 17);
  if ((v10 & 2) == 0) {
    goto LABEL_20;
  }
LABEL_25:
  char v13 = *((unsigned char *)a2 + 40);
  *((_DWORD *)this + 17) |= 2u;
  *((unsigned char *)this + 40) = v13;
  int v10 = *((_DWORD *)a2 + 17);
  if ((v10 & 4) == 0) {
    goto LABEL_21;
  }
LABEL_26:
  int v14 = *((_DWORD *)a2 + 4);
  *((_DWORD *)this + 17) |= 4u;
  *((_DWORD *)this + 4) = v14;
  int v10 = *((_DWORD *)a2 + 17);
  if ((v10 & 8) != 0)
  {
LABEL_27:
    int v15 = *((_DWORD *)a2 + 5);
    *((_DWORD *)this + 17) |= 8u;
    *((_DWORD *)this + 5) = v15;
    if ((*((_DWORD *)a2 + 17) & 0x10) == 0) {
      goto LABEL_42;
    }
    goto LABEL_28;
  }
LABEL_22:
  if ((v10 & 0x10) == 0) {
    goto LABEL_42;
  }
LABEL_28:
  int v16 = (void **)*((void *)a2 + 3);
  *((_DWORD *)this + 17) |= 0x10u;
  int v17 = (void **)*((void *)this + 3);
  if (v17 == v5)
  {
    int v17 = (void **)operator new(0x18uLL);
    v17[1] = 0;
    v17[2] = 0;
    char *v17 = 0;
    *((void *)this + 3) = v17;
  }
  if (v17 == v16)
  {
LABEL_42:
    if ((*((unsigned char *)a2 + 68) & 0x20) == 0) {
      goto LABEL_59;
    }
    goto LABEL_43;
  }
  char v18 = *((unsigned char *)v16 + 23);
  if (*((char *)v17 + 23) < 0)
  {
    if (v18 >= 0) {
      uint64_t v20 = v16;
    }
    else {
      uint64_t v20 = *v16;
    }
    if (v18 >= 0) {
      size_t v21 = *((unsigned __int8 *)v16 + 23);
    }
    else {
      size_t v21 = (size_t)v16[1];
    }
    std::string::__assign_no_alias<false>(v17, v20, v21);
    goto LABEL_42;
  }
  if ((*((unsigned char *)v16 + 23) & 0x80) != 0)
  {
    std::string::__assign_no_alias<true>(v17, *v16, (size_t)v16[1]);
    if ((*((unsigned char *)a2 + 68) & 0x20) == 0) {
      goto LABEL_59;
    }
  }
  else
  {
    long long v19 = *(_OWORD *)v16;
    v17[2] = v16[2];
    *(_OWORD *)int v17 = v19;
    if ((*((unsigned char *)a2 + 68) & 0x20) == 0) {
      goto LABEL_59;
    }
  }
LABEL_43:
  int v22 = (void **)*((void *)a2 + 4);
  *((_DWORD *)this + 17) |= 0x20u;
  int v23 = (void **)*((void *)this + 4);
  if (v23 == v5)
  {
    int v23 = (void **)operator new(0x18uLL);
    v23[1] = 0;
    void v23[2] = 0;
    *int v23 = 0;
    *((void *)this + 4) = v23;
  }
  if (v23 != v22)
  {
    char v24 = *((unsigned char *)v22 + 23);
    if (*((char *)v23 + 23) < 0)
    {
      if (v24 >= 0) {
        int v26 = v22;
      }
      else {
        int v26 = *v22;
      }
      if (v24 >= 0) {
        size_t v27 = *((unsigned __int8 *)v22 + 23);
      }
      else {
        size_t v27 = (size_t)v22[1];
      }
      std::string::__assign_no_alias<false>(v23, v26, v27);
    }
    else if ((*((unsigned char *)v22 + 23) & 0x80) != 0)
    {
      std::string::__assign_no_alias<true>(v23, *v22, (size_t)v22[1]);
    }
    else
    {
      long long v25 = *(_OWORD *)v22;
      void v23[2] = v22[2];
      *(_OWORD *)int v23 = v25;
    }
  }
LABEL_59:
  if ((*((unsigned char *)a2 + 68) & 0x40) == 0) {
    goto LABEL_74;
  }
  unsigned int v28 = (void **)*((void *)a2 + 6);
  *((_DWORD *)this + 17) |= 0x40u;
  unsigned int v29 = (void **)*((void *)this + 6);
  if (v29 == v5)
  {
    unsigned int v29 = (void **)operator new(0x18uLL);
    v29[1] = 0;
    v29[2] = 0;
    *unsigned int v29 = 0;
    *((void *)this + 6) = v29;
  }
  if (v29 == v28)
  {
LABEL_74:
    int v4 = *((_DWORD *)a2 + 17);
    if ((v4 & 0x80) == 0) {
      goto LABEL_76;
    }
    goto LABEL_75;
  }
  char v30 = *((unsigned char *)v28 + 23);
  if (*((char *)v29 + 23) < 0)
  {
    if (v30 >= 0) {
      char v32 = v28;
    }
    else {
      char v32 = *v28;
    }
    if (v30 >= 0) {
      size_t v33 = *((unsigned __int8 *)v28 + 23);
    }
    else {
      size_t v33 = (size_t)v28[1];
    }
    std::string::__assign_no_alias<false>(v29, v32, v33);
    goto LABEL_74;
  }
  if ((*((unsigned char *)v28 + 23) & 0x80) == 0)
  {
    long long v31 = *(_OWORD *)v28;
    v29[2] = v28[2];
    *(_OWORD *)unsigned int v29 = v31;
    int v4 = *((_DWORD *)a2 + 17);
    if ((v4 & 0x80) == 0) {
      goto LABEL_76;
    }
LABEL_75:
    int v34 = *((_DWORD *)a2 + 11);
    *((_DWORD *)this + 17) |= 0x80u;
    *((_DWORD *)this + 11) = v34;
    int v4 = *((_DWORD *)a2 + 17);
    goto LABEL_76;
  }
  std::string::__assign_no_alias<true>(v29, *v28, (size_t)v28[1]);
  int v4 = *((_DWORD *)a2 + 17);
  if ((v4 & 0x80) != 0) {
    goto LABEL_75;
  }
LABEL_76:
  if ((v4 & 0xFF00) != 0)
  {
    if ((v4 & 0x100) != 0)
    {
      uint64_t v35 = *((void *)a2 + 7);
      *((_DWORD *)this + 17) |= 0x100u;
      *((void *)this + 7) = v35;
      int v4 = *((_DWORD *)a2 + 17);
    }
    if ((v4 & 0x200) != 0)
    {
      char v36 = *((unsigned char *)a2 + 41);
      *((_DWORD *)this + 17) |= 0x200u;
      *((unsigned char *)this + 41) = v36;
    }
  }
}

void sub_1C58BE698(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1C58BE6AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1C58BE728(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

void awd::metrics::MetricsCCBasebandReset::~MetricsCCBasebandReset(awd::metrics::MetricsCCBasebandReset *this)
{
  *(void *)this = &unk_1F20FADE0;
  awd::metrics::MetricsCCBasebandReset::SharedDtor(this);

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  uint64_t vars8;

  *(void *)this = &unk_1F20FADE0;
  awd::metrics::MetricsCCBasebandReset::SharedDtor(this);

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  void *v2;
  uint64_t vars8;

  *(void *)this = &unk_1F20FADE0;
  awd::metrics::MetricsCCBasebandReset::SharedDtor(this);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);

  operator delete(v2);
}

void awd::metrics::MetricsCCBasebandReset::SharedDtor(awd::metrics::MetricsCCBasebandReset *this)
{
  uint64_t v2 = *((void *)this + 1);
  uint64_t v3 = MEMORY[0x1E4FBA920];
  if (v2 == MEMORY[0x1E4FBA920] || v2 == 0)
  {
    uint64_t v5 = *((void *)this + 3);
    if (v5 != MEMORY[0x1E4FBA920] && v5 != 0) {
      goto LABEL_28;
    }
LABEL_11:
    uint64_t v7 = *((void *)this + 4);
    if (v7 != v3 && v7 != 0) {
      goto LABEL_34;
    }
LABEL_16:
    uint64_t v9 = *((void *)this + 6);
    if (v9 == v3 || v9 == 0) {
      return;
    }
    goto LABEL_40;
  }
  if (*(char *)(v2 + 23) < 0) {
    operator delete(*(void **)v2);
  }
  operator delete((void *)v2);
  uint64_t v5 = *((void *)this + 3);
  if (v5 == v3 || v5 == 0) {
    goto LABEL_11;
  }
LABEL_28:
  if (*(char *)(v5 + 23) < 0) {
    operator delete(*(void **)v5);
  }
  operator delete((void *)v5);
  uint64_t v7 = *((void *)this + 4);
  if (v7 == v3 || v7 == 0) {
    goto LABEL_16;
  }
LABEL_34:
  if (*(char *)(v7 + 23) < 0) {
    operator delete(*(void **)v7);
  }
  operator delete((void *)v7);
  uint64_t v9 = *((void *)this + 6);
  if (v9 != v3 && v9 != 0)
  {
LABEL_40:
    if (*(char *)(v9 + 23) < 0)
    {
      operator delete(*(void **)v9);
      int v14 = (void *)v9;
    }
    else
    {
      int v14 = (void *)v9;
    }
    operator delete(v14);
  }
}

uint64_t awd::metrics::MetricsCCBasebandReset::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 64) = a2;
  return this;
}

uint64_t awd::metrics::MetricsCCBasebandReset::default_instance(awd::metrics::MetricsCCBasebandReset *this, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t result = awd::metrics::MetricsCCBasebandReset::default_instance_;
  if (!awd::metrics::MetricsCCBasebandReset::default_instance_)
  {
    awd::metrics::protobuf_AddDesc_CCMetricsABM_2eproto(0, a2, a3, a4);
    return awd::metrics::MetricsCCBasebandReset::default_instance_;
  }
  return result;
}

double awd::metrics::MetricsCCBasebandReset::New(awd::metrics::MetricsCCBasebandReset *this)
{
  uint64_t v1 = operator new(0x48uLL);
  uint64_t v2 = MEMORY[0x1E4FBA920];
  *uint64_t v1 = &unk_1F20FADE0;
  v1[1] = v2;
  *((_WORD *)v1 + 20) = 0;
  double result = 0.0;
  v1[2] = 0;
  v1[3] = v2;
  v1[4] = v2;
  *((_DWORD *)v1 + 11) = 0;
  v1[6] = v2;
  v1[7] = 0;
  v1[8] = 0;
  return result;
}

uint64_t awd::metrics::MetricsCCBasebandReset::Clear(uint64_t this)
{
  int v1 = *(_DWORD *)(this + 68);
  if ((_BYTE)v1)
  {
    uint64_t v2 = MEMORY[0x1E4FBA920];
    if (v1)
    {
      uint64_t v3 = *(void *)(this + 8);
      if (v3 != MEMORY[0x1E4FBA920])
      {
        if (*(char *)(v3 + 23) < 0)
        {
          **(unsigned char **)uint64_t v3 = 0;
          *(void *)(v3 + 8) = 0;
          *(unsigned char *)(this + 40) = 0;
          *(void *)(this + 16) = 0;
          if ((*(unsigned char *)(this + 68) & 0x10) == 0) {
            goto LABEL_13;
          }
LABEL_7:
          uint64_t v4 = *(void *)(this + 24);
          if (v4 != v2)
          {
            if (*(char *)(v4 + 23) < 0)
            {
              **(unsigned char **)uint64_t v4 = 0;
              *(void *)(v4 + 8) = 0;
            }
            else
            {
              *(unsigned char *)uint64_t v4 = 0;
              *(unsigned char *)(v4 + 23) = 0;
            }
          }
LABEL_13:
          if ((*(unsigned char *)(this + 68) & 0x20) != 0)
          {
            uint64_t v5 = *(void *)(this + 32);
            if (v5 != v2)
            {
              if (*(char *)(v5 + 23) < 0)
              {
                **(unsigned char **)uint64_t v5 = 0;
                *(void *)(v5 + 8) = 0;
                if ((*(unsigned char *)(this + 68) & 0x40) != 0)
                {
LABEL_18:
                  uint64_t v6 = *(void *)(this + 48);
                  if (v6 != v2)
                  {
                    if (*(char *)(v6 + 23) < 0)
                    {
                      **(unsigned char **)uint64_t v6 = 0;
                      *(void *)(v6 + 8) = 0;
                    }
                    else
                    {
                      *(unsigned char *)uint64_t v6 = 0;
                      *(unsigned char *)(v6 + 23) = 0;
                    }
                  }
                }
LABEL_24:
                *(_DWORD *)(this + 44) = 0;
                int v1 = *(_DWORD *)(this + 68);
                goto LABEL_25;
              }
              *(unsigned char *)uint64_t v5 = 0;
              *(unsigned char *)(v5 + 23) = 0;
            }
          }
          if ((*(unsigned char *)(this + 68) & 0x40) != 0) {
            goto LABEL_18;
          }
          goto LABEL_24;
        }
        *(unsigned char *)uint64_t v3 = 0;
        *(unsigned char *)(v3 + 23) = 0;
      }
    }
    *(unsigned char *)(this + 40) = 0;
    *(void *)(this + 16) = 0;
    if ((*(unsigned char *)(this + 68) & 0x10) == 0) {
      goto LABEL_13;
    }
    goto LABEL_7;
  }
LABEL_25:
  if ((v1 & 0xFF00) != 0)
  {
    *(void *)(this + 56) = 0;
    *(unsigned char *)(this + 41) = 0;
  }
  *(_DWORD *)(this + 68) = 0;
  return this;
}

uint64_t awd::metrics::MetricsCCBasebandReset::MergePartialFromCodedStream(awd::metrics::MetricsCCBasebandReset *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  uint64_t v4 = (unsigned int *)((char *)this + 16);
  uint64_t v5 = (unint64_t *)((char *)this + 56);
  uint64_t v6 = (unsigned int *)((char *)this + 44);
  uint64_t v7 = (unsigned int *)((char *)this + 20);
  uint64_t v8 = MEMORY[0x1E4FBA920];
  while (2)
  {
    uint64_t v9 = (char *)*((void *)a2 + 1);
    if ((unint64_t)v9 >= *((void *)a2 + 2) || *v9 < 0)
    {
      unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
      *((_DWORD *)a2 + 8) = TagFallback;
      if (!TagFallback) {
        return 1;
      }
    }
    else
    {
      unint64_t TagFallback = *v9;
      *((_DWORD *)a2 + 8) = TagFallback;
      *((void *)a2 + 1) = v9 + 1;
      if (!TagFallback) {
        return 1;
      }
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        int v11 = TagFallback & 7;
        if (v11 != 2) {
          goto LABEL_60;
        }
        *((_DWORD *)this + 17) |= 1u;
        if (*((void *)this + 1) == v8)
        {
          size_t v12 = operator new(0x18uLL);
          v12[1] = 0;
          v12[2] = 0;
          void *v12 = 0;
          *((void *)this + 1) = v12;
        }
        uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (result)
        {
          int v15 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v14 = *((void *)a2 + 2);
          if ((unint64_t)v15 < v14 && *v15 == 16)
          {
            int v16 = v15 + 1;
            *((void *)a2 + 1) = v16;
            goto LABEL_18;
          }
          continue;
        }
        return result;
      case 2u:
        int v11 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_60;
        }
        int v16 = (char *)*((void *)a2 + 1);
        unint64_t v14 = *((void *)a2 + 2);
LABEL_18:
        unsigned int v44 = -1431655766;
        if ((unint64_t)v16 < v14 && (*v16 & 0x80000000) == 0)
        {
          unsigned int v17 = *v16;
          char v18 = v16 + 1;
          *((void *)a2 + 1) = v18;
          goto LABEL_92;
        }
        uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v44);
        if (result)
        {
          unsigned int v17 = v44;
          char v18 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v14 = *((void *)a2 + 2);
LABEL_92:
          *((unsigned char *)this + 40) = v17 != 0;
          *((_DWORD *)this + 17) |= 2u;
          if ((unint64_t)v18 >= v14 || *v18 != 24) {
            continue;
          }
          long long v19 = v18 + 1;
          *((void *)a2 + 1) = v19;
          if ((unint64_t)v19 >= v14) {
            goto LABEL_98;
          }
          goto LABEL_95;
        }
        break;
      case 3u:
        int v11 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_60;
        }
        long long v19 = (char *)*((void *)a2 + 1);
        unint64_t v14 = *((void *)a2 + 2);
        if ((unint64_t)v19 >= v14) {
          goto LABEL_98;
        }
LABEL_95:
        if (*v19 < 0)
        {
LABEL_98:
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v4);
          if (!result) {
            return result;
          }
          size_t v40 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v42 = *((void *)a2 + 2);
          int v41 = *((_DWORD *)this + 17) | 4;
          *((_DWORD *)this + 17) = v41;
          if ((unint64_t)v40 >= v42) {
            continue;
          }
        }
        else
        {
          *uint64_t v4 = *v19;
          size_t v40 = v19 + 1;
          *((void *)a2 + 1) = v40;
          int v41 = *((_DWORD *)this + 17) | 4;
          *((_DWORD *)this + 17) = v41;
          if ((unint64_t)v40 >= v14) {
            continue;
          }
        }
        if (*v40 != 34) {
          continue;
        }
        *((void *)a2 + 1) = v40 + 1;
        *((_DWORD *)this + 17) = v41 | 0x10;
        if (*((void *)this + 3) == v8)
        {
LABEL_26:
          uint64_t v20 = operator new(0x18uLL);
          v20[1] = 0;
          unint64_t v20[2] = 0;
          void *v20 = 0;
          *((void *)this + 3) = v20;
        }
LABEL_27:
        uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!result) {
          return result;
        }
        int v22 = (unsigned char *)*((void *)a2 + 1);
        unint64_t v21 = *((void *)a2 + 2);
        if ((unint64_t)v22 >= v21 || *v22 != 40) {
          continue;
        }
        int v23 = v22 + 1;
        *((void *)a2 + 1) = v23;
        if ((unint64_t)v23 >= v21) {
          goto LABEL_72;
        }
LABEL_34:
        if (*v23 < 0)
        {
LABEL_72:
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2, v5);
          if (!result) {
            return result;
          }
          char v24 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v21 = *((void *)a2 + 2);
          *((_DWORD *)this + 17) |= 0x100u;
          if ((unint64_t)v24 >= v21) {
            continue;
          }
        }
        else
        {
          unint64_t *v5 = *v23;
          char v24 = v23 + 1;
          *((void *)a2 + 1) = v24;
          *((_DWORD *)this + 17) |= 0x100u;
          if ((unint64_t)v24 >= v21) {
            continue;
          }
        }
        if (*v24 != 48) {
          continue;
        }
        long long v25 = v24 + 1;
        *((void *)a2 + 1) = v25;
LABEL_76:
        unsigned int v43 = -1431655766;
        if ((unint64_t)v25 >= v21 || *v25 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v43);
          if (!result) {
            return result;
          }
          unsigned int v35 = v43;
          char v36 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v21 = *((void *)a2 + 2);
        }
        else
        {
          unsigned int v35 = *v25;
          char v36 = v25 + 1;
          *((void *)a2 + 1) = v36;
        }
        *((unsigned char *)this + 41) = v35 != 0;
        int v39 = *((_DWORD *)this + 17) | 0x200;
        *((_DWORD *)this + 17) = v39;
        if ((unint64_t)v36 >= v21 || *v36 != 58) {
          continue;
        }
        *((void *)a2 + 1) = v36 + 1;
        *((_DWORD *)this + 17) = v39 | 0x20;
        if (*((void *)this + 4) == v8)
        {
LABEL_41:
          int v26 = operator new(0x18uLL);
          v26[1] = 0;
          v26[2] = 0;
          void *v26 = 0;
          *((void *)this + 4) = v26;
        }
LABEL_42:
        uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!result) {
          return result;
        }
        size_t v27 = (unsigned char *)*((void *)a2 + 1);
        if ((unint64_t)v27 >= *((void *)a2 + 2) || *v27 != 66) {
          continue;
        }
        *((void *)a2 + 1) = v27 + 1;
LABEL_47:
        *((_DWORD *)this + 17) |= 0x40u;
        if (*((void *)this + 6) == v8)
        {
          unsigned int v28 = operator new(0x18uLL);
          v28[1] = 0;
          void v28[2] = 0;
          void *v28 = 0;
          *((void *)this + 6) = v28;
        }
        uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!result) {
          return result;
        }
        char v30 = (unsigned char *)*((void *)a2 + 1);
        unint64_t v29 = *((void *)a2 + 2);
        if ((unint64_t)v30 >= v29 || *v30 != 72) {
          continue;
        }
        long long v31 = v30 + 1;
        *((void *)a2 + 1) = v31;
        if ((unint64_t)v31 >= v29) {
          goto LABEL_64;
        }
LABEL_56:
        if (*v31 < 0)
        {
LABEL_64:
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v6);
          if (!result) {
            return result;
          }
          char v32 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v29 = *((void *)a2 + 2);
          *((_DWORD *)this + 17) |= 0x80u;
          if ((unint64_t)v32 >= v29) {
            continue;
          }
        }
        else
        {
          unsigned int *v6 = *v31;
          char v32 = v31 + 1;
          *((void *)a2 + 1) = v32;
          *((_DWORD *)this + 17) |= 0x80u;
          if ((unint64_t)v32 >= v29) {
            continue;
          }
        }
        if (*v32 != 80) {
          continue;
        }
        size_t v33 = v32 + 1;
        *((void *)a2 + 1) = v33;
LABEL_68:
        if ((unint64_t)v33 >= v29 || *v33 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v7);
          if (!result) {
            return result;
          }
          uint64_t v38 = *((void *)a2 + 1);
          uint64_t v37 = *((void *)a2 + 2);
          *((_DWORD *)this + 17) |= 8u;
          if (v38 != v37) {
            continue;
          }
        }
        else
        {
          *uint64_t v7 = *v33;
          int v34 = (unsigned __int8 *)(v33 + 1);
          *((void *)a2 + 1) = v34;
          *((_DWORD *)this + 17) |= 8u;
          if (v34 != (unsigned __int8 *)v29) {
            continue;
          }
        }
        if (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10))
        {
          *((_DWORD *)a2 + 8) = 0;
          uint64_t result = 1;
          *((unsigned char *)a2 + 36) = 1;
          return result;
        }
        continue;
      case 4u:
        int v11 = TagFallback & 7;
        if (v11 != 2) {
          goto LABEL_60;
        }
        *((_DWORD *)this + 17) |= 0x10u;
        if (*((void *)this + 3) == v8) {
          goto LABEL_26;
        }
        goto LABEL_27;
      case 5u:
        int v11 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_60;
        }
        int v23 = (char *)*((void *)a2 + 1);
        unint64_t v21 = *((void *)a2 + 2);
        if ((unint64_t)v23 < v21) {
          goto LABEL_34;
        }
        goto LABEL_72;
      case 6u:
        int v11 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_60;
        }
        long long v25 = (char *)*((void *)a2 + 1);
        unint64_t v21 = *((void *)a2 + 2);
        goto LABEL_76;
      case 7u:
        int v11 = TagFallback & 7;
        if (v11 != 2) {
          goto LABEL_60;
        }
        *((_DWORD *)this + 17) |= 0x20u;
        if (*((void *)this + 4) == v8) {
          goto LABEL_41;
        }
        goto LABEL_42;
      case 8u:
        int v11 = TagFallback & 7;
        if (v11 == 2) {
          goto LABEL_47;
        }
        goto LABEL_60;
      case 9u:
        int v11 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_60;
        }
        long long v31 = (char *)*((void *)a2 + 1);
        unint64_t v29 = *((void *)a2 + 2);
        if ((unint64_t)v31 < v29) {
          goto LABEL_56;
        }
        goto LABEL_64;
      case 0xAu:
        int v11 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_60;
        }
        size_t v33 = (char *)*((void *)a2 + 1);
        unint64_t v29 = *((void *)a2 + 2);
        goto LABEL_68;
      default:
        int v11 = TagFallback & 7;
LABEL_60:
        if (v11 == 4) {
          return 1;
        }
        if (wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback))continue; {
        return 0;
        }
    }
    return result;
  }
}

uint64_t awd::metrics::MetricsCCBasebandReset::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = this;
  int v6 = *(_DWORD *)(this + 68);
  if (v6)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
    int v6 = *(_DWORD *)(v5 + 68);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_14;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(unsigned __int8 *)(v5 + 40), (uint64_t)a2, a4);
  int v6 = *(_DWORD *)(v5 + 68);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 0x10) == 0) {
      goto LABEL_5;
    }
    goto LABEL_15;
  }
LABEL_14:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, *(unsigned int *)(v5 + 16), (uint64_t)a2, a4);
  int v6 = *(_DWORD *)(v5 + 68);
  if ((v6 & 0x10) == 0)
  {
LABEL_5:
    if ((v6 & 0x100) == 0) {
      goto LABEL_6;
    }
    goto LABEL_16;
  }
LABEL_15:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  int v6 = *(_DWORD *)(v5 + 68);
  if ((v6 & 0x100) == 0)
  {
LABEL_6:
    if ((v6 & 0x200) == 0) {
      goto LABEL_7;
    }
    goto LABEL_17;
  }
LABEL_16:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, *(void *)(v5 + 56), (uint64_t)a2, a4);
  int v6 = *(_DWORD *)(v5 + 68);
  if ((v6 & 0x200) == 0)
  {
LABEL_7:
    if ((v6 & 0x20) == 0) {
      goto LABEL_8;
    }
    goto LABEL_18;
  }
LABEL_17:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6, *(unsigned __int8 *)(v5 + 41), (uint64_t)a2, a4);
  int v6 = *(_DWORD *)(v5 + 68);
  if ((v6 & 0x20) == 0)
  {
LABEL_8:
    if ((v6 & 0x40) == 0) {
      goto LABEL_9;
    }
    goto LABEL_19;
  }
LABEL_18:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  int v6 = *(_DWORD *)(v5 + 68);
  if ((v6 & 0x40) == 0)
  {
LABEL_9:
    if ((v6 & 0x80) == 0) {
      goto LABEL_10;
    }
LABEL_20:
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)9, *(unsigned int *)(v5 + 44), (uint64_t)a2, a4);
    if ((*(_DWORD *)(v5 + 68) & 8) == 0) {
      return this;
    }
    goto LABEL_21;
  }
LABEL_19:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  int v6 = *(_DWORD *)(v5 + 68);
  if ((v6 & 0x80) != 0) {
    goto LABEL_20;
  }
LABEL_10:
  if ((v6 & 8) == 0) {
    return this;
  }
LABEL_21:
  uint64_t v7 = *(unsigned int *)(v5 + 20);

  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xA, v7, (uint64_t)a2, a4);
}

uint64_t awd::metrics::MetricsCCBasebandReset::ByteSize(awd::metrics::MetricsCCBasebandReset *this)
{
  int v2 = *((_DWORD *)this + 17);
  if (!(_BYTE)v2)
  {
    uint64_t v3 = 0;
    if ((v2 & 0xFF00) == 0) {
      goto LABEL_73;
    }
    goto LABEL_68;
  }
  if ((v2 & 1) == 0)
  {
    if ((v2 & 2) != 0) {
      uint64_t v3 = 2;
    }
    else {
      uint64_t v3 = 0;
    }
    if ((v2 & 4) == 0) {
      goto LABEL_26;
    }
LABEL_22:
    size_t v12 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 4);
    if (v12 >= 0x80)
    {
      int v13 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v12) + 1;
      int v2 = *((_DWORD *)this + 17);
    }
    else
    {
      int v13 = 2;
    }
    uint64_t v3 = (v13 + v3);
    goto LABEL_26;
  }
  uint64_t v4 = *((void *)this + 1);
  int v5 = *(unsigned __int8 *)(v4 + 23);
  char v6 = v5;
  uint64_t v7 = *(void *)(v4 + 8);
  if ((v5 & 0x80u) == 0) {
    unint64_t v8 = *(unsigned __int8 *)(v4 + 23);
  }
  else {
    unint64_t v8 = v7;
  }
  if (v8 >= 0x80)
  {
    int v10 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v8);
    int v5 = *(unsigned __int8 *)(v4 + 23);
    uint64_t v7 = *(void *)(v4 + 8);
    int v9 = v10 + 1;
    int v2 = *((_DWORD *)this + 17);
    char v6 = *(unsigned char *)(v4 + 23);
  }
  else
  {
    int v9 = 2;
  }
  if (v6 < 0) {
    int v5 = v7;
  }
  unsigned int v11 = v9 + v5;
  if ((v2 & 2) != 0) {
    uint64_t v3 = v11 + 2;
  }
  else {
    uint64_t v3 = v11;
  }
  if ((v2 & 4) != 0) {
    goto LABEL_22;
  }
LABEL_26:
  if ((v2 & 8) != 0)
  {
    unint64_t v14 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 5);
    if (v14 >= 0x80)
    {
      int v15 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v14);
      int v2 = *((_DWORD *)this + 17);
      uint64_t v3 = (v15 + 1 + v3);
      if ((v2 & 0x10) != 0) {
        goto LABEL_37;
      }
    }
    else
    {
      uint64_t v3 = (v3 + 2);
      if ((v2 & 0x10) != 0) {
        goto LABEL_37;
      }
    }
LABEL_28:
    if ((v2 & 0x20) == 0) {
      goto LABEL_29;
    }
    goto LABEL_46;
  }
  if ((v2 & 0x10) == 0) {
    goto LABEL_28;
  }
LABEL_37:
  uint64_t v16 = *((void *)this + 3);
  int v17 = *(unsigned __int8 *)(v16 + 23);
  char v18 = v17;
  uint64_t v19 = *(void *)(v16 + 8);
  if ((v17 & 0x80u) == 0) {
    unint64_t v20 = *(unsigned __int8 *)(v16 + 23);
  }
  else {
    unint64_t v20 = v19;
  }
  if (v20 >= 0x80)
  {
    int v21 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v20);
    int v17 = *(unsigned __int8 *)(v16 + 23);
    uint64_t v19 = *(void *)(v16 + 8);
    int v2 = *((_DWORD *)this + 17);
    char v18 = *(unsigned char *)(v16 + 23);
  }
  else
  {
    int v21 = 1;
  }
  if (v18 < 0) {
    int v17 = v19;
  }
  uint64_t v3 = (v3 + v21 + v17 + 1);
  if ((v2 & 0x20) == 0)
  {
LABEL_29:
    if ((v2 & 0x40) == 0) {
      goto LABEL_30;
    }
    goto LABEL_55;
  }
LABEL_46:
  uint64_t v22 = *((void *)this + 4);
  int v23 = *(unsigned __int8 *)(v22 + 23);
  char v24 = v23;
  uint64_t v25 = *(void *)(v22 + 8);
  if ((v23 & 0x80u) == 0) {
    unint64_t v26 = *(unsigned __int8 *)(v22 + 23);
  }
  else {
    unint64_t v26 = v25;
  }
  if (v26 >= 0x80)
  {
    int v27 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v26);
    int v23 = *(unsigned __int8 *)(v22 + 23);
    uint64_t v25 = *(void *)(v22 + 8);
    int v2 = *((_DWORD *)this + 17);
    char v24 = *(unsigned char *)(v22 + 23);
  }
  else
  {
    int v27 = 1;
  }
  if (v24 < 0) {
    int v23 = v25;
  }
  uint64_t v3 = (v3 + v27 + v23 + 1);
  if ((v2 & 0x40) == 0)
  {
LABEL_30:
    if ((v2 & 0x80) == 0) {
      goto LABEL_31;
    }
    goto LABEL_64;
  }
LABEL_55:
  uint64_t v28 = *((void *)this + 6);
  int v29 = *(unsigned __int8 *)(v28 + 23);
  char v30 = v29;
  uint64_t v31 = *(void *)(v28 + 8);
  if ((v29 & 0x80u) == 0) {
    unint64_t v32 = *(unsigned __int8 *)(v28 + 23);
  }
  else {
    unint64_t v32 = v31;
  }
  if (v32 >= 0x80)
  {
    int v33 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v32);
    int v29 = *(unsigned __int8 *)(v28 + 23);
    uint64_t v31 = *(void *)(v28 + 8);
    int v2 = *((_DWORD *)this + 17);
    char v30 = *(unsigned char *)(v28 + 23);
  }
  else
  {
    int v33 = 1;
  }
  if (v30 < 0) {
    int v29 = v31;
  }
  uint64_t v3 = (v3 + v33 + v29 + 1);
  if ((v2 & 0x80) == 0)
  {
LABEL_31:
    if ((v2 & 0xFF00) == 0) {
      goto LABEL_73;
    }
    goto LABEL_68;
  }
LABEL_64:
  int v34 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 11);
  if (v34 >= 0x80)
  {
    int v35 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v34);
    int v2 = *((_DWORD *)this + 17);
    uint64_t v3 = (v35 + 1 + v3);
    if ((v2 & 0xFF00) == 0) {
      goto LABEL_73;
    }
  }
  else
  {
    uint64_t v3 = (v3 + 2);
    if ((v2 & 0xFF00) == 0) {
      goto LABEL_73;
    }
  }
LABEL_68:
  if ((v2 & 0x100) != 0)
  {
    LODWORD(v3) = v3
                + wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*((wireless_diagnostics::google::protobuf::io::CodedOutputStream **)this
                                                                                              + 7))
                + 1;
    int v2 = *((_DWORD *)this + 17);
  }
  if ((v2 & 0x200) != 0) {
    uint64_t v3 = (v3 + 2);
  }
  else {
    uint64_t v3 = v3;
  }
LABEL_73:
  *((_DWORD *)this + 16) = v3;
  return v3;
}

void awd::metrics::MetricsCCBasebandReset::CopyFrom(awd::metrics::MetricsCCBasebandReset *this, const awd::metrics::MetricsCCBasebandReset *a2)
{
  if (a2 != this)
  {
    (*(void (**)(awd::metrics::MetricsCCBasebandReset *))(*(void *)this + 32))(this);
    awd::metrics::MetricsCCBasebandReset::MergeFrom(this, a2);
  }
}

uint64_t awd::metrics::MetricsCCBasebandReset::IsInitialized(awd::metrics::MetricsCCBasebandReset *this)
{
  return 1;
}

uint64_t awd::metrics::MetricsCCBasebandReset::Swap(uint64_t this, awd::metrics::MetricsCCBasebandReset *a2)
{
  if (a2 != (awd::metrics::MetricsCCBasebandReset *)this)
  {
    uint64_t v2 = *(void *)(this + 8);
    *(void *)(this + 8) = *((void *)a2 + 1);
    *((void *)a2 + 1) = v2;
    LOBYTE(v2) = *(unsigned char *)(this + 40);
    *(unsigned char *)(this + 40) = *((unsigned char *)a2 + 40);
    *((unsigned char *)a2 + 40) = v2;
    LODWORD(v2) = *(_DWORD *)(this + 16);
    *(_DWORD *)(this + 16) = *((_DWORD *)a2 + 4);
    *((_DWORD *)a2 + 4) = v2;
    LODWORD(v2) = *(_DWORD *)(this + 20);
    *(_DWORD *)(this + 20) = *((_DWORD *)a2 + 5);
    *((_DWORD *)a2 + 5) = v2;
    uint64_t v3 = *(void *)(this + 24);
    *(void *)(this + 24) = *((void *)a2 + 3);
    *((void *)a2 + 3) = v3;
    uint64_t v4 = *(void *)(this + 32);
    *(void *)(this + 32) = *((void *)a2 + 4);
    *((void *)a2 + 4) = v4;
    LODWORD(v4) = *(_DWORD *)(this + 44);
    *(_DWORD *)(this + 44) = *((_DWORD *)a2 + 11);
    *((_DWORD *)a2 + 11) = v4;
    uint64_t v5 = *(void *)(this + 48);
    uint64_t v6 = *(void *)(this + 56);
    uint64_t v7 = *((void *)a2 + 7);
    *(void *)(this + 48) = *((void *)a2 + 6);
    *(void *)(this + 56) = v7;
    *((void *)a2 + 6) = v5;
    *((void *)a2 + 7) = v6;
    LOBYTE(v5) = *(unsigned char *)(this + 41);
    *(unsigned char *)(this + 41) = *((unsigned char *)a2 + 41);
    *((unsigned char *)a2 + 41) = v5;
    LODWORD(v5) = *(_DWORD *)(this + 68);
    *(_DWORD *)(this + 68) = *((_DWORD *)a2 + 17);
    *((_DWORD *)a2 + 17) = v5;
    LODWORD(v5) = *(_DWORD *)(this + 64);
    *(_DWORD *)(this + 64) = *((_DWORD *)a2 + 16);
    *((_DWORD *)a2 + 16) = v5;
  }
  return this;
}

char *awd::metrics::MetricsCCBasebandReset::GetTypeName@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = (char *)operator new(0x28uLL);
  *(void *)a1 = result;
  *(_OWORD *)(a1 + 8) = xmmword_1C599E860;
  strcpy(result, "awd.metrics.MetricsCCBasebandReset");
  return result;
}

uint64_t awd::metrics::CommCenterBasebandBootTime::GetCachedSize(awd::metrics::CommCenterBasebandBootTime *this)
{
  return *((unsigned int *)this + 9);
}

uint64_t awd::metrics::CrashReasonType::GetCachedSize(awd::metrics::CrashReasonType *this)
{
  return *((unsigned int *)this + 7);
}

uint64_t awd::metrics::CommCenterBasebanCrash::GetCachedSize(awd::metrics::CommCenterBasebanCrash *this)
{
  return *((unsigned int *)this + 10);
}

uint64_t awd::metrics::CommCenterBasebandTrace::GetCachedSize(awd::metrics::CommCenterBasebandTrace *this)
{
  return *((unsigned int *)this + 8);
}

uint64_t awd::metrics::CommCenterNVMSync::GetCachedSize(awd::metrics::CommCenterNVMSync *this)
{
  return *((unsigned int *)this + 8);
}

uint64_t awd::metrics::CommCenterAccessoryInformation::GetCachedSize(awd::metrics::CommCenterAccessoryInformation *this)
{
  return *((unsigned int *)this + 6);
}

uint64_t awd::metrics::MetricsCCBasebandReset::GetCachedSize(awd::metrics::MetricsCCBasebandReset *this)
{
  return *((unsigned int *)this + 16);
}

std::__shared_weak_count_vtbl **sys::UIObserver::create_default_global@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)(a1 + 8) = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v3 = (sys::UIObserver *)operator new(0x40uLL);
  sys::UIObserver::UIObserver(v3);

  return std::shared_ptr<sys::UIObserver>::shared_ptr[abi:ne180100]<sys::UIObserver,void>((std::__shared_weak_count_vtbl **)a1, (std::__shared_weak_count_vtbl *)v3);
}

void sub_1C58BF78C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

sys::UIObserver *sys::UIObserver::UIObserver(sys::UIObserver *this)
{
  uint64_t v2 = dispatch_queue_create("sys::UIObserver", 0);
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = v2;
  if (v2)
  {
    uint64_t v3 = v2;
    dispatch_retain(v2);
    *((void *)this + 3) = 0;
    dispatch_release(v3);
  }
  else
  {
    *((void *)this + 3) = 0;
  }
  *((void *)this + 4) = &unk_1F20FAFE0;
  uint64_t v4 = (uint64_t *)operator new(0x28uLL);
  boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::signal_impl(v4);
  boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>>::shared_ptr<boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>>((void *)this + 5, (uint64_t)v4);
  *((void *)this + 7) = 0xFFFFFFFF00000000;
  return this;
}

void sub_1C58BF85C(_Unwind_Exception *a1)
{
  operator delete(v2);
  ctu::SharedSynchronizable<DataStallDetection>::~SharedSynchronizable(v1);
  _Unwind_Resume(a1);
}

void sub_1C58BF878(_Unwind_Exception *a1)
{
  ctu::SharedSynchronizable<DataStallDetection>::~SharedSynchronizable(v1);
  _Unwind_Resume(a1);
}

uint64_t sys::UIObserver::handleDisplayLockedChange_sync(uint64_t this)
{
  if (*(_DWORD *)(this + 60) != -1)
  {
    uint64_t v1 = this;
    char v2 = SBSGetScreenLockStatus() != 0;
    return boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::operator()(*(uint64_t ****)(v1 + 40), v2);
  }
  return this;
}

void sys::UIObserver::registerForScreenLockedNotification_sync(sys::UIObserver *this)
{
  char v2 = (std::__shared_weak_count *)*((void *)this + 1);
  if (!v2 || (v3 = *(void *)this, (uint64_t v4 = std::__shared_weak_count::lock(v2)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v5 = v4;
  p_shared_weak_owners = &v4->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v5);
  }
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 1174405120;
  _DWORD v7[2] = ___ZN3sys10UIObserver40registerForScreenLockedNotification_syncEv_block_invoke;
  void v7[3] = &__block_descriptor_tmp_39;
  v7[4] = v3;
  unint64_t v8 = v5;
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  notify_register_dispatch("com.apple.springboard.lockstate", (int *)this + 15, *((dispatch_queue_t *)this + 2), v7);
  if (v8) {
    std::__shared_weak_count::__release_weak(v8);
  }
  std::__shared_weak_count::__release_weak(v5);
}

void sub_1C58BF9F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    std::__shared_weak_count::__release_weak(a14);
  }
  std::__shared_weak_count::__release_weak(v14);
  _Unwind_Resume(a1);
}

void ___ZN3sys10UIObserver40registerForScreenLockedNotification_syncEv_block_invoke(uint64_t a1)
{
  char v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    uint64_t v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      uint64_t v4 = v3;
      uint64_t v5 = *(void *)(a1 + 32);
      if (v5 && *(_DWORD *)(v5 + 60) != -1)
      {
        char v6 = SBSGetScreenLockStatus() != 0;
        boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::operator()(*(uint64_t ****)(v5 + 40), v6);
      }
      if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_1C58BFADC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_32c41_ZTSNSt3__18weak_ptrIN3sys10UIObserverEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c41_ZTSNSt3__18weak_ptrIN3sys10UIObserverEEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

uint64_t sys::UIObserver::unregisterForScreenLockedNotification_sync(sys::UIObserver *this)
{
  uint64_t result = *((unsigned int *)this + 15);
  if (result != -1)
  {
    uint64_t result = notify_cancel(result);
    *((_DWORD *)this + 15) = -1;
  }
  return result;
}

void sys::UIObserver::observe(sys::UIObserver *this@<X0>, char a2@<W1>, std::__shared_weak_count_vtbl **a3@<X8>)
{
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 1);
  if (!v4 || (uint64_t v7 = *(void *)this, (v8 = std::__shared_weak_count::lock(v4)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  int v9 = v8;
  atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
  }
  *a3 = (std::__shared_weak_count_vtbl *)0xAAAAAAAAAAAAAAAALL;
  a3[1] = (std::__shared_weak_count_vtbl *)0xAAAAAAAAAAAAAAAALL;
  int v10 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN3sys10UIObserver7observeEb_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_6_8;
  void aBlock[4] = this;
  void aBlock[5] = v7;
  unint64_t v20 = v9;
  atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  unsigned int v11 = _Block_copy(aBlock);
  size_t v12 = v11;
  if (v11) {
    int v13 = (void (__cdecl *)(std::__shared_weak_count *__hidden))_Block_copy(v11);
  }
  else {
    int v13 = 0;
  }
  v10->~__shared_weak_size_t count = v13;
  *a3 = v10;
  unint64_t v14 = (std::__shared_weak_count *)operator new(0x20uLL);
  v14->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20FB228;
  v14->__shared_owners_ = 0;
  v14->__shared_weak_owners_ = 0;
  v14[1].__vftable = v10;
  a3[1] = (std::__shared_weak_count_vtbl *)v14;
  if (v12) {
    _Block_release(v12);
  }
  v16[0] = MEMORY[0x1E4F143A8];
  v16[1] = 1174405120;
  unint64_t v16[2] = ___ZN3sys10UIObserver7observeEb_block_invoke_7;
  v16[3] = &__block_descriptor_tmp_8_3;
  v16[4] = this;
  v16[5] = v10;
  int v17 = v14;
  atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  char v18 = a2;
  ctu::SharedSynchronizable<sys::UIObserver>::execute_wrapped((uint64_t *)this, (uint64_t)v16);
  int v15 = v17;
  if (v17 && !atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  if (v20) {
    std::__shared_weak_count::__release_weak(v20);
  }
  std::__shared_weak_count::__release_weak(v9);
}

void sub_1C58BFDA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,std::__shared_weak_count *a24)
{
  (*(void (**)(uint64_t))(v27 + 16))(v27);
  if (*v25) {
    _Block_release(*v25);
  }
  operator delete(v25);
  if (v26) {
    _Block_release(v26);
  }
  if (a24)
  {
    std::__shared_weak_count::__release_weak(a24);
    std::__shared_weak_count::__release_weak(v24);
    _Unwind_Resume(a1);
  }
  std::__shared_weak_count::__release_weak(v24);
  _Unwind_Resume(a1);
}

void ___ZN3sys10UIObserver7observeEb_block_invoke(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    uint64_t v3 = a1[4];
    uint64_t v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      uint64_t v5 = v4;
      char v6 = (uint64_t *)a1[5];
      if (v6)
      {
        v7[0] = MEMORY[0x1E4F143A8];
        v7[1] = 0x40000000;
        _DWORD v7[2] = ___ZN3sys10UIObserver7observeEb_block_invoke_2;
        void v7[3] = &__block_descriptor_tmp_5_5;
        v7[4] = v3;
        ctu::SharedSynchronizable<sys::UIObserver>::execute_wrapped(v6, (uint64_t)v7);
      }
      if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

uint64_t ___ZN3sys10UIObserver7observeEb_block_invoke_2(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 32);
  int v2 = *(_DWORD *)(v1 + 56) - 1;
  *(_DWORD *)(v1 + 56) = v2;
  if (!v2)
  {
    uint64_t result = *(unsigned int *)(v1 + 60);
    if (result != -1)
    {
      uint64_t result = notify_cancel(result);
      *(_DWORD *)(v1 + 60) = -1;
    }
  }
  return result;
}

uint64_t __copy_helper_block_e8_40c41_ZTSNSt3__18weak_ptrIN3sys10UIObserverEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c41_ZTSNSt3__18weak_ptrIN3sys10UIObserverEEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void ___ZN3sys10UIObserver7observeEb_block_invoke_7(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  int v3 = *(_DWORD *)(v2 + 56);
  *(_DWORD *)(v2 + 56) = v3 + 1;
  if (v3)
  {
    if (!*(unsigned char *)(a1 + 56)) {
      return;
    }
  }
  else
  {
    sys::UIObserver::registerForScreenLockedNotification_sync((sys::UIObserver *)v2);
    if (!*(unsigned char *)(a1 + 56)) {
      return;
    }
  }
  if (*(_DWORD *)(v2 + 60) != -1)
  {
    char v4 = SBSGetScreenLockStatus() != 0;
    boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::operator()(*(uint64_t ****)(v2 + 40), v4);
  }
}

uint64_t __copy_helper_block_e8_40c51_ZTSNSt3__110shared_ptrIN3sys10UIObserver6HandleEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c51_ZTSNSt3__110shared_ptrIN3sys10UIObserver6HandleEEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

std::__shared_weak_count_vtbl **std::shared_ptr<sys::UIObserver>::shared_ptr[abi:ne180100]<sys::UIObserver,void>(std::__shared_weak_count_vtbl **a1, std::__shared_weak_count_vtbl *a2)
{
  *a1 = a2;
  char v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  uint64_t p_shared_owners = &v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20FAF90;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = a2;
  a1[1] = (std::__shared_weak_count_vtbl *)v4;
  std::string __p = 0;
  if (!a2) {
    return a1;
  }
  char v6 = (std::__shared_weak_count *)a2->~__shared_weak_count_0;
  if (!v6)
  {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    a2->~__shared_weak_size_t count = (void (__cdecl *)(std::__shared_weak_count *__hidden))a2;
    a2->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v4;
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  if (v6->__shared_owners_ == -1)
  {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    a2->~__shared_weak_size_t count = (void (__cdecl *)(std::__shared_weak_count *__hidden))a2;
    a2->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v4;
    std::__shared_weak_count::__release_weak(v6);
    if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL))
    {
LABEL_7:
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
LABEL_8:
  uint64_t v7 = __p;
  std::string __p = 0;
  if (v7) {
    std::default_delete<sys::UIObserver>::operator()[abi:ne180100]((int)&__p, v7);
  }
  return a1;
}

void sub_1C58C01D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  a10 = 0;
  if (v10) {
    std::default_delete<sys::UIObserver>::operator()[abi:ne180100]((int)&a10, v10);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<sys::UIObserver *,std::shared_ptr<sys::UIObserver>::__shared_ptr_default_delete<sys::UIObserver,sys::UIObserver>,std::allocator<sys::UIObserver>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<sys::UIObserver *,std::shared_ptr<sys::UIObserver>::__shared_ptr_default_delete<sys::UIObserver,sys::UIObserver>,std::allocator<sys::UIObserver>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<sys::UIObserver *,std::shared_ptr<sys::UIObserver>::__shared_ptr_default_delete<sys::UIObserver,sys::UIObserver>,std::allocator<sys::UIObserver>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x80000001C59A40B0) {
    return a1 + 24;
  }
  if (((v3 & 0x80000001C59A40B0 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000001C59A40B0)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001C59A40B0 & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 24;
  }
  return 0;
}

void std::default_delete<sys::UIObserver>::operator()[abi:ne180100](int a1, void *__p)
{
  if (__p)
  {
    __p[4] = &unk_1F20FAFE0;
    uint64_t v3 = (atomic_uint *)__p[6];
    if (v3)
    {
      if (atomic_fetch_add(v3 + 2, 0xFFFFFFFF) == 1)
      {
        (*(void (**)(atomic_uint *))(*(void *)v3 + 16))(v3);
        if (atomic_fetch_add(v3 + 3, 0xFFFFFFFF) == 1) {
          (*(void (**)(atomic_uint *))(*(void *)v3 + 24))(v3);
        }
      }
    }
    char v4 = __p[3];
    if (v4) {
      dispatch_release(v4);
    }
    uint64_t v5 = __p[2];
    if (v5) {
      dispatch_release(v5);
    }
    char v6 = (std::__shared_weak_count *)__p[1];
    if (v6) {
      std::__shared_weak_count::__release_weak(v6);
    }
    operator delete(__p);
  }
}

void *boost::signals2::signal<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::~signal(void *a1)
{
  *a1 = &unk_1F20FAFE0;
  uint64_t v2 = (atomic_uint *)a1[2];
  if (v2)
  {
    if (atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
      if (atomic_fetch_add(v2 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v2 + 24))(v2);
      }
    }
  }
  return a1;
}

void boost::signals2::signal<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::~signal(void *__p)
{
  void *__p = &unk_1F20FAFE0;
  uint64_t v2 = (atomic_uint *)__p[2];
  if (v2)
  {
    if (atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
      if (atomic_fetch_add(v2 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v2 + 24))(v2);
      }
    }
  }

  operator delete(__p);
}

uint64_t boost::signals2::signal<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::lock_pimpl@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(result + 16);
  *a2 = *(void *)(result + 8);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 8), 1u, memory_order_relaxed);
  }
  return result;
}

void *boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>>::shared_ptr<boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>>(void *a1, uint64_t a2)
{
  *a1 = a2;
  a1[1] = 0;
  char v4 = operator new(0x18uLL);
  v4[1] = 0x100000001;
  *char v4 = &unk_1F20FB160;
  uint64_t v4[2] = a2;
  a1[1] = v4;
  return a1;
}

void sub_1C58C05D8(void *a1)
{
  __cxa_begin_catch(a1);
  if (v1)
  {
    uint64_t v2 = (atomic_uint *)v1[4];
    if (v2)
    {
      if (atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1)
      {
        (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
        if (atomic_fetch_add(v2 + 3, 0xFFFFFFFF) == 1) {
          (*(void (**)(atomic_uint *))(*(void *)v2 + 24))(v2);
        }
      }
    }
    uint64_t v3 = (atomic_uint *)v1[1];
    if (v3 && atomic_fetch_add(v3 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v3 + 16))(v3);
      if (atomic_fetch_add(v3 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v3 + 24))(v3);
      }
    }
    operator delete(v1);
  }
  __cxa_rethrow();
}

void sub_1C58C06F8(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  uint64_t v3 = *(atomic_uint **)(v1 + 8);
  if (v3 && atomic_fetch_add(v3 + 2, 0xFFFFFFFF) == 1)
  {
    (*(void (**)(atomic_uint *))(*(void *)v3 + 16))(v3);
    if (atomic_fetch_add(v3 + 3, 0xFFFFFFFF) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)v3 + 24))(v3);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t *boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::signal_impl(uint64_t *a1)
{
  uint64_t v2 = (uint64_t *)operator new(0x20uLL);
  uint64_t v14 = (uint64_t)&v14;
  int v15 = &v14;
  v18[0] = 0;
  v18[1] = 0;
  uint64_t v16 = 0;
  int v17 = v18;
  uint64_t v3 = operator new(0x40uLL);
  boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>::grouped_list((uint64_t)v3, (uint64_t)&v14);
  boost::shared_ptr<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>>::shared_ptr<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>>(v2, (uint64_t)v3);
  char v4 = operator new(1uLL);
  v2[2] = (uint64_t)v4;
  v2[3] = 0;
  uint64_t v5 = operator new(0x18uLL);
  v5[1] = 0x100000001;
  void *v5 = &unk_1F20FB0A0;
  v5[2] = v4;
  v2[3] = (uint64_t)v5;
  boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::invocation_state>::shared_ptr<boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::invocation_state>(a1, (uint64_t)v2);
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&v17, v18[0]);
  if (v16)
  {
    uint64_t v6 = v14;
    uint64_t v7 = v15;
    uint64_t v8 = *v15;
    *(void *)(v8 + 8) = *(void *)(v14 + 8);
    **(void **)(v6 + 8) = v8;
    uint64_t v16 = 0;
    if (v7 != &v14)
    {
      do
      {
        int v9 = (uint64_t *)v7[1];
        int v10 = (atomic_uint *)v7[3];
        if (v10)
        {
          if (atomic_fetch_add(v10 + 2, 0xFFFFFFFF) == 1)
          {
            (*(void (**)(atomic_uint *))(*(void *)v10 + 16))(v10);
            if (atomic_fetch_add(v10 + 3, 0xFFFFFFFF) == 1) {
              (*(void (**)(atomic_uint *))(*(void *)v10 + 24))(v10);
            }
          }
        }
        operator delete(v7);
        uint64_t v7 = v9;
      }
      while (v9 != &v14);
    }
  }
  a1[2] = *(void *)*a1;
  unsigned int v11 = (pthread_mutex_t *)operator new(0x40uLL);
  pthread_mutex_init(v11, 0);
  a1[3] = (uint64_t)v11;
  a1[4] = 0;
  size_t v12 = operator new(0x18uLL);
  v12[1] = 0x100000001;
  void *v12 = &unk_1F20FB100;
  v12[2] = v11;
  a1[4] = (uint64_t)v12;
  return a1;
}

void sub_1C58C098C(void *a1)
{
  __cxa_begin_catch(a1);
  pthread_mutex_destroy(v1);
  operator delete(v1);
  __cxa_rethrow();
}

void sub_1C58C09A4()
{
}

void sub_1C58C0A98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  __cxa_end_catch();
  unsigned int v11 = (atomic_uint *)v9[3];
  if (v11 && atomic_fetch_add(v11 + 2, 0xFFFFFFFF) == 1)
  {
    (*(void (**)(atomic_uint *))(*(void *)v11 + 16))(v11);
    if (atomic_fetch_add(v11 + 3, 0xFFFFFFFF) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)v11 + 24))(v11);
    }
  }
  boost::shared_ptr<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>>::~shared_ptr((uint64_t)v9);
  boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>::~grouped_list(&a9);
  operator delete(v9);
  _Unwind_Resume(a1);
}

void sub_1C58C0B50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  unsigned int v11 = v10;
  operator delete(v11);
  boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>::~grouped_list(&a9);
  operator delete(v9);
  _Unwind_Resume(a1);
}

void sub_1C58C0B78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>::~grouped_list(&a9);
  operator delete(v9);
  _Unwind_Resume(a1);
}

uint64_t *boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>::~grouped_list(uint64_t *a1)
{
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)(a1 + 3), (void *)a1[4]);
  if (a1[2])
  {
    uint64_t v2 = *a1;
    uint64_t v3 = (uint64_t *)a1[1];
    uint64_t v4 = *v3;
    *(void *)(v4 + 8) = *(void *)(*a1 + 8);
    **(void **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        uint64_t v5 = (uint64_t *)v3[1];
        uint64_t v6 = (atomic_uint *)v3[3];
        if (v6)
        {
          if (atomic_fetch_add(v6 + 2, 0xFFFFFFFF) == 1)
          {
            (*(void (**)(atomic_uint *))(*(void *)v6 + 16))(v6);
            if (atomic_fetch_add(v6 + 3, 0xFFFFFFFF) == 1) {
              (*(void (**)(atomic_uint *))(*(void *)v6 + 24))(v6);
            }
          }
        }
        operator delete(v3);
        uint64_t v3 = v5;
      }
      while (v5 != a1);
    }
  }
  return a1;
}

uint64_t boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::invocation_state>::~shared_ptr(uint64_t a1)
{
  uint64_t v2 = *(atomic_uint **)(a1 + 8);
  if (v2)
  {
    if (atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
      if (atomic_fetch_add(v2 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v2 + 24))(v2);
      }
    }
  }
  return a1;
}

uint64_t boost::shared_ptr<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>>::~shared_ptr(uint64_t a1)
{
  uint64_t v2 = *(atomic_uint **)(a1 + 8);
  if (v2)
  {
    if (atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
      if (atomic_fetch_add(v2 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v2 + 24))(v2);
      }
    }
  }
  return a1;
}

void boost::detail::sp_counted_impl_p<boost::signals2::optional_last_value<void>>::dispose(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 16);
  if (v1) {
    operator delete(v1);
  }
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::optional_last_value<void>>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::optional_last_value<void>>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::optional_last_value<void>>::get_untyped_deleter()
{
  return 0;
}

void boost::detail::sp_counted_impl_p<boost::signals2::mutex>::dispose(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 16);
  if (v1)
  {
    pthread_mutex_destroy(*(pthread_mutex_t **)(a1 + 16));
    operator delete(v1);
  }
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::mutex>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::mutex>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::mutex>::get_untyped_deleter()
{
  return 0;
}

void boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>>::dispose(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 16);
  if (v1)
  {
    uint64_t v2 = (atomic_uint *)v1[4];
    if (v2)
    {
      if (atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1)
      {
        (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
        if (atomic_fetch_add(v2 + 3, 0xFFFFFFFF) == 1) {
          (*(void (**)(atomic_uint *))(*(void *)v2 + 24))(v2);
        }
      }
    }
    uint64_t v3 = (atomic_uint *)v1[1];
    if (v3)
    {
      if (atomic_fetch_add(v3 + 2, 0xFFFFFFFF) == 1)
      {
        (*(void (**)(atomic_uint *))(*(void *)v3 + 16))(v3);
        if (atomic_fetch_add(v3 + 3, 0xFFFFFFFF) == 1) {
          (*(void (**)(atomic_uint *))(*(void *)v3 + 24))(v3);
        }
      }
    }
    operator delete(v1);
  }
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>>::get_untyped_deleter()
{
  return 0;
}

uint64_t boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::operator()(uint64_t ***a1, char a2)
{
  uint64_t v63 = *MEMORY[0x1E4F143B8];
  char v37 = a2;
  int v35 = 0;
  char v36 = 0;
  *(void *)&long long v3 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v49 = v3;
  long long v50 = v3;
  long long v47 = v3;
  long long v48 = v3;
  long long v45 = v3;
  long long v46 = v3;
  long long v43 = v3;
  long long v44 = v3;
  long long v41 = v3;
  long long v42 = v3;
  uint64_t v4 = (pthread_mutex_t *)a1[3];
  __p[0] = (void *)10;
  __p[1] = &v41;
  v52[0] = 0;
  v52[1] = v4;
  pthread_mutex_lock(v4);
  uint64_t v5 = (atomic_uint *)a1[1];
  if (!v5)
  {
    uint64_t v7 = *a1;
    goto LABEL_14;
  }
  unsigned int explicit = atomic_load_explicit(v5 + 2, memory_order_acquire);
  uint64_t v7 = *a1;
  if (explicit == 1)
  {
    uint64_t v8 = (uint64_t)a1[2];
    if ((uint64_t *)v8 == *v7)
    {
      uint64_t v8 = (*v7)[1];
      *(void *)&long long v38 = v8;
      int v9 = *v7;
      if (*v7 == (uint64_t *)v8)
      {
LABEL_11:
        a1[2] = (uint64_t **)v8;
        goto LABEL_12;
      }
    }
    else
    {
      *(void *)&long long v38 = a1[2];
      int v9 = *v7;
      if (*v7 == (uint64_t *)v8) {
        goto LABEL_11;
      }
    }
    uint64_t v10 = *(void *)(v8 + 16);
    if (*(unsigned char *)(v10 + 24))
    {
      uint64_t v8 = *(void *)(v8 + 8);
    }
    else
    {
      uint64_t v8 = boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>::erase(v9, (int *)(v10 + 64), (uint64_t **)&v38);
      uint64_t v7 = *a1;
    }
    goto LABEL_11;
  }
LABEL_12:
  uint64_t v5 = (atomic_uint *)a1[1];
  if (v5) {
    atomic_fetch_add_explicit(v5 + 2, 1u, memory_order_relaxed);
  }
LABEL_14:
  unsigned int v11 = v36;
  int v35 = v7;
  char v36 = v5;
  if (v11)
  {
    if (atomic_fetch_add(v11 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v11 + 16))(v11);
      if (atomic_fetch_add(v11 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v11 + 24))(v11);
      }
    }
  }
  pthread_mutex_unlock(v52[1]);
  size_t v12 = (char *)__p[1];
  if (__p[1])
  {
    if ((uint64_t)&v52[0][-1].__opaque[55] >= 0)
    {
      int v13 = (char *)__p[1] + 16 * (uint64_t)v52[0];
      do
      {
        uint64_t v14 = (atomic_uint *)*((void *)v13 - 1);
        if (v14)
        {
          if (atomic_fetch_add(v14 + 2, 0xFFFFFFFF) == 1)
          {
            (*(void (**)(atomic_uint *))(*(void *)v14 + 16))(v14);
            if (atomic_fetch_add(v14 + 3, 0xFFFFFFFF) == 1) {
              (*(void (**)(atomic_uint *))(*(void *)v14 + 24))(v14);
            }
          }
        }
        v13 -= 16;
      }
      while (v13 > v12);
    }
    if (__p[0] >= (void *)0xB) {
      operator delete(__p[1]);
    }
  }
  *(void *)&long long v15 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v15 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v54 = v15;
  long long v55 = v15;
  *(_OWORD *)unint64_t v52 = v15;
  long long v53 = v15;
  long long v50 = v15;
  *(_OWORD *)std::string __p = v15;
  long long v48 = v15;
  long long v49 = v15;
  long long v46 = v15;
  long long v47 = v15;
  long long v44 = v15;
  long long v45 = v15;
  long long v42 = v15;
  long long v43 = v15;
  long long v41 = v15;
  LOBYTE(v41) = 0;
  unint64_t v56 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v57 = 10;
  uint64_t v58 = (char *)&v41 + 8;
  uint64_t v59 = 0;
  uint64_t v61 = 0;
  uint64_t v62 = 0;
  dispatch_object_t v60 = &v37;
  uint64_t v16 = v35;
  uint64_t v17 = (uint64_t)*v35;
  unint64_t v32 = &v41;
  int v33 = a1;
  uint64_t v34 = v17;
  *(void *)&long long v30 = *(void *)(v17 + 8);
  *((void *)&v30 + 1) = v17;
  *(void *)&long long v31 = &v41;
  *((void *)&v31 + 1) = v17;
  boost::signals2::detail::slot_call_iterator_t<boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,BOOL>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>,boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>::lock_next_callable(&v30);
  v29[0] = *v16;
  v29[1] = v29[0];
  v29[2] = &v41;
  v29[3] = v29[0];
  boost::signals2::detail::slot_call_iterator_t<boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,BOOL>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>,boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>::lock_next_callable(v29);
  long long v38 = v30;
  long long v39 = v31;
  uint64_t v18 = v29[0];
  uint64_t v19 = v30;
  if ((void)v30 == v29[0])
  {
    if (HIDWORD(v61) <= v61) {
      goto LABEL_48;
    }
LABEL_47:
    boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::force_cleanup_connections((uint64_t)v33, v34);
    goto LABEL_48;
  }
  unint64_t v20 = (unsigned char *)v39;
  if (!*(unsigned char *)v39)
  {
    uint64_t v21 = *(void *)(*(void *)(v30 + 16) + 32);
    uint64_t v22 = *(void *)(v21 + 24);
    if (!v22)
    {
      std::runtime_error::runtime_error(&v40, "call to empty boost::function");
      v40.__vftable = (std::runtime_error_vtbl *)&unk_1F20F2330;
      boost::throw_exception<boost::bad_function_call>(&v40);
    }
    (*(void (**)(uint64_t, void))((v22 & 0xFFFFFFFFFFFFFFFELL) + 8))(v21 + 32, **(unsigned __int8 **)(v39 + 272));
    if (!*v20) {
      unsigned char *v20 = 1;
    }
  }
  *(void *)&long long v38 = *(void *)(v19 + 8);
  boost::signals2::detail::slot_call_iterator_t<boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,BOOL>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>,boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>::lock_next_callable(&v38);
  uint64_t v23 = v39;
  if (*(unsigned char *)v39) {
    *(unsigned char *)long long v39 = 0;
  }
  for (uint64_t i = v38; (void)v38 != v18; uint64_t i = v38)
  {
    uint64_t v25 = *(void *)(*(void *)(i + 16) + 32);
    uint64_t v26 = *(void *)(v25 + 24);
    if (!v26)
    {
      std::runtime_error::runtime_error(&v40, "call to empty boost::function");
      v40.__vftable = (std::runtime_error_vtbl *)&unk_1F20F2330;
      boost::throw_exception<boost::bad_function_call>(&v40);
    }
    (*(void (**)(uint64_t, void))((v26 & 0xFFFFFFFFFFFFFFFELL) + 8))(v25 + 32, **(unsigned __int8 **)(v23 + 272));
    if (!*(unsigned char *)v23) {
      *(unsigned char *)uint64_t v23 = 1;
    }
    *(void *)&long long v38 = *(void *)(i + 8);
    boost::signals2::detail::slot_call_iterator_t<boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,BOOL>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>,boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>::lock_next_callable(&v38);
    uint64_t v23 = v39;
    if (*(unsigned char *)v39) {
      *(unsigned char *)long long v39 = 0;
    }
  }
  if (*((_DWORD *)v32 + 71) > *((_DWORD *)v32 + 70)) {
    goto LABEL_47;
  }
LABEL_48:
  uint64_t result = boost::signals2::detail::slot_call_iterator_cache<boost::signals2::detail::void_type,boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,BOOL>>::~slot_call_iterator_cache((uint64_t)&v41);
  uint64_t v28 = v36;
  if (v36 && atomic_fetch_add(v36 + 2, 0xFFFFFFFF) == 1)
  {
    uint64_t result = (*(uint64_t (**)(atomic_uint *))(*(void *)v28 + 16))(v28);
    if (atomic_fetch_add(v28 + 3, 0xFFFFFFFF) == 1) {
      return (*(uint64_t (**)(atomic_uint *))(*(void *)v28 + 24))(v28);
    }
  }
  return result;
}

void sub_1C58C15C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
}

void sub_1C58C15D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,std::runtime_error a27)
{
  std::runtime_error::~runtime_error(&a27);
  if (a2 != 2)
  {
    boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::invocation_janitor::~invocation_janitor(&v29);
    boost::signals2::detail::slot_call_iterator_cache<boost::signals2::detail::void_type,boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,BOOL>>::~slot_call_iterator_cache((uint64_t)&v31);
    boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::invocation_state>::~shared_ptr((uint64_t)&v30);
    _Unwind_Resume(a1);
  }
  __cxa_begin_catch(a1);
  boost::signals2::detail::connection_body_base::disconnect(*(boost::signals2::detail::connection_body_base **)(a23 + 16));
  __cxa_rethrow();
}

void sub_1C58C1634(_Unwind_Exception *a1, int a2)
{
  __cxa_end_catch();
  if (a2 != 2)
  {
    boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::invocation_janitor::~invocation_janitor(&v4);
    boost::signals2::detail::slot_call_iterator_cache<boost::signals2::detail::void_type,boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,BOOL>>::~slot_call_iterator_cache((uint64_t)&v6);
    boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::invocation_state>::~shared_ptr((uint64_t)&v5);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1C58C1604);
}

void sub_1C58C166C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,unint64_t a49,char *__p,uint64_t a51)
{
  if (__p)
  {
    if (a51 - 1 >= 0)
    {
      unint64_t v51 = &__p[16 * a51];
      do
      {
        unint64_t v52 = (atomic_uint *)*((void *)v51 - 1);
        if (v52)
        {
          if (atomic_fetch_add(v52 + 2, 0xFFFFFFFF) == 1)
          {
            (*(void (**)(atomic_uint *))(*(void *)v52 + 16))(v52);
            if (atomic_fetch_add(v52 + 3, 0xFFFFFFFF) == 1) {
              (*(void (**)(atomic_uint *))(*(void *)v52 + 24))(v52);
            }
          }
        }
        v51 -= 16;
      }
      while (v51 > __p);
    }
    if (a49 >= 0xB) {
      operator delete(__p);
    }
  }
  JUMPOUT(0x1C58C175CLL);
}

void sub_1C58C1738(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  JUMPOUT(0x1C58C1764);
}

uint64_t *boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::invocation_janitor::~invocation_janitor(uint64_t *a1)
{
  if (*(_DWORD *)(*a1 + 284) > *(_DWORD *)(*a1 + 280)) {
    boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::force_cleanup_connections(a1[1], a1[2]);
  }
  return a1;
}

void boost::signals2::detail::slot_call_iterator_t<boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,BOOL>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>,boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>::lock_next_callable(void *a1)
{
  v69[3] = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *a1;
  if (*a1 == a1[3]) {
    return;
  }
  uint64_t v2 = a1;
  if (v1 == a1[1])
  {
LABEL_94:
    uint64_t v47 = v2[3];
    if (v47 != v1)
    {
      *(void *)&long long v48 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v48 + 1) = 0xAAAAAAAAAAAAAAAALL;
      long long v65 = v48;
      long long v66 = v48;
      long long v63 = v48;
      long long v64 = v48;
      long long v61 = v48;
      long long v62 = v48;
      long long v59 = v48;
      long long v60 = v48;
      long long v57 = v48;
      long long v58 = v48;
      uint64_t v49 = *(void *)(v47 + 16);
      *(void *)&long long v67 = 10;
      *((void *)&v67 + 1) = &v57;
      *(void *)&long long v68 = 0;
      *((void *)&v68 + 1) = v49;
      (*(void (**)(uint64_t))(*(void *)v49 + 24))(v49);
      uint64_t v50 = v2[2];
      v2[3] = v2[1];
      unint64_t v51 = *(_DWORD **)(v50 + 288);
      if (v51) {
        boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::detail::connection_body_base>(v51, &v57);
      }
      *(void *)(v50 + 288) = 0;
      (*(void (**)(void))(**((void **)&v68 + 1) + 32))(*((void *)&v68 + 1));
      unint64_t v52 = *((void *)&v67 + 1);
      if (*((void *)&v67 + 1))
      {
        if ((uint64_t)v68 - 1 >= 0)
        {
          unint64_t v53 = *((void *)&v67 + 1) + 16 * v68;
          do
          {
            long long v54 = *(atomic_uint **)(v53 - 8);
            if (v54)
            {
              if (atomic_fetch_add(v54 + 2, 0xFFFFFFFF) == 1)
              {
                (*(void (**)(atomic_uint *))(*(void *)v54 + 16))(v54);
                if (atomic_fetch_add(v54 + 3, 0xFFFFFFFF) == 1) {
                  (*(void (**)(atomic_uint *))(*(void *)v54 + 24))(v54);
                }
              }
            }
            v53 -= 16;
          }
          while (v53 > v52);
        }
        if ((unint64_t)v67 >= 0xB) {
          operator delete(*((void **)&v67 + 1));
        }
      }
    }
    return;
  }
  while (1)
  {
    uint64_t v3 = v2[2];
    uint64_t v4 = *(void *)(v3 + 264);
    if (v4)
    {
      if (v4 - 1 < 0)
      {
        uint64_t v11 = *(void *)(v3 + 264);
      }
      else
      {
        unint64_t v5 = *(void *)(v3 + 256);
        unint64_t v6 = v5 + 24 * v4;
        unint64_t v7 = v6;
        do
        {
          int v8 = *(_DWORD *)(v7 - 24);
          v7 -= 24;
          if (v8 == v8 >> 31)
          {
            int v9 = *(atomic_uint **)(v6 - 8);
            if (v9)
            {
              if (atomic_fetch_add(v9 + 2, 0xFFFFFFFF) == 1)
              {
                (*(void (**)(atomic_uint *))(*(void *)v9 + 16))(v9);
                if (atomic_fetch_add(v9 + 3, 0xFFFFFFFF) == 1) {
                  (*(void (**)(atomic_uint *))(*(void *)v9 + 24))(v9);
                }
              }
            }
          }
          else
          {
            uint64_t v10 = *(void *)(v6 - 16);
            if (v10) {
              (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
            }
          }
          unint64_t v6 = v7;
        }
        while (v7 > v5);
        uint64_t v11 = *(void *)(v3 + 264);
        uint64_t v1 = *v2;
      }
      *(void *)(v3 + 264) = v11 - v4;
    }
    *(void *)&long long v12 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v12 + 1) = 0xAAAAAAAAAAAAAAAALL;
    long long v67 = v12;
    long long v68 = v12;
    long long v65 = v12;
    long long v66 = v12;
    long long v63 = v12;
    long long v64 = v12;
    long long v61 = v12;
    long long v62 = v12;
    long long v59 = v12;
    long long v60 = v12;
    long long v57 = v12;
    long long v58 = v12;
    uint64_t v13 = *(void *)(v1 + 16);
    *(void *)&long long v67 = 10;
    *((void *)&v67 + 1) = &v57;
    *(void *)&long long v68 = 0;
    *((void *)&v68 + 1) = v13;
    (*(void (**)(uint64_t))(*(void *)v13 + 24))(v13);
    uint64_t v14 = *v2;
    uint64_t v15 = *(void *)(*v2 + 16);
    uint64_t v16 = v2[2];
    uint64_t v17 = *(uint64_t **)(v15 + 32);
    if (v17)
    {
      uint64_t v18 = *v17;
      if (*v17 != v17[1])
      {
        while (1)
        {
          memset(v69, 170, 24);
          boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>::apply_visitor<boost::signals2::detail::lock_weak_ptr_visitor const>(v18, (uint64_t)v69);
          if ((*(_DWORD *)v18 ^ (*(int *)v18 >> 31)) == 2)
          {
            if (!(*(unsigned int (**)(void))(**(void **)(v18 + 8) + 24))(*(void *)(v18 + 8))) {
              goto LABEL_22;
            }
          }
          else
          {
            uint64_t v19 = *(void *)(v18 + 16);
            if (v19 && atomic_load_explicit((atomic_uint *volatile)(v19 + 8), memory_order_acquire))
            {
LABEL_22:
              uint64_t v20 = *(void *)(v16 + 264);
              if (v20 == *(void *)(v16 + 248))
              {
                if (v20 == -1)
                {
                  uint64_t v22 = *(void **)(v16 + 256);
                }
                else
                {
                  if (4 * v20 <= (unint64_t)(v20 + 1)) {
                    unint64_t v21 = v20 + 1;
                  }
                  else {
                    unint64_t v21 = 4 * v20;
                  }
                  uint64_t v22 = (void *)(v16 + 8);
                  unint64_t v56 = v21;
                  if (v21 >= 0xB)
                  {
                    if (v21 >= 0xAAAAAAAAAAAAAABLL) {
                      std::__throw_bad_array_new_length[abi:ne180100]();
                    }
                    uint64_t v22 = operator new(24 * v21);
                  }
                  uint64_t v23 = *(void *)(v16 + 256);
                  if (v20)
                  {
                    unint64_t v24 = 0;
                    uint64_t v25 = v23 + 24 * v20;
                    do
                    {
                      uint64_t v26 = (char *)&v22[v24 / 8];
                      uint64_t v27 = v23 + v24;
                      uint64_t v28 = *(void *)(v23 + v24 + 8);
                      if (*(_DWORD *)(v23 + v24) == *(int *)(v23 + v24) >> 31)
                      {
                        *((void *)v26 + 1) = v28;
                        uint64_t v29 = *(void *)(v27 + 16);
                        *((void *)v26 + 2) = v29;
                        if (v29) {
                          atomic_fetch_add_explicit((atomic_uint *volatile)(v29 + 8), 1u, memory_order_relaxed);
                        }
                      }
                      else
                      {
                        *((void *)v26 + 1) = (*(uint64_t (**)(uint64_t))(*(void *)v28 + 16))(v28);
                      }
                      *(_DWORD *)uint64_t v26 = *(_DWORD *)v27 ^ (*(int *)v27 >> 31);
                      v24 += 24;
                    }
                    while (v27 + 24 != v25);
                    uint64_t v23 = *(void *)(v16 + 256);
                    uint64_t v2 = a1;
                  }
                  if (v23) {
                    boost::signals2::detail::auto_buffer<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>,boost::signals2::detail::store_n_objects<10u>,boost::signals2::detail::default_grow_policy,std::allocator<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>>>::auto_buffer_destroy((void *)(v16 + 8));
                  }
                  *(void *)(v16 + 248) = v56;
                  *(void *)(v16 + 256) = v22;
                  uint64_t v20 = *(void *)(v16 + 264);
                }
                char v36 = &v22[3 * v20 + 1];
                if (LODWORD(v69[0]) == SLODWORD(v69[0]) >> 31)
                {
                  *char v36 = v69[1];
                  uint64_t v37 = v69[2];
                  v22[3 * v20 + 2] = v69[2];
                  if (v37) {
                    atomic_fetch_add_explicit((atomic_uint *volatile)(v37 + 8), 1u, memory_order_relaxed);
                  }
                }
                else
                {
                  *char v36 = (*(uint64_t (**)(void))(*(void *)v69[1] + 16))(v69[1]);
                }
                int v35 = (int *)&v22[3 * v20];
              }
              else
              {
                uint64_t v32 = *(void *)(v16 + 256);
                int v33 = (void *)(v32 + 24 * v20 + 8);
                if (LODWORD(v69[0]) == SLODWORD(v69[0]) >> 31)
                {
                  void *v33 = v69[1];
                  uint64_t v34 = v69[2];
                  *(void *)(v32 + 24 * v20 + 16) = v69[2];
                  if (v34) {
                    atomic_fetch_add_explicit((atomic_uint *volatile)(v34 + 8), 1u, memory_order_relaxed);
                  }
                }
                else
                {
                  void *v33 = (*(uint64_t (**)(void))(*(void *)v69[1] + 16))(v69[1]);
                }
                int v35 = (int *)(v32 + 24 * v20);
              }
              char v30 = 0;
              int *v35 = LODWORD(v69[0]) ^ (SLODWORD(v69[0]) >> 31);
              ++*(void *)(v16 + 264);
              if (LODWORD(v69[0]) == SLODWORD(v69[0]) >> 31) {
                goto LABEL_41;
              }
              goto LABEL_61;
            }
          }
          if (*(unsigned char *)(v15 + 24))
          {
            *(unsigned char *)(v15 + 24) = 0;
            boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::detail::connection_body_base>((_DWORD *)v15, &v57);
          }
          char v30 = 1;
          if (LODWORD(v69[0]) == SLODWORD(v69[0]) >> 31)
          {
LABEL_41:
            uint64_t v31 = (atomic_uint *)v69[2];
            if (v69[2])
            {
              if (atomic_fetch_add((atomic_uint *volatile)(v69[2] + 8), 0xFFFFFFFF) == 1)
              {
                (*(void (**)(atomic_uint *))(*(void *)v31 + 16))(v31);
                if (atomic_fetch_add(v31 + 3, 0xFFFFFFFF) == 1) {
                  (*(void (**)(atomic_uint *))(*(void *)v31 + 24))(v31);
                }
              }
            }
            goto LABEL_63;
          }
LABEL_61:
          if (v69[1]) {
            (*(void (**)(void))(*(void *)v69[1] + 8))(v69[1]);
          }
LABEL_63:
          if ((v30 & 1) == 0)
          {
            v18 += 24;
            if (v18 != *(void *)(*(void *)(v15 + 32) + 8)) {
              continue;
            }
          }
          uint64_t v14 = *v2;
          uint64_t v15 = *(void *)(*v2 + 16);
          uint64_t v16 = v2[2];
          break;
        }
      }
    }
    if (*(unsigned char *)(v15 + 24))
    {
      ++*(_DWORD *)(v16 + 280);
      uint64_t v38 = *(void *)(v15 + 16);
      if (v38)
      {
        if (atomic_load_explicit((atomic_uint *volatile)(v38 + 8), memory_order_acquire))
        {
          int v39 = 1;
          goto LABEL_80;
        }
        uint64_t v16 = v2[2];
        uint64_t v14 = *v2;
      }
      v2[3] = v14;
      if (v2[1] == v14)
      {
        long long v42 = *(_DWORD **)(v16 + 288);
        if (v42) {
          boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::detail::connection_body_base>(v42, &v57);
        }
        int v39 = 0;
        *(void *)(v16 + 288) = 0;
      }
      else
      {
        uint64_t v40 = *(void *)(v14 + 16);
        long long v41 = *(_DWORD **)(v16 + 288);
        if (v41) {
          boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::detail::connection_body_base>(v41, &v57);
        }
        *(void *)(v16 + 288) = v40;
        int v39 = 0;
        if (v40) {
          ++*(_DWORD *)(v40 + 28);
        }
      }
    }
    else
    {
      ++*(_DWORD *)(v16 + 284);
      int v39 = 1;
    }
LABEL_80:
    (*(void (**)(void))(**((void **)&v68 + 1) + 32))(*((void *)&v68 + 1));
    unint64_t v43 = *((void *)&v67 + 1);
    if (*((void *)&v67 + 1))
    {
      if ((uint64_t)v68 - 1 >= 0)
      {
        unint64_t v44 = *((void *)&v67 + 1) + 16 * v68;
        do
        {
          long long v45 = *(atomic_uint **)(v44 - 8);
          if (v45)
          {
            if (atomic_fetch_add(v45 + 2, 0xFFFFFFFF) == 1)
            {
              (*(void (**)(atomic_uint *))(*(void *)v45 + 16))(v45);
              if (atomic_fetch_add(v45 + 3, 0xFFFFFFFF) == 1) {
                (*(void (**)(atomic_uint *))(*(void *)v45 + 24))(v45);
              }
            }
          }
          v44 -= 16;
        }
        while (v44 > v43);
      }
      if ((unint64_t)v67 >= 0xB) {
        operator delete(*((void **)&v67 + 1));
      }
    }
    uint64_t v1 = *v2;
    uint64_t v46 = v2[1];
    if (!v39) {
      break;
    }
    uint64_t v1 = *(void *)(v1 + 8);
    *uint64_t v2 = v1;
    if (v1 == v46)
    {
      uint64_t v1 = v46;
      goto LABEL_94;
    }
  }
  if (v1 == v46) {
    goto LABEL_94;
  }
}

void sub_1C58C2084(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  boost::signals2::detail::garbage_collecting_lock<boost::signals2::detail::connection_body_base>::~garbage_collecting_lock((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1C58C209C(_Unwind_Exception *a1)
{
  unint64_t v3 = v1[21];
  if (v3)
  {
    uint64_t v4 = v1[22];
    if (v4 - 1 >= 0)
    {
      unint64_t v5 = v3 + 16 * v4;
      do
      {
        unint64_t v6 = *(atomic_uint **)(v5 - 8);
        if (v6)
        {
          if (atomic_fetch_add(v6 + 2, 0xFFFFFFFF) == 1)
          {
            (*(void (**)(atomic_uint *))(*(void *)v6 + 16))(v6);
            if (atomic_fetch_add(v6 + 3, 0xFFFFFFFF) == 1) {
              (*(void (**)(atomic_uint *))(*(void *)v6 + 24))(v6);
            }
          }
        }
        v5 -= 16;
      }
      while (v5 > v3);
    }
    if (v1[20] >= 0xBuLL)
    {
      operator delete((void *)v1[21]);
      _Unwind_Resume(a1);
    }
  }
  JUMPOUT(0x1C58C23A8);
}

void sub_1C58C2244(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>::~variant(v5 - 128);
  boost::signals2::detail::garbage_collecting_lock<boost::signals2::detail::connection_body_base>::~garbage_collecting_lock((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1C58C2268(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  boost::signals2::detail::garbage_collecting_lock<boost::signals2::detail::connection_body_base>::~garbage_collecting_lock((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1C58C227C(void *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    if (v3)
    {
      uint64_t v4 = (atomic_uint **)(v2 + 16);
      do
      {
        if (*((_DWORD *)v4 - 4) == *((int *)v4 - 4) >> 31)
        {
          uint64_t v5 = *v4;
          if (*v4 && atomic_fetch_add(v5 + 2, 0xFFFFFFFF) == 1)
          {
            (*(void (**)(atomic_uint *))(*(void *)v5 + 16))(v5);
            if (atomic_fetch_add(v5 + 3, 0xFFFFFFFF) == 1) {
              (*(void (**)(atomic_uint *))(*(void *)v5 + 24))(v5);
            }
          }
        }
        else
        {
          uint64_t v6 = (uint64_t)*(v4 - 1);
          if (v6) {
            (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
          }
        }
        v4 += 3;
        v3 -= 24;
      }
      while (v3);
    }
    __cxa_rethrow();
  }
  JUMPOUT(0x1C58C23A8);
}

void sub_1C58C236C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  __cxa_end_catch();
  if (a4 >= 0xB)
  {
    operator delete(v5);
    boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>::~variant(v6 - 128);
    boost::signals2::detail::garbage_collecting_lock<boost::signals2::detail::connection_body_base>::~garbage_collecting_lock((uint64_t)va);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1C58C2248);
}

void sub_1C58C23A0(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void boost::signals2::detail::auto_buffer<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>,boost::signals2::detail::store_n_objects<10u>,boost::signals2::detail::default_grow_policy,std::allocator<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>>>::auto_buffer_destroy(void *a1)
{
  uint64_t v2 = a1[32];
  if (v2 && v2 - 1 >= 0)
  {
    unint64_t v3 = a1[31];
    unint64_t v4 = v3 + 24 * v2;
    unint64_t v5 = v4;
    do
    {
      int v6 = *(_DWORD *)(v5 - 24);
      v5 -= 24;
      if (v6 == v6 >> 31)
      {
        unint64_t v7 = *(atomic_uint **)(v4 - 8);
        if (v7)
        {
          if (atomic_fetch_add(v7 + 2, 0xFFFFFFFF) == 1)
          {
            (*(void (**)(atomic_uint *))(*(void *)v7 + 16))(v7);
            if (atomic_fetch_add(v7 + 3, 0xFFFFFFFF) == 1) {
              (*(void (**)(atomic_uint *))(*(void *)v7 + 24))(v7);
            }
          }
        }
      }
      else
      {
        uint64_t v8 = *(void *)(v4 - 16);
        if (v8) {
          (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
        }
      }
      unint64_t v4 = v5;
    }
    while (v5 > v3);
  }
  if (a1[30] >= 0xBuLL)
  {
    int v9 = (void *)a1[31];
    operator delete(v9);
  }
}

void boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::force_cleanup_connections(uint64_t a1, uint64_t a2)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v22[8] = v4;
  v22[9] = v4;
  void v22[6] = v4;
  v22[7] = v4;
  v22[4] = v4;
  void v22[5] = v4;
  void v22[2] = v4;
  v22[3] = v4;
  v22[0] = v4;
  v22[1] = v4;
  unint64_t v5 = *(pthread_mutex_t **)(a1 + 24);
  unint64_t v23 = 10;
  std::string __p = v22;
  uint64_t v25 = 0;
  uint64_t v26 = v5;
  pthread_mutex_lock(v5);
  if (**(void **)a1 == a2)
  {
    uint64_t v6 = *(void *)(a1 + 8);
    if (!v6 || atomic_load_explicit((atomic_uint *volatile)(v6 + 8), memory_order_acquire) != 1)
    {
      unint64_t v7 = (uint64_t *)operator new(0x20uLL);
      uint64_t v8 = *(uint64_t **)a1;
      uint64_t v9 = **(void **)a1;
      uint64_t v10 = operator new(0x40uLL);
      boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>::grouped_list((uint64_t)v10, v9);
      boost::shared_ptr<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>>::shared_ptr<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>>(v7, (uint64_t)v10);
      _DWORD v7[2] = v8[2];
      uint64_t v11 = v8[3];
      void v7[3] = v11;
      if (v11) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v11 + 8), 1u, memory_order_relaxed);
      }
      boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::invocation_state>::shared_ptr<boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::invocation_state>((uint64_t *)&v21, (uint64_t)v7);
      long long v12 = *(uint64_t **)a1;
      uint64_t v13 = *(atomic_uint **)(a1 + 8);
      *(_OWORD *)a1 = v21;
      *(void *)&long long v21 = v12;
      *((void *)&v21 + 1) = v13;
      if (v13)
      {
        if (atomic_fetch_add(v13 + 2, 0xFFFFFFFF) == 1)
        {
          (*(void (**)(atomic_uint *))(*(void *)v13 + 16))(v13);
          if (atomic_fetch_add(v13 + 3, 0xFFFFFFFF) == 1) {
            (*(void (**)(atomic_uint *))(*(void *)v13 + 24))(v13);
          }
        }
      }
    }
    uint64_t v14 = *(uint64_t ***)a1;
    uint64_t v15 = **(uint64_t ***)a1;
    uint64_t v16 = v15[1];
    *(void *)&long long v21 = v16;
    if (v15 != (uint64_t *)v16)
    {
      do
      {
        while (1)
        {
          uint64_t v17 = *(void *)(v16 + 16);
          if (!*(unsigned char *)(v17 + 24)) {
            break;
          }
          uint64_t v16 = *(void *)(v16 + 8);
          *(void *)&long long v21 = v16;
          uint64_t v15 = *v14;
          if ((uint64_t *)v16 == *v14) {
            goto LABEL_15;
          }
        }
        uint64_t v16 = boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>::erase(v15, (int *)(v17 + 64), (uint64_t **)&v21);
        uint64_t v14 = *(uint64_t ***)a1;
        *(void *)&long long v21 = v16;
        uint64_t v15 = *v14;
      }
      while ((uint64_t *)v16 != *v14);
    }
LABEL_15:
    *(void *)(a1 + 16) = v16;
  }
  pthread_mutex_unlock(v26);
  uint64_t v18 = (char *)__p;
  if (__p)
  {
    if (v25 - 1 >= 0)
    {
      uint64_t v19 = (char *)__p + 16 * v25;
      do
      {
        uint64_t v20 = (atomic_uint *)*((void *)v19 - 1);
        if (v20)
        {
          if (atomic_fetch_add(v20 + 2, 0xFFFFFFFF) == 1)
          {
            (*(void (**)(atomic_uint *))(*(void *)v20 + 16))(v20);
            if (atomic_fetch_add(v20 + 3, 0xFFFFFFFF) == 1) {
              (*(void (**)(atomic_uint *))(*(void *)v20 + 24))(v20);
            }
          }
        }
        v19 -= 16;
      }
      while (v19 > v18);
    }
    if (v23 >= 0xB) {
      operator delete(__p);
    }
  }
}

void sub_1C58C27E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t boost::signals2::detail::slot_call_iterator_cache<boost::signals2::detail::void_type,boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,BOOL>>::~slot_call_iterator_cache(uint64_t a1)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 288);
  if (v2)
  {
    *(void *)&long long v3 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
    uint8_t v8[8] = v3;
    v8[9] = v3;
    v8[6] = v3;
    v8[7] = v3;
    v8[4] = v3;
    void v8[5] = v3;
    void v8[2] = v3;
    v8[3] = v3;
    v8[0] = v3;
    v8[1] = v3;
    unint64_t v9 = 10;
    std::string __p = v8;
    uint64_t v11 = 0;
    uint64_t v12 = v2;
    (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
    boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::detail::connection_body_base>(*(_DWORD **)(a1 + 288), v8);
    (*(void (**)(uint64_t))(*(void *)v12 + 32))(v12);
    long long v4 = (char *)__p;
    if (__p)
    {
      if (v11 - 1 >= 0)
      {
        unint64_t v5 = (char *)__p + 16 * v11;
        do
        {
          uint64_t v6 = (atomic_uint *)*((void *)v5 - 1);
          if (v6)
          {
            if (atomic_fetch_add(v6 + 2, 0xFFFFFFFF) == 1)
            {
              (*(void (**)(atomic_uint *))(*(void *)v6 + 16))(v6);
              if (atomic_fetch_add(v6 + 3, 0xFFFFFFFF) == 1) {
                (*(void (**)(atomic_uint *))(*(void *)v6 + 24))(v6);
              }
            }
          }
          v5 -= 16;
        }
        while (v5 > v4);
      }
      if (v9 >= 0xB) {
        operator delete(__p);
      }
    }
  }
  if (*(void *)(a1 + 256)) {
    boost::signals2::detail::auto_buffer<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>,boost::signals2::detail::store_n_objects<10u>,boost::signals2::detail::default_grow_policy,std::allocator<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>>>::auto_buffer_destroy((void *)(a1 + 8));
  }
  if (*(unsigned char *)a1) {
    *(unsigned char *)a1 = 0;
  }
  return a1;
}

void sub_1C58C2ACC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void ctu::SharedSynchronizable<sys::UIObserver>::execute_wrapped(uint64_t *a1, uint64_t a2)
{
  long long v3 = (std::__shared_weak_count *)a1[1];
  if (!v3 || (v5 = *a1, (uint64_t v6 = std::__shared_weak_count::lock(v3)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  unint64_t v7 = v6;
  uint64_t v8 = a1[2];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 1174405120;
  block[2] = ___ZNK3ctu20SharedSynchronizableIN3sys10UIObserverEE15execute_wrappedEU13block_pointerFvvE_block_invoke;
  block[3] = &unk_1F20FB1E8;
  void block[5] = v5;
  uint64_t v12 = v7;
  uint64_t p_shared_owners = &v7->__shared_owners_;
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  block[4] = a2;
  dispatch_async(v8, block);
  uint64_t v10 = v12;
  if (!v12 || atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      return;
    }
LABEL_8:
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    return;
  }
  ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
  std::__shared_weak_count::__release_weak(v10);
  if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_8;
  }
}

uint64_t ___ZNK3ctu20SharedSynchronizableIN3sys10UIObserverEE15execute_wrappedEU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t __copy_helper_block_e8_40c45_ZTSNSt3__110shared_ptrIKN3sys10UIObserverEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c45_ZTSNSt3__110shared_ptrIKN3sys10UIObserverEEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__shared_ptr_pointer<sys::UIObserver::Handle *,std::shared_ptr<sys::UIObserver::Handle>::__shared_ptr_default_delete<sys::UIObserver::Handle,sys::UIObserver::Handle>,std::allocator<sys::UIObserver::Handle>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<sys::UIObserver::Handle *,std::shared_ptr<sys::UIObserver::Handle>::__shared_ptr_default_delete<sys::UIObserver::Handle,sys::UIObserver::Handle>,std::allocator<sys::UIObserver::Handle>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1 = *(const void ***)(a1 + 24);
  if (v1)
  {
    (*((void (**)(void))*v1 + 2))();
    if (*v1) {
      _Block_release(*v1);
    }
    operator delete(v1);
  }
}

uint64_t std::__shared_ptr_pointer<sys::UIObserver::Handle *,std::shared_ptr<sys::UIObserver::Handle>::__shared_ptr_default_delete<sys::UIObserver::Handle,sys::UIObserver::Handle>,std::allocator<sys::UIObserver::Handle>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x80000001C59A42F4) {
    return a1 + 24;
  }
  if (((v3 & 0x80000001C59A42F4 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000001C59A42F4)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001C59A42F4 & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 24;
  }
  return 0;
}

void LogTracker::create(uint64_t *a1@<X0>, void *a2@<X8>)
{
  *a2 = 0xAAAAAAAAAAAAAAAALL;
  a2[1] = 0xAAAAAAAAAAAAAAAALL;
  long long v4 = operator new(0xE0uLL);
  uint64_t v5 = (uint64_t)v4;
  uint64_t v6 = *a1;
  unint64_t v7 = (std::__shared_weak_count *)a1[1];
  v8[0] = v6;
  v8[1] = (uint64_t)v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  LogTracker::LogTracker((uint64_t)v4, v8);
  *a2 = 0xAAAAAAAAAAAAAAAALL;
  a2[1] = 0xAAAAAAAAAAAAAAAALL;
  std::shared_ptr<LogTracker>::shared_ptr[abi:ne180100]<LogTracker,std::shared_ptr<LogTracker> ctu::SharedSynchronizable<LogTracker>::make_shared_ptr<LogTracker>(LogTracker*)::{lambda(LogTracker*)#1},void>(a2, v5);
  ctu::Loggable<LogTracker,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(*a2 + 48);
  if (v7)
  {
    std::__shared_weak_count::__release_weak(v7);
  }
}

void sub_1C58C2FA8(_Unwind_Exception *a1)
{
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v2);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(a1);
}

uint64_t LogTracker::LogTracker(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  long long v4 = (std::__shared_weak_count *)a2[1];
  if (v4)
  {
    atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  *(void *)a1 = &unk_1F20FC1C8;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = v4;
  if (v4)
  {
    atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    *(void *)(a1 + 24) = 0;
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = 0;
    std::__shared_weak_count::__release_weak(v4);
    *(void *)a1 = &unk_1F20F3340;
    std::__shared_weak_count::__release_weak(v4);
  }
  else
  {
    *(void *)(a1 + 24) = 0;
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = 0;
    *(void *)a1 = &unk_1F20F3340;
  }
  *(void *)a1 = &unk_1F20FB278;
  *(void *)(a1 + 48) = &unk_1F20FB2E8;
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v12, "com.apple.telephony.abm", "logtracker.mod");
  GetABMLogServer(&v10);
  initially_inactive = dispatch_queue_attr_make_initially_inactive(0);
  uint64_t v6 = dispatch_queue_create_with_target_V2("logtracker.mod", initially_inactive, 0);
  dispatch_set_qos_class_floor(v6, QOS_CLASS_DEFAULT, 0);
  dispatch_activate(v6);
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = v6;
  if (v6)
  {
    dispatch_retain(v6);
    *(void *)(a1 + 144) = 0;
    dispatch_release(v6);
  }
  else
  {
    *(void *)(a1 + 144) = 0;
  }
  *(void *)(a1 + 48) = &unk_1F20FB5E8;
  ctu::OsLogContext::OsLogContext();
  ctu::OsLogContext::OsLogContext();
  ctu::LoggerCommonBase::LoggerCommonBase();
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v14);
  *(void *)(a1 + 56) = &unk_1F20F0070;
  unint64_t v7 = v11;
  *(void *)(a1 + 104) = v10;
  *(void *)(a1 + 112) = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v13);
  *(void *)(a1 + 48) = &unk_1F20FB678;
  uint64_t v8 = v11;
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v12);
  *(void *)a1 = &unk_1F20FB278;
  *(void *)(a1 + 48) = &unk_1F20FB2E8;
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 152) = a1 + 160;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(void *)(a1 + 208) = 0;
  return a1;
}

void sub_1C58C32AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15)
{
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&a15);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&a13);
  ctu::SharedSynchronizable<DataStallDetection>::~SharedSynchronizable(v16);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&a11);
  Service::~Service(v15);
  _Unwind_Resume(a1);
}

void sub_1C58C32F0(_Unwind_Exception *a1)
{
  Service::~Service(v1);
  _Unwind_Resume(a1);
}

void LogTracker::~LogTracker(LogTracker *this)
{
  *(void *)this = &unk_1F20FB278;
  *((void *)this + 6) = &unk_1F20FB2E8;
  uint64_t v2 = *((void *)this + 11);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v13 = 0;
    _os_log_impl(&dword_1C5767000, v2, OS_LOG_TYPE_DEFAULT, "#I Gone!", v13, 2u);
  }
  uint64_t v3 = *((void *)this + 26);
  if (v3) {
    dispatch_release(v3);
  }
  long long v4 = (std::__shared_weak_count *)*((void *)this + 24);
  if (!v4 || atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    uint64_t v5 = *((void *)this + 22);
    if (!v5) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  uint64_t v5 = *((void *)this + 22);
  if (v5) {
LABEL_8:
  }
    dispatch_release(v5);
LABEL_9:
  std::__tree<std::__value_type<std::string,std::shared_ptr<support::misc::Watchdog>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<support::misc::Watchdog>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<support::misc::Watchdog>>>>::destroy(*((void *)this + 20));
  *((void *)this + 6) = &unk_1F20FB5E8;
  MEMORY[0x1C8790F40]((char *)this + 56);
  uint64_t v6 = *((void *)this + 18);
  if (v6) {
    dispatch_release(v6);
  }
  unint64_t v7 = *((void *)this + 17);
  if (v7) {
    dispatch_release(v7);
  }
  uint64_t v8 = (std::__shared_weak_count *)*((void *)this + 16);
  if (v8) {
    std::__shared_weak_count::__release_weak(v8);
  }
  *(void *)this = &unk_1F20FC1C8;
  uint64_t v9 = *((void *)this + 3);
  if (v9)
  {
    uint64_t v10 = *((void *)this + 4);
    uint64_t v11 = (void *)*((void *)this + 3);
    if (v10 != v9)
    {
      do
      {
        if (*(char *)(v10 - 1) < 0) {
          operator delete(*(void **)(v10 - 24));
        }
        v10 -= 24;
      }
      while (v10 != v9);
      uint64_t v11 = (void *)*((void *)this + 3);
    }
    *((void *)this + 4) = v9;
    operator delete(v11);
  }
  uint64_t v12 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v12) {
    std::__shared_weak_count::__release_weak(v12);
  }
}

{
  void *v1;
  uint64_t vars8;

  LogTracker::~LogTracker(this);

  operator delete(v1);
}

void non-virtual thunk to'LogTracker::~LogTracker(LogTracker *this)
{
}

{
  void *v1;
  uint64_t vars8;

  LogTracker::~LogTracker((LogTracker *)((char *)this - 48));

  operator delete(v1);
}

const char *LogTracker::getName(LogTracker *this)
{
  return "logtracker.mod";
}

void LogTracker::initialize(void *a1, dispatch_object_t *a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[16];
  if (!v3 || (v5 = a1[15], (uint64_t v6 = std::__shared_weak_count::lock(v3)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  unint64_t v7 = v6;
  p_shared_weak_owners = &v6->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v7);
  }
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  uint64_t v9 = *a2;
  if (*a2)
  {
    dispatch_retain(*a2);
    dispatch_group_enter(v9);
  }
  uint64_t v10 = (std::__shared_weak_count *)a1[16];
  if (!v10 || (uint64_t v11 = a1[15], (v12 = std::__shared_weak_count::lock(v10)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v13 = v12;
  uint64_t v14 = operator new(0x20uLL);
  void *v14 = v5;
  v14[1] = v7;
  uint64_t v14[2] = a1;
  void v14[3] = v9;
  uint64_t v15 = a1[17];
  atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v16 = operator new(0x18uLL);
  *uint64_t v16 = v14;
  v16[1] = v11;
  unint64_t v16[2] = v13;
  dispatch_async_f(v15, v16, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<LogTracker>::execute_wrapped<LogTracker::initialize(dispatch::group_session)::$_0>(LogTracker::initialize(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<LogTracker::initialize(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<LogTracker::initialize(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke);
  if (!atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  uint64_t v17 = (std::__shared_weak_count *)a1[16];
  if (!v17 || (uint64_t v18 = a1[15], (v19 = std::__shared_weak_count::lock(v17)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v20 = v19;
  long long v21 = operator new(8uLL);
  void *v21 = a1;
  uint64_t v22 = a1[17];
  atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
  unint64_t v23 = operator new(0x18uLL);
  *unint64_t v23 = v21;
  v23[1] = v18;
  void v23[2] = v20;
  dispatch_async_f(v22, v23, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<LogTracker>::execute_wrapped<LogTracker::initialize(dispatch::group_session)::$_1>(LogTracker::initialize(dispatch::group_session)::$_1 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<LogTracker::initialize(dispatch::group_session)::$_1,dispatch_queue_s *::default_delete<LogTracker::initialize(dispatch::group_session)::$_1>>)::{lambda(void *)#1}::__invoke);
  if (!atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }

  std::__shared_weak_count::__release_weak(v7);
}

void LogTracker::finishInitialization_sync(LogTracker *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 16);
  if (!v2 || (v3 = *((void *)this + 15), (long long v4 = std::__shared_weak_count::lock(v2)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v5 = v4;
  atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v5);
  }
  uint64_t v6 = (const char *)(*(uint64_t (**)(LogTracker *))(*(void *)this + 16))(this);
  size_t v7 = strlen(v6);
  if (v7 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v8 = (void *)v7;
  if (v7 >= 0x17)
  {
    uint64_t v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17) {
      uint64_t v10 = v7 | 7;
    }
    uint64_t v11 = v10 + 1;
    uint64_t v9 = (void **)operator new(v10 + 1);
    __dst[1] = v8;
    unint64_t v33 = v11 | 0x8000000000000000;
    __dst[0] = v9;
  }
  else
  {
    HIBYTE(v33) = v7;
    uint64_t v9 = __dst;
    if (!v7) {
      goto LABEL_13;
    }
  }
  memmove(v9, v6, (size_t)v8);
LABEL_13:
  *((unsigned char *)v8 + (void)v9) = 0;
  CFTypeRef cf = 0;
  AppleBasebandManager::create();
  long long v12 = *(_OWORD *)buf;
  memset(buf, 0, sizeof(buf));
  uint64_t v13 = (std::__shared_weak_count *)*((void *)this + 24);
  *(_OWORD *)((char *)this + 184) = v12;
  if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  uint64_t v14 = *(std::__shared_weak_count **)&buf[8];
  if (!*(void *)&buf[8]
    || atomic_fetch_add((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    CFTypeRef v15 = cf;
    if (!cf) {
      goto LABEL_20;
    }
    goto LABEL_19;
  }
  ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
  std::__shared_weak_count::__release_weak(v14);
  CFTypeRef v15 = cf;
  if (cf) {
LABEL_19:
  }
    CFRelease(v15);
LABEL_20:
  if (SHIBYTE(v33) < 0)
  {
    operator delete(__dst[0]);
    if (*((void *)this + 23))
    {
LABEL_22:
      uint64_t v16 = (const void *)*MEMORY[0x1E4F4C830];
      size_t v17 = strlen((const char *)*MEMORY[0x1E4F4C830]);
      if (v17 > 0x7FFFFFFFFFFFFFF7) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      uint64_t v18 = (void *)v17;
      if (v17 >= 0x17)
      {
        uint64_t v21 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v17 | 7) != 0x17) {
          uint64_t v21 = v17 | 7;
        }
        uint64_t v22 = v21 + 1;
        uint64_t v19 = operator new(v21 + 1);
        __p[1] = v18;
        unint64_t v30 = v22 | 0x8000000000000000;
        __p[0] = v19;
      }
      else
      {
        HIBYTE(v30) = v17;
        uint64_t v19 = __p;
        if (!v17) {
          goto LABEL_33;
        }
      }
      memmove(v19, v16, (size_t)v18);
LABEL_33:
      *((unsigned char *)v18 + (void)v19) = 0;
      v25[0] = MEMORY[0x1E4F143A8];
      v25[1] = 3321888768;
      v25[2] = ___ZN10LogTracker25finishInitialization_syncEv_block_invoke;
      v25[3] = &__block_descriptor_56_e8_40c35_ZTSNSt3__18weak_ptrI10LogTrackerEE_e70_v24__0_shared_ptr_abm::client::Event____Event_____shared_weak_count__8l;
      v25[4] = this;
      v25[5] = v3;
      uint64_t v26 = v5;
      atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      unint64_t v23 = _Block_copy(v25);
      unint64_t v24 = *((void *)this + 17);
      if (v24) {
        dispatch_retain(*((dispatch_object_t *)this + 17));
      }
      aBlock = v23;
      dispatch_object_t object = v24;
      AppleBasebandManager::setEventHandler();
      if (object) {
        dispatch_release(object);
      }
      if (aBlock) {
        _Block_release(aBlock);
      }
      if (SHIBYTE(v30) < 0) {
        operator delete(__p[0]);
      }
      AppleBasebandManager::eventsOn(*((AppleBasebandManager **)this + 23));
      if (v26) {
        std::__shared_weak_count::__release_weak(v26);
      }
      goto LABEL_43;
    }
  }
  else if (*((void *)this + 23))
  {
    goto LABEL_22;
  }
  uint64_t v20 = *((void *)this + 11);
  if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)long long buf = 0;
    _os_log_error_impl(&dword_1C5767000, v20, OS_LOG_TYPE_ERROR, "Failed to create AppleBasebandManager instance", buf, 2u);
  }
LABEL_43:
  std::__shared_weak_count::__release_weak(v5);
}

void sub_1C58C3B5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a15)
  {
    std::__shared_weak_count::__release_weak(a15);
    std::__shared_weak_count::__release_weak(v30);
    _Unwind_Resume(a1);
  }
  std::__shared_weak_count::__release_weak(v30);
  _Unwind_Resume(a1);
}

void ___ZN10LogTracker25finishInitialization_syncEv_block_invoke(void *a1, abm::client::Event **a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    uint64_t v5 = a1[4];
    uint64_t v6 = std::__shared_weak_count::lock(v3);
    uint64_t v27 = v6;
    if (v6)
    {
      if (!a1[5])
      {
        uint64_t v18 = v6;
LABEL_43:
        if (!atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
        return;
      }
      CFDictionaryRef v25 = (const __CFDictionary *)0xAAAAAAAAAAAAAAAALL;
      abm::client::Event::getData((uint64_t *)&v25, *a2);
      if (v25) {
        size_t v7 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
      }
      else {
        size_t v7 = 0;
      }
      if (v7)
      {
        v24[0] = 0xAAAAAAAAAAAAAAAALL;
        v24[1] = 0xAAAAAAAAAAAAAAAALL;
        ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v24, v25);
        memset(buf, 170, sizeof(buf));
        uint64_t v8 = (const char *)*MEMORY[0x1E4F4C898];
        char v22 = 0;
        LOBYTE(__p[0]) = 0;
        ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)v20, v8);
        ctu::cf::map_adapter::getString();
        MEMORY[0x1C8791110](v20);
        if (v22 < 0) {
          operator delete(__p[0]);
        }
        uint8_t v9 = buf[23];
        if ((buf[23] & 0x80u) == 0) {
          size_t v10 = buf[23];
        }
        else {
          size_t v10 = *(void *)&buf[8];
        }
        if (v10 == strlen((const char *)*MEMORY[0x1E4F4D1E8]))
        {
          uint64_t v11 = (buf[23] & 0x80u) == 0 ? buf : *(uint8_t **)buf;
          if (!memcmp(v11, (const void *)*MEMORY[0x1E4F4D1E8], v10))
          {
            long long v12 = *(NSObject **)(v5 + 88);
            if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
            {
              LOWORD(__p[0]) = 0;
              _os_log_impl(&dword_1C5767000, v12, OS_LOG_TYPE_DEFAULT, "#I Cleaning up log dump db due to change in hardware model", (uint8_t *)__p, 2u);
            }
            pthread_mutex_lock(&ctu::Singleton<LogDumpDB,LogDumpDB,ctu::PthreadMutexGuardPolicy<LogDumpDB>>::sInstance);
            uint64_t v13 = (LogDumpDB *)xmmword_1EBBDD390;
            if (!(void)xmmword_1EBBDD390)
            {
              LogDumpDB::create_default_global((LogDumpDB *)__p);
              long long v14 = *(_OWORD *)__p;
              __p[0] = 0;
              __p[1] = 0;
              CFTypeRef v15 = (std::__shared_weak_count *)*((void *)&xmmword_1EBBDD390 + 1);
              xmmword_1EBBDD390 = v14;
              if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
                std::__shared_weak_count::__release_weak(v15);
              }
              uint64_t v16 = (std::__shared_weak_count *)__p[1];
              if (__p[1] && !atomic_fetch_add((atomic_ullong *volatile)__p[1] + 1, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
                std::__shared_weak_count::__release_weak(v16);
              }
              uint64_t v13 = (LogDumpDB *)xmmword_1EBBDD390;
            }
            size_t v17 = (std::__shared_weak_count *)*((void *)&xmmword_1EBBDD390 + 1);
            v20[0] = v13;
            v20[1] = *((void *)&xmmword_1EBBDD390 + 1);
            if (*((void *)&xmmword_1EBBDD390 + 1)) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&xmmword_1EBBDD390 + 1) + 8), 1uLL, memory_order_relaxed);
            }
            pthread_mutex_unlock(&ctu::Singleton<LogDumpDB,LogDumpDB,ctu::PthreadMutexGuardPolicy<LogDumpDB>>::sInstance);
            LogDumpDB::clearDB(v13);
            if (v17 && !atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
              std::__shared_weak_count::__release_weak(v17);
            }
            uint8_t v9 = buf[23];
          }
        }
        if ((v9 & 0x80) != 0) {
          operator delete(*(void **)buf);
        }
        MEMORY[0x1C8791160](v24);
      }
      else
      {
        uint64_t v19 = *(NSObject **)(v5 + 88);
        if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl(&dword_1C5767000, v19, OS_LOG_TYPE_DEFAULT, "#I Empty info passed", buf, 2u);
        }
      }
      if (v25) {
        CFRelease(v25);
      }
      uint64_t v18 = v27;
      if (v27) {
        goto LABEL_43;
      }
    }
  }
}

void sub_1C58C3F84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24)
{
  pthread_mutex_unlock(&ctu::Singleton<LogDumpDB,LogDumpDB,ctu::PthreadMutexGuardPolicy<LogDumpDB>>::sInstance);
  if (a23 < 0) {
    operator delete(__p);
  }
  MEMORY[0x1C8791160](&a24);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)(v24 - 56));
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v24 - 48);
  _Unwind_Resume(a1);
}

void sub_1C58C4014(_Unwind_Exception *a1)
{
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v1 - 48);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_40c35_ZTSNSt3__18weak_ptrI10LogTrackerEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c35_ZTSNSt3__18weak_ptrI10LogTrackerEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void LogTracker::shutdown(void *a1, dispatch_object_t *a2)
{
  uint64_t v3 = *a2;
  if (*a2)
  {
    dispatch_retain(*a2);
    dispatch_group_enter(v3);
  }
  long long v4 = (std::__shared_weak_count *)a1[16];
  if (!v4 || (v5 = a1[15], (uint64_t v6 = std::__shared_weak_count::lock(v4)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  size_t v7 = v6;
  uint64_t v8 = operator new(0x10uLL);
  void *v8 = a1;
  v8[1] = v3;
  uint8_t v9 = a1[17];
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  size_t v10 = operator new(0x18uLL);
  *size_t v10 = v8;
  v10[1] = v5;
  v10[2] = v7;
  dispatch_async_f(v9, v10, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<LogTracker>::execute_wrapped<LogTracker::shutdown(dispatch::group_session)::$_0>(LogTracker::shutdown(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<LogTracker::shutdown(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<LogTracker::shutdown(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke);
  if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void LogTracker::dumpLogInternal_sync(uint64_t a1, xpc_object_t *a2, const void **a3)
{
  BOOL v50 = 0;
  uint64_t v6 = (const void *)*MEMORY[0x1E4F4C2D8];
  size_t v7 = strlen((const char *)*MEMORY[0x1E4F4C2D8]);
  if (v7 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v8 = (void *)v7;
  if (v7 >= 0x17)
  {
    uint64_t v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17) {
      uint64_t v10 = v7 | 7;
    }
    uint64_t v11 = v10 + 1;
    uint8_t v9 = (void **)operator new(v10 + 1);
    __dst[1] = v8;
    unint64_t v49 = v11 | 0x8000000000000000;
    __dst[0] = v9;
    goto LABEL_8;
  }
  HIBYTE(v49) = v7;
  uint8_t v9 = __dst;
  if (v7) {
LABEL_8:
  }
    memmove(v9, v6, (size_t)v8);
  *((unsigned char *)v8 + (void)v9) = 0;
  memset(&v51, 0, sizeof(v51));
  if (prop::tailspin::get((char *)__dst, (uint64_t)&v51)) {
    util::convert<BOOL>(&v51, &v50, 0);
  }
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v51.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v49) & 0x80000000) == 0)
    {
LABEL_13:
      long long v12 = "ynchronizableIN5radio13HealthService5StateEEE";
      if (v50) {
        goto LABEL_14;
      }
LABEL_23:
      BOOL v50 = 0;
      goto LABEL_30;
    }
  }
  else if ((SHIBYTE(v49) & 0x80000000) == 0)
  {
    goto LABEL_13;
  }
  operator delete(__dst[0]);
  long long v12 = "N3ctu20SharedSynchronizableIN5radio13HealthService5StateEEE" + 14;
  if (!v50) {
    goto LABEL_23;
  }
LABEL_14:
  int IsInternalBuild = TelephonyUtilIsInternalBuild();
  BOOL v50 = IsInternalBuild;
  if (IsInternalBuild)
  {
    long long v14 = *(NSObject **)(a1 + 208);
    if (v14)
    {
      dispatch_retain(*(dispatch_object_t *)(a1 + 208));
      dispatch_group_enter(v14);
    }
    global_queue = dispatch_get_global_queue(21, 0);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = *((void *)v12 + 428);
    block[2] = ___ZN10LogTracker20dumpLogInternal_syncEN3xpc4dictEN8dispatch5blockIU13block_pointerFviS1_EEE_block_invoke;
    block[3] = &__block_descriptor_57_e8_40c30_ZTSN8dispatch13group_sessionE48c15_ZTSN3xpc4dictE_e5_v8__0l;
    block[4] = a1;
    dispatch_group_t group = v14;
    if (v14)
    {
      dispatch_retain(v14);
      dispatch_group_enter(group);
    }
    xpc_object_t v16 = *a2;
    xpc_object_t object = v16;
    if (v16) {
      xpc_retain(v16);
    }
    else {
      xpc_object_t object = xpc_null_create();
    }
    BOOL v47 = v50;
    dispatch_async(global_queue, block);
    xpc_release(object);
    xpc_object_t object = 0;
    if (group)
    {
      dispatch_group_leave(group);
      if (group) {
        dispatch_release(group);
      }
    }
    if (v14)
    {
      dispatch_group_leave(v14);
      dispatch_release(v14);
    }
  }
LABEL_30:
  size_t v17 = *(std::__shared_weak_count **)(a1 + 128);
  if (!v17 || (uint64_t v18 = *(void *)(a1 + 120), (v19 = std::__shared_weak_count::lock(v17)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v20 = v19;
  p_shared_weak_owners = &v19->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v19->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v20);
  }
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = *((void *)v12 + 428);
  aBlock[2] = ___ZN10LogTracker20dumpLogInternal_syncEN3xpc4dictEN8dispatch5blockIU13block_pointerFviS1_EEE_block_invoke_6;
  aBlock[3] = &__block_descriptor_72_e8_40c35_ZTSNSt3__18weak_ptrI10LogTrackerEE56c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE64c15_ZTSN3xpc4dictE_e28_v20__0i8_dict__object__v__12l;
  void aBlock[4] = a1;
  void aBlock[5] = v18;
  long long v41 = v20;
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  if (*a3)
  {
    char v22 = _Block_copy(*a3);
    xpc_object_t v23 = *a2;
    long long v42 = v22;
    xpc_object_t v43 = v23;
    if (v23)
    {
LABEL_36:
      xpc_retain(v23);
      goto LABEL_39;
    }
  }
  else
  {
    xpc_object_t v23 = *a2;
    long long v42 = 0;
    xpc_object_t v43 = v23;
    if (v23) {
      goto LABEL_36;
    }
  }
  xpc_object_t v43 = xpc_null_create();
LABEL_39:
  uint64_t v24 = _Block_copy(aBlock);
  CFDictionaryRef v25 = (const void *)*MEMORY[0x1E4F4CF48];
  size_t v26 = strlen((const char *)*MEMORY[0x1E4F4CF48]);
  if (v26 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  std::string::size_type v27 = v26;
  if (v26 >= 0x17)
  {
    uint64_t v31 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v26 | 7) != 0x17) {
      uint64_t v31 = v26 | 7;
    }
    uint64_t v32 = v31 + 1;
    uint64_t v28 = (std::string *)operator new(v31 + 1);
    v51.__r_.__value_.__l.__size_ = v27;
    v51.__r_.__value_.__r.__words[2] = v32 | 0x8000000000000000;
    v51.__r_.__value_.__r.__words[0] = (std::string::size_type)v28;
  }
  else
  {
    *((unsigned char *)&v51.__r_.__value_.__s + 23) = v26;
    uint64_t v28 = &v51;
    if (!v26)
    {
      v51.__r_.__value_.__s.__data_[0] = 0;
      xpc_object_t v29 = *a2;
      xpc_object_t v39 = v29;
      if (v29) {
        goto LABEL_43;
      }
LABEL_49:
      xpc_object_t v29 = xpc_null_create();
      xpc_object_t v39 = v29;
      if (v24) {
        goto LABEL_44;
      }
      goto LABEL_50;
    }
  }
  memmove(v28, v25, v27);
  v28->__r_.__value_.__s.__data_[v27] = 0;
  xpc_object_t v29 = *a2;
  xpc_object_t v39 = v29;
  if (!v29) {
    goto LABEL_49;
  }
LABEL_43:
  xpc_retain(v29);
  if (v24)
  {
LABEL_44:
    unint64_t v30 = _Block_copy(v24);
    goto LABEL_51;
  }
LABEL_50:
  unint64_t v30 = 0;
LABEL_51:
  uint64_t v38 = v30;
  Service::runCommand(a1, (uint64_t)&v51, &v39, &v38);
  if (v30) {
    _Block_release(v30);
  }
  xpc_release(v29);
  xpc_object_t v39 = 0;
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v51.__r_.__value_.__l.__data_);
  }
  xpc_object_t value = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E4F4CA98]);
  v51.__r_.__value_.__r.__words[0] = (std::string::size_type)value;
  if (value) {
    xpc_retain(value);
  }
  else {
    v51.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
  }
  int v35 = xpc::dyn_cast_or_default((uint64_t *)__p, (xpc *)&v51, (const object *)"", v34);
  LogTracker::sendUserNotificationForDump((uint64_t)v35, (const void **)__p);
  if (v37 < 0) {
    operator delete(__p[0]);
  }
  xpc_release(v51.__r_.__value_.__l.__data_);
  if (v24) {
    _Block_release(v24);
  }
  xpc_release(v43);
  xpc_object_t v43 = 0;
  if (v42) {
    _Block_release(v42);
  }
  if (v41) {
    std::__shared_weak_count::__release_weak(v41);
  }
  std::__shared_weak_count::__release_weak(v20);
}

void sub_1C58C4680(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,std::__shared_weak_count *a24,void *aBlock,xpc_object_t object)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  xpc_release(*(xpc_object_t *)(v28 - 104));
  if (v27) {
    _Block_release(v27);
  }
  xpc_release(object);
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (a24) {
    std::__shared_weak_count::__release_weak(a24);
  }
  std::__shared_weak_count::__release_weak(v26);
  _Unwind_Resume(a1);
}

void sub_1C58C474C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 - 81) < 0) {
    operator delete(*(void **)(v1 - 104));
  }
  if (*(char *)(v1 - 113) < 0) {
    operator delete(*(void **)(v1 - 136));
  }
  _Unwind_Resume(exception_object);
}

void ___ZN10LogTracker20dumpLogInternal_syncEN3xpc4dictEN8dispatch5blockIU13block_pointerFviS1_EEE_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(NSObject **)(v2 + 208);
  uint64_t v6 = v3;
  if (v3)
  {
    dispatch_retain(v3);
    dispatch_group_enter(v3);
  }
  xpc_object_t v4 = *(xpc_object_t *)(a1 + 48);
  xpc_object_t v5 = v4;
  if (v4)
  {
    xpc_retain(v4);
  }
  else
  {
    xpc_object_t v4 = xpc_null_create();
    xpc_object_t v5 = v4;
  }
  LogTracker::diagnosticToolsLog_sync(v2, &v6, &v5, *(unsigned __int8 *)(a1 + 56));
  xpc_release(v4);
  if (v3)
  {
    dispatch_group_leave(v3);
    dispatch_release(v3);
  }
}

void sub_1C58C4840(_Unwind_Exception *a1)
{
  xpc_release(v2);
  if (v1)
  {
    dispatch_group_leave(v1);
    dispatch_release(v1);
  }
  _Unwind_Resume(a1);
}

void LogTracker::diagnosticToolsLog_sync(uint64_t a1, NSObject **a2, xpc_object_t *a3, int a4)
{
  uint64_t v90 = *MEMORY[0x1E4F143B8];
  memset(v88, 170, sizeof(v88));
  xpc_object_t value = xpc_dictionary_get_value(*a3, (const char *)*MEMORY[0x1E4F4C4C8]);
  *(void *)&long long object = value;
  if (value) {
    xpc_retain(value);
  }
  else {
    *(void *)&long long object = xpc_null_create();
  }
  Timestamp::Timestamp((Timestamp *)buf);
  Timestamp::asString(v9, 0, 9, v87);
  xpc::dyn_cast_or_default();
  if (SHIBYTE(v87[2]) < 0) {
    operator delete((void *)v87[0]);
  }
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)buf, *(void **)&buf[8]);
  xpc_release((xpc_object_t)object);
  memset(v87, 170, sizeof(v87));
  xpc_object_t v10 = xpc_dictionary_get_value(*a3, (const char *)*MEMORY[0x1E4F4C7F8]);
  *(void *)long long buf = v10;
  if (v10) {
    xpc_retain(v10);
  }
  else {
    *(void *)long long buf = xpc_null_create();
  }
  xpc::dyn_cast_or_default(v87, (xpc *)buf, (const object *)*MEMORY[0x1E4F4F928], v11);
  xpc_release(*(xpc_object_t *)buf);
  long long v12 = *(NSObject **)(a1 + 88);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v13 = "NO";
    if (a4) {
      uint64_t v13 = "YES";
    }
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = v13;
    _os_log_impl(&dword_1C5767000, v12, OS_LOG_TYPE_DEFAULT, "#I Tailspin: %s", buf, 0xCu);
    long long v12 = *(NSObject **)(a1 + 88);
  }
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    long long v14 = v87;
    if (v87[2] < 0) {
      long long v14 = (uint64_t *)v87[0];
    }
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = v14;
    _os_log_impl(&dword_1C5767000, v12, OS_LOG_TYPE_DEFAULT, "#I DumpPath: %s", buf, 0xCu);
  }
  unint64_t v85 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v86 = 0xAAAAAAAAAAAAAAAALL;
  GetABMLogServer(&v83);
  abm::HelperClient::create();
  CFTypeRef v15 = v84;
  if (v84 && !atomic_fetch_add(&v84->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
    if (v85) {
      goto LABEL_20;
    }
  }
  else if (v85)
  {
LABEL_20:
    xpc_object_t v16 = *(std::__shared_weak_count **)(a1 + 128);
    if (!v16 || (v17 = *(void *)(a1 + 120), (uint64_t v18 = std::__shared_weak_count::lock(v16)) == 0)) {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    uint64_t v19 = v18;
    p_shared_weak_owners = &v18->__shared_weak_owners_;
    atomic_fetch_add_explicit(&v18->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v19);
    }
    long long v81 = (const void *)0xAAAAAAAAAAAAAAAALL;
    dispatch_object_t v82 = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 3321888768;
    aBlock[2] = ___ZN10LogTracker23diagnosticToolsLog_syncEN8dispatch13group_sessionEN3xpc4dictEb_block_invoke;
    aBlock[3] = &__block_descriptor_64_e8_40c35_ZTSNSt3__18weak_ptrI10LogTrackerEE56c31_ZTSKN8dispatch13group_sessionE_e241_v48__0_Result_i_basic_string_char__std::char_traits_char___std::allocator_char______compressed_pair_std::basic_string_char_::__rep__std::allocator_char______rep_______short__23c__0C_b7b1____long__Qb63b1____raw__3Q_______8_dict__object__v__40l;
    void aBlock[4] = a1;
    void aBlock[5] = v17;
    long long v79 = v19;
    atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
    uint64_t v21 = *a2;
    dispatch_group_t group = v21;
    if (v21)
    {
      dispatch_retain(v21);
      dispatch_group_enter(group);
    }
    char v22 = _Block_copy(aBlock);
    xpc_object_t v23 = *(NSObject **)(a1 + 136);
    if (v23) {
      dispatch_retain(*(dispatch_object_t *)(a1 + 136));
    }
    long long v81 = v22;
    dispatch_object_t v82 = v23;
    if (!a4) {
      goto LABEL_117;
    }
    xpc_object_t v24 = xpc_dictionary_create(0, 0, 0);
    uint64_t v25 = MEMORY[0x1E4F14590];
    if (v24 || (xpc_object_t v24 = xpc_null_create()) != 0)
    {
      if (MEMORY[0x1C8792D30](v24) == v25)
      {
        xpc_retain(v24);
        xpc_object_t v26 = v24;
      }
      else
      {
        xpc_object_t v26 = xpc_null_create();
      }
    }
    else
    {
      xpc_object_t v26 = xpc_null_create();
      xpc_object_t v24 = 0;
    }
    xpc_release(v24);
    if (MEMORY[0x1C8792D30](v26) != v25)
    {
      uint64_t v28 = *(NSObject **)(a1 + 88);
      if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)long long buf = 0;
        _os_log_error_impl(&dword_1C5767000, v28, OS_LOG_TYPE_ERROR, "Failed to create an input dictionary", buf, 2u);
      }
LABEL_116:
      xpc_release(v26);
      xpc_object_t v23 = v82;
LABEL_117:
      if (v23) {
        dispatch_release(v23);
      }
      if (v81) {
        _Block_release(v81);
      }
      if (group)
      {
        dispatch_group_leave(group);
        if (group) {
          dispatch_release(group);
        }
      }
      if (v79) {
        std::__shared_weak_count::__release_weak(v79);
      }
      std::__shared_weak_count::__release_weak(v19);
      goto LABEL_127;
    }
    xpc_object_t v29 = xpc_dictionary_get_value(*a3, (const char *)*MEMORY[0x1E4F4CBA0]);
    *(void *)long long buf = v29;
    if (v29) {
      xpc_retain(v29);
    }
    else {
      *(void *)long long buf = xpc_null_create();
    }
    int v30 = xpc::dyn_cast_or_default((xpc *)buf, 0);
    xpc_release(*(xpc_object_t *)buf);
    memset(buf, 170, sizeof(buf));
    xpc_object_t v31 = xpc_dictionary_get_value(*a3, (const char *)*MEMORY[0x1E4F4CA98]);
    *(void *)&long long object = v31;
    if (v31) {
      xpc_retain(v31);
    }
    else {
      *(void *)&long long object = xpc_null_create();
    }
    xpc::dyn_cast_or_default((uint64_t *)buf, (xpc *)&object, (const object *)"", v32);
    xpc_release((xpc_object_t)object);
    if ((buf[23] & 0x80u) == 0) {
      unint64_t v33 = buf;
    }
    else {
      unint64_t v33 = *(uint8_t **)buf;
    }
    xpc_object_t v34 = xpc_string_create((const char *)v33);
    if (!v34) {
      xpc_object_t v34 = xpc_null_create();
    }
    xpc_dictionary_set_value(v26, (const char *)*MEMORY[0x1E4F47160], v34);
    xpc_object_t v35 = xpc_null_create();
    xpc_release(v34);
    xpc_release(v35);
    xpc_object_t v36 = xpc_int64_create(v30);
    if (!v36) {
      xpc_object_t v36 = xpc_null_create();
    }
    xpc_dictionary_set_value(v26, (const char *)*MEMORY[0x1E4F470A8], v36);
    xpc_object_t v37 = xpc_null_create();
    xpc_release(v36);
    xpc_release(v37);
    uint64_t v38 = (const void *)*MEMORY[0x1E4F4F918];
    size_t v39 = strlen((const char *)*MEMORY[0x1E4F4F918]);
    if (v39 > 0x7FFFFFFFFFFFFFF7) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    std::string::size_type v40 = v39;
    if (v39 >= 0x17)
    {
      uint64_t v42 = (v39 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v39 | 7) != 0x17) {
        uint64_t v42 = v39 | 7;
      }
      uint64_t v43 = v42 + 1;
      p_dst = (std::string *)operator new(v42 + 1);
      __dst.__r_.__value_.__l.__size_ = v40;
      __dst.__r_.__value_.__r.__words[2] = v43 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v39;
      p_dst = &__dst;
      if (!v39)
      {
LABEL_62:
        p_dst->__r_.__value_.__s.__data_[v40] = 0;
        if (v87[2] >= 0) {
          unint64_t v44 = (const std::string::value_type *)v87;
        }
        else {
          unint64_t v44 = (const std::string::value_type *)v87[0];
        }
        if (v87[2] >= 0) {
          std::string::size_type v45 = HIBYTE(v87[2]);
        }
        else {
          std::string::size_type v45 = v87[1];
        }
        uint64_t v46 = std::string::insert(&__dst, 0, v44, v45);
        long long v47 = *(_OWORD *)&v46->__r_.__value_.__l.__data_;
        v74.__r_.__value_.__r.__words[2] = v46->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v74.__r_.__value_.__l.__data_ = v47;
        v46->__r_.__value_.__l.__size_ = 0;
        v46->__r_.__value_.__r.__words[2] = 0;
        v46->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v88[2]) >= 0) {
          long long v48 = (const std::string::value_type *)v88;
        }
        else {
          long long v48 = (const std::string::value_type *)v88[0];
        }
        if (SHIBYTE(v88[2]) >= 0) {
          std::string::size_type v49 = HIBYTE(v88[2]);
        }
        else {
          std::string::size_type v49 = (std::string::size_type)v88[1];
        }
        BOOL v50 = std::string::append(&v74, v48, v49);
        long long v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
        v75.__r_.__value_.__r.__words[2] = v50->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v75.__r_.__value_.__l.__data_ = v51;
        v50->__r_.__value_.__l.__size_ = 0;
        v50->__r_.__value_.__r.__words[2] = 0;
        v50->__r_.__value_.__r.__words[0] = 0;
        unint64_t v52 = (const void *)*MEMORY[0x1E4F4F908];
        size_t v53 = strlen((const char *)*MEMORY[0x1E4F4F908]);
        if (v53 > 0x7FFFFFFFFFFFFFF7) {
          std::string::__throw_length_error[abi:ne180100]();
        }
        size_t v54 = v53;
        if (v53 >= 0x17)
        {
          uint64_t v56 = (v53 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v53 | 7) != 0x17) {
            uint64_t v56 = v53 | 7;
          }
          uint64_t v57 = v56 + 1;
          p_p = operator new(v56 + 1);
          size_t v71 = v54;
          int64_t v72 = v57 | 0x8000000000000000;
          std::string __p = p_p;
        }
        else
        {
          HIBYTE(v72) = v53;
          p_p = &__p;
          if (!v53)
          {
LABEL_82:
            *((unsigned char *)p_p + v54) = 0;
            if (v72 >= 0) {
              long long v58 = (const std::string::value_type *)&__p;
            }
            else {
              long long v58 = (const std::string::value_type *)__p;
            }
            if (v72 >= 0) {
              std::string::size_type v59 = HIBYTE(v72);
            }
            else {
              std::string::size_type v59 = v71;
            }
            long long v60 = std::string::append(&v75, v58, v59);
            long long v61 = *(_OWORD *)&v60->__r_.__value_.__l.__data_;
            int64_t v77 = v60->__r_.__value_.__r.__words[2];
            long long object = v61;
            v60->__r_.__value_.__l.__size_ = 0;
            v60->__r_.__value_.__r.__words[2] = 0;
            v60->__r_.__value_.__r.__words[0] = 0;
            if (v77 >= 0) {
              p_long long object = (const char *)&object;
            }
            else {
              p_long long object = (const char *)object;
            }
            xpc_object_t v63 = xpc_string_create(p_object);
            if (!v63) {
              xpc_object_t v63 = xpc_null_create();
            }
            xpc_dictionary_set_value(v26, (const char *)*MEMORY[0x1E4F47098], v63);
            xpc_object_t v64 = xpc_null_create();
            xpc_release(v63);
            xpc_release(v64);
            if (SHIBYTE(v77) < 0)
            {
              operator delete((void *)object);
              if ((SHIBYTE(v72) & 0x80000000) == 0)
              {
LABEL_95:
                if ((SHIBYTE(v75.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                  goto LABEL_96;
                }
                goto LABEL_103;
              }
            }
            else if ((SHIBYTE(v72) & 0x80000000) == 0)
            {
              goto LABEL_95;
            }
            operator delete(__p);
            if ((SHIBYTE(v75.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
LABEL_96:
              if ((SHIBYTE(v74.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                goto LABEL_97;
              }
              goto LABEL_104;
            }
LABEL_103:
            operator delete(v75.__r_.__value_.__l.__data_);
            if ((SHIBYTE(v74.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
LABEL_97:
              if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                goto LABEL_98;
              }
              goto LABEL_105;
            }
LABEL_104:
            operator delete(v74.__r_.__value_.__l.__data_);
            if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
LABEL_98:
              xpc_object_t v69 = v26;
              if (v26) {
                goto LABEL_99;
              }
              goto LABEL_106;
            }
LABEL_105:
            operator delete(__dst.__r_.__value_.__l.__data_);
            xpc_object_t v69 = v26;
            if (v26)
            {
LABEL_99:
              xpc_retain(v26);
              long long v65 = (void *)v81;
              if (!v81) {
                goto LABEL_108;
              }
              goto LABEL_107;
            }
LABEL_106:
            xpc_object_t v69 = xpc_null_create();
            long long v65 = (void *)v81;
            if (!v81)
            {
LABEL_108:
              long long v67 = v65;
              long long v68 = v82;
              if (v82) {
                dispatch_retain(v82);
              }
              abm::HelperClient::perform();
              if (v68) {
                dispatch_release(v68);
              }
              if (v67) {
                _Block_release(v67);
              }
              xpc_release(v69);
              if ((char)buf[23] < 0) {
                operator delete(*(void **)buf);
              }
              goto LABEL_116;
            }
LABEL_107:
            long long v65 = _Block_copy(v65);
            goto LABEL_108;
          }
        }
        memmove(p_p, v52, v54);
        goto LABEL_82;
      }
    }
    memmove(p_dst, v38, v40);
    goto LABEL_62;
  }
  std::string::size_type v27 = *(NSObject **)(a1 + 88);
  if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)long long buf = 0;
    _os_log_error_impl(&dword_1C5767000, v27, OS_LOG_TYPE_ERROR, "Failed to create helper client object", buf, 2u);
  }
LABEL_127:
  long long v66 = (std::__shared_weak_count *)v86;
  if (v86 && !atomic_fetch_add((atomic_ullong *volatile)(v86 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
    std::__shared_weak_count::__release_weak(v66);
    if ((SHIBYTE(v87[2]) & 0x80000000) == 0)
    {
LABEL_130:
      if ((SHIBYTE(v88[2]) & 0x80000000) == 0) {
        return;
      }
LABEL_134:
      operator delete(v88[0]);
      return;
    }
  }
  else if ((SHIBYTE(v87[2]) & 0x80000000) == 0)
  {
    goto LABEL_130;
  }
  operator delete((void *)v87[0]);
  if (SHIBYTE(v88[2]) < 0) {
    goto LABEL_134;
  }
}

void sub_1C58C5268(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, xpc_object_t object, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,xpc_object_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,std::__shared_weak_count *a49,dispatch_group_t group)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

xpc_object_t __copy_helper_block_e8_40c30_ZTSN8dispatch13group_sessionE48c15_ZTSN3xpc4dictE(uint64_t a1, uint64_t a2)
{
  xpc_object_t v4 = *(NSObject **)(a2 + 40);
  *(void *)(a1 + 40) = v4;
  if (v4)
  {
    dispatch_retain(v4);
    xpc_object_t v5 = *(NSObject **)(a1 + 40);
    if (v5) {
      dispatch_group_enter(v5);
    }
  }
  uint64_t v6 = *(void **)(a2 + 48);
  *(void *)(a1 + 48) = v6;
  if (v6) {
    return xpc_retain(v6);
  }
  xpc_object_t result = xpc_null_create();
  *(void *)(a1 + 48) = result;
  return result;
}

void __destroy_helper_block_e8_40c30_ZTSN8dispatch13group_sessionE48c15_ZTSN3xpc4dictE(uint64_t a1)
{
  xpc_release(*(xpc_object_t *)(a1 + 48));
  *(void *)(a1 + 48) = 0;
  uint64_t v2 = *(NSObject **)(a1 + 40);
  if (v2)
  {
    dispatch_group_leave(v2);
    uint64_t v3 = *(NSObject **)(a1 + 40);
    if (v3)
    {
      dispatch_release(v3);
    }
  }
}

void ___ZN10LogTracker20dumpLogInternal_syncEN3xpc4dictEN8dispatch5blockIU13block_pointerFviS1_EEE_block_invoke_6(void *a1, int a2, xpc_object_t *a3)
{
  xpc_object_t v4 = (std::__shared_weak_count *)a1[6];
  if (!v4) {
    return;
  }
  size_t v7 = (void *)a1[4];
  uint64_t v8 = std::__shared_weak_count::lock(v4);
  if (!v8) {
    return;
  }
  uint64_t v9 = v8;
  uint64_t v10 = a1[5];
  if (atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (!v10) {
      return;
    }
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
    if (!v10) {
      return;
    }
  }
  xpc_object_t v11 = *a3;
  if (*a3)
  {
    xpc_retain(*a3);
    long long v12 = (const void *)a1[7];
    if (v12) {
      goto LABEL_9;
    }
  }
  else
  {
    xpc_object_t v11 = xpc_null_create();
    long long v12 = (const void *)a1[7];
    if (v12)
    {
LABEL_9:
      uint64_t v13 = _Block_copy(v12);
      xpc_object_t v14 = (xpc_object_t)a1[8];
      if (v14) {
        goto LABEL_10;
      }
LABEL_14:
      xpc_object_t v14 = xpc_null_create();
      CFTypeRef v15 = (std::__shared_weak_count *)v7[16];
      if (!v15) {
        goto LABEL_27;
      }
      goto LABEL_15;
    }
  }
  uint64_t v13 = 0;
  xpc_object_t v14 = (xpc_object_t)a1[8];
  if (!v14) {
    goto LABEL_14;
  }
LABEL_10:
  xpc_retain(v14);
  CFTypeRef v15 = (std::__shared_weak_count *)v7[16];
  if (!v15) {
LABEL_27:
  }
    std::__throw_bad_weak_ptr[abi:ne180100]();
LABEL_15:
  uint64_t v16 = v7[15];
  uint64_t v17 = std::__shared_weak_count::lock(v15);
  if (!v17) {
    goto LABEL_27;
  }
  uint64_t v18 = v17;
  uint64_t v19 = operator new(0x28uLL);
  *(void *)uint64_t v19 = v7;
  void v19[2] = a2;
  *((void *)v19 + 2) = v11;
  xpc_object_t v20 = xpc_null_create();
  if (!v13)
  {
    *((void *)v19 + 3) = 0;
    *((void *)v19 + 4) = v14;
    if (v14) {
      goto LABEL_18;
    }
LABEL_20:
    *((void *)v19 + 4) = xpc_null_create();
    goto LABEL_21;
  }
  *((void *)v19 + 3) = _Block_copy(v13);
  *((void *)v19 + 4) = v14;
  if (!v14) {
    goto LABEL_20;
  }
LABEL_18:
  xpc_retain(v14);
LABEL_21:
  uint64_t v21 = v7[17];
  atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
  char v22 = operator new(0x18uLL);
  void *v22 = v19;
  v22[1] = v16;
  void v22[2] = v18;
  dispatch_async_f(v21, v22, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI10LogTrackerE15execute_wrappedIZZNS3_20dumpLogInternal_syncEN3xpc4dictENS_5blockIU13block_pointerFviS7_EEEEUb_E3__3EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrISD_NSI_14default_deleteISD_EEEEENUlPvE_8__invokeESN_);
  if (!atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
  xpc_release(v14);
  if (v13) {
    _Block_release(v13);
  }
  xpc_release(v20);
}

xpc_object_t __copy_helper_block_e8_40c35_ZTSNSt3__18weak_ptrI10LogTrackerEE56c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE64c15_ZTSN3xpc4dictE(void *a1, void *a2)
{
  uint64_t v4 = a2[6];
  a1[5] = a2[5];
  a1[6] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 16), 1uLL, memory_order_relaxed);
  }
  xpc_object_t v5 = (const void *)a2[7];
  if (v5)
  {
    uint64_t v6 = _Block_copy(v5);
    size_t v7 = (void *)a2[8];
    a1[7] = v6;
    a1[8] = v7;
    if (v7) {
      return xpc_retain(v7);
    }
  }
  else
  {
    size_t v7 = (void *)a2[8];
    a1[7] = 0;
    a1[8] = v7;
    if (v7) {
      return xpc_retain(v7);
    }
  }
  xpc_object_t result = xpc_null_create();
  a1[8] = result;
  return result;
}

void __destroy_helper_block_e8_40c35_ZTSNSt3__18weak_ptrI10LogTrackerEE56c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE64c15_ZTSN3xpc4dictE(uint64_t a1)
{
  xpc_release(*(xpc_object_t *)(a1 + 64));
  *(void *)(a1 + 64) = 0;
  uint64_t v2 = *(const void **)(a1 + 56);
  if (v2) {
    _Block_release(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3)
  {
    std::__shared_weak_count::__release_weak(v3);
  }
}

void LogTracker::sendUserNotificationForDump(uint64_t a1, const void **a2)
{
  uint64_t v3 = (const void *)*MEMORY[0x1E4F4C198];
  size_t v4 = strlen((const char *)*MEMORY[0x1E4F4C198]);
  if (v4 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v5 = v4;
  if (v4 >= 0x17)
  {
    uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v7 = v4 | 7;
    }
    uint64_t v8 = v7 + 1;
    p_dst = (void **)operator new(v7 + 1);
    unint64_t v31 = v5;
    unint64_t v32 = v8 | 0x8000000000000000;
    std::string __dst = p_dst;
    goto LABEL_8;
  }
  HIBYTE(v32) = v4;
  p_dst = (void **)&__dst;
  if (v4) {
LABEL_8:
  }
    memmove(p_dst, v3, v5);
  *((unsigned char *)p_dst + v5) = 0;
  memset(&__p, 0, sizeof(__p));
  int v9 = -1431655766;
  if (prop::ttr::get((char *)&__dst, (uint64_t)&__p))
  {
    *(_DWORD *)std::string::size_type v27 = -1431655766;
    if (util::convert<int>(&__p, v27, 0)) {
      int v9 = *(_DWORD *)v27;
    }
    else {
      int v9 = -1431655766;
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v32) & 0x80000000) == 0) {
      goto LABEL_15;
    }
  }
  else if ((SHIBYTE(v32) & 0x80000000) == 0)
  {
    goto LABEL_15;
  }
  operator delete(__dst);
LABEL_15:
  unint64_t v31 = 0xAAAAAAAAAA005D73;
  unint64_t v32 = 0xAAAAAAAAAAAAAAALL;
  std::string __dst = *(void ***)"[Settings]";
  if (TelephonyUtilIsInternalBuild()) {
    int IsCarrierBuild = 1;
  }
  else {
    int IsCarrierBuild = TelephonyUtilIsCarrierBuild();
  }
  if (IsCarrierBuild && v9)
  {
    size_t v11 = *((unsigned __int8 *)a2 + 23);
    if ((*((char *)a2 + 23) & 0x80000000) == 0)
    {
      if (v11 >= 0xA) {
        size_t v12 = 10;
      }
      else {
        size_t v12 = *((unsigned __int8 *)a2 + 23);
      }
      int v13 = memcmp(a2, &__dst, v12);
      if (v12 != 10) {
        return;
      }
LABEL_32:
      if (v13) {
        return;
      }
      memset(&v29[16], 0, 32);
      *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = 0u;
      v29[23] = 22;
      qmemcpy(v29, "Telephony_Dump_Started", 22);
      *((unsigned char *)&__p.__r_.__value_.__s + 23) = 7;
      strcpy((char *)&__p, "LogDump");
      if ((v11 & 0x80) != 0)
      {
        if (a2[1])
        {
LABEL_35:
          if ((v11 & 0x80u) == 0) {
            size_t v15 = v11;
          }
          else {
            size_t v15 = (size_t)a2[1];
          }
          unint64_t v16 = v15 + 8;
          memset(v27, 170, sizeof(v27));
          if (v15 + 8 > 0x7FFFFFFFFFFFFFF7) {
            std::string::__throw_length_error[abi:ne180100]();
          }
          if (v16 >= 0x17)
          {
            uint64_t v18 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v16 | 7) != 0x17) {
              uint64_t v18 = v16 | 7;
            }
            uint64_t v19 = v18 + 1;
            xpc_object_t v20 = operator new(v18 + 1);
            *(void *)&v27[8] = v15 + 8;
            *(void *)&v27[16] = v19 | 0x8000000000000000;
            *(void *)std::string::size_type v27 = v20;
            void *v20 = 0x203A6E6F73616552;
            uint64_t v17 = v20 + 1;
          }
          else
          {
            uint64_t v17 = &v27[8];
            *(void *)&v27[16] = 0;
            v27[23] = v15 + 8;
            *(_OWORD *)std::string::size_type v27 = 0x203A6E6F73616552uLL;
            if (!v15) {
              goto LABEL_51;
            }
          }
          if ((v11 & 0x80u) == 0) {
            uint64_t v21 = a2;
          }
          else {
            uint64_t v21 = *a2;
          }
          memmove(v17, v21, v15);
LABEL_51:
          v17[v15] = 0;
          *(void *)&v29[40] = *(void *)&v27[16];
          *(_OWORD *)&unsigned char v29[24] = *(_OWORD *)v27;
          std::string v23 = __p;
          *(_OWORD *)xpc_object_t v24 = *(_OWORD *)v29;
          uint64_t v25 = *(void *)&v29[16];
          if ((v27[23] & 0x80000000) != 0)
          {
            std::string::__init_copy_ctor_external(&v26, *(const std::string::value_type **)&v29[24], *(std::string::size_type *)&v29[32]);
            int v22 = 1;
LABEL_54:
            support::ui::showNotification(0, (uint64_t)&v23, 0);
            if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
            {
              operator delete(v26.__r_.__value_.__l.__data_);
              if ((SHIBYTE(v25) & 0x80000000) == 0)
              {
LABEL_56:
                if ((SHIBYTE(v23.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                  goto LABEL_57;
                }
                goto LABEL_62;
              }
            }
            else if ((SHIBYTE(v25) & 0x80000000) == 0)
            {
              goto LABEL_56;
            }
            operator delete(v24[0]);
            if ((SHIBYTE(v23.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
LABEL_57:
              if (!v22) {
                return;
              }
              goto LABEL_58;
            }
LABEL_62:
            operator delete(v23.__r_.__value_.__l.__data_);
            if (!v22) {
              return;
            }
LABEL_58:
            operator delete(*(void **)&v29[24]);
            return;
          }
LABEL_52:
          int v22 = 0;
          std::string v26 = *(std::string *)&v29[24];
          goto LABEL_54;
        }
      }
      else if (v11)
      {
        goto LABEL_35;
      }
      std::string v23 = __p;
      *(_OWORD *)xpc_object_t v24 = *(_OWORD *)v29;
      uint64_t v25 = *(void *)&v29[16];
      goto LABEL_52;
    }
    if ((unint64_t)a2[1] >= 0xA) {
      size_t v14 = 10;
    }
    else {
      size_t v14 = (size_t)a2[1];
    }
    int v13 = memcmp(*a2, &__dst, v14);
    if (v14 == 10) {
      goto LABEL_32;
    }
  }
}

void sub_1C58C5D24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27)
{
  if (a20 < 0)
  {
    operator delete(__p);
    if ((a14 & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else if ((a14 & 0x80000000) == 0)
  {
LABEL_3:
    support::ui::NotificationInfo::~NotificationInfo(&a27);
    _Unwind_Resume(a1);
  }
  operator delete(a9);
  support::ui::NotificationInfo::~NotificationInfo(&a27);
  _Unwind_Resume(a1);
}

void sub_1C58C5D70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  support::ui::NotificationInfo::~NotificationInfo((void **)va);
  _Unwind_Resume(a1);
}

void sub_1C58C5D84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21)
{
}

void sub_1C58C5DA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v26 - 81) < 0) {
    operator delete(*(void **)(v26 - 104));
  }
  _Unwind_Resume(exception_object);
}

void LogTracker::moveBasebandServicesLog_sync(void *a1, NSObject **a2, xpc_object_t *a3)
{
  xpc_object_t v6 = xpc_dictionary_create(0, 0, 0);
  if (v6 || (xpc_object_t v6 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C8792D30](v6) == MEMORY[0x1E4F14590])
    {
      xpc_retain(v6);
      xpc_object_t v7 = v6;
    }
    else
    {
      xpc_object_t v7 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v7 = xpc_null_create();
    xpc_object_t v6 = 0;
  }
  xpc_release(v6);
  xpc_object_t v8 = xpc_array_create(0, 0);
  if (v8 || (xpc_object_t v8 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C8792D30](v8) == MEMORY[0x1E4F14568])
    {
      xpc_retain(v8);
      xpc_object_t v9 = v8;
    }
    else
    {
      xpc_object_t v9 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v9 = xpc_null_create();
    xpc_object_t v8 = 0;
  }
  xpc_release(v8);
  xpc_object_t v10 = xpc_int64_create(7);
  if (!v10) {
    xpc_object_t v10 = xpc_null_create();
  }
  xpc_dictionary_set_value(v7, (const char *)*MEMORY[0x1E4F471E8], v10);
  xpc_object_t v11 = xpc_null_create();
  xpc_release(v10);
  xpc_release(v11);
  xpc_object_t value = xpc_dictionary_get_value(*a3, (const char *)*MEMORY[0x1E4F4C7F8]);
  xpc_object_t object = value;
  if (value) {
    xpc_retain(value);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  unint64_t v44 = 0;
  dispatch_object_t v45 = 0;
  uint64_t v46 = 0;
  xpc::dyn_cast_or_default();
  if (v43 >= 0) {
    p_p = (const char *)&__p;
  }
  else {
    p_p = (const char *)__p;
  }
  xpc_object_t v14 = xpc_string_create(p_p);
  if (!v14) {
    xpc_object_t v14 = xpc_null_create();
  }
  xpc_dictionary_set_value(v7, (const char *)*MEMORY[0x1E4F470F8], v14);
  xpc_object_t v15 = xpc_null_create();
  xpc_release(v14);
  xpc_release(v15);
  if (v43 < 0) {
    operator delete(__p);
  }
  xpc_release(object);
  xpc_object_t v16 = xpc_dictionary_get_value(*a3, (const char *)*MEMORY[0x1E4F4C4C8]);
  xpc_object_t object = v16;
  if (v16) {
    xpc_retain(v16);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  unint64_t v44 = 0;
  dispatch_object_t v45 = 0;
  uint64_t v46 = 0;
  xpc::dyn_cast_or_default();
  if (SHIBYTE(v46) < 0) {
    operator delete(v44);
  }
  if (v43 >= 0) {
    uint64_t v17 = (const char *)&__p;
  }
  else {
    uint64_t v17 = (const char *)__p;
  }
  xpc_object_t v18 = xpc_string_create(v17);
  if (!v18) {
    xpc_object_t v18 = xpc_null_create();
  }
  xpc_array_append_value(v9, v18);
  xpc_release(v18);
  if (v43 < 0) {
    operator delete(__p);
  }
  xpc_release(object);
  if (v9)
  {
    xpc_retain(v9);
    xpc_object_t v19 = v9;
  }
  else
  {
    xpc_object_t v19 = xpc_null_create();
  }
  xpc_dictionary_set_value(v7, (const char *)*MEMORY[0x1E4F47168], v19);
  xpc_object_t v20 = xpc_null_create();
  xpc_release(v19);
  xpc_release(v20);
  uint64_t v21 = (std::__shared_weak_count *)a1[16];
  if (!v21 || (v22 = a1[15], (std::string v23 = std::__shared_weak_count::lock(v21)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  xpc_object_t v24 = v23;
  p_shared_weak_owners = &v23->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v23->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v24);
  }
  unint64_t v44 = (void *)0xAAAAAAAAAAAAAAAALL;
  dispatch_object_t v45 = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 3321888768;
  aBlock[2] = ___ZN10LogTracker28moveBasebandServicesLog_syncEN8dispatch13group_sessionEN3xpc4dictE_block_invoke;
  aBlock[3] = &__block_descriptor_56_e8_32c35_ZTSNSt3__18weak_ptrI10LogTrackerEE48c31_ZTSKN8dispatch13group_sessionE_e241_v48__0_Result_i_basic_string_char__std::char_traits_char___std::allocator_char______compressed_pair_std::basic_string_char_::__rep__std::allocator_char______rep_______short__23c__0C_b7b1____long__Qb63b1____raw__3Q_______8_dict__object__v__40l;
  void aBlock[4] = v22;
  uint64_t v38 = v24;
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  uint64_t v26 = *a2;
  dispatch_group_t group = v26;
  if (v26)
  {
    dispatch_retain(v26);
    dispatch_group_enter(group);
  }
  std::string::size_type v27 = _Block_copy(aBlock);
  uint64_t v28 = a1[17];
  if (v28) {
    dispatch_retain(v28);
  }
  unint64_t v44 = v27;
  dispatch_object_t v45 = v28;
  std::string __p = (void *)0xAAAAAAAAAAAAAAAALL;
  unint64_t v42 = 0xAAAAAAAAAAAAAAAALL;
  GetABMLogServer(&v35);
  abm::HelperClient::create();
  xpc_object_t v29 = v36;
  if (!v36 || atomic_fetch_add(&v36->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    xpc_object_t v34 = v7;
    if (v7) {
      goto LABEL_51;
    }
LABEL_54:
    xpc_object_t v34 = xpc_null_create();
    int v30 = v44;
    if (!v44) {
      goto LABEL_56;
    }
    goto LABEL_55;
  }
  ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
  std::__shared_weak_count::__release_weak(v29);
  xpc_object_t v34 = v7;
  if (!v7) {
    goto LABEL_54;
  }
LABEL_51:
  xpc_retain(v7);
  int v30 = v44;
  if (v44) {
LABEL_55:
  }
    int v30 = _Block_copy(v30);
LABEL_56:
  unint64_t v32 = v30;
  unint64_t v33 = v45;
  if (v45) {
    dispatch_retain(v45);
  }
  abm::HelperClient::perform();
  if (v33) {
    dispatch_release(v33);
  }
  if (v32) {
    _Block_release(v32);
  }
  xpc_release(v34);
  unint64_t v31 = (std::__shared_weak_count *)v42;
  if (v42 && !atomic_fetch_add((atomic_ullong *volatile)(v42 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
    std::__shared_weak_count::__release_weak(v31);
  }
  if (v45) {
    dispatch_release(v45);
  }
  if (v44) {
    _Block_release(v44);
  }
  if (group)
  {
    dispatch_group_leave(group);
    if (group) {
      dispatch_release(group);
    }
  }
  if (v38) {
    std::__shared_weak_count::__release_weak(v38);
  }
  std::__shared_weak_count::__release_weak(v24);
  xpc_release(v9);
  xpc_release(v7);
}

void sub_1C58C63BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, xpc_object_t object, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::__shared_weak_count *a20,dispatch_group_t group,xpc_object_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  dispatch::callback<void({block_pointer})(TelephonyXPC::Result,xpc::dict)>::~callback((uint64_t)&a10);
  xpc_release(object);
  xpc_object_t object = 0;
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
  dispatch::callback<void({block_pointer})(TelephonyXPC::Result,xpc::dict)>::~callback(v31 - 88);
  if (group)
  {
    dispatch_group_leave(group);
    if (group) {
      dispatch_release(group);
    }
  }
  if (a20) {
    std::__shared_weak_count::__release_weak(a20);
  }
  std::__shared_weak_count::__release_weak(v30);
  xpc_release(v29);
  xpc_release(v28);
  _Unwind_Resume(a1);
}

void ___ZN10LogTracker28moveBasebandServicesLog_syncEN8dispatch13group_sessionEN3xpc4dictE_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1)
  {
    uint64_t v2 = std::__shared_weak_count::lock(v1);
    if (v2)
    {
      uint64_t v3 = v2;
      if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
  }
}

void __copy_helper_block_e8_32c35_ZTSNSt3__18weak_ptrI10LogTrackerEE48c31_ZTSKN8dispatch13group_sessionE(void *a1, void *a2)
{
  uint64_t v3 = a2[5];
  a1[4] = a2[4];
  a1[5] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  size_t v4 = a2[6];
  a1[6] = v4;
  if (v4)
  {
    dispatch_retain(v4);
    size_t v5 = a1[6];
    if (v5)
    {
      dispatch_group_enter(v5);
    }
  }
}

void __destroy_helper_block_e8_32c35_ZTSNSt3__18weak_ptrI10LogTrackerEE48c31_ZTSKN8dispatch13group_sessionE(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 48);
  if (v2)
  {
    dispatch_group_leave(v2);
    uint64_t v3 = *(NSObject **)(a1 + 48);
    if (v3) {
      dispatch_release(v3);
    }
  }
  size_t v4 = *(std::__shared_weak_count **)(a1 + 40);
  if (v4)
  {
    std::__shared_weak_count::__release_weak(v4);
  }
}

uint64_t dispatch::callback<void({block_pointer})(TelephonyXPC::Result,xpc::dict)>::~callback(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 8);
  if (v2) {
    dispatch_release(v2);
  }
  if (*(void *)a1) {
    _Block_release(*(const void **)a1);
  }
  return a1;
}

void LogTracker::getConfiguration(LogTracker *this@<X0>, xpc_object_t *a2@<X8>)
{
  xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
  uint64_t v5 = MEMORY[0x1E4F14590];
  if (v4 || (xpc_object_t v4 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C8792D30](v4) == v5)
    {
      xpc_retain(v4);
      xpc_object_t v6 = v4;
    }
    else
    {
      xpc_object_t v6 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v6 = xpc_null_create();
    xpc_object_t v4 = 0;
  }
  xpc_release(v4);
  if (MEMORY[0x1C8792D30](v6) != v5)
  {
    xpc_object_t v7 = *((void *)this + 11);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      LOWORD(__p.__r_.__value_.__l.__data_) = 0;
      _os_log_error_impl(&dword_1C5767000, v7, OS_LOG_TYPE_ERROR, "Failed to create config dictionary", (uint8_t *)&__p, 2u);
    }
    *a2 = xpc_null_create();
    goto LABEL_239;
  }
  unint64_t v111 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v112 = 0xAAAAAAAAAAAAAALL;
  *(void *)&value[1] = 0xAAAAAAAAAAAAAA00;
  value[0] = 0;
  BOOL v113 = 0;
  xpc_object_t v8 = (const void *)*MEMORY[0x1E4F4C2D8];
  size_t v9 = strlen((const char *)*MEMORY[0x1E4F4C2D8]);
  if (v9 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v10 = v9;
  if (v9 >= 0x17)
  {
    uint64_t v12 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v12 = v9 | 7;
    }
    uint64_t v13 = v12 + 1;
    xpc_object_t v11 = operator new(v12 + 1);
    size_t v108 = v10;
    unint64_t v109 = v13 | 0x8000000000000000;
    char v107 = v11;
    goto LABEL_18;
  }
  HIBYTE(v109) = v9;
  xpc_object_t v11 = &v107;
  if (v9) {
LABEL_18:
  }
    memmove(v11, v8, v10);
  *((unsigned char *)v11 + v10) = 0;
  memset(&__p, 0, sizeof(__p));
  if (prop::coredump::get((char *)&v107, (uint64_t)&__p))
  {
    int v14 = util::convert<BOOL>(&__p, &v113, 0);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_24;
    }
  }
  else
  {
    int v14 = 0;
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_24;
    }
  }
  operator delete(__p.__r_.__value_.__l.__data_);
LABEL_24:
  if (SHIBYTE(v109) < 0)
  {
    operator delete(v107);
    if (!v14) {
      goto LABEL_34;
    }
  }
  else if (!v14)
  {
    goto LABEL_34;
  }
  if (v113) {
    xpc_object_t v15 = "enabled";
  }
  else {
    xpc_object_t v15 = "disabled";
  }
  xpc_object_t v16 = xpc_string_create(v15);
  if (!v16) {
    xpc_object_t v16 = xpc_null_create();
  }
  xpc_dictionary_set_value(v6, (const char *)*MEMORY[0x1E4F4D008], v16);
  xpc_object_t v17 = xpc_null_create();
  xpc_release(v16);
  xpc_release(v17);
LABEL_34:
  BOOL v113 = 0;
  size_t v18 = strlen((const char *)v8);
  if (v18 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v19 = v18;
  if (v18 >= 0x17)
  {
    uint64_t v21 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v18 | 7) != 0x17) {
      uint64_t v21 = v18 | 7;
    }
    uint64_t v22 = v21 + 1;
    xpc_object_t v20 = operator new(v21 + 1);
    size_t v108 = v19;
    unint64_t v109 = v22 | 0x8000000000000000;
    char v107 = v20;
    goto LABEL_41;
  }
  HIBYTE(v109) = v18;
  xpc_object_t v20 = &v107;
  if (v18) {
LABEL_41:
  }
    memmove(v20, v8, v19);
  *((unsigned char *)v20 + v19) = 0;
  memset(&__p, 0, sizeof(__p));
  if (prop::bbtrace::get((char *)&v107, (uint64_t)&__p))
  {
    int v23 = util::convert<BOOL>(&__p, &v113, 0);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_47;
    }
  }
  else
  {
    int v23 = 0;
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_47;
    }
  }
  operator delete(__p.__r_.__value_.__l.__data_);
LABEL_47:
  if (SHIBYTE(v109) < 0)
  {
    operator delete(v107);
    if (!v23) {
      goto LABEL_57;
    }
  }
  else if (!v23)
  {
    goto LABEL_57;
  }
  if (v113) {
    xpc_object_t v24 = "enabled";
  }
  else {
    xpc_object_t v24 = "disabled";
  }
  xpc_object_t v25 = xpc_string_create(v24);
  if (!v25) {
    xpc_object_t v25 = xpc_null_create();
  }
  xpc_dictionary_set_value(v6, (const char *)*MEMORY[0x1E4F4D178], v25);
  xpc_object_t v26 = xpc_null_create();
  xpc_release(v25);
  xpc_release(v26);
LABEL_57:
  if (SHIBYTE(v112) < 0)
  {
    unint64_t v111 = 0;
    std::string::size_type v27 = *(unsigned char **)&value[1];
  }
  else
  {
    HIBYTE(v112) = 0;
    std::string::size_type v27 = &value[1];
  }
  unsigned char *v27 = 0;
  uint64_t v28 = (const void *)*MEMORY[0x1E4F4C198];
  size_t v29 = strlen((const char *)*MEMORY[0x1E4F4C198]);
  if (v29 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  std::string::size_type v30 = v29;
  if (v29 >= 0x17)
  {
    uint64_t v32 = (v29 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v29 | 7) != 0x17) {
      uint64_t v32 = v29 | 7;
    }
    uint64_t v33 = v32 + 1;
    p_p = (std::string *)operator new(v32 + 1);
    __p.__r_.__value_.__l.__size_ = v30;
    __p.__r_.__value_.__r.__words[2] = v33 | 0x8000000000000000;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)p_p;
    goto LABEL_67;
  }
  *((unsigned char *)&__p.__r_.__value_.__s + 23) = v29;
  p_p = &__p;
  if (v29) {
LABEL_67:
  }
    memmove(p_p, v28, v30);
  p_p->__r_.__value_.__s.__data_[v30] = 0;
  BOOL v34 = prop::bbtrace::get((char *)&__p, (uint64_t)&value[1]);
  BOOL v35 = v34;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (!v35) {
      goto LABEL_78;
    }
  }
  else if (!v34)
  {
    goto LABEL_78;
  }
  if (v112 >= 0) {
    xpc_object_t v36 = (const char *)&value[1];
  }
  else {
    xpc_object_t v36 = *(const char **)&value[1];
  }
  xpc_object_t v37 = xpc_string_create(v36);
  if (!v37) {
    xpc_object_t v37 = xpc_null_create();
  }
  xpc_dictionary_set_value(v6, (const char *)*MEMORY[0x1E4F4CFF8], v37);
  xpc_object_t v38 = xpc_null_create();
  xpc_release(v37);
  xpc_release(v38);
LABEL_78:
  BOOL v113 = 0;
  size_t v39 = diag::config::kEnabledDuringSleepKey[0];
  size_t v40 = strlen(diag::config::kEnabledDuringSleepKey[0]);
  if (v40 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v41 = v40;
  if (v40 >= 0x17)
  {
    uint64_t v43 = (v40 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v40 | 7) != 0x17) {
      uint64_t v43 = v40 | 7;
    }
    uint64_t v44 = v43 + 1;
    unint64_t v42 = operator new(v43 + 1);
    size_t v108 = v41;
    unint64_t v109 = v44 | 0x8000000000000000;
    char v107 = v42;
    goto LABEL_85;
  }
  HIBYTE(v109) = v40;
  unint64_t v42 = &v107;
  if (v40) {
LABEL_85:
  }
    memmove(v42, v39, v41);
  *((unsigned char *)v42 + v41) = 0;
  memset(&__p, 0, sizeof(__p));
  if (prop::bbtrace::get((char *)&v107, (uint64_t)&__p))
  {
    int v45 = util::convert<BOOL>(&__p, &v113, 0);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_91;
    }
  }
  else
  {
    int v45 = 0;
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_91;
    }
  }
  operator delete(__p.__r_.__value_.__l.__data_);
LABEL_91:
  if (SHIBYTE(v109) < 0)
  {
    operator delete(v107);
    if (!v45) {
      goto LABEL_101;
    }
  }
  else if (!v45)
  {
    goto LABEL_101;
  }
  if (v113) {
    uint64_t v46 = "enabled";
  }
  else {
    uint64_t v46 = "disabled";
  }
  xpc_object_t v47 = xpc_string_create(v46);
  if (!v47) {
    xpc_object_t v47 = xpc_null_create();
  }
  xpc_dictionary_set_value(v6, (const char *)*MEMORY[0x1E4F4D2B0], v47);
  xpc_object_t v48 = xpc_null_create();
  xpc_release(v47);
  xpc_release(v48);
LABEL_101:
  if (SHIBYTE(v112) < 0)
  {
    unint64_t v111 = 0;
    std::string::size_type v49 = *(unsigned char **)&value[1];
  }
  else
  {
    HIBYTE(v112) = 0;
    std::string::size_type v49 = &value[1];
  }
  unsigned char *v49 = 0;
  BOOL v50 = (const void *)*MEMORY[0x1E4F4CCC8];
  size_t v51 = strlen((const char *)*MEMORY[0x1E4F4CCC8]);
  if (v51 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  std::string::size_type v52 = v51;
  if (v51 >= 0x17)
  {
    uint64_t v54 = (v51 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v51 | 7) != 0x17) {
      uint64_t v54 = v51 | 7;
    }
    uint64_t v55 = v54 + 1;
    size_t v53 = (std::string *)operator new(v54 + 1);
    __p.__r_.__value_.__l.__size_ = v52;
    __p.__r_.__value_.__r.__words[2] = v55 | 0x8000000000000000;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v53;
    goto LABEL_111;
  }
  *((unsigned char *)&__p.__r_.__value_.__s + 23) = v51;
  size_t v53 = &__p;
  if (v51) {
LABEL_111:
  }
    memmove(v53, v50, v52);
  v53->__r_.__value_.__s.__data_[v52] = 0;
  BOOL v56 = prop::bbtrace::get((char *)&__p, (uint64_t)&value[1]);
  BOOL v57 = v56;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (!v57) {
      goto LABEL_122;
    }
  }
  else if (!v56)
  {
    goto LABEL_122;
  }
  if (v112 >= 0) {
    long long v58 = (const char *)&value[1];
  }
  else {
    long long v58 = *(const char **)&value[1];
  }
  xpc_object_t v59 = xpc_string_create(v58);
  if (!v59) {
    xpc_object_t v59 = xpc_null_create();
  }
  xpc_dictionary_set_value(v6, (const char *)*MEMORY[0x1E4F4D1C8], v59);
  xpc_object_t v60 = xpc_null_create();
  xpc_release(v59);
  xpc_release(v60);
LABEL_122:
  BOOL v113 = 0;
  size_t v61 = strlen((const char *)v8);
  if (v61 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v62 = v61;
  if (v61 >= 0x17)
  {
    uint64_t v64 = (v61 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v61 | 7) != 0x17) {
      uint64_t v64 = v61 | 7;
    }
    uint64_t v65 = v64 + 1;
    xpc_object_t v63 = operator new(v64 + 1);
    size_t v108 = v62;
    unint64_t v109 = v65 | 0x8000000000000000;
    char v107 = v63;
    goto LABEL_129;
  }
  HIBYTE(v109) = v61;
  xpc_object_t v63 = &v107;
  if (v61) {
LABEL_129:
  }
    memmove(v63, v8, v62);
  *((unsigned char *)v63 + v62) = 0;
  memset(&__p, 0, sizeof(__p));
  if (prop::ipc::get((char *)&v107, (uint64_t)&__p))
  {
    int v66 = util::convert<BOOL>(&__p, &v113, 0);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_135;
    }
  }
  else
  {
    int v66 = 0;
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_135;
    }
  }
  operator delete(__p.__r_.__value_.__l.__data_);
LABEL_135:
  if (SHIBYTE(v109) < 0)
  {
    operator delete(v107);
    if (!v66) {
      goto LABEL_145;
    }
  }
  else if (!v66)
  {
    goto LABEL_145;
  }
  if (v113) {
    long long v67 = "enabled";
  }
  else {
    long long v67 = "disabled";
  }
  xpc_object_t v68 = xpc_string_create(v67);
  if (!v68) {
    xpc_object_t v68 = xpc_null_create();
  }
  xpc_dictionary_set_value(v6, (const char *)*MEMORY[0x1E4F4CE78], v68);
  xpc_object_t v69 = xpc_null_create();
  xpc_release(v68);
  xpc_release(v69);
LABEL_145:
  BOOL v113 = 0;
  size_t v70 = strlen((const char *)v8);
  if (v70 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v71 = v70;
  if (v70 >= 0x17)
  {
    uint64_t v73 = (v70 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v70 | 7) != 0x17) {
      uint64_t v73 = v70 | 7;
    }
    uint64_t v74 = v73 + 1;
    int64_t v72 = operator new(v73 + 1);
    size_t v108 = v71;
    unint64_t v109 = v74 | 0x8000000000000000;
    char v107 = v72;
    goto LABEL_152;
  }
  HIBYTE(v109) = v70;
  int64_t v72 = &v107;
  if (v70) {
LABEL_152:
  }
    memmove(v72, v8, v71);
  *((unsigned char *)v72 + v71) = 0;
  memset(&__p, 0, sizeof(__p));
  if (prop::bbipc::get((char *)&v107, (uint64_t)&__p))
  {
    int v75 = util::convert<BOOL>(&__p, &v113, 0);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_158;
    }
  }
  else
  {
    int v75 = 0;
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_158;
    }
  }
  operator delete(__p.__r_.__value_.__l.__data_);
LABEL_158:
  if (SHIBYTE(v109) < 0)
  {
    operator delete(v107);
    if (!v75) {
      goto LABEL_168;
    }
  }
  else if (!v75)
  {
    goto LABEL_168;
  }
  if (v113) {
    uint64_t v76 = "enabled";
  }
  else {
    uint64_t v76 = "disabled";
  }
  xpc_object_t v77 = xpc_string_create(v76);
  if (!v77) {
    xpc_object_t v77 = xpc_null_create();
  }
  xpc_dictionary_set_value(v6, (const char *)*MEMORY[0x1E4F4CE80], v77);
  xpc_object_t v78 = xpc_null_create();
  xpc_release(v77);
  xpc_release(v78);
LABEL_168:
  BOOL v113 = 0;
  size_t v79 = strlen((const char *)v8);
  if (v79 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v80 = v79;
  if (v79 >= 0x17)
  {
    uint64_t v82 = (v79 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v79 | 7) != 0x17) {
      uint64_t v82 = v79 | 7;
    }
    uint64_t v83 = v82 + 1;
    long long v81 = operator new(v82 + 1);
    size_t v108 = v80;
    unint64_t v109 = v83 | 0x8000000000000000;
    char v107 = v81;
    goto LABEL_175;
  }
  HIBYTE(v109) = v79;
  long long v81 = &v107;
  if (v79) {
LABEL_175:
  }
    memmove(v81, v8, v80);
  *((unsigned char *)v81 + v80) = 0;
  memset(&__p, 0, sizeof(__p));
  if (prop::tailspin::get((char *)&v107, (uint64_t)&__p))
  {
    int v84 = util::convert<BOOL>(&__p, &v113, 0);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_181;
    }
  }
  else
  {
    int v84 = 0;
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_181;
    }
  }
  operator delete(__p.__r_.__value_.__l.__data_);
LABEL_181:
  if (SHIBYTE(v109) < 0)
  {
    operator delete(v107);
    if (!v84) {
      goto LABEL_191;
    }
  }
  else if (!v84)
  {
    goto LABEL_191;
  }
  if (v113) {
    unint64_t v85 = "enabled";
  }
  else {
    unint64_t v85 = "disabled";
  }
  xpc_object_t v86 = xpc_string_create(v85);
  if (!v86) {
    xpc_object_t v86 = xpc_null_create();
  }
  xpc_dictionary_set_value(v6, (const char *)*MEMORY[0x1E4F4D010], v86);
  xpc_object_t v87 = xpc_null_create();
  xpc_release(v86);
  xpc_release(v87);
LABEL_191:
  uint64_t IsInternalBuild = TelephonyUtilIsInternalBuild();
  if ((IsInternalBuild & 1) != 0 || (uint64_t IsInternalBuild = TelephonyUtilIsCarrierBuild(), IsInternalBuild)) {
    int CompressionMode = capabilities::trace::getCompressionMode((capabilities::trace *)IsInternalBuild);
  }
  else {
    int CompressionMode = 2;
  }
  uint64_t v90 = (const void *)*MEMORY[0x1E4F47258];
  size_t v91 = strlen((const char *)*MEMORY[0x1E4F47258]);
  if (v91 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v92 = v91;
  if (v91 >= 0x17)
  {
    uint64_t v94 = (v91 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v91 | 7) != 0x17) {
      uint64_t v94 = v91 | 7;
    }
    uint64_t v95 = v94 + 1;
    size_t v93 = operator new(v94 + 1);
    size_t v108 = v92;
    unint64_t v109 = v95 | 0x8000000000000000;
    char v107 = v93;
  }
  else
  {
    HIBYTE(v109) = v91;
    size_t v93 = &v107;
    if (!v91) {
      goto LABEL_203;
    }
  }
  memmove(v93, v90, v92);
LABEL_203:
  *((unsigned char *)v93 + v92) = 0;
  memset(&__p, 0, sizeof(__p));
  if (prop::compression::get((char *)&v107, (uint64_t)&__p))
  {
    int v114 = -1431655766;
    if (util::convert<int>(&__p, &v114, 0)) {
      int CompressionMode = v114;
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v109) & 0x80000000) == 0) {
      goto LABEL_208;
    }
  }
  else if ((SHIBYTE(v109) & 0x80000000) == 0)
  {
    goto LABEL_208;
  }
  operator delete(v107);
LABEL_208:
  std::to_string(&__p, CompressionMode);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string v96 = &__p;
  }
  else {
    std::string v96 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  xpc_object_t v97 = xpc_string_create((const char *)v96);
  if (!v97) {
    xpc_object_t v97 = xpc_null_create();
  }
  xpc_dictionary_set_value(v6, (const char *)*MEMORY[0x1E4F4D000], v97);
  xpc_object_t v98 = xpc_null_create();
  xpc_release(v97);
  xpc_release(v98);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  value[0] = 0;
  size_t v99 = strlen((const char *)v28);
  if (v99 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v100 = v99;
  if (v99 >= 0x17)
  {
    uint64_t v102 = (v99 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v99 | 7) != 0x17) {
      uint64_t v102 = v99 | 7;
    }
    uint64_t v103 = v102 + 1;
    signed __int8 v101 = operator new(v102 + 1);
    size_t v108 = v100;
    unint64_t v109 = v103 | 0x8000000000000000;
    char v107 = v101;
    goto LABEL_222;
  }
  HIBYTE(v109) = v99;
  signed __int8 v101 = &v107;
  if (v99) {
LABEL_222:
  }
    memmove(v101, v28, v100);
  *((unsigned char *)v101 + v100) = 0;
  memset(&__p, 0, sizeof(__p));
  if (prop::systemlogs::get((char *)&v107, (uint64_t)&__p))
  {
    int v104 = util::convert<int>(&__p, value, 0);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_228;
    }
  }
  else
  {
    int v104 = 0;
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_228;
    }
  }
  operator delete(__p.__r_.__value_.__l.__data_);
LABEL_228:
  if (SHIBYTE(v109) < 0)
  {
    operator delete(v107);
    if (!v104) {
      goto LABEL_237;
    }
LABEL_234:
    xpc_object_t v105 = xpc_int64_create(value[0]);
    if (!v105) {
      xpc_object_t v105 = xpc_null_create();
    }
    xpc_dictionary_set_value(v6, (const char *)*MEMORY[0x1E4F4CF70], v105);
    xpc_object_t v106 = xpc_null_create();
    xpc_release(v105);
    xpc_release(v106);
    goto LABEL_237;
  }
  if (v104) {
    goto LABEL_234;
  }
LABEL_237:
  *a2 = v6;
  xpc_object_t v6 = xpc_null_create();
  if (SHIBYTE(v112) < 0) {
    operator delete(*(void **)&value[1]);
  }
LABEL_239:
  xpc_release(v6);
}

void sub_1C58C75E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  xpc_release(v28);
  _Unwind_Resume(a1);
}

void sub_1C58C76A4()
{
}

void LogTracker::copyPreference(uint64_t a1@<X0>, const void **a2@<X1>, xpc_object_t *a3@<X8>)
{
  xpc_object_t v6 = xpc_dictionary_create(0, 0, 0);
  uint64_t v7 = MEMORY[0x1E4F14590];
  if (v6 || (xpc_object_t v6 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C8792D30](v6) == v7)
    {
      xpc_retain(v6);
      xpc_object_t v8 = v6;
    }
    else
    {
      xpc_object_t v8 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v8 = xpc_null_create();
    xpc_object_t v6 = 0;
  }
  xpc_release(v6);
  if (MEMORY[0x1C8792D30](v8) != v7)
  {
    size_t v9 = *(NSObject **)(a1 + 88);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl(&dword_1C5767000, v9, OS_LOG_TYPE_ERROR, "Failed to create preference dictionary", buf, 2u);
    }
    *a3 = xpc_null_create();
    goto LABEL_39;
  }
  int v10 = *((char *)a2 + 23);
  if (v10 >= 0) {
    size_t v11 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v11 = (size_t)a2[1];
  }
  unint64_t v12 = v11 + 34;
  memset(buf, 170, 24);
  if (v11 + 34 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v12 > 0x16)
  {
    uint64_t v14 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v12 | 7) != 0x17) {
      uint64_t v14 = v12 | 7;
    }
    *(void *)&uint8_t buf[8] = v11 + 34;
    *(void *)&uint8_t buf[16] = (v14 + 1) | 0x8000000000000000;
    *(void *)long long buf = operator new(v14 + 1);
    qmemcpy(*(void **)buf, "/var/wireless/Library/Preferences/", 34);
    uint64_t v13 = (unsigned char *)(*(void *)buf + 34);
    if (!v11) {
      goto LABEL_24;
    }
  }
  else
  {
    qmemcpy(buf, "/var/wireless/Library/Preferences/", sizeof(buf));
    uint64_t v13 = v23;
  }
  if (v10 >= 0) {
    xpc_object_t v15 = a2;
  }
  else {
    xpc_object_t v15 = *a2;
  }
  memmove(v13, v15, v11);
LABEL_24:
  v13[v11] = 0;
  if (ctu::fs::file_exists())
  {
    if ((buf[23] & 0x80000000) != 0) {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)buf, *(std::string::size_type *)&buf[8]);
    }
    else {
      std::string __p = *(std::string *)buf;
    }
    util::readPlistToCFDictionary((uint64_t)&__p, &cf);
    ctu::cf_to_xpc((uint64_t *)&object, (ctu *)cf, v17);
    xpc_object_t v16 = object;
    if (object && MEMORY[0x1C8792D30](object) == v7) {
      xpc_retain(v16);
    }
    else {
      xpc_object_t v16 = xpc_null_create();
    }
    xpc_object_t v18 = xpc_null_create();
    xpc_release(v8);
    xpc_release(v18);
    xpc_release(object);
    xpc_object_t object = 0;
    if (cf) {
      CFRelease(cf);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    xpc_object_t v16 = v8;
  }
  *a3 = v16;
  xpc_object_t v8 = xpc_null_create();
  if ((buf[23] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
LABEL_39:
  xpc_release(v8);
}

void sub_1C58C7998(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  xpc_release(v23);
  _Unwind_Resume(a1);
}

void ___ZN10LogTracker23diagnosticToolsLog_syncEN8dispatch13group_sessionEN3xpc4dictEb_block_invoke(void *a1, unsigned int *a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    uint64_t v5 = a1[4];
    xpc_object_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      uint64_t v7 = v6;
      uint64_t v8 = a1[5];
      if (atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        if (!v8) {
          return;
        }
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v7);
        if (!v8) {
          return;
        }
      }
      uint64_t v9 = *a2;
      int v10 = *(NSObject **)(v5 + 88);
      if (v9)
      {
        if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
        {
          TelephonyXPC::Result::toString(v9, (uint64_t)__p);
          if (v13 >= 0) {
            size_t v11 = __p;
          }
          else {
            size_t v11 = (void **)__p[0];
          }
          *(_DWORD *)long long buf = 136315138;
          xpc_object_t v15 = v11;
          _os_log_error_impl(&dword_1C5767000, v10, OS_LOG_TYPE_ERROR, "Failed to collect logs. Result: %s", buf, 0xCu);
          if (v13 < 0) {
            operator delete(__p[0]);
          }
        }
      }
      else if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
      {
        LOWORD(__p[0]) = 0;
        _os_log_debug_impl(&dword_1C5767000, v10, OS_LOG_TYPE_DEBUG, "#D The log has been created", (uint8_t *)__p, 2u);
      }
    }
  }
}

uint64_t TelephonyXPC::Result::toString@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  switch(result)
  {
    case 0xE020E000:
      *(unsigned char *)(a2 + 23) = 14;
      strcpy((char *)a2, "kInternalError");
      return result;
    case 0xE020E001:
      *(unsigned char *)(a2 + 23) = 12;
      strcpy((char *)a2, "kServerError");
      return result;
    case 0xE020E002:
      uint64_t v2 = "kCommandError";
      goto LABEL_12;
    case 0xE020E003:
      *(unsigned char *)(a2 + 23) = 8;
      strcpy((char *)a2, "kTimeout");
      return result;
    case 0xE020E004:
      uint64_t v2 = "kNotSupported";
      goto LABEL_12;
    case 0xE020E005:
      *(unsigned char *)(a2 + 23) = 6;
      strcpy((char *)a2, "kRetry");
      return result;
    case 0xE020E006:
      *(unsigned char *)(a2 + 23) = 17;
      strcpy((char *)a2, "kPermissionDenied");
      return result;
    case 0xE020E007:
      uint64_t v2 = "kNotAvailable";
LABEL_12:
      *(unsigned char *)(a2 + 23) = 13;
      *(void *)a2 = *(void *)v2;
      *(void *)(a2 + 5) = *(void *)(v2 + 5);
      *(unsigned char *)(a2 + 13) = 0;
      break;
    default:
      if (result)
      {
        *(unsigned char *)(a2 + 23) = 17;
        strcpy((char *)a2, "kInvalidErrorCode");
      }
      else
      {
        *(unsigned char *)(a2 + 23) = 8;
        strcpy((char *)a2, "kSuccess");
      }
      break;
  }
  return result;
}

void __copy_helper_block_e8_40c35_ZTSNSt3__18weak_ptrI10LogTrackerEE56c31_ZTSKN8dispatch13group_sessionE(void *a1, void *a2)
{
  uint64_t v3 = a2[6];
  a1[5] = a2[5];
  a1[6] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  xpc_object_t v4 = a2[7];
  a1[7] = v4;
  if (v4)
  {
    dispatch_retain(v4);
    uint64_t v5 = a1[7];
    if (v5)
    {
      dispatch_group_enter(v5);
    }
  }
}

void __destroy_helper_block_e8_40c35_ZTSNSt3__18weak_ptrI10LogTrackerEE56c31_ZTSKN8dispatch13group_sessionE(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 56);
  if (v2)
  {
    dispatch_group_leave(v2);
    uint64_t v3 = *(NSObject **)(a1 + 56);
    if (v3) {
      dispatch_release(v3);
    }
  }
  xpc_object_t v4 = *(std::__shared_weak_count **)(a1 + 48);
  if (v4)
  {
    std::__shared_weak_count::__release_weak(v4);
  }
}

void LogTracker::systemLog_sync(uint64_t a1, dispatch_group_t *a2, xpc_object_t *a3, void *a4)
{
  uint64_t v80 = *MEMORY[0x1E4F143B8];
  xpc_object_t value = xpc_dictionary_get_value(*a3, (const char *)*MEMORY[0x1E4F4C2F8]);
  object[0] = value;
  if (value) {
    xpc_retain(value);
  }
  else {
    object[0] = xpc_null_create();
  }
  int v9 = xpc::dyn_cast_or_default((xpc *)object, 0);
  xpc_release(object[0]);
  int v10 = *(std::__shared_weak_count **)(a1 + 128);
  if (!v10 || (uint64_t v11 = *(void *)(a1 + 120), (v12 = std::__shared_weak_count::lock(v10)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  char v13 = v12;
  p_shared_weak_owners = &v12->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v12->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v13);
  }
  size_t v70 = (void *)0xAAAAAAAAAAAAAAAALL;
  dispatch_object_t v71 = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 3321888768;
  aBlock[2] = ___ZN10LogTracker14systemLog_syncEN8dispatch13group_sessionEN3xpc4dictENSt3__18functionIFvbS3_EEE_block_invoke;
  aBlock[3] = &__block_descriptor_100_e8_40c35_ZTSNSt3__18weak_ptrI10LogTrackerEE56c30_ZTSN8dispatch13group_sessionE64c38_ZTSNSt3__18functionIFvbN3xpc4dictEEEE_e241_v48__0_Result_i_basic_string_char__std::char_traits_char___std::allocator_char______compressed_pair_std::basic_string_char_::__rep__std::allocator_char______rep_______short__23c__0C_b7b1____long__Qb63b1____raw__3Q_______8_dict__object__v__40l;
  void aBlock[4] = a1;
  void aBlock[5] = v11;
  int v75 = v13;
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  dispatch_group_t v76 = *a2;
  if (v76)
  {
    dispatch_retain(v76);
    if (v76) {
      dispatch_group_enter(v76);
    }
  }
  uint64_t v15 = a4[3];
  if (!v15) {
    goto LABEL_14;
  }
  if ((void *)v15 != a4)
  {
    uint64_t v15 = (*(uint64_t (**)(uint64_t))(*(void *)v15 + 16))(v15);
LABEL_14:
    xpc_object_t v78 = (void *)v15;
    goto LABEL_16;
  }
  xpc_object_t v78 = v77;
  (*(void (**)(void *, void *))(*a4 + 24))(a4, v77);
LABEL_16:
  int v79 = v9;
  uint64_t v16 = _Block_copy(aBlock);
  xpc_object_t v17 = *(NSObject **)(a1 + 136);
  if (v17) {
    dispatch_retain(*(dispatch_object_t *)(a1 + 136));
  }
  size_t v70 = v16;
  dispatch_object_t v71 = v17;
  memset(object, 170, sizeof(object));
  xpc_object_t v18 = xpc_dictionary_get_value(*a3, (const char *)*MEMORY[0x1E4F4C4C8]);
  v61[0] = v18;
  if (v18) {
    xpc_retain(v18);
  }
  else {
    v61[0] = xpc_null_create();
  }
  Timestamp::Timestamp((Timestamp *)v67);
  Timestamp::asString((uint64_t)v67, 0, 9, __p);
  xpc::dyn_cast_or_default();
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v67, (void *)v67[1]);
  xpc_release(v61[0]);
  memset(__p, 170, sizeof(__p));
  xpc_object_t v19 = xpc_dictionary_get_value(*a3, (const char *)*MEMORY[0x1E4F4C7F8]);
  v67[0] = v19;
  if (v19) {
    xpc_retain(v19);
  }
  else {
    v67[0] = xpc_null_create();
  }
  xpc::dyn_cast_or_default((uint64_t *)__p, (xpc *)v67, (const object *)*MEMORY[0x1E4F4F928], v20);
  xpc_release(v67[0]);
  memset(v67, 170, sizeof(v67));
  xpc_object_t v21 = xpc_dictionary_get_value(*a3, (const char *)*MEMORY[0x1E4F4CA98]);
  v61[0] = v21;
  if (v21) {
    xpc_retain(v21);
  }
  else {
    v61[0] = xpc_null_create();
  }
  xpc::dyn_cast_or_default((uint64_t *)v67, (xpc *)v61, (const object *)"", v22);
  xpc_release(v61[0]);
  unint64_t v65 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v66 = 0xAAAAAAAAAAAAAAAALL;
  GetABMLogServer(&v63);
  abm::HelperClient::create();
  int v23 = v64;
  if (v64 && !atomic_fetch_add(&v64->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
  }
  xpc_object_t v24 = xpc_dictionary_create(0, 0, 0);
  if (v24 || (xpc_object_t v24 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C8792D30](v24) == MEMORY[0x1E4F14590])
    {
      xpc_retain(v24);
      xpc_object_t v25 = v24;
    }
    else
    {
      xpc_object_t v25 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v25 = xpc_null_create();
    xpc_object_t v24 = 0;
  }
  xpc_release(v24);
  if (SHIBYTE(object[2]) >= 0) {
    xpc_object_t v26 = object;
  }
  else {
    xpc_object_t v26 = (xpc_object_t *)object[0];
  }
  xpc_object_t v27 = xpc_string_create((const char *)v26);
  if (!v27) {
    xpc_object_t v27 = xpc_null_create();
  }
  xpc_dictionary_set_value(v25, (const char *)*MEMORY[0x1E4F47178], v27);
  xpc_object_t v28 = xpc_null_create();
  xpc_release(v27);
  xpc_release(v28);
  if (SHIBYTE(v67[2]) >= 0) {
    size_t v29 = v67;
  }
  else {
    size_t v29 = (xpc_object_t *)v67[0];
  }
  xpc_object_t v30 = xpc_string_create((const char *)v29);
  if (!v30) {
    xpc_object_t v30 = xpc_null_create();
  }
  xpc_dictionary_set_value(v25, (const char *)*MEMORY[0x1E4F47160], v30);
  xpc_object_t v31 = xpc_null_create();
  xpc_release(v30);
  xpc_release(v31);
  if (SHIBYTE(__p[2]) >= 0) {
    uint64_t v32 = __p;
  }
  else {
    uint64_t v32 = (void **)__p[0];
  }
  xpc_object_t v33 = xpc_string_create((const char *)v32);
  if (!v33) {
    xpc_object_t v33 = xpc_null_create();
  }
  xpc_dictionary_set_value(v25, (const char *)*MEMORY[0x1E4F47098], v33);
  xpc_object_t v34 = xpc_null_create();
  xpc_release(v33);
  xpc_release(v34);
  v61[0] = 0;
  v61[1] = 0;
  uint64_t v62 = 0;
  BOOL v35 = (const void *)*MEMORY[0x1E4F4C2E0];
  size_t v36 = strlen((const char *)*MEMORY[0x1E4F4C2E0]);
  if (v36 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v37 = v36;
  if (v36 >= 0x17)
  {
    uint64_t v39 = (v36 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v36 | 7) != 0x17) {
      uint64_t v39 = v36 | 7;
    }
    uint64_t v40 = v39 + 1;
    p_dst = (long long *)operator new(v39 + 1);
    *((void *)&__dst + 1) = v37;
    unint64_t v73 = v40 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
    goto LABEL_60;
  }
  HIBYTE(v73) = v36;
  p_dst = &__dst;
  if (v36) {
LABEL_60:
  }
    memmove(p_dst, v35, v37);
  *((unsigned char *)p_dst + v37) = 0;
  prop::systemlogs::get((char *)&__dst, (uint64_t)v61);
  if (SHIBYTE(v73) < 0) {
    operator delete((void *)__dst);
  }
  if (v62 >= 0) {
    size_t v41 = v61;
  }
  else {
    size_t v41 = (xpc_object_t *)v61[0];
  }
  xpc_object_t v42 = xpc_string_create((const char *)v41);
  if (!v42) {
    xpc_object_t v42 = xpc_null_create();
  }
  xpc_dictionary_set_value(v25, (const char *)*MEMORY[0x1E4F47090], v42);
  xpc_object_t v43 = xpc_null_create();
  xpc_release(v42);
  xpc_release(v43);
  uint64_t v44 = *(NSObject **)(a1 + 88);
  if (!os_log_type_enabled(v44, OS_LOG_TYPE_DEBUG))
  {
    if (v9 != 2) {
      goto LABEL_70;
    }
LABEL_111:
    xpc_object_t v50 = xpc_dictionary_get_value(*a3, (const char *)*MEMORY[0x1E4F4CBA8]);
    *(void *)&long long __dst = v50;
    if (v50) {
      xpc_retain(v50);
    }
    else {
      *(void *)&long long __dst = xpc_null_create();
    }
    char v51 = xpc::dyn_cast_or_default((xpc *)&__dst, 0);
    xpc_object_t v52 = xpc_BOOL_create(v51);
    if (!v52) {
      xpc_object_t v52 = xpc_null_create();
    }
    xpc_dictionary_set_value(v25, (const char *)*MEMORY[0x1E4F47220], v52);
    xpc_object_t v53 = xpc_null_create();
    xpc_release(v52);
    xpc_release(v53);
    xpc_release((xpc_object_t)__dst);
    xpc_object_t v57 = v25;
    if (v25)
    {
      xpc_retain(v25);
      uint64_t v54 = v70;
      if (!v70)
      {
LABEL_121:
        uint64_t v55 = v54;
        BOOL v56 = v71;
        if (v71) {
          dispatch_retain(v71);
        }
        abm::HelperClient::perform();
        if (v56) {
          dispatch_release(v56);
        }
        if (v55) {
          _Block_release(v55);
        }
        xpc_release(v57);
        if (SHIBYTE(v62) < 0) {
          goto LABEL_84;
        }
        goto LABEL_85;
      }
    }
    else
    {
      xpc_object_t v57 = xpc_null_create();
      uint64_t v54 = v70;
      if (!v70) {
        goto LABEL_121;
      }
    }
    uint64_t v54 = _Block_copy(v54);
    goto LABEL_121;
  }
  uint64_t v49 = abm::helper::asString();
  LODWORD(__dst) = 136315138;
  *(void *)((char *)&__dst + 4) = v49;
  _os_log_debug_impl(&dword_1C5767000, v44, OS_LOG_TYPE_DEBUG, "#D System Logs: %s", (uint8_t *)&__dst, 0xCu);
  if (v9 == 2) {
    goto LABEL_111;
  }
LABEL_70:
  if (v9 != 1) {
    goto LABEL_83;
  }
  xpc_object_t v60 = v25;
  if (v25)
  {
    xpc_retain(v25);
    int v45 = v70;
    if (!v70) {
      goto LABEL_76;
    }
    goto LABEL_75;
  }
  xpc_object_t v60 = xpc_null_create();
  int v45 = v70;
  if (v70) {
LABEL_75:
  }
    int v45 = _Block_copy(v45);
LABEL_76:
  long long v58 = v45;
  xpc_object_t v59 = v71;
  if (v71) {
    dispatch_retain(v71);
  }
  abm::HelperClient::perform();
  if (v59) {
    dispatch_release(v59);
  }
  if (v58) {
    _Block_release(v58);
  }
  xpc_release(v60);
LABEL_83:
  if (SHIBYTE(v62) < 0) {
LABEL_84:
  }
    operator delete(v61[0]);
LABEL_85:
  xpc_release(v25);
  uint64_t v46 = (std::__shared_weak_count *)v66;
  if (v66 && !atomic_fetch_add((atomic_ullong *volatile)(v66 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
    std::__shared_weak_count::__release_weak(v46);
    if ((SHIBYTE(v67[2]) & 0x80000000) == 0)
    {
LABEL_88:
      if ((SHIBYTE(__p[2]) & 0x80000000) == 0) {
        goto LABEL_89;
      }
      goto LABEL_107;
    }
  }
  else if ((SHIBYTE(v67[2]) & 0x80000000) == 0)
  {
    goto LABEL_88;
  }
  operator delete(v67[0]);
  if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
  {
LABEL_89:
    if ((SHIBYTE(object[2]) & 0x80000000) == 0) {
      goto LABEL_90;
    }
    goto LABEL_108;
  }
LABEL_107:
  operator delete(__p[0]);
  if ((SHIBYTE(object[2]) & 0x80000000) == 0)
  {
LABEL_90:
    xpc_object_t v47 = v71;
    if (!v71) {
      goto LABEL_92;
    }
    goto LABEL_91;
  }
LABEL_108:
  operator delete(object[0]);
  xpc_object_t v47 = v71;
  if (v71) {
LABEL_91:
  }
    dispatch_release(v47);
LABEL_92:
  if (v70) {
    _Block_release(v70);
  }
  if (v78 == v77)
  {
    (*(void (**)(void *))(v77[0] + 32))(v77);
    xpc_object_t v48 = v76;
    if (!v76) {
      goto LABEL_102;
    }
    goto LABEL_100;
  }
  if (v78) {
    (*(void (**)(void))(*v78 + 40))();
  }
  xpc_object_t v48 = v76;
  if (v76)
  {
LABEL_100:
    dispatch_group_leave(v48);
    if (v76) {
      dispatch_release(v76);
    }
  }
LABEL_102:
  if (v75) {
    std::__shared_weak_count::__release_weak(v75);
  }
  std::__shared_weak_count::__release_weak(v13);
}

void sub_1C58C8820(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, xpc_object_t object, char a12, uint64_t a13, xpc_object_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,char a23,uint64_t a24,xpc_object_t a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,xpc_object_t a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,char a43,uint64_t a44,xpc_object_t a45,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void ___ZN10LogTracker14systemLog_syncEN8dispatch13group_sessionEN3xpc4dictENSt3__18functionIFvbS3_EEE_block_invoke(void *a1, unsigned int *a2, void **a3)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  xpc_object_t v4 = (std::__shared_weak_count *)a1[6];
  if (!v4) {
    return;
  }
  uint64_t v7 = a1[4];
  uint64_t v8 = std::__shared_weak_count::lock(v4);
  if (!v8) {
    return;
  }
  int v9 = v8;
  uint64_t v10 = a1[5];
  if (atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (!v10) {
      return;
    }
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
    if (!v10) {
      return;
    }
  }
  if (a1[11])
  {
    int v11 = *a2;
    unint64_t v12 = *a3;
    xpc_object_t object = v12;
    if (v12)
    {
      xpc_retain(v12);
      LOBYTE(__p[0]) = v11 == 0;
      uint64_t v13 = a1[11];
      if (v13)
      {
LABEL_10:
        (*(void (**)(uint64_t, void **, xpc_object_t *))(*(void *)v13 + 48))(v13, __p, &object);
        xpc_release(object);
        xpc_object_t object = 0;
        goto LABEL_11;
      }
    }
    else
    {
      xpc_object_t object = xpc_null_create();
      LOBYTE(__p[0]) = v11 == 0;
      uint64_t v13 = a1[11];
      if (v13) {
        goto LABEL_10;
      }
    }
    std::__throw_bad_function_call[abi:ne180100]();
  }
LABEL_11:
  if (*a2)
  {
    uint64_t v14 = *(NSObject **)(v7 + 88);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      uint64_t v15 = abm::helper::asString();
      TelephonyXPC::Result::toString(*a2, (uint64_t)__p);
      if (v18 >= 0) {
        uint64_t v16 = __p;
      }
      else {
        uint64_t v16 = (void **)__p[0];
      }
      *(_DWORD *)long long buf = 136315394;
      uint64_t v21 = v15;
      __int16 v22 = 2080;
      int v23 = v16;
      _os_log_error_impl(&dword_1C5767000, v14, OS_LOG_TYPE_ERROR, "Failed to collect system logs mode: %s result: %s", buf, 0x16u);
      if (v18 < 0) {
        operator delete(__p[0]);
      }
    }
  }
}

void sub_1C58C8CD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, xpc_object_t object)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t __copy_helper_block_e8_40c35_ZTSNSt3__18weak_ptrI10LogTrackerEE56c30_ZTSN8dispatch13group_sessionE64c38_ZTSNSt3__18functionIFvbN3xpc4dictEEEE(void *a1, void *a2)
{
  uint64_t v4 = a2[6];
  a1[5] = a2[5];
  a1[6] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 16), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = a2[7];
  a1[7] = v5;
  if (v5)
  {
    dispatch_retain(v5);
    xpc_object_t v6 = a1[7];
    if (v6) {
      dispatch_group_enter(v6);
    }
  }
  uint64_t result = a2[11];
  if (!result) {
    goto LABEL_9;
  }
  if ((void *)result != a2 + 8)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 16))(result);
LABEL_9:
    a1[11] = result;
    return result;
  }
  a1[11] = a1 + 8;
  return (*(uint64_t (**)(void))(*(void *)a2[11] + 24))(a2[11]);
}

void sub_1C58C8DD8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(NSObject **)(v1 + 56);
  if (v3)
  {
    dispatch_group_leave(v3);
    uint64_t v4 = *(NSObject **)(v1 + 56);
    if (v4) {
      dispatch_release(v4);
    }
  }
  uint64_t v5 = *(std::__shared_weak_count **)(v1 + 48);
  if (v5) {
    std::__shared_weak_count::__release_weak(v5);
  }
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_40c35_ZTSNSt3__18weak_ptrI10LogTrackerEE56c30_ZTSN8dispatch13group_sessionE64c38_ZTSNSt3__18functionIFvbN3xpc4dictEEEE(void *a1)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = (void *)a1[11];
  if (v3 == v2)
  {
    (*(void (**)(void *))(*v2 + 32))(v2);
    uint64_t v4 = a1[7];
    if (!v4) {
      goto LABEL_9;
    }
    goto LABEL_7;
  }
  if (v3) {
    (*(void (**)(void *))(*v3 + 40))(v3);
  }
  uint64_t v4 = a1[7];
  if (v4)
  {
LABEL_7:
    dispatch_group_leave(v4);
    uint64_t v5 = a1[7];
    if (v5) {
      dispatch_release(v5);
    }
  }
LABEL_9:
  xpc_object_t v6 = (std::__shared_weak_count *)a1[6];
  if (v6)
  {
    std::__shared_weak_count::__release_weak(v6);
  }
}

void *std::function<void ()(BOOL,xpc::dict)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
    return a1;
  }
  else
  {
    if (v2) {
      (*(void (**)(void *))(*v2 + 40))(v2);
    }
    return a1;
  }
}

void LogTracker::archiveLogs_sync(void *a1, NSObject **a2, xpc_object_t *a3)
{
  xpc_object_t value = xpc_dictionary_get_value(*a3, (const char *)*MEMORY[0x1E4F4D210]);
  *(void *)long long buf = value;
  if (value) {
    xpc_retain(value);
  }
  else {
    *(void *)long long buf = xpc_null_create();
  }
  uint64_t IsInternalBuild = TelephonyUtilIsInternalBuild();
  if ((IsInternalBuild & 1) != 0 || (uint64_t IsInternalBuild = TelephonyUtilIsCarrierBuild(), IsInternalBuild)) {
    uint64_t CompressionMode = capabilities::trace::getCompressionMode((capabilities::trace *)IsInternalBuild);
  }
  else {
    uint64_t CompressionMode = 2;
  }
  int v9 = xpc::dyn_cast_or_default((xpc *)buf, (const object *)CompressionMode);
  xpc_release(*(xpc_object_t *)buf);
  if (!v9)
  {
    int v11 = a1[11];
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl(&dword_1C5767000, v11, OS_LOG_TYPE_ERROR, "Compression is disabled!", buf, 2u);
    }
    return;
  }
  xpc_object_t v10 = xpc_dictionary_get_value(*a3, (const char *)*MEMORY[0x1E4F4CF88]);
  *(void *)long long buf = v10;
  if (v10) {
    xpc_retain(v10);
  }
  else {
    *(void *)long long buf = xpc_null_create();
  }
  char v12 = xpc::dyn_cast_or_default((xpc *)buf, 0);
  xpc_release(*(xpc_object_t *)buf);
  memset(buf, 170, 24);
  xpc_object_t v13 = xpc_dictionary_get_value(*a3, (const char *)*MEMORY[0x1E4F4C4C8]);
  xpc_object_t object = v13;
  if (v13) {
    xpc_retain(v13);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  Timestamp::Timestamp((Timestamp *)&v49);
  Timestamp::asString((uint64_t)&v49, 0, 9, v51);
  xpc::dyn_cast_or_default();
  if (SHIBYTE(v51[2]) < 0) {
    operator delete((void *)v51[0]);
  }
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&v49, v50);
  xpc_release(object);
  memset(v51, 170, sizeof(v51));
  xpc_object_t v14 = xpc_dictionary_get_value(*a3, (const char *)*MEMORY[0x1E4F4C7F8]);
  xpc_object_t v49 = v14;
  if (v14) {
    xpc_retain(v14);
  }
  else {
    xpc_object_t v49 = xpc_null_create();
  }
  xpc::dyn_cast_or_default(v51, (xpc *)&v49, (const object *)*MEMORY[0x1E4F4F928], v15);
  xpc_release(v49);
  uint64_t v16 = (std::__shared_weak_count *)a1[16];
  if (!v16 || (v17 = a1[15], (char v18 = std::__shared_weak_count::lock(v16)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  xpc_object_t v19 = v18;
  p_shared_weak_owners = &v18->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v18->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v19);
  }
  xpc_object_t v49 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  dispatch_object_t v50 = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 3321888768;
  aBlock[2] = ___ZN10LogTracker16archiveLogs_syncEN8dispatch13group_sessionEN3xpc4dictE_block_invoke;
  aBlock[3] = &__block_descriptor_64_e8_40c35_ZTSNSt3__18weak_ptrI10LogTrackerEE56c31_ZTSKN8dispatch13group_sessionE_e241_v48__0_Result_i_basic_string_char__std::char_traits_char___std::allocator_char______compressed_pair_std::basic_string_char_::__rep__std::allocator_char______rep_______short__23c__0C_b7b1____long__Qb63b1____raw__3Q_______8_dict__object__v__40l;
  void aBlock[4] = a1;
  void aBlock[5] = v17;
  xpc_object_t v47 = v19;
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  uint64_t v21 = *a2;
  dispatch_group_t group = v21;
  if (v21)
  {
    dispatch_retain(v21);
    dispatch_group_enter(group);
  }
  __int16 v22 = _Block_copy(aBlock);
  int v23 = a1[17];
  if (v23) {
    dispatch_retain(v23);
  }
  xpc_object_t v49 = v22;
  dispatch_object_t v50 = v23;
  xpc_object_t object = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  unint64_t v45 = 0xAAAAAAAAAAAAAAAALL;
  GetABMLogServer(&v42);
  abm::HelperClient::create();
  uint64_t v24 = v43;
  if (v43 && !atomic_fetch_add(&v43->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
    std::__shared_weak_count::__release_weak(v24);
  }
  xpc_object_t v25 = xpc_dictionary_create(0, 0, 0);
  if (v25 || (xpc_object_t v25 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C8792D30](v25) == MEMORY[0x1E4F14590])
    {
      xpc_retain(v25);
      xpc_object_t v26 = v25;
    }
    else
    {
      xpc_object_t v26 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v26 = xpc_null_create();
    xpc_object_t v25 = 0;
  }
  xpc_release(v25);
  if (v51[2] >= 0) {
    xpc_object_t v27 = (const char *)v51;
  }
  else {
    xpc_object_t v27 = (const char *)v51[0];
  }
  xpc_object_t v28 = xpc_string_create(v27);
  if (!v28) {
    xpc_object_t v28 = xpc_null_create();
  }
  xpc_dictionary_set_value(v26, (const char *)*MEMORY[0x1E4F47190], v28);
  xpc_object_t v29 = xpc_null_create();
  xpc_release(v28);
  xpc_release(v29);
  if ((buf[23] & 0x80u) == 0) {
    xpc_object_t v30 = buf;
  }
  else {
    xpc_object_t v30 = *(uint8_t **)buf;
  }
  xpc_object_t v31 = xpc_string_create((const char *)v30);
  if (!v31) {
    xpc_object_t v31 = xpc_null_create();
  }
  xpc_dictionary_set_value(v26, (const char *)*MEMORY[0x1E4F47178], v31);
  xpc_object_t v32 = xpc_null_create();
  xpc_release(v31);
  xpc_release(v32);
  xpc_object_t v33 = xpc_int64_create(v9);
  if (!v33) {
    xpc_object_t v33 = xpc_null_create();
  }
  xpc_dictionary_set_value(v26, (const char *)*MEMORY[0x1E4F47258], v33);
  xpc_object_t v34 = xpc_null_create();
  xpc_release(v33);
  xpc_release(v34);
  xpc_object_t v35 = xpc_BOOL_create(v12);
  if (!v35) {
    xpc_object_t v35 = xpc_null_create();
  }
  xpc_dictionary_set_value(v26, (const char *)*MEMORY[0x1E4F47108], v35);
  xpc_object_t v36 = xpc_null_create();
  xpc_release(v35);
  xpc_release(v36);
  xpc_object_t v41 = v26;
  if (v26)
  {
    xpc_retain(v26);
    xpc_object_t v37 = v49;
    if (!v49) {
      goto LABEL_58;
    }
    goto LABEL_57;
  }
  xpc_object_t v41 = xpc_null_create();
  xpc_object_t v37 = v49;
  if (v49) {
LABEL_57:
  }
    xpc_object_t v37 = _Block_copy(v37);
LABEL_58:
  uint64_t v39 = v37;
  uint64_t v40 = v50;
  if (v50) {
    dispatch_retain(v50);
  }
  abm::HelperClient::perform();
  if (v40) {
    dispatch_release(v40);
  }
  if (v39) {
    _Block_release(v39);
  }
  xpc_release(v41);
  xpc_release(v26);
  xpc_object_t v38 = (std::__shared_weak_count *)v45;
  if (v45 && !atomic_fetch_add((atomic_ullong *volatile)(v45 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
    std::__shared_weak_count::__release_weak(v38);
  }
  if (v50) {
    dispatch_release(v50);
  }
  if (v49) {
    _Block_release(v49);
  }
  if (group)
  {
    dispatch_group_leave(group);
    if (group) {
      dispatch_release(group);
    }
  }
  if (v47) {
    std::__shared_weak_count::__release_weak(v47);
  }
  std::__shared_weak_count::__release_weak(v19);
  if ((SHIBYTE(v51[2]) & 0x80000000) == 0)
  {
    if (((char)buf[23] & 0x80000000) == 0) {
      return;
    }
LABEL_80:
    operator delete(*(void **)buf);
    return;
  }
  operator delete((void *)v51[0]);
  if ((char)buf[23] < 0) {
    goto LABEL_80;
  }
}

void sub_1C58C9604(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, xpc_object_t object, char a13, uint64_t a14, xpc_object_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,std::__shared_weak_count *a23,dispatch_group_t group,xpc_object_t a25,uint64_t a26)
{
  dispatch::callback<void({block_pointer})(TelephonyXPC::Result,xpc::dict)>::~callback((uint64_t)&a10);
  xpc_release(object);
  xpc_object_t object = 0;
  xpc_release(v27);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  dispatch::callback<void({block_pointer})(TelephonyXPC::Result,xpc::dict)>::~callback((uint64_t)&a25);
  if (group)
  {
    dispatch_group_leave(group);
    if (group) {
      dispatch_release(group);
    }
  }
  if (a23) {
    std::__shared_weak_count::__release_weak(a23);
  }
  std::__shared_weak_count::__release_weak(v26);
  if (*(char *)(v28 - 97) < 0) {
    operator delete(*(void **)(v28 - 120));
  }
  if (*(char *)(v28 - 73) < 0)
  {
    operator delete(*(void **)(v28 - 96));
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void ___ZN10LogTracker16archiveLogs_syncEN8dispatch13group_sessionEN3xpc4dictE_block_invoke(void *a1, unsigned int *a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    uint64_t v5 = a1[4];
    xpc_object_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      uint64_t v7 = v6;
      uint64_t v8 = a1[5];
      if (atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        if (!v8) {
          return;
        }
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v7);
        if (!v8) {
          return;
        }
      }
      uint64_t v9 = *a2;
      xpc_object_t v10 = *(NSObject **)(v5 + 88);
      if (v9)
      {
        if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
        {
          TelephonyXPC::Result::toString(v9, (uint64_t)__p);
          if (v13 >= 0) {
            int v11 = __p;
          }
          else {
            int v11 = (void **)__p[0];
          }
          *(_DWORD *)long long buf = 136315138;
          uint64_t v15 = v11;
          _os_log_error_impl(&dword_1C5767000, v10, OS_LOG_TYPE_ERROR, "Compression failed. Result: %s", buf, 0xCu);
          if (v13 < 0) {
            operator delete(__p[0]);
          }
        }
      }
      else if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
      {
        LOWORD(__p[0]) = 0;
        _os_log_debug_impl(&dword_1C5767000, v10, OS_LOG_TYPE_DEBUG, "#D Compression is done.", (uint8_t *)__p, 2u);
      }
    }
  }
}

void LogTracker::processLogarchive_sync(void *a1, NSObject **a2, const char *a3, void *a4)
{
  uint64_t v56 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = (std::__shared_weak_count *)a1[16];
  if (!v5 || (uint64_t v9 = a1[15], (v10 = std::__shared_weak_count::lock(v5)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  int v11 = v10;
  p_shared_weak_owners = &v10->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v10->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v11);
  }
  xpc_object_t v49 = (void *)0xAAAAAAAAAAAAAAAALL;
  dispatch_object_t object = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 3321888768;
  aBlock[2] = ___ZN10LogTracker22processLogarchive_syncEN8dispatch13group_sessionENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS2_8functionIFvbEEE_block_invoke;
  aBlock[3] = &__block_descriptor_96_e8_40c35_ZTSNSt3__18weak_ptrI10LogTrackerEE56c31_ZTSKN8dispatch13group_sessionE64c27_ZTSNSt3__18functionIFvbEEE_e241_v48__0_Result_i_basic_string_char__std::char_traits_char___std::allocator_char______compressed_pair_std::basic_string_char_::__rep__std::allocator_char______rep_______short__23c__0C_b7b1____long__Qb63b1____raw__3Q_______8_dict__object__v__40l;
  void aBlock[4] = a1;
  void aBlock[5] = v9;
  xpc_object_t v52 = v11;
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  char v13 = *a2;
  dispatch_group_t group = v13;
  if (v13)
  {
    dispatch_retain(v13);
    dispatch_group_enter(group);
  }
  uint64_t v14 = a4[3];
  if (v14)
  {
    if ((void *)v14 == a4)
    {
      uint64_t v55 = v54;
      (*(void (**)(void *, void *))(*a4 + 24))(a4, v54);
      goto LABEL_12;
    }
    uint64_t v14 = (*(uint64_t (**)(uint64_t))(*(void *)v14 + 16))(v14);
  }
  uint64_t v55 = (void *)v14;
LABEL_12:
  uint64_t v15 = _Block_copy(aBlock);
  uint64_t v16 = a1[17];
  if (v16) {
    dispatch_retain(v16);
  }
  xpc_object_t v49 = v15;
  dispatch_object_t object = v16;
  unint64_t v47 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v48 = 0xAAAAAAAAAAAAAAAALL;
  GetABMLogServer(&v45);
  abm::HelperClient::create();
  uint64_t v17 = v46;
  if (v46 && !atomic_fetch_add(&v46->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  xpc_object_t v18 = xpc_dictionary_create(0, 0, 0);
  if (v18 || (xpc_object_t v18 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C8792D30](v18) == MEMORY[0x1E4F14590])
    {
      xpc_retain(v18);
      xpc_object_t v19 = v18;
    }
    else
    {
      xpc_object_t v19 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v19 = xpc_null_create();
    xpc_object_t v18 = 0;
  }
  xpc_release(v18);
  unint64_t v20 = *((unsigned __int8 *)a3 + 23);
  if (a3[23] < 0)
  {
    uint64_t v21 = *(const char **)a3;
    uint64_t v22 = *((void *)a3 + 1);
  }
  else
  {
    uint64_t v21 = a3;
    uint64_t v22 = *((unsigned __int8 *)a3 + 23);
  }
  int v23 = v21 - 1;
  do
  {
    if (!v22)
    {
      unint64_t v25 = 0;
      memset(__dst, 170, sizeof(__dst));
      if ((v20 & 0x80) != 0) {
        goto LABEL_82;
      }
LABEL_31:
      xpc_object_t v26 = a3;
      if (v25 <= v20)
      {
        size_t v27 = v20 - v25;
        if (v20 - v25 >= 0x7FFFFFFFFFFFFFF8) {
          goto LABEL_84;
        }
        goto LABEL_33;
      }
LABEL_86:
      std::string::__throw_out_of_range[abi:ne180100]();
    }
    int v24 = v23[v22--];
  }
  while (v24 != 92 && v24 != 47);
  unint64_t v25 = v22 + 1;
  memset(__dst, 170, sizeof(__dst));
  if ((v20 & 0x80) == 0) {
    goto LABEL_31;
  }
LABEL_82:
  unint64_t v20 = *((void *)a3 + 1);
  if (v20 < v25) {
    goto LABEL_86;
  }
  xpc_object_t v26 = *(const char **)a3;
  size_t v27 = v20 - v25;
  if (v20 - v25 >= 0x7FFFFFFFFFFFFFF8) {
LABEL_84:
  }
    std::string::__throw_length_error[abi:ne180100]();
LABEL_33:
  if (v27 >= 0x17)
  {
    uint64_t v37 = (v27 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v27 | 7) != 0x17) {
      uint64_t v37 = v27 | 7;
    }
    uint64_t v38 = v37 + 1;
    uint64_t v28 = (void **)operator new(v37 + 1);
    __dst[1] = (void *)v27;
    void __dst[2] = (void *)(v38 | 0x8000000000000000);
    __dst[0] = v28;
LABEL_51:
    memmove(v28, &v26[v25], v27);
    *((unsigned char *)v28 + v27) = 0;
    if (a3[23] < 0) {
      goto LABEL_52;
    }
    goto LABEL_36;
  }
  HIBYTE(__dst[2]) = v27;
  uint64_t v28 = __dst;
  if (v20 != v25) {
    goto LABEL_51;
  }
  *((unsigned char *)__dst + v27) = 0;
  if ((a3[23] & 0x80000000) == 0) {
    goto LABEL_36;
  }
LABEL_52:
  a3 = *(const char **)a3;
LABEL_36:
  xpc_object_t v29 = xpc_string_create(a3);
  if (!v29) {
    xpc_object_t v29 = xpc_null_create();
  }
  xpc_dictionary_set_value(v19, (const char *)*MEMORY[0x1E4F47190], v29);
  xpc_object_t v30 = xpc_null_create();
  xpc_release(v29);
  xpc_release(v30);
  if (SHIBYTE(__dst[2]) >= 0) {
    xpc_object_t v31 = (const char *)__dst;
  }
  else {
    xpc_object_t v31 = (const char *)__dst[0];
  }
  xpc_object_t v32 = xpc_string_create(v31);
  if (!v32) {
    xpc_object_t v32 = xpc_null_create();
  }
  xpc_dictionary_set_value(v19, (const char *)*MEMORY[0x1E4F471C0], v32);
  xpc_object_t v33 = xpc_null_create();
  xpc_release(v32);
  xpc_release(v33);
  xpc_object_t v34 = xpc_int64_create(2);
  if (!v34) {
    xpc_object_t v34 = xpc_null_create();
  }
  xpc_dictionary_set_value(v19, (const char *)*MEMORY[0x1E4F47258], v34);
  xpc_object_t v35 = xpc_null_create();
  xpc_release(v34);
  xpc_release(v35);
  xpc_object_t v43 = v19;
  if (!v19)
  {
    xpc_object_t v43 = xpc_null_create();
    xpc_object_t v36 = v49;
    if (!v49) {
      goto LABEL_55;
    }
    goto LABEL_54;
  }
  xpc_retain(v19);
  xpc_object_t v36 = v49;
  if (v49) {
LABEL_54:
  }
    xpc_object_t v36 = _Block_copy(v36);
LABEL_55:
  xpc_object_t v41 = v36;
  uint64_t v42 = object;
  if (object) {
    dispatch_retain(object);
  }
  abm::HelperClient::perform();
  if (v42) {
    dispatch_release(v42);
  }
  if (v41) {
    _Block_release(v41);
  }
  xpc_release(v43);
  if (SHIBYTE(__dst[2]) < 0) {
    operator delete(__dst[0]);
  }
  xpc_release(v19);
  uint64_t v39 = (std::__shared_weak_count *)v48;
  if (v48 && !atomic_fetch_add((atomic_ullong *volatile)(v48 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
    std::__shared_weak_count::__release_weak(v39);
  }
  if (object) {
    dispatch_release(object);
  }
  if (v49) {
    _Block_release(v49);
  }
  if (v55 == v54)
  {
    (*(void (**)(void *))(v54[0] + 32))(v54);
    uint64_t v40 = group;
    if (!group) {
      goto LABEL_78;
    }
    goto LABEL_76;
  }
  if (v55) {
    (*(void (**)(void))(*v55 + 40))();
  }
  uint64_t v40 = group;
  if (group)
  {
LABEL_76:
    dispatch_group_leave(v40);
    if (group) {
      dispatch_release(group);
    }
  }
LABEL_78:
  if (v52) {
    std::__shared_weak_count::__release_weak(v52);
  }
  std::__shared_weak_count::__release_weak(v11);
}

void sub_1C58C9FF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, xpc_object_t object, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,char a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,std::__shared_weak_count *a31,dispatch_group_t group)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void ___ZN10LogTracker22processLogarchive_syncEN8dispatch13group_sessionENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS2_8functionIFvbEEE_block_invoke(void *a1, _DWORD *a2)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    uint64_t v5 = a1[4];
    xpc_object_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      uint64_t v7 = v6;
      uint64_t v8 = a1[5];
      if (atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        if (!v8) {
          return;
        }
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v7);
        if (!v8) {
          return;
        }
      }
      uint64_t v9 = a1[11];
      if (v9)
      {
        LOBYTE(__p[0]) = *a2 == 0;
        (*(void (**)(uint64_t, void **))(*(void *)v9 + 48))(v9, __p);
      }
      uint64_t v10 = *a2;
      int v11 = *(NSObject **)(v5 + 88);
      if (v10)
      {
        if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
        {
          TelephonyXPC::Result::toString(v10, (uint64_t)__p);
          if (v14 >= 0) {
            char v12 = __p;
          }
          else {
            char v12 = (void **)__p[0];
          }
          *(_DWORD *)long long buf = 136315138;
          uint64_t v16 = v12;
          _os_log_error_impl(&dword_1C5767000, v11, OS_LOG_TYPE_ERROR, "Logarchive compression failed. Result: %s", buf, 0xCu);
          if (v14 < 0) {
            operator delete(__p[0]);
          }
        }
      }
      else if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
      {
        LOWORD(__p[0]) = 0;
        _os_log_debug_impl(&dword_1C5767000, v11, OS_LOG_TYPE_DEBUG, "#D Logarchive compression is done.", (uint8_t *)__p, 2u);
      }
    }
  }
}

uint64_t __copy_helper_block_e8_40c35_ZTSNSt3__18weak_ptrI10LogTrackerEE56c31_ZTSKN8dispatch13group_sessionE64c27_ZTSNSt3__18functionIFvbEEE(void *a1, void *a2)
{
  uint64_t v4 = a2[6];
  a1[5] = a2[5];
  a1[6] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 16), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = a2[7];
  a1[7] = v5;
  if (v5)
  {
    dispatch_retain(v5);
    xpc_object_t v6 = a1[7];
    if (v6) {
      dispatch_group_enter(v6);
    }
  }
  uint64_t result = a2[11];
  if (!result) {
    goto LABEL_9;
  }
  if ((void *)result != a2 + 8)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 16))(result);
LABEL_9:
    a1[11] = result;
    return result;
  }
  a1[11] = a1 + 8;
  return (*(uint64_t (**)(void))(*(void *)a2[11] + 24))(a2[11]);
}

void sub_1C58CA3F0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(NSObject **)(v1 + 56);
  if (v3)
  {
    dispatch_group_leave(v3);
    uint64_t v4 = *(NSObject **)(v1 + 56);
    if (v4) {
      dispatch_release(v4);
    }
  }
  uint64_t v5 = *(std::__shared_weak_count **)(v1 + 48);
  if (v5) {
    std::__shared_weak_count::__release_weak(v5);
  }
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_40c35_ZTSNSt3__18weak_ptrI10LogTrackerEE56c31_ZTSKN8dispatch13group_sessionE64c27_ZTSNSt3__18functionIFvbEEE(void *a1)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = (void *)a1[11];
  if (v3 == v2)
  {
    (*(void (**)(void *))(*v2 + 32))(v2);
    uint64_t v4 = a1[7];
    if (!v4) {
      goto LABEL_9;
    }
    goto LABEL_7;
  }
  if (v3) {
    (*(void (**)(void *))(*v3 + 40))(v3);
  }
  uint64_t v4 = a1[7];
  if (v4)
  {
LABEL_7:
    dispatch_group_leave(v4);
    uint64_t v5 = a1[7];
    if (v5) {
      dispatch_release(v5);
    }
  }
LABEL_9:
  xpc_object_t v6 = (std::__shared_weak_count *)a1[6];
  if (v6)
  {
    std::__shared_weak_count::__release_weak(v6);
  }
}

void *std::function<void ()(BOOL)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
    return a1;
  }
  else
  {
    if (v2) {
      (*(void (**)(void *))(*v2 + 40))(v2);
    }
    return a1;
  }
}

void LogTracker::jsonSummary_sync(void *a1, NSObject **a2, xpc_object_t *a3)
{
  if (TelephonyUtilIsInternalBuild() & 1) != 0 || (TelephonyUtilIsCarrierBuild())
  {
    xpc_object_t v6 = (const void *)*MEMORY[0x1E4F4C888];
    size_t v7 = strlen((const char *)*MEMORY[0x1E4F4C888]);
    if (v7 >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    uint64_t v8 = (void *)v7;
    if (v7 >= 0x17)
    {
      uint64_t v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v7 | 7) != 0x17) {
        uint64_t v10 = v7 | 7;
      }
      uint64_t v11 = v10 + 1;
      uint64_t v9 = (void **)operator new(v10 + 1);
      __dst[1] = v8;
      unint64_t v31 = v11 | 0x8000000000000000;
      __dst[0] = v9;
    }
    else
    {
      HIBYTE(v31) = v7;
      uint64_t v9 = __dst;
      if (!v7) {
        goto LABEL_11;
      }
    }
    memmove(v9, v6, (size_t)v8);
LABEL_11:
    *((unsigned char *)v8 + (void)v9) = 0;
    aBlock = 0;
    CFTypeRef cf = 0;
    Service::broadcastEvent((uint64_t)a1, (uint64_t)__dst, &cf, (const void **)&aBlock);
    if (aBlock) {
      _Block_release(aBlock);
    }
    if (cf) {
      CFRelease(cf);
    }
    if (SHIBYTE(v31) < 0) {
      operator delete(__dst[0]);
    }
    char v12 = (std::__shared_weak_count *)a1[16];
    if (!v12 || (uint64_t v13 = a1[15], (v14 = std::__shared_weak_count::lock(v12)) == 0)) {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    uint64_t v15 = v14;
    p_shared_weak_owners = &v14->__shared_weak_owners_;
    atomic_fetch_add_explicit(&v14->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v15);
    }
    uint64_t v23 = v13;
    int v24 = v15;
    atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
    uint64_t v17 = *a2;
    unint64_t v25 = v17;
    if (v17)
    {
      dispatch_retain(v17);
      dispatch_group_enter(v17);
    }
    xpc_object_t v18 = *a3;
    xpc_object_t v26 = v18;
    if (v18)
    {
      xpc_retain(v18);
    }
    else
    {
      xpc_object_t v18 = xpc_null_create();
      xpc_object_t v26 = v18;
    }
    size_t v27 = a1;
    xpc_object_t v19 = a1[22];
    unint64_t v20 = a1[17];
    uint64_t v21 = operator new(0x28uLL);
    void *v21 = v13;
    v21[1] = v15;
    uint64_t v23 = 0;
    int v24 = 0;
    uint64_t v21[2] = v17;
    if (v17)
    {
      dispatch_retain(v17);
      dispatch_group_enter(v17);
    }
    v21[3] = v18;
    if (v18) {
      xpc_retain(v18);
    }
    else {
      v21[3] = xpc_null_create();
    }
    v21[4] = a1;
    dispatch_group_notify_f(v19, v20, v21, (dispatch_function_t)dispatch::detail::group_notify<LogTracker::jsonSummary_sync(dispatch::group_session,xpc::dict)::$_0>(dispatch_group_s *,dispatch_queue_s *,LogTracker::jsonSummary_sync(dispatch::group_session,xpc::dict)::$_0 &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke);
    xpc_release(v18);
    if (v17)
    {
      dispatch_group_leave(v17);
      dispatch_release(v17);
    }
    std::__shared_weak_count::__release_weak(v15);
    return;
  }
  uint64_t v22 = a1[11];
  if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
  {
    LOWORD(v23) = 0;
    _os_log_error_impl(&dword_1C5767000, v22, OS_LOG_TYPE_ERROR, "JSON summary is not supported!", (uint8_t *)&v23, 2u);
  }
}

void sub_1C58CA83C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  LogTracker::jsonSummary_sync(dispatch::group_session,xpc::dict)::$_0::~$_0((uint64_t)&a9);
  std::__shared_weak_count::__release_weak(v9);
  _Unwind_Resume(a1);
}

void sub_1C58CA85C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *aBlock, const void *a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (aBlock) {
    _Block_release(aBlock);
  }
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&a15);
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t LogTracker::jsonSummary_sync(dispatch::group_session,xpc::dict)::$_0::~$_0(uint64_t a1)
{
  xpc_release(*(xpc_object_t *)(a1 + 24));
  *(void *)(a1 + 24) = 0;
  uint64_t v2 = *(NSObject **)(a1 + 16);
  if (v2)
  {
    dispatch_group_leave(v2);
    uint64_t v3 = *(NSObject **)(a1 + 16);
    if (v3) {
      dispatch_release(v3);
    }
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 8);
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

uint64_t LogTracker::postLogCollectionSupported(LogTracker *this)
{
  if (TelephonyUtilIsInternalBuild()) {
    return 1;
  }

  return TelephonyUtilIsCarrierBuild();
}

void LogTracker::postLogCollectionExternal_sync(void *a1, xpc_object_t *a2)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = a1[26];
  dispatch_group_t v31 = v4;
  if (v4)
  {
    dispatch_retain(v4);
    dispatch_group_enter(v4);
  }
  xpc_object_t v30 = *a2;
  xpc_object_t v5 = v30;
  if (v30)
  {
    xpc_retain(v30);
  }
  else
  {
    xpc_object_t v5 = xpc_null_create();
    xpc_object_t v30 = v5;
  }
  xpc_object_t v34 = 0;
  LogTracker::systemLog_sync((uint64_t)a1, &v31, &v30, v33);
  if (v34 == v33)
  {
    (*(void (**)(void *))(v33[0] + 32))(v33);
  }
  else if (v34)
  {
    (*(void (**)(void *))(*v34 + 40))(v34);
  }
  xpc_release(v5);
  xpc_object_t v30 = 0;
  if (v4)
  {
    dispatch_group_leave(v4);
    dispatch_release(v4);
  }
  xpc_object_t v6 = (std::__shared_weak_count *)a1[16];
  if (!v6 || (uint64_t v7 = a1[15], (v8 = std::__shared_weak_count::lock(v6)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v9 = v8;
  p_shared_weak_owners = &v8->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    uint64_t v28 = v8;
    atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
    xpc_object_t v11 = *a2;
    xpc_object_t v29 = *a2;
    if (*a2)
    {
LABEL_16:
      xpc_retain(v11);
      goto LABEL_19;
    }
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
    uint64_t v28 = v9;
    atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
    xpc_object_t v11 = *a2;
    xpc_object_t v29 = *a2;
    if (*a2) {
      goto LABEL_16;
    }
  }
  xpc_object_t v11 = xpc_null_create();
  xpc_object_t v29 = v11;
LABEL_19:
  atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  xpc_object_t v12 = *a2;
  xpc_object_t v25 = *a2;
  if (*a2)
  {
    xpc_retain(v12);
    xpc_object_t v26 = v9;
    atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    object_8 = v11;
    if (v11) {
      goto LABEL_21;
    }
  }
  else
  {
    xpc_object_t v12 = xpc_null_create();
    xpc_object_t v25 = v12;
    xpc_object_t v26 = v9;
    atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    object_8 = v11;
    if (v11)
    {
LABEL_21:
      xpc_retain(v11);
      xpc_object_t v13 = *a2;
      uint64_t v17 = a1;
      xpc_object_t v18 = *a2;
      if (*a2) {
        goto LABEL_22;
      }
      goto LABEL_27;
    }
  }
  xpc_object_t v11 = xpc_null_create();
  object_8 = v11;
  xpc_object_t v13 = *a2;
  uint64_t v17 = a1;
  xpc_object_t v18 = *a2;
  if (*a2)
  {
LABEL_22:
    xpc_retain(v13);
    *(void *)&long long v19 = v7;
    *((void *)&v19 + 1) = v9;
    atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    unint64_t v20 = a1;
    xpc_object_t v21 = v12;
    if (v12) {
      goto LABEL_23;
    }
LABEL_28:
    xpc_object_t v21 = xpc_null_create();
    *(void *)&long long v22 = v7;
    *((void *)&v22 + 1) = v9;
    atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    uint64_t v23 = a1;
    xpc_object_t v24 = v11;
    if (v11) {
      goto LABEL_24;
    }
    goto LABEL_29;
  }
LABEL_27:
  xpc_object_t v18 = xpc_null_create();
  *(void *)&long long v19 = v7;
  *((void *)&v19 + 1) = v9;
  atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  unint64_t v20 = a1;
  xpc_object_t v21 = v12;
  if (!v12) {
    goto LABEL_28;
  }
LABEL_23:
  xpc_retain(v12);
  *(void *)&long long v22 = v7;
  *((void *)&v22 + 1) = v9;
  atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  uint64_t v23 = a1;
  xpc_object_t v24 = v11;
  if (v11)
  {
LABEL_24:
    xpc_retain(v11);
    goto LABEL_30;
  }
LABEL_29:
  xpc_object_t v24 = xpc_null_create();
LABEL_30:
  char v14 = a1[26];
  uint64_t v15 = a1[17];
  uint64_t v32 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v16 = operator new(0x50uLL);
  *uint64_t v16 = v17;
  v16[1] = v18;
  if (v18) {
    xpc_retain(v18);
  }
  else {
    v16[1] = xpc_null_create();
  }
  *((_OWORD *)v16 + 1) = v19;
  v16[4] = v20;
  v16[5] = v21;
  if (v21) {
    xpc_retain(v21);
  }
  else {
    v16[5] = xpc_null_create();
  }
  *((_OWORD *)v16 + 3) = v22;
  v16[8] = v23;
  v16[9] = v24;
  if (v24) {
    xpc_retain(v24);
  }
  else {
    v16[9] = xpc_null_create();
  }
  uint64_t v32 = 0;
  dispatch_group_notify_f(v14, v15, v16, (dispatch_function_t)dispatch::detail::group_notify<LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_2>(dispatch_group_s *,dispatch_queue_s *,LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_2 &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke);
  std::unique_ptr<LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_2,std::default_delete<LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_2>>::~unique_ptr[abi:ne180100](&v32);
  xpc_release(v24);
  xpc_release(v21);
  xpc_release(v18);
  xpc_release(object_8);
  std::__shared_weak_count::__release_weak(v26);
  xpc_release(v25);
  std::__shared_weak_count::__release_weak(v9);
  xpc_release(v29);
  std::__shared_weak_count::__release_weak(v28);
  std::__shared_weak_count::__release_weak(v9);
}

void sub_1C58CAD90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_2::~$_2(uint64_t a1)
{
  xpc_release(*(xpc_object_t *)(a1 + 72));
  *(void *)(a1 + 72) = 0;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 56);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  xpc_release(*(xpc_object_t *)(a1 + 40));
  *(void *)(a1 + 40) = 0;
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 24);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  xpc_release(*(xpc_object_t *)(a1 + 8));
  *(void *)(a1 + 8) = 0;
  return a1;
}

uint64_t LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_1::~$_1(uint64_t a1)
{
  xpc_release(*(xpc_object_t *)(a1 + 56));
  *(void *)(a1 + 56) = 0;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  xpc_release(*(xpc_object_t *)(a1 + 24));
  *(void *)(a1 + 24) = 0;
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 8);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

uint64_t LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_0::~$_0(uint64_t a1)
{
  xpc_release(*(xpc_object_t *)(a1 + 24));
  *(void *)(a1 + 24) = 0;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void LogTracker::postLogCollectionInternal_sync(uint64_t a1, xpc_object_t *a2)
{
  uint64_t v2 = a2;
  uint64_t v199 = *MEMORY[0x1E4F143B8];
  memset(v184, 170, sizeof(v184));
  xpc_object_t value = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E4F4C6A0]);
  object[0].__r_.__value_.__r.__words[0] = (std::string::size_type)value;
  if (value) {
    xpc_retain(value);
  }
  else {
    object[0].__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
  }
  size_t v141 = (char *)*MEMORY[0x1E4F4C820];
  xpc::dyn_cast_or_default((uint64_t *)v184, (xpc *)object, (const object *)*MEMORY[0x1E4F4C820], v5);
  xpc_release(object[0].__r_.__value_.__l.__data_);
  memset(v183, 170, sizeof(v183));
  xpc_object_t v6 = xpc_dictionary_get_value(*v2, (const char *)*MEMORY[0x1E4F4C690]);
  object[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v6;
  if (v6) {
    xpc_retain(v6);
  }
  else {
    object[0].__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
  }
  xpc::dyn_cast_or_default((uint64_t *)v183, (xpc *)object, (const object *)"", v7);
  xpc_release(object[0].__r_.__value_.__l.__data_);
  memset(v182, 170, sizeof(v182));
  xpc_object_t v8 = xpc_dictionary_get_value(*v2, (const char *)*MEMORY[0x1E4F4CA38]);
  object[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
  if (v8) {
    xpc_retain(v8);
  }
  else {
    object[0].__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
  }
  xpc::dyn_cast_or_default((uint64_t *)v182, (xpc *)object, (const object *)"", v9);
  xpc_release(object[0].__r_.__value_.__l.__data_);
  memset(&v181, 170, sizeof(v181));
  uint64_t v10 = (const char *)*MEMORY[0x1E4F4CA98];
  xpc_object_t v11 = xpc_dictionary_get_value(*v2, (const char *)*MEMORY[0x1E4F4CA98]);
  object[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v11;
  if (v11) {
    xpc_retain(v11);
  }
  else {
    object[0].__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
  }
  xpc::dyn_cast_or_default((uint64_t *)&v181, (xpc *)object, (const object *)"", v12);
  xpc_release(object[0].__r_.__value_.__l.__data_);
  memset(&__s, 170, sizeof(__s));
  xpc_object_t v13 = xpc_dictionary_get_value(*v2, (const char *)*MEMORY[0x1E4F4C4C8]);
  __p[0] = v13;
  if (v13) {
    xpc_retain(v13);
  }
  else {
    __p[0] = xpc_null_create();
  }
  Timestamp::Timestamp((Timestamp *)__dst);
  Timestamp::asString((uint64_t)__dst, 0, 9, object);
  xpc::dyn_cast_or_default();
  if (SHIBYTE(object[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(object[0].__r_.__value_.__l.__data_);
  }
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)__dst, *(void **)&__dst[8]);
  xpc_release(__p[0]);
  xpc_object_t v14 = xpc_dictionary_get_value(*v2, (const char *)*MEMORY[0x1E4F4C180]);
  object[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v14;
  if (v14) {
    xpc_retain(v14);
  }
  else {
    object[0].__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
  }
  int v15 = xpc::dyn_cast_or_default((xpc *)object, (const object *)7);
  xpc_release(object[0].__r_.__value_.__l.__data_);
  memset(&v179, 170, sizeof(v179));
  xpc_object_t v16 = xpc_dictionary_get_value(*v2, (const char *)*MEMORY[0x1E4F4C8D8]);
  object[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v16;
  if (v16) {
    xpc_retain(v16);
  }
  else {
    object[0].__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
  }
  xpc::dyn_cast_or_default((uint64_t *)&v179, (xpc *)object, (const object *)"", v17);
  xpc_release(object[0].__r_.__value_.__l.__data_);
  xpc_object_t v18 = xpc_dictionary_get_value(*v2, (const char *)*MEMORY[0x1E4F4D210]);
  object[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v18;
  if (v18) {
    xpc_retain(v18);
  }
  else {
    object[0].__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
  }
  uint64_t IsInternalBuild = TelephonyUtilIsInternalBuild();
  if ((IsInternalBuild & 1) != 0 || (uint64_t IsInternalBuild = TelephonyUtilIsCarrierBuild(), IsInternalBuild)) {
    uint64_t CompressionMode = capabilities::trace::getCompressionMode((capabilities::trace *)IsInternalBuild);
  }
  else {
    uint64_t CompressionMode = 2;
  }
  int v142 = xpc::dyn_cast_or_default((xpc *)object, (const object *)CompressionMode);
  xpc_release(object[0].__r_.__value_.__l.__data_);
  char v178 = 1;
  xpc_object_t v21 = (const void *)*MEMORY[0x1E4F4D268];
  size_t v22 = strlen((const char *)*MEMORY[0x1E4F4D268]);
  if (v22 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v23 = v22;
  uint64_t v143 = a1;
  if (v22 >= 0x17)
  {
    uint64_t v25 = (v22 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v22 | 7) != 0x17) {
      uint64_t v25 = v22 | 7;
    }
    uint64_t v26 = v25 + 1;
    xpc_object_t v24 = operator new(v25 + 1);
    *(void *)&__dst[8] = v23;
    *(void *)&__dst[16] = v26 | 0x8000000000000000;
    *(void *)long long __dst = v24;
    goto LABEL_38;
  }
  __dst[23] = v22;
  xpc_object_t v24 = __dst;
  if (v22) {
LABEL_38:
  }
    memmove(v24, v21, v23);
  v24[v23] = 0;
  memset(object, 0, 24);
  if (prop::logfilter::get(__dst, (uint64_t)object)) {
    util::convert<BOOL>(object, (BOOL *)&v178, 0);
  }
  size_t v27 = (void *)a1;
  if (SHIBYTE(object[0].__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(object[0].__r_.__value_.__l.__data_);
    if ((__dst[23] & 0x80000000) == 0)
    {
LABEL_43:
      if (v178) {
        goto LABEL_44;
      }
      goto LABEL_48;
    }
  }
  else if ((__dst[23] & 0x80000000) == 0)
  {
    goto LABEL_43;
  }
  operator delete(*(void **)__dst);
  if (v178)
  {
LABEL_44:
    *(void *)&long long v28 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v28 + 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)xpc_object_t v188 = v28;
    *(_OWORD *)&object[3].__r_.__value_.__r.__words[1] = v28;
    *(_OWORD *)&object[2].__r_.__value_.__r.__words[2] = v28;
    *(_OWORD *)&object[2].__r_.__value_.__l.__data_ = v28;
    *(_OWORD *)&object[1].__r_.__value_.__r.__words[1] = v28;
    *(_OWORD *)&object[0].__r_.__value_.__r.__words[2] = v28;
    *(_OWORD *)&object[0].__r_.__value_.__l.__data_ = v28;
    if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v177, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
    }
    else {
      std::string v177 = __s;
    }
    if (SHIBYTE(v179.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v176, v179.__r_.__value_.__l.__data_, v179.__r_.__value_.__l.__size_);
    }
    else {
      std::string v176 = v179;
    }
    ResetInfo::ResetInfo(object, (long long *)v183, (long long *)v182, (long long *)&v181, (uint64_t)&v177, v15, (long long *)&v176);
    if (SHIBYTE(v176.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v176.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v177.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_56;
      }
    }
    else if ((SHIBYTE(v177.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_56;
    }
    operator delete(v177.__r_.__value_.__l.__data_);
LABEL_56:
    pthread_mutex_lock(&ctu::Singleton<LogDumpDB,LogDumpDB,ctu::PthreadMutexGuardPolicy<LogDumpDB>>::sInstance);
    xpc_object_t v30 = (void *)xmmword_1EBBDD390;
    if (!(void)xmmword_1EBBDD390)
    {
      LogDumpDB::create_default_global((LogDumpDB *)__dst);
      long long v31 = *(_OWORD *)__dst;
      *(_OWORD *)long long __dst = 0uLL;
      uint64_t v32 = (std::__shared_weak_count *)*((void *)&xmmword_1EBBDD390 + 1);
      xmmword_1EBBDD390 = v31;
      if (v32 && !atomic_fetch_add(&v32->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v32);
      }
      xpc_object_t v33 = *(std::__shared_weak_count **)&__dst[8];
      if (*(void *)&__dst[8]
        && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&__dst[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
      xpc_object_t v30 = (void *)xmmword_1EBBDD390;
    }
    xpc_object_t v34 = (std::__shared_weak_count *)*((void *)&xmmword_1EBBDD390 + 1);
    __p[0] = v30;
    __p[1] = *((xpc_object_t *)&xmmword_1EBBDD390 + 1);
    if (*((void *)&xmmword_1EBBDD390 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&xmmword_1EBBDD390 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    pthread_mutex_unlock(&ctu::Singleton<LogDumpDB,LogDumpDB,ctu::PthreadMutexGuardPolicy<LogDumpDB>>::sInstance);
    BOOL isDuplicated = LogDumpDB::isDuplicated((uint64_t)v30, (uint64_t)object, 1200);
    BOOL v36 = isDuplicated;
    if (v34 && !atomic_fetch_add(&v34->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
      if (v36)
      {
LABEL_69:
        std::string::append(&v181, " (duplicated signature detected)", 0x20uLL);
        if ((v181.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v37 = &v181;
        }
        else {
          uint64_t v37 = (std::string *)v181.__r_.__value_.__r.__words[0];
        }
        xpc_object_t v38 = xpc_string_create((const char *)v37);
        if (!v38) {
          xpc_object_t v38 = xpc_null_create();
        }
        xpc_dictionary_set_value(*v2, v10, v38);
        xpc_object_t v39 = xpc_null_create();
        xpc_release(v38);
        xpc_release(v39);
        if ((v188[15] & 0x80000000) != 0)
        {
          operator delete((void *)object[3].__r_.__value_.__r.__words[2]);
          if ((SHIBYTE(object[2].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_76:
            if ((SHIBYTE(object[1].__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
              goto LABEL_77;
            }
            goto LABEL_139;
          }
        }
        else if ((SHIBYTE(object[2].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          goto LABEL_76;
        }
        operator delete(object[2].__r_.__value_.__l.__data_);
        if ((SHIBYTE(object[1].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_77:
          if ((SHIBYTE(object[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_78:
            char v40 = 1;
            goto LABEL_96;
          }
LABEL_140:
          operator delete(object[0].__r_.__value_.__l.__data_);
          goto LABEL_78;
        }
LABEL_139:
        operator delete(object[1].__r_.__value_.__l.__data_);
        if ((SHIBYTE(object[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_78;
        }
        goto LABEL_140;
      }
    }
    else if (isDuplicated)
    {
      goto LABEL_69;
    }
    if ((v188[15] & 0x80000000) != 0)
    {
      operator delete((void *)object[3].__r_.__value_.__r.__words[2]);
      if ((SHIBYTE(object[2].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_84:
        if ((SHIBYTE(object[1].__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_85;
        }
        goto LABEL_135;
      }
    }
    else if ((SHIBYTE(object[2].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_84;
    }
    operator delete(object[2].__r_.__value_.__l.__data_);
    if ((SHIBYTE(object[1].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_85:
      if ((SHIBYTE(object[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_86;
      }
LABEL_136:
      operator delete(object[0].__r_.__value_.__l.__data_);
      goto LABEL_86;
    }
LABEL_135:
    operator delete(object[1].__r_.__value_.__l.__data_);
    if ((SHIBYTE(object[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_86;
    }
    goto LABEL_136;
  }
LABEL_48:
  xpc_object_t v29 = *(NSObject **)(a1 + 88);
  if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(object[0].__r_.__value_.__l.__data_) = 0;
    _os_log_impl(&dword_1C5767000, v29, OS_LOG_TYPE_DEFAULT, "#I Duplicated Signature Detection is disabled", (uint8_t *)object, 2u);
  }
LABEL_86:
  if (SHIBYTE(v184[2]) >= 0) {
    size_t v41 = HIBYTE(v184[2]);
  }
  else {
    size_t v41 = (size_t)v184[1];
  }
  if (v41 == strlen(v141))
  {
    if (SHIBYTE(v184[2]) >= 0) {
      uint64_t v42 = v184;
    }
    else {
      uint64_t v42 = (std::string::value_type **)v184[0];
    }
    char v40 = 0;
    if (!memcmp(v42, v141, v41))
    {
      xpc_object_t v43 = (const char *)*MEMORY[0x1E4F4C2F8];
      goto LABEL_220;
    }
  }
  else
  {
    char v40 = 0;
  }
LABEL_96:
  memset(v157, 170, 24);
  xpc_object_t v44 = xpc_dictionary_get_value(*v2, (const char *)*MEMORY[0x1E4F4C7F8]);
  object[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v44;
  if (v44) {
    xpc_retain(v44);
  }
  else {
    object[0].__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
  }
  xpc::dyn_cast_or_default((uint64_t *)v157, (xpc *)object, (const object *)*MEMORY[0x1E4F4F928], v45);
  xpc_release(object[0].__r_.__value_.__l.__data_);
  if (!v142)
  {
    unint64_t v194 = 0xAAAAAAAAAAAAAAAALL;
    *(void *)&long long v50 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v50 + 1) = 0xAAAAAAAAAAAAAAAALL;
    long long v193 = v50;
    long long v192 = v50;
    *(_OWORD *)&v191[16] = v50;
    *(_OWORD *)v191 = v50;
    long long v190 = v50;
    *(_OWORD *)&v189[32] = v50;
    *(_OWORD *)&v189[16] = v50;
    *(_OWORD *)size_t v189 = v50;
    *(_OWORD *)&v188[16] = v50;
    *(_OWORD *)xpc_object_t v188 = v50;
    *(_OWORD *)&object[3].__r_.__value_.__r.__words[1] = v50;
    *(_OWORD *)&object[2].__r_.__value_.__r.__words[2] = v50;
    *(_OWORD *)&object[2].__r_.__value_.__l.__data_ = v50;
    *(_OWORD *)&object[1].__r_.__value_.__r.__words[1] = v50;
    *(_OWORD *)&object[0].__r_.__value_.__r.__words[2] = v50;
    *(_OWORD *)&object[0].__r_.__value_.__l.__data_ = v50;
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)object);
    char v51 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(object, (uint64_t)".*(", 3);
    if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_s = &__s;
    }
    else {
      p_s = (std::string *)__s.__r_.__value_.__r.__words[0];
    }
    if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(__s.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = __s.__r_.__value_.__l.__size_;
    }
    uint64_t v54 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)p_s, size);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)").*", 3);
    *(void *)&long long v55 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v55 + 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)&__dst[32] = v55;
    *(_OWORD *)unint64_t v145 = v55;
    *(_OWORD *)long long __dst = v55;
    *(_OWORD *)&__dst[16] = v55;
    if ((v188[8] & 0x10) != 0)
    {
      std::string::size_type v58 = *(void *)v188;
      if (*(void *)v188 < object[2].__r_.__value_.__l.__size_)
      {
        *(void *)xpc_object_t v188 = object[2].__r_.__value_.__l.__size_;
        std::string::size_type v58 = object[2].__r_.__value_.__l.__size_;
      }
      std::string::pointer data = object[2].__r_.__value_.__l.__data_;
      size_t v56 = v58 - object[2].__r_.__value_.__r.__words[0];
      if (v58 - object[2].__r_.__value_.__r.__words[0] > 0x7FFFFFFFFFFFFFF7) {
        goto LABEL_142;
      }
    }
    else
    {
      if ((v188[8] & 8) == 0)
      {
        size_t v56 = 0;
        BYTE7(v149) = 0;
        xpc_object_t v57 = __p;
        goto LABEL_125;
      }
      std::string::pointer data = object[1].__r_.__value_.__l.__data_;
      size_t v56 = object[1].__r_.__value_.__r.__words[2] - object[1].__r_.__value_.__r.__words[0];
      if (object[1].__r_.__value_.__r.__words[2] - object[1].__r_.__value_.__r.__words[0] > 0x7FFFFFFFFFFFFFF7) {
LABEL_142:
      }
        std::string::__throw_length_error[abi:ne180100]();
    }
    if (v56 >= 0x17)
    {
      uint64_t v60 = (v56 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v56 | 7) != 0x17) {
        uint64_t v60 = v56 | 7;
      }
      uint64_t v61 = v60 + 1;
      xpc_object_t v57 = operator new(v60 + 1);
      __p[1] = (xpc_object_t)v56;
      *(void *)&long long v149 = v61 | 0x8000000000000000;
      __p[0] = v57;
    }
    else
    {
      BYTE7(v149) = v56;
      xpc_object_t v57 = __p;
      if (!v56)
      {
LABEL_125:
        *((unsigned char *)v57 + v56) = 0;
        std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]<std::char_traits<char>,std::allocator<char>>((uint64_t)__dst, (uint64_t)__p, 0);
        if (SBYTE7(v149) < 0) {
          operator delete(__p[0]);
        }
        v163 = 0;
        v162 = 0;
        *(void *)uint64_t v164 = 0;
        std::locale::locale(&v170, (const std::locale *)__dst);
        long long v171 = *(_OWORD *)&__dst[8];
        long long v172 = *(_OWORD *)&__dst[24];
        uint64_t v173 = *(void *)&__dst[40];
        v174 = (std::__shared_weak_count *)v145[0];
        if (v145[0]) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)v145[0] + 1, 1uLL, memory_order_relaxed);
        }
        xpc_object_t v175 = v145[1];
        ctu::fs::get_filtered_files();
        char v139 = v40;
        dispatch_object_t v140 = v2;
        uint64_t v62 = v174;
        if (v174 && !atomic_fetch_add(&v174->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
          std::__shared_weak_count::__release_weak(v62);
          std::locale::~locale(&v170);
          uint64_t v63 = (std::__shared_weak_count *)v162;
          uint64_t v64 = v163;
          if ((v157[23] & 0x80000000) == 0) {
            goto LABEL_132;
          }
        }
        else
        {
          std::locale::~locale(&v170);
          uint64_t v63 = (std::__shared_weak_count *)v162;
          uint64_t v64 = v163;
          if ((v157[23] & 0x80000000) == 0)
          {
LABEL_132:
            std::string v168 = *(std::string *)v157;
            goto LABEL_145;
          }
        }
        std::string::__init_copy_ctor_external(&v168, *(const std::string::value_type **)v157, *(std::string::size_type *)&v157[8]);
LABEL_145:
        uint64_t v169 = v143;
        if (v63 == v64)
        {
LABEL_199:
          size_t v93 = (void *)v168.__r_.__value_.__r.__words[0];
          int v94 = SHIBYTE(v168.__r_.__value_.__r.__words[2]);
          memset(&v168, 0, sizeof(v168));
          if (v94 < 0)
          {
            operator delete(v93);
            if (SHIBYTE(v168.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v168.__r_.__value_.__l.__data_);
            }
          }
          uint64_t v95 = (std::__shared_weak_count *)v162;
          uint64_t v2 = v140;
          if (v162)
          {
            std::string v96 = v163;
            xpc_object_t v97 = v162;
            if (v163 != v162)
            {
              do
              {
                if (SHIBYTE(v96[-1].__shared_weak_owners_) < 0) {
                  operator delete(v96[-1].__vftable);
                }
                --v96;
              }
              while (v96 != v95);
              xpc_object_t v97 = v162;
            }
            v163 = v95;
            operator delete(v97);
          }
          xpc_object_t v98 = (std::__shared_weak_count *)v145[0];
          if (v145[0] && !atomic_fetch_add((atomic_ullong *volatile)v145[0] + 1, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
            std::__shared_weak_count::__release_weak(v98);
          }
          std::locale::~locale((std::locale *)__dst);
          object[0].__r_.__value_.__r.__words[0] = *MEMORY[0x1E4FBA418];
          *(std::string::size_type *)((char *)object[0].__r_.__value_.__r.__words
                                    + *(void *)(object[0].__r_.__value_.__r.__words[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
          object[0].__r_.__value_.__l.__size_ = MEMORY[0x1E4FBA470] + 16;
          if (SHIBYTE(object[3].__r_.__value_.__r.__words[2]) < 0) {
            operator delete(object[3].__r_.__value_.__l.__data_);
          }
          std::streambuf::~streambuf();
          std::ostream::~ostream();
          MEMORY[0x1C8791FB0](&v188[16]);
          char v40 = v139;
          goto LABEL_216;
        }
        while (1)
        {
          uint64_t v65 = v169;
          int v66 = SHIBYTE(v168.__r_.__value_.__r.__words[2]);
          if ((v168.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            size_t v67 = HIBYTE(v168.__r_.__value_.__r.__words[2]);
          }
          else {
            size_t v67 = v168.__r_.__value_.__l.__size_;
          }
          unint64_t v68 = v67 + 1;
          memset(v155, 170, 24);
          if (v67 + 1 > 0x7FFFFFFFFFFFFFF7) {
LABEL_333:
          }
            std::string::__throw_length_error[abi:ne180100]();
          if (v68 >= 0x17)
          {
            uint64_t v70 = (v68 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v68 | 7) != 0x17) {
              uint64_t v70 = v68 | 7;
            }
            uint64_t v71 = v70 + 1;
            xpc_object_t v69 = operator new(v70 + 1);
            *(void *)&v155[16] = v71 | 0x8000000000000000;
            *(void *)uint64_t v155 = v69;
            *(void *)&v155[8] = v67 + 1;
            size_t v27 = (void *)v143;
          }
          else
          {
            memset(v155, 0, 24);
            xpc_object_t v69 = v155;
            v155[23] = v67 + 1;
            if (!v67) {
              goto LABEL_163;
            }
          }
          if (v66 >= 0) {
            int64_t v72 = &v168;
          }
          else {
            int64_t v72 = (std::string *)v168.__r_.__value_.__r.__words[0];
          }
          memmove(v69, v72, v67);
LABEL_163:
          *(_WORD *)&v69[v67] = 47;
          int shared_weak_owners_high = SHIBYTE(v63->__shared_weak_owners_);
          if (shared_weak_owners_high >= 0) {
            uint64_t v74 = (const std::string::value_type *)v63;
          }
          else {
            uint64_t v74 = (const std::string::value_type *)v63->__vftable;
          }
          if (shared_weak_owners_high >= 0) {
            std::string::size_type shared_owners = HIBYTE(v63->__shared_weak_owners_);
          }
          else {
            std::string::size_type shared_owners = v63->__shared_owners_;
          }
          dispatch_group_t v76 = std::string::append((std::string *)v155, v74, shared_owners);
          long long v77 = *(_OWORD *)&v76->__r_.__value_.__l.__data_;
          *(void *)&long long v149 = *((void *)&v76->__r_.__value_.__l + 2);
          *(_OWORD *)std::string __p = v77;
          v76->__r_.__value_.__l.__size_ = 0;
          v76->__r_.__value_.__r.__words[2] = 0;
          v76->__r_.__value_.__r.__words[0] = 0;
          int v78 = ctu::fs::remove_dir();
          if (SBYTE7(v149) < 0)
          {
            operator delete(__p[0]);
            if ((v155[23] & 0x80000000) != 0)
            {
LABEL_174:
              operator delete(*(void **)v155);
              int v79 = *(NSObject **)(v65 + 88);
              if (!os_log_type_enabled(v79, OS_LOG_TYPE_DEFAULT)) {
                goto LABEL_148;
              }
              goto LABEL_175;
            }
          }
          else if ((v155[23] & 0x80000000) != 0)
          {
            goto LABEL_174;
          }
          int v79 = *(NSObject **)(v65 + 88);
          if (!os_log_type_enabled(v79, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_148;
          }
LABEL_175:
          int v80 = SHIBYTE(v168.__r_.__value_.__r.__words[2]);
          if ((v168.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            size_t v81 = HIBYTE(v168.__r_.__value_.__r.__words[2]);
          }
          else {
            size_t v81 = v168.__r_.__value_.__l.__size_;
          }
          unint64_t v82 = v81 + 1;
          memset(v155, 170, 24);
          if (v81 + 1 > 0x7FFFFFFFFFFFFFF7) {
            goto LABEL_333;
          }
          if (v82 >= 0x17)
          {
            uint64_t v84 = (v82 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v82 | 7) != 0x17) {
              uint64_t v84 = v82 | 7;
            }
            uint64_t v85 = v84 + 1;
            uint64_t v83 = operator new(v84 + 1);
            *(void *)&v155[16] = v85 | 0x8000000000000000;
            *(void *)uint64_t v155 = v83;
            *(void *)&v155[8] = v81 + 1;
          }
          else
          {
            memset(v155, 0, 24);
            uint64_t v83 = v155;
            v155[23] = v81 + 1;
            if (!v81) {
              goto LABEL_189;
            }
          }
          if (v80 >= 0) {
            xpc_object_t v86 = &v168;
          }
          else {
            xpc_object_t v86 = (std::string *)v168.__r_.__value_.__r.__words[0];
          }
          memmove(v83, v86, v81);
LABEL_189:
          *(_WORD *)&v83[v81] = 47;
          if (v63->__shared_weak_owners_ >= 0) {
            xpc_object_t v87 = (const char *)v63;
          }
          else {
            xpc_object_t v87 = (const char *)v63->__vftable;
          }
          size_t v88 = strlen(v87);
          uint64_t v89 = std::string::append((std::string *)v155, v87, v88);
          long long v90 = *(_OWORD *)&v89->__r_.__value_.__l.__data_;
          *(void *)&long long v149 = *((void *)&v89->__r_.__value_.__l + 2);
          *(_OWORD *)std::string __p = v90;
          v89->__r_.__value_.__l.__size_ = 0;
          v89->__r_.__value_.__r.__words[2] = 0;
          v89->__r_.__value_.__r.__words[0] = 0;
          size_t v91 = "Failed";
          if (v78) {
            size_t v91 = "Succeeded";
          }
          size_t v92 = __p;
          if (SBYTE7(v149) < 0) {
            size_t v92 = (xpc_object_t *)__p[0];
          }
          *(_DWORD *)long long buf = 136315394;
          xpc_object_t v196 = v91;
          __int16 v197 = 2080;
          v198 = v92;
          _os_log_impl(&dword_1C5767000, v79, OS_LOG_TYPE_DEFAULT, "#I %s to remove path: %s", buf, 0x16u);
          size_t v27 = (void *)v143;
          if (SBYTE7(v149) < 0)
          {
            operator delete(__p[0]);
            if ((v155[23] & 0x80000000) != 0) {
              goto LABEL_198;
            }
          }
          else if ((v155[23] & 0x80000000) != 0)
          {
LABEL_198:
            operator delete(*(void **)v155);
          }
LABEL_148:
          if (++v63 == v64) {
            goto LABEL_199;
          }
        }
      }
    }
    memmove(v57, data, v56);
    goto LABEL_125;
  }
  int v46 = ctu::fs::remove_dir();
  unint64_t v47 = *(NSObject **)(v143 + 88);
  if (os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT))
  {
    unint64_t v48 = "Failed";
    if (v46) {
      unint64_t v48 = "Succeeded";
    }
    xpc_object_t v49 = v157;
    if (v157[23] < 0) {
      xpc_object_t v49 = *(unsigned char **)v157;
    }
    LODWORD(object[0].__r_.__value_.__l.__data_) = 136315394;
    *(std::string::size_type *)((char *)object[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)v48;
    WORD2(object[0].__r_.__value_.__r.__words[1]) = 2080;
    *(std::string::size_type *)((char *)&object[0].__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v49;
    _os_log_impl(&dword_1C5767000, v47, OS_LOG_TYPE_DEFAULT, "#I %s to remove dump path: %s", (uint8_t *)object, 0x16u);
  }
LABEL_216:
  xpc_object_t v99 = xpc_int64_create(0);
  if (!v99) {
    xpc_object_t v99 = xpc_null_create();
  }
  xpc_object_t v43 = (const char *)*MEMORY[0x1E4F4C2F8];
  xpc_dictionary_set_value(*v2, (const char *)*MEMORY[0x1E4F4C2F8], v99);
  xpc_object_t v100 = xpc_null_create();
  xpc_release(v99);
  xpc_release(v100);
  if ((v157[23] & 0x80000000) != 0) {
    operator delete(*(void **)v157);
  }
LABEL_220:
  xpc_object_t v101 = xpc_dictionary_get_value(*v2, v43);
  object[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v101;
  if (v101) {
    xpc_retain(v101);
  }
  else {
    object[0].__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
  }
  int v102 = xpc::dyn_cast_or_default((xpc *)object, 0);
  char v103 = v40;
  int v104 = v2;
  xpc_release(object[0].__r_.__value_.__l.__data_);
  if (SHIBYTE(v184[2]) >= 0) {
    size_t v105 = HIBYTE(v184[2]);
  }
  else {
    size_t v105 = (size_t)v184[1];
  }
  if (v105 == strlen(v141))
  {
    xpc_object_t v106 = SHIBYTE(v184[2]) >= 0 ? v184 : (std::string::value_type **)v184[0];
    if (!memcmp(v106, v141, v105) && v102 != 2)
    {
      char v107 = v27[26];
      dispatch_group_t v167 = v107;
      if (v107)
      {
        dispatch_retain(v107);
        dispatch_group_enter(v107);
      }
      xpc_object_t v108 = *v104;
      xpc_object_t v166 = v108;
      if (v108)
      {
        xpc_retain(v108);
      }
      else
      {
        xpc_object_t v108 = xpc_null_create();
        xpc_object_t v166 = v108;
      }
      int v186 = 0;
      LogTracker::systemLog_sync((uint64_t)v27, &v167, &v166, v185);
      if (v186 == v185)
      {
        (*(void (**)(void *))(v185[0] + 32))(v185);
      }
      else if (v186)
      {
        (*(void (**)(void))(*v186 + 40))();
      }
      xpc_release(v108);
      xpc_object_t v166 = 0;
      if (v107)
      {
        dispatch_group_leave(v107);
        dispatch_release(v107);
      }
    }
  }
  unint64_t v109 = (std::__shared_weak_count *)v27[16];
  if (!v109 || (uint64_t v110 = (void *)v27[15], (v111 = std::__shared_weak_count::lock(v109)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v112 = v111;
  p_shared_weak_owners = &v111->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v111->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v111->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
    std::__shared_weak_count::__release_weak(v112);
  }
  v165.__r_.__value_.__r.__words[2] = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v114 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v114 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&v164[16] = v114;
  *(_OWORD *)&v165.__r_.__value_.__l.__data_ = v114;
  *(_OWORD *)uint64_t v164 = v114;
  v162 = v110;
  v163 = v112;
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  *(void *)uint64_t v164 = v27;
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external((std::string *)&v164[8], __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
  }
  else {
    *(std::string *)&v164[8] = __s;
  }
  if (SHIBYTE(v181.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v165, v181.__r_.__value_.__l.__data_, v181.__r_.__value_.__l.__size_);
  }
  else {
    std::string v165 = v181;
  }
  *(void *)&long long v115 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v115 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)uint64_t v161 = v115;
  *(_OWORD *)&v161[16] = v115;
  long long v159 = v115;
  long long v160 = v115;
  *(_OWORD *)&v157[16] = v115;
  long long v158 = v115;
  *(void *)uint64_t v157 = v110;
  *(void *)&v157[8] = v112;
  atomic_fetch_add_explicit(&v112->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  *(void *)&v157[16] = v27;
  v157[24] = v103;
  *(_DWORD *)&v157[28] = v102;
  xpc_object_t v116 = *v104;
  *(void *)&long long v158 = v116;
  if (v116)
  {
    xpc_retain(v116);
    int v117 = v163;
    *((void *)&v158 + 1) = v162;
    *(void *)&long long v159 = v163;
    if (!v163) {
      goto LABEL_256;
    }
    goto LABEL_255;
  }
  *(void *)&long long v158 = xpc_null_create();
  int v117 = v163;
  *((void *)&v158 + 1) = v162;
  *(void *)&long long v159 = v163;
  if (v163) {
LABEL_255:
  }
    atomic_fetch_add_explicit(&v117->__shared_weak_owners_, 1uLL, memory_order_relaxed);
LABEL_256:
  *((void *)&v159 + 1) = *(void *)v164;
  if ((v164[31] & 0x80000000) != 0)
  {
    std::string::__init_copy_ctor_external((std::string *)&v160, *(const std::string::value_type **)&v164[8], *(std::string::size_type *)&v164[16]);
  }
  else
  {
    long long v160 = *(_OWORD *)&v164[8];
    *(void *)uint64_t v161 = *(void *)&v164[24];
  }
  if (SHIBYTE(v165.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external((std::string *)&v161[8], v165.__r_.__value_.__l.__data_, v165.__r_.__value_.__l.__size_);
  }
  else {
    *(std::string *)&v161[8] = v165;
  }
  *(void *)&long long v118 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v118 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v156[5] = v118;
  v156[6] = v118;
  v156[3] = v118;
  v156[4] = v118;
  v156[1] = v118;
  v156[2] = v118;
  *(_OWORD *)&v155[16] = v118;
  v156[0] = v118;
  *(void *)uint64_t v155 = v110;
  *(void *)&v155[8] = v112;
  atomic_fetch_add_explicit(&v112->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  xpc_object_t v119 = *v104;
  *(void *)&v155[16] = v27;
  *(void *)&v155[24] = v119;
  if (v119) {
    xpc_retain(v119);
  }
  else {
    *(void *)&v155[24] = xpc_null_create();
  }
  LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::$_2((uint64_t)v156, (uint64_t)v157);
  *(void *)&long long v120 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v120 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v154[5] = v120;
  v154[6] = v120;
  v154[3] = v120;
  v154[4] = v120;
  v154[1] = v120;
  v154[2] = v120;
  long long v153 = v120;
  v154[0] = v120;
  *(_OWORD *)v151 = v120;
  long long v152 = v120;
  long long v149 = v120;
  *(_OWORD *)char v150 = v120;
  __p[0] = v110;
  __p[1] = v112;
  atomic_fetch_add_explicit(&v112->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  *(void *)&long long v149 = v27;
  DWORD2(v149) = v142;
  BYTE12(v149) = v103;
  if (SHIBYTE(v184[2]) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)v150, v184[0], (std::string::size_type)v184[1]);
  }
  else
  {
    *(_OWORD *)char v150 = *(_OWORD *)v184;
    v151[0] = v184[2];
  }
  xpc_object_t v121 = *v104;
  v151[1] = v121;
  if (v121)
  {
    xpc_retain(v121);
    uint64_t v122 = *(void *)&v155[8];
    long long v152 = *(_OWORD *)v155;
    if (!*(void *)&v155[8]) {
      goto LABEL_273;
    }
    goto LABEL_272;
  }
  v151[1] = xpc_null_create();
  uint64_t v122 = *(void *)&v155[8];
  long long v152 = *(_OWORD *)v155;
  if (*(void *)&v155[8]) {
LABEL_272:
  }
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v122 + 16), 1uLL, memory_order_relaxed);
LABEL_273:
  long long v153 = *(_OWORD *)&v155[16];
  if (*(void *)&v155[24]) {
    xpc_retain(*(xpc_object_t *)&v155[24]);
  }
  else {
    *((void *)&v153 + 1) = xpc_null_create();
  }
  LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::$_2((uint64_t)v154, (uint64_t)v156);
  *(void *)&long long v123 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v123 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v147[7] = v123;
  v147[8] = v123;
  v147[5] = v123;
  v147[6] = v123;
  v147[3] = v123;
  v147[4] = v123;
  v147[1] = v123;
  v147[2] = v123;
  *(_OWORD *)unsigned int v146 = v123;
  v147[0] = v123;
  *(_OWORD *)&__dst[32] = v123;
  *(_OWORD *)unint64_t v145 = v123;
  *(_OWORD *)&__dst[16] = v123;
  xpc_object_t v124 = *v104;
  *(void *)long long __dst = v27;
  *(void *)&__dst[8] = v124;
  if (v124) {
    xpc_retain(v124);
  }
  else {
    *(void *)&__dst[8] = xpc_null_create();
  }
  LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_4::$_4((uint64_t)&__dst[16], (uint64_t)__p);
  *(void *)&long long v193 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v125 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v125 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v192 = v125;
  *(_OWORD *)&v191[16] = v125;
  *(_OWORD *)v191 = v125;
  long long v190 = v125;
  *(_OWORD *)&v189[32] = v125;
  *(_OWORD *)&v189[16] = v125;
  *(_OWORD *)size_t v189 = v125;
  *(_OWORD *)&v188[16] = v125;
  *(_OWORD *)xpc_object_t v188 = v125;
  *(_OWORD *)&object[3].__r_.__value_.__r.__words[1] = v125;
  *(_OWORD *)&object[2].__r_.__value_.__r.__words[2] = v125;
  *(_OWORD *)&object[2].__r_.__value_.__l.__data_ = v125;
  *(_OWORD *)&object[1].__r_.__value_.__r.__words[1] = v125;
  *(_OWORD *)&object[0].__r_.__value_.__r.__words[2] = v125;
  object[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v110;
  object[0].__r_.__value_.__l.__size_ = (std::string::size_type)v112;
  atomic_fetch_add_explicit(&v112->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  object[0].__r_.__value_.__r.__words[2] = (std::string::size_type)v27;
  *(_OWORD *)&object[1].__r_.__value_.__l.__data_ = *(_OWORD *)__dst;
  if (*(void *)&__dst[8]) {
    xpc_retain(*(xpc_object_t *)&__dst[8]);
  }
  else {
    object[1].__r_.__value_.__l.__size_ = (std::string::size_type)xpc_null_create();
  }
  LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_4::$_4((uint64_t)&object[1].__r_.__value_.__r.__words[2], (uint64_t)&__dst[16]);
  v126 = v27[26];
  uint64_t v127 = v27[17];
  dispatch_object_t v128 = (char *)operator new(0xF8uLL);
  long long v129 = *(_OWORD *)&object[0].__r_.__value_.__l.__data_;
  long long v130 = *(_OWORD *)&object[0].__r_.__value_.__r.__words[2];
  *(_OWORD *)&object[0].__r_.__value_.__l.__data_ = 0uLL;
  *(_OWORD *)dispatch_object_t v128 = v129;
  *((_OWORD *)v128 + 1) = v130;
  size_t v131 = (void *)object[1].__r_.__value_.__l.__size_;
  *((void *)v128 + 4) = object[1].__r_.__value_.__l.__size_;
  if (v131) {
    xpc_retain(v131);
  }
  else {
    *((void *)v128 + 4) = xpc_null_create();
  }
  *(_OWORD *)(v128 + 40) = *(_OWORD *)&object[1].__r_.__value_.__r.__words[2];
  object[1].__r_.__value_.__r.__words[2] = 0;
  object[2].__r_.__value_.__r.__words[0] = 0;
  std::string::size_type v132 = object[3].__r_.__value_.__r.__words[2];
  *((void *)v128 + 7) = object[2].__r_.__value_.__l.__size_;
  *(void *)(v128 + 61) = *(std::string::size_type *)((char *)&object[2].__r_.__value_.__r.__words[1] + 5);
  *(_OWORD *)(v128 + 72) = *(_OWORD *)&object[3].__r_.__value_.__l.__data_;
  memset(&object[3], 0, sizeof(std::string));
  int v133 = *(void **)v188;
  *((void *)v128 + 11) = v132;
  *((void *)v128 + 12) = v133;
  if (v133) {
    xpc_retain(v133);
  }
  else {
    *((void *)v128 + 12) = xpc_null_create();
  }
  *(_OWORD *)(v128 + 104) = *(_OWORD *)&v188[8];
  *(void *)&v188[16] = 0;
  *(void *)&v188[8] = 0;
  size_t v134 = *(void **)v189;
  *((void *)v128 + 15) = *(void *)&v188[24];
  *((void *)v128 + 16) = v134;
  if (v134) {
    xpc_retain(v134);
  }
  else {
    *((void *)v128 + 16) = xpc_null_create();
  }
  *(_OWORD *)(v128 + 136) = *(_OWORD *)&v189[8];
  *(void *)&v189[16] = 0;
  *(void *)&v189[8] = 0;
  *(_OWORD *)(v128 + 152) = *(_OWORD *)&v189[24];
  int v135 = *(void **)&v189[40];
  *((void *)v128 + 21) = *(void *)&v189[40];
  if (v135) {
    xpc_retain(v135);
  }
  else {
    *((void *)v128 + 21) = xpc_null_create();
  }
  uint64_t v136 = *(void *)&v191[24];
  *((void *)v128 + 24) = *(void *)v191;
  *((_OWORD *)v128 + 11) = v190;
  long long v190 = 0uLL;
  *(_OWORD *)(v128 + 200) = *(_OWORD *)&v191[8];
  *((void *)v128 + 27) = v136;
  *(void *)&v191[16] = 0;
  *(void *)&v191[8] = 0;
  *((_OWORD *)v128 + 14) = v192;
  *((void *)v128 + 30) = v193;
  *(void *)&v191[24] = 0;
  long long v192 = 0uLL;
  *(void *)&long long v193 = 0;
  dispatch_group_notify_f(v126, v127, v128, (dispatch_function_t)dispatch::detail::group_notify<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_6>(dispatch_group_s *,dispatch_queue_s *,LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_6 &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke);
  LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_6::~$_6((uint64_t)object);
  LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_3::~$_3((uint64_t)v147);
  xpc_release(v146[1]);
  v146[1] = 0;
  if (SHIBYTE(v146[0]) < 0) {
    operator delete(v145[0]);
  }
  if (*(void *)&__dst[24]) {
    std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&__dst[24]);
  }
  xpc_release(*(xpc_object_t *)&__dst[8]);
  LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_3::~$_3((uint64_t)&v152);
  xpc_release(v151[1]);
  v151[1] = 0;
  if (SHIBYTE(v151[0]) < 0) {
    operator delete(v150[0]);
  }
  if (__p[1]) {
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)__p[1]);
  }
  LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_3::~$_3((uint64_t)v155);
  if ((v161[31] & 0x80000000) != 0)
  {
    operator delete(*(void **)&v161[8]);
    if ((v161[7] & 0x80000000) == 0)
    {
LABEL_306:
      size_t v137 = (std::__shared_weak_count *)v159;
      if (!(void)v159) {
        goto LABEL_308;
      }
      goto LABEL_307;
    }
  }
  else if ((v161[7] & 0x80000000) == 0)
  {
    goto LABEL_306;
  }
  operator delete((void *)v160);
  size_t v137 = (std::__shared_weak_count *)v159;
  if ((void)v159) {
LABEL_307:
  }
    std::__shared_weak_count::__release_weak(v137);
LABEL_308:
  xpc_release((xpc_object_t)v158);
  *(void *)&long long v158 = 0;
  if (*(void *)&v157[8]) {
    std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v157[8]);
  }
  if (SHIBYTE(v165.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v165.__r_.__value_.__l.__data_);
    if ((v164[31] & 0x80000000) == 0)
    {
LABEL_312:
      size_t v138 = v163;
      if (!v163) {
        goto LABEL_314;
      }
      goto LABEL_313;
    }
  }
  else if ((v164[31] & 0x80000000) == 0)
  {
    goto LABEL_312;
  }
  operator delete(*(void **)&v164[8]);
  size_t v138 = v163;
  if (v163) {
LABEL_313:
  }
    std::__shared_weak_count::__release_weak(v138);
LABEL_314:
  std::__shared_weak_count::__release_weak(v112);
  if (SHIBYTE(v179.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v179.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__s.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_316:
      if ((SHIBYTE(v181.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_317;
      }
      goto LABEL_329;
    }
  }
  else if ((SHIBYTE(__s.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_316;
  }
  operator delete(__s.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v181.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_317:
    if ((SHIBYTE(v182[2]) & 0x80000000) == 0) {
      goto LABEL_318;
    }
    goto LABEL_330;
  }
LABEL_329:
  operator delete(v181.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v182[2]) & 0x80000000) == 0)
  {
LABEL_318:
    if ((SHIBYTE(v183[2]) & 0x80000000) == 0) {
      goto LABEL_319;
    }
    goto LABEL_331;
  }
LABEL_330:
  operator delete(v182[0]);
  if ((SHIBYTE(v183[2]) & 0x80000000) == 0)
  {
LABEL_319:
    if ((SHIBYTE(v184[2]) & 0x80000000) == 0) {
      return;
    }
LABEL_332:
    operator delete(v184[0]);
    return;
  }
LABEL_331:
  operator delete(v183[0]);
  if (SHIBYTE(v184[2]) < 0) {
    goto LABEL_332;
  }
}

void sub_1C58CC944(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void sub_1C58CCE98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *__p,uint64_t a46,int a47,__int16 a48,char a49,char a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a50 < 0)
  {
    operator delete(__p);
    if (SLOBYTE(STACK[0x20F]) < 0)
    {
LABEL_5:
      operator delete(a73);
      if ((SLOBYTE(STACK[0x367]) & 0x80000000) == 0) {
        JUMPOUT(0x1C58CCE08);
      }
      JUMPOUT(0x1C58CCE00);
    }
  }
  else if (SLOBYTE(STACK[0x20F]) < 0)
  {
    goto LABEL_5;
  }
  JUMPOUT(0x1C58CCDF8);
}

uint64_t LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::$_2(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 16), 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  xpc_object_t v5 = *(void **)(a2 + 32);
  *(void *)(a1 + 32) = v5;
  if (v5)
  {
    xpc_retain(v5);
    uint64_t v6 = *(void *)(a2 + 48);
    *(void *)(a1 + 40) = *(void *)(a2 + 40);
    *(void *)(a1 + 48) = v6;
    if (!v6) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  *(void *)(a1 + 32) = xpc_null_create();
  uint64_t v6 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v6;
  if (v6) {
LABEL_5:
  }
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 16), 1uLL, memory_order_relaxed);
LABEL_6:
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  if (*(char *)(a2 + 87) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 64), *(const std::string::value_type **)(a2 + 64), *(void *)(a2 + 72));
  }
  else
  {
    long long v7 = *(_OWORD *)(a2 + 64);
    *(void *)(a1 + 80) = *(void *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = v7;
  }
  xpc_object_t v8 = (std::string *)(a1 + 88);
  if (*(char *)(a2 + 111) < 0)
  {
    std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)(a2 + 88), *(void *)(a2 + 96));
  }
  else
  {
    long long v9 = *(_OWORD *)(a2 + 88);
    *(void *)(a1 + 104) = *(void *)(a2 + 104);
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v9;
  }
  return a1;
}

void sub_1C58CCFE8(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 87) < 0) {
    operator delete(*v2);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(v1 + 48);
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  xpc_release(*(xpc_object_t *)(v1 + 32));
  *(void *)(v1 + 32) = 0;
  xpc_object_t v5 = *(std::__shared_weak_count **)(v1 + 8);
  if (v5) {
    std::__shared_weak_count::__release_weak(v5);
  }
  _Unwind_Resume(a1);
}

uint64_t LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_4::$_4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 16), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = *(void *)(a2 + 16);
  *(void *)(a1 + 21) = *(void *)(a2 + 21);
  *(void *)(a1 + 16) = v5;
  if (*(char *)(a2 + 55) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 32), *(const std::string::value_type **)(a2 + 32), *(void *)(a2 + 40));
  }
  else
  {
    long long v6 = *(_OWORD *)(a2 + 32);
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = v6;
  }
  long long v7 = *(void **)(a2 + 56);
  *(void *)(a1 + 56) = v7;
  if (v7)
  {
    xpc_retain(v7);
    uint64_t v8 = *(void *)(a2 + 72);
    *(void *)(a1 + 64) = *(void *)(a2 + 64);
    *(void *)(a1 + 72) = v8;
    if (!v8) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
  *(void *)(a1 + 56) = xpc_null_create();
  uint64_t v8 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v8;
  if (v8) {
LABEL_8:
  }
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 16), 1uLL, memory_order_relaxed);
LABEL_9:
  long long v9 = *(void **)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v9;
  if (v9) {
    xpc_retain(v9);
  }
  else {
    *(void *)(a1 + 88) = xpc_null_create();
  }
  LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::$_2(a1 + 96, a2 + 96);
  return a1;
}

void sub_1C58CD128(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (!v3) {
    _Unwind_Resume(exception_object);
  }
  std::__shared_weak_count::__release_weak(v3);
  _Unwind_Resume(exception_object);
}

uint64_t LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_6::~$_6(uint64_t a1)
{
  LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_3::~$_3(a1 + 104);
  xpc_release(*(xpc_object_t *)(a1 + 96));
  *(void *)(a1 + 96) = 0;
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  xpc_release(*(xpc_object_t *)(a1 + 32));
  *(void *)(a1 + 32) = 0;
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 8);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

uint64_t LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_5::~$_5(uint64_t a1)
{
  LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_3::~$_3(a1 + 80);
  xpc_release(*(xpc_object_t *)(a1 + 72));
  *(void *)(a1 + 72) = 0;
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 24);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  xpc_release(*(xpc_object_t *)(a1 + 8));
  *(void *)(a1 + 8) = 0;
  return a1;
}

uint64_t LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_4::~$_4(uint64_t a1)
{
  LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_3::~$_3(a1 + 64);
  xpc_release(*(xpc_object_t *)(a1 + 56));
  *(void *)(a1 + 56) = 0;
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

uint64_t LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_3::~$_3(uint64_t a1)
{
  if (*(char *)(a1 + 143) < 0)
  {
    operator delete(*(void **)(a1 + 120));
    if ((*(char *)(a1 + 119) & 0x80000000) == 0)
    {
LABEL_3:
      uint64_t v2 = *(std::__shared_weak_count **)(a1 + 80);
      if (!v2) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  else if ((*(char *)(a1 + 119) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 96));
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 80);
  if (v2) {
LABEL_4:
  }
    std::__shared_weak_count::__release_weak(v2);
LABEL_5:
  xpc_release(*(xpc_object_t *)(a1 + 64));
  *(void *)(a1 + 64) = 0;
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 40);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  xpc_release(*(xpc_object_t *)(a1 + 24));
  *(void *)(a1 + 24) = 0;
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 8);
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

uint64_t LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::~$_2(uint64_t a1)
{
  if (*(char *)(a1 + 111) < 0)
  {
    operator delete(*(void **)(a1 + 88));
    if ((*(char *)(a1 + 87) & 0x80000000) == 0)
    {
LABEL_3:
      uint64_t v2 = *(std::__shared_weak_count **)(a1 + 48);
      if (!v2) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  else if ((*(char *)(a1 + 87) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 64));
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2) {
LABEL_4:
  }
    std::__shared_weak_count::__release_weak(v2);
LABEL_5:
  xpc_release(*(xpc_object_t *)(a1 + 32));
  *(void *)(a1 + 32) = 0;
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 8);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

uint64_t LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_1::~$_1(uint64_t a1)
{
  if ((*(char *)(a1 + 71) & 0x80000000) == 0)
  {
    if ((*(char *)(a1 + 47) & 0x80000000) == 0) {
      goto LABEL_3;
    }
LABEL_7:
    operator delete(*(void **)(a1 + 24));
    uint64_t v2 = *(std::__shared_weak_count **)(a1 + 8);
    if (!v2) {
      return a1;
    }
    goto LABEL_4;
  }
  operator delete(*(void **)(a1 + 48));
  if (*(char *)(a1 + 47) < 0) {
    goto LABEL_7;
  }
LABEL_3:
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2) {
LABEL_4:
  }
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

uint64_t LogTracker::markPurgeable(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v86 = *MEMORY[0x1E4F143B8];
  unint64_t v78 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v6 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v77[7] = v6;
  v77[8] = v6;
  v77[5] = v6;
  v77[6] = v6;
  void v77[3] = v6;
  v77[4] = v6;
  v77[1] = v6;
  v77[2] = v6;
  long long v76 = v6;
  v77[0] = v6;
  *(_OWORD *)uint64_t v74 = v6;
  long long v75 = v6;
  long long v72 = v6;
  long long v73 = v6;
  long long v70 = v6;
  long long v71 = v6;
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v70);
  long long v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v70, (uint64_t)".*(", 3);
  int v8 = *(char *)(a3 + 23);
  if (v8 >= 0) {
    uint64_t v9 = a3;
  }
  else {
    uint64_t v9 = *(void *)a3;
  }
  if (v8 >= 0) {
    uint64_t v10 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    uint64_t v10 = *(void *)(a3 + 8);
  }
  xpc_object_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, v9, v10);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)").*", 3);
  *(void *)&long long v12 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v12 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&v68[32] = v12;
  long long v69 = v12;
  *(_OWORD *)unint64_t v68 = v12;
  *(_OWORD *)&v68[16] = v12;
  if ((BYTE8(v76) & 0x10) != 0)
  {
    uint64_t v15 = v76;
    if ((unint64_t)v76 < *((void *)&v73 + 1))
    {
      *(void *)&long long v76 = *((void *)&v73 + 1);
      uint64_t v15 = *((void *)&v73 + 1);
    }
    xpc_object_t v16 = (const void *)v73;
    __darwin_ino64_t v13 = v15 - v73;
    if ((unint64_t)(v15 - v73) > 0x7FFFFFFFFFFFFFF7) {
      goto LABEL_29;
    }
  }
  else
  {
    if ((BYTE8(v76) & 8) == 0)
    {
      __darwin_ino64_t v13 = 0;
      HIBYTE(__dst.st_gid) = 0;
      p_dst = &__dst;
      goto LABEL_20;
    }
    xpc_object_t v16 = (const void *)*((void *)&v71 + 1);
    __darwin_ino64_t v13 = *((void *)&v72 + 1) - *((void *)&v71 + 1);
    if (*((void *)&v72 + 1) - *((void *)&v71 + 1) > 0x7FFFFFFFFFFFFFF7uLL) {
LABEL_29:
    }
      std::string::__throw_length_error[abi:ne180100]();
  }
  if (v13 >= 0x17)
  {
    uint64_t v17 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v13 | 7) != 0x17) {
      uint64_t v17 = v13 | 7;
    }
    uint64_t v18 = v17 + 1;
    p_dst = (stat *)operator new(v17 + 1);
    *(void *)&__dst.st_uid = v18 | 0x8000000000000000;
    *(void *)&__dst.st_dev = p_dst;
    __dst.__darwin_ino64_t st_ino = v13;
    goto LABEL_19;
  }
  HIBYTE(__dst.st_gid) = v13;
  p_dst = &__dst;
  if (v13) {
LABEL_19:
  }
    memmove(p_dst, v16, v13);
LABEL_20:
  *((unsigned char *)&p_dst->st_dev + v13) = 0;
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]<std::char_traits<char>,std::allocator<char>>((uint64_t)v68, (uint64_t)&__dst, 0);
  if (SHIBYTE(__dst.st_gid) < 0) {
    operator delete(*(void **)&__dst.st_dev);
  }
  uint64_t v65 = 0;
  int v66 = 0;
  uint64_t v67 = 0;
  std::locale::locale(&v59, (const std::locale *)v68);
  long long v60 = *(_OWORD *)&v68[8];
  long long v61 = *(_OWORD *)&v68[24];
  uint64_t v62 = *(void *)&v68[40];
  uint64_t v63 = (std::__shared_weak_count *)v69;
  if ((void)v69) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v69 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v64 = *((void *)&v69 + 1);
  ctu::fs::get_filtered_files();
  long long v19 = v63;
  if (v63 && !atomic_fetch_add(&v63->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
    std::locale::~locale(&v59);
    unint64_t v20 = (void **)v65;
    xpc_object_t v21 = v66;
    if ((*(char *)(a2 + 23) & 0x80000000) == 0) {
      goto LABEL_27;
    }
  }
  else
  {
    std::locale::~locale(&v59);
    unint64_t v20 = (void **)v65;
    xpc_object_t v21 = v66;
    if ((*(char *)(a2 + 23) & 0x80000000) == 0)
    {
LABEL_27:
      std::string v57 = *(std::string *)a2;
      goto LABEL_32;
    }
  }
  std::string::__init_copy_ctor_external(&v57, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
LABEL_32:
  uint64_t v58 = a1;
  while (v20 != v21)
  {
    uint64_t v23 = v58;
    xpc_object_t v24 = (void *)*((unsigned __int8 *)v20 + 23);
    int v25 = (char)v24;
    if ((char)v24 < 0) {
      xpc_object_t v24 = v20[1];
    }
    if (v24 == (void *)2)
    {
      if (v25 >= 0) {
        size_t v27 = v20;
      }
      else {
        size_t v27 = *v20;
      }
      if (*v27 == 11822) {
        goto LABEL_38;
      }
    }
    else if (v24 == (void *)1)
    {
      uint64_t v26 = v25 >= 0 ? v20 : (void **)*v20;
      if (*(unsigned char *)v26 == 46) {
        goto LABEL_38;
      }
    }
    memset(&__sz, 170, sizeof(__sz));
    int v28 = SHIBYTE(v57.__r_.__value_.__r.__words[2]);
    if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t size = HIBYTE(v57.__r_.__value_.__r.__words[2]);
    }
    else {
      size_t size = v57.__r_.__value_.__l.__size_;
    }
    unint64_t v30 = size + 1;
    memset(&__dst, 170, 24);
    if (size + 1 > 0x7FFFFFFFFFFFFFF7) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    if (v30 >= 0x17)
    {
      uint64_t v32 = (v30 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v30 | 7) != 0x17) {
        uint64_t v32 = v30 | 7;
      }
      uint64_t v33 = v32 + 1;
      long long v31 = (stat *)operator new(v32 + 1);
      *(void *)&__dst.st_uid = v33 | 0x8000000000000000;
      *(void *)&__dst.st_dev = v31;
      __dst.__darwin_ino64_t st_ino = size + 1;
    }
    else
    {
      memset(&__dst, 0, 24);
      long long v31 = &__dst;
      HIBYTE(__dst.st_gid) = size + 1;
      if (!size) {
        goto LABEL_66;
      }
    }
    if (v28 >= 0) {
      xpc_object_t v34 = &v57;
    }
    else {
      xpc_object_t v34 = (std::string *)v57.__r_.__value_.__r.__words[0];
    }
    memmove(v31, v34, size);
LABEL_66:
    *(_WORD *)((char *)&v31->st_dev + size) = 47;
    int v35 = *((char *)v20 + 23);
    if (v35 >= 0) {
      BOOL v36 = (const std::string::value_type *)v20;
    }
    else {
      BOOL v36 = (const std::string::value_type *)*v20;
    }
    if (v35 >= 0) {
      std::string::size_type v37 = *((unsigned __int8 *)v20 + 23);
    }
    else {
      std::string::size_type v37 = (std::string::size_type)v20[1];
    }
    xpc_object_t v38 = std::string::append((std::string *)&__dst, v36, v37);
    long long v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
    __sz.__r_.__value_.__r.__words[2] = v38->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__sz.__r_.__value_.__l.__data_ = v39;
    v38->__r_.__value_.__l.__size_ = 0;
    v38->__r_.__value_.__r.__words[2] = 0;
    v38->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__dst.st_gid) < 0) {
      operator delete(*(void **)&__dst.st_dev);
    }
    v40.tv_sec = 0xAAAAAAAAAAAAAAAALL;
    v40.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
    *(timespec *)&__dst.st_blksize_t size = v40;
    *(timespec *)__dst.st_qspare = v40;
    __dst.st_birthtimespec = v40;
    *(timespec *)&__dst.st_size_t size = v40;
    __dst.st_mtimespec = v40;
    __dst.st_ctimespec = v40;
    *(timespec *)&__dst.st_uid = v40;
    __dst.st_atimespec = v40;
    *(timespec *)&__dst.st_dev = v40;
    if ((__sz.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_sz = &__sz;
    }
    else {
      p_sz = (std::string *)__sz.__r_.__value_.__r.__words[0];
    }
    if (!stat((const char *)p_sz, &__dst))
    {
      uint64_t v42 = (__sz.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &__sz
          : (std::string *)__sz.__r_.__value_.__r.__words[0];
      xpc_object_t v43 = opendir((const char *)v42);
      xpc_object_t v44 = v43;
      if (v43)
      {
        uint64_t v45 = readdir(v43);
        closedir(v44);
        if (v45)
        {
          if (SHIBYTE(__sz.__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)&__dst, __sz.__r_.__value_.__l.__data_, __sz.__r_.__value_.__l.__size_);
          }
          else
          {
            *(_OWORD *)&__dst.st_dev = *(_OWORD *)&__sz.__r_.__value_.__l.__data_;
            *(void *)&__dst.st_uid = *((void *)&__sz.__r_.__value_.__l + 2);
          }
          char v81 = 2;
          strcpy((char *)__p, ".*");
          LogTracker::markPurgeable(v23, &__dst, __p);
          if (v81 < 0)
          {
            operator delete(__p[0]);
            if ((SHIBYTE(__dst.st_gid) & 0x80000000) == 0) {
              goto LABEL_78;
            }
          }
          else if ((SHIBYTE(__dst.st_gid) & 0x80000000) == 0)
          {
            goto LABEL_78;
          }
          operator delete(*(void **)&__dst.st_dev);
        }
      }
    }
LABEL_78:
    if (SHIBYTE(__sz.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v79, __sz.__r_.__value_.__l.__data_, __sz.__r_.__value_.__l.__size_);
    }
    else {
      std::string v79 = __sz;
    }
    BOOL v46 = util::markPurgeableFile((uint64_t *)&v79);
    if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v79.__r_.__value_.__l.__data_);
      unint64_t v47 = *(NSObject **)(v23 + 88);
      unint64_t v48 = v47;
      if (v46)
      {
LABEL_90:
        if (os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT))
        {
          if ((__sz.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            size_t v22 = &__sz;
          }
          else {
            size_t v22 = (std::string *)__sz.__r_.__value_.__r.__words[0];
          }
          *(_DWORD *)long long buf = 136315138;
          uint64_t v85 = v22;
          _os_log_impl(&dword_1C5767000, v47, OS_LOG_TYPE_DEFAULT, "#I %s is marked to be purgeable", buf, 0xCu);
          if ((SHIBYTE(__sz.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_38;
          }
          goto LABEL_95;
        }
        goto LABEL_94;
      }
    }
    else
    {
      unint64_t v47 = *(NSObject **)(v23 + 88);
      unint64_t v48 = v47;
      if (v46) {
        goto LABEL_90;
      }
    }
    if (os_log_type_enabled(v48, OS_LOG_TYPE_ERROR))
    {
      if ((__sz.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        xpc_object_t v49 = &__sz;
      }
      else {
        xpc_object_t v49 = (std::string *)__sz.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)long long buf = 136315138;
      uint64_t v85 = v49;
      _os_log_error_impl(&dword_1C5767000, v47, OS_LOG_TYPE_ERROR, "Failed to mark %s to be purgeable", buf, 0xCu);
      if ((SHIBYTE(__sz.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_38;
      }
LABEL_95:
      operator delete(__sz.__r_.__value_.__l.__data_);
      goto LABEL_38;
    }
LABEL_94:
    if (SHIBYTE(__sz.__r_.__value_.__r.__words[2]) < 0) {
      goto LABEL_95;
    }
LABEL_38:
    v20 += 3;
  }
  long long v50 = (void *)v57.__r_.__value_.__r.__words[0];
  int v51 = SHIBYTE(v57.__r_.__value_.__r.__words[2]);
  memset(&v57, 0, sizeof(v57));
  if (v51 < 0)
  {
    operator delete(v50);
    if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v57.__r_.__value_.__l.__data_);
    }
  }
  xpc_object_t v52 = (void **)v65;
  if (v65)
  {
    xpc_object_t v53 = v66;
    uint64_t v54 = v65;
    if (v66 != v65)
    {
      do
      {
        if (*((char *)v53 - 1) < 0) {
          operator delete(*(v53 - 3));
        }
        v53 -= 3;
      }
      while (v53 != v52);
      uint64_t v54 = v65;
    }
    int v66 = v52;
    operator delete(v54);
  }
  long long v55 = (std::__shared_weak_count *)v69;
  if ((void)v69 && !atomic_fetch_add((atomic_ullong *volatile)(v69 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
    std::__shared_weak_count::__release_weak(v55);
  }
  std::locale::~locale((std::locale *)v68);
  *(void *)&long long v70 = *MEMORY[0x1E4FBA418];
  *(void *)((char *)&v70 + *(void *)(v70 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  *((void *)&v70 + 1) = MEMORY[0x1E4FBA470] + 16;
  if (SHIBYTE(v75) < 0) {
    operator delete(v74[1]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1C8791FB0](v77);
}

void sub_1C58CDC9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::locale a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,std::locale a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
}

void LogTracker::houseKeepingLogs_sync(uint64_t a1, const char *a2)
{
  if (TelephonyUtilIsInternalBuild() & 1) != 0 || (TelephonyUtilIsCarrierBuild()) {
    goto LABEL_15;
  }
  uint64_t v4 = (const void *)*MEMORY[0x1E4F4F928];
  size_t v5 = strlen((const char *)*MEMORY[0x1E4F4F928]);
  if (v5 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  long long v6 = (void *)v5;
  if (v5 >= 0x17)
  {
    uint64_t v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17) {
      uint64_t v8 = v5 | 7;
    }
    uint64_t v9 = v8 + 1;
    long long v7 = (void **)operator new(v8 + 1);
    __dst[1] = v6;
    unint64_t v45 = v9 | 0x8000000000000000;
    __dst[0] = v7;
LABEL_11:
    memmove(v7, v4, (size_t)v6);
    *((unsigned char *)v6 + (void)v7) = 0;
    if ((a2[23] & 0x80000000) == 0) {
      goto LABEL_7;
    }
LABEL_12:
    std::string::__init_copy_ctor_external(&v43, *(const std::string::value_type **)a2, *((void *)a2 + 1));
    goto LABEL_13;
  }
  HIBYTE(v45) = v5;
  long long v7 = __dst;
  if (v5) {
    goto LABEL_11;
  }
  LOBYTE(__dst[0]) = 0;
  if (a2[23] < 0) {
    goto LABEL_12;
  }
LABEL_7:
  std::string v43 = *(std::string *)a2;
LABEL_13:
  LogTracker::markPurgeable(a1, (uint64_t)__dst, (uint64_t)&v43);
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v43.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v45) & 0x80000000) == 0) {
      goto LABEL_15;
    }
  }
  else if ((SHIBYTE(v45) & 0x80000000) == 0)
  {
    goto LABEL_15;
  }
  operator delete(__dst[0]);
LABEL_15:
  uint64_t v10 = (const void *)*MEMORY[0x1E4F4F940];
  size_t v11 = strlen((const char *)*MEMORY[0x1E4F4F940]);
  if (v11 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  long long v12 = (void *)v11;
  if (v11 >= 0x17)
  {
    uint64_t v14 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17) {
      uint64_t v14 = v11 | 7;
    }
    uint64_t v15 = v14 + 1;
    __darwin_ino64_t v13 = operator new(v14 + 1);
    __p[1] = v12;
    unint64_t v42 = v15 | 0x8000000000000000;
    __p[0] = v13;
LABEL_23:
    memmove(v13, v10, (size_t)v12);
    *((unsigned char *)v12 + (void)v13) = 0;
    if ((a2[23] & 0x80000000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_24;
  }
  HIBYTE(v42) = v11;
  __darwin_ino64_t v13 = __p;
  if (v11) {
    goto LABEL_23;
  }
  LOBYTE(__p[0]) = 0;
  if ((a2[23] & 0x80000000) == 0)
  {
LABEL_19:
    std::string v40 = *(std::string *)a2;
    goto LABEL_25;
  }
LABEL_24:
  std::string::__init_copy_ctor_external(&v40, *(const std::string::value_type **)a2, *((void *)a2 + 1));
LABEL_25:
  LogTracker::markPurgeable(a1, (uint64_t)__p, (uint64_t)&v40);
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v40.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v42) & 0x80000000) == 0) {
      goto LABEL_27;
    }
  }
  else if ((SHIBYTE(v42) & 0x80000000) == 0)
  {
    goto LABEL_27;
  }
  operator delete(__p[0]);
LABEL_27:
  xpc_object_t v16 = (const void *)*MEMORY[0x1E4F4F960];
  size_t v17 = strlen((const char *)*MEMORY[0x1E4F4F960]);
  if (v17 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v18 = (void *)v17;
  if (v17 >= 0x17)
  {
    uint64_t v20 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v17 | 7) != 0x17) {
      uint64_t v20 = v17 | 7;
    }
    uint64_t v21 = v20 + 1;
    long long v19 = operator new(v20 + 1);
    v38[1] = v18;
    unint64_t v39 = v21 | 0x8000000000000000;
    v38[0] = v19;
LABEL_35:
    memmove(v19, v16, (size_t)v18);
    *((unsigned char *)v18 + (void)v19) = 0;
    if ((a2[23] & 0x80000000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_36;
  }
  HIBYTE(v39) = v17;
  long long v19 = v38;
  if (v17) {
    goto LABEL_35;
  }
  LOBYTE(v38[0]) = 0;
  if ((a2[23] & 0x80000000) == 0)
  {
LABEL_31:
    std::string v37 = *(std::string *)a2;
    goto LABEL_37;
  }
LABEL_36:
  std::string::__init_copy_ctor_external(&v37, *(const std::string::value_type **)a2, *((void *)a2 + 1));
LABEL_37:
  LogTracker::markPurgeable(a1, (uint64_t)v38, (uint64_t)&v37);
  if ((SHIBYTE(v37.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v39) & 0x80000000) == 0) {
      goto LABEL_39;
    }
LABEL_44:
    operator delete(v38[0]);
    if (prop::tracesettings::enabled((prop::tracesettings *)*MEMORY[0x1E4F4C1F8], v24)) {
      goto LABEL_47;
    }
    goto LABEL_45;
  }
  operator delete(v37.__r_.__value_.__l.__data_);
  if (SHIBYTE(v39) < 0) {
    goto LABEL_44;
  }
LABEL_39:
  if (prop::tracesettings::enabled((prop::tracesettings *)*MEMORY[0x1E4F4C1F8], v22)) {
    goto LABEL_47;
  }
LABEL_45:
  if (!prop::tracesettings::enabled((prop::tracesettings *)*MEMORY[0x1E4F4D338], v23)
    && !prop::tracesettings::enabled((prop::tracesettings *)*MEMORY[0x1E4F4C288], v25))
  {
    return;
  }
LABEL_47:
  xpc_object_t v26 = xpc_dictionary_create(0, 0, 0);
  if (v26 || (xpc_object_t v26 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C8792D30](v26) == MEMORY[0x1E4F14590])
    {
      xpc_retain(v26);
      xpc_object_t v27 = v26;
    }
    else
    {
      xpc_object_t v27 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v27 = xpc_null_create();
    xpc_object_t v26 = 0;
  }
  xpc_release(v26);
  if (a2[23] < 0) {
    a2 = *(const char **)a2;
  }
  xpc_object_t v28 = xpc_string_create(a2);
  if (!v28) {
    xpc_object_t v28 = xpc_null_create();
  }
  xpc_dictionary_set_value(v27, (const char *)*MEMORY[0x1E4F47178], v28);
  xpc_object_t v29 = xpc_null_create();
  xpc_release(v28);
  xpc_release(v29);
  unint64_t v35 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v36 = 0xAAAAAAAAAAAAAAAALL;
  GetABMLogServer(&v33);
  abm::HelperClient::create();
  unint64_t v30 = v34;
  if (v34 && !atomic_fetch_add(&v34->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
    std::__shared_weak_count::__release_weak(v30);
    xpc_object_t v32 = v27;
    if (v27) {
      goto LABEL_60;
    }
LABEL_62:
    xpc_object_t v32 = xpc_null_create();
    goto LABEL_63;
  }
  xpc_object_t v32 = v27;
  if (!v27) {
    goto LABEL_62;
  }
LABEL_60:
  xpc_retain(v27);
LABEL_63:
  abm::HelperClient::perform();
  xpc_release(v32);
  long long v31 = (std::__shared_weak_count *)v36;
  if (v36)
  {
    if (!atomic_fetch_add((atomic_ullong *volatile)(v36 + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  xpc_release(v27);
}

void sub_1C58CE314(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, xpc_object_t object, char a13, uint64_t a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,char a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (*(char *)(v40 - 65) < 0) {
    operator delete(*(void **)(v40 - 88));
  }
  _Unwind_Resume(exception_object);
}

BOOL LogTracker::isDefaultCarrierProfileInstalled(LogTracker *this)
{
  int v10 = -1431655766;
  uint64_t v1 = (const void *)*MEMORY[0x1E4F4D220];
  size_t v2 = strlen((const char *)*MEMORY[0x1E4F4D220]);
  if (v2 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v3 = (void *)v2;
  if (v2 >= 0x17)
  {
    uint64_t v5 = (v2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v2 | 7) != 0x17) {
      uint64_t v5 = v2 | 7;
    }
    uint64_t v6 = v5 + 1;
    uint64_t v4 = (void **)operator new(v5 + 1);
    __dst[1] = v3;
    unint64_t v9 = v6 | 0x8000000000000000;
    __dst[0] = v4;
    goto LABEL_8;
  }
  HIBYTE(v9) = v2;
  uint64_t v4 = __dst;
  if (v2) {
LABEL_8:
  }
    memmove(v4, v1, (size_t)v3);
  *((unsigned char *)v3 + (void)v4) = 0;
  memset(&__p, 0, sizeof(__p));
  if (prop::profile::get((char *)__dst, (uint64_t)&__p)) {
    util::convert<int>(&__p, &v10, 0);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v9) & 0x80000000) == 0) {
      return v10 != 0;
    }
LABEL_15:
    operator delete(__dst[0]);
    return v10 != 0;
  }
  if (SHIBYTE(v9) < 0) {
    goto LABEL_15;
  }
  return v10 != 0;
}

void sub_1C58CE544(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
  {
    operator delete(__p);
    if ((a15 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a15 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a10);
  _Unwind_Resume(exception_object);
}

BOOL LogTracker::isInternalProperty_sync(uint64_t a1, xpc_object_t *a2, xpc_object_t *a3, _DWORD *a4)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  v36[0] = 0;
  v36[1] = 0;
  int64_t v37 = 0;
  v34[0] = 0;
  v34[1] = 0;
  int64_t v35 = 0;
  memset(&string, 0, sizeof(string));
  uint64_t v8 = MEMORY[0x1C8792D30](*a2);
  uint64_t v9 = MEMORY[0x1E4F14590];
  if (v8 != MEMORY[0x1E4F14590])
  {
    BOOL v10 = 0;
    goto LABEL_3;
  }
  xpc_object_t value = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E4F4C1A0]);
  xpc_object_t object = value;
  if (value) {
    xpc_retain(value);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  memset(&__p, 0, sizeof(__p));
  xpc::dyn_cast_or_default();
  *(_OWORD *)unint64_t v36 = *(_OWORD *)&v32.__r_.__value_.__l.__data_;
  int64_t v37 = v32.__r_.__value_.__r.__words[2];
  *((unsigned char *)&v32.__r_.__value_.__s + 23) = 0;
  v32.__r_.__value_.__s.__data_[0] = 0;
  xpc_release(object);
  xpc_object_t v13 = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E4F4C6A8]);
  xpc_object_t objecta = v13;
  if (v13) {
    xpc_retain(v13);
  }
  else {
    xpc_object_t objecta = xpc_null_create();
  }
  memset(&__p, 0, sizeof(__p));
  xpc::dyn_cast_or_default();
  if (SHIBYTE(v35) < 0) {
    operator delete(v34[0]);
  }
  *(_OWORD *)xpc_object_t v34 = *(_OWORD *)&v32.__r_.__value_.__l.__data_;
  int64_t v35 = v32.__r_.__value_.__r.__words[2];
  *((unsigned char *)&v32.__r_.__value_.__s + 23) = 0;
  v32.__r_.__value_.__s.__data_[0] = 0;
  xpc_release(objecta);
  xpc_object_t v14 = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E4F4C800]);
  xpc_object_t objectb = v14;
  if (v14) {
    xpc_retain(v14);
  }
  else {
    xpc_object_t objectb = xpc_null_create();
  }
  memset(&__p, 0, sizeof(__p));
  xpc::dyn_cast_or_default();
  if (SHIBYTE(string.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(string.__r_.__value_.__l.__data_);
  }
  std::string string = v32;
  xpc_release(objectb);
  if ((SHIBYTE(v37) & 0x80000000) == 0)
  {
    if (strcasecmp((const char *)v36, (const char *)*MEMORY[0x1E4F4C398]))
    {
      if (strcasecmp((const char *)v36, (const char *)*MEMORY[0x1E4F4C300]))
      {
        if (strcasecmp((const char *)v36, (const char *)*MEMORY[0x1E4F4C2F8]))
        {
          size_t v22 = (char *)*MEMORY[0x1E4F4C1B8];
          if (strcasecmp((const char *)v36, (const char *)*MEMORY[0x1E4F4C1B8]))
          {
            size_t v22 = (char *)*MEMORY[0x1E4F4C210];
            if (strcasecmp((const char *)v36, (const char *)*MEMORY[0x1E4F4C210]))
            {
              size_t v22 = (char *)*MEMORY[0x1E4F4C208];
              uint64_t v23 = (const char *)v36;
              xpc_object_t v24 = (const char *)v36;
LABEL_56:
              if (strcasecmp(v24, v22))
              {
                size_t v22 = (char *)*MEMORY[0x1E4F4C138];
                if (strcasecmp(v23, (const char *)*MEMORY[0x1E4F4C138]))
                {
                  BOOL v10 = 0;
                  goto LABEL_3;
                }
              }
              goto LABEL_74;
            }
          }
          goto LABEL_74;
        }
LABEL_64:
        BOOL v27 = prop::systemlogs::get((char *)v34, (uint64_t)&string);
        goto LABEL_69;
      }
      goto LABEL_60;
    }
LABEL_59:
    BOOL v27 = prop::compression::get((char *)v34, (uint64_t)&string);
LABEL_69:
    BOOL v10 = v27;
    goto LABEL_3;
  }
  uint64_t v23 = v36[0];
  if (!strcasecmp(v36[0], (const char *)*MEMORY[0x1E4F4C398])) {
    goto LABEL_59;
  }
  if (strcasecmp(v36[0], (const char *)*MEMORY[0x1E4F4C300]))
  {
    if (strcasecmp(v36[0], (const char *)*MEMORY[0x1E4F4C2F8]))
    {
      size_t v22 = (char *)*MEMORY[0x1E4F4C1B8];
      if (strcasecmp(v36[0], (const char *)*MEMORY[0x1E4F4C1B8]))
      {
        size_t v22 = (char *)*MEMORY[0x1E4F4C210];
        if (strcasecmp(v36[0], (const char *)*MEMORY[0x1E4F4C210]))
        {
          size_t v22 = (char *)*MEMORY[0x1E4F4C208];
          xpc_object_t v24 = v36[0];
          goto LABEL_56;
        }
      }
LABEL_74:
      std::string::basic_string[abi:ne180100]<0>(&__p, v22);
      BOOL v10 = prop::get((char *)&__p, (char *)v34, (uint64_t)&string);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      goto LABEL_3;
    }
    goto LABEL_64;
  }
LABEL_60:
  if (v35 >= 0) {
    int v25 = v34;
  }
  else {
    int v25 = (void **)v34[0];
  }
  xpc_object_t v26 = (TapToRadar *)strcasecmp((const char *)v25, (const char *)*MEMORY[0x1E4F4C198]);
  if (v26)
  {
    BOOL v27 = prop::ttr::get((char *)v34, (uint64_t)&string);
    goto LABEL_69;
  }
  int Mode = TapToRadar::getMode(v26);
  util::to_str<int>(Mode, &__p);
  if (SHIBYTE(string.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(string.__r_.__value_.__l.__data_);
  }
  std::string string = __p;
  BOOL v10 = 1;
LABEL_3:
  if (MEMORY[0x1C8792D30](*a3) != v9) {
    goto LABEL_22;
  }
  if (SHIBYTE(string.__r_.__value_.__r.__words[2]) < 0)
  {
    if (!string.__r_.__value_.__l.__size_) {
      goto LABEL_22;
    }
    p_std::string string = (std::string *)string.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (!*((unsigned char *)&string.__r_.__value_.__s + 23)) {
      goto LABEL_22;
    }
    p_std::string string = &string;
  }
  xpc_object_t v15 = xpc_string_create((const char *)p_string);
  if (!v15) {
    xpc_object_t v15 = xpc_null_create();
  }
  xpc_dictionary_set_value(*a3, (const char *)*MEMORY[0x1E4F4C800], v15);
  xpc_object_t v16 = xpc_null_create();
  xpc_release(v15);
  xpc_release(v16);
LABEL_22:
  if (!v10)
  {
    *a4 = -534716416;
    if (SHIBYTE(string.__r_.__value_.__r.__words[2]) < 0) {
      goto LABEL_37;
    }
LABEL_33:
    if (SHIBYTE(v35) < 0) {
      goto LABEL_38;
    }
    goto LABEL_34;
  }
  size_t v17 = *(NSObject **)(a1 + 88);
  if (!os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
  {
    *a4 = 0;
    if (SHIBYTE(string.__r_.__value_.__r.__words[2]) < 0) {
      goto LABEL_37;
    }
    goto LABEL_33;
  }
  uint64_t v18 = v36;
  if (v37 < 0) {
    uint64_t v18 = (char **)v36[0];
  }
  long long v19 = v34;
  if (v35 < 0) {
    long long v19 = (void **)v34[0];
  }
  LODWORD(__p.__r_.__value_.__l.__data_) = 136315906;
  uint64_t v20 = &string;
  if ((string.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    uint64_t v20 = (std::string *)string.__r_.__value_.__r.__words[0];
  }
  *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)"get";
  WORD2(__p.__r_.__value_.__r.__words[1]) = 2080;
  *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v18;
  HIWORD(__p.__r_.__value_.__r.__words[2]) = 2080;
  unint64_t v39 = v19;
  __int16 v40 = 2080;
  size_t v41 = v20;
  _os_log_impl(&dword_1C5767000, v17, OS_LOG_TYPE_DEFAULT, "#I Internal %s trace property: %s, %s = %s", (uint8_t *)&__p, 0x2Au);
  *a4 = 0;
  if ((SHIBYTE(string.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_33;
  }
LABEL_37:
  operator delete(string.__r_.__value_.__l.__data_);
  if (SHIBYTE(v35) < 0)
  {
LABEL_38:
    operator delete(v34[0]);
    if (SHIBYTE(v37) < 0) {
      goto LABEL_39;
    }
    return v10;
  }
LABEL_34:
  if (SHIBYTE(v37) < 0) {
LABEL_39:
  }
    operator delete(v36[0]);
  return v10;
}

void sub_1C58CEDB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  if (a39 < 0) {
    operator delete(__p);
  }
  if (a18 < 0)
  {
    operator delete(a13);
    if ((a25 & 0x80000000) == 0) {
      goto LABEL_5;
    }
  }
  else if ((a25 & 0x80000000) == 0)
  {
LABEL_5:
    if ((a32 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  operator delete(a20);
  if ((a32 & 0x80000000) == 0) {
LABEL_7:
  }
    _Unwind_Resume(a1);
LABEL_6:
  operator delete(a27);
  goto LABEL_7;
}

void LogTracker::getLoggingConfig(xpc_object_t *a1@<X8>)
{
  v21.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x38uLL);
  *(_OWORD *)&v21.__r_.__value_.__r.__words[1] = xmmword_1C599E850;
  strcpy(v21.__r_.__value_.__l.__data_, "/System/Library/PrivateFrameworks/ABMHelper.framework/");
  uint64_t v3 = (char *)operator new(0x20uLL);
  strcpy(v3, "com.apple.commcenter.logconfig");
  uint64_t v4 = std::string::append(&v21, v3, 0x1EuLL);
  long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v22.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  if (config::hw::watch((config::hw *)v4))
  {
    strcpy(__s, ".watchos");
    unsigned int v6 = 8;
  }
  else
  {
    strcpy(__s, ".ios");
    unsigned int v6 = 4;
  }
  char v20 = v6;
  long long v7 = std::string::append(&v22, __s, v6);
  long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
  v23.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v8;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  uint64_t v9 = std::string::append(&v23, ".plist", 6uLL);
  BOOL v10 = (std::string::value_type *)v9->__r_.__value_.__r.__words[0];
  std::string::size_type size = v9->__r_.__value_.__l.__size_;
  std::string::size_type v12 = v9->__r_.__value_.__r.__words[2];
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v23.__r_.__value_.__l.__data_);
    if ((v20 & 0x80000000) == 0)
    {
LABEL_6:
      if ((SHIBYTE(v22.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_7;
      }
      goto LABEL_12;
    }
  }
  else if ((v20 & 0x80000000) == 0)
  {
    goto LABEL_6;
  }
  operator delete(*(void **)__s);
  if ((SHIBYTE(v22.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_7:
    operator delete(v3);
    if ((SHIBYTE(v21.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_8;
    }
LABEL_13:
    operator delete(v21.__r_.__value_.__l.__data_);
    if ((v12 & 0x8000000000000000) == 0) {
      goto LABEL_9;
    }
LABEL_14:
    std::string::__init_copy_ctor_external(&v18, v10, size);
    goto LABEL_15;
  }
LABEL_12:
  operator delete(v22.__r_.__value_.__l.__data_);
  operator delete(v3);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_13;
  }
LABEL_8:
  if ((v12 & 0x8000000000000000) != 0) {
    goto LABEL_14;
  }
LABEL_9:
  v18.__r_.__value_.__r.__words[0] = (std::string::size_type)v10;
  v18.__r_.__value_.__l.__size_ = size;
  v18.__r_.__value_.__r.__words[2] = v12;
LABEL_15:
  util::readPlistToCFDictionary((uint64_t)&v18, &v22);
  xpc_object_t v14 = (void *)v22.__r_.__value_.__r.__words[0];
  if (!v22.__r_.__value_.__r.__words[0]
    || (CFTypeID v15 = CFGetTypeID(v22.__r_.__value_.__l.__data_), v15 != CFDictionaryGetTypeID()))
  {
    xpc_object_t v14 = 0;
    v23.__r_.__value_.__r.__words[0] = 0;
    xpc_object_t v16 = (const void *)v22.__r_.__value_.__r.__words[0];
    if (!v22.__r_.__value_.__r.__words[0]) {
      goto LABEL_21;
    }
    goto LABEL_20;
  }
  v23.__r_.__value_.__r.__words[0] = (std::string::size_type)v14;
  CFRetain(v14);
  xpc_object_t v16 = (const void *)v22.__r_.__value_.__r.__words[0];
  if (v22.__r_.__value_.__r.__words[0]) {
LABEL_20:
  }
    CFRelease(v16);
LABEL_21:
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v18.__r_.__value_.__l.__data_);
  }
  *a1 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  ctu::cf_to_xpc((uint64_t *)&v22, (ctu *)v14, v13);
  size_t v17 = (void *)v22.__r_.__value_.__r.__words[0];
  *a1 = (xpc_object_t)v22.__r_.__value_.__r.__words[0];
  if (v17 && MEMORY[0x1C8792D30](v17) == MEMORY[0x1E4F14590]) {
    xpc_retain(v17);
  }
  else {
    *a1 = xpc_null_create();
  }
  xpc_release(v22.__r_.__value_.__l.__data_);
  if (v14) {
    CFRelease(v14);
  }
  if ((v12 & 0x8000000000000000) != 0) {
    operator delete(v10);
  }
}

void sub_1C58CF1E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (v34 < 0) {
    operator delete(v33);
  }
  _Unwind_Resume(exception_object);
}

void LogTracker::checkLoggingVersion_sync(NSObject **this)
{
  v64[3] = *MEMORY[0x1E4F143B8];
  if (!capabilities::trace::allowed((capabilities::trace *)this)) {
    return;
  }
  xpc_object_t xdict = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  LogTracker::getLoggingConfig(&xdict);
  int v61 = 0;
  memset(&v60, 0, sizeof(v60));
  size_t v2 = (const void *)*MEMORY[0x1E4F4C208];
  size_t v3 = strlen((const char *)*MEMORY[0x1E4F4C208]);
  if (v3 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v4 = v3;
  if (v3 >= 0x17)
  {
    uint64_t v6 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17) {
      uint64_t v6 = v3 | 7;
    }
    uint64_t v7 = v6 + 1;
    p_dst = (long long *)operator new(v6 + 1);
    *((void *)&__dst + 1) = v4;
    v64[0] = v7 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
    goto LABEL_9;
  }
  HIBYTE(v64[0]) = v3;
  p_dst = &__dst;
  if (v3) {
LABEL_9:
  }
    memmove(p_dst, v2, v4);
  *((unsigned char *)p_dst + v4) = 0;
  long long v8 = (const void *)*MEMORY[0x1E4F4CAA0];
  size_t v9 = strlen((const char *)*MEMORY[0x1E4F4CAA0]);
  if (v9 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  BOOL v10 = (void *)v9;
  if (v9 >= 0x17)
  {
    uint64_t v12 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v12 = v9 | 7;
    }
    uint64_t v13 = v12 + 1;
    size_t v11 = operator new(v12 + 1);
    __p[1] = v10;
    unint64_t v59 = v13 | 0x8000000000000000;
    __p[0] = v11;
    goto LABEL_17;
  }
  HIBYTE(v59) = v9;
  size_t v11 = __p;
  if (v9) {
LABEL_17:
  }
    memmove(v11, v8, (size_t)v10);
  *((unsigned char *)v10 + (void)v11) = 0;
  BOOL v14 = prop::get((char *)&__dst, (char *)__p, (uint64_t)&v60);
  if (SHIBYTE(v59) < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(v64[0]) & 0x80000000) == 0)
    {
LABEL_20:
      if (v14) {
        goto LABEL_21;
      }
      goto LABEL_25;
    }
  }
  else if ((SHIBYTE(v64[0]) & 0x80000000) == 0)
  {
    goto LABEL_20;
  }
  operator delete((void *)__dst);
  if (v14)
  {
LABEL_21:
    util::convert<int>(&v60, &v61, 0);
    xpc_object_t value = xpc_dictionary_get_value(xdict, "LoggingConfigVersion");
    *(void *)&long long __dst = value;
    if (value) {
      xpc_retain(value);
    }
    else {
      *(void *)&long long __dst = xpc_null_create();
    }
    int v18 = xpc::dyn_cast_or_default((xpc *)&__dst, 0);
    xpc_release((xpc_object_t)__dst);
    if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
    {
      *v60.__r_.__value_.__l.__data_ = 0;
      v60.__r_.__value_.__l.__size_ = 0;
      int v57 = 0;
      size_t v19 = strlen((const char *)v2);
      if (v19 <= 0x7FFFFFFFFFFFFFF7)
      {
LABEL_30:
        size_t v20 = v19;
        if (v19 >= 0x17)
        {
          uint64_t v22 = (v19 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v19 | 7) != 0x17) {
            uint64_t v22 = v19 | 7;
          }
          uint64_t v23 = v22 + 1;
          std::string v21 = (long long *)operator new(v22 + 1);
          *((void *)&__dst + 1) = v20;
          v64[0] = v23 | 0x8000000000000000;
          *(void *)&long long __dst = v21;
        }
        else
        {
          HIBYTE(v64[0]) = v19;
          std::string v21 = &__dst;
          if (!v19)
          {
LABEL_37:
            *((unsigned char *)v21 + v20) = 0;
            xpc_object_t v24 = (const char *)*MEMORY[0x1E4F4C938];
            size_t v25 = strlen((const char *)*MEMORY[0x1E4F4C938]);
            if (v25 > 0x7FFFFFFFFFFFFFF7) {
              std::string::__throw_length_error[abi:ne180100]();
            }
            xpc_object_t v26 = (void *)v25;
            if (v25 >= 0x17)
            {
              uint64_t v28 = (v25 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v25 | 7) != 0x17) {
                uint64_t v28 = v25 | 7;
              }
              uint64_t v29 = v28 + 1;
              BOOL v27 = operator new(v28 + 1);
              __p[1] = v26;
              unint64_t v59 = v29 | 0x8000000000000000;
              __p[0] = v27;
            }
            else
            {
              HIBYTE(v59) = v25;
              BOOL v27 = __p;
              if (!v25)
              {
LABEL_45:
                *((unsigned char *)v26 + (void)v27) = 0;
                BOOL v30 = prop::get((char *)&__dst, (char *)__p, (uint64_t)&v60);
                if (SHIBYTE(v59) < 0)
                {
                  operator delete(__p[0]);
                  if ((SHIBYTE(v64[0]) & 0x80000000) == 0)
                  {
LABEL_47:
                    if (v30)
                    {
LABEL_48:
                      long long v31 = (capabilities::radio *)util::convert<int>(&v60, &v57, 0);
                      int v32 = capabilities::radio::product(v31);
                      uint64_t v33 = this[11];
                      if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
                      {
                        *(void *)&long long __dst = __PAIR64__(v61, 67109888);
                        WORD4(__dst) = 1024;
                        *(_DWORD *)((char *)&__dst + 10) = v18;
                        HIWORD(__dst) = 1024;
                        LODWORD(v64[0]) = v57;
                        WORD2(v64[0]) = 1024;
                        *(_DWORD *)((char *)v64 + 6) = v32;
                        _os_log_impl(&dword_1C5767000, v33, OS_LOG_TYPE_DEFAULT, "#I Stored Logging Version: %d, Default Logging Version: %d, Stored Product ID: %d, Current Product ID: %d", (uint8_t *)&__dst, 0x1Au);
                      }
                      if (v61 < v18 || v57 != v32)
                      {
                        uint64_t v34 = this[11];
                        if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
                        {
                          LOWORD(__dst) = 0;
                          _os_log_impl(&dword_1C5767000, v34, OS_LOG_TYPE_DEFAULT, "#I Updating Log Configuration", (uint8_t *)&__dst, 2u);
                        }
                        xpc_object_t object = xdict;
                        if (xdict) {
                          xpc_retain(xdict);
                        }
                        else {
                          xpc_object_t object = xpc_null_create();
                        }
                        v55[23] = 13;
                        strcpy(v55, "Not Specified");
                        LogTracker::updateLoggingSettings_sync(this, 2, (std::string::size_type *)&object, (uint64_t)v55);
                        xpc_release(object);
                        xpc_object_t object = 0;
                        xpc_object_t v35 = xpc_dictionary_create(0, 0, 0);
                        if (v35 || (xpc_object_t v35 = xpc_null_create()) != 0)
                        {
                          if (MEMORY[0x1C8792D30](v35) == MEMORY[0x1E4F14590])
                          {
                            xpc_retain(v35);
                            xpc_object_t v36 = v35;
                          }
                          else
                          {
                            xpc_object_t v36 = xpc_null_create();
                          }
                        }
                        else
                        {
                          xpc_object_t v36 = xpc_null_create();
                          xpc_object_t v35 = 0;
                        }
                        xpc_release(v35);
                        xpc_object_t v37 = xpc_string_create((const char *)v2);
                        if (!v37) {
                          xpc_object_t v37 = xpc_null_create();
                        }
                        xpc_dictionary_set_value(v36, (const char *)*MEMORY[0x1E4F4C1A0], v37);
                        xpc_object_t v38 = xpc_null_create();
                        xpc_release(v37);
                        xpc_release(v38);
                        xpc_object_t v39 = xpc_string_create((const char *)v8);
                        if (!v39) {
                          xpc_object_t v39 = xpc_null_create();
                        }
                        __int16 v40 = (const char *)*MEMORY[0x1E4F4C6A8];
                        xpc_dictionary_set_value(v36, (const char *)*MEMORY[0x1E4F4C6A8], v39);
                        xpc_object_t v41 = xpc_null_create();
                        xpc_release(v39);
                        xpc_release(v41);
                        __p[0] = 0;
                        __p[1] = 0;
                        unint64_t v59 = 0;
                        std::to_string((std::string *)&__dst, v18);
                        *(_OWORD *)std::string __p = __dst;
                        unint64_t v59 = v64[0];
                        if (v64[0] >= 0) {
                          uint64_t v42 = __p;
                        }
                        else {
                          uint64_t v42 = (void **)__p[0];
                        }
                        xpc_object_t v43 = xpc_string_create((const char *)v42);
                        if (!v43) {
                          xpc_object_t v43 = xpc_null_create();
                        }
                        xpc_object_t v44 = (const char *)*MEMORY[0x1E4F4C800];
                        xpc_dictionary_set_value(v36, (const char *)*MEMORY[0x1E4F4C800], v43);
                        xpc_object_t v45 = xpc_null_create();
                        xpc_release(v43);
                        xpc_release(v45);
                        if (SHIBYTE(v59) < 0) {
                          operator delete(__p[0]);
                        }
                        xpc_object_t v54 = v36;
                        if (v36) {
                          xpc_retain(v36);
                        }
                        else {
                          xpc_object_t v54 = xpc_null_create();
                        }
                        aBlock = 0;
                        LogTracker::setProperty_sync(this, &v54, (uint64_t *)&aBlock);
                        if (aBlock) {
                          _Block_release(aBlock);
                        }
                        xpc_release(v54);
                        xpc_object_t v54 = 0;
                        xpc_object_t v46 = xpc_string_create(v24);
                        if (!v46) {
                          xpc_object_t v46 = xpc_null_create();
                        }
                        xpc_dictionary_set_value(v36, v40, v46);
                        xpc_object_t v47 = xpc_null_create();
                        xpc_release(v46);
                        xpc_release(v47);
                        __p[0] = 0;
                        __p[1] = 0;
                        unint64_t v59 = 0;
                        std::to_string((std::string *)&__dst, v32);
                        *(_OWORD *)std::string __p = __dst;
                        unint64_t v59 = v64[0];
                        if (v64[0] >= 0) {
                          unint64_t v48 = __p;
                        }
                        else {
                          unint64_t v48 = (void **)__p[0];
                        }
                        xpc_object_t v49 = xpc_string_create((const char *)v48);
                        if (!v49) {
                          xpc_object_t v49 = xpc_null_create();
                        }
                        xpc_dictionary_set_value(v36, v44, v49);
                        xpc_object_t v50 = xpc_null_create();
                        xpc_release(v49);
                        xpc_release(v50);
                        if (SHIBYTE(v59) < 0) {
                          operator delete(__p[0]);
                        }
                        xpc_object_t v52 = v36;
                        if (v36) {
                          xpc_retain(v36);
                        }
                        else {
                          xpc_object_t v52 = xpc_null_create();
                        }
                        int v51 = 0;
                        LogTracker::setProperty_sync(this, &v52, (uint64_t *)&v51);
                        if (v51) {
                          _Block_release(v51);
                        }
                        xpc_release(v52);
                        xpc_object_t v52 = 0;
                        xpc_release(v36);
                      }
                      goto LABEL_101;
                    }
LABEL_60:
                    xpc_object_t v16 = this[11];
                    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
                    {
                      LOWORD(__dst) = 0;
                      size_t v17 = "Failed to get stored Device ID";
                      goto LABEL_62;
                    }
                    goto LABEL_101;
                  }
                }
                else if ((SHIBYTE(v64[0]) & 0x80000000) == 0)
                {
                  goto LABEL_47;
                }
                operator delete((void *)__dst);
                if (v30) {
                  goto LABEL_48;
                }
                goto LABEL_60;
              }
            }
            memmove(v27, v24, (size_t)v26);
            goto LABEL_45;
          }
        }
        memmove(v21, v2, v20);
        goto LABEL_37;
      }
    }
    else
    {
      v60.__r_.__value_.__s.__data_[0] = 0;
      *((unsigned char *)&v60.__r_.__value_.__s + 23) = 0;
      int v57 = 0;
      size_t v19 = strlen((const char *)v2);
      if (v19 <= 0x7FFFFFFFFFFFFFF7) {
        goto LABEL_30;
      }
    }
    std::string::__throw_length_error[abi:ne180100]();
  }
LABEL_25:
  xpc_object_t v16 = this[11];
  if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
  {
    LOWORD(__dst) = 0;
    size_t v17 = "Failed to get stored version";
LABEL_62:
    _os_log_error_impl(&dword_1C5767000, v16, OS_LOG_TYPE_ERROR, v17, (uint8_t *)&__dst, 2u);
  }
LABEL_101:
  if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v60.__r_.__value_.__l.__data_);
  }
  xpc_release(xdict);
}

void sub_1C58CFB60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *aBlock, xpc_object_t object, void *a12, xpc_object_t a13, uint64_t a14, uint64_t a15, uint64_t a16, xpc_object_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,xpc_object_t a32)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t LogTracker::updateLoggingSettings_sync(void *a1, int a2, std::string::size_type *a3, uint64_t a4)
{
  uint64_t v8 = MEMORY[0x1C8792D30](*a3);
  uint64_t v9 = MEMORY[0x1E4F14590];
  if (v8 != MEMORY[0x1E4F14590])
  {
    LogTracker::getLoggingConfig((xpc_object_t *)&v55.__r_.__value_.__l.__data_);
    std::string::size_type v10 = v55.__r_.__value_.__r.__words[0];
    xpc_object_t v11 = xpc_null_create();
    uint64_t v12 = (void *)*a3;
    *a3 = v10;
    xpc_release(v12);
    xpc_release(v11);
  }
  int v56 = a2;
  memset(&v55, 170, sizeof(v55));
  LogTracker::validateSelectedConfig_sync((uint64_t)a1, &v56, &v55);
  xpc_object_t v54 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v13 = &v55;
  }
  else {
    uint64_t v13 = (std::string *)v55.__r_.__value_.__r.__words[0];
  }
  v51.__r_.__value_.__r.__words[0] = (std::string::size_type)a3;
  v51.__r_.__value_.__l.__size_ = (std::string::size_type)v13;
  xpc::dict::object_proxy::operator xpc::dict((uint64_t)&v51, &v54);
  xpc_object_t v14 = v54;
  applier[0] = MEMORY[0x1E4F143A8];
  applier[1] = 3321888768;
  applier[2] = ___ZN10LogTracker26updateLoggingSettings_syncEN3abm6helper13LoggingConfigEN3xpc4dictENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEE_block_invoke;
  applier[3] = &__block_descriptor_64_e8_40c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE_e13_B24__0r_8_v16l;
  applier[4] = a1;
  if (*(char *)(a4 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v53, *(const std::string::value_type **)a4, *(void *)(a4 + 8));
  }
  else {
    std::string v53 = *(std::string *)a4;
  }
  xpc_dictionary_apply(v14, applier);
  if (!TelephonyUtilIsCarrierBuild() || (TelephonyUtilIsInternalBuild() & 1) != 0)
  {
LABEL_68:
    if ((SHIBYTE(v53.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_70;
    }
    goto LABEL_69;
  }
  memset(&v51, 0, sizeof(v51));
  xpc_object_t v15 = xpc_dictionary_create(0, 0, 0);
  if (v15 || (xpc_object_t v15 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C8792D30](v15) == v9)
    {
      xpc_retain(v15);
      xpc_object_t v16 = v15;
    }
    else
    {
      xpc_object_t v16 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v16 = xpc_null_create();
    xpc_object_t v15 = 0;
  }
  xpc_release(v15);
  BOOL isDefaultCarrierProfileInstalled = LogTracker::isDefaultCarrierProfileInstalled(v17);
  int v19 = v56;
  if (v56 == 1 && isDefaultCarrierProfileInstalled)
  {
    std::string::__assign_external(&v51, (const std::string::value_type *)*MEMORY[0x1E4F471D0]);
    std::string v21 = a1[11];
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)long long buf = 0;
      uint64_t v22 = "#D Uninstall a profile";
      goto LABEL_76;
    }
LABEL_30:
    BOOL v27 = (std::__shared_weak_count *)a1[16];
    if (!v27) {
      goto LABEL_77;
    }
    goto LABEL_31;
  }
  BOOL v23 = LogTracker::isDefaultCarrierProfileInstalled((LogTracker *)isDefaultCarrierProfileInstalled);
  char v24 = v19 != 2 || v23;
  if (v24) {
    goto LABEL_67;
  }
  xpc_object_t v25 = xpc_BOOL_create(1);
  if (!v25) {
    xpc_object_t v25 = xpc_null_create();
  }
  xpc_dictionary_set_value(v16, (const char *)*MEMORY[0x1E4F47220], v25);
  xpc_object_t v26 = xpc_null_create();
  xpc_release(v25);
  xpc_release(v26);
  std::string::__assign_external(&v51, (const std::string::value_type *)*MEMORY[0x1E4F471B8]);
  std::string v21 = a1[11];
  if (!os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG)) {
    goto LABEL_30;
  }
  *(_WORD *)long long buf = 0;
  uint64_t v22 = "#D Install a profile";
LABEL_76:
  _os_log_debug_impl(&dword_1C5767000, v21, OS_LOG_TYPE_DEBUG, v22, buf, 2u);
  BOOL v27 = (std::__shared_weak_count *)a1[16];
  if (!v27) {
LABEL_77:
  }
    std::__throw_bad_weak_ptr[abi:ne180100]();
LABEL_31:
  uint64_t v28 = a1[15];
  uint64_t v29 = std::__shared_weak_count::lock(v27);
  if (!v29) {
    goto LABEL_77;
  }
  BOOL v30 = v29;
  p_shared_weak_owners = &v29->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v29->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v29->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
    std::__shared_weak_count::__release_weak(v30);
  }
  memset(buf, 170, sizeof(buf));
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 3321888768;
  aBlock[2] = ___ZN10LogTracker26updateLoggingSettings_syncEN3abm6helper13LoggingConfigEN3xpc4dictENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEE_block_invoke_45;
  aBlock[3] = &__block_descriptor_80_e8_40c35_ZTSNSt3__18weak_ptrI10LogTrackerEE56c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE_e241_v48__0_Result_i_basic_string_char__std::char_traits_char___std::allocator_char______compressed_pair_std::basic_string_char_::__rep__std::allocator_char______rep_______short__23c__0C_b7b1____long__Qb63b1____raw__3Q_______8_dict__object__v__40l;
  void aBlock[4] = a1;
  void aBlock[5] = v28;
  unint64_t v48 = v30;
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__p, v51.__r_.__value_.__l.__data_, v51.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = v51;
  }
  int v32 = _Block_copy(aBlock);
  uint64_t v33 = a1[17];
  if (v33) {
    dispatch_retain(v33);
  }
  *(void *)long long buf = v32;
  *(void *)&uint8_t buf[8] = v33;
  unint64_t v45 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v46 = 0xAAAAAAAAAAAAAAAALL;
  GetABMLogServer(&v43);
  abm::HelperClient::create();
  uint64_t v34 = v44;
  if (v44 && !atomic_fetch_add(&v44->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
    std::__shared_weak_count::__release_weak(v34);
  }
  xpc_object_t v35 = xpc_string_create((const char *)*MEMORY[0x1E4F47250]);
  if (!v35) {
    xpc_object_t v35 = xpc_null_create();
  }
  xpc_dictionary_set_value(v16, (const char *)*MEMORY[0x1E4F470D8], v35);
  xpc_object_t v36 = xpc_null_create();
  xpc_release(v35);
  xpc_release(v36);
  xpc_object_t v42 = v16;
  if (v16)
  {
    xpc_retain(v16);
    xpc_object_t v37 = *(void **)buf;
    if (!*(void *)buf) {
      goto LABEL_49;
    }
    goto LABEL_48;
  }
  xpc_object_t v42 = xpc_null_create();
  xpc_object_t v37 = *(void **)buf;
  if (*(void *)buf) {
LABEL_48:
  }
    xpc_object_t v37 = _Block_copy(v37);
LABEL_49:
  __int16 v40 = v37;
  xpc_object_t v41 = *(NSObject **)&buf[8];
  if (*(void *)&buf[8]) {
    dispatch_retain(*(dispatch_object_t *)&buf[8]);
  }
  abm::HelperClient::perform();
  if (v41) {
    dispatch_release(v41);
  }
  if (v40) {
    _Block_release(v40);
  }
  xpc_release(v42);
  xpc_object_t v38 = (std::__shared_weak_count *)v46;
  if (v46 && !atomic_fetch_add((atomic_ullong *volatile)(v46 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
    std::__shared_weak_count::__release_weak(v38);
  }
  if (*(void *)&buf[8]) {
    dispatch_release(*(dispatch_object_t *)&buf[8]);
  }
  if (*(void *)buf) {
    _Block_release(*(const void **)buf);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v48) {
    std::__shared_weak_count::__release_weak(v48);
  }
  std::__shared_weak_count::__release_weak(v30);
LABEL_67:
  xpc_release(v16);
  if ((SHIBYTE(v51.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_68;
  }
  operator delete(v51.__r_.__value_.__l.__data_);
  if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0) {
LABEL_69:
  }
    operator delete(v53.__r_.__value_.__l.__data_);
LABEL_70:
  xpc_release(v54);
  if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v55.__r_.__value_.__l.__data_);
  }
  return 1;
}

void sub_1C58D03A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, xpc_object_t object, char a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,std::__shared_weak_count *a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,char a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48)
{
  if (a23) {
    std::__shared_weak_count::__release_weak(a23);
  }
  std::__shared_weak_count::__release_weak(v49);
  xpc_release(v48);
  if (a37 < 0) {
    operator delete(__p);
  }
  if (a48 < 0) {
    operator delete(a43);
  }
  xpc_release(*(xpc_object_t *)(v50 - 120));
  if (*(char *)(v50 - 89) < 0) {
    operator delete(*(void **)(v50 - 112));
  }
  _Unwind_Resume(a1);
}

void LogTracker::setProperty_sync(void *a1, xpc_object_t *a2, uint64_t *a3)
{
  uint64_t v65 = *MEMORY[0x1E4F143B8];
  xpc_object_t v6 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v7 = v6;
  if (v6)
  {
    uint64_t v62 = v6;
  }
  else
  {
    xpc_object_t v7 = xpc_null_create();
    uint64_t v62 = v7;
    if (!v7)
    {
      xpc_object_t v8 = xpc_null_create();
      xpc_object_t v7 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1C8792D30](v7) == MEMORY[0x1E4F14590])
  {
    xpc_retain(v7);
    goto LABEL_9;
  }
  xpc_object_t v8 = xpc_null_create();
LABEL_8:
  uint64_t v62 = v8;
LABEL_9:
  xpc_release(v7);
  memset(&v61, 170, sizeof(v61));
  xpc_object_t value = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E4F4C1A0]);
  v60[0] = value;
  if (value) {
    xpc_retain(value);
  }
  else {
    v60[0] = xpc_null_create();
  }
  long long buf = 0uLL;
  unint64_t v64 = 0;
  xpc::dyn_cast_or_default();
  xpc_release(v60[0]);
  memset(v60, 170, sizeof(v60));
  xpc_object_t v10 = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E4F4C6A8]);
  object[0] = v10;
  if (v10) {
    xpc_retain(v10);
  }
  else {
    object[0] = xpc_null_create();
  }
  long long buf = 0uLL;
  unint64_t v64 = 0;
  xpc::dyn_cast_or_default();
  xpc_release(object[0]);
  memset(object, 170, sizeof(object));
  xpc_object_t v11 = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E4F4C800]);
  xpc_object_t v58 = v11;
  if (v11) {
    xpc_retain(v11);
  }
  else {
    xpc_object_t v58 = xpc_null_create();
  }
  long long buf = 0uLL;
  unint64_t v64 = 0;
  xpc::dyn_cast_or_default();
  xpc_release(v58);
  if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v57, v61.__r_.__value_.__l.__data_, v61.__r_.__value_.__l.__size_);
  }
  else {
    std::string v57 = v61;
  }
  char isSupported = abm::trace::isSupported();
  char v13 = isSupported;
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v57.__r_.__value_.__l.__data_);
    if (v13)
    {
LABEL_23:
      LODWORD(v58) = -534716416;
      xpc_object_t v14 = *a2;
      xpc_object_t v51 = v14;
      if (v14)
      {
        xpc_retain(v14);
      }
      else
      {
        xpc_object_t v14 = xpc_null_create();
        xpc_object_t v51 = v14;
      }
      BOOL isInternalProperty_sync = LogTracker::isInternalProperty_sync((uint64_t)a1, &v51, &v62, &v58);
      xpc_release(v14);
      xpc_object_t v51 = 0;
      if (isInternalProperty_sync)
      {
        if (*a3) {
          dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int &,xpc::dict&>(a3, (unsigned int *)&v58, &v62);
        }
        goto LABEL_89;
      }
      if ((*(unsigned int (**)(void *))(*a1 + 88))(a1))
      {
        int v18 = prop::set((char *)&v61, (char *)v60, (char *)object);
        if (*a3)
        {
          if (v18) {
            uint64_t v19 = 0;
          }
          else {
            uint64_t v19 = 3760250880;
          }
          xpc_object_t v20 = xpc_null_create();
          uint64_t v21 = *a3;
          *(void *)&long long buf = v20;
          xpc_object_t v22 = xpc_null_create();
          (*(void (**)(uint64_t, uint64_t, long long *))(v21 + 16))(v21, v19, &buf);
          xpc_release((xpc_object_t)buf);
          xpc_release(v22);
        }
        goto LABEL_89;
      }
      xpc_object_t v38 = (const void *)*MEMORY[0x1E4F4D070];
      size_t v39 = strlen((const char *)*MEMORY[0x1E4F4D070]);
      if (v39 > 0x7FFFFFFFFFFFFFF7) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      size_t v40 = v39;
      if (v39 >= 0x17)
      {
        uint64_t v42 = (v39 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v39 | 7) != 0x17) {
          uint64_t v42 = v39 | 7;
        }
        uint64_t v43 = v42 + 1;
        p_long long buf = (long long *)operator new(v42 + 1);
        *((void *)&buf + 1) = v40;
        unint64_t v64 = v43 | 0x8000000000000000;
        *(void *)&long long buf = p_buf;
      }
      else
      {
        HIBYTE(v64) = v39;
        p_long long buf = &buf;
        if (!v39) {
          goto LABEL_78;
        }
      }
      memmove(p_buf, v38, v40);
LABEL_78:
      *((unsigned char *)p_buf + v40) = 0;
      xpc_object_t v44 = *a2;
      xpc_object_t v50 = v44;
      if (v44)
      {
        xpc_retain(v44);
      }
      else
      {
        xpc_object_t v44 = xpc_null_create();
        xpc_object_t v50 = v44;
      }
      v47[0] = MEMORY[0x1E4F143A8];
      v47[1] = 3321888768;
      v47[2] = ___ZN10LogTracker16setProperty_syncEN3xpc4dictEN8dispatch5blockIU13block_pointerFviS1_EEE_block_invoke;
      v47[3] = &__block_descriptor_40_e8_32c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE_e28_v20__0i8_dict__object__v__12l;
      unint64_t v45 = (void *)*a3;
      if (*a3) {
        unint64_t v45 = _Block_copy(v45);
      }
      unint64_t v48 = v45;
      unint64_t v46 = _Block_copy(v47);
      xpc_object_t v49 = v46;
      Service::runCommand((uint64_t)a1, (uint64_t)&buf, &v50, &v49);
      if (v46) {
        _Block_release(v46);
      }
      xpc_release(v44);
      xpc_object_t v50 = 0;
      if (SHIBYTE(v64) < 0) {
        operator delete((void *)buf);
      }
      if (v48) {
        _Block_release(v48);
      }
      goto LABEL_89;
    }
  }
  else if (isSupported)
  {
    goto LABEL_23;
  }
  xpc_object_t v58 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  xpc_object_t v15 = *a2;
  xpc_object_t v56 = v15;
  if (v15) {
    xpc_retain(v15);
  }
  else {
    xpc_object_t v56 = xpc_null_create();
  }
  xpc::bridge((uint64_t *)&buf, (xpc *)&v56, v16);
  BOOL v23 = (void *)buf;
  if (!(void)buf || (CFTypeID v24 = CFGetTypeID((CFTypeRef)buf), v24 != CFDictionaryGetTypeID()))
  {
    xpc_object_t v58 = 0;
    xpc_object_t v25 = (const void *)buf;
    if (!(void)buf) {
      goto LABEL_45;
    }
    goto LABEL_44;
  }
  xpc_object_t v58 = v23;
  CFRetain(v23);
  xpc_object_t v25 = (const void *)buf;
  if ((void)buf) {
LABEL_44:
  }
    CFRelease(v25);
LABEL_45:
  xpc_release(v56);
  xpc_object_t v26 = (const void *)*MEMORY[0x1E4F4CB20];
  size_t v27 = strlen((const char *)*MEMORY[0x1E4F4CB20]);
  if (v27 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v28 = (void *)v27;
  if (v27 >= 0x17)
  {
    uint64_t v31 = (v27 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v27 | 7) != 0x17) {
      uint64_t v31 = v27 | 7;
    }
    uint64_t v32 = v31 + 1;
    uint64_t v29 = (void **)operator new(v31 + 1);
    __dst[1] = v28;
    unint64_t v55 = v32 | 0x8000000000000000;
    __dst[0] = v29;
LABEL_53:
    memmove(v29, v26, (size_t)v28);
    *((unsigned char *)v28 + (void)v29) = 0;
    xpc_object_t v30 = v58;
    CFTypeRef cf = v58;
    if (!v58) {
      goto LABEL_55;
    }
    goto LABEL_54;
  }
  HIBYTE(v55) = v27;
  uint64_t v29 = __dst;
  if (v27) {
    goto LABEL_53;
  }
  LOBYTE(__dst[0]) = 0;
  xpc_object_t v30 = v58;
  CFTypeRef cf = v58;
  if (v58) {
LABEL_54:
  }
    CFRetain(v30);
LABEL_55:
  aBlock = 0;
  Service::broadcastEvent((uint64_t)a1, (uint64_t)__dst, &cf, (const void **)&aBlock);
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (SHIBYTE(v55) < 0)
  {
    operator delete(__dst[0]);
    uint64_t v33 = a1[11];
    if (!os_log_type_enabled(v33, OS_LOG_TYPE_DEBUG))
    {
LABEL_61:
      if (!*a3) {
        goto LABEL_63;
      }
      goto LABEL_62;
    }
  }
  else
  {
    uint64_t v33 = a1[11];
    if (!os_log_type_enabled(v33, OS_LOG_TYPE_DEBUG)) {
      goto LABEL_61;
    }
  }
  xpc_object_t v37 = &v61;
  if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    xpc_object_t v37 = (std::string *)v61.__r_.__value_.__r.__words[0];
  }
  LODWORD(buf) = 136315138;
  *(void *)((char *)&buf + 4) = v37;
  _os_log_debug_impl(&dword_1C5767000, v33, OS_LOG_TYPE_DEBUG, "#D The property (%s) not supported in setting", (uint8_t *)&buf, 0xCu);
  if (!*a3) {
    goto LABEL_63;
  }
LABEL_62:
  xpc_object_t v34 = xpc_null_create();
  uint64_t v35 = *a3;
  *(void *)&long long buf = v34;
  xpc_object_t v36 = xpc_null_create();
  (*(void (**)(uint64_t, uint64_t, long long *))(v35 + 16))(v35, 3760250884, &buf);
  xpc_release((xpc_object_t)buf);
  xpc_release(v36);
LABEL_63:
  if (v30) {
    CFRelease(v30);
  }
LABEL_89:
  if ((SHIBYTE(object[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v60[2]) & 0x80000000) == 0) {
      goto LABEL_91;
    }
LABEL_94:
    operator delete(v60[0]);
    if ((SHIBYTE(v61.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_92;
    }
LABEL_95:
    operator delete(v61.__r_.__value_.__l.__data_);
    goto LABEL_92;
  }
  operator delete(object[0]);
  if (SHIBYTE(v60[2]) < 0) {
    goto LABEL_94;
  }
LABEL_91:
  if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_95;
  }
LABEL_92:
  xpc_release(v62);
}

void sub_1C58D0C34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *aBlock, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,xpc_object_t object,uint64_t a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,xpc_object_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void LogTracker::validateSelectedConfig_sync(uint64_t a1@<X0>, _DWORD *a2@<X1>, std::string *a3@<X8>)
{
  memset(a3, 170, sizeof(std::string));
  xpc_object_t v6 = (const char *)abm::helper::asString();
  size_t v7 = strlen(v6);
  if (v7 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v8 = v7;
  if (v7 >= 0x17)
  {
    uint64_t v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17) {
      uint64_t v10 = v7 | 7;
    }
    uint64_t v11 = v10 + 1;
    uint64_t v9 = operator new(v10 + 1);
    a3->__r_.__value_.__l.__size_ = v8;
    a3->__r_.__value_.__r.__words[2] = v11 | 0x8000000000000000;
    a3->__r_.__value_.__r.__words[0] = (std::string::size_type)v9;
LABEL_9:
    memmove(v9, v6, v8);
    *((unsigned char *)v9 + v8) = 0;
    if (*a2 != 5) {
      return;
    }
    goto LABEL_10;
  }
  *((unsigned char *)&a3->__r_.__value_.__s + 23) = v7;
  uint64_t v9 = a3;
  if (v7) {
    goto LABEL_9;
  }
  a3->__r_.__value_.__s.__data_[0] = 0;
  if (*a2 != 5) {
    return;
  }
LABEL_10:
  *a2 = 2;
  uint64_t v12 = (const std::string::value_type *)abm::helper::asString();
  std::string::__assign_external(a3, v12);
  char v13 = *(NSObject **)(a1 + 88);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)xpc_object_t v14 = 0;
    _os_log_impl(&dword_1C5767000, v13, OS_LOG_TYPE_DEFAULT, "#I Update the logging config to Default as the requested logging config is not supported", v14, 2u);
  }
}

void sub_1C58D100C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN10LogTracker26updateLoggingSettings_syncEN3abm6helper13LoggingConfigEN3xpc4dictENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEE_block_invoke(uint64_t a1, uint64_t a2, xpc_object_t object)
{
  uint64_t v5 = *(void *)(a1 + 32);
  if (object)
  {
    xpc_object_t v6 = object;
    xpc_retain(object);
    goto LABEL_4;
  }
  xpc_object_t v6 = xpc_null_create();
  if (v6)
  {
LABEL_4:
    if (MEMORY[0x1C8792D30](v6) == MEMORY[0x1E4F14590])
    {
      xpc_retain(v6);
      xpc_object_t v7 = v6;
    }
    else
    {
      xpc_object_t v7 = xpc_null_create();
    }
    goto LABEL_8;
  }
  xpc_object_t v7 = xpc_null_create();
  xpc_object_t v6 = 0;
LABEL_8:
  xpc_release(v6);
  applier[0] = MEMORY[0x1E4F143A8];
  applier[1] = 3321888768;
  applier[2] = ___ZN10LogTracker26updateLoggingSettings_syncEN3abm6helper13LoggingConfigEN3xpc4dictENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEE_block_invoke_2;
  applier[3] = &__block_descriptor_72_e8_48c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE_e13_B24__0r_8_v16l;
  applier[4] = v5;
  void applier[5] = a2;
  if (*(char *)(a1 + 63) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a1 + 40), *(void *)(a1 + 48));
  }
  else {
    std::string __p = *(std::string *)(a1 + 40);
  }
  xpc_dictionary_apply(v7, applier);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  xpc_release(v7);
  return 1;
}

void sub_1C58D116C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  xpc_release(v21);
  _Unwind_Resume(a1);
}

uint64_t ___ZN10LogTracker26updateLoggingSettings_syncEN3abm6helper13LoggingConfigEN3xpc4dictENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEE_block_invoke_2(uint64_t a1, const char *a2, xpc_object_t a3)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  xpc_object_t v6 = *(void **)(a1 + 32);
  xpc_object_t v7 = v6[11];
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v19 = *(void *)(a1 + 40);
    xpc_object_t v24 = a3;
    if (a3) {
      xpc_retain(a3);
    }
    else {
      xpc_object_t v24 = xpc_null_create();
    }
    xpc::dyn_cast_or_default((uint64_t *)__p, (xpc *)&v24, (const object *)"", v20);
    if (v26 >= 0) {
      uint64_t v21 = __p;
    }
    else {
      uint64_t v21 = (void **)__p[0];
    }
    *(_DWORD *)long long buf = 136315650;
    uint64_t v28 = v19;
    __int16 v29 = 2080;
    xpc_object_t v30 = a2;
    __int16 v31 = 2080;
    uint64_t v32 = v21;
    _os_log_debug_impl(&dword_1C5767000, v7, OS_LOG_TYPE_DEBUG, "#D tracename: %s, traceKey: %s, traceValue: %s", buf, 0x20u);
    if (v26 < 0) {
      operator delete(__p[0]);
    }
    xpc_release(v24);
  }
  xpc_object_t v8 = xpc_dictionary_create(0, 0, 0);
  if (v8 || (xpc_object_t v8 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C8792D30](v8) == MEMORY[0x1E4F14590])
    {
      xpc_retain(v8);
      xpc_object_t v9 = v8;
    }
    else
    {
      xpc_object_t v9 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v9 = xpc_null_create();
    xpc_object_t v8 = 0;
  }
  xpc_release(v8);
  xpc_object_t v10 = xpc_string_create(*(const char **)(a1 + 40));
  if (!v10) {
    xpc_object_t v10 = xpc_null_create();
  }
  xpc_dictionary_set_value(v9, (const char *)*MEMORY[0x1E4F4C1A0], v10);
  xpc_object_t v11 = xpc_null_create();
  xpc_release(v10);
  xpc_release(v11);
  xpc_object_t v12 = xpc_string_create(a2);
  if (!v12) {
    xpc_object_t v12 = xpc_null_create();
  }
  xpc_dictionary_set_value(v9, (const char *)*MEMORY[0x1E4F4C6A8], v12);
  xpc_object_t v13 = xpc_null_create();
  xpc_release(v12);
  xpc_release(v13);
  if (a3) {
    xpc_retain(a3);
  }
  else {
    a3 = xpc_null_create();
  }
  xpc_dictionary_set_value(v9, (const char *)*MEMORY[0x1E4F4C800], a3);
  xpc_object_t v14 = xpc_null_create();
  xpc_release(a3);
  xpc_release(v14);
  xpc_object_t v15 = (const char *)(a1 + 48);
  if (*(char *)(a1 + 71) < 0) {
    xpc_object_t v15 = *(const char **)v15;
  }
  xpc_object_t v16 = xpc_string_create(v15);
  if (!v16) {
    xpc_object_t v16 = xpc_null_create();
  }
  xpc_dictionary_set_value(v9, (const char *)*MEMORY[0x1E4F4D120], v16);
  xpc_object_t v17 = xpc_null_create();
  xpc_release(v16);
  xpc_release(v17);
  xpc_object_t object = v9;
  if (v9) {
    xpc_retain(v9);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  aBlock = 0;
  LogTracker::setProperty_sync(v6, &object, (uint64_t *)&aBlock);
  if (aBlock) {
    _Block_release(aBlock);
  }
  xpc_release(object);
  xpc_object_t object = 0;
  xpc_release(v9);
  return 1;
}

void sub_1C58D14D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *aBlock, xpc_object_t a10, xpc_object_t object)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void ___ZN10LogTracker26updateLoggingSettings_syncEN3abm6helper13LoggingConfigEN3xpc4dictENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEE_block_invoke_45(uint64_t a1, int *a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  size_t v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3)
  {
    uint64_t v5 = *(void *)(a1 + 32);
    xpc_object_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      xpc_object_t v7 = v6;
      uint64_t v8 = *(void *)(a1 + 40);
      if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v7);
      }
      if (v8)
      {
        int v9 = *a2;
        xpc_object_t v10 = *(NSObject **)(v5 + 88);
        if (v9)
        {
          if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
          {
            xpc_object_t v11 = (void *)(a1 + 56);
            if (*(char *)(a1 + 79) < 0) {
              xpc_object_t v11 = (void *)*v11;
            }
            int v13 = 136315138;
            xpc_object_t v14 = v11;
            _os_log_error_impl(&dword_1C5767000, v10, OS_LOG_TYPE_ERROR, "Failed to %s", (uint8_t *)&v13, 0xCu);
          }
        }
        else if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
        {
          xpc_object_t v12 = (void *)(a1 + 56);
          if (*(char *)(a1 + 79) < 0) {
            xpc_object_t v12 = (void *)*v12;
          }
          int v13 = 136315138;
          xpc_object_t v14 = v12;
          _os_log_debug_impl(&dword_1C5767000, v10, OS_LOG_TYPE_DEBUG, "#D Succeeded to %s", (uint8_t *)&v13, 0xCu);
        }
      }
    }
  }
}

void __copy_helper_block_e8_40c35_ZTSNSt3__18weak_ptrI10LogTrackerEE56c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(void *a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 48);
  a1[5] = *(void *)(a2 + 40);
  a1[6] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  size_t v4 = (std::string *)(a1 + 7);
  if (*(char *)(a2 + 79) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)(a2 + 56), *(void *)(a2 + 64));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 56);
    a1[9] = *(void *)(a2 + 72);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  }
}

void sub_1C58D17CC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 48);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_40c35_ZTSNSt3__18weak_ptrI10LogTrackerEE56c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1)
{
  if (*(char *)(a1 + 79) < 0)
  {
    operator delete(*(void **)(a1 + 56));
    size_t v2 = *(std::__shared_weak_count **)(a1 + 48);
    if (!v2) {
      return;
    }
  }
  else
  {
    size_t v2 = *(std::__shared_weak_count **)(a1 + 48);
    if (!v2) {
      return;
    }
  }

  std::__shared_weak_count::__release_weak(v2);
}

void ___ZN10LogTracker16setProperty_syncEN3xpc4dictEN8dispatch5blockIU13block_pointerFviS1_EEE_block_invoke(uint64_t a1, unsigned int a2, void **a3)
{
  unsigned int v5 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v3 = (uint64_t *)(a1 + 32);
  if (v4) {
    dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int &,xpc::dict&>(v3, &v5, a3);
  }
}

uint64_t ctu::Loggable<LogTracker,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig(uint64_t a1)
{
  return MEMORY[0x1F417DA50](a1 + 8);
}

size_t ctu::Loggable<LogTracker,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = (const char *)(*(uint64_t (**)(void))(*(void *)(a1 - 48) + 16))();
  size_t result = strlen(v3);
  if (result >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v5 = result;
  if (result >= 0x17)
  {
    uint64_t v6 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17) {
      uint64_t v6 = result | 7;
    }
    uint64_t v7 = v6 + 1;
    uint64_t v8 = operator new(v6 + 1);
    a2[1] = v5;
    a2[2] = v7 | 0x8000000000000000;
    *a2 = v8;
    a2 = v8;
  }
  else
  {
    *((unsigned char *)a2 + 23) = result;
    if (!result)
    {
      *(unsigned char *)a2 = 0;
      return result;
    }
  }
  size_t result = (size_t)memmove(a2, v3, v5);
  *((unsigned char *)a2 + v5) = 0;
  return result;
}

uint64_t ctu::Loggable<LogTracker,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return MEMORY[0x1F417DD10](a1 + 8);
}

uint64_t ctu::PthreadMutexGuardPolicy<LogDumpDB>::~PthreadMutexGuardPolicy(uint64_t a1)
{
  pthread_mutex_lock((pthread_mutex_t *)a1);
  size_t v2 = *(std::__shared_weak_count **)(a1 + 72);
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 72);
  if (!v3 || atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void *ctu::Loggable<LogTracker,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_1F20FB5E8;
  MEMORY[0x1C8790F40](a1 + 1);
  return a1;
}

void ctu::Loggable<LogTracker,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_1F20FB5E8;
  MEMORY[0x1C8790F40](a1 + 1);

  operator delete(a1);
}

void ctu::Loggable<LogTracker,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(uint64_t a1)
{
  uint64_t v1 = a1 + 56;
  if (*(void *)(a1 + 56))
  {
    if (!*(void *)(a1 + 80) || (size_t v2 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(a1 + 80))) == 0) {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    uint64_t v3 = v2;
    ctu::LoggerCommonBase::getLogDomain((ctu::LoggerCommonBase *)(v1 - 48));
    ctu::TrackedLogger::registerLoggerToServer();
    if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_1C58D1BF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

void sub_1C58D1C14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void *std::shared_ptr<LogTracker>::shared_ptr[abi:ne180100]<LogTracker,std::shared_ptr<LogTracker> ctu::SharedSynchronizable<LogTracker>::make_shared_ptr<LogTracker>(LogTracker*)::{lambda(LogTracker*)#1},void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  uint64_t v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  uint64_t p_shared_owners = &v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20FB628;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)a2;
  a1[1] = v4;
  if (!a2) {
    return a1;
  }
  uint64_t v6 = *(std::__shared_weak_count **)(a2 + 128);
  if (v6)
  {
    if (v6->__shared_owners_ == -1)
    {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      *(void *)(a2 + 120) = a2;
      *(void *)(a2 + 128) = v4;
      std::__shared_weak_count::__release_weak(v6);
      if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
        goto LABEL_8;
      }
    }
    return a1;
  }
  atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  *(void *)(a2 + 120) = a2;
  *(void *)(a2 + 128) = v4;
  if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
LABEL_8:
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void sub_1C58D1D40(void *a1)
{
  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[17], v1, (dispatch_function_t)std::shared_ptr<LogTracker> ctu::SharedSynchronizable<LogTracker>::make_shared_ptr<LogTracker>(LogTracker*)::{lambda(LogTracker*)#1}::operator() const(LogTracker*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_1C58D1D68(_Unwind_Exception *a1)
{
}

void std::__shared_ptr_pointer<LogTracker *,std::shared_ptr<LogTracker> ctu::SharedSynchronizable<LogTracker>::make_shared_ptr<LogTracker>(LogTracker*)::{lambda(LogTracker *)#1},std::allocator<LogTracker>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<LogTracker *,std::shared_ptr<LogTracker> ctu::SharedSynchronizable<LogTracker>::make_shared_ptr<LogTracker>(LogTracker*)::{lambda(LogTracker *)#1},std::allocator<LogTracker>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<LogTracker *,std::shared_ptr<LogTracker> ctu::SharedSynchronizable<LogTracker>::make_shared_ptr<LogTracker>(LogTracker*)::{lambda(LogTracker *)#1},std::allocator<LogTracker>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableI10LogTrackerE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_") {
    return a1 + 24;
  }
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableI10LogTrackerE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableI10LogTrackerE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_"))return 0; {
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableI10LogTrackerE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  }
  return 0;
}

uint64_t std::shared_ptr<LogTracker> ctu::SharedSynchronizable<LogTracker>::make_shared_ptr<LogTracker>(LogTracker*)::{lambda(LogTracker*)#1}::operator() const(LogTracker*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void *ctu::SharedLoggable<LogTracker,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(void *a1)
{
  *a1 = &unk_1F20FB5E8;
  MEMORY[0x1C8790F40](a1 + 1);
  size_t v2 = a1[12];
  if (v2) {
    dispatch_release(v2);
  }
  unint64_t v3 = a1[11];
  if (v3) {
    dispatch_release(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[10];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

void ctu::SharedLoggable<LogTracker,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(void *a1)
{
  *a1 = &unk_1F20FB5E8;
  MEMORY[0x1C8790F40](a1 + 1);
  size_t v2 = a1[12];
  if (v2) {
    dispatch_release(v2);
  }
  unint64_t v3 = a1[11];
  if (v3) {
    dispatch_release(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[10];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }

  operator delete(a1);
}

void dispatch::async<void ctu::SharedSynchronizable<LogTracker>::execute_wrapped<LogTracker::initialize(dispatch::group_session)::$_0>(LogTracker::initialize(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<LogTracker::initialize(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<LogTracker::initialize(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke(void *a1)
{
  uint64_t v1 = a1;
  uint64_t v175 = *MEMORY[0x1E4F143B8];
  size_t v2 = (uint64_t *)*a1;
  uint64_t v3 = *(void *)(*a1 + 16);
  LogTracker::checkLoggingVersion_sync((NSObject **)v3);
  dispatch_group_t v4 = dispatch_group_create();
  size_t v5 = *(NSObject **)(v3 + 176);
  *(void *)(v3 + 176) = v4;
  if (v5) {
    dispatch_release(v5);
  }
  dispatch_group_t v7 = dispatch_group_create();
  uint64_t v8 = *(NSObject **)(v3 + 208);
  *(void *)(v3 + 208) = v7;
  if (v8) {
    dispatch_release(v8);
  }
  *(unsigned char *)(v3 + 216) = 0;
  if (prop::tracesettings::enabled((prop::tracesettings *)*MEMORY[0x1E4F4C1F8], v6)
    || prop::tracesettings::enabled((prop::tracesettings *)*MEMORY[0x1E4F4D338], v9)
    || prop::tracesettings::enabled((prop::tracesettings *)*MEMORY[0x1E4F4C288], v10))
  {
    memset(v170, 170, 16);
    GetABMLogServer(&v168);
    size_t v105 = v1;
    abm::HelperClient::create();
    xpc_object_t v11 = v169;
    if (v169 && !atomic_fetch_add(&v169->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
      xpc_object_t v12 = *(NSObject **)(v3 + 88);
      if (!os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_12;
      }
    }
    else
    {
      xpc_object_t v12 = *(NSObject **)(v3 + 88);
      if (!os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
LABEL_12:
        aBlock[0] = MEMORY[0x1E4F143A8];
        aBlock[1] = 3321888768;
        aBlock[2] = ___ZZN10LogTracker10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke;
        aBlock[3] = &__block_descriptor_64_e8_40c30_ZTSN8dispatch13group_sessionE48c46_ZTSNSt3__110shared_ptrIN3abm12HelperClientEEE_e241_v48__0_Result_i_basic_string_char__std::char_traits_char___std::allocator_char______compressed_pair_std::basic_string_char_::__rep__std::allocator_char______rep_______short__23c__0C_b7b1____long__Qb63b1____raw__3Q_______8_dict__object__v__40l;
        void aBlock[4] = v3;
        int v13 = v2[3];
        dispatch_group_t v165 = v13;
        if (v13)
        {
          dispatch_retain(v13);
          if (v165) {
            dispatch_group_enter(v165);
          }
        }
        uint64_t v166 = *(void *)v170;
        dispatch_group_t v167 = *(std::__shared_weak_count **)&v170[8];
        if (*(void *)&v170[8]) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&v170[8] + 8), 1uLL, memory_order_relaxed);
        }
        xpc_object_t v14 = _Block_copy(aBlock);
        uint64_t v15 = *(NSObject **)(v3 + 136);
        if (v15) {
          dispatch_retain(*(dispatch_object_t *)(v3 + 136));
        }
        xpc_object_t v16 = xpc_dictionary_create(0, 0, 0);
        if (v16 || (xpc_object_t v16 = xpc_null_create()) != 0)
        {
          if (MEMORY[0x1C8792D30](v16) == MEMORY[0x1E4F14590])
          {
            xpc_retain(v16);
            xpc_object_t v17 = v16;
          }
          else
          {
            xpc_object_t v17 = xpc_null_create();
          }
        }
        else
        {
          xpc_object_t v17 = xpc_null_create();
          xpc_object_t v16 = 0;
        }
        xpc_release(v16);
        xpc_object_t v18 = xpc_int64_create(5000);
        if (!v18) {
          xpc_object_t v18 = xpc_null_create();
        }
        xpc_dictionary_set_value(v17, (const char *)*MEMORY[0x1E4F470A0], v18);
        xpc_object_t v19 = xpc_null_create();
        xpc_release(v18);
        xpc_release(v19);
        xpc_object_t v20 = (const void *)*MEMORY[0x1E4F4C198];
        size_t v21 = strlen((const char *)*MEMORY[0x1E4F4C198]);
        int v104 = v14;
        if (v21 > 0x7FFFFFFFFFFFFFF7) {
          std::string::__throw_length_error[abi:ne180100]();
        }
        size_t v22 = v21;
        if (v21 >= 0x17)
        {
          uint64_t v24 = (v21 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v21 | 7) != 0x17) {
            uint64_t v24 = v21 | 7;
          }
          uint64_t v25 = v24 + 1;
          p_dst = (std::locale::__imp *)operator new(v24 + 1);
          size_t v147 = v22;
          unint64_t v148 = v25 | 0x8000000000000000;
          __dst.__locale_ = p_dst;
        }
        else
        {
          HIBYTE(v148) = v21;
          p_dst = (std::locale::__imp *)&__dst;
          if (!v21)
          {
LABEL_37:
            *((unsigned char *)p_dst + v22) = 0;
            memset(&buf, 0, sizeof(buf));
            int v26 = -1431655766;
            int v27 = -1431655766;
            if (prop::bbtrace::get((char *)&__dst, (uint64_t)&buf))
            {
              LODWORD(__p) = -1431655766;
              if (util::convert<int>(&buf, &__p, 0)) {
                int v27 = (int)__p;
              }
              else {
                int v27 = -1431655766;
              }
            }
            if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
            {
              operator delete(buf.__r_.__value_.__l.__data_);
              if ((SHIBYTE(v148) & 0x80000000) == 0) {
                goto LABEL_43;
              }
            }
            else if ((SHIBYTE(v148) & 0x80000000) == 0)
            {
              goto LABEL_43;
            }
            operator delete(__dst.__locale_);
LABEL_43:
            uint64_t v28 = (const void *)*MEMORY[0x1E4F4C428];
            size_t v29 = strlen((const char *)*MEMORY[0x1E4F4C428]);
            if (v29 > 0x7FFFFFFFFFFFFFF7) {
              std::string::__throw_length_error[abi:ne180100]();
            }
            size_t v30 = v29;
            if (v29 >= 0x17)
            {
              uint64_t v32 = (v29 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v29 | 7) != 0x17) {
                uint64_t v32 = v29 | 7;
              }
              uint64_t v33 = v32 + 1;
              __int16 v31 = (std::locale::__imp *)operator new(v32 + 1);
              size_t v147 = v30;
              unint64_t v148 = v33 | 0x8000000000000000;
              __dst.__locale_ = v31;
            }
            else
            {
              HIBYTE(v148) = v29;
              __int16 v31 = (std::locale::__imp *)&__dst;
              if (!v29)
              {
LABEL_51:
                *((unsigned char *)v31 + v30) = 0;
                memset(&buf, 0, sizeof(buf));
                if (prop::bbtrace::get((char *)&__dst, (uint64_t)&buf))
                {
                  LODWORD(__p) = -1431655766;
                  if (util::convert<int>(&buf, &__p, 0)) {
                    int v26 = (int)__p;
                  }
                  else {
                    int v26 = -1431655766;
                  }
                }
                if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
                {
                  operator delete(buf.__r_.__value_.__l.__data_);
                  if ((SHIBYTE(v148) & 0x80000000) == 0)
                  {
LABEL_57:
                    if (v27 != 4)
                    {
LABEL_68:
                      xpc_object_t v161 = v17;
                      uint64_t v35 = v104;
                      if (v17)
                      {
                        xpc_retain(v17);
                        uint64_t v1 = v105;
                        if (v104) {
                          goto LABEL_70;
                        }
                      }
                      else
                      {
                        uint64_t v1 = v105;
                        xpc_object_t v161 = xpc_null_create();
                        if (v104)
                        {
LABEL_70:
                          buf.__r_.__value_.__r.__words[0] = (std::string::size_type)_Block_copy(v104);
                          buf.__r_.__value_.__l.__size_ = (std::string::size_type)v15;
                          if (!v15)
                          {
LABEL_72:
                            abm::HelperClient::perform();
                            if (buf.__r_.__value_.__l.__size_) {
                              dispatch_release((dispatch_object_t)buf.__r_.__value_.__l.__size_);
                            }
                            if (buf.__r_.__value_.__r.__words[0]) {
                              _Block_release(buf.__r_.__value_.__l.__data_);
                            }
                            xpc_release(v161);
                            xpc_object_t v161 = 0;
LABEL_100:
                            xpc_release(v17);
                            if (v15) {
                              dispatch_release(v15);
                            }
                            if (v35) {
                              _Block_release(v35);
                            }
                            size_t v39 = v167;
                            if (v167 && !atomic_fetch_add(&v167->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                            {
                              ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
                              std::__shared_weak_count::__release_weak(v39);
                            }
                            if (v165)
                            {
                              dispatch_group_leave(v165);
                              if (v165) {
                                dispatch_release(v165);
                              }
                            }
                            size_t v40 = *(std::__shared_weak_count **)&v170[8];
                            if (*(void *)&v170[8]
                              && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&v170[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
                            {
                              ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
                              std::__shared_weak_count::__release_weak(v40);
                            }
                            goto LABEL_113;
                          }
LABEL_71:
                          dispatch_retain(v15);
                          goto LABEL_72;
                        }
                      }
                      buf.__r_.__value_.__r.__words[0] = 0;
                      buf.__r_.__value_.__l.__size_ = (std::string::size_type)v15;
                      if (!v15) {
                        goto LABEL_72;
                      }
                      goto LABEL_71;
                    }
LABEL_63:
                    if (v26 != 1) {
                      goto LABEL_68;
                    }
                    xpc_object_t v34 = *(NSObject **)(v3 + 88);
                    uint64_t v35 = v104;
                    if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
                    {
                      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
                      _os_log_impl(&dword_1C5767000, v34, OS_LOG_TYPE_DEFAULT, "#N Cellular Logging was detected before initiating LogTracker. The service needs to be paused in boot-up.", (uint8_t *)&buf, 2u);
                    }
                    xpc_object_t v163 = v17;
                    if (v17) {
                      xpc_retain(v17);
                    }
                    else {
                      xpc_object_t v163 = xpc_null_create();
                    }
                    buf.__r_.__value_.__r.__words[0] = MEMORY[0x1E4F143A8];
                    buf.__r_.__value_.__l.__size_ = 3321888768;
                    buf.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZZN10LogTracker10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_90;
                    uint64_t v155 = &__block_descriptor_72_e8_32c46_ZTSNSt3__110shared_ptrIN3abm12HelperClientEEE48c15_ZTSN3xpc4dictE56c79_ZTSN8dispatch8callbackIU13block_pointerFvN12TelephonyXPC6ResultEN3xpc4dictEEEE_e241_v48__0_Result_i_basic_string_char__std::char_traits_char___std::allocator_char______compressed_pair_std::basic_string_char_::__rep__std::allocator_char______rep_______short__23c__0C_b7b1____long__Qb63b1____raw__3Q_______8_dict__object__v__40l;
                    uint64_t v156 = *(void *)v170;
                    uint64_t v157 = *(std::__shared_weak_count **)&v170[8];
                    uint64_t v1 = v105;
                    if (*(void *)&v170[8]) {
                      atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&v170[8] + 8), 1uLL, memory_order_relaxed);
                    }
                    xpc_object_t v158 = v17;
                    if (v17)
                    {
                      xpc_retain(v17);
                      if (v104) {
                        goto LABEL_85;
                      }
                    }
                    else
                    {
                      xpc_object_t v158 = xpc_null_create();
                      if (v104)
                      {
LABEL_85:
                        long long v159 = _Block_copy(v104);
                        dispatch_object_t v160 = v15;
                        if (!v15)
                        {
LABEL_87:
                          xpc_object_t v36 = _Block_copy(&buf);
                          xpc_object_t v37 = *(NSObject **)(v3 + 136);
                          if (v37) {
                            dispatch_retain(*(dispatch_object_t *)(v3 + 136));
                          }
                          xpc_object_t v161 = v36;
                          dispatch_object_t v162 = v37;
                          abm::HelperClient::perform();
                          if (v162) {
                            dispatch_release(v162);
                          }
                          if (v161) {
                            _Block_release(v161);
                          }
                          xpc_release(v163);
                          xpc_object_t v163 = 0;
                          if (v160) {
                            dispatch_release(v160);
                          }
                          if (v159) {
                            _Block_release(v159);
                          }
                          xpc_release(v158);
                          xpc_object_t v158 = 0;
                          xpc_object_t v38 = v157;
                          if (v157 && !atomic_fetch_add(&v157->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                          {
                            ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
                            std::__shared_weak_count::__release_weak(v38);
                          }
                          goto LABEL_100;
                        }
LABEL_86:
                        dispatch_retain(v15);
                        goto LABEL_87;
                      }
                    }
                    long long v159 = 0;
                    dispatch_object_t v160 = v15;
                    if (!v15) {
                      goto LABEL_87;
                    }
                    goto LABEL_86;
                  }
                }
                else if ((SHIBYTE(v148) & 0x80000000) == 0)
                {
                  goto LABEL_57;
                }
                operator delete(__dst.__locale_);
                if (v27 != 4) {
                  goto LABEL_68;
                }
                goto LABEL_63;
              }
            }
            memmove(v31, v28, v30);
            goto LABEL_51;
          }
        }
        memmove(p_dst, v20, v22);
        goto LABEL_37;
      }
    }
    LOWORD(buf.__r_.__value_.__l.__data_) = 0;
    _os_log_impl(&dword_1C5767000, v12, OS_LOG_TYPE_DEFAULT, "#I ABM is initializing; reinit traces in helper",
      (uint8_t *)&buf,
      2u);
    goto LABEL_12;
  }
LABEL_113:
  xpc_object_t v41 = (const char **)MEMORY[0x1E4F4F928];
  strlen((const char *)*MEMORY[0x1E4F4F928]);
  ctu::fs::create_directory();
  uint64_t v42 = (const char **)MEMORY[0x1E4F4F940];
  uint64_t v43 = (const void *)*MEMORY[0x1E4F4F940];
  size_t v44 = strlen((const char *)*MEMORY[0x1E4F4F940]);
  if (v44 > 0x7FFFFFFFFFFFFFF7) {
    goto LABEL_236;
  }
  unint64_t v45 = (void *)v44;
  if (v44 >= 0x17)
  {
    uint64_t v47 = (v44 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v44 | 7) != 0x17) {
      uint64_t v47 = v44 | 7;
    }
    uint64_t v48 = v47 + 1;
    unint64_t v46 = operator new(v47 + 1);
    v152[1] = v45;
    unint64_t v153 = v48 | 0x8000000000000000;
    v152[0] = v46;
    goto LABEL_120;
  }
  HIBYTE(v153) = v44;
  unint64_t v46 = v152;
  if (v44) {
LABEL_120:
  }
    memmove(v46, v43, (size_t)v45);
  *((unsigned char *)v45 + (void)v46) = 0;
  xpc_object_t v49 = *v41;
  size_t v50 = strlen(*v41);
  if (v50 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  xpc_object_t v51 = (void *)v50;
  if (v50 >= 0x17)
  {
    uint64_t v53 = (v50 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v50 | 7) != 0x17) {
      uint64_t v53 = v50 | 7;
    }
    uint64_t v54 = v53 + 1;
    xpc_object_t v52 = operator new(v53 + 1);
    v150[1] = v51;
    unint64_t v151 = v54 | 0x8000000000000000;
    v150[0] = v52;
  }
  else
  {
    HIBYTE(v151) = v50;
    xpc_object_t v52 = v150;
    if (!v50) {
      goto LABEL_129;
    }
  }
  memmove(v52, v49, (size_t)v51);
LABEL_129:
  *((unsigned char *)v51 + (void)v52) = 0;
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]((uint64_t)&__dst, "[^\\.].*", 0);
  util::moveDirContent((std::string::size_type)v152, (uint64_t)v150, 1u, 1, (uint64_t)&__dst);
  unint64_t v55 = v149;
  if (!v149 || atomic_fetch_add(&v149->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    std::locale::~locale(&__dst);
    if ((SHIBYTE(v151) & 0x80000000) == 0) {
      goto LABEL_132;
    }
LABEL_229:
    operator delete(v150[0]);
    if ((SHIBYTE(v153) & 0x80000000) == 0) {
      goto LABEL_133;
    }
    goto LABEL_230;
  }
  ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
  std::__shared_weak_count::__release_weak(v55);
  std::locale::~locale(&__dst);
  if (SHIBYTE(v151) < 0) {
    goto LABEL_229;
  }
LABEL_132:
  if ((SHIBYTE(v153) & 0x80000000) == 0) {
    goto LABEL_133;
  }
LABEL_230:
  operator delete(v152[0]);
LABEL_133:
  strlen(*v42);
  ctu::fs::create_directory();
  xpc_object_t v56 = *(NSObject **)(v3 + 88);
  if (os_log_type_enabled(v56, OS_LOG_TYPE_DEFAULT))
  {
    std::string v57 = *v42;
    xpc_object_t v58 = *v41;
    *(_DWORD *)std::locale v170 = 136315394;
    *(void *)&v170[4] = v57;
    *(_WORD *)&v170[12] = 2080;
    *(void *)&v170[14] = v58;
    _os_log_impl(&dword_1C5767000, v56, OS_LOG_TYPE_DEFAULT, "#I Moved %s/*/* -> %s/", v170, 0x16u);
  }
  unint64_t v59 = (const void *)*MEMORY[0x1E4F4CC18];
  size_t v60 = strlen((const char *)*MEMORY[0x1E4F4CC18]);
  if (v60 > 0x7FFFFFFFFFFFFFF7) {
LABEL_236:
  }
    std::string::__throw_length_error[abi:ne180100]();
  size_t v61 = v60;
  if (v60 >= 0x17)
  {
    uint64_t v63 = (v60 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v60 | 7) != 0x17) {
      uint64_t v63 = v60 | 7;
    }
    uint64_t v64 = v63 + 1;
    p_p = operator new(v63 + 1);
    uint64_t v138 = v61;
    unint64_t v139 = v64 | 0x8000000000000000;
    std::string __p = p_p;
    goto LABEL_142;
  }
  HIBYTE(v139) = v60;
  p_p = &__p;
  if (v60) {
LABEL_142:
  }
    memmove(p_p, v59, v61);
  *((unsigned char *)p_p + v61) = 0;
  *(void *)std::locale v170 = MEMORY[0x1E4F143A8];
  *(void *)&v170[8] = 3321888768;
  *(void *)&v170[16] = ___ZZN10LogTracker10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_93;
  long long v171 = &__block_descriptor_56_e8_40c35_ZTSNSt3__18weak_ptrI10LogTrackerEE_e63_v24__0_dict__object__v__8_block_void_____int__xpc::dict______16l;
  uint64_t v172 = v3;
  uint64_t v173 = *v2;
  uint64_t v65 = (std::__shared_weak_count *)v2[1];
  v174 = v65;
  if (v65) {
    atomic_fetch_add_explicit(&v65->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  int v66 = _Block_copy(v170);
  unint64_t v145 = v66;
  Service::registerCommandHandler(v3, (uint64_t)&__p, &v145);
  if (v66) {
    _Block_release(v66);
  }
  if (SHIBYTE(v139) < 0) {
    operator delete(__p);
  }
  uint64_t v67 = (const void *)*MEMORY[0x1E4F4C9F0];
  size_t v68 = strlen((const char *)*MEMORY[0x1E4F4C9F0]);
  if (v68 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v69 = v68;
  if (v68 >= 0x17)
  {
    uint64_t v71 = (v68 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v68 | 7) != 0x17) {
      uint64_t v71 = v68 | 7;
    }
    uint64_t v72 = v71 + 1;
    long long v70 = operator new(v71 + 1);
    uint64_t v130 = v69;
    unint64_t v131 = v72 | 0x8000000000000000;
    long long v129 = v70;
    goto LABEL_156;
  }
  HIBYTE(v131) = v68;
  long long v70 = &v129;
  if (v68) {
LABEL_156:
  }
    memmove(v70, v67, v69);
  *((unsigned char *)v70 + v69) = 0;
  std::string __p = (void *)MEMORY[0x1E4F143A8];
  uint64_t v138 = 3321888768;
  unint64_t v139 = (unint64_t)___ZZN10LogTracker10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_98;
  dispatch_object_t v140 = &__block_descriptor_56_e8_40c35_ZTSNSt3__18weak_ptrI10LogTrackerEE_e63_v24__0_dict__object__v__8_block_void_____int__xpc::dict______16l;
  uint64_t v141 = v3;
  uint64_t v142 = *v2;
  long long v73 = (std::__shared_weak_count *)v2[1];
  uint64_t v143 = v73;
  if (v73) {
    atomic_fetch_add_explicit(&v73->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v74 = _Block_copy(&__p);
  unint64_t v144 = v74;
  Service::registerCommandHandler(v3, (uint64_t)&v129, &v144);
  if (v74) {
    _Block_release(v74);
  }
  if (SHIBYTE(v131) < 0) {
    operator delete(v129);
  }
  long long v75 = (const void *)*MEMORY[0x1E4F4C748];
  size_t v76 = strlen((const char *)*MEMORY[0x1E4F4C748]);
  if (v76 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v77 = v76;
  if (v76 >= 0x17)
  {
    uint64_t v79 = (v76 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v76 | 7) != 0x17) {
      uint64_t v79 = v76 | 7;
    }
    uint64_t v80 = v79 + 1;
    unint64_t v78 = operator new(v79 + 1);
    uint64_t v122 = v77;
    unint64_t v123 = v80 | 0x8000000000000000;
    xpc_object_t v121 = v78;
    goto LABEL_170;
  }
  HIBYTE(v123) = v76;
  unint64_t v78 = &v121;
  if (v76) {
LABEL_170:
  }
    memmove(v78, v75, v77);
  *((unsigned char *)v78 + v77) = 0;
  long long v129 = (void *)MEMORY[0x1E4F143A8];
  uint64_t v130 = 3321888768;
  unint64_t v131 = (unint64_t)___ZZN10LogTracker10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_2;
  std::string::size_type v132 = &__block_descriptor_56_e8_40c35_ZTSNSt3__18weak_ptrI10LogTrackerEE_e63_v24__0_dict__object__v__8_block_void_____int__xpc::dict______16l;
  uint64_t v133 = v3;
  uint64_t v134 = *v2;
  char v81 = (std::__shared_weak_count *)v2[1];
  int v135 = v81;
  if (v81) {
    atomic_fetch_add_explicit(&v81->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v82 = _Block_copy(&v129);
  uint64_t v136 = v82;
  Service::registerCommandHandler(v3, (uint64_t)&v121, &v136);
  if (v82) {
    _Block_release(v82);
  }
  if (SHIBYTE(v123) < 0) {
    operator delete(v121);
  }
  uint64_t v83 = (const void *)*MEMORY[0x1E4F4C9F8];
  size_t v84 = strlen((const char *)*MEMORY[0x1E4F4C9F8]);
  if (v84 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v85 = v84;
  if (v84 >= 0x17)
  {
    uint64_t v87 = (v84 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v84 | 7) != 0x17) {
      uint64_t v87 = v84 | 7;
    }
    uint64_t v88 = v87 + 1;
    uint64_t v86 = operator new(v87 + 1);
    uint64_t v114 = v85;
    unint64_t v115 = v88 | 0x8000000000000000;
    BOOL v113 = v86;
    goto LABEL_184;
  }
  HIBYTE(v115) = v84;
  uint64_t v86 = &v113;
  if (v84) {
LABEL_184:
  }
    memmove(v86, v83, v85);
  *((unsigned char *)v86 + v85) = 0;
  xpc_object_t v121 = (void *)MEMORY[0x1E4F143A8];
  uint64_t v122 = 3321888768;
  unint64_t v123 = (unint64_t)___ZZN10LogTracker10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_3;
  xpc_object_t v124 = &__block_descriptor_56_e8_40c35_ZTSNSt3__18weak_ptrI10LogTrackerEE_e63_v24__0_dict__object__v__8_block_void_____int__xpc::dict______16l;
  uint64_t v125 = v3;
  uint64_t v126 = *v2;
  uint64_t v89 = (std::__shared_weak_count *)v2[1];
  uint64_t v127 = v89;
  if (v89) {
    atomic_fetch_add_explicit(&v89->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  long long v90 = _Block_copy(&v121);
  dispatch_object_t v128 = v90;
  Service::registerCommandHandler(v3, (uint64_t)&v113, &v128);
  if (v90) {
    _Block_release(v90);
  }
  if (SHIBYTE(v115) < 0) {
    operator delete(v113);
  }
  size_t v91 = (const void *)*MEMORY[0x1E4F4C9E8];
  size_t v92 = strlen((const char *)*MEMORY[0x1E4F4C9E8]);
  if (v92 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v93 = v92;
  if (v92 >= 0x17)
  {
    uint64_t v95 = (v92 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v92 | 7) != 0x17) {
      uint64_t v95 = v92 | 7;
    }
    uint64_t v96 = v95 + 1;
    int v94 = operator new(v95 + 1);
    uint64_t v107 = v93;
    unint64_t v108 = v96 | 0x8000000000000000;
    xpc_object_t v106 = v94;
    goto LABEL_198;
  }
  HIBYTE(v108) = v92;
  int v94 = &v106;
  if (v92) {
LABEL_198:
  }
    memmove(v94, v91, v93);
  *((unsigned char *)v94 + v93) = 0;
  BOOL v113 = (void *)MEMORY[0x1E4F143A8];
  uint64_t v114 = 3321888768;
  unint64_t v115 = (unint64_t)___ZZN10LogTracker10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_4;
  xpc_object_t v116 = &__block_descriptor_56_e8_40c35_ZTSNSt3__18weak_ptrI10LogTrackerEE_e63_v24__0_dict__object__v__8_block_void_____int__xpc::dict______16l;
  uint64_t v117 = v3;
  uint64_t v118 = *v2;
  xpc_object_t v97 = (std::__shared_weak_count *)v2[1];
  xpc_object_t v119 = v97;
  if (v97) {
    atomic_fetch_add_explicit(&v97->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  xpc_object_t v98 = _Block_copy(&v113);
  long long v120 = v98;
  Service::registerCommandHandler(v3, (uint64_t)&v106, &v120);
  if (v98) {
    _Block_release(v98);
  }
  if (SHIBYTE(v108) < 0) {
    operator delete(v106);
  }
  dispatch_get_global_queue(0, 0);
  xpc_object_t v106 = (void *)MEMORY[0x1E4F143A8];
  uint64_t v107 = 3321888768;
  unint64_t v108 = (unint64_t)___ZZN10LogTracker10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_5;
  unint64_t v109 = &__block_descriptor_56_e8_40c35_ZTSNSt3__18weak_ptrI10LogTrackerEE_e103___os_state_data_s_I___b32I__os_state_data_decoder_s__64c__64c___64c__0C__16__0__os_state_hints_s_I_II_8l;
  uint64_t v110 = v3;
  uint64_t v111 = *v2;
  xpc_object_t v99 = (std::__shared_weak_count *)v2[1];
  uint64_t v112 = v99;
  if (v99) {
    atomic_fetch_add_explicit(&v99->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  *(void *)(v3 + 200) = os_state_add_handler();
  if (v112) {
    std::__shared_weak_count::__release_weak(v112);
  }
  if (v119) {
    std::__shared_weak_count::__release_weak(v119);
  }
  if (v127) {
    std::__shared_weak_count::__release_weak(v127);
  }
  if (v135) {
    std::__shared_weak_count::__release_weak(v135);
  }
  if (v143) {
    std::__shared_weak_count::__release_weak(v143);
  }
  if (v174) {
    std::__shared_weak_count::__release_weak(v174);
  }
  xpc_object_t v100 = v2[3];
  if (v100)
  {
    dispatch_group_leave(v100);
    xpc_object_t v101 = v2[3];
    if (v101) {
      dispatch_release(v101);
    }
  }
  int v102 = (std::__shared_weak_count *)v2[1];
  if (v102) {
    std::__shared_weak_count::__release_weak(v102);
  }
  operator delete(v2);
  char v103 = (std::__shared_weak_count *)v1[2];
  if (v103 && !atomic_fetch_add(&v103->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
    std::__shared_weak_count::__release_weak(v103);
  }
  operator delete(v1);
}

void sub_1C58D30F8(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void ___ZZN10LogTracker10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(NSObject **)(*(void *)(a1 + 32) + 88);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)size_t v2 = 0;
    _os_log_impl(&dword_1C5767000, v1, OS_LOG_TYPE_DEFAULT, "#I Reinit traces complete", v2, 2u);
  }
}

void __copy_helper_block_e8_40c30_ZTSN8dispatch13group_sessionE48c46_ZTSNSt3__110shared_ptrIN3abm12HelperClientEEE(void *a1, void *a2)
{
  dispatch_group_t v4 = a2[5];
  a1[5] = v4;
  if (v4)
  {
    dispatch_retain(v4);
    size_t v5 = a1[5];
    if (v5) {
      dispatch_group_enter(v5);
    }
  }
  uint64_t v6 = a2[7];
  a1[6] = a2[6];
  a1[7] = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
}

void __destroy_helper_block_e8_40c30_ZTSN8dispatch13group_sessionE48c46_ZTSNSt3__110shared_ptrIN3abm12HelperClientEEE(uint64_t a1)
{
  size_t v2 = *(std::__shared_weak_count **)(a1 + 56);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = *(NSObject **)(a1 + 40);
    if (!v3) {
      return;
    }
  }
  else
  {
    uint64_t v3 = *(NSObject **)(a1 + 40);
    if (!v3) {
      return;
    }
  }
  dispatch_group_leave(v3);
  dispatch_group_t v4 = *(NSObject **)(a1 + 40);
  if (v4)
  {
    dispatch_release(v4);
  }
}

void ___ZZN10LogTracker10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_90(void *a1)
{
  size_t v2 = (void *)a1[6];
  xpc_object_t v7 = v2;
  if (!v2)
  {
    xpc_object_t v7 = xpc_null_create();
    uint64_t v3 = (void *)a1[7];
    if (!v3) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  xpc_retain(v2);
  uint64_t v3 = (void *)a1[7];
  if (v3) {
LABEL_5:
  }
    uint64_t v3 = _Block_copy(v3);
LABEL_6:
  dispatch_group_t v4 = a1[8];
  aBlock = v3;
  xpc_object_t object = v4;
  if (v4) {
    dispatch_retain(v4);
  }
  abm::HelperClient::perform();
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  xpc_release(v7);
}

void sub_1C58D3864(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, xpc_object_t object)
{
}

void __copy_helper_block_e8_32c46_ZTSNSt3__110shared_ptrIN3abm12HelperClientEEE48c15_ZTSN3xpc4dictE56c79_ZTSN8dispatch8callbackIU13block_pointerFvN12TelephonyXPC6ResultEN3xpc4dictEEEE(void *a1, void *a2)
{
  uint64_t v4 = a2[5];
  a1[4] = a2[4];
  a1[5] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  size_t v5 = (void *)a2[6];
  a1[6] = v5;
  if (!v5)
  {
    a1[6] = xpc_null_create();
    uint64_t v6 = (void *)a2[7];
    if (!v6) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  xpc_retain(v5);
  uint64_t v6 = (void *)a2[7];
  if (v6) {
LABEL_7:
  }
    uint64_t v6 = _Block_copy(v6);
LABEL_8:
  xpc_object_t v7 = a2[8];
  a1[7] = v6;
  a1[8] = v7;
  if (v7)
  {
    dispatch_retain(v7);
  }
}

void __destroy_helper_block_e8_32c46_ZTSNSt3__110shared_ptrIN3abm12HelperClientEEE48c15_ZTSN3xpc4dictE56c79_ZTSN8dispatch8callbackIU13block_pointerFvN12TelephonyXPC6ResultEN3xpc4dictEEEE(uint64_t a1)
{
  size_t v2 = *(NSObject **)(a1 + 64);
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = *(const void **)(a1 + 56);
  if (v3) {
    _Block_release(v3);
  }
  xpc_release(*(xpc_object_t *)(a1 + 48));
  *(void *)(a1 + 48) = 0;
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 40);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
}

void ___ZZN10LogTracker10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_93(void *a1, xpc_object_t *a2, const void **a3)
{
  uint64_t v4 = (std::__shared_weak_count *)a1[6];
  if (!v4) {
    return;
  }
  xpc_object_t v7 = (void *)a1[4];
  uint64_t v8 = std::__shared_weak_count::lock(v4);
  if (!v8) {
    return;
  }
  int v9 = v8;
  uint64_t v10 = a1[5];
  if (atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (!v10) {
      return;
    }
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
    if (!v10) {
      return;
    }
  }
  xpc_object_t v11 = *a2;
  if (v11)
  {
    xpc_retain(v11);
    xpc_object_t v12 = *a3;
    if (*a3) {
      goto LABEL_9;
    }
  }
  else
  {
    xpc_object_t v11 = xpc_null_create();
    xpc_object_t v12 = *a3;
    if (*a3)
    {
LABEL_9:
      int v13 = _Block_copy(v12);
      xpc_object_t v14 = (std::__shared_weak_count *)v7[16];
      if (!v14) {
LABEL_18:
      }
        std::__throw_bad_weak_ptr[abi:ne180100]();
      goto LABEL_13;
    }
  }
  int v13 = 0;
  xpc_object_t v14 = (std::__shared_weak_count *)v7[16];
  if (!v14) {
    goto LABEL_18;
  }
LABEL_13:
  uint64_t v15 = v7[15];
  xpc_object_t v16 = std::__shared_weak_count::lock(v14);
  if (!v16) {
    goto LABEL_18;
  }
  xpc_object_t v17 = v16;
  xpc_object_t v18 = operator new(0x18uLL);
  *xpc_object_t v18 = v11;
  xpc_object_t v19 = xpc_null_create();
  v18[1] = v7;
  unint64_t v18[2] = v13;
  xpc_object_t v20 = v7[17];
  atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
  size_t v21 = operator new(0x18uLL);
  void *v21 = v18;
  v21[1] = v15;
  uint64_t v21[2] = v17;
  dispatch_async_f(v20, v21, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI10LogTrackerE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEENK3__0clEvEUb1_EUlvE_EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_);
  if (!atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  xpc_release(v19);
}

void ___ZZN10LogTracker10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_98(void *a1, xpc_object_t *a2, const void **a3)
{
  uint64_t v4 = (std::__shared_weak_count *)a1[6];
  if (!v4) {
    return;
  }
  xpc_object_t v7 = (void *)a1[4];
  uint64_t v8 = std::__shared_weak_count::lock(v4);
  if (!v8) {
    return;
  }
  int v9 = v8;
  uint64_t v10 = a1[5];
  if (atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (!v10) {
      return;
    }
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
    if (!v10) {
      return;
    }
  }
  xpc_object_t v11 = *a2;
  if (v11)
  {
    xpc_retain(v11);
    xpc_object_t v12 = *a3;
    if (*a3) {
      goto LABEL_9;
    }
  }
  else
  {
    xpc_object_t v11 = xpc_null_create();
    xpc_object_t v12 = *a3;
    if (*a3)
    {
LABEL_9:
      int v13 = _Block_copy(v12);
      xpc_object_t v14 = (std::__shared_weak_count *)v7[16];
      if (!v14) {
LABEL_18:
      }
        std::__throw_bad_weak_ptr[abi:ne180100]();
      goto LABEL_13;
    }
  }
  int v13 = 0;
  xpc_object_t v14 = (std::__shared_weak_count *)v7[16];
  if (!v14) {
    goto LABEL_18;
  }
LABEL_13:
  uint64_t v15 = v7[15];
  xpc_object_t v16 = std::__shared_weak_count::lock(v14);
  if (!v16) {
    goto LABEL_18;
  }
  xpc_object_t v17 = v16;
  xpc_object_t v18 = operator new(0x18uLL);
  *xpc_object_t v18 = v11;
  xpc_object_t v19 = xpc_null_create();
  v18[1] = v7;
  unint64_t v18[2] = v13;
  xpc_object_t v20 = v7[17];
  atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
  size_t v21 = operator new(0x18uLL);
  void *v21 = v18;
  v21[1] = v15;
  uint64_t v21[2] = v17;
  dispatch_async_f(v20, v21, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI10LogTrackerE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEENK3__0clEvEUb2_EUlvE_EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_);
  if (!atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  xpc_release(v19);
}

void ___ZZN10LogTracker10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_2(void *a1, xpc_object_t *a2, const void **a3)
{
  uint64_t v4 = (std::__shared_weak_count *)a1[6];
  if (!v4) {
    return;
  }
  xpc_object_t v7 = (void *)a1[4];
  uint64_t v8 = std::__shared_weak_count::lock(v4);
  if (!v8) {
    return;
  }
  int v9 = v8;
  uint64_t v10 = a1[5];
  if (atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (!v10) {
      return;
    }
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
    if (!v10) {
      return;
    }
  }
  xpc_object_t v11 = *a2;
  if (v11)
  {
    xpc_retain(v11);
    xpc_object_t v12 = *a3;
    if (*a3) {
      goto LABEL_9;
    }
  }
  else
  {
    xpc_object_t v11 = xpc_null_create();
    xpc_object_t v12 = *a3;
    if (*a3)
    {
LABEL_9:
      int v13 = _Block_copy(v12);
      uint64_t v15 = a1[5];
      xpc_object_t v14 = (std::__shared_weak_count *)a1[6];
      if (!v14) {
        goto LABEL_11;
      }
      goto LABEL_10;
    }
  }
  int v13 = 0;
  uint64_t v15 = a1[5];
  xpc_object_t v14 = (std::__shared_weak_count *)a1[6];
  if (v14) {
LABEL_10:
  }
    atomic_fetch_add_explicit(&v14->__shared_weak_owners_, 1uLL, memory_order_relaxed);
LABEL_11:
  xpc_object_t v16 = (std::__shared_weak_count *)v7[16];
  if (!v16 || (v17 = v7[15], (xpc_object_t v18 = std::__shared_weak_count::lock(v16)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  xpc_object_t v19 = v18;
  xpc_object_t v20 = operator new(0x28uLL);
  void *v20 = v11;
  xpc_object_t v21 = xpc_null_create();
  v20[1] = v7;
  void v20[2] = v13;
  v20[3] = v15;
  uint8_t v20[4] = v14;
  if (v14) {
    atomic_fetch_add_explicit(&v14->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  size_t v22 = v7[17];
  atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
  BOOL v23 = operator new(0x18uLL);
  *BOOL v23 = v20;
  v23[1] = v17;
  void v23[2] = v19;
  dispatch_async_f(v22, v23, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI10LogTrackerE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEENK3__0clEvEUb3_EUlvE_EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_);
  if (!atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
  if (v14) {
    std::__shared_weak_count::__release_weak(v14);
  }
  xpc_release(v21);
}

void ___ZZN10LogTracker10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_3(void *a1, xpc_object_t *a2, const void **a3)
{
  uint64_t v4 = (std::__shared_weak_count *)a1[6];
  if (!v4) {
    return;
  }
  xpc_object_t v7 = (void *)a1[4];
  uint64_t v8 = std::__shared_weak_count::lock(v4);
  if (!v8) {
    return;
  }
  int v9 = v8;
  uint64_t v10 = a1[5];
  if (atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (!v10) {
      return;
    }
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
    if (!v10) {
      return;
    }
  }
  xpc_object_t v11 = *a2;
  if (v11)
  {
    xpc_retain(v11);
    xpc_object_t v12 = *a3;
    if (*a3) {
      goto LABEL_9;
    }
  }
  else
  {
    xpc_object_t v11 = xpc_null_create();
    xpc_object_t v12 = *a3;
    if (*a3)
    {
LABEL_9:
      int v13 = _Block_copy(v12);
      xpc_object_t v14 = (std::__shared_weak_count *)v7[16];
      if (!v14) {
LABEL_18:
      }
        std::__throw_bad_weak_ptr[abi:ne180100]();
      goto LABEL_13;
    }
  }
  int v13 = 0;
  xpc_object_t v14 = (std::__shared_weak_count *)v7[16];
  if (!v14) {
    goto LABEL_18;
  }
LABEL_13:
  uint64_t v15 = v7[15];
  xpc_object_t v16 = std::__shared_weak_count::lock(v14);
  if (!v16) {
    goto LABEL_18;
  }
  uint64_t v17 = v16;
  xpc_object_t v18 = operator new(0x18uLL);
  *xpc_object_t v18 = v7;
  v18[1] = v11;
  xpc_object_t v19 = xpc_null_create();
  unint64_t v18[2] = v13;
  xpc_object_t v20 = v7[17];
  atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
  xpc_object_t v21 = operator new(0x18uLL);
  void *v21 = v18;
  v21[1] = v15;
  uint64_t v21[2] = v17;
  dispatch_async_f(v20, v21, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI10LogTrackerE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEENK3__0clEvEUb4_EUlvE_EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_);
  if (!atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  xpc_release(v19);
}

void ___ZZN10LogTracker10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_4(void *a1, xpc_object_t *a2, const void **a3)
{
  uint64_t v4 = (std::__shared_weak_count *)a1[6];
  if (!v4) {
    return;
  }
  xpc_object_t v7 = (void *)a1[4];
  uint64_t v8 = std::__shared_weak_count::lock(v4);
  if (!v8) {
    return;
  }
  int v9 = v8;
  uint64_t v10 = a1[5];
  if (atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (!v10) {
      return;
    }
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
    if (!v10) {
      return;
    }
  }
  xpc_object_t v11 = *a2;
  if (v11)
  {
    xpc_retain(v11);
    xpc_object_t v12 = *a3;
    if (*a3) {
      goto LABEL_9;
    }
  }
  else
  {
    xpc_object_t v11 = xpc_null_create();
    xpc_object_t v12 = *a3;
    if (*a3)
    {
LABEL_9:
      int v13 = _Block_copy(v12);
      xpc_object_t v14 = (std::__shared_weak_count *)v7[16];
      if (!v14) {
LABEL_18:
      }
        std::__throw_bad_weak_ptr[abi:ne180100]();
      goto LABEL_13;
    }
  }
  int v13 = 0;
  xpc_object_t v14 = (std::__shared_weak_count *)v7[16];
  if (!v14) {
    goto LABEL_18;
  }
LABEL_13:
  uint64_t v15 = v7[15];
  xpc_object_t v16 = std::__shared_weak_count::lock(v14);
  if (!v16) {
    goto LABEL_18;
  }
  uint64_t v17 = v16;
  xpc_object_t v18 = operator new(0x18uLL);
  *xpc_object_t v18 = v7;
  v18[1] = v11;
  xpc_object_t v19 = xpc_null_create();
  unint64_t v18[2] = v13;
  xpc_object_t v20 = v7[17];
  atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
  xpc_object_t v21 = operator new(0x18uLL);
  void *v21 = v18;
  v21[1] = v15;
  uint64_t v21[2] = v17;
  dispatch_async_f(v20, v21, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI10LogTrackerE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEENK3__0clEvEUb5_EUlvE_EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_);
  if (!atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  xpc_release(v19);
}

void ___ZZN10LogTracker10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_6(uint64_t a1)
{
  size_t v22 = (void *)0xAAAAAAAAAAAAAAAALL;
  dispatch_object_t v23 = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 3321888768;
  aBlock[2] = ___ZZN10LogTracker10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_7;
  aBlock[3] = &__block_descriptor_56_e8_40c35_ZTSNSt3__18weak_ptrI10LogTrackerEE_e241_v48__0_Result_i_basic_string_char__std::char_traits_char___std::allocator_char______compressed_pair_std::basic_string_char_::__rep__std::allocator_char______rep_______short__23c__0C_b7b1____long__Qb63b1____raw__3Q_______8_dict__object__v__40l;
  long long v11 = *(_OWORD *)(a1 + 32);
  long long v20 = v11;
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  xpc_object_t v21 = v1;
  if (v1) {
    atomic_fetch_add_explicit(&v1->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  size_t v2 = _Block_copy(aBlock);
  uint64_t v3 = *(NSObject **)(v11 + 136);
  if (v3) {
    dispatch_retain(*(dispatch_object_t *)(v11 + 136));
  }
  size_t v22 = v2;
  dispatch_object_t v23 = v3;
  unint64_t v17 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v18 = 0xAAAAAAAAAAAAAAAALL;
  GetABMLogServer(&v15);
  abm::HelperClient::create();
  uint64_t v4 = v16;
  if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  xpc_object_t v5 = xpc_dictionary_create(0, 0, 0);
  if (v5 || (xpc_object_t v5 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C8792D30](v5) == MEMORY[0x1E4F14590])
    {
      xpc_retain(v5);
      xpc_object_t v6 = v5;
    }
    else
    {
      xpc_object_t v6 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v6 = xpc_null_create();
    xpc_object_t v5 = 0;
  }
  xpc_release(v5);
  xpc_object_t v7 = xpc_int64_create(1500);
  if (!v7) {
    xpc_object_t v7 = xpc_null_create();
  }
  xpc_dictionary_set_value(v6, (const char *)*MEMORY[0x1E4F470A0], v7);
  xpc_object_t v8 = xpc_null_create();
  xpc_release(v7);
  xpc_release(v8);
  xpc_object_t v14 = v6;
  if (!v6)
  {
    xpc_object_t v14 = xpc_null_create();
    int v9 = v22;
    if (!v22) {
      goto LABEL_21;
    }
    goto LABEL_20;
  }
  xpc_retain(v6);
  int v9 = v22;
  if (v22) {
LABEL_20:
  }
    int v9 = _Block_copy(v9);
LABEL_21:
  xpc_object_t v12 = v9;
  xpc_object_t object = v23;
  if (v23) {
    dispatch_retain(v23);
  }
  abm::HelperClient::perform();
  if (object) {
    dispatch_release(object);
  }
  if (v12) {
    _Block_release(v12);
  }
  xpc_release(v14);
  xpc_release(v6);
  uint64_t v10 = (std::__shared_weak_count *)v18;
  if (v18 && !atomic_fetch_add((atomic_ullong *volatile)(v18 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  if (v23) {
    dispatch_release(v23);
  }
  if (v22) {
    _Block_release(v22);
  }
  if (v21) {
    std::__shared_weak_count::__release_weak(v21);
  }
}

void sub_1C58D4598(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, xpc_object_t object, char a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,std::__shared_weak_count *a24)
{
  dispatch::callback<void({block_pointer})(TelephonyXPC::Result,xpc::dict)>::~callback((uint64_t)&a11);
  xpc_release(object);
  xpc_object_t object = 0;
  xpc_release(v24);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  dispatch::callback<void({block_pointer})(TelephonyXPC::Result,xpc::dict)>::~callback(v25 - 48);
  if (a24) {
    std::__shared_weak_count::__release_weak(a24);
  }
  _Unwind_Resume(a1);
}

void ___ZZN10LogTracker10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_7(void *a1, _DWORD *a2, xpc_object_t *a3)
{
  uint64_t v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    uint64_t v7 = a1[4];
    xpc_object_t v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      int v9 = v8;
      uint64_t v10 = a1[5];
      if (atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        if (!v10) {
          return;
        }
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v9);
        if (!v10) {
          return;
        }
      }
      if (*a2 || MEMORY[0x1C8792D30](*a3) != MEMORY[0x1E4F14590]) {
        goto LABEL_13;
      }
      xpc_object_t value = xpc_dictionary_get_value(*a3, (const char *)*MEMORY[0x1E4F47258]);
      xpc_object_t object = value;
      if (value) {
        xpc_retain(value);
      }
      else {
        xpc_object_t object = xpc_null_create();
      }
      int v12 = xpc::dyn_cast_or_default((xpc *)&object, 0);
      xpc_release(object);
      if ((v12 - 3) < 0xFFFFFFFE)
      {
LABEL_13:
        int v13 = (const void *)*MEMORY[0x1E4F4CB18];
        size_t v14 = strlen((const char *)*MEMORY[0x1E4F4CB18]);
        if (v14 >= 0x7FFFFFFFFFFFFFF8) {
          std::string::__throw_length_error[abi:ne180100]();
        }
        uint64_t v15 = (void *)v14;
        if (v14 >= 0x17)
        {
          uint64_t v17 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v14 | 7) != 0x17) {
            uint64_t v17 = v14 | 7;
          }
          uint64_t v18 = v17 + 1;
          xpc_object_t v16 = (void **)operator new(v17 + 1);
          __dst[1] = v15;
          unint64_t v22 = v18 | 0x8000000000000000;
          __dst[0] = v16;
        }
        else
        {
          HIBYTE(v22) = v14;
          xpc_object_t v16 = __dst;
          if (!v14) {
            goto LABEL_21;
          }
        }
        memmove(v16, v13, (size_t)v15);
LABEL_21:
        *((unsigned char *)v15 + (void)v16) = 0;
        aBlock = 0;
        CFTypeRef cf = 0;
        Service::broadcastEvent(v7, (uint64_t)__dst, &cf, (const void **)&aBlock);
        if (aBlock) {
          _Block_release(aBlock);
        }
        if (cf) {
          CFRelease(cf);
        }
        if (SHIBYTE(v22) < 0) {
          operator delete(__dst[0]);
        }
      }
    }
  }
}

void sub_1C58D481C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *aBlock, char a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, xpc_object_t object)
{
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI10LogTrackerE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEENK3__0clEvEUb1_EUlvE_EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_(void *a1)
{
  uint64_t v1 = a1;
  xpc_object_t object[3] = *(xpc_object_t *)MEMORY[0x1E4F143B8];
  size_t v2 = (xpc_object_t *)*a1;
  uint64_t v3 = *(void *)(*a1 + 8);
  xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
  if (v4 || (xpc_object_t v4 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C8792D30](v4) == MEMORY[0x1E4F14590])
    {
      xpc_retain(v4);
      xpc_object_t v50 = v4;
    }
    else
    {
      xpc_object_t v50 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v50 = xpc_null_create();
    xpc_object_t v4 = 0;
  }
  xpc_release(v4);
  memset(v55, 170, sizeof(v55));
  xpc_object_t v51 = v2;
  xpc_object_t value = xpc_dictionary_get_value(*v2, (const char *)*MEMORY[0x1E4F4C5A8]);
  object[0] = value;
  if (value) {
    xpc_retain(value);
  }
  else {
    object[0] = xpc_null_create();
  }
  __p[0] = 0;
  __p[1] = 0;
  *(void *)&long long v53 = 0;
  xpc::dyn_cast_or_default();
  xpc_release(object[0]);
  xpc_object_t v6 = *(uint64_t **)(v3 + 152);
  uint64_t v7 = (uint64_t **)(v3 + 160);
  if (v6 == (uint64_t *)(v3 + 160)) {
    goto LABEL_44;
  }
  char v8 = 0;
  do
  {
    unint64_t v54 = 0xAAAAAAAAAAAAAAAALL;
    *(void *)&long long v9 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v9 + 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)std::string __p = v9;
    long long v53 = v9;
    if (*((char *)v6 + 55) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)__p, (const std::string::value_type *)v6[4], v6[5]);
    }
    else
    {
      *(_OWORD *)std::string __p = *((_OWORD *)v6 + 2);
      *(void *)&long long v53 = v6[6];
    }
    unint64_t v10 = v6[8];
    *((void *)&v53 + 1) = v6[7];
    unint64_t v54 = v10;
    if (v10) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
    }
    if ((SBYTE7(v53) & 0x80u) == 0) {
      long long v11 = __p;
    }
    else {
      long long v11 = (void **)__p[0];
    }
    if (SHIBYTE(v55[2]) >= 0) {
      int v12 = v55;
    }
    else {
      int v12 = (void **)v55[0];
    }
    int v13 = strcasecmp((const char *)v11, (const char *)v12);
    if (v13)
    {
      size_t v14 = (std::__shared_weak_count *)v54;
      if (!v54) {
        goto LABEL_31;
      }
    }
    else
    {
      uint64_t v15 = *(NSObject **)(v3 + 88);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        LODWORD(object[0]) = 136315138;
        *(xpc_object_t *)((char *)object + 4) = v12;
        _os_log_error_impl(&dword_1C5767000, v15, OS_LOG_TYPE_ERROR, "Failed to register: %s is already registered.", (uint8_t *)object, 0xCu);
        char v8 = 1;
        size_t v14 = (std::__shared_weak_count *)v54;
        if (!v54) {
          goto LABEL_31;
        }
      }
      else
      {
        char v8 = 1;
        size_t v14 = (std::__shared_weak_count *)v54;
        if (!v54) {
          goto LABEL_31;
        }
      }
    }
    if (!atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
LABEL_31:
    if (SBYTE7(v53) < 0) {
      operator delete(__p[0]);
    }
    if (!v13) {
      break;
    }
    xpc_object_t v16 = (uint64_t *)v6[1];
    if (v16)
    {
      do
      {
        uint64_t v17 = (uint64_t **)v16;
        xpc_object_t v16 = (uint64_t *)*v16;
      }
      while (v16);
    }
    else
    {
      do
      {
        uint64_t v17 = (uint64_t **)v6[2];
        BOOL v18 = *v17 == v6;
        xpc_object_t v6 = (uint64_t *)v17;
      }
      while (!v18);
    }
    xpc_object_t v6 = (uint64_t *)v17;
  }
  while (v17 != v7);
  if (v8)
  {
    uint64_t v19 = 3760250880;
    long long v20 = v51;
    goto LABEL_89;
  }
LABEL_44:
  xpc_object_t v21 = (std::__shared_weak_count *)operator new(0x28uLL);
  v21->__shared_owners_ = 0;
  v21->__shared_weak_owners_ = 0;
  v21->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20FB7D8;
  unint64_t v22 = *(NSObject **)(v3 + 176);
  if (v22)
  {
    dispatch_retain(*(dispatch_object_t *)(v3 + 176));
    dispatch_group_enter(v22);
  }
  v21[1].__vftable = (std::__shared_weak_count_vtbl *)xpc_null_create();
  v21[1].__shared_owners_ = (uint64_t)v22;
  if (v22)
  {
    dispatch_retain(v22);
    std::string::size_type shared_owners = v21[1].__shared_owners_;
    if (shared_owners) {
      dispatch_group_enter(shared_owners);
    }
    dispatch_group_leave(v22);
    dispatch_release(v22);
  }
  uint64_t p_shared_owners = &v21->__shared_owners_;
  uint64_t v24 = v1;
  uint64_t v25 = v3;
  int v26 = *v7;
  int v27 = (uint64_t **)(v3 + 160);
  if (*v7)
  {
    if (SHIBYTE(v55[2]) >= 0) {
      uint64_t v28 = v55;
    }
    else {
      uint64_t v28 = (void **)v55[0];
    }
    if (SHIBYTE(v55[2]) >= 0) {
      size_t v29 = (void *)HIBYTE(v55[2]);
    }
    else {
      size_t v29 = v55[1];
    }
    while (1)
    {
      int v27 = (uint64_t **)v26;
      uint64_t v32 = (uint64_t *)v26[4];
      size_t v30 = v26 + 4;
      __int16 v31 = v32;
      int v33 = *((char *)v30 + 23);
      if (v33 >= 0) {
        xpc_object_t v34 = v30;
      }
      else {
        xpc_object_t v34 = v31;
      }
      if (v33 >= 0) {
        size_t v35 = *((unsigned __int8 *)v30 + 23);
      }
      else {
        size_t v35 = v30[1];
      }
      if (v35 >= (unint64_t)v29) {
        size_t v36 = (size_t)v29;
      }
      else {
        size_t v36 = v35;
      }
      int v37 = memcmp(v28, v34, v36);
      if (v37)
      {
        if (v37 < 0) {
          goto LABEL_57;
        }
LABEL_71:
        int v38 = memcmp(v34, v28, v36);
        if (v38)
        {
          if ((v38 & 0x80000000) == 0) {
            goto LABEL_83;
          }
        }
        else if (v35 >= (unint64_t)v29)
        {
LABEL_83:
          size_t v39 = (char *)v27;
          long long v20 = v51;
          uint64_t v1 = v24;
          goto LABEL_84;
        }
        int v26 = v27[1];
        if (!v26)
        {
          uint64_t v7 = v27 + 1;
          break;
        }
      }
      else
      {
        if ((unint64_t)v29 >= v35) {
          goto LABEL_71;
        }
LABEL_57:
        int v26 = *v27;
        uint64_t v7 = v27;
        if (!*v27) {
          break;
        }
      }
    }
  }
  size_t v39 = (char *)operator new(0x48uLL);
  size_t v40 = (std::string *)(v39 + 32);
  uint64_t v1 = v24;
  if (SHIBYTE(v55[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v40, (const std::string::value_type *)v55[0], (std::string::size_type)v55[1]);
  }
  else
  {
    *(_OWORD *)&v40->__r_.__value_.__l.__data_ = *(_OWORD *)v55;
    *((void **)v39 + 6) = v55[2];
  }
  *((void *)v39 + 7) = 0;
  *((void *)v39 + 8) = 0;
  *(void *)size_t v39 = 0;
  *((void *)v39 + 1) = 0;
  *((void *)v39 + 2) = v27;
  *uint64_t v7 = (uint64_t *)v39;
  uint64_t v41 = **(void **)(v25 + 152);
  uint64_t v42 = (uint64_t *)v39;
  if (v41)
  {
    *(void *)(v25 + 152) = v41;
    uint64_t v42 = *v7;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v25 + 160), v42);
  ++*(void *)(v25 + 168);
  long long v20 = v51;
LABEL_84:
  atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v43 = (std::__shared_weak_count *)*((void *)v39 + 8);
  *((void *)v39 + 7) = v21 + 1;
  *((void *)v39 + 8) = v21;
  if (v43 && !atomic_fetch_add(&v43->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
    std::__shared_weak_count::__release_weak(v43);
    if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL))
    {
LABEL_87:
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  else if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL))
  {
    goto LABEL_87;
  }
  uint64_t v19 = 0;
LABEL_89:
  xpc_object_t v44 = xpc_null_create();
  unint64_t v45 = (void (**)(xpc_object_t, uint64_t, void **))v20[2];
  __p[0] = v44;
  xpc_object_t v46 = xpc_null_create();
  v45[2](v45, v19, __p);
  xpc_release(__p[0]);
  xpc_release(v46);
  if (SHIBYTE(v55[2]) < 0) {
    operator delete(v55[0]);
  }
  xpc_release(v50);
  xpc_object_t v47 = v20[2];
  if (v47) {
    _Block_release(v47);
  }
  xpc_release(*v20);
  operator delete(v20);
  uint64_t v48 = (std::__shared_weak_count *)v1[2];
  if (v48 && !atomic_fetch_add(&v48->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
    std::__shared_weak_count::__release_weak(v48);
  }
  operator delete(v1);
}

void sub_1C58D4EC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, atomic_ullong *a11, uint64_t a12, xpc_object_t object, xpc_object_t *a14, xpc_object_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,xpc_object_t a29)
{
  uint64_t v32 = v30;
  operator delete(v32);
  if (!atomic_fetch_add(a11, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
    std::__shared_weak_count::__release_weak(v31);
  }
  if (a28 < 0) {
    operator delete(__p);
  }
  xpc_release(object);
  xpc_object_t v34 = a14[2];
  if (v34) {
    _Block_release(v34);
  }
  xpc_release(*a14);
  operator delete(a14);
  size_t v35 = (std::__shared_weak_count *)v29[2];
  if (v35)
  {
    if (!atomic_fetch_add(&v35->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  operator delete(v29);
  _Unwind_Resume(a1);
}

void sub_1C58D5064(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void std::__shared_ptr_emplace<LogTrackerDomainInfo>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20FB7D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<LogTrackerDomainInfo>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20FB7D8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_emplace<LogTrackerDomainInfo>::__on_zero_shared(uint64_t a1)
{
  size_t v2 = *(NSObject **)(a1 + 32);
  if (v2)
  {
    dispatch_group_leave(v2);
    uint64_t v3 = *(NSObject **)(a1 + 32);
    if (v3) {
      dispatch_release(v3);
    }
  }
  xpc_release(*(xpc_object_t *)(a1 + 24));
  *(void *)(a1 + 24) = 0;
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI10LogTrackerE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEENK3__0clEvEUb2_EUlvE_EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_(void *a1)
{
  __p[3] = *(void **)MEMORY[0x1E4F143B8];
  uint64_t v2 = *a1;
  uint64_t v3 = *(void *)(*a1 + 8);
  memset(v34, 170, sizeof(v34));
  xpc_object_t value = xpc_dictionary_get_value(*(xpc_object_t *)v2, (const char *)*MEMORY[0x1E4F4C5A8]);
  *(void *)xpc_object_t object = value;
  if (value) {
    xpc_retain(value);
  }
  else {
    *(void *)xpc_object_t object = xpc_null_create();
  }
  memset(__p, 0, 24);
  xpc::dyn_cast_or_default();
  xpc_release(*(xpc_object_t *)object);
  xpc_object_t v5 = *(void **)(v3 + 152);
  if (v5 != (void *)(v3 + 160))
  {
    if (SHIBYTE(v34[2]) >= 0) {
      xpc_object_t v6 = v34;
    }
    else {
      xpc_object_t v6 = (void **)v34[0];
    }
    while (1)
    {
      uint64_t v7 = *((char *)v5 + 55) >= 0 ? (const char *)(v5 + 4) : (const char *)v5[4];
      if (!strcasecmp(v7, (const char *)v6)) {
        break;
      }
      char v8 = (void *)v5[1];
      if (v8)
      {
        do
        {
          long long v9 = v8;
          char v8 = (void *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          long long v9 = (void *)v5[2];
          BOOL v10 = *v9 == (void)v5;
          xpc_object_t v5 = v9;
        }
        while (!v10);
      }
      xpc_object_t v5 = v9;
      if (v9 == (void *)(v3 + 160)) {
        goto LABEL_19;
      }
    }
    uint64_t v15 = (void *)v5[7];
    size_t v14 = (std::__shared_weak_count *)v5[8];
    if (v14) {
      atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    xpc_object_t v16 = (void *)*MEMORY[0x1E4F4C1D0];
    __p[0] = (void *)v2;
    __p[1] = v16;
    xpc::dict::object_proxy::operator xpc::dict((uint64_t)__p, object);
    uint64_t v17 = *(void *)object;
    *(void *)xpc_object_t object = xpc_null_create();
    BOOL v18 = (void *)*v15;
    void *v15 = v17;
    xpc_release(v18);
    xpc_release(*(xpc_object_t *)object);
    uint64_t v19 = v15[1];
    v15[1] = 0;
    if (v19)
    {
      dispatch_group_leave(v19);
      dispatch_release(v19);
    }
    long long v20 = *(NSObject **)(v3 + 88);
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
    {
      int v26 = v34;
      if (SHIBYTE(v34[2]) < 0) {
        int v26 = (void **)v34[0];
      }
      LODWORD(__p[0]) = 136315138;
      *(void **)((char *)__p + 4) = v26;
      _os_log_debug_impl(&dword_1C5767000, v20, OS_LOG_TYPE_DEBUG, "#D Received log domain: %s", (uint8_t *)__p, 0xCu);
      long long v20 = *(NSObject **)(v3 + 88);
      if (!os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG)) {
        goto LABEL_29;
      }
    }
    else if (!os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
    {
LABEL_29:
      if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
        uint64_t v11 = 0;
      }
      else
      {
        uint64_t v11 = 0;
      }
      goto LABEL_33;
    }
    int v27 = (char *)MEMORY[0x1C8792C60](*v15);
    memset(__p, 170, 24);
    size_t v28 = strlen(v27);
    if (v28 >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    size_t v29 = (void *)v28;
    if (v28 >= 0x17)
    {
      uint64_t v31 = (v28 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v28 | 7) != 0x17) {
        uint64_t v31 = v28 | 7;
      }
      uint64_t v32 = v31 + 1;
      size_t v30 = operator new(v31 + 1);
      __p[1] = v29;
      xpc_object_t __p[2] = (void *)(v32 | 0x8000000000000000);
      __p[0] = v30;
    }
    else
    {
      HIBYTE(__p[2]) = v28;
      size_t v30 = __p;
      if (!v28) {
        goto LABEL_53;
      }
    }
    memcpy(v30, v27, (size_t)v29);
LABEL_53:
    *((unsigned char *)v29 + (void)v30) = 0;
    free(v27);
    int v33 = __p;
    if (SHIBYTE(__p[2]) < 0) {
      int v33 = (void **)__p[0];
    }
    *(_DWORD *)xpc_object_t object = 136315138;
    *(void *)&xpc_object_t object[4] = v33;
    _os_log_debug_impl(&dword_1C5767000, v20, OS_LOG_TYPE_DEBUG, "#D Received log summary: %s", object, 0xCu);
    if (SHIBYTE(__p[2]) < 0) {
      operator delete(__p[0]);
    }
    goto LABEL_29;
  }
LABEL_19:
  uint64_t v11 = 3760250880;
  int v12 = *(NSObject **)(v3 + 88);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
  {
    int v13 = v34;
    if (SHIBYTE(v34[2]) < 0) {
      int v13 = (void **)v34[0];
    }
    LODWORD(__p[0]) = 136315138;
    *(void **)((char *)__p + 4) = v13;
    _os_log_error_impl(&dword_1C5767000, v12, OS_LOG_TYPE_ERROR, "Failed to find log summary domain with %s", (uint8_t *)__p, 0xCu);
  }
LABEL_33:
  xpc_object_t v21 = xpc_null_create();
  uint64_t v22 = *(void *)(v2 + 16);
  __p[0] = v21;
  xpc_object_t v23 = xpc_null_create();
  (*(void (**)(uint64_t, uint64_t, void **))(v22 + 16))(v22, v11, __p);
  xpc_release(__p[0]);
  xpc_release(v23);
  if ((SHIBYTE(v34[2]) & 0x80000000) == 0)
  {
    uint64_t v24 = *(const void **)(v2 + 16);
    if (!v24) {
      goto LABEL_38;
    }
    goto LABEL_37;
  }
  operator delete(v34[0]);
  uint64_t v24 = *(const void **)(v2 + 16);
  if (v24) {
LABEL_37:
  }
    _Block_release(v24);
LABEL_38:
  xpc_release(*(xpc_object_t *)v2);
  operator delete((void *)v2);
  uint64_t v25 = (std::__shared_weak_count *)a1[2];
  if (v25 && !atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
    std::__shared_weak_count::__release_weak(v25);
  }
  operator delete(a1);
}

void sub_1C58D55EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, xpc_object_t a16, uint64_t a17, xpc_object_t object, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI10LogTrackerE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEENK3__0clEvEUb3_EUlvE_EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_(void *a1)
{
  uint64_t v55 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *a1;
  uint64_t v3 = *(void *)(*a1 + 8);
  xpc_object_t v4 = _os_activity_create(&dword_1C5767000, "Dump trace", MEMORY[0x1E4F144F0], OS_ACTIVITY_FLAG_DEFAULT);
  state.opaque[0] = 0xAAAAAAAAAAAAAAAALL;
  state.opaque[1] = 0xAAAAAAAAAAAAAAAALL;
  os_activity_scope_enter(v4, &state);
  os_activity_scope_leave(&state);
  memset(v48, 170, sizeof(v48));
  xpc_object_t value = xpc_dictionary_get_value(*(xpc_object_t *)v2, (const char *)*MEMORY[0x1E4F4C268]);
  state.opaque[0] = (uint64_t)value;
  if (value) {
    xpc_retain(value);
  }
  else {
    state.opaque[0] = (uint64_t)xpc_null_create();
  }
  xpc::dyn_cast_or_default((uint64_t *)v48, (xpc *)&state, (const object *)*MEMORY[0x1E4F4C630], v6);
  xpc_release((xpc_object_t)state.opaque[0]);
  memset(__p, 170, sizeof(__p));
  uint64_t v7 = (const char *)*MEMORY[0x1E4F4CA98];
  xpc_object_t v8 = xpc_dictionary_get_value(*(xpc_object_t *)v2, (const char *)*MEMORY[0x1E4F4CA98]);
  state.opaque[0] = (uint64_t)v8;
  if (v8) {
    xpc_retain(v8);
  }
  else {
    state.opaque[0] = (uint64_t)xpc_null_create();
  }
  xpc::dyn_cast_or_default((uint64_t *)__p, (xpc *)&state, (const object *)"", v9);
  xpc_release((xpc_object_t)state.opaque[0]);
  BOOL v10 = *(NSObject **)(v3 + 88);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v11 = __p;
    if (SHIBYTE(__p[2]) < 0) {
      uint64_t v11 = (void **)__p[0];
    }
    LODWORD(state.opaque[0]) = 136315138;
    *(uint64_t *)((char *)state.opaque + 4) = (uint64_t)v11;
    _os_log_impl(&dword_1C5767000, v10, OS_LOG_TYPE_DEFAULT, "#I Dumping log with Reason: \"%s\"", (uint8_t *)&state, 0xCu);
  }
  if (SHIBYTE(v48[2]) >= 0) {
    size_t v12 = HIBYTE(v48[2]);
  }
  else {
    size_t v12 = (size_t)v48[1];
  }
  if (v12 != strlen((const char *)*MEMORY[0x1E4F4CD08])
    || (SHIBYTE(v48[2]) >= 0 ? (int v13 = v48) : (int v13 = (void **)v48[0]),
        memcmp(v13, (const void *)*MEMORY[0x1E4F4CD08], v12)))
  {
    size_t v14 = *(NSObject **)v2;
    xpc_object_t v46 = v14;
    if (v14)
    {
      xpc_retain(v14);
      uint64_t v15 = *(const void **)(v2 + 16);
      if (v15)
      {
LABEL_21:
        xpc_object_t v16 = _Block_copy(v15);
LABEL_24:
        unint64_t v45 = v16;
        LogTracker::dumpLogInternal_sync(v3, (xpc_object_t *)&v46, &v45);
        if (v16) {
          _Block_release(v16);
        }
        xpc_release(v14);
        xpc_object_t v46 = 0;
        goto LABEL_27;
      }
    }
    else
    {
      size_t v14 = xpc_null_create();
      xpc_object_t v46 = v14;
      uint64_t v15 = *(const void **)(v2 + 16);
      if (v15) {
        goto LABEL_21;
      }
    }
    xpc_object_t v16 = 0;
    goto LABEL_24;
  }
  xpc_object_t v24 = xpc_string_create((const char *)*MEMORY[0x1E4F4F948]);
  if (!v24) {
    xpc_object_t v24 = xpc_null_create();
  }
  xpc_dictionary_set_value(*(xpc_object_t *)v2, v7, v24);
  xpc_object_t v25 = xpc_null_create();
  xpc_release(v24);
  xpc_release(v25);
  xpc_object_t v26 = xpc_null_create();
  uint64_t v27 = *(void *)(v2 + 16);
  state.opaque[0] = (uint64_t)v26;
  xpc_object_t v28 = xpc_null_create();
  (*(void (**)(uint64_t, void, os_activity_scope_state_s *))(v27 + 16))(v27, 0, &state);
  xpc_release((xpc_object_t)state.opaque[0]);
  xpc_release(v28);
  xpc_object_t v29 = *(xpc_object_t *)v2;
  unint64_t v45 = v29;
  xpc_object_t v46 = 0;
  if (v29)
  {
    xpc_retain(v29);
  }
  else
  {
    xpc_object_t v29 = xpc_null_create();
    unint64_t v45 = v29;
  }
  LogTracker::jsonSummary_sync((void *)v3, &v46, (xpc_object_t *)&v45);
  xpc_release(v29);
  unint64_t v45 = 0;
LABEL_27:
  if (!TelephonyUtilIsCarrierBuild()) {
    goto LABEL_70;
  }
  uint64_t IsInternalBuild = TelephonyUtilIsInternalBuild();
  if ((IsInternalBuild & 1) != 0 || LogTracker::isDefaultCarrierProfileInstalled((LogTracker *)IsInternalBuild)) {
    goto LABEL_70;
  }
  state.opaque[0] = MEMORY[0x1E4F143A8];
  state.opaque[1] = 3321888768;
  xpc_object_t v50 = ___ZZZZN10LogTracker10initializeEN8dispatch13group_sessionEENK3__0clEvEUb3_ENKUlvE_clEv_block_invoke;
  xpc_object_t v51 = &__block_descriptor_56_e8_40c35_ZTSNSt3__18weak_ptrI10LogTrackerEE_e241_v48__0_Result_i_basic_string_char__std::char_traits_char___std::allocator_char______compressed_pair_std::basic_string_char_::__rep__std::allocator_char______rep_______short__23c__0C_b7b1____long__Qb63b1____raw__3Q_______8_dict__object__v__40l;
  uint64_t v52 = v3;
  uint64_t v53 = *(void *)(v2 + 24);
  BOOL v18 = *(std::__shared_weak_count **)(v2 + 32);
  unint64_t v54 = v18;
  if (v18) {
    atomic_fetch_add_explicit(&v18->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v19 = _Block_copy(&state);
  long long v20 = *(NSObject **)(v3 + 136);
  if (v20) {
    dispatch_retain(*(dispatch_object_t *)(v3 + 136));
  }
  unint64_t v43 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v44 = 0xAAAAAAAAAAAAAAAALL;
  GetABMLogServer(&v41);
  abm::HelperClient::create();
  xpc_object_t v21 = v42;
  if (v42 && !atomic_fetch_add(&v42->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v21);
  }
  xpc_object_t v22 = xpc_dictionary_create(0, 0, 0);
  if (v22 || (xpc_object_t v22 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C8792D30](v22) == MEMORY[0x1E4F14590])
    {
      xpc_retain(v22);
      xpc_object_t v23 = v22;
    }
    else
    {
      xpc_object_t v23 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v23 = xpc_null_create();
    xpc_object_t v22 = 0;
  }
  xpc_release(v22);
  xpc_object_t v30 = xpc_string_create((const char *)*MEMORY[0x1E4F47250]);
  if (!v30) {
    xpc_object_t v30 = xpc_null_create();
  }
  xpc_dictionary_set_value(v23, (const char *)*MEMORY[0x1E4F470D8], v30);
  xpc_object_t v31 = xpc_null_create();
  xpc_release(v30);
  xpc_release(v31);
  xpc_object_t v32 = xpc_BOOL_create(1);
  if (!v32) {
    xpc_object_t v32 = xpc_null_create();
  }
  xpc_dictionary_set_value(v23, (const char *)*MEMORY[0x1E4F47220], v32);
  xpc_object_t v33 = xpc_null_create();
  xpc_release(v32);
  xpc_release(v33);
  xpc_object_t v40 = v23;
  if (v23)
  {
    xpc_retain(v23);
    if (v19) {
      goto LABEL_55;
    }
LABEL_86:
    aBlock = 0;
    xpc_object_t object = v20;
    if (!v20) {
      goto LABEL_57;
    }
    goto LABEL_56;
  }
  xpc_object_t v40 = xpc_null_create();
  if (!v19) {
    goto LABEL_86;
  }
LABEL_55:
  aBlock = _Block_copy(v19);
  xpc_object_t object = v20;
  if (v20) {
LABEL_56:
  }
    dispatch_retain(v20);
LABEL_57:
  abm::HelperClient::perform();
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  xpc_release(v40);
  xpc_release(v23);
  xpc_object_t v34 = (std::__shared_weak_count *)v44;
  if (v44 && !atomic_fetch_add((atomic_ullong *volatile)(v44 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
    std::__shared_weak_count::__release_weak(v34);
  }
  if (v20) {
    dispatch_release(v20);
  }
  if (v19) {
    _Block_release(v19);
  }
  if (v54) {
    std::__shared_weak_count::__release_weak(v54);
  }
LABEL_70:
  if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v48[2]) & 0x80000000) == 0) {
      goto LABEL_72;
    }
LABEL_75:
    operator delete(v48[0]);
    if (!v4) {
      goto LABEL_77;
    }
    goto LABEL_76;
  }
  operator delete(__p[0]);
  if (SHIBYTE(v48[2]) < 0) {
    goto LABEL_75;
  }
LABEL_72:
  if (v4) {
LABEL_76:
  }
    os_release(v4);
LABEL_77:
  size_t v35 = *(std::__shared_weak_count **)(v2 + 32);
  if (v35) {
    std::__shared_weak_count::__release_weak(v35);
  }
  size_t v36 = *(const void **)(v2 + 16);
  if (v36) {
    _Block_release(v36);
  }
  xpc_release(*(xpc_object_t *)v2);
  operator delete((void *)v2);
  int v37 = (std::__shared_weak_count *)a1[2];
  if (v37 && !atomic_fetch_add(&v37->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
    std::__shared_weak_count::__release_weak(v37);
  }
  operator delete(a1);
}

void sub_1C58D5E68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *aBlock, dispatch_object_t object, xpc_object_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,xpc_object_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,std::__shared_weak_count *a37)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void ___ZZZZN10LogTracker10initializeEN8dispatch13group_sessionEENK3__0clEvEUb3_ENKUlvE_clEv_block_invoke(void *a1, unsigned int *a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    uint64_t v5 = a1[4];
    xpc_object_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      uint64_t v7 = v6;
      uint64_t v8 = a1[5];
      if (atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        if (!v8) {
          return;
        }
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v7);
        if (!v8) {
          return;
        }
      }
      uint64_t v9 = *a2;
      if (v9)
      {
        BOOL v10 = *(NSObject **)(v5 + 88);
        if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
        {
          TelephonyXPC::Result::toString(v9, (uint64_t)__p);
          if (v13 >= 0) {
            uint64_t v11 = __p;
          }
          else {
            uint64_t v11 = (void **)__p[0];
          }
          *(_DWORD *)std::string buf = 136315138;
          uint64_t v15 = v11;
          _os_log_error_impl(&dword_1C5767000, v10, OS_LOG_TYPE_ERROR, "Failed to install profile. Result: %s", buf, 0xCu);
          if (v13 < 0) {
            operator delete(__p[0]);
          }
        }
      }
    }
  }
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI10LogTrackerE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEENK3__0clEvEUb4_EUlvE_EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_(void *a1)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (void *)*a1;
  uint64_t v3 = *(void **)*a1;
  xpc_object_t v4 = *(xpc_object_t *)(*a1 + 8);
  xpc_object_t v43 = v4;
  if (!v4)
  {
    xpc_object_t v4 = xpc_null_create();
    xpc_object_t v43 = v4;
    uint64_t v5 = (void *)v2[2];
    if (!v5) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  xpc_retain(v4);
  uint64_t v5 = (void *)v2[2];
  if (v5) {
LABEL_5:
  }
    uint64_t v5 = _Block_copy(v5);
LABEL_6:
  aBlock = v5;
  LogTracker::setProperty_sync(v3, &v43, (uint64_t *)&aBlock);
  if (aBlock) {
    _Block_release(aBlock);
  }
  xpc_release(v4);
  xpc_object_t v43 = 0;
  memset(v41, 170, sizeof(v41));
  xpc_object_t value = xpc_dictionary_get_value((xpc_object_t)v2[1], (const char *)*MEMORY[0x1E4F4C1A0]);
  object[0] = value;
  if (value) {
    xpc_retain(value);
  }
  else {
    object[0] = xpc_null_create();
  }
  memset(&__dst, 0, sizeof(__dst));
  xpc::dyn_cast_or_default();
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  xpc_release(object[0]);
  memset(object, 170, sizeof(object));
  xpc_object_t v7 = xpc_dictionary_get_value((xpc_object_t)v2[1], (const char *)*MEMORY[0x1E4F4C6A8]);
  v39[0] = v7;
  if (v7) {
    xpc_retain(v7);
  }
  else {
    v39[0] = xpc_null_create();
  }
  memset(&__dst, 0, sizeof(__dst));
  xpc::dyn_cast_or_default();
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  xpc_release(v39[0]);
  memset(v39, 170, sizeof(v39));
  xpc_object_t v8 = xpc_dictionary_get_value((xpc_object_t)v2[1], (const char *)*MEMORY[0x1E4F4C800]);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
  if (v8) {
    xpc_retain(v8);
  }
  else {
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
  }
  memset(&__dst, 0, sizeof(__dst));
  xpc::dyn_cast_or_default();
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  xpc_release(__p.__r_.__value_.__l.__data_);
  uint64_t v9 = (const void *)*MEMORY[0x1E4F4C208];
  size_t v10 = strlen((const char *)*MEMORY[0x1E4F4C208]);
  if (v10 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  std::string::size_type v11 = v10;
  if (v10 >= 0x17)
  {
    uint64_t v13 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v10 | 7) != 0x17) {
      uint64_t v13 = v10 | 7;
    }
    uint64_t v14 = v13 + 1;
    p_dst = (std::string *)operator new(v13 + 1);
    __dst.__r_.__value_.__l.__size_ = v11;
    __dst.__r_.__value_.__r.__words[2] = v14 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_30;
  }
  *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v10;
  p_dst = &__dst;
  if (v10) {
LABEL_30:
  }
    memmove(p_dst, v9, v11);
  p_dst->__r_.__value_.__s.__data_[v11] = 0;
  if (SHIBYTE(v41[2]) >= 0) {
    uint64_t v15 = v41;
  }
  else {
    uint64_t v15 = (void **)v41[0];
  }
  char v16 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v17 = &__dst;
  }
  else {
    uint64_t v17 = (std::string *)__dst.__r_.__value_.__r.__words[0];
  }
  if (strcasecmp((const char *)v15, (const char *)v17))
  {
    BOOL v19 = 0;
    if ((v16 & 0x80) == 0) {
      goto LABEL_39;
    }
LABEL_59:
    operator delete(__dst.__r_.__value_.__l.__data_);
    if (!v19) {
      goto LABEL_75;
    }
    goto LABEL_60;
  }
  long long v20 = (const void *)*MEMORY[0x1E4F4CB98];
  size_t v21 = strlen((const char *)*MEMORY[0x1E4F4CB98]);
  if (v21 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  std::string::size_type v22 = v21;
  if (v21 >= 0x17)
  {
    uint64_t v24 = (v21 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v21 | 7) != 0x17) {
      uint64_t v24 = v21 | 7;
    }
    uint64_t v25 = v24 + 1;
    p_p = (std::string *)operator new(v24 + 1);
    __p.__r_.__value_.__l.__size_ = v22;
    __p.__r_.__value_.__r.__words[2] = v25 | 0x8000000000000000;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)p_p;
    goto LABEL_48;
  }
  *((unsigned char *)&__p.__r_.__value_.__s + 23) = v21;
  p_p = &__p;
  if (v21) {
LABEL_48:
  }
    memmove(p_p, v20, v22);
  p_p->__r_.__value_.__s.__data_[v22] = 0;
  if (SHIBYTE(object[2]) >= 0) {
    xpc_object_t v26 = object;
  }
  else {
    xpc_object_t v26 = (xpc_object_t *)object[0];
  }
  int v27 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
  xpc_object_t v28 = (void *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    xpc_object_t v29 = &__p;
  }
  else {
    xpc_object_t v29 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  BOOL v19 = strcasecmp((const char *)v26, (const char *)v29) == 0;
  if (v27 < 0)
  {
    operator delete(v28);
    if ((*((unsigned char *)&__dst.__r_.__value_.__s + 23) & 0x80) != 0) {
      goto LABEL_59;
    }
  }
  else if ((*((unsigned char *)&__dst.__r_.__value_.__s + 23) & 0x80) != 0)
  {
    goto LABEL_59;
  }
LABEL_39:
  if (!v19) {
    goto LABEL_75;
  }
LABEL_60:
  if (SHIBYTE(v39[2]) >= 0) {
    xpc_object_t v30 = v39;
  }
  else {
    xpc_object_t v30 = (xpc_object_t *)v39[0];
  }
  int v31 = abm::helper::asEnum((abm::helper *)v30, v18);
  xpc_object_t v32 = v3[11];
  if (os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG))
  {
    size_t v36 = v39;
    if (SHIBYTE(v39[2]) < 0) {
      size_t v36 = (xpc_object_t *)v39[0];
    }
    LODWORD(__dst.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = (std::string::size_type)v36;
    _os_log_debug_impl(&dword_1C5767000, v32, OS_LOG_TYPE_DEBUG, "#D Selected Config: %s", (uint8_t *)&__dst, 0xCu);
  }
  memset(&__p, 170, sizeof(__p));
  xpc_object_t v33 = xpc_dictionary_get_value((xpc_object_t)v2[1], (const char *)*MEMORY[0x1E4F4D120]);
  xpc_object_t v37 = v33;
  if (v33) {
    xpc_retain(v33);
  }
  else {
    xpc_object_t v37 = xpc_null_create();
  }
  memset(&__dst, 0, sizeof(__dst));
  xpc::dyn_cast_or_default();
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  xpc_release(v37);
  xpc_object_t v37 = xpc_null_create();
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__dst, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else {
    std::string __dst = __p;
  }
  LogTracker::updateLoggingSettings_sync(v3, v31, (std::string::size_type *)&v37, (uint64_t)&__dst);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  xpc_release(v37);
  xpc_object_t v37 = 0;
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_75:
    if ((SHIBYTE(v39[2]) & 0x80000000) == 0) {
      goto LABEL_76;
    }
    goto LABEL_81;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v39[2]) & 0x80000000) == 0)
  {
LABEL_76:
    if ((SHIBYTE(object[2]) & 0x80000000) == 0) {
      goto LABEL_77;
    }
    goto LABEL_82;
  }
LABEL_81:
  operator delete(v39[0]);
  if ((SHIBYTE(object[2]) & 0x80000000) == 0)
  {
LABEL_77:
    if ((SHIBYTE(v41[2]) & 0x80000000) == 0) {
      goto LABEL_78;
    }
    goto LABEL_83;
  }
LABEL_82:
  operator delete(object[0]);
  if ((SHIBYTE(v41[2]) & 0x80000000) == 0)
  {
LABEL_78:
    xpc_object_t v34 = (const void *)v2[2];
    if (!v34) {
      goto LABEL_85;
    }
    goto LABEL_84;
  }
LABEL_83:
  operator delete(v41[0]);
  xpc_object_t v34 = (const void *)v2[2];
  if (v34) {
LABEL_84:
  }
    _Block_release(v34);
LABEL_85:
  xpc_release((xpc_object_t)v2[1]);
  operator delete(v2);
  size_t v35 = (std::__shared_weak_count *)a1[2];
  if (v35 && !atomic_fetch_add(&v35->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
    std::__shared_weak_count::__release_weak(v35);
  }
  operator delete(a1);
}