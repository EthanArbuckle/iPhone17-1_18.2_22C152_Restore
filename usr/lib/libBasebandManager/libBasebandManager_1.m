uint64_t __copy_helper_block_e8_40c35_ZTSNSt3__18weak_ptrI10BootModuleEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c35_ZTSNSt3__18weak_ptrI10BootModuleEE(uint64_t a1)
{
  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

char *BootModule::getShutdownStages@<X0>(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  result = (char *)operator new(3uLL);
  a1[1] = result + 3;
  a1[2] = result + 3;
  *(_WORD *)result = 256;
  result[2] = 3;
  *a1 = result;
  return result;
}

void BootModule::shutdown(uint64_t a1, int a2, NSObject **a3)
{
  if (a2 == 3)
  {
    v6 = (uint64_t *)(a1 + 120);
    v10[0] = MEMORY[0x1E4F143A8];
    v10[1] = 1174405120;
    v10[2] = ___ZN10BootModule8shutdownE13ShutdownStageN8dispatch13group_sessionE_block_invoke_32;
    v10[3] = &__block_descriptor_tmp_37_0;
    v7 = *a3;
    v10[4] = a1;
    dispatch_group_t group = v7;
    if (v7)
    {
      dispatch_retain(v7);
      dispatch_group_enter(group);
    }
    ctu::SharedSynchronizable<BootModule>::execute_wrapped(v6, (uint64_t)v10);
    if (group)
    {
      dispatch_group_leave(group);
      v5 = group;
      if (group) {
        goto LABEL_18;
      }
    }
  }
  else
  {
    if (a2 != 1)
    {
      if (a2) {
        return;
      }
      v3 = (uint64_t *)(a1 + 120);
      v14[0] = MEMORY[0x1E4F143A8];
      v14[1] = 1174405120;
      v14[2] = ___ZN10BootModule8shutdownE13ShutdownStageN8dispatch13group_sessionE_block_invoke;
      v14[3] = &__block_descriptor_tmp_20_1;
      v4 = *a3;
      v14[4] = a1;
      dispatch_group_t v15 = v4;
      if (v4)
      {
        dispatch_retain(v4);
        dispatch_group_enter(v15);
      }
      ctu::SharedSynchronizable<BootModule>::execute_wrapped(v3, (uint64_t)v14);
      if (!v15) {
        return;
      }
      dispatch_group_leave(v15);
      v5 = v15;
      if (!v15) {
        return;
      }
LABEL_18:
      dispatch_release(v5);
      return;
    }
    v8 = (uint64_t *)(a1 + 120);
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 1174405120;
    v12[2] = ___ZN10BootModule8shutdownE13ShutdownStageN8dispatch13group_sessionE_block_invoke_21;
    v12[3] = &__block_descriptor_tmp_31_1;
    v9 = *a3;
    v12[4] = a1;
    dispatch_group_t object = v9;
    if (v9)
    {
      dispatch_retain(v9);
      dispatch_group_enter(object);
    }
    ctu::SharedSynchronizable<BootModule>::execute_wrapped(v8, (uint64_t)v12);
    if (object)
    {
      dispatch_group_leave(object);
      v5 = object;
      if (object) {
        goto LABEL_18;
      }
    }
  }
}

void ___ZN10BootModule8shutdownE13ShutdownStageN8dispatch13group_sessionE_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  v3 = *(NSObject **)(v2 + 88);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf.__r_.__value_.__l.__data_) = 0;
    _os_log_impl(&dword_1C5767000, v3, OS_LOG_TYPE_DEFAULT, "#I Shutdown prepare", (uint8_t *)&buf, 2u);
  }
  unsigned int v4 = *(_DWORD *)(v2 + 456);
  if (v4 <= 8)
  {
    int v5 = 1 << v4;
    if ((v5 & 0x1E1) != 0)
    {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 96))(v2, 8);
      v6 = *(NSObject **)(v2 + 216);
      *(void *)(v2 + 216) = 0;
      if (v6)
      {
        dispatch_group_leave(v6);
        dispatch_release(v6);
      }
    }
    else if ((v5 & 0xE) != 0)
    {
      v7 = *(NSObject **)(a1 + 40);
      if (v7)
      {
        dispatch_retain(v7);
        dispatch_group_enter(v7);
      }
      v8 = *(NSObject **)(v2 + 216);
      *(void *)(v2 + 216) = v7;
      if (v8)
      {
        dispatch_group_leave(v8);
        dispatch_release(v8);
      }
      v9 = *(NSObject **)(v2 + 88);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(buf.__r_.__value_.__l.__data_) = 0;
        _os_log_impl(&dword_1C5767000, v9, OS_LOG_TYPE_DEFAULT, "#I Holding shutdown request session", (uint8_t *)&buf, 2u);
      }
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 96))(v2, 7);
    }
  }
  unint64_t v16 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v17 = 0xAAAAAAAAAAAAAAAALL;
  (*(void (**)(unint64_t *__return_ptr, uint64_t))(*(void *)v2 + 80))(&v16, v2);
  unint64_t v10 = v16;
  if (v16)
  {
    v11 = (char *)operator new(0x38uLL);
    strcpy(v11, "com.apple.AppleBasebandManager.RadioNotReady.Shutdown");
    uint64_t v12 = capabilities::abs::shutdownAssertionTimeoutScalingFactor((capabilities::abs *)v11);
    uint64_t v13 = *(void *)(v10 + 104);
    std::string::__init_copy_ctor_external(&buf, v11, 0x35uLL);
    (*(void (**)(dispatch_object_t *__return_ptr, uint64_t, std::string *, uint64_t))(*(void *)v13 + 24))(&object, v13, &buf, 240000 * v12);
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf.__r_.__value_.__l.__data_);
    }
    if (object) {
      dispatch_release(object);
    }
    operator delete(v11);
  }
  v14 = (std::__shared_weak_count *)v17;
  if (v17)
  {
    if (!atomic_fetch_add((atomic_ullong *volatile)(v17 + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
}

void sub_1C57E3BA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
  {
    operator delete(__p);
    operator delete(v18);
    std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
    _Unwind_Resume(a1);
  }
  operator delete(v18);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void ___ZN10BootModule8shutdownE13ShutdownStageN8dispatch13group_sessionE_block_invoke_21(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  v3 = v2[11];
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl(&dword_1C5767000, v3, OS_LOG_TYPE_DEFAULT, "#I Shutdown baseband", buf, 2u);
  }
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN10BootModule8shutdownE13ShutdownStageN8dispatch13group_sessionE_block_invoke_22;
  aBlock[3] = &__block_descriptor_tmp_28_1;
  unsigned int v4 = *(NSObject **)(a1 + 40);
  aBlock[4] = v2;
  dispatch_group_t group = v4;
  if (v4)
  {
    dispatch_retain(v4);
    dispatch_group_enter(group);
  }
  v7 = _Block_copy(aBlock);
  (*(void (**)(void *, void **))(*v2 + 112))(v2, &v7);
  if (v7) {
    _Block_release(v7);
  }
  if (group)
  {
    dispatch_group_leave(group);
    if (group) {
      dispatch_release(group);
    }
  }
}

void sub_1C57E3D2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, dispatch_group_t group, void *aBlock)
{
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (group)
  {
    dispatch_group_leave(group);
    dispatch_release(group);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN10BootModule8shutdownE13ShutdownStageN8dispatch13group_sessionE_block_invoke_22(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  CFMutableDictionaryRef v37 = 0;
  uint64_t v3 = *MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (Mutable) {
    CFMutableDictionaryRef v37 = Mutable;
  }
  ctu::cf::insert<char const*,char const*>(Mutable, (const __CFString **)*MEMORY[0x1E4F4C688], (const __CFString **)*MEMORY[0x1E4F4CEB8], v3, v5);
  v6 = *(std::__shared_weak_count **)(v2 + 128);
  if (!v6 || (uint64_t v7 = *(void *)(v2 + 120), (v8 = std::__shared_weak_count::lock(v6)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  v9 = v8;
  atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
  }
  unint64_t v10 = (const void *)*MEMORY[0x1E4F4CEF8];
  size_t v11 = strlen((const char *)*MEMORY[0x1E4F4CEF8]);
  if (v11 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v12 = (void *)v11;
  if (v11 >= 0x17)
  {
    uint64_t v15 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17) {
      uint64_t v15 = v11 | 7;
    }
    uint64_t v16 = v15 + 1;
    uint64_t v13 = (void **)operator new(v15 + 1);
    __dst[1] = v12;
    unint64_t v36 = v16 | 0x8000000000000000;
    __dst[0] = v13;
LABEL_15:
    memmove(v13, v10, (size_t)v12);
    *((unsigned char *)v12 + (void)v13) = 0;
    CFMutableDictionaryRef v14 = v37;
    if (!v37) {
      goto LABEL_18;
    }
    goto LABEL_16;
  }
  HIBYTE(v36) = v11;
  uint64_t v13 = __dst;
  if (v11) {
    goto LABEL_15;
  }
  LOBYTE(__dst[0]) = 0;
  CFMutableDictionaryRef v14 = v37;
  if (!v37) {
    goto LABEL_18;
  }
LABEL_16:
  CFTypeID v17 = CFGetTypeID(v14);
  if (v17 == CFDictionaryGetTypeID())
  {
    CFTypeRef cf = v14;
    CFRetain(v14);
    goto LABEL_19;
  }
LABEL_18:
  CFTypeRef cf = 0;
LABEL_19:
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN10BootModule8shutdownE13ShutdownStageN8dispatch13group_sessionE_block_invoke_2;
  aBlock[3] = &__block_descriptor_tmp_24_2;
  v18 = *(NSObject **)(a1 + 40);
  aBlock[4] = v2;
  dispatch_group_t group = v18;
  if (v18)
  {
    dispatch_retain(v18);
    dispatch_group_enter(group);
  }
  uint64_t v31 = v7;
  v32 = v9;
  atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  v33 = _Block_copy(aBlock);
  Service::broadcastEvent(v2, (uint64_t)__dst, &cf, (const void **)&v33);
  if (v33) {
    _Block_release(v33);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (SHIBYTE(v36) < 0) {
    operator delete(__dst[0]);
  }
  v19 = (const void *)*MEMORY[0x1E4F4C758];
  size_t v20 = strlen((const char *)*MEMORY[0x1E4F4C758]);
  if (v20 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  v21 = (void *)v20;
  if (v20 >= 0x17)
  {
    uint64_t v23 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v20 | 7) != 0x17) {
      uint64_t v23 = v20 | 7;
    }
    uint64_t v24 = v23 + 1;
    v22 = operator new(v23 + 1);
    __p[1] = v21;
    unint64_t v28 = v24 | 0x8000000000000000;
    __p[0] = v22;
    goto LABEL_34;
  }
  HIBYTE(v28) = v20;
  v22 = __p;
  if (v20) {
LABEL_34:
  }
    memmove(v22, v19, (size_t)v21);
  *((unsigned char *)v21 + (void)v22) = 0;
  v25 = 0;
  CFTypeRef v26 = 0;
  Service::broadcastEvent(v2, (uint64_t)__p, &v26, (const void **)&v25);
  if (v25) {
    _Block_release(v25);
  }
  if (v26) {
    CFRelease(v26);
  }
  if (SHIBYTE(v28) < 0) {
    operator delete(__p[0]);
  }
  if (v32) {
    std::__shared_weak_count::__release_weak(v32);
  }
  if (group)
  {
    dispatch_group_leave(group);
    if (group) {
      dispatch_release(group);
    }
  }
  std::__shared_weak_count::__release_weak(v9);
  if (v37) {
    CFRelease(v37);
  }
}

void sub_1C57E4110(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *aBlock, const void *a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,dispatch_group_t group,uint64_t a24,std::__shared_weak_count *a25,void *a26,char a27)
{
  if (aBlock) {
    _Block_release(aBlock);
  }
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&a11);
  if (a17 < 0)
  {
    operator delete(__p);
    v30 = a25;
    if (!a25)
    {
LABEL_5:
      uint64_t v31 = group;
      if (!group) {
        goto LABEL_11;
      }
      goto LABEL_9;
    }
  }
  else
  {
    v30 = a25;
    if (!a25) {
      goto LABEL_5;
    }
  }
  std::__shared_weak_count::__release_weak(v30);
  uint64_t v31 = group;
  if (!group) {
    goto LABEL_11;
  }
LABEL_9:
  dispatch_group_leave(v31);
  if (group) {
    dispatch_release(group);
  }
LABEL_11:
  std::__shared_weak_count::__release_weak(v27);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)(v28 - 88));
  _Unwind_Resume(a1);
}

void sub_1C57E4204(_Unwind_Exception *a1)
{
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)(v1 - 88));
  _Unwind_Resume(a1);
}

void sub_1C57E4218(_Unwind_Exception *a1)
{
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)(v1 - 88));
  _Unwind_Resume(a1);
}

void ___ZN10BootModule8shutdownE13ShutdownStageN8dispatch13group_sessionE_block_invoke_2(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[7];
  if (v2)
  {
    uint64_t v3 = a1[4];
    unsigned int v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      CFAllocatorRef v5 = v4;
      uint64_t v6 = a1[6];
      if (v6)
      {
        v7[0] = MEMORY[0x1E4F143A8];
        v7[1] = 0x40000000;
        v7[2] = ___ZN10BootModule8shutdownE13ShutdownStageN8dispatch13group_sessionE_block_invoke_3;
        v7[3] = &__block_descriptor_tmp_23;
        v7[4] = v3;
        ctu::SharedSynchronizable<BootModule>::execute_wrapped((uint64_t *)(v6 + 120), (uint64_t)v7);
      }
      if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void ___ZN10BootModule8shutdownE13ShutdownStageN8dispatch13group_sessionE_block_invoke_3(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  unint64_t v6 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v7 = 0xAAAAAAAAAAAAAAAALL;
  (*(void (**)(unint64_t *__return_ptr))(*(void *)v1 + 80))(&v6);
  unint64_t v2 = v6;
  if (v6)
  {
    uint64_t v3 = (char *)operator new(0x38uLL);
    strcpy(v3, "com.apple.AppleBasebandManager.RadioNotReady.Shutdown");
    uint64_t v4 = *(void *)(v2 + 104);
    std::string::__init_copy_ctor_external(&v8, v3, 0x35uLL);
    (*(void (**)(uint64_t, std::string *))(*(void *)v4 + 32))(v4, &v8);
    if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v8.__r_.__value_.__l.__data_);
    }
    operator delete(v3);
  }
  CFAllocatorRef v5 = (std::__shared_weak_count *)v7;
  if (v7)
  {
    if (!atomic_fetch_add((atomic_ullong *volatile)(v7 + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_1C57E4464(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  operator delete(v17);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void sub_1C57E4498(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void __copy_helper_block_e8_40c30_ZTSN8dispatch13group_sessionE48c35_ZTSNSt3__18weak_ptrI10BootModuleEE(void *a1, void *a2)
{
  uint64_t v4 = a2[5];
  a1[5] = v4;
  if (v4)
  {
    dispatch_retain(v4);
    CFAllocatorRef v5 = a1[5];
    if (v5) {
      dispatch_group_enter(v5);
    }
  }
  uint64_t v6 = a2[7];
  a1[6] = a2[6];
  a1[7] = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 16), 1uLL, memory_order_relaxed);
  }
}

void __destroy_helper_block_e8_40c30_ZTSN8dispatch13group_sessionE48c35_ZTSNSt3__18weak_ptrI10BootModuleEE(uint64_t a1)
{
  unint64_t v2 = *(std::__shared_weak_count **)(a1 + 56);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = *(NSObject **)(a1 + 40);
  if (v3)
  {
    dispatch_group_leave(v3);
    uint64_t v4 = *(NSObject **)(a1 + 40);
    if (v4)
    {
      dispatch_release(v4);
    }
  }
}

void ___ZN10BootModule8shutdownE13ShutdownStageN8dispatch13group_sessionE_block_invoke_32(uint64_t a1)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(void **)(a1 + 32);
  unint64_t v17 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v18 = 0xAAAAAAAAAAAAAAAALL;
  (*(void (**)(unint64_t *__return_ptr, void *))(*v1 + 80))(&v17, v1);
  unint64_t v2 = v17;
  if (v17)
  {
    uint64_t v3 = (char *)operator new(0x38uLL);
    strcpy(v3, "com.apple.AppleBasebandManager.RadioNotReady.Bootup");
    uint64_t v4 = *(void *)(v2 + 104);
    std::string::__init_copy_ctor_external(&v19, v3, 0x33uLL);
    (*(void (**)(uint64_t, std::string *))(*(void *)v4 + 32))(v4, &v19);
    if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v19.__r_.__value_.__l.__data_);
    }
    operator delete(v3);
    unint64_t v5 = v17;
    uint64_t v6 = (char *)operator new(0x38uLL);
    strcpy(v6, "com.apple.AppleBasebandManager.RadioNotReady.Shutdown");
    uint64_t v7 = *(void *)(v5 + 104);
    std::string::__init_copy_ctor_external(&v19, v6, 0x35uLL);
    (*(void (**)(uint64_t, std::string *))(*(void *)v7 + 32))(v7, &v19);
    if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v19.__r_.__value_.__l.__data_);
    }
    operator delete(v6);
  }
  uint64_t v8 = v1[60];
  if (v8)
  {
    int v9 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 80))(v8);
    unint64_t v10 = v1[11];
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      size_t v11 = "failed";
      if (v9) {
        size_t v11 = "successful";
      }
      LODWORD(v19.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)v19.__r_.__value_.__r.__words + 4) = (std::string::size_type)v11;
      _os_log_impl(&dword_1C5767000, v10, OS_LOG_TYPE_DEFAULT, "#I Baseband poweroff (forced) %s", (uint8_t *)&v19, 0xCu);
    }
  }
  uint64_t v12 = (std::__shared_weak_count *)v1[23];
  v1[22] = 0;
  v1[23] = 0;
  if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  uint64_t v13 = (std::__shared_weak_count *)v1[35];
  v1[34] = 0;
  v1[35] = 0;
  if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  CFMutableDictionaryRef v14 = (std::__shared_weak_count *)v1[61];
  v1[60] = 0;
  v1[61] = 0;
  if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  uint64_t v15 = (std::__shared_weak_count *)v1[59];
  v1[58] = 0;
  v1[59] = 0;
  if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  uint64_t v16 = (std::__shared_weak_count *)v18;
  if (v18)
  {
    if (!atomic_fetch_add((atomic_ullong *volatile)(v18 + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
}

void sub_1C57E4918(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1C57E492C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  operator delete(v16);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1C57E496C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void BootModule::initialize(uint64_t *a1, NSObject **a2)
{
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 1174405120;
  v11[2] = ___ZN10BootModule10initializeEN8dispatch13group_sessionE_block_invoke;
  v11[3] = &__block_descriptor_tmp_67_0;
  uint64_t v3 = *a2;
  v11[4] = a1;
  dispatch_group_t group = v3;
  if (v3)
  {
    dispatch_retain(v3);
    dispatch_group_enter(group);
  }
  ctu::SharedSynchronizable<BootModule>::execute_wrapped(a1 + 15, (uint64_t)v11);
  uint64_t v4 = (std::__shared_weak_count *)a1[16];
  if (!v4 || (uint64_t v5 = a1[15], (v6 = std::__shared_weak_count::lock(v4)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v7 = v6;
  uint64_t v8 = operator new(8uLL);
  void *v8 = a1;
  int v9 = a1[17];
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  unint64_t v10 = operator new(0x18uLL);
  *unint64_t v10 = v8;
  v10[1] = v5;
  v10[2] = v7;
  dispatch_async_f(v9, v10, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<BootModule>::execute_wrapped<BootModule::initialize(dispatch::group_session)::$_0>(BootModule::initialize(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<BootModule::initialize(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<BootModule::initialize(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke);
  if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  if (group)
  {
    dispatch_group_leave(group);
    if (group) {
      dispatch_release(group);
    }
  }
}

void ___ZN10BootModule10initializeEN8dispatch13group_sessionE_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  unint64_t v2 = (std::__shared_weak_count *)v1[16];
  if (!v2 || (v3 = v1[15], (uint64_t v4 = std::__shared_weak_count::lock(v2)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v5 = v4;
  atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v5);
  }
  uint64_t v6 = (const void *)*MEMORY[0x1E4F4CDC0];
  size_t v7 = strlen((const char *)*MEMORY[0x1E4F4CDC0]);
  if (v7 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v8 = v7;
  if (v7 >= 0x17)
  {
    uint64_t v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17) {
      uint64_t v10 = v7 | 7;
    }
    uint64_t v11 = v10 + 1;
    p_dst = (long long *)operator new(v10 + 1);
    *((void *)&__dst + 1) = v8;
    unint64_t v66 = v11 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
    goto LABEL_12;
  }
  HIBYTE(v66) = v7;
  p_dst = &__dst;
  if (v7) {
LABEL_12:
  }
    memmove(p_dst, v6, v8);
  *((unsigned char *)p_dst + v8) = 0;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN10BootModule10initializeEN8dispatch13group_sessionE_block_invoke_2;
  aBlock[3] = &__block_descriptor_tmp_42_0;
  aBlock[4] = v1;
  void aBlock[5] = v3;
  v63 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  uint64_t v12 = _Block_copy(aBlock);
  v64 = v12;
  Service::registerCommandHandler((uint64_t)v1, (uint64_t)&__dst, &v64);
  if (v12) {
    _Block_release(v12);
  }
  if (SHIBYTE(v66) < 0) {
    operator delete((void *)__dst);
  }
  uint64_t v13 = (const void *)*MEMORY[0x1E4F4C638];
  size_t v14 = strlen((const char *)*MEMORY[0x1E4F4C638]);
  if (v14 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v15 = v14;
  if (v14 >= 0x17)
  {
    uint64_t v17 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v14 | 7) != 0x17) {
      uint64_t v17 = v14 | 7;
    }
    uint64_t v18 = v17 + 1;
    uint64_t v16 = (long long *)operator new(v17 + 1);
    *((void *)&__dst + 1) = v15;
    unint64_t v66 = v18 | 0x8000000000000000;
    *(void *)&long long __dst = v16;
    goto LABEL_24;
  }
  HIBYTE(v66) = v14;
  uint64_t v16 = &__dst;
  if (v14) {
LABEL_24:
  }
    memmove(v16, v13, v15);
  *((unsigned char *)v16 + v15) = 0;
  v59[0] = MEMORY[0x1E4F143A8];
  v59[1] = 1174405120;
  v59[2] = ___ZN10BootModule10initializeEN8dispatch13group_sessionE_block_invoke_43;
  v59[3] = &__block_descriptor_tmp_51_0;
  v59[4] = v1;
  v59[5] = v3;
  v60 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  std::string v19 = _Block_copy(v59);
  v61 = v19;
  Service::registerCommandHandler((uint64_t)v1, (uint64_t)&__dst, &v61);
  if (v19) {
    _Block_release(v19);
  }
  if (SHIBYTE(v66) < 0) {
    operator delete((void *)__dst);
  }
  uint64_t v20 = (const void *)*MEMORY[0x1E4F4CDE8];
  size_t v21 = strlen((const char *)*MEMORY[0x1E4F4CDE8]);
  if (v21 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v22 = v21;
  if (v21 >= 0x17)
  {
    uint64_t v24 = (v21 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v21 | 7) != 0x17) {
      uint64_t v24 = v21 | 7;
    }
    uint64_t v25 = v24 + 1;
    uint64_t v23 = (long long *)operator new(v24 + 1);
    *((void *)&__dst + 1) = v22;
    unint64_t v66 = v25 | 0x8000000000000000;
    *(void *)&long long __dst = v23;
    goto LABEL_36;
  }
  HIBYTE(v66) = v21;
  uint64_t v23 = &__dst;
  if (v21) {
LABEL_36:
  }
    memmove(v23, v20, v22);
  *((unsigned char *)v23 + v22) = 0;
  v56[0] = MEMORY[0x1E4F143A8];
  v56[1] = 1174405120;
  v56[2] = ___ZN10BootModule10initializeEN8dispatch13group_sessionE_block_invoke_52;
  v56[3] = &__block_descriptor_tmp_53_0;
  v56[4] = v3;
  v57 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  CFTypeRef v26 = _Block_copy(v56);
  v58 = v26;
  Service::registerCommandHandler((uint64_t)v1, (uint64_t)&__dst, &v58);
  if (v26) {
    _Block_release(v26);
  }
  if (SHIBYTE(v66) < 0) {
    operator delete((void *)__dst);
  }
  v27 = (const void *)*MEMORY[0x1E4F4C9D8];
  size_t v28 = strlen((const char *)*MEMORY[0x1E4F4C9D8]);
  if (v28 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v29 = v28;
  if (v28 >= 0x17)
  {
    uint64_t v31 = (v28 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v28 | 7) != 0x17) {
      uint64_t v31 = v28 | 7;
    }
    uint64_t v32 = v31 + 1;
    v30 = (long long *)operator new(v31 + 1);
    *((void *)&__dst + 1) = v29;
    unint64_t v66 = v32 | 0x8000000000000000;
    *(void *)&long long __dst = v30;
    goto LABEL_48;
  }
  HIBYTE(v66) = v28;
  v30 = &__dst;
  if (v28) {
LABEL_48:
  }
    memmove(v30, v27, v29);
  *((unsigned char *)v30 + v29) = 0;
  v53[0] = MEMORY[0x1E4F143A8];
  v53[1] = 1174405120;
  v53[2] = ___ZN10BootModule10initializeEN8dispatch13group_sessionE_block_invoke_54;
  v53[3] = &__block_descriptor_tmp_57_0;
  v53[4] = v1;
  v53[5] = v3;
  v54 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  v33 = _Block_copy(v53);
  v55 = v33;
  Service::registerCommandHandler((uint64_t)v1, (uint64_t)&__dst, &v55);
  if (v33) {
    _Block_release(v33);
  }
  if (SHIBYTE(v66) < 0) {
    operator delete((void *)__dst);
  }
  unint64_t v51 = 0xAAAAAAAAAAAAAAAALL;
  v52 = (std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL;
  v34 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  uint64_t v35 = off_1EBBDD2A0;
  if (!off_1EBBDD2A0)
  {
    CommandDriverFactory::create_default_global((uint64_t *)&__dst, v34);
    long long v36 = __dst;
    long long __dst = 0uLL;
    CFMutableDictionaryRef v37 = (std::__shared_weak_count *)*(&off_1EBBDD2A0 + 1);
    off_1EBBDD2A0 = v36;
    if (v37 && !atomic_fetch_add(&v37->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
    v38 = (std::__shared_weak_count *)*((void *)&__dst + 1);
    if (*((void *)&__dst + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&__dst + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
    uint64_t v35 = off_1EBBDD2A0;
  }
  v39 = (std::__shared_weak_count *)*(&off_1EBBDD2A0 + 1);
  uint64_t v47 = v35;
  uint64_t v48 = *(&off_1EBBDD2A0 + 1);
  if (*(&off_1EBBDD2A0 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDD2A0 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(unint64_t *__return_ptr, uint64_t))(*(void *)v35 + 16))(&v49, v35);
  unint64_t v51 = 0;
  v52 = 0;
  if (v50)
  {
    v52 = std::__shared_weak_count::lock(v50);
    if (v52) {
      unint64_t v51 = v49;
    }
    if (v50) {
      std::__shared_weak_count::__release_weak(v50);
    }
  }
  if (v39 && !atomic_fetch_add(&v39->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
    std::__shared_weak_count::__release_weak(v39);
    if (!v51) {
      goto LABEL_86;
    }
  }
  else if (!v51)
  {
    goto LABEL_86;
  }
  *(void *)&long long __dst = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&__dst + 1) = 0xAAAAAAAAAAAAAAAALL;
  v45[0] = MEMORY[0x1E4F143A8];
  v45[1] = 1174405120;
  v45[2] = ___ZN10BootModule10initializeEN8dispatch13group_sessionE_block_invoke_58;
  v45[3] = &__block_descriptor_tmp_64_1;
  v45[4] = v1;
  v45[5] = v3;
  v46 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  v40 = _Block_copy(v45);
  v41 = v1[17];
  if (v41) {
    dispatch_retain(v41);
  }
  *(void *)&long long __dst = v40;
  *((void *)&__dst + 1) = v41;
  if (!v40)
  {
    v43 = 0;
    dispatch_object_t object = v41;
    if (!v41) {
      goto LABEL_76;
    }
    goto LABEL_75;
  }
  v43 = _Block_copy(v40);
  dispatch_object_t object = v41;
  if (v41) {
LABEL_75:
  }
    dispatch_retain(v41);
LABEL_76:
  radio::CommandDriver::watchClientState();
  if (object) {
    dispatch_release(object);
  }
  if (v43) {
    _Block_release(v43);
  }
  if (v41) {
    dispatch_release(v41);
  }
  if (v40) {
    _Block_release(v40);
  }
  if (v46) {
    std::__shared_weak_count::__release_weak(v46);
  }
LABEL_86:
  v42 = v52;
  if (v52 && !atomic_fetch_add(&v52->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
    std::__shared_weak_count::__release_weak(v42);
  }
  if (v54) {
    std::__shared_weak_count::__release_weak(v54);
  }
  if (v57) {
    std::__shared_weak_count::__release_weak(v57);
  }
  if (v60) {
    std::__shared_weak_count::__release_weak(v60);
  }
  if (v63) {
    std::__shared_weak_count::__release_weak(v63);
  }
  std::__shared_weak_count::__release_weak(v5);
}

void sub_1C57E530C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,std::__shared_weak_count *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,std::__shared_weak_count *a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,std::__shared_weak_count *a45)
{
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  if (a30) {
    std::__shared_weak_count::__release_weak(a30);
  }
  if (a37) {
    std::__shared_weak_count::__release_weak(a37);
  }
  if (a45) {
    std::__shared_weak_count::__release_weak(a45);
  }
  uint64_t v48 = *(std::__shared_weak_count **)(v46 - 144);
  if (v48)
  {
    std::__shared_weak_count::__release_weak(v48);
    std::__shared_weak_count::__release_weak(v45);
    _Unwind_Resume(a1);
  }
  std::__shared_weak_count::__release_weak(v45);
  _Unwind_Resume(a1);
}

void ___ZN10BootModule10initializeEN8dispatch13group_sessionE_block_invoke_2(void *a1, uint64_t a2, void **a3)
{
  uint64_t v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    uint64_t v6 = a1[4];
    size_t v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      size_t v8 = v7;
      if (a1[5])
      {
        v10[0] = MEMORY[0x1E4F143A8];
        v10[1] = 1174405120;
        v10[2] = ___ZN10BootModule10initializeEN8dispatch13group_sessionE_block_invoke_3;
        v10[3] = &__block_descriptor_tmp_38_0;
        v10[4] = v6;
        int v9 = *a3;
        if (*a3) {
          int v9 = _Block_copy(v9);
        }
        aBlock = v9;
        ctu::SharedSynchronizable<BootModule>::execute_wrapped((uint64_t *)(v6 + 120), (uint64_t)v10);
        if (aBlock) {
          _Block_release(aBlock);
        }
      }
      if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
}

void ___ZN10BootModule10initializeEN8dispatch13group_sessionE_block_invoke_3(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  xpc_object_t v3 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v4 = v3;
  if (v3)
  {
    xpc_object_t xdict = v3;
  }
  else
  {
    xpc_object_t v4 = xpc_null_create();
    xpc_object_t xdict = v4;
    if (!v4)
    {
      xpc_object_t v5 = xpc_null_create();
      xpc_object_t v4 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1C8792D30](v4) == MEMORY[0x1E4F14590])
  {
    xpc_retain(v4);
    goto LABEL_9;
  }
  xpc_object_t v5 = xpc_null_create();
LABEL_8:
  xpc_object_t xdict = v5;
LABEL_9:
  xpc_release(v4);
  switch(*(_DWORD *)(v2 + 456))
  {
    case 1:
      xpc_object_t v6 = xpc_string_create((const char *)*MEMORY[0x1E4F4CCD8]);
      if (!v6) {
        xpc_object_t v6 = xpc_null_create();
      }
      break;
    case 3:
      xpc_object_t v6 = xpc_string_create((const char *)*MEMORY[0x1E4F4C958]);
      if (!v6) {
        xpc_object_t v6 = xpc_null_create();
      }
      break;
    case 4:
      xpc_object_t v6 = xpc_string_create((const char *)*MEMORY[0x1E4F4CAE8]);
      if (!v6) {
        xpc_object_t v6 = xpc_null_create();
      }
      break;
    case 6:
      xpc_object_t v6 = xpc_string_create((const char *)*MEMORY[0x1E4F4C6E0]);
      if (!v6) {
        xpc_object_t v6 = xpc_null_create();
      }
      break;
    case 7:
      xpc_object_t v6 = xpc_string_create((const char *)*MEMORY[0x1E4F4CF28]);
      if (!v6) {
        xpc_object_t v6 = xpc_null_create();
      }
      break;
    case 8:
      xpc_object_t v6 = xpc_string_create((const char *)*MEMORY[0x1E4F4CEB8]);
      if (!v6) {
        xpc_object_t v6 = xpc_null_create();
      }
      break;
    default:
      xpc_object_t v6 = xpc_string_create((const char *)*MEMORY[0x1E4F4CBC8]);
      if (!v6) {
        xpc_object_t v6 = xpc_null_create();
      }
      break;
  }
  xpc_dictionary_set_value(xdict, (const char *)*MEMORY[0x1E4F4C688], v6);
  xpc_object_t v7 = xpc_null_create();
  xpc_release(v6);
  xpc_release(v7);
  if (*(unsigned char *)(v2 + 228))
  {
    size_t v8 = (const char *)(v2 + 152);
    if (*(char *)(v2 + 175) < 0) {
      size_t v8 = *(const char **)v8;
    }
    xpc_object_t v9 = xpc_string_create(v8);
    if (!v9) {
      xpc_object_t v9 = xpc_null_create();
    }
    xpc_dictionary_set_value(xdict, (const char *)*MEMORY[0x1E4F4C240], v9);
    xpc_object_t v10 = xpc_null_create();
    xpc_release(v9);
    xpc_release(v10);
  }
  unsigned int v11 = 0;
  dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>((uint64_t *)(a1 + 40), &v11, &xdict);
  xpc_release(xdict);
}

void sub_1C57E5A84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
}

xpc_object_t xpc::dict::object_proxy::operator=@<X0>(uint64_t a1@<X0>, xpc_object_t *a2@<X1>, xpc_object_t *a3@<X8>)
{
  xpc_dictionary_set_value(**(xpc_object_t **)a1, *(const char **)(a1 + 8), *a2);
  *a3 = *a2;
  xpc_object_t result = xpc_null_create();
  *a2 = result;
  return result;
}

{
  xpc_object_t result;

  xpc_dictionary_set_value(**(xpc_object_t **)a1, *(const char **)(a1 + 8), *a2);
  *a3 = *a2;
  xpc_object_t result = xpc_null_create();
  *a2 = result;
  return result;
}

void *__copy_helper_block_e8_40c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE(uint64_t a1, uint64_t a2)
{
  xpc_object_t result = *(void **)(a2 + 40);
  if (result) {
    xpc_object_t result = _Block_copy(result);
  }
  *(void *)(a1 + 40) = result;
  return result;
}

void __destroy_helper_block_e8_40c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE(uint64_t a1)
{
  uint64_t v1 = *(const void **)(a1 + 40);
  if (v1) {
    _Block_release(v1);
  }
}

void ___ZN10BootModule10initializeEN8dispatch13group_sessionE_block_invoke_43(void *a1, xpc_object_t *a2, uint64_t *a3)
{
  uint64_t v69 = *MEMORY[0x1E4F143B8];
  xpc_object_t v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    xpc_object_t v7 = (uint64_t *)a1[4];
    size_t v8 = std::__shared_weak_count::lock(v4);
    v67 = v8;
    if (v8)
    {
      xpc_object_t v9 = v8;
      if (!a1[5]) {
        goto LABEL_115;
      }
      uint64_t v10 = MEMORY[0x1C8792D30](*a2);
      uint64_t v11 = MEMORY[0x1E4F14590];
      if (v10 != MEMORY[0x1E4F14590])
      {
        uint64_t v12 = v7[11];
        if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
        {
          LOWORD(buf) = 0;
          _os_log_error_impl(&dword_1C5767000, v12, OS_LOG_TYPE_ERROR, "No input is given", (uint8_t *)&buf, 2u);
        }
        goto LABEL_115;
      }
      unint64_t v62 = 0xAAAAAAAAAAAAAAAALL;
      __p = 0;
      uint64_t v64 = 0;
      uint64_t v65 = 0;
      long long buf = 0u;
      long long v57 = 0u;
      long long v58 = 0u;
      long long v59 = 0u;
      uint64_t v60 = 0;
      unint64_t v61 = 0xAAAAAAAAAAAAAAAALL;
      ResetInfo::fetchFromDict((void **)&buf, a2);
      if (SBYTE7(v57) < 0)
      {
        std::string::__init_copy_ctor_external(&v55, (const std::string::value_type *)buf, *((std::string::size_type *)&buf + 1));
      }
      else
      {
        *(_OWORD *)&v55.__r_.__value_.__l.__data_ = buf;
        v55.__r_.__value_.__r.__words[2] = v57;
      }
      char v13 = HIBYTE(v55.__r_.__value_.__r.__words[2]);
      if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        size_t size = HIBYTE(v55.__r_.__value_.__r.__words[2]);
      }
      else {
        size_t size = v55.__r_.__value_.__l.__size_;
      }
      if (size == strlen((const char *)*MEMORY[0x1E4F4C6E8]))
      {
        size_t v15 = (v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? &v55
            : (std::string *)v55.__r_.__value_.__r.__words[0];
        if (!memcmp(v15, (const void *)*MEMORY[0x1E4F4C6E8], size))
        {
          BOOL v19 = 1;
          if ((v13 & 0x80) == 0)
          {
LABEL_34:
            if (!v19)
            {
              uint64_t v24 = v7[11];
              if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
              {
                if (SBYTE7(v57) < 0)
                {
                  std::string::__init_copy_ctor_external(&v55, (const std::string::value_type *)buf, *((std::string::size_type *)&buf + 1));
                }
                else
                {
                  *(_OWORD *)&v55.__r_.__value_.__l.__data_ = buf;
                  v55.__r_.__value_.__r.__words[2] = v57;
                }
                uint64_t v32 = &v55;
                if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                  uint64_t v32 = (std::string *)v55.__r_.__value_.__r.__words[0];
                }
                LODWORD(__dst.__r_.__value_.__l.__data_) = 136315138;
                *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = (std::string::size_type)v32;
                _os_log_impl(&dword_1C5767000, v24, OS_LOG_TYPE_DEFAULT, "#I Invalid reset request [%s] ignoring it", (uint8_t *)&__dst, 0xCu);
                if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v55.__r_.__value_.__l.__data_);
                }
              }
              xpc_object_t v33 = xpc_null_create();
              uint64_t v34 = *a3;
              v55.__r_.__value_.__r.__words[0] = (std::string::size_type)v33;
              xpc_object_t v35 = xpc_null_create();
              (*(void (**)(uint64_t, uint64_t, std::string *))(v34 + 16))(v34, 3760250882, &v55);
              xpc_release(v55.__r_.__value_.__l.__data_);
              xpc_release(v35);
LABEL_68:
              if (SHIBYTE(v65) < 0)
              {
                operator delete(__p);
                if ((SHIBYTE(v60) & 0x80000000) == 0)
                {
LABEL_70:
                  if ((SHIBYTE(v58) & 0x80000000) == 0) {
                    goto LABEL_71;
                  }
                  goto LABEL_75;
                }
              }
              else if ((SHIBYTE(v60) & 0x80000000) == 0)
              {
                goto LABEL_70;
              }
              operator delete((void *)v59);
              if ((SHIBYTE(v58) & 0x80000000) == 0)
              {
LABEL_71:
                if ((SBYTE7(v57) & 0x80000000) == 0) {
                  goto LABEL_115;
                }
LABEL_76:
                operator delete((void *)buf);
LABEL_115:
                if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
                  std::__shared_weak_count::__release_weak(v9);
                }
                return;
              }
LABEL_75:
              operator delete(*((void **)&v57 + 1));
              if ((SBYTE7(v57) & 0x80000000) == 0) {
                goto LABEL_115;
              }
              goto LABEL_76;
            }
            if ((*(unsigned int (**)(uint64_t *))(*v7 + 88))(v7))
            {
              memset(&v55, 170, sizeof(v55));
              uint64_t v20 = (const void *)*MEMORY[0x1E4F4C638];
              size_t v21 = strlen((const char *)*MEMORY[0x1E4F4C638]);
              if (v21 >= 0x7FFFFFFFFFFFFFF8) {
                std::string::__throw_length_error[abi:ne180100]();
              }
              std::string::size_type v22 = v21;
              if (v21 >= 0x17)
              {
                uint64_t v26 = (v21 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v21 | 7) != 0x17) {
                  uint64_t v26 = v21 | 7;
                }
                uint64_t v27 = v26 + 1;
                p_dst = operator new(v26 + 1);
                __dst.__r_.__value_.__l.__size_ = v22;
                __dst.__r_.__value_.__r.__words[2] = v27 | 0x8000000000000000;
                __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
              }
              else
              {
                *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v21;
                p_dst = &__dst;
                if (!v21)
                {
LABEL_58:
                  p_dst[v22] = 0;
                  size_t v28 = (char *)operator new(0x28uLL);
                  strcpy(v28, " rejected; ABM is shutting down ");
                  size_t v29 = std::string::append(&__dst, v28, 0x20uLL);
                  long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
                  v55.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
                  *(_OWORD *)&v55.__r_.__value_.__l.__data_ = v30;
                  v29->__r_.__value_.__l.__size_ = 0;
                  v29->__r_.__value_.__r.__words[2] = 0;
                  v29->__r_.__value_.__r.__words[0] = 0;
                  operator delete(v28);
                  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
                  {
                    operator delete(__dst.__r_.__value_.__l.__data_);
                    uint64_t v31 = v7[11];
                    if (!os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
                    {
LABEL_60:
                      if (!*a3) {
                        goto LABEL_103;
                      }
                      goto LABEL_85;
                    }
                  }
                  else
                  {
                    uint64_t v31 = v7[11];
                    if (!os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT)) {
                      goto LABEL_60;
                    }
                  }
                  long long v36 = &v55;
                  if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                    long long v36 = (std::string *)v55.__r_.__value_.__r.__words[0];
                  }
                  LODWORD(__dst.__r_.__value_.__l.__data_) = 136315138;
                  *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = (std::string::size_type)v36;
                  _os_log_impl(&dword_1C5767000, v31, OS_LOG_TYPE_DEFAULT, "#I %s", (uint8_t *)&__dst, 0xCu);
                  if (!*a3)
                  {
LABEL_103:
                    if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
                    {
                      operator delete(v55.__r_.__value_.__l.__data_);
                      xpc_object_t v9 = v67;
                      if ((SHIBYTE(v65) & 0x80000000) == 0)
                      {
LABEL_105:
                        if ((SHIBYTE(v60) & 0x80000000) == 0) {
                          goto LABEL_106;
                        }
                        goto LABEL_112;
                      }
                    }
                    else
                    {
                      xpc_object_t v9 = v67;
                      if ((SHIBYTE(v65) & 0x80000000) == 0) {
                        goto LABEL_105;
                      }
                    }
                    operator delete(__p);
                    if ((SHIBYTE(v60) & 0x80000000) == 0)
                    {
LABEL_106:
                      if ((SHIBYTE(v58) & 0x80000000) == 0) {
                        goto LABEL_107;
                      }
                      goto LABEL_113;
                    }
LABEL_112:
                    operator delete((void *)v59);
                    if ((SHIBYTE(v58) & 0x80000000) == 0)
                    {
LABEL_107:
                      if ((SBYTE7(v57) & 0x80000000) == 0) {
                        goto LABEL_108;
                      }
                      goto LABEL_114;
                    }
LABEL_113:
                    operator delete(*((void **)&v57 + 1));
                    if ((SBYTE7(v57) & 0x80000000) == 0)
                    {
LABEL_108:
                      if (!v9) {
                        return;
                      }
                      goto LABEL_115;
                    }
LABEL_114:
                    operator delete((void *)buf);
                    if (!v9) {
                      return;
                    }
                    goto LABEL_115;
                  }
LABEL_85:
                  xpc_object_t v54 = xpc_null_create();
                  std::string::size_type v37 = HIBYTE(v55.__r_.__value_.__r.__words[2]);
                  if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                    std::string::size_type v37 = v55.__r_.__value_.__l.__size_;
                  }
                  if (!v37) {
                    goto LABEL_102;
                  }
                  xpc_object_t v38 = xpc_dictionary_create(0, 0, 0);
                  xpc_object_t v39 = v38;
                  if (v38)
                  {
                    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v38;
                  }
                  else
                  {
                    xpc_object_t v39 = xpc_null_create();
                    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v39;
                    if (!v39)
                    {
                      xpc_object_t v40 = xpc_null_create();
                      xpc_object_t v39 = 0;
                      goto LABEL_95;
                    }
                  }
                  if (MEMORY[0x1C8792D30](v39) == v11)
                  {
                    xpc_retain(v39);
LABEL_96:
                    xpc_release(v39);
                    xpc::dict::operator=(&v54, (xpc_object_t *)&__dst.__r_.__value_.__l.__data_);
                    xpc_release(__dst.__r_.__value_.__l.__data_);
                    if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                      v41 = &v55;
                    }
                    else {
                      v41 = (std::string *)v55.__r_.__value_.__r.__words[0];
                    }
                    xpc_object_t v52 = xpc_string_create((const char *)v41);
                    if (!v52) {
                      xpc_object_t v52 = xpc_null_create();
                    }
                    std::string::size_type v42 = *MEMORY[0x1E4F4C240];
                    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&v54;
                    __dst.__r_.__value_.__l.__size_ = v42;
                    xpc::dict::object_proxy::operator=((uint64_t)&__dst, &v52, &object);
                    xpc_release(object);
                    xpc_object_t object = 0;
                    xpc_release(v52);
                    xpc_object_t v52 = 0;
LABEL_102:
                    LODWORD(__dst.__r_.__value_.__l.__data_) = -534716415;
                    dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(a3, (unsigned int *)&__dst, &v54);
                    xpc_release(v54);
                    goto LABEL_103;
                  }
                  xpc_object_t v40 = xpc_null_create();
LABEL_95:
                  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v40;
                  goto LABEL_96;
                }
              }
              memmove(p_dst, v20, v22);
              goto LABEL_58;
            }
            v43[0] = MEMORY[0x1E4F143A8];
            v43[1] = 1174405120;
            v43[2] = ___ZN10BootModule10initializeEN8dispatch13group_sessionE_block_invoke_45;
            v43[3] = &__block_descriptor_tmp_48_0;
            v43[4] = v7;
            ResetInfo::ResetInfo(&v44, &buf);
            uint64_t v25 = (void *)*a3;
            if (*a3) {
              uint64_t v25 = _Block_copy(v25);
            }
            aBlock = v25;
            ctu::SharedSynchronizable<BootModule>::execute_wrapped(v7 + 15, (uint64_t)v43);
            if (aBlock) {
              _Block_release(aBlock);
            }
            if (v50 < 0)
            {
              operator delete(v49);
              if ((v48 & 0x80000000) == 0)
              {
LABEL_49:
                if ((v46 & 0x80000000) == 0) {
                  goto LABEL_50;
                }
                goto LABEL_79;
              }
            }
            else if ((v48 & 0x80000000) == 0)
            {
              goto LABEL_49;
            }
            operator delete(v47);
            if ((v46 & 0x80000000) == 0)
            {
LABEL_50:
              if ((SHIBYTE(v44.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                goto LABEL_68;
              }
LABEL_80:
              operator delete(v44.__r_.__value_.__l.__data_);
              goto LABEL_68;
            }
LABEL_79:
            operator delete(v45);
            if ((SHIBYTE(v44.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
              goto LABEL_68;
            }
            goto LABEL_80;
          }
LABEL_33:
          operator delete(v55.__r_.__value_.__l.__data_);
          goto LABEL_34;
        }
      }
      if (SBYTE7(v57) < 0)
      {
        std::string::__init_copy_ctor_external(&__dst, (const std::string::value_type *)buf, *((std::string::size_type *)&buf + 1));
      }
      else
      {
        *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = buf;
        __dst.__r_.__value_.__r.__words[2] = v57;
      }
      int v16 = SHIBYTE(__dst.__r_.__value_.__r.__words[2]);
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        size_t v17 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
      }
      else {
        size_t v17 = __dst.__r_.__value_.__l.__size_;
      }
      if (v17 == strlen((const char *)*MEMORY[0x1E4F4C6F0]))
      {
        if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v18 = &__dst;
        }
        else {
          uint64_t v18 = (std::string *)__dst.__r_.__value_.__r.__words[0];
        }
        BOOL v19 = memcmp(v18, (const void *)*MEMORY[0x1E4F4C6F0], v17) == 0;
        if ((v16 & 0x80000000) == 0)
        {
LABEL_32:
          if ((*((unsigned char *)&v55.__r_.__value_.__s + 23) & 0x80) == 0) {
            goto LABEL_34;
          }
          goto LABEL_33;
        }
      }
      else
      {
        BOOL v19 = 0;
        if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_32;
        }
      }
      operator delete(__dst.__r_.__value_.__l.__data_);
      goto LABEL_32;
    }
  }
}

void sub_1C57E636C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,xpc_object_t object,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,char a40)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void **xpc::dict::operator=(void **a1, xpc_object_t *a2)
{
  xpc_object_t v3 = *a2;
  *a2 = xpc_null_create();
  xpc_object_t v4 = *a1;
  *a1 = v3;
  xpc_release(v4);
  return a1;
}

void ___ZN10BootModule10initializeEN8dispatch13group_sessionE_block_invoke_45(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  xpc_object_t v3 = (long long *)(a1 + 40);
  ResetInfo::ResetInfo(&v17, (long long *)(a1 + 40));
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 1174405120;
  v7[2] = ___ZN10BootModule10initializeEN8dispatch13group_sessionE_block_invoke_2_46;
  v7[3] = &__block_descriptor_tmp_47_0;
  ResetInfo::ResetInfo(&v8, v3);
  xpc_object_t v4 = *(void **)(a1 + 152);
  if (v4) {
    xpc_object_t v4 = _Block_copy(v4);
  }
  aBlock = v4;
  xpc_object_t v5 = _Block_copy(v7);
  int v16 = v5;
  BootModule::requestReset(v2, (long long *)&v17, &v16);
  if (v5) {
    _Block_release(v5);
  }
  if (v23 < 0)
  {
    operator delete(__p);
    if ((v21 & 0x80000000) == 0)
    {
LABEL_7:
      if ((v19 & 0x80000000) == 0) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
  }
  else if ((v21 & 0x80000000) == 0)
  {
    goto LABEL_7;
  }
  operator delete(v20);
  if ((v19 & 0x80000000) == 0)
  {
LABEL_8:
    if ((SHIBYTE(v17.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_9;
    }
LABEL_14:
    operator delete(v17.__r_.__value_.__l.__data_);
    xpc_object_t v6 = aBlock;
    if (!aBlock) {
      goto LABEL_16;
    }
    goto LABEL_15;
  }
LABEL_13:
  operator delete(v18);
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_14;
  }
LABEL_9:
  xpc_object_t v6 = aBlock;
  if (aBlock) {
LABEL_15:
  }
    _Block_release(v6);
LABEL_16:
  if (v14 < 0)
  {
    operator delete(v13);
    if ((v12 & 0x80000000) == 0)
    {
LABEL_18:
      if ((v10 & 0x80000000) == 0) {
        goto LABEL_19;
      }
      goto LABEL_23;
    }
  }
  else if ((v12 & 0x80000000) == 0)
  {
    goto LABEL_18;
  }
  operator delete(v11);
  if ((v10 & 0x80000000) == 0)
  {
LABEL_19:
    if ((SHIBYTE(v8.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
LABEL_24:
    operator delete(v8.__r_.__value_.__l.__data_);
    return;
  }
LABEL_23:
  operator delete(v9);
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_24;
  }
}

void sub_1C57E6678(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *aBlock,uint64_t a28,void *a29)
{
  if (v30) {
    _Block_release(v30);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  ResetInfo::~ResetInfo(v29);
  ResetInfo::~ResetInfo(&a29);
  _Unwind_Resume(a1);
}

void sub_1C57E66B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29)
{
}

void ___ZN10BootModule10initializeEN8dispatch13group_sessionE_block_invoke_2_46(uint64_t a1, unsigned int a2, uint64_t *a3)
{
  unsigned int v18 = a2;
  xpc_object_t v5 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v6 = v5;
  if (v5)
  {
    xpc_object_t xdict = v5;
  }
  else
  {
    xpc_object_t v6 = xpc_null_create();
    xpc_object_t xdict = v6;
    if (!v6)
    {
      xpc_object_t v7 = xpc_null_create();
      xpc_object_t v6 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1C8792D30](v6) == MEMORY[0x1E4F14590])
  {
    xpc_retain(v6);
    goto LABEL_9;
  }
  xpc_object_t v7 = xpc_null_create();
LABEL_8:
  xpc_object_t xdict = v7;
LABEL_9:
  xpc_release(v6);
  if (*((char *)a3 + 23) < 0)
  {
    if (!a3[1]) {
      goto LABEL_17;
    }
    a3 = (uint64_t *)*a3;
  }
  else if (!*((unsigned char *)a3 + 23))
  {
    goto LABEL_17;
  }
  xpc_object_t v8 = xpc_string_create((const char *)a3);
  if (!v8) {
    xpc_object_t v8 = xpc_null_create();
  }
  xpc_dictionary_set_value(xdict, (const char *)*MEMORY[0x1E4F4C240], v8);
  xpc_object_t v9 = xpc_null_create();
  xpc_release(v8);
  xpc_release(v9);
LABEL_17:
  uint64_t v10 = *(void *)(a1 + 104);
  uint64_t v11 = operator new(0x38uLL);
  v11[8] = 0;
  *(void *)uint64_t v11 = 0;
  *((void *)v11 + 1) = 0;
  *((void *)v11 + 2) = v20;
  char v19 = v11;
  v20[0] = v11;
  *((unsigned char *)v11 + 24) = 1;
  v20[1] = (void *)1;
  *((void *)v11 + 5) = v10;
  *((void *)v11 + 6) = 0xAAAAAAAA00000000;
  Timestamp::asString((uint64_t)&v19, 0, 9, __p);
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&v19, v20[0]);
  if (v16 >= 0) {
    char v12 = __p;
  }
  else {
    char v12 = (void **)__p[0];
  }
  xpc_object_t v13 = xpc_string_create((const char *)v12);
  if (!v13) {
    xpc_object_t v13 = xpc_null_create();
  }
  xpc_dictionary_set_value(xdict, (const char *)*MEMORY[0x1E4F4C4C8], v13);
  xpc_object_t v14 = xpc_null_create();
  xpc_release(v13);
  xpc_release(v14);
  if (v16 < 0) {
    operator delete(__p[0]);
  }
  dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int &,xpc::dict&>((uint64_t *)(a1 + 144), &v18, &xdict);
  xpc_release(xdict);
}

void sub_1C57E68D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, xpc_object_t object, uint64_t a13, char a14, uint64_t a15)
{
}

void *__copy_helper_block_e8_32c14_ZTS9ResetInfo144c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE(uint64_t a1, uint64_t a2)
{
  ResetInfo::ResetInfo((std::string *)(a1 + 32), (long long *)(a2 + 32));
  xpc_object_t result = *(void **)(a2 + 144);
  if (result) {
    xpc_object_t result = _Block_copy(result);
  }
  *(void *)(a1 + 144) = result;
  return result;
}

void __destroy_helper_block_e8_32c14_ZTS9ResetInfo144c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 144);
  if (v2) {
    _Block_release(v2);
  }
  if (*(char *)(a1 + 143) < 0)
  {
    operator delete(*(void **)(a1 + 120));
    if ((*(char *)(a1 + 103) & 0x80000000) == 0)
    {
LABEL_5:
      if ((*(char *)(a1 + 79) & 0x80000000) == 0) {
        goto LABEL_6;
      }
LABEL_10:
      operator delete(*(void **)(a1 + 56));
      if ((*(char *)(a1 + 55) & 0x80000000) == 0) {
        return;
      }
      goto LABEL_11;
    }
  }
  else if ((*(char *)(a1 + 103) & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(*(void **)(a1 + 80));
  if (*(char *)(a1 + 79) < 0) {
    goto LABEL_10;
  }
LABEL_6:
  if ((*(char *)(a1 + 55) & 0x80000000) == 0) {
    return;
  }
LABEL_11:
  xpc_object_t v3 = *(void **)(a1 + 32);

  operator delete(v3);
}

void *__copy_helper_block_e8_40c14_ZTS9ResetInfo152c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE(uint64_t a1, uint64_t a2)
{
  ResetInfo::ResetInfo((std::string *)(a1 + 40), (long long *)(a2 + 40));
  xpc_object_t result = *(void **)(a2 + 152);
  if (result) {
    xpc_object_t result = _Block_copy(result);
  }
  *(void *)(a1 + 152) = result;
  return result;
}

void __destroy_helper_block_e8_40c14_ZTS9ResetInfo152c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 152);
  if (v2) {
    _Block_release(v2);
  }
  if (*(char *)(a1 + 151) < 0)
  {
    operator delete(*(void **)(a1 + 128));
    if ((*(char *)(a1 + 111) & 0x80000000) == 0)
    {
LABEL_5:
      if ((*(char *)(a1 + 87) & 0x80000000) == 0) {
        goto LABEL_6;
      }
LABEL_10:
      operator delete(*(void **)(a1 + 64));
      if ((*(char *)(a1 + 63) & 0x80000000) == 0) {
        return;
      }
      goto LABEL_11;
    }
  }
  else if ((*(char *)(a1 + 111) & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(*(void **)(a1 + 88));
  if (*(char *)(a1 + 87) < 0) {
    goto LABEL_10;
  }
LABEL_6:
  if ((*(char *)(a1 + 63) & 0x80000000) == 0) {
    return;
  }
LABEL_11:
  xpc_object_t v3 = *(void **)(a1 + 40);

  operator delete(v3);
}

void ___ZN10BootModule10initializeEN8dispatch13group_sessionE_block_invoke_52(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  xpc_object_t v4 = *(std::__shared_weak_count **)(a1 + 40);
  if (v4)
  {
    xpc_object_t v6 = std::__shared_weak_count::lock(v4);
    xpc_object_t v14 = v6;
    if (v6)
    {
      if (!*(void *)(a1 + 32))
      {
        xpc_object_t v9 = v6;
LABEL_14:
        if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
        return;
      }
      xpc_object_t v7 = xpc_dictionary_create(0, 0, 0);
      xpc_object_t v8 = v7;
      if (v7)
      {
        xpc_object_t object = v7;
      }
      else
      {
        xpc_object_t v8 = xpc_null_create();
        xpc_object_t object = v8;
        if (!v8)
        {
          xpc_object_t v10 = xpc_null_create();
          xpc_object_t v8 = 0;
          goto LABEL_12;
        }
      }
      if (MEMORY[0x1C8792D30](v8) == MEMORY[0x1E4F14590])
      {
        xpc_retain(v8);
        goto LABEL_13;
      }
      xpc_object_t v10 = xpc_null_create();
LABEL_12:
      xpc_object_t object = v10;
LABEL_13:
      xpc_release(v8);
      unsigned int v11 = 0;
      dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(a3, &v11, &object);
      xpc_release(object);
      xpc_object_t v9 = v14;
      if (!v14) {
        return;
      }
      goto LABEL_14;
    }
  }
}

void sub_1C57E6C3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, char a11)
{
}

uint64_t __copy_helper_block_e8_32c35_ZTSNSt3__18weak_ptrI10BootModuleEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c35_ZTSNSt3__18weak_ptrI10BootModuleEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void ___ZN10BootModule10initializeEN8dispatch13group_sessionE_block_invoke_54(void *a1, void *a2, void *a3)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  xpc_object_t v4 = (std::__shared_weak_count *)a1[6];
  if (!v4) {
    return;
  }
  xpc_object_t v7 = (void *)a1[4];
  xpc_object_t v8 = std::__shared_weak_count::lock(v4);
  uint64_t v26 = v8;
  if (!v8) {
    return;
  }
  xpc_object_t v9 = v8;
  if (!a1[5]) {
    goto LABEL_18;
  }
  if (MEMORY[0x1C8792D30](*a2) != MEMORY[0x1E4F14590])
  {
    xpc_object_t v10 = v7[11];
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      uint64_t v25 = *MEMORY[0x1E4F4C9D8];
      *(_DWORD *)xpc_object_t object = 136315138;
      *(void *)&object[4] = v25;
      _os_log_error_impl(&dword_1C5767000, v10, OS_LOG_TYPE_ERROR, "No input is given for %s", object, 0xCu);
      if (!*a3)
      {
LABEL_18:
        if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
        return;
      }
    }
    else if (!*a3)
    {
      goto LABEL_18;
    }
    xpc_object_t v11 = xpc_null_create();
    char v12 = (void (**)(const void *, uint64_t, unsigned char *))*a3;
    *(void *)xpc_object_t object = v11;
    xpc_object_t v13 = xpc_null_create();
    v12[2](v12, 3760250880, object);
    xpc_release(*(xpc_object_t *)object);
    xpc_release(v13);
    goto LABEL_18;
  }
  xpc_object_t v14 = (xpc_object_t)*a2;
  if (v14)
  {
    xpc_retain(v14);
    size_t v15 = (void (**)(const void *, uint64_t, unsigned char *))*a3;
    if (*a3) {
      goto LABEL_10;
    }
  }
  else
  {
    xpc_object_t v14 = xpc_null_create();
    size_t v15 = (void (**)(const void *, uint64_t, unsigned char *))*a3;
    if (*a3)
    {
LABEL_10:
      char v16 = _Block_copy(v15);
      std::string v17 = (std::__shared_weak_count *)v7[16];
      if (!v17) {
LABEL_23:
      }
        std::__throw_bad_weak_ptr[abi:ne180100]();
      goto LABEL_14;
    }
  }
  char v16 = 0;
  std::string v17 = (std::__shared_weak_count *)v7[16];
  if (!v17) {
    goto LABEL_23;
  }
LABEL_14:
  uint64_t v18 = v7[15];
  char v19 = std::__shared_weak_count::lock(v17);
  if (!v19) {
    goto LABEL_23;
  }
  uint64_t v20 = v19;
  char v21 = operator new(0x18uLL);
  void *v21 = v7;
  v21[1] = v14;
  xpc_object_t v22 = xpc_null_create();
  v21[2] = v16;
  char v23 = v7[17];
  atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v24 = operator new(0x18uLL);
  *uint64_t v24 = v21;
  v24[1] = v18;
  v24[2] = v20;
  dispatch_async_f(v23, v24, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI10BootModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb1_EUb2_E3__1EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_);
  if (!atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
  xpc_release(v22);
  xpc_object_t v9 = v26;
  if (v26) {
    goto LABEL_18;
  }
}

void sub_1C57E6F38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, xpc_object_t object)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void ___ZN10BootModule10initializeEN8dispatch13group_sessionE_block_invoke_58(void *a1, uint64_t a2, ctu **a3)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  xpc_object_t v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    uint64_t v6 = a1[4];
    xpc_object_t v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      xpc_object_t v9 = v7;
      if (a1[5])
      {
        ctu::cf_to_xpc((uint64_t *)object, *a3, v8);
        xpc_object_t v10 = *(xpc_object_t *)object;
        uint64_t v11 = MEMORY[0x1E4F14590];
        if (*(void *)object && MEMORY[0x1C8792D30](*(void *)object) == v11) {
          xpc_retain(v10);
        }
        else {
          xpc_object_t v10 = xpc_null_create();
        }
        xpc_release(*(xpc_object_t *)object);
        if (MEMORY[0x1C8792D30](v10) == v11)
        {
          xpc_object_t value = xpc_dictionary_get_value(v10, (const char *)*MEMORY[0x1E4FB9AB0]);
          *(void *)xpc_object_t object = value;
          if (value) {
            xpc_retain(value);
          }
          else {
            *(void *)xpc_object_t object = xpc_null_create();
          }
          *(unsigned char *)(v6 + 192) = xpc::dyn_cast_or_default((xpc *)object, 0);
          xpc_release(*(xpc_object_t *)object);
          xpc_object_t v13 = *(NSObject **)(v6 + 88);
          if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
          {
            if (*(unsigned char *)(v6 + 192)) {
              xpc_object_t v14 = "started";
            }
            else {
              xpc_object_t v14 = "stopped";
            }
            *(_DWORD *)xpc_object_t object = 136315138;
            *(void *)&object[4] = v14;
            _os_log_impl(&dword_1C5767000, v13, OS_LOG_TYPE_DEFAULT, "#I Transport client %s", object, 0xCu);
          }
        }
        xpc_release(v10);
      }
      if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
}

void sub_1C57E7178(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, xpc_object_t object)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>::~callback(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 8);
  if (v2) {
    dispatch_release(v2);
  }
  if (*(void *)a1) {
    _Block_release(*(const void **)a1);
  }
  return a1;
}

void BootModule::start(void *a1, dispatch_object_t *a2)
{
  xpc_object_t v3 = (std::__shared_weak_count *)a1[16];
  if (!v3 || (uint64_t v5 = a1[15], (v6 = std::__shared_weak_count::lock(v3)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  xpc_object_t v7 = v6;
  p_shared_weak_owners = &v6->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v7);
  }
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  xpc_object_t v9 = *a2;
  if (*a2)
  {
    dispatch_retain(*a2);
    dispatch_group_enter(v9);
  }
  xpc_object_t v10 = (std::__shared_weak_count *)a1[16];
  if (!v10 || (v11 = a1[15], (char v12 = std::__shared_weak_count::lock(v10)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  xpc_object_t v13 = v12;
  xpc_object_t v14 = operator new(0x20uLL);
  void *v14 = v5;
  v14[1] = v7;
  v14[2] = v9;
  v14[3] = a1;
  size_t v15 = a1[17];
  atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v16 = operator new(0x18uLL);
  *uint64_t v16 = v14;
  v16[1] = v11;
  v16[2] = v13;
  dispatch_async_f(v15, v16, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<BootModule>::execute_wrapped<BootModule::start(dispatch::group_session)::$_0>(BootModule::start(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<BootModule::start(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<BootModule::start(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke);
  if (!atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }

  std::__shared_weak_count::__release_weak(v7);
}

void BootModule::finishInitialization_sync(BootModule *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 16);
  if (!v2 || (v3 = *((void *)this + 15), (xpc_object_t v4 = std::__shared_weak_count::lock(v2)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v5 = v4;
  atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v5);
  }
  uint64_t v6 = (const char *)(*(uint64_t (**)(BootModule *))(*(void *)this + 16))(this);
  size_t v7 = strlen(v6);
  if (v7 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  xpc_object_t v8 = (void *)v7;
  if (v7 >= 0x17)
  {
    uint64_t v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17) {
      uint64_t v10 = v7 | 7;
    }
    uint64_t v11 = v10 + 1;
    xpc_object_t v9 = (void **)operator new(v10 + 1);
    __dst[1] = v8;
    unint64_t v60 = v11 | 0x8000000000000000;
    __dst[0] = v9;
  }
  else
  {
    HIBYTE(v60) = v7;
    xpc_object_t v9 = __dst;
    if (!v7) {
      goto LABEL_13;
    }
  }
  memmove(v9, v6, (size_t)v8);
LABEL_13:
  *((unsigned char *)v8 + (void)v9) = 0;
  long long v58 = 0;
  AppleBasebandManager::create();
  long long v12 = v61;
  long long v61 = 0uLL;
  xpc_object_t v13 = (std::__shared_weak_count *)*((void *)this + 59);
  *((_OWORD *)this + 29) = v12;
  if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  xpc_object_t v14 = (std::__shared_weak_count *)*((void *)&v61 + 1);
  if (!*((void *)&v61 + 1)
    || atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v61 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    size_t v15 = v58;
    if (!v58) {
      goto LABEL_20;
    }
    goto LABEL_19;
  }
  ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
  std::__shared_weak_count::__release_weak(v14);
  size_t v15 = v58;
  if (v58) {
LABEL_19:
  }
    CFRelease(v15);
LABEL_20:
  if (SHIBYTE(v60) < 0) {
    operator delete(__dst[0]);
  }
  uint64_t v16 = abm::kEventTransportIsReady[0];
  size_t v17 = strlen(abm::kEventTransportIsReady[0]);
  if (v17 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v18 = (void *)v17;
  if (v17 >= 0x17)
  {
    uint64_t v20 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v17 | 7) != 0x17) {
      uint64_t v20 = v17 | 7;
    }
    uint64_t v21 = v20 + 1;
    char v19 = (void **)operator new(v20 + 1);
    v56[1] = v18;
    unint64_t v57 = v21 | 0x8000000000000000;
    v56[0] = v19;
    goto LABEL_29;
  }
  HIBYTE(v57) = v17;
  char v19 = v56;
  if (v17) {
LABEL_29:
  }
    memmove(v19, v16, (size_t)v18);
  *((unsigned char *)v18 + (void)v19) = 0;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN10BootModule25finishInitialization_syncEv_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_75_0;
  aBlock[4] = this;
  void aBlock[5] = v3;
  v53 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  xpc_object_t v22 = _Block_copy(aBlock);
  char v23 = *((void *)this + 17);
  if (v23) {
    dispatch_retain(*((dispatch_object_t *)this + 17));
  }
  xpc_object_t v54 = v22;
  dispatch_object_t v55 = v23;
  AppleBasebandManager::setEventHandler();
  if (v55) {
    dispatch_release(v55);
  }
  if (v54) {
    _Block_release(v54);
  }
  if (SHIBYTE(v57) < 0) {
    operator delete(v56[0]);
  }
  uint64_t v24 = (const void *)*MEMORY[0x1E4F4CC38];
  size_t v25 = strlen((const char *)*MEMORY[0x1E4F4CC38]);
  if (v25 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v26 = (void *)v25;
  if (v25 >= 0x17)
  {
    uint64_t v28 = (v25 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v25 | 7) != 0x17) {
      uint64_t v28 = v25 | 7;
    }
    uint64_t v29 = v28 + 1;
    uint64_t v27 = operator new(v28 + 1);
    __p[1] = v26;
    unint64_t v51 = v29 | 0x8000000000000000;
    __p[0] = v27;
    goto LABEL_45;
  }
  HIBYTE(v51) = v25;
  uint64_t v27 = __p;
  if (v25) {
LABEL_45:
  }
    memmove(v27, v24, (size_t)v26);
  *((unsigned char *)v26 + (void)v27) = 0;
  v46[0] = MEMORY[0x1E4F143A8];
  v46[1] = 1174405120;
  v46[2] = ___ZN10BootModule25finishInitialization_syncEv_block_invoke_76;
  v46[3] = &__block_descriptor_tmp_79_1;
  v46[4] = this;
  v46[5] = v3;
  uint64_t v47 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  long long v30 = _Block_copy(v46);
  uint64_t v31 = *((void *)this + 17);
  if (v31) {
    dispatch_retain(*((dispatch_object_t *)this + 17));
  }
  char v48 = v30;
  dispatch_object_t object = v31;
  AppleBasebandManager::setEventHandler();
  if (object) {
    dispatch_release(object);
  }
  if (v48) {
    _Block_release(v48);
  }
  if (SHIBYTE(v51) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v32 = (const void *)*MEMORY[0x1E4F4D0F8];
  size_t v33 = strlen((const char *)*MEMORY[0x1E4F4D0F8]);
  if (v33 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v34 = (void *)v33;
  if (v33 >= 0x17)
  {
    uint64_t v36 = (v33 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v33 | 7) != 0x17) {
      uint64_t v36 = v33 | 7;
    }
    uint64_t v37 = v36 + 1;
    xpc_object_t v35 = operator new(v36 + 1);
    v44[1] = v34;
    unint64_t v45 = v37 | 0x8000000000000000;
    v44[0] = v35;
    goto LABEL_61;
  }
  HIBYTE(v45) = v33;
  xpc_object_t v35 = v44;
  if (v33) {
LABEL_61:
  }
    memmove(v35, v32, (size_t)v34);
  *((unsigned char *)v34 + (void)v35) = 0;
  v40[0] = MEMORY[0x1E4F143A8];
  v40[1] = 1174405120;
  v40[2] = ___ZN10BootModule25finishInitialization_syncEv_block_invoke_80;
  v40[3] = &__block_descriptor_tmp_83;
  v40[4] = this;
  v40[5] = v3;
  v41 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  xpc_object_t v38 = _Block_copy(v40);
  xpc_object_t v39 = *((void *)this + 17);
  if (v39) {
    dispatch_retain(*((dispatch_object_t *)this + 17));
  }
  std::string::size_type v42 = v38;
  dispatch_object_t v43 = v39;
  AppleBasebandManager::setEventHandler();
  if (v43) {
    dispatch_release(v43);
  }
  if (v42) {
    _Block_release(v42);
  }
  if (SHIBYTE(v45) < 0) {
    operator delete(v44[0]);
  }
  AppleBasebandManager::eventsOn(*((AppleBasebandManager **)this + 58));
  if (v41) {
    std::__shared_weak_count::__release_weak(v41);
  }
  if (v47) {
    std::__shared_weak_count::__release_weak(v47);
  }
  if (v53) {
    std::__shared_weak_count::__release_weak(v53);
  }
  std::__shared_weak_count::__release_weak(v5);
}

void sub_1C57E79D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,std::__shared_weak_count *a30,char a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,std::__shared_weak_count *a45)
{
  if (a15) {
    std::__shared_weak_count::__release_weak(a15);
  }
  if (a30) {
    std::__shared_weak_count::__release_weak(a30);
  }
  if (a45)
  {
    std::__shared_weak_count::__release_weak(a45);
    std::__shared_weak_count::__release_weak(v45);
    _Unwind_Resume(a1);
  }
  std::__shared_weak_count::__release_weak(v45);
  _Unwind_Resume(a1);
}

void ___ZN10BootModule25finishInitialization_syncEv_block_invoke(void *a1)
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (!v2) {
    return;
  }
  uint64_t v3 = (BootModule *)a1[4];
  xpc_object_t v4 = std::__shared_weak_count::lock(v2);
  std::string v44 = v4;
  if (!v4) {
    return;
  }
  uint64_t v5 = v4;
  if (!a1[5]) {
    goto LABEL_58;
  }
  uint64_t v6 = *((int *)v3 + 114);
  if (v6 != 3)
  {
    uint64_t v16 = *((void *)v3 + 11);
    if (!os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_58;
    }
    if (v6 > 8) {
      size_t v17 = "Unknown";
    }
    else {
      size_t v17 = off_1E65174B0[v6];
    }
    uint64_t v34 = *MEMORY[0x1E4F4CAE8];
    *(_DWORD *)state = 136315394;
    *(void *)&state[4] = v17;
    *(_WORD *)&state[12] = 2080;
    *(void *)&state[14] = v34;
    _os_log_impl(&dword_1C5767000, v16, OS_LOG_TYPE_DEFAULT, "#I State is '%s'; don't send '%s' event", state, 0x16u);
    if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
LABEL_59:
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      return;
    }
    return;
  }
  dispatch_object_t object = _os_activity_create(&dword_1C5767000, "Baseband state: transport is ready", MEMORY[0x1E4F144F0], OS_ACTIVITY_FLAG_DEFAULT);
  memset(state, 170, 16);
  os_activity_scope_enter((os_activity_t)object, (os_activity_scope_state_t)state);
  os_activity_scope_leave((os_activity_scope_state_t)state);
  (*(void (**)(BootModule *, uint64_t))(*(void *)v3 + 96))(v3, 4);
  CFTypeRef cf = 0;
  uint64_t v7 = *MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  uint64_t v10 = Mutable;
  if (Mutable) {
    CFTypeRef cf = Mutable;
  }
  uint64_t v11 = (const __CFString **)*MEMORY[0x1E4F4C688];
  *(void *)state = 0;
  ctu::cf::convert_copy((ctu::cf *)state, v11, (const char *)0x8000100, v7, v9);
  long long v12 = (const __CFString **)*MEMORY[0x1E4F4CAE8];
  xpc_object_t v13 = *(const void **)state;
  uint64_t v46 = *(void *)state;
  *(void *)state = 0;
  ctu::cf::convert_copy((ctu::cf *)state, v12, (const char *)0x8000100, v7, v14);
  size_t v15 = *(const void **)state;
  unint64_t v45 = *(__CFDictionary **)state;
  if (v13 && *(void *)state)
  {
    CFDictionarySetValue(v10, v13, *(const void **)state);
  }
  else if (!*(void *)state)
  {
    goto LABEL_15;
  }
  CFRelease(v15);
LABEL_15:
  if (v13) {
    CFRelease(v13);
  }
  unint64_t v45 = (__CFDictionary *)0xAAAAAAAAAAAAAAAALL;
  BootModule::calculateBootStatistics_sync(v3, &v45);
  char v19 = v45;
  if (v45) {
    uint64_t v20 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
  }
  else {
    uint64_t v20 = 0;
  }
  if (v20)
  {
    uint64_t v21 = (const __CFString **)*MEMORY[0x1E4F4CC50];
    *(void *)state = 0;
    ctu::cf::convert_copy((ctu::cf *)state, v21, (const char *)0x8000100, v7, v18);
    xpc_object_t v22 = *(const void **)state;
    uint64_t v46 = *(void *)state;
    *(void *)state = v19;
    if (v19)
    {
      CFRetain(v19);
      if (v22) {
        CFDictionarySetValue(v10, v22, v19);
      }
      CFRelease(v19);
    }
    if (v22) {
      CFRelease(v22);
    }
  }
  char v23 = (const void *)*MEMORY[0x1E4F4CEF8];
  size_t v24 = strlen((const char *)*MEMORY[0x1E4F4CEF8]);
  if (v24 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v25 = (void *)v24;
  if (v24 >= 0x17)
  {
    uint64_t v27 = (v24 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v24 | 7) != 0x17) {
      uint64_t v27 = v24 | 7;
    }
    uint64_t v28 = v27 + 1;
    uint64_t v26 = (void **)operator new(v27 + 1);
    __dst[1] = v25;
    unint64_t v40 = v28 | 0x8000000000000000;
    __dst[0] = v26;
  }
  else
  {
    HIBYTE(v40) = v24;
    uint64_t v26 = __dst;
    if (!v24) {
      goto LABEL_35;
    }
  }
  memmove(v26, v23, (size_t)v25);
LABEL_35:
  *((unsigned char *)v25 + (void)v26) = 0;
  CFTypeRef v29 = cf;
  if (cf && (CFTypeID v30 = CFGetTypeID(cf), v30 == CFDictionaryGetTypeID()))
  {
    CFTypeRef v38 = v29;
    CFRetain(v29);
  }
  else
  {
    CFTypeRef v38 = 0;
  }
  v35[0] = MEMORY[0x1E4F143A8];
  v35[1] = 1174405120;
  v35[2] = ___ZN10BootModule25finishInitialization_syncEv_block_invoke_2;
  v35[3] = &__block_descriptor_tmp_71_0;
  uint64_t v32 = a1[5];
  uint64_t v31 = (std::__shared_weak_count *)a1[6];
  v35[4] = v3;
  v35[5] = v32;
  uint64_t v36 = v31;
  if (v31) {
    atomic_fetch_add_explicit(&v31->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  aBlock = _Block_copy(v35);
  Service::broadcastEvent((uint64_t)v3, (uint64_t)__dst, &v38, (const void **)&aBlock);
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v38) {
    CFRelease(v38);
  }
  if (SHIBYTE(v40) < 0) {
    operator delete(__dst[0]);
  }
  size_t v33 = *((void *)v3 + 26);
  *((void *)v3 + 26) = 0;
  if (v33)
  {
    dispatch_group_leave(v33);
    dispatch_release(v33);
  }
  if (v36) {
    std::__shared_weak_count::__release_weak(v36);
  }
  if (v45) {
    CFRelease(v45);
  }
  if (v29) {
    CFRelease(v29);
  }
  if (object) {
    os_release(object);
  }
  uint64_t v5 = v44;
  if (v44)
  {
LABEL_58:
    if (atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
      return;
    }
    goto LABEL_59;
  }
}

void sub_1C57E7FF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, void *aBlock, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,const void *a24,void *a25,__int16 a26,char a27,char a28)
{
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)(v28 - 80));
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)(v28 - 88));
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)(v28 - 96));
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(&a24);
  ctu::os::scoped_activity::~scoped_activity(&a25);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a26);
  _Unwind_Resume(a1);
}

void BootModule::calculateBootStatistics_sync(BootModule *this@<X0>, __CFDictionary **a2@<X8>)
{
  v19[1] = *MEMORY[0x1E4F143B8];
  int v4 = TelephonyUtilSystemMachTime();
  uint64_t v5 = *((void *)this + 29);
  unsigned int v6 = v4 - v5;
  int v7 = *((_DWORD *)this + 60);
  xpc_object_t v8 = *((void *)this + 11);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(v19[0]) = 67109120;
    HIDWORD(v19[0]) = v4 - v5;
    _os_log_impl(&dword_1C5767000, v8, OS_LOG_TYPE_DEFAULT, "#I Baseband total boot time = %u millisec", (uint8_t *)v19, 8u);
    xpc_object_t v8 = *((void *)this + 11);
    unsigned int v9 = v7 - v5;
    if (!os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
LABEL_3:
      unsigned int v10 = v4 - v7;
      if (!os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_4;
      }
      goto LABEL_13;
    }
  }
  else
  {
    unsigned int v9 = v7 - v5;
    if (!os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_3;
    }
  }
  LODWORD(v19[0]) = 67109120;
  HIDWORD(v19[0]) = v9;
  _os_log_impl(&dword_1C5767000, v8, OS_LOG_TYPE_DEFAULT, "#I Baseband image push time = %u millisec", (uint8_t *)v19, 8u);
  xpc_object_t v8 = *((void *)this + 11);
  unsigned int v10 = v4 - v7;
  if (!os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
LABEL_4:
    if (!os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_13:
  LODWORD(v19[0]) = 67109120;
  HIDWORD(v19[0]) = v10;
  _os_log_impl(&dword_1C5767000, v8, OS_LOG_TYPE_DEFAULT, "#I Baseband engage time     = %u millisec", (uint8_t *)v19, 8u);
  xpc_object_t v8 = *((void *)this + 11);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
LABEL_5:
    int v11 = *((_DWORD *)this + 56);
    LODWORD(v19[0]) = 67109120;
    HIDWORD(v19[0]) = v11;
    _os_log_impl(&dword_1C5767000, v8, OS_LOG_TYPE_DEFAULT, "#I Baseband boot attempts   = %u", (uint8_t *)v19, 8u);
  }
LABEL_6:
  BootModule::submitMetric_sync(this, *((_DWORD *)this + 56), v6, 1);
  *((_DWORD *)this + 56) = 0;
  v19[0] = 0;
  CFAllocatorRef v12 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  size_t v15 = Mutable;
  if (Mutable) {
    v19[0] = Mutable;
  }
  ctu::cf::update<char const*,unsigned int>(Mutable, (const __CFString **)*MEMORY[0x1E4F4C550], v6, v12, v14);
  ctu::cf::update<char const*,unsigned int>(v15, (const __CFString **)*MEMORY[0x1E4F4CB48], v9, v12, v16);
  ctu::cf::update<char const*,unsigned int>(v15, (const __CFString **)*MEMORY[0x1E4F4C7A8], v10, v12, v17);
  if (v15)
  {
    CFTypeID v18 = CFGetTypeID(v15);
    if (v18 == CFDictionaryGetTypeID())
    {
      *a2 = v15;
      CFRetain(v15);
    }
    else
    {
      *a2 = 0;
    }
    CFRelease(v15);
  }
  else
  {
    *a2 = 0;
  }
}

void sub_1C57E83C4(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1C57E83E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
}

void ___ZN10BootModule25finishInitialization_syncEv_block_invoke_2(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    uint64_t v3 = a1[4];
    int v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      uint64_t v5 = v4;
      if (a1[5])
      {
        v6[0] = MEMORY[0x1E4F143A8];
        v6[1] = 0x40000000;
        v6[2] = ___ZN10BootModule25finishInitialization_syncEv_block_invoke_3;
        v6[3] = &__block_descriptor_tmp_68_0;
        v6[4] = v3;
        ctu::SharedSynchronizable<BootModule>::execute_wrapped((uint64_t *)(v3 + 120), (uint64_t)v6);
      }
      if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void ___ZN10BootModule25finishInitialization_syncEv_block_invoke_3(uint64_t a1)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(int *)(v1 + 456);
  if (v2 == 4)
  {
    unint64_t v9 = 0xAAAAAAAAAAAAAAAALL;
    unint64_t v10 = 0xAAAAAAAAAAAAAAAALL;
    (*(void (**)(unint64_t *__return_ptr))(*(void *)v1 + 80))(&v9);
    unint64_t v3 = v9;
    if (v9)
    {
      int v4 = (char *)operator new(0x38uLL);
      strcpy(v4, "com.apple.AppleBasebandManager.RadioNotReady.Bootup");
      uint64_t v5 = *(void *)(v3 + 104);
      std::string::__init_copy_ctor_external(&v11, v4, 0x33uLL);
      (*(void (**)(uint64_t, std::string *))(*(void *)v5 + 32))(v5, &v11);
      if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v11.__r_.__value_.__l.__data_);
      }
      operator delete(v4);
    }
    unsigned int v6 = (std::__shared_weak_count *)v10;
    if (v10)
    {
      if (!atomic_fetch_add((atomic_ullong *volatile)(v10 + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
  else
  {
    int v7 = *(NSObject **)(v1 + 88);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      if (v2 > 8) {
        xpc_object_t v8 = "Unknown";
      }
      else {
        xpc_object_t v8 = off_1E65174F8[v2];
      }
      LODWORD(v11.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)v11.__r_.__value_.__r.__words + 4) = (std::string::size_type)v8;
      _os_log_impl(&dword_1C5767000, v7, OS_LOG_TYPE_DEFAULT, "#I State is '%s' not releasing power assertion yet", (uint8_t *)&v11, 0xCu);
    }
  }
}

void sub_1C57E86C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  operator delete(v16);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1C57E86FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void ctu::os::scoped_activity::~scoped_activity(void **this)
{
  uint64_t v1 = *this;
  if (v1) {
    os_release(v1);
  }
}

void ___ZN10BootModule25finishInitialization_syncEv_block_invoke_76(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    uint64_t v3 = a1[4];
    int v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      uint64_t v5 = v4;
      if (a1[5])
      {
        unsigned int v6 = *(BootController **)(v3 + 480);
        if (v6) {
          BootController::markNonvolatileDataErased(v6);
        }
      }
      if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void sub_1C57E880C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void ___ZN10BootModule25finishInitialization_syncEv_block_invoke_80(void *a1, abm::client::Event **a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    uint64_t v5 = a1[4];
    unsigned int v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      int v7 = v6;
      uint64_t v8 = a1[5];
      if (atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        if (!v8) {
          return;
        }
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v7);
        if (!v8) {
          return;
        }
      }
      CFTypeRef cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
      abm::client::Event::getData((uint64_t *)&cf, *a2);
      CFTypeRef v9 = cf;
      if (cf) {
        unint64_t v10 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
      }
      else {
        unint64_t v10 = 0;
      }
      if (v10)
      {
        v12[0] = 0xAAAAAAAAAAAAAAAALL;
        v12[1] = 0xAAAAAAAAAAAAAAAALL;
        ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v12, (const __CFDictionary *)cf);
        ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v14, (const char *)*MEMORY[0x1E4F4CB50]);
        int Int = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v12, v14);
        MEMORY[0x1C8791110](&v14);
        *(_DWORD *)(v5 + 256) = Int;
        MEMORY[0x1C8791160](v12);
        CFTypeRef v9 = cf;
      }
      if (v9) {
        CFRelease(v9);
      }
    }
  }
}

void BootModule::submitMetric_sync(BootModule *this, unsigned int a2, uint64_t a3, BOOL a4)
{
  uint64_t v8 = *((void *)this + 11);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_1C5767000, v8, OS_LOG_TYPE_DEFAULT, "#I Submitting AWD of bootup time", buf, 2u);
  }
  xpc_object_t v9 = xpc_dictionary_create(0, 0, 0);
  uint64_t v10 = MEMORY[0x1E4F14590];
  if (v9 || (xpc_object_t v9 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C8792D30](v9) == v10)
    {
      xpc_retain(v9);
      xpc_object_t v11 = v9;
    }
    else
    {
      xpc_object_t v11 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v11 = xpc_null_create();
    xpc_object_t v9 = 0;
  }
  xpc_release(v9);
  xpc_object_t v12 = xpc_dictionary_create(0, 0, 0);
  if (v12 || (xpc_object_t v12 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C8792D30](v12) == v10)
    {
      xpc_retain(v12);
      xpc_object_t v13 = v12;
    }
    else
    {
      xpc_object_t v13 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v13 = xpc_null_create();
    xpc_object_t v12 = 0;
  }
  xpc_release(v12);
  xpc_object_t v14 = xpc_int64_create(a2);
  if (!v14) {
    xpc_object_t v14 = xpc_null_create();
  }
  xpc_dictionary_set_value(v13, (const char *)*MEMORY[0x1E4F4C3B0], v14);
  xpc_object_t v15 = xpc_null_create();
  xpc_release(v14);
  xpc_release(v15);
  xpc_object_t v16 = xpc_uint64_create(a3);
  if (!v16) {
    xpc_object_t v16 = xpc_null_create();
  }
  xpc_dictionary_set_value(v13, (const char *)*MEMORY[0x1E4F4C478], v16);
  xpc_object_t v17 = xpc_null_create();
  xpc_release(v16);
  xpc_release(v17);
  xpc_object_t v18 = xpc_BOOL_create(a4);
  if (!v18) {
    xpc_object_t v18 = xpc_null_create();
  }
  xpc_dictionary_set_value(v13, (const char *)*MEMORY[0x1E4F4C3B8], v18);
  xpc_object_t v19 = xpc_null_create();
  xpc_release(v18);
  xpc_release(v19);
  xpc_object_t v20 = xpc_string_create((const char *)*MEMORY[0x1E4F4D2D0]);
  if (!v20) {
    xpc_object_t v20 = xpc_null_create();
  }
  xpc_dictionary_set_value(v11, (const char *)*MEMORY[0x1E4F4C190], v20);
  xpc_object_t v21 = xpc_null_create();
  xpc_release(v20);
  xpc_release(v21);
  xpc_object_t v22 = xpc_int64_create(524384);
  if (!v22) {
    xpc_object_t v22 = xpc_null_create();
  }
  xpc_dictionary_set_value(v11, (const char *)*MEMORY[0x1E4F4C258], v22);
  xpc_object_t v23 = xpc_null_create();
  xpc_release(v22);
  xpc_release(v23);
  if (v13)
  {
    xpc_retain(v13);
    xpc_object_t v24 = v13;
  }
  else
  {
    xpc_object_t v24 = xpc_null_create();
  }
  xpc_dictionary_set_value(v11, (const char *)*MEMORY[0x1E4F4C188], v24);
  xpc_object_t v25 = xpc_null_create();
  xpc_release(v24);
  xpc_release(v25);
  uint64_t v26 = (const void *)*MEMORY[0x1E4F4C738];
  size_t v27 = strlen((const char *)*MEMORY[0x1E4F4C738]);
  if (v27 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v28 = v27;
  if (v27 >= 0x17)
  {
    uint64_t v30 = (v27 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v27 | 7) != 0x17) {
      uint64_t v30 = v27 | 7;
    }
    uint64_t v31 = v30 + 1;
    CFTypeRef v29 = operator new(v30 + 1);
    size_t v35 = v28;
    unint64_t v36 = v31 | 0x8000000000000000;
    *(void *)long long buf = v29;
LABEL_36:
    memmove(v29, v26, v28);
    *((unsigned char *)v29 + v28) = 0;
    xpc_object_t object = v11;
    if (v11) {
      goto LABEL_32;
    }
    goto LABEL_37;
  }
  HIBYTE(v36) = v27;
  CFTypeRef v29 = buf;
  if (v27) {
    goto LABEL_36;
  }
  buf[0] = 0;
  xpc_object_t object = v11;
  if (v11)
  {
LABEL_32:
    xpc_retain(v11);
    goto LABEL_38;
  }
LABEL_37:
  xpc_object_t object = xpc_null_create();
LABEL_38:
  uint64_t v32 = 0;
  Service::runCommand((uint64_t)this, (uint64_t)buf, &object, &v32);
  xpc_release(object);
  xpc_object_t object = 0;
  if (SHIBYTE(v36) < 0) {
    operator delete(*(void **)buf);
  }
  xpc_release(v13);
  xpc_release(v11);
}

void sub_1C57E8DC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  xpc_release(object);
  if (a16 < 0) {
    operator delete(__p);
  }
  xpc_release(v17);
  xpc_release(v16);
  _Unwind_Resume(a1);
}

void BootModule::handleBootFailed_sync(uint64_t a1, const void **a2)
{
  uint64_t v106 = *MEMORY[0x1E4F143B8];
  os_activity_t v99 = _os_activity_create(&dword_1C5767000, "Baseband state: boot up failed", MEMORY[0x1E4F144F0], OS_ACTIVITY_FLAG_DEFAULT);
  memset(state, 170, 16);
  os_activity_scope_enter(v99, (os_activity_scope_state_t)state);
  os_activity_scope_leave((os_activity_scope_state_t)state);
  memset(v98, 170, sizeof(v98));
  int v4 = *((char *)a2 + 23);
  if (v4 >= 0) {
    size_t v5 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v5 = (size_t)a2[1];
  }
  size_t v6 = v5 + 23;
  memset(state, 170, 24);
  if (v5 + 23 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v5 >= 0xFFFFFFFFFFFFFFE9)
  {
    int v7 = &state[23];
    state[23] = v5 + 23;
    qmemcpy(state, "modem boot up failure [", 23);
LABEL_10:
    if (v4 >= 0) {
      xpc_object_t v11 = a2;
    }
    else {
      xpc_object_t v11 = *a2;
    }
    memmove(v7, v11, v5);
    goto LABEL_14;
  }
  uint64_t v8 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v6 | 7) != 0x17) {
    uint64_t v8 = v6 | 7;
  }
  uint64_t v9 = v8 + 1;
  uint64_t v10 = (char *)operator new(v8 + 1);
  *(void *)&state[8] = v5 + 23;
  *(void *)&state[16] = v9 | 0x8000000000000000;
  *(void *)state = v10;
  qmemcpy(v10, "modem boot up failure [", 23);
  int v7 = v10 + 23;
  if (v5) {
    goto LABEL_10;
  }
LABEL_14:
  v7[v5] = 0;
  xpc_object_t v12 = std::string::append((std::string *)state, "]", 1uLL);
  long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  *(void *)&v98[16] = *((void *)&v12->__r_.__value_.__l + 2);
  *(_OWORD *)v98 = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  if ((state[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)state);
    if (*(unsigned char *)(a1 + 229)) {
      goto LABEL_19;
    }
  }
  else if (*(unsigned char *)(a1 + 229))
  {
    goto LABEL_19;
  }
  unsigned int v14 = *(_DWORD *)(a1 + 224);
  if (v14 <= *(_DWORD *)(a1 + 196))
  {
    CFTypeRef v38 = *(NSObject **)(a1 + 88);
    if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)state = 67109120;
      *(_DWORD *)&state[4] = v14;
      _os_log_error_impl(&dword_1C5767000, v38, OS_LOG_TYPE_ERROR, "Attempting to boot baseband again; attempt=%d",
        state,
        8u);
    }
    *(void *)&long long v39 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v39 + 1) = 0xAAAAAAAAAAAAAAAALL;
    long long v104 = v39;
    long long v105 = v39;
    long long v102 = v39;
    long long v103 = v39;
    *(_OWORD *)&state[16] = v39;
    long long v101 = v39;
    *(_OWORD *)state = v39;
    unint64_t v40 = (const void *)*MEMORY[0x1E4F4C6E8];
    size_t v41 = strlen((const char *)*MEMORY[0x1E4F4C6E8]);
    if (v41 > 0x7FFFFFFFFFFFFFF7) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    size_t v42 = v41;
    if (v41 >= 0x17)
    {
      uint64_t v62 = (v41 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v41 | 7) != 0x17) {
        uint64_t v62 = v41 | 7;
      }
      uint64_t v63 = v62 + 1;
      dispatch_object_t v43 = operator new(v62 + 1);
      *((void *)&v96 + 1) = v42;
      unint64_t v97 = v63 | 0x8000000000000000;
      *(void *)&long long v96 = v43;
    }
    else
    {
      HIBYTE(v97) = v41;
      dispatch_object_t v43 = &v96;
      if (!v41)
      {
LABEL_115:
        v43[v42] = 0;
        uint64_t v64 = (const void *)*MEMORY[0x1E4F4D030];
        size_t v65 = strlen((const char *)*MEMORY[0x1E4F4D030]);
        if (v65 > 0x7FFFFFFFFFFFFFF7) {
          std::string::__throw_length_error[abi:ne180100]();
        }
        size_t v66 = v65;
        if (v65 >= 0x17)
        {
          uint64_t v68 = (v65 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v65 | 7) != 0x17) {
            uint64_t v68 = v65 | 7;
          }
          uint64_t v69 = v68 + 1;
          v67 = operator new(v68 + 1);
          *((void *)&v94 + 1) = v66;
          unint64_t v95 = v69 | 0x8000000000000000;
          *(void *)&long long v94 = v67;
        }
        else
        {
          HIBYTE(v95) = v65;
          v67 = &v94;
          if (!v65)
          {
LABEL_123:
            v67[v66] = 0;
            Timestamp::Timestamp((Timestamp *)&cf);
            Timestamp::asString((uint64_t)&cf, 0, 9, __p);
            char v89 = 0;
            LOBYTE(v88) = 0;
            ResetInfo::ResetInfo((std::string *)state, &v96, &v94, (long long *)v98, (uint64_t)__p, 4, &v88);
            if (v93 < 0)
            {
              operator delete(__p[0]);
              std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&cf, v91);
              if ((SHIBYTE(v95) & 0x80000000) == 0)
              {
LABEL_125:
                if ((SHIBYTE(v97) & 0x80000000) == 0) {
                  goto LABEL_126;
                }
LABEL_137:
                operator delete((void *)v96);
LABEL_126:
                ResetInfo::ResetInfo(&v81, (long long *)state);
                uint64_t v80 = 0;
                BootModule::requestReset(a1, &v81, &v80);
                if (v87 < 0)
                {
                  operator delete(v86);
                  if ((v85 & 0x80000000) == 0)
                  {
LABEL_128:
                    if ((v83 & 0x80000000) == 0) {
                      goto LABEL_129;
                    }
                    goto LABEL_140;
                  }
                }
                else if ((v85 & 0x80000000) == 0)
                {
                  goto LABEL_128;
                }
                operator delete(v84);
                if ((v83 & 0x80000000) == 0)
                {
LABEL_129:
                  if ((SHIBYTE(v81.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                    goto LABEL_130;
                  }
                  goto LABEL_141;
                }
LABEL_140:
                operator delete(v82);
                if ((SHIBYTE(v81.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                {
LABEL_130:
                  if ((SHIBYTE(v105) & 0x80000000) == 0) {
                    goto LABEL_131;
                  }
                  goto LABEL_142;
                }
LABEL_141:
                operator delete(v81.__r_.__value_.__l.__data_);
                if ((SHIBYTE(v105) & 0x80000000) == 0)
                {
LABEL_131:
                  if ((SBYTE7(v103) & 0x80000000) == 0) {
                    goto LABEL_132;
                  }
                  goto LABEL_143;
                }
LABEL_142:
                operator delete(*((void **)&v104 + 1));
                if ((SBYTE7(v103) & 0x80000000) == 0)
                {
LABEL_132:
                  if ((SHIBYTE(v101) & 0x80000000) == 0) {
                    goto LABEL_133;
                  }
                  goto LABEL_144;
                }
LABEL_143:
                operator delete((void *)v102);
                if ((SHIBYTE(v101) & 0x80000000) == 0)
                {
LABEL_133:
                  if ((state[23] & 0x80000000) == 0) {
                    goto LABEL_103;
                  }
LABEL_145:
                  operator delete(*(void **)state);
                  goto LABEL_103;
                }
LABEL_144:
                operator delete(*(void **)&state[24]);
                if ((state[23] & 0x80000000) == 0) {
                  goto LABEL_103;
                }
                goto LABEL_145;
              }
            }
            else
            {
              std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&cf, v91);
              if ((SHIBYTE(v95) & 0x80000000) == 0) {
                goto LABEL_125;
              }
            }
            operator delete((void *)v94);
            if ((SHIBYTE(v97) & 0x80000000) == 0) {
              goto LABEL_126;
            }
            goto LABEL_137;
          }
        }
        memmove(v67, v64, v66);
        goto LABEL_123;
      }
    }
    memmove(v43, v40, v42);
    goto LABEL_115;
  }
LABEL_19:
  xpc_object_t v15 = *(NSObject **)(a1 + 88);
  if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)state = 0;
    _os_log_error_impl(&dword_1C5767000, v15, OS_LOG_TYPE_ERROR, "Baseband is declared dead; no more boot attempts",
      state,
      2u);
  }
  (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 96))(a1, 6);
  CFTypeRef cf = 0;
  uint64_t v16 = *MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (Mutable) {
    CFTypeRef cf = Mutable;
  }
  ctu::cf::insert<char const*,char const*>(Mutable, (const __CFString **)*MEMORY[0x1E4F4C688], (const __CFString **)*MEMORY[0x1E4F4C6E0], v16, v18);
  xpc_object_t v19 = *(std::__shared_weak_count **)(a1 + 128);
  if (!v19 || (uint64_t v20 = *(void *)(a1 + 120), (v21 = std::__shared_weak_count::lock(v19)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  xpc_object_t v22 = v21;
  atomic_fetch_add_explicit(&v21->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v22);
  }
  *(void *)&long long v94 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v94 + 1) = 0xAAAAAAAAAAAAAAAALL;
  pthread_mutex_lock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
  xpc_object_t v23 = (uint64_t *)off_1EBBDCFD0;
  if (!off_1EBBDCFD0)
  {
    ABMServer::create_default_global(state);
    long long v24 = *(_OWORD *)state;
    *(void *)state = 0;
    *(void *)&state[8] = 0;
    xpc_object_t v25 = (std::__shared_weak_count *)*(&off_1EBBDCFD0 + 1);
    off_1EBBDCFD0 = v24;
    if (v25 && !atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
    uint64_t v26 = *(std::__shared_weak_count **)&state[8];
    if (*(void *)&state[8]
      && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&state[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
    xpc_object_t v23 = (uint64_t *)off_1EBBDCFD0;
  }
  *(void *)&long long v94 = v23;
  *((void *)&v94 + 1) = *(&off_1EBBDCFD0 + 1);
  if (*(&off_1EBBDCFD0 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDCFD0 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
  size_t v27 = (const void *)*MEMORY[0x1E4F4CEF8];
  size_t v28 = strlen((const char *)*MEMORY[0x1E4F4CEF8]);
  if (v28 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  CFTypeRef v29 = (void *)v28;
  if (v28 >= 0x17)
  {
    uint64_t v32 = (v28 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v28 | 7) != 0x17) {
      uint64_t v32 = v28 | 7;
    }
    uint64_t v33 = v32 + 1;
    uint64_t v30 = (void **)operator new(v32 + 1);
    __dst[1] = v29;
    unint64_t v79 = v33 | 0x8000000000000000;
    __dst[0] = v30;
LABEL_45:
    memmove(v30, v27, (size_t)v29);
    *((unsigned char *)v29 + (void)v30) = 0;
    CFTypeRef v31 = cf;
    if (!cf) {
      goto LABEL_48;
    }
    goto LABEL_46;
  }
  HIBYTE(v79) = v28;
  uint64_t v30 = __dst;
  if (v28) {
    goto LABEL_45;
  }
  LOBYTE(__dst[0]) = 0;
  CFTypeRef v31 = cf;
  if (!cf) {
    goto LABEL_48;
  }
LABEL_46:
  CFTypeID v34 = CFGetTypeID(v31);
  if (v34 == CFDictionaryGetTypeID())
  {
    v77 = v31;
    CFRetain(v31);
    goto LABEL_49;
  }
LABEL_48:
  CFTypeRef v31 = 0;
  v77 = 0;
LABEL_49:
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN10BootModule21handleBootFailed_syncENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_88_0;
  aBlock[4] = a1;
  void aBlock[5] = v20;
  v75 = v22;
  atomic_fetch_add_explicit(&v22->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  size_t v35 = _Block_copy(aBlock);
  v76 = v35;
  ABMServer::broadcast(v23, (uint64_t)__dst, &v77, &v76);
  if (v35) {
    _Block_release(v35);
  }
  if (v31) {
    CFRelease(v31);
  }
  if (SHIBYTE(v79) < 0) {
    operator delete(__dst[0]);
  }
  xpc_object_t v36 = xpc_dictionary_create(0, 0, 0);
  if (v36 || (xpc_object_t v36 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C8792D30](v36) == MEMORY[0x1E4F14590])
    {
      xpc_retain(v36);
      xpc_object_t v37 = v36;
    }
    else
    {
      xpc_object_t v37 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v37 = xpc_null_create();
    xpc_object_t v36 = 0;
  }
  xpc_release(v36);
  xpc_object_t v44 = xpc_int64_create(4);
  if (!v44) {
    xpc_object_t v44 = xpc_null_create();
  }
  xpc_dictionary_set_value(v37, (const char *)*MEMORY[0x1E4F4C180], v44);
  xpc_object_t v45 = xpc_null_create();
  xpc_release(v44);
  xpc_release(v45);
  if (v98[23] >= 0) {
    uint64_t v46 = v98;
  }
  else {
    uint64_t v46 = *(const char **)v98;
  }
  xpc_object_t v47 = xpc_string_create(v46);
  if (!v47) {
    xpc_object_t v47 = xpc_null_create();
  }
  xpc_dictionary_set_value(v37, (const char *)*MEMORY[0x1E4F4CA98], v47);
  xpc_object_t v48 = xpc_null_create();
  xpc_release(v47);
  xpc_release(v48);
  Timestamp::Timestamp((Timestamp *)&v96);
  Timestamp::asString((uint64_t)&v96, 0, 9, state);
  if (state[23] >= 0) {
    unint64_t v49 = state;
  }
  else {
    unint64_t v49 = *(const char **)state;
  }
  xpc_object_t v50 = xpc_string_create(v49);
  if (!v50) {
    xpc_object_t v50 = xpc_null_create();
  }
  xpc_dictionary_set_value(v37, (const char *)*MEMORY[0x1E4F4C4C8], v50);
  xpc_object_t v51 = xpc_null_create();
  xpc_release(v50);
  xpc_release(v51);
  if ((state[23] & 0x80000000) != 0) {
    operator delete(*(void **)state);
  }
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&v96, *((void **)&v96 + 1));
  xpc_object_t v52 = (const void *)*MEMORY[0x1E4F4C748];
  size_t v53 = strlen((const char *)*MEMORY[0x1E4F4C748]);
  if (v53 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v54 = v53;
  if (v53 >= 0x17)
  {
    uint64_t v56 = (v53 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v53 | 7) != 0x17) {
      uint64_t v56 = v53 | 7;
    }
    uint64_t v57 = v56 + 1;
    dispatch_object_t v55 = operator new(v56 + 1);
    *(void *)&state[8] = v54;
    *(void *)&state[16] = v57 | 0x8000000000000000;
    *(void *)state = v55;
LABEL_89:
    memmove(v55, v52, v54);
    v55[v54] = 0;
    xpc_object_t object = v37;
    if (v37) {
      goto LABEL_85;
    }
LABEL_90:
    xpc_object_t object = xpc_null_create();
    goto LABEL_91;
  }
  state[23] = v53;
  dispatch_object_t v55 = state;
  if (v53) {
    goto LABEL_89;
  }
  state[0] = 0;
  xpc_object_t object = v37;
  if (!v37) {
    goto LABEL_90;
  }
LABEL_85:
  xpc_retain(v37);
LABEL_91:
  v70[0] = MEMORY[0x1E4F143A8];
  v70[1] = 1174405120;
  v70[2] = ___ZN10BootModule21handleBootFailed_syncENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE_block_invoke_89;
  v70[3] = &__block_descriptor_tmp_93;
  v70[4] = a1;
  v70[5] = v20;
  v71 = v22;
  atomic_fetch_add_explicit(&v22->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  long long v58 = _Block_copy(v70);
  v72 = v58;
  Service::runCommand(a1, (uint64_t)state, &object, &v72);
  if (v58) {
    _Block_release(v58);
  }
  xpc_release(object);
  xpc_object_t object = 0;
  if ((state[23] & 0x80000000) != 0) {
    operator delete(*(void **)state);
  }
  if (v71) {
    std::__shared_weak_count::__release_weak(v71);
  }
  xpc_release(v37);
  if (v75) {
    std::__shared_weak_count::__release_weak(v75);
  }
  long long v59 = (std::__shared_weak_count *)*((void *)&v94 + 1);
  if (!*((void *)&v94 + 1)
    || atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v94 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    std::__shared_weak_count::__release_weak(v22);
    CFTypeRef v60 = cf;
    if (!cf) {
      goto LABEL_103;
    }
    goto LABEL_102;
  }
  ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
  std::__shared_weak_count::__release_weak(v59);
  std::__shared_weak_count::__release_weak(v22);
  CFTypeRef v60 = cf;
  if (cf) {
LABEL_102:
  }
    CFRelease(v60);
LABEL_103:
  if ((v98[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)v98);
    os_activity_t v61 = v99;
    if (!v99) {
      return;
    }
  }
  else
  {
    os_activity_t v61 = v99;
    if (!v99) {
      return;
    }
  }
  os_release(v61);
}

void sub_1C57E9AB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, xpc_object_t object, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,std::__shared_weak_count *a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32)
{
  ResetInfo::~ResetInfo(&a32);
  ResetInfo::~ResetInfo((void **)(v32 - 224));
  if (*(char *)(v32 - 233) < 0) {
    operator delete(*(void **)(v32 - 256));
  }
  ctu::os::scoped_activity::~scoped_activity((void **)(v32 - 232));
  _Unwind_Resume(a1);
}

void ___ZN10BootModule21handleBootFailed_syncENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE_block_invoke(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (!v2) {
    return;
  }
  uint64_t v3 = (void *)a1[4];
  int v4 = std::__shared_weak_count::lock(v2);
  unsigned int v14 = v4;
  if (!v4) {
    return;
  }
  if (!a1[5])
  {
    uint64_t v10 = v4;
    if (atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
      return;
    }
LABEL_18:
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
    return;
  }
  size_t v5 = (std::__shared_weak_count *)v3[23];
  v3[22] = 0;
  v3[23] = 0;
  if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  unint64_t v11 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v12 = 0xAAAAAAAAAAAAAAAALL;
  (*(void (**)(unint64_t *__return_ptr, void *))(*v3 + 80))(&v11, v3);
  unint64_t v6 = v11;
  if (v11)
  {
    int v7 = (char *)operator new(0x38uLL);
    strcpy(v7, "com.apple.AppleBasebandManager.RadioNotReady.Bootup");
    uint64_t v8 = *(void *)(v6 + 104);
    std::string::__init_copy_ctor_external(&v15, v7, 0x33uLL);
    (*(void (**)(uint64_t, std::string *))(*(void *)v8 + 32))(v8, &v15);
    if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v15.__r_.__value_.__l.__data_);
    }
    operator delete(v7);
  }
  uint64_t v9 = (std::__shared_weak_count *)v12;
  if (v12 && !atomic_fetch_add((atomic_ullong *volatile)(v12 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  uint64_t v10 = v14;
  if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_18;
  }
}

void sub_1C57E9F6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  operator delete(v19);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  _Unwind_Resume(a1);
}

void sub_1C57E9FB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void ___ZN10BootModule21handleBootFailed_syncENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE_block_invoke_89(void *a1, int a2, xpc_object_t *a3)
{
  int v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    int v7 = (void *)a1[4];
    uint64_t v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      uint64_t v9 = v8;
      uint64_t v10 = a1[5];
      if (v10)
      {
        atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
        xpc_object_t v11 = *a3;
        if (*a3)
        {
          xpc_retain(*a3);
          unint64_t v12 = (std::__shared_weak_count *)v7[16];
          if (!v12) {
LABEL_17:
          }
            std::__throw_bad_weak_ptr[abi:ne180100]();
        }
        else
        {
          xpc_object_t v11 = xpc_null_create();
          unint64_t v12 = (std::__shared_weak_count *)v7[16];
          if (!v12) {
            goto LABEL_17;
          }
        }
        uint64_t v13 = v7[15];
        unsigned int v14 = std::__shared_weak_count::lock(v12);
        if (!v14) {
          goto LABEL_17;
        }
        std::string v15 = v14;
        uint64_t v16 = operator new(0x28uLL);
        *uint64_t v16 = v7;
        v16[1] = v10;
        v16[2] = v9;
        *((_DWORD *)v16 + 6) = a2;
        v16[4] = v11;
        xpc_object_t v17 = xpc_null_create();
        CFAllocatorRef v18 = v7[17];
        atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
        xpc_object_t v19 = operator new(0x18uLL);
        void *v19 = v16;
        v19[1] = v13;
        void v19[2] = v15;
        dispatch_async_f(v18, v19, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI10BootModuleE15execute_wrappedIZZNS3_21handleBootFailed_syncENSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEUb4_E3__6EEvOT_EUlvE_EEvP16dispatch_queue_sNS6_10unique_ptrISE_NS6_14default_deleteISE_EEEEENUlPvE_8__invokeESN_);
        if (!atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
        xpc_release(v17);
      }
      if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
}

void BootModule::handleReset_sync(uint64_t a1, uint64_t a2, void **a3)
{
  if ((*(char *)(a2 + 71) & 0x80000000) == 0)
  {
    std::string v53 = *(std::string *)(a2 + 48);
    unint64_t v6 = (void **)(a1 + 152);
    if ((*(char *)(a1 + 175) & 0x80000000) == 0) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  std::string::__init_copy_ctor_external(&v53, *(const std::string::value_type **)(a2 + 48), *(void *)(a2 + 56));
  unint64_t v6 = (void **)(a1 + 152);
  if (*(char *)(a1 + 175) < 0) {
LABEL_3:
  }
    operator delete(*v6);
LABEL_4:
  *(std::string *)unint64_t v6 = v53;
  xpc_object_t v52 = 0;
  uint64_t v7 = *MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (Mutable) {
    xpc_object_t v52 = Mutable;
  }
  else {
    CFMutableDictionaryRef Mutable = v52;
  }
  ctu::cf::insert<char const*,char const*>(Mutable, (const __CFString **)*MEMORY[0x1E4F4C688], (const __CFString **)*MEMORY[0x1E4F4CCD8], v7, v9);
  ResetInfo::addToDict(a2, &v52, v10, v11, v12);
  unint64_t v50 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v51 = 0xAAAAAAAAAAAAAAAALL;
  pthread_mutex_lock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
  unint64_t v13 = off_1EBBDCFD0;
  if (!off_1EBBDCFD0)
  {
    ABMServer::create_default_global(&v53);
    long long v14 = *(_OWORD *)&v53.__r_.__value_.__l.__data_;
    *(_OWORD *)&v53.__r_.__value_.__l.__data_ = 0uLL;
    std::string v15 = (std::__shared_weak_count *)*(&off_1EBBDCFD0 + 1);
    off_1EBBDCFD0 = v14;
    if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
    size_t size = (std::__shared_weak_count *)v53.__r_.__value_.__l.__size_;
    if (v53.__r_.__value_.__l.__size_
      && !atomic_fetch_add((atomic_ullong *volatile)(v53.__r_.__value_.__l.__size_ + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
    unint64_t v13 = off_1EBBDCFD0;
  }
  unint64_t v50 = v13;
  unint64_t v51 = *(&off_1EBBDCFD0 + 1);
  if (*(&off_1EBBDCFD0 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDCFD0 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
  xpc_object_t v17 = *(std::__shared_weak_count **)(a1 + 128);
  if (!v17 || (uint64_t v18 = *(void *)(a1 + 120), (v19 = std::__shared_weak_count::lock(v17)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v20 = v19;
  atomic_fetch_add_explicit(&v19->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v20);
  }
  xpc_object_t v21 = (uint64_t *)v50;
  xpc_object_t v22 = (const void *)*MEMORY[0x1E4F4CEF8];
  size_t v23 = strlen((const char *)*MEMORY[0x1E4F4CEF8]);
  if (v23 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  long long v24 = (void *)v23;
  if (v23 >= 0x17)
  {
    uint64_t v27 = (v23 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v23 | 7) != 0x17) {
      uint64_t v27 = v23 | 7;
    }
    uint64_t v28 = v27 + 1;
    xpc_object_t v25 = (void **)operator new(v27 + 1);
    __dst[1] = v24;
    unint64_t v49 = v28 | 0x8000000000000000;
    __dst[0] = v25;
LABEL_31:
    memmove(v25, v22, (size_t)v24);
    *((unsigned char *)v24 + (void)v25) = 0;
    uint64_t v26 = v52;
    if (!v52) {
      goto LABEL_34;
    }
    goto LABEL_32;
  }
  HIBYTE(v49) = v23;
  xpc_object_t v25 = __dst;
  if (v23) {
    goto LABEL_31;
  }
  LOBYTE(__dst[0]) = 0;
  uint64_t v26 = v52;
  if (!v52) {
    goto LABEL_34;
  }
LABEL_32:
  CFTypeID v29 = CFGetTypeID(v26);
  if (v29 == CFDictionaryGetTypeID())
  {
    xpc_object_t v47 = v26;
    CFRetain(v26);
    goto LABEL_35;
  }
LABEL_34:
  uint64_t v26 = 0;
  xpc_object_t v47 = 0;
LABEL_35:
  v36[0] = MEMORY[0x1E4F143A8];
  v36[1] = 1174405120;
  v36[2] = ___ZN10BootModule16handleReset_syncE9ResetInfoN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEE_block_invoke;
  v36[3] = &__block_descriptor_tmp_96_0;
  v36[4] = a1;
  v36[5] = v18;
  xpc_object_t v37 = v20;
  atomic_fetch_add_explicit(&v20->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  ResetInfo::ResetInfo(&v38, (long long *)a2);
  uint64_t v30 = *a3;
  if (*a3) {
    uint64_t v30 = _Block_copy(v30);
  }
  aBlock = v30;
  CFTypeRef v31 = _Block_copy(v36);
  uint64_t v46 = v31;
  ABMServer::broadcast(v21, (uint64_t)__dst, (const void **)&v47, &v46);
  if (v31) {
    _Block_release(v31);
  }
  if (v26) {
    CFRelease(v26);
  }
  if (SHIBYTE(v49) < 0)
  {
    operator delete(__dst[0]);
    uint64_t v32 = aBlock;
    if (!aBlock) {
      goto LABEL_46;
    }
    goto LABEL_45;
  }
  uint64_t v32 = aBlock;
  if (aBlock) {
LABEL_45:
  }
    _Block_release(v32);
LABEL_46:
  if (v44 < 0)
  {
    operator delete(__p);
    if ((v42 & 0x80000000) == 0)
    {
LABEL_48:
      if ((v40 & 0x80000000) == 0) {
        goto LABEL_49;
      }
      goto LABEL_59;
    }
  }
  else if ((v42 & 0x80000000) == 0)
  {
    goto LABEL_48;
  }
  operator delete(v41);
  if ((v40 & 0x80000000) == 0)
  {
LABEL_49:
    if ((SHIBYTE(v38.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_50;
    }
LABEL_60:
    operator delete(v38.__r_.__value_.__l.__data_);
    uint64_t v33 = v37;
    if (!v37) {
      goto LABEL_52;
    }
    goto LABEL_51;
  }
LABEL_59:
  operator delete(v39);
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_60;
  }
LABEL_50:
  uint64_t v33 = v37;
  if (v37) {
LABEL_51:
  }
    std::__shared_weak_count::__release_weak(v33);
LABEL_52:
  std::__shared_weak_count::__release_weak(v20);
  CFTypeID v34 = (std::__shared_weak_count *)v51;
  if (!v51 || atomic_fetch_add((atomic_ullong *volatile)(v51 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    size_t v35 = v52;
    if (!v52) {
      return;
    }
    goto LABEL_55;
  }
  ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
  std::__shared_weak_count::__release_weak(v34);
  size_t v35 = v52;
  if (v52) {
LABEL_55:
  }
    CFRelease(v35);
}

void sub_1C57EA69C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *aBlock)
{
  pthread_mutex_unlock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)(v30 - 120));
  _Unwind_Resume(a1);
}

void ___ZN10BootModule16handleReset_syncE9ResetInfoN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEE_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (!v2) {
    return;
  }
  uint64_t v3 = *(void **)(a1 + 32);
  int v4 = std::__shared_weak_count::lock(v2);
  long long v24 = v4;
  if (!v4) {
    return;
  }
  size_t v5 = v4;
  if (!*(void *)(a1 + 40)) {
    goto LABEL_27;
  }
  if (*(char *)(a1 + 79) < 0) {
    std::string::__init_copy_ctor_external(&v22, *(const std::string::value_type **)(a1 + 56), *(void *)(a1 + 64));
  }
  else {
    std::string v22 = *(std::string *)(a1 + 56);
  }
  int v6 = SHIBYTE(v22.__r_.__value_.__r.__words[2]);
  if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t size = HIBYTE(v22.__r_.__value_.__r.__words[2]);
  }
  else {
    size_t size = v22.__r_.__value_.__l.__size_;
  }
  if (size == strlen((const char *)*MEMORY[0x1E4F4C6F0]))
  {
    if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v8 = &v22;
    }
    else {
      uint64_t v8 = (std::string *)v22.__r_.__value_.__r.__words[0];
    }
    BOOL v9 = memcmp(v8, (const void *)*MEMORY[0x1E4F4C6F0], size) == 0;
    if ((v6 & 0x80000000) == 0)
    {
LABEL_15:
      uint64_t v10 = v3[11];
      BOOL v11 = os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
      if (v9) {
        goto LABEL_16;
      }
LABEL_32:
      if (v11)
      {
        LOWORD(v22.__r_.__value_.__l.__data_) = 0;
        _os_log_impl(&dword_1C5767000, v10, OS_LOG_TYPE_DEFAULT, "#I Request to perform hard reset", (uint8_t *)&v22, 2u);
      }
      ResetInfo::ResetInfo(&v17, (long long *)(a1 + 56));
      long long v14 = *(const void **)(a1 + 168);
      if (v14) {
        std::string v15 = _Block_copy(v14);
      }
      else {
        std::string v15 = 0;
      }
      uint64_t v16 = v15;
      BootModule::hardReset_sync((uint64_t)v3, (uint64_t)&v17, (uint64_t *)&v16);
      if (v15) {
        _Block_release(v15);
      }
      unint64_t v13 = &v17;
      if (v18 < 0) {
        goto LABEL_23;
      }
      goto LABEL_24;
    }
  }
  else
  {
    BOOL v9 = 0;
    if ((SHIBYTE(v22.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_15;
    }
  }
  operator delete(v22.__r_.__value_.__l.__data_);
  uint64_t v10 = v3[11];
  BOOL v11 = os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
  if (!v9) {
    goto LABEL_32;
  }
LABEL_16:
  if (v11)
  {
    LOWORD(v22.__r_.__value_.__l.__data_) = 0;
    _os_log_impl(&dword_1C5767000, v10, OS_LOG_TYPE_DEFAULT, "#I Request to perform soft reset", (uint8_t *)&v22, 2u);
  }
  ResetInfo::ResetInfo(&v20, (long long *)(a1 + 56));
  CFAllocatorRef v12 = *(void **)(a1 + 168);
  if (v12) {
    CFAllocatorRef v12 = _Block_copy(v12);
  }
  aBlock = v12;
  (*(void (**)(void *, std::string *, void **))(*v3 + 104))(v3, &v20, &aBlock);
  if (aBlock) {
    _Block_release(aBlock);
  }
  unint64_t v13 = &v20;
  if (v21 < 0) {
LABEL_23:
  }
    operator delete((void *)v13[3].__r_.__value_.__r.__words[2]);
LABEL_24:
  if ((SHIBYTE(v13[2].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v13[1].__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_26;
    }
LABEL_37:
    operator delete(v13[1].__r_.__value_.__l.__data_);
    if ((SHIBYTE(v13->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_27:
      if (atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
        return;
      }
      goto LABEL_28;
    }
    goto LABEL_38;
  }
  operator delete(v13[2].__r_.__value_.__l.__data_);
  if (SHIBYTE(v13[1].__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_37;
  }
LABEL_26:
  if ((SHIBYTE(v13->__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_27;
  }
LABEL_38:
  operator delete(v13->__r_.__value_.__l.__data_);
  if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
LABEL_28:
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void sub_1C57EAA6C(_Unwind_Exception *a1)
{
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v1 - 80);
  _Unwind_Resume(a1);
}

void sub_1C57EAA80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10)
{
  if (v10) {
    _Block_release(v10);
  }
  ResetInfo::~ResetInfo(&a10);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v11 - 80);
  _Unwind_Resume(a1);
}

void sub_1C57EAAAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *aBlock,void *a25)
{
  if (aBlock) {
    _Block_release(aBlock);
  }
  ResetInfo::~ResetInfo(&a25);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v25 - 80);
  _Unwind_Resume(a1);
}

void sub_1C57EAAD8(_Unwind_Exception *a1)
{
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v1 - 80);
  _Unwind_Resume(a1);
}

void BootModule::hardReset_sync(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v47 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v48 = 0xAAAAAAAAAAAAAAAALL;
  pthread_mutex_lock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
  unint64_t v6 = off_1EBBDCFD0;
  if (!off_1EBBDCFD0)
  {
    ABMServer::create_default_global(&v49);
    long long v7 = *(_OWORD *)&v49.__r_.__value_.__l.__data_;
    *(_OWORD *)&v49.__r_.__value_.__l.__data_ = 0uLL;
    uint64_t v8 = (std::__shared_weak_count *)*(&off_1EBBDCFD0 + 1);
    off_1EBBDCFD0 = v7;
    if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
    size_t size = (std::__shared_weak_count *)v49.__r_.__value_.__l.__size_;
    if (v49.__r_.__value_.__l.__size_
      && !atomic_fetch_add((atomic_ullong *volatile)(v49.__r_.__value_.__l.__size_ + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
    unint64_t v6 = off_1EBBDCFD0;
  }
  unint64_t v47 = v6;
  unint64_t v48 = *(&off_1EBBDCFD0 + 1);
  if (*(&off_1EBBDCFD0 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDCFD0 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
  *(unsigned char *)(a1 + 228) = 0;
  if (*(char *)(a2 + 47) < 0) {
    std::string::__init_copy_ctor_external(&v49, *(const std::string::value_type **)(a2 + 24), *(void *)(a2 + 32));
  }
  else {
    std::string v49 = *(std::string *)(a2 + 24);
  }
  int v10 = SHIBYTE(v49.__r_.__value_.__r.__words[2]);
  if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t v11 = HIBYTE(v49.__r_.__value_.__r.__words[2]);
  }
  else {
    size_t v11 = v49.__r_.__value_.__l.__size_;
  }
  if (v11 != strlen((const char *)*MEMORY[0x1E4F4D030]))
  {
    BOOL v13 = 0;
    if ((SHIBYTE(v49.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_22;
    }
LABEL_27:
    operator delete(v49.__r_.__value_.__l.__data_);
    if (v13) {
      goto LABEL_23;
    }
LABEL_28:
    std::string v17 = *(void **)(a1 + 480);
    if (v17)
    {
      uint64_t v16 = (void (**)(void))(*v17 + 64);
      goto LABEL_30;
    }
    goto LABEL_31;
  }
  if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    CFAllocatorRef v12 = &v49;
  }
  else {
    CFAllocatorRef v12 = (std::string *)v49.__r_.__value_.__r.__words[0];
  }
  BOOL v13 = memcmp(v12, (const void *)*MEMORY[0x1E4F4D030], v11) == 0;
  if (v10 < 0) {
    goto LABEL_27;
  }
LABEL_22:
  if (!v13) {
    goto LABEL_28;
  }
LABEL_23:
  long long v14 = *(NSObject **)(a1 + 88);
  if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
  {
    LOWORD(v49.__r_.__value_.__l.__data_) = 0;
    _os_log_error_impl(&dword_1C5767000, v14, OS_LOG_TYPE_ERROR, "Falling back to baseband powercycle as bootup failed", (uint8_t *)&v49, 2u);
    std::string v15 = *(void **)(a1 + 480);
    if (!v15) {
      goto LABEL_31;
    }
    goto LABEL_25;
  }
  std::string v15 = *(void **)(a1 + 480);
  if (v15)
  {
LABEL_25:
    uint64_t v16 = (void (**)(void))(*v15 + 72);
LABEL_30:
    (*v16)();
  }
LABEL_31:
  uint64_t v18 = *a3;
  if (*a3)
  {
    *((unsigned char *)&v49.__r_.__value_.__s + 23) = 0;
    v49.__r_.__value_.__s.__data_[0] = 0;
    (*(void (**)(uint64_t, void, std::string *))(v18 + 16))(v18, 0, &v49);
    if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v49.__r_.__value_.__l.__data_);
    }
  }
  v49.__r_.__value_.__r.__words[0] = 0;
  uint64_t v19 = *MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  std::string v22 = (const void *)v49.__r_.__value_.__r.__words[0];
  if (Mutable)
  {
    v49.__r_.__value_.__r.__words[0] = (std::string::size_type)Mutable;
    if (v22)
    {
      CFRelease(v22);
      CFMutableDictionaryRef Mutable = (__CFDictionary *)v49.__r_.__value_.__r.__words[0];
    }
  }
  else
  {
    CFMutableDictionaryRef Mutable = (__CFDictionary *)v49.__r_.__value_.__r.__words[0];
  }
  ctu::cf::insert<char const*,char const*>(Mutable, (const __CFString **)*MEMORY[0x1E4F4C688], (const __CFString **)*MEMORY[0x1E4F4CBC8], v19, v21);
  ResetInfo::addToDict(a2, (__CFDictionary **)&v49, v23, v24, v25);
  uint64_t v26 = *(std::__shared_weak_count **)(a1 + 128);
  if (!v26 || (v27 = *(void *)(a1 + 120), (uint64_t v28 = std::__shared_weak_count::lock(v26)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  CFTypeID v29 = v28;
  atomic_fetch_add_explicit(&v28->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v28->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
    std::__shared_weak_count::__release_weak(v29);
  }
  uint64_t v30 = (uint64_t *)v47;
  CFTypeRef v31 = (const void *)*MEMORY[0x1E4F4CEF8];
  size_t v32 = strlen((const char *)*MEMORY[0x1E4F4CEF8]);
  if (v32 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v33 = (void *)v32;
  if (v32 >= 0x17)
  {
    uint64_t v36 = (v32 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v32 | 7) != 0x17) {
      uint64_t v36 = v32 | 7;
    }
    uint64_t v37 = v36 + 1;
    CFTypeID v34 = (void **)operator new(v36 + 1);
    __dst[1] = v33;
    unint64_t v46 = v37 | 0x8000000000000000;
    __dst[0] = v34;
LABEL_50:
    memmove(v34, v31, (size_t)v33);
    *((unsigned char *)v33 + (void)v34) = 0;
    size_t v35 = (const void *)v49.__r_.__value_.__r.__words[0];
    if (!v49.__r_.__value_.__r.__words[0]) {
      goto LABEL_53;
    }
    goto LABEL_51;
  }
  HIBYTE(v46) = v32;
  CFTypeID v34 = __dst;
  if (v32) {
    goto LABEL_50;
  }
  LOBYTE(__dst[0]) = 0;
  size_t v35 = (const void *)v49.__r_.__value_.__r.__words[0];
  if (!v49.__r_.__value_.__r.__words[0]) {
    goto LABEL_53;
  }
LABEL_51:
  CFTypeID v38 = CFGetTypeID(v35);
  if (v38 == CFDictionaryGetTypeID())
  {
    char v44 = v35;
    CFRetain(v35);
    goto LABEL_54;
  }
LABEL_53:
  size_t v35 = 0;
  char v44 = 0;
LABEL_54:
  v41[0] = MEMORY[0x1E4F143A8];
  v41[1] = 1174405120;
  v41[2] = ___ZN10BootModule14hardReset_syncE9ResetInfoN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEE_block_invoke;
  v41[3] = &__block_descriptor_tmp_100_0;
  v41[4] = a1;
  v41[5] = v27;
  char v42 = v29;
  atomic_fetch_add_explicit(&v29->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  long long v39 = _Block_copy(v41);
  dispatch_object_t v43 = v39;
  ABMServer::broadcast(v30, (uint64_t)__dst, &v44, &v43);
  if (v39) {
    _Block_release(v39);
  }
  if (v35) {
    CFRelease(v35);
  }
  if (SHIBYTE(v46) < 0) {
    operator delete(__dst[0]);
  }
  if (v42) {
    std::__shared_weak_count::__release_weak(v42);
  }
  std::__shared_weak_count::__release_weak(v29);
  if (v49.__r_.__value_.__r.__words[0]) {
    CFRelease(v49.__r_.__value_.__l.__data_);
  }
  char v40 = (std::__shared_weak_count *)v48;
  if (v48)
  {
    if (!atomic_fetch_add((atomic_ullong *volatile)(v48 + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
}

void sub_1C57EB084(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1C57EB098(_Unwind_Exception *a1)
{
}

void sub_1C57EB0C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24)
{
  if (*(char *)(v24 - 73) < 0)
  {
    operator delete(*(void **)(v24 - 96));
    std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a24);
    _Unwind_Resume(a1);
  }
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a24);
  _Unwind_Resume(a1);
}

void ___ZN10BootModule14hardReset_syncE9ResetInfoN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEE_block_invoke(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    uint64_t v3 = a1[4];
    int v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      size_t v5 = v4;
      if (a1[5])
      {
        v6[0] = MEMORY[0x1E4F143A8];
        v6[1] = 0x40000000;
        v6[2] = ___ZN10BootModule14hardReset_syncE9ResetInfoN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEE_block_invoke_2;
        v6[3] = &__block_descriptor_tmp_97;
        v6[4] = v3;
        ctu::SharedSynchronizable<BootModule>::execute_wrapped((uint64_t *)(v3 + 120), (uint64_t)v6);
      }
      if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void ___ZN10BootModule14hardReset_syncE9ResetInfoN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEE_block_invoke_2(uint64_t a1)
{
}

void BootModule::boot_sync(BootModule *this)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  unsigned int v2 = *((_DWORD *)this + 114) - 2;
  if (v2 <= 6)
  {
    uint64_t v3 = *((void *)this + 11);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      int v4 = off_1E6517540[v2];
      LODWORD(v38) = 136315138;
      *(void *)((char *)&v38 + 4) = v4;
      _os_log_impl(&dword_1C5767000, v3, OS_LOG_TYPE_DEFAULT, "#I Bootup request rejected as we are already in %s state", (uint8_t *)&v38, 0xCu);
    }
    return;
  }
  (*(void (**)(BootModule *, uint64_t))(*(void *)this + 96))(this, 2);
  ++*((_DWORD *)this + 56);
  uint64_t v6 = *((void *)this + 15);
  size_t v5 = (std::__shared_weak_count *)*((void *)this + 16);
  uint64_t v36 = v6;
  if (!v5 || (long long v7 = std::__shared_weak_count::lock(v5), (v37 = v7) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v8 = v7;
  uint64_t v32 = 0;
  uint64_t v33 = &v32;
  uint64_t v34 = 0x2000000000;
  char v35 = 0;
  BOOL v9 = dispatch_group_create();
  *(void *)&long long v38 = 0;
  *((void *)&v38 + 1) = &v38;
  uint64_t v39 = 0x4002000000;
  char v40 = __Block_byref_object_copy__2;
  size_t v41 = __Block_byref_object_dispose__2;
  char v42 = 0;
  uint64_t v43 = 0;
  uint64_t v44 = 0;
  if (capabilities::abs::shouldBoot((capabilities::abs *)v9))
  {
    global_queue = dispatch_get_global_queue(25, 0);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 1174405120;
    block[2] = ___ZN10BootModule9boot_syncEv_block_invoke;
    block[3] = &unk_1F20F45A0;
    block[6] = this;
    block[7] = v6;
    CFTypeRef v31 = v8;
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    block[4] = &v32;
    block[5] = &v38;
    dispatch_group_async(v9, global_queue, block);
    size_t v11 = v31;
    if (v31 && !atomic_fetch_add(&v31->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  else
  {
    if (v9)
    {
      dispatch_retain(v9);
      dispatch_group_enter(v9);
    }
    CFAllocatorRef v12 = *((void *)this + 11);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1C5767000, v12, OS_LOG_TYPE_DEFAULT, "#I Faking bootup", buf, 2u);
    }
    uint64_t v13 = *((void *)this + 22);
    long long v14 = (char *)operator new(0x20uLL);
    uint64_t v27 = v14;
    long long v28 = xmmword_1C599E830;
    strcpy(v14, "Wait for Ready on Fake Boot");
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 1174405120;
    aBlock[2] = ___ZN10BootModule9boot_syncEv_block_invoke_133;
    aBlock[3] = &__block_descriptor_tmp_134;
    aBlock[4] = this;
    void aBlock[5] = v6;
    uint64_t v24 = v8;
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    dispatch_group_t group = v9;
    if (v9)
    {
      dispatch_retain(v9);
      dispatch_group_enter(group);
    }
    std::string v15 = _Block_copy(aBlock);
    uint64_t v26 = v15;
    ResetDetection::add(v13, (uint64_t)&v27, 0, &v26, -1);
    if (v15) {
      _Block_release(v15);
    }
    operator delete(v14);
    *((unsigned char *)v33 + 24) = 1;
    if (group)
    {
      dispatch_group_leave(group);
      if (group) {
        dispatch_release(group);
      }
    }
    uint64_t v16 = v24;
    if (v24 && !atomic_fetch_add(&v24->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
    if (v9)
    {
      dispatch_group_leave(v9);
      dispatch_release(v9);
    }
  }
  std::string v17 = *((void *)this + 17);
  v20[0] = MEMORY[0x1E4F143A8];
  v20[1] = 1174405120;
  v20[2] = ___ZN10BootModule9boot_syncEv_block_invoke_135;
  v20[3] = &unk_1F20F4698;
  v20[6] = this;
  v20[7] = v36;
  CFAllocatorRef v21 = v37;
  if (v37) {
    atomic_fetch_add_explicit(&v37->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v20[4] = &v32;
  dispatch_object_t object = v9;
  if (v9) {
    dispatch_retain(v9);
  }
  v20[5] = &v38;
  dispatch_group_notify(v9, v17, v20);
  if (object) {
    dispatch_release(object);
  }
  uint64_t v18 = v21;
  if (v21 && !atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
    _Block_object_dispose(&v38, 8);
    if ((SHIBYTE(v44) & 0x80000000) == 0) {
      goto LABEL_36;
    }
    goto LABEL_35;
  }
  _Block_object_dispose(&v38, 8);
  if (SHIBYTE(v44) < 0) {
LABEL_35:
  }
    operator delete(v42);
LABEL_36:
  if (v9) {
    dispatch_release(v9);
  }
  _Block_object_dispose(&v32, 8);
  uint64_t v19 = v37;
  if (v37 && !atomic_fetch_add(&v37->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
}

void sub_1C57EB82C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,dispatch_group_t group)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void BootModule::checkFSSyncStatus_sync(uint64_t a1, void **a2)
{
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 128);
  if (!v3 || (uint64_t v5 = *(void *)(a1 + 120), (v6 = std::__shared_weak_count::lock(v3)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  long long v7 = v6;
  atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v7);
  }
  uint64_t v8 = (const void *)*MEMORY[0x1E4F4CDB8];
  size_t v9 = strlen((const char *)*MEMORY[0x1E4F4CDB8]);
  if (v9 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  int v10 = (void *)v9;
  if (v9 >= 0x17)
  {
    uint64_t v12 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v12 = v9 | 7;
    }
    uint64_t v13 = v12 + 1;
    size_t v11 = (void **)operator new(v12 + 1);
    __dst[1] = v10;
    unint64_t v24 = v13 | 0x8000000000000000;
    __dst[0] = v11;
    goto LABEL_12;
  }
  HIBYTE(v24) = v9;
  size_t v11 = __dst;
  if (v9) {
LABEL_12:
  }
    memmove(v11, v8, (size_t)v10);
  *((unsigned char *)v10 + (void)v11) = 0;
  xpc_object_t v14 = xpc_null_create();
  xpc_object_t v22 = v14;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN10BootModule22checkFSSyncStatus_syncEN8dispatch5blockIU13block_pointerFvbbEEE_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_101;
  aBlock[4] = a1;
  std::string v15 = *a2;
  if (*a2) {
    std::string v15 = _Block_copy(v15);
  }
  uint64_t v18 = v15;
  uint64_t v19 = v5;
  std::string v20 = v7;
  atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  uint64_t v16 = _Block_copy(aBlock);
  CFAllocatorRef v21 = v16;
  Service::runCommand(a1, (uint64_t)__dst, &v22, &v21);
  if (v16) {
    _Block_release(v16);
  }
  xpc_release(v14);
  xpc_object_t v22 = 0;
  if (SHIBYTE(v24) < 0) {
    operator delete(__dst[0]);
  }
  if (v20) {
    std::__shared_weak_count::__release_weak(v20);
  }
  if (v18) {
    _Block_release(v18);
  }
  std::__shared_weak_count::__release_weak(v7);
}

void sub_1C57EBB10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *aBlock, uint64_t a16, std::__shared_weak_count *a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (v26) {
    _Block_release(v26);
  }
  if (a17) {
    std::__shared_weak_count::__release_weak(a17);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  xpc_release(v27);
  if (a25 < 0)
  {
    operator delete(__p);
    std::__shared_weak_count::__release_weak(v25);
    _Unwind_Resume(a1);
  }
  std::__shared_weak_count::__release_weak(v25);
  _Unwind_Resume(a1);
}

void ___ZN10BootModule22checkFSSyncStatus_syncEN8dispatch5blockIU13block_pointerFvbbEEE_block_invoke(void *a1, int a2, xpc_object_t *a3)
{
  int v4 = (std::__shared_weak_count *)a1[7];
  if (!v4) {
    return;
  }
  long long v7 = (void *)a1[4];
  uint64_t v8 = std::__shared_weak_count::lock(v4);
  if (!v8) {
    return;
  }
  size_t v9 = v8;
  if (a1[6])
  {
    xpc_object_t v10 = *a3;
    if (*a3)
    {
      xpc_retain(*a3);
      size_t v11 = (const void *)a1[5];
      if (v11) {
        goto LABEL_6;
      }
    }
    else
    {
      xpc_object_t v10 = xpc_null_create();
      size_t v11 = (const void *)a1[5];
      if (v11)
      {
LABEL_6:
        uint64_t v12 = _Block_copy(v11);
        uint64_t v13 = (std::__shared_weak_count *)v7[16];
        if (!v13) {
LABEL_25:
        }
          std::__throw_bad_weak_ptr[abi:ne180100]();
LABEL_10:
        uint64_t v14 = v7[15];
        std::string v15 = std::__shared_weak_count::lock(v13);
        if (!v15) {
          goto LABEL_25;
        }
        uint64_t v16 = v15;
        std::string v17 = operator new(0x18uLL);
        *(_DWORD *)std::string v17 = a2;
        v17[1] = v10;
        xpc_object_t v18 = xpc_null_create();
        if (v12) {
          uint64_t v19 = _Block_copy(v12);
        }
        else {
          uint64_t v19 = 0;
        }
        v17[2] = v19;
        std::string v20 = v7[17];
        atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
        CFAllocatorRef v21 = operator new(0x18uLL);
        void *v21 = v17;
        v21[1] = v14;
        v21[2] = v16;
        dispatch_async_f(v20, v21, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI10BootModuleE15execute_wrappedIZZNS3_22checkFSSyncStatus_syncENS_5blockIU13block_pointerFvbbEEEEUb5_E3__7EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrISB_NSG_14default_deleteISB_EEEEENUlPvE_8__invokeESL_);
        if (atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          if (!v12) {
            goto LABEL_19;
          }
        }
        else
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
          if (!v12)
          {
LABEL_19:
            xpc_release(v18);
            goto LABEL_20;
          }
        }
        _Block_release(v12);
        goto LABEL_19;
      }
    }
    uint64_t v12 = 0;
    uint64_t v13 = (std::__shared_weak_count *)v7[16];
    if (!v13) {
      goto LABEL_25;
    }
    goto LABEL_10;
  }
LABEL_20:
  if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
}

void *__copy_helper_block_e8_40c44_ZTSN8dispatch5blockIU13block_pointerFvbbEEE48c35_ZTSNSt3__18weak_ptrI10BootModuleEE(void *a1, void *a2)
{
  xpc_object_t result = (void *)a2[5];
  if (result) {
    xpc_object_t result = _Block_copy(result);
  }
  uint64_t v6 = a2[6];
  uint64_t v5 = a2[7];
  a1[5] = result;
  a1[6] = v6;
  a1[7] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c44_ZTSN8dispatch5blockIU13block_pointerFvbbEEE48c35_ZTSNSt3__18weak_ptrI10BootModuleEE(uint64_t a1)
{
  unsigned int v2 = *(std::__shared_weak_count **)(a1 + 56);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = *(const void **)(a1 + 40);
  if (v3) {
    _Block_release(v3);
  }
}

void BootModule::softReset_sync(uint64_t a1, long long *a2, void **a3)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBBDD540, memory_order_acquire) & 1) == 0)
  {
    uint64_t v27 = (config::hw *)__cxa_guard_acquire(&qword_1EBBDD540);
    if (v27)
    {
      int v28 = config::hw::watch(v27);
      uint64_t v29 = 12;
      if (v28) {
        uint64_t v29 = 18;
      }
      _MergedGlobals_5 = v29;
      __cxa_guard_release(&qword_1EBBDD540);
    }
  }
  uint64_t v6 = *(std::__shared_weak_count **)(a1 + 128);
  if (!v6 || (uint64_t v7 = *(void *)(a1 + 120), (v8 = std::__shared_weak_count::lock(v6)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  size_t v9 = v8;
  atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    uint64_t v50 = 0;
    xpc_object_t v10 = std::__shared_weak_count::lock(v8);
    unint64_t v51 = v10;
    if (v10)
    {
LABEL_6:
      uint64_t v50 = v7;
      goto LABEL_9;
    }
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
    uint64_t v50 = 0;
    xpc_object_t v10 = std::__shared_weak_count::lock(v9);
    unint64_t v51 = v10;
    if (v10) {
      goto LABEL_6;
    }
  }
  uint64_t v7 = 0;
LABEL_9:
  unint64_t v48 = (void *)0xAAAAAAAAAAAAAAAALL;
  dispatch_object_t v49 = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN10BootModule14softReset_syncE9ResetInfoN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEE_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_121_0;
  aBlock[4] = a1;
  void aBlock[5] = v7;
  uint64_t v39 = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  size_t v11 = *a3;
  if (*a3) {
    size_t v11 = _Block_copy(v11);
  }
  char v40 = v11;
  ResetInfo::ResetInfo(&v41, a2);
  uint64_t v12 = _Block_copy(aBlock);
  uint64_t v13 = *(NSObject **)(a1 + 136);
  if (v13) {
    dispatch_retain(*(dispatch_object_t *)(a1 + 136));
  }
  unint64_t v48 = v12;
  dispatch_object_t v49 = v13;
  unint64_t v36 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v37 = (std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL;
  uint64_t v14 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  uint64_t v15 = off_1EBBDD2A0;
  if (!off_1EBBDD2A0)
  {
    CommandDriverFactory::create_default_global((uint64_t *)&v52, v14);
    long long v16 = v52;
    long long v52 = 0uLL;
    std::string v17 = (std::__shared_weak_count *)*(&off_1EBBDD2A0 + 1);
    off_1EBBDD2A0 = v16;
    if (v17 && !atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
    xpc_object_t v18 = (std::__shared_weak_count *)*((void *)&v52 + 1);
    if (*((void *)&v52 + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v52 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
    uint64_t v15 = off_1EBBDD2A0;
  }
  uint64_t v19 = (std::__shared_weak_count *)*(&off_1EBBDD2A0 + 1);
  uint64_t v32 = v15;
  uint64_t v33 = *(&off_1EBBDD2A0 + 1);
  if (*(&off_1EBBDD2A0 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDD2A0 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(unint64_t *__return_ptr, uint64_t))(*(void *)v15 + 16))(&v34, v15);
  unint64_t v36 = 0;
  uint64_t v37 = 0;
  if (v35)
  {
    uint64_t v37 = std::__shared_weak_count::lock(v35);
    if (v37) {
      unint64_t v36 = v34;
    }
    if (v35) {
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
    unint64_t v20 = v36;
    if (!v36) {
      goto LABEL_43;
    }
  }
  else
  {
    unint64_t v20 = v36;
    if (!v36) {
      goto LABEL_43;
    }
  }
  uint64_t v21 = *(void *)(a1 + 480);
  if (v21) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v21 + 104))(v21, 5);
  }
  xpc_object_t v22 = v48;
  if (v48) {
    xpc_object_t v22 = _Block_copy(v48);
  }
  uint64_t v30 = v22;
  dispatch_object_t object = v49;
  if (v49) {
    dispatch_retain(v49);
  }
  (*(void (**)(unint64_t, uint64_t, void **))(*(void *)v20 + 56))(v20, 8000000000, &v30);
  if (object) {
    dispatch_release(object);
  }
  if (v30) {
    _Block_release(v30);
  }
LABEL_43:
  uint64_t v23 = v37;
  if (v37 && !atomic_fetch_add(&v37->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
  }
  if (v49) {
    dispatch_release(v49);
  }
  if (v48) {
    _Block_release(v48);
  }
  if (v47 < 0)
  {
    operator delete(__p);
    if ((v45 & 0x80000000) == 0)
    {
LABEL_52:
      if ((v43 & 0x80000000) == 0) {
        goto LABEL_53;
      }
      goto LABEL_58;
    }
  }
  else if ((v45 & 0x80000000) == 0)
  {
    goto LABEL_52;
  }
  operator delete(v44);
  if ((v43 & 0x80000000) == 0)
  {
LABEL_53:
    if ((SHIBYTE(v41.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_54;
    }
    goto LABEL_59;
  }
LABEL_58:
  operator delete(v42);
  if ((SHIBYTE(v41.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_54:
    unint64_t v24 = v40;
    if (!v40) {
      goto LABEL_61;
    }
    goto LABEL_60;
  }
LABEL_59:
  operator delete(v41.__r_.__value_.__l.__data_);
  unint64_t v24 = v40;
  if (v40) {
LABEL_60:
  }
    _Block_release(v24);
LABEL_61:
  CFAllocatorRef v25 = v39;
  if (v39 && !atomic_fetch_add(&v39->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
    std::__shared_weak_count::__release_weak(v25);
  }
  uint64_t v26 = v51;
  if (v51 && !atomic_fetch_add(&v51->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
    std::__shared_weak_count::__release_weak(v26);
  }
  std::__shared_weak_count::__release_weak(v9);
}

void sub_1C57EC398(_Unwind_Exception *a1)
{
}

void sub_1C57EC3B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *aBlock)
{
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>::~callback(v27 - 112);
  ResetInfo::~ResetInfo(v25);
  if (aBlock) {
    _Block_release(aBlock);
  }
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v26 + 40);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v27 - 96);
  std::__shared_weak_count::__release_weak(v24);
  _Unwind_Resume(a1);
}

void ___ZN10BootModule14softReset_syncE9ResetInfoN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEE_block_invoke(uint64_t a1, ctu::cf **a2)
{
  uint64_t v75 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(a1 + 32);
  long long v66 = 0uLL;
  uint64_t v67 = 0;
  if (*a2) {
    int v4 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  }
  else {
    int v4 = 0;
  }
  if (!v4)
  {
    uint64_t v7 = *(NSObject **)(v3 + 88);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1C5767000, v7, OS_LOG_TYPE_DEFAULT, "#I Soft reset issued; waiting for reset detection",
        buf,
        2u);
    }
    uint64_t v8 = *(void *)(v3 + 176);
    size_t v9 = (char *)operator new(0x20uLL);
    unint64_t v46 = v9;
    long long v47 = xmmword_1C599E840;
    strcpy(v9, "Soft Reset Wait for Reset");
    v35[0] = MEMORY[0x1E4F143A8];
    v35[1] = 1174405120;
    v35[2] = ___ZN10BootModule14softReset_syncE9ResetInfoN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEE_block_invoke_103;
    v35[3] = &__block_descriptor_tmp_117;
    uint64_t v11 = *(void *)(a1 + 40);
    xpc_object_t v10 = *(std::__shared_weak_count **)(a1 + 48);
    v35[4] = v3;
    v35[5] = v11;
    unint64_t v36 = v10;
    if (v10) {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v12 = *(void **)(a1 + 56);
    if (v12) {
      uint64_t v12 = _Block_copy(v12);
    }
    aBlock = v12;
    ResetInfo::ResetInfo(&v38, (long long *)(a1 + 64));
    uint64_t v13 = _Block_copy(v35);
    char v45 = v13;
    dispatch_time_t v14 = dispatch_time(0, 1000000000 * _MergedGlobals_5);
    ResetDetection::add(v8, (uint64_t)&v46, 1, &v45, v14);
    if (v13) {
      _Block_release(v13);
    }
    operator delete(v9);
    if (v44 < 0)
    {
      operator delete(__p);
      if ((v42 & 0x80000000) == 0)
      {
LABEL_20:
        if ((v40 & 0x80000000) == 0) {
          goto LABEL_21;
        }
        goto LABEL_26;
      }
    }
    else if ((v42 & 0x80000000) == 0)
    {
      goto LABEL_20;
    }
    operator delete(v41);
    if ((v40 & 0x80000000) == 0)
    {
LABEL_21:
      if ((SHIBYTE(v38.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_22;
      }
      goto LABEL_27;
    }
LABEL_26:
    operator delete(v39);
    if ((SHIBYTE(v38.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_22:
      uint64_t v15 = aBlock;
      if (!aBlock) {
        goto LABEL_29;
      }
      goto LABEL_28;
    }
LABEL_27:
    operator delete(v38.__r_.__value_.__l.__data_);
    uint64_t v15 = aBlock;
    if (!aBlock)
    {
LABEL_29:
      long long v16 = v36;
      if (v36 && !atomic_fetch_add(&v36->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
        if ((SHIBYTE(v67) & 0x80000000) == 0) {
          return;
        }
        goto LABEL_82;
      }
      goto LABEL_81;
    }
LABEL_28:
    _Block_release(v15);
    goto LABEL_29;
  }
  ctu::cf::show((uint64_t *)buf, *a2, a2);
  if (SHIBYTE(v67) < 0) {
    operator delete((void *)v66);
  }
  long long v66 = *(_OWORD *)buf;
  uint64_t v67 = v69;
  uint64_t v5 = *(NSObject **)(v3 + 88);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
  {
    std::string v17 = &v66;
    if (v67 < 0) {
      std::string v17 = (long long *)v66;
    }
    *(_DWORD *)long long buf = 136446210;
    *(void *)&buf[4] = v17;
    _os_log_error_impl(&dword_1C5767000, v5, OS_LOG_TYPE_ERROR, "Soft reset failed; falling back to hard reset: %{public}s",
      buf,
      0xCu);
    uint64_t v6 = *(void *)(a1 + 56);
    if ((SHIBYTE(v67) & 0x80000000) == 0) {
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v6 = *(void *)(a1 + 56);
    if ((SHIBYTE(v67) & 0x80000000) == 0)
    {
LABEL_9:
      *(_OWORD *)long long buf = v66;
      *(void *)&long long v69 = v67;
      goto LABEL_37;
    }
  }
  std::string::__init_copy_ctor_external((std::string *)buf, (const std::string::value_type *)v66, *((std::string::size_type *)&v66 + 1));
LABEL_37:
  (*(void (**)(uint64_t, uint64_t, uint8_t *))(v6 + 16))(v6, 3760250880, buf);
  if (SBYTE7(v69) < 0)
  {
    operator delete(*(void **)buf);
    uint64_t v18 = v3 + 152;
    if ((long long *)(v3 + 152) == &v66) {
      goto LABEL_52;
    }
  }
  else
  {
    uint64_t v18 = v3 + 152;
    if ((long long *)(v3 + 152) == &v66) {
      goto LABEL_52;
    }
  }
  if (*(char *)(v3 + 175) < 0)
  {
    if (v67 >= 0) {
      uint64_t v19 = &v66;
    }
    else {
      uint64_t v19 = (long long *)v66;
    }
    if (v67 >= 0) {
      size_t v20 = HIBYTE(v67);
    }
    else {
      size_t v20 = *((void *)&v66 + 1);
    }
    std::string::__assign_no_alias<false>((void **)v18, v19, v20);
  }
  else if (v67 < 0)
  {
    std::string::__assign_no_alias<true>((void *)v18, (void *)v66, *((size_t *)&v66 + 1));
  }
  else
  {
    *(_OWORD *)uint64_t v18 = v66;
    *(void *)(v18 + 16) = v67;
  }
LABEL_52:
  uint64_t v21 = *(void *)(v3 + 480);
  if (v21) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v21 + 104))(v21, 7);
  }
  *(void *)&long long v22 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v22 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v73 = v22;
  long long v74 = v22;
  long long v71 = v22;
  long long v72 = v22;
  long long v69 = v22;
  long long v70 = v22;
  *(_OWORD *)long long buf = v22;
  uint64_t v23 = (const void *)*MEMORY[0x1E4F4C6E8];
  size_t v24 = strlen((const char *)*MEMORY[0x1E4F4C6E8]);
  if (v24 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v25 = v24;
  if (v24 >= 0x17)
  {
    uint64_t v27 = (v24 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v24 | 7) != 0x17) {
      uint64_t v27 = v24 | 7;
    }
    uint64_t v28 = v27 + 1;
    p_dst = (long long *)operator new(v27 + 1);
    *((void *)&__dst + 1) = v25;
    unint64_t v65 = v28 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
    goto LABEL_61;
  }
  HIBYTE(v65) = v24;
  p_dst = &__dst;
  if (v24) {
LABEL_61:
  }
    memmove(p_dst, v23, v25);
  *((unsigned char *)p_dst + v25) = 0;
  uint64_t v29 = (const void *)*MEMORY[0x1E4F4D038];
  size_t v30 = strlen((const char *)*MEMORY[0x1E4F4D038]);
  if (v30 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v31 = v30;
  if (v30 >= 0x17)
  {
    uint64_t v33 = (v30 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v30 | 7) != 0x17) {
      uint64_t v33 = v30 | 7;
    }
    uint64_t v34 = v33 + 1;
    uint64_t v32 = operator new(v33 + 1);
    *((void *)&v62 + 1) = v31;
    unint64_t v63 = v34 | 0x8000000000000000;
    *(void *)&long long v62 = v32;
    goto LABEL_69;
  }
  HIBYTE(v63) = v30;
  uint64_t v32 = &v62;
  if (v30) {
LABEL_69:
  }
    memmove(v32, v29, v31);
  *((unsigned char *)v32 + v31) = 0;
  Timestamp::Timestamp((Timestamp *)v58);
  Timestamp::asString((uint64_t)v58, 0, 9, v60);
  char v57 = 0;
  LOBYTE(v56) = 0;
  ResetInfo::ResetInfo((std::string *)buf, &__dst, &v62, (long long *)v18, (uint64_t)v60, 7, &v56);
  if ((v61 & 0x80000000) == 0)
  {
    std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v58, v59);
    if ((SHIBYTE(v63) & 0x80000000) == 0) {
      goto LABEL_72;
    }
LABEL_85:
    operator delete((void *)v62);
    if ((SHIBYTE(v65) & 0x80000000) == 0) {
      goto LABEL_73;
    }
    goto LABEL_86;
  }
  operator delete(v60[0]);
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v58, v59);
  if (SHIBYTE(v63) < 0) {
    goto LABEL_85;
  }
LABEL_72:
  if ((SHIBYTE(v65) & 0x80000000) == 0) {
    goto LABEL_73;
  }
LABEL_86:
  operator delete((void *)__dst);
LABEL_73:
  ResetInfo::ResetInfo(&v49, (long long *)buf);
  unint64_t v48 = 0;
  BootModule::handleReset_sync(v3, (uint64_t)&v49, &v48);
  if (v55 < 0)
  {
    operator delete(v54);
    if ((v53 & 0x80000000) == 0)
    {
LABEL_75:
      if ((v51 & 0x80000000) == 0) {
        goto LABEL_76;
      }
      goto LABEL_89;
    }
  }
  else if ((v53 & 0x80000000) == 0)
  {
    goto LABEL_75;
  }
  operator delete(v52);
  if ((v51 & 0x80000000) == 0)
  {
LABEL_76:
    if ((SHIBYTE(v49.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_77;
    }
    goto LABEL_90;
  }
LABEL_89:
  operator delete(v50);
  if ((SHIBYTE(v49.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_77:
    if ((SHIBYTE(v74) & 0x80000000) == 0) {
      goto LABEL_78;
    }
    goto LABEL_91;
  }
LABEL_90:
  operator delete(v49.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v74) & 0x80000000) == 0)
  {
LABEL_78:
    if ((SBYTE7(v72) & 0x80000000) == 0) {
      goto LABEL_79;
    }
    goto LABEL_92;
  }
LABEL_91:
  operator delete(*((void **)&v73 + 1));
  if ((SBYTE7(v72) & 0x80000000) == 0)
  {
LABEL_79:
    if ((SHIBYTE(v70) & 0x80000000) == 0) {
      goto LABEL_80;
    }
    goto LABEL_93;
  }
LABEL_92:
  operator delete((void *)v71);
  if (SHIBYTE(v70) < 0)
  {
LABEL_93:
    operator delete(*((void **)&v69 + 1));
    if (SBYTE7(v69) < 0) {
      goto LABEL_94;
    }
LABEL_81:
    if ((SHIBYTE(v67) & 0x80000000) == 0) {
      return;
    }
    goto LABEL_82;
  }
LABEL_80:
  if ((SBYTE7(v69) & 0x80000000) == 0) {
    goto LABEL_81;
  }
LABEL_94:
  operator delete(*(void **)buf);
  if (SHIBYTE(v67) < 0) {
LABEL_82:
  }
    operator delete((void *)v66);
}

void sub_1C57ECB70(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void ___ZN10BootModule14softReset_syncE9ResetInfoN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEE_block_invoke_103(uint64_t a1, int a2)
{
  uint64_t v83 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(a1 + 32);
  if (!a2)
  {
    uint64_t v7 = *(NSObject **)(v3 + 88);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf) = 0;
      _os_log_impl(&dword_1C5767000, v7, OS_LOG_TYPE_DEFAULT, "#I Reset detection observed for soft reset", (uint8_t *)&buf, 2u);
    }
    usleep(0x249F0u);
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 1174405120;
    aBlock[2] = ___ZN10BootModule14softReset_syncE9ResetInfoN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEE_block_invoke_104;
    aBlock[3] = &__block_descriptor_tmp_112_2;
    aBlock[4] = v3;
    uint64_t v8 = *(void **)(a1 + 56);
    if (v8) {
      uint64_t v8 = _Block_copy(v8);
    }
    unint64_t v65 = v8;
    ResetInfo::ResetInfo(&v66, (long long *)(a1 + 64));
    size_t v9 = *(std::__shared_weak_count **)(a1 + 48);
    uint64_t v73 = *(void *)(a1 + 40);
    long long v74 = v9;
    if (v9) {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    xpc_object_t v10 = _Block_copy(aBlock);
    uint64_t v75 = v10;
    BootModule::checkFSSyncStatus_sync(v3, &v75);
    if (v10) {
      _Block_release(v10);
    }
    uint64_t v11 = v74;
    if (v74 && !atomic_fetch_add(&v74->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
      if ((v72 & 0x80000000) == 0)
      {
LABEL_22:
        if ((v70 & 0x80000000) == 0) {
          goto LABEL_23;
        }
        goto LABEL_45;
      }
    }
    else if ((v72 & 0x80000000) == 0)
    {
      goto LABEL_22;
    }
    operator delete(__p);
    if ((v70 & 0x80000000) == 0)
    {
LABEL_23:
      if ((v68 & 0x80000000) == 0) {
        goto LABEL_24;
      }
      goto LABEL_46;
    }
LABEL_45:
    operator delete(v69);
    if ((v68 & 0x80000000) == 0)
    {
LABEL_24:
      if ((SHIBYTE(v66.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_25;
      }
      goto LABEL_47;
    }
LABEL_46:
    operator delete(v67);
    if ((SHIBYTE(v66.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_25:
      uint64_t v12 = v65;
      if (!v65) {
        return;
      }
      goto LABEL_48;
    }
LABEL_47:
    operator delete(v66.__r_.__value_.__l.__data_);
    uint64_t v12 = v65;
    if (!v65) {
      return;
    }
LABEL_48:
    _Block_release(v12);
    return;
  }
  int v4 = (char *)operator new(0x38uLL);
  v63.__r_.__value_.__r.__words[0] = (std::string::size_type)v4;
  *(_OWORD *)&v63.__r_.__value_.__r.__words[1] = xmmword_1C599E850;
  strcpy(v4, "Soft reset failed; timeout waiting for reset detection");
  uint64_t v5 = *(NSObject **)(v3 + 88);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
  {
    LODWORD(buf) = 136315138;
    *(void *)((char *)&buf + 4) = v4;
    _os_log_error_impl(&dword_1C5767000, v5, OS_LOG_TYPE_ERROR, "%s", (uint8_t *)&buf, 0xCu);
  }
  if (TelephonyUtilIsInternalBuild())
  {
    uint64_t v6 = *(NSObject **)(v3 + 88);
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  int IsCarrierBuild = TelephonyUtilIsCarrierBuild();
  uint64_t v6 = *(NSObject **)(v3 + 88);
  BOOL v14 = os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
  if (IsCarrierBuild)
  {
    if (!v14)
    {
LABEL_7:
      if ((std::string *)(v3 + 152) != &v63)
      {
        if (*(char *)(v3 + 175) < 0)
        {
          if ((v63.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            long long v16 = &v63;
          }
          else {
            long long v16 = (std::string *)v63.__r_.__value_.__r.__words[0];
          }
          if ((v63.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            size_t size = HIBYTE(v63.__r_.__value_.__r.__words[2]);
          }
          else {
            size_t size = v63.__r_.__value_.__l.__size_;
          }
          std::string::__assign_no_alias<false>((void **)(v3 + 152), v16, size);
        }
        else if ((*((unsigned char *)&v63.__r_.__value_.__s + 23) & 0x80) != 0)
        {
          std::string::__assign_no_alias<true>((void *)(v3 + 152), v63.__r_.__value_.__l.__data_, v63.__r_.__value_.__l.__size_);
        }
        else
        {
          *(std::string *)(v3 + 152) = v63;
        }
      }
      uint64_t v18 = *(void *)(a1 + 56);
      if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)&buf, v63.__r_.__value_.__l.__data_, v63.__r_.__value_.__l.__size_);
      }
      else
      {
        long long buf = *(_OWORD *)&v63.__r_.__value_.__l.__data_;
        *(void *)&long long v77 = *((void *)&v63.__r_.__value_.__l + 2);
      }
      (*(void (**)(uint64_t, uint64_t, long long *))(v18 + 16))(v18, 3760250880, &buf);
      if (SBYTE7(v77) < 0) {
        operator delete((void *)buf);
      }
      *(void *)&long long v19 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v19 + 1) = 0xAAAAAAAAAAAAAAAALL;
      long long v81 = v19;
      long long v82 = v19;
      long long v79 = v19;
      long long v80 = v19;
      long long v77 = v19;
      long long v78 = v19;
      long long buf = v19;
      size_t v20 = (const void *)*MEMORY[0x1E4F4C6E8];
      size_t v21 = strlen((const char *)*MEMORY[0x1E4F4C6E8]);
      if (v21 > 0x7FFFFFFFFFFFFFF7) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      size_t v22 = v21;
      if (v21 >= 0x17)
      {
        uint64_t v24 = (v21 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v21 | 7) != 0x17) {
          uint64_t v24 = v21 | 7;
        }
        uint64_t v25 = v24 + 1;
        p_dst = (long long *)operator new(v24 + 1);
        *((void *)&__dst + 1) = v22;
        unint64_t v62 = v25 | 0x8000000000000000;
        *(void *)&long long __dst = p_dst;
      }
      else
      {
        HIBYTE(v62) = v21;
        p_dst = &__dst;
        if (!v21)
        {
LABEL_63:
          *((unsigned char *)p_dst + v22) = 0;
          uint64_t v26 = (const void *)*MEMORY[0x1E4F4D190];
          size_t v27 = strlen((const char *)*MEMORY[0x1E4F4D190]);
          if (v27 > 0x7FFFFFFFFFFFFFF7) {
            std::string::__throw_length_error[abi:ne180100]();
          }
          size_t v28 = v27;
          if (v27 >= 0x17)
          {
            uint64_t v30 = (v27 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v27 | 7) != 0x17) {
              uint64_t v30 = v27 | 7;
            }
            uint64_t v31 = v30 + 1;
            uint64_t v29 = operator new(v30 + 1);
            *((void *)&v59 + 1) = v28;
            unint64_t v60 = v31 | 0x8000000000000000;
            *(void *)&long long v59 = v29;
          }
          else
          {
            HIBYTE(v60) = v27;
            uint64_t v29 = &v59;
            if (!v27)
            {
LABEL_71:
              v29[v28] = 0;
              Timestamp::Timestamp((Timestamp *)v55);
              Timestamp::asString((uint64_t)v55, 0, 9, v57);
              char v54 = 0;
              LOBYTE(v53) = 0;
              ResetInfo::ResetInfo((std::string *)&buf, &__dst, &v59, (long long *)(v3 + 152), (uint64_t)v57, 7, &v53);
              if (v58 < 0)
              {
                operator delete(v57[0]);
                std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v55, v56);
                if ((SHIBYTE(v60) & 0x80000000) == 0)
                {
LABEL_73:
                  if ((SHIBYTE(v62) & 0x80000000) == 0) {
                    goto LABEL_74;
                  }
LABEL_85:
                  operator delete((void *)__dst);
LABEL_74:
                  ResetInfo::ResetInfo(&v46, &buf);
                  char v45 = 0;
                  BootModule::handleReset_sync(v3, (uint64_t)&v46, &v45);
                  if (v52 < 0)
                  {
                    operator delete(v51);
                    if ((v50 & 0x80000000) == 0)
                    {
LABEL_76:
                      if ((v48 & 0x80000000) == 0) {
                        goto LABEL_77;
                      }
                      goto LABEL_88;
                    }
                  }
                  else if ((v50 & 0x80000000) == 0)
                  {
                    goto LABEL_76;
                  }
                  operator delete(v49);
                  if ((v48 & 0x80000000) == 0)
                  {
LABEL_77:
                    if ((SHIBYTE(v46.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                      goto LABEL_78;
                    }
                    goto LABEL_89;
                  }
LABEL_88:
                  operator delete(v47);
                  if ((SHIBYTE(v46.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  {
LABEL_78:
                    if ((SHIBYTE(v82) & 0x80000000) == 0) {
                      goto LABEL_79;
                    }
                    goto LABEL_90;
                  }
LABEL_89:
                  operator delete(v46.__r_.__value_.__l.__data_);
                  if ((SHIBYTE(v82) & 0x80000000) == 0)
                  {
LABEL_79:
                    if ((SBYTE7(v80) & 0x80000000) == 0) {
                      goto LABEL_80;
                    }
                    goto LABEL_91;
                  }
LABEL_90:
                  operator delete(*((void **)&v81 + 1));
                  if ((SBYTE7(v80) & 0x80000000) == 0)
                  {
LABEL_80:
                    if ((SHIBYTE(v78) & 0x80000000) == 0) {
                      goto LABEL_81;
                    }
                    goto LABEL_92;
                  }
LABEL_91:
                  operator delete((void *)v79);
                  if ((SHIBYTE(v78) & 0x80000000) == 0)
                  {
LABEL_81:
                    if ((SBYTE7(v77) & 0x80000000) == 0) {
                      goto LABEL_110;
                    }
LABEL_93:
                    operator delete((void *)buf);
                    goto LABEL_110;
                  }
LABEL_92:
                  operator delete(*((void **)&v77 + 1));
                  if ((SBYTE7(v77) & 0x80000000) == 0) {
                    goto LABEL_110;
                  }
                  goto LABEL_93;
                }
              }
              else
              {
                std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v55, v56);
                if ((SHIBYTE(v60) & 0x80000000) == 0) {
                  goto LABEL_73;
                }
              }
              operator delete((void *)v59);
              if ((SHIBYTE(v62) & 0x80000000) == 0) {
                goto LABEL_74;
              }
              goto LABEL_85;
            }
          }
          memmove(v29, v26, v28);
          goto LABEL_71;
        }
      }
      memmove(p_dst, v20, v22);
      goto LABEL_63;
    }
LABEL_6:
    LOWORD(buf) = 0;
    _os_log_impl(&dword_1C5767000, v6, OS_LOG_TYPE_DEFAULT, "#I Dumping logs", (uint8_t *)&buf, 2u);
    goto LABEL_7;
  }
  if (v14)
  {
    LOWORD(buf) = 0;
    _os_log_impl(&dword_1C5767000, v6, OS_LOG_TYPE_DEFAULT, "#I Falling back to hard reset", (uint8_t *)&buf, 2u);
  }
  ResetInfo::ResetInfo(&v38, (long long *)(a1 + 64));
  v34[0] = MEMORY[0x1E4F143A8];
  v34[1] = 1174405120;
  v34[2] = ___ZN10BootModule14softReset_syncE9ResetInfoN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEE_block_invoke_114;
  v34[3] = &__block_descriptor_tmp_115;
  uint64_t v15 = *(void **)(a1 + 56);
  if (v15) {
    uint64_t v15 = _Block_copy(v15);
  }
  char v35 = v15;
  if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v36, v63.__r_.__value_.__l.__data_, v63.__r_.__value_.__l.__size_);
  }
  else {
    std::string v36 = v63;
  }
  uint64_t v32 = _Block_copy(v34);
  uint64_t v37 = v32;
  BootModule::hardReset_sync(v3, (uint64_t)&v38, (uint64_t *)&v37);
  if (v32) {
    _Block_release(v32);
  }
  if (v44 < 0)
  {
    operator delete(v43);
    if ((v42 & 0x80000000) == 0)
    {
LABEL_99:
      if ((v40 & 0x80000000) == 0) {
        goto LABEL_100;
      }
      goto LABEL_106;
    }
  }
  else if ((v42 & 0x80000000) == 0)
  {
    goto LABEL_99;
  }
  operator delete(v41);
  if ((v40 & 0x80000000) == 0)
  {
LABEL_100:
    if ((SHIBYTE(v38.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_101;
    }
    goto LABEL_107;
  }
LABEL_106:
  operator delete(v39);
  if ((SHIBYTE(v38.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_101:
    if ((SHIBYTE(v36.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_102;
    }
LABEL_108:
    operator delete(v36.__r_.__value_.__l.__data_);
    uint64_t v33 = v35;
    if (!v35) {
      goto LABEL_110;
    }
    goto LABEL_109;
  }
LABEL_107:
  operator delete(v38.__r_.__value_.__l.__data_);
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_108;
  }
LABEL_102:
  uint64_t v33 = v35;
  if (v35) {
LABEL_109:
  }
    _Block_release(v33);
LABEL_110:
  if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v63.__r_.__value_.__l.__data_);
  }
}

void sub_1C57ED498(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *aBlock, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58,uint64_t a59,void *a60,uint64_t a61,uint64_t a62,void *__p)
{
  if (aBlock) {
    _Block_release(aBlock);
  }
  ResetInfo::~ResetInfo(&a19);
  if (a68 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void ___ZN10BootModule14softReset_syncE9ResetInfoN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEE_block_invoke_104(void *a1, int a2, int a3)
{
  uint64_t v88 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = a1[4];
  uint64_t v7 = *(NSObject **)(v6 + 88);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 67109376;
    *(_DWORD *)&buf[4] = a2;
    *(_WORD *)&uint8_t buf[8] = 1024;
    *(_DWORD *)&buf[10] = a3;
    _os_log_impl(&dword_1C5767000, v7, OS_LOG_TYPE_DEFAULT, "#I Check FS Sync in progress: %d and sync not started: %d", buf, 0xEu);
  }
  if ((a2 & 1) != 0 || a3)
  {
    if (a2) {
      BOOL v14 = "Baseband shutdown during baseband filesystem sync";
    }
    else {
      BOOL v14 = "Baseband never started filesystem sync";
    }
    v80.__r_.__value_.__r.__words[2] = 0x13AAAAAA00AAAAAALL;
    *(_OWORD *)&v80.__r_.__value_.__l.__data_ = *(_OWORD *)"Soft reset failed: ";
    *(_DWORD *)((char *)&v80.__r_.__value_.__r.__words[1] + 7) = 540697701;
    if (a2) {
      std::string::size_type v15 = 49;
    }
    else {
      std::string::size_type v15 = 38;
    }
    std::string::append(&v80, v14, v15);
    if ((std::string *)(v6 + 152) != &v80)
    {
      if (*(char *)(v6 + 175) < 0)
      {
        if ((v80.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v37 = &v80;
        }
        else {
          uint64_t v37 = (std::string *)v80.__r_.__value_.__r.__words[0];
        }
        if ((v80.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          size_t size = HIBYTE(v80.__r_.__value_.__r.__words[2]);
        }
        else {
          size_t size = v80.__r_.__value_.__l.__size_;
        }
        std::string::__assign_no_alias<false>((void **)(v6 + 152), v37, size);
      }
      else if ((*((unsigned char *)&v80.__r_.__value_.__s + 23) & 0x80) != 0)
      {
        std::string::__assign_no_alias<true>((void *)(v6 + 152), v80.__r_.__value_.__l.__data_, v80.__r_.__value_.__l.__size_);
      }
      else
      {
        *(std::string *)(v6 + 152) = v80;
      }
    }
    uint64_t v39 = *(NSObject **)(v6 + 88);
    if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
    {
      std::string v41 = &v80;
      if ((v80.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string v41 = (std::string *)v80.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)long long buf = 136315138;
      *(void *)&buf[4] = v41;
      _os_log_error_impl(&dword_1C5767000, v39, OS_LOG_TYPE_ERROR, "%s", buf, 0xCu);
      uint64_t v40 = a1[5];
      if ((*((unsigned char *)&v80.__r_.__value_.__s + 23) & 0x80) == 0) {
        goto LABEL_73;
      }
    }
    else
    {
      uint64_t v40 = a1[5];
      if ((*((unsigned char *)&v80.__r_.__value_.__s + 23) & 0x80) == 0)
      {
LABEL_73:
        *(_OWORD *)long long buf = *(_OWORD *)&v80.__r_.__value_.__l.__data_;
        *(void *)&long long v82 = *((void *)&v80.__r_.__value_.__l + 2);
        goto LABEL_78;
      }
    }
    std::string::__init_copy_ctor_external((std::string *)buf, v80.__r_.__value_.__l.__data_, v80.__r_.__value_.__l.__size_);
LABEL_78:
    (*(void (**)(uint64_t, uint64_t, uint8_t *))(v40 + 16))(v40, 3760250880, buf);
    if (SBYTE7(v82) < 0)
    {
      operator delete(*(void **)buf);
      uint64_t v42 = *(void *)(v6 + 480);
      if (!v42) {
        goto LABEL_83;
      }
    }
    else
    {
      uint64_t v42 = *(void *)(v6 + 480);
      if (!v42)
      {
LABEL_83:
        *(void *)&long long v43 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v43 + 1) = 0xAAAAAAAAAAAAAAAALL;
        long long v86 = v43;
        long long v87 = v43;
        long long v84 = v43;
        long long v85 = v43;
        long long v82 = v43;
        long long v83 = v43;
        *(_OWORD *)long long buf = v43;
        char v44 = (const void *)*MEMORY[0x1E4F4C6E8];
        size_t v45 = strlen((const char *)*MEMORY[0x1E4F4C6E8]);
        if (v45 > 0x7FFFFFFFFFFFFFF7) {
          std::string::__throw_length_error[abi:ne180100]();
        }
        size_t v46 = v45;
        if (v45 >= 0x17)
        {
          uint64_t v48 = (v45 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v45 | 7) != 0x17) {
            uint64_t v48 = v45 | 7;
          }
          uint64_t v49 = v48 + 1;
          long long v47 = (long long *)operator new(v48 + 1);
          *((void *)&v78 + 1) = v46;
          unint64_t v79 = v49 | 0x8000000000000000;
          *(void *)&long long v78 = v47;
        }
        else
        {
          HIBYTE(v79) = v45;
          long long v47 = &v78;
          if (!v45)
          {
LABEL_91:
            *((unsigned char *)v47 + v46) = 0;
            char v50 = (const void *)*MEMORY[0x1E4F4D240];
            size_t v51 = strlen((const char *)*MEMORY[0x1E4F4D240]);
            if (v51 > 0x7FFFFFFFFFFFFFF7) {
              std::string::__throw_length_error[abi:ne180100]();
            }
            size_t v52 = v51;
            if (v51 >= 0x17)
            {
              uint64_t v54 = (v51 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v51 | 7) != 0x17) {
                uint64_t v54 = v51 | 7;
              }
              uint64_t v55 = v54 + 1;
              long long v53 = operator new(v54 + 1);
              *((void *)&v76 + 1) = v52;
              unint64_t v77 = v55 | 0x8000000000000000;
              *(void *)&long long v76 = v53;
            }
            else
            {
              HIBYTE(v77) = v51;
              long long v53 = &v76;
              if (!v51)
              {
LABEL_99:
                v53[v52] = 0;
                Timestamp::Timestamp((Timestamp *)v72);
                Timestamp::asString((uint64_t)v72, 0, 9, __p);
                char v71 = 0;
                LOBYTE(v70) = 0;
                ResetInfo::ResetInfo((std::string *)buf, &v78, &v76, (long long *)(v6 + 152), (uint64_t)__p, 7, &v70);
                if (v75 < 0)
                {
                  operator delete(__p[0]);
                  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v72, v73);
                  if ((SHIBYTE(v77) & 0x80000000) == 0)
                  {
LABEL_101:
                    if ((SHIBYTE(v79) & 0x80000000) == 0) {
                      goto LABEL_102;
                    }
LABEL_114:
                    operator delete((void *)v78);
LABEL_102:
                    ResetInfo::ResetInfo(&v63, (long long *)buf);
                    unint64_t v62 = 0;
                    BootModule::handleReset_sync(v6, (uint64_t)&v63, &v62);
                    if (v69 < 0)
                    {
                      operator delete(v68);
                      if ((v67 & 0x80000000) == 0)
                      {
LABEL_104:
                        if ((v65 & 0x80000000) == 0) {
                          goto LABEL_105;
                        }
                        goto LABEL_117;
                      }
                    }
                    else if ((v67 & 0x80000000) == 0)
                    {
                      goto LABEL_104;
                    }
                    operator delete(v66);
                    if ((v65 & 0x80000000) == 0)
                    {
LABEL_105:
                      if ((SHIBYTE(v63.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                        goto LABEL_106;
                      }
                      goto LABEL_118;
                    }
LABEL_117:
                    operator delete(v64);
                    if ((SHIBYTE(v63.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                    {
LABEL_106:
                      if ((SHIBYTE(v87) & 0x80000000) == 0) {
                        goto LABEL_107;
                      }
                      goto LABEL_119;
                    }
LABEL_118:
                    operator delete(v63.__r_.__value_.__l.__data_);
                    if ((SHIBYTE(v87) & 0x80000000) == 0)
                    {
LABEL_107:
                      if ((SBYTE7(v85) & 0x80000000) == 0) {
                        goto LABEL_108;
                      }
                      goto LABEL_120;
                    }
LABEL_119:
                    operator delete(*((void **)&v86 + 1));
                    if ((SBYTE7(v85) & 0x80000000) == 0)
                    {
LABEL_108:
                      if ((SHIBYTE(v83) & 0x80000000) == 0) {
                        goto LABEL_109;
                      }
                      goto LABEL_121;
                    }
LABEL_120:
                    operator delete((void *)v84);
                    if ((SHIBYTE(v83) & 0x80000000) == 0)
                    {
LABEL_109:
                      if ((SBYTE7(v82) & 0x80000000) == 0) {
                        goto LABEL_110;
                      }
                      goto LABEL_122;
                    }
LABEL_121:
                    operator delete(*((void **)&v82 + 1));
                    if ((SBYTE7(v82) & 0x80000000) == 0)
                    {
LABEL_110:
                      if ((SHIBYTE(v80.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                        return;
                      }
                      goto LABEL_123;
                    }
LABEL_122:
                    operator delete(*(void **)buf);
                    if ((SHIBYTE(v80.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                      return;
                    }
LABEL_123:
                    operator delete(v80.__r_.__value_.__l.__data_);
                    return;
                  }
                }
                else
                {
                  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v72, v73);
                  if ((SHIBYTE(v77) & 0x80000000) == 0) {
                    goto LABEL_101;
                  }
                }
                operator delete((void *)v76);
                if ((SHIBYTE(v79) & 0x80000000) == 0) {
                  goto LABEL_102;
                }
                goto LABEL_114;
              }
            }
            memmove(v53, v50, v52);
            goto LABEL_99;
          }
        }
        memmove(v47, v44, v46);
        goto LABEL_91;
      }
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v42 + 104))(v42, 7);
    goto LABEL_83;
  }
  uint64_t v8 = *(void *)(v6 + 480);
  if (v8)
  {
    size_t v9 = (capabilities::ipc *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v8 + 104))(v8, 6);
    if (capabilities::ipc::supportsPCI(v9)) {
      (*(void (**)(void))(**(void **)(v6 + 480) + 64))(*(void *)(v6 + 480));
    }
  }
  uint64_t v10 = a1[5];
  BYTE7(v82) = 0;
  buf[0] = 0;
  (*(void (**)(void))(v10 + 16))();
  if (SBYTE7(v82) < 0) {
    operator delete(*(void **)buf);
  }
  *(void *)&long long v78 = 0;
  uint64_t v11 = *MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (Mutable) {
    *(void *)&long long v78 = Mutable;
  }
  else {
    CFMutableDictionaryRef Mutable = (__CFDictionary *)v78;
  }
  ctu::cf::insert<char const*,char const*>(Mutable, (const __CFString **)*MEMORY[0x1E4F4C688], (const __CFString **)*MEMORY[0x1E4F4CBC8], v11, v13);
  ResetInfo::addToDict((uint64_t)(a1 + 6), (__CFDictionary **)&v78, v16, v17, v18);
  v80.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
  v80.__r_.__value_.__l.__size_ = 0xAAAAAAAAAAAAAAAALL;
  pthread_mutex_lock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
  long long v19 = (uint64_t *)off_1EBBDCFD0;
  if (!off_1EBBDCFD0)
  {
    ABMServer::create_default_global(buf);
    long long v20 = *(_OWORD *)buf;
    memset(buf, 0, sizeof(buf));
    size_t v21 = (std::__shared_weak_count *)*(&off_1EBBDCFD0 + 1);
    off_1EBBDCFD0 = v20;
    if (v21 && !atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
    size_t v22 = *(std::__shared_weak_count **)&buf[8];
    if (*(void *)&buf[8]
      && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
    long long v19 = (uint64_t *)off_1EBBDCFD0;
  }
  v80.__r_.__value_.__r.__words[0] = (std::string::size_type)v19;
  v80.__r_.__value_.__l.__size_ = *(&off_1EBBDCFD0 + 1);
  if (*(&off_1EBBDCFD0 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDCFD0 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
  uint64_t v23 = (const void *)*MEMORY[0x1E4F4CEF8];
  size_t v24 = strlen((const char *)*MEMORY[0x1E4F4CEF8]);
  if (v24 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v25 = (void *)v24;
  if (v24 >= 0x17)
  {
    uint64_t v28 = (v24 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v24 | 7) != 0x17) {
      uint64_t v28 = v24 | 7;
    }
    uint64_t v29 = v28 + 1;
    uint64_t v26 = (void **)operator new(v28 + 1);
    __dst[1] = v25;
    unint64_t v61 = v29 | 0x8000000000000000;
    __dst[0] = v26;
LABEL_41:
    memmove(v26, v23, (size_t)v25);
    *((unsigned char *)v25 + (void)v26) = 0;
    size_t v27 = (const void *)v78;
    if (!(void)v78) {
      goto LABEL_44;
    }
    goto LABEL_42;
  }
  HIBYTE(v61) = v24;
  uint64_t v26 = __dst;
  if (v24) {
    goto LABEL_41;
  }
  LOBYTE(__dst[0]) = 0;
  size_t v27 = (const void *)v78;
  if (!(void)v78) {
    goto LABEL_44;
  }
LABEL_42:
  CFTypeID v30 = CFGetTypeID(v27);
  if (v30 == CFDictionaryGetTypeID())
  {
    long long v59 = v27;
    CFRetain(v27);
    goto LABEL_45;
  }
LABEL_44:
  size_t v27 = 0;
  long long v59 = 0;
LABEL_45:
  v56[0] = MEMORY[0x1E4F143A8];
  v56[1] = 1174405120;
  v56[2] = ___ZN10BootModule14softReset_syncE9ResetInfoN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEE_block_invoke_108;
  v56[3] = &__block_descriptor_tmp_110;
  uint64_t v32 = a1[20];
  uint64_t v31 = (std::__shared_weak_count *)a1[21];
  v56[4] = v6;
  void v56[5] = v32;
  char v57 = v31;
  if (v31) {
    atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v33 = _Block_copy(v56);
  char v58 = v33;
  ABMServer::broadcast(v19, (uint64_t)__dst, &v59, &v58);
  if (v33) {
    _Block_release(v33);
  }
  if (v27) {
    CFRelease(v27);
  }
  if (SHIBYTE(v61) < 0) {
    operator delete(__dst[0]);
  }
  uint64_t v34 = v57;
  if (v57 && !atomic_fetch_add(&v57->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
    std::__shared_weak_count::__release_weak(v34);
    char v35 = (std::__shared_weak_count *)v80.__r_.__value_.__l.__size_;
    if (!v80.__r_.__value_.__l.__size_) {
      goto LABEL_57;
    }
  }
  else
  {
    char v35 = (std::__shared_weak_count *)v80.__r_.__value_.__l.__size_;
    if (!v80.__r_.__value_.__l.__size_) {
      goto LABEL_57;
    }
  }
  if (!atomic_fetch_add(&v35->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
    std::__shared_weak_count::__release_weak(v35);
    std::string v36 = (const void *)v78;
    if ((void)v78) {
      goto LABEL_58;
    }
    return;
  }
LABEL_57:
  std::string v36 = (const void *)v78;
  if ((void)v78) {
LABEL_58:
  }
    CFRelease(v36);
}

void sub_1C57EDF9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,void *a51,uint64_t a52,int a53,__int16 a54,char a55,char a56)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN10BootModule14softReset_syncE9ResetInfoN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEE_block_invoke_108(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  v2[0] = MEMORY[0x1E4F143A8];
  v2[1] = 0x40000000;
  v2[2] = ___ZN10BootModule14softReset_syncE9ResetInfoN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEE_block_invoke_2;
  v2[3] = &__block_descriptor_tmp_109;
  v2[4] = v1;
  ctu::SharedSynchronizable<BootModule>::execute_wrapped((uint64_t *)(v1 + 120), (uint64_t)v2);
}

void ___ZN10BootModule14softReset_syncE9ResetInfoN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEE_block_invoke_2(uint64_t a1)
{
}

uint64_t __copy_helper_block_e8_40c38_ZTSNSt3__110shared_ptrI10BootModuleEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c38_ZTSNSt3__110shared_ptrI10BootModuleEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void __copy_helper_block_e8_40c107_ZTSN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEEE48c15_ZTSK9ResetInfo160c38_ZTSNSt3__110shared_ptrI10BootModuleEE(std::string *a1, uint64_t a2)
{
  int v4 = *(void **)(a2 + 40);
  if (v4) {
    int v4 = _Block_copy(v4);
  }
  a1[1].__r_.__value_.__r.__words[2] = (std::string::size_type)v4;
  ResetInfo::ResetInfo(a1 + 2, (long long *)(a2 + 48));
  std::string::size_type v5 = *(void *)(a2 + 168);
  a1[6].__r_.__value_.__r.__words[2] = *(void *)(a2 + 160);
  a1[7].__r_.__value_.__r.__words[0] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
}

void sub_1C57EE2AC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(const void **)(v1 + 40);
  if (v3) {
    _Block_release(v3);
  }
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_40c107_ZTSN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEEE48c15_ZTSK9ResetInfo160c38_ZTSNSt3__110shared_ptrI10BootModuleEE(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 168);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    if ((*(char *)(a1 + 159) & 0x80000000) == 0)
    {
LABEL_4:
      if ((*(char *)(a1 + 119) & 0x80000000) == 0) {
        goto LABEL_5;
      }
      goto LABEL_11;
    }
  }
  else if ((*(char *)(a1 + 159) & 0x80000000) == 0)
  {
    goto LABEL_4;
  }
  operator delete(*(void **)(a1 + 136));
  if ((*(char *)(a1 + 119) & 0x80000000) == 0)
  {
LABEL_5:
    if ((*(char *)(a1 + 95) & 0x80000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(*(void **)(a1 + 96));
  if ((*(char *)(a1 + 95) & 0x80000000) == 0)
  {
LABEL_6:
    if ((*(char *)(a1 + 71) & 0x80000000) == 0) {
      goto LABEL_7;
    }
LABEL_13:
    operator delete(*(void **)(a1 + 48));
    uint64_t v3 = *(const void **)(a1 + 40);
    if (!v3) {
      return;
    }
    goto LABEL_14;
  }
LABEL_12:
  operator delete(*(void **)(a1 + 72));
  if (*(char *)(a1 + 71) < 0) {
    goto LABEL_13;
  }
LABEL_7:
  uint64_t v3 = *(const void **)(a1 + 40);
  if (v3) {
LABEL_14:
  }
    _Block_release(v3);
}

void ___ZN10BootModule14softReset_syncE9ResetInfoN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEE_block_invoke_114(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (*(char *)(a1 + 63) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a1 + 40), *(void *)(a1 + 48));
  }
  else {
    std::string __p = *(std::string *)(a1 + 40);
  }
  (*(void (**)(uint64_t, uint64_t, std::string *))(v1 + 16))(v1, 3760250880, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1C57EE43C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void __copy_helper_block_e8_32c107_ZTSN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEEE40c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1, uint64_t a2)
{
  int v4 = *(void **)(a2 + 32);
  if (v4) {
    int v4 = _Block_copy(v4);
  }
  *(void *)(a1 + 32) = v4;
  std::string::size_type v5 = (std::string *)(a1 + 40);
  if (*(char *)(a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(a2 + 40), *(void *)(a2 + 48));
  }
  else
  {
    long long v6 = *(_OWORD *)(a2 + 40);
    *(void *)(a1 + 56) = *(void *)(a2 + 56);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
}

void sub_1C57EE4C0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(const void **)(v1 + 32);
  if (v3) {
    _Block_release(v3);
  }
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_32c107_ZTSN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEEE40c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1)
{
  if (*(char *)(a1 + 63) < 0)
  {
    operator delete(*(void **)(a1 + 40));
    uint64_t v2 = *(const void **)(a1 + 32);
    if (!v2) {
      return;
    }
    goto LABEL_5;
  }
  uint64_t v2 = *(const void **)(a1 + 32);
  if (v2) {
LABEL_5:
  }
    _Block_release(v2);
}

void __copy_helper_block_e8_40c38_ZTSNSt3__110shared_ptrI10BootModuleEE56c107_ZTSN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEEE64c15_ZTSK9ResetInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  std::string::size_type v5 = *(void **)(a2 + 56);
  if (v5) {
    std::string::size_type v5 = _Block_copy(v5);
  }
  *(void *)(a1 + 56) = v5;
  ResetInfo::ResetInfo((std::string *)(a1 + 64), (long long *)(a2 + 64));
}

void sub_1C57EE594(_Unwind_Exception *a1)
{
  uint64_t v4 = *(const void **)(v2 + 56);
  if (v4) {
    _Block_release(v4);
  }
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void __destroy_helper_block_e8_40c38_ZTSNSt3__110shared_ptrI10BootModuleEE56c107_ZTSN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEEE64c15_ZTSK9ResetInfo(uint64_t a1)
{
  if (*(char *)(a1 + 175) < 0)
  {
    operator delete(*(void **)(a1 + 152));
    if ((*(char *)(a1 + 135) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(a1 + 111) & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else if ((*(char *)(a1 + 135) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 112));
  if ((*(char *)(a1 + 111) & 0x80000000) == 0)
  {
LABEL_4:
    if ((*(char *)(a1 + 87) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
LABEL_9:
  operator delete(*(void **)(a1 + 88));
  if ((*(char *)(a1 + 87) & 0x80000000) == 0)
  {
LABEL_5:
    uint64_t v2 = *(const void **)(a1 + 56);
    if (!v2) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }
LABEL_10:
  operator delete(*(void **)(a1 + 64));
  uint64_t v2 = *(const void **)(a1 + 56);
  if (v2) {
LABEL_11:
  }
    _Block_release(v2);
LABEL_12:
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
}

void BootModule::shutdown_sync(uint64_t a1, void *a2)
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  uint64_t v41 = 0;
  uint64_t v42 = &v41;
  uint64_t v43 = 0x4002000000;
  char v44 = __Block_byref_object_copy__2;
  size_t v45 = __Block_byref_object_dispose__2;
  memset(&v46, 0, sizeof(v46));
  if (*(_DWORD *)(a1 + 456) == 8)
  {
    std::string::__assign_external(&v46, "BootModule already in shutdown state", 0x24uLL);
    uint64_t v3 = (void (**)(void *, void, std::string *))*a2;
    if (*((char *)v42 + 63) < 0) {
      std::string::__init_copy_ctor_external(&buf, (const std::string::value_type *)v42[5], v42[6]);
    }
    else {
      std::string buf = *(std::string *)(v42 + 5);
    }
    v3[2](v3, 0, &buf);
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(buf.__r_.__value_.__l.__data_);
      _Block_object_dispose(&v41, 8);
      if ((SHIBYTE(v46.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        return;
      }
      goto LABEL_66;
    }
LABEL_65:
    _Block_object_dispose(&v41, 8);
    if ((SHIBYTE(v46.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
    goto LABEL_66;
  }
  uint64_t v6 = *(void *)(a1 + 120);
  std::string::size_type v5 = *(std::__shared_weak_count **)(a1 + 128);
  uint64_t v39 = v6;
  if (!v5 || (uint64_t v7 = std::__shared_weak_count::lock(v5), (v40 = v7) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v37 = (void *)0xAAAAAAAAAAAAAAAALL;
  dispatch_object_t object = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN10BootModule13shutdown_syncEN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEEE_block_invoke;
  aBlock[3] = &unk_1F20F4568;
  void aBlock[5] = a1;
  void aBlock[6] = v6;
  char v35 = v7;
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  aBlock[4] = &v41;
  uint64_t v8 = (void (**)(void *, void, std::string *))*a2;
  if (*a2) {
    uint64_t v8 = (void (**)(void *, void, std::string *))_Block_copy(v8);
  }
  std::string v36 = v8;
  size_t v9 = _Block_copy(aBlock);
  uint64_t v10 = *(NSObject **)(a1 + 136);
  if (v10) {
    dispatch_retain(*(dispatch_object_t *)(a1 + 136));
  }
  uint64_t v37 = v9;
  dispatch_object_t object = v10;
  unint64_t v32 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v33 = (std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL;
  uint64_t v11 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  uint64_t v12 = off_1EBBDD2A0;
  if (!off_1EBBDD2A0)
  {
    CommandDriverFactory::create_default_global((uint64_t *)&buf, v11);
    long long v13 = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
    *(_OWORD *)&buf.__r_.__value_.__l.__data_ = 0uLL;
    BOOL v14 = (std::__shared_weak_count *)*(&off_1EBBDD2A0 + 1);
    off_1EBBDD2A0 = v13;
    if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
    size_t size = (std::__shared_weak_count *)buf.__r_.__value_.__l.__size_;
    if (buf.__r_.__value_.__l.__size_
      && !atomic_fetch_add((atomic_ullong *volatile)(buf.__r_.__value_.__l.__size_ + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
    uint64_t v12 = off_1EBBDD2A0;
  }
  uint64_t v16 = (std::__shared_weak_count *)*(&off_1EBBDD2A0 + 1);
  uint64_t v28 = v12;
  uint64_t v29 = *(&off_1EBBDD2A0 + 1);
  if (*(&off_1EBBDD2A0 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDD2A0 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(unint64_t *__return_ptr, uint64_t))(*(void *)v12 + 16))(&v30, v12);
  unint64_t v32 = 0;
  uint64_t v33 = 0;
  if (v31)
  {
    uint64_t v33 = std::__shared_weak_count::lock(v31);
    if (v33) {
      unint64_t v32 = v30;
    }
    if (v31) {
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
    unint64_t v17 = v32;
    if (!v32) {
      goto LABEL_44;
    }
  }
  else
  {
    unint64_t v17 = v32;
    if (!v32) {
      goto LABEL_44;
    }
  }
  if (*(unsigned char *)(a1 + 192))
  {
    CFAllocatorRef v18 = *(NSObject **)(a1 + 88);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf.__r_.__value_.__l.__data_) = 134217984;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = 10;
      _os_log_impl(&dword_1C5767000, v18, OS_LOG_TYPE_DEFAULT, "#I Poweroff baseband requested with timeout %llu sec", (uint8_t *)&buf, 0xCu);
    }
    long long v19 = v37;
    if (v37) {
      long long v19 = _Block_copy(v37);
    }
    uint64_t v26 = v19;
    dispatch_object_t v27 = object;
    if (object) {
      dispatch_retain(object);
    }
    (*(void (**)(unint64_t, uint64_t, void **))(*(void *)v17 + 64))(v17, 10000000000, &v26);
    if (v27) {
      dispatch_release(v27);
    }
    if (v26) {
      _Block_release(v26);
    }
    goto LABEL_52;
  }
LABEL_44:
  (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 96))(a1, 8);
  if (*(void *)(a1 + 480))
  {
    std::string::__assign_external((std::string *)(v42 + 5), "Transport clients are not started yet", 0x25uLL);
    long long v20 = *(NSObject **)(a1 + 88);
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      uint64_t v25 = v42 + 5;
      if (*((char *)v42 + 63) < 0) {
        uint64_t v25 = (void *)*v25;
      }
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v25;
      _os_log_error_impl(&dword_1C5767000, v20, OS_LOG_TYPE_ERROR, "Poweroff baseband request skipped (powercycle anyway); Error: %s",
        (uint8_t *)&buf,
        0xCu);
    }
    (*(void (**)(void))(**(void **)(a1 + 480) + 72))(*(void *)(a1 + 480));
  }
  size_t v21 = (void (**)(void *, void, std::string *))*a2;
  if (*((char *)v42 + 63) < 0) {
    std::string::__init_copy_ctor_external(&buf, (const std::string::value_type *)v42[5], v42[6]);
  }
  else {
    std::string buf = *(std::string *)(v42 + 5);
  }
  v21[2](v21, 3760250880, &buf);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf.__r_.__value_.__l.__data_);
  }
LABEL_52:
  size_t v22 = v33;
  if (v33 && !atomic_fetch_add(&v33->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
  }
  if (object) {
    dispatch_release(object);
  }
  if (v37) {
    _Block_release(v37);
  }
  if (v36) {
    _Block_release(v36);
  }
  uint64_t v23 = v35;
  if (v35 && !atomic_fetch_add(&v35->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
    size_t v24 = v40;
    if (!v40) {
      goto LABEL_65;
    }
  }
  else
  {
    size_t v24 = v40;
    if (!v40) {
      goto LABEL_65;
    }
  }
  if (atomic_fetch_add(&v24->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_65;
  }
  ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
  std::__shared_weak_count::__release_weak(v24);
  _Block_object_dispose(&v41, 8);
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
LABEL_66:
  }
    operator delete(v46.__r_.__value_.__l.__data_);
}

void sub_1C57EED74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *aBlock,char a27,uint64_t a28,char a29)
{
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>::~callback((uint64_t)&a27);
  if (aBlock) {
    _Block_release(aBlock);
  }
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v29 + 48);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a29);
  _Block_object_dispose((const void *)(v30 - 160), 8);
  if (*(char *)(v30 - 97) < 0) {
    operator delete(*(void **)(v30 - 120));
  }
  _Unwind_Resume(a1);
}

void ___ZN10BootModule13shutdown_syncEN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEEE_block_invoke(void *a1, ctu::cf **a2)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (void *)a1[5];
  if (*a2) {
    uint64_t v4 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  }
  else {
    uint64_t v4 = 0;
  }
  if (v4)
  {
    (*(void (**)(void, uint64_t))(*v3 + 96))(a1[5], 8);
    ctu::cf::show((uint64_t *)&buf, *a2, v6);
    uint64_t v7 = *(void *)(a1[4] + 8);
    uint64_t v8 = (void **)(v7 + 40);
    if (*(char *)(v7 + 63) < 0) {
      operator delete(*v8);
    }
    *(std::string *)uint64_t v8 = buf;
    size_t v9 = v3[11];
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      uint64_t v23 = *(void *)(a1[4] + 8);
      size_t v24 = (void *)(v23 + 40);
      if (*(char *)(v23 + 63) < 0) {
        size_t v24 = (void *)*v24;
      }
      LODWORD(buf.__r_.__value_.__l.__data_) = 136446210;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v24;
      _os_log_error_impl(&dword_1C5767000, v9, OS_LOG_TYPE_ERROR, "#I Poweroff baseband request failed; Error: %{public}s",
        (uint8_t *)&buf,
        0xCu);
      uint64_t v10 = v3[60];
      if (!v10) {
        goto LABEL_10;
      }
    }
    else
    {
      uint64_t v10 = v3[60];
      if (!v10)
      {
LABEL_10:
        uint64_t v11 = *(void *)(a1[4] + 8);
        uint64_t v12 = a1[8];
        if (*(char *)(v11 + 63) < 0) {
          std::string::__init_copy_ctor_external(&buf, *(const std::string::value_type **)(v11 + 40), *(void *)(v11 + 48));
        }
        else {
          std::string buf = *(std::string *)(v11 + 40);
        }
        (*(void (**)(uint64_t, uint64_t, std::string *))(v12 + 16))(v12, 3760250880, &buf);
        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(buf.__r_.__value_.__l.__data_);
        }
        return;
      }
    }
    (*(void (**)(uint64_t))(*(void *)v10 + 72))(v10);
    goto LABEL_10;
  }
  long long v13 = v3[11];
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf.__r_.__value_.__l.__data_) = 0;
    _os_log_impl(&dword_1C5767000, v13, OS_LOG_TYPE_DEFAULT, "#I Poweroff baseband request delivered; waiting for reset detection",
      (uint8_t *)&buf,
      2u);
  }
  uint64_t v14 = v3[22];
  std::string::size_type v15 = (char *)operator new(0x28uLL);
  uint64_t v29 = v15;
  long long v30 = xmmword_1C599E860;
  strcpy(v15, "Poweroff: Wait for reset detection");
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN10BootModule13shutdown_syncEN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEEE_block_invoke_124;
  aBlock[3] = &unk_1F20F4530;
  uint64_t v17 = a1[6];
  uint64_t v16 = (std::__shared_weak_count *)a1[7];
  void aBlock[5] = v3;
  void aBlock[6] = v17;
  uint64_t v26 = v16;
  if (v16) {
    atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  CFAllocatorRef v18 = (void *)a1[8];
  if (v18) {
    CFAllocatorRef v18 = _Block_copy(v18);
  }
  uint64_t v19 = a1[4];
  dispatch_object_t v27 = v18;
  aBlock[4] = v19;
  long long v20 = _Block_copy(aBlock);
  uint64_t v28 = v20;
  dispatch_time_t v21 = dispatch_time(0, 10000000000);
  ResetDetection::add(v14, (uint64_t)&v29, 1, &v28, v21);
  if (v20) {
    _Block_release(v20);
  }
  operator delete(v15);
  if (v27) {
    _Block_release(v27);
  }
  size_t v22 = v26;
  if (v26 && !atomic_fetch_add(&v26->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
  }
}

void sub_1C57EF1FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *aBlock)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN10BootModule13shutdown_syncEN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEEE_block_invoke_124(void *a1, int a2)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (void *)a1[5];
  (*(void (**)(void *, uint64_t))(*v4 + 96))(v4, 8);
  if (a2)
  {
    std::string::size_type v5 = (char *)operator new(0x30uLL);
    strcpy(v5, "Poweroff: Timeout waiting for reset detection");
    uint64_t v6 = *(void *)(a1[4] + 8);
    if (*(char *)(v6 + 63) < 0) {
      operator delete(*(void **)(v6 + 40));
    }
    *(void *)(v6 + 40) = v5;
    *(_OWORD *)(v6 + 48) = xmmword_1C599E870;
    uint64_t v7 = v4[11];
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      uint64_t v13 = *(void *)(a1[4] + 8);
      uint64_t v14 = (void *)(v13 + 40);
      if (*(char *)(v13 + 63) < 0) {
        uint64_t v14 = (void *)*v14;
      }
      LODWORD(__p.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)v14;
      _os_log_error_impl(&dword_1C5767000, v7, OS_LOG_TYPE_ERROR, "%s", (uint8_t *)&__p, 0xCu);
      uint64_t v8 = *(void *)(a1[4] + 8);
      uint64_t v9 = a1[8];
      if ((*(char *)(v8 + 63) & 0x80000000) == 0) {
        goto LABEL_6;
      }
    }
    else
    {
      uint64_t v8 = *(void *)(a1[4] + 8);
      uint64_t v9 = a1[8];
      if ((*(char *)(v8 + 63) & 0x80000000) == 0)
      {
LABEL_6:
        std::string __p = *(std::string *)(v8 + 40);
LABEL_17:
        (*(void (**)(uint64_t, uint64_t, std::string *))(v9 + 16))(v9, 3760250883, &__p);
        goto LABEL_18;
      }
    }
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v8 + 40), *(void *)(v8 + 48));
    goto LABEL_17;
  }
  uint64_t v10 = v4[11];
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(__p.__r_.__value_.__l.__data_) = 0;
    _os_log_impl(&dword_1C5767000, v10, OS_LOG_TYPE_DEFAULT, "#I Poweroff baseband success", (uint8_t *)&__p, 2u);
  }
  uint64_t v11 = *(void *)(a1[4] + 8);
  uint64_t v12 = a1[8];
  if (*(char *)(v11 + 63) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v11 + 40), *(void *)(v11 + 48));
  }
  else {
    std::string __p = *(std::string *)(v11 + 40);
  }
  (*(void (**)(uint64_t, void, std::string *))(v12 + 16))(v12, 0, &__p);
LABEL_18:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    uint64_t result = v4[60];
    if (!result) {
      return result;
    }
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 72))(result);
  }
  uint64_t result = v4[60];
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 72))(result);
  }
  return result;
}

void sub_1C57EF500(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void *__copy_helper_block_e8_48c38_ZTSNSt3__110shared_ptrI10BootModuleEE64c107_ZTSN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEEE(void *a1, void *a2)
{
  uint64_t v3 = a2[7];
  a1[6] = a2[6];
  a1[7] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t result = (void *)a2[8];
  if (result) {
    uint64_t result = _Block_copy(result);
  }
  a1[8] = result;
  return result;
}

void __destroy_helper_block_e8_48c38_ZTSNSt3__110shared_ptrI10BootModuleEE64c107_ZTSN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEEE(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 64);
  if (v2) {
    _Block_release(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 56);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
}

void ___ZN10BootModule9boot_syncEv_block_invoke(void *a1)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = a1[6];
  *(unsigned char *)(*(void *)(a1[4] + 8) + 24) = *(void *)(v2 + 480) != 0;
  if (*(unsigned char *)(*(void *)(a1[4] + 8) + 24)
    || (*(unsigned char *)(v2 + 229) = 1, uint64_t v3 = *(NSObject **)(v2 + 88), !os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)))
  {
    uint64_t v4 = *(void *)(a1[4] + 8);
    if (*(unsigned char *)(v4 + 24)) {
      goto LABEL_4;
    }
LABEL_11:
    *(unsigned char *)(v4 + 24) = 0;
    if (*(unsigned char *)(*(void *)(a1[4] + 8) + 24)) {
      goto LABEL_5;
    }
    goto LABEL_12;
  }
  LOWORD(v11) = 0;
  _os_log_error_impl(&dword_1C5767000, v3, OS_LOG_TYPE_ERROR, "Boot controller object has not been created!", (uint8_t *)&v11, 2u);
  uint64_t v4 = *(void *)(a1[4] + 8);
  if (!*(unsigned char *)(v4 + 24)) {
    goto LABEL_11;
  }
LABEL_4:
  *(unsigned char *)(*(void *)(a1[4] + 8) + 24) = (*(uint64_t (**)(void, uint64_t))(**(void **)(v2 + 480)
                                                                                           + 48))(*(void *)(v2 + 480), *(void *)(a1[5] + 8) + 40);
  if (*(unsigned char *)(*(void *)(a1[4] + 8) + 24))
  {
LABEL_5:
    *(void *)(v2 + 232) = TelephonyUtilSystemMachTime();
    *(unsigned char *)(*(void *)(a1[4] + 8) + 24) = (*(uint64_t (**)(void, uint64_t))(**(void **)(v2 + 480)
                                                                                             + 56))(*(void *)(v2 + 480), *(void *)(a1[5] + 8) + 40);
    if (!*(unsigned char *)(*(void *)(a1[4] + 8) + 24))
    {
      std::string::size_type v5 = *(NSObject **)(v2 + 88);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      {
        uint64_t v6 = *(void *)(a1[5] + 8);
        uint64_t v7 = (void *)(v6 + 40);
        if (*(char *)(v6 + 63) < 0) {
          uint64_t v7 = (void *)*v7;
        }
        int v11 = 136315138;
        uint64_t v12 = v7;
        uint64_t v8 = "Failed on booting!: Reason: %s";
LABEL_17:
        _os_log_error_impl(&dword_1C5767000, v5, OS_LOG_TYPE_ERROR, v8, (uint8_t *)&v11, 0xCu);
        return;
      }
    }
    return;
  }
LABEL_12:
  *(unsigned char *)(v2 + 229) = 1;
  std::string::size_type v5 = *(NSObject **)(v2 + 88);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
  {
    uint64_t v9 = *(void *)(a1[5] + 8);
    uint64_t v10 = (void *)(v9 + 40);
    if (*(char *)(v9 + 63) < 0) {
      uint64_t v10 = (void *)*v10;
    }
    int v11 = 136315138;
    uint64_t v12 = v10;
    uint64_t v8 = "Failed on preparation for booting!: Reason: %s";
    goto LABEL_17;
  }
}

uint64_t __copy_helper_block_e8_56c38_ZTSNSt3__110shared_ptrI10BootModuleEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 64);
  *(void *)(result + 56) = *(void *)(a2 + 56);
  *(void *)(result + 64) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_56c38_ZTSNSt3__110shared_ptrI10BootModuleEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 64);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void ___ZN10BootModule9boot_syncEv_block_invoke_133(uint64_t a1)
{
  uint64_t v1 = *(NSObject **)(*(void *)(a1 + 32) + 88);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v2 = 0;
    _os_log_impl(&dword_1C5767000, v1, OS_LOG_TYPE_DEFAULT, "#I Recovery detected", v2, 2u);
  }
}

void __copy_helper_block_e8_40c38_ZTSNSt3__110shared_ptrI10BootModuleEE56c30_ZTSN8dispatch13group_sessionE(void *a1, void *a2)
{
  uint64_t v3 = a2[6];
  a1[5] = a2[5];
  a1[6] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = a2[7];
  a1[7] = v4;
  if (v4)
  {
    dispatch_retain(v4);
    std::string::size_type v5 = a1[7];
    if (v5)
    {
      dispatch_group_enter(v5);
    }
  }
}

void __destroy_helper_block_e8_40c38_ZTSNSt3__110shared_ptrI10BootModuleEE56c30_ZTSN8dispatch13group_sessionE(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 56);
  if (v2)
  {
    dispatch_group_leave(v2);
    uint64_t v3 = *(NSObject **)(a1 + 56);
    if (v3) {
      dispatch_release(v3);
    }
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 48);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
}

void ___ZN10BootModule9boot_syncEv_block_invoke_135(void *a1)
{
  uint64_t v1 = (void *)a1[6];
  if ((*((_DWORD *)v1 + 114) - 7) < 2) {
    return;
  }
  if (*(unsigned char *)(*(void *)(a1[4] + 8) + 24))
  {
    state.opaque[1] = 0xAAAAAAAAAAAAAAAALL;
    uint64_t v29 = _os_activity_create(&dword_1C5767000, "Baseband state: booted", MEMORY[0x1E4F144F0], OS_ACTIVITY_FLAG_DEFAULT);
    state.opaque[0] = 0xAAAAAAAAAAAAAAAALL;
    os_activity_scope_enter(v29, &state);
    os_activity_scope_leave(&state);
    uint64_t v3 = v1[11];
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(state.opaque[0]) = 0;
      _os_log_impl(&dword_1C5767000, v3, OS_LOG_TYPE_DEFAULT, "#I Baseband bootup succeeded", (uint8_t *)&state, 2u);
    }
    (*(void (**)(void *, uint64_t))(*v1 + 96))(v1, 3);
    v1[30] = TelephonyUtilSystemMachTime();
    state.opaque[0] = 0;
    uint64_t v4 = *MEMORY[0x1E4F1CF80];
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (Mutable) {
      state.opaque[0] = (uint64_t)Mutable;
    }
    ctu::cf::insert<char const*,char const*>(Mutable, (const __CFString **)*MEMORY[0x1E4F4C688], (const __CFString **)*MEMORY[0x1E4F4C958], v4, v6);
    uint64_t v7 = (std::__shared_weak_count *)v1[16];
    if (!v7 || (uint64_t v8 = v1[15], (v9 = std::__shared_weak_count::lock(v7)) == 0)) {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    uint64_t v10 = v9;
    atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v10);
    }
    BootModule::reportStatisticsBootUpTime_sync((BootModule *)v1);
    int v11 = (const void *)*MEMORY[0x1E4F4CEF8];
    size_t v12 = strlen((const char *)*MEMORY[0x1E4F4CEF8]);
    if (v12 >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    uint64_t v13 = (void *)v12;
    if (v12 >= 0x17)
    {
      uint64_t v17 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v12 | 7) != 0x17) {
        uint64_t v17 = v12 | 7;
      }
      uint64_t v18 = v17 + 1;
      uint64_t v14 = (void **)operator new(v17 + 1);
      __dst[1] = v13;
      unint64_t v28 = v18 | 0x8000000000000000;
      __dst[0] = v14;
    }
    else
    {
      HIBYTE(v28) = v12;
      uint64_t v14 = __dst;
      if (!v12)
      {
        LOBYTE(__dst[0]) = 0;
        std::string::size_type v15 = (const void *)state.opaque[0];
        if (!state.opaque[0]) {
          goto LABEL_25;
        }
LABEL_23:
        CFTypeID v19 = CFGetTypeID(v15);
        if (v19 == CFDictionaryGetTypeID())
        {
          CFTypeRef cf = v15;
          CFRetain(v15);
LABEL_26:
          aBlock = 0;
          Service::broadcastEvent((uint64_t)v1, (uint64_t)__dst, &cf, (const void **)&aBlock);
          if (aBlock) {
            _Block_release(aBlock);
          }
          if (cf) {
            CFRelease(cf);
          }
          if (SHIBYTE(v28) < 0) {
            operator delete(__dst[0]);
          }
          long long v20 = a1[9];
          dispatch_time_t v21 = v1[17];
          block[0] = MEMORY[0x1E4F143A8];
          block[1] = 1174405120;
          block[2] = ___ZN10BootModule9boot_syncEv_block_invoke_136;
          block[3] = &__block_descriptor_tmp_148_0;
          block[4] = v1;
          block[5] = v8;
          size_t v24 = v10;
          atomic_fetch_add_explicit(&v10->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          dispatch_group_notify(v20, v21, block);
          if (v24) {
            std::__shared_weak_count::__release_weak(v24);
          }
          std::__shared_weak_count::__release_weak(v10);
          if (v15) {
            CFRelease(v15);
          }
          if (v29) {
            os_release(v29);
          }
          return;
        }
LABEL_25:
        CFTypeRef cf = 0;
        goto LABEL_26;
      }
    }
    memmove(v14, v11, (size_t)v13);
    *((unsigned char *)v13 + (void)v14) = 0;
    std::string::size_type v15 = (const void *)state.opaque[0];
    if (!state.opaque[0]) {
      goto LABEL_25;
    }
    goto LABEL_23;
  }
  uint64_t v16 = v1[11];
  if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
  {
    LOWORD(state.opaque[0]) = 0;
    _os_log_error_impl(&dword_1C5767000, v16, OS_LOG_TYPE_ERROR, "Baseband bootup failed", (uint8_t *)&state, 2u);
  }
  (*(void (**)(void *, uint64_t))(*v1 + 96))(v1, 5);
  v22[0] = MEMORY[0x1E4F143A8];
  v22[1] = 0x40000000;
  v22[2] = ___ZN10BootModule9boot_syncEv_block_invoke_149;
  v22[3] = &unk_1E6517408;
  v22[4] = a1[5];
  v22[5] = v1;
  ctu::SharedSynchronizable<BootModule>::execute_wrapped(v1 + 15, (uint64_t)v22);
}

void sub_1C57EFEE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *aBlock,const void *a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (aBlock) {
    _Block_release(aBlock);
  }
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&a24);
  if (a30 < 0) {
    operator delete(__p);
  }
  std::__shared_weak_count::__release_weak(v30);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)(v31 - 96));
  ctu::os::scoped_activity::~scoped_activity((void **)(v31 - 104));
  _Unwind_Resume(a1);
}

void BootModule::reportStatisticsBootUpTime_sync(BootModule *this)
{
  uint64_t v2 = *((void *)this + 11);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl(&dword_1C5767000, v2, OS_LOG_TYPE_DEFAULT, "#I Submitting Stats of bootup time", buf, 2u);
  }
  xpc_object_t v3 = xpc_dictionary_create(0, 0, 0);
  if (v3 || (xpc_object_t v3 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C8792D30](v3) == MEMORY[0x1E4F14590])
    {
      xpc_retain(v3);
      xpc_object_t v4 = v3;
    }
    else
    {
      xpc_object_t v4 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v4 = xpc_null_create();
    xpc_object_t v3 = 0;
  }
  xpc_release(v3);
  time_t v5 = time(0);
  xpc_object_t v6 = xpc_int64_create(v5);
  if (!v6) {
    xpc_object_t v6 = xpc_null_create();
  }
  xpc_dictionary_set_value(v4, (const char *)*MEMORY[0x1E4F4CF20], v6);
  xpc_object_t v7 = xpc_null_create();
  xpc_release(v6);
  xpc_release(v7);
  xpc_object_t object = v4;
  *(void *)std::string buf = operator new(0x20uLL);
  long long v11 = xmmword_1C599E820;
  strcpy(*(char **)buf, "CommandUpdateBBBootStats");
  if (v4) {
    xpc_retain(v4);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  uint64_t v8 = 0;
  Service::runCommand((uint64_t)this, (uint64_t)buf, &object, &v8);
  xpc_release(object);
  xpc_object_t object = 0;
  if (SHIBYTE(v11) < 0) {
    operator delete(*(void **)buf);
  }
  xpc_release(v4);
}

void sub_1C57F0130(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  xpc_release(object);
  if (a16 < 0) {
    operator delete(__p);
  }
  xpc_release(v16);
  _Unwind_Resume(a1);
}

void ___ZN10BootModule9boot_syncEv_block_invoke_136(void *a1)
{
  uint64_t v2 = a1[4];
  uint64_t v3 = *(void *)(v2 + 176);
  xpc_object_t v4 = (char *)operator new(0x19uLL);
  long long v11 = v4;
  long long v12 = xmmword_1C599E880;
  strcpy(v4, "Baseband Recovered Gate");
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN10BootModule9boot_syncEv_block_invoke_2;
  aBlock[3] = &__block_descriptor_tmp_145;
  uint64_t v6 = a1[5];
  time_t v5 = (std::__shared_weak_count *)a1[6];
  aBlock[4] = v2;
  void aBlock[5] = v6;
  uint64_t v9 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  xpc_object_t v7 = _Block_copy(aBlock);
  uint64_t v10 = v7;
  ResetDetection::add(v3, (uint64_t)&v11, 0, &v10, -1);
  if (v7) {
    _Block_release(v7);
  }
  operator delete(v4);
  if (v9) {
    std::__shared_weak_count::__release_weak(v9);
  }
}

void sub_1C57F02B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (v17) {
    _Block_release(v17);
  }
  if (a16) {
    std::__shared_weak_count::__release_weak(a16);
  }
  operator delete(v16);
  _Unwind_Resume(a1);
}

void ___ZN10BootModule9boot_syncEv_block_invoke_2(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    uint64_t v3 = (BootModule *)a1[4];
    xpc_object_t v4 = std::__shared_weak_count::lock(v2);
    uint64_t v17 = v4;
    if (v4)
    {
      time_t v5 = v4;
      if (a1[5])
      {
        BootModule::bbResetFlag(v3, 0);
        uint64_t v6 = *((void *)v3 + 22);
        xpc_object_t v7 = (char *)operator new(0x19uLL);
        uint64_t v14 = v7;
        long long v15 = xmmword_1C599E880;
        strcpy(v7, "Baseband Crash Recovery");
        aBlock[0] = MEMORY[0x1E4F143A8];
        aBlock[1] = 1174405120;
        aBlock[2] = ___ZN10BootModule9boot_syncEv_block_invoke_3;
        aBlock[3] = &__block_descriptor_tmp_142;
        uint64_t v9 = a1[5];
        uint64_t v8 = (std::__shared_weak_count *)a1[6];
        aBlock[4] = v3;
        void aBlock[5] = v9;
        long long v12 = v8;
        if (v8) {
          atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v10 = _Block_copy(aBlock);
        uint64_t v13 = v10;
        ResetDetection::add(v6, (uint64_t)&v14, 1, &v13, -1);
        if (v10) {
          _Block_release(v10);
        }
        operator delete(v7);
        if (v12) {
          std::__shared_weak_count::__release_weak(v12);
        }
      }
      if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void sub_1C57F0494(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (v17) {
    _Block_release(v17);
  }
  if (a16) {
    std::__shared_weak_count::__release_weak(a16);
  }
  operator delete(v16);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v18 - 64);
  _Unwind_Resume(a1);
}

void sub_1C57F04D0(_Unwind_Exception *a1)
{
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v1 - 64);
  _Unwind_Resume(a1);
}

void BootModule::bbResetFlag(BootModule *this, char a2)
{
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 16);
  if (!v3 || (uint64_t v5 = *((void *)this + 15), (v6 = std::__shared_weak_count::lock(v3)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  xpc_object_t v7 = v6;
  uint64_t v8 = operator new(0x10uLL);
  *(void *)uint64_t v8 = this;
  v8[8] = a2;
  uint64_t v9 = *((void *)this + 17);
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v10 = operator new(0x18uLL);
  *uint64_t v10 = v8;
  v10[1] = v5;
  v10[2] = v7;
  dispatch_async_f(v9, v10, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<BootModule>::execute_wrapped<BootModule::bbResetFlag(BOOL)::$_0>(BootModule::bbResetFlag(BOOL)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<BootModule::bbResetFlag(BOOL)::$_0,dispatch_queue_s *::default_delete<BootModule::bbResetFlag(BOOL)::$_0>>)::{lambda(void *)#1}::__invoke);
  if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void ___ZN10BootModule9boot_syncEv_block_invoke_3(void *a1)
{
  uint64_t v1 = (BootModule *)a1[4];
  if ((*((_DWORD *)v1 + 114) - 7) >= 2)
  {
    uint64_t v3 = (std::__shared_weak_count *)a1[6];
    if (v3)
    {
      xpc_object_t v4 = std::__shared_weak_count::lock(v3);
      char v57 = v4;
      if (v4)
      {
        if (!a1[5])
        {
          uint64_t v10 = v4;
LABEL_60:
          if (!atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
            std::__shared_weak_count::__release_weak(v10);
          }
          return;
        }
        BootModule::bbResetFlag(v1, 1);
        *(void *)&long long v5 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
        long long v54 = v5;
        long long v55 = v5;
        long long v52 = v5;
        long long v53 = v5;
        *(_OWORD *)&v50[16] = v5;
        long long v51 = v5;
        *(_OWORD *)char v50 = v5;
        uint64_t v6 = (const void *)*MEMORY[0x1E4F4C6E8];
        size_t v7 = strlen((const char *)*MEMORY[0x1E4F4C6E8]);
        if (v7 > 0x7FFFFFFFFFFFFFF7) {
          std::string::__throw_length_error[abi:ne180100]();
        }
        size_t v8 = v7;
        if (v7 >= 0x17)
        {
          uint64_t v11 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v7 | 7) != 0x17) {
            uint64_t v11 = v7 | 7;
          }
          uint64_t v12 = v11 + 1;
          p_dst = (long long *)operator new(v11 + 1);
          *((void *)&__dst + 1) = v8;
          unint64_t v49 = v12 | 0x8000000000000000;
          *(void *)&long long __dst = p_dst;
        }
        else
        {
          HIBYTE(v49) = v7;
          p_dst = &__dst;
          if (!v7)
          {
LABEL_14:
            *((unsigned char *)p_dst + v8) = 0;
            uint64_t v13 = (const void *)*MEMORY[0x1E4F4D130];
            size_t v14 = strlen((const char *)*MEMORY[0x1E4F4D130]);
            if (v14 > 0x7FFFFFFFFFFFFFF7) {
              std::string::__throw_length_error[abi:ne180100]();
            }
            size_t v15 = v14;
            if (v14 >= 0x17)
            {
              uint64_t v17 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v14 | 7) != 0x17) {
                uint64_t v17 = v14 | 7;
              }
              uint64_t v18 = v17 + 1;
              uint64_t v16 = (long long *)operator new(v17 + 1);
              *((void *)&v46 + 1) = v15;
              unint64_t v47 = v18 | 0x8000000000000000;
              *(void *)&long long v46 = v16;
            }
            else
            {
              HIBYTE(v47) = v14;
              uint64_t v16 = &v46;
              if (!v14)
              {
LABEL_22:
                *((unsigned char *)v16 + v15) = 0;
                CFTypeID v19 = (char *)operator new(0x20uLL);
                char v44 = v19;
                long long v45 = xmmword_1C599E890;
                strcpy(v19, "** baseband crash detected");
                Timestamp::Timestamp((Timestamp *)v40);
                Timestamp::asString((uint64_t)v40, 0, 9, __p);
                char v39 = 0;
                LOBYTE(v38) = 0;
                ResetInfo::ResetInfo((std::string *)v50, &__dst, &v46, (long long *)&v44, (uint64_t)__p, 3, &v38);
                if (v43 < 0) {
                  operator delete(__p[0]);
                }
                std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v40, v41);
                operator delete(v19);
                if (SHIBYTE(v47) < 0) {
                  operator delete((void *)v46);
                }
                if (SHIBYTE(v49) < 0) {
                  operator delete((void *)__dst);
                }
                ResetInfo::ResetInfo(&v31, (long long *)v50);
                uint64_t v30 = 0;
                BootModule::requestReset(v1, &v31, &v30);
                if (v37 < 0)
                {
                  operator delete(v36);
                  if ((v35 & 0x80000000) == 0)
                  {
LABEL_30:
                    if ((v33 & 0x80000000) == 0) {
                      goto LABEL_31;
                    }
                    goto LABEL_53;
                  }
                }
                else if ((v35 & 0x80000000) == 0)
                {
                  goto LABEL_30;
                }
                operator delete(v34);
                if ((v33 & 0x80000000) == 0)
                {
LABEL_31:
                  if ((SHIBYTE(v31.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                    goto LABEL_32;
                  }
LABEL_54:
                  operator delete(v31.__r_.__value_.__l.__data_);
LABEL_32:
                  long long v20 = (const void *)*MEMORY[0x1E4F4CD28];
                  size_t v21 = strlen((const char *)*MEMORY[0x1E4F4CD28]);
                  if (v21 > 0x7FFFFFFFFFFFFFF7) {
                    std::string::__throw_length_error[abi:ne180100]();
                  }
                  size_t v22 = (void *)v21;
                  if (v21 >= 0x17)
                  {
                    uint64_t v24 = (v21 & 0xFFFFFFFFFFFFFFF8) + 8;
                    if ((v21 | 7) != 0x17) {
                      uint64_t v24 = v21 | 7;
                    }
                    uint64_t v25 = v24 + 1;
                    uint64_t v23 = operator new(v24 + 1);
                    v28[1] = v22;
                    unint64_t v29 = v25 | 0x8000000000000000;
                    v28[0] = v23;
                  }
                  else
                  {
                    HIBYTE(v29) = v21;
                    uint64_t v23 = v28;
                    if (!v21)
                    {
LABEL_40:
                      *((unsigned char *)v22 + (void)v23) = 0;
                      aBlock = 0;
                      CFTypeRef cf = 0;
                      Service::broadcastEvent((uint64_t)v1, (uint64_t)v28, &cf, (const void **)&aBlock);
                      if (aBlock) {
                        _Block_release(aBlock);
                      }
                      if (cf) {
                        CFRelease(cf);
                      }
                      if (SHIBYTE(v29) < 0)
                      {
                        operator delete(v28[0]);
                        if ((SHIBYTE(v55) & 0x80000000) == 0)
                        {
LABEL_46:
                          if ((SBYTE7(v53) & 0x80000000) == 0) {
                            goto LABEL_47;
                          }
                          goto LABEL_57;
                        }
                      }
                      else if ((SHIBYTE(v55) & 0x80000000) == 0)
                      {
                        goto LABEL_46;
                      }
                      operator delete(*((void **)&v54 + 1));
                      if ((SBYTE7(v53) & 0x80000000) == 0)
                      {
LABEL_47:
                        if ((SHIBYTE(v51) & 0x80000000) == 0) {
                          goto LABEL_48;
                        }
                        goto LABEL_58;
                      }
LABEL_57:
                      operator delete((void *)v52);
                      if ((SHIBYTE(v51) & 0x80000000) == 0)
                      {
LABEL_48:
                        if ((v50[23] & 0x80000000) == 0) {
                          goto LABEL_49;
                        }
                        goto LABEL_59;
                      }
LABEL_58:
                      operator delete(*(void **)&v50[24]);
                      if ((v50[23] & 0x80000000) == 0)
                      {
LABEL_49:
                        uint64_t v10 = v57;
                        if (!v57) {
                          return;
                        }
                        goto LABEL_60;
                      }
LABEL_59:
                      operator delete(*(void **)v50);
                      uint64_t v10 = v57;
                      if (!v57) {
                        return;
                      }
                      goto LABEL_60;
                    }
                  }
                  memmove(v23, v20, (size_t)v22);
                  goto LABEL_40;
                }
LABEL_53:
                operator delete(v32);
                if ((SHIBYTE(v31.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                  goto LABEL_32;
                }
                goto LABEL_54;
              }
            }
            memmove(v16, v13, v15);
            goto LABEL_22;
          }
        }
        memmove(p_dst, v6, v8);
        goto LABEL_14;
      }
    }
  }
}

void sub_1C57F0A60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *aBlock, const void *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  if (aBlock) {
    _Block_release(aBlock);
  }
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&a10);
  if (a16 < 0)
  {
    operator delete(__p);
    ResetInfo::~ResetInfo((void **)(v43 - 192));
    std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v43 - 80);
    _Unwind_Resume(a1);
  }
  ResetInfo::~ResetInfo((void **)(v43 - 192));
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v43 - 80);
  _Unwind_Resume(a1);
}

void ___ZN10BootModule9boot_syncEv_block_invoke_149(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  uint64_t v2 = *(void *)(*(void *)(a1 + 32) + 8);
  if (*(char *)(v2 + 63) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v2 + 40), *(void *)(v2 + 48));
  }
  else {
    std::string __p = *(std::string *)(v2 + 40);
  }
  BootModule::handleBootFailed_sync(v1, (const void **)&__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1C57F0C10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void __copy_helper_block_e8_56c38_ZTSNSt3__110shared_ptrI10BootModuleEE72c21_ZTSN8dispatch5groupE(void *a1, void *a2)
{
  uint64_t v2 = a2[8];
  a1[7] = a2[7];
  a1[8] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v3 = a2[9];
  a1[9] = v3;
  if (v3) {
    dispatch_retain(v3);
  }
}

void __destroy_helper_block_e8_56c38_ZTSNSt3__110shared_ptrI10BootModuleEE72c21_ZTSN8dispatch5groupE(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 72);
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 64);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
}

void BootModule::setVoiceCall_sync(BootModule *this, char a2)
{
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 16);
  if (!v3 || (uint64_t v5 = *((void *)this + 15), (v6 = std::__shared_weak_count::lock(v3)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  size_t v7 = v6;
  p_shared_weak_owners = &v6->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v7);
  }
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  uint64_t v9 = *((void *)this + 52);
  uint64_t v10 = *((void *)this + 17);
  uint64_t v11 = operator new(0x20uLL);
  void *v11 = this;
  v11[1] = v5;
  v11[2] = v7;
  *((unsigned char *)v11 + 24) = a2;
  dispatch_group_notify_f(v9, v10, v11, (dispatch_function_t)dispatch::detail::group_notify<BootModule::setVoiceCall_sync(BOOL)::$_0>(dispatch_group_s *,dispatch_queue_s *,BootModule::setVoiceCall_sync(BOOL)::$_0 &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke);

  std::__shared_weak_count::__release_weak(v7);
}

void sub_1C57F0DDC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_weak(v1);
  std::__shared_weak_count::__release_weak(v1);
  _Unwind_Resume(a1);
}

void BootModule::setRat1_sync(void *a1, int a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[16];
  if (!v3 || (uint64_t v5 = a1[15], (v6 = std::__shared_weak_count::lock(v3)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  size_t v7 = v6;
  p_shared_weak_owners = &v6->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v7);
  }
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  uint64_t v9 = a1[52];
  uint64_t v10 = a1[17];
  uint64_t v11 = operator new(0x20uLL);
  void *v11 = a1;
  v11[1] = v5;
  v11[2] = v7;
  *((_DWORD *)v11 + 6) = a2;
  dispatch_group_notify_f(v9, v10, v11, (dispatch_function_t)dispatch::detail::group_notify<BootModule::setRat1_sync(abm::RadioAccessTechnology)::$_0>(dispatch_group_s *,dispatch_queue_s *,BootModule::setRat1_sync(abm::RadioAccessTechnology)::$_0 &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke);

  std::__shared_weak_count::__release_weak(v7);
}

void sub_1C57F0EEC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_weak(v1);
  std::__shared_weak_count::__release_weak(v1);
  _Unwind_Resume(a1);
}

void BootModule::setRat2_sync(void *a1, int a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[16];
  if (!v3 || (uint64_t v5 = a1[15], (v6 = std::__shared_weak_count::lock(v3)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  size_t v7 = v6;
  p_shared_weak_owners = &v6->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v7);
  }
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  uint64_t v9 = a1[52];
  uint64_t v10 = a1[17];
  uint64_t v11 = operator new(0x20uLL);
  void *v11 = a1;
  v11[1] = v5;
  v11[2] = v7;
  *((_DWORD *)v11 + 6) = a2;
  dispatch_group_notify_f(v9, v10, v11, (dispatch_function_t)dispatch::detail::group_notify<BootModule::setRat2_sync(abm::RadioAccessTechnology)::$_0>(dispatch_group_s *,dispatch_queue_s *,BootModule::setRat2_sync(abm::RadioAccessTechnology)::$_0 &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke);

  std::__shared_weak_count::__release_weak(v7);
}

void sub_1C57F0FFC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_weak(v1);
  std::__shared_weak_count::__release_weak(v1);
  _Unwind_Resume(a1);
}

void BootModule::setPLMN1_sync(void *a1, uint64_t a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[16];
  if (!v3 || (uint64_t v5 = a1[15], (v6 = std::__shared_weak_count::lock(v3)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  size_t v7 = v6;
  p_shared_weak_owners = &v6->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v7);
  }
  *(void *)&long long v12 = a1;
  *((void *)&v12 + 1) = v5;
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string __p = *(std::string *)a2;
  }
  uint64_t v9 = a1[52];
  uint64_t v10 = a1[17];
  uint64_t v11 = (std::string *)operator new(0x30uLL);
  *(_OWORD *)&v11->__r_.__value_.__l.__data_ = v12;
  v11->__r_.__value_.__r.__words[2] = (std::string::size_type)v7;
  v11[1] = __p;
  memset(&__p, 0, sizeof(__p));
  dispatch_group_notify_f(v9, v10, v11, (dispatch_function_t)dispatch::detail::group_notify<BootModule::setPLMN1_sync(std::string)::$_0>(dispatch_group_s *,dispatch_queue_s *,BootModule::setPLMN1_sync(std::string)::$_0 &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::__shared_weak_count::__release_weak(v7);
}

void sub_1C57F1180(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11)
  {
    std::__shared_weak_count::__release_weak(a11);
    std::__shared_weak_count::__release_weak(v11);
    _Unwind_Resume(a1);
  }
  std::__shared_weak_count::__release_weak(v11);
  _Unwind_Resume(a1);
}

uint64_t BootModule::setPLMN1_sync(std::string)::$_0::~$_0(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0)
  {
    operator delete(*(void **)(a1 + 24));
    uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v2) {
      return a1;
    }
    goto LABEL_3;
  }
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2) {
LABEL_3:
  }
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void BootModule::setPLMN2_sync(void *a1, uint64_t a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[16];
  if (!v3 || (uint64_t v5 = a1[15], (v6 = std::__shared_weak_count::lock(v3)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  size_t v7 = v6;
  p_shared_weak_owners = &v6->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v7);
  }
  *(void *)&long long v12 = a1;
  *((void *)&v12 + 1) = v5;
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string __p = *(std::string *)a2;
  }
  uint64_t v9 = a1[52];
  uint64_t v10 = a1[17];
  uint64_t v11 = (std::string *)operator new(0x30uLL);
  *(_OWORD *)&v11->__r_.__value_.__l.__data_ = v12;
  v11->__r_.__value_.__r.__words[2] = (std::string::size_type)v7;
  v11[1] = __p;
  memset(&__p, 0, sizeof(__p));
  dispatch_group_notify_f(v9, v10, v11, (dispatch_function_t)dispatch::detail::group_notify<BootModule::setPLMN2_sync(std::string)::$_0>(dispatch_group_s *,dispatch_queue_s *,BootModule::setPLMN2_sync(std::string)::$_0 &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::__shared_weak_count::__release_weak(v7);
}

void sub_1C57F1370(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11)
  {
    std::__shared_weak_count::__release_weak(a11);
    std::__shared_weak_count::__release_weak(v11);
    _Unwind_Resume(a1);
  }
  std::__shared_weak_count::__release_weak(v11);
  _Unwind_Resume(a1);
}

void BootModule::setCellId_sync(void *a1, uint64_t a2, int a3)
{
  xpc_object_t v4 = (std::__shared_weak_count *)a1[16];
  if (!v4 || (uint64_t v7 = a1[15], (v8 = std::__shared_weak_count::lock(v4)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v9 = v8;
  p_shared_weak_owners = &v8->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
  }
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  uint64_t v11 = a1[52];
  long long v12 = a1[17];
  uint64_t v13 = operator new(0x28uLL);
  *uint64_t v13 = a1;
  v13[1] = v7;
  v13[2] = v9;
  v13[3] = a2;
  *((_DWORD *)v13 + 8) = a3;
  dispatch_group_notify_f(v11, v12, v13, (dispatch_function_t)dispatch::detail::group_notify<BootModule::setCellId_sync(unsigned long long,BootModule::SimSlotIndex)::$_0>(dispatch_group_s *,dispatch_queue_s *,BootModule::setCellId_sync(unsigned long long,BootModule::SimSlotIndex)::$_0 &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke);

  std::__shared_weak_count::__release_weak(v9);
}

void sub_1C57F14AC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_weak(v1);
  std::__shared_weak_count::__release_weak(v1);
  _Unwind_Resume(a1);
}

void BootModule::setAreaCode_sync(void *a1, uint64_t a2, int a3)
{
  xpc_object_t v4 = (std::__shared_weak_count *)a1[16];
  if (!v4 || (uint64_t v7 = a1[15], (v8 = std::__shared_weak_count::lock(v4)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v9 = v8;
  p_shared_weak_owners = &v8->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
  }
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  uint64_t v11 = a1[52];
  long long v12 = a1[17];
  uint64_t v13 = operator new(0x28uLL);
  *uint64_t v13 = a1;
  v13[1] = v7;
  v13[2] = v9;
  v13[3] = a2;
  *((_DWORD *)v13 + 8) = a3;
  dispatch_group_notify_f(v11, v12, v13, (dispatch_function_t)dispatch::detail::group_notify<BootModule::setAreaCode_sync(unsigned long long,BootModule::SimSlotIndex)::$_0>(dispatch_group_s *,dispatch_queue_s *,BootModule::setAreaCode_sync(unsigned long long,BootModule::SimSlotIndex)::$_0 &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke);

  std::__shared_weak_count::__release_weak(v9);
}

void sub_1C57F15C8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_weak(v1);
  std::__shared_weak_count::__release_weak(v1);
  _Unwind_Resume(a1);
}

void *std::sub_match<std::__wrap_iter<char const*>>::str[abi:ne180100](void *result, uint64_t *a2)
{
  uint64_t v2 = result;
  if (!*((unsigned char *)a2 + 16))
  {
    void *result = 0;
    result[1] = 0;
    result[2] = 0;
    return result;
  }
  uint64_t v4 = *a2;
  uint64_t v3 = (char *)a2[1];
  unint64_t v5 = (unint64_t)&v3[-*a2];
  if (v5 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v5 <= 0x16)
  {
    *((unsigned char *)result + 23) = v5;
    if ((char *)v4 != v3) {
      goto LABEL_5;
    }
LABEL_15:
    *(unsigned char *)uint64_t v2 = 0;
    return result;
  }
  uint64_t v12 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v5 | 7) != 0x17) {
    uint64_t v12 = v5 | 7;
  }
  uint64_t v13 = v12 + 1;
  uint64_t result = operator new(v12 + 1);
  v2[1] = v5;
  v2[2] = v13 | 0x8000000000000000;
  *uint64_t v2 = result;
  uint64_t v2 = result;
  if ((char *)v4 == v3) {
    goto LABEL_15;
  }
LABEL_5:
  if (v5 < 0x20 || (unint64_t)v2 - v4 < 0x20)
  {
    uint64_t v6 = v2;
    uint64_t v7 = (char *)v4;
  }
  else
  {
    uint64_t v6 = (char *)v2 + (v5 & 0xFFFFFFFFFFFFFFE0);
    uint64_t v7 = (char *)(v4 + (v5 & 0xFFFFFFFFFFFFFFE0));
    size_t v8 = (long long *)(v4 + 16);
    uint64_t v9 = v2 + 2;
    unint64_t v10 = v5 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      long long v11 = *v8;
      *(v9 - 1) = *(v8 - 1);
      _OWORD *v9 = v11;
      v8 += 2;
      v9 += 2;
      v10 -= 32;
    }
    while (v10);
    if (v5 == (v5 & 0x7FFFFFFFFFFFFFE0)) {
      goto LABEL_18;
    }
  }
  do
  {
    char v14 = *v7++;
    *v6++ = v14;
  }
  while (v7 != v3);
LABEL_18:
  unsigned char *v6 = 0;
  return result;
}

void std::basic_regex<char,std::regex_traits<char>>::~basic_regex(std::locale *this)
{
  uint64_t v1 = this;
  locale = (std::__shared_weak_count *)this[6].__locale_;
  if (locale && !atomic_fetch_add(&locale->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))locale->__on_zero_shared)(locale);
    std::__shared_weak_count::__release_weak(locale);
    this = v1;
  }
  else if (((vars8 ^ (2 * vars8)) & 0x4000000000000000) != 0)
  {
    __break(0xC471u);
  }
  std::locale::~locale(this);
}

uint64_t ctu::Loggable<BootModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig(uint64_t a1)
{
  return MEMORY[0x1F417DA50](a1 + 8);
}

size_t ctu::Loggable<BootModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = (const char *)(*(uint64_t (**)(void))(*(void *)(a1 - 48) + 16))();
  size_t result = strlen(v3);
  if (result >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v5 = result;
  if (result >= 0x17)
  {
    uint64_t v6 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17) {
      uint64_t v6 = result | 7;
    }
    uint64_t v7 = v6 + 1;
    size_t v8 = operator new(v6 + 1);
    a2[1] = v5;
    a2[2] = v7 | 0x8000000000000000;
    *a2 = v8;
    a2 = v8;
  }
  else
  {
    *((unsigned char *)a2 + 23) = result;
    if (!result)
    {
      *(unsigned char *)a2 = 0;
      return result;
    }
  }
  size_t result = (size_t)memmove(a2, v3, v5);
  *((unsigned char *)a2 + v5) = 0;
  return result;
}

uint64_t ctu::Loggable<BootModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return MEMORY[0x1F417DD10](a1 + 8);
}

void *ctu::Loggable<BootModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_1F20F4788;
  MEMORY[0x1C8790F40](a1 + 1);
  return a1;
}

void ctu::Loggable<BootModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_1F20F4788;
  MEMORY[0x1C8790F40](a1 + 1);

  operator delete(a1);
}

void ResetInfo::ResetInfo(std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
    size_t v5 = this + 1;
    if ((*((char *)a2 + 47) & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
    size_t v5 = this + 1;
    if ((*((char *)a2 + 47) & 0x80000000) == 0)
    {
LABEL_3:
      long long v6 = *(long long *)((char *)a2 + 24);
      v5->__r_.__value_.__r.__words[2] = *((void *)a2 + 5);
      *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
      goto LABEL_6;
    }
  }
  std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)a2 + 3), *((void *)a2 + 4));
LABEL_6:
  if (*((char *)a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(this + 2, *((const std::string::value_type **)a2 + 6), *((void *)a2 + 7));
  }
  else
  {
    long long v7 = a2[3];
    this[2].__r_.__value_.__r.__words[2] = *((void *)a2 + 8);
    *(_OWORD *)&this[2].__r_.__value_.__l.__data_ = v7;
  }
  std::string::size_type v8 = *((void *)a2 + 9);
  LODWORD(this[3].__r_.__value_.__r.__words[1]) = *((_DWORD *)a2 + 20);
  this[3].__r_.__value_.__r.__words[0] = v8;
  uint64_t v9 = (std::string *)((char *)this + 88);
  if (*((char *)a2 + 111) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *((const std::string::value_type **)a2 + 11), *((void *)a2 + 12));
  }
  else
  {
    long long v10 = *(long long *)((char *)a2 + 88);
    this[4].__r_.__value_.__l.__size_ = *((void *)a2 + 13);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v10;
  }
}

void sub_1C57F1A50(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 71) < 0)
  {
    operator delete(*v3);
    if ((*(char *)(v1 + 47) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(v1 + 23) & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else if ((*(char *)(v1 + 47) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*v2);
  if ((*(char *)(v1 + 23) & 0x80000000) == 0) {
LABEL_4:
  }
    _Unwind_Resume(exception_object);
LABEL_7:
  operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void ctu::Loggable<BootModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(uint64_t a1)
{
  uint64_t v1 = a1 + 56;
  if (*(void *)(a1 + 56))
  {
    if (!*(void *)(a1 + 80) || (uint64_t v2 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(a1 + 80))) == 0) {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    uint64_t v3 = v2;
    ctu::LoggerCommonBase::getLogDomain((ctu::LoggerCommonBase *)(v1 - 48));
    ctu::TrackedLogger::registerLoggerToServer();
    if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_1C57F1BF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

void sub_1C57F1C0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void *std::shared_ptr<BootModule>::shared_ptr[abi:ne180100]<BootModule,std::shared_ptr<BootModule> ctu::SharedSynchronizable<BootModule>::make_shared_ptr<BootModule>(BootModule*)::{lambda(BootModule*)#1},void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  long long v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = &v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20F47C8;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)a2;
  a1[1] = v4;
  if (!a2) {
    return a1;
  }
  long long v6 = *(std::__shared_weak_count **)(a2 + 128);
  if (v6)
  {
    if (v6->__shared_owners_ == -1)
    {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      *(void *)(a2 + 120) = a2;
      *(void *)(a2 + 128) = v4;
      std::__shared_weak_count::__release_weak(v6);
      if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
        goto LABEL_8;
      }
    }
    return a1;
  }
  atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  *(void *)(a2 + 120) = a2;
  *(void *)(a2 + 128) = v4;
  if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
LABEL_8:
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void sub_1C57F1D38(void *a1)
{
  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[17], v1, (dispatch_function_t)std::shared_ptr<BootModule> ctu::SharedSynchronizable<BootModule>::make_shared_ptr<BootModule>(BootModule*)::{lambda(BootModule*)#1}::operator() const(BootModule*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_1C57F1D60(_Unwind_Exception *a1)
{
}

void std::__shared_ptr_pointer<BootModule *,std::shared_ptr<BootModule> ctu::SharedSynchronizable<BootModule>::make_shared_ptr<BootModule>(BootModule*)::{lambda(BootModule *)#1},std::allocator<BootModule>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<BootModule *,std::shared_ptr<BootModule> ctu::SharedSynchronizable<BootModule>::make_shared_ptr<BootModule>(BootModule*)::{lambda(BootModule *)#1},std::allocator<BootModule>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<BootModule *,std::shared_ptr<BootModule> ctu::SharedSynchronizable<BootModule>::make_shared_ptr<BootModule>(BootModule*)::{lambda(BootModule *)#1},std::allocator<BootModule>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableI10BootModuleE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_") {
    return a1 + 24;
  }
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableI10BootModuleE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableI10BootModuleE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_"))return 0; {
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableI10BootModuleE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  }
  return 0;
}

uint64_t std::shared_ptr<BootModule> ctu::SharedSynchronizable<BootModule>::make_shared_ptr<BootModule>(BootModule*)::{lambda(BootModule*)#1}::operator() const(BootModule*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void ctu::SharedLoggable<BootModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(void *a1)
{
  *a1 = &unk_1F20F4788;
  MEMORY[0x1C8790F40](a1 + 1);
  uint64_t v2 = a1[12];
  if (v2) {
    dispatch_release(v2);
  }
  unint64_t v3 = a1[11];
  if (v3) {
    dispatch_release(v3);
  }
  long long v4 = (std::__shared_weak_count *)a1[10];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }

  operator delete(a1);
}

void std::__shared_ptr_pointer<HealthEventDB *,std::shared_ptr<HealthEventDB>::__shared_ptr_default_delete<HealthEventDB,HealthEventDB>,std::allocator<HealthEventDB>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t std::__shared_ptr_pointer<HealthEventDB *,std::shared_ptr<HealthEventDB>::__shared_ptr_default_delete<HealthEventDB,HealthEventDB>,std::allocator<HealthEventDB>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<HealthEventDB *,std::shared_ptr<HealthEventDB>::__shared_ptr_default_delete<HealthEventDB,HealthEventDB>,std::allocator<HealthEventDB>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x80000001C599EB35) {
    return a1 + 24;
  }
  if (((v3 & 0x80000001C599EB35 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000001C599EB35)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001C599EB35 & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 24;
  }
  return 0;
}

uint64_t ctu::PthreadMutexGuardPolicy<HealthEventDB>::~PthreadMutexGuardPolicy(uint64_t a1)
{
  pthread_mutex_lock((pthread_mutex_t *)a1);
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 72);
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 72);
  if (!v3 || atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void _ZZN8dispatch6detail12group_notifyIZZZN10BootModule12requestResetE9ResetInfoNS_5blockIU13block_pointerFviNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEEEUb_EUb0_E3__0EEvP16dispatch_group_sP16dispatch_queue_sOT_NS5_17integral_constantIbLb0EEEENUlPvE_8__invokeESO_(char *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)__p + 2);
  if (!v2) {
    goto LABEL_15;
  }
  uint64_t v3 = *(void *)__p;
  long long v4 = std::__shared_weak_count::lock(v2);
  if (!v4) {
    goto LABEL_15;
  }
  size_t v5 = v4;
  if (!*((void *)__p + 1)) {
    goto LABEL_13;
  }
  ResetInfo::ResetInfo(&v12, (long long *)(__p + 24));
  long long v6 = (const void *)*((void *)__p + 17);
  if (v6) {
    long long v7 = _Block_copy(v6);
  }
  else {
    long long v7 = 0;
  }
  long long v11 = v7;
  BootModule::handleReset_sync(v3, (uint64_t)&v12, &v11);
  if (v7) {
    _Block_release(v7);
  }
  if (v18 < 0)
  {
    operator delete(__pa);
    if ((v16 & 0x80000000) == 0)
    {
LABEL_11:
      if ((v14 & 0x80000000) == 0) {
        goto LABEL_12;
      }
LABEL_33:
      operator delete(v13);
      if ((SHIBYTE(v12.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_13:
        if (atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
          goto LABEL_15;
        }
        goto LABEL_14;
      }
      goto LABEL_34;
    }
  }
  else if ((v16 & 0x80000000) == 0)
  {
    goto LABEL_11;
  }
  operator delete(v15);
  if (v14 < 0) {
    goto LABEL_33;
  }
LABEL_12:
  if ((SHIBYTE(v12.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_13;
  }
LABEL_34:
  operator delete(v12.__r_.__value_.__l.__data_);
  if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
LABEL_14:
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_15:
  std::string::size_type v8 = *((void *)__p + 18);
  if (v8) {
    dispatch_release(v8);
  }
  uint64_t v9 = (const void *)*((void *)__p + 17);
  if (v9) {
    _Block_release(v9);
  }
  if (__p[135] < 0)
  {
    operator delete(*((void **)__p + 14));
    if ((__p[95] & 0x80000000) == 0)
    {
LABEL_21:
      if ((__p[71] & 0x80000000) == 0) {
        goto LABEL_22;
      }
      goto LABEL_28;
    }
  }
  else if ((__p[95] & 0x80000000) == 0)
  {
    goto LABEL_21;
  }
  operator delete(*((void **)__p + 9));
  if ((__p[71] & 0x80000000) == 0)
  {
LABEL_22:
    if ((__p[47] & 0x80000000) == 0) {
      goto LABEL_23;
    }
LABEL_29:
    operator delete(*((void **)__p + 3));
    long long v10 = (std::__shared_weak_count *)*((void *)__p + 2);
    if (!v10) {
      goto LABEL_25;
    }
    goto LABEL_24;
  }
LABEL_28:
  operator delete(*((void **)__p + 6));
  if (__p[47] < 0) {
    goto LABEL_29;
  }
LABEL_23:
  long long v10 = (std::__shared_weak_count *)*((void *)__p + 2);
  if (v10) {
LABEL_24:
  }
    std::__shared_weak_count::__release_weak(v10);
LABEL_25:
  operator delete(__p);
}

void sub_1C57F22DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11)
{
  if (v14) {
    _Block_release(v14);
  }
  ResetInfo::~ResetInfo(&a11);
  if (atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    char v16 = v11[18];
    if (!v16) {
      goto LABEL_5;
    }
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
    char v16 = v11[18];
    if (!v16)
    {
LABEL_5:
      uint64_t v17 = (const void *)v11[17];
      if (!v17)
      {
LABEL_10:
        ResetInfo::~ResetInfo(v13);
        char v18 = (std::__shared_weak_count *)v11[2];
        if (v18) {
          std::__shared_weak_count::__release_weak(v18);
        }
        operator delete(v11);
        _Unwind_Resume(a1);
      }
LABEL_9:
      _Block_release(v17);
      goto LABEL_10;
    }
  }
  dispatch_release(v16);
  uint64_t v17 = (const void *)v11[17];
  if (!v17) {
    goto LABEL_10;
  }
  goto LABEL_9;
}

void ctu::SharedSynchronizable<BootModule>::execute_wrapped(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[1];
  if (!v3 || (uint64_t v5 = *a1, (v6 = std::__shared_weak_count::lock(v3)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  long long v7 = v6;
  std::string::size_type v8 = a1[2];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 1174405120;
  block[2] = ___ZNK3ctu20SharedSynchronizableI10BootModuleE15execute_wrappedEU13block_pointerFvvE_block_invoke;
  block[3] = &unk_1F20F48A0;
  block[5] = v5;
  std::string v12 = v7;
  p_shared_owners = &v7->__shared_owners_;
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  block[4] = a2;
  dispatch_async(v8, block);
  long long v10 = v12;
  if (!v12 || atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      return;
    }
LABEL_8:
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    return;
  }
  ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
  std::__shared_weak_count::__release_weak(v10);
  if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_8;
  }
}

uint64_t ___ZNK3ctu20SharedSynchronizableI10BootModuleE15execute_wrappedEU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t __copy_helper_block_e8_40c39_ZTSNSt3__110shared_ptrIK10BootModuleEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c39_ZTSNSt3__110shared_ptrIK10BootModuleEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void *___ZNK3ctu20SharedSynchronizableI10BootModuleE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke(uint64_t a1)
{
  return (*(void *(**)(void *__return_ptr))(**(void **)(a1 + 40) + 16))(*(void **)(a1 + 40));
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI10BootModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb1_EUb2_E3__1EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_(void *a1)
{
  uint64_t v2 = *(uint64_t **)a1;
  uint64_t v3 = (const char *)*MEMORY[0x1E4F4C1B0];
  uint64_t v4 = **(void **)a1;
  if (!xpc_dictionary_get_value(*(xpc_object_t *)(*(void *)a1 + 8), (const char *)*MEMORY[0x1E4F4C1B0])) {
    goto LABEL_26;
  }
  xpc_object_t value = xpc_dictionary_get_value((xpc_object_t)v2[1], v3);
  object.__r_.__value_.__r.__words[0] = (std::string::size_type)value;
  if (value) {
    xpc_retain(value);
  }
  else {
    object.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
  }
  int v6 = xpc::dyn_cast_or_default((xpc *)&object, 0);
  xpc_release(object.__r_.__value_.__l.__data_);
  if (!v6)
  {
    std::string::size_type v8 = *(NSObject **)(v4 + 440);
    *(void *)(v4 + 440) = 0;
    if (!v8) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }
  long long v7 = *(NSObject **)(v4 + 432);
  if (v7)
  {
    dispatch_retain(*(dispatch_object_t *)(v4 + 432));
    dispatch_suspend(v7);
  }
  std::string::size_type v8 = *(NSObject **)(v4 + 440);
  *(void *)(v4 + 440) = v7;
  if (v8)
  {
LABEL_11:
    dispatch_resume(v8);
    dispatch_release(v8);
  }
LABEL_12:
  BootModule::setVoiceCall_sync((BootModule *)v4, v6);
  uint64_t v9 = (const void *)*MEMORY[0x1E4F4C220];
  size_t v10 = strlen((const char *)*MEMORY[0x1E4F4C220]);
  if (v10 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  long long v11 = (void *)v10;
  if (v10 >= 0x17)
  {
    uint64_t v14 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v10 | 7) != 0x17) {
      uint64_t v14 = v10 | 7;
    }
    uint64_t v15 = v14 + 1;
    std::string v12 = (void **)operator new(v14 + 1);
    __dst[1] = v11;
    unint64_t v59 = v15 | 0x8000000000000000;
    __dst[0] = v12;
LABEL_20:
    memmove(v12, v9, (size_t)v11);
    *((unsigned char *)v11 + (void)v12) = 0;
    uint64_t v13 = (void *)v2[1];
    xpc_object_t v57 = v13;
    if (v13) {
      goto LABEL_16;
    }
LABEL_21:
    xpc_object_t v57 = xpc_null_create();
    goto LABEL_22;
  }
  HIBYTE(v59) = v10;
  std::string v12 = __dst;
  if (v10) {
    goto LABEL_20;
  }
  LOBYTE(__dst[0]) = 0;
  uint64_t v13 = (void *)v2[1];
  xpc_object_t v57 = v13;
  if (!v13) {
    goto LABEL_21;
  }
LABEL_16:
  xpc_retain(v13);
LABEL_22:
  aBlock = 0;
  Service::broadcastEvent(v4, (uint64_t)__dst, &v57, (const void **)&aBlock);
  if (aBlock) {
    _Block_release(aBlock);
  }
  xpc_release(v57);
  xpc_object_t v57 = 0;
  if (SHIBYTE(v59) < 0) {
    operator delete(__dst[0]);
  }
LABEL_26:
  char v16 = (const char *)*MEMORY[0x1E4F4D2E0];
  if (xpc_dictionary_get_value((xpc_object_t)v2[1], (const char *)*MEMORY[0x1E4F4D2E0]))
  {
    xpc_object_t v17 = xpc_dictionary_get_value((xpc_object_t)v2[1], v16);
    object.__r_.__value_.__r.__words[0] = (std::string::size_type)v17;
    if (v17) {
      xpc_retain(v17);
    }
    else {
      object.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
    }
    int v18 = xpc::dyn_cast_or_default((xpc *)&object, (const object *)0xFFFFFFFFLL);
    xpc_release(object.__r_.__value_.__l.__data_);
    BootModule::setRat1_sync((void *)v4, v18);
  }
  CFTypeID v19 = (const char *)*MEMORY[0x1E4F4D2E8];
  if (xpc_dictionary_get_value((xpc_object_t)v2[1], (const char *)*MEMORY[0x1E4F4D2E8]))
  {
    xpc_object_t v20 = xpc_dictionary_get_value((xpc_object_t)v2[1], v19);
    object.__r_.__value_.__r.__words[0] = (std::string::size_type)v20;
    if (v20) {
      xpc_retain(v20);
    }
    else {
      object.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
    }
    int v21 = xpc::dyn_cast_or_default((xpc *)&object, (const object *)0xFFFFFFFFLL);
    xpc_release(object.__r_.__value_.__l.__data_);
    BootModule::setRat2_sync((void *)v4, v21);
  }
  size_t v22 = (const char *)*MEMORY[0x1E4F4D320];
  if (xpc_dictionary_get_value((xpc_object_t)v2[1], (const char *)*MEMORY[0x1E4F4D320]))
  {
    memset(&object, 170, sizeof(object));
    xpc_object_t v23 = xpc_dictionary_get_value((xpc_object_t)v2[1], v22);
    xpc_object_t v54 = v23;
    if (v23) {
      xpc_retain(v23);
    }
    else {
      xpc_object_t v54 = xpc_null_create();
    }
    xpc::dyn_cast_or_default((uint64_t *)&object, (xpc *)&v54, (const object *)"", v24);
    xpc_release(v54);
    if (SHIBYTE(object.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v53, object.__r_.__value_.__l.__data_, object.__r_.__value_.__l.__size_);
    }
    else {
      std::string v53 = object;
    }
    BootModule::setPLMN1_sync((void *)v4, (uint64_t)&v53);
    if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v53.__r_.__value_.__l.__data_);
      if ((SHIBYTE(object.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_45;
      }
    }
    else if ((SHIBYTE(object.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_45;
    }
    operator delete(object.__r_.__value_.__l.__data_);
  }
LABEL_45:
  uint64_t v25 = (const char *)*MEMORY[0x1E4F4D328];
  if (!xpc_dictionary_get_value((xpc_object_t)v2[1], (const char *)*MEMORY[0x1E4F4D328])) {
    goto LABEL_56;
  }
  memset(&object, 170, sizeof(object));
  xpc_object_t v26 = xpc_dictionary_get_value((xpc_object_t)v2[1], v25);
  xpc_object_t v54 = v26;
  if (v26) {
    xpc_retain(v26);
  }
  else {
    xpc_object_t v54 = xpc_null_create();
  }
  xpc::dyn_cast_or_default((uint64_t *)&object, (xpc *)&v54, (const object *)"", v27);
  xpc_release(v54);
  if (SHIBYTE(object.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__p, object.__r_.__value_.__l.__data_, object.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = object;
  }
  BootModule::setPLMN2_sync((void *)v4, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(object.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_56;
    }
  }
  else if ((SHIBYTE(object.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_56;
  }
  operator delete(object.__r_.__value_.__l.__data_);
LABEL_56:
  unint64_t v28 = (const char *)*MEMORY[0x1E4F4C0D0];
  if (xpc_dictionary_get_value((xpc_object_t)v2[1], (const char *)*MEMORY[0x1E4F4C0D0]))
  {
    xpc_object_t v29 = xpc_dictionary_get_value((xpc_object_t)v2[1], v28);
    object.__r_.__value_.__r.__words[0] = (std::string::size_type)v29;
    if (v29) {
      xpc_retain(v29);
    }
    else {
      object.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
    }
    uint64_t v30 = xpc::dyn_cast_or_default((xpc *)&object, 0);
    xpc_release(object.__r_.__value_.__l.__data_);
    BootModule::setCellId_sync((void *)v4, v30, 0);
  }
  std::string v31 = (const char *)*MEMORY[0x1E4F4C0D8];
  if (xpc_dictionary_get_value((xpc_object_t)v2[1], (const char *)*MEMORY[0x1E4F4C0D8]))
  {
    xpc_object_t v32 = xpc_dictionary_get_value((xpc_object_t)v2[1], v31);
    object.__r_.__value_.__r.__words[0] = (std::string::size_type)v32;
    if (v32) {
      xpc_retain(v32);
    }
    else {
      object.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
    }
    uint64_t v33 = xpc::dyn_cast_or_default((xpc *)&object, 0);
    xpc_release(object.__r_.__value_.__l.__data_);
    BootModule::setCellId_sync((void *)v4, v33, 1);
  }
  uint64_t v34 = (const char *)*MEMORY[0x1E4F4C160];
  if (xpc_dictionary_get_value((xpc_object_t)v2[1], (const char *)*MEMORY[0x1E4F4C160]))
  {
    xpc_object_t v35 = xpc_dictionary_get_value((xpc_object_t)v2[1], v34);
    object.__r_.__value_.__r.__words[0] = (std::string::size_type)v35;
    if (v35) {
      xpc_retain(v35);
    }
    else {
      object.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
    }
    uint64_t v36 = xpc::dyn_cast_or_default((xpc *)&object, 0);
    xpc_release(object.__r_.__value_.__l.__data_);
    BootModule::setAreaCode_sync((void *)v4, v36, 0);
  }
  char v37 = (const char *)*MEMORY[0x1E4F4C168];
  if (xpc_dictionary_get_value((xpc_object_t)v2[1], (const char *)*MEMORY[0x1E4F4C168]))
  {
    xpc_object_t v38 = xpc_dictionary_get_value((xpc_object_t)v2[1], v37);
    object.__r_.__value_.__r.__words[0] = (std::string::size_type)v38;
    if (v38) {
      xpc_retain(v38);
    }
    else {
      object.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
    }
    uint64_t v39 = xpc::dyn_cast_or_default((xpc *)&object, 0);
    xpc_release(object.__r_.__value_.__l.__data_);
    BootModule::setAreaCode_sync((void *)v4, v39, 1);
  }
  uint64_t v40 = (const char *)*MEMORY[0x1E4F4D308];
  if (xpc_dictionary_get_value((xpc_object_t)v2[1], (const char *)*MEMORY[0x1E4F4D308])
    || xpc_dictionary_get_value((xpc_object_t)v2[1], (const char *)*MEMORY[0x1E4F4D310]))
  {
    xpc_object_t v41 = xpc_dictionary_get_value((xpc_object_t)v2[1], v40);
    object.__r_.__value_.__r.__words[0] = (std::string::size_type)v41;
    if (v41) {
      xpc_retain(v41);
    }
    else {
      object.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
    }
    char v42 = xpc::dyn_cast_or_default((xpc *)&object, 0);
    xpc_release(object.__r_.__value_.__l.__data_);
    if ((v42 & 1) == 0)
    {
      xpc_object_t v43 = xpc_dictionary_get_value((xpc_object_t)v2[1], (const char *)*MEMORY[0x1E4F4D310]);
      object.__r_.__value_.__r.__words[0] = (std::string::size_type)v43;
      if (v43) {
        xpc_retain(v43);
      }
      else {
        object.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
      }
      int v44 = xpc::dyn_cast_or_default((xpc *)&object, 0);
      xpc_release(object.__r_.__value_.__l.__data_);
      if (!v44)
      {
        long long v46 = *(NSObject **)(v4 + 440);
        *(void *)(v4 + 440) = 0;
        if (!v46) {
          goto LABEL_92;
        }
        goto LABEL_91;
      }
    }
    long long v45 = *(NSObject **)(v4 + 432);
    if (v45)
    {
      dispatch_retain(*(dispatch_object_t *)(v4 + 432));
      dispatch_suspend(v45);
    }
    long long v46 = *(NSObject **)(v4 + 440);
    *(void *)(v4 + 440) = v45;
    if (v46)
    {
LABEL_91:
      dispatch_resume(v46);
      dispatch_release(v46);
    }
  }
LABEL_92:
  if (v2[2])
  {
    xpc_object_t v47 = xpc_null_create();
    uint64_t v48 = v2[2];
    object.__r_.__value_.__r.__words[0] = (std::string::size_type)v47;
    xpc_object_t v49 = xpc_null_create();
    (*(void (**)(uint64_t, void, std::string *))(v48 + 16))(v48, 0, &object);
    xpc_release(object.__r_.__value_.__l.__data_);
    xpc_release(v49);
    char v50 = (const void *)v2[2];
    if (v50) {
      _Block_release(v50);
    }
  }
  xpc_release((xpc_object_t)v2[1]);
  operator delete(v2);
  long long v51 = (std::__shared_weak_count *)*((void *)a1 + 2);
  if (v51 && !atomic_fetch_add(&v51->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
    std::__shared_weak_count::__release_weak(v51);
  }
  operator delete(a1);
}

void sub_1C57F2D40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,xpc_object_t object,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *aBlock,xpc_object_t a30)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  uint64_t v33 = *(const void **)(v31 + 16);
  if (v33) {
    _Block_release(v33);
  }
  xpc_release(*(xpc_object_t *)(v31 + 8));
  operator delete((void *)v31);
  uint64_t v34 = (std::__shared_weak_count *)v30[2];
  if (v34)
  {
    if (!atomic_fetch_add(&v34->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  operator delete(v30);
  _Unwind_Resume(a1);
}

void dispatch::async<void ctu::SharedSynchronizable<BootModule>::execute_wrapped<BootModule::initialize(dispatch::group_session)::$_0>(BootModule::initialize(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<BootModule::initialize(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<BootModule::initialize(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  uint64_t v2 = *(BootModule ***)a1;
  BootModule::finishInitialization_sync(**(BootModule ***)a1);
  operator delete(v2);
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    uint64_t v4 = (void *)a1;
  }
  else
  {
    uint64_t v4 = (void *)a1;
  }
  operator delete(v4);
}

void sub_1C57F3078(_Unwind_Exception *a1)
{
  operator delete(v2);
  uint64_t v4 = (std::__shared_weak_count *)v1[2];
  if (v4)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void dispatch::async<void ctu::SharedSynchronizable<BootModule>::execute_wrapped<BootModule::start(dispatch::group_session)::$_0>(BootModule::start(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<BootModule::start(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<BootModule::start(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (*a1)[3];
  uint64_t v4 = *(NSObject **)(v3 + 136);
  dispatch_object_t object = v4;
  if (v4) {
    dispatch_retain(v4);
  }
  GetABMLogServer(&v33);
  pthread_mutex_lock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
  uint64_t v5 = off_1EBBDCFD0;
  if (!off_1EBBDCFD0)
  {
    ABMServer::create_default_global(&v37);
    long long v6 = *(_OWORD *)&v37.__r_.__value_.__l.__data_;
    *(_OWORD *)&v37.__r_.__value_.__l.__data_ = 0uLL;
    long long v7 = (std::__shared_weak_count *)*(&off_1EBBDCFD0 + 1);
    off_1EBBDCFD0 = v6;
    if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    size_t size = (std::__shared_weak_count *)v37.__r_.__value_.__l.__size_;
    if (v37.__r_.__value_.__l.__size_
      && !atomic_fetch_add((atomic_ullong *volatile)(v37.__r_.__value_.__l.__size_ + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
    uint64_t v5 = off_1EBBDCFD0;
  }
  uint64_t v9 = (std::__shared_weak_count *)*(&off_1EBBDCFD0 + 1);
  if (*(&off_1EBBDCFD0 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDCFD0 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
  ResetDetection::create(&object, &v33, *(void *)(*(void *)v5 + 208), (uint64_t *)&v36);
  long long v10 = v36;
  long long v36 = 0uLL;
  long long v11 = *(std::__shared_weak_count **)(v3 + 184);
  *(_OWORD *)(v3 + 176) = v10;
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  std::string v12 = (std::__shared_weak_count *)*((void *)&v36 + 1);
  if (*((void *)&v36 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v36 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  uint64_t v13 = v34;
  if (v34 && !atomic_fetch_add(&v34->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  if (object) {
    dispatch_release(object);
  }
  uint64_t v14 = *(void *)(v3 + 176);
  v37.__r_.__value_.__r.__words[0] = MEMORY[0x1E4F143A8];
  v37.__r_.__value_.__l.__size_ = 0x40000000;
  v37.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZN14ResetDetection5startEv_block_invoke;
  xpc_object_t v38 = &__block_descriptor_tmp_3;
  uint64_t v39 = v14;
  ctu::SharedSynchronizable<ResetDetection>::execute_wrapped((uint64_t *)(v14 + 72), (uint64_t)&v37);
  uint64_t v15 = v2[2];
  if (v15)
  {
    dispatch_retain((dispatch_object_t)v2[2]);
    dispatch_group_enter(v15);
  }
  char v16 = *(NSObject **)(v3 + 208);
  *(void *)(v3 + 208) = v15;
  if (v16)
  {
    dispatch_group_leave(v16);
    dispatch_release(v16);
  }
  *(void *)&long long v36 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v36 + 1) = 0xAAAAAAAAAAAAAAAALL;
  (*(void (**)(long long *__return_ptr, uint64_t))(*(void *)v3 + 80))(&v36, v3);
  uint64_t v17 = v36;
  if ((void)v36)
  {
    dispatch_object_t v32 = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
    int v18 = (char *)operator new(0x38uLL);
    strcpy(v18, "com.apple.AppleBasebandManager.RadioNotReady.Bootup");
    uint64_t v19 = capabilities::abs::bootupAssertionTimeoutScalingFactor((capabilities::abs *)v18);
    uint64_t v20 = *(void *)(v17 + 104);
    std::string::__init_copy_ctor_external(&v37, v18, 0x33uLL);
    (*(void (**)(dispatch_object_t *__return_ptr, uint64_t, std::string *, uint64_t))(*(void *)v20 + 24))(&v32, v20, &v37, 180000 * v19);
    if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v37.__r_.__value_.__l.__data_);
    }
    operator delete(v18);
    uint64_t v22 = *v2;
    uint64_t v21 = v2[1];
    if (v21) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v21 + 16), 1uLL, memory_order_relaxed);
    }
    dispatch_object_t v23 = v32;
    if (v32)
    {
      dispatch_retain(v32);
      uint64_t v24 = v32;
    }
    else
    {
      uint64_t v24 = 0;
    }
    uint64_t v25 = *(NSObject **)(v3 + 136);
    xpc_object_t v26 = operator new(0x20uLL);
    *xpc_object_t v26 = v3;
    v26[1] = v22;
    v26[2] = v21;
    v26[3] = v23;
    dispatch_group_notify_f(v24, v25, v26, (dispatch_function_t)dispatch::detail::group_notify<BootModule::start(dispatch::group_session)::$_0::operator() const(void)::{lambda(void)#1}>(dispatch_group_s *,dispatch_queue_s *,BootModule::start(dispatch::group_session)::$_0::operator() const(void)::{lambda(void)#1} &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke);
    if (v32) {
      dispatch_release(v32);
    }
  }
  dispatch_object_t v27 = (std::__shared_weak_count *)*((void *)&v36 + 1);
  if (*((void *)&v36 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v36 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
    std::__shared_weak_count::__release_weak(v27);
  }
  unint64_t v28 = v2[2];
  if (v28)
  {
    dispatch_group_leave(v28);
    xpc_object_t v29 = v2[2];
    if (v29) {
      dispatch_release(v29);
    }
  }
  uint64_t v30 = (std::__shared_weak_count *)v2[1];
  if (v30) {
    std::__shared_weak_count::__release_weak(v30);
  }
  operator delete(v2);
  uint64_t v31 = (std::__shared_weak_count *)a1[2];
  if (v31 && !atomic_fetch_add(&v31->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
    std::__shared_weak_count::__release_weak(v31);
  }
  operator delete(a1);
}

void sub_1C57F3610(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, dispatch_object_t a9, uint64_t a10, std::__shared_weak_count *a11, dispatch_object_t object, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  pthread_mutex_unlock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
  if (a11 && !atomic_fetch_add(&a11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))a11->__on_zero_shared)(a11);
    std::__shared_weak_count::__release_weak(a11);
  }
  if (object) {
    dispatch_release(object);
  }
  dispatch_object_t v23 = v21[2];
  if (v23)
  {
    dispatch_group_leave(v23);
    uint64_t v24 = v21[2];
    if (v24) {
      dispatch_release(v24);
    }
  }
  uint64_t v25 = (std::__shared_weak_count *)v21[1];
  if (v25) {
    std::__shared_weak_count::__release_weak(v25);
  }
  operator delete(v21);
  xpc_object_t v26 = (std::__shared_weak_count *)v20[2];
  if (v26)
  {
    if (!atomic_fetch_add(&v26->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  operator delete(v20);
  _Unwind_Resume(a1);
}

void dispatch::detail::group_notify<BootModule::start(dispatch::group_session)::$_0::operator() const(void)::{lambda(void)#1}>(dispatch_group_s *,dispatch_queue_s *,BootModule::start(dispatch::group_session)::$_0::operator() const(void)::{lambda(void)#1} &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke(BootModule **__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (!v2) {
    goto LABEL_31;
  }
  uint64_t v3 = *__p;
  uint64_t v4 = std::__shared_weak_count::lock(v2);
  if (!v4) {
    goto LABEL_31;
  }
  uint64_t v5 = v4;
  long long v6 = __p[1];
  if (v6)
  {
    if (*((_DWORD *)v3 + 114))
    {
      uint64_t v7 = *MEMORY[0x1E4F1CF80];
      CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      ctu::cf::insert<char const*,char const*>(Mutable, (const __CFString **)*MEMORY[0x1E4F4C688], (const __CFString **)*MEMORY[0x1E4F4CBC8], v7, v9);
      long long v10 = (const void *)*MEMORY[0x1E4F4CEF8];
      size_t v11 = strlen((const char *)*MEMORY[0x1E4F4CEF8]);
      if (v11 >= 0x7FFFFFFFFFFFFFF8) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      std::string v12 = (void *)v11;
      if (v11 >= 0x17)
      {
        uint64_t v14 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v11 | 7) != 0x17) {
          uint64_t v14 = v11 | 7;
        }
        uint64_t v15 = v14 + 1;
        uint64_t v13 = (void **)operator new(v14 + 1);
        __dst[1] = v12;
        unint64_t v25 = v15 | 0x8000000000000000;
        __dst[0] = v13;
      }
      else
      {
        HIBYTE(v25) = v11;
        uint64_t v13 = __dst;
        if (!v11)
        {
          LOBYTE(__dst[0]) = 0;
          if (!Mutable) {
            goto LABEL_17;
          }
LABEL_15:
          CFTypeID v16 = CFGetTypeID(Mutable);
          if (v16 == CFDictionaryGetTypeID())
          {
            CFTypeRef cf = Mutable;
            CFRetain(Mutable);
LABEL_18:
            v20[0] = MEMORY[0x1E4F143A8];
            v20[1] = 1174405120;
            v20[2] = ___ZZZN10BootModule5startEN8dispatch13group_sessionEENK3__0clEvENKUlvE_clEv_block_invoke;
            v20[3] = &__block_descriptor_tmp_218_0;
            v20[4] = v3;
            v20[5] = v6;
            uint64_t v21 = v5;
            atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
            aBlock = _Block_copy(v20);
            Service::broadcastEvent((uint64_t)v3, (uint64_t)__dst, &cf, (const void **)&aBlock);
            if (aBlock) {
              _Block_release(aBlock);
            }
            if (cf) {
              CFRelease(cf);
            }
            if (SHIBYTE(v25) < 0) {
              operator delete(__dst[0]);
            }
            uint64_t v17 = v21;
            if (v21 && !atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
              std::__shared_weak_count::__release_weak(v17);
            }
            if (Mutable) {
              CFRelease(Mutable);
            }
            goto LABEL_29;
          }
LABEL_17:
          CFTypeRef cf = 0;
          goto LABEL_18;
        }
      }
      memmove(v13, v10, (size_t)v12);
      *((unsigned char *)v12 + (void)v13) = 0;
      if (!Mutable) {
        goto LABEL_17;
      }
      goto LABEL_15;
    }
    BootModule::reportStatisticsHardResetTime_sync(v3);
    BootModule::boot_sync(v3);
  }
LABEL_29:
  if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_31:
  int v18 = __p[3];
  if (v18) {
    dispatch_release(v18);
  }
  uint64_t v19 = (std::__shared_weak_count *)__p[2];
  if (v19) {
    std::__shared_weak_count::__release_weak(v19);
  }
  operator delete(__p);
}

void sub_1C57F3B38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, void *aBlock, CFTypeRef cf, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (a15 && !atomic_fetch_add(&a15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))a15->__on_zero_shared)(a15);
    std::__shared_weak_count::__release_weak(a15);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (a23 < 0) {
    operator delete(__p);
  }
  if (v25) {
    CFRelease(v25);
  }
  if (atomic_fetch_add(&v24->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    dispatch_object_t v27 = v23[3];
    if (!v27) {
      goto LABEL_14;
    }
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
    std::__shared_weak_count::__release_weak(v24);
    dispatch_object_t v27 = v23[3];
    if (!v27)
    {
LABEL_14:
      unint64_t v28 = (std::__shared_weak_count *)v23[2];
      if (!v28) {
        goto LABEL_15;
      }
      goto LABEL_18;
    }
  }
  dispatch_release(v27);
  unint64_t v28 = (std::__shared_weak_count *)v23[2];
  if (!v28)
  {
LABEL_15:
    operator delete(v23);
    _Unwind_Resume(a1);
  }
LABEL_18:
  std::__shared_weak_count::__release_weak(v28);
  operator delete(v23);
  _Unwind_Resume(a1);
}

void ___ZZZN10BootModule5startEN8dispatch13group_sessionEENK3__0clEvENKUlvE_clEv_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  v2[0] = MEMORY[0x1E4F143A8];
  v2[1] = 0x40000000;
  v2[2] = ___ZZZN10BootModule5startEN8dispatch13group_sessionEENK3__0clEvENKUlvE_clEv_block_invoke_2;
  v2[3] = &__block_descriptor_tmp_215;
  v2[4] = v1;
  ctu::SharedSynchronizable<BootModule>::execute_wrapped((uint64_t *)(v1 + 120), (uint64_t)v2);
}

void ___ZZZN10BootModule5startEN8dispatch13group_sessionEENK3__0clEvENKUlvE_clEv_block_invoke_2(uint64_t a1)
{
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI10BootModuleE15execute_wrappedIZZNS3_21handleBootFailed_syncENSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEUb4_E3__6EEvOT_EUlvE_EEvP16dispatch_queue_sNS6_10unique_ptrISE_NS6_14default_deleteISE_EEEEENUlPvE_8__invokeESN_(void *a1)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (void *)*a1;
  if (*(_DWORD *)(*a1 + 24))
  {
    uint64_t v3 = *(NSObject **)(*v2 + 88);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      xpc::object::to_string((uint64_t *)__p, (xpc::object *)(v2 + 4));
      uint64_t v4 = v8 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)std::string buf = 136315138;
      long long v10 = v4;
      _os_log_impl(&dword_1C5767000, v3, OS_LOG_TYPE_DEFAULT, "#I Dumping logs failed: %s", buf, 0xCu);
      if (v8 < 0) {
        operator delete(__p[0]);
      }
    }
  }
  xpc_release((xpc_object_t)v2[4]);
  v2[4] = 0;
  uint64_t v5 = (std::__shared_weak_count *)v2[2];
  if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  operator delete(v2);
  long long v6 = (std::__shared_weak_count *)a1[2];
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  operator delete(a1);
}

void sub_1C57F3E84(_Unwind_Exception *a1)
{
  xpc_release(*v3);
  v2[4] = 0;
  uint64_t v5 = (std::__shared_weak_count *)v2[2];
  if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  operator delete(v2);
  long long v6 = (std::__shared_weak_count *)v1[2];
  if (v6)
  {
    if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1C57F3F3C(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI10BootModuleE15execute_wrappedIZZNS3_22checkFSSyncStatus_syncENS_5blockIU13block_pointerFvbbEEEEUb5_E3__7EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrISB_NSG_14default_deleteISB_EEEEENUlPvE_8__invokeESL_(xpc_object_t **a1)
{
  uint64_t v2 = *a1;
  if (*(_DWORD *)*a1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = 1;
  }
  else
  {
    xpc_object_t value = xpc_dictionary_get_value(v2[1], (const char *)*MEMORY[0x1E4F4C590]);
    xpc_object_t object = value;
    if (value) {
      xpc_retain(value);
    }
    else {
      xpc_object_t object = xpc_null_create();
    }
    uint64_t v3 = xpc::dyn_cast_or_default((xpc *)&object, 0);
    xpc_release(object);
    xpc_object_t v6 = xpc_dictionary_get_value(v2[1], (const char *)*MEMORY[0x1E4F4C598]);
    xpc_object_t object = v6;
    if (v6) {
      xpc_retain(v6);
    }
    else {
      xpc_object_t object = xpc_null_create();
    }
    uint64_t v4 = xpc::dyn_cast_or_default((xpc *)&object, 0);
    xpc_release(object);
  }
  uint64_t v7 = (void (**)(xpc_object_t, uint64_t, uint64_t))v2[2];
  if (v7)
  {
    v7[2](v7, v3, v4);
    xpc_object_t v8 = v2[2];
    if (v8) {
      _Block_release(v8);
    }
  }
  xpc_release(v2[1]);
  operator delete(v2);
  CFAllocatorRef v9 = (std::__shared_weak_count *)a1[2];
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  operator delete(a1);
}

void sub_1C57F40B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  xpc_release(object);
  uint64_t v13 = *(const void **)(v11 + 16);
  if (v13) {
    _Block_release(v13);
  }
  xpc_release(*(xpc_object_t *)(v11 + 8));
  operator delete((void *)v11);
  uint64_t v14 = (std::__shared_weak_count *)v10[2];
  if (v14)
  {
    if (!atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  operator delete(v10);
  _Unwind_Resume(a1);
}

void dispatch::detail::group_notify<BootModule::setVoiceCall_sync(BOOL)::$_0>(dispatch_group_s *,dispatch_queue_s *,BootModule::setVoiceCall_sync(BOOL)::$_0 &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke(uint64_t *__p)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
  {
    uint64_t v3 = *__p;
    uint64_t v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      uint64_t v5 = v4;
      if (__p[1])
      {
        int v6 = *((unsigned __int8 *)__p + 24);
        *(unsigned char *)(v3 + 288) = v6;
        uint64_t v7 = *(NSObject **)(v3 + 88);
        if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
        {
          xpc_object_t v8 = "YES";
          if (!v6) {
            xpc_object_t v8 = "NO";
          }
          int v10 = 136315138;
          uint64_t v11 = v8;
          _os_log_impl(&dword_1C5767000, v7, OS_LOG_TYPE_DEFAULT, "#I Voice Call: %s", (uint8_t *)&v10, 0xCu);
        }
      }
      if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    CFAllocatorRef v9 = (std::__shared_weak_count *)__p[2];
    if (v9) {
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  operator delete(__p);
}

void dispatch::detail::group_notify<BootModule::setRat1_sync(abm::RadioAccessTechnology)::$_0>(dispatch_group_s *,dispatch_queue_s *,BootModule::setRat1_sync(abm::RadioAccessTechnology)::$_0 &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke(void *__p)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
  {
    uint64_t v3 = *__p;
    uint64_t v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      uint64_t v5 = v4;
      if (__p[1])
      {
        *(_DWORD *)(v3 + 296) = *((_DWORD *)__p + 6);
        int v6 = *(NSObject **)(v3 + 88);
        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
        {
          abm::asString();
          uint64_t v7 = v11 >= 0 ? &__pa : (void **)__pa;
          int v8 = *((_DWORD *)__p + 6);
          *(_DWORD *)std::string buf = 136315394;
          uint64_t v13 = v7;
          __int16 v14 = 1024;
          int v15 = v8;
          _os_log_impl(&dword_1C5767000, v6, OS_LOG_TYPE_DEFAULT, "#I RAT1: %s (%d)", buf, 0x12u);
          if (v11 < 0) {
            operator delete(__pa);
          }
        }
      }
      if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    CFAllocatorRef v9 = (std::__shared_weak_count *)__p[2];
    if (v9) {
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  operator delete(__p);
}

void sub_1C57F4410(_Unwind_Exception *a1)
{
  if (atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    uint64_t v4 = (std::__shared_weak_count *)v1[2];
    if (!v4) {
      goto LABEL_3;
    }
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v4 = (std::__shared_weak_count *)v1[2];
    if (!v4)
    {
LABEL_3:
      operator delete(v1);
      _Unwind_Resume(a1);
    }
  }
  std::__shared_weak_count::__release_weak(v4);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void dispatch::detail::group_notify<BootModule::setRat2_sync(abm::RadioAccessTechnology)::$_0>(dispatch_group_s *,dispatch_queue_s *,BootModule::setRat2_sync(abm::RadioAccessTechnology)::$_0 &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke(void *__p)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
  {
    uint64_t v3 = *__p;
    uint64_t v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      uint64_t v5 = v4;
      if (__p[1])
      {
        *(_DWORD *)(v3 + 344) = *((_DWORD *)__p + 6);
        int v6 = *(NSObject **)(v3 + 88);
        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
        {
          abm::asString();
          uint64_t v7 = v11 >= 0 ? &__pa : (void **)__pa;
          int v8 = *((_DWORD *)__p + 6);
          *(_DWORD *)std::string buf = 136315394;
          uint64_t v13 = v7;
          __int16 v14 = 1024;
          int v15 = v8;
          _os_log_impl(&dword_1C5767000, v6, OS_LOG_TYPE_DEFAULT, "#I RAT2: %s (%d)", buf, 0x12u);
          if (v11 < 0) {
            operator delete(__pa);
          }
        }
      }
      if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    CFAllocatorRef v9 = (std::__shared_weak_count *)__p[2];
    if (v9) {
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  operator delete(__p);
}

void sub_1C57F45F0(_Unwind_Exception *a1)
{
  if (atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    uint64_t v4 = (std::__shared_weak_count *)v1[2];
    if (!v4) {
      goto LABEL_3;
    }
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v4 = (std::__shared_weak_count *)v1[2];
    if (!v4)
    {
LABEL_3:
      operator delete(v1);
      _Unwind_Resume(a1);
    }
  }
  std::__shared_weak_count::__release_weak(v4);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void dispatch::detail::group_notify<BootModule::setPLMN1_sync(std::string)::$_0>(dispatch_group_s *,dispatch_queue_s *,BootModule::setPLMN1_sync(std::string)::$_0 &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke(char *__p)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (std::__shared_weak_count *)*((void *)__p + 2);
  if (!v2) {
    goto LABEL_21;
  }
  uint64_t v3 = *(void *)__p;
  uint64_t v4 = std::__shared_weak_count::lock(v2);
  if (!v4) {
    goto LABEL_21;
  }
  uint64_t v5 = v4;
  if (*((void *)__p + 1))
  {
    int v6 = __p + 24;
    uint64_t v7 = (void **)(v3 + 304);
    if ((char *)(v3 + 304) != __p + 24)
    {
      char v8 = __p[47];
      if (*(char *)(v3 + 327) < 0)
      {
        if (v8 >= 0) {
          int v10 = __p + 24;
        }
        else {
          int v10 = (char *)*((void *)__p + 3);
        }
        if (v8 >= 0) {
          size_t v11 = __p[47];
        }
        else {
          size_t v11 = *((void *)__p + 4);
        }
        std::string::__assign_no_alias<false>(v7, v10, v11);
      }
      else if (__p[47] < 0)
      {
        std::string::__assign_no_alias<true>(v7, *((void **)__p + 3), *((void *)__p + 4));
      }
      else
      {
        long long v9 = *v6;
        *(void *)(v3 + 320) = *((void *)__p + 5);
        *(_OWORD *)uint64_t v7 = v9;
      }
    }
    uint64_t v12 = *(NSObject **)(v3 + 88);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      if (__p[47] < 0) {
        int v6 = *(_OWORD **)v6;
      }
      int v14 = 136315138;
      int v15 = v6;
      _os_log_impl(&dword_1C5767000, v12, OS_LOG_TYPE_DEFAULT, "#I PLMN1: %s", (uint8_t *)&v14, 0xCu);
    }
  }
  if (atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
LABEL_21:
    if ((__p[47] & 0x80000000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_22;
  }
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  if (__p[47] < 0) {
LABEL_22:
  }
    operator delete(*((void **)__p + 3));
LABEL_23:
  uint64_t v13 = (std::__shared_weak_count *)*((void *)__p + 2);
  if (v13) {
    std::__shared_weak_count::__release_weak(v13);
  }
  operator delete(__p);
}

void sub_1C57F4800(_Unwind_Exception *a1)
{
  if (atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if ((*(char *)(v1 + 47) & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    if ((*(char *)(v1 + 47) & 0x80000000) == 0)
    {
LABEL_3:
      uint64_t v5 = *(std::__shared_weak_count **)(v1 + 16);
      if (!v5) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  operator delete(*v3);
  uint64_t v5 = *(std::__shared_weak_count **)(v1 + 16);
  if (!v5)
  {
LABEL_4:
    operator delete((void *)v1);
    _Unwind_Resume(a1);
  }
LABEL_7:
  std::__shared_weak_count::__release_weak(v5);
  operator delete((void *)v1);
  _Unwind_Resume(a1);
}

void dispatch::detail::group_notify<BootModule::setPLMN2_sync(std::string)::$_0>(dispatch_group_s *,dispatch_queue_s *,BootModule::setPLMN2_sync(std::string)::$_0 &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke(char *__p)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (std::__shared_weak_count *)*((void *)__p + 2);
  if (!v2) {
    goto LABEL_21;
  }
  uint64_t v3 = *(void *)__p;
  uint64_t v4 = std::__shared_weak_count::lock(v2);
  if (!v4) {
    goto LABEL_21;
  }
  uint64_t v5 = v4;
  if (*((void *)__p + 1))
  {
    int v6 = __p + 24;
    uint64_t v7 = (void **)(v3 + 352);
    if ((char *)(v3 + 352) != __p + 24)
    {
      char v8 = __p[47];
      if (*(char *)(v3 + 375) < 0)
      {
        if (v8 >= 0) {
          int v10 = __p + 24;
        }
        else {
          int v10 = (char *)*((void *)__p + 3);
        }
        if (v8 >= 0) {
          size_t v11 = __p[47];
        }
        else {
          size_t v11 = *((void *)__p + 4);
        }
        std::string::__assign_no_alias<false>(v7, v10, v11);
      }
      else if (__p[47] < 0)
      {
        std::string::__assign_no_alias<true>(v7, *((void **)__p + 3), *((void *)__p + 4));
      }
      else
      {
        long long v9 = *v6;
        *(void *)(v3 + 368) = *((void *)__p + 5);
        *(_OWORD *)uint64_t v7 = v9;
      }
    }
    uint64_t v12 = *(NSObject **)(v3 + 88);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      if (__p[47] < 0) {
        int v6 = *(_OWORD **)v6;
      }
      int v14 = 136315138;
      int v15 = v6;
      _os_log_impl(&dword_1C5767000, v12, OS_LOG_TYPE_DEFAULT, "#I PLMN2: %s", (uint8_t *)&v14, 0xCu);
    }
  }
  if (atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
LABEL_21:
    if ((__p[47] & 0x80000000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_22;
  }
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  if (__p[47] < 0) {
LABEL_22:
  }
    operator delete(*((void **)__p + 3));
LABEL_23:
  uint64_t v13 = (std::__shared_weak_count *)*((void *)__p + 2);
  if (v13) {
    std::__shared_weak_count::__release_weak(v13);
  }
  operator delete(__p);
}

void sub_1C57F4A28(_Unwind_Exception *a1)
{
  if (atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if ((*(char *)(v1 + 47) & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    if ((*(char *)(v1 + 47) & 0x80000000) == 0)
    {
LABEL_3:
      uint64_t v5 = *(std::__shared_weak_count **)(v1 + 16);
      if (!v5) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  operator delete(*v3);
  uint64_t v5 = *(std::__shared_weak_count **)(v1 + 16);
  if (!v5)
  {
LABEL_4:
    operator delete((void *)v1);
    _Unwind_Resume(a1);
  }
LABEL_7:
  std::__shared_weak_count::__release_weak(v5);
  operator delete((void *)v1);
  _Unwind_Resume(a1);
}

void dispatch::detail::group_notify<BootModule::setCellId_sync(unsigned long long,BootModule::SimSlotIndex)::$_0>(dispatch_group_s *,dispatch_queue_s *,BootModule::setCellId_sync(unsigned long long,BootModule::SimSlotIndex)::$_0 &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke(void *__p)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
  {
    uint64_t v3 = *__p;
    uint64_t v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      uint64_t v5 = v4;
      if (__p[1])
      {
        uint64_t v6 = __p[3];
        unsigned int v7 = *((_DWORD *)__p + 8);
        *(void *)(v3 + 48 * v7 + 328) = v6;
        char v8 = *(NSObject **)(v3 + 88);
        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
        {
          v10[0] = 67109376;
          v10[1] = v7 + 1;
          __int16 v11 = 2048;
          uint64_t v12 = v6;
          _os_log_impl(&dword_1C5767000, v8, OS_LOG_TYPE_DEFAULT, "#I CellId%d: %llu", (uint8_t *)v10, 0x12u);
        }
      }
      if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    long long v9 = (std::__shared_weak_count *)__p[2];
    if (v9) {
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  operator delete(__p);
}

void dispatch::detail::group_notify<BootModule::setAreaCode_sync(unsigned long long,BootModule::SimSlotIndex)::$_0>(dispatch_group_s *,dispatch_queue_s *,BootModule::setAreaCode_sync(unsigned long long,BootModule::SimSlotIndex)::$_0 &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke(void *__p)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
  {
    uint64_t v3 = *__p;
    uint64_t v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      uint64_t v5 = v4;
      if (__p[1])
      {
        uint64_t v6 = __p[3];
        unsigned int v7 = *((_DWORD *)__p + 8);
        *(void *)(v3 + 48 * v7 + 336) = v6;
        char v8 = *(NSObject **)(v3 + 88);
        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
        {
          v10[0] = 67109376;
          v10[1] = v7 + 1;
          __int16 v11 = 2048;
          uint64_t v12 = v6;
          _os_log_impl(&dword_1C5767000, v8, OS_LOG_TYPE_DEFAULT, "#I AreaCode%d: %llu", (uint8_t *)v10, 0x12u);
        }
      }
      if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    long long v9 = (std::__shared_weak_count *)__p[2];
    if (v9) {
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  operator delete(__p);
}

void dispatch::async<void ctu::SharedSynchronizable<BootModule>::execute_wrapped<BootModule::bbResetFlag(BOOL)::$_0>(BootModule::bbResetFlag(BOOL)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<BootModule::bbResetFlag(BOOL)::$_0,dispatch_queue_s *::default_delete<BootModule::bbResetFlag(BOOL)::$_0>>)::{lambda(void *)#1}::__invoke(NSObject ****a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = **a1;
  if (*((unsigned char *)*a1 + 8))
  {
    uint64_t v4 = v3[52];
    if (v4)
    {
      dispatch_retain(v3[52]);
      dispatch_group_enter(v4);
    }
    uint64_t v5 = v3[53];
    v3[53] = v4;
    if (v5)
    {
      dispatch_group_leave(v5);
      dispatch_release(v5);
    }
    uint64_t v6 = v3[11];
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      __int16 v13 = 0;
      unsigned int v7 = "#I The baseband reset was detected.";
      char v8 = (uint8_t *)&v13;
LABEL_12:
      _os_log_impl(&dword_1C5767000, v6, OS_LOG_TYPE_DEFAULT, v7, v8, 2u);
    }
  }
  else
  {
    long long v9 = v3[53];
    v3[53] = 0;
    if (v9)
    {
      dispatch_group_leave(v9);
      dispatch_release(v9);
    }
    uint64_t v6 = v3[11];
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      __int16 v12 = 0;
      unsigned int v7 = "#I The baseband reset-flag is reset.";
      char v8 = (uint8_t *)&v12;
      goto LABEL_12;
    }
  }
  int v10 = v3[55];
  v3[55] = 0;
  if (v10)
  {
    dispatch_resume(v10);
    dispatch_release(v10);
  }
  operator delete(v2);
  __int16 v11 = (std::__shared_weak_count *)a1[2];
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  operator delete(a1);
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100](uint64_t a1, char *a2, int a3)
{
  uint64_t v6 = (const std::locale *)MEMORY[0x1C8791F60]();
  *(void *)(a1 + 8) = std::locale::use_facet(v6, MEMORY[0x1E4FBA258]);
  *(void *)(a1 + 16) = std::locale::use_facet((const std::locale *)a1, MEMORY[0x1E4FBA280]);
  *(_DWORD *)(a1 + 24) = a3;
  *(_OWORD *)(a1 + 28) = 0u;
  *(_OWORD *)(a1 + 44) = 0u;
  *(_DWORD *)(a1 + 60) = 0;
  size_t v7 = strlen(a2);
  if (std::basic_regex<char,std::regex_traits<char>>::__parse<char const*>(a1, a2, &a2[v7]) != &a2[v7]) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)17>();
  }
  return a1;
}

void sub_1C57F4F58(_Unwind_Exception *a1)
{
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v2);
  std::locale::~locale(v1);
  _Unwind_Resume(a1);
}

void sub_1C57F4F74(_Unwind_Exception *a1)
{
  std::locale::~locale(v1);
  _Unwind_Resume(a1);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse<char const*>(uint64_t a1, char *a2, char *a3)
{
  uint64_t v6 = operator new(8uLL);
  void *v6 = &unk_1F20F4910;
  size_t v7 = operator new(0x10uLL);
  v7[1] = v6;
  char v8 = operator new(0x20uLL);
  void *v8 = &unk_1F20F4968;
  v8[1] = 0;
  v8[2] = 0;
  v8[3] = v7;
  long long v9 = *(std::__shared_weak_count **)(a1 + 48);
  *(void *)(a1 + 40) = v7;
  *(void *)(a1 + 48) = v8;
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
    uint64_t v10 = *(void *)(a1 + 40);
    *(void *)(a1 + 56) = v10;
    unsigned int v11 = *(_DWORD *)(a1 + 24) & 0x1F0;
    if (v11 <= 0x3F) {
      goto LABEL_4;
    }
LABEL_9:
    if (v11 != 64)
    {
      if (v11 == 128)
      {
        return std::basic_regex<char,std::regex_traits<char>>::__parse_grep<char const*>(a1, a2, a3);
      }
      if (v11 == 256)
      {
        return (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_egrep<char const*>(a1, (std::basic_regex<char> *)a2, (std::basic_regex<char> *)a3);
      }
LABEL_31:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)14>();
    }
LABEL_15:
    return (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>(a1, (std::basic_regex<char> *)a2, (std::basic_regex<char> *)a3);
  }
  uint64_t v10 = *(void *)(a1 + 40);
  *(void *)(a1 + 56) = v10;
  unsigned int v11 = *(_DWORD *)(a1 + 24) & 0x1F0;
  if (v11 > 0x3F) {
    goto LABEL_9;
  }
LABEL_4:
  if (v11)
  {
    if (v11 == 16)
    {
      return std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<char const*>(a1, a2, a3);
    }
    if (v11 != 32) {
      goto LABEL_31;
    }
    goto LABEL_15;
  }
  __int16 v13 = a2;
  while (1)
  {
    int v14 = (std::basic_regex<char> *)v13;
    __int16 v13 = std::basic_regex<char,std::regex_traits<char>>::__parse_assertion<char const*>(a1, v13, a3);
    if (v13 == (char *)v14) {
      break;
    }
LABEL_19:
    if (v13 == (char *)v14) {
      goto LABEL_29;
    }
  }
  int v15 = *(std::__owns_one_state<char> **)(a1 + 56);
  int v16 = *(_DWORD *)(a1 + 28);
  uint64_t v17 = std::basic_regex<char,std::regex_traits<char>>::__parse_atom<char const*>((std::basic_regex<char> *)a1, v14, (std::basic_regex<char> *)a3);
  if (v17 != (unsigned __int8 *)v14)
  {
    __int16 v13 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>(a1, (std::basic_regex<char> *)v17, (std::basic_regex<char> *)a3, v15, (v16 + 1), (*(_DWORD *)(a1 + 28) + 1));
    goto LABEL_19;
  }
LABEL_29:
  if (v14 == (std::basic_regex<char> *)a2)
  {
    int v18 = operator new(0x10uLL);
    uint64_t v19 = *(void *)(a1 + 56);
    uint64_t v20 = *(void *)(v19 + 8);
    v18[1] = v20;
    *(void *)(v19 + 8) = v18;
    uint64_t v21 = *(void *)(*(void *)(a1 + 56) + 8);
    goto LABEL_32;
  }
LABEL_33:
  if (v14 != (std::basic_regex<char> *)a3)
  {
    if (LOBYTE(v14->__traits_.__loc_.__locale_) == 124)
    {
      uint64_t v22 = *(void *)(a1 + 56);
      dispatch_object_t v23 = (std::basic_regex<char> *)((char *)&v14->__traits_.__loc_.__locale_ + 1);
      uint64_t v24 = (char *)&v14->__traits_.__loc_.__locale_ + 1;
      while (1)
      {
        int v14 = (std::basic_regex<char> *)v24;
        uint64_t v24 = std::basic_regex<char,std::regex_traits<char>>::__parse_assertion<char const*>(a1, v24, a3);
        if (v24 == (char *)v14)
        {
          unint64_t v25 = *(std::__owns_one_state<char> **)(a1 + 56);
          int v26 = *(_DWORD *)(a1 + 28);
          dispatch_object_t v27 = std::basic_regex<char,std::regex_traits<char>>::__parse_atom<char const*>((std::basic_regex<char> *)a1, v14, (std::basic_regex<char> *)a3);
          if (v27 == (unsigned __int8 *)v14)
          {
LABEL_40:
            if (v14 == v23)
            {
              unint64_t v28 = operator new(0x10uLL);
              uint64_t v29 = *(void *)(a1 + 56);
              uint64_t v30 = *(void *)(v29 + 8);
              v28[1] = v30;
              *(void *)(v29 + 8) = v28;
              *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
            }
            uint64_t v31 = operator new(0x18uLL);
            uint64_t v32 = *(void *)(v22 + 8);
            v31[1] = *(void *)(v10 + 8);
            v31[2] = v32;
            *uint64_t v31 = &unk_1F20F4F28;
            *(void *)(v10 + 8) = v31;
            *(void *)(v22 + 8) = 0;
            uint64_t v33 = operator new(0x10uLL);
            uint64_t v34 = *(void *)(*(void *)(a1 + 56) + 8);
            v33[1] = v34;
            *(void *)(v22 + 8) = v33;
            *(void *)(*(void *)(a1 + 56) + 8) = 0;
            xpc_object_t v35 = operator new(0x10uLL);
            uint64_t v36 = *(void *)(v22 + 8);
            *xpc_object_t v35 = &unk_1F20F4F70;
            v35[1] = v36;
            *(void *)(*(void *)(a1 + 56) + 8) = v35;
            uint64_t v21 = *(void *)(v22 + 8);
LABEL_32:
            *(void *)(a1 + 56) = v21;
            goto LABEL_33;
          }
          uint64_t v24 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>(a1, (std::basic_regex<char> *)v27, (std::basic_regex<char> *)a3, v25, (v26 + 1), (*(_DWORD *)(a1 + 28) + 1));
        }
        if (v24 == (char *)v14) {
          goto LABEL_40;
        }
      }
    }
    return (char *)v14;
  }
  return a3;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)17>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1C8791C90](exception, 17);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_1C57F5484(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<char const*>(std::basic_regex<char> *a1, char *a2, char *a3)
{
  end = a1->__end_;
  size_t v7 = a2;
  do
  {
    char v8 = (std::basic_regex<char> *)v7;
    size_t v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_assertion<char const*>((uint64_t)a1, v7, a3);
    if (v7 != (char *)v8) {
      continue;
    }
    long long v9 = a1->__end_;
    unsigned int marked_count = a1->__marked_count_;
    unsigned int v11 = (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_atom<char const*>(a1, v8);
    if (v11 == v8) {
      break;
    }
    size_t v7 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>((uint64_t)a1, v11, (std::basic_regex<char> *)a3, v9, marked_count + 1, a1->__marked_count_ + 1);
  }
  while (v7 != (char *)v8);
  if (v8 == (std::basic_regex<char> *)a2)
  {
    __int16 v12 = (std::__node<char> *)operator new(0x10uLL);
    __int16 v13 = a1->__end_;
    first = v13->__first_;
    v12[1].__vftable = (std::__node<char>_vtbl *)first;
    v13->__first_ = v12;
    int v15 = (std::__owns_one_state<char> *)a1->__end_->__first_;
    goto LABEL_8;
  }
LABEL_9:
  if (v8 != (std::basic_regex<char> *)a3)
  {
    if (LOBYTE(v8->__traits_.__loc_.__locale_) == 124)
    {
      int v16 = a1->__end_;
      uint64_t v17 = (std::basic_regex<char> *)((char *)&v8->__traits_.__loc_.__locale_ + 1);
      int v18 = (char *)&v8->__traits_.__loc_.__locale_ + 1;
      while (1)
      {
        char v8 = (std::basic_regex<char> *)v18;
        int v18 = std::basic_regex<char,std::regex_traits<char>>::__parse_assertion<char const*>((uint64_t)a1, v18, a3);
        if (v18 == (char *)v8)
        {
          uint64_t v19 = a1->__end_;
          unsigned int v20 = a1->__marked_count_;
          uint64_t v21 = (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_atom<char const*>(a1, v8);
          if (v21 == v8)
          {
LABEL_16:
            if (v8 == v17)
            {
              uint64_t v22 = (std::__node<char> *)operator new(0x10uLL);
              dispatch_object_t v23 = a1->__end_;
              uint64_t v24 = v23->__first_;
              v22[1].__vftable = (std::__node<char>_vtbl *)v24;
              v23->__first_ = v22;
              a1->__end_ = (std::__owns_one_state<char> *)a1->__end_->__first_;
            }
            unint64_t v25 = (std::__node<char> *)operator new(0x18uLL);
            int v26 = v16->__first_;
            v25[1].__vftable = (std::__node<char>_vtbl *)end->__first_;
            v25[2].__vftable = (std::__node<char>_vtbl *)v26;
            v25->__vftable = (std::__node<char>_vtbl *)&unk_1F20F4F28;
            end->__first_ = v25;
            v16->__first_ = 0;
            dispatch_object_t v27 = (std::__node<char> *)operator new(0x10uLL);
            unint64_t v28 = a1->__end_->__first_;
            v27[1].__vftable = (std::__node<char>_vtbl *)v28;
            v16->__first_ = v27;
            a1->__end_->__first_ = 0;
            uint64_t v29 = (std::__node<char> *)operator new(0x10uLL);
            uint64_t v30 = v16->__first_;
            v29->__vftable = (std::__node<char>_vtbl *)&unk_1F20F4F70;
            v29[1].__vftable = (std::__node<char>_vtbl *)v30;
            a1->__end_->__first_ = v29;
            int v15 = (std::__owns_one_state<char> *)v16->__first_;
LABEL_8:
            a1->__end_ = v15;
            goto LABEL_9;
          }
          int v18 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>((uint64_t)a1, v21, (std::basic_regex<char> *)a3, v19, v20 + 1, a1->__marked_count_ + 1);
        }
        if (v18 == (char *)v8) {
          goto LABEL_16;
        }
      }
    }
    return (char *)v8;
  }
  return a3;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<char const*>(uint64_t a1, char *a2, char *a3)
{
  uint64_t v3 = (std::basic_regex<char> *)a2;
  if (a2 == a3) {
    return a2;
  }
  if (*a2 == 94)
  {
    uint64_t v6 = operator new(0x18uLL);
    BOOL v7 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
    uint64_t v8 = *(void *)(a1 + 56);
    uint64_t v9 = *(void *)(v8 + 8);
    void *v6 = &unk_1F20F4A60;
    v6[1] = v9;
    *((unsigned char *)v6 + 16) = v7;
    *(void *)(v8 + 8) = v6;
    *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
    uint64_t v3 = (std::basic_regex<char> *)((char *)v3 + 1);
  }
  if (v3 != (std::basic_regex<char> *)a3)
  {
    while (v3 != (std::basic_regex<char> *)a3)
    {
      uint64_t v10 = v3;
      unsigned int v11 = *(std::__owns_one_state<char> **)(a1 + 56);
      int v12 = *(_DWORD *)(a1 + 28);
      __int16 v13 = std::basic_regex<char,std::regex_traits<char>>::__parse_nondupl_RE<char const*>(a1, (uint64_t)v10, a3);
      if (v13 != (char *)v10)
      {
        uint64_t v3 = std::basic_regex<char,std::regex_traits<char>>::__parse_RE_dupl_symbol<char const*>((std::basic_regex<char> *)a1, (std::basic_regex<char> *)v13, (std::basic_regex<char> *)a3, v11, (v12 + 1), (*(_DWORD *)(a1 + 28) + 1));
        if (v3 != v10) {
          continue;
        }
      }
      if ((char *)&v10->__traits_.__loc_.__locale_ + 1 != a3 || LOBYTE(v10->__traits_.__loc_.__locale_) != 36) {
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
      }
      int v14 = operator new(0x18uLL);
      BOOL v15 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
      uint64_t v16 = *(void *)(a1 + 56);
      uint64_t v17 = *(void *)(v16 + 8);
      void *v14 = &unk_1F20F4AA8;
      v14[1] = v17;
      *((unsigned char *)v14 + 16) = v15;
      *(void *)(v16 + 8) = v14;
      *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
      return a3;
    }
  }
  return a3;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>(uint64_t a1, std::basic_regex<char> *a2, std::basic_regex<char> *a3)
{
  uint64_t v6 = *(void *)(a1 + 56);
  BOOL v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<char const*>(a1, a2, a3);
  if (v7 == a2) {
    goto LABEL_12;
  }
  do
  {
    uint64_t v8 = v7;
    BOOL v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<char const*>(a1, v7, a3);
  }
  while (v7 != v8);
  if (v8 == a2) {
LABEL_12:
  }
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
  if (v8 == a3) {
    return a3;
  }
  while (LOBYTE(v8->__traits_.__loc_.__locale_) == 124)
  {
    uint64_t v9 = *(void *)(a1 + 56);
    uint64_t v10 = (std::basic_regex<char> *)((char *)&v8->__traits_.__loc_.__locale_ + 1);
    unsigned int v11 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<char const*>(a1, (std::basic_regex<char> *)((char *)&v8->__traits_.__loc_.__locale_ + 1), a3);
    if (v11 == (std::basic_regex<char> *)((char *)&v8->__traits_.__loc_.__locale_ + 1)) {
      goto LABEL_12;
    }
    do
    {
      uint64_t v8 = v11;
      unsigned int v11 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<char const*>(a1, v11, a3);
    }
    while (v11 != v8);
    if (v8 == v10) {
      goto LABEL_12;
    }
    int v12 = operator new(0x18uLL);
    uint64_t v13 = *(void *)(v9 + 8);
    v12[1] = *(void *)(v6 + 8);
    void v12[2] = v13;
    *int v12 = &unk_1F20F4F28;
    *(void *)(v6 + 8) = v12;
    *(void *)(v9 + 8) = 0;
    int v14 = operator new(0x10uLL);
    uint64_t v15 = *(void *)(*(void *)(a1 + 56) + 8);
    v14[1] = v15;
    *(void *)(v9 + 8) = v14;
    *(void *)(*(void *)(a1 + 56) + 8) = 0;
    uint64_t v16 = operator new(0x10uLL);
    uint64_t v17 = *(void *)(v9 + 8);
    *uint64_t v16 = &unk_1F20F4F70;
    v16[1] = v17;
    *(void *)(*(void *)(a1 + 56) + 8) = v16;
    *(void *)(a1 + 56) = *(void *)(v9 + 8);
    if (v8 == a3) {
      return a3;
    }
  }
  return v8;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_grep<char const*>(uint64_t a1, char *__s, char *a3)
{
  uint64_t v6 = *(void *)(a1 + 56);
  BOOL v7 = (char *)memchr(__s, 10, a3 - __s);
  if (v7) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = a3;
  }
  if (v8 == __s)
  {
    uint64_t v10 = operator new(0x10uLL);
    uint64_t v11 = *(void *)(v6 + 8);
    v10[1] = v11;
    *(void *)(v6 + 8) = v10;
    *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
    if (v8 == a3) {
      uint64_t v9 = v8;
    }
    else {
      uint64_t v9 = v8 + 1;
    }
    if (v9 == a3) {
      return a3;
    }
  }
  else
  {
    std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<char const*>(a1, __s, v8);
    if (v8 == a3) {
      uint64_t v9 = v8;
    }
    else {
      uint64_t v9 = v8 + 1;
    }
    if (v9 == a3) {
      return a3;
    }
  }
  uint64_t v12 = *(void *)(a1 + 56);
  do
  {
    uint64_t v21 = (char *)memchr(v9, 10, a3 - v9);
    if (v21) {
      uint64_t v22 = v21;
    }
    else {
      uint64_t v22 = a3;
    }
    if (v22 == v9)
    {
      uint64_t v13 = operator new(0x10uLL);
      uint64_t v14 = *(void *)(v12 + 8);
      v13[1] = v14;
      *(void *)(v12 + 8) = v13;
      *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
    }
    else
    {
      std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<char const*>(a1, v9, v22);
    }
    uint64_t v15 = operator new(0x18uLL);
    uint64_t v16 = *(void *)(v12 + 8);
    v15[1] = *(void *)(v6 + 8);
    v15[2] = v16;
    *uint64_t v15 = &unk_1F20F4F28;
    *(void *)(v6 + 8) = v15;
    *(void *)(v12 + 8) = 0;
    uint64_t v17 = operator new(0x10uLL);
    uint64_t v18 = *(void *)(*(void *)(a1 + 56) + 8);
    v17[1] = v18;
    *(void *)(v12 + 8) = v17;
    *(void *)(*(void *)(a1 + 56) + 8) = 0;
    uint64_t v19 = operator new(0x10uLL);
    uint64_t v20 = *(void *)(v12 + 8);
    void *v19 = &unk_1F20F4F70;
    v19[1] = v20;
    *(void *)(*(void *)(a1 + 56) + 8) = v19;
    uint64_t v12 = *(void *)(v12 + 8);
    *(void *)(a1 + 56) = v12;
    if (v22 == a3) {
      uint64_t v9 = v22;
    }
    else {
      uint64_t v9 = v22 + 1;
    }
  }
  while (v9 != a3);
  return a3;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_egrep<char const*>(uint64_t a1, std::basic_regex<char> *__s, std::basic_regex<char> *a3)
{
  uint64_t v6 = *(void *)(a1 + 56);
  BOOL v7 = (std::basic_regex<char> *)memchr(__s, 10, (char *)a3 - (char *)__s);
  if (v7) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = a3;
  }
  if (v8 == __s)
  {
    uint64_t v10 = operator new(0x10uLL);
    uint64_t v11 = *(void *)(v6 + 8);
    v10[1] = v11;
    *(void *)(v6 + 8) = v10;
    *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
    if (v8 == a3) {
      uint64_t v9 = v8;
    }
    else {
      uint64_t v9 = (std::basic_regex<char> *)((char *)&v8->__traits_.__loc_.__locale_ + 1);
    }
    if (v9 == a3) {
      return a3;
    }
  }
  else
  {
    std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>(a1, __s, v8);
    if (v8 == a3) {
      uint64_t v9 = v8;
    }
    else {
      uint64_t v9 = (std::basic_regex<char> *)((char *)&v8->__traits_.__loc_.__locale_ + 1);
    }
    if (v9 == a3) {
      return a3;
    }
  }
  uint64_t v12 = *(void *)(a1 + 56);
  do
  {
    uint64_t v21 = (std::basic_regex<char> *)memchr(v9, 10, (char *)a3 - (char *)v9);
    if (v21) {
      uint64_t v22 = v21;
    }
    else {
      uint64_t v22 = a3;
    }
    if (v22 == v9)
    {
      uint64_t v13 = operator new(0x10uLL);
      uint64_t v14 = *(void *)(v12 + 8);
      v13[1] = v14;
      *(void *)(v12 + 8) = v13;
      *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
    }
    else
    {
      std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>(a1, v9, v22);
    }
    uint64_t v15 = operator new(0x18uLL);
    uint64_t v16 = *(void *)(v12 + 8);
    v15[1] = *(void *)(v6 + 8);
    v15[2] = v16;
    *uint64_t v15 = &unk_1F20F4F28;
    *(void *)(v6 + 8) = v15;
    *(void *)(v12 + 8) = 0;
    uint64_t v17 = operator new(0x10uLL);
    uint64_t v18 = *(void *)(*(void *)(a1 + 56) + 8);
    v17[1] = v18;
    *(void *)(v12 + 8) = v17;
    *(void *)(*(void *)(a1 + 56) + 8) = 0;
    uint64_t v19 = operator new(0x10uLL);
    uint64_t v20 = *(void *)(v12 + 8);
    void *v19 = &unk_1F20F4F70;
    v19[1] = v20;
    *(void *)(*(void *)(a1 + 56) + 8) = v19;
    uint64_t v12 = *(void *)(v12 + 8);
    *(void *)(a1 + 56) = v12;
    if (v22 == a3) {
      uint64_t v9 = v22;
    }
    else {
      uint64_t v9 = (std::basic_regex<char> *)((char *)&v22->__traits_.__loc_.__locale_ + 1);
    }
  }
  while (v9 != a3);
  return a3;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)14>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1C8791C90](exception, 14);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_1C57F5E68(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__end_state<char>::__exec(uint64_t a1, _DWORD *a2)
{
  *a2 = -1000;
}

void std::__shared_ptr_pointer<std::__empty_state<char> *,std::shared_ptr<std::__empty_state<char>>::__shared_ptr_default_delete<std::__empty_state<char>,std::__empty_state<char>>,std::allocator<std::__empty_state<char>>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t std::__shared_ptr_pointer<std::__empty_state<char> *,std::shared_ptr<std::__empty_state<char>>::__shared_ptr_default_delete<std::__empty_state<char>,std::__empty_state<char>>,std::allocator<std::__empty_state<char>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<std::__empty_state<char> *,std::shared_ptr<std::__empty_state<char>>::__shared_ptr_default_delete<std::__empty_state<char>,std::__empty_state<char>>,std::allocator<std::__empty_state<char>>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x80000001C599EC31) {
    return a1 + 24;
  }
  if (((v3 & 0x80000001C599EC31 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000001C599EC31)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001C599EC31 & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 24;
  }
  return 0;
}

void (__cdecl ***std::__empty_state<char>::~__empty_state(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  uint64_t v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

void std::__empty_state<char>::~__empty_state(void (__cdecl ***__p)(std::__owns_one_state<char> *__hidden this))
{
  uint64_t v2 = __p[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }

  operator delete(__p);
}

void std::__empty_state<char>::__exec(const std::__empty_state<char> *this, std::__empty_state<char>::__state *a2)
{
  a2->__do_ = -994;
  a2->__node_ = this->__first_;
}

void std::__owns_one_state<char>::~__owns_one_state(std::__owns_one_state<char> *this)
{
  first = this->__first_;
  if (first) {
    ((void (*)(std::__node<char> *))first->~__node_0)(first);
  }
}

{
  std::__node<char> *first;
  uint64_t vars8;

  first = this->__first_;
  if (first) {
    ((void (*)(std::__node<char> *))first->~__node_0)(first);
  }

  operator delete(this);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_assertion<char const*>(uint64_t a1, char *a2, char *a3)
{
  if (a2 == a3) {
    return a2;
  }
  int v6 = *a2;
  if (v6 > 91)
  {
    if (v6 == 92)
    {
      if (a2 + 1 != a3)
      {
        int v14 = a2[1];
        if (v14 == 66)
        {
          uint64_t v15 = (char *)operator new(0x30uLL);
          uint64_t v23 = *(void *)(*(void *)(a1 + 56) + 8);
          *(void *)uint64_t v15 = &unk_1F20F4AF0;
          *((void *)v15 + 1) = v23;
          std::locale::locale((std::locale *)v15 + 2, (const std::locale *)a1);
          *(_OWORD *)(v15 + 24) = *(_OWORD *)(a1 + 8);
          v15[40] = 1;
        }
        else
        {
          if (v14 != 98) {
            return a2;
          }
          uint64_t v15 = (char *)operator new(0x30uLL);
          uint64_t v16 = *(void *)(*(void *)(a1 + 56) + 8);
          *(void *)uint64_t v15 = &unk_1F20F4AF0;
          *((void *)v15 + 1) = v16;
          std::locale::locale((std::locale *)v15 + 2, (const std::locale *)a1);
          *(_OWORD *)(v15 + 24) = *(_OWORD *)(a1 + 8);
          v15[40] = 0;
        }
        *(void *)(*(void *)(a1 + 56) + 8) = v15;
        *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
        return a2 + 2;
      }
      return a2;
    }
    if (v6 != 94) {
      return a2;
    }
    uint64_t v10 = operator new(0x18uLL);
    BOOL v11 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
    uint64_t v12 = *(void *)(a1 + 56);
    v10[1] = *(void *)(v12 + 8);
    uint64_t v13 = &unk_1F20F4A60;
LABEL_14:
    *uint64_t v10 = v13;
    *((unsigned char *)v10 + 16) = v11;
    *(void *)(v12 + 8) = v10;
    *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
    return a2 + 1;
  }
  if (v6 == 36)
  {
    uint64_t v10 = operator new(0x18uLL);
    BOOL v11 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
    uint64_t v12 = *(void *)(a1 + 56);
    v10[1] = *(void *)(v12 + 8);
    uint64_t v13 = &unk_1F20F4AA8;
    goto LABEL_14;
  }
  BOOL v8 = v6 == 40;
  BOOL v7 = a2 + 1;
  BOOL v8 = !v8 || v7 == a3;
  if (v8) {
    return a2;
  }
  BOOL v8 = *v7 == 63;
  uint64_t v17 = a2 + 2;
  if (!v8 || v17 == a3) {
    return a2;
  }
  int v19 = *v17;
  if (v19 == 33)
  {
    *(void *)&long long v24 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v24 + 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)&v26.__loop_count_ = v24;
    *(_OWORD *)&v26.__start_.__cntrl_ = v24;
    *(_OWORD *)&v26.__traits_.__loc_.__locale_ = v24;
    *(_OWORD *)&v26.__traits_.__col_ = v24;
    std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]((uint64_t)&v26);
    v26.__flags_ = *(_DWORD *)(a1 + 24);
    uint64_t v21 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse<char const*>(&v26, a2 + 3, a3);
    unsigned int marked_count = v26.__marked_count_;
    std::basic_regex<char,std::regex_traits<char>>::__push_lookahead((std::basic_regex<char> *)a1, &v26, 1, *(_DWORD *)(a1 + 28));
    *(_DWORD *)(a1 + 28) += marked_count;
    if (v21 == a3 || *v21 != 41) {
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
    }
    goto LABEL_32;
  }
  if (v19 != 61) {
    return a2;
  }
  *(void *)&long long v20 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v20 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&v26.__loop_count_ = v20;
  *(_OWORD *)&v26.__start_.__cntrl_ = v20;
  *(_OWORD *)&v26.__traits_.__loc_.__locale_ = v20;
  *(_OWORD *)&v26.__traits_.__col_ = v20;
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]((uint64_t)&v26);
  v26.__flags_ = *(_DWORD *)(a1 + 24);
  uint64_t v21 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse<char const*>(&v26, a2 + 3, a3);
  unsigned int v22 = v26.__marked_count_;
  std::basic_regex<char,std::regex_traits<char>>::__push_lookahead((std::basic_regex<char> *)a1, &v26, 0, *(_DWORD *)(a1 + 28));
  *(_DWORD *)(a1 + 28) += v22;
  if (v21 == a3 || *v21 != 41) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
  }
LABEL_32:
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&v26.__traits_.__loc_);
  return v21 + 1;
}

void sub_1C57F6498(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
}

void sub_1C57F64AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
}

void sub_1C57F64C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
}

void sub_1C57F64D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_atom<char const*>(std::basic_regex<char> *this, std::basic_regex<char> *a2, std::basic_regex<char> *a3)
{
  uint64_t v3 = a2;
  if (a2 != a3)
  {
    switch(LOBYTE(a2->__traits_.__loc_.__locale_))
    {
      case '(':
        if ((std::basic_regex<char> *)((char *)&a2->__traits_.__loc_.__locale_ + 1) == a3) {
          goto LABEL_32;
        }
        if ((std::basic_regex<char> *)((char *)&a2->__traits_.__loc_.__locale_ + 2) != a3
          && BYTE1(a2->__traits_.__loc_.__locale_) == 63
          && BYTE2(a2->__traits_.__loc_.__locale_) == 58)
        {
          p_open_count = &this->__open_count_;
          ++this->__open_count_;
          BOOL v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<char const*>(this, (char *)&a2->__traits_.__loc_.__locale_ + 3, (char *)a3);
          if (v7 == (char *)a3) {
            goto LABEL_32;
          }
          uint64_t v3 = (std::basic_regex<char> *)v7;
          if (*v7 != 41) {
            goto LABEL_32;
          }
        }
        else
        {
          if ((this->__flags_ & 2) != 0)
          {
            unsigned int marked_count = this->__marked_count_;
          }
          else
          {
            uint64_t v12 = (std::__node<char> *)operator new(0x18uLL);
            unsigned int marked_count = this->__marked_count_ + 1;
            this->__marked_count_ = marked_count;
            end = this->__end_;
            first = end->__first_;
            v12->__vftable = (std::__node<char>_vtbl *)&unk_1F20F4DC0;
            v12[1].__vftable = (std::__node<char>_vtbl *)first;
            LODWORD(v12[2].__vftable) = marked_count;
            end->__first_ = v12;
            this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
          }
          p_open_count = &this->__open_count_;
          ++this->__open_count_;
          uint64_t v16 = std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<char const*>(this, (char *)&v3->__traits_.__loc_.__locale_ + 1, (char *)a3);
          if (v16 == (char *)a3 || (uint64_t v3 = (std::basic_regex<char> *)v16, *v16 != 41)) {
LABEL_32:
          }
            std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
          if ((this->__flags_ & 2) == 0)
          {
            uint64_t v17 = (std::__node<char> *)operator new(0x18uLL);
            uint64_t v18 = this->__end_;
            int v19 = v18->__first_;
            v17->__vftable = (std::__node<char>_vtbl *)&unk_1F20F4E08;
            v17[1].__vftable = (std::__node<char>_vtbl *)v19;
            LODWORD(v17[2].__vftable) = marked_count;
            v18->__first_ = v17;
            this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
          }
        }
        --*p_open_count;
LABEL_29:
        uint64_t v3 = (std::basic_regex<char> *)((char *)v3 + 1);
        break;
      case ')':
      case ',':
      case '-':
      case '/':
      case '0':
      case '1':
      case '2':
      case '3':
      case '4':
      case '5':
      case '6':
      case '7':
      case '8':
      case '9':
      case ':':
      case ';':
      case '<':
      case '=':
      case '>':
      case '@':
      case 'A':
      case 'B':
      case 'C':
      case 'D':
      case 'E':
      case 'F':
      case 'G':
      case 'H':
      case 'I':
      case 'J':
      case 'K':
      case 'L':
      case 'M':
      case 'N':
      case 'O':
      case 'P':
      case 'Q':
      case 'R':
      case 'S':
      case 'T':
      case 'U':
      case 'V':
      case 'W':
      case 'X':
      case 'Y':
      case 'Z':
        goto LABEL_20;
      case '*':
      case '+':
      case '?':
        goto LABEL_31;
      case '.':
        BOOL v8 = (std::__node<char> *)operator new(0x10uLL);
        uint64_t v9 = this->__end_;
        uint64_t v10 = v9->__first_;
        v8->__vftable = (std::__node<char>_vtbl *)&unk_1F20F4B80;
        v8[1].__vftable = (std::__node<char>_vtbl *)v10;
        v9->__first_ = v8;
        this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
        goto LABEL_29;
      case '[':
        return (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>((uint64_t)this, (char *)a2, (char *)a3);
      case '\\':
        return std::basic_regex<char,std::regex_traits<char>>::__parse_atom_escape<char const*>(this, (unsigned __int8 *)a2, (unsigned __int8 *)a3);
      default:
        if (LOBYTE(a2->__traits_.__loc_.__locale_) == 123) {
LABEL_31:
        }
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)11>();
LABEL_20:
        return (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_pattern_character<char const*>(this, a2, a3);
    }
  }
  return (unsigned __int8 *)v3;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>(uint64_t a1, std::basic_regex<char> *this, std::basic_regex<char> *a3, std::__owns_one_state<char> *a4, size_t __mexp_begin, size_t __mexp_end)
{
  if (this == a3) {
    return this;
  }
  int v6 = *(_DWORD *)(a1 + 24) & 0x1F0;
  int locale_low = SLOBYTE(this->__traits_.__loc_.__locale_);
  if (locale_low <= 62)
  {
    if (locale_low == 42)
    {
      BOOL v8 = (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
      if (v6) {
        BOOL v20 = 1;
      }
      else {
        BOOL v20 = v8 == a3;
      }
      if (!v20 && LOBYTE(v8->__traits_.__loc_.__locale_) == 63)
      {
        uint64_t v9 = (char *)&this->__traits_.__loc_.__locale_ + 2;
        __mexp_begin = __mexp_begin;
        __mexp_end = __mexp_end;
        size_t v10 = 0;
        goto LABEL_35;
      }
      __mexp_begin = __mexp_begin;
      __mexp_end = __mexp_end;
      size_t v24 = 0;
      goto LABEL_44;
    }
    if (locale_low == 43)
    {
      BOOL v8 = (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
      if (!v6 && v8 != a3 && LOBYTE(v8->__traits_.__loc_.__locale_) == 63)
      {
        uint64_t v9 = (char *)&this->__traits_.__loc_.__locale_ + 2;
        __mexp_begin = __mexp_begin;
        __mexp_end = __mexp_end;
        size_t v10 = 1;
LABEL_35:
        std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v10, 0xFFFFFFFFFFFFFFFFLL, a4, __mexp_begin, __mexp_end, 0);
        return (std::basic_regex<char> *)v9;
      }
      __mexp_begin = __mexp_begin;
      __mexp_end = __mexp_end;
      size_t v24 = 1;
      goto LABEL_44;
    }
    return this;
  }
  if (locale_low == 63)
  {
    uint64_t v21 = (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
    if (v6) {
      BOOL v22 = 1;
    }
    else {
      BOOL v22 = v21 == a3;
    }
    if (v22 || LOBYTE(v21->__traits_.__loc_.__locale_) != 63)
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, 0, 1uLL, a4, __mexp_begin, __mexp_end, 1);
      return v21;
    }
    else
    {
      uint64_t v23 = (char *)&this->__traits_.__loc_.__locale_ + 2;
      std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, 0, 1uLL, a4, __mexp_begin, __mexp_end, 0);
      return (std::basic_regex<char> *)v23;
    }
  }
  else
  {
    if (locale_low != 123) {
      return this;
    }
    BOOL v11 = (char *)&this->__traits_.__loc_.__locale_ + 1;
    if ((std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1) == a3) {
      goto LABEL_71;
    }
    int v12 = *v11;
    if ((v12 & 0xF8) != 0x30 && (v12 & 0xFE) != 0x38) {
      goto LABEL_71;
    }
    int v13 = v12 - 48;
    int v14 = (char *)&this->__traits_.__loc_.__locale_ + 2;
    if ((std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 2) == a3)
    {
LABEL_19:
      int v14 = (char *)a3;
    }
    else
    {
      while (1)
      {
        int v15 = *v14;
        if ((v15 & 0xF8) != 0x30 && (v15 & 0xFE) != 0x38) {
          break;
        }
        if (v13 >= 214748364) {
          goto LABEL_71;
        }
        int v13 = v15 + 10 * v13 - 48;
        if (++v14 == (char *)a3) {
          goto LABEL_19;
        }
      }
    }
    if (v14 == v11) {
      goto LABEL_71;
    }
    if (v14 == (char *)a3) {
      goto LABEL_72;
    }
    int v16 = *v14;
    if (v16 != 44)
    {
      if (v16 == 125)
      {
        uint64_t v17 = (std::basic_regex<char> *)(v14 + 1);
        if (v6 || v17 == a3 || LOBYTE(v17->__traits_.__loc_.__locale_) != 63)
        {
          std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v13, v13, a4, __mexp_begin, __mexp_end, 1);
          return v17;
        }
        else
        {
          uint64_t v18 = (unsigned __int8 *)(v14 + 2);
          std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v13, v13, a4, __mexp_begin, __mexp_end, 0);
          return (std::basic_regex<char> *)v18;
        }
      }
LABEL_71:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>();
    }
    unint64_t v25 = (std::basic_regex<char> *)(v14 + 1);
    if (v14 + 1 == (char *)a3) {
      goto LABEL_71;
    }
    int v26 = LOBYTE(v25->__traits_.__loc_.__locale_);
    if (v26 == 125)
    {
      BOOL v8 = (std::basic_regex<char> *)(v14 + 2);
      if (!v6 && v8 != a3 && LOBYTE(v8->__traits_.__loc_.__locale_) == 63)
      {
        size_t v10 = v13;
        uint64_t v9 = v14 + 3;
        __mexp_begin = __mexp_begin;
        __mexp_end = __mexp_end;
        goto LABEL_35;
      }
      size_t v24 = v13;
      __mexp_begin = __mexp_begin;
      __mexp_end = __mexp_end;
LABEL_44:
      std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v24, 0xFFFFFFFFFFFFFFFFLL, a4, __mexp_begin, __mexp_end, 1);
      return v8;
    }
    if ((v26 & 0xF8) != 0x30 && (v26 & 0xFE) != 0x38) {
      goto LABEL_72;
    }
    int v27 = v26 - 48;
    unint64_t v28 = (std::basic_regex<char> *)(v14 + 2);
    if (v28 == a3)
    {
LABEL_60:
      unint64_t v28 = a3;
    }
    else
    {
      while (1)
      {
        int v29 = LOBYTE(v28->__traits_.__loc_.__locale_);
        if ((v29 & 0xF8) != 0x30 && (v29 & 0xFE) != 0x38) {
          break;
        }
        if (v27 >= 214748364) {
          goto LABEL_71;
        }
        int v27 = v29 + 10 * v27 - 48;
        unint64_t v28 = (std::basic_regex<char> *)((char *)v28 + 1);
        if (v28 == a3) {
          goto LABEL_60;
        }
      }
    }
    if (v28 == v25 || v28 == a3 || LOBYTE(v28->__traits_.__loc_.__locale_) != 125) {
LABEL_72:
    }
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>();
    if (v27 < v13) {
      goto LABEL_71;
    }
    uint64_t v30 = (std::basic_regex<char> *)((char *)&v28->__traits_.__loc_.__locale_ + 1);
    if (v6 || v30 == a3 || LOBYTE(v30->__traits_.__loc_.__locale_) != 63)
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v13, v27, a4, __mexp_begin, __mexp_end, 1);
      return v30;
    }
    else
    {
      uint64_t v31 = (char *)&v28->__traits_.__loc_.__locale_ + 2;
      std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v13, v27, a4, __mexp_begin, __mexp_end, 0);
      return (std::basic_regex<char> *)v31;
    }
  }
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = (const std::locale *)MEMORY[0x1C8791F60]();
  *(void *)(a1 + 8) = std::locale::use_facet(v2, MEMORY[0x1E4FBA258]);
  *(void *)(a1 + 16) = std::locale::use_facet((const std::locale *)a1, MEMORY[0x1E4FBA280]);
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(void *)(a1 + 56) = 0;
  return a1;
}

void sub_1C57F6CBC(_Unwind_Exception *a1)
{
  std::locale::~locale(v1);
  _Unwind_Resume(a1);
}

void std::basic_regex<char,std::regex_traits<char>>::__push_lookahead(std::basic_regex<char> *this, const std::basic_regex<char> *a2, BOOL a3, unsigned int a4)
{
  BOOL v8 = (char *)operator new(0x58uLL);
  first = this->__end_->__first_;
  *(void *)BOOL v8 = &unk_1F20F4B38;
  *((void *)v8 + 1) = first;
  std::locale::locale((std::locale *)v8 + 2, &a2->__traits_.__loc_);
  *(_OWORD *)(v8 + 24) = *(_OWORD *)&a2->__traits_.__ct_;
  *(_OWORD *)(v8 + 40) = *(_OWORD *)&a2->__flags_;
  cntrl = a2->__start_.__cntrl_;
  *((void *)v8 + 7) = a2->__start_.__ptr_;
  *((void *)v8 + 8) = cntrl;
  if (cntrl) {
    atomic_fetch_add_explicit(&cntrl->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *((void *)v8 + 9) = a2->__end_;
  *((_DWORD *)v8 + 20) = a4;
  v8[84] = a3;
  this->__end_->__first_ = (std::__node<char> *)v8;
  this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1C8791C90](exception, 6);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_1C57F6DD4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void (__cdecl ***std::__l_anchor_multiline<char>::~__l_anchor_multiline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  uint64_t v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

void std::__l_anchor_multiline<char>::~__l_anchor_multiline(void (__cdecl ***__p)(std::__owns_one_state<char> *__hidden this))
{
  uint64_t v2 = __p[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }

  operator delete(__p);
}

uint64_t std::__l_anchor_multiline<char>::__exec(uint64_t result, uint64_t a2)
{
  if (!*(unsigned char *)(a2 + 92))
  {
    if (!*(unsigned char *)(result + 16)) {
      goto LABEL_12;
    }
    int v2 = *(unsigned __int8 *)(*(void *)(a2 + 16) - 1);
    if (v2 != 13 && v2 != 10) {
      goto LABEL_12;
    }
LABEL_11:
    *(_DWORD *)a2 = -994;
    *(void *)(a2 + 80) = *(void *)(result + 8);
    return result;
  }
  if (*(void *)(a2 + 16) == *(void *)(a2 + 8) && (*(unsigned char *)(a2 + 88) & 1) == 0) {
    goto LABEL_11;
  }
LABEL_12:
  *(_DWORD *)a2 = -993;
  *(void *)(a2 + 80) = 0;
  return result;
}

void (__cdecl ***std::__r_anchor_multiline<char>::~__r_anchor_multiline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  int v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

void std::__r_anchor_multiline<char>::~__r_anchor_multiline(void (__cdecl ***__p)(std::__owns_one_state<char> *__hidden this))
{
  int v2 = __p[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }

  operator delete(__p);
}

uint64_t std::__r_anchor_multiline<char>::__exec(uint64_t result, uint64_t a2)
{
  int v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) && (*(unsigned char *)(a2 + 88) & 2) == 0
    || *(unsigned char *)(result + 16) && ((v3 = *v2, v3 != 13) ? (BOOL v4 = v3 == 10) : (BOOL v4 = 1), v4))
  {
    *(_DWORD *)a2 = -994;
    *(void *)(a2 + 80) = *(void *)(result + 8);
  }
  else
  {
    *(_DWORD *)a2 = -993;
    *(void *)(a2 + 80) = 0;
  }
  return result;
}

std::locale *std::__word_boundary<char,std::regex_traits<char>>::~__word_boundary(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_1F20F4AF0;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  return a1;
}

void std::__word_boundary<char,std::regex_traits<char>>::~__word_boundary(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_1F20F4AF0;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }

  operator delete(a1);
}

uint64_t std::__word_boundary<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  int v2 = *(unsigned __int8 **)(a2 + 8);
  int v3 = *(unsigned __int8 **)(a2 + 24);
  if (v2 == v3) {
    goto LABEL_19;
  }
  BOOL v4 = *(unsigned __int8 **)(a2 + 16);
  if (v4 != v3)
  {
    if (v4 == v2)
    {
      int v5 = *(_DWORD *)(a2 + 88);
      if ((v5 & 0x80) == 0)
      {
        if ((v5 & 4) == 0)
        {
          uint64_t v6 = *v2;
          if (v6 == 95) {
            goto LABEL_17;
          }
          goto LABEL_15;
        }
        goto LABEL_19;
      }
    }
    uint64_t v7 = *(v4 - 1);
    uint64_t v8 = *v4;
    if (v7 == 95
      || (v7 & 0x80) == 0 && (*(_DWORD *)(*(void *)(*(void *)(result + 24) + 16) + 4 * v7) & 0x500) != 0)
    {
      int v9 = 1;
      if (v8 == 95) {
        goto LABEL_24;
      }
    }
    else
    {
      int v9 = 0;
      if (v8 == 95) {
        goto LABEL_24;
      }
    }
    if ((v8 & 0x80) != 0 || (*(_DWORD *)(*(void *)(*(void *)(result + 24) + 16) + 4 * v8) & 0x500) == 0)
    {
      if (*(unsigned char *)(result + 40) == (v9 != 0)) {
        goto LABEL_20;
      }
      goto LABEL_27;
    }
LABEL_24:
    if (*(unsigned char *)(result + 40) != (v9 != 1)) {
      goto LABEL_27;
    }
    goto LABEL_20;
  }
  if ((*(unsigned char *)(a2 + 88) & 8) == 0)
  {
    uint64_t v6 = *(v3 - 1);
    if (v6 == 95) {
      goto LABEL_17;
    }
LABEL_15:
    if ((v6 & 0x80) == 0 && (*(_DWORD *)(*(void *)(*(void *)(result + 24) + 16) + 4 * v6) & 0x500) != 0)
    {
LABEL_17:
      if (*(unsigned char *)(result + 40) != 1) {
        goto LABEL_27;
      }
LABEL_20:
      *(_DWORD *)a2 = -993;
      *(void *)(a2 + 80) = 0;
      return result;
    }
  }
LABEL_19:
  if (!*(unsigned char *)(result + 40)) {
    goto LABEL_20;
  }
LABEL_27:
  uint64_t v10 = *(void *)(result + 8);
  *(_DWORD *)a2 = -994;
  *(void *)(a2 + 80) = v10;
  return result;
}

std::locale *std::__lookahead<char,std::regex_traits<char>>::~__lookahead(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_1F20F4B38;
  int v2 = a1 + 2;
  locale = (std::__shared_weak_count *)a1[8].__locale_;
  if (locale && !atomic_fetch_add(&locale->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))locale->__on_zero_shared)(locale);
    std::__shared_weak_count::__release_weak(locale);
    std::locale::~locale(v2);
    BOOL v4 = a1[1].__locale_;
    if (!v4) {
      return a1;
    }
    goto LABEL_4;
  }
  std::locale::~locale(a1 + 2);
  BOOL v4 = a1[1].__locale_;
  if (v4) {
LABEL_4:
  }
    (*(void (**)(std::locale::__imp *))(*(void *)v4 + 8))(v4);
  return a1;
}

void std::__lookahead<char,std::regex_traits<char>>::~__lookahead(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_1F20F4B38;
  int v2 = a1 + 2;
  locale = (std::__shared_weak_count *)a1[8].__locale_;
  if (!locale || atomic_fetch_add(&locale->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    std::locale::~locale(a1 + 2);
    BOOL v4 = a1[1].__locale_;
    if (!v4) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  ((void (*)(std::__shared_weak_count *))locale->__on_zero_shared)(locale);
  std::__shared_weak_count::__release_weak(locale);
  std::locale::~locale(v2);
  BOOL v4 = a1[1].__locale_;
  if (v4) {
LABEL_4:
  }
    (*(void (**)(std::locale::__imp *))(*(void *)v4 + 8))(v4);
LABEL_5:

  operator delete(a1);
}

void std::__lookahead<char,std::regex_traits<char>>::__exec(uint64_t a1, uint64_t a2)
{
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v20 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v22 = 0xAAAAAAAAAAAAAA00;
  long long v24 = v4;
  uint64_t v21 = 0;
  long long v23 = 0uLL;
  LOBYTE(v24) = 0;
  BYTE8(v24) = 0;
  uint64_t v25 = 0;
  memset(&__p, 0, sizeof(__p));
  std::vector<std::csub_match>::size_type v5 = (*(_DWORD *)(a1 + 44) + 1);
  uint64_t v6 = *(void *)(a2 + 16);
  *(void *)&long long v19 = *(void *)(a2 + 24);
  *((void *)&v19 + 1) = v19;
  LOBYTE(v20) = 0;
  std::vector<std::sub_match<char const*>>::assign(&__p, v5, (std::vector<std::csub_match>::const_reference)&v19);
  *((void *)&v20 + 1) = v6;
  uint64_t v21 = v6;
  LOBYTE(v22) = 0;
  long long v23 = v19;
  LOBYTE(v24) = v20;
  uint64_t v25 = v6;
  BYTE8(v24) = 1;
  uint64_t v7 = *(const char **)(a2 + 16);
  if (*(unsigned char *)(a2 + 92)) {
    BOOL v8 = v7 == *(const char **)(a2 + 8);
  }
  else {
    BOOL v8 = 0;
  }
  char v9 = v8;
  if (*(unsigned __int8 *)(a1 + 84) == std::basic_regex<char,std::regex_traits<char>>::__match_at_start_ecma<std::allocator<std::sub_match<char const*>>>(a1 + 16, v7, *(const char **)(a2 + 24), (uint64_t *)&__p, *(_DWORD *)(a2 + 88) & 0xFBF | 0x40u, v9))
  {
    *(_DWORD *)a2 = -993;
    *(void *)(a2 + 80) = 0;
    begin = __p.__begin_;
    goto LABEL_13;
  }
  *(_DWORD *)a2 = -994;
  *(void *)(a2 + 80) = *(void *)(a1 + 8);
  begin = __p.__begin_;
  unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * (((char *)__p.__end_ - (char *)__p.__begin_) >> 3);
  if (v11 < 2)
  {
LABEL_13:
    if (!begin) {
      return;
    }
    goto LABEL_14;
  }
  int v12 = 0;
  int v13 = *(_DWORD *)(a1 + 80);
  uint64_t v14 = *(void *)(a2 + 32);
  unint64_t v15 = 1;
  do
  {
    int v16 = &begin[v15];
    uint64_t v17 = v14 + 24 * (v13 + v12);
    *(std::pair<const char *, const char *> *)uint64_t v17 = v16->std::pair<const char *, const char *>;
    *(unsigned char *)(v17 + 16) = v16->matched;
    unint64_t v15 = (v12 + 2);
    ++v12;
  }
  while (v11 > v15);
LABEL_14:
  __p.__end_ = begin;
  operator delete(begin);
}

void sub_1C57F769C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__match_at_start_ecma<std::allocator<std::sub_match<char const*>>>(uint64_t a1, const char *a2, const char *a3, uint64_t *a4, int a5, char a6)
{
  uint64_t v48 = 0;
  xpc_object_t v49 = 0;
  unint64_t v50 = 0;
  uint64_t v6 = *(void *)(a1 + 40);
  if (!v6) {
    return 0;
  }
  __x.second = a3;
  *(void *)&__x.matched = 0xAAAAAAAAAAAAAA00;
  __x.first = a3;
  *(_DWORD *)long long v46 = 0;
  memset(&v46[8], 0, 85);
  xpc_object_t v49 = std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>((void **)&v48, (uint64_t)v46);
  if (*(void *)&v46[56])
  {
    *(void *)&v46[64] = *(void *)&v46[56];
    operator delete(*(void **)&v46[56]);
  }
  if (*(void *)&v46[32])
  {
    *(void *)&v46[40] = *(void *)&v46[32];
    operator delete(*(void **)&v46[32]);
  }
  int v13 = v49;
  *((_DWORD *)v49 - 24) = 0;
  *((void *)v13 - 11) = a2;
  *((void *)v13 - 10) = a2;
  *((void *)v13 - 9) = a3;
  uint64_t v14 = *((void *)v13 - 8);
  unint64_t v15 = *(unsigned int *)(a1 + 28);
  unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((*((void *)v13 - 7) - v14) >> 3);
  if (v15 <= v16)
  {
    if (v15 < v16) {
      *((void *)v13 - 7) = v14 + 24 * v15;
    }
  }
  else
  {
    std::vector<std::sub_match<char const*>>::__append((std::vector<std::csub_match> *)(v13 - 64), v15 - v16, &__x);
    int v13 = v49;
  }
  uint64_t v18 = *((void *)v13 - 5);
  unint64_t v19 = *(unsigned int *)(a1 + 32);
  unint64_t v20 = (*((void *)v13 - 4) - v18) >> 4;
  if (v19 <= v20)
  {
    if (v19 < v20) {
      *((void *)v13 - 4) = v18 + 16 * v19;
    }
  }
  else
  {
    std::vector<std::pair<unsigned long,char const*>>::__append((std::vector<std::pair<unsigned long, const char *>> *)(v13 - 40), v19 - v20);
    int v13 = v49;
  }
  *((void *)v13 - 2) = v6;
  *((_DWORD *)v13 - 2) = a5;
  *(v13 - 4) = a6;
  unsigned int v21 = 1;
  while (2)
  {
    if ((v21 & 0xFFF) == 0 && (int)(v21 >> 12) >= (int)a3 - (int)a2) {
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)12>();
    }
    uint64_t v23 = *((void *)v13 - 2);
    if (v23) {
      (*(void (**)(uint64_t, char *))(*(void *)v23 + 16))(v23, v13 - 96);
    }
    switch(*((_DWORD *)v13 - 24))
    {
      case 0xFFFFFC18:
        long long v24 = (const char *)*((void *)v13 - 10);
        if ((a5 & 0x20) != 0 && v24 == a2 || (a5 & 0x1000) != 0 && v24 != a3) {
          goto LABEL_27;
        }
        uint64_t v37 = *a4;
        *(void *)uint64_t v37 = a2;
        *(void *)(v37 + 8) = v24;
        *(unsigned char *)(v37 + 16) = 1;
        uint64_t v38 = *((void *)v13 - 8);
        uint64_t v39 = *((void *)v13 - 7) - v38;
        if (v39)
        {
          unint64_t v40 = 0xAAAAAAAAAAAAAAABLL * (v39 >> 3);
          xpc_object_t v41 = (unsigned char *)(v38 + 16);
          unsigned int v42 = 1;
          do
          {
            uint64_t v43 = v37 + 24 * v42;
            *(_OWORD *)uint64_t v43 = *((_OWORD *)v41 - 1);
            char v44 = *v41;
            v41 += 24;
            *(unsigned char *)(v43 + 16) = v44;
          }
          while (v40 > v42++);
        }
        uint64_t v17 = 1;
        unint64_t v22 = v48;
        if (!v48) {
          return v17;
        }
        goto LABEL_38;
      case 0xFFFFFC1D:
      case 0xFFFFFC1E:
      case 0xFFFFFC21:
        goto LABEL_17;
      case 0xFFFFFC1F:
LABEL_27:
        uint64_t v25 = v49;
        int v26 = (void *)*((void *)v49 - 5);
        if (v26)
        {
          *((void *)v49 - 4) = v26;
          operator delete(v26);
        }
        int v27 = (void *)*((void *)v25 - 8);
        if (v27)
        {
          *((void *)v25 - 7) = v27;
          operator delete(v27);
        }
        xpc_object_t v49 = v25 - 96;
        goto LABEL_17;
      case 0xFFFFFC20:
        *(void *)&long long v28 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v28 + 1) = 0xAAAAAAAAAAAAAAAALL;
        *(_OWORD *)&v46[64] = v28;
        *(_OWORD *)&v46[80] = v28;
        *(_OWORD *)&v46[32] = v28;
        *(_OWORD *)&v46[48] = v28;
        *(_OWORD *)long long v46 = v28;
        *(_OWORD *)&v46[16] = v28;
        std::__state<char>::__state((uint64_t)v46, (long long *)v13 - 6);
        (*(void (**)(void, uint64_t, char *))(**((void **)v13 - 2) + 24))(*((void *)v13 - 2), 1, v13 - 96);
        (*(void (**)(void, void, unsigned char *))(**(void **)&v46[80] + 24))(*(void *)&v46[80], 0, v46);
        int v29 = v49;
        if ((unint64_t)v49 >= v50)
        {
          xpc_object_t v49 = std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>((void **)&v48, (uint64_t)v46);
          if (*(void *)&v46[56])
          {
            *(void *)&v46[64] = *(void *)&v46[56];
            operator delete(*(void **)&v46[56]);
          }
        }
        else
        {
          long long v30 = *(_OWORD *)&v46[16];
          *(_OWORD *)xpc_object_t v49 = *(_OWORD *)v46;
          *((_OWORD *)v29 + 1) = v30;
          *((void *)v29 + 4) = 0;
          *((void *)v29 + 5) = 0;
          *((void *)v29 + 6) = 0;
          *((void *)v29 + 7) = 0;
          *((_OWORD *)v29 + 2) = *(_OWORD *)&v46[32];
          *((void *)v29 + 6) = *(void *)&v46[48];
          memset(&v46[32], 0, 24);
          *((void *)v29 + 8) = 0;
          *((void *)v29 + 9) = 0;
          *(_OWORD *)(v29 + 56) = *(_OWORD *)&v46[56];
          *((void *)v29 + 9) = *(void *)&v46[72];
          memset(&v46[56], 0, 24);
          uint64_t v31 = *(void *)&v46[80];
          *(void *)(v29 + 85) = *(void *)&v46[85];
          *((void *)v29 + 10) = v31;
          xpc_object_t v49 = v29 + 96;
        }
        if (*(void *)&v46[32])
        {
          *(void *)&v46[40] = *(void *)&v46[32];
          operator delete(*(void **)&v46[32]);
        }
LABEL_17:
        unint64_t v22 = v48;
        int v13 = v49;
        ++v21;
        if (v48 != v49) {
          continue;
        }
        uint64_t v17 = 0;
        if (v48)
        {
LABEL_38:
          uint64_t v32 = v49;
          uint64_t v33 = v22;
          if (v49 != v22)
          {
            do
            {
              uint64_t v34 = (void *)*((void *)v32 - 5);
              if (v34)
              {
                *((void *)v32 - 4) = v34;
                operator delete(v34);
              }
              xpc_object_t v35 = (void *)*((void *)v32 - 8);
              if (v35)
              {
                *((void *)v32 - 7) = v35;
                operator delete(v35);
              }
              v32 -= 96;
            }
            while (v32 != v22);
            uint64_t v33 = v48;
          }
          xpc_object_t v49 = v22;
          operator delete(v33);
        }
        break;
      default:
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)16>();
    }
    return v17;
  }
}

void sub_1C57F7B1C(_Unwind_Exception *a1)
{
  std::vector<std::__state<char>>::~vector[abi:ne180100]((void **)(v1 - 112));
  _Unwind_Resume(a1);
}

void sub_1C57F7B30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::__state<char>::~__state((uint64_t *)va);
  std::vector<std::__state<char>>::~vector[abi:ne180100]((void **)(v3 - 112));
  _Unwind_Resume(a1);
}

void sub_1C57F7B78(_Unwind_Exception *a1)
{
  std::vector<std::__state<char>>::~vector[abi:ne180100]((void **)(v1 - 112));
  _Unwind_Resume(a1);
}

void sub_1C57F7B8C(_Unwind_Exception *a1)
{
  std::vector<std::__state<char>>::~vector[abi:ne180100]((void **)(v1 - 112));
  _Unwind_Resume(a1);
}

void std::vector<std::sub_match<char const*>>::assign(std::vector<std::csub_match> *this, std::vector<std::csub_match>::size_type __n, std::vector<std::csub_match>::const_reference __u)
{
  xpc_object_t value = this->__end_cap_.__value_;
  begin = this->__begin_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)begin) >> 3) < __n)
  {
    if (begin)
    {
      this->__end_ = begin;
      operator delete(begin);
      xpc_object_t value = 0;
      this->__begin_ = 0;
      this->__end_ = 0;
      this->__end_cap_.__value_ = 0;
    }
    if (__n > 0xAAAAAAAAAAAAAAALL) {
      goto LABEL_26;
    }
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)value >> 3);
    std::vector<std::csub_match>::size_type v9 = 2 * v8;
    if (2 * v8 <= __n) {
      std::vector<std::csub_match>::size_type v9 = __n;
    }
    unint64_t v10 = v8 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v9;
    if (v10 > 0xAAAAAAAAAAAAAAALL) {
LABEL_26:
    }
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    uint64_t v11 = v10;
    int v12 = (std::sub_match<const char *> *)operator new(24 * v10);
    this->__begin_ = v12;
    this->__end_ = v12;
    this->__end_cap_.__value_ = &v12[v11];
    std::vector<std::csub_match>::size_type v13 = 24 * __n;
    uint64_t v14 = &v12[__n];
    do
    {
      v12->std::pair<const char *, const char *> = __u->std::pair<const char *, const char *>;
      *(void *)&v12->matched = *(void *)&__u->matched;
      ++v12;
      v13 -= 24;
    }
    while (v13);
    goto LABEL_25;
  }
  std::vector<std::csub_match>::pointer end = this->__end_;
  unint64_t v16 = end - begin;
  if (v16 >= __n) {
    std::vector<std::csub_match>::size_type v17 = __n;
  }
  else {
    std::vector<std::csub_match>::size_type v17 = end - begin;
  }
  if (v17)
  {
    uint64_t v18 = begin;
    do
    {
      *v18++ = *__u;
      --v17;
    }
    while (v17);
  }
  if (__n <= v16)
  {
    uint64_t v14 = &begin[__n];
LABEL_25:
    this->__end_ = v14;
    return;
  }
  unint64_t v19 = &end[__n - v16];
  std::vector<std::csub_match>::size_type v20 = 24 * __n - 24 * v16;
  do
  {
    std::pair<const char *, const char *> v21 = __u->std::pair<const char *, const char *>;
    *(void *)&end->matched = *(void *)&__u->matched;
    end->std::pair<const char *, const char *> = v21;
    ++end;
    v20 -= 24;
  }
  while (v20);
  this->__end_ = v19;
}

void *std::__state<char>::~__state(void *a1)
{
  int v2 = (void *)a1[7];
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[4];
  if (v3)
  {
    a1[5] = v3;
    operator delete(v3);
  }
  return a1;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)12>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1C8791C90](exception, 12);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_1C57F7DEC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)16>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1C8791C90](exception, 16);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_1C57F7E44(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void **std::vector<std::__state<char>>::~vector[abi:ne180100](void **a1)
{
  int v2 = (char *)*a1;
  if (*a1)
  {
    uint64_t v3 = (char *)a1[1];
    long long v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        std::vector<std::csub_match>::size_type v5 = (void *)*((void *)v3 - 5);
        if (v5)
        {
          *((void *)v3 - 4) = v5;
          operator delete(v5);
        }
        uint64_t v6 = (void *)*((void *)v3 - 8);
        if (v6)
        {
          *((void *)v3 - 7) = v6;
          operator delete(v6);
        }
        v3 -= 96;
      }
      while (v3 != v2);
      long long v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

char *std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>(void **a1, uint64_t a2)
{
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[1] - (unsigned char *)*a1) >> 5);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x2AAAAAAAAAAAAAALL) {
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  }
  if (0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 5) > v4) {
    unint64_t v4 = 0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 5);
  }
  if (0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 5) >= 0x155555555555555) {
    unint64_t v6 = 0x2AAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0x2AAAAAAAAAAAAAALL) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    uint64_t v7 = (char *)operator new(96 * v6);
  }
  else
  {
    uint64_t v7 = 0;
  }
  long long v8 = *(_OWORD *)(a2 + 16);
  std::vector<std::csub_match>::size_type v9 = &v7[96 * v3];
  *(_OWORD *)std::vector<std::csub_match>::size_type v9 = *(_OWORD *)a2;
  *((_OWORD *)v9 + 1) = v8;
  unint64_t v10 = &v7[96 * v6];
  *((_OWORD *)v9 + 2) = *(_OWORD *)(a2 + 32);
  *((void *)v9 + 6) = *(void *)(a2 + 48);
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  *(void *)(v9 + 85) = *(void *)(a2 + 85);
  uint64_t v11 = *(void *)(a2 + 72);
  uint64_t v12 = *(void *)(a2 + 80);
  *((void *)v9 + 9) = 0;
  *((void *)v9 + 10) = v12;
  *(_OWORD *)(v9 + 56) = *(_OWORD *)(a2 + 56);
  *((void *)v9 + 9) = v11;
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  std::vector<std::csub_match>::size_type v13 = v9 + 96;
  uint64_t v14 = (char *)*a1;
  unint64_t v15 = (char *)a1[1];
  if (v15 == *a1)
  {
    *a1 = v9;
    a1[1] = v13;
    a1[2] = v10;
  }
  else
  {
    uint64_t v16 = 0;
    do
    {
      std::vector<std::csub_match>::size_type v17 = &v9[v16];
      uint64_t v18 = &v15[v16];
      long long v19 = *(_OWORD *)&v15[v16 - 80];
      *((_OWORD *)v17 - 6) = *(_OWORD *)&v15[v16 - 96];
      *((_OWORD *)v17 - 5) = v19;
      *((void *)v17 - 7) = 0;
      *((void *)v17 - 6) = 0;
      *((_OWORD *)v17 - 4) = *(_OWORD *)&v15[v16 - 64];
      *((void *)v17 - 6) = *(void *)&v15[v16 - 48];
      *((void *)v18 - 8) = 0;
      *((void *)v18 - 7) = 0;
      *((void *)v18 - 6) = 0;
      *((void *)v17 - 4) = 0;
      *((void *)v17 - 3) = 0;
      *(_OWORD *)(v17 - 40) = *(_OWORD *)&v15[v16 - 40];
      *((void *)v17 - 3) = *(void *)&v15[v16 - 24];
      *((void *)v18 - 5) = 0;
      *((void *)v18 - 4) = 0;
      *((void *)v18 - 3) = 0;
      uint64_t v20 = *(void *)&v15[v16 - 16];
      *(void *)(v17 - 11) = *(void *)&v15[v16 - 11];
      *((void *)v17 - 2) = v20;
      v16 -= 96;
    }
    while (&v15[v16] != v14);
    unint64_t v15 = (char *)*a1;
    std::pair<const char *, const char *> v21 = (char *)a1[1];
    *a1 = &v9[v16];
    a1[1] = v13;
    a1[2] = v10;
    while (v21 != v15)
    {
      unint64_t v22 = (void *)*((void *)v21 - 5);
      if (v22)
      {
        *((void *)v21 - 4) = v22;
        operator delete(v22);
      }
      uint64_t v23 = (void *)*((void *)v21 - 8);
      if (v23)
      {
        *((void *)v21 - 7) = v23;
        operator delete(v23);
      }
      v21 -= 96;
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v13;
}

void std::vector<std::sub_match<char const*>>::__append(std::vector<std::csub_match> *this, std::vector<std::csub_match>::size_type __n, std::vector<std::csub_match>::const_reference __x)
{
  std::vector<std::csub_match>::pointer end = this->__end_;
  xpc_object_t value = this->__end_cap_.__value_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)end) >> 3) >= __n)
  {
    if (__n)
    {
      std::vector<std::csub_match>::size_type v13 = &end[__n];
      std::vector<std::csub_match>::size_type v14 = 24 * __n;
      do
      {
        std::pair<const char *, const char *> v15 = __x->std::pair<const char *, const char *>;
        *(void *)&end->matched = *(void *)&__x->matched;
        end->std::pair<const char *, const char *> = v15;
        ++end;
        v14 -= 24;
      }
      while (v14);
      std::vector<std::csub_match>::pointer end = v13;
    }
    this->__end_ = end;
  }
  else
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)this->__begin_) >> 3);
    unint64_t v9 = v8 + __n;
    if (v8 + __n > 0xAAAAAAAAAAAAAAALL) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)this->__begin_) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11)
    {
      if (v11 > 0xAAAAAAAAAAAAAAALL) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v12 = (char *)operator new(24 * v11);
    }
    else
    {
      uint64_t v12 = 0;
    }
    uint64_t v16 = (std::sub_match<const char *> *)&v12[24 * v8];
    std::vector<std::csub_match>::size_type v17 = 24 * __n;
    uint64_t v18 = &v16[__n];
    long long v19 = v16;
    do
    {
      std::pair<const char *, const char *> v20 = __x->std::pair<const char *, const char *>;
      v19[1].first = *(const char **)&__x->matched;
      std::pair<const char *, const char *> *v19 = v20;
      long long v19 = (std::pair<const char *, const char *> *)((char *)v19 + 24);
      v17 -= 24;
    }
    while (v17);
    std::vector<std::csub_match>::pointer begin = this->__begin_;
    if (end != this->__begin_)
    {
      do
      {
        std::pair<const char *, const char *> v22 = end[-1].std::pair<const char *, const char *>;
        *(void *)&v16[-1].matched = *(void *)&end[-1].matched;
        v16[-1].std::pair<const char *, const char *> = v22;
        --v16;
        --end;
      }
      while (end != begin);
      std::vector<std::csub_match>::pointer end = this->__begin_;
    }
    this->__begin_ = v16;
    this->__end_ = v18;
    this->__end_cap_.__value_ = (std::sub_match<const char *> *)&v12[24 * v11];
    if (end)
    {
      operator delete(end);
    }
  }
}

void std::vector<std::pair<unsigned long,char const*>>::__append(std::vector<std::pair<unsigned long, const char *>> *this, std::vector<std::pair<unsigned long, const char *>>::size_type __n)
{
  std::vector<std::csub_match>::pointer end = this->__end_;
  xpc_object_t value = this->__end_cap_.__value_;
  if (__n <= value - end)
  {
    if (__n)
    {
      std::vector<std::pair<unsigned long, const char *>>::size_type v12 = 16 * __n;
      bzero(this->__end_, 16 * __n);
      std::vector<std::csub_match>::pointer end = (std::pair<unsigned long, const char *> *)((char *)end + v12);
    }
    this->__end_ = end;
  }
  else
  {
    std::vector<std::pair<unsigned long, const char *>>::pointer begin = this->__begin_;
    uint64_t v7 = end - this->__begin_;
    unint64_t v8 = v7 + __n;
    if ((v7 + __n) >> 60) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v9 = (char *)value - (char *)begin;
    if (v9 >> 3 > v8) {
      unint64_t v8 = v9 >> 3;
    }
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v10 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v10 = v8;
    }
    if (v10)
    {
      if (v10 >> 60) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      unint64_t v11 = (char *)operator new(16 * v10);
    }
    else
    {
      unint64_t v11 = 0;
    }
    std::vector<std::csub_match>::size_type v13 = (std::pair<unsigned long, const char *> *)&v11[16 * v7];
    size_t v14 = __n;
    std::pair<const char *, const char *> v15 = (std::pair<unsigned long, const char *> *)&v11[16 * v10];
    bzero(v13, v14 * 16);
    uint64_t v16 = &v13[v14];
    if (end != begin)
    {
      do
      {
        v13[-1] = end[-1];
        --v13;
        --end;
      }
      while (end != begin);
      std::vector<std::csub_match>::pointer end = this->__begin_;
    }
    this->__begin_ = v13;
    this->__end_ = v16;
    this->__end_cap_.__value_ = v15;
    if (end)
    {
      operator delete(end);
    }
  }
}

uint64_t std::__state<char>::__state(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  long long v5 = a2[1];
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = v4;
  *(_OWORD *)(a1 + 16) = v5;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  uint64_t v7 = (unsigned char *)*((void *)a2 + 4);
  unint64_t v6 = (unsigned char *)*((void *)a2 + 5);
  int64_t v8 = v6 - v7;
  if (v6 != v7)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v8 >> 3) >= 0xAAAAAAAAAAAAAABLL) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v9 = (char *)operator new(v8);
    *(void *)(a1 + 32) = v9;
    *(void *)(a1 + 40) = v9;
    *(void *)(a1 + 48) = &v9[8 * (v8 >> 3)];
    size_t v10 = 24 * ((v8 - 24) / 0x18uLL) + 24;
    memcpy(v9, v7, v10);
    *(void *)(a1 + 40) = &v9[v10];
  }
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  std::vector<std::pair<unsigned long, const char *>>::size_type v12 = (unsigned char *)*((void *)a2 + 7);
  unint64_t v11 = (unsigned char *)*((void *)a2 + 8);
  uint64_t v13 = v11 - v12;
  if (v11 != v12)
  {
    if (v13 < 0) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    size_t v14 = (char *)operator new(v11 - v12);
    *(void *)(a1 + 56) = v14;
    *(void *)(a1 + 64) = v14;
    *(void *)(a1 + 72) = &v14[16 * (v13 >> 4)];
    memcpy(v14, v12, v13 & 0xFFFFFFFFFFFFFFF0);
    *(void *)(a1 + 64) = &v14[v13 & 0xFFFFFFFFFFFFFFF0];
  }
  uint64_t v15 = *((void *)a2 + 10);
  *(void *)(a1 + 85) = *(void *)((char *)a2 + 85);
  *(void *)(a1 + 80) = v15;
  return a1;
}

void sub_1C57F84E8(_Unwind_Exception *exception_object)
{
  long long v5 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 64) = v5;
    operator delete(v5);
  }
  unint64_t v6 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 40) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(exception_object);
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_atom_escape<char const*>(std::basic_regex<char> *this, unsigned __int8 *a2, unsigned __int8 *a3)
{
  if (a2 == a3 || *a2 != 92) {
    return a2;
  }
  long long v5 = a2 + 1;
  if (a2 + 1 == a3) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  }
  int v7 = *v5;
  unsigned int v8 = v7 - 48;
  if (v7 == 48)
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_char(this, v8);
    return a2 + 2;
  }
  if ((v7 - 49) > 8) {
    goto LABEL_18;
  }
  size_t v10 = a2 + 2;
  if (a2 + 2 == a3)
  {
    size_t v10 = a3;
  }
  else
  {
    while (1)
    {
      int v11 = *v10;
      if ((v11 - 48) > 9) {
        break;
      }
      if (v8 >= 0x19999999) {
        goto LABEL_23;
      }
      ++v10;
      unsigned int v8 = v11 + 10 * v8 - 48;
      if (v10 == a3)
      {
        size_t v10 = a3;
        break;
      }
    }
    if (!v8) {
LABEL_23:
    }
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
  }
  if (v8 > this->__marked_count_) {
    goto LABEL_23;
  }
  std::basic_regex<char,std::regex_traits<char>>::__push_back_ref(this, v8);
  if (v10 == v5)
  {
LABEL_18:
    size_t v10 = std::basic_regex<char,std::regex_traits<char>>::__parse_character_class_escape<char const*>((uint64_t)this, a2 + 1, a3);
    if (v10 == v5)
    {
      std::vector<std::pair<unsigned long, const char *>>::size_type v12 = std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<char const*>(this, a2 + 1, a3, 0);
      if (v12 == v5) {
        return a2;
      }
      else {
        return v12;
      }
    }
  }
  return v10;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>(uint64_t a1, char *a2, char *a3)
{
  if (a2 != a3 && *a2 == 91)
  {
    if (a2 + 1 == a3) {
      goto LABEL_20;
    }
    int v5 = a2[1];
    char v6 = v5 == 94;
    int v7 = v5 == 94 ? a2 + 2 : a2 + 1;
    unsigned int v8 = operator new(0xB0uLL);
    std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v8, a1, *(void *)(*(void *)(a1 + 56) + 8), v6, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
    *(void *)(*(void *)(a1 + 56) + 8) = v8;
    *(void *)(a1 + 56) = v8;
    if (v7 == a3) {
      goto LABEL_20;
    }
    if ((*(_WORD *)(a1 + 24) & 0x1F0) != 0 && *v7 == 93)
    {
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)v8, 93);
      ++v7;
    }
    if (v7 == a3) {
      goto LABEL_20;
    }
    do
    {
      uint64_t v9 = v7;
      int v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_expression_term<char const*>(a1, v7, a3, (uint64_t)v8);
    }
    while (v7 != v9);
    if (v9 == a3) {
      goto LABEL_20;
    }
    if (*v9 == 45)
    {
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)v8, 45);
      ++v9;
    }
    if (v9 == a3 || *v9 != 93) {
LABEL_20:
    }
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
    return v9 + 1;
  }
  return a2;
}

void sub_1C57F87D8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)11>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1C8791C90](exception, 11);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_1C57F8830(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_pattern_character<char const*>(std::basic_regex<char> *a1, std::basic_regex<char> *this, std::basic_regex<char> *a3)
{
  if (this == a3) {
    return this;
  }
  switch(LOBYTE(this->__traits_.__loc_.__locale_))
  {
    case '$':
    case '(':
    case ')':
    case '*':
    case '+':
    case '.':
    case '?':
    case '[':
    case '\\':
    case ']':
    case '^':
    case '{':
    case '|':
    case '}':
      return this;
    default:
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, (std::basic_regex<char>::value_type)this->__traits_.__loc_.__locale_);
      uint64_t result = (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
      break;
  }
  return result;
}

void (__cdecl ***std::__match_any_but_newline<char>::~__match_any_but_newline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  int v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

void std::__match_any_but_newline<char>::~__match_any_but_newline(void (__cdecl ***__p)(std::__owns_one_state<char> *__hidden this))
{
  int v2 = __p[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }

  operator delete(__p);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1C8791C90](exception, 3);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_1C57F8B54(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unsigned char *std::basic_regex<char,std::regex_traits<char>>::__parse_character_class_escape<char const*>(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  unint64_t v3 = a2;
  if (a2 != a3)
  {
    switch(*a2)
    {
      case 'D':
        int v5 = operator new(0xB0uLL);
        std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v5, a1, *(void *)(*(void *)(a1 + 56) + 8), 1, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
        goto LABEL_7;
      case 'S':
        int v5 = operator new(0xB0uLL);
        std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v5, a1, *(void *)(*(void *)(a1 + 56) + 8), 1, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
        goto LABEL_11;
      case 'W':
        char v6 = operator new(0xB0uLL);
        std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v6, a1, *(void *)(*(void *)(a1 + 56) + 8), 1, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
        goto LABEL_9;
      case 'd':
        int v5 = operator new(0xB0uLL);
        std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v5, a1, *(void *)(*(void *)(a1 + 56) + 8), 0, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
LABEL_7:
        *(void *)(*(void *)(a1 + 56) + 8) = v5;
        *(void *)(a1 + 56) = v5;
        int v7 = v5[40] | 0x400;
        goto LABEL_12;
      case 's':
        int v5 = operator new(0xB0uLL);
        std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v5, a1, *(void *)(*(void *)(a1 + 56) + 8), 0, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
LABEL_11:
        *(void *)(*(void *)(a1 + 56) + 8) = v5;
        *(void *)(a1 + 56) = v5;
        int v7 = v5[40] | 0x4000;
LABEL_12:
        v5[40] = v7;
        goto LABEL_13;
      case 'w':
        char v6 = operator new(0xB0uLL);
        std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v6, a1, *(void *)(*(void *)(a1 + 56) + 8), 0, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
LABEL_9:
        *(void *)(*(void *)(a1 + 56) + 8) = v6;
        *(void *)(a1 + 56) = v6;
        v6[40] |= 0x500u;
        std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)v6, 95);
LABEL_13:
        ++v3;
        break;
      default:
        return v3;
    }
  }
  return v3;
}

void sub_1C57F8D44(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1C57F8D58(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1C57F8D6C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1C57F8D80(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1C57F8D94(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1C57F8DA8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<char const*>(std::basic_regex<char> *a1, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t *a4)
{
  long long v4 = a2;
  if (a2 == a3) {
    return v4;
  }
  uint64_t v5 = *a2;
  std::basic_regex<char>::value_type v6 = v5;
  switch((char)v5)
  {
    case '0':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 0;
        return v4 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 0);
        return v4 + 1;
      }
    case 'c':
      if (v4 + 1 == a3) {
        goto LABEL_81;
      }
      unsigned __int8 v8 = v4[1];
      if (((v8 & 0xDF) - 65) > 0x19u) {
        goto LABEL_81;
      }
      std::basic_regex<char>::value_type v9 = v8 & 0x1F;
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(unsigned char *)a4 = v9;
        *((unsigned char *)a4 + 1) = 0;
        return v4 + 2;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v9);
        return v4 + 2;
      }
    case 'f':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 12;
        return v4 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 12);
        return v4 + 1;
      }
    case 'n':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 10;
        return v4 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 10);
        return v4 + 1;
      }
    case 'r':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 13;
        return v4 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 13);
        return v4 + 1;
      }
    case 't':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 9;
        return v4 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 9);
        return v4 + 1;
      }
    case 'u':
      if (v4 + 1 != a3)
      {
        int v10 = v4[1];
        if ((v10 & 0xF8) == 0x30 || (v10 & 0xFE) == 0x38 || (v10 | 0x20u) - 97 < 6)
        {
          v4 += 2;
          if (v4 != a3)
          {
            int v11 = *v4;
            if ((v11 & 0xF8) == 0x30 || (v11 & 0xFE) == 0x38 || (v11 | 0x20u) - 97 < 6) {
              goto LABEL_38;
            }
          }
        }
      }
      goto LABEL_81;
    case 'v':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 11;
        return v4 + 1;
      }
      else
      {
        std::basic_regex<char>::value_type v6 = 11;
LABEL_65:
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v6);
        return v4 + 1;
      }
    case 'x':
LABEL_38:
      if (v4 + 1 == a3) {
        goto LABEL_81;
      }
      unsigned __int8 v12 = v4[1];
      char v13 = -48;
      if ((v12 & 0xF8) == 0x30 || (v12 & 0xFE) == 0x38) {
        goto LABEL_43;
      }
      v12 |= 0x20u;
      if ((v12 - 97) >= 6u) {
        goto LABEL_81;
      }
      char v13 = -87;
LABEL_43:
      if (v4 + 2 == a3) {
        goto LABEL_81;
      }
      unsigned __int8 v14 = v4[2];
      char v15 = -48;
      if ((v14 & 0xF8) != 0x30 && (v14 & 0xFE) != 0x38)
      {
        v14 |= 0x20u;
        if ((v14 - 97) >= 6u) {
LABEL_81:
        }
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
        char v15 = -87;
      }
      std::basic_regex<char>::value_type v16 = v14 + 16 * (v12 + v13) + v15;
      if (!a4)
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v16);
        v4 += 3;
        return v4;
      }
      if (*((char *)a4 + 23) < 0)
      {
        a4[1] = 1;
        a4 = (uint64_t *)*a4;
      }
      else
      {
        *((unsigned char *)a4 + 23) = 1;
      }
      *(unsigned char *)a4 = v16;
      *((unsigned char *)a4 + 1) = 0;
      uint64_t result = v4 + 3;
      break;
    default:
      if ((char)v5 == 95 || ((char)v5 & 0x80000000) == 0 && (a1->__traits_.__ct_->__tab_[v5] & 0x500) != 0) {
        goto LABEL_81;
      }
      if (!a4) {
        goto LABEL_65;
      }
      if (*((char *)a4 + 23) < 0)
      {
        a4[1] = 1;
        a4 = (uint64_t *)*a4;
      }
      else
      {
        *((unsigned char *)a4 + 23) = 1;
      }
      *(unsigned char *)a4 = v5;
      *((unsigned char *)a4 + 1) = 0;
      return v4 + 1;
  }
  return result;
}

void std::basic_regex<char,std::regex_traits<char>>::__push_char(std::basic_regex<char> *this, std::basic_regex<char>::value_type __c)
{
  uint64_t v2 = __c;
  std::basic_regex<_CharT, _Traits>::flag_type flags = this->__flags_;
  if (flags)
  {
    unsigned __int8 v8 = (char *)operator new(0x30uLL);
    first = this->__end_->__first_;
    *(void *)unsigned __int8 v8 = &unk_1F20F4BC8;
    *((void *)v8 + 1) = first;
    std::locale::locale((std::locale *)v8 + 2, &this->__traits_.__loc_);
    *(_OWORD *)(v8 + 24) = *(_OWORD *)&this->__traits_.__ct_;
    v8[40] = ((uint64_t (*)(const std::ctype<char> *, uint64_t))this->__traits_.__ct_->do_tolower)(this->__traits_.__ct_, v2);
LABEL_6:
    this->__end_->__first_ = (std::__node<char> *)v8;
    goto LABEL_7;
  }
  if ((flags & 8) != 0)
  {
    unsigned __int8 v8 = (char *)operator new(0x30uLL);
    int v10 = this->__end_->__first_;
    *(void *)unsigned __int8 v8 = &unk_1F20F4C10;
    *((void *)v8 + 1) = v10;
    std::locale::locale((std::locale *)v8 + 2, &this->__traits_.__loc_);
    *(_OWORD *)(v8 + 24) = *(_OWORD *)&this->__traits_.__ct_;
    v8[40] = v2;
    goto LABEL_6;
  }
  uint64_t v5 = (std::__node<char> *)operator new(0x18uLL);
  std::vector<std::csub_match>::pointer end = this->__end_;
  int v7 = end->__first_;
  v5->__vftable = (std::__node<char>_vtbl *)&unk_1F20F4C58;
  v5[1].__vftable = (std::__node<char>_vtbl *)v7;
  LOBYTE(v5[2].__vftable) = v2;
  end->__first_ = v5;
LABEL_7:
  this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
}

void sub_1C57F95C4(_Unwind_Exception *a1)
{
  std::locale::~locale(v2);
  long long v4 = v1[1];
  if (v4) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v4 + 1))(v4);
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1C8791C90](exception, 4);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_1C57F9670(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::basic_regex<char,std::regex_traits<char>>::__push_back_ref(std::basic_regex<char> *this, int __i)
{
  std::basic_regex<_CharT, _Traits>::flag_type flags = this->__flags_;
  if (flags)
  {
    unsigned __int8 v8 = (std::locale *)operator new(0x30uLL);
    std::basic_regex<char>::value_type v9 = v8;
    v8[1].__locale_ = (std::locale::__imp *)this->__end_->__first_;
    int v10 = (std::locale::__imp *)&unk_1F20F4CA0;
LABEL_6:
    v8->__locale_ = v10;
    std::locale::locale(v8 + 2, &this->__traits_.__loc_);
    *(_OWORD *)&v9[3].__locale_ = *(_OWORD *)&this->__traits_.__ct_;
    LODWORD(v9[5].__locale_) = __i;
    this->__end_->__first_ = (std::__node<char> *)v9;
    goto LABEL_7;
  }
  if ((flags & 8) != 0)
  {
    unsigned __int8 v8 = (std::locale *)operator new(0x30uLL);
    std::basic_regex<char>::value_type v9 = v8;
    v8[1].__locale_ = (std::locale::__imp *)this->__end_->__first_;
    int v10 = (std::locale::__imp *)&unk_1F20F4CE8;
    goto LABEL_6;
  }
  uint64_t v5 = (std::__node<char> *)operator new(0x18uLL);
  std::vector<std::csub_match>::pointer end = this->__end_;
  first = end->__first_;
  v5->__vftable = (std::__node<char>_vtbl *)&unk_1F20F4D30;
  v5[1].__vftable = (std::__node<char>_vtbl *)first;
  LODWORD(v5[2].__vftable) = __i;
  end->__first_ = v5;
LABEL_7:
  this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
}

std::locale *std::__match_char_icase<char,std::regex_traits<char>>::~__match_char_icase(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_1F20F4BC8;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  return a1;
}

void std::__match_char_icase<char,std::regex_traits<char>>::~__match_char_icase(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_1F20F4BC8;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }

  operator delete(a1);
}

uint64_t std::__match_char_icase<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  unint64_t v3 = *(char **)(a2 + 16);
  if (v3 == *(char **)(a2 + 24)
    || (uint64_t v4 = result,
        uint64_t result = (*(uint64_t (**)(void, void))(**(void **)(result + 24) + 40))(*(void *)(result + 24), *v3), *(unsigned __int8 *)(v4 + 40) != result))
  {
    *(_DWORD *)a2 = -993;
    *(void *)(a2 + 80) = 0;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    ++*(void *)(a2 + 16);
    *(void *)(a2 + 80) = *(void *)(v4 + 8);
  }
  return result;
}

std::locale *std::__match_char_collate<char,std::regex_traits<char>>::~__match_char_collate(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_1F20F4C10;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  return a1;
}

void std::__match_char_collate<char,std::regex_traits<char>>::~__match_char_collate(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_1F20F4C10;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }

  operator delete(a1);
}

uint64_t std::__match_char_collate<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) || *v2 != *(unsigned __int8 *)(result + 40))
  {
    *(_DWORD *)a2 = -993;
    *(void *)(a2 + 80) = 0;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(void *)(a2 + 16) = v2 + 1;
    *(void *)(a2 + 80) = *(void *)(result + 8);
  }
  return result;
}

void (__cdecl ***std::__match_char<char>::~__match_char(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  uint64_t v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

void std::__match_char<char>::~__match_char(void (__cdecl ***__p)(std::__owns_one_state<char> *__hidden this))
{
  uint64_t v2 = __p[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }

  operator delete(__p);
}

uint64_t std::__match_char<char>::__exec(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) || *v2 != *(unsigned __int8 *)(result + 16))
  {
    *(_DWORD *)a2 = -993;
    *(void *)(a2 + 80) = 0;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(void *)(a2 + 16) = v2 + 1;
    *(void *)(a2 + 80) = *(void *)(result + 8);
  }
  return result;
}

std::locale *std::__back_ref_icase<char,std::regex_traits<char>>::~__back_ref_icase(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_1F20F4CA0;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  return a1;
}

void std::__back_ref_icase<char,std::regex_traits<char>>::~__back_ref_icase(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_1F20F4CA0;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }

  operator delete(a1);
}

uint64_t std::__back_ref_icase<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 32) + 24 * (*(_DWORD *)(result + 40) - 1);
  if (!*(unsigned char *)(v3 + 16)
    || (uint64_t v4 = *(void *)(v3 + 8) - *(void *)v3, v5 = *(void *)(a2 + 16), *(void *)(a2 + 24) - v5 < v4))
  {
LABEL_3:
    *(_DWORD *)a2 = -993;
    *(void *)(a2 + 80) = 0;
    return result;
  }
  uint64_t v6 = result;
  if (v4 >= 1)
  {
    uint64_t v7 = 0;
    while (1)
    {
      int v8 = (*(uint64_t (**)(void, void))(**(void **)(v6 + 24) + 40))(*(void *)(v6 + 24), *(char *)(*(void *)v3 + v7));
      uint64_t result = (*(uint64_t (**)(void, void))(**(void **)(v6 + 24) + 40))(*(void *)(v6 + 24), *(char *)(*(void *)(a2 + 16) + v7));
      if (v8 != result) {
        goto LABEL_3;
      }
      if (v4 == ++v7)
      {
        uint64_t v5 = *(void *)(a2 + 16);
        break;
      }
    }
  }
  *(_DWORD *)a2 = -994;
  *(void *)(a2 + 16) = v5 + v4;
  *(void *)(a2 + 80) = *(void *)(v6 + 8);
  return result;
}

std::locale *std::__back_ref_collate<char,std::regex_traits<char>>::~__back_ref_collate(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_1F20F4CE8;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  return a1;
}

void std::__back_ref_collate<char,std::regex_traits<char>>::~__back_ref_collate(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_1F20F4CE8;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }

  operator delete(a1);
}

uint64_t std::__back_ref_collate<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  unsigned int v2 = *(_DWORD *)(result + 40) - 1;
  uint64_t v3 = *(void *)(a2 + 32);
  if (!*(unsigned char *)(v3 + 24 * v2 + 16)
    || (uint64_t v4 = (unsigned __int8 **)(v3 + 24 * v2),
        uint64_t v5 = *v4,
        uint64_t v6 = v4[1] - *v4,
        uint64_t v7 = *(void *)(a2 + 16),
        *(void *)(a2 + 24) - v7 < v6))
  {
LABEL_3:
    *(_DWORD *)a2 = -993;
    *(void *)(a2 + 80) = 0;
    return result;
  }
  if (v6 >= 1)
  {
    uint64_t v8 = v6;
    std::basic_regex<char>::value_type v9 = *(unsigned __int8 **)(a2 + 16);
    do
    {
      int v11 = *v5++;
      int v10 = v11;
      int v12 = *v9++;
      if (v10 != v12) {
        goto LABEL_3;
      }
    }
    while (--v8);
  }
  *(_DWORD *)a2 = -994;
  *(void *)(a2 + 16) = v7 + v6;
  *(void *)(a2 + 80) = *(void *)(result + 8);
  return result;
}

void (__cdecl ***std::__back_ref<char>::~__back_ref(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  unsigned int v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

void std::__back_ref<char>::~__back_ref(void (__cdecl ***__p)(std::__owns_one_state<char> *__hidden this))
{
  unsigned int v2 = __p[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }

  operator delete(__p);
}

unsigned int *std::__back_ref<char>::__exec(unsigned int *result, uint64_t a2)
{
  unint64_t v2 = result[4];
  uint64_t v3 = *(void *)(a2 + 32);
  if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(a2 + 40) - v3) >> 3) < v2) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
  }
  unsigned int v5 = v2 - 1;
  if (*(unsigned char *)(v3 + 24 * v5 + 16)
    && (uint64_t v6 = result,
        uint64_t v7 = v3 + 24 * v5,
        uint64_t result = *(unsigned int **)v7,
        int64_t v8 = *(void *)(v7 + 8) - *(void *)v7,
        uint64_t v9 = *(void *)(a2 + 16),
        *(void *)(a2 + 24) - v9 >= v8)
    && (uint64_t result = (unsigned int *)memcmp(result, *(const void **)(a2 + 16), v8), !result))
  {
    *(_DWORD *)a2 = -994;
    *(void *)(a2 + 16) = v9 + v8;
    *(void *)(a2 + 80) = *((void *)v6 + 1);
  }
  else
  {
    *(_DWORD *)a2 = -993;
    *(void *)(a2 + 80) = 0;
  }
  return result;
}

void std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](uint64_t a1, uint64_t a2)
{
  char v2 = a2;
  if (!*(unsigned char *)(a1 + 169))
  {
    uint64_t v6 = (void *)(a1 + 40);
    unsigned int v5 = *(unsigned char **)(a1 + 48);
    unint64_t v16 = *(void *)(a1 + 56);
    if (*(unsigned char *)(a1 + 170))
    {
      if ((unint64_t)v5 < v16) {
        goto LABEL_24;
      }
      std::vector<std::csub_match>::size_type v17 = (unsigned char *)*v6;
      unint64_t v18 = (unint64_t)&v5[-*v6];
      unint64_t v19 = v18 + 1;
      if ((uint64_t)(v18 + 1) >= 0)
      {
        unint64_t v20 = v16 - (void)v17;
        if (2 * v20 > v19) {
          unint64_t v19 = 2 * v20;
        }
        if (v20 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v21 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v21 = v19;
        }
        if (v21)
        {
          int v12 = operator new(v21);
          char v13 = &v12[v18];
          unsigned __int8 v14 = &v12[v21];
          v12[v18] = v2;
          uint64_t v15 = (uint64_t)&v12[v18 + 1];
          if (v5 == v17) {
            goto LABEL_49;
          }
        }
        else
        {
          int v12 = 0;
          char v13 = &v5[-*v6];
          unsigned __int8 v14 = 0;
          *(unsigned char *)unint64_t v18 = a2;
          uint64_t v15 = v18 + 1;
          if (v5 == v17) {
            goto LABEL_49;
          }
        }
        if (v18 >= 8 && (unint64_t)(v17 - v12) >= 0x20)
        {
          if (v18 >= 0x20)
          {
            unint64_t v28 = v18 & 0xFFFFFFFFFFFFFFE0;
            uint64_t v38 = (long long *)(v5 - 16);
            uint64_t v39 = &v12[v5 - 16 - v17];
            unint64_t v40 = v18 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              long long v41 = *v38;
              *(v39 - 1) = *(v38 - 1);
              _OWORD *v39 = v41;
              v39 -= 2;
              v38 -= 2;
              v40 -= 32;
            }
            while (v40);
            if (v18 == v28) {
              goto LABEL_86;
            }
            if ((v18 & 0x18) == 0)
            {
              v13 -= v28;
              v5 -= v28;
              goto LABEL_80;
            }
          }
          else
          {
            unint64_t v28 = 0;
          }
          v13 -= v18 & 0xFFFFFFFFFFFFFFF8;
          unsigned int v42 = &v5[-v28 - 8];
          uint64_t v43 = &v12[v42 - v17];
          unint64_t v44 = v28 - (v18 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            uint64_t v45 = *(void *)v42;
            v42 -= 8;
            *v43-- = v45;
            v44 += 8;
          }
          while (v44);
          v5 -= v18 & 0xFFFFFFFFFFFFFFF8;
          if (v18 == (v18 & 0xFFFFFFFFFFFFFFF8)) {
            goto LABEL_86;
          }
        }
LABEL_80:
        long long v56 = v13 - 1;
        do
        {
          char v57 = *--v5;
          *v56-- = v57;
        }
        while (v5 != v17);
        goto LABEL_86;
      }
LABEL_89:
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    if ((unint64_t)v5 < v16) {
      goto LABEL_24;
    }
    uint64_t v23 = (unsigned char *)*v6;
    unint64_t v24 = (unint64_t)&v5[-*v6];
    unint64_t v25 = v24 + 1;
    if ((uint64_t)(v24 + 1) < 0) {
      goto LABEL_89;
    }
    unint64_t v26 = v16 - (void)v23;
    if (2 * v26 > v25) {
      unint64_t v25 = 2 * v26;
    }
    if (v26 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v27 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v27 = v25;
    }
    if (v27)
    {
      int v12 = operator new(v27);
      char v13 = &v12[v24];
      unsigned __int8 v14 = &v12[v27];
      v12[v24] = v2;
      uint64_t v15 = (uint64_t)&v12[v24 + 1];
      if (v5 == v23)
      {
LABEL_49:
        *(void *)(a1 + 40) = v13;
        *(void *)(a1 + 48) = v15;
        *(void *)(a1 + 56) = v14;
        if (!v5) {
          goto LABEL_88;
        }
        goto LABEL_87;
      }
    }
    else
    {
      int v12 = 0;
      char v13 = &v5[-*v6];
      unsigned __int8 v14 = 0;
      *(unsigned char *)unint64_t v24 = a2;
      uint64_t v15 = v24 + 1;
      if (v5 == v23) {
        goto LABEL_49;
      }
    }
    if (v24 >= 8 && (unint64_t)(v23 - v12) >= 0x20)
    {
      if (v24 >= 0x20)
      {
        unint64_t v29 = v24 & 0xFFFFFFFFFFFFFFE0;
        long long v46 = (long long *)(v5 - 16);
        xpc_object_t v47 = &v12[v5 - 16 - v23];
        unint64_t v48 = v24 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          long long v49 = *v46;
          *(v47 - 1) = *(v46 - 1);
          *xpc_object_t v47 = v49;
          v47 -= 2;
          v46 -= 2;
          v48 -= 32;
        }
        while (v48);
        if (v24 == v29) {
          goto LABEL_86;
        }
        if ((v24 & 0x18) == 0)
        {
          v13 -= v29;
          v5 -= v29;
          goto LABEL_84;
        }
      }
      else
      {
        unint64_t v29 = 0;
      }
      v13 -= v24 & 0xFFFFFFFFFFFFFFF8;
      unint64_t v50 = &v5[-v29 - 8];
      long long v51 = &v12[v50 - v23];
      unint64_t v52 = v29 - (v24 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        uint64_t v53 = *(void *)v50;
        v50 -= 8;
        *v51-- = v53;
        v52 += 8;
      }
      while (v52);
      v5 -= v24 & 0xFFFFFFFFFFFFFFF8;
      if (v24 == (v24 & 0xFFFFFFFFFFFFFFF8)) {
        goto LABEL_86;
      }
    }
LABEL_84:
    char v58 = v13 - 1;
    do
    {
      char v59 = *--v5;
      *v58-- = v59;
    }
    while (v5 != v23);
    goto LABEL_86;
  }
  char v2 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), a2);
  unsigned int v5 = *(unsigned char **)(a1 + 48);
  unint64_t v4 = *(void *)(a1 + 56);
  if ((unint64_t)v5 < v4)
  {
LABEL_24:
    unsigned char *v5 = v2;
    uint64_t v15 = (uint64_t)(v5 + 1);
    goto LABEL_88;
  }
  uint64_t v6 = (void *)(a1 + 40);
  uint64_t v7 = *(unsigned char **)(a1 + 40);
  unint64_t v8 = v5 - v7;
  uint64_t v9 = v5 - v7 + 1;
  if (v9 < 0) {
    goto LABEL_89;
  }
  unint64_t v10 = v4 - (void)v7;
  if (2 * v10 > v9) {
    uint64_t v9 = 2 * v10;
  }
  if (v10 >= 0x3FFFFFFFFFFFFFFFLL) {
    size_t v11 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    size_t v11 = v9;
  }
  if (v11)
  {
    int v12 = operator new(v11);
    char v13 = &v12[v8];
    unsigned __int8 v14 = &v12[v11];
    v12[v8] = v2;
    uint64_t v15 = (uint64_t)&v12[v8 + 1];
    if (v5 == v7) {
      goto LABEL_49;
    }
  }
  else
  {
    int v12 = 0;
    char v13 = (char *)(v5 - v7);
    unsigned __int8 v14 = 0;
    *(unsigned char *)unint64_t v8 = v2;
    uint64_t v15 = v8 + 1;
    if (v5 == v7) {
      goto LABEL_49;
    }
  }
  if (v8 < 8 || (unint64_t)(v7 - v12) < 0x20) {
    goto LABEL_76;
  }
  if (v8 < 0x20)
  {
    unint64_t v22 = 0;
    goto LABEL_55;
  }
  unint64_t v22 = v8 & 0xFFFFFFFFFFFFFFE0;
  long long v30 = (long long *)(v5 - 16);
  uint64_t v31 = &v12[v5 - 16 - v7];
  unint64_t v32 = v8 & 0xFFFFFFFFFFFFFFE0;
  do
  {
    long long v33 = *v30;
    *(v31 - 1) = *(v30 - 1);
    *uint64_t v31 = v33;
    v31 -= 2;
    v30 -= 2;
    v32 -= 32;
  }
  while (v32);
  if (v8 != v22)
  {
    if ((v8 & 0x18) == 0)
    {
      v13 -= v22;
      v5 -= v22;
      goto LABEL_76;
    }
LABEL_55:
    v13 -= v8 & 0xFFFFFFFFFFFFFFF8;
    uint64_t v34 = &v5[-v22 - 8];
    xpc_object_t v35 = &v12[v34 - v7];
    unint64_t v36 = v22 - (v8 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      uint64_t v37 = *(void *)v34;
      v34 -= 8;
      *v35-- = v37;
      v36 += 8;
    }
    while (v36);
    v5 -= v8 & 0xFFFFFFFFFFFFFFF8;
    if (v8 == (v8 & 0xFFFFFFFFFFFFFFF8)) {
      goto LABEL_86;
    }
LABEL_76:
    xpc_object_t v54 = v13 - 1;
    do
    {
      char v55 = *--v5;
      *v54-- = v55;
    }
    while (v5 != v7);
  }
LABEL_86:
  unsigned int v5 = (unsigned char *)*v6;
  *(void *)(a1 + 40) = v12;
  *(void *)(a1 + 48) = v15;
  *(void *)(a1 + 56) = v14;
  if (v5) {
LABEL_87:
  }
    operator delete(v5);
LABEL_88:
  *(void *)(a1 + 48) = v15;
}

uint64_t std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100](uint64_t a1, uint64_t a2, uint64_t a3, char a4, char a5, char a6)
{
  *(void *)(a1 + 8) = a3;
  size_t v11 = (const std::locale *)(a1 + 16);
  std::locale::locale((std::locale *)(a1 + 16), (const std::locale *)a2);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(unsigned char *)(a1 + 168) = a4;
  *(unsigned char *)(a1 + 169) = a5;
  *(unsigned char *)(a1 + 170) = a6;
  std::locale::locale(&v16, v11);
  std::locale::name(&v17, &v16);
  std::string::size_type size = HIBYTE(v17.__r_.__value_.__r.__words[2]);
  if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v17.__r_.__value_.__l.__size_;
  }
  if (size == 1)
  {
    char v13 = (std::string *)v17.__r_.__value_.__r.__words[0];
    if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      char v13 = &v17;
    }
    BOOL v14 = v13->__r_.__value_.__s.__data_[0] != 67;
    if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
      goto LABEL_9;
    }
  }
  else
  {
    BOOL v14 = 1;
    if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
LABEL_9:
    }
      operator delete(v17.__r_.__value_.__l.__data_);
  }
  std::locale::~locale(&v16);
  *(unsigned char *)(a1 + 171) = v14;
  return a1;
}

void sub_1C57FA790(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
  std::locale::~locale(&a9);
  std::vector<std::string>::~vector[abi:ne180100]((void **)(v9 + 136));
  uint64_t v15 = *(void **)(v9 + 112);
  if (v15)
  {
    *(void *)(v9 + 120) = v15;
    operator delete(v15);
    std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100](v12);
    std::locale v16 = *(void **)(v9 + 64);
    if (!v16)
    {
LABEL_3:
      std::string v17 = *v13;
      if (!*v13) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }
  else
  {
    std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100](v12);
    std::locale v16 = *(void **)(v9 + 64);
    if (!v16) {
      goto LABEL_3;
    }
  }
  *(void *)(v9 + 72) = v16;
  operator delete(v16);
  std::string v17 = *v13;
  if (!*v13)
  {
LABEL_4:
    std::locale::~locale(v11);
    *(void *)uint64_t v9 = v10;
    uint64_t v18 = *(void *)(v9 + 8);
    if (!v18) {
      goto LABEL_5;
    }
    goto LABEL_9;
  }
LABEL_8:
  *(void *)(v9 + 48) = v17;
  operator delete(v17);
  std::locale::~locale(v11);
  *(void *)uint64_t v9 = v10;
  uint64_t v18 = *(void *)(v9 + 8);
  if (!v18) {
LABEL_5:
  }
    _Unwind_Resume(a1);
LABEL_9:
  (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
  _Unwind_Resume(a1);
}

void **std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100](void **a1)
{
  char v2 = (void **)*a1;
  if (*a1)
  {
    uint64_t v3 = (void **)a1[1];
    unint64_t v4 = *a1;
    if (v3 == v2)
    {
LABEL_11:
      a1[1] = v2;
      operator delete(v4);
      return a1;
    }
    while (1)
    {
      if (*((char *)v3 - 1) < 0)
      {
        operator delete(*(v3 - 3));
        if (*((char *)v3 - 25) < 0) {
LABEL_9:
        }
          operator delete(*(v3 - 6));
      }
      else if (*((char *)v3 - 25) < 0)
      {
        goto LABEL_9;
      }
      v3 -= 6;
      if (v3 == v2)
      {
        unint64_t v4 = *a1;
        goto LABEL_11;
      }
    }
  }
  return a1;
}

void std::__bracket_expression<char,std::regex_traits<char>>::~__bracket_expression(std::locale *a1)
{
  uint64_t v1 = std::__bracket_expression<char,std::regex_traits<char>>::~__bracket_expression(a1);

  operator delete(v1);
}

void std::__bracket_expression<char,std::regex_traits<char>>::__exec(const std::__bracket_expression<char, std::regex_traits<char>> *this, std::__bracket_expression<char, std::regex_traits<char>>::__state *a2)
{
  char v2 = a2;
  current = a2->__current_;
  last = a2->__last_;
  if (current == last)
  {
    uint64_t v25 = 0;
    BOOL negate = this->__negate_;
    goto LABEL_245;
  }
  if (!this->__might_have_digraph_ || current + 1 == last) {
    goto LABEL_34;
  }
  char v6 = *current;
  LOBYTE(__src) = *current;
  char v7 = current[1];
  HIBYTE(__src) = v7;
  if (this->__icase_)
  {
    LOBYTE(__src) = ((uint64_t (*)(const std::ctype<char> *, void))this->__traits_.__ct_->do_tolower)(this->__traits_.__ct_, v6);
    HIBYTE(__src) = ((uint64_t (*)(const std::ctype<char> *, void))this->__traits_.__ct_->do_tolower)(this->__traits_.__ct_, v7);
  }
  p_traits = &this->__traits_;
  std::regex_traits<char>::__lookup_collatename<char *>(&__src, (uint64_t)&this->__traits_, __p, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0)
  {
    size_t v27 = __p[1];
    operator delete(__p[0]);
    if (v27) {
      goto LABEL_8;
    }
LABEL_34:
    BOOL negate = 0;
    uint64_t v25 = 1;
    unsigned __int8 v28 = *v2->__current_;
    LOBYTE(__src) = v28;
    if (!this->__icase_) {
      goto LABEL_36;
    }
    goto LABEL_35;
  }
  if (!HIBYTE(__p[2])) {
    goto LABEL_34;
  }
LABEL_8:
  std::vector<std::pair<char, char>>::pointer begin = this->__digraphs_.__begin_;
  uint64_t v10 = (char *)this->__digraphs_.__end_ - (char *)begin;
  if (v10)
  {
    uint64_t v11 = v10 >> 1;
    if ((unint64_t)(v10 >> 1) <= 1) {
      uint64_t v11 = 1;
    }
    p_second = &begin->second;
    while (__src != *(p_second - 1) || HIBYTE(__src) != *p_second)
    {
      p_second += 2;
      if (!--v11) {
        goto LABEL_17;
      }
    }
    goto LABEL_227;
  }
LABEL_17:
  if (!this->__collate_ || this->__ranges_.__begin_ == this->__ranges_.__end_)
  {
    BOOL negate = 0;
    goto LABEL_167;
  }
  memset(v136, 170, sizeof(v136));
  __p[1] = (void *)0xAAAAAAAAAAAAAAAALL;
  __p[2] = (void *)0x2AAAAAAAAAAAAAALL;
  __p[0] = (void *)0xAAAAAAAAAA00AAAALL;
  LOWORD(__p[0]) = __src;
  (*(void (**)(void **__return_ptr))(*(void *)this->__traits_.__col_ + 32))(v136);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  std::vector<std::pair<std::string, std::string>>::pointer v14 = this->__ranges_.__begin_;
  char v15 = HIBYTE(v136[2]);
  int64_t v16 = (char *)this->__ranges_.__end_ - (char *)v14;
  if (!v16)
  {
    BOOL v24 = 0;
    int v70 = 0;
    int v69 = 0;
    goto LABEL_164;
  }
  v128 = v2;
  uint64_t v17 = 0;
  unint64_t v18 = v16 / 48;
  if (SHIBYTE(v136[2]) >= 0) {
    unint64_t v19 = v136;
  }
  else {
    unint64_t v19 = (void **)v136[0];
  }
  char v20 = HIBYTE(v136[2]);
  if (SHIBYTE(v136[2]) >= 0) {
    size_t v21 = (void *)HIBYTE(v136[2]);
  }
  else {
    size_t v21 = v136[1];
  }
  if (v18 <= 1) {
    uint64_t v22 = 1;
  }
  else {
    uint64_t v22 = v16 / 48;
  }
  uint64_t v23 = (unsigned __int8 *)&v14->second.__r_.__value_.__r.__words[2] + 7;
  BOOL v24 = 1;
  do
  {
    int v59 = (char)*(v23 - 24);
    if (v59 >= 0) {
      unint64_t v60 = (char *)(v23 - 47);
    }
    else {
      unint64_t v60 = *(char **)(v23 - 47);
    }
    if (v59 >= 0) {
      size_t v61 = *(v23 - 24);
    }
    else {
      size_t v61 = *(void *)(v23 - 39);
    }
    if ((unint64_t)v21 >= v61) {
      size_t v62 = v61;
    }
    else {
      size_t v62 = (size_t)v21;
    }
    int v63 = memcmp(v60, v19, v62);
    if (v63)
    {
      if ((v63 & 0x80000000) == 0) {
        goto LABEL_98;
      }
    }
    else if (v61 > (unint64_t)v21)
    {
      goto LABEL_98;
    }
    int v64 = (char)*v23;
    if (v64 >= 0) {
      char v65 = (char *)(v23 - 23);
    }
    else {
      char v65 = *(char **)(v23 - 23);
    }
    if (v64 >= 0) {
      size_t v66 = *v23;
    }
    else {
      size_t v66 = *(void *)(v23 - 15);
    }
    if (v66 >= (unint64_t)v21) {
      size_t v67 = (size_t)v21;
    }
    else {
      size_t v67 = v66;
    }
    int v68 = memcmp(v19, v65, v67);
    if (v68)
    {
      if (v68 < 0)
      {
LABEL_123:
        int v69 = 1;
        int v70 = 5;
        goto LABEL_162;
      }
    }
    else if ((unint64_t)v21 <= v66)
    {
      goto LABEL_123;
    }
LABEL_98:
    BOOL v24 = ++v17 < v18;
    v23 += 48;
  }
  while (v22 != v17);
  int v70 = 0;
  int v69 = 0;
LABEL_162:
  char v2 = v128;
  p_traits = &this->__traits_;
  char v15 = v20;
LABEL_164:
  if (v15 < 0) {
    operator delete(v136[0]);
  }
  BOOL negate = v69;
  if (v24) {
    goto LABEL_207;
  }
LABEL_167:
  if (this->__equivalences_.__begin_ == this->__equivalences_.__end_) {
    goto LABEL_209;
  }
  int v133 = negate;
  uint64_t v88 = v2;
  memset(__p, 170, sizeof(__p));
  std::regex_traits<char>::__transform_primary<char *>(&__src, (uint64_t)p_traits, __p, __p);
  std::vector<std::string>::pointer v89 = this->__equivalences_.__begin_;
  int v90 = SHIBYTE(__p[2]);
  int64_t v91 = (char *)this->__equivalences_.__end_ - (char *)v89;
  if (!v91) {
    goto LABEL_188;
  }
  unint64_t v92 = v91 / 24;
  char v93 = __p[1];
  if (SHIBYTE(__p[2]) >= 0) {
    long long v94 = (void *)HIBYTE(__p[2]);
  }
  else {
    long long v94 = __p[1];
  }
  if (SHIBYTE(__p[2]) < 0)
  {
    int v135 = SHIBYTE(__p[2]);
    uint64_t v103 = 0;
    long long v104 = __p[0];
    if (v92 <= 1) {
      uint64_t v105 = 1;
    }
    else {
      uint64_t v105 = v91 / 24;
    }
    BOOL v97 = 1;
    do
    {
      std::string::size_type size = HIBYTE(v89->__r_.__value_.__r.__words[2]);
      int v107 = (char)size;
      if ((size & 0x80u) != 0) {
        std::string::size_type size = v89->__r_.__value_.__l.__size_;
      }
      if (v94 == (void *)size)
      {
        std::vector<std::string>::pointer v108 = v107 >= 0 ? v89 : (std::vector<std::string>::pointer)v89->__r_.__value_.__r.__words[0];
        if (!memcmp(v104, v108, (size_t)v93))
        {
          int v133 = 1;
          int v70 = 5;
          goto LABEL_203;
        }
      }
      BOOL v97 = ++v103 < v92;
      ++v89;
    }
    while (v105 != v103);
    int v70 = 0;
LABEL_203:
    char v2 = v88;
    int v90 = v135;
    goto LABEL_204;
  }
  if (!HIBYTE(__p[2]))
  {
    std::string::size_type v114 = HIBYTE(v89->__r_.__value_.__r.__words[2]);
    if ((v114 & 0x80u) != 0) {
      std::string::size_type v114 = v89->__r_.__value_.__l.__size_;
    }
    if (v114 != HIBYTE(__p[2]))
    {
      unint64_t v119 = 0;
      if (v92 <= 1) {
        uint64_t v120 = 1;
      }
      else {
        uint64_t v120 = v92;
      }
      uint64_t v121 = v120 - 1;
      v122 = &v89[1].__r_.__value_.__s.__data_[8];
      char v2 = v88;
      while (v121 != v119)
      {
        ++v119;
        unint64_t v123 = v122[15];
        unint64_t v125 = *(void *)v122;
        v122 += 24;
        unint64_t v124 = v125;
        if ((v123 & 0x80u) != 0) {
          unint64_t v123 = v124;
        }
        if (v94 == (void *)v123)
        {
          BOOL v97 = v119 < v92;
          int v133 = 1;
          int v70 = 5;
          goto LABEL_204;
        }
      }
      BOOL v97 = 0;
      int v70 = 0;
      goto LABEL_204;
    }
    char v2 = v88;
    BOOL negate = 1;
LABEL_208:
    uint64_t v25 = 2;
    goto LABEL_245;
  }
  uint64_t v95 = 0;
  uint64_t v96 = v92 <= 1 ? 1 : v91 / 24;
  BOOL v97 = 1;
  do
  {
    v98 = &v89[v95];
    os_activity_t v99 = (void *)HIBYTE(v98->__r_.__value_.__r.__words[2]);
    int v100 = (char)v99;
    if ((char)v99 < 0) {
      os_activity_t v99 = (void *)v98->__r_.__value_.__l.__size_;
    }
    if (v94 == v99)
    {
      if (v100 < 0) {
        v98 = (std::string *)v98->__r_.__value_.__r.__words[0];
      }
      long long v101 = __p;
      uint64_t v102 = HIBYTE(__p[2]);
      while (*(unsigned __int8 *)v101 == v98->__r_.__value_.__s.__data_[0])
      {
        long long v101 = (void **)((char *)v101 + 1);
        v98 = (std::string *)((char *)v98 + 1);
        if (!--v102)
        {
          int v133 = 1;
          int v70 = 5;
          char v2 = v88;
          goto LABEL_204;
        }
      }
    }
    BOOL v97 = ++v95 < v92;
  }
  while (v95 != v96);
LABEL_188:
  BOOL v97 = 0;
  int v70 = 0;
  char v2 = v88;
LABEL_204:
  if (v90 < 0) {
    operator delete(__p[0]);
  }
  BOOL negate = v133;
  if (!v97)
  {
LABEL_209:
    if ((char)__src < 0)
    {
      neg_std::regex_traits<char>::char_class_type mask = this->__neg_mask_;
    }
    else
    {
      std::regex_traits<char>::char_class_type mask = this->__mask_;
      tab = this->__traits_.__ct_->__tab_;
      std::ctype_base::mask v111 = tab[__src];
      if (((v111 & mask) != 0 || __src == 95 && (mask & 0x80) != 0)
        && (SHIBYTE(__src) & 0x80000000) == 0
        && ((tab[HIBYTE(__src)] & mask) != 0 || (mask & 0x80) != 0 && HIBYTE(__src) == 95))
      {
        goto LABEL_227;
      }
      neg_std::regex_traits<char>::char_class_type mask = this->__neg_mask_;
      if ((neg_mask & v111) != 0 || __src == 95 && (neg_mask & 0x80) != 0)
      {
LABEL_226:
        int v113 = negate;
LABEL_228:
        BOOL negate = v113;
        uint64_t v25 = 2;
        goto LABEL_245;
      }
    }
    if ((SHIBYTE(__src) & 0x80000000) == 0)
    {
      if ((this->__traits_.__ct_->__tab_[HIBYTE(__src)] & neg_mask) == 0)
      {
        int v113 = 1;
        if (HIBYTE(__src) != 95 || (neg_mask & 0x80) == 0) {
          goto LABEL_228;
        }
      }
      goto LABEL_226;
    }
LABEL_227:
    int v113 = 1;
    goto LABEL_228;
  }
LABEL_207:
  if (v70) {
    goto LABEL_208;
  }
  uint64_t v25 = 2;
  unsigned __int8 v28 = *v2->__current_;
  LOBYTE(__src) = v28;
  if (this->__icase_)
  {
LABEL_35:
    unsigned __int8 v28 = ((uint64_t (*)(const std::ctype<char> *, void))this->__traits_.__ct_->do_tolower)(this->__traits_.__ct_, (char)v28);
    LOBYTE(__src) = v28;
  }
LABEL_36:
  std::vector<char>::pointer v29 = this->__chars_.__begin_;
  unint64_t v30 = this->__chars_.__end_ - v29;
  if (v30)
  {
    if (v30 <= 1) {
      unint64_t v30 = 1;
    }
    while (1)
    {
      int v31 = *v29++;
      if (v31 == v28) {
        break;
      }
      if (!--v30) {
        goto LABEL_41;
      }
    }
LABEL_244:
    BOOL negate = 1;
    goto LABEL_245;
  }
LABEL_41:
  std::regex_traits<char>::char_class_type v32 = this->__neg_mask_;
  if (v32 || this->__neg_chars_.__begin_ != this->__neg_chars_.__end_)
  {
    if ((v28 & 0x80) != 0 || (this->__traits_.__ct_->__tab_[v28] & v32) == 0)
    {
      int v34 = (v32 >> 7) & 1;
      char v33 = v28 == 95 ? v34 : 0;
    }
    else
    {
      char v33 = 1;
    }
    std::vector<char>::pointer end = this->__neg_chars_.__end_;
    std::vector<char>::pointer v36 = (std::vector<char>::pointer)memchr(this->__neg_chars_.__begin_, (char)v28, end - this->__neg_chars_.__begin_);
    uint64_t v37 = v36 ? v36 : end;
    if ((v33 & 1) == 0 && v37 == end) {
      goto LABEL_244;
    }
  }
  std::vector<std::pair<std::string, std::string>>::pointer v38 = this->__ranges_.__begin_;
  std::vector<std::pair<std::string, std::string>>::pointer v39 = this->__ranges_.__end_;
  if (v38 == v39) {
    goto LABEL_128;
  }
  memset(v136, 170, sizeof(v136));
  if (!this->__collate_)
  {
    unsigned int v40 = 1;
    HIBYTE(v136[2]) = 1;
    LOWORD(v136[0]) = v28;
    int64_t v41 = (char *)v39 - (char *)v38;
    if (v41) {
      goto LABEL_59;
    }
LABEL_155:
    BOOL v48 = 0;
    if ((v40 & 0x80) != 0) {
      goto LABEL_126;
    }
    goto LABEL_127;
  }
  __p[1] = (void *)0xAAAAAAAAAAAAAAAALL;
  __p[2] = (void *)0x1AAAAAAAAAAAAAALL;
  __p[0] = (void *)0xAAAAAAAAAAAAAAAALL;
  LOWORD(__p[0]) = v28;
  (*(void (**)(void **__return_ptr))(*(void *)this->__traits_.__col_ + 32))(v136);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  std::vector<std::pair<std::string, std::string>>::pointer v38 = this->__ranges_.__begin_;
  unsigned int v40 = HIBYTE(v136[2]);
  int64_t v41 = (char *)this->__ranges_.__end_ - (char *)v38;
  if (!v41) {
    goto LABEL_155;
  }
LABEL_59:
  uint64_t v134 = v25;
  BOOL v131 = negate;
  v129 = v2;
  uint64_t v42 = 0;
  unint64_t v43 = v41 / 48;
  char v126 = v40;
  if ((v40 & 0x80u) == 0) {
    unint64_t v44 = v136;
  }
  else {
    unint64_t v44 = (void **)v136[0];
  }
  if ((v40 & 0x80u) == 0) {
    uint64_t v45 = (void *)v40;
  }
  else {
    uint64_t v45 = v136[1];
  }
  if (v43 <= 1) {
    uint64_t v46 = 1;
  }
  else {
    uint64_t v46 = v41 / 48;
  }
  xpc_object_t v47 = (unsigned __int8 *)&v38->second.__r_.__value_.__r.__words[2] + 7;
  BOOL v48 = 1;
  while (2)
  {
    int v49 = (char)*(v47 - 24);
    if (v49 >= 0) {
      unint64_t v50 = (char *)(v47 - 47);
    }
    else {
      unint64_t v50 = *(char **)(v47 - 47);
    }
    if (v49 >= 0) {
      size_t v51 = *(v47 - 24);
    }
    else {
      size_t v51 = *(void *)(v47 - 39);
    }
    if ((unint64_t)v45 >= v51) {
      size_t v52 = v51;
    }
    else {
      size_t v52 = (size_t)v45;
    }
    int v53 = memcmp(v50, v44, v52);
    if (v53)
    {
      if (v53 < 0) {
        goto LABEL_84;
      }
    }
    else if (v51 <= (unint64_t)v45)
    {
LABEL_84:
      int v54 = (char)*v47;
      if (v54 >= 0) {
        char v55 = (char *)(v47 - 23);
      }
      else {
        char v55 = *(char **)(v47 - 23);
      }
      if (v54 >= 0) {
        size_t v56 = *v47;
      }
      else {
        size_t v56 = *(void *)(v47 - 15);
      }
      if (v56 >= (unint64_t)v45) {
        size_t v57 = (size_t)v45;
      }
      else {
        size_t v57 = v56;
      }
      int v58 = memcmp(v44, v55, v57);
      if (v58)
      {
        if (v58 < 0)
        {
LABEL_95:
          BOOL negate = 1;
          char v2 = v129;
          uint64_t v25 = v134;
          if ((v126 & 0x80) == 0) {
            goto LABEL_127;
          }
          goto LABEL_126;
        }
      }
      else if ((unint64_t)v45 <= v56)
      {
        goto LABEL_95;
      }
    }
    BOOL v48 = ++v42 < v43;
    v47 += 48;
    if (v46 != v42) {
      continue;
    }
    break;
  }
  char v2 = v129;
  BOOL negate = v131;
  uint64_t v25 = v134;
  if ((v126 & 0x80) == 0) {
    goto LABEL_127;
  }
LABEL_126:
  operator delete(v136[0]);
LABEL_127:
  if (v48) {
    goto LABEL_245;
  }
LABEL_128:
  if (this->__equivalences_.__begin_ == this->__equivalences_.__end_)
  {
LABEL_239:
    if ((v28 & 0x80) != 0) {
      goto LABEL_245;
    }
    std::regex_traits<char>::char_class_type v115 = this->__mask_;
    if ((this->__traits_.__ct_->__tab_[v28] & v115) == 0)
    {
      int v116 = (v115 >> 7) & 1;
      if (v28 != 95) {
        int v116 = 0;
      }
      if (v116 != 1) {
        goto LABEL_245;
      }
    }
    goto LABEL_244;
  }
  memset(__p, 170, sizeof(__p));
  std::regex_traits<char>::__transform_primary<char *>(&__src, (uint64_t)&this->__traits_, (unsigned char *)&__src + 1, __p);
  std::vector<std::string>::pointer v71 = this->__equivalences_.__begin_;
  uint64_t v72 = HIBYTE(__p[2]);
  int64_t v73 = (char *)this->__equivalences_.__end_ - (char *)v71;
  if (!v73)
  {
    if ((HIBYTE(__p[2]) & 0x80) != 0) {
      operator delete(__p[0]);
    }
LABEL_238:
    unsigned __int8 v28 = __src;
    goto LABEL_239;
  }
  BOOL v132 = negate;
  v130 = v2;
  unint64_t v74 = 0;
  unint64_t v75 = v73 / 24;
  long long v76 = __p[0];
  unint64_t v77 = __p[1];
  if (SHIBYTE(__p[2]) >= 0) {
    long long v78 = (void *)HIBYTE(__p[2]);
  }
  else {
    long long v78 = __p[1];
  }
  if (v75 <= 1) {
    uint64_t v79 = 1;
  }
  else {
    uint64_t v79 = v73 / 24;
  }
  BOOL v80 = 1;
  while (2)
  {
    long long v81 = &v71[v74];
    long long v82 = (void *)HIBYTE(v81->__r_.__value_.__r.__words[2]);
    int v83 = (char)v82;
    if ((char)v82 < 0) {
      long long v82 = (void *)v81->__r_.__value_.__l.__size_;
    }
    if (v78 != v82)
    {
LABEL_149:
      if (++v74 == v79)
      {
        if ((v72 & 0x80) != 0) {
LABEL_236:
        }
          operator delete(__p[0]);
        char v2 = v130;
        BOOL negate = v132;
        goto LABEL_238;
      }
      goto LABEL_153;
    }
    if (v83 >= 0) {
      long long v84 = &v71[v74];
    }
    else {
      long long v84 = (std::string *)v81->__r_.__value_.__r.__words[0];
    }
    if ((v72 & 0x80) == 0)
    {
      if (!v72)
      {
LABEL_157:
        char v2 = v130;
        BOOL negate = 1;
        if (!v80) {
          goto LABEL_238;
        }
        goto LABEL_245;
      }
      uint64_t v85 = 0;
      while (*((unsigned __int8 *)__p + v85) == v84->__r_.__value_.__s.__data_[v85])
      {
        if (v72 == ++v85) {
          goto LABEL_157;
        }
      }
      goto LABEL_149;
    }
    BOOL v127 = v80;
    long long v86 = v76;
    long long v87 = v77;
    if (memcmp(v76, v84, (size_t)v77))
    {
      ++v74;
      unint64_t v77 = v87;
      long long v76 = v86;
      if (v74 == v79) {
        goto LABEL_236;
      }
LABEL_153:
      BOOL v80 = v74 < v75;
      continue;
    }
    break;
  }
  operator delete(__p[0]);
  char v2 = v130;
  BOOL negate = 1;
  if (!v127) {
    goto LABEL_238;
  }
LABEL_245:
  if (negate == this->__negate_)
  {
    first = 0;
    int v118 = -993;
  }
  else
  {
    v2->__current_ += v25;
    first = this->__first_;
    int v118 = -995;
  }
  v2->__do_ = v118;
  v2->__node_ = first;
}

void sub_1C57FB450(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::pair<std::string,std::string>::~pair(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0)
  {
    operator delete(*(void **)(a1 + 24));
    if ((*(char *)(a1 + 23) & 0x80000000) == 0) {
      return a1;
    }
  }
  else if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    return a1;
  }
  operator delete(*(void **)a1);
  return a1;
}

std::locale *std::__bracket_expression<char,std::regex_traits<char>>::~__bracket_expression(std::locale *a1)
{
  locale = a1[17].__locale_;
  if (locale)
  {
    uint64_t v3 = a1[18].__locale_;
    unint64_t v4 = a1[17].__locale_;
    if (v3 != locale)
    {
      do
      {
        if (*((char *)v3 - 1) < 0) {
          operator delete(*((void **)v3 - 3));
        }
        uint64_t v3 = (std::locale::__imp *)((char *)v3 - 24);
      }
      while (v3 != locale);
      unint64_t v4 = a1[17].__locale_;
    }
    a1[18].__locale_ = locale;
    operator delete(v4);
  }
  unsigned int v5 = a1[14].__locale_;
  if (v5)
  {
    a1[15].__locale_ = v5;
    operator delete(v5);
  }
  char v6 = a1[11].__locale_;
  if (v6)
  {
    char v7 = a1[12].__locale_;
    unint64_t v8 = a1[11].__locale_;
    if (v7 == v6)
    {
LABEL_21:
      a1[12].__locale_ = v6;
      operator delete(v8);
      goto LABEL_22;
    }
    while (1)
    {
      if (*((char *)v7 - 1) < 0)
      {
        operator delete(*((void **)v7 - 3));
        if (*((char *)v7 - 25) < 0) {
LABEL_19:
        }
          operator delete(*((void **)v7 - 6));
      }
      else if (*((char *)v7 - 25) < 0)
      {
        goto LABEL_19;
      }
      char v7 = (std::locale::__imp *)((char *)v7 - 48);
      if (v7 == v6)
      {
        unint64_t v8 = a1[11].__locale_;
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  uint64_t v9 = a1[8].__locale_;
  if (v9)
  {
    a1[9].__locale_ = v9;
    operator delete(v9);
  }
  uint64_t v10 = a1[5].__locale_;
  if (v10)
  {
    a1[6].__locale_ = v10;
    operator delete(v10);
  }
  std::locale::~locale(a1 + 2);
  uint64_t v11 = a1[1].__locale_;
  if (v11) {
    (*(void (**)(std::locale::__imp *))(*(void *)v11 + 8))(v11);
  }
  return a1;
}

void std::regex_traits<char>::__lookup_collatename<char *>(unsigned char *__src@<X1>, uint64_t a2@<X0>, unsigned char *a3@<X2>, uint64_t a4@<X8>)
{
  size_t v5 = a3 - __src;
  memset(__dst, 170, sizeof(__dst));
  if ((unint64_t)(a3 - __src) >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v5 <= 0x16)
  {
    __dst[23] = (_BYTE)a3 - (_BYTE)__src;
    uint64_t v9 = __dst;
    if (__src == a3) {
      goto LABEL_9;
    }
LABEL_8:
    memcpy(v9, __src, v5);
    v9 += v5;
    goto LABEL_9;
  }
  uint64_t v10 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v5 | 7) != 0x17) {
    uint64_t v10 = v5 | 7;
  }
  uint64_t v11 = v10 + 1;
  uint64_t v9 = operator new(v10 + 1);
  *(void *)&__dst[8] = v5;
  *(void *)&__dst[16] = v11 | 0x8000000000000000;
  *(void *)long long __dst = v9;
  if (__src != a3) {
    goto LABEL_8;
  }
LABEL_9:
  unsigned char *v9 = 0;
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  if ((__dst[23] & 0x80000000) != 0)
  {
    int v12 = *(char **)__dst;
    if (!*(void *)&__dst[8]) {
      goto LABEL_18;
    }
  }
  else
  {
    if (!__dst[23]) {
      return;
    }
    int v12 = __dst;
  }
  std::__get_collation_name(&v19, v12);
  *(_OWORD *)a4 = *(_OWORD *)&v19.__r_.__value_.__l.__data_;
  unint64_t v13 = v19.__r_.__value_.__r.__words[2];
  *(void *)(a4 + 16) = *((void *)&v19.__r_.__value_.__l + 2);
  unint64_t v14 = HIBYTE(v13);
  if ((v14 & 0x80u) != 0) {
    unint64_t v14 = *(void *)(a4 + 8);
  }
  if (v14) {
    goto LABEL_16;
  }
  if ((__dst[23] & 0x80000000) != 0)
  {
    int v12 = *(char **)__dst;
    if (*(void *)&__dst[8] < 3uLL)
    {
LABEL_24:
      (*(void (**)(std::string *__return_ptr))(**(void **)(a2 + 16) + 32))(&v19);
      if (*(char *)(a4 + 23) < 0) {
        operator delete(*(void **)a4);
      }
      *(std::string *)a4 = v19;
      if (*(char *)(a4 + 23) < 0)
      {
        uint64_t v16 = *(void *)(a4 + 8);
        if (v16 == 1 || v16 == 12)
        {
          if (__dst != (unsigned char *)a4)
          {
            if (__dst[23] >= 0) {
              uint64_t v17 = __dst;
            }
            else {
              uint64_t v17 = *(unsigned char **)__dst;
            }
            if (__dst[23] >= 0) {
              size_t v18 = __dst[23];
            }
            else {
              size_t v18 = *(void *)&__dst[8];
            }
            std::string::__assign_no_alias<false>((void **)a4, v17, v18);
          }
        }
        else
        {
          **(unsigned char **)a4 = 0;
          *(void *)(a4 + 8) = 0;
        }
      }
      else
      {
        int v15 = *(unsigned __int8 *)(a4 + 23);
        if (v15 == 1 || v15 == 12)
        {
          if (__dst != (unsigned char *)a4)
          {
            if ((__dst[23] & 0x80000000) != 0)
            {
              std::string::__assign_no_alias<true>((void *)a4, *(void **)__dst, *(size_t *)&__dst[8]);
            }
            else
            {
              *(_OWORD *)a4 = *(_OWORD *)__dst;
              *(void *)(a4 + 16) = *(void *)&__dst[16];
            }
          }
        }
        else
        {
          *(unsigned char *)a4 = 0;
          *(unsigned char *)(a4 + 23) = 0;
        }
      }
LABEL_16:
      if ((__dst[23] & 0x80000000) == 0) {
        return;
      }
      int v12 = *(char **)__dst;
    }
LABEL_18:
    operator delete(v12);
    return;
  }
  if (__dst[23] < 3u) {
    goto LABEL_24;
  }
}

void sub_1C57FB8B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (*(char *)(v17 + 23) < 0)
  {
    operator delete(*(void **)v17);
    if ((a17 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a17 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::regex_traits<char>::__transform_primary<char *>(unsigned char *__src@<X1>, uint64_t a2@<X0>, unsigned char *a3@<X2>, void *a4@<X8>)
{
  size_t v5 = a3 - __src;
  memset(__dst, 170, sizeof(__dst));
  if ((unint64_t)(a3 - __src) >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v5 <= 0x16)
  {
    HIBYTE(__dst[2]) = (_BYTE)a3 - (_BYTE)__src;
    uint64_t v9 = __dst;
    if (__src == a3) {
      goto LABEL_9;
    }
LABEL_8:
    memcpy(v9, __src, v5);
    uint64_t v9 = (void **)((char *)v9 + v5);
    goto LABEL_9;
  }
  uint64_t v10 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v5 | 7) != 0x17) {
    uint64_t v10 = v5 | 7;
  }
  uint64_t v11 = v10 + 1;
  uint64_t v9 = (void **)operator new(v10 + 1);
  __dst[1] = (void *)v5;
  __dst[2] = (void *)(v11 | 0x8000000000000000);
  __dst[0] = v9;
  if (__src != a3) {
    goto LABEL_8;
  }
LABEL_9:
  *(unsigned char *)uint64_t v9 = 0;
  memset(a4, 170, 24);
  int v12 = (char *)HIBYTE(__dst[2]);
  if (SHIBYTE(__dst[2]) >= 0) {
    unint64_t v13 = __dst;
  }
  else {
    unint64_t v13 = (void **)__dst[0];
  }
  if (SHIBYTE(__dst[2]) < 0) {
    int v12 = (char *)__dst[1];
  }
  (*(void (**)(void, void **, char *))(**(void **)(a2 + 16) + 32))(*(void *)(a2 + 16), v13, &v12[(void)v13]);
  uint64_t v14 = *((unsigned __int8 *)a4 + 23);
  int v15 = (char)v14;
  if ((v14 & 0x80u) != 0) {
    uint64_t v14 = a4[1];
  }
  if (v14 == 1)
  {
LABEL_25:
    if ((SHIBYTE(__dst[2]) & 0x80000000) == 0) {
      return;
    }
    goto LABEL_26;
  }
  if (v14 == 12)
  {
    if (v15 >= 0) {
      uint64_t v16 = a4;
    }
    else {
      uint64_t v16 = (unsigned char *)*a4;
    }
    v16[11] = v16[3];
    if (SHIBYTE(__dst[2]) < 0) {
      goto LABEL_26;
    }
    return;
  }
  if ((v15 & 0x80000000) == 0)
  {
    *(unsigned char *)a4 = 0;
    *((unsigned char *)a4 + 23) = 0;
    goto LABEL_25;
  }
  *(unsigned char *)*a4 = 0;
  a4[1] = 0;
  if (SHIBYTE(__dst[2]) < 0) {
LABEL_26:
  }
    operator delete(__dst[0]);
}

void sub_1C57FBAA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1C8791C90](exception, 5);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_1C57FBB04(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_expression_term<char const*>(uint64_t a1, char *a2, char *a3, uint64_t a4)
{
  unint64_t v4 = a2;
  if (a2 == a3) {
    return v4;
  }
  int v5 = *a2;
  if (v5 == 93) {
    return v4;
  }
  char v6 = (char *)a4;
  int v9 = 0;
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v40 = 0;
  if (a2 + 1 == a3 || v5 != 91)
  {
LABEL_38:
    int v24 = *(_DWORD *)(a1 + 24) & 0x1F0;
    goto LABEL_33;
  }
  int v10 = a2[1];
  if (v10 != 46)
  {
    if (v10 != 58)
    {
      if (v10 == 61)
      {
        char v6 = std::basic_regex<char,std::regex_traits<char>>::__parse_equivalence_class<char const*>(a1, a2 + 2, a3, a4);
        char v11 = 0;
        if ((SHIBYTE(v40) & 0x80000000) == 0) {
          goto LABEL_64;
        }
        goto LABEL_63;
      }
      int v9 = 0;
      goto LABEL_38;
    }
    int v12 = a2 + 2;
    if (a3 - (v4 + 2) >= 2)
    {
      uint64_t v13 = 0;
      uint64_t v14 = (unsigned __int8 *)v4;
      if (v4[2] == 58) {
        goto LABEL_14;
      }
      do
      {
        do
        {
          if (a3 - v4 - 4 == v13) {
            goto LABEL_89;
          }
          uint64_t v14 = (unsigned __int8 *)&v4[++v13];
        }
        while (v4[v13 + 2] != 58);
LABEL_14:
        ;
      }
      while (v14[3] != 93);
      int v15 = &v4[v13 + 2];
      if (v15 != a3)
      {
        int v16 = std::regex_traits<char>::__lookup_classname<char const*>(a1, v12, v15, *(_DWORD *)(a1 + 24) & 1);
        if (!v16) {
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)2>();
        }
        char v11 = 0;
        *((_DWORD *)v6 + 40) |= v16;
        char v6 = &v4[v13 + 4];
        if (SHIBYTE(v40) < 0) {
          goto LABEL_63;
        }
        goto LABEL_64;
      }
    }
LABEL_89:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
  }
  uint64_t v17 = a2 + 2;
  if (a3 - (v4 + 2) < 2) {
    goto LABEL_89;
  }
  uint64_t v18 = a3 - v4 - 4;
  std::string v19 = v4 + 2;
  char v20 = v17 + 1;
  if (*v17 == 46) {
    goto LABEL_23;
  }
  do
  {
    do
    {
      if (!v18) {
        goto LABEL_89;
      }
      --v18;
      std::string v19 = v20;
      int v21 = *v20++;
    }
    while (v21 != 46);
LABEL_23:
    ;
  }
  while (*v20 != 93);
  if (v19 == a3) {
    goto LABEL_89;
  }
  std::regex_traits<char>::__lookup_collatename<char *>(v17, a1, v19, (uint64_t)&v41);
  if (SHIBYTE(v40) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v40 = v42;
  *(_OWORD *)std::vector<std::csub_match> __p = v41;
  uint64_t v22 = (char *)HIBYTE(v42);
  int v9 = SHIBYTE(v42);
  uint64_t v23 = *((void *)&v41 + 1);
  if (v42 < 0) {
    uint64_t v22 = (char *)__p[1];
  }
  if ((unint64_t)(v22 - 1) >= 2) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
  }
  unint64_t v4 = v19 + 2;
  int v24 = *(_DWORD *)(a1 + 24) & 0x1F0;
  if (v42 >= 0) {
    uint64_t v23 = HIBYTE(v42);
  }
  if (v23)
  {
    unsigned __int8 v28 = v4;
    if (v4 == a3) {
      goto LABEL_41;
    }
    goto LABEL_40;
  }
LABEL_33:
  if ((v24 | 0x40) != 0x40)
  {
    LOBYTE(v25) = *v4;
LABEL_57:
    if (v9 < 0)
    {
      int v34 = __p[0];
      __p[1] = (void *)1;
      *(unsigned char *)__p[0] = v25;
      v34[1] = 0;
      unsigned __int8 v28 = v4 + 1;
      if (v4 + 1 == a3) {
        goto LABEL_41;
      }
    }
    else
    {
      HIBYTE(v40) = 1;
      LOWORD(__p[0]) = v25;
      unsigned __int8 v28 = v4 + 1;
      if (v4 + 1 == a3) {
        goto LABEL_41;
      }
    }
    goto LABEL_40;
  }
  int v25 = *v4;
  if (v25 != 92) {
    goto LABEL_57;
  }
  unint64_t v26 = v4 + 1;
  if (v24) {
    size_t v27 = std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<char const*>((std::basic_regex<char> *)a1, v26, a3, (uint64_t *)__p);
  }
  else {
    size_t v27 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<char const*>((std::basic_regex<char> *)a1, (unsigned __int8 *)v26, (unsigned __int8 *)a3, (uint64_t)__p, (uint64_t)v6);
  }
  unsigned __int8 v28 = v27;
  if (v27 == a3)
  {
LABEL_41:
    if (SHIBYTE(v40) < 0)
    {
      if (!__p[1]) {
        goto LABEL_62;
      }
      if (__p[1] != (void *)1)
      {
        unint64_t v30 = (void **)__p[0];
LABEL_61:
        std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:ne180100]((uint64_t)v6, *(char *)v30, *((char *)v30 + 1));
LABEL_62:
        char v11 = 1;
        unint64_t v4 = v28;
        if ((SHIBYTE(v40) & 0x80000000) == 0) {
          goto LABEL_64;
        }
        goto LABEL_63;
      }
      unint64_t v30 = (void **)__p[0];
    }
    else
    {
      if (!HIBYTE(v40)) {
        goto LABEL_62;
      }
      unint64_t v30 = __p;
      if (HIBYTE(v40) != 1) {
        goto LABEL_61;
      }
    }
    std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)v6, *(char *)v30);
    goto LABEL_62;
  }
LABEL_40:
  int v29 = *v28;
  if (v29 == 93) {
    goto LABEL_41;
  }
  int v31 = v28 + 1;
  if (v28 + 1 == a3 || v29 != 45 || *v31 == 93) {
    goto LABEL_41;
  }
  long long v41 = 0uLL;
  int64_t v42 = 0;
  unint64_t v4 = v28 + 2;
  if (v28 + 2 == a3 || *v31 != 91 || *v4 != 46)
  {
    if ((v24 | 0x40) == 0x40)
    {
      LODWORD(v31) = *v31;
      if (v31 == 92)
      {
        if (v24) {
          std::regex_traits<char>::char_class_type v32 = std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<char const*>((std::basic_regex<char> *)a1, v28 + 2, a3, (uint64_t *)&v41);
        }
        else {
          std::regex_traits<char>::char_class_type v32 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<char const*>((std::basic_regex<char> *)a1, (unsigned __int8 *)v28 + 2, (unsigned __int8 *)a3, (uint64_t)&v41, (uint64_t)v6);
        }
        goto LABEL_79;
      }
    }
    else
    {
      LOBYTE(v31) = *v31;
    }
    HIBYTE(v42) = 1;
    LOWORD(v41) = v31;
    goto LABEL_80;
  }
  std::regex_traits<char>::char_class_type v32 = std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<char const*>(a1, v28 + 3, a3, (uint64_t)&v41);
LABEL_79:
  unint64_t v4 = v32;
LABEL_80:
  *(_OWORD *)uint64_t v37 = *(_OWORD *)__p;
  uint64_t v38 = v40;
  __p[1] = 0;
  uint64_t v40 = 0;
  __p[0] = 0;
  *(_OWORD *)xpc_object_t v35 = v41;
  uint64_t v36 = v42;
  long long v41 = 0uLL;
  int64_t v42 = 0;
  std::__bracket_expression<char,std::regex_traits<char>>::__add_range[abi:ne180100]((uint64_t)v6, (char *)v37, (uint64_t)v35);
  if (SHIBYTE(v36) < 0)
  {
    operator delete(v35[0]);
    if ((SHIBYTE(v38) & 0x80000000) == 0)
    {
LABEL_82:
      if ((SHIBYTE(v42) & 0x80000000) == 0) {
        goto LABEL_83;
      }
LABEL_87:
      operator delete((void *)v41);
      char v11 = 1;
      if (SHIBYTE(v40) < 0) {
        goto LABEL_63;
      }
      goto LABEL_64;
    }
  }
  else if ((SHIBYTE(v38) & 0x80000000) == 0)
  {
    goto LABEL_82;
  }
  operator delete(v37[0]);
  if (SHIBYTE(v42) < 0) {
    goto LABEL_87;
  }
LABEL_83:
  char v11 = 1;
  if (SHIBYTE(v40) < 0) {
LABEL_63:
  }
    operator delete(__p[0]);
LABEL_64:
  if (v11) {
    return v4;
  }
  return v6;
}

void sub_1C57FC020(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (*(char *)(v28 - 49) < 0)
  {
    operator delete(*(void **)(v28 - 72));
    if (a28 < 0)
    {
LABEL_5:
      operator delete(__p);
      _Unwind_Resume(a1);
    }
  }
  else if (a28 < 0)
  {
    goto LABEL_5;
  }
  _Unwind_Resume(a1);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_equivalence_class<char const*>(uint64_t a1, char *__src, char *a3, uint64_t a4)
{
  if (a3 - __src < 2 || a3 - 1 == __src) {
    goto LABEL_39;
  }
  uint64_t v7 = 0;
  unint64_t v8 = __src;
  if (*__src != 61) {
    goto LABEL_5;
  }
LABEL_4:
  if (v8[1] != 93)
  {
LABEL_5:
    while (a3 - __src - 2 != v7)
    {
      unint64_t v8 = &__src[++v7];
      if (__src[v7] == 61) {
        goto LABEL_4;
      }
    }
LABEL_39:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
  }
  if (&__src[v7] == a3) {
    goto LABEL_39;
  }
  memset(v18, 170, sizeof(v18));
  std::regex_traits<char>::__lookup_collatename<char *>(__src, a1, &__src[v7], (uint64_t)v18);
  if ((SHIBYTE(v18[2]) & 0x80000000) == 0)
  {
    int v9 = (char *)HIBYTE(v18[2]);
    if (HIBYTE(v18[2]))
    {
      memset(__p, 170, sizeof(__p));
      int v10 = v18;
      goto LABEL_14;
    }
LABEL_40:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
  }
  int v9 = (char *)v18[1];
  if (!v18[1]) {
    goto LABEL_40;
  }
  memset(__p, 170, sizeof(__p));
  int v10 = (void **)v18[0];
LABEL_14:
  std::regex_traits<char>::__transform_primary<std::__wrap_iter<char *>>(a1, (uint64_t)v10, &v9[(void)v10], (unsigned char **)__p);
  if (SHIBYTE(__p[2]) < 0)
  {
    if (__p[1])
    {
LABEL_16:
      unint64_t v11 = *(void *)(a4 + 144);
      if (v11 >= *(void *)(a4 + 152))
      {
        *(void *)(a4 + 144) = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)(a4 + 136), (uint64_t)__p);
        if (SHIBYTE(__p[2]) < 0) {
          goto LABEL_37;
        }
      }
      else
      {
        if ((HIBYTE(__p[2]) & 0x80) != 0)
        {
          std::string::__init_copy_ctor_external(*(std::string **)(a4 + 144), (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
        }
        else
        {
          long long v12 = *(_OWORD *)__p;
          *(void **)(v11 + 16) = __p[2];
          *(_OWORD *)unint64_t v11 = v12;
        }
        *(void *)(a4 + 144) = v11 + 24;
        *(void *)(a4 + 144) = v11 + 24;
        if (SHIBYTE(__p[2]) < 0) {
          goto LABEL_37;
        }
      }
      goto LABEL_33;
    }
  }
  else if (HIBYTE(__p[2]))
  {
    goto LABEL_16;
  }
  uint64_t v13 = (void *)HIBYTE(v18[2]);
  if (SHIBYTE(v18[2]) < 0) {
    uint64_t v13 = v18[1];
  }
  if (v13 == (void *)2)
  {
    int v15 = v18;
    if (SHIBYTE(v18[2]) < 0) {
      int v15 = (void **)v18[0];
    }
    std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:ne180100](a4, *(char *)v15, *((char *)v15 + 1));
  }
  else
  {
    if (v13 != (void *)1) {
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
    }
    uint64_t v14 = v18;
    if (SHIBYTE(v18[2]) < 0) {
      uint64_t v14 = (void **)v18[0];
    }
    std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](a4, *(char *)v14);
  }
  if (SHIBYTE(__p[2]) < 0)
  {
LABEL_37:
    operator delete(__p[0]);
    if (SHIBYTE(v18[2]) < 0) {
      goto LABEL_38;
    }
    return &__src[v7 + 2];
  }
LABEL_33:
  if (SHIBYTE(v18[2]) < 0) {
LABEL_38:
  }
    operator delete(v18[0]);
  return &__src[v7 + 2];
}

void sub_1C57FC2EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  *(void *)(v20 + 144) = v21;
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<char const*>(uint64_t a1, char *__src, char *a3, uint64_t a4)
{
  if (a3 - __src < 2 || a3 - 1 == __src) {
    goto LABEL_15;
  }
  uint64_t v6 = 0;
  uint64_t v7 = __src;
  if (*__src != 46) {
    goto LABEL_5;
  }
LABEL_4:
  if (v7[1] != 93)
  {
LABEL_5:
    while (a3 - __src - 2 != v6)
    {
      uint64_t v7 = &__src[++v6];
      if (__src[v6] == 46) {
        goto LABEL_4;
      }
    }
LABEL_15:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
  }
  if (&__src[v6] == a3) {
    goto LABEL_15;
  }
  std::regex_traits<char>::__lookup_collatename<char *>(__src, a1, &__src[v6], (uint64_t)&v11);
  if (*(char *)(a4 + 23) < 0) {
    operator delete(*(void **)a4);
  }
  *(_OWORD *)a4 = v11;
  unint64_t v8 = v12;
  *(void *)(a4 + 16) = v12;
  unint64_t v9 = HIBYTE(v8);
  if ((v9 & 0x80u) != 0) {
    unint64_t v9 = *(void *)(a4 + 8);
  }
  if (v9 - 1 >= 2) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
  }
  return &__src[v6 + 2];
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<char const*>(std::basic_regex<char> *a1, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t a4, uint64_t a5)
{
  if (a2 == a3) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  }
  switch(*a2)
  {
    case 'D':
      *(_DWORD *)(a5 + 164) |= 0x400u;
      uint64_t result = a2 + 1;
      break;
    case 'E':
    case 'F':
    case 'G':
    case 'H':
    case 'I':
    case 'J':
    case 'K':
    case 'L':
    case 'M':
    case 'N':
    case 'O':
    case 'P':
    case 'Q':
    case 'R':
    case 'T':
    case 'U':
    case 'V':
    case 'X':
    case 'Y':
    case 'Z':
    case '[':
    case '\\':
    case ']':
    case '^':
    case '_':
    case 'a':
    case 'c':
    case 'e':
    case 'f':
    case 'g':
    case 'h':
    case 'i':
    case 'j':
    case 'k':
    case 'l':
    case 'm':
    case 'n':
    case 'o':
    case 'p':
    case 'q':
    case 'r':
    case 't':
    case 'u':
    case 'v':
      goto LABEL_8;
    case 'S':
      *(_DWORD *)(a5 + 164) |= 0x4000u;
      uint64_t result = a2 + 1;
      break;
    case 'W':
      *(_DWORD *)(a5 + 164) |= 0x500u;
      std::__bracket_expression<char,std::regex_traits<char>>::__add_neg_char[abi:ne180100](a5, 95);
      uint64_t result = a2 + 1;
      break;
    case 'b':
      if (*(char *)(a4 + 23) < 0)
      {
        *(void *)(a4 + 8) = 1;
        a4 = *(void *)a4;
      }
      else
      {
        *(unsigned char *)(a4 + 23) = 1;
      }
      *(_WORD *)a4 = 8;
      uint64_t result = a2 + 1;
      break;
    case 'd':
      *(_DWORD *)(a5 + 160) |= 0x400u;
      uint64_t result = a2 + 1;
      break;
    case 's':
      *(_DWORD *)(a5 + 160) |= 0x4000u;
      uint64_t result = a2 + 1;
      break;
    case 'w':
      *(_DWORD *)(a5 + 160) |= 0x500u;
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](a5, 95);
      uint64_t result = a2 + 1;
      break;
    default:
      if (*a2)
      {
LABEL_8:
        uint64_t result = std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<char const*>(a1, a2, a3, (uint64_t *)a4);
      }
      else
      {
        if (*(char *)(a4 + 23) < 0)
        {
          *(void *)(a4 + 8) = 1;
          a4 = *(void *)a4;
        }
        else
        {
          *(unsigned char *)(a4 + 23) = 1;
        }
        *(unsigned char *)a4 = 0;
        *(unsigned char *)(a4 + 1) = 0;
        uint64_t result = a2 + 1;
      }
      break;
  }
  return result;
}

std::basic_regex<char>::value_type *std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<char const*>(std::basic_regex<char> *a1, std::basic_regex<char>::value_type *a2, std::basic_regex<char>::value_type *a3, uint64_t *a4)
{
  if (a2 == a3) {
LABEL_70:
  }
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  std::basic_regex<char>::value_type v5 = *a2;
  switch(*a2)
  {
    case '""':
    case '/':
    case '\\':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(unsigned char *)a4 = v5;
        *((unsigned char *)a4 + 1) = 0;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v5);
        return a2 + 1;
      }
    case 'a':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 7;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 7);
        return a2 + 1;
      }
    case 'b':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 8;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 8);
        return a2 + 1;
      }
    case 'f':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 12;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 12);
        return a2 + 1;
      }
    case 'n':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 10;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 10);
        return a2 + 1;
      }
    case 'r':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 13;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 13);
        return a2 + 1;
      }
    case 't':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 9;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 9);
        return a2 + 1;
      }
    case 'v':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 11;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 11);
        return a2 + 1;
      }
    default:
      if ((v5 & 0xF8) != 0x30) {
        goto LABEL_70;
      }
      std::basic_regex<char>::value_type v7 = *a2 - 48;
      unint64_t v8 = a2 + 1;
      if (a2 + 1 == a3)
      {
        unint64_t v8 = a3;
LABEL_42:
        if (a4) {
          goto LABEL_43;
        }
LABEL_69:
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v7);
        return v8;
      }
      if ((*v8 & 0xF8) != 0x30) {
        goto LABEL_42;
      }
      std::basic_regex<char>::value_type v7 = *v8 + 8 * v7 - 48;
      if (a2 + 2 == a3)
      {
        unint64_t v8 = a3;
        if (a4) {
          goto LABEL_43;
        }
        goto LABEL_69;
      }
      std::basic_regex<char>::value_type v9 = a2[2];
      int v10 = v9 & 0xF8;
      std::basic_regex<char>::value_type v11 = v9 + 8 * v7 - 48;
      if (v10 == 48) {
        unint64_t v8 = a2 + 3;
      }
      else {
        unint64_t v8 = a2 + 2;
      }
      if (v10 == 48) {
        std::basic_regex<char>::value_type v7 = v11;
      }
      if (!a4) {
        goto LABEL_69;
      }
LABEL_43:
      if (*((char *)a4 + 23) < 0)
      {
        a4[1] = 1;
        a4 = (uint64_t *)*a4;
      }
      else
      {
        *((unsigned char *)a4 + 23) = 1;
      }
      *(unsigned char *)a4 = v7;
      *((unsigned char *)a4 + 1) = 0;
      return v8;
  }
}

void std::__bracket_expression<char,std::regex_traits<char>>::__add_range[abi:ne180100](uint64_t a1, char *a2, uint64_t a3)
{
  uint64_t v3 = a3;
  uint64_t v4 = (uint64_t)a2;
  if (!*(unsigned char *)(a1 + 170))
  {
    uint64_t v16 = a2[23];
    if (a2[23] < 0)
    {
      if (*((void *)a2 + 1) != 1) {
        goto LABEL_74;
      }
    }
    else if (v16 != 1)
    {
LABEL_74:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)9>();
    }
    if (*(char *)(a3 + 23) < 0)
    {
      if (*(void *)(a3 + 8) != 1) {
        goto LABEL_74;
      }
    }
    else if (*(unsigned char *)(a3 + 23) != 1)
    {
      goto LABEL_74;
    }
    if (!*(unsigned char *)(a1 + 169))
    {
LABEL_67:
      *(_OWORD *)std::vector<std::csub_match> __p = *(_OWORD *)v4;
      uint64_t v49 = *(void *)(v4 + 16);
      *(void *)(v4 + 8) = 0;
      *(void *)(v4 + 16) = 0;
      *(void *)uint64_t v4 = 0;
      *(_OWORD *)unint64_t v50 = *(_OWORD *)v3;
      uint64_t v51 = *(void *)(v3 + 16);
      *(void *)(v3 + 8) = 0;
      *(void *)(v3 + 16) = 0;
      *(void *)uint64_t v3 = 0;
      unint64_t v39 = *(void *)(a1 + 96);
      if (v39 < *(void *)(a1 + 104))
      {
        long long v40 = *(_OWORD *)__p;
        *(void *)(v39 + 16) = v49;
        *(_OWORD *)unint64_t v39 = v40;
        __p[1] = 0;
        uint64_t v49 = 0;
        __p[0] = 0;
        uint64_t v41 = v51;
        *(_OWORD *)(v39 + 24) = *(_OWORD *)v50;
        *(void *)(v39 + 40) = v41;
        v50[1] = 0;
        uint64_t v51 = 0;
        v50[0] = 0;
        *(void *)(a1 + 96) = v39 + 48;
        if (SHIBYTE(v49) < 0) {
          goto LABEL_69;
        }
        return;
      }
      int64_t v42 = std::vector<std::pair<std::string,std::string>>::__push_back_slow_path<std::pair<std::string,std::string>>((void **)(a1 + 88), (uint64_t)__p);
      int v43 = SHIBYTE(v51);
      *(void *)(a1 + 96) = v42;
      if ((v43 & 0x80000000) == 0)
      {
        if (SHIBYTE(v49) < 0) {
          goto LABEL_69;
        }
        return;
      }
      operator delete(v50[0]);
      if ((SHIBYTE(v49) & 0x80000000) == 0) {
        return;
      }
LABEL_69:
      operator delete(__p[0]);
      return;
    }
    int v34 = a2;
    if ((v16 & 0x80) != 0) {
      int v34 = *(char **)a2;
    }
    char v35 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), *v34);
    if (*(char *)(v4 + 23) < 0)
    {
      **(unsigned char **)uint64_t v4 = v35;
      uint64_t v36 = (char *)v3;
      if ((*(char *)(v3 + 23) & 0x80000000) == 0) {
        goto LABEL_64;
      }
    }
    else
    {
      *(unsigned char *)uint64_t v4 = v35;
      uint64_t v36 = (char *)v3;
      if ((*(char *)(v3 + 23) & 0x80000000) == 0)
      {
LABEL_64:
        char v37 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), *v36);
        uint64_t v38 = (unsigned char *)v3;
        if (*(char *)(v3 + 23) < 0) {
          uint64_t v38 = *(unsigned char **)v3;
        }
        unsigned char *v38 = v37;
        goto LABEL_67;
      }
    }
    uint64_t v36 = *(char **)v3;
    goto LABEL_64;
  }
  if (*(unsigned char *)(a1 + 169))
  {
    for (unint64_t i = 0; ; ++i)
    {
      unint64_t v7 = *(unsigned __int8 *)(v4 + 23);
      if (*(char *)(v4 + 23) < 0)
      {
        if (i >= *(void *)(v4 + 8))
        {
LABEL_13:
          for (unint64_t j = 0; ; ++j)
          {
            unint64_t v12 = *(unsigned __int8 *)(v3 + 23);
            if (*(char *)(v3 + 23) < 0)
            {
              if (j >= *(void *)(v3 + 8)) {
                goto LABEL_44;
              }
            }
            else if (j >= v12)
            {
              goto LABEL_44;
            }
            uint64_t v13 = v3;
            if ((v12 & 0x80) != 0) {
              uint64_t v13 = *(void *)v3;
            }
            char v14 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), *(char *)(v13 + j));
            uint64_t v15 = v3;
            if (*(char *)(v3 + 23) < 0) {
              uint64_t v15 = *(void *)v3;
            }
            *(unsigned char *)(v15 + j) = v14;
          }
        }
      }
      else if (i >= v7)
      {
        goto LABEL_13;
      }
      uint64_t v8 = v4;
      if ((v7 & 0x80) != 0) {
        uint64_t v8 = *(void *)v4;
      }
      char v9 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), *(char *)(v8 + i));
      uint64_t v10 = v4;
      if (*(char *)(v4 + 23) < 0) {
        uint64_t v10 = *(void *)v4;
      }
      *(unsigned char *)(v10 + i) = v9;
    }
  }
  for (unint64_t k = 0; ; ++k)
  {
    unint64_t v19 = a2[23];
    if (a2[23] < 0) {
      break;
    }
    if (k >= v19) {
      goto LABEL_35;
    }
LABEL_33:
    uint64_t v18 = a2;
    if ((v19 & 0x80) != 0)
    {
      uint64_t v18 = *(char **)a2;
      uint64_t v20 = *(char **)a2;
    }
    else
    {
      uint64_t v20 = a2;
    }
    v20[k] = v18[k];
  }
  if (k < *((void *)a2 + 1)) {
    goto LABEL_33;
  }
LABEL_35:
  for (unint64_t m = 0; ; ++m)
  {
    unint64_t v23 = *(unsigned __int8 *)(a3 + 23);
    if (*(char *)(a3 + 23) < 0) {
      break;
    }
    if (m >= v23) {
      goto LABEL_44;
    }
LABEL_42:
    uint64_t v22 = a3;
    if ((v23 & 0x80) != 0)
    {
      uint64_t v22 = *(void *)a3;
      uint64_t v24 = *(void *)a3;
    }
    else
    {
      uint64_t v24 = a3;
    }
    *(unsigned char *)(v24 + m) = *(unsigned char *)(v22 + m);
  }
  if (m < *(void *)(a3 + 8)) {
    goto LABEL_42;
  }
LABEL_44:
  if (*(char *)(v4 + 23) < 0)
  {
    uint64_t v26 = v4;
    uint64_t v4 = *(void *)v4;
    uint64_t v25 = *(void *)(v26 + 8);
  }
  else
  {
    uint64_t v25 = *(unsigned __int8 *)(v4 + 23);
  }
  std::regex_traits<char>::transform<std::__wrap_iter<char *>>(a1 + 16, v4, (char *)(v4 + v25));
  if (*(char *)(v3 + 23) < 0)
  {
    uint64_t v28 = v3;
    uint64_t v3 = *(void *)v3;
    uint64_t v27 = *(void *)(v28 + 8);
  }
  else
  {
    uint64_t v27 = *(unsigned __int8 *)(v3 + 23);
  }
  std::regex_traits<char>::transform<std::__wrap_iter<char *>>(a1 + 16, v3, (char *)(v3 + v27));
  *(_OWORD *)std::vector<std::csub_match> __p = *(_OWORD *)v46;
  uint64_t v49 = v47;
  *(_OWORD *)unint64_t v50 = *(_OWORD *)v44;
  uint64_t v51 = v45;
  unint64_t v29 = *(void *)(a1 + 96);
  if (v29 >= *(void *)(a1 + 104))
  {
    std::regex_traits<char>::char_class_type v32 = std::vector<std::pair<std::string,std::string>>::__push_back_slow_path<std::pair<std::string,std::string>>((void **)(a1 + 88), (uint64_t)__p);
    int v33 = SHIBYTE(v51);
    *(void *)(a1 + 96) = v32;
    if (v33 < 0)
    {
      operator delete(v50[0]);
      if ((SHIBYTE(v49) & 0x80000000) == 0) {
        return;
      }
    }
    else if ((SHIBYTE(v49) & 0x80000000) == 0)
    {
      return;
    }
    goto LABEL_69;
  }
  long long v30 = *(_OWORD *)__p;
  *(void *)(v29 + 16) = v49;
  *(_OWORD *)unint64_t v29 = v30;
  __p[1] = 0;
  uint64_t v49 = 0;
  __p[0] = 0;
  uint64_t v31 = v51;
  *(_OWORD *)(v29 + 24) = *(_OWORD *)v50;
  *(void *)(v29 + 40) = v31;
  v50[1] = 0;
  uint64_t v51 = 0;
  v50[0] = 0;
  *(void *)(a1 + 96) = v29 + 48;
  if (SHIBYTE(v49) < 0) {
    goto LABEL_69;
  }
}

void sub_1C57FD194(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  std::pair<std::string,std::string>::~pair((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1C57FD1A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(a1);
}

void std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:ne180100](uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 169))
  {
    unsigned __int8 v5 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), a2);
    __int16 v6 = v5 | (unsigned __int16)((*(unsigned __int16 (**)(void, uint64_t))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), a3) << 8);
    uint64_t v8 = *(char **)(a1 + 120);
    unint64_t v7 = *(void *)(a1 + 128);
    if ((unint64_t)v8 >= v7)
    {
      char v9 = (char **)(a1 + 112);
      uint64_t v10 = *(char **)(a1 + 112);
      uint64_t v11 = v8 - v10;
      if (v8 - v10 > -3)
      {
        uint64_t v12 = v11 >> 1;
        unint64_t v13 = v7 - (void)v10;
        if (v13 <= (v11 >> 1) + 1) {
          unint64_t v14 = v12 + 1;
        }
        else {
          unint64_t v14 = v13;
        }
        if (v13 >= 0x7FFFFFFFFFFFFFFELL) {
          uint64_t v15 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          uint64_t v15 = v14;
        }
        if (!v15)
        {
          uint64_t v16 = 0;
          uint64_t v17 = (_WORD *)(2 * v12);
          uint64_t v18 = 0;
          *(_WORD *)(2 * v12) = v6;
          uint64_t v19 = 2 * v12 + 2;
          uint64_t v20 = (char *)(v8 - v10);
          if (v8 == v10) {
            goto LABEL_64;
          }
LABEL_30:
          unint64_t v30 = (unint64_t)(v20 - 2);
          if (v30 < 0x1E) {
            goto LABEL_71;
          }
          if (v8 - v16 - (v11 & 0xFFFFFFFFFFFFFFFELL) < 0x20) {
            goto LABEL_71;
          }
          uint64_t v31 = (v30 >> 1) + 1;
          unint64_t v32 = 2 * (v31 & 0xFFFFFFFFFFFFFFF0);
          int v33 = &v8[-v32];
          uint64_t v17 = (_WORD *)((char *)v17 - v32);
          int v34 = &v16[2 * v12 - 16];
          char v35 = v8 - 16;
          unint64_t v36 = v31 & 0xFFFFFFFFFFFFFFF0;
          do
          {
            long long v37 = *(_OWORD *)v35;
            *(v34 - 1) = *((_OWORD *)v35 - 1);
            _OWORD *v34 = v37;
            v34 -= 2;
            v35 -= 32;
            v36 -= 16;
          }
          while (v36);
          uint64_t v8 = v33;
          if (v31 != (v31 & 0xFFFFFFFFFFFFFFF0))
          {
LABEL_71:
            do
            {
              __int16 v38 = *((_WORD *)v8 - 1);
              v8 -= 2;
              *--uint64_t v17 = v38;
            }
            while (v8 != v10);
          }
LABEL_63:
          uint64_t v8 = *v9;
          goto LABEL_64;
        }
        if ((v15 & 0x8000000000000000) == 0)
        {
          uint64_t v16 = operator new(2 * v15);
          uint64_t v17 = &v16[2 * v12];
          uint64_t v18 = &v16[2 * v15];
          *uint64_t v17 = v6;
          uint64_t v19 = (uint64_t)(v17 + 1);
          uint64_t v20 = (char *)(v8 - v10);
          if (v8 == v10) {
            goto LABEL_64;
          }
          goto LABEL_30;
        }
LABEL_68:
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
LABEL_67:
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
LABEL_28:
    *(_WORD *)uint64_t v8 = v6;
    uint64_t v19 = (uint64_t)(v8 + 2);
    goto LABEL_66;
  }
  char v9 = (char **)(a1 + 112);
  __int16 v6 = a2 | (unsigned __int16)((_WORD)a3 << 8);
  uint64_t v8 = *(char **)(a1 + 120);
  unint64_t v21 = *(void *)(a1 + 128);
  if (*(unsigned char *)(a1 + 170))
  {
    if ((unint64_t)v8 < v21) {
      goto LABEL_28;
    }
    uint64_t v22 = *v9;
    uint64_t v23 = v8 - *v9;
    if (v23 <= -3) {
      goto LABEL_67;
    }
    uint64_t v24 = v23 >> 1;
    unint64_t v25 = v21 - (void)v22;
    if (v25 <= (v23 >> 1) + 1) {
      unint64_t v26 = v24 + 1;
    }
    else {
      unint64_t v26 = v25;
    }
    if (v25 >= 0x7FFFFFFFFFFFFFFELL) {
      uint64_t v27 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v27 = v26;
    }
    if (v27)
    {
      if (v27 < 0) {
        goto LABEL_68;
      }
      uint64_t v28 = operator new(2 * v27);
      uint64_t v17 = &v28[2 * v24];
      uint64_t v18 = &v28[2 * v27];
      *uint64_t v17 = v6;
      uint64_t v19 = (uint64_t)(v17 + 1);
      unint64_t v29 = (char *)(v8 - v22);
      if (v8 == v22) {
        goto LABEL_64;
      }
    }
    else
    {
      uint64_t v28 = 0;
      uint64_t v17 = (_WORD *)(2 * v24);
      uint64_t v18 = 0;
      *(_WORD *)(2 * v24) = v6;
      uint64_t v19 = 2 * v24 + 2;
      unint64_t v29 = (char *)(v8 - v22);
      if (v8 == v22) {
        goto LABEL_64;
      }
    }
    unint64_t v47 = (unint64_t)(v29 - 2);
    if (v47 < 0x1E) {
      goto LABEL_72;
    }
    if ((unint64_t)(v8 - &v28[v23 & 0xFFFFFFFFFFFFFFFELL]) < 0x20) {
      goto LABEL_72;
    }
    uint64_t v48 = (v47 >> 1) + 1;
    unint64_t v49 = 2 * (v48 & 0xFFFFFFFFFFFFFFF0);
    unint64_t v50 = &v8[-v49];
    uint64_t v17 = (_WORD *)((char *)v17 - v49);
    uint64_t v51 = &v28[2 * v24 - 16];
    size_t v52 = v8 - 16;
    unint64_t v53 = v48 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      long long v54 = *(_OWORD *)v52;
      *(v51 - 1) = *((_OWORD *)v52 - 1);
      *uint64_t v51 = v54;
      v51 -= 2;
      v52 -= 32;
      v53 -= 16;
    }
    while (v53);
    uint64_t v8 = v50;
    if (v48 != (v48 & 0xFFFFFFFFFFFFFFF0))
    {
LABEL_72:
      do
      {
        __int16 v55 = *((_WORD *)v8 - 1);
        v8 -= 2;
        *--uint64_t v17 = v55;
      }
      while (v8 != v22);
    }
    goto LABEL_63;
  }
  if ((unint64_t)v8 < v21) {
    goto LABEL_28;
  }
  unint64_t v39 = *v9;
  uint64_t v40 = v8 - *v9;
  if (v40 <= -3) {
    goto LABEL_67;
  }
  uint64_t v41 = v40 >> 1;
  unint64_t v42 = v21 - (void)v39;
  if (v42 <= (v40 >> 1) + 1) {
    unint64_t v43 = v41 + 1;
  }
  else {
    unint64_t v43 = v42;
  }
  if (v42 >= 0x7FFFFFFFFFFFFFFELL) {
    uint64_t v44 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    uint64_t v44 = v43;
  }
  if (!v44)
  {
    uint64_t v45 = 0;
    uint64_t v17 = (_WORD *)(2 * v41);
    uint64_t v18 = 0;
    *(_WORD *)(2 * v41) = v6;
    uint64_t v19 = 2 * v41 + 2;
    uint64_t v46 = (char *)(v8 - v39);
    if (v8 == v39) {
      goto LABEL_64;
    }
    goto LABEL_57;
  }
  if (v44 < 0) {
    goto LABEL_68;
  }
  uint64_t v45 = operator new(2 * v44);
  uint64_t v17 = &v45[2 * v41];
  uint64_t v18 = &v45[2 * v44];
  *uint64_t v17 = v6;
  uint64_t v19 = (uint64_t)(v17 + 1);
  uint64_t v46 = (char *)(v8 - v39);
  if (v8 != v39)
  {
LABEL_57:
    unint64_t v56 = (unint64_t)(v46 - 2);
    if (v56 < 0x1E) {
      goto LABEL_73;
    }
    if ((unint64_t)(v8 - &v45[v40 & 0xFFFFFFFFFFFFFFFELL]) < 0x20) {
      goto LABEL_73;
    }
    uint64_t v57 = (v56 >> 1) + 1;
    unint64_t v58 = 2 * (v57 & 0xFFFFFFFFFFFFFFF0);
    int v59 = &v8[-v58];
    uint64_t v17 = (_WORD *)((char *)v17 - v58);
    unint64_t v60 = &v45[2 * v41 - 16];
    size_t v61 = v8 - 16;
    unint64_t v62 = v57 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      long long v63 = *(_OWORD *)v61;
      *(v60 - 1) = *((_OWORD *)v61 - 1);
      _OWORD *v60 = v63;
      v60 -= 2;
      v61 -= 32;
      v62 -= 16;
    }
    while (v62);
    uint64_t v8 = v59;
    if (v57 != (v57 & 0xFFFFFFFFFFFFFFF0))
    {
LABEL_73:
      do
      {
        __int16 v64 = *((_WORD *)v8 - 1);
        v8 -= 2;
        *--uint64_t v17 = v64;
      }
      while (v8 != v39);
    }
    goto LABEL_63;
  }
LABEL_64:
  *(void *)(a1 + 112) = v17;
  *(void *)(a1 + 120) = v19;
  *(void *)(a1 + 128) = v18;
  if (v8) {
    operator delete(v8);
  }
LABEL_66:
  *(void *)(a1 + 120) = v19;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1C8791C90](exception, 1);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_1C57FD624(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::regex_traits<char>::__transform_primary<std::__wrap_iter<char *>>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, unsigned char **a4@<X8>)
{
  unint64_t v5 = (unint64_t)&a3[-a2];
  memset(__p, 170, sizeof(__p));
  if ((unint64_t)&a3[-a2] >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v5 > 0x16)
  {
    uint64_t v16 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17) {
      uint64_t v16 = v5 | 7;
    }
    uint64_t v17 = v16 + 1;
    char v9 = operator new(v16 + 1);
    __p[1] = (void *)v5;
    __p[2] = (void *)(v17 | 0x8000000000000000);
    __p[0] = v9;
    if ((char *)a2 != a3) {
      goto LABEL_4;
    }
LABEL_13:
    uint64_t v10 = v9;
    goto LABEL_16;
  }
  HIBYTE(__p[2]) = (_BYTE)a3 - a2;
  char v9 = __p;
  if ((char *)a2 == a3) {
    goto LABEL_13;
  }
LABEL_4:
  if (v5 < 0x20 || (unint64_t)v9 - a2 < 0x20)
  {
    uint64_t v10 = v9;
    uint64_t v11 = (char *)a2;
  }
  else
  {
    uint64_t v10 = (char *)v9 + (v5 & 0xFFFFFFFFFFFFFFE0);
    uint64_t v11 = (char *)(a2 + (v5 & 0xFFFFFFFFFFFFFFE0));
    uint64_t v12 = (long long *)(a2 + 16);
    unint64_t v13 = v9 + 1;
    unint64_t v14 = v5 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      long long v15 = *v12;
      *(v13 - 1) = *(v12 - 1);
      *unint64_t v13 = v15;
      v12 += 2;
      v13 += 2;
      v14 -= 32;
    }
    while (v14);
    if (v5 == (v5 & 0xFFFFFFFFFFFFFFE0)) {
      goto LABEL_16;
    }
  }
  do
  {
    char v18 = *v11++;
    *v10++ = v18;
  }
  while (v11 != a3);
LABEL_16:
  *uint64_t v10 = 0;
  memset(a4, 170, 24);
  uint64_t v19 = (char *)HIBYTE(__p[2]);
  if (SHIBYTE(__p[2]) >= 0) {
    uint64_t v20 = __p;
  }
  else {
    uint64_t v20 = (void **)__p[0];
  }
  if (SHIBYTE(__p[2]) < 0) {
    uint64_t v19 = (char *)__p[1];
  }
  (*(void (**)(void, void **, char *))(**(void **)(a1 + 16) + 32))(*(void *)(a1 + 16), v20, &v19[(void)v20]);
  unint64_t v21 = (unsigned char *)*((unsigned __int8 *)a4 + 23);
  int v22 = (char)v21;
  if ((char)v21 < 0) {
    unint64_t v21 = a4[1];
  }
  if (v21 == (unsigned char *)1) {
    goto LABEL_32;
  }
  if (v21 != (unsigned char *)12)
  {
    if (v22 < 0)
    {
      **a4 = 0;
      a4[1] = 0;
      if ((SHIBYTE(__p[2]) & 0x80000000) == 0) {
        return;
      }
LABEL_35:
      operator delete(__p[0]);
      return;
    }
    *(unsigned char *)a4 = 0;
    *((unsigned char *)a4 + 23) = 0;
LABEL_32:
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0) {
      return;
    }
    goto LABEL_35;
  }
  if (v22 >= 0) {
    uint64_t v23 = a4;
  }
  else {
    uint64_t v23 = *a4;
  }
  v23[11] = v23[3];
  if (SHIBYTE(__p[2]) < 0) {
    goto LABEL_35;
  }
}

void sub_1C57FD844(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)2>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1C8791C90](exception, 2);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_1C57FD8A4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t std::regex_traits<char>::__lookup_classname<char const*>(uint64_t a1, unsigned char *__src, unsigned char *a3, BOOL a4)
{
  size_t v4 = a3 - __src;
  memset(__dst, 170, sizeof(__dst));
  if ((unint64_t)(a3 - __src) >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v4 <= 0x16)
  {
    HIBYTE(__dst[2]) = (_BYTE)a3 - (_BYTE)__src;
    char v9 = __dst;
    if (__src == a3) {
      goto LABEL_9;
    }
LABEL_8:
    memcpy(v9, __src, v4);
    char v9 = (void **)((char *)v9 + v4);
    goto LABEL_9;
  }
  uint64_t v10 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v4 | 7) != 0x17) {
    uint64_t v10 = v4 | 7;
  }
  uint64_t v11 = v10 + 1;
  char v9 = (void **)operator new(v10 + 1);
  __dst[1] = (void *)v4;
  __dst[2] = (void *)(v11 | 0x8000000000000000);
  __dst[0] = v9;
  if (__src != a3) {
    goto LABEL_8;
  }
LABEL_9:
  *(unsigned char *)char v9 = 0;
  uint64_t v12 = (char *)HIBYTE(__dst[2]);
  if (SHIBYTE(__dst[2]) >= 0) {
    unint64_t v13 = __dst;
  }
  else {
    unint64_t v13 = (void **)__dst[0];
  }
  if (SHIBYTE(__dst[2]) < 0) {
    uint64_t v12 = (char *)__dst[1];
  }
  (*(void (**)(void, void **, char *))(**(void **)(a1 + 8) + 48))(*(void *)(a1 + 8), v13, &v12[(void)v13]);
  if (SHIBYTE(__dst[2]) >= 0) {
    unint64_t v14 = (const char *)__dst;
  }
  else {
    unint64_t v14 = (const char *)__dst[0];
  }
  uint64_t classname = std::__get_classname(v14, a4);
  if (SHIBYTE(__dst[2]) < 0) {
    operator delete(__dst[0]);
  }
  return classname;
}

void sub_1C57FDA0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__bracket_expression<char,std::regex_traits<char>>::__add_neg_char[abi:ne180100](uint64_t a1, uint64_t a2)
{
  char v2 = a2;
  if (!*(unsigned char *)(a1 + 169))
  {
    __int16 v6 = (void *)(a1 + 64);
    unint64_t v5 = *(unsigned char **)(a1 + 72);
    unint64_t v16 = *(void *)(a1 + 80);
    if (*(unsigned char *)(a1 + 170))
    {
      if ((unint64_t)v5 < v16) {
        goto LABEL_24;
      }
      uint64_t v17 = (unsigned char *)*v6;
      unint64_t v18 = (unint64_t)&v5[-*v6];
      unint64_t v19 = v18 + 1;
      if ((uint64_t)(v18 + 1) >= 0)
      {
        unint64_t v20 = v16 - (void)v17;
        if (2 * v20 > v19) {
          unint64_t v19 = 2 * v20;
        }
        if (v20 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v21 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v21 = v19;
        }
        if (v21)
        {
          uint64_t v12 = operator new(v21);
          unint64_t v13 = &v12[v18];
          unint64_t v14 = &v12[v21];
          v12[v18] = v2;
          uint64_t v15 = (uint64_t)&v12[v18 + 1];
          if (v5 == v17) {
            goto LABEL_49;
          }
        }
        else
        {
          uint64_t v12 = 0;
          unint64_t v13 = &v5[-*v6];
          unint64_t v14 = 0;
          *(unsigned char *)unint64_t v18 = a2;
          uint64_t v15 = v18 + 1;
          if (v5 == v17) {
            goto LABEL_49;
          }
        }
        if (v18 >= 8 && (unint64_t)(v17 - v12) >= 0x20)
        {
          if (v18 >= 0x20)
          {
            unint64_t v28 = v18 & 0xFFFFFFFFFFFFFFE0;
            __int16 v38 = (long long *)(v5 - 16);
            unint64_t v39 = &v12[v5 - 16 - v17];
            unint64_t v40 = v18 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              long long v41 = *v38;
              *(v39 - 1) = *(v38 - 1);
              _OWORD *v39 = v41;
              v39 -= 2;
              v38 -= 2;
              v40 -= 32;
            }
            while (v40);
            if (v18 == v28) {
              goto LABEL_86;
            }
            if ((v18 & 0x18) == 0)
            {
              v13 -= v28;
              v5 -= v28;
              goto LABEL_80;
            }
          }
          else
          {
            unint64_t v28 = 0;
          }
          v13 -= v18 & 0xFFFFFFFFFFFFFFF8;
          unint64_t v42 = &v5[-v28 - 8];
          unint64_t v43 = &v12[v42 - v17];
          unint64_t v44 = v28 - (v18 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            uint64_t v45 = *(void *)v42;
            v42 -= 8;
            *v43-- = v45;
            v44 += 8;
          }
          while (v44);
          v5 -= v18 & 0xFFFFFFFFFFFFFFF8;
          if (v18 == (v18 & 0xFFFFFFFFFFFFFFF8)) {
            goto LABEL_86;
          }
        }
LABEL_80:
        unint64_t v56 = v13 - 1;
        do
        {
          char v57 = *--v5;
          *v56-- = v57;
        }
        while (v5 != v17);
        goto LABEL_86;
      }
LABEL_89:
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    if ((unint64_t)v5 < v16) {
      goto LABEL_24;
    }
    uint64_t v23 = (unsigned char *)*v6;
    unint64_t v24 = (unint64_t)&v5[-*v6];
    unint64_t v25 = v24 + 1;
    if ((uint64_t)(v24 + 1) < 0) {
      goto LABEL_89;
    }
    unint64_t v26 = v16 - (void)v23;
    if (2 * v26 > v25) {
      unint64_t v25 = 2 * v26;
    }
    if (v26 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v27 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v27 = v25;
    }
    if (v27)
    {
      uint64_t v12 = operator new(v27);
      unint64_t v13 = &v12[v24];
      unint64_t v14 = &v12[v27];
      v12[v24] = v2;
      uint64_t v15 = (uint64_t)&v12[v24 + 1];
      if (v5 == v23)
      {
LABEL_49:
        *(void *)(a1 + 64) = v13;
        *(void *)(a1 + 72) = v15;
        *(void *)(a1 + 80) = v14;
        if (!v5) {
          goto LABEL_88;
        }
        goto LABEL_87;
      }
    }
    else
    {
      uint64_t v12 = 0;
      unint64_t v13 = &v5[-*v6];
      unint64_t v14 = 0;
      *(unsigned char *)unint64_t v24 = a2;
      uint64_t v15 = v24 + 1;
      if (v5 == v23) {
        goto LABEL_49;
      }
    }
    if (v24 >= 8 && (unint64_t)(v23 - v12) >= 0x20)
    {
      if (v24 >= 0x20)
      {
        unint64_t v29 = v24 & 0xFFFFFFFFFFFFFFE0;
        uint64_t v46 = (long long *)(v5 - 16);
        unint64_t v47 = &v12[v5 - 16 - v23];
        unint64_t v48 = v24 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          long long v49 = *v46;
          *(v47 - 1) = *(v46 - 1);
          *unint64_t v47 = v49;
          v47 -= 2;
          v46 -= 2;
          v48 -= 32;
        }
        while (v48);
        if (v24 == v29) {
          goto LABEL_86;
        }
        if ((v24 & 0x18) == 0)
        {
          v13 -= v29;
          v5 -= v29;
          goto LABEL_84;
        }
      }
      else
      {
        unint64_t v29 = 0;
      }
      v13 -= v24 & 0xFFFFFFFFFFFFFFF8;
      unint64_t v50 = &v5[-v29 - 8];
      uint64_t v51 = &v12[v50 - v23];
      unint64_t v52 = v29 - (v24 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        uint64_t v53 = *(void *)v50;
        v50 -= 8;
        *v51-- = v53;
        v52 += 8;
      }
      while (v52);
      v5 -= v24 & 0xFFFFFFFFFFFFFFF8;
      if (v24 == (v24 & 0xFFFFFFFFFFFFFFF8)) {
        goto LABEL_86;
      }
    }
LABEL_84:
    unint64_t v58 = v13 - 1;
    do
    {
      char v59 = *--v5;
      *v58-- = v59;
    }
    while (v5 != v23);
    goto LABEL_86;
  }
  char v2 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), a2);
  unint64_t v5 = *(unsigned char **)(a1 + 72);
  unint64_t v4 = *(void *)(a1 + 80);
  if ((unint64_t)v5 < v4)
  {
LABEL_24:
    unsigned char *v5 = v2;
    uint64_t v15 = (uint64_t)(v5 + 1);
    goto LABEL_88;
  }
  __int16 v6 = (void *)(a1 + 64);
  unint64_t v7 = *(unsigned char **)(a1 + 64);
  unint64_t v8 = v5 - v7;
  uint64_t v9 = v5 - v7 + 1;
  if (v9 < 0) {
    goto LABEL_89;
  }
  unint64_t v10 = v4 - (void)v7;
  if (2 * v10 > v9) {
    uint64_t v9 = 2 * v10;
  }
  if (v10 >= 0x3FFFFFFFFFFFFFFFLL) {
    size_t v11 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    size_t v11 = v9;
  }
  if (v11)
  {
    uint64_t v12 = operator new(v11);
    unint64_t v13 = &v12[v8];
    unint64_t v14 = &v12[v11];
    v12[v8] = v2;
    uint64_t v15 = (uint64_t)&v12[v8 + 1];
    if (v5 == v7) {
      goto LABEL_49;
    }
  }
  else
  {
    uint64_t v12 = 0;
    unint64_t v13 = (char *)(v5 - v7);
    unint64_t v14 = 0;
    *(unsigned char *)unint64_t v8 = v2;
    uint64_t v15 = v8 + 1;
    if (v5 == v7) {
      goto LABEL_49;
    }
  }
  if (v8 < 8 || (unint64_t)(v7 - v12) < 0x20) {
    goto LABEL_76;
  }
  if (v8 < 0x20)
  {
    unint64_t v22 = 0;
    goto LABEL_55;
  }
  unint64_t v22 = v8 & 0xFFFFFFFFFFFFFFE0;
  unint64_t v30 = (long long *)(v5 - 16);
  uint64_t v31 = &v12[v5 - 16 - v7];
  unint64_t v32 = v8 & 0xFFFFFFFFFFFFFFE0;
  do
  {
    long long v33 = *v30;
    *(v31 - 1) = *(v30 - 1);
    *uint64_t v31 = v33;
    v31 -= 2;
    v30 -= 2;
    v32 -= 32;
  }
  while (v32);
  if (v8 != v22)
  {
    if ((v8 & 0x18) == 0)
    {
      v13 -= v22;
      v5 -= v22;
      goto LABEL_76;
    }
LABEL_55:
    v13 -= v8 & 0xFFFFFFFFFFFFFFF8;
    int v34 = &v5[-v22 - 8];
    char v35 = &v12[v34 - v7];
    unint64_t v36 = v22 - (v8 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      uint64_t v37 = *(void *)v34;
      v34 -= 8;
      *v35-- = v37;
      v36 += 8;
    }
    while (v36);
    v5 -= v8 & 0xFFFFFFFFFFFFFFF8;
    if (v8 == (v8 & 0xFFFFFFFFFFFFFFF8)) {
      goto LABEL_86;
    }
LABEL_76:
    long long v54 = v13 - 1;
    do
    {
      char v55 = *--v5;
      *v54-- = v55;
    }
    while (v5 != v7);
  }
LABEL_86:
  unint64_t v5 = (unsigned char *)*v6;
  *(void *)(a1 + 64) = v12;
  *(void *)(a1 + 72) = v15;
  *(void *)(a1 + 80) = v14;
  if (v5) {
LABEL_87:
  }
    operator delete(v5);
LABEL_88:
  *(void *)(a1 + 72) = v15;
}

void std::regex_traits<char>::transform<std::__wrap_iter<char *>>(uint64_t a1, uint64_t a2, char *a3)
{
  unint64_t v3 = (unint64_t)&a3[-a2];
  memset(__p, 170, sizeof(__p));
  if ((unint64_t)&a3[-a2] >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v3 > 0x16)
  {
    uint64_t v14 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17) {
      uint64_t v14 = v3 | 7;
    }
    uint64_t v15 = v14 + 1;
    unint64_t v7 = operator new(v14 + 1);
    __p[1] = (void *)v3;
    __p[2] = (void *)(v15 | 0x8000000000000000);
    __p[0] = v7;
    if ((char *)a2 != a3) {
      goto LABEL_4;
    }
LABEL_13:
    unint64_t v8 = v7;
    goto LABEL_16;
  }
  HIBYTE(__p[2]) = (_BYTE)a3 - a2;
  unint64_t v7 = __p;
  if ((char *)a2 == a3) {
    goto LABEL_13;
  }
LABEL_4:
  if (v3 < 0x20 || (unint64_t)v7 - a2 < 0x20)
  {
    unint64_t v8 = v7;
    uint64_t v9 = (char *)a2;
  }
  else
  {
    unint64_t v8 = (char *)v7 + (v3 & 0xFFFFFFFFFFFFFFE0);
    uint64_t v9 = (char *)(a2 + (v3 & 0xFFFFFFFFFFFFFFE0));
    unint64_t v10 = (long long *)(a2 + 16);
    size_t v11 = v7 + 1;
    unint64_t v12 = v3 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      long long v13 = *v10;
      *(v11 - 1) = *(v10 - 1);
      _OWORD *v11 = v13;
      v10 += 2;
      v11 += 2;
      v12 -= 32;
    }
    while (v12);
    if (v3 == (v3 & 0xFFFFFFFFFFFFFFE0)) {
      goto LABEL_16;
    }
  }
  do
  {
    char v16 = *v9++;
    *v8++ = v16;
  }
  while (v9 != a3);
LABEL_16:
  unsigned char *v8 = 0;
  uint64_t v17 = (char *)HIBYTE(__p[2]);
  if (SHIBYTE(__p[2]) >= 0) {
    unint64_t v18 = __p;
  }
  else {
    unint64_t v18 = (void **)__p[0];
  }
  if (SHIBYTE(__p[2]) < 0) {
    uint64_t v17 = (char *)__p[1];
  }
  (*(void (**)(void, void **, char *))(**(void **)(a1 + 16) + 32))(*(void *)(a1 + 16), v18, &v17[(void)v18]);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
}

void sub_1C57FE058(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)9>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1C8791C90](exception, 9);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_1C57FE0B8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

char *std::vector<std::pair<std::string,std::string>>::__push_back_slow_path<std::pair<std::string,std::string>>(void **a1, uint64_t a2)
{
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[1] - (unsigned char *)*a1) >> 4);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x555555555555555) {
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  }
  if (0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 4) > v4) {
    unint64_t v4 = 0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v6 = 0x555555555555555;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0x555555555555555) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    unint64_t v7 = (char *)operator new(48 * v6);
  }
  else
  {
    unint64_t v7 = 0;
  }
  unint64_t v8 = &v7[48 * v3];
  *((void *)v8 + 2) = *(void *)(a2 + 16);
  *(_OWORD *)unint64_t v8 = *(_OWORD *)a2;
  uint64_t v9 = &v7[48 * v6];
  long long v10 = *(_OWORD *)(a2 + 24);
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(_OWORD *)(v8 + 24) = v10;
  *((void *)v8 + 5) = *(void *)(a2 + 40);
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  size_t v11 = v8 + 48;
  unint64_t v12 = (void **)*a1;
  long long v13 = (void **)a1[1];
  if (v13 != *a1)
  {
    do
    {
      long long v14 = *((_OWORD *)v13 - 3);
      *((void *)v8 - 4) = *(v13 - 4);
      *((_OWORD *)v8 - 3) = v14;
      *(v13 - 5) = 0;
      *(v13 - 4) = 0;
      *(v13 - 6) = 0;
      long long v15 = *(_OWORD *)(v13 - 3);
      *((void *)v8 - 1) = *(v13 - 1);
      *(_OWORD *)(v8 - 24) = v15;
      v8 -= 48;
      *(v13 - 2) = 0;
      *(v13 - 1) = 0;
      *(v13 - 3) = 0;
      v13 -= 6;
    }
    while (v13 != v12);
    long long v13 = (void **)*a1;
    char v16 = (void **)a1[1];
    *a1 = v8;
    a1[1] = v11;
    a1[2] = v9;
    while (1)
    {
      if (v16 == v13) {
        goto LABEL_22;
      }
      if (*((char *)v16 - 1) < 0)
      {
        operator delete(*(v16 - 3));
        if ((*((char *)v16 - 25) & 0x80000000) == 0) {
          goto LABEL_14;
        }
      }
      else if ((*((char *)v16 - 25) & 0x80000000) == 0)
      {
        goto LABEL_14;
      }
      operator delete(*(v16 - 6));
LABEL_14:
      v16 -= 6;
    }
  }
  *a1 = v8;
  a1[1] = v11;
  a1[2] = v9;
LABEL_22:
  if (v13) {
    operator delete(v13);
  }
  return v11;
}

void (__cdecl ***std::__begin_marked_subexpression<char>::~__begin_marked_subexpression(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  char v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

void std::__begin_marked_subexpression<char>::~__begin_marked_subexpression(void (__cdecl ***__p)(std::__owns_one_state<char> *__hidden this))
{
  char v2 = __p[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }

  operator delete(__p);
}

uint64_t std::__begin_marked_subexpression<char>::__exec(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -994;
  *(void *)(*(void *)(a2 + 32) + 24 * (*(_DWORD *)(result + 16) - 1)) = *(void *)(a2 + 16);
  *(void *)(a2 + 80) = *(void *)(result + 8);
  return result;
}

void (__cdecl ***std::__end_marked_subexpression<char>::~__end_marked_subexpression(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  char v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

void std::__end_marked_subexpression<char>::~__end_marked_subexpression(void (__cdecl ***__p)(std::__owns_one_state<char> *__hidden this))
{
  char v2 = __p[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }

  operator delete(__p);
}

uint64_t std::__end_marked_subexpression<char>::__exec(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -994;
  uint64_t v2 = *(void *)(a2 + 32) + 24 * (*(_DWORD *)(result + 16) - 1);
  *(void *)(v2 + 8) = *(void *)(a2 + 16);
  *(unsigned char *)(v2 + 16) = 1;
  *(void *)(a2 + 80) = *(void *)(result + 8);
  return result;
}

void std::basic_regex<char,std::regex_traits<char>>::__push_loop(std::basic_regex<char> *this, size_t __min, size_t __max, std::__owns_one_state<char> *__s, size_t __mexp_begin, size_t __mexp_end, BOOL __greedy)
{
  int v8 = __mexp_end;
  int v9 = __mexp_begin;
  long long v14 = operator new(0x10uLL);
  std::vector<char>::pointer end = this->__end_;
  first = end->__first_;
  v14[1] = first;
  end->__first_ = 0;
  uint64_t v17 = operator new(0x38uLL);
  unsigned int loop_count = this->__loop_count_;
  *((void *)v17 + 1) = __s->__first_;
  *((void *)v17 + 2) = v14;
  *(void *)uint64_t v17 = &unk_1F20F4E50;
  *((void *)v17 + 3) = __min;
  *((void *)v17 + 4) = __max;
  *((_DWORD *)v17 + 10) = loop_count;
  *((_DWORD *)v17 + 11) = v9;
  *((_DWORD *)v17 + 12) = v8;
  *((unsigned char *)v17 + 52) = __greedy;
  __s->__first_ = 0;
  unint64_t v19 = (std::__node<char> *)operator new(0x10uLL);
  v19->__vftable = (std::__node<char>_vtbl *)&unk_1F20F4EE0;
  v19[1].__vftable = (std::__node<char>_vtbl *)v17;
  this->__end_->__first_ = v19;
  this->__end_ = (std::__owns_one_state<char> *)*((void *)v17 + 2);
  __s->__first_ = (std::__node<char> *)v17;
  this->__loop_count_ = loop_count + 1;
}

void sub_1C57FE5B8(_Unwind_Exception *a1)
{
  std::__loop<char>::~__loop(v1);
  _Unwind_Resume(a1);
}

void sub_1C57FE5CC(_Unwind_Exception *a1)
{
  std::__empty_state<char>::~__empty_state(v1);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1C8791C90](exception, 8);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_1C57FE624(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1C8791C90](exception, 7);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_1C57FE67C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void (__cdecl ***std::__loop<char>::~__loop(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_1F20F4EB0;
  uint64_t v2 = a1[2];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  unint64_t v3 = a1[1];
  if (v3) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  }
  return a1;
}

void std::__loop<char>::~__loop(void (__cdecl ***__p)(std::__owns_one_state<char> *__hidden this))
{
  void *__p = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_1F20F4EB0;
  uint64_t v2 = __p[2];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  unint64_t v3 = __p[1];
  if (v3) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  }

  operator delete(__p);
}

uint64_t std::__loop<char>::__exec(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(unsigned int *)(result + 40);
  uint64_t v3 = *(void *)(a2 + 56);
  unint64_t v4 = (unint64_t *)(v3 + 16 * v2);
  if (*(_DWORD *)a2 != -991)
  {
    unint64_t *v4 = 0;
    if (!*(void *)(result + 32))
    {
      *(_DWORD *)a2 = -994;
      goto LABEL_28;
    }
    if (*(void *)(result + 24))
    {
      *(_DWORD *)a2 = -994;
      *(void *)(a2 + 80) = *(void *)(result + 8);
      *(void *)(v3 + 16 * v2 + 8) = *(void *)(a2 + 16);
      int v20 = *(_DWORD *)(result + 44);
      int v21 = *(_DWORD *)(result + 48);
      if (v20 == v21) {
        return result;
      }
      uint64_t v22 = (v21 - 1);
      uint64_t v23 = (v20 - 1);
      uint64_t v24 = *(void *)(a2 + 24);
      uint64_t v25 = *(void *)(a2 + 32);
      uint64_t v26 = v22 - v23;
      if ((unint64_t)(v22 - v23) >= 2)
      {
        uint64_t v27 = (v26 & 0xFFFFFFFFFFFFFFFELL) + v23;
        uint64_t v28 = v25 + 24 * v23 + 24;
        unint64_t v29 = v26 & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          *(void *)(v28 - 24) = v24;
          *(void *)(v28 - 16) = v24;
          *(void *)uint64_t v28 = v24;
          *(void *)(v28 + 8) = v24;
          *(unsigned char *)(v28 - 8) = 0;
          *(unsigned char *)(v28 + 16) = 0;
          v28 += 48;
          v29 -= 2;
        }
        while (v29);
        if (v26 == (v26 & 0xFFFFFFFFFFFFFFFELL)) {
          return result;
        }
      }
      else
      {
        uint64_t v27 = v23;
      }
      uint64_t v30 = v22 - v27;
      uint64_t v31 = (unsigned char *)(v25 + 24 * v27 + 16);
      do
      {
        *((void *)v31 - 2) = v24;
        *((void *)v31 - 1) = v24;
        *uint64_t v31 = 0;
        v31 += 24;
        --v30;
      }
      while (v30);
      return result;
    }
LABEL_26:
    *(_DWORD *)a2 = -992;
    return result;
  }
  unint64_t v5 = *v4 + 1;
  unint64_t *v4 = v5;
  unint64_t v6 = *(void *)(result + 24);
  unint64_t v7 = *(void *)(result + 32);
  BOOL v8 = v5 < v7;
  if (v5 < v7 && v5 >= v6) {
    BOOL v8 = v5 < v7 && *(void *)(v3 + 16 * v2 + 8) != *(void *)(a2 + 16);
  }
  if (v8 && v5 >= v6) {
    goto LABEL_26;
  }
  *(_DWORD *)a2 = -994;
  if (!v8)
  {
LABEL_28:
    *(void *)(a2 + 80) = *(void *)(result + 16);
    return result;
  }
  *(void *)(a2 + 80) = *(void *)(result + 8);
  *(void *)(v3 + 16 * v2 + 8) = *(void *)(a2 + 16);
  int v12 = *(_DWORD *)(result + 44);
  int v13 = *(_DWORD *)(result + 48);
  if (v12 == v13) {
    return result;
  }
  uint64_t v14 = (v13 - 1);
  uint64_t v15 = (v12 - 1);
  uint64_t v16 = *(void *)(a2 + 24);
  uint64_t v17 = *(void *)(a2 + 32);
  uint64_t v18 = v14 - v15;
  if ((unint64_t)(v14 - v15) < 2)
  {
    uint64_t v19 = v15;
LABEL_39:
    uint64_t v34 = v14 - v19;
    char v35 = (unsigned char *)(v17 + 24 * v19 + 16);
    do
    {
      *((void *)v35 - 2) = v16;
      *((void *)v35 - 1) = v16;
      *char v35 = 0;
      v35 += 24;
      --v34;
    }
    while (v34);
    return result;
  }
  uint64_t v19 = (v18 & 0xFFFFFFFFFFFFFFFELL) + v15;
  uint64_t v32 = v17 + 24 * v15 + 24;
  unint64_t v33 = v18 & 0xFFFFFFFFFFFFFFFELL;
  do
  {
    *(void *)(v32 - 24) = v16;
    *(void *)(v32 - 16) = v16;
    *(void *)uint64_t v32 = v16;
    *(void *)(v32 + 8) = v16;
    *(unsigned char *)(v32 - 8) = 0;
    *(unsigned char *)(v32 + 16) = 0;
    v32 += 48;
    v33 -= 2;
  }
  while (v33);
  if (v18 != (v18 & 0xFFFFFFFFFFFFFFFELL)) {
    goto LABEL_39;
  }
  return result;
}

uint64_t std::__loop<char>::__exec_split(uint64_t result, int a2, uint64_t a3)
{
  *(_DWORD *)a3 = -994;
  if (*(unsigned __int8 *)(result + 52) == a2)
  {
    *(void *)(a3 + 80) = *(void *)(result + 16);
    return result;
  }
  *(void *)(a3 + 80) = *(void *)(result + 8);
  int v3 = *(_DWORD *)(result + 44);
  *(void *)(*(void *)(a3 + 56) + 16 * *(unsigned int *)(result + 40) + 8) = *(void *)(a3 + 16);
  int v4 = *(_DWORD *)(result + 48);
  if (v3 != v4)
  {
    uint64_t v5 = (v4 - 1);
    uint64_t v6 = (v3 - 1);
    uint64_t v7 = *(void *)(a3 + 24);
    uint64_t v8 = *(void *)(a3 + 32);
    uint64_t v9 = v5 - v6;
    if ((unint64_t)(v5 - v6) < 2)
    {
      uint64_t v10 = v6;
LABEL_9:
      uint64_t v13 = v5 - v10;
      uint64_t v14 = (unsigned char *)(v8 + 24 * v10 + 16);
      do
      {
        *((void *)v14 - 2) = v7;
        *((void *)v14 - 1) = v7;
        unsigned char *v14 = 0;
        v14 += 24;
        --v13;
      }
      while (v13);
      return result;
    }
    uint64_t v10 = (v9 & 0xFFFFFFFFFFFFFFFELL) + v6;
    uint64_t v11 = v8 + 24 * v6 + 24;
    unint64_t v12 = v9 & 0xFFFFFFFFFFFFFFFELL;
    do
    {
      *(void *)(v11 - 24) = v7;
      *(void *)(v11 - 16) = v7;
      *(void *)uint64_t v11 = v7;
      *(void *)(v11 + 8) = v7;
      *(unsigned char *)(v11 - 8) = 0;
      *(unsigned char *)(v11 + 16) = 0;
      v11 += 48;
      v12 -= 2;
    }
    while (v12);
    if (v9 != (v9 & 0xFFFFFFFFFFFFFFFELL)) {
      goto LABEL_9;
    }
  }
  return result;
}

void (__cdecl ***std::__owns_two_states<char>::~__owns_two_states(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_1F20F4EB0;
  uint64_t v2 = a1[2];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  int v3 = a1[1];
  if (v3) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  }
  return a1;
}

void std::__owns_two_states<char>::~__owns_two_states(void (__cdecl ***__p)(std::__owns_one_state<char> *__hidden this))
{
  void *__p = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_1F20F4EB0;
  uint64_t v2 = __p[2];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  int v3 = __p[1];
  if (v3) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  }

  operator delete(__p);
}

uint64_t std::__repeat_one_loop<char>::__exec(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -991;
  *(void *)(a2 + 80) = *(void *)(result + 8);
  return result;
}

void (__cdecl ***std::__alternate<char>::~__alternate(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_1F20F4EB0;
  uint64_t v2 = a1[2];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  int v3 = a1[1];
  if (v3) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  }
  return a1;
}

void std::__alternate<char>::~__alternate(void (__cdecl ***__p)(std::__owns_one_state<char> *__hidden this))
{
  void *__p = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_1F20F4EB0;
  uint64_t v2 = __p[2];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  int v3 = __p[1];
  if (v3) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  }

  operator delete(__p);
}

void std::__alternate<char>::__exec(uint64_t a1, _DWORD *a2)
{
  *a2 = -992;
}

uint64_t std::__alternate<char>::__exec_split(uint64_t result, int a2, uint64_t a3)
{
  *(_DWORD *)a3 = -994;
  uint64_t v3 = 8;
  if (a2) {
    uint64_t v3 = 16;
  }
  *(void *)(a3 + 80) = *(void *)(result + v3);
  return result;
}

uint64_t std::__empty_non_own_state<char>::__exec(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -994;
  *(void *)(a2 + 80) = *(void *)(result + 8);
  return result;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1C8791C90](exception, 15);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_1C57FEE50(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_nondupl_RE<char const*>(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v6 = std::basic_regex<char,std::regex_traits<char>>::__parse_one_char_or_coll_elem_RE<char const*>((std::basic_regex<char> *)a1, (char *)a2, a3);
  uint64_t v7 = v6;
  if (v6 != (char *)a2 || v6 == a3) {
    return v7;
  }
  if ((char *)(a2 + 1) == a3) {
    return (char *)a2;
  }
  if (*(unsigned char *)a2 != 92) {
    return (char *)a2;
  }
  int v8 = *(unsigned __int8 *)(a2 + 1);
  if (v8 == 40)
  {
    uint64_t v9 = (std::basic_regex<char> *)(a2 + 2);
    if ((*(unsigned char *)(a1 + 24) & 2) != 0)
    {
      int v11 = *(_DWORD *)(a1 + 28);
    }
    else
    {
      uint64_t v10 = operator new(0x18uLL);
      int v11 = *(_DWORD *)(a1 + 28) + 1;
      *(_DWORD *)(a1 + 28) = v11;
      uint64_t v12 = *(void *)(a1 + 56);
      uint64_t v13 = *(void *)(v12 + 8);
      *uint64_t v10 = &unk_1F20F4DC0;
      v10[1] = v13;
      *((_DWORD *)v10 + 4) = v11;
      *(void *)(v12 + 8) = v10;
      *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
    }
    do
    {
      if (v9 == (std::basic_regex<char> *)a3) {
        goto LABEL_25;
      }
      uint64_t v15 = v9;
      uint64_t v16 = *(std::__owns_one_state<char> **)(a1 + 56);
      int v17 = *(_DWORD *)(a1 + 28);
      uint64_t v18 = (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_nondupl_RE<char const*>(a1, v15, a3);
      if (v18 == v15) {
        break;
      }
      uint64_t v9 = std::basic_regex<char,std::regex_traits<char>>::__parse_RE_dupl_symbol<char const*>((std::basic_regex<char> *)a1, v18, (std::basic_regex<char> *)a3, v16, (v17 + 1), (*(_DWORD *)(a1 + 28) + 1));
    }
    while (v9 != v15);
    if ((char *)&v15->__traits_.__loc_.__locale_ + 1 == a3
      || LOBYTE(v15->__traits_.__loc_.__locale_) != 92
      || BYTE1(v15->__traits_.__loc_.__locale_) != 41)
    {
LABEL_25:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
    }
    uint64_t v7 = (char *)v15 + 2 * (BYTE1(v15->__traits_.__loc_.__locale_) == 41);
    if ((*(unsigned char *)(a1 + 24) & 2) == 0)
    {
      uint64_t v19 = operator new(0x18uLL);
      uint64_t v20 = *(void *)(a1 + 56);
      uint64_t v21 = *(void *)(v20 + 8);
      void *v19 = &unk_1F20F4E08;
      v19[1] = v21;
      *((_DWORD *)v19 + 4) = v11;
      *(void *)(v20 + 8) = v19;
      *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
      return v7;
    }
    return v7;
  }
  if ((v8 & 0xF8) != 0x30 && (v8 & 0xFE) != 0x38 || (v8 - 49) > 8) {
    return (char *)a2;
  }
  if ((v8 - 48) > *(_DWORD *)(a1 + 28)) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
  }
  std::basic_regex<char,std::regex_traits<char>>::__push_back_ref((std::basic_regex<char> *)a1, v8 - 48);
  return (char *)(a2 + 2);
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_RE_dupl_symbol<char const*>(std::basic_regex<char> *a1, std::basic_regex<char> *this, std::basic_regex<char> *a3, std::__owns_one_state<char> *a4, size_t __mexp_begin, size_t __mexp_end)
{
  uint64_t v6 = this;
  if (this == a3) {
    return v6;
  }
  int locale_low = LOBYTE(this->__traits_.__loc_.__locale_);
  if (locale_low == 42)
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_loop(a1, 0, 0xFFFFFFFFFFFFFFFFLL, a4, __mexp_begin, __mexp_end, 1);
    return (std::basic_regex<char> *)((char *)v6 + 1);
  }
  if ((std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1) == a3
    || locale_low != 92
    || BYTE1(this->__traits_.__loc_.__locale_) != 123)
  {
    return v6;
  }
  uint64_t v9 = (std::basic_regex<char> *)((char *)this + 2 * (BYTE1(this->__traits_.__loc_.__locale_) == 123));
  if (v9 == a3) {
    goto LABEL_43;
  }
  int v10 = LOBYTE(v9->__traits_.__loc_.__locale_);
  if ((v10 & 0xF8) != 0x30 && (v10 & 0xFE) != 0x38) {
    goto LABEL_43;
  }
  int v11 = v10 - 48;
  uint64_t v12 = (std::basic_regex<char> *)((char *)&v9->__traits_.__loc_.__locale_ + 1);
  if ((std::basic_regex<char> *)((char *)&v9->__traits_.__loc_.__locale_ + 1) == a3)
  {
LABEL_16:
    uint64_t v12 = a3;
  }
  else
  {
    while (1)
    {
      int v13 = LOBYTE(v12->__traits_.__loc_.__locale_);
      if ((v13 & 0xF8) != 0x30 && (v13 & 0xFE) != 0x38) {
        break;
      }
      if (v11 >= 214748364) {
        goto LABEL_43;
      }
      int v11 = v13 + 10 * v11 - 48;
      uint64_t v12 = (std::basic_regex<char> *)((char *)v12 + 1);
      if (v12 == a3) {
        goto LABEL_16;
      }
    }
  }
  if (v12 == v9) {
    goto LABEL_43;
  }
  if (v12 == a3) {
    goto LABEL_41;
  }
  uint64_t v14 = (std::basic_regex<char> *)((char *)&v12->__traits_.__loc_.__locale_ + 1);
  int v15 = LOBYTE(v12->__traits_.__loc_.__locale_);
  if (v15 != 44)
  {
    if (v14 != a3 && v15 == 92 && LOBYTE(v14->__traits_.__loc_.__locale_) == 125)
    {
      uint64_t v19 = (unsigned __int8 *)&v12->__traits_.__loc_.__locale_ + 2;
      std::basic_regex<char,std::regex_traits<char>>::__push_loop(a1, v11, v11, a4, __mexp_begin, __mexp_end, 1);
      return (std::basic_regex<char> *)v19;
    }
    goto LABEL_41;
  }
  if (v14 == a3) {
    goto LABEL_41;
  }
  int v16 = LOBYTE(v14->__traits_.__loc_.__locale_);
  if ((v16 & 0xF8) == 0x30 || (v16 & 0xFE) == 0x38)
  {
    uint64_t v14 = (std::basic_regex<char> *)((char *)&v12->__traits_.__loc_.__locale_ + 2);
    if ((std::basic_regex<char> *)((char *)&v12->__traits_.__loc_.__locale_ + 2) == a3) {
      goto LABEL_41;
    }
    int v17 = v16 - 48;
    while (1)
    {
      int v16 = LOBYTE(v14->__traits_.__loc_.__locale_);
      if ((v16 & 0xF8) != 0x30 && (v16 & 0xFE) != 0x38) {
        break;
      }
      if (v17 >= 214748364) {
        goto LABEL_43;
      }
      int v17 = v16 + 10 * v17 - 48;
      uint64_t v14 = (std::basic_regex<char> *)((char *)v14 + 1);
      if (v14 == a3) {
        goto LABEL_41;
      }
    }
  }
  else
  {
    int v17 = -1;
  }
  if (v14 == a3
    || (std::basic_regex<char> *)((char *)&v14->__traits_.__loc_.__locale_ + 1) == a3
    || v16 != 92
    || BYTE1(v14->__traits_.__loc_.__locale_) != 125)
  {
LABEL_41:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>();
  }
  uint64_t v18 = (unsigned __int8 *)v14 + 2 * (BYTE1(v14->__traits_.__loc_.__locale_) == 125);
  if (v17 != -1)
  {
    if (v17 >= v11)
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_loop(a1, v11, v17, a4, __mexp_begin, __mexp_end, 1);
      return (std::basic_regex<char> *)v18;
    }
LABEL_43:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>();
  }
  std::basic_regex<char,std::regex_traits<char>>::__push_loop(a1, v11, 0xFFFFFFFFFFFFFFFFLL, a4, __mexp_begin, __mexp_end, 1);
  return (std::basic_regex<char> *)v18;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_one_char_or_coll_elem_RE<char const*>(std::basic_regex<char> *this, char *a2, char *a3)
{
  if (a2 != a3)
  {
    uint64_t v6 = a2 + 1;
    int v5 = *a2;
    if (a2 + 1 != a3 || v5 != 36)
    {
      if ((v5 - 46) > 0x2E || ((1 << (v5 - 46)) & 0x600000000001) == 0)
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(this, v5);
        return a2 + 1;
      }
      if (v6 == a3 || v5 != 92)
      {
        if (v5 == 46)
        {
          int v10 = (std::__node<char> *)operator new(0x10uLL);
          std::vector<char>::pointer end = this->__end_;
          first = end->__first_;
          v10->__vftable = (std::__node<char>_vtbl *)&unk_1F20F4FB8;
          v10[1].__vftable = (std::__node<char>_vtbl *)first;
          end->__first_ = v10;
          this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
          return a2 + 1;
        }
      }
      else
      {
        int v9 = *v6;
        if ((v9 - 36) <= 0x3A && ((1 << (v9 - 36)) & 0x580000000000441) != 0)
        {
          std::basic_regex<char,std::regex_traits<char>>::__push_char(this, v9);
          return a2 + 2;
        }
      }
    }
  }

  return std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>((uint64_t)this, a2, a3);
}

void (__cdecl ***std::__match_any<char>::~__match_any(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  uint64_t v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

void std::__match_any<char>::~__match_any(void (__cdecl ***__p)(std::__owns_one_state<char> *__hidden this))
{
  uint64_t v2 = __p[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }

  operator delete(__p);
}

uint64_t std::__match_any<char>::__exec(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(unsigned char **)(a2 + 16);
  if (v2 == *(unsigned char **)(a2 + 24) || !*v2)
  {
    *(_DWORD *)a2 = -993;
    *(void *)(a2 + 80) = 0;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(void *)(a2 + 16) = v2 + 1;
    *(void *)(a2 + 80) = *(void *)(result + 8);
  }
  return result;
}

BOOL std::basic_regex<char,std::regex_traits<char>>::__test_back_ref(std::basic_regex<char> *this, char a2)
{
  if ((a2 & 0xF8) != 0x30 && (a2 & 0xFE) != 0x38 || a2 - 49 > 8) {
    return 0;
  }
  if (a2 - 48 > this->__marked_count_) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
  }
  std::basic_regex<char,std::regex_traits<char>>::__push_back_ref(this, a2 - 48);
  return 1;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<char const*>(uint64_t a1, std::basic_regex<char> *a2, std::basic_regex<char> *a3)
{
  uint64_t v6 = *(std::__owns_one_state<char> **)(a1 + 56);
  int v7 = *(_DWORD *)(a1 + 28);
  int v8 = std::basic_regex<char,std::regex_traits<char>>::__parse_ORD_CHAR_ERE<char const*>((std::basic_regex<char> *)a1, a2, a3);
  if (v8 != a2
    || (int v8 = (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_QUOTED_CHAR_ERE<char const*>(a1, a2, a3), v8 != a2))
  {
    if (v8 != a2) {
      goto LABEL_25;
    }
LABEL_4:
    if (v8 != a3)
    {
      int locale_low = SLOBYTE(a2->__traits_.__loc_.__locale_);
      if (locale_low == 36)
      {
        int v10 = operator new(0x18uLL);
        BOOL v11 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
        uint64_t v12 = *(void *)(a1 + 56);
        v10[1] = *(void *)(v12 + 8);
        int v13 = &unk_1F20F4AA8;
        goto LABEL_13;
      }
      if (locale_low != 40)
      {
        if (locale_low == 94)
        {
          int v10 = operator new(0x18uLL);
          BOOL v11 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
          uint64_t v12 = *(void *)(a1 + 56);
          v10[1] = *(void *)(v12 + 8);
          int v13 = &unk_1F20F4A60;
LABEL_13:
          *int v10 = v13;
          *((unsigned char *)v10 + 16) = v11;
          *(void *)(v12 + 8) = v10;
          goto LABEL_14;
        }
        return a2;
      }
      if ((*(unsigned char *)(a1 + 24) & 2) != 0)
      {
        int v18 = *(_DWORD *)(a1 + 28);
      }
      else
      {
        int v17 = operator new(0x18uLL);
        int v18 = *(_DWORD *)(a1 + 28) + 1;
        *(_DWORD *)(a1 + 28) = v18;
        uint64_t v19 = *(void *)(a1 + 56);
        uint64_t v20 = *(void *)(v19 + 8);
        *int v17 = &unk_1F20F4DC0;
        v17[1] = v20;
        *((_DWORD *)v17 + 4) = v18;
        *(void *)(v19 + 8) = v17;
        *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
      }
      ++*(_DWORD *)(a1 + 36);
      uint64_t v21 = (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>(a1, (char *)&a2->__traits_.__loc_.__locale_ + 1, a3);
      if (v21 == a3 || (uint64_t v22 = v21, LOBYTE(v21->__traits_.__loc_.__locale_) != 41)) {
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
      }
      if ((*(unsigned char *)(a1 + 24) & 2) == 0)
      {
        uint64_t v23 = operator new(0x18uLL);
        uint64_t v24 = *(void *)(a1 + 56);
        uint64_t v25 = *(void *)(v24 + 8);
        *uint64_t v23 = &unk_1F20F4E08;
        v23[1] = v25;
        *((_DWORD *)v23 + 4) = v18;
        *(void *)(v24 + 8) = v23;
        *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
      }
      --*(_DWORD *)(a1 + 36);
      int v8 = (std::basic_regex<char> *)((char *)&v22->__traits_.__loc_.__locale_ + 1);
    }
LABEL_25:
    if (v8 != a2) {
      goto LABEL_26;
    }
    return a2;
  }
  if (a2 == a3 || LOBYTE(a2->__traits_.__loc_.__locale_) != 46)
  {
    int v8 = (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>(a1, (char *)a2, (char *)a3);
    if (v8 != a2) {
      goto LABEL_25;
    }
    goto LABEL_4;
  }
  uint64_t v14 = operator new(0x10uLL);
  uint64_t v15 = *(void *)(a1 + 56);
  uint64_t v16 = *(void *)(v15 + 8);
  void *v14 = &unk_1F20F4FB8;
  v14[1] = v16;
  *(void *)(v15 + 8) = v14;
LABEL_14:
  *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
  int v8 = (std::basic_regex<char> *)((char *)&a2->__traits_.__loc_.__locale_ + 1);
LABEL_26:
  size_t v26 = (*(_DWORD *)(a1 + 28) + 1);

  return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>(a1, v8, a3, v6, (v7 + 1), v26);
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_ORD_CHAR_ERE<char const*>(std::basic_regex<char> *a1, std::basic_regex<char> *this, std::basic_regex<char> *a3)
{
  if (this == a3) {
    return this;
  }
  switch(LOBYTE(this->__traits_.__loc_.__locale_))
  {
    case '$':
    case '(':
    case '*':
    case '+':
    case '.':
    case '?':
    case '[':
    case '\\':
    case '^':
    case '{':
    case '|':
      return this;
    case ')':
      if (a1->__open_count_) {
        return this;
      }
      break;
    default:
      break;
  }
  std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, (std::basic_regex<char>::value_type)this->__traits_.__loc_.__locale_);
  return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
}

std::basic_regex<char>::value_type *std::basic_regex<char,std::regex_traits<char>>::__parse_QUOTED_CHAR_ERE<char const*>(uint64_t a1, std::basic_regex<char> *this, std::basic_regex<char> *a3)
{
  uint64_t v3 = this;
  if (this == a3) {
    return (std::basic_regex<char>::value_type *)v3;
  }
  int v4 = (char *)&this->__traits_.__loc_.__locale_ + 1;
  if ((std::basic_regex<char> *)((char *)&v3->__traits_.__loc_.__locale_ + 1) == a3
    || LOBYTE(v3->__traits_.__loc_.__locale_) != 92)
  {
    return (std::basic_regex<char>::value_type *)v3;
  }
  std::basic_regex<char>::value_type v5 = *v4;
  switch(*v4)
  {
    case '$':
    case '(':
    case ')':
    case '*':
    case '+':
    case '.':
    case '?':
    case '[':
    case '\\':
    case '^':
    case '{':
    case '|':
    case '}':
      std::basic_regex<char,std::regex_traits<char>>::__push_char((std::basic_regex<char> *)a1, v5);
      return (char *)v3 + 2;
    default:
      if ((*(_DWORD *)(a1 + 24) & 0x1F0) == 0x40)
      {
        uint64_t result = std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<char const*>((std::basic_regex<char> *)a1, v4, (std::basic_regex<char>::value_type *)a3, 0);
      }
      else
      {
        BOOL v7 = std::basic_regex<char,std::regex_traits<char>>::__test_back_ref((std::basic_regex<char> *)a1, v5);
        uint64_t v8 = 2;
        if (!v7) {
          uint64_t v8 = 0;
        }
        uint64_t result = (char *)v3 + v8;
      }
      break;
  }
  return result;
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>(uint64_t a1, std::sub_match<const char *> *a2, std::sub_match<const char *> *a3, std::vector<std::csub_match> *this, int a5)
{
  if ((a5 & 0x80) != 0) {
    int v9 = a5 & 0xFFA;
  }
  else {
    int v9 = a5;
  }
  int v10 = *(_DWORD *)(a1 + 28);
  this[1].__begin_ = a3;
  BOOL v11 = (const std::vector<std::csub_match>::value_type *)&this[1];
  this[1].__end_ = a3;
  LOBYTE(this[1].__end_cap_.__value_) = 0;
  std::vector<std::sub_match<char const*>>::assign(this, (v10 + 1), (std::vector<std::csub_match>::const_reference)&this[1]);
  this[2].__begin_ = a2;
  this[2].__end_ = a2;
  LOBYTE(this[2].__end_cap_.__value_) = 0;
  *(std::pair<const char *, const char *> *)&this[3].__begin_ = v11->std::pair<const char *, const char *>;
  LOBYTE(this[3].__end_cap_.__value_) = this[1].__end_cap_.__value_;
  if ((v9 & 0x800) == 0) {
    this[4].__end_ = a2;
  }
  LOBYTE(this[4].__begin_) = 1;
  if ((*(_WORD *)(a1 + 24) & 0x1F0) == 0)
  {
    if (std::basic_regex<char,std::regex_traits<char>>::__match_at_start_ecma<std::allocator<std::sub_match<char const*>>>(a1, (const char *)a2, (const char *)a3, (uint64_t *)this, v9, (v9 & 0x800) == 0))goto LABEL_28; {
    goto LABEL_13;
    }
  }
  if (*(_DWORD *)(a1 + 28))
  {
    if (std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_subs<std::allocator<std::sub_match<char const*>>>(a1, (const char *)a2, (const char *)a3, (uint64_t *)this, v9, (v9 & 0x800) == 0))goto LABEL_28; {
LABEL_13:
    }
    if (a2 != a3 && (v9 & 0x40) == 0)
    {
      int v12 = v9 | 0x80;
      for (unint64_t i = (char *)&a2->first + 1; i != (const char *)a3; ++i)
      {
        std::vector<std::sub_match<char const*>>::assign(this, 0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_ - (char *)this->__begin_) >> 3), v11);
        if ((*(_WORD *)(a1 + 24) & 0x1F0) != 0)
        {
          if (*(_DWORD *)(a1 + 28))
          {
            if (std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_subs<std::allocator<std::sub_match<char const*>>>(a1, i, (const char *)a3, (uint64_t *)this, v12, 0))goto LABEL_28; {
          }
            }
          else if (std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_nosubs<std::allocator<std::sub_match<char const*>>>(a1, (uint64_t)i, (uint64_t)a3, (uint64_t *)this, v12, 0))
          {
            goto LABEL_28;
          }
        }
        else if (std::basic_regex<char,std::regex_traits<char>>::__match_at_start_ecma<std::allocator<std::sub_match<char const*>>>(a1, i, (const char *)a3, (uint64_t *)this, v12, 0))
        {
          goto LABEL_28;
        }
        std::vector<std::sub_match<char const*>>::assign(this, 0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_ - (char *)this->__begin_) >> 3), v11);
      }
      std::vector<std::sub_match<char const*>>::assign(this, 0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_ - (char *)this->__begin_) >> 3), v11);
      if ((*(_WORD *)(a1 + 24) & 0x1F0) != 0)
      {
        if (*(_DWORD *)(a1 + 28))
        {
          if (std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_subs<std::allocator<std::sub_match<char const*>>>(a1, (const char *)a3, (const char *)a3, (uint64_t *)this, v12, 0))goto LABEL_28; {
        }
          }
        else if (std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_nosubs<std::allocator<std::sub_match<char const*>>>(a1, (uint64_t)a3, (uint64_t)a3, (uint64_t *)this, v12, 0))
        {
          goto LABEL_28;
        }
      }
      else if (std::basic_regex<char,std::regex_traits<char>>::__match_at_start_ecma<std::allocator<std::sub_match<char const*>>>(a1, (const char *)a3, (const char *)a3, (uint64_t *)this, v12, 0))
      {
        goto LABEL_28;
      }
    }
    uint64_t result = 0;
    this->__end_ = this->__begin_;
    return result;
  }
  if ((std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_nosubs<std::allocator<std::sub_match<char const*>>>(a1, (uint64_t)a2, (uint64_t)a3, (uint64_t *)this, v9, (v9 & 0x800) == 0) & 1) == 0)goto LABEL_13; {
LABEL_28:
  }
  if (this->__end_ == this->__begin_) {
    std::vector<std::csub_match>::pointer begin = (std::vector<std::csub_match>::pointer)v11;
  }
  else {
    std::vector<std::csub_match>::pointer begin = this->__begin_;
  }
  first = (std::sub_match<const char *> *)begin->first;
  this[2].__end_ = (std::vector<std::csub_match>::pointer)begin->first;
  LOBYTE(this[2].__end_cap_.__value_) = this[2].__begin_ != first;
  second = (std::sub_match<const char *> *)begin->second;
  this[3].__begin_ = second;
  LOBYTE(this[3].__end_cap_.__value_) = second != this[3].__end_;
  return 1;
}

void std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>(std::vector<std::ssub_match> *this, uint64_t a2, std::sub_match<std::__wrap_iter<const char *>> *a3, uint64_t *a4, char a5)
{
  uint64_t v10 = a4[6];
  unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 3);
  std::vector<std::ssub_match>::pointer begin = this->__begin_;
  std::vector<char>::pointer end = this->__end_;
  unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)this->__begin_) >> 3);
  if (v11 <= v14)
  {
    if (v11 < v14)
    {
      std::vector<char>::pointer end = (std::vector<std::ssub_match>::pointer)((char *)begin + 8 * ((a4[1] - *a4) >> 3));
      this->__end_ = end;
    }
  }
  else
  {
    std::vector<std::sub_match<std::__wrap_iter<char const*>>>::__append(this, v11 - v14);
    std::vector<std::ssub_match>::pointer begin = this->__begin_;
    std::vector<char>::pointer end = this->__end_;
  }
  if (end != begin)
  {
    uint64_t v15 = 0;
    unint64_t v16 = 0;
    uint64_t v18 = *a4;
    uint64_t v17 = a4[1];
    do
    {
      unint64_t v19 = 0xAAAAAAAAAAAAAAABLL * ((v17 - v18) >> 3);
      uint64_t v20 = (void *)(v18 + v15 * 24);
      if (v19 <= v16) {
        uint64_t v21 = a4 + 3;
      }
      else {
        uint64_t v21 = v20;
      }
      begin[v15].first.__i_ = (std::__wrap_iter<const char *>::iterator_type)(a2 + *v21 - v10);
      if (0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 3) <= v16) {
        uint64_t v22 = (uint64_t)(a4 + 3);
      }
      else {
        uint64_t v22 = *a4 + v15 * 24;
      }
      this->__begin_[v15].second.__i_ = (std::__wrap_iter<const char *>::iterator_type)(a2 + *(void *)(v22 + 8) - v10);
      uint64_t v18 = *a4;
      uint64_t v17 = a4[1];
      if (0xAAAAAAAAAAAAAAABLL * ((v17 - *a4) >> 3) <= v16) {
        uint64_t v23 = (uint64_t)(a4 + 3);
      }
      else {
        uint64_t v23 = *a4 + v15 * 24;
      }
      char v24 = *(unsigned char *)(v23 + 16);
      std::vector<std::ssub_match>::pointer begin = this->__begin_;
      std::vector<std::ssub_match>::pointer v25 = this->__end_;
      this->__begin_[v15].matched = v24;
      ++v16;
      ++v15;
    }
    while (v16 < 0xAAAAAAAAAAAAAAABLL * (((char *)v25 - (char *)begin) >> 3));
  }
  this[1].__begin_ = a3;
  this[1].__end_ = a3;
  LOBYTE(this[1].__end_cap_.__value_) = 0;
  size_t v26 = (std::sub_match<std::__wrap_iter<const char *>> *)(a2 + a4[6] - v10);
  this[2].__begin_ = v26;
  this[2].__end_ = (std::vector<std::ssub_match>::pointer)(a2 + a4[7] - v10);
  LOBYTE(this[2].__end_cap_.__value_) = *((unsigned char *)a4 + 64);
  this[3].__begin_ = (std::vector<std::ssub_match>::pointer)(a2 + a4[9] - v10);
  this[3].__end_ = (std::vector<std::ssub_match>::pointer)(a2 + a4[10] - v10);
  LOBYTE(this[3].__end_cap_.__value_) = *((unsigned char *)a4 + 88);
  if ((a5 & 1) == 0) {
    this[4].__end_ = v26;
  }
  LOBYTE(this[4].__begin_) = *((unsigned char *)a4 + 96);
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_nosubs<std::allocator<std::sub_match<char const*>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, int a5, char a6)
{
  long long v100 = 0u;
  long long v101 = 0u;
  long long v99 = 0u;
  uint64_t v6 = *(void *)(a1 + 40);
  if (!v6)
  {
LABEL_79:
    uint64_t v85 = (void **)*((void *)&v99 + 1);
    long long v86 = (void **)v100;
    *((void *)&v101 + 1) = 0;
    unint64_t v87 = v100 - *((void *)&v99 + 1);
    if ((void)v100 - *((void *)&v99 + 1) < 0x11uLL) {
      goto LABEL_81;
    }
    do
    {
LABEL_80:
      operator delete(*v85);
      long long v86 = (void **)v100;
      uint64_t v85 = (void **)(*((void *)&v99 + 1) + 8);
      *((void *)&v99 + 1) = v85;
      unint64_t v87 = v100 - (void)v85;
    }
    while ((void)v100 - (void)v85 > 0x10uLL);
    goto LABEL_81;
  }
  *(_DWORD *)v98 = 0;
  memset(&v98[8], 0, 85);
  std::deque<std::__state<char>>::__add_back_capacity((uint64_t)&v99);
  unint64_t v11 = *(void *)(*((void *)&v99 + 1) + 8 * (((void)v101 + *((void *)&v101 + 1)) / 0x2AuLL))
      + 96 * (((void)v101 + *((void *)&v101 + 1)) % 0x2AuLL);
  long long v12 = *(_OWORD *)&v98[16];
  *(_OWORD *)unint64_t v11 = *(_OWORD *)v98;
  *(_OWORD *)(v11 + 16) = v12;
  *(void *)(v11 + 40) = 0;
  *(void *)(v11 + 48) = 0;
  *(void *)(v11 + 32) = 0;
  memset(&v98[32], 0, 24);
  *(void *)(v11 + 56) = 0;
  *(void *)(v11 + 64) = 0;
  *(void *)(v11 + 72) = 0;
  memset(&v98[56], 0, 24);
  uint64_t v13 = *(void *)&v98[80];
  *(void *)(v11 + 85) = *(void *)&v98[85];
  *(void *)(v11 + 80) = v13;
  uint64_t v15 = *((void *)&v101 + 1);
  uint64_t v14 = v101;
  uint64_t v16 = ++*((void *)&v101 + 1);
  uint64_t v17 = *((void *)&v99 + 1);
  unint64_t v18 = *(unsigned int *)(a1 + 32);
  unint64_t v19 = v101 + v15;
  unint64_t v20 = 8 * (v19 / 0x2A);
  unint64_t v21 = 96 * (v19 % 0x2A);
  unint64_t v22 = *(void *)(*((void *)&v99 + 1) + v20) + v21;
  *(_DWORD *)unint64_t v22 = 0;
  *(void *)(v22 + 8) = a2;
  *(void *)(*(void *)(v17 + v20) + v21 + 16) = a2;
  *(void *)(*(void *)(v17 + v20) + v21 + 24) = a3;
  unint64_t v23 = *(void *)(v17 + v20) + v21;
  uint64_t v26 = *(void *)(v23 + 56);
  char v24 = (std::vector<std::pair<unsigned long, const char *>> *)(v23 + 56);
  uint64_t v25 = v26;
  unint64_t v27 = ((uint64_t)v24->__end_ - v26) >> 4;
  unint64_t v92 = a4;
  if (v18 <= v27)
  {
    if (v18 < v27) {
      v24->__end_ = (std::vector<std::pair<unsigned long, const char *>>::pointer)(v25 + 16 * v18);
    }
  }
  else
  {
    std::vector<std::pair<unsigned long,char const*>>::__append(v24, v18 - v27);
    uint64_t v16 = *((void *)&v101 + 1);
    uint64_t v14 = v101;
    uint64_t v17 = *((void *)&v99 + 1);
  }
  uint64_t v94 = 0;
  char v95 = 0;
  unsigned int v28 = 0;
  unint64_t v29 = v14 + v16 - 1;
  unint64_t v30 = 8 * (v29 / 0x2A);
  unint64_t v31 = 96 * (v29 % 0x2A);
  *(void *)(*(void *)(v17 + v30) + v31 + 80) = v6;
  uint64_t v93 = a3;
  uint64_t v32 = a3 - a2;
  unint64_t v33 = *(void *)(v17 + v30) + v31;
  *(_DWORD *)(v33 + 88) = a5;
  *(unsigned char *)(v33 + 92) = a6;
  while (2)
  {
    if ((++v28 & 0xFFF) == 0 && (int)(v28 >> 12) >= (int)v32) {
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)12>();
    }
    unint64_t v35 = v16 + v101 - 1;
    uint64_t v36 = *(void *)(*((void *)&v99 + 1) + 8 * (v35 / 0x2A));
    unint64_t v37 = v35 % 0x2A;
    uint64_t v38 = v36 + 96 * (v35 % 0x2A);
    unint64_t v40 = (void *)(v38 + 80);
    uint64_t v39 = *(void *)(v38 + 80);
    if (v39) {
      (*(void (**)(uint64_t, unint64_t))(*(void *)v39 + 16))(v39, v36 + 96 * v37);
    }
    switch(*(_DWORD *)v38)
    {
      case 0xFFFFFC18:
        uint64_t v41 = *(void *)(v36 + 96 * v37 + 16);
        if ((a5 & 0x20) != 0 && v41 == a2 || (a5 & 0x1000) != 0 && v41 != v93) {
          goto LABEL_21;
        }
        uint64_t v65 = v41 - *(void *)(v36 + 96 * v37 + 8);
        uint64_t v66 = v94;
        if ((v95 & (v94 >= v65)) == 0) {
          uint64_t v66 = v65;
        }
        if (v66 == v32)
        {
          size_t v67 = (void **)*((void *)&v99 + 1);
          uint64_t v68 = v100;
          if ((void)v100 == *((void *)&v99 + 1))
          {
            *((void *)&v101 + 1) = 0;
            unint64_t v82 = 0;
          }
          else
          {
            int v69 = (void *)(*((void *)&v99 + 1) + 8 * ((unint64_t)v101 / 0x2A));
            int v70 = (void *)(*v69 + 96 * ((unint64_t)v101 % 0x2A));
            unint64_t v71 = *(void *)(*((void *)&v99 + 1) + 8 * ((*((void *)&v101 + 1) + (void)v101) / 0x2AuLL))
                + 96 * ((*((void *)&v101 + 1) + (void)v101) % 0x2AuLL);
            if (v70 != (void *)v71)
            {
              do
              {
                uint64_t v72 = (void *)v70[7];
                if (v72)
                {
                  v70[8] = v72;
                  operator delete(v72);
                }
                int64_t v73 = (void *)v70[4];
                if (v73)
                {
                  v70[5] = v73;
                  operator delete(v73);
                }
                v70 += 12;
                if ((void *)((char *)v70 - *v69) == (void *)4032)
                {
                  unint64_t v74 = (void *)v69[1];
                  ++v69;
                  int v70 = v74;
                }
              }
              while (v70 != (void *)v71);
              size_t v67 = (void **)*((void *)&v99 + 1);
              uint64_t v68 = v100;
            }
            *((void *)&v101 + 1) = 0;
            unint64_t v82 = v68 - (void)v67;
            if (v82 >= 0x11)
            {
              do
              {
                operator delete(*v67);
                size_t v67 = (void **)(*((void *)&v99 + 1) + 8);
                *((void *)&v99 + 1) = v67;
                unint64_t v82 = v100 - (void)v67;
              }
              while ((void)v100 - (void)v67 > 0x10uLL);
            }
          }
          if (v82 >> 3 == 1)
          {
            uint64_t v83 = 21;
          }
          else
          {
            if (v82 >> 3 != 2)
            {
LABEL_76:
              char v95 = 1;
              uint64_t v94 = v32;
              goto LABEL_8;
            }
            uint64_t v83 = 42;
          }
          *(void *)&long long v101 = v83;
          goto LABEL_76;
        }
        uint64_t v94 = v66;
        unint64_t v75 = *((void *)&v101 + 1) + v101 - 1;
        uint64_t v76 = *(void *)(*((void *)&v99 + 1) + 8 * (v75 / 0x2A));
        unint64_t v77 = v75 % 0x2A;
        long long v78 = *(void **)(v76 + 96 * (v75 % 0x2A) + 56);
        if (v78)
        {
          *(void *)(v76 + 96 * v77 + 64) = v78;
          operator delete(v78);
        }
        uint64_t v79 = *(void **)(v76 + 96 * v77 + 32);
        if (v79)
        {
          *(void *)(v76 + 96 * v77 + 40) = v79;
          operator delete(v79);
        }
        uint64_t v80 = 42 * ((uint64_t)(v100 - *((void *)&v99 + 1)) >> 3) - 1;
        long long v81 = v101;
        --*((void *)&v101 + 1);
        if ((void)v100 == *((void *)&v99 + 1)) {
          uint64_t v80 = 0;
        }
        if ((unint64_t)(v80 - (*((void *)&v81 + 1) + v81) + 1) >= 0x54)
        {
          operator delete(*(void **)(v100 - 8));
          *(void *)&long long v100 = v100 - 8;
        }
        char v95 = 1;
LABEL_8:
        uint64_t v16 = *((void *)&v101 + 1);
        if (*((void *)&v101 + 1)) {
          continue;
        }
        if (v95)
        {
          uint64_t v84 = *v92;
          *(void *)uint64_t v84 = a2;
          *(void *)(v84 + 8) = a2 + v94;
          uint64_t v6 = 1;
          *(unsigned char *)(v84 + 16) = 1;
          goto LABEL_79;
        }
        uint64_t v6 = 0;
        uint64_t v85 = (void **)*((void *)&v99 + 1);
        long long v86 = (void **)v100;
        *((void *)&v101 + 1) = 0;
        unint64_t v87 = v100 - *((void *)&v99 + 1);
        if ((void)v100 - *((void *)&v99 + 1) >= 0x11uLL) {
          goto LABEL_80;
        }
LABEL_81:
        unint64_t v88 = v87 >> 3;
        if (v88 == 1)
        {
          uint64_t v89 = 21;
LABEL_85:
          *(void *)&long long v101 = v89;
        }
        else if (v88 == 2)
        {
          uint64_t v89 = 42;
          goto LABEL_85;
        }
        if (v85 != v86)
        {
          do
          {
            int v90 = *v85++;
            operator delete(v90);
          }
          while (v85 != v86);
          if ((void)v100 != *((void *)&v99 + 1)) {
            *(void *)&long long v100 = v100 + ((*((void *)&v99 + 1) - v100 + 7) & 0xFFFFFFFFFFFFFFF8);
          }
        }
        if ((void)v99) {
          operator delete((void *)v99);
        }
        return v6;
      case 0xFFFFFC19:
      case 0xFFFFFC1E:
      case 0xFFFFFC21:
        goto LABEL_8;
      case 0xFFFFFC1D:
        unint64_t v49 = v101;
        if (!(void)v101)
        {
          std::deque<std::__state<char>>::__add_front_capacity((uint64_t)&v99);
          unint64_t v49 = v101;
        }
        unint64_t v50 = (void *)(*((void *)&v99 + 1) + 8 * (v49 / 0x2A));
        uint64_t v51 = *v50 + 96 * (v49 % 0x2A);
        if ((void)v100 == *((void *)&v99 + 1)) {
          uint64_t v51 = 0;
        }
        if (v51 == *v50) {
          uint64_t v51 = *(v50 - 1) + 4032;
        }
        long long v52 = *(_OWORD *)(v38 + 16);
        *(_OWORD *)(v51 - 96) = *(_OWORD *)v38;
        *(_OWORD *)(v51 - 80) = v52;
        uint64_t v53 = v36 + 96 * v37;
        *(void *)(v51 - 56) = 0;
        *(void *)(v51 - 48) = 0;
        *(void *)(v51 - 64) = 0;
        *(_OWORD *)(v51 - 64) = *(_OWORD *)(v53 + 32);
        *(void *)(v51 - 48) = *(void *)(v53 + 48);
        *(void *)(v53 + 32) = 0;
        *(void *)(v53 + 40) = 0;
        *(void *)(v53 + 48) = 0;
        *(void *)(v51 - 40) = 0;
        *(void *)(v51 - 32) = 0;
        *(void *)(v51 - 24) = 0;
        *(_OWORD *)(v51 - 40) = *(_OWORD *)(v53 + 56);
        *(void *)(v51 - 24) = *(void *)(v53 + 72);
        *(void *)(v53 + 56) = 0;
        *(void *)(v53 + 64) = 0;
        *(void *)(v53 + 72) = 0;
        uint64_t v54 = *v40;
        *(void *)(v51 - 11) = *(void *)(v38 + 85);
        *(void *)(v51 - 16) = v54;
        uint64_t v55 = *((void *)&v101 + 1);
        *(void *)&long long v101 = v101 - 1;
        ++*((void *)&v101 + 1);
        uint64_t v56 = v55 + v101;
        unint64_t v57 = (v55 + (uint64_t)v101) / 0x2AuLL;
        uint64_t v43 = *(void *)(*((void *)&v99 + 1) + 8 * v57);
        unint64_t v44 = v56 - 42 * v57;
        uint64_t v45 = *(void **)(v43 + 96 * v44 + 56);
        if (!v45) {
          goto LABEL_23;
        }
        goto LABEL_22;
      case 0xFFFFFC1F:
LABEL_21:
        unint64_t v42 = *((void *)&v101 + 1) + v101 - 1;
        uint64_t v43 = *(void *)(*((void *)&v99 + 1) + 8 * (v42 / 0x2A));
        unint64_t v44 = v42 % 0x2A;
        uint64_t v45 = *(void **)(v43 + 96 * (v42 % 0x2A) + 56);
        if (v45)
        {
LABEL_22:
          *(void *)(v43 + 96 * v44 + 64) = v45;
          operator delete(v45);
        }
LABEL_23:
        uint64_t v46 = *(void **)(v43 + 96 * v44 + 32);
        if (v46)
        {
          *(void *)(v43 + 96 * v44 + 40) = v46;
          operator delete(v46);
        }
        uint64_t v47 = 42 * ((uint64_t)(v100 - *((void *)&v99 + 1)) >> 3) - 1;
        long long v48 = v101;
        --*((void *)&v101 + 1);
        if ((void)v100 == *((void *)&v99 + 1)) {
          uint64_t v47 = 0;
        }
        if ((unint64_t)(v47 - (*((void *)&v48 + 1) + v48) + 1) >= 0x54)
        {
          operator delete(*(void **)(v100 - 8));
          *(void *)&long long v100 = v100 - 8;
        }
        goto LABEL_8;
      case 0xFFFFFC20:
        *(void *)&long long v58 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v58 + 1) = 0xAAAAAAAAAAAAAAAALL;
        *(_OWORD *)&v98[64] = v58;
        *(_OWORD *)&v98[80] = v58;
        *(_OWORD *)&v98[32] = v58;
        *(_OWORD *)&v98[48] = v58;
        *(_OWORD *)v98 = v58;
        *(_OWORD *)&v98[16] = v58;
        std::__state<char>::__state((uint64_t)v98, (long long *)(v36 + 96 * v37));
        (*(void (**)(void, uint64_t, unint64_t))(*(void *)*v40 + 24))(*v40, 1, v36 + 96 * v37);
        (*(void (**)(void, void, unsigned char *))(**(void **)&v98[80] + 24))(*(void *)&v98[80], 0, v98);
        uint64_t v59 = *((void *)&v99 + 1);
        if ((void)v100 == *((void *)&v99 + 1)) {
          uint64_t v60 = 0;
        }
        else {
          uint64_t v60 = 42 * ((uint64_t)(v100 - *((void *)&v99 + 1)) >> 3) - 1;
        }
        unint64_t v61 = *((void *)&v101 + 1) + v101;
        if (v60 == *((void *)&v101 + 1) + (void)v101)
        {
          std::deque<std::__state<char>>::__add_back_capacity((uint64_t)&v99);
          uint64_t v59 = *((void *)&v99 + 1);
          unint64_t v61 = *((void *)&v101 + 1) + v101;
        }
        unint64_t v62 = *(void *)(v59 + 8 * (v61 / 0x2A)) + 96 * (v61 % 0x2A);
        long long v63 = *(_OWORD *)&v98[16];
        *(_OWORD *)unint64_t v62 = *(_OWORD *)v98;
        *(_OWORD *)(v62 + 16) = v63;
        *(void *)(v62 + 40) = 0;
        *(void *)(v62 + 48) = 0;
        *(void *)(v62 + 32) = 0;
        *(_OWORD *)(v62 + 32) = *(_OWORD *)&v98[32];
        *(void *)(v62 + 48) = *(void *)&v98[48];
        memset(&v98[32], 0, 24);
        *(void *)(v62 + 56) = 0;
        *(void *)(v62 + 64) = 0;
        *(void *)(v62 + 72) = 0;
        *(_OWORD *)(v62 + 56) = *(_OWORD *)&v98[56];
        *(void *)(v62 + 72) = *(void *)&v98[72];
        memset(&v98[56], 0, 24);
        uint64_t v64 = *(void *)&v98[80];
        *(void *)(v62 + 85) = *(void *)&v98[85];
        *(void *)(v62 + 80) = v64;
        ++*((void *)&v101 + 1);
        if (*(void *)&v98[56])
        {
          *(void *)&v98[64] = *(void *)&v98[56];
          operator delete(*(void **)&v98[56]);
        }
        if (*(void *)&v98[32])
        {
          *(void *)&v98[40] = *(void *)&v98[32];
          operator delete(*(void **)&v98[32]);
        }
        goto LABEL_8;
      default:
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)16>();
    }
  }
}

void sub_1C5800AC8(_Unwind_Exception *a1)
{
  std::deque<std::__state<char>>::~deque[abi:ne180100]((void **)(v1 - 144));
  _Unwind_Resume(a1);
}

void sub_1C5800ADC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  std::__state<char>::~__state((uint64_t *)va);
  std::deque<std::__state<char>>::~deque[abi:ne180100]((void **)(v9 - 144));
  _Unwind_Resume(a1);
}

void sub_1C5800B24(_Unwind_Exception *a1)
{
  std::deque<std::__state<char>>::~deque[abi:ne180100]((void **)(v1 - 144));
  _Unwind_Resume(a1);
}

void sub_1C5800B38(_Unwind_Exception *a1)
{
  std::deque<std::__state<char>>::~deque[abi:ne180100]((void **)(v1 - 144));
  _Unwind_Resume(a1);
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_subs<std::allocator<std::sub_match<char const*>>>(uint64_t a1, const char *a2, const char *a3, uint64_t *a4, int a5, char a6)
{
  size_t v67 = 0;
  uint64_t v68 = 0;
  unint64_t v69 = 0;
  *(_DWORD *)&v66[36] = -1431655766;
  *(void *)uint64_t v64 = 0xAAAAAAAA00000000;
  memset(&v64[8], 0, 32);
  *(_OWORD *)uint64_t v65 = 0u;
  memset(v66, 0, 36);
  uint64_t v6 = *(void *)(a1 + 40);
  if (!v6) {
    goto LABEL_63;
  }
  __x.second = a3;
  *(void *)&__x.matched = 0xAAAAAAAAAAAAAA00;
  __x.first = a3;
  *(_DWORD *)unint64_t v62 = 0;
  memset(&v62[8], 0, 85);
  uint64_t v68 = std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>((void **)&v67, (uint64_t)v62);
  if (*(void *)&v62[56])
  {
    *(void *)&v62[64] = *(void *)&v62[56];
    operator delete(*(void **)&v62[56]);
  }
  if (*(void *)&v62[32])
  {
    *(void *)&v62[40] = *(void *)&v62[32];
    operator delete(*(void **)&v62[32]);
  }
  uint64_t v13 = v68;
  *((_DWORD *)v68 - 24) = 0;
  *((void *)v13 - 11) = a2;
  *((void *)v13 - 10) = a2;
  *((void *)v13 - 9) = a3;
  uint64_t v14 = *((void *)v13 - 8);
  unint64_t v15 = *(unsigned int *)(a1 + 28);
  unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((*((void *)v13 - 7) - v14) >> 3);
  if (v15 <= v16)
  {
    if (v15 < v16) {
      *((void *)v13 - 7) = v14 + 24 * v15;
    }
  }
  else
  {
    std::vector<std::sub_match<char const*>>::__append((std::vector<std::csub_match> *)(v13 - 64), v15 - v16, &__x);
    uint64_t v13 = v68;
  }
  uint64_t v17 = *((void *)v13 - 5);
  unint64_t v18 = *(unsigned int *)(a1 + 32);
  unint64_t v19 = (*((void *)v13 - 4) - v17) >> 4;
  long long v58 = a4;
  if (v18 <= v19)
  {
    if (v18 < v19) {
      *((void *)v13 - 4) = v17 + 16 * v18;
    }
  }
  else
  {
    std::vector<std::pair<unsigned long,char const*>>::__append((std::vector<std::pair<unsigned long, const char *>> *)(v13 - 40), v18 - v19);
    uint64_t v13 = v68;
  }
  char v61 = 0;
  unsigned int v20 = 0;
  unint64_t v21 = (const char *)(a3 - a2);
  *((void *)v13 - 2) = v6;
  *((_DWORD *)v13 - 2) = a5;
  *(v13 - 4) = a6;
  uint64_t v60 = 0;
  uint64_t v59 = a3;
  do
  {
    BOOL v22 = (++v20 & 0xFFF) != 0 || (int)(v20 >> 12) < (int)v21;
    if (!v22) {
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)12>();
    }
    char v24 = v13 - 16;
    uint64_t v23 = *((void *)v13 - 2);
    uint64_t v25 = v13 - 96;
    if (v23) {
      (*(void (**)(uint64_t, char *))(*(void *)v23 + 16))(v23, v13 - 96);
    }
    switch(*(_DWORD *)v25)
    {
      case 0xFFFFFC18:
        uint64_t v26 = (const char *)*((void *)v13 - 10);
        if ((a5 & 0x20) != 0 && v26 == a2 || (a5 & 0x1000) != 0 && v26 != v59) {
          goto LABEL_29;
        }
        uint64_t v34 = &v26[-*((void *)v13 - 11)];
        unint64_t v35 = v60;
        if ((v61 & ((uint64_t)v60 >= (uint64_t)v34)) == 0)
        {
          long long v36 = *((_OWORD *)v13 - 5);
          *(_OWORD *)uint64_t v64 = *(_OWORD *)v25;
          *(_OWORD *)&v64[16] = v36;
          if (v64 != v25)
          {
            std::vector<std::sub_match<char const*>>::__assign_with_size[abi:ne180100]<std::sub_match<char const*>*,std::sub_match<char const*>*>((char **)&v64[32], *((char **)v13 - 8), *((char **)v13 - 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)v13 - 7) - *((void *)v13 - 8)) >> 3));
            std::vector<std::pair<unsigned long,char const*>>::__assign_with_size[abi:ne180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>((uint64_t)v66, *((const double **)v13 - 5), *((const double **)v13 - 4), (uint64_t)(*((void *)v13 - 4) - *((void *)v13 - 5)) >> 4);
          }
          uint64_t v37 = *(void *)v24;
          *(void *)&v66[29] = *(void *)(v13 - 11);
          *(void *)&v66[24] = v37;
          unint64_t v35 = v34;
        }
        uint64_t v38 = v68;
        if (v35 == v21)
        {
          uint64_t v39 = v67;
          while (v38 != v39)
          {
            unint64_t v40 = (void *)*((void *)v38 - 5);
            if (v40)
            {
              *((void *)v38 - 4) = v40;
              operator delete(v40);
            }
            uint64_t v41 = (void *)*((void *)v38 - 8);
            if (v41)
            {
              *((void *)v38 - 7) = v41;
              operator delete(v41);
            }
            v38 -= 96;
          }
          uint64_t v68 = v39;
          char v61 = 1;
          uint64_t v60 = v21;
        }
        else
        {
          uint64_t v60 = v35;
          unint64_t v42 = (void *)*((void *)v68 - 5);
          if (v42)
          {
            *((void *)v68 - 4) = v42;
            operator delete(v42);
          }
          uint64_t v43 = (void *)*((void *)v38 - 8);
          if (v43)
          {
            *((void *)v38 - 7) = v43;
            operator delete(v43);
          }
          uint64_t v68 = v38 - 96;
          char v61 = 1;
        }
        break;
      case 0xFFFFFC1D:
      case 0xFFFFFC1E:
      case 0xFFFFFC21:
        break;
      case 0xFFFFFC1F:
LABEL_29:
        unint64_t v27 = v68;
        unsigned int v28 = (void *)*((void *)v68 - 5);
        if (v28)
        {
          *((void *)v68 - 4) = v28;
          operator delete(v28);
        }
        unint64_t v29 = (void *)*((void *)v27 - 8);
        if (v29)
        {
          *((void *)v27 - 7) = v29;
          operator delete(v29);
        }
        uint64_t v68 = v27 - 96;
        break;
      case 0xFFFFFC20:
        *(void *)&long long v30 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v30 + 1) = 0xAAAAAAAAAAAAAAAALL;
        *(_OWORD *)&v62[64] = v30;
        *(_OWORD *)&v62[80] = v30;
        *(_OWORD *)&v62[32] = v30;
        *(_OWORD *)&v62[48] = v30;
        *(_OWORD *)unint64_t v62 = v30;
        *(_OWORD *)&v62[16] = v30;
        std::__state<char>::__state((uint64_t)v62, (long long *)v13 - 6);
        (*(void (**)(void, uint64_t, char *))(**(void **)v24 + 24))(*(void *)v24, 1, v13 - 96);
        (*(void (**)(void, void, unsigned char *))(**(void **)&v62[80] + 24))(*(void *)&v62[80], 0, v62);
        unint64_t v31 = v68;
        if ((unint64_t)v68 >= v69)
        {
          uint64_t v68 = std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>((void **)&v67, (uint64_t)v62);
          if (*(void *)&v62[56])
          {
            *(void *)&v62[64] = *(void *)&v62[56];
            operator delete(*(void **)&v62[56]);
          }
        }
        else
        {
          long long v32 = *(_OWORD *)&v62[16];
          *(_OWORD *)uint64_t v68 = *(_OWORD *)v62;
          *((_OWORD *)v31 + 1) = v32;
          *((void *)v31 + 4) = 0;
          *((void *)v31 + 5) = 0;
          *((void *)v31 + 6) = 0;
          *((void *)v31 + 7) = 0;
          *((_OWORD *)v31 + 2) = *(_OWORD *)&v62[32];
          *((void *)v31 + 6) = *(void *)&v62[48];
          memset(&v62[32], 0, 24);
          *((void *)v31 + 8) = 0;
          *((void *)v31 + 9) = 0;
          *(_OWORD *)(v31 + 56) = *(_OWORD *)&v62[56];
          *((void *)v31 + 9) = *(void *)&v62[72];
          memset(&v62[56], 0, 24);
          uint64_t v33 = *(void *)&v62[80];
          *(void *)(v31 + 85) = *(void *)&v62[85];
          *((void *)v31 + 10) = v33;
          uint64_t v68 = v31 + 96;
        }
        if (*(void *)&v62[32])
        {
          *(void *)&v62[40] = *(void *)&v62[32];
          operator delete(*(void **)&v62[32]);
        }
        break;
      default:
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)16>();
    }
    uint64_t v13 = v68;
  }
  while (v67 != v68);
  if ((v61 & 1) == 0)
  {
LABEL_63:
    uint64_t v50 = 0;
    uint64_t v51 = *(void **)v66;
    if (!*(void *)v66) {
      goto LABEL_65;
    }
    goto LABEL_64;
  }
  uint64_t v44 = *v58;
  *(void *)uint64_t v44 = a2;
  *(void *)(v44 + 8) = &v60[(void)a2];
  *(unsigned char *)(v44 + 16) = 1;
  if (v65[0] != *(void **)&v64[32])
  {
    unint64_t v45 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v65[0] - *(void *)&v64[32]) >> 3);
    uint64_t v46 = (unsigned char *)(*(void *)&v64[32] + 16);
    unsigned int v47 = 1;
    do
    {
      uint64_t v48 = v44 + 24 * v47;
      *(_OWORD *)uint64_t v48 = *((_OWORD *)v46 - 1);
      char v49 = *v46;
      v46 += 24;
      *(unsigned char *)(v48 + 16) = v49;
      BOOL v22 = v45 > v47++;
    }
    while (v22);
  }
  uint64_t v50 = 1;
  uint64_t v51 = *(void **)v66;
  if (*(void *)v66)
  {
LABEL_64:
    *(void *)&v66[8] = v51;
    operator delete(v51);
  }
LABEL_65:
  if (*(void *)&v64[32])
  {
    v65[0] = *(void **)&v64[32];
    operator delete(*(void **)&v64[32]);
  }
  long long v52 = v67;
  if (v67)
  {
    uint64_t v53 = v68;
    uint64_t v54 = v67;
    if (v68 != v67)
    {
      do
      {
        uint64_t v55 = (void *)*((void *)v53 - 5);
        if (v55)
        {
          *((void *)v53 - 4) = v55;
          operator delete(v55);
        }
        uint64_t v56 = (void *)*((void *)v53 - 8);
        if (v56)
        {
          *((void *)v53 - 7) = v56;
          operator delete(v56);
        }
        v53 -= 96;
      }
      while (v53 != v52);
      uint64_t v54 = v67;
    }
    uint64_t v68 = v52;
    operator delete(v54);
  }
  return v50;
}

void sub_1C580116C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  std::__state<char>::~__state(&a33);
  std::vector<std::__state<char>>::~vector[abi:ne180100]((void **)(v33 - 120));
  _Unwind_Resume(a1);
}

void std::deque<std::__state<char>>::clear(void *a1)
{
  uint64_t v2 = (void **)a1[1];
  uint64_t v3 = (void **)a1[2];
  if (v3 == v2)
  {
    a1[5] = 0;
    unint64_t v11 = 0;
  }
  else
  {
    unint64_t v4 = a1[4];
    std::basic_regex<char>::value_type v5 = &v2[v4 / 0x2A];
    uint64_t v6 = (char *)*v5 + 96 * (v4 % 0x2A);
    unint64_t v7 = (unint64_t)v2[(a1[5] + v4) / 0x2A] + 96 * ((a1[5] + v4) % 0x2A);
    if (v6 != (char *)v7)
    {
      do
      {
        uint64_t v8 = (void *)*((void *)v6 + 7);
        if (v8)
        {
          *((void *)v6 + 8) = v8;
          operator delete(v8);
        }
        uint64_t v9 = (void *)*((void *)v6 + 4);
        if (v9)
        {
          *((void *)v6 + 5) = v9;
          operator delete(v9);
        }
        v6 += 96;
        if (v6 - (unsigned char *)*v5 == 4032)
        {
          uint64_t v10 = (char *)v5[1];
          ++v5;
          uint64_t v6 = v10;
        }
      }
      while (v6 != (char *)v7);
      uint64_t v2 = (void **)a1[1];
      uint64_t v3 = (void **)a1[2];
    }
    a1[5] = 0;
    unint64_t v11 = (char *)v3 - (char *)v2;
    if (v11 >= 0x11)
    {
      do
      {
        operator delete(*v2);
        uint64_t v12 = a1[2];
        uint64_t v2 = (void **)(a1[1] + 8);
        a1[1] = v2;
        unint64_t v11 = v12 - (void)v2;
      }
      while (v11 > 0x10);
    }
  }
  if (v11 >> 3 == 1)
  {
    uint64_t v13 = 21;
  }
  else
  {
    if (v11 >> 3 != 2) {
      return;
    }
    uint64_t v13 = 42;
  }
  a1[4] = v13;
}

void **std::deque<std::__state<char>>::~deque[abi:ne180100](void **a1)
{
  std::deque<std::__state<char>>::clear(a1);
  uint64_t v2 = (void **)a1[1];
  uint64_t v3 = (void **)a1[2];
  if (v2 != v3)
  {
    do
    {
      unint64_t v4 = *v2++;
      operator delete(v4);
    }
    while (v2 != v3);
    uint64_t v6 = a1[1];
    std::basic_regex<char>::value_type v5 = a1[2];
    if (v5 != v6) {
      a1[2] = &v5[(v6 - v5 + 7) & 0xFFFFFFFFFFFFFFF8];
    }
  }
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::deque<std::__state<char>>::__add_back_capacity(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 32);
  BOOL v3 = v2 >= 0x2A;
  unint64_t v4 = v2 - 42;
  if (v3)
  {
    *(void *)(a1 + 32) = v4;
    uint64_t v6 = *(void **)(a1 + 8);
    std::basic_regex<char>::value_type v5 = *(char **)(a1 + 16);
    unint64_t v7 = (char *)(v6 + 1);
    uint64_t v8 = *v6;
    *(void *)(a1 + 8) = v6 + 1;
    if (v5 != *(char **)(a1 + 24))
    {
LABEL_78:
      *(void *)std::basic_regex<char>::value_type v5 = v8;
      *(void *)(a1 + 16) += 8;
      return;
    }
    uint64_t v9 = *(char **)a1;
    uint64_t v10 = (uint64_t)&v7[-*(void *)a1];
    if ((unint64_t)v7 <= *(void *)a1)
    {
      unint64_t v32 = (v5 - v9) >> 2;
      if (v5 == v9) {
        unint64_t v32 = 1;
      }
      if (!(v32 >> 61))
      {
        unint64_t v33 = v32 >> 2;
        uint64_t v34 = 8 * v32;
        unint64_t v35 = (char *)operator new(8 * v32);
        long long v36 = &v35[8 * v33];
        uint64_t v37 = &v35[v34];
        int64_t v39 = v5 - v7;
        BOOL v38 = v5 == v7;
        std::basic_regex<char>::value_type v5 = v36;
        if (!v38)
        {
          std::basic_regex<char>::value_type v5 = &v36[v39 & 0xFFFFFFFFFFFFFFF8];
          unint64_t v40 = v39 - 8;
          if ((unint64_t)(v39 - 8) >= 0x38)
          {
            int64_t v73 = &v35[8 * v33];
            uint64_t v41 = v73;
            if ((unint64_t)(v73 - v7) >= 0x20)
            {
              uint64_t v74 = (v40 >> 3) + 1;
              uint64_t v75 = 8 * (v74 & 0x3FFFFFFFFFFFFFFCLL);
              uint64_t v41 = &v36[v75];
              v7 += v75;
              uint64_t v76 = (long long *)(v6 + 3);
              unint64_t v77 = v73 + 16;
              uint64_t v78 = v74 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v79 = *v76;
                *(v77 - 1) = *(v76 - 1);
                _OWORD *v77 = v79;
                v76 += 2;
                v77 += 2;
                v78 -= 4;
              }
              while (v78);
              if (v74 == (v74 & 0x3FFFFFFFFFFFFFFCLL)) {
                goto LABEL_76;
              }
            }
          }
          else
          {
            uint64_t v41 = &v35[8 * v33];
          }
          do
          {
            uint64_t v80 = *(void *)v7;
            v7 += 8;
            *(void *)uint64_t v41 = v80;
            v41 += 8;
          }
          while (v41 != v5);
        }
        goto LABEL_76;
      }
LABEL_87:
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
LABEL_5:
    uint64_t v11 = v10 >> 3;
    if (v11 >= -1) {
      uint64_t v12 = v11 + 1;
    }
    else {
      uint64_t v12 = v11 + 2;
    }
    uint64_t v13 = v12 >> 1;
    uint64_t v14 = -v13;
    unint64_t v15 = &v7[-8 * v13];
    int64_t v16 = v5 - v7;
    if (v5 != v7)
    {
      memmove(&v7[-8 * v13], v7, v5 - v7);
      unint64_t v7 = *(char **)(a1 + 8);
    }
    std::basic_regex<char>::value_type v5 = &v15[v16];
    *(void *)(a1 + 8) = &v7[8 * v14];
    *(void *)(a1 + 16) = &v15[v16];
    goto LABEL_78;
  }
  uint64_t v18 = *(void *)(a1 + 16);
  uint64_t v17 = *(void *)(a1 + 24);
  uint64_t v19 = *(void *)(a1 + 8);
  uint64_t v20 = v18 - v19;
  uint64_t v21 = (v18 - v19) >> 3;
  uint64_t v22 = v17 - *(void *)a1;
  if (v21 < (unint64_t)(v22 >> 3))
  {
    if (v17 != v18)
    {
      uint64_t v89 = operator new(0xFC0uLL);
      std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_back((char **)a1, &v89);
      return;
    }
    uint64_t v89 = operator new(0xFC0uLL);
    std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_front((void **)a1, &v89);
    unint64_t v42 = *(void **)(a1 + 8);
    std::basic_regex<char>::value_type v5 = *(char **)(a1 + 16);
    unint64_t v7 = (char *)(v42 + 1);
    uint64_t v8 = *v42;
    *(void *)(a1 + 8) = v42 + 1;
    if (v5 != *(char **)(a1 + 24)) {
      goto LABEL_78;
    }
    uint64_t v9 = *(char **)a1;
    uint64_t v10 = (uint64_t)&v7[-*(void *)a1];
    if ((unint64_t)v7 <= *(void *)a1)
    {
      unint64_t v43 = (v5 - v9) >> 2;
      if (v5 == v9) {
        unint64_t v43 = 1;
      }
      if (!(v43 >> 61))
      {
        unint64_t v44 = v43 >> 2;
        uint64_t v45 = 8 * v43;
        unint64_t v35 = (char *)operator new(8 * v43);
        long long v36 = &v35[8 * v44];
        uint64_t v37 = &v35[v45];
        int64_t v46 = v5 - v7;
        BOOL v38 = v5 == v7;
        std::basic_regex<char>::value_type v5 = v36;
        if (!v38)
        {
          std::basic_regex<char>::value_type v5 = &v36[v46 & 0xFFFFFFFFFFFFFFF8];
          unint64_t v47 = v46 - 8;
          if ((unint64_t)(v46 - 8) >= 0x38)
          {
            long long v81 = &v35[8 * v44];
            uint64_t v48 = v81;
            if ((unint64_t)(v81 - v7) >= 0x20)
            {
              uint64_t v82 = (v47 >> 3) + 1;
              uint64_t v83 = 8 * (v82 & 0x3FFFFFFFFFFFFFFCLL);
              uint64_t v48 = &v36[v83];
              v7 += v83;
              uint64_t v84 = (long long *)(v42 + 3);
              uint64_t v85 = v81 + 16;
              uint64_t v86 = v82 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v87 = *v84;
                *(v85 - 1) = *(v84 - 1);
                *uint64_t v85 = v87;
                v84 += 2;
                v85 += 2;
                v86 -= 4;
              }
              while (v86);
              if (v82 == (v82 & 0x3FFFFFFFFFFFFFFCLL)) {
                goto LABEL_76;
              }
            }
          }
          else
          {
            uint64_t v48 = &v35[8 * v44];
          }
          do
          {
            uint64_t v88 = *(void *)v7;
            v7 += 8;
            *(void *)uint64_t v48 = v88;
            v48 += 8;
          }
          while (v48 != v5);
        }
LABEL_76:
        *(void *)a1 = v35;
        *(void *)(a1 + 8) = v36;
        *(void *)(a1 + 16) = v5;
        *(void *)(a1 + 24) = v37;
        if (v9)
        {
          operator delete(v9);
          std::basic_regex<char>::value_type v5 = *(char **)(a1 + 16);
        }
        goto LABEL_78;
      }
      goto LABEL_87;
    }
    goto LABEL_5;
  }
  uint64_t v23 = v22 >> 2;
  if (v17 == *(void *)a1) {
    unint64_t v24 = 1;
  }
  else {
    unint64_t v24 = v23;
  }
  if (v24 >> 61) {
    goto LABEL_87;
  }
  uint64_t v25 = (char *)operator new(8 * v24);
  uint64_t v26 = operator new(0xFC0uLL);
  unint64_t v27 = &v25[8 * v21];
  unsigned int v28 = &v25[8 * v24];
  if (v21 == v24)
  {
    long long v30 = v26;
    if (v20 < 1)
    {
      if (v18 == v19) {
        unint64_t v49 = 1;
      }
      else {
        unint64_t v49 = v20 >> 2;
      }
      if (v49 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      unint64_t v27 = (char *)operator new(8 * v49);
      unsigned int v28 = &v27[8 * v49];
      operator delete(v25);
      uint64_t v50 = *(void *)(a1 + 8);
      uint64_t v18 = *(void *)(a1 + 16);
      uint64_t v25 = v27;
      *(void *)unint64_t v27 = v30;
      unint64_t v29 = v27 + 8;
      if (v18 == v50) {
        goto LABEL_45;
      }
    }
    else
    {
      unint64_t v31 = v21 + 2;
      if (v21 >= -1) {
        unint64_t v31 = v21 + 1;
      }
      v27 -= 8 * (v31 >> 1);
      *(void *)unint64_t v27 = v26;
      unint64_t v29 = v27 + 8;
      if (v18 == v19) {
        goto LABEL_45;
      }
    }
    goto LABEL_51;
  }
  *(void *)unint64_t v27 = v26;
  unint64_t v29 = v27 + 8;
  if (v18 != v19)
  {
    do
    {
LABEL_51:
      if (v27 == v25)
      {
        if (v29 >= v28)
        {
          if (v28 == v25) {
            unint64_t v57 = 1;
          }
          else {
            unint64_t v57 = (v28 - v25) >> 2;
          }
          if (v57 >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          long long v58 = (char *)operator new(8 * v57);
          uint64_t v59 = v58;
          unint64_t v60 = (v57 + 3) >> 2;
          unint64_t v27 = &v58[8 * v60];
          int64_t v61 = v29 - v25;
          BOOL v38 = v29 == v25;
          unint64_t v29 = v27;
          if (!v38)
          {
            unint64_t v29 = &v27[v61 & 0xFFFFFFFFFFFFFFF8];
            unint64_t v62 = v61 - 8;
            long long v63 = &v58[8 * v60];
            uint64_t v64 = v25;
            if (v62 < 0x38) {
              goto LABEL_91;
            }
            uint64_t v65 = 8 * v60;
            long long v63 = &v58[8 * v60];
            uint64_t v64 = v25;
            if ((unint64_t)(v63 - v25) < 0x20) {
              goto LABEL_91;
            }
            uint64_t v66 = (v62 >> 3) + 1;
            uint64_t v67 = 8 * (v66 & 0x3FFFFFFFFFFFFFFCLL);
            long long v63 = &v27[v67];
            uint64_t v64 = &v25[v67];
            uint64_t v68 = (long long *)(v25 + 16);
            unint64_t v69 = &v58[v65 + 16];
            uint64_t v70 = v66 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v71 = *v68;
              *((_OWORD *)v69 - 1) = *(v68 - 1);
              *(_OWORD *)unint64_t v69 = v71;
              v68 += 2;
              v69 += 32;
              v70 -= 4;
            }
            while (v70);
            if (v66 != (v66 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_91:
              do
              {
                uint64_t v72 = *(void *)v64;
                v64 += 8;
                *(void *)long long v63 = v72;
                v63 += 8;
              }
              while (v63 != v29);
            }
          }
          unsigned int v28 = &v58[8 * v57];
          operator delete(v25);
          uint64_t v25 = v59;
        }
        else
        {
          uint64_t v53 = (v28 - v29) >> 3;
          if (v53 >= -1) {
            uint64_t v54 = v53 + 1;
          }
          else {
            uint64_t v54 = v53 + 2;
          }
          uint64_t v55 = v54 >> 1;
          unint64_t v27 = &v25[8 * (v54 >> 1)];
          uint64_t v56 = v25;
          if (v29 != v25)
          {
            memmove(v27, v25, v29 - v25);
            uint64_t v56 = v29;
          }
          unint64_t v29 = (char *)v56 + 8 * v55;
        }
      }
      uint64_t v52 = *(void *)(v18 - 8);
      v18 -= 8;
      *((void *)v27 - 1) = v52;
      v27 -= 8;
    }
    while (v18 != *(void *)(a1 + 8));
  }
LABEL_45:
  uint64_t v51 = *(char **)a1;
  *(void *)a1 = v25;
  *(void *)(a1 + 8) = v27;
  *(void *)(a1 + 16) = v29;
  *(void *)(a1 + 24) = v28;
  if (v51)
  {
    operator delete(v51);
  }
}

void sub_1C5801918(_Unwind_Exception *a1)
{
  operator delete(v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_back(char **a1, void *a2)
{
  unint64_t v4 = a1[2];
  if (v4 != a1[3]) {
    goto LABEL_22;
  }
  std::basic_regex<char>::value_type v5 = *a1;
  uint64_t v6 = a1[1];
  if (v6 > *a1)
  {
    uint64_t v7 = (v6 - *a1) >> 3;
    if (v7 >= -1) {
      uint64_t v8 = v7 + 1;
    }
    else {
      uint64_t v8 = v7 + 2;
    }
    uint64_t v9 = v8 >> 1;
    uint64_t v10 = -v9;
    uint64_t v11 = &v6[-8 * v9];
    int64_t v12 = v4 - v6;
    if (v4 != v6)
    {
      memmove(&v6[-8 * v9], a1[1], v4 - v6);
      unint64_t v4 = a1[1];
    }
    uint64_t v13 = &v4[8 * v10];
    unint64_t v4 = &v11[v12];
    a1[1] = v13;
    a1[2] = &v11[v12];
    goto LABEL_22;
  }
  unint64_t v14 = (v4 - v5) >> 2;
  if (v4 == v5) {
    unint64_t v14 = 1;
  }
  if (v14 >> 61) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  unint64_t v15 = v14 >> 2;
  uint64_t v16 = 8 * v14;
  uint64_t v17 = (char *)operator new(8 * v14);
  uint64_t v18 = &v17[8 * v15];
  int64_t v20 = v4 - v6;
  BOOL v19 = v4 == v6;
  unint64_t v4 = v18;
  if (!v19)
  {
    unint64_t v4 = &v18[v20 & 0xFFFFFFFFFFFFFFF8];
    unint64_t v21 = v20 - 8;
    if ((unint64_t)(v20 - 8) < 0x38)
    {
      uint64_t v22 = &v17[8 * v15];
      do
      {
LABEL_19:
        uint64_t v31 = *(void *)v6;
        v6 += 8;
        *(void *)uint64_t v22 = v31;
        v22 += 8;
      }
      while (v22 != v4);
      goto LABEL_20;
    }
    uint64_t v23 = &v17[8 * v15];
    uint64_t v22 = v23;
    if ((unint64_t)(v23 - v6) < 0x20) {
      goto LABEL_19;
    }
    uint64_t v24 = (v21 >> 3) + 1;
    uint64_t v25 = 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
    uint64_t v22 = &v18[v25];
    uint64_t v26 = &v6[v25];
    unint64_t v27 = (long long *)(v6 + 16);
    unsigned int v28 = v23 + 16;
    uint64_t v29 = v24 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v30 = *v27;
      *(v28 - 1) = *(v27 - 1);
      *unsigned int v28 = v30;
      v27 += 2;
      v28 += 2;
      v29 -= 4;
    }
    while (v29);
    uint64_t v6 = v26;
    if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL)) {
      goto LABEL_19;
    }
  }
LABEL_20:
  *a1 = v17;
  a1[1] = v18;
  a1[2] = v4;
  a1[3] = &v17[v16];
  if (v5)
  {
    operator delete(v5);
    unint64_t v4 = a1[2];
  }
LABEL_22:
  *(void *)unint64_t v4 = *a2;
  a1[2] += 8;
}

void std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_front(void **a1, void *a2)
{
  unint64_t v4 = (char *)a1[1];
  if (v4 == *a1)
  {
    uint64_t v7 = a1[2];
    uint64_t v6 = a1[3];
    if (v7 >= v6)
    {
      uint64_t v13 = v6 - v4;
      BOOL v12 = v13 == 0;
      unint64_t v14 = v13 >> 2;
      if (v12) {
        unint64_t v14 = 1;
      }
      if (v14 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      unint64_t v15 = (v14 + 3) >> 2;
      uint64_t v16 = 8 * v14;
      uint64_t v17 = (char *)operator new(8 * v14);
      std::basic_regex<char>::value_type v5 = &v17[8 * v15];
      uint64_t v18 = v5;
      uint64_t v19 = v7 - v4;
      if (v7 != v4)
      {
        uint64_t v18 = &v5[v19 & 0xFFFFFFFFFFFFFFF8];
        unint64_t v20 = v19 - 8;
        unint64_t v21 = &v17[8 * v15];
        uint64_t v22 = v4;
        if (v20 < 0x38) {
          goto LABEL_27;
        }
        uint64_t v23 = &v17[8 * v15];
        unint64_t v21 = v23;
        uint64_t v22 = v4;
        if ((unint64_t)(v23 - v4) < 0x20) {
          goto LABEL_27;
        }
        uint64_t v24 = (v20 >> 3) + 1;
        uint64_t v25 = 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
        unint64_t v21 = &v5[v25];
        uint64_t v22 = &v4[v25];
        uint64_t v26 = (long long *)(v4 + 16);
        unint64_t v27 = v23 + 16;
        uint64_t v28 = v24 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v29 = *v26;
          *(v27 - 1) = *(v26 - 1);
          _OWORD *v27 = v29;
          v26 += 2;
          v27 += 2;
          v28 -= 4;
        }
        while (v28);
        if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_27:
          do
          {
            uint64_t v30 = *(void *)v22;
            v22 += 8;
            *(void *)unint64_t v21 = v30;
            v21 += 8;
          }
          while (v21 != v18);
        }
      }
      *a1 = v17;
      a1[1] = v5;
      a1[2] = v18;
      a1[3] = &v17[v16];
      if (v4)
      {
        operator delete(v4);
        std::basic_regex<char>::value_type v5 = (char *)a1[1];
      }
    }
    else
    {
      uint64_t v8 = (v6 - v7) >> 3;
      if (v8 >= -1) {
        uint64_t v9 = v8 + 1;
      }
      else {
        uint64_t v9 = v8 + 2;
      }
      uint64_t v10 = v9 >> 1;
      uint64_t v11 = &v7[8 * (v9 >> 1)];
      std::basic_regex<char>::value_type v5 = &v11[-(v7 - v4)];
      if (v7 != v4)
      {
        memmove(&v11[-(v7 - v4)], v4, v7 - v4);
        unint64_t v4 = (char *)a1[2];
      }
      a1[1] = v5;
      a1[2] = &v4[8 * v10];
    }
  }
  else
  {
    std::basic_regex<char>::value_type v5 = (char *)a1[1];
  }
  *((void *)v5 - 1) = *a2;
  a1[1] = (char *)a1[1] - 8;
}

void std::deque<std::__state<char>>::__add_front_capacity(uint64_t a1)
{
  BOOL v3 = *(uint64_t **)(a1 + 8);
  unint64_t v2 = *(uint64_t **)(a1 + 16);
  unint64_t v4 = v2 - v3;
  if (v2 == v3) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = 42 * v4 - 1;
  }
  uint64_t v6 = *(void *)(a1 + 32);
  if ((unint64_t)(v5 - (*(void *)(a1 + 40) + v6)) >= 0x2A)
  {
    *(void *)(a1 + 32) = v6 + 42;
    unint64_t v47 = (void *)*(v2 - 1);
    *(void *)(a1 + 16) = v2 - 1;
    std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_front((void **)a1, &v47);
    return;
  }
  uint64_t v7 = *(uint64_t **)(a1 + 24);
  uint64_t v8 = *(uint64_t **)a1;
  uint64_t v9 = (uint64_t)v7 - *(void *)a1;
  if (v4 < v9 >> 3)
  {
    if (v3 == v8)
    {
      unint64_t v47 = operator new(0xFC0uLL);
      std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_back((char **)a1, &v47);
      uint64_t v43 = *(void *)(a1 + 16);
      unint64_t v47 = *(void **)(v43 - 8);
      *(void *)(a1 + 16) = v43 - 8;
      std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_front((void **)a1, &v47);
      if (*(void *)(a1 + 16) - *(void *)(a1 + 8) == 8) {
        goto LABEL_9;
      }
    }
    else
    {
      unint64_t v47 = operator new(0xFC0uLL);
      std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_front((void **)a1, &v47);
      if (*(void *)(a1 + 16) - *(void *)(a1 + 8) == 8)
      {
LABEL_9:
        uint64_t v10 = 21;
LABEL_45:
        *(void *)(a1 + 32) = v10;
        return;
      }
    }
    uint64_t v10 = *(void *)(a1 + 32) + 42;
    goto LABEL_45;
  }
  if (v7 == v8) {
    unint64_t v11 = 1;
  }
  else {
    unint64_t v11 = v9 >> 2;
  }
  if (v11 >> 61) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  BOOL v12 = (char *)operator new(8 * v11);
  uint64_t v13 = operator new(0xFC0uLL);
  unint64_t v14 = v13;
  if (v11)
  {
    unint64_t v15 = &v12[8 * v11];
    *(void *)BOOL v12 = v13;
    uint64_t v16 = v12 + 8;
    if (v3 != v2)
    {
LABEL_16:
      uint64_t v17 = v12;
      while (1)
      {
        if (v16 == v15)
        {
          if (v17 <= v12)
          {
            if (v16 == v12) {
              unint64_t v26 = 1;
            }
            else {
              unint64_t v26 = (v16 - v12) >> 2;
            }
            if (v26 >> 61) {
              std::__throw_bad_array_new_length[abi:ne180100]();
            }
            unint64_t v27 = (char *)operator new(8 * v26);
            uint64_t v28 = v27;
            unint64_t v29 = v26 >> 2;
            uint64_t v18 = &v27[8 * (v26 >> 2)];
            int64_t v31 = v16 - v17;
            BOOL v30 = v16 == v17;
            uint64_t v16 = v18;
            if (!v30)
            {
              uint64_t v16 = &v18[v31 & 0xFFFFFFFFFFFFFFF8];
              unint64_t v32 = v31 - 8;
              if (v32 < 0x38 || (uint64_t v33 = 8 * v29, (unint64_t)(&v27[8 * v29] - v17) < 0x20))
              {
                uint64_t v34 = &v27[8 * (v26 >> 2)];
                unint64_t v35 = v17;
                goto LABEL_35;
              }
              uint64_t v37 = (v32 >> 3) + 1;
              uint64_t v38 = 8 * (v37 & 0x3FFFFFFFFFFFFFFCLL);
              uint64_t v34 = &v18[v38];
              unint64_t v35 = &v17[v38];
              int64_t v39 = (long long *)(v17 + 16);
              unint64_t v40 = &v27[v33 + 16];
              uint64_t v41 = v37 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v42 = *v39;
                *((_OWORD *)v40 - 1) = *(v39 - 1);
                *(_OWORD *)unint64_t v40 = v42;
                v39 += 2;
                v40 += 32;
                v41 -= 4;
              }
              while (v41);
              if (v37 != (v37 & 0x3FFFFFFFFFFFFFFCLL))
              {
                do
                {
LABEL_35:
                  uint64_t v36 = *(void *)v35;
                  v35 += 8;
                  *(void *)uint64_t v34 = v36;
                  v34 += 8;
                }
                while (v34 != v16);
              }
            }
            unint64_t v15 = &v27[8 * v26];
            if (v12) {
              operator delete(v12);
            }
            BOOL v12 = v28;
            goto LABEL_18;
          }
          uint64_t v20 = (v17 - v12) >> 3;
          if (v20 >= -1) {
            uint64_t v21 = v20 + 1;
          }
          else {
            uint64_t v21 = v20 + 2;
          }
          uint64_t v22 = v21 >> 1;
          uint64_t v23 = &v17[-8 * (v21 >> 1)];
          uint64_t v24 = v16;
          if (v16 != v17)
          {
            memmove(v23, v17, v16 - v17);
            uint64_t v24 = v17;
          }
          uint64_t v25 = -v22;
          unint64_t v15 = v16;
          uint64_t v16 = &v23[v16 - v17];
          uint64_t v18 = &v24[8 * v25];
        }
        else
        {
          uint64_t v18 = v17;
        }
LABEL_18:
        uint64_t v19 = *v3++;
        *(void *)uint64_t v16 = v19;
        v16 += 8;
        uint64_t v17 = v18;
        if (v3 == *(uint64_t **)(a1 + 16)) {
          goto LABEL_48;
        }
      }
    }
  }
  else
  {
    unint64_t v44 = (char *)operator new(8uLL);
    unint64_t v15 = v44 + 8;
    operator delete(v12);
    BOOL v3 = *(uint64_t **)(a1 + 8);
    uint64_t v45 = *(uint64_t **)(a1 + 16);
    BOOL v12 = v44;
    *(void *)unint64_t v44 = v14;
    uint64_t v16 = v44 + 8;
    if (v3 != v45) {
      goto LABEL_16;
    }
  }
  uint64_t v18 = v12;
LABEL_48:
  int64_t v46 = *(void **)a1;
  *(void *)a1 = v12;
  *(void *)(a1 + 8) = v18;
  *(void *)(a1 + 16) = v16;
  *(void *)(a1 + 24) = v15;
  if (v16 - v18 == 8)
  {
    *(void *)(a1 + 32) = 21;
    if (!v46) {
      return;
    }
  }
  else
  {
    *(void *)(a1 + 32) += 42;
    if (!v46) {
      return;
    }
  }

  operator delete(v46);
}

void sub_1C5801FE8(_Unwind_Exception *a1)
{
  operator delete(v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

char *std::vector<std::sub_match<char const*>>::__assign_with_size[abi:ne180100]<std::sub_match<char const*>*,std::sub_match<char const*>*>(char **a1, char *a2, char *a3, size_t __sz)
{
  uint64_t v6 = a2;
  uint64_t v8 = (uint64_t)a1[2];
  uint64_t result = *a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - (uint64_t)result) >> 3) >= __sz)
  {
    uint64_t v18 = a1[1];
    uint64_t v17 = a1 + 1;
    unint64_t v14 = v18;
    unint64_t v19 = 0xAAAAAAAAAAAAAAABLL * ((v18 - result) >> 3);
    if (v19 >= __sz)
    {
      uint64_t v24 = result;
      if (a2 != a3)
      {
        uint64_t v25 = result;
        do
        {
          *(_OWORD *)uint64_t v25 = *(_OWORD *)v6;
          v25[16] = v6[16];
          v24 += 24;
          v6 += 24;
          v25 += 24;
        }
        while (v6 != a3);
      }
      int64_t v16 = v24 - result;
      unint64_t v14 = result;
    }
    else
    {
      uint64_t v20 = &a2[24 * v19];
      if (v14 != result)
      {
        do
        {
          *(_OWORD *)uint64_t result = *(_OWORD *)v6;
          result[16] = v6[16];
          v6 += 24;
          result += 24;
        }
        while (v6 != v20);
      }
      uint64_t v21 = v14;
      if (v20 != a3)
      {
        uint64_t v22 = v14;
        do
        {
          long long v23 = *(_OWORD *)v20;
          *((void *)v22 + 2) = *((void *)v20 + 2);
          *(_OWORD *)uint64_t v22 = v23;
          v22 += 24;
          v20 += 24;
          v21 += 24;
        }
        while (v20 != a3);
      }
      int64_t v16 = v21 - v14;
    }
  }
  else
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      uint64_t v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (__sz > 0xAAAAAAAAAAAAAAALL) {
      goto LABEL_26;
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
    uint64_t v11 = 2 * v10;
    if (2 * v10 <= __sz) {
      uint64_t v11 = __sz;
    }
    unint64_t v12 = v10 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v11;
    if (v12 > 0xAAAAAAAAAAAAAAALL) {
LABEL_26:
    }
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    uint64_t v13 = 24 * v12;
    uint64_t result = (char *)operator new(24 * v12);
    unint64_t v14 = result;
    *a1 = result;
    a1[1] = result;
    a1[2] = &result[v13];
    unint64_t v15 = result;
    if (v6 != a3)
    {
      uint64_t result = (char *)memcpy(result, v6, 24 * ((a3 - v6 - 24) / 0x18uLL) + 24);
      unint64_t v15 = &v14[24 * ((a3 - v6 - 24) / 0x18uLL) + 24];
    }
    int64_t v16 = v15 - v14;
    uint64_t v17 = a1 + 1;
  }
  *uint64_t v17 = &v14[v16];
  return result;
}

double *std::vector<std::pair<unsigned long,char const*>>::__assign_with_size[abi:ne180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>(uint64_t a1, const double *a2, const double *a3, size_t __sz)
{
  uint64_t v8 = *(void *)(a1 + 16);
  uint64_t result = *(double **)a1;
  if (__sz > (v8 - (uint64_t)result) >> 4)
  {
    if (result)
    {
      *(void *)(a1 + 8) = result;
      operator delete(result);
      uint64_t v8 = 0;
      *(void *)a1 = 0;
      *(void *)(a1 + 8) = 0;
      *(void *)(a1 + 16) = 0;
    }
    if (__sz >> 60) {
      goto LABEL_62;
    }
    uint64_t v10 = v8 >> 3;
    if (v8 >> 3 <= __sz) {
      uint64_t v10 = __sz;
    }
    BOOL v37 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0;
    unint64_t v11 = 0xFFFFFFFFFFFFFFFLL;
    if (!v37) {
      unint64_t v11 = v10;
    }
    if (v11 >> 60) {
LABEL_62:
    }
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    uint64_t v12 = 2 * v11;
    uint64_t result = (double *)operator new(16 * v11);
    uint64_t v13 = result;
    *(void *)a1 = result;
    *(void *)(a1 + 8) = result;
    *(void *)(a1 + 16) = &result[v12];
    unint64_t v14 = result;
    if (a2 != a3)
    {
      uint64_t result = (double *)memcpy(result, a2, ((char *)a3 - (char *)a2) & 0xFFFFFFFFFFFFFFF0);
      unint64_t v14 = (double *)((char *)v13 + (((char *)a3 - (char *)a2) & 0xFFFFFFFFFFFFFFF0));
    }
    int64_t v15 = (char *)v14 - (char *)v13;
    int64_t v16 = (void *)(a1 + 8);
    goto LABEL_29;
  }
  uint64_t v17 = *(double **)(a1 + 8);
  int64_t v16 = (void *)(a1 + 8);
  uint64_t v13 = v17;
  int64_t v18 = (char *)v17 - (char *)result;
  unint64_t v19 = ((char *)v17 - (char *)result) >> 4;
  if (v19 >= __sz)
  {
    if (a2 == a3)
    {
      BOOL v30 = (char *)result;
    }
    else
    {
      unint64_t v29 = (char *)a3 - (char *)a2 - 16;
      if (v29 < 0xF0
        || ((unint64_t v47 = v29 & 0xFFFFFFFFFFFFFFF0 | 8,
             uint64_t v48 = (char *)result + v47,
             unint64_t v49 = (unint64_t)a2 + v47,
             unint64_t v50 = (v29 & 0xFFFFFFFFFFFFFFF0) + 16,
             result + 1 < (const double *)((char *)a2 + v50))
          ? (BOOL v51 = a2 + 1 >= (double *)((char *)result + v50))
          : (BOOL v51 = 1),
            v51 ? (char v52 = 0) : (char v52 = 1),
            v48 > (char *)a2 ? (BOOL v53 = (unint64_t)result >= v49) : (BOOL v53 = 1),
            !v53 || (v52 & 1) != 0))
      {
        BOOL v30 = (char *)result;
        int64_t v31 = a2;
      }
      else
      {
        uint64_t v54 = (v29 >> 4) + 1;
        uint64_t v55 = 2 * (v54 & 0x1FFFFFFFFFFFFFFCLL);
        BOOL v30 = (char *)&result[v55];
        int64_t v31 = &a2[v55];
        uint64_t v56 = a2 + 4;
        unint64_t v57 = result + 4;
        uint64_t v58 = v54 & 0x1FFFFFFFFFFFFFFCLL;
        do
        {
          uint64_t v59 = v56 - 4;
          float64x2x2_t v62 = vld2q_f64(v59);
          float64x2x2_t v64 = vld2q_f64(v56);
          unint64_t v60 = v57 - 4;
          vst2q_f64(v60, v62);
          vst2q_f64(v57, v64);
          v56 += 8;
          v57 += 8;
          v58 -= 4;
        }
        while (v58);
        if (v54 == (v54 & 0x1FFFFFFFFFFFFFFCLL)) {
          goto LABEL_28;
        }
      }
      do
      {
        uint64_t v32 = *(void *)v31;
        uint64_t v33 = *((void *)v31 + 1);
        v31 += 2;
        *(void *)BOOL v30 = v32;
        *((void *)v30 + 1) = v33;
        v30 += 16;
      }
      while (v31 != a3);
    }
LABEL_28:
    int64_t v15 = v30 - (char *)result;
    uint64_t v13 = result;
    goto LABEL_29;
  }
  uint64_t v20 = &a2[2 * v19];
  if (v13 != result)
  {
    unint64_t v21 = v18 - 16;
    if ((unint64_t)(v18 - 16) < 0xF0
      || ((unint64_t v34 = v18 & 0xFFFFFFFFFFFFFFF0,
           unint64_t v35 = (char *)result + v34 - 8,
           unint64_t v36 = (unint64_t)a2 + v34 - 8,
           result + 1 < (const double *)((char *)a2 + v34))
        ? (BOOL v37 = a2 + 1 >= (double *)((char *)result + v34))
        : (BOOL v37 = 1),
          v37 ? (char v38 = 0) : (char v38 = 1),
          v35 > (char *)a2 ? (BOOL v39 = (unint64_t)result >= v36) : (BOOL v39 = 1),
          !v39 || (v38 & 1) != 0))
    {
      uint64_t v22 = result;
      long long v23 = a2;
    }
    else
    {
      uint64_t v40 = (v21 >> 4) + 1;
      uint64_t v41 = 2 * (v40 & 0x1FFFFFFFFFFFFFFCLL);
      uint64_t v22 = &result[v41];
      long long v23 = &a2[v41];
      long long v42 = a2 + 4;
      uint64_t v43 = result + 4;
      uint64_t v44 = v40 & 0x1FFFFFFFFFFFFFFCLL;
      do
      {
        uint64_t v45 = v42 - 4;
        float64x2x2_t v61 = vld2q_f64(v45);
        float64x2x2_t v63 = vld2q_f64(v42);
        int64_t v46 = v43 - 4;
        vst2q_f64(v46, v61);
        vst2q_f64(v43, v63);
        v42 += 8;
        v43 += 8;
        v44 -= 4;
      }
      while (v44);
      if (v40 == (v40 & 0x1FFFFFFFFFFFFFFCLL)) {
        goto LABEL_18;
      }
    }
    do
    {
      uint64_t v24 = *(void *)v23;
      uint64_t v25 = *((void *)v23 + 1);
      v23 += 2;
      *(void *)uint64_t v22 = v24;
      *((void *)v22 + 1) = v25;
      v22 += 2;
    }
    while (v23 != v20);
  }
LABEL_18:
  unint64_t v26 = v13;
  if (v20 != a3)
  {
    unint64_t v27 = v13;
    do
    {
      long long v28 = *(_OWORD *)v20;
      v20 += 2;
      *(_OWORD *)unint64_t v27 = v28;
      v27 += 2;
      v26 += 2;
    }
    while (v20 != a3);
  }
  int64_t v15 = (char *)v26 - (char *)v13;
LABEL_29:
  *int64_t v16 = (char *)v13 + v15;
  return result;
}

void std::vector<std::sub_match<std::__wrap_iter<char const*>>>::__append(std::vector<std::ssub_match> *this, std::vector<std::ssub_match>::size_type __n)
{
  std::vector<std::ssub_match>::pointer end = this->__end_;
  xpc_object_t value = this->__end_cap_.__value_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)end) >> 3) >= __n)
  {
    if (__n)
    {
      unint64_t v11 = &end[__n];
      std::vector<std::ssub_match>::size_type v12 = 24 * __n;
      do
      {
        end->first.__i_ = 0;
        end->second.__i_ = 0;
        end->matched = 0;
        ++end;
        v12 -= 24;
      }
      while (v12);
      std::vector<std::ssub_match>::pointer end = v11;
    }
    this->__end_ = end;
  }
  else
  {
    unint64_t v6 = 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)this->__begin_) >> 3);
    unint64_t v7 = v6 + __n;
    if (v6 + __n > 0xAAAAAAAAAAAAAAALL) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)this->__begin_) >> 3);
    if (2 * v8 > v7) {
      unint64_t v7 = 2 * v8;
    }
    if (v8 >= 0x555555555555555) {
      unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      if (v9 > 0xAAAAAAAAAAAAAAALL) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v10 = (char *)operator new(24 * v9);
    }
    else
    {
      uint64_t v10 = 0;
    }
    uint64_t v13 = (std::sub_match<std::__wrap_iter<const char *>> *)&v10[24 * v6];
    std::vector<std::ssub_match>::size_type v14 = 24 * __n;
    int64_t v15 = &v13[__n];
    int64_t v16 = v13;
    do
    {
      v16->first.__i_ = 0;
      v16->second.__i_ = 0;
      v16->matched = 0;
      ++v16;
      v14 -= 24;
    }
    while (v14);
    std::vector<std::ssub_match>::pointer begin = this->__begin_;
    if (end != this->__begin_)
    {
      do
      {
        std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> v18 = end[-1].std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>>;
        *(void *)&v13[-1].matched = *(void *)&end[-1].matched;
        v13[-1].std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> = v18;
        --v13;
        --end;
      }
      while (end != begin);
      std::vector<std::ssub_match>::pointer end = this->__begin_;
    }
    this->__begin_ = v13;
    this->__end_ = v15;
    this->__end_cap_.__value_ = (std::sub_match<std::__wrap_iter<const char *>> *)&v10[24 * v9];
    if (end)
    {
      operator delete(end);
    }
  }
}

uint64_t __cxx_global_var_init_172()
{
  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<ctu::power::assertion>::~PthreadMutexGuardPolicy, &ctu::Singleton<ctu::power::assertion,ctu::power::assertion,ctu::PthreadMutexGuardPolicy<ctu::power::assertion>>::sInstance, &dword_1C5767000);
  }
  return result;
}

uint64_t __cxx_global_var_init_173()
{
  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<HealthEventDB>::~PthreadMutexGuardPolicy, &ctu::Singleton<HealthEventDB,HealthEventDB,ctu::PthreadMutexGuardPolicy<HealthEventDB>>::sInstance, &dword_1C5767000);
  }
  return result;
}

uint64_t __cxx_global_var_init_174()
{
  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<ABMServer>::~PthreadMutexGuardPolicy, &ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance, &dword_1C5767000);
  }
  return result;
}

uint64_t __cxx_global_var_init_175()
{
  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<CommandDriverFactory>::~PthreadMutexGuardPolicy, &ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance, &dword_1C5767000);
  }
  return result;
}

void *support::log::delegate::context::create@<X0>(support::log::delegate::context *this@<X0>, void *a2@<X8>)
{
  *a2 = 0xAAAAAAAAAAAAAAAALL;
  a2[1] = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v5 = operator new(0x10uLL);
  void *v5 = &unk_1F20F5000;
  v5[1] = this;
  *a2 = v5;
  uint64_t result = operator new(0x20uLL);
  void *result = &unk_1F20F5228;
  result[1] = 0;
  result[2] = 0;
  result[3] = v5;
  a2[1] = result;
  return result;
}

void sub_1C5802828(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *support::log::delegate::context::context(void *this, void *a2)
{
  *this = &unk_1F20F5000;
  this[1] = a2;
  return this;
}

{
  *this = &unk_1F20F5000;
  this[1] = a2;
  return this;
}

uint64_t support::log::delegate::delegate(uint64_t result, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v2 = a2[1];
  *(void *)uint64_t result = &unk_1F20F5020;
  *(void *)(result + 8) = v3;
  *(void *)(result + 16) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  *(unsigned char *)(result + 24) = 1;
  return result;
}

uint64_t support::log::delegate::get_context@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 16) = 0;
  if (*(unsigned char *)(this + 24))
  {
    uint64_t v2 = *(void *)(this + 16);
    *(void *)a2 = *(void *)(this + 8);
    *(void *)(a2 + 8) = v2;
    if (v2) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
    }
    *(unsigned char *)(a2 + 16) = 1;
  }
  return this;
}

uint64_t support::log::manager::parameters::parameters(uint64_t result, char a2)
{
  *(void *)uint64_t result = &unk_1F20F5050;
  *(unsigned char *)(result + 8) = a2;
  return result;
}

{
  *(void *)uint64_t result = &unk_1F20F5050;
  *(unsigned char *)(result + 8) = a2;
  return result;
}

uint64_t support::log::manager::parameters::parameters(uint64_t this)
{
  *(void *)this = &unk_1F20F5050;
  *(unsigned char *)(this + 8) = 3;
  return this;
}

{
  *(void *)this = &unk_1F20F5050;
  *(unsigned char *)(this + 8) = 3;
  return this;
}

uint64_t support::log::manager::parameters::set_defaults(uint64_t this)
{
  *(unsigned char *)(this + 8) = 3;
  return this;
}

uint64_t support::log::manager::manager(uint64_t a1, std::string *a2, uint64_t a3, void *a4)
{
  *(void *)a1 = &unk_1F20F5068;
  *(void *)(a1 + 8) = 850045863;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(void *)(a1 + 64) = 0;
  std::string v18 = *a2;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  a2->__r_.__value_.__r.__words[0] = 0;
  char v17 = 12;
  strcpy(__s, ".log_manager");
  unint64_t v7 = std::string::append(&v18, __s, 0xCuLL);
  unint64_t v8 = (const char *)(a1 + 72);
  long long v9 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
  *(void *)(a1 + 88) = *((void *)&v7->__r_.__value_.__l + 2);
  *(_OWORD *)(a1 + 72) = v9;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  if ((v17 & 0x80000000) == 0)
  {
    if ((SHIBYTE(v18.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_3;
    }
LABEL_8:
    operator delete(v18.__r_.__value_.__l.__data_);
    if ((*(char *)(a1 + 95) & 0x80000000) == 0) {
      goto LABEL_4;
    }
    goto LABEL_9;
  }
  operator delete(*(void **)__s);
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_8;
  }
LABEL_3:
  if ((*(char *)(a1 + 95) & 0x80000000) == 0) {
    goto LABEL_4;
  }
LABEL_9:
  unint64_t v8 = *(const char **)v8;
LABEL_4:
  *(void *)(a1 + 96) = os_log_create("com.apple.telephony.basebandservices", v8);
  *(void *)(a1 + 104) = &unk_1F20F5050;
  *(unsigned char *)(a1 + 112) = *(unsigned char *)(a3 + 8);
  *(void *)(a1 + 120) = a1 + 120;
  *(void *)(a1 + 128) = a1 + 120;
  *(void *)(a1 + 136) = 0;
  uint64_t v10 = a4[2];
  if (v10)
  {
    uint64_t v12 = *a4;
    unint64_t v11 = (uint64_t *)a4[1];
    uint64_t v13 = *v11;
    *(void *)(v13 + 8) = *(void *)(*a4 + 8);
    **(void **)(v12 + 8) = v13;
    uint64_t v14 = *(void *)(a1 + 120);
    *(void *)(v14 + 8) = v11;
    uint64_t *v11 = v14;
    *(void *)(a1 + 120) = v12;
    *(void *)(v12 + 8) = a1 + 120;
    *(void *)(a1 + 136) = v10;
    a4[2] = 0;
  }
  return a1;
}

void sub_1C5802B38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0)
    {
LABEL_3:
      std::mutex::~mutex(v21);
      _Unwind_Resume(a1);
    }
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  std::mutex::~mutex(v21);
  _Unwind_Resume(a1);
}

uint64_t support::log::manager::manager(uint64_t a1, std::string *a2, uint64_t a3, uint64_t *a4)
{
  std::string __p = *a2;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  a2->__r_.__value_.__r.__words[0] = 0;
  uint64_t v15 = (uint64_t)&v15;
  int64_t v16 = &v15;
  uint64_t v17 = 0;
  support::log::manager::manager(a1, &__p, a3, &v15);
  if (v17)
  {
    uint64_t v6 = v15;
    unint64_t v7 = v16;
    uint64_t v8 = *v16;
    *(void *)(v8 + 8) = *(void *)(v15 + 8);
    **(void **)(v6 + 8) = v8;
    uint64_t v17 = 0;
    if (v7 != &v15)
    {
      do
      {
        uint64_t v10 = (uint64_t *)v7[1];
        uint64_t v9 = v7[2];
        v7[2] = 0;
        if (v9) {
          (*(void (**)(uint64_t))(*(void *)v9 + 16))(v9);
        }
        operator delete(v7);
        unint64_t v7 = v10;
      }
      while (v10 != &v15);
    }
  }
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (!*a4) {
      return a1;
    }
    goto LABEL_10;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (*a4)
  {
LABEL_10:
    std::mutex::lock((std::mutex *)(a1 + 8));
    unint64_t v11 = operator new(0x18uLL);
    uint64_t v12 = *a4;
    *a4 = 0;
    uint64_t v13 = *(void *)(a1 + 120);
    v11[1] = a1 + 120;
    v11[2] = v12;
    void *v11 = v13;
    *(void *)(v13 + 8) = v11;
    *(void *)(a1 + 120) = v11;
    ++*(void *)(a1 + 136);
    std::mutex::unlock((std::mutex *)(a1 + 8));
  }
  return a1;
}

{
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::string __p;

  std::string __p = *a2;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  a2->__r_.__value_.__r.__words[0] = 0;
  uint64_t v15 = (uint64_t)&v15;
  int64_t v16 = &v15;
  uint64_t v17 = 0;
  support::log::manager::manager(a1, &__p, a3, &v15);
  if (v17)
  {
    uint64_t v6 = v15;
    unint64_t v7 = v16;
    uint64_t v8 = *v16;
    *(void *)(v8 + 8) = *(void *)(v15 + 8);
    **(void **)(v6 + 8) = v8;
    uint64_t v17 = 0;
    if (v7 != &v15)
    {
      do
      {
        uint64_t v10 = (uint64_t *)v7[1];
        uint64_t v9 = v7[2];
        v7[2] = 0;
        if (v9) {
          (*(void (**)(uint64_t))(*(void *)v9 + 16))(v9);
        }
        operator delete(v7);
        unint64_t v7 = v10;
      }
      while (v10 != &v15);
    }
  }
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (!*a4) {
      return a1;
    }
    goto LABEL_10;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (*a4)
  {
LABEL_10:
    std::mutex::lock((std::mutex *)(a1 + 8));
    unint64_t v11 = operator new(0x18uLL);
    uint64_t v12 = *a4;
    *a4 = 0;
    uint64_t v13 = *(void *)(a1 + 120);
    v11[1] = a1 + 120;
    v11[2] = v12;
    void *v11 = v13;
    *(void *)(v13 + 8) = v11;
    *(void *)(a1 + 120) = v11;
    ++*(void *)(a1 + 136);
    std::mutex::unlock((std::mutex *)(a1 + 8));
  }
  return a1;
}

void sub_1C5802CDC(_Unwind_Exception *a1)
{
  std::mutex::unlock(v2);
  support::log::manager::~manager(v1);
  _Unwind_Resume(a1);
}

void sub_1C5802D00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t *std::list<std::unique_ptr<support::log::delegate>>::~list(uint64_t *a1)
{
  if (a1[2])
  {
    uint64_t v2 = *a1;
    uint64_t v3 = (uint64_t *)a1[1];
    uint64_t v4 = *v3;
    *(void *)(v4 + 8) = *(void *)(*a1 + 8);
    **(void **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        unint64_t v7 = (uint64_t *)v3[1];
        uint64_t v6 = v3[2];
        v3[2] = 0;
        if (v6) {
          (*(void (**)(uint64_t))(*(void *)v6 + 16))(v6);
        }
        operator delete(v3);
        uint64_t v3 = v7;
      }
      while (v7 != a1);
    }
  }
  return a1;
}

void support::log::manager::add_delegate(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = (void *)a1;
  uint64_t v4 = (std::mutex *)(a1 + 8);
  std::mutex::lock((std::mutex *)(a1 + 8));
  uint64_t v5 = operator new(0x18uLL);
  uint64_t v6 = *a2;
  *a2 = 0;
  uint64_t v7 = v3[15];
  v3 += 15;
  v5[1] = v3;
  v5[2] = v6;
  void *v5 = v7;
  *(void *)(v7 + 8) = v5;
  void *v3 = v5;
  ++v3[2];

  std::mutex::unlock(v4);
}

void sub_1C5802E40(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void support::log::manager::~manager(support::log::manager *this)
{
  *(void *)this = &unk_1F20F5068;
  if (*((void *)this + 17))
  {
    uint64_t v2 = (char *)this + 120;
    uint64_t v3 = *((void *)this + 15);
    uint64_t v4 = (char *)*((void *)this + 16);
    uint64_t v5 = *(void *)v4;
    *(void *)(v5 + 8) = *(void *)(v3 + 8);
    **(void **)(v3 + 8) = v5;
    *((void *)this + 17) = 0;
    if (v4 != (char *)this + 120)
    {
      do
      {
        uint64_t v7 = (char *)*((void *)v4 + 1);
        uint64_t v6 = *((void *)v4 + 2);
        *((void *)v4 + 2) = 0;
        if (v6) {
          (*(void (**)(uint64_t))(*(void *)v6 + 16))(v6);
        }
        operator delete(v4);
        uint64_t v4 = v7;
      }
      while (v7 != v2);
    }
  }
  if (*((char *)this + 95) < 0) {
    operator delete(*((void **)this + 9));
  }
  std::mutex::~mutex((std::mutex *)((char *)this + 8));
}

{
  char *v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;

  *(void *)this = &unk_1F20F5068;
  if (*((void *)this + 17))
  {
    uint64_t v2 = (char *)this + 120;
    uint64_t v3 = *((void *)this + 15);
    uint64_t v4 = (char *)*((void *)this + 16);
    uint64_t v5 = *(void *)v4;
    *(void *)(v5 + 8) = *(void *)(v3 + 8);
    **(void **)(v3 + 8) = v5;
    *((void *)this + 17) = 0;
    if (v4 != (char *)this + 120)
    {
      do
      {
        uint64_t v7 = (char *)*((void *)v4 + 1);
        uint64_t v6 = *((void *)v4 + 2);
        *((void *)v4 + 2) = 0;
        if (v6) {
          (*(void (**)(uint64_t))(*(void *)v6 + 16))(v6);
        }
        operator delete(v4);
        uint64_t v4 = v7;
      }
      while (v7 != v2);
    }
  }
  if (*((char *)this + 95) < 0) {
    operator delete(*((void **)this + 9));
  }
  std::mutex::~mutex((std::mutex *)((char *)this + 8));
}

{
  char *v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t vars8;

  *(void *)this = &unk_1F20F5068;
  if (*((void *)this + 17))
  {
    uint64_t v2 = (char *)this + 120;
    uint64_t v3 = *((void *)this + 15);
    uint64_t v4 = (char *)*((void *)this + 16);
    uint64_t v5 = *(void *)v4;
    *(void *)(v5 + 8) = *(void *)(v3 + 8);
    **(void **)(v3 + 8) = v5;
    *((void *)this + 17) = 0;
    if (v4 != (char *)this + 120)
    {
      do
      {
        uint64_t v7 = (char *)*((void *)v4 + 1);
        uint64_t v6 = *((void *)v4 + 2);
        *((void *)v4 + 2) = 0;
        if (v6) {
          (*(void (**)(uint64_t))(*(void *)v6 + 16))(v6);
        }
        operator delete(v4);
        uint64_t v4 = v7;
      }
      while (v7 != v2);
    }
  }
  if (*((char *)this + 95) < 0) {
    operator delete(*((void **)this + 9));
  }
  std::mutex::~mutex((std::mutex *)((char *)this + 8));

  operator delete(this);
}

void sub_1C5803080(_Unwind_Exception *a1)
{
  std::mutex::unlock(v2);
  support::log::manager::~manager(v1);
  _Unwind_Resume(a1);
}

void sub_1C58030A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void support::log::manager::create(std::string *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, void *a4@<X8>)
{
  *a4 = 0xAAAAAAAAAAAAAAAALL;
  a4[1] = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v8 = operator new(0x90uLL);
  std::string __p = *a1;
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  support::log::manager::manager((uint64_t)v8, &__p, a2, a3);
  *a4 = v8;
  uint64_t v9 = operator new(0x20uLL);
  void *v9 = &unk_1F20F5310;
  v9[1] = 0;
  v9[2] = 0;
  v9[3] = v8;
  a4[1] = v9;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    uint64_t v10 = (void *)__p.__r_.__value_.__r.__words[0];
    operator delete(v10);
  }
}

void sub_1C5803284(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void support::log::manager::create(std::string *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, void *a4@<X8>)
{
  *a4 = 0xAAAAAAAAAAAAAAAALL;
  a4[1] = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v8 = operator new(0x90uLL);
  std::string __p = *a1;
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  support::log::manager::manager((uint64_t)v8, &__p, a2, a3);
  *a4 = v8;
  uint64_t v9 = operator new(0x20uLL);
  void *v9 = &unk_1F20F5310;
  v9[1] = 0;
  v9[2] = 0;
  v9[3] = v8;
  a4[1] = v9;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    uint64_t v10 = (void *)__p.__r_.__value_.__r.__words[0];
    operator delete(v10);
  }
}

void sub_1C58033D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t support::log::manager::get_level(support::log::manager *this)
{
  return *((unsigned __int8 *)this + 112);
}

void support::log::manager::set_level(uint64_t a1, unsigned int a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (std::mutex *)(a1 + 8);
  std::mutex::lock((std::mutex *)(a1 + 8));
  uint64_t v5 = *(NSObject **)(a1 + 96);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    unint64_t v6 = *(unsigned __int8 *)(a1 + 112);
    if (v6 > 6)
    {
      uint64_t v7 = "???";
      if (a2 > 6) {
        goto LABEL_4;
      }
    }
    else
    {
      if (a2 > 6)
      {
LABEL_4:
        uint64_t v8 = "???";
LABEL_7:
        int v9 = 136315394;
        uint64_t v10 = v7;
        __int16 v11 = 2080;
        uint64_t v12 = v8;
        _os_log_impl(&dword_1C5767000, v5, OS_LOG_TYPE_DEFAULT, "setting log level %s -> %s", (uint8_t *)&v9, 0x16u);
        goto LABEL_8;
      }
    }
    goto LABEL_7;
  }
LABEL_8:
  *(unsigned char *)(a1 + 112) = a2;
  std::mutex::unlock(v4);
}

uint64_t support::log::manager::get_log_buffer(support::log::manager *this)
{
  pthread_mutex_lock(&ctu::Singleton<support::log::buffer,support::log::buffer,ctu::PthreadMutexGuardPolicy<support::log::buffer>>::sInstance);
  if (!qword_1EA3D5E98)
  {
    uint64_t v1 = (char *)operator new(0xA8uLL);
    *((void *)v1 + 1) = 0;
    *((void *)v1 + 2) = 0;
    *(void *)uint64_t v1 = &unk_1F20F5278;
    uint64_t v2 = (uint64_t)(v1 + 24);
    *((void *)v1 + 3) = &unk_1F20F52C8;
    *((void *)v1 + 4) = 850045863;
    *(_OWORD *)(v1 + 40) = 0u;
    *(_OWORD *)(v1 + 56) = 0u;
    *(_OWORD *)(v1 + 72) = 0u;
    *((void *)v1 + 14) = 0;
    *((void *)v1 + 13) = 0;
    *((void *)v1 + 11) = 0;
    *((void *)v1 + 12) = v1 + 104;
    *(_OWORD *)(v1 + 120) = 0u;
    *(_OWORD *)(v1 + 136) = 0u;
    *(_OWORD *)(v1 + 152) = 0u;
    uint64_t v3 = (std::__shared_weak_count *)off_1EA3D5EA0;
    qword_1EA3D5E98 = (uint64_t)(v1 + 24);
    off_1EA3D5EA0 = v1;
    if (!v3) {
      goto LABEL_7;
    }
    if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  uint64_t v2 = qword_1EA3D5E98;
  uint64_t v1 = (char *)off_1EA3D5EA0;
  if (off_1EA3D5EA0) {
LABEL_7:
  }
    atomic_fetch_add_explicit((atomic_ullong *volatile)v1 + 1, 1uLL, memory_order_relaxed);
  pthread_mutex_unlock(&ctu::Singleton<support::log::buffer,support::log::buffer,ctu::PthreadMutexGuardPolicy<support::log::buffer>>::sInstance);
  std::mutex::lock((std::mutex *)(v2 + 8));
  uint64_t v4 = *(void *)(v2 + 136);
  if (v4)
  {
    uint64_t v5 = (void *)(v2 + 128);
    unint64_t v6 = *(void ***)(v2 + 104);
    uint64_t v7 = (*(void **)((char *)v6 + ((*(void *)(v2 + 128) >> 6) & 0x3FFFFFFFFFFFFF8)))[*(void *)(v2 + 128) & 0x1FFLL];
    unint64_t v8 = *(void *)(v2 + 128) + 1;
    *(void *)(v2 + 128) = v8;
    *(void *)(v2 + 136) = v4 - 1;
    if (v8 >= 0x400)
    {
      operator delete(*v6);
      *(void *)(v2 + 104) += 8;
      uint64_t v9 = -512;
LABEL_22:
      *v5 += v9;
    }
  }
  else
  {
    uint64_t v10 = malloc_type_malloc(0x400uLL, 0x45F1E4C6uLL);
    uint64_t v7 = (uint64_t)v10;
    if (v10)
    {
      uint64_t v12 = (uint64_t **)(v2 + 80);
      __int16 v11 = *(uint64_t **)(v2 + 80);
      if (!v11)
      {
        uint64_t v13 = (uint64_t **)(v2 + 80);
LABEL_19:
        uint64_t v15 = (uint64_t *)operator new(0x28uLL);
        v15[4] = v7;
        *uint64_t v15 = 0;
        v15[1] = 0;
        v15[2] = (uint64_t)v13;
        *uint64_t v12 = v15;
        uint64_t v16 = **(void **)(v2 + 72);
        if (v16)
        {
          *(void *)(v2 + 72) = v16;
          uint64_t v15 = *v12;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v2 + 80), v15);
        uint64_t v5 = (void *)(v2 + 88);
        uint64_t v9 = 1;
        goto LABEL_22;
      }
      while (1)
      {
        while (1)
        {
          uint64_t v13 = (uint64_t **)v11;
          unint64_t v14 = v11[4];
          if ((unint64_t)v10 >= v14) {
            break;
          }
          __int16 v11 = *v13;
          uint64_t v12 = v13;
          if (!*v13) {
            goto LABEL_19;
          }
        }
        if (v14 >= (unint64_t)v10) {
          break;
        }
        __int16 v11 = v13[1];
        if (!v11)
        {
          uint64_t v12 = v13 + 1;
          goto LABEL_19;
        }
      }
    }
  }
  std::mutex::unlock((std::mutex *)(v2 + 8));
  if (!v1 || atomic_fetch_add((atomic_ullong *volatile)v1 + 1, 0xFFFFFFFFFFFFFFFFLL)) {
    return v7;
  }
  (*(void (**)(char *))(*(void *)v1 + 16))(v1);
  std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v1);
  return v7;
}

void sub_1C5803800(_Unwind_Exception *a1)
{
}

void support::log::manager::release_log_buffer(support::log::manager *this, char *a2)
{
  pthread_mutex_lock(&ctu::Singleton<support::log::buffer,support::log::buffer,ctu::PthreadMutexGuardPolicy<support::log::buffer>>::sInstance);
  if (qword_1EA3D5E98) {
    goto LABEL_2;
  }
  uint64_t v3 = (char *)operator new(0xA8uLL);
  *((void *)v3 + 1) = 0;
  *((void *)v3 + 2) = 0;
  *(void *)uint64_t v3 = &unk_1F20F5278;
  uint64_t v4 = (uint64_t)(v3 + 24);
  *((void *)v3 + 3) = &unk_1F20F52C8;
  *((void *)v3 + 4) = 850045863;
  *(_OWORD *)(v3 + 40) = 0u;
  *(_OWORD *)(v3 + 56) = 0u;
  *(_OWORD *)(v3 + 72) = 0u;
  *((void *)v3 + 14) = 0;
  *((void *)v3 + 13) = 0;
  *((void *)v3 + 11) = 0;
  *((void *)v3 + 12) = v3 + 104;
  *(_OWORD *)(v3 + 120) = 0u;
  *(_OWORD *)(v3 + 136) = 0u;
  *(_OWORD *)(v3 + 152) = 0u;
  uint64_t v5 = (std::__shared_weak_count *)off_1EA3D5EA0;
  qword_1EA3D5E98 = (uint64_t)(v3 + 24);
  off_1EA3D5EA0 = v3;
  if (v5)
  {
    if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
LABEL_2:
    uint64_t v4 = qword_1EA3D5E98;
    uint64_t v3 = (char *)off_1EA3D5EA0;
    if (!off_1EA3D5EA0) {
      goto LABEL_8;
    }
  }
  atomic_fetch_add_explicit((atomic_ullong *volatile)v3 + 1, 1uLL, memory_order_relaxed);
LABEL_8:
  pthread_mutex_unlock(&ctu::Singleton<support::log::buffer,support::log::buffer,ctu::PthreadMutexGuardPolicy<support::log::buffer>>::sInstance);
  unint64_t v8 = *(void **)(v4 + 80);
  uint64_t v7 = v4 + 80;
  unint64_t v6 = v8;
  if (!v8) {
    goto LABEL_19;
  }
  uint64_t v9 = (void *)v7;
  do
  {
    unint64_t v10 = v6[4];
    BOOL v11 = v10 >= (unint64_t)a2;
    if (v10 >= (unint64_t)a2) {
      uint64_t v12 = v6;
    }
    else {
      uint64_t v12 = v6 + 1;
    }
    if (v11) {
      uint64_t v9 = v6;
    }
    unint64_t v6 = (void *)*v12;
  }
  while (*v12);
  if (v9 == (void *)v7 || v9[4] > (unint64_t)a2) {
LABEL_19:
  }
    uint64_t v9 = (void *)v7;
  if (!v3 || atomic_fetch_add((atomic_ullong *volatile)v3 + 1, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (v9 != (void *)v7) {
      goto LABEL_23;
    }
LABEL_27:
    free(a2);
    return;
  }
  (*(void (**)(char *))(*(void *)v3 + 16))(v3);
  std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v3);
  if (v9 == (void *)v7) {
    goto LABEL_27;
  }
LABEL_23:
  pthread_mutex_lock(&ctu::Singleton<support::log::buffer,support::log::buffer,ctu::PthreadMutexGuardPolicy<support::log::buffer>>::sInstance);
  if (!qword_1EA3D5E98)
  {
    uint64_t v13 = (char *)operator new(0xA8uLL);
    *((void *)v13 + 1) = 0;
    *((void *)v13 + 2) = 0;
    *(void *)uint64_t v13 = &unk_1F20F5278;
    *((void *)v13 + 3) = &unk_1F20F52C8;
    *((void *)v13 + 4) = 850045863;
    *(_OWORD *)(v13 + 40) = 0u;
    *(_OWORD *)(v13 + 56) = 0u;
    *(_OWORD *)(v13 + 72) = 0u;
    *((void *)v13 + 14) = 0;
    *((void *)v13 + 13) = 0;
    *((void *)v13 + 11) = 0;
    *((void *)v13 + 12) = v13 + 104;
    *(_OWORD *)(v13 + 120) = 0u;
    *(_OWORD *)(v13 + 136) = 0u;
    *(_OWORD *)(v13 + 152) = 0u;
    unint64_t v14 = (std::__shared_weak_count *)off_1EA3D5EA0;
    qword_1EA3D5E98 = (uint64_t)(v13 + 24);
    off_1EA3D5EA0 = v13;
    if (!v14)
    {
      int v135 = (std::__shared_weak_count *)v13;
      goto LABEL_34;
    }
    if (!atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  uint64_t v13 = (char *)off_1EA3D5EA0;
  int v135 = (std::__shared_weak_count *)off_1EA3D5EA0;
  if (off_1EA3D5EA0) {
LABEL_34:
  }
    atomic_fetch_add_explicit((atomic_ullong *volatile)v13 + 1, 1uLL, memory_order_relaxed);
  pthread_mutex_unlock(&ctu::Singleton<support::log::buffer,support::log::buffer,ctu::PthreadMutexGuardPolicy<support::log::buffer>>::sInstance);
  pthread_mutex_lock(&ctu::Singleton<support::log::buffer,support::log::buffer,ctu::PthreadMutexGuardPolicy<support::log::buffer>>::sInstance);
  if (qword_1EA3D5E98) {
    goto LABEL_36;
  }
  uint64_t v15 = (char *)operator new(0xA8uLL);
  *((void *)v15 + 1) = 0;
  *((void *)v15 + 2) = 0;
  *(void *)uint64_t v15 = &unk_1F20F5278;
  uint64_t v16 = (uint64_t)(v15 + 24);
  *((void *)v15 + 3) = &unk_1F20F52C8;
  *((void *)v15 + 4) = 850045863;
  *(_OWORD *)(v15 + 40) = 0u;
  *(_OWORD *)(v15 + 56) = 0u;
  *(_OWORD *)(v15 + 72) = 0u;
  *((void *)v15 + 14) = 0;
  *((void *)v15 + 13) = 0;
  *((void *)v15 + 11) = 0;
  *((void *)v15 + 12) = v15 + 104;
  *(_OWORD *)(v15 + 120) = 0u;
  *(_OWORD *)(v15 + 136) = 0u;
  *(_OWORD *)(v15 + 152) = 0u;
  uint64_t v17 = (std::__shared_weak_count *)off_1EA3D5EA0;
  qword_1EA3D5E98 = (uint64_t)(v15 + 24);
  off_1EA3D5EA0 = v15;
  if (v17)
  {
    if (!atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
LABEL_36:
    uint64_t v16 = qword_1EA3D5E98;
    uint64_t v15 = (char *)off_1EA3D5EA0;
    v136 = (std::__shared_weak_count *)off_1EA3D5EA0;
    if (!off_1EA3D5EA0) {
      goto LABEL_43;
    }
    goto LABEL_42;
  }
  v136 = (std::__shared_weak_count *)v15;
LABEL_42:
  atomic_fetch_add_explicit((atomic_ullong *volatile)v15 + 1, 1uLL, memory_order_relaxed);
LABEL_43:
  pthread_mutex_unlock(&ctu::Singleton<support::log::buffer,support::log::buffer,ctu::PthreadMutexGuardPolicy<support::log::buffer>>::sInstance);
  std::string v18 = (std::mutex *)(v16 + 8);
  std::mutex::lock((std::mutex *)(v16 + 8));
  unint64_t v19 = *(void **)(v16 + 80);
  if (!v19) {
    goto LABEL_175;
  }
  uint64_t v20 = v16 + 80;
  do
  {
    unint64_t v21 = v19[4];
    BOOL v22 = v21 >= (unint64_t)a2;
    if (v21 >= (unint64_t)a2) {
      long long v23 = v19;
    }
    else {
      long long v23 = v19 + 1;
    }
    if (v22) {
      uint64_t v20 = (uint64_t)v19;
    }
    unint64_t v19 = (void *)*v23;
  }
  while (*v23);
  if (v20 == v16 + 80 || *(void *)(v20 + 32) > (unint64_t)a2)
  {
LABEL_175:
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "attempting to put back a buffer the instance does not own");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t v24 = *(char **)(v16 + 112);
  uint64_t v25 = *(char **)(v16 + 104);
  uint64_t v26 = v24 - v25;
  if (v24 == v25) {
    uint64_t v27 = 0;
  }
  else {
    uint64_t v27 = ((v24 - v25) << 6) - 1;
  }
  unint64_t v29 = *(void *)(v16 + 128);
  uint64_t v28 = *(void *)(v16 + 136);
  unint64_t v30 = v28 + v29;
  if (v27 != v28 + v29) {
    goto LABEL_151;
  }
  if (v29 >= 0x200)
  {
    *(void *)(v16 + 128) = v29 - 512;
    int64_t v31 = v25 + 8;
    uint64_t v32 = *(void *)v25;
    *(void *)(v16 + 104) = v25 + 8;
    if (v24 != *(char **)(v16 + 120))
    {
LABEL_148:
      *(void *)uint64_t v24 = v32;
      goto LABEL_149;
    }
    uint64_t v33 = *(char **)(v16 + 96);
    if (v31 > v33)
    {
      uint64_t v34 = (v31 - v33) >> 3;
      if (v34 >= -1) {
        uint64_t v35 = v34 + 1;
      }
      else {
        uint64_t v35 = v34 + 2;
      }
      uint64_t v36 = v35 >> 1;
      uint64_t v37 = -v36;
      char v38 = &v31[-8 * v36];
      int64_t v39 = v24 - v31;
      if (v24 != v31)
      {
        memmove(&v31[-8 * v36], v31, v24 - v31);
        uint64_t v24 = *(char **)(v16 + 104);
      }
      uint64_t v40 = &v24[8 * v37];
      uint64_t v24 = &v38[v39];
      *(void *)(v16 + 104) = v40;
      *(void *)(v16 + 112) = &v38[v39];
      goto LABEL_148;
    }
    if (v24 == v33) {
      unint64_t v52 = 1;
    }
    else {
      unint64_t v52 = (v24 - v33) >> 2;
    }
    if (!(v52 >> 61))
    {
      BOOL v53 = (char *)operator new(8 * v52);
      uint64_t v54 = &v53[8 * (v52 >> 2)];
      int64_t v56 = v24 - v31;
      BOOL v55 = v24 == v31;
      uint64_t v24 = v54;
      if (v55) {
        goto LABEL_146;
      }
      uint64_t v24 = &v54[v56 & 0xFFFFFFFFFFFFFFF8];
      unint64_t v57 = v56 - 8;
      if (v57 >= 0x38)
      {
        v109 = &v53[8 * (v52 >> 2)];
        uint64_t v58 = v109;
        if ((unint64_t)(v109 - v31) >= 0x20)
        {
          uint64_t v110 = (v57 >> 3) + 1;
          uint64_t v111 = 8 * (v110 & 0x3FFFFFFFFFFFFFFCLL);
          uint64_t v58 = &v54[v111];
          v31 += v111;
          v112 = (long long *)(v25 + 24);
          int v113 = v109 + 16;
          uint64_t v114 = v110 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v115 = *v112;
            *(v113 - 1) = *(v112 - 1);
            *int v113 = v115;
            v112 += 2;
            v113 += 2;
            v114 -= 4;
          }
          while (v114);
          if (v110 == (v110 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_146:
            *(void *)(v16 + 96) = v53;
            *(void *)(v16 + 104) = v54;
            *(void *)(v16 + 112) = v24;
            *(void *)(v16 + 120) = &v53[8 * v52];
            if (v33)
            {
              operator delete(v33);
              uint64_t v24 = *(char **)(v16 + 112);
            }
            goto LABEL_148;
          }
        }
      }
      else
      {
        uint64_t v58 = &v53[8 * (v52 >> 2)];
      }
      do
      {
        uint64_t v116 = *(void *)v31;
        v31 += 8;
        *(void *)uint64_t v58 = v116;
        v58 += 8;
      }
      while (v58 != v24);
      goto LABEL_146;
    }
LABEL_177:
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  uint64_t v41 = v26 >> 3;
  long long v42 = *(char **)(v16 + 120);
  uint64_t v43 = *(char **)(v16 + 96);
  if (v26 >> 3 >= (unint64_t)((v42 - v43) >> 3))
  {
    if (v42 == v43) {
      unint64_t v46 = 1;
    }
    else {
      unint64_t v46 = (v42 - v43) >> 2;
    }
    if (!(v46 >> 61))
    {
      unint64_t v47 = (char *)operator new(8 * v46);
      uint64_t v48 = operator new(0x1000uLL);
      unint64_t v49 = &v47[8 * v41];
      unint64_t v50 = &v47[8 * v46];
      if (v41 == v46)
      {
        uint64_t v134 = v48;
        if (v26 < 1)
        {
          if (v24 == v25) {
            unint64_t v60 = 1;
          }
          else {
            unint64_t v60 = v26 >> 2;
          }
          if (v60 >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          unint64_t v49 = (char *)operator new(8 * v60);
          unint64_t v50 = &v49[8 * v60];
          operator delete(v47);
          uint64_t v25 = *(char **)(v16 + 104);
          uint64_t v24 = *(char **)(v16 + 112);
          unint64_t v47 = v49;
        }
        else
        {
          unint64_t v51 = v41 + 2;
          if (v41 >= -1) {
            unint64_t v51 = v41 + 1;
          }
          v49 -= 8 * (v51 >> 1);
        }
        uint64_t v48 = v134;
      }
      *(void *)unint64_t v49 = v48;
      float64x2x2_t v61 = v49 + 8;
      if (v24 != v25)
      {
        do
        {
          if (v49 == v47)
          {
            if (v61 >= v50)
            {
              if (v50 == v47) {
                unint64_t v68 = 1;
              }
              else {
                unint64_t v68 = (v50 - v47) >> 2;
              }
              if (v68 >> 61) {
                std::__throw_bad_array_new_length[abi:ne180100]();
              }
              unint64_t v69 = (char *)operator new(8 * v68);
              uint64_t v70 = v69;
              unint64_t v71 = (v68 + 3) >> 2;
              unint64_t v49 = &v69[8 * v71];
              int64_t v72 = v61 - v47;
              BOOL v55 = v61 == v47;
              float64x2x2_t v61 = v49;
              if (!v55)
              {
                float64x2x2_t v61 = &v49[v72 & 0xFFFFFFFFFFFFFFF8];
                unint64_t v73 = v72 - 8;
                uint64_t v74 = &v69[8 * v71];
                uint64_t v75 = v47;
                if (v73 < 0x38) {
                  goto LABEL_181;
                }
                uint64_t v76 = 8 * v71;
                uint64_t v74 = &v69[8 * v71];
                uint64_t v75 = v47;
                if ((unint64_t)(v74 - v47) < 0x20) {
                  goto LABEL_181;
                }
                uint64_t v77 = (v73 >> 3) + 1;
                uint64_t v78 = 8 * (v77 & 0x3FFFFFFFFFFFFFFCLL);
                uint64_t v74 = &v49[v78];
                uint64_t v75 = &v47[v78];
                long long v79 = (long long *)(v47 + 16);
                uint64_t v80 = &v69[v76 + 16];
                uint64_t v81 = v77 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  long long v82 = *v79;
                  *((_OWORD *)v80 - 1) = *(v79 - 1);
                  *(_OWORD *)uint64_t v80 = v82;
                  v79 += 2;
                  v80 += 32;
                  v81 -= 4;
                }
                while (v81);
                if (v77 != (v77 & 0x3FFFFFFFFFFFFFFCLL))
                {
LABEL_181:
                  do
                  {
                    uint64_t v83 = *(void *)v75;
                    v75 += 8;
                    *(void *)uint64_t v74 = v83;
                    v74 += 8;
                  }
                  while (v74 != v61);
                }
              }
              unint64_t v50 = &v69[8 * v68];
              operator delete(v47);
              unint64_t v47 = v70;
            }
            else
            {
              uint64_t v64 = (v50 - v61) >> 3;
              if (v64 >= -1) {
                uint64_t v65 = v64 + 1;
              }
              else {
                uint64_t v65 = v64 + 2;
              }
              uint64_t v66 = v65 >> 1;
              unint64_t v49 = &v47[8 * (v65 >> 1)];
              uint64_t v67 = v47;
              if (v61 != v47)
              {
                memmove(v49, v47, v61 - v47);
                uint64_t v67 = v61;
              }
              float64x2x2_t v61 = (char *)v67 + 8 * v66;
            }
          }
          uint64_t v63 = *((void *)v24 - 1);
          v24 -= 8;
          *((void *)v49 - 1) = v63;
          v49 -= 8;
        }
        while (v24 != *(char **)(v16 + 104));
      }
      float64x2x2_t v62 = *(void **)(v16 + 96);
      *(void *)(v16 + 96) = v47;
      *(void *)(v16 + 104) = v49;
      *(void *)(v16 + 112) = v61;
      *(void *)(v16 + 120) = v50;
      std::string v18 = (std::mutex *)(v16 + 8);
      if (v62) {
        operator delete(v62);
      }
      goto LABEL_150;
    }
    goto LABEL_177;
  }
  uint64_t v44 = operator new(0x1000uLL);
  uint64_t v45 = v44;
  if (v42 == v24)
  {
    if (v25 == v43)
    {
      if (v24 == v25) {
        unint64_t v84 = 1;
      }
      else {
        unint64_t v84 = (v42 - v25) >> 2;
      }
      if (v84 >> 61) {
        goto LABEL_177;
      }
      uint64_t v85 = (char *)operator new(8 * v84);
      unint64_t v86 = (v84 + 3) >> 2;
      uint64_t v59 = &v85[8 * v86];
      long long v87 = v59;
      if (v24 != v25)
      {
        long long v87 = &v59[8 * v41];
        uint64_t v88 = &v85[8 * v86];
        uint64_t v89 = v25;
        if ((unint64_t)(v26 - 8) < 0x38) {
          goto LABEL_182;
        }
        int v90 = &v85[8 * v86];
        uint64_t v88 = v90;
        uint64_t v89 = v25;
        if ((unint64_t)(v90 - v25) < 0x20) {
          goto LABEL_182;
        }
        unint64_t v91 = ((unint64_t)(v26 - 8) >> 3) + 1;
        uint64_t v92 = 8 * (v91 & 0x3FFFFFFFFFFFFFFCLL);
        uint64_t v88 = &v59[v92];
        uint64_t v89 = &v25[v92];
        uint64_t v93 = (long long *)(v25 + 16);
        uint64_t v94 = v90 + 16;
        uint64_t v95 = v91 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v96 = *v93;
          *(v94 - 1) = *(v93 - 1);
          *uint64_t v94 = v96;
          v93 += 2;
          v94 += 2;
          v95 -= 4;
        }
        while (v95);
        if (v91 != (v91 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_182:
          do
          {
            uint64_t v97 = *(void *)v89;
            v89 += 8;
            *(void *)uint64_t v88 = v97;
            v88 += 8;
          }
          while (v88 != v87);
        }
      }
      *(void *)(v16 + 96) = v85;
      *(void *)(v16 + 104) = v59;
      *(void *)(v16 + 112) = v87;
      *(void *)(v16 + 120) = &v85[8 * v84];
      if (v25)
      {
        operator delete(v25);
        uint64_t v59 = *(char **)(v16 + 104);
      }
    }
    else
    {
      uint64_t v59 = v25;
    }
    *((void *)v59 - 1) = v45;
    v98 = *(char **)(v16 + 104);
    long long v99 = *(char **)(v16 + 112);
    *(void *)(v16 + 104) = v98 - 8;
    uint64_t v100 = *((void *)v98 - 1);
    *(void *)(v16 + 104) = v98;
    if (v99 != *(char **)(v16 + 120)) {
      goto LABEL_133;
    }
    long long v101 = *(char **)(v16 + 96);
    if (v98 > v101)
    {
      uint64_t v102 = (v98 - v101) >> 3;
      if (v102 >= -1) {
        uint64_t v103 = v102 + 1;
      }
      else {
        uint64_t v103 = v102 + 2;
      }
      uint64_t v104 = v103 >> 1;
      uint64_t v105 = -v104;
      uint64_t v106 = &v98[-8 * v104];
      size_t v107 = v99 - v98;
      if (v107)
      {
        memmove(&v98[-8 * v104], v98, v107);
        v98 = *(char **)(v16 + 104);
      }
      std::vector<std::string>::pointer v108 = &v106[v107];
      *(void *)(v16 + 104) = &v98[8 * v105];
      *(void *)(v16 + 112) = v108;
      *(void *)std::vector<std::string>::pointer v108 = v100;
      goto LABEL_149;
    }
    if (v99 == v101) {
      unint64_t v118 = 1;
    }
    else {
      unint64_t v118 = (v99 - v101) >> 2;
    }
    if (v118 >> 61) {
      goto LABEL_177;
    }
    unint64_t v119 = (char *)operator new(8 * v118);
    uint64_t v120 = &v119[8 * (v118 >> 2)];
    int64_t v121 = v99 - v98;
    BOOL v55 = v99 == v98;
    long long v99 = v120;
    if (!v55)
    {
      long long v99 = &v120[v121 & 0xFFFFFFFFFFFFFFF8];
      unint64_t v122 = v121 - 8;
      if (v122 < 0x38)
      {
        unint64_t v123 = &v119[8 * (v118 >> 2)];
        do
        {
LABEL_172:
          uint64_t v132 = *(void *)v98;
          v98 += 8;
          *(void *)unint64_t v123 = v132;
          v123 += 8;
        }
        while (v123 != v99);
        goto LABEL_173;
      }
      unint64_t v124 = &v119[8 * (v118 >> 2)];
      unint64_t v123 = v124;
      if ((unint64_t)(v124 - v98) < 0x20) {
        goto LABEL_172;
      }
      uint64_t v125 = (v122 >> 3) + 1;
      uint64_t v126 = 8 * (v125 & 0x3FFFFFFFFFFFFFFCLL);
      unint64_t v123 = &v120[v126];
      BOOL v127 = &v98[v126];
      v128 = (long long *)(v98 + 16);
      v129 = v124 + 16;
      uint64_t v130 = v125 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v131 = *v128;
        *(v129 - 1) = *(v128 - 1);
        _OWORD *v129 = v131;
        v128 += 2;
        v129 += 2;
        v130 -= 4;
      }
      while (v130);
      v98 = v127;
      if (v125 != (v125 & 0x3FFFFFFFFFFFFFFCLL)) {
        goto LABEL_172;
      }
    }
LABEL_173:
    *(void *)(v16 + 96) = v119;
    *(void *)(v16 + 104) = v120;
    *(void *)(v16 + 112) = v99;
    *(void *)(v16 + 120) = &v119[8 * v118];
    if (v101)
    {
      operator delete(v101);
      long long v99 = *(char **)(v16 + 112);
    }
LABEL_133:
    *(void *)long long v99 = v100;
    goto LABEL_149;
  }
  *(void *)uint64_t v24 = v44;
LABEL_149:
  *(void *)(v16 + 112) += 8;
LABEL_150:
  uint64_t v25 = *(char **)(v16 + 104);
  uint64_t v28 = *(void *)(v16 + 136);
  unint64_t v30 = *(void *)(v16 + 128) + v28;
LABEL_151:
  *(void *)(*(void *)&v25[(v30 >> 6) & 0x3FFFFFFFFFFFFF8] + 8 * (v30 & 0x1FF)) = a2;
  *(void *)(v16 + 136) = v28 + 1;
  std::mutex::unlock(v18);
  if (v136 && !atomic_fetch_add(&v136->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
    std::__shared_weak_count::__release_weak(v136);
    v117 = v135;
    if (!v135) {
      return;
    }
  }
  else
  {
    v117 = v135;
    if (!v135) {
      return;
    }
  }
  if (!atomic_fetch_add(&v117->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
    std::__shared_weak_count::__release_weak(v117);
  }
}

void sub_1C5804464(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, std::mutex *a10, char a11, uint64_t a12, char a13)
{
  operator delete(__p);
  operator delete(v13);
  std::mutex::unlock(a10);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void support::log::manager::add_delegates(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 8);
  if (v2 != a2)
  {
    uint64_t v5 = (std::mutex *)(a1 + 8);
    uint64_t v6 = a1 + 120;
    do
    {
      std::mutex::lock(v5);
      uint64_t v7 = operator new(0x18uLL);
      uint64_t v8 = *(void *)(v2 + 16);
      *(void *)(v2 + 16) = 0;
      v7[1] = v6;
      v7[2] = v8;
      uint64_t v9 = *(void *)(a1 + 120);
      void *v7 = v9;
      *(void *)(v9 + 8) = v7;
      *(void *)(a1 + 120) = v7;
      ++*(void *)(a1 + 136);
      std::mutex::unlock(v5);
      uint64_t v2 = *(void *)(v2 + 8);
    }
    while (v2 != a2);
  }
}

void sub_1C58045D4(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void support::log::manager::set_defaults(support::log::manager *this)
{
  uint64_t v2 = (std::mutex *)((char *)this + 8);
  std::mutex::lock((std::mutex *)((char *)this + 8));
  *((unsigned char *)this + 112) = 3;
  if (*((void *)this + 17))
  {
    uint64_t v3 = (char *)this + 120;
    uint64_t v4 = *((void *)this + 15);
    uint64_t v5 = (char *)*((void *)this + 16);
    uint64_t v6 = *(void *)v5;
    *(void *)(v6 + 8) = *(void *)(v4 + 8);
    **(void **)(v4 + 8) = v6;
    *((void *)this + 17) = 0;
    if (v5 != (char *)this + 120)
    {
      do
      {
        uint64_t v8 = (char *)*((void *)v5 + 1);
        uint64_t v7 = *((void *)v5 + 2);
        *((void *)v5 + 2) = 0;
        if (v7) {
          (*(void (**)(uint64_t))(*(void *)v7 + 16))(v7);
        }
        operator delete(v5);
        uint64_t v5 = v8;
      }
      while (v8 != v3);
    }
  }

  std::mutex::unlock(v2);
}

void support::log::manager::message_delegates(support::log::manager *a1, uint64_t a2, char *a3)
{
  uint64_t v4 = (void *)((char *)a1 + 120);
  uint64_t v5 = *((void *)a1 + 16);
  if ((support::log::manager *)v5 != (support::log::manager *)((char *)a1 + 120))
  {
    do
    {
      a1 = (support::log::manager *)(***(uint64_t (****)(void, uint64_t, char *))(v5 + 16))(*(void *)(v5 + 16), a2, a3);
      uint64_t v5 = *(void *)(v5 + 8);
    }
    while ((void *)v5 != v4);
  }

  support::log::manager::release_log_buffer(a1, a3);
}

void support::log::stdout_delegate::create(uint64_t *a1@<X0>, void *a2@<X8>)
{
  *a2 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v4 = operator new(0x20uLL);
  uint64_t v5 = v4;
  uint64_t v6 = *a1;
  uint64_t v7 = (std::__shared_weak_count *)a1[1];
  if (v7)
  {
    atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  void *v4 = &unk_1F20F5020;
  v4[1] = v6;
  v4[2] = v7;
  if (v7)
  {
    atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    *((unsigned char *)v4 + 24) = 1;
    std::__shared_weak_count::__release_weak(v7);
    void *v5 = &unk_1F20F5098;
    std::__shared_weak_count::__release_weak(v7);
    *a2 = v5;
  }
  else
  {
    *((unsigned char *)v4 + 24) = 1;
    void *v4 = &unk_1F20F5098;
    *a2 = v4;
  }
}

uint64_t support::log::stdout_delegate::stdout_delegate(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v3 = (std::__shared_weak_count *)a2[1];
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  *(void *)a1 = &unk_1F20F5020;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v3;
  if (v3)
  {
    atomic_fetch_add_explicit(&v3->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    *(unsigned char *)(a1 + 24) = 1;
    std::__shared_weak_count::__release_weak(v3);
  }
  else
  {
    *(unsigned char *)(a1 + 24) = 1;
  }
  *(void *)a1 = &unk_1F20F5098;
  return a1;
}

{
  std::__shared_weak_count *v3;
  uint64_t v4;

  uint64_t v4 = *a2;
  uint64_t v3 = (std::__shared_weak_count *)a2[1];
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  *(void *)a1 = &unk_1F20F5020;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v3;
  if (v3)
  {
    atomic_fetch_add_explicit(&v3->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    *(unsigned char *)(a1 + 24) = 1;
    std::__shared_weak_count::__release_weak(v3);
  }
  else
  {
    *(unsigned char *)(a1 + 24) = 1;
  }
  *(void *)a1 = &unk_1F20F5098;
  return a1;
}

double support::log::stdout_delegate::create@<D0>(void *a1@<X8>)
{
  *a1 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v3 = operator new(0x20uLL);
  double result = 0.0;
  _OWORD *v3 = 0u;
  v3[1] = 0u;
  *(void *)uint64_t v3 = &unk_1F20F5098;
  *a1 = v3;
  return result;
}

void support::log::stdout_delegate::message(uint64_t a1, uint64_t a2, const char *a3)
{
  if (a3)
  {
    memset(v6, 170, sizeof(v6));
    (*(void (**)(void *__return_ptr))(*(void *)a1 + 24))(v6);
    if (LOBYTE(v6[2]))
    {
      if (!v6[1]) {
        return;
      }
      uint64_t v4 = std::__shared_weak_count::lock((std::__shared_weak_count *)v6[1]);
      if (v4)
      {
        uint64_t v5 = v4;
        if (v6[0]) {
          fprintf((FILE *)*MEMORY[0x1E4F143D8], "%s\n", a3);
        }
        if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
      }
    }
    else
    {
      fprintf((FILE *)*MEMORY[0x1E4F143D8], "%s\n", a3);
    }
    if (LOBYTE(v6[2]))
    {
      if (v6[1]) {
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v6[1]);
      }
    }
  }
}

support::log::manager_global *support::log::manager_global::manager_global(support::log::manager_global *this)
{
  *((unsigned char *)&__p.__r_.__value_.__s + 23) = 6;
  strcpy((char *)&__p, "global");
  uint64_t v10 = 0;
  BOOL v11 = &unk_1F20F5050;
  char v12 = 3;
  uint64_t v8 = (uint64_t)&v8;
  uint64_t v9 = &v8;
  support::log::manager::manager((uint64_t)this, &__p, (uint64_t)&v11, &v8);
  if (v10)
  {
    uint64_t v2 = v8;
    uint64_t v3 = v9;
    uint64_t v4 = *v9;
    *(void *)(v4 + 8) = *(void *)(v8 + 8);
    **(void **)(v2 + 8) = v4;
    uint64_t v10 = 0;
    if (v3 != &v8)
    {
      do
      {
        uint64_t v7 = (uint64_t *)v3[1];
        uint64_t v6 = v3[2];
        v3[2] = 0;
        if (v6) {
          (*(void (**)(uint64_t))(*(void *)v6 + 16))(v6);
        }
        operator delete(v3);
        uint64_t v3 = v7;
      }
      while (v7 != &v8);
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  *(void *)this = &unk_1F20F50C8;
  return this;
}

void sub_1C5804C58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void *support::log::client::descriptor::descriptor(void *a1, uint64_t a2, uint64_t a3)
{
  *a1 = &unk_1F20F50F8;
  uint64_t descriptor_instance = support::log::global_client_descriptor_manager::get_descriptor_instance(a2, a3);
  a1[1] = descriptor_instance;
  a1[2] = descriptor_instance;
  a1[3] = descriptor_instance + 8;
  a1[4] = descriptor_instance + 32;
  a1[5] = descriptor_instance + 56;
  return a1;
}

{
  uint64_t descriptor_instance;

  *a1 = &unk_1F20F50F8;
  uint64_t descriptor_instance = support::log::global_client_descriptor_manager::get_descriptor_instance(a2, a3);
  a1[1] = descriptor_instance;
  a1[2] = descriptor_instance;
  a1[3] = descriptor_instance + 8;
  a1[4] = descriptor_instance + 32;
  a1[5] = descriptor_instance + 56;
  return a1;
}

uint64_t support::log::global_client_descriptor_manager::get_descriptor_instance(uint64_t a1, uint64_t a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_6, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_6))
  {
    *(_OWORD *)&qword_1EBBDD560 = 0u;
    *(_OWORD *)&qword_1EBBDD550 = 0u;
    dword_1EBBDD570 = 1065353216;
    __cxa_guard_release(&_MergedGlobals_6);
  }
  std::mutex::lock(&support::log::global_client_descriptor_manager::get_descriptor_instance(std::string const&,std::string const&)::sMutex);
  memset(__p, 170, sizeof(__p));
  int v4 = *(char *)(a1 + 23);
  if (v4 >= 0) {
    size_t v5 = *(unsigned __int8 *)(a1 + 23);
  }
  else {
    size_t v5 = *(void *)(a1 + 8);
  }
  unint64_t v6 = v5 + 1;
  memset(&__dst, 170, sizeof(__dst));
  if (v5 + 1 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v6 >= 0x17)
  {
    uint64_t v8 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17) {
      uint64_t v8 = v6 | 7;
    }
    uint64_t v9 = v8 + 1;
    p_dst = (std::string *)operator new(v8 + 1);
    __dst.__r_.__value_.__l.__size_ = v5 + 1;
    __dst.__r_.__value_.__r.__words[2] = v9 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  }
  else
  {
    memset(&__dst, 0, sizeof(__dst));
    p_dst = &__dst;
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v5 + 1;
    if (!v5) {
      goto LABEL_16;
    }
  }
  if (v4 >= 0) {
    uint64_t v10 = (const std::string::value_type *)a1;
  }
  else {
    uint64_t v10 = *(const std::string::value_type **)a1;
  }
  memmove(p_dst, v10, v5);
LABEL_16:
  *(_WORD *)((char *)&p_dst->__r_.__value_.__l.__data_ + v5) = 44;
  int v11 = *(char *)(a2 + 23);
  if (v11 >= 0) {
    char v12 = (const std::string::value_type *)a2;
  }
  else {
    char v12 = *(const std::string::value_type **)a2;
  }
  if (v11 >= 0) {
    std::string::size_type v13 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    std::string::size_type v13 = *(void *)(a2 + 8);
  }
  unint64_t v14 = std::string::append(&__dst, v12, v13);
  long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  __p[2] = (void *)v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__dst.__r_.__value_.__l.__data_);
    if (std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>>>::find<std::string>(__p)) {
      goto LABEL_156;
    }
  }
  else if (std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>>>::find<std::string>(__p))
  {
    goto LABEL_156;
  }
  uint64_t v16 = (char *)operator new(0x40uLL);
  if (*(char *)(a1 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v72, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
  }
  else {
    std::string v72 = *(std::string *)a1;
  }
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v71, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v71 = *(std::string *)a2;
  }
  *(void *)uint64_t v16 = &unk_1F20F51F8;
  uint64_t v17 = v16 + 8;
  *(std::string *)(v16 + 8) = v72;
  memset(&v72, 0, sizeof(v72));
  *(std::string *)(v16 + 32) = v71;
  memset(&v71, 0, sizeof(v71));
  if (v16[31] < 0)
  {
    uint64_t v17 = *(const char **)v17;
    std::string v18 = v16 + 32;
    if ((v16[55] & 0x80000000) == 0) {
      goto LABEL_34;
    }
  }
  else
  {
    std::string v18 = v16 + 32;
    if ((v16[55] & 0x80000000) == 0) {
      goto LABEL_34;
    }
  }
  std::string v18 = *(const char **)v18;
LABEL_34:
  *((void *)v16 + 7) = os_log_create(v17, v18);
  if (SHIBYTE(__p[2]) >= 0) {
    unint64_t v19 = (uint64_t *)__p;
  }
  else {
    unint64_t v19 = (uint64_t *)__p[0];
  }
  if (SHIBYTE(__p[2]) >= 0) {
    unint64_t v20 = HIBYTE(__p[2]);
  }
  else {
    unint64_t v20 = (unint64_t)__p[1];
  }
  unint64_t v21 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&__dst, v19, v20);
  unint64_t v22 = v21;
  unint64_t v23 = qword_1EBBDD558;
  if (qword_1EBBDD558)
  {
    uint8x8_t v24 = (uint8x8_t)vcnt_s8((int8x8_t)qword_1EBBDD558);
    v24.i16[0] = vaddlv_u8(v24);
    if (v24.u32[0] > 1uLL)
    {
      unint64_t v25 = v21;
      if (v21 >= qword_1EBBDD558) {
        unint64_t v25 = v21 % qword_1EBBDD558;
      }
    }
    else
    {
      unint64_t v25 = (qword_1EBBDD558 - 1) & v21;
    }
    uint64_t v26 = *(uint64_t ***)(qword_1EBBDD550 + 8 * v25);
    if (v26)
    {
      uint64_t v27 = *v26;
      if (*v26)
      {
        if (SHIBYTE(__p[2]) >= 0) {
          uint64_t v28 = (void *)HIBYTE(__p[2]);
        }
        else {
          uint64_t v28 = __p[1];
        }
        if (SHIBYTE(__p[2]) >= 0) {
          unint64_t v29 = __p;
        }
        else {
          unint64_t v29 = (void **)__p[0];
        }
        if (v24.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v35 = v27[1];
            if (v35 == v22)
            {
              uint64_t v36 = *((unsigned __int8 *)v27 + 39);
              if ((v36 & 0x80u) == 0) {
                uint64_t v37 = (void *)*((unsigned __int8 *)v27 + 39);
              }
              else {
                uint64_t v37 = (void *)v27[3];
              }
              if (v37 == v28)
              {
                char v38 = (const void **)(v27 + 2);
                if ((v36 & 0x80) != 0)
                {
                  if (!memcmp(*v38, v29, v27[3])) {
                    goto LABEL_154;
                  }
                }
                else
                {
                  if (!*((unsigned char *)v27 + 39)) {
                    goto LABEL_154;
                  }
                  int64_t v39 = v29;
                  while (*(unsigned __int8 *)v38 == *(unsigned __int8 *)v39)
                  {
                    char v38 = (const void **)((char *)v38 + 1);
                    int64_t v39 = (void **)((char *)v39 + 1);
                    if (!--v36) {
                      goto LABEL_154;
                    }
                  }
                }
              }
            }
            else if ((v35 & (v23 - 1)) != v25)
            {
              goto LABEL_90;
            }
            uint64_t v27 = (uint64_t *)*v27;
            if (!v27) {
              goto LABEL_90;
            }
          }
        }
        do
        {
          unint64_t v30 = v27[1];
          if (v30 == v22)
          {
            uint64_t v31 = *((unsigned __int8 *)v27 + 39);
            if ((v31 & 0x80u) == 0) {
              uint64_t v32 = (void *)*((unsigned __int8 *)v27 + 39);
            }
            else {
              uint64_t v32 = (void *)v27[3];
            }
            if (v32 == v28)
            {
              uint64_t v33 = (const void **)(v27 + 2);
              if ((v31 & 0x80) != 0)
              {
                if (!memcmp(*v33, v29, v27[3])) {
                  goto LABEL_154;
                }
              }
              else
              {
                if (!*((unsigned char *)v27 + 39)) {
                  goto LABEL_154;
                }
                uint64_t v34 = v29;
                while (*(unsigned __int8 *)v33 == *(unsigned __int8 *)v34)
                {
                  uint64_t v33 = (const void **)((char *)v33 + 1);
                  uint64_t v34 = (void **)((char *)v34 + 1);
                  if (!--v31) {
                    goto LABEL_154;
                  }
                }
              }
            }
          }
          else
          {
            if (v30 >= v23) {
              v30 %= v23;
            }
            if (v30 != v25) {
              break;
            }
          }
          uint64_t v27 = (uint64_t *)*v27;
        }
        while (v27);
      }
    }
  }
  else
  {
    unint64_t v25 = 0xAAAAAAAAAAAAAAAALL;
  }
LABEL_90:
  __dst.__r_.__value_.__r.__words[2] = 0xAAAAAAAAAAAAAA00;
  uint64_t v40 = (char *)operator new(0x30uLL);
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v40;
  __dst.__r_.__value_.__l.__size_ = (std::string::size_type)&qword_1EBBDD560;
  *(void *)uint64_t v40 = 0;
  *((void *)v40 + 1) = v22;
  uint64_t v41 = (std::string *)(v40 + 16);
  if (SHIBYTE(__p[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v41, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
  }
  else
  {
    *(_OWORD *)&v41->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
    *((void **)v40 + 4) = __p[2];
  }
  *((void *)v40 + 5) = v16;
  __dst.__r_.__value_.__s.__data_[16] = 1;
  float v42 = (float)(unint64_t)(qword_1EBBDD568 + 1);
  if (!v23 || (float)(*(float *)&dword_1EBBDD570 * (float)v23) < v42)
  {
    BOOL v45 = 1;
    if (v23 >= 3) {
      BOOL v45 = (v23 & (v23 - 1)) != 0;
    }
    unint64_t v46 = v45 | (2 * v23);
    unint64_t v47 = vcvtps_u32_f32(v42 / *(float *)&dword_1EBBDD570);
    if (v46 <= v47) {
      unint64_t prime = v47;
    }
    else {
      unint64_t prime = v46;
    }
    if (prime == 1)
    {
      unint64_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      unint64_t prime = std::__next_prime(prime);
    }
    unint64_t v23 = qword_1EBBDD558;
    if (prime > qword_1EBBDD558) {
      goto LABEL_107;
    }
    if (prime >= qword_1EBBDD558) {
      goto LABEL_140;
    }
    unint64_t v59 = vcvtps_u32_f32((float)(unint64_t)qword_1EBBDD568 / *(float *)&dword_1EBBDD570);
    if ((unint64_t)qword_1EBBDD558 < 3
      || (uint8x8_t v60 = (uint8x8_t)vcnt_s8((int8x8_t)qword_1EBBDD558), v60.i16[0] = vaddlv_u8(v60), v60.u32[0] > 1uLL))
    {
      unint64_t v59 = std::__next_prime(v59);
    }
    else
    {
      uint64_t v61 = 1 << -(char)__clz(v59 - 1);
      if (v59 >= 2) {
        unint64_t v59 = v61;
      }
    }
    if (prime <= v59) {
      unint64_t prime = v59;
    }
    if (prime >= v23)
    {
      unint64_t v23 = qword_1EBBDD558;
    }
    else
    {
      if (prime)
      {
LABEL_107:
        if (prime >> 61) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        unint64_t v49 = operator new(8 * prime);
        unint64_t v50 = (void *)qword_1EBBDD550;
        qword_1EBBDD550 = (uint64_t)v49;
        if (v50) {
          operator delete(v50);
        }
        uint64_t v51 = 0;
        qword_1EBBDD558 = prime;
        do
          *(void *)(qword_1EBBDD550 + 8 * v51++) = 0;
        while (prime != v51);
        unint64_t v52 = (void **)qword_1EBBDD560;
        if (!qword_1EBBDD560) {
          goto LABEL_139;
        }
        unint64_t v53 = *(void *)(qword_1EBBDD560 + 8);
        unint64_t v54 = prime - 1;
        if ((prime & (prime - 1)) == 0)
        {
          unint64_t v55 = v53 & v54;
          *(void *)(qword_1EBBDD550 + 8 * v55) = &qword_1EBBDD560;
          for (unint64_t i = *v52; *v52; unint64_t i = *v52)
          {
            unint64_t v57 = i[1] & v54;
            if (v57 == v55)
            {
              unint64_t v52 = (void **)i;
            }
            else if (*(void *)(qword_1EBBDD550 + 8 * v57))
            {
              char *v52 = (void *)*i;
              uint64_t v58 = 8 * v57;
              *unint64_t i = **(void **)(qword_1EBBDD550 + v58);
              **(void **)(qword_1EBBDD550 + v58) = i;
            }
            else
            {
              *(void *)(qword_1EBBDD550 + 8 * v57) = v52;
              unint64_t v52 = (void **)i;
              unint64_t v55 = v57;
            }
          }
LABEL_139:
          unint64_t v23 = prime;
          goto LABEL_140;
        }
        if (v53 >= prime) {
          v53 %= prime;
        }
        *(void *)(qword_1EBBDD550 + 8 * v53) = &qword_1EBBDD560;
        float64x2x2_t v62 = *v52;
        if (!*v52) {
          goto LABEL_139;
        }
        while (1)
        {
          unint64_t v64 = v62[1];
          if (v64 >= prime) {
            v64 %= prime;
          }
          if (v64 == v53) {
            goto LABEL_133;
          }
          if (*(void *)(qword_1EBBDD550 + 8 * v64))
          {
            char *v52 = (void *)*v62;
            uint64_t v63 = 8 * v64;
            *float64x2x2_t v62 = **(void **)(qword_1EBBDD550 + v63);
            **(void **)(qword_1EBBDD550 + v63) = v62;
            float64x2x2_t v62 = v52;
LABEL_133:
            unint64_t v52 = (void **)v62;
            float64x2x2_t v62 = (void *)*v62;
            if (!v62) {
              goto LABEL_139;
            }
          }
          else
          {
            *(void *)(qword_1EBBDD550 + 8 * v64) = v52;
            unint64_t v52 = (void **)v62;
            float64x2x2_t v62 = (void *)*v62;
            unint64_t v53 = v64;
            if (!v62) {
              goto LABEL_139;
            }
          }
        }
      }
      uint64_t v70 = (void *)qword_1EBBDD550;
      qword_1EBBDD550 = 0;
      if (v70) {
        operator delete(v70);
      }
      unint64_t v23 = 0;
      qword_1EBBDD558 = 0;
    }
LABEL_140:
    unint64_t v65 = v23 - 1;
    if ((v23 & (v23 - 1)) != 0)
    {
      if (v22 >= v23)
      {
        unint64_t v25 = v22 % v23;
        uint64_t v43 = *(void **)(qword_1EBBDD550 + 8 * (v22 % v23));
        uint64_t v44 = (void *)__dst.__r_.__value_.__r.__words[0];
        if (v43) {
          goto LABEL_96;
        }
      }
      else
      {
        unint64_t v25 = v22;
        uint64_t v43 = *(void **)(qword_1EBBDD550 + 8 * v22);
        uint64_t v44 = (void *)__dst.__r_.__value_.__r.__words[0];
        if (v43) {
          goto LABEL_96;
        }
      }
    }
    else
    {
      unint64_t v25 = v65 & v22;
      uint64_t v43 = *(void **)(qword_1EBBDD550 + 8 * (v65 & v22));
      uint64_t v44 = (void *)__dst.__r_.__value_.__r.__words[0];
      if (v43) {
        goto LABEL_96;
      }
    }
LABEL_142:
    *uint64_t v44 = qword_1EBBDD560;
    qword_1EBBDD560 = __dst.__r_.__value_.__r.__words[0];
    *(void *)(qword_1EBBDD550 + 8 * v25) = &qword_1EBBDD560;
    if (*(void *)__dst.__r_.__value_.__l.__data_)
    {
      unint64_t v66 = *(void *)(*(void *)__dst.__r_.__value_.__l.__data_ + 8);
      if ((v23 & (v23 - 1)) != 0)
      {
        if (v66 >= v23) {
          v66 %= v23;
        }
      }
      else
      {
        v66 &= v23 - 1;
      }
      *(void *)(qword_1EBBDD550 + 8 * v66) = __dst.__r_.__value_.__r.__words[0];
    }
    goto LABEL_153;
  }
  uint64_t v43 = *(void **)(qword_1EBBDD550 + 8 * v25);
  uint64_t v44 = (void *)__dst.__r_.__value_.__r.__words[0];
  if (!v43) {
    goto LABEL_142;
  }
LABEL_96:
  *uint64_t v44 = *v43;
  void *v43 = __dst.__r_.__value_.__r.__words[0];
LABEL_153:
  ++qword_1EBBDD568;
LABEL_154:
  if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v71.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v72.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_156:
      uint64_t v67 = std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>>>::find<std::string>(__p);
      if (v67) {
        goto LABEL_157;
      }
LABEL_162:
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    }
  }
  else if ((SHIBYTE(v72.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_156;
  }
  operator delete(v72.__r_.__value_.__l.__data_);
  uint64_t v67 = std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>>>::find<std::string>(__p);
  if (!v67) {
    goto LABEL_162;
  }
LABEL_157:
  uint64_t v68 = v67[5];
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  std::mutex::unlock(&support::log::global_client_descriptor_manager::get_descriptor_instance(std::string const&,std::string const&)::sMutex);
  return v68;
}

void sub_1C58055B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else if ((a21 & 0x80000000) == 0)
  {
LABEL_3:
    if ((a28 & 0x80000000) == 0)
    {
LABEL_8:
      std::mutex::unlock(&support::log::global_client_descriptor_manager::get_descriptor_instance(std::string const&,std::string const&)::sMutex);
      _Unwind_Resume(a1);
    }
LABEL_7:
    operator delete(a23);
    std::mutex::unlock(&support::log::global_client_descriptor_manager::get_descriptor_instance(std::string const&,std::string const&)::sMutex);
    _Unwind_Resume(a1);
  }
  operator delete(a16);
  if ((a28 & 0x80000000) == 0) {
    goto LABEL_8;
  }
  goto LABEL_7;
}

BOOL support::log::client::descriptor::operator==(uint64_t a1, uint64_t a2)
{
  return *(void *)(a1 + 16) == *(void *)(a2 + 16);
}

void *support::log::client::client(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *a1 = &unk_1F20F5118;
  *(_OWORD *)char v12 = *(_OWORD *)a2;
  uint64_t v13 = *(void *)(a2 + 16);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  *(_OWORD *)std::string __p = *(_OWORD *)a3;
  uint64_t v11 = *(void *)(a3 + 16);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  a1[1] = &unk_1F20F50F8;
  uint64_t descriptor_instance = support::log::global_client_descriptor_manager::get_descriptor_instance((uint64_t)v12, (uint64_t)__p);
  a1[2] = descriptor_instance;
  a1[3] = descriptor_instance;
  a1[4] = descriptor_instance + 8;
  a1[5] = descriptor_instance + 32;
  a1[6] = descriptor_instance + 56;
  if ((SHIBYTE(v11) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v13) & 0x80000000) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    operator delete(v12[0]);
    if (a4) {
      goto LABEL_4;
    }
LABEL_7:
    pthread_mutex_lock(&ctu::Singleton<support::log::manager_global,support::log::manager_global,ctu::PthreadMutexGuardPolicy<support::log::manager_global>>::sInstance);
    if (!qword_1EA3D5EE8)
    {
      uint64_t v7 = operator new(0xA8uLL);
      v7[1] = 0;
      v7[2] = 0;
      void *v7 = &unk_1F20F5360;
      a4 = (uint64_t)(v7 + 3);
      support::log::manager_global::manager_global((support::log::manager_global *)(v7 + 3));
      uint64_t v8 = (std::__shared_weak_count *)off_1EA3D5EF0;
      qword_1EA3D5EE8 = (uint64_t)(v7 + 3);
      off_1EA3D5EF0 = v7;
      if (!v8)
      {
LABEL_13:
        atomic_fetch_add_explicit(v7 + 1, 1uLL, memory_order_relaxed);
LABEL_14:
        pthread_mutex_unlock(&ctu::Singleton<support::log::manager_global,support::log::manager_global,ctu::PthreadMutexGuardPolicy<support::log::manager_global>>::sInstance);
        a1[7] = a4;
        a1[8] = v7;
        goto LABEL_15;
      }
      if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    a4 = qword_1EA3D5EE8;
    uint64_t v7 = off_1EA3D5EF0;
    if (!off_1EA3D5EF0) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  operator delete(__p[0]);
  if (SHIBYTE(v13) < 0) {
    goto LABEL_6;
  }
LABEL_3:
  if (!a4) {
    goto LABEL_7;
  }
LABEL_4:
  a1[7] = 0;
  a1[8] = 0;
LABEL_15:
  a1[9] = a4;
  return a1;
}

void sub_1C58058F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  std::__shared_weak_count::~__shared_weak_count(v21);
  operator delete(v23);
  pthread_mutex_unlock(&ctu::Singleton<support::log::manager_global,support::log::manager_global,ctu::PthreadMutexGuardPolicy<support::log::manager_global>>::sInstance);
  _Unwind_Resume(a1);
}

void *support::log::client::client(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  *a1 = &unk_1F20F5118;
  *(_OWORD *)char v12 = *(_OWORD *)a2;
  uint64_t v13 = *(void *)(a2 + 16);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  *(_OWORD *)std::string __p = *(_OWORD *)a3;
  uint64_t v11 = *(void *)(a3 + 16);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  a1[1] = &unk_1F20F50F8;
  uint64_t descriptor_instance = support::log::global_client_descriptor_manager::get_descriptor_instance((uint64_t)v12, (uint64_t)__p);
  a1[2] = descriptor_instance;
  a1[3] = descriptor_instance;
  a1[4] = descriptor_instance + 8;
  a1[5] = descriptor_instance + 32;
  a1[6] = descriptor_instance + 56;
  if ((SHIBYTE(v11) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v13) & 0x80000000) == 0) {
      goto LABEL_3;
    }
LABEL_7:
    operator delete(v12[0]);
    uint64_t v7 = *a4;
    uint64_t v8 = a4[1];
    a1[7] = *a4;
    a1[8] = v8;
    if (!v8) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  operator delete(__p[0]);
  if (SHIBYTE(v13) < 0) {
    goto LABEL_7;
  }
LABEL_3:
  uint64_t v7 = *a4;
  uint64_t v8 = a4[1];
  a1[7] = *a4;
  a1[8] = v8;
  if (v8)
  {
LABEL_4:
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    uint64_t v7 = a1[7];
  }
LABEL_5:
  a1[9] = v7;
  return a1;
}

void sub_1C5805A74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  _Unwind_Resume(exception_object);
}

void *support::log::client::client(void *a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)uint64_t v7 = *(_OWORD *)a2;
  uint64_t v8 = *(void *)(a2 + 16);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  *(_OWORD *)std::string __p = *(_OWORD *)a3;
  uint64_t v6 = *(void *)(a3 + 16);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  support::log::client::client(a1, (uint64_t)v7, (uint64_t)__p, 0);
  if (SHIBYTE(v6) < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(v8) & 0x80000000) == 0) {
      return a1;
    }
  }
  else if ((SHIBYTE(v8) & 0x80000000) == 0)
  {
    return a1;
  }
  operator delete(v7[0]);
  return a1;
}

{
  void *__p[2];
  uint64_t v6;
  void *v7[2];
  uint64_t v8;

  *(_OWORD *)uint64_t v7 = *(_OWORD *)a2;
  uint64_t v8 = *(void *)(a2 + 16);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  *(_OWORD *)std::string __p = *(_OWORD *)a3;
  uint64_t v6 = *(void *)(a3 + 16);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  support::log::client::client(a1, (uint64_t)v7, (uint64_t)__p, 0);
  if (SHIBYTE(v6) < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(v8) & 0x80000000) == 0) {
      return a1;
    }
  }
  else if ((SHIBYTE(v8) & 0x80000000) == 0)
  {
    return a1;
  }
  operator delete(v7[0]);
  return a1;
}

void sub_1C5805B5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  _Unwind_Resume(exception_object);
}

void sub_1C5805C40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  _Unwind_Resume(exception_object);
}

uint64_t support::log::client::get_manager(support::log::client *this)
{
  return *((void *)this + 9);
}

uint64_t support::log::client::get_descriptor(support::log::client *this)
{
  return (uint64_t)this + 8;
}

void support::log::stdout_delegate::~stdout_delegate(support::log::stdout_delegate *this)
{
  *(void *)this = &unk_1F20F5020;
  if (*((unsigned char *)this + 24))
  {
    uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 2);
    if (v1) {
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

{
  std::__shared_weak_count *v2;
  uint64_t vars8;

  *(void *)this = &unk_1F20F5020;
  if (*((unsigned char *)this + 24))
  {
    uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 2);
    if (v2) {
      std::__shared_weak_count::__release_weak(v2);
    }
  }

  operator delete(this);
}

BOOL support::log::manager::should_log(uint64_t a1, unsigned int a2, os_log_t oslog)
{
  return *(unsigned __int8 *)(a1 + 112) >= a2 || os_log_type_enabled(oslog, support::log::sOSLogLevel[a2]);
}

uint64_t ctu::PthreadMutexGuardPolicy<support::log::shared_stdio>::~PthreadMutexGuardPolicy(uint64_t a1)
{
  pthread_mutex_lock((pthread_mutex_t *)a1);
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 72);
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 72);
  if (!v3 || atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v3);
  return a1;
}

uint64_t ctu::PthreadMutexGuardPolicy<support::log::buffer>::~PthreadMutexGuardPolicy(uint64_t a1)
{
  pthread_mutex_lock((pthread_mutex_t *)a1);
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 72);
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 72);
  if (!v3 || atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v3);
  return a1;
}

uint64_t ctu::PthreadMutexGuardPolicy<support::log::manager_global>::~PthreadMutexGuardPolicy(uint64_t a1)
{
  pthread_mutex_lock((pthread_mutex_t *)a1);
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 72);
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 72);
  if (!v3 || atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void support::log::manager_global::~manager_global(support::log::manager_global *this)
{
  *(void *)this = &unk_1F20F5068;
  if (*((void *)this + 17))
  {
    uint64_t v2 = (char *)this + 120;
    uint64_t v3 = *((void *)this + 15);
    int v4 = (char *)*((void *)this + 16);
    uint64_t v5 = *(void *)v4;
    *(void *)(v5 + 8) = *(void *)(v3 + 8);
    **(void **)(v3 + 8) = v5;
    *((void *)this + 17) = 0;
    if (v4 != (char *)this + 120)
    {
      do
      {
        uint64_t v7 = (char *)*((void *)v4 + 1);
        uint64_t v6 = *((void *)v4 + 2);
        *((void *)v4 + 2) = 0;
        if (v6) {
          (*(void (**)(uint64_t))(*(void *)v6 + 16))(v6);
        }
        operator delete(v4);
        int v4 = v7;
      }
      while (v7 != v2);
    }
  }
  if (*((char *)this + 95) < 0) {
    operator delete(*((void **)this + 9));
  }
  std::mutex::~mutex((std::mutex *)((char *)this + 8));
}

{
  char *v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t vars8;

  *(void *)this = &unk_1F20F5068;
  if (*((void *)this + 17))
  {
    uint64_t v2 = (char *)this + 120;
    uint64_t v3 = *((void *)this + 15);
    int v4 = (char *)*((void *)this + 16);
    uint64_t v5 = *(void *)v4;
    *(void *)(v5 + 8) = *(void *)(v3 + 8);
    **(void **)(v3 + 8) = v5;
    *((void *)this + 17) = 0;
    if (v4 != (char *)this + 120)
    {
      do
      {
        uint64_t v7 = (char *)*((void *)v4 + 1);
        uint64_t v6 = *((void *)v4 + 2);
        *((void *)v4 + 2) = 0;
        if (v6) {
          (*(void (**)(uint64_t))(*(void *)v6 + 16))(v6);
        }
        operator delete(v4);
        int v4 = v7;
      }
      while (v7 != v2);
    }
  }
  if (*((char *)this + 95) < 0) {
    operator delete(*((void **)this + 9));
  }
  std::mutex::~mutex((std::mutex *)((char *)this + 8));

  operator delete(this);
}

void support::log::client::~client(support::log::client *this)
{
  *(void *)this = &unk_1F20F5118;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 8);
  if (v1)
  {
    if (!atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void support::log::client::~client(std::__shared_weak_count **this)
{
  uint64_t v1 = (support::log::client *)this;
  *this = (std::__shared_weak_count *)&unk_1F20F5118;
  uint64_t v2 = this[8];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    this = (std::__shared_weak_count **)v1;
  }
  else if (((vars8 ^ (2 * vars8)) & 0x4000000000000000) != 0)
  {
    __break(0xC471u);
  }
  operator delete(this);
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>>>::find<std::string>(void *a1)
{
  uint64_t v1 = a1;
  int v2 = *((char *)a1 + 23);
  if (v2 >= 0) {
    uint64_t v3 = a1;
  }
  else {
    uint64_t v3 = (uint64_t *)*a1;
  }
  if (v2 >= 0) {
    unint64_t v4 = *((unsigned __int8 *)a1 + 23);
  }
  else {
    unint64_t v4 = a1[1];
  }
  unint64_t v5 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v24, v3, v4);
  unint64_t v6 = qword_1EBBDD558;
  if (!qword_1EBBDD558) {
    return 0;
  }
  unint64_t v7 = v5;
  uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)qword_1EBBDD558);
  v8.i16[0] = vaddlv_u8(v8);
  if (v8.u32[0] > 1uLL)
  {
    unint64_t v9 = v5;
    if (v5 >= qword_1EBBDD558) {
      unint64_t v9 = v5 % qword_1EBBDD558;
    }
  }
  else
  {
    unint64_t v9 = (qword_1EBBDD558 - 1) & v5;
  }
  uint64_t v11 = *(uint64_t ***)(qword_1EBBDD550 + 8 * v9);
  if (v11)
  {
    char v12 = *v11;
    if (*v11)
    {
      char v13 = v1[23];
      if (v13 >= 0) {
        uint64_t v14 = v1[23];
      }
      else {
        uint64_t v14 = *((void *)v1 + 1);
      }
      if (v13 < 0) {
        uint64_t v1 = *(unsigned char **)v1;
      }
      if (v8.u32[0] < 2uLL)
      {
        uint64_t v15 = qword_1EBBDD558 - 1;
        while (1)
        {
          uint64_t v20 = v12[1];
          if (v20 == v7)
          {
            uint64_t v21 = *((unsigned __int8 *)v12 + 39);
            if ((v21 & 0x80u) == 0) {
              uint64_t v22 = *((unsigned __int8 *)v12 + 39);
            }
            else {
              uint64_t v22 = v12[3];
            }
            if (v22 == v14)
            {
              if ((v21 & 0x80) != 0)
              {
                if (!memcmp((const void *)v12[2], v1, v12[3])) {
                  return v12;
                }
              }
              else
              {
                if (!*((unsigned char *)v12 + 39)) {
                  return v12;
                }
                uint64_t v23 = 0;
                while (*((unsigned __int8 *)v12 + v23 + 16) == v1[v23])
                {
                  if (v21 == ++v23) {
                    return v12;
                  }
                }
              }
            }
          }
          else if ((v20 & v15) != v9)
          {
            return 0;
          }
          double result = 0;
          char v12 = (uint64_t *)*v12;
          if (!v12) {
            return result;
          }
        }
      }
      while (1)
      {
        unint64_t v16 = v12[1];
        if (v16 == v7)
        {
          uint64_t v17 = *((unsigned __int8 *)v12 + 39);
          if ((v17 & 0x80u) == 0) {
            uint64_t v18 = *((unsigned __int8 *)v12 + 39);
          }
          else {
            uint64_t v18 = v12[3];
          }
          if (v18 == v14)
          {
            if ((v17 & 0x80) != 0)
            {
              if (!memcmp((const void *)v12[2], v1, v12[3])) {
                return v12;
              }
            }
            else
            {
              if (!*((unsigned char *)v12 + 39)) {
                return v12;
              }
              uint64_t v19 = 0;
              while (*((unsigned __int8 *)v12 + v19 + 16) == v1[v19])
              {
                if (v17 == ++v19) {
                  return v12;
                }
              }
            }
          }
        }
        else
        {
          if (v16 >= v6) {
            v16 %= v6;
          }
          if (v16 != v9) {
            return 0;
          }
        }
        double result = 0;
        char v12 = (uint64_t *)*v12;
        if (!v12) {
          return result;
        }
      }
    }
  }
  return 0;
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100](uint64_t a1, uint64_t *a2, unint64_t a3)
{
  if (a3 > 0x20)
  {
    if (a3 > 0x40)
    {
      uint64_t v23 = *(uint64_t *)((char *)a2 + a3 - 48);
      uint64_t v24 = *(uint64_t *)((char *)a2 + a3 - 40);
      uint64_t v25 = *(uint64_t *)((char *)a2 + a3 - 24);
      uint64_t v27 = *(uint64_t *)((char *)a2 + a3 - 64);
      uint64_t v26 = *(uint64_t *)((char *)a2 + a3 - 56);
      uint64_t v28 = *(uint64_t *)((char *)a2 + a3 - 16);
      uint64_t v29 = *(uint64_t *)((char *)a2 + a3 - 8);
      unint64_t v30 = v26 + v28;
      unint64_t v31 = 0x9DDFEA08EB382D69
          * (v25 ^ ((0x9DDFEA08EB382D69 * (v25 ^ (v23 + a3))) >> 47) ^ (0x9DDFEA08EB382D69 * (v25 ^ (v23 + a3))));
      unint64_t v32 = 0x9DDFEA08EB382D69 * (v31 ^ (v31 >> 47));
      unint64_t v33 = v23 + v26 + v27 + a3;
      uint64_t v34 = v33 + v24;
      unint64_t v35 = __ROR8__(v33, 44) + v27 + a3 + __ROR8__(v27 + a3 + v24 - 0x622015F714C7D297 * (v31 ^ (v31 >> 47)), 21);
      uint64_t v36 = v26 + v28 + *(uint64_t *)((char *)a2 + a3 - 32) - 0x4B6D499041670D8DLL;
      uint64_t v37 = v25 + v28 + v36;
      uint64_t v38 = __ROR8__(v37, 44);
      uint64_t v39 = v37 + v29;
      uint64_t v40 = v38 + v36 + __ROR8__(v36 + v24 + v29, 21);
      uint64_t v42 = *a2;
      uint64_t v41 = a2 + 4;
      unint64_t v43 = v42 - 0x4B6D499041670D8DLL * v24;
      uint64_t v44 = -(uint64_t)((a3 - 1) & 0xFFFFFFFFFFFFFFC0);
      do
      {
        uint64_t v45 = *(v41 - 3);
        uint64_t v46 = v43 + v34 + v30 + v45;
        uint64_t v47 = v41[2];
        uint64_t v48 = v41[3];
        uint64_t v49 = v41[1];
        unint64_t v30 = v49 + v34 - 0x4B6D499041670D8DLL * __ROR8__(v30 + v35 + v47, 42);
        uint64_t v50 = v32 + v39;
        uint64_t v51 = *(v41 - 2);
        uint64_t v52 = *(v41 - 1);
        uint64_t v53 = *(v41 - 4) - 0x4B6D499041670D8DLL * v35;
        uint64_t v54 = v53 + v39 + v52;
        uint64_t v55 = v53 + v45 + v51;
        uint64_t v34 = v55 + v52;
        uint64_t v56 = __ROR8__(v55, 44) + v53;
        unint64_t v57 = (0xB492B66FBE98F273 * __ROR8__(v46, 37)) ^ v40;
        unint64_t v43 = 0xB492B66FBE98F273 * __ROR8__(v50, 33);
        unint64_t v35 = v56 + __ROR8__(v54 + v57, 21);
        unint64_t v58 = v43 + v40 + *v41;
        uint64_t v39 = v49 + v47 + v58 + v48;
        uint64_t v40 = __ROR8__(v49 + v47 + v58, 44) + v58 + __ROR8__(v30 + v51 + v58 + v48, 21);
        v41 += 8;
        unint64_t v32 = v57;
        v44 += 64;
      }
      while (v44);
      unint64_t v59 = v43
          - 0x622015F714C7D297
          * ((0x9DDFEA08EB382D69
            * (v40 ^ ((0x9DDFEA08EB382D69 * (v40 ^ v35)) >> 47) ^ (0x9DDFEA08EB382D69 * (v40 ^ v35)))) ^ ((0x9DDFEA08EB382D69 * (v40 ^ ((0x9DDFEA08EB382D69 * (v40 ^ v35)) >> 47) ^ (0x9DDFEA08EB382D69 * (v40 ^ v35)))) >> 47));
      unint64_t v60 = 0x9DDFEA08EB382D69
          * (v59 ^ (v57
                  - 0x4B6D499041670D8DLL * (v30 ^ (v30 >> 47))
                  - 0x622015F714C7D297
                  * ((0x9DDFEA08EB382D69
                    * (v39 ^ ((0x9DDFEA08EB382D69 * (v39 ^ v34)) >> 47) ^ (0x9DDFEA08EB382D69 * (v39 ^ v34)))) ^ ((0x9DDFEA08EB382D69 * (v39 ^ ((0x9DDFEA08EB382D69 * (v39 ^ v34)) >> 47) ^ (0x9DDFEA08EB382D69 * (v39 ^ v34)))) >> 47))));
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v59 ^ (v60 >> 47) ^ v60)) ^ ((0x9DDFEA08EB382D69 * (v59 ^ (v60 >> 47) ^ v60)) >> 47));
    }
    else
    {
      uint64_t v6 = *(uint64_t *)((char *)a2 + a3 - 16);
      uint64_t v7 = *a2 - 0x3C5A37A36834CED9 * (v6 + a3);
      uint64_t v9 = a2[2];
      uint64_t v8 = a2[3];
      uint64_t v10 = __ROR8__(v7 + v8, 52);
      uint64_t v11 = v7 + a2[1];
      uint64_t v12 = __ROR8__(v11, 7);
      uint64_t v13 = v11 + v9;
      uint64_t v14 = *(uint64_t *)((char *)a2 + a3 - 32) + v9;
      uint64_t v15 = v12 + __ROR8__(*a2 - 0x3C5A37A36834CED9 * (v6 + a3), 37) + v10 + __ROR8__(v13, 31);
      uint64_t v16 = *(uint64_t *)((char *)a2 + a3 - 24) + v14 + v6;
      unint64_t v17 = 0xC3A5C85C97CB3127 * (v16 + *(uint64_t *)((char *)a2 + a3 - 8) + v8 + v15)
          - 0x651E95C4D06FBFB1
          * (v13
           + v8
           + __ROR8__(v14, 37)
           + __ROR8__(*(uint64_t *)((char *)a2 + a3 - 24) + v14, 7)
           + __ROR8__(*(uint64_t *)((char *)a2 + a3 - 8) + v8 + v14, 52)
           + __ROR8__(v16, 31));
      return 0x9AE16A3B2F90404FLL
           * ((v15 - 0x3C5A37A36834CED9 * (v17 ^ (v17 >> 47))) ^ ((v15 - 0x3C5A37A36834CED9 * (v17 ^ (v17 >> 47))) >> 47));
    }
  }
  else if (a3 > 0x10)
  {
    uint64_t v18 = a2[1];
    unint64_t v19 = 0xB492B66FBE98F273 * *a2;
    uint64_t v20 = __ROR8__(0x9AE16A3B2F90404FLL * *(uint64_t *)((char *)a2 + a3 - 8), 30) + __ROR8__(v19 - v18, 43);
    unint64_t v21 = v19 + a3 + __ROR8__(v18 ^ 0xC949D7C7509E6557, 20) - 0x9AE16A3B2F90404FLL * *(uint64_t *)((char *)a2 + a3 - 8);
    unint64_t v22 = 0x9DDFEA08EB382D69 * ((v20 - 0x3C5A37A36834CED9 * *(uint64_t *)((char *)a2 + a3 - 16)) ^ v21);
    return 0x9DDFEA08EB382D69
         * ((0x9DDFEA08EB382D69 * (v21 ^ (v22 >> 47) ^ v22)) ^ ((0x9DDFEA08EB382D69 * (v21 ^ (v22 >> 47) ^ v22)) >> 47));
  }
  else if (a3 < 9)
  {
    if (a3 < 4)
    {
      unint64_t result = 0x9AE16A3B2F90404FLL;
      if (a3)
      {
        unint64_t v63 = (0xC949D7C7509E6557 * (a3 + 4 * *((unsigned __int8 *)a2 + a3 - 1))) ^ (0x9AE16A3B2F90404FLL
                                                                                       * (*(unsigned __int8 *)a2 | ((unint64_t)*((unsigned __int8 *)a2 + (a3 >> 1)) << 8)));
        return 0x9AE16A3B2F90404FLL * (v63 ^ (v63 >> 47));
      }
    }
    else
    {
      uint64_t v61 = *(unsigned int *)((char *)a2 + a3 - 4);
      unint64_t v62 = 0x9DDFEA08EB382D69 * (((8 * *(_DWORD *)a2) + a3) ^ v61);
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v61 ^ (v62 >> 47) ^ v62)) ^ ((0x9DDFEA08EB382D69 * (v61 ^ (v62 >> 47) ^ v62)) >> 47));
    }
  }
  else
  {
    uint64_t v3 = *(uint64_t *)((char *)a2 + a3 - 8);
    uint64_t v4 = __ROR8__(v3 + a3, a3);
    return (0x9DDFEA08EB382D69
          * ((0x9DDFEA08EB382D69
            * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *a2)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *a2)))) ^ ((0x9DDFEA08EB382D69 * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *a2)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *a2)))) >> 47))) ^ v3;
  }
  return result;
}

uint64_t *std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>,void *>>>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((unsigned char *)a1 + 16))
    {
      uint64_t v3 = *(void *)(v2 + 40);
      *(void *)(v2 + 40) = 0;
      if (v3) {
        (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
      }
      if (*(char *)(v2 + 39) < 0) {
        operator delete(*(void **)(v2 + 16));
      }
    }
    operator delete((void *)v2);
  }
  return a1;
}

void support::log::global_client_descriptor::~global_client_descriptor(void **this)
{
  *this = &unk_1F20F51F8;
  if ((*((char *)this + 55) & 0x80000000) == 0)
  {
    if ((*((char *)this + 31) & 0x80000000) == 0) {
      return;
    }
LABEL_5:
    operator delete(this[1]);
    return;
  }
  operator delete(this[4]);
  if (*((char *)this + 31) < 0) {
    goto LABEL_5;
  }
}

{
  support::log::global_client_descriptor *v2;
  uint64_t vars8;

  *this = &unk_1F20F51F8;
  if (*((char *)this + 55) < 0)
  {
    operator delete(this[4]);
    if ((*((char *)this + 31) & 0x80000000) == 0)
    {
LABEL_3:
      uint64_t v2 = (support::log::global_client_descriptor *)this;
      goto LABEL_5;
    }
  }
  else if ((*((char *)this + 31) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(this[1]);
  uint64_t v2 = (support::log::global_client_descriptor *)this;

LABEL_5:
  operator delete(v2);
}

void std::__shared_ptr_pointer<support::log::delegate::context *,std::shared_ptr<support::log::delegate::context>::__shared_ptr_default_delete<support::log::delegate::context,support::log::delegate::context>,std::allocator<support::log::delegate::context>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t std::__shared_ptr_pointer<support::log::delegate::context *,std::shared_ptr<support::log::delegate::context>::__shared_ptr_default_delete<support::log::delegate::context,support::log::delegate::context>,std::allocator<support::log::delegate::context>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<support::log::delegate::context *,std::shared_ptr<support::log::delegate::context>::__shared_ptr_default_delete<support::log::delegate::context,support::log::delegate::context>,std::allocator<support::log::delegate::context>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x80000001C599F1D3) {
    return a1 + 24;
  }
  if (((v3 & 0x80000001C599F1D3 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000001C599F1D3)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001C599F1D3 & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 24;
  }
  return 0;
}

void std::__shared_ptr_emplace<support::log::buffer>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20F5278;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<support::log::buffer>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20F5278;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t std::__shared_ptr_emplace<support::log::buffer>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void support::log::buffer::~buffer(support::log::buffer *this)
{
  *(void *)this = &unk_1F20F52C8;
  uint64_t v2 = (char *)*((void *)this + 9);
  uint64_t v3 = (char *)this + 80;
  if (v2 != (char *)this + 80)
  {
    do
    {
      free(*((void **)v2 + 4));
      uint64_t v4 = (char *)*((void *)v2 + 1);
      if (v4)
      {
        do
        {
          unint64_t v5 = v4;
          uint64_t v4 = *(char **)v4;
        }
        while (v4);
      }
      else
      {
        do
        {
          unint64_t v5 = (char *)*((void *)v2 + 2);
          BOOL v6 = *(void *)v5 == (void)v2;
          uint64_t v2 = v5;
        }
        while (!v6);
      }
      uint64_t v2 = v5;
    }
    while (v5 != v3);
  }
  std::deque<char *>::~deque[abi:ne180100]((uint64_t)this + 96);
  std::__tree<std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>>>::destroy(*((void **)this + 10));
  std::mutex::~mutex((std::mutex *)((char *)this + 8));
}

{
  char *v2;
  char *v3;
  char *v4;
  char *v5;
  BOOL v6;
  uint64_t vars8;

  *(void *)this = &unk_1F20F52C8;
  uint64_t v2 = (char *)*((void *)this + 9);
  uint64_t v3 = (char *)this + 80;
  if (v2 != (char *)this + 80)
  {
    do
    {
      free(*((void **)v2 + 4));
      uint64_t v4 = (char *)*((void *)v2 + 1);
      if (v4)
      {
        do
        {
          unint64_t v5 = v4;
          uint64_t v4 = *(char **)v4;
        }
        while (v4);
      }
      else
      {
        do
        {
          unint64_t v5 = (char *)*((void *)v2 + 2);
          BOOL v6 = *(void *)v5 == (void)v2;
          uint64_t v2 = v5;
        }
        while (!v6);
      }
      uint64_t v2 = v5;
    }
    while (v5 != v3);
  }
  std::deque<char *>::~deque[abi:ne180100]((uint64_t)this + 96);
  std::__tree<std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>>>::destroy(*((void **)this + 10));
  std::mutex::~mutex((std::mutex *)((char *)this + 8));

  operator delete(this);
}

uint64_t std::deque<char *>::~deque[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void ***)(a1 + 8);
  uint64_t v3 = *(void ***)(a1 + 16);
  *(void *)(a1 + 40) = 0;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v3 = *(void ***)(a1 + 16);
      uint64_t v2 = (void **)(*(void *)(a1 + 8) + 8);
      *(void *)(a1 + 8) = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 256;
    goto LABEL_7;
  }
  if (v5 == 2)
  {
    uint64_t v6 = 512;
LABEL_7:
    *(void *)(a1 + 32) = v6;
  }
  if (v2 != v3)
  {
    do
    {
      uint64_t v7 = *v2++;
      operator delete(v7);
    }
    while (v2 != v3);
    uint64_t v9 = *(void *)(a1 + 8);
    uint64_t v8 = *(void *)(a1 + 16);
    if (v8 != v9) {
      *(void *)(a1 + 16) = v8 + ((v9 - v8 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::__shared_ptr_pointer<support::log::manager *,std::shared_ptr<support::log::manager>::__shared_ptr_default_delete<support::log::manager,support::log::manager>,std::allocator<support::log::manager>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t std::__shared_ptr_pointer<support::log::manager *,std::shared_ptr<support::log::manager>::__shared_ptr_default_delete<support::log::manager,support::log::manager>,std::allocator<support::log::manager>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<support::log::manager *,std::shared_ptr<support::log::manager>::__shared_ptr_default_delete<support::log::manager,support::log::manager>,std::allocator<support::log::manager>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x80000001C599F35FLL) {
    return a1 + 24;
  }
  if (((v3 & 0x80000001C599F35FLL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000001C599F35FLL)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001C599F35FLL & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 24;
  }
  return 0;
}

void std::__shared_ptr_emplace<support::log::manager_global>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20F5360;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<support::log::manager_global>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20F5360;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t std::__shared_ptr_emplace<support::log::manager_global>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void coex::XpcClient::create(uint64_t a1@<X0>, void *a2@<X8>)
{
  memset(&__p, 170, sizeof(__p));
  if (*(char *)(a1 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    if (!size) {
      goto LABEL_9;
    }
  }
  else
  {
    std::string __p = *(std::string *)a1;
    std::string::size_type v3 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v3 = __p.__r_.__value_.__l.__size_;
    }
    if (!v3) {
LABEL_9:
    }
      std::string::__assign_external(&__p, "com.apple.WirelessCoexManager", 0x1DuLL);
  }
  *a2 = 0xAAAAAAAAAAAAAAAALL;
  a2[1] = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v5 = operator new(0x80uLL);
  coex::XpcClient::XpcClient((uint64_t)v5, (long long *)&__p);
  std::shared_ptr<coex::XpcClient>::shared_ptr[abi:ne180100]<coex::XpcClient,std::shared_ptr<coex::XpcClient> ctu::SharedSynchronizable<ctu::XpcClient>::make_shared_ptr<coex::XpcClient>(coex::XpcClient*)::{lambda(coex::XpcClient*)#1},void>(a2, (uint64_t)v5);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1C58072DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  operator delete(v14);
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t coex::XpcClient::XpcClient(uint64_t a1, long long *a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  char v10 = 8;
  strcpy((char *)__p, "coex.xpc");
  ctu::XpcClient::XpcClient();
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)buf, "com.apple.telephony.abm", "coex.xpc");
  ctu::OsLogLogger::OsLogLogger();
  ctu::OsLogLogger::OsLogLogger((ctu::OsLogLogger *)(a1 + 72), (const ctu::OsLogLogger *)&v8);
  MEMORY[0x1C8790F80](&v8);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)buf);
  *(void *)a1 = &unk_1F20F53B0;
  unint64_t v4 = (_OWORD *)(a1 + 80);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 80), *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v5 = *a2;
    *(void *)(a1 + 96) = *((void *)a2 + 2);
    _OWORD *v4 = v5;
  }
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 104) = a1 + 112;
  uint64_t v6 = *(NSObject **)(a1 + 72);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    if (*(char *)(a1 + 103) < 0) {
      unint64_t v4 = *(_OWORD **)v4;
    }
    *(_DWORD *)std::string buf = 136315138;
    uint64_t v12 = v4;
    _os_log_impl(&dword_1C5767000, v6, OS_LOG_TYPE_DEFAULT, "#I Created with name %s", buf, 0xCu);
  }
  return a1;
}

void coex::XpcClient::~XpcClient(coex::XpcClient *this)
{
  *(void *)this = &unk_1F20F53B0;
  std::__tree<std::__value_type<WCMSendMessageId,dispatch::block<void({block_pointer})(xpc::object,coex::SubId)>>,std::__map_value_compare<WCMSendMessageId,std::__value_type<WCMSendMessageId,dispatch::block<void({block_pointer})(xpc::object,coex::SubId)>>,std::less<WCMSendMessageId>,true>,std::allocator<std::__value_type<WCMSendMessageId,dispatch::block<void({block_pointer})(xpc::object,coex::SubId)>>>>::destroy(*((void **)this + 14));
  if (*((char *)this + 103) < 0) {
    operator delete(*((void **)this + 10));
  }
  MEMORY[0x1C8790F80]((char *)this + 72);

  ctu::XpcClient::~XpcClient(this);
}

{
  uint64_t vars8;

  *(void *)this = &unk_1F20F53B0;
  std::__tree<std::__value_type<WCMSendMessageId,dispatch::block<void({block_pointer})(xpc::object,coex::SubId)>>,std::__map_value_compare<WCMSendMessageId,std::__value_type<WCMSendMessageId,dispatch::block<void({block_pointer})(xpc::object,coex::SubId)>>,std::less<WCMSendMessageId>,true>,std::allocator<std::__value_type<WCMSendMessageId,dispatch::block<void({block_pointer})(xpc::object,coex::SubId)>>>>::destroy(*((void **)this + 14));
  if (*((char *)this + 103) < 0) {
    operator delete(*((void **)this + 10));
  }
  MEMORY[0x1C8790F80]((char *)this + 72);

  ctu::XpcClient::~XpcClient(this);
}

{
  void *v2;
  uint64_t vars8;

  *(void *)this = &unk_1F20F53B0;
  std::__tree<std::__value_type<WCMSendMessageId,dispatch::block<void({block_pointer})(xpc::object,coex::SubId)>>,std::__map_value_compare<WCMSendMessageId,std::__value_type<WCMSendMessageId,dispatch::block<void({block_pointer})(xpc::object,coex::SubId)>>,std::less<WCMSendMessageId>,true>,std::allocator<std::__value_type<WCMSendMessageId,dispatch::block<void({block_pointer})(xpc::object,coex::SubId)>>>>::destroy(*((void **)this + 14));
  if (*((char *)this + 103) < 0) {
    operator delete(*((void **)this + 10));
  }
  MEMORY[0x1C8790F80]((char *)this + 72);
  ctu::XpcClient::~XpcClient(this);

  operator delete(v2);
}

const char *coex::XpcClient::getName(coex::XpcClient *this)
{
  return "coex.xpc";
}

void coex::XpcClient::start(coex::XpcClient *this)
{
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 0x40000000;
  v3[2] = ___ZN4coex9XpcClient5startEv_block_invoke;
  v3[3] = &__block_descriptor_tmp_4;
  v3[4] = this;
  unint64_t v4 = v3;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableINS_9XpcClientEE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  block[3] = &__block_descriptor_tmp_14_0;
  block[4] = (char *)this + 8;
  block[5] = &v4;
  uint64_t v2 = (char *)this + 24;
  uint64_t v1 = *((void *)this + 3);
  if (*((void *)v2 + 1)) {
    dispatch_async_and_wait(v1, block);
  }
  else {
    dispatch_sync(v1, block);
  }
}

void ___ZN4coex9XpcClient5startEv_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = (const char **)(v1 + 80);
  if (*(char *)(v1 + 103) < 0)
  {
    xpc_connection_t mach_service = xpc_connection_create_mach_service(*v2, *(dispatch_queue_t *)(v1 + 24), 2uLL);
    if (mach_service) {
      goto LABEL_3;
    }
  }
  else
  {
    xpc_connection_t mach_service = xpc_connection_create_mach_service((const char *)v2, *(dispatch_queue_t *)(v1 + 24), 2uLL);
    if (mach_service)
    {
LABEL_3:
      xpc_object_t v4 = mach_service;
      xpc_object_t object = mach_service;
      goto LABEL_6;
    }
  }
  xpc_object_t v4 = xpc_null_create();
  xpc_object_t object = v4;
  if (!v4)
  {
    xpc_object_t v4 = 0;
    xpc_object_t object = xpc_null_create();
    goto LABEL_7;
  }
LABEL_6:
  xpc_retain(v4);
LABEL_7:
  ctu::XpcClient::setServer_sync();
  xpc_release(object);
  coex::XpcClient::register_sync((coex::XpcClient *)v1);
  xpc_release(v4);
}

void sub_1C58077E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  xpc_release(object);
  xpc_release(v10);
  _Unwind_Resume(a1);
}

void coex::XpcClient::register_sync(coex::XpcClient *this)
{
  uint64_t v2 = *((void *)this + 9);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl(&dword_1C5767000, v2, OS_LOG_TYPE_DEFAULT, "#I Registering", buf, 2u);
  }
  xpc_object_t v3 = xpc_dictionary_create(0, 0, 0);
  if (v3 || (xpc_object_t v3 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C8792D30](v3) == MEMORY[0x1E4F14590])
    {
      xpc_retain(v3);
      xpc_object_t v4 = v3;
    }
    else
    {
      xpc_object_t v4 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v4 = xpc_null_create();
    xpc_object_t v3 = 0;
  }
  xpc_release(v3);
  xpc_object_t v5 = xpc_int64_create(3);
  if (!v5) {
    xpc_object_t v5 = xpc_null_create();
  }
  xpc_dictionary_set_value(v4, "kWCMRegisterProcess_ProcessId", v5);
  xpc_object_t v6 = xpc_null_create();
  xpc_release(v5);
  xpc_release(v6);
  uint64_t v8 = v4;
  if (v4)
  {
    xpc_retain(v4);
    xpc_object_t v7 = v8;
  }
  else
  {
    xpc_object_t v7 = xpc_null_create();
    uint64_t v8 = v7;
  }
  coex::XpcClient::sendMessage((uint64_t)this, 1, &v8, 0);
  xpc_release(v7);
  uint64_t v8 = 0;
  xpc_release(v4);
}

void coex::XpcClient::registerCommandHandler(uint64_t a1, int a2, void **a3)
{
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 1174405120;
  v5[2] = ___ZN4coex9XpcClient22registerCommandHandlerE16WCMSendMessageIdN8dispatch5blockIU13block_pointerFvN3xpc6objectENS_5SubIdEEEE_block_invoke;
  v5[3] = &__block_descriptor_tmp_5_9;
  v5[4] = a1;
  int v7 = a2;
  xpc_object_t v4 = *a3;
  if (*a3) {
    xpc_object_t v4 = _Block_copy(v4);
  }
  aBlocunint64_t k = v4;
  ctu::SharedSynchronizable<ctu::XpcClient>::execute_wrapped((uint64_t *)(a1 + 8), (uint64_t)v5);
  if (aBlock) {
    _Block_release(aBlock);
  }
}

void ___ZN4coex9XpcClient22registerCommandHandlerE16WCMSendMessageIdN8dispatch5blockIU13block_pointerFvN3xpc6objectENS_5SubIdEEEE_block_invoke(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v2 = *(const void **)(a1 + 40);
  if (v2)
  {
    xpc_object_t v4 = _Block_copy(v2);
    xpc_object_t v6 = (void *)(v3 + 112);
    uint64_t v5 = *(void *)(v3 + 112);
    int v7 = *(_DWORD *)(a1 + 48);
    if (v5) {
      goto LABEL_7;
    }
    goto LABEL_5;
  }
  xpc_object_t v4 = 0;
  xpc_object_t v6 = (void *)(v3 + 112);
  uint64_t v5 = *(void *)(v3 + 112);
  int v7 = *(_DWORD *)(a1 + 48);
  if (!v5)
  {
LABEL_5:
    uint64_t v8 = v6;
LABEL_11:
    char v10 = operator new(0x30uLL);
    v10[8] = v7;
    *((void *)v10 + 5) = 0;
    *(void *)char v10 = 0;
    *((void *)v10 + 1) = 0;
    *((void *)v10 + 2) = v8;
    void *v6 = v10;
    uint64_t v11 = **(void **)(v3 + 104);
    uint64_t v12 = (uint64_t *)v10;
    if (v11)
    {
      *(void *)(v3 + 104) = v11;
      uint64_t v12 = (uint64_t *)*v6;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v3 + 112), v12);
    ++*(void *)(v3 + 120);
    uint64_t v13 = (const void *)*((void *)v10 + 5);
    *((void *)v10 + 5) = v4;
    if (!v13) {
      return;
    }
LABEL_16:
    _Block_release(v13);
    return;
  }
  while (1)
  {
LABEL_7:
    while (1)
    {
      uint64_t v8 = (void *)v5;
      int v9 = *(_DWORD *)(v5 + 32);
      if (v7 >= v9) {
        break;
      }
      uint64_t v5 = *v8;
      xpc_object_t v6 = v8;
      if (!*v8) {
        goto LABEL_11;
      }
    }
    if (v9 >= v7) {
      break;
    }
    uint64_t v5 = v8[1];
    if (!v5)
    {
      xpc_object_t v6 = v8 + 1;
      goto LABEL_11;
    }
  }
  uint64_t v13 = (const void *)v8[5];
  v8[5] = v4;
  if (v13) {
    goto LABEL_16;
  }
}

void sub_1C5807B6C(_Unwind_Exception *exception_object)
{
  if (v1) {
    _Block_release(v1);
  }
  _Unwind_Resume(exception_object);
}

void *__copy_helper_block_e8_40c68_ZTSN8dispatch5blockIU13block_pointerFvN3xpc6objectEN4coex5SubIdEEEE(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void **)(a2 + 40);
  if (result) {
    uint64_t result = _Block_copy(result);
  }
  *(void *)(a1 + 40) = result;
  return result;
}

void __destroy_helper_block_e8_40c68_ZTSN8dispatch5blockIU13block_pointerFvN3xpc6objectEN4coex5SubIdEEEE(uint64_t a1)
{
  uint64_t v1 = *(const void **)(a1 + 40);
  if (v1) {
    _Block_release(v1);
  }
}

void coex::XpcClient::handleServerError_sync(coex::XpcClient *a1, xpc::object *a2)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  xpc_object_t v4 = *((void *)a1 + 9);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    xpc::object::to_string((uint64_t *)__p, a2);
    uint64_t v5 = v7 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)std::string buf = 136315138;
    int v9 = v5;
    _os_log_error_impl(&dword_1C5767000, v4, OS_LOG_TYPE_ERROR, "Server Error: %s", buf, 0xCu);
    if (v7 < 0) {
      operator delete(__p[0]);
    }
  }
  if (*(void *)a2 == MEMORY[0x1E4F14520]) {
    coex::XpcClient::register_sync(a1);
  }
}

void *std::shared_ptr<coex::XpcClient>::shared_ptr[abi:ne180100]<coex::XpcClient,std::shared_ptr<coex::XpcClient> ctu::SharedSynchronizable<ctu::XpcClient>::make_shared_ptr<coex::XpcClient>(coex::XpcClient*)::{lambda(coex::XpcClient*)#1},void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  xpc_object_t v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = &v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20F5488;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)a2;
  a1[1] = v4;
  if (!a2) {
    return a1;
  }
  xpc_object_t v6 = *(std::__shared_weak_count **)(a2 + 16);
  if (v6)
  {
    if (v6->__shared_owners_ == -1)
    {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      *(void *)(a2 + 8) = a2;
      *(void *)(a2 + 16) = v4;
      std::__shared_weak_count::__release_weak(v6);
      if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
        goto LABEL_8;
      }
    }
    return a1;
  }
  atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  *(void *)(a2 + 8) = a2;
  *(void *)(a2 + 16) = v4;
  if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
LABEL_8:
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void sub_1C5807DF4(void *a1)
{
  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[3], v1, (dispatch_function_t)std::shared_ptr<coex::XpcClient> ctu::SharedSynchronizable<ctu::XpcClient>::make_shared_ptr<coex::XpcClient>(coex::XpcClient*)::{lambda(coex::XpcClient*)#1}::operator() const(coex::XpcClient*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_1C5807E1C(_Unwind_Exception *a1)
{
}

void std::__shared_ptr_pointer<coex::XpcClient *,std::shared_ptr<coex::XpcClient> ctu::SharedSynchronizable<ctu::XpcClient>::make_shared_ptr<coex::XpcClient>(coex::XpcClient*)::{lambda(coex::XpcClient *)#1},std::allocator<coex::XpcClient>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<coex::XpcClient *,std::shared_ptr<coex::XpcClient> ctu::SharedSynchronizable<ctu::XpcClient>::make_shared_ptr<coex::XpcClient>(coex::XpcClient*)::{lambda(coex::XpcClient *)#1},std::allocator<coex::XpcClient>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<coex::XpcClient *,std::shared_ptr<coex::XpcClient> ctu::SharedSynchronizable<ctu::XpcClient>::make_shared_ptr<coex::XpcClient>(coex::XpcClient*)::{lambda(coex::XpcClient *)#1},std::allocator<coex::XpcClient>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableINS_9XpcClientEE15make_shared_ptrIN4coex9XpcClientEEENSt3__110shared_pt"
                     "rIT_EEPS8_EUlPS5_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableINS_9XpcClientEE15make_shared_ptrIN4coex9XpcClientEEENSt3__1"
                                "10shared_ptrIT_EEPS8_EUlPS5_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableINS_9XpcClientEE15make_shared_ptrIN4coex9XpcClientEEENSt3__110shared_ptrIT_EEPS8_EUlPS5_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableINS_9XpcClientEE15make_shared_ptrIN4coex9XpcClientEEENSt3__110shared_ptrIT_EEPS8_EUlPS5_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24; {
  return 0;
  }
}

uint64_t std::shared_ptr<coex::XpcClient> ctu::SharedSynchronizable<ctu::XpcClient>::make_shared_ptr<coex::XpcClient>(coex::XpcClient*)::{lambda(coex::XpcClient*)#1}::operator() const(coex::XpcClient*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 24))();
  }
  return result;
}

void std::__tree<std::__value_type<WCMSendMessageId,dispatch::block<void({block_pointer})(xpc::object,coex::SubId)>>,std::__map_value_compare<WCMSendMessageId,std::__value_type<WCMSendMessageId,dispatch::block<void({block_pointer})(xpc::object,coex::SubId)>>,std::less<WCMSendMessageId>,true>,std::allocator<std::__value_type<WCMSendMessageId,dispatch::block<void({block_pointer})(xpc::object,coex::SubId)>>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<WCMSendMessageId,dispatch::block<void({block_pointer})(xpc::object,coex::SubId)>>,std::__map_value_compare<WCMSendMessageId,std::__value_type<WCMSendMessageId,dispatch::block<void({block_pointer})(xpc::object,coex::SubId)>>,std::less<WCMSendMessageId>,true>,std::allocator<std::__value_type<WCMSendMessageId,dispatch::block<void({block_pointer})(xpc::object,coex::SubId)>>>>::destroy(*a1);
    std::__tree<std::__value_type<WCMSendMessageId,dispatch::block<void({block_pointer})(xpc::object,coex::SubId)>>,std::__map_value_compare<WCMSendMessageId,std::__value_type<WCMSendMessageId,dispatch::block<void({block_pointer})(xpc::object,coex::SubId)>>,std::less<WCMSendMessageId>,true>,std::allocator<std::__value_type<WCMSendMessageId,dispatch::block<void({block_pointer})(xpc::object,coex::SubId)>>>>::destroy(a1[1]);
    uint64_t v2 = (const void *)a1[5];
    if (v2) {
      _Block_release(v2);
    }
    operator delete(a1);
  }
}

void *___ZNK3ctu20SharedSynchronizableINS_9XpcClientEE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke(uint64_t a1)
{
  return (*(void *(**)(void *__return_ptr))(**(void **)(a1 + 40) + 16))(*(void **)(a1 + 40));
}

void BudgetData::BudgetData(BudgetData *this)
{
  *((void *)this + 2) = 0;
  *((void *)this + 1) = 0;
  *(void *)this = (char *)this + 8;
}

{
  *((void *)this + 2) = 0;
  *((void *)this + 1) = 0;
  *(void *)this = (char *)this + 8;
}

void BudgetData::~BudgetData(BudgetData *this)
{
  uint64_t v2 = (void *)((char *)this + 8);
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)this, *((void **)this + 1));
  *(void *)this = v2;
  *((void *)this + 2) = 0;
  *uint64_t v2 = 0;
}

{
  void *v2;

  uint64_t v2 = (void *)((char *)this + 8);
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)this, *((void **)this + 1));
  *(void *)this = v2;
  *((void *)this + 2) = 0;
  *uint64_t v2 = 0;
}

void BudgetData::BudgetData(BudgetData *this, const BudgetData *a2)
{
  *((void *)this + 2) = 0;
  *((void *)this + 1) = 0;
  *(void *)this = (char *)this + 8;
  if (this != a2) {
    std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__tree_node<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,void *> *,long>>((uint64_t)this, *(void **)a2, (void *)a2 + 1);
  }
}

{
  *((void *)this + 2) = 0;
  *((void *)this + 1) = 0;
  *(void *)this = (char *)this + 8;
  if (this != a2) {
    std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__tree_node<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,void *> *,long>>((uint64_t)this, *(void **)a2, (void *)a2 + 1);
  }
}

void sub_1C580807C(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_1C58080E0(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

void *BudgetData::BudgetData(void *result, uint64_t a2)
{
  result[2] = 0;
  result[1] = 0;
  void *result = result + 1;
  void *result = *(void *)a2;
  *(void *)a2 = result + 1;
  uint64_t v2 = result[1];
  *(_OWORD *)(result + 1) = *(_OWORD *)(a2 + 8);
  *(void *)(a2 + 8) = v2;
  *(void *)(a2 + 16) = 0;
  if (result[2]) {
    unint64_t v3 = (void *)(result[1] + 16);
  }
  else {
    unint64_t v3 = result;
  }
  void *v3 = result + 1;
  *(void *)a2 = a2 + 8;
  return result;
}

{
  uint64_t v2;
  void *v3;

  result[2] = 0;
  result[1] = 0;
  void *result = result + 1;
  void *result = *(void *)a2;
  *(void *)a2 = result + 1;
  uint64_t v2 = result[1];
  *(_OWORD *)(result + 1) = *(_OWORD *)(a2 + 8);
  *(void *)(a2 + 8) = v2;
  *(void *)(a2 + 16) = 0;
  if (result[2]) {
    unint64_t v3 = (void *)(result[1] + 16);
  }
  else {
    unint64_t v3 = result;
  }
  void *v3 = result + 1;
  *(void *)a2 = a2 + 8;
  return result;
}

uint64_t BudgetData::operator=(uint64_t a1, uint64_t a2)
{
  if (a2 != a1) {
    std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__tree_node<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,void *> *,long>>(a1, *(void **)a2, (void *)(a2 + 8));
  }
  return a1;
}

uint64_t BudgetData::get(uint64_t **a1, unsigned int a2)
{
  char v2 = a2;
  uint64_t v5 = a1 + 1;
  xpc_object_t v4 = (unsigned __int8 *)a1[1];
  if (v4)
  {
    while (1)
    {
      while (1)
      {
        xpc_object_t v6 = v4;
        unsigned int v7 = v4[28];
        if (v7 <= a2) {
          break;
        }
        xpc_object_t v4 = (unsigned __int8 *)*v6;
        uint64_t v5 = (uint64_t **)v6;
        if (!*v6) {
          goto LABEL_8;
        }
      }
      if (v7 >= a2) {
        break;
      }
      xpc_object_t v4 = (unsigned __int8 *)v6[1];
      if (!v4)
      {
        uint64_t v5 = (uint64_t **)(v6 + 1);
        goto LABEL_8;
      }
    }
  }
  else
  {
    xpc_object_t v6 = a1 + 1;
LABEL_8:
    uint64_t v8 = v6;
    xpc_object_t v6 = operator new(0x28uLL);
    *((unsigned char *)v6 + 28) = v2;
    *((unsigned char *)v6 + 32) = 0;
    *((unsigned char *)v6 + 36) = 0;
    void *v6 = 0;
    v6[1] = 0;
    v6[2] = v8;
    void *v5 = v6;
    int v9 = (uint64_t *)**a1;
    uint64_t v10 = v6;
    if (v9)
    {
      *a1 = v9;
      uint64_t v10 = *v5;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v10);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v6[4];
}

uint64_t *BudgetData::set(uint64_t *result, unsigned int a2, int a3)
{
  char v4 = a2;
  uint64_t v5 = result;
  unsigned int v7 = (uint64_t **)(result + 1);
  xpc_object_t v6 = (unsigned __int8 *)result[1];
  if (v6)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v8 = v6;
        unsigned int v9 = v6[28];
        if (v9 <= a2) {
          break;
        }
        xpc_object_t v6 = (unsigned __int8 *)*v8;
        unsigned int v7 = (uint64_t **)v8;
        if (!*v8) {
          goto LABEL_8;
        }
      }
      if (v9 >= a2) {
        break;
      }
      xpc_object_t v6 = (unsigned __int8 *)v8[1];
      if (!v6)
      {
        unsigned int v7 = (uint64_t **)(v8 + 1);
        goto LABEL_8;
      }
    }
  }
  else
  {
    uint64_t v8 = result + 1;
LABEL_8:
    uint64_t v10 = v8;
    uint64_t v8 = operator new(0x28uLL);
    *((unsigned char *)v8 + 28) = v4;
    *((unsigned char *)v8 + 32) = 0;
    *((unsigned char *)v8 + 36) = 0;
    void *v8 = 0;
    v8[1] = 0;
    v8[2] = v10;
    void *v7 = v8;
    uint64_t v11 = *(void *)*v5;
    uint64_t v12 = v8;
    if (v11)
    {
      uint64_t *v5 = v11;
      uint64_t v12 = *v7;
    }
    uint64_t result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v5[1], v12);
    ++v5[2];
  }
  *((_DWORD *)v8 + 8) = a3;
  *((unsigned char *)v8 + 36) = 1;
  return result;
}

void BudgetData::clear(BudgetData *this)
{
  char v2 = (void *)((char *)this + 8);
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)this, *((void **)this + 1));
  *(void *)this = v2;
  *((void *)this + 2) = 0;
  *char v2 = 0;
}

void *BudgetData::for_each(void *result, uint64_t a2)
{
  char v2 = result + 1;
  unint64_t v3 = (void *)*result;
  if ((void *)*result != result + 1)
  {
    do
    {
      uint64_t v5 = *(void *)(a2 + 24);
      if (!v5) {
        std::__throw_bad_function_call[abi:ne180100]();
      }
      uint64_t result = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void *))(*(void *)v5 + 48))(v5, (uint64_t)v3 + 28, v3 + 4);
      if (!result) {
        break;
      }
      xpc_object_t v6 = (void *)v3[1];
      if (v6)
      {
        do
        {
          unsigned int v7 = v6;
          xpc_object_t v6 = (void *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          unsigned int v7 = (void *)v3[2];
          BOOL v8 = *v7 == (void)v3;
          unint64_t v3 = v7;
        }
        while (!v8);
      }
      unint64_t v3 = v7;
    }
    while (v7 != v2);
  }
  return result;
}

void std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__tree_node<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,void *> *,long>>(uint64_t a1, void *a2, void *a3)
{
  char v4 = a2;
  if (*(void *)(a1 + 16))
  {
    xpc_object_t v6 = *(uint64_t **)a1;
    BOOL v8 = (uint64_t **)(a1 + 8);
    uint64_t v7 = *(void *)(a1 + 8);
    *(void *)a1 = a1 + 8;
    *(void *)(v7 + 16) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)(a1 + 8) = 0;
    unsigned int v9 = v6[1] ? (uint64_t *)v6[1] : v6;
    if (v9)
    {
      uint64_t v10 = (uint64_t *)v9[2];
      if (v10)
      {
        uint64_t v11 = (uint64_t *)*v10;
        if ((uint64_t *)*v10 == v9)
        {
          *uint64_t v10 = 0;
          while (1)
          {
            unint64_t v35 = (uint64_t *)v10[1];
            if (!v35) {
              break;
            }
            do
            {
              uint64_t v10 = v35;
              unint64_t v35 = (uint64_t *)*v35;
            }
            while (v35);
          }
        }
        else
        {
          for (v10[1] = 0; v11; uint64_t v11 = (uint64_t *)v10[1])
          {
            do
            {
              uint64_t v10 = v11;
              uint64_t v11 = (uint64_t *)*v11;
            }
            while (v11);
          }
        }
      }
      if (a2 != a3)
      {
        uint64_t v12 = v9;
        uint64_t v13 = v4;
        while (1)
        {
          unsigned int v9 = v10;
          unsigned int v14 = *((unsigned __int8 *)v13 + 28);
          *((unsigned char *)v12 + 28) = v14;
          int v15 = *((_DWORD *)v13 + 8);
          *((unsigned char *)v12 + 36) = *((unsigned char *)v13 + 36);
          *((_DWORD *)v12 + 8) = v15;
          uint64_t v16 = *v8;
          unint64_t v17 = (uint64_t **)(a1 + 8);
          uint64_t v18 = (uint64_t **)(a1 + 8);
          if (*v8) {
            break;
          }
LABEL_14:
          *uint64_t v12 = 0;
          v12[1] = 0;
          void v12[2] = (uint64_t)v17;
          const char *v18 = v12;
          uint64_t v19 = **(void **)a1;
          if (v19) {
            goto LABEL_15;
          }
LABEL_16:
          std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 8), v12);
          ++*(void *)(a1 + 16);
          if (v10)
          {
            uint64_t v10 = (uint64_t *)v10[2];
            if (v10)
            {
              unint64_t v22 = (uint64_t *)*v10;
              if ((uint64_t *)*v10 == v9)
              {
                *uint64_t v10 = 0;
                while (1)
                {
                  uint64_t v23 = (uint64_t *)v10[1];
                  if (!v23) {
                    break;
                  }
                  do
                  {
                    uint64_t v10 = v23;
                    uint64_t v23 = (uint64_t *)*v23;
                  }
                  while (v23);
                }
              }
              else
              {
                for (v10[1] = 0; v22; unint64_t v22 = (uint64_t *)v10[1])
                {
                  do
                  {
                    uint64_t v10 = v22;
                    unint64_t v22 = (uint64_t *)*v22;
                  }
                  while (v22);
                }
              }
            }
          }
          else
          {
            uint64_t v10 = 0;
          }
          uint64_t v20 = (void *)v13[1];
          if (v20)
          {
            do
            {
              char v4 = v20;
              uint64_t v20 = (void *)*v20;
            }
            while (v20);
          }
          else
          {
            do
            {
              char v4 = (void *)v13[2];
              BOOL v21 = *v4 == (void)v13;
              uint64_t v13 = v4;
            }
            while (!v21);
          }
          if (v9)
          {
            uint64_t v12 = v9;
            uint64_t v13 = v4;
            if (v4 != a3) {
              continue;
            }
          }
          goto LABEL_42;
        }
        do
        {
          while (1)
          {
            unint64_t v17 = (uint64_t **)v16;
            if (v14 >= *((unsigned __int8 *)v16 + 28)) {
              break;
            }
            uint64_t v16 = (uint64_t *)*v16;
            uint64_t v18 = v17;
            if (!*v17) {
              goto LABEL_14;
            }
          }
          uint64_t v16 = (uint64_t *)v16[1];
        }
        while (v16);
        uint64_t v18 = v17 + 1;
        *uint64_t v12 = 0;
        v12[1] = 0;
        void v12[2] = (uint64_t)v17;
        v17[1] = v12;
        uint64_t v19 = **(void **)a1;
        if (!v19) {
          goto LABEL_16;
        }
LABEL_15:
        *(void *)a1 = v19;
        uint64_t v12 = *v18;
        goto LABEL_16;
      }
LABEL_42:
      std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy(a1, v9);
      if (v10)
      {
        for (unint64_t i = (uint64_t *)v10[2]; i; unint64_t i = (uint64_t *)i[2])
          uint64_t v10 = i;
        std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy(a1, v10);
      }
    }
  }
  if (v4 != a3)
  {
    uint64_t v25 = (uint64_t ***)(a1 + 8);
    while (1)
    {
      uint64_t v26 = (uint64_t *)operator new(0x28uLL);
      uint64_t v27 = v26;
      int v28 = *((_DWORD *)v4 + 9);
      *(uint64_t *)((char *)v26 + 28) = *(void *)((char *)v4 + 28);
      *((_DWORD *)v26 + 9) = v28;
      uint64_t v29 = *v25;
      unint64_t v30 = (uint64_t **)(a1 + 8);
      unint64_t v31 = (uint64_t **)(a1 + 8);
      if (*v25) {
        break;
      }
LABEL_54:
      *uint64_t v26 = 0;
      v26[1] = 0;
      v26[2] = (uint64_t)v30;
      *unint64_t v31 = v26;
      uint64_t v32 = **(void **)a1;
      if (v32) {
        goto LABEL_55;
      }
LABEL_56:
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 8), v27);
      ++*(void *)(a1 + 16);
      unint64_t v33 = (void *)v4[1];
      if (v33)
      {
        do
        {
          uint64_t v34 = v33;
          unint64_t v33 = (void *)*v33;
        }
        while (v33);
      }
      else
      {
        do
        {
          uint64_t v34 = (void *)v4[2];
          BOOL v21 = *v34 == (void)v4;
          char v4 = v34;
        }
        while (!v21);
      }
      char v4 = v34;
      if (v34 == a3) {
        return;
      }
    }
    do
    {
      while (1)
      {
        unint64_t v30 = v29;
        if (*((unsigned __int8 *)v26 + 28) >= *((unsigned __int8 *)v29 + 28)) {
          break;
        }
        uint64_t v29 = (uint64_t **)*v29;
        unint64_t v31 = v30;
        if (!*v30) {
          goto LABEL_54;
        }
      }
      uint64_t v29 = (uint64_t **)v29[1];
    }
    while (v29);
    unint64_t v31 = v30 + 1;
    *uint64_t v26 = 0;
    v26[1] = 0;
    v26[2] = (uint64_t)v30;
    v30[1] = v26;
    uint64_t v32 = **(void **)a1;
    if (!v32) {
      goto LABEL_56;
    }
LABEL_55:
    *(void *)a1 = v32;
    uint64_t v27 = *v31;
    goto LABEL_56;
  }
}

void std::__throw_bad_function_call[abi:ne180100]()
{
  exception = __cxa_allocate_exception(8uLL);
}

void std::bad_function_call::~bad_function_call(std::bad_function_call *this)
{
  std::exception::~exception(this);

  operator delete(v1);
}

void sub_1C5808AE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
  {
    operator delete(__p);
    if ((a15 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a15 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a10);
  _Unwind_Resume(exception_object);
}

void sub_1C5808CE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if ((a21 & 0x80000000) == 0) {
    _Unwind_Resume(exception_object);
  }
  operator delete(a16);
  _Unwind_Resume(exception_object);
}

void sub_1C5808D18(void *a1)
{
}

void sub_1C5808D24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if ((a14 & 0x80000000) == 0) {
    JUMPOUT(0x1C5808CF8);
  }
  JUMPOUT(0x1C5808CF0);
}

void sub_1C58094C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,std::locale a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *a57)
{
  if (a44 < 0) {
    operator delete(__p);
  }
  std::vector<std::string>::~vector[abi:ne180100](&a57);
  std::vector<std::string>::~vector[abi:ne180100](v57);
  _Unwind_Resume(a1);
}

void sub_1C580973C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a18 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a24 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a19);
  _Unwind_Resume(exception_object);
}

void sub_1C580998C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
  {
    operator delete(__p);
    if ((a15 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a15 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a10);
  _Unwind_Resume(exception_object);
}

void sub_1C5809FC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  std::list<std::string>::~list(va);
  _Unwind_Resume(a1);
}

void sub_1C5809FD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t *a15, uint64_t a16)
{
  operator delete(v17);
  if (a16)
  {
    uint64_t v19 = a14;
    uint64_t v20 = (uint64_t)a15;
    uint64_t v21 = *a15;
    *(void *)(v21 + 8) = *(void *)(a14 + 8);
    **(void **)(v19 + 8) = v21;
    a16 = 0;
    if ((uint64_t *)v20 != &a14)
    {
      do
      {
        unint64_t v22 = *(uint64_t **)(v20 + 8);
        if (*(char *)(v20 + 39) < 0) {
          operator delete(*(void **)(v20 + 16));
        }
        operator delete((void *)v20);
        uint64_t v20 = (uint64_t)v22;
      }
      while (v22 != &a14);
    }
  }
  operator delete(v16);
  _Unwind_Resume(a1);
}

void sub_1C580A498(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26)
{
  if (a20 < 0)
  {
    operator delete(__p);
    if ((a14 & 0x80000000) == 0)
    {
LABEL_3:
      support::ui::NotificationInfo::~NotificationInfo(&a26);
      _Unwind_Resume(a1);
    }
  }
  else if ((a14 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a9);
  support::ui::NotificationInfo::~NotificationInfo(&a26);
  _Unwind_Resume(a1);
}

void sub_1C580A4F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  support::ui::NotificationInfo::~NotificationInfo((void **)va);
  _Unwind_Resume(a1);
}

void sub_1C580A508(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
}

void sub_1C580A524(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va1, a10);
  va_start(va, a10);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  support::ui::NotificationInfo::~NotificationInfo((void **)va1);
  _Unwind_Resume(a1);
}

void sub_1C580A540(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  support::ui::NotificationInfo::~NotificationInfo((void **)va);
  _Unwind_Resume(a1);
}

void sub_1C580A554(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  support::ui::NotificationInfo::~NotificationInfo((void **)va);
  _Unwind_Resume(a1);
}

void sub_1C580A720(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a31 < 0)
  {
    operator delete(__p);
    if ((a25 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a19 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else if ((a25 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a20);
  if ((a19 & 0x80000000) == 0) {
LABEL_4:
  }
    _Unwind_Resume(exception_object);
LABEL_7:
  operator delete(a14);
  _Unwind_Resume(exception_object);
}

void sub_1C580B01C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, xpc_object_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,xpc_object_t object,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,xpc_object_t a27,xpc_object_t a28,char a29,uint64_t a30,char a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void sub_1C580B270(_Unwind_Exception *a1)
{
  xpc_release(v1);
  _Unwind_Resume(a1);
}

xpc_object_t __copy_helper_block_e8_32c16_ZTSN3xpc5arrayE(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void **)(a2 + 32);
  *(void *)(a1 + 32) = v3;
  if (v3) {
    return xpc_retain(v3);
  }
  xpc_object_t result = xpc_null_create();
  *(void *)(a1 + 32) = result;
  return result;
}

void __destroy_helper_block_e8_32c16_ZTSN3xpc5arrayE(uint64_t a1)
{
  *(void *)(a1 + 32) = 0;
}

void __copy_helper_block_e8_40c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE64c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE88c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE112c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 40), *(const std::string::value_type **)(a2 + 40), *(void *)(a2 + 48));
    uint64_t v5 = (std::string *)(a1 + 64);
    if ((*(char *)(a2 + 87) & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else
  {
    long long v4 = *(_OWORD *)(a2 + 40);
    *(void *)(a1 + 56) = *(void *)(a2 + 56);
    *(_OWORD *)(a1 + 40) = v4;
    uint64_t v5 = (std::string *)(a1 + 64);
    if ((*(char *)(a2 + 87) & 0x80000000) == 0)
    {
LABEL_3:
      long long v6 = *(_OWORD *)(a2 + 64);
      v5->__r_.__value_.__r.__words[2] = *(void *)(a2 + 80);
      *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
      goto LABEL_6;
    }
  }
  std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(a2 + 64), *(void *)(a2 + 72));
LABEL_6:
  if (*(char *)(a2 + 111) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 88), *(const std::string::value_type **)(a2 + 88), *(void *)(a2 + 96));
  }
  else
  {
    long long v7 = *(_OWORD *)(a2 + 88);
    *(void *)(a1 + 104) = *(void *)(a2 + 104);
    *(_OWORD *)(a1 + 88) = v7;
  }
  BOOL v8 = (std::string *)(a1 + 112);
  if (*(char *)(a2 + 135) < 0)
  {
    std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)(a2 + 112), *(void *)(a2 + 120));
  }
  else
  {
    long long v9 = *(_OWORD *)(a2 + 112);
    *(void *)(a1 + 128) = *(void *)(a2 + 128);
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v9;
  }
}

void sub_1C580B40C(_Unwind_Exception *exception_object)
{
  if (v2[111] < 0)
  {
    operator delete(*v4);
    if ((v2[87] & 0x80000000) == 0)
    {
LABEL_3:
      if ((v2[63] & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else if ((v2[87] & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*v3);
  if ((v2[63] & 0x80000000) == 0) {
LABEL_4:
  }
    _Unwind_Resume(exception_object);
LABEL_7:
  operator delete(*v1);
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_40c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE64c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE88c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE112c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1)
{
  if (*(char *)(a1 + 135) < 0)
  {
    operator delete(*(void **)(a1 + 112));
    if ((*(char *)(a1 + 111) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(a1 + 87) & 0x80000000) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      operator delete(*(void **)(a1 + 64));
      if ((*(char *)(a1 + 63) & 0x80000000) == 0) {
        return;
      }
      goto LABEL_9;
    }
  }
  else if ((*(char *)(a1 + 111) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 88));
  if (*(char *)(a1 + 87) < 0) {
    goto LABEL_8;
  }
LABEL_4:
  if ((*(char *)(a1 + 63) & 0x80000000) == 0) {
    return;
  }
LABEL_9:
  char v2 = *(void **)(a1 + 40);

  operator delete(v2);
}

uint64_t TapToRadar::getMode(TapToRadar *this)
{
  uint64_t v1 = +[ABMTapToRadar sharedInstance];

  return [(ABMTapToRadar *)v1 getMode];
}

uint64_t TapToRadar::setMode(uint64_t a1)
{
  char v2 = +[ABMTapToRadar sharedInstance];

  return [(ABMTapToRadar *)v2 setMode:a1];
}

void TapToRadar::createRadarIfPossible(xpc_object_t *a1, uint64_t a2)
{
  uint64_t v58 = *MEMORY[0x1E4F143B8];
  if (((TelephonyUtilIsInternalBuild() & 1) != 0 || TelephonyUtilIsCarrierBuild())
    && [+[ABMTapToRadar sharedInstance] getMode])
  {
    unsigned int v50 = -1431655766;
    xpc_object_t value = xpc_dictionary_get_value(*a1, (const char *)*MEMORY[0x1E4F4C180]);
    *(void *)std::string buf = value;
    if (value) {
      xpc_retain(value);
    }
    else {
      *(void *)std::string buf = xpc_null_create();
    }
    unsigned int v5 = xpc::dyn_cast_or_default((xpc *)buf, (const object *)7);
    xpc_release(*(xpc_object_t *)buf);
    unsigned int v50 = v5;
    memset(v49, 170, sizeof(v49));
    xpc_object_t v6 = xpc_dictionary_get_value(*a1, (const char *)*MEMORY[0x1E4F4C4C8]);
    *(void *)std::string buf = v6;
    if (v6) {
      xpc_retain(v6);
    }
    else {
      *(void *)std::string buf = xpc_null_create();
    }
    xpc::dyn_cast_or_default(v49, (xpc *)buf, (const object *)"", v7);
    xpc_release(*(xpc_object_t *)buf);
    memset(&v48, 170, sizeof(v48));
    xpc_object_t v8 = xpc_dictionary_get_value(*a1, (const char *)*MEMORY[0x1E4F4CA98]);
    *(void *)std::string buf = v8;
    if (v8) {
      xpc_retain(v8);
    }
    else {
      *(void *)std::string buf = xpc_null_create();
    }
    xpc::dyn_cast_or_default((uint64_t *)&v48, (xpc *)buf, (const object *)"", v9);
    xpc_release(*(xpc_object_t *)buf);
    memset(__p, 170, sizeof(__p));
    xpc_object_t v10 = xpc_dictionary_get_value(*a1, (const char *)*MEMORY[0x1E4F4C8D8]);
    *(void *)std::string buf = v10;
    if (v10) {
      xpc_retain(v10);
    }
    else {
      *(void *)std::string buf = xpc_null_create();
    }
    xpc::dyn_cast_or_default((uint64_t *)__p, (xpc *)buf, (const object *)"", v11);
    xpc_release(*(xpc_object_t *)buf);
    memset(&v46, 170, sizeof(v46));
    char v12 = HIBYTE(__p[2]);
    if (SHIBYTE(__p[2]) >= 0) {
      uint64_t v13 = (void *)HIBYTE(__p[2]);
    }
    else {
      uint64_t v13 = __p[1];
    }
    unsigned int v14 = (std::string *)__p;
    if (!v13)
    {
      unsigned int v14 = &v48;
      char v12 = HIBYTE(v48.__r_.__value_.__r.__words[2]);
    }
    if (v12 < 0)
    {
      if (v13) {
        std::string::size_type size = __p[1];
      }
      else {
        std::string::size_type size = (void *)v48.__r_.__value_.__l.__size_;
      }
      std::string::__init_copy_ctor_external(&v46, v14->__r_.__value_.__l.__data_, (std::string::size_type)size);
    }
    else
    {
      std::string v46 = *v14;
    }
    uint64_t v16 = (const void *)*MEMORY[0x1E4F4F918];
    size_t v17 = strlen((const char *)*MEMORY[0x1E4F4F918]);
    int v18 = SHIBYTE(v49[2]);
    if (v49[2] >= 0) {
      size_t v19 = HIBYTE(v49[2]);
    }
    else {
      size_t v19 = v49[1];
    }
    std::string::size_type v20 = v19 + v17;
    memset(&__dst, 170, sizeof(__dst));
    if (v19 + v17 >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    size_t v21 = v17;
    if (v20 > 0x16)
    {
      uint64_t v25 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v20 | 7) != 0x17) {
        uint64_t v25 = v20 | 7;
      }
      uint64_t v26 = v25 + 1;
      p_dst = (std::string *)operator new(v25 + 1);
      __dst.__r_.__value_.__l.__size_ = v20;
      __dst.__r_.__value_.__r.__words[2] = v26 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
      if (!v21)
      {
LABEL_34:
        if (v19)
        {
          if (v18 >= 0) {
            uint64_t v23 = v49;
          }
          else {
            uint64_t v23 = (uint64_t *)v49[0];
          }
          memmove((char *)p_dst + v21, v23, v19);
        }
        p_dst->__r_.__value_.__s.__data_[v21 + v19] = 0;
        xpc_object_t v24 = xpc_dictionary_get_value(*a1, (const char *)*MEMORY[0x1E4F4C8E8]);
        *(void *)std::string buf = v24;
        if (v24) {
          xpc_retain(v24);
        }
        else {
          *(void *)std::string buf = xpc_null_create();
        }
        uint64_t v27 = xpc::dyn_cast_or_default((xpc *)buf, 0);
        xpc_release(*(xpc_object_t *)buf);
        GetABMLogServer(&v43);
        int v28 = *((void *)GetGlobalLogger(&v43) + 4);
        uint64_t v29 = v44;
        if (v44 && !atomic_fetch_add(&v44->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
          std::__shared_weak_count::__release_weak(v29);
          if (!os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_52;
          }
        }
        else if (!os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
        {
          goto LABEL_52;
        }
        int v30 = [+[ABMTapToRadar sharedInstance] getMode];
        unint64_t v31 = &v46;
        if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          unint64_t v31 = (std::string *)v46.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)std::string buf = 67109890;
        *(_DWORD *)&uint8_t buf[4] = v30;
        __int16 v52 = 1024;
        unsigned int v53 = v50;
        __int16 v54 = 2080;
        uint64_t v55 = v31;
        __int16 v56 = 1024;
        int v57 = v27;
        _os_log_impl(&dword_1C5767000, v28, OS_LOG_TYPE_DEFAULT, "#I check TTR: mode[%d], radar type[%d], title[%s], MTBF=%d", buf, 0x1Eu);
LABEL_52:
        uint64_t v32 = HIBYTE(v49[2]);
        if (v49[2] < 0) {
          uint64_t v32 = v49[1];
        }
        if (!v32) {
          goto LABEL_83;
        }
        unint64_t v33 = (config::hw *)[+[ABMTapToRadar sharedInstance] checkNotificationCriteria:&v50 :&v46 :v27];
        if (!v33) {
          goto LABEL_83;
        }
        if ((config::hw::watch(v33) & 1) == 0)
        {
          uint64_t v36 = +[ABMTapToRadar sharedInstance];
          uint64_t v37 = v50;
          if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
            std::string::__init_copy_ctor_external(&v42, v48.__r_.__value_.__l.__data_, v48.__r_.__value_.__l.__size_);
          }
          else {
            std::string v42 = v48;
          }
          [(ABMTapToRadar *)v36 showUserNotification:v37 dumpReason:&v42];
          if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(v42.__r_.__value_.__l.__data_);
            if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
              goto LABEL_84;
            }
            goto LABEL_70;
          }
          goto LABEL_83;
        }
        uint64_t v34 = +[ABMTapToRadar sharedInstance];
        uint64_t v35 = v50;
        if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external(&v41, v46.__r_.__value_.__l.__data_, v46.__r_.__value_.__l.__size_);
          if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external(&v40, v46.__r_.__value_.__l.__data_, v46.__r_.__value_.__l.__size_);
LABEL_65:
            if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
              std::string::__init_copy_ctor_external(&v39, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
            }
            else {
              std::string v39 = __dst;
            }
            if (*(char *)(a2 + 23) < 0) {
              std::string::__init_copy_ctor_external(&v38, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
            }
            else {
              std::string v38 = *(std::string *)a2;
            }
            [(ABMTapToRadar *)v34 showNotification:v35 :&v41 :&v40 :&v39 :&v38];
            if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
            {
              operator delete(v38.__r_.__value_.__l.__data_);
              if ((SHIBYTE(v39.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
LABEL_81:
                if ((SHIBYTE(v40.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                  goto LABEL_82;
                }
LABEL_91:
                operator delete(v40.__r_.__value_.__l.__data_);
                if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0) {
                  goto LABEL_92;
                }
LABEL_83:
                if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                  goto LABEL_84;
                }
                goto LABEL_70;
              }
            }
            else if ((SHIBYTE(v39.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
              goto LABEL_81;
            }
            operator delete(v39.__r_.__value_.__l.__data_);
            if ((SHIBYTE(v40.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
LABEL_82:
              if ((SHIBYTE(v41.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                goto LABEL_83;
              }
LABEL_92:
              operator delete(v41.__r_.__value_.__l.__data_);
              if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
LABEL_84:
                if ((SHIBYTE(v46.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                {
LABEL_85:
                  if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
                  {
LABEL_86:
                    if ((SHIBYTE(v48.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                    {
LABEL_87:
                      if ((SHIBYTE(v49[2]) & 0x80000000) == 0) {
                        return;
                      }
LABEL_74:
                      operator delete((void *)v49[0]);
                      return;
                    }
LABEL_73:
                    operator delete(v48.__r_.__value_.__l.__data_);
                    if ((SHIBYTE(v49[2]) & 0x80000000) == 0) {
                      return;
                    }
                    goto LABEL_74;
                  }
LABEL_72:
                  operator delete(__p[0]);
                  if ((SHIBYTE(v48.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                    goto LABEL_87;
                  }
                  goto LABEL_73;
                }
LABEL_71:
                operator delete(v46.__r_.__value_.__l.__data_);
                if ((SHIBYTE(__p[2]) & 0x80000000) == 0) {
                  goto LABEL_86;
                }
                goto LABEL_72;
              }
LABEL_70:
              operator delete(__dst.__r_.__value_.__l.__data_);
              if ((SHIBYTE(v46.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                goto LABEL_85;
              }
              goto LABEL_71;
            }
            goto LABEL_91;
          }
        }
        else
        {
          std::string v41 = v46;
        }
        std::string v40 = v46;
        goto LABEL_65;
      }
    }
    else
    {
      memset(&__dst, 0, sizeof(__dst));
      p_dst = &__dst;
      *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v19 + v17;
      if (!v17) {
        goto LABEL_34;
      }
    }
    memcpy(p_dst, v16, v21);
    goto LABEL_34;
  }
}

void sub_1C580BC50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,char a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,void *a51,uint64_t a52,int a53,__int16 a54,char a55,char a56,uint64_t a57,void *a58,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  if (a35 < 0) {
    operator delete(__p);
  }
  if (a50 < 0)
  {
    operator delete(a45);
    if ((a56 & 0x80000000) == 0) {
      goto LABEL_5;
    }
  }
  else if ((a56 & 0x80000000) == 0)
  {
LABEL_5:
    if ((a63 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  operator delete(a51);
  if ((a63 & 0x80000000) == 0)
  {
LABEL_7:
    if (*(char *)(v63 - 177) < 0) {
      operator delete(*(void **)(v63 - 200));
    }
    if (*(char *)(v63 - 153) < 0) {
      operator delete(*(void **)(v63 - 176));
    }
    _Unwind_Resume(a1);
  }
LABEL_6:
  operator delete(a58);
  goto LABEL_7;
}

std::string *std::vector<std::string>::__emplace_back_slow_path<std::string const&>(char **a1, uint64_t a2)
{
  unint64_t v3 = *a1;
  long long v4 = a1[1];
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  }
  if (0x5555555555555556 * ((a1[2] - v3) >> 3) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((a1[2] - v3) >> 3);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3) >= 0x555555555555555) {
    unint64_t v8 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v8 = v6;
  }
  if (v8)
  {
    if (v8 > 0xAAAAAAAAAAAAAAALL) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    long long v9 = (char *)operator new(24 * v8);
  }
  else
  {
    long long v9 = 0;
  }
  xpc_object_t v10 = (std::string *)&v9[24 * v5];
  uint64_t v16 = v10;
  size_t v17 = v10;
  int v18 = &v9[24 * v8];
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v10, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    unint64_t v3 = *a1;
    long long v4 = a1[1];
    xpc_object_t v10 = v16;
    uint64_t v11 = v17 + 1;
    if (v4 == *a1)
    {
LABEL_17:
      uint64_t v13 = v3;
      goto LABEL_18;
    }
  }
  else
  {
    *(_OWORD *)&v10->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    v10->__r_.__value_.__r.__words[2] = *(void *)(a2 + 16);
    uint64_t v11 = v10 + 1;
    if (v4 == v3) {
      goto LABEL_17;
    }
  }
  do
  {
    long long v12 = *(_OWORD *)(v4 - 24);
    v10[-1].__r_.__value_.__r.__words[2] = *((void *)v4 - 1);
    *(_OWORD *)&v10[-1].__r_.__value_.__l.__data_ = v12;
    --v10;
    *((void *)v4 - 2) = 0;
    *((void *)v4 - 1) = 0;
    *((void *)v4 - 3) = 0;
    v4 -= 24;
  }
  while (v4 != v3);
  uint64_t v13 = *a1;
  unint64_t v3 = a1[1];
LABEL_18:
  *a1 = (char *)v10;
  a1[1] = (char *)v11;
  a1[2] = v18;
  if (v3 != v13)
  {
    unsigned int v14 = (void **)(v3 - 24);
    do
    {
      if (*((char *)v14 + 23) < 0) {
        operator delete(*v14);
      }
      v14 -= 3;
    }
    while (v14 + 3 != (void **)v13);
    unint64_t v3 = v13;
  }
  if (v3) {
    operator delete(v3);
  }
  return v11;
}

void sub_1C580C030(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

uint64_t util::convert<int>(const std::string *a1, _DWORD *a2, int a3)
{
  if ((SHIBYTE(a1->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    LODWORD(v6) = strcasecmp((const char *)a1, "false");
    if (!v6) {
      goto LABEL_29;
    }
    LODWORD(v6) = strcasecmp((const char *)a1, "off");
    if (!v6) {
      goto LABEL_29;
    }
    LODWORD(v6) = strcasecmp((const char *)a1, "no");
    if (!v6) {
      goto LABEL_29;
    }
    if (strcasecmp((const char *)a1, "true")
      && strcasecmp((const char *)a1, "on")
      && strcasecmp((const char *)a1, "yes")
      && strcasecmp((const char *)a1, "full")
      && strcasecmp((const char *)a1, "streaming"))
    {
      long long v7 = (const char *)a1;
      if (!strcasecmp((const char *)a1, "lite")) {
        goto LABEL_30;
      }
      goto LABEL_21;
    }
LABEL_28:
    LODWORD(v6) = 1;
    goto LABEL_29;
  }
  long long v7 = (const char *)a1->__r_.__value_.__r.__words[0];
  LODWORD(v6) = strcasecmp(a1->__r_.__value_.__l.__data_, "false");
  if (!v6) {
    goto LABEL_29;
  }
  LODWORD(v6) = strcasecmp(v7, "off");
  if (!v6) {
    goto LABEL_29;
  }
  LODWORD(v6) = strcasecmp(v7, "no");
  if (!v6) {
    goto LABEL_29;
  }
  if (!strcasecmp(v7, "true")
    || !strcasecmp(v7, "on")
    || !strcasecmp(v7, "yes")
    || !strcasecmp(v7, "full")
    || !strcasecmp(v7, "streaming"))
  {
    goto LABEL_28;
  }
  if (!strcasecmp(v7, "lite"))
  {
LABEL_30:
    LODWORD(v6) = 2;
    goto LABEL_29;
  }
LABEL_21:
  if (!strcasecmp(v7, "background")) {
    goto LABEL_30;
  }
  size_t __idx = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v6 = std::stol(a1, &__idx, a3);
  std::string::size_type size = HIBYTE(a1->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) != 0) {
    std::string::size_type size = a1->__r_.__value_.__l.__size_;
  }
  if (__idx != size || v6 < (uint64_t)0xFFFFFFFF80000000 || v6 > 0x7FFFFFFF) {
    return 0;
  }
LABEL_29:
  *a2 = v6;
  return 1;
}

uint64_t sub_1C580C288(void *a1)
{
  return 0;
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]<std::char_traits<char>,std::allocator<char>>(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6 = (const std::locale *)MEMORY[0x1C8791F60]();
  *(void *)(a1 + 8) = std::locale::use_facet(v6, MEMORY[0x1E4FBA258]);
  *(void *)(a1 + 16) = std::locale::use_facet((const std::locale *)a1, MEMORY[0x1E4FBA280]);
  *(_DWORD *)(a1 + 24) = a3;
  *(_OWORD *)(a1 + 28) = 0u;
  *(_OWORD *)(a1 + 44) = 0u;
  *(_DWORD *)(a1 + 60) = 0;
  uint64_t v7 = *(unsigned __int8 *)(a2 + 23);
  if ((v7 & 0x80u) == 0) {
    unint64_t v8 = (char *)a2;
  }
  else {
    unint64_t v8 = *(char **)a2;
  }
  if ((v7 & 0x80u) != 0) {
    uint64_t v7 = *(void *)(a2 + 8);
  }
  if (&v8[v7] != std::basic_regex<char,std::regex_traits<char>>::__parse<std::__wrap_iter<char const*>>(a1, v8, &v8[v7]))std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)17>(); {
  return a1;
  }
}

void sub_1C580C354(_Unwind_Exception *a1)
{
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v2);
  std::locale::~locale(v1);
  _Unwind_Resume(a1);
}

void sub_1C580C370(_Unwind_Exception *a1)
{
  std::locale::~locale(v1);
  _Unwind_Resume(a1);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse<std::__wrap_iter<char const*>>(uint64_t a1, char *a2, char *a3)
{
  uint64_t v6 = operator new(8uLL);
  void *v6 = &unk_1F20F4910;
  uint64_t v7 = operator new(0x10uLL);
  v7[1] = v6;
  unint64_t v8 = operator new(0x20uLL);
  void *v8 = &unk_1F20F4968;
  v8[1] = 0;
  v8[2] = 0;
  v8[3] = v7;
  long long v9 = *(std::__shared_weak_count **)(a1 + 48);
  *(void *)(a1 + 40) = v7;
  *(void *)(a1 + 48) = v8;
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
    *(void *)(a1 + 56) = *(void *)(a1 + 40);
    unsigned int v10 = *(_DWORD *)(a1 + 24) & 0x1F0;
    if (v10 <= 0x3F)
    {
LABEL_4:
      if (v10)
      {
        if (v10 != 16)
        {
          if (v10 != 32) {
LABEL_27:
          }
            std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)14>();
          goto LABEL_15;
        }
        return std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<std::__wrap_iter<char const*>>(a1, a2, a3);
      }
      else
      {
        return std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, a2, a3);
      }
    }
  }
  else
  {
    *(void *)(a1 + 56) = *(void *)(a1 + 40);
    unsigned int v10 = *(_DWORD *)(a1 + 24) & 0x1F0;
    if (v10 <= 0x3F) {
      goto LABEL_4;
    }
  }
  switch(v10)
  {
    case 0x40u:
LABEL_15:
      return (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<std::__wrap_iter<char const*>>(a1, (std::basic_regex<char> *)a2, (std::basic_regex<char> *)a3);
    case 0x80u:
      return std::basic_regex<char,std::regex_traits<char>>::__parse_grep<std::__wrap_iter<char const*>>(a1, a2, a3);
    case 0x100u:
      return (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_egrep<std::__wrap_iter<char const*>>(a1, (std::basic_regex<char> *)a2, (std::basic_regex<char> *)a3);
    default:
      goto LABEL_27;
  }
}

void sub_1C580C5C4(_Unwind_Exception *a1)
{
  std::__empty_state<char>::~__empty_state(v2);
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, char *a2, char *a3)
{
  std::vector<std::ssub_match>::pointer end = a1->__end_;
  uint64_t v7 = a2;
  while (1)
  {
    unint64_t v8 = (std::basic_regex<char> *)v7;
    uint64_t v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_assertion<std::__wrap_iter<char const*>>((uint64_t)a1, v7, a3);
    if (v8 == (std::basic_regex<char> *)v7) {
      break;
    }
LABEL_2:
    if (v7 == (char *)v8) {
      goto LABEL_6;
    }
  }
  long long v9 = a1->__end_;
  unsigned int marked_count = a1->__marked_count_;
  uint64_t v11 = std::basic_regex<char,std::regex_traits<char>>::__parse_atom<std::__wrap_iter<char const*>>(a1, v8, (std::basic_regex<char> *)a3);
  if (v8 != v11)
  {
    uint64_t v7 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__wrap_iter<char const*>>((uint64_t)a1, v11, (std::basic_regex<char> *)a3, v9, marked_count + 1, a1->__marked_count_ + 1);
    goto LABEL_2;
  }
LABEL_6:
  if (v8 == (std::basic_regex<char> *)a2)
  {
    long long v12 = (std::__node<char> *)operator new(0x10uLL);
    uint64_t v13 = a1->__end_;
    first = v13->__first_;
    v12[1].__vftable = (std::__node<char>_vtbl *)first;
    v13->__first_ = v12;
    int v15 = (std::__owns_one_state<char> *)a1->__end_->__first_;
    goto LABEL_8;
  }
LABEL_9:
  if (v8 == (std::basic_regex<char> *)a3) {
    return a3;
  }
  if (LOBYTE(v8->__traits_.__loc_.__locale_) == 124)
  {
    uint64_t v16 = a1->__end_;
    size_t v17 = (std::basic_regex<char> *)((char *)&v8->__traits_.__loc_.__locale_ + 1);
    int v18 = (char *)&v8->__traits_.__loc_.__locale_ + 1;
    while (1)
    {
      unint64_t v8 = (std::basic_regex<char> *)v18;
      int v18 = std::basic_regex<char,std::regex_traits<char>>::__parse_assertion<std::__wrap_iter<char const*>>((uint64_t)a1, v18, a3);
      if (v8 == (std::basic_regex<char> *)v18)
      {
        size_t v19 = a1->__end_;
        unsigned int v20 = a1->__marked_count_;
        size_t v21 = std::basic_regex<char,std::regex_traits<char>>::__parse_atom<std::__wrap_iter<char const*>>(a1, v8, (std::basic_regex<char> *)a3);
        if (v8 == v21)
        {
LABEL_16:
          if (v8 == v17)
          {
            unint64_t v22 = (std::__node<char> *)operator new(0x10uLL);
            uint64_t v23 = a1->__end_;
            xpc_object_t v24 = v23->__first_;
            v22[1].__vftable = (std::__node<char>_vtbl *)v24;
            v23->__first_ = v22;
            a1->__end_ = (std::__owns_one_state<char> *)a1->__end_->__first_;
          }
          uint64_t v25 = (std::__node<char> *)operator new(0x18uLL);
          uint64_t v26 = v16->__first_;
          v25[1].__vftable = (std::__node<char>_vtbl *)end->__first_;
          v25[2].__vftable = (std::__node<char>_vtbl *)v26;
          v25->__vftable = (std::__node<char>_vtbl *)&unk_1F20F4F28;
          end->__first_ = v25;
          v16->__first_ = 0;
          uint64_t v27 = (std::__node<char> *)operator new(0x10uLL);
          int v28 = a1->__end_->__first_;
          v27[1].__vftable = (std::__node<char>_vtbl *)v28;
          v16->__first_ = v27;
          a1->__end_->__first_ = 0;
          uint64_t v29 = (std::__node<char> *)operator new(0x10uLL);
          int v30 = v16->__first_;
          v29->__vftable = (std::__node<char>_vtbl *)&unk_1F20F4F70;
          v29[1].__vftable = (std::__node<char>_vtbl *)v30;
          a1->__end_->__first_ = v29;
          int v15 = (std::__owns_one_state<char> *)v16->__first_;
LABEL_8:
          a1->__end_ = v15;
          goto LABEL_9;
        }
        int v18 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__wrap_iter<char const*>>((uint64_t)a1, v21, (std::basic_regex<char> *)a3, v19, v20 + 1, a1->__marked_count_ + 1);
      }
      if (v18 == (char *)v8) {
        goto LABEL_16;
      }
    }
  }
  return (char *)v8;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<std::__wrap_iter<char const*>>(uint64_t a1, char *a2, char *a3)
{
  unint64_t v3 = (std::basic_regex<char> *)a2;
  if (a2 == a3) {
    return a2;
  }
  if (*a2 == 94)
  {
    uint64_t v6 = operator new(0x18uLL);
    BOOL v7 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
    uint64_t v8 = *(void *)(a1 + 56);
    uint64_t v9 = *(void *)(v8 + 8);
    void *v6 = &unk_1F20F4A60;
    v6[1] = v9;
    *((unsigned char *)v6 + 16) = v7;
    *(void *)(v8 + 8) = v6;
    *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
    unint64_t v3 = (std::basic_regex<char> *)((char *)v3 + 1);
  }
  if (v3 != (std::basic_regex<char> *)a3)
  {
    while (v3 != (std::basic_regex<char> *)a3)
    {
      unsigned int v10 = v3;
      uint64_t v11 = *(std::__owns_one_state<char> **)(a1 + 56);
      int v12 = *(_DWORD *)(a1 + 28);
      uint64_t v13 = std::basic_regex<char,std::regex_traits<char>>::__parse_nondupl_RE<std::__wrap_iter<char const*>>(a1, (uint64_t)v10, a3);
      if (v10 != v13)
      {
        unint64_t v3 = std::basic_regex<char,std::regex_traits<char>>::__parse_RE_dupl_symbol<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, (std::basic_regex<char> *)v13, (std::basic_regex<char> *)a3, v11, (v12 + 1), (*(_DWORD *)(a1 + 28) + 1));
        if (v10 != (unsigned char *)v3) {
          continue;
        }
      }
      if (v10 + 1 != a3 || *v10 != 36) {
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
      }
      unsigned int v14 = operator new(0x18uLL);
      BOOL v15 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
      uint64_t v16 = *(void *)(a1 + 56);
      uint64_t v17 = *(void *)(v16 + 8);
      void *v14 = &unk_1F20F4AA8;
      v14[1] = v17;
      *((unsigned char *)v14 + 16) = v15;
      *(void *)(v16 + 8) = v14;
      *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
      return a3;
    }
  }
  return a3;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<std::__wrap_iter<char const*>>(uint64_t a1, std::basic_regex<char> *a2, std::basic_regex<char> *a3)
{
  uint64_t v6 = *(void *)(a1 + 56);
  BOOL v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<std::__wrap_iter<char const*>>(a1, a2, a3);
  if (v7 == a2) {
    goto LABEL_12;
  }
  do
  {
    uint64_t v8 = v7;
    BOOL v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<std::__wrap_iter<char const*>>(a1, v7, a3);
  }
  while (v8 != v7);
  if (v8 == a2) {
LABEL_12:
  }
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
  if (v8 == a3) {
    return a3;
  }
  while (LOBYTE(v8->__traits_.__loc_.__locale_) == 124)
  {
    uint64_t v9 = *(void *)(a1 + 56);
    unsigned int v10 = (std::basic_regex<char> *)((char *)&v8->__traits_.__loc_.__locale_ + 1);
    uint64_t v11 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<std::__wrap_iter<char const*>>(a1, (std::basic_regex<char> *)((char *)&v8->__traits_.__loc_.__locale_ + 1), a3);
    if ((std::basic_regex<char> *)((char *)&v8->__traits_.__loc_.__locale_ + 1) == v11) {
      goto LABEL_12;
    }
    do
    {
      uint64_t v8 = v11;
      uint64_t v11 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<std::__wrap_iter<char const*>>(a1, v11, a3);
    }
    while (v8 != v11);
    if (v8 == v10) {
      goto LABEL_12;
    }
    int v12 = operator new(0x18uLL);
    uint64_t v13 = *(void *)(v9 + 8);
    v12[1] = *(void *)(v6 + 8);
    void v12[2] = v13;
    *int v12 = &unk_1F20F4F28;
    *(void *)(v6 + 8) = v12;
    *(void *)(v9 + 8) = 0;
    unsigned int v14 = operator new(0x10uLL);
    uint64_t v15 = *(void *)(*(void *)(a1 + 56) + 8);
    v14[1] = v15;
    *(void *)(v9 + 8) = v14;
    *(void *)(*(void *)(a1 + 56) + 8) = 0;
    uint64_t v16 = operator new(0x10uLL);
    uint64_t v17 = *(void *)(v9 + 8);
    *uint64_t v16 = &unk_1F20F4F70;
    v16[1] = v17;
    *(void *)(*(void *)(a1 + 56) + 8) = v16;
    *(void *)(a1 + 56) = *(void *)(v9 + 8);
    if (v8 == a3) {
      return a3;
    }
  }
  return v8;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_grep<std::__wrap_iter<char const*>>(uint64_t a1, char *__s, char *a3)
{
  uint64_t v6 = *(void *)(a1 + 56);
  BOOL v7 = (char *)memchr(__s, 10, a3 - __s);
  if (v7) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = a3;
  }
  if (v8 == __s)
  {
    uint64_t v9 = operator new(0x10uLL);
    uint64_t v10 = *(void *)(v6 + 8);
    v9[1] = v10;
    *(void *)(v6 + 8) = v9;
    *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
    if (v8 == a3) {
      uint64_t v11 = v8;
    }
    else {
      uint64_t v11 = v8 + 1;
    }
    if (v11 == a3) {
      return a3;
    }
  }
  else
  {
    std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<std::__wrap_iter<char const*>>(a1, __s, v8);
    if (v8 == a3) {
      uint64_t v11 = v8;
    }
    else {
      uint64_t v11 = v8 + 1;
    }
    if (v11 == a3) {
      return a3;
    }
  }
  uint64_t v12 = *(void *)(a1 + 56);
  do
  {
    size_t v21 = (char *)memchr(v11, 10, a3 - v11);
    if (v21) {
      unint64_t v22 = v21;
    }
    else {
      unint64_t v22 = a3;
    }
    if (v22 == v11)
    {
      uint64_t v13 = operator new(0x10uLL);
      uint64_t v14 = *(void *)(v12 + 8);
      v13[1] = v14;
      *(void *)(v12 + 8) = v13;
      *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
    }
    else
    {
      std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<std::__wrap_iter<char const*>>(a1, v11, v22);
    }
    uint64_t v15 = operator new(0x18uLL);
    uint64_t v16 = *(void *)(v12 + 8);
    v15[1] = *(void *)(v6 + 8);
    v15[2] = v16;
    *uint64_t v15 = &unk_1F20F4F28;
    *(void *)(v6 + 8) = v15;
    *(void *)(v12 + 8) = 0;
    uint64_t v17 = operator new(0x10uLL);
    uint64_t v18 = *(void *)(*(void *)(a1 + 56) + 8);
    v17[1] = v18;
    *(void *)(v12 + 8) = v17;
    *(void *)(*(void *)(a1 + 56) + 8) = 0;
    size_t v19 = operator new(0x10uLL);
    uint64_t v20 = *(void *)(v12 + 8);
    void *v19 = &unk_1F20F4F70;
    v19[1] = v20;
    *(void *)(*(void *)(a1 + 56) + 8) = v19;
    uint64_t v12 = *(void *)(v12 + 8);
    *(void *)(a1 + 56) = v12;
    if (v22 == a3) {
      uint64_t v11 = v22;
    }
    else {
      uint64_t v11 = v22 + 1;
    }
  }
  while (v11 != a3);
  return a3;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_egrep<std::__wrap_iter<char const*>>(uint64_t a1, std::basic_regex<char> *__s, std::basic_regex<char> *a3)
{
  uint64_t v6 = *(void *)(a1 + 56);
  BOOL v7 = (std::basic_regex<char> *)memchr(__s, 10, (char *)a3 - (char *)__s);
  if (v7) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = a3;
  }
  if (v8 == __s)
  {
    uint64_t v9 = operator new(0x10uLL);
    uint64_t v10 = *(void *)(v6 + 8);
    v9[1] = v10;
    *(void *)(v6 + 8) = v9;
    *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
    if (v8 == a3) {
      uint64_t v11 = v8;
    }
    else {
      uint64_t v11 = (std::basic_regex<char> *)((char *)&v8->__traits_.__loc_.__locale_ + 1);
    }
    if (v11 == a3) {
      return a3;
    }
  }
  else
  {
    std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<std::__wrap_iter<char const*>>(a1, __s, v8);
    if (v8 == a3) {
      uint64_t v11 = v8;
    }
    else {
      uint64_t v11 = (std::basic_regex<char> *)((char *)&v8->__traits_.__loc_.__locale_ + 1);
    }
    if (v11 == a3) {
      return a3;
    }
  }
  uint64_t v12 = *(void *)(a1 + 56);
  do
  {
    size_t v21 = (std::basic_regex<char> *)memchr(v11, 10, (char *)a3 - (char *)v11);
    if (v21) {
      unint64_t v22 = v21;
    }
    else {
      unint64_t v22 = a3;
    }
    if (v22 == v11)
    {
      uint64_t v13 = operator new(0x10uLL);
      uint64_t v14 = *(void *)(v12 + 8);
      v13[1] = v14;
      *(void *)(v12 + 8) = v13;
      *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
    }
    else
    {
      std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<std::__wrap_iter<char const*>>(a1, v11, v22);
    }
    uint64_t v15 = operator new(0x18uLL);
    uint64_t v16 = *(void *)(v12 + 8);
    v15[1] = *(void *)(v6 + 8);
    v15[2] = v16;
    *uint64_t v15 = &unk_1F20F4F28;
    *(void *)(v6 + 8) = v15;
    *(void *)(v12 + 8) = 0;
    uint64_t v17 = operator new(0x10uLL);
    uint64_t v18 = *(void *)(*(void *)(a1 + 56) + 8);
    v17[1] = v18;
    *(void *)(v12 + 8) = v17;
    *(void *)(*(void *)(a1 + 56) + 8) = 0;
    size_t v19 = operator new(0x10uLL);
    uint64_t v20 = *(void *)(v12 + 8);
    void *v19 = &unk_1F20F4F70;
    v19[1] = v20;
    *(void *)(*(void *)(a1 + 56) + 8) = v19;
    uint64_t v12 = *(void *)(v12 + 8);
    *(void *)(a1 + 56) = v12;
    if (v22 == a3) {
      uint64_t v11 = v22;
    }
    else {
      uint64_t v11 = (std::basic_regex<char> *)((char *)&v22->__traits_.__loc_.__locale_ + 1);
    }
  }
  while (v11 != a3);
  return a3;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_assertion<std::__wrap_iter<char const*>>(uint64_t a1, char *a2, char *a3)
{
  unint64_t v3 = a2;
  if (a2 == a3) {
    return v3;
  }
  int v6 = *a2;
  if (v6 > 91)
  {
    if (v6 == 92)
    {
      if (a2 + 1 != a3)
      {
        int v16 = a2[1];
        if (v16 == 66)
        {
          uint64_t v17 = (char *)operator new(0x30uLL);
          uint64_t v19 = *(void *)(*(void *)(a1 + 56) + 8);
          *(void *)uint64_t v17 = &unk_1F20F4AF0;
          *((void *)v17 + 1) = v19;
          std::locale::locale((std::locale *)v17 + 2, (const std::locale *)a1);
          *(_OWORD *)(v17 + 24) = *(_OWORD *)(a1 + 8);
          v17[40] = 1;
        }
        else
        {
          if (v16 != 98) {
            return v3;
          }
          uint64_t v17 = (char *)operator new(0x30uLL);
          uint64_t v18 = *(void *)(*(void *)(a1 + 56) + 8);
          *(void *)uint64_t v17 = &unk_1F20F4AF0;
          *((void *)v17 + 1) = v18;
          std::locale::locale((std::locale *)v17 + 2, (const std::locale *)a1);
          *(_OWORD *)(v17 + 24) = *(_OWORD *)(a1 + 8);
          v17[40] = 0;
        }
        *(void *)(*(void *)(a1 + 56) + 8) = v17;
        *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
        return v3 + 2;
      }
      return v3;
    }
    if (v6 != 94) {
      return v3;
    }
    uint64_t v11 = operator new(0x18uLL);
    BOOL v12 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
    uint64_t v13 = *(void *)(a1 + 56);
    v11[1] = *(void *)(v13 + 8);
    uint64_t v14 = &unk_1F20F4A60;
LABEL_17:
    void *v11 = v14;
    *((unsigned char *)v11 + 16) = v12;
    *(void *)(v13 + 8) = v11;
    *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
    return ++v3;
  }
  if (v6 == 36)
  {
    uint64_t v11 = operator new(0x18uLL);
    BOOL v12 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
    uint64_t v13 = *(void *)(a1 + 56);
    v11[1] = *(void *)(v13 + 8);
    uint64_t v14 = &unk_1F20F4AA8;
    goto LABEL_17;
  }
  if (v6 != 40 || a2 + 1 == a3 || a2[1] != 63 || a2 + 2 == a3) {
    return v3;
  }
  int v7 = a2[2];
  if (v7 == 33)
  {
    *(void *)&long long v20 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v20 + 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)&v22.__loop_count_ = v20;
    *(_OWORD *)&v22.__start_.__cntrl_ = v20;
    *(_OWORD *)&v22.__traits_.__loc_.__locale_ = v20;
    *(_OWORD *)&v22.__traits_.__col_ = v20;
    std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]((uint64_t)&v22);
    v22.__flags_ = *(_DWORD *)(a1 + 24);
    uint64_t v9 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse<std::__wrap_iter<char const*>>(&v22, v3 + 3, a3);
    unsigned int marked_count = v22.__marked_count_;
    std::basic_regex<char,std::regex_traits<char>>::__push_lookahead((std::basic_regex<char> *)a1, &v22, 1, *(_DWORD *)(a1 + 28));
    *(_DWORD *)(a1 + 28) += marked_count;
    if (v9 == a3 || *v9 != 41) {
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
    }
    goto LABEL_27;
  }
  if (v7 != 61) {
    return v3;
  }
  *(void *)&long long v8 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&v22.__loop_count_ = v8;
  *(_OWORD *)&v22.__start_.__cntrl_ = v8;
  *(_OWORD *)&v22.__traits_.__loc_.__locale_ = v8;
  *(_OWORD *)&v22.__traits_.__col_ = v8;
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]((uint64_t)&v22);
  v22.__flags_ = *(_DWORD *)(a1 + 24);
  uint64_t v9 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse<std::__wrap_iter<char const*>>(&v22, v3 + 3, a3);
  unsigned int v10 = v22.__marked_count_;
  std::basic_regex<char,std::regex_traits<char>>::__push_lookahead((std::basic_regex<char> *)a1, &v22, 0, *(_DWORD *)(a1 + 28));
  *(_DWORD *)(a1 + 28) += v10;
  if (v9 == a3 || *v9 != 41) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
  }
LABEL_27:
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&v22.__traits_.__loc_);
  return v9 + 1;
}

void sub_1C580D2B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
}

void sub_1C580D2C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
}

void sub_1C580D2DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
}

void sub_1C580D2F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_atom<std::__wrap_iter<char const*>>(std::basic_regex<char> *this, std::basic_regex<char> *a2, std::basic_regex<char> *a3)
{
  unint64_t v3 = a2;
  if (a2 == a3) {
    return v3;
  }
  switch(LOBYTE(a2->__traits_.__loc_.__locale_))
  {
    case '(':
      if ((std::basic_regex<char> *)((char *)&a2->__traits_.__loc_.__locale_ + 1) == a3) {
        goto LABEL_26;
      }
      if ((std::basic_regex<char> *)((char *)&a2->__traits_.__loc_.__locale_ + 2) != a3
        && BYTE1(a2->__traits_.__loc_.__locale_) == 63
        && BYTE2(a2->__traits_.__loc_.__locale_) == 58)
      {
        ++this->__open_count_;
        int v6 = (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<std::__wrap_iter<char const*>>(this, (char *)&a2->__traits_.__loc_.__locale_ + 3, a3);
        if (v6 != a3 && LOBYTE(v6->__traits_.__loc_.__locale_) == 41)
        {
          --this->__open_count_;
          return (std::basic_regex<char> *)((char *)&v6->__traits_.__loc_.__locale_ + 1);
        }
LABEL_26:
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
      }
      if ((this->__flags_ & 2) != 0)
      {
        unsigned int marked_count = this->__marked_count_;
      }
      else
      {
        uint64_t v11 = (std::__node<char> *)operator new(0x18uLL);
        unsigned int marked_count = this->__marked_count_ + 1;
        this->__marked_count_ = marked_count;
        std::vector<std::ssub_match>::pointer end = this->__end_;
        first = end->__first_;
        v11->__vftable = (std::__node<char>_vtbl *)&unk_1F20F4DC0;
        v11[1].__vftable = (std::__node<char>_vtbl *)first;
        LODWORD(v11[2].__vftable) = marked_count;
        end->__first_ = v11;
        this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
      }
      ++this->__open_count_;
      uint64_t v15 = (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<std::__wrap_iter<char const*>>(this, (char *)&v3->__traits_.__loc_.__locale_ + 1, a3);
      if (v15 == a3) {
        goto LABEL_26;
      }
      int v16 = v15;
      if (LOBYTE(v15->__traits_.__loc_.__locale_) != 41) {
        goto LABEL_26;
      }
      if ((this->__flags_ & 2) == 0)
      {
        uint64_t v17 = (std::__node<char> *)operator new(0x18uLL);
        uint64_t v18 = this->__end_;
        uint64_t v19 = v18->__first_;
        v17->__vftable = (std::__node<char>_vtbl *)&unk_1F20F4E08;
        v17[1].__vftable = (std::__node<char>_vtbl *)v19;
        LODWORD(v17[2].__vftable) = marked_count;
        v18->__first_ = v17;
        this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
      }
      --this->__open_count_;
      xpc_object_t result = (std::basic_regex<char> *)((char *)&v16->__traits_.__loc_.__locale_ + 1);
      break;
    case ')':
    case ',':
    case '-':
    case '/':
    case '0':
    case '1':
    case '2':
    case '3':
    case '4':
    case '5':
    case '6':
    case '7':
    case '8':
    case '9':
    case ':':
    case ';':
    case '<':
    case '=':
    case '>':
    case '@':
    case 'A':
    case 'B':
    case 'C':
    case 'D':
    case 'E':
    case 'F':
    case 'G':
    case 'H':
    case 'I':
    case 'J':
    case 'K':
    case 'L':
    case 'M':
    case 'N':
    case 'O':
    case 'P':
    case 'Q':
    case 'R':
    case 'S':
    case 'T':
    case 'U':
    case 'V':
    case 'W':
    case 'X':
    case 'Y':
    case 'Z':
      return std::basic_regex<char,std::regex_traits<char>>::__parse_pattern_character<std::__wrap_iter<char const*>>(this, a2, a3);
    case '*':
    case '+':
    case '?':
      goto LABEL_25;
    case '.':
      long long v8 = (std::__node<char> *)operator new(0x10uLL);
      uint64_t v9 = this->__end_;
      unsigned int v10 = v9->__first_;
      v8->__vftable = (std::__node<char>_vtbl *)&unk_1F20F4B80;
      v8[1].__vftable = (std::__node<char>_vtbl *)v10;
      v9->__first_ = v8;
      this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
      return (std::basic_regex<char> *)((char *)v3 + 1);
    case '[':
      return (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<std::__wrap_iter<char const*>>((uint64_t)this, (char *)a2, (char *)a3);
    case '\\':
      return (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_atom_escape<std::__wrap_iter<char const*>>(this, (unsigned __int8 *)a2, (unsigned __int8 *)a3);
    default:
      if (LOBYTE(a2->__traits_.__loc_.__locale_) == 123) {
LABEL_25:
      }
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)11>();
      return std::basic_regex<char,std::regex_traits<char>>::__parse_pattern_character<std::__wrap_iter<char const*>>(this, a2, a3);
  }
  return result;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__wrap_iter<char const*>>(uint64_t a1, std::basic_regex<char> *this, std::basic_regex<char> *a3, std::__owns_one_state<char> *a4, size_t __mexp_begin, size_t __mexp_end)
{
  if (this == a3) {
    return this;
  }
  int v6 = *(_DWORD *)(a1 + 24) & 0x1F0;
  int locale_low = SLOBYTE(this->__traits_.__loc_.__locale_);
  if (locale_low <= 62)
  {
    if (locale_low == 42)
    {
      uint64_t v9 = (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
      if (v6) {
        BOOL v21 = 1;
      }
      else {
        BOOL v21 = v9 == a3;
      }
      if (!v21 && LOBYTE(v9->__traits_.__loc_.__locale_) == 63)
      {
        unsigned int v10 = (char *)&this->__traits_.__loc_.__locale_ + 2;
        __mexp_std::vector<std::ssub_match>::pointer begin = __mexp_begin;
        __mexp_std::vector<std::ssub_match>::pointer end = __mexp_end;
        size_t v11 = 0;
        goto LABEL_36;
      }
      __mexp_std::vector<std::ssub_match>::pointer begin = __mexp_begin;
      __mexp_std::vector<std::ssub_match>::pointer end = __mexp_end;
      size_t v25 = 0;
      goto LABEL_45;
    }
    long long v8 = this;
    if (locale_low == 43)
    {
      uint64_t v9 = (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
      if (!v6 && v9 != a3 && LOBYTE(v9->__traits_.__loc_.__locale_) == 63)
      {
        unsigned int v10 = (char *)&this->__traits_.__loc_.__locale_ + 2;
        __mexp_std::vector<std::ssub_match>::pointer begin = __mexp_begin;
        __mexp_std::vector<std::ssub_match>::pointer end = __mexp_end;
        size_t v11 = 1;
LABEL_36:
        std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v11, 0xFFFFFFFFFFFFFFFFLL, a4, __mexp_begin, __mexp_end, 0);
        return (std::basic_regex<char> *)v10;
      }
      __mexp_std::vector<std::ssub_match>::pointer begin = __mexp_begin;
      __mexp_std::vector<std::ssub_match>::pointer end = __mexp_end;
      size_t v25 = 1;
      goto LABEL_45;
    }
    return v8;
  }
  if (locale_low == 63)
  {
    std::basic_regex<char> v22 = (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
    if (v6) {
      BOOL v23 = 1;
    }
    else {
      BOOL v23 = v22 == a3;
    }
    if (v23 || LOBYTE(v22->__traits_.__loc_.__locale_) != 63)
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, 0, 1uLL, a4, __mexp_begin, __mexp_end, 1);
      return v22;
    }
    else
    {
      xpc_object_t v24 = (char *)&this->__traits_.__loc_.__locale_ + 2;
      std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, 0, 1uLL, a4, __mexp_begin, __mexp_end, 0);
      return (std::basic_regex<char> *)v24;
    }
  }
  else
  {
    long long v8 = this;
    if (locale_low != 123) {
      return v8;
    }
    uint64_t v13 = (char *)&this->__traits_.__loc_.__locale_ + 1;
    if ((std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1) == a3) {
      goto LABEL_72;
    }
    int v14 = *v13;
    if ((v14 & 0xF8) != 0x30 && (v14 & 0xFE) != 0x38) {
      goto LABEL_72;
    }
    int v15 = v14 - 48;
    int v16 = (char *)&this->__traits_.__loc_.__locale_ + 2;
    if ((std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 2) == a3)
    {
LABEL_21:
      int v16 = (char *)a3;
    }
    else
    {
      while (1)
      {
        int v17 = *v16;
        if ((v17 & 0xF8) != 0x30 && (v17 & 0xFE) != 0x38) {
          break;
        }
        if (v15 >= 214748364) {
          goto LABEL_72;
        }
        int v15 = v17 + 10 * v15 - 48;
        if (++v16 == (char *)a3) {
          goto LABEL_21;
        }
      }
    }
    if (v16 == v13) {
      goto LABEL_72;
    }
    if (v16 == (char *)a3) {
      goto LABEL_73;
    }
    int v18 = *v16;
    if (v18 != 44)
    {
      if (v18 == 125)
      {
        uint64_t v19 = (std::basic_regex<char> *)(v16 + 1);
        if (v6 || v19 == a3 || LOBYTE(v19->__traits_.__loc_.__locale_) != 63)
        {
          std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v15, v15, a4, __mexp_begin, __mexp_end, 1);
          return v19;
        }
        else
        {
          long long v20 = (unsigned __int8 *)(v16 + 2);
          std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v15, v15, a4, __mexp_begin, __mexp_end, 0);
          return (std::basic_regex<char> *)v20;
        }
      }
LABEL_72:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>();
    }
    uint64_t v26 = (std::basic_regex<char> *)(v16 + 1);
    if (v16 + 1 == (char *)a3) {
      goto LABEL_72;
    }
    int v27 = LOBYTE(v26->__traits_.__loc_.__locale_);
    if (v27 == 125)
    {
      uint64_t v9 = (std::basic_regex<char> *)(v16 + 2);
      if (!v6 && v9 != a3 && LOBYTE(v9->__traits_.__loc_.__locale_) == 63)
      {
        size_t v11 = v15;
        unsigned int v10 = v16 + 3;
        __mexp_std::vector<std::ssub_match>::pointer begin = __mexp_begin;
        __mexp_std::vector<std::ssub_match>::pointer end = __mexp_end;
        goto LABEL_36;
      }
      size_t v25 = v15;
      __mexp_std::vector<std::ssub_match>::pointer begin = __mexp_begin;
      __mexp_std::vector<std::ssub_match>::pointer end = __mexp_end;
LABEL_45:
      std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v25, 0xFFFFFFFFFFFFFFFFLL, a4, __mexp_begin, __mexp_end, 1);
      return v9;
    }
    if ((v27 & 0xF8) != 0x30 && (v27 & 0xFE) != 0x38) {
      goto LABEL_73;
    }
    int v28 = v27 - 48;
    uint64_t v29 = (std::basic_regex<char> *)(v16 + 2);
    if (v29 == a3)
    {
LABEL_61:
      uint64_t v29 = a3;
    }
    else
    {
      while (1)
      {
        int v30 = LOBYTE(v29->__traits_.__loc_.__locale_);
        if ((v30 & 0xF8) != 0x30 && (v30 & 0xFE) != 0x38) {
          break;
        }
        if (v28 >= 214748364) {
          goto LABEL_72;
        }
        int v28 = v30 + 10 * v28 - 48;
        uint64_t v29 = (std::basic_regex<char> *)((char *)v29 + 1);
        if (v29 == a3) {
          goto LABEL_61;
        }
      }
    }
    if (v29 == v26 || v29 == a3 || LOBYTE(v29->__traits_.__loc_.__locale_) != 125) {
LABEL_73:
    }
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>();
    if (v28 < v15) {
      goto LABEL_72;
    }
    unint64_t v31 = (std::basic_regex<char> *)((char *)&v29->__traits_.__loc_.__locale_ + 1);
    if (v6 || v31 == a3 || LOBYTE(v31->__traits_.__loc_.__locale_) != 63)
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v15, v28, a4, __mexp_begin, __mexp_end, 1);
      return v31;
    }
    else
    {
      uint64_t v32 = (char *)&v29->__traits_.__loc_.__locale_ + 2;
      std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v15, v28, a4, __mexp_begin, __mexp_end, 0);
      return (std::basic_regex<char> *)v32;
    }
  }
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_atom_escape<std::__wrap_iter<char const*>>(std::basic_regex<char> *this, unsigned __int8 *a2, unsigned __int8 *a3)
{
  if (a2 == a3) {
    return a2;
  }
  long long v4 = a2;
  if (*a2 == 92)
  {
    int v6 = a2 + 1;
    if (a2 + 1 == a3) {
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
    }
    int v8 = *v6;
    unsigned int v9 = v8 - 48;
    if (v8 == 48)
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_char(this, v9);
      return a2 + 2;
    }
    if ((v8 - 49) <= 8)
    {
      long long v4 = a2 + 2;
      if (a2 + 2 == a3)
      {
        long long v4 = a3;
      }
      else
      {
        while (1)
        {
          int v11 = *v4;
          if ((v11 - 48) > 9) {
            break;
          }
          if (v9 >= 0x19999999) {
            goto LABEL_24;
          }
          ++v4;
          unsigned int v9 = v11 + 10 * v9 - 48;
          if (v4 == a3)
          {
            long long v4 = a3;
            break;
          }
        }
        if (!v9) {
LABEL_24:
        }
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
      }
      if (v9 > this->__marked_count_) {
        goto LABEL_24;
      }
      std::basic_regex<char,std::regex_traits<char>>::__push_back_ref(this, v9);
      if (v4 != v6) {
        return v4;
      }
    }
    long long v4 = std::basic_regex<char,std::regex_traits<char>>::__parse_character_class_escape<std::__wrap_iter<char const*>>((uint64_t)this, a2 + 1, a3);
    if (v6 == v4)
    {
      BOOL v12 = std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<std::__wrap_iter<char const*>>(this, a2 + 1, a3, 0);
      if (v6 == v12) {
        return a2;
      }
      else {
        return v12;
      }
    }
  }
  return v4;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<std::__wrap_iter<char const*>>(uint64_t a1, char *a2, char *a3)
{
  if (a2 != a3 && *a2 == 91)
  {
    if (a2 + 1 == a3) {
      goto LABEL_20;
    }
    int v5 = a2[1];
    char v6 = v5 == 94;
    int v7 = v5 == 94 ? a2 + 2 : a2 + 1;
    int v8 = operator new(0xB0uLL);
    std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v8, a1, *(void *)(*(void *)(a1 + 56) + 8), v6, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
    *(void *)(*(void *)(a1 + 56) + 8) = v8;
    *(void *)(a1 + 56) = v8;
    if (v7 == a3) {
      goto LABEL_20;
    }
    if ((*(_WORD *)(a1 + 24) & 0x1F0) != 0 && *v7 == 93)
    {
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)v8, 93);
      ++v7;
    }
    if (v7 == a3) {
      goto LABEL_20;
    }
    do
    {
      unsigned int v9 = v7;
      int v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_expression_term<std::__wrap_iter<char const*>>(a1, v7, a3, (uint64_t)v8);
    }
    while (v9 != v7);
    if (v9 == a3) {
      goto LABEL_20;
    }
    if (*v9 == 45)
    {
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)v8, 45);
      ++v9;
    }
    if (v9 == a3 || *v9 != 93) {
LABEL_20:
    }
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
    return v9 + 1;
  }
  return a2;
}

void sub_1C580DD18(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_pattern_character<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, std::basic_regex<char> *this, std::basic_regex<char> *a3)
{
  if (this == a3) {
    return this;
  }
  switch(LOBYTE(this->__traits_.__loc_.__locale_))
  {
    case '$':
    case '(':
    case ')':
    case '*':
    case '+':
    case '.':
    case '?':
    case '[':
    case '\\':
    case ']':
    case '^':
    case '{':
    case '|':
    case '}':
      return this;
    default:
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, (std::basic_regex<char>::value_type)this->__traits_.__loc_.__locale_);
      xpc_object_t result = (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
      break;
  }
  return result;
}

unsigned char *std::basic_regex<char,std::regex_traits<char>>::__parse_character_class_escape<std::__wrap_iter<char const*>>(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  unint64_t v3 = a2;
  if (a2 != a3)
  {
    switch(*a2)
    {
      case 'D':
        int v5 = operator new(0xB0uLL);
        std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v5, a1, *(void *)(*(void *)(a1 + 56) + 8), 1, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
        goto LABEL_7;
      case 'S':
        int v5 = operator new(0xB0uLL);
        std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v5, a1, *(void *)(*(void *)(a1 + 56) + 8), 1, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
        goto LABEL_11;
      case 'W':
        char v6 = operator new(0xB0uLL);
        std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v6, a1, *(void *)(*(void *)(a1 + 56) + 8), 1, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
        goto LABEL_9;
      case 'd':
        int v5 = operator new(0xB0uLL);
        std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v5, a1, *(void *)(*(void *)(a1 + 56) + 8), 0, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
LABEL_7:
        *(void *)(*(void *)(a1 + 56) + 8) = v5;
        *(void *)(a1 + 56) = v5;
        int v7 = v5[40] | 0x400;
        goto LABEL_12;
      case 's':
        int v5 = operator new(0xB0uLL);
        std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v5, a1, *(void *)(*(void *)(a1 + 56) + 8), 0, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
LABEL_11:
        *(void *)(*(void *)(a1 + 56) + 8) = v5;
        *(void *)(a1 + 56) = v5;
        int v7 = v5[40] | 0x4000;
LABEL_12:
        v5[40] = v7;
        goto LABEL_13;
      case 'w':
        char v6 = operator new(0xB0uLL);
        std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v6, a1, *(void *)(*(void *)(a1 + 56) + 8), 0, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
LABEL_9:
        *(void *)(*(void *)(a1 + 56) + 8) = v6;
        *(void *)(a1 + 56) = v6;
        v6[40] |= 0x500u;
        std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)v6, 95);
LABEL_13:
        ++v3;
        break;
      default:
        return v3;
    }
  }
  return v3;
}

void sub_1C580E0EC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1C580E100(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1C580E114(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1C580E128(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1C580E13C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1C580E150(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t *a4)
{
  long long v4 = a2;
  if (a2 == a3) {
    return v4;
  }
  uint64_t v5 = *a2;
  std::basic_regex<char>::value_type v6 = v5;
  switch((char)v5)
  {
    case '0':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 0;
        return v4 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 0);
        return v4 + 1;
      }
    case 'c':
      if (v4 + 1 == a3 || (char)v4[1] < 65) {
        goto LABEL_85;
      }
      unsigned int v8 = v4[1];
      if (v8 >= 0x5B && (v8 - 97) > 0x19u) {
        goto LABEL_85;
      }
      std::basic_regex<char>::value_type v10 = v8 & 0x1F;
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(unsigned char *)a4 = v10;
        *((unsigned char *)a4 + 1) = 0;
        return v4 + 2;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v10);
        return v4 + 2;
      }
    case 'f':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 12;
        return v4 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 12);
        return v4 + 1;
      }
    case 'n':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 10;
        return v4 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 10);
        return v4 + 1;
      }
    case 'r':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 13;
        return v4 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 13);
        return v4 + 1;
      }
    case 't':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 9;
        return v4 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 9);
        return v4 + 1;
      }
    case 'u':
      if (v4 + 1 != a3)
      {
        int v11 = v4[1];
        if ((v11 & 0xF8) == 0x30 || (v11 & 0xFE) == 0x38 || (v11 | 0x20u) - 97 < 6)
        {
          v4 += 2;
          if (v4 != a3)
          {
            int v12 = *v4;
            if ((v12 & 0xF8) == 0x30 || (v12 & 0xFE) == 0x38 || (v12 | 0x20u) - 97 < 6) {
              goto LABEL_42;
            }
          }
        }
      }
      goto LABEL_85;
    case 'v':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 11;
        return v4 + 1;
      }
      else
      {
        std::basic_regex<char>::value_type v6 = 11;
LABEL_68:
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v6);
        return v4 + 1;
      }
    case 'x':
LABEL_42:
      if (v4 + 1 == a3) {
        goto LABEL_85;
      }
      unsigned __int8 v13 = v4[1];
      char v14 = -48;
      if ((v13 & 0xF8) == 0x30 || (v13 & 0xFE) == 0x38) {
        goto LABEL_47;
      }
      v13 |= 0x20u;
      if ((v13 - 97) >= 6u) {
        goto LABEL_85;
      }
      char v14 = -87;
LABEL_47:
      if (v4 + 2 == a3) {
        goto LABEL_85;
      }
      unsigned __int8 v15 = v4[2];
      char v16 = -48;
      if ((v15 & 0xF8) != 0x30 && (v15 & 0xFE) != 0x38)
      {
        v15 |= 0x20u;
        if ((v15 - 97) >= 6u) {
LABEL_85:
        }
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
        char v16 = -87;
      }
      std::basic_regex<char>::value_type v17 = v15 + 16 * (v13 + v14) + v16;
      if (!a4)
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v17);
        v4 += 3;
        return v4;
      }
      if (*((char *)a4 + 23) < 0)
      {
        a4[1] = 1;
        a4 = (uint64_t *)*a4;
      }
      else
      {
        *((unsigned char *)a4 + 23) = 1;
      }
      *(unsigned char *)a4 = v17;
      *((unsigned char *)a4 + 1) = 0;
      xpc_object_t result = v4 + 3;
      break;
    default:
      if ((char)v5 == 95 || ((char)v5 & 0x80000000) == 0 && (a1->__traits_.__ct_->__tab_[v5] & 0x500) != 0) {
        goto LABEL_85;
      }
      if (!a4) {
        goto LABEL_68;
      }
      if (*((char *)a4 + 23) < 0)
      {
        a4[1] = 1;
        a4 = (uint64_t *)*a4;
      }
      else
      {
        *((unsigned char *)a4 + 23) = 1;
      }
      *(unsigned char *)a4 = v5;
      *((unsigned char *)a4 + 1) = 0;
      return v4 + 1;
  }
  return result;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_expression_term<std::__wrap_iter<char const*>>(uint64_t a1, char *a2, char *a3, uint64_t a4)
{
  long long v4 = a2;
  int64_t v5 = a2 - a3;
  if (a2 == a3) {
    return a2;
  }
  int v6 = *a2;
  int v7 = a2;
  if (v6 == 93) {
    return v7;
  }
  unsigned int v8 = (char *)a4;
  int v11 = 0;
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v42 = 0;
  if (a2 + 1 == a3 || v6 != 91)
  {
LABEL_36:
    int v27 = *(_DWORD *)(a1 + 24) & 0x1F0;
    goto LABEL_39;
  }
  int v12 = a2[1];
  if (v12 != 46)
  {
    if (v12 == 58)
    {
      uint64_t v14 = (uint64_t)(a2 + 2);
      if (a3 - (v4 + 2) < 2) {
        goto LABEL_91;
      }
      uint64_t v15 = 0;
      int64_t v16 = v5 + 4;
      std::basic_regex<char>::value_type v17 = (unsigned __int8 *)v4;
      uint64_t v18 = v16;
      if (v4[2] == 58) {
        goto LABEL_15;
      }
      do
      {
        do
        {
          if (!v18) {
            goto LABEL_91;
          }
          std::basic_regex<char>::value_type v17 = (unsigned __int8 *)&v4[++v15];
          uint64_t v18 = v16 + v15;
        }
        while (v4[v15 + 2] != 58);
LABEL_15:
        ;
      }
      while (v17[3] != 93);
      uint64_t v19 = &v4[v15 + 2];
      if (v19 == a3) {
LABEL_91:
      }
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
      int v20 = std::regex_traits<char>::__lookup_classname<std::__wrap_iter<char const*>>(a1, v14, v19, *(_DWORD *)(a1 + 24) & 1);
      if (!v20) {
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)2>();
      }
      char v13 = 0;
      *((_DWORD *)v8 + 40) |= v20;
      unsigned int v8 = &v4[v15 + 4];
      int v7 = v4;
      if (SHIBYTE(v42) < 0) {
        goto LABEL_70;
      }
      goto LABEL_71;
    }
    if (v12 == 61)
    {
      unsigned int v8 = std::basic_regex<char,std::regex_traits<char>>::__parse_equivalence_class<std::__wrap_iter<char const*>>(a1, a2 + 2, a3, a4);
      char v13 = 0;
      int v7 = v4;
      if ((SHIBYTE(v42) & 0x80000000) == 0) {
        goto LABEL_71;
      }
      goto LABEL_70;
    }
    int v11 = 0;
    goto LABEL_36;
  }
  BOOL v21 = a2 + 2;
  if (a3 - (v4 + 2) < 2) {
    goto LABEL_92;
  }
  std::basic_regex<char> v22 = (unsigned __int8 *)(v4 + 2);
  BOOL v23 = (unsigned __int8 *)(v4 + 3);
  if (*v21 == 46) {
    goto LABEL_24;
  }
  do
  {
    do
    {
      if (a3 - 4 == v4) {
        goto LABEL_92;
      }
      ++v4;
      std::basic_regex<char> v22 = v23;
      int v24 = *v23++;
    }
    while (v24 != 46);
LABEL_24:
    ;
  }
  while (*v23 != 93);
  if (v22 == (unsigned __int8 *)a3) {
LABEL_92:
  }
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
  std::regex_traits<char>::__lookup_collatename<std::__wrap_iter<char const*>>(a1, (uint64_t)v21, v4 + 2, (uint64_t)&v43);
  if (SHIBYTE(v42) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v42 = v44;
  *(_OWORD *)std::string __p = v43;
  size_t v25 = (char *)HIBYTE(v44);
  int v11 = SHIBYTE(v44);
  uint64_t v26 = *((void *)&v43 + 1);
  if (v44 < 0) {
    size_t v25 = (char *)__p[1];
  }
  if ((unint64_t)(v25 - 1) >= 2) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
  }
  long long v4 = (char *)(v22 + 2);
  int v27 = *(_DWORD *)(a1 + 24) & 0x1F0;
  if (v44 >= 0) {
    uint64_t v26 = HIBYTE(v44);
  }
  if (v26)
  {
    if (v4 == a3) {
      goto LABEL_52;
    }
    goto LABEL_51;
  }
LABEL_39:
  if ((v27 | 0x40) != 0x40)
  {
    LOBYTE(v28) = *v4;
LABEL_44:
    if (v11 < 0)
    {
      unint64_t v31 = __p[0];
      __p[1] = (void *)1;
      *(unsigned char *)__p[0] = v28;
      v31[1] = 0;
      if (++v4 == a3) {
        goto LABEL_52;
      }
    }
    else
    {
      HIBYTE(v42) = 1;
      LOWORD(__p[0]) = v28;
      if (++v4 == a3) {
        goto LABEL_52;
      }
    }
    goto LABEL_51;
  }
  int v28 = *v4;
  if (v28 != 92) {
    goto LABEL_44;
  }
  uint64_t v29 = v4 + 1;
  if (v27) {
    int v30 = std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, v29, a3, (uint64_t *)__p);
  }
  else {
    int v30 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, (unsigned __int8 *)v29, (unsigned __int8 *)a3, (uint64_t)__p, (uint64_t)v8);
  }
  long long v4 = v30;
  if (v30 == a3)
  {
LABEL_52:
    if (SHIBYTE(v42) < 0)
    {
      if (!__p[1]) {
        goto LABEL_69;
      }
      if (__p[1] != (void *)1)
      {
        unint64_t v33 = (void **)__p[0];
LABEL_68:
        std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:ne180100]((uint64_t)v8, *(char *)v33, *((char *)v33 + 1));
LABEL_69:
        char v13 = 1;
        int v7 = v4;
        if ((SHIBYTE(v42) & 0x80000000) == 0) {
          goto LABEL_71;
        }
        goto LABEL_70;
      }
      unint64_t v33 = (void **)__p[0];
    }
    else
    {
      if (!HIBYTE(v42)) {
        goto LABEL_69;
      }
      unint64_t v33 = __p;
      if (HIBYTE(v42) != 1) {
        goto LABEL_68;
      }
    }
    std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)v8, *(char *)v33);
    goto LABEL_69;
  }
LABEL_51:
  int v32 = *v4;
  if (v32 == 93) {
    goto LABEL_52;
  }
  uint64_t v34 = v4 + 1;
  if (v4 + 1 == a3 || v32 != 45 || *v34 == 93) {
    goto LABEL_52;
  }
  long long v43 = 0uLL;
  int64_t v44 = 0;
  int v7 = v4 + 2;
  if (v4 + 2 == a3 || *v34 != 91 || *v7 != 46)
  {
    if ((v27 | 0x40) == 0x40)
    {
      LODWORD(v34) = *v34;
      if (v34 == 92)
      {
        if (v27) {
          uint64_t v35 = std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, v4 + 2, a3, (uint64_t *)&v43);
        }
        else {
          uint64_t v35 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, (unsigned __int8 *)v4 + 2, (unsigned __int8 *)a3, (uint64_t)&v43, (uint64_t)v8);
        }
        goto LABEL_81;
      }
    }
    else
    {
      LOBYTE(v34) = *v34;
    }
    HIBYTE(v44) = 1;
    LOWORD(v43) = v34;
    goto LABEL_82;
  }
  uint64_t v35 = std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<std::__wrap_iter<char const*>>(a1, v4 + 3, a3, (uint64_t)&v43);
LABEL_81:
  int v7 = v35;
LABEL_82:
  *(_OWORD *)std::string v39 = *(_OWORD *)__p;
  uint64_t v40 = v42;
  __p[1] = 0;
  uint64_t v42 = 0;
  __p[0] = 0;
  *(_OWORD *)uint64_t v37 = v43;
  uint64_t v38 = v44;
  long long v43 = 0uLL;
  int64_t v44 = 0;
  std::__bracket_expression<char,std::regex_traits<char>>::__add_range[abi:ne180100]((uint64_t)v8, (char *)v39, (uint64_t)v37);
  if (SHIBYTE(v38) < 0)
  {
    operator delete(v37[0]);
    if ((SHIBYTE(v40) & 0x80000000) == 0)
    {
LABEL_84:
      if ((SHIBYTE(v44) & 0x80000000) == 0) {
        goto LABEL_85;
      }
LABEL_89:
      operator delete((void *)v43);
      char v13 = 1;
      if (SHIBYTE(v42) < 0) {
        goto LABEL_70;
      }
      goto LABEL_71;
    }
  }
  else if ((SHIBYTE(v40) & 0x80000000) == 0)
  {
    goto LABEL_84;
  }
  operator delete(v39[0]);
  if (SHIBYTE(v44) < 0) {
    goto LABEL_89;
  }
LABEL_85:
  char v13 = 1;
  if (SHIBYTE(v42) < 0) {
LABEL_70:
  }
    operator delete(__p[0]);
LABEL_71:
  if (v13) {
    return v7;
  }
  return v8;
}

void sub_1C580ED58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (*(char *)(v28 - 49) < 0)
  {
    operator delete(*(void **)(v28 - 72));
    if (a28 < 0)
    {
LABEL_5:
      operator delete(__p);
      _Unwind_Resume(a1);
    }
  }
  else if (a28 < 0)
  {
    goto LABEL_5;
  }
  _Unwind_Resume(a1);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_equivalence_class<std::__wrap_iter<char const*>>(uint64_t a1, char *a2, char *a3, uint64_t a4)
{
  if (a3 - a2 < 2 || a3 - 1 == a2) {
    goto LABEL_39;
  }
  int v6 = a3 - 2;
  int v7 = a2;
  unsigned int v8 = a2;
  unsigned int v9 = a2 + 1;
  if (*a2 != 61) {
    goto LABEL_5;
  }
LABEL_4:
  if (*v9 != 93)
  {
LABEL_5:
    while (a2 != v6)
    {
      ++v7;
      --v6;
      unsigned int v8 = v9;
      int v10 = *v9++;
      if (v10 == 61) {
        goto LABEL_4;
      }
    }
LABEL_39:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
  }
  if (v8 == a3) {
    goto LABEL_39;
  }
  memset(v20, 170, sizeof(v20));
  std::regex_traits<char>::__lookup_collatename<std::__wrap_iter<char const*>>(a1, (uint64_t)a2, v7, (uint64_t)v20);
  if ((SHIBYTE(v20[2]) & 0x80000000) == 0)
  {
    int v11 = (char *)HIBYTE(v20[2]);
    if (HIBYTE(v20[2]))
    {
      memset(__p, 170, sizeof(__p));
      int v12 = v20;
      goto LABEL_14;
    }
LABEL_40:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
  }
  int v11 = (char *)v20[1];
  if (!v20[1]) {
    goto LABEL_40;
  }
  memset(__p, 170, sizeof(__p));
  int v12 = (void **)v20[0];
LABEL_14:
  std::regex_traits<char>::__transform_primary<std::__wrap_iter<char *>>(a1, (uint64_t)v12, &v11[(void)v12], (unsigned char **)__p);
  if (SHIBYTE(__p[2]) < 0)
  {
    if (__p[1])
    {
LABEL_16:
      unint64_t v13 = *(void *)(a4 + 144);
      if (v13 >= *(void *)(a4 + 152))
      {
        *(void *)(a4 + 144) = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)(a4 + 136), (uint64_t)__p);
        if (SHIBYTE(__p[2]) < 0) {
          goto LABEL_37;
        }
      }
      else
      {
        if ((HIBYTE(__p[2]) & 0x80) != 0)
        {
          std::string::__init_copy_ctor_external(*(std::string **)(a4 + 144), (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
        }
        else
        {
          long long v14 = *(_OWORD *)__p;
          *(void **)(v13 + 16) = __p[2];
          *(_OWORD *)unint64_t v13 = v14;
        }
        *(void *)(a4 + 144) = v13 + 24;
        *(void *)(a4 + 144) = v13 + 24;
        if (SHIBYTE(__p[2]) < 0) {
          goto LABEL_37;
        }
      }
      goto LABEL_33;
    }
  }
  else if (HIBYTE(__p[2]))
  {
    goto LABEL_16;
  }
  uint64_t v15 = (void *)HIBYTE(v20[2]);
  if (SHIBYTE(v20[2]) < 0) {
    uint64_t v15 = v20[1];
  }
  if (v15 == (void *)2)
  {
    std::basic_regex<char>::value_type v17 = v20;
    if (SHIBYTE(v20[2]) < 0) {
      std::basic_regex<char>::value_type v17 = (void **)v20[0];
    }
    std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:ne180100](a4, *(char *)v17, *((char *)v17 + 1));
  }
  else
  {
    if (v15 != (void *)1) {
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
    }
    int64_t v16 = v20;
    if (SHIBYTE(v20[2]) < 0) {
      int64_t v16 = (void **)v20[0];
    }
    std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](a4, *(char *)v16);
  }
  if (SHIBYTE(__p[2]) < 0)
  {
LABEL_37:
    operator delete(__p[0]);
    if (SHIBYTE(v20[2]) < 0) {
      goto LABEL_38;
    }
    return v7 + 2;
  }
LABEL_33:
  if ((SHIBYTE(v20[2]) & 0x80000000) == 0) {
    return v7 + 2;
  }
LABEL_38:
  operator delete(v20[0]);
  return v7 + 2;
}

void sub_1C580F060(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  *(void *)(v20 + 144) = v21;
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<std::__wrap_iter<char const*>>(uint64_t a1, char *a2, char *a3, uint64_t a4)
{
  if (a3 - a2 < 2 || a3 - 1 == a2) {
    goto LABEL_15;
  }
  int64_t v5 = a3 - 2;
  int v6 = a2;
  int v7 = a2;
  unsigned int v8 = a2 + 1;
  if (*a2 != 46) {
    goto LABEL_5;
  }
LABEL_4:
  if (*v8 != 93)
  {
LABEL_5:
    while (a2 != v5)
    {
      ++v6;
      --v5;
      int v7 = v8;
      int v9 = *v8++;
      if (v9 == 46) {
        goto LABEL_4;
      }
    }
LABEL_15:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
  }
  if (v7 == a3) {
    goto LABEL_15;
  }
  std::regex_traits<char>::__lookup_collatename<std::__wrap_iter<char const*>>(a1, (uint64_t)a2, v6, (uint64_t)&v13);
  if (*(char *)(a4 + 23) < 0) {
    operator delete(*(void **)a4);
  }
  *(_OWORD *)a4 = v13;
  unint64_t v10 = v14;
  *(void *)(a4 + 16) = v14;
  unint64_t v11 = HIBYTE(v10);
  if ((v11 & 0x80u) != 0) {
    unint64_t v11 = *(void *)(a4 + 8);
  }
  if (v11 - 1 >= 2) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
  }
  return v6 + 2;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t a4, uint64_t a5)
{
  if (a2 == a3) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  }
  switch(*a2)
  {
    case 'D':
      *(_DWORD *)(a5 + 164) |= 0x400u;
      xpc_object_t result = a2 + 1;
      break;
    case 'E':
    case 'F':
    case 'G':
    case 'H':
    case 'I':
    case 'J':
    case 'K':
    case 'L':
    case 'M':
    case 'N':
    case 'O':
    case 'P':
    case 'Q':
    case 'R':
    case 'T':
    case 'U':
    case 'V':
    case 'X':
    case 'Y':
    case 'Z':
    case '[':
    case '\\':
    case ']':
    case '^':
    case '_':
    case 'a':
    case 'c':
    case 'e':
    case 'f':
    case 'g':
    case 'h':
    case 'i':
    case 'j':
    case 'k':
    case 'l':
    case 'm':
    case 'n':
    case 'o':
    case 'p':
    case 'q':
    case 'r':
    case 't':
    case 'u':
    case 'v':
      goto LABEL_8;
    case 'S':
      *(_DWORD *)(a5 + 164) |= 0x4000u;
      xpc_object_t result = a2 + 1;
      break;
    case 'W':
      *(_DWORD *)(a5 + 164) |= 0x500u;
      std::__bracket_expression<char,std::regex_traits<char>>::__add_neg_char[abi:ne180100](a5, 95);
      xpc_object_t result = a2 + 1;
      break;
    case 'b':
      if (*(char *)(a4 + 23) < 0)
      {
        *(void *)(a4 + 8) = 1;
        a4 = *(void *)a4;
      }
      else
      {
        *(unsigned char *)(a4 + 23) = 1;
      }
      *(_WORD *)a4 = 8;
      xpc_object_t result = a2 + 1;
      break;
    case 'd':
      *(_DWORD *)(a5 + 160) |= 0x400u;
      xpc_object_t result = a2 + 1;
      break;
    case 's':
      *(_DWORD *)(a5 + 160) |= 0x4000u;
      xpc_object_t result = a2 + 1;
      break;
    case 'w':
      *(_DWORD *)(a5 + 160) |= 0x500u;
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](a5, 95);
      xpc_object_t result = a2 + 1;
      break;
    default:
      if (*a2)
      {
LABEL_8:
        xpc_object_t result = std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<std::__wrap_iter<char const*>>(a1, a2, a3, (uint64_t *)a4);
      }
      else
      {
        if (*(char *)(a4 + 23) < 0)
        {
          *(void *)(a4 + 8) = 1;
          a4 = *(void *)a4;
        }
        else
        {
          *(unsigned char *)(a4 + 23) = 1;
        }
        *(unsigned char *)a4 = 0;
        *(unsigned char *)(a4 + 1) = 0;
        xpc_object_t result = a2 + 1;
      }
      break;
  }
  return result;
}

std::basic_regex<char>::value_type *std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, std::basic_regex<char>::value_type *a2, std::basic_regex<char>::value_type *a3, uint64_t *a4)
{
  if (a2 == a3) {
LABEL_70:
  }
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  std::basic_regex<char>::value_type v5 = *a2;
  switch(*a2)
  {
    case '""':
    case '/':
    case '\\':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(unsigned char *)a4 = v5;
        *((unsigned char *)a4 + 1) = 0;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v5);
        return a2 + 1;
      }
    case 'a':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 7;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 7);
        return a2 + 1;
      }
    case 'b':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 8;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 8);
        return a2 + 1;
      }
    case 'f':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 12;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 12);
        return a2 + 1;
      }
    case 'n':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 10;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 10);
        return a2 + 1;
      }
    case 'r':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 13;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 13);
        return a2 + 1;
      }
    case 't':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 9;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 9);
        return a2 + 1;
      }
    case 'v':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 11;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 11);
        return a2 + 1;
      }
    default:
      if ((v5 & 0xF8) != 0x30) {
        goto LABEL_70;
      }
      std::basic_regex<char>::value_type v7 = *a2 - 48;
      unsigned int v8 = a2 + 1;
      if (a2 + 1 == a3)
      {
        unsigned int v8 = a3;
LABEL_42:
        if (a4) {
          goto LABEL_43;
        }
LABEL_69:
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v7);
        return v8;
      }
      if ((*v8 & 0xF8) != 0x30) {
        goto LABEL_42;
      }
      std::basic_regex<char>::value_type v7 = *v8 + 8 * v7 - 48;
      if (a2 + 2 == a3)
      {
        unsigned int v8 = a3;
        if (a4) {
          goto LABEL_43;
        }
        goto LABEL_69;
      }
      std::basic_regex<char>::value_type v9 = a2[2];
      int v10 = v9 & 0xF8;
      std::basic_regex<char>::value_type v11 = v9 + 8 * v7 - 48;
      if (v10 == 48) {
        unsigned int v8 = a2 + 3;
      }
      else {
        unsigned int v8 = a2 + 2;
      }
      if (v10 == 48) {
        std::basic_regex<char>::value_type v7 = v11;
      }
      if (!a4) {
        goto LABEL_69;
      }
LABEL_43:
      if (*((char *)a4 + 23) < 0)
      {
        a4[1] = 1;
        a4 = (uint64_t *)*a4;
      }
      else
      {
        *((unsigned char *)a4 + 23) = 1;
      }
      *(unsigned char *)a4 = v7;
      *((unsigned char *)a4 + 1) = 0;
      return v8;
  }
}

void std::regex_traits<char>::__lookup_collatename<std::__wrap_iter<char const*>>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v5 = (unint64_t)&a3[-a2];
  memset(__s, 170, sizeof(__s));
  if ((unint64_t)&a3[-a2] >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v5 <= 0x16)
  {
    std::string::value_type __s[23] = (_BYTE)a3 - a2;
    std::basic_regex<char>::value_type v9 = __s;
    if ((char *)a2 != a3) {
      goto LABEL_4;
    }
LABEL_13:
    int v10 = v9;
    goto LABEL_16;
  }
  uint64_t v16 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v5 | 7) != 0x17) {
    uint64_t v16 = v5 | 7;
  }
  uint64_t v17 = v16 + 1;
  std::basic_regex<char>::value_type v9 = (char *)operator new(v16 + 1);
  *(void *)&__s[8] = v5;
  *(void *)&__s[16] = v17 | 0x8000000000000000;
  *(void *)__s = v9;
  if ((char *)a2 == a3) {
    goto LABEL_13;
  }
LABEL_4:
  if (v5 < 0x20 || (unint64_t)&v9[-a2] < 0x20)
  {
    int v10 = v9;
    std::basic_regex<char>::value_type v11 = (char *)a2;
    do
    {
LABEL_15:
      char v18 = *v11++;
      *v10++ = v18;
    }
    while (v11 != a3);
    goto LABEL_16;
  }
  int v10 = &v9[v5 & 0xFFFFFFFFFFFFFFE0];
  std::basic_regex<char>::value_type v11 = (char *)(a2 + (v5 & 0xFFFFFFFFFFFFFFE0));
  int v12 = (long long *)(a2 + 16);
  long long v13 = v9 + 16;
  unint64_t v14 = v5 & 0xFFFFFFFFFFFFFFE0;
  do
  {
    long long v15 = *v12;
    *(v13 - 1) = *(v12 - 1);
    *long long v13 = v15;
    v12 += 2;
    v13 += 2;
    v14 -= 32;
  }
  while (v14);
  if (v5 != (v5 & 0xFFFFFFFFFFFFFFE0)) {
    goto LABEL_15;
  }
LABEL_16:
  *int v10 = 0;
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  if (__s[23] < 0)
  {
    uint64_t v19 = *(char **)__s;
    if (!*(void *)&__s[8]) {
      goto LABEL_29;
    }
  }
  else
  {
    if (!__s[23]) {
      return;
    }
    uint64_t v19 = __s;
  }
  std::__get_collation_name(&v26, v19);
  *(_OWORD *)a4 = *(_OWORD *)&v26.__r_.__value_.__l.__data_;
  unint64_t v20 = v26.__r_.__value_.__r.__words[2];
  *(void *)(a4 + 16) = *((void *)&v26.__r_.__value_.__l + 2);
  unint64_t v21 = HIBYTE(v20);
  if ((v21 & 0x80u) != 0) {
    unint64_t v21 = *(void *)(a4 + 8);
  }
  if (v21)
  {
LABEL_23:
    if ((__s[23] & 0x80000000) == 0) {
      return;
    }
    uint64_t v19 = *(char **)__s;
LABEL_29:
    operator delete(v19);
    return;
  }
  if (__s[23] < 0)
  {
    uint64_t v19 = *(char **)__s;
    if (*(void *)&__s[8] >= 3uLL) {
      goto LABEL_29;
    }
    goto LABEL_31;
  }
  if (__s[23] < 3u)
  {
LABEL_31:
    (*(void (**)(std::string *__return_ptr))(**(void **)(a1 + 16) + 32))(&v26);
    if (*(char *)(a4 + 23) < 0) {
      operator delete(*(void **)a4);
    }
    *(std::string *)a4 = v26;
    if (*(char *)(a4 + 23) < 0)
    {
      uint64_t v23 = *(void *)(a4 + 8);
      if (v23 == 1 || v23 == 12)
      {
        if (__s != (char *)a4)
        {
          if (__s[23] >= 0) {
            int v24 = __s;
          }
          else {
            int v24 = *(char **)__s;
          }
          if (__s[23] >= 0) {
            size_t v25 = __s[23];
          }
          else {
            size_t v25 = *(void *)&__s[8];
          }
          std::string::__assign_no_alias<false>((void **)a4, v24, v25);
        }
      }
      else
      {
        **(unsigned char **)a4 = 0;
        *(void *)(a4 + 8) = 0;
      }
    }
    else
    {
      int v22 = *(unsigned __int8 *)(a4 + 23);
      if (v22 == 1 || v22 == 12)
      {
        if (__s != (char *)a4)
        {
          if (__s[23] < 0)
          {
            std::string::__assign_no_alias<true>((void *)a4, *(void **)__s, *(size_t *)&__s[8]);
          }
          else
          {
            *(_OWORD *)a4 = *(_OWORD *)__s;
            *(void *)(a4 + 16) = *(void *)&__s[16];
          }
        }
      }
      else
      {
        *(unsigned char *)a4 = 0;
        *(unsigned char *)(a4 + 23) = 0;
      }
    }
    goto LABEL_23;
  }
}

void sub_1C580FC94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (*(char *)(v17 + 23) < 0)
  {
    operator delete(*(void **)v17);
    if ((a17 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a17 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::regex_traits<char>::__lookup_classname<std::__wrap_iter<char const*>>(uint64_t a1, uint64_t a2, char *a3, BOOL a4)
{
  unint64_t v4 = (unint64_t)&a3[-a2];
  memset(__p, 170, sizeof(__p));
  if ((unint64_t)&a3[-a2] >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v4 > 0x16)
  {
    uint64_t v16 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v16 = v4 | 7;
    }
    uint64_t v17 = v16 + 1;
    std::basic_regex<char>::value_type v9 = operator new(v16 + 1);
    __p[1] = (void *)v4;
    __p[2] = (void *)(v17 | 0x8000000000000000);
    __p[0] = v9;
    if ((char *)a2 != a3) {
      goto LABEL_4;
    }
LABEL_13:
    int v10 = v9;
    goto LABEL_16;
  }
  HIBYTE(__p[2]) = (_BYTE)a3 - a2;
  std::basic_regex<char>::value_type v9 = __p;
  if ((char *)a2 == a3) {
    goto LABEL_13;
  }
LABEL_4:
  if (v4 < 0x20 || (unint64_t)v9 - a2 < 0x20)
  {
    int v10 = v9;
    std::basic_regex<char>::value_type v11 = (char *)a2;
  }
  else
  {
    int v10 = (char *)v9 + (v4 & 0xFFFFFFFFFFFFFFE0);
    std::basic_regex<char>::value_type v11 = (char *)(a2 + (v4 & 0xFFFFFFFFFFFFFFE0));
    int v12 = (long long *)(a2 + 16);
    long long v13 = v9 + 1;
    unint64_t v14 = v4 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      long long v15 = *v12;
      *(v13 - 1) = *(v12 - 1);
      *long long v13 = v15;
      v12 += 2;
      v13 += 2;
      v14 -= 32;
    }
    while (v14);
    if (v4 == (v4 & 0xFFFFFFFFFFFFFFE0)) {
      goto LABEL_16;
    }
  }
  do
  {
    char v18 = *v11++;
    *v10++ = v18;
  }
  while (v11 != a3);
LABEL_16:
  *int v10 = 0;
  uint64_t v19 = (char *)HIBYTE(__p[2]);
  if (SHIBYTE(__p[2]) >= 0) {
    unint64_t v20 = __p;
  }
  else {
    unint64_t v20 = (void **)__p[0];
  }
  if (SHIBYTE(__p[2]) < 0) {
    uint64_t v19 = (char *)__p[1];
  }
  (*(void (**)(void, void **, char *))(**(void **)(a1 + 8) + 48))(*(void *)(a1 + 8), v20, &v19[(void)v20]);
  if (SHIBYTE(__p[2]) >= 0) {
    unint64_t v21 = __p;
  }
  else {
    unint64_t v21 = (void **)__p[0];
  }
  uint64_t classname = std::__get_classname((const char *)v21, a4);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  return classname;
}

void sub_1C580FE78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_nondupl_RE<std::__wrap_iter<char const*>>(uint64_t a1, uint64_t a2, char *a3)
{
  int v6 = std::basic_regex<char,std::regex_traits<char>>::__parse_one_char_or_coll_elem_RE<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, (char *)a2, a3);
  if ((char *)a2 != v6 || (char *)a2 == a3 || (char *)(a2 + 1) == a3 || *(unsigned char *)a2 != 92) {
    return v6;
  }
  int v8 = *(unsigned __int8 *)(a2 + 1);
  if (v8 == 40)
  {
    std::basic_regex<char>::value_type v9 = (std::basic_regex<char> *)(a2 + 2);
    if ((*(unsigned char *)(a1 + 24) & 2) != 0)
    {
      int v11 = *(_DWORD *)(a1 + 28);
    }
    else
    {
      int v10 = operator new(0x18uLL);
      int v11 = *(_DWORD *)(a1 + 28) + 1;
      *(_DWORD *)(a1 + 28) = v11;
      uint64_t v12 = *(void *)(a1 + 56);
      uint64_t v13 = *(void *)(v12 + 8);
      *int v10 = &unk_1F20F4DC0;
      v10[1] = v13;
      *((_DWORD *)v10 + 4) = v11;
      *(void *)(v12 + 8) = v10;
      *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
    }
    do
    {
      if (v9 == (std::basic_regex<char> *)a3) {
        goto LABEL_23;
      }
      unint64_t v14 = v9;
      long long v15 = *(std::__owns_one_state<char> **)(a1 + 56);
      int v16 = *(_DWORD *)(a1 + 28);
      uint64_t v17 = (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_nondupl_RE<std::__wrap_iter<char const*>>(a1, v14, a3);
      if (v14 == v17) {
        break;
      }
      std::basic_regex<char>::value_type v9 = std::basic_regex<char,std::regex_traits<char>>::__parse_RE_dupl_symbol<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, v17, (std::basic_regex<char> *)a3, v15, (v16 + 1), (*(_DWORD *)(a1 + 28) + 1));
    }
    while (v14 != v9);
    if ((char *)&v14->__traits_.__loc_.__locale_ + 1 == a3
      || LOBYTE(v14->__traits_.__loc_.__locale_) != 92
      || BYTE1(v14->__traits_.__loc_.__locale_) != 41)
    {
LABEL_23:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
    }
    int v6 = (char *)v14 + 2 * (BYTE1(v14->__traits_.__loc_.__locale_) == 41);
    if ((*(unsigned char *)(a1 + 24) & 2) == 0)
    {
      char v18 = operator new(0x18uLL);
      uint64_t v19 = *(void *)(a1 + 56);
      uint64_t v20 = *(void *)(v19 + 8);
      void *v18 = &unk_1F20F4E08;
      v18[1] = v20;
      *((_DWORD *)v18 + 4) = v11;
      *(void *)(v19 + 8) = v18;
      *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
      return v6;
    }
    return v6;
  }
  if ((v8 & 0xF8) != 0x30 && (v8 & 0xFE) != 0x38 || (v8 - 49) > 8) {
    return v6;
  }
  if ((v8 - 48) > *(_DWORD *)(a1 + 28)) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
  }
  std::basic_regex<char,std::regex_traits<char>>::__push_back_ref((std::basic_regex<char> *)a1, v8 - 48);
  return (char *)(a2 + 2);
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_RE_dupl_symbol<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, std::basic_regex<char> *this, std::basic_regex<char> *a3, std::__owns_one_state<char> *a4, size_t __mexp_begin, size_t __mexp_end)
{
  if (this == a3) {
    return this;
  }
  int locale_low = LOBYTE(this->__traits_.__loc_.__locale_);
  if (locale_low == 42)
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_loop(a1, 0, 0xFFFFFFFFFFFFFFFFLL, a4, __mexp_begin, __mexp_end, 1);
    return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
  }
  std::basic_regex<char>::value_type v9 = (unsigned __int8 *)a3;
  if ((std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1) == a3
    || locale_low != 92
    || BYTE1(this->__traits_.__loc_.__locale_) != 123)
  {
    return this;
  }
  int v10 = (std::basic_regex<char> *)((char *)this + 2 * (BYTE1(this->__traits_.__loc_.__locale_) == 123));
  if (v10 == a3) {
    goto LABEL_45;
  }
  int v11 = LOBYTE(v10->__traits_.__loc_.__locale_);
  if ((v11 & 0xF8) != 0x30 && (v11 & 0xFE) != 0x38) {
    goto LABEL_45;
  }
  int v12 = v11 - 48;
  uint64_t v13 = (std::basic_regex<char> *)((char *)&v10->__traits_.__loc_.__locale_ + 1);
  if ((std::basic_regex<char> *)((char *)&v10->__traits_.__loc_.__locale_ + 1) == a3)
  {
LABEL_15:
    uint64_t v13 = a3;
  }
  else
  {
    while (1)
    {
      int v14 = LOBYTE(v13->__traits_.__loc_.__locale_);
      if ((v14 & 0xF8) != 0x30 && (v14 & 0xFE) != 0x38) {
        break;
      }
      if (v12 >= 214748364) {
        goto LABEL_45;
      }
      int v12 = v14 + 10 * v12 - 48;
      uint64_t v13 = (std::basic_regex<char> *)((char *)v13 + 1);
      if (v13 == a3) {
        goto LABEL_15;
      }
    }
  }
  if (v13 == v10) {
    goto LABEL_45;
  }
  if (v13 == a3) {
LABEL_46:
  }
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>();
  long long v15 = (std::basic_regex<char> *)((char *)&v13->__traits_.__loc_.__locale_ + 1);
  int v16 = LOBYTE(v13->__traits_.__loc_.__locale_);
  if (v16 != 44)
  {
    if (v15 != a3 && v16 == 92 && LOBYTE(v15->__traits_.__loc_.__locale_) == 125)
    {
      uint64_t v19 = (unsigned __int8 *)&v13->__traits_.__loc_.__locale_ + 2;
      std::basic_regex<char,std::regex_traits<char>>::__push_loop(a1, v12, v12, a4, __mexp_begin, __mexp_end, 1);
      return (std::basic_regex<char> *)v19;
    }
    goto LABEL_46;
  }
  if (v15 == a3) {
    goto LABEL_46;
  }
  int v17 = LOBYTE(v15->__traits_.__loc_.__locale_);
  if ((v17 & 0xF8) == 0x30 || (v17 & 0xFE) == 0x38)
  {
    int v18 = v17 - 48;
    long long v15 = (std::basic_regex<char> *)((char *)&v13->__traits_.__loc_.__locale_ + 2);
    if ((std::basic_regex<char> *)((char *)&v13->__traits_.__loc_.__locale_ + 2) == a3)
    {
LABEL_37:
      long long v15 = a3;
      goto LABEL_40;
    }
    while (1)
    {
      int v17 = LOBYTE(v15->__traits_.__loc_.__locale_);
      if ((v17 & 0xF8) != 0x30 && (v17 & 0xFE) != 0x38) {
        break;
      }
      if (v18 >= 214748364) {
        goto LABEL_45;
      }
      int v18 = v17 + 10 * v18 - 48;
      long long v15 = (std::basic_regex<char> *)((char *)v15 + 1);
      if (v15 == a3) {
        goto LABEL_37;
      }
    }
  }
  else
  {
    int v18 = -1;
  }
  if (v15 == a3)
  {
    uint64_t v20 = (unsigned __int8 *)v15;
    long long v15 = a3;
    std::basic_regex<char>::value_type v9 = v20;
  }
  else if ((std::basic_regex<char> *)((char *)&v15->__traits_.__loc_.__locale_ + 1) == a3 || v17 != 92)
  {
    std::basic_regex<char>::value_type v9 = (unsigned __int8 *)v15;
  }
  else
  {
    std::basic_regex<char>::value_type v9 = (unsigned __int8 *)v15 + 2 * (BYTE1(v15->__traits_.__loc_.__locale_) == 125);
  }
LABEL_40:
  if (v15 == (std::basic_regex<char> *)v9) {
    goto LABEL_46;
  }
  if (v18 != -1)
  {
    if (v18 >= v12)
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_loop(a1, v12, v18, a4, __mexp_begin, __mexp_end, 1);
      return (std::basic_regex<char> *)v9;
    }
LABEL_45:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>();
  }
  std::basic_regex<char,std::regex_traits<char>>::__push_loop(a1, v12, 0xFFFFFFFFFFFFFFFFLL, a4, __mexp_begin, __mexp_end, 1);
  return (std::basic_regex<char> *)v9;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_one_char_or_coll_elem_RE<std::__wrap_iter<char const*>>(std::basic_regex<char> *this, char *a2, char *a3)
{
  if (a2 != a3)
  {
    int v6 = a2 + 1;
    int v5 = *a2;
    if (a2 + 1 != a3 || v5 != 36)
    {
      if ((v5 - 46) > 0x2E || ((1 << (v5 - 46)) & 0x600000000001) == 0)
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(this, v5);
        return a2 + 1;
      }
      if (v6 != a3 && v5 == 92)
      {
        int v9 = *v6;
        if ((v9 - 36) <= 0x3A && ((1 << (v9 - 36)) & 0x580000000000441) != 0)
        {
          std::basic_regex<char,std::regex_traits<char>>::__push_char(this, v9);
          return a2 + 2;
        }
      }
      if (*a2 == 46)
      {
        int v10 = (std::__node<char> *)operator new(0x10uLL);
        std::vector<std::ssub_match>::pointer end = this->__end_;
        first = end->__first_;
        v10->__vftable = (std::__node<char>_vtbl *)&unk_1F20F4FB8;
        v10[1].__vftable = (std::__node<char>_vtbl *)first;
        end->__first_ = v10;
        this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
        return a2 + 1;
      }
    }
  }

  return std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<std::__wrap_iter<char const*>>((uint64_t)this, a2, a3);
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<std::__wrap_iter<char const*>>(uint64_t a1, std::basic_regex<char> *a2, std::basic_regex<char> *a3)
{
  int v6 = *(std::__owns_one_state<char> **)(a1 + 56);
  int v7 = *(_DWORD *)(a1 + 28);
  int v8 = std::basic_regex<char,std::regex_traits<char>>::__parse_ORD_CHAR_ERE<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, a2, a3);
  if (v8 == a2)
  {
    int v8 = (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_QUOTED_CHAR_ERE<std::__wrap_iter<char const*>>(a1, (std::basic_regex<char>::value_type *)a2, (std::basic_regex<char>::value_type *)a3);
    if (v8 == a2)
    {
      if (a2 == a3 || LOBYTE(a2->__traits_.__loc_.__locale_) != 46)
      {
        int v8 = (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<std::__wrap_iter<char const*>>(a1, (char *)a2, (char *)a3);
      }
      else
      {
        int v9 = operator new(0x10uLL);
        uint64_t v10 = *(void *)(a1 + 56);
        uint64_t v11 = *(void *)(v10 + 8);
        void *v9 = &unk_1F20F4FB8;
        v9[1] = v11;
        *(void *)(v10 + 8) = v9;
        *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
        int v8 = (std::basic_regex<char> *)((char *)&a2->__traits_.__loc_.__locale_ + 1);
      }
    }
  }
  if (v8 != a2 || v8 == a3)
  {
LABEL_23:
    if (v8 != a2) {
      goto LABEL_24;
    }
    return a2;
  }
  int locale_low = SLOBYTE(a2->__traits_.__loc_.__locale_);
  if (locale_low == 36)
  {
    uint64_t v13 = operator new(0x18uLL);
    BOOL v14 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
    uint64_t v15 = *(void *)(a1 + 56);
    v13[1] = *(void *)(v15 + 8);
    int v16 = &unk_1F20F4AA8;
    goto LABEL_14;
  }
  if (locale_low == 40)
  {
    if ((*(unsigned char *)(a1 + 24) & 2) != 0)
    {
      int v18 = *(_DWORD *)(a1 + 28);
    }
    else
    {
      int v17 = operator new(0x18uLL);
      int v18 = *(_DWORD *)(a1 + 28) + 1;
      *(_DWORD *)(a1 + 28) = v18;
      uint64_t v19 = *(void *)(a1 + 56);
      uint64_t v20 = *(void *)(v19 + 8);
      *int v17 = &unk_1F20F4DC0;
      v17[1] = v20;
      *((_DWORD *)v17 + 4) = v18;
      *(void *)(v19 + 8) = v17;
      *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
    }
    ++*(_DWORD *)(a1 + 36);
    unint64_t v21 = (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<std::__wrap_iter<char const*>>(a1, (char *)&a2->__traits_.__loc_.__locale_ + 1, a3);
    if (v21 == a3 || (int v22 = v21, LOBYTE(v21->__traits_.__loc_.__locale_) != 41)) {
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
    }
    if ((*(unsigned char *)(a1 + 24) & 2) == 0)
    {
      uint64_t v23 = operator new(0x18uLL);
      uint64_t v24 = *(void *)(a1 + 56);
      uint64_t v25 = *(void *)(v24 + 8);
      *uint64_t v23 = &unk_1F20F4E08;
      v23[1] = v25;
      *((_DWORD *)v23 + 4) = v18;
      *(void *)(v24 + 8) = v23;
      *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
    }
    --*(_DWORD *)(a1 + 36);
    int v8 = (std::basic_regex<char> *)((char *)&v22->__traits_.__loc_.__locale_ + 1);
    goto LABEL_23;
  }
  if (locale_low != 94) {
    return a2;
  }
  uint64_t v13 = operator new(0x18uLL);
  BOOL v14 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
  uint64_t v15 = *(void *)(a1 + 56);
  v13[1] = *(void *)(v15 + 8);
  int v16 = &unk_1F20F4A60;
LABEL_14:
  *uint64_t v13 = v16;
  *((unsigned char *)v13 + 16) = v14;
  *(void *)(v15 + 8) = v13;
  *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
  int v8 = (std::basic_regex<char> *)((char *)&a2->__traits_.__loc_.__locale_ + 1);
LABEL_24:
  size_t v26 = (*(_DWORD *)(a1 + 28) + 1);

  return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__wrap_iter<char const*>>(a1, v8, a3, v6, (v7 + 1), v26);
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_ORD_CHAR_ERE<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, std::basic_regex<char> *this, std::basic_regex<char> *a3)
{
  if (this == a3) {
    return this;
  }
  switch(LOBYTE(this->__traits_.__loc_.__locale_))
  {
    case '$':
    case '(':
    case '*':
    case '+':
    case '.':
    case '?':
    case '[':
    case '\\':
    case '^':
    case '{':
    case '|':
      return this;
    case ')':
      if (a1->__open_count_) {
        return this;
      }
      break;
    default:
      break;
  }
  std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, (std::basic_regex<char>::value_type)this->__traits_.__loc_.__locale_);
  return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
}

std::basic_regex<char>::value_type *std::basic_regex<char,std::regex_traits<char>>::__parse_QUOTED_CHAR_ERE<std::__wrap_iter<char const*>>(uint64_t a1, std::basic_regex<char>::value_type *a2, std::basic_regex<char>::value_type *a3)
{
  unint64_t v3 = a2;
  if (a2 == a3) {
    return v3;
  }
  unint64_t v4 = a2 + 1;
  if (v3 + 1 == a3 || *v3 != 92) {
    return v3;
  }
  std::basic_regex<char>::value_type v5 = *v4;
  switch(*v4)
  {
    case '$':
    case '(':
    case ')':
    case '*':
    case '+':
    case '.':
    case '?':
    case '[':
    case '\\':
    case '^':
    case '{':
    case '|':
    case '}':
      std::basic_regex<char,std::regex_traits<char>>::__push_char((std::basic_regex<char> *)a1, v5);
      v3 += 2;
      return v3;
    default:
      if ((*(_DWORD *)(a1 + 24) & 0x1F0) == 0x40)
      {
        xpc_object_t result = std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, v4, a3, 0);
      }
      else
      {
        BOOL v7 = std::basic_regex<char,std::regex_traits<char>>::__test_back_ref((std::basic_regex<char> *)a1, v5);
        uint64_t v8 = 2;
        if (!v7) {
          uint64_t v8 = 0;
        }
        xpc_object_t result = &v3[v8];
      }
      break;
  }
  return result;
}

uint64_t util::convert<BOOL>(const std::string *a1, BOOL *a2, int a3)
{
  if (SHIBYTE(a1->__r_.__value_.__r.__words[2]) < 0)
  {
    int v6 = (const char *)a1->__r_.__value_.__r.__words[0];
    if (strcasecmp(a1->__r_.__value_.__l.__data_, "false") && strcasecmp(v6, "off") && strcasecmp(v6, "no"))
    {
      if (!strcasecmp(v6, "true")
        || !strcasecmp(v6, "on")
        || !strcasecmp(v6, "yes")
        || !strcasecmp(v6, "full")
        || !strcasecmp(v6, "streaming")
        || !strcasecmp(v6, "lite"))
      {
        goto LABEL_28;
      }
      goto LABEL_21;
    }
LABEL_27:
    unint64_t v7 = 0;
LABEL_29:
    *a2 = v7 != 0;
    return 1;
  }
  if (!strcasecmp((const char *)a1, "false")
    || !strcasecmp((const char *)a1, "off")
    || !strcasecmp((const char *)a1, "no"))
  {
    goto LABEL_27;
  }
  if (!strcasecmp((const char *)a1, "true")) {
    goto LABEL_28;
  }
  if (!strcasecmp((const char *)a1, "on")) {
    goto LABEL_28;
  }
  if (!strcasecmp((const char *)a1, "yes")) {
    goto LABEL_28;
  }
  if (!strcasecmp((const char *)a1, "full")) {
    goto LABEL_28;
  }
  if (!strcasecmp((const char *)a1, "streaming")) {
    goto LABEL_28;
  }
  int v6 = (const char *)a1;
  if (!strcasecmp((const char *)a1, "lite")) {
    goto LABEL_28;
  }
LABEL_21:
  if (!strcasecmp(v6, "background"))
  {
LABEL_28:
    unint64_t v7 = 1;
    goto LABEL_29;
  }
  size_t __idx = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v7 = std::stol(a1, &__idx, a3);
  uint64_t v8 = 0;
  std::string::size_type size = HIBYTE(a1->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) != 0) {
    std::string::size_type size = a1->__r_.__value_.__l.__size_;
  }
  if (__idx == size && v7 < 2) {
    goto LABEL_29;
  }
  return v8;
}

uint64_t sub_1C5810DFC(void *a1)
{
  return 0;
}

void OBDManager::create(char *a1@<X0>, NSObject **a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X3>, OBDManager **a5@<X8>)
{
  uint64_t v28 = (OBDManager *)0xAAAAAAAAAAAAAAAALL;
  unint64_t v29 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v10 = (OBDManager *)operator new(0x80uLL);
  uint64_t v11 = *a2;
  dispatch_object_t object = v11;
  if (v11) {
    dispatch_retain(v11);
  }
  uint64_t v12 = a3[1];
  uint64_t v25 = *a3;
  size_t v26 = (std::__shared_weak_count *)v12;
  if (v12) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v13 = *a4;
  BOOL v14 = (std::__shared_weak_count *)a4[1];
  v24[0] = v13;
  v24[1] = v14;
  if (v14) {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  OBDManager::OBDManager((uint64_t)v10, a1, &object, &v25, v24);
  uint64_t v28 = v10;
  *(void *)std::string buf = v10;
  uint64_t v15 = (std::__shared_weak_count *)operator new(0x20uLL);
  v15->__shared_owners_ = 0;
  p_shared_owners = &v15->__shared_owners_;
  v15->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20F5668;
  v15->__shared_weak_owners_ = 0;
  v15[1].__vftable = (std::__shared_weak_count_vtbl *)v10;
  unint64_t v29 = (unint64_t)v15;
  *(void *)std::string buf = 0;
  int v17 = (std::__shared_weak_count *)*((void *)v10 + 2);
  if (!v17)
  {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v15->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    *((void *)v10 + 1) = v10;
    *((void *)v10 + 2) = v15;
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v17->__shared_owners_ == -1)
  {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v15->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    *((void *)v10 + 1) = v10;
    *((void *)v10 + 2) = v15;
    std::__shared_weak_count::__release_weak(v17);
    if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL))
    {
LABEL_12:
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
LABEL_13:
  if (*(void *)buf)
  {
    OBDManager::~OBDManager(*(OBDManager **)buf);
    operator delete(v18);
  }
  if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  uint64_t v19 = v26;
  if (v26 && !atomic_fetch_add(&v26->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
  if (object) {
    dispatch_release(object);
  }
  uint64_t v20 = v28;
  if (v28 && OBDManager::init(v28))
  {
    unint64_t v21 = v29;
    *a5 = v20;
    a5[1] = (OBDManager *)v21;
    return;
  }
  int v22 = GetOsLogContext()[1];
  if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_error_impl(&dword_1C5767000, v22, OS_LOG_TYPE_ERROR, "Failed to create OBD Manager!", buf, 2u);
    *a5 = 0;
    a5[1] = 0;
    uint64_t v23 = (std::__shared_weak_count *)v29;
    if (!v29) {
      return;
    }
  }
  else
  {
    *a5 = 0;
    a5[1] = 0;
    uint64_t v23 = (std::__shared_weak_count *)v29;
    if (!v29) {
      return;
    }
  }
  if (!atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
  }
}

void sub_1C581113C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1C5811154(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v7 = va_arg(va2, void);
  uint64_t v9 = va_arg(va2, void);
  uint64_t v10 = va_arg(va2, void);
  uint64_t v11 = va_arg(va2, void);
  uint64_t v12 = va_arg(va2, void);
  std::unique_ptr<OBDManager>::~unique_ptr[abi:ne180100]((OBDManager **)va2);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  if (v2) {
    dispatch_release(v2);
  }
  _Unwind_Resume(a1);
}

BOOL OBDManager::init(OBDManager *this)
{
  uint64_t v2 = *((void *)this + 13);
  if (!v2)
  {
    uint64_t v9 = *(NSObject **)this;
    if (!os_log_type_enabled(*(os_log_t *)this, OS_LOG_TYPE_ERROR)) {
      return v2 != 0;
    }
    *(_WORD *)std::string buf = 0;
    uint64_t v10 = "Audio Manager is null pointer!";
LABEL_30:
    _os_log_error_impl(&dword_1C5767000, v9, OS_LOG_TYPE_ERROR, v10, buf, 2u);
    return v2 != 0;
  }
  unint64_t v3 = (void *)*((void *)this + 8);
  if (!v3)
  {
    uint64_t v9 = *(NSObject **)this;
    if (!os_log_type_enabled(*(os_log_t *)this, OS_LOG_TYPE_ERROR)) {
      return v2 != 0;
    }
    *(_WORD *)std::string buf = 0;
    uint64_t v10 = "On-Body handler is not created";
    goto LABEL_30;
  }
  uint64_t v4 = *((void *)this + 1);
  std::basic_regex<char>::value_type v5 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v5)
  {
    atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    unint64_t v3 = (void *)*((void *)this + 8);
  }
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 3321888768;
  aBlock[2] = ___ZN10OBDManager4initEv_block_invoke;
  aBlock[3] = &__block_descriptor_56_e8_40c35_ZTSNSt3__18weak_ptrI10OBDManagerEE_e11_v16__0i8i12l;
  aBlock[4] = this;
  void aBlock[5] = v4;
  BOOL v14 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = _Block_copy(aBlock);
  uint64_t v7 = *((void *)this + 3);
  if (v7) {
    dispatch_retain(v7);
  }
  uint64_t v15 = v6;
  int v16 = v7;
  uint64_t v8 = (void **)v3[4];
  if ((unint64_t)v8 >= v3[5])
  {
    uint64_t v12 = std::vector<dispatch::callback<void({block_pointer})(CMOnBodyDelegate::CMOnBodyResult,CMOnBodyDelegate::CMOnBodyResultConfidence)>>::__push_back_slow_path<dispatch::callback<void({block_pointer})(CMOnBodyDelegate::CMOnBodyResult,CMOnBodyDelegate::CMOnBodyResultConfidence)> const&>(v3 + 3, (uint64_t)&v15);
    uint64_t v7 = v16;
    v3[4] = v12;
    if (!v7) {
      goto LABEL_15;
    }
    goto LABEL_14;
  }
  if (v6)
  {
    std::basic_regex<char> *v8 = _Block_copy(v6);
    v8[1] = v7;
    if (!v7) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  std::basic_regex<char> *v8 = 0;
  v8[1] = v7;
  if (v7) {
LABEL_12:
  }
    dispatch_retain(v7);
LABEL_13:
  v3[4] = v8 + 2;
  if (v7) {
LABEL_14:
  }
    dispatch_release(v7);
LABEL_15:
  if (v15) {
    _Block_release(v15);
  }
  if (v14) {
    std::__shared_weak_count::__release_weak(v14);
  }
  if (v5) {
    std::__shared_weak_count::__release_weak(v5);
  }
  return v2 != 0;
}

void sub_1C5811388(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, char a17)
{
  dispatch::callback<void({block_pointer})(CMOnBodyDelegate::CMOnBodyResult,CMOnBodyDelegate::CMOnBodyResultConfidence)>::~callback((uint64_t)&a17);
  if (a16)
  {
    std::__shared_weak_count::__release_weak(a16);
    if (!v17) {
LABEL_3:
    }
      _Unwind_Resume(a1);
  }
  else if (!v17)
  {
    goto LABEL_3;
  }
  std::__shared_weak_count::__release_weak(v17);
  _Unwind_Resume(a1);
}

uint64_t OBDManager::OBDManager(uint64_t a1, char *__s, NSObject **a3, uint64_t *a4, void *a5)
{
  size_t v10 = strlen(__s);
  if (v10 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  std::string::size_type v11 = v10;
  if (v10 >= 0x17)
  {
    uint64_t v13 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v10 | 7) != 0x17) {
      uint64_t v13 = v10 | 7;
    }
    uint64_t v14 = v13 + 1;
    p_dst = (std::string *)operator new(v13 + 1);
    __dst.__r_.__value_.__l.__size_ = v11;
    __dst.__r_.__value_.__r.__words[2] = v14 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_8;
  }
  *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v10;
  p_dst = &__dst;
  if (v10) {
LABEL_8:
  }
    memcpy(p_dst, __s, v11);
  p_dst->__r_.__value_.__s.__data_[v11] = 0;
  uint64_t v15 = std::string::append(&__dst, ".", 1uLL);
  long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  v35.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v35.__r_.__value_.__l.__data_ = v16;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  int v17 = std::string::append(&v35, "OBDManager", 0xAuLL);
  long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
  int64_t v37 = v17->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v18;
  v17->__r_.__value_.__l.__size_ = 0;
  v17->__r_.__value_.__r.__words[2] = 0;
  v17->__r_.__value_.__r.__words[0] = 0;
  if (v37 >= 0) {
    uint64_t v19 = __p;
  }
  else {
    uint64_t v19 = (void **)__p[0];
  }
  ctu::OsLogLogger::OsLogLogger((ctu::OsLogLogger *)a1, "com.apple.telephony.abm", (const char *)v19);
  if (SHIBYTE(v37) < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(v35.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_14:
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_15;
      }
      goto LABEL_36;
    }
  }
  else if ((SHIBYTE(v35.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_14;
  }
  operator delete(v35.__r_.__value_.__l.__data_);
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_15:
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    unint64_t v21 = *a3;
    *(void *)(a1 + 24) = *a3;
    if (!v21) {
      goto LABEL_17;
    }
    goto LABEL_16;
  }
LABEL_36:
  operator delete(__dst.__r_.__value_.__l.__data_);
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  unint64_t v21 = *a3;
  *(void *)(a1 + 24) = *a3;
  if (v21) {
LABEL_16:
  }
    dispatch_retain(v21);
LABEL_17:
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 64) = *a5;
  *(_WORD *)(a1 + 32) = 257;
  uint64_t v22 = a5[1];
  *(void *)(a1 + 72) = v22;
  if (v22) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v22 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v23 = *a4;
  *(void *)(a1 + 104) = *a4;
  *(void *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 88) = 1;
  *(void *)(a1 + 96) = 0;
  uint64_t v24 = a4[1];
  *(void *)(a1 + 112) = v24;
  if (v24)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v24 + 8), 1uLL, memory_order_relaxed);
    uint64_t v23 = *(void *)(a1 + 104);
  }
  if (!v23)
  {
    AudioManager::create((AudioManager *)__s, (AudioManager **)__p);
    long long v30 = *(_OWORD *)__p;
    __p[0] = 0;
    __p[1] = 0;
    unint64_t v31 = *(std::__shared_weak_count **)(a1 + 112);
    *(_OWORD *)(a1 + 104) = v30;
    if (v31 && !atomic_fetch_add(&v31->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
    int v32 = (std::__shared_weak_count *)__p[1];
    if (__p[1] && !atomic_fetch_add((atomic_ullong *volatile)__p[1] + 1, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  if (!*(void *)(a1 + 64))
  {
    uint64_t v25 = *(NSObject **)(a1 + 24);
    dispatch_object_t object = v25;
    if (v25) {
      dispatch_retain(v25);
    }
    CMOnBodyDelegate::create(&object, v20, __p);
    long long v26 = *(_OWORD *)__p;
    __p[0] = 0;
    __p[1] = 0;
    int v27 = *(std::__shared_weak_count **)(a1 + 72);
    *(_OWORD *)(a1 + 64) = v26;
    if (v27 && !atomic_fetch_add(&v27->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
    uint64_t v28 = (std::__shared_weak_count *)__p[1];
    if (__p[1] && !atomic_fetch_add((atomic_ullong *volatile)__p[1] + 1, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
    unint64_t v21 = object;
    if (object) {
      dispatch_release(object);
    }
  }
  *(_DWORD *)(a1 + 120) = capabilities::txpower::supportedControlInput((capabilities::txpower *)v21);
  return a1;
}

void sub_1C5811770(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, dispatch_object_t object)
{
  if (object)
  {
    dispatch_release(object);
    std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v12);
    uint64_t v14 = v9[12];
    if (!v14)
    {
LABEL_3:
      uint64_t v15 = v9[10];
      if (!v15) {
        goto LABEL_4;
      }
      goto LABEL_10;
    }
  }
  else
  {
    std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v12);
    uint64_t v14 = v9[12];
    if (!v14) {
      goto LABEL_3;
    }
  }
  dispatch_release(v14);
  uint64_t v15 = v9[10];
  if (!v15)
  {
LABEL_4:
    std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v11);
    std::vector<dispatch::callback<void({block_pointer})(sar::OBDState,sar::TunerState)>>::~vector[abi:ne180100](v10);
    long long v16 = v9[3];
    if (!v16) {
      goto LABEL_5;
    }
    goto LABEL_11;
  }
LABEL_10:
  dispatch_release(v15);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v11);
  std::vector<dispatch::callback<void({block_pointer})(sar::OBDState,sar::TunerState)>>::~vector[abi:ne180100](v10);
  long long v16 = v9[3];
  if (!v16)
  {
LABEL_5:
    int v17 = (std::__shared_weak_count *)v9[2];
    if (!v17) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
LABEL_11:
  dispatch_release(v16);
  int v17 = (std::__shared_weak_count *)v9[2];
  if (!v17)
  {
LABEL_7:
    MEMORY[0x1C8790F80](v9);
    _Unwind_Resume(a1);
  }
LABEL_6:
  std::__shared_weak_count::__release_weak(v17);
  goto LABEL_7;
}

void sub_1C5811830(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0)
  {
    operator delete(a23);
    if ((a21 & 0x80000000) == 0)
    {
LABEL_3:
      if (a15 < 0) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  if (a15 < 0)
  {
LABEL_4:
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
LABEL_7:
  _Unwind_Resume(exception_object);
}

void **std::vector<dispatch::callback<void({block_pointer})(sar::OBDState,sar::TunerState)>>::~vector[abi:ne180100](void **a1)
{
  uint64_t v2 = (char *)*a1;
  if (*a1)
  {
    unint64_t v3 = (char *)a1[1];
    uint64_t v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        std::basic_regex<char>::value_type v5 = *((void *)v3 - 1);
        if (v5) {
          dispatch_release(v5);
        }
        uint64_t v6 = (const void *)*((void *)v3 - 2);
        if (v6) {
          _Block_release(v6);
        }
        v3 -= 16;
      }
      while (v3 != v2);
      uint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void OBDManager::~OBDManager(OBDManager *this)
{
  uint64_t v2 = *((void *)this + 12);
  if (v2)
  {
    dispatch_source_cancel(v2);
    unint64_t v3 = *((void *)this + 12);
    *((void *)this + 12) = 0;
    if (v3)
    {
      dispatch_release(v3);
      uint64_t v4 = *((void *)this + 12);
      *((void *)this + 12) = 0;
      if (v4) {
        dispatch_release(v4);
      }
    }
  }
  if (*((void *)this + 8))
  {
    std::basic_regex<char>::value_type v5 = *((void *)this + 10);
    if (v5)
    {
      dispatch_source_cancel(v5);
      uint64_t v6 = *((void *)this + 10);
      *((void *)this + 10) = 0;
      if (v6)
      {
        dispatch_release(v6);
        uint64_t v7 = *((void *)this + 10);
        *((void *)this + 10) = 0;
        if (v7) {
          dispatch_release(v7);
        }
      }
    }
    CMOnBodyDelegate::stopMotionDetection(*((CMOnBodyDelegate **)this + 8));
  }
  uint64_t v8 = *((void *)this + 5);
  for (uint64_t i = *((void *)this + 6); i != v8; i -= 16)
  {
    size_t v10 = *(NSObject **)(i - 8);
    if (v10) {
      dispatch_release(v10);
    }
    uint64_t v11 = *(const void **)(i - 16);
    if (v11) {
      _Block_release(v11);
    }
  }
  *((void *)this + 6) = v8;
  uint64_t v12 = (std::__shared_weak_count *)*((void *)this + 9);
  *((void *)this + 8) = 0;
  *((void *)this + 9) = 0;
  if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  uint64_t v13 = (std::__shared_weak_count *)*((void *)this + 14);
  *((void *)this + 13) = 0;
  *((void *)this + 14) = 0;
  if (v13)
  {
    if (!atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
    uint64_t v14 = (std::__shared_weak_count *)*((void *)this + 14);
    if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  uint64_t v15 = *((void *)this + 12);
  if (v15) {
    dispatch_release(v15);
  }
  long long v16 = *((void *)this + 10);
  if (v16) {
    dispatch_release(v16);
  }
  int v17 = (std::__shared_weak_count *)*((void *)this + 9);
  if (v17 && !atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
    long long v18 = (char *)*((void *)this + 5);
    if (!v18) {
      goto LABEL_43;
    }
  }
  else
  {
    long long v18 = (char *)*((void *)this + 5);
    if (!v18) {
      goto LABEL_43;
    }
  }
  uint64_t v19 = (char *)*((void *)this + 6);
  queue v20 = v18;
  if (v19 != v18)
  {
    do
    {
      unint64_t v21 = *((void *)v19 - 1);
      if (v21) {
        dispatch_release(v21);
      }
      uint64_t v22 = (const void *)*((void *)v19 - 2);
      if (v22) {
        _Block_release(v22);
      }
      v19 -= 16;
    }
    while (v19 != v18);
    queue v20 = (char *)*((void *)this + 5);
  }
  *((void *)this + 6) = v18;
  operator delete(v20);
LABEL_43:
  uint64_t v23 = *((void *)this + 3);
  if (v23) {
    dispatch_release(v23);
  }
  uint64_t v24 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v24) {
    std::__shared_weak_count::__release_weak(v24);
  }

  JUMPOUT(0x1C8790F80);
}

void OBDManager::stopOBDTimer(OBDManager *this)
{
  uint64_t v2 = *((void *)this + 12);
  if (v2)
  {
    dispatch_source_cancel(v2);
    unint64_t v3 = *((void *)this + 12);
    *((void *)this + 12) = 0;
    if (v3)
    {
      dispatch_release(v3);
      uint64_t v4 = *((void *)this + 12);
      *((void *)this + 12) = 0;
      if (v4)
      {
        dispatch_release(v4);
      }
    }
  }
}

void OBDManager::stopCoreMotionCallbackWatchdog(OBDManager *this)
{
  uint64_t v2 = *((void *)this + 10);
  if (v2)
  {
    dispatch_source_cancel(v2);
    unint64_t v3 = *((void *)this + 10);
    *((void *)this + 10) = 0;
    if (v3)
    {
      dispatch_release(v3);
      uint64_t v4 = *((void *)this + 10);
      *((void *)this + 10) = 0;
      if (v4)
      {
        dispatch_release(v4);
      }
    }
  }
}

void ___ZN10OBDManager4initEv_block_invoke(void *a1, unsigned int a2, int a3)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    uint64_t v7 = a1[4];
    uint64_t v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      uint64_t v9 = v8;
      uint64_t v10 = a1[5];
      if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v9);
      }
      if (v10)
      {
        uint64_t v11 = *(NSObject **)v7;
        if (os_log_type_enabled(*(os_log_t *)v7, OS_LOG_TYPE_DEFAULT))
        {
          if (a2 > 2) {
            uint64_t v12 = "Unknown";
          }
          else {
            uint64_t v12 = off_1E6517678[a2];
          }
          uint64_t v13 = "Confidence Level Unknown";
          if (a3 == 1) {
            uint64_t v13 = "Confidence Level High";
          }
          if (!a3) {
            uint64_t v13 = "Confidence Level Low";
          }
          int v15 = 136315394;
          long long v16 = v12;
          __int16 v17 = 2080;
          long long v18 = v13;
          _os_log_impl(&dword_1C5767000, v11, OS_LOG_TYPE_DEFAULT, "#I On Body Callback: OnBody: %s, confidence: %s", (uint8_t *)&v15, 0x16u);
        }
        *(_DWORD *)(v7 + 88) = a2;
        if (*(void *)(v7 + 96))
        {
          OBDManager::startCoreMotionCallbackWatchdog((OBDManager *)v7);
        }
        else
        {
          uint64_t v14 = *(NSObject **)v7;
          if (os_log_type_enabled(*(os_log_t *)v7, OS_LOG_TYPE_ERROR))
          {
            LOWORD(v15) = 0;
            _os_log_error_impl(&dword_1C5767000, v14, OS_LOG_TYPE_ERROR, "OBD has not started yet!", (uint8_t *)&v15, 2u);
          }
        }
      }
    }
  }
}

void OBDManager::startCoreMotionCallbackWatchdog(OBDManager *this)
{
  uint64_t v2 = *((void *)this + 10);
  if (v2)
  {
    dispatch_source_cancel(v2);
    unint64_t v3 = *((void *)this + 10);
    *((void *)this + 10) = 0;
    if (v3)
    {
      dispatch_release(v3);
      uint64_t v4 = *((void *)this + 10);
      *((void *)this + 10) = 0;
      if (v4) {
        dispatch_release(v4);
      }
    }
  }
  std::basic_regex<char>::value_type v5 = dispatch_source_create(MEMORY[0x1E4F14490], 1uLL, 0, *((dispatch_queue_t *)this + 3));
  uint64_t v6 = *((void *)this + 10);
  *((void *)this + 10) = v5;
  if (v6)
  {
    dispatch_release(v6);
    std::basic_regex<char>::value_type v5 = *((void *)this + 10);
  }
  dispatch_time_t v7 = dispatch_time(0, 5120000000);
  dispatch_source_set_timer(v5, v7, 0xFFFFFFFFFFFFFFFFLL, 0xBEBC200uLL);
  uint64_t v8 = *((void *)this + 1);
  uint64_t v9 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v10 = *((void *)this + 10);
  handler[0] = MEMORY[0x1E4F143A8];
  handler[1] = 3321888768;
  handler[2] = ___ZN10OBDManager31startCoreMotionCallbackWatchdogEv_block_invoke;
  handler[3] = &__block_descriptor_56_e8_40c35_ZTSNSt3__18weak_ptrI10OBDManagerEE_e5_v8__0l;
  handler[4] = this;
  handler[5] = v8;
  uint64_t v12 = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  dispatch_source_set_event_handler(v10, handler);
  dispatch_activate(*((dispatch_object_t *)this + 10));
  if (v12) {
    std::__shared_weak_count::__release_weak(v12);
  }
  if (v9) {
    std::__shared_weak_count::__release_weak(v9);
  }
}

uint64_t __copy_helper_block_e8_40c35_ZTSNSt3__18weak_ptrI10OBDManagerEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c35_ZTSNSt3__18weak_ptrI10OBDManagerEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

uint64_t dispatch::callback<void({block_pointer})(CMOnBodyDelegate::CMOnBodyResult,CMOnBodyDelegate::CMOnBodyResultConfidence)>::~callback(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 8);
  if (v2) {
    dispatch_release(v2);
  }
  if (*(void *)a1) {
    _Block_release(*(const void **)a1);
  }
  return a1;
}

uint64_t OBDManager::getOBDState(OBDManager *this)
{
  return *((unsigned __int8 *)this + 32);
}

void *OBDManager::registerCallback(void *a1, void **a2)
{
  uint64_t v4 = (void *)a1[6];
  if ((unint64_t)v4 >= a1[7])
  {
    xpc_object_t result = std::vector<dispatch::callback<void({block_pointer})(sar::OBDState,sar::TunerState)>>::__push_back_slow_path<dispatch::callback<void({block_pointer})(sar::OBDState,sar::TunerState)> const&>(a1 + 5, (uint64_t)a2);
    a1[6] = result;
  }
  else
  {
    std::basic_regex<char>::value_type v5 = *a2;
    if (*a2) {
      std::basic_regex<char>::value_type v5 = _Block_copy(v5);
    }
    uint64_t v6 = a2[1];
    void *v4 = v5;
    v4[1] = v6;
    if (v6) {
      dispatch_retain(v6);
    }
    xpc_object_t result = v4 + 2;
    a1[6] = v4 + 2;
  }
  return result;
}

void OBDManager::start(OBDManager *this, uint64_t a2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  if (*((void *)this + 12))
  {
    uint64_t v4 = *(NSObject **)this;
    if (os_log_type_enabled(*(os_log_t *)this, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v6) = 0;
      _os_log_impl(&dword_1C5767000, v4, OS_LOG_TYPE_DEFAULT, "#I WARNING - OBD Manager has started already!", (uint8_t *)&v6, 2u);
    }
  }
  if (*((void *)this + 8))
  {
    OBDManager::startCoreMotionCallbackWatchdog(this);
    CMOnBodyDelegate::startMotionDetection(*((CMOnBodyDelegate **)this + 8));
  }
  OBDManager::startOBDTimer((uint64_t)this, a2);
  std::basic_regex<char>::value_type v5 = *(NSObject **)this;
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    int v6 = 134217984;
    uint64_t v7 = a2;
    _os_log_impl(&dword_1C5767000, v5, OS_LOG_TYPE_DEFAULT, "#I Core Motion OnBody Detection is starting with %lld msec", (uint8_t *)&v6, 0xCu);
  }
}

void OBDManager::startOBDTimer(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(NSObject **)(a1 + 96);
  if (v4)
  {
    dispatch_source_cancel(v4);
    std::basic_regex<char>::value_type v5 = *(NSObject **)(a1 + 96);
    *(void *)(a1 + 96) = 0;
    if (v5)
    {
      dispatch_release(v5);
      int v6 = *(NSObject **)(a1 + 96);
      *(void *)(a1 + 96) = 0;
      if (v6) {
        dispatch_release(v6);
      }
    }
  }
  uint64_t v7 = dispatch_source_create(MEMORY[0x1E4F14490], 1uLL, 0, *(dispatch_queue_t *)(a1 + 24));
  uint64_t v8 = *(NSObject **)(a1 + 96);
  *(void *)(a1 + 96) = v7;
  if (v8)
  {
    dispatch_release(v8);
    uint64_t v7 = *(NSObject **)(a1 + 96);
  }
  dispatch_time_t v9 = dispatch_time(0, 1000000 * a2);
  dispatch_source_set_timer(v7, v9, 0xFFFFFFFFFFFFFFFFLL, 0xBEBC200uLL);
  uint64_t v10 = *(void *)(a1 + 8);
  uint64_t v11 = *(std::__shared_weak_count **)(a1 + 16);
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v12 = *(NSObject **)(a1 + 96);
  v13[0] = MEMORY[0x1E4F143A8];
  v13[1] = 3321888768;
  v13[2] = ___ZN10OBDManager13startOBDTimerENSt3__16chrono8durationIxNS0_5ratioILl1ELl1000EEEEE_block_invoke;
  v13[3] = &__block_descriptor_64_e8_40c35_ZTSNSt3__18weak_ptrI10OBDManagerEE_e5_v8__0l;
  v13[4] = a1;
  v13[5] = v10;
  uint64_t v14 = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v15 = a2;
  dispatch_source_set_event_handler(v12, v13);
  dispatch_activate(*(dispatch_object_t *)(a1 + 96));
  if (v14) {
    std::__shared_weak_count::__release_weak(v14);
  }
  if (v11) {
    std::__shared_weak_count::__release_weak(v11);
  }
}

void OBDManager::stop(OBDManager *this)
{
  uint64_t v2 = *((void *)this + 12);
  if (v2)
  {
    dispatch_source_cancel(v2);
    unint64_t v3 = *((void *)this + 12);
    *((void *)this + 12) = 0;
    if (v3)
    {
      dispatch_release(v3);
      uint64_t v4 = *((void *)this + 12);
      *((void *)this + 12) = 0;
      if (v4) {
        dispatch_release(v4);
      }
    }
  }
  if (*((void *)this + 8))
  {
    std::basic_regex<char>::value_type v5 = *((void *)this + 10);
    if (v5)
    {
      dispatch_source_cancel(v5);
      int v6 = *((void *)this + 10);
      *((void *)this + 10) = 0;
      if (v6)
      {
        dispatch_release(v6);
        uint64_t v7 = *((void *)this + 10);
        *((void *)this + 10) = 0;
        if (v7) {
          dispatch_release(v7);
        }
      }
    }
    uint64_t v8 = (CMOnBodyDelegate *)*((void *)this + 8);
    CMOnBodyDelegate::stopMotionDetection(v8);
  }
}

void ___ZN10OBDManager31startCoreMotionCallbackWatchdogEv_block_invoke(void *a1)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    unint64_t v3 = (os_log_t *)a1[4];
    uint64_t v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      std::basic_regex<char>::value_type v5 = v4;
      uint64_t v6 = a1[5];
      if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v5);
      }
      if (v6)
      {
        uint64_t v7 = *v3;
        if (os_log_type_enabled(*v3, OS_LOG_TYPE_DEFAULT))
        {
          int v8 = 134217984;
          uint64_t v9 = 5120;
          _os_log_impl(&dword_1C5767000, v7, OS_LOG_TYPE_DEFAULT, "#I WARNING - Motion did not report the callback in %llu milli-seconds", (uint8_t *)&v8, 0xCu);
        }
      }
    }
  }
}

void ___ZN10OBDManager13startOBDTimerENSt3__16chrono8durationIxNS0_5ratioILl1ELl1000EEEEE_block_invoke(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    uint64_t v3 = a1[4];
    uint64_t v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      std::basic_regex<char>::value_type v5 = v4;
      uint64_t v6 = a1[5];
      if (atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        if (!v6) {
          return;
        }
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v5);
        if (!v6) {
          return;
        }
      }
      __int16 v17 = a1;
      if (config::hw::iPad((config::hw *)v4))
      {
        OBDManager::updateOBDState_iPad((OBDManager *)v3);
        uint64_t v7 = *(void *)(v3 + 40);
        uint64_t v8 = *(void *)(v3 + 48);
        if (v7 != v8) {
          goto LABEL_13;
        }
        goto LABEL_32;
      }
      OBDManager::updateOBDState_iPhone((OBDManager *)v3);
      uint64_t v7 = *(void *)(v3 + 40);
      uint64_t v8 = *(void *)(v3 + 48);
      if (v7 == v8)
      {
LABEL_32:
        uint64_t v15 = *(NSObject **)(v3 + 96);
        dispatch_time_t v16 = dispatch_time(0, 1000000 * v17[7]);
        dispatch_source_set_timer(v15, v16, 0xFFFFFFFFFFFFFFFFLL, 0xBEBC200uLL);
        return;
      }
LABEL_13:
      while (*(void *)v7)
      {
        uint64_t v9 = _Block_copy(*(const void **)v7);
        uint64_t v10 = *(NSObject **)(v7 + 8);
        if (v10) {
          goto LABEL_15;
        }
LABEL_16:
        char v11 = *(unsigned char *)(v3 + 32);
        char v12 = *(unsigned char *)(v3 + 33);
        if (v9) {
          uint64_t v13 = _Block_copy(v9);
        }
        else {
          uint64_t v13 = 0;
        }
        block[0] = MEMORY[0x1E4F143A8];
        block[1] = 3321888768;
        block[2] = ___ZNK8dispatch8callbackIU13block_pointerFvN3sar8OBDStateENS1_10TunerStateEEEclIJS2_S3_EEEvDpT__block_invoke;
        block[3] = &__block_descriptor_42_e8_32c74_ZTSN8dispatch5blockIU13block_pointerFvN3sar8OBDStateENS1_10TunerStateEEEE_e5_v8__0l;
        if (v13) {
          uint64_t v14 = _Block_copy(v13);
        }
        else {
          uint64_t v14 = 0;
        }
        aBlocunint64_t k = v14;
        char v20 = v11;
        char v21 = v12;
        dispatch_async(v10, block);
        if (aBlock) {
          _Block_release(aBlock);
        }
        if (v13) {
          _Block_release(v13);
        }
        if (v10) {
          dispatch_release(v10);
        }
        if (v9) {
          _Block_release(v9);
        }
        v7 += 16;
        if (v7 == v8) {
          goto LABEL_32;
        }
      }
      uint64_t v9 = 0;
      uint64_t v10 = *(NSObject **)(v7 + 8);
      if (!v10) {
        goto LABEL_16;
      }
LABEL_15:
      dispatch_retain(v10);
      goto LABEL_16;
    }
  }
}

void OBDManager::updateOBDState(OBDManager *this)
{
  if (config::hw::iPad(this))
  {
    OBDManager::updateOBDState_iPad(this);
  }
  else
  {
    OBDManager::updateOBDState_iPhone(this);
  }
}

void OBDManager::setMotionParameter(uint64_t a1, ctu **a2)
{
  if (*(void *)(a1 + 64))
  {
    ctu::xpc_to_cf((uint64_t *)&cf, *a2, a2);
    CFTypeRef v3 = cf;
    if (cf && (CFTypeID v4 = CFGetTypeID(cf), v4 == CFDictionaryGetTypeID()))
    {
      CFTypeRef v7 = v3;
      CFRetain(v3);
      CFTypeRef v5 = cf;
      if (!cf)
      {
LABEL_8:
        CMOnBodyDelegate::setThresholds(*(CMOnBodyDelegate **)(a1 + 64), v3);
        if (v3) {
          CFRelease(v3);
        }
        return;
      }
    }
    else
    {
      CFTypeRef v3 = 0;
      CFTypeRef v7 = 0;
      CFTypeRef v5 = cf;
      if (!cf) {
        goto LABEL_8;
      }
    }
    CFRelease(v5);
    goto LABEL_8;
  }
}

void sub_1C581281C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void sub_1C5812830(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
}

void OBDManager::updateOBDState_iPad(OBDManager *this)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  *((_WORD *)this + 16) = 257;
  if (capabilities::txpower::operator&() && !*((_DWORD *)this + 22))
  {
    *((_WORD *)this + 16) = 0;
    uint64_t v2 = *(NSObject **)this;
    if (!os_log_type_enabled(*(os_log_t *)this, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
  }
  else
  {
    uint64_t v2 = *(NSObject **)this;
    if (!os_log_type_enabled(*(os_log_t *)this, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
  }
  uint64_t v3 = *((int *)this + 22);
  if (v3 > 2) {
    CFTypeID v4 = "Unknown";
  }
  else {
    CFTypeID v4 = off_1E6517678[v3];
  }
  uint64_t v5 = sar::toString();
  uint64_t v6 = sar::toString();
  int v7 = capabilities::txpower::operator&();
  uint64_t v8 = "YES";
  int v9 = 136315906;
  uint64_t v10 = v4;
  __int16 v11 = 2080;
  if (!v7) {
    uint64_t v8 = "NO";
  }
  uint64_t v12 = v5;
  __int16 v13 = 2080;
  uint64_t v14 = v6;
  __int16 v15 = 2080;
  dispatch_time_t v16 = v8;
  _os_log_impl(&dword_1C5767000, v2, OS_LOG_TYPE_DEFAULT, "#I Motion Status: %s. Notifying OBD State: %s, Tuner State: %s, Motion Status as an input: %s", (uint8_t *)&v9, 0x2Au);
}

void OBDManager::updateOBDState_iPhone(OBDManager *this)
{
  uint64_t v1 = this;
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  int v2 = *(unsigned __int8 *)(*((void *)this + 13) + 56);
  *((unsigned char *)this + 32) = 1;
  if (v2)
  {
    if (v2 == 1)
    {
      *((_WORD *)this + 16) = 256;
      uint64_t v3 = *(NSObject **)this;
      if (!os_log_type_enabled(*(os_log_t *)this, OS_LOG_TYPE_DEFAULT)) {
        return;
      }
      goto LABEL_15;
    }
    this = (OBDManager *)capabilities::txpower::operator&();
    if (this)
    {
      if (!*((_DWORD *)v1 + 22)) {
        goto LABEL_13;
      }
    }
  }
  if (capabilities::txpower::supportsMotionAlways(this)
    && capabilities::txpower::operator&()
    && !*((_DWORD *)v1 + 22))
  {
LABEL_13:
    *((unsigned char *)v1 + 32) = 0;
    CFTypeID v4 = (char *)v1 + 33;
  }
  else
  {
    *((unsigned char *)v1 + 33) = 1;
    CFTypeID v4 = (char *)v1 + 33;
    if (*((_DWORD *)v1 + 22))
    {
      uint64_t v3 = *(NSObject **)v1;
      if (!os_log_type_enabled(*(os_log_t *)v1, OS_LOG_TYPE_DEFAULT)) {
        return;
      }
      goto LABEL_15;
    }
  }
  unsigned char *v4 = 0;
  uint64_t v3 = *(NSObject **)v1;
  if (!os_log_type_enabled(*(os_log_t *)v1, OS_LOG_TYPE_DEFAULT)) {
    return;
  }
LABEL_15:
  unint64_t v5 = *(char *)(*((void *)v1 + 13) + 56);
  if (v5 > 3)
  {
    uint64_t v6 = "Unknown Audio Output";
    uint64_t v7 = *((int *)v1 + 22);
    if (v7 > 2) {
      goto LABEL_17;
    }
LABEL_19:
    uint64_t v8 = off_1E6517678[v7];
    goto LABEL_20;
  }
  uint64_t v6 = off_1E6517658[v5];
  uint64_t v7 = *((int *)v1 + 22);
  if (v7 <= 2) {
    goto LABEL_19;
  }
LABEL_17:
  uint64_t v8 = "Unknown";
LABEL_20:
  uint64_t v9 = sar::toString();
  uint64_t v10 = sar::toString();
  int v11 = capabilities::txpower::operator&();
  int v13 = 136316162;
  uint64_t v12 = "YES";
  uint64_t v14 = v6;
  __int16 v15 = 2080;
  if (!v11) {
    uint64_t v12 = "NO";
  }
  dispatch_time_t v16 = v8;
  __int16 v17 = 2080;
  uint64_t v18 = v9;
  __int16 v19 = 2080;
  uint64_t v20 = v10;
  __int16 v21 = 2080;
  uint64_t v22 = v12;
  _os_log_impl(&dword_1C5767000, v3, OS_LOG_TYPE_DEFAULT, "#I Audio Output: %s, Motion Status: %s. Notifying OBD State: %s, Tuner State: %s, Motion Status as an input: %s", (uint8_t *)&v13, 0x34u);
}

void *std::vector<dispatch::callback<void({block_pointer})(sar::OBDState,sar::TunerState)>>::__push_back_slow_path<dispatch::callback<void({block_pointer})(sar::OBDState,sar::TunerState)> const&>(void *a1, uint64_t a2)
{
  uint64_t v2 = a1[1] - *a1;
  unint64_t v3 = (v2 >> 4) + 1;
  if (v3 >> 60) {
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v6 = a1[2] - *a1;
  if (v6 >> 3 > v3) {
    unint64_t v3 = v6 >> 3;
  }
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v7 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v7 = v3;
  }
  if (!v7)
  {
    uint64_t v8 = 0;
    uint64_t v9 = *(void **)a2;
    if (!*(void *)a2) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v7 >> 60) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  uint64_t v8 = (char *)operator new(16 * v7);
  uint64_t v9 = *(void **)a2;
  if (*(void *)a2) {
LABEL_12:
  }
    uint64_t v9 = _Block_copy(v9);
LABEL_13:
  uint64_t v10 = *(NSObject **)(a2 + 8);
  int v11 = &v8[16 * (v2 >> 4)];
  *(void *)int v11 = v9;
  *((void *)v11 + 1) = v10;
  if (v10) {
    dispatch_retain(v10);
  }
  uint64_t v12 = &v8[16 * v7];
  int v13 = v11 + 16;
  uint64_t v14 = (char *)*a1;
  __int16 v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v11;
    a1[1] = v13;
    a1[2] = v12;
  }
  else
  {
    unint64_t v16 = (unint64_t)&v15[-*a1 - 16];
    if (v16 < 0xD0) {
      goto LABEL_17;
    }
    uint64_t v23 = &v15[-(v16 & 0xFFFFFFFFFFFFFFF0)];
    BOOL v24 = &v8[v2 - 8 - (v16 & 0xFFFFFFFFFFFFFFF0)] >= v15 || v23 - 8 >= v11;
    BOOL v25 = !v24;
    if (v23 - 16 < &v8[v2 - 8] && &v8[v2 - (v16 & 0xFFFFFFFFFFFFFFF0) - 16] < v15 - 8) {
      goto LABEL_17;
    }
    if (v25) {
      goto LABEL_17;
    }
    uint64_t v27 = (v16 >> 4) + 1;
    uint64_t v28 = 16 * (v27 & 0x1FFFFFFFFFFFFFFELL);
    __int16 v17 = &v11[-v28];
    unint64_t v29 = &v15[-v28];
    long long v30 = (double *)(v11 - 32);
    unint64_t v31 = (const double *)(v15 - 32);
    uint64_t v32 = v27 & 0x1FFFFFFFFFFFFFFELL;
    do
    {
      float64x2x2_t v33 = vld2q_f64(v31);
      vst2q_f64(v30, v33);
      *(_OWORD *)unint64_t v31 = 0uLL;
      *((_OWORD *)v31 + 1) = 0uLL;
      v31 -= 4;
      v30 -= 4;
      v32 -= 2;
    }
    while (v32);
    int v11 = v17;
    __int16 v15 = v29;
    if (v27 != (v27 & 0x1FFFFFFFFFFFFFFELL))
    {
LABEL_17:
      __int16 v17 = v11;
      do
      {
        long long v18 = *((_OWORD *)v15 - 1);
        v15 -= 16;
        *((_OWORD *)v17 - 1) = v18;
        v17 -= 16;
        *(void *)__int16 v15 = 0;
        *((void *)v15 + 1) = 0;
      }
      while (v15 != v14);
    }
    __int16 v15 = (char *)*a1;
    __int16 v19 = (char *)a1[1];
    *a1 = v17;
    a1[1] = v13;
    a1[2] = v12;
    while (v19 != v15)
    {
      uint64_t v20 = *((void *)v19 - 1);
      if (v20) {
        dispatch_release(v20);
      }
      __int16 v21 = (const void *)*((void *)v19 - 2);
      if (v21) {
        _Block_release(v21);
      }
      v19 -= 16;
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v13;
}

OBDManager **std::unique_ptr<OBDManager>::~unique_ptr[abi:ne180100](OBDManager **a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    OBDManager::~OBDManager(v2);
    operator delete(v3);
  }
  return a1;
}

void std::__shared_ptr_pointer<OBDManager *,std::shared_ptr<OBDManager>::__shared_ptr_default_delete<OBDManager,OBDManager>,std::allocator<OBDManager>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<OBDManager *,std::shared_ptr<OBDManager>::__shared_ptr_default_delete<OBDManager,OBDManager>,std::allocator<OBDManager>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1 = *(OBDManager **)(a1 + 24);
  if (v1)
  {
    OBDManager::~OBDManager(v1);
    operator delete(v2);
  }
}

uint64_t std::__shared_ptr_pointer<OBDManager *,std::shared_ptr<OBDManager>::__shared_ptr_default_delete<OBDManager,OBDManager>,std::allocator<OBDManager>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x80000001C599F63BLL) {
    return a1 + 24;
  }
  if (((v3 & 0x80000001C599F63BLL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000001C599F63BLL)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001C599F63BLL & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 24;
  }
  return 0;
}

uint64_t ___ZNK8dispatch8callbackIU13block_pointerFvN3sar8OBDStateENS1_10TunerStateEEEclIJS2_S3_EEEvDpT__block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *(unsigned __int8 *)(a1 + 40), *(unsigned __int8 *)(a1 + 41));
}

void *__copy_helper_block_e8_32c74_ZTSN8dispatch5blockIU13block_pointerFvN3sar8OBDStateENS1_10TunerStateEEEE(uint64_t a1, uint64_t a2)
{
  xpc_object_t result = *(void **)(a2 + 32);
  if (result) {
    xpc_object_t result = _Block_copy(result);
  }
  *(void *)(a1 + 32) = result;
  return result;
}

void __destroy_helper_block_e8_32c74_ZTSN8dispatch5blockIU13block_pointerFvN3sar8OBDStateENS1_10TunerStateEEEE(uint64_t a1)
{
  uint64_t v1 = *(const void **)(a1 + 32);
  if (v1) {
    _Block_release(v1);
  }
}

void sub_1C58133E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C58136F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *std::function<void ()(BOOL,BOOL,char const*)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
    return a1;
  }
  else
  {
    if (v2) {
      (*(void (**)(void *))(*v2 + 40))(v2);
    }
    return a1;
  }
}

uint64_t VoIPCallDelegate::create@<X0>(capabilities::abs *a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  capabilities::abs::supportedSARFeatures(a1);
  uint64_t result = capabilities::abs::operator&();
  if (result)
  {
    *a3 = 0xAAAAAAAAAAAAAAAALL;
    a3[1] = 0xAAAAAAAAAAAAAAAALL;
    unint64_t v7 = (char *)operator new(0x28uLL);
    *((void *)v7 + 1) = 0;
    *((void *)v7 + 2) = 0;
    *(void *)unint64_t v7 = &unk_1F20F5738;
    uint64_t result = (uint64_t)std::construct_at[abi:ne180100]<VoIPCallDelegate,dispatch::queue &,std::function<void ()(BOOL,BOOL,char const*)> &,VoIPCallDelegate*>((void ***)v7 + 3, (NSObject **)a1, a2);
    *a3 = v7 + 24;
    a3[1] = v7;
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
  }
  return result;
}

void sub_1C5813934(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void ***VoIPCallDelegate::VoIPCallDelegate(void ***a1, dispatch_object_t *a2, void *a3)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  unint64_t v5 = *a2;
  if (*a2) {
    dispatch_retain(*a2);
  }
  uint64_t v6 = a3[3];
  if (!v6) {
    goto LABEL_6;
  }
  if ((void *)v6 != a3)
  {
    uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 16))(v6);
LABEL_6:
    unint64_t v16 = (void *)v6;
    goto LABEL_8;
  }
  unint64_t v16 = v15;
  (*(void (**)(void *, void *))(*a3 + 24))(a3, v15);
LABEL_8:
  *a1 = 0;
  a1[1] = 0;
  unint64_t v7 = (void **)operator new(8uLL);
  if (v5) {
    dispatch_retain(v5);
  }
  uint64_t v8 = (uint64_t)v16;
  if (!v16) {
    goto LABEL_13;
  }
  if (v16 != v15)
  {
    uint64_t v8 = (*(uint64_t (**)(void))(*v16 + 16))();
LABEL_13:
    long long v18 = (void *)v8;
    goto LABEL_15;
  }
  long long v18 = v17;
  (*(void (**)(void *, void *))(v15[0] + 24))(v15, v17);
LABEL_15:
  char *v7 = 0;
  uint64_t v9 = [VoIPCallObserverImpl alloc];
  uint64_t v10 = (uint64_t)v18;
  if (!v18)
  {
LABEL_18:
    uint64_t v20 = (void *)v10;
    goto LABEL_20;
  }
  if (v18 != v17)
  {
    uint64_t v10 = (*(uint64_t (**)(void))(*v18 + 16))();
    goto LABEL_18;
  }
  uint64_t v20 = v19;
  (*(void (**)(void *, void *))(v17[0] + 24))(v17, v19);
LABEL_20:
  uint64_t v11 = [(VoIPCallObserverImpl *)v9 initWithCallback:v19 queue:v5];
  uint64_t v12 = *v7;
  char *v7 = (void *)v11;

  if (v20 == v19)
  {
    (*(void (**)(void *))(v19[0] + 32))(v19);
  }
  else if (v20)
  {
    (*(void (**)(void))(*v20 + 40))();
  }
  int v13 = (void **)operator new(0x20uLL);
  *int v13 = &unk_1F20F56E8;
  v13[1] = 0;
  v13[2] = 0;
  v13[3] = v7;
  *a1 = v7;
  a1[1] = v13;
  if (v18 == v17)
  {
    (*(void (**)(void *))(v17[0] + 32))(v17);
    if (v5) {
LABEL_28:
    }
      dispatch_release(v5);
  }
  else
  {
    if (v18) {
      (*(void (**)(void))(*v18 + 40))();
    }
    if (v5) {
      goto LABEL_28;
    }
  }
  if (v16 == v15)
  {
    (*(void (**)(void *))(v15[0] + 32))(v15);
    if (!v5) {
      return a1;
    }
    goto LABEL_33;
  }
  if (v16) {
    (*(void (**)(void))(*v16 + 40))();
  }
  if (v5) {
LABEL_33:
  }
    dispatch_release(v5);
  return a1;
}

void sub_1C5813CE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  if (v18) {
    dispatch_release(v18);
  }
  operator delete(v20);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v19);
  std::function<void ()(BOOL,BOOL,char const*)>::~function(&a10);
  if (v18)
  {
    dispatch_release(v18);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<VoIPCallObserver *,std::shared_ptr<VoIPCallObserver>::__shared_ptr_default_delete<VoIPCallObserver,VoIPCallObserver>,std::allocator<VoIPCallObserver>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<VoIPCallObserver *,std::shared_ptr<VoIPCallObserver>::__shared_ptr_default_delete<VoIPCallObserver,VoIPCallObserver>,std::allocator<VoIPCallObserver>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1 = *(id **)(a1 + 24);
  if (v1)
  {

    operator delete(v1);
  }
}

uint64_t std::__shared_ptr_pointer<VoIPCallObserver *,std::shared_ptr<VoIPCallObserver>::__shared_ptr_default_delete<VoIPCallObserver,VoIPCallObserver>,std::allocator<VoIPCallObserver>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x80000001C599F704) {
    return a1 + 24;
  }
  if (((v3 & 0x80000001C599F704 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000001C599F704)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001C599F704 & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 24;
  }
  return 0;
}

void std::__shared_ptr_emplace<VoIPCallDelegate>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20F5738;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<VoIPCallDelegate>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20F5738;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_emplace<VoIPCallDelegate>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 32);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void ***std::construct_at[abi:ne180100]<VoIPCallDelegate,dispatch::queue &,std::function<void ()(BOOL,BOOL,char const*)> &,VoIPCallDelegate*>(void ***a1, NSObject **a2, void *a3)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  unint64_t v5 = *a2;
  dispatch_object_t v8 = v5;
  if (v5) {
    dispatch_retain(v5);
  }
  uint64_t v6 = a3[3];
  if (!v6) {
    goto LABEL_6;
  }
  if ((void *)v6 != a3)
  {
    uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 16))(v6);
LABEL_6:
    uint64_t v10 = (void *)v6;
    goto LABEL_8;
  }
  uint64_t v10 = v9;
  (*(void (**)(void *, void *))(*a3 + 24))(a3, v9);
LABEL_8:
  VoIPCallDelegate::VoIPCallDelegate(a1, &v8, v9);
  if (v10 == v9)
  {
    (*(void (**)(void *))(v9[0] + 32))(v9);
    if (!v5) {
      return a1;
    }
    goto LABEL_12;
  }
  if (v10) {
    (*(void (**)(void *))(*v10 + 40))(v10);
  }
  if (v5) {
LABEL_12:
  }
    dispatch_release(v5);
  return a1;
}

void sub_1C58140E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (v10) {
    dispatch_release(v10);
  }
  _Unwind_Resume(exception_object);
}

void sys::getCurrentBootSessionUUID(unsigned char *a1@<X8>)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  *(void *)&v19[13] = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v3 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)__s = v3;
  *(_OWORD *)uint64_t v19 = v3;
  size_t v15 = 37;
  if (!sysctlbyname("kern.bootsessionuuid", __s, &v15, 0, 0) && v15 == 37)
  {
    size_t v4 = strlen(__s);
    if (v4 >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    size_t v5 = v4;
    if (v4 >= 0x17)
    {
      uint64_t v8 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v4 | 7) != 0x17) {
        uint64_t v8 = v4 | 7;
      }
      uint64_t v9 = v8 + 1;
      uint64_t v10 = operator new(v8 + 1);
      *((void *)a1 + 1) = v5;
      *((void *)a1 + 2) = v9 | 0x8000000000000000;
      *(void *)a1 = v10;
      a1 = v10;
    }
    else
    {
      a1[23] = v4;
      if (!v4) {
        goto LABEL_17;
      }
    }
    memcpy(a1, __s, v5);
LABEL_17:
    a1[v5] = 0;
    return;
  }
  GetABMLogServer(&v13);
  uint64_t v6 = *((void *)GetGlobalLogger(&v13) + 4);
  unint64_t v7 = v14;
  if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
  {
    uint64_t v11 = __error();
    uint64_t v12 = strerror(*v11);
    *(_DWORD *)std::string buf = 136315138;
    __int16 v17 = v12;
    _os_log_error_impl(&dword_1C5767000, v6, OS_LOG_TYPE_ERROR, "Failed to get boot session uuid, error: %s", buf, 0xCu);
  }
  a1[23] = 0;
  *a1 = 0;
}

void sub_1C58142E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sys::updateBootSessionUUID(sys *this)
{
  memset(&v19, 170, sizeof(v19));
  sys::getCurrentBootSessionUUID(&v19);
  pthread_mutex_lock(&ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance);
  uint64_t v1 = (os_unfair_lock_s *)off_1EBBDD340;
  if (!off_1EBBDD340)
  {
    SharedData::create_default_global(&v20);
    long long v2 = v20;
    long long v20 = 0uLL;
    long long v3 = (std::__shared_weak_count *)*(&off_1EBBDD340 + 1);
    off_1EBBDD340 = v2;
    if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
    size_t v4 = (std::__shared_weak_count *)*((void *)&v20 + 1);
    if (*((void *)&v20 + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v20 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    uint64_t v1 = (os_unfair_lock_s *)off_1EBBDD340;
  }
  __int16 v17 = v1;
  long long v18 = (std::__shared_weak_count *)*(&off_1EBBDD340 + 1);
  if (*(&off_1EBBDD340 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDD340 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance);
  size_t v5 = (const void *)*MEMORY[0x1E4F4C490];
  size_t v6 = strlen((const char *)*MEMORY[0x1E4F4C490]);
  if (v6 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  unint64_t v7 = (void *)v6;
  if (v6 >= 0x17)
  {
    uint64_t v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17) {
      uint64_t v9 = v6 | 7;
    }
    uint64_t v10 = v9 + 1;
    uint64_t v8 = (void **)operator new(v9 + 1);
    __dst[1] = v7;
    unint64_t v16 = v10 | 0x8000000000000000;
    __dst[0] = v8;
LABEL_19:
    memmove(v8, v5, (size_t)v7);
    *((unsigned char *)v7 + (void)v8) = 0;
    if ((SHIBYTE(v19.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_20;
  }
  HIBYTE(v16) = v6;
  uint64_t v8 = __dst;
  if (v6) {
    goto LABEL_19;
  }
  LOBYTE(__dst[0]) = 0;
  if ((SHIBYTE(v19.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_15:
    std::string __p = v19;
    goto LABEL_21;
  }
LABEL_20:
  std::string::__init_copy_ctor_external(&__p, v19.__r_.__value_.__l.__data_, v19.__r_.__value_.__l.__size_);
LABEL_21:
  *(void *)&long long v20 = __dst;
  *((void *)&v20 + 1) = &__p;
  uint64_t v21 = v1;
  os_unfair_lock_lock(v1 + 10);
  uint64_t v11 = SharedData::setPreference<std::string>(std::string const&,std::string)::{lambda(void)#1}::operator()((char **)&v20);
  os_unfair_lock_unlock(v1 + 10);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v16) & 0x80000000) == 0)
    {
LABEL_23:
      uint64_t v12 = v18;
      if (!v18) {
        goto LABEL_28;
      }
      goto LABEL_27;
    }
  }
  else if ((SHIBYTE(v16) & 0x80000000) == 0)
  {
    goto LABEL_23;
  }
  operator delete(__dst[0]);
  uint64_t v12 = v18;
  if (!v18) {
    goto LABEL_28;
  }
LABEL_27:
  if (!atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
    if ((SHIBYTE(v19.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return v11;
    }
    goto LABEL_29;
  }
LABEL_28:
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
LABEL_29:
  }
    operator delete(v19.__r_.__value_.__l.__data_);
  return v11;
}

void sub_1C58145AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a19);
  if (a26 < 0) {
    operator delete(a21);
  }
  _Unwind_Resume(a1);
}

BOOL sys::isBootSessionChanged(sys *this)
{
  memset(__s1, 170, sizeof(__s1));
  sys::getCurrentBootSessionUUID(__s1);
  std::string __p = 0;
  long long v30 = 0;
  uint64_t v31 = 0;
  pthread_mutex_lock(&ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance);
  uint64_t v1 = (os_unfair_lock_s *)off_1EBBDD340;
  if (!off_1EBBDD340)
  {
    SharedData::create_default_global(&v33);
    long long v2 = v33;
    long long v33 = 0uLL;
    long long v3 = (std::__shared_weak_count *)*(&off_1EBBDD340 + 1);
    off_1EBBDD340 = v2;
    if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
    size_t v4 = (std::__shared_weak_count *)*((void *)&v33 + 1);
    if (*((void *)&v33 + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v33 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    uint64_t v1 = (os_unfair_lock_s *)off_1EBBDD340;
  }
  uint64_t v27 = v1;
  uint64_t v28 = (std::__shared_weak_count *)*(&off_1EBBDD340 + 1);
  if (*(&off_1EBBDD340 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDD340 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance);
  size_t v5 = (const void *)*MEMORY[0x1E4F4C490];
  size_t v6 = strlen((const char *)*MEMORY[0x1E4F4C490]);
  if (v6 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  unint64_t v7 = (void *)v6;
  if (v6 >= 0x17)
  {
    uint64_t v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17) {
      uint64_t v9 = v6 | 7;
    }
    uint64_t v10 = v9 + 1;
    uint64_t v8 = (void **)operator new(v9 + 1);
    __dst[1] = v7;
    unint64_t v26 = v10 | 0x8000000000000000;
    __dst[0] = v8;
    goto LABEL_18;
  }
  HIBYTE(v26) = v6;
  uint64_t v8 = __dst;
  if (v6) {
LABEL_18:
  }
    memmove(v8, v5, (size_t)v7);
  *((unsigned char *)v7 + (void)v8) = 0;
  *(void *)&long long v33 = __dst;
  *((void *)&v33 + 1) = &__p;
  uint64_t v34 = v1;
  ctu::SharedLockable<SharedData>::execute_sync<BOOL SharedData::getPreference<std::string>(std::string const&,std::string &)::{lambda(void)#1}>(v1 + 6, (uint64_t)&v33);
  if (SHIBYTE(v26) < 0) {
    operator delete(__dst[0]);
  }
  uint64_t v11 = v28;
  if (v28 && !atomic_fetch_add(&v28->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  char v12 = HIBYTE(__s1[2]);
  if (SHIBYTE(__s1[2]) >= 0) {
    uint64_t v13 = (void *)HIBYTE(__s1[2]);
  }
  else {
    uint64_t v13 = __s1[1];
  }
  uint64_t v14 = (void *)HIBYTE(v31);
  int v15 = SHIBYTE(v31);
  if (v31 < 0) {
    uint64_t v14 = v30;
  }
  if (v13 != v14)
  {
    BOOL v22 = 1;
    if ((SHIBYTE(v31) & 0x80000000) == 0) {
      goto LABEL_46;
    }
    goto LABEL_49;
  }
  if (v31 >= 0) {
    p_p = (unsigned __int8 *)&__p;
  }
  else {
    p_p = (unsigned __int8 *)__p;
  }
  if (SHIBYTE(__s1[2]) < 0)
  {
    BOOL v22 = memcmp(__s1[0], p_p, (size_t)__s1[1]) != 0;
    goto LABEL_45;
  }
  if (HIBYTE(__s1[2]))
  {
    uint64_t v17 = HIBYTE(__s1[2]) - 1;
    long long v18 = __s1;
    do
    {
      int v20 = *(unsigned __int8 *)v18;
      long long v18 = (void **)((char *)v18 + 1);
      int v19 = v20;
      int v21 = *p_p++;
      BOOL v22 = v19 != v21;
    }
    while (v19 == v21 && v17-- != 0);
LABEL_45:
    if ((v15 & 0x80000000) == 0) {
      goto LABEL_46;
    }
LABEL_49:
    operator delete(__p);
    if ((HIBYTE(__s1[2]) & 0x80) == 0) {
      return v22;
    }
LABEL_50:
    operator delete(__s1[0]);
    return v22;
  }
  BOOL v22 = 0;
  if (SHIBYTE(v31) < 0) {
    goto LABEL_49;
  }
LABEL_46:
  if (v12 < 0) {
    goto LABEL_50;
  }
  return v22;
}

void sub_1C5814900(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

BOOL sys::isHardwareModelChanged(sys *this)
{
  CFTypeRef v42 = 0;
  pthread_mutex_lock(&ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance);
  uint64_t v1 = (os_unfair_lock_s *)off_1EBBDD340;
  if (!off_1EBBDD340)
  {
    SharedData::create_default_global(__dst);
    long long v2 = __dst[0];
    __dst[0] = 0uLL;
    long long v3 = (std::__shared_weak_count *)*(&off_1EBBDD340 + 1);
    off_1EBBDD340 = v2;
    if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
    size_t v4 = (std::__shared_weak_count *)*((void *)&__dst[0] + 1);
    if (*((void *)&__dst[0] + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&__dst[0] + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    uint64_t v1 = (os_unfair_lock_s *)off_1EBBDD340;
  }
  std::string __p = v1;
  int64_t v37 = (std::__shared_weak_count *)*(&off_1EBBDD340 + 1);
  if (*(&off_1EBBDD340 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDD340 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance);
  size_t v5 = (const void *)*MEMORY[0x1E4F4C5D0];
  size_t v6 = strlen((const char *)*MEMORY[0x1E4F4C5D0]);
  if (v6 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v7 = v6;
  if (v6 >= 0x17)
  {
    uint64_t v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17) {
      uint64_t v9 = v6 | 7;
    }
    uint64_t v10 = v9 + 1;
    uint64_t v8 = operator new(v9 + 1);
    *((void *)&__dst[0] + 1) = v7;
    *(void *)&__dst[1] = v10 | 0x8000000000000000;
    *(void *)&__dst[0] = v8;
    goto LABEL_18;
  }
  BYTE7(__dst[1]) = v6;
  uint64_t v8 = __dst;
  if (v6) {
LABEL_18:
  }
    memmove(v8, v5, v7);
  *((unsigned char *)v8 + v7) = 0;
  os_unfair_lock_lock(v1 + 10);
  Preferences::getPreference<__CFDictionary const*>(v1, (const char *)__dst, &v42);
  os_unfair_lock_unlock(v1 + 10);
  if (SBYTE7(__dst[1]) < 0) {
    operator delete(*(void **)&__dst[0]);
  }
  if (v37 && !atomic_fetch_add(&v37->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
    std::__shared_weak_count::__release_weak(v37);
    CFTypeRef v11 = v42;
    if (!v42) {
      return 0;
    }
  }
  else
  {
    CFTypeRef v11 = v42;
    if (!v42) {
      return 0;
    }
  }
  CFTypeID v12 = CFGetTypeID(v11);
  if (v12 != CFDictionaryGetTypeID()) {
    return 0;
  }
  CFDictionaryRef v13 = (const __CFDictionary *)v42;
  CFTypeRef cf = v42;
  if (v42) {
    CFRetain(v42);
  }
  v39[0] = 0xAAAAAAAAAAAAAAAALL;
  v39[1] = 0xAAAAAAAAAAAAAAAALL;
  ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v39, v13);
  memset(__dst, 170, 24);
  uint64_t v14 = (const void *)*MEMORY[0x1E4F4D2F8];
  size_t v15 = strlen((const char *)*MEMORY[0x1E4F4D2F8]);
  if (v15 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  unint64_t v16 = (std::__shared_weak_count *)v15;
  if (v15 >= 0x17)
  {
    uint64_t v19 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v15 | 7) != 0x17) {
      uint64_t v19 = v15 | 7;
    }
    uint64_t v20 = v19 + 1;
    p_p = operator new(v19 + 1);
    int64_t v37 = v16;
    int64_t v38 = v20 | 0x8000000000000000;
    std::string __p = p_p;
    goto LABEL_36;
  }
  HIBYTE(v38) = v15;
  p_p = &__p;
  if (v15) {
LABEL_36:
  }
    memmove(p_p, v14, (size_t)v16);
  int v21 = (const char *)*MEMORY[0x1E4F4C518];
  *((unsigned char *)&v16->__vftable + (void)p_p) = 0;
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v43, v21);
  ctu::cf::map_adapter::getString();
  BOOL v22 = (config::hw *)MEMORY[0x1C8791110](&v43);
  if (SHIBYTE(v38) < 0) {
    operator delete(__p);
  }
  config::hw::product(v22);
  char v23 = BYTE7(__dst[1]);
  if ((SBYTE7(__dst[1]) & 0x80u) == 0) {
    BOOL v24 = (std::__shared_weak_count *)BYTE7(__dst[1]);
  }
  else {
    BOOL v24 = (std::__shared_weak_count *)*((void *)&__dst[0] + 1);
  }
  BOOL v25 = (std::__shared_weak_count *)HIBYTE(v38);
  int v26 = SHIBYTE(v38);
  if (v38 < 0) {
    BOOL v25 = v37;
  }
  if (v24 != v25)
  {
    BOOL v18 = 1;
    if ((SHIBYTE(v38) & 0x80000000) == 0) {
      goto LABEL_61;
    }
    goto LABEL_65;
  }
  if (v38 >= 0) {
    uint64_t v27 = (unsigned __int8 *)&__p;
  }
  else {
    uint64_t v27 = (unsigned __int8 *)__p;
  }
  if (SBYTE7(__dst[1]) < 0)
  {
    BOOL v18 = memcmp(*(const void **)&__dst[0], v27, *((size_t *)&__dst[0] + 1)) != 0;
    goto LABEL_60;
  }
  if (BYTE7(__dst[1]))
  {
    uint64_t v28 = BYTE7(__dst[1]) - 1;
    unint64_t v29 = (unsigned __int8 *)__dst;
    do
    {
      int v31 = *v29++;
      int v30 = v31;
      int v32 = *v27++;
      BOOL v18 = v30 != v32;
    }
    while (v30 == v32 && v28-- != 0);
LABEL_60:
    if ((v26 & 0x80000000) == 0) {
      goto LABEL_61;
    }
LABEL_65:
    operator delete(__p);
    if ((BYTE7(__dst[1]) & 0x80) == 0)
    {
LABEL_62:
      MEMORY[0x1C8791160](v39);
      CFTypeRef v34 = cf;
      if (!cf) {
        return v18;
      }
      goto LABEL_67;
    }
    goto LABEL_66;
  }
  BOOL v18 = 0;
  if (SHIBYTE(v38) < 0) {
    goto LABEL_65;
  }
LABEL_61:
  if ((v23 & 0x80) == 0) {
    goto LABEL_62;
  }
LABEL_66:
  operator delete(*(void **)&__dst[0]);
  MEMORY[0x1C8791160](v39);
  CFTypeRef v34 = cf;
  if (cf) {
LABEL_67:
  }
    CFRelease(v34);
  return v18;
}

void sub_1C5814D98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, const void *a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
  {
    operator delete(__p);
    MEMORY[0x1C8791160](&a15);
    ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&a17);
    _Unwind_Resume(a1);
  }
  MEMORY[0x1C8791160](&a15);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&a17);
  _Unwind_Resume(a1);
}

void sub_1C5814E3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

BOOL sys::isFWVersionChanged(unsigned __int8 *a1)
{
  CFTypeRef cf = 0;
  pthread_mutex_lock(&ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance);
  long long v2 = (os_unfair_lock_s *)off_1EBBDD340;
  if (!off_1EBBDD340)
  {
    SharedData::create_default_global(__dst);
    long long v3 = __dst[0];
    __dst[0] = 0uLL;
    size_t v4 = (std::__shared_weak_count *)*(&off_1EBBDD340 + 1);
    off_1EBBDD340 = v3;
    if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    size_t v5 = (std::__shared_weak_count *)*((void *)&__dst[0] + 1);
    if (*((void *)&__dst[0] + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&__dst[0] + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    long long v2 = (os_unfair_lock_s *)off_1EBBDD340;
  }
  std::string __p = v2;
  int64_t v37 = (std::__shared_weak_count *)*(&off_1EBBDD340 + 1);
  if (*(&off_1EBBDD340 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDD340 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance);
  size_t v6 = (const void *)*MEMORY[0x1E4F4C5D0];
  size_t v7 = strlen((const char *)*MEMORY[0x1E4F4C5D0]);
  if (v7 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v8 = v7;
  if (v7 >= 0x17)
  {
    uint64_t v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17) {
      uint64_t v10 = v7 | 7;
    }
    uint64_t v11 = v10 + 1;
    uint64_t v9 = operator new(v10 + 1);
    *((void *)&__dst[0] + 1) = v8;
    *(void *)&__dst[1] = v11 | 0x8000000000000000;
    *(void *)&__dst[0] = v9;
    goto LABEL_18;
  }
  BYTE7(__dst[1]) = v7;
  uint64_t v9 = __dst;
  if (v7) {
LABEL_18:
  }
    memmove(v9, v6, v8);
  *((unsigned char *)v9 + v8) = 0;
  os_unfair_lock_lock(v2 + 10);
  Preferences::getPreference<__CFDictionary const*>(v2, (const char *)__dst, &cf);
  os_unfair_lock_unlock(v2 + 10);
  if (SBYTE7(__dst[1]) < 0) {
    operator delete(*(void **)&__dst[0]);
  }
  if (v37 && !atomic_fetch_add(&v37->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
    std::__shared_weak_count::__release_weak(v37);
    CFTypeRef v12 = cf;
    if (!cf) {
      return 0;
    }
  }
  else
  {
    CFTypeRef v12 = cf;
    if (!cf) {
      return 0;
    }
  }
  CFTypeID v13 = CFGetTypeID(v12);
  if (v13 != CFDictionaryGetTypeID()) {
    return 0;
  }
  CFDictionaryRef v14 = (const __CFDictionary *)cf;
  CFTypeRef v40 = cf;
  if (cf) {
    CFRetain(cf);
  }
  v39[0] = 0xAAAAAAAAAAAAAAAALL;
  v39[1] = 0xAAAAAAAAAAAAAAAALL;
  ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v39, v14);
  memset(__dst, 170, 24);
  size_t v15 = (const void *)*MEMORY[0x1E4F4D2F8];
  size_t v16 = strlen((const char *)*MEMORY[0x1E4F4D2F8]);
  if (v16 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v17 = (std::__shared_weak_count *)v16;
  if (v16 >= 0x17)
  {
    uint64_t v20 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v16 | 7) != 0x17) {
      uint64_t v20 = v16 | 7;
    }
    uint64_t v21 = v20 + 1;
    p_p = operator new(v20 + 1);
    int64_t v37 = v17;
    unint64_t v38 = v21 | 0x8000000000000000;
    std::string __p = p_p;
    goto LABEL_36;
  }
  HIBYTE(v38) = v16;
  p_p = &__p;
  if (v16) {
LABEL_36:
  }
    memmove(p_p, v15, (size_t)v17);
  BOOL v22 = (const char *)*MEMORY[0x1E4F4C770];
  *((unsigned char *)&v17->__vftable + (void)p_p) = 0;
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v43, v22);
  ctu::cf::map_adapter::getString();
  MEMORY[0x1C8791110](&v43);
  if (SHIBYTE(v38) < 0) {
    operator delete(__p);
  }
  if ((SBYTE7(__dst[1]) & 0x80u) == 0) {
    uint64_t v24 = BYTE7(__dst[1]);
  }
  else {
    uint64_t v24 = *((void *)&__dst[0] + 1);
  }
  uint64_t v25 = a1[23];
  int v26 = (char)v25;
  if ((v25 & 0x80u) != 0) {
    uint64_t v25 = *((void *)a1 + 1);
  }
  if (v24 == v25)
  {
    if (v26 >= 0) {
      char v23 = a1;
    }
    else {
      char v23 = *(unsigned __int8 **)a1;
    }
    if ((BYTE7(__dst[1]) & 0x80) != 0)
    {
      long long v33 = *(void **)&__dst[0];
      BOOL v19 = memcmp(*(const void **)&__dst[0], v23, *((size_t *)&__dst[0] + 1)) != 0;
      goto LABEL_61;
    }
    if (!BYTE7(__dst[1]))
    {
      BOOL v19 = 0;
      MEMORY[0x1C8791160](v39, v23);
      CFTypeRef v34 = v40;
      if (!v40) {
        return v19;
      }
      goto LABEL_63;
    }
    uint64_t v27 = BYTE7(__dst[1]) - 1;
    uint64_t v28 = (unsigned __int8 *)__dst;
    do
    {
      int v30 = *v28++;
      int v29 = v30;
      int v31 = *v23++;
      BOOL v19 = v29 != v31;
    }
    while (v29 == v31 && v27-- != 0);
    if ((BYTE7(__dst[1]) & 0x80) == 0) {
      goto LABEL_62;
    }
  }
  else
  {
    BOOL v19 = 1;
    if ((BYTE7(__dst[1]) & 0x80) == 0) {
      goto LABEL_62;
    }
  }
  long long v33 = *(void **)&__dst[0];
LABEL_61:
  operator delete(v33);
LABEL_62:
  MEMORY[0x1C8791160](v39, v23);
  CFTypeRef v34 = v40;
  if (v40) {
LABEL_63:
  }
    CFRelease(v34);
  return v19;
}

BOOL sys::isOSVersionChanged(sys *this)
{
  CFTypeRef v42 = 0;
  pthread_mutex_lock(&ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance);
  uint64_t v1 = (os_unfair_lock_s *)off_1EBBDD340;
  if (!off_1EBBDD340)
  {
    SharedData::create_default_global(__dst);
    long long v2 = __dst[0];
    __dst[0] = 0uLL;
    long long v3 = (std::__shared_weak_count *)*(&off_1EBBDD340 + 1);
    off_1EBBDD340 = v2;
    if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
    size_t v4 = (std::__shared_weak_count *)*((void *)&__dst[0] + 1);
    if (*((void *)&__dst[0] + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&__dst[0] + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    uint64_t v1 = (os_unfair_lock_s *)off_1EBBDD340;
  }
  std::string __p = v1;
  int64_t v37 = (std::__shared_weak_count *)*(&off_1EBBDD340 + 1);
  if (*(&off_1EBBDD340 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDD340 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance);
  size_t v5 = (const void *)*MEMORY[0x1E4F4C5D0];
  size_t v6 = strlen((const char *)*MEMORY[0x1E4F4C5D0]);
  if (v6 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v7 = v6;
  if (v6 >= 0x17)
  {
    uint64_t v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17) {
      uint64_t v9 = v6 | 7;
    }
    uint64_t v10 = v9 + 1;
    size_t v8 = operator new(v9 + 1);
    *((void *)&__dst[0] + 1) = v7;
    *(void *)&__dst[1] = v10 | 0x8000000000000000;
    *(void *)&__dst[0] = v8;
    goto LABEL_18;
  }
  BYTE7(__dst[1]) = v6;
  size_t v8 = __dst;
  if (v6) {
LABEL_18:
  }
    memmove(v8, v5, v7);
  *((unsigned char *)v8 + v7) = 0;
  os_unfair_lock_lock(v1 + 10);
  Preferences::getPreference<__CFDictionary const*>(v1, (const char *)__dst, &v42);
  os_unfair_lock_unlock(v1 + 10);
  if (SBYTE7(__dst[1]) < 0) {
    operator delete(*(void **)&__dst[0]);
  }
  if (v37 && !atomic_fetch_add(&v37->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
    std::__shared_weak_count::__release_weak(v37);
    CFTypeRef v11 = v42;
    if (!v42) {
      return 0;
    }
  }
  else
  {
    CFTypeRef v11 = v42;
    if (!v42) {
      return 0;
    }
  }
  CFTypeID v12 = CFGetTypeID(v11);
  if (v12 != CFDictionaryGetTypeID()) {
    return 0;
  }
  CFDictionaryRef v13 = (const __CFDictionary *)v42;
  CFTypeRef cf = v42;
  if (v42) {
    CFRetain(v42);
  }
  v39[0] = 0xAAAAAAAAAAAAAAAALL;
  v39[1] = 0xAAAAAAAAAAAAAAAALL;
  ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v39, v13);
  memset(__dst, 170, 24);
  CFDictionaryRef v14 = (const void *)*MEMORY[0x1E4F4D2F8];
  size_t v15 = strlen((const char *)*MEMORY[0x1E4F4D2F8]);
  if (v15 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v16 = (std::__shared_weak_count *)v15;
  if (v15 >= 0x17)
  {
    uint64_t v19 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v15 | 7) != 0x17) {
      uint64_t v19 = v15 | 7;
    }
    uint64_t v20 = v19 + 1;
    p_p = operator new(v19 + 1);
    int64_t v37 = v16;
    int64_t v38 = v20 | 0x8000000000000000;
    std::string __p = p_p;
    goto LABEL_36;
  }
  HIBYTE(v38) = v15;
  p_p = &__p;
  if (v15) {
LABEL_36:
  }
    memmove(p_p, v14, (size_t)v16);
  uint64_t v21 = (const char *)*MEMORY[0x1E4F4C778];
  *((unsigned char *)&v16->__vftable + (void)p_p) = 0;
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v43, v21);
  ctu::cf::map_adapter::getString();
  BOOL v22 = (config::build *)MEMORY[0x1C8791110](&v43);
  if (SHIBYTE(v38) < 0) {
    operator delete(__p);
  }
  config::build::version(v22);
  char v23 = BYTE7(__dst[1]);
  if ((SBYTE7(__dst[1]) & 0x80u) == 0) {
    uint64_t v24 = (std::__shared_weak_count *)BYTE7(__dst[1]);
  }
  else {
    uint64_t v24 = (std::__shared_weak_count *)*((void *)&__dst[0] + 1);
  }
  uint64_t v25 = (std::__shared_weak_count *)HIBYTE(v38);
  int v26 = SHIBYTE(v38);
  if (v38 < 0) {
    uint64_t v25 = v37;
  }
  if (v24 != v25)
  {
    BOOL v18 = 1;
    if ((SHIBYTE(v38) & 0x80000000) == 0) {
      goto LABEL_61;
    }
    goto LABEL_65;
  }
  if (v38 >= 0) {
    uint64_t v27 = (unsigned __int8 *)&__p;
  }
  else {
    uint64_t v27 = (unsigned __int8 *)__p;
  }
  if (SBYTE7(__dst[1]) < 0)
  {
    BOOL v18 = memcmp(*(const void **)&__dst[0], v27, *((size_t *)&__dst[0] + 1)) != 0;
    goto LABEL_60;
  }
  if (BYTE7(__dst[1]))
  {
    uint64_t v28 = BYTE7(__dst[1]) - 1;
    int v29 = (unsigned __int8 *)__dst;
    do
    {
      int v31 = *v29++;
      int v30 = v31;
      int v32 = *v27++;
      BOOL v18 = v30 != v32;
    }
    while (v30 == v32 && v28-- != 0);
LABEL_60:
    if ((v26 & 0x80000000) == 0) {
      goto LABEL_61;
    }
LABEL_65:
    operator delete(__p);
    if ((BYTE7(__dst[1]) & 0x80) == 0)
    {
LABEL_62:
      MEMORY[0x1C8791160](v39);
      CFTypeRef v34 = cf;
      if (!cf) {
        return v18;
      }
      goto LABEL_67;
    }
    goto LABEL_66;
  }
  BOOL v18 = 0;
  if (SHIBYTE(v38) < 0) {
    goto LABEL_65;
  }
LABEL_61:
  if ((v23 & 0x80) == 0) {
    goto LABEL_62;
  }
LABEL_66:
  operator delete(*(void **)&__dst[0]);
  MEMORY[0x1C8791160](v39);
  CFTypeRef v34 = cf;
  if (cf) {
LABEL_67:
  }
    CFRelease(v34);
  return v18;
}

void sub_1C5815764(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, const void *a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
  {
    operator delete(__p);
    MEMORY[0x1C8791160](&a15);
    ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&a17);
    _Unwind_Resume(a1);
  }
  MEMORY[0x1C8791160](&a15);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&a17);
  _Unwind_Resume(a1);
}

void sub_1C5815808(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t ctu::SharedLockable<SharedData>::execute_sync<BOOL SharedData::getPreference<std::string>(std::string const&,std::string &)::{lambda(void)#1}>(os_unfair_lock_s *a1, uint64_t a2)
{
  long long v3 = a1 + 4;
  os_unfair_lock_lock(a1 + 4);
  size_t v4 = *(uint64_t (****)(void, uint64_t))(a2 + 16);
  if (*(char *)(*(void *)a2 + 23) >= 0) {
    size_t v5 = *(const char **)a2;
  }
  else {
    size_t v5 = **(const char ***)a2;
  }
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v9, v5);
  size_t v6 = (const void *)(**v4)(v4, v9);
  if (v6)
  {
    uint64_t v7 = ctu::cf::assign();
    CFRelease(v6);
  }
  else
  {
    uint64_t v7 = 0;
  }
  MEMORY[0x1C8791110](&v9);
  os_unfair_lock_unlock(v3);
  return v7;
}

void BootController::BootController(BootController *this)
{
  *(void *)this = &unk_1F20F5788;
  uint64_t v7 = "boot.ctrl";
  GetABMLogServer(&v5);
  ctu::Loggable<BootController,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::Loggable<char const*,std::shared_ptr<ctu::LogServer>>(this, &v7, &v5);
  long long v2 = v6;
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *((void *)this + 9) = 0;
  *(void *)this = &unk_1F20F5788;
  *((unsigned char *)this + 80) = 1;
  uint64_t Controller = TelephonyBasebandCreateController();
  size_t v4 = (const void *)*((void *)this + 9);
  *((void *)this + 9) = Controller;
  if (v4) {
    CFRelease(v4);
  }
}

void sub_1C5815A34(_Unwind_Exception *a1)
{
  ctu::cf::CFSharedRef<__TelephonyBasebandControllerHandle_tag>::~CFSharedRef(v2);
  void *v1 = &unk_1F20F3C48;
  MEMORY[0x1C8790F40](v1 + 1);
  _Unwind_Resume(a1);
}

void sub_1C5815A6C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

const char *BootController::getName(BootController *this)
{
  return "boot.ctrl";
}

void *ctu::Loggable<BootController,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::Loggable<char const*,std::shared_ptr<ctu::LogServer>>(void *a1, const char **a2, void *a3)
{
  *a1 = &unk_1F20F3C48;
  uint64_t v5 = *a2;
  size_t v6 = strlen(*a2);
  if (v6 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (void *)v6;
  if (v6 >= 0x17)
  {
    uint64_t v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17) {
      uint64_t v9 = v6 | 7;
    }
    uint64_t v10 = v9 + 1;
    size_t v8 = (void **)operator new(v9 + 1);
    __dst[1] = v7;
    unint64_t v14 = v10 | 0x8000000000000000;
    __dst[0] = v8;
    goto LABEL_8;
  }
  HIBYTE(v14) = v6;
  size_t v8 = __dst;
  if (v6) {
LABEL_8:
  }
    memmove(v8, v5, (size_t)v7);
  *((unsigned char *)v7 + (void)v8) = 0;
  ctu::LoggerCommonBase::LoggerCommonBase();
  a1[1] = &unk_1F20F0070;
  a1[7] = *a3;
  uint64_t v11 = a3[1];
  a1[8] = v11;
  if (v11) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
  }
  if (SHIBYTE(v14) < 0) {
    operator delete(__dst[0]);
  }
  return a1;
}

void sub_1C5815BC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

const void **ctu::cf::CFSharedRef<__TelephonyBasebandControllerHandle_tag>::~CFSharedRef(const void **a1)
{
  long long v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

uint64_t BootController::prepare()
{
  return 1;
}

uint64_t BootController::resetModem(BootController *this)
{
  long long v2 = _os_activity_create(&dword_1C5767000, "Reset baseband", MEMORY[0x1E4F144F0], OS_ACTIVITY_FLAG_DEFAULT);
  state.opaque[1] = 0xAAAAAAAAAAAAAAAALL;
  state.opaque[0] = 0xAAAAAAAAAAAAAAAALL;
  os_activity_scope_enter(v2, &state);
  os_activity_scope_leave(&state);
  long long v3 = *((void *)this + 5);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(state.opaque[0]) = 0;
    _os_log_impl(&dword_1C5767000, v3, OS_LOG_TYPE_DEFAULT, "#I Reset baseband", (uint8_t *)&state, 2u);
  }
  uint64_t v4 = TelephonyBasebandResetModem();
  if ((v4 & 1) == 0)
  {
    uint64_t v5 = *((void *)this + 5);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      LOWORD(state.opaque[0]) = 0;
      _os_log_error_impl(&dword_1C5767000, v5, OS_LOG_TYPE_ERROR, "Failed Resetting Modem", (uint8_t *)&state, 2u);
      if (!v2) {
        return v4;
      }
      goto LABEL_6;
    }
  }
  if (v2) {
LABEL_6:
  }
    os_release(v2);
  return v4;
}

void sub_1C5815D34(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ctu::os::scoped_activity::~scoped_activity((void **)va);
  _Unwind_Resume(a1);
}

uint64_t BootController::powerCycleModem(BootController *this)
{
  long long v2 = _os_activity_create(&dword_1C5767000, "Powercycle baseband", MEMORY[0x1E4F144F0], OS_ACTIVITY_FLAG_DEFAULT);
  state.opaque[1] = 0xAAAAAAAAAAAAAAAALL;
  state.opaque[0] = 0xAAAAAAAAAAAAAAAALL;
  os_activity_scope_enter(v2, &state);
  os_activity_scope_leave(&state);
  long long v3 = *((void *)this + 5);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(state.opaque[0]) = 0;
    _os_log_impl(&dword_1C5767000, v3, OS_LOG_TYPE_DEFAULT, "#I Powercycle baseband", (uint8_t *)&state, 2u);
  }
  uint64_t v4 = TelephonyBasebandPowercycleModem();
  if ((v4 & 1) == 0)
  {
    uint64_t v5 = *((void *)this + 5);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      LOWORD(state.opaque[0]) = 0;
      _os_log_error_impl(&dword_1C5767000, v5, OS_LOG_TYPE_ERROR, "Failed to powercycle baseband", (uint8_t *)&state, 2u);
      if (!v2) {
        return v4;
      }
      goto LABEL_6;
    }
  }
  if (v2) {
LABEL_6:
  }
    os_release(v2);
  return v4;
}

void sub_1C5815E5C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ctu::os::scoped_activity::~scoped_activity((void **)va);
  _Unwind_Resume(a1);
}

uint64_t BootController::powerOffModem(BootController *this)
{
  long long v2 = _os_activity_create(&dword_1C5767000, "Poweroff baseband", MEMORY[0x1E4F144F0], OS_ACTIVITY_FLAG_DEFAULT);
  state.opaque[1] = 0xAAAAAAAAAAAAAAAALL;
  state.opaque[0] = 0xAAAAAAAAAAAAAAAALL;
  os_activity_scope_enter(v2, &state);
  os_activity_scope_leave(&state);
  long long v3 = *((void *)this + 5);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(state.opaque[0]) = 0;
    _os_log_impl(&dword_1C5767000, v3, OS_LOG_TYPE_DEFAULT, "#I Poweroff baseband", (uint8_t *)&state, 2u);
  }
  uint64_t v4 = TelephonyBasebandPowerOnModem();
  if ((v4 & 1) == 0)
  {
    uint64_t v5 = *((void *)this + 5);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      LOWORD(state.opaque[0]) = 0;
      _os_log_error_impl(&dword_1C5767000, v5, OS_LOG_TYPE_ERROR, "Failed to poweroff baseband", (uint8_t *)&state, 2u);
      if (!v2) {
        return v4;
      }
      goto LABEL_6;
    }
  }
  if (v2) {
LABEL_6:
  }
    os_release(v2);
  return v4;
}

void sub_1C5815F88(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ctu::os::scoped_activity::~scoped_activity((void **)va);
  _Unwind_Resume(a1);
}

void BootController::markNonvolatileDataErased(BootController *this)
{
  long long v2 = *((void *)this + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long v3 = 0;
    _os_log_impl(&dword_1C5767000, v2, OS_LOG_TYPE_DEFAULT, "#I Marking EFS as erased", v3, 2u);
  }
  *((unsigned char *)this + 80) = 1;
}

uint64_t BootController::setManagerState(uint64_t a1)
{
  uint64_t v2 = TelephonyBasebandSetManagerState();
  if (v2) {
    return v2;
  }
  long long v3 = *(NSObject **)(a1 + 40);
  if (!os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
    return v2;
  }
  *(_WORD *)uint64_t v5 = 0;
  _os_log_error_impl(&dword_1C5767000, v3, OS_LOG_TYPE_ERROR, "Failed to set manager state", v5, 2u);
  return v2;
}

uint64_t BootController::getManagerState(uint64_t a1)
{
  uint64_t ManagerState = TelephonyBasebandGetManagerState();
  if (ManagerState) {
    return ManagerState;
  }
  long long v3 = *(NSObject **)(a1 + 40);
  if (!os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
    return ManagerState;
  }
  *(_WORD *)uint64_t v5 = 0;
  _os_log_error_impl(&dword_1C5767000, v3, OS_LOG_TYPE_ERROR, "Failed to get manager state", v5, 2u);
  return ManagerState;
}

BOOL BootController::setBasebandState(capabilities::radio *a1)
{
  if (!capabilities::radio::supportsBasebandStateController(a1)) {
    return 1;
  }
  if (TelephonyBasebandSetBasebandState()) {
    return 1;
  }
  long long v3 = *((void *)a1 + 5);
  BOOL result = os_log_type_enabled(v3, OS_LOG_TYPE_ERROR);
  if (result)
  {
    *(_WORD *)uint64_t v4 = 0;
    _os_log_error_impl(&dword_1C5767000, v3, OS_LOG_TYPE_ERROR, "Failed to set baseband state", v4, 2u);
    return 0;
  }
  return result;
}

BOOL BootController::getBasebandState(capabilities::radio *a1, _DWORD *a2)
{
  *a2 = 0;
  if (!capabilities::radio::supportsBasebandStateController(a1)) {
    return 1;
  }
  if (TelephonyBasebandGetBasebandState()) {
    return 1;
  }
  uint64_t v4 = *((void *)a1 + 5);
  BOOL result = os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
  if (result)
  {
    *(_WORD *)uint64_t v5 = 0;
    _os_log_error_impl(&dword_1C5767000, v4, OS_LOG_TYPE_ERROR, "Failed to get baseband state", v5, 2u);
    return 0;
  }
  return result;
}

const char *asString(_DWORD *a1)
{
  uint64_t v1 = "Unknown";
  if (*a1 == 1) {
    uint64_t v1 = "PoweredOn";
  }
  if (*a1) {
    return v1;
  }
  else {
    return "LowPower";
  }
}

const char *asString(int *a1)
{
  uint64_t v1 = *a1;
  if (v1 > 2) {
    return "Unknown";
  }
  else {
    return off_1E6517690[v1];
  }
}

void SystemState::SystemState(SystemState *this)
{
  *(void *)this = 0x200000001;
  *((_DWORD *)this + 2) = -536870144;
}

{
  *(void *)this = 0x200000001;
  *((_DWORD *)this + 2) = -536870144;
}

uint64_t SystemState::acceptSystemNotification(SystemState *this, int a2)
{
  uint64_t v2 = 0;
  HIDWORD(v3) = a2;
  LODWORD(v3) = a2 + 536870288;
  switch((v3 >> 4))
  {
    case 0u:
      if (*(_DWORD *)this != 1) {
        return 0;
      }
      *((_DWORD *)this + 1) = 0;
      goto LABEL_17;
    case 1u:
      if (*(_DWORD *)this != 1) {
        return 0;
      }
      if (*((_DWORD *)this + 1)) {
        *((_DWORD *)this + 1) = 1;
      }
      *(_DWORD *)this = 0;
      goto LABEL_17;
    case 2u:
      if (!*((_DWORD *)this + 1)) {
        goto LABEL_12;
      }
      return 0;
    case 9u:
      if (*(_DWORD *)this || *((_DWORD *)this + 1) != 2) {
        return 0;
      }
LABEL_12:
      *(void *)this = 0x200000001;
      goto LABEL_17;
    case 0xBu:
      if (*(_DWORD *)this || *((_DWORD *)this + 1) == 2) {
        return 0;
      }
      *((_DWORD *)this + 1) = 2;
LABEL_17:
      *((_DWORD *)this + 2) = a2;
      return 1;
    default:
      return v2;
  }
}

uint64_t SystemState::getSystemNotification(SystemState *this)
{
  return *((unsigned int *)this + 2);
}

uint64_t SystemState::getPowerState(SystemState *this)
{
  return *(unsigned int *)this;
}

uint64_t SystemState::getSleepState(SystemState *this)
{
  return *((unsigned int *)this + 1);
}

uint64_t __cxx_global_var_init_9()
{
  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<ctu::power::assertion>::~PthreadMutexGuardPolicy, &ctu::Singleton<ctu::power::assertion,ctu::power::assertion,ctu::PthreadMutexGuardPolicy<ctu::power::assertion>>::sInstance, &dword_1C5767000);
  }
  return result;
}

void ClientGetLogServer(void *a1@<X8>)
{
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = ___ZL19ClientLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  block[3] = &__block_descriptor_tmp_5;
  void block[4] = &qword_1EBBDD5B0;
  if (_MergedGlobals_8 == -1)
  {
    uint64_t v2 = *(void *)algn_1EBBDD5B8;
    *a1 = qword_1EBBDD5B0;
    a1[1] = v2;
    if (!v2) {
      return;
    }
  }
  else
  {
    dispatch_once(&_MergedGlobals_8, block);
    uint64_t v2 = *(void *)algn_1EBBDD5B8;
    *a1 = qword_1EBBDD5B0;
    a1[1] = v2;
    if (!v2) {
      return;
    }
  }
  atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
}

uint64_t ___ZL19ClientLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke(uint64_t a1)
{
  *(void *)std::string __p = operator new(0x20uLL);
  *(_OWORD *)&__p[8] = xmmword_1C599E720;
  strcpy(*(char **)__p, "AppleBasebandManagerClientLog");
  ctu::LogServer::create();
  uint64_t v2 = *(void *)(a1 + 32);
  long long v3 = v24;
  long long v24 = 0uLL;
  uint64_t v4 = *(std::__shared_weak_count **)(v2 + 8);
  *(_OWORD *)uint64_t v2 = v3;
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    uint64_t v5 = (std::__shared_weak_count *)*((void *)&v24 + 1);
    if (!*((void *)&v24 + 1)) {
      goto LABEL_5;
    }
  }
  else
  {
    uint64_t v5 = (std::__shared_weak_count *)*((void *)&v24 + 1);
    if (!*((void *)&v24 + 1)) {
      goto LABEL_5;
    }
  }
  if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    if ((__p[23] & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
LABEL_5:
  if ((__p[23] & 0x80000000) != 0) {
LABEL_6:
  }
    operator delete(*(void **)__p);
LABEL_7:
  unint64_t v23 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v6 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v22[7] = v6;
  v22[8] = v6;
  v22[5] = v6;
  void v22[6] = v6;
  v22[3] = v6;
  v22[4] = v6;
  v22[1] = v6;
  v22[2] = v6;
  long long v21 = v6;
  v22[0] = v6;
  *(_OWORD *)uint64_t v19 = v6;
  long long v20 = v6;
  long long v17 = v6;
  long long v18 = v6;
  *(_OWORD *)std::string __p = v6;
  *(_OWORD *)&__p[16] = v6;
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)__p);
  uint64_t v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"/tmp/ABM.", 9);
  size_t v8 = getprogname();
  size_t v9 = strlen(v8);
  uint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v8, v9);
  LOBYTE(v24) = 46;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)&v24, 1);
  getpid();
  std::ostream::operator<<();
  uint64_t v11 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v11->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))&unk_1F20F2DD0;
  *(void *)&long long v24 = v11;
  CFTypeID v12 = (std::__shared_weak_count *)operator new(0x20uLL);
  v12->__shared_owners_ = 0;
  v12->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20F2E38;
  v12->__shared_weak_owners_ = 0;
  v12[1].__vftable = v11;
  *((void *)&v24 + 1) = v12;
  size_t v15 = v12;
  atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  ctu::LogServer::addWriter();
  if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  ctu::LogServer::start(**(ctu::LogServer ***)(a1 + 32));
  ctu::LogServer::setEnabled(**(ctu::LogServer ***)(a1 + 32));
  CFDictionaryRef v13 = (std::__shared_weak_count *)*((void *)&v24 + 1);
  if (*((void *)&v24 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v24 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  *(void *)std::string __p = *MEMORY[0x1E4FBA418];
  *(void *)&__p[*(void *)(*(void *)__p - 24)] = *(void *)(MEMORY[0x1E4FBA418] + 24);
  *(void *)&__p[8] = MEMORY[0x1E4FBA470] + 16;
  if (SHIBYTE(v20) < 0) {
    operator delete(v19[1]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1C8791FB0](v22);
}

void sub_1C5816918(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v16 - 48);
  std::ostringstream::~ostringstream((uint64_t)&__p);
  _Unwind_Resume(a1);
}

uint64_t std::ostringstream::basic_ostringstream[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = MEMORY[0x1E4FBA498] + 64;
  *(void *)(a1 + 112) = MEMORY[0x1E4FBA498] + 64;
  uint64_t v3 = *(void *)(MEMORY[0x1E4FBA418] + 16);
  uint64_t v4 = *(void *)(MEMORY[0x1E4FBA418] + 8);
  *(void *)a1 = v4;
  *(void *)(a1 + *(void *)(v4 - 24)) = v3;
  uint64_t v5 = (std::ios_base *)(a1 + *(void *)(*(void *)a1 - 24));
  std::ios_base::init(v5, (void *)(a1 + 8));
  uint64_t v6 = MEMORY[0x1E4FBA498] + 24;
  v5[1].__vftable = 0;
  v5[1].__fmtflags_ = -1;
  *(void *)a1 = v6;
  *(void *)(a1 + 112) = v2;
  std::streambuf::basic_streambuf();
  *(void *)(a1 + 8) = MEMORY[0x1E4FBA470] + 16;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_DWORD *)(a1 + 104) = 16;
  return a1;
}

void sub_1C5816AEC(_Unwind_Exception *a1)
{
  std::ostream::~ostream();
  MEMORY[0x1C8791FB0](v1);
  _Unwind_Resume(a1);
}

uint64_t std::ostringstream::~ostringstream(uint64_t a1)
{
  uint64_t v2 = MEMORY[0x1E4FBA418];
  uint64_t v3 = *MEMORY[0x1E4FBA418];
  *(void *)a1 = *MEMORY[0x1E4FBA418];
  *(void *)(a1 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 8) = MEMORY[0x1E4FBA470] + 16;
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1C8791FB0](a1 + 112);
  return a1;
}

uint64_t config::hw::watch(config::hw *this)
{
  uint64_t v1 = (ctu::Gestalt *)pthread_mutex_lock(&ctu::Singleton<ctu::Gestalt,ctu::Gestalt,ctu::PthreadMutexGuardPolicy<ctu::Gestalt>>::sInstance);
  uint64_t v2 = off_1EBBDD200;
  if (!off_1EBBDD200)
  {
    ctu::Gestalt::create_default_global((uint64_t *)&v9, v1);
    long long v3 = v9;
    long long v9 = 0uLL;
    uint64_t v4 = (std::__shared_weak_count *)*(&off_1EBBDD200 + 1);
    off_1EBBDD200 = v3;
    if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    uint64_t v5 = (std::__shared_weak_count *)*((void *)&v9 + 1);
    if (*((void *)&v9 + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v9 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    uint64_t v2 = off_1EBBDD200;
  }
  uint64_t v6 = (std::__shared_weak_count *)*(&off_1EBBDD200 + 1);
  if (*(&off_1EBBDD200 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDD200 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<ctu::Gestalt,ctu::Gestalt,ctu::PthreadMutexGuardPolicy<ctu::Gestalt>>::sInstance);
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 144))(v2);
  uint64_t v8 = result;
  if (v6)
  {
    if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
      return v8;
    }
  }
  return result;
}

void sub_1C5816DB4(_Unwind_Exception *a1)
{
}

void sub_1C5816DD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t config::hw::iPad(config::hw *this)
{
  uint64_t v1 = (ctu::Gestalt *)pthread_mutex_lock(&ctu::Singleton<ctu::Gestalt,ctu::Gestalt,ctu::PthreadMutexGuardPolicy<ctu::Gestalt>>::sInstance);
  uint64_t v2 = off_1EBBDD200;
  if (!off_1EBBDD200)
  {
    ctu::Gestalt::create_default_global((uint64_t *)&v9, v1);
    long long v3 = v9;
    long long v9 = 0uLL;
    uint64_t v4 = (std::__shared_weak_count *)*(&off_1EBBDD200 + 1);
    off_1EBBDD200 = v3;
    if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    uint64_t v5 = (std::__shared_weak_count *)*((void *)&v9 + 1);
    if (*((void *)&v9 + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v9 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    uint64_t v2 = off_1EBBDD200;
  }
  uint64_t v6 = (std::__shared_weak_count *)*(&off_1EBBDD200 + 1);
  if (*(&off_1EBBDD200 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDD200 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<ctu::Gestalt,ctu::Gestalt,ctu::PthreadMutexGuardPolicy<ctu::Gestalt>>::sInstance);
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 136))(v2);
  uint64_t v8 = result;
  if (v6)
  {
    if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
      return v8;
    }
  }
  return result;
}

void sub_1C5816F78(_Unwind_Exception *a1)
{
}

void sub_1C5816F94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void config::hw::product(config::hw *this)
{
  uint64_t v1 = (ctu::Gestalt *)pthread_mutex_lock(&ctu::Singleton<ctu::Gestalt,ctu::Gestalt,ctu::PthreadMutexGuardPolicy<ctu::Gestalt>>::sInstance);
  uint64_t v2 = off_1EBBDD200;
  if (!off_1EBBDD200)
  {
    ctu::Gestalt::create_default_global((uint64_t *)&v7, v1);
    long long v3 = v7;
    long long v7 = 0uLL;
    uint64_t v4 = (std::__shared_weak_count *)*(&off_1EBBDD200 + 1);
    off_1EBBDD200 = v3;
    if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    uint64_t v5 = (std::__shared_weak_count *)*((void *)&v7 + 1);
    if (*((void *)&v7 + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v7 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    uint64_t v2 = off_1EBBDD200;
  }
  uint64_t v6 = (std::__shared_weak_count *)*(&off_1EBBDD200 + 1);
  if (*(&off_1EBBDD200 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDD200 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<ctu::Gestalt,ctu::Gestalt,ctu::PthreadMutexGuardPolicy<ctu::Gestalt>>::sInstance);
  (*(void (**)(uint64_t))(*(void *)v2 + 48))(v2);
  if (v6)
  {
    if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_1C5817144(_Unwind_Exception *a1)
{
}

void sub_1C5817160(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void config::hw::deviceMaterial(config::hw *this)
{
  uint64_t v1 = (ctu::Gestalt *)pthread_mutex_lock(&ctu::Singleton<ctu::Gestalt,ctu::Gestalt,ctu::PthreadMutexGuardPolicy<ctu::Gestalt>>::sInstance);
  uint64_t v2 = off_1EBBDD200;
  if (!off_1EBBDD200)
  {
    ctu::Gestalt::create_default_global((uint64_t *)&v7, v1);
    long long v3 = v7;
    long long v7 = 0uLL;
    uint64_t v4 = (std::__shared_weak_count *)*(&off_1EBBDD200 + 1);
    off_1EBBDD200 = v3;
    if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    uint64_t v5 = (std::__shared_weak_count *)*((void *)&v7 + 1);
    if (*((void *)&v7 + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v7 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    uint64_t v2 = off_1EBBDD200;
  }
  uint64_t v6 = (std::__shared_weak_count *)*(&off_1EBBDD200 + 1);
  if (*(&off_1EBBDD200 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDD200 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<ctu::Gestalt,ctu::Gestalt,ctu::PthreadMutexGuardPolicy<ctu::Gestalt>>::sInstance);
  (*(void (**)(uint64_t))(*(void *)v2 + 104))(v2);
  if (v6)
  {
    if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_1C5817310(_Unwind_Exception *a1)
{
}

void sub_1C581732C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void config::hw::getBootArgs(std::string *a1@<X8>)
{
  memset(v27, 170, 24);
  long long v3 = (ctu::Gestalt *)pthread_mutex_lock(&ctu::Singleton<ctu::Gestalt,ctu::Gestalt,ctu::PthreadMutexGuardPolicy<ctu::Gestalt>>::sInstance);
  uint64_t v4 = off_1EBBDD200;
  if (!off_1EBBDD200)
  {
    ctu::Gestalt::create_default_global((uint64_t *)__p, v3);
    long long v5 = *(_OWORD *)__p;
    __p[0] = 0;
    __p[1] = 0;
    uint64_t v6 = (std::__shared_weak_count *)*(&off_1EBBDD200 + 1);
    off_1EBBDD200 = v5;
    if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
    long long v7 = (std::__shared_weak_count *)__p[1];
    if (__p[1] && !atomic_fetch_add((atomic_ullong *volatile)__p[1] + 1, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    uint64_t v4 = off_1EBBDD200;
  }
  uint64_t v8 = (std::__shared_weak_count *)*(&off_1EBBDD200 + 1);
  v27[3] = v4;
  v27[4] = *(&off_1EBBDD200 + 1);
  if (*(&off_1EBBDD200 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDD200 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<ctu::Gestalt,ctu::Gestalt,ctu::PthreadMutexGuardPolicy<ctu::Gestalt>>::sInstance);
  (*(void (**)(void *__return_ptr, uint64_t))(*(void *)v4 + 112))(v27, v4);
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  HIBYTE(v26) = 9;
  strcpy((char *)__p, "boot-args");
  long long v9 = (uint64_t *)v27[1];
  if (v27[1])
  {
    while (1)
    {
      uint64_t v11 = (uint64_t **)v9;
      unint64_t v14 = (const void *)v9[4];
      CFTypeID v12 = v9 + 4;
      CFDictionaryRef v13 = v14;
      int v15 = *((char *)v12 + 23);
      if (v15 >= 0) {
        uint64_t v16 = v12;
      }
      else {
        uint64_t v16 = v13;
      }
      if (v15 >= 0) {
        unint64_t v17 = *((unsigned __int8 *)v12 + 23);
      }
      else {
        unint64_t v17 = v12[1];
      }
      if (v17 >= 9) {
        size_t v18 = 9;
      }
      else {
        size_t v18 = v17;
      }
      int v19 = memcmp(__p, v16, v18);
      if (v19)
      {
        if (v19 < 0) {
          goto LABEL_16;
        }
LABEL_30:
        int v20 = memcmp(v16, __p, v18);
        if (v20)
        {
          if ((v20 & 0x80000000) == 0) {
            goto LABEL_41;
          }
        }
        else if (v17 >= 9)
        {
LABEL_41:
          long long v21 = (char *)v11;
          if (*((char *)v11 + 79) < 0) {
            goto LABEL_42;
          }
LABEL_40:
          long long v24 = *(_OWORD *)(v21 + 56);
          a1->__r_.__value_.__r.__words[2] = *((void *)v21 + 9);
          *(_OWORD *)&a1->__r_.__value_.__l.__data_ = v24;
          goto LABEL_43;
        }
        long long v9 = v11[1];
        if (!v9)
        {
          uint64_t v10 = v11 + 1;
          goto LABEL_37;
        }
      }
      else
      {
        if (v17 <= 9) {
          goto LABEL_30;
        }
LABEL_16:
        long long v9 = *v11;
        uint64_t v10 = v11;
        if (!*v11) {
          goto LABEL_37;
        }
      }
    }
  }
  uint64_t v10 = (uint64_t **)&v27[1];
  uint64_t v11 = (uint64_t **)&v27[1];
LABEL_37:
  long long v21 = (char *)operator new(0x50uLL);
  *((_OWORD *)v21 + 2) = *(_OWORD *)__p;
  uint64_t v22 = v26;
  __p[1] = 0;
  uint64_t v26 = 0;
  __p[0] = 0;
  *((void *)v21 + 6) = v22;
  *((void *)v21 + 7) = 0;
  *((void *)v21 + 8) = 0;
  *((void *)v21 + 9) = 0;
  *(void *)long long v21 = 0;
  *((void *)v21 + 1) = 0;
  *((void *)v21 + 2) = v11;
  *uint64_t v10 = (uint64_t *)v21;
  unint64_t v23 = (uint64_t *)v21;
  if (*(void *)v27[0])
  {
    v27[0] = *(void *)v27[0];
    unint64_t v23 = *v10;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v27[1], v23);
  ++v27[2];
  if ((v21[79] & 0x80000000) == 0) {
    goto LABEL_40;
  }
LABEL_42:
  std::string::__init_copy_ctor_external(a1, *((const std::string::value_type **)v21 + 7), *((void *)v21 + 8));
LABEL_43:
  if (SHIBYTE(v26) < 0) {
    operator delete(__p[0]);
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v27[1]);
}

void sub_1C5817654(_Unwind_Exception *a1)
{
}

void sub_1C5817670(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1C5817688(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a16);
  _Unwind_Resume(a1);
}

void config::hw::regionCode(config::hw *this)
{
  uint64_t v1 = (ctu::Gestalt *)pthread_mutex_lock(&ctu::Singleton<ctu::Gestalt,ctu::Gestalt,ctu::PthreadMutexGuardPolicy<ctu::Gestalt>>::sInstance);
  uint64_t v2 = off_1EBBDD200;
  if (!off_1EBBDD200)
  {
    ctu::Gestalt::create_default_global((uint64_t *)&v7, v1);
    long long v3 = v7;
    long long v7 = 0uLL;
    uint64_t v4 = (std::__shared_weak_count *)*(&off_1EBBDD200 + 1);
    off_1EBBDD200 = v3;
    if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    long long v5 = (std::__shared_weak_count *)*((void *)&v7 + 1);
    if (*((void *)&v7 + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v7 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    uint64_t v2 = off_1EBBDD200;
  }
  uint64_t v6 = (std::__shared_weak_count *)*(&off_1EBBDD200 + 1);
  if (*(&off_1EBBDD200 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDD200 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<ctu::Gestalt,ctu::Gestalt,ctu::PthreadMutexGuardPolicy<ctu::Gestalt>>::sInstance);
  (*(void (**)(uint64_t))(*(void *)v2 + 72))(v2);
  if (v6)
  {
    if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_1C5817844(_Unwind_Exception *a1)
{
}

void sub_1C5817860(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void config::hw::regionInfo(config::hw *this)
{
  uint64_t v1 = (ctu::Gestalt *)pthread_mutex_lock(&ctu::Singleton<ctu::Gestalt,ctu::Gestalt,ctu::PthreadMutexGuardPolicy<ctu::Gestalt>>::sInstance);
  uint64_t v2 = off_1EBBDD200;
  if (!off_1EBBDD200)
  {
    ctu::Gestalt::create_default_global((uint64_t *)&v7, v1);
    long long v3 = v7;
    long long v7 = 0uLL;
    uint64_t v4 = (std::__shared_weak_count *)*(&off_1EBBDD200 + 1);
    off_1EBBDD200 = v3;
    if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    long long v5 = (std::__shared_weak_count *)*((void *)&v7 + 1);
    if (*((void *)&v7 + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v7 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    uint64_t v2 = off_1EBBDD200;
  }
  uint64_t v6 = (std::__shared_weak_count *)*(&off_1EBBDD200 + 1);
  if (*(&off_1EBBDD200 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDD200 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<ctu::Gestalt,ctu::Gestalt,ctu::PthreadMutexGuardPolicy<ctu::Gestalt>>::sInstance);
  (*(void (**)(uint64_t))(*(void *)v2 + 64))(v2);
  if (v6)
  {
    if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_1C5817A10(_Unwind_Exception *a1)
{
}

void sub_1C5817A2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t config::build::carrier(config::build *this)
{
  uint64_t result = TelephonyUtilIsCarrierBuild();
  if (result) {
    return TelephonyUtilIsInternalBuild() ^ 1;
  }
  return result;
}

uint64_t config::build::internal_or_carrier(config::build *this)
{
  if (TelephonyUtilIsInternalBuild()) {
    return 1;
  }

  return TelephonyUtilIsCarrierBuild();
}

void config::build::version(config::build *this)
{
  uint64_t v1 = (ctu::Gestalt *)pthread_mutex_lock(&ctu::Singleton<ctu::Gestalt,ctu::Gestalt,ctu::PthreadMutexGuardPolicy<ctu::Gestalt>>::sInstance);
  uint64_t v2 = (void (***)(void))off_1EBBDD200;
  if (!off_1EBBDD200)
  {
    ctu::Gestalt::create_default_global((uint64_t *)&v7, v1);
    long long v3 = v7;
    long long v7 = 0uLL;
    uint64_t v4 = (std::__shared_weak_count *)*(&off_1EBBDD200 + 1);
    off_1EBBDD200 = v3;
    if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    long long v5 = (std::__shared_weak_count *)*((void *)&v7 + 1);
    if (*((void *)&v7 + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v7 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    uint64_t v2 = (void (***)(void))off_1EBBDD200;
  }
  uint64_t v6 = (std::__shared_weak_count *)*(&off_1EBBDD200 + 1);
  if (*(&off_1EBBDD200 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDD200 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<ctu::Gestalt,ctu::Gestalt,ctu::PthreadMutexGuardPolicy<ctu::Gestalt>>::sInstance);
  (**v2)(v2);
  if (v6)
  {
    if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_1C5817C3C(_Unwind_Exception *a1)
{
}

void sub_1C5817C58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t ctu::PthreadMutexGuardPolicy<ctu::Gestalt>::~PthreadMutexGuardPolicy(uint64_t a1)
{
  pthread_mutex_lock((pthread_mutex_t *)a1);
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 72);
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  long long v3 = *(std::__shared_weak_count **)(a1 + 72);
  if (!v3 || atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(uint64_t a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*(void *)a1);
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*(void *)(a1 + 8));
    if (*(char *)(a1 + 79) < 0)
    {
      operator delete(*(void **)(a1 + 56));
      if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      {
LABEL_4:
        uint64_t v2 = (void *)a1;
LABEL_6:
        operator delete(v2);
        return;
      }
    }
    else if ((*(char *)(a1 + 55) & 0x80000000) == 0)
    {
      goto LABEL_4;
    }
    operator delete(*(void **)(a1 + 32));
    uint64_t v2 = (void *)a1;
    goto LABEL_6;
  }
}

void AWDModule::create(uint64_t *a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  if (capabilities::radio::supportsMultiClientAWD((capabilities::radio *)a1))
  {
    uint64_t v4 = operator new(0xC0uLL);
    uint64_t v5 = (uint64_t)v4;
    uint64_t v6 = *a1;
    long long v7 = (std::__shared_weak_count *)a1[1];
    v11[0] = v6;
    v11[1] = (uint64_t)v7;
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    AWDModule::AWDModule(v4, v11);
    *(void *)&blocunint64_t k = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&block + 1) = 0xAAAAAAAAAAAAAAAALL;
    std::shared_ptr<AWDModule>::shared_ptr[abi:ne180100]<AWDModule,std::shared_ptr<AWDModule> ctu::SharedSynchronizable<AWDModule>::make_shared_ptr<AWDModule>(AWDModule*)::{lambda(AWDModule*)#1},void>(&block, v5);
    ctu::Loggable<AWDModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(block + 48);
    long long v8 = block;
    blocunint64_t k = 0uLL;
    *(_OWORD *)a2 = v8;
    if (v7)
    {
      uint64_t v10 = v8;
      std::__shared_weak_count::__release_weak(v7);
      *(void *)&long long v8 = v10;
    }
    uint64_t v12 = v8;
    *(void *)&blocunint64_t k = MEMORY[0x1E4F143A8];
    *((void *)&block + 1) = 0x40000000;
    unint64_t v14 = ___ZNK3ctu20SharedSynchronizableI9AWDModuleE20execute_wrapped_syncIZNS1_4initEvE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS5__block_invoke;
    int v15 = &__block_descriptor_tmp_73;
    uint64_t v16 = v8 + 120;
    unint64_t v17 = &v12;
    long long v9 = *(NSObject **)(v8 + 136);
    if (*(void *)(v8 + 144)) {
      dispatch_async_and_wait(v9, &block);
    }
    else {
      dispatch_sync(v9, &block);
    }
  }
}

void sub_1C5817F68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  if (v8) {
    std::__shared_weak_count::__release_weak(v8);
  }
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v7);
  _Unwind_Resume(a1);
}

void sub_1C5817FD0(_Unwind_Exception *a1)
{
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void AWDModule::init(AWDModule *this)
{
  long long v3 = this;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI9AWDModuleE20execute_wrapped_syncIZNS1_4initEvE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS5__block_invoke;
  block[3] = &__block_descriptor_tmp_73;
  void block[4] = (char *)this + 120;
  void block[5] = &v3;
  uint64_t v2 = (char *)this + 136;
  uint64_t v1 = *((void *)this + 17);
  if (*((void *)v2 + 1)) {
    dispatch_async_and_wait(v1, block);
  }
  else {
    dispatch_sync(v1, block);
  }
}

void AWDModule::~AWDModule(AWDModule *this)
{
  *(void *)this = &unk_1F20F5828;
  *((void *)this + 6) = &unk_1F20F5898;
  std::__tree<std::__value_type<abm::stats::StatsID,std::shared_ptr<Stats>>,std::__map_value_compare<abm::stats::StatsID,std::__value_type<abm::stats::StatsID,std::shared_ptr<Stats>>,std::less<abm::stats::StatsID>,true>,std::allocator<std::__value_type<abm::stats::StatsID,std::shared_ptr<Stats>>>>::destroy(*((void **)this + 22));
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 20);
  if (!v2 || atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    *((void *)this + 6) = &unk_1F20F5C28;
    MEMORY[0x1C8790F40]((char *)this + 56);
    long long v3 = *((void *)this + 18);
    if (!v3) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  *((void *)this + 6) = &unk_1F20F5C28;
  MEMORY[0x1C8790F40]((char *)this + 56);
  long long v3 = *((void *)this + 18);
  if (v3) {
LABEL_4:
  }
    dispatch_release(v3);
LABEL_5:
  uint64_t v4 = *((void *)this + 17);
  if (v4) {
    dispatch_release(v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 16);
  if (v5) {
    std::__shared_weak_count::__release_weak(v5);
  }
  *(void *)this = &unk_1F20FC1C8;
  uint64_t v6 = *((void *)this + 3);
  if (v6)
  {
    uint64_t v7 = *((void *)this + 4);
    long long v8 = (void *)*((void *)this + 3);
    if (v7 != v6)
    {
      do
      {
        if (*(char *)(v7 - 1) < 0) {
          operator delete(*(void **)(v7 - 24));
        }
        v7 -= 24;
      }
      while (v7 != v6);
      long long v8 = (void *)*((void *)this + 3);
    }
    *((void *)this + 4) = v6;
    operator delete(v8);
  }
  long long v9 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v9) {
    std::__shared_weak_count::__release_weak(v9);
  }
}

{
  void *v1;
  uint64_t vars8;

  AWDModule::~AWDModule(this);

  operator delete(v1);
}

void *ctu::SharedLoggable<AWDModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(void *a1)
{
  *a1 = &unk_1F20F5C28;
  MEMORY[0x1C8790F40](a1 + 1);
  uint64_t v2 = a1[12];
  if (v2) {
    dispatch_release(v2);
  }
  long long v3 = a1[11];
  if (v3) {
    dispatch_release(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[10];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = &unk_1F20F5C28;
  MEMORY[0x1C8790F40](a1 + 1);
  uint64_t v2 = a1[12];
  if (v2) {
    dispatch_release(v2);
  }
  long long v3 = a1[11];
  if (v3) {
    dispatch_release(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[10];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

void non-virtual thunk to'AWDModule::~AWDModule(AWDModule *this)
{
}

{
  void *v1;
  uint64_t vars8;

  AWDModule::~AWDModule((AWDModule *)((char *)this - 48));

  operator delete(v1);
}

void *AWDModule::AWDModule(void *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = (std::__shared_weak_count *)a2[1];
  if (v4)
  {
    atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  *a1 = &unk_1F20FC1C8;
  a1[1] = v3;
  a1[2] = v4;
  if (v4)
  {
    atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    a1[3] = 0;
    a1[4] = 0;
    a1[5] = 0;
    std::__shared_weak_count::__release_weak(v4);
    *a1 = &unk_1F20F0BE0;
    std::__shared_weak_count::__release_weak(v4);
  }
  else
  {
    a1[3] = 0;
    a1[4] = 0;
    a1[5] = 0;
    *a1 = &unk_1F20F0BE0;
  }
  *a1 = &unk_1F20F5828;
  a1[6] = &unk_1F20F5898;
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v18, "com.apple.telephony.abm", "awd.mod");
  GetABMLogServer(&v16);
  initially_inactive = dispatch_queue_attr_make_initially_inactive(0);
  uint64_t v6 = dispatch_queue_create_with_target_V2("awd.mod", initially_inactive, 0);
  dispatch_set_qos_class_floor(v6, QOS_CLASS_DEFAULT, 0);
  dispatch_activate(v6);
  a1[15] = 0;
  a1[16] = 0;
  a1[17] = v6;
  if (v6)
  {
    dispatch_retain(v6);
    a1[18] = 0;
    dispatch_release(v6);
  }
  else
  {
    a1[18] = 0;
  }
  a1[6] = &unk_1F20F5C28;
  ctu::OsLogContext::OsLogContext();
  ctu::OsLogContext::OsLogContext();
  ctu::LoggerCommonBase::LoggerCommonBase();
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&v20);
  a1[7] = &unk_1F20F0070;
  uint64_t v7 = v17;
  a1[13] = v16;
  a1[14] = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v19);
  a1[6] = &unk_1F20F5CB8;
  long long v8 = v17;
  if (v17 && !atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v18);
  *a1 = &unk_1F20F5828;
  a1[6] = &unk_1F20F5898;
  long long v9 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  uint64_t v10 = off_1EBBDD2A0;
  if (!off_1EBBDD2A0)
  {
    CommandDriverFactory::create_default_global((uint64_t *)&v20, v9);
    long long v11 = v20;
    long long v20 = 0uLL;
    uint64_t v12 = (std::__shared_weak_count *)*(&off_1EBBDD2A0 + 1);
    off_1EBBDD2A0 = v11;
    if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
    CFDictionaryRef v13 = (std::__shared_weak_count *)*((void *)&v20 + 1);
    if (*((void *)&v20 + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v20 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
    uint64_t v10 = off_1EBBDD2A0;
  }
  unint64_t v14 = (std::__shared_weak_count *)*(&off_1EBBDD2A0 + 1);
  v19[0] = v10;
  v19[1] = *(&off_1EBBDD2A0 + 1);
  if (*(&off_1EBBDD2A0 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDD2A0 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(uint64_t))(*(void *)v10 + 64))(v10);
  if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  a1[23] = 0;
  a1[22] = 0;
  a1[21] = a1 + 22;
  return a1;
}

void sub_1C58186E0(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  ctu::SharedLoggable<AWDModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(v2);
  Service::~Service(v1);
  _Unwind_Resume(a1);
}

void sub_1C5818728(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15)
{
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&a15);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&a13);
  ctu::SharedSynchronizable<DataStallDetection>::~SharedSynchronizable(v16);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&a11);
  Service::~Service(v15);
  _Unwind_Resume(a1);
}

void sub_1C581876C(_Unwind_Exception *a1)
{
  Service::~Service(v1);
  _Unwind_Resume(a1);
}

const char *AWDModule::getName(AWDModule *this)
{
  return "awd.mod";
}

unsigned char *AWDModule::getShutdownStages@<X0>(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v3 = operator new(1uLL);
  *a1 = v3;
  unsigned char *v3 = 3;
  uint64_t result = v3 + 1;
  a1[1] = result;
  a1[2] = result;
  return result;
}

void AWDModule::shutdown(uint64_t a1, char a2, NSObject **a3)
{
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 1174405120;
  v7[2] = ___ZN9AWDModule8shutdownE13ShutdownStageN8dispatch13group_sessionE_block_invoke;
  v7[3] = &__block_descriptor_tmp_29;
  uint64_t v5 = *a3;
  uint64_t v6 = (uint64_t *)(a1 + 120);
  void v7[4] = a1;
  dispatch_group_t group = v5;
  if (v5)
  {
    dispatch_retain(v5);
    dispatch_group_enter(group);
  }
  char v9 = a2;
  ctu::SharedSynchronizable<AWDModule>::execute_wrapped(v6, (uint64_t)v7);
  if (group)
  {
    dispatch_group_leave(group);
    if (group) {
      dispatch_release(group);
    }
  }
}

void ___ZN9AWDModule8shutdownE13ShutdownStageN8dispatch13group_sessionE_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(std::__shared_weak_count **)(v1 + 160);
  *(void *)(v1 + 152) = 0;
  *(void *)(v1 + 160) = 0;
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
}

void AWDModule::initialize(uint64_t a1, NSObject **a2)
{
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 1174405120;
  v5[2] = ___ZN9AWDModule10initializeEN8dispatch13group_sessionE_block_invoke;
  v5[3] = &__block_descriptor_tmp_20_2;
  uint64_t v3 = *a2;
  uint64_t v4 = (uint64_t *)(a1 + 120);
  v5[4] = a1;
  dispatch_group_t group = v3;
  if (v3)
  {
    dispatch_retain(v3);
    dispatch_group_enter(group);
  }
  ctu::SharedSynchronizable<AWDModule>::execute_wrapped(v4, (uint64_t)v5);
  if (group)
  {
    dispatch_group_leave(group);
    if (group) {
      dispatch_release(group);
    }
  }
}

void ___ZN9AWDModule10initializeEN8dispatch13group_sessionE_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(std::__shared_weak_count **)(v1 + 128);
  if (!v2 || (v3 = *(void *)(v1 + 120), (uint64_t v4 = std::__shared_weak_count::lock(v2)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v5 = v4;
  atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v5);
  }
  uint64_t v6 = (const void *)*MEMORY[0x1E4F4C9C0];
  size_t v7 = strlen((const char *)*MEMORY[0x1E4F4C9C0]);
  if (v7 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v8 = v7;
  if (v7 >= 0x17)
  {
    uint64_t v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17) {
      uint64_t v10 = v7 | 7;
    }
    uint64_t v11 = v10 + 1;
    p_dst = (void **)operator new(v10 + 1);
    size_t v47 = v8;
    unint64_t v48 = v11 | 0x8000000000000000;
    std::string __dst = p_dst;
    goto LABEL_12;
  }
  HIBYTE(v48) = v7;
  p_dst = (void **)&__dst;
  if (v7) {
LABEL_12:
  }
    memmove(p_dst, v6, v8);
  *((unsigned char *)p_dst + v8) = 0;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN9AWDModule10initializeEN8dispatch13group_sessionE_block_invoke_2;
  aBlock[3] = &__block_descriptor_tmp_5_10;
  aBlock[4] = v1;
  void aBlock[5] = v3;
  int64_t v44 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  uint64_t v12 = _Block_copy(aBlock);
  uint64_t v45 = v12;
  Service::registerCommandHandler(v1, (uint64_t)&__dst, &v45);
  if (v12) {
    _Block_release(v12);
  }
  if (SHIBYTE(v48) < 0) {
    operator delete(__dst);
  }
  CFDictionaryRef v13 = (const void *)*MEMORY[0x1E4F4CC08];
  size_t v14 = strlen((const char *)*MEMORY[0x1E4F4CC08]);
  if (v14 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v15 = v14;
  if (v14 >= 0x17)
  {
    uint64_t v17 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v14 | 7) != 0x17) {
      uint64_t v17 = v14 | 7;
    }
    uint64_t v18 = v17 + 1;
    uint64_t v16 = (void **)operator new(v17 + 1);
    size_t v47 = v15;
    unint64_t v48 = v18 | 0x8000000000000000;
    std::string __dst = v16;
    goto LABEL_24;
  }
  HIBYTE(v48) = v14;
  uint64_t v16 = (void **)&__dst;
  if (v14) {
LABEL_24:
  }
    memmove(v16, v13, v15);
  *((unsigned char *)v16 + v15) = 0;
  v40[0] = MEMORY[0x1E4F143A8];
  v40[1] = 1174405120;
  v40[2] = ___ZN9AWDModule10initializeEN8dispatch13group_sessionE_block_invoke_6;
  v40[3] = &__block_descriptor_tmp_9_1;
  v40[4] = v1;
  v40[5] = v3;
  std::string v41 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  int v19 = _Block_copy(v40);
  CFTypeRef v42 = v19;
  Service::registerCommandHandler(v1, (uint64_t)&__dst, &v42);
  if (v19) {
    _Block_release(v19);
  }
  if (SHIBYTE(v48) < 0) {
    operator delete(__dst);
  }
  long long v20 = (const void *)*MEMORY[0x1E4F4C468];
  size_t v21 = strlen((const char *)*MEMORY[0x1E4F4C468]);
  if (v21 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v22 = v21;
  if (v21 >= 0x17)
  {
    uint64_t v24 = (v21 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v21 | 7) != 0x17) {
      uint64_t v24 = v21 | 7;
    }
    uint64_t v25 = v24 + 1;
    unint64_t v23 = (void **)operator new(v24 + 1);
    size_t v47 = v22;
    unint64_t v48 = v25 | 0x8000000000000000;
    std::string __dst = v23;
    goto LABEL_36;
  }
  HIBYTE(v48) = v21;
  unint64_t v23 = (void **)&__dst;
  if (v21) {
LABEL_36:
  }
    memmove(v23, v20, v22);
  *((unsigned char *)v23 + v22) = 0;
  v37[0] = MEMORY[0x1E4F143A8];
  v37[1] = 1174405120;
  v37[2] = ___ZN9AWDModule10initializeEN8dispatch13group_sessionE_block_invoke_10;
  v37[3] = &__block_descriptor_tmp_13_4;
  v37[4] = v1;
  v37[5] = v3;
  int64_t v38 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  uint64_t v26 = _Block_copy(v37);
  std::string v39 = v26;
  Service::registerCommandHandler(v1, (uint64_t)&__dst, &v39);
  if (v26) {
    _Block_release(v26);
  }
  if (SHIBYTE(v48) < 0) {
    operator delete(__dst);
  }
  uint64_t v27 = (const void *)*MEMORY[0x1E4F4CA08];
  size_t v28 = strlen((const char *)*MEMORY[0x1E4F4CA08]);
  if (v28 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v29 = v28;
  if (v28 >= 0x17)
  {
    uint64_t v31 = (v28 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v28 | 7) != 0x17) {
      uint64_t v31 = v28 | 7;
    }
    uint64_t v32 = v31 + 1;
    int v30 = (void **)operator new(v31 + 1);
    size_t v47 = v29;
    unint64_t v48 = v32 | 0x8000000000000000;
    std::string __dst = v30;
    goto LABEL_48;
  }
  HIBYTE(v48) = v28;
  int v30 = (void **)&__dst;
  if (v28) {
LABEL_48:
  }
    memmove(v30, v27, v29);
  *((unsigned char *)v30 + v29) = 0;
  v34[0] = MEMORY[0x1E4F143A8];
  v34[1] = 1174405120;
  v34[2] = ___ZN9AWDModule10initializeEN8dispatch13group_sessionE_block_invoke_14;
  v34[3] = &__block_descriptor_tmp_17_0;
  void v34[4] = v1;
  v34[5] = v3;
  std::string v35 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  long long v33 = _Block_copy(v34);
  uint64_t v36 = v33;
  Service::registerCommandHandler(v1, (uint64_t)&__dst, &v36);
  if (v33) {
    _Block_release(v33);
  }
  if (SHIBYTE(v48) < 0) {
    operator delete(__dst);
  }
  if (v35) {
    std::__shared_weak_count::__release_weak(v35);
  }
  if (v38) {
    std::__shared_weak_count::__release_weak(v38);
  }
  if (v41) {
    std::__shared_weak_count::__release_weak(v41);
  }
  if (v44) {
    std::__shared_weak_count::__release_weak(v44);
  }
  std::__shared_weak_count::__release_weak(v5);
}

void sub_1C5818F18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,std::__shared_weak_count *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,std::__shared_weak_count *a32)
{
  if (v33) {
    _Block_release(v33);
  }
  if (a16)
  {
    std::__shared_weak_count::__release_weak(a16);
    if ((*(char *)(v34 - 97) & 0x80000000) == 0)
    {
LABEL_5:
      uint64_t v36 = a24;
      if (!a24)
      {
LABEL_10:
        if (a32) {
          std::__shared_weak_count::__release_weak(a32);
        }
        int64_t v37 = *(std::__shared_weak_count **)(v34 - 136);
        if (v37)
        {
          std::__shared_weak_count::__release_weak(v37);
          std::__shared_weak_count::__release_weak(v32);
          _Unwind_Resume(a1);
        }
        std::__shared_weak_count::__release_weak(v32);
        _Unwind_Resume(a1);
      }
LABEL_9:
      std::__shared_weak_count::__release_weak(v36);
      goto LABEL_10;
    }
  }
  else if ((*(char *)(v34 - 97) & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(*(void **)(v34 - 120));
  uint64_t v36 = a24;
  if (!a24) {
    goto LABEL_10;
  }
  goto LABEL_9;
}

void ___ZN9AWDModule10initializeEN8dispatch13group_sessionE_block_invoke_2(void *a1, xpc_object_t *a2, const void **a3)
{
  uint64_t v4 = (std::__shared_weak_count *)a1[6];
  if (!v4) {
    return;
  }
  size_t v7 = (void *)a1[4];
  size_t v8 = std::__shared_weak_count::lock(v4);
  if (!v8) {
    return;
  }
  char v9 = v8;
  uint64_t v10 = a1[5];
  if (v10)
  {
    uint64_t v11 = (std::__shared_weak_count *)a1[6];
    if (v11) {
      atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    xpc_object_t v12 = *a2;
    if (v12)
    {
      xpc_retain(v12);
      CFDictionaryRef v13 = *a3;
      if (*a3) {
        goto LABEL_8;
      }
    }
    else
    {
      xpc_object_t v12 = xpc_null_create();
      CFDictionaryRef v13 = *a3;
      if (*a3)
      {
LABEL_8:
        size_t v14 = _Block_copy(v13);
        size_t v15 = (std::__shared_weak_count *)v7[16];
        if (!v15) {
LABEL_24:
        }
          std::__throw_bad_weak_ptr[abi:ne180100]();
        goto LABEL_12;
      }
    }
    size_t v14 = 0;
    size_t v15 = (std::__shared_weak_count *)v7[16];
    if (!v15) {
      goto LABEL_24;
    }
LABEL_12:
    uint64_t v16 = v7[15];
    uint64_t v17 = std::__shared_weak_count::lock(v15);
    if (!v17) {
      goto LABEL_24;
    }
    uint64_t v18 = v17;
    int v19 = operator new(0x28uLL);
    long long v20 = v19;
    void *v19 = v10;
    v19[1] = v11;
    if (v11) {
      atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    void v19[2] = v7;
    void v19[3] = v12;
    xpc_object_t v21 = xpc_null_create();
    v20[4] = v14;
    size_t v22 = v7[17];
    atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
    unint64_t v23 = operator new(0x18uLL);
    *unint64_t v23 = v20;
    v23[1] = v16;
    v23[2] = v18;
    dispatch_async_f(v22, v23, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI9AWDModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb0_E3__1EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_);
    if (!atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
    xpc_release(v21);
    if (v11) {
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
}

uint64_t __copy_helper_block_e8_40c33_ZTSNSt3__18weak_ptrI9AWDModuleEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c33_ZTSNSt3__18weak_ptrI9AWDModuleEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void ___ZN9AWDModule10initializeEN8dispatch13group_sessionE_block_invoke_6(void *a1, xpc_object_t *a2, const void **a3)
{
  uint64_t v4 = (std::__shared_weak_count *)a1[6];
  if (!v4) {
    return;
  }
  size_t v7 = (void *)a1[4];
  size_t v8 = std::__shared_weak_count::lock(v4);
  if (!v8) {
    return;
  }
  char v9 = v8;
  uint64_t v10 = a1[5];
  if (v10)
  {
    uint64_t v11 = (std::__shared_weak_count *)a1[6];
    if (v11) {
      atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    xpc_object_t v12 = *a2;
    if (v12)
    {
      xpc_retain(v12);
      CFDictionaryRef v13 = *a3;
      if (*a3) {
        goto LABEL_8;
      }
    }
    else
    {
      xpc_object_t v12 = xpc_null_create();
      CFDictionaryRef v13 = *a3;
      if (*a3)
      {
LABEL_8:
        size_t v14 = _Block_copy(v13);
        size_t v15 = (std::__shared_weak_count *)v7[16];
        if (!v15) {
LABEL_24:
        }
          std::__throw_bad_weak_ptr[abi:ne180100]();
        goto LABEL_12;
      }
    }
    size_t v14 = 0;
    size_t v15 = (std::__shared_weak_count *)v7[16];
    if (!v15) {
      goto LABEL_24;
    }
LABEL_12:
    uint64_t v16 = v7[15];
    uint64_t v17 = std::__shared_weak_count::lock(v15);
    if (!v17) {
      goto LABEL_24;
    }
    uint64_t v18 = v17;
    int v19 = operator new(0x28uLL);
    long long v20 = v19;
    void *v19 = v10;
    v19[1] = v11;
    if (v11) {
      atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    void v19[2] = v7;
    void v19[3] = v12;
    xpc_object_t v21 = xpc_null_create();
    v20[4] = v14;
    size_t v22 = v7[17];
    atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
    unint64_t v23 = operator new(0x18uLL);
    *unint64_t v23 = v20;
    v23[1] = v16;
    v23[2] = v18;
    dispatch_async_f(v22, v23, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI9AWDModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb1_E3__2EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_);
    if (!atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
    xpc_release(v21);
    if (v11) {
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
}

void ___ZN9AWDModule10initializeEN8dispatch13group_sessionE_block_invoke_10(void *a1, xpc_object_t *a2, const void **a3)
{
  uint64_t v4 = (std::__shared_weak_count *)a1[6];
  if (!v4) {
    return;
  }
  size_t v7 = (void *)a1[4];
  size_t v8 = std::__shared_weak_count::lock(v4);
  if (!v8) {
    return;
  }
  char v9 = v8;
  uint64_t v10 = a1[5];
  if (v10)
  {
    uint64_t v11 = (std::__shared_weak_count *)a1[6];
    if (v11) {
      atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    xpc_object_t v12 = *a2;
    if (v12)
    {
      xpc_retain(v12);
      CFDictionaryRef v13 = *a3;
      if (*a3) {
        goto LABEL_8;
      }
    }
    else
    {
      xpc_object_t v12 = xpc_null_create();
      CFDictionaryRef v13 = *a3;
      if (*a3)
      {
LABEL_8:
        size_t v14 = _Block_copy(v13);
        size_t v15 = (std::__shared_weak_count *)v7[16];
        if (!v15) {
LABEL_24:
        }
          std::__throw_bad_weak_ptr[abi:ne180100]();
        goto LABEL_12;
      }
    }
    size_t v14 = 0;
    size_t v15 = (std::__shared_weak_count *)v7[16];
    if (!v15) {
      goto LABEL_24;
    }
LABEL_12:
    uint64_t v16 = v7[15];
    uint64_t v17 = std::__shared_weak_count::lock(v15);
    if (!v17) {
      goto LABEL_24;
    }
    uint64_t v18 = v17;
    int v19 = operator new(0x28uLL);
    long long v20 = v19;
    void *v19 = v10;
    v19[1] = v11;
    if (v11) {
      atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    void v19[2] = v7;
    void v19[3] = v12;
    xpc_object_t v21 = xpc_null_create();
    v20[4] = v14;
    size_t v22 = v7[17];
    atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
    unint64_t v23 = operator new(0x18uLL);
    *unint64_t v23 = v20;
    v23[1] = v16;
    v23[2] = v18;
    dispatch_async_f(v22, v23, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI9AWDModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb2_E3__3EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_);
    if (!atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
    xpc_release(v21);
    if (v11) {
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
}

void ___ZN9AWDModule10initializeEN8dispatch13group_sessionE_block_invoke_14(void *a1, xpc_object_t *a2, const void **a3)
{
  uint64_t v4 = (std::__shared_weak_count *)a1[6];
  if (!v4) {
    return;
  }
  size_t v7 = (void *)a1[4];
  size_t v8 = std::__shared_weak_count::lock(v4);
  if (!v8) {
    return;
  }
  char v9 = v8;
  uint64_t v10 = a1[5];
  if (v10)
  {
    uint64_t v11 = (std::__shared_weak_count *)a1[6];
    if (v11) {
      atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    xpc_object_t v12 = *a2;
    if (v12)
    {
      xpc_retain(v12);
      CFDictionaryRef v13 = *a3;
      if (*a3) {
        goto LABEL_8;
      }
    }
    else
    {
      xpc_object_t v12 = xpc_null_create();
      CFDictionaryRef v13 = *a3;
      if (*a3)
      {
LABEL_8:
        size_t v14 = _Block_copy(v13);
        size_t v15 = (std::__shared_weak_count *)v7[16];
        if (!v15) {
LABEL_24:
        }
          std::__throw_bad_weak_ptr[abi:ne180100]();
        goto LABEL_12;
      }
    }
    size_t v14 = 0;
    size_t v15 = (std::__shared_weak_count *)v7[16];
    if (!v15) {
      goto LABEL_24;
    }
LABEL_12:
    uint64_t v16 = v7[15];
    uint64_t v17 = std::__shared_weak_count::lock(v15);
    if (!v17) {
      goto LABEL_24;
    }
    uint64_t v18 = v17;
    int v19 = operator new(0x28uLL);
    long long v20 = v19;
    void *v19 = v10;
    v19[1] = v11;
    if (v11) {
      atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    void v19[2] = v7;
    void v19[3] = v12;
    xpc_object_t v21 = xpc_null_create();
    v20[4] = v14;
    size_t v22 = v7[17];
    atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
    unint64_t v23 = operator new(0x18uLL);
    *unint64_t v23 = v20;
    v23[1] = v16;
    v23[2] = v18;
    dispatch_async_f(v22, v23, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI9AWDModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb3_E3__4EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_);
    if (!atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
    xpc_release(v21);
    if (v11) {
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
}

void AWDModule::sendPayload_sync(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = *(void *)(a1 + 152);
  if (v6)
  {
    char v9 = (std::__shared_weak_count *)a2[1];
    uint64_t v17 = *a2;
    uint64_t v18 = v9;
    if (v9) {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    v14[0] = MEMORY[0x1E4F143A8];
    v14[1] = 1174405120;
    v14[2] = ___ZN9AWDModule16sendPayload_syncENSt3__110shared_ptrIN3awd10AppContextEEENS2_11PayloadTypeERKNS0_6vectorIhNS0_9allocatorIhEEEEN8dispatch5blockIU13block_pointerFvbEEE_block_invoke;
    v14[3] = &__block_descriptor_tmp_22_1;
    uint64_t v10 = *(void **)a5;
    if (*(void *)a5) {
      uint64_t v10 = _Block_copy(v10);
    }
    size_t v15 = v10;
    aBlocunint64_t k = _Block_copy(v14);
    (*(void (**)(uint64_t, uint64_t *, uint64_t, uint64_t, void **))(*(void *)v6 + 56))(v6, &v17, a3, a4, &aBlock);
    if (aBlock) {
      _Block_release(aBlock);
    }
    uint64_t v11 = v18;
    if (v18 && !atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
      xpc_object_t v12 = v15;
      if (!v15) {
        return;
      }
    }
    else
    {
      xpc_object_t v12 = v15;
      if (!v15) {
        return;
      }
    }
    _Block_release(v12);
  }
  else
  {
    CFDictionaryRef v13 = *(NSObject **)(a1 + 88);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_error_impl(&dword_1C5767000, v13, OS_LOG_TYPE_ERROR, "Cannot send payload because driver is unavailable", buf, 2u);
    }
    (*(void (**)(void))(*(void *)a5 + 16))();
  }
}

void sub_1C5819ADC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *aBlock, char a15)
{
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (a13) {
    _Block_release(a13);
  }
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t ___ZN9AWDModule16sendPayload_syncENSt3__110shared_ptrIN3awd10AppContextEEENS2_11PayloadTypeERKNS0_6vectorIhNS0_9allocatorIhEEEEN8dispatch5blockIU13block_pointerFvbEEE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void AWDModule::enableMetricSubmission_sync(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(a1 + 152);
  if (v5)
  {
    size_t v7 = (std::__shared_weak_count *)a2[1];
    uint64_t v15 = *a2;
    uint64_t v16 = v7;
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 1174405120;
    void v12[2] = ___ZN9AWDModule27enableMetricSubmission_syncENSt3__110shared_ptrIN3awd10AppContextEEEbN8dispatch5blockIU13block_pointerFvbEEE_block_invoke;
    v12[3] = &__block_descriptor_tmp_25_0;
    size_t v8 = *(void **)a4;
    if (*(void *)a4) {
      size_t v8 = _Block_copy(v8);
    }
    CFDictionaryRef v13 = v8;
    aBlocunint64_t k = _Block_copy(v12);
    (*(void (**)(uint64_t, uint64_t *, uint64_t, void **))(*(void *)v5 + 48))(v5, &v15, a3, &aBlock);
    if (aBlock) {
      _Block_release(aBlock);
    }
    char v9 = v16;
    if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
      uint64_t v10 = v13;
      if (!v13) {
        return;
      }
    }
    else
    {
      uint64_t v10 = v13;
      if (!v13) {
        return;
      }
    }
    _Block_release(v10);
  }
  else
  {
    uint64_t v11 = *(NSObject **)(a1 + 88);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_error_impl(&dword_1C5767000, v11, OS_LOG_TYPE_ERROR, "Cannot enable metric submission because driver is unavailable", buf, 2u);
    }
    (*(void (**)(void))(*(void *)a4 + 16))();
  }
}

void sub_1C5819CEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *aBlock, char a15)
{
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (a13) {
    _Block_release(a13);
  }
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t ___ZN9AWDModule27enableMetricSubmission_syncENSt3__110shared_ptrIN3awd10AppContextEEEbN8dispatch5blockIU13block_pointerFvbEEE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void AWDModule::clearConfiguration_sync(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a1 + 152);
  if (v4)
  {
    uint64_t v5 = (std::__shared_weak_count *)a2[1];
    uint64_t v13 = *a2;
    size_t v14 = v5;
    if (v5) {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    v10[0] = MEMORY[0x1E4F143A8];
    v10[1] = 1174405120;
    _DWORD v10[2] = ___ZN9AWDModule23clearConfiguration_syncENSt3__110shared_ptrIN3awd10AppContextEEEN8dispatch5blockIU13block_pointerFvbEEE_block_invoke;
    v10[3] = &__block_descriptor_tmp_28_2;
    uint64_t v6 = *(void **)a3;
    if (*(void *)a3) {
      uint64_t v6 = _Block_copy(v6);
    }
    uint64_t v11 = v6;
    aBlocunint64_t k = _Block_copy(v10);
    (*(void (**)(uint64_t, uint64_t *, void **))(*(void *)v4 + 64))(v4, &v13, &aBlock);
    if (aBlock) {
      _Block_release(aBlock);
    }
    size_t v7 = v14;
    if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
      size_t v8 = v11;
      if (!v11) {
        return;
      }
    }
    else
    {
      size_t v8 = v11;
      if (!v11) {
        return;
      }
    }
    _Block_release(v8);
  }
  else
  {
    char v9 = *(NSObject **)(a1 + 88);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_error_impl(&dword_1C5767000, v9, OS_LOG_TYPE_ERROR, "Cannot clear configuration because driver is unavailable", buf, 2u);
    }
    (*(void (**)(void))(*(void *)a3 + 16))();
  }
}

void sub_1C5819EE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *aBlock, char a15)
{
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (a13) {
    _Block_release(a13);
  }
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t ___ZN9AWDModule23clearConfiguration_syncENSt3__110shared_ptrIN3awd10AppContextEEEN8dispatch5blockIU13block_pointerFvbEEE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void AWDModule::updateProperties_sync(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a1 + 152);
  if (v4)
  {
    uint64_t v5 = (std::__shared_weak_count *)a2[1];
    uint64_t v13 = *a2;
    size_t v14 = v5;
    if (v5) {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    v10[0] = MEMORY[0x1E4F143A8];
    v10[1] = 1174405120;
    _DWORD v10[2] = ___ZN9AWDModule21updateProperties_syncENSt3__110shared_ptrIN3awd10AppContextEEEN8dispatch5blockIU13block_pointerFvbEEE_block_invoke;
    v10[3] = &__block_descriptor_tmp_31_2;
    uint64_t v6 = *(void **)a3;
    if (*(void *)a3) {
      uint64_t v6 = _Block_copy(v6);
    }
    uint64_t v11 = v6;
    aBlocunint64_t k = _Block_copy(v10);
    (*(void (**)(uint64_t, uint64_t *, void **))(*(void *)v4 + 72))(v4, &v13, &aBlock);
    if (aBlock) {
      _Block_release(aBlock);
    }
    size_t v7 = v14;
    if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
      size_t v8 = v11;
      if (!v11) {
        return;
      }
    }
    else
    {
      size_t v8 = v11;
      if (!v11) {
        return;
      }
    }
    _Block_release(v8);
  }
  else
  {
    char v9 = *(NSObject **)(a1 + 88);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_error_impl(&dword_1C5767000, v9, OS_LOG_TYPE_ERROR, "Cannot update properties because driver is unavailable", buf, 2u);
    }
    (*(void (**)(void))(*(void *)a3 + 16))();
  }
}

void sub_1C581A0E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *aBlock, char a15)
{
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (a13) {
    _Block_release(a13);
  }
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t ___ZN9AWDModule21updateProperties_syncENSt3__110shared_ptrIN3awd10AppContextEEEN8dispatch5blockIU13block_pointerFvbEEE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void AWDModule::queryMetric_sync(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = *(void *)(a1 + 152);
  if (v6)
  {
    char v9 = (std::__shared_weak_count *)a2[1];
    uint64_t v17 = *a2;
    uint64_t v18 = v9;
    if (v9) {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    v14[0] = MEMORY[0x1E4F143A8];
    v14[1] = 1174405120;
    v14[2] = ___ZN9AWDModule16queryMetric_syncENSt3__110shared_ptrIN3awd10AppContextEEENS2_10MetricInfoENS2_11TriggerInfoEN8dispatch5blockIU13block_pointerFvbEEE_block_invoke;
    v14[3] = &__block_descriptor_tmp_34_0;
    uint64_t v10 = *(void **)a5;
    if (*(void *)a5) {
      uint64_t v10 = _Block_copy(v10);
    }
    uint64_t v15 = v10;
    aBlocunint64_t k = _Block_copy(v14);
    (*(void (**)(uint64_t, uint64_t *, uint64_t, uint64_t, void **))(*(void *)v6 + 88))(v6, &v17, a3, a4, &aBlock);
    if (aBlock) {
      _Block_release(aBlock);
    }
    uint64_t v11 = v18;
    if (v18 && !atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
      xpc_object_t v12 = v15;
      if (!v15) {
        return;
      }
    }
    else
    {
      xpc_object_t v12 = v15;
      if (!v15) {
        return;
      }
    }
    _Block_release(v12);
  }
  else
  {
    uint64_t v13 = *(NSObject **)(a1 + 88);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_error_impl(&dword_1C5767000, v13, OS_LOG_TYPE_ERROR, "Cannot query metric because driver is unavailable", buf, 2u);
    }
    (*(void (**)(void))(*(void *)a5 + 16))();
  }
}

void sub_1C581A2FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *aBlock, char a15)
{
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (a13) {
    _Block_release(a13);
  }
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t ___ZN9AWDModule16queryMetric_syncENSt3__110shared_ptrIN3awd10AppContextEEENS2_10MetricInfoENS2_11TriggerInfoEN8dispatch5blockIU13block_pointerFvbEEE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void AWDModule::appCheckIn_sync(uint64_t a1@<X0>, unsigned int a2@<W1>, char **a3@<X8>)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 128);
  if (!v5 || (uint64_t v7 = *(void *)(a1 + 120), (v8 = std::__shared_weak_count::lock(v5)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  char v9 = v8;
  atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
  }
  *a3 = (char *)0xAAAAAAAAAAAAAAAALL;
  a3[1] = (char *)0xAAAAAAAAAAAAAAAALL;
  uint64_t v10 = (char *)operator new(0x58uLL);
  uint64_t v11 = v10;
  *((void *)v10 + 1) = 0;
  *((void *)v10 + 2) = 0;
  *(void *)uint64_t v10 = &unk_1F20F5E80;
  xpc_object_t v12 = v10 + 24;
  uint64_t v13 = *(NSObject **)(a1 + 136);
  if (v13)
  {
    dispatch_retain(*(dispatch_object_t *)(a1 + 136));
    *((void *)v11 + 3) = v13;
    dispatch_retain(v13);
    *(_WORD *)(v11 + 33) = 0;
    *(_OWORD *)(v11 + 40) = 0u;
    *(_OWORD *)(v11 + 56) = 0u;
    *(_OWORD *)(v11 + 72) = 0u;
    v11[32] = a2;
    dispatch_release(v13);
  }
  else
  {
    *((void *)v10 + 3) = 0;
    *(_WORD *)(v10 + 33) = 0;
    *(_OWORD *)(v10 + 40) = 0u;
    *(_OWORD *)(v10 + 56) = 0u;
    *(_OWORD *)(v10 + 72) = 0u;
    v10[32] = a2;
  }
  *a3 = v12;
  a3[1] = v11;
  atomic_fetch_add_explicit((atomic_ullong *volatile)v11 + 2, 1uLL, memory_order_relaxed);
  uint64_t v15 = (uint64_t **)(a1 + 176);
  size_t v14 = *(uint64_t **)(a1 + 176);
  if (v14)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v16 = (uint64_t **)v14;
        unsigned int v17 = *((unsigned __int8 *)v14 + 32);
        if (v17 <= a2) {
          break;
        }
        size_t v14 = *v16;
        uint64_t v15 = v16;
        if (!*v16) {
          goto LABEL_15;
        }
      }
      if (v17 >= a2) {
        break;
      }
      size_t v14 = v16[1];
      if (!v14)
      {
        uint64_t v15 = v16 + 1;
        goto LABEL_15;
      }
    }
    xpc_object_t v21 = v12;
    size_t v22 = (atomic_ullong *)v11;
    uint64_t v18 = v16;
LABEL_21:
    atomic_fetch_add_explicit(v22 + 1, 1uLL, memory_order_relaxed);
    unint64_t v23 = (std::__shared_weak_count *)*((void *)v18 + 6);
    *((void *)v18 + 5) = v21;
    *((void *)v18 + 6) = v22;
    if (!v23) {
      goto LABEL_23;
    }
    goto LABEL_22;
  }
  uint64_t v16 = (uint64_t **)(a1 + 176);
LABEL_15:
  uint64_t v18 = operator new(0x38uLL);
  *((unsigned char *)v18 + 32) = a2;
  *((void *)v18 + 5) = 0;
  *((void *)v18 + 6) = 0;
  *(void *)uint64_t v18 = 0;
  *((void *)v18 + 1) = 0;
  *((void *)v18 + 2) = v16;
  *uint64_t v15 = (uint64_t *)v18;
  uint64_t v19 = **(void **)(a1 + 168);
  long long v20 = (uint64_t *)v18;
  if (v19)
  {
    *(void *)(a1 + 168) = v19;
    long long v20 = *v15;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 176), v20);
  ++*(void *)(a1 + 184);
  xpc_object_t v21 = *a3;
  size_t v22 = (atomic_ullong *)a3[1];
  if (v22) {
    goto LABEL_21;
  }
  unint64_t v23 = (std::__shared_weak_count *)*((void *)v18 + 6);
  *((void *)v18 + 5) = v21;
  *((void *)v18 + 6) = 0;
  if (!v23)
  {
LABEL_23:
    uint64_t v24 = *(NSObject **)(a1 + 88);
    if (!os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_25;
    }
    goto LABEL_24;
  }
LABEL_22:
  if (atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_23;
  }
  ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
  std::__shared_weak_count::__release_weak(v23);
  uint64_t v24 = *(NSObject **)(a1 + 88);
  if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
  {
LABEL_24:
    uint64_t v25 = awd::asString();
    *(_DWORD *)std::string buf = 136315138;
    uint64_t v45 = v25;
    _os_log_impl(&dword_1C5767000, v24, OS_LOG_TYPE_DEFAULT, "#I New app checking-in: %s", buf, 0xCu);
  }
LABEL_25:
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN9AWDModule15appCheckIn_syncEN3awd5AppIDE_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_38_1;
  aBlock[4] = a1;
  void aBlock[5] = v7;
  CFTypeRef v42 = v9;
  atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  uint64_t v43 = _Block_copy(aBlock);
  awd::AppContext::setHandler();
  if (v43) {
    _Block_release(v43);
  }
  v36[0] = MEMORY[0x1E4F143A8];
  v36[1] = 1174405120;
  v36[2] = ___ZN9AWDModule15appCheckIn_syncEN3awd5AppIDE_block_invoke_39;
  v36[3] = &__block_descriptor_tmp_41_1;
  v36[4] = a1;
  v36[5] = v7;
  int64_t v37 = v9;
  atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  int64_t v38 = v12;
  std::string v39 = (std::__shared_weak_count *)v11;
  atomic_fetch_add_explicit((atomic_ullong *volatile)v11 + 2, 1uLL, memory_order_relaxed);
  CFTypeRef v40 = _Block_copy(v36);
  awd::AppContext::setHandler();
  if (v40) {
    _Block_release(v40);
  }
  v31[0] = MEMORY[0x1E4F143A8];
  v31[1] = 1174405120;
  v31[2] = ___ZN9AWDModule15appCheckIn_syncEN3awd5AppIDE_block_invoke_42;
  v31[3] = &__block_descriptor_tmp_46;
  v31[4] = a1;
  v31[5] = v7;
  uint64_t v32 = v9;
  atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  long long v33 = v12;
  uint64_t v34 = (std::__shared_weak_count *)v11;
  atomic_fetch_add_explicit((atomic_ullong *volatile)v11 + 2, 1uLL, memory_order_relaxed);
  std::string v35 = _Block_copy(v31);
  awd::AppContext::setHandler();
  if (v35) {
    _Block_release(v35);
  }
  if (*(void *)(a1 + 152))
  {
    uint64_t v26 = (std::__shared_weak_count *)a3[1];
    int v30 = v26;
    if (v26) {
      atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    awd::AwdCommandDriver::checkIn();
    if (v30 && !atomic_fetch_add(&v30->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
      uint64_t v27 = v34;
      if (!v34) {
        goto LABEL_41;
      }
LABEL_40:
      std::__shared_weak_count::__release_weak(v27);
      goto LABEL_41;
    }
LABEL_39:
    uint64_t v27 = v34;
    if (!v34) {
      goto LABEL_41;
    }
    goto LABEL_40;
  }
  size_t v28 = *(NSObject **)(a1 + 88);
  if (!os_log_type_enabled(v28, OS_LOG_TYPE_ERROR)) {
    goto LABEL_39;
  }
  uint64_t v29 = awd::asString();
  *(_DWORD *)std::string buf = 136315138;
  uint64_t v45 = v29;
  _os_log_error_impl(&dword_1C5767000, v28, OS_LOG_TYPE_ERROR, "Cannot check in context of app %s because driver is unavailable", buf, 0xCu);
  uint64_t v27 = v34;
  if (v34) {
    goto LABEL_40;
  }
LABEL_41:
  if (v32) {
    std::__shared_weak_count::__release_weak(v32);
  }
  if (v39) {
    std::__shared_weak_count::__release_weak(v39);
  }
  if (v37) {
    std::__shared_weak_count::__release_weak(v37);
  }
  if (v42) {
    std::__shared_weak_count::__release_weak(v42);
  }
  std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v11);
  std::__shared_weak_count::__release_weak(v9);
}

void sub_1C581A8F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17, uint64_t a18, std::__shared_weak_count *a19, void *aBlock,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,std::__shared_weak_count *a27,uint64_t a28,std::__shared_weak_count *a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,std::__shared_weak_count *a37)
{
  if (a19) {
    std::__shared_weak_count::__release_weak(a19);
  }
  if (a17) {
    std::__shared_weak_count::__release_weak(a17);
  }
  if (a29) {
    std::__shared_weak_count::__release_weak(a29);
  }
  if (a27) {
    std::__shared_weak_count::__release_weak(a27);
  }
  if (a37) {
    std::__shared_weak_count::__release_weak(a37);
  }
  std::__shared_weak_count::__release_weak(v38);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v39);
  std::__shared_weak_count::__release_weak(v37);
  _Unwind_Resume(a1);
}

void sub_1C581A9C8(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_1C581A9E4()
{
}

void ___ZN9AWDModule15appCheckIn_syncEN3awd5AppIDE_block_invoke(void *a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    uint64_t v3 = a1[4];
    uint64_t v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      uint64_t v5 = v4;
      if (a1[5])
      {
        uint64_t v6 = *(NSObject **)(v3 + 88);
        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)std::string buf = 136315138;
          uint64_t v8 = awd::asString();
          _os_log_impl(&dword_1C5767000, v6, OS_LOG_TYPE_DEFAULT, "#I Client state: %s", buf, 0xCu);
        }
      }
      if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void sub_1C581AB04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *__copy_helper_block_e8_40c33_ZTSNSt3__18weak_ptrI9AWDModuleEE56c41_ZTSNSt3__18weak_ptrIN3awd10AppContextEEE(void *result, void *a2)
{
  uint64_t v2 = a2[6];
  result[5] = a2[5];
  result[6] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  uint64_t v3 = a2[8];
  result[7] = a2[7];
  result[8] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c33_ZTSNSt3__18weak_ptrI9AWDModuleEE56c41_ZTSNSt3__18weak_ptrIN3awd10AppContextEEE(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 64);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3)
  {
    std::__shared_weak_count::__release_weak(v3);
  }
}

uint64_t ctu::Loggable<AWDModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig(uint64_t a1)
{
  return MEMORY[0x1F417DA50](a1 + 8);
}

size_t ctu::Loggable<AWDModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = (const char *)(*(uint64_t (**)(void))(*(void *)(a1 - 48) + 16))();
  size_t result = strlen(v3);
  if (result >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v5 = result;
  if (result >= 0x17)
  {
    uint64_t v6 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17) {
      uint64_t v6 = result | 7;
    }
    uint64_t v7 = v6 + 1;
    uint64_t v8 = operator new(v6 + 1);
    a2[1] = v5;
    a2[2] = v7 | 0x8000000000000000;
    *a2 = v8;
    a2 = v8;
  }
  else
  {
    *((unsigned char *)a2 + 23) = result;
    if (!result)
    {
      *(unsigned char *)a2 = 0;
      return result;
    }
  }
  size_t result = (size_t)memmove(a2, v3, v5);
  *((unsigned char *)a2 + v5) = 0;
  return result;
}

uint64_t ctu::Loggable<AWDModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return MEMORY[0x1F417DD10](a1 + 8);
}

void *ctu::Loggable<AWDModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_1F20F5C28;
  MEMORY[0x1C8790F40](a1 + 1);
  return a1;
}

void ctu::Loggable<AWDModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_1F20F5C28;
  MEMORY[0x1C8790F40](a1 + 1);

  operator delete(a1);
}

void ctu::Loggable<AWDModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(uint64_t a1)
{
  uint64_t v1 = a1 + 56;
  if (*(void *)(a1 + 56))
  {
    if (!*(void *)(a1 + 80) || (uint64_t v2 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(a1 + 80))) == 0) {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    uint64_t v3 = v2;
    ctu::LoggerCommonBase::getLogDomain((ctu::LoggerCommonBase *)(v1 - 48));
    ctu::TrackedLogger::registerLoggerToServer();
    if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_1C581AE48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

void sub_1C581AE64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void *std::shared_ptr<AWDModule>::shared_ptr[abi:ne180100]<AWDModule,std::shared_ptr<AWDModule> ctu::SharedSynchronizable<AWDModule>::make_shared_ptr<AWDModule>(AWDModule*)::{lambda(AWDModule*)#1},void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  uint64_t v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = &v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20F5C68;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)a2;
  a1[1] = v4;
  if (!a2) {
    return a1;
  }
  uint64_t v6 = *(std::__shared_weak_count **)(a2 + 128);
  if (v6)
  {
    if (v6->__shared_owners_ == -1)
    {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      *(void *)(a2 + 120) = a2;
      *(void *)(a2 + 128) = v4;
      std::__shared_weak_count::__release_weak(v6);
      if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
        goto LABEL_8;
      }
    }
    return a1;
  }
  atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  *(void *)(a2 + 120) = a2;
  *(void *)(a2 + 128) = v4;
  if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
LABEL_8:
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void sub_1C581AF90(void *a1)
{
  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[17], v1, (dispatch_function_t)std::shared_ptr<AWDModule> ctu::SharedSynchronizable<AWDModule>::make_shared_ptr<AWDModule>(AWDModule*)::{lambda(AWDModule*)#1}::operator() const(AWDModule*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_1C581AFB8(_Unwind_Exception *a1)
{
}

void std::__shared_ptr_pointer<AWDModule *,std::shared_ptr<AWDModule> ctu::SharedSynchronizable<AWDModule>::make_shared_ptr<AWDModule>(AWDModule*)::{lambda(AWDModule *)#1},std::allocator<AWDModule>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<AWDModule *,std::shared_ptr<AWDModule> ctu::SharedSynchronizable<AWDModule>::make_shared_ptr<AWDModule>(AWDModule*)::{lambda(AWDModule *)#1},std::allocator<AWDModule>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<AWDModule *,std::shared_ptr<AWDModule> ctu::SharedSynchronizable<AWDModule>::make_shared_ptr<AWDModule>(AWDModule*)::{lambda(AWDModule *)#1},std::allocator<AWDModule>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableI9AWDModuleE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_") {
    return a1 + 24;
  }
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableI9AWDModuleE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableI9AWDModuleE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_"))return 0; {
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableI9AWDModuleE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  }
  return 0;
}

uint64_t std::shared_ptr<AWDModule> ctu::SharedSynchronizable<AWDModule>::make_shared_ptr<AWDModule>(AWDModule*)::{lambda(AWDModule*)#1}::operator() const(AWDModule*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void ctu::SharedLoggable<AWDModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(void *a1)
{
  *a1 = &unk_1F20F5C28;
  MEMORY[0x1C8790F40](a1 + 1);
  uint64_t v2 = a1[12];
  if (v2) {
    dispatch_release(v2);
  }
  unint64_t v3 = a1[11];
  if (v3) {
    dispatch_release(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[10];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }

  operator delete(a1);
}

void ___ZNK3ctu20SharedSynchronizableI9AWDModuleE20execute_wrapped_syncIZNS1_4initEvE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS5__block_invoke(uint64_t a1)
{
  uint64_t v1 = *(NSObject **)(**(void **)(a1 + 40) + 88);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v2 = 0;
    _os_log_impl(&dword_1C5767000, v1, OS_LOG_TYPE_DEFAULT, "#I Initializing", v2, 2u);
  }
}

void ctu::SharedSynchronizable<AWDModule>::execute_wrapped(uint64_t *a1, uint64_t a2)
{
  unint64_t v3 = (std::__shared_weak_count *)a1[1];
  if (!v3 || (uint64_t v5 = *a1, (v6 = std::__shared_weak_count::lock(v3)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v7 = v6;
  uint64_t v8 = a1[2];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 1174405120;
  block[2] = ___ZNK3ctu20SharedSynchronizableI9AWDModuleE15execute_wrappedEU13block_pointerFvvE_block_invoke;
  block[3] = &unk_1F20F5CF0;
  void block[5] = v5;
  xpc_object_t v12 = v7;
  p_shared_owners = &v7->__shared_owners_;
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  void block[4] = a2;
  dispatch_async(v8, block);
  uint64_t v10 = v12;
  if (!v12 || atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      return;
    }
LABEL_8:
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    return;
  }
  ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
  std::__shared_weak_count::__release_weak(v10);
  if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_8;
  }
}

uint64_t ___ZNK3ctu20SharedSynchronizableI9AWDModuleE15execute_wrappedEU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t __copy_helper_block_e8_40c37_ZTSNSt3__110shared_ptrIK9AWDModuleEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c37_ZTSNSt3__110shared_ptrIK9AWDModuleEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI9AWDModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb0_E3__1EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_(void *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *(void *)(*a1 + 16);
  uint64_t v37 = 0;
  int64_t v38 = &v37;
  uint64_t v39 = 0x2000000000;
  int v40 = -534716414;
  if (MEMORY[0x1C8792D30](*(void *)(v2 + 24)) == MEMORY[0x1E4F14590])
  {
    xpc_object_t value = (char *)xpc_dictionary_get_value(*(xpc_object_t *)(v2 + 24), (const char *)*MEMORY[0x1E4F4D300]);
    std::string v41 = value;
    if (value) {
      xpc_retain(value);
    }
    else {
      std::string v41 = (char *)xpc_null_create();
    }
    unsigned __int8 v13 = xpc::dyn_cast_or_default((xpc *)&v41, (const object *)0xFFFFFFFFLL);
    xpc_release(v41);
    if (v13 != 1)
    {
      if (v13)
      {
        if ((v13 - 2) > 3u) {
          goto LABEL_2;
        }
      }
      else if ((capabilities::abs::supportsWirelessTelemetryUsingMultiClientModel(v14) & 1) == 0)
      {
        goto LABEL_2;
      }
    }
    uint64_t v15 = *(void *)(v3 + 176);
    if (!v15) {
      goto LABEL_33;
    }
    uint64_t v16 = v3 + 176;
    do
    {
      unsigned int v17 = *(unsigned __int8 *)(v15 + 32);
      BOOL v18 = v17 >= v13;
      if (v17 >= v13) {
        uint64_t v19 = (uint64_t *)v15;
      }
      else {
        uint64_t v19 = (uint64_t *)(v15 + 8);
      }
      if (v18) {
        uint64_t v16 = v15;
      }
      uint64_t v15 = *v19;
    }
    while (*v19);
    if (v16 != v3 + 176 && *(unsigned __int8 *)(v16 + 32) <= v13)
    {
      xpc_object_t v21 = *(char **)(v16 + 40);
      long long v20 = *(std::__shared_weak_count **)(v16 + 48);
      if (v20) {
        atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
      }
    }
    else
    {
LABEL_33:
      AWDModule::appCheckIn_sync(v3, v13, &v41);
      xpc_object_t v21 = v41;
      long long v20 = (std::__shared_weak_count *)v42;
    }
    if (v21)
    {
      *((_DWORD *)v38 + 6) = -534716416;
      size_t v22 = (char *)xpc_dictionary_get_value(*(xpc_object_t *)(v2 + 24), (const char *)*MEMORY[0x1E4F4C248]);
      std::string v41 = v22;
      if (v22) {
        xpc_retain(v22);
      }
      else {
        std::string v41 = (char *)xpc_null_create();
      }
      unsigned __int8 v23 = xpc::dyn_cast_or_default((xpc *)&v41, (const object *)0xFFFFFFFFLL);
      xpc_release(v41);
      memset(__p, 170, sizeof(__p));
      xpc_object_t v24 = xpc_dictionary_get_value(*(xpc_object_t *)(v2 + 24), (const char *)*MEMORY[0x1E4F4C0F0]);
      xpc_object_t object = v24;
      if (v24) {
        xpc_retain(v24);
      }
      else {
        xpc_object_t object = xpc_null_create();
      }
      std::string v41 = 0;
      CFTypeRef v42 = 0;
      uint64_t v43 = 0;
      xpc::dyn_cast_or_default();
      if (v41)
      {
        CFTypeRef v42 = v41;
        operator delete(v41);
      }
      xpc_release(object);
      uint64_t v25 = __p[0];
      if (__p[1] != __p[0] && v23 <= 2u)
      {
        v34[0] = (uint64_t)v21;
        v34[1] = (uint64_t)v20;
        if (v20) {
          atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        aBlock[0] = MEMORY[0x1E4F143A8];
        aBlock[1] = 1174405120;
        aBlock[2] = ___ZZZZN9AWDModule10initializeEN8dispatch13group_sessionEEUb_EUb0_ENK3__1clEv_block_invoke;
        aBlock[3] = &unk_1F20F5D60;
        void aBlock[5] = v3;
        uint64_t v26 = *(void **)(v2 + 32);
        if (v26) {
          uint64_t v26 = _Block_copy(v26);
        }
        int v30 = v26;
        uint64_t v31 = v21;
        uint64_t v32 = v20;
        if (v20) {
          atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        aBlock[4] = &v37;
        uint64_t v27 = _Block_copy(aBlock);
        long long v33 = v27;
        AWDModule::sendPayload_sync(v3, v34, v23, (uint64_t)__p, (uint64_t)&v33);
        if (v27) {
          _Block_release(v27);
        }
        if (v20 && !atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
        }
        size_t v28 = v32;
        if (v32 && !atomic_fetch_add(&v32->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
          std::__shared_weak_count::__release_weak(v28);
        }
        if (v30) {
          _Block_release(v30);
        }
        uint64_t v25 = __p[0];
      }
      if (v25)
      {
        __p[1] = v25;
        operator delete(v25);
      }
    }
    if (v20 && !atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
LABEL_2:
  uint64_t v4 = v38;
  if (*((_DWORD *)v38 + 6) == -534716414)
  {
    uint64_t v5 = (char *)xpc_null_create();
    uint64_t v6 = *(void *)(v2 + 32);
    uint64_t v7 = *((unsigned int *)v4 + 6);
    std::string v41 = v5;
    xpc_object_t v8 = xpc_null_create();
    (*(void (**)(uint64_t, uint64_t, char **))(v6 + 16))(v6, v7, &v41);
    xpc_release(v41);
    xpc_release(v8);
    _Block_object_dispose(&v37, 8);
  }
  else
  {
    _Block_object_dispose(&v37, 8);
    if (!v2) {
      goto LABEL_10;
    }
  }
  uint64_t v9 = *(const void **)(v2 + 32);
  if (v9) {
    _Block_release(v9);
  }
  xpc_release(*(xpc_object_t *)(v2 + 24));
  *(void *)(v2 + 24) = 0;
  uint64_t v10 = *(std::__shared_weak_count **)(v2 + 8);
  if (v10) {
    std::__shared_weak_count::__release_weak(v10);
  }
  operator delete((void *)v2);
LABEL_10:
  uint64_t v11 = (std::__shared_weak_count *)a1[2];
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  operator delete(a1);
}

void sub_1C581B8D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *aBlock, uint64_t a17, std::__shared_weak_count *a18, uint64_t a19, uint64_t a20,std::__shared_weak_count *a21,xpc_object_t object,void *__p,uint64_t a24)
{
  if (v27) {
    _Block_release(v27);
  }
  if (a18 && !atomic_fetch_add(&a18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))a18->__on_zero_shared)(a18);
    std::__shared_weak_count::__release_weak(a18);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (a21 && !atomic_fetch_add(&a21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))a21->__on_zero_shared)(a21);
    std::__shared_weak_count::__release_weak(a21);
  }
  if (__p) {
    operator delete(__p);
  }
  if (v26 && !atomic_fetch_add(&v26->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
    std::__shared_weak_count::__release_weak(v26);
  }
  _Block_object_dispose((const void *)(v28 - 120), 8);
  int v30 = *(const void **)(v25 + 32);
  if (v30) {
    _Block_release(v30);
  }
  xpc_release(*(xpc_object_t *)(v25 + 24));
  *(void *)(v25 + 24) = 0;
  uint64_t v31 = *(std::__shared_weak_count **)(v25 + 8);
  if (v31) {
    std::__shared_weak_count::__release_weak(v31);
  }
  operator delete((void *)v25);
  uint64_t v32 = (std::__shared_weak_count *)v24[2];
  if (v32)
  {
    if (!atomic_fetch_add(&v32->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  operator delete(v24);
  _Unwind_Resume(a1);
}

void ___ZZZZN9AWDModule10initializeEN8dispatch13group_sessionEEUb_EUb0_ENK3__1clEv_block_invoke(void *a1, char a2)
{
  if (a2)
  {
    uint64_t v3 = a1[5];
    uint64_t v4 = (std::__shared_weak_count *)a1[8];
    v15[0] = a1[7];
    v15[1] = (uint64_t)v4;
    if (v4) {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 1174405120;
    aBlock[2] = ___ZZZZN9AWDModule10initializeEN8dispatch13group_sessionEEUb_EUb0_ENK3__1clEv_block_invoke_2;
    aBlock[3] = &unk_1F20F5D28;
    aBlock[4] = a1[4];
    char v13 = 1;
    uint64_t v5 = (void *)a1[6];
    if (v5) {
      uint64_t v5 = _Block_copy(v5);
    }
    xpc_object_t v12 = v5;
    uint64_t v6 = _Block_copy(aBlock);
    size_t v14 = v6;
    AWDModule::enableMetricSubmission_sync(v3, v15, 1, (uint64_t)&v14);
    if (v6) {
      _Block_release(v6);
    }
    if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
      uint64_t v7 = v12;
      if (v12) {
        goto LABEL_11;
      }
    }
    else
    {
      uint64_t v7 = v12;
      if (v12) {
LABEL_11:
      }
        _Block_release(v7);
    }
  }
  else
  {
    xpc_object_t v8 = xpc_null_create();
    uint64_t v9 = a1[6];
    xpc_object_t v16 = v8;
    xpc_object_t v10 = xpc_null_create();
    (*(void (**)(uint64_t, uint64_t, xpc_object_t *))(v9 + 16))(v9, 3760250880, &v16);
    xpc_release(v16);
    xpc_release(v10);
  }
}

void sub_1C581BCE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *aBlock)
{
  xpc_release(*(xpc_object_t *)(v16 - 40));
  xpc_release(v15);
  _Unwind_Resume(a1);
}

void ___ZZZZN9AWDModule10initializeEN8dispatch13group_sessionEEUb_EUb0_ENK3__1clEv_block_invoke_2(uint64_t a1, unsigned __int8 a2)
{
  if (((*(unsigned char *)(a1 + 48) != 0) & a2) != 0) {
    int v3 = 0;
  }
  else {
    int v3 = -534716416;
  }
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = v3;
  uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 8);
  xpc_object_t v5 = xpc_null_create();
  uint64_t v6 = *(void *)(a1 + 40);
  uint64_t v7 = *(unsigned int *)(v4 + 24);
  xpc_object_t object = v5;
  xpc_object_t v8 = xpc_null_create();
  (*(void (**)(uint64_t, uint64_t, xpc_object_t *))(v6 + 16))(v6, v7, &object);
  xpc_release(object);
  xpc_release(v8);
}

void sub_1C581BDEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  xpc_release(object);
  xpc_release(v10);
  _Unwind_Resume(a1);
}

void *__copy_helper_block_e8_48c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE56c44_ZTSNSt3__110shared_ptrIN3awd10AppContextEEE(void *a1, void *a2)
{
  size_t result = (void *)a2[6];
  if (result) {
    size_t result = _Block_copy(result);
  }
  uint64_t v6 = a2[7];
  uint64_t v5 = a2[8];
  a1[6] = result;
  a1[7] = v6;
  a1[8] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_48c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE56c44_ZTSNSt3__110shared_ptrIN3awd10AppContextEEE(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 64);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    int v3 = *(const void **)(a1 + 48);
    if (!v3) {
      return;
    }
  }
  else
  {
    int v3 = *(const void **)(a1 + 48);
    if (!v3) {
      return;
    }
  }
  _Block_release(v3);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI9AWDModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb1_E3__2EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_(void *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *(void *)(*a1 + 16);
  uint64_t v28 = 0;
  uint64_t v29 = &v28;
  uint64_t v30 = 0x2000000000;
  int v31 = -534716414;
  if (MEMORY[0x1C8792D30](*(void *)(v2 + 24)) == MEMORY[0x1E4F14590])
  {
    xpc_object_t value = xpc_dictionary_get_value(*(xpc_object_t *)(v2 + 24), (const char *)*MEMORY[0x1E4F4D300]);
    xpc_object_t v32 = value;
    if (value) {
      xpc_retain(value);
    }
    else {
      xpc_object_t v32 = xpc_null_create();
    }
    unsigned __int8 v13 = xpc::dyn_cast_or_default((xpc *)&v32, (const object *)0xFFFFFFFFLL);
    xpc_release(v32);
    if (v13 != 1)
    {
      if (v13)
      {
        if (v13 - 2 > 3) {
          goto LABEL_2;
        }
      }
      else if ((capabilities::abs::supportsWirelessTelemetryUsingMultiClientModel(v14) & 1) == 0)
      {
        goto LABEL_2;
      }
    }
    uint64_t v15 = *(void *)(v3 + 176);
    if (v15)
    {
      uint64_t v16 = v3 + 176;
      do
      {
        unsigned int v17 = *(unsigned __int8 *)(v15 + 32);
        BOOL v18 = v17 >= v13;
        if (v17 >= v13) {
          uint64_t v19 = (uint64_t *)v15;
        }
        else {
          uint64_t v19 = (uint64_t *)(v15 + 8);
        }
        if (v18) {
          uint64_t v16 = v15;
        }
        uint64_t v15 = *v19;
      }
      while (*v19);
      if (v16 != v3 + 176 && *(unsigned __int8 *)(v16 + 32) <= v13)
      {
        *((_DWORD *)v29 + 6) = -534716416;
        long long v20 = *(std::__shared_weak_count **)(v16 + 48);
        v27[0] = *(void *)(v16 + 40);
        v27[1] = (uint64_t)v20;
        if (v20) {
          atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        v23[0] = MEMORY[0x1E4F143A8];
        v23[1] = 1174405120;
        v23[2] = ___ZZZZN9AWDModule10initializeEN8dispatch13group_sessionEEUb_EUb1_ENK3__2clEv_block_invoke;
        v23[3] = &unk_1F20F5DD0;
        v23[5] = v3;
        xpc_object_t v21 = *(void **)(v2 + 32);
        if (v21) {
          xpc_object_t v21 = _Block_copy(v21);
        }
        aBlocunint64_t k = v21;
        uint64_t v25 = v16;
        v23[4] = &v28;
        size_t v22 = _Block_copy(v23);
        uint64_t v26 = v22;
        AWDModule::clearConfiguration_sync(v3, v27, (uint64_t)&v26);
        if (v22) {
          _Block_release(v22);
        }
        if (v20 && !atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
        }
        if (aBlock) {
          _Block_release(aBlock);
        }
      }
    }
  }
LABEL_2:
  uint64_t v4 = v29;
  if (*((_DWORD *)v29 + 6) == -534716414)
  {
    xpc_object_t v5 = xpc_null_create();
    uint64_t v6 = *(void *)(v2 + 32);
    uint64_t v7 = *((unsigned int *)v4 + 6);
    xpc_object_t v32 = v5;
    xpc_object_t v8 = xpc_null_create();
    (*(void (**)(uint64_t, uint64_t, xpc_object_t *))(v6 + 16))(v6, v7, &v32);
    xpc_release(v32);
    xpc_release(v8);
    _Block_object_dispose(&v28, 8);
  }
  else
  {
    _Block_object_dispose(&v28, 8);
    if (!v2) {
      goto LABEL_10;
    }
  }
  uint64_t v9 = *(const void **)(v2 + 32);
  if (v9) {
    _Block_release(v9);
  }
  xpc_release(*(xpc_object_t *)(v2 + 24));
  *(void *)(v2 + 24) = 0;
  xpc_object_t v10 = *(std::__shared_weak_count **)(v2 + 8);
  if (v10) {
    std::__shared_weak_count::__release_weak(v10);
  }
  operator delete((void *)v2);
LABEL_10:
  uint64_t v11 = (std::__shared_weak_count *)a1[2];
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  operator delete(a1);
}

void sub_1C581C20C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *aBlock, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  if (v23) {
    _Block_release(v23);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v22 && !atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
  }
  _Block_object_dispose(&a20, 8);
  uint64_t v25 = *(const void **)(v21 + 32);
  if (v25) {
    _Block_release(v25);
  }
  xpc_release(*(xpc_object_t *)(v21 + 24));
  *(void *)(v21 + 24) = 0;
  uint64_t v26 = *(std::__shared_weak_count **)(v21 + 8);
  if (v26) {
    std::__shared_weak_count::__release_weak(v26);
  }
  operator delete((void *)v21);
  uint64_t v27 = (std::__shared_weak_count *)v20[2];
  if (v27)
  {
    if (!atomic_fetch_add(&v27->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  operator delete(v20);
  _Unwind_Resume(a1);
}

void ___ZZZZN9AWDModule10initializeEN8dispatch13group_sessionEEUb_EUb1_ENK3__2clEv_block_invoke(void *a1, char a2)
{
  if (a2)
  {
    uint64_t v3 = a1[5];
    uint64_t v4 = a1[7];
    xpc_object_t v5 = *(std::__shared_weak_count **)(v4 + 48);
    v16[0] = *(void *)(v4 + 40);
    v16[1] = (uint64_t)v5;
    if (v5) {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 1174405120;
    aBlock[2] = ___ZZZZN9AWDModule10initializeEN8dispatch13group_sessionEEUb_EUb1_ENK3__2clEv_block_invoke_2;
    aBlock[3] = &unk_1F20F5D98;
    aBlock[4] = a1[4];
    char v14 = 1;
    uint64_t v6 = (void *)a1[6];
    if (v6) {
      uint64_t v6 = _Block_copy(v6);
    }
    unsigned __int8 v13 = v6;
    uint64_t v7 = _Block_copy(aBlock);
    uint64_t v15 = v7;
    AWDModule::enableMetricSubmission_sync(v3, v16, 0, (uint64_t)&v15);
    if (v7) {
      _Block_release(v7);
    }
    if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      xpc_object_t v8 = v13;
      if (v13) {
        goto LABEL_11;
      }
    }
    else
    {
      xpc_object_t v8 = v13;
      if (v13) {
LABEL_11:
      }
        _Block_release(v8);
    }
  }
  else
  {
    xpc_object_t v9 = xpc_null_create();
    uint64_t v10 = a1[6];
    xpc_object_t v17 = v9;
    xpc_object_t v11 = xpc_null_create();
    (*(void (**)(uint64_t, uint64_t, xpc_object_t *))(v10 + 16))(v10, 3760250880, &v17);
    xpc_release(v17);
    xpc_release(v11);
  }
}

void sub_1C581C510(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *aBlock)
{
  xpc_release(*(xpc_object_t *)(v16 - 40));
  xpc_release(v15);
  _Unwind_Resume(a1);
}

void ___ZZZZN9AWDModule10initializeEN8dispatch13group_sessionEEUb_EUb1_ENK3__2clEv_block_invoke_2(uint64_t a1, unsigned __int8 a2)
{
  if (((*(unsigned char *)(a1 + 48) != 0) & a2) != 0) {
    int v3 = 0;
  }
  else {
    int v3 = -534716416;
  }
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = v3;
  uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 8);
  xpc_object_t v5 = xpc_null_create();
  uint64_t v6 = *(void *)(a1 + 40);
  uint64_t v7 = *(unsigned int *)(v4 + 24);
  xpc_object_t object = v5;
  xpc_object_t v8 = xpc_null_create();
  (*(void (**)(uint64_t, uint64_t, xpc_object_t *))(v6 + 16))(v6, v7, &object);
  xpc_release(object);
  xpc_release(v8);
}

void sub_1C581C618(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  xpc_release(object);
  xpc_release(v10);
  _Unwind_Resume(a1);
}

void *__copy_helper_block_e8_48c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE(uint64_t a1, uint64_t a2)
{
  size_t result = *(void **)(a2 + 48);
  if (result) {
    size_t result = _Block_copy(result);
  }
  *(void *)(a1 + 48) = result;
  return result;
}

void __destroy_helper_block_e8_48c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE(uint64_t a1)
{
  uint64_t v1 = *(const void **)(a1 + 48);
  if (v1) {
    _Block_release(v1);
  }
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI9AWDModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb2_E3__3EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_(void *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *(void *)(*a1 + 16);
  uint64_t v43 = 0;
  int64_t v44 = &v43;
  uint64_t v45 = 0x2000000000;
  int v46 = -534716414;
  if (MEMORY[0x1C8792D30](*(void *)(v2 + 24)) == MEMORY[0x1E4F14590])
  {
    xpc_object_t value = xpc_dictionary_get_value(*(xpc_object_t *)(v2 + 24), (const char *)*MEMORY[0x1E4F4D300]);
    v47[0] = value;
    if (value) {
      xpc_retain(value);
    }
    else {
      v47[0] = xpc_null_create();
    }
    unsigned __int8 v13 = xpc::dyn_cast_or_default((xpc *)v47, (const object *)0xFFFFFFFFLL);
    xpc_release(v47[0]);
    if (v13 <= 5u
      && (((1 << v13) & 0x36) != 0
       || !v13 && capabilities::abs::supportsWirelessTelemetryUsingMultiClientModel(v14)))
    {
      uint64_t v15 = *(void *)(v3 + 176);
      if (v15)
      {
        uint64_t v16 = v3 + 176;
        do
        {
          unsigned int v17 = *(unsigned __int8 *)(v15 + 32);
          BOOL v18 = v17 >= v13;
          if (v17 >= v13) {
            uint64_t v19 = (uint64_t *)v15;
          }
          else {
            uint64_t v19 = (uint64_t *)(v15 + 8);
          }
          if (v18) {
            uint64_t v16 = v15;
          }
          uint64_t v15 = *v19;
        }
        while (*v19);
        if (v16 != v3 + 176 && *(unsigned __int8 *)(v16 + 32) <= v13)
        {
          *((_DWORD *)v44 + 6) = -534716416;
          xpc_object_t v20 = xpc_dictionary_get_value(*(xpc_object_t *)(v2 + 24), (const char *)*MEMORY[0x1E4F4C1F0]);
          v47[0] = v20;
          if (v20) {
            xpc_retain(v20);
          }
          else {
            v47[0] = xpc_null_create();
          }
          int v35 = xpc::dyn_cast_or_default((xpc *)v47, 0);
          xpc_release(v47[0]);
          xpc_object_t v21 = xpc_dictionary_get_value(*(xpc_object_t *)(v2 + 24), (const char *)*MEMORY[0x1E4F4C278]);
          v47[0] = v21;
          if (v21) {
            xpc_retain(v21);
          }
          else {
            v47[0] = xpc_null_create();
          }
          int v22 = xpc::dyn_cast_or_default((xpc *)v47, 0);
          xpc_release(v47[0]);
          xpc_object_t v23 = xpc_dictionary_get_value(*(xpc_object_t *)(v2 + 24), (const char *)*MEMORY[0x1E4F4C1A8]);
          v47[0] = v23;
          if (v23) {
            xpc_retain(v23);
          }
          else {
            v47[0] = xpc_null_create();
          }
          int v24 = xpc::dyn_cast_or_default((xpc *)v47, 0);
          xpc_release(v47[0]);
          xpc_object_t v25 = xpc_dictionary_get_value(*(xpc_object_t *)(v2 + 24), (const char *)*MEMORY[0x1E4F4C178]);
          v47[0] = v25;
          if (v25) {
            xpc_retain(v25);
          }
          else {
            v47[0] = xpc_null_create();
          }
          int v26 = xpc::dyn_cast_or_default((xpc *)v47, 0);
          xpc_release(v47[0]);
          xpc_object_t v27 = xpc_dictionary_get_value(*(xpc_object_t *)(v2 + 24), (const char *)*MEMORY[0x1E4F4C130]);
          v47[0] = v27;
          if (v27) {
            xpc_retain(v27);
          }
          else {
            v47[0] = xpc_null_create();
          }
          int v28 = xpc::dyn_cast_or_default((xpc *)v47, 0);
          xpc_release(v47[0]);
          xpc_object_t v29 = xpc_dictionary_get_value(*(xpc_object_t *)(v2 + 24), (const char *)*MEMORY[0x1E4F4C2D0]);
          v47[0] = v29;
          if (v29) {
            xpc_retain(v29);
          }
          else {
            v47[0] = xpc_null_create();
          }
          int v30 = xpc::dyn_cast_or_default((xpc *)v47, 0);
          xpc_release(v47[0]);
          uint64_t v31 = *(void *)(v16 + 40);
          xpc_object_t v32 = *(std::__shared_weak_count **)(v16 + 48);
          v42[0] = v31;
          v42[1] = (uint64_t)v32;
          if (v32) {
            atomic_fetch_add_explicit(&v32->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          v41[0] = v26;
          v41[1] = v28;
          v41[2] = 0;
          v41[3] = v30;
          v41[4] = -1431699456;
          v41[5] = -1431655936;
          void v41[6] = -1431655936;
          v39[0] = v24;
          v39[1] = v35;
          void v39[2] = v22;
          v39[3] = -1431655766;
          uint64_t v40 = 0;
          aBlock[0] = MEMORY[0x1E4F143A8];
          aBlock[1] = 1174405120;
          aBlock[2] = ___ZZZZN9AWDModule10initializeEN8dispatch13group_sessionEEUb_EUb2_ENK3__3clEv_block_invoke;
          aBlock[3] = &unk_1F20F5E08;
          aBlock[4] = &v43;
          long long v33 = *(void **)(v2 + 32);
          if (v33) {
            long long v33 = _Block_copy(v33);
          }
          uint64_t v37 = v33;
          uint64_t v34 = _Block_copy(aBlock);
          int64_t v38 = v34;
          AWDModule::queryMetric_sync(v3, v42, (uint64_t)v41, (uint64_t)v39, (uint64_t)&v38);
          if (v34) {
            _Block_release(v34);
          }
          if (v32 && !atomic_fetch_add(&v32->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
            std::__shared_weak_count::__release_weak(v32);
          }
          if (v37) {
            _Block_release(v37);
          }
        }
      }
    }
  }
  uint64_t v4 = v44;
  if (*((_DWORD *)v44 + 6) == -534716414)
  {
    xpc_object_t v5 = xpc_null_create();
    uint64_t v6 = *(void *)(v2 + 32);
    uint64_t v7 = *((unsigned int *)v4 + 6);
    v47[0] = v5;
    xpc_object_t v8 = xpc_null_create();
    (*(void (**)(uint64_t, uint64_t, xpc_object_t *))(v6 + 16))(v6, v7, v47);
    xpc_release(v47[0]);
    xpc_release(v8);
    _Block_object_dispose(&v43, 8);
  }
  else
  {
    _Block_object_dispose(&v43, 8);
    if (!v2) {
      goto LABEL_10;
    }
  }
  xpc_object_t v9 = *(const void **)(v2 + 32);
  if (v9) {
    _Block_release(v9);
  }
  xpc_release(*(xpc_object_t *)(v2 + 24));
  *(void *)(v2 + 24) = 0;
  uint64_t v10 = *(std::__shared_weak_count **)(v2 + 8);
  if (v10) {
    std::__shared_weak_count::__release_weak(v10);
  }
  operator delete((void *)v2);
LABEL_10:
  xpc_object_t v11 = (std::__shared_weak_count *)a1[2];
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  operator delete(a1);
}

void sub_1C581CBB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *aBlock)
{
  if (v18) {
    _Block_release(v18);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
  _Block_object_dispose((const void *)(v20 - 128), 8);
  int v22 = *(const void **)(v17 + 32);
  if (v22) {
    _Block_release(v22);
  }
  xpc_release(*(xpc_object_t *)(v17 + 24));
  *(void *)(v17 + 24) = 0;
  xpc_object_t v23 = *(std::__shared_weak_count **)(v17 + 8);
  if (v23) {
    std::__shared_weak_count::__release_weak(v23);
  }
  operator delete((void *)v17);
  int v24 = (std::__shared_weak_count *)v16[2];
  if (v24)
  {
    if (!atomic_fetch_add(&v24->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  operator delete(v16);
  _Unwind_Resume(a1);
}

void ___ZZZZN9AWDModule10initializeEN8dispatch13group_sessionEEUb_EUb2_ENK3__3clEv_block_invoke(uint64_t a1, int a2)
{
  if (a2) {
    int v3 = 0;
  }
  else {
    int v3 = -534716416;
  }
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = v3;
  uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 8);
  xpc_object_t v5 = xpc_null_create();
  uint64_t v6 = *(void *)(a1 + 40);
  uint64_t v7 = *(unsigned int *)(v4 + 24);
  xpc_object_t object = v5;
  xpc_object_t v8 = xpc_null_create();
  (*(void (**)(uint64_t, uint64_t, xpc_object_t *))(v6 + 16))(v6, v7, &object);
  xpc_release(object);
  xpc_release(v8);
}

void sub_1C581CE78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  xpc_release(object);
  xpc_release(v10);
  _Unwind_Resume(a1);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI9AWDModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb3_E3__4EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_(void *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *(void *)(*a1 + 16);
  uint64_t v31 = 0;
  xpc_object_t v32 = &v31;
  uint64_t v33 = 0x2000000000;
  int v34 = -534716414;
  if (MEMORY[0x1C8792D30](*(void *)(v2 + 24)) == MEMORY[0x1E4F14590])
  {
    xpc_object_t value = xpc_dictionary_get_value(*(xpc_object_t *)(v2 + 24), (const char *)*MEMORY[0x1E4F4D300]);
    xpc_object_t v35 = value;
    if (value) {
      xpc_retain(value);
    }
    else {
      xpc_object_t v35 = xpc_null_create();
    }
    unsigned __int8 v13 = xpc::dyn_cast_or_default((xpc *)&v35, (const object *)0xFFFFFFFFLL);
    xpc_release(v35);
    if (v13 <= 5u
      && (((1 << v13) & 0x36) != 0
       || !v13 && capabilities::abs::supportsWirelessTelemetryUsingMultiClientModel(v14)))
    {
      uint64_t v15 = *(void *)(v3 + 176);
      if (v15)
      {
        uint64_t v16 = v3 + 176;
        do
        {
          unsigned int v17 = *(unsigned __int8 *)(v15 + 32);
          BOOL v18 = v17 >= v13;
          if (v17 >= v13) {
            uint64_t v19 = (uint64_t *)v15;
          }
          else {
            uint64_t v19 = (uint64_t *)(v15 + 8);
          }
          if (v18) {
            uint64_t v16 = v15;
          }
          uint64_t v15 = *v19;
        }
        while (*v19);
        if (v16 != v3 + 176 && *(unsigned __int8 *)(v16 + 32) <= v13)
        {
          *((_DWORD *)v32 + 6) = -534716416;
          xpc_object_t v20 = xpc_dictionary_get_value(*(xpc_object_t *)(v2 + 24), (const char *)*MEMORY[0x1E4F4C4A8]);
          xpc_object_t v35 = v20;
          if (v20) {
            xpc_retain(v20);
          }
          else {
            xpc_object_t v35 = xpc_null_create();
          }
          char v21 = xpc::dyn_cast_or_default((xpc *)&v35, 0);
          xpc_release(v35);
          xpc_object_t v22 = xpc_dictionary_get_value(*(xpc_object_t *)(v2 + 24), (const char *)*MEMORY[0x1E4F4C1D8]);
          xpc_object_t v35 = v22;
          if (v22) {
            xpc_retain(v22);
          }
          else {
            xpc_object_t v35 = xpc_null_create();
          }
          char v23 = xpc::dyn_cast_or_default((xpc *)&v35, 0);
          xpc_release(v35);
          LOWORD(v35) = -21846;
          BYTE2(v35) = -86;
          LOBYTE(v35) = awd::AppContext::getProperties(*(awd::AppContext **)(v16 + 40));
          BYTE1(v35) = v23;
          BYTE2(v35) = v21;
          awd::AppContext::setProperties();
          int v24 = *(std::__shared_weak_count **)(v16 + 48);
          v30[0] = *(void *)(v16 + 40);
          v30[1] = (uint64_t)v24;
          if (v24) {
            atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          v27[0] = MEMORY[0x1E4F143A8];
          v27[1] = 1174405120;
          uint64_t v27[2] = ___ZZZZN9AWDModule10initializeEN8dispatch13group_sessionEEUb_EUb3_ENK3__4clEv_block_invoke;
          v27[3] = &unk_1F20F5E40;
          v27[4] = &v31;
          xpc_object_t v25 = *(void **)(v2 + 32);
          if (v25) {
            xpc_object_t v25 = _Block_copy(v25);
          }
          aBlocunint64_t k = v25;
          int v26 = _Block_copy(v27);
          xpc_object_t v29 = v26;
          AWDModule::updateProperties_sync(v3, v30, (uint64_t)&v29);
          if (v26) {
            _Block_release(v26);
          }
          if (v24 && !atomic_fetch_add(&v24->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v24);
          }
          if (aBlock) {
            _Block_release(aBlock);
          }
        }
      }
    }
  }
  uint64_t v4 = v32;
  if (*((_DWORD *)v32 + 6) == -534716414)
  {
    xpc_object_t v5 = xpc_null_create();
    uint64_t v6 = *(void *)(v2 + 32);
    uint64_t v7 = *((unsigned int *)v4 + 6);
    xpc_object_t v35 = v5;
    xpc_object_t v8 = xpc_null_create();
    (*(void (**)(uint64_t, uint64_t, xpc_object_t *))(v6 + 16))(v6, v7, &v35);
    xpc_release(v35);
    xpc_release(v8);
    _Block_object_dispose(&v31, 8);
  }
  else
  {
    _Block_object_dispose(&v31, 8);
    if (!v2) {
      goto LABEL_10;
    }
  }
  xpc_object_t v9 = *(const void **)(v2 + 32);
  if (v9) {
    _Block_release(v9);
  }
  xpc_release(*(xpc_object_t *)(v2 + 24));
  *(void *)(v2 + 24) = 0;
  uint64_t v10 = *(std::__shared_weak_count **)(v2 + 8);
  if (v10) {
    std::__shared_weak_count::__release_weak(v10);
  }
  operator delete((void *)v2);
LABEL_10:
  xpc_object_t v11 = (std::__shared_weak_count *)a1[2];
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  operator delete(a1);
}

void sub_1C581D288(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *aBlock, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  if (v21) {
    _Block_release(v21);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v20 && !atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
  _Block_object_dispose(&a18, 8);
  char v23 = *(const void **)(v19 + 32);
  if (v23) {
    _Block_release(v23);
  }
  xpc_release(*(xpc_object_t *)(v19 + 24));
  *(void *)(v19 + 24) = 0;
  int v24 = *(std::__shared_weak_count **)(v19 + 8);
  if (v24) {
    std::__shared_weak_count::__release_weak(v24);
  }
  operator delete((void *)v19);
  xpc_object_t v25 = (std::__shared_weak_count *)v18[2];
  if (v25)
  {
    if (!atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  operator delete(v18);
  _Unwind_Resume(a1);
}

void ___ZZZZN9AWDModule10initializeEN8dispatch13group_sessionEEUb_EUb3_ENK3__4clEv_block_invoke(uint64_t a1, int a2)
{
  if (a2) {
    int v3 = 0;
  }
  else {
    int v3 = -534716416;
  }
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = v3;
  uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 8);
  xpc_object_t v5 = xpc_null_create();
  uint64_t v6 = *(void *)(a1 + 40);
  uint64_t v7 = *(unsigned int *)(v4 + 24);
  xpc_object_t object = v5;
  xpc_object_t v8 = xpc_null_create();
  (*(void (**)(uint64_t, uint64_t, xpc_object_t *))(v6 + 16))(v6, v7, &object);
  xpc_release(object);
  xpc_release(v8);
}

void sub_1C581D4D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  xpc_release(object);
  xpc_release(v10);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<awd::AppContext>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20F5E80;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<awd::AppContext>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20F5E80;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_emplace<awd::AppContext>::__on_zero_shared(void *a1)
{
  uint64_t v2 = (const void *)a1[10];
  if (v2) {
    _Block_release(v2);
  }
  int v3 = (const void *)a1[9];
  if (v3) {
    _Block_release(v3);
  }
  uint64_t v4 = (const void *)a1[8];
  if (v4) {
    _Block_release(v4);
  }
  xpc_object_t v5 = (const void *)a1[7];
  if (v5) {
    _Block_release(v5);
  }
  uint64_t v6 = (const void *)a1[6];
  if (v6) {
    _Block_release(v6);
  }
  uint64_t v7 = (const void *)a1[5];
  if (v7) {
    _Block_release(v7);
  }
  xpc_object_t v8 = a1[3];
  if (v8)
  {
    dispatch_release(v8);
  }
}

uint64_t __cxx_global_var_init_47()
{
  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<CommandDriverFactory>::~PthreadMutexGuardPolicy, &ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance, &dword_1C5767000);
  }
  return result;
}

void NetworkingModule::create(uint64_t *a1@<X0>, NetworkingModule **a2@<X8>)
{
  *a2 = (NetworkingModule *)0xAAAAAAAAAAAAAAAALL;
  a2[1] = (NetworkingModule *)0xAAAAAAAAAAAAAAAALL;
  uint64_t v4 = operator new(0xC8uLL);
  uint64_t v5 = (uint64_t)v4;
  uint64_t v6 = *a1;
  uint64_t v7 = (std::__shared_weak_count *)a1[1];
  v9[0] = v6;
  v9[1] = (uint64_t)v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  NetworkingModule::NetworkingModule((uint64_t)v4, v9);
  *a2 = (NetworkingModule *)0xAAAAAAAAAAAAAAAALL;
  a2[1] = (NetworkingModule *)0xAAAAAAAAAAAAAAAALL;
  std::shared_ptr<NetworkingModule>::shared_ptr[abi:ne180100]<NetworkingModule,std::shared_ptr<NetworkingModule> ctu::SharedSynchronizable<NetworkingModule>::make_shared_ptr<NetworkingModule>(NetworkingModule*)::{lambda(NetworkingModule*)#1},void>(a2, v5);
  ctu::Loggable<NetworkingModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync((uint64_t)*a2 + 48);
  if (v7) {
    std::__shared_weak_count::__release_weak(v7);
  }
  xpc_object_t v8 = *a2;

  NetworkingModule::init(v8);
}

void sub_1C581D704(_Unwind_Exception *a1)
{
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v2);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(a1);
}

void NetworkingModule::init(NetworkingModule *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 16);
  if (!v2 || (v3 = *((void *)this + 15), (uint64_t v4 = std::__shared_weak_count::lock(v2)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v5 = v4;
  uint64_t v6 = operator new(8uLL);
  void *v6 = this;
  uint64_t v7 = *((void *)this + 17);
  atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  xpc_object_t v8 = operator new(0x18uLL);
  void *v8 = v6;
  v8[1] = v3;
  v8[2] = v5;
  dispatch_async_f(v7, v8, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<NetworkingModule>::execute_wrapped<NetworkingModule::init(void)::$_0>(NetworkingModule::init(void)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<NetworkingModule::init(void)::$_0,dispatch_queue_s *::default_delete<NetworkingModule::init(void)::$_0>>)::{lambda(void *)#1}::__invoke);
  if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

uint64_t NetworkingModule::NetworkingModule(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = (std::__shared_weak_count *)a2[1];
  if (v4)
  {
    atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  *(void *)a1 = &unk_1F20FC1C8;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = v4;
  if (v4)
  {
    atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    *(void *)(a1 + 24) = 0;
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = 0;
    std::__shared_weak_count::__release_weak(v4);
    *(void *)a1 = &unk_1F20F3340;
    std::__shared_weak_count::__release_weak(v4);
  }
  else
  {
    *(void *)(a1 + 24) = 0;
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = 0;
    *(void *)a1 = &unk_1F20F3340;
  }
  *(void *)a1 = &unk_1F20F5ED0;
  *(void *)(a1 + 48) = &unk_1F20F5F40;
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v12, "com.apple.telephony.abm", "net.mod");
  GetABMLogServer(&v10);
  initially_inactive = dispatch_queue_attr_make_initially_inactive(0);
  uint64_t v6 = dispatch_queue_create_with_target_V2("net.mod", initially_inactive, 0);
  dispatch_set_qos_class_floor(v6, QOS_CLASS_DEFAULT, 0);
  dispatch_activate(v6);
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = v6;
  if (v6)
  {
    dispatch_retain(v6);
    *(void *)(a1 + 144) = 0;
    dispatch_release(v6);
  }
  else
  {
    *(void *)(a1 + 144) = 0;
  }
  *(void *)(a1 + 48) = &unk_1F20F6060;
  ctu::OsLogContext::OsLogContext();
  ctu::OsLogContext::OsLogContext();
  ctu::LoggerCommonBase::LoggerCommonBase();
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v14);
  *(void *)(a1 + 56) = &unk_1F20F0070;
  uint64_t v7 = v11;
  *(void *)(a1 + 104) = v10;
  *(void *)(a1 + 112) = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v13);
  *(void *)(a1 + 48) = &unk_1F20F60F0;
  xpc_object_t v8 = v11;
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v12);
  *(void *)a1 = &unk_1F20F5ED0;
  *(void *)(a1 + 48) = &unk_1F20F5F40;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 178) = 0u;
  return a1;
}

void sub_1C581DAFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15)
{
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&a15);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&a13);
  ctu::SharedSynchronizable<DataStallDetection>::~SharedSynchronizable(v16);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&a11);
  Service::~Service(v15);
  _Unwind_Resume(a1);
}

void sub_1C581DB40(_Unwind_Exception *a1)
{
  Service::~Service(v1);
  _Unwind_Resume(a1);
}

void NetworkingModule::~NetworkingModule(NetworkingModule *this)
{
  *(void *)this = &unk_1F20F5ED0;
  *((void *)this + 6) = &unk_1F20F5F40;
  uint64_t v2 = (const void *)*((void *)this + 23);
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 22);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 20);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  *((void *)this + 6) = &unk_1F20F6060;
  MEMORY[0x1C8790F40]((char *)this + 56);
  uint64_t v5 = *((void *)this + 18);
  if (v5) {
    dispatch_release(v5);
  }
  uint64_t v6 = *((void *)this + 17);
  if (v6) {
    dispatch_release(v6);
  }
  uint64_t v7 = (std::__shared_weak_count *)*((void *)this + 16);
  if (v7) {
    std::__shared_weak_count::__release_weak(v7);
  }
  *(void *)this = &unk_1F20FC1C8;
  uint64_t v8 = *((void *)this + 3);
  if (v8)
  {
    uint64_t v9 = *((void *)this + 4);
    uint64_t v10 = (void *)*((void *)this + 3);
    if (v9 != v8)
    {
      do
      {
        if (*(char *)(v9 - 1) < 0) {
          operator delete(*(void **)(v9 - 24));
        }
        v9 -= 24;
      }
      while (v9 != v8);
      uint64_t v10 = (void *)*((void *)this + 3);
    }
    *((void *)this + 4) = v8;
    operator delete(v10);
  }
  xpc_object_t v11 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v11) {
    std::__shared_weak_count::__release_weak(v11);
  }
}

{
  void *v1;
  uint64_t vars8;

  NetworkingModule::~NetworkingModule(this);

  operator delete(v1);
}

void non-virtual thunk to'NetworkingModule::~NetworkingModule(NetworkingModule *this)
{
}

{
  void *v1;
  uint64_t vars8;

  NetworkingModule::~NetworkingModule((NetworkingModule *)((char *)this - 48));

  operator delete(v1);
}

void NetworkingModule::shutdown(void *a1, dispatch_object_t *a2)
{
  uint64_t v3 = *a2;
  if (*a2)
  {
    dispatch_retain(*a2);
    dispatch_group_enter(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[16];
  if (!v4 || (uint64_t v5 = a1[15], (v6 = std::__shared_weak_count::lock(v4)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v7 = v6;
  uint64_t v8 = operator new(8uLL);
  void *v8 = v3;
  uint64_t v9 = a1[17];
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v10 = operator new(0x18uLL);
  *uint64_t v10 = v8;
  v10[1] = v5;
  _DWORD v10[2] = v7;
  dispatch_async_f(v9, v10, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<NetworkingModule>::execute_wrapped<NetworkingModule::shutdown(dispatch::group_session)::$_0>(NetworkingModule::shutdown(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<NetworkingModule::shutdown(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<NetworkingModule::shutdown(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke);
  if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void NetworkingModule::initialize(void *a1, dispatch_object_t *a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[16];
  if (!v3 || (uint64_t v5 = a1[15], (v6 = std::__shared_weak_count::lock(v3)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v7 = v6;
  p_shared_weak_owners = &v6->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v7);
  }
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  uint64_t v9 = *a2;
  if (*a2)
  {
    dispatch_retain(*a2);
    dispatch_group_enter(v9);
  }
  uint64_t v10 = (std::__shared_weak_count *)a1[16];
  if (!v10 || (v11 = a1[15], (xpc_object_t v12 = std::__shared_weak_count::lock(v10)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  unsigned __int8 v13 = v12;
  char v14 = operator new(0x20uLL);
  void *v14 = a1;
  v14[1] = v5;
  v14[2] = v7;
  v14[3] = v9;
  uint64_t v15 = a1[17];
  atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v16 = operator new(0x18uLL);
  *uint64_t v16 = v14;
  v16[1] = v11;
  uint64_t v16[2] = v13;
  dispatch_async_f(v15, v16, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<NetworkingModule>::execute_wrapped<NetworkingModule::initialize(dispatch::group_session)::$_0>(NetworkingModule::initialize(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<NetworkingModule::initialize(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<NetworkingModule::initialize(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke);
  if (!atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  unsigned int v17 = (std::__shared_weak_count *)a1[16];
  if (!v17 || (uint64_t v18 = a1[15], (v19 = std::__shared_weak_count::lock(v17)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  xpc_object_t v20 = v19;
  char v21 = operator new(8uLL);
  void *v21 = a1;
  xpc_object_t v22 = a1[17];
  atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
  char v23 = operator new(0x18uLL);
  *char v23 = v21;
  v23[1] = v18;
  v23[2] = v20;
  dispatch_async_f(v22, v23, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<NetworkingModule>::execute_wrapped<NetworkingModule::initialize(dispatch::group_session)::$_1>(NetworkingModule::initialize(dispatch::group_session)::$_1 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<NetworkingModule::initialize(dispatch::group_session)::$_1,dispatch_queue_s *::default_delete<NetworkingModule::initialize(dispatch::group_session)::$_1>>)::{lambda(void *)#1}::__invoke);
  if (!atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }

  std::__shared_weak_count::__release_weak(v7);
}

void NetworkingModule::finishInitialization_sync(NetworkingModule *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 16);
  if (!v2 || (v3 = *((void *)this + 15), (uint64_t v4 = std::__shared_weak_count::lock(v2)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v5 = v4;
  atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v5);
  }
  if (config::hw::watch((config::hw *)v4))
  {
    uint64_t v6 = (const char *)(*(uint64_t (**)(NetworkingModule *))(*(void *)this + 16))(this);
    size_t v7 = strlen(v6);
    if (v7 > 0x7FFFFFFFFFFFFFF7) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    uint64_t v8 = (void *)v7;
    if (v7 >= 0x17)
    {
      uint64_t v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v7 | 7) != 0x17) {
        uint64_t v10 = v7 | 7;
      }
      uint64_t v11 = v10 + 1;
      uint64_t v9 = (void **)operator new(v10 + 1);
      __dst[1] = v8;
      unint64_t v32 = v11 | 0x8000000000000000;
      __dst[0] = v9;
    }
    else
    {
      HIBYTE(v32) = v7;
      uint64_t v9 = __dst;
      if (!v7) {
        goto LABEL_14;
      }
    }
    memmove(v9, v6, (size_t)v8);
LABEL_14:
    *((unsigned char *)v8 + (void)v9) = 0;
    CFTypeRef cf = 0;
    AppleBasebandManager::create();
    long long v12 = v33;
    long long v33 = 0uLL;
    unsigned __int8 v13 = (std::__shared_weak_count *)*((void *)this + 20);
    *(_OWORD *)((char *)this + 152) = v12;
    if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
    char v14 = (std::__shared_weak_count *)*((void *)&v33 + 1);
    if (*((void *)&v33 + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v33 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
      CFTypeRef v15 = cf;
      if (!cf)
      {
LABEL_21:
        if (SHIBYTE(v32) < 0) {
          operator delete(__dst[0]);
        }
        uint64_t v16 = (const void *)*MEMORY[0x1E4F4CEF8];
        size_t v17 = strlen((const char *)*MEMORY[0x1E4F4CEF8]);
        if (v17 > 0x7FFFFFFFFFFFFFF7) {
          std::string::__throw_length_error[abi:ne180100]();
        }
        uint64_t v18 = (void *)v17;
        if (v17 >= 0x17)
        {
          uint64_t v20 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v17 | 7) != 0x17) {
            uint64_t v20 = v17 | 7;
          }
          uint64_t v21 = v20 + 1;
          uint64_t v19 = operator new(v20 + 1);
          __p[1] = v18;
          unint64_t v29 = v21 | 0x8000000000000000;
          __p[0] = v19;
        }
        else
        {
          HIBYTE(v29) = v17;
          uint64_t v19 = __p;
          if (!v17) {
            goto LABEL_31;
          }
        }
        memmove(v19, v16, (size_t)v18);
LABEL_31:
        *((unsigned char *)v18 + (void)v19) = 0;
        v24[0] = MEMORY[0x1E4F143A8];
        v24[1] = 3321888768;
        void v24[2] = ___ZN16NetworkingModule25finishInitialization_syncEv_block_invoke;
        v24[3] = &__block_descriptor_56_e8_40c41_ZTSNSt3__18weak_ptrI16NetworkingModuleEE_e70_v24__0_shared_ptr_abm::client::Event____Event_____shared_weak_count__8l;
        v24[4] = this;
        v24[5] = v3;
        xpc_object_t v25 = v5;
        atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        xpc_object_t v22 = _Block_copy(v24);
        char v23 = *((void *)this + 17);
        if (v23) {
          dispatch_retain(*((dispatch_object_t *)this + 17));
        }
        aBlocunint64_t k = v22;
        dispatch_object_t object = v23;
        AppleBasebandManager::setEventHandler();
        if (object) {
          dispatch_release(object);
        }
        if (aBlock) {
          _Block_release(aBlock);
        }
        if (SHIBYTE(v29) < 0) {
          operator delete(__p[0]);
        }
        AppleBasebandManager::eventsOn(*((AppleBasebandManager **)this + 19));
        if (v25) {
          std::__shared_weak_count::__release_weak(v25);
        }
        goto LABEL_41;
      }
    }
    else
    {
      CFTypeRef v15 = cf;
      if (!cf) {
        goto LABEL_21;
      }
    }
    CFRelease(v15);
    goto LABEL_21;
  }
LABEL_41:
  NetworkingModule::applyLQMAbortPolicy_sync(this);
  std::__shared_weak_count::__release_weak(v5);
}

void sub_1C581E464(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a15)
  {
    std::__shared_weak_count::__release_weak(a15);
    std::__shared_weak_count::__release_weak(v30);
    _Unwind_Resume(a1);
  }
  std::__shared_weak_count::__release_weak(v30);
  _Unwind_Resume(a1);
}

void ___ZN16NetworkingModule25finishInitialization_syncEv_block_invoke(void *a1, abm::client::Event **a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    uint64_t v5 = (NetworkingModule *)a1[4];
    uint64_t v6 = std::__shared_weak_count::lock(v3);
    uint64_t v18 = v6;
    if (v6)
    {
      size_t v7 = v6;
      if (a1[5])
      {
        CFTypeRef cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
        abm::client::Event::getData((uint64_t *)&cf, *a2);
        CFTypeRef v8 = cf;
        if (cf) {
          uint64_t v9 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
        }
        else {
          uint64_t v9 = 0;
        }
        if (v9)
        {
          v15[0] = 0xAAAAAAAAAAAAAAAALL;
          v15[1] = 0xAAAAAAAAAAAAAAAALL;
          ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v15, (const __CFDictionary *)cf);
          memset(v14, 170, sizeof(v14));
          ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v19, (const char *)*MEMORY[0x1E4F4C688]);
          ctu::cf::map_adapter::getString();
          MEMORY[0x1C8791110](&v19);
          char v10 = HIBYTE(v14[2]);
          if (SHIBYTE(v14[2]) >= 0) {
            size_t v11 = HIBYTE(v14[2]);
          }
          else {
            size_t v11 = (size_t)v14[1];
          }
          if (v11 == strlen((const char *)*MEMORY[0x1E4F4CAE8]))
          {
            if (SHIBYTE(v14[2]) >= 0) {
              long long v12 = v14;
            }
            else {
              long long v12 = (void **)v14[0];
            }
            int v13 = memcmp(v12, (const void *)*MEMORY[0x1E4F4CAE8], v11);
            *((unsigned char *)v5 + 193) = v13 == 0;
            if (!v13)
            {
              NetworkingModule::applyBreadMode_sync(v5);
              char v10 = HIBYTE(v14[2]);
            }
          }
          else
          {
            *((unsigned char *)v5 + 193) = 0;
          }
          if (v10 < 0) {
            operator delete(v14[0]);
          }
          MEMORY[0x1C8791160](v15);
          CFTypeRef v8 = cf;
        }
        if (v8) {
          CFRelease(v8);
        }
      }
      if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_1C581E6EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,const void *a23,__int16 a24,char a25,char a26)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  MEMORY[0x1C8791160](&a21);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&a23);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a24);
  _Unwind_Resume(a1);
}

void sub_1C581E750(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void NetworkingModule::applyBreadMode_sync(NetworkingModule *this)
{
  unint64_t v12 = 0xAAAAAAAAAAAAAAAALL;
  int v13 = (std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL;
  uint64_t v2 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  uint64_t v3 = off_1EBBDD2A0;
  if (!off_1EBBDD2A0)
  {
    CommandDriverFactory::create_default_global((uint64_t *)&v14, v2);
    long long v4 = v14;
    long long v14 = 0uLL;
    uint64_t v5 = (std::__shared_weak_count *)*(&off_1EBBDD2A0 + 1);
    off_1EBBDD2A0 = v4;
    if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    uint64_t v6 = (std::__shared_weak_count *)*((void *)&v14 + 1);
    if (*((void *)&v14 + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v14 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
    uint64_t v3 = off_1EBBDD2A0;
  }
  size_t v7 = (std::__shared_weak_count *)*(&off_1EBBDD2A0 + 1);
  if (*(&off_1EBBDD2A0 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDD2A0 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(unint64_t *__return_ptr, uint64_t))(*(void *)v3 + 16))(&v10, v3);
  unint64_t v12 = 0;
  int v13 = 0;
  if (v11)
  {
    int v13 = std::__shared_weak_count::lock(v11);
    if (v13) {
      unint64_t v12 = v10;
    }
    if (v11) {
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (!v7 || atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    unint64_t v8 = v12;
    if (!v12) {
      goto LABEL_20;
    }
    goto LABEL_19;
  }
  ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
  std::__shared_weak_count::__release_weak(v7);
  unint64_t v8 = v12;
  if (v12) {
LABEL_19:
  }
    (*(void (**)(unint64_t, void))(*(void *)v8 + 328))(v8, *((unsigned __int8 *)this + 192));
LABEL_20:
  uint64_t v9 = v13;
  if (v13)
  {
    if (!atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_1C581E9BC(_Unwind_Exception *a1)
{
}

void sub_1C581E9D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1C581E9EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t __copy_helper_block_e8_40c41_ZTSNSt3__18weak_ptrI16NetworkingModuleEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c41_ZTSNSt3__18weak_ptrI16NetworkingModuleEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void NetworkingModule::applyLQMAbortPolicy_sync(NetworkingModule *this)
{
  uint64_t v85 = *MEMORY[0x1E4F143B8];
  if (*((void *)this + 21))
  {
    CFTypeRef cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
    __int16 __src = (void *)*MEMORY[0x1E4F4D218];
    size_t v1 = strlen((const char *)*MEMORY[0x1E4F4D218]);
    if (v1 >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    size_t v2 = v1;
    if (v1 >= 0x17)
    {
      uint64_t v5 = (v1 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v1 | 7) != 0x17) {
        uint64_t v5 = v1 | 7;
      }
      uint64_t v6 = v5 + 1;
      uint64_t v3 = operator new(v5 + 1);
      *(void *)&uint8_t buf[8] = v2;
      *(void *)&uint8_t buf[16] = v6 | 0x8000000000000000;
      *(void *)std::string buf = v3;
    }
    else
    {
      buf[23] = v1;
      uint64_t v3 = buf;
      if (!v1)
      {
LABEL_12:
        v3[v2] = 0;
        NetworkingModule::getBundleIDList_sync((uint64_t)this, (uint64_t)buf, &cf);
        if ((buf[23] & 0x80000000) != 0)
        {
          operator delete(*(void **)buf);
          CFArrayRef v7 = (const __CFArray *)cf;
          if (cf) {
            uint64_t v51 = ctu::SharedRef<__CFArray const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFArray const>::get;
          }
          else {
            uint64_t v51 = 0;
          }
          if (v51) {
            goto LABEL_17;
          }
        }
        else
        {
          CFArrayRef v7 = (const __CFArray *)cf;
          if (cf) {
            unint64_t v8 = ctu::SharedRef<__CFArray const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFArray const>::get;
          }
          else {
            unint64_t v8 = 0;
          }
          if (v8)
          {
LABEL_17:
            uint64_t v64 = *((void *)this + 21);
            CFArrayRef theArray = v7;
            if (v7) {
              CFRetain(v7);
            }
            uint64_t v9 = "ynchronizableIN5radio13HealthService5StateEEE";
            uint64_t Count = CFArrayGetCount(v7);
            if (Count)
            {
              CFIndex v10 = 0;
              char v63 = 0;
              unint64_t v11 = 0x1E4F38000uLL;
              while (1)
              {
                memset(&__p, 170, sizeof(__p));
                CFArrayGetValueAtIndex(theArray, v10);
                memset(&v82, 0, sizeof(v82));
                ctu::cf::assign();
                std::string __p = v82;
                if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0) {
                  std::string::__init_copy_ctor_external(&v73, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
                }
                else {
                  std::string v73 = __p;
                }
                unint64_t v12 = (void *)NEHelperCacheCopyAppUUIDMapping();
                xpc_object_t v13 = v12;
                if (v12)
                {
                  xpc_object_t object = v12;
                }
                else
                {
                  xpc_object_t v13 = xpc_null_create();
                  xpc_object_t object = v13;
                  if (!v13)
                  {
                    xpc_object_t v14 = xpc_null_create();
                    xpc_object_t v13 = 0;
                    goto LABEL_32;
                  }
                }
                if (MEMORY[0x1C8792D30](v13) == MEMORY[0x1E4F14568])
                {
                  xpc_retain(v13);
                  goto LABEL_33;
                }
                xpc_object_t v14 = xpc_null_create();
LABEL_32:
                xpc_object_t object = v14;
LABEL_33:
                xpc_release(v13);
                xpc_object_t v15 = object;
                if (object)
                {
                  xpc_retain(object);
                  xpc_object_t v16 = v15;
                }
                else
                {
                  xpc_object_t v16 = xpc_null_create();
                }
                if (MEMORY[0x1C8792D30](v16) == MEMORY[0x1E4F14568])
                {
                  v82.__r_.__value_.__r.__words[0] = 0;
                  v82.__r_.__value_.__l.__size_ = (std::string::size_type)&v82;
                  v82.__r_.__value_.__r.__words[2] = 0x3052000000;
                  *(void *)&long long v83 = __Block_byref_object_copy__3;
                  *((void *)&v83 + 1) = __Block_byref_object_dispose__3;
                  uint64_t v84 = 0;
                  *(void *)applier = MEMORY[0x1E4F143A8];
                  *(void *)&applier[8] = 3221225472;
                  *(void *)&applier[16] = ___ZN20NetworkPolicyManager10uuidBridgeEN3xpc5arrayE_block_invoke;
                  uint64_t v80 = &unk_1E65176F0;
                  uint64_t v81 = &v82;
                  xpc_array_apply(v16, applier);
                  obunint64_t j = *(id *)(v82.__r_.__value_.__l.__size_ + 40);
                  _Block_object_dispose(&v82, 8);
                }
                else
                {
                  obunint64_t j = 0;
                }
                xpc_release(v16);
                size_t v17 = *(NSObject **)(v64 + 40);
                if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
                {
                  int v18 = SHIBYTE(v73.__r_.__value_.__r.__words[2]);
                  std::string::size_type v19 = v73.__r_.__value_.__r.__words[0];
                  xpc::object::to_string((uint64_t *)&v82, (xpc::object *)&object);
                  uint64_t v20 = &v73;
                  if (v18 < 0) {
                    uint64_t v20 = (std::string *)v19;
                  }
                  uint64_t v21 = &v82;
                  if ((v82.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                    uint64_t v21 = (std::string *)v82.__r_.__value_.__r.__words[0];
                  }
                  *(_DWORD *)applier = 136315394;
                  *(void *)&applier[4] = v20;
                  *(_WORD *)&applier[12] = 2080;
                  *(void *)&applier[14] = v21;
                  _os_log_impl(&dword_1C5767000, v17, OS_LOG_TYPE_DEFAULT, "#I UUIDs for bundleID:%s => %s", applier, 0x16u);
                  if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v82.__r_.__value_.__l.__data_);
                  }
                  xpc_object_t v15 = object;
                }
                xpc_release(v15);
                if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
                {
                  operator delete(v73.__r_.__value_.__l.__data_);
                  CFIndex v62 = v10;
                  if (obj)
                  {
LABEL_49:
                    uint64_t v22 = [*(id *)(v11 + 3368) allInterfaces];
                    if (v22)
                    {
                      uint64_t v23 = [MEMORY[0x1E4F38D38] routeRuleWithAction:4 forType:2];
                      if (v23)
                      {
                        uint64_t v78 = v23;
                        unint64_t v66 = [MEMORY[0x1E4F38D30] routeRules:[MEMORY[0x1E4F1C978] arrayWithObjects:count:&v78, 1]];
                        if (v66)
                        {
                          long long v71 = 0u;
                          long long v72 = 0u;
                          long long v69 = 0u;
                          long long v70 = 0u;
                          uint64_t v24 = [obj countByEnumeratingWithState:&v69 objects:buf count:16];
                          if (v24)
                          {
                            uint64_t v25 = *(void *)v70;
                            do
                            {
                              for (uint64_t i = 0; i != v24; ++i)
                              {
                                if (*(void *)v70 != v25) {
                                  objc_enumerationMutation(obj);
                                }
                                xpc_object_t v27 = *(void **)(*((void *)&v69 + 1) + 8 * i);
                                uint64_t v28 = [*(id *)(v11 + 3368) effectiveApplication:v27];
                                if (v28)
                                {
                                  id v29 = objc_alloc(MEMORY[0x1E4F38D20]);
                                  v76[0] = v28;
                                  v76[1] = v22;
                                  int v30 = [v29 initWithOrder:0 result:v66 conditions:[MEMORY[0x1E4F1C978] arrayWithObjects:v76, 2]];
                                  if (v30)
                                  {
                                    unint64_t v31 = v11;
                                    uint64_t v32 = [*(id *)(v64 + 72) addPolicy:v30];
                                    long long v33 = *(NSObject **)(v64 + 40);
                                    BOOL v34 = os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT);
                                    if (v32)
                                    {
                                      if (v34)
                                      {
                                        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                                          p_p = &__p;
                                        }
                                        else {
                                          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
                                        }
                                        std::string::size_type v36 = [[(id)objc_msgSend(v27, "UUIDString") UTF8String];
                                        int v37 = [v66 resultType];
                                        LODWORD(v82.__r_.__value_.__l.__data_) = 136315906;
                                        *(std::string::size_type *)((char *)v82.__r_.__value_.__r.__words + 4) = (std::string::size_type)p_p;
                                        WORD2(v82.__r_.__value_.__r.__words[1]) = 2080;
                                        *(std::string::size_type *)((char *)&v82.__r_.__value_.__r.__words[1] + 6) = v36;
                                        HIWORD(v82.__r_.__value_.__r.__words[2]) = 1024;
                                        LODWORD(v83) = v37;
                                        WORD2(v83) = 1024;
                                        *(_DWORD *)((char *)&v83 + 6) = v32;
                                        _os_log_impl(&dword_1C5767000, v33, OS_LOG_TYPE_DEFAULT, "#I Valid policy; bundle-id:%s UUID:%s result:%u policy-id:%u",
                                          (uint8_t *)&v82,
                                          0x22u);
                                      }
                                      char v63 = 1;
                                    }
                                    else if (v34)
                                    {
                                      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                                        int64_t v38 = &__p;
                                      }
                                      else {
                                        int64_t v38 = (std::string *)__p.__r_.__value_.__r.__words[0];
                                      }
                                      std::string::size_type v39 = [[(id)objc_msgSend(v27, "UUIDString") UTF8String];
                                      int v40 = [v66 resultType];
                                      LODWORD(v82.__r_.__value_.__l.__data_) = 136315650;
                                      *(std::string::size_type *)((char *)v82.__r_.__value_.__r.__words + 4) = (std::string::size_type)v38;
                                      WORD2(v82.__r_.__value_.__r.__words[1]) = 2080;
                                      *(std::string::size_type *)((char *)&v82.__r_.__value_.__r.__words[1] + 6) = v39;
                                      HIWORD(v82.__r_.__value_.__r.__words[2]) = 1024;
                                      LODWORD(v83) = v40;
                                      _os_log_impl(&dword_1C5767000, v33, OS_LOG_TYPE_DEFAULT, "#I Invalid policy; bundle-id:%s UUID:%s result:%u ",
                                        (uint8_t *)&v82,
                                        0x1Cu);
                                    }
                                    unint64_t v11 = v31;
                                  }
                                }
                              }
                              uint64_t v24 = [obj countByEnumeratingWithState:&v69 objects:buf count:16];
                            }
                            while (v24);
                          }
                          goto LABEL_88;
                        }
                        unint64_t v48 = *(NSObject **)(v64 + 40);
                        if (os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT))
                        {
                          LOWORD(v82.__r_.__value_.__l.__data_) = 0;
                          uint64_t v43 = v48;
                          int64_t v44 = "#I Result creation failed";
LABEL_86:
                          uint32_t v45 = 2;
LABEL_87:
                          _os_log_impl(&dword_1C5767000, v43, OS_LOG_TYPE_DEFAULT, v44, (uint8_t *)&v82, v45);
                          goto LABEL_88;
                        }
                      }
                      else
                      {
                        size_t v47 = *(NSObject **)(v64 + 40);
                        if (os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT))
                        {
                          LOWORD(v82.__r_.__value_.__l.__data_) = 0;
                          uint64_t v43 = v47;
                          int64_t v44 = "#I Route rule creation failed";
                          goto LABEL_86;
                        }
                      }
                    }
                    else
                    {
                      int v46 = *(NSObject **)(v64 + 40);
                      if (os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT))
                      {
                        LOWORD(v82.__r_.__value_.__l.__data_) = 0;
                        uint64_t v43 = v46;
                        int64_t v44 = "#I Interface condition creation failed";
                        goto LABEL_86;
                      }
                    }
                    goto LABEL_88;
                  }
                }
                else
                {
                  CFIndex v62 = v10;
                  if (obj) {
                    goto LABEL_49;
                  }
                }
                std::string v41 = *(NSObject **)(v64 + 40);
                if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
                {
                  CFTypeRef v42 = &__p;
                  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                    CFTypeRef v42 = (std::string *)__p.__r_.__value_.__r.__words[0];
                  }
                  LODWORD(v82.__r_.__value_.__l.__data_) = 136315138;
                  *(std::string::size_type *)((char *)v82.__r_.__value_.__r.__words + 4) = (std::string::size_type)v42;
                  uint64_t v43 = v41;
                  int64_t v44 = "#I No UUIDs available for bundle-id:%s";
                  uint32_t v45 = 12;
                  goto LABEL_87;
                }
LABEL_88:
                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                {
                  operator delete(__p.__r_.__value_.__l.__data_);
                  CFIndex v10 = v62 + 1;
                  if (v62 + 1 == Count)
                  {
LABEL_90:
                    if (v63)
                    {
                      uint64_t v9 = "N3ctu20SharedSynchronizableIN5radio13HealthService5StateEEE" + 14;
                      int v49 = [*(id *)(v64 + 72) apply];
                      CFArrayRef v50 = theArray;
                      if (!theArray) {
                        goto LABEL_106;
                      }
                      goto LABEL_105;
                    }
                    int v49 = 0;
                    uint64_t v9 = "N3ctu20SharedSynchronizableIN5radio13HealthService5StateEEE" + 14;
                    CFArrayRef v50 = theArray;
                    if (theArray) {
                      goto LABEL_105;
                    }
                    goto LABEL_106;
                  }
                }
                else
                {
                  CFIndex v10 = v62 + 1;
                  if (v62 + 1 == Count) {
                    goto LABEL_90;
                  }
                }
              }
            }
            __int16 v56 = *(NSObject **)(v64 + 40);
            if (!os_log_type_enabled(v56, OS_LOG_TYPE_DEFAULT))
            {
              int v49 = 1;
              CFArrayRef v50 = theArray;
              if (!theArray) {
                goto LABEL_106;
              }
              goto LABEL_105;
            }
            *(_WORD *)std::string buf = 0;
            _os_log_impl(&dword_1C5767000, v56, OS_LOG_TYPE_DEFAULT, "#I Empty bundle-id list; nothing to apply",
              buf,
              2u);
            int v49 = 1;
            CFArrayRef v50 = theArray;
            if (theArray) {
LABEL_105:
            }
              CFRelease(v50);
LABEL_106:
            int v57 = *((void *)this + 11);
            if (!os_log_type_enabled(v57, OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_111;
            }
            uint64_t v58 = "failed";
            if (v49) {
              uint64_t v58 = "successful";
            }
            *(_DWORD *)std::string buf = *((void *)v9 + 429);
            *(void *)&uint8_t buf[4] = __src;
            *(_WORD *)&buf[12] = 2080;
            *(void *)&buf[14] = v58;
            unsigned int v53 = "#I Applying network policy for '%s' %s ";
            __int16 v54 = v57;
            uint32_t v55 = 22;
            goto LABEL_110;
          }
        }
        __int16 v52 = *((void *)this + 11);
        if (!os_log_type_enabled(v52, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_111;
        }
        *(_DWORD *)std::string buf = 136315138;
        *(void *)&uint8_t buf[4] = __src;
        unsigned int v53 = "#I No network policy to apply for action: %s";
        __int16 v54 = v52;
        uint32_t v55 = 12;
LABEL_110:
        _os_log_impl(&dword_1C5767000, v54, OS_LOG_TYPE_DEFAULT, v53, buf, v55);
LABEL_111:
        if (cf) {
          CFRelease(cf);
        }
        return;
      }
    }
    memmove(v3, __src, v2);
    goto LABEL_12;
  }
  long long v4 = *((void *)this + 11);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl(&dword_1C5767000, v4, OS_LOG_TYPE_DEFAULT, "#I Network policy update is not supported", buf, 2u);
  }
}

void sub_1C581F454(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54,xpc_object_t object,uint64_t a56,uint64_t a57,void *__p,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void sub_1C581F57C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,const void *a29,const void *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *__p,uint64_t a44,int a45,__int16 a46,char a47,char a48)
{
  if (a48 < 0) {
    operator delete(__p);
  }
  ctu::cf::CFSharedRef<__CFArray const>::~CFSharedRef(&a29);
  ctu::cf::CFSharedRef<__CFArray const>::~CFSharedRef(&a30);
  _Unwind_Resume(a1);
}

void NetworkingModule::sendVisitInfo_sync(NetworkingModule *this, uint64_t a2, uint64_t a3)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *((void *)this + 11);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 67109376;
    *(_DWORD *)&uint8_t buf[4] = a2;
    *(_WORD *)&uint8_t buf[8] = 1024;
    *(_DWORD *)&buf[10] = a3;
    _os_log_impl(&dword_1C5767000, v5, OS_LOG_TYPE_DEFAULT, "#I Visit info: Arrival=%u Departure=%u", buf, 0xEu);
  }
  unint64_t v16 = 0xAAAAAAAAAAAAAAAALL;
  size_t v17 = (std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL;
  uint64_t v6 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  uint64_t v7 = off_1EBBDD2A0;
  if (!off_1EBBDD2A0)
  {
    CommandDriverFactory::create_default_global((uint64_t *)buf, v6);
    long long v8 = *(_OWORD *)buf;
    memset(buf, 0, sizeof(buf));
    uint64_t v9 = (std::__shared_weak_count *)*(&off_1EBBDD2A0 + 1);
    off_1EBBDD2A0 = v8;
    if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
    CFIndex v10 = *(std::__shared_weak_count **)&buf[8];
    if (*(void *)&buf[8]
      && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
    uint64_t v7 = off_1EBBDD2A0;
  }
  unint64_t v11 = (std::__shared_weak_count *)*(&off_1EBBDD2A0 + 1);
  if (*(&off_1EBBDD2A0 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDD2A0 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(unint64_t *__return_ptr, uint64_t))(*(void *)v7 + 16))(&v14, v7);
  unint64_t v16 = 0;
  size_t v17 = 0;
  if (v15)
  {
    size_t v17 = std::__shared_weak_count::lock(v15);
    if (v17) {
      unint64_t v16 = v14;
    }
    if (v15) {
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (!v11 || atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    unint64_t v12 = v16;
    if (!v16) {
      goto LABEL_22;
    }
    goto LABEL_21;
  }
  ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
  std::__shared_weak_count::__release_weak(v11);
  unint64_t v12 = v16;
  if (v16) {
LABEL_21:
  }
    (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)v12 + 368))(v12, a2, a3);
LABEL_22:
  xpc_object_t v13 = v17;
  if (v17)
  {
    if (!atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

void sub_1C581F874(_Unwind_Exception *a1)
{
}

void NetworkingModule::getBundleIDList_sync(uint64_t a1@<X0>, uint64_t a2@<X1>, CFTypeRef *a3@<X8>)
{
  memset(&v31, 170, sizeof(v31));
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v31, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v31 = *(std::string *)a2;
  }
  if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v5 = (std::string *)((char *)&v31 + HIBYTE(v31.__r_.__value_.__r.__words[2]));
  }
  else {
    uint64_t v5 = (std::string *)(v31.__r_.__value_.__r.__words[0] + v31.__r_.__value_.__l.__size_);
  }
  if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v6 = &v31;
  }
  else {
    uint64_t v6 = (std::string *)v31.__r_.__value_.__r.__words[0];
  }
  for (; v6 != v5; uint64_t v6 = (std::string *)((char *)v6 + 1))
    v6->__r_.__value_.__s.__data_[0] = __toupper(v6->__r_.__value_.__s.__data_[0]);
  CFTypeRef cf = 0;
  if (!TelephonyUtilIsInternalBuild()) {
    goto LABEL_23;
  }
  pthread_mutex_lock(&ctu::Singleton<ABMNetworkPolicy,ABMNetworkPolicy,ctu::PthreadMutexGuardPolicy<ABMNetworkPolicy>>::sInstance);
  if (qword_1EA3D5FD8)
  {
LABEL_14:
    long long v8 = (std::__shared_weak_count_vtbl *)qword_1EA3D5FD8;
    uint64_t v7 = (std::__shared_weak_count *)off_1EA3D5FE0;
    uint64_t v27 = qword_1EA3D5FD8;
    uint64_t v28 = (std::__shared_weak_count *)off_1EA3D5FE0;
    if (!off_1EA3D5FE0) {
      goto LABEL_21;
    }
    goto LABEL_20;
  }
  long long v8 = (std::__shared_weak_count_vtbl *)operator new(0x18uLL);
  MEMORY[0x1C8791170](v8, @"com.apple.AppleBasebandManager.NetworkPolicy", *MEMORY[0x1E4F1D3F0]);
  uint64_t v7 = (std::__shared_weak_count *)operator new(0x20uLL);
  v7->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20F6230;
  v7->__shared_owners_ = 0;
  v7->__shared_weak_owners_ = 0;
  v7[1].__vftable = v8;
  uint64_t v9 = (std::__shared_weak_count *)off_1EA3D5FE0;
  qword_1EA3D5FD8 = (uint64_t)v8;
  off_1EA3D5FE0 = v7;
  if (v9)
  {
    if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
    goto LABEL_14;
  }
  uint64_t v27 = (uint64_t)v8;
  uint64_t v28 = v7;
LABEL_20:
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
LABEL_21:
  pthread_mutex_unlock(&ctu::Singleton<ABMNetworkPolicy,ABMNetworkPolicy,ctu::PthreadMutexGuardPolicy<ABMNetworkPolicy>>::sInstance);
  Preferences::getPreference<__CFArray const*>(v8, (const char *)&v31, &cf);
  if (v28 && !atomic_fetch_add(&v28->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
    std::__shared_weak_count::__release_weak(v28);
    CFTypeRef v10 = cf;
    *a3 = cf;
    if (!v10) {
      goto LABEL_29;
    }
    goto LABEL_24;
  }
LABEL_23:
  CFTypeRef v10 = cf;
  *a3 = cf;
  if (!v10) {
    goto LABEL_29;
  }
LABEL_24:
  CFRetain(v10);
  if (ctu::SharedRef<__CFArray const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFArray const>::get
    && CFArrayGetCount((CFArrayRef)v10))
  {
    goto LABEL_56;
  }
LABEL_29:
  unint64_t v11 = *(NSObject **)(a1 + 88);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v27) = 0;
    _os_log_impl(&dword_1C5767000, v11, OS_LOG_TYPE_DEFAULT, "#I getBundleIDList_sync count zero", (uint8_t *)&v27, 2u);
  }
  unint64_t v12 = (const void *)*MEMORY[0x1E4F4D218];
  size_t v13 = strlen((const char *)*MEMORY[0x1E4F4D218]);
  if (v13 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  unint64_t v14 = (std::__shared_weak_count *)v13;
  if (v13 >= 0x17)
  {
    uint64_t v16 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v13 | 7) != 0x17) {
      uint64_t v16 = v13 | 7;
    }
    uint64_t v17 = v16 + 1;
    xpc_object_t v15 = (uint64_t *)operator new(v16 + 1);
    uint64_t v28 = v14;
    int64_t v29 = v17 | 0x8000000000000000;
    uint64_t v27 = (uint64_t)v15;
    goto LABEL_38;
  }
  HIBYTE(v29) = v13;
  xpc_object_t v15 = &v27;
  if (v13) {
LABEL_38:
  }
    memmove(v15, v12, (size_t)v14);
  *((unsigned char *)&v14->__vftable + (void)v15) = 0;
  if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v18 = &v31;
  }
  else {
    int v18 = (std::string *)v31.__r_.__value_.__r.__words[0];
  }
  int v19 = SHIBYTE(v29);
  uint64_t v20 = (void *)v27;
  if (v29 >= 0) {
    uint64_t v21 = (const char *)&v27;
  }
  else {
    uint64_t v21 = (const char *)v27;
  }
  int v22 = strcasecmp((const char *)v18, v21);
  int v23 = v22;
  if (v19 < 0)
  {
    operator delete(v20);
    if (v23) {
      goto LABEL_56;
    }
  }
  else if (v22)
  {
    goto LABEL_56;
  }
  uint64_t v24 = *(const void **)(a1 + 184);
  if (v24)
  {
    CFTypeID v25 = CFGetTypeID(v24);
    if (v25 != CFArrayGetTypeID())
    {
      CFTypeRef v26 = *a3;
      *a3 = 0;
      if (!v26) {
        goto LABEL_56;
      }
      goto LABEL_55;
    }
    CFRetain(v24);
  }
  CFTypeRef v26 = *a3;
  *a3 = v24;
  if (v26) {
LABEL_55:
  }
    CFRelease(v26);
LABEL_56:
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v31.__r_.__value_.__l.__data_);
  }
}

const char *NetworkingModule::getName(NetworkingModule *this)
{
  return "net.mod";
}

uint64_t ctu::Loggable<NetworkingModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig(uint64_t a1)
{
  return MEMORY[0x1F417DA50](a1 + 8);
}

size_t ctu::Loggable<NetworkingModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = (const char *)(*(uint64_t (**)(void))(*(void *)(a1 - 48) + 16))();
  size_t result = strlen(v3);
  if (result >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v5 = result;
  if (result >= 0x17)
  {
    uint64_t v6 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17) {
      uint64_t v6 = result | 7;
    }
    uint64_t v7 = v6 + 1;
    long long v8 = operator new(v6 + 1);
    a2[1] = v5;
    a2[2] = v7 | 0x8000000000000000;
    *a2 = v8;
    a2 = v8;
  }
  else
  {
    *((unsigned char *)a2 + 23) = result;
    if (!result)
    {
      *(unsigned char *)a2 = 0;
      return result;
    }
  }
  size_t result = (size_t)memmove(a2, v3, v5);
  *((unsigned char *)a2 + v5) = 0;
  return result;
}

uint64_t ctu::Loggable<NetworkingModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return MEMORY[0x1F417DD10](a1 + 8);
}

uint64_t ctu::PthreadMutexGuardPolicy<ABMNetworkPolicy>::~PthreadMutexGuardPolicy(uint64_t a1)
{
  pthread_mutex_lock((pthread_mutex_t *)a1);
  size_t v2 = *(std::__shared_weak_count **)(a1 + 72);
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 72);
  if (!v3 || atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void *ctu::Loggable<NetworkingModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_1F20F6060;
  MEMORY[0x1C8790F40](a1 + 1);
  return a1;
}

void ctu::Loggable<NetworkingModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_1F20F6060;
  MEMORY[0x1C8790F40](a1 + 1);

  operator delete(a1);
}

uint64_t ___ZN20NetworkPolicyManager10uuidBridgeEN3xpc5arrayE_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  if (a3 && MEMORY[0x1C8792D30](a3) == MEMORY[0x1E4F14600])
  {
    if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40)) {
      *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = [MEMORY[0x1E4F1CA48] array];
    }
    size_t v5 = (void *)[objc_alloc(MEMORY[0x1E4F29128]) initWithUUIDBytes:xpc_uuid_get_bytes(a3)];
    [*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) addObject:v5];
  }
  return 1;
}

void ctu::Loggable<NetworkingModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(uint64_t a1)
{
  uint64_t v1 = a1 + 56;
  if (*(void *)(a1 + 56))
  {
    if (!*(void *)(a1 + 80) || (size_t v2 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(a1 + 80))) == 0) {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    uint64_t v3 = v2;
    ctu::LoggerCommonBase::getLogDomain((ctu::LoggerCommonBase *)(v1 - 48));
    ctu::TrackedLogger::registerLoggerToServer();
    if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_1C5820194(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

void sub_1C58201B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void *std::shared_ptr<NetworkingModule>::shared_ptr[abi:ne180100]<NetworkingModule,std::shared_ptr<NetworkingModule> ctu::SharedSynchronizable<NetworkingModule>::make_shared_ptr<NetworkingModule>(NetworkingModule*)::{lambda(NetworkingModule*)#1},void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  long long v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = &v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20F60A0;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)a2;
  a1[1] = v4;
  if (!a2) {
    return a1;
  }
  uint64_t v6 = *(std::__shared_weak_count **)(a2 + 128);
  if (v6)
  {
    if (v6->__shared_owners_ == -1)
    {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      *(void *)(a2 + 120) = a2;
      *(void *)(a2 + 128) = v4;
      std::__shared_weak_count::__release_weak(v6);
      if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
        goto LABEL_8;
      }
    }
    return a1;
  }
  atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  *(void *)(a2 + 120) = a2;
  *(void *)(a2 + 128) = v4;
  if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
LABEL_8:
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void sub_1C58202DC(void *a1)
{
  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[17], v1, (dispatch_function_t)std::shared_ptr<NetworkingModule> ctu::SharedSynchronizable<NetworkingModule>::make_shared_ptr<NetworkingModule>(NetworkingModule*)::{lambda(NetworkingModule*)#1}::operator() const(NetworkingModule*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_1C5820304(_Unwind_Exception *a1)
{
}

void std::__shared_ptr_pointer<NetworkingModule *,std::shared_ptr<NetworkingModule> ctu::SharedSynchronizable<NetworkingModule>::make_shared_ptr<NetworkingModule>(NetworkingModule*)::{lambda(NetworkingModule *)#1},std::allocator<NetworkingModule>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<NetworkingModule *,std::shared_ptr<NetworkingModule> ctu::SharedSynchronizable<NetworkingModule>::make_shared_ptr<NetworkingModule>(NetworkingModule*)::{lambda(NetworkingModule *)#1},std::allocator<NetworkingModule>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<NetworkingModule *,std::shared_ptr<NetworkingModule> ctu::SharedSynchronizable<NetworkingModule>::make_shared_ptr<NetworkingModule>(NetworkingModule*)::{lambda(NetworkingModule *)#1},std::allocator<NetworkingModule>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableI16NetworkingModuleE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_") {
    return a1 + 24;
  }
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableI16NetworkingModuleE15make_shared_ptrIS1_EENSt3__110shared_p"
                                "trIT_EEPS6_EUlPS1_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableI16NetworkingModuleE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableI16NetworkingModuleE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24; {
  return 0;
  }
}

uint64_t std::shared_ptr<NetworkingModule> ctu::SharedSynchronizable<NetworkingModule>::make_shared_ptr<NetworkingModule>(NetworkingModule*)::{lambda(NetworkingModule*)#1}::operator() const(NetworkingModule*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void *ctu::SharedLoggable<NetworkingModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(void *a1)
{
  *a1 = &unk_1F20F6060;
  MEMORY[0x1C8790F40](a1 + 1);
  size_t v2 = a1[12];
  if (v2) {
    dispatch_release(v2);
  }
  unint64_t v3 = a1[11];
  if (v3) {
    dispatch_release(v3);
  }
  long long v4 = (std::__shared_weak_count *)a1[10];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

void ctu::SharedLoggable<NetworkingModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(void *a1)
{
  *a1 = &unk_1F20F6060;
  MEMORY[0x1C8790F40](a1 + 1);
  size_t v2 = a1[12];
  if (v2) {
    dispatch_release(v2);
  }
  unint64_t v3 = a1[11];
  if (v3) {
    dispatch_release(v3);
  }
  long long v4 = (std::__shared_weak_count *)a1[10];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }

  operator delete(a1);
}

void dispatch::async<void ctu::SharedSynchronizable<NetworkingModule>::execute_wrapped<NetworkingModule::init(void)::$_0>(NetworkingModule::init(void)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<NetworkingModule::init(void)::$_0,dispatch_queue_s *::default_delete<NetworkingModule::init(void)::$_0>>)::{lambda(void *)#1}::__invoke(capabilities::abs *a1)
{
  size_t v2 = *(void **)a1;
  unint64_t v3 = **(void ***)a1;
  if (capabilities::abs::supportsNetworkPolicy(a1))
  {
    long long v4 = operator new(0x68uLL);
    v4[1] = 0;
    v4[2] = 0;
    void *v4 = &unk_1F20F6130;
    size_t v5 = v4 + 3;
    v4[3] = &unk_1F20F6180;
    GetABMLogServer(&v12);
    v4[3] = &unk_1F20F61F0;
    char v15 = 10;
    strcpy((char *)__p, "net.policy");
    ctu::LoggerCommonBase::LoggerCommonBase();
    v4[4] = &unk_1F20F0070;
    uint64_t v6 = v13;
    v4[10] = v12;
    v4[11] = v6;
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (v15 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v7 = v13;
    if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    void *v5 = &unk_1F20F6180;
    v4[12] = objc_alloc_init(MEMORY[0x1E4F38D40]);
    long long v8 = (std::__shared_weak_count *)v3[22];
    v3[21] = v5;
    v3[22] = v4;
    if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
    CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
    if (Mutable)
    {
      CFTypeRef v10 = (const void *)v3[23];
      v3[23] = Mutable;
      if (v10) {
        CFRelease(v10);
      }
    }
  }
  operator delete(v2);
  unint64_t v11 = (std::__shared_weak_count *)*((void *)a1 + 2);
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }

  operator delete(a1);
}

void sub_1C5820774(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  void *v22 = v20;
  MEMORY[0x1C8790F40](v21);
  std::__shared_weak_count::~__shared_weak_count(v19);
  operator delete(v24);
  operator delete(v18);
  CFTypeID v25 = (std::__shared_weak_count *)v17[2];
  if (v25)
  {
    if (!atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  operator delete(v17);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<NetworkPolicyManager>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20F6130;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<NetworkPolicyManager>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20F6130;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t std::__shared_ptr_emplace<NetworkPolicyManager>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void NetworkPolicyManager::~NetworkPolicyManager(NetworkPolicyManager *this)
{
  *(void *)this = &unk_1F20F6180;
  size_t v2 = (void *)*((void *)this + 9);
  if (v2)
  {

    *((void *)this + 9) = 0;
  }
  *(void *)this = &unk_1F20F61F0;
  MEMORY[0x1C8790F40]((char *)this + 8);
}

{
  void *v2;
  uint64_t vars8;

  *(void *)this = &unk_1F20F6180;
  size_t v2 = (void *)*((void *)this + 9);
  if (v2)
  {

    *((void *)this + 9) = 0;
  }
  *(void *)this = &unk_1F20F61F0;
  MEMORY[0x1C8790F40]((char *)this + 8);

  operator delete(this);
}

uint64_t ctu::Loggable<NetworkPolicyManager,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig(uint64_t a1)
{
  return MEMORY[0x1F417DA50](a1 + 8);
}

void ctu::Loggable<NetworkPolicyManager,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName(char *a1@<X8>)
{
  a1[23] = 10;
  strcpy(a1, "net.policy");
}

uint64_t ctu::Loggable<NetworkPolicyManager,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return MEMORY[0x1F417DD10](a1 + 8);
}

void *ctu::Loggable<NetworkPolicyManager,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_1F20F61F0;
  MEMORY[0x1C8790F40](a1 + 1);
  return a1;
}

void ctu::Loggable<NetworkPolicyManager,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_1F20F61F0;
  MEMORY[0x1C8790F40](a1 + 1);

  operator delete(a1);
}

void dispatch::async<void ctu::SharedSynchronizable<NetworkingModule>::execute_wrapped<NetworkingModule::shutdown(dispatch::group_session)::$_0>(NetworkingModule::shutdown(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<NetworkingModule::shutdown(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<NetworkingModule::shutdown(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke(dispatch_group_t **__p)
{
  size_t v2 = *__p;
  if (*__p)
  {
    if (*v2)
    {
      dispatch_group_leave(*v2);
      if (*v2) {
        dispatch_release(*v2);
      }
    }
    operator delete(v2);
  }
  unint64_t v3 = (std::__shared_weak_count *)__p[2];
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    long long v4 = __p;
  }
  else
  {
    long long v4 = __p;
  }
  operator delete(v4);
}

void std::__shared_ptr_pointer<ABMNetworkPolicy *,std::shared_ptr<ABMNetworkPolicy>::__shared_ptr_default_delete<ABMNetworkPolicy,ABMNetworkPolicy>,std::allocator<ABMNetworkPolicy>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<ABMNetworkPolicy *,std::shared_ptr<ABMNetworkPolicy>::__shared_ptr_default_delete<ABMNetworkPolicy,ABMNetworkPolicy>,std::allocator<ABMNetworkPolicy>>::__on_zero_shared(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    uint64_t v1 = (void *)MEMORY[0x1C8791180]();
    operator delete(v1);
  }
}

uint64_t std::__shared_ptr_pointer<ABMNetworkPolicy *,std::shared_ptr<ABMNetworkPolicy>::__shared_ptr_default_delete<ABMNetworkPolicy,ABMNetworkPolicy>,std::allocator<ABMNetworkPolicy>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x80000001C599FDA1) {
    return a1 + 24;
  }
  if (((v3 & 0x80000001C599FDA1 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000001C599FDA1)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001C599FDA1 & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 24;
  }
  return 0;
}

void dispatch::async<void ctu::SharedSynchronizable<NetworkingModule>::execute_wrapped<NetworkingModule::initialize(dispatch::group_session)::$_0>(NetworkingModule::initialize(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<NetworkingModule::initialize(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<NetworkingModule::initialize(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke(void *a1)
{
  size_t v2 = *(uint64_t **)a1;
  uint64_t v3 = **(void **)a1;
  long long v4 = (const void *)*MEMORY[0x1E4F4C9C8];
  size_t v5 = strlen((const char *)*MEMORY[0x1E4F4C9C8]);
  if (v5 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v6 = v5;
  if (v5 >= 0x17)
  {
    uint64_t v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17) {
      uint64_t v8 = v5 | 7;
    }
    uint64_t v9 = v8 + 1;
    p_dst = (void **)operator new(v8 + 1);
    uint64_t v59 = v6;
    unint64_t v60 = v9 | 0x8000000000000000;
    std::string __dst = p_dst;
    goto LABEL_8;
  }
  HIBYTE(v60) = v5;
  p_dst = (void **)&__dst;
  if (v5) {
LABEL_8:
  }
    memmove(p_dst, v4, v6);
  *((unsigned char *)p_dst + v6) = 0;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 3321888768;
  aBlock[2] = ___ZZN16NetworkingModule10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke;
  aBlock[3] = &__block_descriptor_56_e8_40c41_ZTSNSt3__18weak_ptrI16NetworkingModuleEE_e63_v24__0_dict__object__v__8_block_void_____int__xpc::dict______16l;
  aBlock[4] = v3;
  void aBlock[5] = v2[1];
  CFTypeRef v10 = (std::__shared_weak_count *)v2[2];
  uint64_t v67 = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v11 = _Block_copy(aBlock);
  uint64_t v68 = v11;
  Service::registerCommandHandler(v3, (uint64_t)&__dst, &v68);
  if (v11) {
    _Block_release(v11);
  }
  if (SHIBYTE(v60) < 0) {
    operator delete(__dst);
  }
  uint64_t v12 = (const void *)*MEMORY[0x1E4F4CD18];
  size_t v13 = strlen((const char *)*MEMORY[0x1E4F4CD18]);
  if (v13 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v14 = v13;
  if (v13 >= 0x17)
  {
    uint64_t v16 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v13 | 7) != 0x17) {
      uint64_t v16 = v13 | 7;
    }
    uint64_t v17 = v16 + 1;
    p_p = operator new(v16 + 1);
    uint64_t v51 = v14;
    unint64_t v52 = v17 | 0x8000000000000000;
    std::string __p = p_p;
    goto LABEL_22;
  }
  HIBYTE(v52) = v13;
  p_p = &__p;
  if (v13) {
LABEL_22:
  }
    memmove(p_p, v12, v14);
  *((unsigned char *)p_p + v14) = 0;
  std::string __dst = (void **)MEMORY[0x1E4F143A8];
  uint64_t v59 = 3321888768;
  unint64_t v60 = (unint64_t)___ZZN16NetworkingModule10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_51;
  uint64_t v61 = &__block_descriptor_56_e8_40c41_ZTSNSt3__18weak_ptrI16NetworkingModuleEE_e63_v24__0_dict__object__v__8_block_void_____int__xpc::dict______16l;
  uint64_t v62 = v3;
  uint64_t v63 = v2[1];
  int v18 = (std::__shared_weak_count *)v2[2];
  uint64_t v64 = v18;
  if (v18) {
    atomic_fetch_add_explicit(&v18->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  int v19 = _Block_copy(&__dst);
  unint64_t v65 = v19;
  Service::registerCommandHandler(v3, (uint64_t)&__p, &v65);
  if (v19) {
    _Block_release(v19);
  }
  if (SHIBYTE(v52) < 0) {
    operator delete(__p);
  }
  uint64_t v20 = (const void *)*MEMORY[0x1E4F4C9E0];
  size_t v21 = strlen((const char *)*MEMORY[0x1E4F4C9E0]);
  if (v21 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v22 = v21;
  if (v21 >= 0x17)
  {
    uint64_t v24 = (v21 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v21 | 7) != 0x17) {
      uint64_t v24 = v21 | 7;
    }
    uint64_t v25 = v24 + 1;
    int v23 = operator new(v24 + 1);
    uint64_t v41 = v22;
    unint64_t v42 = v25 | 0x8000000000000000;
    int v40 = v23;
    goto LABEL_36;
  }
  HIBYTE(v42) = v21;
  int v23 = &v40;
  if (v21) {
LABEL_36:
  }
    memmove(v23, v20, v22);
  *((unsigned char *)v23 + v22) = 0;
  std::string __p = (void *)MEMORY[0x1E4F143A8];
  uint64_t v51 = 3321888768;
  unint64_t v52 = (unint64_t)___ZZN16NetworkingModule10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_2;
  unsigned int v53 = &__block_descriptor_56_e8_40c41_ZTSNSt3__18weak_ptrI16NetworkingModuleEE_e63_v24__0_dict__object__v__8_block_void_____int__xpc::dict______16l;
  uint64_t v54 = v3;
  uint64_t v55 = v2[1];
  CFTypeRef v26 = (std::__shared_weak_count *)v2[2];
  __int16 v56 = v26;
  if (v26) {
    atomic_fetch_add_explicit(&v26->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v27 = _Block_copy(&__p);
  int v57 = v27;
  Service::registerCommandHandler(v3, (uint64_t)&v40, &v57);
  if (v27) {
    _Block_release(v27);
  }
  if (SHIBYTE(v42) < 0) {
    operator delete(v40);
  }
  uint64_t v28 = (const void *)*MEMORY[0x1E4F4CD20];
  size_t v29 = strlen((const char *)*MEMORY[0x1E4F4CD20]);
  if (v29 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  int v30 = (void *)v29;
  if (v29 >= 0x17)
  {
    uint64_t v32 = (v29 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v29 | 7) != 0x17) {
      uint64_t v32 = v29 | 7;
    }
    uint64_t v33 = v32 + 1;
    std::string v31 = operator new(v32 + 1);
    v48[1] = v30;
    unint64_t v49 = v33 | 0x8000000000000000;
    v48[0] = v31;
    goto LABEL_50;
  }
  HIBYTE(v49) = v29;
  std::string v31 = v48;
  if (v29) {
LABEL_50:
  }
    memmove(v31, v28, (size_t)v30);
  *((unsigned char *)v30 + (void)v31) = 0;
  int v40 = (void *)MEMORY[0x1E4F143A8];
  uint64_t v41 = 3321888768;
  unint64_t v42 = (unint64_t)___ZZN16NetworkingModule10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_3;
  uint64_t v43 = &__block_descriptor_56_e8_40c41_ZTSNSt3__18weak_ptrI16NetworkingModuleEE_e63_v24__0_dict__object__v__8_block_void_____int__xpc::dict______16l;
  uint64_t v44 = v3;
  uint64_t v45 = v2[1];
  BOOL v34 = (std::__shared_weak_count *)v2[2];
  int v46 = v34;
  if (v34) {
    atomic_fetch_add_explicit(&v34->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  xpc_object_t v35 = _Block_copy(&v40);
  size_t v47 = v35;
  Service::registerCommandHandler(v3, (uint64_t)v48, &v47);
  if (v35) {
    _Block_release(v35);
  }
  if (SHIBYTE(v49) < 0) {
    operator delete(v48[0]);
  }
  if (v46) {
    std::__shared_weak_count::__release_weak(v46);
  }
  if (v56) {
    std::__shared_weak_count::__release_weak(v56);
  }
  if (v64) {
    std::__shared_weak_count::__release_weak(v64);
  }
  if (v67) {
    std::__shared_weak_count::__release_weak(v67);
  }
  std::string::size_type v36 = v2[3];
  if (v36)
  {
    dispatch_group_leave(v36);
    int v37 = v2[3];
    if (v37) {
      dispatch_release(v37);
    }
  }
  int64_t v38 = (std::__shared_weak_count *)v2[2];
  if (v38) {
    std::__shared_weak_count::__release_weak(v38);
  }
  operator delete(v2);
  std::string::size_type v39 = (std::__shared_weak_count *)*((void *)a1 + 2);
  if (v39 && !atomic_fetch_add(&v39->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
    std::__shared_weak_count::__release_weak(v39);
  }
  operator delete(a1);
}

void sub_1C58211C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, std::__shared_weak_count *a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,std::__shared_weak_count *a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,std::__shared_weak_count *a47)
{
  if (v49) {
    _Block_release(v49);
  }
  if (a19)
  {
    std::__shared_weak_count::__release_weak(a19);
    if ((a26 & 0x80000000) == 0)
    {
LABEL_5:
      unint64_t v52 = a36;
      if (!a36)
      {
LABEL_10:
        if (a47) {
          std::__shared_weak_count::__release_weak(a47);
        }
        unsigned int v53 = *(std::__shared_weak_count **)(v50 - 112);
        if (v53) {
          std::__shared_weak_count::__release_weak(v53);
        }
        uint64_t v54 = v48[3];
        if (v54)
        {
          dispatch_group_leave(v54);
          uint64_t v55 = v48[3];
          if (v55) {
            dispatch_release(v55);
          }
        }
        __int16 v56 = (std::__shared_weak_count *)v48[2];
        if (v56) {
          std::__shared_weak_count::__release_weak(v56);
        }
        operator delete(v48);
        int v57 = (std::__shared_weak_count *)v47[2];
        if (v57)
        {
          if (!atomic_fetch_add(&v57->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
            std::__shared_weak_count::__release_weak(v57);
          }
        }
        operator delete(v47);
        _Unwind_Resume(a1);
      }
LABEL_9:
      std::__shared_weak_count::__release_weak(v52);
      goto LABEL_10;
    }
  }
  else if ((a26 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(__p);
  unint64_t v52 = a36;
  if (!a36) {
    goto LABEL_10;
  }
  goto LABEL_9;
}

void ___ZZN16NetworkingModule10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke(void *a1, xpc_object_t *a2, const void **a3)
{
  long long v4 = (std::__shared_weak_count *)a1[6];
  if (!v4) {
    return;
  }
  uint64_t v7 = (void *)a1[4];
  uint64_t v8 = std::__shared_weak_count::lock(v4);
  if (!v8) {
    return;
  }
  uint64_t v9 = v8;
  uint64_t v10 = a1[5];
  if (v10)
  {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    xpc_object_t v11 = *a2;
    if (v11)
    {
      xpc_retain(v11);
      uint64_t v12 = *a3;
      if (*a3) {
        goto LABEL_6;
      }
    }
    else
    {
      xpc_object_t v11 = xpc_null_create();
      uint64_t v12 = *a3;
      if (*a3)
      {
LABEL_6:
        size_t v13 = _Block_copy(v12);
        size_t v14 = (std::__shared_weak_count *)v7[16];
        if (!v14) {
LABEL_19:
        }
          std::__throw_bad_weak_ptr[abi:ne180100]();
        goto LABEL_10;
      }
    }
    size_t v13 = 0;
    size_t v14 = (std::__shared_weak_count *)v7[16];
    if (!v14) {
      goto LABEL_19;
    }
LABEL_10:
    uint64_t v15 = v7[15];
    uint64_t v16 = std::__shared_weak_count::lock(v14);
    if (!v16) {
      goto LABEL_19;
    }
    uint64_t v17 = v16;
    int v18 = operator new(0x28uLL);
    void *v18 = v7;
    v18[1] = v10;
    v18[2] = v9;
    v18[3] = v11;
    xpc_object_t v19 = xpc_null_create();
    v18[4] = v13;
    uint64_t v20 = v7[17];
    atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
    size_t v21 = operator new(0x18uLL);
    void *v21 = v18;
    v21[1] = v15;
    v21[2] = v17;
    dispatch_async_f(v20, v21, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI16NetworkingModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEENK3__0clEvEUb_EUlvE_EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_);
    if (!atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
    xpc_release(v19);
  }
  if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
}

void ___ZZN16NetworkingModule10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_51(void *a1, xpc_object_t *a2, const void **a3)
{
  long long v4 = (std::__shared_weak_count *)a1[6];
  if (!v4) {
    return;
  }
  uint64_t v7 = (void *)a1[4];
  uint64_t v8 = std::__shared_weak_count::lock(v4);
  if (!v8) {
    return;
  }
  uint64_t v9 = v8;
  uint64_t v10 = a1[5];
  if (v10)
  {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    xpc_object_t v11 = *a2;
    if (v11)
    {
      xpc_retain(v11);
      uint64_t v12 = *a3;
      if (*a3) {
        goto LABEL_6;
      }
    }
    else
    {
      xpc_object_t v11 = xpc_null_create();
      uint64_t v12 = *a3;
      if (*a3)
      {
LABEL_6:
        size_t v13 = _Block_copy(v12);
        size_t v14 = (std::__shared_weak_count *)v7[16];
        if (!v14) {
LABEL_19:
        }
          std::__throw_bad_weak_ptr[abi:ne180100]();
        goto LABEL_10;
      }
    }
    size_t v13 = 0;
    size_t v14 = (std::__shared_weak_count *)v7[16];
    if (!v14) {
      goto LABEL_19;
    }
LABEL_10:
    uint64_t v15 = v7[15];
    uint64_t v16 = std::__shared_weak_count::lock(v14);
    if (!v16) {
      goto LABEL_19;
    }
    uint64_t v17 = v16;
    int v18 = operator new(0x28uLL);
    void *v18 = v7;
    v18[1] = v10;
    v18[2] = v9;
    v18[3] = v11;
    xpc_object_t v19 = xpc_null_create();
    v18[4] = v13;
    uint64_t v20 = v7[17];
    atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
    size_t v21 = operator new(0x18uLL);
    void *v21 = v18;
    v21[1] = v15;
    v21[2] = v17;
    dispatch_async_f(v20, v21, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI16NetworkingModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEENK3__0clEvEUb0_EUlvE_EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_);
    if (!atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
    xpc_release(v19);
  }
  if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
}

void ___ZZN16NetworkingModule10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_2(void *a1, xpc_object_t *a2, const void **a3)
{
  long long v4 = (std::__shared_weak_count *)a1[6];
  if (!v4) {
    return;
  }
  uint64_t v7 = (void *)a1[4];
  uint64_t v8 = std::__shared_weak_count::lock(v4);
  if (!v8) {
    return;
  }
  uint64_t v9 = v8;
  uint64_t v10 = a1[5];
  if (v10)
  {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    xpc_object_t v11 = *a2;
    if (v11)
    {
      xpc_retain(v11);
      uint64_t v12 = *a3;
      if (*a3) {
        goto LABEL_6;
      }
    }
    else
    {
      xpc_object_t v11 = xpc_null_create();
      uint64_t v12 = *a3;
      if (*a3)
      {
LABEL_6:
        size_t v13 = _Block_copy(v12);
        size_t v14 = (std::__shared_weak_count *)v7[16];
        if (!v14) {
LABEL_19:
        }
          std::__throw_bad_weak_ptr[abi:ne180100]();
        goto LABEL_10;
      }
    }
    size_t v13 = 0;
    size_t v14 = (std::__shared_weak_count *)v7[16];
    if (!v14) {
      goto LABEL_19;
    }
LABEL_10:
    uint64_t v15 = v7[15];
    uint64_t v16 = std::__shared_weak_count::lock(v14);
    if (!v16) {
      goto LABEL_19;
    }
    uint64_t v17 = v16;
    int v18 = operator new(0x28uLL);
    void *v18 = v7;
    v18[1] = v10;
    v18[2] = v9;
    v18[3] = v11;
    xpc_object_t v19 = xpc_null_create();
    v18[4] = v13;
    uint64_t v20 = v7[17];
    atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
    size_t v21 = operator new(0x18uLL);
    void *v21 = v18;
    v21[1] = v15;
    v21[2] = v17;
    dispatch_async_f(v20, v21, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI16NetworkingModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEENK3__0clEvEUb1_EUlvE_EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_);
    if (!atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
    xpc_release(v19);
  }
  if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
}

void ___ZZN16NetworkingModule10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_3(void *a1, xpc_object_t *a2, const void **a3)
{
  long long v4 = (std::__shared_weak_count *)a1[6];
  if (!v4) {
    return;
  }
  uint64_t v7 = (void *)a1[4];
  uint64_t v8 = std::__shared_weak_count::lock(v4);
  if (!v8) {
    return;
  }
  uint64_t v9 = v8;
  uint64_t v10 = a1[5];
  if (v10)
  {
    xpc_object_t v11 = (std::__shared_weak_count *)a1[6];
    if (v11) {
      atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    xpc_object_t v12 = *a2;
    if (v12)
    {
      xpc_retain(v12);
      size_t v13 = *a3;
      if (*a3) {
        goto LABEL_8;
      }
    }
    else
    {
      xpc_object_t v12 = xpc_null_create();
      size_t v13 = *a3;
      if (*a3)
      {
LABEL_8:
        size_t v14 = _Block_copy(v13);
        uint64_t v15 = (std::__shared_weak_count *)v7[16];
        if (!v15) {
LABEL_24:
        }
          std::__throw_bad_weak_ptr[abi:ne180100]();
        goto LABEL_12;
      }
    }
    size_t v14 = 0;
    uint64_t v15 = (std::__shared_weak_count *)v7[16];
    if (!v15) {
      goto LABEL_24;
    }
LABEL_12:
    uint64_t v16 = v7[15];
    uint64_t v17 = std::__shared_weak_count::lock(v15);
    if (!v17) {
      goto LABEL_24;
    }
    int v18 = v17;
    xpc_object_t v19 = operator new(0x28uLL);
    uint64_t v20 = v19;
    void *v19 = v7;
    v19[1] = v10;
    void v19[2] = v11;
    if (v11) {
      atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    void v19[3] = v12;
    xpc_object_t v21 = xpc_null_create();
    v20[4] = v14;
    size_t v22 = v7[17];
    atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
    int v23 = operator new(0x18uLL);
    *int v23 = v20;
    v23[1] = v16;
    v23[2] = v18;
    dispatch_async_f(v22, v23, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI16NetworkingModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEENK3__0clEvEUb2_EUlvE_EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_);
    if (!atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
    xpc_release(v21);
    if (v11) {
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI16NetworkingModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEENK3__0clEvEUb_EUlvE_EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_(uint64_t **a1)
{
  uint64_t v84 = *MEMORY[0x1E4F143B8];
  size_t v2 = *a1;
  uint64_t v76 = v2;
  uint64_t v3 = *v2;
  long long v4 = *(NSObject **)(*v2 + 88);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    xpc::object::to_string((uint64_t *)&__p, (xpc::object *)(v2 + 3));
    size_t v5 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
       ? &__p
       : (std::string *)__p.__r_.__value_.__r.__words[0];
    *(_DWORD *)std::string buf = 136315138;
    *(void *)&uint8_t buf[4] = v5;
    _os_log_impl(&dword_1C5767000, v4, OS_LOG_TYPE_DEFAULT, "#I Add network policy: %s", buf, 0xCu);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  if ((TelephonyUtilIsInternalBuild() & 1) == 0)
  {
    uint64_t v7 = *(NSObject **)(v3 + 88);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(__p.__r_.__value_.__l.__data_) = 0;
      _os_log_impl(&dword_1C5767000, v7, OS_LOG_TYPE_DEFAULT, "#I Modifying network policy not supported in this build variant", (uint8_t *)&__p, 2u);
    }
    xpc_object_t v8 = xpc_null_create();
    uint64_t v9 = v2[4];
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
    xpc_object_t v10 = xpc_null_create();
    (*(void (**)(uint64_t, uint64_t, std::string *))(v9 + 16))(v9, 3760250884, &__p);
    xpc_release(__p.__r_.__value_.__l.__data_);
    xpc_release(v10);
    goto LABEL_130;
  }
  memset(buf, 170, sizeof(buf));
  xpc_object_t v6 = xpc_dictionary_get_value((xpc_object_t)v2[3], (const char *)*MEMORY[0x1E4F4CD68]);
  object.__r_.__value_.__r.__words[0] = (std::string::size_type)v6;
  if (v6) {
    xpc_retain(v6);
  }
  else {
    object.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
  }
  memset(&__p, 0, sizeof(__p));
  xpc::dyn_cast_or_default();
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  xpc_release(object.__r_.__value_.__l.__data_);
  if ((buf[23] & 0x80u) == 0) {
    xpc_object_t v11 = &buf[buf[23]];
  }
  else {
    xpc_object_t v11 = (uint8_t *)(*(void *)buf + *(void *)&buf[8]);
  }
  if ((buf[23] & 0x80u) == 0) {
    xpc_object_t v12 = buf;
  }
  else {
    xpc_object_t v12 = *(uint8_t **)buf;
  }
  for (; v12 != v11; ++v12)
    *xpc_object_t v12 = __toupper((char)*v12);
  size_t v13 = (const void *)*MEMORY[0x1E4F4D218];
  size_t v14 = strlen((const char *)*MEMORY[0x1E4F4D218]);
  if (v14 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  std::string::size_type v15 = v14;
  if (v14 >= 0x17)
  {
    uint64_t v17 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v14 | 7) != 0x17) {
      uint64_t v17 = v14 | 7;
    }
    uint64_t v18 = v17 + 1;
    p_p = (std::string *)operator new(v17 + 1);
    __p.__r_.__value_.__l.__size_ = v15;
    __p.__r_.__value_.__r.__words[2] = v18 | 0x8000000000000000;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)p_p;
    goto LABEL_31;
  }
  *((unsigned char *)&__p.__r_.__value_.__s + 23) = v14;
  p_p = &__p;
  if (v14) {
LABEL_31:
  }
    memmove(p_p, v13, v15);
  p_p->__r_.__value_.__s.__data_[v15] = 0;
  if ((buf[23] & 0x80u) == 0) {
    xpc_object_t v19 = buf;
  }
  else {
    xpc_object_t v19 = *(uint8_t **)buf;
  }
  int v20 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
  xpc_object_t v21 = (void *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t v22 = &__p;
  }
  else {
    size_t v22 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  int v23 = strcasecmp((const char *)v19, (const char *)v22);
  int v24 = v23;
  if (v20 < 0)
  {
    operator delete(v21);
    if (v24) {
      goto LABEL_40;
    }
LABEL_46:
    memset(&object, 170, sizeof(object));
    xpc_object_t v30 = xpc_dictionary_get_value((xpc_object_t)v2[3], (const char *)*MEMORY[0x1E4F4CB90]);
    xpc_object_t value = v30;
    if (v30) {
      xpc_retain(v30);
    }
    else {
      xpc_object_t value = xpc_null_create();
    }
    memset(&__p, 0, sizeof(__p));
    xpc::dyn_cast_or_default();
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    xpc_release(value);
    std::string::size_type size = HIBYTE(object.__r_.__value_.__r.__words[2]);
    if ((object.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = object.__r_.__value_.__l.__size_;
    }
    if (!size)
    {
      xpc_object_t v35 = *(NSObject **)(v3 + 88);
      if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(__p.__r_.__value_.__l.__data_) = 0;
        _os_log_impl(&dword_1C5767000, v35, OS_LOG_TYPE_DEFAULT, "#I Empty network policy bundle-id", (uint8_t *)&__p, 2u);
      }
      xpc_object_t v36 = xpc_null_create();
      uint64_t v37 = v2[4];
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v36;
      xpc_object_t v38 = xpc_null_create();
      (*(void (**)(uint64_t, uint64_t, std::string *))(v37 + 16))(v37, 3760250882, &__p);
      xpc_release(__p.__r_.__value_.__l.__data_);
      xpc_release(v38);
LABEL_127:
      if (SHIBYTE(object.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(object.__r_.__value_.__l.__data_);
        if (((char)buf[23] & 0x80000000) == 0) {
          goto LABEL_130;
        }
        goto LABEL_129;
      }
      goto LABEL_128;
    }
    CFArrayRef theArray = (CFArrayRef)0xAAAAAAAAAAAAAAAALL;
    NetworkingModule::getBundleIDList_sync(v3, (uint64_t)buf, (CFTypeRef *)&theArray);
    if (theArray) {
      uint64_t v32 = ctu::SharedRef<__CFArray const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFArray const>::get;
    }
    else {
      uint64_t v32 = 0;
    }
    if (!v32)
    {
      std::string::size_type v39 = *(NSObject **)(v3 + 88);
      if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(__p.__r_.__value_.__l.__data_) = 0;
        _os_log_impl(&dword_1C5767000, v39, OS_LOG_TYPE_DEFAULT, "#I BUG: We should never receive a null reference for bundle-id list", (uint8_t *)&__p, 2u);
      }
      xpc_object_t v40 = xpc_null_create();
      uint64_t v41 = v2[4];
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v40;
      xpc_object_t v42 = xpc_null_create();
      (*(void (**)(uint64_t, uint64_t, std::string *))(v41 + 16))(v41, 3760250880, &__p);
      xpc_release(__p.__r_.__value_.__l.__data_);
      xpc_release(v42);
      goto LABEL_125;
    }
    uint64_t Count = CFArrayGetCount(theArray);
    if (Count)
    {
      CFArrayRef v34 = theArray;
      if (SHIBYTE(object.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v77, object.__r_.__value_.__l.__data_, object.__r_.__value_.__l.__size_);
      }
      else {
        std::string v77 = object;
      }
      unsigned int v44 = CFArrayGetCount(v34);
      CFAllocatorRef v43 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      __p.__r_.__value_.__r.__words[0] = 0;
      ctu::cf::convert_copy();
      uint64_t v45 = (const void *)__p.__r_.__value_.__r.__words[0];
      if (__p.__r_.__value_.__r.__words[0])
      {
        v85.length = v44;
        v85.location = 0;
        int v46 = CFArrayContainsValue(v34, v85, __p.__r_.__value_.__l.__data_);
        CFRelease(v45);
        if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v77.__r_.__value_.__l.__data_);
        }
        if (v46)
        {
          size_t v47 = *(NSObject **)(v3 + 88);
          if (os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT))
          {
            LOWORD(__p.__r_.__value_.__l.__data_) = 0;
            _os_log_impl(&dword_1C5767000, v47, OS_LOG_TYPE_DEFAULT, "#I Policy for bundle-id already exists", (uint8_t *)&__p, 2u);
          }
          xpc_object_t v48 = xpc_null_create();
          uint64_t v49 = v2[4];
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v48;
          xpc_object_t v50 = xpc_null_create();
          (*(void (**)(uint64_t, void, std::string *))(v49 + 16))(v49, 0, &__p);
          xpc_release(__p.__r_.__value_.__l.__data_);
          xpc_release(v50);
LABEL_125:
          if (theArray) {
            CFRelease(theArray);
          }
          goto LABEL_127;
        }
      }
      else if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v77.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      CFAllocatorRef v43 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    }
    __p.__r_.__value_.__r.__words[0] = 0;
    if (ctu::cf::convert_copy()) {
      uint64_t v51 = (const void *)__p.__r_.__value_.__r.__words[0];
    }
    else {
      uint64_t v51 = 0;
    }
    CFMutableArrayRef Mutable = CFArrayCreateMutable(v43, 0, MEMORY[0x1E4F1D510]);
    if (Count)
    {
      for (CFIndex i = 0; i != Count; ++i)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(theArray, i);
        uint64_t v55 = ValueAtIndex;
        if (ValueAtIndex)
        {
          CFRetain(ValueAtIndex);
          CFArrayAppendValue(Mutable, v55);
          CFRelease(v55);
        }
      }
    }
    if (SHIBYTE(object.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&__p, object.__r_.__value_.__l.__data_, object.__r_.__value_.__l.__size_);
    }
    else {
      std::string __p = object;
    }
    xpc_object_t value = 0;
    ctu::cf::convert_copy();
    xpc_object_t v56 = value;
    if (value)
    {
      CFArrayAppendValue(Mutable, value);
      CFRelease(v56);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    int v57 = *(NSObject **)(v3 + 88);
    BOOL v58 = os_log_type_enabled(v57, OS_LOG_TYPE_DEFAULT);
    if (v56)
    {
      if (v58)
      {
        uint64_t v59 = buf;
        if ((buf[23] & 0x80u) != 0) {
          uint64_t v59 = *(uint8_t **)buf;
        }
        p_std::string object = &object;
        if ((object.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          p_std::string object = (std::string *)object.__r_.__value_.__r.__words[0];
        }
        LODWORD(__p.__r_.__value_.__l.__data_) = 136315650;
        *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)v59;
        WORD2(__p.__r_.__value_.__r.__words[1]) = 2080;
        *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)p_object;
        HIWORD(__p.__r_.__value_.__r.__words[2]) = 2112;
        std::string v82 = Mutable;
        _os_log_impl(&dword_1C5767000, v57, OS_LOG_TYPE_DEFAULT, "#I Add policy for action=%s bundleid=%s array=%@", (uint8_t *)&__p, 0x20u);
      }
      pthread_mutex_lock(&ctu::Singleton<ABMNetworkPolicy,ABMNetworkPolicy,ctu::PthreadMutexGuardPolicy<ABMNetworkPolicy>>::sInstance);
      uint64_t v61 = qword_1EA3D5FD8;
      if (!qword_1EA3D5FD8)
      {
        uint64_t v62 = operator new(0x18uLL);
        MEMORY[0x1C8791170](v62, @"com.apple.AppleBasebandManager.NetworkPolicy", *MEMORY[0x1E4F1D3F0]);
        uint64_t v63 = operator new(0x20uLL);
        void *v63 = &unk_1F20F6230;
        v63[1] = 0;
        v63[2] = 0;
        v63[3] = v62;
        uint64_t v64 = (std::__shared_weak_count *)off_1EA3D5FE0;
        qword_1EA3D5FD8 = (uint64_t)v62;
        off_1EA3D5FE0 = v63;
        if (v64 && !atomic_fetch_add(&v64->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
          std::__shared_weak_count::__release_weak(v64);
        }
        uint64_t v61 = qword_1EA3D5FD8;
      }
      unint64_t v65 = (std::__shared_weak_count *)off_1EA3D5FE0;
      if (off_1EA3D5FE0) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)off_1EA3D5FE0 + 1, 1uLL, memory_order_relaxed);
      }
      pthread_mutex_unlock(&ctu::Singleton<ABMNetworkPolicy,ABMNetworkPolicy,ctu::PthreadMutexGuardPolicy<ABMNetworkPolicy>>::sInstance);
      if ((buf[23] & 0x80u) == 0) {
        unint64_t v66 = buf;
      }
      else {
        unint64_t v66 = *(uint8_t **)buf;
      }
      ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&__p, (const char *)v66);
      BOOL v67 = ctu::cf::plist_adapter::set<__CFArray *>(v61, Mutable, (const __CFString *)__p.__r_.__value_.__l.__data_, 1);
      MEMORY[0x1C8791110](&__p);
      if (v65 && !atomic_fetch_add(&v65->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
        std::__shared_weak_count::__release_weak(v65);
      }
      if (v67)
      {
        xpc_object_t v68 = xpc_null_create();
        uint64_t v69 = v2[4];
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v68;
        xpc_object_t v70 = xpc_null_create();
        (*(void (**)(uint64_t, void, std::string *))(v69 + 16))(v69, 0, &__p);
        xpc_release(__p.__r_.__value_.__l.__data_);
        xpc_release(v70);
LABEL_121:
        if (Mutable) {
          CFRelease(Mutable);
        }
        if (v51) {
          CFRelease(v51);
        }
        goto LABEL_125;
      }
      long long v71 = *(NSObject **)(v3 + 88);
      if (os_log_type_enabled(v71, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(__p.__r_.__value_.__l.__data_) = 0;
        _os_log_impl(&dword_1C5767000, v71, OS_LOG_TYPE_DEFAULT, "#I Policy addition failed with preferences update error", (uint8_t *)&__p, 2u);
      }
    }
    else if (v58)
    {
      LOWORD(__p.__r_.__value_.__l.__data_) = 0;
      _os_log_impl(&dword_1C5767000, v57, OS_LOG_TYPE_DEFAULT, "#I Policy addition failed with some error", (uint8_t *)&__p, 2u);
    }
    xpc_object_t v72 = xpc_null_create();
    uint64_t v73 = v2[4];
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v72;
    xpc_object_t v74 = xpc_null_create();
    (*(void (**)(uint64_t, uint64_t, std::string *))(v73 + 16))(v73, 3760250880, &__p);
    xpc_release(__p.__r_.__value_.__l.__data_);
    xpc_release(v74);
    goto LABEL_121;
  }
  if (!v23) {
    goto LABEL_46;
  }
LABEL_40:
  uint64_t v25 = *(NSObject **)(v3 + 88);
  if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
  {
    CFTypeRef v26 = buf;
    if ((buf[23] & 0x80u) != 0) {
      CFTypeRef v26 = *(uint8_t **)buf;
    }
    LODWORD(__p.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)v26;
    _os_log_impl(&dword_1C5767000, v25, OS_LOG_TYPE_DEFAULT, "#I Invalid network policy action: %s", (uint8_t *)&__p, 0xCu);
  }
  xpc_object_t v27 = xpc_null_create();
  uint64_t v28 = v2[4];
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v27;
  xpc_object_t v29 = xpc_null_create();
  (*(void (**)(uint64_t, uint64_t, std::string *))(v28 + 16))(v28, 3760250882, &__p);
  xpc_release(__p.__r_.__value_.__l.__data_);
  xpc_release(v29);
LABEL_128:
  if ((char)buf[23] < 0) {
LABEL_129:
  }
    operator delete(*(void **)buf);
LABEL_130:
  _ZNSt3__110unique_ptrIZZZN16NetworkingModule10initializeEN8dispatch13group_sessionEENK3__0clEvEUb_EUlvE_NS_14default_deleteIS5_EEED1B8ne180100Ev((uint64_t *)&v76);
  uint64_t v75 = (std::__shared_weak_count *)a1[2];
  if (v75 && !atomic_fetch_add(&v75->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
    std::__shared_weak_count::__release_weak(v75);
  }
  operator delete(a1);
}

uint64_t *_ZNSt3__110unique_ptrIZZZN16NetworkingModule10initializeEN8dispatch13group_sessionEENK3__0clEvEUb_EUlvE_NS_14default_deleteIS5_EEED1B8ne180100Ev(uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    uint64_t v3 = *(const void **)(v2 + 32);
    if (v3) {
      _Block_release(v3);
    }
    xpc_release(*(xpc_object_t *)(v2 + 24));
    *(void *)(v2 + 24) = 0;
    long long v4 = *(std::__shared_weak_count **)(v2 + 16);
    if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    operator delete((void *)v2);
  }
  return a1;
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI16NetworkingModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEENK3__0clEvEUb0_EUlvE_EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_(uint64_t **a1)
{
  uint64_t v101 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *a1;
  uint64_t v93 = v2;
  uint64_t v3 = *v2;
  long long v4 = *(NSObject **)(*v2 + 88);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    xpc::object::to_string((uint64_t *)__p, (xpc::object *)(v2 + 3));
    size_t v5 = SHIBYTE(__p[2]) >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)std::string buf = 136315138;
    *(void *)&uint8_t buf[4] = v5;
    _os_log_impl(&dword_1C5767000, v4, OS_LOG_TYPE_DEFAULT, "#I Remove network policy: %s", buf, 0xCu);
    if (SHIBYTE(__p[2]) < 0) {
      operator delete(__p[0]);
    }
  }
  if ((TelephonyUtilIsInternalBuild() & 1) == 0)
  {
    uint64_t v7 = *(NSObject **)(v3 + 88);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(__p[0]) = 0;
      _os_log_impl(&dword_1C5767000, v7, OS_LOG_TYPE_DEFAULT, "#I Modifying network policy not supported in this build variant", (uint8_t *)__p, 2u);
    }
    xpc_object_t v8 = xpc_null_create();
    uint64_t v9 = v2[4];
    __p[0] = v8;
    xpc_object_t v10 = xpc_null_create();
    (*(void (**)(uint64_t, uint64_t, void **))(v9 + 16))(v9, 3760250884, __p);
    xpc_release(__p[0]);
    xpc_release(v10);
    goto LABEL_129;
  }
  memset(buf, 170, 24);
  xpc_object_t value = xpc_dictionary_get_value((xpc_object_t)v2[3], (const char *)*MEMORY[0x1E4F4CD68]);
  object.__r_.__value_.__r.__words[0] = (std::string::size_type)value;
  if (value) {
    xpc_retain(value);
  }
  else {
    object.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
  }
  memset(__p, 0, 24);
  xpc::dyn_cast_or_default();
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  xpc_release(object.__r_.__value_.__l.__data_);
  if ((buf[23] & 0x80u) == 0) {
    xpc_object_t v11 = &buf[buf[23]];
  }
  else {
    xpc_object_t v11 = (uint8_t *)(*(void *)buf + *(void *)&buf[8]);
  }
  if ((buf[23] & 0x80u) == 0) {
    xpc_object_t v12 = buf;
  }
  else {
    xpc_object_t v12 = *(uint8_t **)buf;
  }
  for (; v12 != v11; ++v12)
    *xpc_object_t v12 = __toupper((char)*v12);
  size_t v13 = (const void *)*MEMORY[0x1E4F4D218];
  size_t v14 = strlen((const char *)*MEMORY[0x1E4F4D218]);
  if (v14 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  std::string::size_type v15 = (void *)v14;
  if (v14 >= 0x17)
  {
    uint64_t v17 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v14 | 7) != 0x17) {
      uint64_t v17 = v14 | 7;
    }
    uint64_t v18 = v17 + 1;
    uint64_t v16 = operator new(v17 + 1);
    __p[1] = v15;
    __p[2] = (void *)(v18 | 0x8000000000000000);
    __p[0] = v16;
    goto LABEL_31;
  }
  HIBYTE(__p[2]) = v14;
  uint64_t v16 = __p;
  if (v14) {
LABEL_31:
  }
    memmove(v16, v13, (size_t)v15);
  *((unsigned char *)v15 + (void)v16) = 0;
  if ((buf[23] & 0x80u) == 0) {
    xpc_object_t v19 = buf;
  }
  else {
    xpc_object_t v19 = *(uint8_t **)buf;
  }
  int v20 = SHIBYTE(__p[2]);
  xpc_object_t v21 = __p[0];
  if (SHIBYTE(__p[2]) >= 0) {
    size_t v22 = __p;
  }
  else {
    size_t v22 = (void **)__p[0];
  }
  int v23 = strcasecmp((const char *)v19, (const char *)v22);
  int v24 = v23;
  if (v20 < 0)
  {
    operator delete(v21);
    if (v24) {
      goto LABEL_40;
    }
LABEL_46:
    memset(&object, 170, sizeof(object));
    xpc_object_t v30 = xpc_dictionary_get_value((xpc_object_t)v2[3], (const char *)*MEMORY[0x1E4F4CB90]);
    v94[0] = v30;
    if (v30) {
      xpc_retain(v30);
    }
    else {
      v94[0] = xpc_null_create();
    }
    memset(__p, 0, 24);
    xpc::dyn_cast_or_default();
    if (SHIBYTE(__p[2]) < 0) {
      operator delete(__p[0]);
    }
    xpc_release(v94[0]);
    std::string::size_type size = HIBYTE(object.__r_.__value_.__r.__words[2]);
    if ((object.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = object.__r_.__value_.__l.__size_;
    }
    if (size)
    {
      CFArrayRef theArray = (CFArrayRef)0xAAAAAAAAAAAAAAAALL;
      NetworkingModule::getBundleIDList_sync(v3, (uint64_t)buf, (CFTypeRef *)&theArray);
      if (theArray) {
        uint64_t v32 = ctu::SharedRef<__CFArray const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFArray const>::get;
      }
      else {
        uint64_t v32 = 0;
      }
      if (v32)
      {
        uint64_t Count = CFArrayGetCount(theArray);
        if (Count)
        {
          CFArrayRef v34 = theArray;
          if (SHIBYTE(object.__r_.__value_.__r.__words[2]) < 0) {
            std::string::__init_copy_ctor_external(&v96, object.__r_.__value_.__l.__data_, object.__r_.__value_.__l.__size_);
          }
          else {
            std::string v96 = object;
          }
          unsigned int v43 = CFArrayGetCount(v34);
          CFAllocatorRef v44 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
          __p[0] = 0;
          ctu::cf::convert_copy();
          uint64_t v45 = __p[0];
          if (__p[0])
          {
            v102.length = v43;
            v102.location = 0;
            int v46 = CFArrayContainsValue(v34, v102, __p[0]);
            CFRelease(v45);
            if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v96.__r_.__value_.__l.__data_);
            }
            if (v46)
            {
              __p[0] = 0;
              int v47 = ctu::cf::convert_copy();
              xpc_object_t v48 = __p[0];
              if (!v47) {
                xpc_object_t v48 = 0;
              }
              uint64_t v92 = v48;
              CFMutableArrayRef Mutable = CFArrayCreateMutable(v44, 0, MEMORY[0x1E4F1D510]);
              CFIndex v50 = 0;
              while (1)
              {
                ValueAtIndex = CFArrayGetValueAtIndex(theArray, v50);
                unint64_t v52 = ValueAtIndex;
                if (ValueAtIndex)
                {
                  CFTypeID v53 = CFGetTypeID(ValueAtIndex);
                  if (v53 == CFStringGetTypeID()) {
                    CFRetain(v52);
                  }
                  else {
                    unint64_t v52 = 0;
                  }
                }
                memset(__p, 0, 24);
                ctu::cf::assign();
                uint64_t v95 = __p[2];
                *(_OWORD *)uint64_t v94 = *(_OWORD *)__p;
                if ((object.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  std::string::size_type v54 = HIBYTE(object.__r_.__value_.__r.__words[2]);
                }
                else {
                  std::string::size_type v54 = object.__r_.__value_.__l.__size_;
                }
                xpc_object_t v55 = (xpc_object_t)HIBYTE(v95);
                int v56 = SHIBYTE(v95);
                if (SHIBYTE(v95) < 0) {
                  xpc_object_t v55 = v94[1];
                }
                if ((xpc_object_t)v54 != v55)
                {
                  BOOL v66 = 0;
                  if ((SHIBYTE(v95) & 0x80000000) == 0) {
                    goto LABEL_104;
                  }
                  goto LABEL_107;
                }
                int v57 = SHIBYTE(v95) >= 0 ? v94 : (xpc_object_t *)v94[0];
                if ((*((unsigned char *)&object.__r_.__value_.__s + 23) & 0x80) != 0) {
                  break;
                }
                if (*((unsigned char *)&object.__r_.__value_.__s + 23))
                {
                  uint64_t v58 = HIBYTE(object.__r_.__value_.__r.__words[2]) - 1;
                  p_std::string object = &object;
                  do
                  {
                    int v61 = p_object->__r_.__value_.__s.__data_[0];
                    p_std::string object = (std::string *)((char *)p_object + 1);
                    int v60 = v61;
                    int v63 = *(unsigned __int8 *)v57;
                    int v57 = (xpc_object_t *)((char *)v57 + 1);
                    int v62 = v63;
                    BOOL v65 = v58-- != 0;
                    BOOL v66 = v60 == v62;
                  }
                  while (v60 == v62 && v65);
LABEL_103:
                  if ((v56 & 0x80000000) == 0) {
                    goto LABEL_104;
                  }
                  goto LABEL_107;
                }
                BOOL v66 = 1;
                if ((SHIBYTE(v95) & 0x80000000) == 0)
                {
LABEL_104:
                  if (!v66) {
                    goto LABEL_108;
                  }
                  goto LABEL_75;
                }
LABEL_107:
                operator delete(v94[0]);
                if (!v66)
                {
LABEL_108:
                  if (!v52) {
                    goto LABEL_77;
                  }
                  CFRetain(v52);
                  CFArrayAppendValue(Mutable, v52);
                  CFRelease(v52);
LABEL_76:
                  CFRelease(v52);
                  goto LABEL_77;
                }
LABEL_75:
                if (v52) {
                  goto LABEL_76;
                }
LABEL_77:
                if (++v50 == Count)
                {
                  BOOL v67 = *(NSObject **)(v3 + 88);
                  if (os_log_type_enabled(v67, OS_LOG_TYPE_DEFAULT))
                  {
                    xpc_object_t v68 = buf;
                    if ((buf[23] & 0x80u) != 0) {
                      xpc_object_t v68 = *(uint8_t **)buf;
                    }
                    uint64_t v69 = &object;
                    if ((object.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                      uint64_t v69 = (std::string *)object.__r_.__value_.__r.__words[0];
                    }
                    LODWORD(__p[0]) = 136315650;
                    *(void **)((char *)__p + 4) = v68;
                    WORD2(__p[1]) = 2080;
                    *(void **)((char *)&__p[1] + 6) = v69;
                    HIWORD(__p[2]) = 2112;
                    __p[3] = Mutable;
                    _os_log_impl(&dword_1C5767000, v67, OS_LOG_TYPE_DEFAULT, "#I Remove policy for action=%s bundleid=%s array=%@", (uint8_t *)__p, 0x20u);
                  }
                  pthread_mutex_lock(&ctu::Singleton<ABMNetworkPolicy,ABMNetworkPolicy,ctu::PthreadMutexGuardPolicy<ABMNetworkPolicy>>::sInstance);
                  if (qword_1EA3D5FD8)
                  {
LABEL_117:
                    long long v71 = (std::__shared_weak_count_vtbl *)qword_1EA3D5FD8;
                    xpc_object_t v70 = (std::__shared_weak_count *)off_1EA3D5FE0;
                    if (!off_1EA3D5FE0)
                    {
LABEL_139:
                      pthread_mutex_unlock(&ctu::Singleton<ABMNetworkPolicy,ABMNetworkPolicy,ctu::PthreadMutexGuardPolicy<ABMNetworkPolicy>>::sInstance);
                      if ((buf[23] & 0x80u) == 0) {
                        uint64_t v78 = buf;
                      }
                      else {
                        uint64_t v78 = *(uint8_t **)buf;
                      }
                      ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)__p, (const char *)v78);
                      BOOL v79 = ctu::cf::plist_adapter::set<__CFArray *>((uint64_t)v71, Mutable, (const __CFString *)__p[0], 1);
                      MEMORY[0x1C8791110](__p);
                      if (v70 && !atomic_fetch_add(&v70->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                      {
                        ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
                        std::__shared_weak_count::__release_weak(v70);
                      }
                      if (v79)
                      {
                        xpc_object_t v80 = xpc_null_create();
                        uint64_t v81 = v2[4];
                        __p[0] = v80;
                        xpc_object_t v82 = xpc_null_create();
                        long long v83 = *(void (**)(uint64_t, void, void **))(v81 + 16);
                        uint64_t v84 = v81;
                        CFRange v85 = v92;
                        v83(v84, 0, __p);
                        xpc_release(__p[0]);
                        xpc_release(v82);
                      }
                      else
                      {
                        unint64_t v86 = *(NSObject **)(v3 + 88);
                        if (os_log_type_enabled(v86, OS_LOG_TYPE_DEFAULT))
                        {
                          LOWORD(__p[0]) = 0;
                          _os_log_impl(&dword_1C5767000, v86, OS_LOG_TYPE_DEFAULT, "#I Policy removal failed with preferences update error", (uint8_t *)__p, 2u);
                        }
                        xpc_object_t v87 = xpc_null_create();
                        uint64_t v88 = v2[4];
                        __p[0] = v87;
                        xpc_object_t v89 = xpc_null_create();
                        int v90 = *(void (**)(uint64_t, uint64_t, void **))(v88 + 16);
                        uint64_t v91 = v88;
                        CFRange v85 = v92;
                        v90(v91, 3760250880, __p);
                        xpc_release(__p[0]);
                        xpc_release(v89);
                      }
                      if (Mutable) {
                        CFRelease(Mutable);
                      }
                      if (v85) {
                        CFRelease(v85);
                      }
                      goto LABEL_124;
                    }
                  }
                  else
                  {
                    long long v71 = (std::__shared_weak_count_vtbl *)operator new(0x18uLL);
                    MEMORY[0x1C8791170](v71, @"com.apple.AppleBasebandManager.NetworkPolicy", *MEMORY[0x1E4F1D3F0]);
                    xpc_object_t v70 = (std::__shared_weak_count *)operator new(0x20uLL);
                    v70->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20F6230;
                    v70->__shared_owners_ = 0;
                    v70->__shared_weak_owners_ = 0;
                    v70[1].__vftable = v71;
                    std::string v77 = (std::__shared_weak_count *)off_1EA3D5FE0;
                    qword_1EA3D5FD8 = (uint64_t)v71;
                    off_1EA3D5FE0 = v70;
                    if (v77)
                    {
                      if (!atomic_fetch_add(&v77->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                      {
                        ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
                        std::__shared_weak_count::__release_weak(v77);
                      }
                      goto LABEL_117;
                    }
                  }
                  atomic_fetch_add_explicit(&v70->__shared_owners_, 1uLL, memory_order_relaxed);
                  goto LABEL_139;
                }
              }
              BOOL v66 = memcmp(object.__r_.__value_.__l.__data_, v57, object.__r_.__value_.__l.__size_) == 0;
              goto LABEL_103;
            }
          }
          else if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(v96.__r_.__value_.__l.__data_);
          }
        }
        xpc_object_t v72 = *(NSObject **)(v3 + 88);
        if (os_log_type_enabled(v72, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(__p[0]) = 0;
          _os_log_impl(&dword_1C5767000, v72, OS_LOG_TYPE_DEFAULT, "#I Policy for bundle-id doesn't exist", (uint8_t *)__p, 2u);
        }
        xpc_object_t v73 = xpc_null_create();
        uint64_t v74 = v2[4];
        __p[0] = v73;
        xpc_object_t v75 = xpc_null_create();
        (*(void (**)(uint64_t, void, void **))(v74 + 16))(v74, 0, __p);
        xpc_release(__p[0]);
        xpc_release(v75);
      }
      else
      {
        std::string::size_type v39 = *(NSObject **)(v3 + 88);
        if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(__p[0]) = 0;
          _os_log_impl(&dword_1C5767000, v39, OS_LOG_TYPE_DEFAULT, "#I BUG: We should never receive a null reference for bundle-id list", (uint8_t *)__p, 2u);
        }
        xpc_object_t v40 = xpc_null_create();
        uint64_t v41 = v2[4];
        __p[0] = v40;
        xpc_object_t v42 = xpc_null_create();
        (*(void (**)(uint64_t, uint64_t, void **))(v41 + 16))(v41, 3760250880, __p);
        xpc_release(__p[0]);
        xpc_release(v42);
      }
LABEL_124:
      if (theArray) {
        CFRelease(theArray);
      }
    }
    else
    {
      xpc_object_t v35 = *(NSObject **)(v3 + 88);
      if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(__p[0]) = 0;
        _os_log_impl(&dword_1C5767000, v35, OS_LOG_TYPE_DEFAULT, "#I Empty network policy bundle-id", (uint8_t *)__p, 2u);
      }
      xpc_object_t v36 = xpc_null_create();
      uint64_t v37 = v2[4];
      __p[0] = v36;
      xpc_object_t v38 = xpc_null_create();
      (*(void (**)(uint64_t, uint64_t, void **))(v37 + 16))(v37, 3760250882, __p);
      xpc_release(__p[0]);
      xpc_release(v38);
    }
    if (SHIBYTE(object.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(object.__r_.__value_.__l.__data_);
      if (((char)buf[23] & 0x80000000) == 0) {
        goto LABEL_129;
      }
      goto LABEL_128;
    }
    goto LABEL_127;
  }
  if (!v23) {
    goto LABEL_46;
  }
LABEL_40:
  uint64_t v25 = *(NSObject **)(v3 + 88);
  if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
  {
    CFTypeRef v26 = buf;
    if ((buf[23] & 0x80u) != 0) {
      CFTypeRef v26 = *(uint8_t **)buf;
    }
    LODWORD(__p[0]) = 136315138;
    *(void **)((char *)__p + 4) = v26;
    _os_log_impl(&dword_1C5767000, v25, OS_LOG_TYPE_DEFAULT, "#I Invalid network policy action: %s", (uint8_t *)__p, 0xCu);
  }
  xpc_object_t v27 = xpc_null_create();
  uint64_t v28 = v2[4];
  __p[0] = v27;
  xpc_object_t v29 = xpc_null_create();
  (*(void (**)(uint64_t, uint64_t, void **))(v28 + 16))(v28, 3760250882, __p);
  xpc_release(__p[0]);
  xpc_release(v29);
LABEL_127:
  if ((char)buf[23] < 0) {
LABEL_128:
  }
    operator delete(*(void **)buf);
LABEL_129:
  _ZNSt3__110unique_ptrIZZZN16NetworkingModule10initializeEN8dispatch13group_sessionEENK3__0clEvEUb0_EUlvE_NS_14default_deleteIS5_EEED1B8ne180100Ev((uint64_t *)&v93);
  uint64_t v76 = (std::__shared_weak_count *)a1[2];
  if (v76 && !atomic_fetch_add(&v76->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
    std::__shared_weak_count::__release_weak(v76);
  }
  operator delete(a1);
}

uint64_t *_ZNSt3__110unique_ptrIZZZN16NetworkingModule10initializeEN8dispatch13group_sessionEENK3__0clEvEUb0_EUlvE_NS_14default_deleteIS5_EEED1B8ne180100Ev(uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    uint64_t v3 = *(const void **)(v2 + 32);
    if (v3) {
      _Block_release(v3);
    }
    xpc_release(*(xpc_object_t *)(v2 + 24));
    *(void *)(v2 + 24) = 0;
    long long v4 = *(std::__shared_weak_count **)(v2 + 16);
    if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    operator delete((void *)v2);
  }
  return a1;
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI16NetworkingModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEENK3__0clEvEUb1_EUlvE_EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_(uint64_t **a1)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *a1;
  std::string::size_type v39 = v2;
  uint64_t v3 = *v2;
  long long v4 = *(NSObject **)(*v2 + 88);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    xpc::object::to_string((uint64_t *)&__p, (xpc::object *)(v2 + 3));
    size_t v5 = v45 >= 0 ? &__p : (long long *)__p;
    *(_DWORD *)std::string buf = 136315138;
    *(void *)&uint8_t buf[4] = v5;
    _os_log_impl(&dword_1C5767000, v4, OS_LOG_TYPE_DEFAULT, "#I Get network policy: %s", buf, 0xCu);
    if (SHIBYTE(v45) < 0) {
      operator delete((void *)__p);
    }
  }
  memset(buf, 170, 24);
  xpc_object_t v6 = xpc_dictionary_get_value((xpc_object_t)v2[3], (const char *)*MEMORY[0x1E4F4CD68]);
  xpc_object_t object = v6;
  if (v6) {
    xpc_retain(v6);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  long long __p = 0uLL;
  int64_t v45 = 0;
  xpc::dyn_cast_or_default();
  if (SHIBYTE(v45) < 0) {
    operator delete((void *)__p);
  }
  xpc_release(object);
  if ((buf[23] & 0x80u) == 0) {
    uint64_t v7 = &buf[buf[23]];
  }
  else {
    uint64_t v7 = (uint8_t *)(*(void *)buf + *(void *)&buf[8]);
  }
  if ((buf[23] & 0x80u) == 0) {
    xpc_object_t v8 = buf;
  }
  else {
    xpc_object_t v8 = *(uint8_t **)buf;
  }
  for (; v8 != v7; ++v8)
    uint8_t *v8 = __toupper((char)*v8);
  uint64_t v9 = (const void *)*MEMORY[0x1E4F4D218];
  size_t v10 = strlen((const char *)*MEMORY[0x1E4F4D218]);
  if (v10 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v11 = v10;
  if (v10 >= 0x17)
  {
    uint64_t v13 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v10 | 7) != 0x17) {
      uint64_t v13 = v10 | 7;
    }
    uint64_t v14 = v13 + 1;
    p_p = (long long *)operator new(v13 + 1);
    *((void *)&__p + 1) = v11;
    int64_t v45 = v14 | 0x8000000000000000;
    *(void *)&long long __p = p_p;
    goto LABEL_27;
  }
  HIBYTE(v45) = v10;
  p_p = &__p;
  if (v10) {
LABEL_27:
  }
    memmove(p_p, v9, v11);
  *((unsigned char *)p_p + v11) = 0;
  if ((buf[23] & 0x80u) == 0) {
    std::string::size_type v15 = buf;
  }
  else {
    std::string::size_type v15 = *(uint8_t **)buf;
  }
  int v16 = SHIBYTE(v45);
  uint64_t v17 = (void *)__p;
  if (v45 >= 0) {
    uint64_t v18 = (const char *)&__p;
  }
  else {
    uint64_t v18 = (const char *)__p;
  }
  int v19 = strcasecmp((const char *)v15, v18);
  int v20 = v19;
  if (v16 < 0)
  {
    operator delete(v17);
    if (v20) {
      goto LABEL_36;
    }
  }
  else if (v19)
  {
LABEL_36:
    xpc_object_t v21 = *(NSObject **)(v3 + 88);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
    {
      size_t v22 = buf;
      if ((buf[23] & 0x80u) != 0) {
        size_t v22 = *(uint8_t **)buf;
      }
      LODWORD(__p) = 136315138;
      *(void *)((char *)&__p + 4) = v22;
      _os_log_impl(&dword_1C5767000, v21, OS_LOG_TYPE_DEFAULT, "#I Invalid network policy action: %s", (uint8_t *)&__p, 0xCu);
    }
    xpc_object_t v23 = xpc_null_create();
    uint64_t v24 = v2[4];
    *(void *)&long long __p = v23;
    xpc_object_t v25 = xpc_null_create();
    (*(void (**)(uint64_t, uint64_t, long long *))(v24 + 16))(v24, 3760250882, &__p);
    xpc_release((xpc_object_t)__p);
    xpc_release(v25);
    goto LABEL_66;
  }
  xpc_object_t object = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  NetworkingModule::getBundleIDList_sync(v3, (uint64_t)buf, (CFTypeRef *)&object);
  if (object) {
    CFTypeRef v26 = ctu::SharedRef<__CFArray const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFArray const>::get;
  }
  else {
    CFTypeRef v26 = 0;
  }
  if (!v26 || !CFArrayGetCount((CFArrayRef)object))
  {
    xpc_object_t v29 = *(NSObject **)(v3 + 88);
    if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
    {
      xpc_object_t v30 = buf;
      if ((buf[23] & 0x80u) != 0) {
        xpc_object_t v30 = *(uint8_t **)buf;
      }
      LODWORD(__p) = 136315138;
      *(void *)((char *)&__p + 4) = v30;
      _os_log_impl(&dword_1C5767000, v29, OS_LOG_TYPE_DEFAULT, "#I No network policy available for action: %s", (uint8_t *)&__p, 0xCu);
    }
    xpc_object_t v31 = xpc_null_create();
    uint64_t v32 = v2[4];
    *(void *)&long long __p = v31;
    xpc_object_t v33 = xpc_null_create();
    (*(void (**)(uint64_t, void, long long *))(v32 + 16))(v32, 0, &__p);
    xpc_release((xpc_object_t)__p);
    xpc_release(v33);
    goto LABEL_64;
  }
  *(void *)&long long __p = 0xAAAAAAAAAAAAAAAALL;
  xpc_object_t v27 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v28 = v27;
  if (v27)
  {
    *(void *)&long long __p = v27;
  }
  else
  {
    xpc_object_t v28 = xpc_null_create();
    *(void *)&long long __p = v28;
    if (!v28)
    {
      xpc_object_t v34 = xpc_null_create();
      xpc_object_t v28 = 0;
      goto LABEL_59;
    }
  }
  if (MEMORY[0x1C8792D30](v28) != MEMORY[0x1E4F14590])
  {
    xpc_object_t v34 = xpc_null_create();
LABEL_59:
    *(void *)&long long __p = v34;
    goto LABEL_60;
  }
  xpc_retain(v28);
LABEL_60:
  xpc_release(v28);
  ctu::cf_to_xpc((uint64_t *)&value, (ctu *)object, v35);
  if ((buf[23] & 0x80u) == 0) {
    xpc_object_t v36 = buf;
  }
  else {
    xpc_object_t v36 = *(uint8_t **)buf;
  }
  xpc_dictionary_set_value((xpc_object_t)__p, (const char *)v36, value);
  xpc_object_t v37 = value;
  xpc_object_t value = xpc_null_create();
  xpc_release(v37);
  xpc_release(value);
  xpc_object_t value = 0;
  unsigned int v40 = 0;
  dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(v2 + 4, &v40, (void **)&__p);
  xpc_release((xpc_object_t)__p);
LABEL_64:
  if (object) {
    CFRelease(object);
  }
LABEL_66:
  if ((char)buf[23] < 0) {
    operator delete(*(void **)buf);
  }
  _ZNSt3__110unique_ptrIZZZN16NetworkingModule10initializeEN8dispatch13group_sessionEENK3__0clEvEUb1_EUlvE_NS_14default_deleteIS5_EEED1B8ne180100Ev((uint64_t *)&v39);
  xpc_object_t v38 = (std::__shared_weak_count *)a1[2];
  if (v38 && !atomic_fetch_add(&v38->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
    std::__shared_weak_count::__release_weak(v38);
  }
  operator delete(a1);
}

void sub_1C5824054(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, CFTypeRef cf, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, xpc_object_t object,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *_ZNSt3__110unique_ptrIZZZN16NetworkingModule10initializeEN8dispatch13group_sessionEENK3__0clEvEUb1_EUlvE_NS_14default_deleteIS5_EEED1B8ne180100Ev(uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    uint64_t v3 = *(const void **)(v2 + 32);
    if (v3) {
      _Block_release(v3);
    }
    xpc_release(*(xpc_object_t *)(v2 + 24));
    *(void *)(v2 + 24) = 0;
    long long v4 = *(std::__shared_weak_count **)(v2 + 16);
    if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    operator delete((void *)v2);
  }
  return a1;
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI16NetworkingModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEENK3__0clEvEUb2_EUlvE_EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_(config::hw *a1)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(uint64_t **)a1;
  uint64_t v3 = **(void **)a1;
  uint64_t v4 = 3760250880;
  if (config::hw::watch(a1))
  {
    size_t v5 = (const char *)*MEMORY[0x1E4F4C370];
    if (xpc_dictionary_get_value((xpc_object_t)v2[3], (const char *)*MEMORY[0x1E4F4C370]))
    {
      xpc_object_t value = xpc_dictionary_get_value((xpc_object_t)v2[3], v5);
      *(void *)xpc_object_t object = value;
      if (value) {
        xpc_retain(value);
      }
      else {
        *(void *)xpc_object_t object = xpc_null_create();
      }
      *(unsigned char *)(v3 + 192) = xpc::dyn_cast_or_default((xpc *)object, 0);
      xpc_release(*(xpc_object_t *)object);
      uint64_t v7 = *(NSObject **)(v3 + 88);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        if (*(unsigned char *)(v3 + 192)) {
          xpc_object_t v8 = "";
        }
        else {
          xpc_object_t v8 = " not";
        }
        *(_DWORD *)xpc_object_t object = 136315138;
        *(void *)&object[4] = v8;
        _os_log_impl(&dword_1C5767000, v7, OS_LOG_TYPE_DEFAULT, "#I Device is%s Bread paired", object, 0xCu);
      }
      if (*(unsigned char *)(v3 + 193)) {
        NetworkingModule::applyBreadMode_sync((NetworkingModule *)v3);
      }
      uint64_t v4 = 0;
    }
    if (*(unsigned char *)(v3 + 192))
    {
      if (*(unsigned char *)(v3 + 193))
      {
        uint64_t v9 = (const char *)*MEMORY[0x1E4F4C2E8];
        if (xpc_dictionary_get_value((xpc_object_t)v2[3], (const char *)*MEMORY[0x1E4F4C2E8]))
        {
          size_t v10 = (const char *)*MEMORY[0x1E4F4C430];
          if (xpc_dictionary_get_value((xpc_object_t)v2[3], (const char *)*MEMORY[0x1E4F4C430]))
          {
            xpc_object_t v11 = xpc_dictionary_get_value((xpc_object_t)v2[3], v9);
            *(void *)xpc_object_t object = v11;
            if (v11) {
              xpc_retain(v11);
            }
            else {
              *(void *)xpc_object_t object = xpc_null_create();
            }
            uint64_t v12 = xpc::dyn_cast_or_default((xpc *)object, 0);
            xpc_release(*(xpc_object_t *)object);
            xpc_object_t v13 = xpc_dictionary_get_value((xpc_object_t)v2[3], v10);
            *(void *)xpc_object_t object = v13;
            if (v13) {
              xpc_retain(v13);
            }
            else {
              *(void *)xpc_object_t object = xpc_null_create();
            }
            uint64_t v14 = xpc::dyn_cast_or_default((xpc *)object, 0);
            xpc_release(*(xpc_object_t *)object);
            NetworkingModule::sendVisitInfo_sync((NetworkingModule *)v3, v12, v14);
            uint64_t v4 = 0;
          }
        }
      }
    }
  }
  else
  {
    uint64_t v4 = 3760250884;
  }
  xpc_object_t v15 = xpc_null_create();
  uint64_t v16 = v2[4];
  *(void *)xpc_object_t object = v15;
  xpc_object_t v17 = xpc_null_create();
  (*(void (**)(uint64_t, uint64_t, unsigned char *))(v16 + 16))(v16, v4, object);
  xpc_release(*(xpc_object_t *)object);
  xpc_release(v17);
  uint64_t v18 = (const void *)v2[4];
  if (v18) {
    _Block_release(v18);
  }
  xpc_release((xpc_object_t)v2[3]);
  v2[3] = 0;
  int v19 = (std::__shared_weak_count *)v2[2];
  if (v19) {
    std::__shared_weak_count::__release_weak(v19);
  }
  operator delete(v2);
  int v20 = (std::__shared_weak_count *)*((void *)a1 + 2);
  if (v20 && !atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
  operator delete(a1);
}

void sub_1C5824550(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void dispatch::async<void ctu::SharedSynchronizable<NetworkingModule>::execute_wrapped<NetworkingModule::initialize(dispatch::group_session)::$_1>(NetworkingModule::initialize(dispatch::group_session)::$_1 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<NetworkingModule::initialize(dispatch::group_session)::$_1,dispatch_queue_s *::default_delete<NetworkingModule::initialize(dispatch::group_session)::$_1>>)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  uint64_t v2 = *(NetworkingModule ***)a1;
  NetworkingModule::finishInitialization_sync(**(NetworkingModule ***)a1);
  operator delete(v2);
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    uint64_t v4 = (void *)a1;
  }
  else
  {
    uint64_t v4 = (void *)a1;
  }
  operator delete(v4);
}

void sub_1C582473C(_Unwind_Exception *a1)
{
  operator delete(v2);
  uint64_t v4 = (std::__shared_weak_count *)v1[2];
  if (v4)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t __cxx_global_var_init_7_0()
{
  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<ABMNetworkPolicy>::~PthreadMutexGuardPolicy, &ctu::Singleton<ABMNetworkPolicy,ABMNetworkPolicy,ctu::PthreadMutexGuardPolicy<ABMNetworkPolicy>>::sInstance, &dword_1C5767000);
  }
  return result;
}

uint64_t __cxx_global_var_init_8_0()
{
  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<CommandDriverFactory>::~PthreadMutexGuardPolicy, &ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance, &dword_1C5767000);
  }
  return result;
}

const char *IOKitAccessoriesDelegate::getName(IOKitAccessoriesDelegate *this)
{
  return "IOKitAccessories.delegate";
}

uint64_t IOKitAccessoriesDelegate::create@<X0>(void *a1@<X0>, NSObject **a2@<X1>, std::__shared_weak_count_vtbl **a3@<X8>)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  uint64_t v16 = 0;
  xpc_object_t v17 = 0;
  xpc_object_t v6 = (std::__shared_weak_count_vtbl *)operator new(0xB8uLL);
  uint64_t v7 = a1[3];
  if (!v7) {
    goto LABEL_4;
  }
  if ((void *)v7 != a1)
  {
    uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 16))(v7);
LABEL_4:
    int v19 = (void *)v7;
    goto LABEL_6;
  }
  int v19 = v18;
  (*(void (**)(void *, void *))(*a1 + 24))(a1, v18);
LABEL_6:
  xpc_object_t v8 = *a2;
  xpc_object_t v15 = v8;
  if (v8) {
    dispatch_retain(v8);
  }
  IOKitAccessoriesDelegate::IOKitAccessoriesDelegate((uint64_t)v6, v18, &v15);
  xpc_object_t v11 = (std::__shared_weak_count *)operator new(0x20uLL);
  v11->__shared_owners_ = 0;
  p_shared_owners = &v11->__shared_owners_;
  v11->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20F6378;
  v11->__shared_weak_owners_ = 0;
  v11[1].__vftable = v6;
  on_zero_shared = (std::__shared_weak_count *)v6->__on_zero_shared;
  if (!on_zero_shared)
  {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v6->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v6;
    v6->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v11;
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  if (on_zero_shared->__shared_owners_ == -1)
  {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v6->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v6;
    v6->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v11;
    std::__shared_weak_count::__release_weak(on_zero_shared);
    if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL))
    {
LABEL_13:
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
LABEL_14:
  uint64_t v16 = v6;
  xpc_object_t v17 = v11;
  if (v8) {
    dispatch_release(v8);
  }
  if (v19 == v18)
  {
    (*(void (**)(void *))(v18[0] + 32))(v18);
  }
  else if (v19)
  {
    (*(void (**)(void *, uint64_t, uint64_t))(*v19 + 40))(v19, v9, v10);
  }
  uint64_t result = (*((uint64_t (**)(std::__shared_weak_count_vtbl *))v6->~__shared_weak_count + 7))(v6);
  *a3 = v6;
  a3[1] = (std::__shared_weak_count_vtbl *)v11;
  return result;
}

void sub_1C5824AA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12)
{
  operator delete(v12);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void *std::function<void ()(ctu::cf::CFSharedRef<__CFError>,std::vector<abm::AccessoryInfo>)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
    return a1;
  }
  else
  {
    if (v2) {
      (*(void (**)(void *))(*v2 + 40))(v2);
    }
    return a1;
  }
}

uint64_t IOKitAccessoriesDelegate::IOKitAccessoriesDelegate(uint64_t a1, void *a2, NSObject **a3)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  *(void *)a1 = &unk_1F20F62B0;
  size_t v5 = (void *)a2[3];
  if (v5)
  {
    if (v5 == a2)
    {
      int v19 = v18;
      (*(void (**)(void *, void *))(*a2 + 24))(a2, v18);
    }
    else
    {
      int v19 = (void *)(*(uint64_t (**)(void *))(*v5 + 16))(v5);
    }
  }
  else
  {
    int v19 = 0;
  }
  xpc_object_t v6 = *a3;
  uint64_t v16 = v6;
  if (v6) {
    dispatch_retain(v6);
  }
  uint64_t v7 = (char *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
  AccessoriesDelegateBase::AccessoriesDelegateBase(a1, (uint64_t)v18, &v16, v7);
  if (v6) {
    dispatch_release(v6);
  }
  if (v19 == v18)
  {
    (*(void (**)(void *))(v18[0] + 32))(v18);
  }
  else if (v19)
  {
    (*(void (**)(void))(*v19 + 40))();
  }
  *(void *)a1 = &unk_1F20F62B0;
  GetABMLogServer(&v14);
  pthread_mutex_lock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
  if (!off_1EBBDCFD0)
  {
    ABMServer::create_default_global(&v17);
    long long v8 = v17;
    long long v17 = 0uLL;
    uint64_t v9 = (std::__shared_weak_count *)*(&off_1EBBDCFD0 + 1);
    off_1EBBDCFD0 = v8;
    if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
    uint64_t v10 = (std::__shared_weak_count *)*((void *)&v17 + 1);
    if (*((void *)&v17 + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  xpc_object_t v11 = (std::__shared_weak_count *)*(&off_1EBBDCFD0 + 1);
  if (*(&off_1EBBDCFD0 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDCFD0 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
  ctu::iokit::Controller::create();
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  uint64_t v12 = v15;
  if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 136) = 1065353216;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_DWORD *)(a1 + 176) = 1065353216;
  return a1;
}

void sub_1C5824F4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  pthread_mutex_unlock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  AccessoriesDelegateBase::~AccessoriesDelegateBase(v4);
  _Unwind_Resume(a1);
}

void sub_1C5824FA8(_Unwind_Exception *a1)
{
  AccessoriesDelegateBase::~AccessoriesDelegateBase(v1);
  _Unwind_Resume(a1);
}

void sub_1C5824FBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  int v19 = v18;
  if (v19) {
    dispatch_release(v19);
  }
  std::function<void ()(ctu::cf::CFSharedRef<__CFError>,std::vector<abm::AccessoryInfo>)>::~function(&a18);
  _Unwind_Resume(a1);
}

void IOKitAccessoriesDelegate::~IOKitAccessoriesDelegate(IOKitAccessoriesDelegate *this)
{
  *(void *)this = &unk_1F20F62B0;
  uint64_t v2 = (void *)*((void *)this + 20);
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = (void *)*((void *)this + 18);
  *((void *)this + 18) = 0;
  if (v4) {
    operator delete(v4);
  }
  size_t v5 = (void *)*((void *)this + 15);
  if (v5)
  {
    do
    {
      xpc_object_t v6 = (void *)*v5;
      operator delete(v5);
      size_t v5 = v6;
    }
    while (v6);
  }
  uint64_t v7 = (void *)*((void *)this + 13);
  *((void *)this + 13) = 0;
  if (v7) {
    operator delete(v7);
  }
  long long v8 = (std::__shared_weak_count *)*((void *)this + 12);
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    uint64_t v9 = this;
  }
  else
  {
    uint64_t v9 = this;
  }
  AccessoriesDelegateBase::~AccessoriesDelegateBase(v9);
}

{
  void *v1;
  uint64_t vars8;

  IOKitAccessoriesDelegate::~IOKitAccessoriesDelegate(this);

  operator delete(v1);
}

void IOKitAccessoriesDelegate::init(IOKitAccessoriesDelegate *this)
{
  v1[0] = MEMORY[0x1E4F143A8];
  v1[1] = 0x40000000;
  v1[2] = ___ZN24IOKitAccessoriesDelegate4initEv_block_invoke;
  v1[3] = &__block_descriptor_tmp_6;
  v1[4] = this;
  ctu::SharedSynchronizable<AccessoriesDelegateBase>::execute_wrapped((uint64_t *)this + 1, (uint64_t)v1);
}

double ___ZN24IOKitAccessoriesDelegate4initEv_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32) + 104;
  int v7 = 2;
  uint64_t v2 = std::__hash_table<std::__hash_value_type<ctu::iokit::TelephonyIOKitPowerSource,abm::AccessoryInfo>,std::__unordered_map_hasher<ctu::iokit::TelephonyIOKitPowerSource,std::__hash_value_type<ctu::iokit::TelephonyIOKitPowerSource,abm::AccessoryInfo>,std::hash<ctu::iokit::TelephonyIOKitPowerSource>,std::equal_to<ctu::iokit::TelephonyIOKitPowerSource>,true>,std::__unordered_map_equal<ctu::iokit::TelephonyIOKitPowerSource,std::__hash_value_type<ctu::iokit::TelephonyIOKitPowerSource,abm::AccessoryInfo>,std::equal_to<ctu::iokit::TelephonyIOKitPowerSource>,std::hash<ctu::iokit::TelephonyIOKitPowerSource>,true>,std::allocator<std::__hash_value_type<ctu::iokit::TelephonyIOKitPowerSource,abm::AccessoryInfo>>>::__emplace_unique_key_args<ctu::iokit::TelephonyIOKitPowerSource,std::piecewise_construct_t const&,std::tuple<ctu::iokit::TelephonyIOKitPowerSource&&>,std::tuple<>>(v1, 2u, &v7);
  *(void *)((char *)v2 + 20) = 0x2000000000004;
  *((_DWORD *)v2 + 7) = 0x10000;
  int v7 = 8;
  uint64_t v3 = std::__hash_table<std::__hash_value_type<ctu::iokit::TelephonyIOKitPowerSource,abm::AccessoryInfo>,std::__unordered_map_hasher<ctu::iokit::TelephonyIOKitPowerSource,std::__hash_value_type<ctu::iokit::TelephonyIOKitPowerSource,abm::AccessoryInfo>,std::hash<ctu::iokit::TelephonyIOKitPowerSource>,std::equal_to<ctu::iokit::TelephonyIOKitPowerSource>,true>,std::__unordered_map_equal<ctu::iokit::TelephonyIOKitPowerSource,std::__hash_value_type<ctu::iokit::TelephonyIOKitPowerSource,abm::AccessoryInfo>,std::equal_to<ctu::iokit::TelephonyIOKitPowerSource>,std::hash<ctu::iokit::TelephonyIOKitPowerSource>,true>,std::allocator<std::__hash_value_type<ctu::iokit::TelephonyIOKitPowerSource,abm::AccessoryInfo>>>::__emplace_unique_key_args<ctu::iokit::TelephonyIOKitPowerSource,std::piecewise_construct_t const&,std::tuple<ctu::iokit::TelephonyIOKitPowerSource&&>,std::tuple<>>(v1, 8u, &v7);
  *(void *)((char *)v3 + 20) = 0x3000000000000;
  *((_DWORD *)v3 + 7) = 0;
  int v7 = 4;
  uint64_t v4 = std::__hash_table<std::__hash_value_type<ctu::iokit::TelephonyIOKitPowerSource,abm::AccessoryInfo>,std::__unordered_map_hasher<ctu::iokit::TelephonyIOKitPowerSource,std::__hash_value_type<ctu::iokit::TelephonyIOKitPowerSource,abm::AccessoryInfo>,std::hash<ctu::iokit::TelephonyIOKitPowerSource>,std::equal_to<ctu::iokit::TelephonyIOKitPowerSource>,true>,std::__unordered_map_equal<ctu::iokit::TelephonyIOKitPowerSource,std::__hash_value_type<ctu::iokit::TelephonyIOKitPowerSource,abm::AccessoryInfo>,std::equal_to<ctu::iokit::TelephonyIOKitPowerSource>,std::hash<ctu::iokit::TelephonyIOKitPowerSource>,true>,std::allocator<std::__hash_value_type<ctu::iokit::TelephonyIOKitPowerSource,abm::AccessoryInfo>>>::__emplace_unique_key_args<ctu::iokit::TelephonyIOKitPowerSource,std::piecewise_construct_t const&,std::tuple<ctu::iokit::TelephonyIOKitPowerSource&&>,std::tuple<>>(v1, 4u, &v7);
  *(void *)((char *)v4 + 20) = 0x300000000000FLL;
  *((_DWORD *)v4 + 7) = 0;
  int v7 = 32;
  size_t v5 = std::__hash_table<std::__hash_value_type<ctu::iokit::TelephonyIOKitPowerSource,abm::AccessoryInfo>,std::__unordered_map_hasher<ctu::iokit::TelephonyIOKitPowerSource,std::__hash_value_type<ctu::iokit::TelephonyIOKitPowerSource,abm::AccessoryInfo>,std::hash<ctu::iokit::TelephonyIOKitPowerSource>,std::equal_to<ctu::iokit::TelephonyIOKitPowerSource>,true>,std::__unordered_map_equal<ctu::iokit::TelephonyIOKitPowerSource,std::__hash_value_type<ctu::iokit::TelephonyIOKitPowerSource,abm::AccessoryInfo>,std::equal_to<ctu::iokit::TelephonyIOKitPowerSource>,std::hash<ctu::iokit::TelephonyIOKitPowerSource>,true>,std::allocator<std::__hash_value_type<ctu::iokit::TelephonyIOKitPowerSource,abm::AccessoryInfo>>>::__emplace_unique_key_args<ctu::iokit::TelephonyIOKitPowerSource,std::piecewise_construct_t const&,std::tuple<ctu::iokit::TelephonyIOKitPowerSource&&>,std::tuple<>>(v1, 0x20u, &v7);
  *(void *)&double result = 0x3000000000010;
  *(void *)((char *)v5 + 20) = 0x3000000000010;
  *((_DWORD *)v5 + 7) = 0;
  return result;
}

void IOKitAccessoriesDelegate::start(IOKitAccessoriesDelegate *this)
{
  v1[0] = MEMORY[0x1E4F143A8];
  v1[1] = 0x40000000;
  v1[2] = ___ZN24IOKitAccessoriesDelegate5startEv_block_invoke;
  v1[3] = &__block_descriptor_tmp_12;
  v1[4] = this;
  ctu::SharedSynchronizable<AccessoriesDelegateBase>::execute_wrapped((uint64_t *)this + 1, (uint64_t)v1);
}

void ___ZN24IOKitAccessoriesDelegate5startEv_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  int v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = *(NSObject **)(v1 + 40);
  BOOL v4 = os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);
  if (v2)
  {
    if (v4)
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl(&dword_1C5767000, v3, OS_LOG_TYPE_DEFAULT, "#I Already started", buf, 2u);
    }
  }
  else
  {
    if (v4)
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl(&dword_1C5767000, v3, OS_LOG_TYPE_DEFAULT, "#I Starting", buf, 2u);
    }
    *(unsigned char *)(v1 + 80) = 1;
    size_t v5 = *(std::__shared_weak_count **)(v1 + 16);
    if (!v5 || (v6 = *(void *)(v1 + 8), (int v7 = std::__shared_weak_count::lock(v5)) == 0)) {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    long long v8 = v7;
    p_shared_weak_owners = &v7->__shared_weak_owners_;
    atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v8);
    }
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 1174405120;
    aBlock[2] = ___ZN24IOKitAccessoriesDelegate5startEv_block_invoke_2;
    aBlock[3] = &__block_descriptor_tmp_5_11;
    aBlock[4] = v1;
    void aBlock[5] = v6;
    uint64_t v20 = v8;
    atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
    uint64_t v10 = (capabilities::abs *)_Block_copy(aBlock);
    xpc_object_t v11 = *(NSObject **)(v1 + 24);
    if (v11) {
      dispatch_retain(*(dispatch_object_t *)(v1 + 24));
    }
    xpc_object_t v21 = v10;
    dispatch_object_t v22 = v11;
    ctu::iokit::Controller::setPowerSourceCallback();
    if (v22) {
      dispatch_release(v22);
    }
    uint64_t v12 = v21;
    if (v21) {
      _Block_release(v21);
    }
    if (capabilities::abs::supportsDisplayCoverAccessory(v12))
    {
      v15[0] = MEMORY[0x1E4F143A8];
      v15[1] = 1174405120;
      void v15[2] = ___ZN24IOKitAccessoriesDelegate5startEv_block_invoke_6;
      void v15[3] = &__block_descriptor_tmp_11_1;
      v15[4] = v1;
      v15[5] = v6;
      uint64_t v16 = v8;
      atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      xpc_object_t v13 = _Block_copy(v15);
      uint64_t v14 = *(NSObject **)(v1 + 24);
      if (v14) {
        dispatch_retain(*(dispatch_object_t *)(v1 + 24));
      }
      long long v17 = v13;
      dispatch_object_t object = v14;
      ctu::iokit::Controller::registerForDisplayCoverStateChanged();
      if (object) {
        dispatch_release(object);
      }
      if (v17) {
        _Block_release(v17);
      }
      if (v16) {
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    if (v20) {
      std::__shared_weak_count::__release_weak(v20);
    }
    std::__shared_weak_count::__release_weak(v8);
  }
}

void sub_1C5825550(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,std::__shared_weak_count *a24)
{
  dispatch::callback<void({block_pointer})(ctu::iokit::TelephonyIOKitDisplayCoverState)>::~callback((uint64_t)&a16);
  if (a15)
  {
    std::__shared_weak_count::__release_weak(a15);
    CFTypeRef v26 = a24;
    if (!a24)
    {
LABEL_3:
      std::__shared_weak_count::__release_weak(v24);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    CFTypeRef v26 = a24;
    if (!a24) {
      goto LABEL_3;
    }
  }
  std::__shared_weak_count::__release_weak(v26);
  std::__shared_weak_count::__release_weak(v24);
  _Unwind_Resume(a1);
}

void ___ZN24IOKitAccessoriesDelegate5startEv_block_invoke_2(void *a1, int a2)
{
  uint64_t v158 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (std::__shared_weak_count *)a1[6];
  if (!v3) {
    return;
  }
  uint64_t v4 = a1[4];
  size_t v5 = std::__shared_weak_count::lock(v3);
  v155 = v5;
  if (!v5) {
    return;
  }
  if (!a1[5])
  {
    xpc_object_t v48 = v5;
    goto LABEL_287;
  }
  CFTypeRef v153 = 0;
  uint64_t v6 = *(uint64_t **)(v4 + 120);
  if (v6)
  {
    char v7 = 0;
    __int16 v8 = 0;
    __int16 v125 = 0;
    __int16 v9 = 0;
    __int16 v10 = 0;
    __int16 v11 = 0;
    uint64_t v12 = (uint64_t *)(v4 + 144);
    unint64_t v122 = (void *)(v4 + 160);
    __int16 v124 = -1;
    while (1)
    {
      unint64_t v13 = *((unsigned int *)v6 + 4);
      if ((v13 & a2) != 0) {
        break;
      }
LABEL_7:
      uint64_t v6 = (uint64_t *)*v6;
      if (!v6) {
        goto LABEL_105;
      }
    }
    int8x8_t v14 = *(int8x8_t *)(v4 + 152);
    if (v14)
    {
      uint8x8_t v15 = (uint8x8_t)vcnt_s8(v14);
      v15.i16[0] = vaddlv_u8(v15);
      if (v15.u32[0] > 1uLL)
      {
        unint64_t v16 = *((unsigned int *)v6 + 4);
        if (*(void *)&v14 <= v13) {
          unint64_t v16 = v13 % *(void *)&v14;
        }
      }
      else
      {
        unint64_t v16 = (v14.i32[0] - 1) & v13;
      }
      long long v17 = *(uint64_t ***)(*v12 + 8 * v16);
      if (v17)
      {
        uint64_t v18 = *v17;
        if (v18)
        {
          if (v15.u32[0] < 2uLL)
          {
            uint64_t v19 = *(void *)&v14 - 1;
            while (1)
            {
              uint64_t v21 = v18[1];
              if (v21 == v13)
              {
                if (*((_DWORD *)v18 + 4) == v13) {
                  goto LABEL_6;
                }
              }
              else if ((v21 & v19) != v16)
              {
                goto LABEL_30;
              }
              uint64_t v18 = (uint64_t *)*v18;
              if (!v18) {
                goto LABEL_30;
              }
            }
          }
          do
          {
            unint64_t v20 = v18[1];
            if (v20 == v13)
            {
              if (*((_DWORD *)v18 + 4) == v13) {
                goto LABEL_6;
              }
            }
            else
            {
              if (v20 >= *(void *)&v14) {
                v20 %= *(void *)&v14;
              }
              if (v20 != v16) {
                break;
              }
            }
            uint64_t v18 = (uint64_t *)*v18;
          }
          while (v18);
        }
      }
    }
LABEL_30:
    dispatch_object_t v22 = *(NSObject **)(v4 + 40);
    BOOL v23 = os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT);
    if (v23)
    {
      ctu::iokit::asString();
      uint64_t v24 = __p;
      if (SBYTE7(v133) < 0) {
        uint64_t v24 = (void **)__p[0];
      }
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v24;
      _os_log_impl(&dword_1C5767000, v22, OS_LOG_TYPE_DEFAULT, "#I Power Source attached: %s", (uint8_t *)&buf, 0xCu);
      if (SBYTE7(v133) < 0) {
        operator delete(__p[0]);
      }
    }
    __int16 v124 = *((_WORD *)v6 + 10);
    __int16 v125 = *((_WORD *)v6 + 12);
    __int16 v9 = *((_WORD *)v6 + 13);
    __int16 v10 = *((_WORD *)v6 + 14);
    capabilities::abs::supportedSARFeatures((capabilities::abs *)v23);
    if (capabilities::abs::operator&()) {
      __int16 v25 = 2;
    }
    else {
      __int16 v25 = 1;
    }
    unint64_t v26 = *((unsigned int *)v6 + 4);
    unint64_t v27 = *(void *)(v4 + 152);
    if (v27)
    {
      uint8x8_t v28 = (uint8x8_t)vcnt_s8((int8x8_t)v27);
      v28.i16[0] = vaddlv_u8(v28);
      if (v28.u32[0] > 1uLL)
      {
        unint64_t v29 = *((unsigned int *)v6 + 4);
        if (v27 <= v26) {
          unint64_t v29 = v26 % v27;
        }
      }
      else
      {
        unint64_t v29 = (v27 - 1) & v26;
      }
      xpc_object_t v30 = *(void ***)(*v12 + 8 * v29);
      if (v30)
      {
        xpc_object_t v31 = *v30;
        if (*v30)
        {
          if (v28.u32[0] < 2uLL)
          {
            while (1)
            {
              uint64_t v33 = v31[1];
              if (v33 == v26)
              {
                if (*((_DWORD *)v31 + 4) == v26) {
                  goto LABEL_97;
                }
              }
              else if ((v33 & (v27 - 1)) != v29)
              {
                goto LABEL_59;
              }
              xpc_object_t v31 = (void *)*v31;
              if (!v31) {
                goto LABEL_59;
              }
            }
          }
          do
          {
            unint64_t v32 = v31[1];
            if (v32 == v26)
            {
              if (*((_DWORD *)v31 + 4) == v26) {
                goto LABEL_97;
              }
            }
            else
            {
              if (v32 >= v27) {
                v32 %= v27;
              }
              if (v32 != v29) {
                break;
              }
            }
            xpc_object_t v31 = (void *)*v31;
          }
          while (v31);
        }
      }
    }
    else
    {
      unint64_t v29 = 0xAAAAAAAAAAAAAAAALL;
    }
LABEL_59:
    xpc_object_t v31 = operator new(0x20uLL);
    *xpc_object_t v31 = 0;
    v31[1] = v26;
    *((_DWORD *)v31 + 4) = *((_DWORD *)v6 + 4);
    *((_WORD *)v31 + 10) = -1;
    *(void *)((char *)v31 + 22) = 0;
    *((_WORD *)v31 + 15) = 0;
    float v34 = (float)(unint64_t)(*(void *)(v4 + 168) + 1);
    float v35 = *(float *)(v4 + 176);
    if (v27 && (float)(v35 * (float)v27) >= v34)
    {
      unint64_t v26 = v29;
    }
    else
    {
      BOOL v36 = (v27 & (v27 - 1)) != 0;
      if (v27 < 3) {
        BOOL v36 = 1;
      }
      unint64_t v37 = v36 | (2 * v27);
      unint64_t v38 = vcvtps_u32_f32(v34 / v35);
      if (v37 <= v38) {
        size_t prime = v38;
      }
      else {
        size_t prime = v37;
      }
      if (prime == 1)
      {
        size_t prime = 2;
      }
      else if ((prime & (prime - 1)) != 0)
      {
        size_t prime = std::__next_prime(prime);
        unint64_t v27 = *(void *)(v4 + 152);
      }
      if (prime > v27) {
        goto LABEL_72;
      }
      if (prime < v27)
      {
        unint64_t v40 = vcvtps_u32_f32((float)*(unint64_t *)(v4 + 168) / *(float *)(v4 + 176));
        if (v27 < 3 || (uint8x8_t v41 = (uint8x8_t)vcnt_s8((int8x8_t)v27), v41.i16[0] = vaddlv_u8(v41), v41.u32[0] > 1uLL))
        {
          unint64_t v40 = std::__next_prime(v40);
        }
        else
        {
          uint64_t v42 = 1 << -(char)__clz(v40 - 1);
          if (v40 >= 2) {
            unint64_t v40 = v42;
          }
        }
        if (prime <= v40) {
          size_t prime = v40;
        }
        if (prime < v27) {
LABEL_72:
        }
          std::__hash_table<std::__hash_value_type<ctu::iokit::TelephonyIOKitPowerSource,abm::AccessoryInfo>,std::__unordered_map_hasher<ctu::iokit::TelephonyIOKitPowerSource,std::__hash_value_type<ctu::iokit::TelephonyIOKitPowerSource,abm::AccessoryInfo>,std::hash<ctu::iokit::TelephonyIOKitPowerSource>,std::equal_to<ctu::iokit::TelephonyIOKitPowerSource>,true>,std::__unordered_map_equal<ctu::iokit::TelephonyIOKitPowerSource,std::__hash_value_type<ctu::iokit::TelephonyIOKitPowerSource,abm::AccessoryInfo>,std::equal_to<ctu::iokit::TelephonyIOKitPowerSource>,std::hash<ctu::iokit::TelephonyIOKitPowerSource>,true>,std::allocator<std::__hash_value_type<ctu::iokit::TelephonyIOKitPowerSource,abm::AccessoryInfo>>>::__do_rehash<true>(v4 + 144, prime);
      }
      unint64_t v27 = *(void *)(v4 + 152);
      if ((v27 & (v27 - 1)) != 0)
      {
        if (v27 <= v26) {
          v26 %= v27;
        }
      }
      else
      {
        unint64_t v26 = (v27 - 1) & v26;
      }
    }
    uint64_t v43 = *v12;
    CFAllocatorRef v44 = *(void **)(*v12 + 8 * v26);
    if (v44)
    {
      *xpc_object_t v31 = *v44;
    }
    else
    {
      *xpc_object_t v31 = *v122;
      void *v122 = v31;
      *(void *)(v43 + 8 * v26) = v122;
      if (!*v31)
      {
LABEL_96:
        ++*(void *)(v4 + 168);
LABEL_97:
        *((_WORD *)v31 + 10) = v124;
        __int16 v8 = 2;
        *((_WORD *)v31 + 11) = 2;
        *((_WORD *)v31 + 12) = v125;
        *((_WORD *)v31 + 13) = v9;
        *((_WORD *)v31 + 14) = v10;
        __int16 v11 = v25;
        *((_WORD *)v31 + 15) = v25;
        uint64_t v46 = *(void *)(v4 + 72);
        if (v46)
        {
          v151 = 0;
          CFTypeRef v152 = 0;
          v149 = 0;
          v150 = 0;
          int v47 = operator new(0xCuLL);
          v150 = v47 + 6;
          v151 = v47 + 6;
          *int v47 = v124;
          v47[1] = 2;
          xpc_object_t v47[2] = v125;
          v47[3] = v9;
          v47[4] = v10;
          v47[5] = v25;
          v149 = v47;
          (*(void (**)(uint64_t, CFTypeRef *, void **))(*(void *)v46 + 48))(v46, &v152, &v149);
          if (v149)
          {
            v150 = v149;
            operator delete(v149);
          }
          if (v152) {
            CFRelease(v152);
          }
          char v7 = 1;
          __int16 v8 = 2;
        }
        else
        {
LABEL_6:
          char v7 = 1;
        }
        goto LABEL_7;
      }
      unint64_t v45 = *(void *)(*v31 + 8);
      if ((v27 & (v27 - 1)) != 0)
      {
        if (v45 >= v27) {
          v45 %= v27;
        }
      }
      else
      {
        v45 &= v27 - 1;
      }
      CFAllocatorRef v44 = (void *)(*v12 + 8 * v45);
    }
    *CFAllocatorRef v44 = v31;
    goto LABEL_96;
  }
  __int16 v11 = 0;
  __int16 v10 = 0;
  __int16 v9 = 0;
  __int16 v8 = 0;
  char v7 = 0;
  __int16 v124 = -1;
  __int16 v125 = 0;
LABEL_105:
  __int16 v121 = v8;
  uint64_t v49 = *(uint64_t **)(v4 + 160);
  unint64_t v123 = (void *)(v4 + 160);
  if (!v49)
  {
    CFIndex v50 = 0;
    if ((a2 & 1) == 0) {
      goto LABEL_208;
    }
    goto LABEL_213;
  }
  __int16 v118 = v11;
  __int16 v119 = v9;
  __int16 v120 = v10;
  CFIndex v50 = 0;
  uint64_t v51 = 0;
  unint64_t v52 = 0;
  CFTypeID v53 = 0;
  do
  {
    if ((v49[2] & a2) == 0)
    {
      std::string::size_type v54 = *(NSObject **)(v4 + 40);
      BOOL v55 = os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT);
      if (v55)
      {
        ctu::iokit::asString();
        int v56 = __p;
        if (SBYTE7(v133) < 0) {
          int v56 = (void **)__p[0];
        }
        LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v56;
        _os_log_impl(&dword_1C5767000, v54, OS_LOG_TYPE_DEFAULT, "#I Power Source detached: %s", (uint8_t *)&buf, 0xCu);
        if (SBYTE7(v133) < 0) {
          operator delete(__p[0]);
        }
      }
      *((_WORD *)v49 + 11) = 1;
      capabilities::abs::supportedSARFeatures((capabilities::abs *)v55);
      if (capabilities::abs::operator&()) {
        __int16 v57 = 2;
      }
      else {
        __int16 v57 = 1;
      }
      *((_WORD *)v49 + 15) = v57;
      if (v53 < v52)
      {
        *(_DWORD *)CFTypeID v53 = *((_DWORD *)v49 + 4);
        uint64_t v58 = (uint64_t)(v53 + 4);
        if (!*(void *)(v4 + 72))
        {
LABEL_107:
          char v7 = 1;
          CFTypeID v53 = (char *)v58;
          goto LABEL_108;
        }
LABEL_138:
        CFTypeRef v148 = v153;
        if (v153) {
          CFRetain(v153);
        }
        __p[0] = *(void **)((char *)v49 + 20);
        LODWORD(__p[1]) = *((_DWORD *)v49 + 7);
        v145 = 0;
        v146 = 0;
        v147 = 0;
        BOOL v67 = (void **)operator new(0xCuLL);
        v146 = (void **)((char *)v67 + 12);
        v147 = (char *)v67 + 12;
        *((_DWORD *)v67 + 2) = __p[1];
        NSObject *v67 = __p[0];
        v145 = v67;
        uint64_t v68 = *(void *)(v4 + 72);
        if (!v68) {
          std::__throw_bad_function_call[abi:ne180100]();
        }
        (*(void (**)(uint64_t, CFTypeRef *, void ***))(*(void *)v68 + 48))(v68, &v148, &v145);
        if (v145)
        {
          v146 = v145;
          operator delete(v145);
        }
        if (v148) {
          CFRelease(v148);
        }
        goto LABEL_107;
      }
      uint64_t v59 = (v53 - v51) >> 2;
      unint64_t v60 = v59 + 1;
      if ((unint64_t)(v59 + 1) >> 62) {
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      }
      if ((v52 - v51) >> 1 > v60) {
        unint64_t v60 = (v52 - v51) >> 1;
      }
      if ((unint64_t)(v52 - v51) >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v61 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v61 = v60;
      }
      if (v61)
      {
        if (v61 >> 62) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        int v62 = operator new(4 * v61);
        CFIndex v50 = &v62[4 * v59];
        *(_DWORD *)CFIndex v50 = *((_DWORD *)v49 + 4);
        uint64_t v58 = (uint64_t)(v50 + 4);
        int64_t v63 = v53 - v51;
        if (v53 == v51)
        {
LABEL_135:
          unint64_t v52 = &v62[4 * v61];
          if (v51) {
            operator delete(v51);
          }
          uint64_t v51 = v50;
          if (!*(void *)(v4 + 72)) {
            goto LABEL_107;
          }
          goto LABEL_138;
        }
      }
      else
      {
        int v62 = 0;
        CFIndex v50 = (char *)(4 * v59);
        *(_DWORD *)(4 * v59) = *((_DWORD *)v49 + 4);
        uint64_t v58 = 4 * v59 + 4;
        int64_t v63 = v53 - v51;
        if (v53 == v51) {
          goto LABEL_135;
        }
      }
      unint64_t v64 = v63 - 4;
      if (v64 >= 0xBC)
      {
        unint64_t v69 = (v53 - 4 - v51) & 0xFFFFFFFFFFFFFFFCLL;
        if (&v62[v53 - v51 - 4 - v69] > &v62[v53 - v51 - 4])
        {
          BOOL v65 = v53;
        }
        else if (&v53[-v69 - 4] > v53 - 4)
        {
          BOOL v65 = v53;
        }
        else if ((unint64_t)(v51 - v62) >= 0x20)
        {
          uint64_t v70 = (v64 >> 2) + 1;
          uint64_t v71 = 4 * (v70 & 0x7FFFFFFFFFFFFFF8);
          BOOL v65 = &v53[-v71];
          v50 -= v71;
          xpc_object_t v72 = &v62[4 * v59 - 16];
          xpc_object_t v73 = v53 - 16;
          uint64_t v74 = v70 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            long long v75 = *(_OWORD *)v73;
            *(v72 - 1) = *((_OWORD *)v73 - 1);
            _OWORD *v72 = v75;
            v72 -= 2;
            v73 -= 32;
            v74 -= 8;
          }
          while (v74);
          if (v70 == (v70 & 0x7FFFFFFFFFFFFFF8)) {
            goto LABEL_135;
          }
        }
        else
        {
          BOOL v65 = v53;
        }
      }
      else
      {
        BOOL v65 = v53;
      }
      do
      {
        int v66 = *((_DWORD *)v65 - 1);
        v65 -= 4;
        *((_DWORD *)v50 - 1) = v66;
        v50 -= 4;
      }
      while (v65 != v51);
      goto LABEL_135;
    }
LABEL_108:
    uint64_t v49 = (uint64_t *)*v49;
  }
  while (v49);
  if (v50 == v53)
  {
    __int16 v9 = v119;
    __int16 v10 = v120;
    __int16 v11 = v118;
    if ((a2 & 1) == 0) {
      goto LABEL_208;
    }
    goto LABEL_213;
  }
  int8x8_t v76 = *(int8x8_t *)(v4 + 152);
  __int16 v9 = v119;
  __int16 v10 = v120;
  __int16 v11 = v118;
  if (v76)
  {
    std::string v77 = v50;
LABEL_159:
    unint64_t v78 = *(unsigned int *)v77;
    uint8x8_t v79 = (uint8x8_t)vcnt_s8(v76);
    v79.i16[0] = vaddlv_u8(v79);
    if (v79.u32[0] > 1uLL)
    {
      unint64_t v80 = *(unsigned int *)v77;
      if (*(void *)&v76 <= v78) {
        unint64_t v80 = v78 % *(void *)&v76;
      }
    }
    else
    {
      unint64_t v80 = (v76.i32[0] - 1) & v78;
    }
    uint64_t v81 = *(void *)(v4 + 144);
    xpc_object_t v82 = *(_DWORD ***)(v81 + 8 * v80);
    if (v82)
    {
      long long v83 = *v82;
      if (*v82)
      {
        uint64_t v84 = *(void *)&v76 - 1;
        if (v79.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v85 = *((void *)v83 + 1);
            if (v85 == v78)
            {
              if (v83[4] == v78) {
                goto LABEL_179;
              }
            }
            else if ((v85 & v84) != v80)
            {
              goto LABEL_206;
            }
            long long v83 = *(_DWORD **)v83;
            if (!v83) {
              goto LABEL_206;
            }
          }
        }
        do
        {
          unint64_t v86 = *((void *)v83 + 1);
          if (v86 == v78)
          {
            if (v83[4] == v78)
            {
LABEL_179:
              if (v79.u32[0] > 1uLL)
              {
                if (*(void *)&v76 <= v78) {
                  v78 %= *(void *)&v76;
                }
              }
              else
              {
                v78 &= v84;
              }
              xpc_object_t v87 = *(void **)(v81 + 8 * v78);
              do
              {
                uint64_t v88 = v87;
                xpc_object_t v87 = (void *)*v87;
              }
              while (v87 != (void *)v83);
              if (v88 == v123) {
                goto LABEL_196;
              }
              unint64_t v89 = v88[1];
              if (v79.u32[0] > 1uLL)
              {
                if (v89 >= *(void *)&v76) {
                  v89 %= *(void *)&v76;
                }
              }
              else
              {
                v89 &= v84;
              }
              if (v89 != v78)
              {
LABEL_196:
                if (!*(void *)v83) {
                  goto LABEL_197;
                }
                unint64_t v90 = *(void *)(*(void *)v83 + 8);
                if (v79.u32[0] > 1uLL)
                {
                  if (v90 >= *(void *)&v76) {
                    v90 %= *(void *)&v76;
                  }
                }
                else
                {
                  v90 &= v84;
                }
                if (v90 != v78) {
LABEL_197:
                }
                  *(void *)(v81 + 8 * v78) = 0;
              }
              uint64_t v91 = *(void *)v83;
              if (*(void *)v83)
              {
                unint64_t v92 = *(void *)(v91 + 8);
                if (v79.u32[0] > 1uLL)
                {
                  if (v92 >= *(void *)&v76) {
                    v92 %= *(void *)&v76;
                  }
                }
                else
                {
                  v92 &= v84;
                }
                if (v92 != v78)
                {
                  *(void *)(*(void *)(v4 + 144) + 8 * v92) = v88;
                  uint64_t v91 = *(void *)v83;
                }
              }
              *uint64_t v88 = v91;
              *(void *)long long v83 = 0;
              --*(void *)(v4 + 168);
              operator delete(v83);
              break;
            }
          }
          else
          {
            if (v86 >= *(void *)&v76) {
              v86 %= *(void *)&v76;
            }
            if (v86 != v80) {
              break;
            }
          }
          long long v83 = *(_DWORD **)v83;
        }
        while (v83);
      }
    }
LABEL_206:
    while (1)
    {
      v77 += 4;
      if (v77 == v53) {
        break;
      }
      int8x8_t v76 = *(int8x8_t *)(v4 + 152);
      if (v76) {
        goto LABEL_159;
      }
    }
  }
  if (a2)
  {
LABEL_213:
    if (*(void *)(v4 + 168))
    {
      std::string v96 = *(NSObject **)(v4 + 40);
      uint64_t v97 = os_log_type_enabled(v96, OS_LOG_TYPE_DEFAULT);
      if (v97)
      {
        ctu::iokit::asString();
        v98 = (SBYTE7(v133) & 0x80u) == 0 ? __p : (void **)__p[0];
        LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v98;
        _os_log_impl(&dword_1C5767000, v96, OS_LOG_TYPE_DEFAULT, "#I Power Source: %s", (uint8_t *)&buf, 0xCu);
        if (SBYTE7(v133) < 0) {
          operator delete(__p[0]);
        }
      }
      long long v99 = (void *)*v123;
      if (*v123)
      {
        do
        {
          while ((v99[2] & a2) != 0)
          {
            long long v99 = (void *)*v99;
            if (!v99) {
              goto LABEL_209;
            }
          }
          *((_WORD *)v99 + 11) = 1;
          capabilities::abs::supportedSARFeatures((capabilities::abs *)v97);
          uint64_t v97 = capabilities::abs::operator&();
          if (v97) {
            __int16 v100 = 2;
          }
          else {
            __int16 v100 = 1;
          }
          *((_WORD *)v99 + 15) = v100;
          if (*(void *)(v4 + 72))
          {
            CFTypeRef v144 = v153;
            if (v153) {
              CFRetain(v153);
            }
            __p[0] = *(void **)((char *)v99 + 20);
            LODWORD(__p[1]) = *((_DWORD *)v99 + 7);
            v141 = 0;
            v142 = 0;
            v143 = 0;
            uint64_t v101 = (void **)operator new(0xCuLL);
            v142 = (char *)v101 + 12;
            v143 = (char *)v101 + 12;
            *((_DWORD *)v101 + 2) = __p[1];
            *uint64_t v101 = __p[0];
            v141 = v101;
            uint64_t v102 = *(void *)(v4 + 72);
            if (!v102) {
              std::__throw_bad_function_call[abi:ne180100]();
            }
            (*(void (**)(uint64_t, CFTypeRef *, void **))(*(void *)v102 + 48))(v102, &v144, &v141);
            if (v141)
            {
              v142 = v141;
              operator delete(v141);
            }
            uint64_t v97 = (uint64_t)v144;
            if (v144) {
              CFRelease(v144);
            }
          }
          long long v99 = (void *)*v99;
        }
        while (v99);
      }
      if (*(void *)(v4 + 168))
      {
        uint64_t v103 = (void *)*v123;
        if (*v123)
        {
          do
          {
            uint64_t v104 = (void *)*v103;
            operator delete(v103);
            uint64_t v103 = v104;
          }
          while (v104);
        }
        *(void *)(v4 + 160) = 0;
        uint64_t v105 = *(void *)(v4 + 152);
        if (v105)
        {
          for (uint64_t i = 0; i != v105; ++i)
            *(void *)(*(void *)(v4 + 144) + 8 * i) = 0;
        }
        *(void *)(v4 + 168) = 0;
      }
    }
    goto LABEL_282;
  }
LABEL_208:
  if (v7) {
    goto LABEL_282;
  }
LABEL_209:
  unint64_t v140 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v93 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v93 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v139[7] = v93;
  v139[8] = v93;
  v139[5] = v93;
  v139[6] = v93;
  v139[3] = v93;
  v139[4] = v93;
  v139[1] = v93;
  v139[2] = v93;
  long long v138 = v93;
  v139[0] = v93;
  *(_OWORD *)v136 = v93;
  long long v137 = v93;
  long long v134 = v93;
  long long v135 = v93;
  *(_OWORD *)long long __p = v93;
  long long v133 = v93;
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Unexpected Power Source event: ", 31);
  std::ostream::operator<<();
  memset(&buf, 170, sizeof(buf));
  if ((BYTE8(v138) & 0x10) != 0)
  {
    uint64_t v107 = v138;
    if ((unint64_t)v138 < *((void *)&v135 + 1))
    {
      *(void *)&long long v138 = *((void *)&v135 + 1);
      uint64_t v107 = *((void *)&v135 + 1);
    }
    std::vector<std::string>::pointer v108 = (const void *)v135;
    std::string::size_type v94 = v107 - v135;
    if ((unint64_t)(v107 - v135) >= 0x7FFFFFFFFFFFFFF8) {
      goto LABEL_259;
    }
  }
  else
  {
    if ((BYTE8(v138) & 8) == 0)
    {
      std::string::size_type v94 = 0;
      *((unsigned char *)&buf.__r_.__value_.__s + 23) = 0;
      p_std::string buf = &buf;
      goto LABEL_255;
    }
    std::vector<std::string>::pointer v108 = (const void *)*((void *)&v133 + 1);
    std::string::size_type v94 = *((void *)&v134 + 1) - *((void *)&v133 + 1);
    if (*((void *)&v134 + 1) - *((void *)&v133 + 1) >= 0x7FFFFFFFFFFFFFF8uLL) {
LABEL_259:
    }
      std::string::__throw_length_error[abi:ne180100]();
  }
  if (v94 >= 0x17)
  {
    uint64_t v109 = (v94 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v94 | 7) != 0x17) {
      uint64_t v109 = v94 | 7;
    }
    uint64_t v110 = v109 + 1;
    p_std::string buf = (std::string *)operator new(v109 + 1);
    buf.__r_.__value_.__l.__size_ = v94;
    buf.__r_.__value_.__r.__words[2] = v110 | 0x8000000000000000;
    buf.__r_.__value_.__r.__words[0] = (std::string::size_type)p_buf;
    goto LABEL_254;
  }
  *((unsigned char *)&buf.__r_.__value_.__s + 23) = v94;
  p_std::string buf = &buf;
  if (v94) {
LABEL_254:
  }
    memmove(p_buf, v108, v94);
LABEL_255:
  p_buf->__r_.__value_.__s.__data_[v94] = 0;
  uint64_t v111 = *(NSObject **)(v4 + 40);
  if (os_log_type_enabled(v111, OS_LOG_TYPE_ERROR))
  {
    int v113 = &buf;
    if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      int v113 = (std::string *)buf.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)v156 = 136315138;
    *(void *)&v156[4] = v113;
    _os_log_error_impl(&dword_1C5767000, v111, OS_LOG_TYPE_ERROR, "%s", v156, 0xCu);
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
      goto LABEL_263;
    }
LABEL_257:
    std::string v131 = buf;
    __int16 v112 = v121;
  }
  else
  {
    if ((SHIBYTE(buf.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_257;
    }
LABEL_263:
    std::string::__init_copy_ctor_external(&v131, buf.__r_.__value_.__l.__data_, buf.__r_.__value_.__l.__size_);
    __int16 v112 = v121;
  }
  (*(void (**)(unsigned char *__return_ptr, uint64_t, std::string *, uint64_t))(*(void *)v4 + 48))(v156, v4, &v131, 5);
  CFTypeRef v114 = v153;
  long long v115 = *(const void **)v156;
  CFTypeRef v153 = *(CFTypeRef *)v156;
  *(void *)v156 = 0;
  if (v114)
  {
    CFRelease(v114);
    if (*(void *)v156) {
      CFRelease(*(CFTypeRef *)v156);
    }
  }
  if (SHIBYTE(v131.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v131.__r_.__value_.__l.__data_);
  }
  if (*(void *)(v4 + 72))
  {
    CFTypeRef cf = v115;
    if (v115) {
      CFRetain(v115);
    }
    uint64_t v116 = operator new(0xCuLL);
    v128 = v116 + 6;
    v129 = v116 + 6;
    *uint64_t v116 = v124;
    v116[1] = v112;
    v116[2] = v125;
    v116[3] = v9;
    v116[4] = v10;
    v116[5] = v11;
    BOOL v127 = v116;
    uint64_t v117 = *(void *)(v4 + 72);
    if (!v117) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    (*(void (**)(uint64_t, CFTypeRef *, void **))(*(void *)v117 + 48))(v117, &cf, &v127);
    if (v127)
    {
      v128 = v127;
      operator delete(v127);
    }
    if (cf) {
      CFRelease(cf);
    }
  }
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf.__r_.__value_.__l.__data_);
  }
  __p[0] = *(void **)MEMORY[0x1E4FBA418];
  *(void **)((char *)__p + *((void *)__p[0] - 3)) = *(void **)(MEMORY[0x1E4FBA418] + 24);
  __p[1] = (void *)(MEMORY[0x1E4FBA470] + 16);
  if (SHIBYTE(v137) < 0) {
    operator delete(v136[1]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1C8791FB0](v139);
LABEL_282:
  if (v50) {
    operator delete(v50);
  }
  if (v153) {
    CFRelease(v153);
  }
  xpc_object_t v48 = v155;
  if (v155)
  {
LABEL_287:
    if (!atomic_fetch_add(&v48->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
  }
}

void sub_1C5826734(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,void *a61,uint64_t a62)
{
  if (*(char *)(v63 - 105) < 0) {
    operator delete(*(void **)(v63 - 128));
  }
  std::ostringstream::~ostringstream((uint64_t)&a28);
  if (v62) {
    operator delete(v62);
  }
  ctu::cf::CFSharedRef<__CFError>::~CFSharedRef((const void **)(v63 - 168));
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v63 - 160);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_40c48_ZTSNSt3__18weak_ptrI23AccessoriesDelegateBaseEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c48_ZTSNSt3__18weak_ptrI23AccessoriesDelegateBaseEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void ___ZN24IOKitAccessoriesDelegate5startEv_block_invoke_6(void *a1, unsigned int a2)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (std::__shared_weak_count *)a1[6];
  if (!v3) {
    return;
  }
  size_t v5 = (void *)a1[4];
  uint64_t v6 = std::__shared_weak_count::lock(v3);
  float v34 = v6;
  if (!v6) {
    return;
  }
  if (!a1[5])
  {
    __int16 v10 = v6;
LABEL_52:
    if (!atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
    return;
  }
  CFTypeRef cf = 0;
  if (a2 < 4)
  {
    unint64_t v7 = 0x4000300010002uLL >> (16 * a2);
    __int16 v8 = v5[5];
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string buf = 136315138;
      *(void *)&uint8_t buf[4] = ctu::iokit::asString();
      _os_log_impl(&dword_1C5767000, v8, OS_LOG_TYPE_DEFAULT, "#I Display Cover event: %s", buf, 0xCu);
    }
    __int16 v9 = 0;
    if (!v5[9]) {
      goto LABEL_49;
    }
LABEL_42:
    CFTypeRef v29 = v9;
    if (v9) {
      CFRetain(v9);
    }
    uint64_t v24 = (char *)operator new(0xCuLL);
    unint64_t v27 = v24 + 12;
    uint8x8_t v28 = v24 + 12;
    *(_WORD *)uint64_t v24 = 13;
    *((_WORD *)v24 + 1) = v7;
    *(void *)(v24 + 4) = 0;
    unint64_t v26 = v24;
    uint64_t v25 = v5[9];
    if (!v25) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    (*(void (**)(uint64_t, CFTypeRef *, void **))(*(void *)v25 + 48))(v25, &v29, &v26);
    if (v26)
    {
      unint64_t v27 = v26;
      operator delete(v26);
    }
    if (v29) {
      CFRelease(v29);
    }
    goto LABEL_49;
  }
  unint64_t v44 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v11 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v11 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v43[7] = v11;
  v43[8] = v11;
  void v43[5] = v11;
  v43[6] = v11;
  v43[3] = v11;
  v43[4] = v11;
  v43[1] = v11;
  v43[2] = v11;
  long long v42 = v11;
  v43[0] = v11;
  *(_OWORD *)long long __p = v11;
  long long v41 = v11;
  long long v38 = v11;
  long long v39 = v11;
  *(_OWORD *)std::string buf = v11;
  long long v37 = v11;
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)buf);
  uint64_t v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(buf, (uint64_t)"Unexpected Display Cover event: ", 32);
  unint64_t v13 = (const char *)ctu::iokit::asString();
  size_t v14 = strlen(v13);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)v13, v14);
  memset(&__dst, 170, sizeof(__dst));
  if ((BYTE8(v42) & 0x10) != 0)
  {
    uint64_t v17 = v42;
    if ((unint64_t)v42 < *((void *)&v39 + 1))
    {
      *(void *)&long long v42 = *((void *)&v39 + 1);
      uint64_t v17 = *((void *)&v39 + 1);
    }
    uint64_t v18 = (const void *)v39;
    std::string::size_type v15 = v17 - v39;
    if ((unint64_t)(v17 - v39) >= 0x7FFFFFFFFFFFFFF8) {
      goto LABEL_27;
    }
  }
  else
  {
    if ((BYTE8(v42) & 8) == 0)
    {
      std::string::size_type v15 = 0;
      *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 0;
      p_dst = &__dst;
      goto LABEL_23;
    }
    uint64_t v18 = (const void *)*((void *)&v37 + 1);
    std::string::size_type v15 = *((void *)&v38 + 1) - *((void *)&v37 + 1);
    if (*((void *)&v38 + 1) - *((void *)&v37 + 1) >= 0x7FFFFFFFFFFFFFF8uLL) {
LABEL_27:
    }
      std::string::__throw_length_error[abi:ne180100]();
  }
  if (v15 >= 0x17)
  {
    uint64_t v19 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v15 | 7) != 0x17) {
      uint64_t v19 = v15 | 7;
    }
    uint64_t v20 = v19 + 1;
    p_dst = (std::string *)operator new(v19 + 1);
    __dst.__r_.__value_.__l.__size_ = v15;
    __dst.__r_.__value_.__r.__words[2] = v20 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_22;
  }
  *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v15;
  p_dst = &__dst;
  if (v15) {
LABEL_22:
  }
    memmove(p_dst, v18, v15);
LABEL_23:
  p_dst->__r_.__value_.__s.__data_[v15] = 0;
  uint64_t v21 = v5[5];
  if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
  {
    dispatch_object_t v22 = &__dst;
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      dispatch_object_t v22 = (std::string *)__dst.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)float v35 = 136315138;
    *(void *)&v35[4] = v22;
    _os_log_error_impl(&dword_1C5767000, v21, OS_LOG_TYPE_ERROR, "%s", v35, 0xCu);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_25;
    }
LABEL_31:
    std::string::__init_copy_ctor_external(&v30, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
    goto LABEL_32;
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_31;
  }
LABEL_25:
  std::string v30 = __dst;
LABEL_32:
  (*(void (**)(unsigned char *__return_ptr, void *, std::string *, uint64_t))(*v5 + 48))(v35, v5, &v30, 5);
  CFTypeRef v23 = cf;
  __int16 v9 = *(const void **)v35;
  CFTypeRef cf = *(CFTypeRef *)v35;
  *(void *)float v35 = 0;
  if (v23)
  {
    CFRelease(v23);
    if (*(void *)v35) {
      CFRelease(*(CFTypeRef *)v35);
    }
  }
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v30.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  *(void *)std::string buf = *MEMORY[0x1E4FBA418];
  *(void *)&buf[*(void *)(*(void *)buf - 24)] = *(void *)(MEMORY[0x1E4FBA418] + 24);
  *(void *)&uint8_t buf[8] = MEMORY[0x1E4FBA470] + 16;
  if (SHIBYTE(v41) < 0) {
    operator delete(__p[1]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1C8791FB0](v43);
  LOWORD(v7) = 0;
  if (v5[9]) {
    goto LABEL_42;
  }
LABEL_49:
  if (v9) {
    CFRelease(v9);
  }
  __int16 v10 = v34;
  if (v34) {
    goto LABEL_52;
  }
}

void sub_1C5826E0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, char a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,const void *a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a33);
  ctu::cf::CFSharedRef<__CFError>::~CFSharedRef(&a26);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a27);
  _Unwind_Resume(a1);
}

uint64_t dispatch::callback<void({block_pointer})(ctu::iokit::TelephonyIOKitDisplayCoverState)>::~callback(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 8);
  if (v2) {
    dispatch_release(v2);
  }
  if (*(void *)a1) {
    _Block_release(*(const void **)a1);
  }
  return a1;
}

void IOKitAccessoriesDelegate::stop(IOKitAccessoriesDelegate *this)
{
  v1[0] = MEMORY[0x1E4F143A8];
  v1[1] = 0x40000000;
  v1[2] = ___ZN24IOKitAccessoriesDelegate4stopEv_block_invoke;
  v1[3] = &__block_descriptor_tmp_13;
  v1[4] = this;
  ctu::SharedSynchronizable<AccessoriesDelegateBase>::execute_wrapped((uint64_t *)this + 1, (uint64_t)v1);
}

void ___ZN24IOKitAccessoriesDelegate4stopEv_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  int v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = *(NSObject **)(v1 + 40);
  BOOL v4 = os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);
  if (v2)
  {
    if (v4)
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl(&dword_1C5767000, v3, OS_LOG_TYPE_DEFAULT, "#I Stopping", buf, 2u);
    }
    *(unsigned char *)(v1 + 80) = 0;
    size_t v5 = (void *)ctu::iokit::Controller::stopPowerSourceNotifications(*(ctu::iokit::Controller **)(v1 + 88));
    if (*(void *)(v1 + 168))
    {
      size_t v5 = *(void **)(v1 + 160);
      if (v5)
      {
        do
        {
          uint64_t v6 = (void *)*v5;
          operator delete(v5);
          size_t v5 = v6;
        }
        while (v6);
      }
      *(void *)(v1 + 160) = 0;
      uint64_t v7 = *(void *)(v1 + 152);
      if (v7)
      {
        for (uint64_t i = 0; i != v7; ++i)
          *(void *)(*(void *)(v1 + 144) + 8 * i) = 0;
      }
      *(void *)(v1 + 168) = 0;
    }
    if (capabilities::abs::supportsDisplayCoverAccessory((capabilities::abs *)v5)) {
      ctu::iokit::Controller::stopDisplayCoverStateNotifications(*(ctu::iokit::Controller **)(v1 + 88));
    }
  }
  else if (v4)
  {
    *(_WORD *)__int16 v9 = 0;
    _os_log_impl(&dword_1C5767000, v3, OS_LOG_TYPE_DEFAULT, "#I Already stopped", v9, 2u);
  }
}

void std::__shared_ptr_pointer<IOKitAccessoriesDelegate *,std::shared_ptr<IOKitAccessoriesDelegate> ctu::SharedSynchronizable<AccessoriesDelegateBase>::make_shared_ptr<IOKitAccessoriesDelegate>(IOKitAccessoriesDelegate*)::{lambda(IOKitAccessoriesDelegate *)#1},std::allocator<IOKitAccessoriesDelegate>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<IOKitAccessoriesDelegate *,std::shared_ptr<IOKitAccessoriesDelegate> ctu::SharedSynchronizable<AccessoriesDelegateBase>::make_shared_ptr<IOKitAccessoriesDelegate>(IOKitAccessoriesDelegate*)::{lambda(IOKitAccessoriesDelegate *)#1},std::allocator<IOKitAccessoriesDelegate>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<IOKitAccessoriesDelegate *,std::shared_ptr<IOKitAccessoriesDelegate> ctu::SharedSynchronizable<AccessoriesDelegateBase>::make_shared_ptr<IOKitAccessoriesDelegate>(IOKitAccessoriesDelegate*)::{lambda(IOKitAccessoriesDelegate *)#1},std::allocator<IOKitAccessoriesDelegate>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableI23AccessoriesDelegateBaseE15make_shared_ptrI24IOKitAccessoriesDelegate"
                     "EENSt3__110shared_ptrIT_EEPS7_EUlPS4_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableI23AccessoriesDelegateBaseE15make_shared_ptrI24IOKitAccessor"
                                "iesDelegateEENSt3__110shared_ptrIT_EEPS7_EUlPS4_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableI23AccessoriesDelegateBaseE15make_shared_ptrI24IOKitAccessoriesDelegateEENSt3__110shared_ptrIT_EEPS7_EUlPS4_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableI23AccessoriesDelegateBaseE15make_shared_ptrI24IOKitAccessoriesDelegateEENSt3__110shared_ptrIT_EEPS7_EUlPS4_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24; {
  return 0;
  }
}

uint64_t std::shared_ptr<IOKitAccessoriesDelegate> ctu::SharedSynchronizable<AccessoriesDelegateBase>::make_shared_ptr<IOKitAccessoriesDelegate>(IOKitAccessoriesDelegate*)::{lambda(IOKitAccessoriesDelegate*)#1}::operator() const(IOKitAccessoriesDelegate*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void *std::__hash_table<std::__hash_value_type<ctu::iokit::TelephonyIOKitPowerSource,abm::AccessoryInfo>,std::__unordered_map_hasher<ctu::iokit::TelephonyIOKitPowerSource,std::__hash_value_type<ctu::iokit::TelephonyIOKitPowerSource,abm::AccessoryInfo>,std::hash<ctu::iokit::TelephonyIOKitPowerSource>,std::equal_to<ctu::iokit::TelephonyIOKitPowerSource>,true>,std::__unordered_map_equal<ctu::iokit::TelephonyIOKitPowerSource,std::__hash_value_type<ctu::iokit::TelephonyIOKitPowerSource,abm::AccessoryInfo>,std::equal_to<ctu::iokit::TelephonyIOKitPowerSource>,std::hash<ctu::iokit::TelephonyIOKitPowerSource>,true>,std::allocator<std::__hash_value_type<ctu::iokit::TelephonyIOKitPowerSource,abm::AccessoryInfo>>>::__emplace_unique_key_args<ctu::iokit::TelephonyIOKitPowerSource,std::piecewise_construct_t const&,std::tuple<ctu::iokit::TelephonyIOKitPowerSource&&>,std::tuple<>>(uint64_t a1, unsigned int a2, _DWORD *a3)
{
  unint64_t v5 = a2;
  unint64_t v6 = *(void *)(a1 + 8);
  if (v6)
  {
    uint8x8_t v7 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
    v7.i16[0] = vaddlv_u8(v7);
    if (v7.u32[0] > 1uLL)
    {
      unint64_t v8 = a2;
      if (v6 <= a2) {
        unint64_t v8 = a2 % v6;
      }
    }
    else
    {
      unint64_t v8 = (v6 - 1) & a2;
    }
    __int16 v9 = *(void ***)(*(void *)a1 + 8 * v8);
    if (v9)
    {
      __int16 v10 = *v9;
      if (*v9)
      {
        if (v7.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v12 = v10[1];
            if (v12 == a2)
            {
              if (*((_DWORD *)v10 + 4) == a2) {
                return v10;
              }
            }
            else if ((v12 & (v6 - 1)) != v8)
            {
              goto LABEL_22;
            }
            __int16 v10 = (void *)*v10;
            if (!v10) {
              goto LABEL_22;
            }
          }
        }
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == a2)
          {
            if (*((_DWORD *)v10 + 4) == a2) {
              return v10;
            }
          }
          else
          {
            if (v11 >= v6) {
              v11 %= v6;
            }
            if (v11 != v8) {
              break;
            }
          }
          __int16 v10 = (void *)*v10;
        }
        while (v10);
      }
    }
  }
  else
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAAALL;
  }
LABEL_22:
  __int16 v10 = operator new(0x20uLL);
  *__int16 v10 = 0;
  v10[1] = v5;
  *((_DWORD *)v10 + 4) = *a3;
  *((_WORD *)v10 + 10) = -1;
  *(void *)((char *)v10 + 22) = 0;
  *((_WORD *)v10 + 15) = 0;
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (v6 && (float)(v14 * (float)v6) >= v13)
  {
    unint64_t v5 = v8;
  }
  else
  {
    BOOL v15 = 1;
    if (v6 >= 3) {
      BOOL v15 = (v6 & (v6 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v6);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t prime = v17;
    }
    else {
      size_t prime = v16;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v6 = *(void *)(a1 + 8);
    }
    if (prime > v6) {
      goto LABEL_35;
    }
    if (prime < v6)
    {
      unint64_t v19 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v6 < 3 || (uint8x8_t v20 = (uint8x8_t)vcnt_s8((int8x8_t)v6), v20.i16[0] = vaddlv_u8(v20), v20.u32[0] > 1uLL))
      {
        unint64_t v19 = std::__next_prime(v19);
      }
      else
      {
        uint64_t v21 = 1 << -(char)__clz(v19 - 1);
        if (v19 >= 2) {
          unint64_t v19 = v21;
        }
      }
      if (prime <= v19) {
        size_t prime = v19;
      }
      if (prime < v6) {
LABEL_35:
      }
        std::__hash_table<std::__hash_value_type<ctu::iokit::TelephonyIOKitPowerSource,abm::AccessoryInfo>,std::__unordered_map_hasher<ctu::iokit::TelephonyIOKitPowerSource,std::__hash_value_type<ctu::iokit::TelephonyIOKitPowerSource,abm::AccessoryInfo>,std::hash<ctu::iokit::TelephonyIOKitPowerSource>,std::equal_to<ctu::iokit::TelephonyIOKitPowerSource>,true>,std::__unordered_map_equal<ctu::iokit::TelephonyIOKitPowerSource,std::__hash_value_type<ctu::iokit::TelephonyIOKitPowerSource,abm::AccessoryInfo>,std::equal_to<ctu::iokit::TelephonyIOKitPowerSource>,std::hash<ctu::iokit::TelephonyIOKitPowerSource>,true>,std::allocator<std::__hash_value_type<ctu::iokit::TelephonyIOKitPowerSource,abm::AccessoryInfo>>>::__do_rehash<true>(a1, prime);
    }
    unint64_t v6 = *(void *)(a1 + 8);
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v6 <= v5) {
        v5 %= v6;
      }
    }
    else
    {
      unint64_t v5 = (v6 - 1) & v5;
    }
  }
  uint64_t v22 = *(void *)a1;
  CFTypeRef v23 = *(void **)(*(void *)a1 + 8 * v5);
  if (v23)
  {
    *__int16 v10 = *v23;
LABEL_58:
    *CFTypeRef v23 = v10;
    goto LABEL_59;
  }
  *__int16 v10 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v10;
  *(void *)(v22 + 8 * v5) = a1 + 16;
  if (*v10)
  {
    unint64_t v24 = *(void *)(*v10 + 8);
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v24 >= v6) {
        v24 %= v6;
      }
    }
    else
    {
      v24 &= v6 - 1;
    }
    CFTypeRef v23 = (void *)(*(void *)a1 + 8 * v24);
    goto LABEL_58;
  }
LABEL_59:
  ++*(void *)(a1 + 24);
  return v10;
}

void sub_1C582744C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<ctu::iokit::TelephonyIOKitPowerSource,abm::AccessoryInfo>,std::__unordered_map_hasher<ctu::iokit::TelephonyIOKitPowerSource,std::__hash_value_type<ctu::iokit::TelephonyIOKitPowerSource,abm::AccessoryInfo>,std::hash<ctu::iokit::TelephonyIOKitPowerSource>,std::equal_to<ctu::iokit::TelephonyIOKitPowerSource>,true>,std::__unordered_map_equal<ctu::iokit::TelephonyIOKitPowerSource,std::__hash_value_type<ctu::iokit::TelephonyIOKitPowerSource,abm::AccessoryInfo>,std::equal_to<ctu::iokit::TelephonyIOKitPowerSource>,std::hash<ctu::iokit::TelephonyIOKitPowerSource>,true>,std::allocator<std::__hash_value_type<ctu::iokit::TelephonyIOKitPowerSource,abm::AccessoryInfo>>>::__do_rehash<true>(uint64_t a1, unint64_t a2)
{
  if (!a2)
  {
    BOOL v15 = *(void **)a1;
    *(void *)a1 = 0;
    if (v15) {
      operator delete(v15);
    }
    *(void *)(a1 + 8) = 0;
    return;
  }
  if (a2 >> 61) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  BOOL v4 = operator new(8 * a2);
  unint64_t v5 = *(void **)a1;
  *(void *)a1 = v4;
  if (v5) {
    operator delete(v5);
  }
  uint64_t v6 = 0;
  *(void *)(a1 + 8) = a2;
  do
    *(void *)(*(void *)a1 + 8 * v6++) = 0;
  while (a2 != v6);
  uint64_t v8 = a1 + 16;
  uint8x8_t v7 = *(void **)(a1 + 16);
  if (v7)
  {
    unint64_t v9 = v7[1];
    unint64_t v10 = a2 - 1;
    if ((a2 & (a2 - 1)) == 0)
    {
      uint64_t v11 = v9 & v10;
      *(void *)(*(void *)a1 + 8 * v11) = v8;
      while (1)
      {
        uint64_t v12 = (void *)*v7;
        if (!*v7) {
          break;
        }
        uint64_t v13 = v12[1] & v10;
        if (v13 == v11)
        {
          uint8x8_t v7 = (void *)*v7;
        }
        else if (*(void *)(*(void *)a1 + 8 * v13))
        {
          void *v7 = *v12;
          uint64_t v14 = 8 * v13;
          *uint64_t v12 = **(void **)(*(void *)a1 + v14);
          **(void **)(*(void *)a1 + v14) = v12;
        }
        else
        {
          *(void *)(*(void *)a1 + 8 * v13) = v7;
          uint8x8_t v7 = v12;
          uint64_t v11 = v13;
        }
      }
      return;
    }
    if (v9 >= a2) {
      v9 %= a2;
    }
    *(void *)(*(void *)a1 + 8 * v9) = v8;
    unint64_t v16 = (void *)*v7;
    if (*v7)
    {
      while (1)
      {
        unint64_t v18 = v16[1];
        if (v18 >= a2) {
          v18 %= a2;
        }
        if (v18 == v9) {
          goto LABEL_25;
        }
        if (*(void *)(*(void *)a1 + 8 * v18))
        {
          void *v7 = *v16;
          uint64_t v17 = 8 * v18;
          *unint64_t v16 = **(void **)(*(void *)a1 + v17);
          **(void **)(*(void *)a1 + v17) = v16;
          unint64_t v16 = v7;
LABEL_25:
          uint8x8_t v7 = v16;
          unint64_t v16 = (void *)*v16;
          if (!v16) {
            return;
          }
        }
        else
        {
          *(void *)(*(void *)a1 + 8 * v18) = v7;
          uint8x8_t v7 = v16;
          unint64_t v16 = (void *)*v16;
          unint64_t v9 = v18;
          if (!v16) {
            return;
          }
        }
      }
    }
  }
}

void ctu::SharedSynchronizable<AccessoriesDelegateBase>::execute_wrapped(uint64_t *a1, uint64_t a2)
{
  unint64_t v3 = (std::__shared_weak_count *)a1[1];
  if (!v3 || (uint64_t v5 = *a1, (v6 = std::__shared_weak_count::lock(v3)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint8x8_t v7 = v6;
  uint64_t v8 = a1[2];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 1174405120;
  block[2] = ___ZNK3ctu20SharedSynchronizableI23AccessoriesDelegateBaseE15execute_wrappedEU13block_pointerFvvE_block_invoke;
  block[3] = &unk_1F20F63C0;
  void block[5] = v5;
  uint64_t v12 = v7;
  p_shared_owners = &v7->__shared_owners_;
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  void block[4] = a2;
  dispatch_async(v8, block);
  unint64_t v10 = v12;
  if (!v12 || atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      return;
    }
LABEL_8:
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    return;
  }
  ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
  std::__shared_weak_count::__release_weak(v10);
  if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_8;
  }
}

uint64_t ___ZNK3ctu20SharedSynchronizableI23AccessoriesDelegateBaseE15execute_wrappedEU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t __copy_helper_block_e8_40c52_ZTSNSt3__110shared_ptrIK23AccessoriesDelegateBaseEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c52_ZTSNSt3__110shared_ptrIK23AccessoriesDelegateBaseEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

uint64_t __cxx_global_var_init_11()
{
  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<ABMServer>::~PthreadMutexGuardPolicy, &ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance, &dword_1C5767000);
  }
  return result;
}

{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<CommandDriverFactory>::~PthreadMutexGuardPolicy, &ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance, &dword_1C5767000);
  }
  return result;
}

void CMOnBodyDelegate::create(NSObject **this@<X0>, queue a2@<0:X1>, void *a3@<X8>)
{
  if ([MEMORY[0x1E4F22250] isOnBodyStatusDetectionAvailable])
  {
    *a3 = 0xAAAAAAAAAAAAAAAALL;
    a3[1] = 0xAAAAAAAAAAAAAAAALL;
    uint64_t v5 = (char *)operator new(0x38uLL);
    uint64_t v6 = *this;
    if (v6) {
      dispatch_retain(v6);
    }
    *(void *)uint64_t v5 = 0;
    *((void *)v5 + 1) = 0;
    *(_OWORD *)(v5 + 24) = 0u;
    *(_OWORD *)(v5 + 40) = 0u;
    *((void *)v5 + 2) = v6;
    *a3 = v5;
    uint8x8_t v7 = (atomic_ullong *)operator new(0x28uLL);
    uint64_t v8 = (std::__shared_weak_count *)v7;
    v7[2] = 0;
    v7[1] = 0;
    atomic_ullong *v7 = (atomic_ullong)&unk_1F20F6450;
    v7[3] = (atomic_ullong)v5;
    void v7[4] = (atomic_ullong)&__block_literal_global_3;
    a3[1] = v7;
    atomic_fetch_add_explicit(v7 + 1, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(v7 + 2, 1uLL, memory_order_relaxed);
    *(void *)uint64_t v5 = v5;
    *((void *)v5 + 1) = v7;
    if (atomic_fetch_add(v7 + 1, 0xFFFFFFFFFFFFFFFFLL))
    {
      if (!v6) {
        return;
      }
    }
    else
    {
      (*(void (**)(atomic_ullong *))(*v7 + 16))(v7);
      std::__shared_weak_count::__release_weak(v8);
      if (!v6) {
        return;
      }
    }
    dispatch_release(v6);
  }
  else
  {
    unint64_t v9 = GetOsLogContext()[1];
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)unint64_t v10 = 0;
      _os_log_impl(&dword_1C5767000, v9, OS_LOG_TYPE_DEFAULT, "Motion on-body detection is not available on this device", v10, 2u);
    }
    *a3 = 0;
    a3[1] = 0;
  }
}

void sub_1C58279F4(void *a1)
{
  uint64_t v2 = __cxa_begin_catch(a1);
  _block_invoke((uint64_t)v2, v1);
  __cxa_rethrow();
}

void sub_1C5827A08(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  if (v1) {
    dispatch_release(v1);
  }
  _Unwind_Resume(a1);
}

uint64_t CMOnBodyDelegate::isSupported(CMOnBodyDelegate *this)
{
  return [MEMORY[0x1E4F22250] isOnBodyStatusDetectionAvailable];
}

void _block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(NSObject **)(a2 + 16);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = _block_invoke_2;
  block[3] = &__block_descriptor_40_e5_v8__0l;
  void block[4] = a2;
  dispatch_async(v2, block);
}

void _block_invoke_2(uint64_t a1)
{
  uint64_t v1 = *(CMOnBodyDelegate **)(a1 + 32);
  if (v1)
  {
    CMOnBodyDelegate::~CMOnBodyDelegate(v1);
    operator delete(v2);
  }
}

void CMOnBodyDelegate::CMOnBodyDelegate(CMOnBodyDelegate *this, queue a2)
{
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((void *)this + 2) = *(void *)a2.fObj.fObj;
}

{
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((void *)this + 2) = *(void *)a2.fObj.fObj;
}

uint64_t CMOnBodyDelegate::shutdown(CMOnBodyDelegate *this)
{
  uint64_t result = [[(id)objc_msgSend(MEMORY[0x1E4F22250], "sharedOnBodyStatusManager") stopOnBodyStatusDetection];
  if (*((void *)this + 2)) {
    *((void *)this + 2) = 0;
  }
  return result;
}

uint64_t CMOnBodyDelegate::stopMotionDetection(CMOnBodyDelegate *this)
{
  uint64_t v1 = (void *)[MEMORY[0x1E4F22250] sharedOnBodyStatusManager];

  return [v1 stopOnBodyStatusDetection];
}

void CMOnBodyDelegate::~CMOnBodyDelegate(CMOnBodyDelegate *this)
{
  uint64_t v2 = *((void *)this + 3);
  for (uint64_t i = *((void *)this + 4); i != v2; i -= 16)
  {
    BOOL v4 = *(NSObject **)(i - 8);
    if (v4) {
      dispatch_release(v4);
    }
    uint64_t v5 = *(const void **)(i - 16);
    if (v5) {
      _Block_release(v5);
    }
  }
  *((void *)this + 4) = v2;
  uint64_t v6 = (const void *)*((void *)this + 6);
  if (v6) {
    CFRelease(v6);
  }
  uint64_t v7 = *((void *)this + 3);
  if (v7)
  {
    uint64_t v8 = *((void *)this + 4);
    unint64_t v9 = (void *)*((void *)this + 3);
    if (v8 != v7)
    {
      do
      {
        unint64_t v10 = *(NSObject **)(v8 - 8);
        if (v10) {
          dispatch_release(v10);
        }
        uint64_t v11 = *(const void **)(v8 - 16);
        if (v11) {
          _Block_release(v11);
        }
        v8 -= 16;
      }
      while (v8 != v7);
      unint64_t v9 = (void *)*((void *)this + 3);
    }
    *((void *)this + 4) = v7;
    operator delete(v9);
  }
  uint64_t v12 = (std::__shared_weak_count *)*((void *)this + 1);
  if (v12) {
    std::__shared_weak_count::__release_weak(v12);
  }
}

void CMOnBodyDelegate::startMotionDetection(CMOnBodyDelegate *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 1);
  if (!v2 || (v3 = *(void *)this, (BOOL v4 = std::__shared_weak_count::lock(v2)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v5 = v4;
  atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (*((void *)this + 6)) {
      uint64_t v6 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
    }
    else {
      uint64_t v6 = 0;
    }
    if (v6)
    {
LABEL_8:
      uint64_t v7 = (void *)[MEMORY[0x1E4F22250] sharedOnBodyStatusManager];
      uint64_t v8 = *((void *)this + 2);
      uint64_t v9 = *((void *)this + 6);
      v12[0] = MEMORY[0x1E4F143A8];
      v12[1] = 3321888768;
      void v12[2] = ___ZN16CMOnBodyDelegate20startMotionDetectionEv_block_invoke;
      v12[3] = &__block_descriptor_48_e8_32c41_ZTSNSt3__18weak_ptrI16CMOnBodyDelegateEE_e36_v24__0__CMOnBodyStatus_8__NSError_16l;
      void v12[4] = v3;
      uint64_t v13 = v5;
      atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      [v7 startOnBodyStatusDetectionToQueue:v8 withParameters:v9 handler:v12];
      if (v13) {
        std::__shared_weak_count::__release_weak(v13);
      }
      goto LABEL_16;
    }
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v5);
    if (*((void *)this + 6)) {
      unint64_t v10 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
    }
    else {
      unint64_t v10 = 0;
    }
    if (v10) {
      goto LABEL_8;
    }
  }
  uint64_t v11 = GetOsLogContext()[1];
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl(&dword_1C5767000, v11, OS_LOG_TYPE_DEFAULT, "Motion Parameter is not ready. Cannot start the motion detection!", buf, 2u);
  }
LABEL_16:
  std::__shared_weak_count::__release_weak(v5);
}

void sub_1C5827DF8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_weak(v1);
  _Unwind_Resume(a1);
}

void sub_1C5827E0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14)
  {
    std::__shared_weak_count::__release_weak(a14);
    std::__shared_weak_count::__release_weak(v14);
    _Unwind_Resume(a1);
  }
  std::__shared_weak_count::__release_weak(v14);
  _Unwind_Resume(a1);
}

void ___ZN16CMOnBodyDelegate20startMotionDetectionEv_block_invoke(uint64_t a1, void *a2)
{
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 40);
  if (v3)
  {
    uint64_t v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      uint64_t v6 = v5;
      uint64_t v7 = *(void *)(a1 + 32);
      if (v7) {
        CMOnBodyDelegate::motionCallback_sync(v7, [a2 result:v7 confidence:[a2 confidence]], [a2 confidence]);
      }
      if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_1C5827F1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void CMOnBodyDelegate::motionCallback_sync(uint64_t a1, int a2, int a3)
{
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v4 = *(void *)(a1 + 32);
  if (v3 != v4)
  {
    while (!*(void *)v3)
    {
      uint64_t v7 = 0;
      uint64_t v8 = *(NSObject **)(v3 + 8);
      if (v8) {
        goto LABEL_6;
      }
LABEL_7:
      if (!v7)
      {
        unint64_t v10 = 0;
        uint64_t v12 = MEMORY[0x1E4F143A8];
        uint64_t v13 = 3321888768;
        uint64_t v14 = ___ZNK8dispatch8callbackIU13block_pointerFvN16CMOnBodyDelegate14CMOnBodyResultENS1_24CMOnBodyResultConfidenceEEEclIJS2_S3_EEEvDpT__block_invoke;
        BOOL v15 = &__block_descriptor_48_e8_32c109_ZTSN8dispatch5blockIU13block_pointerFvN16CMOnBodyDelegate14CMOnBodyResultENS1_24CMOnBodyResultConfidenceEEEE_e5_v8__0l;
LABEL_13:
        uint64_t v11 = 0;
        goto LABEL_14;
      }
      uint64_t v9 = _Block_copy(v7);
      unint64_t v10 = v9;
      uint64_t v12 = MEMORY[0x1E4F143A8];
      uint64_t v13 = 3321888768;
      uint64_t v14 = ___ZNK8dispatch8callbackIU13block_pointerFvN16CMOnBodyDelegate14CMOnBodyResultENS1_24CMOnBodyResultConfidenceEEEclIJS2_S3_EEEvDpT__block_invoke;
      BOOL v15 = &__block_descriptor_48_e8_32c109_ZTSN8dispatch5blockIU13block_pointerFvN16CMOnBodyDelegate14CMOnBodyResultENS1_24CMOnBodyResultConfidenceEEEE_e5_v8__0l;
      if (!v9) {
        goto LABEL_13;
      }
      uint64_t v11 = _Block_copy(v9);
LABEL_14:
      aBlocunint64_t k = v11;
      int v17 = a2;
      int v18 = a3;
      dispatch_async(v8, &v12);
      if (aBlock) {
        _Block_release(aBlock);
      }
      if (v10) {
        _Block_release(v10);
      }
      if (v8) {
        dispatch_release(v8);
      }
      if (v7) {
        _Block_release(v7);
      }
      v3 += 16;
      if (v3 == v4) {
        return;
      }
    }
    uint64_t v7 = _Block_copy(*(const void **)v3);
    uint64_t v8 = *(NSObject **)(v3 + 8);
    if (!v8) {
      goto LABEL_7;
    }
LABEL_6:
    dispatch_retain(v8);
    goto LABEL_7;
  }
}

uint64_t __copy_helper_block_e8_32c41_ZTSNSt3__18weak_ptrI16CMOnBodyDelegateEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c41_ZTSNSt3__18weak_ptrI16CMOnBodyDelegateEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void CMOnBodyDelegate::setThresholds(CMOnBodyDelegate *this, CFTypeRef cf)
{
  uint64_t v3 = (const void *)*((void *)this + 6);
  if (v3) {
    uint64_t v4 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
  }
  else {
    uint64_t v4 = 0;
  }
  if (v4)
  {
    uint64_t v5 = GetOsLogContext()[1];
    if (!os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    __int16 v10 = 0;
    uint64_t v6 = "Motion parameter is already set.";
    uint64_t v7 = (uint8_t *)&v10;
    goto LABEL_13;
  }
  if (cf)
  {
    CFRetain(cf);
    uint64_t v3 = (const void *)*((void *)this + 6);
  }
  *((void *)this + 6) = cf;
  if (v3) {
    CFRelease(v3);
  }
  [((id)objc_msgSend(MEMORY[0x1E4F22250], "sharedOnBodyStatusManager")) setPropertiesWithDictionary:cf];
  uint64_t v5 = GetOsLogContext()[1];
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    __int16 v9 = 0;
    uint64_t v6 = "Motion parameter is set!";
    uint64_t v7 = (uint8_t *)&v9;
LABEL_13:
    _os_log_impl(&dword_1C5767000, v5, OS_LOG_TYPE_DEFAULT, v6, v7, 2u);
  }
}

void *CMOnBodyDelegate::registerCallback(void *a1, void **a2)
{
  uint64_t v4 = (void *)a1[4];
  if ((unint64_t)v4 >= a1[5])
  {
    uint64_t result = std::vector<dispatch::callback<void({block_pointer})(CMOnBodyDelegate::CMOnBodyResult,CMOnBodyDelegate::CMOnBodyResultConfidence)>>::__push_back_slow_path<dispatch::callback<void({block_pointer})(CMOnBodyDelegate::CMOnBodyResult,CMOnBodyDelegate::CMOnBodyResultConfidence)> const&>(a1 + 3, (uint64_t)a2);
    a1[4] = result;
  }
  else
  {
    uint64_t v5 = *a2;
    if (*a2) {
      uint64_t v5 = _Block_copy(v5);
    }
    uint64_t v6 = a2[1];
    void *v4 = v5;
    v4[1] = v6;
    if (v6) {
      dispatch_retain(v6);
    }
    uint64_t result = v4 + 2;
    a1[4] = v4 + 2;
  }
  return result;
}

const char *CMOnBodyDelegate::toString(unsigned int a1)
{
  if (a1 > 2) {
    return "Unknown";
  }
  else {
    return off_1E65177B0[a1];
  }
}

const char *CMOnBodyDelegate::toString(int a1)
{
  uint64_t v1 = "Confidence Level Unknown";
  if (a1 == 1) {
    uint64_t v1 = "Confidence Level High";
  }
  if (a1) {
    return v1;
  }
  else {
    return "Confidence Level Low";
  }
}

void *std::vector<dispatch::callback<void({block_pointer})(CMOnBodyDelegate::CMOnBodyResult,CMOnBodyDelegate::CMOnBodyResultConfidence)>>::__push_back_slow_path<dispatch::callback<void({block_pointer})(CMOnBodyDelegate::CMOnBodyResult,CMOnBodyDelegate::CMOnBodyResultConfidence)> const&>(void *a1, uint64_t a2)
{
  uint64_t v2 = a1[1] - *a1;
  unint64_t v3 = (v2 >> 4) + 1;
  if (v3 >> 60) {
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v6 = a1[2] - *a1;
  if (v6 >> 3 > v3) {
    unint64_t v3 = v6 >> 3;
  }
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v7 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v7 = v3;
  }
  if (!v7)
  {
    uint64_t v8 = 0;
    __int16 v9 = *(void **)a2;
    if (!*(void *)a2) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v7 >> 60) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  uint64_t v8 = (char *)operator new(16 * v7);
  __int16 v9 = *(void **)a2;
  if (*(void *)a2) {
LABEL_12:
  }
    __int16 v9 = _Block_copy(v9);
LABEL_13:
  __int16 v10 = *(NSObject **)(a2 + 8);
  uint64_t v11 = &v8[16 * (v2 >> 4)];
  *(void *)uint64_t v11 = v9;
  *((void *)v11 + 1) = v10;
  if (v10) {
    dispatch_retain(v10);
  }
  uint64_t v12 = &v8[16 * v7];
  uint64_t v13 = v11 + 16;
  uint64_t v14 = (char *)*a1;
  BOOL v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v11;
    a1[1] = v13;
    a1[2] = v12;
  }
  else
  {
    unint64_t v16 = (unint64_t)&v15[-*a1 - 16];
    if (v16 < 0xD0) {
      goto LABEL_17;
    }
    CFTypeRef v23 = &v15[-(v16 & 0xFFFFFFFFFFFFFFF0)];
    BOOL v24 = &v8[v2 - 8 - (v16 & 0xFFFFFFFFFFFFFFF0)] >= v15 || v23 - 8 >= v11;
    BOOL v25 = !v24;
    if (v23 - 16 < &v8[v2 - 8] && &v8[v2 - (v16 & 0xFFFFFFFFFFFFFFF0) - 16] < v15 - 8) {
      goto LABEL_17;
    }
    if (v25) {
      goto LABEL_17;
    }
    uint64_t v27 = (v16 >> 4) + 1;
    uint64_t v28 = 16 * (v27 & 0x1FFFFFFFFFFFFFFELL);
    int v17 = &v11[-v28];
    CFTypeRef v29 = &v15[-v28];
    std::string v30 = (double *)(v11 - 32);
    xpc_object_t v31 = (const double *)(v15 - 32);
    uint64_t v32 = v27 & 0x1FFFFFFFFFFFFFFELL;
    do
    {
      float64x2x2_t v33 = vld2q_f64(v31);
      vst2q_f64(v30, v33);
      *(_OWORD *)xpc_object_t v31 = 0uLL;
      *((_OWORD *)v31 + 1) = 0uLL;
      v31 -= 4;
      v30 -= 4;
      v32 -= 2;
    }
    while (v32);
    uint64_t v11 = v17;
    BOOL v15 = v29;
    if (v27 != (v27 & 0x1FFFFFFFFFFFFFFELL))
    {
LABEL_17:
      int v17 = v11;
      do
      {
        long long v18 = *((_OWORD *)v15 - 1);
        v15 -= 16;
        *((_OWORD *)v17 - 1) = v18;
        v17 -= 16;
        *(void *)BOOL v15 = 0;
        *((void *)v15 + 1) = 0;
      }
      while (v15 != v14);
    }
    BOOL v15 = (char *)*a1;
    unint64_t v19 = (char *)a1[1];
    *a1 = v17;
    a1[1] = v13;
    a1[2] = v12;
    while (v19 != v15)
    {
      uint8x8_t v20 = *((void *)v19 - 1);
      if (v20) {
        dispatch_release(v20);
      }
      uint64_t v21 = (const void *)*((void *)v19 - 2);
      if (v21) {
        _Block_release(v21);
      }
      v19 -= 16;
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v13;
}

void std::__shared_ptr_pointer<CMOnBodyDelegate *,void({block_pointer})(CMOnBodyDelegate *),std::allocator<CMOnBodyDelegate>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t std::__shared_ptr_pointer<CMOnBodyDelegate *,void({block_pointer})(CMOnBodyDelegate *),std::allocator<CMOnBodyDelegate>>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *(void *)(a1 + 24));
}

uint64_t std::__shared_ptr_pointer<CMOnBodyDelegate *,void({block_pointer})(CMOnBodyDelegate *),std::allocator<CMOnBodyDelegate>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x80000001C599FFD0) {
    return a1 + 32;
  }
  if (((v3 & 0x80000001C599FFD0 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000001C599FFD0)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001C599FFD0 & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 32;
  }
  return 0;
}

uint64_t ___ZNK8dispatch8callbackIU13block_pointerFvN16CMOnBodyDelegate14CMOnBodyResultENS1_24CMOnBodyResultConfidenceEEEclIJS2_S3_EEEvDpT__block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *(unsigned int *)(a1 + 40), *(unsigned int *)(a1 + 44));
}

void *__copy_helper_block_e8_32c109_ZTSN8dispatch5blockIU13block_pointerFvN16CMOnBodyDelegate14CMOnBodyResultENS1_24CMOnBodyResultConfidenceEEEE(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void **)(a2 + 32);
  if (result) {
    uint64_t result = _Block_copy(result);
  }
  *(void *)(a1 + 32) = result;
  return result;
}

void __destroy_helper_block_e8_32c109_ZTSN8dispatch5blockIU13block_pointerFvN16CMOnBodyDelegate14CMOnBodyResultENS1_24CMOnBodyResultConfidenceEEEE(uint64_t a1)
{
  uint64_t v1 = *(const void **)(a1 + 32);
  if (v1) {
    _Block_release(v1);
  }
}

void HandDetectionManager::create(char *a1@<X0>, NSObject **a2@<X1>, NSObject **a3@<X2>, uint64_t *a4@<X3>, uint64_t *a5@<X4>, uint64_t *a6@<X5>, HandDetectionManager **a7@<X8>)
{
  long long v38 = (HandDetectionManager *)0xAAAAAAAAAAAAAAAALL;
  unint64_t v39 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v14 = (HandDetectionManager *)operator new(0xA0uLL);
  BOOL v15 = *a2;
  dispatch_object_t v37 = v15;
  if (v15) {
    dispatch_retain(v15);
  }
  unint64_t v16 = *a3;
  dispatch_object_t object = v16;
  if (v16) {
    dispatch_retain(v16);
  }
  int v17 = (std::__shared_weak_count *)a4[1];
  uint64_t v34 = *a4;
  float v35 = v17;
  if (v17) {
    atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v18 = (std::__shared_weak_count *)a5[1];
  uint64_t v32 = *a5;
  float64x2x2_t v33 = v18;
  if (v18) {
    atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v19 = *a6;
  uint8x8_t v20 = (std::__shared_weak_count *)a6[1];
  v31[0] = v19;
  v31[1] = v20;
  if (v20) {
    atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  HandDetectionManager::HandDetectionManager((uint64_t)v14, a1, &v37, &object, &v34, &v32, v31);
  long long v38 = v14;
  *(void *)std::string buf = v14;
  uint64_t v21 = (std::__shared_weak_count *)operator new(0x20uLL);
  v21->__shared_owners_ = 0;
  p_shared_owners = &v21->__shared_owners_;
  v21->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20F6590;
  v21->__shared_weak_owners_ = 0;
  v21[1].__vftable = (std::__shared_weak_count_vtbl *)v14;
  unint64_t v39 = (unint64_t)v21;
  *(void *)std::string buf = 0;
  CFTypeRef v23 = (std::__shared_weak_count *)*((void *)v14 + 2);
  if (!v23)
  {
    atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v21->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    *((void *)v14 + 1) = v14;
    *((void *)v14 + 2) = v21;
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_17;
    }
    goto LABEL_16;
  }
  if (v23->__shared_owners_ == -1)
  {
    atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v21->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    *((void *)v14 + 1) = v14;
    *((void *)v14 + 2) = v21;
    std::__shared_weak_count::__release_weak(v23);
    if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL))
    {
LABEL_16:
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
LABEL_17:
  if (*(void *)buf)
  {
    HandDetectionManager::~HandDetectionManager(*(HandDetectionManager **)buf);
    operator delete(v24);
  }
  if (v20 && !atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
  BOOL v25 = v33;
  if (v33 && !atomic_fetch_add(&v33->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
    std::__shared_weak_count::__release_weak(v25);
  }
  unint64_t v26 = v35;
  if (v35 && !atomic_fetch_add(&v35->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
    std::__shared_weak_count::__release_weak(v26);
  }
  if (object) {
    dispatch_release(object);
  }
  if (v37) {
    dispatch_release(v37);
  }
  uint64_t v27 = v38;
  if (v38 && (HandDetectionManager::init(v38) & 1) != 0)
  {
    unint64_t v28 = v39;
    *a7 = v27;
    a7[1] = (HandDetectionManager *)v28;
    return;
  }
  CFTypeRef v29 = GetOsLogContext()[1];
  if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_error_impl(&dword_1C5767000, v29, OS_LOG_TYPE_ERROR, "Failed to create Power Source Manager!", buf, 2u);
    *a7 = 0;
    a7[1] = 0;
    std::string v30 = (std::__shared_weak_count *)v39;
    if (!v39) {
      return;
    }
  }
  else
  {
    *a7 = 0;
    a7[1] = 0;
    std::string v30 = (std::__shared_weak_count *)v39;
    if (!v39) {
      return;
    }
  }
  if (!atomic_fetch_add(&v30->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
    std::__shared_weak_count::__release_weak(v30);
  }
}

void sub_1C5828994(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1C58289AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, HandDetectionManager *a19)
{
  std::unique_ptr<HandDetectionManager>::~unique_ptr[abi:ne180100](&a19);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  if (v20)
  {
    dispatch_release(v20);
    if (!v19) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v19)
  {
    goto LABEL_6;
  }
  dispatch_release(v19);
  goto LABEL_6;
}

uint64_t HandDetectionManager::init(HandDetectionManager *this)
{
  uint64_t v3 = *((void *)this + 1);
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v2) {
    atomic_fetch_add_explicit(&v2->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  if (!*((void *)this + 6))
  {
    __int16 v10 = *(NSObject **)this;
    if (!os_log_type_enabled(*(os_log_t *)this, OS_LOG_TYPE_ERROR)) {
      goto LABEL_23;
    }
    *(_WORD *)std::string buf = 0;
    uint64_t v11 = "Failed to create hand detection manager";
    goto LABEL_22;
  }
  if (!*((void *)this + 9))
  {
    __int16 v10 = *(NSObject **)this;
    if (!os_log_type_enabled(*(os_log_t *)this, OS_LOG_TYPE_ERROR)) {
      goto LABEL_23;
    }
    *(_WORD *)std::string buf = 0;
    uint64_t v11 = "Failed to create audio manager";
    goto LABEL_22;
  }
  if (!*((void *)this + 12))
  {
    __int16 v10 = *(NSObject **)this;
    if (!os_log_type_enabled(*(os_log_t *)this, OS_LOG_TYPE_ERROR)) {
      goto LABEL_23;
    }
    *(_WORD *)std::string buf = 0;
    uint64_t v11 = "Failed to create proximity sensor instance";
LABEL_22:
    _os_log_error_impl(&dword_1C5767000, v10, OS_LOG_TYPE_ERROR, v11, buf, 2u);
LABEL_23:
    uint64_t v12 = 0;
    if (!v2) {
      return v12;
    }
LABEL_24:
    std::__shared_weak_count::__release_weak(v2);
    return v12;
  }
  uint64_t v4 = (void *)*((void *)this + 15);
  if (v4)
  {
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 1174405120;
    aBlock[2] = ___ZN20HandDetectionManager4initEv_block_invoke;
    aBlock[3] = &__block_descriptor_tmp_30;
    aBlock[4] = this;
    void aBlock[5] = v3;
    uint64_t v34 = v2;
    if (v2) {
      atomic_fetch_add_explicit(&v2->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v5 = _Block_copy(aBlock);
    uint64_t v6 = *((void *)this + 18);
    if (v6) {
      dispatch_retain(*((dispatch_object_t *)this + 18));
    }
    float v35 = v5;
    dispatch_object_t v36 = v6;
    unint64_t v7 = (void *)v4[4];
    if ((unint64_t)v7 >= v4[5])
    {
      __int16 v9 = std::vector<dispatch::callback<void({block_pointer})(CMOnBodyDelegate::CMOnBodyResult,CMOnBodyDelegate::CMOnBodyResultConfidence)>>::__push_back_slow_path<dispatch::callback<void({block_pointer})(CMOnBodyDelegate::CMOnBodyResult,CMOnBodyDelegate::CMOnBodyResultConfidence)> const&>(v4 + 3, (uint64_t)&v35);
      goto LABEL_29;
    }
    if (v5)
    {
      uint64_t v8 = _Block_copy(v5);
      uint64_t v6 = v36;
      void *v7 = v8;
      v7[1] = v6;
      if (!v6)
      {
LABEL_15:
        __int16 v9 = v7 + 2;
LABEL_29:
        v4[4] = v9;
        if (v36) {
          dispatch_release(v36);
        }
        if (v35) {
          _Block_release(v35);
        }
        if (v34) {
          std::__shared_weak_count::__release_weak(v34);
        }
        goto LABEL_35;
      }
    }
    else
    {
      void *v7 = 0;
      v7[1] = v6;
      if (!v6) {
        goto LABEL_15;
      }
    }
    dispatch_retain(v6);
    goto LABEL_15;
  }
  uint64_t v14 = *(NSObject **)this;
  if (os_log_type_enabled(*(os_log_t *)this, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_error_impl(&dword_1C5767000, v14, OS_LOG_TYPE_ERROR, "On-Body handler is not created", buf, 2u);
  }
LABEL_35:
  BOOL v15 = (uint64_t **)*((void *)this + 6);
  v30[0] = MEMORY[0x1E4F143A8];
  v30[1] = 1174405120;
  uint64_t v30[2] = ___ZN20HandDetectionManager4initEv_block_invoke_3;
  v30[3] = &__block_descriptor_tmp_7_4;
  v30[4] = this;
  v30[5] = v3;
  xpc_object_t v31 = v2;
  if (v2) {
    atomic_fetch_add_explicit(&v2->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v16 = _Block_copy(v30);
  uint64_t v32 = v16;
  CMHandDetectionDelegate::registerCallback(v15, &v32);
  if (v16) {
    _Block_release(v16);
  }
  int v17 = (void *)*((void *)this + 9);
  v26[0] = MEMORY[0x1E4F143A8];
  v26[1] = 1174405120;
  v26[2] = ___ZN20HandDetectionManager4initEv_block_invoke_8;
  v26[3] = &__block_descriptor_tmp_12_0;
  v26[4] = this;
  v26[5] = v3;
  uint64_t v27 = v2;
  if (v2) {
    atomic_fetch_add_explicit(&v2->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  long long v18 = _Block_copy(v26);
  uint64_t v19 = *((void *)this + 18);
  if (v19) {
    dispatch_retain(*((dispatch_object_t *)this + 18));
  }
  unint64_t v28 = v18;
  dispatch_object_t object = v19;
  uint8x8_t v20 = (void *)v17[9];
  if ((unint64_t)v20 < v17[10])
  {
    if (v18)
    {
      uint64_t v21 = _Block_copy(v18);
      uint64_t v19 = object;
      *uint8x8_t v20 = v21;
      v20[1] = v19;
      if (!v19)
      {
LABEL_47:
        uint64_t v22 = v20 + 2;
        goto LABEL_49;
      }
    }
    else
    {
      *uint8x8_t v20 = 0;
      v20[1] = v19;
      if (!v19) {
        goto LABEL_47;
      }
    }
    dispatch_retain(v19);
    goto LABEL_47;
  }
  uint64_t v22 = std::vector<dispatch::callback<void({block_pointer})(AudioManager::AudioOutputState)>>::__push_back_slow_path<dispatch::callback<void({block_pointer})(AudioManager::AudioOutputState)> const&>(v17 + 8, (uint64_t)&v28);
LABEL_49:
  v17[9] = v22;
  if (object) {
    dispatch_release(object);
  }
  if (v28) {
    _Block_release(v28);
  }
  v23[0] = MEMORY[0x1E4F143A8];
  v23[1] = 1174405120;
  v23[2] = ___ZN20HandDetectionManager4initEv_block_invoke_13;
  v23[3] = &__block_descriptor_tmp_19_2;
  v23[4] = this;
  v23[5] = v3;
  BOOL v24 = v2;
  if (v2) {
    atomic_fetch_add_explicit(&v2->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  BOOL v25 = _Block_copy(v23);
  ctu::iokit::IOHIDController::registerProxCallback();
  if (v25) {
    _Block_release(v25);
  }
  ctu::iokit::IOHIDController::start(*((ctu::iokit::IOHIDController **)this + 12));
  if (v24) {
    std::__shared_weak_count::__release_weak(v24);
  }
  if (v27) {
    std::__shared_weak_count::__release_weak(v27);
  }
  if (v31) {
    std::__shared_weak_count::__release_weak(v31);
  }
  uint64_t v12 = 1;
  if (v2) {
    goto LABEL_24;
  }
  return v12;
}

void sub_1C5828EA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, void *aBlock, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,std::__shared_weak_count *a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,std::__shared_weak_count *a32)
{
  dispatch::callback<void({block_pointer})(CMOnBodyDelegate::CMOnBodyResult,CMOnBodyDelegate::CMOnBodyResultConfidence)>::~callback(v33 - 128);
  float v35 = *(std::__shared_weak_count **)(v33 - 136);
  if (v35) {
    std::__shared_weak_count::__release_weak(v35);
  }
  if (v32) {
    std::__shared_weak_count::__release_weak(v32);
  }
  _Unwind_Resume(a1);
}

uint64_t HandDetectionManager::HandDetectionManager(uint64_t a1, char *__s, NSObject **a3, NSObject **a4, void *a5, void *a6, void *a7)
{
  size_t v14 = strlen(__s);
  if (v14 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  std::string::size_type v15 = v14;
  if (v14 >= 0x17)
  {
    uint64_t v17 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v14 | 7) != 0x17) {
      uint64_t v17 = v14 | 7;
    }
    uint64_t v18 = v17 + 1;
    p_dst = (std::string *)operator new(v17 + 1);
    __dst.__r_.__value_.__l.__size_ = v15;
    __dst.__r_.__value_.__r.__words[2] = v18 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_8;
  }
  *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v14;
  p_dst = &__dst;
  if (v14) {
LABEL_8:
  }
    memcpy(p_dst, __s, v15);
  p_dst->__r_.__value_.__s.__data_[v15] = 0;
  uint64_t v19 = std::string::append(&__dst, ".", 1uLL);
  long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  v49.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  uint64_t v21 = std::string::append(&v49, "HandDetectionManager", 0x14uLL);
  long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
  int64_t v51 = v21->__r_.__value_.__r.__words[2];
  *(_OWORD *)long long __p = v22;
  v21->__r_.__value_.__l.__size_ = 0;
  v21->__r_.__value_.__r.__words[2] = 0;
  v21->__r_.__value_.__r.__words[0] = 0;
  if (v51 >= 0) {
    CFTypeRef v23 = __p;
  }
  else {
    CFTypeRef v23 = (void **)__p[0];
  }
  ctu::OsLogLogger::OsLogLogger((ctu::OsLogLogger *)a1, "com.apple.telephony.abm", (const char *)v23);
  if ((SHIBYTE(v51) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v49.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_14;
    }
LABEL_58:
    operator delete(v49.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_59;
  }
  operator delete(__p[0]);
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_58;
  }
LABEL_14:
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_15;
  }
LABEL_59:
  operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_15:
  *(_OWORD *)(a1 + 24) = 0u;
  *(void *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 8) = 0u;
  BOOL v24 = *a3;
  dispatch_object_t v47 = v24;
  if (v24) {
    dispatch_retain(v24);
  }
  BOOL v25 = *a4;
  dispatch_object_t object = v25;
  if (v25) {
    dispatch_retain(v25);
  }
  CMHandDetectionDelegate::create(&v47, &object, (void *)(a1 + 48));
  if (object) {
    dispatch_release(object);
  }
  if (v47) {
    dispatch_release(v47);
  }
  *(void *)(a1 + 72) = *a5;
  uint64_t v27 = a5[1];
  *(void *)(a1 + 80) = v27;
  if (v27) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v27 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 96) = *a6;
  *(unsigned char *)(a1 + 88) = 0;
  uint64_t v28 = a6[1];
  *(void *)(a1 + 104) = v28;
  if (v28) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v28 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 120) = *a7;
  *(unsigned char *)(a1 + 112) = 0;
  uint64_t v29 = a7[1];
  *(void *)(a1 + 128) = v29;
  if (v29) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v29 + 8), 1uLL, memory_order_relaxed);
  }
  *(_DWORD *)(a1 + 136) = 1;
  std::string v30 = *a3;
  *(void *)(a1 + 144) = *a3;
  if (v30) {
    dispatch_retain(v30);
  }
  *(unsigned char *)(a1 + 152) = 0;
  if (!*(void *)(a1 + 72))
  {
    AudioManager::create((AudioManager *)__s, (AudioManager **)__p);
    long long v40 = *(_OWORD *)__p;
    __p[0] = 0;
    __p[1] = 0;
    long long v41 = *(std::__shared_weak_count **)(a1 + 80);
    *(_OWORD *)(a1 + 72) = v40;
    if (v41 && !atomic_fetch_add(&v41->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
    long long v42 = (std::__shared_weak_count *)__p[1];
    if (__p[1] && !atomic_fetch_add((atomic_ullong *volatile)__p[1] + 1, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
  if (!*(void *)(a1 + 96))
  {
    xpc_object_t v31 = *a3;
    dispatch_object_t v45 = v31;
    if (v31) {
      dispatch_retain(v31);
    }
    dispatch_object_t v44 = 0;
    ctu::iokit::IOHIDController::create();
    long long v32 = *(_OWORD *)__p;
    __p[0] = 0;
    __p[1] = 0;
    uint64_t v33 = *(std::__shared_weak_count **)(a1 + 104);
    *(_OWORD *)(a1 + 96) = v32;
    if (v33 && !atomic_fetch_add(&v33->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
    uint64_t v34 = (std::__shared_weak_count *)__p[1];
    if (__p[1] && !atomic_fetch_add((atomic_ullong *volatile)__p[1] + 1, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
    if (v44) {
      dispatch_release(v44);
    }
    if (v45) {
      dispatch_release(v45);
    }
  }
  if (!*(void *)(a1 + 120))
  {
    float v35 = *a3;
    dispatch_object_t v43 = v35;
    if (v35) {
      dispatch_retain(v35);
    }
    CMOnBodyDelegate::create(&v43, v26, __p);
    long long v36 = *(_OWORD *)__p;
    __p[0] = 0;
    __p[1] = 0;
    dispatch_object_t v37 = *(std::__shared_weak_count **)(a1 + 128);
    *(_OWORD *)(a1 + 120) = v36;
    if (v37 && !atomic_fetch_add(&v37->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
    long long v38 = (std::__shared_weak_count *)__p[1];
    if (__p[1] && !atomic_fetch_add((atomic_ullong *volatile)__p[1] + 1, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
    if (v43) {
      dispatch_release(v43);
    }
  }
  return a1;
}

void sub_1C582944C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, dispatch_object_t object, dispatch_object_t a10, dispatch_object_t a11, dispatch_object_t a12, dispatch_object_t a13)
{
  long long v20 = *(NSObject **)(v13 + 144);
  if (v20) {
    dispatch_release(v20);
  }
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v18);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v17);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v16);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v15);
  std::vector<dispatch::callback<void({block_pointer})(CMHandDetectionDelegate::CMHandDetectionResult)>>::~vector[abi:ne180100](v14);
  uint64_t v21 = *(std::__shared_weak_count **)(v13 + 16);
  if (v21) {
    std::__shared_weak_count::__release_weak(v21);
  }
  MEMORY[0x1C8790F80](v13);
  _Unwind_Resume(a1);
}

void sub_1C582951C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a32 < 0)
  {
    operator delete(__p);
    if (a25 < 0)
    {
LABEL_5:
      operator delete(a20);
      if ((a19 & 0x80000000) == 0) {
LABEL_9:
      }
        _Unwind_Resume(a1);
LABEL_8:
      operator delete(a14);
      _Unwind_Resume(a1);
    }
  }
  else if (a25 < 0)
  {
    goto LABEL_5;
  }
  if ((a19 & 0x80000000) == 0) {
    goto LABEL_9;
  }
  goto LABEL_8;
}

void **std::vector<dispatch::callback<void({block_pointer})(CMHandDetectionDelegate::CMHandDetectionResult)>>::~vector[abi:ne180100](void **a1)
{
  uint64_t v2 = (char *)*a1;
  if (*a1)
  {
    uint64_t v3 = (char *)a1[1];
    uint64_t v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        uint64_t v5 = *((void *)v3 - 1);
        if (v5) {
          dispatch_release(v5);
        }
        uint64_t v6 = (const void *)*((void *)v3 - 2);
        if (v6) {
          _Block_release(v6);
        }
        v3 -= 16;
      }
      while (v3 != v2);
      uint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void HandDetectionManager::~HandDetectionManager(HandDetectionManager *this)
{
  uint64_t v2 = *((void *)this + 3);
  for (uint64_t i = *((void *)this + 4); i != v2; i -= 16)
  {
    uint64_t v4 = *(NSObject **)(i - 8);
    if (v4) {
      dispatch_release(v4);
    }
    uint64_t v5 = *(const void **)(i - 16);
    if (v5) {
      _Block_release(v5);
    }
  }
  *((void *)this + 4) = v2;
  uint64_t v6 = (ctu::iokit::IOHIDController *)*((void *)this + 12);
  if (v6) {
    ctu::iokit::IOHIDController::stop(v6);
  }
  unint64_t v7 = (uint64_t **)*((void *)this + 6);
  if (v7)
  {
    uint64_t v19 = *v7;
    ctu::SharedSynchronizable<CMHandDetectionHandler>::execute_wrapped<CMHandDetectionHandler::stop(void)::{lambda(void)#1}>(v19, &v19);
    uint64_t v19 = (uint64_t *)**((void **)this + 6);
    ctu::SharedSynchronizable<CMHandDetectionHandler>::execute_wrapped<CMHandDetectionHandler::shutdown(void)::{lambda(void)#1}>(v19, &v19);
  }
  uint64_t v8 = *((void *)this + 18);
  if (v8) {
    dispatch_release(v8);
  }
  __int16 v9 = (std::__shared_weak_count *)*((void *)this + 16);
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  __int16 v10 = (std::__shared_weak_count *)*((void *)this + 13);
  if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  uint64_t v11 = (std::__shared_weak_count *)*((void *)this + 10);
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  uint64_t v12 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
    uint64_t v13 = (char *)*((void *)this + 3);
    if (!v13) {
      goto LABEL_35;
    }
  }
  else
  {
    uint64_t v13 = (char *)*((void *)this + 3);
    if (!v13) {
      goto LABEL_35;
    }
  }
  size_t v14 = (char *)*((void *)this + 4);
  uint64_t v15 = v13;
  if (v14 != v13)
  {
    do
    {
      uint64_t v16 = *((void *)v14 - 1);
      if (v16) {
        dispatch_release(v16);
      }
      uint64_t v17 = (const void *)*((void *)v14 - 2);
      if (v17) {
        _Block_release(v17);
      }
      v14 -= 16;
    }
    while (v14 != v13);
    uint64_t v15 = (char *)*((void *)this + 3);
  }
  *((void *)this + 4) = v13;
  operator delete(v15);
LABEL_35:
  uint64_t v18 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v18) {
    std::__shared_weak_count::__release_weak(v18);
  }

  JUMPOUT(0x1C8790F80);
}

void ___ZN20HandDetectionManager4initEv_block_invoke(void *a1, unsigned int a2, int a3)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    uint64_t v7 = a1[4];
    uint64_t v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      __int16 v9 = v8;
      uint64_t v10 = a1[5];
      if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v9);
      }
      if (v10)
      {
        *(_DWORD *)(v7 + 136) = a2;
        uint64_t v11 = *(NSObject **)v7;
        if (os_log_type_enabled(*(os_log_t *)v7, OS_LOG_TYPE_DEFAULT))
        {
          if (a2 > 2) {
            uint64_t v12 = "Unknown";
          }
          else {
            uint64_t v12 = off_1E65177C8[a2];
          }
          uint64_t v13 = "Confidence Level Unknown";
          if (a3 == 1) {
            uint64_t v13 = "Confidence Level High";
          }
          if (!a3) {
            uint64_t v13 = "Confidence Level Low";
          }
          int v14 = 136315394;
          uint64_t v15 = v12;
          __int16 v16 = 2080;
          uint64_t v17 = v13;
          _os_log_impl(&dword_1C5767000, v11, OS_LOG_TYPE_DEFAULT, "#I On Body Callback: OnBody: %s, confidence: %s", (uint8_t *)&v14, 0x16u);
        }
        HandDetectionManager::updateHandDetection((os_log_t *)v7);
      }
    }
  }
}

uint64_t __copy_helper_block_e8_40c45_ZTSNSt3__18weak_ptrI20HandDetectionManagerEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c45_ZTSNSt3__18weak_ptrI20HandDetectionManagerEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void ___ZN20HandDetectionManager4initEv_block_invoke_3(void *a1, unsigned int a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    uint64_t v5 = a1[4];
    uint64_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      uint64_t v7 = v6;
      uint64_t v8 = a1[5];
      if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v7);
      }
      if (v8)
      {
        __int16 v9 = *(NSObject **)v5;
        if (os_log_type_enabled(*(os_log_t *)v5, OS_LOG_TYPE_DEFAULT))
        {
          if (a2 > 2) {
            uint64_t v10 = "Unknown Hand Detection";
          }
          else {
            uint64_t v10 = off_1E65177E0[a2];
          }
          int v11 = 136315138;
          uint64_t v12 = v10;
          _os_log_impl(&dword_1C5767000, v9, OS_LOG_TYPE_DEFAULT, "#I Hand Detection State: %s", (uint8_t *)&v11, 0xCu);
        }
        *(_DWORD *)(v5 + 64) = a2;
        HandDetectionManager::updateHandDetection((os_log_t *)v5);
      }
    }
  }
}

uint64_t dispatch::callback<void({block_pointer})(AudioManager::AudioOutputState)>::~callback(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 8);
  if (v2) {
    dispatch_release(v2);
  }
  if (*(void *)a1) {
    _Block_release(*(const void **)a1);
  }
  return a1;
}

void *HandDetectionManager::registerCallback(void *a1, void **a2)
{
  uint64_t v4 = (void *)a1[4];
  if ((unint64_t)v4 >= a1[5])
  {
    uint64_t result = std::vector<dispatch::callback<void({block_pointer})(CMHandDetectionDelegate::CMHandDetectionResult)>>::__push_back_slow_path<dispatch::callback<void({block_pointer})(CMHandDetectionDelegate::CMHandDetectionResult)> const&>(a1 + 3, (uint64_t)a2);
    a1[4] = result;
  }
  else
  {
    uint64_t v5 = *a2;
    if (*a2) {
      uint64_t v5 = _Block_copy(v5);
    }
    uint64_t v6 = a2[1];
    void *v4 = v5;
    v4[1] = v6;
    if (v6) {
      dispatch_retain(v6);
    }
    uint64_t result = v4 + 2;
    a1[4] = v4 + 2;
  }
  return result;
}

void HandDetectionManager::setMotionParameter(uint64_t a1, ctu **a2)
{
  if (!*(void *)(a1 + 120)) {
    goto LABEL_10;
  }
  ctu::xpc_to_cf((uint64_t *)&cf, *a2, a2);
  CFTypeRef v3 = cf;
  if (!cf || (CFTypeID v4 = CFGetTypeID(cf), v4 != CFDictionaryGetTypeID()))
  {
    CFTypeRef v3 = 0;
    CFTypeRef v7 = 0;
    CFTypeRef v5 = cf;
    if (!cf) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  CFTypeRef v7 = v3;
  CFRetain(v3);
  CFTypeRef v5 = cf;
  if (cf) {
LABEL_7:
  }
    CFRelease(v5);
LABEL_8:
  CMOnBodyDelegate::setThresholds(*(CMOnBodyDelegate **)(a1 + 120), v3);
  if (v3) {
    CFRelease(v3);
  }
LABEL_10:
  HandDetectionManager::updateHandDetection((os_log_t *)a1);
}

void sub_1C5829CB8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void sub_1C5829CCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
}

void HandDetectionManager::setTxState(HandDetectionManager *this, int a2)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  *((unsigned char *)this + 152) = a2;
  CFTypeID v4 = *(NSObject **)this;
  if (os_log_type_enabled(*(os_log_t *)this, OS_LOG_TYPE_DEBUG))
  {
    CFTypeRef v7 = "Off";
    if (a2) {
      CFTypeRef v7 = "On";
    }
    *(_DWORD *)__int16 v9 = 136315138;
    *(void *)&v9[4] = v7;
    _os_log_debug_impl(&dword_1C5767000, v4, OS_LOG_TYPE_DEBUG, "#D Tx is %s", v9, 0xCu);
    CFTypeRef v5 = (uint64_t **)*((void *)this + 6);
    if (v5) {
      goto LABEL_3;
    }
  }
  else
  {
    CFTypeRef v5 = (uint64_t **)*((void *)this + 6);
    if (v5)
    {
LABEL_3:
      uint64_t v6 = *v5;
      *(void *)__int16 v9 = *v5;
      if (a2) {
        ctu::SharedSynchronizable<CMHandDetectionHandler>::execute_wrapped<CMHandDetectionHandler::start(void)::{lambda(void)#1}>(v6, v9);
      }
      else {
        ctu::SharedSynchronizable<CMHandDetectionHandler>::execute_wrapped<CMHandDetectionHandler::stop(void)::{lambda(void)#1}>(v6, v9);
      }
      goto LABEL_11;
    }
  }
  uint64_t v8 = *(NSObject **)this;
  if (os_log_type_enabled(*(os_log_t *)this, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)__int16 v9 = 0;
    _os_log_error_impl(&dword_1C5767000, v8, OS_LOG_TYPE_ERROR, "Handed detection instance is not created yet", v9, 2u);
  }
LABEL_11:
  HandDetectionManager::updateHandDetection((os_log_t *)this);
}

void *std::vector<dispatch::callback<void({block_pointer})(CMHandDetectionDelegate::CMHandDetectionResult)>>::__push_back_slow_path<dispatch::callback<void({block_pointer})(CMHandDetectionDelegate::CMHandDetectionResult)> const&>(void *a1, uint64_t a2)
{
  uint64_t v2 = a1[1] - *a1;
  unint64_t v3 = (v2 >> 4) + 1;
  if (v3 >> 60) {
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v6 = a1[2] - *a1;
  if (v6 >> 3 > v3) {
    unint64_t v3 = v6 >> 3;
  }
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v7 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v7 = v3;
  }
  if (!v7)
  {
    uint64_t v8 = 0;
    __int16 v9 = *(void **)a2;
    if (!*(void *)a2) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v7 >> 60) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  uint64_t v8 = (char *)operator new(16 * v7);
  __int16 v9 = *(void **)a2;
  if (*(void *)a2) {
LABEL_12:
  }
    __int16 v9 = _Block_copy(v9);
LABEL_13:
  uint64_t v10 = *(NSObject **)(a2 + 8);
  int v11 = &v8[16 * (v2 >> 4)];
  *(void *)int v11 = v9;
  *((void *)v11 + 1) = v10;
  if (v10) {
    dispatch_retain(v10);
  }
  uint64_t v12 = &v8[16 * v7];
  uint64_t v13 = v11 + 16;
  int v14 = (char *)*a1;
  uint64_t v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v11;
    a1[1] = v13;
    a1[2] = v12;
  }
  else
  {
    unint64_t v16 = (unint64_t)&v15[-*a1 - 16];
    if (v16 < 0xD0) {
      goto LABEL_17;
    }
    CFTypeRef v23 = &v15[-(v16 & 0xFFFFFFFFFFFFFFF0)];
    BOOL v24 = &v8[v2 - 8 - (v16 & 0xFFFFFFFFFFFFFFF0)] >= v15 || v23 - 8 >= v11;
    BOOL v25 = !v24;
    if (v23 - 16 < &v8[v2 - 8] && &v8[v2 - (v16 & 0xFFFFFFFFFFFFFFF0) - 16] < v15 - 8) {
      goto LABEL_17;
    }
    if (v25) {
      goto LABEL_17;
    }
    uint64_t v27 = (v16 >> 4) + 1;
    uint64_t v28 = 16 * (v27 & 0x1FFFFFFFFFFFFFFELL);
    uint64_t v17 = &v11[-v28];
    uint64_t v29 = &v15[-v28];
    std::string v30 = (double *)(v11 - 32);
    xpc_object_t v31 = (const double *)(v15 - 32);
    uint64_t v32 = v27 & 0x1FFFFFFFFFFFFFFELL;
    do
    {
      float64x2x2_t v33 = vld2q_f64(v31);
      vst2q_f64(v30, v33);
      *(_OWORD *)xpc_object_t v31 = 0uLL;
      *((_OWORD *)v31 + 1) = 0uLL;
      v31 -= 4;
      v30 -= 4;
      v32 -= 2;
    }
    while (v32);
    int v11 = v17;
    uint64_t v15 = v29;
    if (v27 != (v27 & 0x1FFFFFFFFFFFFFFELL))
    {
LABEL_17:
      uint64_t v17 = v11;
      do
      {
        long long v18 = *((_OWORD *)v15 - 1);
        v15 -= 16;
        *((_OWORD *)v17 - 1) = v18;
        v17 -= 16;
        *(void *)uint64_t v15 = 0;
        *((void *)v15 + 1) = 0;
      }
      while (v15 != v14);
    }
    uint64_t v15 = (char *)*a1;
    uint64_t v19 = (char *)a1[1];
    *a1 = v17;
    a1[1] = v13;
    a1[2] = v12;
    while (v19 != v15)
    {
      long long v20 = *((void *)v19 - 1);
      if (v20) {
        dispatch_release(v20);
      }
      uint64_t v21 = (const void *)*((void *)v19 - 2);
      if (v21) {
        _Block_release(v21);
      }
      v19 -= 16;
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v13;
}

HandDetectionManager **std::unique_ptr<HandDetectionManager>::~unique_ptr[abi:ne180100](HandDetectionManager **a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    HandDetectionManager::~HandDetectionManager(v2);
    operator delete(v3);
  }
  return a1;
}

void std::__shared_ptr_pointer<HandDetectionManager *,std::shared_ptr<HandDetectionManager>::__shared_ptr_default_delete<HandDetectionManager,HandDetectionManager>,std::allocator<HandDetectionManager>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<HandDetectionManager *,std::shared_ptr<HandDetectionManager>::__shared_ptr_default_delete<HandDetectionManager,HandDetectionManager>,std::allocator<HandDetectionManager>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1 = *(HandDetectionManager **)(a1 + 24);
  if (v1)
  {
    HandDetectionManager::~HandDetectionManager(v1);
    operator delete(v2);
  }
}

uint64_t std::__shared_ptr_pointer<HandDetectionManager *,std::shared_ptr<HandDetectionManager>::__shared_ptr_default_delete<HandDetectionManager,HandDetectionManager>,std::allocator<HandDetectionManager>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x80000001C59A007CLL) {
    return a1 + 24;
  }
  if (((v3 & 0x80000001C59A007CLL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000001C59A007CLL)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001C59A007CLL & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 24;
  }
  return 0;
}

void StatsAWD::create(uint64_t *a1@<X8>)
{
  *a1 = 0xAAAAAAAAAAAAAAAALL;
  a1[1] = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v3 = (StatsAWD *)operator new(0x78uLL);
  StatsAWD::StatsAWD(v3);
  *a1 = 0xAAAAAAAAAAAAAAAALL;
  a1[1] = 0xAAAAAAAAAAAAAAAALL;
  std::shared_ptr<StatsAWD>::shared_ptr[abi:ne180100]<StatsAWD,std::shared_ptr<StatsAWD> ctu::SharedSynchronizable<StatsAWD>::make_shared_ptr<StatsAWD>(StatsAWD*)::{lambda(StatsAWD*)#1},void>(a1, (uint64_t)v3);
  ctu::Loggable<StatsAWD,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(*a1);
  uint64_t v4 = *a1;
  if (*a1)
  {
    abm::AWDHelperGetConnection(&v8);
    long long v5 = v8;
    long long v8 = 0uLL;
    uint64_t v6 = *(std::__shared_weak_count **)(v4 + 112);
    *(_OWORD *)(v4 + 104) = v5;
    if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
    unint64_t v7 = (std::__shared_weak_count *)*((void *)&v8 + 1);
    if (*((void *)&v8 + 1))
    {
      if (!atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v8 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_1C582A260(_Unwind_Exception *a1)
{
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_1C582A274(_Unwind_Exception *a1)
{
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_1C582A288(_Unwind_Exception *a1)
{
  uint64_t v2 = v1;
  operator delete(v2);
  _Unwind_Resume(a1);
}

void StatsAWD::init(StatsAWD *this)
{
  abm::AWDHelperGetConnection(&v5);
  long long v2 = v5;
  long long v5 = 0uLL;
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 14);
  *(_OWORD *)((char *)this + 104) = v2;
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    uint64_t v4 = (std::__shared_weak_count *)*((void *)&v5 + 1);
    if (!*((void *)&v5 + 1)) {
      return;
    }
  }
  else
  {
    uint64_t v4 = (std::__shared_weak_count *)*((void *)&v5 + 1);
    if (!*((void *)&v5 + 1)) {
      return;
    }
  }
  if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
}

void StatsAWD::StatsAWD(StatsAWD *this)
{
  *(void *)this = &unk_1F20F6610;
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v8, "com.apple.telephony.abm", "stats.awd");
  GetABMLogServer(&v6);
  initially_inactive = dispatch_queue_attr_make_initially_inactive(0);
  uint64_t v3 = dispatch_queue_create_with_target_V2("stats.awd", initially_inactive, 0);
  dispatch_set_qos_class_floor(v3, QOS_CLASS_DEFAULT, 0);
  dispatch_activate(v3);
  *((void *)this + 9) = 0;
  *((void *)this + 10) = 0;
  *((void *)this + 11) = v3;
  if (v3)
  {
    dispatch_retain(v3);
    *((void *)this + 12) = 0;
    dispatch_release(v3);
  }
  else
  {
    *((void *)this + 12) = 0;
  }
  *(void *)this = &unk_1F20F66E0;
  ctu::OsLogContext::OsLogContext();
  ctu::OsLogContext::OsLogContext();
  ctu::LoggerCommonBase::LoggerCommonBase();
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v10);
  *((void *)this + 1) = &unk_1F20F0070;
  uint64_t v4 = v7;
  *((void *)this + 7) = v6;
  *((void *)this + 8) = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v9);
  *(void *)this = &unk_1F20F6770;
  long long v5 = v7;
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v8);
  *(void *)this = &unk_1F20F6610;
  *((void *)this + 13) = 0;
  *((void *)this + 14) = 0;
}

void sub_1C582A55C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15)
{
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&a15);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&a13);
  ctu::SharedSynchronizable<DataStallDetection>::~SharedSynchronizable(v15);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&a11);
  _Unwind_Resume(a1);
}

void sub_1C582A590(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)va);
  _Unwind_Resume(a1);
}

const char *StatsAWD::getName(StatsAWD *this)
{
  return "stats.awd";
}

void StatsAWD::~StatsAWD(StatsAWD *this)
{
  *(void *)this = &unk_1F20F6610;
  long long v2 = (std::__shared_weak_count *)*((void *)this + 14);
  if (!v2 || atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    *(void *)this = &unk_1F20F66E0;
    MEMORY[0x1C8790F40]((char *)this + 8);
    uint64_t v3 = *((void *)this + 12);
    if (!v3) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  *(void *)this = &unk_1F20F66E0;
  MEMORY[0x1C8790F40]((char *)this + 8);
  uint64_t v3 = *((void *)this + 12);
  if (v3) {
LABEL_4:
  }
    dispatch_release(v3);
LABEL_5:
  uint64_t v4 = *((void *)this + 11);
  if (v4) {
    dispatch_release(v4);
  }
  long long v5 = (std::__shared_weak_count *)*((void *)this + 10);
  if (v5) {
    std::__shared_weak_count::__release_weak(v5);
  }
}

{
  void *v1;
  uint64_t vars8;

  StatsAWD::~StatsAWD(this);

  operator delete(v1);
}

void StatsAWD::submit(StatsAWD *this, int a2, object a3)
{
  xpc_object_t v5 = *(xpc_object_t *)a3.fObj;
  if (*(void *)a3.fObj)
  {
    xpc_retain(*(xpc_object_t *)a3.fObj);
    uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 10);
    if (!v6) {
LABEL_9:
    }
      std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  else
  {
    xpc_object_t v5 = xpc_null_create();
    uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 10);
    if (!v6) {
      goto LABEL_9;
    }
  }
  uint64_t v7 = *((void *)this + 9);
  long long v8 = std::__shared_weak_count::lock(v6);
  if (!v8) {
    goto LABEL_9;
  }
  __int16 v9 = v8;
  uint64_t v10 = operator new(0x18uLL);
  *(void *)uint64_t v10 = this;
  _DWORD v10[2] = a2;
  *((void *)v10 + 2) = v5;
  xpc_object_t v11 = xpc_null_create();
  uint64_t v12 = *((void *)this + 11);
  atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v13 = operator new(0x18uLL);
  *uint64_t v13 = v10;
  v13[1] = v7;
  v13[2] = v9;
  dispatch_async_f(v12, v13, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<StatsAWD>::execute_wrapped<StatsAWD::submit(unsigned int,xpc::object)::$_0>(StatsAWD::submit(unsigned int,xpc::object)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<StatsAWD::submit(unsigned int,xpc::object)::$_0,dispatch_queue_s *::default_delete<StatsAWD::submit(unsigned int,xpc::object)::$_0>>)::{lambda(void *)#1}::__invoke);
  if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  xpc_release(v11);
}

void StatsAWD::submit_sync(uint64_t a1, int a2, xpc_object_t *a3)
{
  uint64_t v67 = *MEMORY[0x1E4F143B8];
  if (!*(void *)(a1 + 104))
  {
    uint64_t v10 = *(NSObject **)(a1 + 40);
    if (!os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
      return;
    }
    *(_WORD *)std::string buf = 0;
    xpc_object_t v11 = "Failed: AWD connection setup failed";
    uint64_t v12 = v10;
    uint32_t v13 = 2;
    goto LABEL_137;
  }
  SharedMetricFactory = (wis::MetricFactory *)wis::MetricFactory::getSharedMetricFactory((wis::MetricFactory *)a1);
  uint64_t v7 = wis::MetricFactory::newMetricContainerWithIdentifier(SharedMetricFactory);
  unint64_t v61 = (wis::MetricContainer *)v7;
  if (!v7)
  {
    int v14 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = a2;
      _os_log_debug_impl(&dword_1C5767000, v14, OS_LOG_TYPE_DEBUG, "#D Failed to get the metric of 0x%x", buf, 8u);
    }
    return;
  }
  long long v8 = (wis::MetricContainer *)v7;
  if (a2 <= 524463)
  {
    switch(a2)
    {
      case 524310:
        xpc_object_t v9 = *a3;
        if (*a3) {
          xpc_retain(*a3);
        }
        else {
          xpc_object_t v9 = xpc_null_create();
        }
        uint64_t v17 = (char *)operator new(0x48uLL);
        uint64_t v22 = MEMORY[0x1E4FBA920];
        *(void *)uint64_t v17 = &unk_1F20FADE0;
        *((void *)v17 + 1) = v22;
        *((_WORD *)v17 + 20) = 0;
        *((void *)v17 + 2) = 0;
        *((void *)v17 + 3) = v22;
        *((void *)v17 + 4) = v22;
        *((_DWORD *)v17 + 11) = 0;
        *((void *)v17 + 6) = v22;
        *((void *)v17 + 7) = 0;
        *((void *)v17 + 8) = 0;
        *(void *)std::string buf = v17;
        *(void *)unint64_t v64 = v9;
        if (v9 && MEMORY[0x1C8792D30](v9) == MEMORY[0x1E4F14590])
        {
          xpc_retain(v9);
          xpc_object_t v39 = v9;
        }
        else
        {
          xpc_object_t v39 = xpc_null_create();
          *(void *)unint64_t v64 = v39;
        }
        BOOL v55 = StatsAWD::fillMetric_sync(a1, (uint64_t *)buf, (xpc_object_t *)v64);
        xpc_release(v39);
        if (v55)
        {
          if (v17[69])
          {
            uint64_t WISTimestamp = *((void *)v17 + 7);
          }
          else
          {
            uint64_t WISTimestamp = wis::getWISTimestamp(v56);
            *((_DWORD *)v17 + 17) |= 0x100u;
            *((void *)v17 + 7) = WISTimestamp;
          }
          wis::MetricContainer::storeMetric(v61, WISTimestamp, *(unsigned int *)v61, (const wireless_diagnostics::google::protobuf::MessageLite *)v17);
        }
        break;
      case 524365:
        xpc_object_t v9 = *a3;
        if (*a3) {
          xpc_retain(*a3);
        }
        else {
          xpc_object_t v9 = xpc_null_create();
        }
        uint64_t v17 = (char *)operator new(0x30uLL);
        *(void *)uint64_t v17 = &unk_1F20FAC00;
        *((void *)v17 + 1) = 0;
        *((void *)v17 + 5) = 0;
        *((void *)v17 + 2) = 0;
        *((void *)v17 + 3) = 0;
        *((_DWORD *)v17 + 8) = 0;
        *(void *)std::string buf = v17;
        *(void *)unint64_t v64 = v9;
        if (v9)
        {
          xpc_retain(v9);
          xpc_object_t v27 = v9;
        }
        else
        {
          xpc_object_t v27 = xpc_null_create();
          *(void *)unint64_t v64 = v27;
        }
        int v49 = StatsAWD::fillMetric_sync(a1, (int **)buf, v64);
        xpc_release(v27);
        if (v49)
        {
          if (v17[44])
          {
            uint64_t v51 = *((void *)v17 + 1);
          }
          else
          {
            uint64_t v51 = wis::getWISTimestamp(v50);
            *((_DWORD *)v17 + 11) |= 1u;
            *((void *)v17 + 1) = v51;
          }
          wis::MetricContainer::storeMetric(v61, v51, *(unsigned int *)v61, (const wireless_diagnostics::google::protobuf::MessageLite *)v17);
        }
        break;
      case 524384:
        xpc_object_t v9 = *a3;
        if (*a3) {
          xpc_retain(*a3);
        }
        else {
          xpc_object_t v9 = xpc_null_create();
        }
        uint64_t v17 = (char *)operator new(0x30uLL);
        *(void *)uint64_t v17 = &unk_1F20FAB10;
        *((void *)v17 + 1) = 0;
        *((void *)v17 + 4) = 0;
        *((_DWORD *)v17 + 10) = 0;
        *((void *)v17 + 2) = 0;
        *(void *)(v17 + 21) = 0;
        *(void *)std::string buf = v17;
        *(void *)unint64_t v64 = v9;
        if (v9)
        {
          xpc_retain(v9);
          xpc_object_t v20 = v9;
        }
        else
        {
          xpc_object_t v20 = xpc_null_create();
          *(void *)unint64_t v64 = v20;
        }
        int v33 = StatsAWD::fillMetric_sync(a1, (uint64_t *)buf, v64);
        xpc_release(v20);
        if (v33)
        {
          if (v17[40])
          {
            uint64_t v35 = *((void *)v17 + 1);
          }
          else
          {
            uint64_t v35 = wis::getWISTimestamp(v34);
            *((_DWORD *)v17 + 10) |= 1u;
            *((void *)v17 + 1) = v35;
          }
          wis::MetricContainer::storeMetric(v61, v35, *(unsigned int *)v61, (const wireless_diagnostics::google::protobuf::MessageLite *)v17);
        }
        break;
      default:
LABEL_32:
        uint64_t v15 = *(NSObject **)(a1 + 40);
        if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)std::string buf = 67109120;
          *(_DWORD *)&uint8_t buf[4] = a2;
          _os_log_error_impl(&dword_1C5767000, v15, OS_LOG_TYPE_ERROR, "Failed to setup metric id (0x%x)", buf, 8u);
        }
        wis::MetricContainer::~MetricContainer(v8);
        goto LABEL_133;
    }
  }
  else
  {
    switch(a2)
    {
      case 524464:
        xpc_object_t v9 = *a3;
        if (*a3) {
          xpc_retain(*a3);
        }
        else {
          xpc_object_t v9 = xpc_null_create();
        }
        uint64_t v17 = (char *)operator new(0x28uLL);
        *(void *)uint64_t v17 = &unk_1F20FBEA8;
        *((void *)v17 + 1) = 0;
        uint64_t v18 = MEMORY[0x1E4FBA920];
        *((void *)v17 + 2) = 0;
        *((void *)v17 + 3) = v18;
        *((void *)v17 + 4) = 0;
        *(void *)std::string buf = v17;
        *(void *)unint64_t v64 = v9;
        if (v9)
        {
          xpc_retain(v9);
          xpc_object_t v19 = v9;
        }
        else
        {
          xpc_object_t v19 = xpc_null_create();
          *(void *)unint64_t v64 = v19;
        }
        int v30 = StatsAWD::fillMetric_sync(a1, (uint64_t *)buf, v64);
        xpc_release(v19);
        if (v30)
        {
          if (v17[36])
          {
            uint64_t v32 = *((void *)v17 + 1);
          }
          else
          {
            uint64_t v32 = wis::getWISTimestamp(v31);
            *((_DWORD *)v17 + 9) |= 1u;
            *((void *)v17 + 1) = v32;
          }
          wis::MetricContainer::storeMetric(v61, v32, *(unsigned int *)v61, (const wireless_diagnostics::google::protobuf::MessageLite *)v17);
        }
        break;
      case 524465:
        xpc_object_t v9 = *a3;
        if (*a3) {
          xpc_retain(*a3);
        }
        else {
          xpc_object_t v9 = xpc_null_create();
        }
        uint64_t v17 = (char *)operator new(0x28uLL);
        *((void *)v17 + 1) = 0;
        *(void *)uint64_t v17 = &unk_1F20FBF20;
        *((void *)v17 + 2) = 0;
        *((void *)v17 + 3) = 0;
        *((_DWORD *)v17 + 8) = 0;
        *(void *)std::string buf = v17;
        *(void *)unint64_t v64 = v9;
        if (v9)
        {
          xpc_retain(v9);
          xpc_object_t v23 = v9;
        }
        else
        {
          xpc_object_t v23 = xpc_null_create();
          *(void *)unint64_t v64 = v23;
        }
        int v40 = StatsAWD::fillMetric_sync(a1, (uint64_t *)buf, v64);
        xpc_release(v23);
        if (v40)
        {
          if (v17[32])
          {
            uint64_t v42 = *((void *)v17 + 1);
          }
          else
          {
            uint64_t v42 = wis::getWISTimestamp(v41);
            *((_DWORD *)v17 + 8) |= 1u;
            *((void *)v17 + 1) = v42;
          }
          wis::MetricContainer::storeMetric(v61, v42, *(unsigned int *)v61, (const wireless_diagnostics::google::protobuf::MessageLite *)v17);
        }
        break;
      case 524466:
        xpc_object_t v9 = *a3;
        if (*a3) {
          xpc_retain(*a3);
        }
        else {
          xpc_object_t v9 = xpc_null_create();
        }
        uint64_t v17 = (char *)operator new(0x50uLL);
        *(void *)uint64_t v17 = &unk_1F20FBF98;
        *(_OWORD *)(v17 + 8) = 0u;
        *((void *)v17 + 8) = 0;
        *((_DWORD *)v17 + 18) = 0;
        *(_OWORD *)(v17 + 24) = 0u;
        *(_OWORD *)(v17 + 40) = 0u;
        *((_DWORD *)v17 + 14) = 0;
        *(void *)std::string buf = v17;
        *(void *)unint64_t v64 = v9;
        if (v9)
        {
          xpc_retain(v9);
          xpc_object_t v24 = v9;
        }
        else
        {
          xpc_object_t v24 = xpc_null_create();
          *(void *)unint64_t v64 = v24;
        }
        int v43 = StatsAWD::fillMetric_sync(a1, (int **)buf, (void **)v64);
        xpc_release(v24);
        if (v43)
        {
          if (v17[72])
          {
            uint64_t v45 = *((void *)v17 + 1);
          }
          else
          {
            uint64_t v45 = wis::getWISTimestamp(v44);
            *((_DWORD *)v17 + 18) |= 1u;
            *((void *)v17 + 1) = v45;
          }
          wis::MetricContainer::storeMetric(v61, v45, *(unsigned int *)v61, (const wireless_diagnostics::google::protobuf::MessageLite *)v17);
        }
        break;
      case 524467:
        xpc_object_t v9 = *a3;
        if (*a3) {
          xpc_retain(*a3);
        }
        else {
          xpc_object_t v9 = xpc_null_create();
        }
        uint64_t v17 = (char *)operator new(0x68uLL);
        *(void *)uint64_t v17 = &unk_1F20FC010;
        *((void *)v17 + 1) = 0;
        uint64_t v25 = MEMORY[0x1E4FBA920];
        *((_WORD *)v17 + 26) = 0;
        *((void *)v17 + 2) = v25;
        *((void *)v17 + 3) = v25;
        *((_DWORD *)v17 + 12) = 0;
        *((void *)v17 + 4) = v25;
        *((void *)v17 + 5) = v25;
        *((void *)v17 + 7) = v25;
        *((void *)v17 + 8) = v25;
        *((void *)v17 + 9) = v25;
        *((void *)v17 + 10) = 0;
        *((void *)v17 + 11) = 0;
        *((_DWORD *)v17 + 24) = 0;
        *(void *)std::string buf = v17;
        *(void *)unint64_t v64 = v9;
        if (v9)
        {
          xpc_retain(v9);
          xpc_object_t v26 = v9;
        }
        else
        {
          xpc_object_t v26 = xpc_null_create();
          *(void *)unint64_t v64 = v26;
        }
        BOOL v46 = StatsAWD::fillMetric_sync(a1, (uint64_t *)buf, v64);
        xpc_release(v26);
        if (v46)
        {
          if (v17[96])
          {
            uint64_t v48 = *((void *)v17 + 1);
          }
          else
          {
            uint64_t v48 = wis::getWISTimestamp(v47);
            *((_DWORD *)v17 + 24) |= 1u;
            *((void *)v17 + 1) = v48;
          }
          wis::MetricContainer::storeMetric(v61, v48, *(unsigned int *)v61, (const wireless_diagnostics::google::protobuf::MessageLite *)v17);
        }
        break;
      default:
        if (a2 == 524539)
        {
          xpc_object_t v9 = *a3;
          if (*a3) {
            xpc_retain(*a3);
          }
          else {
            xpc_object_t v9 = xpc_null_create();
          }
          uint64_t v17 = (char *)operator new(0x28uLL);
          *(void *)uint64_t v17 = &unk_1F20FAC78;
          *((void *)v17 + 1) = 0;
          uint64_t v28 = MEMORY[0x1E4FBA920];
          *((void *)v17 + 2) = MEMORY[0x1E4FBA920];
          *((void *)v17 + 3) = v28;
          *((void *)v17 + 4) = 0;
          *(void *)std::string buf = v17;
          *(void *)unint64_t v64 = v9;
          if (v9)
          {
            xpc_retain(v9);
            xpc_object_t v29 = v9;
          }
          else
          {
            xpc_object_t v29 = xpc_null_create();
            *(void *)unint64_t v64 = v29;
          }
          int v52 = StatsAWD::fillMetric_sync(a1, (uint64_t *)buf, v64);
          xpc_release(v29);
          if (v52)
          {
            if (v17[36])
            {
              uint64_t v54 = *((void *)v17 + 1);
            }
            else
            {
              uint64_t v54 = wis::getWISTimestamp(v53);
              *((_DWORD *)v17 + 9) |= 1u;
              *((void *)v17 + 1) = v54;
            }
            wis::MetricContainer::storeMetric(v61, v54, *(unsigned int *)v61, (const wireless_diagnostics::google::protobuf::MessageLite *)v17);
          }
        }
        else
        {
          if (a2 != 524584) {
            goto LABEL_32;
          }
          xpc_object_t v9 = *a3;
          if (*a3) {
            xpc_retain(*a3);
          }
          else {
            xpc_object_t v9 = xpc_null_create();
          }
          uint64_t v17 = (char *)operator new(0x20uLL);
          *(void *)uint64_t v17 = &unk_1F20FAD68;
          *((void *)v17 + 1) = 0;
          *((void *)v17 + 2) = 0;
          *((void *)v17 + 3) = 0;
          *(void *)std::string buf = v17;
          *(void *)unint64_t v64 = v9;
          if (v9)
          {
            xpc_retain(v9);
            xpc_object_t v21 = v9;
          }
          else
          {
            xpc_object_t v21 = xpc_null_create();
            *(void *)unint64_t v64 = v21;
          }
          int v36 = StatsAWD::fillMetric_sync(a1, (uint64_t *)buf, v64);
          xpc_release(v21);
          if (v36)
          {
            if (v17[28])
            {
              uint64_t v38 = *((void *)v17 + 1);
            }
            else
            {
              uint64_t v38 = wis::getWISTimestamp(v37);
              *((_DWORD *)v17 + 7) |= 1u;
              *((void *)v17 + 1) = v38;
            }
            wis::MetricContainer::storeMetric(v61, v38, *(unsigned int *)v61, (const wireless_diagnostics::google::protobuf::MessageLite *)v17);
          }
        }
        break;
    }
  }
  (*(void (**)(char *))(*(void *)v17 + 8))(v17);
  xpc_release(v9);
  int v58 = wis::WISServerConnection::SubmitMetric(*(wis::WISServerConnection **)(a1 + 104), v61);
  uint64_t v59 = *(NSObject **)(a1 + 40);
  if (!v58)
  {
    if (!os_log_type_enabled(v59, OS_LOG_TYPE_ERROR)) {
      return;
    }
    *(_DWORD *)std::string buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = a2;
    xpc_object_t v11 = "Failed to submit metric id (0x%x)";
    uint64_t v12 = v59;
    uint32_t v13 = 8;
LABEL_137:
    _os_log_error_impl(&dword_1C5767000, v12, OS_LOG_TYPE_ERROR, v11, buf, v13);
    return;
  }
  if (os_log_type_enabled(v59, OS_LOG_TYPE_DEFAULT))
  {
    xpc::object::to_string((uint64_t *)buf, (xpc::object *)a3);
    unint64_t v60 = v63 >= 0 ? buf : *(uint8_t **)buf;
    *(_DWORD *)unint64_t v64 = 67109378;
    *(_DWORD *)&v64[4] = a2;
    __int16 v65 = 2082;
    int v66 = v60;
    _os_log_impl(&dword_1C5767000, v59, OS_LOG_TYPE_DEFAULT, "#I Submitted AWD metric (0x%x) with data: %{public}s", v64, 0x12u);
    if (v63 < 0)
    {
      unint64_t v16 = *(void **)buf;
LABEL_133:
      operator delete(v16);
    }
  }
}

void sub_1C582B508(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  xpc_release(v2);
  std::unique_ptr<wis::MetricContainer>::~unique_ptr[abi:ne180100]((wis::MetricContainer **)va);
  _Unwind_Resume(a1);
}

wis::MetricContainer **std::unique_ptr<wis::MetricContainer>::~unique_ptr[abi:ne180100](wis::MetricContainer **a1)
{
  long long v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    wis::MetricContainer::~MetricContainer(v2);
    operator delete(v3);
  }
  return a1;
}

uint64_t StatsAWD::fillMetric_sync(uint64_t a1, uint64_t *a2, void *a3)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  xpc_object_t v5 = (xpc_object_t)*a3;
  uint64_t v6 = MEMORY[0x1E4F14590];
  if (*a3 && MEMORY[0x1C8792D30](*a3) == v6) {
    xpc_retain(v5);
  }
  else {
    xpc_object_t v5 = xpc_null_create();
  }
  if (MEMORY[0x1C8792D30](v5) != v6)
  {
    uint64_t v7 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      LOWORD(object[0]) = 0;
      _os_log_error_impl(&dword_1C5767000, v7, OS_LOG_TYPE_ERROR, "Failed: Expected data needs to be dictionary in boot time handling", (uint8_t *)object, 2u);
    }
    goto LABEL_14;
  }
  long long v8 = (const char *)*MEMORY[0x1E4F4C3B0];
  if (!xpc_dictionary_get_value(v5, (const char *)*MEMORY[0x1E4F4C3B0])
    || (xpc_object_t v9 = (const char *)*MEMORY[0x1E4F4C478], !xpc_dictionary_get_value(v5, (const char *)*MEMORY[0x1E4F4C478]))
    || (uint64_t v10 = (const char *)*MEMORY[0x1E4F4C3B8], !xpc_dictionary_get_value(v5, (const char *)*MEMORY[0x1E4F4C3B8])))
  {
    uint32_t v13 = *(NSObject **)(a1 + 40);
    if (!os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
LABEL_14:
      uint64_t v14 = 0;
      goto LABEL_15;
    }
    xpc_object_t v23 = (char *)MEMORY[0x1C8792C60](v5);
    memset(object, 170, 24);
    size_t v24 = strlen(v23);
    if (v24 >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    uint64_t v25 = (void *)v24;
    if (v24 >= 0x17)
    {
      uint64_t v27 = (v24 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v24 | 7) != 0x17) {
        uint64_t v27 = v24 | 7;
      }
      uint64_t v28 = v27 + 1;
      xpc_object_t v26 = operator new(v27 + 1);
      object[1] = v25;
      object[2] = (xpc_object_t)(v28 | 0x8000000000000000);
      object[0] = v26;
    }
    else
    {
      HIBYTE(object[2]) = v24;
      xpc_object_t v26 = object;
      if (!v24) {
        goto LABEL_32;
      }
    }
    memcpy(v26, v23, (size_t)v25);
LABEL_32:
    *((unsigned char *)v25 + (void)v26) = 0;
    free(v23);
    xpc_object_t v29 = object;
    if (SHIBYTE(object[2]) < 0) {
      xpc_object_t v29 = (xpc_object_t *)object[0];
    }
    *(_DWORD *)std::string buf = 136315138;
    uint64_t v32 = v29;
    _os_log_error_impl(&dword_1C5767000, v13, OS_LOG_TYPE_ERROR, "Failed: One of elements of boot time is missing: %s", buf, 0xCu);
    if (SHIBYTE(object[2]) < 0) {
      operator delete(object[0]);
    }
    goto LABEL_14;
  }
  uint64_t v11 = *a2;
  xpc_object_t value = xpc_dictionary_get_value(v5, v8);
  object[0] = value;
  if (value) {
    xpc_retain(value);
  }
  else {
    object[0] = xpc_null_create();
  }
  int v16 = xpc::dyn_cast_or_default((xpc *)object, 0);
  *(_DWORD *)(v11 + 40) |= 4u;
  *(_DWORD *)(v11 + 24) = v16;
  xpc_release(object[0]);
  uint64_t v17 = *a2;
  xpc_object_t v18 = xpc_dictionary_get_value(v5, v9);
  object[0] = v18;
  if (v18) {
    xpc_retain(v18);
  }
  else {
    object[0] = xpc_null_create();
  }
  int v19 = xpc::dyn_cast_or_default((xpc *)object, 0);
  *(_DWORD *)(v17 + 40) |= 2u;
  *(void *)(v17 + 16) = v19;
  xpc_release(object[0]);
  uint64_t v20 = *a2;
  xpc_object_t v21 = xpc_dictionary_get_value(v5, v10);
  object[0] = v21;
  if (v21) {
    xpc_retain(v21);
  }
  else {
    object[0] = xpc_null_create();
  }
  char v22 = xpc::dyn_cast_or_default((xpc *)object, 0);
  *(_DWORD *)(v20 + 40) |= 8u;
  *(unsigned char *)(v20 + 28) = v22;
  xpc_release(object[0]);
  uint64_t v14 = 1;
LABEL_15:
  xpc_release(v5);
  return v14;
}

{
  xpc_object_t v5;
  uint64_t v6;
  NSObject *v7;
  const char *v8;
  const char *v9;
  const char *v10;
  uint64_t v11;
  xpc_object_t value;
  NSObject *v13;
  uint64_t v14;
  int v16;
  uint64_t v17;
  xpc_object_t v18;
  int v19;
  uint64_t v20;
  xpc_object_t v21;
  const char *v22;
  xpc_object_t *v23;
  void *v24;
  long long v25;
  xpc_object_t *v26;
  xpc_object_t v27;
  char *v28;
  size_t v29;
  void *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  xpc_object_t *v34;
  xpc_object_t object[4];
  unsigned char v36[24];
  uint64_t v37;

  dispatch_object_t v37 = *MEMORY[0x1E4F143B8];
  xpc_object_t v5 = (xpc_object_t)*a3;
  uint64_t v6 = MEMORY[0x1E4F14590];
  if (*a3 && MEMORY[0x1C8792D30](*a3) == v6) {
    xpc_retain(v5);
  }
  else {
    xpc_object_t v5 = xpc_null_create();
  }
  if (MEMORY[0x1C8792D30](v5) != v6)
  {
    uint64_t v7 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      LOWORD(object[0]) = 0;
      _os_log_error_impl(&dword_1C5767000, v7, OS_LOG_TYPE_ERROR, "Failed: Expected data needs to be dictionary in low power event handling", (uint8_t *)object, 2u);
    }
    goto LABEL_14;
  }
  long long v8 = (const char *)*MEMORY[0x1E4F4C668];
  if (!xpc_dictionary_get_value(v5, (const char *)*MEMORY[0x1E4F4C668])
    || (xpc_object_t v9 = (const char *)*MEMORY[0x1E4F4C678], !xpc_dictionary_get_value(v5, (const char *)*MEMORY[0x1E4F4C678]))
    || (uint64_t v10 = (const char *)*MEMORY[0x1E4F4C3C0], !xpc_dictionary_get_value(v5, (const char *)*MEMORY[0x1E4F4C3C0])))
  {
    uint32_t v13 = *(NSObject **)(a1 + 40);
    if (!os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
LABEL_14:
      uint64_t v14 = 0;
      goto LABEL_15;
    }
    uint64_t v28 = (char *)MEMORY[0x1C8792C60](v5);
    memset(object, 170, 24);
    xpc_object_t v29 = strlen(v28);
    if (v29 >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    int v30 = (void *)v29;
    if (v29 >= 0x17)
    {
      uint64_t v32 = (v29 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v29 | 7) != 0x17) {
        uint64_t v32 = v29 | 7;
      }
      uint64_t v33 = v32 + 1;
      xpc_object_t v31 = operator new(v32 + 1);
      object[1] = v30;
      object[2] = (xpc_object_t)(v33 | 0x8000000000000000);
      object[0] = v31;
    }
    else
    {
      HIBYTE(object[2]) = v29;
      xpc_object_t v31 = object;
      if (!v29) {
        goto LABEL_48;
      }
    }
    memcpy(v31, v28, (size_t)v30);
LABEL_48:
    *((unsigned char *)v30 + (void)v31) = 0;
    free(v28);
    uint64_t v34 = object;
    if (SHIBYTE(object[2]) < 0) {
      uint64_t v34 = (xpc_object_t *)object[0];
    }
    *(_DWORD *)int v36 = 136315138;
    *(void *)&v36[4] = v34;
    _os_log_error_impl(&dword_1C5767000, v13, OS_LOG_TYPE_ERROR, "Failed: One of elements of low power event is missing: %s", v36, 0xCu);
    if (SHIBYTE(object[2]) < 0) {
      operator delete(object[0]);
    }
    goto LABEL_14;
  }
  uint64_t v11 = *a2;
  xpc_object_t value = xpc_dictionary_get_value(v5, v8);
  object[0] = value;
  if (value) {
    xpc_retain(value);
  }
  else {
    object[0] = xpc_null_create();
  }
  int v16 = xpc::dyn_cast_or_default((xpc *)object, 0);
  *(_DWORD *)(v11 + 36) |= 2u;
  *(_DWORD *)(v11 + 16) = v16;
  xpc_release(object[0]);
  uint64_t v17 = *a2;
  xpc_object_t v18 = xpc_dictionary_get_value(v5, v9);
  object[0] = v18;
  if (v18) {
    xpc_retain(v18);
  }
  else {
    object[0] = xpc_null_create();
  }
  int v19 = xpc::dyn_cast_or_default((xpc *)object, 0);
  *(_DWORD *)(v17 + 36) |= 4u;
  *(_DWORD *)(v17 + 20) = v19;
  xpc_release(object[0]);
  uint64_t v20 = *a2;
  xpc_object_t v21 = xpc_dictionary_get_value(v5, v10);
  *(void *)int v36 = v21;
  if (v21) {
    xpc_retain(v21);
  }
  else {
    *(void *)int v36 = xpc_null_create();
  }
  xpc::dyn_cast_or_default((uint64_t *)object, (xpc *)v36, (const object *)"", v22);
  *(_DWORD *)(v20 + 36) |= 8u;
  xpc_object_t v23 = *(xpc_object_t **)(v20 + 24);
  if (v23 == (xpc_object_t *)MEMORY[0x1E4FBA920])
  {
    xpc_object_t v23 = (xpc_object_t *)operator new(0x18uLL);
    *xpc_object_t v23 = 0;
    v23[1] = 0;
    v23[2] = 0;
    *(void *)(v20 + 24) = v23;
    size_t v24 = (void *)HIBYTE(object[2]);
    if ((*((char *)v23 + 23) & 0x80000000) == 0)
    {
LABEL_26:
      if ((v24 & 0x80) != 0)
      {
        std::string::__assign_no_alias<true>(v23, object[0], (size_t)object[1]);
      }
      else
      {
        uint64_t v25 = *(_OWORD *)object;
        v23[2] = object[2];
        *(_OWORD *)xpc_object_t v23 = v25;
      }
      goto LABEL_41;
    }
LABEL_29:
    if ((char)v24 >= 0) {
      xpc_object_t v26 = object;
    }
    else {
      xpc_object_t v26 = (xpc_object_t *)object[0];
    }
    if ((char)v24 >= 0) {
      uint64_t v27 = v24;
    }
    else {
      uint64_t v27 = object[1];
    }
    std::string::__assign_no_alias<false>(v23, v26, (size_t)v27);
    goto LABEL_41;
  }
  if (v23 != object)
  {
    size_t v24 = (void *)HIBYTE(object[2]);
    if ((*((char *)v23 + 23) & 0x80000000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_29;
  }
LABEL_41:
  if (SHIBYTE(object[2]) < 0) {
    operator delete(object[0]);
  }
  xpc_release(*(xpc_object_t *)v36);
  uint64_t v14 = 1;
LABEL_15:
  xpc_release(v5);
  return v14;
}

{
  xpc_object_t v5;
  uint64_t v6;
  NSObject *v7;
  const char *v8;
  const char *v9;
  const char *v10;
  uint64_t v11;
  xpc_object_t value;
  NSObject *v13;
  uint64_t v14;
  int v16;
  uint64_t v17;
  xpc_object_t v18;
  int v19;
  uint64_t v20;
  xpc_object_t v21;
  int v22;
  char *v23;
  size_t v24;
  void *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  xpc_object_t *v29;
  xpc_object_t object[4];
  uint8_t buf[4];
  xpc_object_t *v32;
  uint64_t v33;

  uint64_t v33 = *MEMORY[0x1E4F143B8];
  xpc_object_t v5 = (xpc_object_t)*a3;
  uint64_t v6 = MEMORY[0x1E4F14590];
  if (*a3 && MEMORY[0x1C8792D30](*a3) == v6) {
    xpc_retain(v5);
  }
  else {
    xpc_object_t v5 = xpc_null_create();
  }
  if (MEMORY[0x1C8792D30](v5) != v6)
  {
    uint64_t v7 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      LOWORD(object[0]) = 0;
      _os_log_error_impl(&dword_1C5767000, v7, OS_LOG_TYPE_ERROR, "Failed: Expected data needs to be dictionary in wake info handling", (uint8_t *)object, 2u);
    }
    goto LABEL_14;
  }
  long long v8 = (const char *)*MEMORY[0x1E4F4CB28];
  if (!xpc_dictionary_get_value(v5, (const char *)*MEMORY[0x1E4F4CB28])
    || (xpc_object_t v9 = (const char *)*MEMORY[0x1E4F4CF00], !xpc_dictionary_get_value(v5, (const char *)*MEMORY[0x1E4F4CF00]))
    || (uint64_t v10 = (const char *)*MEMORY[0x1E4F4CE00], !xpc_dictionary_get_value(v5, (const char *)*MEMORY[0x1E4F4CE00])))
  {
    uint32_t v13 = *(NSObject **)(a1 + 40);
    if (!os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
LABEL_14:
      uint64_t v14 = 0;
      goto LABEL_15;
    }
    xpc_object_t v23 = (char *)MEMORY[0x1C8792C60](v5);
    memset(object, 170, 24);
    size_t v24 = strlen(v23);
    if (v24 >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    uint64_t v25 = (void *)v24;
    if (v24 >= 0x17)
    {
      uint64_t v27 = (v24 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v24 | 7) != 0x17) {
        uint64_t v27 = v24 | 7;
      }
      uint64_t v28 = v27 + 1;
      xpc_object_t v26 = operator new(v27 + 1);
      object[1] = v25;
      object[2] = (xpc_object_t)(v28 | 0x8000000000000000);
      object[0] = v26;
    }
    else
    {
      HIBYTE(object[2]) = v24;
      xpc_object_t v26 = object;
      if (!v24) {
        goto LABEL_32;
      }
    }
    memcpy(v26, v23, (size_t)v25);
LABEL_32:
    *((unsigned char *)v25 + (void)v26) = 0;
    free(v23);
    xpc_object_t v29 = object;
    if (SHIBYTE(object[2]) < 0) {
      xpc_object_t v29 = (xpc_object_t *)object[0];
    }
    *(_DWORD *)std::string buf = 136315138;
    uint64_t v32 = v29;
    _os_log_error_impl(&dword_1C5767000, v13, OS_LOG_TYPE_ERROR, "Failed: One of elements of wake info is missing: %s", buf, 0xCu);
    if (SHIBYTE(object[2]) < 0) {
      operator delete(object[0]);
    }
    goto LABEL_14;
  }
  uint64_t v11 = *a2;
  xpc_object_t value = xpc_dictionary_get_value(v5, v8);
  object[0] = value;
  if (value) {
    xpc_retain(value);
  }
  else {
    object[0] = xpc_null_create();
  }
  int v16 = xpc::dyn_cast_or_default((xpc *)object, 0);
  *(_DWORD *)(v11 + 32) |= 2u;
  *(_DWORD *)(v11 + 16) = v16;
  xpc_release(object[0]);
  uint64_t v17 = *a2;
  xpc_object_t v18 = xpc_dictionary_get_value(v5, v9);
  object[0] = v18;
  if (v18) {
    xpc_retain(v18);
  }
  else {
    object[0] = xpc_null_create();
  }
  int v19 = xpc::dyn_cast_or_default((xpc *)object, 0);
  *(_DWORD *)(v17 + 32) |= 4u;
  *(_DWORD *)(v17 + 20) = v19;
  xpc_release(object[0]);
  uint64_t v20 = *a2;
  xpc_object_t v21 = xpc_dictionary_get_value(v5, v10);
  object[0] = v21;
  if (v21) {
    xpc_retain(v21);
  }
  else {
    object[0] = xpc_null_create();
  }
  char v22 = xpc::dyn_cast_or_default((xpc *)object, 0);
  *(_DWORD *)(v20 + 32) |= 8u;
  *(_DWORD *)(v20 + 24) = v22;
  xpc_release(object[0]);
  uint64_t v14 = 1;
LABEL_15:
  xpc_release(v5);
  return v14;
}

{
  xpc_object_t v5;
  uint64_t v6;
  NSObject *v7;
  const char *v8;
  const char *v9;
  uint64_t v10;
  xpc_object_t value;
  const char *v12;
  NSObject *v13;
  uint64_t v14;
  void **v16;
  void **v17;
  void *v18;
  long long v19;
  void **v20;
  void *v21;
  uint64_t v22;
  xpc_object_t v23;
  const char *v24;
  void **v25;
  void *v26;
  long long v27;
  void **v28;
  void *v29;
  char *v30;
  size_t v31;
  void *v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  void **v36;
  void *__p[4];
  unsigned char object[24];
  uint64_t v39;

  xpc_object_t v39 = *MEMORY[0x1E4F143B8];
  xpc_object_t v5 = (xpc_object_t)*a3;
  uint64_t v6 = MEMORY[0x1E4F14590];
  if (*a3 && MEMORY[0x1C8792D30](*a3) == v6) {
    xpc_retain(v5);
  }
  else {
    xpc_object_t v5 = xpc_null_create();
  }
  if (MEMORY[0x1C8792D30](v5) != v6)
  {
    uint64_t v7 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      LOWORD(__p[0]) = 0;
      _os_log_error_impl(&dword_1C5767000, v7, OS_LOG_TYPE_ERROR, "Failed: Expected data needs to be dictionary in bb trace handling", (uint8_t *)__p, 2u);
    }
    goto LABEL_13;
  }
  long long v8 = (const char *)*MEMORY[0x1E4F4C8C8];
  if (!xpc_dictionary_get_value(v5, (const char *)*MEMORY[0x1E4F4C8C8])
    || (xpc_object_t v9 = (const char *)*MEMORY[0x1E4F4CB30], !xpc_dictionary_get_value(v5, (const char *)*MEMORY[0x1E4F4CB30])))
  {
    uint32_t v13 = *(NSObject **)(a1 + 40);
    if (!os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
LABEL_13:
      uint64_t v14 = 0;
      goto LABEL_14;
    }
    int v30 = (char *)MEMORY[0x1C8792C60](v5);
    memset(__p, 170, 24);
    xpc_object_t v31 = strlen(v30);
    if (v31 >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    uint64_t v32 = (void *)v31;
    if (v31 >= 0x17)
    {
      uint64_t v34 = (v31 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v31 | 7) != 0x17) {
        uint64_t v34 = v31 | 7;
      }
      uint64_t v35 = v34 + 1;
      uint64_t v33 = operator new(v34 + 1);
      __p[1] = v32;
      __p[2] = (void *)(v35 | 0x8000000000000000);
      __p[0] = v33;
    }
    else
    {
      HIBYTE(__p[2]) = v31;
      uint64_t v33 = __p;
      if (!v31) {
        goto LABEL_60;
      }
    }
    memcpy(v33, v30, (size_t)v32);
LABEL_60:
    *((unsigned char *)v32 + (void)v33) = 0;
    free(v30);
    int v36 = __p;
    if (SHIBYTE(__p[2]) < 0) {
      int v36 = (void **)__p[0];
    }
    *(_DWORD *)dispatch_object_t object = 136315138;
    *(void *)&xpc_object_t object[4] = v36;
    _os_log_error_impl(&dword_1C5767000, v13, OS_LOG_TYPE_ERROR, "Failed: One of elements of bb trace is missing: %s", object, 0xCu);
    if (SHIBYTE(__p[2]) < 0) {
      operator delete(__p[0]);
    }
    goto LABEL_13;
  }
  uint64_t v10 = *a2;
  xpc_object_t value = xpc_dictionary_get_value(v5, v8);
  *(void *)dispatch_object_t object = value;
  if (value) {
    xpc_retain(value);
  }
  else {
    *(void *)dispatch_object_t object = xpc_null_create();
  }
  xpc::dyn_cast_or_default((uint64_t *)__p, (xpc *)object, (const object *)"", v12);
  *(_DWORD *)(v10 + 36) |= 2u;
  int v16 = *(void ***)(v10 + 16);
  uint64_t v17 = (void **)MEMORY[0x1E4FBA920];
  if (v16 == (void **)MEMORY[0x1E4FBA920])
  {
    int v16 = (void **)operator new(0x18uLL);
    *int v16 = 0;
    v16[1] = 0;
    uint64_t v16[2] = 0;
    *(void *)(v10 + 16) = v16;
    xpc_object_t v18 = (void *)HIBYTE(__p[2]);
    if ((*((char *)v16 + 23) & 0x80000000) == 0)
    {
LABEL_19:
      if ((v18 & 0x80) != 0)
      {
        std::string::__assign_no_alias<true>(v16, __p[0], (size_t)__p[1]);
      }
      else
      {
        int v19 = *(_OWORD *)__p;
        uint64_t v16[2] = __p[2];
        *(_OWORD *)int v16 = v19;
      }
      goto LABEL_30;
    }
  }
  else
  {
    if (v16 == __p) {
      goto LABEL_30;
    }
    xpc_object_t v18 = (void *)HIBYTE(__p[2]);
    if ((*((char *)v16 + 23) & 0x80000000) == 0) {
      goto LABEL_19;
    }
  }
  if ((char)v18 >= 0) {
    uint64_t v20 = __p;
  }
  else {
    uint64_t v20 = (void **)__p[0];
  }
  if ((char)v18 >= 0) {
    xpc_object_t v21 = v18;
  }
  else {
    xpc_object_t v21 = __p[1];
  }
  std::string::__assign_no_alias<false>(v16, v20, (size_t)v21);
LABEL_30:
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  xpc_release(*(xpc_object_t *)object);
  char v22 = *a2;
  xpc_object_t v23 = xpc_dictionary_get_value(v5, v9);
  *(void *)dispatch_object_t object = v23;
  if (v23) {
    xpc_retain(v23);
  }
  else {
    *(void *)dispatch_object_t object = xpc_null_create();
  }
  xpc::dyn_cast_or_default((uint64_t *)__p, (xpc *)object, (const object *)"", v24);
  *(_DWORD *)(v22 + 36) |= 4u;
  uint64_t v25 = *(void ***)(v22 + 24);
  if (v25 == v17)
  {
    uint64_t v25 = (void **)operator new(0x18uLL);
    void *v25 = 0;
    v25[1] = 0;
    v25[2] = 0;
    *(void *)(v22 + 24) = v25;
    xpc_object_t v26 = (void *)HIBYTE(__p[2]);
    if ((*((char *)v25 + 23) & 0x80000000) == 0)
    {
LABEL_38:
      if ((v26 & 0x80) != 0)
      {
        std::string::__assign_no_alias<true>(v25, __p[0], (size_t)__p[1]);
      }
      else
      {
        uint64_t v27 = *(_OWORD *)__p;
        v25[2] = __p[2];
        *(_OWORD *)uint64_t v25 = v27;
      }
      goto LABEL_49;
    }
LABEL_41:
    if ((char)v26 >= 0) {
      uint64_t v28 = __p;
    }
    else {
      uint64_t v28 = (void **)__p[0];
    }
    if ((char)v26 >= 0) {
      xpc_object_t v29 = v26;
    }
    else {
      xpc_object_t v29 = __p[1];
    }
    std::string::__assign_no_alias<false>(v25, v28, (size_t)v29);
    goto LABEL_49;
  }
  if (v25 != __p)
  {
    xpc_object_t v26 = (void *)HIBYTE(__p[2]);
    if ((*((char *)v25 + 23) & 0x80000000) == 0) {
      goto LABEL_38;
    }
    goto LABEL_41;
  }
LABEL_49:
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  xpc_release(*(xpc_object_t *)object);
  uint64_t v14 = 1;
LABEL_14:
  xpc_release(v5);
  return v14;
}

{
  xpc_object_t v5;
  uint64_t v6;
  NSObject *v7;
  const char *v8;
  const char *v9;
  uint64_t v10;
  xpc_object_t value;
  NSObject *v12;
  uint64_t v13;
  int v15;
  uint64_t v16;
  xpc_object_t v17;
  int v18;
  char *v19;
  size_t v20;
  void *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  xpc_object_t *v25;
  xpc_object_t object[4];
  uint8_t buf[4];
  xpc_object_t *v28;
  uint64_t v29;

  xpc_object_t v29 = *MEMORY[0x1E4F143B8];
  xpc_object_t v5 = (xpc_object_t)*a3;
  uint64_t v6 = MEMORY[0x1E4F14590];
  if (*a3 && MEMORY[0x1C8792D30](*a3) == v6) {
    xpc_retain(v5);
  }
  else {
    xpc_object_t v5 = xpc_null_create();
  }
  if (MEMORY[0x1C8792D30](v5) != v6)
  {
    uint64_t v7 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      LOWORD(object[0]) = 0;
      _os_log_error_impl(&dword_1C5767000, v7, OS_LOG_TYPE_ERROR, "Failed: Expected data needs to be dictionary in Accessory Information reporting.", (uint8_t *)object, 2u);
    }
    goto LABEL_13;
  }
  long long v8 = (const char *)*MEMORY[0x1E4F4C528];
  if (!xpc_dictionary_get_value(v5, (const char *)*MEMORY[0x1E4F4C528])
    || (xpc_object_t v9 = (const char *)*MEMORY[0x1E4F4C650], !xpc_dictionary_get_value(v5, (const char *)*MEMORY[0x1E4F4C650])))
  {
    uint64_t v12 = *(NSObject **)(a1 + 40);
    if (!os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
LABEL_13:
      uint32_t v13 = 0;
      goto LABEL_14;
    }
    int v19 = (char *)MEMORY[0x1C8792C60](v5);
    memset(object, 170, 24);
    uint64_t v20 = strlen(v19);
    if (v20 >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    xpc_object_t v21 = (void *)v20;
    if (v20 >= 0x17)
    {
      xpc_object_t v23 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v20 | 7) != 0x17) {
        xpc_object_t v23 = v20 | 7;
      }
      size_t v24 = v23 + 1;
      char v22 = operator new(v23 + 1);
      object[1] = v21;
      object[2] = (xpc_object_t)(v24 | 0x8000000000000000);
      object[0] = v22;
    }
    else
    {
      HIBYTE(object[2]) = v20;
      char v22 = object;
      if (!v20) {
        goto LABEL_28;
      }
    }
    memcpy(v22, v19, (size_t)v21);
LABEL_28:
    *((unsigned char *)v21 + (void)v22) = 0;
    free(v19);
    uint64_t v25 = object;
    if (SHIBYTE(object[2]) < 0) {
      uint64_t v25 = (xpc_object_t *)object[0];
    }
    *(_DWORD *)std::string buf = 136315138;
    uint64_t v28 = v25;
    _os_log_error_impl(&dword_1C5767000, v12, OS_LOG_TYPE_ERROR, "Failed: One of elements is missing in Accessory Information reporting: %s", buf, 0xCu);
    if (SHIBYTE(object[2]) < 0) {
      operator delete(object[0]);
    }
    goto LABEL_13;
  }
  uint64_t v10 = *a2;
  xpc_object_t value = xpc_dictionary_get_value(v5, v8);
  object[0] = value;
  if (value) {
    xpc_retain(value);
  }
  else {
    object[0] = xpc_null_create();
  }
  uint64_t v15 = xpc::dyn_cast_or_default((xpc *)object, 0);
  *(_DWORD *)(v10 + 28) |= 2u;
  *(_DWORD *)(v10 + 16) = v15;
  xpc_release(object[0]);
  int v16 = *a2;
  uint64_t v17 = xpc_dictionary_get_value(v5, v9);
  object[0] = v17;
  if (v17) {
    xpc_retain(v17);
  }
  else {
    object[0] = xpc_null_create();
  }
  xpc_object_t v18 = xpc::dyn_cast_or_default((xpc *)object, 0);
  *(_DWORD *)(v16 + 28) |= 4u;
  *(_DWORD *)(v16 + 20) = v18;
  xpc_release(object[0]);
  uint32_t v13 = 1;
LABEL_14:
  xpc_release(v5);
  return v13;
}

void sub_1C582BC68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

xpc_object_t xpc::dict::object_proxy::operator xpc::object@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  xpc_object_t value = xpc_dictionary_get_value(**(xpc_object_t **)a1, *(const char **)(a1 + 8));
  *a2 = value;
  if (value) {
    return xpc_retain(value);
  }
  xpc_object_t result = xpc_null_create();
  *a2 = result;
  return result;
}

BOOL StatsAWD::fillMetric_sync(uint64_t a1, uint64_t *a2, void *a3)
{
  xpc_object_t v5 = (xpc_object_t)*a3;
  uint64_t v6 = MEMORY[0x1E4F14590];
  if (*a3 && MEMORY[0x1C8792D30](*a3) == v6) {
    xpc_retain(v5);
  }
  else {
    xpc_object_t v5 = xpc_null_create();
  }
  uint64_t v7 = MEMORY[0x1C8792D30](v5);
  if (v7 != v6)
  {
    long long v8 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_error_impl(&dword_1C5767000, v8, OS_LOG_TYPE_ERROR, "Invalid AWD Wake Reason Info dictionary", buf, 2u);
    }
    goto LABEL_160;
  }
  uint64_t v9 = *a2;
  xpc_object_t value = xpc_dictionary_get_value(v5, (const char *)*MEMORY[0x1E4F4D100]);
  xpc_object_t object = value;
  if (value) {
    xpc_retain(value);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  xpc::dyn_cast_or_default((uint64_t *)buf, (xpc *)&object, (const object *)"Unknown", v11);
  *(_DWORD *)(v9 + 96) |= 2u;
  uint64_t v12 = *(uint8_t **)(v9 + 16);
  uint32_t v13 = (uint8_t *)MEMORY[0x1E4FBA920];
  if (v12 == (uint8_t *)MEMORY[0x1E4FBA920])
  {
    uint64_t v12 = (uint8_t *)operator new(0x18uLL);
    *(void *)uint64_t v12 = 0;
    *((void *)v12 + 1) = 0;
    *((void *)v12 + 2) = 0;
    *(void *)(v9 + 16) = v12;
    size_t v14 = HIBYTE(v87);
    if (((char)v12[23] & 0x80000000) == 0)
    {
LABEL_14:
      if ((v14 & 0x80) != 0)
      {
        std::string::__assign_no_alias<true>(v12, *(void **)buf, *(size_t *)&buf[8]);
      }
      else
      {
        long long v15 = *(_OWORD *)buf;
        *((void *)v12 + 2) = v87;
        *(_OWORD *)uint64_t v12 = v15;
      }
      goto LABEL_25;
    }
  }
  else
  {
    if (v12 == buf) {
      goto LABEL_25;
    }
    size_t v14 = HIBYTE(v87);
    if (((char)v12[23] & 0x80000000) == 0) {
      goto LABEL_14;
    }
  }
  if ((v14 & 0x80u) == 0) {
    int v16 = buf;
  }
  else {
    int v16 = *(uint8_t **)buf;
  }
  if ((v14 & 0x80u) == 0) {
    size_t v17 = v14;
  }
  else {
    size_t v17 = *(void *)&buf[8];
  }
  std::string::__assign_no_alias<false>((void **)v12, v16, v17);
LABEL_25:
  if (SHIBYTE(v87) < 0) {
    operator delete(*(void **)buf);
  }
  xpc_release(object);
  uint64_t v18 = *a2;
  xpc_object_t v19 = xpc_dictionary_get_value(v5, (const char *)*MEMORY[0x1E4F4CFE8]);
  *(void *)std::string buf = v19;
  if (v19) {
    xpc_retain(v19);
  }
  else {
    *(void *)std::string buf = xpc_null_create();
  }
  char v20 = xpc::dyn_cast_or_default((xpc *)buf, 0);
  *(_DWORD *)(v18 + 96) |= 4u;
  *(unsigned char *)(v18 + 52) = v20;
  xpc_release(*(xpc_object_t *)buf);
  uint64_t v21 = *a2;
  xpc_object_t v22 = xpc_dictionary_get_value(v5, (const char *)*MEMORY[0x1E4F4D1B8]);
  xpc_object_t object = v22;
  if (v22) {
    xpc_retain(v22);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  xpc::dyn_cast_or_default((uint64_t *)buf, (xpc *)&object, (const object *)"Unknown", v23);
  *(_DWORD *)(v21 + 96) |= 8u;
  size_t v24 = *(uint8_t **)(v21 + 24);
  if (v24 == v13)
  {
    size_t v24 = (uint8_t *)operator new(0x18uLL);
    *(void *)size_t v24 = 0;
    *((void *)v24 + 1) = 0;
    *((void *)v24 + 2) = 0;
    *(void *)(v21 + 24) = v24;
    size_t v25 = HIBYTE(v87);
    if (((char)v24[23] & 0x80000000) == 0)
    {
LABEL_36:
      if ((v25 & 0x80) != 0)
      {
        std::string::__assign_no_alias<true>(v24, *(void **)buf, *(size_t *)&buf[8]);
      }
      else
      {
        long long v26 = *(_OWORD *)buf;
        *((void *)v24 + 2) = v87;
        *(_OWORD *)size_t v24 = v26;
      }
      goto LABEL_47;
    }
  }
  else
  {
    if (v24 == buf) {
      goto LABEL_47;
    }
    size_t v25 = HIBYTE(v87);
    if (((char)v24[23] & 0x80000000) == 0) {
      goto LABEL_36;
    }
  }
  if ((v25 & 0x80u) == 0) {
    uint64_t v27 = buf;
  }
  else {
    uint64_t v27 = *(uint8_t **)buf;
  }
  if ((v25 & 0x80u) == 0) {
    size_t v28 = v25;
  }
  else {
    size_t v28 = *(void *)&buf[8];
  }
  std::string::__assign_no_alias<false>((void **)v24, v27, v28);
LABEL_47:
  if (SHIBYTE(v87) < 0) {
    operator delete(*(void **)buf);
  }
  xpc_release(object);
  uint64_t v29 = *a2;
  xpc_object_t v30 = xpc_dictionary_get_value(v5, (const char *)*MEMORY[0x1E4F4D090]);
  *(void *)std::string buf = v30;
  if (v30) {
    xpc_retain(v30);
  }
  else {
    *(void *)std::string buf = xpc_null_create();
  }
  int v31 = xpc::dyn_cast_or_default((xpc *)buf, 0);
  *(_DWORD *)(v29 + 96) |= 0x10u;
  *(_DWORD *)(v29 + 48) = v31;
  xpc_release(*(xpc_object_t *)buf);
  uint64_t v32 = *a2;
  xpc_object_t v33 = xpc_dictionary_get_value(v5, (const char *)*MEMORY[0x1E4F4CF10]);
  xpc_object_t object = v33;
  if (v33) {
    xpc_retain(v33);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  xpc::dyn_cast_or_default((uint64_t *)buf, (xpc *)&object, (const object *)"Unknown", v34);
  *(_DWORD *)(v32 + 96) |= 0x20u;
  uint64_t v35 = *(uint8_t **)(v32 + 32);
  if (v35 == v13)
  {
    uint64_t v35 = (uint8_t *)operator new(0x18uLL);
    *(void *)uint64_t v35 = 0;
    *((void *)v35 + 1) = 0;
    *((void *)v35 + 2) = 0;
    *(void *)(v32 + 32) = v35;
    size_t v36 = HIBYTE(v87);
    if (((char)v35[23] & 0x80000000) == 0)
    {
LABEL_58:
      if ((v36 & 0x80) != 0)
      {
        std::string::__assign_no_alias<true>(v35, *(void **)buf, *(size_t *)&buf[8]);
      }
      else
      {
        long long v37 = *(_OWORD *)buf;
        *((void *)v35 + 2) = v87;
        *(_OWORD *)uint64_t v35 = v37;
      }
      goto LABEL_69;
    }
  }
  else
  {
    if (v35 == buf) {
      goto LABEL_69;
    }
    size_t v36 = HIBYTE(v87);
    if (((char)v35[23] & 0x80000000) == 0) {
      goto LABEL_58;
    }
  }
  if ((v36 & 0x80u) == 0) {
    uint64_t v38 = buf;
  }
  else {
    uint64_t v38 = *(uint8_t **)buf;
  }
  if ((v36 & 0x80u) == 0) {
    size_t v39 = v36;
  }
  else {
    size_t v39 = *(void *)&buf[8];
  }
  std::string::__assign_no_alias<false>((void **)v35, v38, v39);
LABEL_69:
  if (SHIBYTE(v87) < 0) {
    operator delete(*(void **)buf);
  }
  xpc_release(object);
  uint64_t v40 = *a2;
  xpc_object_t v41 = xpc_dictionary_get_value(v5, (const char *)*MEMORY[0x1E4F4D098]);
  xpc_object_t object = v41;
  if (v41) {
    xpc_retain(v41);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  xpc::dyn_cast_or_default((uint64_t *)buf, (xpc *)&object, (const object *)"Unknown", v42);
  *(_DWORD *)(v40 + 96) |= 0x40u;
  int v43 = *(uint8_t **)(v40 + 40);
  if (v43 == v13)
  {
    int v43 = (uint8_t *)operator new(0x18uLL);
    *(void *)int v43 = 0;
    *((void *)v43 + 1) = 0;
    *((void *)v43 + 2) = 0;
    *(void *)(v40 + 40) = v43;
    size_t v44 = HIBYTE(v87);
    if (((char)v43[23] & 0x80000000) == 0)
    {
LABEL_77:
      if ((v44 & 0x80) != 0)
      {
        std::string::__assign_no_alias<true>(v43, *(void **)buf, *(size_t *)&buf[8]);
      }
      else
      {
        long long v45 = *(_OWORD *)buf;
        *((void *)v43 + 2) = v87;
        *(_OWORD *)int v43 = v45;
      }
      goto LABEL_88;
    }
  }
  else
  {
    if (v43 == buf) {
      goto LABEL_88;
    }
    size_t v44 = HIBYTE(v87);
    if (((char)v43[23] & 0x80000000) == 0) {
      goto LABEL_77;
    }
  }
  if ((v44 & 0x80u) == 0) {
    BOOL v46 = buf;
  }
  else {
    BOOL v46 = *(uint8_t **)buf;
  }
  if ((v44 & 0x80u) == 0) {
    size_t v47 = v44;
  }
  else {
    size_t v47 = *(void *)&buf[8];
  }
  std::string::__assign_no_alias<false>((void **)v43, v46, v47);
LABEL_88:
  if (SHIBYTE(v87) < 0) {
    operator delete(*(void **)buf);
  }
  xpc_release(object);
  uint64_t v48 = *a2;
  xpc_object_t v49 = xpc_dictionary_get_value(v5, (const char *)*MEMORY[0x1E4F4CFE0]);
  xpc_object_t object = v49;
  if (v49) {
    xpc_retain(v49);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  xpc::dyn_cast_or_default((uint64_t *)buf, (xpc *)&object, (const object *)"Unknown", v50);
  *(_DWORD *)(v48 + 96) |= 0x80u;
  uint64_t v51 = *(uint8_t **)(v48 + 56);
  if (v51 == v13)
  {
    uint64_t v51 = (uint8_t *)operator new(0x18uLL);
    *(void *)uint64_t v51 = 0;
    *((void *)v51 + 1) = 0;
    *((void *)v51 + 2) = 0;
    *(void *)(v48 + 56) = v51;
    size_t v52 = HIBYTE(v87);
    if (((char)v51[23] & 0x80000000) == 0)
    {
LABEL_96:
      if ((v52 & 0x80) != 0)
      {
        std::string::__assign_no_alias<true>(v51, *(void **)buf, *(size_t *)&buf[8]);
      }
      else
      {
        long long v53 = *(_OWORD *)buf;
        *((void *)v51 + 2) = v87;
        *(_OWORD *)uint64_t v51 = v53;
      }
      goto LABEL_107;
    }
  }
  else
  {
    if (v51 == buf) {
      goto LABEL_107;
    }
    size_t v52 = HIBYTE(v87);
    if (((char)v51[23] & 0x80000000) == 0) {
      goto LABEL_96;
    }
  }
  if ((v52 & 0x80u) == 0) {
    uint64_t v54 = buf;
  }
  else {
    uint64_t v54 = *(uint8_t **)buf;
  }
  if ((v52 & 0x80u) == 0) {
    size_t v55 = v52;
  }
  else {
    size_t v55 = *(void *)&buf[8];
  }
  std::string::__assign_no_alias<false>((void **)v51, v54, v55);
LABEL_107:
  if (SHIBYTE(v87) < 0) {
    operator delete(*(void **)buf);
  }
  xpc_release(object);
  uint64_t v56 = *a2;
  xpc_object_t v57 = xpc_dictionary_get_value(v5, (const char *)*MEMORY[0x1E4F4CF58]);
  xpc_object_t object = v57;
  if (v57) {
    xpc_retain(v57);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  xpc::dyn_cast_or_default((uint64_t *)buf, (xpc *)&object, (const object *)"Unknown", v58);
  *(_DWORD *)(v56 + 96) |= 0x100u;
  uint64_t v59 = *(uint8_t **)(v56 + 64);
  if (v59 == v13)
  {
    uint64_t v59 = (uint8_t *)operator new(0x18uLL);
    *(void *)uint64_t v59 = 0;
    *((void *)v59 + 1) = 0;
    *((void *)v59 + 2) = 0;
    *(void *)(v56 + 64) = v59;
    size_t v60 = HIBYTE(v87);
    if (((char)v59[23] & 0x80000000) == 0)
    {
LABEL_115:
      if ((v60 & 0x80) != 0)
      {
        std::string::__assign_no_alias<true>(v59, *(void **)buf, *(size_t *)&buf[8]);
      }
      else
      {
        long long v61 = *(_OWORD *)buf;
        *((void *)v59 + 2) = v87;
        *(_OWORD *)uint64_t v59 = v61;
      }
      goto LABEL_126;
    }
  }
  else
  {
    if (v59 == buf) {
      goto LABEL_126;
    }
    size_t v60 = HIBYTE(v87);
    if (((char)v59[23] & 0x80000000) == 0) {
      goto LABEL_115;
    }
  }
  if ((v60 & 0x80u) == 0) {
    int v62 = buf;
  }
  else {
    int v62 = *(uint8_t **)buf;
  }
  if ((v60 & 0x80u) == 0) {
    size_t v63 = v60;
  }
  else {
    size_t v63 = *(void *)&buf[8];
  }
  std::string::__assign_no_alias<false>((void **)v59, v62, v63);
LABEL_126:
  if (SHIBYTE(v87) < 0) {
    operator delete(*(void **)buf);
  }
  xpc_release(object);
  uint64_t v64 = *a2;
  xpc_object_t v65 = xpc_dictionary_get_value(v5, (const char *)*MEMORY[0x1E4F4CC48]);
  *(void *)std::string buf = v65;
  if (v65) {
    xpc_retain(v65);
  }
  else {
    *(void *)std::string buf = xpc_null_create();
  }
  int v66 = xpc::dyn_cast_or_default((xpc *)buf, 0);
  *(_DWORD *)(v64 + 96) |= 0x200u;
  *(_DWORD *)(v64 + 80) = v66;
  xpc_release(*(xpc_object_t *)buf);
  uint64_t v67 = *a2;
  xpc_object_t v68 = xpc_dictionary_get_value(v5, (const char *)*MEMORY[0x1E4F4CE10]);
  xpc_object_t object = v68;
  if (v68) {
    xpc_retain(v68);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  xpc::dyn_cast_or_default((uint64_t *)buf, (xpc *)&object, (const object *)"Unknown", v69);
  *(_DWORD *)(v67 + 96) |= 0x400u;
  uint64_t v70 = *(uint8_t **)(v67 + 72);
  if (v70 == v13)
  {
    uint64_t v70 = (uint8_t *)operator new(0x18uLL);
    *(void *)uint64_t v70 = 0;
    *((void *)v70 + 1) = 0;
    *((void *)v70 + 2) = 0;
    *(void *)(v67 + 72) = v70;
    size_t v71 = HIBYTE(v87);
    if (((char)v70[23] & 0x80000000) == 0)
    {
LABEL_137:
      if ((v71 & 0x80) != 0)
      {
        std::string::__assign_no_alias<true>(v70, *(void **)buf, *(size_t *)&buf[8]);
      }
      else
      {
        long long v72 = *(_OWORD *)buf;
        *((void *)v70 + 2) = v87;
        *(_OWORD *)uint64_t v70 = v72;
      }
      goto LABEL_148;
    }
LABEL_140:
    if ((v71 & 0x80u) == 0) {
      xpc_object_t v73 = buf;
    }
    else {
      xpc_object_t v73 = *(uint8_t **)buf;
    }
    if ((v71 & 0x80u) == 0) {
      size_t v74 = v71;
    }
    else {
      size_t v74 = *(void *)&buf[8];
    }
    std::string::__assign_no_alias<false>((void **)v70, v73, v74);
    goto LABEL_148;
  }
  if (v70 != buf)
  {
    size_t v71 = HIBYTE(v87);
    if (((char)v70[23] & 0x80000000) == 0) {
      goto LABEL_137;
    }
    goto LABEL_140;
  }
LABEL_148:
  if (SHIBYTE(v87) < 0) {
    operator delete(*(void **)buf);
  }
  xpc_release(object);
  uint64_t v75 = *a2;
  xpc_object_t v76 = xpc_dictionary_get_value(v5, (const char *)*MEMORY[0x1E4F4CF08]);
  *(void *)std::string buf = v76;
  if (v76) {
    xpc_retain(v76);
  }
  else {
    *(void *)std::string buf = xpc_null_create();
  }
  int v77 = xpc::dyn_cast_or_default((xpc *)buf, 0);
  *(_DWORD *)(v75 + 96) |= 0x800u;
  *(_DWORD *)(v75 + 84) = v77;
  xpc_release(*(xpc_object_t *)buf);
  uint64_t v78 = *a2;
  xpc_object_t v79 = xpc_dictionary_get_value(v5, (const char *)*MEMORY[0x1E4F4CE08]);
  *(void *)std::string buf = v79;
  if (v79) {
    xpc_retain(v79);
  }
  else {
    *(void *)std::string buf = xpc_null_create();
  }
  int v80 = xpc::dyn_cast_or_default((xpc *)buf, 0);
  *(_DWORD *)(v78 + 96) |= 0x1000u;
  *(_DWORD *)(v78 + 88) = v80;
  xpc_release(*(xpc_object_t *)buf);
  uint64_t v81 = *a2;
  xpc_object_t v82 = xpc_dictionary_get_value(v5, (const char *)*MEMORY[0x1E4F4CB38]);
  *(void *)std::string buf = v82;
  if (v82) {
    xpc_retain(v82);
  }
  else {
    *(void *)std::string buf = xpc_null_create();
  }
  char v83 = xpc::dyn_cast_or_default((xpc *)buf, 0);
  *(_DWORD *)(v81 + 96) |= 0x2000u;
  *(unsigned char *)(v81 + 53) = v83;
  xpc_release(*(xpc_object_t *)buf);
LABEL_160:
  xpc_release(v5);
  return v7 == v6;
}

void sub_1C582C6A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  xpc_release(object);
  xpc_release(v16);
  _Unwind_Resume(a1);
}

uint64_t StatsAWD::fillMetric_sync(uint64_t a1, int **a2, void *a3)
{
  uint64_t v61 = *MEMORY[0x1E4F143B8];
  xpc_object_t v5 = (xpc_object_t)*a3;
  uint64_t v6 = MEMORY[0x1E4F14568];
  if (*a3 && MEMORY[0x1C8792D30](*a3) == v6) {
    xpc_retain(v5);
  }
  else {
    xpc_object_t v5 = xpc_null_create();
  }
  if (MEMORY[0x1C8792D30](v5) != v6)
  {
    uint64_t v7 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string __dst = 0;
      _os_log_error_impl(&dword_1C5767000, v7, OS_LOG_TYPE_ERROR, "Failed: Expected data needs to be dictionary in bb crash handling", __dst, 2u);
    }
    uint64_t v8 = 0;
    goto LABEL_25;
  }
  if (v5)
  {
    xpc_retain(v5);
    xpc_object_t object = v5;
    xpc_object_t v9 = v5;
LABEL_12:
    xpc_retain(v9);
    goto LABEL_13;
  }
  xpc_object_t v9 = xpc_null_create();
  xpc_object_t object = v9;
  if (v9) {
    goto LABEL_12;
  }
  xpc_object_t v9 = 0;
  xpc_object_t object = xpc_null_create();
LABEL_13:
  uint64_t v59 = 0;
  xpc_release(v9);
  if (v5)
  {
    xpc_retain(v5);
    xpc_object_t v10 = v5;
  }
  else
  {
    xpc_object_t v10 = xpc_null_create();
  }
  if (MEMORY[0x1C8792D30](v5) == v6)
  {
    size_t count = xpc_array_get_count(v5);
    if (v10) {
      goto LABEL_18;
    }
LABEL_20:
    xpc_object_t v12 = xpc_null_create();
    goto LABEL_21;
  }
  size_t count = 0;
  if (!v10) {
    goto LABEL_20;
  }
LABEL_18:
  xpc_retain(v10);
  xpc_object_t v12 = v10;
LABEL_21:
  xpc_release(v10);
  uint64_t v13 = v59;
  if (v59 != count || object != v12)
  {
    size_t v55 = a2;
    long long v15 = (const char *)*MEMORY[0x1E4F4C8C0];
    int v16 = (const char *)*MEMORY[0x1E4F4C798];
    size_t v17 = (const char *)*MEMORY[0x1E4F4C538];
    while (1)
    {
      xpc_object_t xdict = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
      *(void *)std::string __dst = &object;
      *(void *)&__dst[8] = v13;
      xpc::array::object_proxy::operator xpc::dict((uint64_t)__dst, &xdict);
      if (MEMORY[0x1C8792D30](xdict) == MEMORY[0x1E4F14590]
        && xpc_dictionary_get_value(xdict, v15)
        && xpc_dictionary_get_value(xdict, v16)
        && xpc_dictionary_get_value(xdict, v17))
      {
        xpc_object_t v19 = *v55;
        int v20 = (*v55)[7];
        uint64_t v21 = (*v55)[6];
        if ((int)v21 >= v20)
        {
          if (v20 == v19[8])
          {
            wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(v19 + 4));
            int v20 = v19[7];
          }
          v19[7] = v20 + 1;
          xpc_object_t v23 = operator new(0x28uLL);
          *xpc_object_t v23 = &unk_1F20FAB88;
          uint64_t v30 = MEMORY[0x1E4FBA920];
          v23[1] = MEMORY[0x1E4FBA920];
          v23[2] = v30;
          v23[3] = 0;
          *((_DWORD *)v23 + 8) = 0;
          uint64_t v31 = *((void *)v19 + 2);
          uint64_t v32 = v19[6];
          v19[6] = v32 + 1;
          *(void *)(v31 + 8 * v32) = v23;
LABEL_49:
          xpc_object_t value = xpc_dictionary_get_value(xdict, v15);
          *(void *)std::string buf = value;
          if (value) {
            xpc_retain(value);
          }
          else {
            *(void *)std::string buf = xpc_null_create();
          }
          xpc::dyn_cast_or_default((uint64_t *)__dst, (xpc *)buf, (const object *)"", v34);
          *((_DWORD *)v23 + 8) |= 1u;
          uint64_t v35 = (void **)v23[1];
          if (v35 == (void **)MEMORY[0x1E4FBA920])
          {
            uint64_t v35 = (void **)operator new(0x18uLL);
            *uint64_t v35 = 0;
            v35[1] = 0;
            v35[2] = 0;
            v23[1] = v35;
            size_t v36 = __dst[23];
            if ((*((char *)v35 + 23) & 0x80000000) == 0) {
              goto LABEL_55;
            }
          }
          else
          {
            if (v35 == (void **)__dst) {
              goto LABEL_75;
            }
            size_t v36 = __dst[23];
            if ((*((char *)v35 + 23) & 0x80000000) == 0)
            {
LABEL_55:
              if ((v36 & 0x80) != 0)
              {
                std::string::__assign_no_alias<true>(v35, *(void **)__dst, *(size_t *)&__dst[8]);
              }
              else
              {
                long long v37 = *(_OWORD *)__dst;
                v35[2] = *(void **)&__dst[16];
                *(_OWORD *)uint64_t v35 = v37;
              }
              goto LABEL_75;
            }
          }
          if ((v36 & 0x80u) == 0) {
            uint64_t v38 = __dst;
          }
          else {
            uint64_t v38 = *(unsigned char **)__dst;
          }
          if ((v36 & 0x80u) == 0) {
            size_t v39 = v36;
          }
          else {
            size_t v39 = *(void *)&__dst[8];
          }
          std::string::__assign_no_alias<false>(v35, v38, v39);
LABEL_75:
          if ((__dst[23] & 0x80000000) != 0) {
            operator delete(*(void **)__dst);
          }
          xpc_release(*(xpc_object_t *)buf);
          xpc_object_t v43 = xpc_dictionary_get_value(xdict, v16);
          *(void *)std::string __dst = v43;
          if (v43) {
            xpc_retain(v43);
          }
          else {
            *(void *)std::string __dst = xpc_null_create();
          }
          int v44 = xpc::dyn_cast_or_default((xpc *)__dst, 0);
          *((_DWORD *)v23 + 8) |= 2u;
          *((_DWORD *)v23 + 6) = v44;
          xpc_release(*(xpc_object_t *)__dst);
          xpc_object_t v45 = xpc_dictionary_get_value(xdict, v17);
          *(void *)std::string buf = v45;
          if (v45) {
            xpc_retain(v45);
          }
          else {
            *(void *)std::string buf = xpc_null_create();
          }
          xpc::dyn_cast_or_default((uint64_t *)__dst, (xpc *)buf, (const object *)"", v46);
          *((_DWORD *)v23 + 8) |= 4u;
          size_t v47 = (void **)v23[2];
          if (v47 == (void **)MEMORY[0x1E4FBA920])
          {
            size_t v47 = (void **)operator new(0x18uLL);
            *size_t v47 = 0;
            v47[1] = 0;
            xpc_object_t v47[2] = 0;
            v23[2] = v47;
            size_t v48 = __dst[23];
            if ((*((char *)v47 + 23) & 0x80000000) == 0) {
              goto LABEL_86;
            }
          }
          else
          {
            if (v47 == (void **)__dst)
            {
LABEL_97:
              if ((__dst[23] & 0x80000000) != 0) {
                operator delete(*(void **)__dst);
              }
              xpc_release(*(xpc_object_t *)buf);
              uint64_t v8 = 1;
              goto LABEL_30;
            }
            size_t v48 = __dst[23];
            if ((*((char *)v47 + 23) & 0x80000000) == 0)
            {
LABEL_86:
              if ((v48 & 0x80) != 0)
              {
                std::string::__assign_no_alias<true>(v47, *(void **)__dst, *(size_t *)&__dst[8]);
              }
              else
              {
                long long v49 = *(_OWORD *)__dst;
                xpc_object_t v47[2] = *(void **)&__dst[16];
                *(_OWORD *)size_t v47 = v49;
              }
              goto LABEL_97;
            }
          }
          if ((v48 & 0x80u) == 0) {
            CFIndex v50 = __dst;
          }
          else {
            CFIndex v50 = *(unsigned char **)__dst;
          }
          if ((v48 & 0x80u) == 0) {
            size_t v51 = v48;
          }
          else {
            size_t v51 = *(void *)&__dst[8];
          }
          std::string::__assign_no_alias<false>(v47, v50, v51);
          goto LABEL_97;
        }
        uint64_t v22 = *((void *)v19 + 2);
        v19[6] = v21 + 1;
        xpc_object_t v23 = *(void **)(v22 + 8 * v21);
        if (v23) {
          goto LABEL_49;
        }
        size_t v24 = *(NSObject **)(a1 + 40);
        if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)std::string __dst = 0;
          _os_log_error_impl(&dword_1C5767000, v24, OS_LOG_TYPE_ERROR, "Failed: Creating crash record", __dst, 2u);
        }
        uint64_t v8 = 0;
      }
      else
      {
        uint64_t v18 = *(NSObject **)(a1 + 40);
        if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
        {
          long long v53 = v17;
          uint64_t v52 = a1;
          size_t v25 = v16;
          xpc_object_t v54 = v12;
          long long v26 = (char *)MEMORY[0x1C8792C60](xdict);
          memset(__dst, 170, sizeof(__dst));
          size_t v27 = strlen(v26);
          if (v27 >= 0x7FFFFFFFFFFFFFF8) {
            std::string::__throw_length_error[abi:ne180100]();
          }
          size_t v28 = v27;
          if (v27 >= 0x17)
          {
            uint64_t v40 = (v27 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v27 | 7) != 0x17) {
              uint64_t v40 = v27 | 7;
            }
            uint64_t v41 = v40 + 1;
            uint64_t v29 = operator new(v40 + 1);
            *(void *)&__dst[8] = v28;
            *(void *)&__dst[16] = v41 | 0x8000000000000000;
            *(void *)std::string __dst = v29;
          }
          else
          {
            __dst[23] = v27;
            uint64_t v29 = __dst;
            if (!v27) {
              goto LABEL_69;
            }
          }
          memcpy(v29, v26, v28);
LABEL_69:
          v29[v28] = 0;
          free(v26);
          uint64_t v42 = __dst;
          if (__dst[23] < 0) {
            uint64_t v42 = *(unsigned char **)__dst;
          }
          *(_DWORD *)std::string buf = 136315138;
          *(void *)&uint8_t buf[4] = v42;
          _os_log_error_impl(&dword_1C5767000, v18, OS_LOG_TYPE_ERROR, "Failed: One of elements of bb crash is missing: %s", buf, 0xCu);
          if ((__dst[23] & 0x80000000) != 0) {
            operator delete(*(void **)__dst);
          }
          uint64_t v8 = 0;
          xpc_object_t v12 = v54;
          int v16 = v25;
          a1 = v52;
          size_t v17 = v53;
          goto LABEL_30;
        }
        uint64_t v8 = 0;
      }
LABEL_30:
      xpc_release(xdict);
      if (v8)
      {
        uint64_t v13 = v59 + 1;
        uint64_t v59 = v13;
        if (v13 != count || object != v12) {
          continue;
        }
      }
      goto LABEL_24;
    }
  }
  uint64_t v8 = 1;
LABEL_24:
  xpc_release(v12);
  xpc_release(object);
LABEL_25:
  xpc_release(v5);
  return v8;
}

void sub_1C582CFFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, xpc_object_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,xpc_object_t a23,xpc_object_t a24,uint64_t a25,xpc_object_t object)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  xpc_release(object);
  xpc_release(a23);
  xpc_release(v27);
  xpc_release(a24);
  xpc_release(v26);
  _Unwind_Resume(a1);
}

uint64_t StatsAWD::fillMetric_sync(uint64_t a1, int **a2, void **a3)
{
  uint64_t v75 = *MEMORY[0x1E4F143B8];
  xpc_object_t v5 = *a3;
  xpc_object_t xdict = v5;
  uint64_t v6 = MEMORY[0x1E4F14590];
  if (v5 && MEMORY[0x1C8792D30](v5) == v6) {
    xpc_retain(v5);
  }
  else {
    xpc_object_t xdict = xpc_null_create();
  }
  if (MEMORY[0x1C8792D30]() != v6)
  {
    uint64_t v7 = *(NSObject **)(a1 + 40);
    if (!os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
LABEL_20:
      uint64_t v18 = 0;
      goto LABEL_21;
    }
    *(_WORD *)std::string buf = 0;
    uint64_t v8 = "Failed: Expected data needs to be dictionary in low power stats handling";
LABEL_8:
    _os_log_error_impl(&dword_1C5767000, v7, OS_LOG_TYPE_ERROR, v8, buf, 2u);
    goto LABEL_20;
  }
  uint64_t v9 = *MEMORY[0x1E4F4CD38];
  if (!xpc_dictionary_get_value(xdict, (const char *)*MEMORY[0x1E4F4CD38])
    || (uint64_t v10 = *MEMORY[0x1E4F4C670], !xpc_dictionary_get_value(xdict, (const char *)*MEMORY[0x1E4F4C670]))
    || (uint64_t v11 = *MEMORY[0x1E4F4CA20], !xpc_dictionary_get_value(xdict, (const char *)*MEMORY[0x1E4F4CA20]))
    || (uint64_t v12 = *MEMORY[0x1E4F4C350], !xpc_dictionary_get_value(xdict, (const char *)*MEMORY[0x1E4F4C350]))
    || (uint64_t v13 = *MEMORY[0x1E4F4C790], !xpc_dictionary_get_value(xdict, (const char *)*MEMORY[0x1E4F4C790]))
    || (uint64_t v14 = *MEMORY[0x1E4F4C8A8], !xpc_dictionary_get_value(xdict, (const char *)*MEMORY[0x1E4F4C8A8]))
    || (uint64_t v65 = *MEMORY[0x1E4F4CC40], !xpc_dictionary_get_value(xdict, (const char *)*MEMORY[0x1E4F4CC40])))
  {
    size_t v17 = *(NSObject **)(a1 + 40);
    if (!os_log_type_enabled(v17, OS_LOG_TYPE_ERROR)) {
      goto LABEL_20;
    }
    int v20 = (char *)MEMORY[0x1C8792C60](xdict);
    memset(buf, 170, sizeof(buf));
    size_t v21 = strlen(v20);
    if (v21 >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    size_t v22 = v21;
    if (v21 >= 0x17)
    {
      uint64_t v24 = (v21 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v21 | 7) != 0x17) {
        uint64_t v24 = v21 | 7;
      }
      uint64_t v25 = v24 + 1;
      xpc_object_t v23 = operator new(v24 + 1);
      *(void *)&uint8_t buf[8] = v22;
      *(void *)&uint8_t buf[16] = v25 | 0x8000000000000000;
      *(void *)std::string buf = v23;
    }
    else
    {
      buf[23] = v21;
      xpc_object_t v23 = buf;
      if (!v21) {
        goto LABEL_30;
      }
    }
    memcpy(v23, v20, v22);
LABEL_30:
    *((unsigned char *)v23 + v22) = 0;
    free(v20);
    long long v26 = buf;
    if ((buf[23] & 0x80u) != 0) {
      long long v26 = *(uint8_t **)buf;
    }
    LODWORD(v74) = 136315138;
    *(void *)((char *)&v74 + 4) = v26;
    _os_log_error_impl(&dword_1C5767000, v17, OS_LOG_TYPE_ERROR, "Failed: One of elements of low power stats is missing: %s", (uint8_t *)&v74, 0xCu);
    if ((char)buf[23] < 0) {
      operator delete(*(void **)buf);
    }
    goto LABEL_20;
  }
  uint64_t v15 = *MEMORY[0x1E4F4C8B0];
  xpc_object_t value = xpc_dictionary_get_value(xdict, (const char *)*MEMORY[0x1E4F4C8B0]);
  if (MEMORY[0x1C8792D30](value) != MEMORY[0x1E4F14568])
  {
    uint64_t v7 = *(NSObject **)(a1 + 40);
    if (!os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      goto LABEL_20;
    }
    *(_WORD *)std::string buf = 0;
    uint64_t v8 = "Failed: Expected data needs to be array in missed MT message handling";
    goto LABEL_8;
  }
  uint64_t v64 = v15;
  size_t v27 = *a2;
  *(void *)std::string buf = &xdict;
  *(void *)&uint8_t buf[8] = v9;
  xpc::dict::object_proxy::operator xpc::object((uint64_t)buf, &v74);
  int v28 = xpc::dyn_cast_or_default((xpc *)&v74, 0);
  v27[18] |= 4u;
  void v27[5] = v28;
  xpc_release((xpc_object_t)v74);
  uint64_t v29 = *a2;
  *(void *)std::string buf = &xdict;
  *(void *)&uint8_t buf[8] = v10;
  xpc::dict::object_proxy::operator xpc::object((uint64_t)buf, &v74);
  int v30 = xpc::dyn_cast_or_default((xpc *)&v74, 0);
  v29[18] |= 8u;
  v29[6] = v30;
  xpc_release((xpc_object_t)v74);
  uint64_t v31 = *a2;
  *(void *)std::string buf = &xdict;
  *(void *)&uint8_t buf[8] = v11;
  xpc::dict::object_proxy::operator xpc::object((uint64_t)buf, &v74);
  int v32 = xpc::dyn_cast_or_default((xpc *)&v74, 0);
  v31[18] |= 0x10u;
  v31[7] = v32;
  xpc_release((xpc_object_t)v74);
  xpc_object_t v33 = *a2;
  *(void *)std::string buf = &xdict;
  *(void *)&uint8_t buf[8] = v12;
  xpc::dict::object_proxy::operator xpc::object((uint64_t)buf, &v74);
  int v34 = xpc::dyn_cast_or_default((xpc *)&v74, 0);
  v33[18] |= 0x20u;
  v33[8] = v34;
  xpc_release((xpc_object_t)v74);
  uint64_t v35 = *a2;
  *(void *)std::string buf = &xdict;
  *(void *)&uint8_t buf[8] = v13;
  xpc::dict::object_proxy::operator xpc::object((uint64_t)buf, &v74);
  int v36 = xpc::dyn_cast_or_default((xpc *)&v74, 0);
  v35[18] |= 0x40u;
  v35[9] = v36;
  xpc_release((xpc_object_t)v74);
  long long v37 = *a2;
  *(void *)std::string buf = &xdict;
  *(void *)&uint8_t buf[8] = v14;
  xpc::dict::object_proxy::operator xpc::object((uint64_t)buf, &v74);
  int v38 = xpc::dyn_cast_or_default((xpc *)&v74, 0);
  v37[18] |= 0x80u;
  v37[16] = v38;
  xpc_release((xpc_object_t)v74);
  xpc_object_t xarray = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  *(void *)std::string buf = &xdict;
  *(void *)&uint8_t buf[8] = v64;
  xpc::dict::object_proxy::operator xpc::array((uint64_t)buf, &xarray);
  xpc::array::array((xpc_object_t *)buf, xarray);
  xpc::array::iterator::iterator((xpc_object_t *)&v74, *(xpc_object_t *)buf, 0);
  xpc_release(*(xpc_object_t *)buf);
  xpc::array::array((xpc_object_t *)buf, xarray);
  if (MEMORY[0x1C8792D30](xarray) == MEMORY[0x1E4F14568]) {
    size_t count = (void *)xpc_array_get_count(xarray);
  }
  else {
    size_t count = 0;
  }
  xpc::array::iterator::iterator(&v67, *(xpc_object_t *)buf, count);
  xpc_release(*(xpc_object_t *)buf);
  uint64_t v40 = (const char *)*MEMORY[0x1E4F4CA18];
  uint64_t v41 = (const char *)*MEMORY[0x1E4F4C8B8];
  uint64_t v42 = (const char *)*MEMORY[0x1E4F4C348];
  xpc_object_t v43 = (const char *)*MEMORY[0x1E4F4C340];
  uint64_t v44 = *((void *)&v74 + 1);
  if (*((void *)&v74 + 1) == v68)
  {
LABEL_38:
    if ((xpc_object_t)v74 != v67) {
      goto LABEL_39;
    }
    xpc_release((xpc_object_t)v74);
    xpc_release((xpc_object_t)v74);
    uint64_t v61 = *a2;
    *(void *)std::string buf = &xdict;
    *(void *)&uint8_t buf[8] = v65;
    xpc::dict::object_proxy::operator xpc::object((uint64_t)buf, &v74);
    int v62 = xpc::dyn_cast_or_default((xpc *)&v74, 0);
    v61[18] |= 2u;
    v61[4] = v62;
    xpc_release((xpc_object_t)v74);
    uint64_t v18 = 1;
  }
  else
  {
LABEL_39:
    while (1)
    {
      xpc_object_t object = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
      *(void *)std::string buf = &v74;
      *(void *)&uint8_t buf[8] = v44;
      xpc::array::object_proxy::operator xpc::dict((uint64_t)buf, &object);
      if (MEMORY[0x1C8792D30](object) != v6
        || !xpc_dictionary_get_value(object, v40)
        || !xpc_dictionary_get_value(object, v41)
        || !xpc_dictionary_get_value(object, v42)
        || !xpc_dictionary_get_value(object, v43))
      {
        break;
      }
      xpc_object_t v45 = *a2;
      int v46 = (*a2)[13];
      uint64_t v47 = (*a2)[12];
      if ((int)v47 >= v46)
      {
        if (v46 == v45[14])
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(v45 + 10));
          int v46 = v45[13];
        }
        v45[13] = v46 + 1;
        long long v49 = operator new(0x20uLL);
        *long long v49 = &unk_1F20FBE30;
        v49[1] = 0;
        v49[2] = 0;
        uint64_t v49[3] = 0;
        uint64_t v50 = *((void *)v45 + 5);
        uint64_t v51 = v45[12];
        v45[12] = v51 + 1;
        *(void *)(v50 + 8 * v51) = v49;
      }
      else
      {
        uint64_t v48 = *((void *)v45 + 5);
        v45[12] = v47 + 1;
        long long v49 = *(void **)(v48 + 8 * v47);
      }
      xpc_object_t v52 = xpc_dictionary_get_value(object, v40);
      *(void *)std::string buf = v52;
      if (v52) {
        xpc_retain(v52);
      }
      else {
        *(void *)std::string buf = xpc_null_create();
      }
      int v53 = xpc::dyn_cast_or_default((xpc *)buf, 0);
      *((_DWORD *)v49 + 7) |= 1u;
      *((_DWORD *)v49 + 2) = v53;
      xpc_release(*(xpc_object_t *)buf);
      xpc_object_t v54 = xpc_dictionary_get_value(object, v41);
      *(void *)std::string buf = v54;
      if (v54) {
        xpc_retain(v54);
      }
      else {
        *(void *)std::string buf = xpc_null_create();
      }
      int v55 = xpc::dyn_cast_or_default((xpc *)buf, 0);
      *((_DWORD *)v49 + 7) |= 2u;
      *((_DWORD *)v49 + 3) = v55;
      xpc_release(*(xpc_object_t *)buf);
      xpc_object_t v56 = xpc_dictionary_get_value(object, v42);
      *(void *)std::string buf = v56;
      if (v56) {
        xpc_retain(v56);
      }
      else {
        *(void *)std::string buf = xpc_null_create();
      }
      int v57 = xpc::dyn_cast_or_default((xpc *)buf, 0);
      *((_DWORD *)v49 + 7) |= 4u;
      *((_DWORD *)v49 + 4) = v57;
      xpc_release(*(xpc_object_t *)buf);
      xpc_object_t v58 = xpc_dictionary_get_value(object, v43);
      *(void *)std::string buf = v58;
      if (v58) {
        xpc_retain(v58);
      }
      else {
        *(void *)std::string buf = xpc_null_create();
      }
      int v59 = xpc::dyn_cast_or_default((xpc *)buf, 0);
      *((_DWORD *)v49 + 7) |= 8u;
      *((_DWORD *)v49 + 5) = v59;
      xpc_release(*(xpc_object_t *)buf);
      xpc_release(object);
      uint64_t v44 = *((void *)&v74 + 1) + 1;
      *((void *)&v74 + 1) = v44;
      if (v44 == v68) {
        goto LABEL_38;
      }
    }
    size_t v60 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v60, OS_LOG_TYPE_ERROR))
    {
      xpc::dict::to_debug_string((xpc::dict *)&object, buf);
      size_t v63 = (buf[23] & 0x80u) == 0 ? buf : *(uint8_t **)buf;
      *(_DWORD *)long long v72 = 136315138;
      xpc_object_t v73 = v63;
      _os_log_error_impl(&dword_1C5767000, v60, OS_LOG_TYPE_ERROR, "Failed: One of elements of missed MT message is missing: %s", v72, 0xCu);
      if ((char)buf[23] < 0) {
        operator delete(*(void **)buf);
      }
    }
    xpc_release(object);
    xpc_release(v67);
    xpc_release((xpc_object_t)v74);
    uint64_t v18 = 0;
  }
  xpc_release(xarray);
LABEL_21:
  xpc_release(xdict);
  return v18;
}

void sub_1C582DA3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, xpc_object_t a11, xpc_object_t a12, uint64_t a13, xpc_object_t a14, xpc_object_t a15, uint64_t a16, uint64_t a17, xpc_object_t a18, uint64_t a19, uint64_t a20,xpc_object_t object)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void sub_1C582E058(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, xpc_object_t object)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  xpc_release(object);
  xpc_release(v16);
  _Unwind_Resume(a1);
}

void sub_1C582E458(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void sub_1C582E910(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, xpc_object_t object)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  xpc_release(object);
  xpc_release(v16);
  _Unwind_Resume(a1);
}

void sub_1C582EC9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

BOOL StatsAWD::fillMetric_sync(uint64_t a1, uint64_t *a2, xpc_object_t *a3)
{
  uint64_t v87 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = MEMORY[0x1C8792D30](*a3);
  uint64_t v7 = MEMORY[0x1E4F14590];
  if (v6 == MEMORY[0x1E4F14590])
  {
    memset(v76, 170, 24);
    xpc_object_t value = xpc_dictionary_get_value(*a3, (const char *)*MEMORY[0x1E4F4C8F0]);
    object[0] = value;
    if (value) {
      xpc_retain(value);
    }
    else {
      object[0] = xpc_null_create();
    }
    xpc::dyn_cast_or_default((uint64_t *)&buf, (xpc *)object, (const object *)"no-reset-reason", v10);
    uint64_t v11 = std::string::insert(&buf, 0, "modem reset: ", 0xDuLL);
    long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    void v76[2] = (void *)v11->__r_.__value_.__r.__words[2];
    *(_OWORD *)xpc_object_t v76 = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf.__r_.__value_.__l.__data_);
    }
    xpc_release(object[0]);
    xpc_object_t v13 = xpc_dictionary_get_value(*a3, (const char *)*MEMORY[0x1E4F4C8E8]);
    buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v13;
    if (v13) {
      xpc_retain(v13);
    }
    else {
      buf.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
    }
    int v14 = xpc::dyn_cast_or_default((xpc *)&buf, 0);
    xpc_release(buf.__r_.__value_.__l.__data_);
    xpc_object_t v15 = xpc_dictionary_get_value(*a3, (const char *)*MEMORY[0x1E4F4C1B0]);
    buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v15;
    if (v15) {
      xpc_retain(v15);
    }
    else {
      buf.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
    }
    int v16 = xpc::dyn_cast_or_default((xpc *)&buf, 0);
    xpc_release(buf.__r_.__value_.__l.__data_);
    xpc_object_t v17 = xpc_dictionary_get_value(*a3, (const char *)*MEMORY[0x1E4F4D2E0]);
    buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v17;
    if (v17) {
      xpc_retain(v17);
    }
    else {
      buf.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
    }
    int v18 = xpc::dyn_cast_or_default((xpc *)&buf, (const object *)0xB);
    xpc_release(buf.__r_.__value_.__l.__data_);
    xpc_object_t v19 = xpc_dictionary_get_value(*a3, (const char *)*MEMORY[0x1E4F4D2E8]);
    buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v19;
    if (v19) {
      xpc_retain(v19);
    }
    else {
      buf.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
    }
    int v20 = xpc::dyn_cast_or_default((xpc *)&buf, (const object *)0xB);
    xpc_release(buf.__r_.__value_.__l.__data_);
    memset(object, 170, sizeof(object));
    xpc_object_t v21 = xpc_dictionary_get_value(*a3, (const char *)*MEMORY[0x1E4F4D320]);
    buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v21;
    if (v21) {
      xpc_retain(v21);
    }
    else {
      buf.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
    }
    xpc::dyn_cast_or_default((uint64_t *)object, (xpc *)&buf, (const object *)"", v22);
    xpc_release(buf.__r_.__value_.__l.__data_);
    memset(v74, 170, sizeof(v74));
    xpc_object_t v23 = xpc_dictionary_get_value(*a3, (const char *)*MEMORY[0x1E4F4D328]);
    buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v23;
    if (v23) {
      xpc_retain(v23);
    }
    else {
      buf.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
    }
    xpc::dyn_cast_or_default((uint64_t *)v74, (xpc *)&buf, (const object *)"", v24);
    xpc_release(buf.__r_.__value_.__l.__data_);
    memset(v73, 170, sizeof(v73));
    xpc_object_t v25 = xpc_dictionary_get_value(*a3, (const char *)*MEMORY[0x1E4F4D2D8]);
    buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v25;
    if (v25) {
      xpc_retain(v25);
    }
    else {
      buf.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
    }
    xpc::dyn_cast_or_default((uint64_t *)v73, (xpc *)&buf, (const object *)"", v26);
    xpc_release(buf.__r_.__value_.__l.__data_);
    xpc_object_t v27 = xpc_dictionary_get_value(*a3, (const char *)*MEMORY[0x1E4F4C150]);
    buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v27;
    if (v27) {
      xpc_retain(v27);
    }
    else {
      buf.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
    }
    int v28 = xpc::dyn_cast_or_default((xpc *)&buf, (const object *)8);
    xpc_release(buf.__r_.__value_.__l.__data_);
    uint64_t v29 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v70 = a2;
      uint64_t v30 = v6;
      int v31 = v20;
      int v32 = v14;
      int v33 = SHIBYTE(v76[2]);
      int v34 = (void **)v76[0];
      abm::asString();
      uint64_t v35 = v76;
      p_p = __p;
      long long v37 = "NO";
      if (v33 < 0) {
        uint64_t v35 = v34;
      }
      if (v16) {
        int v38 = "YES";
      }
      else {
        int v38 = "NO";
      }
      LOBYTE(v14) = v32;
      if (v32) {
        long long v37 = "YES";
      }
      size_t v39 = (void **)v74[0];
      if (v72 >= 0) {
        p_p = &__p;
      }
      uint64_t v40 = object;
      if (SHIBYTE(object[2]) < 0) {
        uint64_t v40 = (xpc_object_t *)object[0];
      }
      uint64_t v41 = (void **)v73[0];
      LODWORD(buf.__r_.__value_.__l.__data_) = 136316674;
      if (SHIBYTE(v74[2]) >= 0) {
        size_t v39 = v74;
      }
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v35;
      WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
      if (SHIBYTE(v73[2]) >= 0) {
        uint64_t v41 = v73;
      }
      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v37;
      HIWORD(buf.__r_.__value_.__r.__words[2]) = 2080;
      uint64_t v78 = v38;
      __int16 v79 = 2080;
      int v80 = p_p;
      __int16 v81 = 2080;
      xpc_object_t v82 = v40;
      __int16 v83 = 2080;
      uint64_t v84 = v39;
      __int16 v85 = 2080;
      unint64_t v86 = v41;
      _os_log_impl(&dword_1C5767000, v29, OS_LOG_TYPE_DEFAULT, "#I CCBasebandReset Metric Submission: Baseband Reset Reason: %s, Is MTBF: %s, Was In Voice Call: %s, RAT: %s, PLMN1: %s, PLMN2: %s, SKU: %s", (uint8_t *)&buf, 0x48u);
      if (v72 < 0) {
        operator delete(__p);
      }
      uint64_t v7 = MEMORY[0x1E4F14590];
      int v20 = v31;
      uint64_t v6 = v30;
      a2 = v70;
    }
    uint64_t v42 = *a2;
    *(_DWORD *)(v42 + 68) = *(_DWORD *)(*a2 + 68) | 1;
    xpc_object_t v43 = *(void ***)(v42 + 8);
    uint64_t v44 = (xpc_object_t *)MEMORY[0x1E4FBA920];
    if (v43 == (void **)MEMORY[0x1E4FBA920])
    {
      xpc_object_t v43 = (void **)operator new(0x18uLL);
      const char *v43 = 0;
      v43[1] = 0;
      v43[2] = 0;
      *(void *)(v42 + 8) = v43;
      xpc_object_t v45 = (void *)HIBYTE(v76[2]);
      if ((*((char *)v43 + 23) & 0x80000000) == 0)
      {
LABEL_55:
        if ((v45 & 0x80) != 0)
        {
          std::string::__assign_no_alias<true>(v43, v76[0], (size_t)v76[1]);
        }
        else
        {
          long long v46 = *(_OWORD *)v76;
          v43[2] = v76[2];
          *(_OWORD *)xpc_object_t v43 = v46;
        }
        goto LABEL_66;
      }
    }
    else
    {
      if (v43 == v76) {
        goto LABEL_66;
      }
      xpc_object_t v45 = (void *)HIBYTE(v76[2]);
      if ((*((char *)v43 + 23) & 0x80000000) == 0) {
        goto LABEL_55;
      }
    }
    if ((char)v45 >= 0) {
      uint64_t v47 = v76;
    }
    else {
      uint64_t v47 = (void **)v76[0];
    }
    if ((char)v45 >= 0) {
      uint64_t v48 = v45;
    }
    else {
      uint64_t v48 = v76[1];
    }
    std::string::__assign_no_alias<false>(v43, v47, (size_t)v48);
LABEL_66:
    uint64_t v49 = *a2;
    int v50 = *(_DWORD *)(*a2 + 68);
    *(unsigned char *)(v49 + 41) = v14;
    *(unsigned char *)(v49 + 40) = v16;
    *(_DWORD *)(v49 + 16) = v18;
    *(_DWORD *)(v49 + 20) = v20;
    *(_DWORD *)(v49 + 68) = v50 | 0x21E;
    uint64_t v51 = *(xpc_object_t **)(v49 + 24);
    if (v51 == v44)
    {
      uint64_t v51 = (xpc_object_t *)operator new(0x18uLL);
      *uint64_t v51 = 0;
      v51[1] = 0;
      v51[2] = 0;
      *(void *)(v49 + 24) = v51;
      xpc_object_t v52 = (void *)HIBYTE(object[2]);
      if ((*((char *)v51 + 23) & 0x80000000) == 0)
      {
LABEL_69:
        if ((v52 & 0x80) != 0)
        {
          std::string::__assign_no_alias<true>(v51, object[0], (size_t)object[1]);
        }
        else
        {
          long long v53 = *(_OWORD *)object;
          v51[2] = object[2];
          *(_OWORD *)uint64_t v51 = v53;
        }
        goto LABEL_80;
      }
    }
    else
    {
      if (v51 == object) {
        goto LABEL_80;
      }
      xpc_object_t v52 = (void *)HIBYTE(object[2]);
      if ((*((char *)v51 + 23) & 0x80000000) == 0) {
        goto LABEL_69;
      }
    }
    if ((char)v52 >= 0) {
      xpc_object_t v54 = object;
    }
    else {
      xpc_object_t v54 = (xpc_object_t *)object[0];
    }
    if ((char)v52 >= 0) {
      xpc_object_t v55 = v52;
    }
    else {
      xpc_object_t v55 = object[1];
    }
    std::string::__assign_no_alias<false>(v51, v54, (size_t)v55);
LABEL_80:
    uint64_t v56 = *a2;
    *(_DWORD *)(v56 + 68) = *(_DWORD *)(*a2 + 68) | 0x20;
    int v57 = *(void ***)(v56 + 32);
    if (v57 == v44)
    {
      int v57 = (void **)operator new(0x18uLL);
      xpc_object_t *v57 = 0;
      v57[1] = 0;
      v57[2] = 0;
      *(void *)(v56 + 32) = v57;
      xpc_object_t v58 = (void *)HIBYTE(v74[2]);
      if ((*((char *)v57 + 23) & 0x80000000) == 0)
      {
LABEL_83:
        if ((v58 & 0x80) != 0)
        {
          std::string::__assign_no_alias<true>(v57, v74[0], (size_t)v74[1]);
        }
        else
        {
          long long v59 = *(_OWORD *)v74;
          v57[2] = v74[2];
          *(_OWORD *)int v57 = v59;
        }
        goto LABEL_94;
      }
    }
    else
    {
      if (v57 == v74) {
        goto LABEL_94;
      }
      xpc_object_t v58 = (void *)HIBYTE(v74[2]);
      if ((*((char *)v57 + 23) & 0x80000000) == 0) {
        goto LABEL_83;
      }
    }
    if ((char)v58 >= 0) {
      size_t v60 = v74;
    }
    else {
      size_t v60 = (void **)v74[0];
    }
    if ((char)v58 >= 0) {
      uint64_t v61 = v58;
    }
    else {
      uint64_t v61 = v74[1];
    }
    std::string::__assign_no_alias<false>(v57, v60, (size_t)v61);
LABEL_94:
    uint64_t v62 = *a2;
    *(_DWORD *)(v62 + 68) = *(_DWORD *)(*a2 + 68) | 0x40;
    size_t v63 = *(void ***)(v62 + 48);
    if (v63 == v44)
    {
      size_t v63 = (void **)operator new(0x18uLL);
      uint8_t *v63 = 0;
      v63[1] = 0;
      v63[2] = 0;
      *(void *)(v62 + 48) = v63;
      uint64_t v64 = (void *)HIBYTE(v73[2]);
      if ((*((char *)v63 + 23) & 0x80000000) == 0)
      {
LABEL_97:
        if ((v64 & 0x80) != 0)
        {
          std::string::__assign_no_alias<true>(v63, v73[0], (size_t)v73[1]);
        }
        else
        {
          long long v65 = *(_OWORD *)v73;
          v63[2] = v73[2];
          *(_OWORD *)size_t v63 = v65;
        }
        goto LABEL_108;
      }
    }
    else
    {
      if (v63 == v73) {
        goto LABEL_108;
      }
      uint64_t v64 = (void *)HIBYTE(v73[2]);
      if ((*((char *)v63 + 23) & 0x80000000) == 0) {
        goto LABEL_97;
      }
    }
    if ((char)v64 >= 0) {
      int v66 = v73;
    }
    else {
      int v66 = (void **)v73[0];
    }
    if ((char)v64 >= 0) {
      xpc_object_t v67 = v64;
    }
    else {
      xpc_object_t v67 = v73[1];
    }
    std::string::__assign_no_alias<false>(v63, v66, (size_t)v67);
LABEL_108:
    uint64_t v68 = *a2;
    *(_DWORD *)(v68 + 68) = *(_DWORD *)(*a2 + 68) | 0x80;
    *(_DWORD *)(v68 + 44) = v28;
    if (SHIBYTE(v73[2]) < 0)
    {
      operator delete(v73[0]);
      if ((SHIBYTE(v74[2]) & 0x80000000) == 0)
      {
LABEL_110:
        if ((SHIBYTE(object[2]) & 0x80000000) == 0) {
          goto LABEL_111;
        }
        goto LABEL_115;
      }
    }
    else if ((SHIBYTE(v74[2]) & 0x80000000) == 0)
    {
      goto LABEL_110;
    }
    operator delete(v74[0]);
    if ((SHIBYTE(object[2]) & 0x80000000) == 0)
    {
LABEL_111:
      if ((SHIBYTE(v76[2]) & 0x80000000) == 0) {
        return v6 == v7;
      }
LABEL_116:
      operator delete(v76[0]);
      return v6 == v7;
    }
LABEL_115:
    operator delete(object[0]);
    if ((SHIBYTE(v76[2]) & 0x80000000) == 0) {
      return v6 == v7;
    }
    goto LABEL_116;
  }
  uint64_t v8 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
  {
    LOWORD(buf.__r_.__value_.__l.__data_) = 0;
    _os_log_error_impl(&dword_1C5767000, v8, OS_LOG_TYPE_ERROR, "Failed to get the metric information for CCBasebandReset", (uint8_t *)&buf, 2u);
  }
  return v6 == v7;
}

void sub_1C582F4FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,xpc_object_t a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,xpc_object_t object,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  if (a25 < 0) {
    operator delete(a20);
  }
  if (a31 < 0) {
    operator delete(a26);
  }
  if (a37 < 0) {
    operator delete(a32);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::Loggable<StatsAWD,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig(uint64_t a1)
{
  return MEMORY[0x1F417DA50](a1 + 8);
}

void ctu::Loggable<StatsAWD,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName(char *a1@<X8>)
{
  a1[23] = 9;
  strcpy(a1, "stats.awd");
}

uint64_t ctu::Loggable<StatsAWD,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return MEMORY[0x1F417DD10](a1 + 8);
}

void *ctu::Loggable<StatsAWD,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_1F20F66E0;
  MEMORY[0x1C8790F40](a1 + 1);
  return a1;
}

void ctu::Loggable<StatsAWD,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_1F20F66E0;
  MEMORY[0x1C8790F40](a1 + 1);

  operator delete(a1);
}

xpc_object_t *xpc::array::array(xpc_object_t *a1, xpc_object_t object)
{
  *a1 = object;
  if (object) {
    xpc_retain(object);
  }
  else {
    *a1 = xpc_null_create();
  }
  return a1;
}

xpc_object_t *xpc::array::iterator::iterator(xpc_object_t *a1, xpc_object_t object, void *a3)
{
  *a1 = object;
  if (object) {
    xpc_retain(object);
  }
  else {
    *a1 = xpc_null_create();
  }
  a1[1] = a3;
  return a1;
}

void ctu::Loggable<StatsAWD,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(uint64_t a1)
{
  uint64_t v1 = a1 + 56;
  if (*(void *)(a1 + 56))
  {
    if (!*(void *)(a1 + 80) || (long long v2 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(a1 + 80))) == 0) {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    uint64_t v3 = v2;
    ctu::LoggerCommonBase::getLogDomain((ctu::LoggerCommonBase *)(v1 - 48));
    ctu::TrackedLogger::registerLoggerToServer();
    if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_1C582F940(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

void sub_1C582F95C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void *std::shared_ptr<StatsAWD>::shared_ptr[abi:ne180100]<StatsAWD,std::shared_ptr<StatsAWD> ctu::SharedSynchronizable<StatsAWD>::make_shared_ptr<StatsAWD>(StatsAWD*)::{lambda(StatsAWD*)#1},void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  uint64_t v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = &v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20F6720;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)a2;
  a1[1] = v4;
  if (!a2) {
    return a1;
  }
  uint64_t v6 = *(std::__shared_weak_count **)(a2 + 80);
  if (v6)
  {
    if (v6->__shared_owners_ == -1)
    {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      *(void *)(a2 + 72) = a2;
      *(void *)(a2 + 80) = v4;
      std::__shared_weak_count::__release_weak(v6);
      if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
        goto LABEL_8;
      }
    }
    return a1;
  }
  atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  *(void *)(a2 + 72) = a2;
  *(void *)(a2 + 80) = v4;
  if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
LABEL_8:
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void sub_1C582FA88(void *a1)
{
  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[11], v1, (dispatch_function_t)std::shared_ptr<StatsAWD> ctu::SharedSynchronizable<StatsAWD>::make_shared_ptr<StatsAWD>(StatsAWD*)::{lambda(StatsAWD*)#1}::operator() const(StatsAWD*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_1C582FAB0(_Unwind_Exception *a1)
{
}

void std::__shared_ptr_pointer<StatsAWD *,std::shared_ptr<StatsAWD> ctu::SharedSynchronizable<StatsAWD>::make_shared_ptr<StatsAWD>(StatsAWD*)::{lambda(StatsAWD *)#1},std::allocator<StatsAWD>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<StatsAWD *,std::shared_ptr<StatsAWD> ctu::SharedSynchronizable<StatsAWD>::make_shared_ptr<StatsAWD>(StatsAWD*)::{lambda(StatsAWD *)#1},std::allocator<StatsAWD>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<StatsAWD *,std::shared_ptr<StatsAWD> ctu::SharedSynchronizable<StatsAWD>::make_shared_ptr<StatsAWD>(StatsAWD*)::{lambda(StatsAWD *)#1},std::allocator<StatsAWD>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableI8StatsAWDE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_") {
    return a1 + 24;
  }
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableI8StatsAWDE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableI8StatsAWDE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_"))return 0; {
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableI8StatsAWDE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  }
  return 0;
}

uint64_t std::shared_ptr<StatsAWD> ctu::SharedSynchronizable<StatsAWD>::make_shared_ptr<StatsAWD>(StatsAWD*)::{lambda(StatsAWD*)#1}::operator() const(StatsAWD*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void *ctu::SharedLoggable<StatsAWD,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(void *a1)
{
  *a1 = &unk_1F20F66E0;
  MEMORY[0x1C8790F40](a1 + 1);
  long long v2 = a1[12];
  if (v2) {
    dispatch_release(v2);
  }
  unint64_t v3 = a1[11];
  if (v3) {
    dispatch_release(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[10];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

void ctu::SharedLoggable<StatsAWD,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(void *a1)
{
  *a1 = &unk_1F20F66E0;
  MEMORY[0x1C8790F40](a1 + 1);
  long long v2 = a1[12];
  if (v2) {
    dispatch_release(v2);
  }
  unint64_t v3 = a1[11];
  if (v3) {
    dispatch_release(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[10];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }

  operator delete(a1);
}

void dispatch::async<void ctu::SharedSynchronizable<StatsAWD>::execute_wrapped<StatsAWD::submit(unsigned int,xpc::object)::$_0>(StatsAWD::submit(unsigned int,xpc::object)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<StatsAWD::submit(unsigned int,xpc::object)::$_0,dispatch_queue_s *::default_delete<StatsAWD::submit(unsigned int,xpc::object)::$_0>>)::{lambda(void *)#1}::__invoke(void *a1)
{
  long long v2 = *(uint64_t **)a1;
  uint64_t v3 = **(void **)a1;
  if (*(void *)(v3 + 104))
  {
    int v4 = *((_DWORD *)v2 + 2);
    xpc_object_t v5 = (void *)v2[2];
    xpc_object_t object = v5;
    if (v5) {
      xpc_retain(v5);
    }
    else {
      xpc_object_t object = xpc_null_create();
    }
    StatsAWD::submit_sync(v3, v4, &object);
    xpc_release(object);
  }
  else
  {
    uint64_t v6 = *(NSObject **)(v3 + 40);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_error_impl(&dword_1C5767000, v6, OS_LOG_TYPE_ERROR, "Failed: AWD connection setup failed", buf, 2u);
    }
  }
  xpc_release((xpc_object_t)v2[2]);
  operator delete(v2);
  uint64_t v7 = (std::__shared_weak_count *)*((void *)a1 + 2);
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  operator delete(a1);
}

void sub_1C582FDA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  xpc_release(object);
  xpc_release(v11[2]);
  operator delete(v11);
  xpc_object_t v13 = (std::__shared_weak_count *)v10[2];
  if (v13)
  {
    if (!atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  operator delete(v10);
  _Unwind_Resume(a1);
}

void AnalyticsHelper::create(uint64_t *a1@<X8>)
{
  *a1 = 0xAAAAAAAAAAAAAAAALL;
  a1[1] = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v3 = (AnalyticsHelper *)operator new(0x80uLL);
  AnalyticsHelper::AnalyticsHelper(v3);
  *a1 = 0xAAAAAAAAAAAAAAAALL;
  a1[1] = 0xAAAAAAAAAAAAAAAALL;
  std::shared_ptr<AnalyticsHelper>::shared_ptr[abi:ne180100]<AnalyticsHelper,std::shared_ptr<AnalyticsHelper> ctu::SharedSynchronizable<AnalyticsHelper>::make_shared_ptr<AnalyticsHelper>(AnalyticsHelper*)::{lambda(AnalyticsHelper*)#1},void>(a1, (uint64_t)v3);
  ctu::Loggable<AnalyticsHelper,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(*a1);
}

void sub_1C582FE84(_Unwind_Exception *a1)
{
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_1C582FE98(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void AnalyticsHelper::AnalyticsHelper(AnalyticsHelper *this)
{
  *(void *)this = &unk_1F20F67B0;
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v8, "com.apple.telephony.abm", "stats.analytics");
  GetABMLogServer(&v6);
  initially_inactive = dispatch_queue_attr_make_initially_inactive(0);
  uint64_t v3 = dispatch_queue_create_with_target_V2("stats.analytics", initially_inactive, 0);
  dispatch_set_qos_class_floor(v3, QOS_CLASS_DEFAULT, 0);
  dispatch_activate(v3);
  *((void *)this + 9) = 0;
  *((void *)this + 10) = 0;
  *((void *)this + 11) = v3;
  if (v3)
  {
    dispatch_retain(v3);
    *((void *)this + 12) = 0;
    dispatch_release(v3);
  }
  else
  {
    *((void *)this + 12) = 0;
  }
  *(void *)this = &unk_1F20F6880;
  ctu::OsLogContext::OsLogContext();
  ctu::OsLogContext::OsLogContext();
  ctu::LoggerCommonBase::LoggerCommonBase();
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v10);
  *((void *)this + 1) = &unk_1F20F0070;
  int v4 = v7;
  *((void *)this + 7) = v6;
  *((void *)this + 8) = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v9);
  *(void *)this = &unk_1F20F6910;
  xpc_object_t v5 = v7;
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v8);
  *(void *)this = &unk_1F20F67B0;
  *((void *)this + 15) = 0;
  *((void *)this + 14) = 0;
  *((void *)this + 13) = (char *)this + 112;
}

void sub_1C583008C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15)
{
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&a15);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&a13);
  ctu::SharedSynchronizable<DataStallDetection>::~SharedSynchronizable(v15);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&a11);
  _Unwind_Resume(a1);
}

void sub_1C58300C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)va);
  _Unwind_Resume(a1);
}

const char *AnalyticsHelper::getName(AnalyticsHelper *this)
{
  return "stats.analytics";
}

void AnalyticsHelper::~AnalyticsHelper(char **this)
{
  *this = (char *)&unk_1F20F67B0;
  std::__tree<std::__value_type<std::string,std::map<std::string,xpc::dict>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,xpc::dict>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,xpc::dict>>>>::destroy(this[14]);
  *this = (char *)&unk_1F20F6880;
  MEMORY[0x1C8790F40](this + 1);
  long long v2 = this[12];
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = this[11];
  if (v3) {
    dispatch_release(v3);
  }
  int v4 = (std::__shared_weak_count *)this[10];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
}

{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *this = (char *)&unk_1F20F67B0;
  std::__tree<std::__value_type<std::string,std::map<std::string,xpc::dict>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,xpc::dict>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,xpc::dict>>>>::destroy(this[14]);
  *this = (char *)&unk_1F20F6880;
  MEMORY[0x1C8790F40](this + 1);
  long long v2 = this[12];
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = this[11];
  if (v3) {
    dispatch_release(v3);
  }
  int v4 = (std::__shared_weak_count *)this[10];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
}

{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;
  uint64_t vars8;

  *this = (char *)&unk_1F20F67B0;
  std::__tree<std::__value_type<std::string,std::map<std::string,xpc::dict>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,xpc::dict>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,xpc::dict>>>>::destroy(this[14]);
  *this = (char *)&unk_1F20F6880;
  MEMORY[0x1C8790F40](this + 1);
  long long v2 = this[12];
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = this[11];
  if (v3) {
    dispatch_release(v3);
  }
  int v4 = (std::__shared_weak_count *)this[10];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }

  operator delete(this);
}

void AnalyticsHelper::describeAnalyticsCache(AnalyticsHelper *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 272) = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v3 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)(a2 + 240) = v3;
  *(_OWORD *)(a2 + 256) = v3;
  *(_OWORD *)(a2 + 208) = v3;
  *(_OWORD *)(a2 + 224) = v3;
  *(_OWORD *)(a2 + 176) = v3;
  *(_OWORD *)(a2 + 192) = v3;
  *(_OWORD *)(a2 + 144) = v3;
  *(_OWORD *)(a2 + 160) = v3;
  *(_OWORD *)(a2 + 112) = v3;
  *(_OWORD *)(a2 + 128) = v3;
  *(_OWORD *)(a2 + 80) = v3;
  *(_OWORD *)(a2 + 96) = v3;
  *(_OWORD *)(a2 + 48) = v3;
  *(_OWORD *)(a2 + 64) = v3;
  *(_OWORD *)(a2 + 32) = v3;
  *(_OWORD *)a2 = v3;
  *(_OWORD *)(a2 + 16) = v3;
  int v4 = (void *)(a2 + 16);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100](a2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"** analyticsData **\n", 20);
  xpc_object_t v5 = (void *)*((void *)this + 13);
  uint64_t v30 = (char *)this + 112;
  if (v5 != (void *)((char *)this + 112))
  {
    while (1)
    {
      uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"[", 1);
      uint64_t v7 = (const char *)(v5 + 4);
      if (*((char *)v5 + 55) < 0) {
        uint64_t v7 = *(const char **)v7;
      }
      size_t v8 = strlen(v7);
      uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)v7, v8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"] = \n", 5);
      uint64_t v10 = (void *)v5[7];
      if (v10 != v5 + 8) {
        break;
      }
LABEL_7:
      uint64_t v11 = (char *)v5[1];
      if (v11)
      {
        do
        {
          long long v12 = v11;
          uint64_t v11 = *(char **)v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          long long v12 = (char *)v5[2];
          BOOL v29 = *(void *)v12 == (void)v5;
          xpc_object_t v5 = v12;
        }
        while (!v29);
      }
      xpc_object_t v5 = v12;
      if (v12 == v30) {
        return;
      }
    }
    while (1)
    {
      xpc_object_t v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"<<<", 3);
      int v14 = (const char *)(v10 + 4);
      if (*((char *)v10 + 55) < 0) {
        int v14 = *(const char **)v14;
      }
      size_t v15 = strlen(v14);
      int v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)v14, v15);
      xpc_object_t v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)">>> = ", 6);
      int v18 = (char *)MEMORY[0x1C8792C60](v10[7]);
      memset(__dst, 170, sizeof(__dst));
      size_t v19 = strlen(v18);
      if (v19 >= 0x7FFFFFFFFFFFFFF8) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      int v20 = (unsigned char *)v19;
      if (v19 >= 0x17) {
        break;
      }
      HIBYTE(__dst[2]) = v19;
      xpc_object_t v21 = __dst;
      if (v19) {
        goto LABEL_20;
      }
LABEL_21:
      v20[(void)v21] = 0;
      free(v18);
      if (SHIBYTE(__dst[2]) >= 0) {
        uint64_t v24 = (const char *)__dst;
      }
      else {
        uint64_t v24 = (const char *)__dst[0];
      }
      size_t v25 = strlen(v24);
      long long v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)v24, v25);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"\n", 1);
      if (SHIBYTE(__dst[2]) < 0)
      {
        operator delete(__dst[0]);
        xpc_object_t v27 = (void *)v10[1];
        if (v27)
        {
          do
          {
LABEL_28:
            int v28 = v27;
            xpc_object_t v27 = (void *)*v27;
          }
          while (v27);
          goto LABEL_10;
        }
      }
      else
      {
        xpc_object_t v27 = (void *)v10[1];
        if (v27) {
          goto LABEL_28;
        }
      }
      do
      {
        int v28 = (void *)v10[2];
        BOOL v29 = *v28 == (void)v10;
        uint64_t v10 = v28;
      }
      while (!v29);
LABEL_10:
      uint64_t v10 = v28;
      if (v28 == v5 + 8) {
        goto LABEL_7;
      }
    }
    uint64_t v22 = (v19 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v19 | 7) != 0x17) {
      uint64_t v22 = v19 | 7;
    }
    uint64_t v23 = v22 + 1;
    xpc_object_t v21 = (void **)operator new(v22 + 1);
    __dst[1] = v20;
    _OWORD __dst[2] = (void *)(v23 | 0x8000000000000000);
    __dst[0] = v21;
LABEL_20:
    memcpy(v21, v18, (size_t)v20);
    goto LABEL_21;
  }
}

void sub_1C583057C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

void sub_1C5830590(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

void sub_1C58305A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

void sub_1C58305B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

void sub_1C58305CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
  {
    operator delete(__p);
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream(a10);
    _Unwind_Resume(a1);
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream(a10);
  _Unwind_Resume(a1);
}

void AnalyticsHelper::updateData(uint64_t a1, xpc_object_t *a2)
{
  uint64_t v203 = *MEMORY[0x1E4F143B8];
  memset(&v187, 170, sizeof(v187));
  xpc_object_t value = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E4F4C3C8]);
  object[0] = value;
  if (value) {
    xpc_retain(value);
  }
  else {
    object[0] = xpc_null_create();
  }
  xpc::dyn_cast_or_default((uint64_t *)&v187, (xpc *)object, (const object *)"", v5);
  xpc_release(object[0]);
  memset(__p, 170, sizeof(__p));
  xpc_object_t v6 = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E4F4C548]);
  object[0] = v6;
  if (v6) {
    xpc_retain(v6);
  }
  else {
    object[0] = xpc_null_create();
  }
  xpc::dyn_cast_or_default((uint64_t *)__p, (xpc *)object, (const object *)"None", v7);
  xpc_release(object[0]);
  std::string::size_type size = HIBYTE(v187.__r_.__value_.__r.__words[2]);
  if ((v187.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v187.__r_.__value_.__l.__size_;
  }
  if (!size || (uint64_t v9 = (void *)*MEMORY[0x1E4F4CB40], !xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E4F4CB40])))
  {
    long long v12 = *(NSObject **)(a1 + 40);
    if (!os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
      goto LABEL_342;
    }
    xpc_object_t v13 = (char *)MEMORY[0x1C8792C60](*a2);
    memset(object, 170, sizeof(object));
    size_t v14 = strlen(v13);
    if (v14 >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    size_t v15 = (void *)v14;
    if (v14 >= 0x17)
    {
      uint64_t v94 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v14 | 7) != 0x17) {
        uint64_t v94 = v14 | 7;
      }
      uint64_t v95 = v94 + 1;
      int v16 = operator new(v94 + 1);
      object[1] = v15;
      object[2] = (xpc_object_t)(v95 | 0x8000000000000000);
      object[0] = v16;
    }
    else
    {
      HIBYTE(object[2]) = v14;
      int v16 = object;
      if (!v14) {
        goto LABEL_191;
      }
    }
    memcpy(v16, v13, (size_t)v15);
LABEL_191:
    *((unsigned char *)v15 + (void)v16) = 0;
    free(v13);
    std::string v96 = object;
    if (SHIBYTE(object[2]) < 0) {
      std::string v96 = (xpc_object_t *)object[0];
    }
    LODWORD(buf) = 136315138;
    *(void *)((char *)&buf + 4) = v96;
    _os_log_error_impl(&dword_1C5767000, v12, OS_LOG_TYPE_ERROR, "Input error: Failed to update AnalyticsData with %s", (uint8_t *)&buf, 0xCu);
    if (SHIBYTE(object[2]) < 0) {
      operator delete(object[0]);
    }
    goto LABEL_342;
  }
  xpc_object_t v10 = xpc_dictionary_create(0, 0, 0);
  uint64_t v11 = MEMORY[0x1E4F14590];
  if (v10 || (xpc_object_t v10 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C8792D30](v10) == v11)
    {
      xpc_retain(v10);
      xpc_object_t xdict = v10;
    }
    else
    {
      xpc_object_t xdict = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t xdict = xpc_null_create();
    xpc_object_t v10 = 0;
  }
  uint64_t v180 = a1;
  xpc_release(v10);
  *((void *)&buf + 1) = 0;
  uint64_t v202 = 0;
  *(void *)&long long buf = (char *)&buf + 8;
  v177 = (uint64_t **)(a1 + 104);
  xpc_object_t v17 = std::__tree<std::string>::find<std::string>(a1 + 104, (const void **)&v187.__r_.__value_.__l.__data_);
  v178 = (uint64_t *)(a1 + 112);
  if ((uint64_t *)(a1 + 112) == v17)
  {
LABEL_59:
    xpc_object_t v38 = xpc_dictionary_get_value(xdict, "ReportProcessStatus");
    goto LABEL_60;
  }
  v176 = v9;
  if (&buf == (long long *)(v17 + 7) || (int v18 = (uint64_t *)v17[7], v19 = v17 + 8, v18 == v17 + 8))
  {
    uint64_t v11 = MEMORY[0x1E4F14590];
    goto LABEL_59;
  }
  while (2)
  {
    memset(object, 170, sizeof(object));
    std::__tree<std::__value_type<std::string,xpc::dict>,std::__map_value_compare<std::string,std::__value_type<std::string,xpc::dict>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xpc::dict>>>::__construct_node<std::pair<std::string const,xpc::dict> const&>(object, (uint64_t)&buf, (uint64_t)(v18 + 4));
    int v20 = (uint64_t *)object[0];
    xpc_object_t v21 = (uint64_t *)*((void *)&buf + 1);
    uint64_t v22 = (uint64_t **)&buf + 1;
    uint64_t v23 = (uint64_t **)&buf + 1;
    if (!*((void *)&buf + 1)) {
      goto LABEL_50;
    }
    int v24 = *((char *)object[0] + 55);
    if (v24 >= 0) {
      size_t v25 = (char *)object[0] + 32;
    }
    else {
      size_t v25 = (char *)*((void *)object[0] + 4);
    }
    if (v24 >= 0) {
      unint64_t v26 = *((unsigned __int8 *)object[0] + 55);
    }
    else {
      unint64_t v26 = *((void *)object[0] + 5);
    }
    do
    {
      while (1)
      {
        uint64_t v22 = (uint64_t **)v21;
        uint64_t v29 = v21[4];
        xpc_object_t v27 = v21 + 4;
        int v28 = (void *)v29;
        int v30 = *((char *)v27 + 23);
        int v31 = v30 >= 0 ? v27 : v28;
        unint64_t v32 = v30 >= 0 ? *((unsigned __int8 *)v27 + 23) : v27[1];
        size_t v33 = v32 >= v26 ? v26 : v32;
        int v34 = memcmp(v25, v31, v33);
        if (v34) {
          break;
        }
        if (v26 >= v32) {
          goto LABEL_48;
        }
LABEL_34:
        xpc_object_t v21 = *v22;
        uint64_t v23 = v22;
        if (!*v22) {
          goto LABEL_50;
        }
      }
      if (v34 < 0) {
        goto LABEL_34;
      }
LABEL_48:
      xpc_object_t v21 = v22[1];
    }
    while (v21);
    uint64_t v23 = v22 + 1;
LABEL_50:
    *int v20 = 0;
    v20[1] = 0;
    v20[2] = (uint64_t)v22;
    *uint64_t v23 = v20;
    if (*(void *)buf)
    {
      *(void *)&long long buf = *(void *)buf;
      int v20 = *v23;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)&buf + 1), v20);
    ++v202;
    uint64_t v35 = (uint64_t *)v18[1];
    if (v35)
    {
      do
      {
        int v36 = v35;
        uint64_t v35 = (uint64_t *)*v35;
      }
      while (v35);
    }
    else
    {
      do
      {
        int v36 = (uint64_t *)v18[2];
        BOOL v37 = *v36 == (void)v18;
        int v18 = v36;
      }
      while (!v37);
    }
    int v18 = v36;
    if (v36 != v19) {
      continue;
    }
    break;
  }
  xpc_object_t v43 = (char *)*((void *)&buf + 1);
  HIBYTE(object[2]) = 9;
  strcpy((char *)object, "EventInfo");
  uint64_t v9 = v176;
  uint64_t v11 = MEMORY[0x1E4F14590];
  if (!*((void *)&buf + 1)) {
    goto LABEL_59;
  }
  uint64_t v44 = (char *)&buf + 8;
  while (2)
  {
    while (2)
    {
      int v45 = v43[55];
      if (v45 >= 0) {
        long long v46 = v43 + 32;
      }
      else {
        long long v46 = (const void *)*((void *)v43 + 4);
      }
      if (v45 >= 0) {
        unint64_t v47 = v43[55];
      }
      else {
        unint64_t v47 = *((void *)v43 + 5);
      }
      if (v47 >= 9) {
        size_t v48 = 9;
      }
      else {
        size_t v48 = v47;
      }
      int v49 = memcmp(v46, object, v48);
      if (v49)
      {
        if ((v49 & 0x80000000) == 0) {
          break;
        }
        goto LABEL_71;
      }
      if (v47 < 9)
      {
LABEL_71:
        xpc_object_t v43 = (char *)*((void *)v43 + 1);
        if (!v43) {
          goto LABEL_86;
        }
        continue;
      }
      break;
    }
    uint64_t v44 = v43;
    xpc_object_t v43 = *(char **)v43;
    if (v43) {
      continue;
    }
    break;
  }
LABEL_86:
  if (v44 == (char *)&buf + 8) {
    goto LABEL_59;
  }
  int v50 = v44[55];
  if (v50 >= 0) {
    uint64_t v51 = v44 + 32;
  }
  else {
    uint64_t v51 = (const void *)*((void *)v44 + 4);
  }
  if (v50 >= 0) {
    unint64_t v52 = v44[55];
  }
  else {
    unint64_t v52 = *((void *)v44 + 5);
  }
  if (v52 >= 9) {
    size_t v53 = 9;
  }
  else {
    size_t v53 = v52;
  }
  int v54 = memcmp(object, v51, v53);
  if (v54)
  {
    if (v54 < 0) {
      goto LABEL_59;
    }
  }
  else if (v52 > 9)
  {
    goto LABEL_59;
  }
  xpc_object_t v97 = (xpc_object_t)*((void *)v44 + 7);
  if (v97) {
    xpc_retain(*((xpc_object_t *)v44 + 7));
  }
  else {
    xpc_object_t v97 = xpc_null_create();
  }
  xpc_release(xdict);
  xpc_object_t xdict = v97;
  xpc_object_t v38 = xpc_dictionary_get_value(v97, "ReportProcessStatus");
LABEL_60:
  object[0] = v38;
  if (v38) {
    xpc_retain(v38);
  }
  else {
    object[0] = xpc_null_create();
  }
  LOBYTE(v39) = xpc::dyn_cast_or_default((xpc *)object, (const object *)0xFF);
  xpc_release(object[0]);
  xpc_object_t v185 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  xpc_object_t v40 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v41 = v40;
  if (v40)
  {
    xpc_object_t v185 = v40;
    goto LABEL_66;
  }
  xpc_object_t v41 = xpc_null_create();
  xpc_object_t v185 = v41;
  if (v41)
  {
LABEL_66:
    if (MEMORY[0x1C8792D30](v41) != v11)
    {
      xpc_object_t v42 = xpc_null_create();
      goto LABEL_100;
    }
    xpc_retain(v41);
  }
  else
  {
    xpc_object_t v42 = xpc_null_create();
    xpc_object_t v41 = 0;
LABEL_100:
    xpc_object_t v185 = v42;
  }
  xpc_release(v41);
  object[0] = a2;
  object[1] = v9;
  __s1[0] = (uint64_t)&v185;
  __s1[1] = (uint64_t)v9;
  xpc::dict::object_proxy::operator=((uint64_t)__s1, (uint64_t)object, &v184);
  xpc_release(v184);
  xpc_object_t v184 = 0;
  memset(__s1, 170, sizeof(__s1));
  xpc_object_t v55 = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E4F4C540]);
  object[0] = v55;
  if (v55) {
    xpc_retain(v55);
  }
  else {
    object[0] = xpc_null_create();
  }
  xpc::dyn_cast_or_default(__s1, (xpc *)object, (const object *)"", v56);
  xpc_release(object[0]);
  int v57 = (const void *)*MEMORY[0x1E4F4C4C0];
  size_t v58 = strlen((const char *)*MEMORY[0x1E4F4C4C0]);
  size_t v59 = v58;
  size_t v60 = HIBYTE(__s1[2]);
  if ((SHIBYTE(__s1[2]) & 0x80000000) == 0)
  {
    if (v58 != -1)
    {
      uint64_t v61 = HIBYTE(__s1[2]);
      if (HIBYTE(__s1[2]) >= v58) {
        size_t v62 = v58;
      }
      else {
        size_t v62 = HIBYTE(__s1[2]);
      }
      if (memcmp(__s1, v57, v62)) {
        goto LABEL_117;
      }
LABEL_116:
      if (v61 != v59) {
        goto LABEL_117;
      }
LABEL_131:
      std::map<std::string,xpc::dict>::insert_or_assign[abi:ne180100]<xpc::dict>((void **)&buf, (const std::string::value_type **)__p, &v185);
      if (SHIBYTE(v187.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v182, v187.__r_.__value_.__l.__data_, v187.__r_.__value_.__l.__size_);
      }
      else {
        std::string v182 = v187;
      }
      AnalyticsHelper::submitEvent(v180, (uint64_t)&v182, &buf);
      if (SHIBYTE(v182.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v182.__r_.__value_.__l.__data_);
      }
      int v39 = 1;
      goto LABEL_208;
    }
LABEL_405:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v58 == -1) {
    goto LABEL_405;
  }
  uint64_t v61 = __s1[1];
  if (__s1[1] >= v58) {
    size_t v63 = v58;
  }
  else {
    size_t v63 = __s1[1];
  }
  if (!memcmp((const void *)__s1[0], v57, v63)) {
    goto LABEL_116;
  }
LABEL_117:
  uint64_t v64 = (const void *)*MEMORY[0x1E4F4C5A0];
  size_t v65 = strlen((const char *)*MEMORY[0x1E4F4C5A0]);
  size_t v66 = v65;
  if ((v60 & 0x80) != 0)
  {
    if (v65 != -1)
    {
      uint64_t v67 = __s1[1];
      int v39 = v39;
      if (__s1[1] >= v65) {
        size_t v69 = v65;
      }
      else {
        size_t v69 = __s1[1];
      }
      if (!memcmp((const void *)__s1[0], v64, v69)) {
        goto LABEL_129;
      }
      goto LABEL_137;
    }
LABEL_406:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v65 == -1) {
    goto LABEL_406;
  }
  uint64_t v67 = v60;
  int v39 = v39;
  if (v60 >= v65) {
    size_t v68 = v65;
  }
  else {
    size_t v68 = v60;
  }
  if (memcmp(__s1, v64, v68)) {
    goto LABEL_137;
  }
LABEL_129:
  if (v67 == v66 && !v39) {
    goto LABEL_131;
  }
LABEL_137:
  uint64_t v70 = (const void *)*MEMORY[0x1E4F4C4B0];
  size_t v71 = strlen((const char *)*MEMORY[0x1E4F4C4B0]);
  size_t v72 = v71;
  if ((v60 & 0x80) == 0)
  {
    if (v71 != -1)
    {
      uint64_t v73 = v60;
      if (v60 >= v71) {
        size_t v74 = v71;
      }
      else {
        size_t v74 = v60;
      }
      if (memcmp(__s1, v70, v74)) {
        goto LABEL_182;
      }
      goto LABEL_149;
    }
LABEL_407:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v71 == -1) {
    goto LABEL_407;
  }
  uint64_t v73 = __s1[1];
  if (__s1[1] >= v71) {
    size_t v75 = v71;
  }
  else {
    size_t v75 = __s1[1];
  }
  if (memcmp((const void *)__s1[0], v70, v75))
  {
LABEL_182:
    if ((v60 & 0x80u) == 0) {
      uint64_t v93 = v60;
    }
    else {
      uint64_t v93 = __s1[1];
    }
    if (!v93) {
      std::map<std::string,xpc::dict>::insert_or_assign[abi:ne180100]<xpc::dict>((void **)&buf, (const std::string::value_type **)__p, &v185);
    }
    goto LABEL_208;
  }
LABEL_149:
  if (v73 != v72) {
    goto LABEL_182;
  }
  std::map<std::string,xpc::dict>::insert_or_assign[abi:ne180100]<xpc::dict>((void **)&buf, (const std::string::value_type **)__p, &v185);
  xpc_object_t v76 = xpc_int64_create(0);
  if (!v76) {
    xpc_object_t v76 = xpc_null_create();
  }
  xpc_dictionary_set_value(xdict, "ReportProcessStatus", v76);
  xpc_object_t v77 = xpc_null_create();
  xpc_release(v76);
  xpc_release(v77);
  HIBYTE(object[2]) = 9;
  strcpy((char *)object, "EventInfo");
  uint64_t v78 = (char *)*((void *)&buf + 1);
  __int16 v79 = (uint64_t *)&buf + 1;
  if (!*((void *)&buf + 1)) {
    goto LABEL_202;
  }
  int v80 = (char *)&buf + 8;
  while (2)
  {
    while (2)
    {
      int v81 = v78[55];
      if (v81 >= 0) {
        xpc_object_t v82 = v78 + 32;
      }
      else {
        xpc_object_t v82 = (const void *)*((void *)v78 + 4);
      }
      if (v81 >= 0) {
        unint64_t v83 = v78[55];
      }
      else {
        unint64_t v83 = *((void *)v78 + 5);
      }
      if (v83 >= 9) {
        size_t v84 = 9;
      }
      else {
        size_t v84 = v83;
      }
      int v85 = memcmp(v82, object, v84);
      if (v85)
      {
        if ((v85 & 0x80000000) == 0) {
          break;
        }
        goto LABEL_154;
      }
      if (v83 < 9)
      {
LABEL_154:
        uint64_t v78 = (char *)*((void *)v78 + 1);
        if (!v78) {
          goto LABEL_169;
        }
        continue;
      }
      break;
    }
    int v80 = v78;
    uint64_t v78 = *(char **)v78;
    if (v78) {
      continue;
    }
    break;
  }
LABEL_169:
  __int16 v79 = (uint64_t *)&buf + 1;
  if (v80 == (char *)&buf + 8) {
    goto LABEL_202;
  }
  int v86 = v80[55];
  if (v86 >= 0) {
    uint64_t v87 = v80 + 32;
  }
  else {
    uint64_t v87 = (const void *)*((void *)v80 + 4);
  }
  if (v86 >= 0) {
    unint64_t v88 = v80[55];
  }
  else {
    unint64_t v88 = *((void *)v80 + 5);
  }
  if (v88 >= 9) {
    size_t v89 = 9;
  }
  else {
    size_t v89 = v88;
  }
  int v90 = memcmp(object, v87, v89);
  if (v90)
  {
    if ((v90 & 0x80000000) == 0) {
      goto LABEL_181;
    }
LABEL_201:
    __int16 v79 = (uint64_t *)v80;
LABEL_202:
    v181.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
    *(void *)v200 = 0xAAAAAAAAAAAAAAAALL;
    v98 = std::__tree<std::__value_type<std::string,xpc::dict>,std::__map_value_compare<std::string,std::__value_type<std::string,xpc::dict>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xpc::dict>>>::__find_equal<std::string>((uint64_t **)&buf, v79, (uint64_t **)&v181, (uint64_t **)v200, (const void **)object);
    if (!*v98)
    {
      long long v99 = v98;
      __int16 v100 = operator new(0x40uLL);
      v100[2] = *(_OWORD *)object;
      xpc_object_t v101 = object[2];
      memset(object, 0, sizeof(object));
      *((void *)v100 + 6) = v101;
      *((void *)v100 + 7) = xdict;
      xpc_object_t xdict = xpc_null_create();
      std::string::size_type v102 = v181.__r_.__value_.__r.__words[0];
      *(void *)__int16 v100 = 0;
      *((void *)v100 + 1) = 0;
      *((void *)v100 + 2) = v102;
      *long long v99 = (uint64_t)v100;
      if (*(void *)buf)
      {
        *(void *)&long long buf = *(void *)buf;
        __int16 v100 = (_OWORD *)*v99;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)&buf + 1), (uint64_t *)v100);
      ++v202;
    }
    xpc_object_t v91 = xdict;
  }
  else
  {
    if (v88 > 9) {
      goto LABEL_201;
    }
LABEL_181:
    xpc_object_t v91 = xpc_null_create();
    unint64_t v92 = (void *)*((void *)v80 + 7);
    *((void *)v80 + 7) = xdict;
    xpc_release(v92);
  }
  int v39 = 0;
  xpc_object_t xdict = v91;
LABEL_208:
  uint64_t v103 = *(NSObject **)(v180 + 40);
  if (os_log_type_enabled(v103, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v104 = &v187;
    if ((v187.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      uint64_t v104 = (std::string *)v187.__r_.__value_.__r.__words[0];
    }
    uint64_t v105 = __s1;
    if (__s1[2] < 0) {
      uint64_t v105 = (uint64_t *)__s1[0];
    }
    LODWORD(object[0]) = 136315650;
    *(xpc_object_t *)((char *)object + 4) = v104;
    WORD2(object[1]) = 2080;
    *(xpc_object_t *)((char *)&object[1] + 6) = v105;
    HIWORD(object[2]) = 1024;
    LODWORD(v189) = v39;
    _os_log_impl(&dword_1C5767000, v103, OS_LOG_TYPE_DEFAULT, "#I Updating AnalyticsData for event[%s]: command=%s, status=%d", (uint8_t *)object, 0x1Cu);
  }
  if (v39 == 1)
  {
    uint64_t v106 = std::__tree<std::string>::find<std::string>((uint64_t)v177, (const void **)&v187.__r_.__value_.__l.__data_);
    if (v178 != v106)
    {
      uint64_t v107 = v106;
      std::vector<std::string>::pointer v108 = (uint64_t *)v106[1];
      if (v108)
      {
        do
        {
          uint64_t v109 = v108;
          std::vector<std::string>::pointer v108 = (uint64_t *)*v108;
        }
        while (v108);
      }
      else
      {
        uint64_t v130 = v106;
        do
        {
          uint64_t v109 = (uint64_t *)v130[2];
          BOOL v37 = *v109 == (void)v130;
          uint64_t v130 = v109;
        }
        while (!v37);
      }
      if (*v177 == v106) {
        *v177 = v109;
      }
      std::string v131 = *(uint64_t **)(v180 + 112);
      --*(void *)(v180 + 120);
      std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v131, v107);
      std::__tree<std::__value_type<std::string,xpc::dict>,std::__map_value_compare<std::string,std::__value_type<std::string,xpc::dict>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xpc::dict>>>::destroy((char *)v107[8]);
      if (*((char *)v107 + 55) < 0) {
        operator delete((void *)v107[4]);
      }
      operator delete(v107);
    }
    goto LABEL_338;
  }
  uint64_t v110 = v202;
  if (!v202) {
    goto LABEL_338;
  }
  uint64_t v111 = v178;
  uint64_t v112 = *v178;
  if (!*v178)
  {
    __int16 v121 = v178;
    if (*v177 == v178)
    {
      uint64_t v132 = 0;
      long long v133 = v178;
      __int16 v121 = v178;
      goto LABEL_321;
    }
    goto LABEL_276;
  }
  if ((v187.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v113 = &v187;
  }
  else {
    int v113 = (std::string *)v187.__r_.__value_.__r.__words[0];
  }
  if ((v187.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v114 = HIBYTE(v187.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v114 = v187.__r_.__value_.__l.__size_;
  }
  uint64_t v115 = *v178;
  while (2)
  {
    while (1)
    {
      int v116 = *(char *)(v115 + 55);
      uint64_t v117 = v116 >= 0 ? (const void *)(v115 + 32) : *(const void **)(v115 + 32);
      std::string::size_type v118 = v116 >= 0 ? *(unsigned __int8 *)(v115 + 55) : *(void *)(v115 + 40);
      size_t v119 = v114 >= v118 ? v118 : v114;
      int v120 = memcmp(v117, v113, v119);
      if (!v120) {
        break;
      }
      if (v120 < 0) {
        goto LABEL_230;
      }
LABEL_228:
      uint64_t v111 = (uint64_t *)v115;
      uint64_t v115 = *(void *)v115;
      if (!v115) {
        goto LABEL_245;
      }
    }
    if (v118 >= v114) {
      goto LABEL_228;
    }
LABEL_230:
    uint64_t v115 = *(void *)(v115 + 8);
    if (v115) {
      continue;
    }
    break;
  }
LABEL_245:
  __int16 v121 = v178;
  if (v111 != v178)
  {
    int v122 = *((char *)v111 + 55);
    if (v122 >= 0) {
      unint64_t v123 = v111 + 4;
    }
    else {
      unint64_t v123 = (const void *)v111[4];
    }
    if (v122 >= 0) {
      size_t v124 = *((unsigned __int8 *)v111 + 55);
    }
    else {
      size_t v124 = v111[5];
    }
    if (v124 >= v114) {
      size_t v125 = v114;
    }
    else {
      size_t v125 = v124;
    }
    int v126 = memcmp(v113, v123, v125);
    if (v126)
    {
      if ((v126 & 0x80000000) == 0)
      {
LABEL_257:
        BOOL v127 = v111 + 8;
        std::__tree<std::__value_type<std::string,xpc::dict>,std::__map_value_compare<std::string,std::__value_type<std::string,xpc::dict>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xpc::dict>>>::destroy((char *)v111[8]);
        uint64_t v128 = *((void *)&buf + 1);
        v111[7] = buf;
        v111[8] = v128;
        uint64_t v129 = v202;
        v111[9] = v202;
        if (v129)
        {
          *(void *)(v128 + 16) = v127;
          *(void *)&long long buf = (char *)&buf + 8;
          *((void *)&buf + 1) = 0;
          uint64_t v202 = 0;
        }
        else
        {
          v111[7] = (uint64_t)v127;
        }
        goto LABEL_338;
      }
    }
    else if (v114 >= v124)
    {
      goto LABEL_257;
    }
    __int16 v121 = v111;
  }
  uint64_t v132 = *v121;
  if (*v177 == v121)
  {
    long long v133 = v121;
    goto LABEL_321;
  }
  if (!v132)
  {
LABEL_276:
    long long v133 = v121;
    do
    {
      long long v135 = v133;
      long long v133 = (uint64_t *)v133[2];
    }
    while ((uint64_t *)*v133 == v135);
    uint64_t v132 = 0;
    goto LABEL_279;
  }
  long long v134 = (uint64_t *)*v121;
  do
  {
    long long v133 = v134;
    long long v134 = (uint64_t *)v134[1];
  }
  while (v134);
LABEL_279:
  int v136 = *((char *)v133 + 55);
  if (v136 >= 0) {
    long long v137 = v133 + 4;
  }
  else {
    long long v137 = (const void *)v133[4];
  }
  if (v136 >= 0) {
    size_t v138 = *((unsigned __int8 *)v133 + 55);
  }
  else {
    size_t v138 = v133[5];
  }
  char v139 = HIBYTE(v187.__r_.__value_.__r.__words[2]);
  if ((v187.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    unint64_t v140 = &v187;
  }
  else {
    unint64_t v140 = (std::string *)v187.__r_.__value_.__r.__words[0];
  }
  if ((v187.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v141 = HIBYTE(v187.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v141 = v187.__r_.__value_.__l.__size_;
  }
  if (v141 >= v138) {
    size_t v142 = v138;
  }
  else {
    size_t v142 = v141;
  }
  int v143 = memcmp(v137, v140, v142);
  if (v143)
  {
    if (v143 < 0) {
      goto LABEL_321;
    }
LABEL_298:
    if (!v112)
    {
      long long v133 = v178;
      goto LABEL_329;
    }
    while (1)
    {
      long long v133 = (uint64_t *)v112;
      size_t v144 = *(unsigned __int8 *)(v112 + 55);
      size_t v145 = *(void *)(v112 + 40);
      if ((v144 & 0x80u) == 0) {
        v146 = (const void *)(v112 + 32);
      }
      else {
        v146 = *(const void **)(v112 + 32);
      }
      if ((v144 & 0x80u) == 0) {
        size_t v147 = v144;
      }
      else {
        size_t v147 = v145;
      }
      if (v147 >= v141) {
        size_t v148 = v141;
      }
      else {
        size_t v148 = v147;
      }
      int v149 = memcmp(v140, v146, v148);
      if (v149)
      {
        if ((v149 & 0x80000000) == 0) {
          goto LABEL_314;
        }
      }
      else if (v141 >= v147)
      {
LABEL_314:
        int v150 = memcmp(v146, v140, v148);
        if (v150)
        {
          if ((v150 & 0x80000000) == 0) {
            goto LABEL_338;
          }
        }
        else if (v147 >= v141)
        {
          goto LABEL_338;
        }
        uint64_t v112 = v133[1];
        if (!v112)
        {
          v178 = v133 + 1;
          goto LABEL_329;
        }
        continue;
      }
      uint64_t v112 = *v133;
      if (!*v133)
      {
        v178 = v133;
        goto LABEL_329;
      }
    }
  }
  if (v138 >= v141) {
    goto LABEL_298;
  }
LABEL_321:
  v151 = v133 + 1;
  if (!v132) {
    v151 = v121;
  }
  v178 = v151;
  if (!*v151)
  {
    if (!v132) {
      long long v133 = v121;
    }
    char v139 = HIBYTE(v187.__r_.__value_.__r.__words[2]);
LABEL_329:
    CFTypeRef v152 = (uint64_t *)operator new(0x50uLL);
    CFTypeRef v153 = (std::string *)(v152 + 4);
    if (v139 < 0)
    {
      std::string::__init_copy_ctor_external(v153, v187.__r_.__value_.__l.__data_, v187.__r_.__value_.__l.__size_);
      uint64_t v110 = v202;
    }
    else
    {
      *(_OWORD *)&v153->__r_.__value_.__l.__data_ = *(_OWORD *)&v187.__r_.__value_.__l.__data_;
      v152[6] = v187.__r_.__value_.__r.__words[2];
    }
    long long v154 = buf;
    v152[8] = *((void *)&buf + 1);
    v155 = v152 + 8;
    v152[7] = v154;
    v152[9] = v110;
    if (v110)
    {
      *(void *)(*((void *)&v154 + 1) + 16) = v155;
      *(void *)&long long buf = (char *)&buf + 8;
      *((void *)&buf + 1) = 0;
      uint64_t v202 = 0;
    }
    else
    {
      v152[7] = (uint64_t)v155;
    }
    *CFTypeRef v152 = 0;
    v152[1] = 0;
    v152[2] = (uint64_t)v133;
    uint64_t *v178 = (uint64_t)v152;
    v156 = (uint64_t *)**v177;
    if (v156)
    {
      *v177 = v156;
      CFTypeRef v152 = (uint64_t *)*v178;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v180 + 112), v152);
    ++*(void *)(v180 + 120);
  }
LABEL_338:
  v157 = *(NSObject **)(v180 + 40);
  if (!os_log_type_enabled(v157, OS_LOG_TYPE_DEBUG))
  {
    if (SHIBYTE(__s1[2]) < 0) {
      goto LABEL_340;
    }
    goto LABEL_341;
  }
  AnalyticsHelper::describeAnalyticsCache((AnalyticsHelper *)v180, (uint64_t)object);
  if ((v198 & 0x10) != 0)
  {
    v160 = v197;
    if (v197 < v194)
    {
      v197 = v194;
      v160 = v194;
    }
    v161 = v193;
  }
  else
  {
    if ((v198 & 8) == 0)
    {
      int64_t v158 = 0;
      std::string::size_type v159 = 0;
      goto LABEL_359;
    }
    v161 = v190;
    v160 = v192;
  }
  int64_t v158 = (char *)v160 - (char *)v161;
  if (v158)
  {
    v162 = &v196;
    if ((v196.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      v162 = (std::string *)v196.__r_.__value_.__r.__words[0];
    }
    std::string::size_type v159 = (char *)v161 - (char *)v162;
  }
  else
  {
    std::string::size_type v159 = 0;
  }
LABEL_359:
  std::string v181 = v196;
  memset(&v196, 0, sizeof(v196));
  std::string::size_type v163 = v159 + v158;
  if (SHIBYTE(v181.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::size_type v164 = v181.__r_.__value_.__l.__size_;
    if (v181.__r_.__value_.__l.__size_ >= v163)
    {
      v165 = (std::string *)v181.__r_.__value_.__r.__words[0];
      v181.__r_.__value_.__l.__size_ = v163;
      goto LABEL_365;
    }
LABEL_363:
    std::string::append(&v181, v163 - v164, 0);
  }
  else
  {
    std::string::size_type v164 = HIBYTE(v181.__r_.__value_.__r.__words[2]);
    if (v163 > HIBYTE(v181.__r_.__value_.__r.__words[2])) {
      goto LABEL_363;
    }
    *((unsigned char *)&v181.__r_.__value_.__s + 23) = v163 & 0x7F;
    v165 = &v181;
LABEL_365:
    v165->__r_.__value_.__s.__data_[v163] = 0;
  }
  if (SHIBYTE(v181.__r_.__value_.__r.__words[2]) < 0)
  {
    if (v159 == -1)
    {
      v181.__r_.__value_.__l.__size_ = 0;
      *v181.__r_.__value_.__l.__data_ = 0;
      goto LABEL_372;
    }
LABEL_371:
    std::string::__erase_external_with_move(&v181, 0, v159);
  }
  else
  {
    if (v159 != -1) {
      goto LABEL_371;
    }
    *((unsigned char *)&v181.__r_.__value_.__s + 23) = 0;
    v181.__r_.__value_.__s.__data_[0] = 0;
  }
LABEL_372:
  v166 = &v196;
  v197 = 0;
  std::string::size_type v167 = HIBYTE(v196.__r_.__value_.__r.__words[2]);
  if ((v196.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v168 = &v196;
  }
  else {
    v168 = (std::string *)v196.__r_.__value_.__r.__words[0];
  }
  if ((v196.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v169 = HIBYTE(v196.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v169 = v196.__r_.__value_.__l.__size_;
  }
  if ((v198 & 8) != 0)
  {
    v190 = v168;
    v191 = v168;
    v197 = (std::string *)((char *)v168 + v169);
    v192 = (std::string *)((char *)v168 + v169);
  }
  if ((v198 & 0x10) != 0)
  {
    v197 = (std::string *)((char *)v168 + v169);
    if ((*((unsigned char *)&v196.__r_.__value_.__s + 23) & 0x80) != 0)
    {
      std::string::size_type v170 = (v196.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
      if (v196.__r_.__value_.__l.__size_ < v170)
      {
        std::string::size_type v167 = v196.__r_.__value_.__l.__size_;
        goto LABEL_385;
      }
      v196.__r_.__value_.__l.__size_ = (v196.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
      v166 = (std::string *)v196.__r_.__value_.__r.__words[0];
LABEL_388:
      v166->__r_.__value_.__s.__data_[v170] = 0;
    }
    else
    {
      std::string::size_type v170 = 22;
      if (HIBYTE(v196.__r_.__value_.__r.__words[2]) > 0x15u)
      {
        *((unsigned char *)&v196.__r_.__value_.__s + 23) = 22;
        goto LABEL_388;
      }
LABEL_385:
      std::string::append(&v196, v170 - v167, 0);
    }
    std::string::size_type v171 = HIBYTE(v196.__r_.__value_.__r.__words[2]);
    if ((v196.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v171 = v196.__r_.__value_.__l.__size_;
    }
    v193 = v168;
    v194 = v168;
    v195 = (char *)v168 + v171;
    if ((v198 & 3) != 0)
    {
      if (v169 >> 31)
      {
        uint64_t v172 = ((v169 - 0x80000000) * (unsigned __int128)0x200000005uLL) >> 64;
        unint64_t v173 = 0x7FFFFFFF * ((v172 + ((v169 - 0x80000000 - v172) >> 1)) >> 30);
        v168 = (std::string *)((char *)v168 + v173 + 0x7FFFFFFF);
        std::string::size_type v169 = v169 - v173 - 0x7FFFFFFF;
        v194 = v168;
      }
      if (v169) {
        v194 = (std::string *)((char *)v168 + v169);
      }
    }
  }
  v174 = &v181;
  if ((v181.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    v174 = (std::string *)v181.__r_.__value_.__r.__words[0];
  }
  *(_DWORD *)v200 = 136315138;
  *(void *)&v200[4] = v174;
  _os_log_debug_impl(&dword_1C5767000, v157, OS_LOG_TYPE_DEBUG, "#D %s", v200, 0xCu);
  if (SHIBYTE(v181.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v181.__r_.__value_.__l.__data_);
  }
  object[0] = *(xpc_object_t *)MEMORY[0x1E4FBA408];
  v175 = *(void **)(MEMORY[0x1E4FBA408] + 72);
  *(xpc_object_t *)((char *)object + *((void *)object[0] - 3)) = *(xpc_object_t *)(MEMORY[0x1E4FBA408] + 64);
  object[2] = v175;
  uint64_t v189 = MEMORY[0x1E4FBA470] + 16;
  if (SHIBYTE(v196.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v196.__r_.__value_.__l.__data_);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1C8791FB0](&v199);
  if (SHIBYTE(__s1[2]) < 0) {
LABEL_340:
  }
    operator delete((void *)__s1[0]);
LABEL_341:
  xpc_release(v185);
  std::__tree<std::__value_type<std::string,xpc::dict>,std::__map_value_compare<std::string,std::__value_type<std::string,xpc::dict>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xpc::dict>>>::destroy(*((char **)&buf + 1));
  xpc_release(xdict);
LABEL_342:
  if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v187.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
LABEL_346:
    operator delete(v187.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(__p[0]);
  if (SHIBYTE(v187.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_346;
  }
}

void sub_1C583197C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, xpc_object_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,xpc_object_t object,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,xpc_object_t a48)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void xpc::dict::object_proxy::operator=(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  xpc_object_t value = xpc_dictionary_get_value(**(xpc_object_t **)a2, *(const char **)(a2 + 8));
  xpc_object_t v6 = value;
  if (value)
  {
    xpc_retain(value);
  }
  else
  {
    xpc_object_t v6 = xpc_null_create();
    if (!v6)
    {
      xpc_object_t v7 = xpc_null_create();
      xpc_object_t v6 = 0;
      goto LABEL_5;
    }
  }
  xpc_retain(v6);
  xpc_object_t v7 = v6;
LABEL_5:
  xpc_dictionary_set_value(**(xpc_object_t **)a1, *(const char **)(a1 + 8), v7);
  *a3 = v7;
  xpc_object_t v8 = xpc_null_create();
  xpc_release(v8);
  xpc_release(v6);
}

void std::map<std::string,xpc::dict>::insert_or_assign[abi:ne180100]<xpc::dict>(void **a1, const std::string::value_type **a2, xpc_object_t *a3)
{
  xpc_object_t v6 = (uint64_t *)(a1 + 1);
  xpc_object_t v7 = a1[1];
  if (!v7) {
    goto LABEL_41;
  }
  int v8 = *((char *)a2 + 23);
  if (v8 >= 0) {
    uint64_t v9 = (const std::string::value_type *)a2;
  }
  else {
    uint64_t v9 = *a2;
  }
  if (v8 >= 0) {
    size_t v10 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v10 = (size_t)a2[1];
  }
  uint64_t v11 = (uint64_t *)(a1 + 1);
  do
  {
    while (1)
    {
      int v12 = *((char *)v7 + 55);
      xpc_object_t v13 = v12 >= 0 ? v7 + 4 : (uint64_t *)v7[4];
      size_t v14 = v12 >= 0 ? *((unsigned __int8 *)v7 + 55) : v7[5];
      size_t v15 = v10 >= v14 ? v14 : v10;
      int v16 = memcmp(v13, v9, v15);
      if (v16) {
        break;
      }
      if (v14 < v10) {
        goto LABEL_11;
      }
LABEL_9:
      uint64_t v11 = v7;
      xpc_object_t v7 = (uint64_t *)*v7;
      if (!v7) {
        goto LABEL_26;
      }
    }
    if ((v16 & 0x80000000) == 0) {
      goto LABEL_9;
    }
LABEL_11:
    xpc_object_t v7 = (uint64_t *)v7[1];
  }
  while (v7);
LABEL_26:
  if (v11 == v6) {
    goto LABEL_40;
  }
  int v17 = *((char *)v11 + 55);
  if (v17 >= 0) {
    int v18 = v11 + 4;
  }
  else {
    int v18 = (void *)v11[4];
  }
  if (v17 >= 0) {
    size_t v19 = *((unsigned __int8 *)v11 + 55);
  }
  else {
    size_t v19 = v11[5];
  }
  if (v19 >= v10) {
    size_t v20 = v10;
  }
  else {
    size_t v20 = v19;
  }
  int v21 = memcmp(v9, v18, v20);
  if (v21)
  {
    if ((v21 & 0x80000000) == 0) {
      goto LABEL_38;
    }
LABEL_40:
    xpc_object_t v6 = v11;
LABEL_41:
    int v30 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
    int v31 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
    int v24 = std::__tree<std::__value_type<std::string,xpc::dict>,std::__map_value_compare<std::string,std::__value_type<std::string,xpc::dict>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xpc::dict>>>::__find_equal<std::string>(a1, v6, &v31, &v30, (const void **)a2);
    if (!*v24)
    {
      size_t v25 = (uint64_t **)v24;
      unint64_t v26 = (uint64_t *)operator new(0x40uLL);
      xpc_object_t v27 = (std::string *)(v26 + 4);
      if (*((char *)a2 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v27, *a2, (std::string::size_type)a2[1]);
      }
      else
      {
        *(_OWORD *)&v27->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
        void v26[6] = (uint64_t)a2[2];
      }
      v26[7] = (uint64_t)*a3;
      *a3 = xpc_null_create();
      int v28 = v31;
      *unint64_t v26 = 0;
      v26[1] = 0;
      v26[2] = (uint64_t)v28;
      char *v25 = v26;
      uint64_t v29 = (void *)**a1;
      if (v29)
      {
        *a1 = v29;
        unint64_t v26 = *v25;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v26);
      a1[2] = (void *)((char *)a1[2] + 1);
    }
  }
  else
  {
    if (v10 < v19) {
      goto LABEL_40;
    }
LABEL_38:
    uint64_t v22 = (uint64_t)*a3;
    *a3 = xpc_null_create();
    uint64_t v23 = (void *)v11[7];
    v11[7] = v22;
    xpc_release(v23);
  }
}

void sub_1C5831DE0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void AnalyticsHelper::submitEvent(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  if (*(char *)(a2 + 23) < 0)
  {
    if (*(void *)(a2 + 8)) {
      BOOL v7 = a3[2] == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7)
    {
LABEL_12:
      xpc_object_t object = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
      xpc_object_t v8 = xpc_dictionary_create(0, 0, 0);
      xpc_object_t v9 = v8;
      if (v8)
      {
        xpc_object_t object = v8;
      }
      else
      {
        xpc_object_t v9 = xpc_null_create();
        xpc_object_t object = v9;
        if (!v9)
        {
          xpc_object_t v10 = xpc_null_create();
          xpc_object_t v9 = 0;
          goto LABEL_19;
        }
      }
      if (MEMORY[0x1C8792D30](v9) == MEMORY[0x1E4F14590])
      {
        xpc_retain(v9);
        goto LABEL_20;
      }
      xpc_object_t v10 = xpc_null_create();
LABEL_19:
      xpc_object_t object = v10;
LABEL_20:
      xpc_release(v9);
      AnalyticsHelper::append(v11, (uint64_t)&object, a3);
      int v12 = (const void *)*MEMORY[0x1E4F4CE18];
      size_t v13 = strlen((const char *)*MEMORY[0x1E4F4CE18]);
      if (v13 > 0x7FFFFFFFFFFFFFF7) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      size_t v14 = (const void *)v13;
      if (v13 >= 0x17)
      {
        uint64_t v16 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v13 | 7) != 0x17) {
          uint64_t v16 = v13 | 7;
        }
        uint64_t v17 = v16 + 1;
        size_t v15 = (const void **)operator new(v16 + 1);
        __dst[1] = v14;
        _OWORD __dst[2] = (const void *)(v17 | 0x8000000000000000);
        __dst[0] = v15;
      }
      else
      {
        HIBYTE(__dst[2]) = v13;
        size_t v15 = __dst;
        if (!v13) {
          goto LABEL_28;
        }
      }
      memmove(v15, v12, (size_t)v14);
LABEL_28:
      *((unsigned char *)v14 + (void)v15) = 0;
      int v18 = std::__tree<std::string>::find<std::string>(a1 + 104, __dst);
      size_t v19 = v18;
      if (SHIBYTE(__dst[2]) < 0)
      {
        operator delete((void *)__dst[0]);
        if ((uint64_t *)(a1 + 112) == v19)
        {
LABEL_30:
          size_t v20 = *(NSObject **)(a1 + 40);
          if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
          {
LABEL_58:
            int v28 = (const std::string::value_type *)a2;
            if (*(char *)(a2 + 23) < 0) {
              int v28 = *(const std::string::value_type **)a2;
            }
            uint64_t v29 = (char *)MEMORY[0x1C8792C60](object);
            memset(__dst, 170, sizeof(__dst));
            size_t v30 = strlen(v29);
            if (v30 > 0x7FFFFFFFFFFFFFF7) {
              std::string::__throw_length_error[abi:ne180100]();
            }
            int v31 = (const void *)v30;
            if (v30 >= 0x17)
            {
              uint64_t v33 = (v30 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v30 | 7) != 0x17) {
                uint64_t v33 = v30 | 7;
              }
              uint64_t v34 = v33 + 1;
              unint64_t v32 = (const void **)operator new(v33 + 1);
              __dst[1] = v31;
              _OWORD __dst[2] = (const void *)(v34 | 0x8000000000000000);
              __dst[0] = v32;
            }
            else
            {
              HIBYTE(__dst[2]) = v30;
              unint64_t v32 = __dst;
              if (!v30) {
                goto LABEL_68;
              }
            }
            memcpy(v32, v29, (size_t)v31);
LABEL_68:
            *((unsigned char *)v31 + (void)v32) = 0;
            free(v29);
            uint64_t v35 = __dst;
            if (SHIBYTE(__dst[2]) < 0) {
              uint64_t v35 = (const void **)__dst[0];
            }
            *(_DWORD *)long long buf = 136315394;
            *(void *)&uint8_t buf[4] = v28;
            *(_WORD *)&buf[12] = 2080;
            *(void *)&buf[14] = v35;
            _os_log_debug_impl(&dword_1C5767000, v20, OS_LOG_TYPE_DEBUG, "#D Submitting CoreAnalytics event[%s] - %s", buf, 0x16u);
            if (SHIBYTE(__dst[2]) < 0) {
              operator delete((void *)__dst[0]);
            }
          }
LABEL_48:
          if (*(char *)(a2 + 23) < 0) {
            std::string::__init_copy_ctor_external(&v37, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
          }
          else {
            std::string v37 = *(std::string *)a2;
          }
          xpc_object_t v36 = object;
          if (object) {
            xpc_retain(object);
          }
          else {
            xpc_object_t v36 = xpc_null_create();
          }
          metric::sendCoreAnalyticsEvent((const void **)&v37.__r_.__value_.__l.__data_, &v36);
          xpc_release(v36);
          xpc_object_t v36 = 0;
          if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v37.__r_.__value_.__l.__data_);
          }
          xpc_release(object);
          return;
        }
      }
      else if ((uint64_t *)(a1 + 112) == v18)
      {
        goto LABEL_30;
      }
      *(void *)&uint8_t buf[8] = 0;
      *(void *)&uint8_t buf[16] = 0;
      *(void *)long long buf = &buf[8];
      int v21 = (const void **)v19[7];
      uint64_t v22 = (const void ***)(v19 + 8);
      if (v21 == (const void **)(v19 + 8))
      {
LABEL_47:
        AnalyticsHelper::append((uint64_t)v18, (uint64_t)&object, buf);
        std::__tree<std::__value_type<std::string,xpc::dict>,std::__map_value_compare<std::string,std::__value_type<std::string,xpc::dict>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xpc::dict>>>::destroy(*(char **)&buf[8]);
        size_t v20 = *(NSObject **)(a1 + 40);
        if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG)) {
          goto LABEL_58;
        }
        goto LABEL_48;
      }
      while (1)
      {
        xpc_object_t v40 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
        xpc_object_t v41 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
        int v18 = std::__tree<std::__value_type<std::string,xpc::dict>,std::__map_value_compare<std::string,std::__value_type<std::string,xpc::dict>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xpc::dict>>>::__find_equal<std::string>((uint64_t **)buf, (uint64_t *)&buf[8], &v41, &v40, v21 + 4);
        if (*v18)
        {
          uint64_t v23 = (const void **)v21[1];
          if (v23) {
            goto LABEL_42;
          }
        }
        else
        {
          int v24 = (uint64_t **)v18;
          memset(__dst, 170, sizeof(__dst));
          std::__tree<std::__value_type<std::string,xpc::dict>,std::__map_value_compare<std::string,std::__value_type<std::string,xpc::dict>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xpc::dict>>>::__construct_node<std::pair<std::string const,xpc::dict> const&>(__dst, (uint64_t)buf, (uint64_t)(v21 + 4));
          size_t v25 = v41;
          unint64_t v26 = (uint64_t *)__dst[0];
          *(void *)__dst[0] = 0;
          v26[1] = 0;
          v26[2] = (uint64_t)v25;
          *int v24 = v26;
          if (**(void **)buf)
          {
            *(void *)long long buf = **(void **)buf;
            unint64_t v26 = *v24;
          }
          int v18 = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)&buf[8], v26);
          ++*(void *)&buf[16];
          uint64_t v23 = (const void **)v21[1];
          if (v23)
          {
            do
            {
LABEL_42:
              xpc_object_t v27 = (const void ***)v23;
              uint64_t v23 = (const void **)*v23;
            }
            while (v23);
            goto LABEL_35;
          }
        }
        do
        {
          xpc_object_t v27 = (const void ***)v21[2];
          BOOL v6 = *v27 == v21;
          int v21 = (const void **)v27;
        }
        while (!v6);
LABEL_35:
        int v21 = (const void **)v27;
        if (v27 == v22) {
          goto LABEL_47;
        }
      }
    }
  }
  else
  {
    if (*(unsigned char *)(a2 + 23)) {
      BOOL v6 = a3[2] == 0;
    }
    else {
      BOOL v6 = 1;
    }
    if (!v6) {
      goto LABEL_12;
    }
  }
}

void sub_1C58322B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, xpc_object_t object, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
}

void AnalyticsHelper::append(uint64_t a1, uint64_t a2, void *a3)
{
  long long v3 = a3 + 1;
  int v4 = (void *)*a3;
  if ((void *)*a3 != a3 + 1)
  {
    do
    {
      memset(&v11, 170, sizeof(v11));
      if (*((char *)v4 + 55) < 0)
      {
        std::string::__init_copy_ctor_external(&v11, (const std::string::value_type *)v4[4], v4[5]);
        xpc_object_t v6 = (xpc_object_t)v4[7];
        if (v6)
        {
LABEL_6:
          xpc_retain(v6);
          goto LABEL_9;
        }
      }
      else
      {
        std::string v11 = *(std::string *)(v4 + 4);
        xpc_object_t v6 = (xpc_object_t)v4[7];
        if (v6) {
          goto LABEL_6;
        }
      }
      xpc_object_t v6 = xpc_null_create();
LABEL_9:
      applier[0] = MEMORY[0x1E4F143A8];
      applier[1] = 0x40000000;
      applier[2] = ___ZN15AnalyticsHelper6appendERN3xpc4dictERNSt3__13mapINS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEES1_NS3_4lessISA_EENS8_INS3_4pairIKSA_S1_EEEEEE_block_invoke;
      applier[3] = &__block_descriptor_tmp_13_0;
      applier[4] = a2;
      xpc_dictionary_apply(v6, applier);
      xpc_release(v6);
      if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v11.__r_.__value_.__l.__data_);
        BOOL v7 = (void *)v4[1];
        if (v7)
        {
          do
          {
LABEL_13:
            xpc_object_t v8 = v7;
            BOOL v7 = (void *)*v7;
          }
          while (v7);
          goto LABEL_3;
        }
      }
      else
      {
        BOOL v7 = (void *)v4[1];
        if (v7) {
          goto LABEL_13;
        }
      }
      do
      {
        xpc_object_t v8 = (void *)v4[2];
        BOOL v9 = *v8 == (void)v4;
        int v4 = v8;
      }
      while (!v9);
LABEL_3:
      int v4 = v8;
    }
    while (v8 != v3);
  }
}

void sub_1C58324B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  xpc_release(v20);
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t ___ZN15AnalyticsHelper6appendERN3xpc4dictERNSt3__13mapINS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEES1_NS3_4lessISA_EENS8_INS3_4pairIKSA_S1_EEEEEE_block_invoke(uint64_t a1, char *__s, void *a3)
{
  memset(__dst, 170, sizeof(__dst));
  size_t v6 = strlen(__s);
  if (v6 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  BOOL v7 = (void *)v6;
  if (v6 >= 0x17)
  {
    uint64_t v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17) {
      uint64_t v9 = v6 | 7;
    }
    uint64_t v10 = v9 + 1;
    xpc_object_t v8 = (void **)operator new(v9 + 1);
    __dst[1] = v7;
    _OWORD __dst[2] = (void *)(v10 | 0x8000000000000000);
    __dst[0] = v8;
    goto LABEL_8;
  }
  HIBYTE(__dst[2]) = v6;
  xpc_object_t v8 = __dst;
  if (v6) {
LABEL_8:
  }
    memcpy(v8, __s, (size_t)v7);
  *((unsigned char *)v7 + (void)v8) = 0;
  size_t v11 = strlen((const char *)*MEMORY[0x1E4F4CB40]);
  int v12 = (void *)v11;
  char v13 = HIBYTE(__dst[2]);
  if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
  {
    if (v11 != -1)
    {
      size_t v14 = (void *)HIBYTE(__dst[2]);
      size_t v15 = __dst;
      goto LABEL_14;
    }
LABEL_27:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v11 == -1) {
    goto LABEL_27;
  }
  size_t v15 = (void **)__dst[0];
  size_t v14 = __dst[1];
LABEL_14:
  if (v14 >= v12) {
    size_t v16 = (size_t)v12;
  }
  else {
    size_t v16 = (size_t)v14;
  }
  if (!memcmp(v15, (const void *)*MEMORY[0x1E4F4CB40], v16) && v14 == v12)
  {
    v19[0] = MEMORY[0x1E4F143A8];
    v19[1] = 0x40000000;
    void v19[2] = ___ZN15AnalyticsHelper6appendERN3xpc4dictERNSt3__13mapINS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEES1_NS3_4lessISA_EENS8_INS3_4pairIKSA_S1_EEEEEE_block_invoke_2;
    void v19[3] = &__block_descriptor_tmp_7;
    v19[4] = *(void *)(a1 + 32);
    xpc_dictionary_apply(a3, v19);
    char v13 = HIBYTE(__dst[2]);
  }
  if (v13 < 0) {
    operator delete(__dst[0]);
  }
  return 1;
}

void sub_1C583267C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN15AnalyticsHelper6appendERN3xpc4dictERNSt3__13mapINS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEES1_NS3_4lessISA_EENS8_INS3_4pairIKSA_S1_EEEEEE_block_invoke_2(uint64_t a1, const char *a2, xpc_object_t object)
{
  if (object)
  {
    xpc_object_t v5 = object;
    xpc_retain(object);
  }
  else
  {
    xpc_object_t v5 = xpc_null_create();
  }
  xpc_dictionary_set_value(**(xpc_object_t **)(a1 + 32), a2, v5);
  xpc_object_t v6 = xpc_null_create();
  xpc_release(v5);
  xpc_release(v6);
  return 1;
}

void analytics::registerCallbackForTimedEventImpl(const char *a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  unint64_t v14 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v15 = 0xAAAAAAAAAAAAAAAALL;
  abm::AWDHelperGetConnection(&v14);
  if (!v14) {
    goto LABEL_18;
  }
  size_t v2 = strlen(a1);
  if (v2 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  std::string::size_type v3 = v2;
  if (v2 >= 0x17)
  {
    uint64_t v5 = (v2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v2 | 7) != 0x17) {
      uint64_t v5 = v2 | 7;
    }
    uint64_t v6 = v5 + 1;
    p_dst = (std::string *)operator new(v5 + 1);
    __dst.__r_.__value_.__l.__size_ = v3;
    __dst.__r_.__value_.__r.__words[2] = v6 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  }
  else
  {
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v2;
    p_dst = &__dst;
    if (!v2) {
      goto LABEL_10;
    }
  }
  memcpy(p_dst, a1, v3);
LABEL_10:
  p_dst->__r_.__value_.__s.__data_[v3] = 0;
  BOOL v7 = std::string::insert(&__dst, 0, "com.apple.Telephony.", 0x14uLL);
  long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
  int64_t v13 = v7->__r_.__value_.__r.__words[2];
  *(_OWORD *)long long __p = v8;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  uint64_t v9 = GetOsLogContext()[1];
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    uint64_t v10 = __p;
    if (v13 < 0) {
      uint64_t v10 = (void **)__p[0];
    }
    LODWORD(__dst.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = (std::string::size_type)v10;
    _os_log_impl(&dword_1C5767000, v9, OS_LOG_TYPE_INFO, "Register for 24h timer: event[%s]", (uint8_t *)&__dst, 0xCu);
  }
  wis::WISServerConnection::RegisterCallbackForTimer();
  if (SHIBYTE(v13) < 0) {
    operator delete(__p[0]);
  }
LABEL_18:
  size_t v11 = (std::__shared_weak_count *)v15;
  if (v15)
  {
    if (!atomic_fetch_add((atomic_ullong *volatile)(v15 + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

void sub_1C5832984(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,char a22)
{
  if (a20 < 0)
  {
    operator delete(__p);
    std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a22);
    _Unwind_Resume(a1);
  }
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a22);
  _Unwind_Resume(a1);
}

void ___ZN9analytics33registerCallbackForTimedEventImplEPKcN8dispatch5queueEU13block_pointerFvNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEE_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string __p = *(std::string *)a2;
  }
  (*(void (**)(uint64_t, std::string *))(v2 + 16))(v2, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1C5832A60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::Loggable<AnalyticsHelper,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig(uint64_t a1)
{
  return MEMORY[0x1F417DA50](a1 + 8);
}

void ctu::Loggable<AnalyticsHelper,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName(char *a1@<X8>)
{
  a1[23] = 15;
  strcpy(a1, "stats.analytics");
}

uint64_t ctu::Loggable<AnalyticsHelper,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return MEMORY[0x1F417DD10](a1 + 8);
}

void *ctu::Loggable<AnalyticsHelper,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_1F20F6880;
  MEMORY[0x1C8790F40](a1 + 1);
  return a1;
}

void ctu::Loggable<AnalyticsHelper,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_1F20F6880;
  MEMORY[0x1C8790F40](a1 + 1);

  operator delete(a1);
}

void ctu::Loggable<AnalyticsHelper,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(uint64_t a1)
{
  uint64_t v1 = a1 + 56;
  if (*(void *)(a1 + 56))
  {
    if (!*(void *)(a1 + 80) || (uint64_t v2 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(a1 + 80))) == 0) {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    std::string::size_type v3 = v2;
    ctu::LoggerCommonBase::getLogDomain((ctu::LoggerCommonBase *)(v1 - 48));
    ctu::TrackedLogger::registerLoggerToServer();
    if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_1C5832C70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

void sub_1C5832C8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void *std::shared_ptr<AnalyticsHelper>::shared_ptr[abi:ne180100]<AnalyticsHelper,std::shared_ptr<AnalyticsHelper> ctu::SharedSynchronizable<AnalyticsHelper>::make_shared_ptr<AnalyticsHelper>(AnalyticsHelper*)::{lambda(AnalyticsHelper*)#1},void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  int v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = &v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20F68C0;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)a2;
  a1[1] = v4;
  if (!a2) {
    return a1;
  }
  uint64_t v6 = *(std::__shared_weak_count **)(a2 + 80);
  if (v6)
  {
    if (v6->__shared_owners_ == -1)
    {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      *(void *)(a2 + 72) = a2;
      *(void *)(a2 + 80) = v4;
      std::__shared_weak_count::__release_weak(v6);
      if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
        goto LABEL_8;
      }
    }
    return a1;
  }
  atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  *(void *)(a2 + 72) = a2;
  *(void *)(a2 + 80) = v4;
  if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
LABEL_8:
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void sub_1C5832DB8(void *a1)
{
  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[11], v1, (dispatch_function_t)std::shared_ptr<AnalyticsHelper> ctu::SharedSynchronizable<AnalyticsHelper>::make_shared_ptr<AnalyticsHelper>(AnalyticsHelper*)::{lambda(AnalyticsHelper*)#1}::operator() const(AnalyticsHelper*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_1C5832DE0(_Unwind_Exception *a1)
{
}

void std::__shared_ptr_pointer<AnalyticsHelper *,std::shared_ptr<AnalyticsHelper> ctu::SharedSynchronizable<AnalyticsHelper>::make_shared_ptr<AnalyticsHelper>(AnalyticsHelper*)::{lambda(AnalyticsHelper *)#1},std::allocator<AnalyticsHelper>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<AnalyticsHelper *,std::shared_ptr<AnalyticsHelper> ctu::SharedSynchronizable<AnalyticsHelper>::make_shared_ptr<AnalyticsHelper>(AnalyticsHelper*)::{lambda(AnalyticsHelper *)#1},std::allocator<AnalyticsHelper>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<AnalyticsHelper *,std::shared_ptr<AnalyticsHelper> ctu::SharedSynchronizable<AnalyticsHelper>::make_shared_ptr<AnalyticsHelper>(AnalyticsHelper*)::{lambda(AnalyticsHelper *)#1},std::allocator<AnalyticsHelper>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableI15AnalyticsHelperE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_") {
    return a1 + 24;
  }
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableI15AnalyticsHelperE15make_shared_ptrIS1_EENSt3__110shared_pt"
                                "rIT_EEPS6_EUlPS1_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableI15AnalyticsHelperE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableI15AnalyticsHelperE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24; {
  return 0;
  }
}

uint64_t std::shared_ptr<AnalyticsHelper> ctu::SharedSynchronizable<AnalyticsHelper>::make_shared_ptr<AnalyticsHelper>(AnalyticsHelper*)::{lambda(AnalyticsHelper*)#1}::operator() const(AnalyticsHelper*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void *ctu::SharedLoggable<AnalyticsHelper,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(void *a1)
{
  *a1 = &unk_1F20F6880;
  MEMORY[0x1C8790F40](a1 + 1);
  uint64_t v2 = a1[12];
  if (v2) {
    dispatch_release(v2);
  }
  unint64_t v3 = a1[11];
  if (v3) {
    dispatch_release(v3);
  }
  int v4 = (std::__shared_weak_count *)a1[10];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

void ctu::SharedLoggable<AnalyticsHelper,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(void *a1)
{
  *a1 = &unk_1F20F6880;
  MEMORY[0x1C8790F40](a1 + 1);
  uint64_t v2 = a1[12];
  if (v2) {
    dispatch_release(v2);
  }
  unint64_t v3 = a1[11];
  if (v3) {
    dispatch_release(v3);
  }
  int v4 = (std::__shared_weak_count *)a1[10];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }

  operator delete(a1);
}

void std::__tree<std::__value_type<std::string,std::map<std::string,xpc::dict>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,xpc::dict>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,xpc::dict>>>>::destroy(char *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,std::map<std::string,xpc::dict>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,xpc::dict>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,xpc::dict>>>>::destroy(*(void *)a1);
    std::__tree<std::__value_type<std::string,std::map<std::string,xpc::dict>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,xpc::dict>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,xpc::dict>>>>::destroy(*((void *)a1 + 1));
    std::__tree<std::__value_type<std::string,xpc::dict>,std::__map_value_compare<std::string,std::__value_type<std::string,xpc::dict>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xpc::dict>>>::destroy(*((char **)a1 + 8));
    if (a1[55] < 0)
    {
      operator delete(*((void **)a1 + 4));
      uint64_t v2 = a1;
    }
    else
    {
      uint64_t v2 = a1;
    }
    operator delete(v2);
  }
}

void std::__tree<std::__value_type<std::string,xpc::dict>,std::__map_value_compare<std::string,std::__value_type<std::string,xpc::dict>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xpc::dict>>>::destroy(char *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,xpc::dict>,std::__map_value_compare<std::string,std::__value_type<std::string,xpc::dict>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xpc::dict>>>::destroy(*(void *)a1);
    std::__tree<std::__value_type<std::string,xpc::dict>,std::__map_value_compare<std::string,std::__value_type<std::string,xpc::dict>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xpc::dict>>>::destroy(*((void *)a1 + 1));
    xpc_release(*((xpc_object_t *)a1 + 7));
    *((void *)a1 + 7) = 0;
    if (a1[55] < 0)
    {
      operator delete(*((void **)a1 + 4));
      uint64_t v2 = a1;
    }
    else
    {
      uint64_t v2 = a1;
    }
    operator delete(v2);
  }
}

xpc_object_t std::__tree<std::__value_type<std::string,xpc::dict>,std::__map_value_compare<std::string,std::__value_type<std::string,xpc::dict>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xpc::dict>>>::__construct_node<std::pair<std::string const,xpc::dict> const&>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a2 + 8;
  memset(a1, 170, 24);
  uint64_t v6 = (char *)operator new(0x40uLL);
  *a1 = v6;
  a1[1] = v5;
  *((unsigned char *)a1 + 16) = 0;
  BOOL v7 = (std::string *)(v6 + 32);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    *((void *)v6 + 6) = *(void *)(a3 + 16);
  }
  long long v8 = *(void **)(a3 + 24);
  *((void *)v6 + 7) = v8;
  if (v8)
  {
    xpc_object_t result = xpc_retain(v8);
  }
  else
  {
    xpc_object_t result = xpc_null_create();
    *((void *)v6 + 7) = result;
  }
  *((unsigned char *)a1 + 16) = 1;
  return result;
}

void sub_1C5833184(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,xpc::dict>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,xpc::dict>,void *>>>>::~unique_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<std::__tree_node<std::__value_type<std::string,xpc::dict>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,xpc::dict>,void *>>>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((unsigned char *)a1 + 16))
    {
      xpc_release(*(xpc_object_t *)(v2 + 56));
      *(void *)(v2 + 56) = 0;
      if (*(char *)(v2 + 55) < 0) {
        operator delete(*(void **)(v2 + 32));
      }
    }
    operator delete((void *)v2);
  }
  return a1;
}

uint64_t *std::__tree<std::__value_type<std::string,xpc::dict>,std::__map_value_compare<std::string,std::__value_type<std::string,xpc::dict>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xpc::dict>>>::__find_equal<std::string>(uint64_t **a1, uint64_t *a2, uint64_t **a3, uint64_t **a4, const void **a5)
{
  long long v8 = a1 + 1;
  if (a1 + 1 == (uint64_t **)a2) {
    goto LABEL_23;
  }
  int v10 = *((char *)a5 + 23);
  if (v10 >= 0) {
    size_t v11 = a5;
  }
  else {
    size_t v11 = *a5;
  }
  if (v10 >= 0) {
    size_t v12 = *((unsigned __int8 *)a5 + 23);
  }
  else {
    size_t v12 = (size_t)a5[1];
  }
  int v13 = *((char *)a2 + 55);
  if (v13 >= 0) {
    unint64_t v14 = a2 + 4;
  }
  else {
    unint64_t v14 = (const void *)a2[4];
  }
  if (v13 >= 0) {
    size_t v15 = *((unsigned __int8 *)a2 + 55);
  }
  else {
    size_t v15 = a2[5];
  }
  if (v15 >= v12) {
    size_t v16 = v12;
  }
  else {
    size_t v16 = v15;
  }
  int v17 = memcmp(v11, v14, v16);
  if (!v17)
  {
    if (v12 >= v15) {
      goto LABEL_19;
    }
LABEL_23:
    size_t v19 = (uint64_t *)*a2;
    if (*a1 == a2)
    {
      int v21 = a2;
    }
    else
    {
      if (v19)
      {
        size_t v20 = (uint64_t *)*a2;
        do
        {
          int v21 = v20;
          size_t v20 = (uint64_t *)v20[1];
        }
        while (v20);
      }
      else
      {
        uint64_t v22 = a2;
        do
        {
          int v21 = (uint64_t *)v22[2];
          BOOL v23 = *v21 == (void)v22;
          uint64_t v22 = v21;
        }
        while (v23);
      }
      int v24 = *((char *)v21 + 55);
      if (v24 >= 0) {
        size_t v25 = v21 + 4;
      }
      else {
        size_t v25 = (const void *)v21[4];
      }
      if (v24 >= 0) {
        size_t v26 = *((unsigned __int8 *)v21 + 55);
      }
      else {
        size_t v26 = v21[5];
      }
      int v27 = *((char *)a5 + 23);
      if (v27 >= 0) {
        int v28 = a5;
      }
      else {
        int v28 = *a5;
      }
      if (v27 >= 0) {
        size_t v29 = *((unsigned __int8 *)a5 + 23);
      }
      else {
        size_t v29 = (size_t)a5[1];
      }
      if (v29 >= v26) {
        size_t v30 = v26;
      }
      else {
        size_t v30 = v29;
      }
      int v31 = memcmp(v25, v28, v30);
      if (v31)
      {
        if ((v31 & 0x80000000) == 0) {
          goto LABEL_48;
        }
      }
      else if (v26 >= v29)
      {
LABEL_48:
        unint64_t v32 = *v8;
        if (!*v8)
        {
          uint64_t v33 = v8;
LABEL_69:
          *a3 = (uint64_t *)v33;
          return (uint64_t *)v8;
        }
        while (1)
        {
          uint64_t v33 = (uint64_t **)v32;
          xpc_object_t v36 = (const void *)v32[4];
          uint64_t v34 = v32 + 4;
          uint64_t v35 = v36;
          int v37 = *((char *)v34 + 23);
          if (v37 >= 0) {
            xpc_object_t v38 = v34;
          }
          else {
            xpc_object_t v38 = v35;
          }
          if (v37 >= 0) {
            size_t v39 = *((unsigned __int8 *)v34 + 23);
          }
          else {
            size_t v39 = v34[1];
          }
          if (v39 >= v29) {
            size_t v40 = v29;
          }
          else {
            size_t v40 = v39;
          }
          int v41 = memcmp(v28, v38, v40);
          if (v41)
          {
            if (v41 < 0) {
              goto LABEL_50;
            }
LABEL_64:
            int v42 = memcmp(v38, v28, v40);
            if (v42)
            {
              if ((v42 & 0x80000000) == 0) {
                goto LABEL_69;
              }
            }
            else if (v39 >= v29)
            {
              goto LABEL_69;
            }
            long long v8 = v33 + 1;
            unint64_t v32 = v33[1];
            if (!v32) {
              goto LABEL_69;
            }
          }
          else
          {
            if (v29 >= v39) {
              goto LABEL_64;
            }
LABEL_50:
            unint64_t v32 = *v33;
            long long v8 = v33;
            if (!*v33) {
              goto LABEL_69;
            }
          }
        }
      }
    }
    if (v19)
    {
      *a3 = v21;
      return v21 + 1;
    }
    else
    {
      *a3 = a2;
      return a2;
    }
  }
  if (v17 < 0) {
    goto LABEL_23;
  }
LABEL_19:
  int v18 = memcmp(v14, v11, v16);
  if (v18)
  {
    if ((v18 & 0x80000000) == 0)
    {
LABEL_21:
      *a3 = a2;
      *a4 = a2;
      return (uint64_t *)a4;
    }
  }
  else if (v15 >= v12)
  {
    goto LABEL_21;
  }
  uint64_t v43 = a2[1];
  if (v43)
  {
    uint64_t v44 = (uint64_t *)a2[1];
    do
    {
      a4 = (uint64_t **)v44;
      uint64_t v44 = (uint64_t *)*v44;
    }
    while (v44);
  }
  else
  {
    int v45 = a2;
    do
    {
      a4 = (uint64_t **)v45[2];
      BOOL v23 = *a4 == v45;
      int v45 = (uint64_t *)a4;
    }
    while (!v23);
  }
  if (a4 != v8)
  {
    int v46 = *((char *)a4 + 55);
    if (v46 >= 0) {
      unint64_t v47 = (uint64_t *)(a4 + 4);
    }
    else {
      unint64_t v47 = a4[4];
    }
    if (v46 >= 0) {
      size_t v48 = *((unsigned __int8 *)a4 + 55);
    }
    else {
      size_t v48 = (size_t)a4[5];
    }
    if (v48 >= v12) {
      size_t v49 = v12;
    }
    else {
      size_t v49 = v48;
    }
    int v50 = memcmp(v11, v47, v49);
    if (v50)
    {
      if ((v50 & 0x80000000) == 0)
      {
LABEL_95:
        uint64_t v51 = *v8;
        if (*v8)
        {
          unint64_t v52 = a3;
          while (1)
          {
            size_t v53 = (uint64_t **)v51;
            uint64_t v56 = (const void *)v51[4];
            int v54 = v51 + 4;
            xpc_object_t v55 = v56;
            int v57 = *((char *)v54 + 23);
            if (v57 >= 0) {
              size_t v58 = v54;
            }
            else {
              size_t v58 = v55;
            }
            if (v57 >= 0) {
              size_t v59 = *((unsigned __int8 *)v54 + 23);
            }
            else {
              size_t v59 = v54[1];
            }
            if (v59 >= v12) {
              size_t v60 = v12;
            }
            else {
              size_t v60 = v59;
            }
            int v61 = memcmp(v11, v58, v60);
            if (v61)
            {
              if (v61 < 0) {
                goto LABEL_97;
              }
LABEL_111:
              int v62 = memcmp(v58, v11, v60);
              if (v62)
              {
                if ((v62 & 0x80000000) == 0) {
                  goto LABEL_123;
                }
              }
              else if (v59 >= v12)
              {
                goto LABEL_123;
              }
              long long v8 = v53 + 1;
              uint64_t v51 = v53[1];
              if (!v51) {
                goto LABEL_123;
              }
            }
            else
            {
              if (v12 >= v59) {
                goto LABEL_111;
              }
LABEL_97:
              uint64_t v51 = *v53;
              long long v8 = v53;
              if (!*v53) {
                goto LABEL_123;
              }
            }
          }
        }
        size_t v53 = v8;
        unint64_t v52 = a3;
LABEL_123:
        void *v52 = (uint64_t *)v53;
        return (uint64_t *)v8;
      }
    }
    else if (v12 >= v48)
    {
      goto LABEL_95;
    }
  }
  if (v43)
  {
    *a3 = (uint64_t *)a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return (uint64_t *)a4;
}

void std::string::__erase_external_with_move(std::string *this, std::string::size_type __pos, std::string::size_type __n)
{
  if (!__n) {
    return;
  }
  int v4 = SHIBYTE(this->__r_.__value_.__r.__words[2]);
  if (v4 < 0)
  {
    uint64_t v6 = (std::string *)this->__r_.__value_.__r.__words[0];
    std::string::size_type size = this->__r_.__value_.__l.__size_;
    std::string::size_type v7 = size - __pos;
    if (size - __pos >= __n) {
      std::string::size_type v8 = __n;
    }
    else {
      std::string::size_type v8 = size - __pos;
    }
    if (size - __pos <= __n) {
      goto LABEL_8;
    }
  }
  else
  {
    std::string::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    uint64_t v6 = this;
    std::string::size_type v7 = size - __pos;
    if (size - __pos >= __n) {
      std::string::size_type v8 = __n;
    }
    else {
      std::string::size_type v8 = HIBYTE(this->__r_.__value_.__r.__words[2]) - __pos;
    }
    if (v7 <= __n) {
      goto LABEL_8;
    }
  }
  memmove((char *)v6 + __pos, (char *)v6 + __pos + v8, v7 - v8);
  LOBYTE(v4) = *((unsigned char *)&this->__r_.__value_.__s + 23);
LABEL_8:
  std::string::size_type v9 = size - v8;
  if ((v4 & 0x80) != 0) {
    this->__r_.__value_.__l.__size_ = v9;
  }
  else {
    *((unsigned char *)&this->__r_.__value_.__s + 23) = v9 & 0x7F;
  }
  v6->__r_.__value_.__s.__data_[v9] = 0;
}

void RadioModule::create(uint64_t *a1@<X0>, void *a2@<X8>)
{
  *a2 = 0xAAAAAAAAAAAAAAAALL;
  a2[1] = 0xAAAAAAAAAAAAAAAALL;
  int v4 = operator new(0x168uLL);
  uint64_t v5 = (std::__shared_weak_count *)a1[1];
  uint64_t v26 = *a1;
  int v27 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  uint64_t v7 = off_1EBBDD2A0;
  if (!off_1EBBDD2A0)
  {
    CommandDriverFactory::create_default_global((uint64_t *)&v28, v6);
    long long v8 = v28;
    long long v28 = 0uLL;
    std::string::size_type v9 = (std::__shared_weak_count *)*(&off_1EBBDD2A0 + 1);
    off_1EBBDD2A0 = v8;
    if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
    int v10 = (std::__shared_weak_count *)*((void *)&v28 + 1);
    if (*((void *)&v28 + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v28 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
    uint64_t v7 = off_1EBBDD2A0;
  }
  size_t v11 = (std::__shared_weak_count *)*(&off_1EBBDD2A0 + 1);
  if (*(&off_1EBBDD2A0 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDD2A0 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(dispatch_object_t *__return_ptr, uint64_t))(*(void *)v7 + 24))(&object, v7);
  RadioModule::RadioModule((uint64_t)v4, &v26, &object);
  *a2 = v4;
  a2[1] = 0xAAAAAAAAAAAAAAAALL;
  size_t v12 = (std::__shared_weak_count *)operator new(0x20uLL);
  v12->__shared_owners_ = 0;
  p_shared_owners = &v12->__shared_owners_;
  v12->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20F7510;
  v12->__shared_weak_owners_ = 0;
  v12[1].__vftable = (std::__shared_weak_count_vtbl *)v4;
  a2[1] = v12;
  unint64_t v14 = (std::__shared_weak_count *)*((void *)v4 + 16);
  if (v14)
  {
    if (v14->__shared_owners_ == -1)
    {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v12->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      *((void *)v4 + 15) = v4;
      *((void *)v4 + 16) = v12;
      std::__shared_weak_count::__release_weak(v14);
      if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL))
      {
LABEL_16:
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
        size_t v15 = (void *)*a2;
        if (!*(void *)(*a2 + 104)) {
          goto LABEL_30;
        }
        goto LABEL_20;
      }
    }
  }
  else
  {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v12->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    *((void *)v4 + 15) = v4;
    *((void *)v4 + 16) = v12;
    if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_16;
    }
  }
  size_t v15 = (void *)*a2;
  if (!*(void *)(*a2 + 104)) {
    goto LABEL_30;
  }
LABEL_20:
  size_t v16 = (std::__shared_weak_count *)v15[16];
  if (!v16 || (uint64_t v17 = v15[15], (v18 = std::__shared_weak_count::lock(v16)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  size_t v19 = v18;
  *(void *)&long long v28 = v17;
  *((void *)&v28 + 1) = v18;
  ctu::LoggerCommonBase::getLogDomain((ctu::LoggerCommonBase *)(v15 + 7));
  uint64_t v20 = v17 + 48;
  if (!v17) {
    uint64_t v20 = 0;
  }
  uint64_t v32 = v20;
  uint64_t v33 = v19;
  long long v28 = 0uLL;
  ctu::TrackedLogger::registerLoggerToServer();
  int v21 = v33;
  if (v33 && !atomic_fetch_add(&v33->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v21);
  }
  uint64_t v22 = (std::__shared_weak_count *)*((void *)&v28 + 1);
  if (*((void *)&v28 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v28 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
  }
LABEL_30:
  if (object) {
    dispatch_release(object);
  }
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  if (v27) {
    std::__shared_weak_count::__release_weak(v27);
  }
  uint64_t v23 = *a2;
  int v24 = (uint64_t *)(*a2 + 120);
  *(void *)&long long v28 = MEMORY[0x1E4F143A8];
  *((void *)&v28 + 1) = 0x40000000;
  size_t v29 = ___ZN11RadioModule4initEv_block_invoke;
  size_t v30 = &__block_descriptor_tmp_8;
  uint64_t v31 = v23;
  ctu::SharedSynchronizable<RadioModule>::execute_wrapped(v24, (uint64_t)&v28);
}

void sub_1C5833A54(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, dispatch_object_t object, uint64_t a13, uint64_t a14, char a15)
{
}

void sub_1C5833ABC()
{
}

void sub_1C5833ACC()
{
}

void sub_1C5833AD8()
{
}

void sub_1C5833AE8()
{
}

void RadioModule::init(RadioModule *this)
{
  v1[0] = MEMORY[0x1E4F143A8];
  v1[1] = 0x40000000;
  v1[2] = ___ZN11RadioModule4initEv_block_invoke;
  v1[3] = &__block_descriptor_tmp_8;
  v1[4] = this;
  ctu::SharedSynchronizable<RadioModule>::execute_wrapped((uint64_t *)this + 15, (uint64_t)v1);
}

uint64_t RadioModule::RadioModule(uint64_t a1, uint64_t *a2, NSObject **a3)
{
  uint64_t v5 = *a2;
  uint64_t v6 = (std::__shared_weak_count *)a2[1];
  if (v6)
  {
    atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  *(void *)a1 = &unk_1F20FC1C8;
  *(void *)(a1 + 8) = v5;
  *(void *)(a1 + 16) = v6;
  if (v6)
  {
    atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    *(void *)(a1 + 24) = 0;
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = 0;
    std::__shared_weak_count::__release_weak(v6);
    *(void *)a1 = &unk_1F20F0BE0;
    std::__shared_weak_count::__release_weak(v6);
  }
  else
  {
    *(void *)(a1 + 24) = 0;
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = 0;
    *(void *)a1 = &unk_1F20F0BE0;
  }
  *(void *)a1 = &unk_1F20F6950;
  *(void *)(a1 + 48) = &unk_1F20F69C0;
  uint64_t v7 = *a3;
  if (v7)
  {
    dispatch_retain(v7);
    long long v8 = *(uint64_t (***)(void))a1;
  }
  else
  {
    long long v8 = (uint64_t (**)(void))&unk_1F20F6950;
  }
  std::string::size_type v9 = (const char *)v8[2](a1);
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v32, "com.apple.telephony.abm", v9);
  GetABMLogServer(&v30);
  if (v7) {
    dispatch_retain(v7);
  }
  initially_inactive = dispatch_queue_attr_make_initially_inactive(0);
  size_t v11 = dispatch_queue_create_with_target_V2("radio.mod", initially_inactive, v7);
  dispatch_set_qos_class_floor(v11, QOS_CLASS_DEFAULT, 0);
  dispatch_activate(v11);
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = v11;
  if (v11) {
    dispatch_retain(v11);
  }
  *(void *)(a1 + 144) = v7;
  if (v7) {
    dispatch_retain(v7);
  }
  if (v11) {
    dispatch_release(v11);
  }
  if (v7) {
    dispatch_release(v7);
  }
  *(void *)(a1 + 48) = &unk_1F20F74D0;
  ctu::OsLogContext::OsLogContext();
  ctu::OsLogContext::OsLogContext();
  ctu::LoggerCommonBase::LoggerCommonBase();
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&v34);
  *(void *)(a1 + 56) = &unk_1F20F0070;
  size_t v12 = v31;
  *(void *)(a1 + 104) = v30;
  *(void *)(a1 + 112) = v12;
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v33);
  *(void *)(a1 + 48) = &unk_1F20F7560;
  int v13 = v31;
  if (v31 && !atomic_fetch_add(&v31->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v32);
  if (v7) {
    dispatch_release(v7);
  }
  *(void *)a1 = &unk_1F20F6950;
  *(void *)(a1 + 175) = 0;
  *(void *)(a1 + 48) = &unk_1F20F69C0;
  *(unsigned char *)(a1 + 152) = 0;
  *(void *)(a1 + 183) = 0;
  *(_WORD *)(a1 + 191) = 768;
  radio::RFCalibration_t::RFCalibration_t((radio::RFCalibration_t *)(a1 + 200));
  unint64_t v14 = (void **)(a1 + 248);
  *(void *)(a1 + 248) = xpc_null_create();
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(unsigned char *)(a1 + 288) = 1;
  *(unsigned char *)(a1 + 296) = 0;
  GetABMLogServer(&v28);
  pthread_mutex_lock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
  uint64_t v15 = off_1EBBDCFD0;
  if (!off_1EBBDCFD0)
  {
    ABMServer::create_default_global(&v34);
    long long v16 = v34;
    long long v34 = 0uLL;
    uint64_t v17 = (std::__shared_weak_count *)*(&off_1EBBDCFD0 + 1);
    off_1EBBDCFD0 = v16;
    if (v17 && !atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
    int v18 = (std::__shared_weak_count *)*((void *)&v34 + 1);
    if (*((void *)&v34 + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v34 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
    uint64_t v15 = off_1EBBDCFD0;
  }
  size_t v19 = (std::__shared_weak_count *)*(&off_1EBBDCFD0 + 1);
  v33[0] = v15;
  v33[1] = *(&off_1EBBDCFD0 + 1);
  if (*(&off_1EBBDCFD0 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDCFD0 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
  ctu::iokit::Controller::create();
  if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
  uint64_t v20 = v29;
  if (v29 && !atomic_fetch_add(&v29->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
  *(_WORD *)(a1 + 320) = 0;
  *(unsigned char *)(a1 + 322) = 0;
  *(void *)(a1 + 328) = a1 + 328;
  *(void *)(a1 + 336) = a1 + 328;
  *(void *)(a1 + 288) = 0;
  *(void *)(a1 + 344) = 0;
  *(void *)(a1 + 352) = 0;
  xpc_object_t v21 = xpc_dictionary_create(0, 0, 0);
  if (v21 || (xpc_object_t v21 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C8792D30](v21) == MEMORY[0x1E4F14590])
    {
      xpc_retain(v21);
      xpc_object_t v22 = v21;
    }
    else
    {
      xpc_object_t v22 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v22 = xpc_null_create();
    xpc_object_t v21 = 0;
  }
  xpc_release(v21);
  xpc_object_t v23 = xpc_null_create();
  int v24 = *v14;
  std::__shared_weak_count *v14 = v22;
  xpc_release(v24);
  xpc_release(v23);
  uint64_t Controller = TelephonyBasebandCreateController();
  uint64_t v26 = *(const void **)(a1 + 352);
  *(void *)(a1 + 352) = Controller;
  if (v26) {
    CFRelease(v26);
  }
  return a1;
}

void sub_1C5834170(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pthread_mutex_unlock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)(v9 + 34));
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)(v9 + 32));
  xpc::dict::~dict(v11);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)(v9 + 22));
  if (*v12 < 0) {
    operator delete(v9[19]);
  }
  ctu::SharedLoggable<RadioModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(v10);
  Service::~Service((Service *)v9);
  _Unwind_Resume(a1);
}

void sub_1C5834238()
{
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v0 + 176);
  if ((*v1 & 0x80000000) == 0) {
    JUMPOUT(0x1C583421CLL);
  }
  JUMPOUT(0x1C5834214);
}

void sub_1C5834250(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va3, a3);
  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v10 = va_arg(va2, void);
  uint64_t v12 = va_arg(va2, void);
  va_copy(va3, va2);
  uint64_t v13 = va_arg(va3, void);
  uint64_t v15 = va_arg(va3, void);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)va3);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)va2);
  ctu::SharedSynchronizable<DataStallDetection>::~SharedSynchronizable(v5);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)va1);
  if (v4) {
    dispatch_release(v4);
  }
  Service::~Service(v3);
  _Unwind_Resume(a1);
}

void xpc::dict::~dict(xpc_object_t *this)
{
  *this = 0;
}

void *ctu::SharedLoggable<RadioModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(void *a1)
{
  *a1 = &unk_1F20F74D0;
  MEMORY[0x1C8790F40](a1 + 1);
  uint64_t v2 = a1[12];
  if (v2) {
    dispatch_release(v2);
  }
  unint64_t v3 = a1[11];
  if (v3) {
    dispatch_release(v3);
  }
  int v4 = (std::__shared_weak_count *)a1[10];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = &unk_1F20F74D0;
  MEMORY[0x1C8790F40](a1 + 1);
  uint64_t v2 = a1[12];
  if (v2) {
    dispatch_release(v2);
  }
  unint64_t v3 = a1[11];
  if (v3) {
    dispatch_release(v3);
  }
  int v4 = (std::__shared_weak_count *)a1[10];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

void RadioModule::~RadioModule(RadioModule *this)
{
  *(void *)this = &unk_1F20F6950;
  *((void *)this + 6) = &unk_1F20F69C0;
  uint64_t v2 = *((void *)this + 11);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v20 = 0;
    _os_log_impl(&dword_1C5767000, v2, OS_LOG_TYPE_DEFAULT, "#I Gone!", v20, 2u);
  }
  unint64_t v3 = (const void *)*((void *)this + 44);
  if (v3) {
    CFRelease(v3);
  }
  if (*((void *)this + 43))
  {
    uint64_t v4 = *((void *)this + 41);
    uint64_t v5 = (RadioModule *)*((void *)this + 42);
    uint64_t v6 = *(void *)v5;
    *(void *)(v6 + 8) = *(void *)(v4 + 8);
    **(void **)(v4 + 8) = v6;
    *((void *)this + 43) = 0;
    if (v5 != (RadioModule *)((char *)this + 328))
    {
      do
      {
        uint64_t v7 = (RadioModule *)*((void *)v5 + 1);
        long long v8 = (atomic_uint *)*((void *)v5 + 3);
        if (v8 && atomic_fetch_add(v8 + 3, 0xFFFFFFFF) == 1) {
          (*(void (**)(atomic_uint *))(*(void *)v8 + 24))(v8);
        }
        operator delete(v5);
        uint64_t v5 = v7;
      }
      while (v7 != (RadioModule *)((char *)this + 328));
    }
  }
  uint64_t v9 = (std::__shared_weak_count *)*((void *)this + 39);
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  uint64_t v10 = (std::__shared_weak_count *)*((void *)this + 35);
  if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  size_t v11 = (std::__shared_weak_count *)*((void *)this + 33);
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  xpc_release(*((xpc_object_t *)this + 31));
  *((void *)this + 31) = 0;
  uint64_t v12 = (std::__shared_weak_count *)*((void *)this + 23);
  if (!v12 || atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if ((*((char *)this + 175) & 0x80000000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
  std::__shared_weak_count::__release_weak(v12);
  if (*((char *)this + 175) < 0) {
LABEL_24:
  }
    operator delete(*((void **)this + 19));
LABEL_25:
  *((void *)this + 6) = &unk_1F20F74D0;
  MEMORY[0x1C8790F40]((char *)this + 56);
  uint64_t v13 = *((void *)this + 18);
  if (v13) {
    dispatch_release(v13);
  }
  unint64_t v14 = *((void *)this + 17);
  if (v14) {
    dispatch_release(v14);
  }
  uint64_t v15 = (std::__shared_weak_count *)*((void *)this + 16);
  if (v15) {
    std::__shared_weak_count::__release_weak(v15);
  }
  *(void *)this = &unk_1F20FC1C8;
  uint64_t v16 = *((void *)this + 3);
  if (v16)
  {
    uint64_t v17 = *((void *)this + 4);
    int v18 = (void *)*((void *)this + 3);
    if (v17 != v16)
    {
      do
      {
        if (*(char *)(v17 - 1) < 0) {
          operator delete(*(void **)(v17 - 24));
        }
        v17 -= 24;
      }
      while (v17 != v16);
      int v18 = (void *)*((void *)this + 3);
    }
    *((void *)this + 4) = v16;
    operator delete(v18);
  }
  size_t v19 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v19) {
    std::__shared_weak_count::__release_weak(v19);
  }
}

{
  void *v1;
  uint64_t vars8;

  RadioModule::~RadioModule(this);

  operator delete(v1);
}

void non-virtual thunk to'RadioModule::~RadioModule(RadioModule *this)
{
}

{
  void *v1;
  uint64_t vars8;

  RadioModule::~RadioModule((RadioModule *)((char *)this - 48));

  operator delete(v1);
}

const char *RadioModule::getName(RadioModule *this)
{
  return "radio.mod";
}

void ___ZN11RadioModule4initEv_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(NSObject **)(*(void *)(a1 + 32) + 88);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v2 = 0;
    _os_log_impl(&dword_1C5767000, v1, OS_LOG_TYPE_DEFAULT, "#I Initializing", v2, 2u);
  }
}

unsigned char *RadioModule::getShutdownStages@<X0>(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  unint64_t v3 = operator new(1uLL);
  *a1 = v3;
  unsigned char *v3 = 3;
  xpc_object_t result = v3 + 1;
  a1[1] = result;
  a1[2] = result;
  return result;
}

void RadioModule::shutdown(uint64_t a1, char a2, NSObject **a3)
{
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 1174405120;
  v7[2] = ___ZN11RadioModule8shutdownE13ShutdownStageN8dispatch13group_sessionE_block_invoke;
  v7[3] = &__block_descriptor_tmp_5_12;
  uint64_t v5 = *a3;
  uint64_t v6 = (uint64_t *)(a1 + 120);
  void v7[4] = a1;
  dispatch_group_t group = v5;
  if (v5)
  {
    dispatch_retain(v5);
    dispatch_group_enter(group);
  }
  char v9 = a2;
  ctu::SharedSynchronizable<RadioModule>::execute_wrapped(v6, (uint64_t)v7);
  if (group)
  {
    dispatch_group_leave(group);
    if (group) {
      dispatch_release(group);
    }
  }
}

void ___ZN11RadioModule8shutdownE13ShutdownStageN8dispatch13group_sessionE_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  uint64_t v2 = v1 + 41;
  unint64_t v3 = (uint64_t *)v1[42];
  if (v3 != v1 + 41)
  {
    do
    {
      boost::signals2::connection::disconnect((boost::signals2::connection *)(v3 + 2));
      unint64_t v3 = (uint64_t *)v3[1];
    }
    while (v3 != v2);
  }
  if (v1[43])
  {
    uint64_t v4 = v1[41];
    uint64_t v5 = (uint64_t *)v1[42];
    uint64_t v6 = *v5;
    *(void *)(v6 + 8) = *(void *)(v4 + 8);
    **(void **)(v4 + 8) = v6;
    v1[43] = 0;
    if (v5 != v2)
    {
      do
      {
        uint64_t v7 = (uint64_t *)v5[1];
        long long v8 = (atomic_uint *)v5[3];
        if (v8 && atomic_fetch_add(v8 + 3, 0xFFFFFFFF) == 1) {
          (*(void (**)(atomic_uint *))(*(void *)v8 + 24))(v8);
        }
        operator delete(v5);
        uint64_t v5 = v7;
      }
      while (v7 != v2);
    }
  }
  char v9 = (std::__shared_weak_count *)v1[35];
  v1[34] = 0;
  v1[35] = 0;
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  uint64_t v10 = (std::__shared_weak_count *)v1[33];
  v1[32] = 0;
  v1[33] = 0;
  if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
    size_t v11 = (std::__shared_weak_count *)v1[23];
    v1[22] = 0;
    v1[23] = 0;
    if (!v11) {
      return;
    }
  }
  else
  {
    size_t v11 = (std::__shared_weak_count *)v1[23];
    v1[22] = 0;
    v1[23] = 0;
    if (!v11) {
      return;
    }
  }
  if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
}

void RadioModule::initialize(uint64_t *a1, NSObject **a2)
{
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 1174405120;
  uint64_t v11[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke;
  v11[3] = &__block_descriptor_tmp_161;
  unint64_t v3 = *a2;
  v11[4] = a1;
  dispatch_group_t group = v3;
  if (v3)
  {
    dispatch_retain(v3);
    dispatch_group_enter(group);
  }
  ctu::SharedSynchronizable<RadioModule>::execute_wrapped(a1 + 15, (uint64_t)v11);
  uint64_t v4 = (std::__shared_weak_count *)a1[16];
  if (!v4 || (uint64_t v5 = a1[15], (v6 = std::__shared_weak_count::lock(v4)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v7 = v6;
  long long v8 = operator new(8uLL);
  void *v8 = a1;
  char v9 = a1[17];
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v10 = operator new(0x18uLL);
  *uint64_t v10 = v8;
  v10[1] = v5;
  _DWORD v10[2] = v7;
  dispatch_async_f(v9, v10, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<RadioModule>::execute_wrapped<RadioModule::initialize(dispatch::group_session)::$_0>(RadioModule::initialize(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<RadioModule::initialize(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<RadioModule::initialize(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke);
  if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  if (group)
  {
    dispatch_group_leave(group);
    if (group) {
      dispatch_release(group);
    }
  }
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  uint64_t v2 = (std::__shared_weak_count *)v1[16];
  if (!v2 || (v3 = v1[15], (uint64_t v4 = std::__shared_weak_count::lock(v2)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v5 = v4;
  atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v5);
  }
  uint64_t v6 = (const void *)*MEMORY[0x1E4F4C880];
  size_t v7 = strlen((const char *)*MEMORY[0x1E4F4C880]);
  if (v7 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v8 = v7;
  if (v7 >= 0x17)
  {
    uint64_t v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17) {
      uint64_t v10 = v7 | 7;
    }
    uint64_t v11 = v10 + 1;
    p_dst = (void **)operator new(v10 + 1);
    size_t v260 = v8;
    unint64_t v261 = v11 | 0x8000000000000000;
    std::string __dst = p_dst;
    goto LABEL_12;
  }
  HIBYTE(v261) = v7;
  p_dst = (void **)&__dst;
  if (v7) {
LABEL_12:
  }
    memmove(p_dst, v6, v8);
  *((unsigned char *)p_dst + v8) = 0;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_2;
  aBlock[3] = &__block_descriptor_tmp_13_5;
  aBlock[4] = v1;
  void aBlock[5] = v3;
  v257 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  uint64_t v12 = _Block_copy(aBlock);
  v258 = v12;
  Service::registerCommandHandler((uint64_t)v1, (uint64_t)&__dst, &v258);
  if (v12) {
    _Block_release(v12);
  }
  if (SHIBYTE(v261) < 0) {
    operator delete(__dst);
  }
  uint64_t v13 = (const void *)*MEMORY[0x1E4F4CF40];
  size_t v14 = strlen((const char *)*MEMORY[0x1E4F4CF40]);
  if (v14 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v15 = v14;
  if (v14 >= 0x17)
  {
    uint64_t v17 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v14 | 7) != 0x17) {
      uint64_t v17 = v14 | 7;
    }
    uint64_t v18 = v17 + 1;
    uint64_t v16 = (void **)operator new(v17 + 1);
    size_t v260 = v15;
    unint64_t v261 = v18 | 0x8000000000000000;
    std::string __dst = v16;
    goto LABEL_24;
  }
  HIBYTE(v261) = v14;
  uint64_t v16 = (void **)&__dst;
  if (v14) {
LABEL_24:
  }
    memmove(v16, v13, v15);
  *((unsigned char *)v16 + v15) = 0;
  v253[0] = MEMORY[0x1E4F143A8];
  v253[1] = 1174405120;
  v253[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_14;
  v253[3] = &__block_descriptor_tmp_24_3;
  v253[4] = v1;
  v253[5] = v3;
  v254 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  size_t v19 = _Block_copy(v253);
  v255 = v19;
  Service::registerCommandHandler((uint64_t)v1, (uint64_t)&__dst, &v255);
  if (v19) {
    _Block_release(v19);
  }
  if (SHIBYTE(v261) < 0) {
    operator delete(__dst);
  }
  uint64_t v20 = (const void *)*MEMORY[0x1E4F4D058];
  size_t v21 = strlen((const char *)*MEMORY[0x1E4F4D058]);
  if (v21 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v22 = v21;
  if (v21 >= 0x17)
  {
    uint64_t v24 = (v21 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v21 | 7) != 0x17) {
      uint64_t v24 = v21 | 7;
    }
    uint64_t v25 = v24 + 1;
    xpc_object_t v23 = (void **)operator new(v24 + 1);
    size_t v260 = v22;
    unint64_t v261 = v25 | 0x8000000000000000;
    std::string __dst = v23;
    goto LABEL_36;
  }
  HIBYTE(v261) = v21;
  xpc_object_t v23 = (void **)&__dst;
  if (v21) {
LABEL_36:
  }
    memmove(v23, v20, v22);
  *((unsigned char *)v23 + v22) = 0;
  v250[0] = MEMORY[0x1E4F143A8];
  v250[1] = 1174405120;
  v250[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_25;
  v250[3] = &__block_descriptor_tmp_35_0;
  v250[4] = v1;
  v250[5] = v3;
  v251 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  uint64_t v26 = _Block_copy(v250);
  v252 = v26;
  Service::registerCommandHandler((uint64_t)v1, (uint64_t)&__dst, &v252);
  if (v26) {
    _Block_release(v26);
  }
  if (SHIBYTE(v261) < 0) {
    operator delete(__dst);
  }
  int v27 = (const void *)*MEMORY[0x1E4F4D068];
  size_t v28 = strlen((const char *)*MEMORY[0x1E4F4D068]);
  if (v28 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v29 = v28;
  if (v28 >= 0x17)
  {
    uint64_t v31 = (v28 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v28 | 7) != 0x17) {
      uint64_t v31 = v28 | 7;
    }
    uint64_t v32 = v31 + 1;
    uint64_t v30 = (void **)operator new(v31 + 1);
    size_t v260 = v29;
    unint64_t v261 = v32 | 0x8000000000000000;
    std::string __dst = v30;
    goto LABEL_48;
  }
  HIBYTE(v261) = v28;
  uint64_t v30 = (void **)&__dst;
  if (v28) {
LABEL_48:
  }
    memmove(v30, v27, v29);
  *((unsigned char *)v30 + v29) = 0;
  v247[0] = MEMORY[0x1E4F143A8];
  v247[1] = 1174405120;
  v247[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_36;
  v247[3] = &__block_descriptor_tmp_48_1;
  v247[4] = v1;
  v247[5] = v3;
  v248 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  uint64_t v33 = _Block_copy(v247);
  v249 = v33;
  Service::registerCommandHandler((uint64_t)v1, (uint64_t)&__dst, &v249);
  if (v33) {
    _Block_release(v33);
  }
  if (SHIBYTE(v261) < 0) {
    operator delete(__dst);
  }
  long long v34 = (const void *)*MEMORY[0x1E4F4D050];
  size_t v35 = strlen((const char *)*MEMORY[0x1E4F4D050]);
  if (v35 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v36 = v35;
  if (v35 >= 0x17)
  {
    uint64_t v38 = (v35 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v35 | 7) != 0x17) {
      uint64_t v38 = v35 | 7;
    }
    uint64_t v39 = v38 + 1;
    int v37 = (void **)operator new(v38 + 1);
    size_t v260 = v36;
    unint64_t v261 = v39 | 0x8000000000000000;
    std::string __dst = v37;
    goto LABEL_60;
  }
  HIBYTE(v261) = v35;
  int v37 = (void **)&__dst;
  if (v35) {
LABEL_60:
  }
    memmove(v37, v34, v36);
  *((unsigned char *)v37 + v36) = 0;
  v244[0] = MEMORY[0x1E4F143A8];
  v244[1] = 1174405120;
  v244[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_49;
  v244[3] = &__block_descriptor_tmp_60_3;
  v244[4] = v1;
  v244[5] = v3;
  v245 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  size_t v40 = _Block_copy(v244);
  v246 = v40;
  Service::registerCommandHandler((uint64_t)v1, (uint64_t)&__dst, &v246);
  if (v40) {
    _Block_release(v40);
  }
  if (SHIBYTE(v261) < 0) {
    operator delete(__dst);
  }
  int v41 = (const void *)*MEMORY[0x1E4F4CDC8];
  size_t v42 = strlen((const char *)*MEMORY[0x1E4F4CDC8]);
  if (v42 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v43 = v42;
  if (v42 >= 0x17)
  {
    uint64_t v45 = (v42 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v42 | 7) != 0x17) {
      uint64_t v45 = v42 | 7;
    }
    uint64_t v46 = v45 + 1;
    uint64_t v44 = (void **)operator new(v45 + 1);
    size_t v260 = v43;
    unint64_t v261 = v46 | 0x8000000000000000;
    std::string __dst = v44;
    goto LABEL_72;
  }
  HIBYTE(v261) = v42;
  uint64_t v44 = (void **)&__dst;
  if (v42) {
LABEL_72:
  }
    memmove(v44, v41, v43);
  *((unsigned char *)v44 + v43) = 0;
  v241[0] = MEMORY[0x1E4F143A8];
  v241[1] = 1174405120;
  v241[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_61;
  v241[3] = &__block_descriptor_tmp_68_2;
  v241[4] = v1;
  v241[5] = v3;
  v242 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  unint64_t v47 = _Block_copy(v241);
  v243 = v47;
  Service::registerCommandHandler((uint64_t)v1, (uint64_t)&__dst, &v243);
  if (v47) {
    _Block_release(v47);
  }
  if (SHIBYTE(v261) < 0) {
    operator delete(__dst);
  }
  size_t v48 = (const void *)*MEMORY[0x1E4F4CDD8];
  size_t v49 = strlen((const char *)*MEMORY[0x1E4F4CDD8]);
  if (v49 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v50 = v49;
  if (v49 >= 0x17)
  {
    uint64_t v52 = (v49 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v49 | 7) != 0x17) {
      uint64_t v52 = v49 | 7;
    }
    uint64_t v53 = v52 + 1;
    uint64_t v51 = (void **)operator new(v52 + 1);
    size_t v260 = v50;
    unint64_t v261 = v53 | 0x8000000000000000;
    std::string __dst = v51;
    goto LABEL_84;
  }
  HIBYTE(v261) = v49;
  uint64_t v51 = (void **)&__dst;
  if (v49) {
LABEL_84:
  }
    memmove(v51, v48, v50);
  *((unsigned char *)v51 + v50) = 0;
  v238[0] = MEMORY[0x1E4F143A8];
  v238[1] = 1174405120;
  v238[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_69;
  v238[3] = &__block_descriptor_tmp_80_2;
  v238[4] = v1;
  v238[5] = v3;
  v239 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  int v54 = _Block_copy(v238);
  v240 = v54;
  Service::registerCommandHandler((uint64_t)v1, (uint64_t)&__dst, &v240);
  if (v54) {
    _Block_release(v54);
  }
  if (SHIBYTE(v261) < 0) {
    operator delete(__dst);
  }
  xpc_object_t v55 = (const void *)*MEMORY[0x1E4F4C218];
  size_t v56 = strlen((const char *)*MEMORY[0x1E4F4C218]);
  if (v56 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v57 = v56;
  if (v56 >= 0x17)
  {
    uint64_t v59 = (v56 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v56 | 7) != 0x17) {
      uint64_t v59 = v56 | 7;
    }
    uint64_t v60 = v59 + 1;
    size_t v58 = (void **)operator new(v59 + 1);
    size_t v260 = v57;
    unint64_t v261 = v60 | 0x8000000000000000;
    std::string __dst = v58;
    goto LABEL_96;
  }
  HIBYTE(v261) = v56;
  size_t v58 = (void **)&__dst;
  if (v56) {
LABEL_96:
  }
    memmove(v58, v55, v57);
  *((unsigned char *)v58 + v57) = 0;
  v235[0] = MEMORY[0x1E4F143A8];
  v235[1] = 1174405120;
  v235[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_81;
  v235[3] = &__block_descriptor_tmp_92_0;
  v235[4] = v1;
  v235[5] = v3;
  v236 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  int v61 = _Block_copy(v235);
  v237 = v61;
  Service::registerCommandHandler((uint64_t)v1, (uint64_t)&__dst, &v237);
  if (v61) {
    _Block_release(v61);
  }
  if (SHIBYTE(v261) < 0) {
    operator delete(__dst);
  }
  int v62 = (const void *)*MEMORY[0x1E4F4D1C0];
  size_t v63 = strlen((const char *)*MEMORY[0x1E4F4D1C0]);
  if (v63 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v64 = v63;
  if (v63 >= 0x17)
  {
    uint64_t v66 = (v63 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v63 | 7) != 0x17) {
      uint64_t v66 = v63 | 7;
    }
    uint64_t v67 = v66 + 1;
    size_t v65 = (void **)operator new(v66 + 1);
    size_t v260 = v64;
    unint64_t v261 = v67 | 0x8000000000000000;
    std::string __dst = v65;
    goto LABEL_108;
  }
  HIBYTE(v261) = v63;
  size_t v65 = (void **)&__dst;
  if (v63) {
LABEL_108:
  }
    memmove(v65, v62, v64);
  *((unsigned char *)v65 + v64) = 0;
  v232[0] = MEMORY[0x1E4F143A8];
  v232[1] = 1174405120;
  v232[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_93;
  v232[3] = &__block_descriptor_tmp_96_1;
  v232[4] = v1;
  v232[5] = v3;
  v233 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  size_t v68 = _Block_copy(v232);
  v234 = v68;
  Service::registerCommandHandler((uint64_t)v1, (uint64_t)&__dst, &v234);
  if (v68) {
    _Block_release(v68);
  }
  if (SHIBYTE(v261) < 0) {
    operator delete(__dst);
  }
  size_t v69 = (const void *)*MEMORY[0x1E4F4C588];
  size_t v70 = strlen((const char *)*MEMORY[0x1E4F4C588]);
  if (v70 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v71 = v70;
  if (v70 >= 0x17)
  {
    uint64_t v73 = (v70 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v70 | 7) != 0x17) {
      uint64_t v73 = v70 | 7;
    }
    uint64_t v74 = v73 + 1;
    size_t v72 = (void **)operator new(v73 + 1);
    size_t v260 = v71;
    unint64_t v261 = v74 | 0x8000000000000000;
    std::string __dst = v72;
    goto LABEL_120;
  }
  HIBYTE(v261) = v70;
  size_t v72 = (void **)&__dst;
  if (v70) {
LABEL_120:
  }
    memmove(v72, v69, v71);
  *((unsigned char *)v72 + v71) = 0;
  v229[0] = MEMORY[0x1E4F143A8];
  v229[1] = 1174405120;
  v229[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_97;
  v229[3] = &__block_descriptor_tmp_100_1;
  v229[4] = v1;
  v229[5] = v3;
  v230 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  size_t v75 = _Block_copy(v229);
  v231 = v75;
  Service::registerCommandHandler((uint64_t)v1, (uint64_t)&__dst, &v231);
  if (v75) {
    _Block_release(v75);
  }
  if (SHIBYTE(v261) < 0) {
    operator delete(__dst);
  }
  xpc_object_t v76 = (const void *)*MEMORY[0x1E4F4CCB8];
  size_t v77 = strlen((const char *)*MEMORY[0x1E4F4CCB8]);
  if (v77 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v78 = v77;
  if (v77 >= 0x17)
  {
    uint64_t v80 = (v77 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v77 | 7) != 0x17) {
      uint64_t v80 = v77 | 7;
    }
    uint64_t v81 = v80 + 1;
    __int16 v79 = (void **)operator new(v80 + 1);
    size_t v260 = v78;
    unint64_t v261 = v81 | 0x8000000000000000;
    std::string __dst = v79;
    goto LABEL_132;
  }
  HIBYTE(v261) = v77;
  __int16 v79 = (void **)&__dst;
  if (v77) {
LABEL_132:
  }
    memmove(v79, v76, v78);
  *((unsigned char *)v79 + v78) = 0;
  v226[0] = MEMORY[0x1E4F143A8];
  v226[1] = 1174405120;
  v226[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_101;
  v226[3] = &__block_descriptor_tmp_104_0;
  v226[4] = v1;
  v226[5] = v3;
  v227 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  xpc_object_t v82 = _Block_copy(v226);
  v228 = v82;
  Service::registerCommandHandler((uint64_t)v1, (uint64_t)&__dst, &v228);
  if (v82) {
    _Block_release(v82);
  }
  if (SHIBYTE(v261) < 0) {
    operator delete(__dst);
  }
  unint64_t v83 = (const void *)*MEMORY[0x1E4F4CE70];
  size_t v84 = strlen((const char *)*MEMORY[0x1E4F4CE70]);
  if (v84 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v85 = v84;
  if (v84 >= 0x17)
  {
    uint64_t v87 = (v84 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v84 | 7) != 0x17) {
      uint64_t v87 = v84 | 7;
    }
    uint64_t v88 = v87 + 1;
    int v86 = (void **)operator new(v87 + 1);
    size_t v260 = v85;
    unint64_t v261 = v88 | 0x8000000000000000;
    std::string __dst = v86;
    goto LABEL_144;
  }
  HIBYTE(v261) = v84;
  int v86 = (void **)&__dst;
  if (v84) {
LABEL_144:
  }
    memmove(v86, v83, v85);
  *((unsigned char *)v86 + v85) = 0;
  v223[0] = MEMORY[0x1E4F143A8];
  v223[1] = 1174405120;
  v223[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_105;
  v223[3] = &__block_descriptor_tmp_108_0;
  v223[4] = v1;
  v223[5] = v3;
  v224 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  size_t v89 = _Block_copy(v223);
  v225 = v89;
  Service::registerCommandHandler((uint64_t)v1, (uint64_t)&__dst, &v225);
  if (v89) {
    _Block_release(v89);
  }
  if (SHIBYTE(v261) < 0) {
    operator delete(__dst);
  }
  int v90 = (const void *)*MEMORY[0x1E4F4C7E0];
  size_t v91 = strlen((const char *)*MEMORY[0x1E4F4C7E0]);
  if (v91 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v92 = v91;
  if (v91 >= 0x17)
  {
    uint64_t v94 = (v91 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v91 | 7) != 0x17) {
      uint64_t v94 = v91 | 7;
    }
    uint64_t v95 = v94 + 1;
    uint64_t v93 = (void **)operator new(v94 + 1);
    size_t v260 = v92;
    unint64_t v261 = v95 | 0x8000000000000000;
    std::string __dst = v93;
    goto LABEL_156;
  }
  HIBYTE(v261) = v91;
  uint64_t v93 = (void **)&__dst;
  if (v91) {
LABEL_156:
  }
    memmove(v93, v90, v92);
  *((unsigned char *)v93 + v92) = 0;
  v220[0] = MEMORY[0x1E4F143A8];
  v220[1] = 1174405120;
  v220[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_109;
  v220[3] = &__block_descriptor_tmp_112_3;
  v220[4] = v1;
  v220[5] = v3;
  v221 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  std::string v96 = _Block_copy(v220);
  v222 = v96;
  Service::registerCommandHandler((uint64_t)v1, (uint64_t)&__dst, &v222);
  if (v96) {
    _Block_release(v96);
  }
  if (SHIBYTE(v261) < 0) {
    operator delete(__dst);
  }
  xpc_object_t v97 = (const void *)*MEMORY[0x1E4F4D158];
  size_t v98 = strlen((const char *)*MEMORY[0x1E4F4D158]);
  if (v98 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v99 = v98;
  if (v98 >= 0x17)
  {
    uint64_t v101 = (v98 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v98 | 7) != 0x17) {
      uint64_t v101 = v98 | 7;
    }
    uint64_t v102 = v101 + 1;
    __int16 v100 = (void **)operator new(v101 + 1);
    size_t v260 = v99;
    unint64_t v261 = v102 | 0x8000000000000000;
    std::string __dst = v100;
    goto LABEL_168;
  }
  HIBYTE(v261) = v98;
  __int16 v100 = (void **)&__dst;
  if (v98) {
LABEL_168:
  }
    memmove(v100, v97, v99);
  *((unsigned char *)v100 + v99) = 0;
  v217[0] = MEMORY[0x1E4F143A8];
  v217[1] = 1174405120;
  v217[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_113;
  v217[3] = &__block_descriptor_tmp_116_0;
  v217[4] = v1;
  v217[5] = v3;
  v218 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  uint64_t v103 = _Block_copy(v217);
  v219 = v103;
  Service::registerCommandHandler((uint64_t)v1, (uint64_t)&__dst, &v219);
  if (v103) {
    _Block_release(v103);
  }
  if (SHIBYTE(v261) < 0) {
    operator delete(__dst);
  }
  if (capabilities::abs::supportsRFSelfTest(v104))
  {
    uint64_t v105 = (const void *)*MEMORY[0x1E4F4D0E0];
    size_t v106 = strlen((const char *)*MEMORY[0x1E4F4D0E0]);
    if (v106 > 0x7FFFFFFFFFFFFFF7) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    size_t v107 = v106;
    if (v106 >= 0x17)
    {
      uint64_t v110 = (v106 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v106 | 7) != 0x17) {
        uint64_t v110 = v106 | 7;
      }
      uint64_t v111 = v110 + 1;
      std::vector<std::string>::pointer v108 = (void **)operator new(v110 + 1);
      size_t v260 = v107;
      unint64_t v261 = v111 | 0x8000000000000000;
      std::string __dst = v108;
    }
    else
    {
      HIBYTE(v261) = v106;
      std::vector<std::string>::pointer v108 = (void **)&__dst;
      if (!v106)
      {
LABEL_184:
        *((unsigned char *)v108 + v107) = 0;
        v214[0] = MEMORY[0x1E4F143A8];
        v214[1] = 1174405120;
        v214[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_117;
        v214[3] = &__block_descriptor_tmp_120;
        v214[4] = v1;
        v214[5] = v3;
        v215 = v5;
        atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        uint64_t v112 = _Block_copy(v214);
        v216 = v112;
        Service::registerCommandHandler((uint64_t)v1, (uint64_t)&__dst, &v216);
        if (v112) {
          _Block_release(v112);
        }
        if (SHIBYTE(v261) < 0) {
          operator delete(__dst);
        }
        int v113 = (const void *)*MEMORY[0x1E4F4D0E8];
        size_t v114 = strlen((const char *)*MEMORY[0x1E4F4D0E8]);
        if (v114 > 0x7FFFFFFFFFFFFFF7) {
          std::string::__throw_length_error[abi:ne180100]();
        }
        size_t v115 = v114;
        if (v114 >= 0x17)
        {
          uint64_t v117 = (v114 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v114 | 7) != 0x17) {
            uint64_t v117 = v114 | 7;
          }
          uint64_t v118 = v117 + 1;
          int v116 = (void **)operator new(v117 + 1);
          size_t v260 = v115;
          unint64_t v261 = v118 | 0x8000000000000000;
          std::string __dst = v116;
        }
        else
        {
          HIBYTE(v261) = v114;
          int v116 = (void **)&__dst;
          if (!v114)
          {
LABEL_196:
            *((unsigned char *)v116 + v115) = 0;
            v211[0] = MEMORY[0x1E4F143A8];
            v211[1] = 1174405120;
            v211[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_121;
            v211[3] = &__block_descriptor_tmp_124;
            v211[4] = v1;
            v211[5] = v3;
            v212 = v5;
            atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
            size_t v119 = _Block_copy(v211);
            v213 = v119;
            Service::registerCommandHandler((uint64_t)v1, (uint64_t)&__dst, &v213);
            if (v119) {
              _Block_release(v119);
            }
            if (SHIBYTE(v261) < 0) {
              operator delete(__dst);
            }
            int v120 = (const void *)*MEMORY[0x1E4F4D1B0];
            size_t v121 = strlen((const char *)*MEMORY[0x1E4F4D1B0]);
            if (v121 > 0x7FFFFFFFFFFFFFF7) {
              std::string::__throw_length_error[abi:ne180100]();
            }
            size_t v122 = v121;
            if (v121 >= 0x17)
            {
              uint64_t v124 = (v121 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v121 | 7) != 0x17) {
                uint64_t v124 = v121 | 7;
              }
              uint64_t v125 = v124 + 1;
              unint64_t v123 = (void **)operator new(v124 + 1);
              size_t v260 = v122;
              unint64_t v261 = v125 | 0x8000000000000000;
              std::string __dst = v123;
            }
            else
            {
              HIBYTE(v261) = v121;
              unint64_t v123 = (void **)&__dst;
              if (!v121) {
                goto LABEL_208;
              }
            }
            memmove(v123, v120, v122);
LABEL_208:
            *((unsigned char *)v123 + v122) = 0;
            v208[0] = MEMORY[0x1E4F143A8];
            v208[1] = 1174405120;
            v208[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_125;
            v208[3] = &__block_descriptor_tmp_128_0;
            v208[4] = v1;
            v208[5] = v3;
            v209 = v5;
            atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
            int v126 = _Block_copy(v208);
            v210 = v126;
            Service::registerCommandHandler((uint64_t)v1, (uint64_t)&__dst, &v210);
            if (v126) {
              _Block_release(v126);
            }
            if (SHIBYTE(v261) < 0) {
              operator delete(__dst);
            }
            if (v209) {
              std::__shared_weak_count::__release_weak(v209);
            }
            if (v212) {
              std::__shared_weak_count::__release_weak(v212);
            }
            if (v215) {
              std::__shared_weak_count::__release_weak(v215);
            }
            goto LABEL_218;
          }
        }
        memmove(v116, v113, v115);
        goto LABEL_196;
      }
    }
    memmove(v108, v105, v107);
    goto LABEL_184;
  }
  uint64_t v109 = v1[11];
  if (os_log_type_enabled(v109, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(__dst) = 0;
    _os_log_impl(&dword_1C5767000, v109, OS_LOG_TYPE_DEFAULT, "#I RF Self Test not supported", (uint8_t *)&__dst, 2u);
  }
LABEL_218:
  BOOL v127 = (const void *)*MEMORY[0x1E4F4CA00];
  size_t v128 = strlen((const char *)*MEMORY[0x1E4F4CA00]);
  if (v128 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v129 = v128;
  if (v128 >= 0x17)
  {
    uint64_t v131 = (v128 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v128 | 7) != 0x17) {
      uint64_t v131 = v128 | 7;
    }
    uint64_t v132 = v131 + 1;
    uint64_t v130 = (void **)operator new(v131 + 1);
    size_t v260 = v129;
    unint64_t v261 = v132 | 0x8000000000000000;
    std::string __dst = v130;
    goto LABEL_225;
  }
  HIBYTE(v261) = v128;
  uint64_t v130 = (void **)&__dst;
  if (v128) {
LABEL_225:
  }
    memmove(v130, v127, v129);
  *((unsigned char *)v130 + v129) = 0;
  v205[0] = MEMORY[0x1E4F143A8];
  v205[1] = 1174405120;
  v205[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_129;
  v205[3] = &__block_descriptor_tmp_132_1;
  v205[4] = v1;
  v205[5] = v3;
  v206 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  long long v133 = _Block_copy(v205);
  v207 = v133;
  Service::registerCommandHandler((uint64_t)v1, (uint64_t)&__dst, &v207);
  if (v133) {
    _Block_release(v133);
  }
  if (SHIBYTE(v261) < 0) {
    operator delete(__dst);
  }
  long long v134 = (const void *)*MEMORY[0x1E4F4C730];
  size_t v135 = strlen((const char *)*MEMORY[0x1E4F4C730]);
  if (v135 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v136 = v135;
  if (v135 >= 0x17)
  {
    uint64_t v138 = (v135 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v135 | 7) != 0x17) {
      uint64_t v138 = v135 | 7;
    }
    uint64_t v139 = v138 + 1;
    long long v137 = (void **)operator new(v138 + 1);
    size_t v260 = v136;
    unint64_t v261 = v139 | 0x8000000000000000;
    std::string __dst = v137;
    goto LABEL_237;
  }
  HIBYTE(v261) = v135;
  long long v137 = (void **)&__dst;
  if (v135) {
LABEL_237:
  }
    memmove(v137, v134, v136);
  *((unsigned char *)v137 + v136) = 0;
  v202[0] = MEMORY[0x1E4F143A8];
  v202[1] = 1174405120;
  v202[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_133;
  v202[3] = &__block_descriptor_tmp_136_0;
  v202[4] = v1;
  v202[5] = v3;
  uint64_t v203 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  unint64_t v140 = _Block_copy(v202);
  v204 = v140;
  Service::registerCommandHandler((uint64_t)v1, (uint64_t)&__dst, &v204);
  if (v140) {
    _Block_release(v140);
  }
  if (SHIBYTE(v261) < 0) {
    operator delete(__dst);
  }
  std::string::size_type v141 = (const void *)*MEMORY[0x1E4F4C740];
  size_t v142 = strlen((const char *)*MEMORY[0x1E4F4C740]);
  if (v142 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v143 = v142;
  if (v142 >= 0x17)
  {
    uint64_t v145 = (v142 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v142 | 7) != 0x17) {
      uint64_t v145 = v142 | 7;
    }
    uint64_t v146 = v145 + 1;
    size_t v144 = (void **)operator new(v145 + 1);
    size_t v260 = v143;
    unint64_t v261 = v146 | 0x8000000000000000;
    std::string __dst = v144;
    goto LABEL_249;
  }
  HIBYTE(v261) = v142;
  size_t v144 = (void **)&__dst;
  if (v142) {
LABEL_249:
  }
    memmove(v144, v141, v143);
  *((unsigned char *)v144 + v143) = 0;
  v199[0] = MEMORY[0x1E4F143A8];
  v199[1] = 1174405120;
  v199[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_137;
  v199[3] = &__block_descriptor_tmp_140;
  v199[4] = v1;
  v199[5] = v3;
  v200 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  size_t v147 = _Block_copy(v199);
  v201 = v147;
  Service::registerCommandHandler((uint64_t)v1, (uint64_t)&__dst, &v201);
  if (v147) {
    _Block_release(v147);
  }
  if (SHIBYTE(v261) < 0) {
    operator delete(__dst);
  }
  size_t v148 = (const void *)*MEMORY[0x1E4F4C1C0];
  size_t v149 = strlen((const char *)*MEMORY[0x1E4F4C1C0]);
  if (v149 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v150 = v149;
  if (v149 >= 0x17)
  {
    uint64_t v152 = (v149 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v149 | 7) != 0x17) {
      uint64_t v152 = v149 | 7;
    }
    uint64_t v153 = v152 + 1;
    v151 = (void **)operator new(v152 + 1);
    size_t v260 = v150;
    unint64_t v261 = v153 | 0x8000000000000000;
    std::string __dst = v151;
    goto LABEL_261;
  }
  HIBYTE(v261) = v149;
  v151 = (void **)&__dst;
  if (v149) {
LABEL_261:
  }
    memmove(v151, v148, v150);
  *((unsigned char *)v151 + v150) = 0;
  v196[0] = MEMORY[0x1E4F143A8];
  v196[1] = 1174405120;
  v196[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_141;
  v196[3] = &__block_descriptor_tmp_144;
  v196[4] = v1;
  v196[5] = v3;
  v197 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  long long v154 = _Block_copy(v196);
  int v198 = v154;
  Service::registerCommandHandler((uint64_t)v1, (uint64_t)&__dst, &v198);
  if (v154) {
    _Block_release(v154);
  }
  if (SHIBYTE(v261) < 0) {
    operator delete(__dst);
  }
  if (capabilities::abs::supportsRFFEScanData(v155))
  {
    v156 = (const void *)*MEMORY[0x1E4F4CFC8];
    size_t v157 = strlen((const char *)*MEMORY[0x1E4F4CFC8]);
    if (v157 > 0x7FFFFFFFFFFFFFF7) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    size_t v158 = v157;
    if (v157 >= 0x17)
    {
      uint64_t v160 = (v157 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v157 | 7) != 0x17) {
        uint64_t v160 = v157 | 7;
      }
      uint64_t v161 = v160 + 1;
      std::string::size_type v159 = (void **)operator new(v160 + 1);
      size_t v260 = v158;
      unint64_t v261 = v161 | 0x8000000000000000;
      std::string __dst = v159;
    }
    else
    {
      HIBYTE(v261) = v157;
      std::string::size_type v159 = (void **)&__dst;
      if (!v157) {
        goto LABEL_275;
      }
    }
    memmove(v159, v156, v158);
LABEL_275:
    *((unsigned char *)v159 + v158) = 0;
    v193[0] = MEMORY[0x1E4F143A8];
    v193[1] = 1174405120;
    v193[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_145;
    v193[3] = &__block_descriptor_tmp_148_1;
    v193[4] = v1;
    v193[5] = v3;
    v194 = v5;
    atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v162 = _Block_copy(v193);
    v195 = v162;
    Service::registerCommandHandler((uint64_t)v1, (uint64_t)&__dst, &v195);
    if (v162) {
      _Block_release(v162);
    }
    if (SHIBYTE(v261) < 0) {
      operator delete(__dst);
    }
    if (v194) {
      std::__shared_weak_count::__release_weak(v194);
    }
  }
  std::string::size_type v163 = (const void *)*MEMORY[0x1E4F4CEE8];
  size_t v164 = strlen((const char *)*MEMORY[0x1E4F4CEE8]);
  if (v164 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v165 = v164;
  if (v164 >= 0x17)
  {
    uint64_t v167 = (v164 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v164 | 7) != 0x17) {
      uint64_t v167 = v164 | 7;
    }
    uint64_t v168 = v167 + 1;
    v166 = (void **)operator new(v167 + 1);
    size_t v260 = v165;
    unint64_t v261 = v168 | 0x8000000000000000;
    std::string __dst = v166;
    goto LABEL_288;
  }
  HIBYTE(v261) = v164;
  v166 = (void **)&__dst;
  if (v164) {
LABEL_288:
  }
    memmove(v166, v163, v165);
  *((unsigned char *)v166 + v165) = 0;
  v190[0] = MEMORY[0x1E4F143A8];
  v190[1] = 1174405120;
  v190[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_149;
  v190[3] = &__block_descriptor_tmp_150_2;
  v190[4] = v3;
  v191 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  std::string::size_type v169 = _Block_copy(v190);
  v192 = v169;
  Service::registerCommandHandler((uint64_t)v1, (uint64_t)&__dst, &v192);
  if (v169) {
    _Block_release(v169);
  }
  if (SHIBYTE(v261) < 0) {
    operator delete(__dst);
  }
  std::string::size_type v170 = (const void *)*MEMORY[0x1E4F4CDE0];
  size_t v171 = strlen((const char *)*MEMORY[0x1E4F4CDE0]);
  if (v171 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v172 = v171;
  if (v171 >= 0x17)
  {
    uint64_t v174 = (v171 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v171 | 7) != 0x17) {
      uint64_t v174 = v171 | 7;
    }
    uint64_t v175 = v174 + 1;
    unint64_t v173 = (void **)operator new(v174 + 1);
    size_t v260 = v172;
    unint64_t v261 = v175 | 0x8000000000000000;
    std::string __dst = v173;
    goto LABEL_300;
  }
  HIBYTE(v261) = v171;
  unint64_t v173 = (void **)&__dst;
  if (v171) {
LABEL_300:
  }
    memmove(v173, v170, v172);
  *((unsigned char *)v173 + v172) = 0;
  v187[0] = MEMORY[0x1E4F143A8];
  v187[1] = 1174405120;
  v187[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_151;
  v187[3] = &__block_descriptor_tmp_154;
  v187[4] = v3;
  v188 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  v176 = _Block_copy(v187);
  uint64_t v189 = v176;
  Service::registerCommandHandler((uint64_t)v1, (uint64_t)&__dst, &v189);
  if (v176) {
    _Block_release(v176);
  }
  if (SHIBYTE(v261) < 0) {
    operator delete(__dst);
  }
  v177 = (const void *)*MEMORY[0x1E4F4CDD0];
  size_t v178 = strlen((const char *)*MEMORY[0x1E4F4CDD0]);
  if (v178 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v179 = v178;
  if (v178 >= 0x17)
  {
    uint64_t v181 = (v178 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v178 | 7) != 0x17) {
      uint64_t v181 = v178 | 7;
    }
    uint64_t v182 = v181 + 1;
    uint64_t v180 = (void **)operator new(v181 + 1);
    size_t v260 = v179;
    unint64_t v261 = v182 | 0x8000000000000000;
    std::string __dst = v180;
    goto LABEL_312;
  }
  HIBYTE(v261) = v178;
  uint64_t v180 = (void **)&__dst;
  if (v178) {
LABEL_312:
  }
    memmove(v180, v177, v179);
  *((unsigned char *)v180 + v179) = 0;
  v184[0] = MEMORY[0x1E4F143A8];
  v184[1] = 1174405120;
  v184[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_155;
  v184[3] = &__block_descriptor_tmp_158;
  v184[4] = v3;
  xpc_object_t v185 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  v183 = _Block_copy(v184);
  v186 = v183;
  Service::registerCommandHandler((uint64_t)v1, (uint64_t)&__dst, &v186);
  if (v183) {
    _Block_release(v183);
  }
  if (SHIBYTE(v261) < 0) {
    operator delete(__dst);
  }
  if (v185) {
    std::__shared_weak_count::__release_weak(v185);
  }
  if (v188) {
    std::__shared_weak_count::__release_weak(v188);
  }
  if (v191) {
    std::__shared_weak_count::__release_weak(v191);
  }
  if (v197) {
    std::__shared_weak_count::__release_weak(v197);
  }
  if (v200) {
    std::__shared_weak_count::__release_weak(v200);
  }
  if (v203) {
    std::__shared_weak_count::__release_weak(v203);
  }
  if (v206) {
    std::__shared_weak_count::__release_weak(v206);
  }
  if (v218) {
    std::__shared_weak_count::__release_weak(v218);
  }
  if (v221) {
    std::__shared_weak_count::__release_weak(v221);
  }
  if (v224) {
    std::__shared_weak_count::__release_weak(v224);
  }
  if (v227) {
    std::__shared_weak_count::__release_weak(v227);
  }
  if (v230) {
    std::__shared_weak_count::__release_weak(v230);
  }
  if (v233) {
    std::__shared_weak_count::__release_weak(v233);
  }
  if (v236) {
    std::__shared_weak_count::__release_weak(v236);
  }
  if (v239) {
    std::__shared_weak_count::__release_weak(v239);
  }
  if (v242) {
    std::__shared_weak_count::__release_weak(v242);
  }
  if (v245) {
    std::__shared_weak_count::__release_weak(v245);
  }
  if (v248) {
    std::__shared_weak_count::__release_weak(v248);
  }
  if (v251) {
    std::__shared_weak_count::__release_weak(v251);
  }
  if (v254) {
    std::__shared_weak_count::__release_weak(v254);
  }
  if (v257) {
    std::__shared_weak_count::__release_weak(v257);
  }
  std::__shared_weak_count::__release_weak(v5);
}

void sub_1C5836994(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,std::__shared_weak_count *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,std::__shared_weak_count *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,std::__shared_weak_count *a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,std::__shared_weak_count *a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,std::__shared_weak_count *a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,std::__shared_weak_count *a61,uint64_t a62,uint64_t a63)
{
  if (v70) {
    _Block_release(v70);
  }
  if (a37) {
    std::__shared_weak_count::__release_weak(a37);
  }
  if (*(char *)(v71 - 105) < 0) {
    operator delete(*(void **)(v71 - 128));
  }
  if (a45) {
    std::__shared_weak_count::__release_weak(a45);
  }
  if (a53) {
    std::__shared_weak_count::__release_weak(a53);
  }
  if (a61) {
    std::__shared_weak_count::__release_weak(a61);
  }
  if (a69) {
    std::__shared_weak_count::__release_weak(a69);
  }
  if (STACK[0x2E0]) {
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)STACK[0x2E0]);
  }
  if (STACK[0x320]) {
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)STACK[0x320]);
  }
  if (STACK[0x360]) {
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)STACK[0x360]);
  }
  if (STACK[0x3A0]) {
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)STACK[0x3A0]);
  }
  if (STACK[0x3E0]) {
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)STACK[0x3E0]);
  }
  if (STACK[0x420]) {
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)STACK[0x420]);
  }
  if (STACK[0x460]) {
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)STACK[0x460]);
  }
  if (STACK[0x4A0]) {
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)STACK[0x4A0]);
  }
  if (STACK[0x4E0]) {
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)STACK[0x4E0]);
  }
  if (STACK[0x520]) {
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)STACK[0x520]);
  }
  if (STACK[0x560]) {
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)STACK[0x560]);
  }
  if (STACK[0x5A0]) {
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)STACK[0x5A0]);
  }
  uint64_t v73 = *(std::__shared_weak_count **)(v71 - 208);
  if (v73) {
    std::__shared_weak_count::__release_weak(v73);
  }
  uint64_t v74 = *(std::__shared_weak_count **)(v71 - 144);
  if (v74) {
    std::__shared_weak_count::__release_weak(v74);
  }
  std::__shared_weak_count::__release_weak(v69);
  _Unwind_Resume(a1);
}

void sub_1C583711C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (!a69) {
    JUMPOUT(0x1C5837064);
  }
  JUMPOUT(0x1C5837060);
}

void sub_1C583712C()
{
}

void sub_1C5837134()
{
  if (!STACK[0x320]) {
    JUMPOUT(0x1C583707CLL);
  }
  JUMPOUT(0x1C5837078);
}

void sub_1C5837144()
{
}

void sub_1C583714C()
{
  if (!STACK[0x3A0]) {
    JUMPOUT(0x1C5837094);
  }
  JUMPOUT(0x1C5837090);
}

void sub_1C583715C()
{
}

void sub_1C5837164()
{
  if (!STACK[0x420]) {
    JUMPOUT(0x1C58370ACLL);
  }
  JUMPOUT(0x1C58370A8);
}

void sub_1C5837174()
{
}

void sub_1C583717C()
{
  if (!STACK[0x4A0]) {
    JUMPOUT(0x1C58370C4);
  }
  JUMPOUT(0x1C58370C0);
}

void sub_1C583718C()
{
}

void sub_1C5837194()
{
  if (!STACK[0x520]) {
    JUMPOUT(0x1C58370DCLL);
  }
  JUMPOUT(0x1C58370D8);
}

void sub_1C58371A4()
{
}

void sub_1C58371AC()
{
  if (!STACK[0x5A0]) {
    JUMPOUT(0x1C58370F4);
  }
  JUMPOUT(0x1C58370F0);
}

void sub_1C58371BC()
{
}

void sub_1C58371C4()
{
  if (!*(void *)(v0 - 144)) {
    JUMPOUT(0x1C583710CLL);
  }
  JUMPOUT(0x1C5837108);
}

void sub_1C58371D4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_weak(v1);
  _Unwind_Resume(a1);
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_2(void *a1, uint64_t a2, const void **a3)
{
  uint64_t v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    uint64_t v6 = a1[4];
    size_t v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      size_t v8 = v7;
      uint64_t v9 = a1[5];
      if (!v9)
      {
LABEL_11:
        if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
        return;
      }
      v14[0] = MEMORY[0x1E4F143A8];
      v14[1] = 1174405120;
      v14[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_3;
      v14[3] = &__block_descriptor_tmp_11_2;
      void v14[4] = v6;
      if (*a3)
      {
        uint64_t v10 = _Block_copy(*a3);
        uint64_t v11 = a1[5];
        uint64_t v12 = (uint64_t *)(v6 + 120);
        aBlocunint64_t k = v10;
        uint64_t v16 = v11;
        uint64_t v13 = (std::__shared_weak_count *)a1[6];
        uint64_t v17 = v13;
        if (!v13)
        {
LABEL_7:
          ctu::SharedSynchronizable<RadioModule>::execute_wrapped(v12, (uint64_t)v14);
          if (v17) {
            std::__shared_weak_count::__release_weak(v17);
          }
          if (aBlock) {
            _Block_release(aBlock);
          }
          goto LABEL_11;
        }
      }
      else
      {
        uint64_t v12 = (uint64_t *)(v6 + 120);
        aBlocunint64_t k = 0;
        uint64_t v16 = v9;
        uint64_t v13 = (std::__shared_weak_count *)a1[6];
        uint64_t v17 = v13;
        if (!v13) {
          goto LABEL_7;
        }
      }
      atomic_fetch_add_explicit(&v13->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      goto LABEL_7;
    }
  }
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_3(void *a1)
{
  uint64_t v52 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (void *)a1[4];
  if ((*(unsigned int (**)(void *))(*v2 + 88))(v2))
  {
    memset(__p, 170, 24);
    uint64_t v3 = (const void *)*MEMORY[0x1E4F4C880];
    size_t v4 = strlen((const char *)*MEMORY[0x1E4F4C880]);
    if (v4 >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    std::string::size_type v5 = v4;
    if (v4 >= 0x17)
    {
      uint64_t v21 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v4 | 7) != 0x17) {
        uint64_t v21 = v4 | 7;
      }
      uint64_t v22 = v21 + 1;
      p_dst = (std::string *)operator new(v21 + 1);
      __dst.__r_.__value_.__l.__size_ = v5;
      __dst.__r_.__value_.__r.__words[2] = v22 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v4;
      p_dst = &__dst;
      if (!v4)
      {
LABEL_53:
        p_dst->__r_.__value_.__s.__data_[v5] = 0;
        xpc_object_t v23 = (char *)operator new(0x28uLL);
        strcpy(v23, " rejected; ABM is shutting down ");
        uint64_t v24 = std::string::append(&__dst, v23, 0x20uLL);
        long long v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
        __p[2] = (void *)v24->__r_.__value_.__r.__words[2];
        *(_OWORD *)std::string __p = v25;
        v24->__r_.__value_.__l.__size_ = 0;
        v24->__r_.__value_.__r.__words[2] = 0;
        v24->__r_.__value_.__r.__words[0] = 0;
        operator delete(v23);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__dst.__r_.__value_.__l.__data_);
          uint64_t v26 = v2[11];
          if (!os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
          {
LABEL_55:
            uint64_t v28 = a1[5];
            int v27 = a1 + 5;
            if (!v28)
            {
LABEL_79:
              if (SHIBYTE(__p[2]) < 0) {
                operator delete(__p[0]);
              }
              return;
            }
LABEL_61:
            __dst.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
            uint64_t v31 = (void *)HIBYTE(__p[2]);
            if (SHIBYTE(__p[2]) < 0) {
              uint64_t v31 = __p[1];
            }
            if (v31)
            {
              xpc_object_t v32 = xpc_dictionary_create(0, 0, 0);
              if (v32 || (xpc_object_t v32 = xpc_null_create()) != 0)
              {
                if (MEMORY[0x1C8792D30](v32) == MEMORY[0x1E4F14590])
                {
                  xpc_retain(v32);
                  xpc_object_t v33 = v32;
                }
                else
                {
                  xpc_object_t v33 = xpc_null_create();
                }
              }
              else
              {
                xpc_object_t v33 = xpc_null_create();
                xpc_object_t v32 = 0;
              }
              xpc_release(v32);
              xpc_object_t v34 = xpc_null_create();
              size_t v35 = (void *)__dst.__r_.__value_.__r.__words[0];
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v33;
              xpc_release(v35);
              xpc_release(v34);
              if (SHIBYTE(__p[2]) >= 0) {
                size_t v36 = __p;
              }
              else {
                size_t v36 = (void **)__p[0];
              }
              xpc_object_t v37 = xpc_string_create((const char *)v36);
              if (!v37) {
                xpc_object_t v37 = xpc_null_create();
              }
              xpc_dictionary_set_value(v33, (const char *)*MEMORY[0x1E4F4C240], v37);
              xpc_object_t v38 = xpc_null_create();
              xpc_release(v37);
              xpc_release(v38);
            }
            LODWORD(v45) = -534716415;
            dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(v27, (unsigned int *)&v45, (void **)&__dst.__r_.__value_.__l.__data_);
            xpc_release(__dst.__r_.__value_.__l.__data_);
            goto LABEL_79;
          }
        }
        else
        {
          uint64_t v26 = v2[11];
          if (!os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_55;
          }
        }
        size_t v29 = __p;
        if (SHIBYTE(__p[2]) < 0) {
          size_t v29 = (void **)__p[0];
        }
        LODWORD(__dst.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = (std::string::size_type)v29;
        _os_log_impl(&dword_1C5767000, v26, OS_LOG_TYPE_DEFAULT, "#I %s", (uint8_t *)&__dst, 0xCu);
        uint64_t v30 = a1[5];
        int v27 = a1 + 5;
        if (!v30) {
          goto LABEL_79;
        }
        goto LABEL_61;
      }
    }
    memmove(p_dst, v3, v5);
    goto LABEL_53;
  }
  __dst.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
  __dst.__r_.__value_.__l.__size_ = 0xAAAAAAAAAAAAAAAALL;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_7;
  aBlock[3] = &__block_descriptor_tmp_10_1;
  uint64_t v8 = a1[6];
  size_t v7 = (std::__shared_weak_count *)a1[7];
  aBlock[4] = v2;
  void aBlock[5] = v8;
  size_t v48 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v9 = (void *)a1[5];
  if (v9) {
    uint64_t v9 = _Block_copy(v9);
  }
  size_t v49 = v9;
  uint64_t v10 = _Block_copy(aBlock);
  uint64_t v11 = v2[17];
  if (v11) {
    dispatch_retain(v11);
  }
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v10;
  __dst.__r_.__value_.__l.__size_ = (std::string::size_type)v11;
  unint64_t v45 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v46 = (std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL;
  uint64_t v12 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  uint64_t v13 = off_1EBBDD2A0;
  if (!off_1EBBDD2A0)
  {
    CommandDriverFactory::create_default_global((uint64_t *)__p, v12);
    long long v14 = *(_OWORD *)__p;
    __p[0] = 0;
    __p[1] = 0;
    size_t v15 = (std::__shared_weak_count *)*(&off_1EBBDD2A0 + 1);
    off_1EBBDD2A0 = v14;
    if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
    uint64_t v16 = (std::__shared_weak_count *)__p[1];
    if (__p[1] && !atomic_fetch_add((atomic_ullong *volatile)__p[1] + 1, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
    uint64_t v13 = off_1EBBDD2A0;
  }
  uint64_t v17 = (std::__shared_weak_count *)*(&off_1EBBDD2A0 + 1);
  uint64_t v41 = v13;
  uint64_t v42 = *(&off_1EBBDD2A0 + 1);
  if (*(&off_1EBBDD2A0 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDD2A0 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(unint64_t *__return_ptr, uint64_t))(*(void *)v13 + 16))(&v43, v13);
  unint64_t v45 = 0;
  uint64_t v46 = 0;
  if (v44)
  {
    uint64_t v46 = std::__shared_weak_count::lock(v44);
    if (v46) {
      unint64_t v45 = v43;
    }
    if (v44) {
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  if (v17 && !atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
    unint64_t v18 = v45;
    if (v45) {
      goto LABEL_30;
    }
  }
  else
  {
    unint64_t v18 = v45;
    if (v45)
    {
LABEL_30:
      size_t v19 = (void *)__dst.__r_.__value_.__r.__words[0];
      if (__dst.__r_.__value_.__r.__words[0]) {
        size_t v19 = _Block_copy(__dst.__r_.__value_.__l.__data_);
      }
      uint64_t v39 = v19;
      dispatch_object_t object = (dispatch_object_t)__dst.__r_.__value_.__l.__size_;
      if (__dst.__r_.__value_.__l.__size_) {
        dispatch_retain((dispatch_object_t)__dst.__r_.__value_.__l.__size_);
      }
      (*(void (**)(unint64_t, void **))(*(void *)v18 + 96))(v18, &v39);
      if (object) {
        dispatch_release(object);
      }
      if (v39) {
        _Block_release(v39);
      }
    }
  }
  uint64_t v20 = v46;
  if (v46 && !atomic_fetch_add(&v46->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
  if (__dst.__r_.__value_.__l.__size_) {
    dispatch_release((dispatch_object_t)__dst.__r_.__value_.__l.__size_);
  }
  if (__dst.__r_.__value_.__r.__words[0]) {
    _Block_release(__dst.__r_.__value_.__l.__data_);
  }
  if (v49) {
    _Block_release(v49);
  }
  if (v48) {
    std::__shared_weak_count::__release_weak(v48);
  }
}

void sub_1C58379B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,std::__shared_weak_count *a23,void *aBlock,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_7(void *a1, uint64_t *a2, const __CFDictionary **a3)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  size_t v4 = (std::__shared_weak_count *)a1[6];
  if (!v4) {
    return;
  }
  uint64_t v7 = a1[4];
  uint64_t v8 = std::__shared_weak_count::lock(v4);
  xpc_object_t v38 = v8;
  if (!v8) {
    return;
  }
  if (!a1[5])
  {
    uint64_t v11 = v8;
LABEL_41:
    if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    return;
  }
  unsigned int v36 = 0;
  xpc_object_t v9 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v10 = v9;
  if (v9)
  {
    xpc_object_t xdict = v9;
  }
  else
  {
    xpc_object_t v10 = xpc_null_create();
    xpc_object_t xdict = v10;
    if (!v10)
    {
      xpc_object_t v12 = xpc_null_create();
      xpc_object_t v10 = 0;
      goto LABEL_12;
    }
  }
  if (MEMORY[0x1C8792D30](v10) == MEMORY[0x1E4F14590])
  {
    xpc_retain(v10);
    goto LABEL_13;
  }
  xpc_object_t v12 = xpc_null_create();
LABEL_12:
  xpc_object_t xdict = v12;
LABEL_13:
  xpc_release(v10);
  v33[1] = (void *)0xAAAAAAAAAAAAAAAALL;
  uint64_t v34 = 0xAAAAAAAAAAAAAALL;
  int64_t value = 0;
  v33[0] = (void *)0xAAAAAAAAAAAAAA00;
  int64_t valuePtr = 0;
  uint64_t v13 = *a2;
  if (v13) {
    long long v14 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  }
  else {
    long long v14 = 0;
  }
  if (v14)
  {
    unsigned int v36 = -534716416;
    size_t v15 = *(NSObject **)(v7 + 88);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 138412290;
      *(void *)&uint8_t buf[4] = v13;
      _os_log_error_impl(&dword_1C5767000, v15, OS_LOG_TYPE_ERROR, "%@", buf, 0xCu);
    }
    xpc_object_t v16 = xpc_string_create("Unknown error");
    if (!v16) {
      xpc_object_t v16 = xpc_null_create();
    }
    xpc_dictionary_set_value(xdict, (const char *)*MEMORY[0x1E4F4C240], v16);
    xpc_object_t v17 = xpc_null_create();
    xpc_release(v16);
    xpc_release(v17);
  }
  else
  {
    CFDictionaryRef v18 = *a3;
    if (*a3) {
      size_t v19 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
    }
    else {
      size_t v19 = 0;
    }
    if (v19)
    {
      v30[0] = 0xAAAAAAAAAAAAAAAALL;
      v30[1] = 0xAAAAAAAAAAAAAAAALL;
      ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v30, v18);
      CFNumberRef v20 = (const __CFNumber *)ctu::cf::map_adapter::copyCFNumberRef((ctu::cf::map_adapter *)v30, (const __CFString *)*MEMORY[0x1E4FB9A98]);
      CFNumberRef v21 = v20;
      if (v20)
      {
        CFNumberGetValue(v20, kCFNumberLongType, &valuePtr);
        CFRelease(v21);
        LODWORD(value) = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v30, (const __CFString *)*MEMORY[0x1E4FB9AC0]);
      }
      ctu::cf::map_adapter::getString();
      *(_OWORD *)xpc_object_t v33 = *(_OWORD *)buf;
      uint64_t v34 = v40;
      HIBYTE(v40) = 0;
      buf[0] = 0;
      xpc_object_t v22 = xpc_int64_create(valuePtr);
      if (!v22) {
        xpc_object_t v22 = xpc_null_create();
      }
      xpc_object_t v23 = xdict;
      xpc_dictionary_set_value(xdict, (const char *)*MEMORY[0x1E4F4C908], v22);
      xpc_object_t v24 = xpc_null_create();
      xpc_release(v22);
      xpc_release(v24);
      xpc_object_t v25 = xpc_int64_create((int)value);
      if (!v25) {
        xpc_object_t v25 = xpc_null_create();
      }
      xpc_dictionary_set_value(v23, (const char *)*MEMORY[0x1E4F4CE28], v25);
      xpc_object_t v26 = xpc_null_create();
      xpc_release(v25);
      xpc_release(v26);
      if (v34 >= 0) {
        int v27 = v33;
      }
      else {
        int v27 = (void **)v33[0];
      }
      xpc_object_t v28 = xpc_string_create((const char *)v27);
      if (!v28) {
        xpc_object_t v28 = xpc_null_create();
      }
      xpc_dictionary_set_value(v23, (const char *)*MEMORY[0x1E4F4CA40], v28);
      xpc_object_t v29 = xpc_null_create();
      xpc_release(v28);
      xpc_release(v29);
      MEMORY[0x1C8791160](v30);
    }
  }
  dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int &,xpc::dict&>(a1 + 7, &v36, &xdict);
  if (SHIBYTE(v34) < 0) {
    operator delete(v33[0]);
  }
  xpc_release(xdict);
  uint64_t v11 = v38;
  if (v38) {
    goto LABEL_41;
  }
}

void sub_1C5837F0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,xpc_object_t object)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void *__copy_helper_block_e8_40c36_ZTSNSt3__18weak_ptrI11RadioModuleEE56c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE(void *a1, void *a2)
{
  uint64_t v3 = a2[6];
  a1[5] = a2[5];
  a1[6] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  xpc_object_t result = (void *)a2[7];
  if (result) {
    xpc_object_t result = _Block_copy(result);
  }
  a1[7] = result;
  return result;
}

void __destroy_helper_block_e8_40c36_ZTSNSt3__18weak_ptrI11RadioModuleEE56c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 56);
  if (v2) {
    _Block_release(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3)
  {
    std::__shared_weak_count::__release_weak(v3);
  }
}

void *__copy_helper_block_e8_40c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE48c36_ZTSNSt3__18weak_ptrI11RadioModuleEE(void *a1, void *a2)
{
  xpc_object_t result = (void *)a2[5];
  if (result) {
    xpc_object_t result = _Block_copy(result);
  }
  uint64_t v6 = a2[6];
  uint64_t v5 = a2[7];
  a1[5] = result;
  a1[6] = v6;
  a1[7] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE48c36_ZTSNSt3__18weak_ptrI11RadioModuleEE(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 56);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = *(const void **)(a1 + 40);
  if (v3) {
    _Block_release(v3);
  }
}

uint64_t __copy_helper_block_e8_40c36_ZTSNSt3__18weak_ptrI11RadioModuleEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c36_ZTSNSt3__18weak_ptrI11RadioModuleEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_14(void *a1, uint64_t a2, void **a3)
{
  size_t v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    uint64_t v6 = a1[4];
    uint64_t v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      uint64_t v8 = v7;
      if (a1[5])
      {
        v10[0] = MEMORY[0x1E4F143A8];
        v10[1] = 1174405120;
        _DWORD v10[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_2_15;
        v10[3] = &__block_descriptor_tmp_21_3;
        void v10[4] = v6;
        xpc_object_t v9 = *a3;
        if (*a3) {
          xpc_object_t v9 = _Block_copy(v9);
        }
        aBlocunint64_t k = v9;
        ctu::SharedSynchronizable<RadioModule>::execute_wrapped((uint64_t *)(v6 + 120), (uint64_t)v10);
        if (aBlock) {
          _Block_release(aBlock);
        }
      }
      if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_2_15(uint64_t a1)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void **)(a1 + 32);
  if ((*(unsigned int (**)(void *))(*v2 + 88))(v2))
  {
    memset(__p, 170, 24);
    uint64_t v3 = (const void *)*MEMORY[0x1E4F4CF40];
    size_t v4 = strlen((const char *)*MEMORY[0x1E4F4CF40]);
    if (v4 >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    std::string::size_type v5 = v4;
    if (v4 >= 0x17)
    {
      uint64_t v9 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v4 | 7) != 0x17) {
        uint64_t v9 = v4 | 7;
      }
      uint64_t v10 = v9 + 1;
      p_dst = (std::string *)operator new(v9 + 1);
      __dst.__r_.__value_.__l.__size_ = v5;
      __dst.__r_.__value_.__r.__words[2] = v10 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v4;
      p_dst = &__dst;
      if (!v4)
      {
LABEL_16:
        p_dst->__r_.__value_.__s.__data_[v5] = 0;
        uint64_t v11 = (char *)operator new(0x28uLL);
        strcpy(v11, " rejected; ABM is shutting down ");
        xpc_object_t v12 = std::string::append(&__dst, v11, 0x20uLL);
        long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
        __p[2] = (void *)v12->__r_.__value_.__r.__words[2];
        *(_OWORD *)std::string __p = v13;
        v12->__r_.__value_.__l.__size_ = 0;
        v12->__r_.__value_.__r.__words[2] = 0;
        v12->__r_.__value_.__r.__words[0] = 0;
        operator delete(v11);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__dst.__r_.__value_.__l.__data_);
          long long v14 = v2[11];
          if (!os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
          {
LABEL_18:
            uint64_t v16 = *(void *)(a1 + 40);
            size_t v15 = (uint64_t *)(a1 + 40);
            if (!v16)
            {
LABEL_40:
              if (SHIBYTE(__p[2]) < 0) {
                operator delete(__p[0]);
              }
              return;
            }
LABEL_24:
            __dst.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
            size_t v19 = (void *)HIBYTE(__p[2]);
            if (SHIBYTE(__p[2]) < 0) {
              size_t v19 = __p[1];
            }
            if (v19)
            {
              xpc_object_t v20 = xpc_dictionary_create(0, 0, 0);
              if (v20 || (xpc_object_t v20 = xpc_null_create()) != 0)
              {
                if (MEMORY[0x1C8792D30](v20) == MEMORY[0x1E4F14590])
                {
                  xpc_retain(v20);
                  xpc_object_t v21 = v20;
                }
                else
                {
                  xpc_object_t v21 = xpc_null_create();
                }
              }
              else
              {
                xpc_object_t v21 = xpc_null_create();
                xpc_object_t v20 = 0;
              }
              xpc_release(v20);
              xpc_object_t v22 = xpc_null_create();
              xpc_object_t v23 = (void *)__dst.__r_.__value_.__r.__words[0];
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v21;
              xpc_release(v23);
              xpc_release(v22);
              if (SHIBYTE(__p[2]) >= 0) {
                xpc_object_t v24 = __p;
              }
              else {
                xpc_object_t v24 = (void **)__p[0];
              }
              xpc_object_t v25 = xpc_string_create((const char *)v24);
              if (!v25) {
                xpc_object_t v25 = xpc_null_create();
              }
              xpc_dictionary_set_value(v21, (const char *)*MEMORY[0x1E4F4C240], v25);
              xpc_object_t v26 = xpc_null_create();
              xpc_release(v25);
              xpc_release(v26);
            }
            unsigned int v30 = -534716415;
            dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(v15, &v30, (void **)&__dst.__r_.__value_.__l.__data_);
            xpc_release(__dst.__r_.__value_.__l.__data_);
            goto LABEL_40;
          }
        }
        else
        {
          long long v14 = v2[11];
          if (!os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_18;
          }
        }
        xpc_object_t v17 = __p;
        if (SHIBYTE(__p[2]) < 0) {
          xpc_object_t v17 = (void **)__p[0];
        }
        LODWORD(__dst.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = (std::string::size_type)v17;
        _os_log_impl(&dword_1C5767000, v14, OS_LOG_TYPE_DEFAULT, "#I %s", (uint8_t *)&__dst, 0xCu);
        uint64_t v18 = *(void *)(a1 + 40);
        size_t v15 = (uint64_t *)(a1 + 40);
        if (!v18) {
          goto LABEL_40;
        }
        goto LABEL_24;
      }
    }
    memmove(p_dst, v3, v5);
    goto LABEL_16;
  }
  v27[0] = MEMORY[0x1E4F143A8];
  v27[1] = 1174405120;
  uint64_t v27[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_16;
  v27[3] = &__block_descriptor_tmp_18_0;
  v27[4] = v2;
  uint64_t v7 = *(void **)(a1 + 40);
  if (v7) {
    uint64_t v7 = _Block_copy(v7);
  }
  aBlocunint64_t k = v7;
  uint64_t v8 = (void (**)(void *, std::string *))_Block_copy(v27);
  xpc_object_t v29 = v8;
  RadioModule::getVersion_sync((uint64_t)v2, &v29);
  if (v8) {
    _Block_release(v8);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
}

void sub_1C583864C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *aBlock, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void RadioModule::getVersion_sync(uint64_t a1, void (***a2)(void *, std::string *))
{
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 128);
  if (!v3 || (uint64_t v5 = *(void *)(a1 + 120), (v6 = std::__shared_weak_count::lock(v3)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v7 = v6;
  atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    uint64_t v8 = (std::string *)(a1 + 152);
    int v9 = *(char *)(a1 + 175);
    if ((v9 & 0x80000000) == 0) {
      goto LABEL_5;
    }
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v7);
    uint64_t v8 = (std::string *)(a1 + 152);
    int v9 = *(char *)(a1 + 175);
    if ((v9 & 0x80000000) == 0)
    {
LABEL_5:
      if (v9)
      {
        uint64_t v10 = *a2;
        std::string v37 = *v8;
        goto LABEL_10;
      }
      goto LABEL_12;
    }
  }
  std::string::size_type v11 = *(void *)(a1 + 160);
  if (v11)
  {
    uint64_t v10 = *a2;
    std::string::__init_copy_ctor_external(&v37, v8->__r_.__value_.__l.__data_, v11);
LABEL_10:
    v10[2](v10, &v37);
    if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v37.__r_.__value_.__l.__data_);
    }
    goto LABEL_53;
  }
LABEL_12:
  size_t v35 = (void *)0xAAAAAAAAAAAAAAAALL;
  dispatch_object_t v36 = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN11RadioModule15getVersion_syncEN8dispatch5blockIU13block_pointerFvNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEEE_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_177;
  aBlock[4] = a1;
  void aBlock[5] = v5;
  uint64_t v33 = v7;
  atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  xpc_object_t v12 = *a2;
  if (*a2) {
    xpc_object_t v12 = (void (**)(void *, std::string *))_Block_copy(v12);
  }
  uint64_t v34 = v12;
  long long v13 = _Block_copy(aBlock);
  long long v14 = *(NSObject **)(a1 + 136);
  if (v14) {
    dispatch_retain(v14);
  }
  size_t v35 = v13;
  dispatch_object_t v36 = v14;
  unint64_t v30 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v31 = (std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL;
  size_t v15 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  uint64_t v16 = off_1EBBDD2A0;
  if (!off_1EBBDD2A0)
  {
    CommandDriverFactory::create_default_global((uint64_t *)&v37, v15);
    long long v17 = *(_OWORD *)&v37.__r_.__value_.__l.__data_;
    *(_OWORD *)&v37.__r_.__value_.__l.__data_ = 0uLL;
    uint64_t v18 = (std::__shared_weak_count *)*(&off_1EBBDD2A0 + 1);
    off_1EBBDD2A0 = v17;
    if (v18 && !atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
    std::string::size_type size = (std::__shared_weak_count *)v37.__r_.__value_.__l.__size_;
    if (v37.__r_.__value_.__l.__size_
      && !atomic_fetch_add((atomic_ullong *volatile)(v37.__r_.__value_.__l.__size_ + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
    uint64_t v16 = off_1EBBDD2A0;
  }
  xpc_object_t v20 = (std::__shared_weak_count *)*(&off_1EBBDD2A0 + 1);
  uint64_t v26 = v16;
  uint64_t v27 = *(&off_1EBBDD2A0 + 1);
  if (*(&off_1EBBDD2A0 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDD2A0 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(unint64_t *__return_ptr, uint64_t))(*(void *)v16 + 16))(&v28, v16);
  unint64_t v30 = 0;
  uint64_t v31 = 0;
  if (v29)
  {
    uint64_t v31 = std::__shared_weak_count::lock(v29);
    if (v31) {
      unint64_t v30 = v28;
    }
    if (v29) {
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  if (v20 && !atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
    unint64_t v21 = v30;
    if (v30) {
      goto LABEL_34;
    }
  }
  else
  {
    unint64_t v21 = v30;
    if (v30)
    {
LABEL_34:
      xpc_object_t v22 = v35;
      if (v35) {
        xpc_object_t v22 = _Block_copy(v35);
      }
      xpc_object_t v24 = v22;
      dispatch_object_t object = v36;
      if (v36) {
        dispatch_retain(v36);
      }
      (*(void (**)(unint64_t, void **))(*(void *)v21 + 112))(v21, &v24);
      if (object) {
        dispatch_release(object);
      }
      if (v24) {
        _Block_release(v24);
      }
    }
  }
  xpc_object_t v23 = v31;
  if (v31 && !atomic_fetch_add(&v31->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
  }
  if (v36) {
    dispatch_release(v36);
  }
  if (v35) {
    _Block_release(v35);
  }
  if (v34) {
    _Block_release(v34);
  }
  if (v33) {
    std::__shared_weak_count::__release_weak(v33);
  }
LABEL_53:
  std::__shared_weak_count::__release_weak(v7);
}

void sub_1C5838B54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,std::__shared_weak_count *a23,void *aBlock)
{
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>::~callback(v25 - 80);
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (a23)
  {
    std::__shared_weak_count::__release_weak(a23);
    std::__shared_weak_count::__release_weak(v24);
    _Unwind_Resume(a1);
  }
  std::__shared_weak_count::__release_weak(v24);
  _Unwind_Resume(a1);
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_16(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *(void *)(a1 + 32);
  unsigned int v86 = 0;
  xpc_object_t v5 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v6 = v5;
  if (v5)
  {
    xpc_object_t xdict = v5;
  }
  else
  {
    xpc_object_t v6 = xpc_null_create();
    xpc_object_t xdict = v6;
    if (!v6)
    {
      xpc_object_t v7 = xpc_null_create();
      xpc_object_t v6 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1C8792D30](v6) == MEMORY[0x1E4F14590])
  {
    xpc_retain(v6);
    goto LABEL_9;
  }
  xpc_object_t v7 = xpc_null_create();
LABEL_8:
  xpc_object_t xdict = v7;
LABEL_9:
  xpc_release(v6);
  if ((*((char *)a2 + 23) & 0x80000000) == 0)
  {
    if (*((unsigned char *)a2 + 23)) {
      goto LABEL_11;
    }
LABEL_32:
    unsigned int v86 = -534716416;
    xpc_object_t v21 = xpc_string_create("Unknown error");
    if (!v21) {
      xpc_object_t v21 = xpc_null_create();
    }
    xpc_dictionary_set_value(xdict, (const char *)*MEMORY[0x1E4F4C240], v21);
    xpc_object_t v22 = xpc_null_create();
    xpc_release(v21);
    xpc_release(v22);
    goto LABEL_143;
  }
  if (!a2[1]) {
    goto LABEL_32;
  }
LABEL_11:
  uint64_t v8 = (char *)operator new(0x28uLL);
  strcpy(v8, "AppleBasebandServices_Manager-1211");
  xpc_object_t v9 = xpc_string_create(v8);
  if (!v9) {
    xpc_object_t v9 = xpc_null_create();
  }
  xpc_dictionary_set_value(xdict, (const char *)*MEMORY[0x1E4F4CC58], v9);
  xpc_object_t v10 = xpc_null_create();
  xpc_release(v9);
  xpc_release(v10);
  operator delete(v8);
  if (*((char *)a2 + 23) < 0) {
    a2 = (uint64_t *)*a2;
  }
  xpc_object_t v11 = xpc_string_create((const char *)a2);
  if (!v11) {
    xpc_object_t v11 = xpc_null_create();
  }
  xpc_dictionary_set_value(xdict, (const char *)*MEMORY[0x1E4F4C488], v11);
  xpc_object_t v12 = xpc_null_create();
  xpc_release(v11);
  xpc_release(v12);
  CFTypeRef cf = 0;
  pthread_mutex_lock(&ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance);
  long long v13 = (os_unfair_lock_s *)off_1EBBDD340;
  if (!off_1EBBDD340)
  {
    SharedData::create_default_global(&__dst);
    long long v14 = __dst;
    long long __dst = 0uLL;
    size_t v15 = (std::__shared_weak_count *)*(&off_1EBBDD340 + 1);
    off_1EBBDD340 = v14;
    if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
    uint64_t v16 = (std::__shared_weak_count *)*((void *)&__dst + 1);
    if (*((void *)&__dst + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&__dst + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
    long long v13 = (os_unfair_lock_s *)off_1EBBDD340;
  }
  std::string __p = v13;
  size_t v78 = (std::__shared_weak_count *)*(&off_1EBBDD340 + 1);
  if (*(&off_1EBBDD340 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDD340 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance);
  long long v17 = (const void *)*MEMORY[0x1E4F4C5D0];
  size_t v18 = strlen((const char *)*MEMORY[0x1E4F4C5D0]);
  if (v18 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v19 = v18;
  if (v18 >= 0x17)
  {
    uint64_t v23 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v18 | 7) != 0x17) {
      uint64_t v23 = v18 | 7;
    }
    uint64_t v24 = v23 + 1;
    p_dst = (long long *)operator new(v23 + 1);
    *((void *)&__dst + 1) = v19;
    int64_t v83 = v24 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
    goto LABEL_38;
  }
  HIBYTE(v83) = v18;
  p_dst = &__dst;
  if (v18) {
LABEL_38:
  }
    memmove(p_dst, v17, v19);
  *((unsigned char *)p_dst + v19) = 0;
  os_unfair_lock_lock(v13 + 10);
  Preferences::getPreference<__CFDictionary const*>(v13, (const char *)&__dst, &cf);
  os_unfair_lock_unlock(v13 + 10);
  if (SHIBYTE(v83) < 0)
  {
    operator delete((void *)__dst);
    uint64_t v25 = v78;
    if (!v78) {
      goto LABEL_44;
    }
  }
  else
  {
    uint64_t v25 = v78;
    if (!v78)
    {
LABEL_44:
      CFTypeRef v26 = cf;
      if (!cf) {
        goto LABEL_53;
      }
      goto LABEL_45;
    }
  }
  if (atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_44;
  }
  ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
  std::__shared_weak_count::__release_weak(v25);
  CFTypeRef v26 = cf;
  if (!cf)
  {
LABEL_53:
    uint64_t v33 = *(NSObject **)(v4 + 88);
    if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
    {
      LOWORD(__dst) = 0;
      _os_log_error_impl(&dword_1C5767000, v33, OS_LOG_TYPE_ERROR, "Failed to get ABM Shared Data", (uint8_t *)&__dst, 2u);
    }
    goto LABEL_143;
  }
LABEL_45:
  CFTypeID v27 = CFGetTypeID(v26);
  if (v27 != CFDictionaryGetTypeID()) {
    goto LABEL_53;
  }
  CFDictionaryRef v28 = (const __CFDictionary *)cf;
  CFTypeRef v81 = cf;
  if (cf) {
    CFRetain(cf);
  }
  v80[0] = 0xAAAAAAAAAAAAAAAALL;
  v80[1] = 0xAAAAAAAAAAAAAAAALL;
  ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v80, v28);
  xpc_object_t v29 = (const void *)*MEMORY[0x1E4F4D2F8];
  size_t v30 = strlen((const char *)*MEMORY[0x1E4F4D2F8]);
  if (v30 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v31 = v30;
  if (v30 >= 0x17)
  {
    uint64_t v34 = (v30 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v30 | 7) != 0x17) {
      uint64_t v34 = v30 | 7;
    }
    uint64_t v35 = v34 + 1;
    p_p = operator new(v34 + 1);
    size_t v78 = (std::__shared_weak_count *)v31;
    unint64_t v79 = v35 | 0x8000000000000000;
    std::string __p = p_p;
    goto LABEL_58;
  }
  HIBYTE(v79) = v30;
  p_p = &__p;
  if (v30) {
LABEL_58:
  }
    memmove(p_p, v29, v31);
  dispatch_object_t v36 = (const char *)*MEMORY[0x1E4F4C648];
  *((unsigned char *)p_p + v31) = 0;
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v87, v36);
  ctu::cf::map_adapter::getString();
  MEMORY[0x1C8791110](&v87);
  if (v83 >= 0) {
    std::string v37 = (const char *)&__dst;
  }
  else {
    std::string v37 = (const char *)__dst;
  }
  xpc_object_t v38 = xpc_string_create(v37);
  if (!v38) {
    xpc_object_t v38 = xpc_null_create();
  }
  xpc_dictionary_set_value(xdict, v36, v38);
  xpc_object_t v39 = xpc_null_create();
  xpc_release(v38);
  xpc_release(v39);
  if (SHIBYTE(v83) < 0)
  {
    operator delete((void *)__dst);
    if ((SHIBYTE(v79) & 0x80000000) == 0)
    {
LABEL_66:
      size_t v40 = strlen((const char *)v29);
      if (v40 <= 0x7FFFFFFFFFFFFFF7) {
        goto LABEL_67;
      }
LABEL_130:
      std::string::__throw_length_error[abi:ne180100]();
    }
  }
  else if ((SHIBYTE(v79) & 0x80000000) == 0)
  {
    goto LABEL_66;
  }
  operator delete(__p);
  size_t v40 = strlen((const char *)v29);
  if (v40 > 0x7FFFFFFFFFFFFFF7) {
    goto LABEL_130;
  }
LABEL_67:
  size_t v41 = v40;
  if (v40 >= 0x17)
  {
    uint64_t v43 = (v40 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v40 | 7) != 0x17) {
      uint64_t v43 = v40 | 7;
    }
    uint64_t v44 = v43 + 1;
    uint64_t v42 = operator new(v43 + 1);
    size_t v78 = (std::__shared_weak_count *)v41;
    unint64_t v79 = v44 | 0x8000000000000000;
    std::string __p = v42;
    goto LABEL_73;
  }
  HIBYTE(v79) = v40;
  uint64_t v42 = &__p;
  if (v40) {
LABEL_73:
  }
    memmove(v42, v29, v41);
  unint64_t v45 = (const char *)*MEMORY[0x1E4F4C518];
  *((unsigned char *)v42 + v41) = 0;
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v87, v45);
  ctu::cf::map_adapter::getString();
  MEMORY[0x1C8791110](&v87);
  if (v83 >= 0) {
    uint64_t v46 = (const char *)&__dst;
  }
  else {
    uint64_t v46 = (const char *)__dst;
  }
  xpc_object_t v47 = xpc_string_create(v46);
  if (!v47) {
    xpc_object_t v47 = xpc_null_create();
  }
  xpc_dictionary_set_value(xdict, v45, v47);
  xpc_object_t v48 = xpc_null_create();
  xpc_release(v47);
  xpc_release(v48);
  if (SHIBYTE(v83) < 0)
  {
    operator delete((void *)__dst);
    if ((SHIBYTE(v79) & 0x80000000) == 0)
    {
LABEL_81:
      size_t v49 = strlen((const char *)v29);
      if (v49 <= 0x7FFFFFFFFFFFFFF7) {
        goto LABEL_82;
      }
LABEL_133:
      std::string::__throw_length_error[abi:ne180100]();
    }
  }
  else if ((SHIBYTE(v79) & 0x80000000) == 0)
  {
    goto LABEL_81;
  }
  operator delete(__p);
  size_t v49 = strlen((const char *)v29);
  if (v49 > 0x7FFFFFFFFFFFFFF7) {
    goto LABEL_133;
  }
LABEL_82:
  size_t v50 = v49;
  if (v49 >= 0x17)
  {
    uint64_t v52 = (v49 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v49 | 7) != 0x17) {
      uint64_t v52 = v49 | 7;
    }
    uint64_t v53 = v52 + 1;
    uint64_t v51 = operator new(v52 + 1);
    size_t v78 = (std::__shared_weak_count *)v50;
    unint64_t v79 = v53 | 0x8000000000000000;
    std::string __p = v51;
    goto LABEL_88;
  }
  HIBYTE(v79) = v49;
  uint64_t v51 = &__p;
  if (v49) {
LABEL_88:
  }
    memmove(v51, v29, v50);
  int v54 = (const char *)*MEMORY[0x1E4F4C778];
  *((unsigned char *)v51 + v50) = 0;
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v87, v54);
  ctu::cf::map_adapter::getString();
  MEMORY[0x1C8791110](&v87);
  if (v83 >= 0) {
    xpc_object_t v55 = (const char *)&__dst;
  }
  else {
    xpc_object_t v55 = (const char *)__dst;
  }
  xpc_object_t v56 = xpc_string_create(v55);
  if (!v56) {
    xpc_object_t v56 = xpc_null_create();
  }
  xpc_dictionary_set_value(xdict, v54, v56);
  xpc_object_t v57 = xpc_null_create();
  xpc_release(v56);
  xpc_release(v57);
  if (SHIBYTE(v83) < 0)
  {
    operator delete((void *)__dst);
    if ((SHIBYTE(v79) & 0x80000000) == 0)
    {
LABEL_96:
      size_t v58 = strlen((const char *)v29);
      if (v58 <= 0x7FFFFFFFFFFFFFF7) {
        goto LABEL_97;
      }
LABEL_136:
      std::string::__throw_length_error[abi:ne180100]();
    }
  }
  else if ((SHIBYTE(v79) & 0x80000000) == 0)
  {
    goto LABEL_96;
  }
  operator delete(__p);
  size_t v58 = strlen((const char *)v29);
  if (v58 > 0x7FFFFFFFFFFFFFF7) {
    goto LABEL_136;
  }
LABEL_97:
  size_t v59 = v58;
  if (v58 >= 0x17)
  {
    uint64_t v61 = (v58 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v58 | 7) != 0x17) {
      uint64_t v61 = v58 | 7;
    }
    uint64_t v62 = v61 + 1;
    uint64_t v60 = operator new(v61 + 1);
    size_t v78 = (std::__shared_weak_count *)v59;
    unint64_t v79 = v62 | 0x8000000000000000;
    std::string __p = v60;
    goto LABEL_103;
  }
  HIBYTE(v79) = v58;
  uint64_t v60 = &__p;
  if (v58) {
LABEL_103:
  }
    memmove(v60, v29, v59);
  size_t v63 = (const char *)*MEMORY[0x1E4F4C2A0];
  *((unsigned char *)v60 + v59) = 0;
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v87, v63);
  ctu::cf::map_adapter::getString();
  MEMORY[0x1C8791110](&v87);
  if (v83 >= 0) {
    size_t v64 = (const char *)&__dst;
  }
  else {
    size_t v64 = (const char *)__dst;
  }
  xpc_object_t v65 = xpc_string_create(v64);
  if (!v65) {
    xpc_object_t v65 = xpc_null_create();
  }
  xpc_dictionary_set_value(xdict, v63, v65);
  xpc_object_t v66 = xpc_null_create();
  xpc_release(v65);
  xpc_release(v66);
  if (SHIBYTE(v83) < 0)
  {
    operator delete((void *)__dst);
    if ((SHIBYTE(v79) & 0x80000000) == 0)
    {
LABEL_111:
      size_t v67 = strlen((const char *)v29);
      if (v67 <= 0x7FFFFFFFFFFFFFF7) {
        goto LABEL_112;
      }
LABEL_139:
      std::string::__throw_length_error[abi:ne180100]();
    }
  }
  else if ((SHIBYTE(v79) & 0x80000000) == 0)
  {
    goto LABEL_111;
  }
  operator delete(__p);
  size_t v67 = strlen((const char *)v29);
  if (v67 > 0x7FFFFFFFFFFFFFF7) {
    goto LABEL_139;
  }
LABEL_112:
  size_t v68 = v67;
  if (v67 >= 0x17)
  {
    uint64_t v70 = (v67 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v67 | 7) != 0x17) {
      uint64_t v70 = v67 | 7;
    }
    uint64_t v71 = v70 + 1;
    size_t v69 = operator new(v70 + 1);
    size_t v78 = (std::__shared_weak_count *)v68;
    unint64_t v79 = v71 | 0x8000000000000000;
    std::string __p = v69;
  }
  else
  {
    HIBYTE(v79) = v67;
    size_t v69 = &__p;
    if (!v67) {
      goto LABEL_119;
    }
  }
  memmove(v69, v29, v68);
LABEL_119:
  size_t v72 = (const char *)*MEMORY[0x1E4F4C780];
  *((unsigned char *)v69 + v68) = 0;
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v87, v72);
  ctu::cf::map_adapter::getString();
  MEMORY[0x1C8791110](&v87);
  if (v83 >= 0) {
    uint64_t v73 = (const char *)&__dst;
  }
  else {
    uint64_t v73 = (const char *)__dst;
  }
  xpc_object_t v74 = xpc_string_create(v73);
  if (!v74) {
    xpc_object_t v74 = xpc_null_create();
  }
  xpc_dictionary_set_value(xdict, v72, v74);
  xpc_object_t v75 = xpc_null_create();
  xpc_release(v74);
  xpc_release(v75);
  if (SHIBYTE(v83) < 0)
  {
    operator delete((void *)__dst);
    if ((SHIBYTE(v79) & 0x80000000) == 0)
    {
LABEL_126:
      MEMORY[0x1C8791160](v80);
      CFTypeRef v76 = v81;
      if (!v81) {
        goto LABEL_143;
      }
      goto LABEL_142;
    }
  }
  else if ((SHIBYTE(v79) & 0x80000000) == 0)
  {
    goto LABEL_126;
  }
  operator delete(__p);
  MEMORY[0x1C8791160](v80);
  CFTypeRef v76 = v81;
  if (v81) {
LABEL_142:
  }
    CFRelease(v76);
LABEL_143:
  dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int &,xpc::dict&>((uint64_t *)(a1 + 40), &v86, &xdict);
  xpc_release(xdict);
}

void sub_1C583972C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, const void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,xpc_object_t object)
{
  MEMORY[0x1C8791110](v23 - 72);
  if (a14 < 0) {
    operator delete(__p);
  }
  MEMORY[0x1C8791160](&a15);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&a17);
  xpc_release(object);
  _Unwind_Resume(a1);
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_25(void *a1, uint64_t a2, void **a3)
{
  uint64_t v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    uint64_t v6 = a1[4];
    xpc_object_t v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      uint64_t v8 = v7;
      if (a1[5])
      {
        v10[0] = MEMORY[0x1E4F143A8];
        v10[1] = 1174405120;
        _DWORD v10[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_2_26;
        v10[3] = &__block_descriptor_tmp_32_1;
        void v10[4] = v6;
        xpc_object_t v9 = *a3;
        if (*a3) {
          xpc_object_t v9 = _Block_copy(v9);
        }
        aBlocunint64_t k = v9;
        ctu::SharedSynchronizable<RadioModule>::execute_wrapped((uint64_t *)(v6 + 120), (uint64_t)v10);
        if (aBlock) {
          _Block_release(aBlock);
        }
      }
      if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_2_26(uint64_t a1)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void **)(a1 + 32);
  if ((*(unsigned int (**)(void *))(*v2 + 88))(v2))
  {
    memset(__p, 170, 24);
    uint64_t v3 = (const void *)*MEMORY[0x1E4F4D058];
    size_t v4 = strlen((const char *)*MEMORY[0x1E4F4D058]);
    if (v4 >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    std::string::size_type v5 = v4;
    if (v4 >= 0x17)
    {
      uint64_t v9 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v4 | 7) != 0x17) {
        uint64_t v9 = v4 | 7;
      }
      uint64_t v10 = v9 + 1;
      p_dst = (std::string *)operator new(v9 + 1);
      __dst.__r_.__value_.__l.__size_ = v5;
      __dst.__r_.__value_.__r.__words[2] = v10 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v4;
      p_dst = &__dst;
      if (!v4)
      {
LABEL_16:
        p_dst->__r_.__value_.__s.__data_[v5] = 0;
        xpc_object_t v11 = (char *)operator new(0x28uLL);
        strcpy(v11, " rejected; ABM is shutting down ");
        xpc_object_t v12 = std::string::append(&__dst, v11, 0x20uLL);
        long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
        __p[2] = (void *)v12->__r_.__value_.__r.__words[2];
        *(_OWORD *)std::string __p = v13;
        v12->__r_.__value_.__l.__size_ = 0;
        v12->__r_.__value_.__r.__words[2] = 0;
        v12->__r_.__value_.__r.__words[0] = 0;
        operator delete(v11);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__dst.__r_.__value_.__l.__data_);
          long long v14 = v2[11];
          if (!os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
          {
LABEL_18:
            uint64_t v16 = *(void *)(a1 + 40);
            size_t v15 = (uint64_t *)(a1 + 40);
            if (!v16)
            {
LABEL_40:
              if (SHIBYTE(__p[2]) < 0) {
                operator delete(__p[0]);
              }
              return;
            }
LABEL_24:
            __dst.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
            size_t v19 = (void *)HIBYTE(__p[2]);
            if (SHIBYTE(__p[2]) < 0) {
              size_t v19 = __p[1];
            }
            if (v19)
            {
              xpc_object_t v20 = xpc_dictionary_create(0, 0, 0);
              if (v20 || (xpc_object_t v20 = xpc_null_create()) != 0)
              {
                if (MEMORY[0x1C8792D30](v20) == MEMORY[0x1E4F14590])
                {
                  xpc_retain(v20);
                  xpc_object_t v21 = v20;
                }
                else
                {
                  xpc_object_t v21 = xpc_null_create();
                }
              }
              else
              {
                xpc_object_t v21 = xpc_null_create();
                xpc_object_t v20 = 0;
              }
              xpc_release(v20);
              xpc_object_t v22 = xpc_null_create();
              uint64_t v23 = (void *)__dst.__r_.__value_.__r.__words[0];
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v21;
              xpc_release(v23);
              xpc_release(v22);
              if (SHIBYTE(__p[2]) >= 0) {
                uint64_t v24 = __p;
              }
              else {
                uint64_t v24 = (void **)__p[0];
              }
              xpc_object_t v25 = xpc_string_create((const char *)v24);
              if (!v25) {
                xpc_object_t v25 = xpc_null_create();
              }
              xpc_dictionary_set_value(v21, (const char *)*MEMORY[0x1E4F4C240], v25);
              xpc_object_t v26 = xpc_null_create();
              xpc_release(v25);
              xpc_release(v26);
            }
            unsigned int v30 = -534716415;
            dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(v15, &v30, (void **)&__dst.__r_.__value_.__l.__data_);
            xpc_release(__dst.__r_.__value_.__l.__data_);
            goto LABEL_40;
          }
        }
        else
        {
          long long v14 = v2[11];
          if (!os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_18;
          }
        }
        long long v17 = __p;
        if (SHIBYTE(__p[2]) < 0) {
          long long v17 = (void **)__p[0];
        }
        LODWORD(__dst.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = (std::string::size_type)v17;
        _os_log_impl(&dword_1C5767000, v14, OS_LOG_TYPE_DEFAULT, "#I %s", (uint8_t *)&__dst, 0xCu);
        uint64_t v18 = *(void *)(a1 + 40);
        size_t v15 = (uint64_t *)(a1 + 40);
        if (!v18) {
          goto LABEL_40;
        }
        goto LABEL_24;
      }
    }
    memmove(p_dst, v3, v5);
    goto LABEL_16;
  }
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_27;
  aBlock[3] = &__block_descriptor_tmp_29_1;
  xpc_object_t v7 = *(void **)(a1 + 40);
  if (v7) {
    xpc_object_t v7 = _Block_copy(v7);
  }
  CFDictionaryRef v28 = v7;
  uint64_t v8 = _Block_copy(aBlock);
  xpc_object_t v29 = v8;
  RadioModule::getOperatingMode_sync((uint64_t)v2, &v29);
  if (v8) {
    _Block_release(v8);
  }
  if (v28) {
    _Block_release(v28);
  }
}

void sub_1C5839D9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *aBlock, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void RadioModule::getOperatingMode_sync(uint64_t a1, void **a2)
{
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 128);
  if (!v3 || (uint64_t v5 = *(void *)(a1 + 120), (v6 = std::__shared_weak_count::lock(v3)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  xpc_object_t v7 = v6;
  p_shared_weak_owners = &v6->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v7);
  }
  uint64_t v33 = (void *)0xAAAAAAAAAAAAAAAALL;
  dispatch_object_t v34 = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN11RadioModule21getOperatingMode_syncEN8dispatch5blockIU13block_pointerFviEEE_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_178;
  void aBlock[4] = a1;
  void aBlock[5] = v5;
  size_t v31 = v7;
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  uint64_t v9 = *a2;
  if (*a2) {
    uint64_t v9 = _Block_copy(v9);
  }
  xpc_object_t v32 = v9;
  uint64_t v10 = _Block_copy(aBlock);
  xpc_object_t v11 = *(NSObject **)(a1 + 136);
  if (v11) {
    dispatch_retain(*(dispatch_object_t *)(a1 + 136));
  }
  uint64_t v33 = v10;
  dispatch_object_t v34 = v11;
  unint64_t v28 = 0xAAAAAAAAAAAAAAAALL;
  xpc_object_t v29 = (std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL;
  xpc_object_t v12 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  uint64_t v13 = off_1EBBDD2A0;
  if (!off_1EBBDD2A0)
  {
    CommandDriverFactory::create_default_global((uint64_t *)buf, v12);
    long long v14 = *(_OWORD *)buf;
    memset(buf, 0, sizeof(buf));
    size_t v15 = (std::__shared_weak_count *)*(&off_1EBBDD2A0 + 1);
    off_1EBBDD2A0 = v14;
    if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
    uint64_t v16 = *(std::__shared_weak_count **)&buf[8];
    if (*(void *)&buf[8]
      && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
    uint64_t v13 = off_1EBBDD2A0;
  }
  long long v17 = (std::__shared_weak_count *)*(&off_1EBBDD2A0 + 1);
  uint64_t v24 = v13;
  uint64_t v25 = *(&off_1EBBDD2A0 + 1);
  if (*(&off_1EBBDD2A0 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDD2A0 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(unint64_t *__return_ptr, uint64_t))(*(void *)v13 + 16))(&v26, v13);
  unint64_t v28 = 0;
  xpc_object_t v29 = 0;
  if (v27)
  {
    xpc_object_t v29 = std::__shared_weak_count::lock(v27);
    if (v29) {
      unint64_t v28 = v26;
    }
    if (v27) {
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  if (v17 && !atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
    unint64_t v18 = v28;
    if (!v28) {
      goto LABEL_37;
    }
  }
  else
  {
    unint64_t v18 = v28;
    if (!v28) {
      goto LABEL_37;
    }
  }
  size_t v19 = *(NSObject **)(a1 + 88);
  if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_1C5767000, v19, OS_LOG_TYPE_DEFAULT, "#I Request to get operating mode", buf, 2u);
  }
  xpc_object_t v20 = v33;
  if (v33) {
    xpc_object_t v20 = _Block_copy(v33);
  }
  xpc_object_t v22 = v20;
  dispatch_object_t object = v34;
  if (v34) {
    dispatch_retain(v34);
  }
  (*(void (**)(unint64_t, void **))(*(void *)v18 + 160))(v18, &v22);
  if (object) {
    dispatch_release(object);
  }
  if (v22) {
    _Block_release(v22);
  }
LABEL_37:
  xpc_object_t v21 = v29;
  if (v29 && !atomic_fetch_add(&v29->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v21);
  }
  if (v34) {
    dispatch_release(v34);
  }
  if (v33) {
    _Block_release(v33);
  }
  if (v32) {
    _Block_release(v32);
  }
  if (v31) {
    std::__shared_weak_count::__release_weak(v31);
  }
  std::__shared_weak_count::__release_weak(v7);
}

void sub_1C583A268(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,std::__shared_weak_count *a23,void *aBlock)
{
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>::~callback(v25 - 80);
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (a23) {
    std::__shared_weak_count::__release_weak(a23);
  }
  std::__shared_weak_count::__release_weak(v24);
  _Unwind_Resume(a1);
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_27(uint64_t a1, int a2)
{
  xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v5 = v4;
  if (v4)
  {
    xpc_object_t xdict = v4;
  }
  else
  {
    xpc_object_t v5 = xpc_null_create();
    xpc_object_t xdict = v5;
    if (!v5)
    {
      xpc_object_t v6 = xpc_null_create();
      xpc_object_t v5 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1C8792D30](v5) == MEMORY[0x1E4F14590])
  {
    xpc_retain(v5);
    goto LABEL_9;
  }
  xpc_object_t v6 = xpc_null_create();
LABEL_8:
  xpc_object_t xdict = v6;
LABEL_9:
  xpc_release(v5);
  xpc_object_t v7 = xpc_int64_create(a2);
  if (!v7) {
    xpc_object_t v7 = xpc_null_create();
  }
  xpc_dictionary_set_value(xdict, (const char *)*MEMORY[0x1E4F4CB50], v7);
  xpc_object_t v8 = xpc_null_create();
  xpc_release(v7);
  xpc_release(v8);
  unsigned int v9 = (a2 >> 31) & 0xE020E002;
  dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>((uint64_t *)(a1 + 32), &v9, &xdict);
  xpc_release(xdict);
}

void sub_1C583A41C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_36(void *a1, xpc_object_t *a2, void (***a3)(void *, uint64_t, xpc_object_t *))
{
  xpc_object_t v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    uint64_t v7 = a1[4];
    xpc_object_t v8 = std::__shared_weak_count::lock(v4);
    unint64_t v26 = v8;
    if (v8)
    {
      unsigned int v9 = v8;
      if (a1[5])
      {
        xpc_object_t value = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E4F4C0F8]);
        xpc_object_t v27 = value;
        if (value) {
          xpc_retain(value);
        }
        else {
          xpc_object_t v27 = xpc_null_create();
        }
        int v11 = xpc::dyn_cast_or_default((xpc *)&v27, (const object *)0x2710);
        xpc_release(v27);
        xpc_object_t v12 = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E4F4CB50]);
        xpc_object_t v27 = v12;
        if (v12) {
          xpc_retain(v12);
        }
        else {
          xpc_object_t v27 = xpc_null_create();
        }
        int v13 = xpc::dyn_cast_or_default((xpc *)&v27, (const object *)0xFFFFFFFFLL);
        xpc_release(v27);
        xpc_object_t v14 = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E4F4CF60]);
        xpc_object_t v27 = v14;
        if (v14) {
          xpc_retain(v14);
        }
        else {
          xpc_object_t v27 = xpc_null_create();
        }
        char v15 = xpc::dyn_cast_or_default((xpc *)&v27, 0);
        xpc_release(v27);
        if (v13 < 0)
        {
          xpc_object_t v17 = xpc_null_create();
          unint64_t v18 = *a3;
          xpc_object_t v27 = v17;
          xpc_object_t v19 = xpc_null_create();
          v18[2](v18, 3760250882, &v27);
          xpc_release(v27);
          xpc_release(v19);
        }
        else
        {
          v20[0] = MEMORY[0x1E4F143A8];
          v20[1] = 1174405120;
          v20[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_2_37;
          v20[3] = &__block_descriptor_tmp_45_0;
          v20[4] = v7;
          uint64_t v16 = *a3;
          if (*a3) {
            uint64_t v16 = (void (**)(void *, uint64_t, xpc_object_t *))_Block_copy(v16);
          }
          aBlocunint64_t k = v16;
          int v22 = v11;
          int v23 = v13;
          char v24 = v15;
          ctu::SharedSynchronizable<RadioModule>::execute_wrapped((uint64_t *)(v7 + 120), (uint64_t)v20);
          if (aBlock) {
            _Block_release(aBlock);
          }
        }
      }
      if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
}

void sub_1C583A6AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  xpc_release(*(xpc_object_t *)(v11 - 56));
  xpc_release(v10);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_2_37(uint64_t a1)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void **)(a1 + 32);
  if ((*(unsigned int (**)(void *))(*v2 + 88))(v2))
  {
    memset(__p, 170, 24);
    uint64_t v3 = (const void *)*MEMORY[0x1E4F4D068];
    size_t v4 = strlen((const char *)*MEMORY[0x1E4F4D068]);
    if (v4 >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    std::string::size_type v5 = v4;
    if (v4 >= 0x17)
    {
      uint64_t v12 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v4 | 7) != 0x17) {
        uint64_t v12 = v4 | 7;
      }
      uint64_t v13 = v12 + 1;
      p_dst = (std::string *)operator new(v12 + 1);
      __dst.__r_.__value_.__l.__size_ = v5;
      __dst.__r_.__value_.__r.__words[2] = v13 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v4;
      p_dst = &__dst;
      if (!v4)
      {
LABEL_16:
        p_dst->__r_.__value_.__s.__data_[v5] = 0;
        xpc_object_t v14 = (char *)operator new(0x28uLL);
        strcpy(v14, " rejected; ABM is shutting down ");
        char v15 = std::string::append(&__dst, v14, 0x20uLL);
        long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
        __p[2] = (void *)v15->__r_.__value_.__r.__words[2];
        *(_OWORD *)std::string __p = v16;
        v15->__r_.__value_.__l.__size_ = 0;
        v15->__r_.__value_.__r.__words[2] = 0;
        v15->__r_.__value_.__r.__words[0] = 0;
        operator delete(v14);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__dst.__r_.__value_.__l.__data_);
          xpc_object_t v17 = v2[11];
          if (!os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
          {
LABEL_18:
            uint64_t v19 = *(void *)(a1 + 40);
            unint64_t v18 = (uint64_t *)(a1 + 40);
            if (!v19)
            {
LABEL_40:
              if (SHIBYTE(__p[2]) < 0) {
                operator delete(__p[0]);
              }
              return;
            }
LABEL_24:
            __dst.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
            int v22 = (void *)HIBYTE(__p[2]);
            if (SHIBYTE(__p[2]) < 0) {
              int v22 = __p[1];
            }
            if (v22)
            {
              xpc_object_t v23 = xpc_dictionary_create(0, 0, 0);
              if (v23 || (xpc_object_t v23 = xpc_null_create()) != 0)
              {
                if (MEMORY[0x1C8792D30](v23) == MEMORY[0x1E4F14590])
                {
                  xpc_retain(v23);
                  xpc_object_t v24 = v23;
                }
                else
                {
                  xpc_object_t v24 = xpc_null_create();
                }
              }
              else
              {
                xpc_object_t v24 = xpc_null_create();
                xpc_object_t v23 = 0;
              }
              xpc_release(v23);
              xpc_object_t v25 = xpc_null_create();
              unint64_t v26 = (void *)__dst.__r_.__value_.__r.__words[0];
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v24;
              xpc_release(v26);
              xpc_release(v25);
              if (SHIBYTE(__p[2]) >= 0) {
                xpc_object_t v27 = __p;
              }
              else {
                xpc_object_t v27 = (void **)__p[0];
              }
              xpc_object_t v28 = xpc_string_create((const char *)v27);
              if (!v28) {
                xpc_object_t v28 = xpc_null_create();
              }
              xpc_dictionary_set_value(v24, (const char *)*MEMORY[0x1E4F4C240], v28);
              xpc_object_t v29 = xpc_null_create();
              xpc_release(v28);
              xpc_release(v29);
            }
            unsigned int v33 = -534716415;
            dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(v18, &v33, (void **)&__dst.__r_.__value_.__l.__data_);
            xpc_release(__dst.__r_.__value_.__l.__data_);
            goto LABEL_40;
          }
        }
        else
        {
          xpc_object_t v17 = v2[11];
          if (!os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_18;
          }
        }
        xpc_object_t v20 = __p;
        if (SHIBYTE(__p[2]) < 0) {
          xpc_object_t v20 = (void **)__p[0];
        }
        LODWORD(__dst.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = (std::string::size_type)v20;
        _os_log_impl(&dword_1C5767000, v17, OS_LOG_TYPE_DEFAULT, "#I %s", (uint8_t *)&__dst, 0xCu);
        uint64_t v21 = *(void *)(a1 + 40);
        unint64_t v18 = (uint64_t *)(a1 + 40);
        if (!v21) {
          goto LABEL_40;
        }
        goto LABEL_24;
      }
    }
    memmove(p_dst, v3, v5);
    goto LABEL_16;
  }
  unsigned int v7 = *(_DWORD *)(a1 + 48);
  int v8 = *(_DWORD *)(a1 + 52);
  int v9 = *(unsigned __int8 *)(a1 + 56);
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_38;
  aBlock[3] = &__block_descriptor_tmp_42_1;
  uint64_t v10 = *(void **)(a1 + 40);
  if (v10) {
    uint64_t v10 = _Block_copy(v10);
  }
  size_t v31 = v10;
  uint64_t v11 = _Block_copy(aBlock);
  xpc_object_t v32 = v11;
  RadioModule::setOperatingMode_sync(v2, v7, v8, v9 != 0, &v32);
  if (v11) {
    _Block_release(v11);
  }
  if (v31) {
    _Block_release(v31);
  }
}

void sub_1C583AB5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *aBlock, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void RadioModule::setOperatingMode_sync(void *a1, unsigned int a2, uint64_t a3, int a4, void **a5)
{
  xpc_object_t v6 = (std::__shared_weak_count *)a1[16];
  if (!v6 || (v11 = a1[15], (uint64_t v12 = std::__shared_weak_count::lock(v6)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v13 = v12;
  p_shared_weak_owners = &v12->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v12->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v13);
  }
  size_t v41 = (void *)0xAAAAAAAAAAAAAAAALL;
  dispatch_object_t v42 = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN11RadioModule21setOperatingMode_syncEjN5radio13OperatingModeEbN8dispatch5blockIU13block_pointerFvbEEE_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_197_0;
  void aBlock[4] = a1;
  void aBlock[5] = v11;
  xpc_object_t v39 = v13;
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  char v15 = *a5;
  if (*a5) {
    char v15 = _Block_copy(v15);
  }
  size_t v40 = v15;
  long long v16 = _Block_copy(aBlock);
  xpc_object_t v17 = a1[17];
  if (v17) {
    dispatch_retain(v17);
  }
  size_t v41 = v16;
  dispatch_object_t v42 = v17;
  unint64_t v36 = 0xAAAAAAAAAAAAAAAALL;
  std::string v37 = (std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL;
  unint64_t v18 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  uint64_t v19 = off_1EBBDD2A0;
  if (!off_1EBBDD2A0)
  {
    CommandDriverFactory::create_default_global((uint64_t *)&v43, v18);
    long long v20 = v43;
    long long v43 = 0uLL;
    uint64_t v21 = (std::__shared_weak_count *)*(&off_1EBBDD2A0 + 1);
    off_1EBBDD2A0 = v20;
    if (v21 && !atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
    int v22 = (std::__shared_weak_count *)*((void *)&v43 + 1);
    if (*((void *)&v43 + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v43 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
    uint64_t v19 = off_1EBBDD2A0;
  }
  xpc_object_t v23 = (std::__shared_weak_count *)*(&off_1EBBDD2A0 + 1);
  uint64_t v32 = v19;
  uint64_t v33 = *(&off_1EBBDD2A0 + 1);
  if (*(&off_1EBBDD2A0 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDD2A0 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(unint64_t *__return_ptr, uint64_t))(*(void *)v19 + 16))(&v34, v19);
  unint64_t v36 = 0;
  std::string v37 = 0;
  if (v35)
  {
    std::string v37 = std::__shared_weak_count::lock(v35);
    if (v37) {
      unint64_t v36 = v34;
    }
    if (v35) {
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  if (v23 && !atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
    unint64_t v24 = v36;
    if (!v36) {
      goto LABEL_45;
    }
  }
  else
  {
    unint64_t v24 = v36;
    if (!v36) {
      goto LABEL_45;
    }
  }
  uint64_t v25 = 1000000 * a2;
  unint64_t v26 = v41;
  if (a4)
  {
    if (v41) {
      unint64_t v26 = _Block_copy(v41);
    }
    unsigned int v30 = v26;
    dispatch_object_t object = v42;
    if (v42) {
      dispatch_retain(v42);
    }
    (*(void (**)(unint64_t, uint64_t, uint64_t, void **))(*(void *)v24 + 152))(v24, v25, a3, &v30);
    if (object) {
      dispatch_release(object);
    }
    if (v30) {
      _Block_release(v30);
    }
  }
  else
  {
    if (v41) {
      unint64_t v26 = _Block_copy(v41);
    }
    xpc_object_t v28 = v26;
    dispatch_object_t v29 = v42;
    if (v42) {
      dispatch_retain(v42);
    }
    (*(void (**)(unint64_t, uint64_t, uint64_t, void **))(*(void *)v24 + 144))(v24, v25, a3, &v28);
    if (v29) {
      dispatch_release(v29);
    }
    if (v28) {
      _Block_release(v28);
    }
  }
LABEL_45:
  xpc_object_t v27 = v37;
  if (v37 && !atomic_fetch_add(&v37->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
    std::__shared_weak_count::__release_weak(v27);
  }
  if (v42) {
    dispatch_release(v42);
  }
  if (v41) {
    _Block_release(v41);
  }
  if (v40) {
    _Block_release(v40);
  }
  if (v39) {
    std::__shared_weak_count::__release_weak(v39);
  }
  std::__shared_weak_count::__release_weak(v13);
}

void sub_1C583B09C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,std::__shared_weak_count *a25,void *aBlock)
{
  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>::~callback((uint64_t)&a9);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>::~callback(v27 - 112);
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (a25) {
    std::__shared_weak_count::__release_weak(a25);
  }
  std::__shared_weak_count::__release_weak(v26);
  _Unwind_Resume(a1);
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_38(uint64_t a1, int a2)
{
  if (a2) {
    uint64_t v3 = 0;
  }
  else {
    uint64_t v3 = 3760250880;
  }
  xpc_object_t v4 = xpc_null_create();
  uint64_t v5 = *(void *)(a1 + 32);
  xpc_object_t object = v4;
  xpc_object_t v6 = xpc_null_create();
  (*(void (**)(uint64_t, uint64_t, xpc_object_t *))(v5 + 16))(v5, v3, &object);
  xpc_release(object);
  xpc_release(v6);
}

void sub_1C583B1B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  xpc_release(object);
  xpc_release(v10);
  _Unwind_Resume(a1);
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_49(void *a1, uint64_t a2, const void **a3)
{
  xpc_object_t v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    uint64_t v6 = a1[4];
    unsigned int v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      int v8 = v7;
      uint64_t v9 = a1[5];
      if (!v9)
      {
LABEL_11:
        if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
        return;
      }
      v14[0] = MEMORY[0x1E4F143A8];
      v14[1] = 1174405120;
      v14[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_2_50;
      v14[3] = &__block_descriptor_tmp_57_1;
      void v14[4] = v6;
      if (*a3)
      {
        uint64_t v10 = _Block_copy(*a3);
        uint64_t v11 = a1[5];
        uint64_t v12 = (uint64_t *)(v6 + 120);
        aBlocunint64_t k = v10;
        uint64_t v16 = v11;
        uint64_t v13 = (std::__shared_weak_count *)a1[6];
        xpc_object_t v17 = v13;
        if (!v13)
        {
LABEL_7:
          ctu::SharedSynchronizable<RadioModule>::execute_wrapped(v12, (uint64_t)v14);
          if (v17) {
            std::__shared_weak_count::__release_weak(v17);
          }
          if (aBlock) {
            _Block_release(aBlock);
          }
          goto LABEL_11;
        }
      }
      else
      {
        uint64_t v12 = (uint64_t *)(v6 + 120);
        aBlocunint64_t k = 0;
        uint64_t v16 = v9;
        uint64_t v13 = (std::__shared_weak_count *)a1[6];
        xpc_object_t v17 = v13;
        if (!v13) {
          goto LABEL_7;
        }
      }
      atomic_fetch_add_explicit(&v13->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      goto LABEL_7;
    }
  }
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_2_50(void *a1)
{
  uint64_t v52 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (void *)a1[4];
  if ((*(unsigned int (**)(void *))(*v2 + 88))(v2))
  {
    memset(__p, 170, 24);
    uint64_t v3 = (const void *)*MEMORY[0x1E4F4D050];
    size_t v4 = strlen((const char *)*MEMORY[0x1E4F4D050]);
    if (v4 >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    std::string::size_type v5 = v4;
    if (v4 >= 0x17)
    {
      uint64_t v21 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v4 | 7) != 0x17) {
        uint64_t v21 = v4 | 7;
      }
      uint64_t v22 = v21 + 1;
      p_dst = (std::string *)operator new(v21 + 1);
      __dst.__r_.__value_.__l.__size_ = v5;
      __dst.__r_.__value_.__r.__words[2] = v22 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v4;
      p_dst = &__dst;
      if (!v4)
      {
LABEL_53:
        p_dst->__r_.__value_.__s.__data_[v5] = 0;
        xpc_object_t v23 = (char *)operator new(0x28uLL);
        strcpy(v23, " rejected; ABM is shutting down ");
        unint64_t v24 = std::string::append(&__dst, v23, 0x20uLL);
        long long v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
        __p[2] = (void *)v24->__r_.__value_.__r.__words[2];
        *(_OWORD *)std::string __p = v25;
        v24->__r_.__value_.__l.__size_ = 0;
        v24->__r_.__value_.__r.__words[2] = 0;
        v24->__r_.__value_.__r.__words[0] = 0;
        operator delete(v23);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__dst.__r_.__value_.__l.__data_);
          unint64_t v26 = v2[11];
          if (!os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
          {
LABEL_55:
            uint64_t v28 = a1[5];
            uint64_t v27 = a1 + 5;
            if (!v28)
            {
LABEL_79:
              if (SHIBYTE(__p[2]) < 0) {
                operator delete(__p[0]);
              }
              return;
            }
LABEL_61:
            __dst.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
            size_t v31 = (void *)HIBYTE(__p[2]);
            if (SHIBYTE(__p[2]) < 0) {
              size_t v31 = __p[1];
            }
            if (v31)
            {
              xpc_object_t v32 = xpc_dictionary_create(0, 0, 0);
              if (v32 || (xpc_object_t v32 = xpc_null_create()) != 0)
              {
                if (MEMORY[0x1C8792D30](v32) == MEMORY[0x1E4F14590])
                {
                  xpc_retain(v32);
                  xpc_object_t v33 = v32;
                }
                else
                {
                  xpc_object_t v33 = xpc_null_create();
                }
              }
              else
              {
                xpc_object_t v33 = xpc_null_create();
                xpc_object_t v32 = 0;
              }
              xpc_release(v32);
              xpc_object_t v34 = xpc_null_create();
              uint64_t v35 = (void *)__dst.__r_.__value_.__r.__words[0];
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v33;
              xpc_release(v35);
              xpc_release(v34);
              if (SHIBYTE(__p[2]) >= 0) {
                unint64_t v36 = __p;
              }
              else {
                unint64_t v36 = (void **)__p[0];
              }
              xpc_object_t v37 = xpc_string_create((const char *)v36);
              if (!v37) {
                xpc_object_t v37 = xpc_null_create();
              }
              xpc_dictionary_set_value(v33, (const char *)*MEMORY[0x1E4F4C240], v37);
              xpc_object_t v38 = xpc_null_create();
              xpc_release(v37);
              xpc_release(v38);
            }
            LODWORD(v45) = -534716415;
            dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(v27, (unsigned int *)&v45, (void **)&__dst.__r_.__value_.__l.__data_);
            xpc_release(__dst.__r_.__value_.__l.__data_);
            goto LABEL_79;
          }
        }
        else
        {
          unint64_t v26 = v2[11];
          if (!os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_55;
          }
        }
        dispatch_object_t v29 = __p;
        if (SHIBYTE(__p[2]) < 0) {
          dispatch_object_t v29 = (void **)__p[0];
        }
        LODWORD(__dst.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = (std::string::size_type)v29;
        _os_log_impl(&dword_1C5767000, v26, OS_LOG_TYPE_DEFAULT, "#I %s", (uint8_t *)&__dst, 0xCu);
        uint64_t v30 = a1[5];
        uint64_t v27 = a1 + 5;
        if (!v30) {
          goto LABEL_79;
        }
        goto LABEL_61;
      }
    }
    memmove(p_dst, v3, v5);
    goto LABEL_53;
  }
  __dst.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
  __dst.__r_.__value_.__l.__size_ = 0xAAAAAAAAAAAAAAAALL;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_51;
  aBlock[3] = &__block_descriptor_tmp_54_0;
  uint64_t v8 = a1[6];
  unsigned int v7 = (std::__shared_weak_count *)a1[7];
  void aBlock[4] = v2;
  void aBlock[5] = v8;
  xpc_object_t v48 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v9 = (void *)a1[5];
  if (v9) {
    uint64_t v9 = _Block_copy(v9);
  }
  size_t v49 = v9;
  uint64_t v10 = _Block_copy(aBlock);
  uint64_t v11 = v2[17];
  if (v11) {
    dispatch_retain(v11);
  }
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v10;
  __dst.__r_.__value_.__l.__size_ = (std::string::size_type)v11;
  unint64_t v45 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v46 = (std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL;
  uint64_t v12 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  uint64_t v13 = off_1EBBDD2A0;
  if (!off_1EBBDD2A0)
  {
    CommandDriverFactory::create_default_global((uint64_t *)__p, v12);
    long long v14 = *(_OWORD *)__p;
    __p[0] = 0;
    __p[1] = 0;
    char v15 = (std::__shared_weak_count *)*(&off_1EBBDD2A0 + 1);
    off_1EBBDD2A0 = v14;
    if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
    uint64_t v16 = (std::__shared_weak_count *)__p[1];
    if (__p[1] && !atomic_fetch_add((atomic_ullong *volatile)__p[1] + 1, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
    uint64_t v13 = off_1EBBDD2A0;
  }
  xpc_object_t v17 = (std::__shared_weak_count *)*(&off_1EBBDD2A0 + 1);
  uint64_t v41 = v13;
  uint64_t v42 = *(&off_1EBBDD2A0 + 1);
  if (*(&off_1EBBDD2A0 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDD2A0 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(unint64_t *__return_ptr, uint64_t))(*(void *)v13 + 16))(&v43, v13);
  unint64_t v45 = 0;
  uint64_t v46 = 0;
  if (v44)
  {
    uint64_t v46 = std::__shared_weak_count::lock(v44);
    if (v46) {
      unint64_t v45 = v43;
    }
    if (v44) {
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  if (v17 && !atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
    unint64_t v18 = v45;
    if (v45) {
      goto LABEL_30;
    }
  }
  else
  {
    unint64_t v18 = v45;
    if (v45)
    {
LABEL_30:
      uint64_t v19 = (void *)__dst.__r_.__value_.__r.__words[0];
      if (__dst.__r_.__value_.__r.__words[0]) {
        uint64_t v19 = _Block_copy(__dst.__r_.__value_.__l.__data_);
      }
      xpc_object_t v39 = v19;
      dispatch_object_t object = (dispatch_object_t)__dst.__r_.__value_.__l.__size_;
      if (__dst.__r_.__value_.__l.__size_) {
        dispatch_retain((dispatch_object_t)__dst.__r_.__value_.__l.__size_);
      }
      (*(void (**)(unint64_t, void **))(*(void *)v18 + 104))(v18, &v39);
      if (object) {
        dispatch_release(object);
      }
      if (v39) {
        _Block_release(v39);
      }
    }
  }
  long long v20 = v46;
  if (v46 && !atomic_fetch_add(&v46->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
  if (__dst.__r_.__value_.__l.__size_) {
    dispatch_release((dispatch_object_t)__dst.__r_.__value_.__l.__size_);
  }
  if (__dst.__r_.__value_.__r.__words[0]) {
    _Block_release(__dst.__r_.__value_.__l.__data_);
  }
  if (v49) {
    _Block_release(v49);
  }
  if (v48) {
    std::__shared_weak_count::__release_weak(v48);
  }
}

void sub_1C583B9B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,std::__shared_weak_count *a23,void *aBlock,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_51(void *a1, uint64_t *a2, ctu **a3)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  size_t v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    uint64_t v7 = a1[4];
    uint64_t v8 = std::__shared_weak_count::lock(v4);
    long long v25 = v8;
    if (v8)
    {
      uint64_t v9 = v8;
      if (!a1[5]) {
        goto LABEL_23;
      }
      xpc_object_t v11 = xpc_null_create();
      xpc_object_t object = v11;
      unsigned int v22 = -534716416;
      uint64_t v12 = *a2;
      if (v12) {
        uint64_t v13 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
      }
      else {
        uint64_t v13 = 0;
      }
      if (v13)
      {
        long long v14 = *(NSObject **)(v7 + 88);
        if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)long long buf = 138412290;
          *(void *)&uint8_t buf[4] = v12;
          char v15 = "%@";
          uint64_t v16 = v14;
          uint32_t v17 = 12;
LABEL_10:
          _os_log_error_impl(&dword_1C5767000, v16, OS_LOG_TYPE_ERROR, v15, buf, v17);
        }
      }
      else
      {
        if (*a3) {
          unint64_t v18 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
        }
        else {
          unint64_t v18 = 0;
        }
        if (v18)
        {
          ctu::cf_to_xpc((uint64_t *)buf, *a3, v10);
          xpc_object_t v19 = *(xpc_object_t *)buf;
          if (*(void *)buf && MEMORY[0x1C8792D30](*(void *)buf) == MEMORY[0x1E4F14590]) {
            xpc_retain(v19);
          }
          else {
            xpc_object_t v19 = xpc_null_create();
          }
          xpc_object_t v21 = xpc_null_create();
          xpc_object_t object = v19;
          xpc_release(v11);
          xpc_release(v21);
          xpc_release(*(xpc_object_t *)buf);
          unsigned int v22 = 0;
          goto LABEL_22;
        }
        long long v20 = *(NSObject **)(v7 + 88);
        if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)long long buf = 0;
          char v15 = "Empty response received with no error";
          uint64_t v16 = v20;
          uint32_t v17 = 2;
          goto LABEL_10;
        }
      }
LABEL_22:
      dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int &,xpc::dict&>(a1 + 7, &v22, &object);
      xpc_release(object);
LABEL_23:
      if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
}

void sub_1C583BD18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_61(void *a1, uint64_t a2, void **a3)
{
  size_t v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    uint64_t v6 = a1[4];
    uint64_t v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      uint64_t v8 = v7;
      if (a1[5])
      {
        v10[0] = MEMORY[0x1E4F143A8];
        v10[1] = 1174405120;
        _DWORD v10[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_2_62;
        v10[3] = &__block_descriptor_tmp_65_1;
        void v10[4] = v6;
        uint64_t v9 = *a3;
        if (*a3) {
          uint64_t v9 = _Block_copy(v9);
        }
        aBlocunint64_t k = v9;
        ctu::SharedSynchronizable<RadioModule>::execute_wrapped((uint64_t *)(v6 + 120), (uint64_t)v10);
        if (aBlock) {
          _Block_release(aBlock);
        }
      }
      if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_2_62(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  unsigned int v2 = 0;
  dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>((uint64_t *)(a1 + 40), &v2, (void **)(v1 + 248));
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_69(void *a1, void **a2, const void **a3)
{
  size_t v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    uint64_t v7 = a1[4];
    uint64_t v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      uint64_t v9 = v8;
      if (!a1[5])
      {
LABEL_12:
        if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
        return;
      }
      v14[0] = MEMORY[0x1E4F143A8];
      v14[1] = 1174405120;
      v14[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_2_70;
      v14[3] = &__block_descriptor_tmp_77_1;
      void v14[4] = v7;
      if (*a3)
      {
        uint64_t v10 = _Block_copy(*a3);
        xpc_object_t v11 = *a2;
        aBlocunint64_t k = v10;
        xpc_object_t object = v11;
        if (v11) {
          goto LABEL_6;
        }
      }
      else
      {
        xpc_object_t v11 = *a2;
        aBlocunint64_t k = 0;
        xpc_object_t object = v11;
        if (v11)
        {
LABEL_6:
          xpc_retain(v11);
          uint64_t v12 = (uint64_t *)(v7 + 120);
          uint64_t v13 = (std::__shared_weak_count *)a1[6];
          uint64_t v17 = a1[5];
          unint64_t v18 = v13;
          if (!v13)
          {
LABEL_8:
            ctu::SharedSynchronizable<RadioModule>::execute_wrapped(v12, (uint64_t)v14);
            if (v18) {
              std::__shared_weak_count::__release_weak(v18);
            }
            xpc_release(object);
            xpc_object_t object = 0;
            if (aBlock) {
              _Block_release(aBlock);
            }
            goto LABEL_12;
          }
LABEL_7:
          atomic_fetch_add_explicit(&v13->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          goto LABEL_8;
        }
      }
      xpc_object_t object = xpc_null_create();
      uint64_t v12 = (uint64_t *)(v7 + 120);
      uint64_t v13 = (std::__shared_weak_count *)a1[6];
      uint64_t v17 = a1[5];
      unint64_t v18 = v13;
      if (!v13) {
        goto LABEL_8;
      }
      goto LABEL_7;
    }
  }
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_2_70(void *a1)
{
  uint64_t v55 = *MEMORY[0x1E4F143B8];
  unsigned int v2 = (void *)a1[4];
  if ((*(unsigned int (**)(void *))(*v2 + 88))(v2))
  {
    memset(object, 170, 24);
    uint64_t v3 = (const void *)*MEMORY[0x1E4F4CDD8];
    size_t v4 = strlen((const char *)*MEMORY[0x1E4F4CDD8]);
    if (v4 >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    std::string::size_type v5 = v4;
    if (v4 >= 0x17)
    {
      uint64_t v10 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v4 | 7) != 0x17) {
        uint64_t v10 = v4 | 7;
      }
      uint64_t v11 = v10 + 1;
      p_dst = (std::string *)operator new(v10 + 1);
      __dst.__r_.__value_.__l.__size_ = v5;
      __dst.__r_.__value_.__r.__words[2] = v11 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v4;
      p_dst = &__dst;
      if (!v4)
      {
LABEL_12:
        p_dst->__r_.__value_.__s.__data_[v5] = 0;
        uint64_t v12 = (char *)operator new(0x28uLL);
        strcpy(v12, " rejected; ABM is shutting down ");
        uint64_t v13 = std::string::append(&__dst, v12, 0x20uLL);
        long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
        object[2] = (xpc_object_t)v13->__r_.__value_.__r.__words[2];
        *(_OWORD *)xpc_object_t object = v14;
        v13->__r_.__value_.__l.__size_ = 0;
        v13->__r_.__value_.__r.__words[2] = 0;
        v13->__r_.__value_.__r.__words[0] = 0;
        operator delete(v12);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__dst.__r_.__value_.__l.__data_);
          char v15 = v2[11];
          if (!os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
          {
LABEL_14:
            uint64_t v17 = a1[5];
            uint64_t v16 = a1 + 5;
            if (!v17)
            {
LABEL_83:
              if (SHIBYTE(object[2]) < 0) {
                operator delete(object[0]);
              }
              return;
            }
LABEL_41:
            __dst.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
            xpc_object_t v29 = (xpc_object_t)HIBYTE(object[2]);
            if (SHIBYTE(object[2]) < 0) {
              xpc_object_t v29 = object[1];
            }
            if (v29)
            {
              xpc_object_t v30 = xpc_dictionary_create(0, 0, 0);
              if (v30 || (xpc_object_t v30 = xpc_null_create()) != 0)
              {
                if (MEMORY[0x1C8792D30](v30) == MEMORY[0x1E4F14590])
                {
                  xpc_retain(v30);
                  xpc_object_t v31 = v30;
                }
                else
                {
                  xpc_object_t v31 = xpc_null_create();
                }
              }
              else
              {
                xpc_object_t v31 = xpc_null_create();
                xpc_object_t v30 = 0;
              }
              xpc_release(v30);
              xpc_object_t v40 = xpc_null_create();
              uint64_t v41 = (void *)__dst.__r_.__value_.__r.__words[0];
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v31;
              xpc_release(v41);
              xpc_release(v40);
              if (SHIBYTE(object[2]) >= 0) {
                uint64_t v42 = object;
              }
              else {
                uint64_t v42 = (xpc_object_t *)object[0];
              }
              xpc_object_t v43 = xpc_string_create((const char *)v42);
              if (!v43) {
                xpc_object_t v43 = xpc_null_create();
              }
              xpc_dictionary_set_value(v31, (const char *)*MEMORY[0x1E4F4C240], v43);
              xpc_object_t v44 = xpc_null_create();
              xpc_release(v43);
              xpc_release(v44);
            }
            LODWORD(v51) = -534716415;
            dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(v16, (unsigned int *)&v51, (void **)&__dst.__r_.__value_.__l.__data_);
            xpc_release(__dst.__r_.__value_.__l.__data_);
            goto LABEL_83;
          }
        }
        else
        {
          char v15 = v2[11];
          if (!os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_14;
          }
        }
        uint64_t v27 = object;
        if (SHIBYTE(object[2]) < 0) {
          uint64_t v27 = (xpc_object_t *)object[0];
        }
        LODWORD(__dst.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = (std::string::size_type)v27;
        _os_log_impl(&dword_1C5767000, v15, OS_LOG_TYPE_DEFAULT, "#I %s", (uint8_t *)&__dst, 0xCu);
        uint64_t v28 = a1[5];
        uint64_t v16 = a1 + 5;
        if (!v28) {
          goto LABEL_83;
        }
        goto LABEL_41;
      }
    }
    memmove(p_dst, v3, v5);
    goto LABEL_12;
  }
  if (MEMORY[0x1C8792D30](a1[6]) == MEMORY[0x1E4F14590])
  {
    __dst.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
    __dst.__r_.__value_.__l.__size_ = 0xAAAAAAAAAAAAAAAALL;
    unint64_t v18 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
    xpc_object_t v19 = (const void *)off_1EBBDD2A0;
    if (!off_1EBBDD2A0)
    {
      CommandDriverFactory::create_default_global((uint64_t *)object, v18);
      long long v20 = *(_OWORD *)object;
      object[0] = 0;
      object[1] = 0;
      xpc_object_t v21 = (std::__shared_weak_count *)*(&off_1EBBDD2A0 + 1);
      off_1EBBDD2A0 = v20;
      if (v21 && !atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
      unsigned int v22 = (std::__shared_weak_count *)object[1];
      if (object[1] && !atomic_fetch_add((atomic_ullong *volatile)object[1] + 1, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
      xpc_object_t v19 = (const void *)off_1EBBDD2A0;
    }
    xpc_object_t v23 = (std::__shared_weak_count *)*(&off_1EBBDD2A0 + 1);
    cf[1] = v19;
    cf[2] = *((CFTypeRef *)&off_1EBBDD2A0 + 1);
    if (*(&off_1EBBDD2A0 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDD2A0 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
    (*(void (**)(xpc_object_t *__return_ptr, const void *))(*(void *)v19 + 16))(&v51, v19);
    *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = 0uLL;
    if (v52)
    {
      __dst.__r_.__value_.__l.__size_ = (std::string::size_type)std::__shared_weak_count::lock(v52);
      if (__dst.__r_.__value_.__l.__size_) {
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v51;
      }
      if (v52) {
        std::__shared_weak_count::__release_weak(v52);
      }
    }
    if (v23 && !atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
    std::string::size_type v24 = __dst.__r_.__value_.__r.__words[0];
    if (__dst.__r_.__value_.__r.__words[0])
    {
      long long v25 = (void *)a1[6];
      xpc_object_t v51 = v25;
      if (v25) {
        xpc_retain(v25);
      }
      else {
        xpc_object_t v51 = xpc_null_create();
      }
      xpc::bridge((uint64_t *)object, (xpc *)&v51, v26);
      xpc_object_t v32 = object[0];
      if (object[0] && (CFTypeID v33 = CFGetTypeID(object[0]), v33 == CFDictionaryGetTypeID()))
      {
        cf[0] = v32;
        CFRetain(v32);
      }
      else
      {
        cf[0] = 0;
      }
      aBlock[0] = MEMORY[0x1E4F143A8];
      aBlock[1] = 1174405120;
      aBlock[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_71;
      aBlock[3] = &__block_descriptor_tmp_76_2;
      uint64_t v35 = a1[7];
      xpc_object_t v34 = (std::__shared_weak_count *)a1[8];
      void aBlock[4] = v2;
      void aBlock[5] = v35;
      uint64_t v46 = v34;
      if (v34) {
        atomic_fetch_add_explicit(&v34->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      unint64_t v36 = (void *)a1[5];
      if (v36) {
        unint64_t v36 = _Block_copy(v36);
      }
      xpc_object_t v47 = v36;
      xpc_object_t v37 = _Block_copy(aBlock);
      xpc_object_t v38 = v2[17];
      if (v38) {
        dispatch_retain(v38);
      }
      xpc_object_t v48 = v37;
      dispatch_object_t v49 = v38;
      (*(void (**)(std::string::size_type, CFTypeRef *, void **))(*(void *)v24 + 192))(v24, cf, &v48);
      if (v49) {
        dispatch_release(v49);
      }
      if (v48) {
        _Block_release(v48);
      }
      if (cf[0]) {
        CFRelease(cf[0]);
      }
      if (object[0]) {
        CFRelease(object[0]);
      }
      xpc_release(v51);
      if (v47) {
        _Block_release(v47);
      }
      if (v46) {
        std::__shared_weak_count::__release_weak(v46);
      }
    }
    std::string::size_type size = (std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_;
    if (__dst.__r_.__value_.__l.__size_
      && !atomic_fetch_add((atomic_ullong *volatile)(__dst.__r_.__value_.__l.__size_ + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  else
  {
    xpc_object_t v7 = xpc_null_create();
    uint64_t v8 = a1[5];
    object[0] = v7;
    xpc_object_t v9 = xpc_null_create();
    (*(void (**)(uint64_t, uint64_t, xpc_object_t *))(v8 + 16))(v8, 3760250882, object);
    xpc_release(object[0]);
    xpc_release(v9);
  }
}

void sub_1C583C768(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, void *aBlock, char a18, uint64_t a19, char a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,xpc_object_t object,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void sub_1C583C8C8(_Unwind_Exception *a1)
{
  operator delete(v1);
  if (*(char *)(v2 - 73) < 0)
  {
    operator delete(*(void **)(v2 - 96));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1C583C8B8);
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_71(void *a1, uint64_t *a2)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (std::__shared_weak_count *)a1[6];
  if (!v3) {
    return;
  }
  uint64_t v5 = a1[4];
  uint64_t v6 = std::__shared_weak_count::lock(v3);
  xpc_object_t v34 = v6;
  if (!v6) {
    return;
  }
  if (!a1[5])
  {
    uint64_t v10 = v6;
LABEL_45:
    if (!atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
    return;
  }
  uint64_t v7 = *a2;
  if (*a2) {
    uint64_t v8 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  }
  else {
    uint64_t v8 = 0;
  }
  if (v8)
  {
    xpc_object_t v9 = *(NSObject **)(v5 + 88);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf) = 138412290;
      *(void *)((char *)&buf + 4) = v7;
      _os_log_error_impl(&dword_1C5767000, v9, OS_LOG_TYPE_ERROR, "%@", (uint8_t *)&buf, 0xCu);
    }
    goto LABEL_38;
  }
  if (!*(void *)(v5 + 176)) {
    goto LABEL_38;
  }
  xpc_object_t v11 = xpc_dictionary_create(0, 0, 0);
  if (v11 || (xpc_object_t v11 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C8792D30](v11) == MEMORY[0x1E4F14590])
    {
      xpc_retain(v11);
      xpc_object_t v12 = v11;
    }
    else
    {
      xpc_object_t v12 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v12 = xpc_null_create();
    xpc_object_t v11 = 0;
  }
  xpc_release(v11);
  xpc_object_t v13 = xpc_string_create((const char *)*MEMORY[0x1E4F4C6F0]);
  if (!v13) {
    xpc_object_t v13 = xpc_null_create();
  }
  xpc_dictionary_set_value(v12, (const char *)*MEMORY[0x1E4F4C690], v13);
  xpc_object_t v14 = xpc_null_create();
  xpc_release(v13);
  xpc_release(v14);
  xpc_object_t v15 = xpc_string_create((const char *)*MEMORY[0x1E4F4D138]);
  if (!v15) {
    xpc_object_t v15 = xpc_null_create();
  }
  xpc_dictionary_set_value(v12, (const char *)*MEMORY[0x1E4F4CA38], v15);
  xpc_object_t v16 = xpc_null_create();
  xpc_release(v15);
  xpc_release(v16);
  uint64_t v17 = (char *)operator new(0x38uLL);
  strcpy(v17, "User requested to change Baseband field test config");
  xpc_object_t v18 = xpc_string_create(v17);
  if (!v18) {
    xpc_object_t v18 = xpc_null_create();
  }
  xpc_dictionary_set_value(v12, (const char *)*MEMORY[0x1E4F4C8F0], v18);
  xpc_object_t v19 = xpc_null_create();
  xpc_release(v18);
  xpc_release(v19);
  operator delete(v17);
  long long v20 = (const void *)*MEMORY[0x1E4F4C638];
  size_t v21 = strlen((const char *)*MEMORY[0x1E4F4C638]);
  if (v21 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v22 = v21;
  if (v21 >= 0x17)
  {
    uint64_t v24 = (v21 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v21 | 7) != 0x17) {
      uint64_t v24 = v21 | 7;
    }
    uint64_t v25 = v24 + 1;
    p_long long buf = (long long *)operator new(v24 + 1);
    *((void *)&buf + 1) = v22;
    unint64_t v36 = v25 | 0x8000000000000000;
    *(void *)&long long buf = p_buf;
  }
  else
  {
    HIBYTE(v36) = v21;
    p_long long buf = &buf;
    if (!v21) {
      goto LABEL_32;
    }
  }
  memmove(p_buf, v20, v22);
LABEL_32:
  *((unsigned char *)p_buf + v22) = 0;
  xpc_object_t object = v12;
  if (v12) {
    xpc_retain(v12);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  xpc_object_t v31 = 0;
  Service::runCommand(v5, (uint64_t)&buf, &object, &v31);
  xpc_release(object);
  xpc_object_t object = 0;
  if (SHIBYTE(v36) < 0) {
    operator delete((void *)buf);
  }
  xpc_release(v12);
LABEL_38:
  if (*a2) {
    unint64_t v26 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  }
  else {
    unint64_t v26 = 0;
  }
  if (v26) {
    uint64_t v27 = 3760250880;
  }
  else {
    uint64_t v27 = 0;
  }
  xpc_object_t v28 = xpc_null_create();
  uint64_t v29 = a1[7];
  *(void *)&long long buf = v28;
  xpc_object_t v30 = xpc_null_create();
  (*(void (**)(uint64_t, uint64_t, long long *))(v29 + 16))(v29, v27, &buf);
  xpc_release((xpc_object_t)buf);
  xpc_release(v30);
  uint64_t v10 = v34;
  if (v34) {
    goto LABEL_45;
  }
}

void sub_1C583CD28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, char a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

xpc_object_t __copy_helper_block_e8_40c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE48c15_ZTSN3xpc4dictE56c36_ZTSNSt3__18weak_ptrI11RadioModuleEE(void *a1, void *a2)
{
  size_t v4 = (const void *)a2[5];
  if (v4)
  {
    uint64_t v5 = _Block_copy(v4);
    uint64_t v6 = (void *)a2[6];
    a1[5] = v5;
    a1[6] = v6;
    if (v6) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v6 = (void *)a2[6];
    a1[5] = 0;
    a1[6] = v6;
    if (v6)
    {
LABEL_3:
      xpc_object_t result = xpc_retain(v6);
      uint64_t v8 = a2[8];
      a1[7] = a2[7];
      a1[8] = v8;
      if (!v8) {
        return result;
      }
      goto LABEL_4;
    }
  }
  xpc_object_t result = xpc_null_create();
  a1[6] = result;
  uint64_t v8 = a2[8];
  a1[7] = a2[7];
  a1[8] = v8;
  if (!v8) {
    return result;
  }
LABEL_4:
  atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 16), 1uLL, memory_order_relaxed);
  return result;
}

void __destroy_helper_block_e8_40c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE48c15_ZTSN3xpc4dictE56c36_ZTSNSt3__18weak_ptrI11RadioModuleEE(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 64);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  xpc_release(*(xpc_object_t *)(a1 + 48));
  *(void *)(a1 + 48) = 0;
  uint64_t v3 = *(const void **)(a1 + 40);
  if (v3) {
    _Block_release(v3);
  }
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_81(void *a1, void **a2, const void **a3)
{
  size_t v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    uint64_t v7 = a1[4];
    uint64_t v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      xpc_object_t v9 = v8;
      if (!a1[5])
      {
LABEL_12:
        if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
        return;
      }
      v14[0] = MEMORY[0x1E4F143A8];
      v14[1] = 1174405120;
      v14[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_2_82;
      v14[3] = &__block_descriptor_tmp_89_0;
      void v14[4] = v7;
      if (*a3)
      {
        uint64_t v10 = _Block_copy(*a3);
        xpc_object_t v11 = *a2;
        aBlocunint64_t k = v10;
        xpc_object_t object = v11;
        if (v11) {
          goto LABEL_6;
        }
      }
      else
      {
        xpc_object_t v11 = *a2;
        aBlocunint64_t k = 0;
        xpc_object_t object = v11;
        if (v11)
        {
LABEL_6:
          xpc_retain(v11);
          xpc_object_t v12 = (uint64_t *)(v7 + 120);
          xpc_object_t v13 = (std::__shared_weak_count *)a1[6];
          uint64_t v17 = a1[5];
          xpc_object_t v18 = v13;
          if (!v13)
          {
LABEL_8:
            ctu::SharedSynchronizable<RadioModule>::execute_wrapped(v12, (uint64_t)v14);
            if (v18) {
              std::__shared_weak_count::__release_weak(v18);
            }
            xpc_release(object);
            xpc_object_t object = 0;
            if (aBlock) {
              _Block_release(aBlock);
            }
            goto LABEL_12;
          }
LABEL_7:
          atomic_fetch_add_explicit(&v13->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          goto LABEL_8;
        }
      }
      xpc_object_t object = xpc_null_create();
      xpc_object_t v12 = (uint64_t *)(v7 + 120);
      xpc_object_t v13 = (std::__shared_weak_count *)a1[6];
      uint64_t v17 = a1[5];
      xpc_object_t v18 = v13;
      if (!v13) {
        goto LABEL_8;
      }
      goto LABEL_7;
    }
  }
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_2_82(uint64_t a1)
{
  uint64_t v55 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void **)(a1 + 32);
  if ((*(unsigned int (**)(void *))(*v2 + 88))(v2))
  {
    memset(&v53, 170, sizeof(v53));
    uint64_t v3 = (const void *)*MEMORY[0x1E4F4C218];
    size_t v4 = strlen((const char *)*MEMORY[0x1E4F4C218]);
    if (v4 >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    std::string::size_type v5 = v4;
    if (v4 >= 0x17)
    {
      uint64_t v10 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v4 | 7) != 0x17) {
        uint64_t v10 = v4 | 7;
      }
      uint64_t v11 = v10 + 1;
      p_dst = (std::string *)operator new(v10 + 1);
      __dst.__r_.__value_.__l.__size_ = v5;
      __dst.__r_.__value_.__r.__words[2] = v11 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v4;
      p_dst = &__dst;
      if (!v4)
      {
LABEL_12:
        p_dst->__r_.__value_.__s.__data_[v5] = 0;
        xpc_object_t v12 = (char *)operator new(0x28uLL);
        strcpy(v12, " rejected; ABM is shutting down ");
        xpc_object_t v13 = std::string::append(&__dst, v12, 0x20uLL);
        long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
        v53.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v53.__r_.__value_.__l.__data_ = v14;
        v13->__r_.__value_.__l.__size_ = 0;
        v13->__r_.__value_.__r.__words[2] = 0;
        v13->__r_.__value_.__r.__words[0] = 0;
        operator delete(v12);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__dst.__r_.__value_.__l.__data_);
          xpc_object_t v15 = v2[11];
          if (!os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
          {
LABEL_14:
            uint64_t v17 = *(void *)(a1 + 40);
            xpc_object_t v16 = (uint64_t *)(a1 + 40);
            if (!v17)
            {
LABEL_82:
              if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v53.__r_.__value_.__l.__data_);
              }
              return;
            }
LABEL_41:
            __dst.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
            std::string::size_type size = HIBYTE(v53.__r_.__value_.__r.__words[2]);
            if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              std::string::size_type size = v53.__r_.__value_.__l.__size_;
            }
            if (size)
            {
              xpc_object_t v30 = xpc_dictionary_create(0, 0, 0);
              if (v30 || (xpc_object_t v30 = xpc_null_create()) != 0)
              {
                if (MEMORY[0x1C8792D30](v30) == MEMORY[0x1E4F14590])
                {
                  xpc_retain(v30);
                  xpc_object_t v31 = v30;
                }
                else
                {
                  xpc_object_t v31 = xpc_null_create();
                }
              }
              else
              {
                xpc_object_t v31 = xpc_null_create();
                xpc_object_t v30 = 0;
              }
              xpc_release(v30);
              xpc_object_t v38 = xpc_null_create();
              xpc_object_t v39 = (void *)__dst.__r_.__value_.__r.__words[0];
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v31;
              xpc_release(v39);
              xpc_release(v38);
              if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                xpc_object_t v40 = &v53;
              }
              else {
                xpc_object_t v40 = (std::string *)v53.__r_.__value_.__r.__words[0];
              }
              xpc_object_t v41 = xpc_string_create((const char *)v40);
              if (!v41) {
                xpc_object_t v41 = xpc_null_create();
              }
              xpc_dictionary_set_value(v31, (const char *)*MEMORY[0x1E4F4C240], v41);
              xpc_object_t v42 = xpc_null_create();
              xpc_release(v41);
              xpc_release(v42);
            }
            LODWORD(object) = -534716415;
            dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(v16, (unsigned int *)&object, (void **)&__dst.__r_.__value_.__l.__data_);
            xpc_release(__dst.__r_.__value_.__l.__data_);
            goto LABEL_82;
          }
        }
        else
        {
          xpc_object_t v15 = v2[11];
          if (!os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_14;
          }
        }
        uint64_t v27 = &v53;
        if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          uint64_t v27 = (std::string *)v53.__r_.__value_.__r.__words[0];
        }
        LODWORD(__dst.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = (std::string::size_type)v27;
        _os_log_impl(&dword_1C5767000, v15, OS_LOG_TYPE_DEFAULT, "#I %s", (uint8_t *)&__dst, 0xCu);
        uint64_t v28 = *(void *)(a1 + 40);
        xpc_object_t v16 = (uint64_t *)(a1 + 40);
        if (!v28) {
          goto LABEL_82;
        }
        goto LABEL_41;
      }
    }
    memmove(p_dst, v3, v5);
    goto LABEL_12;
  }
  if (MEMORY[0x1C8792D30](*(void *)(a1 + 48)) == MEMORY[0x1E4F14590])
  {
    __dst.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
    __dst.__r_.__value_.__l.__size_ = 0xAAAAAAAAAAAAAAAALL;
    xpc_object_t v18 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
    uint64_t v19 = off_1EBBDD2A0;
    if (!off_1EBBDD2A0)
    {
      CommandDriverFactory::create_default_global((uint64_t *)&v53, v18);
      long long v20 = *(_OWORD *)&v53.__r_.__value_.__l.__data_;
      *(_OWORD *)&v53.__r_.__value_.__l.__data_ = 0uLL;
      size_t v21 = (std::__shared_weak_count *)*(&off_1EBBDD2A0 + 1);
      off_1EBBDD2A0 = v20;
      if (v21 && !atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
      size_t v22 = (std::__shared_weak_count *)v53.__r_.__value_.__l.__size_;
      if (v53.__r_.__value_.__l.__size_
        && !atomic_fetch_add((atomic_ullong *volatile)(v53.__r_.__value_.__l.__size_ + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
      uint64_t v19 = off_1EBBDD2A0;
    }
    xpc_object_t v23 = (std::__shared_weak_count *)*(&off_1EBBDD2A0 + 1);
    uint64_t v49 = v19;
    uint64_t v50 = *(&off_1EBBDD2A0 + 1);
    if (*(&off_1EBBDD2A0 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDD2A0 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
    (*(void (**)(xpc_object_t *__return_ptr, uint64_t))(*(void *)v19 + 16))(&object, v19);
    *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = 0uLL;
    if (v52)
    {
      __dst.__r_.__value_.__l.__size_ = (std::string::size_type)std::__shared_weak_count::lock(v52);
      if (__dst.__r_.__value_.__l.__size_) {
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)object;
      }
      if (v52) {
        std::__shared_weak_count::__release_weak(v52);
      }
    }
    if (v23 && !atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
    std::string::size_type v24 = __dst.__r_.__value_.__r.__words[0];
    if (__dst.__r_.__value_.__r.__words[0])
    {
      memset(&v53, 170, sizeof(v53));
      xpc_object_t value = xpc_dictionary_get_value(*(xpc_object_t *)(a1 + 48), (const char *)*MEMORY[0x1E4F4C420]);
      xpc_object_t object = value;
      if (value) {
        xpc_retain(value);
      }
      else {
        xpc_object_t object = xpc_null_create();
      }
      xpc::dyn_cast_or_default((uint64_t *)&v53, (xpc *)&object, (const object *)"", v26);
      xpc_release(object);
      if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v48, v53.__r_.__value_.__l.__data_, v53.__r_.__value_.__l.__size_);
      }
      else {
        std::string v48 = v53;
      }
      v43[0] = MEMORY[0x1E4F143A8];
      v43[1] = 1174405120;
      v43[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_83;
      v43[3] = &__block_descriptor_tmp_86_0;
      uint64_t v33 = *(void *)(a1 + 56);
      xpc_object_t v32 = *(std::__shared_weak_count **)(a1 + 64);
      v43[4] = v2;
      void v43[5] = v33;
      xpc_object_t v44 = v32;
      if (v32) {
        atomic_fetch_add_explicit(&v32->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      xpc_object_t v34 = *(void **)(a1 + 40);
      if (v34) {
        xpc_object_t v34 = _Block_copy(v34);
      }
      unint64_t v45 = v34;
      uint64_t v35 = _Block_copy(v43);
      unint64_t v36 = v2[17];
      if (v36) {
        dispatch_retain(v36);
      }
      aBlocunint64_t k = v35;
      dispatch_object_t v47 = v36;
      (*(void (**)(std::string::size_type, std::string *, void **))(*(void *)v24 + 216))(v24, &v48, &aBlock);
      if (v47) {
        dispatch_release(v47);
      }
      if (aBlock) {
        _Block_release(aBlock);
      }
      if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v48.__r_.__value_.__l.__data_);
      }
      if (v45) {
        _Block_release(v45);
      }
      if (v44) {
        std::__shared_weak_count::__release_weak(v44);
      }
      if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v53.__r_.__value_.__l.__data_);
      }
    }
    uint64_t v37 = (std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_;
    if (__dst.__r_.__value_.__l.__size_
      && !atomic_fetch_add((atomic_ullong *volatile)(__dst.__r_.__value_.__l.__size_ + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  else
  {
    xpc_object_t v7 = xpc_null_create();
    uint64_t v8 = *(void *)(a1 + 40);
    v53.__r_.__value_.__r.__words[0] = (std::string::size_type)v7;
    xpc_object_t v9 = xpc_null_create();
    (*(void (**)(uint64_t, uint64_t, std::string *))(v8 + 16))(v8, 3760250882, &v53);
    xpc_release(v53.__r_.__value_.__l.__data_);
    xpc_release(v9);
  }
}

void sub_1C583D7B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, void *aBlock, char a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,xpc_object_t object)
{
  if (*(char *)(v28 - 105) < 0)
  {
    operator delete(*(void **)(v28 - 128));
    std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v28 - 96);
    _Unwind_Resume(a1);
  }
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v28 - 96);
  _Unwind_Resume(a1);
}

void sub_1C583D88C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1C583D8D0(_Unwind_Exception *a1)
{
  xpc_release(*(xpc_object_t *)(v1 - 96));
  if (*(char *)(v1 - 105) < 0)
  {
    operator delete(*(void **)(v1 - 128));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1C583D934);
}

void sub_1C583D904()
{
  xpc_release(*(xpc_object_t *)(v1 - 128));
  xpc_release(v0);
  JUMPOUT(0x1C583D934);
}

void sub_1C583D92C(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void sub_1C583D944(_Unwind_Exception *a1)
{
  operator delete(v1);
  if (*(char *)(v2 - 73) < 0)
  {
    operator delete(*(void **)(v2 - 96));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1C583D934);
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_83(void *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  size_t v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    uint64_t v7 = a1[4];
    uint64_t v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      xpc_object_t v9 = v8;
      if (a1[5])
      {
        uint64_t v10 = *a2;
        if (*a2) {
          uint64_t v11 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
        }
        else {
          uint64_t v11 = 0;
        }
        if (v11)
        {
          xpc_object_t v12 = *(NSObject **)(v7 + 88);
          if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)xpc_object_t object = 138412290;
            *(void *)&xpc_object_t object[4] = v10;
            _os_log_error_impl(&dword_1C5767000, v12, OS_LOG_TYPE_ERROR, "%@", object, 0xCu);
          }
        }
        else
        {
          uint64_t v18 = *a3;
          if (*a3) {
            uint64_t v19 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
          }
          else {
            uint64_t v19 = 0;
          }
          if (v19)
          {
            long long v20 = *(NSObject **)(v7 + 88);
            if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)xpc_object_t object = 138412290;
              *(void *)&xpc_object_t object[4] = v18;
              _os_log_impl(&dword_1C5767000, v20, OS_LOG_TYPE_DEFAULT, "#I %@", object, 0xCu);
            }
          }
        }
        if (*a2) {
          xpc_object_t v13 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
        }
        else {
          xpc_object_t v13 = 0;
        }
        if (v13) {
          uint64_t v14 = 3760250880;
        }
        else {
          uint64_t v14 = 0;
        }
        xpc_object_t v15 = xpc_null_create();
        uint64_t v16 = a1[7];
        *(void *)xpc_object_t object = v15;
        xpc_object_t v17 = xpc_null_create();
        (*(void (**)(uint64_t, uint64_t, unsigned char *))(v16 + 16))(v16, v14, object);
        xpc_release(*(xpc_object_t *)object);
        xpc_release(v17);
      }
      if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
}

void sub_1C583DB88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, xpc_object_t object)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_93(void *a1, uint64_t a2, const void **a3)
{
  size_t v4 = (std::__shared_weak_count *)a1[6];
  if (!v4) {
    return;
  }
  uint64_t v6 = (void *)a1[4];
  uint64_t v7 = std::__shared_weak_count::lock(v4);
  if (!v7) {
    return;
  }
  uint64_t v8 = v7;
  uint64_t v9 = a1[5];
  if (v9)
  {
    if (*a3)
    {
      uint64_t v10 = _Block_copy(*a3);
      uint64_t v9 = a1[5];
      uint64_t v11 = (std::__shared_weak_count *)a1[6];
      if (!v11) {
        goto LABEL_7;
      }
    }
    else
    {
      uint64_t v10 = 0;
      uint64_t v11 = (std::__shared_weak_count *)a1[6];
      if (!v11)
      {
LABEL_7:
        xpc_object_t v12 = (std::__shared_weak_count *)v6[16];
        if (!v12 || (uint64_t v13 = v6[15], (v14 = std::__shared_weak_count::lock(v12)) == 0)) {
          std::__throw_bad_weak_ptr[abi:ne180100]();
        }
        xpc_object_t v15 = v14;
        uint64_t v16 = operator new(0x20uLL);
        *uint64_t v16 = v6;
        v16[1] = v10;
        uint64_t v16[2] = v9;
        v16[3] = v11;
        if (v11) {
          atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        }
        xpc_object_t v17 = v6[17];
        atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
        uint64_t v18 = operator new(0x18uLL);
        void *v18 = v16;
        v18[1] = v13;
        v18[2] = v15;
        dispatch_async_f(v17, v18, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI11RadioModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb0_E3__0EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_);
        if (!atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
        if (v11) {
          std::__shared_weak_count::__release_weak(v11);
        }
        goto LABEL_15;
      }
    }
    atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    goto LABEL_7;
  }
LABEL_15:
  if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_97(void *a1, uint64_t a2, const void **a3)
{
  size_t v4 = (std::__shared_weak_count *)a1[6];
  if (!v4) {
    return;
  }
  uint64_t v6 = (void *)a1[4];
  uint64_t v7 = std::__shared_weak_count::lock(v4);
  if (!v7) {
    return;
  }
  uint64_t v8 = v7;
  uint64_t v9 = a1[5];
  if (v9)
  {
    if (*a3)
    {
      uint64_t v10 = _Block_copy(*a3);
      uint64_t v9 = a1[5];
      uint64_t v11 = (std::__shared_weak_count *)a1[6];
      if (!v11) {
        goto LABEL_7;
      }
    }
    else
    {
      uint64_t v10 = 0;
      uint64_t v11 = (std::__shared_weak_count *)a1[6];
      if (!v11)
      {
LABEL_7:
        xpc_object_t v12 = (std::__shared_weak_count *)v6[16];
        if (!v12 || (uint64_t v13 = v6[15], (v14 = std::__shared_weak_count::lock(v12)) == 0)) {
          std::__throw_bad_weak_ptr[abi:ne180100]();
        }
        xpc_object_t v15 = v14;
        uint64_t v16 = operator new(0x20uLL);
        *uint64_t v16 = v6;
        v16[1] = v10;
        uint64_t v16[2] = v9;
        v16[3] = v11;
        if (v11) {
          atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        }
        xpc_object_t v17 = v6[17];
        atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
        uint64_t v18 = operator new(0x18uLL);
        void *v18 = v16;
        v18[1] = v13;
        v18[2] = v15;
        dispatch_async_f(v17, v18, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI11RadioModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb1_E3__1EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_);
        if (!atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
        if (v11) {
          std::__shared_weak_count::__release_weak(v11);
        }
        goto LABEL_15;
      }
    }
    atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    goto LABEL_7;
  }
LABEL_15:
  if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_101(void *a1, uint64_t a2, const void **a3)
{
  size_t v4 = (std::__shared_weak_count *)a1[6];
  if (!v4) {
    return;
  }
  uint64_t v6 = (void *)a1[4];
  uint64_t v7 = std::__shared_weak_count::lock(v4);
  if (!v7) {
    return;
  }
  uint64_t v8 = v7;
  uint64_t v9 = a1[5];
  if (v9)
  {
    if (*a3)
    {
      uint64_t v10 = _Block_copy(*a3);
      uint64_t v9 = a1[5];
      uint64_t v11 = (std::__shared_weak_count *)a1[6];
      if (!v11) {
        goto LABEL_7;
      }
    }
    else
    {
      uint64_t v10 = 0;
      uint64_t v11 = (std::__shared_weak_count *)a1[6];
      if (!v11)
      {
LABEL_7:
        xpc_object_t v12 = (std::__shared_weak_count *)v6[16];
        if (!v12 || (uint64_t v13 = v6[15], (v14 = std::__shared_weak_count::lock(v12)) == 0)) {
          std::__throw_bad_weak_ptr[abi:ne180100]();
        }
        xpc_object_t v15 = v14;
        uint64_t v16 = operator new(0x20uLL);
        *uint64_t v16 = v6;
        v16[1] = v10;
        uint64_t v16[2] = v9;
        v16[3] = v11;
        if (v11) {
          atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        }
        xpc_object_t v17 = v6[17];
        atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
        uint64_t v18 = operator new(0x18uLL);
        void *v18 = v16;
        v18[1] = v13;
        v18[2] = v15;
        dispatch_async_f(v17, v18, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI11RadioModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb2_E3__2EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_);
        if (!atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
        if (v11) {
          std::__shared_weak_count::__release_weak(v11);
        }
        goto LABEL_15;
      }
    }
    atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    goto LABEL_7;
  }
LABEL_15:
  if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_105(void *a1, uint64_t a2, const void **a3)
{
  size_t v4 = (std::__shared_weak_count *)a1[6];
  if (!v4) {
    return;
  }
  uint64_t v6 = (void *)a1[4];
  uint64_t v7 = std::__shared_weak_count::lock(v4);
  if (!v7) {
    return;
  }
  uint64_t v8 = v7;
  uint64_t v9 = a1[5];
  if (v9)
  {
    if (*a3)
    {
      uint64_t v10 = _Block_copy(*a3);
      uint64_t v9 = a1[5];
      uint64_t v11 = (std::__shared_weak_count *)a1[6];
      if (!v11) {
        goto LABEL_7;
      }
    }
    else
    {
      uint64_t v10 = 0;
      uint64_t v11 = (std::__shared_weak_count *)a1[6];
      if (!v11)
      {
LABEL_7:
        xpc_object_t v12 = (std::__shared_weak_count *)v6[16];
        if (!v12 || (uint64_t v13 = v6[15], (v14 = std::__shared_weak_count::lock(v12)) == 0)) {
          std::__throw_bad_weak_ptr[abi:ne180100]();
        }
        xpc_object_t v15 = v14;
        uint64_t v16 = operator new(0x20uLL);
        *uint64_t v16 = v6;
        v16[1] = v10;
        uint64_t v16[2] = v9;
        v16[3] = v11;
        if (v11) {
          atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        }
        xpc_object_t v17 = v6[17];
        atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
        uint64_t v18 = operator new(0x18uLL);
        void *v18 = v16;
        v18[1] = v13;
        v18[2] = v15;
        dispatch_async_f(v17, v18, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI11RadioModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb3_E3__3EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_);
        if (!atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
        if (v11) {
          std::__shared_weak_count::__release_weak(v11);
        }
        goto LABEL_15;
      }
    }
    atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    goto LABEL_7;
  }
LABEL_15:
  if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_109(void *a1, uint64_t a2, const void **a3)
{
  size_t v4 = (std::__shared_weak_count *)a1[6];
  if (!v4) {
    return;
  }
  uint64_t v6 = (void *)a1[4];
  uint64_t v7 = std::__shared_weak_count::lock(v4);
  if (!v7) {
    return;
  }
  uint64_t v8 = v7;
  uint64_t v9 = a1[5];
  if (v9)
  {
    if (*a3)
    {
      uint64_t v10 = _Block_copy(*a3);
      uint64_t v9 = a1[5];
      uint64_t v11 = (std::__shared_weak_count *)a1[6];
      if (!v11) {
        goto LABEL_7;
      }
    }
    else
    {
      uint64_t v10 = 0;
      uint64_t v11 = (std::__shared_weak_count *)a1[6];
      if (!v11)
      {
LABEL_7:
        xpc_object_t v12 = (std::__shared_weak_count *)v6[16];
        if (!v12 || (uint64_t v13 = v6[15], (v14 = std::__shared_weak_count::lock(v12)) == 0)) {
          std::__throw_bad_weak_ptr[abi:ne180100]();
        }
        xpc_object_t v15 = v14;
        uint64_t v16 = operator new(0x20uLL);
        *uint64_t v16 = v6;
        v16[1] = v10;
        uint64_t v16[2] = v9;
        v16[3] = v11;
        if (v11) {
          atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        }
        xpc_object_t v17 = v6[17];
        atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
        uint64_t v18 = operator new(0x18uLL);
        void *v18 = v16;
        v18[1] = v13;
        v18[2] = v15;
        dispatch_async_f(v17, v18, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI11RadioModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb4_E3__4EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_);
        if (!atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
        if (v11) {
          std::__shared_weak_count::__release_weak(v11);
        }
        goto LABEL_15;
      }
    }
    atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    goto LABEL_7;
  }
LABEL_15:
  if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_113(void *a1, uint64_t a2, const void **a3)
{
  size_t v4 = (std::__shared_weak_count *)a1[6];
  if (!v4) {
    return;
  }
  uint64_t v6 = (void *)a1[4];
  uint64_t v7 = std::__shared_weak_count::lock(v4);
  if (!v7) {
    return;
  }
  uint64_t v8 = v7;
  uint64_t v9 = a1[5];
  if (v9)
  {
    if (*a3)
    {
      uint64_t v10 = _Block_copy(*a3);
      uint64_t v9 = a1[5];
      uint64_t v11 = (std::__shared_weak_count *)a1[6];
      if (!v11) {
        goto LABEL_7;
      }
    }
    else
    {
      uint64_t v10 = 0;
      uint64_t v11 = (std::__shared_weak_count *)a1[6];
      if (!v11)
      {
LABEL_7:
        xpc_object_t v12 = (std::__shared_weak_count *)v6[16];
        if (!v12 || (uint64_t v13 = v6[15], (v14 = std::__shared_weak_count::lock(v12)) == 0)) {
          std::__throw_bad_weak_ptr[abi:ne180100]();
        }
        xpc_object_t v15 = v14;
        uint64_t v16 = operator new(0x20uLL);
        *uint64_t v16 = v6;
        v16[1] = v10;
        uint64_t v16[2] = v9;
        v16[3] = v11;
        if (v11) {
          atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        }
        xpc_object_t v17 = v6[17];
        atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
        uint64_t v18 = operator new(0x18uLL);
        void *v18 = v16;
        v18[1] = v13;
        v18[2] = v15;
        dispatch_async_f(v17, v18, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI11RadioModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb5_E3__5EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_);
        if (!atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
        if (v11) {
          std::__shared_weak_count::__release_weak(v11);
        }
        goto LABEL_15;
      }
    }
    atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    goto LABEL_7;
  }
LABEL_15:
  if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_117(void *a1, xpc_object_t *a2, const void **a3)
{
  size_t v4 = (std::__shared_weak_count *)a1[6];
  if (!v4) {
    return;
  }
  uint64_t v7 = (void *)a1[4];
  uint64_t v8 = std::__shared_weak_count::lock(v4);
  if (!v8) {
    return;
  }
  uint64_t v9 = v8;
  if (a1[5])
  {
    xpc_object_t v10 = *a2;
    if (v10)
    {
      xpc_retain(v10);
      uint64_t v11 = *a3;
      if (*a3) {
        goto LABEL_6;
      }
    }
    else
    {
      xpc_object_t v10 = xpc_null_create();
      uint64_t v11 = *a3;
      if (*a3)
      {
LABEL_6:
        xpc_object_t v12 = _Block_copy(v11);
        uint64_t v14 = a1[5];
        uint64_t v13 = (std::__shared_weak_count *)a1[6];
        if (!v13) {
          goto LABEL_8;
        }
        goto LABEL_7;
      }
    }
    xpc_object_t v12 = 0;
    uint64_t v14 = a1[5];
    uint64_t v13 = (std::__shared_weak_count *)a1[6];
    if (!v13)
    {
LABEL_8:
      xpc_object_t v15 = (std::__shared_weak_count *)v7[16];
      if (!v15 || (uint64_t v16 = v7[15], (v17 = std::__shared_weak_count::lock(v15)) == 0)) {
        std::__throw_bad_weak_ptr[abi:ne180100]();
      }
      uint64_t v18 = v17;
      uint64_t v19 = operator new(0x28uLL);
      void *v19 = v7;
      v19[1] = v10;
      xpc_object_t v20 = xpc_null_create();
      void v19[2] = v12;
      void v19[3] = v14;
      v19[4] = v13;
      if (v13) {
        atomic_fetch_add_explicit(&v13->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      size_t v21 = v7[17];
      atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v22 = operator new(0x18uLL);
      void *v22 = v19;
      v22[1] = v16;
      v22[2] = v18;
      dispatch_async_f(v21, v22, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI11RadioModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb6_E3__6EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_);
      if (!atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
      if (v13) {
        std::__shared_weak_count::__release_weak(v13);
      }
      xpc_release(v20);
      goto LABEL_17;
    }
LABEL_7:
    atomic_fetch_add_explicit(&v13->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    goto LABEL_8;
  }
LABEL_17:
  if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_121(void *a1, xpc_object_t *a2, const void **a3)
{
  size_t v4 = (std::__shared_weak_count *)a1[6];
  if (!v4) {
    return;
  }
  uint64_t v7 = (void *)a1[4];
  uint64_t v8 = std::__shared_weak_count::lock(v4);
  if (!v8) {
    return;
  }
  uint64_t v9 = v8;
  if (a1[5])
  {
    xpc_object_t v10 = *a2;
    if (v10)
    {
      xpc_retain(v10);
      uint64_t v11 = *a3;
      if (*a3) {
        goto LABEL_6;
      }
    }
    else
    {
      xpc_object_t v10 = xpc_null_create();
      uint64_t v11 = *a3;
      if (*a3)
      {
LABEL_6:
        xpc_object_t v12 = _Block_copy(v11);
        uint64_t v14 = a1[5];
        uint64_t v13 = (std::__shared_weak_count *)a1[6];
        if (!v13) {
          goto LABEL_8;
        }
        goto LABEL_7;
      }
    }
    xpc_object_t v12 = 0;
    uint64_t v14 = a1[5];
    uint64_t v13 = (std::__shared_weak_count *)a1[6];
    if (!v13)
    {
LABEL_8:
      xpc_object_t v15 = (std::__shared_weak_count *)v7[16];
      if (!v15 || (uint64_t v16 = v7[15], (v17 = std::__shared_weak_count::lock(v15)) == 0)) {
        std::__throw_bad_weak_ptr[abi:ne180100]();
      }
      uint64_t v18 = v17;
      uint64_t v19 = operator new(0x28uLL);
      void *v19 = v7;
      v19[1] = v10;
      xpc_object_t v20 = xpc_null_create();
      void v19[2] = v12;
      void v19[3] = v14;
      v19[4] = v13;
      if (v13) {
        atomic_fetch_add_explicit(&v13->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      size_t v21 = v7[17];
      atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v22 = operator new(0x18uLL);
      void *v22 = v19;
      v22[1] = v16;
      v22[2] = v18;
      dispatch_async_f(v21, v22, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI11RadioModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb7_E3__7EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_);
      if (!atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
      if (v13) {
        std::__shared_weak_count::__release_weak(v13);
      }
      xpc_release(v20);
      goto LABEL_17;
    }
LABEL_7:
    atomic_fetch_add_explicit(&v13->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    goto LABEL_8;
  }
LABEL_17:
  if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_125(void *a1, xpc_object_t *a2, const void **a3)
{
  size_t v4 = (std::__shared_weak_count *)a1[6];
  if (!v4) {
    return;
  }
  uint64_t v7 = (void *)a1[4];
  uint64_t v8 = std::__shared_weak_count::lock(v4);
  if (!v8) {
    return;
  }
  uint64_t v9 = v8;
  if (a1[5])
  {
    xpc_object_t v10 = *a2;
    if (v10)
    {
      xpc_retain(v10);
      uint64_t v11 = *a3;
      if (*a3) {
        goto LABEL_6;
      }
    }
    else
    {
      xpc_object_t v10 = xpc_null_create();
      uint64_t v11 = *a3;
      if (*a3)
      {
LABEL_6:
        xpc_object_t v12 = _Block_copy(v11);
        uint64_t v14 = a1[5];
        uint64_t v13 = (std::__shared_weak_count *)a1[6];
        if (!v13) {
          goto LABEL_8;
        }
        goto LABEL_7;
      }
    }
    xpc_object_t v12 = 0;
    uint64_t v14 = a1[5];
    uint64_t v13 = (std::__shared_weak_count *)a1[6];
    if (!v13)
    {
LABEL_8:
      xpc_object_t v15 = (std::__shared_weak_count *)v7[16];
      if (!v15 || (uint64_t v16 = v7[15], (v17 = std::__shared_weak_count::lock(v15)) == 0)) {
        std::__throw_bad_weak_ptr[abi:ne180100]();
      }
      uint64_t v18 = v17;
      uint64_t v19 = operator new(0x28uLL);
      void *v19 = v7;
      v19[1] = v10;
      xpc_object_t v20 = xpc_null_create();
      void v19[2] = v12;
      void v19[3] = v14;
      v19[4] = v13;
      if (v13) {
        atomic_fetch_add_explicit(&v13->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      size_t v21 = v7[17];
      atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v22 = operator new(0x18uLL);
      void *v22 = v19;
      v22[1] = v16;
      v22[2] = v18;
      dispatch_async_f(v21, v22, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI11RadioModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb8_E3__8EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_);
      if (!atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
      if (v13) {
        std::__shared_weak_count::__release_weak(v13);
      }
      xpc_release(v20);
      goto LABEL_17;
    }
LABEL_7:
    atomic_fetch_add_explicit(&v13->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    goto LABEL_8;
  }
LABEL_17:
  if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_129(void *a1, uint64_t a2, const void **a3)
{
  size_t v4 = (std::__shared_weak_count *)a1[6];
  if (!v4) {
    return;
  }
  uint64_t v6 = (void *)a1[4];
  uint64_t v7 = std::__shared_weak_count::lock(v4);
  if (!v7) {
    return;
  }
  uint64_t v8 = v7;
  uint64_t v9 = a1[5];
  if (v9)
  {
    if (*a3)
    {
      xpc_object_t v10 = _Block_copy(*a3);
      uint64_t v9 = a1[5];
      uint64_t v11 = (std::__shared_weak_count *)a1[6];
      if (!v11) {
        goto LABEL_7;
      }
    }
    else
    {
      xpc_object_t v10 = 0;
      uint64_t v11 = (std::__shared_weak_count *)a1[6];
      if (!v11)
      {
LABEL_7:
        xpc_object_t v12 = (std::__shared_weak_count *)v6[16];
        if (!v12 || (uint64_t v13 = v6[15], (v14 = std::__shared_weak_count::lock(v12)) == 0)) {
          std::__throw_bad_weak_ptr[abi:ne180100]();
        }
        xpc_object_t v15 = v14;
        uint64_t v16 = operator new(0x20uLL);
        *uint64_t v16 = v6;
        v16[1] = v10;
        uint64_t v16[2] = v9;
        v16[3] = v11;
        if (v11) {
          atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        }
        xpc_object_t v17 = v6[17];
        atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
        uint64_t v18 = operator new(0x18uLL);
        void *v18 = v16;
        v18[1] = v13;
        v18[2] = v15;
        dispatch_async_f(v17, v18, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI11RadioModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb9_E3__9EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_);
        if (!atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
        if (v11) {
          std::__shared_weak_count::__release_weak(v11);
        }
        goto LABEL_15;
      }
    }
    atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    goto LABEL_7;
  }
LABEL_15:
  if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_133(void *a1, xpc_object_t *a2, const void **a3)
{
  size_t v4 = (std::__shared_weak_count *)a1[6];
  if (!v4) {
    return;
  }
  uint64_t v7 = (void *)a1[4];
  uint64_t v8 = std::__shared_weak_count::lock(v4);
  if (!v8) {
    return;
  }
  uint64_t v9 = v8;
  uint64_t v10 = a1[5];
  if (v10)
  {
    if (*a3)
    {
      uint64_t v11 = _Block_copy(*a3);
      uint64_t v10 = a1[5];
      xpc_object_t v12 = (std::__shared_weak_count *)a1[6];
      if (!v12)
      {
LABEL_7:
        xpc_object_t v13 = *a2;
        if (*a2)
        {
          xpc_retain(*a2);
          uint64_t v14 = (std::__shared_weak_count *)v7[16];
          if (!v14) {
LABEL_25:
          }
            std::__throw_bad_weak_ptr[abi:ne180100]();
        }
        else
        {
          xpc_object_t v13 = xpc_null_create();
          uint64_t v14 = (std::__shared_weak_count *)v7[16];
          if (!v14) {
            goto LABEL_25;
          }
        }
        uint64_t v15 = v7[15];
        uint64_t v16 = std::__shared_weak_count::lock(v14);
        if (!v16) {
          goto LABEL_25;
        }
        xpc_object_t v17 = v16;
        uint64_t v18 = operator new(0x28uLL);
        uint64_t v19 = v18;
        void *v18 = v7;
        v18[1] = v11;
        v18[2] = v10;
        void v18[3] = v12;
        if (v12) {
          atomic_fetch_add_explicit(&v12->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        }
        v18[4] = v13;
        xpc_object_t v20 = xpc_null_create();
        size_t v21 = v7[17];
        atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
        uint64_t v22 = operator new(0x18uLL);
        void *v22 = v19;
        v22[1] = v15;
        v22[2] = v17;
        dispatch_async_f(v21, v22, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI11RadioModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb10_E4__10EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_);
        if (!atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
        xpc_release(v20);
        if (v12) {
          std::__shared_weak_count::__release_weak(v12);
        }
        goto LABEL_20;
      }
    }
    else
    {
      uint64_t v11 = 0;
      xpc_object_t v12 = (std::__shared_weak_count *)a1[6];
      if (!v12) {
        goto LABEL_7;
      }
    }
    atomic_fetch_add_explicit(&v12->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    goto LABEL_7;
  }
LABEL_20:
  if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_137(void *a1, xpc_object_t *a2, const void **a3)
{
  size_t v4 = (std::__shared_weak_count *)a1[6];
  if (!v4) {
    return;
  }
  uint64_t v7 = (void *)a1[4];
  uint64_t v8 = std::__shared_weak_count::lock(v4);
  if (!v8) {
    return;
  }
  uint64_t v9 = v8;
  uint64_t v10 = a1[5];
  if (v10)
  {
    if (*a3)
    {
      uint64_t v11 = _Block_copy(*a3);
      uint64_t v10 = a1[5];
      xpc_object_t v12 = (std::__shared_weak_count *)a1[6];
      if (!v12)
      {
LABEL_7:
        xpc_object_t v13 = *a2;
        if (*a2)
        {
          xpc_retain(*a2);
          uint64_t v14 = (std::__shared_weak_count *)v7[16];
          if (!v14) {
LABEL_25:
          }
            std::__throw_bad_weak_ptr[abi:ne180100]();
        }
        else
        {
          xpc_object_t v13 = xpc_null_create();
          uint64_t v14 = (std::__shared_weak_count *)v7[16];
          if (!v14) {
            goto LABEL_25;
          }
        }
        uint64_t v15 = v7[15];
        uint64_t v16 = std::__shared_weak_count::lock(v14);
        if (!v16) {
          goto LABEL_25;
        }
        xpc_object_t v17 = v16;
        uint64_t v18 = operator new(0x28uLL);
        uint64_t v19 = v18;
        void *v18 = v7;
        v18[1] = v11;
        v18[2] = v10;
        void v18[3] = v12;
        if (v12) {
          atomic_fetch_add_explicit(&v12->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        }
        v18[4] = v13;
        xpc_object_t v20 = xpc_null_create();
        size_t v21 = v7[17];
        atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
        uint64_t v22 = operator new(0x18uLL);
        void *v22 = v19;
        v22[1] = v15;
        v22[2] = v17;
        dispatch_async_f(v21, v22, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI11RadioModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb11_E4__11EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_);
        if (!atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
        xpc_release(v20);
        if (v12) {
          std::__shared_weak_count::__release_weak(v12);
        }
        goto LABEL_20;
      }
    }
    else
    {
      uint64_t v11 = 0;
      xpc_object_t v12 = (std::__shared_weak_count *)a1[6];
      if (!v12) {
        goto LABEL_7;
      }
    }
    atomic_fetch_add_explicit(&v12->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    goto LABEL_7;
  }
LABEL_20:
  if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_141(void *a1, xpc_object_t *a2, const void **a3)
{
  size_t v4 = (std::__shared_weak_count *)a1[6];
  if (!v4) {
    return;
  }
  uint64_t v7 = (void *)a1[4];
  uint64_t v8 = std::__shared_weak_count::lock(v4);
  if (!v8) {
    return;
  }
  uint64_t v9 = v8;
  uint64_t v10 = a1[5];
  if (v10)
  {
    if (*a3)
    {
      uint64_t v11 = _Block_copy(*a3);
      uint64_t v10 = a1[5];
      xpc_object_t v12 = (std::__shared_weak_count *)a1[6];
      if (!v12)
      {
LABEL_7:
        xpc_object_t v13 = *a2;
        if (*a2)
        {
          xpc_retain(*a2);
          uint64_t v14 = (std::__shared_weak_count *)v7[16];
          if (!v14) {
LABEL_25:
          }
            std::__throw_bad_weak_ptr[abi:ne180100]();
        }
        else
        {
          xpc_object_t v13 = xpc_null_create();
          uint64_t v14 = (std::__shared_weak_count *)v7[16];
          if (!v14) {
            goto LABEL_25;
          }
        }
        uint64_t v15 = v7[15];
        uint64_t v16 = std::__shared_weak_count::lock(v14);
        if (!v16) {
          goto LABEL_25;
        }
        xpc_object_t v17 = v16;
        uint64_t v18 = operator new(0x28uLL);
        uint64_t v19 = v18;
        void *v18 = v7;
        v18[1] = v11;
        v18[2] = v10;
        void v18[3] = v12;
        if (v12) {
          atomic_fetch_add_explicit(&v12->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        }
        v18[4] = v13;
        xpc_object_t v20 = xpc_null_create();
        size_t v21 = v7[17];
        atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
        uint64_t v22 = operator new(0x18uLL);
        void *v22 = v19;
        v22[1] = v15;
        v22[2] = v17;
        dispatch_async_f(v21, v22, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI11RadioModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb12_E4__12EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_);
        if (!atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
        xpc_release(v20);
        if (v12) {
          std::__shared_weak_count::__release_weak(v12);
        }
        goto LABEL_20;
      }
    }
    else
    {
      uint64_t v11 = 0;
      xpc_object_t v12 = (std::__shared_weak_count *)a1[6];
      if (!v12) {
        goto LABEL_7;
      }
    }
    atomic_fetch_add_explicit(&v12->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    goto LABEL_7;
  }
LABEL_20:
  if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_145(void *a1, uint64_t a2, const void **a3)
{
  size_t v4 = (std::__shared_weak_count *)a1[6];
  if (!v4) {
    return;
  }
  uint64_t v6 = (void *)a1[4];
  uint64_t v7 = std::__shared_weak_count::lock(v4);
  if (!v7) {
    return;
  }
  uint64_t v8 = v7;
  uint64_t v9 = a1[5];
  if (v9)
  {
    if (*a3)
    {
      uint64_t v10 = _Block_copy(*a3);
      uint64_t v9 = a1[5];
      uint64_t v11 = (std::__shared_weak_count *)a1[6];
      if (!v11) {
        goto LABEL_7;
      }
    }
    else
    {
      uint64_t v10 = 0;
      uint64_t v11 = (std::__shared_weak_count *)a1[6];
      if (!v11)
      {
LABEL_7:
        xpc_object_t v12 = (std::__shared_weak_count *)v6[16];
        if (!v12 || (uint64_t v13 = v6[15], (v14 = std::__shared_weak_count::lock(v12)) == 0)) {
          std::__throw_bad_weak_ptr[abi:ne180100]();
        }
        uint64_t v15 = v14;
        uint64_t v16 = operator new(0x20uLL);
        *uint64_t v16 = v6;
        v16[1] = v10;
        uint64_t v16[2] = v9;
        v16[3] = v11;
        if (v11) {
          atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        }
        xpc_object_t v17 = v6[17];
        atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
        uint64_t v18 = operator new(0x18uLL);
        void *v18 = v16;
        v18[1] = v13;
        v18[2] = v15;
        dispatch_async_f(v17, v18, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI11RadioModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb13_E4__13EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_);
        if (!atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
        if (v11) {
          std::__shared_weak_count::__release_weak(v11);
        }
        goto LABEL_15;
      }
    }
    atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    goto LABEL_7;
  }
LABEL_15:
  if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_149(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  size_t v4 = *(std::__shared_weak_count **)(a1 + 40);
  if (!v4) {
    return;
  }
  uint64_t v6 = std::__shared_weak_count::lock(v4);
  xpc_object_t v17 = v6;
  if (!v6) {
    return;
  }
  if (!*(void *)(a1 + 32))
  {
    uint64_t v10 = v6;
LABEL_19:
    if (!atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
    return;
  }
  CFTypeRef cf = (CFTypeRef)TelephonyBasebandCreateController();
  int v7 = TelephonyBasebandPowerDebugUnblock();
  xpc_object_t v8 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v9 = v8;
  if (v8)
  {
    xpc_object_t object = v8;
  }
  else
  {
    xpc_object_t v9 = xpc_null_create();
    xpc_object_t object = v9;
    if (!v9)
    {
      xpc_object_t v11 = xpc_null_create();
      xpc_object_t v9 = 0;
      goto LABEL_12;
    }
  }
  if (MEMORY[0x1C8792D30](v9) == MEMORY[0x1E4F14590])
  {
    xpc_retain(v9);
    goto LABEL_13;
  }
  xpc_object_t v11 = xpc_null_create();
LABEL_12:
  xpc_object_t object = v11;
LABEL_13:
  xpc_release(v9);
  if (v7) {
    unsigned int v12 = 0;
  }
  else {
    unsigned int v12 = -534716414;
  }
  unsigned int v13 = v12;
  dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(a3, &v13, &object);
  xpc_release(object);
  if (cf) {
    CFRelease(cf);
  }
  uint64_t v10 = v17;
  if (v17) {
    goto LABEL_19;
  }
}

void sub_1C583F83C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, xpc_object_t object, const void *a12, __int16 a13, char a14, char a15)
{
}

void sub_1C583F874(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_32c36_ZTSNSt3__18weak_ptrI11RadioModuleEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c36_ZTSNSt3__18weak_ptrI11RadioModuleEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_151(uint64_t a1, xpc_object_t *a2, uint64_t *a3)
{
  size_t v4 = *(std::__shared_weak_count **)(a1 + 40);
  if (!v4) {
    return;
  }
  int v7 = std::__shared_weak_count::lock(v4);
  unint64_t v45 = v7;
  if (!v7) {
    return;
  }
  if (!*(void *)(a1 + 32))
  {
    xpc_object_t v9 = v7;
LABEL_65:
    if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
    return;
  }
  uint64_t v42 = 0;
  uint64_t v43 = 0;
  xpc_object_t value = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E4F4D1F8]);
  xpc_object_t object = value;
  if (value) {
    xpc_retain(value);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  int v10 = xpc::dyn_cast_or_default((xpc *)&object, 0);
  xpc_release(object);
  xpc_object_t v11 = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E4F4D288]);
  xpc_object_t object = v11;
  if (v11) {
    xpc_retain(v11);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  int v12 = xpc::dyn_cast_or_default((xpc *)&object, 0);
  xpc_release(object);
  xpc_object_t v13 = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E4F4D258]);
  xpc_object_t object = v13;
  if (v13) {
    xpc_retain(v13);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  int v14 = xpc::dyn_cast_or_default((xpc *)&object, 0);
  xpc_release(object);
  xpc_object_t v15 = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E4F4D2A0]);
  xpc_object_t object = v15;
  if (v15) {
    xpc_retain(v15);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  int v16 = xpc::dyn_cast_or_default((xpc *)&object, 0);
  xpc_release(object);
  xpc_object_t v17 = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E4F4D2A8]);
  xpc_object_t object = v17;
  if (v17) {
    xpc_retain(v17);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  int v18 = xpc::dyn_cast_or_default((xpc *)&object, 0);
  xpc_release(object);
  xpc_object_t v19 = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E4F4D2C0]);
  xpc_object_t object = v19;
  if (v19) {
    xpc_retain(v19);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  int v20 = xpc::dyn_cast_or_default((xpc *)&object, 0);
  xpc_release(object);
  xpc_object_t v21 = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E4F4D280]);
  xpc_object_t object = v21;
  if (v21) {
    xpc_retain(v21);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  int v22 = xpc::dyn_cast_or_default((xpc *)&object, 0);
  xpc_release(object);
  if (v12) {
    int v23 = 2;
  }
  else {
    int v23 = 0;
  }
  int v24 = v23 | v10;
  if (v14) {
    int v25 = 4;
  }
  else {
    int v25 = 0;
  }
  if (v16) {
    int v26 = 8;
  }
  else {
    int v26 = 0;
  }
  int v27 = v24 | v25 | v26;
  if (v18) {
    int v28 = 16;
  }
  else {
    int v28 = 0;
  }
  if (v20) {
    int v29 = 32;
  }
  else {
    int v29 = 0;
  }
  int v30 = v28 | v29;
  if (v22) {
    int v31 = 64;
  }
  else {
    int v31 = 0;
  }
  LODWORD(v42) = v27 | v30 | v31;
  xpc_object_t v32 = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E4F4C2B0]);
  xpc_object_t object = v32;
  if (v32) {
    xpc_retain(v32);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  HIDWORD(v42) = xpc::dyn_cast_or_default((xpc *)&object, 0);
  xpc_release(object);
  xpc_object_t v33 = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E4F4C928]);
  xpc_object_t object = v33;
  if (v33) {
    xpc_retain(v33);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  LODWORD(v43) = xpc::dyn_cast_or_default((xpc *)&object, 0);
  xpc_release(object);
  xpc_object_t v34 = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E4F4D260]);
  xpc_object_t object = v34;
  if (v34) {
    xpc_retain(v34);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  BYTE4(v43) = xpc::dyn_cast_or_default((xpc *)&object, 0);
  xpc_release(object);
  BYTE5(v43) = 0;
  int v35 = TelephonyBasebandSetPowerDebugOptions();
  xpc_object_t object = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  xpc_object_t v36 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v37 = v36;
  if (v36)
  {
    xpc_object_t object = v36;
  }
  else
  {
    xpc_object_t v37 = xpc_null_create();
    xpc_object_t object = v37;
    if (!v37)
    {
      xpc_object_t v38 = xpc_null_create();
      xpc_object_t v37 = 0;
      goto LABEL_60;
    }
  }
  if (MEMORY[0x1C8792D30](v37) == MEMORY[0x1E4F14590])
  {
    xpc_retain(v37);
    goto LABEL_61;
  }
  xpc_object_t v38 = xpc_null_create();
LABEL_60:
  xpc_object_t object = v38;
LABEL_61:
  xpc_release(v37);
  if (v35) {
    unsigned int v39 = 0;
  }
  else {
    unsigned int v39 = -534716414;
  }
  unsigned int v40 = v39;
  dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(a3, &v40, &object);
  xpc_release(object);
  xpc_object_t v9 = v45;
  if (v45) {
    goto LABEL_65;
  }
}

void sub_1C583FD44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, uint64_t a11, uint64_t a12, char a13)
{
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_155(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  size_t v4 = *(std::__shared_weak_count **)(a1 + 40);
  if (!v4) {
    return;
  }
  uint64_t v6 = std::__shared_weak_count::lock(v4);
  xpc_object_t v41 = v6;
  if (!v6) {
    return;
  }
  if (!*(void *)(a1 + 32))
  {
    xpc_object_t v11 = v6;
LABEL_41:
    if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    return;
  }
  int64_t value = 0;
  int64_t v39 = 0;
  int v7 = MEMORY[0x1C8790140](&value);
  xpc_object_t object = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  xpc_object_t v8 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v9 = v8;
  uint64_t v10 = MEMORY[0x1E4F14590];
  if (v8)
  {
    xpc_object_t object = v8;
  }
  else
  {
    xpc_object_t v9 = xpc_null_create();
    xpc_object_t object = v9;
    if (!v9)
    {
      xpc_object_t v12 = xpc_null_create();
      xpc_object_t v9 = 0;
      goto LABEL_12;
    }
  }
  if (MEMORY[0x1C8792D30](v9) == v10)
  {
    xpc_retain(v9);
    goto LABEL_13;
  }
  xpc_object_t v12 = xpc_null_create();
LABEL_12:
  xpc_object_t object = v12;
LABEL_13:
  xpc_release(v9);
  if (v7)
  {
    if (MEMORY[0x1C8792D30](object) == v10)
    {
      xpc_object_t v13 = xpc_BOOL_create(value & 1);
      if (!v13) {
        xpc_object_t v13 = xpc_null_create();
      }
      xpc_dictionary_set_value(object, (const char *)*MEMORY[0x1E4F4D1F8], v13);
      xpc_object_t v14 = xpc_null_create();
      xpc_release(v13);
      xpc_release(v14);
      xpc_object_t v15 = xpc_BOOL_create((value & 2) != 0);
      if (!v15) {
        xpc_object_t v15 = xpc_null_create();
      }
      xpc_dictionary_set_value(object, (const char *)*MEMORY[0x1E4F4D288], v15);
      xpc_object_t v16 = xpc_null_create();
      xpc_release(v15);
      xpc_release(v16);
      xpc_object_t v17 = xpc_BOOL_create((value & 4) != 0);
      if (!v17) {
        xpc_object_t v17 = xpc_null_create();
      }
      xpc_dictionary_set_value(object, (const char *)*MEMORY[0x1E4F4D258], v17);
      xpc_object_t v18 = xpc_null_create();
      xpc_release(v17);
      xpc_release(v18);
      xpc_object_t v19 = xpc_BOOL_create((value & 8) != 0);
      if (!v19) {
        xpc_object_t v19 = xpc_null_create();
      }
      xpc_dictionary_set_value(object, (const char *)*MEMORY[0x1E4F4D2A0], v19);
      xpc_object_t v20 = xpc_null_create();
      xpc_release(v19);
      xpc_release(v20);
      xpc_object_t v21 = xpc_BOOL_create((value & 0x10) != 0);
      if (!v21) {
        xpc_object_t v21 = xpc_null_create();
      }
      xpc_dictionary_set_value(object, (const char *)*MEMORY[0x1E4F4D2A8], v21);
      xpc_object_t v22 = xpc_null_create();
      xpc_release(v21);
      xpc_release(v22);
      xpc_object_t v23 = xpc_BOOL_create((value & 0x20) != 0);
      if (!v23) {
        xpc_object_t v23 = xpc_null_create();
      }
      xpc_dictionary_set_value(object, (const char *)*MEMORY[0x1E4F4D2C0], v23);
      xpc_object_t v24 = xpc_null_create();
      xpc_release(v23);
      xpc_release(v24);
      xpc_object_t v25 = xpc_BOOL_create((value & 0x40) != 0);
      if (!v25) {
        xpc_object_t v25 = xpc_null_create();
      }
      xpc_dictionary_set_value(object, (const char *)*MEMORY[0x1E4F4D280], v25);
      xpc_object_t v26 = xpc_null_create();
      xpc_release(v25);
      xpc_release(v26);
      xpc_object_t v27 = xpc_int64_create(HIDWORD(value));
      if (!v27) {
        xpc_object_t v27 = xpc_null_create();
      }
      xpc_dictionary_set_value(object, (const char *)*MEMORY[0x1E4F4C2B0], v27);
      xpc_object_t v28 = xpc_null_create();
      xpc_release(v27);
      xpc_release(v28);
      xpc_object_t v29 = xpc_int64_create(v39);
      if (!v29) {
        xpc_object_t v29 = xpc_null_create();
      }
      xpc_dictionary_set_value(object, (const char *)*MEMORY[0x1E4F4C928], v29);
      xpc_object_t v30 = xpc_null_create();
      xpc_release(v29);
      xpc_release(v30);
      xpc_object_t v31 = xpc_BOOL_create(SBYTE4(v39));
      if (!v31) {
        xpc_object_t v31 = xpc_null_create();
      }
      xpc_dictionary_set_value(object, (const char *)*MEMORY[0x1E4F4D260], v31);
      xpc_object_t v32 = xpc_null_create();
      xpc_release(v31);
      xpc_release(v32);
      xpc_object_t v33 = xpc_BOOL_create(SBYTE5(v39));
      if (!v33) {
        xpc_object_t v33 = xpc_null_create();
      }
      xpc_dictionary_set_value(object, (const char *)*MEMORY[0x1E4F4D0A8], v33);
      xpc_object_t v34 = xpc_null_create();
      xpc_release(v33);
      xpc_release(v34);
    }
    unsigned int v35 = 0;
  }
  else
  {
    unsigned int v35 = -534716414;
  }
  unsigned int v36 = v35;
  dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(a3, &v36, &object);
  xpc_release(object);
  xpc_object_t v11 = v41;
  if (v41) {
    goto LABEL_41;
  }
}

void sub_1C584051C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  xpc_release(v13);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void RadioModule::finishInitialization_sync(RadioModule *this)
{
  uint64_t v284 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *((void *)this + 15);
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 16);
  size_t v4 = (char *)this + 120;
  if (!v3 || (uint64_t v6 = std::__shared_weak_count::lock(v3)) == 0) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  int v7 = v6;
  atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v7);
  }
  v248 = (std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL;
  v249 = (std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL;
  v220 = v7;
  xpc_object_t v8 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  uint64_t v9 = off_1EBBDD2A0;
  if (!off_1EBBDD2A0)
  {
    CommandDriverFactory::create_default_global((uint64_t *)&v270, v8);
    long long v10 = v270;
    long long v270 = 0uLL;
    xpc_object_t v11 = (std::__shared_weak_count *)*(&off_1EBBDD2A0 + 1);
    off_1EBBDD2A0 = v10;
    if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    xpc_object_t v12 = (std::__shared_weak_count *)*((void *)&v270 + 1);
    if (*((void *)&v270 + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v270 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
    uint64_t v9 = off_1EBBDD2A0;
  }
  xpc_object_t v13 = (std::__shared_weak_count *)*(&off_1EBBDD2A0 + 1);
  uint64_t v250 = v9;
  uint64_t v251 = *(&off_1EBBDD2A0 + 1);
  if (*(&off_1EBBDD2A0 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDD2A0 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(std::__shared_weak_count **__return_ptr, uint64_t))(*(void *)v9 + 16))(v259, v9);
  v248 = 0;
  v249 = 0;
  if (v259[1])
  {
    v249 = std::__shared_weak_count::lock(v259[1]);
    if (v249) {
      v248 = v259[0];
    }
    if (v259[1]) {
      std::__shared_weak_count::__release_weak(v259[1]);
    }
  }
  if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
    xpc_object_t v14 = (void *)&unk_1C599A000;
    if (!v248) {
      goto LABEL_31;
    }
  }
  else
  {
    xpc_object_t v14 = &unk_1C599A000;
    if (!v248) {
      goto LABEL_31;
    }
  }
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = v14[408];
  aBlock[2] = ___ZN11RadioModule25finishInitialization_syncEv_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_166;
  void aBlock[4] = this;
  void aBlock[5] = v5;
  v245 = v220;
  atomic_fetch_add_explicit(&v220->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  xpc_object_t v15 = _Block_copy(aBlock);
  xpc_object_t v16 = *((void *)this + 17);
  if (v16) {
    dispatch_retain(*((dispatch_object_t *)this + 17));
  }
  v246 = v15;
  dispatch_object_t object = v16;
  radio::CommandDriver::watchOperatingMode();
  if (object) {
    dispatch_release(object);
  }
  if (v246) {
    _Block_release(v246);
  }
  if (v245) {
    std::__shared_weak_count::__release_weak(v245);
  }
LABEL_31:
  xpc_object_t v17 = (const char *)(*(uint64_t (**)(RadioModule *))(*(void *)this + 16))(this);
  size_t v18 = strlen(v17);
  if (v18 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  xpc_object_t v19 = (void *)v18;
  if (v18 >= 0x17)
  {
    uint64_t v21 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v18 | 7) != 0x17) {
      uint64_t v21 = v18 | 7;
    }
    uint64_t v22 = v21 + 1;
    xpc_object_t v20 = (void **)operator new(v21 + 1);
    __dst[1] = v19;
    unint64_t v243 = v22 | 0x8000000000000000;
    __dst[0] = v20;
  }
  else
  {
    HIBYTE(v243) = v18;
    xpc_object_t v20 = __dst;
    if (!v18) {
      goto LABEL_39;
    }
  }
  memmove(v20, v17, (size_t)v19);
LABEL_39:
  *((unsigned char *)v19 + (void)v20) = 0;
  CFTypeRef cf = 0;
  AppleBasebandManager::create();
  long long v23 = v270;
  long long v270 = 0uLL;
  xpc_object_t v24 = (std::__shared_weak_count *)*((void *)this + 23);
  *((_OWORD *)this + 11) = v23;
  if (v24 && !atomic_fetch_add(&v24->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
    std::__shared_weak_count::__release_weak(v24);
    xpc_object_t v25 = (std::__shared_weak_count *)*((void *)&v270 + 1);
    if (!*((void *)&v270 + 1))
    {
LABEL_43:
      CFTypeRef v26 = cf;
      if (!cf) {
        goto LABEL_45;
      }
      goto LABEL_44;
    }
  }
  else
  {
    xpc_object_t v25 = (std::__shared_weak_count *)*((void *)&v270 + 1);
    if (!*((void *)&v270 + 1)) {
      goto LABEL_43;
    }
  }
  if (atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_43;
  }
  ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
  std::__shared_weak_count::__release_weak(v25);
  CFTypeRef v26 = cf;
  if (cf) {
LABEL_44:
  }
    CFRelease(v26);
LABEL_45:
  if (SHIBYTE(v243) < 0) {
    operator delete(__dst[0]);
  }
  xpc_object_t v27 = (const void *)*MEMORY[0x1E4F4CEF8];
  size_t v28 = strlen((const char *)*MEMORY[0x1E4F4CEF8]);
  if (v28 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  xpc_object_t v29 = (void *)v28;
  if (v28 >= 0x17)
  {
    uint64_t v31 = (v28 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v28 | 7) != 0x17) {
      uint64_t v31 = v28 | 7;
    }
    uint64_t v32 = v31 + 1;
    xpc_object_t v30 = operator new(v31 + 1);
    __p[1] = v29;
    unint64_t v240 = v32 | 0x8000000000000000;
    __p[0] = v30;
    goto LABEL_54;
  }
  HIBYTE(v240) = v28;
  xpc_object_t v30 = __p;
  if (v28) {
LABEL_54:
  }
    memmove(v30, v27, (size_t)v29);
  *((unsigned char *)v29 + (void)v30) = 0;
  v235[0] = MEMORY[0x1E4F143A8];
  uint64_t v33 = v14[408];
  v235[1] = v33;
  v235[2] = ___ZN11RadioModule25finishInitialization_syncEv_block_invoke_167;
  v235[3] = &__block_descriptor_tmp_172;
  v235[4] = this;
  v235[5] = v5;
  v236 = v220;
  atomic_fetch_add_explicit(&v220->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  xpc_object_t v34 = _Block_copy(v235);
  unsigned int v35 = *((void *)this + 17);
  if (v35) {
    dispatch_retain(*((dispatch_object_t *)this + 17));
  }
  v237 = v34;
  dispatch_object_t v238 = v35;
  AppleBasebandManager::setEventHandler();
  if (v238) {
    dispatch_release(v238);
  }
  if (v237) {
    _Block_release(v237);
  }
  if (SHIBYTE(v240) < 0) {
    operator delete(__p[0]);
  }
  unsigned int v36 = (const void *)*MEMORY[0x1E4F4CB10];
  size_t v37 = strlen((const char *)*MEMORY[0x1E4F4CB10]);
  if (v37 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  xpc_object_t v38 = (void *)v37;
  if (v37 >= 0x17)
  {
    uint64_t v40 = (v37 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v37 | 7) != 0x17) {
      uint64_t v40 = v37 | 7;
    }
    uint64_t v41 = v40 + 1;
    int64_t v39 = operator new(v40 + 1);
    v233[1] = v38;
    unint64_t v234 = v41 | 0x8000000000000000;
    v233[0] = v39;
    goto LABEL_70;
  }
  HIBYTE(v234) = v37;
  int64_t v39 = v233;
  if (v37) {
LABEL_70:
  }
    memmove(v39, v36, (size_t)v38);
  *((unsigned char *)v38 + (void)v39) = 0;
  v229[0] = MEMORY[0x1E4F143A8];
  v229[1] = v33;
  v229[2] = ___ZN11RadioModule25finishInitialization_syncEv_block_invoke_173;
  v229[3] = &__block_descriptor_tmp_176;
  v229[4] = this;
  v229[5] = v5;
  v230 = v220;
  atomic_fetch_add_explicit(&v220->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  uint64_t v42 = _Block_copy(v229);
  uint64_t v43 = *((void *)this + 17);
  if (v43) {
    dispatch_retain(*((dispatch_object_t *)this + 17));
  }
  v231 = v42;
  dispatch_object_t v232 = v43;
  AppleBasebandManager::setEventHandler();
  if (v232) {
    dispatch_release(v232);
  }
  if (v231) {
    _Block_release(v231);
  }
  if (SHIBYTE(v234) < 0) {
    operator delete(v233[0]);
  }
  AppleBasebandManager::eventsOn(*((AppleBasebandManager **)this + 22));
  xpc_object_t v44 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  uint64_t v45 = off_1EBBDD2A0;
  if (!off_1EBBDD2A0)
  {
    CommandDriverFactory::create_default_global((uint64_t *)&v270, v44);
    long long v46 = v270;
    long long v270 = 0uLL;
    dispatch_object_t v47 = (std::__shared_weak_count *)*(&off_1EBBDD2A0 + 1);
    off_1EBBDD2A0 = v46;
    if (v47 && !atomic_fetch_add(&v47->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
    std::string v48 = (std::__shared_weak_count *)*((void *)&v270 + 1);
    if (*((void *)&v270 + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v270 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
    uint64_t v45 = off_1EBBDD2A0;
  }
  v223 = (std::__shared_weak_count *)*(&off_1EBBDD2A0 + 1);
  if (*(&off_1EBBDD2A0 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDD2A0 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)v45 + 16))(&v224, v45);
  uint64_t v226 = 0;
  v227 = 0;
  if (v225 && (v227 = std::__shared_weak_count::lock(v225)) != 0)
  {
    uint64_t v49 = v224;
    uint64_t v226 = v224;
  }
  else
  {
    uint64_t v49 = 0;
  }
  uint64_t v250 = MEMORY[0x1E4F143A8];
  uint64_t v251 = 0x40000000;
  v252 = ___ZN3ctu20SharedSynchronizableI11RadioModuleE13connect_eventIN5boost8signals26signalIFvjENS5_19optional_last_valueIvEEiNSt3__14lessIiEENS4_8functionIS7_EENSD_IFvRKNS5_10connectionEjEEENS5_5mutexEEES1_vJjEEEDTcl7connectfp_cvNSA_10shared_ptrIS1_EE_EcvP16dispatch_queue_s_EcvPFT1_DpT2_ELi0EEERT_MT0_FSQ_SS_E_block_invoke;
  v253 = &__block_descriptor_tmp_278;
  v254 = v4;
  v255 = RadioModule::handleResetSPMI_sync;
  uint64_t v256 = 0;
  uint64_t v50 = _Block_copy(&v250);
  uint64_t v217 = v49;
  xpc_object_t v51 = (std::__shared_weak_count *)*((void *)this + 16);
  if (!v51 || (uint64_t v52 = *((void *)this + 15), (v53 = std::__shared_weak_count::lock(v51)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  int v54 = v53;
  uint64_t v55 = *((void *)this + 17);
  dispatch_object_t v257 = v55;
  if (v50) {
    xpc_object_t v56 = _Block_copy(v50);
  }
  else {
    xpc_object_t v56 = 0;
  }
  v258 = v56;
  dispatch_retain(v55);
  *(_OWORD *)v259 = 0u;
  long long v260 = 0u;
  dispatch_object_t v263 = v55;
  if (v56) {
    xpc_object_t v56 = _Block_copy(v56);
  }
  v264 = v56;
  dispatch_retain(v55);
  dispatch_object_t v265 = v55;
  v219 = v54;
  v215 = v50;
  v216 = this;
  uint64_t v221 = v52;
  if (!v56)
  {
    v266 = 0;
    dispatch_retain(v55);
    goto LABEL_109;
  }
  xpc_object_t v57 = _Block_copy(v56);
  v266 = v57;
  dispatch_retain(v55);
  if (!v57)
  {
LABEL_109:
    dispatch_retain(v55);
    unint64_t v267 = 0;
    goto LABEL_110;
  }
  size_t v58 = _Block_copy(v57);
  dispatch_retain(v55);
  unint64_t v267 = 0;
  if (!v58)
  {
LABEL_110:
    dispatch_retain(v55);
    size_t v58 = 0;
    char v64 = 1;
LABEL_111:
    dispatch_retain(v55);
    size_t v59 = 0;
    char v65 = 1;
LABEL_112:
    size_t v63 = v59;
    dispatch_retain(v55);
    v213 = 0;
    char v66 = 1;
LABEL_113:
    dispatch_retain(v55);
    uint64_t v61 = 0;
    unint64_t v268 = (unint64_t)v55;
    char v67 = 1;
    goto LABEL_114;
  }
  size_t v59 = _Block_copy(v58);
  dispatch_retain(v55);
  if (!v59)
  {
    char v64 = 0;
    goto LABEL_111;
  }
  uint64_t v60 = _Block_copy(v59);
  dispatch_retain(v55);
  if (!v60)
  {
    char v64 = 0;
    char v65 = 0;
    goto LABEL_112;
  }
  v213 = v60;
  uint64_t v61 = _Block_copy(v60);
  dispatch_retain(v55);
  if (!v61)
  {
    size_t v63 = v59;
    char v64 = 0;
    char v65 = 0;
    char v66 = 0;
    goto LABEL_113;
  }
  uint64_t v62 = _Block_copy(v61);
  dispatch_retain(v55);
  unint64_t v268 = (unint64_t)v55;
  if (v62)
  {
    size_t v63 = v59;
    char v64 = 0;
    char v65 = 0;
    char v66 = 0;
    char v67 = 0;
    v269 = _Block_copy(v62);
    dispatch_retain(v55);
    dispatch_release(v55);
    _Block_release(v62);
    goto LABEL_115;
  }
  size_t v63 = v59;
  char v64 = 0;
  char v65 = 0;
  char v66 = 0;
  char v67 = 0;
LABEL_114:
  v269 = 0;
  dispatch_retain(v55);
  dispatch_release(v55);
LABEL_115:
  dispatch_release(v55);
  if ((v67 & 1) == 0) {
    _Block_release(v61);
  }
  dispatch_release(v55);
  if ((v66 & 1) == 0) {
    _Block_release(v213);
  }
  unint64_t v267 = (unint64_t)boost::function1<void,unsigned int>::assign_to<ctu::DispatchSlot<dispatch::block<void({block_pointer})>>>(ctu::DispatchSlot<dispatch::block<void({block_pointer})>>)::stored_vtable;
  dispatch_release(v55);
  if ((v65 & 1) == 0) {
    _Block_release(v63);
  }
  dispatch_release(v55);
  if ((v64 & 1) == 0) {
    _Block_release(v58);
  }
  *((void *)&v271 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v271 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v270 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v270 = 0;
  boost::function1<void,unsigned int>::move_assign((uint64_t)&v270, (uint64_t *)&v267);
  boost::function1<void,unsigned int>::move_assign((uint64_t)&v267, (uint64_t *)&v260 + 1);
  boost::function1<void,unsigned int>::move_assign((uint64_t)&v260 + 8, (uint64_t *)&v270);
  if ((void)v270)
  {
    if ((v270 & 1) == 0)
    {
      size_t v68 = *(void (**)(char *, char *, uint64_t))(v270 & 0xFFFFFFFFFFFFFFFELL);
      if (v68) {
        v68((char *)&v270 + 8, (char *)&v270 + 8, 2);
      }
    }
  }
  if (v267)
  {
    if ((v267 & 1) == 0)
    {
      size_t v69 = *(void (**)(uint64_t, _WORD *, unsigned int))(v267 & 0xFFFFFFFFFFFFFFFELL);
      if (v69) {
        v69((uint64_t)&v268, &v268, 2u);
      }
    }
    unint64_t v267 = 0;
  }
  dispatch_release(v265);
  if (v266) {
    _Block_release(v266);
  }
  dispatch_release(v263);
  if (v264) {
    _Block_release(v264);
  }
  atomic_fetch_add_explicit(&v219->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  uint64_t v70 = operator new(0x18uLL);
  *uint64_t v70 = &unk_1F20F7AB0;
  v70[1] = v221;
  v70[2] = v219;
  atomic_fetch_add_explicit(&v219->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  uint64_t v71 = operator new(0x18uLL);
  void *v71 = &unk_1F20F7AB0;
  v71[1] = v221;
  v71[2] = v219;
  atomic_fetch_add_explicit(&v219->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  *((void *)&v270 + 1) = v71;
  LODWORD(v270) = 2;
  size_t v72 = v259[1];
  if (v259[1] >= (std::__shared_weak_count *)v260)
  {
    xpc_object_t v74 = (std::__shared_weak_count *)std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::__push_back_slow_path<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>((uint64_t *)v259, (uint64_t)&v270);
  }
  else
  {
    uint64_t v73 = operator new(0x18uLL);
    *uint64_t v73 = &unk_1F20F7AB0;
    v73[1] = v221;
    v73[2] = v219;
    atomic_fetch_add_explicit(&v219->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v72->__shared_owners_ = (uint64_t)v73;
    LODWORD(v72->__vftable) = 2;
    xpc_object_t v74 = v72 + 1;
  }
  v259[1] = v74;
  boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>::destroy_content((uint64_t)&v270);
  (*(void (**)(void *))(*v70 + 8))(v70);
  std::__shared_weak_count::__release_weak(v219);
  xpc_object_t v75 = *(uint64_t ***)(v217 + 136);
  *(void *)&long long v76 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v76 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v278 = v76;
  long long v279 = v76;
  long long v276 = v76;
  long long v277 = v76;
  long long v274 = v76;
  long long v275 = v76;
  long long v272 = v76;
  long long v273 = v76;
  long long v270 = v76;
  long long v271 = v76;
  size_t v77 = (pthread_mutex_t *)v75[3];
  unint64_t v280 = 10;
  v281 = &v270;
  uint64_t v282 = 0;
  v283 = v77;
  pthread_mutex_lock(v77);
  unint64_t v268 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v267 = 0xAAAAAAAAAAAAAAAALL;
  size_t v78 = (atomic_uint *)v75[1];
  v222 = (uint64_t ***)v75;
  if (!v78 || atomic_load_explicit(v78 + 2, memory_order_acquire) != 1)
  {
    xpc_object_t v82 = (uint64_t **)operator new(0x20uLL);
    int64_t v83 = *v75;
    uint64_t v84 = *v83;
    v218 = v82;
    size_t v85 = operator new(0x40uLL);
    unsigned int v86 = v85;
    *size_t v85 = v85;
    v85[1] = v85;
    v85[2] = 0;
    uint64_t v87 = *(void **)(v84 + 8);
    if (v87 != (void *)v84)
    {
      uint64_t v88 = 0;
      size_t v89 = v85;
      do
      {
        int v90 = operator new(0x20uLL);
        v90[2] = v87[2];
        uint64_t v91 = v87[3];
        v90[3] = v91;
        if (v91)
        {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v91 + 8), 1u, memory_order_relaxed);
          size_t v89 = (void *)*v86;
          uint64_t v88 = v86[2];
        }
        *int v90 = v89;
        v90[1] = v86;
        v89[1] = v90;
        void *v86 = v90;
        v86[2] = ++v88;
        uint64_t v87 = (void *)v87[1];
        size_t v89 = v90;
      }
      while (v87 != (void *)v84);
    }
    v214 = v83;
    v86[3] = 0;
    size_t v92 = (void **)(v86 + 3);
    v86[4] = 0;
    uint64_t v93 = v86 + 4;
    v86[5] = 0;
    *((unsigned char *)v86 + 48) = *(unsigned char *)(v84 + 48);
    v86[3] = v86 + 4;
    uint64_t v94 = *(void **)(v84 + 24);
    uint64_t v95 = (void *)(v84 + 32);
    if (v94 == (void *)(v84 + 32))
    {
LABEL_149:
      *((unsigned char *)v86 + 56) = *(unsigned char *)(v84 + 56);
      std::string v96 = *(void **)(v84 + 24);
      if (v96 != v95)
      {
        xpc_object_t v97 = (void *)v86[3];
        uint64_t v98 = v86[1];
        do
        {
          v97[6] = v98;
          uint64_t v99 = v84;
          if (v96 != v95) {
            uint64_t v99 = v96[6];
          }
          __int16 v100 = (void *)v96[1];
          uint64_t v101 = v100;
          uint64_t v102 = v96;
          if (v100)
          {
            do
            {
              uint64_t v103 = v101;
              uint64_t v101 = (void *)*v101;
            }
            while (v101);
          }
          else
          {
            do
            {
              uint64_t v103 = (void *)v102[2];
              BOOL v148 = *v103 == (void)v102;
              uint64_t v102 = v103;
            }
            while (!v148);
          }
          uint64_t v104 = v84;
          if (v103 != v95) {
            uint64_t v104 = v103[6];
          }
          while (v99 != v104)
          {
            uint64_t v99 = *(void *)(v99 + 8);
            uint64_t v98 = *(void *)(v98 + 8);
          }
          if (v100)
          {
            do
            {
              uint64_t v105 = v100;
              __int16 v100 = (void *)*v100;
            }
            while (v100);
          }
          else
          {
            do
            {
              uint64_t v105 = (void *)v96[2];
              BOOL v148 = *v105 == (void)v96;
              std::string v96 = v105;
            }
            while (!v148);
          }
          size_t v106 = (void *)v97[1];
          if (v106)
          {
            do
            {
              size_t v107 = v106;
              size_t v106 = (void *)*v106;
            }
            while (v106);
          }
          else
          {
            do
            {
              size_t v107 = (void *)v97[2];
              BOOL v148 = *v107 == (void)v97;
              xpc_object_t v97 = v107;
            }
            while (!v148);
          }
          std::string v96 = v105;
          xpc_object_t v97 = v107;
        }
        while (v105 != v95);
      }
      std::__shared_weak_count *v218 = v86;
      v218[1] = 0;
      BOOL v127 = (uint64_t *)operator new(0x18uLL);
      xpc_object_t v75 = (uint64_t **)v222;
      v127[1] = 0x100000001;
      *BOOL v127 = (uint64_t)&unk_1F20F78F8;
      v127[2] = (uint64_t)v86;
      v218[1] = v127;
      v218[2] = (uint64_t *)v214[2];
      uint64_t v128 = v214[3];
      v218[3] = (uint64_t *)v128;
      if (v128) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v128 + 8), 1u, memory_order_relaxed);
      }
      size_t v129 = (uint64_t **)operator new(0x18uLL);
      v129[1] = (uint64_t *)0x100000001;
      _WORD *v129 = (uint64_t *)&unk_1F20F7898;
      v129[2] = (uint64_t *)v218;
      uint64_t v130 = (atomic_uint *)v222[1];
      const void *v222 = v218;
      v222[1] = v129;
      if (v130)
      {
        if (atomic_fetch_add(v130 + 2, 0xFFFFFFFF) == 1)
        {
          (*(void (**)(atomic_uint *))(*(void *)v130 + 16))(v130);
          if (atomic_fetch_add(v130 + 3, 0xFFFFFFFF) == 1) {
            (*(void (**)(atomic_uint *))(*(void *)v130 + 24))(v130);
          }
        }
      }
      int v81 = 0;
      unint64_t v79 = **v222;
LABEL_228:
      uint64_t v80 = (uint64_t *)v79[1];
      if (v79 == v80) {
        goto LABEL_328;
      }
      goto LABEL_229;
    }
    while (1)
    {
      int v108 = *((_DWORD *)v94 + 8);
      uint64_t v109 = (void *)*v93;
      uint64_t v110 = v86 + 4;
      if (*v92 != v93)
      {
        uint64_t v111 = (void *)*v93;
        uint64_t v112 = v86 + 4;
        if (v109)
        {
          do
          {
            uint64_t v110 = v111;
            uint64_t v111 = (void *)v111[1];
          }
          while (v111);
        }
        else
        {
          do
          {
            uint64_t v110 = (void *)v112[2];
            BOOL v148 = *v110 == (void)v112;
            uint64_t v112 = v110;
          }
          while (v148);
        }
        int v113 = *((_DWORD *)v94 + 10);
        int v114 = *((_DWORD *)v110 + 8);
        if (v114 == v108)
        {
          if (v108 != 1) {
            goto LABEL_194;
          }
          if (*((_DWORD *)v110 + 10) >= v113)
          {
            size_t v115 = (void *)*v93;
            int v116 = v86 + 4;
            uint64_t v117 = v86 + 4;
            if (v109) {
              goto LABEL_198;
            }
LABEL_205:
            size_t v121 = operator new(0x38uLL);
            long long v122 = *((_OWORD *)v94 + 2);
            v121[6] = v94[6];
            *((_OWORD *)v121 + 2) = v122;
            *size_t v121 = 0;
            v121[1] = 0;
            v121[2] = v117;
            *int v116 = v121;
            unint64_t v123 = (void *)**v92;
            if (v123)
            {
              *size_t v92 = v123;
              size_t v121 = (void *)*v116;
            }
            std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v86[4], v121);
            ++v86[5];
            goto LABEL_208;
          }
        }
        else if (v114 >= v108)
        {
LABEL_194:
          int v116 = v86 + 4;
          uint64_t v117 = v86 + 4;
          if (!v109) {
            goto LABEL_205;
          }
          size_t v115 = (void *)*v93;
          if (v108 != 1)
          {
            int v118 = *((_DWORD *)v109 + 8);
            uint64_t v117 = (void *)*v93;
            while (v108 != v118)
            {
              if (v108 < v118)
              {
                uint64_t v126 = *v117;
                int v116 = v117;
                if (!*v117) {
                  goto LABEL_205;
                }
              }
              else
              {
                if (v118 >= v108) {
                  goto LABEL_208;
                }
                uint64_t v126 = v117[1];
                if (!v126) {
                  goto LABEL_204;
                }
              }
              int v118 = *(_DWORD *)(v126 + 32);
              uint64_t v117 = (void *)v126;
            }
            goto LABEL_208;
          }
          while (1)
          {
LABEL_198:
            uint64_t v117 = v115;
            int v119 = *((_DWORD *)v115 + 8);
            if (v119 == 1)
            {
              int v120 = *((_DWORD *)v115 + 10);
              if (v120 > v113) {
                goto LABEL_197;
              }
              if (v120 >= v113) {
                goto LABEL_208;
              }
            }
            else if (v119 > 1)
            {
LABEL_197:
              size_t v115 = (void *)*v115;
              int v116 = v117;
              if (!*v117) {
                goto LABEL_205;
              }
              continue;
            }
            size_t v115 = (void *)v115[1];
            if (!v115)
            {
LABEL_204:
              int v116 = v117 + 1;
              goto LABEL_205;
            }
          }
        }
      }
      if (v109) {
        uint64_t v117 = v110;
      }
      else {
        uint64_t v117 = v86 + 4;
      }
      if (v109) {
        int v116 = v110 + 1;
      }
      else {
        int v116 = v86 + 4;
      }
      if (!*v116) {
        goto LABEL_205;
      }
LABEL_208:
      uint64_t v124 = (void *)v94[1];
      if (v124)
      {
        do
        {
          uint64_t v125 = v124;
          uint64_t v124 = (void *)*v124;
        }
        while (v124);
      }
      else
      {
        do
        {
          uint64_t v125 = (void *)v94[2];
          BOOL v148 = *v125 == (void)v94;
          uint64_t v94 = v125;
        }
        while (!v148);
      }
      uint64_t v94 = v125;
      if (v125 == v95) {
        goto LABEL_149;
      }
    }
  }
  unint64_t v79 = (uint64_t *)**v75;
  uint64_t v80 = v75[2];
  int v81 = 2;
  if (v80 == v79) {
    goto LABEL_228;
  }
LABEL_229:
  int v131 = 0;
  unsigned int v132 = v81 - 1;
  do
  {
    uint64_t v135 = v80[2];
    size_t v136 = *(uint64_t **)(v135 + 32);
    if (v136)
    {
      for (uint64_t i = *v136; i != v136[1]; i += 24)
      {
        if ((*(_DWORD *)i ^ (*(int *)i >> 31)) > 1)
        {
          if ((*(uint64_t (**)(void))(**(void **)(i + 8) + 24))(*(void *)(i + 8))) {
            goto LABEL_246;
          }
        }
        else
        {
          uint64_t v138 = *(void *)(i + 16);
          if (!v138 || !atomic_load_explicit((atomic_uint *volatile)(v138 + 8), memory_order_acquire))
          {
LABEL_246:
            if (*(unsigned char *)(v135 + 24))
            {
              *(unsigned char *)(v135 + 24) = 0;
              boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::mutex>((_DWORD *)v135, &v270);
            }
            break;
          }
        }
      }
    }
    uint64_t v133 = v80[2];
    if (*(unsigned char *)(v133 + 24))
    {
      unint64_t v79 = (uint64_t *)v80[1];
      goto LABEL_232;
    }
    uint64_t v139 = **v75;
    unint64_t v140 = (uint64_t **)(v139 + 32);
    uint64_t v141 = *(void *)(v139 + 32);
    if (!v141)
    {
      if (*(uint64_t **)(v139 + 80) != v80) {
        goto LABEL_323;
      }
      std::string::size_type v163 = (uint64_t *)v80[1];
      size_t v165 = (uint64_t **)(v139 + 32);
      size_t v144 = (uint64_t *)(v139 + 32);
      if (v163 != (uint64_t *)v139) {
        goto LABEL_319;
      }
LABEL_301:
      uint64_t v168 = (uint64_t *)v144[1];
      std::string::size_type v169 = v144;
      if (v168)
      {
        do
        {
          std::string::size_type v170 = v168;
          uint64_t v168 = (uint64_t *)*v168;
        }
        while (v168);
      }
      else
      {
        do
        {
          std::string::size_type v170 = (uint64_t *)v169[2];
          BOOL v148 = *v170 == (void)v169;
          std::string::size_type v169 = v170;
        }
        while (!v148);
      }
      if (*(uint64_t **)(v139 + 24) == v144) {
        *(void *)(v139 + 24) = v170;
      }
      --*(void *)(v139 + 40);
      std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v141, v144);
      operator delete(v144);
      goto LABEL_323;
    }
    int v142 = *(_DWORD *)(v133 + 64);
    int v143 = *(_DWORD *)(v133 + 72);
    size_t v144 = (uint64_t *)(v139 + 32);
    uint64_t v145 = *(void *)(v139 + 32);
    if (v142 == 1)
    {
      size_t v144 = (uint64_t *)(v139 + 32);
      uint64_t v146 = *(void *)(v139 + 32);
      do
      {
        while (1)
        {
          int v152 = *(_DWORD *)(v146 + 32);
          BOOL v153 = v152 < 1;
          if (v152 == 1) {
            BOOL v153 = *(_DWORD *)(v146 + 40) < v143;
          }
          if (!v153) {
            break;
          }
          uint64_t v146 = *(void *)(v146 + 8);
          if (!v146) {
            goto LABEL_267;
          }
        }
        size_t v144 = (uint64_t *)v146;
        uint64_t v146 = *(void *)v146;
      }
      while (v146);
    }
    else
    {
      do
      {
        int v147 = *(_DWORD *)(v145 + 32);
        BOOL v148 = v147 == v142;
        BOOL v149 = v147 < v142;
        if (v147 >= v142) {
          size_t v150 = (uint64_t *)v145;
        }
        else {
          size_t v150 = (uint64_t *)(v145 + 8);
        }
        if (v149) {
          v151 = v144;
        }
        else {
          v151 = (uint64_t *)v145;
        }
        if (v148)
        {
          size_t v150 = (uint64_t *)v145;
          size_t v144 = (uint64_t *)v145;
        }
        else
        {
          size_t v144 = v151;
        }
        uint64_t v145 = *v150;
      }
      while (*v150);
    }
LABEL_267:
    if ((uint64_t *)v144[6] != v80) {
      goto LABEL_323;
    }
    long long v154 = (uint64_t **)(v139 + 32);
    v155 = *(uint64_t ***)(v139 + 32);
    if (v142 == 1)
    {
      while (1)
      {
        int v161 = *((_DWORD *)v155 + 8);
        if (v161 == 1)
        {
          if (v143 < *((_DWORD *)v155 + 10)) {
            goto LABEL_284;
          }
LABEL_279:
          v155 = (uint64_t **)v155[1];
          if (!v155) {
            goto LABEL_285;
          }
        }
        else
        {
          if (v161 <= 1) {
            goto LABEL_279;
          }
LABEL_284:
          long long v154 = v155;
          v155 = (uint64_t **)*v155;
          if (!v155) {
            goto LABEL_285;
          }
        }
      }
    }
    do
    {
      int v156 = *((_DWORD *)v155 + 8);
      size_t v157 = (uint64_t ***)(v155 + 1);
      BOOL v158 = v142 == v156;
      BOOL v159 = v142 < v156;
      if (v142 >= v156) {
        uint64_t v160 = (uint64_t ***)(v155 + 1);
      }
      else {
        uint64_t v160 = (uint64_t ***)v155;
      }
      if (!v159) {
        v155 = v154;
      }
      if (v158) {
        uint64_t v160 = v157;
      }
      else {
        long long v154 = v155;
      }
      v155 = *v160;
    }
    while (*v160);
LABEL_285:
    v162 = (uint64_t *)v139;
    if (v154 != v140) {
      v162 = v154[6];
    }
    std::string::size_type v163 = (uint64_t *)v80[1];
    if (v163 == v162) {
      goto LABEL_301;
    }
    if (v142 == 1)
    {
      while (1)
      {
        while (1)
        {
          size_t v165 = (uint64_t **)v141;
          int v166 = *(_DWORD *)(v141 + 32);
          if (v166 == 1) {
            break;
          }
          if (v166 <= 1) {
            goto LABEL_297;
          }
LABEL_291:
          uint64_t v141 = *(void *)v141;
          if (!*v165)
          {
            unint64_t v140 = v165;
            goto LABEL_319;
          }
        }
        int v167 = *(_DWORD *)(v141 + 40);
        if (v167 > v143) {
          goto LABEL_291;
        }
        if (v167 >= v143)
        {
          *(void *)(v141 + 48) = v163;
          goto LABEL_323;
        }
LABEL_297:
        uint64_t v141 = *(void *)(v141 + 8);
        if (!v141)
        {
          unint64_t v140 = v165 + 1;
          goto LABEL_319;
        }
      }
    }
    int v164 = *(_DWORD *)(v141 + 32);
    if (v142 == v164) {
      goto LABEL_322;
    }
    while (v142 >= v164)
    {
      if (v164 >= v142) {
        goto LABEL_322;
      }
      uint64_t v171 = *(void *)(v141 + 8);
      if (!v171)
      {
        unint64_t v140 = (uint64_t **)(v141 + 8);
        goto LABEL_318;
      }
LABEL_310:
      int v164 = *(_DWORD *)(v171 + 32);
      uint64_t v141 = v171;
      if (v142 == v164)
      {
        *(void *)(v171 + 48) = v163;
        goto LABEL_323;
      }
    }
    uint64_t v171 = *(void *)v141;
    if (*(void *)v141) {
      goto LABEL_310;
    }
    unint64_t v140 = (uint64_t **)v141;
LABEL_318:
    size_t v165 = (uint64_t **)v141;
LABEL_319:
    uint64_t v141 = (uint64_t)operator new(0x38uLL);
    uint64_t v172 = *(void *)(v133 + 64);
    *(_DWORD *)(v141 + 40) = *(_DWORD *)(v133 + 72);
    *(void *)(v141 + 32) = v172;
    *(void *)(v141 + 48) = 0;
    *(void *)uint64_t v141 = 0;
    *(void *)(v141 + 8) = 0;
    *(void *)(v141 + 16) = v165;
    *unint64_t v140 = (uint64_t *)v141;
    uint64_t v173 = **(void **)(v139 + 24);
    uint64_t v174 = (uint64_t *)v141;
    if (v173)
    {
      *(void *)(v139 + 24) = v173;
      uint64_t v174 = *v140;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v139 + 32), v174);
    ++*(void *)(v139 + 40);
LABEL_322:
    *(void *)(v141 + 48) = v163;
LABEL_323:
    uint64_t v175 = *v80;
    unint64_t v79 = (uint64_t *)v80[1];
    *(void *)(v175 + 8) = v79;
    *(void *)v80[1] = v175;
    --*(void *)(v139 + 16);
    v176 = (atomic_uint *)v80[3];
    if (v176)
    {
      if (atomic_fetch_add(v176 + 2, 0xFFFFFFFF) == 1)
      {
        (*(void (**)(atomic_uint *))(*(void *)v176 + 16))(v176);
        if (atomic_fetch_add(v176 + 3, 0xFFFFFFFF) == 1) {
          (*(void (**)(atomic_uint *))(*(void *)v176 + 24))(v176);
        }
      }
    }
    operator delete(v80);
    xpc_object_t v75 = (uint64_t **)v222;
LABEL_232:
    BOOL v134 = v79 != (uint64_t *)**v75 && v132 >= ++v131;
    uint64_t v80 = v79;
  }
  while (v134);
LABEL_328:
  v75[2] = v79;
  v177 = operator new(0x50uLL);
  v177[1] = 0;
  v177[2] = 0;
  *((unsigned char *)v177 + 24) = 1;
  *((_DWORD *)v177 + 7) = 1;
  void *v177 = &unk_1F20F7958;
  size_t v178 = operator new(0x38uLL);
  std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::vector(v178, (uint64_t *)v259);
  v178[3] = 0;
  uint64_t v179 = *((void *)&v260 + 1);
  if (*((void *)&v260 + 1))
  {
    v178[3] = *((void *)&v260 + 1);
    if (v179)
    {
      *((_OWORD *)v178 + 2) = v261;
      v178[6] = v262;
    }
    else
    {
      (*(void (**)(long long *, void *, void))(v179 & 0xFFFFFFFFFFFFFFFELL))(&v261, v178 + 4, 0);
    }
  }
  v177[4] = v178;
  v177[5] = 0;
  uint64_t v180 = operator new(0x18uLL);
  v180[1] = 0x100000001;
  *uint64_t v180 = &unk_1F20F79B0;
  v180[2] = v178;
  v177[5] = v180;
  v177[6] = v75[3];
  uint64_t v181 = (atomic_uint *)v75[4];
  v177[7] = v181;
  if (v181) {
    atomic_fetch_add_explicit(v181 + 2, 1u, memory_order_relaxed);
  }
  *((_DWORD *)v177 + 16) = 0;
  *((unsigned char *)v177 + 68) = 0;
  unint64_t v267 = (unint64_t)v177;
  uint64_t v182 = operator new(0x18uLL);
  *((void *)v182 + 1) = 0x100000001;
  *(void *)uint64_t v182 = &unk_1F20F7A10;
  *((void *)v182 + 2) = v177;
  unint64_t v268 = (unint64_t)v182;
  v183 = (uint64_t *)**v75;
  xpc_object_t v184 = operator new(0x20uLL);
  xpc_object_t v185 = v183 + 4;
  v184[2] = v177;
  v184[3] = v182;
  atomic_fetch_add_explicit((atomic_uint *volatile)v182 + 2, 1u, memory_order_relaxed);
  uint64_t v186 = *v183;
  *(void *)(v186 + 8) = v184;
  *xpc_object_t v184 = v186;
  uint64_t *v183 = (uint64_t)v184;
  v184[1] = v183;
  ++v183[2];
  std::string v187 = (uint64_t *)v183[4];
  if (v187)
  {
    v188 = v183 + 4;
    uint64_t v189 = v183[4];
    do
    {
      int v190 = *(_DWORD *)(v189 + 32);
      BOOL v191 = v190 == 2;
      BOOL v192 = v190 < 2;
      if (v190 >= 2) {
        v193 = (uint64_t *)v189;
      }
      else {
        v193 = (uint64_t *)(v189 + 8);
      }
      if (!v192) {
        v188 = (uint64_t *)v189;
      }
      if (v191)
      {
        v193 = (uint64_t *)v189;
        v188 = (uint64_t *)v189;
      }
      uint64_t v189 = *v193;
    }
    while (*v193);
    if (v188 == v185 || *((_DWORD *)v188 + 8) != 2)
    {
      int v195 = *((_DWORD *)v187 + 8);
      while (v195 != 2)
      {
        if (v195 < 3)
        {
          std::string v196 = (uint64_t *)v187[1];
          if (!v196)
          {
            xpc_object_t v185 = v187 + 1;
            goto LABEL_355;
          }
        }
        else
        {
          std::string v196 = (uint64_t *)*v187;
          xpc_object_t v185 = v187;
          if (!*v187) {
            goto LABEL_355;
          }
        }
        int v195 = *((_DWORD *)v196 + 8);
        std::string v187 = v196;
      }
    }
    *((_DWORD *)v177 + 16) = 2;
    *(void *)((char *)v177 + 68) = 0xAAAAAAAAAAAAAA00;
    v194 = v216;
LABEL_358:
    atomic_fetch_add_explicit((atomic_uint *volatile)v182 + 3, 1u, memory_order_relaxed);
    *(void *)&long long v228 = v177;
    *((void *)&v228 + 1) = v182;
    atomic_fetch_add_explicit((atomic_uint *volatile)v182 + 3, 1u, memory_order_relaxed);
    if (atomic_fetch_add((atomic_uint *volatile)v182 + 3, 0xFFFFFFFF) == 1) {
      (*(void (**)(void *))(*(void *)v182 + 24))(v182);
    }
    uint64_t v199 = (atomic_uint *)v268;
    if (v268) {
      goto LABEL_361;
    }
  }
  else
  {
    std::string v187 = v183 + 4;
LABEL_355:
    v197 = operator new(0x38uLL);
    v197[4] = 0xAAAAAA0000000002;
    *((_DWORD *)v197 + 10) = -1431655766;
    v197[6] = v184;
    void *v197 = 0;
    v197[1] = 0;
    v197[2] = v187;
    *xpc_object_t v185 = (uint64_t)v197;
    uint64_t v198 = *(void *)v183[3];
    if (v198)
    {
      v183[3] = v198;
      v197 = (void *)*v185;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v183[4], v197);
    ++v183[5];
    v177 = (void *)v267;
    uint64_t v182 = (void *)v268;
    *(_DWORD *)(v267 + 64) = 2;
    *(void *)((char *)v177 + 68) = 0xAAAAAAAAAAAAAA00;
    v194 = v216;
    if (v182) {
      goto LABEL_358;
    }
    long long v228 = (unint64_t)v177;
    uint64_t v199 = (atomic_uint *)v268;
    if (v268)
    {
LABEL_361:
      if (atomic_fetch_add(v199 + 2, 0xFFFFFFFF) == 1)
      {
        (*(void (**)(atomic_uint *))(*(void *)v199 + 16))(v199);
        if (atomic_fetch_add(v199 + 3, 0xFFFFFFFF) == 1) {
          (*(void (**)(atomic_uint *))(*(void *)v199 + 24))(v199);
        }
      }
    }
  }
  pthread_mutex_unlock(v283);
  v200 = (char *)v281;
  if (v281)
  {
    v201 = v194;
    if (v282 - 1 >= 0)
    {
      uint64_t v202 = (char *)v281 + 16 * v282;
      do
      {
        uint64_t v203 = (atomic_uint *)*((void *)v202 - 1);
        if (v203)
        {
          if (atomic_fetch_add(v203 + 2, 0xFFFFFFFF) == 1)
          {
            (*(void (**)(atomic_uint *))(*(void *)v203 + 16))(v203);
            if (atomic_fetch_add(v203 + 3, 0xFFFFFFFF) == 1) {
              (*(void (**)(atomic_uint *))(*(void *)v203 + 24))(v203);
            }
          }
        }
        v202 -= 16;
      }
      while (v202 > v200);
    }
    v194 = v201;
    if (v280 >= 0xB) {
      operator delete(v281);
    }
  }
  if (*((void *)&v260 + 1))
  {
    if ((BYTE8(v260) & 1) == 0)
    {
      v204 = *(void (**)(long long *, long long *, uint64_t))(*((void *)&v260 + 1) & 0xFFFFFFFFFFFFFFFELL);
      if (v204) {
        v204(&v261, &v261, 2);
      }
    }
    *((void *)&v260 + 1) = 0;
  }
  v205 = v259[0];
  if (v259[0])
  {
    v206 = v259[1];
    v207 = v259[0];
    if (v259[1] != v259[0])
    {
      do
        boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>::destroy_content((uint64_t)--v206);
      while (v206 != v205);
      v207 = v259[0];
    }
    v259[1] = v205;
    operator delete(v207);
  }
  dispatch_release(v257);
  if (v258) {
    _Block_release(v258);
  }
  if (atomic_fetch_add(&v219->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    v208 = v215;
    if (!v215) {
      goto LABEL_398;
    }
LABEL_397:
    _Block_release(v208);
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v219->__on_zero_shared)(v219);
    std::__shared_weak_count::__release_weak(v219);
    v208 = v215;
    if (v215) {
      goto LABEL_397;
    }
  }
LABEL_398:
  v209 = operator new(0x20uLL);
  v209[1] = v228;
  long long v228 = 0uLL;
  uint64_t v210 = *((void *)v194 + 41);
  *(void *)v209 = v210;
  *((void *)v209 + 1) = (char *)v194 + 328;
  *(void *)(v210 + 8) = v209;
  *((void *)v194 + 41) = v209;
  ++*((void *)v194 + 43);
  v211 = v227;
  if (v227 && !atomic_fetch_add(&v227->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v211->__on_zero_shared)(v211);
    std::__shared_weak_count::__release_weak(v211);
  }
  if (v225) {
    std::__shared_weak_count::__release_weak(v225);
  }
  if (v223 && !atomic_fetch_add(&v223->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v223->__on_zero_shared)(v223);
    std::__shared_weak_count::__release_weak(v223);
  }
  if (v230) {
    std::__shared_weak_count::__release_weak(v230);
  }
  if (v236) {
    std::__shared_weak_count::__release_weak(v236);
  }
  v212 = v249;
  if (v249 && !atomic_fetch_add(&v249->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v212->__on_zero_shared)(v212);
    std::__shared_weak_count::__release_weak(v212);
  }
  std::__shared_weak_count::__release_weak(v220);
}

void sub_1C58422B4(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void sub_1C58422C0(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_1C58422CC(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_1C58422D8(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_1C58422E4(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_1C58422F0(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_1C58422FC(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_1C5842308(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_1C5842314(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a2)
  {
    uint64_t v73 = *v72;
    if (*v72)
    {
      uint64_t v74 = (uint64_t)v72[1];
      xpc_object_t v75 = *v72;
      if ((void *)v74 != v73)
      {
        do
        {
          v74 -= 24;
          boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>::destroy_content(v74);
        }
        while ((void *)v74 != v73);
        xpc_object_t v75 = *v72;
      }
      v72[1] = v73;
      operator delete(v75);
    }
    operator delete(v72);
    boost::signals2::detail::connection_body_base::~connection_body_base(v71);
    operator delete(v71);
    boost::signals2::detail::garbage_collecting_lock<boost::signals2::mutex>::~garbage_collecting_lock((uint64_t)&STACK[0x280]);
    boost::signals2::slot<void (),boost::function<void ()>>::~slot((void **)&STACK[0x200]);
    ctu::DispatchSlot<dispatch::block<void({block_pointer})>>::~DispatchSlot((uint64_t)&a71);
    JUMPOUT(0x1C5842E44);
  }
  _Unwind_Resume(a1);
}

void sub_1C584235C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_1C5842368(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,std::__shared_weak_count *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,std::__shared_weak_count *a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,char a62)
{
  if (a31) {
    std::__shared_weak_count::__release_weak(a31);
  }
  if (a43) {
    std::__shared_weak_count::__release_weak(a43);
  }
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a62);
  std::__shared_weak_count::__release_weak(a15);
  _Unwind_Resume(a1);
}

void sub_1C584237C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_1C5842388()
{
}

void sub_1C584239C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_1C58423A8(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_1C58423B4(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_1C58423C0(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_1C58423CC(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_1C58423D8(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a2)
  {
    boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>::destroy_content((uint64_t)&STACK[0x280]);
    (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
    std::__shared_weak_count::__release_weak(a14);
    JUMPOUT(0x1C5842E34);
  }
  _Unwind_Resume(a1);
}

void sub_1C58423F4(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_1C5842400(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_1C584240C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_1C5842418(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_1C5842424(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_1C5842430(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_1C584243C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_1C5842448(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_1C5842454(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_1C5842460(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_1C584246C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_1C5842478(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_1C5842484(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_1C5842490(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_1C584249C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_1C58424A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,char a60,uint64_t a61,uint64_t a62)
{
  if (!a59)
  {
    std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a62);
    std::__shared_weak_count::__release_weak(a15);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1C5842C20);
}

void sub_1C58424C0(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_1C58424CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    xpc_object_t v13 = (atomic_uint *)__p[3];
    if (v13)
    {
      if (atomic_fetch_add(v13 + 2, 0xFFFFFFFF) == 1)
      {
        (*(void (**)(atomic_uint *))(*(void *)v13 + 16))(v13);
        if (atomic_fetch_add(v13 + 3, 0xFFFFFFFF) == 1) {
          (*(void (**)(atomic_uint *))(*(void *)v13 + 24))(v13);
        }
      }
    }
    uint64_t v14 = (atomic_uint *)__p[1];
    if (v14 && atomic_fetch_add(v14 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v14 + 16))(v14);
      if (atomic_fetch_add(v14 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v14 + 24))(v14);
      }
    }
    operator delete(__p);
    __cxa_rethrow();
  }
  _Unwind_Resume(a1);
}

void sub_1C58425F4(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_1C5842600(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_1C584260C(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a2)
  {
    __cxa_end_catch();
    boost::signals2::detail::garbage_collecting_lock<boost::signals2::mutex>::~garbage_collecting_lock((uint64_t)&STACK[0x280]);
    boost::signals2::slot<void (),boost::function<void ()>>::~slot((void **)&STACK[0x200]);
    ctu::DispatchSlot<dispatch::block<void({block_pointer})>>::~DispatchSlot((uint64_t)&a71);
    JUMPOUT(0x1C5842E44);
  }
  _Unwind_Resume(a1);
}

void sub_1C584261C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_1C5842628(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    std::__tree<std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>>>::destroy((void *)v2[4]);
    if (v2[2])
    {
      uint64_t v3 = (void *)*v2;
      size_t v4 = (uint64_t *)v2[1];
      uint64_t v5 = *v4;
      *(void *)(v5 + 8) = *(void *)(*v2 + 8);
      *(void *)v3[1] = v5;
      v2[2] = 0;
      if (v4 != v2)
      {
        do
        {
          uint64_t v6 = (uint64_t *)v4[1];
          int v7 = (atomic_uint *)v4[3];
          if (v7 && atomic_fetch_add(v7 + 2, 0xFFFFFFFF) == 1)
          {
            (*(void (**)(atomic_uint *))(*(void *)v7 + 16))(v7);
            if (atomic_fetch_add(v7 + 3, 0xFFFFFFFF) == 1) {
              (*(void (**)(atomic_uint *))(*(void *)v7 + 24))(v7);
            }
          }
          operator delete(v4);
          size_t v4 = v6;
        }
        while (v6 != v2);
      }
    }
    operator delete(v2);
    __cxa_rethrow();
  }
  _Unwind_Resume(a1);
}

void sub_1C5842718(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_1C5842724(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  if (a2)
  {
    __cxa_end_catch();
    xpc_object_t v13 = (atomic_uint *)a13[1];
    if (v13)
    {
      if (atomic_fetch_add(v13 + 2, 0xFFFFFFFF) == 1)
      {
        (*(void (**)(atomic_uint *))(*(void *)v13 + 16))(v13);
        if (atomic_fetch_add(v13 + 3, 0xFFFFFFFF) == 1) {
          (*(void (**)(atomic_uint *))(*(void *)v13 + 24))(v13);
        }
      }
    }
    operator delete(a13);
    JUMPOUT(0x1C5842E2CLL);
  }
  _Unwind_Resume(a1);
}

void sub_1C58427B8(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_1C58427C4(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_1C58427D0(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  if (a2)
  {
    operator delete(a13);
    JUMPOUT(0x1C5842E2CLL);
  }
  _Unwind_Resume(a1);
}

void sub_1C58427DC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, std::__shared_weak_count *a20,char a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,std::__shared_weak_count *a31)
{
  if (a20) {
    std::__shared_weak_count::__release_weak(a20);
  }
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  if (a31) {
    std::__shared_weak_count::__release_weak(a31);
  }
  JUMPOUT(0x1C5842C18);
}

void sub_1C5842800(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_1C584280C(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    __cxa_rethrow();
  }
  _Unwind_Resume(a1);
}

void sub_1C584284C(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a2)
  {
    __cxa_end_catch();
    boost::signals2::detail::garbage_collecting_lock<boost::signals2::mutex>::~garbage_collecting_lock((uint64_t)&STACK[0x280]);
    boost::signals2::slot<void (),boost::function<void ()>>::~slot((void **)&STACK[0x200]);
    ctu::DispatchSlot<dispatch::block<void({block_pointer})>>::~DispatchSlot((uint64_t)&a71);
    JUMPOUT(0x1C5842E44);
  }
  _Unwind_Resume(a1);
}

void sub_1C584285C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_1C5842868(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    unint64_t v14 = (unint64_t)v13[3];
    if (v14)
    {
      if ((v14 & 1) == 0)
      {
        xpc_object_t v15 = *(void (**)(void **, void **, uint64_t))(v14 & 0xFFFFFFFFFFFFFFFELL);
        if (v15) {
          v15(v13 + 4, v13 + 4, 2);
        }
      }
      v13[3] = 0;
    }
    xpc_object_t v16 = *v13;
    if (*v13)
    {
      uint64_t v17 = (uint64_t)v13[1];
      size_t v18 = *v13;
      if ((void *)v17 != v16)
      {
        do
        {
          v17 -= 24;
          boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>::destroy_content(v17);
        }
        while ((void *)v17 != v16);
        size_t v18 = *v13;
      }
      v13[1] = v16;
      operator delete(v18);
    }
    operator delete(v13);
    __cxa_rethrow();
  }
  _Unwind_Resume(a1);
}

void sub_1C58428F0(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_1C58428FC(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, boost::signals2::detail::connection_body_base *a13)
{
  if (a2)
  {
    __cxa_end_catch();
    xpc_object_t v13 = (atomic_uint *)*((void *)a13 + 5);
    if (v13)
    {
      if (atomic_fetch_add(v13 + 2, 0xFFFFFFFF) == 1)
      {
        (*(void (**)(atomic_uint *))(*(void *)v13 + 16))(v13);
        if (atomic_fetch_add(v13 + 3, 0xFFFFFFFF) == 1) {
          (*(void (**)(atomic_uint *))(*(void *)v13 + 24))(v13);
        }
      }
    }
    boost::signals2::detail::connection_body_base::~connection_body_base(a13);
    JUMPOUT(0x1C5842D68);
  }
  _Unwind_Resume(a1);
}

void sub_1C5842990(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_1C584299C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_1C58429A8(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    JUMPOUT(0x1C58429B4);
  }
  _Unwind_Resume(a1);
}

void sub_1C58429C0(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    JUMPOUT(0x1C58429CCLL);
  }
  _Unwind_Resume(a1);
}

void sub_1C58429D8(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    unint64_t v2 = STACK[0x328];
    if (STACK[0x328])
    {
      if ((uint64_t)(STACK[0x330] - 1) >= 0)
      {
        unint64_t v3 = v2 + 16 * STACK[0x330];
        do
        {
          size_t v4 = *(atomic_uint **)(v3 - 8);
          if (v4)
          {
            if (atomic_fetch_add(v4 + 2, 0xFFFFFFFF) == 1)
            {
              (*(void (**)(atomic_uint *))(*(void *)v4 + 16))(v4);
              if (atomic_fetch_add(v4 + 3, 0xFFFFFFFF) == 1) {
                (*(void (**)(atomic_uint *))(*(void *)v4 + 24))(v4);
              }
            }
          }
          v3 -= 16;
        }
        while (v3 > v2);
      }
      if (STACK[0x320] >= 0xB) {
        operator delete((void *)STACK[0x328]);
      }
    }
    JUMPOUT(0x1C5842E34);
  }
  _Unwind_Resume(a1);
}

void sub_1C5842AA0(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_1C5842AAC(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    JUMPOUT(0x1C5842AB4);
  }
  _Unwind_Resume(a1);
}

void sub_1C5842AE0(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    JUMPOUT(0x1C5842AE8);
  }
  _Unwind_Resume(a1);
}

void sub_1C5842AF4(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_1C5842B10(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_1C5842B1C()
{
}

void sub_1C5842B34(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,std::__shared_weak_count *a31,char a32,uint64_t a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,std::__shared_weak_count *a46)
{
  if (a31) {
    std::__shared_weak_count::__release_weak(a31);
  }
  if (a39 < 0) {
    operator delete(__p);
  }
  if (a46) {
    std::__shared_weak_count::__release_weak(a46);
  }
  JUMPOUT(0x1C5842C40);
}

void sub_1C5842B60(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_1C5842B6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, std::__shared_weak_count *a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,std::__shared_weak_count *a36,char a37,uint64_t a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,...)
{
  va_start(va, a57);
  dispatch::callback<void({block_pointer})(std::shared_ptr<abm::client::Event>)>::~callback((uint64_t)&a37);
  if (a36) {
    std::__shared_weak_count::__release_weak(a36);
  }
  if (a44 < 0) {
    operator delete(__p);
  }
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::__shared_weak_count::__release_weak(a8);
  _Unwind_Resume(a1);
}

void sub_1C5842B98(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_1C5842BA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,const void *a49,void *__p,uint64_t a51,int a52,__int16 a53,char a54,char a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&a49);
  if (a55 < 0) {
    operator delete(__p);
  }
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a65);
  std::__shared_weak_count::__release_weak(a15);
  _Unwind_Resume(a1);
}

void sub_1C5842BC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a64);
  std::__shared_weak_count::__release_weak(a15);
  _Unwind_Resume(a1);
}

void sub_1C5842BE0(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_1C5842BEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15)
{
}

void sub_1C5842C00(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a2)
  {
    boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void (),boost::function<void ()>>,boost::signals2::mutex>>::~shared_ptr((uint64_t)&STACK[0x260]);
    boost::signals2::detail::garbage_collecting_lock<boost::signals2::mutex>::~garbage_collecting_lock((uint64_t)&STACK[0x280]);
    boost::signals2::slot<void (),boost::function<void ()>>::~slot((void **)&STACK[0x200]);
    ctu::DispatchSlot<dispatch::block<void({block_pointer})>>::~DispatchSlot((uint64_t)&a71);
    JUMPOUT(0x1C5842E44);
  }
  _Unwind_Resume(a1);
}

void sub_1C5842C28()
{
}

void sub_1C5842C58(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    boost::function1<void,unsigned int>::~function1((uint64_t *)&STACK[0x280]);
    boost::function<void ()>::~function((uint64_t *)&STACK[0x260]);
    ctu::DispatchSlot<dispatch::block<void({block_pointer})>>::~DispatchSlot((uint64_t)&STACK[0x250]);
    ctu::DispatchSlot<dispatch::block<void({block_pointer})>>::~DispatchSlot((uint64_t)&STACK[0x240]);
    unint64_t v2 = STACK[0x218];
    if (STACK[0x218])
    {
      if ((v2 & 1) == 0)
      {
        unint64_t v3 = *(void (**)(unint64_t *, unint64_t *, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
        if (v3) {
          v3(&STACK[0x220], &STACK[0x220], 2);
        }
      }
      STACK[0x218] = 0;
    }
    unint64_t v4 = STACK[0x200];
    if (STACK[0x200])
    {
      uint64_t v5 = STACK[0x208];
      uint64_t v6 = (void *)STACK[0x200];
      if (STACK[0x208] != v4)
      {
        do
        {
          v5 -= 24;
          boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>::destroy_content(v5);
        }
        while (v5 != v4);
        uint64_t v6 = (void *)STACK[0x200];
      }
      STACK[0x208] = v4;
      operator delete(v6);
    }
    JUMPOUT(0x1C5842E3CLL);
  }
  _Unwind_Resume(a1);
}

void sub_1C5842CEC(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_1C5842CF8(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_1C5842D08(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_1C5842D14(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>>>::destroy(v3);
    std::list<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void (),boost::function<void ()>>,boost::signals2::mutex>>>::~list(v2);
    operator delete(v2);
    JUMPOUT(0x1C5842D68);
  }
  _Unwind_Resume(a1);
}

void sub_1C5842E10(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_1C5842E1C(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (!a2) {
    JUMPOUT(0x1C5842E24);
  }
  boost::signals2::detail::garbage_collecting_lock<boost::signals2::mutex>::~garbage_collecting_lock(&STACK[0x280]);
  boost::signals2::slot<void (),boost::function<void ()>>::~slot(&STACK[0x200]);
  ctu::DispatchSlot<dispatch::block<void({block_pointer})>>::~DispatchSlot(&a71);
  JUMPOUT(0x1C5842E44);
}

void ___ZN11RadioModule25finishInitialization_syncEv_block_invoke(void *a1, uint64_t *a2, const __CFDictionary **a3)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = a1[4];
  uint64_t v29 = 0;
  xpc_object_t v30 = 0;
  uint64_t v5 = (std::__shared_weak_count *)a1[6];
  if (v5)
  {
    xpc_object_t v30 = std::__shared_weak_count::lock(v5);
    if (!v30) {
      return;
    }
    uint64_t v29 = a1[5];
    if (v29)
    {
      uint64_t v8 = *a2;
      if (v8) {
        uint64_t v9 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
      }
      else {
        uint64_t v9 = 0;
      }
      if (v9)
      {
        long long v10 = *(NSObject **)(v4 + 88);
        if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)uint64_t v32 = 138412290;
          *(void *)&v32[4] = v8;
          _os_log_error_impl(&dword_1C5767000, v10, OS_LOG_TYPE_ERROR, "%@", v32, 0xCu);
        }
        goto LABEL_10;
      }
      if (*a3
         ? ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get
         : 0)
      {
        xpc_object_t v13 = (const void *)*MEMORY[0x1E4F4D0F8];
        size_t v14 = strlen((const char *)*MEMORY[0x1E4F4D0F8]);
        if (v14 >= 0x7FFFFFFFFFFFFFF8) {
          std::string::__throw_length_error[abi:ne180100]();
        }
        xpc_object_t v15 = (void *)v14;
        if (v14 >= 0x17)
        {
          uint64_t v17 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v14 | 7) != 0x17) {
            uint64_t v17 = v14 | 7;
          }
          uint64_t v18 = v17 + 1;
          xpc_object_t v16 = (void **)operator new(v17 + 1);
          __dst[1] = v15;
          unint64_t v28 = v18 | 0x8000000000000000;
          __dst[0] = v16;
        }
        else
        {
          HIBYTE(v28) = v14;
          xpc_object_t v16 = __dst;
          if (!v14) {
            goto LABEL_26;
          }
        }
        memmove(v16, v13, (size_t)v15);
LABEL_26:
        *((unsigned char *)v15 + (void)v16) = 0;
        CFDictionaryRef v19 = *a3;
        CFTypeRef cf = v19;
        if (v19) {
          CFRetain(v19);
        }
        aBlocunint64_t k = 0;
        Service::broadcastEvent(v4, (uint64_t)__dst, &cf, (const void **)&aBlock);
        if (aBlock) {
          _Block_release(aBlock);
        }
        xpc_object_t v20 = (capabilities::abs *)cf;
        if (cf) {
          CFRelease(cf);
        }
        if (SHIBYTE(v28) < 0) {
          operator delete(__dst[0]);
        }
        uint64_t v21 = (capabilities::txpower *)capabilities::abs::supportsChargerDesense(v20);
        if (v21 && capabilities::txpower::supportsPowerChargerDesense(v21))
        {
          memset(v32, 170, 16);
          ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v32, *a3);
          ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)buf, (const char *)*MEMORY[0x1E4F4CB50]);
          int Int = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v32, *(const __CFString **)buf);
          MEMORY[0x1C8791110](buf);
          TelephonyBasebandSetChargerDesense();
          long long v23 = *(NSObject **)(v4 + 88);
          if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
          {
            xpc_object_t v24 = "Off";
            if (!Int) {
              xpc_object_t v24 = "On";
            }
            *(_DWORD *)long long buf = 136315138;
            *(void *)&uint8_t buf[4] = v24;
            _os_log_impl(&dword_1C5767000, v23, OS_LOG_TYPE_DEFAULT, "#I Charger Desense: %s", buf, 0xCu);
          }
          MEMORY[0x1C8791160](v32);
        }
      }
    }
  }
LABEL_10:
  xpc_object_t v11 = v30;
  if (v30)
  {
    if (!atomic_fetch_add(&v30->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

void ___ZN11RadioModule25finishInitialization_syncEv_block_invoke_167(void *a1, abm::client::Event **a2)
{
  unint64_t v3 = (std::__shared_weak_count *)a1[6];
  if (!v3) {
    return;
  }
  uint64_t v5 = a1[4];
  uint64_t v6 = std::__shared_weak_count::lock(v3);
  xpc_object_t v44 = v6;
  if (!v6) {
    return;
  }
  if (!a1[5])
  {
    xpc_object_t v16 = v6;
LABEL_76:
    if (!atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
    return;
  }
  CFDictionaryRef v42 = (const __CFDictionary *)0xAAAAAAAAAAAAAAAALL;
  abm::client::Event::getData((uint64_t *)&v42, *a2);
  CFDictionaryRef v7 = v42;
  if (v42) {
    uint64_t v8 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
  }
  else {
    uint64_t v8 = 0;
  }
  if (v8)
  {
    v41[0] = 0xAAAAAAAAAAAAAAAALL;
    v41[1] = 0xAAAAAAAAAAAAAAAALL;
    ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v41, v42);
    long long v39 = 0uLL;
    uint64_t v40 = 0;
    ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v33, (const char *)*MEMORY[0x1E4F4C688]);
    ctu::cf::map_adapter::getString();
    MEMORY[0x1C8791110](&v33);
    if (SHIBYTE(v40) < 0) {
      operator delete((void *)v39);
    }
    uint64_t v40 = v38;
    long long v39 = *(_OWORD *)buf;
    int v9 = SHIBYTE(v38);
    if (v38 >= 0) {
      size_t v10 = HIBYTE(v40);
    }
    else {
      size_t v10 = *((void *)&v39 + 1);
    }
    if (v10 == strlen((const char *)*MEMORY[0x1E4F4CAE8])
      && (v38 >= 0 ? (xpc_object_t v11 = &v39) : (xpc_object_t v11 = (long long *)v39),
          xpc_object_t v12 = (capabilities::radio *)memcmp(v11, (const void *)*MEMORY[0x1E4F4CAE8], v10),
          !v12))
    {
      uint64_t v17 = (capabilities::abs *)capabilities::radio::supportsBasebandStateController(v12);
      if (v17) {
        RadioModule::getResetProperties_sync((RadioModule *)v5);
      }
      uint64_t v18 = (RadioModule *)capabilities::abs::supportsBatteryInfoMonitoring(v17);
      if (v18)
      {
        *(_WORD *)(v5 + 320) = 0;
        *(unsigned char *)(v5 + 322) = 0;
        RadioModule::monitorBatteryInfo_sync((RadioModule *)v5);
      }
      RadioModule::setRegion_sync(v18);
      RadioModule::startHealthService_sync((RadioModule *)v5);
      aBlock[0] = MEMORY[0x1E4F143A8];
      aBlock[1] = 0x40000000;
      aBlock[2] = ___ZN11RadioModule25finishInitialization_syncEv_block_invoke_2;
      aBlock[3] = &__block_descriptor_tmp_168;
      void aBlock[4] = v5;
      CFDictionaryRef v19 = (void (**)(void *, std::string *))_Block_copy(aBlock);
      unsigned int v36 = v19;
      RadioModule::getVersion_sync(v5, &v36);
      if (v19) {
        _Block_release(v19);
      }
      uint64_t v21 = (capabilities::abs *)capabilities::abs::supportsCalibrationQuery(v20);
      if (v21)
      {
        if (*(unsigned char *)(v5 + 192) == 3) {
          RadioModule::queryFactoryCalibrationStatus_sync((RadioModule *)v5);
        }
        if (*(unsigned char *)(v5 + 200) == 2) {
          RadioModule::queryRFCalibrationStatus_sync((RadioModule *)v5);
        }
      }
      uint64_t v22 = (capabilities::abs *)capabilities::abs::supportsFieldTestConfig(v21);
      if (v22) {
        RadioModule::queryFieldTestConfig_sync((RadioModule *)v5);
      }
      if (capabilities::abs::supportsResetSPMIEvent(v22))
      {
        unint64_t v33 = 0xAAAAAAAAAAAAAAAALL;
        xpc_object_t v34 = (std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL;
        long long v23 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
        uint64_t v24 = off_1EBBDD2A0;
        if (!off_1EBBDD2A0)
        {
          CommandDriverFactory::create_default_global((uint64_t *)buf, v23);
          long long v25 = *(_OWORD *)buf;
          memset(buf, 0, sizeof(buf));
          CFTypeRef v26 = (std::__shared_weak_count *)*(&off_1EBBDD2A0 + 1);
          off_1EBBDD2A0 = v25;
          if (v26 && !atomic_fetch_add(&v26->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
            std::__shared_weak_count::__release_weak(v26);
          }
          xpc_object_t v27 = *(std::__shared_weak_count **)&buf[8];
          if (*(void *)&buf[8]
            && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
            std::__shared_weak_count::__release_weak(v27);
          }
          uint64_t v24 = off_1EBBDD2A0;
        }
        unint64_t v28 = (std::__shared_weak_count *)*(&off_1EBBDD2A0 + 1);
        if (*(&off_1EBBDD2A0 + 1)) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDD2A0 + 1) + 8), 1uLL, memory_order_relaxed);
        }
        pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
        (*(void (**)(unint64_t *__return_ptr, uint64_t))(*(void *)v24 + 16))(&v31, v24);
        unint64_t v33 = 0;
        xpc_object_t v34 = 0;
        if (v32)
        {
          xpc_object_t v34 = std::__shared_weak_count::lock(v32);
          if (v34) {
            unint64_t v33 = v31;
          }
          if (v32) {
            std::__shared_weak_count::__release_weak(v32);
          }
        }
        if (v28 && !atomic_fetch_add(&v28->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
          std::__shared_weak_count::__release_weak(v28);
        }
        if (v33) {
          (*(void (**)(unint64_t))(*(void *)v33 + 392))(v33);
        }
        uint64_t v29 = v34;
        if (v34)
        {
          if (!atomic_fetch_add(&v34->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
            std::__shared_weak_count::__release_weak(v29);
            if (SHIBYTE(v40) < 0) {
              goto LABEL_71;
            }
            goto LABEL_72;
          }
        }
      }
    }
    else if (v10 == strlen((const char *)*MEMORY[0x1E4F4CCD8]) {
           && (v9 >= 0 ? (xpc_object_t v13 = &v39) : (xpc_object_t v13 = (long long *)v39), !memcmp(v13, (const void *)*MEMORY[0x1E4F4CCD8], v10))
    }
           || v10 == strlen((const char *)*MEMORY[0x1E4F4CF28])
           && (v9 >= 0 ? (size_t v14 = &v39) : (size_t v14 = (long long *)v39), !memcmp(v14, (const void *)*MEMORY[0x1E4F4CF28], v10)))
    {
      xpc_object_t v15 = *(ctu::iokit::Controller **)(v5 + 304);
      if (v15)
      {
        ctu::iokit::Controller::stopBatteryInfoNotifications(v15);
      }
      else
      {
        xpc_object_t v30 = *(NSObject **)(v5 + 88);
        if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)long long buf = 0;
          _os_log_error_impl(&dword_1C5767000, v30, OS_LOG_TYPE_ERROR, "Invalid fIOKitController", buf, 2u);
          if ((SHIBYTE(v40) & 0x80000000) == 0) {
            goto LABEL_72;
          }
          goto LABEL_71;
        }
      }
    }
    if (SHIBYTE(v40) < 0) {
LABEL_71:
    }
      operator delete((void *)v39);
LABEL_72:
    MEMORY[0x1C8791160](v41);
    CFDictionaryRef v7 = v42;
  }
  if (v7) {
    CFRelease(v7);
  }
  xpc_object_t v16 = v44;
  if (v44) {
    goto LABEL_76;
  }
}

void sub_1C5843784(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  if (*(char *)(v1 - 73) < 0) {
    operator delete(*(void **)(v1 - 96));
  }
  MEMORY[0x1C8791160](v1 - 72);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)(v1 - 56));
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v1 - 48);
  _Unwind_Resume(a1);
}

void RadioModule::getResetProperties_sync(RadioModule *this)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  if (*((unsigned char *)this + 296))
  {
    unint64_t v2 = *((void *)this + 11);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      if (*((unsigned char *)this + 289)) {
        unint64_t v3 = "true";
      }
      else {
        unint64_t v3 = "false";
      }
      int v4 = *((unsigned __int16 *)this + 145);
      int v5 = *((_DWORD *)this + 73);
      *(_DWORD *)long long buf = 136315650;
      *(void *)&uint8_t buf[4] = v3;
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = v4;
      __int16 v35 = 1024;
      int v36 = v5;
      _os_log_impl(&dword_1C5767000, v2, OS_LOG_TYPE_DEFAULT, "#I Baseband properties (cached):\n    Coredump supported: %s\n    PowerSequence index: %u\n    Baseband version: 0x%08x", buf, 0x18u);
    }
    return;
  }
  uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 16);
  if (!v6 || (uint64_t v7 = *((void *)this + 15), (v8 = std::__shared_weak_count::lock(v6)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  int v9 = v8;
  p_shared_weak_owners = &v8->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
  }
  uint64_t v32 = (void *)0xAAAAAAAAAAAAAAAALL;
  dispatch_object_t v33 = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN11RadioModule23getResetProperties_syncEv_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_188;
  void aBlock[4] = this;
  void aBlock[5] = v7;
  unint64_t v31 = v9;
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  xpc_object_t v11 = _Block_copy(aBlock);
  xpc_object_t v12 = *((void *)this + 17);
  if (v12) {
    dispatch_retain(v12);
  }
  uint64_t v32 = v11;
  dispatch_object_t v33 = v12;
  unint64_t v28 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v29 = (std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL;
  xpc_object_t v13 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  uint64_t v14 = off_1EBBDD2A0;
  if (!off_1EBBDD2A0)
  {
    CommandDriverFactory::create_default_global((uint64_t *)buf, v13);
    long long v15 = *(_OWORD *)buf;
    *(void *)long long buf = 0;
    *(void *)&uint8_t buf[8] = 0;
    xpc_object_t v16 = (std::__shared_weak_count *)*(&off_1EBBDD2A0 + 1);
    off_1EBBDD2A0 = v15;
    if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
    uint64_t v17 = *(std::__shared_weak_count **)&buf[8];
    if (*(void *)&buf[8]
      && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
    uint64_t v14 = off_1EBBDD2A0;
  }
  uint64_t v18 = (std::__shared_weak_count *)*(&off_1EBBDD2A0 + 1);
  uint64_t v24 = v14;
  uint64_t v25 = *(&off_1EBBDD2A0 + 1);
  if (*(&off_1EBBDD2A0 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDD2A0 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(unint64_t *__return_ptr, uint64_t))(*(void *)v14 + 16))(&v26, v14);
  unint64_t v28 = 0;
  uint64_t v29 = 0;
  if (v27)
  {
    uint64_t v29 = std::__shared_weak_count::lock(v27);
    if (v29) {
      unint64_t v28 = v26;
    }
    if (v27) {
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  if (v18 && !atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
    unint64_t v19 = v28;
    if (v28) {
      goto LABEL_31;
    }
  }
  else
  {
    unint64_t v19 = v28;
    if (v28)
    {
LABEL_31:
      xpc_object_t v20 = v32;
      if (v32) {
        xpc_object_t v20 = _Block_copy(v32);
      }
      uint64_t v22 = v20;
      dispatch_object_t object = v33;
      if (v33) {
        dispatch_retain(v33);
      }
      (*(void (**)(unint64_t, void **))(*(void *)v19 + 168))(v19, &v22);
      if (object) {
        dispatch_release(object);
      }
      if (v22) {
        _Block_release(v22);
      }
    }
  }
  uint64_t v21 = v29;
  if (v29 && !atomic_fetch_add(&v29->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v21);
  }
  if (v33) {
    dispatch_release(v33);
  }
  if (v32) {
    _Block_release(v32);
  }
  if (v31) {
    std::__shared_weak_count::__release_weak(v31);
  }
  std::__shared_weak_count::__release_weak(v9);
}

void sub_1C5843CAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,std::__shared_weak_count *a24)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void RadioModule::monitorBatteryInfo_sync(RadioModule *this)
{
  if (*((void *)this + 38))
  {
    unint64_t v2 = (std::__shared_weak_count *)*((void *)this + 16);
    if (!v2 || (v3 = *((void *)this + 15), (int v4 = std::__shared_weak_count::lock(v2)) == 0)) {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    int v5 = v4;
    p_shared_weak_owners = &v4->__shared_weak_owners_;
    atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v5);
    }
    memset(v25, 170, sizeof(v25));
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 1174405120;
    aBlock[2] = ___ZN11RadioModule23monitorBatteryInfo_syncEv_block_invoke;
    aBlock[3] = &__block_descriptor_tmp_191;
    void aBlock[4] = this;
    void aBlock[5] = v3;
    uint64_t v24 = v5;
    atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
    uint64_t v7 = _Block_copy(aBlock);
    uint64_t v8 = *((void *)this + 17);
    if (v8) {
      dispatch_retain(*((dispatch_object_t *)this + 17));
    }
    *(void *)uint64_t v25 = v7;
    *(void *)&v25[8] = v8;
    int v9 = *((void *)this + 11);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1C5767000, v9, OS_LOG_TYPE_DEFAULT, "#I Registering for battery info updates", buf, 2u);
    }
    v16[0] = MEMORY[0x1E4F143A8];
    v16[1] = 1174405120;
    uint64_t v16[2] = ___ZN11RadioModule23monitorBatteryInfo_syncEv_block_invoke_192;
    v16[3] = &__block_descriptor_tmp_196;
    v16[4] = this;
    v16[5] = v3;
    uint64_t v17 = v5;
    atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    if (v7)
    {
      uint64_t v18 = _Block_copy(v7);
      dispatch_object_t v19 = v8;
      if (!v8) {
        goto LABEL_13;
      }
    }
    else
    {
      uint64_t v18 = 0;
      dispatch_object_t v19 = v8;
      if (!v8)
      {
LABEL_13:
        size_t v10 = _Block_copy(v16);
        xpc_object_t v11 = *((void *)this + 17);
        if (v11) {
          dispatch_retain(*((dispatch_object_t *)this + 17));
        }
        xpc_object_t v20 = v10;
        dispatch_object_t object = v11;
        char v12 = ctu::iokit::Controller::registerForBatteryInfoChange();
        if (object) {
          dispatch_release(object);
        }
        if (v20) {
          _Block_release(v20);
        }
        if ((v12 & 1) == 0 && (xpc_object_t v13 = *((void *)this + 11), os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)))
        {
          *(_WORD *)long long buf = 0;
          _os_log_error_impl(&dword_1C5767000, v13, OS_LOG_TYPE_ERROR, "Failed to register for battery info updates", buf, 2u);
          uint64_t v14 = v19;
          if (!v19) {
            goto LABEL_23;
          }
        }
        else
        {
          uint64_t v14 = v19;
          if (!v19)
          {
LABEL_23:
            if (v18) {
              _Block_release(v18);
            }
            if (v17) {
              std::__shared_weak_count::__release_weak(v17);
            }
            if (v8) {
              dispatch_release(v8);
            }
            if (v7) {
              _Block_release(v7);
            }
            if (v24) {
              std::__shared_weak_count::__release_weak(v24);
            }
            std::__shared_weak_count::__release_weak(v5);
            return;
          }
        }
        dispatch_release(v14);
        goto LABEL_23;
      }
    }
    dispatch_retain(v8);
    goto LABEL_13;
  }
  long long v15 = *((void *)this + 11);
  if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)uint64_t v25 = 0;
    _os_log_error_impl(&dword_1C5767000, v15, OS_LOG_TYPE_ERROR, "Invalid fIOKitController", v25, 2u);
  }
}

void sub_1C5844070(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,std::__shared_weak_count *a28)
{
  dispatch::callback<void({block_pointer})(ctu::iokit::TelephonyIOKitBatteryInfo)>::~callback((uint64_t)&a19);
  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>::~callback(v29);
  if (a16)
  {
    std::__shared_weak_count::__release_weak(a16);
    dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>::~callback(v30 - 112);
    uint64_t v32 = a28;
    if (!a28)
    {
LABEL_3:
      std::__shared_weak_count::__release_weak(v28);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>::~callback(v30 - 112);
    uint64_t v32 = a28;
    if (!a28) {
      goto LABEL_3;
    }
  }
  std::__shared_weak_count::__release_weak(v32);
  std::__shared_weak_count::__release_weak(v28);
  _Unwind_Resume(a1);
}

void RadioModule::setRegion_sync(RadioModule *this)
{
  if (!capabilities::abs::shouldSetRegion(this)) {
    return;
  }
  unint64_t v16 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v17 = (std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL;
  uint64_t v1 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  uint64_t v2 = off_1EBBDD2A0;
  if (!off_1EBBDD2A0)
  {
    CommandDriverFactory::create_default_global((uint64_t *)&v18, v1);
    long long v3 = v18;
    long long v18 = 0uLL;
    int v4 = (std::__shared_weak_count *)*(&off_1EBBDD2A0 + 1);
    off_1EBBDD2A0 = v3;
    if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    int v5 = (std::__shared_weak_count *)*((void *)&v18 + 1);
    if (*((void *)&v18 + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v18 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    uint64_t v2 = off_1EBBDD2A0;
  }
  uint64_t v6 = (std::__shared_weak_count *)*(&off_1EBBDD2A0 + 1);
  uint64_t v12 = v2;
  uint64_t v13 = *(&off_1EBBDD2A0 + 1);
  if (*(&off_1EBBDD2A0 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDD2A0 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(unint64_t *__return_ptr, uint64_t))(*(void *)v2 + 16))(&v14, v2);
  unint64_t v16 = 0;
  uint64_t v17 = 0;
  uint64_t v7 = (config::hw *)v15;
  if (v15)
  {
    uint64_t v17 = std::__shared_weak_count::lock(v15);
    if (v17) {
      unint64_t v16 = v14;
    }
    uint64_t v7 = (config::hw *)v15;
    if (v15) {
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    unint64_t v8 = v16;
    if (v16)
    {
LABEL_20:
      config::hw::regionCode(v7);
      (*(void (**)(unint64_t, void **))(*(void *)v8 + 304))(v8, &__p);
      if (v11 < 0) {
        operator delete(__p);
      }
    }
  }
  else
  {
    unint64_t v8 = v16;
    if (v16) {
      goto LABEL_20;
    }
  }
  int v9 = v17;
  if (v17)
  {
    if (!atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_1C5844348(_Unwind_Exception *a1)
{
}

void sub_1C5844364(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v15 - 48);
    _Unwind_Resume(a1);
  }
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v15 - 48);
  _Unwind_Resume(a1);
}

void sub_1C584439C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void RadioModule::startHealthService_sync(RadioModule *this)
{
  CFMutableDictionaryRef v26 = 0;
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (Mutable) {
    CFMutableDictionaryRef v26 = Mutable;
  }
  GetABMLogServer(&v23);
  DataStallDetection::create((capabilities::abs *)&v23, (uint64_t *)&v25);
  long long v3 = v25;
  long long v25 = 0uLL;
  int v4 = (std::__shared_weak_count *)*((void *)this + 33);
  *((_OWORD *)this + 16) = v3;
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  int v5 = (std::__shared_weak_count *)*((void *)&v25 + 1);
  if (*((void *)&v25 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v25 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  uint64_t v6 = v24;
  if (!v24 || atomic_fetch_add(&v24->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    uint64_t v7 = (DataStallDetection *)*((void *)this + 32);
    if (!v7) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
  std::__shared_weak_count::__release_weak(v6);
  uint64_t v7 = (DataStallDetection *)*((void *)this + 32);
  if (v7) {
LABEL_12:
  }
    DataStallDetection::start(v7);
LABEL_13:
  unint64_t v8 = (capabilities::radio *)operator new(0x10uLL);
  GetABMLogServer(&v21);
  int v9 = (std::__shared_weak_count *)*((void *)this + 33);
  uint64_t v19 = *((void *)this + 32);
  xpc_object_t v20 = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  CFMutableDictionaryRef v10 = v26;
  if (v26 && (CFTypeID v11 = CFGetTypeID(v26), v11 == CFDictionaryGetTypeID()))
  {
    CFTypeRef cf = v10;
    CFRetain(v10);
  }
  else
  {
    CFTypeRef cf = 0;
  }
  radio::HealthService::HealthService(v8, &v21, &v19, &cf);
  uint64_t v12 = operator new(0x20uLL);
  *uint64_t v12 = &unk_1F20F7B80;
  v12[1] = 0;
  void v12[2] = 0;
  v12[3] = v8;
  uint64_t v13 = (std::__shared_weak_count *)*((void *)this + 35);
  *((void *)this + 34) = v8;
  *((void *)this + 35) = v12;
  if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
    CFTypeRef v14 = cf;
    if (!cf) {
      goto LABEL_23;
    }
    goto LABEL_22;
  }
  CFTypeRef v14 = cf;
  if (cf) {
LABEL_22:
  }
    CFRelease(v14);
LABEL_23:
  uint64_t v15 = v20;
  if (v20 && !atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  unint64_t v16 = v22;
  if (v22 && !atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
    CFMutableDictionaryRef v17 = v26;
    if (!v26) {
      return;
    }
  }
  else
  {
    CFMutableDictionaryRef v17 = v26;
    if (!v26) {
      return;
    }
  }
  CFRelease(v17);
}

void sub_1C58446D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10, __int16 a11, char a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17)
{
  xpc_object_t v20 = (std::__shared_weak_count *)v17[1];
  if (v20)
  {
    if (!atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  operator delete(v17);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&a10);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)(v18 - 40));
  _Unwind_Resume(a1);
}

void ___ZN11RadioModule25finishInitialization_syncEv_block_invoke_2(uint64_t a1, size_t *a2)
{
  uint64_t v2 = a2;
  uint64_t v84 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(a1 + 32);
  int v4 = (void **)(v3 + 152);
  if ((size_t *)(v3 + 152) == a2) {
    goto LABEL_10;
  }
  if (*(char *)(v3 + 175) < 0)
  {
    if (*((char *)a2 + 23) >= 0)
    {
      size_t v7 = *((unsigned __int8 *)a2 + 23);
    }
    else
    {
      a2 = (size_t *)*a2;
      size_t v7 = v2[1];
    }
    int v4 = std::string::__assign_no_alias<false>(v4, a2, v7);
LABEL_10:
    BOOL isHardwareModelChanged = sys::isHardwareModelChanged((sys *)v4);
    if (isHardwareModelChanged) {
      goto LABEL_15;
    }
    goto LABEL_11;
  }
  if ((*((unsigned char *)a2 + 23) & 0x80) != 0)
  {
    int v9 = (sys *)std::string::__assign_no_alias<true>(v4, (void *)*a2, a2[1]);
    BOOL isHardwareModelChanged = sys::isHardwareModelChanged(v9);
    if (isHardwareModelChanged) {
      goto LABEL_15;
    }
  }
  else
  {
    long long v5 = *(_OWORD *)a2;
    *(void *)(v3 + 168) = a2[2];
    *(_OWORD *)int v4 = v5;
    BOOL isHardwareModelChanged = sys::isHardwareModelChanged((sys *)v4);
    if (isHardwareModelChanged) {
      goto LABEL_15;
    }
  }
LABEL_11:
  BOOL isHardwareModelChanged = sys::isFWVersionChanged((unsigned __int8 *)v2);
  if (!isHardwareModelChanged)
  {
    BOOL isHardwareModelChanged = sys::isOSVersionChanged((sys *)isHardwareModelChanged);
    if (!isHardwareModelChanged)
    {
      CFAllocatorRef v8 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      goto LABEL_80;
    }
  }
LABEL_15:
  *(void *)&long long v10 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v10 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v80 = v10;
  long long v81 = v10;
  long long v78 = v10;
  long long v79 = v10;
  long long v76 = v10;
  long long v77 = v10;
  config::hw::product((config::hw *)isHardwareModelChanged);
  config::build::version(v11);
  if (*((char *)v2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)&v79, (const std::string::value_type *)*v2, v2[1]);
  }
  else
  {
    long long v79 = *(_OWORD *)v2;
    *(void *)&long long v80 = v2[2];
  }
  Timestamp::Timestamp((Timestamp *)&buf);
  Timestamp::asString(v12, 0, 9, (unsigned char *)&v80 + 8);
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&buf, (void *)buf.__r_.__value_.__l.__size_);
  pthread_mutex_lock(&ctu::Singleton<DeviceHistoryDB,DeviceHistoryDB,ctu::PthreadMutexGuardPolicy<DeviceHistoryDB>>::sInstance);
  if (!(void)xmmword_1EA3D6028)
  {
    CFTypeRef v14 = (char *)operator new(0x60uLL);
    DeviceHistoryDB::DeviceHistoryDB((DeviceHistoryDB *)v14);
    uint64_t v13 = operator new(0x20uLL);
    *uint64_t v13 = &unk_1F20F7848;
    v13[1] = 0;
    v13[2] = 0;
    v13[3] = v14;
    uint64_t v15 = (std::__shared_weak_count *)*((void *)&xmmword_1EA3D6028 + 1);
    *(void *)&xmmword_1EA3D6028 = v14;
    *((void *)&xmmword_1EA3D6028 + 1) = v13;
    if (!v15)
    {
      buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v14;
      buf.__r_.__value_.__l.__size_ = (std::string::size_type)v13;
      goto LABEL_25;
    }
    if (!atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  uint64_t v13 = (void *)*((void *)&xmmword_1EA3D6028 + 1);
  CFTypeRef v14 = (char *)xmmword_1EA3D6028;
  *(_OWORD *)&buf.__r_.__value_.__l.__data_ = xmmword_1EA3D6028;
  if (*((void *)&xmmword_1EA3D6028 + 1)) {
LABEL_25:
  }
    atomic_fetch_add_explicit(v13 + 1, 1uLL, memory_order_relaxed);
  pthread_mutex_unlock(&ctu::Singleton<DeviceHistoryDB,DeviceHistoryDB,ctu::PthreadMutexGuardPolicy<DeviceHistoryDB>>::sInstance);
  _DeviceHistoryItem::_DeviceHistoryItem(&v69, (const _DeviceHistoryItem *)&v76);
  unint64_t v16 = *((void *)v14 + 10);
  if (v16 >= *((void *)v14 + 11))
  {
    uint64_t v17 = std::vector<_DeviceHistoryItem>::__push_back_slow_path<_DeviceHistoryItem const&>((int64x2_t *)(v14 + 72), (const _DeviceHistoryItem *)&v69);
  }
  else
  {
    _DeviceHistoryItem::_DeviceHistoryItem(*((std::string **)v14 + 10), (const _DeviceHistoryItem *)&v69);
    uint64_t v17 = v16 + 96;
    *((void *)v14 + 10) = v16 + 96;
  }
  *((void *)v14 + 10) = v17;
  DeviceHistoryDB::commitToDisk((DeviceHistoryDB *)v14);
  if (v75 < 0)
  {
    operator delete(__p);
    if ((v73 & 0x80000000) == 0)
    {
LABEL_31:
      if ((v71 & 0x80000000) == 0) {
        goto LABEL_32;
      }
      goto LABEL_37;
    }
  }
  else if ((v73 & 0x80000000) == 0)
  {
    goto LABEL_31;
  }
  operator delete(v72);
  if ((v71 & 0x80000000) == 0)
  {
LABEL_32:
    if ((SHIBYTE(v69.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_33;
    }
    goto LABEL_38;
  }
LABEL_37:
  operator delete(v70);
  if ((SHIBYTE(v69.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_33:
    std::string::size_type size = (std::__shared_weak_count *)buf.__r_.__value_.__l.__size_;
    if (!buf.__r_.__value_.__l.__size_) {
      goto LABEL_41;
    }
    goto LABEL_39;
  }
LABEL_38:
  operator delete(v69.__r_.__value_.__l.__data_);
  std::string::size_type size = (std::__shared_weak_count *)buf.__r_.__value_.__l.__size_;
  if (!buf.__r_.__value_.__l.__size_) {
    goto LABEL_41;
  }
LABEL_39:
  if (!atomic_fetch_add(&size->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
    std::__shared_weak_count::__release_weak(size);
  }
LABEL_41:
  uint64_t v19 = *(NSObject **)(v3 + 88);
  BOOL v20 = os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT);
  uint64_t v21 = (const __CFString ***)MEMORY[0x1E4F4C898];
  if (v20)
  {
    std::string::size_type v22 = *MEMORY[0x1E4F4C898];
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v22;
    _os_log_impl(&dword_1C5767000, v19, OS_LOG_TYPE_DEFAULT, "#I Broadcasting %s", (uint8_t *)&buf, 0xCu);
  }
  memset(&v68, 0, sizeof(v68));
  if (sys::isHardwareModelChanged((sys *)v20))
  {
    uint64_t v23 = (const std::string::value_type **)MEMORY[0x1E4F4D1E8];
  }
  else
  {
    BOOL isFWVersionChanged = sys::isFWVersionChanged((unsigned __int8 *)v2);
    uint64_t v23 = (const std::string::value_type **)MEMORY[0x1E4F4D088];
    if (isFWVersionChanged) {
      uint64_t v23 = (const std::string::value_type **)MEMORY[0x1E4F4D168];
    }
  }
  std::string::__assign_external(&v68, *v23);
  CFMutableDictionaryRef v82 = 0;
  CFAllocatorRef v8 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  xpc_object_t v27 = Mutable;
  if (Mutable) {
    CFMutableDictionaryRef v82 = Mutable;
  }
  if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&buf, v68.__r_.__value_.__l.__data_, v68.__r_.__value_.__l.__size_);
  }
  else {
    std::string buf = v68;
  }
  ctu::cf::insert<char const*,std::string>(v27, *v21, (uint64_t)&buf, (uint64_t)v8, v26);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf.__r_.__value_.__l.__data_);
  }
  unint64_t v28 = (const void *)*MEMORY[0x1E4F4C830];
  size_t v29 = strlen((const char *)*MEMORY[0x1E4F4C830]);
  if (v29 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v30 = (void *)v29;
  if (v29 >= 0x17)
  {
    uint64_t v33 = (v29 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v29 | 7) != 0x17) {
      uint64_t v33 = v29 | 7;
    }
    uint64_t v34 = v33 + 1;
    unint64_t v31 = (void **)operator new(v33 + 1);
    __dst[1] = v30;
    unint64_t v67 = v34 | 0x8000000000000000;
    __dst[0] = v31;
LABEL_62:
    memmove(v31, v28, (size_t)v30);
    *((unsigned char *)v30 + (void)v31) = 0;
    CFMutableDictionaryRef v32 = v82;
    if (!v82) {
      goto LABEL_65;
    }
    goto LABEL_63;
  }
  HIBYTE(v67) = v29;
  unint64_t v31 = __dst;
  if (v29) {
    goto LABEL_62;
  }
  LOBYTE(__dst[0]) = 0;
  CFMutableDictionaryRef v32 = v82;
  if (!v82) {
    goto LABEL_65;
  }
LABEL_63:
  CFTypeID v35 = CFGetTypeID(v32);
  if (v35 == CFDictionaryGetTypeID())
  {
    CFTypeRef cf = v32;
    CFRetain(v32);
    goto LABEL_66;
  }
LABEL_65:
  CFTypeRef cf = 0;
LABEL_66:
  aBlocunint64_t k = 0;
  Service::broadcastEvent(v3, (uint64_t)__dst, &cf, (const void **)&aBlock);
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (SHIBYTE(v67) < 0)
  {
    operator delete(__dst[0]);
    if (!v32) {
      goto LABEL_75;
    }
    goto LABEL_74;
  }
  if (v32) {
LABEL_74:
  }
    CFRelease(v32);
LABEL_75:
  if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v68.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v81) & 0x80000000) == 0)
    {
LABEL_77:
      if ((SBYTE7(v80) & 0x80000000) == 0) {
        goto LABEL_78;
      }
      goto LABEL_87;
    }
  }
  else if ((SHIBYTE(v81) & 0x80000000) == 0)
  {
    goto LABEL_77;
  }
  operator delete(*((void **)&v80 + 1));
  if ((SBYTE7(v80) & 0x80000000) == 0)
  {
LABEL_78:
    if ((SHIBYTE(v78) & 0x80000000) == 0) {
      goto LABEL_79;
    }
LABEL_88:
    operator delete(*((void **)&v77 + 1));
    if ((SBYTE7(v77) & 0x80000000) == 0) {
      goto LABEL_80;
    }
    goto LABEL_89;
  }
LABEL_87:
  operator delete((void *)v79);
  if (SHIBYTE(v78) < 0) {
    goto LABEL_88;
  }
LABEL_79:
  if ((SBYTE7(v77) & 0x80000000) == 0) {
    goto LABEL_80;
  }
LABEL_89:
  operator delete((void *)v76);
LABEL_80:
  CFMutableDictionaryRef v36 = CFDictionaryCreateMutable(v8, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  uint64_t v38 = v36;
  if (v36)
  {
    CFMutableDictionaryRef v63 = v36;
    if (*((char *)v2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&v76, (const std::string::value_type *)*v2, v2[1]);
    }
    else
    {
      long long v76 = *(_OWORD *)v2;
      *(void *)&long long v77 = v2[2];
    }
    uint64_t v40 = (config::build *)ctu::cf::insert<char const*,std::string>(v38, (const __CFString **)*MEMORY[0x1E4F4C770], (uint64_t)&v76, (uint64_t)v8, v37);
    if (SBYTE7(v77) < 0) {
      operator delete((void *)v76);
    }
    config::build::version(v40);
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&v76, buf.__r_.__value_.__l.__data_, buf.__r_.__value_.__l.__size_);
    }
    else
    {
      long long v76 = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
      *(void *)&long long v77 = *((void *)&buf.__r_.__value_.__l + 2);
    }
    ctu::cf::insert<char const*,std::string>(v38, (const __CFString **)*MEMORY[0x1E4F4C778], (uint64_t)&v76, (uint64_t)v8, v41);
    if (SBYTE7(v77) < 0)
    {
      operator delete((void *)v76);
      if ((SHIBYTE(buf.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_98;
      }
    }
    else if ((SHIBYTE(buf.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_98;
    }
    operator delete(buf.__r_.__value_.__l.__data_);
LABEL_98:
    CFDictionaryRef v42 = (char *)operator new(0x28uLL);
    strcpy(v42, "AppleBasebandServices_Manager-1211");
    std::string::__init_copy_ctor_external((std::string *)&v76, v42, 0x22uLL);
    ctu::cf::insert<char const*,std::string>(v38, (const __CFString **)*MEMORY[0x1E4F4C520], (uint64_t)&v76, (uint64_t)v8, v43);
    if (SBYTE7(v77) < 0) {
      operator delete((void *)v76);
    }
    operator delete(v42);
    config::hw::product(v44);
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&v76, buf.__r_.__value_.__l.__data_, buf.__r_.__value_.__l.__size_);
    }
    else
    {
      long long v76 = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
      *(void *)&long long v77 = *((void *)&buf.__r_.__value_.__l + 2);
    }
    ctu::cf::insert<char const*,std::string>(v38, (const __CFString **)*MEMORY[0x1E4F4C518], (uint64_t)&v76, (uint64_t)v8, v45);
    if (SBYTE7(v77) < 0)
    {
      operator delete((void *)v76);
      if ((SHIBYTE(buf.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_107;
      }
    }
    else if ((SHIBYTE(buf.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_107;
    }
    operator delete(buf.__r_.__value_.__l.__data_);
LABEL_107:
    pid_t v46 = getpid();
    std::to_string(&buf, v46);
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&v76, buf.__r_.__value_.__l.__data_, buf.__r_.__value_.__l.__size_);
    }
    else
    {
      long long v76 = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
      *(void *)&long long v77 = *((void *)&buf.__r_.__value_.__l + 2);
    }
    std::string v48 = (capabilities::radio *)ctu::cf::insert<char const*,std::string>(v38, (const __CFString **)*MEMORY[0x1E4F4C2A0], (uint64_t)&v76, (uint64_t)v8, v47);
    if (SBYTE7(v77) < 0)
    {
      operator delete((void *)v76);
      if ((SHIBYTE(buf.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_114;
      }
    }
    else if ((SHIBYTE(buf.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_114;
    }
    operator delete(buf.__r_.__value_.__l.__data_);
LABEL_114:
    capabilities::radio::radioType((uint64_t *)&buf, v48);
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&v76, buf.__r_.__value_.__l.__data_, buf.__r_.__value_.__l.__size_);
    }
    else
    {
      long long v76 = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
      *(void *)&long long v77 = *((void *)&buf.__r_.__value_.__l + 2);
    }
    ctu::cf::insert<char const*,std::string>(v38, (const __CFString **)*MEMORY[0x1E4F4C780], (uint64_t)&v76, (uint64_t)v8, v49);
    if (SBYTE7(v77) < 0)
    {
      operator delete((void *)v76);
      if ((SHIBYTE(buf.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_121;
      }
    }
    else if ((SHIBYTE(buf.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_121;
    }
    operator delete(buf.__r_.__value_.__l.__data_);
LABEL_121:
    config::hw::getBootArgs(&buf);
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&v76, buf.__r_.__value_.__l.__data_, buf.__r_.__value_.__l.__size_);
    }
    else
    {
      long long v76 = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
      *(void *)&long long v77 = *((void *)&buf.__r_.__value_.__l + 2);
    }
    ctu::cf::insert<char const*,std::string>(v38, (const __CFString **)*MEMORY[0x1E4F4C648], (uint64_t)&v76, (uint64_t)v8, v50);
    if (SBYTE7(v77) < 0)
    {
      operator delete((void *)v76);
      if ((SHIBYTE(buf.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_128;
      }
    }
    else if ((SHIBYTE(buf.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_128;
    }
    operator delete(buf.__r_.__value_.__l.__data_);
LABEL_128:
    pthread_mutex_lock(&ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance);
    xpc_object_t v51 = (os_unfair_lock_s *)off_1EBBDD340;
    if (!off_1EBBDD340)
    {
      SharedData::create_default_global(&v76);
      long long v52 = v76;
      long long v76 = 0uLL;
      std::string v53 = (std::__shared_weak_count *)*(&off_1EBBDD340 + 1);
      off_1EBBDD340 = v52;
      if (v53 && !atomic_fetch_add(&v53->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
        std::__shared_weak_count::__release_weak(v53);
      }
      int v54 = (std::__shared_weak_count *)*((void *)&v76 + 1);
      if (*((void *)&v76 + 1)
        && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v76 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
        std::__shared_weak_count::__release_weak(v54);
      }
      xpc_object_t v51 = (os_unfair_lock_s *)off_1EBBDD340;
    }
    v68.__r_.__value_.__r.__words[0] = (std::string::size_type)v51;
    v68.__r_.__value_.__l.__size_ = *(&off_1EBBDD340 + 1);
    if (*(&off_1EBBDD340 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDD340 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    pthread_mutex_unlock(&ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance);
    uint64_t v55 = (const void *)*MEMORY[0x1E4F4C5D0];
    size_t v56 = strlen((const char *)*MEMORY[0x1E4F4C5D0]);
    if (v56 > 0x7FFFFFFFFFFFFFF7) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    std::string::size_type v57 = v56;
    if (v56 >= 0x17)
    {
      uint64_t v59 = (v56 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v56 | 7) != 0x17) {
        uint64_t v59 = v56 | 7;
      }
      uint64_t v60 = v59 + 1;
      p_std::string buf = (std::string *)operator new(v59 + 1);
      buf.__r_.__value_.__l.__size_ = v57;
      buf.__r_.__value_.__r.__words[2] = v60 | 0x8000000000000000;
      buf.__r_.__value_.__r.__words[0] = (std::string::size_type)p_buf;
    }
    else
    {
      *((unsigned char *)&buf.__r_.__value_.__s + 23) = v56;
      p_std::string buf = &buf;
      if (!v56) {
        goto LABEL_146;
      }
    }
    memmove(p_buf, v55, v57);
LABEL_146:
    p_buf->__r_.__value_.__s.__data_[v57] = 0;
    CFMutableDictionaryRef v82 = v63;
    *(void *)&long long v76 = &buf;
    *((void *)&v76 + 1) = &v82;
    *(void *)&long long v77 = v51;
    ctu::SharedLockable<SharedData>::execute_sync<BOOL SharedData::setPreference<__CFDictionary *>(std::string const&,__CFDictionary *)::{lambda(void)#1}>(v51 + 6, (uint64_t *)&v76);
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf.__r_.__value_.__l.__data_);
    }
    uint64_t v61 = (std::__shared_weak_count *)v68.__r_.__value_.__l.__size_;
    if (v68.__r_.__value_.__l.__size_
      && !atomic_fetch_add((atomic_ullong *volatile)(v68.__r_.__value_.__l.__size_ + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
      CFMutableDictionaryRef v62 = v63;
    }
    else
    {
      CFMutableDictionaryRef v62 = v63;
    }
    CFRelease(v62);
    return;
  }
  long long v39 = *(NSObject **)(v3 + 88);
  if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
  {
    LOWORD(v76) = 0;
    _os_log_error_impl(&dword_1C5767000, v39, OS_LOG_TYPE_ERROR, "Failed to create dictionary to update abm domain preferences", (uint8_t *)&v76, 2u);
  }
}

void sub_1C5845374(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10, void *aBlock, char a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,void *__p,uint64_t a44,int a45,__int16 a46,char a47,char a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
}

void sub_1C5845638()
{
}

void RadioModule::queryFactoryCalibrationStatus_sync(RadioModule *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 16);
  if (!v2 || (v3 = *((void *)this + 15), (int v4 = std::__shared_weak_count::lock(v2)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  long long v5 = v4;
  p_shared_weak_owners = &v4->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v5);
  }
  unint64_t v28 = (void *)0xAAAAAAAAAAAAAAAALL;
  dispatch_object_t v29 = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN11RadioModule34queryFactoryCalibrationStatus_syncEv_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_200;
  void aBlock[4] = this;
  void aBlock[5] = v3;
  xpc_object_t v27 = v5;
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  size_t v7 = _Block_copy(aBlock);
  CFAllocatorRef v8 = *((void *)this + 17);
  if (v8) {
    dispatch_retain(v8);
  }
  unint64_t v28 = v7;
  dispatch_object_t v29 = v8;
  unint64_t v24 = 0xAAAAAAAAAAAAAAAALL;
  long long v25 = (std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL;
  int v9 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  uint64_t v10 = off_1EBBDD2A0;
  if (!off_1EBBDD2A0)
  {
    CommandDriverFactory::create_default_global((uint64_t *)&v30, v9);
    long long v11 = v30;
    long long v30 = 0uLL;
    uint64_t v12 = (std::__shared_weak_count *)*(&off_1EBBDD2A0 + 1);
    off_1EBBDD2A0 = v11;
    if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
    uint64_t v13 = (std::__shared_weak_count *)*((void *)&v30 + 1);
    if (*((void *)&v30 + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v30 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
    uint64_t v10 = off_1EBBDD2A0;
  }
  CFTypeRef v14 = (std::__shared_weak_count *)*(&off_1EBBDD2A0 + 1);
  uint64_t v20 = v10;
  uint64_t v21 = *(&off_1EBBDD2A0 + 1);
  if (*(&off_1EBBDD2A0 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDD2A0 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(unint64_t *__return_ptr, uint64_t))(*(void *)v10 + 16))(&v22, v10);
  unint64_t v24 = 0;
  long long v25 = 0;
  if (v23)
  {
    long long v25 = std::__shared_weak_count::lock(v23);
    if (v25) {
      unint64_t v24 = v22;
    }
    if (v23) {
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
    unint64_t v15 = v24;
    if (!v24) {
      goto LABEL_33;
    }
  }
  else
  {
    unint64_t v15 = v24;
    if (!v24) {
      goto LABEL_33;
    }
  }
  unint64_t v16 = v28;
  if (v28) {
    unint64_t v16 = _Block_copy(v28);
  }
  uint64_t v18 = v16;
  dispatch_object_t object = v29;
  if (v29) {
    dispatch_retain(v29);
  }
  (*(void (**)(unint64_t, void **))(*(void *)v15 + 120))(v15, &v18);
  if (object) {
    dispatch_release(object);
  }
  if (v18) {
    _Block_release(v18);
  }
LABEL_33:
  uint64_t v17 = v25;
  if (v25 && !atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  if (v29) {
    dispatch_release(v29);
  }
  if (v28) {
    _Block_release(v28);
  }
  if (v27) {
    std::__shared_weak_count::__release_weak(v27);
  }
  std::__shared_weak_count::__release_weak(v5);
}

void sub_1C58459FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,std::__shared_weak_count *a24)
{
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>::~callback(v25 - 64);
  if (a24) {
    std::__shared_weak_count::__release_weak(a24);
  }
  std::__shared_weak_count::__release_weak(v24);
  _Unwind_Resume(a1);
}

void RadioModule::queryRFCalibrationStatus_sync(RadioModule *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 16);
  if (!v2 || (v3 = *((void *)this + 15), (int v4 = std::__shared_weak_count::lock(v2)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  long long v5 = v4;
  p_shared_weak_owners = &v4->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v5);
  }
  unint64_t v28 = (void *)0xAAAAAAAAAAAAAAAALL;
  dispatch_object_t v29 = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN11RadioModule29queryRFCalibrationStatus_syncEv_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_203;
  void aBlock[4] = this;
  void aBlock[5] = v3;
  xpc_object_t v27 = v5;
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  size_t v7 = _Block_copy(aBlock);
  CFAllocatorRef v8 = *((void *)this + 17);
  if (v8) {
    dispatch_retain(v8);
  }
  unint64_t v28 = v7;
  dispatch_object_t v29 = v8;
  unint64_t v24 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v25 = (std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL;
  int v9 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  uint64_t v10 = off_1EBBDD2A0;
  if (!off_1EBBDD2A0)
  {
    CommandDriverFactory::create_default_global((uint64_t *)&v30, v9);
    long long v11 = v30;
    long long v30 = 0uLL;
    uint64_t v12 = (std::__shared_weak_count *)*(&off_1EBBDD2A0 + 1);
    off_1EBBDD2A0 = v11;
    if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
    uint64_t v13 = (std::__shared_weak_count *)*((void *)&v30 + 1);
    if (*((void *)&v30 + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v30 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
    uint64_t v10 = off_1EBBDD2A0;
  }
  CFTypeRef v14 = (std::__shared_weak_count *)*(&off_1EBBDD2A0 + 1);
  uint64_t v20 = v10;
  uint64_t v21 = *(&off_1EBBDD2A0 + 1);
  if (*(&off_1EBBDD2A0 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDD2A0 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(unint64_t *__return_ptr, uint64_t))(*(void *)v10 + 16))(&v22, v10);
  unint64_t v24 = 0;
  uint64_t v25 = 0;
  if (v23)
  {
    uint64_t v25 = std::__shared_weak_count::lock(v23);
    if (v25) {
      unint64_t v24 = v22;
    }
    if (v23) {
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
    unint64_t v15 = v24;
    if (!v24) {
      goto LABEL_33;
    }
  }
  else
  {
    unint64_t v15 = v24;
    if (!v24) {
      goto LABEL_33;
    }
  }
  unint64_t v16 = v28;
  if (v28) {
    unint64_t v16 = _Block_copy(v28);
  }
  uint64_t v18 = v16;
  dispatch_object_t object = v29;
  if (v29) {
    dispatch_retain(v29);
  }
  (*(void (**)(unint64_t, void **))(*(void *)v15 + 128))(v15, &v18);
  if (object) {
    dispatch_release(object);
  }
  if (v18) {
    _Block_release(v18);
  }
LABEL_33:
  uint64_t v17 = v25;
  if (v25 && !atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  if (v29) {
    dispatch_release(v29);
  }
  if (v28) {
    _Block_release(v28);
  }
  if (v27) {
    std::__shared_weak_count::__release_weak(v27);
  }
  std::__shared_weak_count::__release_weak(v5);
}

void sub_1C5845E00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,std::__shared_weak_count *a24)
{
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>::~callback(v25 - 64);
  if (a24) {
    std::__shared_weak_count::__release_weak(a24);
  }
  std::__shared_weak_count::__release_weak(v24);
  _Unwind_Resume(a1);
}

void RadioModule::queryFieldTestConfig_sync(RadioModule *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 16);
  if (!v2 || (v3 = *((void *)this + 15), (int v4 = std::__shared_weak_count::lock(v2)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  long long v5 = v4;
  p_shared_weak_owners = &v4->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v5);
  }
  unint64_t v28 = (void *)0xAAAAAAAAAAAAAAAALL;
  dispatch_object_t v29 = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN11RadioModule25queryFieldTestConfig_syncEv_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_206_0;
  void aBlock[4] = this;
  void aBlock[5] = v3;
  xpc_object_t v27 = v5;
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  size_t v7 = _Block_copy(aBlock);
  CFAllocatorRef v8 = *((void *)this + 17);
  if (v8) {
    dispatch_retain(v8);
  }
  unint64_t v28 = v7;
  dispatch_object_t v29 = v8;
  unint64_t v24 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v25 = (std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL;
  int v9 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  uint64_t v10 = off_1EBBDD2A0;
  if (!off_1EBBDD2A0)
  {
    CommandDriverFactory::create_default_global((uint64_t *)&v30, v9);
    long long v11 = v30;
    long long v30 = 0uLL;
    uint64_t v12 = (std::__shared_weak_count *)*(&off_1EBBDD2A0 + 1);
    off_1EBBDD2A0 = v11;
    if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
    uint64_t v13 = (std::__shared_weak_count *)*((void *)&v30 + 1);
    if (*((void *)&v30 + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v30 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
    uint64_t v10 = off_1EBBDD2A0;
  }
  CFTypeRef v14 = (std::__shared_weak_count *)*(&off_1EBBDD2A0 + 1);
  uint64_t v20 = v10;
  uint64_t v21 = *(&off_1EBBDD2A0 + 1);
  if (*(&off_1EBBDD2A0 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDD2A0 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(unint64_t *__return_ptr, uint64_t))(*(void *)v10 + 16))(&v22, v10);
  unint64_t v24 = 0;
  uint64_t v25 = 0;
  if (v23)
  {
    uint64_t v25 = std::__shared_weak_count::lock(v23);
    if (v25) {
      unint64_t v24 = v22;
    }
    if (v23) {
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
    unint64_t v15 = v24;
    if (!v24) {
      goto LABEL_33;
    }
  }
  else
  {
    unint64_t v15 = v24;
    if (!v24) {
      goto LABEL_33;
    }
  }
  unint64_t v16 = v28;
  if (v28) {
    unint64_t v16 = _Block_copy(v28);
  }
  uint64_t v18 = v16;
  dispatch_object_t object = v29;
  if (v29) {
    dispatch_retain(v29);
  }
  (*(void (**)(unint64_t, void **))(*(void *)v15 + 184))(v15, &v18);
  if (object) {
    dispatch_release(object);
  }
  if (v18) {
    _Block_release(v18);
  }
LABEL_33:
  uint64_t v17 = v25;
  if (v25 && !atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  if (v29) {
    dispatch_release(v29);
  }
  if (v28) {
    _Block_release(v28);
  }
  if (v27) {
    std::__shared_weak_count::__release_weak(v27);
  }
  std::__shared_weak_count::__release_weak(v5);
}

void sub_1C5846204(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,std::__shared_weak_count *a24)
{
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>::~callback(v25 - 64);
  if (a24) {
    std::__shared_weak_count::__release_weak(a24);
  }
  std::__shared_weak_count::__release_weak(v24);
  _Unwind_Resume(a1);
}

void RadioModule::stopMonitoringBatteryInfo_sync(RadioModule *this)
{
  if (*((void *)this + 38))
  {
    uint64_t v1 = (ctu::iokit::Controller *)*((void *)this + 38);
    ctu::iokit::Controller::stopBatteryInfoNotifications(v1);
  }
  else
  {
    uint64_t v2 = *((void *)this + 11);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v3 = 0;
      _os_log_error_impl(&dword_1C5767000, v2, OS_LOG_TYPE_ERROR, "Invalid fIOKitController", v3, 2u);
    }
  }
}

void ___ZN11RadioModule25finishInitialization_syncEv_block_invoke_173(void *a1)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    uint64_t v3 = a1[4];
    int v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      long long v5 = v4;
      if (a1[5])
      {
        uint64_t v6 = *(NSObject **)(v3 + 88);
        BOOL v7 = os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
        if (v7)
        {
          CFAllocatorRef v8 = (void *)(v3 + 152);
          if (*(char *)(v3 + 175) < 0) {
            CFAllocatorRef v8 = (void *)*v8;
          }
          *(_DWORD *)std::string buf = 136315138;
          *(void *)&uint8_t buf[4] = v8;
          _os_log_impl(&dword_1C5767000, v6, OS_LOG_TYPE_DEFAULT, "#I Baseband FW Version: %s", buf, 0xCu);
        }
        if (capabilities::abs::supportsCalibrationQuery((capabilities::abs *)v7))
        {
          int v9 = *(NSObject **)(v3 + 88);
          BOOL v10 = os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
          if (v10)
          {
            uint64_t v11 = capabilities::radio::supportsFactoryCalibrationV2((capabilities::radio *)v10)
                ? radio::asStringV2()
                : radio::asString();
            uint64_t v12 = v11;
            radio::RFCalibration_t::toString((uint64_t *)buf, (radio::RFCalibration_t *)(v3 + 200));
            uint64_t v13 = v17 >= 0 ? buf : *(unsigned char **)buf;
            *(_DWORD *)uint64_t v18 = 136315394;
            uint64_t v19 = (unsigned char *)v12;
            __int16 v20 = 2080;
            uint64_t v21 = v13;
            _os_log_impl(&dword_1C5767000, v9, OS_LOG_TYPE_DEFAULT, "#I \n--- Factory and RF calibration ---\n%s\n%s\n----------------------------------", v18, 0x16u);
            if (v17 < 0) {
              operator delete(*(void **)buf);
            }
          }
        }
        if (MEMORY[0x1C8792D30](*(void *)(v3 + 248)) == MEMORY[0x1E4F14590])
        {
          CFTypeRef v14 = *(NSObject **)(v3 + 88);
          if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
          {
            xpc::object::to_string((uint64_t *)buf, (xpc::object *)(v3 + 248));
            if (v17 >= 0) {
              unint64_t v15 = buf;
            }
            else {
              unint64_t v15 = *(unsigned char **)buf;
            }
            *(_DWORD *)uint64_t v18 = 136315138;
            uint64_t v19 = v15;
            _os_log_impl(&dword_1C5767000, v14, OS_LOG_TYPE_DEFAULT, "#I Baseband field test config:\n%s", v18, 0xCu);
            if (v17 < 0) {
              operator delete(*(void **)buf);
            }
          }
        }
      }
      if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void sub_1C5846578(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1C584658C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1C58465A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1C58465B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void RadioModule::handleResetSPMI_sync(RadioModule *this, int a2)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  int v4 = *((void *)this + 11);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = 67109120;
    LODWORD(v9) = a2;
    _os_log_impl(&dword_1C5767000, v4, OS_LOG_TYPE_DEFAULT, "#I Received request to reset SPMI with data (0x%x)", (uint8_t *)&v8, 8u);
  }
  int v5 = TelephonyBasebandResetSPMI();
  uint64_t v6 = *((void *)this + 11);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    BOOL v7 = " not ";
    if (v5) {
      BOOL v7 = " ";
    }
    int v8 = 136315138;
    int v9 = v7;
    _os_log_impl(&dword_1C5767000, v6, OS_LOG_TYPE_DEFAULT, "#I Request to reset SPMI was%ssuccessful", (uint8_t *)&v8, 0xCu);
  }
}

void RadioModule::sleep(void *a1, dispatch_object_t *a2)
{
  uint64_t v3 = *a2;
  if (*a2)
  {
    dispatch_retain(*a2);
    dispatch_group_enter(v3);
  }
  int v4 = (std::__shared_weak_count *)a1[16];
  if (!v4 || (uint64_t v5 = a1[15], (v6 = std::__shared_weak_count::lock(v4)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  BOOL v7 = v6;
  int v8 = operator new(0x10uLL);
  void *v8 = a1;
  v8[1] = v3;
  int v9 = a1[17];
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v10 = operator new(0x18uLL);
  *uint64_t v10 = v8;
  v10[1] = v5;
  _DWORD v10[2] = v7;
  dispatch_async_f(v9, v10, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<RadioModule>::execute_wrapped<RadioModule::sleep(dispatch::group_session)::$_0>(RadioModule::sleep(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<RadioModule::sleep(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<RadioModule::sleep(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke);
  if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void RadioModule::wake(void *a1, dispatch_object_t *a2)
{
  uint64_t v3 = *a2;
  if (*a2)
  {
    dispatch_retain(*a2);
    dispatch_group_enter(v3);
  }
  int v4 = (std::__shared_weak_count *)a1[16];
  if (!v4 || (uint64_t v5 = a1[15], (v6 = std::__shared_weak_count::lock(v4)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  BOOL v7 = v6;
  int v8 = operator new(0x10uLL);
  void *v8 = a1;
  v8[1] = v3;
  int v9 = a1[17];
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v10 = operator new(0x18uLL);
  *uint64_t v10 = v8;
  v10[1] = v5;
  _DWORD v10[2] = v7;
  dispatch_async_f(v9, v10, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<RadioModule>::execute_wrapped<RadioModule::wake(dispatch::group_session)::$_0>(RadioModule::wake(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<RadioModule::wake(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<RadioModule::wake(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke);
  if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void ___ZN11RadioModule15getVersion_syncEN8dispatch5blockIU13block_pointerFvNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEEE_block_invoke(void *a1, std::string::size_type *a2, const __CFDictionary **a3)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  int v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    uint64_t v7 = a1[4];
    int v8 = std::__shared_weak_count::lock(v4);
    uint64_t v19 = v8;
    if (v8)
    {
      int v9 = v8;
      if (!a1[5]) {
        goto LABEL_28;
      }
      std::string::size_type v10 = *a2;
      if (v10 ? ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get : 0)
      {
        uint64_t v12 = *(NSObject **)(v7 + 88);
        if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
        {
          LODWORD(buf.__r_.__value_.__l.__data_) = 138412290;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v10;
          _os_log_error_impl(&dword_1C5767000, v12, OS_LOG_TYPE_ERROR, "%@", (uint8_t *)&buf, 0xCu);
        }
      }
      else
      {
        CFDictionaryRef v13 = *a3;
        if (*a3) {
          CFTypeRef v14 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
        }
        else {
          CFTypeRef v14 = 0;
        }
        if (v14)
        {
          v17[0] = 0xAAAAAAAAAAAAAAAALL;
          v17[1] = 0xAAAAAAAAAAAAAAAALL;
          ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v17, v13);
          ctu::cf::map_adapter::getString();
          unint64_t v15 = (void **)(v7 + 152);
          if (*(char *)(v7 + 175) < 0) {
            operator delete(*v15);
          }
          *(_OWORD *)unint64_t v15 = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
          *(void *)(v7 + 168) = *((void *)&buf.__r_.__value_.__l + 2);
          *((unsigned char *)&buf.__r_.__value_.__s + 23) = 0;
          buf.__r_.__value_.__s.__data_[0] = 0;
          MEMORY[0x1C8791160](v17);
        }
      }
      uint64_t v16 = a1[7];
      if (*(char *)(v7 + 175) < 0) {
        std::string::__init_copy_ctor_external(&buf, *(const std::string::value_type **)(v7 + 152), *(void *)(v7 + 160));
      }
      else {
        std::string buf = *(std::string *)(v7 + 152);
      }
      (*(void (**)(uint64_t, std::string *))(v16 + 16))(v16, &buf);
      if ((SHIBYTE(buf.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_28:
        if (atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
          return;
        }
        goto LABEL_22;
      }
      operator delete(buf.__r_.__value_.__l.__data_);
      if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
LABEL_22:
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
}

void sub_1C5846B54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, char a18)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  MEMORY[0x1C8791160](&a16);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  _Unwind_Resume(a1);
}

void sub_1C5846B80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1C5846B98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void *__copy_helper_block_e8_40c36_ZTSNSt3__18weak_ptrI11RadioModuleEE56c106_ZTSN8dispatch5blockIU13block_pointerFvNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEEE(void *a1, void *a2)
{
  uint64_t v3 = a2[6];
  a1[5] = a2[5];
  a1[6] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  xpc_object_t result = (void *)a2[7];
  if (result) {
    xpc_object_t result = _Block_copy(result);
  }
  a1[7] = result;
  return result;
}

void __destroy_helper_block_e8_40c36_ZTSNSt3__18weak_ptrI11RadioModuleEE56c106_ZTSN8dispatch5blockIU13block_pointerFvNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEEE(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 56);
  if (v2) {
    _Block_release(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3)
  {
    std::__shared_weak_count::__release_weak(v3);
  }
}

void ___ZN11RadioModule21getOperatingMode_syncEN8dispatch5blockIU13block_pointerFviEEE_block_invoke(void *a1, uint64_t *a2, const __CFDictionary **a3)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  int v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    uint64_t v7 = a1[4];
    int v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      int v9 = v8;
      if (a1[5])
      {
        uint64_t v10 = *a2;
        if (v10) {
          uint64_t v11 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
        }
        else {
          uint64_t v11 = 0;
        }
        if (v11)
        {
          uint64_t v12 = *(NSObject **)(v7 + 88);
          if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)std::string buf = 138412290;
            *(void *)&uint8_t buf[4] = v10;
            _os_log_error_impl(&dword_1C5767000, v12, OS_LOG_TYPE_ERROR, "%@", buf, 0xCu);
          }
        }
        else
        {
          CFDictionaryRef v13 = *a3;
          if (*a3) {
            CFTypeRef v14 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
          }
          else {
            CFTypeRef v14 = 0;
          }
          if (v14)
          {
            memset(buf, 170, 16);
            ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)buf, v13);
            ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)buf, (const __CFString *)*MEMORY[0x1E4FB9BD0]);
            MEMORY[0x1C8791160](buf);
          }
        }
        (*(void (**)(void))(a1[7] + 16))();
      }
      if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
}

void *__copy_helper_block_e8_40c36_ZTSNSt3__18weak_ptrI11RadioModuleEE56c43_ZTSN8dispatch5blockIU13block_pointerFviEEE(void *a1, void *a2)
{
  uint64_t v3 = a2[6];
  a1[5] = a2[5];
  a1[6] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  xpc_object_t result = (void *)a2[7];
  if (result) {
    xpc_object_t result = _Block_copy(result);
  }
  a1[7] = result;
  return result;
}

void __destroy_helper_block_e8_40c36_ZTSNSt3__18weak_ptrI11RadioModuleEE56c43_ZTSN8dispatch5blockIU13block_pointerFviEEE(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 56);
  if (v2) {
    _Block_release(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3)
  {
    std::__shared_weak_count::__release_weak(v3);
  }
}

void ___ZN11RadioModule23getResetProperties_syncEv_block_invoke(void *a1, CFErrorRef *a2, const void **a3)
{
  uint64_t v131 = *MEMORY[0x1E4F143B8];
  int v4 = (std::__shared_weak_count *)a1[6];
  if (!v4) {
    return;
  }
  uint64_t v7 = a1[4];
  int v8 = std::__shared_weak_count::lock(v4);
  uint64_t v126 = v8;
  if (!v8) {
    return;
  }
  uint64_t v125 = a1[5];
  if (!v125)
  {
    uint64_t v11 = v8;
LABEL_231:
    if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    return;
  }
  memset(&v124, 0, sizeof(v124));
  if (*a2) {
    int v9 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  }
  else {
    int v9 = 0;
  }
  if (v9)
  {
    std::string::__assign_external(&v124, "Failed to get reset properties", 0x1EuLL);
    uint64_t v10 = *(NSObject **)(v7 + 88);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      uint64_t v23 = &v124;
      if ((v124.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        uint64_t v23 = (std::string *)v124.__r_.__value_.__r.__words[0];
      }
      CFErrorRef v24 = *a2;
      *(_DWORD *)std::string buf = 136315394;
      *(void *)&uint8_t buf[4] = v23;
      *(_WORD *)&unsigned char buf[12] = 2112;
      *(void *)&buf[14] = v24;
      _os_log_error_impl(&dword_1C5767000, v10, OS_LOG_TYPE_ERROR, "%s\n:%@", buf, 0x16u);
    }
    CFErrorGetCode(*a2);
    goto LABEL_228;
  }
  uint64_t v12 = *a3;
  CFTypeRef cf = v12;
  if (v12) {
    CFRetain(v12);
  }
  uint64_t v13 = radio::BasebandProperties::create();
  *(void *)(v7 + 288) = v13;
  if (cf)
  {
    CFRelease(cf);
    if (*(unsigned char *)(v7 + 288)) {
      goto LABEL_15;
    }
LABEL_27:
    std::string::__assign_external(&v124, "Invalid reset properties", 0x18uLL);
    __int16 v20 = *(NSObject **)(v7 + 88);
    if (!os_log_type_enabled(v20, OS_LOG_TYPE_ERROR)) {
      goto LABEL_196;
    }
    uint64_t v21 = &v124;
    if ((v124.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      uint64_t v21 = (std::string *)v124.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)std::string buf = 136315138;
    *(void *)&uint8_t buf[4] = v21;
LABEL_237:
    _os_log_error_impl(&dword_1C5767000, v20, OS_LOG_TYPE_ERROR, "%s", buf, 0xCu);
    goto LABEL_196;
  }
  if (!(_BYTE)v13) {
    goto LABEL_27;
  }
LABEL_15:
  CFTypeRef v14 = *(NSObject **)(v7 + 88);
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    if (*(unsigned char *)(v7 + 289)) {
      unint64_t v15 = "true";
    }
    else {
      unint64_t v15 = "false";
    }
    int v16 = *(unsigned __int16 *)(v7 + 290);
    int v17 = *(_DWORD *)(v7 + 292);
    *(_DWORD *)std::string buf = 136315650;
    *(void *)&uint8_t buf[4] = v15;
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = v16;
    *(_WORD *)&unsigned char buf[18] = 1024;
    *(_DWORD *)&buf[20] = v17;
    _os_log_impl(&dword_1C5767000, v14, OS_LOG_TYPE_DEFAULT, "#I Baseband properties:\n    Coredump supported: %s\n    PowerSequence index: %u\n    Baseband version: 0x%08x", buf, 0x18u);
  }
  if ((TelephonyUtilIsInternalBuild() & 1) == 0
    && (TelephonyUtilIsCarrierBuild() & 1) == 0
    && !TelephonyUtilIsVendorBuild())
  {
    goto LABEL_193;
  }
  LOBYTE(valuePtr) = *(unsigned char *)(v7 + 289) ^ 1;
  pthread_mutex_lock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
  if (!qword_1EBBDD0C0)
  {
    uint64_t v19 = (std::__shared_weak_count_vtbl *)operator new(0x18uLL);
    MEMORY[0x1C8791170](v19, @"com.apple.AppleBasebandManager", *MEMORY[0x1E4F1D3F0]);
    uint64_t v18 = (std::__shared_weak_count *)operator new(0x20uLL);
    v18->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20F3BE0;
    v18->__shared_owners_ = 0;
    v18->__shared_weak_owners_ = 0;
    v18[1].__vftable = v19;
    uint64_t v22 = (std::__shared_weak_count *)off_1EBBDD0C8;
    qword_1EBBDD0C0 = (uint64_t)v19;
    off_1EBBDD0C8 = v18;
    if (!v22)
    {
      uint64_t v121 = (uint64_t)v19;
      long long v122 = v18;
      goto LABEL_38;
    }
    if (!atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  uint64_t v19 = (std::__shared_weak_count_vtbl *)qword_1EBBDD0C0;
  uint64_t v18 = (std::__shared_weak_count *)off_1EBBDD0C8;
  uint64_t v121 = qword_1EBBDD0C0;
  long long v122 = (std::__shared_weak_count *)off_1EBBDD0C8;
  if (off_1EBBDD0C8) {
LABEL_38:
  }
    atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
  pthread_mutex_unlock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
  uint64_t v25 = (const void *)*MEMORY[0x1E4FB9C28];
  size_t v26 = strlen((const char *)*MEMORY[0x1E4FB9C28]);
  if (v26 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v27 = v26;
  if (v26 >= 0x17)
  {
    uint64_t v29 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v26 | 7) != 0x17) {
      uint64_t v29 = v26 | 7;
    }
    uint64_t v30 = v29 + 1;
    unint64_t v28 = operator new(v29 + 1);
    *(void *)&uint8_t buf[8] = v27;
    *(void *)&uint8_t buf[16] = v30 | 0x8000000000000000;
    *(void *)std::string buf = v28;
    goto LABEL_46;
  }
  buf[23] = v26;
  unint64_t v28 = buf;
  if (v26) {
LABEL_46:
  }
    memmove(v28, v25, v27);
  v28[v27] = 0;
  if (buf[23] >= 0) {
    unint64_t v31 = buf;
  }
  else {
    unint64_t v31 = *(char **)buf;
  }
  BOOL v32 = ctu::cf::plist_adapter::set<BOOL>((uint64_t)v19, *(unsigned __int8 *)(v7 + 289), v31, 1);
  if ((buf[23] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  if (v122 && !atomic_fetch_add(&v122->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
    std::__shared_weak_count::__release_weak(v122);
  }
  if (!v32) {
    goto LABEL_79;
  }
  pthread_mutex_lock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
  if (!qword_1EBBDD0C0)
  {
    uint64_t v34 = (std::__shared_weak_count_vtbl *)operator new(0x18uLL);
    MEMORY[0x1C8791170](v34, @"com.apple.AppleBasebandManager", *MEMORY[0x1E4F1D3F0]);
    uint64_t v33 = (std::__shared_weak_count *)operator new(0x20uLL);
    v33->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20F3BE0;
    v33->__shared_owners_ = 0;
    v33->__shared_weak_owners_ = 0;
    v33[1].__vftable = v34;
    CFTypeID v35 = (std::__shared_weak_count *)off_1EBBDD0C8;
    qword_1EBBDD0C0 = (uint64_t)v34;
    off_1EBBDD0C8 = v33;
    if (!v35)
    {
      uint64_t v121 = (uint64_t)v34;
      long long v122 = v33;
      goto LABEL_63;
    }
    if (!atomic_fetch_add(&v35->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  uint64_t v34 = (std::__shared_weak_count_vtbl *)qword_1EBBDD0C0;
  uint64_t v33 = (std::__shared_weak_count *)off_1EBBDD0C8;
  uint64_t v121 = qword_1EBBDD0C0;
  long long v122 = (std::__shared_weak_count *)off_1EBBDD0C8;
  if (off_1EBBDD0C8) {
LABEL_63:
  }
    atomic_fetch_add_explicit(&v33->__shared_owners_, 1uLL, memory_order_relaxed);
  pthread_mutex_unlock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
  size_t v36 = strlen((const char *)v25);
  if (v36 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v37 = v36;
  if (v36 >= 0x17)
  {
    uint64_t v39 = (v36 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v36 | 7) != 0x17) {
      uint64_t v39 = v36 | 7;
    }
    uint64_t v40 = v39 + 1;
    uint64_t v38 = operator new(v39 + 1);
    *(void *)&uint8_t buf[8] = v37;
    *(void *)&uint8_t buf[16] = v40 | 0x8000000000000000;
    *(void *)std::string buf = v38;
    goto LABEL_71;
  }
  buf[23] = v36;
  uint64_t v38 = buf;
  if (v36) {
LABEL_71:
  }
    memmove(v38, v25, v37);
  v38[v37] = 0;
  int v41 = Preferences::getPreference<BOOL>(v34, buf, (ctu::cf *)&valuePtr);
  if ((buf[23] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  if (v122 && !atomic_fetch_add(&v122->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
    std::__shared_weak_count::__release_weak(v122);
  }
  if (!v41 || valuePtr != *(unsigned __int8 *)(v7 + 289))
  {
LABEL_79:
    CFDictionaryRef v42 = *(NSObject **)(v7 + 88);
    if (os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_error_impl(&dword_1C5767000, v42, OS_LOG_TYPE_ERROR, "Failed to save CoredumpSupported property in ABMPreferences file", buf, 2u);
    }
  }
  __int16 v120 = *(_WORD *)(v7 + 290) == 0;
  pthread_mutex_lock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
  if (!qword_1EBBDD0C0)
  {
    xpc_object_t v44 = (CFStringRef *)operator new(0x18uLL);
    MEMORY[0x1C8791170](v44, @"com.apple.AppleBasebandManager", *MEMORY[0x1E4F1D3F0]);
    CFAllocatorRef v43 = (std::__shared_weak_count *)operator new(0x20uLL);
    v43->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20F3BE0;
    v43->__shared_owners_ = 0;
    v43->__shared_weak_owners_ = 0;
    v43[1].__vftable = (std::__shared_weak_count_vtbl *)v44;
    CFAllocatorRef v45 = (std::__shared_weak_count *)off_1EBBDD0C8;
    qword_1EBBDD0C0 = (uint64_t)v44;
    off_1EBBDD0C8 = v43;
    if (!v45)
    {
      uint64_t v121 = (uint64_t)v44;
      long long v122 = v43;
      goto LABEL_88;
    }
    if (!atomic_fetch_add(&v45->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
  xpc_object_t v44 = (CFStringRef *)qword_1EBBDD0C0;
  CFAllocatorRef v43 = (std::__shared_weak_count *)off_1EBBDD0C8;
  uint64_t v121 = qword_1EBBDD0C0;
  long long v122 = (std::__shared_weak_count *)off_1EBBDD0C8;
  if (off_1EBBDD0C8) {
LABEL_88:
  }
    atomic_fetch_add_explicit(&v43->__shared_owners_, 1uLL, memory_order_relaxed);
  pthread_mutex_unlock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
  pid_t v46 = (const void *)*MEMORY[0x1E4FB9C40];
  size_t v47 = strlen((const char *)*MEMORY[0x1E4FB9C40]);
  if (v47 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v48 = v47;
  if (v47 >= 0x17)
  {
    uint64_t v50 = (v47 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v47 | 7) != 0x17) {
      uint64_t v50 = v47 | 7;
    }
    uint64_t v51 = v50 + 1;
    CFAllocatorRef v49 = operator new(v50 + 1);
    *(void *)&uint8_t buf[8] = v48;
    *(void *)&uint8_t buf[16] = v51 | 0x8000000000000000;
    *(void *)std::string buf = v49;
    goto LABEL_96;
  }
  buf[23] = v47;
  CFAllocatorRef v49 = buf;
  if (v47) {
LABEL_96:
  }
    memmove(v49, v46, v48);
  v49[v48] = 0;
  CFStringRef v52 = (const __CFString *)*(unsigned __int16 *)(v7 + 290);
  if (buf[23] >= 0) {
    std::string v53 = buf;
  }
  else {
    std::string v53 = *(const char **)buf;
  }
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v127, v53);
  CFStringRef v54 = v127;
  CFAllocatorRef v55 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFStringRef valuePtr = v52;
  CFNumberRef v56 = CFNumberCreate(v55, kCFNumberLongLongType, &valuePtr);
  CFNumberRef v128 = v56;
  if (v56)
  {
    CFStringRef v57 = (const __CFString *)*MEMORY[0x1E4F1D3E0];
    CFPreferencesSetValue(v54, v56, v44[1], v44[2], (CFStringRef)*MEMORY[0x1E4F1D3E0]);
    BOOL v58 = CFPreferencesSynchronize(v44[1], v44[2], v57) != 0;
    CFRelease(v56);
    MEMORY[0x1C8791110](&v127);
    if ((buf[23] & 0x80000000) == 0) {
      goto LABEL_102;
    }
  }
  else
  {
    BOOL v58 = 0;
    MEMORY[0x1C8791110](&v127);
    if ((buf[23] & 0x80000000) == 0)
    {
LABEL_102:
      uint64_t v59 = v122;
      if (!v122) {
        goto LABEL_108;
      }
      goto LABEL_106;
    }
  }
  operator delete(*(void **)buf);
  uint64_t v59 = v122;
  if (!v122) {
    goto LABEL_108;
  }
LABEL_106:
  if (!atomic_fetch_add(&v59->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
    std::__shared_weak_count::__release_weak(v59);
  }
LABEL_108:
  if (!v58)
  {
LABEL_141:
    char v75 = *(NSObject **)(v7 + 88);
    if (os_log_type_enabled(v75, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_error_impl(&dword_1C5767000, v75, OS_LOG_TYPE_ERROR, "Failed to save PowerSequence property in ABMPreferences file", buf, 2u);
    }
    goto LABEL_143;
  }
  pthread_mutex_lock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
  if (!qword_1EBBDD0C0)
  {
    uint64_t v61 = (uint64_t (***)(void *, const __CFString *))operator new(0x18uLL);
    MEMORY[0x1C8791170](v61, @"com.apple.AppleBasebandManager", *MEMORY[0x1E4F1D3F0]);
    uint64_t v60 = (std::__shared_weak_count *)operator new(0x20uLL);
    v60->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20F3BE0;
    v60->__shared_owners_ = 0;
    v60->__shared_weak_owners_ = 0;
    v60[1].__vftable = (std::__shared_weak_count_vtbl *)v61;
    CFMutableDictionaryRef v62 = (std::__shared_weak_count *)off_1EBBDD0C8;
    qword_1EBBDD0C0 = (uint64_t)v61;
    off_1EBBDD0C8 = v60;
    if (!v62)
    {
      uint64_t v121 = (uint64_t)v61;
      long long v122 = v60;
      goto LABEL_116;
    }
    if (!atomic_fetch_add(&v62->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
      std::__shared_weak_count::__release_weak(v62);
    }
  }
  uint64_t v61 = (uint64_t (***)(void *, const __CFString *))qword_1EBBDD0C0;
  uint64_t v60 = (std::__shared_weak_count *)off_1EBBDD0C8;
  uint64_t v121 = qword_1EBBDD0C0;
  long long v122 = (std::__shared_weak_count *)off_1EBBDD0C8;
  if (off_1EBBDD0C8) {
LABEL_116:
  }
    atomic_fetch_add_explicit(&v60->__shared_owners_, 1uLL, memory_order_relaxed);
  pthread_mutex_unlock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
  size_t v63 = strlen((const char *)v46);
  if (v63 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v64 = v63;
  if (v63 >= 0x17)
  {
    uint64_t v66 = (v63 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v63 | 7) != 0x17) {
      uint64_t v66 = v63 | 7;
    }
    uint64_t v67 = v66 + 1;
    char v65 = operator new(v66 + 1);
    *(void *)&uint8_t buf[8] = v64;
    *(void *)&uint8_t buf[16] = v67 | 0x8000000000000000;
    *(void *)std::string buf = v65;
    goto LABEL_124;
  }
  buf[23] = v63;
  char v65 = buf;
  if (v63) {
LABEL_124:
  }
    memmove(v65, v46, v64);
  v65[v64] = 0;
  if (buf[23] >= 0) {
    std::string v68 = buf;
  }
  else {
    std::string v68 = *(const char **)buf;
  }
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&valuePtr, v68);
  std::string v69 = (unsigned __int16 *)(**v61)(v61, valuePtr);
  uint64_t v70 = v69;
  if (v69)
  {
    CFTypeID v71 = CFGetTypeID(v69);
    if (v71 == CFNumberGetTypeID()) {
      int v73 = ctu::cf::assign((ctu::cf *)&v120, v70, v72);
    }
    else {
      int v73 = 0;
    }
    CFRelease(v70);
  }
  else
  {
    int v73 = 0;
  }
  MEMORY[0x1C8791110](&valuePtr);
  if ((buf[23] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  uint64_t v74 = v122;
  if (v122 && !atomic_fetch_add(&v122->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
    std::__shared_weak_count::__release_weak(v74);
  }
  if (!v73 || v120 != *(_WORD *)(v7 + 290)) {
    goto LABEL_141;
  }
LABEL_143:
  LODWORD(v128) = *(_DWORD *)(v7 + 292) == 0;
  pthread_mutex_lock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
  if (!qword_1EBBDD0C0)
  {
    long long v77 = (std::__shared_weak_count_vtbl *)operator new(0x18uLL);
    MEMORY[0x1C8791170](v77, @"com.apple.AppleBasebandManager", *MEMORY[0x1E4F1D3F0]);
    long long v76 = (std::__shared_weak_count *)operator new(0x20uLL);
    v76->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20F3BE0;
    v76->__shared_owners_ = 0;
    v76->__shared_weak_owners_ = 0;
    v76[1].__vftable = v77;
    long long v78 = (std::__shared_weak_count *)off_1EBBDD0C8;
    qword_1EBBDD0C0 = (uint64_t)v77;
    off_1EBBDD0C8 = v76;
    if (!v78)
    {
      uint64_t v121 = (uint64_t)v77;
      long long v122 = v76;
      goto LABEL_150;
    }
    if (!atomic_fetch_add(&v78->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
      std::__shared_weak_count::__release_weak(v78);
    }
  }
  long long v77 = (std::__shared_weak_count_vtbl *)qword_1EBBDD0C0;
  long long v76 = (std::__shared_weak_count *)off_1EBBDD0C8;
  uint64_t v121 = qword_1EBBDD0C0;
  long long v122 = (std::__shared_weak_count *)off_1EBBDD0C8;
  if (off_1EBBDD0C8) {
LABEL_150:
  }
    atomic_fetch_add_explicit(&v76->__shared_owners_, 1uLL, memory_order_relaxed);
  pthread_mutex_unlock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
  long long v79 = (const void *)*MEMORY[0x1E4FB9BF8];
  size_t v80 = strlen((const char *)*MEMORY[0x1E4FB9BF8]);
  if (v80 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v81 = v80;
  if (v80 >= 0x17)
  {
    uint64_t v83 = (v80 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v80 | 7) != 0x17) {
      uint64_t v83 = v80 | 7;
    }
    uint64_t v84 = v83 + 1;
    CFMutableDictionaryRef v82 = operator new(v83 + 1);
    *(void *)&uint8_t buf[8] = v81;
    *(void *)&uint8_t buf[16] = v84 | 0x8000000000000000;
    *(void *)std::string buf = v82;
    goto LABEL_158;
  }
  buf[23] = v80;
  CFMutableDictionaryRef v82 = buf;
  if (v80) {
LABEL_158:
  }
    memmove(v82, v79, v81);
  v82[v81] = 0;
  unsigned int v85 = *(_DWORD *)(v7 + 292);
  if (buf[23] >= 0) {
    unsigned int v86 = buf;
  }
  else {
    unsigned int v86 = *(const char **)buf;
  }
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&valuePtr, v86);
  BOOL v87 = ctu::cf::plist_adapter::set<unsigned int>((uint64_t)v77, v85, valuePtr, 1);
  MEMORY[0x1C8791110](&valuePtr);
  if ((buf[23] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  uint64_t v88 = v122;
  if (v122 && !atomic_fetch_add(&v122->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
    std::__shared_weak_count::__release_weak(v88);
  }
  if (!v87) {
    goto LABEL_191;
  }
  pthread_mutex_lock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
  if (!qword_1EBBDD0C0)
  {
    int v90 = (std::__shared_weak_count_vtbl *)operator new(0x18uLL);
    MEMORY[0x1C8791170](v90, @"com.apple.AppleBasebandManager", *MEMORY[0x1E4F1D3F0]);
    size_t v89 = (std::__shared_weak_count *)operator new(0x20uLL);
    v89->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20F3BE0;
    v89->__shared_owners_ = 0;
    v89->__shared_weak_owners_ = 0;
    v89[1].__vftable = v90;
    uint64_t v91 = (std::__shared_weak_count *)off_1EBBDD0C8;
    qword_1EBBDD0C0 = (uint64_t)v90;
    off_1EBBDD0C8 = v89;
    if (!v91)
    {
      uint64_t v121 = (uint64_t)v90;
      long long v122 = v89;
      goto LABEL_175;
    }
    if (!atomic_fetch_add(&v91->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
      std::__shared_weak_count::__release_weak(v91);
    }
  }
  int v90 = (std::__shared_weak_count_vtbl *)qword_1EBBDD0C0;
  size_t v89 = (std::__shared_weak_count *)off_1EBBDD0C8;
  uint64_t v121 = qword_1EBBDD0C0;
  long long v122 = (std::__shared_weak_count *)off_1EBBDD0C8;
  if (off_1EBBDD0C8) {
LABEL_175:
  }
    atomic_fetch_add_explicit(&v89->__shared_owners_, 1uLL, memory_order_relaxed);
  pthread_mutex_unlock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
  size_t v92 = strlen((const char *)v79);
  if (v92 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v93 = v92;
  if (v92 >= 0x17)
  {
    uint64_t v95 = (v92 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v92 | 7) != 0x17) {
      uint64_t v95 = v92 | 7;
    }
    uint64_t v96 = v95 + 1;
    uint64_t v94 = operator new(v95 + 1);
    *(void *)&uint8_t buf[8] = v93;
    *(void *)&uint8_t buf[16] = v96 | 0x8000000000000000;
    *(void *)std::string buf = v94;
    goto LABEL_183;
  }
  buf[23] = v92;
  uint64_t v94 = buf;
  if (v92) {
LABEL_183:
  }
    memmove(v94, v79, v93);
  v94[v93] = 0;
  int v97 = Preferences::getPreference<unsigned int>(v90, buf, (ctu::cf *)&v128);
  if ((buf[23] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  uint64_t v98 = v122;
  if (v122 && !atomic_fetch_add(&v122->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
    std::__shared_weak_count::__release_weak(v98);
  }
  if (!v97 || v128 != *(_DWORD *)(v7 + 292))
  {
LABEL_191:
    uint64_t v99 = *(NSObject **)(v7 + 88);
    if (os_log_type_enabled(v99, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_error_impl(&dword_1C5767000, v99, OS_LOG_TYPE_ERROR, "Failed to save BasebandVersion property in ABMPreferences file", buf, 2u);
    }
  }
LABEL_193:
  int v100 = TelephonyBasebandSetBasebandProperty();
  if (TelephonyBasebandSetBasebandProperty() & v100)
  {
    *(unsigned char *)(v7 + 296) = 1;
    goto LABEL_228;
  }
  *(unsigned char *)(v7 + 296) = 0;
  std::string::__assign_external(&v124, "Failed to send reset properties to AppleBaseband driver", 0x37uLL);
  __int16 v20 = *(NSObject **)(v7 + 88);
  if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
  {
    uint64_t v117 = &v124;
    if ((v124.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      uint64_t v117 = (std::string *)v124.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)std::string buf = 136315138;
    *(void *)&uint8_t buf[4] = v117;
    goto LABEL_237;
  }
LABEL_196:
  if ((TelephonyUtilIsInternalBuild() & 1) == 0
    && (TelephonyUtilIsCarrierBuild() & 1) == 0
    && !TelephonyUtilIsVendorBuild())
  {
    goto LABEL_228;
  }
  xpc_object_t v101 = xpc_dictionary_create(0, 0, 0);
  if (v101 || (xpc_object_t v101 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C8792D30](v101) == MEMORY[0x1E4F14590])
    {
      xpc_retain(v101);
      xpc_object_t v102 = v101;
    }
    else
    {
      xpc_object_t v102 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v102 = xpc_null_create();
    xpc_object_t v101 = 0;
  }
  xpc_release(v101);
  xpc_object_t v103 = xpc_string_create((const char *)*MEMORY[0x1E4F4C6E8]);
  if (!v103) {
    xpc_object_t v103 = xpc_null_create();
  }
  xpc_dictionary_set_value(v102, (const char *)*MEMORY[0x1E4F4C690], v103);
  xpc_object_t v104 = xpc_null_create();
  xpc_release(v103);
  xpc_release(v104);
  xpc_object_t v105 = xpc_string_create((const char *)*MEMORY[0x1E4F4D038]);
  if (!v105) {
    xpc_object_t v105 = xpc_null_create();
  }
  xpc_dictionary_set_value(v102, (const char *)*MEMORY[0x1E4F4CA38], v105);
  xpc_object_t v106 = xpc_null_create();
  xpc_release(v105);
  xpc_release(v106);
  if ((v124.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t v107 = &v124;
  }
  else {
    size_t v107 = (std::string *)v124.__r_.__value_.__r.__words[0];
  }
  xpc_object_t v108 = xpc_string_create((const char *)v107);
  if (!v108) {
    xpc_object_t v108 = xpc_null_create();
  }
  xpc_dictionary_set_value(v102, (const char *)*MEMORY[0x1E4F4C8F0], v108);
  xpc_object_t v109 = xpc_null_create();
  xpc_release(v108);
  xpc_release(v109);
  uint64_t v110 = v125;
  uint64_t v111 = (const void *)*MEMORY[0x1E4F4C638];
  size_t v112 = strlen((const char *)*MEMORY[0x1E4F4C638]);
  if (v112 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v113 = v112;
  if (v112 >= 0x17)
  {
    uint64_t v115 = (v112 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v112 | 7) != 0x17) {
      uint64_t v115 = v112 | 7;
    }
    uint64_t v116 = v115 + 1;
    int v114 = operator new(v115 + 1);
    *(void *)&uint8_t buf[8] = v113;
    *(void *)&uint8_t buf[16] = v116 | 0x8000000000000000;
    *(void *)std::string buf = v114;
  }
  else
  {
    buf[23] = v112;
    int v114 = buf;
    if (!v112) {
      goto LABEL_222;
    }
  }
  memmove(v114, v111, v113);
LABEL_222:
  v114[v113] = 0;
  xpc_object_t object = v102;
  if (v102) {
    xpc_retain(v102);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  int v118 = 0;
  Service::runCommand(v110, (uint64_t)buf, &object, &v118);
  xpc_release(object);
  xpc_object_t object = 0;
  if ((buf[23] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  xpc_release(v102);
LABEL_228:
  if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v124.__r_.__value_.__l.__data_);
  }
  uint64_t v11 = v126;
  if (v126) {
    goto LABEL_231;
  }
}

uint64_t Preferences::getPreference<BOOL>(uint64_t (***a1)(void, uint64_t), const char *a2, ctu::cf *a3)
{
  if (a2[23] < 0) {
    a2 = *(const char **)a2;
  }
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v11, a2);
  uint64_t v5 = (BOOL *)(**a1)(a1, v11);
  uint64_t v6 = v5;
  if (v5)
  {
    CFTypeID v7 = CFGetTypeID(v5);
    if (v7 == CFBooleanGetTypeID()) {
      uint64_t v9 = ctu::cf::assign(a3, v6, v8);
    }
    else {
      uint64_t v9 = 0;
    }
    CFRelease(v6);
  }
  else
  {
    uint64_t v9 = 0;
  }
  MEMORY[0x1C8791110](&v11);
  return v9;
}

uint64_t Preferences::getPreference<unsigned int>(uint64_t (***a1)(void, uint64_t), const char *a2, ctu::cf *a3)
{
  if (a2[23] < 0) {
    a2 = *(const char **)a2;
  }
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v11, a2);
  uint64_t v5 = (unsigned int *)(**a1)(a1, v11);
  uint64_t v6 = v5;
  if (v5)
  {
    CFTypeID v7 = CFGetTypeID(v5);
    if (v7 == CFNumberGetTypeID()) {
      uint64_t v9 = ctu::cf::assign(a3, v6, v8);
    }
    else {
      uint64_t v9 = 0;
    }
    CFRelease(v6);
  }
  else
  {
    uint64_t v9 = 0;
  }
  MEMORY[0x1C8791110](&v11);
  return v9;
}

void ___ZN11RadioModule23monitorBatteryInfo_syncEv_block_invoke(void *a1, uint64_t *a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    uint64_t v5 = a1[4];
    uint64_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      CFTypeID v7 = v6;
      if (a1[5])
      {
        uint64_t v8 = *a2;
        if (*a2) {
          uint64_t v9 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
        }
        else {
          uint64_t v9 = 0;
        }
        uint64_t v10 = *(NSObject **)(v5 + 88);
        if (v9)
        {
          if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
          {
            int v11 = 138412290;
            uint64_t v12 = v8;
            _os_log_error_impl(&dword_1C5767000, v10, OS_LOG_TYPE_ERROR, "Failed to send battery info update\n:%@", (uint8_t *)&v11, 0xCu);
          }
        }
        else if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(v11) = 0;
          _os_log_impl(&dword_1C5767000, v10, OS_LOG_TYPE_DEFAULT, "#I Success sending battery info update", (uint8_t *)&v11, 2u);
        }
      }
      if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void ___ZN11RadioModule23monitorBatteryInfo_syncEv_block_invoke_192(void *a1, unsigned int a2)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (std::__shared_weak_count *)a1[6];
  if (!v3) {
    return;
  }
  uint64_t v5 = a1[4];
  uint64_t v6 = std::__shared_weak_count::lock(v3);
  CFTypeID v35 = v6;
  if (!v6) {
    return;
  }
  CFTypeID v7 = v6;
  if (!a1[5])
  {
LABEL_51:
    if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    return;
  }
  unsigned int v8 = *(unsigned __int8 *)(v5 + 320);
  if (*(unsigned char *)(v5 + 320)
    && (v8 > 0x27 || a2 <= 0x29u)
    && (v8 < 0x28 || a2 >= 0x26u))
  {
    BOOL v9 = ((a2 >> 8) & 1) != *(unsigned __int8 *)(v5 + 321);
    uint64_t v10 = *(NSObject **)(v5 + 88);
    if (!os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_19;
    }
  }
  else
  {
    BOOL v9 = 1;
    uint64_t v10 = *(NSObject **)(v5 + 88);
    if (!os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_19;
    }
  }
  int v11 = "TRUE";
  if ((a2 & 0x100) != 0) {
    uint64_t v12 = "TRUE";
  }
  else {
    uint64_t v12 = "FALSE";
  }
  *(_DWORD *)std::string buf = 67109890;
  *(_DWORD *)&uint8_t buf[4] = a2;
  if ((*(void *)&a2 & 0x10000) != 0) {
    uint64_t v13 = "TRUE";
  }
  else {
    uint64_t v13 = "FALSE";
  }
  *(_WORD *)&uint8_t buf[8] = 2080;
  *(void *)&buf[10] = v12;
  __int16 v37 = 2080;
  if (!v9) {
    int v11 = "FALSE";
  }
  uint64_t v38 = v13;
  __int16 v39 = 2080;
  uint64_t v40 = v11;
  _os_log_impl(&dword_1C5767000, v10, OS_LOG_TYPE_DEFAULT, "#I Battery Info Update:\n   chargeLevel:        %u\n   charging:           %s\n   fully charged:      %s\n   reportToBaseband:   %s", buf, 0x26u);
LABEL_19:
  if (!v9) {
    goto LABEL_51;
  }
  *(_WORD *)(v5 + 320) = a2;
  *(unsigned char *)(v5 + 322) = BYTE2(a2);
  unint64_t v32 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v33 = (std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL;
  CFTypeRef v14 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  uint64_t v15 = off_1EBBDD2A0;
  if (!off_1EBBDD2A0)
  {
    CommandDriverFactory::create_default_global((uint64_t *)buf, v14);
    long long v16 = *(_OWORD *)buf;
    *(void *)std::string buf = 0;
    *(void *)&uint8_t buf[8] = 0;
    int v17 = (std::__shared_weak_count *)*(&off_1EBBDD2A0 + 1);
    off_1EBBDD2A0 = v16;
    if (v17 && !atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
    uint64_t v18 = *(std::__shared_weak_count **)&buf[8];
    if (*(void *)&buf[8]
      && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
    uint64_t v15 = off_1EBBDD2A0;
  }
  uint64_t v19 = (std::__shared_weak_count *)*(&off_1EBBDD2A0 + 1);
  uint64_t v28 = v15;
  uint64_t v29 = *(&off_1EBBDD2A0 + 1);
  if (*(&off_1EBBDD2A0 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDD2A0 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(unint64_t *__return_ptr, uint64_t))(*(void *)v15 + 16))(&v30, v15);
  unint64_t v32 = 0;
  uint64_t v33 = 0;
  if (v31)
  {
    uint64_t v33 = std::__shared_weak_count::lock(v31);
    if (v33) {
      unint64_t v32 = v30;
    }
    if (v31) {
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
  unint64_t v20 = v32;
  if (v32)
  {
    uint64_t v21 = *(unsigned __int8 *)(v5 + 320);
    int v22 = *(unsigned __int8 *)(v5 + 321);
    uint64_t v23 = (void *)a1[7];
    if (v23) {
      uint64_t v23 = _Block_copy(v23);
    }
    CFErrorRef v24 = a1[8];
    aBlocunint64_t k = v23;
    dispatch_object_t object = v24;
    if (v24) {
      dispatch_retain(v24);
    }
    (*(void (**)(unint64_t, uint64_t, BOOL, void **))(*(void *)v20 + 176))(v20, v21, v22 != 0, &aBlock);
    if (object) {
      dispatch_release(object);
    }
    if (aBlock) {
      _Block_release(aBlock);
    }
  }
  uint64_t v25 = v33;
  if (v33 && !atomic_fetch_add(&v33->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
    std::__shared_weak_count::__release_weak(v25);
  }
  CFTypeID v7 = v35;
  if (v35) {
    goto LABEL_51;
  }
}

void sub_1C5848CD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void __copy_helper_block_e8_40c36_ZTSNSt3__18weak_ptrI11RadioModuleEE56c79_ZTSN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE(void *a1, void *a2)
{
  uint64_t v4 = a2[6];
  a1[5] = a2[5];
  a1[6] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 16), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = (void *)a2[7];
  if (v5) {
    uint64_t v5 = _Block_copy(v5);
  }
  uint64_t v6 = a2[8];
  a1[7] = v5;
  a1[8] = v6;
  if (v6)
  {
    dispatch_retain(v6);
  }
}

void __destroy_helper_block_e8_40c36_ZTSNSt3__18weak_ptrI11RadioModuleEE56c79_ZTSN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE(void *a1)
{
  uint64_t v2 = a1[8];
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = (const void *)a1[7];
  if (v3) {
    _Block_release(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    std::__shared_weak_count::__release_weak(v4);
  }
}

uint64_t dispatch::callback<void({block_pointer})(ctu::iokit::TelephonyIOKitBatteryInfo)>::~callback(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 8);
  if (v2) {
    dispatch_release(v2);
  }
  if (*(void *)a1) {
    _Block_release(*(const void **)a1);
  }
  return a1;
}

void ___ZN11RadioModule21setOperatingMode_syncEjN5radio13OperatingModeEbN8dispatch5blockIU13block_pointerFvbEEE_block_invoke(void *a1, uint64_t *a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    uint64_t v5 = a1[4];
    uint64_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      CFTypeID v7 = v6;
      if (a1[5])
      {
        uint64_t v8 = *a2;
        if (*a2) {
          BOOL v9 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
        }
        else {
          BOOL v9 = 0;
        }
        if (v9)
        {
          uint64_t v10 = *(NSObject **)(v5 + 88);
          if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)std::string buf = 138412290;
            uint64_t v12 = v8;
            _os_log_error_impl(&dword_1C5767000, v10, OS_LOG_TYPE_ERROR, "%@", buf, 0xCu);
          }
        }
        (*(void (**)(void))(a1[7] + 16))();
      }
      if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_1C5848FC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *__copy_helper_block_e8_40c36_ZTSNSt3__18weak_ptrI11RadioModuleEE56c43_ZTSN8dispatch5blockIU13block_pointerFvbEEE(void *a1, void *a2)
{
  uint64_t v3 = a2[6];
  a1[5] = a2[5];
  a1[6] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  xpc_object_t result = (void *)a2[7];
  if (result) {
    xpc_object_t result = _Block_copy(result);
  }
  a1[7] = result;
  return result;
}

void __destroy_helper_block_e8_40c36_ZTSNSt3__18weak_ptrI11RadioModuleEE56c43_ZTSN8dispatch5blockIU13block_pointerFvbEEE(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 56);
  if (v2) {
    _Block_release(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3)
  {
    std::__shared_weak_count::__release_weak(v3);
  }
}

void ___ZN11RadioModule34queryFactoryCalibrationStatus_syncEv_block_invoke(void *a1, uint64_t *a2, const __CFDictionary **a3)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    uint64_t v7 = a1[4];
    uint64_t v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      BOOL v9 = v8;
      if (a1[5])
      {
        uint64_t v10 = *a2;
        if (v10) {
          int v11 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
        }
        else {
          int v11 = 0;
        }
        if (v11)
        {
          uint64_t v12 = *(NSObject **)(v7 + 88);
          if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)std::string buf = 138412290;
            *(void *)&uint8_t buf[4] = v10;
            _os_log_error_impl(&dword_1C5767000, v12, OS_LOG_TYPE_ERROR, "%@", buf, 0xCu);
          }
        }
        else
        {
          CFDictionaryRef v13 = *a3;
          if (*a3) {
            CFTypeRef v14 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
          }
          else {
            CFTypeRef v14 = 0;
          }
          if (v14)
          {
            memset(buf, 170, 16);
            ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)buf, v13);
            *(unsigned char *)(v7 + 192) = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)buf, (const __CFString *)*MEMORY[0x1E4FB9C50]);
            MEMORY[0x1C8791160](buf);
          }
        }
      }
      if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
}

void ___ZN11RadioModule29queryRFCalibrationStatus_syncEv_block_invoke(void *a1, uint64_t *a2, const void **a3)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    uint64_t v7 = a1[4];
    uint64_t v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      BOOL v9 = v8;
      if (a1[5])
      {
        uint64_t v10 = *a2;
        if (v10) {
          int v11 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
        }
        else {
          int v11 = 0;
        }
        if (v11)
        {
          uint64_t v12 = *(NSObject **)(v7 + 88);
          if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)std::string buf = 138412290;
            uint64_t v17 = v10;
            _os_log_error_impl(&dword_1C5767000, v12, OS_LOG_TYPE_ERROR, "%@", buf, 0xCu);
          }
        }
        else
        {
          CFDictionaryRef v13 = *a3;
          if (*a3) {
            CFTypeRef v14 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
          }
          else {
            CFTypeRef v14 = 0;
          }
          if (v14)
          {
            CFTypeRef cf = *a3;
            if (v13) {
              CFRetain(v13);
            }
            radio::RFCalibration_t::fill();
            if (cf) {
              CFRelease(cf);
            }
          }
        }
      }
      if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
}

void sub_1C58493CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, __int16 a12, char a13, char a14)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN11RadioModule25queryFieldTestConfig_syncEv_block_invoke(void *a1, uint64_t *a2, ctu **a3)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    uint64_t v7 = a1[4];
    uint64_t v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      uint64_t v10 = v8;
      if (a1[5])
      {
        uint64_t v11 = *a2;
        if (v11) {
          uint64_t v12 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
        }
        else {
          uint64_t v12 = 0;
        }
        if (v12)
        {
          CFDictionaryRef v13 = *(NSObject **)(v7 + 88);
          if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)dispatch_object_t object = 138412290;
            *(void *)&xpc_object_t object[4] = v11;
            _os_log_error_impl(&dword_1C5767000, v13, OS_LOG_TYPE_ERROR, "%@", object, 0xCu);
          }
        }
        else
        {
          if (*a3) {
            CFTypeRef v14 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
          }
          else {
            CFTypeRef v14 = 0;
          }
          if (v14)
          {
            ctu::cf_to_xpc((uint64_t *)object, *a3, v9);
            xpc_object_t v15 = *(xpc_object_t *)object;
            if (*(void *)object && MEMORY[0x1C8792D30](*(void *)object) == MEMORY[0x1E4F14590]) {
              xpc_retain(v15);
            }
            else {
              xpc_object_t v15 = xpc_null_create();
            }
            xpc_object_t v16 = xpc_null_create();
            uint64_t v17 = *(void **)(v7 + 248);
            *(void *)(v7 + 248) = v15;
            xpc_release(v17);
            xpc_release(v16);
            xpc_release(*(xpc_object_t *)object);
            uint64_t v18 = *(NSObject **)(v7 + 88);
            if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
            {
              xpc::object::to_string((uint64_t *)object, (xpc::object *)(v7 + 248));
              uint64_t v19 = v21 >= 0 ? object : *(unsigned char **)object;
              *(_DWORD *)std::string buf = 136315138;
              uint64_t v23 = v19;
              _os_log_impl(&dword_1C5767000, v18, OS_LOG_TYPE_DEFAULT, "#I Baseband field test config:\n%s", buf, 0xCu);
              if (v21 < 0) {
                operator delete(*(void **)object);
              }
            }
          }
        }
      }
      if (!atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
  }
}

void sub_1C584963C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t ctu::Loggable<RadioModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig(uint64_t a1)
{
  return MEMORY[0x1F417DA50](a1 + 8);
}

size_t ctu::Loggable<RadioModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = (const char *)(*(uint64_t (**)(void))(*(void *)(a1 - 48) + 16))();
  size_t result = strlen(v3);
  if (result >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v5 = result;
  if (result >= 0x17)
  {
    uint64_t v6 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17) {
      uint64_t v6 = result | 7;
    }
    uint64_t v7 = v6 + 1;
    uint64_t v8 = operator new(v6 + 1);
    a2[1] = v5;
    a2[2] = v7 | 0x8000000000000000;
    *a2 = v8;
    a2 = v8;
  }
  else
  {
    *((unsigned char *)a2 + 23) = result;
    if (!result)
    {
      *(unsigned char *)a2 = 0;
      return result;
    }
  }
  size_t result = (size_t)memmove(a2, v3, v5);
  *((unsigned char *)a2 + v5) = 0;
  return result;
}

uint64_t ctu::Loggable<RadioModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return MEMORY[0x1F417DD10](a1 + 8);
}

uint64_t ctu::PthreadMutexGuardPolicy<DeviceHistoryDB>::~PthreadMutexGuardPolicy(uint64_t a1)
{
  pthread_mutex_lock((pthread_mutex_t *)a1);
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 72);
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 72);
  if (!v3 || atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void *ctu::Loggable<RadioModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_1F20F74D0;
  MEMORY[0x1C8790F40](a1 + 1);
  return a1;
}

void ctu::Loggable<RadioModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_1F20F74D0;
  MEMORY[0x1C8790F40](a1 + 1);

  operator delete(a1);
}

void std::__shared_ptr_pointer<RadioModule *,std::shared_ptr<RadioModule> ctu::SharedSynchronizable<RadioModule>::make_shared_ptr<RadioModule>(RadioModule*)::{lambda(RadioModule *)#1},std::allocator<RadioModule>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<RadioModule *,std::shared_ptr<RadioModule> ctu::SharedSynchronizable<RadioModule>::make_shared_ptr<RadioModule>(RadioModule*)::{lambda(RadioModule *)#1},std::allocator<RadioModule>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<RadioModule *,std::shared_ptr<RadioModule> ctu::SharedSynchronizable<RadioModule>::make_shared_ptr<RadioModule>(RadioModule*)::{lambda(RadioModule *)#1},std::allocator<RadioModule>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableI11RadioModuleE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_") {
    return a1 + 24;
  }
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableI11RadioModuleE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableI11RadioModuleE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_"))return 0; {
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableI11RadioModuleE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  }
  return 0;
}

uint64_t std::shared_ptr<RadioModule> ctu::SharedSynchronizable<RadioModule>::make_shared_ptr<RadioModule>(RadioModule*)::{lambda(RadioModule*)#1}::operator() const(RadioModule*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void ctu::SharedLoggable<RadioModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(void *a1)
{
  *a1 = &unk_1F20F74D0;
  MEMORY[0x1C8790F40](a1 + 1);
  uint64_t v2 = a1[12];
  if (v2) {
    dispatch_release(v2);
  }
  unint64_t v3 = a1[11];
  if (v3) {
    dispatch_release(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[10];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }

  operator delete(a1);
}

void ctu::SharedSynchronizable<RadioModule>::execute_wrapped(uint64_t *a1, uint64_t a2)
{
  unint64_t v3 = (std::__shared_weak_count *)a1[1];
  if (!v3 || (uint64_t v5 = *a1, (v6 = std::__shared_weak_count::lock(v3)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v7 = v6;
  uint64_t v8 = a1[2];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 1174405120;
  block[2] = ___ZNK3ctu20SharedSynchronizableI11RadioModuleE15execute_wrappedEU13block_pointerFvvE_block_invoke;
  block[3] = &unk_1F20F7598;
  void block[5] = v5;
  uint64_t v12 = v7;
  p_shared_owners = &v7->__shared_owners_;
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  void block[4] = a2;
  dispatch_async(v8, block);
  uint64_t v10 = v12;
  if (!v12 || atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      return;
    }
LABEL_8:
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    return;
  }
  ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
  std::__shared_weak_count::__release_weak(v10);
  if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_8;
  }
}

uint64_t ___ZNK3ctu20SharedSynchronizableI11RadioModuleE15execute_wrappedEU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t __copy_helper_block_e8_40c40_ZTSNSt3__110shared_ptrIK11RadioModuleEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c40_ZTSNSt3__110shared_ptrIK11RadioModuleEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI11RadioModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb0_E3__0EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_(void *a1)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (void *)*a1;
  unint64_t v3 = *(void **)*a1;
  if ((*(unsigned int (**)(void *))(*v3 + 88))(v3))
  {
    memset(__p, 170, 24);
    uint64_t v4 = (const void *)*MEMORY[0x1E4F4D1C0];
    size_t v5 = strlen((const char *)*MEMORY[0x1E4F4D1C0]);
    if (v5 >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    std::string::size_type v6 = v5;
    if (v5 >= 0x17)
    {
      uint64_t v16 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v5 | 7) != 0x17) {
        uint64_t v16 = v5 | 7;
      }
      uint64_t v17 = v16 + 1;
      p_dst = (std::string *)operator new(v16 + 1);
      __dst.__r_.__value_.__l.__size_ = v6;
      __dst.__r_.__value_.__r.__words[2] = v17 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v5;
      p_dst = &__dst;
      if (!v5)
      {
LABEL_28:
        p_dst->__r_.__value_.__s.__data_[v6] = 0;
        uint64_t v18 = (char *)operator new(0x28uLL);
        strcpy(v18, " rejected; ABM is shutting down ");
        uint64_t v19 = std::string::append(&__dst, v18, 0x20uLL);
        long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
        __p[2] = (void *)v19->__r_.__value_.__r.__words[2];
        *(_OWORD *)std::string __p = v20;
        v19->__r_.__value_.__l.__size_ = 0;
        v19->__r_.__value_.__r.__words[2] = 0;
        v19->__r_.__value_.__r.__words[0] = 0;
        operator delete(v18);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__dst.__r_.__value_.__l.__data_);
          char v21 = v3[11];
          if (!os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
          {
LABEL_30:
            int v22 = v2 + 1;
            if (!v2[1])
            {
LABEL_74:
              if (SHIBYTE(__p[2]) < 0) {
                operator delete(__p[0]);
              }
              goto LABEL_76;
            }
LABEL_56:
            __dst.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
            uint64_t v28 = (void *)HIBYTE(__p[2]);
            if (SHIBYTE(__p[2]) < 0) {
              uint64_t v28 = __p[1];
            }
            if (v28)
            {
              xpc_object_t v29 = xpc_dictionary_create(0, 0, 0);
              if (v29 || (xpc_object_t v29 = xpc_null_create()) != 0)
              {
                if (MEMORY[0x1C8792D30](v29) == MEMORY[0x1E4F14590])
                {
                  xpc_retain(v29);
                  xpc_object_t v30 = v29;
                }
                else
                {
                  xpc_object_t v30 = xpc_null_create();
                }
              }
              else
              {
                xpc_object_t v30 = xpc_null_create();
                xpc_object_t v29 = 0;
              }
              xpc_release(v29);
              xpc_object_t v31 = xpc_null_create();
              unint64_t v32 = (void *)__dst.__r_.__value_.__r.__words[0];
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v30;
              xpc_release(v32);
              xpc_release(v31);
              if (SHIBYTE(__p[2]) >= 0) {
                uint64_t v33 = __p;
              }
              else {
                uint64_t v33 = (void **)__p[0];
              }
              xpc_object_t v34 = xpc_string_create((const char *)v33);
              if (!v34) {
                xpc_object_t v34 = xpc_null_create();
              }
              xpc_dictionary_set_value(v30, (const char *)*MEMORY[0x1E4F4C240], v34);
              xpc_object_t v35 = xpc_null_create();
              xpc_release(v34);
              xpc_release(v35);
            }
            unsigned int v42 = -534716415;
            dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(v22, &v42, (void **)&__dst.__r_.__value_.__l.__data_);
            xpc_release(__dst.__r_.__value_.__l.__data_);
            goto LABEL_74;
          }
        }
        else
        {
          char v21 = v3[11];
          if (!os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_30;
          }
        }
        size_t v27 = __p;
        if (SHIBYTE(__p[2]) < 0) {
          size_t v27 = (void **)__p[0];
        }
        LODWORD(__dst.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = (std::string::size_type)v27;
        _os_log_impl(&dword_1C5767000, v21, OS_LOG_TYPE_DEFAULT, "#I %s", (uint8_t *)&__dst, 0xCu);
        int v22 = v2 + 1;
        if (!v2[1]) {
          goto LABEL_74;
        }
        goto LABEL_56;
      }
    }
    memmove(p_dst, v4, v6);
    goto LABEL_28;
  }
  uint64_t v8 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  uint64_t v9 = off_1EBBDD2A0;
  if (!off_1EBBDD2A0)
  {
    CommandDriverFactory::create_default_global((uint64_t *)__p, v8);
    long long v10 = *(_OWORD *)__p;
    __p[0] = 0;
    __p[1] = 0;
    uint64_t v11 = (std::__shared_weak_count *)*(&off_1EBBDD2A0 + 1);
    off_1EBBDD2A0 = v10;
    if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    uint64_t v12 = (std::__shared_weak_count *)__p[1];
    if (__p[1] && !atomic_fetch_add((atomic_ullong *volatile)__p[1] + 1, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
    uint64_t v9 = off_1EBBDD2A0;
  }
  CFDictionaryRef v13 = (std::__shared_weak_count *)*(&off_1EBBDD2A0 + 1);
  if (*(&off_1EBBDD2A0 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDD2A0 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)v9 + 16))(&__dst, v9);
  if (__dst.__r_.__value_.__l.__size_)
  {
    CFTypeRef v14 = std::__shared_weak_count::lock((std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_);
    if (v14) {
      std::string::size_type v15 = __dst.__r_.__value_.__r.__words[0];
    }
    else {
      std::string::size_type v15 = 0;
    }
    if (__dst.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_);
    }
    if (!v13) {
      goto LABEL_34;
    }
  }
  else
  {
    CFTypeRef v14 = 0;
    std::string::size_type v15 = 0;
    if (!v13) {
      goto LABEL_34;
    }
  }
  if (!atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
    if (v15) {
      goto LABEL_35;
    }
    goto LABEL_49;
  }
LABEL_34:
  if (v15)
  {
LABEL_35:
    __p[0] = (void *)MEMORY[0x1E4F143A8];
    __p[1] = (void *)1174405120;
    __p[2] = ___ZZZZN11RadioModule10initializeEN8dispatch13group_sessionEEUb_EUb0_ENK3__0clEv_block_invoke;
    __p[3] = &__block_descriptor_tmp_240;
    __p[4] = *((void **)v2 + 2);
    uint64_t v23 = (std::__shared_weak_count *)v2[3];
    uint64_t v40 = v23;
    if (v23) {
      atomic_fetch_add_explicit(&v23->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v24 = (void *)v2[1];
    if (v24) {
      uint64_t v24 = _Block_copy(v24);
    }
    aBlocunint64_t k = v24;
    uint64_t v25 = _Block_copy(__p);
    size_t v26 = v3[17];
    if (v26) {
      dispatch_retain(v26);
    }
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v25;
    __dst.__r_.__value_.__l.__size_ = (std::string::size_type)v26;
    (*(void (**)(std::string::size_type, std::string *))(*(void *)v15 + 224))(v15, &__dst);
    if (__dst.__r_.__value_.__l.__size_) {
      dispatch_release((dispatch_object_t)__dst.__r_.__value_.__l.__size_);
    }
    if (__dst.__r_.__value_.__r.__words[0]) {
      _Block_release(__dst.__r_.__value_.__l.__data_);
    }
    if (aBlock) {
      _Block_release(aBlock);
    }
    if (v40) {
      std::__shared_weak_count::__release_weak(v40);
    }
  }
LABEL_49:
  if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
LABEL_76:
  size_t v36 = (std::__shared_weak_count *)v2[3];
  if (v36) {
    std::__shared_weak_count::__release_weak(v36);
  }
  __int16 v37 = (const void *)v2[1];
  if (v37) {
    _Block_release(v37);
  }
  operator delete(v2);
  uint64_t v38 = (std::__shared_weak_count *)a1[2];
  if (v38 && !atomic_fetch_add(&v38->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
    std::__shared_weak_count::__release_weak(v38);
  }
  operator delete(a1);
}

void sub_1C584A340(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17, void *aBlock, uint64_t a19, xpc_object_t object,dispatch_object_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void ___ZZZZN11RadioModule10initializeEN8dispatch13group_sessionEEUb_EUb0_ENK3__0clEv_block_invoke(void *a1, void *a2, xpc_object_t *a3)
{
  uint64_t v4 = (std::__shared_weak_count *)a1[5];
  if (!v4) {
    return;
  }
  uint64_t v7 = std::__shared_weak_count::lock(v4);
  uint64_t v24 = v7;
  if (!v7) {
    return;
  }
  if (!a1[4])
  {
    long long v10 = v7;
LABEL_29:
    if (!atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
    return;
  }
  xpc_object_t v8 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v9 = v8;
  if (v8)
  {
    xpc_object_t xdict = v8;
  }
  else
  {
    xpc_object_t v9 = xpc_null_create();
    xpc_object_t xdict = v9;
    if (!v9)
    {
      xpc_object_t v11 = xpc_null_create();
      xpc_object_t v9 = 0;
      goto LABEL_12;
    }
  }
  if (MEMORY[0x1C8792D30](v9) == MEMORY[0x1E4F14590])
  {
    xpc_retain(v9);
    goto LABEL_13;
  }
  xpc_object_t v11 = xpc_null_create();
LABEL_12:
  xpc_object_t xdict = v11;
LABEL_13:
  xpc_release(v9);
  uint64_t v12 = MEMORY[0x1C8792D30](*a2);
  uint64_t v13 = MEMORY[0x1E4F145D8];
  if (v12 == MEMORY[0x1E4F145D8])
  {
    xpc_object_t v17 = *a3;
    if (v17) {
      xpc_retain(v17);
    }
    else {
      xpc_object_t v17 = xpc_null_create();
    }
    xpc_dictionary_set_value(xdict, (const char *)*MEMORY[0x1E4F4D318], v17);
    xpc_object_t v18 = xpc_null_create();
    xpc_release(v17);
    xpc_release(v18);
  }
  else
  {
    memset(__p, 0, sizeof(__p));
    xpc::dyn_cast_or_default();
    if (v21 >= 0) {
      CFTypeRef v14 = (const char *)&v20;
    }
    else {
      CFTypeRef v14 = (const char *)v20;
    }
    xpc_object_t v15 = xpc_string_create(v14);
    if (!v15) {
      xpc_object_t v15 = xpc_null_create();
    }
    xpc_dictionary_set_value(xdict, (const char *)*MEMORY[0x1E4F4C418], v15);
    xpc_object_t v16 = xpc_null_create();
    xpc_release(v15);
    xpc_release(v16);
    if (v21 < 0) {
      operator delete(v20);
    }
  }
  if (MEMORY[0x1C8792D30](*a2) == v13) {
    int v19 = 0;
  }
  else {
    int v19 = -534716416;
  }
  LODWORD(__p[0]) = v19;
  dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(a1 + 6, (unsigned int *)__p, &xdict);
  xpc_release(xdict);
  long long v10 = v24;
  if (v24) {
    goto LABEL_29;
  }
}

void sub_1C584A7F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, xpc_object_t object, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  xpc_release(object);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a14);
  _Unwind_Resume(a1);
}

void *__copy_helper_block_e8_32c36_ZTSNSt3__18weak_ptrI11RadioModuleEE48c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE(void *a1, void *a2)
{
  uint64_t v3 = a2[5];
  a1[4] = a2[4];
  a1[5] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  size_t result = (void *)a2[6];
  if (result) {
    size_t result = _Block_copy(result);
  }
  a1[6] = result;
  return result;
}

void __destroy_helper_block_e8_32c36_ZTSNSt3__18weak_ptrI11RadioModuleEE48c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 48);
  if (v2) {
    _Block_release(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 40);
  if (v3)
  {
    std::__shared_weak_count::__release_weak(v3);
  }
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI11RadioModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb1_E3__1EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_(void *a1)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (void *)*a1;
  uint64_t v3 = *(void **)*a1;
  if ((*(unsigned int (**)(void *))(*v3 + 88))(v3))
  {
    memset(__p, 170, 24);
    uint64_t v4 = (const void *)*MEMORY[0x1E4F4C588];
    size_t v5 = strlen((const char *)*MEMORY[0x1E4F4C588]);
    if (v5 >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    std::string::size_type v6 = v5;
    if (v5 >= 0x17)
    {
      uint64_t v16 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v5 | 7) != 0x17) {
        uint64_t v16 = v5 | 7;
      }
      uint64_t v17 = v16 + 1;
      p_dst = (std::string *)operator new(v16 + 1);
      __dst.__r_.__value_.__l.__size_ = v6;
      __dst.__r_.__value_.__r.__words[2] = v17 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v5;
      p_dst = &__dst;
      if (!v5)
      {
LABEL_28:
        p_dst->__r_.__value_.__s.__data_[v6] = 0;
        xpc_object_t v18 = (char *)operator new(0x28uLL);
        strcpy(v18, " rejected; ABM is shutting down ");
        int v19 = std::string::append(&__dst, v18, 0x20uLL);
        long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
        __p[2] = (void *)v19->__r_.__value_.__r.__words[2];
        *(_OWORD *)std::string __p = v20;
        v19->__r_.__value_.__l.__size_ = 0;
        v19->__r_.__value_.__r.__words[2] = 0;
        v19->__r_.__value_.__r.__words[0] = 0;
        operator delete(v18);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__dst.__r_.__value_.__l.__data_);
          char v21 = v3[11];
          if (!os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
          {
LABEL_30:
            int v22 = v2 + 1;
            if (!v2[1])
            {
LABEL_74:
              if (SHIBYTE(__p[2]) < 0) {
                operator delete(__p[0]);
              }
              goto LABEL_76;
            }
LABEL_56:
            __dst.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
            uint64_t v28 = (void *)HIBYTE(__p[2]);
            if (SHIBYTE(__p[2]) < 0) {
              uint64_t v28 = __p[1];
            }
            if (v28)
            {
              xpc_object_t v29 = xpc_dictionary_create(0, 0, 0);
              if (v29 || (xpc_object_t v29 = xpc_null_create()) != 0)
              {
                if (MEMORY[0x1C8792D30](v29) == MEMORY[0x1E4F14590])
                {
                  xpc_retain(v29);
                  xpc_object_t v30 = v29;
                }
                else
                {
                  xpc_object_t v30 = xpc_null_create();
                }
              }
              else
              {
                xpc_object_t v30 = xpc_null_create();
                xpc_object_t v29 = 0;
              }
              xpc_release(v29);
              xpc_object_t v31 = xpc_null_create();
              unint64_t v32 = (void *)__dst.__r_.__value_.__r.__words[0];
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v30;
              xpc_release(v32);
              xpc_release(v31);
              if (SHIBYTE(__p[2]) >= 0) {
                uint64_t v33 = __p;
              }
              else {
                uint64_t v33 = (void **)__p[0];
              }
              xpc_object_t v34 = xpc_string_create((const char *)v33);
              if (!v34) {
                xpc_object_t v34 = xpc_null_create();
              }
              xpc_dictionary_set_value(v30, (const char *)*MEMORY[0x1E4F4C240], v34);
              xpc_object_t v35 = xpc_null_create();
              xpc_release(v34);
              xpc_release(v35);
            }
            unsigned int v42 = -534716415;
            dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(v22, &v42, (void **)&__dst.__r_.__value_.__l.__data_);
            xpc_release(__dst.__r_.__value_.__l.__data_);
            goto LABEL_74;
          }
        }
        else
        {
          char v21 = v3[11];
          if (!os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_30;
          }
        }
        size_t v27 = __p;
        if (SHIBYTE(__p[2]) < 0) {
          size_t v27 = (void **)__p[0];
        }
        LODWORD(__dst.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = (std::string::size_type)v27;
        _os_log_impl(&dword_1C5767000, v21, OS_LOG_TYPE_DEFAULT, "#I %s", (uint8_t *)&__dst, 0xCu);
        int v22 = v2 + 1;
        if (!v2[1]) {
          goto LABEL_74;
        }
        goto LABEL_56;
      }
    }
    memmove(p_dst, v4, v6);
    goto LABEL_28;
  }
  xpc_object_t v8 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  uint64_t v9 = off_1EBBDD2A0;
  if (!off_1EBBDD2A0)
  {
    CommandDriverFactory::create_default_global((uint64_t *)__p, v8);
    long long v10 = *(_OWORD *)__p;
    __p[0] = 0;
    __p[1] = 0;
    xpc_object_t v11 = (std::__shared_weak_count *)*(&off_1EBBDD2A0 + 1);
    off_1EBBDD2A0 = v10;
    if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    uint64_t v12 = (std::__shared_weak_count *)__p[1];
    if (__p[1] && !atomic_fetch_add((atomic_ullong *volatile)__p[1] + 1, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
    uint64_t v9 = off_1EBBDD2A0;
  }
  uint64_t v13 = (std::__shared_weak_count *)*(&off_1EBBDD2A0 + 1);
  if (*(&off_1EBBDD2A0 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDD2A0 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)v9 + 16))(&__dst, v9);
  if (__dst.__r_.__value_.__l.__size_)
  {
    CFTypeRef v14 = std::__shared_weak_count::lock((std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_);
    if (v14) {
      std::string::size_type v15 = __dst.__r_.__value_.__r.__words[0];
    }
    else {
      std::string::size_type v15 = 0;
    }
    if (__dst.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_);
    }
    if (!v13) {
      goto LABEL_34;
    }
  }
  else
  {
    CFTypeRef v14 = 0;
    std::string::size_type v15 = 0;
    if (!v13) {
      goto LABEL_34;
    }
  }
  if (!atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
    if (v15) {
      goto LABEL_35;
    }
    goto LABEL_49;
  }
LABEL_34:
  if (v15)
  {
LABEL_35:
    __p[0] = (void *)MEMORY[0x1E4F143A8];
    __p[1] = (void *)1174405120;
    __p[2] = ___ZZZZN11RadioModule10initializeEN8dispatch13group_sessionEEUb_EUb1_ENK3__1clEv_block_invoke;
    __p[3] = &__block_descriptor_tmp_243;
    __p[4] = *((void **)v2 + 2);
    uint64_t v23 = (std::__shared_weak_count *)v2[3];
    uint64_t v40 = v23;
    if (v23) {
      atomic_fetch_add_explicit(&v23->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v24 = (void *)v2[1];
    if (v24) {
      uint64_t v24 = _Block_copy(v24);
    }
    aBlocunint64_t k = v24;
    uint64_t v25 = _Block_copy(__p);
    size_t v26 = v3[17];
    if (v26) {
      dispatch_retain(v26);
    }
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v25;
    __dst.__r_.__value_.__l.__size_ = (std::string::size_type)v26;
    (*(void (**)(std::string::size_type, std::string *))(*(void *)v15 + 264))(v15, &__dst);
    if (__dst.__r_.__value_.__l.__size_) {
      dispatch_release((dispatch_object_t)__dst.__r_.__value_.__l.__size_);
    }
    if (__dst.__r_.__value_.__r.__words[0]) {
      _Block_release(__dst.__r_.__value_.__l.__data_);
    }
    if (aBlock) {
      _Block_release(aBlock);
    }
    if (v40) {
      std::__shared_weak_count::__release_weak(v40);
    }
  }
LABEL_49:
  if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
LABEL_76:
  size_t v36 = (std::__shared_weak_count *)v2[3];
  if (v36) {
    std::__shared_weak_count::__release_weak(v36);
  }
  __int16 v37 = (const void *)v2[1];
  if (v37) {
    _Block_release(v37);
  }
  operator delete(v2);
  uint64_t v38 = (std::__shared_weak_count *)a1[2];
  if (v38 && !atomic_fetch_add(&v38->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
    std::__shared_weak_count::__release_weak(v38);
  }
  operator delete(a1);
}

void sub_1C584AF80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17, void *aBlock, uint64_t a19, xpc_object_t object,dispatch_object_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void ___ZZZZN11RadioModule10initializeEN8dispatch13group_sessionEEUb_EUb1_ENK3__1clEv_block_invoke(void *a1, xpc_object_t *a2, xpc_object_t *a3)
{
  uint64_t v4 = (std::__shared_weak_count *)a1[5];
  if (v4)
  {
    uint64_t v7 = std::__shared_weak_count::lock(v4);
    uint64_t v24 = v7;
    if (v7)
    {
      if (!a1[4])
      {
        uint64_t v13 = v7;
LABEL_25:
        if (!atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
        return;
      }
      xpc_object_t v8 = xpc_null_create();
      xpc_object_t object = v8;
      uint64_t v9 = MEMORY[0x1C8792D30](*a2);
      uint64_t v10 = MEMORY[0x1E4F145D8];
      if (v9 == MEMORY[0x1E4F145D8])
      {
        xpc_object_t v14 = *a3;
        if (v14 && MEMORY[0x1C8792D30](v14) == MEMORY[0x1E4F14590]) {
          xpc_retain(v14);
        }
        else {
          xpc_object_t v14 = xpc_null_create();
        }
        xpc_object_t v15 = xpc_null_create();
        xpc_object_t object = v14;
        xpc_release(v8);
        xpc_release(v15);
      }
      else
      {
        xpc_object_t v11 = xpc_dictionary_create(0, 0, 0);
        if (v11 || (xpc_object_t v11 = xpc_null_create()) != 0)
        {
          if (MEMORY[0x1C8792D30](v11) == MEMORY[0x1E4F14590])
          {
            xpc_retain(v11);
            xpc_object_t v12 = v11;
          }
          else
          {
            xpc_object_t v12 = xpc_null_create();
          }
        }
        else
        {
          xpc_object_t v12 = xpc_null_create();
          xpc_object_t v11 = 0;
        }
        xpc_release(v11);
        xpc_object_t v16 = xpc_null_create();
        xpc_object_t v17 = object;
        xpc_object_t object = v12;
        xpc_release(v17);
        xpc_release(v16);
        xpc_object_t v18 = *a2;
        if (*a2) {
          xpc_retain(*a2);
        }
        else {
          xpc_object_t v18 = xpc_null_create();
        }
        xpc_dictionary_set_value(v12, (const char *)*MEMORY[0x1E4F4C418], v18);
        xpc_object_t v19 = xpc_null_create();
        xpc_release(v18);
        xpc_release(v19);
      }
      if (MEMORY[0x1C8792D30](*a2) == v10) {
        unsigned int v20 = 0;
      }
      else {
        unsigned int v20 = -534716416;
      }
      unsigned int v21 = v20;
      dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(a1 + 6, &v21, &object);
      xpc_release(object);
      uint64_t v13 = v24;
      if (v24) {
        goto LABEL_25;
      }
    }
  }
}

void sub_1C584B428(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  xpc_release(v11);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI11RadioModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb2_E3__2EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_(void *a1)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (void *)*a1;
  uint64_t v3 = *(void **)*a1;
  if ((*(unsigned int (**)(void *))(*v3 + 88))(v3))
  {
    memset(__p, 170, 24);
    uint64_t v4 = (const void *)*MEMORY[0x1E4F4CCB8];
    size_t v5 = strlen((const char *)*MEMORY[0x1E4F4CCB8]);
    if (v5 >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    std::string::size_type v6 = v5;
    if (v5 >= 0x17)
    {
      uint64_t v16 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v5 | 7) != 0x17) {
        uint64_t v16 = v5 | 7;
      }
      uint64_t v17 = v16 + 1;
      p_dst = (std::string *)operator new(v16 + 1);
      __dst.__r_.__value_.__l.__size_ = v6;
      __dst.__r_.__value_.__r.__words[2] = v17 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v5;
      p_dst = &__dst;
      if (!v5)
      {
LABEL_28:
        p_dst->__r_.__value_.__s.__data_[v6] = 0;
        xpc_object_t v18 = (char *)operator new(0x28uLL);
        strcpy(v18, " rejected; ABM is shutting down ");
        xpc_object_t v19 = std::string::append(&__dst, v18, 0x20uLL);
        long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
        __p[2] = (void *)v19->__r_.__value_.__r.__words[2];
        *(_OWORD *)std::string __p = v20;
        v19->__r_.__value_.__l.__size_ = 0;
        v19->__r_.__value_.__r.__words[2] = 0;
        v19->__r_.__value_.__r.__words[0] = 0;
        operator delete(v18);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__dst.__r_.__value_.__l.__data_);
          unsigned int v21 = v3[11];
          if (!os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
          {
LABEL_30:
            int v22 = v2 + 1;
            if (!v2[1])
            {
LABEL_74:
              if (SHIBYTE(__p[2]) < 0) {
                operator delete(__p[0]);
              }
              goto LABEL_76;
            }
LABEL_56:
            __dst.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
            uint64_t v28 = (void *)HIBYTE(__p[2]);
            if (SHIBYTE(__p[2]) < 0) {
              uint64_t v28 = __p[1];
            }
            if (v28)
            {
              xpc_object_t v29 = xpc_dictionary_create(0, 0, 0);
              if (v29 || (xpc_object_t v29 = xpc_null_create()) != 0)
              {
                if (MEMORY[0x1C8792D30](v29) == MEMORY[0x1E4F14590])
                {
                  xpc_retain(v29);
                  xpc_object_t v30 = v29;
                }
                else
                {
                  xpc_object_t v30 = xpc_null_create();
                }
              }
              else
              {
                xpc_object_t v30 = xpc_null_create();
                xpc_object_t v29 = 0;
              }
              xpc_release(v29);
              xpc_object_t v31 = xpc_null_create();
              unint64_t v32 = (void *)__dst.__r_.__value_.__r.__words[0];
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v30;
              xpc_release(v32);
              xpc_release(v31);
              if (SHIBYTE(__p[2]) >= 0) {
                uint64_t v33 = __p;
              }
              else {
                uint64_t v33 = (void **)__p[0];
              }
              xpc_object_t v34 = xpc_string_create((const char *)v33);
              if (!v34) {
                xpc_object_t v34 = xpc_null_create();
              }
              xpc_dictionary_set_value(v30, (const char *)*MEMORY[0x1E4F4C240], v34);
              xpc_object_t v35 = xpc_null_create();
              xpc_release(v34);
              xpc_release(v35);
            }
            unsigned int v42 = -534716415;
            dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(v22, &v42, (void **)&__dst.__r_.__value_.__l.__data_);
            xpc_release(__dst.__r_.__value_.__l.__data_);
            goto LABEL_74;
          }
        }
        else
        {
          unsigned int v21 = v3[11];
          if (!os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_30;
          }
        }
        size_t v27 = __p;
        if (SHIBYTE(__p[2]) < 0) {
          size_t v27 = (void **)__p[0];
        }
        LODWORD(__dst.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = (std::string::size_type)v27;
        _os_log_impl(&dword_1C5767000, v21, OS_LOG_TYPE_DEFAULT, "#I %s", (uint8_t *)&__dst, 0xCu);
        int v22 = v2 + 1;
        if (!v2[1]) {
          goto LABEL_74;
        }
        goto LABEL_56;
      }
    }
    memmove(p_dst, v4, v6);
    goto LABEL_28;
  }
  xpc_object_t v8 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  uint64_t v9 = off_1EBBDD2A0;
  if (!off_1EBBDD2A0)
  {
    CommandDriverFactory::create_default_global((uint64_t *)__p, v8);
    long long v10 = *(_OWORD *)__p;
    __p[0] = 0;
    __p[1] = 0;
    xpc_object_t v11 = (std::__shared_weak_count *)*(&off_1EBBDD2A0 + 1);
    off_1EBBDD2A0 = v10;
    if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    xpc_object_t v12 = (std::__shared_weak_count *)__p[1];
    if (__p[1] && !atomic_fetch_add((atomic_ullong *volatile)__p[1] + 1, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
    uint64_t v9 = off_1EBBDD2A0;
  }
  uint64_t v13 = (std::__shared_weak_count *)*(&off_1EBBDD2A0 + 1);
  if (*(&off_1EBBDD2A0 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDD2A0 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)v9 + 16))(&__dst, v9);
  if (__dst.__r_.__value_.__l.__size_)
  {
    xpc_object_t v14 = std::__shared_weak_count::lock((std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_);
    if (v14) {
      std::string::size_type v15 = __dst.__r_.__value_.__r.__words[0];
    }
    else {
      std::string::size_type v15 = 0;
    }
    if (__dst.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_);
    }
    if (!v13) {
      goto LABEL_34;
    }
  }
  else
  {
    xpc_object_t v14 = 0;
    std::string::size_type v15 = 0;
    if (!v13) {
      goto LABEL_34;
    }
  }
  if (!atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
    if (v15) {
      goto LABEL_35;
    }
    goto LABEL_49;
  }
LABEL_34:
  if (v15)
  {
LABEL_35:
    __p[0] = (void *)MEMORY[0x1E4F143A8];
    __p[1] = (void *)1174405120;
    __p[2] = ___ZZZZN11RadioModule10initializeEN8dispatch13group_sessionEEUb_EUb2_ENK3__2clEv_block_invoke;
    __p[3] = &__block_descriptor_tmp_246;
    __p[4] = *((void **)v2 + 2);
    uint64_t v23 = (std::__shared_weak_count *)v2[3];
    uint64_t v40 = v23;
    if (v23) {
      atomic_fetch_add_explicit(&v23->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v24 = (void *)v2[1];
    if (v24) {
      uint64_t v24 = _Block_copy(v24);
    }
    aBlocunint64_t k = v24;
    uint64_t v25 = _Block_copy(__p);
    size_t v26 = v3[17];
    if (v26) {
      dispatch_retain(v26);
    }
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v25;
    __dst.__r_.__value_.__l.__size_ = (std::string::size_type)v26;
    (*(void (**)(std::string::size_type, std::string *))(*(void *)v15 + 280))(v15, &__dst);
    if (__dst.__r_.__value_.__l.__size_) {
      dispatch_release((dispatch_object_t)__dst.__r_.__value_.__l.__size_);
    }
    if (__dst.__r_.__value_.__r.__words[0]) {
      _Block_release(__dst.__r_.__value_.__l.__data_);
    }
    if (aBlock) {
      _Block_release(aBlock);
    }
    if (v40) {
      std::__shared_weak_count::__release_weak(v40);
    }
  }
LABEL_49:
  if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
LABEL_76:
  size_t v36 = (std::__shared_weak_count *)v2[3];
  if (v36) {
    std::__shared_weak_count::__release_weak(v36);
  }
  __int16 v37 = (const void *)v2[1];
  if (v37) {
    _Block_release(v37);
  }
  operator delete(v2);
  uint64_t v38 = (std::__shared_weak_count *)a1[2];
  if (v38 && !atomic_fetch_add(&v38->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
    std::__shared_weak_count::__release_weak(v38);
  }
  operator delete(a1);
}

void sub_1C584BAFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17, void *aBlock, uint64_t a19, xpc_object_t object,dispatch_object_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void ___ZZZZN11RadioModule10initializeEN8dispatch13group_sessionEEUb_EUb2_ENK3__2clEv_block_invoke(void *a1, xpc_object_t *a2, xpc_object_t *a3)
{
  uint64_t v4 = (std::__shared_weak_count *)a1[5];
  if (v4)
  {
    uint64_t v7 = std::__shared_weak_count::lock(v4);
    uint64_t v24 = v7;
    if (v7)
    {
      if (!a1[4])
      {
        uint64_t v13 = v7;
LABEL_25:
        if (!atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
        return;
      }
      xpc_object_t v8 = xpc_null_create();
      xpc_object_t object = v8;
      uint64_t v9 = MEMORY[0x1C8792D30](*a2);
      uint64_t v10 = MEMORY[0x1E4F145D8];
      if (v9 == MEMORY[0x1E4F145D8])
      {
        xpc_object_t v14 = *a3;
        if (v14 && MEMORY[0x1C8792D30](v14) == MEMORY[0x1E4F14590]) {
          xpc_retain(v14);
        }
        else {
          xpc_object_t v14 = xpc_null_create();
        }
        xpc_object_t v15 = xpc_null_create();
        xpc_object_t object = v14;
        xpc_release(v8);
        xpc_release(v15);
      }
      else
      {
        xpc_object_t v11 = xpc_dictionary_create(0, 0, 0);
        if (v11 || (xpc_object_t v11 = xpc_null_create()) != 0)
        {
          if (MEMORY[0x1C8792D30](v11) == MEMORY[0x1E4F14590])
          {
            xpc_retain(v11);
            xpc_object_t v12 = v11;
          }
          else
          {
            xpc_object_t v12 = xpc_null_create();
          }
        }
        else
        {
          xpc_object_t v12 = xpc_null_create();
          xpc_object_t v11 = 0;
        }
        xpc_release(v11);
        xpc_object_t v16 = xpc_null_create();
        xpc_object_t v17 = object;
        xpc_object_t object = v12;
        xpc_release(v17);
        xpc_release(v16);
        xpc_object_t v18 = *a2;
        if (*a2) {
          xpc_retain(*a2);
        }
        else {
          xpc_object_t v18 = xpc_null_create();
        }
        xpc_dictionary_set_value(v12, (const char *)*MEMORY[0x1E4F4C418], v18);
        xpc_object_t v19 = xpc_null_create();
        xpc_release(v18);
        xpc_release(v19);
      }
      if (MEMORY[0x1C8792D30](*a2) == v10) {
        unsigned int v20 = 0;
      }
      else {
        unsigned int v20 = -534716416;
      }
      unsigned int v21 = v20;
      dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(a1 + 6, &v21, &object);
      xpc_release(object);
      uint64_t v13 = v24;
      if (v24) {
        goto LABEL_25;
      }
    }
  }
}

void sub_1C584BFA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  xpc_release(v11);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI11RadioModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb3_E3__3EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_(void *a1)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (void *)*a1;
  uint64_t v3 = *(void **)*a1;
  if ((*(unsigned int (**)(void *))(*v3 + 88))(v3))
  {
    memset(__p, 170, 24);
    uint64_t v4 = (const void *)*MEMORY[0x1E4F4CE70];
    size_t v5 = strlen((const char *)*MEMORY[0x1E4F4CE70]);
    if (v5 >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    std::string::size_type v6 = v5;
    if (v5 >= 0x17)
    {
      uint64_t v16 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v5 | 7) != 0x17) {
        uint64_t v16 = v5 | 7;
      }
      uint64_t v17 = v16 + 1;
      p_dst = (std::string *)operator new(v16 + 1);
      __dst.__r_.__value_.__l.__size_ = v6;
      __dst.__r_.__value_.__r.__words[2] = v17 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v5;
      p_dst = &__dst;
      if (!v5)
      {
LABEL_28:
        p_dst->__r_.__value_.__s.__data_[v6] = 0;
        xpc_object_t v18 = (char *)operator new(0x28uLL);
        strcpy(v18, " rejected; ABM is shutting down ");
        xpc_object_t v19 = std::string::append(&__dst, v18, 0x20uLL);
        long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
        __p[2] = (void *)v19->__r_.__value_.__r.__words[2];
        *(_OWORD *)std::string __p = v20;
        v19->__r_.__value_.__l.__size_ = 0;
        v19->__r_.__value_.__r.__words[2] = 0;
        v19->__r_.__value_.__r.__words[0] = 0;
        operator delete(v18);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__dst.__r_.__value_.__l.__data_);
          unsigned int v21 = v3[11];
          if (!os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
          {
LABEL_30:
            int v22 = v2 + 1;
            if (!v2[1])
            {
LABEL_74:
              if (SHIBYTE(__p[2]) < 0) {
                operator delete(__p[0]);
              }
              goto LABEL_76;
            }
LABEL_56:
            __dst.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
            uint64_t v28 = (void *)HIBYTE(__p[2]);
            if (SHIBYTE(__p[2]) < 0) {
              uint64_t v28 = __p[1];
            }
            if (v28)
            {
              xpc_object_t v29 = xpc_dictionary_create(0, 0, 0);
              if (v29 || (xpc_object_t v29 = xpc_null_create()) != 0)
              {
                if (MEMORY[0x1C8792D30](v29) == MEMORY[0x1E4F14590])
                {
                  xpc_retain(v29);
                  xpc_object_t v30 = v29;
                }
                else
                {
                  xpc_object_t v30 = xpc_null_create();
                }
              }
              else
              {
                xpc_object_t v30 = xpc_null_create();
                xpc_object_t v29 = 0;
              }
              xpc_release(v29);
              xpc_object_t v31 = xpc_null_create();
              unint64_t v32 = (void *)__dst.__r_.__value_.__r.__words[0];
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v30;
              xpc_release(v32);
              xpc_release(v31);
              if (SHIBYTE(__p[2]) >= 0) {
                uint64_t v33 = __p;
              }
              else {
                uint64_t v33 = (void **)__p[0];
              }
              xpc_object_t v34 = xpc_string_create((const char *)v33);
              if (!v34) {
                xpc_object_t v34 = xpc_null_create();
              }
              xpc_dictionary_set_value(v30, (const char *)*MEMORY[0x1E4F4C240], v34);
              xpc_object_t v35 = xpc_null_create();
              xpc_release(v34);
              xpc_release(v35);
            }
            unsigned int v42 = -534716415;
            dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(v22, &v42, (void **)&__dst.__r_.__value_.__l.__data_);
            xpc_release(__dst.__r_.__value_.__l.__data_);
            goto LABEL_74;
          }
        }
        else
        {
          unsigned int v21 = v3[11];
          if (!os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_30;
          }
        }
        size_t v27 = __p;
        if (SHIBYTE(__p[2]) < 0) {
          size_t v27 = (void **)__p[0];
        }
        LODWORD(__dst.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = (std::string::size_type)v27;
        _os_log_impl(&dword_1C5767000, v21, OS_LOG_TYPE_DEFAULT, "#I %s", (uint8_t *)&__dst, 0xCu);
        int v22 = v2 + 1;
        if (!v2[1]) {
          goto LABEL_74;
        }
        goto LABEL_56;
      }
    }
    memmove(p_dst, v4, v6);
    goto LABEL_28;
  }
  xpc_object_t v8 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  uint64_t v9 = off_1EBBDD2A0;
  if (!off_1EBBDD2A0)
  {
    CommandDriverFactory::create_default_global((uint64_t *)__p, v8);
    long long v10 = *(_OWORD *)__p;
    __p[0] = 0;
    __p[1] = 0;
    xpc_object_t v11 = (std::__shared_weak_count *)*(&off_1EBBDD2A0 + 1);
    off_1EBBDD2A0 = v10;
    if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    xpc_object_t v12 = (std::__shared_weak_count *)__p[1];
    if (__p[1] && !atomic_fetch_add((atomic_ullong *volatile)__p[1] + 1, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
    uint64_t v9 = off_1EBBDD2A0;
  }
  uint64_t v13 = (std::__shared_weak_count *)*(&off_1EBBDD2A0 + 1);
  if (*(&off_1EBBDD2A0 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDD2A0 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)v9 + 16))(&__dst, v9);
  if (__dst.__r_.__value_.__l.__size_)
  {
    xpc_object_t v14 = std::__shared_weak_count::lock((std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_);
    if (v14) {
      std::string::size_type v15 = __dst.__r_.__value_.__r.__words[0];
    }
    else {
      std::string::size_type v15 = 0;
    }
    if (__dst.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_);
    }
    if (!v13) {
      goto LABEL_34;
    }
  }
  else
  {
    xpc_object_t v14 = 0;
    std::string::size_type v15 = 0;
    if (!v13) {
      goto LABEL_34;
    }
  }
  if (!atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
    if (v15) {
      goto LABEL_35;
    }
    goto LABEL_49;
  }
LABEL_34:
  if (v15)
  {
LABEL_35:
    __p[0] = (void *)MEMORY[0x1E4F143A8];
    __p[1] = (void *)1174405120;
    __p[2] = ___ZZZZN11RadioModule10initializeEN8dispatch13group_sessionEEUb_EUb3_ENK3__3clEv_block_invoke;
    __p[3] = &__block_descriptor_tmp_249;
    __p[4] = *((void **)v2 + 2);
    uint64_t v23 = (std::__shared_weak_count *)v2[3];
    uint64_t v40 = v23;
    if (v23) {
      atomic_fetch_add_explicit(&v23->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v24 = (void *)v2[1];
    if (v24) {
      uint64_t v24 = _Block_copy(v24);
    }
    aBlocunint64_t k = v24;
    uint64_t v25 = _Block_copy(__p);
    size_t v26 = v3[17];
    if (v26) {
      dispatch_retain(v26);
    }
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v25;
    __dst.__r_.__value_.__l.__size_ = (std::string::size_type)v26;
    (*(void (**)(std::string::size_type, std::string *))(*(void *)v15 + 288))(v15, &__dst);
    if (__dst.__r_.__value_.__l.__size_) {
      dispatch_release((dispatch_object_t)__dst.__r_.__value_.__l.__size_);
    }
    if (__dst.__r_.__value_.__r.__words[0]) {
      _Block_release(__dst.__r_.__value_.__l.__data_);
    }
    if (aBlock) {
      _Block_release(aBlock);
    }
    if (v40) {
      std::__shared_weak_count::__release_weak(v40);
    }
  }
LABEL_49:
  if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
LABEL_76:
  size_t v36 = (std::__shared_weak_count *)v2[3];
  if (v36) {
    std::__shared_weak_count::__release_weak(v36);
  }
  __int16 v37 = (const void *)v2[1];
  if (v37) {
    _Block_release(v37);
  }
  operator delete(v2);
  uint64_t v38 = (std::__shared_weak_count *)a1[2];
  if (v38 && !atomic_fetch_add(&v38->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
    std::__shared_weak_count::__release_weak(v38);
  }
  operator delete(a1);
}

void sub_1C584C678(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17, void *aBlock, uint64_t a19, xpc_object_t object,dispatch_object_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void ___ZZZZN11RadioModule10initializeEN8dispatch13group_sessionEEUb_EUb3_ENK3__3clEv_block_invoke(void *a1, void *a2, xpc_object_t *a3)
{
  uint64_t v4 = (std::__shared_weak_count *)a1[5];
  if (v4)
  {
    uint64_t v7 = std::__shared_weak_count::lock(v4);
    xpc_object_t v18 = v7;
    if (v7)
    {
      xpc_object_t v8 = v7;
      if (a1[4])
      {
        xpc_object_t v9 = xpc_null_create();
        xpc_object_t object = v9;
        uint64_t v10 = MEMORY[0x1C8792D30](*a2);
        uint64_t v11 = MEMORY[0x1E4F145D8];
        if (v10 == MEMORY[0x1E4F145D8])
        {
          xpc_object_t v12 = *a3;
          if (v12 && MEMORY[0x1C8792D30](v12) == MEMORY[0x1E4F14590]) {
            xpc_retain(v12);
          }
          else {
            xpc_object_t v12 = xpc_null_create();
          }
          xpc_object_t v13 = xpc_null_create();
          xpc_object_t object = v12;
          xpc_release(v9);
          xpc_release(v13);
        }
        if (MEMORY[0x1C8792D30](*a2) == v11) {
          unsigned int v14 = 0;
        }
        else {
          unsigned int v14 = -534716416;
        }
        unsigned int v15 = v14;
        dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(a1 + 6, &v15, &object);
        xpc_release(object);
      }
      if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
}

void sub_1C584CA00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  xpc_release(v11);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI11RadioModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb4_E3__4EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_(void *a1)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (void *)*a1;
  uint64_t v3 = *(void **)*a1;
  if ((*(unsigned int (**)(void *))(*v3 + 88))(v3))
  {
    memset(__p, 170, 24);
    uint64_t v4 = (const void *)*MEMORY[0x1E4F4C7E0];
    size_t v5 = strlen((const char *)*MEMORY[0x1E4F4C7E0]);
    if (v5 >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    std::string::size_type v6 = v5;
    if (v5 >= 0x17)
    {
      uint64_t v16 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v5 | 7) != 0x17) {
        uint64_t v16 = v5 | 7;
      }
      uint64_t v17 = v16 + 1;
      p_dst = (std::string *)operator new(v16 + 1);
      __dst.__r_.__value_.__l.__size_ = v6;
      __dst.__r_.__value_.__r.__words[2] = v17 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v5;
      p_dst = &__dst;
      if (!v5)
      {
LABEL_28:
        p_dst->__r_.__value_.__s.__data_[v6] = 0;
        xpc_object_t v18 = (char *)operator new(0x28uLL);
        strcpy(v18, " rejected; ABM is shutting down ");
        xpc_object_t v19 = std::string::append(&__dst, v18, 0x20uLL);
        long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
        __p[2] = (void *)v19->__r_.__value_.__r.__words[2];
        *(_OWORD *)std::string __p = v20;
        v19->__r_.__value_.__l.__size_ = 0;
        v19->__r_.__value_.__r.__words[2] = 0;
        v19->__r_.__value_.__r.__words[0] = 0;
        operator delete(v18);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__dst.__r_.__value_.__l.__data_);
          unsigned int v21 = v3[11];
          if (!os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
          {
LABEL_30:
            int v22 = v2 + 1;
            if (!v2[1])
            {
LABEL_74:
              if (SHIBYTE(__p[2]) < 0) {
                operator delete(__p[0]);
              }
              goto LABEL_76;
            }
LABEL_56:
            __dst.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
            uint64_t v28 = (void *)HIBYTE(__p[2]);
            if (SHIBYTE(__p[2]) < 0) {
              uint64_t v28 = __p[1];
            }
            if (v28)
            {
              xpc_object_t v29 = xpc_dictionary_create(0, 0, 0);
              if (v29 || (xpc_object_t v29 = xpc_null_create()) != 0)
              {
                if (MEMORY[0x1C8792D30](v29) == MEMORY[0x1E4F14590])
                {
                  xpc_retain(v29);
                  xpc_object_t v30 = v29;
                }
                else
                {
                  xpc_object_t v30 = xpc_null_create();
                }
              }
              else
              {
                xpc_object_t v30 = xpc_null_create();
                xpc_object_t v29 = 0;
              }
              xpc_release(v29);
              xpc_object_t v31 = xpc_null_create();
              unint64_t v32 = (void *)__dst.__r_.__value_.__r.__words[0];
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v30;
              xpc_release(v32);
              xpc_release(v31);
              if (SHIBYTE(__p[2]) >= 0) {
                uint64_t v33 = __p;
              }
              else {
                uint64_t v33 = (void **)__p[0];
              }
              xpc_object_t v34 = xpc_string_create((const char *)v33);
              if (!v34) {
                xpc_object_t v34 = xpc_null_create();
              }
              xpc_dictionary_set_value(v30, (const char *)*MEMORY[0x1E4F4C240], v34);
              xpc_object_t v35 = xpc_null_create();
              xpc_release(v34);
              xpc_release(v35);
            }
            unsigned int v42 = -534716415;
            dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(v22, &v42, (void **)&__dst.__r_.__value_.__l.__data_);
            xpc_release(__dst.__r_.__value_.__l.__data_);
            goto LABEL_74;
          }
        }
        else
        {
          unsigned int v21 = v3[11];
          if (!os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_30;
          }
        }
        size_t v27 = __p;
        if (SHIBYTE(__p[2]) < 0) {
          size_t v27 = (void **)__p[0];
        }
        LODWORD(__dst.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = (std::string::size_type)v27;
        _os_log_impl(&dword_1C5767000, v21, OS_LOG_TYPE_DEFAULT, "#I %s", (uint8_t *)&__dst, 0xCu);
        int v22 = v2 + 1;
        if (!v2[1]) {
          goto LABEL_74;
        }
        goto LABEL_56;
      }
    }
    memmove(p_dst, v4, v6);
    goto LABEL_28;
  }
  xpc_object_t v8 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  uint64_t v9 = off_1EBBDD2A0;
  if (!off_1EBBDD2A0)
  {
    CommandDriverFactory::create_default_global((uint64_t *)__p, v8);
    long long v10 = *(_OWORD *)__p;
    __p[0] = 0;
    __p[1] = 0;
    uint64_t v11 = (std::__shared_weak_count *)*(&off_1EBBDD2A0 + 1);
    off_1EBBDD2A0 = v10;
    if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    xpc_object_t v12 = (std::__shared_weak_count *)__p[1];
    if (__p[1] && !atomic_fetch_add((atomic_ullong *volatile)__p[1] + 1, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
    uint64_t v9 = off_1EBBDD2A0;
  }
  xpc_object_t v13 = (std::__shared_weak_count *)*(&off_1EBBDD2A0 + 1);
  if (*(&off_1EBBDD2A0 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDD2A0 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)v9 + 16))(&__dst, v9);
  if (__dst.__r_.__value_.__l.__size_)
  {
    unsigned int v14 = std::__shared_weak_count::lock((std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_);
    if (v14) {
      std::string::size_type v15 = __dst.__r_.__value_.__r.__words[0];
    }
    else {
      std::string::size_type v15 = 0;
    }
    if (__dst.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_);
    }
    if (!v13) {
      goto LABEL_34;
    }
  }
  else
  {
    unsigned int v14 = 0;
    std::string::size_type v15 = 0;
    if (!v13) {
      goto LABEL_34;
    }
  }
  if (!atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
    if (v15) {
      goto LABEL_35;
    }
    goto LABEL_49;
  }
LABEL_34:
  if (v15)
  {
LABEL_35:
    __p[0] = (void *)MEMORY[0x1E4F143A8];
    __p[1] = (void *)1174405120;
    __p[2] = ___ZZZZN11RadioModule10initializeEN8dispatch13group_sessionEEUb_EUb4_ENK3__4clEv_block_invoke;
    __p[3] = &__block_descriptor_tmp_252;
    __p[4] = *((void **)v2 + 2);
    uint64_t v23 = (std::__shared_weak_count *)v2[3];
    uint64_t v40 = v23;
    if (v23) {
      atomic_fetch_add_explicit(&v23->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v24 = (void *)v2[1];
    if (v24) {
      uint64_t v24 = _Block_copy(v24);
    }
    aBlocunint64_t k = v24;
    uint64_t v25 = _Block_copy(__p);
    size_t v26 = v3[17];
    if (v26) {
      dispatch_retain(v26);
    }
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v25;
    __dst.__r_.__value_.__l.__size_ = (std::string::size_type)v26;
    (*(void (**)(std::string::size_type, std::string *))(*(void *)v15 + 296))(v15, &__dst);
    if (__dst.__r_.__value_.__l.__size_) {
      dispatch_release((dispatch_object_t)__dst.__r_.__value_.__l.__size_);
    }
    if (__dst.__r_.__value_.__r.__words[0]) {
      _Block_release(__dst.__r_.__value_.__l.__data_);
    }
    if (aBlock) {
      _Block_release(aBlock);
    }
    if (v40) {
      std::__shared_weak_count::__release_weak(v40);
    }
  }
LABEL_49:
  if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
LABEL_76:
  size_t v36 = (std::__shared_weak_count *)v2[3];
  if (v36) {
    std::__shared_weak_count::__release_weak(v36);
  }
  __int16 v37 = (const void *)v2[1];
  if (v37) {
    _Block_release(v37);
  }
  operator delete(v2);
  uint64_t v38 = (std::__shared_weak_count *)a1[2];
  if (v38 && !atomic_fetch_add(&v38->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
    std::__shared_weak_count::__release_weak(v38);
  }
  operator delete(a1);
}

void sub_1C584D0D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17, void *aBlock, uint64_t a19, xpc_object_t object,dispatch_object_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void ___ZZZZN11RadioModule10initializeEN8dispatch13group_sessionEEUb_EUb4_ENK3__4clEv_block_invoke(void *a1, void *a2, xpc_object_t *a3)
{
  uint64_t v4 = (std::__shared_weak_count *)a1[5];
  if (v4)
  {
    uint64_t v7 = std::__shared_weak_count::lock(v4);
    xpc_object_t v18 = v7;
    if (v7)
    {
      xpc_object_t v8 = v7;
      if (a1[4])
      {
        xpc_object_t v9 = xpc_null_create();
        xpc_object_t object = v9;
        uint64_t v10 = MEMORY[0x1C8792D30](*a2);
        uint64_t v11 = MEMORY[0x1E4F145D8];
        if (v10 == MEMORY[0x1E4F145D8])
        {
          xpc_object_t v12 = *a3;
          if (v12 && MEMORY[0x1C8792D30](v12) == MEMORY[0x1E4F14590]) {
            xpc_retain(v12);
          }
          else {
            xpc_object_t v12 = xpc_null_create();
          }
          xpc_object_t v13 = xpc_null_create();
          xpc_object_t object = v12;
          xpc_release(v9);
          xpc_release(v13);
        }
        if (MEMORY[0x1C8792D30](*a2) == v11) {
          unsigned int v14 = 0;
        }
        else {
          unsigned int v14 = -534716416;
        }
        unsigned int v15 = v14;
        dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(a1 + 6, &v15, &object);
        xpc_release(object);
      }
      if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
}

void sub_1C584D458(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  xpc_release(v11);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI11RadioModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb5_E3__5EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_(void *a1)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (void *)*a1;
  uint64_t v3 = *(void **)*a1;
  if ((*(unsigned int (**)(void *))(*v3 + 88))(v3))
  {
    memset(__p, 170, 24);
    uint64_t v4 = (const void *)*MEMORY[0x1E4F4D158];
    size_t v5 = strlen((const char *)*MEMORY[0x1E4F4D158]);
    if (v5 >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    std::string::size_type v6 = v5;
    if (v5 >= 0x17)
    {
      uint64_t v16 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v5 | 7) != 0x17) {
        uint64_t v16 = v5 | 7;
      }
      uint64_t v17 = v16 + 1;
      p_dst = (std::string *)operator new(v16 + 1);
      __dst.__r_.__value_.__l.__size_ = v6;
      __dst.__r_.__value_.__r.__words[2] = v17 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v5;
      p_dst = &__dst;
      if (!v5)
      {
LABEL_28:
        p_dst->__r_.__value_.__s.__data_[v6] = 0;
        xpc_object_t v18 = (char *)operator new(0x28uLL);
        strcpy(v18, " rejected; ABM is shutting down ");
        xpc_object_t v19 = std::string::append(&__dst, v18, 0x20uLL);
        long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
        __p[2] = (void *)v19->__r_.__value_.__r.__words[2];
        *(_OWORD *)std::string __p = v20;
        v19->__r_.__value_.__l.__size_ = 0;
        v19->__r_.__value_.__r.__words[2] = 0;
        v19->__r_.__value_.__r.__words[0] = 0;
        operator delete(v18);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__dst.__r_.__value_.__l.__data_);
          unsigned int v21 = v3[11];
          if (!os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
          {
LABEL_30:
            int v22 = v2 + 1;
            if (!v2[1])
            {
LABEL_74:
              if (SHIBYTE(__p[2]) < 0) {
                operator delete(__p[0]);
              }
              goto LABEL_76;
            }
LABEL_56:
            __dst.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
            uint64_t v28 = (void *)HIBYTE(__p[2]);
            if (SHIBYTE(__p[2]) < 0) {
              uint64_t v28 = __p[1];
            }
            if (v28)
            {
              xpc_object_t v29 = xpc_dictionary_create(0, 0, 0);
              if (v29 || (xpc_object_t v29 = xpc_null_create()) != 0)
              {
                if (MEMORY[0x1C8792D30](v29) == MEMORY[0x1E4F14590])
                {
                  xpc_retain(v29);
                  xpc_object_t v30 = v29;
                }
                else
                {
                  xpc_object_t v30 = xpc_null_create();
                }
              }
              else
              {
                xpc_object_t v30 = xpc_null_create();
                xpc_object_t v29 = 0;
              }
              xpc_release(v29);
              xpc_object_t v31 = xpc_null_create();
              unint64_t v32 = (void *)__dst.__r_.__value_.__r.__words[0];
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v30;
              xpc_release(v32);
              xpc_release(v31);
              if (SHIBYTE(__p[2]) >= 0) {
                uint64_t v33 = __p;
              }
              else {
                uint64_t v33 = (void **)__p[0];
              }
              xpc_object_t v34 = xpc_string_create((const char *)v33);
              if (!v34) {
                xpc_object_t v34 = xpc_null_create();
              }
              xpc_dictionary_set_value(v30, (const char *)*MEMORY[0x1E4F4C240], v34);
              xpc_object_t v35 = xpc_null_create();
              xpc_release(v34);
              xpc_release(v35);
            }
            unsigned int v42 = -534716415;
            dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(v22, &v42, (void **)&__dst.__r_.__value_.__l.__data_);
            xpc_release(__dst.__r_.__value_.__l.__data_);
            goto LABEL_74;
          }
        }
        else
        {
          unsigned int v21 = v3[11];
          if (!os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_30;
          }
        }
        size_t v27 = __p;
        if (SHIBYTE(__p[2]) < 0) {
          size_t v27 = (void **)__p[0];
        }
        LODWORD(__dst.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = (std::string::size_type)v27;
        _os_log_impl(&dword_1C5767000, v21, OS_LOG_TYPE_DEFAULT, "#I %s", (uint8_t *)&__dst, 0xCu);
        int v22 = v2 + 1;
        if (!v2[1]) {
          goto LABEL_74;
        }
        goto LABEL_56;
      }
    }
    memmove(p_dst, v4, v6);
    goto LABEL_28;
  }
  xpc_object_t v8 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  uint64_t v9 = off_1EBBDD2A0;
  if (!off_1EBBDD2A0)
  {
    CommandDriverFactory::create_default_global((uint64_t *)__p, v8);
    long long v10 = *(_OWORD *)__p;
    __p[0] = 0;
    __p[1] = 0;
    uint64_t v11 = (std::__shared_weak_count *)*(&off_1EBBDD2A0 + 1);
    off_1EBBDD2A0 = v10;
    if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    xpc_object_t v12 = (std::__shared_weak_count *)__p[1];
    if (__p[1] && !atomic_fetch_add((atomic_ullong *volatile)__p[1] + 1, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
    uint64_t v9 = off_1EBBDD2A0;
  }
  xpc_object_t v13 = (std::__shared_weak_count *)*(&off_1EBBDD2A0 + 1);
  if (*(&off_1EBBDD2A0 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDD2A0 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)v9 + 16))(&__dst, v9);
  if (__dst.__r_.__value_.__l.__size_)
  {
    unsigned int v14 = std::__shared_weak_count::lock((std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_);
    if (v14) {
      std::string::size_type v15 = __dst.__r_.__value_.__r.__words[0];
    }
    else {
      std::string::size_type v15 = 0;
    }
    if (__dst.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_);
    }
    if (!v13) {
      goto LABEL_34;
    }
  }
  else
  {
    unsigned int v14 = 0;
    std::string::size_type v15 = 0;
    if (!v13) {
      goto LABEL_34;
    }
  }
  if (!atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
    if (v15) {
      goto LABEL_35;
    }
    goto LABEL_49;
  }
LABEL_34:
  if (v15)
  {
LABEL_35:
    __p[0] = (void *)MEMORY[0x1E4F143A8];
    __p[1] = (void *)1174405120;
    __p[2] = ___ZZZZN11RadioModule10initializeEN8dispatch13group_sessionEEUb_EUb5_ENK3__5clEv_block_invoke;
    __p[3] = &__block_descriptor_tmp_255;
    __p[4] = *((void **)v2 + 2);
    uint64_t v23 = (std::__shared_weak_count *)v2[3];
    uint64_t v40 = v23;
    if (v23) {
      atomic_fetch_add_explicit(&v23->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v24 = (void *)v2[1];
    if (v24) {
      uint64_t v24 = _Block_copy(v24);
    }
    aBlocunint64_t k = v24;
    uint64_t v25 = _Block_copy(__p);
    size_t v26 = v3[17];
    if (v26) {
      dispatch_retain(v26);
    }
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v25;
    __dst.__r_.__value_.__l.__size_ = (std::string::size_type)v26;
    (*(void (**)(std::string::size_type, std::string *))(*(void *)v15 + 232))(v15, &__dst);
    if (__dst.__r_.__value_.__l.__size_) {
      dispatch_release((dispatch_object_t)__dst.__r_.__value_.__l.__size_);
    }
    if (__dst.__r_.__value_.__r.__words[0]) {
      _Block_release(__dst.__r_.__value_.__l.__data_);
    }
    if (aBlock) {
      _Block_release(aBlock);
    }
    if (v40) {
      std::__shared_weak_count::__release_weak(v40);
    }
  }
LABEL_49:
  if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
LABEL_76:
  size_t v36 = (std::__shared_weak_count *)v2[3];
  if (v36) {
    std::__shared_weak_count::__release_weak(v36);
  }
  __int16 v37 = (const void *)v2[1];
  if (v37) {
    _Block_release(v37);
  }
  operator delete(v2);
  uint64_t v38 = (std::__shared_weak_count *)a1[2];
  if (v38 && !atomic_fetch_add(&v38->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
    std::__shared_weak_count::__release_weak(v38);
  }
  operator delete(a1);
}

void sub_1C584DB20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17, void *aBlock, uint64_t a19, xpc_object_t object,dispatch_object_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void ___ZZZZN11RadioModule10initializeEN8dispatch13group_sessionEEUb_EUb5_ENK3__5clEv_block_invoke(void *a1, void *a2, void *a3)
{
  uint64_t v4 = (std::__shared_weak_count *)a1[5];
  if (!v4) {
    return;
  }
  uint64_t v7 = std::__shared_weak_count::lock(v4);
  long long v20 = v7;
  if (!v7) {
    return;
  }
  if (!a1[4])
  {
    long long v10 = v7;
LABEL_22:
    if (!atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
    return;
  }
  xpc_object_t v8 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v9 = v8;
  if (v8)
  {
    xpc_object_t xdict = v8;
  }
  else
  {
    xpc_object_t v9 = xpc_null_create();
    xpc_object_t xdict = v9;
    if (!v9)
    {
      xpc_object_t v11 = xpc_null_create();
      xpc_object_t v9 = 0;
      goto LABEL_12;
    }
  }
  if (MEMORY[0x1C8792D30](v9) == MEMORY[0x1E4F14590])
  {
    xpc_retain(v9);
    goto LABEL_13;
  }
  xpc_object_t v11 = xpc_null_create();
LABEL_12:
  xpc_object_t xdict = v11;
LABEL_13:
  xpc_release(v9);
  uint64_t v12 = MEMORY[0x1C8792D30](*a3);
  uint64_t v13 = MEMORY[0x1E4F145D8];
  if (v12 != MEMORY[0x1E4F145D8])
  {
    xpc_object_t v14 = (xpc_object_t)*a3;
    if (v14) {
      xpc_retain(v14);
    }
    else {
      xpc_object_t v14 = xpc_null_create();
    }
    xpc_dictionary_set_value(xdict, (const char *)*MEMORY[0x1E4F4D318], v14);
    xpc_object_t v15 = xpc_null_create();
    xpc_release(v14);
    xpc_release(v15);
  }
  if (MEMORY[0x1C8792D30](*a2) == v13) {
    unsigned int v16 = 0;
  }
  else {
    unsigned int v16 = -534716416;
  }
  unsigned int v17 = v16;
  dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(a1 + 6, &v17, &xdict);
  xpc_release(xdict);
  long long v10 = v20;
  if (v20) {
    goto LABEL_22;
  }
}

void sub_1C584DF2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, char a11)
{
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI11RadioModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb6_E3__6EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_(void *a1)
{
  uint64_t v54 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (void *)*a1;
  uint64_t v3 = *(void **)*a1;
  if ((*(unsigned int (**)(void *))(*v3 + 88))(v3))
  {
    memset(object, 170, 24);
    uint64_t v4 = (const void *)*MEMORY[0x1E4F4D0E8];
    size_t v5 = strlen((const char *)*MEMORY[0x1E4F4D0E8]);
    if (v5 >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    std::string::size_type v6 = v5;
    if (v5 >= 0x17)
    {
      uint64_t v16 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v5 | 7) != 0x17) {
        uint64_t v16 = v5 | 7;
      }
      uint64_t v17 = v16 + 1;
      p_dst = (std::string *)operator new(v16 + 1);
      __dst.__r_.__value_.__l.__size_ = v6;
      __dst.__r_.__value_.__r.__words[2] = v17 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v5;
      p_dst = &__dst;
      if (!v5)
      {
LABEL_28:
        p_dst->__r_.__value_.__s.__data_[v6] = 0;
        xpc_object_t v18 = (char *)operator new(0x28uLL);
        strcpy(v18, " rejected; ABM is shutting down ");
        xpc_object_t v19 = std::string::append(&__dst, v18, 0x20uLL);
        long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
        object[2] = (xpc_object_t)v19->__r_.__value_.__r.__words[2];
        *(_OWORD *)xpc_object_t object = v20;
        v19->__r_.__value_.__l.__size_ = 0;
        v19->__r_.__value_.__r.__words[2] = 0;
        v19->__r_.__value_.__r.__words[0] = 0;
        operator delete(v18);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__dst.__r_.__value_.__l.__data_);
          unsigned int v21 = v3[11];
          if (!os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
          {
LABEL_30:
            int v22 = v2 + 2;
            if (!v2[2])
            {
LABEL_87:
              if (SHIBYTE(object[2]) < 0) {
                operator delete(object[0]);
              }
              goto LABEL_89;
            }
LABEL_41:
            __dst.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
            xpc_object_t v26 = (xpc_object_t)HIBYTE(object[2]);
            if (SHIBYTE(object[2]) < 0) {
              xpc_object_t v26 = object[1];
            }
            if (v26)
            {
              xpc_object_t v27 = xpc_dictionary_create(0, 0, 0);
              if (v27 || (xpc_object_t v27 = xpc_null_create()) != 0)
              {
                if (MEMORY[0x1C8792D30](v27) == MEMORY[0x1E4F14590])
                {
                  xpc_retain(v27);
                  xpc_object_t v28 = v27;
                }
                else
                {
                  xpc_object_t v28 = xpc_null_create();
                }
              }
              else
              {
                xpc_object_t v28 = xpc_null_create();
                xpc_object_t v27 = 0;
              }
              xpc_release(v27);
              xpc_object_t v39 = xpc_null_create();
              uint64_t v40 = (void *)__dst.__r_.__value_.__r.__words[0];
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v28;
              xpc_release(v40);
              xpc_release(v39);
              if (SHIBYTE(object[2]) >= 0) {
                uint64_t v41 = object;
              }
              else {
                uint64_t v41 = (xpc_object_t *)object[0];
              }
              xpc_object_t v42 = xpc_string_create((const char *)v41);
              if (!v42) {
                xpc_object_t v42 = xpc_null_create();
              }
              xpc_dictionary_set_value(v28, (const char *)*MEMORY[0x1E4F4C240], v42);
              xpc_object_t v43 = xpc_null_create();
              xpc_release(v42);
              xpc_release(v43);
            }
            LODWORD(v52) = -534716415;
            dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(v22, (unsigned int *)&v52, (void **)&__dst.__r_.__value_.__l.__data_);
            xpc_release(__dst.__r_.__value_.__l.__data_);
            goto LABEL_87;
          }
        }
        else
        {
          unsigned int v21 = v3[11];
          if (!os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_30;
          }
        }
        uint64_t v25 = object;
        if (SHIBYTE(object[2]) < 0) {
          uint64_t v25 = (xpc_object_t *)object[0];
        }
        LODWORD(__dst.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = (std::string::size_type)v25;
        _os_log_impl(&dword_1C5767000, v21, OS_LOG_TYPE_DEFAULT, "#I %s", (uint8_t *)&__dst, 0xCu);
        int v22 = v2 + 2;
        if (!v2[2]) {
          goto LABEL_87;
        }
        goto LABEL_41;
      }
    }
    memmove(p_dst, v4, v6);
    goto LABEL_28;
  }
  xpc_object_t v8 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  uint64_t v9 = off_1EBBDD2A0;
  if (!off_1EBBDD2A0)
  {
    CommandDriverFactory::create_default_global((uint64_t *)object, v8);
    long long v10 = *(_OWORD *)object;
    object[0] = 0;
    object[1] = 0;
    xpc_object_t v11 = (std::__shared_weak_count *)*(&off_1EBBDD2A0 + 1);
    off_1EBBDD2A0 = v10;
    if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    uint64_t v12 = (std::__shared_weak_count *)object[1];
    if (object[1] && !atomic_fetch_add((atomic_ullong *volatile)object[1] + 1, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
    uint64_t v9 = off_1EBBDD2A0;
  }
  uint64_t v13 = (std::__shared_weak_count *)*(&off_1EBBDD2A0 + 1);
  if (*(&off_1EBBDD2A0 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDD2A0 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)v9 + 16))(&__dst, v9);
  if (__dst.__r_.__value_.__l.__size_)
  {
    xpc_object_t v14 = std::__shared_weak_count::lock((std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_);
    if (v14) {
      std::string::size_type v15 = __dst.__r_.__value_.__r.__words[0];
    }
    else {
      std::string::size_type v15 = 0;
    }
    if (__dst.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_);
    }
    if (!v13) {
      goto LABEL_34;
    }
  }
  else
  {
    xpc_object_t v14 = 0;
    std::string::size_type v15 = 0;
    if (!v13) {
      goto LABEL_34;
    }
  }
  if (!atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
    if (v15) {
      goto LABEL_35;
    }
LABEL_49:
    xpc_object_t v29 = v3[11];
    if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
    {
      LOWORD(object[0]) = 0;
      _os_log_error_impl(&dword_1C5767000, v29, OS_LOG_TYPE_ERROR, "No radio driver", (uint8_t *)object, 2u);
    }
    xpc_object_t v30 = xpc_null_create();
    uint64_t v31 = v2[2];
    object[0] = v30;
    xpc_object_t v32 = xpc_null_create();
    (*(void (**)(uint64_t, uint64_t, xpc_object_t *))(v31 + 16))(v31, 3760250880, object);
    xpc_release(object[0]);
    xpc_release(v32);
    goto LABEL_75;
  }
LABEL_34:
  if (!v15) {
    goto LABEL_49;
  }
LABEL_35:
  uint64_t v23 = (void *)v2[1];
  xpc_object_t v50 = v23;
  if (v23) {
    xpc_retain(v23);
  }
  else {
    xpc_object_t v50 = xpc_null_create();
  }
  xpc::bridge((uint64_t *)&cf, (xpc *)&v50, v24);
  CFTypeRef v33 = cf;
  if (cf && (CFTypeID v34 = CFGetTypeID(cf), v34 == CFDictionaryGetTypeID()))
  {
    CFTypeRef v52 = v33;
    CFRetain(v33);
  }
  else
  {
    CFTypeRef v52 = 0;
  }
  object[0] = (xpc_object_t)MEMORY[0x1E4F143A8];
  object[1] = (xpc_object_t)1174405120;
  object[2] = ___ZZZZN11RadioModule10initializeEN8dispatch13group_sessionEEUb_EUb6_ENK3__6clEv_block_invoke;
  xpc_object_t object[3] = &__block_descriptor_tmp_258;
  xpc_object_t object[4] = v3;
  object[5] = *((xpc_object_t *)v2 + 3);
  xpc_object_t v35 = (std::__shared_weak_count *)v2[4];
  size_t v48 = v35;
  if (v35) {
    atomic_fetch_add_explicit(&v35->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  size_t v36 = (void *)v2[2];
  if (v36) {
    size_t v36 = _Block_copy(v36);
  }
  aBlocunint64_t k = v36;
  __int16 v37 = _Block_copy(object);
  uint64_t v38 = v3[17];
  if (v38) {
    dispatch_retain(v38);
  }
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v37;
  __dst.__r_.__value_.__l.__size_ = (std::string::size_type)v38;
  (*(void (**)(std::string::size_type, CFTypeRef *, std::string *))(*(void *)v15 + 248))(v15, &v52, &__dst);
  if (__dst.__r_.__value_.__l.__size_) {
    dispatch_release((dispatch_object_t)__dst.__r_.__value_.__l.__size_);
  }
  if (__dst.__r_.__value_.__r.__words[0]) {
    _Block_release(__dst.__r_.__value_.__l.__data_);
  }
  if (v52) {
    CFRelease(v52);
  }
  if (cf) {
    CFRelease(cf);
  }
  xpc_release(v50);
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v48) {
    std::__shared_weak_count::__release_weak(v48);
  }
LABEL_75:
  if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
LABEL_89:
  uint64_t v44 = (std::__shared_weak_count *)v2[4];
  if (v44) {
    std::__shared_weak_count::__release_weak(v44);
  }
  CFAllocatorRef v45 = (const void *)v2[2];
  if (v45) {
    _Block_release(v45);
  }
  xpc_release((xpc_object_t)v2[1]);
  operator delete(v2);
  pid_t v46 = (std::__shared_weak_count *)a1[2];
  if (v46 && !atomic_fetch_add(&v46->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
    std::__shared_weak_count::__release_weak(v46);
  }
  operator delete(a1);
}

void sub_1C584E700(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18, void *a19, uint64_t a20,xpc_object_t a21,CFTypeRef a22,CFTypeRef cf,xpc_object_t aBlock,dispatch_object_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void ___ZZZZN11RadioModule10initializeEN8dispatch13group_sessionEEUb_EUb6_ENK3__6clEv_block_invoke(void *a1, uint64_t *a2)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    uint64_t v5 = a1[4];
    std::string::size_type v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      uint64_t v7 = v6;
      if (a1[5])
      {
        uint64_t v8 = *a2;
        if (*a2) {
          uint64_t v9 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
        }
        else {
          uint64_t v9 = 0;
        }
        if (v9)
        {
          long long v10 = *(NSObject **)(v5 + 88);
          if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)xpc_object_t object = 138412290;
            *(void *)&xpc_object_t object[4] = v8;
            _os_log_error_impl(&dword_1C5767000, v10, OS_LOG_TYPE_ERROR, "%@", object, 0xCu);
            uint64_t v8 = *a2;
          }
        }
        if (v8) {
          xpc_object_t v11 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
        }
        else {
          xpc_object_t v11 = 0;
        }
        if (v11) {
          uint64_t v12 = 3760250880;
        }
        else {
          uint64_t v12 = 0;
        }
        xpc_object_t v13 = xpc_null_create();
        uint64_t v14 = a1[7];
        *(void *)xpc_object_t object = v13;
        xpc_object_t v15 = xpc_null_create();
        (*(void (**)(uint64_t, uint64_t, unsigned char *))(v14 + 16))(v14, v12, object);
        xpc_release(*(xpc_object_t *)object);
        xpc_release(v15);
      }
      if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_1C584EB50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, xpc_object_t object)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI11RadioModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb7_E3__7EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_(uint64_t **a1)
{
  uint64_t v68 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *a1;
  uint64_t v3 = (void *)**a1;
  if ((*(unsigned int (**)(void *))(*v3 + 88))(v3))
  {
    memset(&object, 170, sizeof(object));
    uint64_t v4 = (const void *)*MEMORY[0x1E4F4D0E8];
    size_t v5 = strlen((const char *)*MEMORY[0x1E4F4D0E8]);
    if (v5 >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    std::string::size_type v6 = v5;
    if (v5 >= 0x17)
    {
      uint64_t v16 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v5 | 7) != 0x17) {
        uint64_t v16 = v5 | 7;
      }
      uint64_t v17 = v16 + 1;
      p_dst = (std::string *)operator new(v16 + 1);
      __dst.__r_.__value_.__l.__size_ = v6;
      __dst.__r_.__value_.__r.__words[2] = v17 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v5;
      p_dst = &__dst;
      if (!v5)
      {
LABEL_28:
        p_dst->__r_.__value_.__s.__data_[v6] = 0;
        xpc_object_t v18 = (char *)operator new(0x28uLL);
        strcpy(v18, " rejected; ABM is shutting down ");
        xpc_object_t v19 = std::string::append(&__dst, v18, 0x20uLL);
        long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
        object.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
        *(_OWORD *)&object.__r_.__value_.__l.__data_ = v20;
        v19->__r_.__value_.__l.__size_ = 0;
        v19->__r_.__value_.__r.__words[2] = 0;
        v19->__r_.__value_.__r.__words[0] = 0;
        operator delete(v18);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__dst.__r_.__value_.__l.__data_);
          unsigned int v21 = v3[11];
          if (!os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
          {
LABEL_30:
            int v22 = v2 + 2;
            if (!v2[2])
            {
LABEL_104:
              if (SHIBYTE(object.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(object.__r_.__value_.__l.__data_);
              }
              goto LABEL_106;
            }
LABEL_41:
            __dst.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
            std::string::size_type size = HIBYTE(object.__r_.__value_.__r.__words[2]);
            if ((object.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              std::string::size_type size = object.__r_.__value_.__l.__size_;
            }
            if (size)
            {
              xpc_object_t v26 = xpc_dictionary_create(0, 0, 0);
              if (v26 || (xpc_object_t v26 = xpc_null_create()) != 0)
              {
                if (MEMORY[0x1C8792D30](v26) == MEMORY[0x1E4F14590])
                {
                  xpc_retain(v26);
                  xpc_object_t v27 = v26;
                }
                else
                {
                  xpc_object_t v27 = xpc_null_create();
                }
              }
              else
              {
                xpc_object_t v27 = xpc_null_create();
                xpc_object_t v26 = 0;
              }
              xpc_release(v26);
              xpc_object_t v50 = xpc_null_create();
              uint64_t v51 = (void *)__dst.__r_.__value_.__r.__words[0];
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v27;
              xpc_release(v51);
              xpc_release(v50);
              if ((object.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                p_std::string object = &object;
              }
              else {
                p_std::string object = (std::string *)object.__r_.__value_.__r.__words[0];
              }
              xpc_object_t v53 = xpc_string_create((const char *)p_object);
              if (!v53) {
                xpc_object_t v53 = xpc_null_create();
              }
              xpc_dictionary_set_value(v27, (const char *)*MEMORY[0x1E4F4C240], v53);
              xpc_object_t v54 = xpc_null_create();
              xpc_release(v53);
              xpc_release(v54);
            }
            LODWORD(v66) = -534716415;
            dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(v22, (unsigned int *)&v66, (void **)&__dst.__r_.__value_.__l.__data_);
            xpc_release(__dst.__r_.__value_.__l.__data_);
            goto LABEL_104;
          }
        }
        else
        {
          unsigned int v21 = v3[11];
          if (!os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_30;
          }
        }
        uint64_t v24 = &object;
        if ((object.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          uint64_t v24 = (std::string *)object.__r_.__value_.__r.__words[0];
        }
        LODWORD(__dst.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = (std::string::size_type)v24;
        _os_log_impl(&dword_1C5767000, v21, OS_LOG_TYPE_DEFAULT, "#I %s", (uint8_t *)&__dst, 0xCu);
        int v22 = v2 + 2;
        if (!v2[2]) {
          goto LABEL_104;
        }
        goto LABEL_41;
      }
    }
    memmove(p_dst, v4, v6);
    goto LABEL_28;
  }
  uint64_t v8 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  uint64_t v9 = off_1EBBDD2A0;
  if (!off_1EBBDD2A0)
  {
    CommandDriverFactory::create_default_global((uint64_t *)&object, v8);
    long long v10 = *(_OWORD *)&object.__r_.__value_.__l.__data_;
    *(_OWORD *)&object.__r_.__value_.__l.__data_ = 0uLL;
    xpc_object_t v11 = (std::__shared_weak_count *)*(&off_1EBBDD2A0 + 1);
    off_1EBBDD2A0 = v10;
    if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    uint64_t v12 = (std::__shared_weak_count *)object.__r_.__value_.__l.__size_;
    if (object.__r_.__value_.__l.__size_
      && !atomic_fetch_add((atomic_ullong *volatile)(object.__r_.__value_.__l.__size_ + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
    uint64_t v9 = off_1EBBDD2A0;
  }
  xpc_object_t v13 = (std::__shared_weak_count *)*(&off_1EBBDD2A0 + 1);
  if (*(&off_1EBBDD2A0 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDD2A0 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)v9 + 16))(&__dst, v9);
  if (__dst.__r_.__value_.__l.__size_)
  {
    uint64_t v14 = std::__shared_weak_count::lock((std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_);
    if (v14) {
      std::string::size_type v15 = __dst.__r_.__value_.__r.__words[0];
    }
    else {
      std::string::size_type v15 = 0;
    }
    if (__dst.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_);
    }
    if (!v13)
    {
LABEL_34:
      if (v15) {
        goto LABEL_35;
      }
LABEL_49:
      xpc_object_t v28 = v3[11];
      if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
      {
        LOWORD(object.__r_.__value_.__l.__data_) = 0;
        _os_log_error_impl(&dword_1C5767000, v28, OS_LOG_TYPE_ERROR, "No radio driver", (uint8_t *)&object, 2u);
      }
      xpc_object_t v29 = xpc_null_create();
      uint64_t v30 = v2[2];
      object.__r_.__value_.__r.__words[0] = (std::string::size_type)v29;
      xpc_object_t v31 = xpc_null_create();
      (*(void (**)(uint64_t, uint64_t, std::string *))(v30 + 16))(v30, 3760250880, &object);
      xpc_release(object.__r_.__value_.__l.__data_);
      xpc_release(v31);
      goto LABEL_93;
    }
  }
  else
  {
    uint64_t v14 = 0;
    std::string::size_type v15 = 0;
    if (!v13) {
      goto LABEL_34;
    }
  }
  if (atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_34;
  }
  ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
  std::__shared_weak_count::__release_weak(v13);
  if (!v15) {
    goto LABEL_49;
  }
LABEL_35:
  xpc_object_t value = xpc_dictionary_get_value((xpc_object_t)v2[1], (const char *)*MEMORY[0x1E4F4CC60]);
  object.__r_.__value_.__r.__words[0] = (std::string::size_type)value;
  if (value) {
    xpc_retain(value);
  }
  else {
    object.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
  }
  int v32 = xpc::dyn_cast_or_default((xpc *)&object, 0);
  xpc_release(object.__r_.__value_.__l.__data_);
  CFTypeRef v33 = v3[11];
  BOOL v34 = os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT);
  if (v32 == 1)
  {
    if (v34)
    {
      LOWORD(object.__r_.__value_.__l.__data_) = 0;
      _os_log_impl(&dword_1C5767000, v33, OS_LOG_TYPE_DEFAULT, "#I RF Self Test in FTM requested", (uint8_t *)&object, 2u);
    }
    goto LABEL_63;
  }
  if (v34)
  {
    LOWORD(object.__r_.__value_.__l.__data_) = 0;
    _os_log_impl(&dword_1C5767000, v33, OS_LOG_TYPE_DEFAULT, "#I RF Self Test in AST2 mode requested", (uint8_t *)&object, 2u);
  }
  memset(&object, 0, sizeof(object));
  ctu::cf::assign();
  std::string __dst = object;
  if ((object.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    xpc_object_t v35 = &__dst;
  }
  else {
    xpc_object_t v35 = (std::string *)object.__r_.__value_.__r.__words[0];
  }
  xpc_object_t v36 = xpc_dictionary_get_value((xpc_object_t)v2[1], (const char *)v35);
  xpc_object_t v37 = v36;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__dst.__r_.__value_.__l.__data_);
    if (v37) {
      goto LABEL_63;
    }
LABEL_90:
    pid_t v46 = v3[11];
    if (os_log_type_enabled(v46, OS_LOG_TYPE_ERROR))
    {
      LOWORD(object.__r_.__value_.__l.__data_) = 0;
      _os_log_error_impl(&dword_1C5767000, v46, OS_LOG_TYPE_ERROR, "Ticket was not provided", (uint8_t *)&object, 2u);
    }
    xpc_object_t v47 = xpc_null_create();
    uint64_t v48 = v2[2];
    object.__r_.__value_.__r.__words[0] = (std::string::size_type)v47;
    xpc_object_t v49 = xpc_null_create();
    (*(void (**)(uint64_t, uint64_t, std::string *))(v48 + 16))(v48, 3760250882, &object);
    xpc_release(object.__r_.__value_.__l.__data_);
    xpc_release(v49);
    goto LABEL_93;
  }
  if (!v36) {
    goto LABEL_90;
  }
LABEL_63:
  uint64_t v38 = (void *)v2[1];
  xpc_object_t v64 = v38;
  if (v38) {
    xpc_retain(v38);
  }
  else {
    xpc_object_t v64 = xpc_null_create();
  }
  xpc::bridge((uint64_t *)&cf, (xpc *)&v64, v39);
  CFTypeRef v40 = cf;
  if (cf && (CFTypeID v41 = CFGetTypeID(cf), v41 == CFDictionaryGetTypeID()))
  {
    CFTypeRef v66 = v40;
    CFRetain(v40);
  }
  else
  {
    CFTypeRef v66 = 0;
  }
  object.__r_.__value_.__r.__words[0] = MEMORY[0x1E4F143A8];
  object.__r_.__value_.__l.__size_ = 1174405120;
  object.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZZZZN11RadioModule10initializeEN8dispatch13group_sessionEEUb_EUb7_ENK3__7clEv_block_invoke;
  uint64_t v59 = &__block_descriptor_tmp_261;
  uint64_t v60 = v3;
  uint64_t v61 = v2[3];
  xpc_object_t v42 = (std::__shared_weak_count *)v2[4];
  CFMutableDictionaryRef v62 = v42;
  if (v42) {
    atomic_fetch_add_explicit(&v42->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  xpc_object_t v43 = (void *)v2[2];
  if (v43) {
    xpc_object_t v43 = _Block_copy(v43);
  }
  aBlocunint64_t k = v43;
  uint64_t v44 = _Block_copy(&object);
  CFAllocatorRef v45 = v3[17];
  if (v45) {
    dispatch_retain(v45);
  }
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v44;
  __dst.__r_.__value_.__l.__size_ = (std::string::size_type)v45;
  (*(void (**)(std::string::size_type, CFTypeRef *, std::string *))(*(void *)v15 + 256))(v15, &v66, &__dst);
  if (__dst.__r_.__value_.__l.__size_) {
    dispatch_release((dispatch_object_t)__dst.__r_.__value_.__l.__size_);
  }
  if (__dst.__r_.__value_.__r.__words[0]) {
    _Block_release(__dst.__r_.__value_.__l.__data_);
  }
  if (v66) {
    CFRelease(v66);
  }
  if (cf) {
    CFRelease(cf);
  }
  xpc_release(v64);
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v62) {
    std::__shared_weak_count::__release_weak(v62);
  }
LABEL_93:
  if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
LABEL_106:
  CFAllocatorRef v55 = (std::__shared_weak_count *)v2[4];
  if (v55) {
    std::__shared_weak_count::__release_weak(v55);
  }
  CFNumberRef v56 = (const void *)v2[2];
  if (v56) {
    _Block_release(v56);
  }
  xpc_release((xpc_object_t)v2[1]);
  operator delete(v2);
  CFStringRef v57 = (std::__shared_weak_count *)a1[2];
  if (v57 && !atomic_fetch_add(&v57->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
    std::__shared_weak_count::__release_weak(v57);
  }
  operator delete(a1);
}

void sub_1C584F4EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18, void *a19, uint64_t a20,xpc_object_t a21,CFTypeRef a22,CFTypeRef cf,void *aBlock,dispatch_object_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void ___ZZZZN11RadioModule10initializeEN8dispatch13group_sessionEEUb_EUb7_ENK3__7clEv_block_invoke(void *a1, uint64_t *a2, ctu **a3)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    uint64_t v7 = a1[4];
    uint64_t v8 = std::__shared_weak_count::lock(v4);
    xpc_object_t v18 = v8;
    if (v8)
    {
      long long v10 = v8;
      if (a1[5])
      {
        uint64_t v11 = *a2;
        if (*a2) {
          uint64_t v12 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
        }
        else {
          uint64_t v12 = 0;
        }
        if (v12)
        {
          xpc_object_t v13 = *(NSObject **)(v7 + 88);
          if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)std::string object = 138412290;
            *(void *)&xpc_object_t object[4] = v11;
            _os_log_error_impl(&dword_1C5767000, v13, OS_LOG_TYPE_ERROR, "%@", object, 0xCu);
            uint64_t v11 = *a2;
          }
        }
        if (v11) {
          uint64_t v14 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
        }
        else {
          uint64_t v14 = 0;
        }
        if (v14) {
          unsigned int v15 = -534716416;
        }
        else {
          unsigned int v15 = 0;
        }
        unsigned int v16 = v15;
        ctu::cf_to_xpc((uint64_t *)object, *a3, v9);
        dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::object>(a1 + 7, &v16, (void **)object);
        xpc_release(*(xpc_object_t *)object);
      }
      if (!atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
  }
}

void sub_1C584F9B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, xpc_object_t object)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::object>(uint64_t *a1, unsigned int *a2, void **a3)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *a2;
  size_t v5 = *a3;
  xpc_object_t object = v5;
  if (v5 && MEMORY[0x1C8792D30](v5) == MEMORY[0x1E4F14590]) {
    xpc_retain(v5);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  (*(void (**)(uint64_t, uint64_t, xpc_object_t *))(v3 + 16))(v3, v4, &object);
  xpc_release(object);
}

void sub_1C584FA80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI11RadioModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb8_E3__8EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_(uint64_t **a1)
{
  uint64_t v64 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *a1;
  uint64_t v3 = (void *)**a1;
  if ((*(unsigned int (**)(void *))(*v3 + 88))(v3))
  {
    memset(&object, 170, sizeof(object));
    uint64_t v4 = (const void *)*MEMORY[0x1E4F4D1B0];
    size_t v5 = strlen((const char *)*MEMORY[0x1E4F4D1B0]);
    if (v5 >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    std::string::size_type v6 = v5;
    if (v5 >= 0x17)
    {
      uint64_t v16 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v5 | 7) != 0x17) {
        uint64_t v16 = v5 | 7;
      }
      uint64_t v17 = v16 + 1;
      p_dst = (std::string *)operator new(v16 + 1);
      __dst.__r_.__value_.__l.__size_ = v6;
      __dst.__r_.__value_.__r.__words[2] = v17 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v5;
      p_dst = &__dst;
      if (!v5)
      {
LABEL_28:
        p_dst->__r_.__value_.__s.__data_[v6] = 0;
        xpc_object_t v18 = (char *)operator new(0x28uLL);
        strcpy(v18, " rejected; ABM is shutting down ");
        xpc_object_t v19 = std::string::append(&__dst, v18, 0x20uLL);
        long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
        object.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
        *(_OWORD *)&object.__r_.__value_.__l.__data_ = v20;
        v19->__r_.__value_.__l.__size_ = 0;
        v19->__r_.__value_.__r.__words[2] = 0;
        v19->__r_.__value_.__r.__words[0] = 0;
        operator delete(v18);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__dst.__r_.__value_.__l.__data_);
          unsigned int v21 = v3[11];
          if (!os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
          {
LABEL_30:
            int v22 = v2 + 2;
            if (!v2[2])
            {
LABEL_96:
              if (SHIBYTE(object.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(object.__r_.__value_.__l.__data_);
              }
              goto LABEL_98;
            }
LABEL_46:
            __dst.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
            std::string::size_type size = HIBYTE(object.__r_.__value_.__r.__words[2]);
            if ((object.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              std::string::size_type size = object.__r_.__value_.__l.__size_;
            }
            if (size)
            {
              xpc_object_t v30 = xpc_dictionary_create(0, 0, 0);
              if (v30 || (xpc_object_t v30 = xpc_null_create()) != 0)
              {
                if (MEMORY[0x1C8792D30](v30) == MEMORY[0x1E4F14590])
                {
                  xpc_retain(v30);
                  xpc_object_t v31 = v30;
                }
                else
                {
                  xpc_object_t v31 = xpc_null_create();
                }
              }
              else
              {
                xpc_object_t v31 = xpc_null_create();
                xpc_object_t v30 = 0;
              }
              xpc_release(v30);
              xpc_object_t v46 = xpc_null_create();
              xpc_object_t v47 = (void *)__dst.__r_.__value_.__r.__words[0];
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v31;
              xpc_release(v47);
              xpc_release(v46);
              if ((object.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                p_std::string object = &object;
              }
              else {
                p_std::string object = (std::string *)object.__r_.__value_.__r.__words[0];
              }
              xpc_object_t v49 = xpc_string_create((const char *)p_object);
              if (!v49) {
                xpc_object_t v49 = xpc_null_create();
              }
              xpc_dictionary_set_value(v31, (const char *)*MEMORY[0x1E4F4C240], v49);
              xpc_object_t v50 = xpc_null_create();
              xpc_release(v49);
              xpc_release(v50);
            }
            LODWORD(v62) = -534716415;
            dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(v22, (unsigned int *)&v62, (void **)&__dst.__r_.__value_.__l.__data_);
            xpc_release(__dst.__r_.__value_.__l.__data_);
            goto LABEL_96;
          }
        }
        else
        {
          unsigned int v21 = v3[11];
          if (!os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_30;
          }
        }
        xpc_object_t v28 = &object;
        if ((object.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          xpc_object_t v28 = (std::string *)object.__r_.__value_.__r.__words[0];
        }
        LODWORD(__dst.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = (std::string::size_type)v28;
        _os_log_impl(&dword_1C5767000, v21, OS_LOG_TYPE_DEFAULT, "#I %s", (uint8_t *)&__dst, 0xCu);
        int v22 = v2 + 2;
        if (!v2[2]) {
          goto LABEL_96;
        }
        goto LABEL_46;
      }
    }
    memmove(p_dst, v4, v6);
    goto LABEL_28;
  }
  uint64_t v8 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  uint64_t v9 = off_1EBBDD2A0;
  if (!off_1EBBDD2A0)
  {
    CommandDriverFactory::create_default_global((uint64_t *)&object, v8);
    long long v10 = *(_OWORD *)&object.__r_.__value_.__l.__data_;
    *(_OWORD *)&object.__r_.__value_.__l.__data_ = 0uLL;
    uint64_t v11 = (std::__shared_weak_count *)*(&off_1EBBDD2A0 + 1);
    off_1EBBDD2A0 = v10;
    if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    uint64_t v12 = (std::__shared_weak_count *)object.__r_.__value_.__l.__size_;
    if (object.__r_.__value_.__l.__size_
      && !atomic_fetch_add((atomic_ullong *volatile)(object.__r_.__value_.__l.__size_ + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
    uint64_t v9 = off_1EBBDD2A0;
  }
  xpc_object_t v13 = (std::__shared_weak_count *)*(&off_1EBBDD2A0 + 1);
  if (*(&off_1EBBDD2A0 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDD2A0 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)v9 + 16))(&__dst, v9);
  if (__dst.__r_.__value_.__l.__size_)
  {
    uint64_t v14 = std::__shared_weak_count::lock((std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_);
    if (v14) {
      std::string::size_type v15 = __dst.__r_.__value_.__r.__words[0];
    }
    else {
      std::string::size_type v15 = 0;
    }
    if (__dst.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_);
    }
    if (!v13)
    {
LABEL_34:
      if (v15) {
        goto LABEL_35;
      }
LABEL_54:
      int v32 = v3[11];
      if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
      {
        LOWORD(object.__r_.__value_.__l.__data_) = 0;
        _os_log_error_impl(&dword_1C5767000, v32, OS_LOG_TYPE_ERROR, "No radio driver", (uint8_t *)&object, 2u);
      }
      xpc_object_t v33 = xpc_null_create();
      uint64_t v34 = v2[2];
      object.__r_.__value_.__r.__words[0] = (std::string::size_type)v33;
      xpc_object_t v35 = xpc_null_create();
      (*(void (**)(uint64_t, uint64_t, std::string *))(v34 + 16))(v34, 3760250880, &object);
      xpc_release(object.__r_.__value_.__l.__data_);
      xpc_release(v35);
      goto LABEL_84;
    }
  }
  else
  {
    uint64_t v14 = 0;
    std::string::size_type v15 = 0;
    if (!v13) {
      goto LABEL_34;
    }
  }
  if (atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_34;
  }
  ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
  std::__shared_weak_count::__release_weak(v13);
  if (!v15) {
    goto LABEL_54;
  }
LABEL_35:
  memset(&object, 0, sizeof(object));
  ctu::cf::assign();
  std::string __dst = object;
  if ((object.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v23 = &__dst;
  }
  else {
    uint64_t v23 = (std::string *)object.__r_.__value_.__r.__words[0];
  }
  xpc_object_t value = xpc_dictionary_get_value((xpc_object_t)v2[1], (const char *)v23);
  xpc_object_t v25 = value;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__dst.__r_.__value_.__l.__data_);
    if (v25) {
      goto LABEL_40;
    }
LABEL_58:
    xpc_object_t v36 = v3[11];
    if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
    {
      LOWORD(object.__r_.__value_.__l.__data_) = 0;
      _os_log_error_impl(&dword_1C5767000, v36, OS_LOG_TYPE_ERROR, "Ticket was not provided", (uint8_t *)&object, 2u);
    }
    xpc_object_t v37 = xpc_null_create();
    uint64_t v38 = v2[2];
    object.__r_.__value_.__r.__words[0] = (std::string::size_type)v37;
    xpc_object_t v39 = xpc_null_create();
    (*(void (**)(uint64_t, uint64_t, std::string *))(v38 + 16))(v38, 3760250882, &object);
    xpc_release(object.__r_.__value_.__l.__data_);
    xpc_release(v39);
    goto LABEL_84;
  }
  if (!value) {
    goto LABEL_58;
  }
LABEL_40:
  xpc_object_t v26 = (void *)v2[1];
  xpc_object_t v60 = v26;
  if (v26) {
    xpc_retain(v26);
  }
  else {
    xpc_object_t v60 = xpc_null_create();
  }
  xpc::bridge((uint64_t *)&cf, (xpc *)&v60, v27);
  CFTypeRef v40 = cf;
  if (cf && (CFTypeID v41 = CFGetTypeID(cf), v41 == CFDictionaryGetTypeID()))
  {
    CFTypeRef v62 = v40;
    CFRetain(v40);
  }
  else
  {
    CFTypeRef v62 = 0;
  }
  object.__r_.__value_.__r.__words[0] = MEMORY[0x1E4F143A8];
  object.__r_.__value_.__l.__size_ = 1174405120;
  object.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZZZZN11RadioModule10initializeEN8dispatch13group_sessionEEUb_EUb8_ENK3__8clEv_block_invoke;
  CFAllocatorRef v55 = &__block_descriptor_tmp_264;
  CFNumberRef v56 = v3;
  uint64_t v57 = v2[3];
  xpc_object_t v42 = (std::__shared_weak_count *)v2[4];
  BOOL v58 = v42;
  if (v42) {
    atomic_fetch_add_explicit(&v42->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  xpc_object_t v43 = (void *)v2[2];
  if (v43) {
    xpc_object_t v43 = _Block_copy(v43);
  }
  aBlocunint64_t k = v43;
  uint64_t v44 = _Block_copy(&object);
  CFAllocatorRef v45 = v3[17];
  if (v45) {
    dispatch_retain(v45);
  }
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v44;
  __dst.__r_.__value_.__l.__size_ = (std::string::size_type)v45;
  (*(void (**)(std::string::size_type, CFTypeRef *, std::string *))(*(void *)v15 + 240))(v15, &v62, &__dst);
  if (__dst.__r_.__value_.__l.__size_) {
    dispatch_release((dispatch_object_t)__dst.__r_.__value_.__l.__size_);
  }
  if (__dst.__r_.__value_.__r.__words[0]) {
    _Block_release(__dst.__r_.__value_.__l.__data_);
  }
  if (v62) {
    CFRelease(v62);
  }
  if (cf) {
    CFRelease(cf);
  }
  xpc_release(v60);
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v58) {
    std::__shared_weak_count::__release_weak(v58);
  }
LABEL_84:
  if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
LABEL_98:
  uint64_t v51 = (std::__shared_weak_count *)v2[4];
  if (v51) {
    std::__shared_weak_count::__release_weak(v51);
  }
  CFTypeRef v52 = (const void *)v2[2];
  if (v52) {
    _Block_release(v52);
  }
  xpc_release((xpc_object_t)v2[1]);
  operator delete(v2);
  xpc_object_t v53 = (std::__shared_weak_count *)a1[2];
  if (v53 && !atomic_fetch_add(&v53->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
    std::__shared_weak_count::__release_weak(v53);
  }
  operator delete(a1);
}

void sub_1C5850328(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18, void *a19, uint64_t a20,xpc_object_t a21,CFTypeRef a22,CFTypeRef cf,void *aBlock,dispatch_object_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void ___ZZZZN11RadioModule10initializeEN8dispatch13group_sessionEEUb_EUb8_ENK3__8clEv_block_invoke(void *a1, uint64_t *a2)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    uint64_t v5 = a1[4];
    std::string::size_type v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      uint64_t v7 = v6;
      if (a1[5])
      {
        uint64_t v8 = *a2;
        if (*a2) {
          uint64_t v9 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
        }
        else {
          uint64_t v9 = 0;
        }
        if (v9)
        {
          long long v10 = *(NSObject **)(v5 + 88);
          if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)std::string object = 138412290;
            *(void *)&xpc_object_t object[4] = v8;
            _os_log_error_impl(&dword_1C5767000, v10, OS_LOG_TYPE_ERROR, "%@", object, 0xCu);
            uint64_t v8 = *a2;
          }
        }
        if (v8) {
          uint64_t v11 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
        }
        else {
          uint64_t v11 = 0;
        }
        if (v11) {
          uint64_t v12 = 3760250880;
        }
        else {
          uint64_t v12 = 0;
        }
        xpc_object_t v13 = xpc_null_create();
        uint64_t v14 = a1[7];
        *(void *)std::string object = v13;
        xpc_object_t v15 = xpc_null_create();
        (*(void (**)(uint64_t, uint64_t, unsigned char *))(v14 + 16))(v14, v12, object);
        xpc_release(*(xpc_object_t *)object);
        xpc_release(v15);
      }
      if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_1C58507D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, xpc_object_t object)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI11RadioModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb9_E3__9EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_(uint64_t **a1)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *a1;
  uint64_t v3 = (void *)**a1;
  if ((*(unsigned int (**)(void *))(*v3 + 88))(v3))
  {
    memset(object, 170, 24);
    uint64_t v4 = (const void *)*MEMORY[0x1E4F4CA00];
    size_t v5 = strlen((const char *)*MEMORY[0x1E4F4CA00]);
    if (v5 >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    std::string::size_type v6 = v5;
    if (v5 >= 0x17)
    {
      uint64_t v16 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v5 | 7) != 0x17) {
        uint64_t v16 = v5 | 7;
      }
      uint64_t v17 = v16 + 1;
      p_dst = (std::string *)operator new(v16 + 1);
      __dst.__r_.__value_.__l.__size_ = v6;
      __dst.__r_.__value_.__r.__words[2] = v17 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v5;
      p_dst = &__dst;
      if (!v5)
      {
LABEL_28:
        p_dst->__r_.__value_.__s.__data_[v6] = 0;
        xpc_object_t v18 = (char *)operator new(0x28uLL);
        strcpy(v18, " rejected; ABM is shutting down ");
        xpc_object_t v19 = std::string::append(&__dst, v18, 0x20uLL);
        long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
        object[2] = (xpc_object_t)v19->__r_.__value_.__r.__words[2];
        *(_OWORD *)std::string object = v20;
        v19->__r_.__value_.__l.__size_ = 0;
        v19->__r_.__value_.__r.__words[2] = 0;
        v19->__r_.__value_.__r.__words[0] = 0;
        operator delete(v18);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__dst.__r_.__value_.__l.__data_);
          unsigned int v21 = v3[11];
          if (!os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
          {
LABEL_30:
            int v22 = v2 + 1;
            if (!v2[1])
            {
LABEL_61:
              if (SHIBYTE(object[2]) < 0) {
                operator delete(object[0]);
              }
              goto LABEL_63;
            }
LABEL_40:
            __dst.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
            xpc_object_t v27 = (xpc_object_t)HIBYTE(object[2]);
            if (SHIBYTE(object[2]) < 0) {
              xpc_object_t v27 = object[1];
            }
            if (v27)
            {
              xpc_object_t v28 = xpc_dictionary_create(0, 0, 0);
              if (v28 || (xpc_object_t v28 = xpc_null_create()) != 0)
              {
                if (MEMORY[0x1C8792D30](v28) == MEMORY[0x1E4F14590])
                {
                  xpc_retain(v28);
                  xpc_object_t v29 = v28;
                }
                else
                {
                  xpc_object_t v29 = xpc_null_create();
                }
              }
              else
              {
                xpc_object_t v29 = xpc_null_create();
                xpc_object_t v28 = 0;
              }
              xpc_release(v28);
              xpc_object_t v33 = xpc_null_create();
              uint64_t v34 = (void *)__dst.__r_.__value_.__r.__words[0];
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v29;
              xpc_release(v34);
              xpc_release(v33);
              if (SHIBYTE(object[2]) >= 0) {
                xpc_object_t v35 = object;
              }
              else {
                xpc_object_t v35 = (xpc_object_t *)object[0];
              }
              xpc_object_t v36 = xpc_string_create((const char *)v35);
              if (!v36) {
                xpc_object_t v36 = xpc_null_create();
              }
              xpc_dictionary_set_value(v29, (const char *)*MEMORY[0x1E4F4C240], v36);
              xpc_object_t v37 = xpc_null_create();
              xpc_release(v36);
              xpc_release(v37);
            }
            unsigned int v41 = -534716415;
            dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(v22, &v41, (void **)&__dst.__r_.__value_.__l.__data_);
            xpc_release(__dst.__r_.__value_.__l.__data_);
            goto LABEL_61;
          }
        }
        else
        {
          unsigned int v21 = v3[11];
          if (!os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_30;
          }
        }
        xpc_object_t v26 = object;
        if (SHIBYTE(object[2]) < 0) {
          xpc_object_t v26 = (xpc_object_t *)object[0];
        }
        LODWORD(__dst.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = (std::string::size_type)v26;
        _os_log_impl(&dword_1C5767000, v21, OS_LOG_TYPE_DEFAULT, "#I %s", (uint8_t *)&__dst, 0xCu);
        int v22 = v2 + 1;
        if (!v2[1]) {
          goto LABEL_61;
        }
        goto LABEL_40;
      }
    }
    memmove(p_dst, v4, v6);
    goto LABEL_28;
  }
  uint64_t v8 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  uint64_t v9 = off_1EBBDD2A0;
  if (!off_1EBBDD2A0)
  {
    CommandDriverFactory::create_default_global((uint64_t *)object, v8);
    long long v10 = *(_OWORD *)object;
    object[0] = 0;
    object[1] = 0;
    uint64_t v11 = (std::__shared_weak_count *)*(&off_1EBBDD2A0 + 1);
    off_1EBBDD2A0 = v10;
    if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    uint64_t v12 = (std::__shared_weak_count *)object[1];
    if (object[1] && !atomic_fetch_add((atomic_ullong *volatile)object[1] + 1, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
    uint64_t v9 = off_1EBBDD2A0;
  }
  xpc_object_t v13 = (std::__shared_weak_count *)*(&off_1EBBDD2A0 + 1);
  if (*(&off_1EBBDD2A0 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDD2A0 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)v9 + 16))(&__dst, v9);
  if (__dst.__r_.__value_.__l.__size_)
  {
    uint64_t v14 = std::__shared_weak_count::lock((std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_);
    if (v14) {
      std::string::size_type v15 = __dst.__r_.__value_.__r.__words[0];
    }
    else {
      std::string::size_type v15 = 0;
    }
    if (__dst.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_);
    }
    if (!v13) {
      goto LABEL_34;
    }
  }
  else
  {
    uint64_t v14 = 0;
    std::string::size_type v15 = 0;
    if (!v13) {
      goto LABEL_34;
    }
  }
  if (!atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
    if (v15) {
      goto LABEL_35;
    }
LABEL_48:
    xpc_object_t v30 = xpc_null_create();
    uint64_t v31 = v2[1];
    object[0] = v30;
    xpc_object_t v32 = xpc_null_create();
    (*(void (**)(uint64_t, uint64_t, xpc_object_t *))(v31 + 16))(v31, 3760250880, object);
    xpc_release(object[0]);
    xpc_release(v32);
    goto LABEL_49;
  }
LABEL_34:
  if (!v15) {
    goto LABEL_48;
  }
LABEL_35:
  (*(void (**)(std::string::size_type, void))(*(void *)v15 + 312))(v15, 0);
  (*(void (**)(std::string::size_type, uint64_t))(*(void *)v15 + 312))(v15, 1);
  (*(void (**)(std::string::size_type))(*(void *)v15 + 320))(v15);
  xpc_object_t v23 = xpc_null_create();
  uint64_t v24 = v2[1];
  object[0] = v23;
  xpc_object_t v25 = xpc_null_create();
  (*(void (**)(uint64_t, void, xpc_object_t *))(v24 + 16))(v24, 0, object);
  xpc_release(object[0]);
  xpc_release(v25);
LABEL_49:
  if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
LABEL_63:
  uint64_t v38 = (std::__shared_weak_count *)v2[3];
  if (v38) {
    std::__shared_weak_count::__release_weak(v38);
  }
  xpc_object_t v39 = (const void *)v2[1];
  if (v39) {
    _Block_release(v39);
  }
  operator delete(v2);
  CFTypeRef v40 = (std::__shared_weak_count *)a1[2];
  if (v40 && !atomic_fetch_add(&v40->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
    std::__shared_weak_count::__release_weak(v40);
  }
  operator delete(a1);
}

void sub_1C5850EE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, xpc_object_t object, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, xpc_object_t __p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI11RadioModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb10_E4__10EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_(uint64_t **a1)
{
  uint64_t v56 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *a1;
  uint64_t v3 = (void *)**a1;
  if ((*(unsigned int (**)(void *))(*v3 + 88))(v3))
  {
    memset(aBlock, 170, sizeof(aBlock));
    uint64_t v4 = (const void *)*MEMORY[0x1E4F4C730];
    size_t v5 = strlen((const char *)*MEMORY[0x1E4F4C730]);
    if (v5 >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    std::string::size_type v6 = v5;
    if (v5 >= 0x17)
    {
      uint64_t v16 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v5 | 7) != 0x17) {
        uint64_t v16 = v5 | 7;
      }
      uint64_t v17 = v16 + 1;
      p_dst = (std::string *)operator new(v16 + 1);
      __dst.__r_.__value_.__l.__size_ = v6;
      __dst.__r_.__value_.__r.__words[2] = v17 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v5;
      p_dst = &__dst;
      if (!v5)
      {
LABEL_28:
        p_dst->__r_.__value_.__s.__data_[v6] = 0;
        xpc_object_t v18 = (char *)operator new(0x28uLL);
        strcpy(v18, " rejected; ABM is shutting down ");
        xpc_object_t v19 = std::string::append(&__dst, v18, 0x20uLL);
        long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
        *(void *)&aBlock[16] = *((void *)&v19->__r_.__value_.__l + 2);
        *(_OWORD *)aBlocunint64_t k = v20;
        v19->__r_.__value_.__l.__size_ = 0;
        v19->__r_.__value_.__r.__words[2] = 0;
        v19->__r_.__value_.__r.__words[0] = 0;
        operator delete(v18);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__dst.__r_.__value_.__l.__data_);
          unsigned int v21 = v3[11];
          if (!os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
          {
LABEL_30:
            int v22 = v2 + 1;
            if (!v2[1])
            {
LABEL_85:
              if ((aBlock[23] & 0x80000000) != 0) {
                operator delete(*(void **)aBlock);
              }
              goto LABEL_87;
            }
LABEL_47:
            __dst.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
            uint64_t v30 = aBlock[23];
            if (aBlock[23] < 0) {
              uint64_t v30 = *(void *)&aBlock[8];
            }
            if (v30)
            {
              xpc_object_t v31 = xpc_dictionary_create(0, 0, 0);
              if (v31 || (xpc_object_t v31 = xpc_null_create()) != 0)
              {
                if (MEMORY[0x1C8792D30](v31) == MEMORY[0x1E4F14590])
                {
                  xpc_retain(v31);
                  xpc_object_t v32 = v31;
                }
                else
                {
                  xpc_object_t v32 = xpc_null_create();
                }
              }
              else
              {
                xpc_object_t v32 = xpc_null_create();
                xpc_object_t v31 = 0;
              }
              xpc_release(v31);
              xpc_object_t v38 = xpc_null_create();
              xpc_object_t v39 = (void *)__dst.__r_.__value_.__r.__words[0];
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v32;
              xpc_release(v39);
              xpc_release(v38);
              if (aBlock[23] >= 0) {
                CFTypeRef v40 = aBlock;
              }
              else {
                CFTypeRef v40 = *(const char **)aBlock;
              }
              xpc_object_t v41 = xpc_string_create(v40);
              if (!v41) {
                xpc_object_t v41 = xpc_null_create();
              }
              xpc_dictionary_set_value(v32, (const char *)*MEMORY[0x1E4F4C240], v41);
              xpc_object_t v42 = xpc_null_create();
              xpc_release(v41);
              xpc_release(v42);
            }
            LODWORD(v48) = -534716415;
            dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(v22, (unsigned int *)&v48, (void **)&__dst.__r_.__value_.__l.__data_);
            xpc_release(__dst.__r_.__value_.__l.__data_);
            goto LABEL_85;
          }
        }
        else
        {
          unsigned int v21 = v3[11];
          if (!os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_30;
          }
        }
        xpc_object_t v29 = aBlock;
        if (aBlock[23] < 0) {
          xpc_object_t v29 = *(unsigned char **)aBlock;
        }
        LODWORD(__dst.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = (std::string::size_type)v29;
        _os_log_impl(&dword_1C5767000, v21, OS_LOG_TYPE_DEFAULT, "#I %s", (uint8_t *)&__dst, 0xCu);
        int v22 = v2 + 1;
        if (!v2[1]) {
          goto LABEL_85;
        }
        goto LABEL_47;
      }
    }
    memmove(p_dst, v4, v6);
    goto LABEL_28;
  }
  uint64_t v8 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  uint64_t v9 = off_1EBBDD2A0;
  if (!off_1EBBDD2A0)
  {
    CommandDriverFactory::create_default_global((uint64_t *)aBlock, v8);
    long long v10 = *(_OWORD *)aBlock;
    *(_OWORD *)aBlocunint64_t k = 0uLL;
    uint64_t v11 = (std::__shared_weak_count *)*(&off_1EBBDD2A0 + 1);
    off_1EBBDD2A0 = v10;
    if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    uint64_t v12 = *(std::__shared_weak_count **)&aBlock[8];
    if (*(void *)&aBlock[8]
      && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&aBlock[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
    uint64_t v9 = off_1EBBDD2A0;
  }
  xpc_object_t v13 = (std::__shared_weak_count *)*(&off_1EBBDD2A0 + 1);
  if (*(&off_1EBBDD2A0 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDD2A0 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)v9 + 16))(&__dst, v9);
  if (__dst.__r_.__value_.__l.__size_)
  {
    uint64_t v14 = std::__shared_weak_count::lock((std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_);
    if (v14) {
      std::string::size_type v15 = __dst.__r_.__value_.__r.__words[0];
    }
    else {
      std::string::size_type v15 = 0;
    }
    if (__dst.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_);
    }
    if (!v13) {
      goto LABEL_34;
    }
  }
  else
  {
    uint64_t v14 = 0;
    std::string::size_type v15 = 0;
    if (!v13) {
      goto LABEL_34;
    }
  }
  if (!atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
    if (v15) {
      goto LABEL_35;
    }
    goto LABEL_55;
  }
LABEL_34:
  if (v15)
  {
LABEL_35:
    *(void *)aBlocunint64_t k = MEMORY[0x1E4F143A8];
    *(void *)&aBlock[8] = 1174405120;
    *(void *)&aBlock[16] = ___ZZZZN11RadioModule10initializeEN8dispatch13group_sessionEEUb_EUb10_ENK4__10clEv_block_invoke;
    xpc_object_t v50 = &__block_descriptor_tmp_267;
    uint64_t v51 = v3;
    uint64_t v52 = v2[2];
    xpc_object_t v23 = (std::__shared_weak_count *)v2[3];
    xpc_object_t v53 = v23;
    if (v23) {
      atomic_fetch_add_explicit(&v23->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v24 = (void *)v2[1];
    if (v24) {
      uint64_t v24 = _Block_copy(v24);
    }
    xpc_object_t v54 = v24;
    xpc_object_t v25 = _Block_copy(aBlock);
    xpc_object_t v26 = v3[17];
    if (v26) {
      dispatch_retain(v26);
    }
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v25;
    __dst.__r_.__value_.__l.__size_ = (std::string::size_type)v26;
    xpc_object_t v27 = (void *)v2[4];
    xpc_object_t object = v27;
    if (v27) {
      xpc_retain(v27);
    }
    else {
      xpc_object_t object = xpc_null_create();
    }
    xpc::bridge((uint64_t *)&cf, (xpc *)&object, v28);
    CFTypeRef v36 = cf;
    if (cf && (CFTypeID v37 = CFGetTypeID(cf), v37 == CFDictionaryGetTypeID()))
    {
      CFTypeRef v48 = v36;
      CFRetain(v36);
    }
    else
    {
      CFTypeRef v48 = 0;
    }
    (*(void (**)(std::string::size_type, std::string *, CFTypeRef *))(*(void *)v15 + 344))(v15, &__dst, &v48);
    if (v48) {
      CFRelease(v48);
    }
    if (cf) {
      CFRelease(cf);
    }
    xpc_release(object);
    if (__dst.__r_.__value_.__l.__size_) {
      dispatch_release((dispatch_object_t)__dst.__r_.__value_.__l.__size_);
    }
    if (__dst.__r_.__value_.__r.__words[0]) {
      _Block_release(__dst.__r_.__value_.__l.__data_);
    }
    if (v54) {
      _Block_release(v54);
    }
    if (v53) {
      std::__shared_weak_count::__release_weak(v53);
    }
    goto LABEL_73;
  }
LABEL_55:
  xpc_object_t v33 = xpc_null_create();
  uint64_t v34 = v2[1];
  *(void *)aBlocunint64_t k = v33;
  xpc_object_t v35 = xpc_null_create();
  (*(void (**)(uint64_t, uint64_t, unsigned char *))(v34 + 16))(v34, 3760250880, aBlock);
  xpc_release(*(xpc_object_t *)aBlock);
  xpc_release(v35);
LABEL_73:
  if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
LABEL_87:
  xpc_release((xpc_object_t)v2[4]);
  v2[4] = 0;
  xpc_object_t v43 = (std::__shared_weak_count *)v2[3];
  if (v43) {
    std::__shared_weak_count::__release_weak(v43);
  }
  uint64_t v44 = (const void *)v2[1];
  if (v44) {
    _Block_release(v44);
  }
  operator delete(v2);
  CFAllocatorRef v45 = (std::__shared_weak_count *)a1[2];
  if (v45 && !atomic_fetch_add(&v45->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
    std::__shared_weak_count::__release_weak(v45);
  }
  operator delete(a1);
}

void sub_1C5851850(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t a10, CFTypeRef a11, CFTypeRef cf, xpc_object_t object, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,std::__shared_weak_count *a22,void *a23,xpc_object_t aBlock,dispatch_object_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void ___ZZZZN11RadioModule10initializeEN8dispatch13group_sessionEEUb_EUb10_ENK4__10clEv_block_invoke(void *a1, uint64_t *a2, ctu **a3)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    uint64_t v7 = a1[4];
    uint64_t v8 = std::__shared_weak_count::lock(v4);
    unsigned int v21 = v8;
    if (v8)
    {
      long long v10 = v8;
      if (a1[5])
      {
        uint64_t v11 = *a2;
        if (*a2) {
          uint64_t v12 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
        }
        else {
          uint64_t v12 = 0;
        }
        if (v12)
        {
          xpc_object_t v13 = *(NSObject **)(v7 + 88);
          if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)xpc_object_t object = 138412290;
            *(void *)&xpc_object_t object[4] = v11;
            _os_log_error_impl(&dword_1C5767000, v13, OS_LOG_TYPE_ERROR, "%@", object, 0xCu);
          }
        }
        else
        {
          uint64_t v16 = *a3;
          if (*a3) {
            uint64_t v17 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
          }
          else {
            uint64_t v17 = 0;
          }
          if (v17)
          {
            xpc_object_t v18 = *(NSObject **)(v7 + 88);
            if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)xpc_object_t object = 138412290;
              *(void *)&xpc_object_t object[4] = v16;
              _os_log_impl(&dword_1C5767000, v18, OS_LOG_TYPE_DEFAULT, "#I Get Antenna Port Info: %@", object, 0xCu);
            }
          }
        }
        if (*a2) {
          uint64_t v14 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
        }
        else {
          uint64_t v14 = 0;
        }
        if (v14) {
          unsigned int v15 = -534716416;
        }
        else {
          unsigned int v15 = 0;
        }
        unsigned int v19 = v15;
        ctu::cf_to_xpc((uint64_t *)object, *a3, v9);
        dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::object>(a1 + 7, &v19, (void **)object);
        xpc_release(*(xpc_object_t *)object);
      }
      if (!atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
  }
}

void sub_1C5851D00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, xpc_object_t object)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI11RadioModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb11_E4__11EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_(void *a1)
{
  uint64_t v53 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (void *)*a1;
  uint64_t v3 = *(void **)*a1;
  if ((*(unsigned int (**)(void *))(*v3 + 88))(v3))
  {
    memset(object, 170, 24);
    uint64_t v4 = (const void *)*MEMORY[0x1E4F4C740];
    size_t v5 = strlen((const char *)*MEMORY[0x1E4F4C740]);
    if (v5 >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    std::string::size_type v6 = v5;
    if (v5 >= 0x17)
    {
      uint64_t v16 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v5 | 7) != 0x17) {
        uint64_t v16 = v5 | 7;
      }
      uint64_t v17 = v16 + 1;
      p_dst = (std::string *)operator new(v16 + 1);
      __dst.__r_.__value_.__l.__size_ = v6;
      __dst.__r_.__value_.__r.__words[2] = v17 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v5;
      p_dst = &__dst;
      if (!v5)
      {
LABEL_28:
        p_dst->__r_.__value_.__s.__data_[v6] = 0;
        xpc_object_t v18 = (char *)operator new(0x28uLL);
        strcpy(v18, " rejected; ABM is shutting down ");
        unsigned int v19 = std::string::append(&__dst, v18, 0x20uLL);
        long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
        object[2] = (xpc_object_t)v19->__r_.__value_.__r.__words[2];
        *(_OWORD *)xpc_object_t object = v20;
        v19->__r_.__value_.__l.__size_ = 0;
        v19->__r_.__value_.__r.__words[2] = 0;
        v19->__r_.__value_.__r.__words[0] = 0;
        operator delete(v18);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__dst.__r_.__value_.__l.__data_);
          unsigned int v21 = v3[11];
          if (!os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
          {
LABEL_30:
            int v22 = v2 + 1;
            if (!v2[1])
            {
LABEL_85:
              if (SHIBYTE(object[2]) < 0) {
                operator delete(object[0]);
              }
              goto LABEL_87;
            }
LABEL_41:
            __dst.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
            xpc_object_t v26 = (xpc_object_t)HIBYTE(object[2]);
            if (SHIBYTE(object[2]) < 0) {
              xpc_object_t v26 = object[1];
            }
            if (v26)
            {
              xpc_object_t v27 = xpc_dictionary_create(0, 0, 0);
              if (v27 || (xpc_object_t v27 = xpc_null_create()) != 0)
              {
                if (MEMORY[0x1C8792D30](v27) == MEMORY[0x1E4F14590])
                {
                  xpc_retain(v27);
                  xpc_object_t v28 = v27;
                }
                else
                {
                  xpc_object_t v28 = xpc_null_create();
                }
              }
              else
              {
                xpc_object_t v28 = xpc_null_create();
                xpc_object_t v27 = 0;
              }
              xpc_release(v27);
              xpc_object_t v38 = xpc_null_create();
              xpc_object_t v39 = (void *)__dst.__r_.__value_.__r.__words[0];
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v28;
              xpc_release(v39);
              xpc_release(v38);
              if (SHIBYTE(object[2]) >= 0) {
                CFTypeRef v40 = object;
              }
              else {
                CFTypeRef v40 = (xpc_object_t *)object[0];
              }
              xpc_object_t v41 = xpc_string_create((const char *)v40);
              if (!v41) {
                xpc_object_t v41 = xpc_null_create();
              }
              xpc_dictionary_set_value(v28, (const char *)*MEMORY[0x1E4F4C240], v41);
              xpc_object_t v42 = xpc_null_create();
              xpc_release(v41);
              xpc_release(v42);
            }
            LODWORD(v51) = -534716415;
            dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(v22, (unsigned int *)&v51, (void **)&__dst.__r_.__value_.__l.__data_);
            xpc_release(__dst.__r_.__value_.__l.__data_);
            goto LABEL_85;
          }
        }
        else
        {
          unsigned int v21 = v3[11];
          if (!os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_30;
          }
        }
        xpc_object_t v25 = object;
        if (SHIBYTE(object[2]) < 0) {
          xpc_object_t v25 = (xpc_object_t *)object[0];
        }
        LODWORD(__dst.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = (std::string::size_type)v25;
        _os_log_impl(&dword_1C5767000, v21, OS_LOG_TYPE_DEFAULT, "#I %s", (uint8_t *)&__dst, 0xCu);
        int v22 = v2 + 1;
        if (!v2[1]) {
          goto LABEL_85;
        }
        goto LABEL_41;
      }
    }
    memmove(p_dst, v4, v6);
    goto LABEL_28;
  }
  uint64_t v8 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  uint64_t v9 = off_1EBBDD2A0;
  if (!off_1EBBDD2A0)
  {
    CommandDriverFactory::create_default_global((uint64_t *)object, v8);
    long long v10 = *(_OWORD *)object;
    object[0] = 0;
    object[1] = 0;
    uint64_t v11 = (std::__shared_weak_count *)*(&off_1EBBDD2A0 + 1);
    off_1EBBDD2A0 = v10;
    if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    uint64_t v12 = (std::__shared_weak_count *)object[1];
    if (object[1] && !atomic_fetch_add((atomic_ullong *volatile)object[1] + 1, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
    uint64_t v9 = off_1EBBDD2A0;
  }
  xpc_object_t v13 = (std::__shared_weak_count *)*(&off_1EBBDD2A0 + 1);
  if (*(&off_1EBBDD2A0 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDD2A0 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)v9 + 16))(&__dst, v9);
  if (__dst.__r_.__value_.__l.__size_)
  {
    uint64_t v14 = std::__shared_weak_count::lock((std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_);
    if (v14) {
      std::string::size_type v15 = __dst.__r_.__value_.__r.__words[0];
    }
    else {
      std::string::size_type v15 = 0;
    }
    if (__dst.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_);
    }
    if (!v13) {
      goto LABEL_34;
    }
  }
  else
  {
    uint64_t v14 = 0;
    std::string::size_type v15 = 0;
    if (!v13) {
      goto LABEL_34;
    }
  }
  if (!atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
    if (v15) {
      goto LABEL_35;
    }
    goto LABEL_49;
  }
LABEL_34:
  if (v15)
  {
LABEL_35:
    uint64_t v23 = (void *)v2[4];
    xpc_object_t v49 = v23;
    if (v23) {
      xpc_retain(v23);
    }
    else {
      xpc_object_t v49 = xpc_null_create();
    }
    xpc::bridge((uint64_t *)&cf, (xpc *)&v49, v24);
    CFTypeRef v32 = cf;
    if (cf && (CFTypeID v33 = CFGetTypeID(cf), v33 == CFDictionaryGetTypeID()))
    {
      CFTypeRef v51 = v32;
      CFRetain(v32);
    }
    else
    {
      CFTypeRef v51 = 0;
    }
    object[0] = (xpc_object_t)MEMORY[0x1E4F143A8];
    object[1] = (xpc_object_t)1174405120;
    object[2] = ___ZZZZN11RadioModule10initializeEN8dispatch13group_sessionEEUb_EUb11_ENK4__11clEv_block_invoke;
    xpc_object_t object[3] = &__block_descriptor_tmp_270;
    xpc_object_t object[4] = v3;
    object[5] = *((xpc_object_t *)v2 + 2);
    uint64_t v34 = (std::__shared_weak_count *)v2[3];
    xpc_object_t v47 = v34;
    if (v34) {
      atomic_fetch_add_explicit(&v34->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    xpc_object_t v35 = (void *)v2[1];
    if (v35) {
      xpc_object_t v35 = _Block_copy(v35);
    }
    aBlocunint64_t k = v35;
    CFTypeRef v36 = _Block_copy(object);
    CFTypeID v37 = v3[17];
    if (v37) {
      dispatch_retain(v37);
    }
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v36;
    __dst.__r_.__value_.__l.__size_ = (std::string::size_type)v37;
    (*(void (**)(std::string::size_type, CFTypeRef *, std::string *))(*(void *)v15 + 352))(v15, &v51, &__dst);
    if (__dst.__r_.__value_.__l.__size_) {
      dispatch_release((dispatch_object_t)__dst.__r_.__value_.__l.__size_);
    }
    if (__dst.__r_.__value_.__r.__words[0]) {
      _Block_release(__dst.__r_.__value_.__l.__data_);
    }
    if (v51) {
      CFRelease(v51);
    }
    if (cf) {
      CFRelease(cf);
    }
    xpc_release(v49);
    if (aBlock) {
      _Block_release(aBlock);
    }
    if (v47) {
      std::__shared_weak_count::__release_weak(v47);
    }
    goto LABEL_73;
  }
LABEL_49:
  xpc_object_t v29 = xpc_null_create();
  uint64_t v30 = v2[1];
  object[0] = v29;
  xpc_object_t v31 = xpc_null_create();
  (*(void (**)(uint64_t, uint64_t, xpc_object_t *))(v30 + 16))(v30, 3760250880, object);
  xpc_release(object[0]);
  xpc_release(v31);
LABEL_73:
  if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
LABEL_87:
  xpc_release((xpc_object_t)v2[4]);
  v2[4] = 0;
  xpc_object_t v43 = (std::__shared_weak_count *)v2[3];
  if (v43) {
    std::__shared_weak_count::__release_weak(v43);
  }
  uint64_t v44 = (const void *)v2[1];
  if (v44) {
    _Block_release(v44);
  }
  operator delete(v2);
  CFAllocatorRef v45 = (std::__shared_weak_count *)a1[2];
  if (v45 && !atomic_fetch_add(&v45->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
    std::__shared_weak_count::__release_weak(v45);
  }
  operator delete(a1);
}

void sub_1C58524A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18, void *a19, uint64_t a20,xpc_object_t a21,CFTypeRef a22,CFTypeRef cf,xpc_object_t aBlock,dispatch_object_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void ___ZZZZN11RadioModule10initializeEN8dispatch13group_sessionEEUb_EUb11_ENK4__11clEv_block_invoke(void *a1, uint64_t *a2)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    uint64_t v5 = a1[4];
    std::string::size_type v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      uint64_t v7 = v6;
      if (a1[5])
      {
        uint64_t v8 = *a2;
        if (*a2) {
          uint64_t v9 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
        }
        else {
          uint64_t v9 = 0;
        }
        if (v9)
        {
          long long v10 = *(NSObject **)(v5 + 88);
          if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)xpc_object_t object = 138412290;
            *(void *)&xpc_object_t object[4] = v8;
            _os_log_error_impl(&dword_1C5767000, v10, OS_LOG_TYPE_ERROR, "%@", object, 0xCu);
            uint64_t v8 = *a2;
          }
        }
        if (v8) {
          uint64_t v11 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
        }
        else {
          uint64_t v11 = 0;
        }
        if (v11) {
          uint64_t v12 = 3760250880;
        }
        else {
          uint64_t v12 = 0;
        }
        xpc_object_t v13 = xpc_null_create();
        uint64_t v14 = a1[7];
        *(void *)xpc_object_t object = v13;
        xpc_object_t v15 = xpc_null_create();
        (*(void (**)(uint64_t, uint64_t, unsigned char *))(v14 + 16))(v14, v12, object);
        xpc_release(*(xpc_object_t *)object);
        xpc_release(v15);
      }
      if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_1C58528FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, xpc_object_t object)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI11RadioModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb12_E4__12EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_(void *a1)
{
  uint64_t v53 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (void *)*a1;
  uint64_t v3 = *(void **)*a1;
  if ((*(unsigned int (**)(void *))(*v3 + 88))(v3))
  {
    memset(object, 170, 24);
    uint64_t v4 = (const void *)*MEMORY[0x1E4F4C1C0];
    size_t v5 = strlen((const char *)*MEMORY[0x1E4F4C1C0]);
    if (v5 >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    std::string::size_type v6 = v5;
    if (v5 >= 0x17)
    {
      uint64_t v16 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v5 | 7) != 0x17) {
        uint64_t v16 = v5 | 7;
      }
      uint64_t v17 = v16 + 1;
      p_dst = (std::string *)operator new(v16 + 1);
      __dst.__r_.__value_.__l.__size_ = v6;
      __dst.__r_.__value_.__r.__words[2] = v17 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v5;
      p_dst = &__dst;
      if (!v5)
      {
LABEL_28:
        p_dst->__r_.__value_.__s.__data_[v6] = 0;
        xpc_object_t v18 = (char *)operator new(0x28uLL);
        strcpy(v18, " rejected; ABM is shutting down ");
        unsigned int v19 = std::string::append(&__dst, v18, 0x20uLL);
        long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
        object[2] = (xpc_object_t)v19->__r_.__value_.__r.__words[2];
        *(_OWORD *)xpc_object_t object = v20;
        v19->__r_.__value_.__l.__size_ = 0;
        v19->__r_.__value_.__r.__words[2] = 0;
        v19->__r_.__value_.__r.__words[0] = 0;
        operator delete(v18);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__dst.__r_.__value_.__l.__data_);
          unsigned int v21 = v3[11];
          if (!os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
          {
LABEL_30:
            int v22 = v2 + 1;
            if (!v2[1])
            {
LABEL_85:
              if (SHIBYTE(object[2]) < 0) {
                operator delete(object[0]);
              }
              goto LABEL_87;
            }
LABEL_41:
            __dst.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
            xpc_object_t v26 = (xpc_object_t)HIBYTE(object[2]);
            if (SHIBYTE(object[2]) < 0) {
              xpc_object_t v26 = object[1];
            }
            if (v26)
            {
              xpc_object_t v27 = xpc_dictionary_create(0, 0, 0);
              if (v27 || (xpc_object_t v27 = xpc_null_create()) != 0)
              {
                if (MEMORY[0x1C8792D30](v27) == MEMORY[0x1E4F14590])
                {
                  xpc_retain(v27);
                  xpc_object_t v28 = v27;
                }
                else
                {
                  xpc_object_t v28 = xpc_null_create();
                }
              }
              else
              {
                xpc_object_t v28 = xpc_null_create();
                xpc_object_t v27 = 0;
              }
              xpc_release(v27);
              xpc_object_t v38 = xpc_null_create();
              xpc_object_t v39 = (void *)__dst.__r_.__value_.__r.__words[0];
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v28;
              xpc_release(v39);
              xpc_release(v38);
              if (SHIBYTE(object[2]) >= 0) {
                CFTypeRef v40 = object;
              }
              else {
                CFTypeRef v40 = (xpc_object_t *)object[0];
              }
              xpc_object_t v41 = xpc_string_create((const char *)v40);
              if (!v41) {
                xpc_object_t v41 = xpc_null_create();
              }
              xpc_dictionary_set_value(v28, (const char *)*MEMORY[0x1E4F4C240], v41);
              xpc_object_t v42 = xpc_null_create();
              xpc_release(v41);
              xpc_release(v42);
            }
            LODWORD(v51) = -534716415;
            dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(v22, (unsigned int *)&v51, (void **)&__dst.__r_.__value_.__l.__data_);
            xpc_release(__dst.__r_.__value_.__l.__data_);
            goto LABEL_85;
          }
        }
        else
        {
          unsigned int v21 = v3[11];
          if (!os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_30;
          }
        }
        xpc_object_t v25 = object;
        if (SHIBYTE(object[2]) < 0) {
          xpc_object_t v25 = (xpc_object_t *)object[0];
        }
        LODWORD(__dst.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = (std::string::size_type)v25;
        _os_log_impl(&dword_1C5767000, v21, OS_LOG_TYPE_DEFAULT, "#I %s", (uint8_t *)&__dst, 0xCu);
        int v22 = v2 + 1;
        if (!v2[1]) {
          goto LABEL_85;
        }
        goto LABEL_41;
      }
    }
    memmove(p_dst, v4, v6);
    goto LABEL_28;
  }
  uint64_t v8 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  uint64_t v9 = off_1EBBDD2A0;
  if (!off_1EBBDD2A0)
  {
    CommandDriverFactory::create_default_global((uint64_t *)object, v8);
    long long v10 = *(_OWORD *)object;
    object[0] = 0;
    object[1] = 0;
    uint64_t v11 = (std::__shared_weak_count *)*(&off_1EBBDD2A0 + 1);
    off_1EBBDD2A0 = v10;
    if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    uint64_t v12 = (std::__shared_weak_count *)object[1];
    if (object[1] && !atomic_fetch_add((atomic_ullong *volatile)object[1] + 1, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
    uint64_t v9 = off_1EBBDD2A0;
  }
  xpc_object_t v13 = (std::__shared_weak_count *)*(&off_1EBBDD2A0 + 1);
  if (*(&off_1EBBDD2A0 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDD2A0 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)v9 + 16))(&__dst, v9);
  if (__dst.__r_.__value_.__l.__size_)
  {
    uint64_t v14 = std::__shared_weak_count::lock((std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_);
    if (v14) {
      std::string::size_type v15 = __dst.__r_.__value_.__r.__words[0];
    }
    else {
      std::string::size_type v15 = 0;
    }
    if (__dst.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_);
    }
    if (!v13) {
      goto LABEL_34;
    }
  }
  else
  {
    uint64_t v14 = 0;
    std::string::size_type v15 = 0;
    if (!v13) {
      goto LABEL_34;
    }
  }
  if (!atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
    if (v15) {
      goto LABEL_35;
    }
    goto LABEL_49;
  }
LABEL_34:
  if (v15)
  {
LABEL_35:
    uint64_t v23 = (void *)v2[4];
    xpc_object_t v49 = v23;
    if (v23) {
      xpc_retain(v23);
    }
    else {
      xpc_object_t v49 = xpc_null_create();
    }
    xpc::bridge((uint64_t *)&cf, (xpc *)&v49, v24);
    CFTypeRef v32 = cf;
    if (cf && (CFTypeID v33 = CFGetTypeID(cf), v33 == CFDictionaryGetTypeID()))
    {
      CFTypeRef v51 = v32;
      CFRetain(v32);
    }
    else
    {
      CFTypeRef v51 = 0;
    }
    object[0] = (xpc_object_t)MEMORY[0x1E4F143A8];
    object[1] = (xpc_object_t)1174405120;
    object[2] = ___ZZZZN11RadioModule10initializeEN8dispatch13group_sessionEEUb_EUb12_ENK4__12clEv_block_invoke;
    xpc_object_t object[3] = &__block_descriptor_tmp_273;
    xpc_object_t object[4] = v3;
    object[5] = *((xpc_object_t *)v2 + 2);
    uint64_t v34 = (std::__shared_weak_count *)v2[3];
    xpc_object_t v47 = v34;
    if (v34) {
      atomic_fetch_add_explicit(&v34->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    xpc_object_t v35 = (void *)v2[1];
    if (v35) {
      xpc_object_t v35 = _Block_copy(v35);
    }
    aBlocunint64_t k = v35;
    CFTypeRef v36 = _Block_copy(object);
    CFTypeID v37 = v3[17];
    if (v37) {
      dispatch_retain(v37);
    }
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v36;
    __dst.__r_.__value_.__l.__size_ = (std::string::size_type)v37;
    (*(void (**)(std::string::size_type, CFTypeRef *, std::string *))(*(void *)v15 + 360))(v15, &v51, &__dst);
    if (__dst.__r_.__value_.__l.__size_) {
      dispatch_release((dispatch_object_t)__dst.__r_.__value_.__l.__size_);
    }
    if (__dst.__r_.__value_.__r.__words[0]) {
      _Block_release(__dst.__r_.__value_.__l.__data_);
    }
    if (v51) {
      CFRelease(v51);
    }
    if (cf) {
      CFRelease(cf);
    }
    xpc_release(v49);
    if (aBlock) {
      _Block_release(aBlock);
    }
    if (v47) {
      std::__shared_weak_count::__release_weak(v47);
    }
    goto LABEL_73;
  }
LABEL_49:
  xpc_object_t v29 = xpc_null_create();
  uint64_t v30 = v2[1];
  object[0] = v29;
  xpc_object_t v31 = xpc_null_create();
  (*(void (**)(uint64_t, uint64_t, xpc_object_t *))(v30 + 16))(v30, 3760250880, object);
  xpc_release(object[0]);
  xpc_release(v31);
LABEL_73:
  if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
LABEL_87:
  xpc_release((xpc_object_t)v2[4]);
  v2[4] = 0;
  xpc_object_t v43 = (std::__shared_weak_count *)v2[3];
  if (v43) {
    std::__shared_weak_count::__release_weak(v43);
  }
  uint64_t v44 = (const void *)v2[1];
  if (v44) {
    _Block_release(v44);
  }
  operator delete(v2);
  CFAllocatorRef v45 = (std::__shared_weak_count *)a1[2];
  if (v45 && !atomic_fetch_add(&v45->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
    std::__shared_weak_count::__release_weak(v45);
  }
  operator delete(a1);
}

void sub_1C58530BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18, void *a19, uint64_t a20,xpc_object_t a21,CFTypeRef a22,CFTypeRef cf,xpc_object_t aBlock,dispatch_object_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void ___ZZZZN11RadioModule10initializeEN8dispatch13group_sessionEEUb_EUb12_ENK4__12clEv_block_invoke(void *a1, uint64_t *a2)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    uint64_t v5 = a1[4];
    std::string::size_type v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      uint64_t v7 = v6;
      if (a1[5])
      {
        uint64_t v8 = *a2;
        if (*a2) {
          uint64_t v9 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
        }
        else {
          uint64_t v9 = 0;
        }
        if (v9)
        {
          long long v10 = *(NSObject **)(v5 + 88);
          if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)xpc_object_t object = 138412290;
            *(void *)&xpc_object_t object[4] = v8;
            _os_log_error_impl(&dword_1C5767000, v10, OS_LOG_TYPE_ERROR, "%@", object, 0xCu);
            uint64_t v8 = *a2;
          }
        }
        if (v8) {
          uint64_t v11 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
        }
        else {
          uint64_t v11 = 0;
        }
        if (v11) {
          uint64_t v12 = 3760250880;
        }
        else {
          uint64_t v12 = 0;
        }
        xpc_object_t v13 = xpc_null_create();
        uint64_t v14 = a1[7];
        *(void *)xpc_object_t object = v13;
        xpc_object_t v15 = xpc_null_create();
        (*(void (**)(uint64_t, uint64_t, unsigned char *))(v14 + 16))(v14, v12, object);
        xpc_release(*(xpc_object_t *)object);
        xpc_release(v15);
      }
      if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_1C5853510(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, xpc_object_t object)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI11RadioModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb13_E4__13EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_(void *a1)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (void *)*a1;
  uint64_t v3 = *(void **)*a1;
  if ((*(unsigned int (**)(void *))(*v3 + 88))(v3))
  {
    memset(__p, 170, 24);
    uint64_t v4 = (const void *)*MEMORY[0x1E4F4CFC8];
    size_t v5 = strlen((const char *)*MEMORY[0x1E4F4CFC8]);
    if (v5 >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    std::string::size_type v6 = v5;
    if (v5 >= 0x17)
    {
      uint64_t v16 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v5 | 7) != 0x17) {
        uint64_t v16 = v5 | 7;
      }
      uint64_t v17 = v16 + 1;
      p_dst = (std::string *)operator new(v16 + 1);
      __dst.__r_.__value_.__l.__size_ = v6;
      __dst.__r_.__value_.__r.__words[2] = v17 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v5;
      p_dst = &__dst;
      if (!v5)
      {
LABEL_28:
        p_dst->__r_.__value_.__s.__data_[v6] = 0;
        xpc_object_t v18 = (char *)operator new(0x28uLL);
        strcpy(v18, " rejected; ABM is shutting down ");
        unsigned int v19 = std::string::append(&__dst, v18, 0x20uLL);
        long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
        __p[2] = (void *)v19->__r_.__value_.__r.__words[2];
        *(_OWORD *)std::string __p = v20;
        v19->__r_.__value_.__l.__size_ = 0;
        v19->__r_.__value_.__r.__words[2] = 0;
        v19->__r_.__value_.__r.__words[0] = 0;
        operator delete(v18);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__dst.__r_.__value_.__l.__data_);
          unsigned int v21 = v3[11];
          if (!os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
          {
LABEL_30:
            int v22 = v2 + 1;
            if (!v2[1])
            {
LABEL_74:
              if (SHIBYTE(__p[2]) < 0) {
                operator delete(__p[0]);
              }
              goto LABEL_76;
            }
LABEL_56:
            __dst.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
            xpc_object_t v28 = (void *)HIBYTE(__p[2]);
            if (SHIBYTE(__p[2]) < 0) {
              xpc_object_t v28 = __p[1];
            }
            if (v28)
            {
              xpc_object_t v29 = xpc_dictionary_create(0, 0, 0);
              if (v29 || (xpc_object_t v29 = xpc_null_create()) != 0)
              {
                if (MEMORY[0x1C8792D30](v29) == MEMORY[0x1E4F14590])
                {
                  xpc_retain(v29);
                  xpc_object_t v30 = v29;
                }
                else
                {
                  xpc_object_t v30 = xpc_null_create();
                }
              }
              else
              {
                xpc_object_t v30 = xpc_null_create();
                xpc_object_t v29 = 0;
              }
              xpc_release(v29);
              xpc_object_t v31 = xpc_null_create();
              CFTypeRef v32 = (void *)__dst.__r_.__value_.__r.__words[0];
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v30;
              xpc_release(v32);
              xpc_release(v31);
              if (SHIBYTE(__p[2]) >= 0) {
                CFTypeID v33 = __p;
              }
              else {
                CFTypeID v33 = (void **)__p[0];
              }
              xpc_object_t v34 = xpc_string_create((const char *)v33);
              if (!v34) {
                xpc_object_t v34 = xpc_null_create();
              }
              xpc_dictionary_set_value(v30, (const char *)*MEMORY[0x1E4F4C240], v34);
              xpc_object_t v35 = xpc_null_create();
              xpc_release(v34);
              xpc_release(v35);
            }
            unsigned int v42 = -534716415;
            dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(v22, &v42, (void **)&__dst.__r_.__value_.__l.__data_);
            xpc_release(__dst.__r_.__value_.__l.__data_);
            goto LABEL_74;
          }
        }
        else
        {
          unsigned int v21 = v3[11];
          if (!os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_30;
          }
        }
        xpc_object_t v27 = __p;
        if (SHIBYTE(__p[2]) < 0) {
          xpc_object_t v27 = (void **)__p[0];
        }
        LODWORD(__dst.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = (std::string::size_type)v27;
        _os_log_impl(&dword_1C5767000, v21, OS_LOG_TYPE_DEFAULT, "#I %s", (uint8_t *)&__dst, 0xCu);
        int v22 = v2 + 1;
        if (!v2[1]) {
          goto LABEL_74;
        }
        goto LABEL_56;
      }
    }
    memmove(p_dst, v4, v6);
    goto LABEL_28;
  }
  uint64_t v8 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  uint64_t v9 = off_1EBBDD2A0;
  if (!off_1EBBDD2A0)
  {
    CommandDriverFactory::create_default_global((uint64_t *)__p, v8);
    long long v10 = *(_OWORD *)__p;
    __p[0] = 0;
    __p[1] = 0;
    uint64_t v11 = (std::__shared_weak_count *)*(&off_1EBBDD2A0 + 1);
    off_1EBBDD2A0 = v10;
    if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    uint64_t v12 = (std::__shared_weak_count *)__p[1];
    if (__p[1] && !atomic_fetch_add((atomic_ullong *volatile)__p[1] + 1, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
    uint64_t v9 = off_1EBBDD2A0;
  }
  xpc_object_t v13 = (std::__shared_weak_count *)*(&off_1EBBDD2A0 + 1);
  if (*(&off_1EBBDD2A0 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDD2A0 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)v9 + 16))(&__dst, v9);
  if (__dst.__r_.__value_.__l.__size_)
  {
    uint64_t v14 = std::__shared_weak_count::lock((std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_);
    if (v14) {
      std::string::size_type v15 = __dst.__r_.__value_.__r.__words[0];
    }
    else {
      std::string::size_type v15 = 0;
    }
    if (__dst.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_);
    }
    if (!v13) {
      goto LABEL_34;
    }
  }
  else
  {
    uint64_t v14 = 0;
    std::string::size_type v15 = 0;
    if (!v13) {
      goto LABEL_34;
    }
  }
  if (!atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
    if (v15) {
      goto LABEL_35;
    }
    goto LABEL_49;
  }
LABEL_34:
  if (v15)
  {
LABEL_35:
    __p[0] = (void *)MEMORY[0x1E4F143A8];
    __p[1] = (void *)1174405120;
    __p[2] = ___ZZZZN11RadioModule10initializeEN8dispatch13group_sessionEEUb_EUb13_ENK4__13clEv_block_invoke;
    __p[3] = &__block_descriptor_tmp_276;
    __p[4] = *((void **)v2 + 2);
    uint64_t v23 = (std::__shared_weak_count *)v2[3];
    CFTypeRef v40 = v23;
    if (v23) {
      atomic_fetch_add_explicit(&v23->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v24 = (void *)v2[1];
    if (v24) {
      uint64_t v24 = _Block_copy(v24);
    }
    aBlocunint64_t k = v24;
    xpc_object_t v25 = _Block_copy(__p);
    xpc_object_t v26 = v3[17];
    if (v26) {
      dispatch_retain(v26);
    }
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v25;
    __dst.__r_.__value_.__l.__size_ = (std::string::size_type)v26;
    (*(void (**)(std::string::size_type, std::string *))(*(void *)v15 + 384))(v15, &__dst);
    if (__dst.__r_.__value_.__l.__size_) {
      dispatch_release((dispatch_object_t)__dst.__r_.__value_.__l.__size_);
    }
    if (__dst.__r_.__value_.__r.__words[0]) {
      _Block_release(__dst.__r_.__value_.__l.__data_);
    }
    if (aBlock) {
      _Block_release(aBlock);
    }
    if (v40) {
      std::__shared_weak_count::__release_weak(v40);
    }
  }
LABEL_49:
  if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
LABEL_76:
  CFTypeRef v36 = (std::__shared_weak_count *)v2[3];
  if (v36) {
    std::__shared_weak_count::__release_weak(v36);
  }
  CFTypeID v37 = (const void *)v2[1];
  if (v37) {
    _Block_release(v37);
  }
  operator delete(v2);
  xpc_object_t v38 = (std::__shared_weak_count *)a1[2];
  if (v38 && !atomic_fetch_add(&v38->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
    std::__shared_weak_count::__release_weak(v38);
  }
  operator delete(a1);
}

void sub_1C5853C00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17, void *aBlock, uint64_t a19, xpc_object_t object,dispatch_object_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void ___ZZZZN11RadioModule10initializeEN8dispatch13group_sessionEEUb_EUb13_ENK4__13clEv_block_invoke(void *a1, void *a2, void *a3)
{
  uint64_t v4 = (std::__shared_weak_count *)a1[5];
  if (!v4) {
    return;
  }
  uint64_t v7 = std::__shared_weak_count::lock(v4);
  long long v20 = v7;
  if (!v7) {
    return;
  }
  if (!a1[4])
  {
    long long v10 = v7;
LABEL_22:
    if (!atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
    return;
  }
  xpc_object_t v8 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v9 = v8;
  if (v8)
  {
    xpc_object_t xdict = v8;
  }
  else
  {
    xpc_object_t v9 = xpc_null_create();
    xpc_object_t xdict = v9;
    if (!v9)
    {
      xpc_object_t v11 = xpc_null_create();
      xpc_object_t v9 = 0;
      goto LABEL_12;
    }
  }
  if (MEMORY[0x1C8792D30](v9) == MEMORY[0x1E4F14590])
  {
    xpc_retain(v9);
    goto LABEL_13;
  }
  xpc_object_t v11 = xpc_null_create();
LABEL_12:
  xpc_object_t xdict = v11;
LABEL_13:
  xpc_release(v9);
  uint64_t v12 = MEMORY[0x1C8792D30](*a3);
  uint64_t v13 = MEMORY[0x1E4F145D8];
  if (v12 != MEMORY[0x1E4F145D8])
  {
    xpc_object_t v14 = (xpc_object_t)*a3;
    if (v14) {
      xpc_retain(v14);
    }
    else {
      xpc_object_t v14 = xpc_null_create();
    }
    xpc_dictionary_set_value(xdict, (const char *)*MEMORY[0x1E4F4C558], v14);
    xpc_object_t v15 = xpc_null_create();
    xpc_release(v14);
    xpc_release(v15);
  }
  if (MEMORY[0x1C8792D30](*a2) == v13) {
    unsigned int v16 = 0;
  }
  else {
    unsigned int v16 = -534716416;
  }
  unsigned int v17 = v16;
  dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(a1 + 6, &v17, &xdict);
  xpc_release(xdict);
  long long v10 = v20;
  if (v20) {
    goto LABEL_22;
  }
}

void sub_1C585400C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, char a11)
{
}

void dispatch::async<void ctu::SharedSynchronizable<RadioModule>::execute_wrapped<RadioModule::initialize(dispatch::group_session)::$_0>(RadioModule::initialize(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<RadioModule::initialize(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<RadioModule::initialize(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  uint64_t v2 = *(RadioModule ***)a1;
  RadioModule::finishInitialization_sync(**(RadioModule ***)a1);
  operator delete(v2);
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    uint64_t v4 = (void *)a1;
  }
  else
  {
    uint64_t v4 = (void *)a1;
  }
  operator delete(v4);
}

void sub_1C58540F8(_Unwind_Exception *a1)
{
  operator delete(v2);
  uint64_t v4 = (std::__shared_weak_count *)v1[2];
  if (v4)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<DeviceHistoryDB *,std::shared_ptr<DeviceHistoryDB>::__shared_ptr_default_delete<DeviceHistoryDB,DeviceHistoryDB>,std::allocator<DeviceHistoryDB>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t std::__shared_ptr_pointer<DeviceHistoryDB *,std::shared_ptr<DeviceHistoryDB>::__shared_ptr_default_delete<DeviceHistoryDB,DeviceHistoryDB>,std::allocator<DeviceHistoryDB>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<DeviceHistoryDB *,std::shared_ptr<DeviceHistoryDB>::__shared_ptr_default_delete<DeviceHistoryDB,DeviceHistoryDB>,std::allocator<DeviceHistoryDB>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x80000001C59A07B2) {
    return a1 + 24;
  }
  if (((v3 & 0x80000001C59A07B2 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000001C59A07B2)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001C59A07B2 & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 24;
  }
  return 0;
}

BOOL ctu::SharedLockable<SharedData>::execute_sync<BOOL SharedData::setPreference<__CFDictionary *>(std::string const&,__CFDictionary *)::{lambda(void)#1}>(os_unfair_lock_s *a1, uint64_t *a2)
{
  uint64_t v3 = a1 + 4;
  os_unfair_lock_lock(a1 + 4);
  uint64_t v4 = a2[2];
  uint64_t v5 = *a2;
  std::string::size_type v6 = *(const void **)a2[1];
  if (*(char *)(v5 + 23) >= 0) {
    uint64_t v7 = (const char *)v5;
  }
  else {
    uint64_t v7 = *(const char **)v5;
  }
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v10, v7);
  BOOL v8 = ctu::cf::plist_adapter::set<__CFArray *>(v4, v6, v10, 1);
  MEMORY[0x1C8791110](&v10);
  os_unfair_lock_unlock(v3);
  return v8;
}

uint64_t ___ZN3ctu20SharedSynchronizableI11RadioModuleE13connect_eventIN5boost8signals26signalIFvjENS5_19optional_last_valueIvEEiNSt3__14lessIiEENS4_8functionIS7_EENSD_IFvRKNS5_10connectionEjEEENS5_5mutexEEES1_vJjEEEDTcl7connectfp_cvNSA_10shared_ptrIS1_EE_EcvP16dispatch_queue_s_EcvPFT1_DpT2_ELi0EEERT_MT0_FSQ_SS_E_block_invoke(void *a1)
{
  uint64_t v1 = (uint64_t (*)(void *))a1[5];
  uint64_t v2 = a1[6];
  uint64_t v3 = (void *)(a1[4] + (v2 >> 1) - 120);
  if (v2) {
    return (*(uint64_t (**)(void))(*v3 + v1))();
  }
  else {
    return v1(v3);
  }
}

void **boost::signals2::slot<void ()(unsigned int),boost::function<void ()(unsigned int)>>::~slot(void **a1)
{
  unint64_t v2 = (unint64_t)a1[3];
  if (v2)
  {
    if ((v2 & 1) == 0)
    {
      uint64_t v3 = *(void (**)(void **, void **, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
      if (v3) {
        v3(a1 + 4, a1 + 4, 2);
      }
    }
    a1[3] = 0;
  }
  uint64_t v4 = *a1;
  if (*a1)
  {
    uint64_t v5 = (uint64_t)a1[1];
    std::string::size_type v6 = *a1;
    if ((void *)v5 != v4)
    {
      do
      {
        v5 -= 24;
        boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>::destroy_content(v5);
      }
      while ((void *)v5 != v4);
      std::string::size_type v6 = *a1;
    }
    a1[1] = v4;
    operator delete(v6);
  }
  return a1;
}

uint64_t ctu::DispatchSlot<dispatch::block<void({block_pointer})(unsigned int)>>::~DispatchSlot(uint64_t a1)
{
  dispatch_release(*(dispatch_object_t *)a1);
  unint64_t v2 = *(const void **)(a1 + 8);
  if (v2) {
    _Block_release(v2);
  }
  return a1;
}

uint64_t boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(unsigned int),boost::function<void ()(unsigned int)>>,boost::signals2::mutex>>::~shared_ptr(uint64_t a1)
{
  unint64_t v2 = *(atomic_uint **)(a1 + 8);
  if (v2)
  {
    if (atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
      if (atomic_fetch_add(v2 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v2 + 24))(v2);
      }
    }
  }
  return a1;
}

void boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(unsigned int),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(unsigned int)>,boost::function<void ()(boost::signals2::connection const&,unsigned int)>,boost::signals2::mutex>::invocation_state>::dispose(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 16);
  if (v1)
  {
    unint64_t v2 = (atomic_uint *)v1[3];
    if (v2)
    {
      if (atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1)
      {
        (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
        if (atomic_fetch_add(v2 + 3, 0xFFFFFFFF) == 1) {
          (*(void (**)(atomic_uint *))(*(void *)v2 + 24))(v2);
        }
      }
    }
    uint64_t v3 = (atomic_uint *)v1[1];
    if (v3)
    {
      if (atomic_fetch_add(v3 + 2, 0xFFFFFFFF) == 1)
      {
        (*(void (**)(atomic_uint *))(*(void *)v3 + 16))(v3);
        if (atomic_fetch_add(v3 + 3, 0xFFFFFFFF) == 1) {
          (*(void (**)(atomic_uint *))(*(void *)v3 + 24))(v3);
        }
      }
    }
    operator delete(v1);
  }
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(unsigned int),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(unsigned int)>,boost::function<void ()(boost::signals2::connection const&,unsigned int)>,boost::signals2::mutex>::invocation_state>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(unsigned int),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(unsigned int)>,boost::function<void ()(boost::signals2::connection const&,unsigned int)>,boost::signals2::mutex>::invocation_state>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(unsigned int),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(unsigned int)>,boost::function<void ()(boost::signals2::connection const&,unsigned int)>,boost::signals2::mutex>::invocation_state>::get_untyped_deleter()
{
  return 0;
}

uint64_t *std::list<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(unsigned int),boost::function<void ()(unsigned int)>>,boost::signals2::mutex>>>::~list(uint64_t *a1)
{
  if (a1[2])
  {
    uint64_t v2 = *a1;
    uint64_t v3 = (uint64_t *)a1[1];
    uint64_t v4 = *v3;
    *(void *)(v4 + 8) = *(void *)(*a1 + 8);
    **(void **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        uint64_t v5 = (uint64_t *)v3[1];
        std::string::size_type v6 = (atomic_uint *)v3[3];
        if (v6)
        {
          if (atomic_fetch_add(v6 + 2, 0xFFFFFFFF) == 1)
          {
            (*(void (**)(atomic_uint *))(*(void *)v6 + 16))(v6);
            if (atomic_fetch_add(v6 + 3, 0xFFFFFFFF) == 1) {
              (*(void (**)(atomic_uint *))(*(void *)v6 + 24))(v6);
            }
          }
        }
        operator delete(v3);
        uint64_t v3 = v5;
      }
      while (v5 != a1);
    }
  }
  return a1;
}

void boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(unsigned int),boost::function<void ()(unsigned int)>>,boost::signals2::mutex>>>>::dispose(uint64_t a1)
{
  uint64_t v1 = *(uint64_t **)(a1 + 16);
  if (v1)
  {
    std::__tree<std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>>>::destroy((void *)v1[4]);
    if (v1[2])
    {
      uint64_t v2 = (void *)*v1;
      uint64_t v3 = (uint64_t *)v1[1];
      uint64_t v4 = *v3;
      *(void *)(v4 + 8) = *(void *)(*v1 + 8);
      *(void *)v2[1] = v4;
      v1[2] = 0;
      if (v3 != v1)
      {
        do
        {
          uint64_t v5 = (uint64_t *)v3[1];
          std::string::size_type v6 = (atomic_uint *)v3[3];
          if (v6)
          {
            if (atomic_fetch_add(v6 + 2, 0xFFFFFFFF) == 1)
            {
              (*(void (**)(atomic_uint *))(*(void *)v6 + 16))(v6);
              if (atomic_fetch_add(v6 + 3, 0xFFFFFFFF) == 1) {
                (*(void (**)(atomic_uint *))(*(void *)v6 + 24))(v6);
              }
            }
          }
          operator delete(v3);
          uint64_t v3 = v5;
        }
        while (v5 != v1);
      }
    }
    operator delete(v1);
  }
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(unsigned int),boost::function<void ()(unsigned int)>>,boost::signals2::mutex>>>>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(unsigned int),boost::function<void ()(unsigned int)>>,boost::signals2::mutex>>>>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(unsigned int),boost::function<void ()(unsigned int)>>,boost::signals2::mutex>>>>::get_untyped_deleter()
{
  return 0;
}

void boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(unsigned int),boost::function<void ()(unsigned int)>>,boost::signals2::mutex>::~connection_body(void *a1)
{
  uint64_t v1 = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void (),boost::function<void ()>>,boost::signals2::mutex>::~connection_body(a1);

  operator delete(v1);
}

BOOL boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(unsigned int),boost::function<void ()(unsigned int)>>,boost::signals2::mutex>::connected(uint64_t a1)
{
  void v19[3] = *MEMORY[0x1E4F143B8];
  *(void *)&long long v2 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v2 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v14[8] = v2;
  v14[9] = v2;
  v14[6] = v2;
  v14[7] = v2;
  void v14[4] = v2;
  void v14[5] = v2;
  v14[2] = v2;
  v14[3] = v2;
  v14[0] = v2;
  v14[1] = v2;
  uint64_t v3 = *(pthread_mutex_t **)(a1 + 48);
  unint64_t v15 = 10;
  unsigned int v16 = (char *)v14;
  uint64_t v17 = 0;
  xpc_object_t v18 = v3;
  pthread_mutex_lock(v3);
  uint64_t v4 = *(uint64_t **)(a1 + 32);
  if (v4)
  {
    uint64_t v5 = *v4;
    if (*v4 != v4[1])
    {
      while (1)
      {
        memset(v19, 170, 24);
        boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>::apply_visitor<boost::signals2::detail::lock_weak_ptr_visitor const>(v5, (uint64_t)v19);
        if ((*(_DWORD *)v5 ^ (*(int *)v5 >> 31)) == 2)
        {
          if (!(*(unsigned int (**)(void))(**(void **)(v5 + 8) + 24))(*(void *)(v5 + 8))) {
            goto LABEL_6;
          }
        }
        else
        {
          uint64_t v6 = *(void *)(v5 + 16);
          if (v6 && atomic_load_explicit((atomic_uint *volatile)(v6 + 8), memory_order_acquire))
          {
LABEL_6:
            char v7 = 0;
            if (LODWORD(v19[0]) == SLODWORD(v19[0]) >> 31) {
              goto LABEL_13;
            }
            goto LABEL_7;
          }
        }
        if (*(unsigned char *)(a1 + 24))
        {
          *(unsigned char *)(a1 + 24) = 0;
          boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::mutex>((_DWORD *)a1, v14);
        }
        char v7 = 1;
        if (LODWORD(v19[0]) == SLODWORD(v19[0]) >> 31)
        {
LABEL_13:
          BOOL v8 = (atomic_uint *)v19[2];
          if (v19[2])
          {
            if (atomic_fetch_add((atomic_uint *volatile)(v19[2] + 8), 0xFFFFFFFF) == 1)
            {
              (*(void (**)(atomic_uint *))(*(void *)v8 + 16))(v8);
              if (atomic_fetch_add(v8 + 3, 0xFFFFFFFF) == 1) {
                (*(void (**)(atomic_uint *))(*(void *)v8 + 24))(v8);
              }
            }
          }
          goto LABEL_17;
        }
LABEL_7:
        if (v19[1]) {
          (*(void (**)(void))(*(void *)v19[1] + 8))(v19[1]);
        }
LABEL_17:
        if ((v7 & 1) == 0)
        {
          v5 += 24;
          if (v5 != *(void *)(*(void *)(a1 + 32) + 8)) {
            continue;
          }
        }
        break;
      }
    }
  }
  int v9 = *(unsigned __int8 *)(a1 + 24);
  pthread_mutex_unlock(v18);
  CFStringRef v10 = v16;
  if (v16)
  {
    if (v17 - 1 >= 0)
    {
      xpc_object_t v11 = &v16[16 * v17];
      do
      {
        uint64_t v12 = (atomic_uint *)*((void *)v11 - 1);
        if (v12)
        {
          if (atomic_fetch_add(v12 + 2, 0xFFFFFFFF) == 1)
          {
            (*(void (**)(atomic_uint *))(*(void *)v12 + 16))(v12);
            if (atomic_fetch_add(v12 + 3, 0xFFFFFFFF) == 1) {
              (*(void (**)(atomic_uint *))(*(void *)v12 + 24))(v12);
            }
          }
        }
        v11 -= 16;
      }
      while (v11 > v10);
    }
    if (v15 >= 0xB) {
      operator delete(v16);
    }
  }
  return v9 != 0;
}

void sub_1C5854B78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(unsigned int),boost::function<void ()(unsigned int)>>,boost::signals2::mutex>::lock(uint64_t a1)
{
  return pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 48));
}

uint64_t boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(unsigned int),boost::function<void ()(unsigned int)>>,boost::signals2::mutex>::unlock(uint64_t a1)
{
  return pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 48));
}

uint64_t boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(unsigned int),boost::function<void ()(unsigned int)>>,boost::signals2::mutex>::release_slot@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(result + 40);
  long long v2 = (void *)(result + 32);
  *a2 = *(void *)(result + 32);
  a2[1] = v3;
  if (v3)
  {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 + 8), 1u, memory_order_relaxed);
    uint64_t v4 = *(atomic_uint **)(result + 40);
    *long long v2 = 0;
    *(void *)(result + 40) = 0;
    if (v4 && atomic_fetch_add(v4 + 2, 0xFFFFFFFF) == 1)
    {
      uint64_t result = (*(uint64_t (**)(atomic_uint *))(*(void *)v4 + 16))(v4);
      if (atomic_fetch_add(v4 + 3, 0xFFFFFFFF) == 1) {
        return (*(uint64_t (**)(atomic_uint *))(*(void *)v4 + 24))(v4);
      }
    }
  }
  else
  {
    *long long v2 = 0;
    *(void *)(result + 40) = 0;
  }
  return result;
}

void boost::detail::sp_counted_impl_p<boost::signals2::slot<void ()(unsigned int),boost::function<void ()(unsigned int)>>>::dispose(uint64_t a1)
{
  uint64_t v1 = *(void ***)(a1 + 16);
  if (v1)
  {
    unint64_t v2 = (unint64_t)v1[3];
    if (v2)
    {
      if ((v2 & 1) == 0)
      {
        uint64_t v3 = *(void (**)(void **, void **, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
        if (v3) {
          v3(v1 + 4, v1 + 4, 2);
        }
      }
      v1[3] = 0;
    }
    uint64_t v4 = *v1;
    if (*v1)
    {
      uint64_t v5 = (uint64_t)v1[1];
      uint64_t v6 = *v1;
      if ((void *)v5 != v4)
      {
        do
        {
          v5 -= 24;
          boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>::destroy_content(v5);
        }
        while ((void *)v5 != v4);
        uint64_t v6 = *v1;
      }
      v1[1] = v4;
      operator delete(v6);
    }
    operator delete(v1);
  }
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::slot<void ()(unsigned int),boost::function<void ()(unsigned int)>>>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::slot<void ()(unsigned int),boost::function<void ()(unsigned int)>>>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::slot<void ()(unsigned int),boost::function<void ()(unsigned int)>>>::get_untyped_deleter()
{
  return 0;
}

void *boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(unsigned int),boost::function<void ()(unsigned int)>>,boost::signals2::mutex>::~connection_body(void *a1)
{
  *a1 = &unk_1F20F7958;
  unint64_t v2 = (atomic_uint *)a1[7];
  if (v2)
  {
    if (atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
      if (atomic_fetch_add(v2 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v2 + 24))(v2);
      }
    }
  }
  uint64_t v3 = (atomic_uint *)a1[5];
  if (v3)
  {
    if (atomic_fetch_add(v3 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v3 + 16))(v3);
      if (atomic_fetch_add(v3 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v3 + 24))(v3);
      }
    }
  }
  *a1 = &unk_1F20F20E8;
  uint64_t v4 = (atomic_uint *)a1[2];
  if (v4 && atomic_fetch_add(v4 + 3, 0xFFFFFFFF) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v4 + 24))(v4);
  }
  return a1;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(unsigned int),boost::function<void ()(unsigned int)>>,boost::signals2::mutex>>::dispose(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 16);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(unsigned int),boost::function<void ()(unsigned int)>>,boost::signals2::mutex>>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(unsigned int),boost::function<void ()(unsigned int)>>,boost::signals2::mutex>>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(unsigned int),boost::function<void ()(unsigned int)>>,boost::signals2::mutex>>::get_untyped_deleter()
{
  return 0;
}

uint64_t *boost::function<void ()(unsigned int)>::~function(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    if ((v2 & 1) == 0)
    {
      uint64_t v3 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
      if (v3) {
        v3(a1 + 1, a1 + 1, 2);
      }
    }
    *a1 = 0;
  }
  return a1;
}

void boost::detail::function::functor_manager<ctu::DispatchSlot<dispatch::block<void({block_pointer})(unsigned int)>>>::manage(uint64_t a1, _WORD *a2, unsigned int a3)
{
  if (a3 == 4) {
    goto LABEL_2;
  }
  if (a3 > 1)
  {
    if (a3 == 3)
    {
      int v9 = (const char *)(*(void *)(*(void *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL);
      if (v9 == (const char *)(0x80000001C59A0B34 & 0x7FFFFFFFFFFFFFFFLL)
        || !strcmp(v9, (const char *)(0x80000001C59A0B34 & 0x7FFFFFFFFFFFFFFFLL)))
      {
        *(void *)a2 = a1;
      }
      else
      {
        *(void *)a2 = 0;
      }
    }
    else
    {
      if (a3 != 2)
      {
LABEL_2:
        a2[4] = 0;
        return;
      }
      dispatch_release(*(dispatch_object_t *)a2);
      BOOL v8 = (const void *)*((void *)a2 + 1);
      if (v8) {
LABEL_9:
      }
        _Block_release(v8);
    }
  }
  else
  {
    uint64_t v6 = *(NSObject **)a1;
    char v7 = *(void **)(a1 + 8);
    *(void *)a2 = *(void *)a1;
    if (v7)
    {
      char v7 = _Block_copy(v7);
      uint64_t v6 = *(NSObject **)a2;
    }
    *((void *)a2 + 1) = v7;
    dispatch_retain(v6);
    if (a3 == 1)
    {
      dispatch_release(*(dispatch_object_t *)a1);
      BOOL v8 = *(const void **)(a1 + 8);
      if (v8) {
        goto LABEL_9;
      }
    }
  }
}

void boost::detail::function::void_function_obj_invoker1<ctu::DispatchSlot<dispatch::block<void({block_pointer})(unsigned int)>>,void,unsigned int>::invoke(uint64_t a1, int a2)
{
  uint64_t v4 = *(NSObject **)a1;
  uint64_t v3 = *(const void **)(a1 + 8);
  if (!v3)
  {
    uint64_t v6 = 0;
    goto LABEL_10;
  }
  uint64_t v5 = _Block_copy(v3);
  uint64_t v6 = v5;
  if (!v5)
  {
LABEL_10:
    char v18 = 1;
LABEL_11:
    uint64_t v17 = 0;
    v23[0] = 0;
    goto LABEL_21;
  }
  char v7 = _Block_copy(v5);
  BOOL v8 = v7;
  if (!v7)
  {
    char v18 = 0;
    goto LABEL_11;
  }
  int v9 = _Block_copy(v7);
  CFStringRef v10 = v9;
  if (v9)
  {
    xpc_object_t v11 = _Block_copy(v9);
    uint64_t v12 = v11;
    if (v11)
    {
      uint64_t v13 = _Block_copy(v11);
      xpc_object_t v14 = v13;
      if (v13)
      {
        unint64_t v15 = _Block_copy(v13);
        unsigned int v16 = v15;
        if (v15)
        {
          uint64_t v17 = _Block_copy(v15);
          v23[0] = v17;
          _Block_release(v16);
        }
        else
        {
          uint64_t v17 = 0;
          v23[0] = 0;
        }
        _Block_release(v14);
      }
      else
      {
        uint64_t v17 = 0;
        v23[0] = 0;
      }
      _Block_release(v12);
    }
    else
    {
      uint64_t v17 = 0;
      v23[0] = 0;
    }
    _Block_release(v10);
  }
  else
  {
    uint64_t v17 = 0;
    v23[0] = 0;
  }
  _Block_release(v8);
  char v18 = 0;
LABEL_21:
  unsigned int v19 = operator new(4uLL);
  _DWORD *v19 = a2;
  long long v20 = operator new(0x20uLL);
  *long long v20 = boost::function1<void,unsigned int>::assign_to<dispatch::block<void({block_pointer})>>(dispatch::block<void({block_pointer})>)::stored_vtable;
  if (v17) {
    unsigned int v21 = _Block_copy(v17);
  }
  else {
    unsigned int v21 = 0;
  }
  v20[1] = v21;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = ___Z13execute_blockP16dispatch_queue_sRKN5boost8functionIFvjEEEj_block_invoke;
  block[3] = &__block_descriptor_tmp_291_0;
  void block[4] = v20;
  void block[5] = v19;
  dispatch_async(v4, block);
  if (boost::function1<void,unsigned int>::assign_to<dispatch::block<void({block_pointer})>>(dispatch::block<void({block_pointer})>)::stored_vtable)
  {
    if ((boost::function1<void,unsigned int>::assign_to<dispatch::block<void({block_pointer})>>(dispatch::block<void({block_pointer})>)::stored_vtable & 1) == 0)
    {
      int v22 = *(void (**)(void *, void *, uint64_t))((unint64_t)boost::function1<void,unsigned int>::assign_to<dispatch::block<void({block_pointer})>>(dispatch::block<void({block_pointer})>)::stored_vtable & 0xFFFFFFFFFFFFFFFELL);
      if (v22) {
        v22(v23, v23, 2);
      }
    }
  }
  if ((v18 & 1) == 0) {
    _Block_release(v6);
  }
}

void sub_1C58553EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (v10) {
    _Block_release(v10);
  }
  if ((v11 & 1) == 0) {
    _Block_release(v9);
  }
  _Unwind_Resume(exception_object);
}

void ___Z13execute_blockP16dispatch_queue_sRKN5boost8functionIFvjEEEj_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  if (!*v1)
  {
    std::runtime_error::runtime_error(&v7, "call to empty boost::function");
    v7.__vftable = (std::runtime_error_vtbl *)&unk_1F20F2330;
    boost::throw_exception<boost::bad_function_call>(&v7);
  }
  (*(void (**)(void *, void))((*v1 & 0xFFFFFFFFFFFFFFFELL) + 8))(v1 + 1, **(unsigned int **)(a1 + 40));
  uint64_t v3 = *(uint64_t **)(a1 + 32);
  if (v3)
  {
    uint64_t v4 = *v3;
    if (*v3)
    {
      if ((v4 & 1) == 0)
      {
        uint64_t v5 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v4 & 0xFFFFFFFFFFFFFFFELL);
        if (v5) {
          v5(v3 + 1, v3 + 1, 2);
        }
      }
      uint64_t *v3 = 0;
    }
    operator delete(v3);
  }
  uint64_t v6 = *(void **)(a1 + 40);
  if (v6)
  {
    operator delete(v6);
  }
}

void sub_1C585550C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::runtime_error a9)
{
}

void boost::detail::function::functor_manager<dispatch::block<void({block_pointer})(unsigned int)>>::manage(void **a1, _WORD *a2, unsigned int a3)
{
  if (a3 == 4) {
    goto LABEL_2;
  }
  if (a3 > 1)
  {
    if (a3 == 3)
    {
      BOOL v8 = (const char *)(*(void *)(*(void *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL);
      if (v8 == (const char *)(0x80000001C59A0B72 & 0x7FFFFFFFFFFFFFFFLL)
        || !strcmp(v8, (const char *)(0x80000001C59A0B72 & 0x7FFFFFFFFFFFFFFFLL)))
      {
        *(void *)a2 = a1;
      }
      else
      {
        *(void *)a2 = 0;
      }
    }
    else
    {
      if (a3 != 2)
      {
LABEL_2:
        a2[4] = 0;
        return;
      }
      std::runtime_error v7 = *(void **)a2;
      if (*(void *)a2) {
LABEL_9:
      }
        _Block_release(v7);
    }
  }
  else
  {
    uint64_t v6 = *a1;
    if (*a1) {
      uint64_t v6 = _Block_copy(v6);
    }
    *(void *)a2 = v6;
    if (a3 == 1)
    {
      std::runtime_error v7 = *a1;
      if (*a1) {
        goto LABEL_9;
      }
    }
  }
}

uint64_t boost::detail::function::void_function_obj_invoker1<dispatch::block<void({block_pointer})(unsigned int)>,void,unsigned int>::invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 16))();
}

uint64_t boost::function1<void,unsigned int>::move_assign(uint64_t result, uint64_t *a2)
{
  if (a2 != (uint64_t *)result)
  {
    uint64_t v2 = a2;
    uint64_t v3 = (uint64_t *)result;
    uint64_t v4 = *a2;
    if (*a2)
    {
      *(void *)uint64_t result = v4;
      if (v4)
      {
        long long v7 = *(_OWORD *)(a2 + 1);
        *(void *)(result + 24) = a2[3];
        *(_OWORD *)(result + 8) = v7;
      }
      else
      {
        uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v4 & 0xFFFFFFFFFFFFFFFELL))(a2 + 1, result + 8, 1);
      }
    }
    else
    {
      uint64_t v5 = *(void *)result;
      if (!*(void *)result) {
        return result;
      }
      if ((v5 & 1) == 0)
      {
        uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 & 0xFFFFFFFFFFFFFFFELL);
        if (v6) {
          uint64_t result = v6(result + 8, result + 8, 2);
        }
      }
      uint64_t v2 = v3;
    }
    *uint64_t v2 = 0;
  }
  return result;
}

void sub_1C58556C8(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_rethrow();
}

void sub_1C58556D8(_Unwind_Exception *a1)
{
}

uint64_t *boost::function1<void,unsigned int>::~function1(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    if ((v2 & 1) == 0)
    {
      uint64_t v3 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
      if (v3) {
        v3(a1 + 1, a1 + 1, 2);
      }
    }
    *a1 = 0;
  }
  return a1;
}

void *boost::signals2::detail::foreign_weak_ptr_impl<std::weak_ptr<RadioModule>>::~foreign_weak_ptr_impl(void *a1)
{
  *a1 = &unk_1F20F7AB0;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void boost::signals2::detail::foreign_weak_ptr_impl<std::weak_ptr<RadioModule>>::~foreign_weak_ptr_impl(void *__p)
{
  void *__p = &unk_1F20F7AB0;
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  operator delete(__p);
}

void boost::signals2::detail::foreign_weak_ptr_impl<std::weak_ptr<RadioModule>>::lock(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (v4)
  {
    uint64_t v5 = std::__shared_weak_count::lock(v4);
    if (v5)
    {
      uint64_t v6 = *(void *)(a1 + 8);
      goto LABEL_6;
    }
  }
  else
  {
    uint64_t v5 = 0;
  }
  uint64_t v6 = 0;
LABEL_6:
  long long v7 = operator new(0x18uLL);
  void *v7 = &unk_1F20F7B00;
  v7[1] = v6;
  v7[2] = v5;
  if (v5)
  {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    *a2 = v7;
    if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  else
  {
    *a2 = v7;
  }
}

void sub_1C58558FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

BOOL boost::signals2::detail::foreign_weak_ptr_impl<std::weak_ptr<RadioModule>>::expired(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  return !v1 || *(void *)(v1 + 8) == -1;
}

void *boost::signals2::detail::foreign_weak_ptr_impl<std::weak_ptr<RadioModule>>::clone(uint64_t a1)
{
  uint64_t result = operator new(0x18uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  void *result = &unk_1F20F7AB0;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void *boost::signals2::detail::foreign_shared_ptr_impl<std::shared_ptr<RadioModule>>::~foreign_shared_ptr_impl(void *result)
{
  uint64_t v1 = result;
  void *result = &unk_1F20F7B00;
  uint64_t v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void boost::signals2::detail::foreign_shared_ptr_impl<std::shared_ptr<RadioModule>>::~foreign_shared_ptr_impl(void *__p)
{
  uint64_t v1 = __p;
  void *__p = &unk_1F20F7B00;
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    std::string __p = v1;
  }
  else if (((vars8 ^ (2 * vars8)) & 0x4000000000000000) != 0)
  {
    __break(0xC471u);
  }
  operator delete(__p);
}

void *boost::signals2::detail::foreign_shared_ptr_impl<std::shared_ptr<RadioModule>>::clone(uint64_t a1)
{
  uint64_t result = operator new(0x18uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  void *result = &unk_1F20F7B00;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void dispatch::async<void ctu::SharedSynchronizable<RadioModule>::execute_wrapped<RadioModule::sleep(dispatch::group_session)::$_0>(RadioModule::sleep(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<RadioModule::sleep(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<RadioModule::sleep(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = **a1;
  uint64_t v4 = *(uint64_t **)(v3 + 272);
  if (v4)
  {
    uint64_t v5 = _Block_copy(&__block_literal_global_4);
    uint64_t v6 = v5;
    long long v7 = *(NSObject **)(v3 + 136);
    if (v7)
    {
      dispatch_retain(v7);
      char v11 = v6;
      uint64_t v12 = v7;
      radio::HealthService::enterLowPower(v4, (uint64_t)&v11);
      dispatch_release(v7);
      if (!v6) {
        goto LABEL_7;
      }
      goto LABEL_6;
    }
    char v11 = v5;
    uint64_t v12 = 0;
    radio::HealthService::enterLowPower(v4, (uint64_t)&v11);
    if (v6) {
LABEL_6:
    }
      _Block_release(v6);
  }
LABEL_7:
  BOOL v8 = v2[1];
  if (v8)
  {
    dispatch_group_leave(v8);
    int v9 = v2[1];
    if (v9) {
      dispatch_release(v9);
    }
  }
  operator delete(v2);
  CFStringRef v10 = (std::__shared_weak_count *)a1[2];
  if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }

  operator delete(a1);
}

void dispatch::async<void ctu::SharedSynchronizable<RadioModule>::execute_wrapped<RadioModule::wake(dispatch::group_session)::$_0>(RadioModule::wake(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<RadioModule::wake(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<RadioModule::wake(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = **a1;
  uint64_t v4 = *(uint64_t **)(v3 + 272);
  if (v4)
  {
    uint64_t v5 = _Block_copy(&__block_literal_global_306);
    uint64_t v6 = v5;
    long long v7 = *(NSObject **)(v3 + 136);
    if (v7)
    {
      dispatch_retain(v7);
      char v11 = v6;
      uint64_t v12 = v7;
      radio::HealthService::exitLowPower(v4, (uint64_t)&v11);
      dispatch_release(v7);
      if (!v6) {
        goto LABEL_7;
      }
      goto LABEL_6;
    }
    char v11 = v5;
    uint64_t v12 = 0;
    radio::HealthService::exitLowPower(v4, (uint64_t)&v11);
    if (v6) {
LABEL_6:
    }
      _Block_release(v6);
  }
LABEL_7:
  BOOL v8 = v2[1];
  if (v8)
  {
    dispatch_group_leave(v8);
    int v9 = v2[1];
    if (v9) {
      dispatch_release(v9);
    }
  }
  operator delete(v2);
  CFStringRef v10 = (std::__shared_weak_count *)a1[2];
  if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }

  operator delete(a1);
}

void std::__shared_ptr_pointer<radio::HealthService *,std::shared_ptr<radio::HealthService>::__shared_ptr_default_delete<radio::HealthService,radio::HealthService>,std::allocator<radio::HealthService>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<radio::HealthService *,std::shared_ptr<radio::HealthService>::__shared_ptr_default_delete<radio::HealthService,radio::HealthService>,std::allocator<radio::HealthService>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count ***)(a1 + 24);
  if (v1)
  {
    uint64_t v2 = v1[1];
    if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      uint64_t v3 = v1;
    }
    else
    {
      uint64_t v3 = v1;
    }
    operator delete(v3);
  }
}

uint64_t std::__shared_ptr_pointer<radio::HealthService *,std::shared_ptr<radio::HealthService>::__shared_ptr_default_delete<radio::HealthService,radio::HealthService>,std::allocator<radio::HealthService>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x80000001C59A0CC9) {
    return a1 + 24;
  }
  if (((v3 & 0x80000001C59A0CC9 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000001C59A0CC9)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001C59A0CC9 & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 24;
  }
  return 0;
}

BOOL ctu::cf::plist_adapter::set<BOOL>(uint64_t a1, int a2, char *a3, int a4)
{
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)key, a3);
  long long v7 = (const __CFString **)MEMORY[0x1E4F1CFD0];
  if (!a2) {
    long long v7 = (const __CFString **)MEMORY[0x1E4F1CFC8];
  }
  CFStringRef v8 = *v7;
  key[1] = v8;
  if (v8)
  {
    CFStringRef v9 = (const __CFString *)*MEMORY[0x1E4F1D3E0];
    CFPreferencesSetValue(key[0], v8, *(CFStringRef *)(a1 + 8), *(CFStringRef *)(a1 + 16), (CFStringRef)*MEMORY[0x1E4F1D3E0]);
    if (a4) {
      BOOL v10 = CFPreferencesSynchronize(*(CFStringRef *)(a1 + 8), *(CFStringRef *)(a1 + 16), v9) != 0;
    }
    else {
      BOOL v10 = 1;
    }
    CFRelease(v8);
  }
  else
  {
    BOOL v10 = 0;
  }
  MEMORY[0x1C8791110](key);
  return v10;
}

void sub_1C5855FB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, const void *a10)
{
}

BOOL ctu::cf::plist_adapter::set<unsigned int>(uint64_t a1, unsigned int a2, const __CFString *a3, int a4)
{
  CFAllocatorRef v7 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  uint64_t valuePtr = a2;
  CFNumberRef v8 = CFNumberCreate(v7, kCFNumberLongLongType, &valuePtr);
  if (!v8) {
    return 0;
  }
  CFNumberRef v9 = v8;
  CFStringRef v10 = (const __CFString *)*MEMORY[0x1E4F1D3E0];
  CFPreferencesSetValue(a3, v8, *(CFStringRef *)(a1 + 8), *(CFStringRef *)(a1 + 16), (CFStringRef)*MEMORY[0x1E4F1D3E0]);
  if (a4) {
    BOOL v11 = CFPreferencesSynchronize(*(CFStringRef *)(a1 + 8), *(CFStringRef *)(a1 + 16), v10) != 0;
  }
  else {
    BOOL v11 = 1;
  }
  CFRelease(v9);
  return v11;
}

void sub_1C5856094(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
}

uint64_t __cxx_global_var_init_209()
{
  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<CommandDriverFactory>::~PthreadMutexGuardPolicy, &ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance, &dword_1C5767000);
  }
  return result;
}

uint64_t __cxx_global_var_init_210()
{
  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<ABMServer>::~PthreadMutexGuardPolicy, &ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance, &dword_1C5767000);
  }
  return result;
}

uint64_t __cxx_global_var_init_211()
{
  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<SharedData>::~PthreadMutexGuardPolicy, &ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance, &dword_1C5767000);
  }
  return result;
}

uint64_t __cxx_global_var_init_212()
{
  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<DeviceHistoryDB>::~PthreadMutexGuardPolicy, &ctu::Singleton<DeviceHistoryDB,DeviceHistoryDB,ctu::PthreadMutexGuardPolicy<DeviceHistoryDB>>::sInstance, &dword_1C5767000);
  }
  return result;
}

uint64_t __cxx_global_var_init_213()
{
  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<ABMProperties>::~PthreadMutexGuardPolicy, &ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance, &dword_1C5767000);
  }
  return result;
}

void *Capabilities::create_default_global@<X0>(void *a1@<X8>)
{
  uint64_t v3 = operator new(1uLL);
  *a1 = v3;
  uint64_t result = operator new(0x20uLL);
  void *result = &unk_1F20F7BD0;
  result[1] = 0;
  result[2] = 0;
  result[3] = v3;
  a1[1] = result;
  return result;
}

void sub_1C5856244(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t Capabilities::isCMHandDetectionSupported(Capabilities *this)
{
  capabilities::abs::supportsCMHandDetection(this);
  uint64_t v1 = (void *)MEMORY[0x1E4F221C0];

  return [v1 isCallHandednessAvailable];
}

void std::__shared_ptr_pointer<Capabilities *,std::shared_ptr<Capabilities>::__shared_ptr_default_delete<Capabilities,Capabilities>,std::allocator<Capabilities>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<Capabilities *,std::shared_ptr<Capabilities>::__shared_ptr_default_delete<Capabilities,Capabilities>,std::allocator<Capabilities>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 24);
  if (v1) {
    operator delete(v1);
  }
}

uint64_t std::__shared_ptr_pointer<Capabilities *,std::shared_ptr<Capabilities>::__shared_ptr_default_delete<Capabilities,Capabilities>,std::allocator<Capabilities>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x80000001C59A0D99) {
    return a1 + 24;
  }
  if (((v3 & 0x80000001C59A0D99 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000001C59A0D99)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001C59A0D99 & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 24;
  }
  return 0;
}

void abm::debug::registerLogServer(uint64_t a1)
{
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = ___ZN3abm5debugL14sLogServerInitERNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  block[3] = &__block_descriptor_tmp_9;
  void block[4] = a1;
  if (abm::debug::sLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce != -1) {
    dispatch_once(&abm::debug::sLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, block);
  }
}

void ___ZN3abm5debugL14sLogServerInitERNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke(uint64_t a1)
{
  xpc_object_t xdict = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  ctu::LogServer::getConfig((uint64_t *)&xdict, **(ctu::LogServer ***)(a1 + 32));
  v26[0] = &xdict;
  v26[1] = "kDomainLogLevels";
  xpc_object_t object = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  xpc::dict::object_proxy::operator xpc::dict((uint64_t)v26, &object);
  uint64_t v2 = MEMORY[0x1C8792D30](object);
  uint64_t v3 = MEMORY[0x1E4F14590];
  if (v2 != MEMORY[0x1E4F14590])
  {
    xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
    if (v4 || (xpc_object_t v4 = xpc_null_create()) != 0)
    {
      if (MEMORY[0x1C8792D30](v4) == v3)
      {
        xpc_retain(v4);
        xpc_object_t v5 = v4;
      }
      else
      {
        xpc_object_t v5 = xpc_null_create();
      }
    }
    else
    {
      xpc_object_t v5 = xpc_null_create();
      xpc_object_t v4 = 0;
    }
    xpc_release(v4);
    xpc_object_t v6 = xpc_null_create();
    xpc_object_t v7 = object;
    xpc_object_t object = v5;
    xpc_release(v7);
    xpc_release(v6);
  }
  xpc_object_t v8 = xpc_int64_create(1);
  if (!v8) {
    xpc_object_t v8 = xpc_null_create();
  }
  xpc_dictionary_set_value(object, "libetl", v8);
  xpc_object_t v9 = xpc_null_create();
  xpc_release(v8);
  xpc_release(v9);
  xpc_object_t v10 = xpc_int64_create(1);
  if (!v10) {
    xpc_object_t v10 = xpc_null_create();
  }
  xpc_dictionary_set_value(object, "libtu", v10);
  xpc_object_t v11 = xpc_null_create();
  xpc_release(v10);
  xpc_release(v11);
  xpc_object_t v12 = xpc_int64_create(1);
  if (!v12) {
    xpc_object_t v12 = xpc_null_create();
  }
  xpc_dictionary_set_value(object, "trace.diag.cfg", v12);
  xpc_object_t v13 = xpc_null_create();
  xpc_release(v12);
  xpc_release(v13);
  xpc_object_t v14 = xpc_int64_create(1);
  if (!v14) {
    xpc_object_t v14 = xpc_null_create();
  }
  xpc_dictionary_set_value(object, "trace.diag.svc", v14);
  xpc_object_t v15 = xpc_null_create();
  xpc_release(v14);
  xpc_release(v15);
  xpc_object_t v16 = xpc_int64_create(1);
  if (!v16) {
    xpc_object_t v16 = xpc_null_create();
  }
  xpc_dictionary_set_value(object, "libktl", v16);
  xpc_object_t v17 = xpc_null_create();
  xpc_release(v16);
  xpc_release(v17);
  xpc_object_t v18 = object;
  if (object) {
    xpc_retain(object);
  }
  else {
    xpc_object_t v18 = xpc_null_create();
  }
  xpc_dictionary_set_value(xdict, "kDomainLogLevels", v18);
  xpc_object_t v19 = xpc_null_create();
  xpc_release(v18);
  xpc_release(v19);
  xpc_object_t v25 = xdict;
  if (xdict) {
    xpc_retain(xdict);
  }
  else {
    xpc_object_t v25 = xpc_null_create();
  }
  ctu::LogServer::updateConfig();
  xpc_release(v25);
  long long v20 = (capabilities::abs *)operator new(0x10uLL);
  unsigned int v21 = *(void **)(a1 + 32);
  *(void *)long long v20 = *v21;
  uint64_t v22 = v21[1];
  *((void *)v20 + 1) = v22;
  if (v22) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v22 + 16), 1uLL, memory_order_relaxed);
  }
  _MergedGlobals_9 = (uint64_t)v20;
  if (!qword_1EBBDD5C8)
  {
    long long v20 = (capabilities::abs *)os_log_create("com.apple.telephony.abm", "libtu");
    qword_1EBBDD5C8 = (uint64_t)v20;
  }
  capabilities::abs::TUDebugFlags(v20);
  TelephonyUtilDebugSetFlags();
  uint64_t v23 = (capabilities::radio *)TelephonyUtilDebugRegisterDelegate();
  uint64_t v24 = (capabilities::radio *)capabilities::radio::ice(v23);
  if ((v24 & 1) == 0 && capabilities::radio::maverick(v24))
  {
    if (!qword_1EBBDD5D0) {
      qword_1EBBDD5D0 = (uint64_t)os_log_create("com.apple.telephony.abm", "libetl");
    }
    ETLDebugRegisterDelegate();
  }
  if (!qword_1EBBDD5D8) {
    qword_1EBBDD5D8 = (uint64_t)os_log_create("com.apple.telephony.abm", "bbu");
  }
  BBUpdaterRegisterGlobalLogSink();
  xpc_release(object);
  xpc_release(xdict);
}

void sub_1C58567EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, uint64_t a11, uint64_t a12, xpc_object_t a13, xpc_object_t a14)
{
}

void abm::debug::handleDebugPrintTelephonyUtil(abm::debug *this, const char *a2, const char *a3, char *a4)
{
}

void abm::debug::handleDebugPrintBinaryTelephonyUtil(uint64_t a1, int a2, uint64_t a3, int a4)
{
  xpc_object_t v6 = "misc";
  if (!a2) {
    xpc_object_t v6 = "send";
  }
  if (a2 == 1) {
    xpc_object_t v7 = "recv";
  }
  else {
    xpc_object_t v7 = v6;
  }
  abm::debug::handleDebugPrintBinary(a1, 0, (uint64_t)v7, a3, a4);
}

void abm::debug::handleDebugPrintETL(abm::debug *this, const char *a2, const char *a3, char *a4)
{
}

void abm::debug::handleDebugPrintBinaryETL(uint64_t a1, int a2, uint64_t a3, int a4)
{
  xpc_object_t v6 = "misc";
  if (!a2) {
    xpc_object_t v6 = "send";
  }
  if (a2 == 1) {
    xpc_object_t v7 = "recv";
  }
  else {
    xpc_object_t v7 = v6;
  }
  abm::debug::handleDebugPrintBinary(a1, 1, (uint64_t)v7, a3, a4);
}

uint64_t abm::debug::handleDebugPrintBBU(abm::debug *this, void *a2, const char *a3, const char *a4)
{
  unint64_t v30 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v5 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v29[7] = v5;
  v29[8] = v5;
  v29[5] = v5;
  v29[6] = v5;
  v29[3] = v5;
  v29[4] = v5;
  v29[1] = v5;
  v29[2] = v5;
  v29[0] = v5;
  long long v27 = v5;
  long long v28 = v5;
  long long v25 = v5;
  *(_OWORD *)std::string __p = v5;
  long long v23 = v5;
  long long v24 = v5;
  long long v22 = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v22);
  xpc_object_t v6 = (void *)std::ostream::operator<<();
  xpc_object_t v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  size_t v8 = strlen(a3);
  xpc_object_t v9 = (abm::debug *)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)a3, v8);
  memset(__dst, 170, sizeof(__dst));
  if ((BYTE8(v28) & 0x10) != 0)
  {
    uint64_t v15 = v28;
    if ((unint64_t)v28 < *((void *)&v25 + 1))
    {
      *(void *)&long long v28 = *((void *)&v25 + 1);
      uint64_t v15 = *((void *)&v25 + 1);
    }
    xpc_object_t v16 = (const void *)v25;
    size_t v13 = v15 - v25;
    if ((unint64_t)(v15 - v25) >= 0x7FFFFFFFFFFFFFF8) {
      goto LABEL_22;
    }
  }
  else
  {
    if ((BYTE8(v28) & 8) == 0)
    {
      size_t v13 = 0;
      HIBYTE(__dst[2]) = 0;
      xpc_object_t v14 = __dst;
      goto LABEL_14;
    }
    xpc_object_t v16 = (const void *)*((void *)&v23 + 1);
    size_t v13 = *((void *)&v24 + 1) - *((void *)&v23 + 1);
    if (*((void *)&v24 + 1) - *((void *)&v23 + 1) >= 0x7FFFFFFFFFFFFFF8uLL) {
LABEL_22:
    }
      std::string::__throw_length_error[abi:ne180100]();
  }
  if (v13 >= 0x17)
  {
    uint64_t v17 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v13 | 7) != 0x17) {
      uint64_t v17 = v13 | 7;
    }
    uint64_t v18 = v17 + 1;
    xpc_object_t v14 = (void **)operator new(v17 + 1);
    __dst[1] = (void *)v13;
    _OWORD __dst[2] = (void *)(v18 | 0x8000000000000000);
    __dst[0] = v14;
    goto LABEL_13;
  }
  HIBYTE(__dst[2]) = v13;
  xpc_object_t v14 = __dst;
  if (v13) {
LABEL_13:
  }
    xpc_object_t v9 = (abm::debug *)memmove(v14, v16, v13);
LABEL_14:
  *((unsigned char *)v14 + v13) = 0;
  xpc_object_t v19 = __dst;
  if (SHIBYTE(__dst[2]) < 0) {
    xpc_object_t v19 = (void **)__dst[0];
  }
  abm::debug::handleDebugPrintBBUHelper(v9, v10, v11, v12, v19);
  if (SHIBYTE(__dst[2]) < 0) {
    operator delete(__dst[0]);
  }
  *(void *)&long long v22 = *MEMORY[0x1E4FBA418];
  *(void *)((char *)&v22 + *(void *)(v22 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  *((void *)&v22 + 1) = MEMORY[0x1E4FBA470] + 16;
  if (SHIBYTE(v27) < 0) {
    operator delete(__p[1]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1C8791FB0](v29);
}

void sub_1C5856BE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
  {
    operator delete(__p);
    std::ostringstream::~ostringstream((uint64_t)&a16);
    _Unwind_Resume(a1);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void abm::debug::handleDebugPrint(int a1, unsigned char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v55 = *MEMORY[0x1E4F143B8];
  xpc_object_t v4 = (void *)_MergedGlobals_9;
  if (!_MergedGlobals_9) {
    return;
  }
  xpc_object_t v6 = *(std::__shared_weak_count **)(_MergedGlobals_9 + 8);
  if (!v6) {
    return;
  }
  xpc_object_t v10 = std::__shared_weak_count::lock(v6);
  uint64_t v52 = v10;
  if (!v10) {
    return;
  }
  if (!*v4)
  {
    xpc_object_t v19 = v10;
LABEL_68:
    if (!atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
    return;
  }
  unint64_t v50 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v11 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v11 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v49[1] = v11;
  v49[2] = v11;
  v49[0] = v11;
  ctu::LogMessageBuffer::LogMessageBuffer((ctu::LogMessageBuffer *)v49);
  if (a2 && *a2)
  {
    uint64_t v12 = MEMORY[0x1C8791660](v49, a2);
    MEMORY[0x1C8791660](v12, ": ");
  }
  MEMORY[0x1C8791050](&v47, a3, a4);
  ctu::operator<<();
  size_t v13 = (ctu::Clock *)MEMORY[0x1C8791070](&v47);
  ctu::Clock::now_in_nanoseconds(v13);
  xpc_object_t v14 = (std::string *)operator new(0x60uLL);
  uint64_t v15 = abm::debug::kLogDomainMap[a1];
  size_t v16 = strlen(v15);
  if (v16 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v17 = (void *)v16;
  if (v16 >= 0x17)
  {
    uint64_t v20 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v16 | 7) != 0x17) {
      uint64_t v20 = v16 | 7;
    }
    uint64_t v21 = v20 + 1;
    uint64_t v18 = (void **)operator new(v20 + 1);
    __dst[1] = v17;
    unint64_t v46 = v21 | 0x8000000000000000;
    __dst[0] = v18;
    goto LABEL_16;
  }
  HIBYTE(v46) = v16;
  uint64_t v18 = __dst;
  if (v16) {
LABEL_16:
  }
    memmove(v18, v15, (size_t)v17);
  *((unsigned char *)v17 + (void)v18) = 0;
  MEMORY[0x1C8791030](v49);
  ctu::LogMessageBuffer::takeMetadata((ctu::LogMessageBuffer *)v49);
  ctu::LogMessage::LogMessage();
  xpc_object_t v47 = v14;
  long long v22 = (std::__shared_weak_count *)operator new(0x20uLL);
  v22->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20F7C40;
  v22->__shared_owners_ = 0;
  v22->__shared_weak_owners_ = 0;
  v22[1].__vftable = (std::__shared_weak_count_vtbl *)v14;
  CFTypeRef v48 = v22;
  if (SHIBYTE(v46) < 0)
  {
    operator delete(__dst[0]);
    long long v23 = v14 + 2;
    int v24 = SHIBYTE(v14[2].__r_.__value_.__r.__words[2]);
    if ((v24 & 0x80000000) == 0) {
      goto LABEL_19;
    }
  }
  else
  {
    long long v23 = v14 + 2;
    int v24 = SHIBYTE(v14[2].__r_.__value_.__r.__words[2]);
    if ((v24 & 0x80000000) == 0)
    {
LABEL_19:
      size_t size = v24;
      data = v23;
      goto LABEL_22;
    }
  }
  data = (std::string *)v14[2].__r_.__value_.__l.__data_;
  size_t size = v14[2].__r_.__value_.__l.__size_;
LABEL_22:
  long long v27 = memchr(data, 10, size);
  if (v27) {
    unint64_t v28 = (unint64_t)v27;
  }
  else {
    unint64_t v28 = (unint64_t)data + size;
  }
  if (v28 - (void)data != size)
  {
    xpc_object_t v29 = (unsigned __int8 *)(v28 + 1);
    if ((std::string *)(v28 + 1) != (std::string *)((char *)data + size))
    {
      unint64_t v30 = (char *)data + size + ~v28;
      do
      {
        int v31 = *v29;
        if (v31 != 10) {
          *(unsigned char *)v28++ = v31;
        }
        ++v29;
        --v30;
      }
      while (v30);
      LOBYTE(v24) = *((unsigned char *)&v14[2].__r_.__value_.__s + 23);
    }
  }
  if ((v24 & 0x80) == 0)
  {
    CFTypeRef v32 = (char *)v23 + v24;
    std::string::size_type v33 = v28 - (void)v23;
    if (v24 >= v28 - (unint64_t)v23) {
      goto LABEL_34;
    }
LABEL_49:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  std::string::pointer v38 = v14[2].__r_.__value_.__l.__data_;
  std::string::size_type v37 = v14[2].__r_.__value_.__l.__size_;
  CFTypeRef v32 = &v38[v37];
  std::string::size_type v33 = v28 - (void)v38;
  if (v37 < v28 - (unint64_t)v38) {
    goto LABEL_49;
  }
LABEL_34:
  if (&v32[-v28] == (char *)-1)
  {
    if ((v24 & 0x80) != 0)
    {
      std::string::pointer v43 = v14[2].__r_.__value_.__l.__data_;
      v14[2].__r_.__value_.__l.__size_ = v33;
      v43[v33] = 0;
      xpc_object_t v34 = v48;
      uint64_t v44 = v48;
      if (!v48) {
        goto LABEL_37;
      }
    }
    else
    {
      *((unsigned char *)&v14[2].__r_.__value_.__s + 23) = v33 & 0x7F;
      v23->__r_.__value_.__s.__data_[v33] = 0;
      xpc_object_t v34 = v48;
      uint64_t v44 = v48;
      if (!v48) {
        goto LABEL_37;
      }
    }
    goto LABEL_36;
  }
  std::string::__erase_external_with_move(v23, v33, (std::string::size_type)&v32[-v28]);
  xpc_object_t v34 = v48;
  uint64_t v44 = v48;
  if (v48) {
LABEL_36:
  }
    atomic_fetch_add_explicit(&v34->__shared_owners_, 1uLL, memory_order_relaxed);
LABEL_37:
  ctu::LogServer::log();
  if (v44 && !atomic_fetch_add(&v44->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
    std::__shared_weak_count::__release_weak(v44);
  }
  if (a1)
  {
    if (a1 == 1)
    {
      xpc_object_t v39 = qword_1EBBDD5D0;
      if (qword_1EBBDD5D0 && os_log_type_enabled((os_log_t)qword_1EBBDD5D0, OS_LOG_TYPE_DEBUG))
      {
        CFTypeRef v40 = (std::string::__raw *)&v47[2];
        if (SHIBYTE(v47[2].__r_.__value_.__r.__words[2]) < 0) {
          CFTypeRef v40 = (std::string::__raw *)v40->__words[0];
        }
        *(_DWORD *)std::string buf = 136315138;
        xpc_object_t v54 = v40;
        _os_log_debug_impl(&dword_1C5767000, v39, OS_LOG_TYPE_DEBUG, "%s", buf, 0xCu);
      }
    }
    else if (a1 == 3)
    {
      xpc_object_t v35 = qword_1EBBDD5D8;
      if (qword_1EBBDD5D8)
      {
        if (os_log_type_enabled((os_log_t)qword_1EBBDD5D8, OS_LOG_TYPE_DEFAULT))
        {
          CFTypeRef v36 = (std::string::__raw *)&v47[2];
          if (SHIBYTE(v47[2].__r_.__value_.__r.__words[2]) < 0) {
            CFTypeRef v36 = (std::string::__raw *)v36->__words[0];
          }
          *(_DWORD *)std::string buf = 136315138;
          xpc_object_t v54 = v36;
LABEL_63:
          _os_log_impl(&dword_1C5767000, v35, OS_LOG_TYPE_DEFAULT, "%s", buf, 0xCu);
        }
      }
    }
  }
  else
  {
    xpc_object_t v35 = qword_1EBBDD5C8;
    if (qword_1EBBDD5C8 && os_log_type_enabled((os_log_t)qword_1EBBDD5C8, OS_LOG_TYPE_DEFAULT))
    {
      xpc_object_t v41 = (std::string::__raw *)&v47[2];
      if (SHIBYTE(v47[2].__r_.__value_.__r.__words[2]) < 0) {
        xpc_object_t v41 = (std::string::__raw *)v41->__words[0];
      }
      *(_DWORD *)std::string buf = 136315138;
      xpc_object_t v54 = v41;
      goto LABEL_63;
    }
  }
  unsigned int v42 = v48;
  if (v48 && !atomic_fetch_add(&v48->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
    std::__shared_weak_count::__release_weak(v42);
  }
  MEMORY[0x1C8791070](v49);
  xpc_object_t v19 = v52;
  if (v52) {
    goto LABEL_68;
  }
}

void sub_1C58571B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  MEMORY[0x1C8791070](&a24);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100](v24 - 112);
  _Unwind_Resume(a1);
}

void sub_1C5857264(_Unwind_Exception *a1)
{
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100](v1 - 112);
  _Unwind_Resume(a1);
}

void sub_1C5857278()
{
  operator delete(v0);
  JUMPOUT(0x1C58572C0);
}

void sub_1C58572A4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  operator delete(v16);
  JUMPOUT(0x1C58572C0);
}

void std::__shared_ptr_pointer<ctu::LogMessage *,std::shared_ptr<ctu::LogMessage>::__shared_ptr_default_delete<ctu::LogMessage,ctu::LogMessage>,std::allocator<ctu::LogMessage>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t std::__shared_ptr_pointer<ctu::LogMessage *,std::shared_ptr<ctu::LogMessage>::__shared_ptr_default_delete<ctu::LogMessage,ctu::LogMessage>,std::allocator<ctu::LogMessage>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<ctu::LogMessage *,std::shared_ptr<ctu::LogMessage>::__shared_ptr_default_delete<ctu::LogMessage,ctu::LogMessage>,std::allocator<ctu::LogMessage>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x80000001C59A0E64) {
    return a1 + 24;
  }
  if (((v3 & 0x80000001C59A0E64 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000001C59A0E64)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001C59A0E64 & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 24;
  }
  return 0;
}

void abm::debug::handleDebugPrintBinary(uint64_t a1, int a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  long long v5 = (void *)_MergedGlobals_9;
  if (!_MergedGlobals_9) {
    return;
  }
  xpc_object_t v7 = *(std::__shared_weak_count **)(_MergedGlobals_9 + 8);
  if (!v7) {
    return;
  }
  long long v11 = std::__shared_weak_count::lock(v7);
  xpc_object_t v39 = v11;
  if (!v11) {
    return;
  }
  if (!*v5)
  {
    long long v23 = v11;
LABEL_34:
    if (!atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
    return;
  }
  unint64_t v37 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v12 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v12 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v36[1] = v12;
  v36[2] = v12;
  v36[0] = v12;
  ctu::LogMessageBuffer::LogMessageBuffer((ctu::LogMessageBuffer *)v36);
  uint64_t v13 = MEMORY[0x1C8791660](v36, a1);
  MEMORY[0x1C8791660](v13, " (");
  uint64_t v14 = ctu::operator<<();
  uint64_t v15 = MEMORY[0x1C8791660](v14, ") ");
  uint64_t v16 = MEMORY[0x1C8791660](v15, a3);
  MEMORY[0x1C8791660](v16, "\n");
  __p[1] = (void *)0xAAAAAAAAAAAAAAAALL;
  uint64_t v35 = 0xAAAAAAAAAAAAAALL;
  __p[0] = (void *)0xAAAAAAAAAAAAAA00;
  ctu::assign();
  uint64_t v17 = (ctu::Clock *)MEMORY[0x1C8791670](v36, __p);
  ctu::Clock::now_in_nanoseconds(v17);
  uint64_t v18 = (std::__shared_weak_count_vtbl *)operator new(0x60uLL);
  xpc_object_t v19 = abm::debug::kLogDomainMap[a2];
  size_t v20 = strlen(v19);
  if (v20 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v21 = (void *)v20;
  if (v20 >= 0x17)
  {
    uint64_t v24 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v20 | 7) != 0x17) {
      uint64_t v24 = v20 | 7;
    }
    uint64_t v25 = v24 + 1;
    long long v22 = (void **)operator new(v24 + 1);
    __dst[1] = v21;
    unint64_t v31 = v25 | 0x8000000000000000;
    __dst[0] = v22;
    goto LABEL_13;
  }
  HIBYTE(v31) = v20;
  long long v22 = __dst;
  if (v20) {
LABEL_13:
  }
    memmove(v22, v19, (size_t)v21);
  *((unsigned char *)v21 + (void)v22) = 0;
  MEMORY[0x1C8791030](v36);
  ctu::LogMessageBuffer::takeMetadata((ctu::LogMessageBuffer *)v36);
  ctu::LogMessage::LogMessage();
  CFTypeRef v32 = v18;
  xpc_object_t v26 = (std::__shared_weak_count *)operator new(0x20uLL);
  v26->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20F7C40;
  v26->__shared_owners_ = 0;
  v26->__shared_weak_owners_ = 0;
  v26[1].__vftable = v18;
  std::string::size_type v33 = v26;
  if (SHIBYTE(v31) < 0) {
    operator delete(__dst[0]);
  }
  atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
  ctu::LogServer::log();
  if (v26 && !atomic_fetch_add(&v26->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
    std::__shared_weak_count::__release_weak(v26);
  }
  if (a2)
  {
    if (a2 == 1)
    {
      long long v27 = qword_1EBBDD5D0;
      if (qword_1EBBDD5D0)
      {
        if (os_log_type_enabled((os_log_t)qword_1EBBDD5D0, OS_LOG_TYPE_DEBUG))
        {
          unint64_t v28 = __p;
          if (v35 < 0) {
            unint64_t v28 = (void **)__p[0];
          }
          goto LABEL_39;
        }
      }
    }
  }
  else
  {
    long long v27 = qword_1EBBDD5C8;
    if (qword_1EBBDD5C8 && os_log_type_enabled((os_log_t)qword_1EBBDD5C8, OS_LOG_TYPE_DEBUG))
    {
      unint64_t v28 = __p;
      if (v35 < 0) {
        unint64_t v28 = (void **)__p[0];
      }
LABEL_39:
      *(_DWORD *)std::string buf = 67109634;
      int v41 = a5;
      __int16 v42 = 2080;
      uint64_t v43 = a3;
      __int16 v44 = 2080;
      CFAllocatorRef v45 = v28;
      _os_log_debug_impl(&dword_1C5767000, v27, OS_LOG_TYPE_DEBUG, "(%d) %s: %s", buf, 0x1Cu);
      xpc_object_t v29 = v33;
      if (!v33) {
        goto LABEL_31;
      }
      goto LABEL_29;
    }
  }
  xpc_object_t v29 = v33;
  if (!v33) {
    goto LABEL_31;
  }
LABEL_29:
  if (!atomic_fetch_add(&v29->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
    std::__shared_weak_count::__release_weak(v29);
  }
LABEL_31:
  if (SHIBYTE(v35) < 0) {
    operator delete(__p[0]);
  }
  MEMORY[0x1C8791070](v36);
  long long v23 = v39;
  if (v39) {
    goto LABEL_34;
  }
}

void sub_1C5857820(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  if (a24 < 0)
  {
    operator delete(__p);
    MEMORY[0x1C8791070](&a25);
    std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a33);
    _Unwind_Resume(a1);
  }
  MEMORY[0x1C8791070](&a25);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a33);
  _Unwind_Resume(a1);
}

void abm::debug::handleDebugPrintBBUHelper(abm::debug *this, void *a2, uint64_t a3, const char *a4, ...)
{
  va_start(va, a4);
  abm::debug::handleDebugPrint(3, "", (uint64_t)"%s", (uint64_t)va);
}

uint64_t support::fs::toString@<X0>(uint64_t result@<X0>, char *a2@<X8>)
{
  if (result == 1)
  {
    a2[23] = 9;
    strcpy(a2, "_wireless");
  }
  else if (result)
  {
    a2[23] = 0;
    *a2 = 0;
  }
  else
  {
    a2[23] = 6;
    strcpy(a2, "mobile");
  }
  return result;
}

uint64_t support::fs::updateOwner(const char *a1, uint64_t a2, uint64_t a3)
{
  long long v5 = a1;
  v6.tv_sec = 0xAAAAAAAAAAAAAAAALL;
  v6.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
  *(timespec *)&__dst.st_blkstd::string::size_type size = v6;
  *(timespec *)__dst.st_qspare = v6;
  __dst.st_birthtimespec = v6;
  *(timespec *)&__dst.st_std::string::size_type size = v6;
  __dst.st_mtimespec = v6;
  __dst.st_ctimespec = v6;
  *(timespec *)&__dst.st_uid = v6;
  __dst.st_atimespec = v6;
  *(timespec *)&__dst.st_dev = v6;
  if (a1[23] < 0) {
    a1 = *(const char **)a1;
  }
  if (!stat(a1, &__dst))
  {
    uint64_t v17 = v5[23] >= 0 ? v5 : *(const char **)v5;
    uint64_t v18 = opendir(v17);
    if (v18)
    {
      xpc_object_t v19 = v18;
      size_t v20 = readdir(v18);
      closedir(v19);
      if (v20)
      {
        uint64_t v61 = 0;
        CFTypeRef v62 = 0;
        uint64_t v63 = 0;
        support::fs::readDir(v5, (uint64_t)&v61);
        uint64_t v21 = (char *)v61;
        uint64_t v57 = v62;
        if (v61 == v62)
        {
          uint64_t updated = 0;
          if (v61) {
            goto LABEL_105;
          }
          return updated;
        }
        long long v22 = (const std::string::value_type **)((char *)v61 + 24);
        while (1)
        {
          memset(&v60, 170, sizeof(v60));
          if (*((char *)v22 - 1) < 0)
          {
            std::string::__init_copy_ctor_external(&v60, *(v22 - 3), (std::string::size_type)*(v22 - 2));
          }
          else
          {
            long long v24 = *(_OWORD *)(v22 - 3);
            v60.__r_.__value_.__r.__words[2] = (std::string::size_type)*(v22 - 1);
            *(_OWORD *)&v60.__r_.__value_.__l.__data_ = v24;
          }
          memset(&__p, 170, sizeof(__p));
          int v25 = v5[23];
          if (v25 >= 0) {
            size_t v26 = *((unsigned __int8 *)v5 + 23);
          }
          else {
            size_t v26 = *((void *)v5 + 1);
          }
          unint64_t v27 = v26 + 1;
          memset(&__dst, 170, 24);
          if (v26 + 1 > 0x7FFFFFFFFFFFFFF7) {
            std::string::__throw_length_error[abi:ne180100]();
          }
          if (v27 >= 0x17)
          {
            uint64_t v29 = (v27 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v27 | 7) != 0x17) {
              uint64_t v29 = v27 | 7;
            }
            uint64_t v30 = v29 + 1;
            p_dst = (char *)operator new(v29 + 1);
            __dst.st_ino = v26 + 1;
            *(void *)&__dst.st_uid = v30 | 0x8000000000000000;
            *(void *)&__dst.st_dev = p_dst;
          }
          else
          {
            memset(&__dst, 0, 24);
            p_dst = (char *)&__dst;
            HIBYTE(__dst.st_gid) = v26 + 1;
            if (!v26) {
              goto LABEL_47;
            }
          }
          if (v25 >= 0) {
            unint64_t v31 = v5;
          }
          else {
            unint64_t v31 = *(const char **)v5;
          }
          memmove(p_dst, v31, v26);
LABEL_47:
          *(_WORD *)&p_dst[v26] = 47;
          if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            CFTypeRef v32 = &v60;
          }
          else {
            CFTypeRef v32 = (std::string *)v60.__r_.__value_.__r.__words[0];
          }
          if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type size = HIBYTE(v60.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type size = v60.__r_.__value_.__l.__size_;
          }
          xpc_object_t v34 = std::string::append((std::string *)&__dst, (const std::string::value_type *)v32, size);
          long long v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
          __p.__r_.__value_.__r.__words[2] = v34->__r_.__value_.__r.__words[2];
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v35;
          v34->__r_.__value_.__l.__size_ = 0;
          v34->__r_.__value_.__r.__words[2] = 0;
          v34->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(__dst.st_gid) < 0) {
            operator delete(*(void **)&__dst.st_dev);
          }
          std::string::size_type v36 = HIBYTE(v60.__r_.__value_.__r.__words[2]);
          if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            std::string::size_type v36 = v60.__r_.__value_.__l.__size_;
          }
          if (v36 == 2)
          {
            std::string::pointer v38 = &v60;
            if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              std::string::pointer v38 = (std::string *)v60.__r_.__value_.__r.__words[0];
            }
            if (LOWORD(v38->__r_.__value_.__l.__data_) == 11822)
            {
LABEL_70:
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                p_p = &__p;
              }
              else {
                p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
              }
              size_t v42 = strlen((const char *)p_p);
              if (v42 > 0x7FFFFFFFFFFFFFF7) {
                std::string::__throw_length_error[abi:ne180100]();
              }
              __darwin_ino64_t v43 = v42;
              if (v42 >= 0x17)
              {
                uint64_t v45 = (v42 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v42 | 7) != 0x17) {
                  uint64_t v45 = v42 | 7;
                }
                uint64_t v46 = v45 + 1;
                __int16 v44 = operator new(v45 + 1);
                __dst.st_ino = v43;
                *(void *)&__dst.st_uid = v46 | 0x8000000000000000;
                *(void *)&__dst.st_dev = v44;
              }
              else
              {
                HIBYTE(__dst.st_gid) = v42;
                __int16 v44 = &__dst;
                if (!v42)
                {
LABEL_81:
                  v44[v43] = 0;
                  int st_gid_high = SHIBYTE(__dst.st_gid);
                  CFTypeRef v48 = *(void **)&__dst.st_dev;
                  if ((__dst.st_gid & 0x80000000) == 0) {
                    xpc_object_t v49 = &__dst;
                  }
                  else {
                    xpc_object_t v49 = *(stat **)&__dst.st_dev;
                  }
                  uint64_t updated = chown((const char *)v49, a2, a3) == 0;
                  if (st_gid_high < 0)
                  {
                    unint64_t v50 = v48;
LABEL_86:
                    operator delete(v50);
                    goto LABEL_87;
                  }
                  goto LABEL_87;
                }
              }
              memmove(v44, p_p, v43);
              goto LABEL_81;
            }
          }
          else if (v36 == 1)
          {
            unint64_t v37 = &v60;
            if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              unint64_t v37 = (std::string *)v60.__r_.__value_.__r.__words[0];
            }
            if (v37->__r_.__value_.__s.__data_[0] == 46) {
              goto LABEL_70;
            }
          }
          v39.tv_sec = 0xAAAAAAAAAAAAAAAALL;
          v39.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
          *(timespec *)&__dst.st_blkstd::string::size_type size = v39;
          *(timespec *)__dst.st_qspare = v39;
          __dst.st_birthtimespec = v39;
          *(timespec *)&__dst.st_std::string::size_type size = v39;
          __dst.st_mtimespec = v39;
          __dst.st_ctimespec = v39;
          *(timespec *)&__dst.st_uid = v39;
          __dst.st_atimespec = v39;
          *(timespec *)&__dst.st_dev = v39;
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            CFTypeRef v40 = &__p;
          }
          else {
            CFTypeRef v40 = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          if (stat((const char *)v40, &__dst)) {
            goto LABEL_70;
          }
          CFTypeRef v51 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
              ? &__p
              : (std::string *)__p.__r_.__value_.__r.__words[0];
          uint64_t v52 = opendir((const char *)v51);
          uint64_t v53 = v52;
          if (!v52) {
            goto LABEL_70;
          }
          xpc_object_t v54 = readdir(v52);
          closedir(v53);
          if (!v54) {
            goto LABEL_70;
          }
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            std::string::__init_copy_ctor_external(&v58, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
          }
          else {
            std::string v58 = __p;
          }
          uint64_t updated = support::fs::updateOwner(&v58, a2, a3);
          if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
          {
            unint64_t v50 = (void *)v58.__r_.__value_.__r.__words[0];
            goto LABEL_86;
          }
LABEL_87:
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(__p.__r_.__value_.__l.__data_);
            if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
LABEL_91:
            }
              operator delete(v60.__r_.__value_.__l.__data_);
          }
          else if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
          {
            goto LABEL_91;
          }
          if (v22 == (const std::string::value_type **)v57) {
            char v23 = 0;
          }
          else {
            char v23 = updated;
          }
          v22 += 3;
          if ((v23 & 1) == 0)
          {
            uint64_t v21 = (char *)v61;
            if (!v61) {
              return updated;
            }
LABEL_105:
            uint64_t v55 = (void **)v62;
            uint64_t v16 = v21;
            if (v62 != v21)
            {
              do
              {
                if (*((char *)v55 - 1) < 0) {
                  operator delete(*(v55 - 3));
                }
                v55 -= 3;
              }
              while (v55 != (void **)v21);
              uint64_t v16 = v61;
            }
            CFTypeRef v62 = v21;
LABEL_112:
            operator delete(v16);
            return updated;
          }
        }
      }
    }
  }
  if (v5[23] < 0) {
    long long v5 = *(const char **)v5;
  }
  size_t v7 = strlen(v5);
  if (v7 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  __darwin_ino64_t v8 = v7;
  if (v7 >= 0x17)
  {
    uint64_t v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17) {
      uint64_t v10 = v7 | 7;
    }
    uint64_t v11 = v10 + 1;
    xpc_object_t v9 = operator new(v10 + 1);
    __dst.st_ino = v8;
    *(void *)&__dst.st_uid = v11 | 0x8000000000000000;
    *(void *)&__dst.st_dev = v9;
    goto LABEL_13;
  }
  HIBYTE(__dst.st_gid) = v7;
  xpc_object_t v9 = &__dst;
  if (v7) {
LABEL_13:
  }
    memmove(v9, v5, v8);
  *((unsigned char *)v9 + v8) = 0;
  int v12 = SHIBYTE(__dst.st_gid);
  uint64_t v13 = *(void **)&__dst.st_dev;
  if ((__dst.st_gid & 0x80000000) == 0) {
    uint64_t v14 = &__dst;
  }
  else {
    uint64_t v14 = *(stat **)&__dst.st_dev;
  }
  uint64_t updated = chown((const char *)v14, a2, a3) == 0;
  if (v12 < 0)
  {
    uint64_t v16 = v13;
    goto LABEL_112;
  }
  return updated;
}

void sub_1C5857F00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31)
{
}

void sub_1C5857F30()
{
}

DIR *support::fs::isDir(const char *a1)
{
  uint64_t v1 = a1;
  v2.tv_sec = 0xAAAAAAAAAAAAAAAALL;
  v2.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
  *(timespec *)&v7.st_blkstd::string::size_type size = v2;
  *(timespec *)v7.st_qspare = v2;
  v7.st_birthtimespec = v2;
  *(timespec *)&v7.st_std::string::size_type size = v2;
  v7.st_mtimespec = v2;
  v7.st_ctimespec = v2;
  *(timespec *)&v7.st_uid = v2;
  v7.st_atimespec = v2;
  *(timespec *)&v7.st_dev = v2;
  if (a1[23] < 0) {
    a1 = *(const char **)a1;
  }
  if (stat(a1, &v7)) {
    return 0;
  }
  if (v1[23] >= 0) {
    xpc_object_t v4 = v1;
  }
  else {
    xpc_object_t v4 = *(const char **)v1;
  }
  uint64_t result = opendir(v4);
  if (result)
  {
    long long v5 = result;
    timespec v6 = readdir(result);
    closedir(v5);
    return (DIR *)(v6 != 0);
  }
  return result;
}

BOOL support::fs::chown(const char *a1, uid_t a2, gid_t a3)
{
  if (a1[23] < 0) {
    a1 = *(const char **)a1;
  }
  return chown(a1, a2, a3) == 0;
}

DIR *support::fs::readDir(const char *a1, uint64_t a2)
{
  if (a1[23] < 0) {
    a1 = *(const char **)a1;
  }
  uint64_t result = opendir(a1);
  if (result)
  {
    xpc_object_t v4 = result;
    long long v5 = readdir(result);
    if (v5)
    {
      timespec v6 = v5;
      do
      {
        memset(__dst, 170, sizeof(__dst));
        size_t d_namlen = v6->d_namlen;
        if (d_namlen >= 0x17)
        {
          if ((d_namlen | 7) == 0x17) {
            uint64_t v11 = ((unsigned __int16)d_namlen & 0xFFF8) + 8;
          }
          else {
            uint64_t v11 = d_namlen | 7;
          }
          __darwin_ino64_t v8 = operator new(v11 + 1);
          *(void *)&__dst[8] = d_namlen;
          *(void *)&__dst[16] = v11 - 0x7FFFFFFFFFFFFFFFLL;
          *(void *)stat __dst = v8;
        }
        else
        {
          __dst[23] = v6->d_namlen;
          __darwin_ino64_t v8 = __dst;
          if (!d_namlen)
          {
            __dst[d_namlen] = 0;
            xpc_object_t v9 = *(std::string **)(a2 + 8);
            if ((unint64_t)v9 < *(void *)(a2 + 16)) {
              goto LABEL_10;
            }
            goto LABEL_17;
          }
        }
        memmove(v8, v6->d_name, d_namlen);
        v8[d_namlen] = 0;
        xpc_object_t v9 = *(std::string **)(a2 + 8);
        if ((unint64_t)v9 < *(void *)(a2 + 16))
        {
LABEL_10:
          if ((__dst[23] & 0x80000000) != 0)
          {
            std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)__dst, *(std::string::size_type *)&__dst[8]);
          }
          else
          {
            long long v10 = *(_OWORD *)__dst;
            v9->__r_.__value_.__r.__words[2] = *(void *)&__dst[16];
            *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v10;
          }
          *(void *)(a2 + 8) = v9 + 1;
          *(void *)(a2 + 8) = v9 + 1;
          if ((__dst[23] & 0x80000000) == 0) {
            goto LABEL_6;
          }
LABEL_21:
          operator delete(*(void **)__dst);
          goto LABEL_6;
        }
LABEL_17:
        *(void *)(a2 + 8) = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)a2, (uint64_t)__dst);
        if ((__dst[23] & 0x80000000) != 0) {
          goto LABEL_21;
        }
LABEL_6:
        timespec v6 = readdir(v4);
      }
      while (v6);
    }
    return (DIR *)closedir(v4);
  }
  return result;
}

void sub_1C58581D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  *(void *)(v15 + 8) = v16;
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t support::fs::getUidGid(int a1, uid_t *a2, gid_t *a3)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  memset(__p, 170, sizeof(__p));
  if (a1 == 1)
  {
    HIBYTE(__p[2]) = 9;
    strcpy((char *)__p, "_wireless");
    long long v5 = getpwnam((const char *)__p);
    if (v5) {
      goto LABEL_4;
    }
LABEL_6:
    stat v7 = GetOsLogContext()[1];
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 136315138;
      long long v10 = __p;
      _os_log_error_impl(&dword_1C5767000, v7, OS_LOG_TYPE_ERROR, "Getting uid and gid: failed to get passwd for %s", buf, 0xCu);
      if (SHIBYTE(__p[2]) < 0) {
        operator delete(__p[0]);
      }
    }
    return 0;
  }
  if (!a1)
  {
    HIBYTE(__p[2]) = 6;
    strcpy((char *)__p, "mobile");
    long long v5 = getpwnam((const char *)__p);
    if (v5)
    {
LABEL_4:
      *a2 = v5->pw_uid;
      *a3 = v5->pw_gid;
      return 1;
    }
    goto LABEL_6;
  }
  return 0;
}

BOOL support::fs::writeToCompletion(support::fs *this, char *__buf, size_t __nbyte)
{
  int v4 = (int)this;
  do
  {
    size_t v5 = __nbyte;
    if (!__nbyte) {
      break;
    }
    ssize_t v6 = write(v4, __buf, __nbyte);
    __nbyte = v5 - v6;
    __buf += v6;
  }
  while ((v6 & 0x8000000000000000) == 0);
  return v5 == 0;
}

BOOL support::fs::writeToCompletion(FILE *__stream, __sFILE *__ptr, size_t __nitems)
{
  while (1)
  {
    size_t v5 = __nitems;
    if (!__nitems) {
      break;
    }
    size_t v6 = fwrite(__ptr, 1uLL, __nitems, __stream);
    __nitems = v5 - v6;
    __ptr = (__sFILE *)((char *)__ptr + v6);
    if (!v6) {
      return v5 == 0;
    }
  }
  fflush(__stream);
  return 1;
}

uint64_t support::fs::openFile(const char *a1, int a2, unsigned int a3)
{
  if (a1[23] < 0) {
    a1 = *(const char **)a1;
  }
  return open(a1, a2, a3);
}

BOOL support::fs::closeFile(support::fs *this)
{
  int v1 = (int)this;
  do
    int v2 = close(v1);
  while (v2 && *__error() == 4);
  return v2 == 0;
}

BOOL support::fs::copyFile(const char *a1, const char *a2, int a3)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  if (a1[23] >= 0) {
    size_t v6 = a1;
  }
  else {
    size_t v6 = *(const char **)a1;
  }
  size_t v7 = strlen(v6);
  if (v7 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v8 = v7;
  if (v7 >= 0x17)
  {
    uint64_t v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17) {
      uint64_t v10 = v7 | 7;
    }
    uint64_t v11 = v10 + 1;
    xpc_object_t v9 = operator new(v10 + 1);
    *(void *)&__dst[8] = v8;
    *(void *)&__dst[16] = v11 | 0x8000000000000000;
    *(void *)stat __dst = v9;
    goto LABEL_11;
  }
  __dst[23] = v7;
  xpc_object_t v9 = __dst;
  if (v7) {
LABEL_11:
  }
    memmove(v9, v6, v8);
  v9[v8] = 0;
  if (__dst[23] >= 0) {
    int v12 = __dst;
  }
  else {
    int v12 = *(const char **)__dst;
  }
  int v13 = open(v12, 0, 420);
  int v14 = v13;
  if ((__dst[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)__dst);
    if ((v14 & 0x80000000) == 0)
    {
LABEL_17:
      if (a2[23] >= 0) {
        uint64_t v15 = a2;
      }
      else {
        uint64_t v15 = *(const char **)a2;
      }
      size_t v16 = strlen(v15);
      if (v16 > 0x7FFFFFFFFFFFFFF7) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      size_t v17 = v16;
      if (v16 >= 0x17)
      {
        uint64_t v21 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v16 | 7) != 0x17) {
          uint64_t v21 = v16 | 7;
        }
        uint64_t v22 = v21 + 1;
        uint64_t v18 = operator new(v21 + 1);
        *(void *)&__dst[8] = v17;
        *(void *)&__dst[16] = v22 | 0x8000000000000000;
        *(void *)stat __dst = v18;
      }
      else
      {
        __dst[23] = v16;
        uint64_t v18 = __dst;
        if (!v16)
        {
LABEL_31:
          v18[v17] = 0;
          if (__dst[23] >= 0) {
            char v23 = __dst;
          }
          else {
            char v23 = *(const char **)__dst;
          }
          int v24 = open(v23, 1541, 420);
          int v25 = v24;
          if ((__dst[23] & 0x80000000) != 0)
          {
            operator delete(*(void **)__dst);
            if ((v25 & 0x80000000) == 0) {
              goto LABEL_36;
            }
          }
          else if ((v24 & 0x80000000) == 0)
          {
LABEL_36:
            memset(__dst, 170, sizeof(__dst));
            ssize_t v26 = read(v14, __dst, 0x400uLL);
            if (v26 < 1)
            {
LABEL_42:
              BOOL v20 = v26 == 0;
              if (!v26 && a3)
              {
                *(void *)&long long v29 = 0xAAAAAAAAAAAAAAAALL;
                *((void *)&v29 + 1) = 0xAAAAAAAAAAAAAAAALL;
                *(_OWORD *)&__dst[112] = v29;
                *(_OWORD *)&__dst[128] = v29;
                *(_OWORD *)&__dst[80] = v29;
                *(_OWORD *)&__dst[96] = v29;
                *(_OWORD *)&__dst[48] = v29;
                *(_OWORD *)&__dst[64] = v29;
                *(_OWORD *)&__dst[16] = v29;
                *(_OWORD *)&__dst[32] = v29;
                *(_OWORD *)stat __dst = v29;
                if (fstat(v14, (stat *)__dst)) {
                  BOOL v20 = 0;
                }
                else {
                  BOOL v20 = fchmod(v25, *(mode_t *)&__dst[4]) == 0;
                }
              }
            }
            else
            {
              unint64_t v27 = __dst;
              do
              {
                while (!v26)
                {
                  memset(__dst, 170, sizeof(__dst));
                  ssize_t v26 = read(v14, __dst, 0x400uLL);
                  unint64_t v27 = __dst;
                  if (v26 <= 0) {
                    goto LABEL_42;
                  }
                }
                ssize_t v28 = write(v25, v27, v26);
                v26 -= v28;
                v27 += v28;
              }
              while ((v28 & 0x8000000000000000) == 0);
              BOOL v20 = 0;
            }
            while (close(v25) && *__error() == 4)
              ;
            goto LABEL_52;
          }
          uint64_t v30 = GetOsLogContext()[1];
          if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
          {
            if (a2[23] >= 0) {
              std::string::size_type v33 = a2;
            }
            else {
              std::string::size_type v33 = *(const char **)a2;
            }
            *(_DWORD *)stat __dst = 136315138;
            *(void *)&__dst[4] = v33;
            _os_log_error_impl(&dword_1C5767000, v30, OS_LOG_TYPE_ERROR, "Failed to open the destination file(%s)", __dst, 0xCu);
          }
          BOOL v20 = 0;
LABEL_52:
          while (close(v14) && *__error() == 4)
            ;
          return v20;
        }
      }
      memmove(v18, v15, v17);
      goto LABEL_31;
    }
  }
  else if ((v13 & 0x80000000) == 0)
  {
    goto LABEL_17;
  }
  xpc_object_t v19 = GetOsLogContext()[1];
  if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
  {
    if (a1[23] >= 0) {
      CFTypeRef v32 = a1;
    }
    else {
      CFTypeRef v32 = *(const char **)a1;
    }
    *(_DWORD *)stat __dst = 136315138;
    *(void *)&__dst[4] = v32;
    _os_log_error_impl(&dword_1C5767000, v19, OS_LOG_TYPE_ERROR, "Failed to open the source file(%s)", __dst, 0xCu);
  }
  return 0;
}

void sub_1C585889C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

BOOL support::fs::loadFile(uint64_t a1, uint64_t a2)
{
  __b[89] = *MEMORY[0x1E4F143B8];
  memset(__b, 170, 0x240uLL);
  std::ifstream::basic_ifstream(__b);
  if (!__b[17]
    || (std::istream::tellg(), std::istream::seekg(), std::istream::tellg(), unint64_t v3 = __b[88], std::istream::seekg(), !v3)
    || *(_DWORD *)((char *)&__b[4] + *(void *)(__b[0] - 24)))
  {
    BOOL v4 = 0;
    goto LABEL_5;
  }
  size_t v7 = *(char **)a2;
  size_t v6 = *(char **)(a2 + 8);
  unint64_t v8 = (unint64_t)&v6[-*(void *)a2];
  unint64_t v9 = v3 - v8;
  if (v3 <= v8)
  {
    if (v3 < v8) {
      *(void *)(a2 + 8) = &v7[v3];
    }
    goto LABEL_36;
  }
  uint64_t v10 = *(void *)(a2 + 16);
  if (v10 - (uint64_t)v6 < v9)
  {
    if ((v3 & 0x8000000000000000) != 0) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v11 = v10 - (void)v7;
    uint64_t v12 = 2 * v11;
    if (2 * v11 <= v3) {
      uint64_t v12 = v3;
    }
    if (v11 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v13 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v13 = v12;
    }
    int v14 = (char *)operator new(v13);
    uint64_t v15 = &v14[v8];
    size_t v16 = &v14[v13];
    bzero(&v14[v8], v3 - v8);
    if (v6 == v7) {
      goto LABEL_34;
    }
    if (v8 >= 8 && (unint64_t)(v7 - v14) >= 0x20)
    {
      if (v8 < 0x20)
      {
        unint64_t v17 = 0;
        goto LABEL_26;
      }
      unint64_t v17 = v8 & 0xFFFFFFFFFFFFFFE0;
      uint64_t v18 = v6 - 16;
      xpc_object_t v19 = &v14[v6 - 16 - v7];
      unint64_t v20 = v8 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        long long v21 = *(_OWORD *)v18;
        *((_OWORD *)v19 - 1) = *((_OWORD *)v18 - 1);
        *(_OWORD *)xpc_object_t v19 = v21;
        v19 -= 32;
        v18 -= 32;
        v20 -= 32;
      }
      while (v20);
      if (v8 == v17) {
        goto LABEL_33;
      }
      if ((v8 & 0x18) != 0)
      {
LABEL_26:
        v15 -= v8 & 0xFFFFFFFFFFFFFFF8;
        uint64_t v22 = &v6[-v17 - 8];
        char v23 = (char *)(v22 - v7);
        unint64_t v24 = v17 - (v8 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          uint64_t v25 = *(void *)v22;
          v22 -= 8;
          *(void *)&v23[(void)v14] = v25;
          v23 -= 8;
          v24 += 8;
        }
        while (v24);
        v6 -= v8 & 0xFFFFFFFFFFFFFFF8;
        if (v8 == (v8 & 0xFFFFFFFFFFFFFFF8)) {
          goto LABEL_33;
        }
        goto LABEL_31;
      }
      v15 -= v17;
      v6 -= v17;
    }
LABEL_31:
    ssize_t v26 = v15 - 1;
    do
    {
      char v27 = *--v6;
      *v26-- = v27;
    }
    while (v6 != v7);
LABEL_33:
    size_t v6 = v7;
    uint64_t v15 = v14;
LABEL_34:
    *(void *)a2 = v15;
    *(void *)(a2 + 8) = &v14[v3];
    *(void *)(a2 + 16) = v16;
    if (v6) {
      operator delete(v6);
    }
    goto LABEL_36;
  }
  bzero(*(void **)(a2 + 8), v3 - v8);
  *(void *)(a2 + 8) = &v6[v9];
LABEL_36:
  std::istream::read();
  BOOL v4 = __b[1] == (int)v3;
  if (!std::filebuf::close()) {
    std::ios_base::clear((std::ios_base *)((char *)__b + *(void *)(__b[0] - 24)), *(_DWORD *)((char *)&__b[4] + *(void *)(__b[0] - 24)) | 4);
  }
LABEL_5:
  __b[0] = *MEMORY[0x1E4FBA3F8];
  *(uint64_t *)((char *)__b + *(void *)(__b[0] - 24)) = *(void *)(MEMORY[0x1E4FBA3F8] + 24);
  MEMORY[0x1C8791D30](&__b[2]);
  std::istream::~istream();
  MEMORY[0x1C8791FB0](&__b[53]);
  return v4;
}

void sub_1C5858C68(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::ifstream::~ifstream((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *std::ifstream::basic_ifstream(uint64_t *a1)
{
  uint64_t v2 = MEMORY[0x1E4FBA460] + 64;
  a1[53] = MEMORY[0x1E4FBA460] + 64;
  unint64_t v3 = a1 + 2;
  uint64_t v4 = *(void *)(MEMORY[0x1E4FBA3F8] + 16);
  uint64_t v5 = *(void *)(MEMORY[0x1E4FBA3F8] + 8);
  *a1 = v5;
  *(uint64_t *)((char *)a1 + *(void *)(v5 - 24)) = v4;
  a1[1] = 0;
  size_t v6 = (std::ios_base *)((char *)a1 + *(void *)(*a1 - 24));
  std::ios_base::init(v6, a1 + 2);
  uint64_t v7 = MEMORY[0x1E4FBA460] + 24;
  v6[1].__vftable = 0;
  v6[1].__fmtflags_ = -1;
  *a1 = v7;
  a1[53] = v2;
  MEMORY[0x1C8791D20](v3);
  if (!std::filebuf::open()) {
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) | 4);
  }
  return a1;
}

void sub_1C5858E14(_Unwind_Exception *a1)
{
  std::istream::~istream();
  MEMORY[0x1C8791FB0](v1);
  _Unwind_Resume(a1);
}

BOOL support::fs::getFileSize(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 136);
  if (v2)
  {
    std::istream::tellg();
    std::istream::seekg();
    std::istream::tellg();
    *a2 = v5;
    std::istream::seekg();
  }
  return v2 != 0;
}

{
  uint64_t v2;
  BOOL v4;
  uint64_t v6[90];

  v6[89] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(unsigned __int8 *)(a1 + 23);
  if ((v2 & 0x80u) != 0) {
    uint64_t v2 = *(void *)(a1 + 8);
  }
  if (!v2) {
    return 0;
  }
  memset(v6, 170, 0x240uLL);
  std::ifstream::basic_ifstream(v6);
  uint64_t v4 = v6[17] != 0;
  if (v6[17])
  {
    std::istream::tellg();
    std::istream::seekg();
    std::istream::tellg();
    *a2 = v6[88];
    std::istream::seekg();
    if (!std::filebuf::close()) {
      std::ios_base::clear((std::ios_base *)((char *)v6 + *(void *)(v6[0] - 24)), *(_DWORD *)((char *)&v6[4] + *(void *)(v6[0] - 24)) | 4);
    }
  }
  v6[0] = *MEMORY[0x1E4FBA3F8];
  *(uint64_t *)((char *)v6 + *(void *)(v6[0] - 24)) = *(void *)(MEMORY[0x1E4FBA3F8] + 24);
  MEMORY[0x1C8791D30](&v6[2]);
  std::istream::~istream();
  MEMORY[0x1C8791FB0](&v6[53]);
  return v4;
}

void *std::ifstream::~ifstream(void *a1)
{
  uint64_t v2 = MEMORY[0x1E4FBA3F8];
  uint64_t v3 = *MEMORY[0x1E4FBA3F8];
  *a1 = *MEMORY[0x1E4FBA3F8];
  *(void *)((char *)a1 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  MEMORY[0x1C8791D30](a1 + 2);
  std::istream::~istream();
  MEMORY[0x1C8791FB0](a1 + 53);
  return a1;
}

uint64_t support::fs::loadFile(const char *a1, uint64_t a2)
{
  if (a1[23] < 0) {
    a1 = *(const char **)a1;
  }
  uint64_t v3 = fopen(a1, "rb");
  if (v3)
  {
    uint64_t v4 = v3;
    fseek(v3, 0, 2);
    unint64_t v5 = MEMORY[0x1C87924D0](v4);
    if (v5 != -1)
    {
      size_t v6 = v5;
      unint64_t v8 = *(char **)a2;
      uint64_t v7 = *(char **)(a2 + 8);
      unint64_t v9 = (unint64_t)&v7[-*(void *)a2];
      size_t v10 = v5 - v9;
      if (v5 <= v9)
      {
        if (v5 < v9) {
          *(void *)(a2 + 8) = &v8[v5];
        }
        goto LABEL_36;
      }
      uint64_t v11 = *(void *)(a2 + 16);
      if (v11 - (uint64_t)v7 >= v10)
      {
        bzero(*(void **)(a2 + 8), v10);
        *(void *)(a2 + 8) = &v7[v10];
LABEL_36:
        rewind(v4);
        uint64_t v30 = *(char **)a2;
        uint64_t v19 = 1;
        fread(v30, v6, 1uLL, v4);
        fclose(v4);
        return v19;
      }
      if ((v5 & 0x8000000000000000) != 0) {
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v12 = v11 - (void)v8;
      uint64_t v13 = 2 * v12;
      if (2 * v12 <= v5) {
        uint64_t v13 = v5;
      }
      if (v12 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v14 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v14 = v13;
      }
      uint64_t v15 = (char *)operator new(v14);
      size_t v16 = &v15[v9];
      unint64_t v17 = &v15[v14];
      bzero(&v15[v9], v10);
      if (v7 == v8)
      {
LABEL_34:
        *(void *)a2 = v16;
        *(void *)(a2 + 8) = &v15[v6];
        *(void *)(a2 + 16) = v17;
        if (v7) {
          operator delete(v7);
        }
        goto LABEL_36;
      }
      if (v9 >= 8 && (unint64_t)(v8 - v15) >= 0x20)
      {
        if (v9 < 0x20)
        {
          unint64_t v18 = 0;
          goto LABEL_26;
        }
        unint64_t v18 = v9 & 0xFFFFFFFFFFFFFFE0;
        unint64_t v20 = v7 - 16;
        long long v21 = &v15[v7 - 16 - v8];
        unint64_t v22 = v9 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          long long v23 = *(_OWORD *)v20;
          *((_OWORD *)v21 - 1) = *((_OWORD *)v20 - 1);
          *(_OWORD *)long long v21 = v23;
          v21 -= 32;
          v20 -= 32;
          v22 -= 32;
        }
        while (v22);
        if (v9 == v18) {
          goto LABEL_33;
        }
        if ((v9 & 0x18) != 0)
        {
LABEL_26:
          v16 -= v9 & 0xFFFFFFFFFFFFFFF8;
          unint64_t v24 = &v7[-v18 - 8];
          uint64_t v25 = (char *)(v24 - v8);
          unint64_t v26 = v18 - (v9 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            uint64_t v27 = *(void *)v24;
            v24 -= 8;
            *(void *)&v25[(void)v15] = v27;
            v25 -= 8;
            v26 += 8;
          }
          while (v26);
          v7 -= v9 & 0xFFFFFFFFFFFFFFF8;
          if (v9 == (v9 & 0xFFFFFFFFFFFFFFF8)) {
            goto LABEL_33;
          }
          goto LABEL_31;
        }
        v16 -= v18;
        v7 -= v18;
      }
LABEL_31:
      ssize_t v28 = v16 - 1;
      do
      {
        char v29 = *--v7;
        *v28-- = v29;
      }
      while (v7 != v8);
LABEL_33:
      uint64_t v7 = v8;
      size_t v16 = v15;
      goto LABEL_34;
    }
  }
  return 0;
}

BOOL support::fs::fileExists(const char *a1)
{
  v1.tv_sec = 0xAAAAAAAAAAAAAAAALL;
  v1.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
  *(timespec *)&v3.st_blkstd::string::size_type size = v1;
  *(timespec *)v3.st_qspare = v1;
  v3.st_birthtimespec = v1;
  *(timespec *)&v3.st_std::string::size_type size = v1;
  v3.st_mtimespec = v1;
  v3.st_ctimespec = v1;
  *(timespec *)&v3.st_uid = v1;
  v3.st_atimespec = v1;
  *(timespec *)&v3.st_dev = v1;
  if (a1[23] < 0) {
    a1 = *(const char **)a1;
  }
  return stat(a1, &v3) == 0;
}

void support::fs::createUniqueFilename(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v201 = v4;
  long long v199 = v4;
  long long v200 = v4;
  *(_OWORD *)&v198[0].__locale_ = v4;
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]((uint64_t)v198, "^([/_\\-[:alnum:]]*)(.*)", 0);
  memset(&v197, 170, sizeof(v197));
  uint64_t v185 = a2;
  if (*(char *)(a1 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v197, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
  }
  else {
    std::string v197 = *(std::string *)a1;
  }
  unsigned int v5 = 0;
  size_t v6 = &v204[24];
  uint64_t v186 = a1;
  v194 = &v204[24];
  while (1)
  {
    v7.tv_sec = 0xAAAAAAAAAAAAAAAALL;
    v7.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
    *(timespec *)&v202.st_blksize_t size = v7;
    *(timespec *)v202.st_qspare = v7;
    v202.st_birthtimespec = v7;
    *(timespec *)&v202.st_size_t size = v7;
    v202.st_mtimespec = v7;
    v202.st_ctimespec = v7;
    *(timespec *)&v202.st_uid = v7;
    v202.st_atimespec = v7;
    *(timespec *)&v202.st_dev = v7;
    if ((v197.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unint64_t v8 = &v197;
    }
    else {
      unint64_t v8 = (std::string *)v197.__r_.__value_.__r.__words[0];
    }
    if (stat((const char *)v8, &v202))
    {
      *(std::string *)uint64_t v185 = v197;
      goto LABEL_333;
    }
    uint64_t v9 = *(unsigned __int8 *)(a1 + 23);
    if ((v9 & 0x80u) == 0) {
      size_t v10 = (std::sub_match<const char *> *)a1;
    }
    else {
      size_t v10 = *(std::sub_match<const char *> **)a1;
    }
    if ((v9 & 0x80u) != 0) {
      uint64_t v9 = *(void *)(a1 + 8);
    }
    uint64_t v11 = (std::sub_match<std::__wrap_iter<const char *>> *)((char *)v10 + v9);
    *(void *)&long long v12 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v12 + 1) = 0xAAAAAAAAAAAAAAAALL;
    *((_OWORD *)v6 + 2) = v12;
    *((_OWORD *)v6 + 3) = v12;
    *(_OWORD *)size_t v6 = v12;
    *((_OWORD *)v6 + 1) = v12;
    uint64_t v205 = 0;
    uint64_t v206 = 0;
    char v207 = 0;
    uint64_t v208 = 0;
    uint64_t v209 = 0;
    char v210 = 0;
    char v211 = 0;
    uint64_t v212 = 0;
    long long v203 = 0u;
    memset(v204, 0, 25);
    *(_OWORD *)&v202.st_birthtimespec.tv_nsec = v12;
    v202.st_ctimespec.tv_sec = 0xAAAAAAAAAAAAAAAALL;
    v202.st_atimespec.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
    memset(&v202.st_mtimespec, 0, 17);
    memset(&v202.st_ctimespec.tv_nsec, 0, 17);
    LOBYTE(v202.st_size) = 0;
    v202.st_blocks = 0;
    memset(&v202, 0, 41);
    int v13 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>((uint64_t)v198, v10, (std::sub_match<const char *> *)((char *)v10 + v9), (std::vector<std::csub_match> *)&v202, 4160);
    std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>((std::vector<std::ssub_match> *)&v203, (uint64_t)v10, v11, (uint64_t *)&v202.st_dev, 0);
    if (*(void *)&v202.st_dev)
    {
      v202.st_ino = *(void *)&v202.st_dev;
      operator delete(*(void **)&v202.st_dev);
    }
    if (v210) {
      int v14 = v13 ^ 1;
    }
    else {
      int v14 = 1;
    }
    if ((void)v203)
    {
      *((void *)&v203 + 1) = v203;
      operator delete((void *)v203);
    }
    if ((v13 & v14) == 0) {
      break;
    }
    unsigned int v15 = v5 + 1;
    memset(__p, 170, 24);
    std::to_string((std::string *)&v203, v15);
    size_t v16 = std::string::insert((std::string *)&v203, 0, "$1-", 3uLL);
    long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    *(void *)&v202.st_uid = *((void *)&v16->__r_.__value_.__l + 2);
    *(_OWORD *)&v202.st_dev = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    unint64_t v18 = std::string::append((std::string *)&v202, "$2", 2uLL);
    long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    __p[2] = (void *)v18->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    size_t v6 = v194;
    if (SHIBYTE(v202.st_gid) < 0)
    {
      operator delete(*(void **)&v202.st_dev);
      unsigned int v187 = v15;
      if ((v204[7] & 0x80000000) != 0) {
LABEL_298:
      }
        operator delete((void *)v203);
    }
    else
    {
      unsigned int v187 = v15;
      if ((v204[7] & 0x80000000) != 0) {
        goto LABEL_298;
      }
    }
    memset(&v195, 0, sizeof(v195));
    int v20 = *(char *)(a1 + 23);
    if (v20 >= 0) {
      long long v21 = (std::sub_match<const char *> *)a1;
    }
    else {
      long long v21 = *(std::sub_match<const char *> **)a1;
    }
    if (v20 >= 0) {
      uint64_t v22 = *(unsigned __int8 *)(a1 + 23);
    }
    else {
      uint64_t v22 = *(void *)(a1 + 8);
    }
    long long v23 = __p;
    if (SHIBYTE(__p[2]) < 0) {
      long long v23 = (void **)__p[0];
    }
    __s = (char *)v23;
    *(void *)&long long v24 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v24 + 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)&v202.st_gen = v24;
    v202.st_size_t size = 0xAAAAAAAAAAAAAAAALL;
    v202.st_ctimespec.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
    *(&v202.st_rdev + 1) = -1431655766;
    *(void *)&v202.st_dev = v21;
    v202.st_ino = (__darwin_ino64_t)v21 + v22;
    *(void *)&v202.st_uid = v198;
    v202.dev_t st_rdev = 0;
    memset(&v202.st_birthtimespec, 0, 17);
    memset(&v202.st_blocks, 0, 17);
    LOBYTE(v202.st_qspare[0]) = 0;
    v202.st_qspare[1] = 0;
    memset(&v202.st_atimespec, 0, 41);
    *((_OWORD *)v6 + 2) = v24;
    *((_OWORD *)v6 + 3) = v24;
    *(_OWORD *)size_t v6 = v24;
    *((_OWORD *)v6 + 1) = v24;
    uint64_t v205 = 0;
    uint64_t v206 = 0;
    char v207 = 0;
    uint64_t v208 = 0;
    uint64_t v209 = 0;
    char v210 = 0;
    char v211 = 0;
    uint64_t v212 = 0;
    long long v203 = 0u;
    memset(v204, 0, 25);
    std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>((uint64_t)v198, v21, (std::sub_match<const char *> *)((char *)v21 + v22), (std::vector<std::csub_match> *)&v203, 0);
    std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>((std::vector<std::ssub_match> *)&v202.st_atimespec, (uint64_t)v21, (std::sub_match<std::__wrap_iter<const char *>> *)((char *)v21 + v22), (uint64_t *)&v203, 0);
    if ((void)v203)
    {
      *((void *)&v203 + 1) = v203;
      operator delete((void *)v203);
    }
    tv_nsec = (void *)v202.st_atimespec.tv_nsec;
    if (v202.st_atimespec.tv_nsec != v202.st_atimespec.tv_sec)
    {
      size_t v189 = strlen(__s);
      unint64_t v26 = (unsigned __int8 *)&__s[v189];
      while (2)
      {
        tv_sec = (char *)v202.st_birthtimespec.tv_sec;
        uint64_t v29 = v202.st_birthtimespec.tv_nsec;
        while (tv_sec != (char *)v29)
        {
          char v33 = *tv_sec;
          if ((SHIBYTE(v195.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
            if (HIBYTE(v195.__r_.__value_.__r.__words[2]) != 22)
            {
              size_t size = HIBYTE(v195.__r_.__value_.__r.__words[2]);
              *((unsigned char *)&v195.__r_.__value_.__s + 23) = (*((unsigned char *)&v195.__r_.__value_.__s + 23) + 1) & 0x7F;
              unint64_t v31 = &v195;
              goto LABEL_41;
            }
            xpc_object_t v34 = &v195;
            size_t size = 22;
LABEL_49:
            if (size + 1 > 2 * size) {
              unint64_t v36 = size + 1;
            }
            else {
              unint64_t v36 = 2 * size;
            }
            uint64_t v37 = (v36 & 0x7FFFFFFFFFFFFFF8) + 8;
            if ((v36 | 7) != 0x17) {
              uint64_t v37 = v36 | 7;
            }
            if (v36 >= 0x17) {
              size_t v35 = v37 + 1;
            }
            else {
              size_t v35 = 23;
            }
LABEL_57:
            std::string::pointer v38 = (std::string *)operator new(v35);
            unint64_t v31 = v38;
            if (!size || (memmove(v38, v34, size), size != 22)) {
              operator delete(v34);
            }
            v195.__r_.__value_.__r.__words[0] = (std::string::size_type)v31;
            v195.__r_.__value_.__r.__words[2] = v35 | 0x8000000000000000;
            goto LABEL_62;
          }
          size_t size = (v195.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
          if (v195.__r_.__value_.__l.__size_ == size)
          {
            if ((v195.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) == 0x7FFFFFFFFFFFFFF8) {
              std::string::__throw_length_error[abi:ne180100]();
            }
            xpc_object_t v34 = (std::string *)v195.__r_.__value_.__r.__words[0];
            size_t v35 = 0x7FFFFFFFFFFFFFF7;
            if (size < 0x3FFFFFFFFFFFFFF3) {
              goto LABEL_49;
            }
            goto LABEL_57;
          }
          size_t size = v195.__r_.__value_.__l.__size_;
          unint64_t v31 = (std::string *)v195.__r_.__value_.__r.__words[0];
LABEL_62:
          v195.__r_.__value_.__l.__size_ = size + 1;
LABEL_41:
          CFTypeRef v32 = (char *)v31 + size;
          unsigned char *v32 = v33;
          v32[1] = 0;
          ++tv_sec;
        }
        if (v189)
        {
          for (uint64_t i = __s; i != (char *)v26; ++i)
          {
            int v43 = *i;
            if (v43 != 36) {
              goto LABEL_135;
            }
            __int16 v44 = (unsigned __int8 *)(i + 1);
            if (i + 1 == (char *)v26) {
              goto LABEL_134;
            }
            int v45 = (char)*v44;
            int v43 = *v44;
            if (v45 <= 38)
            {
              if (v45 == 36)
              {
                ++i;
                unsigned __int8 v82 = HIBYTE(v195.__r_.__value_.__r.__words[2]);
                if ((SHIBYTE(v195.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                  goto LABEL_136;
                }
                goto LABEL_161;
              }
              if (v45 != 38) {
                goto LABEL_123;
              }
              uint64_t v46 = *(char **)v202.st_atimespec.tv_sec;
              xpc_object_t v47 = *(char **)(v202.st_atimespec.tv_sec + 8);
              if (*(char **)v202.st_atimespec.tv_sec == v47)
              {
LABEL_179:
                uint64_t i = (char *)v44;
                continue;
              }
              while (2)
              {
                while (2)
                {
                  char v49 = *v46;
                  unsigned __int8 v50 = HIBYTE(v195.__r_.__value_.__r.__words[2]);
                  if (SHIBYTE(v195.__r_.__value_.__r.__words[2]) < 0)
                  {
                    size_t v52 = (v195.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
                    if (v195.__r_.__value_.__l.__size_ == v52)
                    {
                      if ((v195.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) == 0x7FFFFFFFFFFFFFF8) {
                        goto LABEL_337;
                      }
                      CFTypeRef v51 = (std::string *)v195.__r_.__value_.__r.__words[0];
                      size_t v53 = 0x7FFFFFFFFFFFFFF7;
                      if (v52 < 0x3FFFFFFFFFFFFFF3) {
                        goto LABEL_82;
                      }
                      goto LABEL_90;
                    }
                    size_t v52 = v195.__r_.__value_.__l.__size_;
                    std::string::size_type v57 = v195.__r_.__value_.__r.__words[0];
                  }
                  else
                  {
                    if (HIBYTE(v195.__r_.__value_.__r.__words[2]) != 22)
                    {
                      *((unsigned char *)&v195.__r_.__value_.__s + 23) = (*((unsigned char *)&v195.__r_.__value_.__s + 23) + 1) & 0x7F;
                      CFTypeRef v48 = (char *)&v195 + v50;
                      *CFTypeRef v48 = v49;
                      v48[1] = 0;
                      if (++v46 == v47) {
                        goto LABEL_201;
                      }
                      continue;
                    }
                    CFTypeRef v51 = &v195;
                    size_t v52 = 22;
LABEL_82:
                    if (v52 + 1 > 2 * v52) {
                      unint64_t v54 = v52 + 1;
                    }
                    else {
                      unint64_t v54 = 2 * v52;
                    }
                    uint64_t v55 = (v54 & 0x7FFFFFFFFFFFFFF8) + 8;
                    if ((v54 | 7) != 0x17) {
                      uint64_t v55 = v54 | 7;
                    }
                    if (v54 >= 0x17) {
                      size_t v53 = v55 + 1;
                    }
                    else {
                      size_t v53 = 23;
                    }
LABEL_90:
                    uint64_t v56 = operator new(v53);
                    std::string::size_type v57 = (std::string::size_type)v56;
                    if (!v52 || (memmove(v56, v51, v52), v52 != 22)) {
                      operator delete(v51);
                    }
                    v195.__r_.__value_.__r.__words[0] = v57;
                    v195.__r_.__value_.__r.__words[2] = v53 | 0x8000000000000000;
                  }
                  break;
                }
                v195.__r_.__value_.__l.__size_ = v52 + 1;
                std::string v58 = (char *)(v57 + v52);
                char *v58 = v49;
                v58[1] = 0;
                if (++v46 == v47) {
                  goto LABEL_201;
                }
                continue;
              }
            }
            if (v45 != 39)
            {
              if (v45 == 96)
              {
                uint64_t v59 = (char *)v202.st_birthtimespec.tv_sec;
                uint64_t v60 = v202.st_birthtimespec.tv_nsec;
                if (v202.st_birthtimespec.tv_sec == v202.st_birthtimespec.tv_nsec) {
                  goto LABEL_179;
                }
                while (2)
                {
                  while (2)
                  {
                    char v62 = *v59;
                    unsigned __int8 v63 = HIBYTE(v195.__r_.__value_.__r.__words[2]);
                    if (SHIBYTE(v195.__r_.__value_.__r.__words[2]) < 0)
                    {
                      size_t v65 = (v195.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
                      if (v195.__r_.__value_.__l.__size_ == v65)
                      {
                        if ((v195.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) == 0x7FFFFFFFFFFFFFF8) {
                          goto LABEL_337;
                        }
                        uint64_t v64 = (std::string *)v195.__r_.__value_.__r.__words[0];
                        size_t v66 = 0x7FFFFFFFFFFFFFF7;
                        if (v65 < 0x3FFFFFFFFFFFFFF3) {
                          goto LABEL_108;
                        }
                        goto LABEL_116;
                      }
                      size_t v65 = v195.__r_.__value_.__l.__size_;
                      std::string::size_type v70 = v195.__r_.__value_.__r.__words[0];
                    }
                    else
                    {
                      if (HIBYTE(v195.__r_.__value_.__r.__words[2]) != 22)
                      {
                        *((unsigned char *)&v195.__r_.__value_.__s + 23) = (*((unsigned char *)&v195.__r_.__value_.__s + 23) + 1) & 0x7F;
                        uint64_t v61 = (char *)&v195 + v63;
                        char *v61 = v62;
                        v61[1] = 0;
                        if (++v59 == (char *)v60) {
                          goto LABEL_201;
                        }
                        continue;
                      }
                      uint64_t v64 = &v195;
                      size_t v65 = 22;
LABEL_108:
                      if (v65 + 1 > 2 * v65) {
                        unint64_t v67 = v65 + 1;
                      }
                      else {
                        unint64_t v67 = 2 * v65;
                      }
                      uint64_t v68 = (v67 & 0x7FFFFFFFFFFFFFF8) + 8;
                      if ((v67 | 7) != 0x17) {
                        uint64_t v68 = v67 | 7;
                      }
                      if (v67 >= 0x17) {
                        size_t v66 = v68 + 1;
                      }
                      else {
                        size_t v66 = 23;
                      }
LABEL_116:
                      std::string v69 = operator new(v66);
                      std::string::size_type v70 = (std::string::size_type)v69;
                      if (!v65 || (memmove(v69, v64, v65), v65 != 22)) {
                        operator delete(v64);
                      }
                      v195.__r_.__value_.__r.__words[0] = v70;
                      v195.__r_.__value_.__r.__words[2] = v66 | 0x8000000000000000;
                    }
                    break;
                  }
                  v195.__r_.__value_.__l.__size_ = v65 + 1;
                  CFTypeID v71 = (char *)(v70 + v65);
                  char *v71 = v62;
                  v71[1] = 0;
                  if (++v59 == (char *)v60) {
                    goto LABEL_201;
                  }
                  continue;
                }
              }
LABEL_123:
              if ((v43 - 48) <= 9)
              {
                unint64_t v72 = *v44 - 48;
                if (i + 2 != (char *)v26)
                {
                  uint64_t v73 = i[2];
                  unsigned int v74 = v73 - 48;
                  uint64_t v75 = v73 + 10 * (int)v72 - 48;
                  if (v74 > 9)
                  {
                    __int16 v44 = (unsigned __int8 *)(i + 1);
                  }
                  else
                  {
                    unint64_t v72 = v75;
                    __int16 v44 = (unsigned __int8 *)(i + 2);
                  }
                }
                __darwin_time_t v76 = v202.st_atimespec.tv_sec + 24 * (int)v72;
                BOOL v77 = 0xAAAAAAAAAAAAAAABLL * ((v202.st_atimespec.tv_nsec - v202.st_atimespec.tv_sec) >> 3) > v72;
                p_tv_nsec = &v202.st_mtimespec.tv_nsec;
                if (v77) {
                  p_tv_nsec = (uint64_t *)v76;
                }
                long long v79 = (char *)*p_tv_nsec;
                p_st_ctimespec = (timespec *)(v76 + 8);
                if (!v77) {
                  p_st_ctimespec = &v202.st_ctimespec;
                }
                size_t v81 = (char *)p_st_ctimespec->tv_sec;
                if (v79 == (char *)p_st_ctimespec->tv_sec) {
                  goto LABEL_179;
                }
                while (2)
                {
                  while (2)
                  {
                    char v85 = *v79;
                    unsigned __int8 v86 = HIBYTE(v195.__r_.__value_.__r.__words[2]);
                    if (SHIBYTE(v195.__r_.__value_.__r.__words[2]) < 0)
                    {
                      size_t v88 = (v195.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
                      if (v195.__r_.__value_.__l.__size_ == v88)
                      {
                        if ((v195.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) == 0x7FFFFFFFFFFFFFF8) {
                          goto LABEL_337;
                        }
                        BOOL v87 = (std::string *)v195.__r_.__value_.__r.__words[0];
                        size_t v89 = 0x7FFFFFFFFFFFFFF7;
                        if (v88 < 0x3FFFFFFFFFFFFFF3) {
                          goto LABEL_145;
                        }
                        goto LABEL_153;
                      }
                      size_t v88 = v195.__r_.__value_.__l.__size_;
                      std::string::size_type v93 = v195.__r_.__value_.__r.__words[0];
                    }
                    else
                    {
                      if (HIBYTE(v195.__r_.__value_.__r.__words[2]) != 22)
                      {
                        *((unsigned char *)&v195.__r_.__value_.__s + 23) = (*((unsigned char *)&v195.__r_.__value_.__s + 23) + 1) & 0x7F;
                        uint64_t v84 = (char *)&v195 + v86;
                        char *v84 = v85;
                        v84[1] = 0;
                        if (++v79 == v81) {
                          goto LABEL_201;
                        }
                        continue;
                      }
                      BOOL v87 = &v195;
                      size_t v88 = 22;
LABEL_145:
                      if (v88 + 1 > 2 * v88) {
                        unint64_t v90 = v88 + 1;
                      }
                      else {
                        unint64_t v90 = 2 * v88;
                      }
                      uint64_t v91 = (v90 & 0x7FFFFFFFFFFFFFF8) + 8;
                      if ((v90 | 7) != 0x17) {
                        uint64_t v91 = v90 | 7;
                      }
                      if (v90 >= 0x17) {
                        size_t v89 = v91 + 1;
                      }
                      else {
                        size_t v89 = 23;
                      }
LABEL_153:
                      size_t v92 = operator new(v89);
                      std::string::size_type v93 = (std::string::size_type)v92;
                      if (!v88 || (memmove(v92, v87, v88), v88 != 22)) {
                        operator delete(v87);
                      }
                      v195.__r_.__value_.__r.__words[0] = v93;
                      v195.__r_.__value_.__r.__words[2] = v89 | 0x8000000000000000;
                    }
                    break;
                  }
                  v195.__r_.__value_.__l.__size_ = v88 + 1;
                  uint64_t v94 = (char *)(v93 + v88);
                  *uint64_t v94 = v85;
                  v94[1] = 0;
                  if (++v79 == v81) {
                    goto LABEL_201;
                  }
                  continue;
                }
              }
LABEL_134:
              LOBYTE(v43) = 36;
LABEL_135:
              unsigned __int8 v82 = HIBYTE(v195.__r_.__value_.__r.__words[2]);
              if ((SHIBYTE(v195.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
LABEL_136:
                if (v82 == 22)
                {
                  uint64_t v83 = &v195;
                  size_t v40 = 22;
                  goto LABEL_164;
                }
                size_t v40 = v82;
                *((unsigned char *)&v195.__r_.__value_.__s + 23) = (v82 + 1) & 0x7F;
                int v41 = &v195;
LABEL_66:
                size_t v42 = (char *)v41 + v40;
                unsigned char *v42 = v43;
                v42[1] = 0;
                continue;
              }
LABEL_161:
              size_t v40 = (v195.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
              if (v195.__r_.__value_.__l.__size_ == v40)
              {
                if ((v195.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) == 0x7FFFFFFFFFFFFFF8) {
LABEL_337:
                }
                  std::string::__throw_length_error[abi:ne180100]();
                size_t v6 = v194;
                uint64_t v83 = (std::string *)v195.__r_.__value_.__r.__words[0];
                size_t v95 = 0x7FFFFFFFFFFFFFF7;
                if (v40 < 0x3FFFFFFFFFFFFFF3)
                {
LABEL_164:
                  if (v40 + 1 > 2 * v40) {
                    unint64_t v96 = v40 + 1;
                  }
                  else {
                    unint64_t v96 = 2 * v40;
                  }
                  uint64_t v97 = (v96 & 0x7FFFFFFFFFFFFFF8) + 8;
                  if ((v96 | 7) != 0x17) {
                    uint64_t v97 = v96 | 7;
                  }
                  if (v96 >= 0x17) {
                    size_t v95 = v97 + 1;
                  }
                  else {
                    size_t v95 = 23;
                  }
                }
                uint64_t v98 = (std::string *)operator new(v95);
                int v41 = v98;
                if (!v40 || (memmove(v98, v83, v40), v40 != 22)) {
                  operator delete(v83);
                }
                v195.__r_.__value_.__r.__words[0] = (std::string::size_type)v41;
                v195.__r_.__value_.__r.__words[2] = v95 | 0x8000000000000000;
              }
              else
              {
                size_t v40 = v195.__r_.__value_.__l.__size_;
                int v41 = (std::string *)v195.__r_.__value_.__r.__words[0];
              }
              v195.__r_.__value_.__l.__size_ = v40 + 1;
              goto LABEL_66;
            }
            st_blocks = (char *)v202.st_blocks;
            int v100 = *(char **)&v202.st_blksize;
            if (v202.st_blocks == *(void *)&v202.st_blksize) {
              goto LABEL_179;
            }
            do
            {
              while (1)
              {
                char v102 = *st_blocks;
                unsigned __int8 v103 = HIBYTE(v195.__r_.__value_.__r.__words[2]);
                if (SHIBYTE(v195.__r_.__value_.__r.__words[2]) < 0) {
                  break;
                }
                if (HIBYTE(v195.__r_.__value_.__r.__words[2]) == 22)
                {
                  xpc_object_t v104 = &v195;
                  size_t v105 = 22;
LABEL_187:
                  if (v105 + 1 > 2 * v105) {
                    unint64_t v107 = v105 + 1;
                  }
                  else {
                    unint64_t v107 = 2 * v105;
                  }
                  uint64_t v108 = (v107 & 0x7FFFFFFFFFFFFFF8) + 8;
                  if ((v107 | 7) != 0x17) {
                    uint64_t v108 = v107 | 7;
                  }
                  if (v107 >= 0x17) {
                    size_t v106 = v108 + 1;
                  }
                  else {
                    size_t v106 = 23;
                  }
                  goto LABEL_195;
                }
                *((unsigned char *)&v195.__r_.__value_.__s + 23) = (*((unsigned char *)&v195.__r_.__value_.__s + 23) + 1) & 0x7F;
                xpc_object_t v101 = (char *)&v195 + v103;
                *xpc_object_t v101 = v102;
                v101[1] = 0;
                if (++st_blocks == v100) {
                  goto LABEL_201;
                }
              }
              size_t v105 = (v195.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
              if (v195.__r_.__value_.__l.__size_ != v105)
              {
                size_t v105 = v195.__r_.__value_.__l.__size_;
                std::string::size_type v110 = v195.__r_.__value_.__r.__words[0];
                goto LABEL_200;
              }
              if ((v195.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) == 0x7FFFFFFFFFFFFFF8) {
                goto LABEL_337;
              }
              xpc_object_t v104 = (std::string *)v195.__r_.__value_.__r.__words[0];
              size_t v106 = 0x7FFFFFFFFFFFFFF7;
              if (v105 < 0x3FFFFFFFFFFFFFF3) {
                goto LABEL_187;
              }
LABEL_195:
              xpc_object_t v109 = operator new(v106);
              std::string::size_type v110 = (std::string::size_type)v109;
              if (!v105 || (memmove(v109, v104, v105), v105 != 22)) {
                operator delete(v104);
              }
              v195.__r_.__value_.__r.__words[0] = v110;
              v195.__r_.__value_.__r.__words[2] = v106 | 0x8000000000000000;
LABEL_200:
              v195.__r_.__value_.__l.__size_ = v105 + 1;
              uint64_t v111 = (char *)(v110 + v105);
              *uint64_t v111 = v102;
              v111[1] = 0;
              ++st_blocks;
            }
            while (st_blocks != v100);
LABEL_201:
            uint64_t i = (char *)v44;
            size_t v6 = v194;
          }
        }
        size_t v113 = (char *)v202.st_blocks;
        size_t v112 = *(char **)&v202.st_blksize;
        dev_t st_rdev = v202.st_rdev;
        int v115 = v202.st_rdev | 0x800;
        v202.st_rdev |= 0x800u;
        uint64_t v27 = (void *)v202.st_atimespec.tv_sec;
        uint64_t v116 = &v202.st_mtimespec.tv_nsec;
        if (v202.st_atimespec.tv_nsec != v202.st_atimespec.tv_sec) {
          uint64_t v116 = (void *)v202.st_atimespec.tv_sec;
        }
        uint64_t v117 = (timespec *)(v202.st_atimespec.tv_sec + 8);
        if (v202.st_atimespec.tv_nsec == v202.st_atimespec.tv_sec) {
          uint64_t v117 = &v202.st_ctimespec;
        }
        int v118 = (std::sub_match<const char *> *)v117->tv_sec;
        st_ino = (std::sub_match<const char *> *)v202.st_ino;
        if (*v116 != v117->tv_sec)
        {
          BOOL v192 = *(char **)&v202.st_blksize;
          blkcnt_t v193 = v202.st_blocks;
          goto LABEL_208;
        }
        if ((std::sub_match<const char *> *)v202.st_ino != v118)
        {
          uint64_t v138 = *(void *)&v202.st_uid;
          *(void *)&long long v139 = 0xAAAAAAAAAAAAAAAALL;
          *((void *)&v139 + 1) = 0xAAAAAAAAAAAAAAAALL;
          *((_OWORD *)v6 + 2) = v139;
          *((_OWORD *)v6 + 3) = v139;
          *(_OWORD *)size_t v6 = v139;
          *((_OWORD *)v6 + 1) = v139;
          uint64_t v205 = 0;
          uint64_t v206 = 0;
          char v207 = 0;
          uint64_t v208 = 0;
          uint64_t v209 = 0;
          char v210 = 0;
          char v211 = 0;
          uint64_t v212 = 0;
          long long v203 = 0u;
          memset(v204, 0, 25);
          int v140 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>(v138, v118, st_ino, (std::vector<std::csub_match> *)&v203, st_rdev | 0x860u);
          uint64_t v141 = v205;
          unint64_t v142 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v203 + 1) - v203) >> 3);
          __darwin_time_t v143 = v202.st_atimespec.tv_sec;
          __darwin_time_t v144 = v202.st_atimespec.tv_nsec;
          unint64_t v145 = 0xAAAAAAAAAAAAAAABLL * ((v202.st_atimespec.tv_nsec - v202.st_atimespec.tv_sec) >> 3);
          if (v142 <= v145)
          {
            if (v142 < v145)
            {
              __darwin_time_t v144 = v202.st_atimespec.tv_sec + 8 * ((uint64_t)(*((void *)&v203 + 1) - v203) >> 3);
              v202.st_atimespec.tv_nsec = v144;
            }
          }
          else
          {
            std::vector<std::sub_match<std::__wrap_iter<char const*>>>::__append((std::vector<std::ssub_match> *)&v202.st_atimespec, v142 - v145);
            __darwin_time_t v143 = v202.st_atimespec.tv_sec;
            __darwin_time_t v144 = v202.st_atimespec.tv_nsec;
          }
          if (v144 == v143)
          {
            BOOL v158 = (char *)v203;
          }
          else
          {
            uint64_t v156 = 0;
            unint64_t v157 = 0;
            uint64_t v159 = *((void *)&v203 + 1);
            BOOL v158 = (char *)v203;
            do
            {
              if (0xAAAAAAAAAAAAAAABLL * ((v159 - (uint64_t)v158) >> 3) <= v157) {
                uint64_t v160 = &v204[8];
              }
              else {
                uint64_t v160 = &v158[v156];
              }
              *(void *)(v143 + v156) = (char *)v118 + *(void *)v160 - v141;
              if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v203 + 1) - v203) >> 3) <= v157) {
                int v161 = &v204[16];
              }
              else {
                int v161 = (void *)(v203 + v156 + 8);
              }
              *(void *)(v202.st_atimespec.tv_sec + v156 + 8) = (char *)v118 + *v161 - v141;
              uint64_t v159 = *((void *)&v203 + 1);
              BOOL v158 = (char *)v203;
              if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v203 + 1) - v203) >> 3) <= v157) {
                v162 = v6;
              }
              else {
                v162 = (char *)(v203 + v156 + 16);
              }
              char v163 = *v162;
              __darwin_time_t v143 = v202.st_atimespec.tv_sec;
              *(unsigned char *)(v202.st_atimespec.tv_sec + v156 + 16) = v163;
              ++v157;
              v156 += 24;
            }
            while (v157 < 0xAAAAAAAAAAAAAAABLL * ((v202.st_atimespec.tv_nsec - v143) >> 3));
          }
          v202.st_mtimespec.tv_nsec = (uint64_t)st_ino;
          v202.st_ctimespec.tv_sec = (__darwin_time_t)st_ino;
          v202.st_birthtimespec.tv_sec = (__darwin_time_t)v118 + v205 - v141;
          v202.st_birthtimespec.tv_nsec = (uint64_t)v118 + v206 - v141;
          LOBYTE(v202.st_size) = v207;
          LOBYTE(v202.st_ctimespec.tv_nsec) = 0;
          v202.st_blocks = (blkcnt_t)v118 + v208 - v141;
          *(void *)&v202.st_blksize_t size = (char *)v118 + v209 - v141;
          LOBYTE(v202.st_gen) = v210;
          LOBYTE(v202.st_qspare[0]) = v211;
          if (v158)
          {
            *((void *)&v203 + 1) = v158;
            operator delete(v158);
          }
          if (v140)
          {
            uint64_t v27 = (void *)v202.st_atimespec.tv_sec;
LABEL_38:
            if ((void *)v202.st_atimespec.tv_nsec != v27) {
              continue;
            }
            while (2)
            {
              if (v113 == v112) {
                goto LABEL_326;
              }
              char v167 = *v113;
              if (SHIBYTE(v195.__r_.__value_.__r.__words[2]) < 0)
              {
                size_t v164 = (v195.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
                if (v195.__r_.__value_.__l.__size_ == v164)
                {
                  if ((v195.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) == 0x7FFFFFFFFFFFFFF8) {
                    std::string::__throw_length_error[abi:ne180100]();
                  }
                  uint64_t v168 = (std::string *)v195.__r_.__value_.__r.__words[0];
                  size_t v169 = 0x7FFFFFFFFFFFFFF7;
                  if (v164 < 0x3FFFFFFFFFFFFFF3)
                  {
LABEL_283:
                    if (v164 + 1 > 2 * v164) {
                      unint64_t v170 = v164 + 1;
                    }
                    else {
                      unint64_t v170 = 2 * v164;
                    }
                    uint64_t v171 = (v170 & 0x7FFFFFFFFFFFFFF8) + 8;
                    if ((v170 | 7) != 0x17) {
                      uint64_t v171 = v170 | 7;
                    }
                    if (v170 >= 0x17) {
                      size_t v169 = v171 + 1;
                    }
                    else {
                      size_t v169 = 23;
                    }
                  }
                  uint64_t v172 = (std::string *)operator new(v169);
                  size_t v165 = v172;
                  if (!v164 || (memmove(v172, v168, v164), v164 != 22)) {
                    operator delete(v168);
                  }
                  v195.__r_.__value_.__r.__words[0] = (std::string::size_type)v165;
                  v195.__r_.__value_.__r.__words[2] = v169 | 0x8000000000000000;
                }
                else
                {
                  size_t v164 = v195.__r_.__value_.__l.__size_;
                  size_t v165 = (std::string *)v195.__r_.__value_.__r.__words[0];
                }
                v195.__r_.__value_.__l.__size_ = v164 + 1;
              }
              else
              {
                if (HIBYTE(v195.__r_.__value_.__r.__words[2]) == 22)
                {
                  uint64_t v168 = &v195;
                  size_t v164 = 22;
                  goto LABEL_283;
                }
                size_t v164 = HIBYTE(v195.__r_.__value_.__r.__words[2]);
                *((unsigned char *)&v195.__r_.__value_.__s + 23) = (*((unsigned char *)&v195.__r_.__value_.__s + 23) + 1) & 0x7F;
                size_t v165 = &v195;
              }
              int v166 = (char *)v165 + v164;
              unsigned char *v166 = v167;
              v166[1] = 0;
              ++v113;
              continue;
            }
          }
          BOOL v192 = v112;
          blkcnt_t v193 = (blkcnt_t)v113;
          int v118 = (std::sub_match<const char *> *)((char *)v118 + 1);
          int v115 = v202.st_rdev;
          st_ino = (std::sub_match<const char *> *)v202.st_ino;
LABEL_208:
          __int16 v120 = v115;
          v202.dev_t st_rdev = v115 | 0x80;
          uint64_t v121 = *(void *)&v202.st_uid;
          *(void *)&long long v122 = 0xAAAAAAAAAAAAAAAALL;
          *((void *)&v122 + 1) = 0xAAAAAAAAAAAAAAAALL;
          *((_OWORD *)v6 + 2) = v122;
          *((_OWORD *)v6 + 3) = v122;
          *(_OWORD *)size_t v6 = v122;
          *((_OWORD *)v6 + 1) = v122;
          uint64_t v205 = 0;
          uint64_t v206 = 0;
          char v207 = 0;
          uint64_t v208 = 0;
          uint64_t v209 = 0;
          char v210 = 0;
          char v211 = 0;
          uint64_t v212 = 0;
          long long v203 = 0u;
          memset(v204, 0, 25);
          uint64_t v191 = (uint64_t)st_ino;
          char v190 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>(v121, v118, st_ino, (std::vector<std::csub_match> *)&v203, v115 | 0x80u);
          uint64_t v123 = v205;
          unint64_t v124 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v203 + 1) - v203) >> 3);
          __darwin_time_t v125 = v202.st_atimespec.tv_sec;
          uint64_t v126 = (void *)v202.st_atimespec.tv_nsec;
          unint64_t v127 = 0xAAAAAAAAAAAAAAABLL * ((v202.st_atimespec.tv_nsec - v202.st_atimespec.tv_sec) >> 3);
          unint64_t v128 = v124 - v127;
          if (v124 <= v127)
          {
            if (v124 < v127)
            {
              uint64_t v126 = (void *)(v202.st_atimespec.tv_sec + 8 * ((uint64_t)(*((void *)&v203 + 1) - v203) >> 3));
              v202.st_atimespec.tv_nsec = (uint64_t)v126;
            }
            size_t v6 = v194;
            size_t v113 = (char *)v193;
            __int16 v136 = v120;
            if (v126 != (void *)v202.st_atimespec.tv_sec)
            {
LABEL_235:
              uint64_t v147 = 0;
              unint64_t v148 = 0;
              uint64_t v149 = *((void *)&v203 + 1);
              uint64_t v150 = v203;
              do
              {
                unint64_t v151 = 0xAAAAAAAAAAAAAAABLL * ((v149 - v150) >> 3);
                int v152 = (void *)(v150 + v147);
                if (v151 <= v148) {
                  BOOL v153 = &v204[8];
                }
                else {
                  BOOL v153 = v152;
                }
                *(void *)(v125 + v147) = (char *)v118 + *v153 - v123;
                if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v203 + 1) - v203) >> 3) <= v148) {
                  long long v154 = &v204[16];
                }
                else {
                  long long v154 = (void *)(v203 + v147 + 8);
                }
                *(void *)(v202.st_atimespec.tv_sec + v147 + 8) = (char *)v118 + *v154 - v123;
                uint64_t v149 = *((void *)&v203 + 1);
                uint64_t v150 = v203;
                if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v203 + 1) - v203) >> 3) <= v148) {
                  v155 = v6;
                }
                else {
                  v155 = (char *)(v203 + v147 + 16);
                }
                __darwin_time_t v125 = v202.st_atimespec.tv_sec;
                *(unsigned char *)(v202.st_atimespec.tv_sec + v147 + 16) = *v155;
                ++v148;
                v147 += 24;
              }
              while (v148 < 0xAAAAAAAAAAAAAAABLL * ((v202.st_atimespec.tv_nsec - v125) >> 3));
            }
          }
          else
          {
            if (0xAAAAAAAAAAAAAAABLL * ((v202.st_mtimespec.tv_sec - v202.st_atimespec.tv_nsec) >> 3) >= v128)
            {
              uint64_t v133 = v202.st_atimespec.tv_nsec + 24 * v128;
              uint64_t v146 = 8 * ((uint64_t)(*((void *)&v203 + 1) - v203) >> 3)
                   - 8 * ((v202.st_atimespec.tv_nsec - v202.st_atimespec.tv_sec) >> 3);
              do
              {
                *uint64_t v126 = 0;
                v126[1] = 0;
                *((unsigned char *)v126 + 16) = 0;
                v126 += 3;
                v146 -= 24;
              }
              while (v146);
              v202.st_atimespec.tv_nsec = v133;
              size_t v6 = v194;
              size_t v113 = (char *)v193;
              __int16 v136 = v120;
            }
            else
            {
              if (v124 > 0xAAAAAAAAAAAAAAALL) {
                std::vector<std::string>::__throw_length_error[abi:ne180100]();
              }
              unint64_t v129 = 0x5555555555555556 * ((v202.st_mtimespec.tv_sec - v202.st_atimespec.tv_sec) >> 3);
              if (v129 <= v124) {
                unint64_t v129 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v203 + 1) - v203) >> 3);
              }
              if (0xAAAAAAAAAAAAAAABLL * ((v202.st_mtimespec.tv_sec - v202.st_atimespec.tv_sec) >> 3) >= 0x555555555555555) {
                unint64_t v130 = 0xAAAAAAAAAAAAAAALL;
              }
              else {
                unint64_t v130 = v129;
              }
              if (v130 > 0xAAAAAAAAAAAAAAALL) {
                std::__throw_bad_array_new_length[abi:ne180100]();
              }
              uint64_t v131 = operator new(24 * v130);
              __darwin_time_t v132 = (__darwin_time_t)v131 + 24 * v127;
              uint64_t v133 = (uint64_t)v131 + 24 * v124;
              uint64_t v134 = 24 * v124 - 24 * v127;
              __darwin_time_t v135 = v132;
              do
              {
                *(void *)__darwin_time_t v135 = 0;
                *(void *)(v135 + 8) = 0;
                *(unsigned char *)(v135 + 16) = 0;
                v135 += 24;
                v134 -= 24;
              }
              while (v134);
              size_t v113 = (char *)v193;
              __int16 v136 = v120;
              if (v126 != (void *)v125)
              {
                do
                {
                  long long v137 = *(_OWORD *)(v126 - 3);
                  *(void *)(v132 - 8) = *(v126 - 1);
                  *(_OWORD *)(v132 - 24) = v137;
                  v132 -= 24;
                  v126 -= 3;
                }
                while (v126 != (void *)v125);
                uint64_t v126 = (void *)v125;
              }
              v202.st_atimespec.tv_sec = v132;
              v202.st_atimespec.tv_nsec = v133;
              v202.st_mtimespec.tv_sec = (__darwin_time_t)v131 + 24 * v130;
              size_t v6 = v194;
              if (v126)
              {
                operator delete(v126);
                uint64_t v133 = v202.st_atimespec.tv_nsec;
              }
            }
            __darwin_time_t v125 = v202.st_atimespec.tv_sec;
            if (v133 != v202.st_atimespec.tv_sec) {
              goto LABEL_235;
            }
          }
          v202.st_mtimespec.tv_nsec = v191;
          v202.st_ctimespec.tv_sec = v191;
          v202.st_birthtimespec.tv_sec = (__darwin_time_t)v118 + v205 - v123;
          v202.st_birthtimespec.tv_nsec = (uint64_t)v118 + v206 - v123;
          LOBYTE(v202.st_size) = v207;
          LOBYTE(v202.st_ctimespec.tv_nsec) = 0;
          v202.st_blocks = (blkcnt_t)v118 + v208 - v123;
          *(void *)&v202.st_blksize_t size = (char *)v118 + v209 - v123;
          LOBYTE(v202.st_gen) = v210;
          if ((v136 & 0x800) == 0) {
            v202.st_qspare[1] = (uint64_t_t)v118 + v205 - v123;
          }
          LOBYTE(v202.st_qspare[0]) = v211;
          size_t v112 = v192;
          if ((void)v203)
          {
            *((void *)&v203 + 1) = v203;
            operator delete((void *)v203);
          }
          uint64_t v27 = (void *)v202.st_atimespec.tv_sec;
          if (v190) {
            goto LABEL_38;
          }
        }
        break;
      }
      if (v27)
      {
        v202.st_atimespec.tv_nsec = (uint64_t)v27;
        operator delete(v27);
      }
      uint64_t v27 = 0;
      LOBYTE(v202.st_qspare[0]) = 0;
      memset(&v202.st_atimespec, 0, 41);
      memset(&v202.st_birthtimespec, 0, 17);
      memset(&v202.st_blocks, 0, 17);
      v202.st_qspare[1] = 0;
      goto LABEL_38;
    }
    if (!v22)
    {
      unsigned int v5 = v187;
      if (!v202.st_atimespec.tv_nsec) {
        goto LABEL_302;
      }
LABEL_301:
      v202.st_atimespec.tv_nsec = (uint64_t)tv_nsec;
      operator delete(tv_nsec);
      goto LABEL_302;
    }
    do
    {
      while (1)
      {
        char first = (char)v21->first;
        unsigned __int8 v175 = HIBYTE(v195.__r_.__value_.__r.__words[2]);
        if (SHIBYTE(v195.__r_.__value_.__r.__words[2]) < 0) {
          break;
        }
        if (HIBYTE(v195.__r_.__value_.__r.__words[2]) == 22)
        {
          v176 = &v195;
          size_t v177 = 22;
LABEL_312:
          if (v177 + 1 > 2 * v177) {
            unint64_t v179 = v177 + 1;
          }
          else {
            unint64_t v179 = 2 * v177;
          }
          uint64_t v180 = (v179 & 0x7FFFFFFFFFFFFFF8) + 8;
          if ((v179 | 7) != 0x17) {
            uint64_t v180 = v179 | 7;
          }
          if (v179 >= 0x17) {
            size_t v178 = v180 + 1;
          }
          else {
            size_t v178 = 23;
          }
          goto LABEL_320;
        }
        *((unsigned char *)&v195.__r_.__value_.__s + 23) = (*((unsigned char *)&v195.__r_.__value_.__s + 23) + 1) & 0x7F;
        uint64_t v173 = (char *)&v195 + v175;
        *uint64_t v173 = first;
        v173[1] = 0;
        long long v21 = (std::sub_match<const char *> *)((char *)v21 + 1);
        if (!--v22) {
          goto LABEL_326;
        }
      }
      size_t v177 = (v195.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
      if (v195.__r_.__value_.__l.__size_ != v177)
      {
        size_t v177 = v195.__r_.__value_.__l.__size_;
        std::string::size_type v182 = v195.__r_.__value_.__r.__words[0];
        goto LABEL_325;
      }
      if ((v195.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) == 0x7FFFFFFFFFFFFFF8) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      v176 = (std::string *)v195.__r_.__value_.__r.__words[0];
      size_t v178 = 0x7FFFFFFFFFFFFFF7;
      if (v177 < 0x3FFFFFFFFFFFFFF3) {
        goto LABEL_312;
      }
LABEL_320:
      uint64_t v181 = operator new(v178);
      std::string::size_type v182 = (std::string::size_type)v181;
      if (!v177 || (memmove(v181, v176, v177), v177 != 22)) {
        operator delete(v176);
      }
      v195.__r_.__value_.__r.__words[0] = v182;
      v195.__r_.__value_.__r.__words[2] = v178 | 0x8000000000000000;
LABEL_325:
      v195.__r_.__value_.__l.__size_ = v177 + 1;
      v183 = (char *)(v182 + v177);
      char *v183 = first;
      v183[1] = 0;
      long long v21 = (std::sub_match<const char *> *)((char *)v21 + 1);
      --v22;
    }
    while (v22);
LABEL_326:
    tv_nsec = (void *)v202.st_atimespec.tv_sec;
    a1 = v186;
    unsigned int v5 = v187;
    if (v202.st_atimespec.tv_sec) {
      goto LABEL_301;
    }
LABEL_302:
    if (SHIBYTE(v197.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v197.__r_.__value_.__l.__data_);
      std::string v197 = v195;
      if (SHIBYTE(__p[2]) < 0) {
LABEL_5:
      }
        operator delete(__p[0]);
    }
    else
    {
      std::string v197 = v195;
      if (SHIBYTE(__p[2]) < 0) {
        goto LABEL_5;
      }
    }
  }
  *(unsigned char *)(v185 + 23) = 0;
  *(unsigned char *)uint64_t v185 = 0;
  if (SHIBYTE(v197.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v197.__r_.__value_.__l.__data_);
  }
LABEL_333:
  xpc_object_t v184 = (std::__shared_weak_count *)v201;
  if ((void)v201 && !atomic_fetch_add((atomic_ullong *volatile)(v201 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v184->__on_zero_shared)(v184);
    std::__shared_weak_count::__release_weak(v184);
  }
  std::locale::~locale(v198);
}

void sub_1C585A7CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,std::locale a43)
{
}

void sub_1C585A7E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,std::locale a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void *__p,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  if (a59 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v59 - 185) < 0) {
    operator delete(*(void **)(v59 - 208));
  }
  if (a44 < 0) {
    operator delete(a39);
  }
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&a46);
  _Unwind_Resume(a1);
}

void support::fs::createUniquePath(const char *a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v2 = a1;
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  v4.tv_sec = 0xAAAAAAAAAAAAAAAALL;
  v4.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
  *(timespec *)&__src.st_blksize_t size = v4;
  *(timespec *)__src.st_qspare = v4;
  __src.st_birthtimespec = v4;
  *(timespec *)&__src.st_size_t size = v4;
  __src.st_mtimespec = v4;
  __src.st_ctimespec = v4;
  *(timespec *)&__src.st_uid = v4;
  __src.st_atimespec = v4;
  *(timespec *)&__src.st_dev = v4;
  if (a1[23] < 0) {
    a1 = *(const char **)a1;
  }
  if (!stat(a1, &__src))
  {
    v5.tv_sec = 0xAAAAAAAAAAAAAAAALL;
    v5.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
    timespec v27 = v5;
    timespec v28 = v5;
    timespec v25 = v5;
    timespec v26 = v5;
    timespec v23 = v5;
    timespec v24 = v5;
    *(timespec *)__src.st_qspare = v5;
    timespec v22 = v5;
    *(timespec *)&__src.st_size_t size = v5;
    *(timespec *)&__src.st_blksize_t size = v5;
    __src.st_ctimespec = v5;
    __src.st_birthtimespec = v5;
    __src.st_atimespec = v5;
    __src.st_mtimespec = v5;
    *(timespec *)&__src.st_dev = v5;
    *(timespec *)&__src.st_uid = v5;
    snprintf((char *)&__src, 0x100uLL, "-%u", 1);
    memset(a2, 170, sizeof(std::string));
    size_t v6 = strlen((const char *)&__src);
    if (v6 > 0x7FFFFFFFFFFFFFF7) {
LABEL_32:
    }
      std::string::__throw_length_error[abi:ne180100]();
    __darwin_ino64_t v7 = v6;
    int v8 = 2;
    while (v7 < 0x17)
    {
      HIBYTE(__dst.st_gid) = v7;
      p_dst = &__dst;
      if (v7) {
        goto LABEL_15;
      }
LABEL_16:
      *((unsigned char *)&p_dst->st_dev + v7) = 0;
      int v13 = v2[23];
      if (v13 >= 0) {
        int v14 = v2;
      }
      else {
        int v14 = *(const std::string::value_type **)v2;
      }
      if (v13 >= 0) {
        std::string::size_type v15 = *((unsigned __int8 *)v2 + 23);
      }
      else {
        std::string::size_type v15 = *((void *)v2 + 1);
      }
      size_t v16 = std::string::insert((std::string *)&__dst, 0, v14, v15);
      long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
      a2->__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
      *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v17;
      v16->__r_.__value_.__l.__size_ = 0;
      v16->__r_.__value_.__r.__words[2] = 0;
      v16->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(__dst.st_gid) < 0) {
        operator delete(*(void **)&__dst.st_dev);
      }
      v18.tv_sec = 0xAAAAAAAAAAAAAAAALL;
      v18.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
      *(timespec *)&__dst.st_blksize_t size = v18;
      *(timespec *)__dst.st_qspare = v18;
      __dst.st_birthtimespec = v18;
      *(timespec *)&__dst.st_size_t size = v18;
      __dst.st_mtimespec = v18;
      __dst.st_ctimespec = v18;
      *(timespec *)&__dst.st_uid = v18;
      __dst.st_atimespec = v18;
      *(timespec *)&__dst.st_dev = v18;
      if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        long long v19 = (const char *)a2;
      }
      else {
        long long v19 = (const char *)a2->__r_.__value_.__r.__words[0];
      }
      if (stat(v19, &__dst)) {
        return;
      }
      if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0) {
        operator delete(a2->__r_.__value_.__l.__data_);
      }
      v9.tv_sec = 0xAAAAAAAAAAAAAAAALL;
      v9.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
      timespec v27 = v9;
      timespec v28 = v9;
      timespec v25 = v9;
      timespec v26 = v9;
      timespec v23 = v9;
      timespec v24 = v9;
      *(timespec *)__src.st_qspare = v9;
      timespec v22 = v9;
      *(timespec *)&__src.st_size_t size = v9;
      *(timespec *)&__src.st_blksize_t size = v9;
      __src.st_ctimespec = v9;
      __src.st_birthtimespec = v9;
      __src.st_atimespec = v9;
      __src.st_mtimespec = v9;
      *(timespec *)&__src.st_dev = v9;
      *(timespec *)&__src.st_uid = v9;
      snprintf((char *)&__src, 0x100uLL, "-%u", v8);
      memset(a2, 170, sizeof(std::string));
      __darwin_ino64_t v7 = strlen((const char *)&__src);
      ++v8;
      if (v7 > 0x7FFFFFFFFFFFFFF7) {
        goto LABEL_32;
      }
    }
    uint64_t v11 = (v7 & 0x7FFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17) {
      uint64_t v11 = v7 | 7;
    }
    uint64_t v12 = v11 + 1;
    p_dst = (stat *)operator new(v11 + 1);
    __dst.st_ino = v7;
    *(void *)&__dst.st_uid = v12 | 0x8000000000000000;
    *(void *)&__dst.st_dev = p_dst;
LABEL_15:
    memcpy(p_dst, &__src, v7);
    goto LABEL_16;
  }
  if (v2[23] < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)v2, *((void *)v2 + 1));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)v2;
    a2->__r_.__value_.__r.__words[2] = *((void *)v2 + 2);
  }
}

void sub_1C585ABA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

BOOL support::fs::createDir(const char *a1, mode_t a2, int a3)
{
  timespec v5 = a1;
  v6.tv_sec = 0xAAAAAAAAAAAAAAAALL;
  v6.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
  *(timespec *)&v29.st_blksize_t size = v6;
  *(timespec *)v29.st_qspare = v6;
  v29.st_birthtimespec = v6;
  *(timespec *)&v29.st_size_t size = v6;
  v29.st_mtimespec = v6;
  v29.st_ctimespec = v6;
  *(timespec *)&v29.st_uid = v6;
  v29.st_atimespec = v6;
  *(timespec *)&v29.st_dev = v6;
  if (a1[23] < 0) {
    a1 = *(const char **)a1;
  }
  if (!stat(a1, &v29)) {
    return 1;
  }
  if (!a3)
  {
    if (v5[23] >= 0) {
      long long v21 = v5;
    }
    else {
      long long v21 = *(const char **)v5;
    }
    return mkdir(v21, a2) == 0;
  }
  v27[1] = (void *)0xAAAAAAAAAAAAAAAALL;
  uint64_t v28 = 0x1AAAAAAAAAAAAAALL;
  v27[0] = (void *)0xAAAAAAAAAAAA002FLL;
  memset(&__p[32], 170, 24);
  ctu::tokenize();
  memset(__p, 0, 24);
  if (v5[23] >= 0) {
    __darwin_ino64_t v7 = v5;
  }
  else {
    __darwin_ino64_t v7 = *(const char **)v5;
  }
  if (*v7 == 47)
  {
    *(_OWORD *)std::string __p = *(_OWORD *)v27;
    *(void *)&__p[16] = v28;
  }
  uint64_t v8 = *(void *)&__p[32];
  if (*(void *)&__p[40] != *(void *)&__p[32])
  {
    unint64_t v9 = 0;
    unsigned int v10 = 1;
    while (1)
    {
      if (v10 != 1)
      {
        if (v28 >= 0) {
          uint64_t v11 = v27;
        }
        else {
          uint64_t v11 = (void **)v27[0];
        }
        if (v28 >= 0) {
          std::string::size_type v12 = HIBYTE(v28);
        }
        else {
          std::string::size_type v12 = (std::string::size_type)v27[1];
        }
        std::string::append((std::string *)__p, (const std::string::value_type *)v11, v12);
        uint64_t v8 = *(void *)&__p[32];
      }
      uint64_t v13 = v8 + 24 * v9;
      int v14 = *(char *)(v13 + 23);
      std::string::size_type v15 = v14 >= 0 ? (const std::string::value_type *)v13 : *(const std::string::value_type **)v13;
      std::string::size_type v16 = v14 >= 0 ? *(unsigned __int8 *)(v13 + 23) : *(void *)(v13 + 8);
      std::string::append((std::string *)__p, v15, v16);
      v17.tv_sec = 0xAAAAAAAAAAAAAAAALL;
      v17.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
      *(timespec *)&v29.st_blksize_t size = v17;
      *(timespec *)v29.st_qspare = v17;
      v29.st_birthtimespec = v17;
      *(timespec *)&v29.st_size_t size = v17;
      v29.st_mtimespec = v17;
      v29.st_ctimespec = v17;
      *(timespec *)&v29.st_uid = v17;
      v29.st_atimespec = v17;
      *(timespec *)&v29.st_dev = v17;
      timespec v18 = __p[23] >= 0 ? __p : *(const char **)__p;
      if (stat(v18, &v29))
      {
        long long v19 = __p[23] >= 0 ? __p : *(const char **)__p;
        if (mkdir(v19, a2)) {
          break;
        }
      }
      unint64_t v9 = v10;
      uint64_t v8 = *(void *)&__p[32];
      ++v10;
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)&__p[40] - *(void *)&__p[32]) >> 3) <= v9) {
        goto LABEL_42;
      }
    }
    uint64_t v20 = 0;
    if ((__p[23] & 0x80000000) == 0) {
      goto LABEL_44;
    }
    goto LABEL_43;
  }
LABEL_42:
  uint64_t v20 = 1;
  if ((__p[23] & 0x80000000) != 0) {
LABEL_43:
  }
    operator delete(*(void **)__p);
LABEL_44:
  uint64_t v22 = *(void *)&__p[32];
  if (*(void *)&__p[32])
  {
    uint64_t v23 = *(void *)&__p[40];
    timespec v24 = *(void **)&__p[32];
    if (*(void *)&__p[40] != *(void *)&__p[32])
    {
      do
      {
        if (*(char *)(v23 - 1) < 0) {
          operator delete(*(void **)(v23 - 24));
        }
        v23 -= 24;
      }
      while (v23 != v22);
      timespec v24 = *(void **)&__p[32];
    }
    *(void *)&__p[40] = v22;
    operator delete(v24);
  }
  if (SHIBYTE(v28) < 0) {
    operator delete(v27[0]);
  }
  return v20;
}

void sub_1C585AE68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a14 < 0)
  {
    operator delete(__p);
    std::vector<std::string>::~vector[abi:ne180100](&a16);
    if ((a24 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(a1);
  }
  else
  {
    std::vector<std::string>::~vector[abi:ne180100](&a16);
    if ((a24 & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  operator delete(a19);
  _Unwind_Resume(a1);
}

BOOL support::fs::rename(const std::__fs::filesystem::path *a1, const std::__fs::filesystem::path *a2, std::error_code *a3)
{
  if ((a1->__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    a1 = (const std::__fs::filesystem::path *)a1->__pn_.__r_.__value_.__r.__words[0];
  }
  if ((a2->__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    a2 = (const std::__fs::filesystem::path *)a2->__pn_.__r_.__value_.__r.__words[0];
  }
  rename(a1, a2, a3);
  return v3 == 0;
}

BOOL support::fs::chmod(const char *a1, mode_t a2)
{
  if (a1[23] < 0) {
    a1 = *(const char **)a1;
  }
  return chmod(a1, a2) == 0;
}

uint64_t support::fs::removeDir(const char *a1)
{
  timespec v1 = (const std::__fs::filesystem::path *)a1;
  v46[2] = *MEMORY[0x1E4F143B8];
  v2.tv_sec = 0xAAAAAAAAAAAAAAAALL;
  v2.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
  *(timespec *)&__dst.st_blkstd::string::size_type size = v2;
  *(timespec *)__dst.st_qspare = v2;
  __dst.st_birthtimespec = v2;
  *(timespec *)&__dst.st_std::string::size_type size = v2;
  __dst.st_mtimespec = v2;
  __dst.st_ctimespec = v2;
  *(timespec *)&__dst.st_uid = v2;
  __dst.st_atimespec = v2;
  *(timespec *)&__dst.st_dev = v2;
  if (a1[23] < 0) {
    a1 = *(const char **)a1;
  }
  if (stat(a1, &__dst)) {
    return 1;
  }
  size_t v42 = 0;
  int v43 = 0;
  uint64_t v44 = 0;
  support::fs::readDir((const char *)v1, (uint64_t)&v42);
  unsigned int v5 = 0;
  while (1)
  {
    unsigned int v6 = v5;
    unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * (((char *)v43 - (unsigned char *)v42) >> 3);
    BOOL v3 = v7 <= v5;
    if (v7 <= v5) {
      break;
    }
    uint64_t v8 = (char *)v42 + 24 * v5;
    memset(&__p, 170, sizeof(__p));
    if (v8[23] < 0)
    {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v8, *((void *)v8 + 1));
    }
    else
    {
      long long v9 = *(_OWORD *)v8;
      __p.__r_.__value_.__r.__words[2] = *((void *)v8 + 2);
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v9;
    }
    int v10 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    if (size == 2)
    {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      if (LOWORD(p_p->__r_.__value_.__l.__data_) == 11822)
      {
LABEL_58:
        char v30 = 1;
        if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_7;
        }
        goto LABEL_6;
      }
    }
    else if (size == 1)
    {
      std::string::size_type v12 = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v12 = &__p;
      }
      if (v12->__r_.__value_.__s.__data_[0] == 46) {
        goto LABEL_58;
      }
    }
    int v14 = SHIBYTE(v1->__pn_.__r_.__value_.__r.__words[2]);
    if (v14 >= 0) {
      size_t v15 = HIBYTE(v1->__pn_.__r_.__value_.__r.__words[2]);
    }
    else {
      size_t v15 = v1->__pn_.__r_.__value_.__l.__size_;
    }
    unint64_t v16 = v15 + 1;
    memset(&__dst, 170, 24);
    if (v15 + 1 >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    if (v16 >= 0x17)
    {
      uint64_t v18 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v16 | 7) != 0x17) {
        uint64_t v18 = v16 | 7;
      }
      uint64_t v19 = v18 + 1;
      p_dst = (char *)operator new(v18 + 1);
      __dst.st_ino = v15 + 1;
      *(void *)&__dst.st_uid = v19 | 0x8000000000000000;
      *(void *)&__dst.st_dev = p_dst;
    }
    else
    {
      memset(&__dst, 0, 24);
      p_dst = (char *)&__dst;
      HIBYTE(__dst.st_gid) = v15 + 1;
      if (!v15) {
        goto LABEL_38;
      }
    }
    if (v14 >= 0) {
      uint64_t v20 = v1;
    }
    else {
      uint64_t v20 = (const std::__fs::filesystem::path *)v1->__pn_.__r_.__value_.__r.__words[0];
    }
    memmove(p_dst, v20, v15);
LABEL_38:
    *(_WORD *)&p_dst[v15] = 47;
    if (v10 >= 0) {
      long long v21 = &__p;
    }
    else {
      long long v21 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    uint64_t v22 = std::string::append((std::string *)&__dst, (const std::string::value_type *)v21, size);
    std::string::size_type v23 = v22->__r_.__value_.__r.__words[0];
    v46[0] = v22->__r_.__value_.__l.__size_;
    *(void *)((char *)v46 + 7) = *(std::string::size_type *)((char *)&v22->__r_.__value_.__r.__words[1] + 7);
    char v24 = HIBYTE(v22->__r_.__value_.__r.__words[2]);
    v22->__r_.__value_.__l.__size_ = 0;
    v22->__r_.__value_.__r.__words[2] = 0;
    v22->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    __p.__r_.__value_.__r.__words[0] = v23;
    __p.__r_.__value_.__l.__size_ = v46[0];
    *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7) = *(void *)((char *)v46 + 7);
    *((unsigned char *)&__p.__r_.__value_.__s + 23) = v24;
    if (SHIBYTE(__dst.st_gid) < 0)
    {
      operator delete(*(void **)&__dst.st_dev);
      char v24 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      std::string::size_type v23 = __p.__r_.__value_.__r.__words[0];
    }
    v25.tv_sec = 0xAAAAAAAAAAAAAAAALL;
    v25.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
    *(timespec *)&__dst.st_blkstd::string::size_type size = v25;
    *(timespec *)__dst.st_qspare = v25;
    __dst.st_birthtimespec = v25;
    *(timespec *)&__dst.st_std::string::size_type size = v25;
    __dst.st_mtimespec = v25;
    __dst.st_ctimespec = v25;
    *(timespec *)&__dst.st_uid = v25;
    __dst.st_atimespec = v25;
    if (v24 >= 0) {
      timespec v26 = &__p;
    }
    else {
      timespec v26 = (std::string *)v23;
    }
    *(timespec *)&__dst.st_dev = v25;
    if (!stat((const char *)v26, &__dst)
      && ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? (unint64_t v31 = &__p)
        : (unint64_t v31 = (std::string *)__p.__r_.__value_.__r.__words[0]),
          (CFTypeRef v32 = opendir((const char *)v31), (v33 = v32) != 0) && (v34 = readdir(v32), closedir(v33), v34)))
    {
      std::string::append(&__p, "/", 1uLL);
      char v30 = support::fs::removeDir(&__p);
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_7;
      }
    }
    else
    {
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v28 = (const std::__fs::filesystem::path *)&__p;
      }
      else {
        uint64_t v28 = (const std::__fs::filesystem::path *)__p.__r_.__value_.__r.__words[0];
      }
      if (!remove(v28, v27)) {
        goto LABEL_58;
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        stat v29 = &__p;
      }
      else {
        stat v29 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      char v30 = unlink((const char *)v29) == 0;
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_7;
      }
    }
LABEL_6:
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_7:
    unsigned int v5 = v6 + 1;
    if ((v30 & 1) == 0) {
      goto LABEL_75;
    }
  }
  if ((v1->__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t v35 = v1;
  }
  else {
    size_t v35 = (const std::__fs::filesystem::path *)v1->__pn_.__r_.__value_.__r.__words[0];
  }
  if (remove(v35, v4))
  {
    if ((v1->__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unint64_t v36 = (const char *)v1;
    }
    else {
      unint64_t v36 = (const char *)v1->__pn_.__r_.__value_.__r.__words[0];
    }
    unlink(v36);
  }
LABEL_75:
  uint64_t v37 = (void **)v42;
  if (v42)
  {
    std::string::pointer v38 = v43;
    timespec v39 = v42;
    if (v43 != v42)
    {
      do
      {
        if (*((char *)v38 - 1) < 0) {
          operator delete(*(v38 - 3));
        }
        v38 -= 3;
      }
      while (v38 != v37);
      timespec v39 = v42;
    }
    int v43 = v37;
    operator delete(v39);
  }
  return v3;
}

void sub_1C585B354(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  std::vector<std::string>::~vector[abi:ne180100]((void **)va);
  _Unwind_Resume(a1);
}

void sub_1C585B36C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if ((a16 & 0x80000000) == 0)
  {
    std::vector<std::string>::~vector[abi:ne180100](&a17);
    _Unwind_Resume(a1);
  }
  operator delete(__p);
  std::vector<std::string>::~vector[abi:ne180100](&a17);
  _Unwind_Resume(a1);
}

BOOL support::fs::removeFile(const std::__fs::filesystem::path *a1, std::error_code *a2)
{
  timespec v2 = a1;
  if ((a1->__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    a1 = (const std::__fs::filesystem::path *)a1->__pn_.__r_.__value_.__r.__words[0];
  }
  if (!remove(a1, a2)) {
    return 1;
  }
  if ((v2->__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    BOOL v3 = (const char *)v2;
  }
  else {
    BOOL v3 = (const char *)v2->__pn_.__r_.__value_.__r.__words[0];
  }
  return unlink(v3) == 0;
}

uint64_t support::fs::removeDirContents(const char *a1, unint64_t a2)
{
  BOOL v3 = a1;
  char v62 = 0;
  unsigned __int8 v63 = 0;
  uint64_t v64 = 0;
  support::fs::readDir(a1, (uint64_t)&v62);
  time_t v56 = time(0);
  unsigned int v5 = (void **)v62;
  timespec v4 = v63;
  if (v62 == v63)
  {
    char v52 = 1;
    if (v62) {
      goto LABEL_105;
    }
    return v52 & 1;
  }
  double v6 = (double)a2;
  char v57 = 1;
  while (1)
  {
    memset(&v61, 170, sizeof(v61));
    if (*((char *)v5 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v61, (const std::string::value_type *)*v5, (std::string::size_type)v5[1]);
    }
    else
    {
      long long v7 = *(_OWORD *)v5;
      v61.__r_.__value_.__r.__words[2] = (std::string::size_type)v5[2];
      *(_OWORD *)&v61.__r_.__value_.__l.__data_ = v7;
    }
    int v8 = SHIBYTE(v61.__r_.__value_.__r.__words[2]);
    std::string::size_type v9 = (v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
       ? HIBYTE(v61.__r_.__value_.__r.__words[2])
       : v61.__r_.__value_.__l.__size_;
    if (v9 == 2) {
      break;
    }
    if (v9 == 1)
    {
      int v10 = (std::string *)v61.__r_.__value_.__r.__words[0];
      if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v10 = &v61;
      }
      if (v10->__r_.__value_.__s.__data_[0] == 46) {
        goto LABEL_95;
      }
    }
LABEL_19:
    memset(__p, 170, 24);
    int v12 = v3[23];
    if (v12 >= 0) {
      size_t v13 = *((unsigned __int8 *)v3 + 23);
    }
    else {
      size_t v13 = *((void *)v3 + 1);
    }
    unint64_t v14 = v13 + 1;
    memset(&__dst, 170, 24);
    if (v13 + 1 > 0x7FFFFFFFFFFFFFF7) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    if (v14 >= 0x17)
    {
      int v58 = SHIBYTE(v61.__r_.__value_.__r.__words[2]);
      std::string::size_type v16 = v9;
      timespec v17 = v5;
      uint64_t v18 = v4;
      uint64_t v19 = v3;
      unint64_t v20 = a2;
      uint64_t v21 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v14 | 7) != 0x17) {
        uint64_t v21 = v14 | 7;
      }
      uint64_t v22 = v21 + 1;
      p_dst = (stat *)operator new(v21 + 1);
      __dst.st_ino = v13 + 1;
      *(void *)&__dst.st_uid = v22 | 0x8000000000000000;
      *(void *)&__dst.st_dev = p_dst;
      a2 = v20;
      BOOL v3 = v19;
      timespec v4 = v18;
      unsigned int v5 = v17;
      std::string::size_type v9 = v16;
      int v8 = v58;
    }
    else
    {
      memset(&__dst, 0, 24);
      p_dst = &__dst;
      HIBYTE(__dst.st_gid) = v13 + 1;
      if (!v13) {
        goto LABEL_33;
      }
    }
    if (v12 >= 0) {
      std::string::size_type v23 = v3;
    }
    else {
      std::string::size_type v23 = *(const char **)v3;
    }
    memmove(p_dst, v23, v13);
LABEL_33:
    *(_WORD *)((char *)&p_dst->st_dev + v13) = 47;
    if (v8 >= 0) {
      char v24 = &v61;
    }
    else {
      char v24 = (std::string *)v61.__r_.__value_.__r.__words[0];
    }
    timespec v25 = std::string::append((std::string *)&__dst, (const std::string::value_type *)v24, v9);
    long long v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
    __p[2] = (void *)v25->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = v26;
    v25->__r_.__value_.__l.__size_ = 0;
    v25->__r_.__value_.__r.__words[2] = 0;
    v25->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__dst.st_gid) < 0)
    {
      operator delete(*(void **)&__dst.st_dev);
      if (!a2) {
        goto LABEL_47;
      }
    }
    else if (!a2)
    {
      goto LABEL_47;
    }
    v27.tv_sec = 0xAAAAAAAAAAAAAAAALL;
    v27.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
    *(timespec *)&__dst.st_blkstd::string::size_type size = v27;
    *(timespec *)__dst.st_qspare = v27;
    __dst.st_birthtimespec = v27;
    *(timespec *)&__dst.st_std::string::size_type size = v27;
    __dst.st_mtimespec = v27;
    __dst.st_ctimespec = v27;
    __dst.st_atimespec = v27;
    *(timespec *)&__dst.st_dev = v27;
    *(timespec *)&__dst.st_uid = v27;
    if (SHIBYTE(__p[2]) >= 0) {
      uint64_t v28 = __p;
    }
    else {
      uint64_t v28 = (void **)__p[0];
    }
    if (!stat((const char *)v28, &__dst) && difftime(v56, __dst.st_ctimespec.tv_sec) >= v6)
    {
LABEL_47:
      v31.tv_sec = 0xAAAAAAAAAAAAAAAALL;
      v31.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
      *(timespec *)&__dst.st_blkstd::string::size_type size = v31;
      *(timespec *)__dst.st_qspare = v31;
      __dst.st_birthtimespec = v31;
      *(timespec *)&__dst.st_std::string::size_type size = v31;
      __dst.st_mtimespec = v31;
      __dst.st_ctimespec = v31;
      __dst.st_atimespec = v31;
      *(timespec *)&__dst.st_dev = v31;
      *(timespec *)&__dst.st_uid = v31;
      if (SHIBYTE(__p[2]) >= 0) {
        CFTypeRef v32 = __p;
      }
      else {
        CFTypeRef v32 = (void **)__p[0];
      }
      if (stat((const char *)v32, &__dst)
        || (SHIBYTE(__p[2]) >= 0 ? (unint64_t v36 = __p) : (unint64_t v36 = (void **)__p[0]),
            (uint64_t v37 = opendir((const char *)v36), (v38 = v37) == 0) || (v39 = readdir(v37), closedir(v38), !v39)))
      {
        if (SHIBYTE(__p[2]) >= 0) {
          xpc_object_t v34 = (const std::__fs::filesystem::path *)__p;
        }
        else {
          xpc_object_t v34 = (const std::__fs::filesystem::path *)__p[0];
        }
        if (!remove(v34, v33)
          || (SHIBYTE(__p[2]) >= 0 ? (size_t v35 = __p) : (size_t v35 = (void **)__p[0]), !unlink((const char *)v35)))
        {
LABEL_89:
          int v30 = 0;
          char v57 = 1;
          char v29 = 1;
          if ((SHIBYTE(__p[2]) & 0x80000000) == 0) {
            goto LABEL_91;
          }
          goto LABEL_90;
        }
        goto LABEL_59;
      }
      int v40 = v3[23];
      if (v40 >= 0) {
        size_t v41 = *((unsigned __int8 *)v3 + 23);
      }
      else {
        size_t v41 = *((void *)v3 + 1);
      }
      unint64_t v42 = v41 + 1;
      memset(&v59, 170, sizeof(v59));
      if (v41 + 1 > 0x7FFFFFFFFFFFFFF7) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      if (v42 >= 0x17)
      {
        uint64_t v44 = (v42 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v42 | 7) != 0x17) {
          uint64_t v44 = v42 | 7;
        }
        uint64_t v45 = v44 + 1;
        int v43 = (char *)operator new(v44 + 1);
        v59.__r_.__value_.__l.__size_ = v41 + 1;
        v59.__r_.__value_.__r.__words[2] = v45 | 0x8000000000000000;
        v59.__r_.__value_.__r.__words[0] = (std::string::size_type)v43;
      }
      else
      {
        memset(&v59, 0, sizeof(v59));
        int v43 = (char *)&v59;
        *((unsigned char *)&v59.__r_.__value_.__s + 23) = v41 + 1;
        if (!v41) {
          goto LABEL_80;
        }
      }
      if (v40 >= 0) {
        uint64_t v46 = v3;
      }
      else {
        uint64_t v46 = *(const char **)v3;
      }
      memmove(v43, v46, v41);
LABEL_80:
      *(_WORD *)&v43[v41] = 47;
      if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        xpc_object_t v47 = &v61;
      }
      else {
        xpc_object_t v47 = (std::string *)v61.__r_.__value_.__r.__words[0];
      }
      if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v61.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v61.__r_.__value_.__l.__size_;
      }
      char v49 = std::string::append(&v59, (const std::string::value_type *)v47, size);
      long long v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
      *(void *)&__dst.st_uid = *((void *)&v49->__r_.__value_.__l + 2);
      *(_OWORD *)&__dst.st_dev = v50;
      v49->__r_.__value_.__l.__size_ = 0;
      v49->__r_.__value_.__r.__words[2] = 0;
      v49->__r_.__value_.__r.__words[0] = 0;
      char v51 = support::fs::removeDir((const char *)&__dst);
      if (SHIBYTE(__dst.st_gid) < 0)
      {
        operator delete(*(void **)&__dst.st_dev);
        if ((SHIBYTE(v59.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_88;
        }
      }
      else if ((SHIBYTE(v59.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_88:
        if (v51) {
          goto LABEL_89;
        }
LABEL_59:
        char v57 = 0;
        char v29 = 0;
        int v30 = 2;
        if ((SHIBYTE(__p[2]) & 0x80000000) == 0) {
          goto LABEL_91;
        }
        goto LABEL_90;
      }
      operator delete(v59.__r_.__value_.__l.__data_);
      if (v51) {
        goto LABEL_89;
      }
      goto LABEL_59;
    }
    char v29 = 0;
    int v30 = 3;
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0) {
      goto LABEL_91;
    }
LABEL_90:
    operator delete(__p[0]);
LABEL_91:
    if (v29) {
      goto LABEL_95;
    }
    if ((SHIBYTE(v61.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_93;
    }
LABEL_96:
    operator delete(v61.__r_.__value_.__l.__data_);
    if (v30 != 3) {
      goto LABEL_97;
    }
LABEL_3:
    v5 += 3;
    if (v5 == v4) {
      goto LABEL_102;
    }
  }
  uint64_t v11 = (std::string *)v61.__r_.__value_.__r.__words[0];
  if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v11 = &v61;
  }
  if (LOWORD(v11->__r_.__value_.__l.__data_) != 11822) {
    goto LABEL_19;
  }
LABEL_95:
  int v30 = 0;
  if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_96;
  }
LABEL_93:
  if (v30 == 3) {
    goto LABEL_3;
  }
LABEL_97:
  if (!v30) {
    goto LABEL_3;
  }
LABEL_102:
  unsigned int v5 = (void **)v62;
  char v52 = v57;
  if (!v62) {
    return v52 & 1;
  }
LABEL_105:
  size_t v53 = v63;
  unint64_t v54 = v5;
  if (v63 != v5)
  {
    do
    {
      if (*((char *)v53 - 1) < 0) {
        operator delete(*(v53 - 3));
      }
      v53 -= 3;
    }
    while (v53 != v5);
    unint64_t v54 = v62;
  }
  unsigned __int8 v63 = v5;
  operator delete(v54);
  return v52 & 1;
}

void sub_1C585B9B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a30 < 0) {
    operator delete(a25);
  }
  std::vector<std::string>::~vector[abi:ne180100](&a31);
  _Unwind_Resume(a1);
}

void support::fs::moveDirUnique(const char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  timespec v4 = (const std::__fs::filesystem::path *)a1;
  v6.tv_sec = 0xAAAAAAAAAAAAAAAALL;
  v6.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
  *(timespec *)&v16.st_blkstd::string::size_type size = v6;
  *(timespec *)v16.st_qspare = v6;
  v16.st_birthtimespec = v6;
  *(timespec *)&v16.st_std::string::size_type size = v6;
  v16.st_mtimespec = v6;
  v16.st_ctimespec = v6;
  *(timespec *)&v16.st_uid = v6;
  v16.st_atimespec = v6;
  *(timespec *)&v16.st_dev = v6;
  if (a1[23] < 0) {
    a1 = *(const char **)a1;
  }
  if (stat(a1, &v16)) {
    goto LABEL_4;
  }
  long long v7 = (v4->__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
     ? (const char *)v4
     : (const char *)v4->__pn_.__r_.__value_.__r.__words[0];
  int v8 = opendir(v7);
  if (!v8) {
    goto LABEL_4;
  }
  std::string::size_type v9 = v8;
  int v10 = readdir(v8);
  closedir(v9);
  if (!v10) {
    goto LABEL_4;
  }
  memset((void *)a3, 170, 24);
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string __p = *(std::string *)a2;
  }
  support::fs::createUniquePath((const char *)&__p, (std::string *)a3);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if ((v4->__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v12 = v4;
  }
  else {
    int v12 = (const std::__fs::filesystem::path *)v4->__pn_.__r_.__value_.__r.__words[0];
  }
  if (*(char *)(a3 + 23) >= 0) {
    size_t v13 = (const std::__fs::filesystem::path *)a3;
  }
  else {
    size_t v13 = *(const std::__fs::filesystem::path **)a3;
  }
  rename(v12, v13, v11);
  if (v14)
  {
    if (*(char *)(a3 + 23) < 0) {
      operator delete(*(void **)a3);
    }
LABEL_4:
    *(unsigned char *)(a3 + 23) = 0;
    *(unsigned char *)a3 = 0;
  }
}

void sub_1C585BBC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void support::fs::getFileName(std::string *a1@<X8>)
{
  memset(__p, 170, sizeof(__p));
  ctu::tokenize();
  if (*((char *)__p[1] - 1) < 0)
  {
    std::string::__init_copy_ctor_external(a1, *((const std::string::value_type **)__p[1] - 3), *((void *)__p[1] - 2));
  }
  else
  {
    long long v2 = *(_OWORD *)((char *)__p[1] - 24);
    a1->__r_.__value_.__r.__words[2] = *((void *)__p[1] - 1);
    *(_OWORD *)&a1->__r_.__value_.__l.__data_ = v2;
  }
  if (__p[0])
  {
    BOOL v3 = (void **)__p[1];
    timespec v4 = __p[0];
    if (__p[1] != __p[0])
    {
      do
      {
        if (*((char *)v3 - 1) < 0) {
          operator delete(*(v3 - 3));
        }
        v3 -= 3;
      }
      while (v3 != __p[0]);
      timespec v4 = __p[0];
    }
    operator delete(v4);
  }
}

void sub_1C585BC98(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<std::string>::~vector[abi:ne180100]((void **)va);
  _Unwind_Resume(a1);
}

uint64_t support::fs::lockDir(const char *a1)
{
  if (a1[23] < 0) {
    a1 = *(const char **)a1;
  }
  uint64_t v1 = open(a1, 0);
  if ((v1 & 0x80000000) != 0) {
    return v1;
  }
  int v5 = 1;
  v3[0] = 0;
  v3[1] = 0;
  pid_t v4 = getpid();
  if ((fcntl(v1, 9, v3) & 0x80000000) == 0) {
    return v1;
  }
  close(v1);
  return 0xFFFFFFFFLL;
}

BOOL support::fs::unlockDir(support::fs *this)
{
  int v1 = (int)this;
  int v6 = 2;
  v4[0] = 0;
  v4[1] = 0;
  pid_t v5 = getpid();
  BOOL v2 = fcntl(v1, 9, v4) == 0;
  close(v1);
  return v2;
}

BOOL support::fs::getFilteredFiles(const char *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v59 = *MEMORY[0x1E4F143B8];
  *__error() = 0;
  if (a1[23] < 0)
  {
    long long v7 = opendir(*(const char **)a1);
    if (v7) {
      goto LABEL_3;
    }
LABEL_78:
    uint64_t v45 = GetOsLogContext()[1];
    BOOL result = os_log_type_enabled(v45, OS_LOG_TYPE_ERROR);
    if (result)
    {
      if (a1[23] < 0) {
        a1 = *(const char **)a1;
      }
      xpc_object_t v47 = __error();
      CFTypeRef v48 = strerror(*v47);
      v58.st_dev = 136315394;
      *(void *)&v58.st_mode = a1;
      WORD2(v58.st_ino) = 2080;
      *(__darwin_ino64_t *)((char *)&v58.st_ino + 6) = (__darwin_ino64_t)v48;
      _os_log_error_impl(&dword_1C5767000, v45, OS_LOG_TYPE_ERROR, "Error %s (%s)\n", (uint8_t *)&v58, 0x16u);
      return 0;
    }
    return result;
  }
  long long v7 = opendir(a1);
  if (!v7) {
    goto LABEL_78;
  }
LABEL_3:
  int v8 = v7;
  std::string::size_type v9 = readdir(v7);
  if (v9)
  {
    char v51 = a1;
    char v49 = 0;
    while (1)
    {
      d_name = v9->d_name;
      memset(__dst, 170, sizeof(__dst));
      size_t v11 = strlen(v9->d_name);
      if (v11 > 0x7FFFFFFFFFFFFFF7) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      size_t v12 = v11;
      if (v11 >= 0x17) {
        break;
      }
      __dst[23] = v11;
      size_t v13 = __dst;
      if (v11) {
        goto LABEL_12;
      }
LABEL_13:
      v13[v12] = 0;
      uint64_t v16 = __dst[23];
      int v17 = __dst[23];
      uint64_t v18 = *(void *)&__dst[8];
      if (__dst[23] >= 0) {
        std::string::size_type v19 = __dst[23];
      }
      else {
        std::string::size_type v19 = *(void *)&__dst[8];
      }
      if (v19 == 2)
      {
        uint64_t v21 = *(_WORD **)__dst;
        if (__dst[23] >= 0) {
          uint64_t v21 = __dst;
        }
        if (*v21 == 11822) {
          goto LABEL_73;
        }
      }
      else if (v19 == 1)
      {
        unint64_t v20 = *(unsigned char **)__dst;
        if (__dst[23] >= 0) {
          unint64_t v20 = __dst;
        }
        if (*v20 == 46) {
          goto LABEL_73;
        }
      }
      if (a4) {
        goto LABEL_53;
      }
      uint64_t v22 = v8;
      uint64_t v23 = a4;
      uint64_t v24 = a3;
      v25.tv_sec = 0xAAAAAAAAAAAAAAAALL;
      v25.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
      *(timespec *)&v58.st_blkstd::string::size_type size = v25;
      *(timespec *)v58.st_qspare = v25;
      v58.st_birthtimespec = v25;
      *(timespec *)&v58.st_std::string::size_type size = v25;
      v58.st_mtimespec = v25;
      v58.st_ctimespec = v25;
      *(timespec *)&v58.st_uid = v25;
      v58.st_atimespec = v25;
      *(timespec *)&v58.st_dev = v25;
      int v26 = v51[23];
      if (v26 >= 0) {
        size_t v27 = *((unsigned __int8 *)v51 + 23);
      }
      else {
        size_t v27 = *((void *)v51 + 1);
      }
      unint64_t v28 = v27 + 1;
      memset(&v52, 170, sizeof(v52));
      if (v27 + 1 > 0x7FFFFFFFFFFFFFF7) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      if (v28 >= 0x17)
      {
        uint64_t v30 = (v28 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v28 | 7) != 0x17) {
          uint64_t v30 = v28 | 7;
        }
        uint64_t v31 = v30 + 1;
        char v29 = (char *)operator new(v30 + 1);
        v52.__r_.__value_.__l.__size_ = v27 + 1;
        v52.__r_.__value_.__r.__words[2] = v31 | 0x8000000000000000;
        v52.__r_.__value_.__r.__words[0] = (std::string::size_type)v29;
      }
      else
      {
        memset(&v52, 0, sizeof(v52));
        char v29 = (char *)&v52;
        *((unsigned char *)&v52.__r_.__value_.__s + 23) = v27 + 1;
        if (!v27) {
          goto LABEL_40;
        }
      }
      if (v26 >= 0) {
        CFTypeRef v32 = v51;
      }
      else {
        CFTypeRef v32 = *(const char **)v51;
      }
      memmove(v29, v32, v27);
LABEL_40:
      a3 = v24;
      *(_WORD *)&v29[v27] = 47;
      if (v17 >= 0) {
        char v33 = __dst;
      }
      else {
        char v33 = *(const std::string::value_type **)__dst;
      }
      xpc_object_t v34 = std::string::append(&v52, v33, v19);
      a4 = v23;
      long long v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
      v55[0] = *((void *)&v34->__r_.__value_.__l + 2);
      *(_OWORD *)std::string __p = v35;
      v34->__r_.__value_.__l.__size_ = 0;
      v34->__r_.__value_.__r.__words[2] = 0;
      v34->__r_.__value_.__r.__words[0] = 0;
      if (v55[0] >= 0) {
        unint64_t v36 = __p;
      }
      else {
        unint64_t v36 = (void **)__p[0];
      }
      lstat((const char *)v36, &v58);
      int v8 = v22;
      if (SHIBYTE(v55[0]) < 0)
      {
        operator delete(__p[0]);
        if ((SHIBYTE(v52.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_48:
          if ((v58.st_mode & 0xF000) != 0xA000) {
            goto LABEL_52;
          }
          goto LABEL_73;
        }
      }
      else if ((SHIBYTE(v52.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_48;
      }
      operator delete(v52.__r_.__value_.__l.__data_);
      if ((v58.st_mode & 0xF000) != 0xA000)
      {
LABEL_52:
        uint64_t v16 = __dst[23];
        uint64_t v18 = *(void *)&__dst[8];
        LOBYTE(v17) = __dst[23];
LABEL_53:
        if ((v17 & 0x80u) == 0) {
          uint64_t v37 = (std::sub_match<const char *> *)__dst;
        }
        else {
          uint64_t v37 = *(std::sub_match<const char *> **)__dst;
        }
        if ((v17 & 0x80u) != 0) {
          uint64_t v16 = v18;
        }
        std::string::pointer v38 = (std::sub_match<std::__wrap_iter<const char *>> *)((char *)v37 + v16);
        *(void *)&long long v39 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v39 + 1) = 0xAAAAAAAAAAAAAAAALL;
        long long v56 = v39;
        v55[6] = 0xAAAAAAAAAAAAAA00;
        v55[3] = 0xAAAAAAAAAAAAAAAALL;
        v55[4] = 0;
        v55[5] = 0;
        v55[7] = 0;
        char v55[8] = 0;
        LOBYTE(v56) = 0;
        BYTE8(v56) = 0;
        uint64_t v57 = 0;
        *(_OWORD *)std::string __p = 0u;
        memset(v55, 0, 25);
        *(_OWORD *)&v58.st_birthtimespec.tv_nsec = v39;
        v58.st_ctimespec.tv_sec = 0xAAAAAAAAAAAAAAAALL;
        v58.st_atimespec.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
        memset(&v58.st_mtimespec, 0, 17);
        memset(&v58.st_ctimespec.tv_nsec, 0, 17);
        LOBYTE(v58.st_size) = 0;
        v58.st_blocks = 0;
        memset(&v58, 0, 41);
        int v40 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>(a2, v37, (std::sub_match<const char *> *)((char *)v37 + v16), (std::vector<std::csub_match> *)&v58, 4160);
        std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>((std::vector<std::ssub_match> *)__p, (uint64_t)v37, v38, (uint64_t *)&v58.st_dev, 0);
        if (*(void *)&v58.st_dev)
        {
          v58.st_ino = *(void *)&v58.st_dev;
          operator delete(*(void **)&v58.st_dev);
        }
        if ((_BYTE)v56) {
          int v41 = v40 ^ 1;
        }
        else {
          int v41 = 1;
        }
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        if ((v40 & v41) != 0)
        {
          unint64_t v42 = *(void *)(a3 + 8);
          if (v42 >= *(void *)(a3 + 16))
          {
            uint64_t v44 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)a3, (uint64_t)__dst);
          }
          else
          {
            if ((__dst[23] & 0x80000000) != 0)
            {
              std::string::__init_copy_ctor_external(*(std::string **)(a3 + 8), *(const std::string::value_type **)__dst, *(std::string::size_type *)&__dst[8]);
            }
            else
            {
              long long v43 = *(_OWORD *)__dst;
              *(void *)(v42 + 16) = *(void *)&__dst[16];
              *(_OWORD *)unint64_t v42 = v43;
            }
            uint64_t v44 = (std::string *)(v42 + 24);
            *(void *)(a3 + 8) = v42 + 24;
          }
          *(void *)(a3 + 8) = v44;
          char v49 = 1;
        }
      }
LABEL_73:
      if ((__dst[23] & 0x80000000) != 0) {
        operator delete(*(void **)__dst);
      }
      std::string::size_type v9 = readdir(v8);
      if (!v9) {
        goto LABEL_83;
      }
    }
    uint64_t v14 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17) {
      uint64_t v14 = v11 | 7;
    }
    uint64_t v15 = v14 + 1;
    size_t v13 = operator new(v14 + 1);
    *(void *)&__dst[8] = v12;
    *(void *)&__dst[16] = v15 | 0x8000000000000000;
    *(void *)stat __dst = v13;
LABEL_12:
    memmove(v13, d_name, v12);
    goto LABEL_13;
  }
  char v49 = 0;
LABEL_83:
  closedir(v8);
  return v49 & 1;
}

void sub_1C585C318(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *a48,uint64_t a49)
{
  *(void *)(v49 + 8) = v50;
  if (a30 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1C585C5A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void support::fs::getBasePath(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>)
{
  BOOL v2 = a1;
  if (((char)a1[23] & 0x80000000) == 0)
  {
    if (!a1[23])
    {
      *(_OWORD *)a2 = *(_OWORD *)a1;
      *(void *)(a2 + 16) = *((void *)a1 + 2);
      return;
    }
LABEL_6:
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    memset(&__p, 170, sizeof(__p));
    support::fs::getFileName(&__p);
    size_t v4 = *((void *)v2 + 1);
    if ((v2[23] & 0x80u) == 0)
    {
      size_t v5 = v2[23];
    }
    else
    {
      BOOL v2 = *(unsigned __int8 **)v2;
      size_t v5 = v4;
    }
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    char v7 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    std::string::size_type v9 = &v2[v5];
    if (v5) {
      BOOL v10 = size == 0;
    }
    else {
      BOOL v10 = 1;
    }
    if (v10)
    {
      uint64_t v15 = &v2[v5];
    }
    else
    {
      uint64_t v14 = v2;
      uint64_t v15 = &v2[v5];
      do
      {
        if (*v14 == p_p->__r_.__value_.__s.__data_[0])
        {
          uint64_t v16 = 1;
          while (size != v16)
          {
            if (&v14[v16] == v9) {
              goto LABEL_20;
            }
            int v17 = v14[v16];
            int v18 = p_p->__r_.__value_.__s.__data_[v16++];
            if (v17 != v18) {
              goto LABEL_37;
            }
          }
          uint64_t v15 = v14;
        }
LABEL_37:
        ++v14;
      }
      while (v14 != v9);
    }
LABEL_20:
    BOOL v11 = v15 != v9 || size == 0;
    if (!v11 || v15 - v2 == -1) {
      goto LABEL_34;
    }
    if (v5 >= v15 - v2) {
      size_t v12 = v15 - v2;
    }
    else {
      size_t v12 = v5;
    }
    if (v12 >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    if (v12 >= 0x17)
    {
      uint64_t v19 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v12 | 7) != 0x17) {
        uint64_t v19 = v12 | 7;
      }
      uint64_t v20 = v19 + 1;
      size_t v13 = (long long *)operator new(v19 + 1);
      *((void *)&v22 + 1) = v12;
      unint64_t v23 = v20 | 0x8000000000000000;
      *(void *)&long long v22 = v13;
    }
    else
    {
      HIBYTE(v23) = v12;
      size_t v13 = &v22;
      if (!v12)
      {
        LOBYTE(v22) = 0;
        if ((*(char *)(a2 + 23) & 0x80000000) == 0)
        {
LABEL_33:
          *(_OWORD *)a2 = v22;
          *(void *)(a2 + 16) = v23;
          char v7 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
LABEL_34:
          if (v7 < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          return;
        }
LABEL_49:
        operator delete(*(void **)a2);
        goto LABEL_33;
      }
    }
    memmove(v13, v2, v12);
    *((unsigned char *)v13 + v12) = 0;
    if ((*(char *)(a2 + 23) & 0x80000000) == 0) {
      goto LABEL_33;
    }
    goto LABEL_49;
  }
  if (*((void *)a1 + 1)) {
    goto LABEL_6;
  }
  uint64_t v21 = *(const std::string::value_type **)a1;

  std::string::__init_copy_ctor_external((std::string *)a2, v21, 0);
}

void sub_1C585C7FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void support::fs::getLastNumberDir(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  memset(&v69, 170, sizeof(v69));
  if (*(char *)(a1 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v69, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
  }
  else {
    std::string v69 = *(std::string *)a1;
  }
  size_t v4 = (std::string *)v69.__r_.__value_.__r.__words[0];
  if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t v5 = &v69;
  }
  else {
    size_t v5 = (std::string *)v69.__r_.__value_.__r.__words[0];
  }
  if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v69.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v69.__r_.__value_.__l.__size_;
  }
  std::string::size_type v7 = size + 1;
  do
  {
    std::string::size_type v8 = v7 - 1;
    if (v7 == 1) {
      goto LABEL_20;
    }
    int v9 = v5->__r_.__value_.__s.__data_[v7-- - 2];
  }
  while (v9 == 47);
  if (v8)
  {
    std::string::size_type v10 = v8 - 1;
    if ((*((unsigned char *)&v69.__r_.__value_.__s + 23) & 0x80) != 0)
    {
      if (v69.__r_.__value_.__l.__size_ > v10)
      {
        v69.__r_.__value_.__l.__size_ = v8;
        goto LABEL_19;
      }
    }
    else if (v10 < HIBYTE(v69.__r_.__value_.__r.__words[2]))
    {
      *((unsigned char *)&v69.__r_.__value_.__s + 23) = v8 & 0x7F;
      size_t v4 = &v69;
LABEL_19:
      v4->__r_.__value_.__s.__data_[v8] = 0;
      goto LABEL_20;
    }
    std::string::__throw_out_of_range[abi:ne180100]();
  }
LABEL_20:
  memset(&v68, 170, sizeof(v68));
  support::fs::getBasePath((unsigned __int8 *)&v69, (uint64_t)&v68);
  std::string::size_type v11 = HIBYTE(v69.__r_.__value_.__r.__words[2]);
  if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v11 = v69.__r_.__value_.__l.__size_;
  }
  if (!v11) {
    goto LABEL_33;
  }
  std::string::size_type v12 = HIBYTE(v68.__r_.__value_.__r.__words[2]);
  if ((v68.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v12 = v68.__r_.__value_.__l.__size_;
  }
  if (!v12)
  {
LABEL_33:
    if ((*(char *)(a1 + 23) & 0x80000000) == 0)
    {
      *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
      a2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 16);
      if ((SHIBYTE(v68.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_125;
      }
      goto LABEL_130;
    }
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
    goto LABEL_124;
  }
  memset(&v67, 170, sizeof(v67));
  support::fs::getFileName(&v67);
  int v13 = SHIBYTE(v67.__r_.__value_.__r.__words[2]);
  if ((v67.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t v14 = HIBYTE(v67.__r_.__value_.__r.__words[2]);
  }
  else {
    size_t v14 = v67.__r_.__value_.__l.__size_;
  }
  unint64_t v15 = v14 + 13;
  memset(__dst, 170, sizeof(__dst));
  if (v14 + 13 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v15 >= 0x17)
  {
    uint64_t v17 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v15 | 7) != 0x17) {
      uint64_t v17 = v15 | 7;
    }
    uint64_t v18 = v17 + 1;
    uint64_t v16 = (void **)operator new(v17 + 1);
    __dst[1] = (void *)(v14 + 13);
    _OWORD __dst[2] = (void *)(v18 | 0x8000000000000000);
    __dst[0] = v16;
  }
  else
  {
    memset(__dst, 0, sizeof(__dst));
    uint64_t v16 = __dst;
    HIBYTE(__dst[2]) = v14 + 13;
    if (!v14) {
      goto LABEL_44;
    }
  }
  if (v13 >= 0) {
    uint64_t v19 = &v67;
  }
  else {
    uint64_t v19 = (std::string *)v67.__r_.__value_.__r.__words[0];
  }
  memmove(v16, v19, v14);
LABEL_44:
  strcpy((char *)v16 + v14, "-[[:alnum:]]*");
  *(void *)&long long v20 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v20 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&v64[32] = v20;
  long long v65 = v20;
  *(_OWORD *)uint64_t v64 = v20;
  *(_OWORD *)&v64[16] = v20;
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]<std::char_traits<char>,std::allocator<char>>((uint64_t)v64, (uint64_t)__dst, 0);
  std::string v61 = 0;
  char v62 = 0;
  uint64_t v63 = 0;
  if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v60, v68.__r_.__value_.__l.__data_, v68.__r_.__value_.__l.__size_);
  }
  else {
    std::string v60 = v68;
  }
  std::locale::locale(&v54, (const std::locale *)v64);
  long long v55 = *(_OWORD *)&v64[8];
  long long v56 = *(_OWORD *)&v64[24];
  uint64_t v57 = *(void *)&v64[40];
  stat v58 = (std::__shared_weak_count *)v65;
  if ((void)v65) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v65 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v59 = *((void *)&v65 + 1);
  if (!support::fs::getFilteredFiles((const char *)&v60, (uint64_t)&v54, (uint64_t)&v61, 0))
  {
    uint64_t v24 = v58;
    if (v58 && !atomic_fetch_add(&v58->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
    std::locale::~locale(&v54);
    if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v60.__r_.__value_.__l.__data_);
    }
    goto LABEL_84;
  }
  uint64_t v21 = (void **)v61;
  long long v22 = v62;
  unint64_t v23 = v58;
  if (v58 && !atomic_fetch_add(&v58->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
  }
  std::locale::~locale(&v54);
  if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v60.__r_.__value_.__l.__data_);
    if (v21 == v22)
    {
LABEL_84:
      if ((*(char *)(a1 + 23) & 0x80000000) == 0)
      {
        *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
        a2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 16);
        xpc_object_t v34 = (void **)v61;
        if (!v61) {
          goto LABEL_120;
        }
        goto LABEL_113;
      }
      std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
LABEL_112:
      xpc_object_t v34 = (void **)v61;
      if (!v61) {
        goto LABEL_120;
      }
      goto LABEL_113;
    }
  }
  else if (v21 == v22)
  {
    goto LABEL_84;
  }
  timespec v25 = (char *)v61;
  int v26 = (char *)v62;
  if (v61 != v62)
  {
    unsigned int v27 = 0;
    while (1)
    {
      memset(&__p, 170, sizeof(__p));
      ctu::tokenize();
      memset(&v52, 170, sizeof(v52));
      if (*(char *)(__p.__r_.__value_.__l.__size_ - 1) < 0)
      {
        std::string::__init_copy_ctor_external(&v52, *(const std::string::value_type **)(__p.__r_.__value_.__l.__size_ - 24), *(void *)(__p.__r_.__value_.__l.__size_ - 16));
      }
      else
      {
        long long v29 = *(_OWORD *)(__p.__r_.__value_.__l.__size_ - 24);
        v52.__r_.__value_.__r.__words[2] = *(void *)(__p.__r_.__value_.__l.__size_ - 8);
        *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v29;
      }
      if ((v52.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v30 = &v52;
      }
      else {
        uint64_t v30 = (std::string *)v52.__r_.__value_.__r.__words[0];
      }
      unsigned int v31 = strtol((const char *)v30, 0, 0);
      if (v27 <= v31) {
        unsigned int v27 = v31;
      }
      if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v52.__r_.__value_.__l.__data_);
        std::string::size_type v32 = __p.__r_.__value_.__r.__words[0];
        if (__p.__r_.__value_.__r.__words[0])
        {
LABEL_79:
          std::string::size_type v33 = __p.__r_.__value_.__l.__size_;
          unint64_t v28 = (void *)v32;
          if (__p.__r_.__value_.__l.__size_ != v32)
          {
            do
            {
              if (*(char *)(v33 - 1) < 0) {
                operator delete(*(void **)(v33 - 24));
              }
              v33 -= 24;
            }
            while (v33 != v32);
            unint64_t v28 = (void *)__p.__r_.__value_.__r.__words[0];
          }
          __p.__r_.__value_.__l.__size_ = v32;
          operator delete(v28);
        }
      }
      else
      {
        std::string::size_type v32 = __p.__r_.__value_.__r.__words[0];
        if (__p.__r_.__value_.__r.__words[0]) {
          goto LABEL_79;
        }
      }
      v25 += 24;
      if (v25 == v26) {
        goto LABEL_89;
      }
    }
  }
  unsigned int v27 = 0;
LABEL_89:
  int v35 = SHIBYTE(v69.__r_.__value_.__r.__words[2]);
  if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t v36 = HIBYTE(v69.__r_.__value_.__r.__words[2]);
  }
  else {
    size_t v36 = v69.__r_.__value_.__l.__size_;
  }
  unint64_t v37 = v36 + 1;
  memset(&v52, 170, sizeof(v52));
  if (v36 + 1 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v37 >= 0x17)
  {
    uint64_t v39 = (v37 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v37 | 7) != 0x17) {
      uint64_t v39 = v37 | 7;
    }
    uint64_t v40 = v39 + 1;
    std::string::pointer v38 = (char *)operator new(v39 + 1);
    v52.__r_.__value_.__l.__size_ = v36 + 1;
    v52.__r_.__value_.__r.__words[2] = v40 | 0x8000000000000000;
    v52.__r_.__value_.__r.__words[0] = (std::string::size_type)v38;
  }
  else
  {
    memset(&v52, 0, sizeof(v52));
    std::string::pointer v38 = (char *)&v52;
    *((unsigned char *)&v52.__r_.__value_.__s + 23) = v36 + 1;
    if (!v36) {
      goto LABEL_103;
    }
  }
  if (v35 >= 0) {
    int v41 = &v69;
  }
  else {
    int v41 = (std::string *)v69.__r_.__value_.__r.__words[0];
  }
  memmove(v38, v41, v36);
LABEL_103:
  *(_WORD *)&v38[v36] = 45;
  std::to_string(&v51, v27);
  if ((v51.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    unint64_t v42 = &v51;
  }
  else {
    unint64_t v42 = (std::string *)v51.__r_.__value_.__r.__words[0];
  }
  if ((v51.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v43 = HIBYTE(v51.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v43 = v51.__r_.__value_.__l.__size_;
  }
  uint64_t v44 = std::string::append(&v52, (const std::string::value_type *)v42, v43);
  long long v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v44->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v45;
  v44->__r_.__value_.__l.__size_ = 0;
  v44->__r_.__value_.__r.__words[2] = 0;
  v44->__r_.__value_.__r.__words[0] = 0;
  uint64_t v46 = std::string::append(&__p, "/", 1uLL);
  long long v47 = *(_OWORD *)&v46->__r_.__value_.__l.__data_;
  a2->__r_.__value_.__r.__words[2] = v46->__r_.__value_.__r.__words[2];
  *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v47;
  v46->__r_.__value_.__l.__size_ = 0;
  v46->__r_.__value_.__r.__words[2] = 0;
  v46->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v51.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_111:
      if ((SHIBYTE(v52.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_112;
      }
      goto LABEL_134;
    }
  }
  else if ((SHIBYTE(v51.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_111;
  }
  operator delete(v51.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v52.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_112;
  }
LABEL_134:
  operator delete(v52.__r_.__value_.__l.__data_);
  xpc_object_t v34 = (void **)v61;
  if (!v61) {
    goto LABEL_120;
  }
LABEL_113:
  CFTypeRef v48 = v62;
  uint64_t v49 = v34;
  if (v62 != v34)
  {
    do
    {
      if (*((char *)v48 - 1) < 0) {
        operator delete(*(v48 - 3));
      }
      v48 -= 3;
    }
    while (v48 != v34);
    uint64_t v49 = v61;
  }
  char v62 = v34;
  operator delete(v49);
LABEL_120:
  uint64_t v50 = (std::__shared_weak_count *)v65;
  if ((void)v65 && !atomic_fetch_add((atomic_ullong *volatile)(v65 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
    std::__shared_weak_count::__release_weak(v50);
    std::locale::~locale((std::locale *)v64);
    if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
    {
LABEL_123:
      if ((SHIBYTE(v67.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_124;
      }
      goto LABEL_129;
    }
  }
  else
  {
    std::locale::~locale((std::locale *)v64);
    if ((SHIBYTE(__dst[2]) & 0x80000000) == 0) {
      goto LABEL_123;
    }
  }
  operator delete(__dst[0]);
  if ((SHIBYTE(v67.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_124:
    if ((SHIBYTE(v68.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_125;
    }
    goto LABEL_130;
  }
LABEL_129:
  operator delete(v67.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v68.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_125:
    if ((SHIBYTE(v69.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
LABEL_131:
    operator delete(v69.__r_.__value_.__l.__data_);
    return;
  }
LABEL_130:
  operator delete(v68.__r_.__value_.__l.__data_);
  if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_131;
  }
}