void sub_1C58D6878(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, xpc_object_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,xpc_object_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *aBlock)
{
  void *v35;
  uint64_t v36;
  const void *v38;
  std::__shared_weak_count *v39;

  xpc_release(object);
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  if (a34 < 0) {
    operator delete(a29);
  }
  v38 = *(const void **)(v36 + 16);
  if (v38) {
    _Block_release(v38);
  }
  xpc_release(*(xpc_object_t *)(v36 + 8));
  operator delete((void *)v36);
  v39 = (std::__shared_weak_count *)v35[2];
  if (v39)
  {
    if (!atomic_fetch_add(&v39->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  operator delete(v35);
  _Unwind_Resume(a1);
}

void sub_1C58D6A88(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI10LogTrackerE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEENK3__0clEvEUb5_EUlvE_EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_(uint64_t **a1)
{
  uint64_t v49 = *MEMORY[0x1E4F143B8];
  v2 = *a1;
  v3 = (void *)**a1;
  memset(&v44, 170, sizeof(v44));
  xpc_object_t value = xpc_dictionary_get_value((xpc_object_t)v2[1], (const char *)*MEMORY[0x1E4F4C1A0]);
  object[0] = value;
  if (value) {
    xpc_retain(value);
  }
  else {
    object[0] = xpc_null_create();
  }
  long long buf = 0uLL;
  v46 = 0;
  xpc::dyn_cast_or_default();
  xpc_release(object[0]);
  memset(object, 170, sizeof(object));
  xpc_object_t v5 = xpc_dictionary_get_value((xpc_object_t)v2[1], (const char *)*MEMORY[0x1E4F4C6A8]);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v5;
  if (v5) {
    xpc_retain(v5);
  }
  else {
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
  }
  long long buf = 0uLL;
  v46 = 0;
  xpc::dyn_cast_or_default();
  xpc_release(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__p, v44.__r_.__value_.__l.__data_, v44.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = v44;
  }
  char isSupported = abm::trace::isSupported();
  char v7 = isSupported;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (v7)
    {
LABEL_12:
      unsigned int v41 = -534716416;
      xpc_object_t v40 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
      xpc_object_t v8 = xpc_dictionary_create(0, 0, 0);
      xpc_object_t v9 = v8;
      if (v8)
      {
        xpc_object_t v40 = v8;
      }
      else
      {
        xpc_object_t v9 = xpc_null_create();
        xpc_object_t v40 = v9;
        if (!v9)
        {
          xpc_object_t v15 = xpc_null_create();
          xpc_object_t v9 = 0;
          goto LABEL_25;
        }
      }
      if (MEMORY[0x1C8792D30](v9) == MEMORY[0x1E4F14590])
      {
        xpc_retain(v9);
        goto LABEL_26;
      }
      xpc_object_t v15 = xpc_null_create();
LABEL_25:
      xpc_object_t v40 = v15;
LABEL_26:
      xpc_release(v9);
      v16 = (void *)v2[1];
      xpc_object_t v39 = v16;
      if (v16)
      {
        xpc_retain(v16);
      }
      else
      {
        v16 = xpc_null_create();
        xpc_object_t v39 = v16;
      }
      BOOL isInternalProperty_sync = LogTracker::isInternalProperty_sync((uint64_t)v3, &v39, &v40, &v41);
      xpc_release(v16);
      xpc_object_t v39 = 0;
      if (isInternalProperty_sync)
      {
        dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int &,xpc::dict&>(v2 + 2, &v41, &v40);
LABEL_64:
        xpc_release(v40);
        goto LABEL_65;
      }
      if ((*(unsigned int (**)(void *))(*v3 + 88))(v3))
      {
        long long buf = 0uLL;
        v46 = 0;
        BOOL v18 = prop::get((char *)&v44, (char *)object, (uint64_t)&buf);
        v19 = (void *)v2[1];
        __dst[0] = v19;
        if (v19)
        {
          xpc_retain(v19);
        }
        else
        {
          v19 = xpc_null_create();
          __dst[0] = v19;
        }
        if (SHIBYTE(v46) >= 0) {
          p_long long buf = (const char *)&buf;
        }
        else {
          p_long long buf = (const char *)buf;
        }
        xpc_object_t v28 = xpc_string_create(p_buf);
        if (!v28) {
          xpc_object_t v28 = xpc_null_create();
        }
        xpc_dictionary_set_value(v19, (const char *)*MEMORY[0x1E4F4C800], v28);
        xpc_object_t v29 = xpc_null_create();
        xpc_release(v28);
        xpc_release(v29);
        if (v18) {
          int v30 = 0;
        }
        else {
          int v30 = -534716416;
        }
        LODWORD(v36) = v30;
        dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(v2 + 2, (unsigned int *)&v36, __dst);
        xpc_release(__dst[0]);
        if (SHIBYTE(v46) < 0) {
          operator delete((void *)buf);
        }
        goto LABEL_64;
      }
      v20 = (const void *)*MEMORY[0x1E4F4D060];
      size_t v21 = strlen((const char *)*MEMORY[0x1E4F4D060]);
      if (v21 >= 0x7FFFFFFFFFFFFFF8) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      v22 = (void *)v21;
      if (v21 >= 0x17)
      {
        uint64_t v24 = (v21 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v21 | 7) != 0x17) {
          uint64_t v24 = v21 | 7;
        }
        uint64_t v25 = v24 + 1;
        v23 = (void **)operator new(v24 + 1);
        __dst[1] = v22;
        unint64_t v38 = v25 | 0x8000000000000000;
        __dst[0] = v23;
      }
      else
      {
        HIBYTE(v38) = v21;
        v23 = __dst;
        if (!v21) {
          goto LABEL_42;
        }
      }
      memmove(v23, v20, (size_t)v22);
LABEL_42:
      *((unsigned char *)v22 + (void)v23) = 0;
      v26 = (void *)v2[1];
      xpc_object_t v36 = v26;
      if (v26)
      {
        xpc_retain(v26);
      }
      else
      {
        v26 = xpc_null_create();
        xpc_object_t v36 = v26;
      }
      *(void *)&long long buf = MEMORY[0x1E4F143A8];
      *((void *)&buf + 1) = 3321888768;
      v46 = ___ZZZZN10LogTracker10initializeEN8dispatch13group_sessionEENK3__0clEvEUb5_ENKUlvE_clEv_block_invoke;
      v47 = &__block_descriptor_40_e8_32c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE_e28_v20__0i8_dict__object__v__12l;
      v31 = (void *)v2[2];
      if (v31) {
        v31 = _Block_copy(v31);
      }
      v48 = v31;
      v32 = _Block_copy(&buf);
      v35 = v32;
      Service::runCommand((uint64_t)v3, (uint64_t)__dst, &v36, &v35);
      if (v32) {
        _Block_release(v32);
      }
      xpc_release(v26);
      xpc_object_t v36 = 0;
      if (SHIBYTE(v38) < 0) {
        operator delete(__dst[0]);
      }
      if (v48) {
        _Block_release(v48);
      }
      goto LABEL_64;
    }
  }
  else if (isSupported)
  {
    goto LABEL_12;
  }
  v10 = v3[11];
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    v11 = &v44;
    if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      v11 = (std::string *)v44.__r_.__value_.__r.__words[0];
    }
    LODWORD(buf) = 136315138;
    *(void *)((char *)&buf + 4) = v11;
    _os_log_impl(&dword_1C5767000, v10, OS_LOG_TYPE_DEFAULT, "#I The property (%s) not supported in getting", (uint8_t *)&buf, 0xCu);
  }
  xpc_object_t v12 = xpc_null_create();
  v13 = (void *)v2[2];
  *(void *)&long long buf = v12;
  xpc_object_t v14 = xpc_null_create();
  ((void (*)(void *, uint64_t, long long *))v13[2])(v13, 3760250884, &buf);
  xpc_release((xpc_object_t)buf);
  xpc_release(v14);
LABEL_65:
  if (SHIBYTE(object[2]) < 0)
  {
    operator delete(object[0]);
    if ((SHIBYTE(v44.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_67:
      v33 = (void *)v2[2];
      if (!v33) {
        goto LABEL_72;
      }
      goto LABEL_71;
    }
  }
  else if ((SHIBYTE(v44.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_67;
  }
  operator delete(v44.__r_.__value_.__l.__data_);
  v33 = (void *)v2[2];
  if (v33) {
LABEL_71:
  }
    _Block_release(v33);
LABEL_72:
  xpc_release((xpc_object_t)v2[1]);
  operator delete(v2);
  v34 = (std::__shared_weak_count *)a1[2];
  if (v34 && !atomic_fetch_add(&v34->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
    std::__shared_weak_count::__release_weak(v34);
  }
  operator delete(a1);
}

void sub_1C58D70B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, xpc_object_t object, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, xpc_object_t a18, uint64_t a19, xpc_object_t a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void ___ZZZZN10LogTracker10initializeEN8dispatch13group_sessionEENK3__0clEvEUb5_ENKUlvE_clEv_block_invoke(uint64_t a1, unsigned int a2, void **a3)
{
  unsigned int v3 = a2;
  dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int &,xpc::dict&>((uint64_t *)(a1 + 32), &v3, a3);
}

uint64_t ___ZNK3ctu20SharedSynchronizableI10LogTrackerE15execute_wrappedEU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t __copy_helper_block_e8_40c39_ZTSNSt3__110shared_ptrIK10LogTrackerEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c39_ZTSNSt3__110shared_ptrIK10LogTrackerEE(uint64_t a1)
{
  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void dispatch::async<void ctu::SharedSynchronizable<LogTracker>::execute_wrapped<LogTracker::initialize(dispatch::group_session)::$_1>(LogTracker::initialize(dispatch::group_session)::$_1 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<LogTracker::initialize(dispatch::group_session)::$_1,dispatch_queue_s *::default_delete<LogTracker::initialize(dispatch::group_session)::$_1>>)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  uint64_t v2 = *(LogTracker ***)a1;
  LogTracker::finishInitialization_sync(**(LogTracker ***)a1);
  operator delete(v2);
  unsigned int v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    v4 = (void *)a1;
  }
  else
  {
    v4 = (void *)a1;
  }
  operator delete(v4);
}

void sub_1C58D74AC(_Unwind_Exception *a1)
{
  operator delete(v2);
  v4 = (std::__shared_weak_count *)v1[2];
  if (v4)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *LogDumpDB::create_default_global(LogDumpDB *this)
{
  uint64_t v2 = operator new(0x30uLL);
  ctu::OsLogLogger::OsLogLogger((ctu::OsLogLogger *)(v2 + 2), "com.apple.telephony.abm", "Log Dump History");
  *(void *)uint64_t v2 = &unk_1F20FA608;
  v2[4] = 10;
  *((void *)v2 + 3) = 0;
  *((void *)v2 + 4) = 0;
  *((void *)v2 + 5) = 0;
  LogDumpDB::init((LogDumpDB *)v2);
  *(void *)this = v2;
  result = operator new(0x20uLL);
  void *result = &unk_1F20FB860;
  result[1] = 0;
  result[2] = 0;
  result[3] = v2;
  *((void *)this + 1) = result;
  return result;
}

void sub_1C58D75D4(_Unwind_Exception *a1)
{
  void *v1 = v3;
  uint64_t v6 = v1[3];
  if (v6)
  {
    uint64_t v7 = v1[4];
    xpc_object_t v8 = (void *)v1[3];
    if (v7 != v6)
    {
      do
        ResetInfo::~ResetInfo((void **)(v7 - 112));
      while (v7 != v6);
      xpc_object_t v8 = *v4;
    }
    v1[4] = v6;
    operator delete(v8);
  }
  MEMORY[0x1C8790F80](v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1C58D765C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<LogDumpDB *,std::shared_ptr<LogDumpDB>::__shared_ptr_default_delete<LogDumpDB,LogDumpDB>,std::allocator<LogDumpDB>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<LogDumpDB *,std::shared_ptr<LogDumpDB>::__shared_ptr_default_delete<LogDumpDB,LogDumpDB>,std::allocator<LogDumpDB>>::__on_zero_shared(uint64_t a1)
{
  v1 = *(void **)(a1 + 24);
  if (!v1) {
    return;
  }
  void *v1 = &unk_1F20FA608;
  uint64_t v2 = v1[3];
  if (v2)
  {
    uint64_t v3 = v1[4];
    v4 = (void *)v1[3];
    if (v3 == v2)
    {
LABEL_17:
      v1[4] = v2;
      operator delete(v4);
      goto LABEL_18;
    }
    while (1)
    {
      if (*(char *)(v3 - 1) < 0)
      {
        operator delete(*(void **)(v3 - 24));
        if ((*(char *)(v3 - 41) & 0x80000000) == 0)
        {
LABEL_8:
          if ((*(char *)(v3 - 65) & 0x80000000) == 0) {
            goto LABEL_9;
          }
          goto LABEL_13;
        }
      }
      else if ((*(char *)(v3 - 41) & 0x80000000) == 0)
      {
        goto LABEL_8;
      }
      operator delete(*(void **)(v3 - 64));
      if ((*(char *)(v3 - 65) & 0x80000000) == 0)
      {
LABEL_9:
        if (*(char *)(v3 - 89) < 0) {
          goto LABEL_14;
        }
        goto LABEL_5;
      }
LABEL_13:
      operator delete(*(void **)(v3 - 88));
      if (*(char *)(v3 - 89) < 0) {
LABEL_14:
      }
        operator delete(*(void **)(v3 - 112));
LABEL_5:
      v3 -= 112;
      if (v3 == v2)
      {
        v4 = (void *)v1[3];
        goto LABEL_17;
      }
    }
  }
LABEL_18:
  MEMORY[0x1C8790F80](v1 + 1);

  operator delete(v1);
}

uint64_t std::__shared_ptr_pointer<LogDumpDB *,std::shared_ptr<LogDumpDB>::__shared_ptr_default_delete<LogDumpDB,LogDumpDB>,std::allocator<LogDumpDB>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x80000001C59A464ALL) {
    return a1 + 24;
  }
  if (((v3 & 0x80000001C59A464ALL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000001C59A464ALL)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001C59A464ALL & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 24;
  }
  return 0;
}

void dispatch::async<void ctu::SharedSynchronizable<LogTracker>::execute_wrapped<LogTracker::shutdown(dispatch::group_session)::$_0>(LogTracker::shutdown(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<LogTracker::shutdown(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<LogTracker::shutdown(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke(void *a1)
{
  uint64_t v2 = (void *)*a1;
  uint64_t v3 = *(void **)*a1;
  if (v3[25])
  {
    os_state_remove_handler();
    v3[25] = 0;
  }
  v4 = (std::__shared_weak_count *)v3[24];
  v3[23] = 0;
  v3[24] = 0;
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    xpc_object_t v5 = v2[1];
    if (!v5) {
      goto LABEL_9;
    }
  }
  else
  {
    xpc_object_t v5 = v2[1];
    if (!v5) {
      goto LABEL_9;
    }
  }
  dispatch_group_leave(v5);
  uint64_t v6 = v2[1];
  if (v6) {
    dispatch_release(v6);
  }
LABEL_9:
  operator delete(v2);
  uint64_t v7 = (std::__shared_weak_count *)a1[2];
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    xpc_object_t v8 = a1;
  }
  else
  {
    xpc_object_t v8 = a1;
  }
  operator delete(v8);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI10LogTrackerE15execute_wrappedIZZNS3_20dumpLogInternal_syncEN3xpc4dictENS_5blockIU13block_pointerFviS7_EEEEUb_E3__3EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrISD_NSI_14default_deleteISD_EEEEENUlPvE_8__invokeESN_(void *a1)
{
  v1 = a1;
  uint64_t v135 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *a1;
  *(void *)&value[1] = v2;
  uint64_t v3 = *(void **)v2;
  v4 = _os_activity_create(&dword_1C5767000, "Dump finished", MEMORY[0x1E4F144F0], OS_ACTIVITY_FLAG_DEFAULT);
  state.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
  state.__r_.__value_.__l.__size_ = 0xAAAAAAAAAAAAAAAALL;
  os_activity_scope_enter(v4, (os_activity_scope_state_t)&state);
  os_activity_scope_leave((os_activity_scope_state_t)&state);
  xpc_object_t v5 = v3[11];
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    int v6 = *(_DWORD *)(v2 + 8);
    LODWORD(state.__r_.__value_.__l.__data_) = 67109120;
    HIDWORD(state.__r_.__value_.__r.__words[0]) = v6;
    _os_log_impl(&dword_1C5767000, v5, OS_LOG_TYPE_DEFAULT, "#I Log dump has finished. The result: 0x%x", (uint8_t *)&state, 8u);
  }
  memset(__p, 170, sizeof(__p));
  uint64_t v7 = (const char *)*MEMORY[0x1E4F4C4C8];
  xpc_object_t v8 = xpc_dictionary_get_value(*(xpc_object_t *)(v2 + 16), (const char *)*MEMORY[0x1E4F4C4C8]);
  v129.__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
  if (v8) {
    xpc_retain(v8);
  }
  else {
    v129.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
  }
  Timestamp::Timestamp((Timestamp *)__s1);
  Timestamp::asString((uint64_t)__s1, 0, 9, &state);
  xpc::dyn_cast_or_default();
  if (SHIBYTE(state.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(state.__r_.__value_.__l.__data_);
  }
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)__s1, (void *)__s1[1]);
  xpc_release(v129.__r_.__value_.__l.__data_);
  xpc_object_t xdict = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  xpc_object_t v9 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v10 = v9;
  uint64_t v11 = MEMORY[0x1E4F14590];
  if (v9)
  {
    xpc_object_t xdict = v9;
  }
  else
  {
    xpc_object_t v10 = xpc_null_create();
    xpc_object_t xdict = v10;
    if (!v10)
    {
      xpc_object_t v12 = xpc_null_create();
      xpc_object_t v10 = 0;
      goto LABEL_15;
    }
  }
  if (MEMORY[0x1C8792D30](v10) == v11)
  {
    xpc_retain(v10);
    goto LABEL_16;
  }
  xpc_object_t v12 = xpc_null_create();
LABEL_15:
  xpc_object_t xdict = v12;
LABEL_16:
  xpc_release(v10);
  v13 = (const object **)MEMORY[0x1E4F4F928];
  xpc_object_t v14 = xpc_string_create((const char *)*MEMORY[0x1E4F4F928]);
  if (!v14) {
    xpc_object_t v14 = xpc_null_create();
  }
  xpc_object_t v15 = (const char *)*MEMORY[0x1E4F4C7F8];
  xpc_dictionary_set_value(xdict, (const char *)*MEMORY[0x1E4F4C7F8], v14);
  xpc_object_t v16 = xpc_null_create();
  xpc_release(v14);
  xpc_release(v16);
  if (SHIBYTE(__p[2]) >= 0) {
    v17 = __p;
  }
  else {
    v17 = (void **)__p[0];
  }
  xpc_object_t v18 = xpc_string_create((const char *)v17);
  if (!v18) {
    xpc_object_t v18 = xpc_null_create();
  }
  xpc_dictionary_set_value(xdict, v7, v18);
  xpc_object_t v19 = xpc_null_create();
  xpc_release(v18);
  xpc_release(v19);
  int v20 = *(_DWORD *)(v2 + 8);
  if (v20 == -534716414) {
    int v20 = -534716415;
  }
  LODWORD(state.__r_.__value_.__l.__data_) = v20;
  dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>((uint64_t *)(v2 + 24), (unsigned int *)&state, &xdict);
  xpc_object_t v21 = xpc_dictionary_get_value(*(xpc_object_t *)(v2 + 32), (const char *)*MEMORY[0x1E4F4C1E8]);
  state.__r_.__value_.__r.__words[0] = (std::string::size_type)v21;
  if (v21) {
    xpc_retain(v21);
  }
  else {
    state.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
  }
  int v22 = xpc::dyn_cast_or_default((xpc *)&state, 0);
  xpc_release(state.__r_.__value_.__l.__data_);
  if (!v22)
  {
    memset(__s1, 170, 24);
    xpc_object_t v25 = xpc_dictionary_get_value(*(xpc_object_t *)(v2 + 32), (const char *)*MEMORY[0x1E4F4C268]);
    state.__r_.__value_.__r.__words[0] = (std::string::size_type)v25;
    if (v25) {
      xpc_retain(v25);
    }
    else {
      state.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
    }
    xpc::dyn_cast_or_default((uint64_t *)__s1, (xpc *)&state, (const object *)*MEMORY[0x1E4F4C630], v26);
    xpc_release(state.__r_.__value_.__l.__data_);
    v32 = (const void *)*MEMORY[0x1E4F4C4F8];
    xpc_object_t v33 = (xpc_object_t)strlen((const char *)*MEMORY[0x1E4F4C4F8]);
    xpc_object_t v34 = v33;
    if (SHIBYTE(__s1[2]) < 0)
    {
      if (v33 != (xpc_object_t)-1)
      {
        xpc_object_t v35 = __s1[1];
        if (__s1[1] >= v33) {
          xpc_object_t v37 = v33;
        }
        else {
          xpc_object_t v37 = __s1[1];
        }
        if (memcmp(__s1[0], v32, (size_t)v37)) {
          goto LABEL_58;
        }
        goto LABEL_55;
      }
    }
    else if (v33 != (xpc_object_t)-1)
    {
      xpc_object_t v35 = (xpc_object_t)HIBYTE(__s1[2]);
      if (HIBYTE(__s1[2]) >= (unint64_t)v33) {
        size_t v36 = (size_t)v33;
      }
      else {
        size_t v36 = HIBYTE(__s1[2]);
      }
      if (memcmp(__s1, v32, v36)) {
        goto LABEL_58;
      }
LABEL_55:
      if (v35 == v34)
      {
        unint64_t v38 = v3[11];
        if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(state.__r_.__value_.__l.__data_) = 0;
          _os_log_impl(&dword_1C5767000, v38, OS_LOG_TYPE_DEFAULT, "#I Baseband Log collection will not trigger the post log collection", (uint8_t *)&state, 2u);
        }
        goto LABEL_221;
      }
LABEL_58:
      xpc_object_t v39 = xpc_null_create();
      if (MEMORY[0x1C8792D30](*(void *)(v2 + 16)) != v11 || *(_DWORD *)(v2 + 8))
      {
        v125 = v4;
        xpc_object_t v40 = *(xpc_object_t *)(v2 + 32);
        if (v40)
        {
          xpc_retain(*(xpc_object_t *)(v2 + 32));
        }
        else
        {
          xpc_object_t v40 = xpc_null_create();
          if (!v40)
          {
            xpc_object_t v123 = xpc_null_create();
            xpc_object_t v40 = 0;
            goto LABEL_69;
          }
        }
        if (MEMORY[0x1C8792D30](v40) == v11)
        {
          xpc_retain(v40);
          xpc_object_t v123 = v40;
        }
        else
        {
          xpc_object_t v123 = xpc_null_create();
        }
LABEL_69:
        xpc_object_t v42 = xpc_null_create();
        xpc_release(v39);
        xpc_release(v42);
        xpc_release(v40);
        v43 = (const void *)*MEMORY[0x1E4F4C198];
        size_t v44 = strlen((const char *)*MEMORY[0x1E4F4C198]);
        v124 = v1;
        if (v44 > 0x7FFFFFFFFFFFFFF7) {
          std::string::__throw_length_error[abi:ne180100]();
        }
        std::string::size_type v45 = v44;
        if (v44 >= 0x17)
        {
          uint64_t v47 = (v44 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v44 | 7) != 0x17) {
            uint64_t v47 = v44 | 7;
          }
          uint64_t v48 = v47 + 1;
          v46 = (std::string *)operator new(v47 + 1);
          v129.__r_.__value_.__l.__size_ = v45;
          v129.__r_.__value_.__r.__words[2] = v48 | 0x8000000000000000;
          v129.__r_.__value_.__r.__words[0] = (std::string::size_type)v46;
        }
        else
        {
          *((unsigned char *)&v129.__r_.__value_.__s + 23) = v44;
          v46 = &v129;
          if (!v44)
          {
LABEL_77:
            v46->__r_.__value_.__s.__data_[v45] = 0;
            memset(&state, 0, sizeof(state));
            if (prop::systemlogs::get((char *)&v129, (uint64_t)&state))
            {
              v132[0] = -1431655766;
              if (util::convert<int>(&state, v132, 0)) {
                uint64_t v49 = (const object *)v132[0];
              }
              else {
                uint64_t v49 = 0;
              }
              if ((SHIBYTE(state.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
LABEL_85:
                if (SHIBYTE(v129.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v129.__r_.__value_.__l.__data_);
                }
                v50 = (char *)*MEMORY[0x1E4F4C2F8];
                xpc_object_t v51 = xpc_dictionary_get_value(*(xpc_object_t *)(v2 + 32), (const char *)*MEMORY[0x1E4F4C2F8]);
                state.__r_.__value_.__r.__words[0] = (std::string::size_type)v51;
                if (v51) {
                  xpc_retain(v51);
                }
                else {
                  state.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
                }
                value[0] = xpc::dyn_cast_or_default((xpc *)&state, v49);
                xpc_release(state.__r_.__value_.__l.__data_);
                if ((TelephonyUtilIsInternalBuild() & 1) == 0)
                {
                  char IsCarrierBuild = TelephonyUtilIsCarrierBuild();
                  char v53 = value[0] == 2 ? IsCarrierBuild : 1;
                  if ((v53 & 1) == 0)
                  {
                    v54 = v3[11];
                    if (os_log_type_enabled(v54, OS_LOG_TYPE_ERROR))
                    {
                      LOWORD(state.__r_.__value_.__l.__data_) = 0;
                      _os_log_error_impl(&dword_1C5767000, v54, OS_LOG_TYPE_ERROR, "Detected an internal log dump with SYSDIAGNOSE mode in customer build, overriding to OFF", (uint8_t *)&state, 2u);
                    }
                    value[0] = 0;
                  }
                }
                uint64_t IsInternalBuild = TelephonyUtilIsInternalBuild();
                if ((IsInternalBuild & 1) != 0
                  || (uint64_t IsInternalBuild = TelephonyUtilIsCarrierBuild(), IsInternalBuild))
                {
                  uint64_t CompressionMode = capabilities::trace::getCompressionMode((capabilities::trace *)IsInternalBuild);
                }
                else
                {
                  uint64_t CompressionMode = 2;
                }
                v57 = (const void *)*MEMORY[0x1E4F47258];
                size_t v58 = strlen((const char *)*MEMORY[0x1E4F47258]);
                if (v58 > 0x7FFFFFFFFFFFFFF7) {
                  std::string::__throw_length_error[abi:ne180100]();
                }
                std::string::size_type v59 = v58;
                if (v58 >= 0x17)
                {
                  uint64_t v61 = (v58 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v58 | 7) != 0x17) {
                    uint64_t v61 = v58 | 7;
                  }
                  uint64_t v62 = v61 + 1;
                  v60 = (std::string *)operator new(v61 + 1);
                  v129.__r_.__value_.__l.__size_ = v59;
                  v129.__r_.__value_.__r.__words[2] = v62 | 0x8000000000000000;
                  v129.__r_.__value_.__r.__words[0] = (std::string::size_type)v60;
                }
                else
                {
                  *((unsigned char *)&v129.__r_.__value_.__s + 23) = v58;
                  v60 = &v129;
                  if (!v58)
                  {
LABEL_110:
                    v60->__r_.__value_.__s.__data_[v59] = 0;
                    memset(&state, 0, sizeof(state));
                    if (prop::compression::get((char *)&v129, (uint64_t)&state))
                    {
                      v132[0] = -1431655766;
                      if (util::convert<int>(&state, v132, 0)) {
                        uint64_t CompressionMode = v132[0];
                      }
                      else {
                        uint64_t CompressionMode = CompressionMode;
                      }
                    }
                    if (SHIBYTE(state.__r_.__value_.__r.__words[2]) < 0)
                    {
                      operator delete(state.__r_.__value_.__l.__data_);
                      if ((SHIBYTE(v129.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                      {
LABEL_116:
                        v63 = (const char **)MEMORY[0x1E4F4D210];
                        key = v50;
                        if (value[0] == 2)
                        {
LABEL_117:
                          int v64 = 0;
                          BOOL v128 = 0;
                          char v65 = 1;
                          goto LABEL_140;
                        }
LABEL_120:
                        xpc_object_t v66 = xpc_dictionary_get_value(*(xpc_object_t *)(v2 + 32), *v63);
                        state.__r_.__value_.__r.__words[0] = (std::string::size_type)v66;
                        if (v66) {
                          xpc_retain(v66);
                        }
                        else {
                          state.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
                        }
                        int v64 = xpc::dyn_cast_or_default((xpc *)&state, (const object *)CompressionMode);
                        xpc_release(state.__r_.__value_.__l.__data_);
                        BOOL v128 = 0;
                        if (!v64)
                        {
                          char v65 = 1;
                          goto LABEL_140;
                        }
                        v67 = (const void *)*MEMORY[0x1E4F47108];
                        size_t v68 = strlen((const char *)*MEMORY[0x1E4F47108]);
                        if (v68 > 0x7FFFFFFFFFFFFFF7) {
                          std::string::__throw_length_error[abi:ne180100]();
                        }
                        std::string::size_type v69 = v68;
                        if (v68 >= 0x17)
                        {
                          uint64_t v71 = (v68 & 0xFFFFFFFFFFFFFFF8) + 8;
                          if ((v68 | 7) != 0x17) {
                            uint64_t v71 = v68 | 7;
                          }
                          uint64_t v72 = v71 + 1;
                          v70 = (std::string *)operator new(v71 + 1);
                          v129.__r_.__value_.__l.__size_ = v69;
                          v129.__r_.__value_.__r.__words[2] = v72 | 0x8000000000000000;
                          v129.__r_.__value_.__r.__words[0] = (std::string::size_type)v70;
                        }
                        else
                        {
                          *((unsigned char *)&v129.__r_.__value_.__s + 23) = v68;
                          v70 = &v129;
                          if (!v68) {
                            goto LABEL_133;
                          }
                        }
                        memmove(v70, v67, v69);
LABEL_133:
                        v70->__r_.__value_.__s.__data_[v69] = 0;
                        memset(&state, 0, sizeof(state));
                        if (prop::compression::get((char *)&v129, (uint64_t)&state)) {
                          util::convert<BOOL>(&state, &v128, 0);
                        }
                        if (SHIBYTE(state.__r_.__value_.__r.__words[2]) < 0) {
                          operator delete(state.__r_.__value_.__l.__data_);
                        }
                        if (SHIBYTE(v129.__r_.__value_.__r.__words[2]) < 0) {
                          operator delete(v129.__r_.__value_.__l.__data_);
                        }
                        char v65 = 0;
LABEL_140:
                        char v127 = 1;
                        v73 = (const char *)*MEMORY[0x1E4F4CBA8];
                        size_t v74 = strlen((const char *)*MEMORY[0x1E4F4CBA8]);
                        if (v74 > 0x7FFFFFFFFFFFFFF7) {
                          std::string::__throw_length_error[abi:ne180100]();
                        }
                        std::string::size_type v75 = v74;
                        if (v74 >= 0x17)
                        {
                          uint64_t v77 = (v74 & 0xFFFFFFFFFFFFFFF8) + 8;
                          if ((v74 | 7) != 0x17) {
                            uint64_t v77 = v74 | 7;
                          }
                          uint64_t v78 = v77 + 1;
                          v76 = (std::string *)operator new(v77 + 1);
                          v129.__r_.__value_.__l.__size_ = v75;
                          v129.__r_.__value_.__r.__words[2] = v78 | 0x8000000000000000;
                          v129.__r_.__value_.__r.__words[0] = (std::string::size_type)v76;
                        }
                        else
                        {
                          *((unsigned char *)&v129.__r_.__value_.__s + 23) = v74;
                          v76 = &v129;
                          if (!v74)
                          {
LABEL_148:
                            v76->__r_.__value_.__s.__data_[v75] = 0;
                            memset(&state, 0, sizeof(state));
                            if (prop::systemlogs::get((char *)&v129, (uint64_t)&state)) {
                              util::convert<BOOL>(&state, (BOOL *)&v127, 0);
                            }
                            if (SHIBYTE(state.__r_.__value_.__r.__words[2]) < 0)
                            {
                              operator delete(state.__r_.__value_.__l.__data_);
                              if ((SHIBYTE(v129.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                                goto LABEL_152;
                              }
                            }
                            else if ((SHIBYTE(v129.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                            {
                              goto LABEL_152;
                            }
                            operator delete(v129.__r_.__value_.__l.__data_);
LABEL_152:
                            xpc_object_t v79 = xpc_dictionary_get_value(*(xpc_object_t *)(v2 + 32), v73);
                            state.__r_.__value_.__r.__words[0] = (std::string::size_type)v79;
                            v80 = v123;
                            if (v79) {
                              xpc_retain(v79);
                            }
                            else {
                              state.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
                            }
                            char v127 = xpc::dyn_cast_or_default((xpc *)&state, (const object *)v127);
                            xpc_release(state.__r_.__value_.__l.__data_);
                            v121 = v73;
                            memset(&state, 170, sizeof(state));
                            v81 = (const void *)*MEMORY[0x1E4F4F928];
                            size_t v82 = strlen((const char *)*MEMORY[0x1E4F4F928]);
                            if (v82 > 0x7FFFFFFFFFFFFFF7) {
                              std::string::__throw_length_error[abi:ne180100]();
                            }
                            std::string::size_type v83 = v82;
                            int v84 = v64;
                            if (v82 >= 0x17)
                            {
                              uint64_t v86 = (v82 & 0xFFFFFFFFFFFFFFF8) + 8;
                              if ((v82 | 7) != 0x17) {
                                uint64_t v86 = v82 | 7;
                              }
                              uint64_t v87 = v86 + 1;
                              p_std::string state = operator new(v86 + 1);
                              state.__r_.__value_.__l.__size_ = v83;
                              state.__r_.__value_.__r.__words[2] = v87 | 0x8000000000000000;
                              state.__r_.__value_.__r.__words[0] = (std::string::size_type)p_state;
                              v4 = v125;
                            }
                            else
                            {
                              *((unsigned char *)&state.__r_.__value_.__s + 23) = v82;
                              p_std::string state = &state;
                              v4 = v125;
                              if (!v82)
                              {
                                state.__r_.__value_.__s.__data_[0] = 0;
                                v1 = v124;
                                if (v65) {
                                  goto LABEL_189;
                                }
                                goto LABEL_166;
                              }
                            }
                            memmove(p_state, v81, v83);
                            *((unsigned char *)p_state + v83) = 0;
                            v1 = v124;
                            if (v65)
                            {
LABEL_189:
                              xpc_object_t v102 = xpc_int64_create(value[0]);
                              if (!v102) {
                                xpc_object_t v102 = xpc_null_create();
                              }
                              xpc_dictionary_set_value(v80, key, v102);
                              xpc_object_t v103 = xpc_null_create();
                              xpc_release(v102);
                              xpc_release(v103);
                              xpc_object_t v104 = xpc_int64_create(v84);
                              if (!v104) {
                                xpc_object_t v104 = xpc_null_create();
                              }
                              xpc_dictionary_set_value(v80, (const char *)*MEMORY[0x1E4F4D210], v104);
                              xpc_object_t v105 = xpc_null_create();
                              xpc_release(v104);
                              xpc_release(v105);
                              xpc_object_t v106 = xpc_BOOL_create(v128);
                              if (!v106) {
                                xpc_object_t v106 = xpc_null_create();
                              }
                              xpc_dictionary_set_value(v80, (const char *)*MEMORY[0x1E4F4CF88], v106);
                              xpc_object_t v107 = xpc_null_create();
                              xpc_release(v106);
                              xpc_release(v107);
                              if ((state.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                                v108 = &state;
                              }
                              else {
                                v108 = (std::string *)state.__r_.__value_.__r.__words[0];
                              }
                              xpc_object_t v109 = xpc_string_create((const char *)v108);
                              if (!v109) {
                                xpc_object_t v109 = xpc_null_create();
                              }
                              xpc_dictionary_set_value(v80, v15, v109);
                              xpc_object_t v110 = xpc_null_create();
                              xpc_release(v109);
                              xpc_release(v110);
                              if (SHIBYTE(__p[2]) >= 0) {
                                v111 = __p;
                              }
                              else {
                                v111 = (void **)__p[0];
                              }
                              xpc_object_t v112 = xpc_string_create((const char *)v111);
                              if (!v112) {
                                xpc_object_t v112 = xpc_null_create();
                              }
                              xpc_dictionary_set_value(v80, v7, v112);
                              xpc_object_t v113 = xpc_null_create();
                              xpc_release(v112);
                              xpc_release(v113);
                              xpc_object_t v114 = xpc_BOOL_create(v127);
                              if (!v114) {
                                xpc_object_t v114 = xpc_null_create();
                              }
                              xpc_dictionary_set_value(v80, v121, v114);
                              xpc_object_t v115 = xpc_null_create();
                              xpc_release(v114);
                              xpc_release(v115);
                              ctu::fs::create_directory();
                              if (SHIBYTE(state.__r_.__value_.__r.__words[2]) < 0) {
                                operator delete(state.__r_.__value_.__l.__data_);
                              }
                              v116 = v80;
                              goto LABEL_210;
                            }
LABEL_166:
                            if ((TelephonyUtilIsInternalBuild() & 1) != 0
                              || TelephonyUtilIsCarrierBuild())
                            {
                              v120 = v3;
                              v88 = (const void *)*MEMORY[0x1E4F4F940];
                              size_t v89 = strlen((const char *)*MEMORY[0x1E4F4F940]);
                              int v90 = SHIBYTE(__p[2]);
                              if (SHIBYTE(__p[2]) >= 0) {
                                size_t v91 = HIBYTE(__p[2]);
                              }
                              else {
                                size_t v91 = (size_t)__p[1];
                              }
                              std::string::size_type v92 = v91 + v89;
                              memset(&v129, 170, sizeof(v129));
                              if (v91 + v89 > 0x7FFFFFFFFFFFFFF7) {
                                std::string::__throw_length_error[abi:ne180100]();
                              }
                              size_t v93 = v89;
                              if (v92 > 0x16)
                              {
                                uint64_t v95 = (v92 & 0xFFFFFFFFFFFFFFF8) + 8;
                                if ((v92 | 7) != 0x17) {
                                  uint64_t v95 = v92 | 7;
                                }
                                uint64_t v96 = v95 + 1;
                                v94 = (std::string *)operator new(v95 + 1);
                                v129.__r_.__value_.__l.__size_ = v92;
                                v129.__r_.__value_.__r.__words[2] = v96 | 0x8000000000000000;
                                v129.__r_.__value_.__r.__words[0] = (std::string::size_type)v94;
                              }
                              else
                              {
                                memset(&v129, 0, sizeof(v129));
                                v94 = &v129;
                                *((unsigned char *)&v129.__r_.__value_.__s + 23) = v91 + v89;
                              }
                              if (v93) {
                                memcpy(v94, v88, v93);
                              }
                              v97 = (char *)v94 + v93;
                              if (v91)
                              {
                                if (v90 >= 0) {
                                  v98 = __p;
                                }
                                else {
                                  v98 = (void **)__p[0];
                                }
                                memmove(v97, v98, v91);
                              }
                              v97[v91] = 0;
                              v1 = v124;
                              v4 = v125;
                              v99 = std::string::append(&v129, "/", 1uLL);
                              std::string::size_type v100 = v99->__r_.__value_.__r.__words[0];
                              *(void *)v132 = v99->__r_.__value_.__l.__size_;
                              *(void *)((char *)&v132[1] + 3) = *(std::string::size_type *)((char *)&v99->__r_.__value_.__r.__words[1]
                                                                                            + 7);
                              char v101 = HIBYTE(v99->__r_.__value_.__r.__words[2]);
                              v99->__r_.__value_.__l.__size_ = 0;
                              v99->__r_.__value_.__r.__words[2] = 0;
                              v99->__r_.__value_.__r.__words[0] = 0;
                              if (SHIBYTE(state.__r_.__value_.__r.__words[2]) < 0) {
                                operator delete(state.__r_.__value_.__l.__data_);
                              }
                              state.__r_.__value_.__r.__words[0] = v100;
                              state.__r_.__value_.__l.__size_ = *(void *)v132;
                              *(std::string::size_type *)((char *)&state.__r_.__value_.__r.__words[1] + 7) = *(void *)((char *)&v132[1] + 3);
                              *((unsigned char *)&state.__r_.__value_.__s + 23) = v101;
                              if (SHIBYTE(v129.__r_.__value_.__r.__words[2]) < 0) {
                                operator delete(v129.__r_.__value_.__l.__data_);
                              }
                              uint64_t v3 = v120;
                              v80 = v123;
                            }
                            goto LABEL_189;
                          }
                        }
                        memmove(v76, v73, v75);
                        goto LABEL_148;
                      }
                    }
                    else if ((SHIBYTE(v129.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                    {
                      goto LABEL_116;
                    }
                    operator delete(v129.__r_.__value_.__l.__data_);
                    v63 = (const char **)MEMORY[0x1E4F4D210];
                    key = v50;
                    if (value[0] == 2) {
                      goto LABEL_117;
                    }
                    goto LABEL_120;
                  }
                }
                memmove(v60, v57, v59);
                goto LABEL_110;
              }
            }
            else
            {
              uint64_t v49 = 0;
              if ((SHIBYTE(state.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                goto LABEL_85;
              }
            }
            operator delete(state.__r_.__value_.__l.__data_);
            goto LABEL_85;
          }
        }
        memmove(v46, v43, v45);
        goto LABEL_77;
      }
      xpc_object_t v41 = *(xpc_object_t *)(v2 + 16);
      if (v41)
      {
        xpc_retain(*(xpc_object_t *)(v2 + 16));
      }
      else
      {
        xpc_object_t v41 = xpc_null_create();
        if (!v41)
        {
          xpc_object_t v118 = xpc_null_create();
          xpc_object_t v41 = 0;
LABEL_238:
          xpc_object_t v119 = xpc_null_create();
          xpc_release(v39);
          xpc_release(v119);
          xpc_release(v41);
          v116 = v118;
LABEL_210:
          if ((TelephonyUtilIsInternalBuild() & 1) != 0 || TelephonyUtilIsCarrierBuild())
          {
            state.__r_.__value_.__r.__words[0] = (std::string::size_type)v116;
            if (v116) {
              xpc_retain(v116);
            }
            else {
              state.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
            }
            LogTracker::postLogCollectionInternal_sync((uint64_t)v3, (xpc_object_t *)&state.__r_.__value_.__l.__data_);
            xpc_release(state.__r_.__value_.__l.__data_);
          }
          else
          {
            state.__r_.__value_.__r.__words[0] = (std::string::size_type)v116;
            if (v116) {
              xpc_retain(v116);
            }
            else {
              state.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
            }
            LogTracker::postLogCollectionExternal_sync(v3, (xpc_object_t *)&state.__r_.__value_.__l.__data_);
            xpc_release(state.__r_.__value_.__l.__data_);
          }
          state.__r_.__value_.__r.__words[0] = 0;
          xpc_release(v116);
LABEL_221:
          if ((SHIBYTE(__s1[2]) & 0x80000000) == 0) {
            goto LABEL_224;
          }
          xpc_object_t v31 = __s1[0];
          goto LABEL_223;
        }
      }
      if (MEMORY[0x1C8792D30](v41) == v11)
      {
        xpc_retain(v41);
        xpc_object_t v118 = v41;
      }
      else
      {
        xpc_object_t v118 = xpc_null_create();
      }
      goto LABEL_238;
    }
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  memset(&state, 170, sizeof(state));
  xpc_object_t v23 = xpc_dictionary_get_value(*(xpc_object_t *)(v2 + 16), v15);
  __s1[0] = v23;
  if (v23) {
    xpc_retain(v23);
  }
  else {
    __s1[0] = xpc_null_create();
  }
  xpc::dyn_cast_or_default((uint64_t *)&state, (xpc *)__s1, *v13, v24);
  xpc_release(__s1[0]);
  int v27 = ctu::fs::remove_dir();
  xpc_object_t v28 = v3[11];
  if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
  {
    xpc_object_t v29 = "Failed";
    if (v27) {
      xpc_object_t v29 = "Succeeded";
    }
    int v30 = &state;
    if ((state.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      int v30 = (std::string *)state.__r_.__value_.__r.__words[0];
    }
    LODWORD(__s1[0]) = 136315394;
    *(xpc_object_t *)((char *)__s1 + 4) = (xpc_object_t)v29;
    WORD2(__s1[1]) = 2080;
    *(xpc_object_t *)((char *)&__s1[1] + 6) = v30;
    _os_log_impl(&dword_1C5767000, v28, OS_LOG_TYPE_DEFAULT, "#I User requested to clear logs, %s to remove dump path: %s", (uint8_t *)__s1, 0x16u);
  }
  if (SHIBYTE(state.__r_.__value_.__r.__words[2]) < 0)
  {
    xpc_object_t v31 = (xpc_object_t)state.__r_.__value_.__r.__words[0];
LABEL_223:
    operator delete(v31);
  }
LABEL_224:
  xpc_release(xdict);
  if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
  {
    if (!v4) {
      goto LABEL_229;
    }
    goto LABEL_228;
  }
  operator delete(__p[0]);
  if (v4) {
LABEL_228:
  }
    os_release(v4);
LABEL_229:
  _ZNSt3__110unique_ptrIZZN10LogTracker20dumpLogInternal_syncEN3xpc4dictEN8dispatch5blockIU13block_pointerFviS3_EEEEUb_E3__3NS_14default_deleteIS9_EEED1B8ne180100Ev((uint64_t *)&value[1]);
  v117 = (std::__shared_weak_count *)v1[2];
  if (v117 && !atomic_fetch_add(&v117->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
    std::__shared_weak_count::__release_weak(v117);
  }
  operator delete(v1);
}

void sub_1C58D8A34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, xpc_object_t object, void *a13, void *a14, uint64_t a15, char a16, uint64_t a17, xpc_object_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,xpc_object_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t *_ZNSt3__110unique_ptrIZZN10LogTracker20dumpLogInternal_syncEN3xpc4dictEN8dispatch5blockIU13block_pointerFviS3_EEEEUb_E3__3NS_14default_deleteIS9_EEED1B8ne180100Ev(uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    xpc_release(*(xpc_object_t *)(v2 + 32));
    *(void *)(v2 + 32) = 0;
    uint64_t v3 = *(const void **)(v2 + 24);
    if (v3) {
      _Block_release(v3);
    }
    xpc_release(*(xpc_object_t *)(v2 + 16));
    operator delete((void *)v2);
  }
  return a1;
}

void dispatch::detail::group_notify<LogTracker::jsonSummary_sync(dispatch::group_session,xpc::dict)::$_0>(dispatch_group_s *,dispatch_queue_s *,LogTracker::jsonSummary_sync(dispatch::group_session,xpc::dict)::$_0 &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  LogTracker::jsonSummary_sync(dispatch::group_session,xpc::dict)::$_0::operator()((uint64_t *)a1);
  if (a1)
  {
    xpc_release(*(xpc_object_t *)(a1 + 24));
    *(void *)(a1 + 24) = 0;
    uint64_t v2 = *(NSObject **)(a1 + 16);
    if (v2)
    {
      dispatch_group_leave(v2);
      uint64_t v3 = *(NSObject **)(a1 + 16);
      if (v3) {
        dispatch_release(v3);
      }
    }
    v4 = *(std::__shared_weak_count **)(a1 + 8);
    if (v4) {
      std::__shared_weak_count::__release_weak(v4);
    }
    operator delete((void *)a1);
  }
}

void sub_1C58D8F3C(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    xpc_release(*(xpc_object_t *)(v1 + 24));
    *(void *)(v1 + 24) = 0;
    uint64_t v3 = *(NSObject **)(v1 + 16);
    if (v3)
    {
      dispatch_group_leave(v3);
      v4 = *(NSObject **)(v1 + 16);
      if (v4) {
        dispatch_release(v4);
      }
    }
    xpc_object_t v5 = *(std::__shared_weak_count **)(v1 + 8);
    if (v5) {
      std::__shared_weak_count::__release_weak(v5);
    }
    operator delete((void *)v1);
  }
  _Unwind_Resume(exception_object);
}

void LogTracker::jsonSummary_sync(dispatch::group_session,xpc::dict)::$_0::operator()(uint64_t *a1)
{
  uint64_t v169 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (std::__shared_weak_count *)a1[1];
  if (!v2) {
    return;
  }
  uint64_t v3 = a1[4];
  v4 = std::__shared_weak_count::lock(v2);
  if (!v4) {
    return;
  }
  xpc_object_t v5 = v4;
  uint64_t v6 = *a1;
  if (atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (!v6) {
      return;
    }
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v5);
    if (!v6) {
      return;
    }
  }
  memset(v164, 170, sizeof(v164));
  xpc_object_t v7 = xpc_dictionary_get_value((xpc_object_t)a1[3], (const char *)*MEMORY[0x1E4F4C4C8]);
  object.__r_.__value_.__r.__words[0] = (std::string::size_type)v7;
  if (v7) {
    xpc_retain(v7);
  }
  else {
    object.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
  }
  Timestamp::Timestamp((Timestamp *)v163);
  Timestamp::asString(v8, 0, 9, &applier);
  xpc::dyn_cast_or_default();
  if (SHIBYTE(applier.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(applier.__r_.__value_.__l.__data_);
  }
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v163, (void *)v163[1]);
  xpc_release(object.__r_.__value_.__l.__data_);
  memset(v163, 170, sizeof(v163));
  xpc_object_t v9 = xpc_dictionary_get_value((xpc_object_t)a1[3], (const char *)*MEMORY[0x1E4F4C268]);
  applier.__r_.__value_.__r.__words[0] = (std::string::size_type)v9;
  if (v9) {
    xpc_retain(v9);
  }
  else {
    applier.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
  }
  xpc::dyn_cast_or_default(v163, (xpc *)&applier, (const object *)"", v10);
  xpc_release(applier.__r_.__value_.__l.__data_);
  memset(&object, 170, sizeof(object));
  uint64_t v11 = (const void *)*MEMORY[0x1E4F4F918];
  size_t v12 = strlen((const char *)*MEMORY[0x1E4F4F918]);
  if (v12 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  std::string::size_type v13 = v12;
  if (v12 >= 0x17)
  {
    uint64_t v15 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v12 | 7) != 0x17) {
      uint64_t v15 = v12 | 7;
    }
    uint64_t v16 = v15 + 1;
    p_std::string object = (std::string *)operator new(v15 + 1);
    object.__r_.__value_.__l.__size_ = v13;
    object.__r_.__value_.__r.__words[2] = v16 | 0x8000000000000000;
    object.__r_.__value_.__r.__words[0] = (std::string::size_type)p_object;
    goto LABEL_22;
  }
  *((unsigned char *)&object.__r_.__value_.__s + 23) = v12;
  p_std::string object = &object;
  if (v12) {
LABEL_22:
  }
    memmove(p_object, v11, v13);
  p_object->__r_.__value_.__s.__data_[v13] = 0;
  if (v163[2] >= 0) {
    v17 = (const char *)v163;
  }
  else {
    v17 = (const char *)v163[0];
  }
  size_t v18 = strlen((const char *)*MEMORY[0x1E4F4CD08]);
  if (!strncasecmp((const char *)*MEMORY[0x1E4F4CD08], v17, v18)) {
    std::string::__assign_external(&object, (const std::string::value_type *)*MEMORY[0x1E4F4F938]);
  }
  xpc_object_t v19 = (const char **)MEMORY[0x1E4F4F928];
  int v20 = (const void *)*MEMORY[0x1E4F4F928];
  size_t v21 = strlen((const char *)*MEMORY[0x1E4F4F928]);
  if (v21 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  std::string::size_type v22 = v21;
  if (v21 >= 0x17)
  {
    uint64_t v24 = (v21 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v21 | 7) != 0x17) {
      uint64_t v24 = v21 | 7;
    }
    uint64_t v25 = v24 + 1;
    p_dst = (std::string *)operator new(v24 + 1);
    __dst.__r_.__value_.__l.__size_ = v22;
    __dst.__r_.__value_.__r.__words[2] = v25 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_35;
  }
  *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v21;
  p_dst = &__dst;
  if (v21) {
LABEL_35:
  }
    memmove(p_dst, v20, v22);
  p_dst->__r_.__value_.__s.__data_[v22] = 0;
  if ((object.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v26 = &object;
  }
  else {
    v26 = (std::string *)object.__r_.__value_.__r.__words[0];
  }
  if ((object.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(object.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = object.__r_.__value_.__l.__size_;
  }
  xpc_object_t v28 = std::string::append(&__dst, (const std::string::value_type *)v26, size);
  long long v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
  v160.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v160.__r_.__value_.__l.__data_ = v29;
  v28->__r_.__value_.__l.__size_ = 0;
  v28->__r_.__value_.__r.__words[2] = 0;
  v28->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v164[2]) >= 0) {
    int v30 = (const std::string::value_type *)v164;
  }
  else {
    int v30 = (const std::string::value_type *)v164[0];
  }
  if (SHIBYTE(v164[2]) >= 0) {
    std::string::size_type v31 = HIBYTE(v164[2]);
  }
  else {
    std::string::size_type v31 = (std::string::size_type)v164[1];
  }
  v32 = std::string::append(&v160, v30, v31);
  long long v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
  applier.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
  *(_OWORD *)&applier.__r_.__value_.__l.__data_ = v33;
  v32->__r_.__value_.__l.__size_ = 0;
  v32->__r_.__value_.__r.__words[2] = 0;
  v32->__r_.__value_.__r.__words[0] = 0;
  xpc_object_t v34 = (const void *)*MEMORY[0x1E4F4F958];
  size_t v35 = strlen((const char *)*MEMORY[0x1E4F4F958]);
  if (v35 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v36 = v35;
  if (v35 >= 0x17)
  {
    uint64_t v38 = (v35 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v35 | 7) != 0x17) {
      uint64_t v38 = v35 | 7;
    }
    uint64_t v39 = v38 + 1;
    p_p = operator new(v38 + 1);
    size_t v157 = v36;
    int64_t v158 = v39 | 0x8000000000000000;
    std::string __p = p_p;
    goto LABEL_55;
  }
  HIBYTE(v158) = v35;
  p_p = &__p;
  if (v35) {
LABEL_55:
  }
    memmove(p_p, v34, v36);
  *((unsigned char *)p_p + v36) = 0;
  if (v158 >= 0) {
    xpc_object_t v40 = (const std::string::value_type *)&__p;
  }
  else {
    xpc_object_t v40 = (const std::string::value_type *)__p;
  }
  if (v158 >= 0) {
    std::string::size_type v41 = HIBYTE(v158);
  }
  else {
    std::string::size_type v41 = v157;
  }
  xpc_object_t v42 = std::string::append(&applier, v40, v41);
  long long v43 = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
  v161.__r_.__value_.__r.__words[2] = v42->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v161.__r_.__value_.__l.__data_ = v43;
  v42->__r_.__value_.__l.__size_ = 0;
  v42->__r_.__value_.__r.__words[2] = 0;
  v42->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v158) < 0)
  {
    operator delete(__p);
    if ((SHIBYTE(applier.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_64:
      if ((SHIBYTE(v160.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_65;
      }
LABEL_72:
      operator delete(v160.__r_.__value_.__l.__data_);
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_66;
      }
LABEL_73:
      operator delete(__dst.__r_.__value_.__l.__data_);
      goto LABEL_66;
    }
  }
  else if ((SHIBYTE(applier.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_64;
  }
  operator delete(applier.__r_.__value_.__l.__data_);
  if (SHIBYTE(v160.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_72;
  }
LABEL_65:
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_73;
  }
LABEL_66:
  xpc_object_t v44 = xpc_dictionary_create(0, 0, 0);
  uint64_t v45 = MEMORY[0x1E4F14590];
  if (v44 || (xpc_object_t v44 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C8792D30](v44) == v45)
    {
      xpc_retain(v44);
      xpc_object_t v46 = v44;
    }
    else
    {
      xpc_object_t v46 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v46 = xpc_null_create();
    xpc_object_t v44 = 0;
  }
  xpc_release(v44);
  if (MEMORY[0x1C8792D30](v46) == v45)
  {
    xpc_object_t v47 = xpc_dictionary_get_value((xpc_object_t)a1[3], (const char *)*MEMORY[0x1E4F4CA98]);
    v160.__r_.__value_.__r.__words[0] = (std::string::size_type)v47;
    if (v47) {
      xpc_retain(v47);
    }
    else {
      v160.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
    }
    xpc::dyn_cast_or_default((uint64_t *)&applier, (xpc *)&v160, (const object *)"", v48);
    if ((applier.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_std::string applier = &applier;
    }
    else {
      p_std::string applier = (std::string *)applier.__r_.__value_.__r.__words[0];
    }
    xpc_object_t v50 = xpc_string_create((const char *)p_applier);
    if (!v50) {
      xpc_object_t v50 = xpc_null_create();
    }
    xpc_dictionary_set_value(v46, (const char *)*MEMORY[0x1E4F4CA90], v50);
    xpc_object_t v51 = xpc_null_create();
    xpc_release(v50);
    xpc_release(v51);
    if (SHIBYTE(applier.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(applier.__r_.__value_.__l.__data_);
    }
    xpc_release(v160.__r_.__value_.__l.__data_);
    if (SHIBYTE(v164[2]) >= 0) {
      v52 = (const char *)v164;
    }
    else {
      v52 = (const char *)v164[0];
    }
    xpc_object_t v53 = xpc_string_create(v52);
    if (!v53) {
      xpc_object_t v53 = xpc_null_create();
    }
    xpc_dictionary_set_value(v46, (const char *)*MEMORY[0x1E4F4C7F0], v53);
    xpc_object_t v54 = xpc_null_create();
    xpc_release(v53);
    xpc_release(v54);
    xpc_object_t v55 = xpc_string_create(*v19);
    if (!v55) {
      xpc_object_t v55 = xpc_null_create();
    }
    xpc_dictionary_set_value(v46, (const char *)*MEMORY[0x1E4F4C7E8], v55);
    xpc_object_t v56 = xpc_null_create();
    xpc_release(v55);
    xpc_release(v56);
    if (v163[2] >= 0) {
      v57 = (const char *)v163;
    }
    else {
      v57 = (const char *)v163[0];
    }
    xpc_object_t v58 = xpc_string_create(v57);
    if (!v58) {
      xpc_object_t v58 = xpc_null_create();
    }
    xpc_dictionary_set_value(v46, (const char *)*MEMORY[0x1E4F4CB88], v58);
    xpc_object_t v59 = xpc_null_create();
    xpc_release(v58);
    xpc_release(v59);
    xpc_object_t v60 = xpc_dictionary_get_value((xpc_object_t)a1[3], (const char *)*MEMORY[0x1E4F4C6A0]);
    v160.__r_.__value_.__r.__words[0] = (std::string::size_type)v60;
    if (v60) {
      xpc_retain(v60);
    }
    else {
      v160.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
    }
    xpc::dyn_cast_or_default((uint64_t *)&applier, (xpc *)&v160, (const object *)"", v61);
    if ((applier.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v62 = &applier;
    }
    else {
      uint64_t v62 = (std::string *)applier.__r_.__value_.__r.__words[0];
    }
    xpc_object_t v63 = xpc_string_create((const char *)v62);
    if (!v63) {
      xpc_object_t v63 = xpc_null_create();
    }
    xpc_dictionary_set_value(v46, (const char *)*MEMORY[0x1E4F4CCC0], v63);
    xpc_object_t v64 = xpc_null_create();
    xpc_release(v63);
    xpc_release(v64);
    if (SHIBYTE(applier.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(applier.__r_.__value_.__l.__data_);
    }
    xpc_release(v160.__r_.__value_.__l.__data_);
    memset(&applier, 170, sizeof(applier));
    char v65 = (const char *)*MEMORY[0x1E4F4C690];
    xpc_object_t v66 = xpc_dictionary_get_value((xpc_object_t)a1[3], (const char *)*MEMORY[0x1E4F4C690]);
    v160.__r_.__value_.__r.__words[0] = (std::string::size_type)v66;
    if (v66) {
      xpc_retain(v66);
    }
    else {
      v160.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
    }
    xpc::dyn_cast_or_default((uint64_t *)&applier, (xpc *)&v160, (const object *)"", v67);
    xpc_release(v160.__r_.__value_.__l.__data_);
    if ((applier.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t v68 = &applier;
    }
    else {
      size_t v68 = (std::string *)applier.__r_.__value_.__r.__words[0];
    }
    size_t v69 = strlen((const char *)*MEMORY[0x1E4F4C6E8]);
    if (!strncasecmp((const char *)v68, (const char *)*MEMORY[0x1E4F4C6E8], v69))
    {
      xpc_object_t v70 = xpc_dictionary_get_value((xpc_object_t)a1[3], v65);
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v70;
      if (v70) {
        xpc_retain(v70);
      }
      else {
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
      }
      xpc::dyn_cast_or_default((uint64_t *)&v160, (xpc *)&__dst, (const object *)"", v71);
      if ((v160.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v72 = &v160;
      }
      else {
        uint64_t v72 = (std::string *)v160.__r_.__value_.__r.__words[0];
      }
      xpc_object_t v73 = xpc_string_create((const char *)v72);
      if (!v73) {
        xpc_object_t v73 = xpc_null_create();
      }
      xpc_dictionary_set_value(v46, (const char *)*MEMORY[0x1E4F4CB80], v73);
      xpc_object_t v74 = xpc_null_create();
      xpc_release(v73);
      xpc_release(v74);
      if (SHIBYTE(v160.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v160.__r_.__value_.__l.__data_);
      }
      xpc_release(__dst.__r_.__value_.__l.__data_);
      xpc_object_t v75 = xpc_dictionary_get_value((xpc_object_t)a1[3], (const char *)*MEMORY[0x1E4F4CA38]);
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v75;
      if (v75) {
        xpc_retain(v75);
      }
      else {
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
      }
      xpc::dyn_cast_or_default((uint64_t *)&v160, (xpc *)&__dst, (const object *)"", v76);
      if ((v160.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v77 = &v160;
      }
      else {
        uint64_t v77 = (std::string *)v160.__r_.__value_.__r.__words[0];
      }
      xpc_object_t v78 = xpc_string_create((const char *)v77);
      if (!v78) {
        xpc_object_t v78 = xpc_null_create();
      }
      xpc_dictionary_set_value(v46, (const char *)*MEMORY[0x1E4F4CE88], v78);
      xpc_object_t v79 = xpc_null_create();
      xpc_release(v78);
      xpc_release(v79);
      if (SHIBYTE(v160.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v160.__r_.__value_.__l.__data_);
      }
      xpc_release(__dst.__r_.__value_.__l.__data_);
      xpc_object_t v80 = xpc_dictionary_get_value((xpc_object_t)a1[3], (const char *)*MEMORY[0x1E4F4C8D8]);
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v80;
      if (v80) {
        xpc_retain(v80);
      }
      else {
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
      }
      xpc::dyn_cast_or_default((uint64_t *)&v160, (xpc *)&__dst, (const object *)"", v81);
      if ((v160.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        size_t v82 = &v160;
      }
      else {
        size_t v82 = (std::string *)v160.__r_.__value_.__r.__words[0];
      }
      xpc_object_t v83 = xpc_string_create((const char *)v82);
      if (!v83) {
        xpc_object_t v83 = xpc_null_create();
      }
      xpc_dictionary_set_value(v46, (const char *)*MEMORY[0x1E4F4CD60], v83);
      xpc_object_t v84 = xpc_null_create();
      xpc_release(v83);
      xpc_release(v84);
      if (SHIBYTE(v160.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v160.__r_.__value_.__l.__data_);
      }
      xpc_release(__dst.__r_.__value_.__l.__data_);
    }
    xpc_object_t v85 = xpc_dictionary_get_value((xpc_object_t)a1[3], (const char *)*MEMORY[0x1E4F4C8E8]);
    v160.__r_.__value_.__r.__words[0] = (std::string::size_type)v85;
    if (v85) {
      xpc_retain(v85);
    }
    else {
      v160.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
    }
    char v86 = xpc::dyn_cast_or_default((xpc *)&v160, 0);
    xpc_object_t v87 = xpc_BOOL_create(v86);
    if (!v87) {
      xpc_object_t v87 = xpc_null_create();
    }
    xpc_dictionary_set_value(v46, (const char *)*MEMORY[0x1E4F4CB78], v87);
    xpc_object_t v88 = xpc_null_create();
    xpc_release(v87);
    xpc_release(v88);
    xpc_release(v160.__r_.__value_.__l.__data_);
    xpc_object_t v89 = xpc_dictionary_get_value((xpc_object_t)a1[3], (const char *)*MEMORY[0x1E4F4C900]);
    v160.__r_.__value_.__r.__words[0] = (std::string::size_type)v89;
    if (v89) {
      xpc_retain(v89);
    }
    else {
      v160.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
    }
    char v90 = xpc::dyn_cast_or_default((xpc *)&v160, 0);
    xpc_object_t v91 = xpc_BOOL_create(v90);
    if (!v91) {
      xpc_object_t v91 = xpc_null_create();
    }
    std::string::size_type v92 = (const char *)*MEMORY[0x1E4F4CA88];
    xpc_dictionary_set_value(v46, (const char *)*MEMORY[0x1E4F4CA88], v91);
    xpc_object_t v93 = xpc_null_create();
    xpc_release(v91);
    xpc_release(v93);
    xpc_release(v160.__r_.__value_.__l.__data_);
    xpc_object_t v94 = xpc_dictionary_get_value((xpc_object_t)a1[3], (const char *)*MEMORY[0x1E4F4C8F8]);
    v160.__r_.__value_.__r.__words[0] = (std::string::size_type)v94;
    if (v94) {
      xpc_retain(v94);
    }
    else {
      v160.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
    }
    char v95 = xpc::dyn_cast_or_default((xpc *)&v160, 0);
    xpc_object_t v96 = xpc_BOOL_create(v95);
    if (!v96) {
      xpc_object_t v96 = xpc_null_create();
    }
    v97 = (const char *)*MEMORY[0x1E4F4CA80];
    xpc_dictionary_set_value(v46, (const char *)*MEMORY[0x1E4F4CA80], v96);
    xpc_object_t v98 = xpc_null_create();
    xpc_release(v96);
    xpc_release(v98);
    xpc_release(v160.__r_.__value_.__l.__data_);
    if (*(unsigned char *)(v3 + 216))
    {
      v99 = *(NSObject **)(v3 + 88);
      if (os_log_type_enabled(v99, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v160.__r_.__value_.__l.__data_) = 0;
        _os_log_impl(&dword_1C5767000, v99, OS_LOG_TYPE_DEFAULT, "#I Setting SCD and COF flags due to problem reaching helper daemon during shutdown", (uint8_t *)&v160, 2u);
      }
      xpc_object_t v100 = xpc_BOOL_create(1);
      if (!v100) {
        xpc_object_t v100 = xpc_null_create();
      }
      xpc_dictionary_set_value(v46, v92, v100);
      xpc_object_t v101 = xpc_null_create();
      xpc_release(v100);
      xpc_release(v101);
      xpc_object_t v102 = xpc_BOOL_create(1);
      if (!v102) {
        xpc_object_t v102 = xpc_null_create();
      }
      xpc_dictionary_set_value(v46, v97, v102);
      xpc_object_t v103 = xpc_null_create();
      xpc_release(v102);
      xpc_release(v103);
    }
    if (SHIBYTE(applier.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(applier.__r_.__value_.__l.__data_);
    }
  }
  std::string __p = (void *)0xAAAAAAAAAAAAAAAALL;
  xpc_object_t v104 = operator new(0x30uLL);
  v154 = v104;
  long long v155 = xmmword_1C59A4350;
  strcpy((char *)v104, "com.apple.AppleBasebandManager.data.plist");
  LogTracker::copyPreference(v3, &v154, &__p);
  operator delete(v104);
  xpc_object_t v105 = *(void **)(v3 + 152);
  if (v105 != (void *)(v3 + 160))
  {
    do
    {
      xpc_object_t v107 = (xpc_object_t *)v105[7];
      xpc_object_t v108 = *v107;
      if (*v107)
      {
        xpc_retain(*v107);
        xpc_object_t v109 = (const char *)(v105 + 4);
        if (*((char *)v105 + 55) < 0) {
          goto LABEL_189;
        }
      }
      else
      {
        xpc_object_t v108 = xpc_null_create();
        xpc_object_t v109 = (const char *)(v105 + 4);
        if (*((char *)v105 + 55) < 0) {
LABEL_189:
        }
          xpc_object_t v109 = *(const char **)v109;
      }
      xpc_dictionary_set_value(__p, v109, v108);
      xpc_object_t v110 = xpc_null_create();
      xpc_release(v108);
      xpc_release(v110);
      xpc_object_t v111 = xpc_null_create();
      xpc_object_t v112 = (void **)v105[7];
      xpc_object_t v113 = xpc_null_create();
      xpc_object_t v114 = *v112;
      *xpc_object_t v112 = v111;
      xpc_release(v114);
      xpc_release(v113);
      xpc_object_t v115 = *(NSObject **)(v3 + 176);
      if (v115)
      {
        dispatch_retain(*(dispatch_object_t *)(v3 + 176));
        dispatch_group_enter(v115);
      }
      uint64_t v116 = v105[7];
      v117 = *(NSObject **)(v116 + 8);
      *(void *)(v116 + 8) = v115;
      if (v117)
      {
        dispatch_group_leave(v117);
        dispatch_release(v117);
      }
      xpc_object_t v118 = (void *)v105[1];
      if (v118)
      {
        do
        {
          xpc_object_t v119 = v118;
          xpc_object_t v118 = (void *)*v118;
        }
        while (v118);
      }
      else
      {
        do
        {
          xpc_object_t v119 = (void *)v105[2];
          BOOL v120 = *v119 == (void)v105;
          xpc_object_t v105 = v119;
        }
        while (!v120);
      }
      xpc_object_t v105 = v119;
    }
    while (v119 != (void *)(v3 + 160));
  }
  v160.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  v160.__r_.__value_.__l.__size_ = (std::string::size_type)"HealthEventDB";
  xpc::dict::object_proxy::operator xpc::dict((uint64_t)&v160, &__dst);
  if (MEMORY[0x1C8792D30](__dst.__r_.__value_.__r.__words[0]) == v45)
  {
    xpc_object_t v121 = xpc_dictionary_create(0, 0, 0);
    if (v121 || (xpc_object_t v121 = xpc_null_create()) != 0)
    {
      if (MEMORY[0x1C8792D30](v121) == v45)
      {
        xpc_retain(v121);
        xpc_object_t v122 = v121;
      }
      else
      {
        xpc_object_t v122 = xpc_null_create();
      }
    }
    else
    {
      xpc_object_t v122 = xpc_null_create();
      xpc_object_t v121 = 0;
    }
    xpc_release(v121);
    if (MEMORY[0x1C8792D30](v122) == v45)
    {
      xpc_object_t v123 = (void *)__dst.__r_.__value_.__r.__words[0];
      applier.__r_.__value_.__r.__words[0] = MEMORY[0x1E4F143A8];
      applier.__r_.__value_.__l.__size_ = 3321888768;
      applier.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZL28purgeArraysWithinDictByLastXRKN3xpc4dictEj_block_invoke;
      v166 = &__block_descriptor_44_e8_32c15_ZTSN3xpc4dictE_e13_B24__0r_8_v16l;
      xpc_object_t v167 = v122;
      if (v122) {
        xpc_retain(v122);
      }
      else {
        xpc_object_t v167 = xpc_null_create();
      }
      int v168 = 10;
      xpc_dictionary_apply(v123, &applier);
      xpc_object_t v124 = xpc_null_create();
      xpc_release(v167);
      xpc_object_t v167 = 0;
      xpc_object_t v106 = v122;
      xpc_object_t v122 = v124;
    }
    else
    {
      xpc_object_t v106 = xpc_null_create();
    }
    xpc_release(v122);
  }
  else
  {
    xpc_object_t v106 = xpc_null_create();
  }
  xpc_dictionary_set_value(__p, "HealthEventDB", v106);
  xpc_object_t v125 = xpc_null_create();
  xpc_release(v106);
  xpc_release(v125);
  xpc_release(__dst.__r_.__value_.__l.__data_);
  if (v46)
  {
    xpc_retain(v46);
    xpc_object_t v126 = v46;
  }
  else
  {
    xpc_object_t v126 = xpc_null_create();
  }
  xpc_dictionary_set_value(__p, (const char *)*MEMORY[0x1E4F4C6B0], v126);
  xpc_object_t v127 = xpc_null_create();
  xpc_release(v126);
  xpc_release(v127);
  LogTracker::getConfiguration((LogTracker *)v3, &value);
  xpc_object_t v128 = value;
  xpc_dictionary_set_value(__p, (const char *)*MEMORY[0x1E4F4C948], value);
  xpc_object_t v129 = xpc_null_create();
  xpc_object_t value = v129;
  xpc_release(v128);
  xpc_release(v129);
  xpc_object_t value = 0;
  v130 = operator new(0x28uLL);
  v150 = v130;
  long long v151 = xmmword_1C59A4360;
  strcpy((char *)v130, "com.apple.AppleBasebandManager.plist");
  LogTracker::copyPreference(v3, &v150, &v152);
  xpc_object_t v131 = v152;
  xpc_dictionary_set_value(__p, (const char *)*MEMORY[0x1E4F4CD90], v152);
  xpc_object_t v132 = xpc_null_create();
  xpc_object_t v152 = v132;
  xpc_release(v131);
  xpc_release(v132);
  xpc_object_t v152 = 0;
  operator delete(v130);
  v133 = (ctu::Gestalt *)pthread_mutex_lock(&ctu::Singleton<ctu::Gestalt,ctu::Gestalt,ctu::PthreadMutexGuardPolicy<ctu::Gestalt>>::sInstance);
  std::string::size_type v134 = off_1EBBDD200;
  if (!off_1EBBDD200)
  {
    ctu::Gestalt::create_default_global((uint64_t *)&v160, v133);
    long long v135 = *(_OWORD *)&v160.__r_.__value_.__l.__data_;
    *(_OWORD *)&v160.__r_.__value_.__l.__data_ = 0uLL;
    v136 = (std::__shared_weak_count *)*(&off_1EBBDD200 + 1);
    off_1EBBDD200 = v135;
    if (v136 && !atomic_fetch_add(&v136->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
      std::__shared_weak_count::__release_weak(v136);
    }
    v137 = (std::__shared_weak_count *)v160.__r_.__value_.__l.__size_;
    if (v160.__r_.__value_.__l.__size_
      && !atomic_fetch_add((atomic_ullong *volatile)(v160.__r_.__value_.__l.__size_ + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
      std::__shared_weak_count::__release_weak(v137);
    }
    std::string::size_type v134 = off_1EBBDD200;
  }
  v138 = (std::__shared_weak_count *)*(&off_1EBBDD200 + 1);
  __dst.__r_.__value_.__r.__words[0] = v134;
  __dst.__r_.__value_.__l.__size_ = *(&off_1EBBDD200 + 1);
  if (*(&off_1EBBDD200 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDD200 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<ctu::Gestalt,ctu::Gestalt,ctu::PthreadMutexGuardPolicy<ctu::Gestalt>>::sInstance);
  (*(void (**)(std::string *__return_ptr, std::string::size_type))(*(void *)v134 + 80))(&applier, v134);
  if ((applier.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v139 = &applier;
  }
  else {
    v139 = (std::string *)applier.__r_.__value_.__r.__words[0];
  }
  xpc_object_t v140 = xpc_string_create((const char *)v139);
  if (!v140) {
    xpc_object_t v140 = xpc_null_create();
  }
  xpc_dictionary_set_value(__p, (const char *)*MEMORY[0x1E4F4CBB0], v140);
  xpc_object_t v141 = xpc_null_create();
  xpc_release(v140);
  xpc_release(v141);
  if (SHIBYTE(applier.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(applier.__r_.__value_.__l.__data_);
    if (!v138) {
      goto LABEL_226;
    }
  }
  else if (!v138)
  {
LABEL_226:
    v142 = __p;
    xpc_object_t v149 = __p;
    if (__p) {
      goto LABEL_227;
    }
LABEL_230:
    xpc_object_t v149 = xpc_null_create();
    int v143 = SHIBYTE(v161.__r_.__value_.__r.__words[2]);
    if ((SHIBYTE(v161.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_228;
    }
    goto LABEL_231;
  }
  if (atomic_fetch_add(&v138->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_226;
  }
  ((void (*)(std::__shared_weak_count *))v138->__on_zero_shared)(v138);
  std::__shared_weak_count::__release_weak(v138);
  v142 = __p;
  xpc_object_t v149 = __p;
  if (!__p) {
    goto LABEL_230;
  }
LABEL_227:
  xpc_retain(v142);
  int v143 = SHIBYTE(v161.__r_.__value_.__r.__words[2]);
  if ((SHIBYTE(v161.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_228:
    std::string v148 = v161;
    goto LABEL_232;
  }
LABEL_231:
  std::string::__init_copy_ctor_external(&v148, v161.__r_.__value_.__l.__data_, v161.__r_.__value_.__l.__size_);
LABEL_232:
  unsigned __int8 v144 = util::writeJSON();
  if (SHIBYTE(v148.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v148.__r_.__value_.__l.__data_);
  }
  xpc_release(v149);
  xpc_object_t v149 = 0;
  v145 = *(NSObject **)(v3 + 88);
  if (os_log_type_enabled(v145, OS_LOG_TYPE_DEFAULT))
  {
    if (((MEMORY[0x1C8792D30](__p) == v45) & v144) != 0) {
      v146 = "Succeeded";
    }
    else {
      v146 = "Failed";
    }
    v147 = (std::string *)v161.__r_.__value_.__r.__words[0];
    if (v143 >= 0) {
      v147 = &v161;
    }
    LODWORD(applier.__r_.__value_.__l.__data_) = 136315394;
    *(std::string::size_type *)((char *)applier.__r_.__value_.__r.__words + 4) = (std::string::size_type)v146;
    WORD2(applier.__r_.__value_.__r.__words[1]) = 2080;
    *(std::string::size_type *)((char *)&applier.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v147;
    _os_log_impl(&dword_1C5767000, v145, OS_LOG_TYPE_DEFAULT, "#I %s to generate log summary: %s", (uint8_t *)&applier, 0x16u);
  }
  xpc_release(__p);
  xpc_release(v46);
  if ((SHIBYTE(v161.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(object.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_243;
    }
LABEL_247:
    operator delete(object.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v163[2]) & 0x80000000) == 0)
    {
LABEL_244:
      if ((SHIBYTE(v164[2]) & 0x80000000) == 0) {
        return;
      }
LABEL_249:
      operator delete(v164[0]);
      return;
    }
    goto LABEL_248;
  }
  operator delete(v161.__r_.__value_.__l.__data_);
  if (SHIBYTE(object.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_247;
  }
LABEL_243:
  if ((SHIBYTE(v163[2]) & 0x80000000) == 0) {
    goto LABEL_244;
  }
LABEL_248:
  operator delete((void *)v163[0]);
  if (SHIBYTE(v164[2]) < 0) {
    goto LABEL_249;
  }
}

void sub_1C58DA384(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, xpc_object_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,xpc_object_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,xpc_object_t object,uint64_t a31,int a32,__int16 a33,char a34,char a35,xpc_object_t a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,void *__p,uint64_t a44,int a45,__int16 a46,char a47,char a48,xpc_object_t a49,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t ___ZL28purgeArraysWithinDictByLastXRKN3xpc4dictEj_block_invoke(uint64_t a1, const char *a2, void *a3)
{
  xpc_object_t v3 = a3;
  uint64_t v6 = MEMORY[0x1C8792D30](a3);
  uint64_t v7 = MEMORY[0x1E4F14568];
  if (v6 == MEMORY[0x1E4F14568])
  {
    if (v3)
    {
      xpc_retain(v3);
    }
    else
    {
      xpc_object_t v3 = xpc_null_create();
      if (!v3)
      {
        xpc_object_t v9 = xpc_null_create();
        xpc_object_t v3 = 0;
LABEL_13:
        xpc_release(v3);
        if (MEMORY[0x1C8792D30](v9) == v7) {
          size_t count = xpc_array_get_count(v9);
        }
        else {
          size_t count = 0;
        }
        if (count < *(unsigned int *)(a1 + 40))
        {
LABEL_57:
          xpc_release(v9);
          return 1;
        }
        if (MEMORY[0x1C8792D30](v9) == v7) {
          size_t v11 = xpc_array_get_count(v9);
        }
        else {
          size_t v11 = 0;
        }
        xpc_object_t v12 = xpc_array_create(0, 0);
        if (v12 || (xpc_object_t v12 = xpc_null_create()) != 0)
        {
          if (MEMORY[0x1C8792D30](v12) == v7)
          {
            xpc_retain(v12);
            xpc_object_t v13 = v12;
          }
          else
          {
            xpc_object_t v13 = xpc_null_create();
          }
        }
        else
        {
          xpc_object_t v13 = xpc_null_create();
          xpc_object_t v12 = 0;
        }
        xpc_release(v12);
        if (v9)
        {
          xpc_retain(v9);
          xpc_object_t v14 = v9;
        }
        else
        {
          xpc_object_t v14 = xpc_null_create();
          if (!v14)
          {
            xpc_object_t v14 = xpc_null_create();
            uint64_t v15 = 0;
            goto LABEL_30;
          }
        }
        xpc_retain(v14);
        uint64_t v15 = v14;
LABEL_30:
        int v27 = a2;
        xpc_release(v15);
        for (size_t i = 0; ; ++i)
        {
          if (v9)
          {
            xpc_retain(v9);
            xpc_object_t v18 = v9;
          }
          else
          {
            xpc_object_t v18 = xpc_null_create();
          }
          if (MEMORY[0x1C8792D30](v9) == v7)
          {
            size_t v19 = xpc_array_get_count(v9);
            if (!v18)
            {
LABEL_40:
              xpc_object_t v20 = xpc_null_create();
              goto LABEL_41;
            }
          }
          else
          {
            size_t v19 = 0;
            if (!v18) {
              goto LABEL_40;
            }
          }
          xpc_retain(v18);
          xpc_object_t v20 = v18;
LABEL_41:
          xpc_release(v18);
          xpc_release(v20);
          if (i == v19 && v14 == v20)
          {
            xpc_release(v14);
            if (v13)
            {
              xpc_retain(v13);
              xpc_object_t v24 = v13;
            }
            else
            {
              xpc_object_t v24 = xpc_null_create();
            }
            xpc_dictionary_set_value(*(xpc_object_t *)(a1 + 32), v27, v24);
            xpc_object_t v25 = xpc_null_create();
            xpc_release(v24);
            xpc_release(v25);
            xpc_release(v13);
            goto LABEL_57;
          }
          if (v11 <= *(unsigned int *)(a1 + 40))
          {
            xpc_object_t value = xpc_array_get_value(v14, i);
            xpc_object_t object = value;
            if (value) {
              xpc_retain(value);
            }
            else {
              xpc_object_t object = xpc_null_create();
            }
            int v22 = xpc::dyn_cast_or_default((xpc *)&object, 0);
            xpc_object_t v23 = xpc_int64_create(v22);
            if (!v23) {
              xpc_object_t v23 = xpc_null_create();
            }
            xpc_array_append_value(v13, v23);
            xpc_release(v23);
            xpc_release(object);
          }
          else
          {
            --v11;
          }
          if (v14)
          {
            xpc_retain(v14);
            xpc_object_t v17 = v14;
          }
          else
          {
            xpc_object_t v17 = xpc_null_create();
          }
          xpc_release(v17);
        }
      }
    }
    if (MEMORY[0x1C8792D30](v3) == v7)
    {
      xpc_retain(v3);
      xpc_object_t v9 = v3;
    }
    else
    {
      xpc_object_t v9 = xpc_null_create();
    }
    goto LABEL_13;
  }
  if (v3) {
    xpc_retain(v3);
  }
  else {
    xpc_object_t v3 = xpc_null_create();
  }
  xpc_dictionary_set_value(*(xpc_object_t *)(a1 + 32), a2, v3);
  xpc_object_t v8 = xpc_null_create();
  xpc_release(v3);
  xpc_release(v8);
  return 1;
}

void sub_1C58DACCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  xpc_release(v10);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_2,std::default_delete<LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_2>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    xpc_release(*(xpc_object_t *)(v2 + 72));
    *(void *)(v2 + 72) = 0;
    xpc_object_t v3 = *(std::__shared_weak_count **)(v2 + 56);
    if (v3) {
      std::__shared_weak_count::__release_weak(v3);
    }
    xpc_release(*(xpc_object_t *)(v2 + 40));
    *(void *)(v2 + 40) = 0;
    v4 = *(std::__shared_weak_count **)(v2 + 24);
    if (v4) {
      std::__shared_weak_count::__release_weak(v4);
    }
    xpc_release(*(xpc_object_t *)(v2 + 8));
    operator delete((void *)v2);
  }
  return a1;
}

uint64_t *dispatch::detail::group_notify<LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_2>(dispatch_group_s *,dispatch_queue_s *,LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_2 &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke(uint64_t a1, const char *a2)
{
  uint64_t v16 = a1;
  xpc_object_t v3 = *(void **)a1;
  if (prop::tracesettings::enabled((prop::tracesettings *)*MEMORY[0x1E4F4C1F8], a2)
    || prop::tracesettings::enabled((prop::tracesettings *)*MEMORY[0x1E4F4D338], v4)
    || prop::tracesettings::enabled((prop::tracesettings *)*MEMORY[0x1E4F4C288], v5))
  {
    uint64_t v6 = v3[26];
    xpc_object_t v18 = v6;
    if (v6)
    {
      dispatch_retain(v6);
      dispatch_group_enter(v6);
    }
    xpc_object_t v7 = *(xpc_object_t *)(a1 + 8);
    xpc_object_t v17 = v7;
    if (v7)
    {
      xpc_retain(v7);
    }
    else
    {
      xpc_object_t v7 = xpc_null_create();
      xpc_object_t v17 = v7;
    }
    LogTracker::moveBasebandServicesLog_sync(v3, &v18, &v17);
    xpc_release(v7);
    if (v6)
    {
      dispatch_group_leave(v6);
      dispatch_release(v6);
    }
  }
  xpc_object_t v8 = v3[26];
  xpc_object_t v9 = v3[17];
  xpc_object_t v10 = operator new(0x40uLL);
  uint64_t v11 = *(void *)(a1 + 24);
  void *v10 = *(void *)(a1 + 16);
  v10[1] = v11;
  if (v11) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 16), 1uLL, memory_order_relaxed);
  }
  xpc_object_t v12 = *(void **)(a1 + 40);
  v10[2] = *(void *)(a1 + 32);
  v10[3] = v12;
  if (v12)
  {
    xpc_retain(v12);
    uint64_t v13 = *(void *)(a1 + 56);
    v10[4] = *(void *)(a1 + 48);
    v10[5] = v13;
    if (!v13) {
      goto LABEL_16;
    }
    goto LABEL_15;
  }
  v10[3] = xpc_null_create();
  uint64_t v13 = *(void *)(a1 + 56);
  v10[4] = *(void *)(a1 + 48);
  v10[5] = v13;
  if (v13) {
LABEL_15:
  }
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 16), 1uLL, memory_order_relaxed);
LABEL_16:
  xpc_object_t v14 = *(void **)(a1 + 72);
  v10[6] = *(void *)(a1 + 64);
  v10[7] = v14;
  if (v14) {
    xpc_retain(v14);
  }
  else {
    v10[7] = xpc_null_create();
  }
  dispatch_group_notify_f(v8, v9, v10, (dispatch_function_t)dispatch::detail::group_notify<LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_1 const>(dispatch_group_s *,dispatch_queue_s *,LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_1 const &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke);
  return std::unique_ptr<LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_2,std::default_delete<LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_2>>::~unique_ptr[abi:ne180100](&v16);
}

void sub_1C58DAFA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  xpc_release(v11);
  if (v10)
  {
    dispatch_group_leave(v10);
    dispatch_release(v10);
    std::unique_ptr<LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_2,std::default_delete<LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_2>>::~unique_ptr[abi:ne180100](&a10);
    _Unwind_Resume(a1);
  }
  std::unique_ptr<LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_2,std::default_delete<LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_2>>::~unique_ptr[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

uint64_t *dispatch::detail::group_notify<LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_1 const>(dispatch_group_s *,dispatch_queue_s *,LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_1 const &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  uint64_t v26 = a1;
  uint64_t v4 = a1 + 8;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 8);
  xpc_object_t v3 = *(void **)(v4 + 8);
  if (!v2)
  {
    uint64_t v6 = 0;
    goto LABEL_7;
  }
  xpc_object_t v5 = std::__shared_weak_count::lock(v2);
  uint64_t v6 = v5;
  if (!v5 || !*(void *)a1)
  {
LABEL_7:
    xpc_object_t v8 = (const void *)*MEMORY[0x1E4F4CDF8];
    size_t v9 = strlen((const char *)*MEMORY[0x1E4F4CDF8]);
    if (v9 >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    xpc_object_t v10 = (void *)v9;
    if (v9 >= 0x17)
    {
      uint64_t v12 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v9 | 7) != 0x17) {
        uint64_t v12 = v9 | 7;
      }
      uint64_t v13 = v12 + 1;
      uint64_t v11 = (void **)operator new(v12 + 1);
      __dst[1] = v10;
      unint64_t v32 = v13 | 0x8000000000000000;
      __dst[0] = v11;
    }
    else
    {
      HIBYTE(v32) = v9;
      uint64_t v11 = __dst;
      if (!v9) {
        goto LABEL_15;
      }
    }
    memmove(v11, v8, (size_t)v10);
LABEL_15:
    *((unsigned char *)v10 + (void)v11) = 0;
    aBlock = 0;
    CFTypeRef cf = 0;
    Service::broadcastEvent((uint64_t)v3, (uint64_t)__dst, &cf, (const void **)&aBlock);
    if (aBlock) {
      _Block_release(aBlock);
    }
    if (cf) {
      CFRelease(cf);
    }
    if (SHIBYTE(v32) < 0)
    {
      operator delete(__dst[0]);
      if (!v6) {
        return std::unique_ptr<LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_1 const,std::default_delete<LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_1 const>>::~unique_ptr[abi:ne180100](&v26);
      }
    }
    else if (!v6)
    {
      return std::unique_ptr<LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_1 const,std::default_delete<LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_1 const>>::~unique_ptr[abi:ne180100](&v26);
    }
    if (atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
      return std::unique_ptr<LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_1 const,std::default_delete<LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_1 const>>::~unique_ptr[abi:ne180100](&v26);
    }
    char v7 = 1;
    goto LABEL_25;
  }
  if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    char v7 = 0;
LABEL_25:
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    if (v7) {
      return std::unique_ptr<LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_1 const,std::default_delete<LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_1 const>>::~unique_ptr[abi:ne180100](&v26);
    }
  }
  xpc_object_t value = xpc_dictionary_get_value(*(xpc_object_t *)(a1 + 24), (const char *)*MEMORY[0x1E4F4D210]);
  xpc_object_t object = value;
  if (value) {
    xpc_retain(value);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  uint64_t IsInternalBuild = TelephonyUtilIsInternalBuild();
  if ((IsInternalBuild & 1) != 0 || (uint64_t IsInternalBuild = TelephonyUtilIsCarrierBuild(), IsInternalBuild)) {
    uint64_t CompressionMode = capabilities::trace::getCompressionMode((capabilities::trace *)IsInternalBuild);
  }
  else {
    uint64_t CompressionMode = 2;
  }
  int v17 = xpc::dyn_cast_or_default((xpc *)&object, (const object *)CompressionMode);
  xpc_release(object);
  if (v17)
  {
    xpc_object_t v18 = v3[26];
    xpc_object_t object = v18;
    if (v18)
    {
      dispatch_retain(v18);
      dispatch_group_enter(v18);
    }
    xpc_object_t v19 = *(xpc_object_t *)(a1 + 24);
    xpc_object_t v27 = v19;
    if (v19)
    {
      xpc_retain(v19);
    }
    else
    {
      xpc_object_t v19 = xpc_null_create();
      xpc_object_t v27 = v19;
    }
    LogTracker::archiveLogs_sync(v3, (NSObject **)&object, &v27);
    xpc_release(v19);
    xpc_object_t v27 = 0;
    if (v18)
    {
      dispatch_group_leave(v18);
      dispatch_release(v18);
    }
  }
  xpc_object_t v20 = v3[26];
  size_t v21 = v3[17];
  int v22 = operator new(0x20uLL);
  uint64_t v23 = *(void *)(a1 + 40);
  void *v22 = *(void *)(a1 + 32);
  v22[1] = v23;
  if (v23) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v23 + 16), 1uLL, memory_order_relaxed);
  }
  xpc_object_t v24 = *(void **)(a1 + 56);
  v22[2] = *(void *)(a1 + 48);
  v22[3] = v24;
  if (v24) {
    xpc_retain(v24);
  }
  else {
    v22[3] = xpc_null_create();
  }
  dispatch_group_notify_f(v20, v21, v22, (dispatch_function_t)dispatch::detail::group_notify<LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_0 const>(dispatch_group_s *,dispatch_queue_s *,LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_0 const &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke);
  return std::unique_ptr<LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_1 const,std::default_delete<LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_1 const>>::~unique_ptr[abi:ne180100](&v26);
}

void sub_1C58DB2E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, xpc_object_t object, void *aBlock, CFTypeRef cf, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  xpc_release(v20);
  if (v19)
  {
    dispatch_group_leave(v19);
    dispatch_release(v19);
    std::unique_ptr<LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_1 const,std::default_delete<LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_1 const>>::~unique_ptr[abi:ne180100](&a9);
    _Unwind_Resume(a1);
  }
  std::unique_ptr<LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_1 const,std::default_delete<LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_1 const>>::~unique_ptr[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_1 const,std::default_delete<LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_1 const>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    xpc_release(*(xpc_object_t *)(v2 + 56));
    *(void *)(v2 + 56) = 0;
    xpc_object_t v3 = *(std::__shared_weak_count **)(v2 + 40);
    if (v3) {
      std::__shared_weak_count::__release_weak(v3);
    }
    xpc_release(*(xpc_object_t *)(v2 + 24));
    *(void *)(v2 + 24) = 0;
    uint64_t v4 = *(std::__shared_weak_count **)(v2 + 8);
    if (v4) {
      std::__shared_weak_count::__release_weak(v4);
    }
    operator delete((void *)v2);
  }
  return a1;
}

void dispatch::detail::group_notify<LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_0 const>(dispatch_group_s *,dispatch_queue_s *,LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_0 const &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke(char *a1)
{
  uint64_t v55 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = a1 + 8;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)a1 + 1);
  uint64_t v3 = *((void *)v4 + 1);
  xpc_object_t v5 = (const char **)MEMORY[0x1E4F4CDF8];
  if (!v2)
  {
    char v7 = 0;
    goto LABEL_7;
  }
  uint64_t v6 = std::__shared_weak_count::lock(v2);
  char v7 = v6;
  if (!v6 || !*(void *)a1)
  {
LABEL_7:
    size_t v9 = *v5;
    size_t v10 = strlen(*v5);
    if (v10 > 0x7FFFFFFFFFFFFFF7) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = (void *)v10;
    if (v10 >= 0x17)
    {
      uint64_t v13 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v10 | 7) != 0x17) {
        uint64_t v13 = v10 | 7;
      }
      uint64_t v14 = v13 + 1;
      uint64_t v12 = (void **)operator new(v13 + 1);
      __dst[1] = v11;
      unint64_t v53 = v14 | 0x8000000000000000;
      __dst[0] = v12;
    }
    else
    {
      HIBYTE(v53) = v10;
      uint64_t v12 = __dst;
      if (!v10) {
        goto LABEL_15;
      }
    }
    memmove(v12, v9, (size_t)v11);
LABEL_15:
    *((unsigned char *)v11 + (void)v12) = 0;
    aBlock = 0;
    CFTypeRef cf = 0;
    Service::broadcastEvent(v3, (uint64_t)__dst, &cf, (const void **)&aBlock);
    if (aBlock) {
      _Block_release(aBlock);
    }
    if (cf) {
      CFRelease(cf);
    }
    if (SHIBYTE(v53) < 0)
    {
      operator delete(__dst[0]);
      if (!v7) {
        goto LABEL_80;
      }
    }
    else if (!v7)
    {
      goto LABEL_80;
    }
    if (atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_80;
    }
    char v8 = 1;
    goto LABEL_25;
  }
  if (atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_26;
  }
  char v8 = 0;
LABEL_25:
  ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
  std::__shared_weak_count::__release_weak(v7);
  if (v8) {
    goto LABEL_80;
  }
LABEL_26:
  memset(v49, 170, sizeof(v49));
  uint64_t v15 = (const char *)*MEMORY[0x1E4F4CA98];
  xpc_object_t value = xpc_dictionary_get_value(*((xpc_object_t *)a1 + 3), (const char *)*MEMORY[0x1E4F4CA98]);
  object[0] = value;
  if (value) {
    xpc_retain(value);
  }
  else {
    object[0] = xpc_null_create();
  }
  xpc::dyn_cast_or_default((uint64_t *)v49, (xpc *)object, (const object *)"", v17);
  xpc_release(object[0]);
  memset(object, 170, sizeof(object));
  xpc_object_t v18 = (const char *)*MEMORY[0x1E4F4C4C8];
  xpc_object_t v19 = xpc_dictionary_get_value(*((xpc_object_t *)a1 + 3), (const char *)*MEMORY[0x1E4F4C4C8]);
  xpc_object_t v47 = v19;
  if (v19) {
    xpc_retain(v19);
  }
  else {
    xpc_object_t v47 = xpc_null_create();
  }
  Timestamp::Timestamp((Timestamp *)&buf);
  Timestamp::asString(v20, 0, 9, __p);
  xpc::dyn_cast_or_default();
  if (SHIBYTE(v46) < 0) {
    operator delete(__p[0]);
  }
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&buf, *((void **)&buf + 1));
  xpc_release(v47);
  xpc_object_t v21 = xpc_dictionary_create(0, 0, 0);
  if (v21 || (xpc_object_t v21 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C8792D30](v21) == MEMORY[0x1E4F14590])
    {
      xpc_retain(v21);
      xpc_object_t v22 = v21;
    }
    else
    {
      xpc_object_t v22 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v22 = xpc_null_create();
    xpc_object_t v21 = 0;
  }
  xpc_release(v21);
  if (SHIBYTE(object[2]) >= 0) {
    uint64_t v23 = object;
  }
  else {
    uint64_t v23 = (xpc_object_t *)object[0];
  }
  xpc_object_t v24 = xpc_string_create((const char *)v23);
  if (!v24) {
    xpc_object_t v24 = xpc_null_create();
  }
  xpc_dictionary_set_value(v22, v18, v24);
  xpc_object_t v25 = xpc_null_create();
  xpc_release(v24);
  xpc_release(v25);
  if (SHIBYTE(v49[2]) >= 0) {
    uint64_t v26 = v49;
  }
  else {
    uint64_t v26 = (void **)v49[0];
  }
  xpc_object_t v27 = xpc_string_create((const char *)v26);
  if (!v27) {
    xpc_object_t v27 = xpc_null_create();
  }
  xpc_dictionary_set_value(v22, v15, v27);
  xpc_object_t v28 = xpc_null_create();
  xpc_release(v27);
  xpc_release(v28);
  xpc_object_t v29 = xpc_string_create((const char *)*MEMORY[0x1E4F4F928]);
  if (!v29) {
    xpc_object_t v29 = xpc_null_create();
  }
  xpc_dictionary_set_value(v22, (const char *)*MEMORY[0x1E4F4C7F8], v29);
  xpc_object_t v30 = xpc_null_create();
  xpc_release(v29);
  xpc_release(v30);
  std::string::size_type v31 = *v5;
  size_t v32 = strlen(*v5);
  if (v32 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  long long v33 = (void *)v32;
  if (v32 >= 0x17)
  {
    uint64_t v36 = (v32 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v32 | 7) != 0x17) {
      uint64_t v36 = v32 | 7;
    }
    uint64_t v37 = v36 + 1;
    xpc_object_t v34 = operator new(v36 + 1);
    __p[1] = v33;
    unint64_t v46 = v37 | 0x8000000000000000;
    __p[0] = v34;
LABEL_60:
    memmove(v34, v31, (size_t)v33);
    *((unsigned char *)v33 + (void)v34) = 0;
    xpc_object_t v44 = v22;
    if (v22) {
      goto LABEL_56;
    }
    goto LABEL_61;
  }
  HIBYTE(v46) = v32;
  xpc_object_t v34 = __p;
  if (v32) {
    goto LABEL_60;
  }
  LOBYTE(__p[0]) = 0;
  xpc_object_t v44 = v22;
  if (v22)
  {
LABEL_56:
    xpc_retain(v22);
    goto LABEL_62;
  }
LABEL_61:
  xpc_object_t v44 = xpc_null_create();
LABEL_62:
  xpc::bridge((uint64_t *)&buf, (xpc *)&v44, v35);
  uint64_t v38 = (void *)buf;
  if ((void)buf && (CFTypeID v39 = CFGetTypeID((CFTypeRef)buf), v39 == CFDictionaryGetTypeID()))
  {
    xpc_object_t v47 = v38;
    CFRetain(v38);
  }
  else
  {
    xpc_object_t v47 = 0;
  }
  long long v43 = 0;
  Service::broadcastEvent(v3, (uint64_t)__p, (const void **)&v47, (const void **)&v43);
  if (v43) {
    _Block_release(v43);
  }
  if (v47) {
    CFRelease(v47);
  }
  if ((void)buf) {
    CFRelease((CFTypeRef)buf);
  }
  xpc_release(v44);
  if (SHIBYTE(v46) < 0) {
    operator delete(__p[0]);
  }
  xpc_object_t v40 = *(NSObject **)(v3 + 88);
  if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
  {
    std::string::size_type v41 = object;
    if (SHIBYTE(object[2]) < 0) {
      std::string::size_type v41 = (xpc_object_t *)object[0];
    }
    LODWORD(buf) = 136315138;
    *(void *)((char *)&buf + 4) = v41;
    _os_log_impl(&dword_1C5767000, v40, OS_LOG_TYPE_DEFAULT, "#I TracePostProcessingEnd with timestamp[%s]", (uint8_t *)&buf, 0xCu);
  }
  xpc_release(v22);
  if (SHIBYTE(object[2]) < 0)
  {
    operator delete(object[0]);
    if ((SHIBYTE(v49[2]) & 0x80000000) == 0) {
      goto LABEL_80;
    }
  }
  else if ((SHIBYTE(v49[2]) & 0x80000000) == 0)
  {
    goto LABEL_80;
  }
  operator delete(v49[0]);
LABEL_80:
  xpc_release(*((xpc_object_t *)a1 + 3));
  *((void *)a1 + 3) = 0;
  xpc_object_t v42 = (std::__shared_weak_count *)*((void *)a1 + 1);
  if (v42) {
    std::__shared_weak_count::__release_weak(v42);
  }
  operator delete(a1);
}

void sub_1C58DBA48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *aBlock, xpc_object_t object, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, CFTypeRef cf, xpc_object_t a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,CFTypeRef a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void dispatch::detail::group_notify<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_6>(dispatch_group_s *,dispatch_queue_s *,LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_6 &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke(uint64_t *a1)
{
  uint64_t v2 = a1[2];
  xpc_object_t v3 = xpc_dictionary_create(0, 0, 0);
  if (v3 || (xpc_object_t v3 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C8792D30](v3) == MEMORY[0x1E4F14590])
    {
      xpc_retain(v3);
      xpc_object_t v4 = v3;
    }
    else
    {
      xpc_object_t v4 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v4 = xpc_null_create();
    xpc_object_t v3 = 0;
  }
  xpc_release(v3);
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 3321888768;
  aBlock[2] = ___ZZN10LogTracker30postLogCollectionInternal_syncEN3xpc4dictEENK3__6clEv_block_invoke;
  aBlock[3] = &__block_descriptor_280_e8_40c35_ZTSNSt3__18weak_ptrI10LogTrackerEE56c67_ZTSZN10LogTracker30postLogCollectionInternal_syncEN3xpc4dictEE3__5_e241_v48__0_Result_i_basic_string_char__std::char_traits_char___std::allocator_char______compressed_pair_std::basic_string_char_::__rep__std::allocator_char______rep_______short__23c__0C_b7b1____long__Qb63b1____raw__3Q_______8_dict__object__v__40l;
  uint64_t v6 = *a1;
  xpc_object_t v5 = (std::__shared_weak_count *)a1[1];
  aBlock[4] = v2;
  aBlock[5] = v6;
  xpc_object_t v21 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  char v7 = (void *)a1[4];
  uint64_t v22 = a1[3];
  xpc_object_t v23 = v7;
  if (v7) {
    xpc_retain(v7);
  }
  else {
    xpc_object_t v23 = xpc_null_create();
  }
  LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_4::$_4((uint64_t)&v24, (uint64_t)(a1 + 5));
  char v8 = _Block_copy(aBlock);
  size_t v9 = *(NSObject **)(v2 + 136);
  if (v9) {
    dispatch_retain(v9);
  }
  unint64_t v18 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v19 = 0xAAAAAAAAAAAAAAAALL;
  GetABMLogServer(&v16);
  abm::HelperClient::create();
  size_t v10 = v17;
  if (v17 && !atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
    xpc_object_t v15 = v4;
    if (v4)
    {
LABEL_17:
      xpc_retain(v4);
      if (v8) {
        goto LABEL_18;
      }
      goto LABEL_40;
    }
  }
  else
  {
    xpc_object_t v15 = v4;
    if (v4) {
      goto LABEL_17;
    }
  }
  xpc_object_t v15 = xpc_null_create();
  if (v8)
  {
LABEL_18:
    uint64_t v13 = _Block_copy(v8);
    xpc_object_t object = v9;
    if (!v9) {
      goto LABEL_20;
    }
    goto LABEL_19;
  }
LABEL_40:
  uint64_t v13 = 0;
  xpc_object_t object = v9;
  if (v9) {
LABEL_19:
  }
    dispatch_retain(v9);
LABEL_20:
  abm::HelperClient::perform();
  if (object) {
    dispatch_release(object);
  }
  if (v13) {
    _Block_release(v13);
  }
  xpc_release(v15);
  uint64_t v11 = (std::__shared_weak_count *)v19;
  if (v19 && !atomic_fetch_add((atomic_ullong *volatile)(v19 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  if (v9) {
    dispatch_release(v9);
  }
  if (v8) {
    _Block_release(v8);
  }
  LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_3::~$_3((uint64_t)&v29);
  xpc_release(v28);
  xpc_object_t v28 = 0;
  if (v27 < 0) {
    operator delete(__p);
  }
  if (v25) {
    std::__shared_weak_count::__release_weak(v25);
  }
  xpc_release(v23);
  xpc_object_t v23 = 0;
  if (v21) {
    std::__shared_weak_count::__release_weak(v21);
  }
  xpc_release(v4);
  uint64_t v12 = (void *)LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_6::~$_6((uint64_t)a1);
  operator delete(v12);
}

void sub_1C58DBFE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *aBlock, dispatch_object_t object, xpc_object_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,std::__shared_weak_count *a22,uint64_t a23,xpc_object_t a24,uint64_t a25,std::__shared_weak_count *a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,xpc_object_t a35,uint64_t a36)
{
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  xpc_release(a11);
  if (a15 && !atomic_fetch_add(&a15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))a15->__on_zero_shared)(a15);
    std::__shared_weak_count::__release_weak(a15);
  }
  if (v39) {
    dispatch_release(v39);
  }
  if (v38) {
    _Block_release(v38);
  }
  LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_3::~$_3((uint64_t)&a36);
  xpc_release(a35);
  if (a34 < 0) {
    operator delete(__p);
  }
  if (a26) {
    std::__shared_weak_count::__release_weak(a26);
  }
  xpc_release(a24);
  if (a22) {
    std::__shared_weak_count::__release_weak(a22);
  }
  xpc_release(v37);
  std::string::size_type v41 = (void *)LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_6::~$_6(v36);
  operator delete(v41);
  _Unwind_Resume(a1);
}

void ___ZZN10LogTracker30postLogCollectionInternal_syncEN3xpc4dictEENK3__6clEv_block_invoke(void *a1, unsigned int *a2)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  xpc_object_t v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    uint64_t v5 = a1[4];
    uint64_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      char v7 = v6;
      uint64_t v8 = a1[5];
      if (atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        if (!v8) {
          return;
        }
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v7);
        if (!v8) {
          return;
        }
      }
      uint64_t v9 = *a2;
      size_t v10 = *(NSObject **)(v5 + 88);
      if (v9)
      {
        if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
        {
          TelephonyXPC::Result::toString(v9, (uint64_t)__p);
          int v17 = v19 >= 0 ? __p : (void **)__p[0];
          *(_DWORD *)long long buf = 136315138;
          xpc_object_t v21 = v17;
          _os_log_error_impl(&dword_1C5767000, v10, OS_LOG_TYPE_ERROR, "Unable to reach baseband tracing task (error: %s)", buf, 0xCu);
          if (v19 < 0) {
            operator delete(__p[0]);
          }
        }
        char v11 = 1;
      }
      else
      {
        BOOL v12 = os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
        char v11 = 0;
        if (v12)
        {
          LOWORD(__p[0]) = 0;
          _os_log_impl(&dword_1C5767000, v10, OS_LOG_TYPE_DEFAULT, "#I Successfully reached baseband tracing task", (uint8_t *)__p, 2u);
          char v11 = 0;
        }
      }
      *(unsigned char *)(v5 + 216) = v11;
      uint64_t v13 = *(NSObject **)(v5 + 208);
      uint64_t v14 = *(NSObject **)(v5 + 136);
      xpc_object_t v15 = operator new(0xE0uLL);
      uint64_t v16 = (void *)a1[8];
      *xpc_object_t v15 = a1[7];
      v15[1] = v16;
      if (v16) {
        xpc_retain(v16);
      }
      else {
        v15[1] = xpc_null_create();
      }
      LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_4::$_4((uint64_t)(v15 + 2), (uint64_t)(a1 + 9));
      dispatch_group_notify_f(v13, v14, v15, (dispatch_function_t)dispatch::detail::group_notify<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_5 const>(dispatch_group_s *,dispatch_queue_s *,LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_5 const &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke);
    }
  }
}

void sub_1C58DC330(_Unwind_Exception *a1)
{
  xpc_release(v1[1]);
  v1[1] = 0;
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1C58DC350(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_40c35_ZTSNSt3__18weak_ptrI10LogTrackerEE56c67_ZTSZN10LogTracker30postLogCollectionInternal_syncEN3xpc4dictEE3__5(void *a1, void *a2)
{
  uint64_t v4 = a2[6];
  a1[5] = a2[5];
  a1[6] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 16), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = (void *)a2[8];
  a1[7] = a2[7];
  a1[8] = v5;
  if (v5) {
    xpc_retain(v5);
  }
  else {
    a1[8] = xpc_null_create();
  }
  return LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_4::$_4((uint64_t)(a1 + 9), (uint64_t)(a2 + 9));
}

void sub_1C58DC3D4(_Unwind_Exception *a1)
{
  xpc_release(*(xpc_object_t *)(v1 + 64));
  *(void *)(v1 + 64) = 0;
  xpc_object_t v3 = *(std::__shared_weak_count **)(v1 + 48);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  _Unwind_Resume(a1);
}

void __destroy_helper_block_e8_40c35_ZTSNSt3__18weak_ptrI10LogTrackerEE56c67_ZTSZN10LogTracker30postLogCollectionInternal_syncEN3xpc4dictEE3__5(uint64_t a1)
{
  LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_3::~$_3(a1 + 136);
  xpc_release(*(xpc_object_t *)(a1 + 128));
  *(void *)(a1 + 128) = 0;
  if (*(char *)(a1 + 127) < 0) {
    operator delete(*(void **)(a1 + 104));
  }
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 80);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  xpc_release(*(xpc_object_t *)(a1 + 64));
  *(void *)(a1 + 64) = 0;
  xpc_object_t v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3)
  {
    std::__shared_weak_count::__release_weak(v3);
  }
}

uint64_t *dispatch::detail::group_notify<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_5 const>(dispatch_group_s *,dispatch_queue_s *,LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_5 const &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke(uint64_t a1, const char *a2)
{
  uint64_t v12 = a1;
  xpc_object_t v3 = *(void **)a1;
  if (prop::tracesettings::enabled((prop::tracesettings *)*MEMORY[0x1E4F4C1F8], a2)
    || prop::tracesettings::enabled((prop::tracesettings *)*MEMORY[0x1E4F4D338], v4)
    || prop::tracesettings::enabled((prop::tracesettings *)*MEMORY[0x1E4F4C288], v5))
  {
    uint64_t v6 = v3[26];
    uint64_t v14 = v6;
    if (v6)
    {
      dispatch_retain(v6);
      dispatch_group_enter(v6);
    }
    xpc_object_t v7 = *(xpc_object_t *)(a1 + 8);
    xpc_object_t v13 = v7;
    if (v7)
    {
      xpc_retain(v7);
    }
    else
    {
      xpc_object_t v7 = xpc_null_create();
      xpc_object_t v13 = v7;
    }
    LogTracker::moveBasebandServicesLog_sync(v3, &v14, &v13);
    xpc_release(v7);
    if (v6)
    {
      dispatch_group_leave(v6);
      dispatch_release(v6);
    }
  }
  uint64_t v8 = v3[26];
  uint64_t v9 = v3[17];
  size_t v10 = operator new(0xD0uLL);
  LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_4::$_4((uint64_t)v10, a1 + 16);
  dispatch_group_notify_f(v8, v9, v10, (dispatch_function_t)dispatch::detail::group_notify<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_4 const>(dispatch_group_s *,dispatch_queue_s *,LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_4 const &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke);
  return std::unique_ptr<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_5 const,std::default_delete<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_5 const>>::~unique_ptr[abi:ne180100](&v12);
}

void sub_1C58DC5B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  xpc_release(v11);
  if (v10)
  {
    dispatch_group_leave(v10);
    dispatch_release(v10);
    std::unique_ptr<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_5 const,std::default_delete<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_5 const>>::~unique_ptr[abi:ne180100](&a10);
    _Unwind_Resume(a1);
  }
  std::unique_ptr<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_5 const,std::default_delete<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_5 const>>::~unique_ptr[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_5 const,std::default_delete<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_5 const>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_3::~$_3(v2 + 80);
    xpc_release(*(xpc_object_t *)(v2 + 72));
    *(void *)(v2 + 72) = 0;
    if (*(char *)(v2 + 71) < 0) {
      operator delete(*(void **)(v2 + 48));
    }
    xpc_object_t v3 = *(std::__shared_weak_count **)(v2 + 24);
    if (v3) {
      std::__shared_weak_count::__release_weak(v3);
    }
    xpc_release(*(xpc_object_t *)(v2 + 8));
    operator delete((void *)v2);
  }
  return a1;
}

void dispatch::detail::group_notify<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_4 const>(dispatch_group_s *,dispatch_queue_s *,LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_4 const &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke(char *a1)
{
  uint64_t v4 = a1 + 8;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)a1 + 1);
  xpc_object_t v3 = (void *)*((void *)v4 + 1);
  if (!v2)
  {
    uint64_t v6 = 0;
    goto LABEL_7;
  }
  uint64_t v5 = std::__shared_weak_count::lock(v2);
  uint64_t v6 = v5;
  if (!v5 || !*(void *)a1)
  {
LABEL_7:
    uint64_t v8 = (const void *)*MEMORY[0x1E4F4CDF8];
    size_t v9 = strlen((const char *)*MEMORY[0x1E4F4CDF8]);
    if (v9 >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    size_t v10 = (void *)v9;
    if (v9 >= 0x17)
    {
      uint64_t v12 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v9 | 7) != 0x17) {
        uint64_t v12 = v9 | 7;
      }
      uint64_t v13 = v12 + 1;
      char v11 = (void **)operator new(v12 + 1);
      __dst[1] = v10;
      unint64_t v30 = v13 | 0x8000000000000000;
      __dst[0] = v11;
    }
    else
    {
      HIBYTE(v30) = v9;
      char v11 = __dst;
      if (!v9) {
        goto LABEL_15;
      }
    }
    memmove(v11, v8, (size_t)v10);
LABEL_15:
    *((unsigned char *)v10 + (void)v11) = 0;
    aBlock = 0;
    CFTypeRef cf = 0;
    Service::broadcastEvent((uint64_t)v3, (uint64_t)__dst, &cf, (const void **)&aBlock);
    if (aBlock) {
      _Block_release(aBlock);
    }
    if (cf) {
      CFRelease(cf);
    }
    if (SHIBYTE(v30) < 0)
    {
      operator delete(__dst[0]);
      if (!v6) {
        goto LABEL_49;
      }
    }
    else if (!v6)
    {
      goto LABEL_49;
    }
    if (atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_49;
    }
    char v7 = 1;
    goto LABEL_25;
  }
  if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    char v7 = 0;
LABEL_25:
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    if (v7) {
      goto LABEL_49;
    }
  }
  if (*((_DWORD *)a1 + 6) && !a1[28])
  {
    int v14 = a1[55];
    size_t v15 = v14 >= 0 ? a1[55] : *((void *)a1 + 5);
    if (v15 == strlen((const char *)*MEMORY[0x1E4F4C820]))
    {
      uint64_t v16 = v14 >= 0 ? a1 + 32 : (char *)*((void *)a1 + 4);
      if (!memcmp(v16, (const void *)*MEMORY[0x1E4F4C820], v15))
      {
        int v17 = v3[26];
        uint64_t v26 = v17;
        if (v17)
        {
          dispatch_retain(v17);
          dispatch_group_enter(v17);
        }
        xpc_object_t v18 = (xpc_object_t)*((void *)a1 + 7);
        xpc_object_t v25 = v18;
        if (v18)
        {
          xpc_retain(v18);
        }
        else
        {
          xpc_object_t v18 = xpc_null_create();
          xpc_object_t v25 = v18;
        }
        LogTracker::archiveLogs_sync(v3, &v26, &v25);
        xpc_release(v18);
        xpc_object_t v25 = 0;
        if (v17)
        {
          dispatch_group_leave(v17);
          dispatch_release(v17);
        }
      }
    }
  }
  char v19 = v3[26];
  uint64_t v20 = v3[17];
  xpc_object_t v21 = operator new(0x90uLL);
  uint64_t v22 = *((void *)a1 + 9);
  *xpc_object_t v21 = *((void *)a1 + 8);
  v21[1] = v22;
  if (v22) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v22 + 16), 1uLL, memory_order_relaxed);
  }
  xpc_object_t v23 = (void *)*((void *)a1 + 11);
  v21[2] = *((void *)a1 + 10);
  v21[3] = v23;
  if (v23) {
    xpc_retain(v23);
  }
  else {
    v21[3] = xpc_null_create();
  }
  LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::$_2((uint64_t)(v21 + 4), (uint64_t)(a1 + 96));
  dispatch_group_notify_f(v19, v20, v21, (dispatch_function_t)dispatch::detail::group_notify<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_3 const>(dispatch_group_s *,dispatch_queue_s *,LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_3 const &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke);
LABEL_49:
  LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_3::~$_3((uint64_t)(a1 + 64));
  xpc_release(*((xpc_object_t *)a1 + 7));
  *((void *)a1 + 7) = 0;
  if (a1[55] < 0) {
    operator delete(*((void **)a1 + 4));
  }
  uint64_t v24 = (std::__shared_weak_count *)*((void *)a1 + 1);
  if (v24) {
    std::__shared_weak_count::__release_weak(v24);
  }
  operator delete(a1);
}

void sub_1C58DC9A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *aBlock, CFTypeRef cf, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  xpc_release(v21);
  if (v20)
  {
    dispatch_group_leave(v20);
    dispatch_release(v20);
  }
  LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_3::~$_3(v19 + 64);
  xpc_release(*(xpc_object_t *)(v19 + 56));
  *(void *)(v19 + 56) = 0;
  if (*(char *)(v19 + 55) < 0)
  {
    operator delete(*(void **)(v19 + 32));
    xpc_object_t v23 = *(std::__shared_weak_count **)(v19 + 8);
    if (!v23)
    {
LABEL_5:
      operator delete((void *)v19);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    xpc_object_t v23 = *(std::__shared_weak_count **)(v19 + 8);
    if (!v23) {
      goto LABEL_5;
    }
  }
  std::__shared_weak_count::__release_weak(v23);
  operator delete((void *)v19);
  _Unwind_Resume(a1);
}

void dispatch::detail::group_notify<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_3 const>(dispatch_group_s *,dispatch_queue_s *,LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_3 const &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke(void *a1)
{
  uint64_t v4 = a1 + 1;
  uint64_t v2 = (std::__shared_weak_count *)a1[1];
  xpc_object_t v3 = (void *)v4[1];
  if (!v2)
  {
    uint64_t v6 = 0;
    goto LABEL_7;
  }
  uint64_t v5 = std::__shared_weak_count::lock(v2);
  uint64_t v6 = v5;
  if (!v5 || !*a1)
  {
LABEL_7:
    uint64_t v8 = (const void *)*MEMORY[0x1E4F4CDF8];
    size_t v9 = strlen((const char *)*MEMORY[0x1E4F4CDF8]);
    if (v9 >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    size_t v10 = (void *)v9;
    if (v9 >= 0x17)
    {
      uint64_t v12 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v9 | 7) != 0x17) {
        uint64_t v12 = v9 | 7;
      }
      uint64_t v13 = v12 + 1;
      char v11 = (void **)operator new(v12 + 1);
      __dst[1] = v10;
      unint64_t v25 = v13 | 0x8000000000000000;
      __dst[0] = v11;
    }
    else
    {
      HIBYTE(v25) = v9;
      char v11 = __dst;
      if (!v9) {
        goto LABEL_15;
      }
    }
    memmove(v11, v8, (size_t)v10);
LABEL_15:
    *((unsigned char *)v10 + (void)v11) = 0;
    aBlock = 0;
    CFTypeRef cf = 0;
    Service::broadcastEvent((uint64_t)v3, (uint64_t)__dst, &cf, (const void **)&aBlock);
    if (aBlock) {
      _Block_release(aBlock);
    }
    if (cf) {
      CFRelease(cf);
    }
    if (SHIBYTE(v25) < 0)
    {
      operator delete(__dst[0]);
      if (!v6) {
        goto LABEL_34;
      }
    }
    else if (!v6)
    {
      goto LABEL_34;
    }
    if (atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_34;
    }
    char v7 = 1;
    goto LABEL_25;
  }
  if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    char v7 = 0;
LABEL_25:
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    if (v7) {
      goto LABEL_34;
    }
  }
  int v14 = v3[26];
  xpc_object_t v21 = v14;
  if (v14)
  {
    dispatch_retain(v14);
    dispatch_group_enter(v14);
  }
  xpc_object_t v15 = (xpc_object_t)a1[3];
  xpc_object_t v20 = v15;
  if (v15)
  {
    xpc_retain(v15);
  }
  else
  {
    xpc_object_t v15 = xpc_null_create();
    xpc_object_t v20 = v15;
  }
  LogTracker::jsonSummary_sync(v3, &v21, &v20);
  xpc_release(v15);
  if (v14)
  {
    dispatch_group_leave(v14);
    dispatch_release(v14);
  }
  uint64_t v16 = v3[26];
  int v17 = v3[17];
  xpc_object_t v18 = operator new(0x70uLL);
  LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::$_2((uint64_t)v18, (uint64_t)(a1 + 4));
  dispatch_group_notify_f(v16, v17, v18, (dispatch_function_t)dispatch::detail::group_notify<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2 const>(dispatch_group_s *,dispatch_queue_s *,LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2 const &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke);
LABEL_34:
  uint64_t v19 = (void *)LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_3::~$_3((uint64_t)a1);
  operator delete(v19);
}

void sub_1C58DCD40(_Unwind_Exception *a1)
{
  operator delete(v2);
  uint64_t v4 = (void *)LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_3::~$_3(v1);
  operator delete(v4);
  _Unwind_Resume(a1);
}

void sub_1C58DCD60(_Unwind_Exception *a1)
{
  xpc_object_t v3 = (void *)LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_3::~$_3(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void sub_1C58DCD7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *aBlock, CFTypeRef cf, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  xpc_release(v21);
  if (v20)
  {
    dispatch_group_leave(v20);
    dispatch_release(v20);
    xpc_object_t v23 = (void *)LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_3::~$_3(v19);
    operator delete(v23);
    _Unwind_Resume(a1);
  }
  uint64_t v24 = (void *)LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_3::~$_3(v19);
  operator delete(v24);
  _Unwind_Resume(a1);
}

uint64_t *dispatch::detail::group_notify<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2 const>(dispatch_group_s *,dispatch_queue_s *,LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2 const &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  uint64_t v25 = a1;
  uint64_t v4 = a1 + 8;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 8);
  uint64_t v3 = *(void *)(v4 + 8);
  if (!v2)
  {
    uint64_t v6 = 0;
    goto LABEL_7;
  }
  uint64_t v5 = std::__shared_weak_count::lock(v2);
  uint64_t v6 = v5;
  if (!v5 || !*(void *)a1)
  {
LABEL_7:
    uint64_t v8 = (const void *)*MEMORY[0x1E4F4CDF8];
    size_t v9 = strlen((const char *)*MEMORY[0x1E4F4CDF8]);
    if (v9 >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    size_t v10 = (void *)v9;
    if (v9 >= 0x17)
    {
      uint64_t v12 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v9 | 7) != 0x17) {
        uint64_t v12 = v9 | 7;
      }
      uint64_t v13 = v12 + 1;
      char v11 = (void **)operator new(v12 + 1);
      __dst[1] = v10;
      unint64_t v31 = v13 | 0x8000000000000000;
      __dst[0] = v11;
    }
    else
    {
      HIBYTE(v31) = v9;
      char v11 = __dst;
      if (!v9) {
        goto LABEL_15;
      }
    }
    memmove(v11, v8, (size_t)v10);
LABEL_15:
    *((unsigned char *)v10 + (void)v11) = 0;
    aBlock = 0;
    CFTypeRef cf = 0;
    Service::broadcastEvent(v3, (uint64_t)__dst, &cf, (const void **)&aBlock);
    if (aBlock) {
      _Block_release(aBlock);
    }
    if (cf) {
      CFRelease(cf);
    }
    if (SHIBYTE(v31) < 0)
    {
      operator delete(__dst[0]);
      if (!v6) {
        return std::unique_ptr<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2 const,std::default_delete<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2 const>>::~unique_ptr[abi:ne180100](&v25);
      }
    }
    else if (!v6)
    {
      return std::unique_ptr<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2 const,std::default_delete<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2 const>>::~unique_ptr[abi:ne180100](&v25);
    }
    if (atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
      return std::unique_ptr<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2 const,std::default_delete<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2 const>>::~unique_ptr[abi:ne180100](&v25);
    }
    char v7 = 1;
    goto LABEL_25;
  }
  if (atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_26;
  }
  char v7 = 0;
LABEL_25:
  ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
  std::__shared_weak_count::__release_weak(v6);
  if (v7) {
    return std::unique_ptr<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2 const,std::default_delete<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2 const>>::~unique_ptr[abi:ne180100](&v25);
  }
LABEL_26:
  if (!*(unsigned char *)(a1 + 24))
  {
    if (*(_DWORD *)(a1 + 28) != 2)
    {
      int v17 = *(void **)(a1 + 32);
      xpc_object_t object = v17;
      if (v17) {
        xpc_retain(v17);
      }
      else {
        xpc_object_t object = xpc_null_create();
      }
      std::string __p = 0;
      uint64_t v33 = 0;
      xpc_object_t v34 = 0;
      TapToRadar::createRadarIfPossible(&object, (uint64_t)&__p);
      if (SHIBYTE(v34) < 0) {
        operator delete(__p);
      }
      xpc_release(object);
      xpc_object_t object = 0;
      goto LABEL_49;
    }
    int v14 = *(NSObject **)(v3 + 208);
    xpc_object_t object = v14;
    if (v14)
    {
      dispatch_retain(v14);
      dispatch_group_enter(v14);
    }
    xpc_object_t v15 = *(xpc_object_t *)(a1 + 32);
    xpc_object_t v26 = v15;
    if (v15)
    {
      xpc_retain(v15);
      xpc_object_t v16 = *(xpc_object_t *)(a1 + 32);
      if (v16)
      {
LABEL_32:
        xpc_retain(v16);
        xpc_object_t v34 = v16;
        p_p = 0;
        std::string __p = &unk_1F20FB910;
        uint64_t v33 = v3;
        goto LABEL_33;
      }
    }
    else
    {
      xpc_object_t v15 = xpc_null_create();
      xpc_object_t v26 = v15;
      xpc_object_t v16 = *(xpc_object_t *)(a1 + 32);
      if (v16) {
        goto LABEL_32;
      }
    }
    xpc_object_t v16 = xpc_null_create();
    xpc_object_t v34 = v16;
    p_p = 0;
    std::string __p = &unk_1F20FB910;
    uint64_t v33 = v3;
    if (!v16)
    {
      xpc_object_t v34 = xpc_null_create();
      goto LABEL_39;
    }
LABEL_33:
    xpc_retain(v16);
LABEL_39:
    p_p = &__p;
    LogTracker::systemLog_sync(v3, (dispatch_group_t *)&object, &v26, &__p);
    if (p_p == &__p)
    {
      (*((void (**)(void **))__p + 4))(&__p);
    }
    else if (p_p)
    {
      (*((void (**)(void))*p_p + 5))();
    }
    xpc_release(v16);
    xpc_release(v15);
    if (v14)
    {
      dispatch_group_leave(v14);
      dispatch_release(v14);
    }
  }
LABEL_49:
  xpc_object_t v18 = *(NSObject **)(v3 + 208);
  uint64_t v19 = *(NSObject **)(v3 + 136);
  xpc_object_t v20 = (std::string *)operator new(0x48uLL);
  xpc_object_t v21 = v20;
  std::string::size_type v22 = *(void *)(a1 + 48);
  v20->__r_.__value_.__r.__words[0] = *(void *)(a1 + 40);
  v20->__r_.__value_.__l.__size_ = v22;
  if (v22) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v22 + 16), 1uLL, memory_order_relaxed);
  }
  v20->__r_.__value_.__r.__words[2] = *(void *)(a1 + 56);
  if (*(char *)(a1 + 87) < 0)
  {
    std::string::__init_copy_ctor_external(v20 + 1, *(const std::string::value_type **)(a1 + 64), *(void *)(a1 + 72));
  }
  else
  {
    *(_OWORD *)&v20[1].__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 64);
    v20[1].__r_.__value_.__r.__words[2] = *(void *)(a1 + 80);
  }
  xpc_object_t v23 = v21 + 2;
  if (*(char *)(a1 + 111) < 0)
  {
    std::string::__init_copy_ctor_external(v23, *(const std::string::value_type **)(a1 + 88), *(void *)(a1 + 96));
  }
  else
  {
    *(_OWORD *)&v23->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 88);
    v21[2].__r_.__value_.__r.__words[2] = *(void *)(a1 + 104);
  }
  dispatch_group_notify_f(v18, v19, v21, (dispatch_function_t)dispatch::detail::group_notify<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_1 const>(dispatch_group_s *,dispatch_queue_s *,LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_1 const &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke);
  return std::unique_ptr<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2 const,std::default_delete<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2 const>>::~unique_ptr[abi:ne180100](&v25);
}

void sub_1C58DD29C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, xpc_object_t object, void *aBlock, CFTypeRef cf, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::unique_ptr<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2 const,std::default_delete<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2 const>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (!v2) {
    return a1;
  }
  if ((*(char *)(v2 + 111) & 0x80000000) == 0)
  {
    if ((*(char *)(v2 + 87) & 0x80000000) == 0) {
      goto LABEL_4;
    }
LABEL_11:
    operator delete(*(void **)(v2 + 64));
    uint64_t v3 = *(std::__shared_weak_count **)(v2 + 48);
    if (!v3) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  operator delete(*(void **)(v2 + 88));
  if (*(char *)(v2 + 87) < 0) {
    goto LABEL_11;
  }
LABEL_4:
  uint64_t v3 = *(std::__shared_weak_count **)(v2 + 48);
  if (v3) {
LABEL_5:
  }
    std::__shared_weak_count::__release_weak(v3);
LABEL_6:
  xpc_release(*(xpc_object_t *)(v2 + 32));
  *(void *)(v2 + 32) = 0;
  uint64_t v4 = *(std::__shared_weak_count **)(v2 + 8);
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  operator delete((void *)v2);
  return a1;
}

uint64_t std::__function::__func<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::operator() const(void)::{lambda(BOOL,xpc::dict)#1},std::allocator<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::operator() const(void)::{lambda(BOOL,xpc::dict)#1}>,void ()(BOOL,xpc::dict)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_1F20FB910;
  xpc_release(*(xpc_object_t *)(a1 + 16));
  *(void *)(a1 + 16) = 0;
  return a1;
}

void std::__function::__func<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::operator() const(void)::{lambda(BOOL,xpc::dict)#1},std::allocator<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::operator() const(void)::{lambda(BOOL,xpc::dict)#1}>,void ()(BOOL,xpc::dict)>::~__func(xpc_object_t *a1)
{
  *a1 = &unk_1F20FB910;
  xpc_release(a1[2]);

  operator delete(a1);
}

void *std::__function::__func<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::operator() const(void)::{lambda(BOOL,xpc::dict)#1},std::allocator<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::operator() const(void)::{lambda(BOOL,xpc::dict)#1}>,void ()(BOOL,xpc::dict)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x18uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void **)(a1 + 16);
  void *v2 = &unk_1F20FB910;
  v2[1] = v4;
  v2[2] = v3;
  if (v3) {
    xpc_retain(v3);
  }
  else {
    v2[2] = xpc_null_create();
  }
  return v2;
}

xpc_object_t std::__function::__func<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::operator() const(void)::{lambda(BOOL,xpc::dict)#1},std::allocator<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::operator() const(void)::{lambda(BOOL,xpc::dict)#1}>,void ()(BOOL,xpc::dict)>::__clone(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void **)(a1 + 16);
  *a2 = &unk_1F20FB910;
  a2[1] = v3;
  a2[2] = v2;
  if (v2) {
    return xpc_retain(v2);
  }
  xpc_object_t result = xpc_null_create();
  a2[2] = result;
  return result;
}

void std::__function::__func<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::operator() const(void)::{lambda(BOOL,xpc::dict)#1},std::allocator<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::operator() const(void)::{lambda(BOOL,xpc::dict)#1}>,void ()(BOOL,xpc::dict)>::destroy(uint64_t a1)
{
  *(void *)(a1 + 16) = 0;
}

void std::__function::__func<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::operator() const(void)::{lambda(BOOL,xpc::dict)#1},std::allocator<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::operator() const(void)::{lambda(BOOL,xpc::dict)#1}>,void ()(BOOL,xpc::dict)>::destroy_deallocate(xpc_object_t *a1)
{
  xpc_release(a1[2]);

  operator delete(a1);
}

void std::__function::__func<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::operator() const(void)::{lambda(BOOL,xpc::dict)#1},std::allocator<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::operator() const(void)::{lambda(BOOL,xpc::dict)#1}>,void ()(BOOL,xpc::dict)>::operator()(uint64_t a1, unsigned __int8 *a2, void **a3)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  int v4 = *a2;
  uint64_t v5 = *a3;
  *a3 = xpc_null_create();
  uint64_t v6 = *(void **)(a1 + 8);
  if (v4)
  {
    memset(&v29, 170, sizeof(v29));
    xpc_object_t value = xpc_dictionary_get_value(v5, (const char *)*MEMORY[0x1E4F470D0]);
    *(void *)long long buf = value;
    if (value) {
      xpc_retain(value);
    }
    else {
      *(void *)long long buf = xpc_null_create();
    }
    xpc::dyn_cast_or_default((uint64_t *)&v29, (xpc *)buf, (const object *)"", v8);
    xpc_release(*(xpc_object_t *)buf);
    size_t v10 = (char *)*MEMORY[0x1E4F4F930];
    char v11 = HIBYTE(v29.__r_.__value_.__r.__words[2]);
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v12 = &v29;
    }
    else {
      uint64_t v12 = (std::string *)v29.__r_.__value_.__r.__words[0];
    }
    int64_t v13 = strlen((const char *)*MEMORY[0x1E4F4F930]);
    if (v13)
    {
      int64_t v14 = v13;
      int64_t size = v29.__r_.__value_.__l.__size_;
      if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int64_t size = HIBYTE(v29.__r_.__value_.__r.__words[2]);
      }
      if (size >= v13)
      {
        int v17 = (char *)v12 + size;
        int v18 = *v10;
        uint64_t v19 = v12;
        do
        {
          int64_t v20 = size - v14;
          if (v20 == -1) {
            break;
          }
          xpc_object_t v21 = (char *)memchr(v19, v18, v20 + 1);
          if (!v21) {
            break;
          }
          std::string::size_type v22 = v21;
          if (!memcmp(v21, v10, v14))
          {
            if (v22 == v17 || v22 - (char *)v12 == -1) {
              break;
            }
            goto LABEL_26;
          }
          uint64_t v19 = (std::string *)(v22 + 1);
          int64_t size = v17 - (v22 + 1);
        }
        while (size >= v14);
      }
      xpc_object_t v16 = *(void **)(a1 + 16);
      *(void *)long long buf = v16;
      if (v16) {
        xpc_retain(v16);
      }
      else {
        *(void *)long long buf = xpc_null_create();
      }
      TapToRadar::createRadarIfPossible((xpc_object_t *)buf, (uint64_t)&v29);
      xpc_release(*(xpc_object_t *)buf);
      *(void *)long long buf = 0;
      goto LABEL_44;
    }
LABEL_26:
    xpc_object_t v23 = v6[26];
    xpc_object_t v28 = v23;
    if (v23)
    {
      dispatch_retain(v23);
      dispatch_group_enter(v23);
      char v11 = HIBYTE(v29.__r_.__value_.__r.__words[2]);
    }
    if (v11 < 0) {
      std::string::__init_copy_ctor_external(&__p, v29.__r_.__value_.__l.__data_, v29.__r_.__value_.__l.__size_);
    }
    else {
      std::string __p = v29;
    }
    xpc_object_t v24 = *(xpc_object_t *)(a1 + 16);
    if (v24)
    {
      xpc_retain(v24);
      size_t v32 = 0;
      *(void *)long long buf = &unk_1F20FB990;
      xpc_object_t v31 = v24;
    }
    else
    {
      xpc_object_t v24 = xpc_null_create();
      size_t v32 = 0;
      *(void *)long long buf = &unk_1F20FB990;
      xpc_object_t v31 = v24;
      if (!v24)
      {
        xpc_object_t v31 = xpc_null_create();
        goto LABEL_36;
      }
    }
    xpc_retain(v24);
LABEL_36:
    size_t v32 = buf;
    LogTracker::processLogarchive_sync(v6, &v28, (const char *)&__p, buf);
    if (v32 == buf)
    {
      (*(void (**)(uint8_t *))(*(void *)buf + 32))(buf);
    }
    else if (v32)
    {
      (*(void (**)(uint8_t *, uint64_t, uint64_t))(*(void *)v32 + 40))(v32, v25, v26);
    }
    xpc_release(v24);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (v23)
    {
      dispatch_group_leave(v23);
      dispatch_release(v23);
    }
LABEL_44:
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v29.__r_.__value_.__l.__data_);
    }
    goto LABEL_46;
  }
  size_t v9 = v6[11];
  if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)long long buf = 0;
    _os_log_error_impl(&dword_1C5767000, v9, OS_LOG_TYPE_ERROR, "Failed to collect sysdiagnose!", buf, 2u);
  }
LABEL_46:
  xpc_release(v5);
}

void sub_1C58DDA68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,xpc_object_t object,uint64_t a24,uint64_t a25,uint64_t a26)
{
  if (v27)
  {
    dispatch_group_leave(v27);
    dispatch_release(v27);
  }
  if (a22 < 0) {
    operator delete(__p);
  }
  xpc_release(v26);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::operator() const(void)::{lambda(BOOL,xpc::dict)#1},std::allocator<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::operator() const(void)::{lambda(BOOL,xpc::dict)#1}>,void ()(BOOL,xpc::dict)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZZN10LogTracker30postLogCollectionInternal_syncEN3xpc4dictEENK3$_2clEvEUlbS1_E_") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"ZZN10LogTracker30postLogCollectionInternal_syncEN3xpc4dictEENK3$_2clEvEUlbS1_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZZN10LogTracker30postLogCollectionInternal_syncEN3xpc4dictEENK3$_2clEvEUlbS1_E_")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZZN10LogTracker30postLogCollectionInternal_syncEN3xpc4dictEENK3$_2clEvEUlbS1_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *std::__function::__func<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::operator() const(void)::{lambda(BOOL,xpc::dict)#1},std::allocator<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::operator() const(void)::{lambda(BOOL,xpc::dict)#1}>,void ()(BOOL,xpc::dict)>::target_type()
{
}

uint64_t std::__function::__func<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::operator() const(void)::{lambda(BOOL,xpc::dict)#1}::operator() const(BOOL,xpc::dict)::{lambda(BOOL)#1},std::allocator<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::operator() const(void)::{lambda(BOOL,xpc::dict)#1}::operator() const(BOOL,xpc::dict)::{lambda(BOOL)#1}>,void ()(BOOL)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_1F20FB990;
  xpc_release(*(xpc_object_t *)(a1 + 8));
  *(void *)(a1 + 8) = 0;
  return a1;
}

void std::__function::__func<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::operator() const(void)::{lambda(BOOL,xpc::dict)#1}::operator() const(BOOL,xpc::dict)::{lambda(BOOL)#1},std::allocator<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::operator() const(void)::{lambda(BOOL,xpc::dict)#1}::operator() const(BOOL,xpc::dict)::{lambda(BOOL)#1}>,void ()(BOOL)>::~__func(xpc_object_t *a1)
{
  *a1 = &unk_1F20FB990;
  xpc_release(a1[1]);

  operator delete(a1);
}

void *std::__function::__func<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::operator() const(void)::{lambda(BOOL,xpc::dict)#1}::operator() const(BOOL,xpc::dict)::{lambda(BOOL)#1},std::allocator<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::operator() const(void)::{lambda(BOOL,xpc::dict)#1}::operator() const(BOOL,xpc::dict)::{lambda(BOOL)#1}>,void ()(BOOL)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x10uLL);
  unint64_t v3 = *(void **)(a1 + 8);
  void *v2 = &unk_1F20FB990;
  v2[1] = v3;
  if (v3) {
    xpc_retain(v3);
  }
  else {
    v2[1] = xpc_null_create();
  }
  return v2;
}

xpc_object_t std::__function::__func<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::operator() const(void)::{lambda(BOOL,xpc::dict)#1}::operator() const(BOOL,xpc::dict)::{lambda(BOOL)#1},std::allocator<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::operator() const(void)::{lambda(BOOL,xpc::dict)#1}::operator() const(BOOL,xpc::dict)::{lambda(BOOL)#1}>,void ()(BOOL)>::__clone(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void **)(a1 + 8);
  *a2 = &unk_1F20FB990;
  a2[1] = v2;
  if (v2) {
    return xpc_retain(v2);
  }
  xpc_object_t result = xpc_null_create();
  a2[1] = result;
  return result;
}

void std::__function::__func<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::operator() const(void)::{lambda(BOOL,xpc::dict)#1}::operator() const(BOOL,xpc::dict)::{lambda(BOOL)#1},std::allocator<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::operator() const(void)::{lambda(BOOL,xpc::dict)#1}::operator() const(BOOL,xpc::dict)::{lambda(BOOL)#1}>,void ()(BOOL)>::destroy(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
}

void std::__function::__func<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::operator() const(void)::{lambda(BOOL,xpc::dict)#1}::operator() const(BOOL,xpc::dict)::{lambda(BOOL)#1},std::allocator<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::operator() const(void)::{lambda(BOOL,xpc::dict)#1}::operator() const(BOOL,xpc::dict)::{lambda(BOOL)#1}>,void ()(BOOL)>::destroy_deallocate(xpc_object_t *a1)
{
  xpc_release(a1[1]);

  operator delete(a1);
}

void std::__function::__func<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::operator() const(void)::{lambda(BOOL,xpc::dict)#1}::operator() const(BOOL,xpc::dict)::{lambda(BOOL)#1},std::allocator<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::operator() const(void)::{lambda(BOOL,xpc::dict)#1}::operator() const(BOOL,xpc::dict)::{lambda(BOOL)#1}>,void ()(BOOL)>::operator()(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 8);
  xpc_object_t object = v1;
  if (v1) {
    xpc_retain(v1);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v3 = 0;
  TapToRadar::createRadarIfPossible(&object, (uint64_t)__p);
  if (SHIBYTE(v3) < 0) {
    operator delete(__p[0]);
  }
  xpc_release(object);
}

void sub_1C58DDE74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, xpc_object_t object)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  xpc_release(object);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::operator() const(void)::{lambda(BOOL,xpc::dict)#1}::operator() const(BOOL,xpc::dict)::{lambda(BOOL)#1},std::allocator<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::operator() const(void)::{lambda(BOOL,xpc::dict)#1}::operator() const(BOOL,xpc::dict)::{lambda(BOOL)#1}>,void ()(BOOL)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZZZN10LogTracker30postLogCollectionInternal_syncEN3xpc4dictEENK3$_2clEvENKUlbS1_E_clEbS1_EUlbE_") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"ZZZN10LogTracker30postLogCollectionInternal_syncEN3xpc4dictEENK3$_2clEvENKUlbS1_E_clEbS1_EUlbE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZZZN10LogTracker30postLogCollectionInternal_syncEN3xpc4dictEENK3$_2clEvENKUlbS1_E_clEbS1_EUlbE_"))return 0; {
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZZZN10LogTracker30postLogCollectionInternal_syncEN3xpc4dictEENK3$_2clEvENKUlbS1_E_clEbS1_EUlbE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  }
  return 0;
}

void *std::__function::__func<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::operator() const(void)::{lambda(BOOL,xpc::dict)#1}::operator() const(BOOL,xpc::dict)::{lambda(BOOL)#1},std::allocator<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::operator() const(void)::{lambda(BOOL,xpc::dict)#1}::operator() const(BOOL,xpc::dict)::{lambda(BOOL)#1}>,void ()(BOOL)>::target_type()
{
}

void dispatch::detail::group_notify<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_1 const>(dispatch_group_s *,dispatch_queue_s *,LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_1 const &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke(char *a1)
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  int v4 = a1 + 8;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)a1 + 1);
  uint64_t v3 = *((void *)v4 + 1);
  uint64_t v5 = (const char **)MEMORY[0x1E4F4CDF8];
  if (!v2)
  {
    char v7 = 0;
    goto LABEL_7;
  }
  uint64_t v6 = std::__shared_weak_count::lock(v2);
  char v7 = v6;
  if (!v6 || !*(void *)a1)
  {
LABEL_7:
    size_t v9 = *v5;
    size_t v10 = strlen(*v5);
    if (v10 > 0x7FFFFFFFFFFFFFF7) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    char v11 = (void *)v10;
    if (v10 >= 0x17)
    {
      uint64_t v13 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v10 | 7) != 0x17) {
        uint64_t v13 = v10 | 7;
      }
      uint64_t v14 = v13 + 1;
      uint64_t v12 = (void **)operator new(v13 + 1);
      __dst[1] = v11;
      unint64_t v46 = v14 | 0x8000000000000000;
      __dst[0] = v12;
    }
    else
    {
      HIBYTE(v46) = v10;
      uint64_t v12 = __dst;
      if (!v10) {
        goto LABEL_15;
      }
    }
    memmove(v12, v9, (size_t)v11);
LABEL_15:
    *((unsigned char *)v11 + (void)v12) = 0;
    aBlock = 0;
    CFTypeRef cf = 0;
    Service::broadcastEvent(v3, (uint64_t)__dst, &cf, (const void **)&aBlock);
    if (aBlock) {
      _Block_release(aBlock);
    }
    if (cf) {
      CFRelease(cf);
    }
    if (SHIBYTE(v46) < 0)
    {
      operator delete(__dst[0]);
      if (!v7) {
        goto LABEL_74;
      }
    }
    else if (!v7)
    {
      goto LABEL_74;
    }
    if (atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_74;
    }
    char v8 = 1;
    goto LABEL_25;
  }
  if (atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_26;
  }
  char v8 = 0;
LABEL_25:
  ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
  std::__shared_weak_count::__release_weak(v7);
  if (v8) {
    goto LABEL_74;
  }
LABEL_26:
  xpc_object_t v15 = xpc_dictionary_create(0, 0, 0);
  if (v15 || (xpc_object_t v15 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C8792D30](v15) == MEMORY[0x1E4F14590])
    {
      xpc_retain(v15);
      xpc_object_t v16 = v15;
    }
    else
    {
      xpc_object_t v16 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v16 = xpc_null_create();
    xpc_object_t v15 = 0;
  }
  xpc_release(v15);
  int v17 = (const char **)(a1 + 24);
  int v18 = a1 + 24;
  if (a1[47] < 0) {
    int v18 = *v17;
  }
  xpc_object_t v19 = xpc_string_create(v18);
  if (!v19) {
    xpc_object_t v19 = xpc_null_create();
  }
  xpc_dictionary_set_value(v16, (const char *)*MEMORY[0x1E4F4C4C8], v19);
  xpc_object_t v20 = xpc_null_create();
  xpc_release(v19);
  xpc_release(v20);
  xpc_object_t v21 = a1 + 48;
  if (a1[71] < 0) {
    xpc_object_t v21 = *(const char **)v21;
  }
  xpc_object_t v22 = xpc_string_create(v21);
  if (!v22) {
    xpc_object_t v22 = xpc_null_create();
  }
  xpc_dictionary_set_value(v16, (const char *)*MEMORY[0x1E4F4CA98], v22);
  xpc_object_t v23 = xpc_null_create();
  xpc_release(v22);
  xpc_release(v23);
  xpc_object_t v24 = xpc_string_create((const char *)*MEMORY[0x1E4F4F928]);
  if (!v24) {
    xpc_object_t v24 = xpc_null_create();
  }
  xpc_dictionary_set_value(v16, (const char *)*MEMORY[0x1E4F4C7F8], v24);
  xpc_object_t v25 = xpc_null_create();
  xpc_release(v24);
  xpc_release(v25);
  uint64_t v26 = *v5;
  size_t v27 = strlen(*v5);
  if (v27 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  xpc_object_t v28 = (void *)v27;
  if (v27 >= 0x17)
  {
    uint64_t v31 = (v27 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v27 | 7) != 0x17) {
      uint64_t v31 = v27 | 7;
    }
    uint64_t v32 = v31 + 1;
    std::string v29 = operator new(v31 + 1);
    __p[1] = v28;
    unint64_t v42 = v32 | 0x8000000000000000;
    __p[0] = v29;
LABEL_50:
    memmove(v29, v26, (size_t)v28);
    *((unsigned char *)v28 + (void)v29) = 0;
    xpc_object_t object = v16;
    if (v16) {
      goto LABEL_46;
    }
LABEL_51:
    xpc_object_t object = xpc_null_create();
    goto LABEL_52;
  }
  HIBYTE(v42) = v27;
  std::string v29 = __p;
  if (v27) {
    goto LABEL_50;
  }
  LOBYTE(__p[0]) = 0;
  xpc_object_t object = v16;
  if (!v16) {
    goto LABEL_51;
  }
LABEL_46:
  xpc_retain(v16);
LABEL_52:
  xpc::bridge((uint64_t *)&v47, (xpc *)&object, v30);
  uint64_t v33 = (const void *)v47.__r_.__value_.__r.__words[0];
  if (v47.__r_.__value_.__r.__words[0]
    && (CFTypeID v34 = CFGetTypeID(v47.__r_.__value_.__l.__data_), v34 == CFDictionaryGetTypeID()))
  {
    CFTypeRef v40 = v33;
    CFRetain(v33);
  }
  else
  {
    CFTypeRef v40 = 0;
  }
  uint64_t v38 = 0;
  Service::broadcastEvent(v3, (uint64_t)__p, &v40, (const void **)&v38);
  if (v38) {
    _Block_release(v38);
  }
  if (v40) {
    CFRelease(v40);
  }
  if (v47.__r_.__value_.__r.__words[0]) {
    CFRelease(v47.__r_.__value_.__l.__data_);
  }
  xpc_release(object);
  if ((SHIBYTE(v42) & 0x80000000) == 0)
  {
    size_t v35 = *(NSObject **)(v3 + 88);
    if (!os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_64;
    }
LABEL_67:
    std::string::size_type v36 = (std::string::size_type)(a1 + 24);
    if (a1[47] < 0) {
      std::string::size_type v36 = (std::string::size_type)*v17;
    }
    LODWORD(v47.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)v47.__r_.__value_.__r.__words + 4) = v36;
    _os_log_impl(&dword_1C5767000, v35, OS_LOG_TYPE_DEFAULT, "#I TracePostProcessingEnd with timestamp[%s]", (uint8_t *)&v47, 0xCu);
    if ((a1[47] & 0x80000000) == 0) {
      goto LABEL_65;
    }
LABEL_70:
    std::string::__init_copy_ctor_external(&v47, *((const std::string::value_type **)a1 + 3), *((void *)a1 + 4));
    goto LABEL_71;
  }
  operator delete(__p[0]);
  size_t v35 = *(NSObject **)(v3 + 88);
  if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT)) {
    goto LABEL_67;
  }
LABEL_64:
  if (a1[47] < 0) {
    goto LABEL_70;
  }
LABEL_65:
  *(_OWORD *)&v47.__r_.__value_.__l.__data_ = *(_OWORD *)v17;
  v47.__r_.__value_.__r.__words[2] = *((void *)a1 + 5);
LABEL_71:
  LogTracker::houseKeepingLogs_sync(v3, (const char *)&v47);
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v47.__r_.__value_.__l.__data_);
  }
  xpc_release(v16);
LABEL_74:
  if ((a1[71] & 0x80000000) == 0)
  {
    if ((a1[47] & 0x80000000) == 0) {
      goto LABEL_76;
    }
LABEL_80:
    operator delete(*((void **)a1 + 3));
    uint64_t v37 = (std::__shared_weak_count *)*((void *)a1 + 1);
    if (!v37) {
      goto LABEL_78;
    }
    goto LABEL_77;
  }
  operator delete(*((void **)a1 + 6));
  if (a1[47] < 0) {
    goto LABEL_80;
  }
LABEL_76:
  uint64_t v37 = (std::__shared_weak_count *)*((void *)a1 + 1);
  if (v37) {
LABEL_77:
  }
    std::__shared_weak_count::__release_weak(v37);
LABEL_78:
  operator delete(a1);
}

void sub_1C58DE494(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *aBlock, xpc_object_t object, CFTypeRef cf, uint64_t a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, CFTypeRef a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t __cxx_global_var_init_19()
{
  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<LogDumpDB>::~PthreadMutexGuardPolicy, &ctu::Singleton<LogDumpDB,LogDumpDB,ctu::PthreadMutexGuardPolicy<LogDumpDB>>::sInstance, &dword_1C5767000);
  }
  return result;
}

uint64_t __cxx_global_var_init_48()
{
  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<ctu::Gestalt>::~PthreadMutexGuardPolicy, &ctu::Singleton<ctu::Gestalt,ctu::Gestalt,ctu::PthreadMutexGuardPolicy<ctu::Gestalt>>::sInstance, &dword_1C5767000);
  }
  return result;
}

std::__shared_weak_count_vtbl **TraceCAReporter::create@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)(a1 + 8) = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v3 = (TraceCAReporter *)operator new(0x68uLL);
  TraceCAReporter::TraceCAReporter(v3);
  *(void *)a1 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)(a1 + 8) = 0xAAAAAAAAAAAAAAAALL;

  return std::shared_ptr<TraceCAReporter>::shared_ptr[abi:ne180100]<TraceCAReporter,std::shared_ptr<TraceCAReporter> ctu::SharedSynchronizable<TraceCAReporter>::make_shared_ptr<TraceCAReporter>(TraceCAReporter*)::{lambda(TraceCAReporter*)#1},void>((std::__shared_weak_count_vtbl **)a1, (std::__shared_weak_count_vtbl *)v3);
}

void sub_1C58DE754(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void TraceCAReporter::TraceCAReporter(TraceCAReporter *this)
{
  uint64_t v90 = *MEMORY[0x1E4F143B8];
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)&v74, "com.apple.telephony.abm", "ca.trace.reporter");
  initially_inactive = dispatch_queue_attr_make_initially_inactive(0);
  uint64_t v3 = dispatch_queue_create_with_target_V2("TraceCAReporter", initially_inactive, 0);
  dispatch_set_qos_class_floor(v3, QOS_CLASS_UTILITY, 0);
  dispatch_activate(v3);
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = v3;
  if (v3)
  {
    dispatch_retain(v3);
    *((void *)this + 3) = 0;
    dispatch_release(v3);
  }
  else
  {
    *((void *)this + 3) = 0;
  }
  ctu::OsLogLogger::OsLogLogger();
  ctu::OsLogLogger::OsLogLogger((TraceCAReporter *)((char *)this + 32), (const ctu::OsLogLogger *)&__dst);
  MEMORY[0x1C8790F80](&__dst);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&v74);
  int v4 = (const char *)*MEMORY[0x1E4F4C2D8];
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const* const&,char const* const&,0>((uint64_t)&v74, (char *)*MEMORY[0x1E4F4C2D8], MEMORY[0x1E4F4D238]);
  size_t v68 = v4;
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const* const&,char const* const&,0>((uint64_t)&v78, (char *)*MEMORY[0x1E4F4C2E0], MEMORY[0x1E4F4C7C0]);
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const* const&,char const* const&,0>((uint64_t)&v82, (char *)*MEMORY[0x1E4F4CD88], MEMORY[0x1E4F4CA70]);
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const* const&,char const* const&,0>((uint64_t)&v86, (char *)*MEMORY[0x1E4F4C198], MEMORY[0x1E4F4C238]);
  uint64_t v5 = 0;
  uint64_t v6 = (void *)((char *)this + 64);
  size_t v69 = (char *)this + 64;
  xpc_object_t v70 = (void ***)((char *)this + 80);
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_DWORD *)this + 24) = 1065353216;
  do
  {
    char v7 = &v74 + 2 * v5;
    int v8 = SHIBYTE(v7->__r_.__value_.__r.__words[2]);
    if (v8 >= 0) {
      size_t v9 = &v74 + 2 * v5;
    }
    else {
      size_t v9 = (std::string *)v7->__r_.__value_.__r.__words[0];
    }
    if (v8 >= 0) {
      unint64_t size = HIBYTE(v7->__r_.__value_.__r.__words[2]);
    }
    else {
      unint64_t size = v7->__r_.__value_.__l.__size_;
    }
    unint64_t v11 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&__dst, (uint64_t *)v9, size);
    unint64_t v12 = v11;
    unint64_t v13 = *((void *)this + 9);
    if (!v13)
    {
      unint64_t v15 = 0xAAAAAAAAAAAAAAAALL;
      goto LABEL_63;
    }
    uint8x8_t v14 = (uint8x8_t)vcnt_s8((int8x8_t)v13);
    v14.i16[0] = vaddlv_u8(v14);
    if (v14.u32[0] > 1uLL)
    {
      unint64_t v15 = v11;
      if (v11 >= v13) {
        unint64_t v15 = v11 % v13;
      }
    }
    else
    {
      unint64_t v15 = (v13 - 1) & v11;
    }
    xpc_object_t v16 = *(uint64_t ***)(*v6 + 8 * v15);
    if (v16)
    {
      int v17 = *v16;
      if (*v16)
      {
        char v18 = HIBYTE(v7->__r_.__value_.__r.__words[2]);
        if (v18 >= 0) {
          std::string::size_type v19 = HIBYTE(v7->__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v19 = v7->__r_.__value_.__l.__size_;
        }
        if (v18 >= 0) {
          xpc_object_t v20 = &v74 + 2 * v5;
        }
        else {
          xpc_object_t v20 = (std::string *)v7->__r_.__value_.__r.__words[0];
        }
        if (v14.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v26 = v17[1];
            if (v26 == v12)
            {
              uint64_t v27 = *((unsigned __int8 *)v17 + 39);
              if ((v27 & 0x80u) == 0) {
                uint64_t v28 = *((unsigned __int8 *)v17 + 39);
              }
              else {
                uint64_t v28 = v17[3];
              }
              if (v28 == v19)
              {
                std::string v29 = (const void **)(v17 + 2);
                if ((v27 & 0x80) != 0)
                {
                  if (!memcmp(*v29, v20, v17[3])) {
                    goto LABEL_7;
                  }
                }
                else
                {
                  if (!*((unsigned char *)v17 + 39)) {
                    goto LABEL_7;
                  }
                  unint64_t v30 = v20;
                  while (*(unsigned __int8 *)v29 == v30->__r_.__value_.__s.__data_[0])
                  {
                    std::string v29 = (const void **)((char *)v29 + 1);
                    unint64_t v30 = (std::string *)((char *)v30 + 1);
                    if (!--v27) {
                      goto LABEL_7;
                    }
                  }
                }
              }
            }
            else if ((v26 & (v13 - 1)) != v15)
            {
              goto LABEL_62;
            }
            int v17 = (uint64_t *)*v17;
            if (!v17) {
              goto LABEL_62;
            }
          }
        }
        while (1)
        {
          unint64_t v21 = v17[1];
          if (v21 == v12)
          {
            uint64_t v22 = *((unsigned __int8 *)v17 + 39);
            if ((v22 & 0x80u) == 0) {
              uint64_t v23 = *((unsigned __int8 *)v17 + 39);
            }
            else {
              uint64_t v23 = v17[3];
            }
            if (v23 == v19)
            {
              xpc_object_t v24 = (const void **)(v17 + 2);
              if ((v22 & 0x80) != 0)
              {
                if (!memcmp(*v24, v20, v17[3])) {
                  goto LABEL_7;
                }
              }
              else
              {
                if (!*((unsigned char *)v17 + 39)) {
                  goto LABEL_7;
                }
                xpc_object_t v25 = v20;
                while (*(unsigned __int8 *)v24 == v25->__r_.__value_.__s.__data_[0])
                {
                  xpc_object_t v24 = (const void **)((char *)v24 + 1);
                  xpc_object_t v25 = (std::string *)((char *)v25 + 1);
                  if (!--v22) {
                    goto LABEL_7;
                  }
                }
              }
            }
          }
          else
          {
            if (v21 >= v13) {
              v21 %= v13;
            }
            if (v21 != v15)
            {
LABEL_62:
              uint64_t v6 = (void *)((char *)this + 64);
              break;
            }
          }
          int v17 = (uint64_t *)*v17;
          if (!v17) {
            goto LABEL_62;
          }
        }
      }
    }
LABEL_63:
    unint64_t v73 = 0xAAAAAAAAAAAAAAAALL;
    uint64_t v31 = operator new(0x40uLL);
    uint64_t v32 = v31;
    std::string __dst = (void **)v31;
    uint64_t v72 = (char *)this + 80;
    LOBYTE(v73) = 0;
    void *v31 = 0;
    v31[1] = v12;
    if (SHIBYTE(v7->__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)(v31 + 2), v7->__r_.__value_.__l.__data_, v7->__r_.__value_.__l.__size_);
    }
    else
    {
      *((_OWORD *)v31 + 1) = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
      v31[4] = *((void *)&v7->__r_.__value_.__l + 2);
    }
    uint64_t v33 = (std::string *)(v32 + 5);
    CFTypeID v34 = &v74 + 2 * v5 + 1;
    if (SHIBYTE(v7[1].__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(v33, v34->__r_.__value_.__l.__data_, *(&v76 + 6 * v5));
    }
    else
    {
      *(_OWORD *)&v33->__r_.__value_.__l.__data_ = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
      v32[7] = *(&v77 + 6 * v5);
    }
    LOBYTE(v73) = 1;
    float v35 = (float)(unint64_t)(*((void *)this + 11) + 1);
    float v36 = *((float *)this + 24);
    if (v13 && (float)(v36 * (float)v13) >= v35) {
      goto LABEL_97;
    }
    BOOL v37 = (v13 & (v13 - 1)) != 0;
    if (v13 < 3) {
      BOOL v37 = 1;
    }
    unint64_t v38 = v37 | (2 * v13);
    unint64_t v39 = vcvtps_u32_f32(v35 / v36);
    if (v38 <= v39) {
      size_t prime = v39;
    }
    else {
      size_t prime = v38;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v41 = *(int8x8_t *)((char *)this + 72);
    if (prime > *(void *)&v41) {
      goto LABEL_81;
    }
    if (prime < *(void *)&v41)
    {
      unint64_t v42 = vcvtps_u32_f32((float)*((unint64_t *)this + 11) / *((float *)this + 24));
      if (*(void *)&v41 < 3uLL || (uint8x8_t v43 = (uint8x8_t)vcnt_s8(v41), v43.i16[0] = vaddlv_u8(v43), v43.u32[0] > 1uLL))
      {
        unint64_t v42 = std::__next_prime(v42);
      }
      else
      {
        uint64_t v44 = 1 << -(char)__clz(v42 - 1);
        if (v42 >= 2) {
          unint64_t v42 = v44;
        }
      }
      if (prime <= v42) {
        size_t prime = v42;
      }
      if (prime < *(void *)&v41) {
LABEL_81:
      }
        std::__hash_table<std::__hash_value_type<ctu::iokit::TelephonyIOKitPowerSource,abm::AccessoryInfo>,std::__unordered_map_hasher<ctu::iokit::TelephonyIOKitPowerSource,std::__hash_value_type<ctu::iokit::TelephonyIOKitPowerSource,abm::AccessoryInfo>,std::hash<ctu::iokit::TelephonyIOKitPowerSource>,std::equal_to<ctu::iokit::TelephonyIOKitPowerSource>,true>,std::__unordered_map_equal<ctu::iokit::TelephonyIOKitPowerSource,std::__hash_value_type<ctu::iokit::TelephonyIOKitPowerSource,abm::AccessoryInfo>,std::equal_to<ctu::iokit::TelephonyIOKitPowerSource>,std::hash<ctu::iokit::TelephonyIOKitPowerSource>,true>,std::allocator<std::__hash_value_type<ctu::iokit::TelephonyIOKitPowerSource,abm::AccessoryInfo>>>::__do_rehash<true>((uint64_t)v6, prime);
    }
    unint64_t v13 = *((void *)this + 9);
    unint64_t v45 = v13 - 1;
    if ((v13 & (v13 - 1)) == 0)
    {
      unint64_t v15 = v45 & v12;
      unint64_t v46 = *(void ****)(*v6 + 8 * (v45 & v12));
      std::string v47 = __dst;
      if (!v46) {
        goto LABEL_98;
      }
      goto LABEL_5;
    }
    if (v12 < v13)
    {
      unint64_t v15 = v12;
LABEL_97:
      unint64_t v46 = *(void ****)(*v6 + 8 * v15);
      std::string v47 = __dst;
      if (!v46) {
        goto LABEL_98;
      }
      goto LABEL_5;
    }
    unint64_t v15 = v12 % v13;
    unint64_t v46 = *(void ****)(*v6 + 8 * (v12 % v13));
    std::string v47 = __dst;
    if (!v46)
    {
LABEL_98:
      void *v47 = *v70;
      std::string *v70 = __dst;
      *(void *)(*v6 + 8 * v15) = v70;
      if (*__dst)
      {
        unint64_t v48 = *((void *)*__dst + 1);
        if ((v13 & (v13 - 1)) != 0)
        {
          if (v48 >= v13) {
            v48 %= v13;
          }
        }
        else
        {
          v48 &= v13 - 1;
        }
        *(void *)(*v6 + 8 * v48) = __dst;
      }
      goto LABEL_6;
    }
LABEL_5:
    void *v47 = *v46;
    std::string *v46 = __dst;
LABEL_6:
    ++*((void *)this + 11);
LABEL_7:
    ++v5;
    uint64_t v6 = (void *)((char *)this + 64);
  }
  while (v5 != 4);
  if ((v89 & 0x80000000) == 0)
  {
    uint64_t v49 = v68;
    if ((v87 & 0x80000000) == 0) {
      goto LABEL_108;
    }
LABEL_133:
    operator delete(v86);
    if (v85 < 0) {
      goto LABEL_134;
    }
LABEL_109:
    if ((v83 & 0x80000000) == 0) {
      goto LABEL_110;
    }
LABEL_135:
    operator delete(v82);
    if (v81 < 0) {
      goto LABEL_136;
    }
LABEL_111:
    if ((v79 & 0x80000000) == 0) {
      goto LABEL_112;
    }
LABEL_137:
    operator delete(v78);
    if (SHIBYTE(v77) < 0) {
      goto LABEL_138;
    }
LABEL_113:
    if ((SHIBYTE(v74.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_114;
    }
LABEL_139:
    operator delete(v74.__r_.__value_.__l.__data_);
    goto LABEL_114;
  }
  operator delete(__p);
  uint64_t v49 = v68;
  if (v87 < 0) {
    goto LABEL_133;
  }
LABEL_108:
  if ((v85 & 0x80000000) == 0) {
    goto LABEL_109;
  }
LABEL_134:
  operator delete(v84);
  if (v83 < 0) {
    goto LABEL_135;
  }
LABEL_110:
  if ((v81 & 0x80000000) == 0) {
    goto LABEL_111;
  }
LABEL_136:
  operator delete(v80);
  if (v79 < 0) {
    goto LABEL_137;
  }
LABEL_112:
  if ((SHIBYTE(v77) & 0x80000000) == 0) {
    goto LABEL_113;
  }
LABEL_138:
  operator delete(v75);
  if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_139;
  }
LABEL_114:
  gettimeofday((timeval *)this + 3, 0);
  size_t v50 = strlen(v49);
  if (v50 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v51 = v50;
  if (v50 >= 0x17)
  {
    uint64_t v53 = (v50 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v50 | 7) != 0x17) {
      uint64_t v53 = v50 | 7;
    }
    uint64_t v54 = v53 + 1;
    p_dst = (void **)operator new(v53 + 1);
    uint64_t v72 = (char *)v51;
    unint64_t v73 = v54 | 0x8000000000000000;
    std::string __dst = p_dst;
    goto LABEL_121;
  }
  HIBYTE(v73) = v50;
  p_dst = (void **)&__dst;
  if (v50) {
LABEL_121:
  }
    memmove(p_dst, v49, v51);
  *((unsigned char *)p_dst + v51) = 0;
  memset(&v74, 0, sizeof(v74));
  uint64_t v55 = prop::bbtrace::get((char *)&__dst, (uint64_t)&v74);
  if (v55) {
    uint64_t v55 = util::convert<BOOL>(&v74, (BOOL *)this + 40, 0);
  }
  if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v74.__r_.__value_.__l.__data_);
    if (SHIBYTE(v73) < 0) {
      goto LABEL_141;
    }
  }
  else
  {
    if ((SHIBYTE(v73) & 0x80000000) == 0) {
      goto LABEL_126;
    }
LABEL_141:
    operator delete(__dst);
  }
LABEL_126:
  if (!capabilities::radio::maverick((capabilities::radio *)v55))
  {
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const* const&,char const* const&,0>((uint64_t)&v74, (char *)*MEMORY[0x1E4F4F9B8], MEMORY[0x1E4F4C7C8]);
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::string>>((uint64_t)v69, (uint64_t)&v74, (uint64_t)&v74);
    goto LABEL_155;
  }
  xpc_object_t v56 = diag::config::kEnabledDuringSleepKey[0];
  size_t v57 = strlen(diag::config::kEnabledDuringSleepKey[0]);
  if (v57 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  std::string::size_type v58 = v57;
  if (v57 >= 0x17)
  {
    uint64_t v60 = (v57 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v57 | 7) != 0x17) {
      uint64_t v60 = v57 | 7;
    }
    uint64_t v61 = v60 + 1;
    xpc_object_t v59 = (std::string *)operator new(v60 + 1);
    v74.__r_.__value_.__l.__size_ = v58;
    v74.__r_.__value_.__r.__words[2] = v61 | 0x8000000000000000;
    v74.__r_.__value_.__r.__words[0] = (std::string::size_type)v59;
    goto LABEL_145;
  }
  *((unsigned char *)&v74.__r_.__value_.__s + 23) = v57;
  xpc_object_t v59 = &v74;
  if (v57) {
LABEL_145:
  }
    memmove(v59, v56, v58);
  v59->__r_.__value_.__s.__data_[v58] = 0;
  uint64_t v62 = &v75;
  xpc_object_t v63 = (const void *)*MEMORY[0x1E4F4C7C8];
  size_t v64 = strlen((const char *)*MEMORY[0x1E4F4C7C8]);
  if (v64 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v65 = v64;
  if (v64 >= 0x17)
  {
    uint64_t v66 = (v64 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v64 | 7) != 0x17) {
      uint64_t v66 = v64 | 7;
    }
    uint64_t v67 = v66 + 1;
    uint64_t v62 = operator new(v66 + 1);
    size_t v76 = v65;
    unint64_t v77 = v67 | 0x8000000000000000;
    xpc_object_t v75 = v62;
    goto LABEL_153;
  }
  HIBYTE(v77) = v64;
  if (v64) {
LABEL_153:
  }
    memmove(v62, v63, v65);
  *((unsigned char *)v62 + v65) = 0;
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::string>>((uint64_t)v69, (uint64_t)&v74, (uint64_t)&v74);
LABEL_155:
  if ((SHIBYTE(v77) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v74.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
LABEL_159:
    operator delete(v74.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(v75);
  if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_159;
  }
}

void sub_1C58DF0D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  std::pair<std::string,std::string>::~pair((uint64_t)&__p);
  std::unordered_map<std::string,std::string>::~unordered_map[abi:ne180100](a14);
  ctu::SharedLoggable<AccessoriesDelegateBase,ctu::OsLogLogger>::~SharedLoggable(v27);
  _Unwind_Resume(a1);
}

void sub_1C58DF1AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  do
  {
    v20 -= 48;
    std::pair<std::string,std::string>::~pair((uint64_t)v20);
  }
  while (v20 != &a19);
  ctu::SharedLoggable<AccessoriesDelegateBase,ctu::OsLogLogger>::~SharedLoggable(v19);
  _Unwind_Resume(a1);
}

void sub_1C58DF290(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t std::unordered_map<std::string,std::string>::~unordered_map[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void ***)(a1 + 16);
  if (v2)
  {
    do
    {
      uint64_t v5 = (void **)*v2;
      if (*((char *)v2 + 63) < 0)
      {
        operator delete(v2[5]);
        if (*((char *)v2 + 39) < 0) {
LABEL_10:
        }
          operator delete(v2[2]);
      }
      else if (*((char *)v2 + 39) < 0)
      {
        goto LABEL_10;
      }
      operator delete(v2);
      uint64_t v2 = v5;
    }
    while (v5);
  }
  uint64_t v3 = *(void **)a1;
  *(void *)a1 = 0;
  if (v3) {
    operator delete(v3);
  }
  return a1;
}

void TraceCAReporter::prepTraceStats(TraceCAReporter *a1@<X0>, xpc_object_t *a2@<X1>, xpc_object_t *a3@<X8>)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  memset(v37, 170, sizeof(v37));
  xpc_object_t value = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E4F4C6A8]);
  object[0] = value;
  if (value) {
    xpc_retain(value);
  }
  else {
    object[0] = xpc_null_create();
  }
  long long __p = 0uLL;
  uint64_t v39 = 0;
  xpc::dyn_cast_or_default();
  xpc_release(object[0]);
  memset(object, 170, sizeof(object));
  xpc_object_t v7 = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E4F4C1A0]);
  xpc_object_t v35 = v7;
  if (v7) {
    xpc_retain(v7);
  }
  else {
    xpc_object_t v35 = xpc_null_create();
  }
  long long __p = 0uLL;
  uint64_t v39 = 0;
  xpc::dyn_cast_or_default();
  xpc_release(v35);
  if (!TraceCAReporter::supportedTraceDomainToReport((uint64_t)a1, (char *)object)) {
    goto LABEL_14;
  }
  if (SHIBYTE(v37[2]) >= 0) {
    int v8 = v37;
  }
  else {
    int v8 = (void **)v37[0];
  }
  size_t v9 = (const char *)*MEMORY[0x1E4F4C2D8];
  if (strcasecmp((const char *)v8, (const char *)*MEMORY[0x1E4F4C2D8]))
  {
    size_t v10 = *((void *)a1 + 4);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      LODWORD(__p) = 136315138;
      *(void *)((char *)&__p + 4) = v8;
      _os_log_error_impl(&dword_1C5767000, v10, OS_LOG_TYPE_ERROR, "Trace property %s is not supported to report to CA", (uint8_t *)&__p, 0xCu);
    }
LABEL_14:
    *a3 = xpc_null_create();
    goto LABEL_15;
  }
  xpc_object_t v11 = xpc_dictionary_create(0, 0, 0);
  uint64_t v12 = MEMORY[0x1E4F14590];
  if (v11 || (xpc_object_t v11 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C8792D30](v11) == v12)
    {
      xpc_retain(v11);
      xpc_object_t v13 = v11;
    }
    else
    {
      xpc_object_t v13 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v13 = xpc_null_create();
    xpc_object_t v11 = 0;
  }
  xpc_release(v11);
  xpc_object_t v14 = xpc_string_create((const char *)*MEMORY[0x1E4F4CA68]);
  if (!v14) {
    xpc_object_t v14 = xpc_null_create();
  }
  xpc_dictionary_set_value(v13, (const char *)*MEMORY[0x1E4F4C3C8], v14);
  xpc_object_t v15 = xpc_null_create();
  xpc_release(v14);
  xpc_release(v15);
  xpc_object_t v16 = xpc_string_create((const char *)*MEMORY[0x1E4F4C410]);
  if (!v16) {
    xpc_object_t v16 = xpc_null_create();
  }
  xpc_dictionary_set_value(v13, (const char *)*MEMORY[0x1E4F4C548], v16);
  xpc_object_t v17 = xpc_null_create();
  xpc_release(v16);
  xpc_release(v17);
  xpc_object_t v18 = xpc_string_create((const char *)*MEMORY[0x1E4F4C4C0]);
  if (!v18) {
    xpc_object_t v18 = xpc_null_create();
  }
  xpc_dictionary_set_value(v13, (const char *)*MEMORY[0x1E4F4C540], v18);
  xpc_object_t v19 = xpc_null_create();
  xpc_release(v18);
  xpc_release(v19);
  *(void *)&long long __p = 0xAAAAAAAAAAAAAAAALL;
  xpc_object_t v20 = xpc_null_create();
  *(void *)&long long __p = v20;
  if (SHIBYTE(v37[2]) >= 0) {
    unint64_t v21 = v37;
  }
  else {
    unint64_t v21 = (void **)v37[0];
  }
  if (!strcasecmp((const char *)v21, v9))
  {
    xpc_object_t v23 = *a2;
    xpc_object_t v34 = v23;
    if (v23)
    {
      xpc_retain(v23);
    }
    else
    {
      xpc_object_t v23 = xpc_null_create();
      xpc_object_t v34 = v23;
    }
    TraceCAReporter::prepTraceStatsEnabled((uint64_t)a1, &v34, &v35);
    xpc_object_t v22 = v35;
    xpc_object_t v35 = xpc_null_create();
    *(void *)&long long __p = v22;
    xpc_release(v20);
    xpc_release(v35);
    xpc_object_t v35 = 0;
    xpc_release(v23);
    xpc_object_t v34 = 0;
  }
  else
  {
    xpc_object_t v22 = v20;
  }
  if (MEMORY[0x1C8792D30](v22) == v12)
  {
    TraceCAReporter::gatherMissingBasebandTraceState(a1, (xpc_object_t *)&__p);
    xpc_object_t v24 = (xpc_object_t)__p;
    if ((void)__p) {
      xpc_retain((xpc_object_t)__p);
    }
    else {
      xpc_object_t v24 = xpc_null_create();
    }
    xpc_dictionary_set_value(v13, (const char *)*MEMORY[0x1E4F4CB40], v24);
    xpc_object_t v25 = xpc_null_create();
    xpc_release(v24);
    xpc_release(v25);
    *a3 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
    xpc_object_t v26 = xpc_dictionary_create(0, 0, 0);
    xpc_object_t v27 = v26;
    if (v26)
    {
      *a3 = v26;
    }
    else
    {
      xpc_object_t v27 = xpc_null_create();
      *a3 = v27;
      if (!v27)
      {
        xpc_object_t v28 = xpc_null_create();
        xpc_object_t v27 = 0;
        goto LABEL_53;
      }
    }
    if (MEMORY[0x1C8792D30](v27) == v12)
    {
      xpc_retain(v27);
LABEL_54:
      xpc_release(v27);
      xpc_object_t v29 = xpc_string_create((const char *)*MEMORY[0x1E4F4C158]);
      if (!v29) {
        xpc_object_t v29 = xpc_null_create();
      }
      xpc_object_t v30 = *a3;
      xpc_dictionary_set_value(*a3, (const char *)*MEMORY[0x1E4F4C190], v29);
      xpc_object_t v31 = xpc_null_create();
      xpc_release(v29);
      xpc_release(v31);
      if (v13)
      {
        xpc_retain(v13);
        xpc_object_t v30 = *a3;
        xpc_object_t v32 = v13;
      }
      else
      {
        xpc_object_t v32 = xpc_null_create();
      }
      xpc_dictionary_set_value(v30, (const char *)*MEMORY[0x1E4F4C188], v32);
      xpc_object_t v33 = xpc_null_create();
      xpc_release(v32);
      xpc_release(v33);
      xpc_object_t v22 = (xpc_object_t)__p;
      goto LABEL_60;
    }
    xpc_object_t v28 = xpc_null_create();
LABEL_53:
    *a3 = v28;
    goto LABEL_54;
  }
  *a3 = xpc_null_create();
LABEL_60:
  xpc_release(v22);
  xpc_release(v13);
LABEL_15:
  if ((SHIBYTE(object[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v37[2]) & 0x80000000) == 0) {
      return;
    }
LABEL_19:
    operator delete(v37[0]);
    return;
  }
  operator delete(object[0]);
  if (SHIBYTE(v37[2]) < 0) {
    goto LABEL_19;
  }
}

void sub_1C58DF8E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

BOOL TraceCAReporter::supportedTraceDomainToReport(uint64_t a1, char *a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  int v4 = a2[23];
  if ((v4 & 0x80000000) == 0)
  {
    uint64_t v5 = a2;
    if (strcasecmp(a2, (const char *)*MEMORY[0x1E4F4C1F8])) {
      goto LABEL_3;
    }
    return 1;
  }
  uint64_t v5 = *(const char **)a2;
  if (!strcasecmp(*(const char **)a2, (const char *)*MEMORY[0x1E4F4C1F8])) {
    return 1;
  }
LABEL_3:
  if (!strcasecmp(v5, (const char *)*MEMORY[0x1E4F4F978])) {
    return 1;
  }
  uint64_t v6 = *(NSObject **)(a1 + 32);
  BOOL result = os_log_type_enabled(v6, OS_LOG_TYPE_ERROR);
  if (result)
  {
    int v8 = *(char **)a2;
    if (v4 >= 0) {
      int v8 = a2;
    }
    int v9 = 136315138;
    size_t v10 = v8;
    _os_log_error_impl(&dword_1C5767000, v6, OS_LOG_TYPE_ERROR, "Trace domain %s is not supported to report to CA", (uint8_t *)&v9, 0xCu);
    return 0;
  }
  return result;
}

BOOL TraceCAReporter::supportedTracePropertyToReport(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  if (*(char *)(a2 + 23) >= 0) {
    uint64_t v3 = (const char *)a2;
  }
  else {
    uint64_t v3 = *(const char **)a2;
  }
  int v4 = strcasecmp(v3, (const char *)*MEMORY[0x1E4F4C2D8]);
  if (v4)
  {
    uint64_t v5 = *(NSObject **)(a1 + 32);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      int v7 = 136315138;
      int v8 = v3;
      _os_log_error_impl(&dword_1C5767000, v5, OS_LOG_TYPE_ERROR, "Trace property %s is not supported to report to CA", (uint8_t *)&v7, 0xCu);
    }
  }
  return v4 == 0;
}

void TraceCAReporter::prepTraceStatsEnabled(uint64_t a1@<X0>, xpc_object_t *a2@<X1>, xpc_object_t *a3@<X8>)
{
  uint64_t v57 = *MEMORY[0x1E4F143B8];
  memset(v54, 170, sizeof(v54));
  uint64_t v6 = (char *)*MEMORY[0x1E4F4C6A8];
  char v53 = 12;
  strcpy((char *)__p, "NotSpecified");
  TraceCAReporter::getOrDefault<std::string>((uint64_t)v54, *a2, v6, (uint64_t)__p);
  if (v53 < 0) {
    operator delete(__p[0]);
  }
  memset(&v51, 170, sizeof(v51));
  int v7 = (char *)*MEMORY[0x1E4F4C800];
  char v50 = 12;
  strcpy((char *)v49, "NotSpecified");
  TraceCAReporter::getOrDefault<std::string>((uint64_t)&v51, *a2, v7, (uint64_t)v49);
  if (v50 < 0) {
    operator delete(v49[0]);
  }
  memset(__s1, 170, sizeof(__s1));
  int v8 = (char *)*MEMORY[0x1E4F4D120];
  char v47 = 12;
  strcpy((char *)v46, "NotSpecified");
  TraceCAReporter::getOrDefault<std::string>((uint64_t)__s1, *a2, v8, (uint64_t)v46);
  if (v47 < 0) {
    operator delete(v46[0]);
  }
  uint64_t v9 = v54[23];
  int v10 = v54[23];
  if (v54[23] < 0) {
    uint64_t v9 = *(void *)&v54[8];
  }
  if (v9 == 12)
  {
    uint64_t v11 = *(char **)v54;
    if (v54[23] >= 0) {
      uint64_t v11 = v54;
    }
    uint64_t v12 = *(void *)v11;
    int v13 = *((_DWORD *)v11 + 2);
    if (v12 == 0x6963657053746F4ELL && v13 == 1684367718) {
      goto LABEL_48;
    }
  }
  std::string::size_type size = HIBYTE(v51.__r_.__value_.__r.__words[2]);
  if ((v51.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    xpc_object_t v16 = &v51;
  }
  else
  {
    std::string::size_type size = v51.__r_.__value_.__l.__size_;
    xpc_object_t v16 = (std::string *)v51.__r_.__value_.__r.__words[0];
  }
  if (size == 12
    && v16->__r_.__value_.__r.__words[0] == 0x6963657053746F4ELL
    && LODWORD(v16->__r_.__value_.__r.__words[1]) == 1684367718)
  {
LABEL_48:
    xpc_object_t v31 = *(NSObject **)(a1 + 32);
    if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
    {
      unint64_t v42 = *(char **)v54;
      if (v10 >= 0) {
        unint64_t v42 = v54;
      }
      uint8x8_t v43 = &v51;
      if ((v51.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        uint8x8_t v43 = (std::string *)v51.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)long long buf = 136315394;
      *(void *)&uint8_t buf[4] = v42;
      *(_WORD *)&buf[12] = 2080;
      *(void *)&buf[14] = v43;
      _os_log_error_impl(&dword_1C5767000, v31, OS_LOG_TYPE_ERROR, "Missing one of the key/value: key is %s, value is %s", buf, 0x16u);
    }
    goto LABEL_52;
  }
  if (!strcmp((const char *)v16, "default") && !defaults::bbtrace::get(v54, (std::string::size_type *)&v51))
  {
LABEL_52:
    xpc_object_t v30 = xpc_null_create();
    goto LABEL_53;
  }
  BOOL v45 = 0;
  util::convert<BOOL>(&v51, &v45, 0);
  if (*(unsigned char *)(a1 + 40) != v45) {
    goto LABEL_64;
  }
  abm::asString();
  if (SHIBYTE(__s1[2]) >= 0) {
    xpc_object_t v18 = (void *)HIBYTE(__s1[2]);
  }
  else {
    xpc_object_t v18 = __s1[1];
  }
  unint64_t v19 = v56;
  int v20 = (char)v56;
  if ((v56 & 0x80u) != 0) {
    unint64_t v19 = *(void *)&buf[8];
  }
  if (v18 != (void *)v19)
  {
    BOOL v27 = 1;
    if (((char)v56 & 0x80000000) == 0) {
      goto LABEL_45;
    }
    goto LABEL_63;
  }
  if ((v56 & 0x80u) == 0) {
    unint64_t v21 = buf;
  }
  else {
    unint64_t v21 = *(uint8_t **)buf;
  }
  if ((HIBYTE(__s1[2]) & 0x80) != 0)
  {
    BOOL v27 = memcmp(__s1[0], v21, (size_t)__s1[1]) != 0;
    if ((v20 & 0x80000000) == 0) {
      goto LABEL_45;
    }
    goto LABEL_63;
  }
  if (!HIBYTE(__s1[2]))
  {
    BOOL v27 = 0;
    if (((char)v56 & 0x80000000) == 0) {
      goto LABEL_45;
    }
LABEL_63:
    operator delete(*(void **)buf);
    if (v27) {
      goto LABEL_46;
    }
    goto LABEL_64;
  }
  uint64_t v22 = HIBYTE(__s1[2]) - 1;
  xpc_object_t v23 = __s1;
  do
  {
    int v25 = *(unsigned __int8 *)v23;
    xpc_object_t v23 = (void **)((char *)v23 + 1);
    int v24 = v25;
    int v26 = *v21++;
    BOOL v27 = v24 != v26;
  }
  while (v24 == v26 && v22-- != 0);
  if ((char)v56 < 0) {
    goto LABEL_63;
  }
LABEL_45:
  if (v27)
  {
LABEL_46:
    xpc_object_t v29 = *(NSObject **)(a1 + 32);
    if (os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v44 = __s1;
      if (SHIBYTE(__s1[2]) < 0) {
        uint64_t v44 = (void **)__s1[0];
      }
      *(_DWORD *)long long buf = 67109378;
      *(_DWORD *)&uint8_t buf[4] = v45;
      *(_WORD *)&uint8_t buf[8] = 2080;
      *(void *)&buf[10] = v44;
      _os_log_debug_impl(&dword_1C5767000, v29, OS_LOG_TYPE_DEBUG, "#D No state transistion, not reporting to CA(state: %d, triggerInterface: %s)", buf, 0x12u);
    }
    xpc_object_t v30 = xpc_null_create();
LABEL_53:
    *a3 = v30;
    if ((SHIBYTE(__s1[2]) & 0x80000000) == 0) {
      goto LABEL_55;
    }
    goto LABEL_54;
  }
LABEL_64:
  *a3 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  xpc_object_t v32 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v33 = v32;
  if (v32)
  {
    *a3 = v32;
  }
  else
  {
    xpc_object_t v33 = xpc_null_create();
    *a3 = v33;
    if (!v33)
    {
      xpc_object_t v34 = xpc_null_create();
      xpc_object_t v33 = 0;
      goto LABEL_71;
    }
  }
  if (MEMORY[0x1C8792D30](v33) == MEMORY[0x1E4F14590])
  {
    xpc_retain(v33);
    goto LABEL_72;
  }
  xpc_object_t v34 = xpc_null_create();
LABEL_71:
  *a3 = v34;
LABEL_72:
  xpc_release(v33);
  TraceCAReporter::gatherDurationInformation((TraceCAReporter *)a1, a3);
  if (*(unsigned char *)(a1 + 40)) {
    xpc_object_t v35 = "On";
  }
  else {
    xpc_object_t v35 = "Off";
  }
  xpc_object_t v36 = xpc_string_create(v35);
  if (!v36) {
    xpc_object_t v36 = xpc_null_create();
  }
  xpc_object_t v37 = *a3;
  xpc_dictionary_set_value(v37, (const char *)*MEMORY[0x1E4F4D238], v36);
  xpc_object_t v38 = xpc_null_create();
  xpc_release(v36);
  xpc_release(v38);
  if (SHIBYTE(__s1[2]) >= 0) {
    uint64_t v39 = __s1;
  }
  else {
    uint64_t v39 = (void **)__s1[0];
  }
  xpc_object_t v40 = xpc_string_create((const char *)v39);
  if (!v40) {
    xpc_object_t v40 = xpc_null_create();
  }
  xpc_dictionary_set_value(v37, (const char *)*MEMORY[0x1E4F4C7D0], v40);
  xpc_object_t v41 = xpc_null_create();
  xpc_release(v40);
  xpc_release(v41);
  *(unsigned char *)(a1 + 40) = v45;
  if (SHIBYTE(__s1[2]) < 0) {
LABEL_54:
  }
    operator delete(__s1[0]);
LABEL_55:
  if ((SHIBYTE(v51.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((v54[23] & 0x80000000) == 0) {
      return;
    }
LABEL_59:
    operator delete(*(void **)v54);
    return;
  }
  operator delete(v51.__r_.__value_.__l.__data_);
  if (v54[23] < 0) {
    goto LABEL_59;
  }
}

void sub_1C58E029C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,char a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void TraceCAReporter::gatherMissingBasebandTraceState(TraceCAReporter *this, xpc_object_t *a2)
{
  uint64_t v4 = MEMORY[0x1C8792D30](*a2);
  uint64_t v5 = MEMORY[0x1E4F14590];
  if (v4 != MEMORY[0x1E4F14590])
  {
    xpc_object_t v6 = xpc_dictionary_create(0, 0, 0);
    if (v6 || (xpc_object_t v6 = xpc_null_create()) != 0)
    {
      if (MEMORY[0x1C8792D30](v6) == v5)
      {
        xpc_retain(v6);
        xpc_object_t v7 = v6;
      }
      else
      {
        xpc_object_t v7 = xpc_null_create();
      }
    }
    else
    {
      xpc_object_t v7 = xpc_null_create();
      xpc_object_t v6 = 0;
    }
    xpc_release(v6);
    xpc_object_t v8 = xpc_null_create();
    xpc_object_t v9 = *a2;
    *a2 = v7;
    xpc_release(v9);
    xpc_release(v8);
  }
  for (size_t i = (uint64_t *)*((void *)this + 10); i; size_t i = (uint64_t *)*i)
  {
    *(void *)&long long v11 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v11 + 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)xpc_object_t v23 = v11;
    *(_OWORD *)&v23[16] = v11;
    long long v22 = v11;
    if (*((char *)i + 39) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&v22, (const std::string::value_type *)i[2], i[3]);
      if ((*((char *)i + 63) & 0x80000000) == 0)
      {
LABEL_14:
        *(_OWORD *)&v23[8] = *(_OWORD *)(i + 5);
        *(void *)&v23[24] = i[7];
        goto LABEL_17;
      }
    }
    else
    {
      long long v22 = *((_OWORD *)i + 1);
      *(void *)xpc_object_t v23 = i[4];
      if ((*((char *)i + 63) & 0x80000000) == 0) {
        goto LABEL_14;
      }
    }
    std::string::__init_copy_ctor_external((std::string *)&v23[8], (const std::string::value_type *)i[5], i[6]);
LABEL_17:
    memset(&v21, 170, sizeof(v21));
    if ((v23[7] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external(&v21, (const std::string::value_type *)v22, *((std::string::size_type *)&v22 + 1));
    }
    else
    {
      *(_OWORD *)&v21.__r_.__value_.__l.__data_ = v22;
      v21.__r_.__value_.__r.__words[2] = *(void *)v23;
    }
    memset(&v20, 170, sizeof(v20));
    if ((v23[31] & 0x80000000) != 0) {
      std::string::__init_copy_ctor_external(&v20, *(const std::string::value_type **)&v23[8], *(std::string::size_type *)&v23[16]);
    }
    else {
      std::string v20 = *(std::string *)&v23[8];
    }
    if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v12 = &v20;
    }
    else {
      uint64_t v12 = (std::string *)v20.__r_.__value_.__r.__words[0];
    }
    if (xpc_dictionary_get_value(*a2, (const char *)v12))
    {
LABEL_37:
      if ((SHIBYTE(v20.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_38;
      }
      goto LABEL_44;
    }
    v18[0] = 0;
    v18[1] = 0;
    uint64_t v19 = 0;
    prop::bbtrace::get((char *)&v21, (uint64_t)v18);
    TraceCAReporter::convertPlistValToCAInformation((char *)&v21, (uint64_t)v18, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    xpc_object_t v14 = xpc_string_create((const char *)p_p);
    if (!v14) {
      xpc_object_t v14 = xpc_null_create();
    }
    if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      xpc_object_t v15 = &v20;
    }
    else {
      xpc_object_t v15 = (std::string *)v20.__r_.__value_.__r.__words[0];
    }
    xpc_dictionary_set_value(*a2, (const char *)v15, v14);
    xpc_object_t v16 = xpc_null_create();
    xpc_release(v14);
    xpc_release(v16);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v19) & 0x80000000) == 0) {
        goto LABEL_37;
      }
    }
    else if ((SHIBYTE(v19) & 0x80000000) == 0)
    {
      goto LABEL_37;
    }
    operator delete(v18[0]);
    if ((SHIBYTE(v20.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_38:
      if ((SHIBYTE(v21.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_39;
      }
      goto LABEL_45;
    }
LABEL_44:
    operator delete(v20.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v21.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_39:
      if ((v23[31] & 0x80000000) == 0) {
        goto LABEL_40;
      }
      goto LABEL_46;
    }
LABEL_45:
    operator delete(v21.__r_.__value_.__l.__data_);
    if ((v23[31] & 0x80000000) == 0)
    {
LABEL_40:
      if ((v23[7] & 0x80000000) != 0) {
        goto LABEL_47;
      }
      continue;
    }
LABEL_46:
    operator delete(*(void **)&v23[8]);
    if ((v23[7] & 0x80000000) != 0) {
LABEL_47:
    }
      operator delete((void *)v22);
  }
}

void sub_1C58E06B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  if (a17 < 0)
  {
    operator delete(__p);
    if ((a23 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a30 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else if ((a23 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a18);
  if ((a30 & 0x80000000) == 0)
  {
LABEL_4:
    std::pair<std::string,std::string>::~pair((uint64_t)&a32);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(a25);
  std::pair<std::string,std::string>::~pair((uint64_t)&a32);
  _Unwind_Resume(a1);
}

void TraceCAReporter::getOrDefault<std::string>(uint64_t a1, xpc_object_t xdict, char *key, uint64_t a4)
{
  memset(v10, 170, 24);
  xpc_object_t value = xpc_dictionary_get_value(xdict, key);
  xpc_object_t object = value;
  if (value) {
    xpc_retain(value);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  memset(&v10[3], 0, 24);
  xpc::dyn_cast_or_default();
  xpc_release(object);
  xpc_object_t v7 = (void *)HIBYTE(v10[2]);
  int v8 = SHIBYTE(v10[2]);
  if (SHIBYTE(v10[2]) < 0) {
    xpc_object_t v7 = v10[1];
  }
  if (v7)
  {
    *(_OWORD *)a1 = *(_OWORD *)v10;
    *(void **)(a1 + 16) = v10[2];
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a4;
    *(void *)(a1 + 16) = *(void *)(a4 + 16);
    *(void *)(a4 + 8) = 0;
    *(void *)(a4 + 16) = 0;
    *(void *)a4 = 0;
    if (v8 < 0) {
      operator delete(v10[0]);
    }
  }
}

void sub_1C58E085C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  xpc_release(object);
  _Unwind_Resume(a1);
}

double TraceCAReporter::gatherDurationInformation(TraceCAReporter *this, xpc_object_t *a2)
{
  uint64_t v4 = MEMORY[0x1C8792D30](*a2);
  uint64_t v5 = MEMORY[0x1E4F14590];
  if (v4 != MEMORY[0x1E4F14590])
  {
    xpc_object_t v6 = xpc_dictionary_create(0, 0, 0);
    if (v6 || (xpc_object_t v6 = xpc_null_create()) != 0)
    {
      if (MEMORY[0x1C8792D30](v6) == v5)
      {
        xpc_retain(v6);
        xpc_object_t v7 = v6;
      }
      else
      {
        xpc_object_t v7 = xpc_null_create();
      }
    }
    else
    {
      xpc_object_t v7 = xpc_null_create();
      xpc_object_t v6 = 0;
    }
    xpc_release(v6);
    xpc_object_t v8 = xpc_null_create();
    xpc_object_t v9 = *a2;
    *a2 = v7;
    xpc_release(v9);
    xpc_release(v8);
  }
  v15.tv_sec = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&v15.tv_usec = 0xAAAAAAAAAAAAAAAALL;
  gettimeofday(&v15, 0);
  uint64_t v11 = *((void *)this + 6);
  int v10 = (timeval *)((char *)this + 48);
  xpc_object_t v12 = xpc_int64_create(v15.tv_sec - v11);
  if (!v12) {
    xpc_object_t v12 = xpc_null_create();
  }
  xpc_dictionary_set_value(*a2, (const char *)*MEMORY[0x1E4F4C4A0], v12);
  xpc_object_t v13 = xpc_null_create();
  xpc_release(v12);
  xpc_release(v13);
  double result = *(double *)&v15.tv_sec;
  timeval *v10 = v15;
  return result;
}

std::string *TraceCAReporter::convertPlistValToCAInformation@<X0>(char *a1@<X1>, uint64_t a2@<X2>, std::string *a3@<X8>)
{
  uint64_t v4 = a1;
  uint64_t v5 = a3;
  memset(a3, 170, sizeof(std::string));
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a3, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    if ((v4[23] & 0x80000000) == 0)
    {
LABEL_3:
      double result = (std::string *)strcasecmp(v4, (const char *)*MEMORY[0x1E4F4CD88]);
      if (result) {
        goto LABEL_4;
      }
      goto LABEL_19;
    }
  }
  else
  {
    *(_OWORD *)&a3->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    a3->__r_.__value_.__r.__words[2] = *(void *)(a2 + 16);
    if ((a1[23] & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  uint64_t v4 = *(char **)v4;
  double result = (std::string *)strcasecmp(v4, (const char *)*MEMORY[0x1E4F4CD88]);
  if (result)
  {
LABEL_4:
    if (!strcasecmp(v4, (const char *)*MEMORY[0x1E4F4C198]))
    {
      int v14 = -1431655766;
      util::convert<int>((const std::string *)a2, &v14, 0);
      xpc_object_t v13 = (const std::string::value_type *)trace::toString();
      return std::string::__assign_external(v5, v13);
    }
    else if (!strcasecmp(v4, (const char *)*MEMORY[0x1E4F4C2D8]) {
           || !strcasecmp(v4, (const char *)*MEMORY[0x1E4F4F9B8])
    }
           || (double result = (std::string *)strcasecmp(v4, diag::config::kEnabledDuringSleepKey[0]), !result))
    {
      uint64_t v7 = *(unsigned __int8 *)(a2 + 23);
      if (*(char *)(a2 + 23) < 0) {
        uint64_t v7 = *(void *)(a2 + 8);
      }
      if (v7 == 1)
      {
        if (*(char *)(a2 + 23) >= 0) {
          xpc_object_t v8 = (unsigned char *)a2;
        }
        else {
          xpc_object_t v8 = *(unsigned char **)a2;
        }
        if (*v8 == 48) {
          xpc_object_t v9 = "Off";
        }
        else {
          xpc_object_t v9 = "On";
        }
      }
      else
      {
        xpc_object_t v9 = "On";
      }
      return std::string::__assign_external(v5, v9);
    }
    return result;
  }
LABEL_19:
  uint64_t v10 = *(unsigned __int8 *)(a2 + 23);
  int v11 = (char)v10;
  if ((v10 & 0x80u) != 0) {
    uint64_t v10 = *(void *)(a2 + 8);
  }
  if (v10 == 1)
  {
    xpc_object_t v12 = v11 >= 0 ? (unsigned char *)a2 : *(unsigned char **)a2;
    if (*v12 == 48)
    {
      if (SHIBYTE(v5->__r_.__value_.__r.__words[2]) < 0)
      {
        v5->__r_.__value_.__l.__size_ = 8;
        uint64_t v5 = (std::string *)v5->__r_.__value_.__r.__words[0];
      }
      else
      {
        *((unsigned char *)&v5->__r_.__value_.__s + 23) = 8;
      }
      strcpy((char *)v5, "No limit");
    }
  }
  return result;
}

void sub_1C58E0C18(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::pair<std::string const,std::string>::pair[abi:ne180100]<char const* const&,char const* const&,0>(uint64_t a1, char *__s, const char **a3)
{
  size_t v6 = strlen(__s);
  if (v6 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v7 = v6;
  if (v6 >= 0x17)
  {
    uint64_t v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17) {
      uint64_t v9 = v6 | 7;
    }
    uint64_t v10 = v9 + 1;
    xpc_object_t v8 = operator new(v9 + 1);
    *(void *)(a1 + 8) = v7;
    *(void *)(a1 + 16) = v10 | 0x8000000000000000;
    *(void *)a1 = v8;
    goto LABEL_8;
  }
  *(unsigned char *)(a1 + 23) = v6;
  xpc_object_t v8 = (void *)a1;
  if (v6) {
LABEL_8:
  }
    memmove(v8, __s, v7);
  *((unsigned char *)v8 + v7) = 0;
  int v11 = (void *)(a1 + 24);
  xpc_object_t v12 = *a3;
  size_t v13 = strlen(*a3);
  if (v13 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v14 = v13;
  if (v13 >= 0x17)
  {
    uint64_t v15 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v13 | 7) != 0x17) {
      uint64_t v15 = v13 | 7;
    }
    uint64_t v16 = v15 + 1;
    int v11 = operator new(v15 + 1);
    *(void *)(a1 + 32) = v14;
    *(void *)(a1 + 40) = v16 | 0x8000000000000000;
    *(void *)(a1 + 24) = v11;
  }
  else
  {
    *(unsigned char *)(a1 + 47) = v13;
    if (!v13) {
      goto LABEL_17;
    }
  }
  memmove(v11, v12, v14);
LABEL_17:
  *((unsigned char *)v11 + v14) = 0;
  return a1;
}

void sub_1C58E0D7C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

std::__shared_weak_count_vtbl **std::shared_ptr<TraceCAReporter>::shared_ptr[abi:ne180100]<TraceCAReporter,std::shared_ptr<TraceCAReporter> ctu::SharedSynchronizable<TraceCAReporter>::make_shared_ptr<TraceCAReporter>(TraceCAReporter*)::{lambda(TraceCAReporter*)#1},void>(std::__shared_weak_count_vtbl **a1, std::__shared_weak_count_vtbl *a2)
{
  *a1 = a2;
  uint64_t v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = &v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20FBA30;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = a2;
  a1[1] = (std::__shared_weak_count_vtbl *)v4;
  if (!a2) {
    return a1;
  }
  size_t v6 = (std::__shared_weak_count *)a2->~__shared_weak_count_0;
  if (v6)
  {
    if (v6->__shared_owners_ == -1)
    {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      a2->~__shared_weak_size_t count = (void (__cdecl *)(std::__shared_weak_count *__hidden))a2;
      a2->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v4;
      std::__shared_weak_count::__release_weak(v6);
      if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
        goto LABEL_8;
      }
    }
    return a1;
  }
  atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  a2->~__shared_weak_size_t count = (void (__cdecl *)(std::__shared_weak_count *__hidden))a2;
  a2->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v4;
  if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
LABEL_8:
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void sub_1C58E0EB0(void *a1)
{
  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[2], v1, (dispatch_function_t)std::shared_ptr<TraceCAReporter> ctu::SharedSynchronizable<TraceCAReporter>::make_shared_ptr<TraceCAReporter>(TraceCAReporter*)::{lambda(TraceCAReporter*)#1}::operator() const(TraceCAReporter*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_1C58E0ED8(_Unwind_Exception *a1)
{
}

void std::__shared_ptr_pointer<TraceCAReporter *,std::shared_ptr<TraceCAReporter> ctu::SharedSynchronizable<TraceCAReporter>::make_shared_ptr<TraceCAReporter>(TraceCAReporter*)::{lambda(TraceCAReporter *)#1},std::allocator<TraceCAReporter>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<TraceCAReporter *,std::shared_ptr<TraceCAReporter> ctu::SharedSynchronizable<TraceCAReporter>::make_shared_ptr<TraceCAReporter>(TraceCAReporter*)::{lambda(TraceCAReporter *)#1},std::allocator<TraceCAReporter>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<TraceCAReporter *,std::shared_ptr<TraceCAReporter> ctu::SharedSynchronizable<TraceCAReporter>::make_shared_ptr<TraceCAReporter>(TraceCAReporter*)::{lambda(TraceCAReporter *)#1},std::allocator<TraceCAReporter>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableI15TraceCAReporterE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_") {
    return a1 + 24;
  }
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableI15TraceCAReporterE15make_shared_ptrIS1_EENSt3__110shared_pt"
                                "rIT_EEPS6_EUlPS1_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableI15TraceCAReporterE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableI15TraceCAReporterE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24; {
  return 0;
  }
}

void std::shared_ptr<TraceCAReporter> ctu::SharedSynchronizable<TraceCAReporter>::make_shared_ptr<TraceCAReporter>(TraceCAReporter*)::{lambda(TraceCAReporter*)#1}::operator() const(TraceCAReporter*)::{lambda(void *)#1}::__invoke(void *a1)
{
  if (!a1) {
    return;
  }
  uint64_t v2 = (void **)a1[10];
  if (v2)
  {
    do
    {
      size_t v7 = (void **)*v2;
      if (*((char *)v2 + 63) < 0)
      {
        operator delete(v2[5]);
        if (*((char *)v2 + 39) < 0) {
LABEL_19:
        }
          operator delete(v2[2]);
      }
      else if (*((char *)v2 + 39) < 0)
      {
        goto LABEL_19;
      }
      operator delete(v2);
      uint64_t v2 = v7;
    }
    while (v7);
  }
  unint64_t v3 = (void *)a1[8];
  a1[8] = 0;
  if (v3) {
    operator delete(v3);
  }
  MEMORY[0x1C8790F80](a1 + 4);
  uint64_t v4 = a1[3];
  if (v4) {
    dispatch_release(v4);
  }
  uint64_t v5 = a1[2];
  if (v5) {
    dispatch_release(v5);
  }
  size_t v6 = (std::__shared_weak_count *)a1[1];
  if (v6) {
    std::__shared_weak_count::__release_weak(v6);
  }

  operator delete(a1);
}

uint64_t *std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((unsigned char *)a1 + 16))
    {
      if (*(char *)(v2 + 63) < 0)
      {
        operator delete(*(void **)(v2 + 40));
        if ((*(char *)(v2 + 39) & 0x80000000) == 0) {
          goto LABEL_5;
        }
      }
      else if ((*(char *)(v2 + 39) & 0x80000000) == 0)
      {
        goto LABEL_5;
      }
      operator delete(*(void **)(v2 + 16));
    }
LABEL_5:
    operator delete((void *)v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::string>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = (unsigned char *)a2;
  unint64_t v6 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v7 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v7 = v6;
  }
  unint64_t v8 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)v43, (uint64_t *)a2, v7);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v12 = v8;
      if (v8 >= v10) {
        unint64_t v12 = v8 % v10;
      }
    }
    else
    {
      unint64_t v12 = (v10 - 1) & v8;
    }
    size_t v13 = *(uint64_t ***)(*(void *)a1 + 8 * v12);
    if (v13)
    {
      size_t v14 = *v13;
      if (*v13)
      {
        char v15 = v4[23];
        if (v15 >= 0) {
          uint64_t v16 = v4[23];
        }
        else {
          uint64_t v16 = *((void *)v4 + 1);
        }
        if (v15 < 0) {
          uint64_t v4 = *(unsigned char **)v4;
        }
        if (v11.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v22 = v14[1];
            if (v22 == v9)
            {
              uint64_t v23 = *((unsigned __int8 *)v14 + 39);
              if ((v23 & 0x80u) == 0) {
                uint64_t v24 = *((unsigned __int8 *)v14 + 39);
              }
              else {
                uint64_t v24 = v14[3];
              }
              if (v24 == v16)
              {
                int v25 = (const void **)(v14 + 2);
                if ((v23 & 0x80) != 0)
                {
                  if (!memcmp(*v25, v4, v14[3])) {
                    return;
                  }
                }
                else
                {
                  if (!*((unsigned char *)v14 + 39)) {
                    return;
                  }
                  for (size_t i = v4; *(unsigned __int8 *)v25 == *i; ++i)
                  {
                    int v25 = (const void **)((char *)v25 + 1);
                    if (!--v23) {
                      return;
                    }
                  }
                }
              }
            }
            else if ((v22 & (v10 - 1)) != v12)
            {
              goto LABEL_51;
            }
            size_t v14 = (uint64_t *)*v14;
            if (!v14) {
              goto LABEL_51;
            }
          }
        }
        do
        {
          unint64_t v17 = v14[1];
          if (v17 == v9)
          {
            uint64_t v18 = *((unsigned __int8 *)v14 + 39);
            if ((v18 & 0x80u) == 0) {
              uint64_t v19 = *((unsigned __int8 *)v14 + 39);
            }
            else {
              uint64_t v19 = v14[3];
            }
            if (v19 == v16)
            {
              std::string v20 = (const void **)(v14 + 2);
              if ((v18 & 0x80) != 0)
              {
                if (!memcmp(*v20, v4, v14[3])) {
                  return;
                }
              }
              else
              {
                if (!*((unsigned char *)v14 + 39)) {
                  return;
                }
                for (j = v4; *(unsigned __int8 *)v20 == *j; ++j)
                {
                  std::string v20 = (const void **)((char *)v20 + 1);
                  if (!--v18) {
                    return;
                  }
                }
              }
            }
          }
          else
          {
            if (v17 >= v10) {
              v17 %= v10;
            }
            if (v17 != v12) {
              break;
            }
          }
          size_t v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
    }
  }
  else
  {
    unint64_t v12 = 0xAAAAAAAAAAAAAAAALL;
  }
LABEL_51:
  unint64_t v44 = 0xAAAAAAAAAAAAAA00;
  BOOL v27 = (char *)operator new(0x40uLL);
  v43[0] = v27;
  v43[1] = a1 + 16;
  *(void *)BOOL v27 = 0;
  *((void *)v27 + 1) = v9;
  xpc_object_t v28 = (std::string *)(v27 + 16);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v28, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v28->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    *((void *)v27 + 4) = *(void *)(a3 + 16);
  }
  *(_OWORD *)(v27 + 40) = *(_OWORD *)(a3 + 24);
  *((void *)v27 + 7) = *(void *)(a3 + 40);
  *(void *)(a3 + 32) = 0;
  *(void *)(a3 + 40) = 0;
  *(void *)(a3 + 24) = 0;
  LOBYTE(v44) = 1;
  float v29 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v30 = *(float *)(a1 + 32);
  if (v10 && (float)(v30 * (float)v10) >= v29) {
    goto LABEL_82;
  }
  BOOL v31 = 1;
  if (v10 >= 3) {
    BOOL v31 = (v10 & (v10 - 1)) != 0;
  }
  unint64_t v32 = v31 | (2 * v10);
  unint64_t v33 = vcvtps_u32_f32(v29 / v30);
  if (v32 <= v33) {
    size_t prime = v33;
  }
  else {
    size_t prime = v32;
  }
  if (prime == 1)
  {
    size_t prime = 2;
  }
  else if ((prime & (prime - 1)) != 0)
  {
    size_t prime = std::__next_prime(prime);
  }
  int8x8_t v35 = *(int8x8_t *)(a1 + 8);
  if (prime > *(void *)&v35) {
    goto LABEL_66;
  }
  if (prime < *(void *)&v35)
  {
    unint64_t v36 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v35 < 3uLL || (uint8x8_t v37 = (uint8x8_t)vcnt_s8(v35), v37.i16[0] = vaddlv_u8(v37), v37.u32[0] > 1uLL))
    {
      unint64_t v36 = std::__next_prime(v36);
    }
    else
    {
      uint64_t v38 = 1 << -(char)__clz(v36 - 1);
      if (v36 >= 2) {
        unint64_t v36 = v38;
      }
    }
    if (prime <= v36) {
      size_t prime = v36;
    }
    if (prime < *(void *)&v35) {
LABEL_66:
    }
      std::__hash_table<std::__hash_value_type<ctu::iokit::TelephonyIOKitPowerSource,abm::AccessoryInfo>,std::__unordered_map_hasher<ctu::iokit::TelephonyIOKitPowerSource,std::__hash_value_type<ctu::iokit::TelephonyIOKitPowerSource,abm::AccessoryInfo>,std::hash<ctu::iokit::TelephonyIOKitPowerSource>,std::equal_to<ctu::iokit::TelephonyIOKitPowerSource>,true>,std::__unordered_map_equal<ctu::iokit::TelephonyIOKitPowerSource,std::__hash_value_type<ctu::iokit::TelephonyIOKitPowerSource,abm::AccessoryInfo>,std::equal_to<ctu::iokit::TelephonyIOKitPowerSource>,std::hash<ctu::iokit::TelephonyIOKitPowerSource>,true>,std::allocator<std::__hash_value_type<ctu::iokit::TelephonyIOKitPowerSource,abm::AccessoryInfo>>>::__do_rehash<true>(a1, prime);
  }
  unint64_t v10 = *(void *)(a1 + 8);
  unint64_t v39 = v10 - 1;
  if ((v10 & (v10 - 1)) != 0)
  {
    if (v9 >= v10)
    {
      unint64_t v12 = v9 % v10;
      xpc_object_t v40 = *(void **)(*(void *)a1 + 8 * (v9 % v10));
      xpc_object_t v41 = (void *)v43[0];
      if (!v40) {
        goto LABEL_85;
      }
      goto LABEL_83;
    }
    unint64_t v12 = v9;
LABEL_82:
    xpc_object_t v40 = *(void **)(*(void *)a1 + 8 * v12);
    xpc_object_t v41 = (void *)v43[0];
    if (!v40) {
      goto LABEL_85;
    }
    goto LABEL_83;
  }
  unint64_t v12 = v39 & v9;
  xpc_object_t v40 = *(void **)(*(void *)a1 + 8 * (v39 & v9));
  xpc_object_t v41 = (void *)v43[0];
  if (!v40)
  {
LABEL_85:
    *xpc_object_t v41 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v43[0];
    *(void *)(*(void *)a1 + 8 * v12) = a1 + 16;
    if (*(void *)v43[0])
    {
      unint64_t v42 = *(void *)(*(void *)v43[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v42 >= v10) {
          v42 %= v10;
        }
      }
      else
      {
        v42 &= v10 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v42) = v43[0];
    }
    goto LABEL_91;
  }
LABEL_83:
  *xpc_object_t v41 = *v40;
  *xpc_object_t v40 = v43[0];
LABEL_91:
  ++*(void *)(a1 + 24);
}

void sub_1C58E1528(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1C58E153C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void CircularFileLogWriter::create(long long *a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0xB8uLL);
  CircularFileLogWriter::CircularFileLogWriter((uint64_t)v4, a1);
  *a2 = v4;
  uint64_t v5 = (std::__shared_weak_count *)operator new(0x20uLL);
  v5->__shared_owners_ = 0;
  p_shared_owners = &v5->__shared_owners_;
  v5->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20FBB70;
  v5->__shared_weak_owners_ = 0;
  v5[1].__vftable = (std::__shared_weak_count_vtbl *)v4;
  a2[1] = v5;
  unint64_t v7 = (std::__shared_weak_count *)*((void *)v4 + 2);
  if (v7)
  {
    if (v7->__shared_owners_ != -1) {
      return;
    }
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    *((void *)v4 + 1) = v4;
    *((void *)v4 + 2) = v5;
    std::__shared_weak_count::__release_weak(v7);
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      return;
    }
  }
  else
  {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    *((void *)v4 + 1) = v4;
    *((void *)v4 + 2) = v5;
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      return;
    }
  }
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);

  std::__shared_weak_count::__release_weak(v5);
}

void sub_1C58E167C(void *a1)
{
  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[3], v1, (dispatch_function_t)std::shared_ptr<CircularFileLogWriter> ctu::SharedSynchronizable<CircularFileLogWriter>::make_shared_ptr<CircularFileLogWriter>(CircularFileLogWriter*)::{lambda(CircularFileLogWriter*)#1}::operator() const(CircularFileLogWriter*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_1C58E16A4(_Unwind_Exception *a1)
{
}

void sub_1C58E16B8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t CircularFileLogWriter::CircularFileLogWriter(uint64_t a1, long long *a2)
{
  *(void *)a1 = MEMORY[0x1E4FBA1A8] + 16;
  uint64_t v4 = dispatch_queue_create("CircularFileLogWriter", 0);
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = v4;
  if (v4)
  {
    uint64_t v5 = v4;
    dispatch_retain(v4);
    *(void *)(a1 + 32) = 0;
    dispatch_release(v5);
    *(void *)a1 = &unk_1F20FBA80;
    *(void *)(a1 + 40) = 0;
    unint64_t v6 = (std::string *)(a1 + 48);
    if ((*((char *)a2 + 23) & 0x80000000) == 0)
    {
LABEL_3:
      long long v7 = *a2;
      v6->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
      *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
      goto LABEL_6;
    }
  }
  else
  {
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = 0;
    *(void *)a1 = &unk_1F20FBA80;
    unint64_t v6 = (std::string *)(a1 + 48);
    if ((*((char *)a2 + 23) & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)a2, *((void *)a2 + 1));
LABEL_6:
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 72), *((const std::string::value_type **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v8 = *(long long *)((char *)a2 + 24);
    *(void *)(a1 + 88) = *((void *)a2 + 5);
    *(_OWORD *)(a1 + 72) = v8;
  }
  unint64_t v9 = (std::string *)(a1 + 96);
  if (*((char *)a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *((const std::string::value_type **)a2 + 6), *((void *)a2 + 7));
  }
  else
  {
    long long v10 = a2[3];
    *(void *)(a1 + 112) = *((void *)a2 + 8);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v10;
  }
  long long v11 = *(long long *)((char *)a2 + 72);
  *(unsigned char *)(a1 + 136) = *((unsigned char *)a2 + 88);
  *(_OWORD *)(a1 + 120) = v11;
  *(void *)(a1 + 144) = 1;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  return a1;
}

void sub_1C58E1850(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 95) < 0)
  {
    operator delete(*v4);
    if ((*(char *)(v1 + 71) & 0x80000000) == 0)
    {
LABEL_3:
      uint64_t v6 = *(void *)(v1 + 40);
      *(void *)(v1 + 40) = 0;
      if (!v6) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else if ((*(char *)(v1 + 71) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*v3);
  uint64_t v6 = *(void *)(v1 + 40);
  *(void *)(v1 + 40) = 0;
  if (!v6)
  {
LABEL_4:
    ctu::SharedSynchronizable<DataStallDetection>::~SharedSynchronizable(v2);
    _Unwind_Resume(a1);
  }
LABEL_7:
  (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  ctu::SharedSynchronizable<DataStallDetection>::~SharedSynchronizable(v2);
  _Unwind_Resume(a1);
}

void CircularFileLogWriter::open(CircularFileLogWriter *this)
{
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 0x40000000;
  v3[2] = ___ZN21CircularFileLogWriter4openEv_block_invoke;
  v3[3] = &__block_descriptor_tmp_15;
  v3[4] = this;
  uint64_t v4 = v3;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI21CircularFileLogWriterE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  block[3] = &__block_descriptor_tmp_21_1;
  block[4] = (char *)this + 8;
  block[5] = &v4;
  uint64_t v2 = (char *)this + 24;
  uint64_t v1 = *((void *)this + 3);
  if (*((void *)v2 + 1)) {
    dispatch_async_and_wait(v1, block);
  }
  else {
    dispatch_sync(v1, block);
  }
}

void ___ZN21CircularFileLogWriter4openEv_block_invoke(uint64_t a1)
{
  v39[2] = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(void *)(a1 + 32);
  *(_DWORD *)(v1 + 152) = 0;
  *(_DWORD *)(v1 + 156) = 0;
  if (*(void *)(v1 + 40))
  {
    std::ostream::flush();
    uint64_t v2 = *(void **)(v1 + 40);
    if (!std::filebuf::close()) {
      std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), *(_DWORD *)((char *)v2 + *(void *)(*v2 - 24) + 32) | 4);
    }
    uint64_t v3 = *(void *)(v1 + 40);
    *(void *)(v1 + 40) = 0;
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    }
  }
  else
  {
    *(void *)(v1 + 40) = 0;
  }
  *(void *)(v1 + 144) = *(void *)(v1 + 120) / *(void *)(v1 + 128);
  int v4 = *(char *)(v1 + 95);
  if (v4 >= 0) {
    size_t v5 = *(unsigned __int8 *)(v1 + 95);
  }
  else {
    size_t v5 = *(void *)(v1 + 80);
  }
  unint64_t v6 = v5 + 8;
  memset(&__dst, 170, sizeof(__dst));
  if (v5 + 8 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  long long v7 = (void **)(v1 + 72);
  if (v6 >= 0x17)
  {
    uint64_t v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17) {
      uint64_t v9 = v6 | 7;
    }
    uint64_t v10 = v9 + 1;
    p_dst = (std::string *)operator new(v9 + 1);
    __dst.__r_.__value_.__l.__size_ = v5 + 8;
    __dst.__r_.__value_.__r.__words[2] = v10 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  }
  else
  {
    memset(&__dst, 0, sizeof(__dst));
    p_dst = &__dst;
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v5 + 8;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v4 >= 0) {
    long long v11 = (void *)(v1 + 72);
  }
  else {
    long long v11 = *v7;
  }
  memmove(p_dst, v11, v5);
LABEL_21:
  strcpy((char *)p_dst + v5, "/latest-");
  int v12 = *(char *)(v1 + 71);
  if (v12 >= 0) {
    size_t v13 = (const std::string::value_type *)(v1 + 48);
  }
  else {
    size_t v13 = *(const std::string::value_type **)(v1 + 48);
  }
  if (v12 >= 0) {
    std::string::size_type v14 = *(unsigned __int8 *)(v1 + 71);
  }
  else {
    std::string::size_type v14 = *(void *)(v1 + 56);
  }
  char v15 = std::string::append(&__dst, v13, v14);
  long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  *(void *)&v38.st_uid = *((void *)&v15->__r_.__value_.__l + 2);
  *(_OWORD *)&v38.st_dev = v16;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  int v17 = *(char *)(v1 + 119);
  if (v17 >= 0) {
    uint64_t v18 = (const std::string::value_type *)(v1 + 96);
  }
  else {
    uint64_t v18 = *(const std::string::value_type **)(v1 + 96);
  }
  if (v17 >= 0) {
    std::string::size_type v19 = *(unsigned __int8 *)(v1 + 119);
  }
  else {
    std::string::size_type v19 = *(void *)(v1 + 104);
  }
  std::string v20 = std::string::append((std::string *)&v38, v18, v19);
  std::string::size_type v21 = v20->__r_.__value_.__r.__words[0];
  v39[0] = v20->__r_.__value_.__l.__size_;
  *(void *)((char *)v39 + 7) = *(std::string::size_type *)((char *)&v20->__r_.__value_.__r.__words[1] + 7);
  char v22 = HIBYTE(v20->__r_.__value_.__r.__words[2]);
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  if (*(char *)(v1 + 183) < 0) {
    operator delete(*(void **)(v1 + 160));
  }
  uint64_t v23 = v39[0];
  *(void *)(v1 + 160) = v21;
  *(void *)(v1 + 168) = v23;
  *(void *)(v1 + 175) = *(void *)((char *)v39 + 7);
  *(unsigned char *)(v1 + 183) = v22;
  if (SHIBYTE(v38.st_gid) < 0)
  {
    operator delete(*(void **)&v38.st_dev);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_37;
    }
  }
  else if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_37;
  }
  operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_37:
  int v24 = *(char *)(v1 + 95);
  if (v24 >= 0) {
    size_t v25 = *(unsigned __int8 *)(v1 + 95);
  }
  else {
    size_t v25 = *(void *)(v1 + 80);
  }
  unint64_t v26 = v25 + 1;
  memset(&v38, 170, 24);
  if (v25 + 1 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v26 >= 0x17)
  {
    uint64_t v30 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v26 | 7) != 0x17) {
      uint64_t v30 = v26 | 7;
    }
    uint64_t v31 = v30 + 1;
    BOOL v27 = (char *)operator new(v30 + 1);
    v38.st_ino = v25 + 1;
    *(void *)&v38.st_uid = v31 | 0x8000000000000000;
    *(void *)&v38.st_dev = v27;
  }
  else
  {
    memset(&v38, 0, 24);
    BOOL v27 = (char *)&v38;
    HIBYTE(v38.st_gid) = v25 + 1;
    if (!v25)
    {
      LOWORD(v38.st_dev) = 47;
      if ((v24 & 0x80000000) == 0) {
        goto LABEL_44;
      }
      goto LABEL_57;
    }
  }
  if (v24 >= 0) {
    unint64_t v32 = (void *)(v1 + 72);
  }
  else {
    unint64_t v32 = *v7;
  }
  memmove(v27, v32, v25);
  *(_WORD *)&v27[v25] = 47;
  if (v24 < 0) {
LABEL_57:
  }
    operator delete(*v7);
LABEL_44:
  *(_OWORD *)long long v7 = *(_OWORD *)&v38.st_dev;
  *(void *)(v1 + 88) = *(void *)&v38.st_uid;
  v28.tv_sec = 0xAAAAAAAAAAAAAAAALL;
  v28.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
  *(timespec *)&v38.st_blkstd::string::size_type size = v28;
  *(timespec *)v38.st_qspare = v28;
  v38.st_birthtimespec = v28;
  *(timespec *)&v38.st_std::string::size_type size = v28;
  v38.st_mtimespec = v28;
  v38.st_ctimespec = v28;
  *(timespec *)&v38.st_uid = v28;
  v38.st_atimespec = v28;
  *(timespec *)&v38.st_dev = v28;
  if (*(char *)(v1 + 95) >= 0) {
    float v29 = (const char *)(v1 + 72);
  }
  else {
    float v29 = *(const char **)(v1 + 72);
  }
  if (!stat(v29, &v38)
    && (*(char *)(v1 + 95) >= 0 ? (unint64_t v33 = (const char *)(v1 + 72)) : (unint64_t v33 = *(const char **)(v1 + 72)),
        (v34 = opendir(v33), (v35 = v34) != 0) && (unint64_t v36 = readdir(v34), closedir(v35), v36)))
  {
    CircularFileLogWriter::getFileIndex_sync((CircularFileLogWriter *)v1, (unsigned int *)(v1 + 156), (unsigned int *)(v1 + 152));
  }
  else
  {
    support::fs::createDir((const char *)(v1 + 72), 0x1EDu, 1);
  }
  CircularFileLogWriter::openNewLog_sync((CircularFileLogWriter *)v1);
}

void sub_1C58E1DD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t CircularFileLogWriter::close_sync(CircularFileLogWriter *this)
{
  *((void *)this + 19) = 0;
  uint64_t result = *((void *)this + 5);
  if (!result)
  {
    *((void *)this + 5) = 0;
    return result;
  }
  std::ostream::flush();
  uint64_t v3 = (void *)*((void *)this + 5);
  if (std::filebuf::close())
  {
    uint64_t result = *((void *)this + 5);
    *((void *)this + 5) = 0;
    if (!result) {
      return result;
    }
  }
  else
  {
    std::ios_base::clear((std::ios_base *)((char *)v3 + *(void *)(*v3 - 24)), *(_DWORD *)((char *)v3 + *(void *)(*v3 - 24) + 32) | 4);
    uint64_t result = *((void *)this + 5);
    *((void *)this + 5) = 0;
    if (!result) {
      return result;
    }
  }
  int v4 = *(uint64_t (**)(void))(*(void *)result + 8);

  return v4();
}

void CircularFileLogWriter::getFileIndex_sync(CircularFileLogWriter *this, unsigned int *a2, unsigned int *a3)
{
  *(void *)&long long v6 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v62 = v6;
  long long v63 = v6;
  *(_OWORD *)&v60[0].__locale_ = v6;
  long long v61 = v6;
  v50[23] = 10;
  strcpy(v50, "([0-9]{8})");
  int v7 = *((char *)this + 119);
  if (v7 >= 0) {
    long long v8 = (char *)this + 96;
  }
  else {
    long long v8 = (const std::string::value_type *)*((void *)this + 12);
  }
  if (v7 >= 0) {
    std::string::size_type v9 = *((unsigned __int8 *)this + 119);
  }
  else {
    std::string::size_type v9 = *((void *)this + 13);
  }
  uint64_t v10 = std::string::append((std::string *)v50, v8, v9);
  long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  __str[0].__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__str[0].__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]<std::char_traits<char>,std::allocator<char>>((uint64_t)v60, (uint64_t)__str, 0);
  if (SHIBYTE(__str[0].__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__str[0].__r_.__value_.__l.__data_);
    if ((v50[23] & 0x80000000) == 0) {
      goto LABEL_9;
    }
LABEL_66:
    operator delete(*(void **)v50);
    goto LABEL_9;
  }
  if ((v50[23] & 0x80000000) != 0) {
    goto LABEL_66;
  }
LABEL_9:
  std::string __p = 0;
  std::string::size_type v58 = 0;
  uint64_t v59 = 0;
  support::fs::readDir((const char *)this + 72, (uint64_t)&__p);
  *(void *)&long long v12 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v12 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v51 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v53 = 0xAAAAAAAAAAAAAA00;
  long long v55 = v12;
  uint64_t v52 = 0;
  long long v54 = 0uLL;
  LOBYTE(v55) = 0;
  BYTE8(v55) = 0;
  uint64_t v56 = 0;
  memset(v50, 0, sizeof(v50));
  size_t v13 = (std::sub_match<const char *> *)__p;
  std::string::size_type v14 = v58;
  if (__p == v58)
  {
    *a2 = 0;
    *a3 = 0;
    unint64_t v44 = (std::sub_match<const char *> *)__p;
    if (!__p) {
      goto LABEL_63;
    }
    goto LABEL_68;
  }
  char v47 = a2;
  unsigned int v15 = 0;
  unsigned int v16 = 0;
  char v17 = 1;
  do
  {
    *(void *)&long long v18 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v18 + 1) = 0xAAAAAAAAAAAAAAAALL;
    long long v70 = v18;
    unint64_t v67 = 0xAAAAAAAAAAAAAA00;
    __str[1].__r_.__value_.__r.__words[2] = 0xAAAAAAAAAAAAAAAALL;
    uint64_t v65 = 0;
    uint64_t v66 = 0;
    uint64_t v68 = 0;
    uint64_t v69 = 0;
    LOBYTE(v70) = 0;
    BYTE8(v70) = 0;
    uint64_t v71 = 0;
    memset(__str, 0, 41);
    second = (const char *)*((unsigned __int8 *)&v13->matched + 7);
    if ((char)second >= 0) {
      first = v13;
    }
    else {
      first = (std::sub_match<const char *> *)v13->first;
    }
    if ((char)second < 0) {
      second = v13->second;
    }
    int v21 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>((uint64_t)v60, first, (std::sub_match<const char *> *)&second[(void)first], (std::vector<std::csub_match> *)__str, 0);
    char v22 = (const char *)*((unsigned __int8 *)&v13->matched + 7);
    if ((char)v22 >= 0) {
      uint64_t v23 = (uint64_t)v13;
    }
    else {
      uint64_t v23 = (uint64_t)v13->first;
    }
    if ((char)v22 < 0) {
      char v22 = v13->second;
    }
    std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>((std::vector<std::ssub_match> *)v50, v23, (std::sub_match<std::__wrap_iter<const char *>> *)&v22[v23], (uint64_t *)__str, 0);
    if (__str[0].__r_.__value_.__r.__words[0])
    {
      __str[0].__r_.__value_.__l.__size_ = __str[0].__r_.__value_.__r.__words[0];
      operator delete(__str[0].__r_.__value_.__l.__data_);
    }
    if (v21)
    {
      memset(__str, 170, 24);
      int v24 = &v51;
      if (*(void *)&v50[8] != *(void *)v50) {
        int v24 = (long long *)(*(void *)v50 + 16);
      }
      if (!*(unsigned char *)v24)
      {
        memset(__str, 0, 24);
LABEL_50:
        unsigned int v41 = std::stoul(__str, 0, 10);
        if (v17) {
          unsigned int v42 = v41;
        }
        else {
          unsigned int v42 = v16;
        }
        if (v42 >= v41) {
          unsigned int v16 = v41;
        }
        else {
          unsigned int v16 = v42;
        }
        if (v15 < v41) {
          unsigned int v15 = v41 + 1;
        }
        if (SHIBYTE(__str[0].__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__str[0].__r_.__value_.__l.__data_);
        }
        char v17 = 0;
        goto LABEL_12;
      }
      char v48 = v17;
      unsigned int v49 = v15;
      unsigned int v25 = v16;
      unint64_t v26 = (uint64_t *)&v50[24];
      if (*(void *)&v50[8] != *(void *)v50) {
        unint64_t v26 = *(uint64_t **)v50;
      }
      uint64_t v27 = *v26;
      timespec v28 = (std::string::value_type **)(*(void *)v50 + 8);
      if (*(void *)&v50[8] == *(void *)v50) {
        timespec v28 = (std::string::value_type **)&v50[32];
      }
      float v29 = *v28;
      std::string::size_type v30 = (std::string::size_type)&(*v28)[-v27];
      if (v30 >= 0x7FFFFFFFFFFFFFF8) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      if (v30 > 0x16)
      {
        uint64_t v38 = (v30 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v30 | 7) != 0x17) {
          uint64_t v38 = v30 | 7;
        }
        uint64_t v39 = v38 + 1;
        uint64_t v31 = (std::string *)operator new(v38 + 1);
        __str[0].__r_.__value_.__l.__size_ = v30;
        __str[0].__r_.__value_.__r.__words[2] = v39 | 0x8000000000000000;
        __str[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v31;
        if ((std::string::value_type *)v27 != v29) {
          goto LABEL_36;
        }
      }
      else
      {
        *((unsigned char *)&__str[0].__r_.__value_.__s + 23) = *(unsigned char *)v28 - v27;
        uint64_t v31 = __str;
        if ((std::string::value_type *)v27 != v29)
        {
LABEL_36:
          if (v30 < 0x20 || (unint64_t)v31 - v27 < 0x20)
          {
            unint64_t v32 = v31;
            unint64_t v33 = (std::string::value_type *)v27;
          }
          else
          {
            unint64_t v32 = (std::string *)((char *)v31 + (v30 & 0xFFFFFFFFFFFFFFE0));
            unint64_t v33 = (std::string::value_type *)(v27 + (v30 & 0xFFFFFFFFFFFFFFE0));
            xpc_object_t v34 = (long long *)(v27 + 16);
            int8x8_t v35 = &v31->__r_.__value_.__r.__words[2];
            unint64_t v36 = v30 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              long long v37 = *v34;
              *((_OWORD *)v35 - 1) = *(v34 - 1);
              *(_OWORD *)int8x8_t v35 = v37;
              v34 += 2;
              v35 += 4;
              v36 -= 32;
            }
            while (v36);
            if (v30 == (v30 & 0x7FFFFFFFFFFFFFE0)) {
              goto LABEL_49;
            }
          }
          do
          {
            std::string::value_type v40 = *v33++;
            v32->__r_.__value_.__s.__data_[0] = v40;
            unint64_t v32 = (std::string *)((char *)v32 + 1);
          }
          while (v33 != v29);
LABEL_49:
          v32->__r_.__value_.__s.__data_[0] = 0;
          unsigned int v16 = v25;
          char v17 = v48;
          unsigned int v15 = v49;
          goto LABEL_50;
        }
      }
      unint64_t v32 = v31;
      goto LABEL_49;
    }
LABEL_12:
    ++v13;
  }
  while (v13 != v14);
  uint8x8_t v43 = *(void **)v50;
  unsigned int *v47 = v16;
  *a3 = v15;
  if (v43)
  {
    *(void *)&v50[8] = v43;
    operator delete(v43);
  }
  unint64_t v44 = (std::sub_match<const char *> *)__p;
  if (!__p)
  {
LABEL_63:
    BOOL v45 = (std::__shared_weak_count *)v63;
    if (!(void)v63) {
      goto LABEL_77;
    }
LABEL_75:
    if (!atomic_fetch_add(&v45->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
    goto LABEL_77;
  }
LABEL_68:
  unint64_t v46 = (void **)v58;
  if (v58 == v44)
  {
    std::string::size_type v58 = v44;
    operator delete(v44);
    BOOL v45 = (std::__shared_weak_count *)v63;
    if (!(void)v63) {
      goto LABEL_77;
    }
    goto LABEL_75;
  }
  do
  {
    if (*((char *)v46 - 1) < 0) {
      operator delete(*(v46 - 3));
    }
    v46 -= 3;
  }
  while (v46 != (void **)v44);
  std::string::size_type v58 = v44;
  operator delete(__p);
  BOOL v45 = (std::__shared_weak_count *)v63;
  if ((void)v63) {
    goto LABEL_75;
  }
LABEL_77:
  std::locale::~locale(v60);
}

void sub_1C58E237C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,std::locale a36)
{
}

void CircularFileLogWriter::openNewLog_sync(CircularFileLogWriter *this)
{
  if (!*((void *)this + 5))
  {
    *((void *)this + 5) = 0;
    int v4 = (char *)this + 160;
    size_t v5 = (char *)this + 160;
    if ((*((char *)this + 183) & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_31;
  }
  std::ostream::flush();
  uint64_t v2 = (void *)*((void *)this + 5);
  if (!std::filebuf::close()) {
    std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), *(_DWORD *)((char *)v2 + *(void *)(*v2 - 24) + 32) | 4);
  }
  uint64_t v3 = *((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  int v4 = (char *)this + 160;
  size_t v5 = (char *)this + 160;
  if (*((char *)this + 183) < 0) {
LABEL_31:
  }
    size_t v5 = *(const char **)v4;
LABEL_7:
  unlink(v5);
  uint64_t v6 = *((unsigned int *)this + 38);
  *((_DWORD *)this + 38) = v6 + 1;
  CircularFileLogWriter::generateFileName_sync(this, v6, &v20);
  int v7 = *((char *)this + 95);
  if (v7 >= 0) {
    long long v8 = (char *)this + 72;
  }
  else {
    long long v8 = (const std::string::value_type *)*((void *)this + 9);
  }
  if (v7 >= 0) {
    std::string::size_type v9 = *((unsigned __int8 *)this + 95);
  }
  else {
    std::string::size_type v9 = *((void *)this + 10);
  }
  uint64_t v10 = std::string::insert(&v20, 0, v8, v9);
  long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  std::string::size_type v22 = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v20.__r_.__value_.__l.__data_);
  }
  long long v12 = operator new(0x238uLL);
  uint64_t v13 = MEMORY[0x1E4FBA468] + 64;
  v12[52] = MEMORY[0x1E4FBA468] + 64;
  uint64_t v14 = *(void *)(MEMORY[0x1E4FBA400] + 16);
  uint64_t v15 = *(void *)(MEMORY[0x1E4FBA400] + 8);
  *long long v12 = v15;
  *(void *)((char *)v12 + *(void *)(v15 - 24)) = v14;
  unsigned int v16 = (std::ios_base *)((char *)v12 + *(void *)(*v12 - 24));
  std::ios_base::init(v16, v12 + 1);
  uint64_t v17 = MEMORY[0x1E4FBA468] + 24;
  v16[1].__vftable = 0;
  v16[1].__fmtflags_ = -1;
  *long long v12 = v17;
  v12[52] = v13;
  MEMORY[0x1C8791D20](v12 + 1);
  if (!std::filebuf::open()) {
    std::ios_base::clear((std::ios_base *)((char *)v12 + *(void *)(*v12 - 24)), *(_DWORD *)((char *)v12 + *(void *)(*v12 - 24) + 32) | 4);
  }
  uint64_t v18 = *((void *)this + 5);
  *((void *)this + 5) = v12;
  if (v18)
  {
    (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
    long long v12 = (void *)*((void *)this + 5);
  }
  if (v12[16])
  {
    support::fs::getFileName(&v20);
    if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v19 = &v20;
    }
    else {
      std::string::size_type v19 = (std::string *)v20.__r_.__value_.__r.__words[0];
    }
    if (*((char *)this + 183) < 0) {
      int v4 = *(const char **)v4;
    }
    symlink((const char *)v19, v4);
    if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v20.__r_.__value_.__l.__data_);
    }
  }
  CircularFileLogWriter::clearOldLogs_sync(this);
  if (SHIBYTE(v22) < 0) {
    operator delete(__p[0]);
  }
}

void sub_1C58E2768(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

void CircularFileLogWriter::close(CircularFileLogWriter *this)
{
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 0x40000000;
  v3[2] = ___ZN21CircularFileLogWriter5closeEv_block_invoke;
  v3[3] = &__block_descriptor_tmp_4_0;
  v3[4] = this;
  int v4 = v3;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI21CircularFileLogWriterE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  block[3] = &__block_descriptor_tmp_21_1;
  block[4] = (char *)this + 8;
  block[5] = &v4;
  uint64_t v2 = (char *)this + 24;
  uint64_t v1 = *((void *)this + 3);
  if (*((void *)v2 + 1)) {
    dispatch_async_and_wait(v1, block);
  }
  else {
    dispatch_sync(v1, block);
  }
}

uint64_t ___ZN21CircularFileLogWriter5closeEv_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  *(void *)(v1 + 152) = 0;
  uint64_t result = *(void *)(v1 + 40);
  if (!result)
  {
    *(void *)(v1 + 40) = 0;
    return result;
  }
  std::ostream::flush();
  uint64_t v3 = *(void **)(v1 + 40);
  if (std::filebuf::close())
  {
    uint64_t result = *(void *)(v1 + 40);
    *(void *)(v1 + 40) = 0;
    if (!result) {
      return result;
    }
  }
  else
  {
    std::ios_base::clear((std::ios_base *)((char *)v3 + *(void *)(*v3 - 24)), *(_DWORD *)((char *)v3 + *(void *)(*v3 - 24) + 32) | 4);
    uint64_t result = *(void *)(v1 + 40);
    *(void *)(v1 + 40) = 0;
    if (!result) {
      return result;
    }
  }
  int v4 = *(uint64_t (**)(void))(*(void *)result + 8);

  return v4();
}

void CircularFileLogWriter::clear(CircularFileLogWriter *this)
{
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 0x40000000;
  v3[2] = ___ZN21CircularFileLogWriter5clearEv_block_invoke;
  v3[3] = &__block_descriptor_tmp_5_6;
  v3[4] = this;
  int v4 = v3;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI21CircularFileLogWriterE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  block[3] = &__block_descriptor_tmp_21_1;
  block[4] = (char *)this + 8;
  block[5] = &v4;
  uint64_t v2 = (char *)this + 24;
  uint64_t v1 = *((void *)this + 3);
  if (*((void *)v2 + 1)) {
    dispatch_async_and_wait(v1, block);
  }
  else {
    dispatch_sync(v1, block);
  }
}

uint64_t ___ZN21CircularFileLogWriter5clearEv_block_invoke(uint64_t a1)
{
  return CircularFileLogWriter::clear_sync(*(CircularFileLogWriter **)(a1 + 32));
}

uint64_t CircularFileLogWriter::clear_sync(CircularFileLogWriter *this)
{
  *((void *)this + 19) = 0;
  if (!*((void *)this + 5))
  {
    *((void *)this + 5) = 0;
    goto LABEL_8;
  }
  std::ostream::flush();
  uint64_t v2 = (void *)*((void *)this + 5);
  if (!std::filebuf::close())
  {
    std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), *(_DWORD *)((char *)v2 + *(void *)(*v2 - 24) + 32) | 4);
    uint64_t v3 = *((void *)this + 5);
    *((void *)this + 5) = 0;
    if (!v3) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  uint64_t v3 = *((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v3) {
LABEL_7:
  }
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
LABEL_8:
  int v4 = (const char **)((char *)this + 160);
  if (*((char *)this + 183) < 0)
  {
    unlink(*v4);
    size_t v5 = (char *)this + 72;
  }
  else
  {
    unlink((const char *)v4);
    size_t v5 = (char *)this + 72;
  }
  return support::fs::removeDir(v5);
}

void CircularFileLogWriter::write(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = (uint64_t *)(a1 + 8);
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 1174405120;
  v7[2] = ___ZN21CircularFileLogWriter5writeENSt3__110shared_ptrIN3ctu10LogMessageEEE_block_invoke;
  v7[3] = &__block_descriptor_tmp_6_9;
  uint64_t v5 = *a2;
  int v4 = (std::__shared_weak_count *)a2[1];
  v7[4] = a1;
  v7[5] = v5;
  long long v8 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  ctu::SharedSynchronizable<CircularFileLogWriter>::execute_wrapped(v3, (uint64_t)v7);
  uint64_t v6 = v8;
  if (v8)
  {
    if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void ___ZN21CircularFileLogWriter5writeENSt3__110shared_ptrIN3ctu10LogMessageEEE_block_invoke(void *a1)
{
  uint64_t v2 = a1[4];
  uint64_t v3 = (std::__shared_weak_count *)a1[6];
  v4[0] = a1[5];
  v4[1] = (uint64_t)v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  CircularFileLogWriter::write_sync(v2, v4);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
}

void sub_1C58E2CEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t CircularFileLogWriter::write_sync(uint64_t result, uint64_t *a2)
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *a2;
  if (!*a2) {
    return result;
  }
  uint64_t v3 = (CircularFileLogWriter *)result;
  uint64_t v4 = *(void *)(result + 40);
  if (!v4 || !*(void *)(v4 + 128)) {
    return result;
  }
  if (*(char *)(v2 + 71) < 0)
  {
    unint64_t v6 = *(void *)(v2 + 56) + 1;
    if (v6 < 2) {
      return result;
    }
  }
  else
  {
    unint64_t v6 = *(unsigned __int8 *)(v2 + 71) + 1;
    if (v6 < 2) {
      return result;
    }
  }
  unint64_t v43 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v7 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v42[7] = v7;
  v42[8] = v7;
  v42[5] = v7;
  v42[6] = v7;
  v42[3] = v7;
  v42[4] = v7;
  v42[1] = v7;
  v42[2] = v7;
  long long v41 = v7;
  v42[0] = v7;
  *(_OWORD *)std::string __p = v7;
  long long v40 = v7;
  long long v37 = v7;
  long long v38 = v7;
  long long v35 = v7;
  long long v36 = v7;
  long long v34 = v7;
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v34);
  uint64_t v8 = v35;
  *(_DWORD *)((char *)&v35 + *(void *)(v35 - 24) + 8) |= 4u;
  *(void *)((char *)&v35 + *(void *)(v8 - 24) + 16) = 3;
  std::string::size_type v9 = (void *)std::ostream::operator<<();
  uint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" [", 2);
  LOBYTE(__dst.__locale_) = ctu::asChar();
  long long v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)&__dst, 1);
  long long v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"] ", 2);
  int v13 = *(char *)(*a2 + 47);
  if (v13 >= 0) {
    uint64_t v14 = *a2 + 24;
  }
  else {
    uint64_t v14 = *(void *)(*a2 + 24);
  }
  if (v13 >= 0) {
    uint64_t v15 = *(unsigned __int8 *)(*a2 + 47);
  }
  else {
    uint64_t v15 = *(void *)(*a2 + 32);
  }
  unsigned int v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, v14, v15);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)": ", 2);
  uint64_t v17 = (char *)&v35 + *(void *)(v35 - 24);
  if ((v17[32] & 5) != 0)
  {
    unint64_t v18 = v6 - 1;
    unint64_t v19 = *((void *)v3 + 16);
    if (v6 - 1 > v19) {
      goto LABEL_52;
    }
LABEL_18:
    uint64_t v20 = *((void *)v3 + 5) + *(void *)(**((void **)v3 + 5) - 24);
    if ((*(unsigned char *)(v20 + 32) & 5) != 0)
    {
      if (v18 - 1 <= v19)
      {
LABEL_23:
        if (*(char *)(*a2 + 71) < 0)
        {
          if (*(void *)(*a2 + 56)) {
            goto LABEL_27;
          }
        }
        else if (*(unsigned char *)(*a2 + 71))
        {
LABEL_27:
          int v21 = (void *)*((void *)v3 + 5);
          char v22 = BYTE8(v41);
          if ((BYTE8(v41) & 0x10) == 0)
          {
LABEL_28:
            if ((v22 & 8) == 0)
            {
              size_t v23 = 0;
              HIBYTE(v46) = 0;
              p_dst = (std::locale::__imp *)&__dst;
              goto LABEL_43;
            }
            unint64_t v26 = (const void **)&v36 + 1;
            uint64_t v25 = *((void *)&v37 + 1);
LABEL_35:
            uint64_t v27 = *v26;
            size_t v23 = v25 - (void)*v26;
            if (v23 >= 0x7FFFFFFFFFFFFFF8) {
              std::string::__throw_length_error[abi:ne180100]();
            }
            if (v23 >= 0x17)
            {
              uint64_t v28 = (v23 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v23 | 7) != 0x17) {
                uint64_t v28 = v23 | 7;
              }
              uint64_t v29 = v28 + 1;
              p_dst = (std::locale::__imp *)operator new(v28 + 1);
              size_t v45 = v23;
              int64_t v46 = v29 | 0x8000000000000000;
              __dst.__locale_ = p_dst;
            }
            else
            {
              HIBYTE(v46) = v25 - *(unsigned char *)v26;
              p_dst = (std::locale::__imp *)&__dst;
              if (!v23) {
                goto LABEL_43;
              }
            }
            memmove(p_dst, v27, v23);
LABEL_43:
            *((unsigned char *)p_dst + v23) = 0;
            if (v46 >= 0) {
              locale = (std::locale::__imp *)&__dst;
            }
            else {
              locale = __dst.__locale_;
            }
            if (v46 >= 0) {
              uint64_t v31 = HIBYTE(v46);
            }
            else {
              uint64_t v31 = v45;
            }
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)locale, v31);
            if (SHIBYTE(v46) < 0) {
              operator delete(__dst.__locale_);
            }
            std::ostream::write();
            std::ios_base::getloc((const std::ios_base *)(*((void *)v3 + 5) + *(void *)(**((void **)v3 + 5) - 24)));
            unint64_t v32 = std::locale::use_facet(&__dst, MEMORY[0x1E4FBA258]);
            ((void (*)(const std::locale::facet *, uint64_t))v32->__vftable[2].~facet_0)(v32, 10);
            std::locale::~locale(&__dst);
            std::ostream::put();
            std::ostream::flush();
            goto LABEL_52;
          }
LABEL_31:
          uint64_t v25 = v41;
          if ((unint64_t)v41 < *((void *)&v38 + 1))
          {
            *(void *)&long long v41 = *((void *)&v38 + 1);
            uint64_t v25 = *((void *)&v38 + 1);
          }
          unint64_t v26 = (const void **)&v38;
          goto LABEL_35;
        }
        int v21 = (void *)*((void *)v3 + 5);
        char v22 = BYTE8(v41);
        if ((BYTE8(v41) & 0x10) == 0) {
          goto LABEL_28;
        }
        goto LABEL_31;
      }
    }
    else
    {
      (*(void (**)(std::locale *__return_ptr))(**(void **)(v20 + 40) + 32))(&__dst);
      if (v47 + v18 <= *((void *)v3 + 16)) {
        goto LABEL_23;
      }
    }
    CircularFileLogWriter::openNewLog_sync(v3);
    goto LABEL_23;
  }
  (*(void (**)(std::locale *__return_ptr))(**((void **)v17 + 5) + 32))(&__dst);
  unint64_t v18 = v47 + v6;
  unint64_t v19 = *((void *)v3 + 16);
  if (v47 + v6 <= v19) {
    goto LABEL_18;
  }
LABEL_52:
  *(void *)&long long v34 = *MEMORY[0x1E4FBA408];
  uint64_t v33 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)&v34 + *(void *)(v34 - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  *(void *)&long long v35 = v33;
  *((void *)&v35 + 1) = MEMORY[0x1E4FBA470] + 16;
  if (SHIBYTE(v40) < 0) {
    operator delete(__p[1]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1C8791FB0](v42);
}

void sub_1C58E331C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1C58E3330(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1C58E3344(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1C58E3358(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (*(char *)(v9 - 217) < 0)
  {
    operator delete(*(void **)(v9 - 240));
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a9);
    _Unwind_Resume(a1);
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_40c44_ZTSNSt3__110shared_ptrIN3ctu10LogMessageEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c44_ZTSNSt3__110shared_ptrIN3ctu10LogMessageEEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void CircularFileLogWriter::write(CircularFileLogWriter *this, const char *a2, uint64_t a3)
{
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 0x40000000;
  v5[2] = ___ZN21CircularFileLogWriter5writeEPKcm_block_invoke;
  v5[3] = &__block_descriptor_tmp_7_0;
  v5[4] = this;
  v5[5] = a2;
  v5[6] = a3;
  unint64_t v6 = v5;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI21CircularFileLogWriterE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  block[3] = &__block_descriptor_tmp_21_1;
  block[4] = (char *)this + 8;
  block[5] = &v6;
  uint64_t v4 = (char *)this + 24;
  uint64_t v3 = *((void *)this + 3);
  if (*((void *)v4 + 1)) {
    dispatch_async_and_wait(v3, block);
  }
  else {
    dispatch_sync(v3, block);
  }
}

uint64_t ___ZN21CircularFileLogWriter5writeEPKcm_block_invoke(uint64_t a1)
{
  return CircularFileLogWriter::write_sync(*(void *)(a1 + 32), *(const char **)(a1 + 40), *(void *)(a1 + 48));
}

uint64_t CircularFileLogWriter::write_sync(uint64_t this, const char *a2, uint64_t a3)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    uint64_t v3 = a3;
    if (a3)
    {
      uint64_t v4 = (CircularFileLogWriter *)this;
      uint64_t v5 = *(void **)(this + 40);
      if (v5)
      {
        if (v5[16])
        {
          unint64_t v6 = a2;
          if (*(unsigned char *)(this + 136))
          {
            while (1)
            {
              uint64_t v9 = (char *)v5 + *(void *)(*v5 - 24);
              if ((v9[32] & 5) != 0)
              {
                unint64_t v10 = *((void *)v4 + 16);
                if (v3 - 1 <= v10) {
                  goto LABEL_20;
                }
              }
              else
              {
                (*(void (**)(void *__return_ptr))(**((void **)v9 + 5) + 32))(v13);
                unint64_t v10 = *((void *)v4 + 16);
                if (v14 + v3 <= v10) {
                  goto LABEL_20;
                }
              }
              uint64_t v11 = *((void *)v4 + 5) + *(void *)(**((void **)v4 + 5) - 24);
              if ((*(unsigned char *)(v11 + 32) & 5) != 0) {
                break;
              }
              (*(void (**)(void *__return_ptr))(**(void **)(v11 + 40) + 32))(v13);
              uint64_t v7 = v14;
              if (v10 != v14) {
                goto LABEL_8;
              }
LABEL_9:
              CircularFileLogWriter::openNewLog_sync(v4);
              uint64_t v5 = (void *)*((void *)v4 + 5);
            }
            uint64_t v7 = -1;
LABEL_8:
            unint64_t v8 = v10 - v7;
            std::ostream::write();
            v6 += v8;
            v3 -= v8;
            goto LABEL_9;
          }
          long long v12 = (char *)v5 + *(void *)(*v5 - 24);
          if ((v12[32] & 5) != 0)
          {
            if ((unint64_t)(a3 - 1) <= *(void *)(this + 128)) {
              goto LABEL_20;
            }
          }
          else
          {
            (*(void (**)(void *__return_ptr))(**((void **)v12 + 5) + 32))(v13);
            if ((unint64_t)(v14 + v3) <= *((void *)v4 + 16))
            {
LABEL_20:
              this = *((void *)v4 + 5);
              if (this) {
                return std::ostream::write();
              }
              return this;
            }
          }
          CircularFileLogWriter::openNewLog_sync(v4);
          goto LABEL_20;
        }
      }
    }
  }
  return this;
}

void CircularFileLogWriter::setCapacity(CircularFileLogWriter *this, uint64_t a2)
{
  v2[0] = MEMORY[0x1E4F143A8];
  v2[1] = 0x40000000;
  v2[2] = ___ZN21CircularFileLogWriter11setCapacityEm_block_invoke;
  v2[3] = &__block_descriptor_tmp_8_0;
  v2[4] = this;
  v2[5] = a2;
  ctu::SharedSynchronizable<CircularFileLogWriter>::execute_wrapped((uint64_t *)this + 1, (uint64_t)v2);
}

void ___ZN21CircularFileLogWriter11setCapacityEm_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(CircularFileLogWriter **)(a1 + 32);
  unint64_t v2 = *(void *)(a1 + 40);
  *((void *)v1 + 15) = v2;
  *((void *)v1 + 18) = v2 / *((void *)v1 + 16);
  CircularFileLogWriter::clearOldLogs_sync(v1);
}

void CircularFileLogWriter::clearOldLogs_sync(CircularFileLogWriter *this)
{
  unsigned int v1 = *((_DWORD *)this + 39);
  if (*((void *)this + 18) < (unint64_t)(*((_DWORD *)this + 38) - v1))
  {
    uint64_t v3 = (char *)this + 72;
    do
    {
      *((_DWORD *)this + 39) = v1 + 1;
      CircularFileLogWriter::generateFileName_sync(this, v1, &v12);
      int v4 = *((char *)this + 95);
      if (v4 >= 0) {
        uint64_t v5 = v3;
      }
      else {
        uint64_t v5 = (const std::string::value_type *)*((void *)this + 9);
      }
      if (v4 >= 0) {
        std::string::size_type v6 = *((unsigned __int8 *)this + 95);
      }
      else {
        std::string::size_type v6 = *((void *)this + 10);
      }
      uint64_t v7 = std::string::insert(&v12, 0, v5, v6);
      std::string v13 = *v7;
      v7->__r_.__value_.__l.__size_ = 0;
      v7->__r_.__value_.__r.__words[2] = 0;
      v7->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v12.__r_.__value_.__l.__data_);
      }
      int v9 = SHIBYTE(v13.__r_.__value_.__r.__words[2]);
      unint64_t v10 = (void *)v13.__r_.__value_.__r.__words[0];
      if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v11 = (const std::__fs::filesystem::path *)&v13;
      }
      else {
        uint64_t v11 = (const std::__fs::filesystem::path *)v13.__r_.__value_.__r.__words[0];
      }
      if (remove(v11, v8)) {
        unlink((const char *)v11);
      }
      if (v9 < 0) {
        operator delete(v10);
      }
      unsigned int v1 = *((_DWORD *)this + 39);
    }
    while (*((void *)this + 18) < (unint64_t)(*((_DWORD *)this + 38) - v1));
  }
}

void sub_1C58E3944(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t CircularFileLogWriter::closeRunningLog_sync(CircularFileLogWriter *this)
{
  uint64_t result = *((void *)this + 5);
  if (!result)
  {
    *((void *)this + 5) = 0;
    return result;
  }
  std::ostream::flush();
  uint64_t v3 = (void *)*((void *)this + 5);
  if (std::filebuf::close())
  {
    uint64_t result = *((void *)this + 5);
    *((void *)this + 5) = 0;
    if (!result) {
      return result;
    }
  }
  else
  {
    std::ios_base::clear((std::ios_base *)((char *)v3 + *(void *)(*v3 - 24)), *(_DWORD *)((char *)v3 + *(void *)(*v3 - 24) + 32) | 4);
    uint64_t result = *((void *)this + 5);
    *((void *)this + 5) = 0;
    if (!result) {
      return result;
    }
  }
  int v4 = *(uint64_t (**)(void))(*(void *)result + 8);

  return v4();
}

void CircularFileLogWriter::generateFileName_sync(CircularFileLogWriter *this@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  *(void *)&long long v5 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v27 = v5;
  long long v28 = v5;
  *(_OWORD *)__s = v5;
  long long v26 = v5;
  sprintf(__s, "%08zu", a2);
  int v6 = *((char *)this + 71);
  if (v6 >= 0) {
    size_t v7 = *((unsigned __int8 *)this + 71);
  }
  else {
    size_t v7 = *((void *)this + 7);
  }
  unint64_t v8 = v7 + 1;
  memset(&__dst, 170, sizeof(__dst));
  if (v7 + 1 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v8 >= 0x17)
  {
    uint64_t v10 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17) {
      uint64_t v10 = v8 | 7;
    }
    uint64_t v11 = v10 + 1;
    p_dst = (std::string *)operator new(v10 + 1);
    __dst.__r_.__value_.__l.__size_ = v7 + 1;
    __dst.__r_.__value_.__r.__words[2] = v11 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  }
  else
  {
    memset(&__dst, 0, sizeof(__dst));
    p_dst = &__dst;
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v7 + 1;
    if (!v7) {
      goto LABEL_15;
    }
  }
  if (v6 >= 0) {
    std::string v12 = (char *)this + 48;
  }
  else {
    std::string v12 = (char *)*((void *)this + 6);
  }
  memmove(p_dst, v12, v7);
LABEL_15:
  *(_WORD *)((char *)&p_dst->__r_.__value_.__l.__data_ + v7) = 46;
  size_t v13 = strlen(__s);
  uint64_t v14 = std::string::append(&__dst, __s, v13);
  long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v24.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v24.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  unint64_t v18 = (const std::string::value_type *)*((void *)this + 12);
  uint64_t v17 = (char *)this + 96;
  unsigned int v16 = v18;
  int v19 = v17[23];
  if (v19 >= 0) {
    uint64_t v20 = v17;
  }
  else {
    uint64_t v20 = v16;
  }
  if (v19 >= 0) {
    std::string::size_type v21 = v17[23];
  }
  else {
    std::string::size_type v21 = *((void *)v17 + 1);
  }
  char v22 = std::string::append(&v24, v20, v21);
  *a3 = *v22;
  v22->__r_.__value_.__l.__size_ = 0;
  v22->__r_.__value_.__r.__words[2] = 0;
  v22->__r_.__value_.__r.__words[0] = 0;
  if ((SHIBYTE(v24.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
LABEL_25:
    operator delete(__dst.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(v24.__r_.__value_.__l.__data_);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_25;
  }
}

void sub_1C58E3C10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void CircularFileLogWriter::~CircularFileLogWriter(void **this)
{
  CircularFileLogWriter::~CircularFileLogWriter(this);

  operator delete(v1);
}

{
  void *v2;
  NSObject *v3;
  NSObject *v4;
  std::__shared_weak_count *v5;

  *this = &unk_1F20FBA80;
  if (*((char *)this + 183) < 0)
  {
    operator delete(this[20]);
    if ((*((char *)this + 119) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*((char *)this + 95) & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_16;
    }
  }
  else if ((*((char *)this + 119) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(this[12]);
  if ((*((char *)this + 95) & 0x80000000) == 0)
  {
LABEL_4:
    if ((*((char *)this + 71) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_17;
  }
LABEL_16:
  operator delete(this[9]);
  if ((*((char *)this + 71) & 0x80000000) == 0)
  {
LABEL_5:
    unint64_t v2 = this[5];
    this[5] = 0;
    if (!v2) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
LABEL_17:
  operator delete(this[6]);
  unint64_t v2 = this[5];
  this[5] = 0;
  if (v2) {
LABEL_6:
  }
    (*(void (**)(void *))(*(void *)v2 + 8))(v2);
LABEL_7:
  uint64_t v3 = this[4];
  if (v3) {
    dispatch_release(v3);
  }
  int v4 = this[3];
  if (v4) {
    dispatch_release(v4);
  }
  long long v5 = (std::__shared_weak_count *)this[2];
  if (v5) {
    std::__shared_weak_count::__release_weak(v5);
  }
}

void std::__shared_ptr_pointer<CircularFileLogWriter *,std::shared_ptr<CircularFileLogWriter> ctu::SharedSynchronizable<CircularFileLogWriter>::make_shared_ptr<CircularFileLogWriter>(CircularFileLogWriter*)::{lambda(CircularFileLogWriter *)#1},std::allocator<CircularFileLogWriter>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<CircularFileLogWriter *,std::shared_ptr<CircularFileLogWriter> ctu::SharedSynchronizable<CircularFileLogWriter>::make_shared_ptr<CircularFileLogWriter>(CircularFileLogWriter*)::{lambda(CircularFileLogWriter *)#1},std::allocator<CircularFileLogWriter>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<CircularFileLogWriter *,std::shared_ptr<CircularFileLogWriter> ctu::SharedSynchronizable<CircularFileLogWriter>::make_shared_ptr<CircularFileLogWriter>(CircularFileLogWriter*)::{lambda(CircularFileLogWriter *)#1},std::allocator<CircularFileLogWriter>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableI21CircularFileLogWriterE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_") {
    return a1 + 24;
  }
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableI21CircularFileLogWriterE15make_shared_ptrIS1_EENSt3__110sha"
                                "red_ptrIT_EEPS6_EUlPS1_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableI21CircularFileLogWriterE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableI21CircularFileLogWriterE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24; {
  return 0;
  }
}

uint64_t std::shared_ptr<CircularFileLogWriter> ctu::SharedSynchronizable<CircularFileLogWriter>::make_shared_ptr<CircularFileLogWriter>(CircularFileLogWriter*)::{lambda(CircularFileLogWriter*)#1}::operator() const(CircularFileLogWriter*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void *___ZNK3ctu20SharedSynchronizableI21CircularFileLogWriterE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke(uint64_t a1)
{
  return (*(void *(**)(void *__return_ptr))(**(void **)(a1 + 40) + 16))(*(void **)(a1 + 40));
}

void ctu::SharedSynchronizable<CircularFileLogWriter>::execute_wrapped(uint64_t *a1, uint64_t a2)
{
  unint64_t v3 = (std::__shared_weak_count *)a1[1];
  if (!v3 || (uint64_t v5 = *a1, (v6 = std::__shared_weak_count::lock(v3)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  size_t v7 = v6;
  unint64_t v8 = a1[2];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 1174405120;
  block[2] = ___ZNK3ctu20SharedSynchronizableI21CircularFileLogWriterE15execute_wrappedEU13block_pointerFvvE_block_invoke;
  block[3] = &unk_1F20FBBB8;
  block[5] = v5;
  std::string v12 = v7;
  p_shared_owners = &v7->__shared_owners_;
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  block[4] = a2;
  dispatch_async(v8, block);
  uint64_t v10 = v12;
  if (!v12 || atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      return;
    }
LABEL_8:
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    return;
  }
  ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
  std::__shared_weak_count::__release_weak(v10);
  if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_8;
  }
}

uint64_t ___ZNK3ctu20SharedSynchronizableI21CircularFileLogWriterE15execute_wrappedEU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t __copy_helper_block_e8_40c50_ZTSNSt3__110shared_ptrIK21CircularFileLogWriterEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c50_ZTSNSt3__110shared_ptrIK21CircularFileLogWriterEE(uint64_t a1)
{
  unsigned int v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void CMHandDetectionDelegate::create(NSObject **a1@<X0>, NSObject **a2@<X1>, void *a3@<X8>)
{
  pthread_mutex_lock(&ctu::Singleton<Capabilities,Capabilities,ctu::PthreadMutexGuardPolicy<Capabilities>>::sInstance);
  int v6 = qword_1EBBDD070;
  if (!qword_1EBBDD070)
  {
    size_t v7 = operator new(1uLL);
    unint64_t v8 = operator new(0x20uLL);
    *unint64_t v8 = &unk_1F20F7BD0;
    v8[1] = 0;
    v8[2] = 0;
    v8[3] = v7;
    int v9 = (std::__shared_weak_count *)off_1EBBDD078;
    qword_1EBBDD070 = (uint64_t)v7;
    off_1EBBDD078 = v8;
    if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
    int v6 = qword_1EBBDD070;
  }
  uint64_t v10 = (std::__shared_weak_count *)off_1EBBDD078;
  v17[0] = v6;
  v17[1] = (dispatch_object_t)off_1EBBDD078;
  if (off_1EBBDD078) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)off_1EBBDD078 + 1, 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<Capabilities,Capabilities,ctu::PthreadMutexGuardPolicy<Capabilities>>::sInstance);
  char isCMHandDetectionSupported = Capabilities::isCMHandDetectionSupported((Capabilities *)v6);
  char v12 = isCMHandDetectionSupported;
  if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
    if (v12) {
      goto LABEL_11;
    }
LABEL_21:
    *a3 = 0;
    a3[1] = 0;
    return;
  }
  if ((isCMHandDetectionSupported & 1) == 0) {
    goto LABEL_21;
  }
LABEL_11:
  *a3 = 0xAAAAAAAAAAAAAAAALL;
  a3[1] = 0xAAAAAAAAAAAAAAAALL;
  size_t v13 = operator new(0x28uLL);
  v13[1] = 0;
  v13[2] = 0;
  void *v13 = &unk_1F20FBC78;
  uint64_t v14 = v13 + 3;
  long long v15 = *a1;
  v17[0] = v15;
  if (v15) {
    dispatch_retain(v15);
  }
  unsigned int v16 = *a2;
  unint64_t v18 = v16;
  if (v16) {
    dispatch_retain(v16);
  }
  CMHandDetectionDelegate::CMHandDetectionDelegate(v14, v17, &v18);
  if (v16) {
    dispatch_release(v16);
  }
  if (v15) {
    dispatch_release(v15);
  }
  *a3 = v14;
  a3[1] = v13;
}

void sub_1C58E4310(_Unwind_Exception *a1)
{
  operator delete(v1);
  pthread_mutex_unlock(&ctu::Singleton<Capabilities,Capabilities,ctu::PthreadMutexGuardPolicy<Capabilities>>::sInstance);
  _Unwind_Resume(a1);
}

void sub_1C58E433C(_Unwind_Exception *a1)
{
  if (v1)
  {
    dispatch_release(v1);
    if (!v2)
    {
LABEL_3:
      std::__shared_weak_count::~__shared_weak_count(v3);
      operator delete(v5);
      _Unwind_Resume(a1);
    }
  }
  else if (!v2)
  {
    goto LABEL_3;
  }
  dispatch_release(v2);
  std::__shared_weak_count::~__shared_weak_count(v3);
  operator delete(v6);
  _Unwind_Resume(a1);
}

void sub_1C58E4384(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void *CMHandDetectionDelegate::CMHandDetectionDelegate(void *a1, dispatch_object_t *a2, NSObject **a3)
{
  uint64_t v5 = *a2;
  if (*a2) {
    dispatch_retain(*a2);
  }
  int v6 = *a3;
  if (v6) {
    dispatch_retain(v6);
  }
  *a1 = 0;
  a1[1] = 0;
  if ([MEMORY[0x1E4F221C0] isCallHandednessAvailable])
  {
    size_t v7 = operator new(0x40uLL);
    if (v5) {
      dispatch_retain(v5);
    }
    if (v6) {
      dispatch_retain(v6);
    }
    *(void *)size_t v7 = 0;
    *((void *)v7 + 1) = 0;
    *((void *)v7 + 2) = v5;
    if (v5) {
      dispatch_retain(v5);
    }
    *((void *)v7 + 3) = v6;
    if (v6) {
      dispatch_retain(v6);
    }
    *((void *)v7 + 4) = 0;
    *((void *)v7 + 6) = 0;
    *((unsigned char *)v7 + 56) = 0;
    *((void *)v7 + 4) = objc_alloc_init(MEMORY[0x1E4F221C0]);
    unint64_t v8 = (std::__shared_weak_count *)operator new(0x20uLL);
    v8->__shared_owners_ = 0;
    p_shared_owners = &v8->__shared_owners_;
    v8->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20FBBF8;
    v8->__shared_weak_owners_ = 0;
    v8[1].__vftable = (std::__shared_weak_count_vtbl *)v7;
    uint64_t v10 = (std::__shared_weak_count *)*((void *)v7 + 1);
    if (v10)
    {
      if (v10->__shared_owners_ != -1) {
        goto LABEL_20;
      }
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      *(void *)size_t v7 = v7;
      *((void *)v7 + 1) = v8;
      std::__shared_weak_count::__release_weak(v10);
      if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
        goto LABEL_20;
      }
    }
    else
    {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      *(void *)size_t v7 = v7;
      *((void *)v7 + 1) = v8;
      if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL))
      {
LABEL_20:
        *a1 = v7;
        a1[1] = v8;
        if (v6) {
          dispatch_release(v6);
        }
        if (v5) {
          dispatch_release(v5);
        }
        goto LABEL_24;
      }
    }
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    goto LABEL_20;
  }
LABEL_24:
  if (v6) {
    dispatch_release(v6);
  }
  if (v5) {
    dispatch_release(v5);
  }
  return a1;
}

void sub_1C58E4564(void *a1)
{
  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[2], v1, (dispatch_function_t)std::shared_ptr<CMHandDetectionHandler> ctu::SharedSynchronizable<CMHandDetectionHandler>::make_shared_ptr<CMHandDetectionHandler>(CMHandDetectionHandler*)::{lambda(CMHandDetectionHandler*)#1}::operator() const(CMHandDetectionHandler*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_1C58E458C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  if (v3)
  {
    dispatch_release(v3);
    if (!v1) {
      goto LABEL_3;
    }
  }
  else if (!v1)
  {
    goto LABEL_3;
  }
  dispatch_release(v1);
LABEL_3:
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v2);
  if (v3)
  {
    dispatch_release(v3);
    if (!v1) {
LABEL_5:
    }
      _Unwind_Resume(a1);
  }
  else if (!v1)
  {
    goto LABEL_5;
  }
  dispatch_release(v1);
  _Unwind_Resume(a1);
}

void CMHandDetectionDelegate::~CMHandDetectionDelegate(CMHandDetectionDelegate *this)
{
  unsigned int v1 = (std::__shared_weak_count *)*((void *)this + 1);
  if (v1)
  {
    if (!atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

{
  std::__shared_weak_count *v1;

  unsigned int v1 = (std::__shared_weak_count *)*((void *)this + 1);
  if (v1)
  {
    if (!atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

uint64_t CMHandDetectionDelegate::isSupported(CMHandDetectionDelegate *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBBDD5E8, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_1EBBDD5E8))
  {
    return _MergedGlobals_10;
  }
  pthread_mutex_lock(&ctu::Singleton<Capabilities,Capabilities,ctu::PthreadMutexGuardPolicy<Capabilities>>::sInstance);
  uint64_t v2 = (Capabilities *)qword_1EBBDD070;
  if (!qword_1EBBDD070)
  {
    Capabilities::create_default_global(&v6);
    std::shared_ptr<Capabilities>::operator=[abi:ne180100](&v6);
    std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&v6);
    uint64_t v2 = (Capabilities *)qword_1EBBDD070;
  }
  int v4 = v2;
  uint64_t v5 = off_1EBBDD078;
  if (off_1EBBDD078) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)off_1EBBDD078 + 1, 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<Capabilities,Capabilities,ctu::PthreadMutexGuardPolicy<Capabilities>>::sInstance);
  if (Capabilities::isCMHandDetectionSupported(v2)) {
    char v3 = [MEMORY[0x1E4F221C0] isCallHandednessAvailable:v4, v5];
  }
  else {
    char v3 = 0;
  }
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&v4);
  _MergedGlobals_10 = v3;
  __cxa_guard_release(&qword_1EBBDD5E8);
  return _MergedGlobals_10;
}

void sub_1C58E4838(_Unwind_Exception *a1)
{
}

void CMHandDetectionDelegate::start(uint64_t **this)
{
  ctu::SharedSynchronizable<CMHandDetectionHandler>::execute_wrapped<CMHandDetectionHandler::start(void)::{lambda(void)#1}>(*this, &v1);
}

void CMHandDetectionDelegate::stop(uint64_t **this)
{
  ctu::SharedSynchronizable<CMHandDetectionHandler>::execute_wrapped<CMHandDetectionHandler::stop(void)::{lambda(void)#1}>(*this, &v1);
}

void CMHandDetectionDelegate::registerCallback(uint64_t **a1, const void **a2)
{
  uint64_t v2 = *a1;
  if (!*a2)
  {
    int v4 = 0;
    size_t v7 = *a1;
LABEL_6:
    char v5 = 1;
    aBlock = 0;
    ctu::SharedSynchronizable<CMHandDetectionHandler>::execute_wrapped<CMHandDetectionHandler::registerCallback(dispatch::block<void({block_pointer})(CMHandDetectionDelegate::CMHandDetectionResult)>)::{lambda(void)#1}>(v2, (uint64_t)&v7);
    long long v6 = aBlock;
    if (!aBlock) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  char v3 = _Block_copy(*a2);
  int v4 = v3;
  size_t v7 = v2;
  if (!v3) {
    goto LABEL_6;
  }
  char v5 = 0;
  aBlock = _Block_copy(v3);
  ctu::SharedSynchronizable<CMHandDetectionHandler>::execute_wrapped<CMHandDetectionHandler::registerCallback(dispatch::block<void({block_pointer})(CMHandDetectionDelegate::CMHandDetectionResult)>)::{lambda(void)#1}>(v2, (uint64_t)&v7);
  long long v6 = aBlock;
  if (aBlock) {
LABEL_7:
  }
    _Block_release(v6);
LABEL_8:
  if ((v5 & 1) == 0) {
    _Block_release(v4);
  }
}

void CMHandDetectionDelegate::shutdown(uint64_t **this)
{
  ctu::SharedSynchronizable<CMHandDetectionHandler>::execute_wrapped<CMHandDetectionHandler::shutdown(void)::{lambda(void)#1}>(*this, &v1);
}

const char *CMHandDetectionDelegate::toString(unsigned int a1)
{
  if (a1 > 2) {
    return "Unknown Hand Detection";
  }
  else {
    return off_1E6517F60[a1];
  }
}

void std::__shared_ptr_pointer<CMHandDetectionHandler *,std::shared_ptr<CMHandDetectionHandler> ctu::SharedSynchronizable<CMHandDetectionHandler>::make_shared_ptr<CMHandDetectionHandler>(CMHandDetectionHandler*)::{lambda(CMHandDetectionHandler *)#1},std::allocator<CMHandDetectionHandler>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<CMHandDetectionHandler *,std::shared_ptr<CMHandDetectionHandler> ctu::SharedSynchronizable<CMHandDetectionHandler>::make_shared_ptr<CMHandDetectionHandler>(CMHandDetectionHandler*)::{lambda(CMHandDetectionHandler *)#1},std::allocator<CMHandDetectionHandler>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<CMHandDetectionHandler *,std::shared_ptr<CMHandDetectionHandler> ctu::SharedSynchronizable<CMHandDetectionHandler>::make_shared_ptr<CMHandDetectionHandler>(CMHandDetectionHandler*)::{lambda(CMHandDetectionHandler *)#1},std::allocator<CMHandDetectionHandler>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableI22CMHandDetectionHandlerE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_") {
    return a1 + 24;
  }
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableI22CMHandDetectionHandlerE15make_shared_ptrIS1_EENSt3__110sh"
                                "ared_ptrIT_EEPS6_EUlPS1_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableI22CMHandDetectionHandlerE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableI22CMHandDetectionHandlerE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24; {
  return 0;
  }
}

void std::shared_ptr<CMHandDetectionHandler> ctu::SharedSynchronizable<CMHandDetectionHandler>::make_shared_ptr<CMHandDetectionHandler>(CMHandDetectionHandler*)::{lambda(CMHandDetectionHandler*)#1}::operator() const(CMHandDetectionHandler*)::{lambda(void *)#1}::__invoke(void *__p)
{
  if (__p)
  {
    uint64_t v2 = (const void *)__p[6];
    if (v2) {
      _Block_release(v2);
    }
    unint64_t v3 = __p[3];
    if (v3) {
      dispatch_release(v3);
    }
    int v4 = __p[2];
    if (v4) {
      dispatch_release(v4);
    }
    char v5 = (std::__shared_weak_count *)__p[1];
    if (v5) {
      std::__shared_weak_count::__release_weak(v5);
    }
    operator delete(__p);
  }
}

void ctu::SharedSynchronizable<CMHandDetectionHandler>::execute_wrapped<CMHandDetectionHandler::start(void)::{lambda(void)#1}>(uint64_t *a1, void *a2)
{
  unint64_t v3 = (std::__shared_weak_count *)a1[1];
  if (!v3 || (uint64_t v5 = *a1, (v6 = std::__shared_weak_count::lock(v3)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  size_t v7 = v6;
  unint64_t v8 = operator new(8uLL);
  *unint64_t v8 = *a2;
  int v9 = a1[2];
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v10 = operator new(0x18uLL);
  void *v10 = v8;
  v10[1] = v5;
  v10[2] = v7;
  dispatch_async_f(v9, v10, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<CMHandDetectionHandler>::execute_wrapped<CMHandDetectionHandler::start(void)::{lambda(void)#1}>(CMHandDetectionHandler::start(void)::{lambda(void)#1} &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<CMHandDetectionHandler::start(void)::{lambda(void)#1},dispatch_queue_s *::default_delete<CMHandDetectionHandler::start(void)::{lambda(void)#1}>>)::{lambda(void *)#1}::__invoke);
  if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void dispatch::async<void ctu::SharedSynchronizable<CMHandDetectionHandler>::execute_wrapped<CMHandDetectionHandler::start(void)::{lambda(void)#1}>(CMHandDetectionHandler::start(void)::{lambda(void)#1} &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<CMHandDetectionHandler::start(void)::{lambda(void)#1},dispatch_queue_s *::default_delete<CMHandDetectionHandler::start(void)::{lambda(void)#1}>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = **a1;
  int v4 = *(void **)(v3 + 32);
  if (v4 && !*(unsigned char *)(v3 + 56))
  {
    [v4 startCallHandednessUpdates];
    *(unsigned char *)(v3 + 56) = 1;
  }
  operator delete(v2);
  uint64_t v5 = (std::__shared_weak_count *)a1[2];
  if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    long long v6 = a1;
  }
  else
  {
    long long v6 = a1;
  }
  operator delete(v6);
}

void sub_1C58E4D04(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;
  operator delete(v3);
  uint64_t v5 = (std::__shared_weak_count *)v1[2];
  if (v5)
  {
    if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void ctu::SharedSynchronizable<CMHandDetectionHandler>::execute_wrapped<CMHandDetectionHandler::stop(void)::{lambda(void)#1}>(uint64_t *a1, void *a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[1];
  if (!v3 || (uint64_t v5 = *a1, (v6 = std::__shared_weak_count::lock(v3)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  size_t v7 = v6;
  unint64_t v8 = operator new(8uLL);
  *unint64_t v8 = *a2;
  int v9 = a1[2];
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v10 = operator new(0x18uLL);
  void *v10 = v8;
  v10[1] = v5;
  v10[2] = v7;
  dispatch_async_f(v9, v10, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<CMHandDetectionHandler>::execute_wrapped<CMHandDetectionHandler::stop(void)::{lambda(void)#1}>(CMHandDetectionHandler::stop(void)::{lambda(void)#1} &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<CMHandDetectionHandler::stop(void)::{lambda(void)#1},dispatch_queue_s *::default_delete<CMHandDetectionHandler::stop(void)::{lambda(void)#1}>>)::{lambda(void *)#1}::__invoke);
  if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void dispatch::async<void ctu::SharedSynchronizable<CMHandDetectionHandler>::execute_wrapped<CMHandDetectionHandler::stop(void)::{lambda(void)#1}>(CMHandDetectionHandler::stop(void)::{lambda(void)#1} &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<CMHandDetectionHandler::stop(void)::{lambda(void)#1},dispatch_queue_s *::default_delete<CMHandDetectionHandler::stop(void)::{lambda(void)#1}>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = **a1;
  int v4 = *(void **)(v3 + 32);
  if (v4 && *(unsigned char *)(v3 + 56))
  {
    [v4 stopCallHandednessUpdates];
    *(unsigned char *)(v3 + 56) = 0;
  }
  operator delete(v2);
  uint64_t v5 = (std::__shared_weak_count *)a1[2];
  if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    long long v6 = a1;
  }
  else
  {
    long long v6 = a1;
  }
  operator delete(v6);
}

void sub_1C58E4F44(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;
  operator delete(v3);
  uint64_t v5 = (std::__shared_weak_count *)v1[2];
  if (v5)
  {
    if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void ctu::SharedSynchronizable<CMHandDetectionHandler>::execute_wrapped<CMHandDetectionHandler::registerCallback(dispatch::block<void({block_pointer})(CMHandDetectionDelegate::CMHandDetectionResult)>)::{lambda(void)#1}>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[1];
  if (!v3 || (uint64_t v5 = *a1, (v6 = std::__shared_weak_count::lock(v3)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  size_t v7 = v6;
  unint64_t v8 = operator new(0x10uLL);
  *unint64_t v8 = *(_OWORD *)a2;
  *(void *)(a2 + 8) = 0;
  int v9 = a1[2];
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v10 = operator new(0x18uLL);
  void *v10 = v8;
  v10[1] = v5;
  v10[2] = v7;
  dispatch_async_f(v9, v10, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<CMHandDetectionHandler>::execute_wrapped<CMHandDetectionHandler::registerCallback(dispatch::block<void({block_pointer})(CMHandDetectionDelegate::CMHandDetectionResult)>)::{lambda(void)#1}>(CMHandDetectionHandler::registerCallback(dispatch::block<void({block_pointer})(CMHandDetectionDelegate::CMHandDetectionResult)>)::{lambda(void)#1} &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<CMHandDetectionHandler::registerCallback(dispatch::block<void({block_pointer})(CMHandDetectionDelegate::CMHandDetectionResult)>)::{lambda(void)#1},dispatch_queue_s *::default_delete<CMHandDetectionHandler::registerCallback(dispatch::block<void({block_pointer})(CMHandDetectionDelegate::CMHandDetectionResult)>)::{lambda(void)#1}>>)::{lambda(void *)#1}::__invoke);
  if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void dispatch::async<void ctu::SharedSynchronizable<CMHandDetectionHandler>::execute_wrapped<CMHandDetectionHandler::registerCallback(dispatch::block<void({block_pointer})(CMHandDetectionDelegate::CMHandDetectionResult)>)::{lambda(void)#1}>(CMHandDetectionHandler::registerCallback(dispatch::block<void({block_pointer})(CMHandDetectionDelegate::CMHandDetectionResult)>)::{lambda(void)#1} &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<CMHandDetectionHandler::registerCallback(dispatch::block<void({block_pointer})(CMHandDetectionDelegate::CMHandDetectionResult)>)::{lambda(void)#1},dispatch_queue_s *::default_delete<CMHandDetectionHandler::registerCallback(dispatch::block<void({block_pointer})(CMHandDetectionDelegate::CMHandDetectionResult)>)::{lambda(void)#1}>>)::{lambda(void *)#1}::__invoke(uint64_t ***a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = **a1;
  if (!v3[4] || !v2[1]) {
    goto LABEL_17;
  }
  int v4 = (std::__shared_weak_count *)v3[1];
  if (!v4 || (uint64_t v5 = *v3, (v6 = std::__shared_weak_count::lock(v4)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  size_t v7 = v6;
  atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    unint64_t v8 = v2[1];
    if (!v8) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
  ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
  std::__shared_weak_count::__release_weak(v7);
  unint64_t v8 = v2[1];
  if (v8) {
LABEL_9:
  }
    unint64_t v8 = (uint64_t *)_Block_copy(v8);
LABEL_10:
  int v9 = (const void *)v3[6];
  v3[6] = (uint64_t)v8;
  if (v9) {
    _Block_release(v9);
  }
  uint64_t v10 = objc_alloc_init(CMHandDetectionDelegateInternal);
  void v3[5] = (uint64_t)v10;
  v13[0] = MEMORY[0x1E4F143A8];
  v13[1] = 3321888768;
  v13[2] = ___ZZN22CMHandDetectionHandler16registerCallbackEN8dispatch5blockIU13block_pointerFvN23CMHandDetectionDelegate21CMHandDetectionResultEEEEENKUlvE_clEv_block_invoke;
  v13[3] = &__block_descriptor_56_e8_40c47_ZTSNSt3__18weak_ptrI22CMHandDetectionHandlerEE_e8_v16__0q8l;
  v13[4] = v3;
  v13[5] = v5;
  uint64_t v14 = v7;
  atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  aBlock = _Block_copy(v13);
  [(CMHandDetectionDelegateInternal *)v10 registerHandler:&aBlock];
  if (aBlock) {
    _Block_release(aBlock);
  }
  [(id)v3[4] setDelegate:v3[5]];
  if (v14) {
    std::__shared_weak_count::__release_weak(v14);
  }
  std::__shared_weak_count::__release_weak(v7);
LABEL_17:
  uint64_t v11 = v2[1];
  if (v11) {
    _Block_release(v11);
  }
  operator delete(v2);
  char v12 = (std::__shared_weak_count *)a1[2];
  if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  operator delete(a1);
}

void sub_1C58E52BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, void *aBlock)
{
  if (a15) {
    std::__shared_weak_count::__release_weak(a15);
  }
  std::__shared_weak_count::__release_weak(v18);
  uint64_t v20 = (const void *)v17[1];
  if (v20) {
    _Block_release(v20);
  }
  operator delete(v17);
  std::string::size_type v21 = (std::__shared_weak_count *)v16[2];
  if (v21)
  {
    if (!atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  operator delete(v16);
  _Unwind_Resume(a1);
}

void ___ZZN22CMHandDetectionHandler16registerCallbackEN8dispatch5blockIU13block_pointerFvN23CMHandDetectionDelegate21CMHandDetectionResultEEEEENKUlvE_clEv_block_invoke(void *a1, uint64_t a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    uint64_t v5 = (uint64_t *)a1[4];
    long long v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      size_t v7 = v6;
      if (!a1[5]) {
        goto LABEL_16;
      }
      unint64_t v8 = (std::__shared_weak_count *)v5[1];
      if (!v8 || (uint64_t v9 = *v5, (v10 = std::__shared_weak_count::lock(v8)) == 0)) {
        std::__throw_bad_weak_ptr[abi:ne180100]();
      }
      uint64_t v11 = v10;
      char v12 = operator new(0x10uLL);
      *char v12 = v5;
      v12[1] = a2;
      size_t v13 = v5[2];
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v14 = operator new(0x18uLL);
      *uint64_t v14 = v12;
      v14[1] = v9;
      v14[2] = v11;
      dispatch_async_f(v13, v14, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI22CMHandDetectionHandlerE15execute_wrappedIZZZNS3_16registerCallbackENS_5blockIU13block_pointerFvN23CMHandDetectionDelegate21CMHandDetectionResultEEEEENKUlvE_clEvEUb_EUlvE_EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrISE_NSJ_14default_deleteISE_EEEEENUlPvE_8__invokeESO_);
      if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
        if (atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
          return;
        }
      }
      else
      {
LABEL_16:
        if (atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
          return;
        }
      }
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

uint64_t __copy_helper_block_e8_40c47_ZTSNSt3__18weak_ptrI22CMHandDetectionHandlerEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c47_ZTSNSt3__18weak_ptrI22CMHandDetectionHandlerEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI22CMHandDetectionHandlerE15execute_wrappedIZZZNS3_16registerCallbackENS_5blockIU13block_pointerFvN23CMHandDetectionDelegate21CMHandDetectionResultEEEEENKUlvE_clEvEUb_EUlvE_EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrISE_NSJ_14default_deleteISE_EEEEENUlPvE_8__invokeESO_(void *a1)
{
  uint64_t v2 = (void *)*a1;
  (*(void (**)(void))(*(void *)(*(void *)*a1 + 48) + 16))();
  operator delete(v2);
  uint64_t v3 = (std::__shared_weak_count *)a1[2];
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    int v4 = a1;
  }
  else
  {
    int v4 = a1;
  }
  operator delete(v4);
}

void sub_1C58E55F0(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;
  operator delete(v3);
  uint64_t v5 = (std::__shared_weak_count *)v1[2];
  if (v5)
  {
    if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void ctu::SharedSynchronizable<CMHandDetectionHandler>::execute_wrapped<CMHandDetectionHandler::shutdown(void)::{lambda(void)#1}>(uint64_t *a1, void *a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[1];
  if (!v3 || (uint64_t v5 = *a1, (v6 = std::__shared_weak_count::lock(v3)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  size_t v7 = v6;
  unint64_t v8 = operator new(8uLL);
  *unint64_t v8 = *a2;
  uint64_t v9 = a1[2];
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v10 = operator new(0x18uLL);
  void *v10 = v8;
  v10[1] = v5;
  v10[2] = v7;
  dispatch_async_f(v9, v10, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<CMHandDetectionHandler>::execute_wrapped<CMHandDetectionHandler::shutdown(void)::{lambda(void)#1}>(CMHandDetectionHandler::shutdown(void)::{lambda(void)#1} &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<CMHandDetectionHandler::shutdown(void)::{lambda(void)#1},dispatch_queue_s *::default_delete<CMHandDetectionHandler::shutdown(void)::{lambda(void)#1}>>)::{lambda(void *)#1}::__invoke);
  if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void dispatch::async<void ctu::SharedSynchronizable<CMHandDetectionHandler>::execute_wrapped<CMHandDetectionHandler::shutdown(void)::{lambda(void)#1}>(CMHandDetectionHandler::shutdown(void)::{lambda(void)#1} &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<CMHandDetectionHandler::shutdown(void)::{lambda(void)#1},dispatch_queue_s *::default_delete<CMHandDetectionHandler::shutdown(void)::{lambda(void)#1}>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = **a1;
  int v4 = *(void **)(v3 + 32);
  if (v4)
  {

    *(void *)(v3 + 32) = 0;
  }
  operator delete(v2);
  uint64_t v5 = (std::__shared_weak_count *)a1[2];
  if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    long long v6 = a1;
  }
  else
  {
    long long v6 = a1;
  }
  operator delete(v6);
}

void sub_1C58E5828(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;
  operator delete(v3);
  uint64_t v5 = (std::__shared_weak_count *)v1[2];
  if (v5)
  {
    if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::shared_ptr<Capabilities>::operator=[abi:ne180100](long long *a1)
{
  long long v1 = *a1;
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  uint64_t v2 = (std::__shared_weak_count *)off_1EBBDD078;
  *(_OWORD *)&qword_1EBBDD070 = v1;
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
}

uint64_t ctu::PthreadMutexGuardPolicy<Capabilities>::~PthreadMutexGuardPolicy(uint64_t a1)
{
  pthread_mutex_lock((pthread_mutex_t *)a1);
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 72);
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 72);
  if (!v3 || atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void std::__shared_ptr_emplace<CMHandDetectionDelegate>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20FBC78;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<CMHandDetectionDelegate>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20FBC78;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_emplace<CMHandDetectionDelegate>::__on_zero_shared(uint64_t a1)
{
  long long v1 = *(std::__shared_weak_count **)(a1 + 32);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

uint64_t __cxx_global_var_init_20()
{
  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<Capabilities>::~PthreadMutexGuardPolicy, &ctu::Singleton<Capabilities,Capabilities,ctu::PthreadMutexGuardPolicy<Capabilities>>::sInstance, &dword_1C5767000);
  }
  return result;
}

uint64_t util::apfs::is_transcription_pending(util::apfs *this)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  bzero(&v13, 0x878uLL);
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)buf, "com.apple.telephony.abm", "apfs");
  long long v1 = *(NSObject **)&v12[4];
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)buf);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_1C5767000, v1, OS_LOG_TYPE_DEFAULT, "Checking if disk requires APFS transcription", buf, 2u);
  }
  if (statfs("/private/var", &v13))
  {
    ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)buf, "com.apple.telephony.abm", "apfs");
    uint64_t v2 = *(NSObject **)&v12[4];
    ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)buf);
    if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_11;
    }
    *(_DWORD *)long long buf = 136315138;
    *(void *)char v12 = "/private/var";
    uint64_t v3 = "Failed to statfs: %s";
    int v4 = v2;
LABEL_9:
    uint32_t v6 = 12;
LABEL_10:
    _os_log_impl(&dword_1C5767000, v4, OS_LOG_TYPE_DEFAULT, v3, buf, v6);
    goto LABEL_11;
  }
  if (strlen(v13.f_mntfromname) - 1024 <= 0xFFFFFFFFFFFFFC00)
  {
    ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)buf, "com.apple.telephony.abm", "apfs");
    uint64_t v5 = *(NSObject **)&v12[4];
    ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)buf);
    if (!os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_11;
    }
    *(_DWORD *)long long buf = 136315138;
    *(void *)char v12 = v13.f_mntfromname;
    uint64_t v3 = "Failed to get mount point: %s";
    int v4 = v5;
    goto LABEL_9;
  }
  if (APFSVolumeRole())
  {
    ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)buf, "com.apple.telephony.abm", "apfs");
    uint64_t v9 = *(NSObject **)&v12[4];
    ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)buf);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 67109120;
      *(_DWORD *)char v12 = 0;
      uint64_t v3 = "APFS volume role error: %d";
      int v4 = v9;
      uint32_t v6 = 8;
      goto LABEL_10;
    }
  }
  else
  {
    ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)buf, "com.apple.telephony.abm", "apfs");
    uint64_t v10 = *(NSObject **)&v12[4];
    ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)buf);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      uint64_t v3 = "APFS volume role does not match";
      int v4 = v10;
      uint32_t v6 = 2;
      goto LABEL_10;
    }
  }
LABEL_11:
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)buf, "com.apple.telephony.abm", "apfs");
  size_t v7 = *(NSObject **)&v12[4];
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)buf);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 67109120;
    *(_DWORD *)char v12 = 0;
    _os_log_impl(&dword_1C5767000, v7, OS_LOG_TYPE_DEFAULT, "APFS needs crypto migration: %d", buf, 8u);
  }
  return 0;
}

uint64_t awd::metrics::protobuf_ShutdownFile_CCMetricsABMPower_2eproto(awd::metrics *this)
{
  if (awd::metrics::CommCenterPowerVotingRecord::default_instance_) {
    (*(void (**)(uint64_t))(*(void *)awd::metrics::CommCenterPowerVotingRecord::default_instance_ + 8))(awd::metrics::CommCenterPowerVotingRecord::default_instance_);
  }
  if (awd::metrics::CommCenterPowerTransitionSuccess::default_instance_) {
    (*(void (**)(uint64_t))(*(void *)awd::metrics::CommCenterPowerTransitionSuccess::default_instance_ + 8))(awd::metrics::CommCenterPowerTransitionSuccess::default_instance_);
  }
  if (awd::metrics::CommCenterPowerTransitionFailure::default_instance_) {
    (*(void (**)(uint64_t))(*(void *)awd::metrics::CommCenterPowerTransitionFailure::default_instance_ + 8))(awd::metrics::CommCenterPowerTransitionFailure::default_instance_);
  }
  if (awd::metrics::CommCenterMissedMTMessage::default_instance_) {
    (*(void (**)(uint64_t))(*(void *)awd::metrics::CommCenterMissedMTMessage::default_instance_ + 8))(awd::metrics::CommCenterMissedMTMessage::default_instance_);
  }
  if (awd::metrics::CommCenterLowPowerEvent::default_instance_) {
    (*(void (**)(uint64_t))(*(void *)awd::metrics::CommCenterLowPowerEvent::default_instance_ + 8))(awd::metrics::CommCenterLowPowerEvent::default_instance_);
  }
  if (awd::metrics::CommCenterWakeInfo::default_instance_) {
    (*(void (**)(uint64_t))(*(void *)awd::metrics::CommCenterWakeInfo::default_instance_ + 8))(awd::metrics::CommCenterWakeInfo::default_instance_);
  }
  if (awd::metrics::CommCenterLowPowerStats::default_instance_) {
    (*(void (**)(uint64_t))(*(void *)awd::metrics::CommCenterLowPowerStats::default_instance_ + 8))(awd::metrics::CommCenterLowPowerStats::default_instance_);
  }
  uint64_t result = awd::metrics::CommCenterWakeReasonInfo::default_instance_;
  if (awd::metrics::CommCenterWakeReasonInfo::default_instance_)
  {
    uint64_t v2 = *(uint64_t (**)(void))(*(void *)awd::metrics::CommCenterWakeReasonInfo::default_instance_ + 8);
    return v2();
  }
  return result;
}

void awd::metrics::protobuf_AddDesc_CCMetricsABMPower_2eproto(awd::metrics *this, uint64_t a2, uint64_t a3, const char *a4)
{
  if ((awd::metrics::protobuf_AddDesc_CCMetricsABMPower_2eproto(void)::already_here & 1) == 0)
  {
    awd::metrics::protobuf_AddDesc_CCMetricsABMPower_2eproto(void)::already_here = 1;
    wireless_diagnostics::google::protobuf::internal::VerifyVersion((wireless_diagnostics::google::protobuf::internal *)0x1E9808, 2005000, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices_Manager/AppleBasebandManager/BasebandManager/Server/AWD/Generated/CCMetricsABMPower.pb.cc", a4);
    int v4 = operator new(0x18uLL);
    v4[1] = 0;
    uint64_t v4[2] = 0;
    void *v4 = &unk_1F20FBCC8;
    awd::metrics::CommCenterPowerVotingRecord::default_instance_ = (uint64_t)v4;
    uint64_t v5 = operator new(0x38uLL);
    v5[5] = 0;
    v5[6] = 0;
    *uint64_t v5 = &unk_1F20FBD40;
    v5[1] = 0;
    v5[2] = 0;
    v5[3] = 0;
    *((_DWORD *)v5 + 8) = 0;
    awd::metrics::CommCenterPowerTransitionSuccess::default_instance_ = (uint64_t)v5;
    uint32_t v6 = operator new(0x38uLL);
    v6[5] = 0;
    v6[6] = 0;
    *uint32_t v6 = &unk_1F20FBDB8;
    v6[1] = 0;
    v6[2] = 0;
    v6[3] = 0;
    *((_DWORD *)v6 + 8) = 0;
    awd::metrics::CommCenterPowerTransitionFailure::default_instance_ = (uint64_t)v6;
    size_t v7 = operator new(0x20uLL);
    *size_t v7 = &unk_1F20FBE30;
    v7[1] = 0;
    v7[2] = 0;
    v7[3] = 0;
    awd::metrics::CommCenterMissedMTMessage::default_instance_ = (uint64_t)v7;
    unint64_t v8 = operator new(0x28uLL);
    *unint64_t v8 = &unk_1F20FBEA8;
    v8[1] = 0;
    uint64_t v9 = MEMORY[0x1E4FBA920];
    v8[2] = 0;
    v8[3] = v9;
    v8[4] = 0;
    awd::metrics::CommCenterLowPowerEvent::default_instance_ = (uint64_t)v8;
    uint64_t v10 = operator new(0x28uLL);
    void *v10 = &unk_1F20FBF20;
    v10[1] = 0;
    v10[2] = 0;
    v10[3] = 0;
    *((_DWORD *)v10 + 8) = 0;
    awd::metrics::CommCenterWakeInfo::default_instance_ = (uint64_t)v10;
    uint64_t v11 = (char *)operator new(0x50uLL);
    *(void *)uint64_t v11 = &unk_1F20FBF98;
    *((void *)v11 + 8) = 0;
    *((_DWORD *)v11 + 18) = 0;
    *(_OWORD *)(v11 + 8) = 0u;
    *(_OWORD *)(v11 + 24) = 0u;
    *(_OWORD *)(v11 + 40) = 0u;
    *((_DWORD *)v11 + 14) = 0;
    awd::metrics::CommCenterLowPowerStats::default_instance_ = (uint64_t)v11;
    char v12 = operator new(0x68uLL);
    *char v12 = &unk_1F20FC010;
    v12[1] = 0;
    *((_WORD *)v12 + 26) = 0;
    v12[2] = v9;
    v12[3] = v9;
    *((_DWORD *)v12 + 12) = 0;
    v12[4] = v9;
    v12[5] = v9;
    v12[7] = v9;
    v12[8] = v9;
    v12[9] = v9;
    v12[10] = 0;
    v12[11] = 0;
    *((_DWORD *)v12 + 24) = 0;
    awd::metrics::CommCenterWakeReasonInfo::default_instance_ = (uint64_t)v12;
    MEMORY[0x1F4181D28](awd::metrics::protobuf_ShutdownFile_CCMetricsABMPower_2eproto);
  }
}

void *awd::metrics::CommCenterPowerVotingRecord::CommCenterPowerVotingRecord(void *this)
{
  this[1] = 0;
  this[2] = 0;
  *this = &unk_1F20FBCC8;
  return this;
}

{
  this[1] = 0;
  this[2] = 0;
  *this = &unk_1F20FBCC8;
  return this;
}

uint64_t awd::metrics::CommCenterPowerTransitionSuccess::CommCenterPowerTransitionSuccess(uint64_t this)
{
  *(void *)(this + 40) = 0;
  *(void *)(this + 48) = 0;
  *(void *)this = &unk_1F20FBD40;
  *(void *)(this + 8) = 0;
  *(void *)(this + 16) = 0;
  *(void *)(this + 24) = 0;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

{
  *(void *)(this + 40) = 0;
  *(void *)(this + 48) = 0;
  *(void *)this = &unk_1F20FBD40;
  *(void *)(this + 8) = 0;
  *(void *)(this + 16) = 0;
  *(void *)(this + 24) = 0;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

uint64_t awd::metrics::CommCenterPowerTransitionFailure::CommCenterPowerTransitionFailure(uint64_t this)
{
  *(void *)(this + 40) = 0;
  *(void *)(this + 48) = 0;
  *(void *)this = &unk_1F20FBDB8;
  *(void *)(this + 8) = 0;
  *(void *)(this + 16) = 0;
  *(void *)(this + 24) = 0;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

{
  *(void *)(this + 40) = 0;
  *(void *)(this + 48) = 0;
  *(void *)this = &unk_1F20FBDB8;
  *(void *)(this + 8) = 0;
  *(void *)(this + 16) = 0;
  *(void *)(this + 24) = 0;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

void *awd::metrics::CommCenterMissedMTMessage::CommCenterMissedMTMessage(void *this)
{
  *this = &unk_1F20FBE30;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  return this;
}

{
  *this = &unk_1F20FBE30;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  return this;
}

void *awd::metrics::CommCenterLowPowerEvent::CommCenterLowPowerEvent(void *this)
{
  uint64_t v1 = MEMORY[0x1E4FBA920];
  *this = &unk_1F20FBEA8;
  this[1] = 0;
  this[2] = 0;
  this[3] = v1;
  this[4] = 0;
  return this;
}

{
  uint64_t v1;

  uint64_t v1 = MEMORY[0x1E4FBA920];
  *this = &unk_1F20FBEA8;
  this[1] = 0;
  this[2] = 0;
  this[3] = v1;
  this[4] = 0;
  return this;
}

uint64_t awd::metrics::CommCenterWakeInfo::CommCenterWakeInfo(uint64_t this)
{
  *(void *)this = &unk_1F20FBF20;
  *(void *)(this + 8) = 0;
  *(void *)(this + 16) = 0;
  *(void *)(this + 24) = 0;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

{
  *(void *)this = &unk_1F20FBF20;
  *(void *)(this + 8) = 0;
  *(void *)(this + 16) = 0;
  *(void *)(this + 24) = 0;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

double awd::metrics::CommCenterLowPowerStats::CommCenterLowPowerStats(awd::metrics::CommCenterLowPowerStats *this)
{
  *(void *)this = &unk_1F20FBF98;
  *((void *)this + 8) = 0;
  *((_DWORD *)this + 18) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_DWORD *)this + 14) = 0;
  return result;
}

{
  double result;

  *(void *)this = &unk_1F20FBF98;
  *((void *)this + 8) = 0;
  *((_DWORD *)this + 18) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_DWORD *)this + 14) = 0;
  return result;
}

uint64_t awd::metrics::CommCenterWakeReasonInfo::CommCenterWakeReasonInfo(uint64_t this)
{
  *(void *)this = &unk_1F20FC010;
  *(void *)(this + 8) = 0;
  uint64_t v1 = MEMORY[0x1E4FBA920];
  *(_WORD *)(this + 52) = 0;
  *(void *)(this + 16) = v1;
  *(void *)(this + 24) = v1;
  *(_DWORD *)(this + 48) = 0;
  *(void *)(this + 32) = v1;
  *(void *)(this + 40) = v1;
  *(void *)(this + 56) = v1;
  *(void *)(this + 64) = v1;
  *(void *)(this + 72) = v1;
  *(void *)(this + 80) = 0;
  *(void *)(this + 88) = 0;
  *(_DWORD *)(this + 96) = 0;
  return this;
}

{
  uint64_t v1;

  *(void *)this = &unk_1F20FC010;
  *(void *)(this + 8) = 0;
  uint64_t v1 = MEMORY[0x1E4FBA920];
  *(_WORD *)(this + 52) = 0;
  *(void *)(this + 16) = v1;
  *(void *)(this + 24) = v1;
  *(_DWORD *)(this + 48) = 0;
  *(void *)(this + 32) = v1;
  *(void *)(this + 40) = v1;
  *(void *)(this + 56) = v1;
  *(void *)(this + 64) = v1;
  *(void *)(this + 72) = v1;
  *(void *)(this + 80) = 0;
  *(void *)(this + 88) = 0;
  *(_DWORD *)(this + 96) = 0;
  return this;
}

BOOL awd::metrics::CommCenterMissedMTType_IsValid(awd::metrics *this)
{
  return this < 3;
}

BOOL awd::metrics::CommCenterSleepType_IsValid(awd::metrics *this)
{
  return this < 2;
}

BOOL awd::metrics::CommCenterLowPowerEventType_IsValid(awd::metrics *this)
{
  return this < 3;
}

uint64_t awd::metrics::CommCenterPowerVotingRecord::SharedCtor(uint64_t this)
{
  *(void *)(this + 8) = 0;
  *(void *)(this + 16) = 0;
  return this;
}

awd::metrics::CommCenterPowerVotingRecord *awd::metrics::CommCenterPowerVotingRecord::CommCenterPowerVotingRecord(awd::metrics::CommCenterPowerVotingRecord *this, const awd::metrics::CommCenterPowerVotingRecord *a2)
{
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *(void *)this = &unk_1F20FBCC8;
  awd::metrics::CommCenterPowerVotingRecord::MergeFrom(this, a2);
  return this;
}

{
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *(void *)this = &unk_1F20FBCC8;
  awd::metrics::CommCenterPowerVotingRecord::MergeFrom(this, a2);
  return this;
}

void sub_1C58E6570(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

void awd::metrics::CommCenterPowerVotingRecord::MergeFrom(awd::metrics::CommCenterPowerVotingRecord *this, const awd::metrics::CommCenterPowerVotingRecord *a2)
{
  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v7);
  }
  LOBYTE(v4) = *((unsigned char *)a2 + 20);
  if ((_BYTE)v4)
  {
    if (*((unsigned char *)a2 + 20))
    {
      int v5 = *((_DWORD *)a2 + 2);
      *((_DWORD *)this + 5) |= 1u;
      *((_DWORD *)this + 2) = v5;
      int v4 = *((_DWORD *)a2 + 5);
    }
    if ((v4 & 2) != 0)
    {
      int v6 = *((_DWORD *)a2 + 3);
      *((_DWORD *)this + 5) |= 2u;
      *((_DWORD *)this + 3) = v6;
    }
  }
}

void sub_1C58E6630(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1C58E6644(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1C58E66A0(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

void awd::metrics::CommCenterPowerVotingRecord::~CommCenterPowerVotingRecord(awd::metrics::CommCenterPowerVotingRecord *this)
{
  *(void *)this = &unk_1F20FBCC8;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  *(void *)this = &unk_1F20FBCC8;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  void *v1;
  uint64_t vars8;

  *(void *)this = &unk_1F20FBCC8;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);

  operator delete(v1);
}

uint64_t awd::metrics::CommCenterPowerVotingRecord::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 16) = a2;
  return this;
}

uint64_t awd::metrics::CommCenterPowerVotingRecord::default_instance(awd::metrics::CommCenterPowerVotingRecord *this, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t result = awd::metrics::CommCenterPowerVotingRecord::default_instance_;
  if (!awd::metrics::CommCenterPowerVotingRecord::default_instance_)
  {
    awd::metrics::protobuf_AddDesc_CCMetricsABMPower_2eproto(0, a2, a3, a4);
    return awd::metrics::CommCenterPowerVotingRecord::default_instance_;
  }
  return result;
}

void *awd::metrics::CommCenterPowerVotingRecord::New(awd::metrics::CommCenterPowerVotingRecord *this)
{
  uint64_t result = operator new(0x18uLL);
  result[1] = 0;
  result[2] = 0;
  void *result = &unk_1F20FBCC8;
  return result;
}

uint64_t awd::metrics::CommCenterPowerVotingRecord::Clear(uint64_t this)
{
  if (*(unsigned char *)(this + 20)) {
    *(void *)(this + 8) = 0;
  }
  *(_DWORD *)(this + 20) = 0;
  return this;
}

uint64_t awd::metrics::CommCenterPowerVotingRecord::MergePartialFromCodedStream(awd::metrics::CommCenterPowerVotingRecord *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  int v4 = (unsigned int *)((char *)this + 8);
  int v5 = (unsigned int *)((char *)this + 12);
  while (1)
  {
    while (1)
    {
      while (1)
      {
        int v6 = (char *)*((void *)a2 + 1);
        if ((unint64_t)v6 >= *((void *)a2 + 2) || *v6 < 0)
        {
          unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
          *((_DWORD *)a2 + 8) = TagFallback;
          if (!TagFallback) {
            return 1;
          }
        }
        else
        {
          unint64_t TagFallback = *v6;
          *((_DWORD *)a2 + 8) = TagFallback;
          *((void *)a2 + 1) = v6 + 1;
          if (!TagFallback) {
            return 1;
          }
        }
        if (TagFallback >> 3 != 1) {
          break;
        }
        int v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_18;
        }
        uint64_t v11 = (char *)*((void *)a2 + 1);
        unint64_t v9 = *((void *)a2 + 2);
        if ((unint64_t)v11 >= v9 || *v11 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v4);
          if (!result) {
            return result;
          }
          char v12 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v9 = *((void *)a2 + 2);
          *((_DWORD *)this + 5) |= 1u;
          if ((unint64_t)v12 < v9) {
            goto LABEL_23;
          }
        }
        else
        {
          unsigned int *v4 = *v11;
          char v12 = v11 + 1;
          *((void *)a2 + 1) = v12;
          *((_DWORD *)this + 5) |= 1u;
          if ((unint64_t)v12 < v9)
          {
LABEL_23:
            if (*v12 == 16)
            {
              uint64_t v10 = v12 + 1;
              *((void *)a2 + 1) = v10;
              if ((unint64_t)v10 < v9) {
                goto LABEL_25;
              }
LABEL_28:
              uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v5);
              if (!result) {
                return result;
              }
              uint64_t v15 = *((void *)a2 + 1);
              uint64_t v14 = *((void *)a2 + 2);
              *((_DWORD *)this + 5) |= 2u;
              if (v15 == v14) {
                goto LABEL_30;
              }
            }
          }
        }
      }
      if (TagFallback >> 3 != 2) {
        break;
      }
      int v8 = TagFallback & 7;
      if ((TagFallback & 7) != 0) {
        goto LABEL_18;
      }
      uint64_t v10 = (unsigned __int8 *)*((void *)a2 + 1);
      unint64_t v9 = *((void *)a2 + 2);
      if ((unint64_t)v10 >= v9) {
        goto LABEL_28;
      }
LABEL_25:
      if ((char)*v10 < 0) {
        goto LABEL_28;
      }
      *int v5 = *v10;
      statfs v13 = (char *)(v10 + 1);
      *((void *)a2 + 1) = v13;
      *((_DWORD *)this + 5) |= 2u;
      if (v13 == (char *)v9)
      {
LABEL_30:
        if (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10))
        {
          *((_DWORD *)a2 + 8) = 0;
          uint64_t result = 1;
          *((unsigned char *)a2 + 36) = 1;
          return result;
        }
      }
    }
    int v8 = TagFallback & 7;
LABEL_18:
    if (v8 == 4) {
      return 1;
    }
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) == 0)return 0; {
  }
    }
}

uint64_t awd::metrics::CommCenterPowerVotingRecord::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = this;
  int v6 = *(_DWORD *)(this + 20);
  if (v6)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(unsigned int *)(this + 8), (uint64_t)a2, a4);
    int v6 = *(_DWORD *)(v5 + 20);
  }
  if ((v6 & 2) != 0)
  {
    uint64_t v7 = *(unsigned int *)(v5 + 12);
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, v7, (uint64_t)a2, a4);
  }
  return this;
}

uint64_t awd::metrics::CommCenterPowerVotingRecord::ByteSize(awd::metrics::CommCenterPowerVotingRecord *this)
{
  char v2 = *((unsigned char *)this + 20);
  if (!v2)
  {
    uint64_t v3 = 0;
    goto LABEL_6;
  }
  if ((*((unsigned char *)this + 20) & 1) == 0)
  {
    uint64_t v3 = 0;
    if ((*((unsigned char *)this + 20) & 2) != 0) {
      goto LABEL_11;
    }
LABEL_6:
    *((_DWORD *)this + 4) = v3;
    return v3;
  }
  uint64_t v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 2);
  if (v5 < 0x80)
  {
    uint64_t v3 = 2;
    if ((v2 & 2) != 0) {
      goto LABEL_11;
    }
    goto LABEL_6;
  }
  uint64_t v3 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5) + 1;
  if ((*((_DWORD *)this + 5) & 2) == 0) {
    goto LABEL_6;
  }
LABEL_11:
  int v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 3);
  if (v6 >= 0x80) {
    uint64_t v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6)
  }
       + 1
       + v3;
  else {
    uint64_t v7 = (v3 + 2);
  }
  *((_DWORD *)this + 4) = v7;
  return v7;
}

void awd::metrics::CommCenterPowerVotingRecord::CopyFrom(awd::metrics::CommCenterPowerVotingRecord *this, const awd::metrics::CommCenterPowerVotingRecord *a2)
{
  if (a2 != this)
  {
    (*(void (**)(awd::metrics::CommCenterPowerVotingRecord *))(*(void *)this + 32))(this);
    awd::metrics::CommCenterPowerVotingRecord::MergeFrom(this, a2);
  }
}

uint64_t awd::metrics::CommCenterPowerVotingRecord::IsInitialized(awd::metrics::CommCenterPowerVotingRecord *this)
{
  return 1;
}

awd::metrics::CommCenterPowerVotingRecord *awd::metrics::CommCenterPowerVotingRecord::Swap(awd::metrics::CommCenterPowerVotingRecord *this, awd::metrics::CommCenterPowerVotingRecord *a2)
{
  if (a2 != this)
  {
    int v2 = *((_DWORD *)this + 2);
    *((_DWORD *)this + 2) = *((_DWORD *)a2 + 2);
    *((_DWORD *)a2 + 2) = v2;
    int v3 = *((_DWORD *)this + 3);
    *((_DWORD *)this + 3) = *((_DWORD *)a2 + 3);
    *((_DWORD *)a2 + 3) = v3;
    int v4 = *((_DWORD *)this + 5);
    *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
    *((_DWORD *)a2 + 5) = v4;
    int v5 = *((_DWORD *)this + 4);
    *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
    *((_DWORD *)a2 + 4) = v5;
  }
  return this;
}

char *awd::metrics::CommCenterPowerVotingRecord::GetTypeName@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = (char *)operator new(0x28uLL);
  *(void *)a1 = result;
  *(_OWORD *)(a1 + 8) = xmmword_1C59A4CD0;
  strcpy(result, "awd.metrics.CommCenterPowerVotingRecord");
  return result;
}

void *awd::metrics::CommCenterPowerTransitionSuccess::SharedCtor(void *this)
{
  this[1] = 0;
  this[5] = 0;
  this[6] = 0;
  return this;
}

awd::metrics::CommCenterPowerTransitionSuccess *awd::metrics::CommCenterPowerTransitionSuccess::CommCenterPowerTransitionSuccess(awd::metrics::CommCenterPowerTransitionSuccess *this, const awd::metrics::CommCenterPowerTransitionSuccess *a2)
{
  *((void *)this + 5) = 0;
  *((void *)this + 6) = 0;
  *(void *)this = &unk_1F20FBD40;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((_DWORD *)this + 8) = 0;
  awd::metrics::CommCenterPowerTransitionSuccess::MergeFrom(this, a2);
  return this;
}

{
  *((void *)this + 5) = 0;
  *((void *)this + 6) = 0;
  *(void *)this = &unk_1F20FBD40;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((_DWORD *)this + 8) = 0;
  awd::metrics::CommCenterPowerTransitionSuccess::MergeFrom(this, a2);
  return this;
}

void sub_1C58E6C78(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::RepeatedPtrField<awd::metrics::CrashReasonType>::~RepeatedPtrField((uint64_t)v1 + 16);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

void awd::metrics::CommCenterPowerTransitionSuccess::MergeFrom(awd::metrics::CommCenterPowerTransitionSuccess *this, const awd::metrics::CommCenterPowerTransitionSuccess *a2)
{
  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v16);
  }
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((awd::metrics::CommCenterPowerTransitionSuccess *)((char *)this + 16));
  if (*((int *)a2 + 6) >= 1)
  {
    uint64_t v4 = 0;
    do
    {
      while (1)
      {
        int v8 = *(const awd::metrics::CommCenterPowerVotingRecord **)(*((void *)a2 + 2) + 8 * v4);
        int v9 = *((_DWORD *)this + 7);
        uint64_t v10 = *((int *)this + 6);
        if ((int)v10 >= v9) {
          break;
        }
        uint64_t v11 = *((void *)this + 2);
        *((_DWORD *)this + 6) = v10 + 1;
        awd::metrics::CommCenterPowerVotingRecord::MergeFrom(*(awd::metrics::CommCenterPowerVotingRecord **)(v11 + 8 * v10), v8);
        if (++v4 >= *((int *)a2 + 6)) {
          goto LABEL_11;
        }
      }
      if (v9 == *((_DWORD *)this + 8))
      {
        wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((awd::metrics::CommCenterPowerTransitionSuccess *)((char *)this + 16));
        int v9 = *((_DWORD *)this + 7);
      }
      *((_DWORD *)this + 7) = v9 + 1;
      int v5 = (awd::metrics::CommCenterPowerVotingRecord *)operator new(0x18uLL);
      *((void *)v5 + 1) = 0;
      *((void *)v5 + 2) = 0;
      *(void *)int v5 = &unk_1F20FBCC8;
      uint64_t v6 = *((void *)this + 2);
      uint64_t v7 = *((int *)this + 6);
      *((_DWORD *)this + 6) = v7 + 1;
      *(void *)(v6 + 8 * v7) = v5;
      awd::metrics::CommCenterPowerVotingRecord::MergeFrom(v5, v8);
      ++v4;
    }
    while (v4 < *((int *)a2 + 6));
  }
LABEL_11:
  LOBYTE(v12) = *((unsigned char *)a2 + 52);
  if ((_BYTE)v12)
  {
    if (*((unsigned char *)a2 + 52))
    {
      int v14 = *((_DWORD *)a2 + 2);
      *((_DWORD *)this + 13) |= 1u;
      *((_DWORD *)this + 2) = v14;
      int v12 = *((_DWORD *)a2 + 13);
      if ((v12 & 2) == 0)
      {
LABEL_14:
        if ((v12 & 8) == 0) {
          return;
        }
        goto LABEL_15;
      }
    }
    else if ((*((unsigned char *)a2 + 52) & 2) == 0)
    {
      goto LABEL_14;
    }
    int v15 = *((_DWORD *)a2 + 3);
    *((_DWORD *)this + 13) |= 2u;
    *((_DWORD *)this + 3) = v15;
    if ((*((_DWORD *)a2 + 13) & 8) == 0) {
      return;
    }
LABEL_15:
    uint64_t v13 = *((void *)a2 + 5);
    *((_DWORD *)this + 13) |= 8u;
    *((void *)this + 5) = v13;
  }
}

void sub_1C58E6E64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1C58E6E78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1C58E6EE4(_Unwind_Exception *a1)
{
  int v3 = *(_DWORD *)(v1 + 28);
  if (v3 >= 1)
  {
    for (uint64_t i = 0; i < v3; ++i)
    {
      uint64_t v5 = *(void *)(*(void *)(v1 + 16) + 8 * i);
      if (v5)
      {
        (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
        int v3 = *(_DWORD *)(v1 + 28);
      }
    }
  }
  uint64_t v6 = *(void **)(v1 + 16);
  if (v6) {
    operator delete[](v6);
  }
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite((wireless_diagnostics::google::protobuf::MessageLite *)v1);
  _Unwind_Resume(a1);
}

void awd::metrics::CommCenterPowerTransitionSuccess::~CommCenterPowerTransitionSuccess(awd::metrics::CommCenterPowerTransitionSuccess *this)
{
  *(void *)this = &unk_1F20FBD40;
  int v2 = *((_DWORD *)this + 7);
  if (v2 >= 1)
  {
    for (uint64_t i = 0; i < v2; ++i)
    {
      uint64_t v4 = *(void *)(*((void *)this + 2) + 8 * i);
      if (v4)
      {
        (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
        int v2 = *((_DWORD *)this + 7);
      }
    }
  }
  uint64_t v5 = (void *)*((void *)this + 2);
  if (v5) {
    operator delete[](v5);
  }

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  int v2;
  uint64_t i;
  uint64_t v4;
  void *v5;
  uint64_t vars8;

  *(void *)this = &unk_1F20FBD40;
  int v2 = *((_DWORD *)this + 7);
  if (v2 >= 1)
  {
    for (uint64_t i = 0; i < v2; ++i)
    {
      uint64_t v4 = *(void *)(*((void *)this + 2) + 8 * i);
      if (v4)
      {
        (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
        int v2 = *((_DWORD *)this + 7);
      }
    }
  }
  uint64_t v5 = (void *)*((void *)this + 2);
  if (v5) {
    operator delete[](v5);
  }

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  int v2;
  uint64_t i;
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t vars8;

  *(void *)this = &unk_1F20FBD40;
  int v2 = *((_DWORD *)this + 7);
  if (v2 >= 1)
  {
    for (uint64_t i = 0; i < v2; ++i)
    {
      uint64_t v4 = *(void *)(*((void *)this + 2) + 8 * i);
      if (v4)
      {
        (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
        int v2 = *((_DWORD *)this + 7);
      }
    }
  }
  uint64_t v5 = (void *)*((void *)this + 2);
  if (v5) {
    operator delete[](v5);
  }
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);

  operator delete(v6);
}

uint64_t awd::metrics::CommCenterPowerTransitionSuccess::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 48) = a2;
  return this;
}

uint64_t awd::metrics::CommCenterPowerTransitionSuccess::default_instance(awd::metrics::CommCenterPowerTransitionSuccess *this, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t result = awd::metrics::CommCenterPowerTransitionSuccess::default_instance_;
  if (!awd::metrics::CommCenterPowerTransitionSuccess::default_instance_)
  {
    awd::metrics::protobuf_AddDesc_CCMetricsABMPower_2eproto(0, a2, a3, a4);
    return awd::metrics::CommCenterPowerTransitionSuccess::default_instance_;
  }
  return result;
}

void *awd::metrics::CommCenterPowerTransitionSuccess::New(awd::metrics::CommCenterPowerTransitionSuccess *this)
{
  uint64_t result = operator new(0x38uLL);
  result[5] = 0;
  result[6] = 0;
  void *result = &unk_1F20FBD40;
  result[1] = 0;
  result[2] = 0;
  result[3] = 0;
  *((_DWORD *)result + 8) = 0;
  return result;
}

uint64_t awd::metrics::CommCenterPowerTransitionSuccess::Clear(uint64_t this)
{
  uint64_t v1 = this;
  if (*(unsigned char *)(this + 52))
  {
    *(void *)(this + 8) = 0;
    *(void *)(this + 40) = 0;
  }
  if (*(int *)(this + 24) >= 1)
  {
    uint64_t v2 = 0;
    do
    {
      uint64_t v3 = *(void *)(*(void *)(v1 + 16) + 8 * v2);
      this = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 32))(v3);
      ++v2;
    }
    while (v2 < *(int *)(v1 + 24));
  }
  *(_DWORD *)(v1 + 24) = 0;
  *(_DWORD *)(v1 + 52) = 0;
  return this;
}

uint64_t awd::metrics::CommCenterPowerTransitionSuccess::MergePartialFromCodedStream(awd::metrics::CommCenterPowerTransitionSuccess *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  uint64_t v4 = (unsigned int *)((char *)this + 8);
  uint64_t v5 = (unsigned int *)((char *)this + 12);
  uint64_t v6 = (awd::metrics::CommCenterPowerTransitionSuccess *)((char *)this + 16);
  uint64_t v7 = (unint64_t *)((char *)this + 40);
  while (1)
  {
LABEL_2:
    int v8 = (char *)*((void *)a2 + 1);
    if ((unint64_t)v8 >= *((void *)a2 + 2) || *v8 < 0)
    {
      unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
      *((_DWORD *)a2 + 8) = TagFallback;
      if (!TagFallback) {
        return 1;
      }
    }
    else
    {
      unint64_t TagFallback = *v8;
      *((_DWORD *)a2 + 8) = TagFallback;
      *((void *)a2 + 1) = v8 + 1;
      if (!TagFallback) {
        return 1;
      }
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        int v10 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_21;
        }
        int v12 = (char *)*((void *)a2 + 1);
        unint64_t v11 = *((void *)a2 + 2);
        if ((unint64_t)v12 >= v11 || *v12 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v4);
          if (!result) {
            return result;
          }
          uint64_t v13 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v11 = *((void *)a2 + 2);
          *((_DWORD *)this + 13) |= 1u;
          if ((unint64_t)v13 >= v11) {
            continue;
          }
        }
        else
        {
          unsigned int *v4 = *v12;
          uint64_t v13 = v12 + 1;
          *((void *)a2 + 1) = v13;
          *((_DWORD *)this + 13) |= 1u;
          if ((unint64_t)v13 >= v11) {
            continue;
          }
        }
        if (*v13 != 16) {
          continue;
        }
        int v14 = v13 + 1;
        *((void *)a2 + 1) = v14;
        if ((unint64_t)v14 >= v11) {
          goto LABEL_33;
        }
        goto LABEL_30;
      case 2u:
        int v10 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_21;
        }
        int v14 = (char *)*((void *)a2 + 1);
        unint64_t v11 = *((void *)a2 + 2);
        if ((unint64_t)v14 >= v11) {
          goto LABEL_33;
        }
LABEL_30:
        if (*v14 < 0)
        {
LABEL_33:
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v5);
          if (!result) {
            return result;
          }
          char v22 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v23 = *((void *)a2 + 2);
          *((_DWORD *)this + 13) |= 2u;
          if ((unint64_t)v22 >= v23) {
            continue;
          }
        }
        else
        {
          *uint64_t v5 = *v14;
          char v22 = v14 + 1;
          *((void *)a2 + 1) = v22;
          *((_DWORD *)this + 13) |= 2u;
          if ((unint64_t)v22 >= v11) {
            continue;
          }
        }
        if (*v22 != 26) {
          continue;
        }
        break;
      case 3u:
        int v10 = TagFallback & 7;
        if (v10 != 2) {
          goto LABEL_21;
        }
        int v15 = *((_DWORD *)this + 7);
        uint64_t v16 = *((int *)this + 6);
        if ((int)v16 < v15) {
          goto LABEL_19;
        }
        goto LABEL_37;
      case 4u:
        int v10 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_21;
        }
        uint64_t v20 = (unsigned __int8 *)*((void *)a2 + 1);
        unint64_t v19 = *((void *)a2 + 2);
        if ((unint64_t)v20 >= v19) {
          goto LABEL_56;
        }
        goto LABEL_53;
      default:
        int v10 = TagFallback & 7;
LABEL_21:
        if (v10 == 4) {
          return 1;
        }
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) == 0)return 0; {
        continue;
        }
    }
    do
    {
      *((void *)a2 + 1) = v22 + 1;
      int v15 = *((_DWORD *)this + 7);
      uint64_t v16 = *((int *)this + 6);
      if ((int)v16 < v15)
      {
LABEL_19:
        uint64_t v17 = *((void *)this + 2);
        *((_DWORD *)this + 6) = v16 + 1;
        unint64_t v18 = *(awd::metrics::CommCenterPowerVotingRecord **)(v17 + 8 * v16);
      }
      else
      {
LABEL_37:
        if (v15 == *((_DWORD *)this + 8))
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v6);
          int v15 = *((_DWORD *)this + 7);
        }
        *((_DWORD *)this + 7) = v15 + 1;
        unint64_t v18 = (awd::metrics::CommCenterPowerVotingRecord *)operator new(0x18uLL);
        *((void *)v18 + 1) = 0;
        *((void *)v18 + 2) = 0;
        *(void *)unint64_t v18 = &unk_1F20FBCC8;
        uint64_t v24 = *((void *)this + 2);
        uint64_t v25 = *((int *)this + 6);
        *((_DWORD *)this + 6) = v25 + 1;
        *(void *)(v24 + 8 * v25) = v18;
      }
      unsigned int v36 = -1431655766;
      long long v26 = (char *)*((void *)a2 + 1);
      if ((unint64_t)v26 >= *((void *)a2 + 2) || *v26 < 0)
      {
        if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v36)) {
          return 0;
        }
      }
      else
      {
        unsigned int v36 = *v26;
        *((void *)a2 + 1) = v26 + 1;
      }
      int v27 = *((_DWORD *)a2 + 14);
      int v28 = *((_DWORD *)a2 + 15);
      *((_DWORD *)a2 + 14) = v27 + 1;
      if (v27 >= v28) {
        return 0;
      }
      wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
      if (!awd::metrics::CommCenterPowerVotingRecord::MergePartialFromCodedStream(v18, a2)
        || !*((unsigned char *)a2 + 36))
      {
        return 0;
      }
      wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
      int v29 = *((_DWORD *)a2 + 14);
      BOOL v30 = __OFSUB__(v29, 1);
      int v31 = v29 - 1;
      if (v31 < 0 == v30) {
        *((_DWORD *)a2 + 14) = v31;
      }
      char v22 = (unsigned char *)*((void *)a2 + 1);
      unint64_t v19 = *((void *)a2 + 2);
      if ((unint64_t)v22 >= v19) {
        goto LABEL_2;
      }
      int v32 = *v22;
    }
    while (v32 == 26);
    if (v32 != 32) {
      continue;
    }
    uint64_t v20 = v22 + 1;
    *((void *)a2 + 1) = v20;
    if ((unint64_t)v20 >= v19) {
      break;
    }
LABEL_53:
    if ((char)*v20 < 0) {
      break;
    }
    *uint64_t v7 = *v20;
    uint64_t v33 = (char *)(v20 + 1);
    *((void *)a2 + 1) = v33;
    *((_DWORD *)this + 13) |= 8u;
    if (v33 == (char *)v19) {
      goto LABEL_58;
    }
  }
LABEL_56:
  uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2, v7);
  if (result)
  {
    uint64_t v35 = *((void *)a2 + 1);
    uint64_t v34 = *((void *)a2 + 2);
    *((_DWORD *)this + 13) |= 8u;
    if (v35 != v34) {
      goto LABEL_2;
    }
LABEL_58:
    if (!*((_DWORD *)a2 + 11) && *((_DWORD *)a2 + 6) != *((_DWORD *)a2 + 10)) {
      goto LABEL_2;
    }
    *((_DWORD *)a2 + 8) = 0;
    uint64_t result = 1;
    *((unsigned char *)a2 + 36) = 1;
  }
  return result;
}

uint64_t awd::metrics::CommCenterPowerTransitionSuccess::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = this;
  int v6 = *(_DWORD *)(this + 52);
  if (v6)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(unsigned int *)(this + 8), (uint64_t)a2, a4);
    if ((*(_DWORD *)(v5 + 52) & 2) == 0)
    {
LABEL_3:
      if (*(int *)(v5 + 24) < 1) {
        goto LABEL_9;
      }
      goto LABEL_7;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(unsigned int *)(v5 + 12), (uint64_t)a2, a4);
  if (*(int *)(v5 + 24) < 1) {
    goto LABEL_9;
  }
LABEL_7:
  uint64_t v7 = 0;
  do
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, *(void *)(*(void *)(v5 + 16) + 8 * v7++), a2, a4);
  while (v7 < *(int *)(v5 + 24));
LABEL_9:
  if ((*(unsigned char *)(v5 + 52) & 8) != 0)
  {
    uint64_t v8 = *(void *)(v5 + 40);
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, v8, (uint64_t)a2, a4);
  }
  return this;
}

uint64_t awd::metrics::CommCenterPowerTransitionSuccess::ByteSize(awd::metrics::CommCenterPowerTransitionSuccess *this)
{
  LOBYTE(v2) = *((unsigned char *)this + 52);
  if (!(_BYTE)v2)
  {
    int v6 = *((_DWORD *)this + 6);
    uint64_t v5 = v6;
    if (v6 < 1) {
      goto LABEL_35;
    }
    goto LABEL_18;
  }
  if ((*((unsigned char *)this + 52) & 1) == 0)
  {
    int v3 = 0;
    if ((*((unsigned char *)this + 52) & 2) == 0) {
      goto LABEL_4;
    }
LABEL_13:
    uint64_t v8 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 3);
    if (v8 >= 0x80)
    {
      v3 += wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v8) + 1;
      if ((*((_DWORD *)this + 13) & 8) != 0) {
        goto LABEL_17;
      }
    }
    else
    {
      v3 += 2;
      if ((v2 & 8) != 0) {
        goto LABEL_17;
      }
    }
LABEL_5:
    int v4 = *((_DWORD *)this + 6);
    uint64_t v5 = (v4 + v3);
    if (v4 < 1) {
      goto LABEL_35;
    }
    goto LABEL_18;
  }
  uint64_t v7 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 2);
  if (v7 >= 0x80)
  {
    int v3 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v7) + 1;
    int v2 = *((_DWORD *)this + 13);
    if ((v2 & 2) != 0) {
      goto LABEL_13;
    }
  }
  else
  {
    int v3 = 2;
    if ((v2 & 2) != 0) {
      goto LABEL_13;
    }
  }
LABEL_4:
  if ((v2 & 8) == 0) {
    goto LABEL_5;
  }
LABEL_17:
  int v9 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*((wireless_diagnostics::google::protobuf::io::CodedOutputStream **)this
                                                                                   + 5));
  int v10 = *((_DWORD *)this + 6);
  uint64_t v5 = (v10 + v3 + v9 + 1);
  if (v10 >= 1)
  {
LABEL_18:
    for (uint64_t i = 0; i < *((int *)this + 6); ++i)
    {
      while (1)
      {
        uint64_t v13 = *(void *)(*((void *)this + 2) + 8 * i);
        if (!*(unsigned char *)(v13 + 20))
        {
          LODWORD(v12) = 0;
          *(_DWORD *)(v13 + 16) = 0;
          goto LABEL_20;
        }
        if (*(unsigned char *)(v13 + 20)) {
          break;
        }
        uint64_t v12 = 0;
        if ((*(unsigned char *)(v13 + 20) & 2) == 0) {
          goto LABEL_24;
        }
LABEL_30:
        int v15 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(v13 + 12);
        if (v15 < 0x80)
        {
          uint64_t v12 = (v12 + 2);
          *(_DWORD *)(v13 + 16) = v12;
          if (v12 >= 0x80) {
            goto LABEL_34;
          }
          goto LABEL_20;
        }
        uint64_t v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v15)
            + 1
            + v12;
        *(_DWORD *)(v13 + 16) = v12;
        if (v12 < 0x80) {
          goto LABEL_20;
        }
LABEL_34:
        uint64_t v5 = v12
           + v5
           + wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v12);
        if (++i >= *((int *)this + 6)) {
          goto LABEL_35;
        }
      }
      int v14 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(v13 + 8);
      if (v14 >= 0x80)
      {
        uint64_t v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v14) + 1;
        if ((*(_DWORD *)(v13 + 20) & 2) != 0) {
          goto LABEL_30;
        }
      }
      else
      {
        uint64_t v12 = 2;
        if ((*(unsigned char *)(v13 + 20) & 2) != 0) {
          goto LABEL_30;
        }
      }
LABEL_24:
      *(_DWORD *)(v13 + 16) = v12;
      if (v12 >= 0x80) {
        goto LABEL_34;
      }
LABEL_20:
      uint64_t v5 = (v12 + v5 + 1);
    }
  }
LABEL_35:
  *((_DWORD *)this + 12) = v5;
  return v5;
}

void awd::metrics::CommCenterPowerTransitionSuccess::CopyFrom(awd::metrics::CommCenterPowerTransitionSuccess *this, const awd::metrics::CommCenterPowerTransitionSuccess *a2)
{
  if (a2 != this)
  {
    (*(void (**)(awd::metrics::CommCenterPowerTransitionSuccess *))(*(void *)this + 32))(this);
    awd::metrics::CommCenterPowerTransitionSuccess::MergeFrom(this, a2);
  }
}

uint64_t awd::metrics::CommCenterPowerTransitionSuccess::IsInitialized(awd::metrics::CommCenterPowerTransitionSuccess *this)
{
  return 1;
}

awd::metrics::CommCenterPowerTransitionSuccess *awd::metrics::CommCenterPowerTransitionSuccess::Swap(awd::metrics::CommCenterPowerTransitionSuccess *this, awd::metrics::CommCenterPowerTransitionSuccess *a2)
{
  if (a2 != this)
  {
    int v3 = this;
    int v4 = *((_DWORD *)this + 2);
    *((_DWORD *)this + 2) = *((_DWORD *)a2 + 2);
    *((_DWORD *)a2 + 2) = v4;
    int v5 = *((_DWORD *)this + 3);
    *((_DWORD *)this + 3) = *((_DWORD *)a2 + 3);
    *((_DWORD *)a2 + 3) = v5;
    this = (awd::metrics::CommCenterPowerTransitionSuccess *)wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Swap();
    uint64_t v6 = *((void *)v3 + 5);
    *((void *)v3 + 5) = *((void *)a2 + 5);
    *((void *)a2 + 5) = v6;
    LODWORD(v6) = *((_DWORD *)v3 + 13);
    *((_DWORD *)v3 + 13) = *((_DWORD *)a2 + 13);
    *((_DWORD *)a2 + 13) = v6;
    LODWORD(v6) = *((_DWORD *)v3 + 12);
    *((_DWORD *)v3 + 12) = *((_DWORD *)a2 + 12);
    *((_DWORD *)a2 + 12) = v6;
  }
  return this;
}

double awd::metrics::CommCenterPowerTransitionSuccess::GetTypeName@<D0>(uint64_t a1@<X8>)
{
  int v3 = (char *)operator new(0x30uLL);
  *(void *)a1 = v3;
  *(_OWORD *)(a1 + 8) = xmmword_1C59A4CE0;
  strcpy(v3, "awd.metrics.CommCenterPowerTransitionSuccess");
  return *(double *)"ransitionSuccess";
}

void *awd::metrics::CommCenterPowerTransitionFailure::SharedCtor(void *this)
{
  this[1] = 0;
  this[5] = 0;
  this[6] = 0;
  return this;
}

awd::metrics::CommCenterPowerTransitionFailure *awd::metrics::CommCenterPowerTransitionFailure::CommCenterPowerTransitionFailure(awd::metrics::CommCenterPowerTransitionFailure *this, const awd::metrics::CommCenterPowerTransitionFailure *a2)
{
  *((void *)this + 5) = 0;
  *((void *)this + 6) = 0;
  *(void *)this = &unk_1F20FBDB8;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((_DWORD *)this + 8) = 0;
  awd::metrics::CommCenterPowerTransitionFailure::MergeFrom(this, a2);
  return this;
}

{
  *((void *)this + 5) = 0;
  *((void *)this + 6) = 0;
  *(void *)this = &unk_1F20FBDB8;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((_DWORD *)this + 8) = 0;
  awd::metrics::CommCenterPowerTransitionFailure::MergeFrom(this, a2);
  return this;
}

void sub_1C58E7B2C(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::RepeatedPtrField<awd::metrics::CrashReasonType>::~RepeatedPtrField((uint64_t)v1 + 16);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

void awd::metrics::CommCenterPowerTransitionFailure::MergeFrom(awd::metrics::CommCenterPowerTransitionFailure *this, const awd::metrics::CommCenterPowerTransitionFailure *a2)
{
  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v16);
  }
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((awd::metrics::CommCenterPowerTransitionFailure *)((char *)this + 16));
  if (*((int *)a2 + 6) >= 1)
  {
    uint64_t v4 = 0;
    do
    {
      while (1)
      {
        uint64_t v8 = *(const awd::metrics::CommCenterPowerVotingRecord **)(*((void *)a2 + 2) + 8 * v4);
        int v9 = *((_DWORD *)this + 7);
        uint64_t v10 = *((int *)this + 6);
        if ((int)v10 >= v9) {
          break;
        }
        uint64_t v11 = *((void *)this + 2);
        *((_DWORD *)this + 6) = v10 + 1;
        awd::metrics::CommCenterPowerVotingRecord::MergeFrom(*(awd::metrics::CommCenterPowerVotingRecord **)(v11 + 8 * v10), v8);
        if (++v4 >= *((int *)a2 + 6)) {
          goto LABEL_11;
        }
      }
      if (v9 == *((_DWORD *)this + 8))
      {
        wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((awd::metrics::CommCenterPowerTransitionFailure *)((char *)this + 16));
        int v9 = *((_DWORD *)this + 7);
      }
      *((_DWORD *)this + 7) = v9 + 1;
      int v5 = (awd::metrics::CommCenterPowerVotingRecord *)operator new(0x18uLL);
      *((void *)v5 + 1) = 0;
      *((void *)v5 + 2) = 0;
      *(void *)int v5 = &unk_1F20FBCC8;
      uint64_t v6 = *((void *)this + 2);
      uint64_t v7 = *((int *)this + 6);
      *((_DWORD *)this + 6) = v7 + 1;
      *(void *)(v6 + 8 * v7) = v5;
      awd::metrics::CommCenterPowerVotingRecord::MergeFrom(v5, v8);
      ++v4;
    }
    while (v4 < *((int *)a2 + 6));
  }
LABEL_11:
  LOBYTE(v12) = *((unsigned char *)a2 + 52);
  if ((_BYTE)v12)
  {
    if (*((unsigned char *)a2 + 52))
    {
      int v14 = *((_DWORD *)a2 + 2);
      *((_DWORD *)this + 13) |= 1u;
      *((_DWORD *)this + 2) = v14;
      int v12 = *((_DWORD *)a2 + 13);
      if ((v12 & 2) == 0)
      {
LABEL_14:
        if ((v12 & 8) == 0) {
          return;
        }
        goto LABEL_15;
      }
    }
    else if ((*((unsigned char *)a2 + 52) & 2) == 0)
    {
      goto LABEL_14;
    }
    int v15 = *((_DWORD *)a2 + 3);
    *((_DWORD *)this + 13) |= 2u;
    *((_DWORD *)this + 3) = v15;
    if ((*((_DWORD *)a2 + 13) & 8) == 0) {
      return;
    }
LABEL_15:
    uint64_t v13 = *((void *)a2 + 5);
    *((_DWORD *)this + 13) |= 8u;
    *((void *)this + 5) = v13;
  }
}

void sub_1C58E7D18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1C58E7D2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1C58E7D98(_Unwind_Exception *a1)
{
  int v3 = *(_DWORD *)(v1 + 28);
  if (v3 >= 1)
  {
    for (uint64_t i = 0; i < v3; ++i)
    {
      uint64_t v5 = *(void *)(*(void *)(v1 + 16) + 8 * i);
      if (v5)
      {
        (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
        int v3 = *(_DWORD *)(v1 + 28);
      }
    }
  }
  uint64_t v6 = *(void **)(v1 + 16);
  if (v6) {
    operator delete[](v6);
  }
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite((wireless_diagnostics::google::protobuf::MessageLite *)v1);
  _Unwind_Resume(a1);
}

void awd::metrics::CommCenterPowerTransitionFailure::~CommCenterPowerTransitionFailure(awd::metrics::CommCenterPowerTransitionFailure *this)
{
  *(void *)this = &unk_1F20FBDB8;
  int v2 = *((_DWORD *)this + 7);
  if (v2 >= 1)
  {
    for (uint64_t i = 0; i < v2; ++i)
    {
      uint64_t v4 = *(void *)(*((void *)this + 2) + 8 * i);
      if (v4)
      {
        (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
        int v2 = *((_DWORD *)this + 7);
      }
    }
  }
  uint64_t v5 = (void *)*((void *)this + 2);
  if (v5) {
    operator delete[](v5);
  }

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  int v2;
  uint64_t i;
  uint64_t v4;
  void *v5;
  uint64_t vars8;

  *(void *)this = &unk_1F20FBDB8;
  int v2 = *((_DWORD *)this + 7);
  if (v2 >= 1)
  {
    for (uint64_t i = 0; i < v2; ++i)
    {
      uint64_t v4 = *(void *)(*((void *)this + 2) + 8 * i);
      if (v4)
      {
        (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
        int v2 = *((_DWORD *)this + 7);
      }
    }
  }
  uint64_t v5 = (void *)*((void *)this + 2);
  if (v5) {
    operator delete[](v5);
  }

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  int v2;
  uint64_t i;
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t vars8;

  *(void *)this = &unk_1F20FBDB8;
  int v2 = *((_DWORD *)this + 7);
  if (v2 >= 1)
  {
    for (uint64_t i = 0; i < v2; ++i)
    {
      uint64_t v4 = *(void *)(*((void *)this + 2) + 8 * i);
      if (v4)
      {
        (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
        int v2 = *((_DWORD *)this + 7);
      }
    }
  }
  uint64_t v5 = (void *)*((void *)this + 2);
  if (v5) {
    operator delete[](v5);
  }
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);

  operator delete(v6);
}

uint64_t awd::metrics::CommCenterPowerTransitionFailure::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 48) = a2;
  return this;
}

uint64_t awd::metrics::CommCenterPowerTransitionFailure::default_instance(awd::metrics::CommCenterPowerTransitionFailure *this, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t result = awd::metrics::CommCenterPowerTransitionFailure::default_instance_;
  if (!awd::metrics::CommCenterPowerTransitionFailure::default_instance_)
  {
    awd::metrics::protobuf_AddDesc_CCMetricsABMPower_2eproto(0, a2, a3, a4);
    return awd::metrics::CommCenterPowerTransitionFailure::default_instance_;
  }
  return result;
}

void *awd::metrics::CommCenterPowerTransitionFailure::New(awd::metrics::CommCenterPowerTransitionFailure *this)
{
  uint64_t result = operator new(0x38uLL);
  result[5] = 0;
  result[6] = 0;
  void *result = &unk_1F20FBDB8;
  result[1] = 0;
  result[2] = 0;
  result[3] = 0;
  *((_DWORD *)result + 8) = 0;
  return result;
}

uint64_t awd::metrics::CommCenterPowerTransitionFailure::Clear(uint64_t this)
{
  uint64_t v1 = this;
  if (*(unsigned char *)(this + 52))
  {
    *(void *)(this + 8) = 0;
    *(void *)(this + 40) = 0;
  }
  if (*(int *)(this + 24) >= 1)
  {
    uint64_t v2 = 0;
    do
    {
      uint64_t v3 = *(void *)(*(void *)(v1 + 16) + 8 * v2);
      this = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 32))(v3);
      ++v2;
    }
    while (v2 < *(int *)(v1 + 24));
  }
  *(_DWORD *)(v1 + 24) = 0;
  *(_DWORD *)(v1 + 52) = 0;
  return this;
}

uint64_t awd::metrics::CommCenterPowerTransitionFailure::MergePartialFromCodedStream(awd::metrics::CommCenterPowerTransitionFailure *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  uint64_t v4 = (unsigned int *)((char *)this + 8);
  uint64_t v5 = (unsigned int *)((char *)this + 12);
  uint64_t v6 = (awd::metrics::CommCenterPowerTransitionFailure *)((char *)this + 16);
  uint64_t v7 = (unint64_t *)((char *)this + 40);
  while (1)
  {
LABEL_2:
    uint64_t v8 = (char *)*((void *)a2 + 1);
    if ((unint64_t)v8 >= *((void *)a2 + 2) || *v8 < 0)
    {
      unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
      *((_DWORD *)a2 + 8) = TagFallback;
      if (!TagFallback) {
        return 1;
      }
    }
    else
    {
      unint64_t TagFallback = *v8;
      *((_DWORD *)a2 + 8) = TagFallback;
      *((void *)a2 + 1) = v8 + 1;
      if (!TagFallback) {
        return 1;
      }
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        int v10 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_21;
        }
        int v12 = (char *)*((void *)a2 + 1);
        unint64_t v11 = *((void *)a2 + 2);
        if ((unint64_t)v12 >= v11 || *v12 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v4);
          if (!result) {
            return result;
          }
          uint64_t v13 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v11 = *((void *)a2 + 2);
          *((_DWORD *)this + 13) |= 1u;
          if ((unint64_t)v13 >= v11) {
            continue;
          }
        }
        else
        {
          unsigned int *v4 = *v12;
          uint64_t v13 = v12 + 1;
          *((void *)a2 + 1) = v13;
          *((_DWORD *)this + 13) |= 1u;
          if ((unint64_t)v13 >= v11) {
            continue;
          }
        }
        if (*v13 != 16) {
          continue;
        }
        int v14 = v13 + 1;
        *((void *)a2 + 1) = v14;
        if ((unint64_t)v14 >= v11) {
          goto LABEL_33;
        }
        goto LABEL_30;
      case 2u:
        int v10 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_21;
        }
        int v14 = (char *)*((void *)a2 + 1);
        unint64_t v11 = *((void *)a2 + 2);
        if ((unint64_t)v14 >= v11) {
          goto LABEL_33;
        }
LABEL_30:
        if (*v14 < 0)
        {
LABEL_33:
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v5);
          if (!result) {
            return result;
          }
          char v22 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v23 = *((void *)a2 + 2);
          *((_DWORD *)this + 13) |= 2u;
          if ((unint64_t)v22 >= v23) {
            continue;
          }
        }
        else
        {
          *uint64_t v5 = *v14;
          char v22 = v14 + 1;
          *((void *)a2 + 1) = v22;
          *((_DWORD *)this + 13) |= 2u;
          if ((unint64_t)v22 >= v11) {
            continue;
          }
        }
        if (*v22 != 26) {
          continue;
        }
        break;
      case 3u:
        int v10 = TagFallback & 7;
        if (v10 != 2) {
          goto LABEL_21;
        }
        int v15 = *((_DWORD *)this + 7);
        uint64_t v16 = *((int *)this + 6);
        if ((int)v16 < v15) {
          goto LABEL_19;
        }
        goto LABEL_37;
      case 4u:
        int v10 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_21;
        }
        uint64_t v20 = (unsigned __int8 *)*((void *)a2 + 1);
        unint64_t v19 = *((void *)a2 + 2);
        if ((unint64_t)v20 >= v19) {
          goto LABEL_56;
        }
        goto LABEL_53;
      default:
        int v10 = TagFallback & 7;
LABEL_21:
        if (v10 == 4) {
          return 1;
        }
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) == 0)return 0; {
        continue;
        }
    }
    do
    {
      *((void *)a2 + 1) = v22 + 1;
      int v15 = *((_DWORD *)this + 7);
      uint64_t v16 = *((int *)this + 6);
      if ((int)v16 < v15)
      {
LABEL_19:
        uint64_t v17 = *((void *)this + 2);
        *((_DWORD *)this + 6) = v16 + 1;
        unint64_t v18 = *(awd::metrics::CommCenterPowerVotingRecord **)(v17 + 8 * v16);
      }
      else
      {
LABEL_37:
        if (v15 == *((_DWORD *)this + 8))
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v6);
          int v15 = *((_DWORD *)this + 7);
        }
        *((_DWORD *)this + 7) = v15 + 1;
        unint64_t v18 = (awd::metrics::CommCenterPowerVotingRecord *)operator new(0x18uLL);
        *((void *)v18 + 1) = 0;
        *((void *)v18 + 2) = 0;
        *(void *)unint64_t v18 = &unk_1F20FBCC8;
        uint64_t v24 = *((void *)this + 2);
        uint64_t v25 = *((int *)this + 6);
        *((_DWORD *)this + 6) = v25 + 1;
        *(void *)(v24 + 8 * v25) = v18;
      }
      unsigned int v36 = -1431655766;
      long long v26 = (char *)*((void *)a2 + 1);
      if ((unint64_t)v26 >= *((void *)a2 + 2) || *v26 < 0)
      {
        if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v36)) {
          return 0;
        }
      }
      else
      {
        unsigned int v36 = *v26;
        *((void *)a2 + 1) = v26 + 1;
      }
      int v27 = *((_DWORD *)a2 + 14);
      int v28 = *((_DWORD *)a2 + 15);
      *((_DWORD *)a2 + 14) = v27 + 1;
      if (v27 >= v28) {
        return 0;
      }
      wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
      if (!awd::metrics::CommCenterPowerVotingRecord::MergePartialFromCodedStream(v18, a2)
        || !*((unsigned char *)a2 + 36))
      {
        return 0;
      }
      wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
      int v29 = *((_DWORD *)a2 + 14);
      BOOL v30 = __OFSUB__(v29, 1);
      int v31 = v29 - 1;
      if (v31 < 0 == v30) {
        *((_DWORD *)a2 + 14) = v31;
      }
      char v22 = (unsigned char *)*((void *)a2 + 1);
      unint64_t v19 = *((void *)a2 + 2);
      if ((unint64_t)v22 >= v19) {
        goto LABEL_2;
      }
      int v32 = *v22;
    }
    while (v32 == 26);
    if (v32 != 32) {
      continue;
    }
    uint64_t v20 = v22 + 1;
    *((void *)a2 + 1) = v20;
    if ((unint64_t)v20 >= v19) {
      break;
    }
LABEL_53:
    if ((char)*v20 < 0) {
      break;
    }
    *uint64_t v7 = *v20;
    uint64_t v33 = (char *)(v20 + 1);
    *((void *)a2 + 1) = v33;
    *((_DWORD *)this + 13) |= 8u;
    if (v33 == (char *)v19) {
      goto LABEL_58;
    }
  }
LABEL_56:
  uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2, v7);
  if (result)
  {
    uint64_t v35 = *((void *)a2 + 1);
    uint64_t v34 = *((void *)a2 + 2);
    *((_DWORD *)this + 13) |= 8u;
    if (v35 != v34) {
      goto LABEL_2;
    }
LABEL_58:
    if (!*((_DWORD *)a2 + 11) && *((_DWORD *)a2 + 6) != *((_DWORD *)a2 + 10)) {
      goto LABEL_2;
    }
    *((_DWORD *)a2 + 8) = 0;
    uint64_t result = 1;
    *((unsigned char *)a2 + 36) = 1;
  }
  return result;
}

uint64_t awd::metrics::CommCenterPowerTransitionFailure::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = this;
  int v6 = *(_DWORD *)(this + 52);
  if (v6)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(unsigned int *)(this + 8), (uint64_t)a2, a4);
    if ((*(_DWORD *)(v5 + 52) & 2) == 0)
    {
LABEL_3:
      if (*(int *)(v5 + 24) < 1) {
        goto LABEL_9;
      }
      goto LABEL_7;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(unsigned int *)(v5 + 12), (uint64_t)a2, a4);
  if (*(int *)(v5 + 24) < 1) {
    goto LABEL_9;
  }
LABEL_7:
  uint64_t v7 = 0;
  do
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, *(void *)(*(void *)(v5 + 16) + 8 * v7++), a2, a4);
  while (v7 < *(int *)(v5 + 24));
LABEL_9:
  if ((*(unsigned char *)(v5 + 52) & 8) != 0)
  {
    uint64_t v8 = *(void *)(v5 + 40);
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, v8, (uint64_t)a2, a4);
  }
  return this;
}

uint64_t awd::metrics::CommCenterPowerTransitionFailure::ByteSize(awd::metrics::CommCenterPowerTransitionFailure *this)
{
  LOBYTE(v2) = *((unsigned char *)this + 52);
  if (!(_BYTE)v2)
  {
    int v6 = *((_DWORD *)this + 6);
    uint64_t v5 = v6;
    if (v6 < 1) {
      goto LABEL_35;
    }
    goto LABEL_18;
  }
  if ((*((unsigned char *)this + 52) & 1) == 0)
  {
    int v3 = 0;
    if ((*((unsigned char *)this + 52) & 2) == 0) {
      goto LABEL_4;
    }
LABEL_13:
    uint64_t v8 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 3);
    if (v8 >= 0x80)
    {
      v3 += wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v8) + 1;
      if ((*((_DWORD *)this + 13) & 8) != 0) {
        goto LABEL_17;
      }
    }
    else
    {
      v3 += 2;
      if ((v2 & 8) != 0) {
        goto LABEL_17;
      }
    }
LABEL_5:
    int v4 = *((_DWORD *)this + 6);
    uint64_t v5 = (v4 + v3);
    if (v4 < 1) {
      goto LABEL_35;
    }
    goto LABEL_18;
  }
  uint64_t v7 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 2);
  if (v7 >= 0x80)
  {
    int v3 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v7) + 1;
    int v2 = *((_DWORD *)this + 13);
    if ((v2 & 2) != 0) {
      goto LABEL_13;
    }
  }
  else
  {
    int v3 = 2;
    if ((v2 & 2) != 0) {
      goto LABEL_13;
    }
  }
LABEL_4:
  if ((v2 & 8) == 0) {
    goto LABEL_5;
  }
LABEL_17:
  int v9 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*((wireless_diagnostics::google::protobuf::io::CodedOutputStream **)this
                                                                                   + 5));
  int v10 = *((_DWORD *)this + 6);
  uint64_t v5 = (v10 + v3 + v9 + 1);
  if (v10 >= 1)
  {
LABEL_18:
    for (uint64_t i = 0; i < *((int *)this + 6); ++i)
    {
      while (1)
      {
        uint64_t v13 = *(void *)(*((void *)this + 2) + 8 * i);
        if (!*(unsigned char *)(v13 + 20))
        {
          LODWORD(v12) = 0;
          *(_DWORD *)(v13 + 16) = 0;
          goto LABEL_20;
        }
        if (*(unsigned char *)(v13 + 20)) {
          break;
        }
        uint64_t v12 = 0;
        if ((*(unsigned char *)(v13 + 20) & 2) == 0) {
          goto LABEL_24;
        }
LABEL_30:
        int v15 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(v13 + 12);
        if (v15 < 0x80)
        {
          uint64_t v12 = (v12 + 2);
          *(_DWORD *)(v13 + 16) = v12;
          if (v12 >= 0x80) {
            goto LABEL_34;
          }
          goto LABEL_20;
        }
        uint64_t v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v15)
            + 1
            + v12;
        *(_DWORD *)(v13 + 16) = v12;
        if (v12 < 0x80) {
          goto LABEL_20;
        }
LABEL_34:
        uint64_t v5 = v12
           + v5
           + wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v12);
        if (++i >= *((int *)this + 6)) {
          goto LABEL_35;
        }
      }
      int v14 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(v13 + 8);
      if (v14 >= 0x80)
      {
        uint64_t v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v14) + 1;
        if ((*(_DWORD *)(v13 + 20) & 2) != 0) {
          goto LABEL_30;
        }
      }
      else
      {
        uint64_t v12 = 2;
        if ((*(unsigned char *)(v13 + 20) & 2) != 0) {
          goto LABEL_30;
        }
      }
LABEL_24:
      *(_DWORD *)(v13 + 16) = v12;
      if (v12 >= 0x80) {
        goto LABEL_34;
      }
LABEL_20:
      uint64_t v5 = (v12 + v5 + 1);
    }
  }
LABEL_35:
  *((_DWORD *)this + 12) = v5;
  return v5;
}

void awd::metrics::CommCenterPowerTransitionFailure::CopyFrom(awd::metrics::CommCenterPowerTransitionFailure *this, const awd::metrics::CommCenterPowerTransitionFailure *a2)
{
  if (a2 != this)
  {
    (*(void (**)(awd::metrics::CommCenterPowerTransitionFailure *))(*(void *)this + 32))(this);
    awd::metrics::CommCenterPowerTransitionFailure::MergeFrom(this, a2);
  }
}

uint64_t awd::metrics::CommCenterPowerTransitionFailure::IsInitialized(awd::metrics::CommCenterPowerTransitionFailure *this)
{
  return 1;
}

awd::metrics::CommCenterPowerTransitionFailure *awd::metrics::CommCenterPowerTransitionFailure::Swap(awd::metrics::CommCenterPowerTransitionFailure *this, awd::metrics::CommCenterPowerTransitionFailure *a2)
{
  if (a2 != this)
  {
    int v3 = this;
    int v4 = *((_DWORD *)this + 2);
    *((_DWORD *)this + 2) = *((_DWORD *)a2 + 2);
    *((_DWORD *)a2 + 2) = v4;
    int v5 = *((_DWORD *)this + 3);
    *((_DWORD *)this + 3) = *((_DWORD *)a2 + 3);
    *((_DWORD *)a2 + 3) = v5;
    this = (awd::metrics::CommCenterPowerTransitionFailure *)wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Swap();
    uint64_t v6 = *((void *)v3 + 5);
    *((void *)v3 + 5) = *((void *)a2 + 5);
    *((void *)a2 + 5) = v6;
    LODWORD(v6) = *((_DWORD *)v3 + 13);
    *((_DWORD *)v3 + 13) = *((_DWORD *)a2 + 13);
    *((_DWORD *)a2 + 13) = v6;
    LODWORD(v6) = *((_DWORD *)v3 + 12);
    *((_DWORD *)v3 + 12) = *((_DWORD *)a2 + 12);
    *((_DWORD *)a2 + 12) = v6;
  }
  return this;
}

double awd::metrics::CommCenterPowerTransitionFailure::GetTypeName@<D0>(uint64_t a1@<X8>)
{
  int v3 = (char *)operator new(0x30uLL);
  *(void *)a1 = v3;
  *(_OWORD *)(a1 + 8) = xmmword_1C59A4CE0;
  strcpy(v3, "awd.metrics.CommCenterPowerTransitionFailure");
  return *(double *)"ransitionFailure";
}

void *awd::metrics::CommCenterMissedMTMessage::SharedCtor(void *this)
{
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  return this;
}

awd::metrics::CommCenterMissedMTMessage *awd::metrics::CommCenterMissedMTMessage::CommCenterMissedMTMessage(awd::metrics::CommCenterMissedMTMessage *this, const awd::metrics::CommCenterMissedMTMessage *a2)
{
  *(void *)this = &unk_1F20FBE30;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  awd::metrics::CommCenterMissedMTMessage::MergeFrom(this, a2);
  return this;
}

{
  *(void *)this = &unk_1F20FBE30;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  awd::metrics::CommCenterMissedMTMessage::MergeFrom(this, a2);
  return this;
}

void sub_1C58E89D0(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

void awd::metrics::CommCenterMissedMTMessage::MergeFrom(awd::metrics::CommCenterMissedMTMessage *this, const awd::metrics::CommCenterMissedMTMessage *a2)
{
  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v9);
  }
  LOBYTE(v4) = *((unsigned char *)a2 + 28);
  if ((_BYTE)v4)
  {
    if (*((unsigned char *)a2 + 28))
    {
      int v6 = *((_DWORD *)a2 + 2);
      *((_DWORD *)this + 7) |= 1u;
      *((_DWORD *)this + 2) = v6;
      int v4 = *((_DWORD *)a2 + 7);
      if ((v4 & 2) == 0)
      {
LABEL_6:
        if ((v4 & 4) == 0) {
          goto LABEL_7;
        }
        goto LABEL_12;
      }
    }
    else if ((*((unsigned char *)a2 + 28) & 2) == 0)
    {
      goto LABEL_6;
    }
    int v7 = *((_DWORD *)a2 + 3);
    *((_DWORD *)this + 7) |= 2u;
    *((_DWORD *)this + 3) = v7;
    int v4 = *((_DWORD *)a2 + 7);
    if ((v4 & 4) == 0)
    {
LABEL_7:
      if ((v4 & 8) == 0) {
        return;
      }
      goto LABEL_8;
    }
LABEL_12:
    int v8 = *((_DWORD *)a2 + 4);
    *((_DWORD *)this + 7) |= 4u;
    *((_DWORD *)this + 4) = v8;
    if ((*((_DWORD *)a2 + 7) & 8) == 0) {
      return;
    }
LABEL_8:
    int v5 = *((_DWORD *)a2 + 5);
    *((_DWORD *)this + 7) |= 8u;
    *((_DWORD *)this + 5) = v5;
  }
}

void sub_1C58E8AD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1C58E8AEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1C58E8B48(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

void awd::metrics::CommCenterMissedMTMessage::~CommCenterMissedMTMessage(awd::metrics::CommCenterMissedMTMessage *this)
{
  *(void *)this = &unk_1F20FBE30;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  *(void *)this = &unk_1F20FBE30;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  void *v1;
  uint64_t vars8;

  *(void *)this = &unk_1F20FBE30;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);

  operator delete(v1);
}

uint64_t awd::metrics::CommCenterMissedMTMessage::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 24) = a2;
  return this;
}

uint64_t awd::metrics::CommCenterMissedMTMessage::default_instance(awd::metrics::CommCenterMissedMTMessage *this, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t result = awd::metrics::CommCenterMissedMTMessage::default_instance_;
  if (!awd::metrics::CommCenterMissedMTMessage::default_instance_)
  {
    awd::metrics::protobuf_AddDesc_CCMetricsABMPower_2eproto(0, a2, a3, a4);
    return awd::metrics::CommCenterMissedMTMessage::default_instance_;
  }
  return result;
}

void *awd::metrics::CommCenterMissedMTMessage::New(awd::metrics::CommCenterMissedMTMessage *this)
{
  uint64_t result = operator new(0x20uLL);
  void *result = &unk_1F20FBE30;
  result[1] = 0;
  result[2] = 0;
  result[3] = 0;
  return result;
}

uint64_t awd::metrics::CommCenterMissedMTMessage::Clear(uint64_t this)
{
  if (*(unsigned char *)(this + 28))
  {
    *(void *)(this + 8) = 0;
    *(void *)(this + 16) = 0;
  }
  *(_DWORD *)(this + 28) = 0;
  return this;
}

uint64_t awd::metrics::CommCenterMissedMTMessage::MergePartialFromCodedStream(awd::metrics::CommCenterMissedMTMessage *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  int v4 = (unsigned int *)((char *)this + 8);
  int v5 = (unsigned int *)((char *)this + 12);
  int v6 = (unsigned int *)((char *)this + 16);
  int v7 = (unsigned int *)((char *)this + 20);
  while (2)
  {
    int v8 = (char *)*((void *)a2 + 1);
    if ((unint64_t)v8 >= *((void *)a2 + 2) || *v8 < 0)
    {
      unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
      *((_DWORD *)a2 + 8) = TagFallback;
      if (!TagFallback) {
        return 1;
      }
    }
    else
    {
      unint64_t TagFallback = *v8;
      *((_DWORD *)a2 + 8) = TagFallback;
      *((void *)a2 + 1) = v8 + 1;
      if (!TagFallback) {
        return 1;
      }
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        int v10 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_21;
        }
        uint64_t v12 = (char *)*((void *)a2 + 1);
        unint64_t v11 = *((void *)a2 + 2);
        if ((unint64_t)v12 >= v11 || *v12 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v4);
          if (!result) {
            return result;
          }
          uint64_t v13 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v11 = *((void *)a2 + 2);
          *((_DWORD *)this + 7) |= 1u;
          if ((unint64_t)v13 >= v11) {
            continue;
          }
        }
        else
        {
          unsigned int *v4 = *v12;
          uint64_t v13 = v12 + 1;
          *((void *)a2 + 1) = v13;
          *((_DWORD *)this + 7) |= 1u;
          if ((unint64_t)v13 >= v11) {
            continue;
          }
        }
        if (*v13 != 16) {
          continue;
        }
        int v14 = v13 + 1;
        *((void *)a2 + 1) = v14;
        if ((unint64_t)v14 >= v11) {
          goto LABEL_33;
        }
        goto LABEL_30;
      case 2u:
        int v10 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_21;
        }
        int v14 = (char *)*((void *)a2 + 1);
        unint64_t v11 = *((void *)a2 + 2);
        if ((unint64_t)v14 >= v11) {
          goto LABEL_33;
        }
LABEL_30:
        if ((*v14 & 0x80000000) == 0)
        {
          *int v5 = *v14;
          uint64_t v17 = v14 + 1;
          *((void *)a2 + 1) = v17;
          *((_DWORD *)this + 7) |= 2u;
          if ((unint64_t)v17 < v11) {
            goto LABEL_35;
          }
          continue;
        }
LABEL_33:
        uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v5);
        if (!result) {
          return result;
        }
        uint64_t v17 = (unsigned char *)*((void *)a2 + 1);
        unint64_t v11 = *((void *)a2 + 2);
        *((_DWORD *)this + 7) |= 2u;
        if ((unint64_t)v17 >= v11) {
          continue;
        }
LABEL_35:
        if (*v17 != 24) {
          continue;
        }
        int v15 = v17 + 1;
        *((void *)a2 + 1) = v15;
        if ((unint64_t)v15 >= v11) {
          goto LABEL_40;
        }
LABEL_37:
        if ((*v15 & 0x80000000) == 0)
        {
          *int v6 = *v15;
          unint64_t v18 = v15 + 1;
          *((void *)a2 + 1) = v18;
          *((_DWORD *)this + 7) |= 4u;
          if ((unint64_t)v18 < v11) {
            goto LABEL_42;
          }
          continue;
        }
LABEL_40:
        uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v6);
        if (!result) {
          return result;
        }
        unint64_t v18 = (unsigned char *)*((void *)a2 + 1);
        unint64_t v11 = *((void *)a2 + 2);
        *((_DWORD *)this + 7) |= 4u;
        if ((unint64_t)v18 >= v11) {
          continue;
        }
LABEL_42:
        if (*v18 != 32) {
          continue;
        }
        uint64_t v16 = v18 + 1;
        *((void *)a2 + 1) = v16;
        if ((unint64_t)v16 >= v11) {
          goto LABEL_47;
        }
LABEL_44:
        if ((*v16 & 0x80000000) == 0)
        {
          *int v7 = *v16;
          unint64_t v19 = (unsigned __int8 *)(v16 + 1);
          *((void *)a2 + 1) = v19;
          *((_DWORD *)this + 7) |= 8u;
          if (v19 == (unsigned __int8 *)v11) {
            goto LABEL_49;
          }
          continue;
        }
LABEL_47:
        uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v7);
        if (!result) {
          return result;
        }
        uint64_t v21 = *((void *)a2 + 1);
        uint64_t v20 = *((void *)a2 + 2);
        *((_DWORD *)this + 7) |= 8u;
        if (v21 != v20) {
          continue;
        }
LABEL_49:
        if (!*((_DWORD *)a2 + 11) && *((_DWORD *)a2 + 6) != *((_DWORD *)a2 + 10)) {
          continue;
        }
        *((_DWORD *)a2 + 8) = 0;
        uint64_t result = 1;
        *((unsigned char *)a2 + 36) = 1;
        return result;
      case 3u:
        int v10 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_21;
        }
        int v15 = (char *)*((void *)a2 + 1);
        unint64_t v11 = *((void *)a2 + 2);
        if ((unint64_t)v15 >= v11) {
          goto LABEL_40;
        }
        goto LABEL_37;
      case 4u:
        int v10 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_21;
        }
        uint64_t v16 = (char *)*((void *)a2 + 1);
        unint64_t v11 = *((void *)a2 + 2);
        if ((unint64_t)v16 >= v11) {
          goto LABEL_47;
        }
        goto LABEL_44;
      default:
        int v10 = TagFallback & 7;
LABEL_21:
        if (v10 == 4) {
          return 1;
        }
        if (wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback))continue; {
        return 0;
        }
    }
  }
}

unsigned int *awd::metrics::CommCenterMissedMTMessage::SerializeWithCachedSizes(unsigned int *this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  int v5 = this;
  unsigned int v6 = this[7];
  if (v6)
  {
    this = (unsigned int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, this[2], (uint64_t)a2, a4);
    unsigned int v6 = v5[7];
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      this = (unsigned int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, v5[4], (uint64_t)a2, a4);
      if ((v5[7] & 8) == 0) {
        return this;
      }
      goto LABEL_9;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = (unsigned int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, v5[3], (uint64_t)a2, a4);
  unsigned int v6 = v5[7];
  if ((v6 & 4) != 0) {
    goto LABEL_8;
  }
LABEL_4:
  if ((v6 & 8) == 0) {
    return this;
  }
LABEL_9:
  uint64_t v7 = v5[5];

  return (unsigned int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, v7, (uint64_t)a2, a4);
}

uint64_t awd::metrics::CommCenterMissedMTMessage::ByteSize(awd::metrics::CommCenterMissedMTMessage *this)
{
  LOBYTE(v2) = *((unsigned char *)this + 28);
  if (!(_BYTE)v2)
  {
    uint64_t v3 = 0;
    goto LABEL_6;
  }
  if (*((unsigned char *)this + 28))
  {
    int v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 2);
    if (v5 >= 0x80)
    {
      uint64_t v3 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5) + 1;
      int v2 = *((_DWORD *)this + 7);
      if ((v2 & 2) == 0) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v3 = 2;
      if ((v2 & 2) == 0) {
        goto LABEL_15;
      }
    }
  }
  else
  {
    uint64_t v3 = 0;
    if ((*((unsigned char *)this + 28) & 2) == 0) {
      goto LABEL_15;
    }
  }
  unsigned int v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 3);
  if (v6 >= 0x80)
  {
    int v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6) + 1;
    int v2 = *((_DWORD *)this + 7);
  }
  else
  {
    int v7 = 2;
  }
  uint64_t v3 = (v7 + v3);
LABEL_15:
  if ((v2 & 4) == 0)
  {
    if ((v2 & 8) != 0) {
      goto LABEL_22;
    }
LABEL_6:
    *((_DWORD *)this + 6) = v3;
    return v3;
  }
  int v8 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 4);
  if (v8 < 0x80)
  {
    uint64_t v3 = (v3 + 2);
    if ((v2 & 8) != 0) {
      goto LABEL_22;
    }
    goto LABEL_6;
  }
  uint64_t v3 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v8)
     + 1
     + v3;
  if ((*((_DWORD *)this + 7) & 8) == 0) {
    goto LABEL_6;
  }
LABEL_22:
  int v9 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 5);
  if (v9 >= 0x80) {
    uint64_t v10 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v9)
  }
        + 1
        + v3;
  else {
    uint64_t v10 = (v3 + 2);
  }
  *((_DWORD *)this + 6) = v10;
  return v10;
}

void awd::metrics::CommCenterMissedMTMessage::CopyFrom(awd::metrics::CommCenterMissedMTMessage *this, const awd::metrics::CommCenterMissedMTMessage *a2)
{
  if (a2 != this)
  {
    (*(void (**)(awd::metrics::CommCenterMissedMTMessage *))(*(void *)this + 32))(this);
    awd::metrics::CommCenterMissedMTMessage::MergeFrom(this, a2);
  }
}

uint64_t awd::metrics::CommCenterMissedMTMessage::IsInitialized(awd::metrics::CommCenterMissedMTMessage *this)
{
  return 1;
}

awd::metrics::CommCenterMissedMTMessage *awd::metrics::CommCenterMissedMTMessage::Swap(awd::metrics::CommCenterMissedMTMessage *this, awd::metrics::CommCenterMissedMTMessage *a2)
{
  if (a2 != this)
  {
    int v2 = *((_DWORD *)this + 2);
    *((_DWORD *)this + 2) = *((_DWORD *)a2 + 2);
    *((_DWORD *)a2 + 2) = v2;
    int v3 = *((_DWORD *)this + 3);
    *((_DWORD *)this + 3) = *((_DWORD *)a2 + 3);
    *((_DWORD *)a2 + 3) = v3;
    int v4 = *((_DWORD *)this + 4);
    *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
    *((_DWORD *)a2 + 4) = v4;
    int v5 = *((_DWORD *)this + 5);
    *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
    *((_DWORD *)a2 + 5) = v5;
    int v6 = *((_DWORD *)this + 7);
    *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
    *((_DWORD *)a2 + 7) = v6;
    int v7 = *((_DWORD *)this + 6);
    *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
    *((_DWORD *)a2 + 6) = v7;
  }
  return this;
}

char *awd::metrics::CommCenterMissedMTMessage::GetTypeName@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = (char *)operator new(0x28uLL);
  *(void *)a1 = result;
  *(_OWORD *)(a1 + 8) = xmmword_1C59A4CF0;
  strcpy(result, "awd.metrics.CommCenterMissedMTMessage");
  return result;
}

void *awd::metrics::CommCenterLowPowerEvent::SharedCtor(void *this)
{
  this[1] = 0;
  this[2] = 0;
  this[3] = MEMORY[0x1E4FBA920];
  this[4] = 0;
  return this;
}

awd::metrics::CommCenterLowPowerEvent *awd::metrics::CommCenterLowPowerEvent::CommCenterLowPowerEvent(awd::metrics::CommCenterLowPowerEvent *this, const awd::metrics::CommCenterLowPowerEvent *a2)
{
  *(void *)this = &unk_1F20FBEA8;
  *((void *)this + 1) = 0;
  uint64_t v3 = MEMORY[0x1E4FBA920];
  *((void *)this + 2) = 0;
  *((void *)this + 3) = v3;
  *((void *)this + 4) = 0;
  awd::metrics::CommCenterLowPowerEvent::MergeFrom(this, a2);
  return this;
}

{
  uint64_t v3;

  *(void *)this = &unk_1F20FBEA8;
  *((void *)this + 1) = 0;
  uint64_t v3 = MEMORY[0x1E4FBA920];
  *((void *)this + 2) = 0;
  *((void *)this + 3) = v3;
  *((void *)this + 4) = 0;
  awd::metrics::CommCenterLowPowerEvent::MergeFrom(this, a2);
  return this;
}

void sub_1C58E934C(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

void awd::metrics::CommCenterLowPowerEvent::MergeFrom(awd::metrics::CommCenterLowPowerEvent *this, const awd::metrics::CommCenterLowPowerEvent *a2)
{
  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v14);
  }
  LOBYTE(v4) = *((unsigned char *)a2 + 36);
  if ((_BYTE)v4)
  {
    if (*((unsigned char *)a2 + 36))
    {
      uint64_t v5 = *((void *)a2 + 1);
      *((_DWORD *)this + 9) |= 1u;
      *((void *)this + 1) = v5;
      int v4 = *((_DWORD *)a2 + 9);
      if ((v4 & 2) == 0)
      {
LABEL_6:
        if ((v4 & 4) == 0) {
          goto LABEL_7;
        }
        goto LABEL_11;
      }
    }
    else if ((*((unsigned char *)a2 + 36) & 2) == 0)
    {
      goto LABEL_6;
    }
    int v6 = *((_DWORD *)a2 + 4);
    *((_DWORD *)this + 9) |= 2u;
    *((_DWORD *)this + 4) = v6;
    int v4 = *((_DWORD *)a2 + 9);
    if ((v4 & 4) == 0)
    {
LABEL_7:
      if ((v4 & 8) == 0) {
        return;
      }
LABEL_12:
      int v8 = (void **)*((void *)a2 + 3);
      *((_DWORD *)this + 9) |= 8u;
      int v9 = (void **)*((void *)this + 3);
      if (v9 == (void **)MEMORY[0x1E4FBA920])
      {
        int v9 = (void **)operator new(0x18uLL);
        v9[1] = 0;
        v9[2] = 0;
        *int v9 = 0;
        *((void *)this + 3) = v9;
      }
      if (v9 != v8)
      {
        char v10 = *((unsigned char *)v8 + 23);
        if (*((char *)v9 + 23) < 0)
        {
          if (v10 >= 0) {
            uint64_t v12 = v8;
          }
          else {
            uint64_t v12 = *v8;
          }
          if (v10 >= 0) {
            size_t v13 = *((unsigned __int8 *)v8 + 23);
          }
          else {
            size_t v13 = (size_t)v8[1];
          }
          std::string::__assign_no_alias<false>(v9, v12, v13);
        }
        else if ((*((unsigned char *)v8 + 23) & 0x80) != 0)
        {
          std::string::__assign_no_alias<true>(v9, *v8, (size_t)v8[1]);
        }
        else
        {
          long long v11 = *(_OWORD *)v8;
          v9[2] = v8[2];
          *(_OWORD *)int v9 = v11;
        }
      }
      return;
    }
LABEL_11:
    int v7 = *((_DWORD *)a2 + 5);
    *((_DWORD *)this + 9) |= 4u;
    *((_DWORD *)this + 5) = v7;
    if ((*((_DWORD *)a2 + 9) & 8) == 0) {
      return;
    }
    goto LABEL_12;
  }
}

void sub_1C58E94EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1C58E9500(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1C58E9568(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

void awd::metrics::CommCenterLowPowerEvent::~CommCenterLowPowerEvent(awd::metrics::CommCenterLowPowerEvent *this)
{
  *(void *)this = &unk_1F20FBEA8;
  uint64_t v2 = *((void *)this + 3);
  if (v2 != MEMORY[0x1E4FBA920] && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0) {
      operator delete(*(void **)v2);
    }
    operator delete((void *)v2);
  }

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  uint64_t v2;
  uint64_t vars8;

  *(void *)this = &unk_1F20FBEA8;
  uint64_t v2 = *((void *)this + 3);
  if (v2 != MEMORY[0x1E4FBA920] && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0) {
      operator delete(*(void **)v2);
    }
    operator delete((void *)v2);
  }

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  uint64_t v2;
  void *v4;
  uint64_t vars8;

  *(void *)this = &unk_1F20FBEA8;
  uint64_t v2 = *((void *)this + 3);
  if (v2 != MEMORY[0x1E4FBA920] && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0) {
      operator delete(*(void **)v2);
    }
    operator delete((void *)v2);
  }
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);

  operator delete(v4);
}

void awd::metrics::CommCenterLowPowerEvent::SharedDtor(awd::metrics::CommCenterLowPowerEvent *this)
{
  uint64_t v1 = *((void *)this + 3);
  if (v1 != MEMORY[0x1E4FBA920] && v1 != 0)
  {
    if (*(char *)(v1 + 23) < 0)
    {
      operator delete(*(void **)v1);
      uint64_t v3 = (void *)v1;
    }
    else
    {
      uint64_t v3 = (void *)*((void *)this + 3);
    }
    operator delete(v3);
  }
}

uint64_t awd::metrics::CommCenterLowPowerEvent::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 32) = a2;
  return this;
}

uint64_t awd::metrics::CommCenterLowPowerEvent::default_instance(awd::metrics::CommCenterLowPowerEvent *this, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t result = awd::metrics::CommCenterLowPowerEvent::default_instance_;
  if (!awd::metrics::CommCenterLowPowerEvent::default_instance_)
  {
    awd::metrics::protobuf_AddDesc_CCMetricsABMPower_2eproto(0, a2, a3, a4);
    return awd::metrics::CommCenterLowPowerEvent::default_instance_;
  }
  return result;
}

void *awd::metrics::CommCenterLowPowerEvent::New(awd::metrics::CommCenterLowPowerEvent *this)
{
  uint64_t result = operator new(0x28uLL);
  uint64_t v2 = MEMORY[0x1E4FBA920];
  void *result = &unk_1F20FBEA8;
  result[1] = 0;
  result[2] = 0;
  result[3] = v2;
  result[4] = 0;
  return result;
}

uint64_t awd::metrics::CommCenterLowPowerEvent::Clear(uint64_t this)
{
  char v1 = *(unsigned char *)(this + 36);
  if (!v1) {
    goto LABEL_6;
  }
  *(void *)(this + 8) = 0;
  *(void *)(this + 16) = 0;
  if ((v1 & 8) == 0) {
    goto LABEL_6;
  }
  uint64_t v2 = *(void *)(this + 24);
  if (v2 == MEMORY[0x1E4FBA920]) {
    goto LABEL_6;
  }
  if ((*(char *)(v2 + 23) & 0x80000000) == 0)
  {
    *(unsigned char *)uint64_t v2 = 0;
    *(unsigned char *)(v2 + 23) = 0;
LABEL_6:
    *(_DWORD *)(this + 36) = 0;
    return this;
  }
  **(unsigned char **)uint64_t v2 = 0;
  *(void *)(v2 + 8) = 0;
  *(_DWORD *)(this + 36) = 0;
  return this;
}

uint64_t awd::metrics::CommCenterLowPowerEvent::MergePartialFromCodedStream(awd::metrics::CommCenterLowPowerEvent *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  int v4 = (unint64_t *)((char *)this + 8);
  uint64_t v5 = (unsigned int *)((char *)this + 16);
  int v6 = (unsigned int *)((char *)this + 20);
  uint64_t v7 = MEMORY[0x1E4FBA920];
  while (2)
  {
    int v8 = (char *)*((void *)a2 + 1);
    if ((unint64_t)v8 >= *((void *)a2 + 2) || *v8 < 0)
    {
      unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
      *((_DWORD *)a2 + 8) = TagFallback;
      if (!TagFallback) {
        return 1;
      }
    }
    else
    {
      unint64_t TagFallback = *v8;
      *((_DWORD *)a2 + 8) = TagFallback;
      *((void *)a2 + 1) = v8 + 1;
      if (!TagFallback) {
        return 1;
      }
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        int v10 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_28;
        }
        uint64_t v12 = (char *)*((void *)a2 + 1);
        unint64_t v11 = *((void *)a2 + 2);
        if ((unint64_t)v12 < v11 && (*v12 & 0x80000000) == 0)
        {
          unint64_t *v4 = *v12;
          size_t v13 = v12 + 1;
          *((void *)a2 + 1) = v13;
          *((_DWORD *)this + 9) |= 1u;
          if ((unint64_t)v13 >= v11) {
            continue;
          }
          goto LABEL_33;
        }
        uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2, v4);
        if (result)
        {
          size_t v13 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v11 = *((void *)a2 + 2);
          *((_DWORD *)this + 9) |= 1u;
          if ((unint64_t)v13 >= v11) {
            continue;
          }
LABEL_33:
          if (*v13 != 16) {
            continue;
          }
          int v14 = v13 + 1;
          *((void *)a2 + 1) = v14;
          if ((unint64_t)v14 >= v11) {
            goto LABEL_38;
          }
          goto LABEL_35;
        }
        break;
      case 2u:
        int v10 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_28;
        }
        int v14 = (char *)*((void *)a2 + 1);
        unint64_t v11 = *((void *)a2 + 2);
        if ((unint64_t)v14 >= v11) {
          goto LABEL_38;
        }
LABEL_35:
        if (*v14 < 0)
        {
LABEL_38:
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v5);
          if (!result) {
            return result;
          }
          unint64_t v18 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v11 = *((void *)a2 + 2);
          *((_DWORD *)this + 9) |= 2u;
          if ((unint64_t)v18 >= v11) {
            continue;
          }
        }
        else
        {
          *uint64_t v5 = *v14;
          unint64_t v18 = v14 + 1;
          *((void *)a2 + 1) = v18;
          *((_DWORD *)this + 9) |= 2u;
          if ((unint64_t)v18 >= v11) {
            continue;
          }
        }
        if (*v18 != 24) {
          continue;
        }
        int v15 = v18 + 1;
        *((void *)a2 + 1) = v15;
        if ((unint64_t)v15 >= v11) {
          goto LABEL_45;
        }
LABEL_42:
        if (*v15 < 0)
        {
LABEL_45:
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v6);
          if (!result) {
            return result;
          }
          unint64_t v19 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v21 = *((void *)a2 + 2);
          int v20 = *((_DWORD *)this + 9) | 4;
          *((_DWORD *)this + 9) = v20;
          if ((unint64_t)v19 >= v21) {
            continue;
          }
        }
        else
        {
          *int v6 = *v15;
          unint64_t v19 = v15 + 1;
          *((void *)a2 + 1) = v19;
          int v20 = *((_DWORD *)this + 9) | 4;
          *((_DWORD *)this + 9) = v20;
          if ((unint64_t)v19 >= v11) {
            continue;
          }
        }
        if (*v19 == 34)
        {
          *((void *)a2 + 1) = v19 + 1;
          *((_DWORD *)this + 9) = v20 | 8;
          if (*((void *)this + 3) == v7)
          {
LABEL_22:
            uint64_t v16 = operator new(0x18uLL);
            v16[1] = 0;
            v16[2] = 0;
            void *v16 = 0;
            *((void *)this + 3) = v16;
          }
LABEL_23:
          uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
          if (!result) {
            return result;
          }
          if (*((void *)a2 + 1) == *((void *)a2 + 2)
            && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
          {
            *((_DWORD *)a2 + 8) = 0;
            uint64_t result = 1;
            *((unsigned char *)a2 + 36) = 1;
            return result;
          }
        }
        continue;
      case 3u:
        int v10 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_28;
        }
        int v15 = (char *)*((void *)a2 + 1);
        unint64_t v11 = *((void *)a2 + 2);
        if ((unint64_t)v15 >= v11) {
          goto LABEL_45;
        }
        goto LABEL_42;
      case 4u:
        int v10 = TagFallback & 7;
        if (v10 != 2) {
          goto LABEL_28;
        }
        *((_DWORD *)this + 9) |= 8u;
        if (*((void *)this + 3) == v7) {
          goto LABEL_22;
        }
        goto LABEL_23;
      default:
        int v10 = TagFallback & 7;
LABEL_28:
        if (v10 == 4) {
          return 1;
        }
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) == 0)return 0; {
        continue;
        }
    }
    return result;
  }
}

uint64_t awd::metrics::CommCenterLowPowerEvent::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = (unsigned int *)this;
  unsigned int v6 = *(_DWORD *)(this + 36);
  if (v6)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(void *)(this + 8), (uint64_t)a2, a4);
    unsigned int v6 = v5[9];
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, v5[5], (uint64_t)a2, a4);
      if ((v5[9] & 8) == 0) {
        return this;
      }
      goto LABEL_9;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, v5[4], (uint64_t)a2, a4);
  unsigned int v6 = v5[9];
  if ((v6 & 4) != 0) {
    goto LABEL_8;
  }
LABEL_4:
  if ((v6 & 8) == 0) {
    return this;
  }
LABEL_9:

  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
}

uint64_t awd::metrics::CommCenterLowPowerEvent::ByteSize(awd::metrics::CommCenterLowPowerEvent *this)
{
  LOBYTE(v2) = *((unsigned char *)this + 36);
  if (!(_BYTE)v2)
  {
    uint64_t v3 = 0;
    goto LABEL_6;
  }
  if (*((unsigned char *)this + 36))
  {
    uint64_t v3 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*((wireless_diagnostics::google::protobuf::io::CodedOutputStream **)this + 1))
       + 1;
    int v2 = *((_DWORD *)this + 9);
    if ((v2 & 2) == 0) {
      goto LABEL_12;
    }
  }
  else
  {
    uint64_t v3 = 0;
    if ((*((unsigned char *)this + 36) & 2) == 0) {
      goto LABEL_12;
    }
  }
  uint64_t v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 4);
  if (v5 >= 0x80)
  {
    int v6 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5) + 1;
    int v2 = *((_DWORD *)this + 9);
  }
  else
  {
    int v6 = 2;
  }
  uint64_t v3 = (v6 + v3);
LABEL_12:
  if ((v2 & 4) == 0)
  {
    if ((v2 & 8) != 0) {
      goto LABEL_19;
    }
LABEL_6:
    *((_DWORD *)this + 8) = v3;
    return v3;
  }
  uint64_t v7 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 5);
  if (v7 < 0x80)
  {
    uint64_t v3 = (v3 + 2);
    if ((v2 & 8) != 0) {
      goto LABEL_19;
    }
    goto LABEL_6;
  }
  uint64_t v3 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v7)
     + 1
     + v3;
  if ((*((_DWORD *)this + 9) & 8) == 0) {
    goto LABEL_6;
  }
LABEL_19:
  uint64_t v8 = *((void *)this + 3);
  int v9 = *(unsigned __int8 *)(v8 + 23);
  char v10 = v9;
  uint64_t v11 = *(void *)(v8 + 8);
  if ((v9 & 0x80u) == 0) {
    unint64_t v12 = *(unsigned __int8 *)(v8 + 23);
  }
  else {
    unint64_t v12 = v11;
  }
  if (v12 >= 0x80)
  {
    int v13 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v12);
    int v9 = *(unsigned __int8 *)(v8 + 23);
    uint64_t v11 = *(void *)(v8 + 8);
    char v10 = *(unsigned char *)(v8 + 23);
  }
  else
  {
    int v13 = 1;
  }
  if (v10 < 0) {
    int v9 = v11;
  }
  int v14 = v3 + v13 + v9;
  *((_DWORD *)this + 8) = v14 + 1;
  return (v14 + 1);
}

void awd::metrics::CommCenterLowPowerEvent::CopyFrom(awd::metrics::CommCenterLowPowerEvent *this, const awd::metrics::CommCenterLowPowerEvent *a2)
{
  if (a2 != this)
  {
    (*(void (**)(awd::metrics::CommCenterLowPowerEvent *))(*(void *)this + 32))(this);
    awd::metrics::CommCenterLowPowerEvent::MergeFrom(this, a2);
  }
}

uint64_t awd::metrics::CommCenterLowPowerEvent::IsInitialized(awd::metrics::CommCenterLowPowerEvent *this)
{
  return 1;
}

uint64_t awd::metrics::CommCenterLowPowerEvent::Swap(uint64_t this, awd::metrics::CommCenterLowPowerEvent *a2)
{
  if (a2 != (awd::metrics::CommCenterLowPowerEvent *)this)
  {
    uint64_t v2 = *(void *)(this + 8);
    *(void *)(this + 8) = *((void *)a2 + 1);
    *((void *)a2 + 1) = v2;
    LODWORD(v2) = *(_DWORD *)(this + 16);
    *(_DWORD *)(this + 16) = *((_DWORD *)a2 + 4);
    *((_DWORD *)a2 + 4) = v2;
    LODWORD(v2) = *(_DWORD *)(this + 20);
    *(_DWORD *)(this + 20) = *((_DWORD *)a2 + 5);
    *((_DWORD *)a2 + 5) = v2;
    uint64_t v3 = *(void *)(this + 24);
    *(void *)(this + 24) = *((void *)a2 + 3);
    *((void *)a2 + 3) = v3;
    LODWORD(v3) = *(_DWORD *)(this + 36);
    *(_DWORD *)(this + 36) = *((_DWORD *)a2 + 9);
    *((_DWORD *)a2 + 9) = v3;
    LODWORD(v3) = *(_DWORD *)(this + 32);
    *(_DWORD *)(this + 32) = *((_DWORD *)a2 + 8);
    *((_DWORD *)a2 + 8) = v3;
  }
  return this;
}

char *awd::metrics::CommCenterLowPowerEvent::GetTypeName@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = (char *)operator new(0x28uLL);
  *(void *)a1 = result;
  *(_OWORD *)(a1 + 8) = xmmword_1C59A3D60;
  strcpy(result, "awd.metrics.CommCenterLowPowerEvent");
  return result;
}

uint64_t awd::metrics::CommCenterWakeInfo::SharedCtor(uint64_t this)
{
  *(void *)(this + 8) = 0;
  *(void *)(this + 16) = 0;
  *(_DWORD *)(this + 32) = 0;
  *(void *)(this + 24) = 0;
  return this;
}

awd::metrics::CommCenterWakeInfo *awd::metrics::CommCenterWakeInfo::CommCenterWakeInfo(awd::metrics::CommCenterWakeInfo *this, const awd::metrics::CommCenterWakeInfo *a2)
{
  *(void *)this = &unk_1F20FBF20;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((_DWORD *)this + 8) = 0;
  awd::metrics::CommCenterWakeInfo::MergeFrom(this, a2);
  return this;
}

{
  *(void *)this = &unk_1F20FBF20;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((_DWORD *)this + 8) = 0;
  awd::metrics::CommCenterWakeInfo::MergeFrom(this, a2);
  return this;
}

void sub_1C58E9F4C(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

void awd::metrics::CommCenterWakeInfo::MergeFrom(awd::metrics::CommCenterWakeInfo *this, const awd::metrics::CommCenterWakeInfo *a2)
{
  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v9);
  }
  LOBYTE(v4) = *((unsigned char *)a2 + 32);
  if ((_BYTE)v4)
  {
    if (*((unsigned char *)a2 + 32))
    {
      uint64_t v6 = *((void *)a2 + 1);
      *((_DWORD *)this + 8) |= 1u;
      *((void *)this + 1) = v6;
      int v4 = *((_DWORD *)a2 + 8);
      if ((v4 & 2) == 0)
      {
LABEL_6:
        if ((v4 & 4) == 0) {
          goto LABEL_7;
        }
        goto LABEL_12;
      }
    }
    else if ((*((unsigned char *)a2 + 32) & 2) == 0)
    {
      goto LABEL_6;
    }
    int v7 = *((_DWORD *)a2 + 4);
    *((_DWORD *)this + 8) |= 2u;
    *((_DWORD *)this + 4) = v7;
    int v4 = *((_DWORD *)a2 + 8);
    if ((v4 & 4) == 0)
    {
LABEL_7:
      if ((v4 & 8) == 0) {
        return;
      }
      goto LABEL_8;
    }
LABEL_12:
    int v8 = *((_DWORD *)a2 + 5);
    *((_DWORD *)this + 8) |= 4u;
    *((_DWORD *)this + 5) = v8;
    if ((*((_DWORD *)a2 + 8) & 8) == 0) {
      return;
    }
LABEL_8:
    int v5 = *((_DWORD *)a2 + 6);
    *((_DWORD *)this + 8) |= 8u;
    *((_DWORD *)this + 6) = v5;
  }
}

void sub_1C58EA054(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1C58EA068(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1C58EA0C8(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

void awd::metrics::CommCenterWakeInfo::~CommCenterWakeInfo(awd::metrics::CommCenterWakeInfo *this)
{
  *(void *)this = &unk_1F20FBF20;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  *(void *)this = &unk_1F20FBF20;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  void *v1;
  uint64_t vars8;

  *(void *)this = &unk_1F20FBF20;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);

  operator delete(v1);
}

uint64_t awd::metrics::CommCenterWakeInfo::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 28) = a2;
  return this;
}

uint64_t awd::metrics::CommCenterWakeInfo::default_instance(awd::metrics::CommCenterWakeInfo *this, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t result = awd::metrics::CommCenterWakeInfo::default_instance_;
  if (!awd::metrics::CommCenterWakeInfo::default_instance_)
  {
    awd::metrics::protobuf_AddDesc_CCMetricsABMPower_2eproto(0, a2, a3, a4);
    return awd::metrics::CommCenterWakeInfo::default_instance_;
  }
  return result;
}

void *awd::metrics::CommCenterWakeInfo::New(awd::metrics::CommCenterWakeInfo *this)
{
  uint64_t result = operator new(0x28uLL);
  void *result = &unk_1F20FBF20;
  result[1] = 0;
  result[2] = 0;
  result[3] = 0;
  *((_DWORD *)result + 8) = 0;
  return result;
}

uint64_t awd::metrics::CommCenterWakeInfo::Clear(uint64_t this)
{
  if (*(unsigned char *)(this + 32))
  {
    *(void *)(this + 8) = 0;
    *(void *)(this + 16) = 0;
    *(_DWORD *)(this + 24) = 0;
  }
  *(_DWORD *)(this + 32) = 0;
  return this;
}

uint64_t awd::metrics::CommCenterWakeInfo::MergePartialFromCodedStream(awd::metrics::CommCenterWakeInfo *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  int v4 = (unint64_t *)((char *)this + 8);
  int v5 = (unsigned int *)((char *)this + 16);
  uint64_t v6 = (unsigned int *)((char *)this + 20);
  int v7 = (unsigned int *)((char *)this + 24);
  while (2)
  {
    int v8 = (char *)*((void *)a2 + 1);
    if ((unint64_t)v8 >= *((void *)a2 + 2) || *v8 < 0)
    {
      unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
      *((_DWORD *)a2 + 8) = TagFallback;
      if (!TagFallback) {
        return 1;
      }
    }
    else
    {
      unint64_t TagFallback = *v8;
      *((_DWORD *)a2 + 8) = TagFallback;
      *((void *)a2 + 1) = v8 + 1;
      if (!TagFallback) {
        return 1;
      }
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        int v10 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_21;
        }
        unint64_t v12 = (char *)*((void *)a2 + 1);
        unint64_t v11 = *((void *)a2 + 2);
        if ((unint64_t)v12 >= v11 || *v12 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2, v4);
          if (!result) {
            return result;
          }
          int v13 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v11 = *((void *)a2 + 2);
          *((_DWORD *)this + 8) |= 1u;
          if ((unint64_t)v13 >= v11) {
            continue;
          }
        }
        else
        {
          unint64_t *v4 = *v12;
          int v13 = v12 + 1;
          *((void *)a2 + 1) = v13;
          *((_DWORD *)this + 8) |= 1u;
          if ((unint64_t)v13 >= v11) {
            continue;
          }
        }
        if (*v13 != 16) {
          continue;
        }
        int v14 = v13 + 1;
        *((void *)a2 + 1) = v14;
        if ((unint64_t)v14 >= v11) {
          goto LABEL_33;
        }
        goto LABEL_30;
      case 2u:
        int v10 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_21;
        }
        int v14 = (char *)*((void *)a2 + 1);
        unint64_t v11 = *((void *)a2 + 2);
        if ((unint64_t)v14 >= v11) {
          goto LABEL_33;
        }
LABEL_30:
        if ((*v14 & 0x80000000) == 0)
        {
          *int v5 = *v14;
          uint64_t v17 = v14 + 1;
          *((void *)a2 + 1) = v17;
          *((_DWORD *)this + 8) |= 2u;
          if ((unint64_t)v17 < v11) {
            goto LABEL_35;
          }
          continue;
        }
LABEL_33:
        uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v5);
        if (!result) {
          return result;
        }
        uint64_t v17 = (unsigned char *)*((void *)a2 + 1);
        unint64_t v11 = *((void *)a2 + 2);
        *((_DWORD *)this + 8) |= 2u;
        if ((unint64_t)v17 >= v11) {
          continue;
        }
LABEL_35:
        if (*v17 != 24) {
          continue;
        }
        int v15 = v17 + 1;
        *((void *)a2 + 1) = v15;
        if ((unint64_t)v15 >= v11) {
          goto LABEL_40;
        }
LABEL_37:
        if ((*v15 & 0x80000000) == 0)
        {
          *uint64_t v6 = *v15;
          unint64_t v18 = v15 + 1;
          *((void *)a2 + 1) = v18;
          *((_DWORD *)this + 8) |= 4u;
          if ((unint64_t)v18 < v11) {
            goto LABEL_42;
          }
          continue;
        }
LABEL_40:
        uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v6);
        if (!result) {
          return result;
        }
        unint64_t v18 = (unsigned char *)*((void *)a2 + 1);
        unint64_t v11 = *((void *)a2 + 2);
        *((_DWORD *)this + 8) |= 4u;
        if ((unint64_t)v18 >= v11) {
          continue;
        }
LABEL_42:
        if (*v18 != 32) {
          continue;
        }
        uint64_t v16 = v18 + 1;
        *((void *)a2 + 1) = v16;
        if ((unint64_t)v16 >= v11) {
          goto LABEL_47;
        }
LABEL_44:
        if ((*v16 & 0x80000000) == 0)
        {
          *int v7 = *v16;
          unint64_t v19 = (unsigned __int8 *)(v16 + 1);
          *((void *)a2 + 1) = v19;
          *((_DWORD *)this + 8) |= 8u;
          if (v19 == (unsigned __int8 *)v11) {
            goto LABEL_49;
          }
          continue;
        }
LABEL_47:
        uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v7);
        if (!result) {
          return result;
        }
        uint64_t v21 = *((void *)a2 + 1);
        uint64_t v20 = *((void *)a2 + 2);
        *((_DWORD *)this + 8) |= 8u;
        if (v21 != v20) {
          continue;
        }
LABEL_49:
        if (!*((_DWORD *)a2 + 11) && *((_DWORD *)a2 + 6) != *((_DWORD *)a2 + 10)) {
          continue;
        }
        *((_DWORD *)a2 + 8) = 0;
        uint64_t result = 1;
        *((unsigned char *)a2 + 36) = 1;
        return result;
      case 3u:
        int v10 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_21;
        }
        int v15 = (char *)*((void *)a2 + 1);
        unint64_t v11 = *((void *)a2 + 2);
        if ((unint64_t)v15 >= v11) {
          goto LABEL_40;
        }
        goto LABEL_37;
      case 4u:
        int v10 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_21;
        }
        uint64_t v16 = (char *)*((void *)a2 + 1);
        unint64_t v11 = *((void *)a2 + 2);
        if ((unint64_t)v16 >= v11) {
          goto LABEL_47;
        }
        goto LABEL_44;
      default:
        int v10 = TagFallback & 7;
LABEL_21:
        if (v10 == 4) {
          return 1;
        }
        if (wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback))continue; {
        return 0;
        }
    }
  }
}

uint64_t awd::metrics::CommCenterWakeInfo::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  int v5 = (unsigned int *)this;
  unsigned int v6 = *(_DWORD *)(this + 32);
  if (v6)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(void *)(this + 8), (uint64_t)a2, a4);
    unsigned int v6 = v5[8];
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, v5[5], (uint64_t)a2, a4);
      if ((v5[8] & 8) == 0) {
        return this;
      }
      goto LABEL_9;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, v5[4], (uint64_t)a2, a4);
  unsigned int v6 = v5[8];
  if ((v6 & 4) != 0) {
    goto LABEL_8;
  }
LABEL_4:
  if ((v6 & 8) == 0) {
    return this;
  }
LABEL_9:
  uint64_t v7 = v5[6];

  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, v7, (uint64_t)a2, a4);
}

uint64_t awd::metrics::CommCenterWakeInfo::ByteSize(awd::metrics::CommCenterWakeInfo *this)
{
  LOBYTE(v2) = *((unsigned char *)this + 32);
  if (!(_BYTE)v2)
  {
    uint64_t v3 = 0;
    goto LABEL_6;
  }
  if (*((unsigned char *)this + 32))
  {
    uint64_t v3 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*((wireless_diagnostics::google::protobuf::io::CodedOutputStream **)this + 1))
       + 1;
    int v2 = *((_DWORD *)this + 8);
    if ((v2 & 2) == 0) {
      goto LABEL_12;
    }
  }
  else
  {
    uint64_t v3 = 0;
    if ((*((unsigned char *)this + 32) & 2) == 0) {
      goto LABEL_12;
    }
  }
  int v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 4);
  if (v5 >= 0x80)
  {
    int v6 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5) + 1;
    int v2 = *((_DWORD *)this + 8);
  }
  else
  {
    int v6 = 2;
  }
  uint64_t v3 = (v6 + v3);
LABEL_12:
  if ((v2 & 4) == 0)
  {
    if ((v2 & 8) != 0) {
      goto LABEL_19;
    }
LABEL_6:
    *((_DWORD *)this + 7) = v3;
    return v3;
  }
  uint64_t v7 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 5);
  if (v7 < 0x80)
  {
    uint64_t v3 = (v3 + 2);
    if ((v2 & 8) != 0) {
      goto LABEL_19;
    }
    goto LABEL_6;
  }
  uint64_t v3 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v7)
     + 1
     + v3;
  if ((*((_DWORD *)this + 8) & 8) == 0) {
    goto LABEL_6;
  }
LABEL_19:
  int v8 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 6);
  if (v8 >= 0x80) {
    uint64_t v9 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v8)
  }
       + 1
       + v3;
  else {
    uint64_t v9 = (v3 + 2);
  }
  *((_DWORD *)this + 7) = v9;
  return v9;
}

void awd::metrics::CommCenterWakeInfo::CopyFrom(awd::metrics::CommCenterWakeInfo *this, const awd::metrics::CommCenterWakeInfo *a2)
{
  if (a2 != this)
  {
    (*(void (**)(awd::metrics::CommCenterWakeInfo *))(*(void *)this + 32))(this);
    awd::metrics::CommCenterWakeInfo::MergeFrom(this, a2);
  }
}

uint64_t awd::metrics::CommCenterWakeInfo::IsInitialized(awd::metrics::CommCenterWakeInfo *this)
{
  return 1;
}

uint64_t awd::metrics::CommCenterWakeInfo::Swap(uint64_t this, awd::metrics::CommCenterWakeInfo *a2)
{
  if (a2 != (awd::metrics::CommCenterWakeInfo *)this)
  {
    uint64_t v2 = *(void *)(this + 8);
    *(void *)(this + 8) = *((void *)a2 + 1);
    *((void *)a2 + 1) = v2;
    LODWORD(v2) = *(_DWORD *)(this + 16);
    *(_DWORD *)(this + 16) = *((_DWORD *)a2 + 4);
    *((_DWORD *)a2 + 4) = v2;
    LODWORD(v2) = *(_DWORD *)(this + 20);
    *(_DWORD *)(this + 20) = *((_DWORD *)a2 + 5);
    *((_DWORD *)a2 + 5) = v2;
    LODWORD(v2) = *(_DWORD *)(this + 24);
    *(_DWORD *)(this + 24) = *((_DWORD *)a2 + 6);
    *((_DWORD *)a2 + 6) = v2;
    LODWORD(v2) = *(_DWORD *)(this + 32);
    *(_DWORD *)(this + 32) = *((_DWORD *)a2 + 8);
    *((_DWORD *)a2 + 8) = v2;
    LODWORD(v2) = *(_DWORD *)(this + 28);
    *(_DWORD *)(this + 28) = *((_DWORD *)a2 + 7);
    *((_DWORD *)a2 + 7) = v2;
  }
  return this;
}

double awd::metrics::CommCenterWakeInfo::GetTypeName@<D0>(uint64_t a1@<X8>)
{
  uint64_t v3 = (char *)operator new(0x20uLL);
  *(void *)a1 = v3;
  *(_OWORD *)(a1 + 8) = xmmword_1C59A4D00;
  strcpy(v3, "awd.metrics.CommCenterWakeInfo");
  return *(double *)"mmCenterWakeInfo";
}

double awd::metrics::CommCenterLowPowerStats::SharedCtor(awd::metrics::CommCenterLowPowerStats *this)
{
  *((void *)this + 8) = 0;
  *((_DWORD *)this + 18) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  return result;
}

awd::metrics::CommCenterLowPowerStats *awd::metrics::CommCenterLowPowerStats::CommCenterLowPowerStats(awd::metrics::CommCenterLowPowerStats *this, const awd::metrics::CommCenterLowPowerStats *a2)
{
  *(void *)this = &unk_1F20FBF98;
  *((void *)this + 8) = 0;
  *((_DWORD *)this + 18) = 0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_DWORD *)this + 14) = 0;
  awd::metrics::CommCenterLowPowerStats::MergeFrom(this, a2);
  return this;
}

{
  *(void *)this = &unk_1F20FBF98;
  *((void *)this + 8) = 0;
  *((_DWORD *)this + 18) = 0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_DWORD *)this + 14) = 0;
  awd::metrics::CommCenterLowPowerStats::MergeFrom(this, a2);
  return this;
}

void sub_1C58EA8DC(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::RepeatedPtrField<awd::metrics::CrashReasonType>::~RepeatedPtrField((uint64_t)v1 + 40);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

void awd::metrics::CommCenterLowPowerStats::MergeFrom(awd::metrics::CommCenterLowPowerStats *this, const awd::metrics::CommCenterLowPowerStats *a2)
{
  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v21);
  }
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((awd::metrics::CommCenterLowPowerStats *)((char *)this + 40));
  if (*((int *)a2 + 12) >= 1)
  {
    uint64_t v4 = 0;
    do
    {
      while (1)
      {
        int v8 = *(const awd::metrics::CommCenterMissedMTMessage **)(*((void *)a2 + 5) + 8 * v4);
        int v9 = *((_DWORD *)this + 13);
        uint64_t v10 = *((int *)this + 12);
        if ((int)v10 >= v9) {
          break;
        }
        uint64_t v11 = *((void *)this + 5);
        *((_DWORD *)this + 12) = v10 + 1;
        awd::metrics::CommCenterMissedMTMessage::MergeFrom(*(awd::metrics::CommCenterMissedMTMessage **)(v11 + 8 * v10), v8);
        if (++v4 >= *((int *)a2 + 12)) {
          goto LABEL_11;
        }
      }
      if (v9 == *((_DWORD *)this + 14))
      {
        wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((awd::metrics::CommCenterLowPowerStats *)((char *)this + 40));
        int v9 = *((_DWORD *)this + 13);
      }
      *((_DWORD *)this + 13) = v9 + 1;
      int v5 = (awd::metrics::CommCenterMissedMTMessage *)operator new(0x20uLL);
      *(void *)int v5 = &unk_1F20FBE30;
      *((void *)v5 + 1) = 0;
      *((void *)v5 + 2) = 0;
      *((void *)v5 + 3) = 0;
      uint64_t v6 = *((void *)this + 5);
      uint64_t v7 = *((int *)this + 12);
      *((_DWORD *)this + 12) = v7 + 1;
      *(void *)(v6 + 8 * v7) = v5;
      awd::metrics::CommCenterMissedMTMessage::MergeFrom(v5, v8);
      ++v4;
    }
    while (v4 < *((int *)a2 + 12));
  }
LABEL_11:
  LOBYTE(v12) = *((unsigned char *)a2 + 72);
  if ((_BYTE)v12)
  {
    if (*((unsigned char *)a2 + 72))
    {
      uint64_t v14 = *((void *)a2 + 1);
      *((_DWORD *)this + 18) |= 1u;
      *((void *)this + 1) = v14;
      int v12 = *((_DWORD *)a2 + 18);
      if ((v12 & 2) == 0)
      {
LABEL_14:
        if ((v12 & 4) == 0) {
          goto LABEL_15;
        }
        goto LABEL_24;
      }
    }
    else if ((*((unsigned char *)a2 + 72) & 2) == 0)
    {
      goto LABEL_14;
    }
    int v15 = *((_DWORD *)a2 + 4);
    *((_DWORD *)this + 18) |= 2u;
    *((_DWORD *)this + 4) = v15;
    int v12 = *((_DWORD *)a2 + 18);
    if ((v12 & 4) == 0)
    {
LABEL_15:
      if ((v12 & 8) == 0) {
        goto LABEL_16;
      }
      goto LABEL_25;
    }
LABEL_24:
    int v16 = *((_DWORD *)a2 + 5);
    *((_DWORD *)this + 18) |= 4u;
    *((_DWORD *)this + 5) = v16;
    int v12 = *((_DWORD *)a2 + 18);
    if ((v12 & 8) == 0)
    {
LABEL_16:
      if ((v12 & 0x10) == 0) {
        goto LABEL_17;
      }
      goto LABEL_26;
    }
LABEL_25:
    int v17 = *((_DWORD *)a2 + 6);
    *((_DWORD *)this + 18) |= 8u;
    *((_DWORD *)this + 6) = v17;
    int v12 = *((_DWORD *)a2 + 18);
    if ((v12 & 0x10) == 0)
    {
LABEL_17:
      if ((v12 & 0x20) == 0) {
        goto LABEL_18;
      }
      goto LABEL_27;
    }
LABEL_26:
    int v18 = *((_DWORD *)a2 + 7);
    *((_DWORD *)this + 18) |= 0x10u;
    *((_DWORD *)this + 7) = v18;
    int v12 = *((_DWORD *)a2 + 18);
    if ((v12 & 0x20) == 0)
    {
LABEL_18:
      if ((v12 & 0x40) == 0) {
        goto LABEL_19;
      }
      goto LABEL_28;
    }
LABEL_27:
    int v19 = *((_DWORD *)a2 + 8);
    *((_DWORD *)this + 18) |= 0x20u;
    *((_DWORD *)this + 8) = v19;
    int v12 = *((_DWORD *)a2 + 18);
    if ((v12 & 0x40) == 0)
    {
LABEL_19:
      if ((v12 & 0x80) == 0) {
        return;
      }
      goto LABEL_20;
    }
LABEL_28:
    int v20 = *((_DWORD *)a2 + 9);
    *((_DWORD *)this + 18) |= 0x40u;
    *((_DWORD *)this + 9) = v20;
    if ((*((_DWORD *)a2 + 18) & 0x80) == 0) {
      return;
    }
LABEL_20:
    int v13 = *((_DWORD *)a2 + 16);
    *((_DWORD *)this + 18) |= 0x80u;
    *((_DWORD *)this + 16) = v13;
  }
}

void sub_1C58EAB68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1C58EAB7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1C58EABF8(_Unwind_Exception *a1)
{
  int v3 = *(_DWORD *)(v1 + 52);
  if (v3 >= 1)
  {
    for (uint64_t i = 0; i < v3; ++i)
    {
      uint64_t v5 = *(void *)(*(void *)(v1 + 40) + 8 * i);
      if (v5)
      {
        (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
        int v3 = *(_DWORD *)(v1 + 52);
      }
    }
  }
  uint64_t v6 = *(void **)(v1 + 40);
  if (v6) {
    operator delete[](v6);
  }
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite((wireless_diagnostics::google::protobuf::MessageLite *)v1);
  _Unwind_Resume(a1);
}

void awd::metrics::CommCenterLowPowerStats::~CommCenterLowPowerStats(awd::metrics::CommCenterLowPowerStats *this)
{
  *(void *)this = &unk_1F20FBF98;
  int v2 = *((_DWORD *)this + 13);
  if (v2 >= 1)
  {
    for (uint64_t i = 0; i < v2; ++i)
    {
      uint64_t v4 = *(void *)(*((void *)this + 5) + 8 * i);
      if (v4)
      {
        (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
        int v2 = *((_DWORD *)this + 13);
      }
    }
  }
  uint64_t v5 = (void *)*((void *)this + 5);
  if (v5) {
    operator delete[](v5);
  }

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  int v2;
  uint64_t i;
  uint64_t v4;
  void *v5;
  uint64_t vars8;

  *(void *)this = &unk_1F20FBF98;
  int v2 = *((_DWORD *)this + 13);
  if (v2 >= 1)
  {
    for (uint64_t i = 0; i < v2; ++i)
    {
      uint64_t v4 = *(void *)(*((void *)this + 5) + 8 * i);
      if (v4)
      {
        (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
        int v2 = *((_DWORD *)this + 13);
      }
    }
  }
  uint64_t v5 = (void *)*((void *)this + 5);
  if (v5) {
    operator delete[](v5);
  }

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  int v2;
  uint64_t i;
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t vars8;

  *(void *)this = &unk_1F20FBF98;
  int v2 = *((_DWORD *)this + 13);
  if (v2 >= 1)
  {
    for (uint64_t i = 0; i < v2; ++i)
    {
      uint64_t v4 = *(void *)(*((void *)this + 5) + 8 * i);
      if (v4)
      {
        (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
        int v2 = *((_DWORD *)this + 13);
      }
    }
  }
  uint64_t v5 = (void *)*((void *)this + 5);
  if (v5) {
    operator delete[](v5);
  }
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);

  operator delete(v6);
}

uint64_t awd::metrics::CommCenterLowPowerStats::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 68) = a2;
  return this;
}

uint64_t awd::metrics::CommCenterLowPowerStats::default_instance(awd::metrics::CommCenterLowPowerStats *this, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t result = awd::metrics::CommCenterLowPowerStats::default_instance_;
  if (!awd::metrics::CommCenterLowPowerStats::default_instance_)
  {
    awd::metrics::protobuf_AddDesc_CCMetricsABMPower_2eproto(0, a2, a3, a4);
    return awd::metrics::CommCenterLowPowerStats::default_instance_;
  }
  return result;
}

double awd::metrics::CommCenterLowPowerStats::New(awd::metrics::CommCenterLowPowerStats *this)
{
  uint64_t v1 = (char *)operator new(0x50uLL);
  *(void *)uint64_t v1 = &unk_1F20FBF98;
  *((void *)v1 + 8) = 0;
  *((_DWORD *)v1 + 18) = 0;
  double result = 0.0;
  *(_OWORD *)(v1 + 8) = 0u;
  *(_OWORD *)(v1 + 24) = 0u;
  *(_OWORD *)(v1 + 40) = 0u;
  *((_DWORD *)v1 + 14) = 0;
  return result;
}

uint64_t awd::metrics::CommCenterLowPowerStats::Clear(uint64_t this)
{
  uint64_t v1 = this;
  if (*(unsigned char *)(this + 72))
  {
    *(_DWORD *)(this + 64) = 0;
    *(_OWORD *)(this + 8) = 0u;
    *(_OWORD *)(this + 24) = 0u;
  }
  if (*(int *)(this + 48) >= 1)
  {
    uint64_t v2 = 0;
    do
    {
      uint64_t v3 = *(void *)(*(void *)(v1 + 40) + 8 * v2);
      this = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 32))(v3);
      ++v2;
    }
    while (v2 < *(int *)(v1 + 48));
  }
  *(_DWORD *)(v1 + 48) = 0;
  *(_DWORD *)(v1 + 72) = 0;
  return this;
}

uint64_t awd::metrics::CommCenterLowPowerStats::MergePartialFromCodedStream(awd::metrics::CommCenterLowPowerStats *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  uint64_t v47 = (unsigned int *)((char *)this + 16);
  uint64_t v4 = (unsigned int *)((char *)this + 20);
  uint64_t v5 = (unsigned int *)((char *)this + 24);
  uint64_t v6 = (unsigned int *)((char *)this + 28);
  uint64_t v7 = (unsigned int *)((char *)this + 32);
  int v8 = (unsigned int *)((char *)this + 36);
  int v9 = (unsigned int *)((char *)this + 64);
  size_t v45 = (unint64_t *)((char *)this + 8);
  int64_t v46 = (awd::metrics::CommCenterLowPowerStats *)((char *)this + 40);
LABEL_2:
  while (2)
  {
    uint64_t v10 = (char *)*((void *)a2 + 1);
    if ((unint64_t)v10 >= *((void *)a2 + 2) || *v10 < 0)
    {
      unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
      *((_DWORD *)a2 + 8) = TagFallback;
      if (!TagFallback) {
        return 1;
      }
    }
    else
    {
      unint64_t TagFallback = *v10;
      *((_DWORD *)a2 + 8) = TagFallback;
      *((void *)a2 + 1) = v10 + 1;
      if (!TagFallback) {
        return 1;
      }
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        int v12 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_34;
        }
        uint64_t v14 = (char *)*((void *)a2 + 1);
        unint64_t v13 = *((void *)a2 + 2);
        if ((unint64_t)v14 >= v13 || *v14 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2, v45);
          if (!result) {
            return result;
          }
          int v15 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v13 = *((void *)a2 + 2);
          *((_DWORD *)this + 18) |= 1u;
          if ((unint64_t)v15 >= v13) {
            continue;
          }
        }
        else
        {
          *size_t v45 = *v14;
          int v15 = v14 + 1;
          *((void *)a2 + 1) = v15;
          *((_DWORD *)this + 18) |= 1u;
          if ((unint64_t)v15 >= v13) {
            continue;
          }
        }
        if (*v15 != 16) {
          continue;
        }
        int v16 = v15 + 1;
        *((void *)a2 + 1) = v16;
        if ((unint64_t)v16 >= v13) {
          goto LABEL_44;
        }
        goto LABEL_41;
      case 2u:
        int v12 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_34;
        }
        int v16 = (unsigned __int8 *)*((void *)a2 + 1);
        unint64_t v13 = *((void *)a2 + 2);
        if ((unint64_t)v16 >= v13) {
          goto LABEL_44;
        }
LABEL_41:
        if ((char)*v16 < 0)
        {
LABEL_44:
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v47);
          if (!result) {
            return result;
          }
          uint64_t v24 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v13 = *((void *)a2 + 2);
          *((_DWORD *)this + 18) |= 2u;
          if ((unint64_t)v24 < v13) {
            goto LABEL_46;
          }
          continue;
        }
        unsigned int *v47 = *v16;
        uint64_t v24 = v16 + 1;
        *((void *)a2 + 1) = v24;
        *((_DWORD *)this + 18) |= 2u;
        if ((unint64_t)v24 >= v13) {
          continue;
        }
LABEL_46:
        if (*v24 != 24) {
          continue;
        }
        int v17 = v24 + 1;
        *((void *)a2 + 1) = v17;
        if ((unint64_t)v17 >= v13) {
          goto LABEL_51;
        }
LABEL_48:
        if ((char)*v17 < 0)
        {
LABEL_51:
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v4);
          if (!result) {
            return result;
          }
          uint64_t v25 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v13 = *((void *)a2 + 2);
          *((_DWORD *)this + 18) |= 4u;
          if ((unint64_t)v25 < v13) {
            goto LABEL_53;
          }
          continue;
        }
        unsigned int *v4 = *v17;
        uint64_t v25 = v17 + 1;
        *((void *)a2 + 1) = v25;
        *((_DWORD *)this + 18) |= 4u;
        if ((unint64_t)v25 >= v13) {
          continue;
        }
LABEL_53:
        if (*v25 != 32) {
          continue;
        }
        int v18 = v25 + 1;
        *((void *)a2 + 1) = v18;
        if ((unint64_t)v18 >= v13) {
          goto LABEL_58;
        }
LABEL_55:
        if ((char)*v18 < 0)
        {
LABEL_58:
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v5);
          if (!result) {
            return result;
          }
          long long v26 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v13 = *((void *)a2 + 2);
          *((_DWORD *)this + 18) |= 8u;
          if ((unint64_t)v26 < v13) {
            goto LABEL_60;
          }
          continue;
        }
        *uint64_t v5 = *v18;
        long long v26 = v18 + 1;
        *((void *)a2 + 1) = v26;
        *((_DWORD *)this + 18) |= 8u;
        if ((unint64_t)v26 >= v13) {
          continue;
        }
LABEL_60:
        if (*v26 != 40) {
          continue;
        }
        int v19 = v26 + 1;
        *((void *)a2 + 1) = v19;
        if ((unint64_t)v19 >= v13) {
          goto LABEL_65;
        }
LABEL_62:
        if ((char)*v19 < 0)
        {
LABEL_65:
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v6);
          if (!result) {
            return result;
          }
          int v27 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v13 = *((void *)a2 + 2);
          *((_DWORD *)this + 18) |= 0x10u;
          if ((unint64_t)v27 < v13) {
            goto LABEL_67;
          }
          continue;
        }
        *uint64_t v6 = *v19;
        int v27 = v19 + 1;
        *((void *)a2 + 1) = v27;
        *((_DWORD *)this + 18) |= 0x10u;
        if ((unint64_t)v27 >= v13) {
          continue;
        }
LABEL_67:
        if (*v27 != 48) {
          continue;
        }
        int v20 = v27 + 1;
        *((void *)a2 + 1) = v20;
        if ((unint64_t)v20 >= v13) {
          goto LABEL_72;
        }
LABEL_69:
        if ((char)*v20 < 0)
        {
LABEL_72:
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v7);
          if (!result) {
            return result;
          }
          int v28 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v13 = *((void *)a2 + 2);
          *((_DWORD *)this + 18) |= 0x20u;
          if ((unint64_t)v28 < v13) {
            goto LABEL_74;
          }
          continue;
        }
        *uint64_t v7 = *v20;
        int v28 = v20 + 1;
        *((void *)a2 + 1) = v28;
        *((_DWORD *)this + 18) |= 0x20u;
        if ((unint64_t)v28 >= v13) {
          continue;
        }
LABEL_74:
        if (*v28 != 56) {
          continue;
        }
        uint64_t v21 = v28 + 1;
        *((void *)a2 + 1) = v21;
LABEL_76:
        if ((unint64_t)v21 >= v13 || (char)*v21 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v8);
          if (!result) {
            return result;
          }
          int v29 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v13 = *((void *)a2 + 2);
          *((_DWORD *)this + 18) |= 0x40u;
          if ((unint64_t)v29 < v13) {
            goto LABEL_82;
          }
          continue;
        }
        *int v8 = *v21;
        int v29 = v21 + 1;
        *((void *)a2 + 1) = v29;
        *((_DWORD *)this + 18) |= 0x40u;
        if ((unint64_t)v29 >= v13) {
          continue;
        }
LABEL_82:
        if (*v29 != 64) {
          continue;
        }
        char v22 = v29 + 1;
        *((void *)a2 + 1) = v22;
LABEL_84:
        if ((unint64_t)v22 >= v13 || (char)*v22 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v9);
          if (!result) {
            return result;
          }
          BOOL v30 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v31 = *((void *)a2 + 2);
          *((_DWORD *)this + 18) |= 0x80u;
          if ((unint64_t)v30 < v31) {
            goto LABEL_90;
          }
          continue;
        }
        *int v9 = *v22;
        BOOL v30 = v22 + 1;
        *((void *)a2 + 1) = v30;
        *((_DWORD *)this + 18) |= 0x80u;
        if ((unint64_t)v30 >= v13) {
          continue;
        }
LABEL_90:
        if (*v30 != 74) {
          continue;
        }
        while (1)
        {
          *((void *)a2 + 1) = v30 + 1;
LABEL_92:
          int v32 = *((_DWORD *)this + 13);
          uint64_t v33 = *((int *)this + 12);
          if ((int)v33 >= v32)
          {
            if (v32 == *((_DWORD *)this + 14))
            {
              wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v46);
              int v32 = *((_DWORD *)this + 13);
            }
            *((_DWORD *)this + 13) = v32 + 1;
            uint64_t v35 = (awd::metrics::CommCenterMissedMTMessage *)operator new(0x20uLL);
            *(void *)uint64_t v35 = &unk_1F20FBE30;
            *((void *)v35 + 1) = 0;
            *((void *)v35 + 2) = 0;
            *((void *)v35 + 3) = 0;
            uint64_t v36 = *((void *)this + 5);
            uint64_t v37 = *((int *)this + 12);
            *((_DWORD *)this + 12) = v37 + 1;
            *(void *)(v36 + 8 * v37) = v35;
          }
          else
          {
            uint64_t v34 = *((void *)this + 5);
            *((_DWORD *)this + 12) = v33 + 1;
            uint64_t v35 = *(awd::metrics::CommCenterMissedMTMessage **)(v34 + 8 * v33);
          }
          unsigned int v48 = -1431655766;
          long long v38 = (char *)*((void *)a2 + 1);
          if ((unint64_t)v38 >= *((void *)a2 + 2) || *v38 < 0)
          {
            if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v48))return 0; {
          }
            }
          else
          {
            unsigned int v48 = *v38;
            *((void *)a2 + 1) = v38 + 1;
          }
          int v39 = *((_DWORD *)a2 + 14);
          int v40 = *((_DWORD *)a2 + 15);
          *((_DWORD *)a2 + 14) = v39 + 1;
          if (v39 >= v40) {
            return 0;
          }
          wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
          if (!awd::metrics::CommCenterMissedMTMessage::MergePartialFromCodedStream(v35, a2)
            || !*((unsigned char *)a2 + 36))
          {
            return 0;
          }
          wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
          int v41 = *((_DWORD *)a2 + 14);
          BOOL v42 = __OFSUB__(v41, 1);
          int v43 = v41 - 1;
          if (v43 < 0 == v42) {
            *((_DWORD *)a2 + 14) = v43;
          }
          BOOL v30 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v44 = (unsigned char *)*((void *)a2 + 2);
          if (v30 >= v44 || *v30 != 74)
          {
            if (v30 == v44 && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
            {
              *((_DWORD *)a2 + 8) = 0;
              uint64_t result = 1;
              *((unsigned char *)a2 + 36) = 1;
              return result;
            }
            goto LABEL_2;
          }
        }
      case 3u:
        int v12 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_34;
        }
        int v17 = (unsigned __int8 *)*((void *)a2 + 1);
        unint64_t v13 = *((void *)a2 + 2);
        if ((unint64_t)v17 >= v13) {
          goto LABEL_51;
        }
        goto LABEL_48;
      case 4u:
        int v12 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_34;
        }
        int v18 = (unsigned __int8 *)*((void *)a2 + 1);
        unint64_t v13 = *((void *)a2 + 2);
        if ((unint64_t)v18 >= v13) {
          goto LABEL_58;
        }
        goto LABEL_55;
      case 5u:
        int v12 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_34;
        }
        int v19 = (unsigned __int8 *)*((void *)a2 + 1);
        unint64_t v13 = *((void *)a2 + 2);
        if ((unint64_t)v19 >= v13) {
          goto LABEL_65;
        }
        goto LABEL_62;
      case 6u:
        int v12 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_34;
        }
        int v20 = (unsigned __int8 *)*((void *)a2 + 1);
        unint64_t v13 = *((void *)a2 + 2);
        if ((unint64_t)v20 >= v13) {
          goto LABEL_72;
        }
        goto LABEL_69;
      case 7u:
        int v12 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_34;
        }
        uint64_t v21 = (unsigned __int8 *)*((void *)a2 + 1);
        unint64_t v13 = *((void *)a2 + 2);
        goto LABEL_76;
      case 8u:
        int v12 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_34;
        }
        char v22 = (unsigned __int8 *)*((void *)a2 + 1);
        unint64_t v13 = *((void *)a2 + 2);
        goto LABEL_84;
      case 9u:
        int v12 = TagFallback & 7;
        if (v12 != 2) {
          goto LABEL_34;
        }
        goto LABEL_92;
      default:
        int v12 = TagFallback & 7;
LABEL_34:
        if (v12 == 4) {
          return 1;
        }
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) == 0)return 0; {
        continue;
        }
    }
  }
}

uint64_t awd::metrics::CommCenterLowPowerStats::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = this;
  int v6 = *(_DWORD *)(this + 72);
  if (v6)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(void *)(this + 8), (uint64_t)a2, a4);
    int v6 = *(_DWORD *)(v5 + 72);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_13;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(unsigned int *)(v5 + 16), (uint64_t)a2, a4);
  int v6 = *(_DWORD *)(v5 + 72);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_14;
  }
LABEL_13:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, *(unsigned int *)(v5 + 20), (uint64_t)a2, a4);
  int v6 = *(_DWORD *)(v5 + 72);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_15;
  }
LABEL_14:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, *(unsigned int *)(v5 + 24), (uint64_t)a2, a4);
  int v6 = *(_DWORD *)(v5 + 72);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_16;
  }
LABEL_15:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, *(unsigned int *)(v5 + 28), (uint64_t)a2, a4);
  int v6 = *(_DWORD *)(v5 + 72);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_17;
  }
LABEL_16:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6, *(unsigned int *)(v5 + 32), (uint64_t)a2, a4);
  int v6 = *(_DWORD *)(v5 + 72);
  if ((v6 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_18;
  }
LABEL_17:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7, *(unsigned int *)(v5 + 36), (uint64_t)a2, a4);
  if ((*(_DWORD *)(v5 + 72) & 0x80) == 0)
  {
LABEL_9:
    if (*(int *)(v5 + 48) < 1) {
      return this;
    }
    goto LABEL_19;
  }
LABEL_18:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8, *(unsigned int *)(v5 + 64), (uint64_t)a2, a4);
  if (*(int *)(v5 + 48) < 1) {
    return this;
  }
LABEL_19:
  uint64_t v7 = 0;
  do
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)9, *(void *)(*(void *)(v5 + 40) + 8 * v7++), a2, a4);
  while (v7 < *(int *)(v5 + 48));
  return this;
}

uint64_t awd::metrics::CommCenterLowPowerStats::ByteSize(awd::metrics::CommCenterLowPowerStats *this)
{
  LOBYTE(v2) = *((unsigned char *)this + 72);
  if (!(_BYTE)v2)
  {
    int v4 = *((_DWORD *)this + 12);
    uint64_t v5 = v4;
    if (v4 < 1) {
      goto LABEL_48;
    }
    goto LABEL_44;
  }
  if (*((unsigned char *)this + 72))
  {
    int v3 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*((wireless_diagnostics::google::protobuf::io::CodedOutputStream **)this
                                                                                     + 1))
       + 1;
    int v2 = *((_DWORD *)this + 18);
    if ((v2 & 2) == 0) {
      goto LABEL_12;
    }
  }
  else
  {
    int v3 = 0;
    if ((*((unsigned char *)this + 72) & 2) == 0) {
      goto LABEL_12;
    }
  }
  int v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 4);
  if (v6 >= 0x80)
  {
    int v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6) + 1;
    int v2 = *((_DWORD *)this + 18);
  }
  else
  {
    int v7 = 2;
  }
  v3 += v7;
LABEL_12:
  if ((v2 & 4) != 0)
  {
    int v9 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 5);
    if (v9 >= 0x80)
    {
      int v10 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v9);
      int v2 = *((_DWORD *)this + 18);
      v3 += v10 + 1;
      if ((v2 & 8) != 0) {
        goto LABEL_24;
      }
    }
    else
    {
      v3 += 2;
      if ((v2 & 8) != 0) {
        goto LABEL_24;
      }
    }
LABEL_14:
    if ((v2 & 0x10) == 0) {
      goto LABEL_15;
    }
LABEL_28:
    unint64_t v13 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 7);
    if (v13 >= 0x80)
    {
      int v14 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v13);
      int v2 = *((_DWORD *)this + 18);
      v3 += v14 + 1;
      if ((v2 & 0x20) != 0) {
        goto LABEL_32;
      }
    }
    else
    {
      v3 += 2;
      if ((v2 & 0x20) != 0) {
        goto LABEL_32;
      }
    }
LABEL_16:
    if ((v2 & 0x40) == 0) {
      goto LABEL_17;
    }
LABEL_36:
    int v17 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 9);
    if (v17 >= 0x80)
    {
      v3 += wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v17) + 1;
      if ((*((_DWORD *)this + 18) & 0x80) != 0) {
        goto LABEL_40;
      }
    }
    else
    {
      v3 += 2;
      if ((v2 & 0x80) != 0) {
        goto LABEL_40;
      }
    }
LABEL_18:
    int v8 = *((_DWORD *)this + 12);
    uint64_t v5 = (v8 + v3);
    if (v8 < 1) {
      goto LABEL_48;
    }
    goto LABEL_44;
  }
  if ((v2 & 8) == 0) {
    goto LABEL_14;
  }
LABEL_24:
  uint64_t v11 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 6);
  if (v11 >= 0x80)
  {
    int v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v11);
    int v2 = *((_DWORD *)this + 18);
    v3 += v12 + 1;
    if ((v2 & 0x10) != 0) {
      goto LABEL_28;
    }
  }
  else
  {
    v3 += 2;
    if ((v2 & 0x10) != 0) {
      goto LABEL_28;
    }
  }
LABEL_15:
  if ((v2 & 0x20) == 0) {
    goto LABEL_16;
  }
LABEL_32:
  int v15 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 8);
  if (v15 >= 0x80)
  {
    int v16 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v15);
    int v2 = *((_DWORD *)this + 18);
    v3 += v16 + 1;
    if ((v2 & 0x40) != 0) {
      goto LABEL_36;
    }
  }
  else
  {
    v3 += 2;
    if ((v2 & 0x40) != 0) {
      goto LABEL_36;
    }
  }
LABEL_17:
  if ((v2 & 0x80) == 0) {
    goto LABEL_18;
  }
LABEL_40:
  int v18 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 16);
  if (v18 >= 0x80)
  {
    int v20 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v18);
    int v21 = *((_DWORD *)this + 12);
    uint64_t v5 = (v21 + v20 + 1 + v3);
    if (v21 < 1) {
      goto LABEL_48;
    }
  }
  else
  {
    int v19 = *((_DWORD *)this + 12);
    uint64_t v5 = (v19 + v3 + 2);
    if (v19 < 1) {
      goto LABEL_48;
    }
  }
LABEL_44:
  uint64_t v22 = 0;
  do
  {
    while (1)
    {
      unint64_t v23 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)awd::metrics::CommCenterMissedMTMessage::ByteSize(*(awd::metrics::CommCenterMissedMTMessage **)(*((void *)this + 5) + 8 * v22));
      if (v23 < 0x80) {
        break;
      }
      uint64_t v5 = v23
         + v5
         + wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v23);
      if (++v22 >= *((int *)this + 12)) {
        goto LABEL_48;
      }
    }
    uint64_t v5 = (v23 + v5 + 1);
    ++v22;
  }
  while (v22 < *((int *)this + 12));
LABEL_48:
  *((_DWORD *)this + 17) = v5;
  return v5;
}

void awd::metrics::CommCenterLowPowerStats::CopyFrom(awd::metrics::CommCenterLowPowerStats *this, const awd::metrics::CommCenterLowPowerStats *a2)
{
  if (a2 != this)
  {
    (*(void (**)(awd::metrics::CommCenterLowPowerStats *))(*(void *)this + 32))(this);
    awd::metrics::CommCenterLowPowerStats::MergeFrom(this, a2);
  }
}

uint64_t awd::metrics::CommCenterLowPowerStats::IsInitialized(awd::metrics::CommCenterLowPowerStats *this)
{
  return 1;
}

uint64_t awd::metrics::CommCenterLowPowerStats::Swap(uint64_t this, awd::metrics::CommCenterLowPowerStats *a2)
{
  if (a2 != (awd::metrics::CommCenterLowPowerStats *)this)
  {
    uint64_t v3 = this;
    uint64_t v4 = *(void *)(this + 8);
    *(void *)(this + 8) = *((void *)a2 + 1);
    *((void *)a2 + 1) = v4;
    LODWORD(v4) = *(_DWORD *)(this + 16);
    *(_DWORD *)(this + 16) = *((_DWORD *)a2 + 4);
    *((_DWORD *)a2 + 4) = v4;
    LODWORD(v4) = *(_DWORD *)(this + 20);
    *(_DWORD *)(this + 20) = *((_DWORD *)a2 + 5);
    *((_DWORD *)a2 + 5) = v4;
    LODWORD(v4) = *(_DWORD *)(this + 24);
    *(_DWORD *)(this + 24) = *((_DWORD *)a2 + 6);
    *((_DWORD *)a2 + 6) = v4;
    LODWORD(v4) = *(_DWORD *)(this + 28);
    *(_DWORD *)(this + 28) = *((_DWORD *)a2 + 7);
    *((_DWORD *)a2 + 7) = v4;
    LODWORD(v4) = *(_DWORD *)(this + 32);
    *(_DWORD *)(this + 32) = *((_DWORD *)a2 + 8);
    *((_DWORD *)a2 + 8) = v4;
    LODWORD(v4) = *(_DWORD *)(this + 36);
    *(_DWORD *)(this + 36) = *((_DWORD *)a2 + 9);
    *((_DWORD *)a2 + 9) = v4;
    LODWORD(v4) = *(_DWORD *)(this + 64);
    *(_DWORD *)(this + 64) = *((_DWORD *)a2 + 16);
    *((_DWORD *)a2 + 16) = v4;
    this = wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Swap();
    int v5 = *(_DWORD *)(v3 + 72);
    *(_DWORD *)(v3 + 72) = *((_DWORD *)a2 + 18);
    *((_DWORD *)a2 + 18) = v5;
    int v6 = *(_DWORD *)(v3 + 68);
    *(_DWORD *)(v3 + 68) = *((_DWORD *)a2 + 17);
    *((_DWORD *)a2 + 17) = v6;
  }
  return this;
}

char *awd::metrics::CommCenterLowPowerStats::GetTypeName@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = (char *)operator new(0x28uLL);
  *(void *)a1 = result;
  *(_OWORD *)(a1 + 8) = xmmword_1C59A3D60;
  strcpy(result, "awd.metrics.CommCenterLowPowerStats");
  return result;
}

uint64_t awd::metrics::CommCenterWakeReasonInfo::SharedCtor(uint64_t this)
{
  uint64_t v1 = MEMORY[0x1E4FBA920];
  *(void *)(this + 8) = 0;
  *(void *)(this + 16) = v1;
  *(_WORD *)(this + 52) = 0;
  *(_DWORD *)(this + 48) = 0;
  *(void *)(this + 24) = v1;
  *(void *)(this + 32) = v1;
  *(void *)(this + 40) = v1;
  *(void *)(this + 56) = v1;
  *(void *)(this + 64) = v1;
  *(void *)(this + 72) = v1;
  *(void *)(this + 80) = 0;
  *(void *)(this + 88) = 0;
  *(_DWORD *)(this + 96) = 0;
  return this;
}

awd::metrics::CommCenterWakeReasonInfo *awd::metrics::CommCenterWakeReasonInfo::CommCenterWakeReasonInfo(awd::metrics::CommCenterWakeReasonInfo *this, const awd::metrics::CommCenterWakeReasonInfo *a2)
{
  *(void *)this = &unk_1F20FC010;
  *((void *)this + 1) = 0;
  uint64_t v3 = MEMORY[0x1E4FBA920];
  *((_WORD *)this + 26) = 0;
  *((void *)this + 2) = v3;
  *((void *)this + 3) = v3;
  *((_DWORD *)this + 12) = 0;
  *((void *)this + 4) = v3;
  *((void *)this + 5) = v3;
  *((void *)this + 7) = v3;
  *((void *)this + 8) = v3;
  *((void *)this + 9) = v3;
  *((void *)this + 10) = 0;
  *((void *)this + 11) = 0;
  *((_DWORD *)this + 24) = 0;
  awd::metrics::CommCenterWakeReasonInfo::MergeFrom(this, a2);
  return this;
}

{
  uint64_t v3;

  *(void *)this = &unk_1F20FC010;
  *((void *)this + 1) = 0;
  uint64_t v3 = MEMORY[0x1E4FBA920];
  *((_WORD *)this + 26) = 0;
  *((void *)this + 2) = v3;
  *((void *)this + 3) = v3;
  *((_DWORD *)this + 12) = 0;
  *((void *)this + 4) = v3;
  *((void *)this + 5) = v3;
  *((void *)this + 7) = v3;
  *((void *)this + 8) = v3;
  *((void *)this + 9) = v3;
  *((void *)this + 10) = 0;
  *((void *)this + 11) = 0;
  *((_DWORD *)this + 24) = 0;
  awd::metrics::CommCenterWakeReasonInfo::MergeFrom(this, a2);
  return this;
}

void sub_1C58EBCE0(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

void awd::metrics::CommCenterWakeReasonInfo::MergeFrom(awd::metrics::CommCenterWakeReasonInfo *this, const awd::metrics::CommCenterWakeReasonInfo *a2)
{
  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v60);
  }
  LOBYTE(v4) = *((unsigned char *)a2 + 96);
  if (!(_BYTE)v4)
  {
LABEL_91:
    int v39 = *((_DWORD *)a2 + 24);
    if ((v39 & 0xFF00) == 0) {
      return;
    }
    goto LABEL_92;
  }
  if (*((unsigned char *)a2 + 96))
  {
    uint64_t v5 = *((void *)a2 + 1);
    *((_DWORD *)this + 24) |= 1u;
    *((void *)this + 1) = v5;
    int v4 = *((_DWORD *)a2 + 24);
  }
  int v6 = (void **)MEMORY[0x1E4FBA920];
  if ((v4 & 2) != 0)
  {
    int v7 = (void **)*((void *)a2 + 2);
    *((_DWORD *)this + 24) |= 2u;
    int v8 = (void **)*((void *)this + 2);
    if (v8 == v6)
    {
      int v8 = (void **)operator new(0x18uLL);
      v8[1] = 0;
      v8[2] = 0;
      *int v8 = 0;
      *((void *)this + 2) = v8;
    }
    if (v8 != v7)
    {
      char v9 = *((unsigned char *)v7 + 23);
      if ((*((char *)v8 + 23) & 0x80000000) == 0)
      {
        if ((*((unsigned char *)v7 + 23) & 0x80) != 0)
        {
          std::string::__assign_no_alias<true>(v8, *v7, (size_t)v7[1]);
          int v11 = *((_DWORD *)a2 + 24);
          if ((v11 & 4) == 0) {
            goto LABEL_23;
          }
        }
        else
        {
          long long v10 = *(_OWORD *)v7;
          v8[2] = v7[2];
          *(_OWORD *)int v8 = v10;
          int v11 = *((_DWORD *)a2 + 24);
          if ((v11 & 4) == 0) {
            goto LABEL_23;
          }
        }
        goto LABEL_22;
      }
      if (v9 >= 0) {
        int v12 = v7;
      }
      else {
        int v12 = *v7;
      }
      if (v9 >= 0) {
        size_t v13 = *((unsigned __int8 *)v7 + 23);
      }
      else {
        size_t v13 = (size_t)v7[1];
      }
      std::string::__assign_no_alias<false>(v8, v12, v13);
    }
  }
  int v11 = *((_DWORD *)a2 + 24);
  if ((v11 & 4) != 0)
  {
LABEL_22:
    char v14 = *((unsigned char *)a2 + 52);
    *((_DWORD *)this + 24) |= 4u;
    *((unsigned char *)this + 52) = v14;
    int v11 = *((_DWORD *)a2 + 24);
  }
LABEL_23:
  if ((v11 & 8) != 0)
  {
    int v15 = (void **)*((void *)a2 + 3);
    *((_DWORD *)this + 24) |= 8u;
    int v16 = (void **)*((void *)this + 3);
    if (v16 == v6)
    {
      int v16 = (void **)operator new(0x18uLL);
      v16[1] = 0;
      v16[2] = 0;
      unsigned __int8 *v16 = 0;
      *((void *)this + 3) = v16;
    }
    if (v16 != v15)
    {
      char v17 = *((unsigned char *)v15 + 23);
      if ((*((char *)v16 + 23) & 0x80000000) == 0)
      {
        if ((*((unsigned char *)v15 + 23) & 0x80) != 0)
        {
          std::string::__assign_no_alias<true>(v16, *v15, (size_t)v15[1]);
          int v19 = *((_DWORD *)a2 + 24);
          if ((v19 & 0x10) == 0) {
            goto LABEL_40;
          }
        }
        else
        {
          long long v18 = *(_OWORD *)v15;
          v16[2] = v15[2];
          *(_OWORD *)int v16 = v18;
          int v19 = *((_DWORD *)a2 + 24);
          if ((v19 & 0x10) == 0) {
            goto LABEL_40;
          }
        }
        goto LABEL_39;
      }
      if (v17 >= 0) {
        int v20 = v15;
      }
      else {
        int v20 = *v15;
      }
      if (v17 >= 0) {
        size_t v21 = *((unsigned __int8 *)v15 + 23);
      }
      else {
        size_t v21 = (size_t)v15[1];
      }
      std::string::__assign_no_alias<false>(v16, v20, v21);
    }
  }
  int v19 = *((_DWORD *)a2 + 24);
  if ((v19 & 0x10) != 0)
  {
LABEL_39:
    int v22 = *((_DWORD *)a2 + 12);
    *((_DWORD *)this + 24) |= 0x10u;
    *((_DWORD *)this + 12) = v22;
    int v19 = *((_DWORD *)a2 + 24);
  }
LABEL_40:
  if ((v19 & 0x20) == 0) {
    goto LABEL_55;
  }
  unint64_t v23 = (void **)*((void *)a2 + 4);
  *((_DWORD *)this + 24) |= 0x20u;
  uint64_t v24 = (void **)*((void *)this + 4);
  if (v24 == v6)
  {
    uint64_t v24 = (void **)operator new(0x18uLL);
    v24[1] = 0;
    v24[2] = 0;
    *uint64_t v24 = 0;
    *((void *)this + 4) = v24;
  }
  if (v24 == v23)
  {
LABEL_55:
    if ((*((unsigned char *)a2 + 96) & 0x40) == 0) {
      goto LABEL_76;
    }
    goto LABEL_56;
  }
  char v25 = *((unsigned char *)v23 + 23);
  if (*((char *)v24 + 23) < 0)
  {
    if (v25 >= 0) {
      int v27 = v23;
    }
    else {
      int v27 = *v23;
    }
    if (v25 >= 0) {
      size_t v28 = *((unsigned __int8 *)v23 + 23);
    }
    else {
      size_t v28 = (size_t)v23[1];
    }
    std::string::__assign_no_alias<false>(v24, v27, v28);
    goto LABEL_55;
  }
  if ((*((unsigned char *)v23 + 23) & 0x80) != 0)
  {
    std::string::__assign_no_alias<true>(v24, *v23, (size_t)v23[1]);
    if ((*((unsigned char *)a2 + 96) & 0x40) == 0) {
      goto LABEL_76;
    }
  }
  else
  {
    long long v26 = *(_OWORD *)v23;
    v24[2] = v23[2];
    *(_OWORD *)uint64_t v24 = v26;
    if ((*((unsigned char *)a2 + 96) & 0x40) == 0) {
      goto LABEL_76;
    }
  }
LABEL_56:
  int v29 = (void **)*((void *)a2 + 5);
  *((_DWORD *)this + 24) |= 0x40u;
  BOOL v30 = (void **)*((void *)this + 5);
  if (v30 == v6)
  {
    BOOL v30 = (void **)operator new(0x18uLL);
    v30[1] = 0;
    v30[2] = 0;
    *BOOL v30 = 0;
    *((void *)this + 5) = v30;
  }
  if (v30 != v29)
  {
    char v31 = *((unsigned char *)v29 + 23);
    if (*((char *)v30 + 23) < 0)
    {
      if (v31 >= 0) {
        uint64_t v33 = v29;
      }
      else {
        uint64_t v33 = *v29;
      }
      if (v31 >= 0) {
        size_t v34 = *((unsigned __int8 *)v29 + 23);
      }
      else {
        size_t v34 = (size_t)v29[1];
      }
      std::string::__assign_no_alias<false>(v30, v33, v34);
    }
    else if ((*((unsigned char *)v29 + 23) & 0x80) != 0)
    {
      std::string::__assign_no_alias<true>(v30, *v29, (size_t)v29[1]);
    }
    else
    {
      long long v32 = *(_OWORD *)v29;
      v30[2] = v29[2];
      *(_OWORD *)BOOL v30 = v32;
    }
  }
LABEL_76:
  if ((*((unsigned char *)a2 + 96) & 0x80) == 0) {
    goto LABEL_91;
  }
  uint64_t v35 = (void **)*((void *)a2 + 7);
  *((_DWORD *)this + 24) |= 0x80u;
  uint64_t v36 = (void **)*((void *)this + 7);
  if (v36 == v6)
  {
    uint64_t v36 = (void **)operator new(0x18uLL);
    v36[1] = 0;
    v36[2] = 0;
    *uint64_t v36 = 0;
    *((void *)this + 7) = v36;
  }
  if (v36 == v35) {
    goto LABEL_91;
  }
  char v37 = *((unsigned char *)v35 + 23);
  if (*((char *)v36 + 23) < 0)
  {
    if (v37 >= 0) {
      int v40 = v35;
    }
    else {
      int v40 = *v35;
    }
    if (v37 >= 0) {
      size_t v41 = *((unsigned __int8 *)v35 + 23);
    }
    else {
      size_t v41 = (size_t)v35[1];
    }
    std::string::__assign_no_alias<false>(v36, v40, v41);
    goto LABEL_91;
  }
  if ((*((unsigned char *)v35 + 23) & 0x80) != 0)
  {
    std::string::__assign_no_alias<true>(v36, *v35, (size_t)v35[1]);
    int v39 = *((_DWORD *)a2 + 24);
    if ((v39 & 0xFF00) == 0) {
      return;
    }
  }
  else
  {
    long long v38 = *(_OWORD *)v35;
    v36[2] = v35[2];
    *(_OWORD *)uint64_t v36 = v38;
    int v39 = *((_DWORD *)a2 + 24);
    if ((v39 & 0xFF00) == 0) {
      return;
    }
  }
LABEL_92:
  if ((v39 & 0x100) != 0)
  {
    BOOL v42 = (void **)*((void *)a2 + 8);
    *((_DWORD *)this + 24) |= 0x100u;
    int v43 = (void **)*((void *)this + 8);
    if (v43 == (void **)MEMORY[0x1E4FBA920])
    {
      int v43 = (void **)operator new(0x18uLL);
      v43[1] = 0;
      void v43[2] = 0;
      void *v43 = 0;
      *((void *)this + 8) = v43;
    }
    if (v43 != v42)
    {
      char v44 = *((unsigned char *)v42 + 23);
      if ((*((char *)v43 + 23) & 0x80000000) == 0)
      {
        if ((*((unsigned char *)v42 + 23) & 0x80) != 0)
        {
          std::string::__assign_no_alias<true>(v43, *v42, (size_t)v42[1]);
          int v46 = *((_DWORD *)a2 + 24);
          if ((v46 & 0x200) == 0) {
            goto LABEL_109;
          }
        }
        else
        {
          long long v45 = *(_OWORD *)v42;
          void v43[2] = v42[2];
          *(_OWORD *)int v43 = v45;
          int v46 = *((_DWORD *)a2 + 24);
          if ((v46 & 0x200) == 0) {
            goto LABEL_109;
          }
        }
        goto LABEL_108;
      }
      if (v44 >= 0) {
        uint64_t v47 = v42;
      }
      else {
        uint64_t v47 = *v42;
      }
      if (v44 >= 0) {
        size_t v48 = *((unsigned __int8 *)v42 + 23);
      }
      else {
        size_t v48 = (size_t)v42[1];
      }
      std::string::__assign_no_alias<false>(v43, v47, v48);
    }
  }
  int v46 = *((_DWORD *)a2 + 24);
  if ((v46 & 0x200) != 0)
  {
LABEL_108:
    int v49 = *((_DWORD *)a2 + 20);
    *((_DWORD *)this + 24) |= 0x200u;
    *((_DWORD *)this + 20) = v49;
    int v46 = *((_DWORD *)a2 + 24);
  }
LABEL_109:
  if ((v46 & 0x400) == 0) {
    goto LABEL_124;
  }
  char v50 = (void **)*((void *)a2 + 9);
  *((_DWORD *)this + 24) |= 0x400u;
  long long v51 = (void **)*((void *)this + 9);
  if (v51 == (void **)MEMORY[0x1E4FBA920])
  {
    long long v51 = (void **)operator new(0x18uLL);
    v51[1] = 0;
    v51[2] = 0;
    *long long v51 = 0;
    *((void *)this + 9) = v51;
  }
  if (v51 == v50)
  {
LABEL_124:
    int v54 = *((_DWORD *)a2 + 24);
    if ((v54 & 0x800) != 0) {
      goto LABEL_133;
    }
    goto LABEL_125;
  }
  char v52 = *((unsigned char *)v50 + 23);
  if (*((char *)v51 + 23) < 0)
  {
    if (v52 >= 0) {
      long long v55 = v50;
    }
    else {
      long long v55 = *v50;
    }
    if (v52 >= 0) {
      size_t v56 = *((unsigned __int8 *)v50 + 23);
    }
    else {
      size_t v56 = (size_t)v50[1];
    }
    std::string::__assign_no_alias<false>(v51, v55, v56);
    goto LABEL_124;
  }
  if ((*((unsigned char *)v50 + 23) & 0x80) != 0)
  {
    std::string::__assign_no_alias<true>(v51, *v50, (size_t)v50[1]);
    int v54 = *((_DWORD *)a2 + 24);
    if ((v54 & 0x800) != 0) {
      goto LABEL_133;
    }
LABEL_125:
    if ((v54 & 0x1000) != 0) {
      goto LABEL_134;
    }
    goto LABEL_126;
  }
  long long v53 = *(_OWORD *)v50;
  v51[2] = v50[2];
  *(_OWORD *)long long v51 = v53;
  int v54 = *((_DWORD *)a2 + 24);
  if ((v54 & 0x800) == 0) {
    goto LABEL_125;
  }
LABEL_133:
  int v57 = *((_DWORD *)a2 + 21);
  *((_DWORD *)this + 24) |= 0x800u;
  *((_DWORD *)this + 21) = v57;
  int v54 = *((_DWORD *)a2 + 24);
  if ((v54 & 0x1000) != 0)
  {
LABEL_134:
    int v58 = *((_DWORD *)a2 + 22);
    *((_DWORD *)this + 24) |= 0x1000u;
    *((_DWORD *)this + 22) = v58;
    if ((*((_DWORD *)a2 + 24) & 0x2000) != 0) {
      goto LABEL_135;
    }
    return;
  }
LABEL_126:
  if ((v54 & 0x2000) != 0)
  {
LABEL_135:
    char v59 = *((unsigned char *)a2 + 53);
    *((_DWORD *)this + 24) |= 0x2000u;
    *((unsigned char *)this + 53) = v59;
  }
}

void sub_1C58EC28C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1C58EC2A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1C58EC320(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

void awd::metrics::CommCenterWakeReasonInfo::~CommCenterWakeReasonInfo(awd::metrics::CommCenterWakeReasonInfo *this)
{
  *(void *)this = &unk_1F20FC010;
  awd::metrics::CommCenterWakeReasonInfo::SharedDtor(this);

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  uint64_t vars8;

  *(void *)this = &unk_1F20FC010;
  awd::metrics::CommCenterWakeReasonInfo::SharedDtor(this);

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  void *v2;
  uint64_t vars8;

  *(void *)this = &unk_1F20FC010;
  awd::metrics::CommCenterWakeReasonInfo::SharedDtor(this);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);

  operator delete(v2);
}

void awd::metrics::CommCenterWakeReasonInfo::SharedDtor(awd::metrics::CommCenterWakeReasonInfo *this)
{
  uint64_t v2 = *((void *)this + 2);
  uint64_t v3 = MEMORY[0x1E4FBA920];
  if (v2 == MEMORY[0x1E4FBA920] || v2 == 0)
  {
    uint64_t v5 = *((void *)this + 3);
    if (v5 != MEMORY[0x1E4FBA920] && v5 != 0) {
      goto LABEL_29;
    }
LABEL_11:
    uint64_t v7 = *((void *)this + 4);
    if (v7 != v3 && v7 != 0) {
      goto LABEL_35;
    }
LABEL_16:
    uint64_t v9 = *((void *)this + 5);
    if (v9 != v3 && v9 != 0) {
      goto LABEL_41;
    }
LABEL_21:
    uint64_t v11 = *((void *)this + 7);
    if (v11 == v3) {
      goto LABEL_48;
    }
    goto LABEL_44;
  }
  if (*(char *)(v2 + 23) < 0) {
    operator delete(*(void **)v2);
  }
  operator delete((void *)v2);
  uint64_t v5 = *((void *)this + 3);
  if (v5 == v3 || v5 == 0) {
    goto LABEL_11;
  }
LABEL_29:
  if (*(char *)(v5 + 23) < 0) {
    operator delete(*(void **)v5);
  }
  operator delete((void *)v5);
  uint64_t v7 = *((void *)this + 4);
  if (v7 == v3 || v7 == 0) {
    goto LABEL_16;
  }
LABEL_35:
  if (*(char *)(v7 + 23) < 0) {
    operator delete(*(void **)v7);
  }
  operator delete((void *)v7);
  uint64_t v9 = *((void *)this + 5);
  if (v9 == v3 || v9 == 0) {
    goto LABEL_21;
  }
LABEL_41:
  if (*(char *)(v9 + 23) < 0) {
    operator delete(*(void **)v9);
  }
  operator delete((void *)v9);
  uint64_t v11 = *((void *)this + 7);
  if (v11 != v3)
  {
LABEL_44:
    if (v11)
    {
      if (*(char *)(v11 + 23) < 0) {
        operator delete(*(void **)v11);
      }
      operator delete((void *)v11);
    }
  }
LABEL_48:
  uint64_t v15 = *((void *)this + 8);
  if (v15 != v3 && v15)
  {
    if (*(char *)(v15 + 23) < 0) {
      operator delete(*(void **)v15);
    }
    operator delete((void *)v15);
  }
  uint64_t v16 = *((void *)this + 9);
  if (v16 != v3 && v16)
  {
    if (*(char *)(v16 + 23) < 0)
    {
      operator delete(*(void **)v16);
      char v17 = (void *)v16;
    }
    else
    {
      char v17 = (void *)v16;
    }
    operator delete(v17);
  }
}

uint64_t awd::metrics::CommCenterWakeReasonInfo::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 92) = a2;
  return this;
}

uint64_t awd::metrics::CommCenterWakeReasonInfo::default_instance(awd::metrics::CommCenterWakeReasonInfo *this, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t result = awd::metrics::CommCenterWakeReasonInfo::default_instance_;
  if (!awd::metrics::CommCenterWakeReasonInfo::default_instance_)
  {
    awd::metrics::protobuf_AddDesc_CCMetricsABMPower_2eproto(0, a2, a3, a4);
    return awd::metrics::CommCenterWakeReasonInfo::default_instance_;
  }
  return result;
}

void *awd::metrics::CommCenterWakeReasonInfo::New(awd::metrics::CommCenterWakeReasonInfo *this)
{
  uint64_t result = operator new(0x68uLL);
  void *result = &unk_1F20FC010;
  result[1] = 0;
  uint64_t v2 = MEMORY[0x1E4FBA920];
  *((_WORD *)result + 26) = 0;
  result[2] = v2;
  result[3] = v2;
  *((_DWORD *)result + 12) = 0;
  result[4] = v2;
  result[5] = v2;
  result[7] = v2;
  result[8] = v2;
  result[9] = v2;
  result[10] = 0;
  result[11] = 0;
  *((_DWORD *)result + 24) = 0;
  return result;
}

uint64_t awd::metrics::CommCenterWakeReasonInfo::Clear(uint64_t this)
{
  char v1 = *(unsigned char *)(this + 96);
  if (!v1) {
    goto LABEL_28;
  }
  *(void *)(this + 8) = 0;
  uint64_t v2 = MEMORY[0x1E4FBA920];
  if ((v1 & 2) == 0 || (uint64_t v3 = *(void *)(this + 16), v3 == MEMORY[0x1E4FBA920]))
  {
LABEL_6:
    *(unsigned char *)(this + 52) = 0;
    if ((*(unsigned char *)(this + 96) & 8) == 0) {
      goto LABEL_13;
    }
    goto LABEL_7;
  }
  if ((*(char *)(v3 + 23) & 0x80000000) == 0)
  {
    *(unsigned char *)uint64_t v3 = 0;
    *(unsigned char *)(v3 + 23) = 0;
    goto LABEL_6;
  }
  **(unsigned char **)uint64_t v3 = 0;
  *(void *)(v3 + 8) = 0;
  *(unsigned char *)(this + 52) = 0;
  if ((*(unsigned char *)(this + 96) & 8) == 0) {
    goto LABEL_13;
  }
LABEL_7:
  uint64_t v4 = *(void *)(this + 24);
  if (v4 != v2)
  {
    if (*(char *)(v4 + 23) < 0)
    {
      **(unsigned char **)uint64_t v4 = 0;
      *(void *)(v4 + 8) = 0;
    }
    else
    {
      *(unsigned char *)uint64_t v4 = 0;
      *(unsigned char *)(v4 + 23) = 0;
    }
  }
LABEL_13:
  *(_DWORD *)(this + 48) = 0;
  if ((*(unsigned char *)(this + 96) & 0x20) == 0 || (uint64_t v5 = *(void *)(this + 32), v5 == v2))
  {
LABEL_17:
    if ((*(unsigned char *)(this + 96) & 0x40) == 0) {
      goto LABEL_24;
    }
    goto LABEL_18;
  }
  if ((*(char *)(v5 + 23) & 0x80000000) == 0)
  {
    *(unsigned char *)uint64_t v5 = 0;
    *(unsigned char *)(v5 + 23) = 0;
    goto LABEL_17;
  }
  **(unsigned char **)uint64_t v5 = 0;
  *(void *)(v5 + 8) = 0;
  if ((*(unsigned char *)(this + 96) & 0x40) == 0) {
    goto LABEL_24;
  }
LABEL_18:
  uint64_t v6 = *(void *)(this + 40);
  if (v6 != v2)
  {
    if (*(char *)(v6 + 23) < 0)
    {
      **(unsigned char **)uint64_t v6 = 0;
      *(void *)(v6 + 8) = 0;
    }
    else
    {
      *(unsigned char *)uint64_t v6 = 0;
      *(unsigned char *)(v6 + 23) = 0;
    }
  }
LABEL_24:
  if ((*(unsigned char *)(this + 96) & 0x80) != 0)
  {
    uint64_t v7 = *(void *)(this + 56);
    if (v7 != v2)
    {
      if (*(char *)(v7 + 23) < 0)
      {
        **(unsigned char **)uint64_t v7 = 0;
        *(void *)(v7 + 8) = 0;
        int v8 = *(_DWORD *)(this + 96);
        if ((v8 & 0xFF00) != 0) {
          goto LABEL_29;
        }
LABEL_39:
        *(_DWORD *)(this + 96) = 0;
        return this;
      }
      *(unsigned char *)uint64_t v7 = 0;
      *(unsigned char *)(v7 + 23) = 0;
    }
  }
LABEL_28:
  int v8 = *(_DWORD *)(this + 96);
  if ((v8 & 0xFF00) == 0) {
    goto LABEL_39;
  }
LABEL_29:
  if ((v8 & 0x100) != 0)
  {
    uint64_t v9 = *(void *)(this + 64);
    if (v9 != MEMORY[0x1E4FBA920])
    {
      if (*(char *)(v9 + 23) < 0)
      {
        **(unsigned char **)uint64_t v9 = 0;
        *(void *)(v9 + 8) = 0;
        *(_DWORD *)(this + 80) = 0;
        if ((*(unsigned char *)(this + 97) & 4) == 0) {
          goto LABEL_41;
        }
        goto LABEL_34;
      }
      *(unsigned char *)uint64_t v9 = 0;
      *(unsigned char *)(v9 + 23) = 0;
    }
  }
  *(_DWORD *)(this + 80) = 0;
  if ((*(unsigned char *)(this + 97) & 4) == 0)
  {
LABEL_41:
    *(_DWORD *)(this + 84) = 0;
    *(_DWORD *)(this + 88) = 0;
    *(unsigned char *)(this + 53) = 0;
    *(_DWORD *)(this + 96) = 0;
    return this;
  }
LABEL_34:
  uint64_t v10 = *(void *)(this + 72);
  if (v10 == MEMORY[0x1E4FBA920]) {
    goto LABEL_41;
  }
  if (*(char *)(v10 + 23) < 0)
  {
    **(unsigned char **)uint64_t v10 = 0;
    *(void *)(v10 + 8) = 0;
  }
  else
  {
    *(unsigned char *)uint64_t v10 = 0;
    *(unsigned char *)(v10 + 23) = 0;
  }
  *(_DWORD *)(this + 84) = 0;
  *(_DWORD *)(this + 88) = 0;
  *(unsigned char *)(this + 53) = 0;
  *(_DWORD *)(this + 96) = 0;
  return this;
}

uint64_t awd::metrics::CommCenterWakeReasonInfo::MergePartialFromCodedStream(awd::metrics::CommCenterWakeReasonInfo *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  uint64_t v4 = (unint64_t *)((char *)this + 8);
  uint64_t v5 = (unsigned int *)((char *)this + 48);
  uint64_t v6 = (unsigned int *)((char *)this + 80);
  uint64_t v7 = (unsigned int *)((char *)this + 84);
  int v8 = (unsigned int *)((char *)this + 88);
  uint64_t v9 = MEMORY[0x1E4FBA920];
  while (2)
  {
    uint64_t v10 = (char *)*((void *)a2 + 1);
    if ((unint64_t)v10 >= *((void *)a2 + 2) || *v10 < 0)
    {
      unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
      *((_DWORD *)a2 + 8) = TagFallback;
      if (!TagFallback) {
        return 1;
      }
    }
    else
    {
      unint64_t TagFallback = *v10;
      *((_DWORD *)a2 + 8) = TagFallback;
      *((void *)a2 + 1) = v10 + 1;
      if (!TagFallback) {
        return 1;
      }
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        int v12 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_89;
        }
        char v14 = (char *)*((void *)a2 + 1);
        unint64_t v13 = *((void *)a2 + 2);
        if ((unint64_t)v14 < v13 && (*v14 & 0x80000000) == 0)
        {
          unint64_t *v4 = *v14;
          uint64_t v15 = v14 + 1;
          *((void *)a2 + 1) = v15;
          int v16 = *((_DWORD *)this + 24) | 1;
          *((_DWORD *)this + 24) = v16;
          if ((unint64_t)v15 >= v13) {
            continue;
          }
          goto LABEL_132;
        }
        uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2, v4);
        if (result)
        {
          uint64_t v15 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v55 = *((void *)a2 + 2);
          int v16 = *((_DWORD *)this + 24) | 1;
          *((_DWORD *)this + 24) = v16;
          if ((unint64_t)v15 >= v55) {
            continue;
          }
LABEL_132:
          if (*v15 != 18) {
            continue;
          }
          *((void *)a2 + 1) = v15 + 1;
          *((_DWORD *)this + 24) = v16 | 2;
          if (*((void *)this + 2) != v9) {
            goto LABEL_17;
          }
          goto LABEL_16;
        }
        break;
      case 2u:
        int v12 = TagFallback & 7;
        if (v12 != 2) {
          goto LABEL_89;
        }
        *((_DWORD *)this + 24) |= 2u;
        if (*((void *)this + 2) == v9)
        {
LABEL_16:
          char v17 = operator new(0x18uLL);
          v17[1] = 0;
          dispatch_object_t v17[2] = 0;
          void *v17 = 0;
          *((void *)this + 2) = v17;
        }
LABEL_17:
        uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!result) {
          return result;
        }
        int v20 = (unsigned char *)*((void *)a2 + 1);
        unint64_t v19 = *((void *)a2 + 2);
        if ((unint64_t)v20 >= v19 || *v20 != 24) {
          continue;
        }
        size_t v21 = v20 + 1;
        *((void *)a2 + 1) = v21;
LABEL_23:
        unsigned int v57 = -1431655766;
        if ((unint64_t)v21 >= v19 || *v21 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v57);
          if (!result) {
            return result;
          }
          unsigned int v22 = v57;
          unint64_t v23 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v19 = *((void *)a2 + 2);
        }
        else
        {
          unsigned int v22 = *v21;
          unint64_t v23 = v21 + 1;
          *((void *)a2 + 1) = v23;
        }
        *((unsigned char *)this + 52) = v22 != 0;
        int v54 = *((_DWORD *)this + 24) | 4;
        *((_DWORD *)this + 24) = v54;
        if ((unint64_t)v23 >= v19 || *v23 != 34) {
          continue;
        }
        *((void *)a2 + 1) = v23 + 1;
        *((_DWORD *)this + 24) = v54 | 8;
        if (*((void *)this + 3) == v9)
        {
LABEL_28:
          uint64_t v24 = operator new(0x18uLL);
          v24[1] = 0;
          v24[2] = 0;
          *uint64_t v24 = 0;
          *((void *)this + 3) = v24;
        }
LABEL_29:
        uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!result) {
          return result;
        }
        long long v26 = (unsigned char *)*((void *)a2 + 1);
        unint64_t v25 = *((void *)a2 + 2);
        if ((unint64_t)v26 >= v25 || *v26 != 40) {
          continue;
        }
        int v27 = v26 + 1;
        *((void *)a2 + 1) = v27;
        if ((unint64_t)v27 >= v25) {
          goto LABEL_106;
        }
LABEL_36:
        if (*v27 < 0)
        {
LABEL_106:
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v5);
          if (!result) {
            return result;
          }
          size_t v28 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v51 = *((void *)a2 + 2);
          int v29 = *((_DWORD *)this + 24) | 0x10;
          *((_DWORD *)this + 24) = v29;
          if ((unint64_t)v28 >= v51) {
            continue;
          }
        }
        else
        {
          *uint64_t v5 = *v27;
          size_t v28 = v27 + 1;
          *((void *)a2 + 1) = v28;
          int v29 = *((_DWORD *)this + 24) | 0x10;
          *((_DWORD *)this + 24) = v29;
          if ((unint64_t)v28 >= v25) {
            continue;
          }
        }
        if (*v28 != 50) {
          continue;
        }
        *((void *)a2 + 1) = v28 + 1;
        *((_DWORD *)this + 24) = v29 | 0x20;
        if (*((void *)this + 4) == v9)
        {
LABEL_41:
          BOOL v30 = operator new(0x18uLL);
          v30[1] = 0;
          v30[2] = 0;
          *BOOL v30 = 0;
          *((void *)this + 4) = v30;
        }
LABEL_42:
        uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!result) {
          return result;
        }
        char v31 = (unsigned char *)*((void *)a2 + 1);
        if ((unint64_t)v31 >= *((void *)a2 + 2) || *v31 != 58) {
          continue;
        }
        *((void *)a2 + 1) = v31 + 1;
LABEL_47:
        *((_DWORD *)this + 24) |= 0x40u;
        if (*((void *)this + 5) == v9)
        {
          long long v32 = operator new(0x18uLL);
          v32[1] = 0;
          v32[2] = 0;
          void *v32 = 0;
          *((void *)this + 5) = v32;
        }
        uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!result) {
          return result;
        }
        uint64_t v33 = (unsigned char *)*((void *)a2 + 1);
        if ((unint64_t)v33 >= *((void *)a2 + 2) || *v33 != 66) {
          continue;
        }
        *((void *)a2 + 1) = v33 + 1;
LABEL_54:
        *((_DWORD *)this + 24) |= 0x80u;
        if (*((void *)this + 7) == v9)
        {
          size_t v34 = operator new(0x18uLL);
          v34[1] = 0;
          v34[2] = 0;
          void *v34 = 0;
          *((void *)this + 7) = v34;
        }
        uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!result) {
          return result;
        }
        uint64_t v35 = (unsigned char *)*((void *)a2 + 1);
        if ((unint64_t)v35 >= *((void *)a2 + 2) || *v35 != 74) {
          continue;
        }
        *((void *)a2 + 1) = v35 + 1;
LABEL_61:
        *((_DWORD *)this + 24) |= 0x100u;
        if (*((void *)this + 8) == v9)
        {
          uint64_t v36 = operator new(0x18uLL);
          v36[1] = 0;
          v36[2] = 0;
          *uint64_t v36 = 0;
          *((void *)this + 8) = v36;
        }
        uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!result) {
          return result;
        }
        long long v38 = (unsigned char *)*((void *)a2 + 1);
        unint64_t v37 = *((void *)a2 + 2);
        if ((unint64_t)v38 >= v37 || *v38 != 80) {
          continue;
        }
        int v39 = v38 + 1;
        *((void *)a2 + 1) = v39;
        if ((unint64_t)v39 >= v37) {
          goto LABEL_93;
        }
LABEL_70:
        if (*v39 < 0)
        {
LABEL_93:
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v6);
          if (!result) {
            return result;
          }
          int v40 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v49 = *((void *)a2 + 2);
          int v41 = *((_DWORD *)this + 24) | 0x200;
          *((_DWORD *)this + 24) = v41;
          if ((unint64_t)v40 >= v49) {
            continue;
          }
        }
        else
        {
          *uint64_t v6 = *v39;
          int v40 = v39 + 1;
          *((void *)a2 + 1) = v40;
          int v41 = *((_DWORD *)this + 24) | 0x200;
          *((_DWORD *)this + 24) = v41;
          if ((unint64_t)v40 >= v37) {
            continue;
          }
        }
        if (*v40 != 90) {
          continue;
        }
        *((void *)a2 + 1) = v40 + 1;
        *((_DWORD *)this + 24) = v41 | 0x400;
        if (*((void *)this + 9) == v9)
        {
LABEL_75:
          BOOL v42 = operator new(0x18uLL);
          v42[1] = 0;
          v42[2] = 0;
          *BOOL v42 = 0;
          *((void *)this + 9) = v42;
        }
LABEL_76:
        uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!result) {
          return result;
        }
        char v44 = (unsigned char *)*((void *)a2 + 1);
        unint64_t v43 = *((void *)a2 + 2);
        if ((unint64_t)v44 >= v43 || *v44 != 96) {
          continue;
        }
        long long v45 = v44 + 1;
        *((void *)a2 + 1) = v45;
        if ((unint64_t)v45 >= v43) {
          goto LABEL_98;
        }
LABEL_83:
        if (*v45 < 0)
        {
LABEL_98:
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v7);
          if (!result) {
            return result;
          }
          int v46 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v43 = *((void *)a2 + 2);
          *((_DWORD *)this + 24) |= 0x800u;
          if ((unint64_t)v46 >= v43) {
            continue;
          }
        }
        else
        {
          *uint64_t v7 = *v45;
          int v46 = v45 + 1;
          *((void *)a2 + 1) = v46;
          *((_DWORD *)this + 24) |= 0x800u;
          if ((unint64_t)v46 >= v43) {
            continue;
          }
        }
        if (*v46 != 104) {
          continue;
        }
        uint64_t v47 = v46 + 1;
        *((void *)a2 + 1) = v47;
LABEL_102:
        if ((unint64_t)v47 >= v43 || *v47 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v8);
          if (!result) {
            return result;
          }
          char v50 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v43 = *((void *)a2 + 2);
          *((_DWORD *)this + 24) |= 0x1000u;
          if ((unint64_t)v50 >= v43) {
            continue;
          }
        }
        else
        {
          *int v8 = *v47;
          char v50 = v47 + 1;
          *((void *)a2 + 1) = v50;
          *((_DWORD *)this + 24) |= 0x1000u;
          if ((unint64_t)v50 >= v43) {
            continue;
          }
        }
        if (*v50 == 112)
        {
          size_t v48 = v50 + 1;
          *((void *)a2 + 1) = v48;
LABEL_115:
          unsigned int v56 = -1431655766;
          if ((unint64_t)v48 >= v43 || *v48 < 0)
          {
            uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v56);
            if (!result) {
              return result;
            }
            unsigned int v52 = v56;
            long long v53 = (unsigned __int8 *)*((void *)a2 + 1);
            unint64_t v43 = *((void *)a2 + 2);
          }
          else
          {
            unsigned int v52 = *v48;
            long long v53 = (unsigned __int8 *)(v48 + 1);
            *((void *)a2 + 1) = v53;
          }
          *((unsigned char *)this + 53) = v52 != 0;
          *((_DWORD *)this + 24) |= 0x2000u;
          if (v53 == (unsigned __int8 *)v43 && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
          {
            *((_DWORD *)a2 + 8) = 0;
            uint64_t result = 1;
            *((unsigned char *)a2 + 36) = 1;
            return result;
          }
        }
        continue;
      case 3u:
        int v12 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_89;
        }
        size_t v21 = (char *)*((void *)a2 + 1);
        unint64_t v19 = *((void *)a2 + 2);
        goto LABEL_23;
      case 4u:
        int v12 = TagFallback & 7;
        if (v12 != 2) {
          goto LABEL_89;
        }
        *((_DWORD *)this + 24) |= 8u;
        if (*((void *)this + 3) == v9) {
          goto LABEL_28;
        }
        goto LABEL_29;
      case 5u:
        int v12 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_89;
        }
        int v27 = (char *)*((void *)a2 + 1);
        unint64_t v25 = *((void *)a2 + 2);
        if ((unint64_t)v27 < v25) {
          goto LABEL_36;
        }
        goto LABEL_106;
      case 6u:
        int v12 = TagFallback & 7;
        if (v12 != 2) {
          goto LABEL_89;
        }
        *((_DWORD *)this + 24) |= 0x20u;
        if (*((void *)this + 4) == v9) {
          goto LABEL_41;
        }
        goto LABEL_42;
      case 7u:
        int v12 = TagFallback & 7;
        if (v12 == 2) {
          goto LABEL_47;
        }
        goto LABEL_89;
      case 8u:
        int v12 = TagFallback & 7;
        if (v12 == 2) {
          goto LABEL_54;
        }
        goto LABEL_89;
      case 9u:
        int v12 = TagFallback & 7;
        if (v12 == 2) {
          goto LABEL_61;
        }
        goto LABEL_89;
      case 0xAu:
        int v12 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_89;
        }
        int v39 = (char *)*((void *)a2 + 1);
        unint64_t v37 = *((void *)a2 + 2);
        if ((unint64_t)v39 < v37) {
          goto LABEL_70;
        }
        goto LABEL_93;
      case 0xBu:
        int v12 = TagFallback & 7;
        if (v12 != 2) {
          goto LABEL_89;
        }
        *((_DWORD *)this + 24) |= 0x400u;
        if (*((void *)this + 9) == v9) {
          goto LABEL_75;
        }
        goto LABEL_76;
      case 0xCu:
        int v12 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_89;
        }
        long long v45 = (char *)*((void *)a2 + 1);
        unint64_t v43 = *((void *)a2 + 2);
        if ((unint64_t)v45 < v43) {
          goto LABEL_83;
        }
        goto LABEL_98;
      case 0xDu:
        int v12 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_89;
        }
        uint64_t v47 = (char *)*((void *)a2 + 1);
        unint64_t v43 = *((void *)a2 + 2);
        goto LABEL_102;
      case 0xEu:
        int v12 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_89;
        }
        size_t v48 = (char *)*((void *)a2 + 1);
        unint64_t v43 = *((void *)a2 + 2);
        goto LABEL_115;
      default:
        int v12 = TagFallback & 7;
LABEL_89:
        if (v12 == 4) {
          return 1;
        }
        if (wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback))continue; {
        return 0;
        }
    }
    return result;
  }
}

uint64_t awd::metrics::CommCenterWakeReasonInfo::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = this;
  int v6 = *(_DWORD *)(this + 96);
  if (v6)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(void *)(this + 8), (uint64_t)a2, a4);
    int v6 = *(_DWORD *)(v5 + 96);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_18;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  int v6 = *(_DWORD *)(v5 + 96);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_19;
  }
LABEL_18:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, *(unsigned __int8 *)(v5 + 52), (uint64_t)a2, a4);
  int v6 = *(_DWORD *)(v5 + 96);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_20;
  }
LABEL_19:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  int v6 = *(_DWORD *)(v5 + 96);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_21;
  }
LABEL_20:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, *(unsigned int *)(v5 + 48), (uint64_t)a2, a4);
  int v6 = *(_DWORD *)(v5 + 96);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_22;
  }
LABEL_21:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  int v6 = *(_DWORD *)(v5 + 96);
  if ((v6 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_23;
  }
LABEL_22:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  int v6 = *(_DWORD *)(v5 + 96);
  if ((v6 & 0x80) == 0)
  {
LABEL_9:
    if ((v6 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_24;
  }
LABEL_23:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  int v6 = *(_DWORD *)(v5 + 96);
  if ((v6 & 0x100) == 0)
  {
LABEL_10:
    if ((v6 & 0x200) == 0) {
      goto LABEL_11;
    }
    goto LABEL_25;
  }
LABEL_24:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  int v6 = *(_DWORD *)(v5 + 96);
  if ((v6 & 0x200) == 0)
  {
LABEL_11:
    if ((v6 & 0x400) == 0) {
      goto LABEL_12;
    }
    goto LABEL_26;
  }
LABEL_25:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xA, *(unsigned int *)(v5 + 80), (uint64_t)a2, a4);
  int v6 = *(_DWORD *)(v5 + 96);
  if ((v6 & 0x400) == 0)
  {
LABEL_12:
    if ((v6 & 0x800) == 0) {
      goto LABEL_13;
    }
    goto LABEL_27;
  }
LABEL_26:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  int v6 = *(_DWORD *)(v5 + 96);
  if ((v6 & 0x800) == 0)
  {
LABEL_13:
    if ((v6 & 0x1000) == 0) {
      goto LABEL_14;
    }
LABEL_28:
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xD, *(unsigned int *)(v5 + 88), (uint64_t)a2, a4);
    if ((*(_DWORD *)(v5 + 96) & 0x2000) == 0) {
      return this;
    }
    goto LABEL_29;
  }
LABEL_27:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xC, *(unsigned int *)(v5 + 84), (uint64_t)a2, a4);
  int v6 = *(_DWORD *)(v5 + 96);
  if ((v6 & 0x1000) != 0) {
    goto LABEL_28;
  }
LABEL_14:
  if ((v6 & 0x2000) == 0) {
    return this;
  }
LABEL_29:
  uint64_t v7 = *(unsigned __int8 *)(v5 + 53);

  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xE, v7, (uint64_t)a2, a4);
}

uint64_t awd::metrics::CommCenterWakeReasonInfo::ByteSize(awd::metrics::CommCenterWakeReasonInfo *this)
{
  int v2 = *((_DWORD *)this + 24);
  if (!(_BYTE)v2)
  {
    uint64_t v3 = 0;
    if ((v2 & 0xFF00) == 0) {
      goto LABEL_106;
    }
LABEL_67:
    if ((v2 & 0x100) != 0)
    {
      uint64_t v36 = *((void *)this + 8);
      int v37 = *(unsigned __int8 *)(v36 + 23);
      char v38 = v37;
      uint64_t v39 = *(void *)(v36 + 8);
      if ((v37 & 0x80u) == 0) {
        unint64_t v40 = *(unsigned __int8 *)(v36 + 23);
      }
      else {
        unint64_t v40 = v39;
      }
      if (v40 >= 0x80)
      {
        int v41 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v40);
        int v37 = *(unsigned __int8 *)(v36 + 23);
        uint64_t v39 = *(void *)(v36 + 8);
        int v2 = *((_DWORD *)this + 24);
        char v38 = *(unsigned char *)(v36 + 23);
      }
      else
      {
        int v41 = 1;
      }
      if (v38 < 0) {
        int v37 = v39;
      }
      LODWORD(v3) = v3 + v41 + v37 + 1;
      if ((v2 & 0x200) == 0)
      {
LABEL_69:
        if ((v2 & 0x400) == 0) {
          goto LABEL_70;
        }
LABEL_86:
        uint64_t v44 = *((void *)this + 9);
        int v45 = *(unsigned __int8 *)(v44 + 23);
        char v46 = v45;
        uint64_t v47 = *(void *)(v44 + 8);
        if ((v45 & 0x80u) == 0) {
          unint64_t v48 = *(unsigned __int8 *)(v44 + 23);
        }
        else {
          unint64_t v48 = v47;
        }
        if (v48 >= 0x80)
        {
          int v49 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v48);
          int v45 = *(unsigned __int8 *)(v44 + 23);
          uint64_t v47 = *(void *)(v44 + 8);
          int v2 = *((_DWORD *)this + 24);
          char v46 = *(unsigned char *)(v44 + 23);
        }
        else
        {
          int v49 = 1;
        }
        if (v46 < 0) {
          int v45 = v47;
        }
        LODWORD(v3) = v3 + v49 + v45 + 1;
        if ((v2 & 0x800) == 0)
        {
LABEL_71:
          if ((v2 & 0x1000) == 0) {
            goto LABEL_103;
          }
          goto LABEL_99;
        }
LABEL_95:
        char v50 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 21);
        if (v50 >= 0x80)
        {
          int v51 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v50);
          int v2 = *((_DWORD *)this + 24);
          LODWORD(v3) = v51 + 1 + v3;
          if ((v2 & 0x1000) == 0) {
            goto LABEL_103;
          }
        }
        else
        {
          LODWORD(v3) = v3 + 2;
          if ((v2 & 0x1000) == 0)
          {
LABEL_103:
            if ((v2 & 0x2000) != 0) {
              uint64_t v3 = (v3 + 2);
            }
            else {
              uint64_t v3 = v3;
            }
            goto LABEL_106;
          }
        }
LABEL_99:
        unsigned int v52 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 22);
        if (v52 >= 0x80)
        {
          int v53 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v52) + 1;
          int v2 = *((_DWORD *)this + 24);
        }
        else
        {
          int v53 = 2;
        }
        LODWORD(v3) = v53 + v3;
        goto LABEL_103;
      }
    }
    else if ((v2 & 0x200) == 0)
    {
      goto LABEL_69;
    }
    BOOL v42 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 20);
    if (v42 >= 0x80)
    {
      int v43 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v42);
      int v2 = *((_DWORD *)this + 24);
      LODWORD(v3) = v43 + 1 + v3;
      if ((v2 & 0x400) != 0) {
        goto LABEL_86;
      }
    }
    else
    {
      LODWORD(v3) = v3 + 2;
      if ((v2 & 0x400) != 0) {
        goto LABEL_86;
      }
    }
LABEL_70:
    if ((v2 & 0x800) == 0) {
      goto LABEL_71;
    }
    goto LABEL_95;
  }
  if (v2)
  {
    LODWORD(v3) = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*((wireless_diagnostics::google::protobuf::io::CodedOutputStream **)this
                                                                                              + 1))
                + 1;
    int v2 = *((_DWORD *)this + 24);
    if ((v2 & 2) == 0) {
      goto LABEL_17;
    }
  }
  else
  {
    LODWORD(v3) = 0;
    if ((v2 & 2) == 0) {
      goto LABEL_17;
    }
  }
  uint64_t v4 = *((void *)this + 2);
  int v5 = *(unsigned __int8 *)(v4 + 23);
  char v6 = v5;
  uint64_t v7 = *(void *)(v4 + 8);
  if ((v5 & 0x80u) == 0) {
    unint64_t v8 = *(unsigned __int8 *)(v4 + 23);
  }
  else {
    unint64_t v8 = v7;
  }
  if (v8 >= 0x80)
  {
    int v9 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v8);
    int v5 = *(unsigned __int8 *)(v4 + 23);
    uint64_t v7 = *(void *)(v4 + 8);
    int v2 = *((_DWORD *)this + 24);
    char v6 = *(unsigned char *)(v4 + 23);
  }
  else
  {
    int v9 = 1;
  }
  if (v6 < 0) {
    int v5 = v7;
  }
  LODWORD(v3) = v3 + v9 + v5 + 1;
LABEL_17:
  if ((v2 & 4) != 0) {
    uint64_t v3 = (v3 + 2);
  }
  else {
    uint64_t v3 = v3;
  }
  if ((v2 & 8) == 0)
  {
    if ((v2 & 0x10) == 0) {
      goto LABEL_22;
    }
LABEL_36:
    int v16 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 12);
    if (v16 >= 0x80)
    {
      int v17 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v16);
      int v2 = *((_DWORD *)this + 24);
      uint64_t v3 = (v3 + v17 + 1);
      if ((v2 & 0x20) != 0) {
        goto LABEL_40;
      }
    }
    else
    {
      uint64_t v3 = (v3 + 2);
      if ((v2 & 0x20) != 0) {
        goto LABEL_40;
      }
    }
LABEL_23:
    if ((v2 & 0x40) == 0) {
      goto LABEL_24;
    }
    goto LABEL_49;
  }
  uint64_t v10 = *((void *)this + 3);
  int v11 = *(unsigned __int8 *)(v10 + 23);
  char v12 = v11;
  uint64_t v13 = *(void *)(v10 + 8);
  if ((v11 & 0x80u) == 0) {
    unint64_t v14 = *(unsigned __int8 *)(v10 + 23);
  }
  else {
    unint64_t v14 = v13;
  }
  if (v14 >= 0x80)
  {
    int v15 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v14);
    int v11 = *(unsigned __int8 *)(v10 + 23);
    uint64_t v13 = *(void *)(v10 + 8);
    int v2 = *((_DWORD *)this + 24);
    char v12 = *(unsigned char *)(v10 + 23);
  }
  else
  {
    int v15 = 1;
  }
  if (v12 < 0) {
    int v11 = v13;
  }
  uint64_t v3 = (v3 + v15 + v11 + 1);
  if ((v2 & 0x10) != 0) {
    goto LABEL_36;
  }
LABEL_22:
  if ((v2 & 0x20) == 0) {
    goto LABEL_23;
  }
LABEL_40:
  uint64_t v18 = *((void *)this + 4);
  int v19 = *(unsigned __int8 *)(v18 + 23);
  char v20 = v19;
  uint64_t v21 = *(void *)(v18 + 8);
  if ((v19 & 0x80u) == 0) {
    unint64_t v22 = *(unsigned __int8 *)(v18 + 23);
  }
  else {
    unint64_t v22 = v21;
  }
  if (v22 >= 0x80)
  {
    int v23 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v22);
    int v19 = *(unsigned __int8 *)(v18 + 23);
    uint64_t v21 = *(void *)(v18 + 8);
    int v2 = *((_DWORD *)this + 24);
    char v20 = *(unsigned char *)(v18 + 23);
  }
  else
  {
    int v23 = 1;
  }
  if (v20 < 0) {
    int v19 = v21;
  }
  uint64_t v3 = (v3 + v23 + v19 + 1);
  if ((v2 & 0x40) == 0)
  {
LABEL_24:
    if ((v2 & 0x80) == 0) {
      goto LABEL_25;
    }
    goto LABEL_58;
  }
LABEL_49:
  uint64_t v24 = *((void *)this + 5);
  int v25 = *(unsigned __int8 *)(v24 + 23);
  char v26 = v25;
  uint64_t v27 = *(void *)(v24 + 8);
  if ((v25 & 0x80u) == 0) {
    unint64_t v28 = *(unsigned __int8 *)(v24 + 23);
  }
  else {
    unint64_t v28 = v27;
  }
  if (v28 >= 0x80)
  {
    int v29 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v28);
    int v25 = *(unsigned __int8 *)(v24 + 23);
    uint64_t v27 = *(void *)(v24 + 8);
    int v2 = *((_DWORD *)this + 24);
    char v26 = *(unsigned char *)(v24 + 23);
  }
  else
  {
    int v29 = 1;
  }
  if (v26 < 0) {
    int v25 = v27;
  }
  uint64_t v3 = (v3 + v29 + v25 + 1);
  if ((v2 & 0x80) == 0)
  {
LABEL_25:
    if ((v2 & 0xFF00) == 0) {
      goto LABEL_106;
    }
    goto LABEL_67;
  }
LABEL_58:
  uint64_t v30 = *((void *)this + 7);
  int v31 = *(unsigned __int8 *)(v30 + 23);
  char v32 = v31;
  uint64_t v33 = *(void *)(v30 + 8);
  if ((v31 & 0x80u) == 0) {
    unint64_t v34 = *(unsigned __int8 *)(v30 + 23);
  }
  else {
    unint64_t v34 = v33;
  }
  if (v34 >= 0x80)
  {
    int v35 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v34);
    int v31 = *(unsigned __int8 *)(v30 + 23);
    uint64_t v33 = *(void *)(v30 + 8);
    int v2 = *((_DWORD *)this + 24);
    char v32 = *(unsigned char *)(v30 + 23);
  }
  else
  {
    int v35 = 1;
  }
  if (v32 < 0) {
    int v31 = v33;
  }
  uint64_t v3 = (v3 + v35 + v31 + 1);
  if ((v2 & 0xFF00) != 0) {
    goto LABEL_67;
  }
LABEL_106:
  *((_DWORD *)this + 23) = v3;
  return v3;
}

void awd::metrics::CommCenterWakeReasonInfo::CopyFrom(awd::metrics::CommCenterWakeReasonInfo *this, const awd::metrics::CommCenterWakeReasonInfo *a2)
{
  if (a2 != this)
  {
    (*(void (**)(awd::metrics::CommCenterWakeReasonInfo *))(*(void *)this + 32))(this);
    awd::metrics::CommCenterWakeReasonInfo::MergeFrom(this, a2);
  }
}

uint64_t awd::metrics::CommCenterWakeReasonInfo::IsInitialized(awd::metrics::CommCenterWakeReasonInfo *this)
{
  return 1;
}

uint64_t awd::metrics::CommCenterWakeReasonInfo::Swap(uint64_t this, awd::metrics::CommCenterWakeReasonInfo *a2)
{
  if (a2 != (awd::metrics::CommCenterWakeReasonInfo *)this)
  {
    uint64_t v2 = *(void *)(this + 8);
    uint64_t v3 = *(void *)(this + 16);
    uint64_t v4 = *((void *)a2 + 2);
    *(void *)(this + 8) = *((void *)a2 + 1);
    *(void *)(this + 16) = v4;
    *((void *)a2 + 1) = v2;
    *((void *)a2 + 2) = v3;
    LOBYTE(v2) = *(unsigned char *)(this + 52);
    *(unsigned char *)(this + 52) = *((unsigned char *)a2 + 52);
    *((unsigned char *)a2 + 52) = v2;
    uint64_t v5 = *(void *)(this + 24);
    *(void *)(this + 24) = *((void *)a2 + 3);
    *((void *)a2 + 3) = v5;
    LODWORD(v5) = *(_DWORD *)(this + 48);
    *(_DWORD *)(this + 48) = *((_DWORD *)a2 + 12);
    *((_DWORD *)a2 + 12) = v5;
    uint64_t v6 = *(void *)(this + 32);
    *(void *)(this + 32) = *((void *)a2 + 4);
    *((void *)a2 + 4) = v6;
    uint64_t v7 = *(void *)(this + 40);
    *(void *)(this + 40) = *((void *)a2 + 5);
    *((void *)a2 + 5) = v7;
    uint64_t v8 = *(void *)(this + 56);
    *(void *)(this + 56) = *((void *)a2 + 7);
    *((void *)a2 + 7) = v8;
    uint64_t v9 = *(void *)(this + 64);
    *(void *)(this + 64) = *((void *)a2 + 8);
    *((void *)a2 + 8) = v9;
    LODWORD(v9) = *(_DWORD *)(this + 80);
    *(_DWORD *)(this + 80) = *((_DWORD *)a2 + 20);
    *((_DWORD *)a2 + 20) = v9;
    uint64_t v10 = *(void *)(this + 72);
    *(void *)(this + 72) = *((void *)a2 + 9);
    *((void *)a2 + 9) = v10;
    LODWORD(v10) = *(_DWORD *)(this + 84);
    *(_DWORD *)(this + 84) = *((_DWORD *)a2 + 21);
    *((_DWORD *)a2 + 21) = v10;
    LODWORD(v10) = *(_DWORD *)(this + 88);
    *(_DWORD *)(this + 88) = *((_DWORD *)a2 + 22);
    *((_DWORD *)a2 + 22) = v10;
    LOBYTE(v10) = *(unsigned char *)(this + 53);
    *(unsigned char *)(this + 53) = *((unsigned char *)a2 + 53);
    *((unsigned char *)a2 + 53) = v10;
    LODWORD(v10) = *(_DWORD *)(this + 96);
    *(_DWORD *)(this + 96) = *((_DWORD *)a2 + 24);
    *((_DWORD *)a2 + 24) = v10;
    LODWORD(v10) = *(_DWORD *)(this + 92);
    *(_DWORD *)(this + 92) = *((_DWORD *)a2 + 23);
    *((_DWORD *)a2 + 23) = v10;
  }
  return this;
}

char *awd::metrics::CommCenterWakeReasonInfo::GetTypeName@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = (char *)operator new(0x28uLL);
  *(void *)a1 = result;
  *(_OWORD *)(a1 + 8) = xmmword_1C59A4360;
  strcpy(result, "awd.metrics.CommCenterWakeReasonInfo");
  return result;
}

uint64_t awd::metrics::CommCenterPowerVotingRecord::GetCachedSize(awd::metrics::CommCenterPowerVotingRecord *this)
{
  return *((unsigned int *)this + 4);
}

uint64_t awd::metrics::CommCenterPowerTransitionSuccess::GetCachedSize(awd::metrics::CommCenterPowerTransitionSuccess *this)
{
  return *((unsigned int *)this + 12);
}

uint64_t awd::metrics::CommCenterPowerTransitionFailure::GetCachedSize(awd::metrics::CommCenterPowerTransitionFailure *this)
{
  return *((unsigned int *)this + 12);
}

uint64_t awd::metrics::CommCenterMissedMTMessage::GetCachedSize(awd::metrics::CommCenterMissedMTMessage *this)
{
  return *((unsigned int *)this + 6);
}

uint64_t awd::metrics::CommCenterLowPowerEvent::GetCachedSize(awd::metrics::CommCenterLowPowerEvent *this)
{
  return *((unsigned int *)this + 8);
}

uint64_t awd::metrics::CommCenterWakeInfo::GetCachedSize(awd::metrics::CommCenterWakeInfo *this)
{
  return *((unsigned int *)this + 7);
}

uint64_t awd::metrics::CommCenterLowPowerStats::GetCachedSize(awd::metrics::CommCenterLowPowerStats *this)
{
  return *((unsigned int *)this + 17);
}

uint64_t awd::metrics::CommCenterWakeReasonInfo::GetCachedSize(awd::metrics::CommCenterWakeReasonInfo *this)
{
  return *((unsigned int *)this + 23);
}

uint64_t abm::ParseWakeDataIP(xpc_object_t *a1, xpc_object_t *a2)
{
  uint64_t v61 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = MEMORY[0x1C8792D30](*a1);
  uint64_t v5 = MEMORY[0x1E4F14590];
  if (v4 != MEMORY[0x1E4F14590] || MEMORY[0x1C8792D30](*a2) != v5) {
    return 0;
  }
  xpc_object_t v7 = xpc_string_create((const char *)*MEMORY[0x1E4F4C618]);
  if (!v7) {
    xpc_object_t v7 = xpc_null_create();
  }
  xpc_dictionary_set_value(*a2, (const char *)*MEMORY[0x1E4F4C568], v7);
  xpc_object_t v8 = xpc_null_create();
  xpc_release(v7);
  xpc_release(v8);
  xpc_object_t v9 = xpc_string_create((const char *)*MEMORY[0x1E4F4C6F8]);
  if (!v9) {
    xpc_object_t v9 = xpc_null_create();
  }
  xpc_dictionary_set_value(*a2, (const char *)*MEMORY[0x1E4F4C918], v9);
  xpc_object_t v10 = xpc_null_create();
  xpc_release(v9);
  xpc_release(v10);
  xpc_object_t v11 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v12 = v11;
  if (v11)
  {
    xpc_object_t xdict = v11;
  }
  else
  {
    xpc_object_t v12 = xpc_null_create();
    xpc_object_t xdict = v12;
    if (!v12)
    {
      xpc_object_t v13 = xpc_null_create();
      xpc_object_t v12 = 0;
      goto LABEL_15;
    }
  }
  if (MEMORY[0x1C8792D30](v12) == v5)
  {
    xpc_retain(v12);
    goto LABEL_16;
  }
  xpc_object_t v13 = xpc_null_create();
LABEL_15:
  xpc_object_t xdict = v13;
LABEL_16:
  xpc_release(v12);
  memset(v55, 170, sizeof(v55));
  xpc_object_t value = xpc_dictionary_get_value(*a1, (const char *)*MEMORY[0x1E4F4C560]);
  object[0] = value;
  if (value) {
    xpc_retain(value);
  }
  else {
    object[0] = xpc_null_create();
  }
  memset(__p, 0, 24);
  xpc::dyn_cast_or_default();
  xpc_release(object[0]);
  if (v55[1] == v55[0])
  {
    xpc_object_t v35 = xpc_BOOL_create(1);
    if (!v35) {
      xpc_object_t v35 = xpc_null_create();
    }
  }
  else
  {
    int v15 = *(unsigned __int8 *)v55[0] >> 4;
    if (v15 == 6)
    {
      xpc_object_t v37 = xpc_string_create((const char *)*MEMORY[0x1E4F4CCF8]);
      if (!v37) {
        xpc_object_t v37 = xpc_null_create();
      }
      xpc_object_t v17 = xdict;
      xpc_dictionary_set_value(xdict, (const char *)*MEMORY[0x1E4F4CB60], v37);
      xpc_object_t v38 = xpc_null_create();
      xpc_release(v37);
      xpc_release(v38);
      if ((void *)((char *)v55[1] - (char *)v55[0]) >= (void *)0x28)
      {
        memset(__p, 0, 47);
        *(_OWORD *)xpc_object_t object = 0u;
        memset(v59, 0, sizeof(v59));
        inet_ntop(30, (char *)v55[0] + 8, (char *)__p, 0x2Eu);
        inet_ntop(30, (char *)v55[0] + 24, (char *)object, 0x2Eu);
        xpc_object_t v39 = xpc_string_create((const char *)__p);
        if (!v39) {
          xpc_object_t v39 = xpc_null_create();
        }
        xpc_dictionary_set_value(xdict, (const char *)*MEMORY[0x1E4F4CFF0], v39);
        xpc_object_t v40 = xpc_null_create();
        xpc_release(v39);
        xpc_release(v40);
        xpc_object_t v41 = xpc_string_create((const char *)object);
        if (!v41) {
          xpc_object_t v41 = xpc_null_create();
        }
        xpc_dictionary_set_value(xdict, (const char *)*MEMORY[0x1E4F4D1F0], v41);
        xpc_object_t v42 = xpc_null_create();
        xpc_release(v41);
        xpc_release(v42);
        int v43 = *((unsigned __int8 *)v55[0] + 6);
        memset(&v57, 170, sizeof(v57));
        abm::_ProtocolAsString(&v57, v43);
        if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v44 = &v57;
        }
        else {
          uint64_t v44 = (std::string *)v57.__r_.__value_.__r.__words[0];
        }
        xpc_object_t v45 = xpc_string_create((const char *)v44);
        if (!v45) {
          xpc_object_t v45 = xpc_null_create();
        }
        xpc_dictionary_set_value(xdict, (const char *)*MEMORY[0x1E4F4CC80], v45);
        xpc_object_t v46 = xpc_null_create();
        xpc_release(v45);
        xpc_release(v46);
        int v47 = SHIBYTE(v57.__r_.__value_.__r.__words[2]);
        if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          size_t size = HIBYTE(v57.__r_.__value_.__r.__words[2]);
        }
        else {
          size_t size = v57.__r_.__value_.__l.__size_;
        }
        if (size == strlen((const char *)*MEMORY[0x1E4F4CCE0])
          && ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? (int v49 = &v57)
            : (int v49 = (std::string *)v57.__r_.__value_.__r.__words[0]),
              !memcmp(v49, (const void *)*MEMORY[0x1E4F4CCE0], size))
          || size == strlen((const char *)*MEMORY[0x1E4F4CCE8])
          && (v47 >= 0 ? (int v51 = &v57) : (int v51 = (std::string *)v57.__r_.__value_.__r.__words[0]),
              !memcmp(v51, (const void *)*MEMORY[0x1E4F4CCE8], size)))
        {
          if ((void *)((char *)v55[1] - (char *)v55[0]) >= (void *)0x2C)
          {
            abm::_ParsePortData((abm *)v55[0], (unsigned __int8 *)0x28, &xdict, v50);
            LOBYTE(v47) = *((unsigned char *)&v57.__r_.__value_.__s + 23);
          }
        }
        if ((v47 & 0x80) != 0) {
          operator delete(v57.__r_.__value_.__l.__data_);
        }
        goto LABEL_92;
      }
      xpc_object_t v52 = xpc_BOOL_create(1);
      if (!v52) {
        xpc_object_t v52 = xpc_null_create();
      }
LABEL_91:
      xpc_dictionary_set_value(v17, (const char *)*MEMORY[0x1E4F4D110], v52);
      xpc_object_t v53 = xpc_null_create();
      xpc_release(v52);
      xpc_release(v53);
      goto LABEL_92;
    }
    if (v15 == 4)
    {
      xpc_object_t v16 = xpc_string_create((const char *)*MEMORY[0x1E4F4CCF0]);
      if (!v16) {
        xpc_object_t v16 = xpc_null_create();
      }
      xpc_object_t v17 = xdict;
      xpc_dictionary_set_value(xdict, (const char *)*MEMORY[0x1E4F4CB60], v16);
      xpc_object_t v18 = xpc_null_create();
      xpc_release(v16);
      xpc_release(v18);
      if ((void *)((char *)v55[1] - (char *)v55[0]) >= (void *)0x14)
      {
        memset(__p, 170, 24);
        abm::_ProtocolAsString(__p, *((unsigned __int8 *)v55[0] + 9));
        unsigned int v20 = *((_DWORD *)v55[0] + 3);
        unsigned int v19 = *((_DWORD *)v55[0] + 4);
        char v21 = *(unsigned char *)v55[0];
        if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          unint64_t v22 = __p;
        }
        else {
          unint64_t v22 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
        }
        xpc_object_t v23 = xpc_string_create((const char *)v22);
        if (!v23) {
          xpc_object_t v23 = xpc_null_create();
        }
        xpc_dictionary_set_value(xdict, (const char *)*MEMORY[0x1E4F4CC80], v23);
        xpc_object_t v24 = xpc_null_create();
        xpc_release(v23);
        xpc_release(v24);
        xpc_object_t v25 = xpc_int64_create(bswap32(v20));
        if (!v25) {
          xpc_object_t v25 = xpc_null_create();
        }
        xpc_dictionary_set_value(xdict, (const char *)*MEMORY[0x1E4F4CFF0], v25);
        xpc_object_t v26 = xpc_null_create();
        xpc_release(v25);
        xpc_release(v26);
        xpc_object_t v27 = xpc_int64_create(bswap32(v19));
        if (!v27) {
          xpc_object_t v27 = xpc_null_create();
        }
        xpc_dictionary_set_value(xdict, (const char *)*MEMORY[0x1E4F4D1F0], v27);
        xpc_object_t v28 = xpc_null_create();
        xpc_release(v27);
        xpc_release(v28);
        int v29 = SHIBYTE(__p[0].__r_.__value_.__r.__words[2]);
        if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          size_t v30 = HIBYTE(__p[0].__r_.__value_.__r.__words[2]);
        }
        else {
          size_t v30 = __p[0].__r_.__value_.__l.__size_;
        }
        if (v30 == strlen((const char *)*MEMORY[0x1E4F4CCE0])
          && ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? (int v31 = __p)
            : (int v31 = (std::string *)__p[0].__r_.__value_.__r.__words[0]),
              !memcmp(v31, (const void *)*MEMORY[0x1E4F4CCE0], v30))
          || v30 == strlen((const char *)*MEMORY[0x1E4F4CCE8])
          && (v29 >= 0 ? (uint64_t v33 = __p) : (uint64_t v33 = (std::string *)__p[0].__r_.__value_.__r.__words[0]),
              !memcmp(v33, (const void *)*MEMORY[0x1E4F4CCE8], v30)))
        {
          unint64_t v34 = (unsigned __int8 *)(4 * (v21 & 0xF));
          if ((void *)((char *)v55[1] - (char *)v55[0]) >= v34 + 4)
          {
            abm::_ParsePortData((abm *)v55[0], v34, &xdict, v32);
            LOBYTE(v29) = *((unsigned char *)&__p[0].__r_.__value_.__s + 23);
          }
        }
        if ((v29 & 0x80) != 0) {
          operator delete(__p[0].__r_.__value_.__l.__data_);
        }
        goto LABEL_92;
      }
      xpc_object_t v52 = xpc_BOOL_create(1);
      if (!v52) {
        xpc_object_t v52 = xpc_null_create();
      }
      goto LABEL_91;
    }
    xpc_object_t v35 = xpc_BOOL_create(1);
    if (!v35) {
      xpc_object_t v35 = xpc_null_create();
    }
  }
  xpc_object_t v17 = xdict;
  xpc_dictionary_set_value(xdict, (const char *)*MEMORY[0x1E4F4D110], v35);
  xpc_object_t v36 = xpc_null_create();
  xpc_release(v35);
  xpc_release(v36);
LABEL_92:
  if (v17) {
    xpc_retain(v17);
  }
  else {
    xpc_object_t v17 = xpc_null_create();
  }
  xpc_dictionary_set_value(*a2, (const char *)*MEMORY[0x1E4F4CC78], v17);
  xpc_object_t v54 = xpc_null_create();
  xpc_release(v17);
  xpc_release(v54);
  if (v55[0])
  {
    v55[1] = v55[0];
    operator delete(v55[0]);
  }
  xpc_release(xdict);
  return 1;
}

void sub_1C58EE118(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, xpc_object_t object, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

std::string *abm::_ProtocolAsString(std::string *this, int a2)
{
  *(_OWORD *)&this->__r_.__value_.__l.__data_ = 0uLL;
  this->__r_.__value_.__r.__words[2] = 0;
  if (a2 > 16)
  {
    if (a2 == 17)
    {
      uint64_t v3 = (const std::string::value_type **)MEMORY[0x1E4F4CCE8];
      return std::string::__assign_external(this, *v3);
    }
    if (a2 == 58)
    {
      uint64_t v3 = (const std::string::value_type **)MEMORY[0x1E4F4D0B8];
      return std::string::__assign_external(this, *v3);
    }
  }
  else
  {
    if (a2 == 1)
    {
      uint64_t v3 = (const std::string::value_type **)MEMORY[0x1E4F4CDA0];
      return std::string::__assign_external(this, *v3);
    }
    if (a2 == 6)
    {
      uint64_t v3 = (const std::string::value_type **)MEMORY[0x1E4F4CCE0];
      return std::string::__assign_external(this, *v3);
    }
  }
  unint64_t v22 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v21[7] = v4;
  v21[8] = v4;
  v21[5] = v4;
  v21[6] = v4;
  v21[3] = v4;
  v21[4] = v4;
  v21[1] = v4;
  v21[2] = v4;
  v21[0] = v4;
  long long v19 = v4;
  long long v20 = v4;
  long long v17 = v4;
  *(_OWORD *)std::string __p = v4;
  long long v15 = v4;
  long long v16 = v4;
  long long v14 = v4;
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v14);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"Protocol #", 10);
  std::ostream::operator<<();
  if ((BYTE8(v20) & 0x10) != 0)
  {
    uint64_t v8 = v20;
    if ((unint64_t)v20 < *((void *)&v17 + 1))
    {
      *(void *)&long long v20 = *((void *)&v17 + 1);
      uint64_t v8 = *((void *)&v17 + 1);
    }
    xpc_object_t v9 = (const void *)v17;
    size_t v5 = v8 - v17;
    if ((unint64_t)(v8 - v17) >= 0x7FFFFFFFFFFFFFF8) {
      goto LABEL_30;
    }
  }
  else
  {
    if ((BYTE8(v20) & 8) == 0)
    {
      size_t v5 = 0;
      HIBYTE(v13) = 0;
      p_dst = &__dst;
      goto LABEL_24;
    }
    xpc_object_t v9 = (const void *)*((void *)&v15 + 1);
    size_t v5 = *((void *)&v16 + 1) - *((void *)&v15 + 1);
    if (*((void *)&v16 + 1) - *((void *)&v15 + 1) >= 0x7FFFFFFFFFFFFFF8uLL) {
LABEL_30:
    }
      std::string::__throw_length_error[abi:ne180100]();
  }
  if (v5 >= 0x17)
  {
    uint64_t v10 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17) {
      uint64_t v10 = v5 | 7;
    }
    uint64_t v11 = v10 + 1;
    p_dst = (long long *)operator new(v10 + 1);
    *((void *)&__dst + 1) = v5;
    unint64_t v13 = v11 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
  }
  else
  {
    HIBYTE(v13) = v5;
    p_dst = &__dst;
    if (!v5) {
      goto LABEL_24;
    }
  }
  memmove(p_dst, v9, v5);
LABEL_24:
  *((unsigned char *)p_dst + v5) = 0;
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0) {
    operator delete(this->__r_.__value_.__l.__data_);
  }
  *(_OWORD *)&this->__r_.__value_.__l.__data_ = __dst;
  this->__r_.__value_.__r.__words[2] = v13;
  *(void *)&long long v14 = *MEMORY[0x1E4FBA418];
  *(void *)((char *)&v14 + *(void *)(v14 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  *((void *)&v14 + 1) = MEMORY[0x1E4FBA470] + 16;
  if (SHIBYTE(v19) < 0) {
    operator delete(__p[1]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return (std::string *)MEMORY[0x1C8791FB0](v21);
}

void sub_1C58EE5E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  if (*(char *)(v13 + 23) < 0) {
    operator delete(*(void **)v13);
  }
  _Unwind_Resume(exception_object);
}

void abm::_ParsePortData(abm *this, unsigned __int8 *a2, xpc_object_t *a3, xpc::dict *a4)
{
  size_t v5 = (unsigned __int16 *)((char *)this + a2);
  xpc_object_t v6 = xpc_int64_create(bswap32(*v5) >> 16);
  if (!v6) {
    xpc_object_t v6 = xpc_null_create();
  }
  xpc_dictionary_set_value(*a3, (const char *)*MEMORY[0x1E4F4CE38], v6);
  xpc_object_t v7 = xpc_null_create();
  xpc_release(v6);
  xpc_release(v7);
  xpc_object_t v8 = xpc_int64_create(bswap32(v5[1]) >> 16);
  if (!v8) {
    xpc_object_t v8 = xpc_null_create();
  }
  xpc_dictionary_set_value(*a3, (const char *)*MEMORY[0x1E4F4D118], v8);
  xpc_object_t v9 = xpc_null_create();
  xpc_release(v8);
  xpc_release(v9);
}

void Timestamp::Timestamp(Timestamp *this)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  *((void *)this + 1) = 0;
  uint64_t v2 = (void *)((char *)this + 8);
  *((void *)this + 2) = 0;
  *(void *)this = (char *)this + 8;
  unsigned long long v12 = 0uLL;
  if ((gettimeofday((timeval *)&v12, 0) & 0x80000000) == 0
    || !os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    uint64_t v3 = *v2;
    long long v4 = v2;
    if (*v2) {
      goto LABEL_4;
    }
LABEL_10:
    xpc_object_t v7 = (char *)operator new(0x38uLL);
    *((_DWORD *)v7 + 8) = 0;
    *((void *)v7 + 5) = 0;
    *((void *)v7 + 6) = 0;
    *(void *)xpc_object_t v7 = 0;
    *((void *)v7 + 1) = 0;
    *((void *)v7 + 2) = v4;
    void *v2 = v7;
    uint64_t v8 = **(void **)this;
    xpc_object_t v9 = (uint64_t *)v7;
    if (v8)
    {
      *(void *)this = v8;
      xpc_object_t v9 = (uint64_t *)*v2;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 1), v9);
    ++*((void *)this + 2);
    goto LABEL_13;
  }
  uint64_t v10 = __error();
  uint64_t v11 = strerror(*v10);
  *(_DWORD *)long long buf = 136315138;
  long long v14 = v11;
  _os_log_error_impl(&dword_1C5767000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "Failed to get current time. Error: %s\n", buf, 0xCu);
  uint64_t v3 = *v2;
  long long v4 = v2;
  if (!*v2) {
    goto LABEL_10;
  }
LABEL_4:
  uint64_t v5 = v3;
  while (1)
  {
    while (1)
    {
      long long v4 = (void *)v5;
      int v6 = *(_DWORD *)(v5 + 32);
      if (v6 < 1) {
        break;
      }
      uint64_t v5 = *v4;
      uint64_t v2 = v4;
      if (!*v4) {
        goto LABEL_10;
      }
    }
    if ((v6 & 0x80000000) == 0) {
      break;
    }
    uint64_t v5 = v4[1];
    if (!v5)
    {
      uint64_t v2 = v4 + 1;
      goto LABEL_10;
    }
  }
  xpc_object_t v7 = (char *)v4;
LABEL_13:
  *(_OWORD *)(v7 + 40) = v12;
}

void sub_1C58EE8A4(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy(v1, *v2);
  _Unwind_Resume(a1);
}

void sub_1C58EE8C0(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy(v1, v2);
  _Unwind_Resume(a1);
}

void Timestamp::Timestamp(Timestamp *this, const Timestamp *a2)
{
  *((void *)this + 2) = 0;
  *((void *)this + 1) = 0;
  *(void *)this = (char *)this + 8;
  std::map<Timestamp::TimeDomain,timeval>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<Timestamp::TimeDomain,timeval>,std::__tree_node<std::__value_type<Timestamp::TimeDomain,timeval>,void *> *,long>>>((uint64_t *)this, *(void **)a2, (void *)a2 + 1);
}

{
  *((void *)this + 2) = 0;
  *((void *)this + 1) = 0;
  *(void *)this = (char *)this + 8;
  std::map<Timestamp::TimeDomain,timeval>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<Timestamp::TimeDomain,timeval>,std::__tree_node<std::__value_type<Timestamp::TimeDomain,timeval>,void *> *,long>>>((uint64_t *)this, *(void **)a2, (void *)a2 + 1);
}

void sub_1C58EE91C(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_1C58EE974(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

void *Timestamp::Timestamp(void *a1, _OWORD *a2, int a3)
{
  a1[2] = 0;
  a1[1] = 0;
  int v6 = a1 + 1;
  *a1 = a1 + 1;
  xpc_object_t v7 = (char *)operator new(0x38uLL);
  *((_DWORD *)v7 + 8) = a3;
  *(void *)xpc_object_t v7 = 0;
  *((void *)v7 + 1) = 0;
  *((void *)v7 + 2) = v6;
  *int v6 = v7;
  *a1 = v7;
  v7[24] = 1;
  a1[2] = 1;
  *(_OWORD *)(v7 + 40) = *a2;
  return a1;
}

{
  void *v6;
  char *v7;

  a1[2] = 0;
  a1[1] = 0;
  int v6 = a1 + 1;
  *a1 = a1 + 1;
  xpc_object_t v7 = (char *)operator new(0x38uLL);
  *((_DWORD *)v7 + 8) = a3;
  *(void *)xpc_object_t v7 = 0;
  *((void *)v7 + 1) = 0;
  *((void *)v7 + 2) = v6;
  *int v6 = v7;
  *a1 = v7;
  v7[24] = 1;
  a1[2] = 1;
  *(_OWORD *)(v7 + 40) = *a2;
  return a1;
}

__n128 Timestamp::set(uint64_t **a1, __n128 *a2, int a3)
{
  xpc_object_t v7 = a1 + 1;
  int v6 = (char *)a1[1];
  if (v6)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v8 = v6;
        int v9 = *((_DWORD *)v6 + 8);
        if (v9 <= a3) {
          break;
        }
        int v6 = *(char **)v8;
        xpc_object_t v7 = (uint64_t **)v8;
        if (!*(void *)v8) {
          goto LABEL_8;
        }
      }
      if (v9 >= a3) {
        break;
      }
      int v6 = (char *)*((void *)v8 + 1);
      if (!v6)
      {
        xpc_object_t v7 = (uint64_t **)(v8 + 8);
        goto LABEL_8;
      }
    }
  }
  else
  {
    uint64_t v8 = (char *)(a1 + 1);
LABEL_8:
    uint64_t v10 = v8;
    uint64_t v8 = (char *)operator new(0x38uLL);
    *((_DWORD *)v8 + 8) = a3;
    *((void *)v8 + 5) = 0;
    *((void *)v8 + 6) = 0;
    *(void *)uint64_t v8 = 0;
    *((void *)v8 + 1) = 0;
    *((void *)v8 + 2) = v10;
    *xpc_object_t v7 = (uint64_t *)v8;
    uint64_t v11 = (uint64_t *)**a1;
    unsigned long long v12 = (uint64_t *)v8;
    if (v11)
    {
      *a1 = v11;
      unsigned long long v12 = *v7;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v12);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  __n128 result = *a2;
  *(__n128 *)(v8 + 40) = *a2;
  return result;
}

void *Timestamp::Timestamp(void *a1, uint64_t a2, int a3)
{
  a1[2] = 0;
  a1[1] = 0;
  int v6 = a1 + 1;
  *a1 = a1 + 1;
  xpc_object_t v7 = operator new(0x38uLL);
  v7[8] = a3;
  *(void *)xpc_object_t v7 = 0;
  *((void *)v7 + 1) = 0;
  *((void *)v7 + 2) = v6;
  *int v6 = v7;
  *a1 = v7;
  *((unsigned char *)v7 + 24) = 1;
  a1[2] = 1;
  *((void *)v7 + 5) = a2;
  *((void *)v7 + 6) = 0xAAAAAAAAAAAAAAAALL;
  return a1;
}

{
  void *v6;
  _DWORD *v7;

  a1[2] = 0;
  a1[1] = 0;
  int v6 = a1 + 1;
  *a1 = a1 + 1;
  xpc_object_t v7 = operator new(0x38uLL);
  v7[8] = a3;
  *(void *)xpc_object_t v7 = 0;
  *((void *)v7 + 1) = 0;
  *((void *)v7 + 2) = v6;
  *int v6 = v7;
  *a1 = v7;
  *((unsigned char *)v7 + 24) = 1;
  a1[2] = 1;
  *((void *)v7 + 5) = a2;
  *((void *)v7 + 6) = 0xAAAAAAAAAAAAAAAALL;
  return a1;
}

uint64_t **Timestamp::Timestamp(uint64_t **a1, char *a2, char a3, int a4)
{
  uint64_t v5 = a2;
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  a1[1] = 0;
  xpc_object_t v7 = a1 + 1;
  a1[2] = 0;
  *a1 = (uint64_t *)(a1 + 1);
  std::string __p[2] = (void *)0x11AAAAAAAAAA0053;
  *(_OWORD *)std::string __p = *(_OWORD *)"%Y-%m-%d-%H-%M-%S";
  if ((a3 & 0x10) != 0)
  {
    HIBYTE(__p[2]) = 19;
    strcpy((char *)__p, "%Y.%m.%d_%H-%M-%S%z");
  }
  *((void *)&v23 + 1) = 0xAAAAAAAA00000000;
  memset(&v24, 0, sizeof(v24));
  if (a2[23] < 0) {
    uint64_t v5 = *(const char **)a2;
  }
  if (strptime(v5, (const char *)__p, &v24))
  {
    v24.tm_isdst = -1;
    *(void *)&unsigned long long v23 = mktime(&v24);
    if ((void)v23 != -1) {
      goto LABEL_15;
    }
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      long long v19 = __error();
      long long v20 = strerror(*v19);
      *(_DWORD *)long long buf = 136315138;
      xpc_object_t v27 = v20;
      _os_log_error_impl(&dword_1C5767000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "Failed to convert to absolute time. Error: %s\n", buf, 0xCu);
      unsigned long long v23 = 0uLL;
      if ((gettimeofday((timeval *)&v23, 0) & 0x80000000) == 0) {
        goto LABEL_15;
      }
    }
    else
    {
      unsigned long long v23 = 0uLL;
      if ((gettimeofday((timeval *)&v23, 0) & 0x80000000) == 0) {
        goto LABEL_15;
      }
    }
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
      goto LABEL_15;
    }
    uint64_t v8 = __error();
    int v9 = strerror(*v8);
    *(_DWORD *)long long buf = 136315138;
    xpc_object_t v27 = v9;
    uint64_t v10 = MEMORY[0x1E4F14500];
    uint64_t v11 = "Failed to get current time after absolute time conversion failed. Error: %s\n";
    goto LABEL_32;
  }
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_1C5767000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "Failed to convert time from string format\n", buf, 2u);
  }
  unsigned long long v23 = 0uLL;
  if (gettimeofday((timeval *)&v23, 0) < 0 && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    char v21 = __error();
    unint64_t v22 = strerror(*v21);
    *(_DWORD *)long long buf = 136315138;
    xpc_object_t v27 = v22;
    uint64_t v10 = MEMORY[0x1E4F14500];
    uint64_t v11 = "Failed to get current time after conversion failure. Error: %s\n";
LABEL_32:
    _os_log_error_impl(&dword_1C5767000, v10, OS_LOG_TYPE_ERROR, v11, buf, 0xCu);
  }
LABEL_15:
  unsigned long long v12 = *v7;
  uint64_t v13 = v7;
  if (*v7)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v13 = (uint64_t **)v12;
        int v14 = *((_DWORD *)v12 + 8);
        if (v14 <= a4) {
          break;
        }
        unsigned long long v12 = *v13;
        xpc_object_t v7 = v13;
        if (!*v13) {
          goto LABEL_22;
        }
      }
      if (v14 >= a4) {
        break;
      }
      unsigned long long v12 = v13[1];
      if (!v12)
      {
        xpc_object_t v7 = v13 + 1;
        goto LABEL_22;
      }
    }
    *(_OWORD *)(v13 + 5) = v23;
    if (SHIBYTE(__p[2]) < 0) {
      goto LABEL_25;
    }
  }
  else
  {
LABEL_22:
    uint64_t v15 = (char *)operator new(0x38uLL);
    *((_DWORD *)v15 + 8) = a4;
    *((void *)v15 + 5) = 0;
    *((void *)v15 + 6) = 0;
    *(void *)uint64_t v15 = 0;
    *((void *)v15 + 1) = 0;
    *((void *)v15 + 2) = v13;
    *xpc_object_t v7 = (uint64_t *)v15;
    long long v16 = (uint64_t *)**a1;
    long long v17 = (uint64_t *)v15;
    if (v16)
    {
      *a1 = v16;
      long long v17 = *v7;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v17);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    *(_OWORD *)(v15 + 40) = v23;
    if (SHIBYTE(__p[2]) < 0) {
LABEL_25:
    }
      operator delete(__p[0]);
  }
  return a1;
}

void sub_1C58EEF90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy(v24, *(void **)(v24 + 8));
  _Unwind_Resume(a1);
}

uint64_t Timestamp::get(uint64_t a1, void *a2, int a3)
{
  *a2 = 0;
  a2[1] = 0;
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v3 = a1 + 8;
  uint64_t v4 = v5;
  if (!v5) {
    return 0;
  }
  uint64_t v6 = v3;
  do
  {
    int v7 = *(_DWORD *)(v4 + 32);
    BOOL v8 = v7 < a3;
    if (v7 >= a3) {
      int v9 = (uint64_t *)v4;
    }
    else {
      int v9 = (uint64_t *)(v4 + 8);
    }
    if (!v8) {
      uint64_t v6 = v4;
    }
    uint64_t v4 = *v9;
  }
  while (*v9);
  if (v6 == v3 || *(_DWORD *)(v6 + 32) > a3) {
    return 0;
  }
  *(_OWORD *)a2 = *(_OWORD *)(v6 + 40);
  return 1;
}

uint64_t Timestamp::now(timeval *this, timeval *a2)
{
  return gettimeofday(this, 0);
}

uint64_t Timestamp::asString@<X0>(uint64_t a1@<X0>, int a2@<W1>, char a3@<W2>, unsigned char *a4@<X8>)
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  unint64_t v42 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v8 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v41[7] = v8;
  v41[8] = v8;
  v41[5] = v8;
  v41[6] = v8;
  v41[3] = v8;
  v41[4] = v8;
  v41[1] = v8;
  v41[2] = v8;
  long long v40 = v8;
  v41[0] = v8;
  *(_OWORD *)std::string __p = v8;
  long long v39 = v8;
  long long v36 = v8;
  long long v37 = v8;
  long long v34 = v8;
  long long v35 = v8;
  long long v33 = v8;
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v33);
  uint64_t v11 = *(void *)(a1 + 8);
  uint64_t v10 = a1 + 8;
  uint64_t v9 = v11;
  if (!v11) {
    goto LABEL_11;
  }
  uint64_t v12 = v10;
  do
  {
    int v13 = *(_DWORD *)(v9 + 32);
    BOOL v14 = v13 < a2;
    if (v13 >= a2) {
      uint64_t v15 = (uint64_t *)v9;
    }
    else {
      uint64_t v15 = (uint64_t *)(v9 + 8);
    }
    if (!v14) {
      uint64_t v12 = v9;
    }
    uint64_t v9 = *v15;
  }
  while (*v15);
  if (v12 != v10 && *(_DWORD *)(v12 + 32) <= a2)
  {
    time_t v16 = *(void *)(v12 + 40);
    if ((a3 & 0x11) != 0)
    {
LABEL_12:
      v31.tm_zone = (char *)0xAAAAAAAAAAAAAAAALL;
      time_t v32 = v16;
      *(void *)&long long v17 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v17 + 1) = 0xAAAAAAAAAAAAAAAALL;
      *(_OWORD *)&v31.tm_mon = v17;
      *(_OWORD *)&v31.tm_isdst = v17;
      *(_OWORD *)&v31.tm_sec = v17;
      localtime_r(&v32, &v31);
      long long v46 = 0u;
      long long v47 = 0u;
      *(_OWORD *)__s = 0u;
      long long v45 = 0u;
      if ((a3 & 0x10) != 0) {
        xpc_object_t v18 = "%Y.%m.%d_%H-%M-%S%z";
      }
      else {
        xpc_object_t v18 = "%Y-%m-%d-%H-%M-%S";
      }
      strftime(__s, 0x40uLL, v18, &v31);
      size_t v19 = strlen(__s);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v34, (uint64_t)__s, v19);
      if ((a3 & 8) != 0)
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v34, (uint64_t)"-", 1);
        uint64_t v20 = v34;
        char v21 = (char *)&v34 + *(void *)(v34 - 24);
        if (*((_DWORD *)v21 + 36) == -1)
        {
          std::ios_base::getloc((const std::ios_base *)((char *)&v34 + *(void *)(v34 - 24)));
          unint64_t v22 = std::locale::use_facet(&v43, MEMORY[0x1E4FBA258]);
          ((void (*)(const std::locale::facet *, uint64_t))v22->__vftable[2].~facet_0)(v22, 32);
          std::locale::~locale(&v43);
          uint64_t v20 = v34;
        }
        *((_DWORD *)v21 + 36) = 48;
        *(void *)((char *)&v35 + *(void *)(v20 - 24) + 8) = 3;
        std::ostream::operator<<();
      }
      goto LABEL_23;
    }
  }
  else
  {
LABEL_11:
    time_t v16 = 0;
    if ((a3 & 0x11) != 0) {
      goto LABEL_12;
    }
  }
  std::ostream::operator<<();
  if ((a3 & 4) != 0 || (a3 & 8) != 0)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v34, (uint64_t)".", 1);
    std::ostream::operator<<();
  }
LABEL_23:
  if ((BYTE8(v40) & 0x10) != 0)
  {
    uint64_t v24 = v40;
    if ((unint64_t)v40 < *((void *)&v37 + 1))
    {
      *(void *)&long long v40 = *((void *)&v37 + 1);
      uint64_t v24 = *((void *)&v37 + 1);
    }
    xpc_object_t v25 = (const void *)v37;
    size_t v23 = v24 - v37;
    if ((unint64_t)(v24 - v37) >= 0x7FFFFFFFFFFFFFF8) {
      goto LABEL_40;
    }
  }
  else
  {
    if ((BYTE8(v40) & 8) == 0)
    {
      size_t v23 = 0;
      a4[23] = 0;
      goto LABEL_36;
    }
    xpc_object_t v25 = (const void *)*((void *)&v35 + 1);
    size_t v23 = *((void *)&v36 + 1) - *((void *)&v35 + 1);
    if (*((void *)&v36 + 1) - *((void *)&v35 + 1) >= 0x7FFFFFFFFFFFFFF8uLL) {
LABEL_40:
    }
      std::string::__throw_length_error[abi:ne180100]();
  }
  if (v23 >= 0x17)
  {
    uint64_t v26 = (v23 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v23 | 7) != 0x17) {
      uint64_t v26 = v23 | 7;
    }
    uint64_t v27 = v26 + 1;
    uint64_t v28 = operator new(v26 + 1);
    *((void *)a4 + 1) = v23;
    *((void *)a4 + 2) = v27 | 0x8000000000000000;
    *(void *)a4 = v28;
    a4 = v28;
    goto LABEL_35;
  }
  a4[23] = v23;
  if (v23) {
LABEL_35:
  }
    memmove(a4, v25, v23);
LABEL_36:
  a4[v23] = 0;
  *(void *)&long long v33 = *MEMORY[0x1E4FBA408];
  uint64_t v29 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)&v33 + *(void *)(v33 - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  *(void *)&long long v34 = v29;
  *((void *)&v34 + 1) = MEMORY[0x1E4FBA470] + 16;
  if (SHIBYTE(v39) < 0) {
    operator delete(__p[1]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1C8791FB0](v41);
}

void sub_1C58EF4C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1C58EF4D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  std::locale::~locale((std::locale *)(v9 - 136));
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1C58EF4F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1C58EF50C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1C58EF520(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *Timestamp::convert(uint64_t a1)
{
  memset(v11, 170, sizeof(v11));
  if (*(char *)(a1 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
  }
  else {
    std::string __p = *(std::string *)a1;
  }
  Timestamp::Timestamp(v11, (char *)&__p, 9, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    uint64_t v1 = v11[1];
    if (!v11[1])
    {
LABEL_18:
      long long v8 = 0;
      goto LABEL_19;
    }
  }
  else
  {
    uint64_t v1 = v11[1];
    if (!v11[1]) {
      goto LABEL_18;
    }
  }
  uint64_t v2 = &v11[1];
  uint64_t v3 = v1;
  do
  {
    uint64_t v4 = (uint64_t **)v3;
    uint64_t v5 = v2;
    int v6 = *((_DWORD *)v3 + 8);
    if (v6 >= 0) {
      uint64_t v2 = (uint64_t **)v3;
    }
    else {
      ++v3;
    }
    uint64_t v3 = (uint64_t *)*v3;
  }
  while (v3);
  if (v2 == &v11[1]) {
    goto LABEL_18;
  }
  int v7 = v6 >= 0 ? v4 : v5;
  if (*((int *)v7 + 8) > 0) {
    goto LABEL_18;
  }
  if (v6 < 0) {
    uint64_t v4 = v5;
  }
  long long v8 = v4[5];
LABEL_19:
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v11, v1);
  return v8;
}

void sub_1C58EF634(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::map<Timestamp::TimeDomain,timeval>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<Timestamp::TimeDomain,timeval>,std::__tree_node<std::__value_type<Timestamp::TimeDomain,timeval>,void *> *,long>>>(uint64_t *result, void *a2, void *a3)
{
  if (a2 != a3)
  {
    uint64_t v4 = a2;
    uint64_t v5 = result;
    int v6 = result + 1;
    do
    {
      int v7 = *((_DWORD *)v4 + 8);
      long long v8 = (uint64_t *)v5[1];
      uint64_t v9 = v6;
      if ((uint64_t *)*v5 == v6) {
        goto LABEL_10;
      }
      uint64_t v10 = v5[1];
      uint64_t v11 = v6;
      if (v8)
      {
        do
        {
          uint64_t v9 = (uint64_t *)v10;
          uint64_t v10 = *(void *)(v10 + 8);
        }
        while (v10);
      }
      else
      {
        do
        {
          uint64_t v9 = (uint64_t *)v11[2];
          BOOL v12 = *v9 == (void)v11;
          uint64_t v11 = v9;
        }
        while (v12);
      }
      if (*((_DWORD *)v9 + 8) < v7)
      {
LABEL_10:
        if (v8) {
          int v13 = (uint64_t **)v9;
        }
        else {
          int v13 = (uint64_t **)v6;
        }
        if (v8) {
          BOOL v14 = (uint64_t **)(v9 + 1);
        }
        else {
          BOOL v14 = (uint64_t **)v6;
        }
        if (*v14) {
          goto LABEL_29;
        }
      }
      else
      {
        BOOL v14 = (uint64_t **)v6;
        int v13 = (uint64_t **)v6;
        if (v8)
        {
          while (1)
          {
            while (1)
            {
              int v13 = (uint64_t **)v8;
              int v15 = *((_DWORD *)v8 + 8);
              if (v15 <= v7) {
                break;
              }
              long long v8 = *v13;
              BOOL v14 = v13;
              if (!*v13) {
                goto LABEL_25;
              }
            }
            if (v15 >= v7) {
              goto LABEL_29;
            }
            long long v8 = v13[1];
            if (!v8)
            {
              BOOL v14 = v13 + 1;
              break;
            }
          }
        }
      }
LABEL_25:
      time_t v16 = operator new(0x38uLL);
      uint64_t v17 = v4[6];
      v16[2] = *((_OWORD *)v4 + 2);
      *((void *)v16 + 6) = v17;
      *(void *)time_t v16 = 0;
      *((void *)v16 + 1) = 0;
      *((void *)v16 + 2) = v13;
      *BOOL v14 = (uint64_t *)v16;
      uint64_t v18 = *(void *)*v5;
      if (v18)
      {
        *uint64_t v5 = v18;
        size_t v19 = *v14;
      }
      else
      {
        size_t v19 = (uint64_t *)v16;
      }
      __n128 result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v5[1], v19);
      ++v5[2];
LABEL_29:
      uint64_t v20 = (void *)v4[1];
      if (v20)
      {
        do
        {
          char v21 = v20;
          uint64_t v20 = (void *)*v20;
        }
        while (v20);
      }
      else
      {
        do
        {
          char v21 = (void *)v4[2];
          BOOL v12 = *v21 == (void)v4;
          uint64_t v4 = v21;
        }
        while (!v12);
      }
      uint64_t v4 = v21;
    }
    while (v21 != a3);
  }
  return result;
}

PowerStats *PowerStats::create@<X0>(PowerStats **a1@<X8>)
{
  uint64_t v3 = (PowerStats *)operator new(0x88uLL);
  PowerStats::PowerStats(v3);
  *a1 = v3;
  __n128 result = (PowerStats *)operator new(0x20uLL);
  *(void *)__n128 result = &unk_1F20FC148;
  *((void *)result + 1) = 0;
  *((void *)result + 2) = 0;
  *((void *)result + 3) = v3;
  a1[1] = result;
  return result;
}

void sub_1C58EF840(_Unwind_Exception *a1)
{
  PowerStats::~PowerStats(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void sub_1C58EF858(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void PowerStats::PowerStats(PowerStats *this)
{
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)&v7, "com.apple.telephony.abm", "power.stats");
  ctu::OsLogLogger::OsLogLogger();
  ctu::OsLogLogger::OsLogLogger(this, (const ctu::OsLogLogger *)v8);
  MEMORY[0x1C8790F80](v8);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&v7);
  *(_OWORD *)((char *)this + 120) = 0u;
  *((void *)this + 6) = 0;
  *((void *)this + 5) = (char *)this + 48;
  *(void *)((char *)this + 92) = 0x200000001;
  *((_DWORD *)this + 25) = -536870144;
  *(_OWORD *)((char *)this + 104) = 0u;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 8) = 0;
  *((void *)this + 7) = 0;
  *((void *)this + 8) = 0;
  *((void *)this + 9) = 0;
  *((void *)this + 10) = 0;
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)this + 40, 0);
  *((void *)this + 5) = (char *)this + 48;
  *((void *)this + 7) = 0;
  *((void *)this + 6) = 0;
  char v6 = 11;
  strcpy((char *)__p, "power.stats");
  AppleBasebandManager::create();
  long long v2 = v7;
  long long v7 = 0uLL;
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 16);
  *(_OWORD *)((char *)this + 120) = v2;
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)&v7 + 1);
  if (*((void *)&v7 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v7 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  if (v6 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1C58EFA50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)&a9);
  if (a15 < 0) {
    operator delete(__p);
  }
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v17);
  dispatch::callback<void({block_pointer})(xpc::dict)>::~callback(v18);
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy(v16, *(void **)(v15 + 48));
  MEMORY[0x1C8790F80](v15);
  _Unwind_Resume(a1);
}

const char *PowerStats::getName(PowerStats *this)
{
  return "power.stats";
}

void PowerStats::clear(PowerStats *this)
{
  long long v2 = (void *)((char *)this + 48);
  uint64_t v1 = (void *)*((void *)this + 6);
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *((_DWORD *)this + 8) = 0;
  *((void *)this + 3) = 0;
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)this + 40, v1);
  *(v2 - 1) = v2;
  void *v2 = 0;
  v2[1] = 0;
}

void PowerStats::~PowerStats(PowerStats *this)
{
  long long v2 = (std::__shared_weak_count *)*((void *)this + 16);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = *((void *)this + 14);
  if (v3) {
    dispatch_release(v3);
  }
  uint64_t v4 = (const void *)*((void *)this + 13);
  if (v4) {
    _Block_release(v4);
  }
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)this + 40, *((void **)this + 6));

  JUMPOUT(0x1C8790F80);
}

void PowerStats::gotAssertion(uint64_t a1, uint64_t a2, int a3)
{
  *(unsigned char *)(a1 + 88) = 1;
  int v4 = *(_DWORD *)(a1 + 96);
  if (v4 == 1)
  {
    ++*(_DWORD *)(a1 + 16);
    if (*(char *)(a2 + 23) < 0) {
      std::string::__init_copy_ctor_external(&v6, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    }
    else {
      std::string v6 = *(std::string *)a2;
    }
    uint64_t v5 = &v6;
    PowerStats::submitLowPowerEventMetric_sync(a1, 0, 1u, (const char *)&v6);
    if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
      goto LABEL_18;
    }
  }
  else if (!v4)
  {
    if (a3 == 1)
    {
      ++*(_DWORD *)(a1 + 12);
      if (*(char *)(a2 + 23) < 0) {
        std::string::__init_copy_ctor_external(&v8, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
      }
      else {
        std::string v8 = *(std::string *)a2;
      }
      uint64_t v5 = &v8;
      PowerStats::submitLowPowerEventMetric_sync(a1, 2u, 0, (const char *)&v8);
      if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0) {
LABEL_18:
      }
        operator delete(v5->__r_.__value_.__l.__data_);
    }
    else
    {
      ++*(_DWORD *)(a1 + 8);
      if (*(char *)(a2 + 23) < 0) {
        std::string::__init_copy_ctor_external(&v7, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
      }
      else {
        std::string v7 = *(std::string *)a2;
      }
      uint64_t v5 = &v7;
      PowerStats::submitLowPowerEventMetric_sync(a1, 0, 0, (const char *)&v7);
      if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
        goto LABEL_18;
      }
    }
  }
}

void PowerStats::submitLowPowerEventMetric_sync(uint64_t a1, unsigned int a2, unsigned int a3, const char *a4)
{
  std::string v8 = *(NSObject **)a1;
  if (os_log_type_enabled(*(os_log_t *)a1, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v30[0]) = 0;
    _os_log_impl(&dword_1C5767000, v8, OS_LOG_TYPE_DEFAULT, "#I Submitting AWD of low power event stats", (uint8_t *)v30, 2u);
  }
  xpc_object_t v9 = xpc_dictionary_create(0, 0, 0);
  uint64_t v10 = MEMORY[0x1E4F14590];
  if (v9 || (xpc_object_t v9 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C8792D30](v9) == v10)
    {
      xpc_retain(v9);
      xpc_object_t v11 = v9;
    }
    else
    {
      xpc_object_t v11 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v11 = xpc_null_create();
    xpc_object_t v9 = 0;
  }
  xpc_release(v9);
  xpc_object_t v12 = xpc_dictionary_create(0, 0, 0);
  if (v12 || (xpc_object_t v12 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C8792D30](v12) == v10)
    {
      xpc_retain(v12);
      xpc_object_t v13 = v12;
    }
    else
    {
      xpc_object_t v13 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v13 = xpc_null_create();
    xpc_object_t v12 = 0;
  }
  xpc_release(v12);
  xpc_object_t v14 = xpc_int64_create(a2);
  if (!v14) {
    xpc_object_t v14 = xpc_null_create();
  }
  xpc_dictionary_set_value(v13, (const char *)*MEMORY[0x1E4F4C668], v14);
  xpc_object_t v15 = xpc_null_create();
  xpc_release(v14);
  xpc_release(v15);
  xpc_object_t v16 = xpc_int64_create(a3);
  if (!v16) {
    xpc_object_t v16 = xpc_null_create();
  }
  xpc_dictionary_set_value(v13, (const char *)*MEMORY[0x1E4F4C678], v16);
  xpc_object_t v17 = xpc_null_create();
  xpc_release(v16);
  xpc_release(v17);
  if (a4[23] < 0) {
    a4 = *(const char **)a4;
  }
  xpc_object_t v18 = xpc_string_create(a4);
  if (!v18) {
    xpc_object_t v18 = xpc_null_create();
  }
  xpc_dictionary_set_value(v13, (const char *)*MEMORY[0x1E4F4C3C0], v18);
  xpc_object_t v19 = xpc_null_create();
  xpc_release(v18);
  xpc_release(v19);
  xpc_object_t v20 = xpc_string_create((const char *)*MEMORY[0x1E4F4D2D0]);
  if (!v20) {
    xpc_object_t v20 = xpc_null_create();
  }
  xpc_dictionary_set_value(v11, (const char *)*MEMORY[0x1E4F4C190], v20);
  xpc_object_t v21 = xpc_null_create();
  xpc_release(v20);
  xpc_release(v21);
  xpc_object_t v22 = xpc_int64_create(524464);
  if (!v22) {
    xpc_object_t v22 = xpc_null_create();
  }
  xpc_dictionary_set_value(v11, (const char *)*MEMORY[0x1E4F4C258], v22);
  xpc_object_t v23 = xpc_null_create();
  xpc_release(v22);
  xpc_release(v23);
  if (v13)
  {
    xpc_retain(v13);
    xpc_object_t v24 = v13;
  }
  else
  {
    xpc_object_t v24 = xpc_null_create();
  }
  xpc_dictionary_set_value(v11, (const char *)*MEMORY[0x1E4F4C188], v24);
  xpc_object_t v25 = xpc_null_create();
  xpc_release(v24);
  xpc_release(v25);
  if (*(void *)(a1 + 104) && *(void *)(a1 + 112))
  {
    if (v11)
    {
      xpc_retain(v11);
      xpc_object_t v26 = v11;
      uint64_t v27 = *(const void **)(a1 + 104);
      if (v27)
      {
LABEL_34:
        uint64_t v28 = _Block_copy(v27);
        goto LABEL_37;
      }
    }
    else
    {
      xpc_object_t v26 = xpc_null_create();
      uint64_t v27 = *(const void **)(a1 + 104);
      if (v27) {
        goto LABEL_34;
      }
    }
    uint64_t v28 = 0;
LABEL_37:
    uint64_t v29 = *(NSObject **)(a1 + 112);
    v30[0] = MEMORY[0x1E4F143A8];
    v30[1] = 1174405120;
    v30[2] = ___ZNK8dispatch8callbackIU13block_pointerFvN3xpc4dictEEEclIJS2_EEEvDpT__block_invoke;
    v30[3] = &__block_descriptor_tmp_40;
    if (v28)
    {
      aBlock = _Block_copy(v28);
      xpc_object_t object = v26;
      if (v26)
      {
LABEL_39:
        xpc_retain(v26);
LABEL_42:
        dispatch_async(v29, v30);
        xpc_release(object);
        xpc_object_t object = 0;
        if (aBlock) {
          _Block_release(aBlock);
        }
        if (v28) {
          _Block_release(v28);
        }
        xpc_release(v26);
        goto LABEL_47;
      }
    }
    else
    {
      aBlock = 0;
      xpc_object_t object = v26;
      if (v26) {
        goto LABEL_39;
      }
    }
    xpc_object_t object = xpc_null_create();
    goto LABEL_42;
  }
LABEL_47:
  xpc_release(v13);
  xpc_release(v11);
}

uint64_t PowerStats::noPendingAssertion(uint64_t this)
{
  *(unsigned char *)(this + 88) = 0;
  return this;
}

void PowerStats::reportSystemStateChange(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = *a3;
  *(_DWORD *)(a1 + 100) = *((_DWORD *)a3 + 2);
  *(void *)(a1 + 92) = v4;
  int v5 = *((_DWORD *)a3 + 2);
  if (v5 != -536870112)
  {
    if (v5 != -536870272) {
      return;
    }
    if (*((_DWORD *)a3 + 1) == 1)
    {
      if (*(unsigned char *)(a1 + 88))
      {
        std::string v6 = *(NSObject **)a1;
        if (os_log_type_enabled(*(os_log_t *)a1, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl(&dword_1C5767000, v6, OS_LOG_TYPE_DEFAULT, "#I Forced sleep while power assertion(s) held ", buf, 2u);
        }
        ++*(_DWORD *)(a1 + 20);
        char v16 = 0;
        LOBYTE(__p) = 0;
        PowerStats::submitLowPowerEventMetric_sync(a1, 1u, 1u, (const char *)&__p);
        if (v16 < 0) {
          operator delete(__p);
        }
      }
      ++*(_DWORD *)(a1 + 28);
      uint64_t SystemTime = TelephonyUtilGetSystemTime();
      *(void *)(a1 + 72) = SystemTime;
      uint64_t v8 = *(void *)(a1 + 64);
      if (!v8) {
        return;
      }
    }
    else
    {
      ++*(_DWORD *)(a1 + 32);
      uint64_t SystemTime = TelephonyUtilGetSystemTime();
      *(void *)(a1 + 72) = SystemTime;
      uint64_t v8 = *(void *)(a1 + 64);
      if (!v8) {
        return;
      }
    }
    *(_DWORD *)(a1 + 80) = ((int)SystemTime - (int)v8) / 0x3E8u;
    return;
  }
  ++*(_DWORD *)(a1 + 24);
  uint64_t v10 = TelephonyUtilGetSystemTime();
  *(void *)(a1 + 64) = v10;
  uint64_t v11 = *(void *)(a1 + 72);
  if (v11)
  {
    unsigned int v12 = ((int)v10 - (int)v11) / 0x3E8u;
    *(_DWORD *)(a1 + 84) = v12;
  }
  else
  {
    unsigned int v12 = *(_DWORD *)(a1 + 84);
  }
  unsigned int v13 = *(_DWORD *)(a2 + 4) == 1;
  unsigned int v14 = *(_DWORD *)(a1 + 80);

  PowerStats::submitWakeInfoMetric_sync(a1, v13, v12, v14);
}

void PowerStats::submitWakeInfoMetric_sync(uint64_t a1, unsigned int a2, unsigned int a3, unsigned int a4)
{
  uint64_t v8 = *(NSObject **)a1;
  if (os_log_type_enabled(*(os_log_t *)a1, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v30[0]) = 0;
    _os_log_impl(&dword_1C5767000, v8, OS_LOG_TYPE_DEFAULT, "#I Submitting AWD of wake info", (uint8_t *)v30, 2u);
  }
  xpc_object_t v9 = xpc_dictionary_create(0, 0, 0);
  uint64_t v10 = MEMORY[0x1E4F14590];
  if (v9 || (xpc_object_t v9 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C8792D30](v9) == v10)
    {
      xpc_retain(v9);
      xpc_object_t v11 = v9;
    }
    else
    {
      xpc_object_t v11 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v11 = xpc_null_create();
    xpc_object_t v9 = 0;
  }
  xpc_release(v9);
  xpc_object_t v12 = xpc_dictionary_create(0, 0, 0);
  if (v12 || (xpc_object_t v12 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C8792D30](v12) == v10)
    {
      xpc_retain(v12);
      xpc_object_t v13 = v12;
    }
    else
    {
      xpc_object_t v13 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v13 = xpc_null_create();
    xpc_object_t v12 = 0;
  }
  xpc_release(v12);
  xpc_object_t v14 = xpc_int64_create(a2);
  if (!v14) {
    xpc_object_t v14 = xpc_null_create();
  }
  xpc_dictionary_set_value(v13, (const char *)*MEMORY[0x1E4F4CB28], v14);
  xpc_object_t v15 = xpc_null_create();
  xpc_release(v14);
  xpc_release(v15);
  xpc_object_t v16 = xpc_int64_create(a3);
  if (!v16) {
    xpc_object_t v16 = xpc_null_create();
  }
  xpc_dictionary_set_value(v13, (const char *)*MEMORY[0x1E4F4CF00], v16);
  xpc_object_t v17 = xpc_null_create();
  xpc_release(v16);
  xpc_release(v17);
  xpc_object_t v18 = xpc_int64_create(a4);
  if (!v18) {
    xpc_object_t v18 = xpc_null_create();
  }
  xpc_dictionary_set_value(v13, (const char *)*MEMORY[0x1E4F4CE00], v18);
  xpc_object_t v19 = xpc_null_create();
  xpc_release(v18);
  xpc_release(v19);
  xpc_object_t v20 = xpc_string_create((const char *)*MEMORY[0x1E4F4D2D0]);
  if (!v20) {
    xpc_object_t v20 = xpc_null_create();
  }
  xpc_dictionary_set_value(v11, (const char *)*MEMORY[0x1E4F4C190], v20);
  xpc_object_t v21 = xpc_null_create();
  xpc_release(v20);
  xpc_release(v21);
  xpc_object_t v22 = xpc_int64_create(524465);
  if (!v22) {
    xpc_object_t v22 = xpc_null_create();
  }
  xpc_dictionary_set_value(v11, (const char *)*MEMORY[0x1E4F4C258], v22);
  xpc_object_t v23 = xpc_null_create();
  xpc_release(v22);
  xpc_release(v23);
  if (v13)
  {
    xpc_retain(v13);
    xpc_object_t v24 = v13;
  }
  else
  {
    xpc_object_t v24 = xpc_null_create();
  }
  xpc_dictionary_set_value(v11, (const char *)*MEMORY[0x1E4F4C188], v24);
  xpc_object_t v25 = xpc_null_create();
  xpc_release(v24);
  xpc_release(v25);
  if (*(void *)(a1 + 104) && *(void *)(a1 + 112))
  {
    if (v11)
    {
      xpc_retain(v11);
      xpc_object_t v26 = v11;
      uint64_t v27 = *(const void **)(a1 + 104);
      if (v27)
      {
LABEL_32:
        uint64_t v28 = _Block_copy(v27);
        goto LABEL_35;
      }
    }
    else
    {
      xpc_object_t v26 = xpc_null_create();
      uint64_t v27 = *(const void **)(a1 + 104);
      if (v27) {
        goto LABEL_32;
      }
    }
    uint64_t v28 = 0;
LABEL_35:
    uint64_t v29 = *(NSObject **)(a1 + 112);
    v30[0] = MEMORY[0x1E4F143A8];
    v30[1] = 1174405120;
    v30[2] = ___ZNK8dispatch8callbackIU13block_pointerFvN3xpc4dictEEEclIJS2_EEEvDpT__block_invoke;
    v30[3] = &__block_descriptor_tmp_40;
    if (v28)
    {
      aBlock = _Block_copy(v28);
      xpc_object_t object = v26;
      if (v26)
      {
LABEL_37:
        xpc_retain(v26);
LABEL_40:
        dispatch_async(v29, v30);
        xpc_release(object);
        xpc_object_t object = 0;
        if (aBlock) {
          _Block_release(aBlock);
        }
        if (v28) {
          _Block_release(v28);
        }
        xpc_release(v26);
        goto LABEL_45;
      }
    }
    else
    {
      aBlock = 0;
      xpc_object_t object = v26;
      if (v26) {
        goto LABEL_37;
      }
    }
    xpc_object_t object = xpc_null_create();
    goto LABEL_40;
  }
LABEL_45:
  xpc_release(v13);
  xpc_release(v11);
}

void PowerStats::setPowerdownMessage(uint64_t a1, xpc_object_t *a2)
{
  CFArrayRef theArray = (CFArrayRef)0xAAAAAAAAAAAAAAAALL;
  xpc_object_t value = xpc_dictionary_get_value(*a2, abm::kKeyPowerDownMessageList[0]);
  xpc_object_t object = value;
  if (value) {
    xpc_retain(value);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  xpc::bridge((uint64_t *)cf, (xpc *)&object, v4);
  CFArrayRef v5 = (const __CFArray *)cf[0];
  if (cf[0])
  {
    CFTypeID v6 = CFGetTypeID(cf[0]);
    if (v6 == CFArrayGetTypeID())
    {
      CFArrayRef theArray = v5;
      CFRetain(v5);
      CFTypeRef v7 = cf[0];
      if (!cf[0]) {
        goto LABEL_10;
      }
      goto LABEL_9;
    }
  }
  CFArrayRef v5 = 0;
  CFArrayRef theArray = 0;
  CFTypeRef v7 = cf[0];
  if (cf[0]) {
LABEL_9:
  }
    CFRelease(v7);
LABEL_10:
  xpc_release(object);
  CFIndex v8 = 0;
  xpc_object_t v9 = (uint64_t **)(a1 + 48);
  while (1)
  {
    CFIndex Count = CFArrayGetCount(v5);
    CFArrayRef v5 = theArray;
    if (Count <= v8) {
      break;
    }
    CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(theArray, v8);
    CFDictionaryRef v12 = ValueAtIndex;
    if (!ValueAtIndex) {
      goto LABEL_13;
    }
    cf[0] = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
    cf[1] = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
    CFTypeID v13 = CFGetTypeID(ValueAtIndex);
    if (v13 == CFDictionaryGetTypeID()) {
      CFDictionaryRef v14 = v12;
    }
    else {
      CFDictionaryRef v14 = 0;
    }
    ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)cf, v14);
    ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&object, abm::kKeyPowerDownMessageQMISvc[0]);
    unsigned int Int = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)cf, (const __CFString *)object);
    MEMORY[0x1C8791110](&object);
    ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&object, abm::kKeyPowerDownMessageId[0]);
    uint64_t v16 = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)cf, (const __CFString *)object);
    MEMORY[0x1C8791110](&object);
    xpc_object_t v17 = *v9;
    xpc_object_t v18 = (uint64_t **)(a1 + 48);
    xpc_object_t v19 = (uint64_t *)(a1 + 48);
    if (*v9)
    {
      while (1)
      {
        while (1)
        {
          xpc_object_t v19 = v17;
          unsigned int v20 = *((_DWORD *)v17 + 7);
          if (Int == v20) {
            break;
          }
          if (Int >= v20)
          {
            if (v20 >= Int) {
              char v24 = 1;
            }
            else {
              char v24 = -1;
            }
            if ((v24 & 0x80) == 0) {
              goto LABEL_40;
            }
            goto LABEL_36;
          }
LABEL_21:
          xpc_object_t v17 = (uint64_t *)*v19;
          xpc_object_t v18 = (uint64_t **)v19;
          if (!*v19) {
            goto LABEL_38;
          }
        }
        unsigned int v21 = *((_DWORD *)v19 + 8);
        if (v16 < v21) {
          goto LABEL_21;
        }
        BOOL v22 = v21 == v16;
        if (v21 >= v16) {
          char v23 = 1;
        }
        else {
          char v23 = -1;
        }
        if (v22) {
          char v23 = 0;
        }
        if ((v23 & 0x80) == 0)
        {
LABEL_40:
          xpc_object_t v25 = (char *)v19;
          goto LABEL_12;
        }
LABEL_36:
        xpc_object_t v17 = (uint64_t *)v19[1];
        if (!v17)
        {
          xpc_object_t v18 = (uint64_t **)(v19 + 1);
          break;
        }
      }
    }
LABEL_38:
    xpc_object_t v25 = (char *)operator new(0x28uLL);
    *(void *)(v25 + 28) = Int | (unint64_t)(v16 << 32);
    *((_DWORD *)v25 + 9) = 0;
    *(void *)xpc_object_t v25 = 0;
    *((void *)v25 + 1) = 0;
    *((void *)v25 + 2) = v19;
    *xpc_object_t v18 = (uint64_t *)v25;
    uint64_t v26 = **(void **)(a1 + 40);
    uint64_t v27 = (uint64_t *)v25;
    if (v26)
    {
      *(void *)(a1 + 40) = v26;
      uint64_t v27 = *v18;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 48), v27);
    ++*(void *)(a1 + 56);
    CFArrayRef v5 = theArray;
LABEL_12:
    ++*((_DWORD *)v25 + 9);
    MEMORY[0x1C8791160](cf);
LABEL_13:
    ++v8;
  }
  if (theArray) {
    CFRelease(theArray);
  }
}

void sub_1C58F0B80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, xpc_object_t object)
{
}

void PowerStats::submitLowPowerStatsMetric_sync(os_log_t *this)
{
  long long v2 = *this;
  if (os_log_type_enabled(*this, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_1C5767000, v2, OS_LOG_TYPE_DEFAULT, "#I Submitting AWD of low power stats", buf, 2u);
  }
  xpc_object_t v3 = xpc_dictionary_create(0, 0, 0);
  if (v3 || (xpc_object_t v3 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C8792D30](v3) == MEMORY[0x1E4F14590])
    {
      xpc_retain(v3);
      xpc_object_t v4 = v3;
    }
    else
    {
      xpc_object_t v4 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v4 = xpc_null_create();
    xpc_object_t v3 = 0;
  }
  xpc_release(v3);
  xpc_object_t v5 = xpc_dictionary_create(0, 0, 0);
  if (v5 || (xpc_object_t v5 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C8792D30](v5) == MEMORY[0x1E4F14590])
    {
      xpc_retain(v5);
      xpc_object_t v6 = v5;
    }
    else
    {
      xpc_object_t v6 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v6 = xpc_null_create();
    xpc_object_t v5 = 0;
  }
  xpc_release(v5);
  xpc_object_t v7 = xpc_int64_create(*((unsigned int *)this + 3));
  if (!v7) {
    xpc_object_t v7 = xpc_null_create();
  }
  xpc_dictionary_set_value(v6, (const char *)*MEMORY[0x1E4F4CD38], v7);
  xpc_object_t v8 = xpc_null_create();
  xpc_release(v7);
  xpc_release(v8);
  xpc_object_t v9 = xpc_int64_create((*((_DWORD *)this + 4) + *((_DWORD *)this + 2)));
  if (!v9) {
    xpc_object_t v9 = xpc_null_create();
  }
  xpc_dictionary_set_value(v6, (const char *)*MEMORY[0x1E4F4C670], v9);
  xpc_object_t v10 = xpc_null_create();
  xpc_release(v9);
  xpc_release(v10);
  xpc_object_t v11 = xpc_int64_create(*((unsigned int *)this + 5));
  if (!v11) {
    xpc_object_t v11 = xpc_null_create();
  }
  xpc_dictionary_set_value(v6, (const char *)*MEMORY[0x1E4F4CA20], v11);
  xpc_object_t v12 = xpc_null_create();
  xpc_release(v11);
  xpc_release(v12);
  xpc_object_t v13 = xpc_int64_create(*((unsigned int *)this + 6));
  if (!v13) {
    xpc_object_t v13 = xpc_null_create();
  }
  xpc_dictionary_set_value(v6, (const char *)*MEMORY[0x1E4F4C350], v13);
  xpc_object_t v14 = xpc_null_create();
  xpc_release(v13);
  xpc_release(v14);
  xpc_object_t v15 = xpc_int64_create(*((unsigned int *)this + 8));
  if (!v15) {
    xpc_object_t v15 = xpc_null_create();
  }
  xpc_dictionary_set_value(v6, (const char *)*MEMORY[0x1E4F4C790], v15);
  xpc_object_t v16 = xpc_null_create();
  xpc_release(v15);
  xpc_release(v16);
  xpc_object_t v17 = xpc_int64_create(*((unsigned int *)this + 7));
  if (!v17) {
    xpc_object_t v17 = xpc_null_create();
  }
  xpc_dictionary_set_value(v6, (const char *)*MEMORY[0x1E4F4C8A8], v17);
  xpc_object_t v18 = xpc_null_create();
  xpc_release(v17);
  xpc_release(v18);
  xpc_object_t v19 = xpc_array_create(0, 0);
  if (v19 || (xpc_object_t v19 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C8792D30](v19) == MEMORY[0x1E4F14568])
    {
      xpc_retain(v19);
      xpc_object_t v20 = v19;
    }
    else
    {
      xpc_object_t v20 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v20 = xpc_null_create();
    xpc_object_t v19 = 0;
  }
  xpc_release(v19);
  xpc_object_t xarray = v20;
  std::string v57 = v4;
  xpc_object_t xdict = v6;
  os_log_t v21 = this[5];
  unsigned int v56 = this;
  BOOL v22 = (this + 6);
  if (v21 == (os_log_t)(this + 6))
  {
    unsigned int v23 = 0;
  }
  else
  {
    unsigned int v23 = 0;
    key = (char *)*MEMORY[0x1E4F4CA18];
    uint64_t v60 = (char *)*MEMORY[0x1E4F4C8B8];
    char v59 = (char *)*MEMORY[0x1E4F4C348];
    char v24 = (const char *)*MEMORY[0x1E4F4C340];
    do
    {
      int64_t isa_high = HIDWORD(v21[3].isa);
      int64_t isa_low = LODWORD(v21[4].isa);
      int64_t v27 = HIDWORD(v21[4].isa);
      xpc_object_t v28 = xpc_dictionary_create(0, 0, 0);
      if (v28 || (xpc_object_t v28 = xpc_null_create()) != 0)
      {
        if (MEMORY[0x1C8792D30](v28) == MEMORY[0x1E4F14590])
        {
          xpc_retain(v28);
          xpc_object_t v29 = v28;
        }
        else
        {
          xpc_object_t v29 = xpc_null_create();
        }
      }
      else
      {
        xpc_object_t v29 = xpc_null_create();
        xpc_object_t v28 = 0;
      }
      xpc_release(v28);
      xpc_object_t v30 = xpc_int64_create(0);
      if (!v30) {
        xpc_object_t v30 = xpc_null_create();
      }
      xpc_dictionary_set_value(v29, key, v30);
      xpc_object_t v31 = xpc_null_create();
      xpc_release(v30);
      xpc_release(v31);
      xpc_object_t v32 = xpc_int64_create(isa_high);
      if (!v32) {
        xpc_object_t v32 = xpc_null_create();
      }
      xpc_dictionary_set_value(v29, v60, v32);
      xpc_object_t v33 = xpc_null_create();
      xpc_release(v32);
      xpc_release(v33);
      xpc_object_t v34 = xpc_int64_create(isa_low);
      if (!v34) {
        xpc_object_t v34 = xpc_null_create();
      }
      xpc_dictionary_set_value(v29, v59, v34);
      xpc_object_t v35 = xpc_null_create();
      xpc_release(v34);
      xpc_release(v35);
      xpc_object_t v36 = xpc_int64_create(v27);
      if (!v36) {
        xpc_object_t v36 = xpc_null_create();
      }
      xpc_dictionary_set_value(v29, v24, v36);
      xpc_object_t v37 = xpc_null_create();
      xpc_release(v36);
      xpc_release(v37);
      xpc_array_append_value(xarray, v29);
      xpc_release(v29);
      isa = v21[1].isa;
      if (isa)
      {
        do
        {
          long long v39 = isa;
          isa = isa->isa;
        }
        while (isa);
      }
      else
      {
        do
        {
          long long v39 = v21[2].isa;
          BOOL v40 = v39->isa == (Class)v21;
          os_log_t v21 = v39;
        }
        while (!v40);
      }
      v23 += v27;
      os_log_t v21 = v39;
    }
    while (v39 != v22);
  }
  if (xarray)
  {
    xpc_retain(xarray);
    xpc_object_t v41 = xarray;
    unint64_t v42 = xdict;
  }
  else
  {
    unint64_t v42 = xdict;
    xpc_object_t v41 = xpc_null_create();
  }
  xpc_dictionary_set_value(v42, (const char *)*MEMORY[0x1E4F4C8B0], v41);
  xpc_object_t v43 = xpc_null_create();
  xpc_release(v41);
  xpc_release(v43);
  xpc_object_t v44 = xpc_int64_create(v23);
  if (!v44) {
    xpc_object_t v44 = xpc_null_create();
  }
  xpc_dictionary_set_value(v42, (const char *)*MEMORY[0x1E4F4CC40], v44);
  xpc_object_t v45 = xpc_null_create();
  xpc_release(v44);
  xpc_release(v45);
  xpc_object_t v46 = xpc_string_create((const char *)*MEMORY[0x1E4F4D2D0]);
  if (!v46) {
    xpc_object_t v46 = xpc_null_create();
  }
  xpc_dictionary_set_value(v57, (const char *)*MEMORY[0x1E4F4C190], v46);
  xpc_object_t v47 = xpc_null_create();
  xpc_release(v46);
  xpc_release(v47);
  xpc_object_t v48 = xpc_int64_create(524466);
  if (!v48) {
    xpc_object_t v48 = xpc_null_create();
  }
  xpc_dictionary_set_value(v57, (const char *)*MEMORY[0x1E4F4C258], v48);
  xpc_object_t v49 = xpc_null_create();
  xpc_release(v48);
  xpc_release(v49);
  if (v42)
  {
    xpc_retain(v42);
    xpc_object_t v50 = v42;
  }
  else
  {
    xpc_object_t v50 = xpc_null_create();
  }
  xpc_dictionary_set_value(v57, (const char *)*MEMORY[0x1E4F4C188], v50);
  xpc_object_t v51 = xpc_null_create();
  xpc_release(v50);
  xpc_release(v51);
  if (v56[13] && v56[14])
  {
    if (v57)
    {
      xpc_retain(v57);
      xpc_object_t v52 = v57;
      os_log_t v53 = v56[13];
      if (v53)
      {
LABEL_73:
        xpc_object_t v54 = _Block_copy(v53);
        goto LABEL_76;
      }
    }
    else
    {
      xpc_object_t v52 = xpc_null_create();
      os_log_t v53 = v56[13];
      if (v53) {
        goto LABEL_73;
      }
    }
    xpc_object_t v54 = 0;
LABEL_76:
    unint64_t v55 = v56[14];
    *(void *)long long buf = MEMORY[0x1E4F143A8];
    uint64_t v64 = 1174405120;
    uint64_t v65 = ___ZNK8dispatch8callbackIU13block_pointerFvN3xpc4dictEEEclIJS2_EEEvDpT__block_invoke;
    uint64_t v66 = &__block_descriptor_tmp_40;
    if (v54)
    {
      aBlock = _Block_copy(v54);
      xpc_object_t object = v52;
      if (v52)
      {
LABEL_78:
        xpc_retain(v52);
LABEL_81:
        dispatch_async(v55, buf);
        xpc_release(object);
        xpc_object_t object = 0;
        if (aBlock) {
          _Block_release(aBlock);
        }
        if (v54) {
          _Block_release(v54);
        }
        xpc_release(v52);
        goto LABEL_86;
      }
    }
    else
    {
      aBlock = 0;
      xpc_object_t object = v52;
      if (v52) {
        goto LABEL_78;
      }
    }
    xpc_object_t object = xpc_null_create();
    goto LABEL_81;
  }
LABEL_86:
  xpc_release(xarray);
  xpc_release(v42);
  xpc_release(v57);
}

void sub_1C58F15AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, xpc_object_t a11, xpc_object_t a12, uint64_t a13, uint64_t a14, uint64_t a15, xpc_object_t object)
{
  xpc_release(v16);
  xpc_release(object);
  xpc_release(a12);
  xpc_release(a11);
  _Unwind_Resume(a1);
}

void PowerStats::reportStats(os_log_t *this, int a2)
{
  if (a2 == 524466) {
    PowerStats::submitLowPowerStatsMetric_sync(this);
  }
}

void PowerStats::registerStatsHandler(uint64_t a1, uint64_t a2)
{
  xpc_object_t v4 = *(void **)a2;
  if (*(void *)a2) {
    xpc_object_t v4 = _Block_copy(v4);
  }
  xpc_object_t v5 = *(const void **)(a1 + 104);
  *(void *)(a1 + 104) = v4;
  if (v5) {
    _Block_release(v5);
  }
  xpc_object_t v6 = *(NSObject **)(a2 + 8);
  if (v6) {
    dispatch_retain(v6);
  }
  xpc_object_t v7 = *(NSObject **)(a1 + 112);
  *(void *)(a1 + 112) = v6;
  if (v7)
  {
    dispatch_release(v7);
  }
}

void PowerStats::dumpState(os_log_t *this)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  long long v2 = *this;
  if (os_log_type_enabled(*this, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_1C5767000, v2, OS_LOG_TYPE_DEFAULT, "#I --------------- ABM Power state ---------------", buf, 2u);
    long long v2 = *this;
    xpc_object_t v3 = &unk_1C599A000;
    if (!os_log_type_enabled(*this, OS_LOG_TYPE_DEFAULT))
    {
LABEL_3:
      xpc_object_t v4 = "ZN3ctu20SharedSynchronizableINS_9XpcServerEE15make_shared_ptrI17ABMServerInternalEENSt3__110shared_ptrIT_EEPS7_EUlPS4_E_"
         + 110;
      if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else
  {
    xpc_object_t v3 = (void *)&unk_1C599A000;
    if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_3;
    }
  }
  int v7 = *((_DWORD *)this + 3);
  *(_DWORD *)long long buf = v3[491];
  int v24 = v7;
  _os_log_impl(&dword_1C5767000, v2, OS_LOG_TYPE_DEFAULT, "#I Idle sleep reverted due to BB events: %u", buf, 8u);
  long long v2 = *this;
  xpc_object_t v4 = "_EUlPS4_E_";
  if (!os_log_type_enabled(*this, OS_LOG_TYPE_DEFAULT))
  {
LABEL_4:
    if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_5;
    }
    goto LABEL_12;
  }
LABEL_11:
  int v8 = *((_DWORD *)this + 2);
  int v9 = *((_DWORD *)this + 4);
  *(_DWORD *)long long buf = *((void *)v4 + 25);
  int v24 = v8;
  __int16 v25 = 1024;
  int v26 = v9;
  _os_log_impl(&dword_1C5767000, v2, OS_LOG_TYPE_DEFAULT, "#I BB events deferred on idle sleep: %u, on forced sleep: %u", buf, 0xEu);
  long long v2 = *this;
  if (!os_log_type_enabled(*this, OS_LOG_TYPE_DEFAULT))
  {
LABEL_5:
    if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_6;
    }
    goto LABEL_13;
  }
LABEL_12:
  int v10 = *((_DWORD *)this + 5);
  *(_DWORD *)long long buf = v3[491];
  int v24 = v10;
  _os_log_impl(&dword_1C5767000, v2, OS_LOG_TYPE_DEFAULT, "#I Forced sleep during BB event handling: %u", buf, 8u);
  long long v2 = *this;
  if (!os_log_type_enabled(*this, OS_LOG_TYPE_DEFAULT))
  {
LABEL_6:
    if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_7;
    }
    goto LABEL_14;
  }
LABEL_13:
  int v12 = *((_DWORD *)this + 7);
  int v11 = *((_DWORD *)this + 8);
  int v13 = *((_DWORD *)this + 6);
  *(_DWORD *)long long buf = 67109632;
  int v24 = v11;
  __int16 v25 = 1024;
  int v26 = v12;
  __int16 v27 = 1024;
  int v28 = v13;
  _os_log_impl(&dword_1C5767000, v2, OS_LOG_TYPE_DEFAULT, "#I Number of idle sleeps: %u, forced sleeps: %u, wakes: %u", buf, 0x14u);
  long long v2 = *this;
  if (!os_log_type_enabled(*this, OS_LOG_TYPE_DEFAULT))
  {
LABEL_7:
    os_log_t v5 = this[5];
    xpc_object_t v6 = (this + 6);
    if (v5 == (os_log_t)(this + 6)) {
      return;
    }
    goto LABEL_17;
  }
LABEL_14:
  int v14 = *((_DWORD *)this + 20);
  int v15 = *((_DWORD *)this + 21);
  *(_DWORD *)long long buf = *((void *)v4 + 25);
  int v24 = v14;
  __int16 v25 = 1024;
  int v26 = v15;
  _os_log_impl(&dword_1C5767000, v2, OS_LOG_TYPE_DEFAULT, "#I Last wake duration: %u, sleep duration: %u", buf, 0xEu);
  os_log_t v5 = this[5];
  xpc_object_t v6 = (this + 6);
  if (v5 == (os_log_t)(this + 6)) {
    return;
  }
  do
  {
LABEL_17:
    xpc_object_t v16 = *this;
    if (os_log_type_enabled(*this, OS_LOG_TYPE_DEFAULT))
    {
      int isa = (int)v5[4].isa;
      int isa_high = HIDWORD(v5[4].isa);
      int v19 = HIDWORD(v5[3].isa);
      *(_DWORD *)long long buf = 67109632;
      int v24 = v19;
      __int16 v25 = 1024;
      int v26 = isa;
      __int16 v27 = 1024;
      int v28 = isa_high;
      _os_log_impl(&dword_1C5767000, v16, OS_LOG_TYPE_DEFAULT, "#I Received message QMI_SVC 0x%x, ID 0x%x, %u times after powerdown", buf, 0x14u);
    }
    xpc_object_t v20 = v5[1].isa;
    if (v20)
    {
      do
      {
        os_log_t v21 = v20;
        xpc_object_t v20 = v20->isa;
      }
      while (v20);
    }
    else
    {
      do
      {
        os_log_t v21 = v5[2].isa;
        BOOL v22 = v21->isa == (Class)v5;
        os_log_t v5 = v21;
      }
      while (!v22);
    }
    os_log_t v5 = v21;
  }
  while (v21 != v6);
}

void std::__shared_ptr_pointer<PowerStats *,std::shared_ptr<PowerStats>::__shared_ptr_default_delete<PowerStats,PowerStats>,std::allocator<PowerStats>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<PowerStats *,std::shared_ptr<PowerStats>::__shared_ptr_default_delete<PowerStats,PowerStats>,std::allocator<PowerStats>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1 = *(PowerStats **)(a1 + 24);
  if (v1)
  {
    PowerStats::~PowerStats(v1);
    operator delete(v2);
  }
}

uint64_t std::__shared_ptr_pointer<PowerStats *,std::shared_ptr<PowerStats>::__shared_ptr_default_delete<PowerStats,PowerStats>,std::allocator<PowerStats>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x80000001C59A4F93) {
    return a1 + 24;
  }
  if (((v3 & 0x80000001C59A4F93 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000001C59A4F93)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001C59A4F93 & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 24;
  }
  return 0;
}

void ___ZNK8dispatch8callbackIU13block_pointerFvN3xpc4dictEEEclIJS2_EEEvDpT__block_invoke(uint64_t a1)
{
}

void dispatch::block<void({block_pointer})(xpc::dict)>::operator()<xpc::dict const&>(uint64_t *a1, void **a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  xpc_object_t object = v3;
  if (v3) {
    xpc_retain(v3);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  (*(void (**)(uint64_t, xpc_object_t *))(v2 + 16))(v2, &object);
  xpc_release(object);
}

void sub_1C58F1BB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
}

xpc_object_t __copy_helper_block_e8_32c53_ZTSN8dispatch5blockIU13block_pointerFvN3xpc4dictEEEE40c15_ZTSN3xpc4dictE(uint64_t a1, uint64_t a2)
{
  xpc_object_t v4 = *(const void **)(a2 + 32);
  if (v4)
  {
    os_log_t v5 = _Block_copy(v4);
    xpc_object_t v6 = *(void **)(a2 + 40);
    *(void *)(a1 + 32) = v5;
    *(void *)(a1 + 40) = v6;
    if (v6) {
      return xpc_retain(v6);
    }
  }
  else
  {
    xpc_object_t v6 = *(void **)(a2 + 40);
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = v6;
    if (v6) {
      return xpc_retain(v6);
    }
  }
  xpc_object_t result = xpc_null_create();
  *(void *)(a1 + 40) = result;
  return result;
}

void __destroy_helper_block_e8_32c53_ZTSN8dispatch5blockIU13block_pointerFvN3xpc4dictEEEE40c15_ZTSN3xpc4dictE(uint64_t a1)
{
  xpc_release(*(xpc_object_t *)(a1 + 40));
  *(void *)(a1 + 40) = 0;
  uint64_t v2 = *(const void **)(a1 + 32);
  if (v2) {
    _Block_release(v2);
  }
}

uint64_t __cxx_global_var_init_21()
{
  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<ctu::power::assertion>::~PthreadMutexGuardPolicy, &ctu::Singleton<ctu::power::assertion,ctu::power::assertion,ctu::PthreadMutexGuardPolicy<ctu::power::assertion>>::sInstance, &dword_1C5767000);
  }
  return result;
}

void *Service::Service(void *result, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v2 = a2[1];
  PowerStats *result = &unk_1F20FC1C8;
  result[1] = v3;
  result[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  result[3] = 0;
  result[4] = 0;
  result[5] = 0;
  return result;
}

void Service::~Service(Service *this)
{
  *(void *)this = &unk_1F20FC1C8;
  uint64_t v2 = *((void *)this + 3);
  if (v2)
  {
    uint64_t v3 = *((void *)this + 4);
    xpc_object_t v4 = (void *)*((void *)this + 3);
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0) {
          operator delete(*(void **)(v3 - 24));
        }
        v3 -= 24;
      }
      while (v3 != v2);
      xpc_object_t v4 = (void *)*((void *)this + 3);
    }
    *((void *)this + 4) = v2;
    operator delete(v4);
  }
  os_log_t v5 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v5) {
    std::__shared_weak_count::__release_weak(v5);
  }
}

std::__shared_weak_count *Service::getServiceManager@<X0>(Service *this@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  uint64_t result = (std::__shared_weak_count *)*((void *)this + 2);
  if (result)
  {
    uint64_t result = std::__shared_weak_count::lock(result);
    a2[1] = result;
    if (result) {
      *a2 = *((void *)this + 1);
    }
  }
  return result;
}

uint64_t Service::isServerDown(Service *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 2);
  if (!v2) {
    return 1;
  }
  uint64_t v3 = std::__shared_weak_count::lock(v2);
  if (!v3) {
    return 1;
  }
  xpc_object_t v4 = v3;
  uint64_t v5 = *((void *)this + 1);
  if (v5)
  {
    uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 80))(v5);
    if (atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
      return v6;
    }
  }
  else
  {
    uint64_t v6 = 1;
    if (atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
      return v6;
    }
  }
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_1C58F1EE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void Service::registerCommandHandler(uint64_t a1, uint64_t a2, const void **a3)
{
  unint64_t v6 = *(void *)(a1 + 32);
  if (v6 >= *(void *)(a1 + 40))
  {
    *(void *)(a1 + 32) = std::vector<std::string>::__emplace_back_slow_path<std::string const&>((char **)(a1 + 24), a2);
    int v8 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v8) {
      return;
    }
  }
  else
  {
    if (*(char *)(a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(*(std::string **)(a1 + 32), *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    }
    else
    {
      long long v7 = *(_OWORD *)a2;
      *(void *)(v6 + 16) = *(void *)(a2 + 16);
      *(_OWORD *)unint64_t v6 = v7;
    }
    *(void *)(a1 + 32) = v6 + 24;
    *(void *)(a1 + 32) = v6 + 24;
    int v8 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v8) {
      return;
    }
  }
  int v9 = std::__shared_weak_count::lock(v8);
  v13[2] = v9;
  if (v9)
  {
    int v10 = v9;
    int v11 = *(void **)(a1 + 8);
    v13[1] = v11;
    if (v11)
    {
      int v12 = *a3 ? _Block_copy(*a3) : 0;
      v13[0] = v12;
      ServiceManager::registerCommandHandler((uint64_t)v11, a2, v13);
      if (v12) {
        _Block_release(v12);
      }
    }
    if (!atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
}

void sub_1C58F2050(_Unwind_Exception *a1)
{
  *(void *)(v2 + 32) = v1;
  _Unwind_Resume(a1);
}

void sub_1C58F2058(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (v11) {
    _Block_release(v11);
  }
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void ServiceManager::registerCommandHandler(uint64_t a1, uint64_t a2, void **a3)
{
  uint64_t v4 = *(void *)(a1 + 168);
  uint64_t v5 = *a3;
  if (*a3) {
    uint64_t v5 = _Block_copy(v5);
  }
  aBlock = v5;
  ServiceCtrl::registerCommandHandler(v4, a2, &aBlock);
  if (aBlock) {
    _Block_release(aBlock);
  }
}

void sub_1C58F20DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *aBlock)
{
  if (aBlock) {
    _Block_release(aBlock);
  }
  _Unwind_Resume(exception_object);
}

void Service::runCommand(uint64_t a1, uint64_t a2, xpc_object_t *a3, const void **a4)
{
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v5) {
    return;
  }
  int v9 = std::__shared_weak_count::lock(v5);
  v16[2] = v9;
  if (!v9) {
    return;
  }
  int v10 = v9;
  int v11 = *(void **)(a1 + 8);
  v16[1] = v11;
  if (v11)
  {
    xpc_object_t v12 = *a3;
    v16[0] = v12;
    if (v12)
    {
      xpc_retain(v12);
      int v13 = *a4;
      if (*a4)
      {
LABEL_6:
        int v14 = _Block_copy(v13);
LABEL_9:
        int v15 = v14;
        ServiceManager::runCommand((uint64_t)v11, a2, v16, &v15);
        if (v14) {
          _Block_release(v14);
        }
        xpc_release(v12);
        v16[0] = 0;
        goto LABEL_12;
      }
    }
    else
    {
      xpc_object_t v12 = xpc_null_create();
      v16[0] = v12;
      int v13 = *a4;
      if (*a4) {
        goto LABEL_6;
      }
    }
    int v14 = 0;
    goto LABEL_9;
  }
LABEL_12:
  if (!atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
}

void sub_1C58F2240(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (v12) {
    _Block_release(v12);
  }
  xpc_release(v11);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void ServiceManager::broadcastEvent(uint64_t a1, uint64_t a2, const void **a3, void **a4)
{
  uint64_t v4 = *(void *)(a1 + 184);
  if (v4) {
    dispatch::block<void({block_pointer})(std::string,ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::block<void({block_pointer})(void)>)>::operator()<std::string const&,ctu::cf::CFSharedRef<__CFDictionary const>&,dispatch::block<void({block_pointer})(void)>&>(v4, a2, a3, a4);
  }
}

void Service::broadcastEvent(uint64_t a1, uint64_t a2, void **a3, const void **a4)
{
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (v5)
  {
    int v9 = std::__shared_weak_count::lock(v5);
    int v26 = v9;
    if (v9)
    {
      int v10 = v9;
      uint64_t v11 = *(void *)(a1 + 8);
      uint64_t v25 = v11;
      if (!v11) {
        goto LABEL_32;
      }
      unint64_t v24 = 0xAAAAAAAAAAAAAAAALL;
      xpc_object_t v12 = *a3;
      xpc_object_t object = v12;
      if (v12) {
        xpc_retain(v12);
      }
      else {
        xpc_object_t object = xpc_null_create();
      }
      xpc::bridge((uint64_t *)&cf, (xpc *)&object, v13);
      CFTypeRef v14 = cf;
      if (cf && (CFTypeID v15 = CFGetTypeID(cf), v15 == CFDictionaryGetTypeID()))
      {
        unint64_t v24 = (unint64_t)v14;
        CFRetain(v14);
        CFTypeRef v16 = cf;
        if (!cf)
        {
LABEL_13:
          xpc_release(object);
          if (*(char *)(a2 + 23) < 0) {
            std::string::__init_copy_ctor_external(&v21, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
          }
          else {
            std::string v21 = *(std::string *)a2;
          }
          xpc_object_t v20 = v14;
          if (v14) {
            CFRetain(v14);
          }
          if (*a4)
          {
            xpc_object_t v17 = _Block_copy(*a4);
            int v19 = v17;
            uint64_t v18 = *(void *)(v11 + 184);
            if (!v18)
            {
LABEL_23:
              if (v17) {
                _Block_release(v17);
              }
              if (v14) {
                CFRelease(v14);
              }
              if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
              {
                operator delete(v21.__r_.__value_.__l.__data_);
                if (!v14) {
                  goto LABEL_32;
                }
              }
              else if (!v14)
              {
LABEL_32:
                if (!atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
                  std::__shared_weak_count::__release_weak(v10);
                }
                return;
              }
              CFRelease(v14);
              goto LABEL_32;
            }
          }
          else
          {
            xpc_object_t v17 = 0;
            int v19 = 0;
            uint64_t v18 = *(void *)(v11 + 184);
            if (!v18) {
              goto LABEL_23;
            }
          }
          dispatch::block<void({block_pointer})(std::string,ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::block<void({block_pointer})(void)>)>::operator()<std::string const&,ctu::cf::CFSharedRef<__CFDictionary const>&,dispatch::block<void({block_pointer})(void)>&>(v18, (uint64_t)&v21, &v20, &v19);
          goto LABEL_23;
        }
      }
      else
      {
        CFTypeRef v14 = 0;
        unint64_t v24 = 0;
        CFTypeRef v16 = cf;
        if (!cf) {
          goto LABEL_13;
        }
      }
      CFRelease(v16);
      goto LABEL_13;
    }
  }
}

void sub_1C58F2480(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, const void *a19, __int16 a20,char a21,char a22)
{
}

void sub_1C58F24E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, xpc_object_t object, char a15, uint64_t a16, char a17)
{
}

void Service::getRegisteredCommands(Service *this@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(a2, *((void *)this + 3), *((void *)this + 4), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)this + 4) - *((void *)this + 3)) >> 3));
}

void ServiceManager::~ServiceManager(ServiceManager *this)
{
  *(void *)this = &unk_1F20FC238;
  uint64_t v2 = (const void *)*((void *)this + 23);
  if (v2) {
    _Block_release(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 22);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  uint64_t v4 = *((void *)this + 18);
  if (v4)
  {
    uint64_t v5 = *((void *)this + 19);
    unint64_t v6 = (void *)*((void *)this + 18);
    if (v5 != v4)
    {
      do
      {
        long long v7 = *(std::__shared_weak_count **)(v5 - 8);
        if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
        v5 -= 16;
      }
      while (v5 != v4);
      unint64_t v6 = (void *)*((void *)this + 18);
    }
    *((void *)this + 19) = v4;
    operator delete(v6);
  }
  uint64_t v8 = *((void *)this + 15);
  if (v8)
  {
    uint64_t v9 = *((void *)this + 16);
    int v10 = (void *)*((void *)this + 15);
    if (v9 != v8)
    {
      do
      {
        uint64_t v11 = *(std::__shared_weak_count **)(v9 - 8);
        if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
        v9 -= 16;
      }
      while (v9 != v8);
      int v10 = (void *)*((void *)this + 15);
    }
    *((void *)this + 16) = v8;
    operator delete(v10);
  }
  xpc_object_t v12 = (std::__shared_weak_count *)*((void *)this + 14);
  if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  *(void *)this = &unk_1F20FC350;
  MEMORY[0x1C8790F40]((char *)this + 8);
  int v13 = *((void *)this + 12);
  if (v13) {
    dispatch_release(v13);
  }
  CFTypeRef v14 = *((void *)this + 11);
  if (v14) {
    dispatch_release(v14);
  }
  CFTypeID v15 = (std::__shared_weak_count *)*((void *)this + 10);
  if (v15) {
    std::__shared_weak_count::__release_weak(v15);
  }
}

void ServiceManager::ServiceManager(ServiceManager *this, const char *a2)
{
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v7, "com.apple.telephony.abm", a2);
  GetABMLogServer(&v5);
  dispatch_object_t object = 0;
  ctu::SharedSynchronizable<NetworkStatsInterface>::SharedSynchronizable((void *)this + 9, a2, QOS_CLASS_DEFAULT, &object);
  if (object) {
    dispatch_release(object);
  }
  ctu::Loggable<ServiceManager,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::Loggable<ctu::OsLogContext,std::shared_ptr<ctu::LogServer>>(this, (uint64_t)v7, &v5);
  *(void *)this = &unk_1F20FC580;
  uint64_t v4 = v6;
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v7);
  *(void *)this = &unk_1F20FC238;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *((void *)this + 23) = 0;
  *((unsigned char *)this + 192) = 1;
}

void sub_1C58F28BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, dispatch_object_t object)
{
  ctu::SharedSynchronizable<DataStallDetection>::~SharedSynchronizable(v14);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&a12);
  _Unwind_Resume(a1);
}

void sub_1C58F28F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)va);
  _Unwind_Resume(a1);
}

void ServiceManager::init(void *a1, uint64_t *a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[10];
  if (!v3
    || (uint64_t v5 = (const void *(__cdecl *)(const std::__shared_weak_count *__hidden, const std::type_info *))a1[9],
        (unint64_t v6 = std::__shared_weak_count::lock(v3)) == 0))
  {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  long long v7 = v6;
  atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v7);
  }
  unint64_t v31 = 0xAAAAAAAAAAAAAAAALL;
  xpc_object_t v32 = (std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL;
  uint64_t v8 = (std::__shared_weak_count_vtbl *)operator new(0x90uLL);
  atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  v8->~__shared_weak_size_t count = (void (__cdecl *)(std::__shared_weak_count *__hidden))&unk_1F20FC3E0;
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v35, "com.apple.telephony.abm", "svc.ctrl");
  GetABMLogServer(&v33);
  initially_inactive = dispatch_queue_attr_make_initially_inactive(0);
  int v10 = dispatch_queue_create_with_target_V2("svc.ctrl", initially_inactive, 0);
  dispatch_set_qos_class_floor(v10, QOS_CLASS_DEFAULT, 0);
  dispatch_activate(v10);
  v8[1].__on_zero_shared_weak = 0;
  v8[2].~__shared_weak_size_t count = 0;
  v8[2].~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v10;
  if (v10)
  {
    dispatch_retain(v10);
    v8[2].__on_zero_shared = 0;
    dispatch_release(v10);
  }
  else
  {
    v8[2].__on_zero_shared = 0;
  }
  v8->~__shared_weak_size_t count = (void (__cdecl *)(std::__shared_weak_count *__hidden))&unk_1F20FC4F0;
  ctu::OsLogContext::OsLogContext();
  ctu::OsLogContext::OsLogContext();
  ctu::LoggerCommonBase::LoggerCommonBase();
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&v38);
  v8->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))&unk_1F20F0070;
  uint64_t v11 = v34;
  v8[1].__on_zero_shared = v33;
  v8[1].__get_deleter = (const void *(__cdecl *)(const std::__shared_weak_count *__hidden, const std::type_info *))v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&v36);
  v8->~__shared_weak_size_t count = (void (__cdecl *)(std::__shared_weak_count *__hidden))&unk_1F20FC4B0;
  xpc_object_t v12 = v34;
  if (v34 && !atomic_fetch_add(&v34->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v35);
  v8->~__shared_weak_size_t count = (void (__cdecl *)(std::__shared_weak_count *__hidden))&unk_1F20FC3E0;
  v8[2].__get_deleter = v5;
  v8[2].__on_zero_shared_weak = (void (__cdecl *)(std::__shared_weak_count *__hidden))v7;
  atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  v8[3].__on_zero_shared = 0;
  v8[3].~__shared_weak_count_0 = 0;
  v8[3].~__shared_weak_size_t count = (void (__cdecl *)(std::__shared_weak_count *__hidden))&v8[3].~__shared_weak_count_0;
  unint64_t v31 = (unint64_t)v8;
  int v13 = (std::__shared_weak_count *)operator new(0x20uLL);
  v13->__shared_owners_ = 0;
  p_shared_owners = &v13->__shared_owners_;
  v13->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20FC390;
  v13->__shared_weak_owners_ = 0;
  v13[1].__vftable = v8;
  xpc_object_t v32 = v13;
  CFTypeID v15 = (std::__shared_weak_count *)v8[2].~__shared_weak_count;
  if (!v15)
  {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v13->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v8[1].__on_zero_shared_weak = (void (__cdecl *)(std::__shared_weak_count *__hidden))v8;
    v8[2].~__shared_weak_size_t count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v13;
    if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_44;
    }
LABEL_18:
    CFTypeRef v16 = (void *)v31;
    if (!*(void *)(v31 + 56)) {
      goto LABEL_28;
    }
    goto LABEL_19;
  }
  if (v15->__shared_owners_ != -1) {
    goto LABEL_18;
  }
  atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  atomic_fetch_add_explicit(&v13->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  v8[1].__on_zero_shared_weak = (void (__cdecl *)(std::__shared_weak_count *__hidden))v8;
  v8[2].~__shared_weak_size_t count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v13;
  std::__shared_weak_count::__release_weak(v15);
  if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_18;
  }
LABEL_44:
  ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
  std::__shared_weak_count::__release_weak(v13);
  CFTypeRef v16 = (void *)v31;
  if (!*(void *)(v31 + 56)) {
    goto LABEL_28;
  }
LABEL_19:
  xpc_object_t v17 = (std::__shared_weak_count *)v16[10];
  if (!v17 || (uint64_t v18 = v16[9], (v19 = std::__shared_weak_count::lock(v17)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  xpc_object_t v20 = v19;
  uint64_t v38 = v18;
  long long v39 = v19;
  ctu::LoggerCommonBase::getLogDomain((ctu::LoggerCommonBase *)(v16 + 1));
  uint64_t v36 = v18;
  xpc_object_t v37 = v20;
  uint64_t v38 = 0;
  long long v39 = 0;
  ctu::TrackedLogger::registerLoggerToServer();
  std::string v21 = v37;
  if (v37 && !atomic_fetch_add(&v37->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v21);
  }
  BOOL v22 = v39;
  if (v39 && !atomic_fetch_add(&v39->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
  }
  CFTypeRef v16 = (void *)v31;
LABEL_28:
  std::__shared_weak_count::__release_weak(v7);
  unsigned int v23 = v32;
  unint64_t v31 = 0;
  xpc_object_t v32 = 0;
  unint64_t v24 = (std::__shared_weak_count *)a1[22];
  a1[21] = v16;
  a1[22] = v23;
  if (v24 && !atomic_fetch_add(&v24->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
    std::__shared_weak_count::__release_weak(v24);
  }
  if (v32 && !atomic_fetch_add(&v32->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
    std::__shared_weak_count::__release_weak(v32);
    std::__shared_weak_count::__release_weak(v7);
    uint64_t v25 = *a2;
    if (!*a2) {
      return;
    }
  }
  else
  {
    std::__shared_weak_count::__release_weak(v7);
    uint64_t v25 = *a2;
    if (!*a2) {
      return;
    }
  }
  uint64_t v26 = a2[1];
  if (v26) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v26 + 8), 1uLL, memory_order_relaxed);
  }
  __int16 v27 = (std::__shared_weak_count *)a1[14];
  a1[13] = v25;
  a1[14] = v26;
  if (v27 && !atomic_fetch_add(&v27->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
    std::__shared_weak_count::__release_weak(v27);
  }
  uint64_t v28 = a1[13];
  v29[0] = MEMORY[0x1E4F143A8];
  v29[1] = 0x40000000;
  v29[2] = ___ZN14ServiceManager4initENSt3__110shared_ptrI14PowerInterfaceEE_block_invoke;
  v29[3] = &__block_descriptor_tmp_16;
  v29[4] = a1;
  aBlock = _Block_copy(v29);
  (*(void (**)(uint64_t, void **))(*(void *)v28 + 16))(v28, &aBlock);
  if (aBlock) {
    _Block_release(aBlock);
  }
}

void sub_1C58F2F10(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *aBlock, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
}

void sub_1C58F2F7C()
{
}

void sub_1C58F2F8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va2, a8);
  va_start(va1, a8);
  va_start(va, a8);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v15 = va_arg(va2, void);
  uint64_t v17 = va_arg(va2, void);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)(v11 - 80));
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)va2);
  ctu::SharedSynchronizable<DataStallDetection>::~SharedSynchronizable(v10);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)va1);
  std::__shared_weak_count::__release_weak(v8);
  operator delete(v9);
  JUMPOUT(0x1C58F2FF8);
}

void sub_1C58F2FDC()
{
}

void ___ZN14ServiceManager4initENSt3__110shared_ptrI14PowerInterfaceEE_block_invoke(uint64_t a1, int a2, NSObject **a3)
{
  uint64_t v3 = *(void **)(a1 + 32);
  if (a2 == 1)
  {
    uint64_t v4 = *a3;
    dispatch_object_t v5 = v4;
    if (!v4)
    {
      ServiceManager::wake(v3, &v5);
      return;
    }
    dispatch_retain(v4);
    dispatch_group_enter(v4);
    ServiceManager::wake(v3, &v5);
  }
  else
  {
    if (a2) {
      return;
    }
    uint64_t v4 = *a3;
    dispatch_object_t v6 = v4;
    if (!v4)
    {
      ServiceManager::sleep(v3, &v6);
      return;
    }
    dispatch_retain(v4);
    dispatch_group_enter(v4);
    ServiceManager::sleep(v3, &v6);
  }
  dispatch_group_leave(v4);

  dispatch_release(v4);
}

void ServiceManager::sleep(void *a1, dispatch_object_t *a2)
{
  uint64_t v3 = *a2;
  if (*a2)
  {
    dispatch_retain(*a2);
    dispatch_group_enter(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[10];
  if (!v4 || (uint64_t v5 = a1[9], (v6 = std::__shared_weak_count::lock(v4)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  long long v7 = v6;
  uint64_t v8 = operator new(0x10uLL);
  *uint64_t v8 = a1;
  v8[1] = v3;
  uint64_t v9 = a1[11];
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  int v10 = operator new(0x18uLL);
  void *v10 = v8;
  v10[1] = v5;
  v10[2] = v7;
  dispatch_async_f(v9, v10, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<ServiceManager>::execute_wrapped<ServiceManager::sleep(dispatch::group_session)::$_0>(ServiceManager::sleep(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<ServiceManager::sleep(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<ServiceManager::sleep(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke);
  if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void ServiceManager::wake(void *a1, dispatch_object_t *a2)
{
  uint64_t v3 = *a2;
  if (*a2)
  {
    dispatch_retain(*a2);
    dispatch_group_enter(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[10];
  if (!v4 || (uint64_t v5 = a1[9], (v6 = std::__shared_weak_count::lock(v4)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  long long v7 = v6;
  uint64_t v8 = operator new(0x10uLL);
  *uint64_t v8 = a1;
  v8[1] = v3;
  uint64_t v9 = a1[11];
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  int v10 = operator new(0x18uLL);
  void *v10 = v8;
  v10[1] = v5;
  v10[2] = v7;
  dispatch_async_f(v9, v10, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<ServiceManager>::execute_wrapped<ServiceManager::wake(dispatch::group_session)::$_0>(ServiceManager::wake(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<ServiceManager::wake(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<ServiceManager::wake(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke);
  if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void ServiceManager::createPowerAssertion(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a1 + 104);
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string __p = *(std::string *)a2;
  }
  (*(void (**)(uint64_t, std::string *, uint64_t))(*(void *)v4 + 24))(v4, &__p, a3);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1C58F33D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ServiceManager::releasePowerAssertion(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 104);
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string __p = *(std::string *)a2;
  }
  (*(void (**)(uint64_t, std::string *))(*(void *)v2 + 32))(v2, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1C58F348C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ServiceCtrl::registerCommandHandler(uint64_t a1, uint64_t a2, void **a3)
{
  uint64_t v8 = a1;
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    uint64_t v5 = *a3;
    if (!*a3) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  std::string __p = *(std::string *)a2;
  uint64_t v5 = *a3;
  if (*a3) {
LABEL_5:
  }
    uint64_t v5 = _Block_copy(v5);
LABEL_6:
  aBlock = v5;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI11ServiceCtrlE20execute_wrapped_syncIZNS1_22registerCommandHandlerERKNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEN8dispatch5blockIU13block_pointerFvN3xpc4dictENSE_IU13block_pointerFviSG_EEEEEEEUlvE_EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOSO__block_invoke;
  block[3] = &__block_descriptor_tmp_39_0;
  block[4] = a1 + 72;
  block[5] = &v8;
  dispatch_object_t v6 = *(NSObject **)(a1 + 88);
  if (!*(void *)(a1 + 96))
  {
    dispatch_sync(v6, block);
    long long v7 = aBlock;
    if (!aBlock) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }
  dispatch_async_and_wait(v6, block);
  long long v7 = aBlock;
  if (aBlock) {
LABEL_10:
  }
    _Block_release(v7);
LABEL_11:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void ServiceManager::registerEventDispatcher(uint64_t a1, void **a2)
{
  uint64_t v3 = *a2;
  if (*a2) {
    uint64_t v3 = _Block_copy(v3);
  }
  uint64_t v4 = *(const void **)(a1 + 184);
  *(void *)(a1 + 184) = v3;
  if (v4) {
    _Block_release(v4);
  }
}

void ServiceManager::initializeGlobalServices(ServiceManager *this@<X0>, NSObject **a2@<X8>)
{
  uint64_t v4 = dispatch_group_create();
  uint64_t v5 = v4;
  *a2 = v4;
  if (v4)
  {
    dispatch_retain(v4);
    dispatch_group_enter(v5);
  }
  dispatch_object_t v6 = (std::__shared_weak_count *)*((void *)this + 10);
  if (!v6 || (uint64_t v7 = *((void *)this + 9), (v8 = std::__shared_weak_count::lock(v6)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v9 = v8;
  int v10 = operator new(0x10uLL);
  void *v10 = this;
  v10[1] = v5;
  uint64_t v11 = *((void *)this + 11);
  atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v12 = operator new(0x18uLL);
  *uint64_t v12 = v10;
  v12[1] = v7;
  v12[2] = v9;
  dispatch_async_f(v11, v12, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<ServiceManager>::execute_wrapped<ServiceManager::initializeGlobalServices(void)::$_0>(ServiceManager::initializeGlobalServices(void)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<ServiceManager::initializeGlobalServices(void)::$_0,dispatch_queue_s *::default_delete<ServiceManager::initializeGlobalServices(void)::$_0>>)::{lambda(void *)#1}::__invoke);
  if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
}

void ServiceManager::shutdownGlobalServices(ServiceManager *this@<X0>, NSObject **a2@<X8>)
{
  uint64_t v4 = dispatch_group_create();
  uint64_t v5 = v4;
  *a2 = v4;
  if (v4)
  {
    dispatch_retain(v4);
    dispatch_group_enter(v5);
  }
  dispatch_object_t v6 = (std::__shared_weak_count *)*((void *)this + 10);
  if (!v6 || (uint64_t v7 = *((void *)this + 9), (v8 = std::__shared_weak_count::lock(v6)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v9 = v8;
  int v10 = operator new(0x10uLL);
  void *v10 = this;
  v10[1] = v5;
  uint64_t v11 = *((void *)this + 11);
  atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v12 = operator new(0x18uLL);
  *uint64_t v12 = v10;
  v12[1] = v7;
  v12[2] = v9;
  dispatch_async_f(v11, v12, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<ServiceManager>::execute_wrapped<ServiceManager::shutdownGlobalServices(void)::$_0>(ServiceManager::shutdownGlobalServices(void)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<ServiceManager::shutdownGlobalServices(void)::$_0,dispatch_queue_s *::default_delete<ServiceManager::shutdownGlobalServices(void)::$_0>>)::{lambda(void *)#1}::__invoke);
  if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
}

void ServiceManager::initializeDynamicServices(ServiceManager *this@<X0>, NSObject **a2@<X8>)
{
  uint64_t v4 = dispatch_group_create();
  *a2 = v4;
  dispatch_object_t object = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
  uint64_t v5 = *((void *)this + 13);
  std::string __p = operator new(0x30uLL);
  long long v11 = xmmword_1C599E870;
  strcpy((char *)__p, "com.apple.AppleBasebandManager.ServerNotReady");
  (*(void (**)(dispatch_object_t *__return_ptr, uint64_t, void **, void))(*(void *)v5 + 24))(&object, v5, &__p, 0);
  if (SHIBYTE(v11) < 0) {
    operator delete(__p);
  }
  dispatch_object_t v6 = object;
  if (object) {
    dispatch_retain(object);
  }
  if (v4)
  {
    dispatch_retain(v4);
    dispatch_group_enter(v4);
  }
  uint64_t v7 = object;
  uint64_t v8 = *((void *)this + 11);
  uint64_t v9 = operator new(0x18uLL);
  *uint64_t v9 = this;
  v9[1] = v6;
  v9[2] = v4;
  dispatch_group_notify_f(v7, v8, v9, (dispatch_function_t)dispatch::detail::group_notify<ServiceManager::initializeDynamicServices(void)::$_0>(dispatch_group_s *,dispatch_queue_s *,ServiceManager::initializeDynamicServices(void)::$_0 &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke);
  if (object) {
    dispatch_release(object);
  }
}

void sub_1C58F398C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, dispatch_object_t object)
{
  ServiceManager::initializeDynamicServices(void)::$_0::~$_0((uint64_t)&a10);
  if (object) {
    dispatch_release(object);
  }
  if (v19) {
    dispatch_release(v19);
  }
  _Unwind_Resume(a1);
}

uint64_t ServiceManager::initializeDynamicServices(void)::$_0::~$_0(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 16);
  if (v2)
  {
    dispatch_group_leave(v2);
    uint64_t v3 = *(NSObject **)(a1 + 16);
    if (v3) {
      dispatch_release(v3);
    }
  }
  uint64_t v4 = *(NSObject **)(a1 + 8);
  if (v4) {
    dispatch_release(v4);
  }
  return a1;
}

void ServiceManager::shutdownDynamicServices(ServiceManager *this@<X0>, NSObject **a2@<X8>)
{
  uint64_t v4 = dispatch_group_create();
  *a2 = v4;
  dispatch_object_t object = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
  uint64_t v5 = *((void *)this + 13);
  std::string __p = operator new(0x30uLL);
  long long v11 = xmmword_1C599E870;
  strcpy((char *)__p, "com.apple.AppleBasebandManager.ServerNotReady");
  (*(void (**)(dispatch_object_t *__return_ptr, uint64_t, void **, void))(*(void *)v5 + 24))(&object, v5, &__p, 0);
  if (SHIBYTE(v11) < 0) {
    operator delete(__p);
  }
  dispatch_object_t v6 = object;
  if (object) {
    dispatch_retain(object);
  }
  if (v4)
  {
    dispatch_retain(v4);
    dispatch_group_enter(v4);
  }
  uint64_t v7 = object;
  uint64_t v8 = *((void *)this + 11);
  uint64_t v9 = operator new(0x18uLL);
  *uint64_t v9 = this;
  v9[1] = v6;
  v9[2] = v4;
  dispatch_group_notify_f(v7, v8, v9, (dispatch_function_t)dispatch::detail::group_notify<ServiceManager::shutdownDynamicServices(void)::$_0>(dispatch_group_s *,dispatch_queue_s *,ServiceManager::shutdownDynamicServices(void)::$_0 &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke);
  if (object) {
    dispatch_release(object);
  }
}

void sub_1C58F3B5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, dispatch_object_t object)
{
  ServiceManager::initializeDynamicServices(void)::$_0::~$_0((uint64_t)&a10);
  if (object) {
    dispatch_release(object);
  }
  if (v19) {
    dispatch_release(v19);
  }
  _Unwind_Resume(a1);
}

void std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(void *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    if (a4 >= 0xAAAAAAAAAAAAAABLL) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v8 = (char *)operator new(24 * a4);
    *a1 = v8;
    a1[1] = v8;
    a1[2] = &v8[24 * a4];
    if (a2 != a3)
    {
      uint64_t v9 = 0;
      do
      {
        int v10 = (std::string *)&v8[v9];
        uint64_t v11 = a2 + v9;
        if (*(char *)(a2 + v9 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(v10, *(const std::string::value_type **)v11, *(void *)(v11 + 8));
        }
        else
        {
          *(_OWORD *)&v10->__r_.__value_.__l.__data_ = *(_OWORD *)v11;
          v10->__r_.__value_.__r.__words[2] = *(void *)(v11 + 16);
        }
        v9 += 24;
      }
      while (a2 + v9 != a3);
      v8 += v9;
    }
    a1[1] = v8;
  }
}

void sub_1C58F3C90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_1C58F3CA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  for (; v11; v11 -= 24)
  {
    if (*(char *)(v10 + v11 - 1) < 0) {
      operator delete(*(void **)(v10 + v11 - 24));
    }
  }
  *(void *)(v9 + 8) = v10;
  std::__exception_guard_exceptions<std::vector<std::string>::__destroy_vector>::~__exception_guard_exceptions[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void ***std::__exception_guard_exceptions<std::vector<std::string>::__destroy_vector>::~__exception_guard_exceptions[abi:ne180100](void ***result)
{
  uint64_t v1 = result;
  if (!*((unsigned char *)result + 8))
  {
    uint64_t v2 = *result;
    uint64_t v3 = (void **)**result;
    if (v3)
    {
      uint64_t v4 = (void **)v2[1];
      uint64_t v5 = **result;
      if (v4 != v3)
      {
        do
        {
          if (*((char *)v4 - 1) < 0) {
            operator delete(*(v4 - 3));
          }
          v4 -= 3;
        }
        while (v4 != v3);
        uint64_t v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

void *ctu::Loggable<ServiceManager,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_1F20FC350;
  MEMORY[0x1C8790F40](a1 + 1);
  return a1;
}

void ctu::Loggable<ServiceManager,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_1F20FC350;
  MEMORY[0x1C8790F40](a1 + 1);

  operator delete(a1);
}

void std::__shared_ptr_pointer<ServiceCtrl *,std::shared_ptr<ServiceCtrl> ctu::SharedSynchronizable<ServiceCtrl>::make_shared_ptr<ServiceCtrl>(ServiceCtrl*)::{lambda(ServiceCtrl *)#1},std::allocator<ServiceCtrl>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<ServiceCtrl *,std::shared_ptr<ServiceCtrl> ctu::SharedSynchronizable<ServiceCtrl>::make_shared_ptr<ServiceCtrl>(ServiceCtrl*)::{lambda(ServiceCtrl *)#1},std::allocator<ServiceCtrl>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<ServiceCtrl *,std::shared_ptr<ServiceCtrl> ctu::SharedSynchronizable<ServiceCtrl>::make_shared_ptr<ServiceCtrl>(ServiceCtrl*)::{lambda(ServiceCtrl *)#1},std::allocator<ServiceCtrl>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableI11ServiceCtrlE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_") {
    return a1 + 24;
  }
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableI11ServiceCtrlE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableI11ServiceCtrlE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_"))return 0; {
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableI11ServiceCtrlE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  }
  return 0;
}

uint64_t std::shared_ptr<ServiceCtrl> ctu::SharedSynchronizable<ServiceCtrl>::make_shared_ptr<ServiceCtrl>(ServiceCtrl*)::{lambda(ServiceCtrl*)#1}::operator() const(ServiceCtrl*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void ServiceCtrl::~ServiceCtrl(char **this)
{
  ServiceCtrl::~ServiceCtrl(this);

  operator delete(v1);
}

{
  std::__shared_weak_count *v2;
  NSObject *v3;
  NSObject *v4;
  std::__shared_weak_count *v5;

  *this = (char *)&unk_1F20FC3E0;
  std::__tree<std::__value_type<std::string,dispatch::block<void({block_pointer})(xpc::dict,dispatch::block<void({block_pointer})(int,xpc::dict)>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,dispatch::block<void({block_pointer})(xpc::dict,dispatch::block<void({block_pointer})(int,xpc::dict)>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dispatch::block<void({block_pointer})(xpc::dict,dispatch::block<void({block_pointer})(int,xpc::dict)>)>>>>::destroy(this[16]);
  uint64_t v2 = (std::__shared_weak_count *)this[14];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  *this = (char *)&unk_1F20FC4F0;
  MEMORY[0x1C8790F40](this + 1);
  unint64_t v3 = this[12];
  if (v3) {
    dispatch_release(v3);
  }
  uint64_t v4 = this[11];
  if (v4) {
    dispatch_release(v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)this[10];
  if (v5) {
    std::__shared_weak_count::__release_weak(v5);
  }
}

uint64_t ctu::Loggable<ServiceCtrl,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig(uint64_t a1)
{
  return MEMORY[0x1F417DA50](a1 + 8);
}

void ctu::Loggable<ServiceCtrl,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName(char *a1@<X8>)
{
  a1[23] = 8;
  strcpy(a1, "svc.ctrl");
}

uint64_t ctu::Loggable<ServiceCtrl,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return MEMORY[0x1F417DD10](a1 + 8);
}

void *ctu::SharedLoggable<ServiceCtrl,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(void *a1)
{
  *a1 = &unk_1F20FC4F0;
  MEMORY[0x1C8790F40](a1 + 1);
  uint64_t v2 = a1[12];
  if (v2) {
    dispatch_release(v2);
  }
  unint64_t v3 = a1[11];
  if (v3) {
    dispatch_release(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[10];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

void ctu::SharedLoggable<ServiceCtrl,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(void *a1)
{
  *a1 = &unk_1F20FC4F0;
  MEMORY[0x1C8790F40](a1 + 1);
  uint64_t v2 = a1[12];
  if (v2) {
    dispatch_release(v2);
  }
  unint64_t v3 = a1[11];
  if (v3) {
    dispatch_release(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[10];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }

  operator delete(a1);
}

void *ctu::Loggable<ServiceCtrl,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_1F20FC4F0;
  MEMORY[0x1C8790F40](a1 + 1);
  return a1;
}

void ctu::Loggable<ServiceCtrl,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_1F20FC4F0;
  MEMORY[0x1C8790F40](a1 + 1);

  operator delete(a1);
}

void std::__tree<std::__value_type<std::string,dispatch::block<void({block_pointer})(xpc::dict,dispatch::block<void({block_pointer})(int,xpc::dict)>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,dispatch::block<void({block_pointer})(xpc::dict,dispatch::block<void({block_pointer})(int,xpc::dict)>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dispatch::block<void({block_pointer})(xpc::dict,dispatch::block<void({block_pointer})(int,xpc::dict)>)>>>>::destroy(char *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,dispatch::block<void({block_pointer})(xpc::dict,dispatch::block<void({block_pointer})(int,xpc::dict)>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,dispatch::block<void({block_pointer})(xpc::dict,dispatch::block<void({block_pointer})(int,xpc::dict)>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dispatch::block<void({block_pointer})(xpc::dict,dispatch::block<void({block_pointer})(int,xpc::dict)>)>>>>::destroy(*(void *)a1);
    std::__tree<std::__value_type<std::string,dispatch::block<void({block_pointer})(xpc::dict,dispatch::block<void({block_pointer})(int,xpc::dict)>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,dispatch::block<void({block_pointer})(xpc::dict,dispatch::block<void({block_pointer})(int,xpc::dict)>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dispatch::block<void({block_pointer})(xpc::dict,dispatch::block<void({block_pointer})(int,xpc::dict)>)>>>>::destroy(*((void *)a1 + 1));
    uint64_t v2 = (const void *)*((void *)a1 + 7);
    if (v2) {
      _Block_release(v2);
    }
    if (a1[55] < 0)
    {
      operator delete(*((void **)a1 + 4));
      unint64_t v3 = a1;
    }
    else
    {
      unint64_t v3 = a1;
    }
    operator delete(v3);
  }
}

void ___ZNK3ctu20SharedSynchronizableI11ServiceCtrlE20execute_wrapped_syncIZNS1_22registerCommandHandlerERKNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEN8dispatch5blockIU13block_pointerFvN3xpc4dictENSE_IU13block_pointerFviSG_EEEEEEEUlvE_EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOSO__block_invoke(uint64_t a1)
{
  uint64_t v1 = *(uint64_t **)(a1 + 40);
  uint64_t v2 = *v1;
  unint64_t v3 = (const void *)v1[4];
  if (v3)
  {
    uint64_t v4 = _Block_copy(v3);
    uint64_t v5 = v1 + 1;
    uint64_t v7 = (void *)(v2 + 128);
    dispatch_object_t v6 = *(void **)(v2 + 128);
    if (v6)
    {
LABEL_3:
      int v8 = *((char *)v1 + 31);
      if (v8 >= 0) {
        uint64_t v9 = v5;
      }
      else {
        uint64_t v9 = (const void *)v1[1];
      }
      if (v8 >= 0) {
        size_t v10 = *((unsigned __int8 *)v1 + 31);
      }
      else {
        size_t v10 = v1[2];
      }
      while (1)
      {
        uint64_t v11 = v6;
        uint64_t v14 = (const void *)v6[4];
        uint64_t v12 = v6 + 4;
        int v13 = v14;
        int v15 = *((char *)v12 + 23);
        if (v15 >= 0) {
          CFTypeRef v16 = v12;
        }
        else {
          CFTypeRef v16 = v13;
        }
        if (v15 >= 0) {
          size_t v17 = *((unsigned __int8 *)v12 + 23);
        }
        else {
          size_t v17 = v12[1];
        }
        if (v17 >= v10) {
          size_t v18 = v10;
        }
        else {
          size_t v18 = v17;
        }
        int v19 = memcmp(v9, v16, v18);
        if (v19)
        {
          if (v19 < 0) {
            goto LABEL_9;
          }
LABEL_23:
          int v20 = memcmp(v16, v9, v18);
          if (v20)
          {
            if ((v20 & 0x80000000) == 0) {
              goto LABEL_38;
            }
          }
          else if (v17 >= v10)
          {
LABEL_38:
            uint64_t v26 = (const void *)v11[7];
            v11[7] = v4;
            if (v26) {
              goto LABEL_39;
            }
            return;
          }
          dispatch_object_t v6 = (void *)v11[1];
          if (!v6)
          {
            uint64_t v7 = v11 + 1;
            goto LABEL_31;
          }
        }
        else
        {
          if (v10 >= v17) {
            goto LABEL_23;
          }
LABEL_9:
          dispatch_object_t v6 = (void *)*v11;
          uint64_t v7 = v11;
          if (!*v11) {
            goto LABEL_31;
          }
        }
      }
    }
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v5 = v1 + 1;
    uint64_t v7 = (void *)(v2 + 128);
    dispatch_object_t v6 = *(void **)(v2 + 128);
    if (v6) {
      goto LABEL_3;
    }
  }
  uint64_t v11 = v7;
LABEL_31:
  std::string v21 = operator new(0x40uLL);
  BOOL v22 = (std::string *)(v21 + 4);
  if (*((char *)v1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v22, (const std::string::value_type *)v1[1], v1[2]);
  }
  else
  {
    long long v23 = *(_OWORD *)v5;
    v21[6] = v5[2];
    *(_OWORD *)&v22->__r_.__value_.__l.__data_ = v23;
  }
  v21[7] = 0;
  *std::string v21 = 0;
  v21[1] = 0;
  v21[2] = v11;
  *uint64_t v7 = v21;
  uint64_t v24 = **(void **)(v2 + 120);
  uint64_t v25 = v21;
  if (v24)
  {
    *(void *)(v2 + 120) = v24;
    uint64_t v25 = (uint64_t *)*v7;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v2 + 128), v25);
  ++*(void *)(v2 + 136);
  uint64_t v26 = (const void *)v21[7];
  v21[7] = v4;
  if (v26) {
LABEL_39:
  }
    _Block_release(v26);
}

void sub_1C58F43BC(_Unwind_Exception *a1)
{
  operator delete(v2);
  if (v1) {
    _Block_release(v1);
  }
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<ServiceCtrl::handleCommand(std::string const&,xpc::dict,dispatch::block<void({block_pointer})(int,xpc::dict)>)::{lambda(void)#1},std::default_delete<ServiceCtrl::handleCommand(std::string const&,xpc::dict,dispatch::block<void({block_pointer})(int,xpc::dict)>)::{lambda(void)#1}>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    unint64_t v3 = *(const void **)(v2 + 40);
    if (v3) {
      _Block_release(v3);
    }
    xpc_release(*(xpc_object_t *)(v2 + 32));
    *(void *)(v2 + 32) = 0;
    if (*(char *)(v2 + 31) < 0) {
      operator delete(*(void **)(v2 + 8));
    }
    operator delete((void *)v2);
  }
  return a1;
}

void *ctu::Loggable<ServiceManager,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::Loggable<ctu::OsLogContext,std::shared_ptr<ctu::LogServer>>(void *a1, uint64_t a2, void *a3)
{
  *a1 = &unk_1F20FC350;
  ctu::OsLogContext::OsLogContext();
  ctu::OsLogContext::OsLogContext();
  ctu::LoggerCommonBase::LoggerCommonBase();
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v8);
  a1[1] = &unk_1F20F0070;
  a1[7] = *a3;
  uint64_t v5 = a3[1];
  a1[8] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&v7);
  return a1;
}

void sub_1C58F4520(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

void *ctu::SharedLoggable<ServiceManager,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(void *a1)
{
  *a1 = &unk_1F20FC350;
  MEMORY[0x1C8790F40](a1 + 1);
  uint64_t v2 = a1[12];
  if (v2) {
    dispatch_release(v2);
  }
  unint64_t v3 = a1[11];
  if (v3) {
    dispatch_release(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[10];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

void ctu::SharedLoggable<ServiceManager,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(void *a1)
{
  *a1 = &unk_1F20FC350;
  MEMORY[0x1C8790F40](a1 + 1);
  uint64_t v2 = a1[12];
  if (v2) {
    dispatch_release(v2);
  }
  unint64_t v3 = a1[11];
  if (v3) {
    dispatch_release(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[10];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }

  operator delete(a1);
}

void dispatch::async<void ctu::SharedSynchronizable<ServiceManager>::execute_wrapped<ServiceManager::sleep(dispatch::group_session)::$_0>(ServiceManager::sleep(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<ServiceManager::sleep(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<ServiceManager::sleep(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t v1 = a1;
  uint64_t v58 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *a1;
  uint64_t v3 = **a1;
  unsigned __int8 v4 = atomic_load((unsigned __int8 *)(v3 + 192));
  uint64_t v5 = *(NSObject **)(v3 + 40);
  if ((v4 & 1) == 0)
  {
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = (uint64_t)(*(void *)(v3 + 152) - *(void *)(v3 + 144)) >> 4;
      *(_DWORD *)long long buf = 134217984;
      *(void *)&uint8_t buf[4] = v6;
      _os_log_impl(&dword_1C5767000, v5, OS_LOG_TYPE_DEFAULT, "#I Request %zd services to sleep", buf, 0xCu);
    }
    xpc_object_t v47 = v2;
    xpc_object_t v48 = v1;
    uint64_t v7 = dispatch_group_create();
    int v8 = (std::__shared_weak_count *)operator new(0x38uLL);
    uint64_t v9 = &v8->__vftable;
    v8->__shared_owners_ = 0;
    xpc_object_t v45 = v8;
    p_shared_owners = &v8->__shared_owners_;
    v8->__shared_weak_owners_ = 0;
    v8->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20FC5C0;
    v8[1].__vftable = (std::__shared_weak_count_vtbl *)v7;
    size_t v10 = (NSObject **)&v8[1];
    if (v7)
    {
      dispatch_retain(v7);
      v9[4] = 0;
      v9[5] = 0;
      v9[6] = 0;
      dispatch_release(v7);
      uint64_t v11 = *(uint64_t **)(v3 + 144);
      uint64_t v12 = *(uint64_t **)(v3 + 152);
      if (v11 != v12) {
        goto LABEL_12;
      }
LABEL_33:
      long long v23 = *v10;
      uint64_t v24 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 104))(v3);
      dispatch_time_t v25 = dispatch_time(0, 1000000000 * v24);
      if (!dispatch_group_wait(v23, v25)) {
        goto LABEL_58;
      }
      memset(buf, 0, sizeof(buf));
      *(void *)&long long v56 = 0;
      shared_owners = (uint64_t *)v45[1].__shared_owners_;
      shared_weak_owners = (uint64_t *)v45[1].__shared_weak_owners_;
      if (shared_owners == shared_weak_owners)
      {
        xpc_object_t v35 = 0;
        uint64_t v36 = *(NSObject **)(v3 + 40);
        if (!os_log_type_enabled(v36, OS_LOG_TYPE_ERROR)) {
          goto LABEL_50;
        }
      }
      else
      {
        do
        {
          uint64_t v28 = (std::__shared_weak_count *)shared_owners[1];
          if (v28)
          {
            uint64_t v29 = std::__shared_weak_count::lock(v28);
            if (v29)
            {
              xpc_object_t v30 = v29;
              uint64_t v31 = *shared_owners;
              if (*shared_owners)
              {
                xpc_object_t v32 = *(_OWORD **)&buf[8];
                if (*(void *)&buf[8] >= (unint64_t)v56)
                {
                  xpc_object_t v34 = std::vector<std::string>::__emplace_back_slow_path<std::string const&>((char **)buf, v31);
                }
                else
                {
                  if (*(char *)(v31 + 23) < 0)
                  {
                    std::string::__init_copy_ctor_external(*(std::string **)&buf[8], *(const std::string::value_type **)v31, *(void *)(v31 + 8));
                  }
                  else
                  {
                    long long v33 = *(_OWORD *)v31;
                    *(void *)(*(void *)&buf[8] + 16) = *(void *)(v31 + 16);
                    _OWORD *v32 = v33;
                  }
                  xpc_object_t v34 = (std::string *)((char *)v32 + 24);
                }
                *(void *)&uint8_t buf[8] = v34;
              }
              if (!atomic_fetch_add(&v30->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
                std::__shared_weak_count::__release_weak(v30);
              }
            }
          }
          shared_owners += 2;
        }
        while (shared_owners != shared_weak_owners);
        xpc_object_t v35 = *(std::string **)buf;
        uint64_t v36 = *(NSObject **)(v3 + 40);
        if (!os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
        {
LABEL_50:
          if (v35)
          {
LABEL_51:
            xpc_object_t v37 = *(std::string **)&buf[8];
            uint64_t v38 = v35;
            if (*(std::string **)&buf[8] != v35)
            {
              do
              {
                if (SHIBYTE(v37[-1].__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v37[-1].__r_.__value_.__l.__data_);
                }
                --v37;
              }
              while (v37 != v35);
              uint64_t v38 = *(std::string **)buf;
            }
            *(void *)&uint8_t buf[8] = v35;
            operator delete(v38);
          }
LABEL_58:
          long long v39 = *(NSObject **)(v3 + 40);
          uint64_t v2 = v47;
          uint64_t v1 = v48;
          if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)long long buf = 0;
            _os_log_impl(&dword_1C5767000, v39, OS_LOG_TYPE_DEFAULT, "#I All services acknowledged for sleep request", buf, 2u);
          }
          if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
            std::__shared_weak_count::__release_weak(v45);
          }
          goto LABEL_62;
        }
      }
      uint64_t v43 = *(void *)&buf[8];
      ctu::join<std::__wrap_iter<std::string *>>(&__p, v35, *(long long **)&buf[8]);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)dispatch_object_t object = 134218242;
      *(void *)&object[4] = 0xAAAAAAAAAAAAAAABLL * ((v43 - (uint64_t)v35) >> 3);
      __int16 v53 = 2080;
      xpc_object_t v54 = p_p;
      _os_log_error_impl(&dword_1C5767000, v36, OS_LOG_TYPE_ERROR, "Sleep TIMEOUT: %zd clients failed to complete sleep request: %s", object, 0x16u);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      xpc_object_t v35 = *(std::string **)buf;
      if (!*(void *)buf) {
        goto LABEL_58;
      }
      goto LABEL_51;
    }
    v8[1].__shared_owners_ = 0;
    v8[1].__shared_weak_owners_ = 0;
    v8[2].__vftable = 0;
    uint64_t v11 = *(uint64_t **)(v3 + 144);
    uint64_t v12 = *(uint64_t **)(v3 + 152);
    if (v11 == v12) {
      goto LABEL_33;
    }
    while (1)
    {
LABEL_12:
      int v13 = *(NSObject **)(v3 + 40);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v14 = (*(uint64_t (**)(void))(*(void *)*v11 + 16))();
        *(_DWORD *)long long buf = 136315138;
        *(void *)&uint8_t buf[4] = v14;
        _os_log_impl(&dword_1C5767000, v13, OS_LOG_TYPE_DEFAULT, "#I Requesting '%s' to sleep", buf, 0xCu);
      }
      *(void *)dispatch_object_t object = 0xAAAAAAAAAAAAAAAALL;
      int v15 = (const char *)(*(uint64_t (**)(void))(*(void *)*v11 + 16))();
      size_t v16 = strlen(v15);
      if (v16 >= 0x7FFFFFFFFFFFFFF8) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      std::string::size_type v17 = v16;
      if (v16 >= 0x17) {
        break;
      }
      *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v16;
      p_dst = &__dst;
      if (v16) {
        goto LABEL_21;
      }
LABEL_22:
      p_dst->__r_.__value_.__s.__data_[v17] = 0;
      std::string __p = __dst;
      memset(&__dst, 0, sizeof(__dst));
      *(_OWORD *)long long buf = 0u;
      long long v56 = 0u;
      long long v57 = 0u;
      ctu::TrackedGroup::fork((NSObject **)object, (uint64_t)v10, (uint64_t)&__p, (uint64_t)buf);
      ctu::os::signpost_interval::~signpost_interval((ctu::os::signpost_interval *)buf);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        uint64_t v21 = *v11;
        BOOL v22 = *(NSObject **)object;
        dispatch_group_t group = *(dispatch_group_t *)object;
        if (*(void *)object)
        {
LABEL_26:
          dispatch_retain(v22);
          if (group) {
            dispatch_group_enter(group);
          }
        }
      }
      else
      {
        uint64_t v21 = *v11;
        BOOL v22 = *(NSObject **)object;
        dispatch_group_t group = *(dispatch_group_t *)object;
        if (*(void *)object) {
          goto LABEL_26;
        }
      }
      (*(void (**)(uint64_t, dispatch_group_t *))(*(void *)v21 + 48))(v21, &group);
      if (group)
      {
        dispatch_group_leave(group);
        if (group) {
          dispatch_release(group);
        }
      }
      if (v22)
      {
        dispatch_group_leave(v22);
        dispatch_release(v22);
      }
      v11 += 2;
      if (v11 == v12) {
        goto LABEL_33;
      }
    }
    uint64_t v19 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v16 | 7) != 0x17) {
      uint64_t v19 = v16 | 7;
    }
    uint64_t v20 = v19 + 1;
    p_dst = (std::string *)operator new(v19 + 1);
    __dst.__r_.__value_.__l.__size_ = v17;
    __dst.__r_.__value_.__r.__words[2] = v20 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
LABEL_21:
    memmove(p_dst, v15, v17);
    goto LABEL_22;
  }
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)long long buf = 0;
    _os_log_debug_impl(&dword_1C5767000, v5, OS_LOG_TYPE_DEBUG, "#D Server is down; ignoring sleep request", buf, 2u);
  }
LABEL_62:
  BOOL v40 = v2[1];
  if (v40)
  {
    dispatch_group_leave(v40);
    xpc_object_t v41 = v2[1];
    if (v41) {
      dispatch_release(v41);
    }
  }
  operator delete(v2);
  unint64_t v42 = (std::__shared_weak_count *)v1[2];
  if (v42 && !atomic_fetch_add(&v42->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
    std::__shared_weak_count::__release_weak(v42);
  }
  operator delete(v1);
}

void sub_1C58F4CF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::__shared_weak_count *a9, atomic_ullong *a10, void *a11, void *a12, uint64_t a13, uint64_t a14, dispatch_group_t group, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void **__p,uint64_t a31)
{
  if (!atomic_fetch_add(&v31->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
    std::__shared_weak_count::__release_weak(v31);
  }
  if (__p)
  {
    xpc_object_t v34 = v32;
    xpc_object_t v35 = __p;
    if (v32 != __p)
    {
      do
      {
        if (*((char *)v34 - 1) < 0) {
          operator delete(*(v34 - 3));
        }
        v34 -= 3;
      }
      while (v34 != __p);
      xpc_object_t v35 = __p;
    }
    operator delete(v35);
  }
  if (!atomic_fetch_add(a10, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))a9->__on_zero_shared)(a9);
    std::__shared_weak_count::__release_weak(a9);
  }
  uint64_t v36 = a11[1];
  if (v36)
  {
    dispatch_group_leave(v36);
    xpc_object_t v37 = a11[1];
    if (v37) {
      dispatch_release(v37);
    }
  }
  operator delete(a11);
  uint64_t v38 = (std::__shared_weak_count *)a12[2];
  if (v38)
  {
    if (!atomic_fetch_add(&v38->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  operator delete(a12);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<ctu::TrackedGroup>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20FC5C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ctu::TrackedGroup>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20FC5C0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_emplace<ctu::TrackedGroup>::__on_zero_shared(void *a1)
{
  uint64_t v2 = a1[4];
  if (v2)
  {
    uint64_t v3 = a1[5];
    unsigned __int8 v4 = (void *)a1[4];
    if (v3 != v2)
    {
      do
      {
        uint64_t v5 = *(std::__shared_weak_count **)(v3 - 8);
        if (v5) {
          std::__shared_weak_count::__release_weak(v5);
        }
        v3 -= 16;
      }
      while (v3 != v2);
      unsigned __int8 v4 = (void *)a1[4];
    }
    a1[5] = v2;
    operator delete(v4);
  }
  uint64_t v6 = a1[3];
  if (v6)
  {
    dispatch_release(v6);
  }
}

void ctu::TrackedGroup::fork(NSObject **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  int v8 = dispatch_group_create();
  uint64_t v9 = v8;
  *a1 = v8;
  if (v8)
  {
    dispatch_retain(v8);
    dispatch_group_enter(v9);
    dispatch_release(v9);
  }
  size_t v10 = (char *)operator new(0x30uLL);
  *((void *)v10 + 1) = 0;
  *((void *)v10 + 2) = 0;
  *(void *)size_t v10 = &unk_1F20FC610;
  *(_OWORD *)(v10 + 24) = *(_OWORD *)a3;
  *((void *)v10 + 5) = *(void *)(a3 + 16);
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)a3 = 0;
  *(void *)&long long v37 = v10 + 24;
  *((void *)&v37 + 1) = v10;
  uint64_t v11 = *(NSObject **)a2;
  if (*(void *)a2)
  {
    dispatch_retain(*(dispatch_object_t *)a2);
    dispatch_group_enter(v11);
  }
  global_queue = dispatch_get_global_queue(0, 0);
  int v13 = global_queue;
  if (global_queue) {
    dispatch_retain(global_queue);
  }
  *(void *)&long long v38 = v10 + 24;
  *((void *)&v38 + 1) = v10;
  atomic_fetch_add_explicit((atomic_ullong *volatile)v10 + 1, 1uLL, memory_order_relaxed);
  group[0] = v11;
  if (v11)
  {
    dispatch_retain(v11);
    dispatch_group_enter(v11);
  }
  uint64_t v14 = *(void *)(a4 + 8);
  group[1] = *(dispatch_group_t *)a4;
  uint64_t v40 = v14;
  uint64_t v15 = a4 + 16;
  uint64_t v16 = *(void *)(a4 + 40);
  if (v16)
  {
    if (v16 == v15)
    {
      unint64_t v42 = v41;
      (*(void (**)(uint64_t, void *))(*(void *)v15 + 24))(a4 + 16, v41);
    }
    else
    {
      unint64_t v42 = *(void **)(a4 + 40);
      *(void *)(a4 + 40) = 0;
    }
  }
  else
  {
    unint64_t v42 = 0;
  }
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  uint64_t v17 = *(void *)(a4 + 40);
  *(void *)(a4 + 40) = 0;
  if (v17 == v15)
  {
    (*(void (**)(uint64_t))(*(void *)v15 + 32))(a4 + 16);
  }
  else if (v17)
  {
    (*(void (**)(uint64_t))(*(void *)v17 + 40))(v17);
  }
  size_t v18 = (char *)operator new(0x48uLL);
  uint64_t v19 = v18;
  long long v20 = *(_OWORD *)group;
  *(_OWORD *)size_t v18 = v38;
  *((_OWORD *)v18 + 1) = v20;
  uint64_t v21 = v42;
  *((void *)v18 + 4) = v40;
  if (v21)
  {
    if (v21 == v41)
    {
      *((void *)v18 + 8) = v18 + 40;
      (*(void (**)(void *))(v41[0] + 24))(v41);
    }
    else
    {
      *((void *)v18 + 8) = v21;
      unint64_t v42 = 0;
    }
  }
  else
  {
    *((void *)v18 + 8) = 0;
  }
  group[1] = 0;
  uint64_t v40 = 0;
  BOOL v22 = v42;
  unint64_t v42 = 0;
  if (v22 == v41)
  {
    (*(void (**)(void *))(v41[0] + 32))(v41);
  }
  else if (v22)
  {
    (*(void (**)(void *))(*v22 + 40))(v22);
  }
  dispatch_group_notify_f(v9, v13, v19, (dispatch_function_t)dispatch::detail::group_notify<ctu::TrackedGroup::fork(std::string,ctu::os::signpost_interval)::{lambda(void)#1}>(dispatch_group_s *,dispatch_queue_s *,ctu::TrackedGroup::fork(std::string,ctu::os::signpost_interval)::{lambda(void)#1} &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke);
  ctu::os::signpost_interval::~signpost_interval((ctu::os::signpost_interval *)&group[1]);
  if (v13) {
    dispatch_release(v13);
  }
  uint64_t v24 = *(char **)(a2 + 16);
  unint64_t v23 = *(void *)(a2 + 24);
  if ((unint64_t)v24 >= v23)
  {
    uint64_t v26 = *(char **)(a2 + 8);
    uint64_t v27 = (v24 - v26) >> 4;
    unint64_t v28 = v27 + 1;
    if ((unint64_t)(v27 + 1) >> 60) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v29 = v23 - (void)v26;
    if (v29 >> 3 > v28) {
      unint64_t v28 = v29 >> 3;
    }
    if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v30 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v30 = v28;
    }
    if (v30 >> 60) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    uint64_t v31 = (char *)operator new(16 * v30);
    xpc_object_t v32 = &v31[16 * v27];
    *(_OWORD *)xpc_object_t v32 = v37;
    if (*((void *)&v37 + 1))
    {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v37 + 1) + 16), 1uLL, memory_order_relaxed);
      uint64_t v26 = *(char **)(a2 + 8);
      uint64_t v24 = *(char **)(a2 + 16);
    }
    long long v33 = &v31[16 * v30];
    dispatch_time_t v25 = v32 + 16;
    if (v24 == v26)
    {
      *(void *)(a2 + 8) = v32;
      *(void *)(a2 + 16) = v25;
      *(void *)(a2 + 24) = v33;
    }
    else
    {
      do
      {
        long long v34 = *((_OWORD *)v24 - 1);
        v24 -= 16;
        *((_OWORD *)v32 - 1) = v34;
        v32 -= 16;
        *(void *)uint64_t v24 = 0;
        *((void *)v24 + 1) = 0;
      }
      while (v24 != v26);
      uint64_t v26 = *(char **)(a2 + 8);
      xpc_object_t v35 = *(char **)(a2 + 16);
      *(void *)(a2 + 8) = v32;
      *(void *)(a2 + 16) = v25;
      *(void *)(a2 + 24) = v33;
      while (v35 != v26)
      {
        uint64_t v36 = (std::__shared_weak_count *)*((void *)v35 - 1);
        if (v36) {
          std::__shared_weak_count::__release_weak(v36);
        }
        v35 -= 16;
      }
    }
    if (v26) {
      operator delete(v26);
    }
  }
  else
  {
    *(void *)uint64_t v24 = v37;
    *((void *)v24 + 1) = v10;
    if (v10) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)v10 + 2, 1uLL, memory_order_relaxed);
    }
    dispatch_time_t v25 = v24 + 16;
  }
  *(void *)(a2 + 16) = v25;
  if (v11)
  {
    dispatch_group_leave(v11);
    dispatch_release(v11);
  }
  if (*((void *)&v37 + 1))
  {
    if (!atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v37 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      (*(void (**)(void))(**((void **)&v37 + 1) + 16))(*((void *)&v37 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v37 + 1));
    }
  }
}

void sub_1C58F54F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void *ctu::TrackedGroup::fork(std::string,ctu::os::signpost_interval)::{lambda(void)#1}::~signpost_interval(void *a1)
{
  ctu::os::signpost_interval::~signpost_interval((ctu::os::signpost_interval *)(a1 + 3));
  uint64_t v2 = a1[2];
  if (v2)
  {
    dispatch_group_leave(v2);
    uint64_t v3 = a1[2];
    if (v3) {
      dispatch_release(v3);
    }
  }
  unsigned __int8 v4 = (std::__shared_weak_count *)a1[1];
  if (!v4 || atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void std::__shared_ptr_emplace<std::string>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20FC610;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::string>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20FC610;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_emplace<std::string>::__on_zero_shared(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
}

void dispatch::detail::group_notify<ctu::TrackedGroup::fork(std::string,ctu::os::signpost_interval)::{lambda(void)#1}>(dispatch_group_s *,dispatch_queue_s *,ctu::TrackedGroup::fork(std::string,ctu::os::signpost_interval)::{lambda(void)#1} &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke(void *a1)
{
  if (a1)
  {
    ctu::os::signpost_interval::~signpost_interval((ctu::os::signpost_interval *)(a1 + 3));
    uint64_t v2 = a1[2];
    if (v2)
    {
      dispatch_group_leave(v2);
      uint64_t v3 = a1[2];
      if (v3) {
        dispatch_release(v3);
      }
    }
    unsigned __int8 v4 = (std::__shared_weak_count *)a1[1];
    if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
      uint64_t v5 = a1;
    }
    else
    {
      uint64_t v5 = a1;
    }
    operator delete(v5);
  }
}

void ctu::os::signpost_interval::~signpost_interval(ctu::os::signpost_interval *this)
{
  uint64_t v2 = *((void *)this + 5);
  if (v2 && *(void *)this)
  {
    uint64_t v3 = *((void *)this + 1);
    uint64_t v8 = *(void *)this;
    uint64_t v9 = v3;
    (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v2 + 48))(v2, &v9, &v8);
  }
  unsigned __int8 v4 = (void *)*((void *)this + 1);
  if (v4) {
    os_release(v4);
  }
  uint64_t v5 = (char *)this + 16;
  *((void *)this + 1) = 0;
  uint64_t v6 = (ctu::os::signpost_interval *)*((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v6 == (ctu::os::signpost_interval *)((char *)this + 16))
  {
    (*(void (**)(char *))(*(void *)v5 + 32))((char *)this + 16);
    uint64_t v7 = (char *)*((void *)this + 5);
    *(void *)this = 0;
    if (v7 != v5) {
      goto LABEL_9;
    }
LABEL_13:
    (*(void (**)(char *))(*(void *)v5 + 32))((char *)this + 16);
    return;
  }
  if (!v6)
  {
    *(void *)this = 0;
    return;
  }
  (*(void (**)(ctu::os::signpost_interval *))(*(void *)v6 + 40))(v6);
  uint64_t v7 = (char *)*((void *)this + 5);
  *(void *)this = 0;
  if (v7 == v5) {
    goto LABEL_13;
  }
LABEL_9:
  if (v7) {
    (*(void (**)(char *))(*(void *)v7 + 40))(v7);
  }
}

std::string *ctu::join<std::__wrap_iter<std::string *>>(std::string *__dst, std::string *a2, long long *a3)
{
  __dst->__r_.__value_.__r.__words[0] = 0;
  __dst->__r_.__value_.__l.__size_ = 0;
  __dst->__r_.__value_.__r.__words[2] = 0;
  if (a2 != (std::string *)a3)
  {
    uint64_t v5 = __dst;
    if (a2 != __dst)
    {
      if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
      {
        std::string __dst = (std::string *)std::string::__assign_no_alias<true>(__dst, a2->__r_.__value_.__l.__data_, a2->__r_.__value_.__l.__size_);
      }
      else
      {
        long long v6 = *(_OWORD *)&a2->__r_.__value_.__l.__data_;
        __dst->__r_.__value_.__r.__words[2] = a2->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__dst->__r_.__value_.__l.__data_ = v6;
      }
    }
    if (",")
    {
      for (uint64_t i = a2 + 1; i != (std::string *)a3; ++i)
      {
        HIBYTE(v19) = 1;
        memmove(__s, ",", 1uLL);
        __s[1] = 0;
        if (v19 >= 0) {
          uint64_t v15 = __s;
        }
        else {
          uint64_t v15 = *(std::string::value_type **)__s;
        }
        if (v19 >= 0) {
          std::string::size_type v16 = HIBYTE(v19);
        }
        else {
          std::string::size_type v16 = v18;
        }
        std::string::append(v5, v15, v16);
        if (SHIBYTE(v19) < 0) {
          operator delete(*(void **)__s);
        }
        int v12 = SHIBYTE(i->__r_.__value_.__r.__words[2]);
        if (v12 >= 0) {
          int v13 = (const std::string::value_type *)i;
        }
        else {
          int v13 = (const std::string::value_type *)i->__r_.__value_.__r.__words[0];
        }
        if (v12 >= 0) {
          std::string::size_type size = HIBYTE(i->__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = i->__r_.__value_.__l.__size_;
        }
        std::string __dst = std::string::append(v5, v13, size);
      }
    }
    else
    {
      for (j = a2 + 1; j != (std::string *)a3; ++j)
      {
        *(void *)__s = 0;
        std::string::size_type v18 = 0;
        uint64_t v19 = 0;
        std::string::append(v5, __s, 0);
        if (SHIBYTE(v19) < 0) {
          operator delete(*(void **)__s);
        }
        int v8 = SHIBYTE(j->__r_.__value_.__r.__words[2]);
        if (v8 >= 0) {
          uint64_t v9 = (const std::string::value_type *)j;
        }
        else {
          uint64_t v9 = (const std::string::value_type *)j->__r_.__value_.__r.__words[0];
        }
        if (v8 >= 0) {
          std::string::size_type v10 = HIBYTE(j->__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v10 = j->__r_.__value_.__l.__size_;
        }
        std::string __dst = std::string::append(v5, v9, v10);
      }
    }
  }
  return __dst;
}

void sub_1C58F5B80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (*(char *)(v15 + 23) < 0)
  {
    operator delete(*(void **)v15);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void dispatch::async<void ctu::SharedSynchronizable<ServiceManager>::execute_wrapped<ServiceManager::wake(dispatch::group_session)::$_0>(ServiceManager::wake(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<ServiceManager::wake(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<ServiceManager::wake(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t v1 = a1;
  uint64_t v58 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *a1;
  uint64_t v3 = **a1;
  unsigned __int8 v4 = atomic_load((unsigned __int8 *)(v3 + 192));
  uint64_t v5 = *(NSObject **)(v3 + 40);
  if ((v4 & 1) == 0)
  {
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = (uint64_t)(*(void *)(v3 + 152) - *(void *)(v3 + 144)) >> 4;
      *(_DWORD *)long long buf = 134217984;
      *(void *)&uint8_t buf[4] = v6;
      _os_log_impl(&dword_1C5767000, v5, OS_LOG_TYPE_DEFAULT, "#I Request %zd services to wake", buf, 0xCu);
    }
    xpc_object_t v47 = v2;
    xpc_object_t v48 = v1;
    uint64_t v7 = dispatch_group_create();
    int v8 = (std::__shared_weak_count *)operator new(0x38uLL);
    uint64_t v9 = &v8->__vftable;
    v8->__shared_owners_ = 0;
    xpc_object_t v45 = v8;
    p_shared_owners = &v8->__shared_owners_;
    v8->__shared_weak_owners_ = 0;
    v8->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20FC5C0;
    v8[1].__vftable = (std::__shared_weak_count_vtbl *)v7;
    std::string::size_type v10 = (NSObject **)&v8[1];
    if (v7)
    {
      dispatch_retain(v7);
      v9[4] = 0;
      v9[5] = 0;
      v9[6] = 0;
      dispatch_release(v7);
      uint64_t v11 = *(uint64_t **)(v3 + 144);
      int v12 = *(uint64_t **)(v3 + 152);
      if (v11 != v12) {
        goto LABEL_12;
      }
LABEL_33:
      unint64_t v23 = *v10;
      uint64_t v24 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 104))(v3);
      dispatch_time_t v25 = dispatch_time(0, 2000000000 * v24);
      if (!dispatch_group_wait(v23, v25)) {
        goto LABEL_58;
      }
      memset(buf, 0, sizeof(buf));
      *(void *)&long long v56 = 0;
      shared_owners = (uint64_t *)v45[1].__shared_owners_;
      shared_weak_owners = (uint64_t *)v45[1].__shared_weak_owners_;
      if (shared_owners == shared_weak_owners)
      {
        xpc_object_t v35 = 0;
        uint64_t v36 = *(NSObject **)(v3 + 40);
        if (!os_log_type_enabled(v36, OS_LOG_TYPE_ERROR)) {
          goto LABEL_50;
        }
      }
      else
      {
        do
        {
          unint64_t v28 = (std::__shared_weak_count *)shared_owners[1];
          if (v28)
          {
            uint64_t v29 = std::__shared_weak_count::lock(v28);
            if (v29)
            {
              unint64_t v30 = v29;
              uint64_t v31 = *shared_owners;
              if (*shared_owners)
              {
                xpc_object_t v32 = *(_OWORD **)&buf[8];
                if (*(void *)&buf[8] >= (unint64_t)v56)
                {
                  long long v34 = std::vector<std::string>::__emplace_back_slow_path<std::string const&>((char **)buf, v31);
                }
                else
                {
                  if (*(char *)(v31 + 23) < 0)
                  {
                    std::string::__init_copy_ctor_external(*(std::string **)&buf[8], *(const std::string::value_type **)v31, *(void *)(v31 + 8));
                  }
                  else
                  {
                    long long v33 = *(_OWORD *)v31;
                    *(void *)(*(void *)&buf[8] + 16) = *(void *)(v31 + 16);
                    _OWORD *v32 = v33;
                  }
                  long long v34 = (std::string *)((char *)v32 + 24);
                }
                *(void *)&uint8_t buf[8] = v34;
              }
              if (!atomic_fetch_add(&v30->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
                std::__shared_weak_count::__release_weak(v30);
              }
            }
          }
          shared_owners += 2;
        }
        while (shared_owners != shared_weak_owners);
        xpc_object_t v35 = *(std::string **)buf;
        uint64_t v36 = *(NSObject **)(v3 + 40);
        if (!os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
        {
LABEL_50:
          if (v35)
          {
LABEL_51:
            long long v37 = *(std::string **)&buf[8];
            long long v38 = v35;
            if (*(std::string **)&buf[8] != v35)
            {
              do
              {
                if (SHIBYTE(v37[-1].__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v37[-1].__r_.__value_.__l.__data_);
                }
                --v37;
              }
              while (v37 != v35);
              long long v38 = *(std::string **)buf;
            }
            *(void *)&uint8_t buf[8] = v35;
            operator delete(v38);
          }
LABEL_58:
          long long v39 = *(NSObject **)(v3 + 40);
          uint64_t v2 = v47;
          uint64_t v1 = v48;
          if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)long long buf = 0;
            _os_log_impl(&dword_1C5767000, v39, OS_LOG_TYPE_DEFAULT, "#I All services acknowledged for wake request", buf, 2u);
          }
          if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
            std::__shared_weak_count::__release_weak(v45);
          }
          goto LABEL_62;
        }
      }
      uint64_t v43 = *(void *)&buf[8];
      ctu::join<std::__wrap_iter<std::string *>>(&__p, v35, *(long long **)&buf[8]);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)dispatch_object_t object = 134218242;
      *(void *)&object[4] = 0xAAAAAAAAAAAAAAABLL * ((v43 - (uint64_t)v35) >> 3);
      __int16 v53 = 2080;
      xpc_object_t v54 = p_p;
      _os_log_error_impl(&dword_1C5767000, v36, OS_LOG_TYPE_ERROR, "Wake TIMEOUT: %zd clients failed to complete wake request: %s", object, 0x16u);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      xpc_object_t v35 = *(std::string **)buf;
      if (!*(void *)buf) {
        goto LABEL_58;
      }
      goto LABEL_51;
    }
    v8[1].__shared_owners_ = 0;
    v8[1].__shared_weak_owners_ = 0;
    v8[2].__vftable = 0;
    uint64_t v11 = *(uint64_t **)(v3 + 144);
    int v12 = *(uint64_t **)(v3 + 152);
    if (v11 == v12) {
      goto LABEL_33;
    }
    while (1)
    {
LABEL_12:
      int v13 = *(NSObject **)(v3 + 40);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v14 = (*(uint64_t (**)(void))(*(void *)*v11 + 16))();
        *(_DWORD *)long long buf = 136315138;
        *(void *)&uint8_t buf[4] = v14;
        _os_log_impl(&dword_1C5767000, v13, OS_LOG_TYPE_DEFAULT, "#I Requesting '%s' to wake", buf, 0xCu);
      }
      *(void *)dispatch_object_t object = 0xAAAAAAAAAAAAAAAALL;
      uint64_t v15 = (const char *)(*(uint64_t (**)(void))(*(void *)*v11 + 16))();
      size_t v16 = strlen(v15);
      if (v16 >= 0x7FFFFFFFFFFFFFF8) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      std::string::size_type v17 = v16;
      if (v16 >= 0x17) {
        break;
      }
      *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v16;
      p_dst = &__dst;
      if (v16) {
        goto LABEL_21;
      }
LABEL_22:
      p_dst->__r_.__value_.__s.__data_[v17] = 0;
      std::string __p = __dst;
      memset(&__dst, 0, sizeof(__dst));
      *(_OWORD *)long long buf = 0u;
      long long v56 = 0u;
      long long v57 = 0u;
      ctu::TrackedGroup::fork((NSObject **)object, (uint64_t)v10, (uint64_t)&__p, (uint64_t)buf);
      ctu::os::signpost_interval::~signpost_interval((ctu::os::signpost_interval *)buf);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        uint64_t v21 = *v11;
        BOOL v22 = *(NSObject **)object;
        dispatch_group_t group = *(dispatch_group_t *)object;
        if (*(void *)object)
        {
LABEL_26:
          dispatch_retain(v22);
          if (group) {
            dispatch_group_enter(group);
          }
        }
      }
      else
      {
        uint64_t v21 = *v11;
        BOOL v22 = *(NSObject **)object;
        dispatch_group_t group = *(dispatch_group_t *)object;
        if (*(void *)object) {
          goto LABEL_26;
        }
      }
      (*(void (**)(uint64_t, dispatch_group_t *))(*(void *)v21 + 56))(v21, &group);
      if (group)
      {
        dispatch_group_leave(group);
        if (group) {
          dispatch_release(group);
        }
      }
      if (v22)
      {
        dispatch_group_leave(v22);
        dispatch_release(v22);
      }
      v11 += 2;
      if (v11 == v12) {
        goto LABEL_33;
      }
    }
    uint64_t v19 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v16 | 7) != 0x17) {
      uint64_t v19 = v16 | 7;
    }
    uint64_t v20 = v19 + 1;
    p_dst = (std::string *)operator new(v19 + 1);
    __dst.__r_.__value_.__l.__size_ = v17;
    __dst.__r_.__value_.__r.__words[2] = v20 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
LABEL_21:
    memmove(p_dst, v15, v17);
    goto LABEL_22;
  }
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)long long buf = 0;
    _os_log_debug_impl(&dword_1C5767000, v5, OS_LOG_TYPE_DEBUG, "#D Server is down; ignoring wake request", buf, 2u);
  }
LABEL_62:
  uint64_t v40 = v2[1];
  if (v40)
  {
    dispatch_group_leave(v40);
    xpc_object_t v41 = v2[1];
    if (v41) {
      dispatch_release(v41);
    }
  }
  operator delete(v2);
  unint64_t v42 = (std::__shared_weak_count *)v1[2];
  if (v42 && !atomic_fetch_add(&v42->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
    std::__shared_weak_count::__release_weak(v42);
  }
  operator delete(v1);
}

void sub_1C58F62CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::__shared_weak_count *a9, atomic_ullong *a10, void *a11, void *a12, uint64_t a13, uint64_t a14, dispatch_group_t group, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void **__p,uint64_t a31)
{
  if (!atomic_fetch_add(&v31->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
    std::__shared_weak_count::__release_weak(v31);
  }
  if (__p)
  {
    long long v34 = v32;
    xpc_object_t v35 = __p;
    if (v32 != __p)
    {
      do
      {
        if (*((char *)v34 - 1) < 0) {
          operator delete(*(v34 - 3));
        }
        v34 -= 3;
      }
      while (v34 != __p);
      xpc_object_t v35 = __p;
    }
    operator delete(v35);
  }
  if (!atomic_fetch_add(a10, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))a9->__on_zero_shared)(a9);
    std::__shared_weak_count::__release_weak(a9);
  }
  uint64_t v36 = a11[1];
  if (v36)
  {
    dispatch_group_leave(v36);
    long long v37 = a11[1];
    if (v37) {
      dispatch_release(v37);
    }
  }
  operator delete(a11);
  long long v38 = (std::__shared_weak_count *)a12[2];
  if (v38)
  {
    if (!atomic_fetch_add(&v38->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  operator delete(a12);
  _Unwind_Resume(a1);
}

void dispatch::async<void ctu::SharedSynchronizable<ServiceManager>::execute_wrapped<ServiceManager::initializeGlobalServices(void)::$_0>(ServiceManager::initializeGlobalServices(void)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<ServiceManager::initializeGlobalServices(void)::$_0,dispatch_queue_s *::default_delete<ServiceManager::initializeGlobalServices(void)::$_0>>)::{lambda(void *)#1}::__invoke(void **a1)
{
  uint64_t v79 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (void **)*a1;
  uint64_t v61 = (void *)**a1;
  uint64_t v3 = v61[5];
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = (uint64_t)(v61[16] - v61[15]) >> 4;
    *(_DWORD *)long long buf = 134217984;
    *(void *)&uint8_t buf[4] = v4;
    _os_log_impl(&dword_1C5767000, v3, OS_LOG_TYPE_DEFAULT, "#I Initializing %zd global services", buf, 0xCu);
  }
  uint64_t v5 = dispatch_group_create();
  uint64_t v58 = v2;
  char v59 = a1;
  uint64_t v6 = operator new(0x38uLL);
  uint64_t v7 = v6;
  v6[1] = 0;
  long long v57 = v6 + 1;
  v6[2] = 0;
  *uint64_t v6 = &unk_1F20FC5C0;
  v6[3] = v5;
  int v8 = (NSObject **)(v6 + 3);
  uint64_t v60 = (std::__shared_weak_count *)v6;
  if (!v5)
  {
    v6[4] = 0;
    v6[5] = 0;
    v6[6] = 0;
    uint64_t v9 = (uint64_t *)v61[15];
    std::string::size_type v10 = (uint64_t *)v61[16];
    if (v9 == v10) {
      goto LABEL_30;
    }
    while (1)
    {
LABEL_9:
      uint64_t v11 = v61[5];
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v12 = (*(uint64_t (**)(void))(*(void *)*v9 + 16))();
        *(_DWORD *)long long buf = 136315138;
        *(void *)&uint8_t buf[4] = v12;
        _os_log_impl(&dword_1C5767000, v11, OS_LOG_TYPE_DEFAULT, "#I Initializing '%s'", buf, 0xCu);
      }
      object.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
      int v13 = (const char *)(*(uint64_t (**)(void))(*(void *)*v9 + 16))();
      size_t v14 = strlen(v13);
      if (v14 > 0x7FFFFFFFFFFFFFF7) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      size_t v15 = v14;
      if (v14 >= 0x17) {
        break;
      }
      HIBYTE(v65) = v14;
      p_dst = &__dst;
      if (v14) {
        goto LABEL_18;
      }
LABEL_19:
      *((unsigned char *)p_dst + v15) = 0;
      *(_OWORD *)std::string __p = __dst;
      unint64_t v67 = (void *)v65;
      long long __dst = 0uLL;
      unint64_t v65 = 0;
      *(_OWORD *)long long buf = 0u;
      long long v71 = 0u;
      long long v72 = 0u;
      ctu::TrackedGroup::fork((NSObject **)&object, (uint64_t)v8, (uint64_t)__p, (uint64_t)buf);
      ctu::os::signpost_interval::~signpost_interval((ctu::os::signpost_interval *)buf);
      if (SHIBYTE(v67) < 0)
      {
        operator delete(__p[0]);
        uint64_t v19 = *v9;
        uint64_t v20 = object.__r_.__value_.__r.__words[0];
        dispatch_group_t group = (dispatch_group_t)object.__r_.__value_.__r.__words[0];
        if (object.__r_.__value_.__r.__words[0])
        {
LABEL_23:
          dispatch_retain(v20);
          if (group) {
            dispatch_group_enter(group);
          }
        }
      }
      else
      {
        uint64_t v19 = *v9;
        uint64_t v20 = object.__r_.__value_.__r.__words[0];
        dispatch_group_t group = (dispatch_group_t)object.__r_.__value_.__r.__words[0];
        if (object.__r_.__value_.__r.__words[0]) {
          goto LABEL_23;
        }
      }
      (*(void (**)(uint64_t, dispatch_group_t *))(*(void *)v19 + 32))(v19, &group);
      if (group)
      {
        dispatch_group_leave(group);
        if (group) {
          dispatch_release(group);
        }
      }
      if (v20)
      {
        dispatch_group_leave(v20);
        dispatch_release(v20);
      }
      v9 += 2;
      if (v9 == v10) {
        goto LABEL_30;
      }
    }
    uint64_t v17 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v14 | 7) != 0x17) {
      uint64_t v17 = v14 | 7;
    }
    uint64_t v18 = v17 + 1;
    p_dst = (long long *)operator new(v17 + 1);
    *((void *)&__dst + 1) = v15;
    unint64_t v65 = v18 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_18:
    memmove(p_dst, v13, v15);
    goto LABEL_19;
  }
  dispatch_retain(v5);
  v7[4] = 0;
  v7[5] = 0;
  void v7[6] = 0;
  dispatch_release(v5);
  uint64_t v9 = (uint64_t *)v61[15];
  std::string::size_type v10 = (uint64_t *)v61[16];
  if (v9 != v10) {
    goto LABEL_9;
  }
LABEL_30:
  uint64_t v21 = *v8;
  uint64_t v22 = (*(uint64_t (**)(void *))(*v61 + 88))(v61);
  dispatch_time_t v23 = dispatch_time(0, 1000000000 * v22);
  uint64_t v24 = v59;
  dispatch_time_t v25 = v60;
  if (!dispatch_group_wait(v21, v23)) {
    goto LABEL_61;
  }
  __p[0] = 0;
  __p[1] = 0;
  unint64_t v67 = 0;
  shared_owners = (uint64_t *)v60[1].__shared_owners_;
  for (uint64_t i = (uint64_t *)v60[1].__shared_weak_owners_; shared_owners != i; shared_owners += 2)
  {
    unint64_t v28 = (std::__shared_weak_count *)shared_owners[1];
    if (v28)
    {
      uint64_t v29 = std::__shared_weak_count::lock(v28);
      if (v29)
      {
        unint64_t v30 = v29;
        uint64_t v31 = *shared_owners;
        if (*shared_owners)
        {
          xpc_object_t v32 = __p[1];
          if (__p[1] >= v67)
          {
            long long v34 = std::vector<std::string>::__emplace_back_slow_path<std::string const&>((char **)__p, v31);
          }
          else
          {
            if (*(char *)(v31 + 23) < 0)
            {
              std::string::__init_copy_ctor_external((std::string *)__p[1], *(const std::string::value_type **)v31, *(void *)(v31 + 8));
            }
            else
            {
              long long v33 = *(_OWORD *)v31;
              *((void *)__p[1] + 2) = *(void *)(v31 + 16);
              _OWORD *v32 = v33;
            }
            long long v34 = (std::string *)((char *)v32 + 24);
          }
          __p[1] = v34;
        }
        if (!atomic_fetch_add(&v30->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
          std::__shared_weak_count::__release_weak(v30);
        }
      }
    }
  }
  unint64_t v78 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v35 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v35 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v77[7] = v35;
  v77[8] = v35;
  v77[5] = v35;
  v77[6] = v35;
  v77[3] = v35;
  v77[4] = v35;
  v77[1] = v35;
  v77[2] = v35;
  long long v76 = v35;
  v77[0] = v35;
  long long v74 = v35;
  long long v75 = v35;
  long long v72 = v35;
  long long v73 = v35;
  *(_OWORD *)long long buf = v35;
  long long v71 = v35;
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)buf);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(buf, (uint64_t)"Initialization TIMEOUT: ", 24);
  uint64_t v36 = (void *)std::ostream::operator<<();
  long long v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)" clients failed to complete init stage: ", 40);
  p_std::string object = &object;
  ctu::join<std::__wrap_iter<std::string *>>(&object, (std::string *)__p[0], (long long *)__p[1]);
  if ((object.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    p_std::string object = (std::string *)object.__r_.__value_.__r.__words[0];
  }
  size_t v39 = strlen((const char *)p_object);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)p_object, v39);
  if (SHIBYTE(object.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(object.__r_.__value_.__l.__data_);
  }
  uint64_t v40 = v61[5];
  if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
  {
    if ((BYTE8(v76) & 0x10) != 0)
    {
      uint64_t v51 = v76;
      if ((unint64_t)v76 < *((void *)&v73 + 1))
      {
        *(void *)&long long v76 = *((void *)&v73 + 1);
        uint64_t v51 = *((void *)&v73 + 1);
      }
      xpc_object_t v52 = (const void **)&v73;
    }
    else
    {
      if ((BYTE8(v76) & 8) == 0)
      {
        std::string::size_type v49 = 0;
        *((unsigned char *)&object.__r_.__value_.__s + 23) = 0;
        xpc_object_t v50 = &object;
LABEL_89:
        v50->__r_.__value_.__s.__data_[v49] = 0;
        long long v56 = &object;
        if ((object.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          long long v56 = (std::string *)object.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)uint64_t v68 = 136315138;
        uint64_t v69 = v56;
        _os_log_error_impl(&dword_1C5767000, v40, OS_LOG_TYPE_ERROR, "%s", v68, 0xCu);
        if (SHIBYTE(object.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(object.__r_.__value_.__l.__data_);
        }
        dispatch_time_t v25 = v60;
        goto LABEL_51;
      }
      xpc_object_t v52 = (const void **)&v71 + 1;
      uint64_t v51 = *((void *)&v72 + 1);
    }
    __int16 v53 = *v52;
    std::string::size_type v49 = v51 - (void)*v52;
    if (v49 > 0x7FFFFFFFFFFFFFF7) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    if (v49 >= 0x17)
    {
      uint64_t v54 = (v49 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v49 | 7) != 0x17) {
        uint64_t v54 = v49 | 7;
      }
      uint64_t v55 = v54 + 1;
      xpc_object_t v50 = (std::string *)operator new(v54 + 1);
      object.__r_.__value_.__l.__size_ = v49;
      object.__r_.__value_.__r.__words[2] = v55 | 0x8000000000000000;
      object.__r_.__value_.__r.__words[0] = (std::string::size_type)v50;
    }
    else
    {
      *((unsigned char *)&object.__r_.__value_.__s + 23) = v51 - *(unsigned char *)v52;
      xpc_object_t v50 = &object;
      if (!v49) {
        goto LABEL_88;
      }
    }
    memmove(v50, v53, v49);
LABEL_88:
    uint64_t v24 = v59;
    goto LABEL_89;
  }
LABEL_51:
  *(void *)long long buf = *MEMORY[0x1E4FBA418];
  *(void *)&buf[*(void *)(*(void *)buf - 24)] = *(void *)(MEMORY[0x1E4FBA418] + 24);
  *(void *)&uint8_t buf[8] = MEMORY[0x1E4FBA470] + 16;
  if (SHIBYTE(v75) < 0) {
    operator delete(*((void **)&v74 + 1));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1C8791FB0](v77);
  xpc_object_t v41 = (void **)__p[0];
  if (__p[0])
  {
    unint64_t v42 = (void **)__p[1];
    uint64_t v43 = __p[0];
    if (__p[1] != __p[0])
    {
      do
      {
        if (*((char *)v42 - 1) < 0) {
          operator delete(*(v42 - 3));
        }
        v42 -= 3;
      }
      while (v42 != v41);
      uint64_t v43 = __p[0];
    }
    __p[1] = v41;
    operator delete(v43);
  }
LABEL_61:
  xpc_object_t v44 = v61[5];
  if (os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_1C5767000, v44, OS_LOG_TYPE_DEFAULT, "#I All global services initialized", buf, 2u);
    xpc_object_t v45 = v58;
    if (!atomic_fetch_add(v57, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_63;
    }
LABEL_66:
    xpc_object_t v46 = v45[1];
    if (!v46) {
      goto LABEL_69;
    }
    goto LABEL_67;
  }
  xpc_object_t v45 = v58;
  if (atomic_fetch_add(v57, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_66;
  }
LABEL_63:
  ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
  std::__shared_weak_count::__release_weak(v25);
  xpc_object_t v46 = v45[1];
  if (!v46) {
    goto LABEL_69;
  }
LABEL_67:
  dispatch_group_leave(v46);
  xpc_object_t v47 = v45[1];
  if (v47) {
    dispatch_release(v47);
  }
LABEL_69:
  operator delete(v45);
  xpc_object_t v48 = (std::__shared_weak_count *)v24[2];
  if (v48 && !atomic_fetch_add(&v48->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
    std::__shared_weak_count::__release_weak(v48);
  }
  operator delete(v24);
}

void sub_1C58F6DA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, atomic_ullong *a9, void *a10, void *a11, std::__shared_weak_count *a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,dispatch_group_t group,uint64_t a23,uint64_t a24,uint64_t a25,void **__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,int a46,__int16 a47,char a48,char a49)
{
  if (!atomic_fetch_add(&v49->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
    std::__shared_weak_count::__release_weak(v49);
  }
  if (__p)
  {
    xpc_object_t v52 = v50;
    __int16 v53 = __p;
    if (v50 != __p)
    {
      do
      {
        if (*((char *)v52 - 1) < 0) {
          operator delete(*(v52 - 3));
        }
        v52 -= 3;
      }
      while (v52 != __p);
      __int16 v53 = __p;
    }
    operator delete(v53);
  }
  if (!atomic_fetch_add(a9, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))a12->__on_zero_shared)(a12);
    std::__shared_weak_count::__release_weak(a12);
  }
  uint64_t v54 = a10[1];
  if (v54)
  {
    dispatch_group_leave(v54);
    uint64_t v55 = a10[1];
    if (v55) {
      dispatch_release(v55);
    }
  }
  operator delete(a10);
  long long v56 = (std::__shared_weak_count *)a11[2];
  if (v56)
  {
    if (!atomic_fetch_add(&v56->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
  operator delete(a11);
  _Unwind_Resume(a1);
}

void dispatch::async<void ctu::SharedSynchronizable<ServiceManager>::execute_wrapped<ServiceManager::shutdownGlobalServices(void)::$_0>(ServiceManager::shutdownGlobalServices(void)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<ServiceManager::shutdownGlobalServices(void)::$_0,dispatch_queue_s *::default_delete<ServiceManager::shutdownGlobalServices(void)::$_0>>)::{lambda(void *)#1}::__invoke(void **a1)
{
  uint64_t v90 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = (void **)*a1;
  uint64_t v2 = (void *)**a1;
  uint64_t v3 = v2[5];
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = (uint64_t)(v2[16] - v2[15]) >> 4;
    *(_DWORD *)long long buf = 134217984;
    *(void *)&uint8_t buf[4] = v4;
    _os_log_impl(&dword_1C5767000, v3, OS_LOG_TYPE_DEFAULT, "#I Shutdown %zd global services", buf, 0xCu);
  }
  uint64_t v5 = dispatch_group_create();
  uint64_t v6 = operator new(0x38uLL);
  uint64_t v7 = v6;
  v6[1] = 0;
  uint64_t v69 = v6 + 1;
  long long v70 = v1;
  v6[2] = 0;
  *uint64_t v6 = &unk_1F20FC5C0;
  v6[3] = v5;
  int v8 = (NSObject **)(v6 + 3);
  long long v72 = (std::__shared_weak_count *)v6;
  if (!v5)
  {
    v6[4] = 0;
    v6[5] = 0;
    v6[6] = 0;
    uint64_t v9 = (uint64_t *)v2[15];
    std::string::size_type v10 = (uint64_t *)v2[16];
    if (v9 == v10) {
      goto LABEL_30;
    }
    while (1)
    {
LABEL_9:
      uint64_t v11 = v2[5];
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v12 = (*(uint64_t (**)(void))(*(void *)*v9 + 16))();
        *(_DWORD *)long long buf = 136315138;
        *(void *)&uint8_t buf[4] = v12;
        _os_log_impl(&dword_1C5767000, v11, OS_LOG_TYPE_DEFAULT, "#I Shutdown global service '%s'", buf, 0xCu);
      }
      object.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
      int v13 = (const char *)(*(uint64_t (**)(void))(*(void *)*v9 + 16))();
      size_t v14 = strlen(v13);
      if (v14 > 0x7FFFFFFFFFFFFFF7) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      size_t v15 = v14;
      if (v14 >= 0x17) {
        break;
      }
      HIBYTE(v76) = v14;
      p_dst = &__dst;
      if (v14) {
        goto LABEL_18;
      }
LABEL_19:
      *((unsigned char *)p_dst + v15) = 0;
      *(_OWORD *)std::string __p = __dst;
      unint64_t v78 = (void *)v76;
      long long __dst = 0uLL;
      unint64_t v76 = 0;
      *(_OWORD *)long long buf = 0u;
      long long v82 = 0u;
      long long v83 = 0u;
      ctu::TrackedGroup::fork((NSObject **)&object, (uint64_t)v8, (uint64_t)__p, (uint64_t)buf);
      ctu::os::signpost_interval::~signpost_interval((ctu::os::signpost_interval *)buf);
      if (SHIBYTE(v78) < 0)
      {
        operator delete(__p[0]);
        uint64_t v19 = *v9;
        uint64_t v20 = object.__r_.__value_.__r.__words[0];
        dispatch_group_t group = (dispatch_group_t)object.__r_.__value_.__r.__words[0];
        if (object.__r_.__value_.__r.__words[0])
        {
LABEL_23:
          dispatch_retain(v20);
          if (group) {
            dispatch_group_enter(group);
          }
        }
      }
      else
      {
        uint64_t v19 = *v9;
        uint64_t v20 = object.__r_.__value_.__r.__words[0];
        dispatch_group_t group = (dispatch_group_t)object.__r_.__value_.__r.__words[0];
        if (object.__r_.__value_.__r.__words[0]) {
          goto LABEL_23;
        }
      }
      (*(void (**)(uint64_t, dispatch_group_t *))(*(void *)v19 + 64))(v19, &group);
      if (group)
      {
        dispatch_group_leave(group);
        if (group) {
          dispatch_release(group);
        }
      }
      if (v20)
      {
        dispatch_group_leave(v20);
        dispatch_release(v20);
      }
      v9 += 2;
      if (v9 == v10) {
        goto LABEL_30;
      }
    }
    uint64_t v17 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v14 | 7) != 0x17) {
      uint64_t v17 = v14 | 7;
    }
    uint64_t v18 = v17 + 1;
    p_dst = (long long *)operator new(v17 + 1);
    *((void *)&__dst + 1) = v15;
    unint64_t v76 = v18 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_18:
    memmove(p_dst, v13, v15);
    goto LABEL_19;
  }
  dispatch_retain(v5);
  v7[4] = 0;
  v7[5] = 0;
  void v7[6] = 0;
  dispatch_release(v5);
  uint64_t v9 = (uint64_t *)v2[15];
  std::string::size_type v10 = (uint64_t *)v2[16];
  if (v9 != v10) {
    goto LABEL_9;
  }
LABEL_30:
  uint64_t v21 = *v8;
  uint64_t v22 = (*(uint64_t (**)(void *))(*v2 + 112))(v2);
  dispatch_time_t v23 = dispatch_time(0, 1000000000 * v22);
  uint64_t v24 = v72;
  if (!dispatch_group_wait(v21, v23)) {
    goto LABEL_61;
  }
  __p[0] = 0;
  __p[1] = 0;
  unint64_t v78 = 0;
  shared_owners = (uint64_t *)v72[1].__shared_owners_;
  for (uint64_t i = (uint64_t *)v72[1].__shared_weak_owners_; shared_owners != i; shared_owners += 2)
  {
    uint64_t v27 = (std::__shared_weak_count *)shared_owners[1];
    if (v27)
    {
      unint64_t v28 = std::__shared_weak_count::lock(v27);
      if (v28)
      {
        uint64_t v29 = v28;
        uint64_t v30 = *shared_owners;
        if (*shared_owners)
        {
          uint64_t v31 = __p[1];
          if (__p[1] >= v78)
          {
            long long v33 = std::vector<std::string>::__emplace_back_slow_path<std::string const&>((char **)__p, v30);
          }
          else
          {
            if (*(char *)(v30 + 23) < 0)
            {
              std::string::__init_copy_ctor_external((std::string *)__p[1], *(const std::string::value_type **)v30, *(void *)(v30 + 8));
            }
            else
            {
              long long v32 = *(_OWORD *)v30;
              *((void *)__p[1] + 2) = *(void *)(v30 + 16);
              _OWORD *v31 = v32;
            }
            long long v33 = (std::string *)((char *)v31 + 24);
          }
          __p[1] = v33;
        }
        if (!atomic_fetch_add(&v29->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
          std::__shared_weak_count::__release_weak(v29);
        }
      }
    }
  }
  unint64_t v89 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v34 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v34 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v88[7] = v34;
  v88[8] = v34;
  v88[5] = v34;
  v88[6] = v34;
  v88[3] = v34;
  v88[4] = v34;
  v88[1] = v34;
  v88[2] = v34;
  long long v87 = v34;
  v88[0] = v34;
  long long v85 = v34;
  long long v86 = v34;
  long long v83 = v34;
  long long v84 = v34;
  *(_OWORD *)long long buf = v34;
  long long v82 = v34;
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)buf);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(buf, (uint64_t)"Shutdown global service: TIMEOUT: ", 34);
  long long v35 = (void *)std::ostream::operator<<();
  uint64_t v36 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)" clients failed to complete shutdown: ", 38);
  p_std::string object = &object;
  ctu::join<std::__wrap_iter<std::string *>>(&object, (std::string *)__p[0], (long long *)__p[1]);
  if ((object.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    p_std::string object = (std::string *)object.__r_.__value_.__r.__words[0];
  }
  size_t v38 = strlen((const char *)p_object);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)p_object, v38);
  if (SHIBYTE(object.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(object.__r_.__value_.__l.__data_);
  }
  size_t v39 = v2[5];
  if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
  {
    if ((BYTE8(v87) & 0x10) != 0)
    {
      uint64_t v63 = v87;
      if ((unint64_t)v87 < *((void *)&v84 + 1))
      {
        *(void *)&long long v87 = *((void *)&v84 + 1);
        uint64_t v63 = *((void *)&v84 + 1);
      }
      uint64_t v64 = (const void **)&v84;
    }
    else
    {
      if ((BYTE8(v87) & 8) == 0)
      {
        std::string::size_type v61 = 0;
        *((unsigned char *)&object.__r_.__value_.__s + 23) = 0;
        long long v62 = &object;
LABEL_114:
        v62->__r_.__value_.__s.__data_[v61] = 0;
        uint64_t v68 = &object;
        if ((object.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          uint64_t v68 = (std::string *)object.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)uint64_t v79 = 136315138;
        xpc_object_t v80 = v68;
        _os_log_error_impl(&dword_1C5767000, v39, OS_LOG_TYPE_ERROR, "%s", v79, 0xCu);
        if (SHIBYTE(object.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(object.__r_.__value_.__l.__data_);
        }
        goto LABEL_51;
      }
      uint64_t v64 = (const void **)&v82 + 1;
      uint64_t v63 = *((void *)&v83 + 1);
    }
    unint64_t v65 = *v64;
    std::string::size_type v61 = v63 - (void)*v64;
    if (v61 > 0x7FFFFFFFFFFFFFF7) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    if (v61 >= 0x17)
    {
      uint64_t v66 = (v61 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v61 | 7) != 0x17) {
        uint64_t v66 = v61 | 7;
      }
      uint64_t v67 = v66 + 1;
      long long v62 = (std::string *)operator new(v66 + 1);
      object.__r_.__value_.__l.__size_ = v61;
      object.__r_.__value_.__r.__words[2] = v67 | 0x8000000000000000;
      object.__r_.__value_.__r.__words[0] = (std::string::size_type)v62;
    }
    else
    {
      *((unsigned char *)&object.__r_.__value_.__s + 23) = v63 - *(unsigned char *)v64;
      long long v62 = &object;
      if (!v61) {
        goto LABEL_113;
      }
    }
    memmove(v62, v65, v61);
LABEL_113:
    uint64_t v24 = v72;
    goto LABEL_114;
  }
LABEL_51:
  *(void *)long long buf = *MEMORY[0x1E4FBA418];
  *(void *)&buf[*(void *)(*(void *)buf - 24)] = *(void *)(MEMORY[0x1E4FBA418] + 24);
  *(void *)&uint8_t buf[8] = MEMORY[0x1E4FBA470] + 16;
  if (SHIBYTE(v86) < 0) {
    operator delete(*((void **)&v85 + 1));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1C8791FB0](v88);
  uint64_t v40 = (void **)__p[0];
  if (__p[0])
  {
    xpc_object_t v41 = (void **)__p[1];
    unint64_t v42 = __p[0];
    if (__p[1] != __p[0])
    {
      do
      {
        if (*((char *)v41 - 1) < 0) {
          operator delete(*(v41 - 3));
        }
        v41 -= 3;
      }
      while (v41 != v40);
      unint64_t v42 = __p[0];
    }
    __p[1] = v40;
    operator delete(v42);
  }
LABEL_61:
  uint64_t v43 = v2[16];
  if (v43 != v2[15])
  {
    do
    {
      uint64_t v45 = v43;
      uint64_t v46 = *(void *)(v43 - 16);
      v43 -= 16;
      memset(buf, 0, sizeof(buf));
      *(void *)&long long v82 = 0;
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(buf, *(void *)(v46 + 24), *(void *)(v46 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v46 + 32) - *(void *)(v46 + 24)) >> 3));
      uint64_t v47 = v2[21];
      __p[1] = 0;
      unint64_t v78 = 0;
      __p[0] = 0;
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(__p, *(uint64_t *)buf, *(uint64_t *)&buf[8], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)&buf[8] - *(void *)buf) >> 3));
      ServiceCtrl::clearCommandHandlers(v47, (uint64_t)__p[0], (uint64_t)__p[1]);
      xpc_object_t v48 = (void **)__p[0];
      if (__p[0])
      {
        std::string::size_type v49 = (void **)__p[1];
        xpc_object_t v50 = __p[0];
        if (__p[1] != __p[0])
        {
          do
          {
            if (*((char *)v49 - 1) < 0) {
              operator delete(*(v49 - 3));
            }
            v49 -= 3;
          }
          while (v49 != v48);
          xpc_object_t v50 = __p[0];
        }
        __p[1] = v48;
        operator delete(v50);
      }
      uint64_t v51 = *(void *)buf;
      if (*(void *)buf)
      {
        uint64_t v52 = *(void *)&buf[8];
        xpc_object_t v44 = *(void **)buf;
        if (*(void *)&buf[8] != *(void *)buf)
        {
          do
          {
            if (*(char *)(v52 - 1) < 0) {
              operator delete(*(void **)(v52 - 24));
            }
            v52 -= 24;
          }
          while (v52 != v51);
          xpc_object_t v44 = *(void **)buf;
        }
        *(void *)&uint8_t buf[8] = v51;
        operator delete(v44);
      }
    }
    while (v43 != v2[15]);
    uint64_t v53 = v2[16];
    if (v53 != v43)
    {
      uint64_t v54 = v53 + 16;
      do
      {
        uint64_t v55 = *(std::__shared_weak_count **)(v54 - 24);
        if (v55 && !atomic_fetch_add(&v55->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
          std::__shared_weak_count::__release_weak(v55);
        }
        v54 -= 16;
      }
      while (v54 != v45);
    }
  }
  v2[16] = v43;
  long long v56 = v2[5];
  if (os_log_type_enabled(v56, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_1C5767000, v56, OS_LOG_TYPE_DEFAULT, "#I All global services have shutdown", buf, 2u);
    if (!atomic_fetch_add(v69, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_88;
    }
LABEL_91:
    long long v57 = v70[1];
    uint64_t v58 = a1;
    if (!v57) {
      goto LABEL_94;
    }
    goto LABEL_92;
  }
  if (atomic_fetch_add(v69, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_91;
  }
LABEL_88:
  ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
  std::__shared_weak_count::__release_weak(v24);
  long long v57 = v70[1];
  uint64_t v58 = a1;
  if (!v57) {
    goto LABEL_94;
  }
LABEL_92:
  dispatch_group_leave(v57);
  char v59 = v70[1];
  if (v59) {
    dispatch_release(v59);
  }
LABEL_94:
  operator delete(v70);
  uint64_t v60 = (std::__shared_weak_count *)v58[2];
  if (v60 && !atomic_fetch_add(&v60->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
    std::__shared_weak_count::__release_weak(v60);
  }
  operator delete(v58);
}

void sub_1C58F7AE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, atomic_ullong *a9, void *a10, void *a11, std::__shared_weak_count *a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,dispatch_group_t group,uint64_t a23,uint64_t a24,uint64_t a25,void **__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,int a46,__int16 a47,char a48,char a49)
{
  if (!atomic_fetch_add(&v49->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
    std::__shared_weak_count::__release_weak(v49);
  }
  if (__p)
  {
    uint64_t v52 = v50;
    uint64_t v53 = __p;
    if (v50 != __p)
    {
      do
      {
        if (*((char *)v52 - 1) < 0) {
          operator delete(*(v52 - 3));
        }
        v52 -= 3;
      }
      while (v52 != __p);
      uint64_t v53 = __p;
    }
    operator delete(v53);
  }
  if (!atomic_fetch_add(a9, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))a12->__on_zero_shared)(a12);
    std::__shared_weak_count::__release_weak(a12);
  }
  uint64_t v54 = a10[1];
  if (v54)
  {
    dispatch_group_leave(v54);
    uint64_t v55 = a10[1];
    if (v55) {
      dispatch_release(v55);
    }
  }
  operator delete(a10);
  long long v56 = (std::__shared_weak_count *)a11[2];
  if (v56)
  {
    if (!atomic_fetch_add(&v56->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
  operator delete(a11);
  _Unwind_Resume(a1);
}

void ServiceCtrl::clearCommandHandlers(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1 + 72;
  uint64_t v9 = a1;
  std::string __p = 0;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&__p, a2, a3, 0xAAAAAAAAAAAAAAABLL * ((a3 - a2) >> 3));
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI11ServiceCtrlE20execute_wrapped_syncIZNS1_20clearCommandHandlersENSt3__16vectorINS4_12basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEENS9_ISB_EEEEEUlvE_EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOSF__block_invoke;
  block[3] = &__block_descriptor_tmp_59_1;
  block[4] = v4;
  block[5] = &v9;
  uint64_t v5 = *(NSObject **)(a1 + 88);
  if (*(void *)(a1 + 96))
  {
    dispatch_async_and_wait(v5, block);
    uint64_t v6 = (void **)__p;
    if (!__p) {
      return;
    }
  }
  else
  {
    dispatch_sync(v5, block);
    uint64_t v6 = (void **)__p;
    if (!__p) {
      return;
    }
  }
  uint64_t v7 = v11;
  int v8 = v6;
  if (v11 != v6)
  {
    do
    {
      if (*((char *)v7 - 1) < 0) {
        operator delete(*(v7 - 3));
      }
      v7 -= 3;
    }
    while (v7 != v6);
    int v8 = __p;
  }
  uint64_t v11 = v6;
  operator delete(v8);
}

void ___ZNK3ctu20SharedSynchronizableI11ServiceCtrlE20execute_wrapped_syncIZNS1_20clearCommandHandlersENSt3__16vectorINS4_12basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEENS9_ISB_EEEEEUlvE_EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOSF__block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 40);
  uint64_t v2 = (const void **)v1[1];
  uint64_t v3 = (const void **)v1[2];
  if (v2 != v3)
  {
    uint64_t v4 = *v1;
    uint64_t v5 = (uint64_t **)(*v1 + 120);
    uint64_t v6 = *v1 + 128;
    do
    {
      uint64_t v7 = std::__tree<std::string>::find<std::string>((uint64_t)v5, v2);
      if ((uint64_t *)v6 != v7)
      {
        int v8 = v7;
        uint64_t v9 = (uint64_t *)v7[1];
        if (v9)
        {
          do
          {
            std::string::size_type v10 = v9;
            uint64_t v9 = (uint64_t *)*v9;
          }
          while (v9);
        }
        else
        {
          uint64_t v11 = v7;
          do
          {
            std::string::size_type v10 = (uint64_t *)v11[2];
            BOOL v12 = *v10 == (void)v11;
            uint64_t v11 = v10;
          }
          while (!v12);
        }
        if (*v5 == v7) {
          *uint64_t v5 = v10;
        }
        int v13 = *(uint64_t **)(v4 + 128);
        --*(void *)(v4 + 136);
        std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v13, v8);
        size_t v14 = (const void *)v8[7];
        if (v14) {
          _Block_release(v14);
        }
        if (*((char *)v8 + 55) < 0) {
          operator delete((void *)v8[4]);
        }
        operator delete(v8);
      }
      v2 += 3;
    }
    while (v2 != v3);
  }
}

void dispatch::detail::group_notify<ServiceManager::initializeDynamicServices(void)::$_0>(dispatch_group_s *,dispatch_queue_s *,ServiceManager::initializeDynamicServices(void)::$_0 &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke(void *a1)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = *((void *)a1 + 2);
  if (v3)
  {
    dispatch_retain(*((dispatch_object_t *)a1 + 2));
    dispatch_group_enter(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)v2[10];
  if (!v4 || (uint64_t v5 = v2[9], (v6 = std::__shared_weak_count::lock(v4)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v7 = v6;
  int v8 = operator new(0x10uLL);
  *int v8 = v2;
  v8[1] = v3;
  uint64_t v9 = v2[11];
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  std::string::size_type v10 = operator new(0x18uLL);
  void *v10 = v8;
  v10[1] = v5;
  v10[2] = v7;
  dispatch_async_f(v9, v10, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<ServiceManager>::execute_wrapped<ServiceManager::initializeDynamicServices(void)::$_0::operator() const(void)::{lambda(void)#1}>(ServiceManager::initializeDynamicServices(void)::$_0::operator() const(void)::{lambda(void)#1} &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<ServiceManager::initializeDynamicServices(void)::$_0::operator() const(void)::{lambda(void)#1},dispatch_queue_s *::default_delete<ServiceManager::initializeDynamicServices(void)::$_0::operator() const(void)::{lambda(void)#1}>>)::{lambda(void *)#1}::__invoke);
  if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  uint64_t v11 = *((void *)a1 + 2);
  if (v11)
  {
    dispatch_group_leave(v11);
    BOOL v12 = *((void *)a1 + 2);
    if (v12) {
      dispatch_release(v12);
    }
  }
  int v13 = *((void *)a1 + 1);
  if (v13) {
    dispatch_release(v13);
  }

  operator delete(a1);
}

void dispatch::async<void ctu::SharedSynchronizable<ServiceManager>::execute_wrapped<ServiceManager::initializeDynamicServices(void)::$_0::operator() const(void)::{lambda(void)#1}>(ServiceManager::initializeDynamicServices(void)::$_0::operator() const(void)::{lambda(void)#1} &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<ServiceManager::initializeDynamicServices(void)::$_0::operator() const(void)::{lambda(void)#1},dispatch_queue_s *::default_delete<ServiceManager::initializeDynamicServices(void)::$_0::operator() const(void)::{lambda(void)#1}>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t v134 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *a1;
  uint64_t v3 = **a1;
  (***(void (****)(void))(v3 + 104))(*(void *)(v3 + 104));
  uint64_t v4 = *(NSObject **)(v3 + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = (uint64_t)(*(void *)(v3 + 152) - *(void *)(v3 + 144)) >> 4;
    *(_DWORD *)long long buf = 134217984;
    *(void *)&uint8_t buf[4] = v5;
    _os_log_impl(&dword_1C5767000, v4, OS_LOG_TYPE_DEFAULT, "#I Initializing %zd services", buf, 0xCu);
  }
  xpc_object_t v106 = a1;
  uint64_t v6 = dispatch_group_create();
  xpc_object_t v107 = v2;
  uint64_t v7 = (std::__shared_weak_count *)operator new(0x38uLL);
  int v8 = &v7->__vftable;
  v7->__shared_owners_ = 0;
  p_shared_owners = &v7->__shared_owners_;
  v7->__shared_weak_owners_ = 0;
  v7->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20FC5C0;
  v7[1].__vftable = (std::__shared_weak_count_vtbl *)v6;
  uint64_t v9 = (NSObject **)&v7[1];
  xpc_object_t v109 = v7;
  if (!v6)
  {
    v7[1].__shared_owners_ = 0;
    v7[1].__shared_weak_owners_ = 0;
    v7[2].__vftable = 0;
    std::string::size_type v10 = *(uint64_t **)(v3 + 144);
    uint64_t v11 = *(uint64_t **)(v3 + 152);
    if (v10 == v11) {
      goto LABEL_30;
    }
    while (1)
    {
LABEL_9:
      BOOL v12 = *(NSObject **)(v3 + 40);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v13 = (*(uint64_t (**)(void))(*(void *)*v10 + 16))();
        *(_DWORD *)long long buf = 136315138;
        *(void *)&uint8_t buf[4] = v13;
        _os_log_impl(&dword_1C5767000, v12, OS_LOG_TYPE_DEFAULT, "#I Initializing '%s'", buf, 0xCu);
      }
      object.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
      size_t v14 = (const char *)(*(uint64_t (**)(void))(*(void *)*v10 + 16))();
      size_t v15 = strlen(v14);
      if (v15 > 0x7FFFFFFFFFFFFFF7) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      std::string::size_type v16 = v15;
      if (v15 >= 0x17) {
        break;
      }
      *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v15;
      p_dst = &__dst;
      if (v15) {
        goto LABEL_18;
      }
LABEL_19:
      p_dst->__r_.__value_.__s.__data_[v16] = 0;
      std::string __p = __dst;
      memset(&__dst, 0, sizeof(__dst));
      memset(buf, 0, sizeof(buf));
      long long v119 = 0u;
      ctu::TrackedGroup::fork((NSObject **)&object, (uint64_t)v9, (uint64_t)&__p, (uint64_t)buf);
      ctu::os::signpost_interval::~signpost_interval((ctu::os::signpost_interval *)buf);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        uint64_t v20 = *v10;
        uint64_t v21 = object.__r_.__value_.__r.__words[0];
        dispatch_group_t group = (dispatch_group_t)object.__r_.__value_.__r.__words[0];
        if (object.__r_.__value_.__r.__words[0])
        {
LABEL_23:
          dispatch_retain(v21);
          if (group) {
            dispatch_group_enter(group);
          }
        }
      }
      else
      {
        uint64_t v20 = *v10;
        uint64_t v21 = object.__r_.__value_.__r.__words[0];
        dispatch_group_t group = (dispatch_group_t)object.__r_.__value_.__r.__words[0];
        if (object.__r_.__value_.__r.__words[0]) {
          goto LABEL_23;
        }
      }
      (*(void (**)(uint64_t, dispatch_group_t *))(*(void *)v20 + 32))(v20, &group);
      if (group)
      {
        dispatch_group_leave(group);
        if (group) {
          dispatch_release(group);
        }
      }
      if (v21)
      {
        dispatch_group_leave(v21);
        dispatch_release(v21);
      }
      v10 += 2;
      if (v10 == v11) {
        goto LABEL_30;
      }
    }
    uint64_t v18 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v15 | 7) != 0x17) {
      uint64_t v18 = v15 | 7;
    }
    uint64_t v19 = v18 + 1;
    p_dst = (std::string *)operator new(v18 + 1);
    __dst.__r_.__value_.__l.__size_ = v16;
    __dst.__r_.__value_.__r.__words[2] = v19 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
LABEL_18:
    memmove(p_dst, v14, v16);
    goto LABEL_19;
  }
  dispatch_retain(v6);
  v8[4] = 0;
  v8[5] = 0;
  v8[6] = 0;
  dispatch_release(v6);
  std::string::size_type v10 = *(uint64_t **)(v3 + 144);
  uint64_t v11 = *(uint64_t **)(v3 + 152);
  if (v10 != v11) {
    goto LABEL_9;
  }
LABEL_30:
  uint64_t v22 = *v9;
  uint64_t v23 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 88))(v3);
  dispatch_time_t v24 = dispatch_time(0, 1000000000 * v23);
  if (!dispatch_group_wait(v22, v24)) {
    goto LABEL_61;
  }
  memset(&__p, 0, sizeof(__p));
  shared_owners = (uint64_t *)v109[1].__shared_owners_;
  for (uint64_t i = (uint64_t *)v109[1].__shared_weak_owners_; shared_owners != i; shared_owners += 2)
  {
    uint64_t v27 = (std::__shared_weak_count *)shared_owners[1];
    if (v27)
    {
      unint64_t v28 = std::__shared_weak_count::lock(v27);
      if (v28)
      {
        uint64_t v29 = v28;
        uint64_t v30 = *shared_owners;
        if (*shared_owners)
        {
          std::string::size_type size = (_OWORD *)__p.__r_.__value_.__l.__size_;
          if (__p.__r_.__value_.__l.__size_ >= __p.__r_.__value_.__r.__words[2])
          {
            long long v33 = std::vector<std::string>::__emplace_back_slow_path<std::string const&>(&__p.__r_.__value_.__l.__data_, v30);
          }
          else
          {
            if (*(char *)(v30 + 23) < 0)
            {
              std::string::__init_copy_ctor_external((std::string *)__p.__r_.__value_.__l.__size_, *(const std::string::value_type **)v30, *(void *)(v30 + 8));
            }
            else
            {
              long long v32 = *(_OWORD *)v30;
              *(void *)(__p.__r_.__value_.__l.__size_ + 16) = *(void *)(v30 + 16);
              *std::string::size_type size = v32;
            }
            long long v33 = (std::string *)((char *)size + 24);
          }
          __p.__r_.__value_.__l.__size_ = (std::string::size_type)v33;
        }
        if (!atomic_fetch_add(&v29->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
          std::__shared_weak_count::__release_weak(v29);
        }
      }
    }
  }
  unint64_t v133 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v34 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v34 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v131 = v34;
  long long v132 = v34;
  long long v129 = v34;
  long long v130 = v34;
  long long v127 = v34;
  long long v128 = v34;
  long long v125 = v34;
  long long v126 = v34;
  long long v123 = v34;
  long long v124 = v34;
  *(_OWORD *)xpc_object_t v121 = v34;
  long long v122 = v34;
  long long v119 = v34;
  long long v120 = v34;
  *(_OWORD *)long long buf = v34;
  *(_OWORD *)&uint8_t buf[16] = v34;
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)buf);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(buf, (uint64_t)"Initialization TIMEOUT: ", 24);
  long long v35 = (void *)std::ostream::operator<<();
  uint64_t v36 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)" clients failed to complete init stage: ", 40);
  p_std::string object = &object;
  ctu::join<std::__wrap_iter<std::string *>>(&object, (std::string *)__p.__r_.__value_.__l.__data_, (long long *)__p.__r_.__value_.__l.__size_);
  if ((object.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    p_std::string object = (std::string *)object.__r_.__value_.__r.__words[0];
  }
  size_t v38 = strlen((const char *)p_object);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)p_object, v38);
  if (SHIBYTE(object.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(object.__r_.__value_.__l.__data_);
  }
  size_t v39 = *(NSObject **)(v3 + 40);
  if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
  {
    if ((BYTE8(v123) & 0x10) != 0)
    {
      uint64_t v92 = v123;
      if ((unint64_t)v123 < *((void *)&v120 + 1))
      {
        *(void *)&long long v123 = *((void *)&v120 + 1);
        uint64_t v92 = *((void *)&v120 + 1);
      }
      xpc_object_t v93 = (const void **)&v120;
    }
    else
    {
      if ((BYTE8(v123) & 8) == 0)
      {
        std::string::size_type v88 = 0;
        *((unsigned char *)&object.__r_.__value_.__s + 23) = 0;
        unint64_t v89 = &object;
        goto LABEL_158;
      }
      xpc_object_t v93 = (const void **)&buf[24];
      uint64_t v92 = *((void *)&v119 + 1);
    }
    xpc_object_t v96 = *v93;
    std::string::size_type v88 = v92 - (void)*v93;
    if (v88 > 0x7FFFFFFFFFFFFFF7) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    if (v88 >= 0x17)
    {
      uint64_t v97 = (v88 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v88 | 7) != 0x17) {
        uint64_t v97 = v88 | 7;
      }
      uint64_t v98 = v97 + 1;
      unint64_t v89 = (std::string *)operator new(v97 + 1);
      object.__r_.__value_.__l.__size_ = v88;
      object.__r_.__value_.__r.__words[2] = v98 | 0x8000000000000000;
      object.__r_.__value_.__r.__words[0] = (std::string::size_type)v89;
    }
    else
    {
      *((unsigned char *)&object.__r_.__value_.__s + 23) = v92 - *(unsigned char *)v93;
      unint64_t v89 = &object;
      if (!v88) {
        goto LABEL_158;
      }
    }
    memmove(v89, v96, v88);
LABEL_158:
    v89->__r_.__value_.__s.__data_[v88] = 0;
    v99 = &object;
    if ((object.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      v99 = (std::string *)object.__r_.__value_.__r.__words[0];
    }
    LODWORD(v117.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)v117.__r_.__value_.__r.__words + 4) = (std::string::size_type)v99;
    _os_log_error_impl(&dword_1C5767000, v39, OS_LOG_TYPE_ERROR, "%s", (uint8_t *)&v117, 0xCu);
    if (SHIBYTE(object.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(object.__r_.__value_.__l.__data_);
    }
  }
  *(void *)long long buf = *MEMORY[0x1E4FBA418];
  *(void *)&buf[*(void *)(*(void *)buf - 24)] = *(void *)(MEMORY[0x1E4FBA418] + 24);
  *(void *)&uint8_t buf[8] = MEMORY[0x1E4FBA470] + 16;
  if (SHIBYTE(v122) < 0) {
    operator delete(v121[1]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1C8791FB0](&v124);
  std::string::size_type v40 = __p.__r_.__value_.__r.__words[0];
  if (__p.__r_.__value_.__r.__words[0])
  {
    std::string::size_type v41 = __p.__r_.__value_.__l.__size_;
    unint64_t v42 = (void *)__p.__r_.__value_.__r.__words[0];
    if (__p.__r_.__value_.__l.__size_ != __p.__r_.__value_.__r.__words[0])
    {
      do
      {
        if (*(char *)(v41 - 1) < 0) {
          operator delete(*(void **)(v41 - 24));
        }
        v41 -= 24;
      }
      while (v41 != v40);
      unint64_t v42 = (void *)__p.__r_.__value_.__r.__words[0];
    }
    __p.__r_.__value_.__l.__size_ = v40;
    operator delete(v42);
  }
LABEL_61:
  uint64_t v43 = *(NSObject **)(v3 + 40);
  if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_1C5767000, v43, OS_LOG_TYPE_DEFAULT, "#I All services initialized; Starting them now!", buf, 2u);
  }
  xpc_object_t v44 = dispatch_group_create();
  uint64_t v45 = operator new(0x38uLL);
  uint64_t v46 = v45;
  v45[1] = 0;
  xpc_object_t v104 = v45 + 1;
  v45[2] = 0;
  *uint64_t v45 = &unk_1F20FC5C0;
  v45[3] = v44;
  uint64_t v47 = (NSObject **)(v45 + 3);
  xpc_object_t v108 = (std::__shared_weak_count *)v45;
  if (!v44)
  {
    v45[4] = 0;
    v45[5] = 0;
    v45[6] = 0;
    std::string::size_type v49 = *(uint64_t **)(v3 + 144);
    xpc_object_t v48 = *(uint64_t **)(v3 + 152);
    if (v49 == v48) {
      goto LABEL_90;
    }
    while (1)
    {
LABEL_69:
      xpc_object_t v50 = *(NSObject **)(v3 + 40);
      if (os_log_type_enabled(v50, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v51 = (*(uint64_t (**)(void))(*(void *)*v49 + 16))();
        *(_DWORD *)long long buf = 136315138;
        *(void *)&uint8_t buf[4] = v51;
        _os_log_impl(&dword_1C5767000, v50, OS_LOG_TYPE_DEFAULT, "#I Starting '%s'", buf, 0xCu);
      }
      v117.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
      uint64_t v52 = (const char *)(*(uint64_t (**)(void))(*(void *)*v49 + 16))();
      size_t v53 = strlen(v52);
      if (v53 > 0x7FFFFFFFFFFFFFF7) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      std::string::size_type v54 = v53;
      if (v53 >= 0x17) {
        break;
      }
      *((unsigned char *)&object.__r_.__value_.__s + 23) = v53;
      uint64_t v55 = &object;
      if (v53) {
        goto LABEL_78;
      }
LABEL_79:
      v55->__r_.__value_.__s.__data_[v54] = 0;
      std::string __p = object;
      memset(&object, 0, sizeof(object));
      memset(buf, 0, sizeof(buf));
      long long v119 = 0u;
      ctu::TrackedGroup::fork((NSObject **)&v117, (uint64_t)v47, (uint64_t)&__p, (uint64_t)buf);
      ctu::os::signpost_interval::~signpost_interval((ctu::os::signpost_interval *)buf);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        uint64_t v58 = *v49;
        char v59 = v117.__r_.__value_.__r.__words[0];
        dispatch_group_t v110 = (dispatch_group_t)v117.__r_.__value_.__r.__words[0];
        if (v117.__r_.__value_.__r.__words[0])
        {
LABEL_83:
          dispatch_retain(v59);
          if (v110) {
            dispatch_group_enter(v110);
          }
        }
      }
      else
      {
        uint64_t v58 = *v49;
        char v59 = v117.__r_.__value_.__r.__words[0];
        dispatch_group_t v110 = (dispatch_group_t)v117.__r_.__value_.__r.__words[0];
        if (v117.__r_.__value_.__r.__words[0]) {
          goto LABEL_83;
        }
      }
      (*(void (**)(uint64_t, dispatch_group_t *))(*(void *)v58 + 40))(v58, &v110);
      if (v110)
      {
        dispatch_group_leave(v110);
        if (v110) {
          dispatch_release(v110);
        }
      }
      if (v59)
      {
        dispatch_group_leave(v59);
        dispatch_release(v59);
      }
      v49 += 2;
      if (v49 == v48) {
        goto LABEL_90;
      }
    }
    uint64_t v56 = (v53 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v53 | 7) != 0x17) {
      uint64_t v56 = v53 | 7;
    }
    uint64_t v57 = v56 + 1;
    uint64_t v55 = (std::string *)operator new(v56 + 1);
    object.__r_.__value_.__l.__size_ = v54;
    object.__r_.__value_.__r.__words[2] = v57 | 0x8000000000000000;
    object.__r_.__value_.__r.__words[0] = (std::string::size_type)v55;
LABEL_78:
    memmove(v55, v52, v54);
    goto LABEL_79;
  }
  dispatch_retain(v44);
  v46[4] = 0;
  v46[5] = 0;
  v46[6] = 0;
  dispatch_release(v44);
  std::string::size_type v49 = *(uint64_t **)(v3 + 144);
  xpc_object_t v48 = *(uint64_t **)(v3 + 152);
  if (v49 != v48) {
    goto LABEL_69;
  }
LABEL_90:
  atomic_store(0, (unsigned __int8 *)(v3 + 192));
  uint64_t v60 = *v47;
  std::string::size_type v61 = v107;
  long long v62 = v108;
  uint64_t v63 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 96))(v3);
  dispatch_time_t v64 = dispatch_time(0, 1000000000 * v63);
  if (!dispatch_group_wait(v60, v64)) {
    goto LABEL_121;
  }
  memset(&__p, 0, sizeof(__p));
  unint64_t v65 = (uint64_t *)v108[1].__shared_owners_;
  for (j = (uint64_t *)v108[1].__shared_weak_owners_; v65 != j; v65 += 2)
  {
    uint64_t v67 = (std::__shared_weak_count *)v65[1];
    if (v67)
    {
      uint64_t v68 = std::__shared_weak_count::lock(v67);
      if (v68)
      {
        uint64_t v69 = v68;
        uint64_t v70 = *v65;
        if (*v65)
        {
          long long v71 = (_OWORD *)__p.__r_.__value_.__l.__size_;
          if (__p.__r_.__value_.__l.__size_ >= __p.__r_.__value_.__r.__words[2])
          {
            long long v73 = std::vector<std::string>::__emplace_back_slow_path<std::string const&>(&__p.__r_.__value_.__l.__data_, v70);
          }
          else
          {
            if (*(char *)(v70 + 23) < 0)
            {
              std::string::__init_copy_ctor_external((std::string *)__p.__r_.__value_.__l.__size_, *(const std::string::value_type **)v70, *(void *)(v70 + 8));
            }
            else
            {
              long long v72 = *(_OWORD *)v70;
              *(void *)(__p.__r_.__value_.__l.__size_ + 16) = *(void *)(v70 + 16);
              *long long v71 = v72;
            }
            long long v73 = (std::string *)((char *)v71 + 24);
          }
          __p.__r_.__value_.__l.__size_ = (std::string::size_type)v73;
        }
        if (!atomic_fetch_add(&v69->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
          std::__shared_weak_count::__release_weak(v69);
        }
      }
    }
  }
  unint64_t v133 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v74 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v74 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v131 = v74;
  long long v132 = v74;
  long long v129 = v74;
  long long v130 = v74;
  long long v127 = v74;
  long long v128 = v74;
  long long v125 = v74;
  long long v126 = v74;
  long long v123 = v74;
  long long v124 = v74;
  *(_OWORD *)xpc_object_t v121 = v74;
  long long v122 = v74;
  long long v119 = v74;
  long long v120 = v74;
  *(_OWORD *)long long buf = v74;
  *(_OWORD *)&uint8_t buf[16] = v74;
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)buf);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(buf, (uint64_t)"Start TIMEOUT: ", 15);
  long long v75 = (void *)std::ostream::operator<<();
  unint64_t v76 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v75, (uint64_t)" clients failed to complete start stage: ", 41);
  unint64_t v77 = &v117;
  ctu::join<std::__wrap_iter<std::string *>>(&v117, (std::string *)__p.__r_.__value_.__l.__data_, (long long *)__p.__r_.__value_.__l.__size_);
  if ((v117.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    unint64_t v77 = (std::string *)v117.__r_.__value_.__r.__words[0];
  }
  size_t v78 = strlen((const char *)v77);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v76, (uint64_t)v77, v78);
  if (SHIBYTE(v117.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v117.__r_.__value_.__l.__data_);
  }
  uint64_t v79 = *(NSObject **)(v3 + 40);
  if (os_log_type_enabled(v79, OS_LOG_TYPE_ERROR))
  {
    if ((BYTE8(v123) & 0x10) != 0)
    {
      uint64_t v94 = v123;
      if ((unint64_t)v123 < *((void *)&v120 + 1))
      {
        *(void *)&long long v123 = *((void *)&v120 + 1);
        uint64_t v94 = *((void *)&v120 + 1);
      }
      char v95 = (const void **)&v120;
    }
    else
    {
      if ((BYTE8(v123) & 8) == 0)
      {
        std::string::size_type v90 = 0;
        *((unsigned char *)&v117.__r_.__value_.__s + 23) = 0;
        xpc_object_t v91 = &v117;
LABEL_172:
        v91->__r_.__value_.__s.__data_[v90] = 0;
        xpc_object_t v103 = &v117;
        if ((v117.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          xpc_object_t v103 = (std::string *)v117.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)xpc_object_t v115 = 136315138;
        uint64_t v116 = v103;
        _os_log_error_impl(&dword_1C5767000, v79, OS_LOG_TYPE_ERROR, "%s", v115, 0xCu);
        if (SHIBYTE(v117.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v117.__r_.__value_.__l.__data_);
        }
        long long v62 = v108;
        goto LABEL_111;
      }
      char v95 = (const void **)&buf[24];
      uint64_t v94 = *((void *)&v119 + 1);
    }
    xpc_object_t v100 = *v95;
    std::string::size_type v90 = v94 - (void)*v95;
    if (v90 > 0x7FFFFFFFFFFFFFF7) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    if (v90 >= 0x17)
    {
      uint64_t v101 = (v90 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v90 | 7) != 0x17) {
        uint64_t v101 = v90 | 7;
      }
      uint64_t v102 = v101 + 1;
      xpc_object_t v91 = (std::string *)operator new(v101 + 1);
      v117.__r_.__value_.__l.__size_ = v90;
      v117.__r_.__value_.__r.__words[2] = v102 | 0x8000000000000000;
      v117.__r_.__value_.__r.__words[0] = (std::string::size_type)v91;
    }
    else
    {
      *((unsigned char *)&v117.__r_.__value_.__s + 23) = v94 - *(unsigned char *)v95;
      xpc_object_t v91 = &v117;
      if (!v90) {
        goto LABEL_171;
      }
    }
    memmove(v91, v100, v90);
LABEL_171:
    std::string::size_type v61 = v107;
    goto LABEL_172;
  }
LABEL_111:
  *(void *)long long buf = *MEMORY[0x1E4FBA418];
  *(void *)&buf[*(void *)(*(void *)buf - 24)] = *(void *)(MEMORY[0x1E4FBA418] + 24);
  *(void *)&uint8_t buf[8] = MEMORY[0x1E4FBA470] + 16;
  if (SHIBYTE(v122) < 0) {
    operator delete(v121[1]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1C8791FB0](&v124);
  std::string::size_type v80 = __p.__r_.__value_.__r.__words[0];
  if (__p.__r_.__value_.__r.__words[0])
  {
    std::string::size_type v81 = __p.__r_.__value_.__l.__size_;
    long long v82 = (void *)__p.__r_.__value_.__r.__words[0];
    if (__p.__r_.__value_.__l.__size_ != __p.__r_.__value_.__r.__words[0])
    {
      do
      {
        if (*(char *)(v81 - 1) < 0) {
          operator delete(*(void **)(v81 - 24));
        }
        v81 -= 24;
      }
      while (v81 != v80);
      long long v82 = (void *)__p.__r_.__value_.__r.__words[0];
    }
    __p.__r_.__value_.__l.__size_ = v80;
    operator delete(v82);
  }
LABEL_121:
  long long v83 = *(NSObject **)(v3 + 40);
  if (os_log_type_enabled(v83, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_1C5767000, v83, OS_LOG_TYPE_DEFAULT, "#I All services started", buf, 2u);
  }
  uint64_t v84 = *(void *)(v3 + 104);
  *(void *)long long buf = operator new(0x30uLL);
  *(_OWORD *)&uint8_t buf[8] = xmmword_1C599E870;
  strcpy(*(char **)buf, "com.apple.AppleBasebandManager.ServerNotReady");
  (*(void (**)(uint64_t, uint8_t *))(*(void *)v84 + 32))(v84, buf);
  if ((char)buf[23] < 0)
  {
    operator delete(*(void **)buf);
    if (atomic_fetch_add(v104, 0xFFFFFFFFFFFFFFFFLL))
    {
LABEL_125:
      if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
        goto LABEL_126;
      }
LABEL_130:
      ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
      std::__shared_weak_count::__release_weak(v109);
      long long v85 = v61[1];
      if (!v85) {
        goto LABEL_133;
      }
      goto LABEL_131;
    }
  }
  else if (atomic_fetch_add(v104, 0xFFFFFFFFFFFFFFFFLL))
  {
    goto LABEL_125;
  }
  ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
  std::__shared_weak_count::__release_weak(v62);
  if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_130;
  }
LABEL_126:
  long long v85 = v61[1];
  if (!v85) {
    goto LABEL_133;
  }
LABEL_131:
  dispatch_group_leave(v85);
  long long v86 = v61[1];
  if (v86) {
    dispatch_release(v86);
  }
LABEL_133:
  operator delete(v61);
  long long v87 = (std::__shared_weak_count *)v106[2];
  if (v87 && !atomic_fetch_add(&v87->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
    std::__shared_weak_count::__release_weak(v87);
  }
  operator delete(v106);
}

void sub_1C58F92B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, atomic_ullong *a9, atomic_ullong *a10, void *a11, void *a12, std::__shared_weak_count *a13, std::__shared_weak_count *a14, uint64_t a15, uint64_t a16, dispatch_group_t group, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,dispatch_group_t object,uint64_t a25,uint64_t a26,uint64_t a27,void **__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,int a46,__int16 a47,char a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,void *a56,uint64_t a57,int a58,__int16 a59,char a60,char a61)
{
  if (!atomic_fetch_add(&v61->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
    std::__shared_weak_count::__release_weak(v61);
  }
  if (__p)
  {
    dispatch_time_t v64 = v62;
    unint64_t v65 = __p;
    if (v62 != __p)
    {
      do
      {
        if (*((char *)v64 - 1) < 0) {
          operator delete(*(v64 - 3));
        }
        v64 -= 3;
      }
      while (v64 != __p);
      unint64_t v65 = __p;
    }
    operator delete(v65);
  }
  if (!atomic_fetch_add(a9, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))a13->__on_zero_shared)(a13);
    std::__shared_weak_count::__release_weak(a13);
  }
  if (!atomic_fetch_add(a10, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))a14->__on_zero_shared)(a14);
    std::__shared_weak_count::__release_weak(a14);
  }
  uint64_t v66 = a12[1];
  if (v66)
  {
    dispatch_group_leave(v66);
    uint64_t v67 = a12[1];
    if (v67) {
      dispatch_release(v67);
    }
  }
  operator delete(a12);
  uint64_t v68 = (std::__shared_weak_count *)a11[2];
  if (v68)
  {
    if (!atomic_fetch_add(&v68->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
      std::__shared_weak_count::__release_weak(v68);
    }
  }
  operator delete(a11);
  _Unwind_Resume(a1);
}

void dispatch::detail::group_notify<ServiceManager::shutdownDynamicServices(void)::$_0>(dispatch_group_s *,dispatch_queue_s *,ServiceManager::shutdownDynamicServices(void)::$_0 &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke(void *a1)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = *((void *)a1 + 2);
  if (v3)
  {
    dispatch_retain(*((dispatch_object_t *)a1 + 2));
    dispatch_group_enter(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)v2[10];
  if (!v4 || (uint64_t v5 = v2[9], (v6 = std::__shared_weak_count::lock(v4)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v7 = v6;
  int v8 = operator new(0x10uLL);
  *int v8 = v2;
  v8[1] = v3;
  uint64_t v9 = v2[11];
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  std::string::size_type v10 = operator new(0x18uLL);
  void *v10 = v8;
  v10[1] = v5;
  v10[2] = v7;
  dispatch_async_f(v9, v10, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<ServiceManager>::execute_wrapped<ServiceManager::shutdownDynamicServices(void)::$_0::operator() const(void)::{lambda(void)#1}>(ServiceManager::shutdownDynamicServices(void)::$_0::operator() const(void)::{lambda(void)#1} &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<ServiceManager::shutdownDynamicServices(void)::$_0::operator() const(void)::{lambda(void)#1},dispatch_queue_s *::default_delete<ServiceManager::shutdownDynamicServices(void)::$_0::operator() const(void)::{lambda(void)#1}>>)::{lambda(void *)#1}::__invoke);
  if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  uint64_t v11 = *((void *)a1 + 2);
  if (v11)
  {
    dispatch_group_leave(v11);
    BOOL v12 = *((void *)a1 + 2);
    if (v12) {
      dispatch_release(v12);
    }
  }
  uint64_t v13 = *((void *)a1 + 1);
  if (v13) {
    dispatch_release(v13);
  }

  operator delete(a1);
}

void dispatch::async<void ctu::SharedSynchronizable<ServiceManager>::execute_wrapped<ServiceManager::shutdownDynamicServices(void)::$_0::operator() const(void)::{lambda(void)#1}>(ServiceManager::shutdownDynamicServices(void)::$_0::operator() const(void)::{lambda(void)#1} &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<ServiceManager::shutdownDynamicServices(void)::$_0::operator() const(void)::{lambda(void)#1},dispatch_queue_s *::default_delete<ServiceManager::shutdownDynamicServices(void)::$_0::operator() const(void)::{lambda(void)#1}>>)::{lambda(void *)#1}::__invoke(std::__shared_weak_count **a1)
{
  uint64_t v159 = *MEMORY[0x1E4F143B8];
  unint64_t v133 = *a1;
  uint64_t v1 = (*a1)->__vftable;
  uint64_t v2 = v1[1].~__shared_weak_count;
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = ((char *)v1[3].__on_zero_shared_weak - (char *)v1[3].__get_deleter) >> 4;
    *(_DWORD *)long long buf = 134217984;
    *(void *)&uint8_t buf[4] = v3;
    _os_log_impl(&dword_1C5767000, v2, OS_LOG_TYPE_DEFAULT, "#I Shutdown %zd dynamic services", buf, 0xCu);
  }
  atomic_store(1u, (unsigned __int8 *)&v1[4].__on_zero_shared_weak);
  v146 = 0;
  uint64_t v147 = 0;
  v145 = &v146;
  on_zero_shared_weak = v1[3].__on_zero_shared_weak;
  if (on_zero_shared_weak == (void (__cdecl *)(std::__shared_weak_count *__hidden))v1[3].__get_deleter) {
    goto LABEL_189;
  }
  while (2)
  {
    memset(buf, 170, 24);
    uint64_t v5 = *((void *)on_zero_shared_weak - 2);
    on_zero_shared_weak = (void (__cdecl *)(std::__shared_weak_count *__hidden))((char *)on_zero_shared_weak - 16);
    (*(void (**)(uint8_t *__return_ptr))(*(void *)v5 + 24))(buf);
    uint64_t v6 = *(unsigned __int8 **)buf;
    v139 = *(unsigned __int8 **)&buf[8];
    v137 = on_zero_shared_weak;
    if (*(void *)buf == *(void *)&buf[8])
    {
      if (*(void *)buf) {
        goto LABEL_73;
      }
      goto LABEL_5;
    }
    do
    {
      while (1)
      {
        unsigned int v7 = *v6;
        int v8 = v146;
        uint64_t v9 = &v146;
LABEL_12:
        std::string::size_type v10 = v9;
        if (v8) {
          break;
        }
LABEL_17:
        BOOL v12 = operator new(0x40uLL);
        uint64_t v13 = v12;
        *((unsigned char *)v12 + 32) = v7;
        v12[6] = 0;
        v12[7] = 0;
        v12[5] = 0;
        *BOOL v12 = 0;
        v12[1] = 0;
        v12[2] = v9;
        void *v10 = v12;
        size_t v14 = v12;
        if (*v145)
        {
          v145 = (void **)*v145;
          size_t v14 = (void *)*v10;
        }
        size_t v15 = v146;
        BOOL v16 = v14 == v146;
        *((unsigned char *)v14 + 24) = v14 == v146;
        if (!v16)
        {
          do
          {
            uint64_t v17 = v14[2];
            if (*(unsigned char *)(v17 + 24)) {
              break;
            }
            uint64_t v18 = *(void **)(v17 + 16);
            uint64_t v19 = *v18;
            if (*v18 == v17)
            {
              uint64_t v22 = v18[1];
              if (!v22 || (v23 = *(unsigned __int8 *)(v22 + 24), uint64_t v20 = (unsigned char *)(v22 + 24), v23))
              {
                if (*(void **)v17 == v14)
                {
                  *(unsigned char *)(v17 + 24) = 1;
                  *((unsigned char *)v18 + 24) = 0;
                  uint64_t v26 = *(void *)(v17 + 8);
                  *uint64_t v18 = v26;
                  if (v26) {
                    goto LABEL_34;
                  }
                }
                else
                {
                  dispatch_time_t v24 = *(uint64_t **)(v17 + 8);
                  uint64_t v25 = *v24;
                  *(void *)(v17 + 8) = *v24;
                  if (v25)
                  {
                    *(void *)(v25 + 16) = v17;
                    uint64_t v18 = *(void **)(v17 + 16);
                  }
                  v24[2] = (uint64_t)v18;
                  *(void *)(*(void *)(v17 + 16) + 8 * (**(void **)(v17 + 16) != v17)) = v24;
                  *dispatch_time_t v24 = v17;
                  *(void *)(v17 + 16) = v24;
                  uint64_t v18 = (void *)v24[2];
                  uint64_t v17 = *v18;
                  *((unsigned char *)v24 + 24) = 1;
                  *((unsigned char *)v18 + 24) = 0;
                  uint64_t v26 = *(void *)(v17 + 8);
                  *uint64_t v18 = v26;
                  if (v26) {
LABEL_34:
                  }
                    *(void *)(v26 + 16) = v18;
                }
                *(void *)(v17 + 16) = v18[2];
                *(void *)(v18[2] + 8 * (*(void *)v18[2] != (void)v18)) = v17;
                *(void *)(v17 + 8) = v18;
LABEL_42:
                v18[2] = v17;
                break;
              }
            }
            else if (!v19 || (int v21 = *(unsigned __int8 *)(v19 + 24), v20 = (unsigned char *)(v19 + 24), v21))
            {
              if (*(void **)v17 == v14)
              {
                uint64_t v50 = v14[1];
                *(void *)uint64_t v17 = v50;
                if (v50)
                {
                  *(void *)(v50 + 16) = v17;
                  uint64_t v18 = *(void **)(v17 + 16);
                }
                v14[2] = v18;
                *(void *)(*(void *)(v17 + 16) + 8 * (**(void **)(v17 + 16) != v17)) = v14;
                v14[1] = v17;
                *(void *)(v17 + 16) = v14;
                uint64_t v18 = (void *)v14[2];
                *((unsigned char *)v14 + 24) = 1;
                *((unsigned char *)v18 + 24) = 0;
                uint64_t v17 = v18[1];
                uint64_t v30 = *(void **)v17;
                v18[1] = *(void *)v17;
                if (v30) {
LABEL_40:
                }
                  v30[2] = v18;
              }
              else
              {
                *(unsigned char *)(v17 + 24) = 1;
                *((unsigned char *)v18 + 24) = 0;
                uint64_t v17 = v18[1];
                uint64_t v30 = *(void **)v17;
                v18[1] = *(void *)v17;
                if (v30) {
                  goto LABEL_40;
                }
              }
              *(void *)(v17 + 16) = v18[2];
              *(void *)(v18[2] + 8 * (*(void *)v18[2] != (void)v18)) = v17;
              *(void *)uint64_t v17 = v18;
              goto LABEL_42;
            }
            *(unsigned char *)(v17 + 24) = 1;
            size_t v14 = v18;
            *((unsigned char *)v18 + 24) = v18 == v15;
            unsigned char *v20 = 1;
          }
          while (v18 != v15);
        }
        ++v147;
        uint64_t v27 = *(void *)on_zero_shared_weak;
        uint64_t v29 = (char *)v12[6];
        unint64_t v28 = (char *)v12[7];
        if (v29 >= v28) {
          goto LABEL_44;
        }
LABEL_9:
        *(void *)uint64_t v29 = v27;
        void v13[6] = v29 + 8;
        if (++v6 == v139) {
          goto LABEL_72;
        }
      }
      while (1)
      {
        uint64_t v9 = (void **)v8;
        unsigned int v11 = *((unsigned __int8 *)v8 + 32);
        if (v7 < v11)
        {
          int v8 = *v9;
          goto LABEL_12;
        }
        if (v11 >= v7) {
          break;
        }
        int v8 = v9[1];
        if (!v8)
        {
          std::string::size_type v10 = v9 + 1;
          goto LABEL_17;
        }
      }
      uint64_t v13 = v9;
      uint64_t v27 = *(void *)on_zero_shared_weak;
      uint64_t v29 = (char *)v9[6];
      unint64_t v28 = (char *)v9[7];
      if (v29 < v28) {
        goto LABEL_9;
      }
LABEL_44:
      uint64_t v31 = v1;
      long long v32 = (char *)v13[5];
      uint64_t v33 = (v29 - v32) >> 3;
      unint64_t v34 = v33 + 1;
      if ((unint64_t)(v33 + 1) >> 61) {
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v35 = v28 - v32;
      if (v35 >> 2 > v34) {
        unint64_t v34 = v35 >> 2;
      }
      if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v36 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v36 = v34;
      }
      if (v36)
      {
        if (v36 >> 61) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        long long v37 = (char *)operator new(8 * v36);
        size_t v38 = &v37[8 * v33];
        *(void *)size_t v38 = v27;
        uint64_t v39 = (uint64_t)(v38 + 8);
        std::string::size_type v40 = (char *)(v29 - v32);
        if (v29 == v32)
        {
LABEL_62:
          v13[5] = v38;
          void v13[6] = v39;
          v13[7] = &v37[8 * v36];
          uint64_t v1 = v31;
          if (!v29) {
            goto LABEL_64;
          }
LABEL_63:
          operator delete(v29);
          goto LABEL_64;
        }
      }
      else
      {
        long long v37 = 0;
        size_t v38 = (char *)(8 * v33);
        *(void *)(8 * v33) = v27;
        uint64_t v39 = 8 * v33 + 8;
        std::string::size_type v40 = (char *)(v29 - v32);
        if (v29 == v32) {
          goto LABEL_62;
        }
      }
      unint64_t v41 = (unint64_t)(v40 - 8);
      if (v41 < 0x58) {
        goto LABEL_231;
      }
      if ((unint64_t)(v32 - v37) < 0x20) {
        goto LABEL_231;
      }
      uint64_t v42 = (v41 >> 3) + 1;
      uint64_t v43 = 8 * (v42 & 0x3FFFFFFFFFFFFFFCLL);
      xpc_object_t v44 = &v29[-v43];
      v38 -= v43;
      uint64_t v45 = &v37[8 * v33 - 16];
      uint64_t v46 = v29 - 16;
      uint64_t v47 = v42 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v48 = *(_OWORD *)v46;
        *((_OWORD *)v45 - 1) = *((_OWORD *)v46 - 1);
        *(_OWORD *)uint64_t v45 = v48;
        v45 -= 32;
        v46 -= 32;
        v47 -= 4;
      }
      while (v47);
      uint64_t v29 = v44;
      if (v42 != (v42 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_231:
        do
        {
          uint64_t v49 = *((void *)v29 - 1);
          v29 -= 8;
          *((void *)v38 - 1) = v49;
          v38 -= 8;
        }
        while (v29 != v32);
      }
      uint64_t v29 = (char *)v13[5];
      v13[5] = v38;
      void v13[6] = v39;
      v13[7] = &v37[8 * v36];
      uint64_t v1 = v31;
      if (v29) {
        goto LABEL_63;
      }
LABEL_64:
      on_zero_shared_weak = v137;
      void v13[6] = v39;
      ++v6;
    }
    while (v6 != v139);
LABEL_72:
    uint64_t v6 = *(unsigned __int8 **)buf;
    if (*(void *)buf)
    {
LABEL_73:
      *(void *)&uint8_t buf[8] = v6;
      operator delete(v6);
    }
LABEL_5:
    if (on_zero_shared_weak != (void (__cdecl *)(std::__shared_weak_count *__hidden))v1[3].__get_deleter) {
      continue;
    }
    break;
  }
  uint64_t v51 = v145;
  if (v145 == &v146) {
    goto LABEL_189;
  }
  uint64_t v134 = *MEMORY[0x1E4FBA418];
  uint64_t v135 = *(void *)(MEMORY[0x1E4FBA418] + 24);
  while (2)
  {
    uint64_t v52 = dispatch_group_create();
    size_t v53 = operator new(0x38uLL);
    std::string::size_type v54 = v53;
    v53[1] = 0;
    v136 = v53 + 1;
    v138 = (std::__shared_weak_count *)v53;
    v53[2] = 0;
    *size_t v53 = &unk_1F20FC5C0;
    v53[3] = v52;
    uint64_t v55 = (NSObject **)(v53 + 3);
    if (v52)
    {
      dispatch_retain(v52);
      v54[4] = 0;
      v54[5] = 0;
      v54[6] = 0;
      dispatch_release(v52);
    }
    else
    {
      v53[4] = 0;
      v53[5] = 0;
      v53[6] = 0;
    }
    uint64_t v56 = v51[5];
    uint64_t v57 = v51[6];
    while (2)
    {
      if (v56 != v57)
      {
        uint64_t v58 = v1[1].~__shared_weak_count;
        if (os_log_type_enabled(v58, OS_LOG_TYPE_DEFAULT))
        {
          unint64_t v59 = *((char *)v51 + 32);
          uint64_t v60 = "???";
          if (v59 <= 3) {
            uint64_t v60 = off_1E6518020[v59];
          }
          uint64_t v61 = (*(uint64_t (**)(void))(*(void *)*v56 + 16))();
          *(_DWORD *)long long buf = 136315394;
          *(void *)&uint8_t buf[4] = v60;
          *(_WORD *)&buf[12] = 2080;
          *(void *)&buf[14] = v61;
          _os_log_impl(&dword_1C5767000, v58, OS_LOG_TYPE_DEFAULT, "#I Shutdown dynamic service: Stage=%s Service=%s", buf, 0x16u);
        }
        dispatch_object_t object = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
        long long v62 = (const char *)(*(uint64_t (**)(void))(*(void *)*v56 + 16))();
        size_t v63 = strlen(v62);
        if (v63 > 0x7FFFFFFFFFFFFFF7) {
          std::string::__throw_length_error[abi:ne180100]();
        }
        size_t v64 = v63;
        if (v63 >= 0x17)
        {
          uint64_t v66 = (v63 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v63 | 7) != 0x17) {
            uint64_t v66 = v63 | 7;
          }
          uint64_t v67 = v66 + 1;
          p_dst = (long long *)operator new(v66 + 1);
          *((void *)&__dst + 1) = v64;
          unint64_t v143 = v67 | 0x8000000000000000;
          *(void *)&long long __dst = p_dst;
        }
        else
        {
          HIBYTE(v143) = v63;
          p_dst = &__dst;
          if (!v63) {
            goto LABEL_95;
          }
        }
        memmove(p_dst, v62, v64);
LABEL_95:
        *((unsigned char *)p_dst + v64) = 0;
        *(_OWORD *)std::string __p = __dst;
        xpc_object_t v149 = (void *)v143;
        long long __dst = 0uLL;
        unint64_t v143 = 0;
        memset(buf, 0, sizeof(buf));
        long long v152 = 0u;
        ctu::TrackedGroup::fork(&object, (uint64_t)v55, (uint64_t)__p, (uint64_t)buf);
        if (*((void *)&v152 + 1) && *(void *)buf)
        {
          v140.__r_.__value_.__r.__words[0] = *(void *)&buf[8];
          *(void *)v150 = *(void *)buf;
          (*(void (**)(void))(**((void **)&v152 + 1) + 48))();
        }
        if (*(void *)&buf[8]) {
          os_release(*(void **)&buf[8]);
        }
        uint64_t v68 = (uint8_t *)*((void *)&v152 + 1);
        *(void *)&uint8_t buf[8] = 0;
        *((void *)&v152 + 1) = 0;
        if (v68 == &buf[16])
        {
          (*(void (**)(uint8_t *))(*(void *)&buf[16] + 32))(&buf[16]);
          uint64_t v69 = *((void *)&v152 + 1);
          *(void *)long long buf = 0;
          if (*((uint8_t **)&v152 + 1) == &buf[16]) {
            goto LABEL_108;
          }
LABEL_103:
          if (v69)
          {
            (*(void (**)(uint64_t))(*(void *)v69 + 40))(v69);
            if (SHIBYTE(v149) < 0) {
              goto LABEL_105;
            }
          }
          else
          {
LABEL_109:
            if (SHIBYTE(v149) < 0) {
              goto LABEL_105;
            }
          }
        }
        else
        {
          if (v68)
          {
            (*(void (**)(uint8_t *))(*(void *)v68 + 40))(v68);
            uint64_t v69 = *((void *)&v152 + 1);
            *(void *)long long buf = 0;
            if (*((uint8_t **)&v152 + 1) != &buf[16]) {
              goto LABEL_103;
            }
LABEL_108:
            (*(void (**)(uint8_t *))(*(void *)&buf[16] + 32))(&buf[16]);
            goto LABEL_109;
          }
          *(void *)long long buf = 0;
          if (SHIBYTE(v149) < 0)
          {
LABEL_105:
            operator delete(__p[0]);
            uint64_t v70 = *v56;
            uint64_t v71 = *((unsigned __int8 *)v51 + 32);
            long long v72 = object;
            dispatch_group_t group = object;
            if (!object)
            {
LABEL_113:
              (*(void (**)(uint64_t, uint64_t, dispatch_group_t *))(*(void *)v70 + 72))(v70, v71, &group);
              if (group)
              {
                dispatch_group_leave(group);
                if (group) {
                  dispatch_release(group);
                }
              }
              if (v72)
              {
                dispatch_group_leave(v72);
                dispatch_release(v72);
              }
              ++v56;
              continue;
            }
LABEL_111:
            dispatch_retain(v72);
            if (group) {
              dispatch_group_enter(group);
            }
            goto LABEL_113;
          }
        }
        uint64_t v70 = *v56;
        uint64_t v71 = *((unsigned __int8 *)v51 + 32);
        long long v72 = object;
        dispatch_group_t group = object;
        if (!object) {
          goto LABEL_113;
        }
        goto LABEL_111;
      }
      break;
    }
    long long v73 = *v55;
    uint64_t v74 = (*((uint64_t (**)(std::__shared_weak_count_vtbl *, void))v1->~__shared_weak_count + 15))(v1, *((unsigned __int8 *)v51 + 32));
    dispatch_time_t v75 = dispatch_time(0, 1000000000 * v74);
    unint64_t v76 = v138;
    if (dispatch_group_wait(v73, v75))
    {
      __p[0] = 0;
      __p[1] = 0;
      xpc_object_t v149 = 0;
      shared_owners = (uint64_t *)v138[1].__shared_owners_;
      shared_weak_owners = (uint64_t *)v138[1].__shared_weak_owners_;
      while (shared_owners != shared_weak_owners)
      {
        uint64_t v79 = (std::__shared_weak_count *)shared_owners[1];
        if (v79)
        {
          std::string::size_type v80 = std::__shared_weak_count::lock(v79);
          if (v80)
          {
            std::string::size_type v81 = v80;
            uint64_t v82 = *shared_owners;
            if (*shared_owners)
            {
              long long v83 = __p[1];
              if (__p[1] >= v149)
              {
                long long v85 = std::vector<std::string>::__emplace_back_slow_path<std::string const&>((char **)__p, v82);
              }
              else
              {
                if (*(char *)(v82 + 23) < 0)
                {
                  std::string::__init_copy_ctor_external((std::string *)__p[1], *(const std::string::value_type **)v82, *(void *)(v82 + 8));
                }
                else
                {
                  long long v84 = *(_OWORD *)v82;
                  *((void *)__p[1] + 2) = *(void *)(v82 + 16);
                  *long long v83 = v84;
                }
                long long v85 = (std::string *)((char *)v83 + 24);
              }
              __p[1] = v85;
            }
            if (!atomic_fetch_add(&v81->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
              std::__shared_weak_count::__release_weak(v81);
            }
          }
        }
        shared_owners += 2;
      }
      unint64_t v158 = 0xAAAAAAAAAAAAAAAALL;
      *(void *)&long long v86 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v86 + 1) = 0xAAAAAAAAAAAAAAAALL;
      v157[7] = v86;
      v157[8] = v86;
      v157[5] = v86;
      v157[6] = v86;
      v157[3] = v86;
      v157[4] = v86;
      v157[1] = v86;
      v157[2] = v86;
      long long v156 = v86;
      v157[0] = v86;
      *(_OWORD *)v154 = v86;
      long long v155 = v86;
      long long v152 = v86;
      long long v153 = v86;
      *(_OWORD *)long long buf = v86;
      *(_OWORD *)&uint8_t buf[16] = v86;
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)buf);
      long long v87 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(buf, (uint64_t)"Shutdown dynamic service: Stage=", 32);
      unint64_t v88 = *((char *)v51 + 32);
      unint64_t v89 = "???";
      if (v88 <= 3) {
        unint64_t v89 = off_1E6518020[v88];
      }
      size_t v90 = strlen(v89);
      xpc_object_t v91 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v87, (uint64_t)v89, v90);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v91, (uint64_t)" TIMEOUT: ", 10);
      uint64_t v92 = (void *)std::ostream::operator<<();
      xpc_object_t v93 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v92, (uint64_t)" clients failed to complete shutdown stage: ", 44);
      ctu::join<std::__wrap_iter<std::string *>>(&v140, (std::string *)__p[0], (long long *)__p[1]);
      if ((v140.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v94 = &v140;
      }
      else {
        uint64_t v94 = (std::string *)v140.__r_.__value_.__r.__words[0];
      }
      size_t v95 = strlen((const char *)v94);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v93, (uint64_t)v94, v95);
      if (SHIBYTE(v140.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v140.__r_.__value_.__l.__data_);
        xpc_object_t v96 = v1[1].~__shared_weak_count;
        if (!os_log_type_enabled(v96, OS_LOG_TYPE_ERROR)) {
          goto LABEL_170;
        }
      }
      else
      {
        xpc_object_t v96 = v1[1].~__shared_weak_count;
        if (!os_log_type_enabled(v96, OS_LOG_TYPE_ERROR)) {
          goto LABEL_170;
        }
      }
      if ((BYTE8(v156) & 0x10) != 0)
      {
        uint64_t v101 = v156;
        uint64_t v102 = (const void **)&v153;
        if ((unint64_t)v156 < *((void *)&v153 + 1))
        {
          *(void *)&long long v156 = *((void *)&v153 + 1);
          uint64_t v101 = *((void *)&v153 + 1);
          uint64_t v102 = (const void **)&v153;
        }
LABEL_158:
        xpc_object_t v103 = *v102;
        std::string::size_type v104 = v101 - (void)*v102;
        if (v104 > 0x7FFFFFFFFFFFFFF7) {
          std::string::__throw_length_error[abi:ne180100]();
        }
        if (v104 >= 0x17)
        {
          uint64_t v106 = (v104 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v104 | 7) != 0x17) {
            uint64_t v106 = v104 | 7;
          }
          uint64_t v107 = v106 + 1;
          xpc_object_t v105 = (std::string *)operator new(v106 + 1);
          v140.__r_.__value_.__l.__size_ = v104;
          v140.__r_.__value_.__r.__words[2] = v107 | 0x8000000000000000;
          v140.__r_.__value_.__r.__words[0] = (std::string::size_type)v105;
        }
        else
        {
          *((unsigned char *)&v140.__r_.__value_.__s + 23) = v101 - *(unsigned char *)v102;
          xpc_object_t v105 = &v140;
          if (!v104) {
            goto LABEL_166;
          }
        }
        memmove(v105, v103, v104);
      }
      else
      {
        if ((BYTE8(v156) & 8) != 0)
        {
          uint64_t v101 = *((void *)&v152 + 1);
          uint64_t v102 = (const void **)&buf[24];
          goto LABEL_158;
        }
        std::string::size_type v104 = 0;
        *((unsigned char *)&v140.__r_.__value_.__s + 23) = 0;
        xpc_object_t v105 = &v140;
      }
LABEL_166:
      v105->__r_.__value_.__s.__data_[v104] = 0;
      xpc_object_t v108 = &v140;
      if ((v140.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        xpc_object_t v108 = (std::string *)v140.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)v150 = 136315138;
      *(void *)&v150[4] = v108;
      _os_log_error_impl(&dword_1C5767000, v96, OS_LOG_TYPE_ERROR, "%s", v150, 0xCu);
      if (SHIBYTE(v140.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v140.__r_.__value_.__l.__data_);
      }
LABEL_170:
      *(void *)long long buf = v134;
      *(void *)&buf[*(void *)(v134 - 24)] = v135;
      *(void *)&uint8_t buf[8] = MEMORY[0x1E4FBA470] + 16;
      if (SHIBYTE(v155) < 0) {
        operator delete(v154[1]);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x1C8791FB0](v157);
      xpc_object_t v109 = (void **)__p[0];
      if (__p[0])
      {
        dispatch_group_t v110 = (void **)__p[1];
        xpc_object_t v111 = __p[0];
        if (__p[1] != __p[0])
        {
          do
          {
            if (*((char *)v110 - 1) < 0) {
              operator delete(*(v110 - 3));
            }
            v110 -= 3;
          }
          while (v110 != v109);
          xpc_object_t v111 = __p[0];
        }
        __p[1] = v109;
        operator delete(v111);
      }
      unint64_t v76 = v138;
      if (!atomic_fetch_add(v136, 0xFFFFFFFFFFFFFFFFLL))
      {
LABEL_181:
        ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
        std::__shared_weak_count::__release_weak(v76);
        xpc_object_t v100 = v51[1];
        if (v100) {
          goto LABEL_182;
        }
        do
        {
LABEL_184:
          xpc_object_t v112 = (void **)v51[2];
          BOOL v16 = *v112 == v51;
          uint64_t v51 = v112;
        }
        while (!v16);
        goto LABEL_76;
      }
    }
    else
    {
      uint64_t v97 = v1[1].~__shared_weak_count;
      if (os_log_type_enabled(v97, OS_LOG_TYPE_DEFAULT))
      {
        unint64_t v98 = *((char *)v51 + 32);
        v99 = "???";
        if (v98 <= 3) {
          v99 = off_1E6518020[v98];
        }
        *(_DWORD *)long long buf = 136315138;
        *(void *)&uint8_t buf[4] = v99;
        _os_log_impl(&dword_1C5767000, v97, OS_LOG_TYPE_DEFAULT, "#I Shutdown dynamic service: Stage=%s SUCCESS", buf, 0xCu);
        if (!atomic_fetch_add(v136, 0xFFFFFFFFFFFFFFFFLL)) {
          goto LABEL_181;
        }
      }
      else if (!atomic_fetch_add(v136, 0xFFFFFFFFFFFFFFFFLL))
      {
        goto LABEL_181;
      }
    }
    xpc_object_t v100 = v51[1];
    if (!v100) {
      goto LABEL_184;
    }
    do
    {
LABEL_182:
      xpc_object_t v112 = (void **)v100;
      xpc_object_t v100 = (void *)*v100;
    }
    while (v100);
LABEL_76:
    uint64_t v51 = v112;
    if (v112 != &v146) {
      continue;
    }
    break;
  }
  on_zero_shared_weak = (void (__cdecl *)(std::__shared_weak_count *__hidden))v1[3].__get_deleter;
LABEL_189:
  if (v1[3].__on_zero_shared_weak != on_zero_shared_weak)
  {
    on_zero_shared_weak = v1[3].__on_zero_shared_weak;
    do
    {
      xpc_object_t v114 = on_zero_shared_weak;
      uint64_t v115 = *((void *)on_zero_shared_weak - 2);
      on_zero_shared_weak = (void (__cdecl *)(std::__shared_weak_count *__hidden))((char *)on_zero_shared_weak - 16);
      memset(buf, 0, 24);
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(buf, *(void *)(v115 + 24), *(void *)(v115 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v115 + 32) - *(void *)(v115 + 24)) >> 3));
      uint64_t v116 = (uint64_t)v1[4].~__shared_weak_count_0;
      __p[1] = 0;
      xpc_object_t v149 = 0;
      __p[0] = 0;
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(__p, *(uint64_t *)buf, *(uint64_t *)&buf[8], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)&buf[8] - *(void *)buf) >> 3));
      ServiceCtrl::clearCommandHandlers(v116, (uint64_t)__p[0], (uint64_t)__p[1]);
      std::string v117 = (void **)__p[0];
      if (__p[0])
      {
        xpc_object_t v118 = (void **)__p[1];
        long long v119 = __p[0];
        if (__p[1] != __p[0])
        {
          do
          {
            if (*((char *)v118 - 1) < 0) {
              operator delete(*(v118 - 3));
            }
            v118 -= 3;
          }
          while (v118 != v117);
          long long v119 = __p[0];
        }
        __p[1] = v117;
        operator delete(v119);
      }
      uint64_t v120 = *(void *)buf;
      if (*(void *)buf)
      {
        uint64_t v121 = *(void *)&buf[8];
        xpc_object_t v113 = *(void **)buf;
        if (*(void *)&buf[8] != *(void *)buf)
        {
          do
          {
            if (*(char *)(v121 - 1) < 0) {
              operator delete(*(void **)(v121 - 24));
            }
            v121 -= 24;
          }
          while (v121 != v120);
          xpc_object_t v113 = *(void **)buf;
        }
        *(void *)&uint8_t buf[8] = v120;
        operator delete(v113);
      }
    }
    while (on_zero_shared_weak != (void (__cdecl *)(std::__shared_weak_count *__hidden))v1[3].__get_deleter);
    long long v122 = v1[3].__on_zero_shared_weak;
    if (v122 != on_zero_shared_weak)
    {
      long long v123 = (void (__cdecl *)(std::__shared_weak_count *__hidden))((char *)v122 + 16);
      do
      {
        long long v124 = (std::__shared_weak_count *)*((void *)v123 - 3);
        if (v124 && !atomic_fetch_add(&v124->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
          std::__shared_weak_count::__release_weak(v124);
        }
        long long v123 = (void (__cdecl *)(std::__shared_weak_count *__hidden))((char *)v123 - 16);
      }
      while (v123 != v114);
    }
  }
  v1[3].__on_zero_shared_weak = on_zero_shared_weak;
  get_deleter = v1[2].__get_deleter;
  *(void *)long long buf = operator new(0x30uLL);
  *(_OWORD *)&uint8_t buf[8] = xmmword_1C599E870;
  strcpy(*(char **)buf, "com.apple.AppleBasebandManager.ServerNotReady");
  (*(void (**)(const void *(__cdecl *)(const std::__shared_weak_count *__hidden, const std::type_info *), uint8_t *))(*(void *)get_deleter + 32))(get_deleter, buf);
  if ((char)buf[23] < 0) {
    operator delete(*(void **)buf);
  }
  (*(void (**)(const void *(__cdecl *)(const std::__shared_weak_count *__hidden, const std::type_info *)))(*(void *)v1[2].__get_deleter + 8))(v1[2].__get_deleter);
  long long v126 = v1[1].~__shared_weak_count;
  if (os_log_type_enabled(v126, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v140.__r_.__value_.__l.__data_) = 0;
    _os_log_impl(&dword_1C5767000, v126, OS_LOG_TYPE_DEFAULT, "#I All dynamic services have shutdown", (uint8_t *)&v140, 2u);
  }
  std::__tree<std::__value_type<unsigned char,std::vector<unsigned char>>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,std::vector<unsigned char>>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,std::vector<unsigned char>>>>::destroy(v146);
  long long v127 = v133;
  long long v128 = v133->__shared_owners_;
  if (v128)
  {
    dispatch_group_leave(v128);
    long long v127 = v133;
    long long v129 = v133->__shared_owners_;
    if (v129)
    {
      dispatch_release(v129);
      long long v127 = v133;
    }
  }
  operator delete(v127);
  long long v130 = a1;
  long long v131 = a1[2];
  if (v131 && !atomic_fetch_add(&v131->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
    std::__shared_weak_count::__release_weak(v131);
    long long v130 = a1;
  }
  operator delete(v130);
}

void sub_1C58FABB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count **a10, NSObject **a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,dispatch_group_t group,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *__p,uint64_t a44,int a45,__int16 a46,char a47,char a48)
{
  if (a48 < 0) {
    operator delete(__p);
  }
  std::__tree<std::__value_type<unsigned char,std::vector<unsigned char>>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,std::vector<unsigned char>>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,std::vector<unsigned char>>>>::destroy(a35);
  uint64_t v49 = a11;
  uint64_t v50 = a11[1];
  if (v50)
  {
    dispatch_group_leave(v50);
    uint64_t v49 = a11;
    uint64_t v51 = a11[1];
    if (v51)
    {
      dispatch_release(v51);
      uint64_t v49 = a11;
    }
  }
  operator delete(v49);
  uint64_t v52 = a10;
  size_t v53 = a10[2];
  if (v53)
  {
    if (!atomic_fetch_add(&v53->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
      uint64_t v52 = a10;
    }
  }
  operator delete(v52);
  _Unwind_Resume(a1);
}

void AudioManager::create(AudioManager *this@<X0>, AudioManager **a2@<X8>)
{
  uint64_t v5 = (AudioManager *)operator new(0x98uLL);
  AudioManager::AudioManager(v5, (const char *)this);
  uint64_t v6 = (std::__shared_weak_count *)operator new(0x20uLL);
  v6->__shared_owners_ = 0;
  p_shared_owners = &v6->__shared_owners_;
  v6->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20FC678;
  v6->__shared_weak_owners_ = 0;
  v6[1].__vftable = (std::__shared_weak_count_vtbl *)v5;
  *(void *)long long buf = 0;
  int v8 = (std::__shared_weak_count *)*((void *)v5 + 2);
  if (!v8)
  {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    *((void *)v5 + 1) = v5;
    *((void *)v5 + 2) = v6;
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v8->__shared_owners_ == -1)
  {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    *((void *)v5 + 1) = v5;
    *((void *)v5 + 2) = v6;
    std::__shared_weak_count::__release_weak(v8);
    if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL))
    {
LABEL_6:
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
LABEL_7:
  if (*(void *)buf)
  {
    AudioManager::~AudioManager(*(AudioManager **)buf);
    operator delete(v9);
  }
  if (v5)
  {
    *a2 = v5;
    a2[1] = (AudioManager *)v6;
    return;
  }
  std::string::size_type v10 = GetOsLogContext()[1];
  if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)long long buf = 0;
    _os_log_error_impl(&dword_1C5767000, v10, OS_LOG_TYPE_ERROR, "Failed to create Audio Manager!", buf, 2u);
    *a2 = 0;
    a2[1] = 0;
    unsigned int v11 = v6;
    if (!v6) {
      return;
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
    unsigned int v11 = v6;
    if (!v6) {
      return;
    }
  }
  if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
}

void sub_1C58FB194(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1C58FB1A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::unique_ptr<AudioManager>::~unique_ptr[abi:ne180100]((AudioManager **)va);
  _Unwind_Resume(a1);
}

void sub_1C58FB1BC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t AudioManager::init(AudioManager *this)
{
  return 1;
}

void AudioManager::AudioManager(AudioManager *this, const char *__s)
{
  size_t v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  std::string::size_type v5 = v4;
  if (v4 >= 0x17)
  {
    uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v7 = v4 | 7;
    }
    uint64_t v8 = v7 + 1;
    p_dst = (std::string *)operator new(v7 + 1);
    __dst.__r_.__value_.__l.__size_ = v5;
    __dst.__r_.__value_.__r.__words[2] = v8 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_8;
  }
  *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v4;
  p_dst = &__dst;
  if (v4) {
LABEL_8:
  }
    memcpy(p_dst, __s, v5);
  p_dst->__r_.__value_.__s.__data_[v5] = 0;
  uint64_t v9 = std::string::append(&__dst, ".", 1uLL);
  long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v15.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v15.__r_.__value_.__l.__data_ = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  unsigned int v11 = std::string::append(&v15, "AudioManager", 0xCuLL);
  long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  int64_t v17 = v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  if (v17 >= 0) {
    uint64_t v13 = __p;
  }
  else {
    uint64_t v13 = (void **)__p[0];
  }
  ctu::OsLogLogger::OsLogLogger(this, "com.apple.telephony.abm", (const char *)v13);
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v15.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_14;
    }
LABEL_17:
    operator delete(v15.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_15;
    }
LABEL_18:
    operator delete(__dst.__r_.__value_.__l.__data_);
    goto LABEL_15;
  }
  operator delete(__p[0]);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_17;
  }
LABEL_14:
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_18;
  }
LABEL_15:
  *((void *)this + 16) = 0;
  *((void *)this + 17) = 0;
  *((void *)this + 18) = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *((unsigned char *)this + 24) = 0;
  *((void *)this + 5) = 0;
  *((void *)this + 6) = 0;
  *((void *)this + 4) = 0;
  *((unsigned char *)this + 56) = 0;
  *((void *)this + 9) = 0;
  *((void *)this + 10) = 0;
  *((void *)this + 8) = 0;
  *((unsigned char *)this + 88) = 0;
  *((void *)this + 13) = 0;
  *((void *)this + 14) = 0;
  *((void *)this + 12) = 0;
  *((unsigned char *)this + 120) = 0;
}

void sub_1C58FB38C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a15 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  if ((a15 & 0x80000000) == 0) {
LABEL_4:
  }
    _Unwind_Resume(exception_object);
LABEL_7:
  operator delete(a10);
  _Unwind_Resume(exception_object);
}

void AudioManager::~AudioManager(AudioManager *this)
{
  uint64_t v2 = *((void *)this + 4);
  for (uint64_t i = *((void *)this + 5); i != v2; i -= 16)
  {
    size_t v4 = *(NSObject **)(i - 8);
    if (v4) {
      dispatch_release(v4);
    }
    std::string::size_type v5 = *(const void **)(i - 16);
    if (v5) {
      _Block_release(v5);
    }
  }
  *((void *)this + 5) = v2;
  uint64_t v6 = *((void *)this + 8);
  for (uint64_t j = *((void *)this + 9); j != v6; j -= 16)
  {
    uint64_t v8 = *(NSObject **)(j - 8);
    if (v8) {
      dispatch_release(v8);
    }
    uint64_t v9 = *(const void **)(j - 16);
    if (v9) {
      _Block_release(v9);
    }
  }
  *((void *)this + 9) = v6;
  uint64_t v10 = *((void *)this + 12);
  for (uint64_t k = *((void *)this + 13); k != v10; k -= 16)
  {
    long long v12 = *(NSObject **)(k - 8);
    if (v12) {
      dispatch_release(v12);
    }
    uint64_t v13 = *(const void **)(k - 16);
    if (v13) {
      _Block_release(v13);
    }
  }
  *((void *)this + 13) = v10;
  size_t v14 = (char *)*((void *)this + 16);
  std::string v15 = (char *)*((void *)this + 17);
  if (v15 == v14)
  {
    *((void *)this + 17) = v14;
    if (!v15) {
      goto LABEL_24;
    }
  }
  else
  {
    do
    {
      uint64_t v20 = *((void *)v15 - 1);
      if (v20) {
        dispatch_release(v20);
      }
      int v21 = (const void *)*((void *)v15 - 2);
      if (v21) {
        _Block_release(v21);
      }
      v15 -= 16;
    }
    while (v15 != v14);
    std::string v15 = (char *)*((void *)this + 16);
    *((void *)this + 17) = v14;
    if (!v15)
    {
LABEL_24:
      BOOL v16 = (char *)*((void *)this + 12);
      if (!v16) {
        goto LABEL_25;
      }
LABEL_47:
      uint64_t v25 = (char *)*((void *)this + 13);
      if (v25 == v16)
      {
        *((void *)this + 13) = v16;
        operator delete(v16);
        int64_t v17 = (char *)*((void *)this + 8);
        if (v17) {
          goto LABEL_56;
        }
      }
      else
      {
        do
        {
          uint64_t v26 = *((void *)v25 - 1);
          if (v26) {
            dispatch_release(v26);
          }
          uint64_t v27 = (const void *)*((void *)v25 - 2);
          if (v27) {
            _Block_release(v27);
          }
          v25 -= 16;
        }
        while (v25 != v16);
        unint64_t v28 = (void *)*((void *)this + 12);
        *((void *)this + 13) = v16;
        operator delete(v28);
        int64_t v17 = (char *)*((void *)this + 8);
        if (v17) {
          goto LABEL_56;
        }
      }
LABEL_26:
      uint64_t v18 = (char *)*((void *)this + 4);
      if (!v18) {
        goto LABEL_27;
      }
LABEL_65:
      uint64_t v33 = (char *)*((void *)this + 5);
      if (v33 == v18)
      {
        *((void *)this + 5) = v18;
        operator delete(v18);
        uint64_t v19 = (std::__shared_weak_count *)*((void *)this + 2);
        if (!v19) {
          goto LABEL_29;
        }
      }
      else
      {
        do
        {
          unint64_t v34 = *((void *)v33 - 1);
          if (v34) {
            dispatch_release(v34);
          }
          uint64_t v35 = (const void *)*((void *)v33 - 2);
          if (v35) {
            _Block_release(v35);
          }
          v33 -= 16;
        }
        while (v33 != v18);
        unint64_t v36 = (void *)*((void *)this + 4);
        *((void *)this + 5) = v18;
        operator delete(v36);
        uint64_t v19 = (std::__shared_weak_count *)*((void *)this + 2);
        if (!v19)
        {
LABEL_29:
          JUMPOUT(0x1C8790F80);
        }
      }
LABEL_28:
      std::__shared_weak_count::__release_weak(v19);
      goto LABEL_29;
    }
  }
  if (v14 == v15)
  {
    *((void *)this + 17) = v15;
    operator delete(v14);
    BOOL v16 = (char *)*((void *)this + 12);
    if (v16) {
      goto LABEL_47;
    }
  }
  else
  {
    do
    {
      uint64_t v22 = *((void *)v14 - 1);
      if (v22) {
        dispatch_release(v22);
      }
      int v23 = (const void *)*((void *)v14 - 2);
      if (v23) {
        _Block_release(v23);
      }
      v14 -= 16;
    }
    while (v14 != v15);
    dispatch_time_t v24 = (void *)*((void *)this + 16);
    *((void *)this + 17) = v15;
    operator delete(v24);
    BOOL v16 = (char *)*((void *)this + 12);
    if (v16) {
      goto LABEL_47;
    }
  }
LABEL_25:
  int64_t v17 = (char *)*((void *)this + 8);
  if (!v17) {
    goto LABEL_26;
  }
LABEL_56:
  uint64_t v29 = (char *)*((void *)this + 9);
  if (v29 == v17)
  {
    *((void *)this + 9) = v17;
    operator delete(v17);
    uint64_t v18 = (char *)*((void *)this + 4);
    if (v18) {
      goto LABEL_65;
    }
  }
  else
  {
    do
    {
      uint64_t v30 = *((void *)v29 - 1);
      if (v30) {
        dispatch_release(v30);
      }
      uint64_t v31 = (const void *)*((void *)v29 - 2);
      if (v31) {
        _Block_release(v31);
      }
      v29 -= 16;
    }
    while (v29 != v17);
    long long v32 = (void *)*((void *)this + 8);
    *((void *)this + 9) = v17;
    operator delete(v32);
    uint64_t v18 = (char *)*((void *)this + 4);
    if (v18) {
      goto LABEL_65;
    }
  }
LABEL_27:
  uint64_t v19 = (std::__shared_weak_count *)*((void *)this + 2);
  if (!v19) {
    goto LABEL_29;
  }
  goto LABEL_28;
}

uint64_t AudioManager::getAudioOutputState(AudioManager *this)
{
  return *((unsigned __int8 *)this + 56);
}

uint64_t AudioManager::getAudioInputState(AudioManager *this)
{
  return *((unsigned __int8 *)this + 24);
}

void AudioManager::registerAudioInputCallback(void *a1, uint64_t a2)
{
  std::string::size_type v5 = (void *)a1[5];
  unint64_t v4 = a1[6];
  if ((unint64_t)v5 < v4)
  {
    uint64_t v6 = *(void **)a2;
    if (*(void *)a2) {
      uint64_t v6 = _Block_copy(v6);
    }
    uint64_t v7 = *(NSObject **)(a2 + 8);
    *std::string::size_type v5 = v6;
    v5[1] = v7;
    if (v7) {
      dispatch_retain(v7);
    }
    uint64_t v8 = v5 + 2;
    goto LABEL_35;
  }
  uint64_t v9 = a1[4];
  uint64_t v10 = (char *)v5 - v9;
  uint64_t v11 = ((uint64_t)v5 - v9) >> 4;
  if ((unint64_t)(v11 + 1) >> 60) {
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v12 = v4 - v9;
  uint64_t v13 = v12 >> 3;
  if (v12 >> 3 <= (unint64_t)(v11 + 1)) {
    uint64_t v13 = v11 + 1;
  }
  if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v14 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v14 = v13;
  }
  if (v14)
  {
    if (v14 >> 60) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    std::string v15 = (char *)operator new(16 * v14);
    BOOL v16 = *(void **)a2;
    if (!*(void *)a2) {
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  std::string v15 = 0;
  BOOL v16 = *(void **)a2;
  if (*(void *)a2) {
LABEL_18:
  }
    BOOL v16 = _Block_copy(v16);
LABEL_19:
  int64_t v17 = *(NSObject **)(a2 + 8);
  uint64_t v18 = &v15[16 * v11];
  *(void *)uint64_t v18 = v16;
  *((void *)v18 + 1) = v17;
  if (v17) {
    dispatch_retain(v17);
  }
  uint64_t v19 = &v15[16 * v14];
  uint64_t v8 = v18 + 16;
  uint64_t v20 = (char *)a1[4];
  int v21 = (char *)a1[5];
  if (v21 == v20)
  {
    a1[4] = v18;
    a1[5] = v8;
    a1[6] = v19;
  }
  else
  {
    unint64_t v22 = v21 - v20 - 16;
    if (v22 < 0xD0) {
      goto LABEL_23;
    }
    unint64_t v28 = &v21[-(v22 & 0xFFFFFFFFFFFFFFF0)];
    BOOL v29 = &v10[(void)v15 - 8 - (v22 & 0xFFFFFFFFFFFFFFF0)] >= v21 || v28 - 8 >= v18;
    BOOL v30 = !v29;
    if (v28 - 16 < &v10[(void)v15 - 8] && &v10[(void)v15 - (v22 & 0xFFFFFFFFFFFFFFF0) - 16] < v21 - 8) {
      goto LABEL_23;
    }
    if (v30) {
      goto LABEL_23;
    }
    uint64_t v32 = (v22 >> 4) + 1;
    uint64_t v33 = 16 * (v32 & 0x1FFFFFFFFFFFFFFELL);
    int v23 = &v18[-v33];
    unint64_t v34 = &v21[-v33];
    uint64_t v35 = (double *)(v18 - 32);
    unint64_t v36 = (const double *)(v21 - 32);
    uint64_t v37 = v32 & 0x1FFFFFFFFFFFFFFELL;
    do
    {
      float64x2x2_t v38 = vld2q_f64(v36);
      vst2q_f64(v35, v38);
      *(_OWORD *)unint64_t v36 = 0uLL;
      *((_OWORD *)v36 + 1) = 0uLL;
      v36 -= 4;
      v35 -= 4;
      v37 -= 2;
    }
    while (v37);
    uint64_t v18 = v23;
    int v21 = v34;
    if (v32 != (v32 & 0x1FFFFFFFFFFFFFFELL))
    {
LABEL_23:
      int v23 = v18;
      do
      {
        long long v24 = *((_OWORD *)v21 - 1);
        v21 -= 16;
        *((_OWORD *)v23 - 1) = v24;
        v23 -= 16;
        *(void *)int v21 = 0;
        *((void *)v21 + 1) = 0;
      }
      while (v21 != v20);
    }
    int v21 = (char *)a1[4];
    uint64_t v25 = (char *)a1[5];
    a1[4] = v23;
    a1[5] = v8;
    a1[6] = v19;
    while (v25 != v21)
    {
      uint64_t v26 = *((void *)v25 - 1);
      if (v26) {
        dispatch_release(v26);
      }
      uint64_t v27 = (const void *)*((void *)v25 - 2);
      if (v27) {
        _Block_release(v27);
      }
      v25 -= 16;
    }
  }
  if (v21) {
    operator delete(v21);
  }
LABEL_35:
  a1[5] = v8;
}

void *AudioManager::registerAudioOutputCallback(void *a1, void **a2)
{
  unint64_t v4 = (void *)a1[9];
  if ((unint64_t)v4 >= a1[10])
  {
    uint64_t result = std::vector<dispatch::callback<void({block_pointer})(AudioManager::AudioOutputState)>>::__push_back_slow_path<dispatch::callback<void({block_pointer})(AudioManager::AudioOutputState)> const&>(a1 + 8, (uint64_t)a2);
    a1[9] = result;
  }
  else
  {
    std::string::size_type v5 = *a2;
    if (*a2) {
      std::string::size_type v5 = _Block_copy(v5);
    }
    uint64_t v6 = a2[1];
    void *v4 = v5;
    v4[1] = v6;
    if (v6) {
      dispatch_retain(v6);
    }
    uint64_t result = v4 + 2;
    a1[9] = v4 + 2;
  }
  return result;
}

void *AudioManager::registerAudioSpeakerCallback(void *a1, void **a2)
{
  unint64_t v4 = (void *)a1[13];
  if ((unint64_t)v4 >= a1[14])
  {
    uint64_t result = std::vector<dispatch::callback<void({block_pointer})(BOOL)>>::__push_back_slow_path<dispatch::callback<void({block_pointer})(BOOL)> const&>(a1 + 12, (uint64_t)a2);
    a1[13] = result;
  }
  else
  {
    std::string::size_type v5 = *a2;
    if (*a2) {
      std::string::size_type v5 = _Block_copy(v5);
    }
    uint64_t v6 = a2[1];
    void *v4 = v5;
    v4[1] = v6;
    if (v6) {
      dispatch_retain(v6);
    }
    uint64_t result = v4 + 2;
    a1[13] = v4 + 2;
  }
  return result;
}

void *AudioManager::registerAudioWiredPortCallback(void *a1, void **a2)
{
  unint64_t v4 = (void *)a1[17];
  if ((unint64_t)v4 >= a1[18])
  {
    uint64_t result = std::vector<dispatch::callback<void({block_pointer})(BOOL)>>::__push_back_slow_path<dispatch::callback<void({block_pointer})(BOOL)> const&>(a1 + 16, (uint64_t)a2);
    a1[17] = result;
  }
  else
  {
    std::string::size_type v5 = *a2;
    if (*a2) {
      std::string::size_type v5 = _Block_copy(v5);
    }
    uint64_t v6 = a2[1];
    void *v4 = v5;
    v4[1] = v6;
    if (v6) {
      dispatch_retain(v6);
    }
    uint64_t result = v4 + 2;
    a1[17] = v4 + 2;
  }
  return result;
}

uint64_t AudioManager::isAudioInputReportSupported(AudioManager *this)
{
  return 0;
}

BOOL AudioManager::isAudioOutputReportSupported(AudioManager *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBBDD5F8, memory_order_acquire) & 1) == 0)
  {
    uint64_t v2 = (capabilities::txpower *)__cxa_guard_acquire(&qword_1EBBDD5F8);
    if (v2)
    {
      _MergedGlobals_11 = capabilities::txpower::supportedControlInput(v2);
      __cxa_guard_release(&qword_1EBBDD5F8);
    }
  }
  return capabilities::txpower::operator&() != 0;
}

void sub_1C58FBB30(_Unwind_Exception *a1)
{
}

uint64_t AudioManager::isAudioSpeakerSupported(AudioManager *this)
{
  if (!v2) {
    return AudioManager::isAudioSpeakerSupported(void)::audioSpeakerSupported;
  }
  AudioManager::isAudioSpeakerSupported(void)::audioSpeakerSupported = capabilities::txpower::supportsAudioSpeaker(v2);
  return AudioManager::isAudioSpeakerSupported(void)::audioSpeakerSupported;
}

void sub_1C58FBBB0(_Unwind_Exception *a1)
{
}

uint64_t AudioManager::isAudioWiredPortSupported(AudioManager *this)
{
  if (!v2) {
    return AudioManager::isAudioWiredPortSupported(void)::audioJackSupported;
  }
  AudioManager::isAudioWiredPortSupported(void)::audioJackSupported = capabilities::txpower::supportsAudioJackReport(v2);
  return AudioManager::isAudioWiredPortSupported(void)::audioJackSupported;
}

void sub_1C58FBC30(_Unwind_Exception *a1)
{
}

void AudioManager::notifyAudioWiredPortClients(NSObject **this)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *this;
  if (os_log_type_enabled(*this, OS_LOG_TYPE_DEFAULT))
  {
    if (*((unsigned char *)this + 120)) {
      uint64_t v3 = "YES";
    }
    else {
      uint64_t v3 = "NO";
    }
    LODWORD(v12) = 136315138;
    *(void *)((char *)&v12 + 4) = v3;
    _os_log_impl(&dword_1C5767000, v2, OS_LOG_TYPE_DEFAULT, "#I Notifying Wired State: %s", (uint8_t *)&v12, 0xCu);
  }
  unint64_t v4 = this[16];
  std::string::size_type v5 = this[17];
  if (v4 != v5)
  {
    while (!v4->isa)
    {
      uint64_t v6 = 0;
      int isa = v4[1].isa;
      if (isa) {
        goto LABEL_11;
      }
LABEL_12:
      char v8 = *((unsigned char *)this + 120);
      if (!v6)
      {
        uint64_t v10 = 0;
        *(void *)&long long v12 = MEMORY[0x1E4F143A8];
        *((void *)&v12 + 1) = 3321888768;
        uint64_t v13 = ___ZNK8dispatch8callbackIU13block_pointerFvbEEclIJbEEEvDpT__block_invoke_1;
        unint64_t v14 = &__block_descriptor_41_e8_32c43_ZTSN8dispatch5blockIU13block_pointerFvbEEE_e5_v8__0l;
LABEL_18:
        uint64_t v11 = 0;
        goto LABEL_19;
      }
      uint64_t v9 = _Block_copy(v6);
      uint64_t v10 = v9;
      *(void *)&long long v12 = MEMORY[0x1E4F143A8];
      *((void *)&v12 + 1) = 3321888768;
      uint64_t v13 = ___ZNK8dispatch8callbackIU13block_pointerFvbEEclIJbEEEvDpT__block_invoke_1;
      unint64_t v14 = &__block_descriptor_41_e8_32c43_ZTSN8dispatch5blockIU13block_pointerFvbEEE_e5_v8__0l;
      if (!v9) {
        goto LABEL_18;
      }
      uint64_t v11 = _Block_copy(v9);
LABEL_19:
      aBlocuint64_t k = v11;
      char v16 = v8;
      dispatch_async(isa, &v12);
      if (aBlock) {
        _Block_release(aBlock);
      }
      if (v10) {
        _Block_release(v10);
      }
      if (isa) {
        dispatch_release(isa);
      }
      if (v6) {
        _Block_release(v6);
      }
      v4 += 2;
      if (v4 == v5) {
        return;
      }
    }
    uint64_t v6 = _Block_copy(v4->isa);
    int isa = v4[1].isa;
    if (!isa) {
      goto LABEL_12;
    }
LABEL_11:
    dispatch_retain(isa);
    goto LABEL_12;
  }
}

void sub_1C58FBE5C(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t AudioManager::getCurrentAudioOutputState(AudioManager *this)
{
  return *((unsigned __int8 *)this + 56);
}

const char *AudioManager::toString(unsigned int a1)
{
  if (a1 > 3) {
    return "Unknown Audio Output";
  }
  else {
    return off_1E6518040[(char)a1];
  }
}

{
  if (a1 > 6) {
    return "Unknown Audio Input";
  }
  else {
    return off_1E6518060[(char)a1];
  }
}

void AudioManager::notifyClients(os_log_t *this)
{
  AudioManager::notifyAudioInputClients(this);
  AudioManager::notifyAudioOutputClients(this);
  AudioManager::notifyAudioSpeakerClients(this);

  AudioManager::notifyAudioWiredPortClients(this);
}

void *std::vector<dispatch::callback<void({block_pointer})(AudioManager::AudioOutputState)>>::__push_back_slow_path<dispatch::callback<void({block_pointer})(AudioManager::AudioOutputState)> const&>(void *a1, uint64_t a2)
{
  uint64_t v2 = a1[1] - *a1;
  unint64_t v3 = (v2 >> 4) + 1;
  if (v3 >> 60) {
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v6 = a1[2] - *a1;
  if (v6 >> 3 > v3) {
    unint64_t v3 = v6 >> 3;
  }
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v7 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v7 = v3;
  }
  if (!v7)
  {
    char v8 = 0;
    uint64_t v9 = *(void **)a2;
    if (!*(void *)a2) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v7 >> 60) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  char v8 = (char *)operator new(16 * v7);
  uint64_t v9 = *(void **)a2;
  if (*(void *)a2) {
LABEL_12:
  }
    uint64_t v9 = _Block_copy(v9);
LABEL_13:
  uint64_t v10 = *(NSObject **)(a2 + 8);
  uint64_t v11 = &v8[16 * (v2 >> 4)];
  *(void *)uint64_t v11 = v9;
  *((void *)v11 + 1) = v10;
  if (v10) {
    dispatch_retain(v10);
  }
  long long v12 = &v8[16 * v7];
  uint64_t v13 = v11 + 16;
  unint64_t v14 = (char *)*a1;
  std::string v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v11;
    a1[1] = v13;
    a1[2] = v12;
  }
  else
  {
    unint64_t v16 = (unint64_t)&v15[-*a1 - 16];
    if (v16 < 0xD0) {
      goto LABEL_17;
    }
    int v23 = &v15[-(v16 & 0xFFFFFFFFFFFFFFF0)];
    BOOL v24 = &v8[v2 - 8 - (v16 & 0xFFFFFFFFFFFFFFF0)] >= v15 || v23 - 8 >= v11;
    BOOL v25 = !v24;
    if (v23 - 16 < &v8[v2 - 8] && &v8[v2 - (v16 & 0xFFFFFFFFFFFFFFF0) - 16] < v15 - 8) {
      goto LABEL_17;
    }
    if (v25) {
      goto LABEL_17;
    }
    uint64_t v27 = (v16 >> 4) + 1;
    uint64_t v28 = 16 * (v27 & 0x1FFFFFFFFFFFFFFELL);
    uint64_t v17 = &v11[-v28];
    BOOL v29 = &v15[-v28];
    BOOL v30 = (double *)(v11 - 32);
    uint64_t v31 = (const double *)(v15 - 32);
    uint64_t v32 = v27 & 0x1FFFFFFFFFFFFFFELL;
    do
    {
      float64x2x2_t v33 = vld2q_f64(v31);
      vst2q_f64(v30, v33);
      *(_OWORD *)uint64_t v31 = 0uLL;
      *((_OWORD *)v31 + 1) = 0uLL;
      v31 -= 4;
      v30 -= 4;
      v32 -= 2;
    }
    while (v32);
    uint64_t v11 = v17;
    std::string v15 = v29;
    if (v27 != (v27 & 0x1FFFFFFFFFFFFFFELL))
    {
LABEL_17:
      uint64_t v17 = v11;
      do
      {
        long long v18 = *((_OWORD *)v15 - 1);
        v15 -= 16;
        *((_OWORD *)v17 - 1) = v18;
        v17 -= 16;
        *(void *)std::string v15 = 0;
        *((void *)v15 + 1) = 0;
      }
      while (v15 != v14);
    }
    std::string v15 = (char *)*a1;
    uint64_t v19 = (char *)a1[1];
    *a1 = v17;
    a1[1] = v13;
    a1[2] = v12;
    while (v19 != v15)
    {
      uint64_t v20 = *((void *)v19 - 1);
      if (v20) {
        dispatch_release(v20);
      }
      int v21 = (const void *)*((void *)v19 - 2);
      if (v21) {
        _Block_release(v21);
      }
      v19 -= 16;
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v13;
}

AudioManager **std::unique_ptr<AudioManager>::~unique_ptr[abi:ne180100](AudioManager **a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    AudioManager::~AudioManager(v2);
    operator delete(v3);
  }
  return a1;
}

void std::__shared_ptr_pointer<AudioManager *,std::shared_ptr<AudioManager>::__shared_ptr_default_delete<AudioManager,AudioManager>,std::allocator<AudioManager>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<AudioManager *,std::shared_ptr<AudioManager>::__shared_ptr_default_delete<AudioManager,AudioManager>,std::allocator<AudioManager>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1 = *(AudioManager **)(a1 + 24);
  if (v1)
  {
    AudioManager::~AudioManager(v1);
    operator delete(v2);
  }
}

uint64_t std::__shared_ptr_pointer<AudioManager *,std::shared_ptr<AudioManager>::__shared_ptr_default_delete<AudioManager,AudioManager>,std::allocator<AudioManager>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x80000001C59A5464) {
    return a1 + 24;
  }
  if (((v3 & 0x80000001C59A5464 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000001C59A5464)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001C59A5464 & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 24;
  }
  return 0;
}

uint64_t ___ZNK8dispatch8callbackIU13block_pointerFvN12AudioManager15AudioInputStateEEEclIJS2_EEEvDpT__block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *(unsigned __int8 *)(a1 + 40));
}

void *__copy_helper_block_e8_32c75_ZTSN8dispatch5blockIU13block_pointerFvN12AudioManager15AudioInputStateEEEE(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void **)(a2 + 32);
  if (result) {
    uint64_t result = _Block_copy(result);
  }
  *(void *)(a1 + 32) = result;
  return result;
}

void __destroy_helper_block_e8_32c75_ZTSN8dispatch5blockIU13block_pointerFvN12AudioManager15AudioInputStateEEEE(uint64_t a1)
{
  uint64_t v1 = *(const void **)(a1 + 32);
  if (v1) {
    _Block_release(v1);
  }
}

uint64_t ___ZNK8dispatch8callbackIU13block_pointerFvbEEclIJbEEEvDpT__block_invoke_1(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *(unsigned __int8 *)(a1 + 40));
}

const char *AccessoryModule::getName(AccessoryModule *this)
{
  return "accessories-new.mod";
}

void AccessoryModule::create(capabilities::abs *a1@<X0>, std::__shared_weak_count_vtbl **a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  unint64_t v4 = (capabilities::abs *)capabilities::abs::supportsAccessoryModule(a1);
  if ((v4 & 1) == 0)
  {
    capabilities::abs::supportedSARFeatures(v4);
    if (!capabilities::abs::operator&()) {
      return;
    }
  }
  std::string::size_type v5 = (std::__shared_weak_count_vtbl *)operator new(0xA8uLL);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)a1;
  char v8 = (std::__shared_weak_count *)*((void *)a1 + 1);
  v13[0] = v7;
  v13[1] = (uint64_t)v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  AccessoryModule::AccessoryModule((uint64_t)v5, v13);
  uint64_t v9 = (std::__shared_weak_count *)operator new(0x20uLL);
  v9->__shared_owners_ = 0;
  p_shared_owners = &v9->__shared_owners_;
  v9->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20FC900;
  v9->__shared_weak_owners_ = 0;
  v9[1].__vftable = v6;
  on_zero_shared = (std::__shared_weak_count *)v6[1].__on_zero_shared;
  if (on_zero_shared)
  {
    if (on_zero_shared->__shared_owners_ != -1) {
      goto LABEL_11;
    }
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v6[1].~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v6;
    v6[1].__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v9;
    std::__shared_weak_count::__release_weak(on_zero_shared);
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }
  atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  v6[1].~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v6;
  v6[1].__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v9;
  if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL))
  {
LABEL_10:
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
LABEL_11:
  *a2 = v6;
  a2[1] = (std::__shared_weak_count_vtbl *)v9;
  if (v8) {
    std::__shared_weak_count::__release_weak(v8);
  }
  v14[0] = MEMORY[0x1E4F143A8];
  v14[1] = 0x40000000;
  v14[2] = ___ZN15AccessoryModule4initEv_block_invoke;
  v14[3] = &__block_descriptor_tmp_17;
  v14[4] = v6;
  std::string v15 = v14;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI15AccessoryModuleE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  block[3] = &__block_descriptor_tmp_50;
  block[4] = (char *)v6 + 48;
  block[5] = &v15;
  get_deleter = v6[1].__get_deleter;
  if (v6[1].__on_zero_shared_weak) {
    dispatch_async_and_wait(get_deleter, block);
  }
  else {
    dispatch_sync(get_deleter, block);
  }
}

void sub_1C58FC4F8(void *a1)
{
  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[8], v1, (dispatch_function_t)std::shared_ptr<AccessoryModule> ctu::SharedSynchronizable<AccessoryModule>::make_shared_ptr<AccessoryModule>(AccessoryModule*)::{lambda(AccessoryModule*)#1}::operator() const(AccessoryModule*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_1C58FC520(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_1C58FC578(_Unwind_Exception *a1)
{
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_1C58FC58C(_Unwind_Exception *a1)
{
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void AccessoryModule::init(AccessoryModule *this)
{
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 0x40000000;
  v3[2] = ___ZN15AccessoryModule4initEv_block_invoke;
  v3[3] = &__block_descriptor_tmp_17;
  v3[4] = this;
  unint64_t v4 = v3;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI15AccessoryModuleE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  block[3] = &__block_descriptor_tmp_50;
  block[4] = (char *)this + 48;
  block[5] = &v4;
  uint64_t v2 = (char *)this + 64;
  uint64_t v1 = *((void *)this + 8);
  if (*((void *)v2 + 1)) {
    dispatch_async_and_wait(v1, block);
  }
  else {
    dispatch_sync(v1, block);
  }
}

uint64_t AccessoryModule::AccessoryModule(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  unint64_t v4 = (std::__shared_weak_count *)a2[1];
  if (v4)
  {
    atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  *(void *)a1 = &unk_1F20FC1C8;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = v4;
  if (v4)
  {
    atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    *(void *)(a1 + 24) = 0;
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = 0;
    std::__shared_weak_count::__release_weak(v4);
    *(void *)a1 = &unk_1F20F0BE0;
    std::__shared_weak_count::__release_weak(v4);
  }
  else
  {
    *(void *)(a1 + 24) = 0;
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = 0;
    *(void *)a1 = &unk_1F20F0BE0;
  }
  *(void *)a1 = &unk_1F20FC728;
  std::string::size_type v5 = dispatch_queue_attr_make_with_qos_class(0, QOS_CLASS_UTILITY, 0);
  uint64_t v6 = dispatch_queue_create("accessories-new.mod", v5);
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = v6;
  if (v6)
  {
    uint64_t v7 = v6;
    dispatch_retain(v6);
    *(void *)(a1 + 72) = 0;
    dispatch_release(v7);
  }
  else
  {
    *(void *)(a1 + 72) = 0;
  }
  ctu::OsLogLogger::OsLogLogger((ctu::OsLogLogger *)(a1 + 80), "com.apple.telephony.abm", "accessories-new.mod");
  *(void *)a1 = &unk_1F20FC728;
  *(void *)(a1 + 152) = 0;
  *(unsigned char *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(void *)(a1 + 120) = 0;
  return a1;
}

void sub_1C58FC7E0(_Unwind_Exception *a1)
{
  ctu::SharedSynchronizable<DataStallDetection>::~SharedSynchronizable(v2);
  Service::~Service(v1);
  _Unwind_Resume(a1);
}

void AccessoryModule::~AccessoryModule(AccessoryModule *this)
{
  *(void *)this = &unk_1F20FC728;
  uint64_t v2 = (char *)this + 80;
  uint64_t v3 = *((void *)this + 10);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v17[0] = 0;
    _os_log_impl(&dword_1C5767000, v3, OS_LOG_TYPE_DEFAULT, "#I Gone", (uint8_t *)v17, 2u);
  }
  unint64_t v4 = (AccessoryModule *)*((void *)this + 19);
  if (v4 == (AccessoryModule *)((char *)this + 128))
  {
    (*(void (**)(char *))(*((void *)this + 16) + 32))((char *)this + 128);
    std::string::size_type v5 = (char *)*((void *)this + 13);
    if (!v5) {
      goto LABEL_7;
    }
  }
  else
  {
    if (v4) {
      (*(void (**)(AccessoryModule *))(*(void *)v4 + 40))(v4);
    }
    std::string::size_type v5 = (char *)*((void *)this + 13);
    if (!v5)
    {
LABEL_7:
      uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 12);
      if (!v6) {
        goto LABEL_19;
      }
      goto LABEL_18;
    }
  }
  uint64_t v7 = (char *)*((void *)this + 14);
  char v8 = v5;
  if (v7 != v5)
  {
    do
    {
      uint64_t v9 = (std::__shared_weak_count *)*((void *)v7 - 1);
      if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
      v7 -= 16;
    }
    while (v7 != v5);
    char v8 = (char *)*((void *)this + 13);
  }
  *((void *)this + 14) = v5;
  operator delete(v8);
  uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 12);
  if (!v6)
  {
LABEL_19:
    MEMORY[0x1C8790F80](v2);
    uint64_t v10 = *((void *)this + 9);
    if (!v10) {
      goto LABEL_21;
    }
    goto LABEL_20;
  }
LABEL_18:
  if (atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_19;
  }
  ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
  std::__shared_weak_count::__release_weak(v6);
  MEMORY[0x1C8790F80](v2);
  uint64_t v10 = *((void *)this + 9);
  if (v10) {
LABEL_20:
  }
    dispatch_release(v10);
LABEL_21:
  uint64_t v11 = *((void *)this + 8);
  if (v11) {
    dispatch_release(v11);
  }
  long long v12 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v12) {
    std::__shared_weak_count::__release_weak(v12);
  }
  *(void *)this = &unk_1F20FC1C8;
  uint64_t v13 = *((void *)this + 3);
  if (v13)
  {
    uint64_t v14 = *((void *)this + 4);
    std::string v15 = (void *)*((void *)this + 3);
    if (v14 != v13)
    {
      do
      {
        if (*(char *)(v14 - 1) < 0) {
          operator delete(*(void **)(v14 - 24));
        }
        v14 -= 24;
      }
      while (v14 != v13);
      std::string v15 = (void *)*((void *)this + 3);
    }
    *((void *)this + 4) = v13;
    operator delete(v15);
  }
  unint64_t v16 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v16) {
    std::__shared_weak_count::__release_weak(v16);
  }
}

{
  void *v1;
  uint64_t vars8;

  AccessoryModule::~AccessoryModule(this);

  operator delete(v1);
}

unsigned char *AccessoryModule::getShutdownStages@<X0>(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v3 = operator new(1uLL);
  *a1 = v3;
  unsigned char *v3 = 3;
  uint64_t result = v3 + 1;
  a1[1] = result;
  a1[2] = result;
  return result;
}

void ___ZN15AccessoryModule4initEv_block_invoke(uint64_t a1)
{
  uint64_t v62 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(void **)(a1 + 32);
  uint64_t v2 = v1[10];
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_1C5767000, v2, OS_LOG_TYPE_DEFAULT, "#I Initializing", buf, 2u);
  }
  uint64_t v3 = (std::__shared_weak_count *)v1[7];
  if (!v3 || (v4 = v1[6], (std::string::size_type v5 = std::__shared_weak_count::lock(v3)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v6 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v6);
  }
  pthread_mutex_lock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
  if (!qword_1EBBDD0C0)
  {
    char v8 = (uint64_t (***)(void, uint64_t))operator new(0x18uLL);
    MEMORY[0x1C8791170](v8, @"com.apple.AppleBasebandManager", *MEMORY[0x1E4F1D3F0]);
    uint64_t v7 = operator new(0x20uLL);
    *uint64_t v7 = &unk_1F20F3BE0;
    v7[1] = 0;
    v7[2] = 0;
    v7[3] = v8;
    uint64_t v9 = (std::__shared_weak_count *)off_1EBBDD0C8;
    qword_1EBBDD0C0 = (uint64_t)v8;
    off_1EBBDD0C8 = v7;
    if (!v9)
    {
      uint64_t v45 = (uint64_t)v8;
      uint64_t v46 = (std::__shared_weak_count *)v7;
      goto LABEL_14;
    }
    if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  char v8 = (uint64_t (***)(void, uint64_t))qword_1EBBDD0C0;
  uint64_t v7 = off_1EBBDD0C8;
  uint64_t v45 = qword_1EBBDD0C0;
  uint64_t v46 = (std::__shared_weak_count *)off_1EBBDD0C8;
  if (off_1EBBDD0C8) {
LABEL_14:
  }
    atomic_fetch_add_explicit(v7 + 1, 1uLL, memory_order_relaxed);
  pthread_mutex_unlock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
  uint64_t v10 = (const void *)*MEMORY[0x1E4F4CAE0];
  size_t v11 = strlen((const char *)*MEMORY[0x1E4F4CAE0]);
  if (v11 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v12 = v11;
  if (v11 >= 0x17)
  {
    uint64_t v14 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17) {
      uint64_t v14 = v11 | 7;
    }
    uint64_t v15 = v14 + 1;
    uint64_t v13 = operator new(v14 + 1);
    std::string::size_type v54 = (std::__shared_weak_count *)v12;
    uint64_t v55 = (std::__shared_weak_count_vtbl *)(v15 | 0x8000000000000000);
    *(void *)long long buf = v13;
    goto LABEL_22;
  }
  HIBYTE(v55) = v11;
  uint64_t v13 = buf;
  if (v11) {
LABEL_22:
  }
    memmove(v13, v10, v12);
  *((unsigned char *)v13 + v12) = 0;
  unint64_t v16 = v1 + 20;
  char v17 = Preferences::getPreference<BOOL>(v8, (const char *)buf, (ctu::cf *)(v1 + 20));
  if (SHIBYTE(v55) < 0)
  {
    operator delete(*(void **)buf);
    long long v18 = v46;
    if (!v46) {
      goto LABEL_28;
    }
  }
  else
  {
    long long v18 = v46;
    if (!v46) {
      goto LABEL_28;
    }
  }
  if (!atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
    if (v17) {
      goto LABEL_31;
    }
    goto LABEL_29;
  }
LABEL_28:
  if (v17) {
    goto LABEL_31;
  }
LABEL_29:
  uint64_t v19 = v1[10];
  if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)long long buf = 0;
    _os_log_error_impl(&dword_1C5767000, v19, OS_LOG_TYPE_ERROR, "Failed getting AccessorySimulate status from ABMProperties", buf, 2u);
  }
LABEL_31:
  atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  uint64_t v56 = 0;
  uint64_t v20 = (uint8_t *)operator new(0x20uLL);
  *(void *)uint64_t v20 = &unk_1F20FC988;
  *((void *)v20 + 1) = v1;
  *((void *)v20 + 2) = v4;
  *((void *)v20 + 3) = v6;
  uint64_t v56 = v20;
  int v21 = v1 + 16;
  int v23 = v1 + 19;
  unint64_t v22 = (void *)v1[19];
  v1[19] = 0;
  if (v22 == v1 + 16)
  {
    (*(void (**)(void *))(*v21 + 32))(v1 + 16);
    BOOL v24 = v56;
    BOOL v25 = (uint8_t **)(v1 + 19);
    if (!v56)
    {
LABEL_39:
      *BOOL v25 = 0;
      goto LABEL_43;
    }
  }
  else
  {
    if (v22) {
      (*(void (**)(void *))(*v22 + 40))(v22);
    }
    BOOL v24 = v56;
    BOOL v25 = (uint8_t **)(v1 + 19);
    if (!v56) {
      goto LABEL_39;
    }
  }
  if (v24 != buf)
  {
    BOOL v25 = &v56;
    *int v23 = (uint64_t)v24;
    goto LABEL_39;
  }
  *int v23 = (uint64_t)v21;
  (*(void (**)(uint8_t *, void *))(*(void *)buf + 24))(buf, v1 + 16);
LABEL_43:
  if (v56 == buf)
  {
    (*(void (**)(uint8_t *))(*(void *)buf + 32))(buf);
    if (*v16) {
      goto LABEL_47;
    }
LABEL_52:
    uint64_t v27 = *v23;
    if (*v23)
    {
      if ((void *)v27 == v21)
      {
        uint64_t v52 = v51;
        (*(void (**)(void *, void *))(*v21 + 24))(v1 + 16, v51);
LABEL_67:
        uint64_t v31 = v1[8];
        dispatch_object_t v43 = v31;
        if (v31) {
          dispatch_retain(v31);
        }
        CoreAccessoriesDelegate::create(v51, &v43, (std::__shared_weak_count_vtbl **)buf);
        uint64_t v32 = *v23;
        if (*v23)
        {
          if ((void *)v32 == v21)
          {
            uint64_t v50 = v49;
            (*(void (**)(void *, void *))(*v21 + 24))(v1 + 16, v49);
LABEL_74:
            float64x2x2_t v33 = v1[8];
            dispatch_object_t v42 = v33;
            if (v33) {
              dispatch_retain(v33);
            }
            IOKitAccessoriesDelegate::create(v49, &v42, &v55);
            uint64_t v34 = *v23;
            if (*v23)
            {
              if ((void *)v34 == v21)
              {
                long long v48 = v47;
                (*(void (**)(void *, void *))(*v21 + 24))(v1 + 16, v47);
LABEL_81:
                uint64_t v35 = v1[8];
                dispatch_object_t v41 = v35;
                if (v35) {
                  dispatch_retain(v35);
                }
                IOPortUSBCAccessoriesDelegate::create(v47, &v41, &v57);
                std::vector<std::shared_ptr<AccessoriesDelegateBase>>::__assign_with_size[abi:ne180100]<std::shared_ptr<AccessoriesDelegateBase> const*,std::shared_ptr<AccessoriesDelegateBase> const*>((uint64_t)(v1 + 13), buf, &v59, 3uLL);
                unint64_t v36 = v58;
                if (v58 && !atomic_fetch_add(&v58->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
                  std::__shared_weak_count::__release_weak(v36);
                }
                uint64_t v37 = (std::__shared_weak_count *)v56;
                if (v56 && !atomic_fetch_add((atomic_ullong *volatile)v56 + 1, 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
                  std::__shared_weak_count::__release_weak(v37);
                }
                float64x2x2_t v38 = v54;
                if (v54 && !atomic_fetch_add(&v54->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
                  std::__shared_weak_count::__release_weak(v38);
                }
                if (v41) {
                  dispatch_release(v41);
                }
                if (v48 == v47)
                {
                  (*(void (**)(void *))(v47[0] + 32))(v47);
                  uint64_t v39 = v42;
                  if (v42) {
LABEL_98:
                  }
                    dispatch_release(v39);
                }
                else
                {
                  if (v48) {
                    (*(void (**)(void))(*v48 + 40))();
                  }
                  uint64_t v39 = v42;
                  if (v42) {
                    goto LABEL_98;
                  }
                }
                if (v50 == v49)
                {
                  (*(void (**)(void *))(v49[0] + 32))(v49);
                  std::string::size_type v40 = v43;
                  if (v43) {
LABEL_103:
                  }
                    dispatch_release(v40);
                }
                else
                {
                  if (v50) {
                    (*(void (**)(void))(*v50 + 40))();
                  }
                  std::string::size_type v40 = v43;
                  if (v43) {
                    goto LABEL_103;
                  }
                }
                BOOL v30 = v52;
                if (v52 == v51)
                {
                  (*(void (**)(void *))(v51[0] + 32))(v51);
                  goto LABEL_112;
                }
                goto LABEL_105;
              }
              uint64_t v34 = (*(uint64_t (**)(uint64_t))(*(void *)v34 + 16))(v34);
            }
            long long v48 = (void *)v34;
            goto LABEL_81;
          }
          uint64_t v32 = (*(uint64_t (**)(uint64_t))(*(void *)v32 + 16))(v32);
        }
        uint64_t v50 = (void *)v32;
        goto LABEL_74;
      }
      uint64_t v27 = (*(uint64_t (**)(uint64_t))(*(void *)v27 + 16))(v27);
    }
    uint64_t v52 = (void *)v27;
    goto LABEL_67;
  }
  if (v56) {
    (*(void (**)(void))(*(void *)v56 + 40))();
  }
  if (!*v16) {
    goto LABEL_52;
  }
LABEL_47:
  uint64_t v26 = *v23;
  if (!*v23)
  {
LABEL_50:
    uint64_t v61 = (void *)v26;
    goto LABEL_57;
  }
  if ((void *)v26 != v21)
  {
    uint64_t v26 = (*(uint64_t (**)(uint64_t))(*(void *)v26 + 16))(v26);
    goto LABEL_50;
  }
  uint64_t v61 = v60;
  (*(void (**)(void *, void *))(*v21 + 24))(v1 + 16, v60);
LABEL_57:
  uint64_t v28 = v1[8];
  dispatch_object_t object = v28;
  if (v28) {
    dispatch_retain(v28);
  }
  AccessorySimulatorDelegate::create(v60, &object, (std::__shared_weak_count_vtbl **)buf);
  std::vector<std::shared_ptr<AccessoriesDelegateBase>>::__assign_with_size[abi:ne180100]<std::shared_ptr<AccessoriesDelegateBase> const*,std::shared_ptr<AccessoriesDelegateBase> const*>((uint64_t)(v1 + 13), buf, &v55, 1uLL);
  BOOL v29 = v54;
  if (v54 && !atomic_fetch_add(&v54->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
    std::__shared_weak_count::__release_weak(v29);
  }
  if (object) {
    dispatch_release(object);
  }
  BOOL v30 = v61;
  if (v61 == v60)
  {
    (*(void (**)(void *))(v60[0] + 32))(v60);
    goto LABEL_112;
  }
LABEL_105:
  if (v30) {
    (*(void (**)(void *))(*v30 + 40))(v30);
  }
LABEL_112:
  std::__shared_weak_count::__release_weak(v6);
}

void sub_1C58FD504(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_weak(v1);
  _Unwind_Resume(a1);
}

void sub_1C58FD518(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, dispatch_object_t object, dispatch_object_t a10, dispatch_object_t a11, dispatch_object_t a12, char a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void AccessoryModule::shutdown(uint64_t a1, uint64_t a2, NSObject **a3)
{
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 1174405120;
  v6[2] = ___ZN15AccessoryModule8shutdownE13ShutdownStageN8dispatch13group_sessionE_block_invoke;
  v6[3] = &__block_descriptor_tmp_4_4;
  uint64_t v4 = *a3;
  std::string::size_type v5 = (uint64_t *)(a1 + 48);
  v6[4] = a1;
  dispatch_group_t group = v4;
  if (v4)
  {
    dispatch_retain(v4);
    dispatch_group_enter(group);
  }
  ctu::SharedSynchronizable<AccessoryModule>::execute_wrapped(v5, (uint64_t)v6);
  if (group)
  {
    dispatch_group_leave(group);
    if (group) {
      dispatch_release(group);
    }
  }
}

void ___ZN15AccessoryModule8shutdownE13ShutdownStageN8dispatch13group_sessionE_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(std::__shared_weak_count **)(v1 + 96);
  *(void *)(v1 + 88) = 0;
  *(void *)(v1 + 96) = 0;
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
}

void AccessoryModule::initialize(void *a1, dispatch_object_t *a2)
{
  uint64_t v3 = *a2;
  if (*a2)
  {
    dispatch_retain(*a2);
    dispatch_group_enter(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[7];
  if (!v4 || (uint64_t v5 = a1[6], (v6 = std::__shared_weak_count::lock(v4)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v7 = v6;
  char v8 = operator new(0x10uLL);
  *char v8 = a1;
  v8[1] = v3;
  uint64_t v9 = a1[8];
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v10 = operator new(0x18uLL);
  void *v10 = v8;
  v10[1] = v5;
  v10[2] = v7;
  dispatch_async_f(v9, v10, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<AccessoryModule>::execute_wrapped<AccessoryModule::initialize(dispatch::group_session)::$_0>(AccessoryModule::initialize(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<AccessoryModule::initialize(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<AccessoryModule::initialize(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke);
  if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void AccessoryModule::finishInitialization_sync(std::__shared_weak_count **this)
{
  uint64_t v2 = (const char *)((uint64_t (*)(std::__shared_weak_count **))(*this)->__shared_weak_owners_)(this);
  size_t v3 = strlen(v2);
  if (v3 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v4 = (void *)v3;
  if (v3 >= 0x17)
  {
    uint64_t v6 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17) {
      uint64_t v6 = v3 | 7;
    }
    uint64_t v7 = v6 + 1;
    uint64_t v5 = (void **)operator new(v6 + 1);
    __dst[1] = v4;
    unint64_t v32 = v7 | 0x8000000000000000;
    __dst[0] = v5;
  }
  else
  {
    HIBYTE(v32) = v3;
    uint64_t v5 = __dst;
    if (!v3) {
      goto LABEL_9;
    }
  }
  memmove(v5, v2, (size_t)v4);
LABEL_9:
  *((unsigned char *)v4 + (void)v5) = 0;
  CFTypeRef cf = 0;
  AppleBasebandManager::create();
  long long v8 = v33;
  long long v33 = 0uLL;
  uint64_t v9 = this[12];
  *(_OWORD *)(this + 11) = v8;
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  uint64_t v10 = (std::__shared_weak_count *)*((void *)&v33 + 1);
  if (!*((void *)&v33 + 1)
    || atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v33 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    CFTypeRef v11 = cf;
    if (!cf) {
      goto LABEL_16;
    }
    goto LABEL_15;
  }
  ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
  std::__shared_weak_count::__release_weak(v10);
  CFTypeRef v11 = cf;
  if (cf) {
LABEL_15:
  }
    CFRelease(v11);
LABEL_16:
  if (SHIBYTE(v32) < 0) {
    operator delete(__dst[0]);
  }
  size_t v12 = this[7];
  if (!v12 || (v13 = this[6], (uint64_t v14 = std::__shared_weak_count::lock(v12)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v15 = v14;
  atomic_fetch_add_explicit(&v14->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v15);
  }
  unint64_t v16 = (const void *)*MEMORY[0x1E4F4CEF8];
  size_t v17 = strlen((const char *)*MEMORY[0x1E4F4CEF8]);
  if (v17 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  long long v18 = (void *)v17;
  if (v17 >= 0x17)
  {
    uint64_t v20 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v17 | 7) != 0x17) {
      uint64_t v20 = v17 | 7;
    }
    uint64_t v21 = v20 + 1;
    uint64_t v19 = operator new(v20 + 1);
    __p[1] = v18;
    unint64_t v29 = v21 | 0x8000000000000000;
    __p[0] = v19;
    goto LABEL_29;
  }
  HIBYTE(v29) = v17;
  uint64_t v19 = __p;
  if (v17) {
LABEL_29:
  }
    memmove(v19, v16, (size_t)v18);
  *((unsigned char *)v18 + (void)v19) = 0;
  v24[0] = MEMORY[0x1E4F143A8];
  v24[1] = 1174405120;
  v24[2] = ___ZN15AccessoryModule25finishInitialization_syncEv_block_invoke;
  v24[3] = &__block_descriptor_tmp_6_10;
  v24[4] = this;
  v24[5] = v13;
  BOOL v25 = v15;
  atomic_fetch_add_explicit(&v15->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  unint64_t v22 = _Block_copy(v24);
  int v23 = this[8];
  if (v23) {
    dispatch_retain((dispatch_object_t)this[8]);
  }
  aBlocuint64_t k = v22;
  dispatch_object_t object = v23;
  AppleBasebandManager::setEventHandler();
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (SHIBYTE(v29) < 0) {
    operator delete(__p[0]);
  }
  AppleBasebandManager::eventsOn((AppleBasebandManager *)this[11]);
  if (v25) {
    std::__shared_weak_count::__release_weak(v25);
  }
  std::__shared_weak_count::__release_weak(v15);
}

void sub_1C58FDCA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a15) {
    std::__shared_weak_count::__release_weak(a15);
  }
  std::__shared_weak_count::__release_weak(v30);
  _Unwind_Resume(a1);
}

void ___ZN15AccessoryModule25finishInitialization_syncEv_block_invoke(void *a1, abm::client::Event **a2)
{
  size_t v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    uint64_t v5 = (void *)a1[4];
    uint64_t v6 = std::__shared_weak_count::lock(v3);
    uint64_t v27 = v6;
    if (v6)
    {
      uint64_t v7 = v6;
      if (a1[5])
      {
        CFTypeRef cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
        abm::client::Event::getData((uint64_t *)&cf, *a2);
        CFTypeRef v8 = cf;
        if (cf) {
          uint64_t v9 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
        }
        else {
          uint64_t v9 = 0;
        }
        if (v9)
        {
          v24[0] = 0xAAAAAAAAAAAAAAAALL;
          v24[1] = 0xAAAAAAAAAAAAAAAALL;
          ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v24, (const __CFDictionary *)cf);
          __p[0] = 0;
          __p[1] = 0;
          uint64_t v23 = 0;
          ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v28, (const char *)*MEMORY[0x1E4F4C688]);
          ctu::cf::map_adapter::getString();
          MEMORY[0x1C8791110](&v28);
          uint64_t v23 = v21;
          *(_OWORD *)std::string __p = v20;
          if (v21 >= 0) {
            size_t v10 = HIBYTE(v21);
          }
          else {
            size_t v10 = *((void *)&v20 + 1);
          }
          if (v10 == strlen((const char *)*MEMORY[0x1E4F4CAE8])
            && (v21 >= 0 ? (CFTypeRef v11 = __p) : (CFTypeRef v11 = (void **)__p[0]), !memcmp(v11, (const void *)*MEMORY[0x1E4F4CAE8], v10)))
          {
            size_t v17 = v5[10];
            if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
            {
              LOWORD(v20) = 0;
              _os_log_impl(&dword_1C5767000, v17, OS_LOG_TYPE_DEFAULT, "#I Starting all delegates", (uint8_t *)&v20, 2u);
            }
            uint64_t v18 = v5[13];
            for (uint64_t i = v5[14]; v18 != i; v18 += 16)
              (*(void (**)(void))(**(void **)v18 + 32))();
          }
          else if (v10 == strlen((const char *)*MEMORY[0x1E4F4CCD8]) {
                 && (v21 >= 0 ? (size_t v12 = __p) : (size_t v12 = (void **)__p[0]),
          }
                     !memcmp(v12, (const void *)*MEMORY[0x1E4F4CCD8], v10))
                 || v10 == strlen((const char *)*MEMORY[0x1E4F4CF28])
                 && (v21 >= 0 ? (uint64_t v13 = __p) : (uint64_t v13 = (void **)__p[0]),
                     !memcmp(v13, (const void *)*MEMORY[0x1E4F4CF28], v10)))
          {
            uint64_t v14 = v5[10];
            if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
            {
              LOWORD(v20) = 0;
              _os_log_impl(&dword_1C5767000, v14, OS_LOG_TYPE_DEFAULT, "#I Stopping all delegates", (uint8_t *)&v20, 2u);
            }
            uint64_t v15 = v5[13];
            for (uint64_t j = v5[14]; v15 != j; v15 += 16)
              (*(void (**)(void))(**(void **)v15 + 40))();
          }
          if (SHIBYTE(v23) < 0) {
            operator delete(__p[0]);
          }
          MEMORY[0x1C8791160](v24);
          CFTypeRef v8 = cf;
        }
        if (v8) {
          CFRelease(v8);
        }
      }
      if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void AccessoryModule::startDelegates_sync(AccessoryModule *this)
{
  uint64_t v2 = *((void *)this + 10);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v6 = 0;
    _os_log_impl(&dword_1C5767000, v2, OS_LOG_TYPE_DEFAULT, "#I Starting all delegates", v6, 2u);
  }
  uint64_t v4 = (uint64_t *)*((void *)this + 13);
  size_t v3 = (uint64_t *)*((void *)this + 14);
  while (v4 != v3)
  {
    uint64_t v5 = *v4;
    v4 += 2;
    (*(void (**)(uint64_t))(*(void *)v5 + 32))(v5);
  }
}

void AccessoryModule::stopDelegates_sync(AccessoryModule *this)
{
  uint64_t v2 = *((void *)this + 10);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v6 = 0;
    _os_log_impl(&dword_1C5767000, v2, OS_LOG_TYPE_DEFAULT, "#I Stopping all delegates", v6, 2u);
  }
  uint64_t v4 = (uint64_t *)*((void *)this + 13);
  size_t v3 = (uint64_t *)*((void *)this + 14);
  while (v4 != v3)
  {
    uint64_t v5 = *v4;
    v4 += 2;
    (*(void (**)(uint64_t))(*(void *)v5 + 40))(v5);
  }
}

uint64_t __copy_helper_block_e8_40c40_ZTSNSt3__18weak_ptrI15AccessoryModuleEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c40_ZTSNSt3__18weak_ptrI15AccessoryModuleEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void AccessoryModule::handleAccessoryConnectionEvent_sync(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v72 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = *(void *)(a1 + 48);
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 56);
  uint64_t v6 = (uint64_t *)(a1 + 48);
  if (!v5 || (size_t v10 = std::__shared_weak_count::lock(v5)) == 0) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  CFTypeRef v11 = v10;
  atomic_fetch_add_explicit(&v10->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    uint64_t v12 = *a2;
    if (v12) {
      uint64_t v13 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
    }
    else {
      uint64_t v13 = 0;
    }
    if (v13)
    {
LABEL_8:
      uint64_t v14 = *(NSObject **)(a1 + 80);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      {
        LODWORD(buf) = 138412290;
        *(void *)((char *)&buf + 4) = v12;
        _os_log_error_impl(&dword_1C5767000, v14, OS_LOG_TYPE_ERROR, "%@", (uint8_t *)&buf, 0xCu);
      }
      goto LABEL_77;
    }
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v11);
    uint64_t v12 = *a2;
    if (v12) {
      uint64_t v15 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
    }
    else {
      uint64_t v15 = 0;
    }
    if (v15) {
      goto LABEL_8;
    }
  }
  uint64_t v68 = (capabilities::abs *)0xAAAAAAAAAAAAAAAALL;
  dispatch_object_t v69 = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN15AccessoryModule35handleAccessoryConnectionEvent_syncEN3ctu2cf11CFSharedRefI9__CFErrorEENSt3__16vectorIN3abm13AccessoryInfoENS5_9allocatorIS8_EEEE_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_10_3;
  aBlock[4] = a1;
  aBlock[5] = v7;
  uint64_t v67 = v11;
  atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  unint64_t v16 = (capabilities::abs *)_Block_copy(aBlock);
  size_t v17 = v16;
  uint64_t v18 = *(NSObject **)(a1 + 64);
  if (v18) {
    dispatch_retain(*(dispatch_object_t *)(a1 + 64));
  }
  uint64_t v68 = v17;
  dispatch_object_t v69 = v18;
  capabilities::abs::supportedSARFeatures(v16);
  if (!capabilities::abs::operator&())
  {
    unint64_t v64 = 0xAAAAAAAAAAAAAAAALL;
    unint64_t v65 = (std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL;
    unint64_t v22 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
    uint64_t v23 = off_1EBBDD2A0;
    if (!off_1EBBDD2A0)
    {
      CommandDriverFactory::create_default_global((uint64_t *)&buf, v22);
      long long v24 = buf;
      long long buf = 0uLL;
      BOOL v25 = (std::__shared_weak_count *)*(&off_1EBBDD2A0 + 1);
      off_1EBBDD2A0 = v24;
      if (v25 && !atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
      uint64_t v26 = (std::__shared_weak_count *)*((void *)&buf + 1);
      if (*((void *)&buf + 1)
        && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&buf + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
      uint64_t v23 = off_1EBBDD2A0;
    }
    uint64_t v27 = (std::__shared_weak_count *)*(&off_1EBBDD2A0 + 1);
    uint64_t v55 = v23;
    uint64_t v56 = *(&off_1EBBDD2A0 + 1);
    if (*(&off_1EBBDD2A0 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDD2A0 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
    (*(void (**)(unint64_t *__return_ptr, uint64_t))(*(void *)v23 + 16))(&v57, v23);
    unint64_t v64 = 0;
    unint64_t v65 = 0;
    if (v58)
    {
      unint64_t v65 = std::__shared_weak_count::lock(v58);
      if (v65) {
        unint64_t v64 = v57;
      }
      if (v58) {
        std::__shared_weak_count::__release_weak(v58);
      }
    }
    if (v27 && !atomic_fetch_add(&v27->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
    unint64_t v28 = v64;
    if (v64)
    {
      std::string __p = 0;
      size_t v53 = 0;
      std::string::size_type v54 = 0;
      BOOL v30 = *(const void **)a3;
      uint64_t v29 = *(void *)(a3 + 8);
      int64_t v31 = v29 - *(void *)a3;
      if (v29 != *(void *)a3)
      {
        if (0xAAAAAAAAAAAAAAABLL * (v31 >> 2) > 0x1555555555555555) {
          std::vector<std::string>::__throw_length_error[abi:ne180100]();
        }
        std::string __p = operator new(v31);
        std::string::size_type v54 = (char *)__p + 4 * (v31 >> 2);
        memcpy(__p, v30, v31);
        size_t v53 = v54;
      }
      unint64_t v32 = v68;
      if (v68) {
        unint64_t v32 = _Block_copy(v68);
      }
      uint64_t v50 = v32;
      dispatch_object_t object = v69;
      if (v69) {
        dispatch_retain(v69);
      }
      (*(void (**)(unint64_t, void **, void **))(*(void *)v28 + 376))(v28, &__p, &v50);
      if (object) {
        dispatch_release(object);
      }
      if (v50) {
        _Block_release(v50);
      }
      if (__p)
      {
        size_t v53 = __p;
        operator delete(__p);
      }
    }
    long long v33 = v65;
    if (v65 && !atomic_fetch_add(&v65->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
    goto LABEL_66;
  }
  xpc_object_t v19 = xpc_dictionary_create(0, 0, 0);
  uint64_t v20 = MEMORY[0x1E4F14590];
  if (v19 || (xpc_object_t v19 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C8792D30](v19) == v20)
    {
      xpc_retain(v19);
      xpc_object_t v21 = v19;
    }
    else
    {
      xpc_object_t v21 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v21 = xpc_null_create();
    xpc_object_t v19 = 0;
  }
  xpc_release(v19);
  uint64_t v34 = MEMORY[0x1C8792D30](v21);
  if (v34 != v20)
  {
    uint64_t v35 = *(NSObject **)(a1 + 80);
    if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf) = 0;
      _os_log_error_impl(&dword_1C5767000, v35, OS_LOG_TYPE_ERROR, "Failed to create accessory input dictionary!", (uint8_t *)&buf, 2u);
    }
    goto LABEL_61;
  }
  xpc_object_t v38 = xpc_data_create(*(const void **)a3, *(void *)(a3 + 8) - *(void *)a3);
  if (!v38) {
    xpc_object_t v38 = xpc_null_create();
  }
  xpc_dictionary_set_value(v21, (const char *)*MEMORY[0x1E4F4C358], v38);
  xpc_object_t v39 = xpc_null_create();
  xpc_release(v38);
  xpc_release(v39);
  unint64_t v64 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v65 = (std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL;
  std::string::size_type v40 = (const void *)*MEMORY[0x1E4F4CB00];
  size_t v41 = strlen((const char *)*MEMORY[0x1E4F4CB00]);
  if (v41 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v42 = v41;
  if (v41 >= 0x17)
  {
    uint64_t v44 = (v41 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v41 | 7) != 0x17) {
      uint64_t v44 = v41 | 7;
    }
    uint64_t v45 = v44 + 1;
    p_long long buf = (long long *)operator new(v44 + 1);
    *((void *)&buf + 1) = v42;
    unint64_t v71 = v45 | 0x8000000000000000;
    *(void *)&long long buf = p_buf;
    uint64_t v20 = MEMORY[0x1E4F14590];
  }
  else
  {
    HIBYTE(v71) = v41;
    p_long long buf = &buf;
    if (!v41) {
      goto LABEL_88;
    }
  }
  memmove(p_buf, v40, v42);
LABEL_88:
  *((unsigned char *)p_buf + v42) = 0;
  xpc_object_t v63 = v21;
  if (v21) {
    xpc_retain(v21);
  }
  else {
    xpc_object_t v63 = xpc_null_create();
  }
  uint64_t v61 = 0;
  dispatch_object_t v62 = 0;
  abm::client::Command::create();
  xpc_release(v63);
  xpc_object_t v63 = 0;
  if (SHIBYTE(v71) < 0) {
    operator delete((void *)buf);
  }
  unint64_t v59 = v64;
  uint64_t v60 = v65;
  if (v65) {
    atomic_fetch_add_explicit(&v65->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  AppleBasebandManager::perform();
  if (v60 && !atomic_fetch_add(&v60->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
    std::__shared_weak_count::__release_weak(v60);
  }
  if (v65 && !atomic_fetch_add(&v65->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
    std::__shared_weak_count::__release_weak(v65);
  }
LABEL_61:
  xpc_release(v21);
  if (v34 == v20)
  {
LABEL_66:
    v46[0] = MEMORY[0x1E4F143A8];
    v46[1] = 1174405120;
    v46[2] = ___ZN15AccessoryModule35handleAccessoryConnectionEvent_syncEN3ctu2cf11CFSharedRefI9__CFErrorEENSt3__16vectorIN3abm13AccessoryInfoENS5_9allocatorIS8_EEEE_block_invoke_11;
    v46[3] = &__block_descriptor_tmp_21_5;
    v46[4] = a1;
    uint64_t v47 = 0;
    long long v48 = 0;
    uint64_t v49 = 0;
    unint64_t v36 = *(const void **)a3;
    int64_t v37 = *(void *)(a3 + 8) - *(void *)a3;
    if (v37)
    {
      if (0xAAAAAAAAAAAAAAABLL * (v37 >> 2) > 0x1555555555555555) {
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v47 = operator new(v37);
      uint64_t v49 = (char *)v47 + 4 * (v37 >> 2);
      memcpy(v47, v36, v37);
      long long v48 = v49;
    }
    ctu::SharedSynchronizable<AccessoryModule>::execute_wrapped(v6, (uint64_t)v46);
    if (v47)
    {
      long long v48 = v47;
      operator delete(v47);
    }
    if (v69) {
      dispatch_release(v69);
    }
    if (v68) {
      _Block_release(v68);
    }
    goto LABEL_75;
  }
  if (v69) {
    dispatch_release(v69);
  }
  if (v68) {
    _Block_release(v68);
  }
LABEL_75:
  if (v67) {
    std::__shared_weak_count::__release_weak(v67);
  }
LABEL_77:
  std::__shared_weak_count::__release_weak(v11);
}

void sub_1C58FEB08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,char a29,uint64_t a30,xpc_object_t object,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,std::__shared_weak_count *a40)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN15AccessoryModule35handleAccessoryConnectionEvent_syncEN3ctu2cf11CFSharedRefI9__CFErrorEENSt3__16vectorIN3abm13AccessoryInfoENS5_9allocatorIS8_EEEE_block_invoke(void *a1, uint64_t *a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  size_t v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    uint64_t v5 = a1[4];
    uint64_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      uint64_t v7 = v6;
      if (a1[5])
      {
        uint64_t v8 = *a2;
        if (*a2) {
          uint64_t v9 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
        }
        else {
          uint64_t v9 = 0;
        }
        size_t v10 = *(NSObject **)(v5 + 80);
        if (v9)
        {
          if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
          {
            int v11 = 138412290;
            uint64_t v12 = v8;
            _os_log_error_impl(&dword_1C5767000, v10, OS_LOG_TYPE_ERROR, "Failed sending accessory info update: %@", (uint8_t *)&v11, 0xCu);
          }
        }
        else if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(v11) = 0;
          _os_log_impl(&dword_1C5767000, v10, OS_LOG_TYPE_DEFAULT, "#I Success sending accessory info update", (uint8_t *)&v11, 2u);
        }
      }
      if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

uint64_t ___ZN15AccessoryModule35handleAccessoryConnectionEvent_syncEN3ctu2cf11CFSharedRefI9__CFErrorEENSt3__16vectorIN3abm13AccessoryInfoENS5_9allocatorIS8_EEEE_block_invoke_11(void *a1)
{
  uint64_t v129 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = a1[4];
  unint64_t v126 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v3 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v125[7] = v3;
  v125[8] = v3;
  v125[5] = v3;
  v125[6] = v3;
  v125[3] = v3;
  v125[4] = v3;
  v125[1] = v3;
  v125[2] = v3;
  long long v124 = v3;
  v125[0] = v3;
  *(_OWORD *)std::string __p = v3;
  long long v123 = v3;
  long long v120 = v3;
  long long v121 = v3;
  long long v118 = v3;
  long long v119 = v3;
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v118);
  uint64_t v4 = a1[5];
  uint64_t v110 = a1[6];
  if (v4 != v110)
  {
    key = (char *)*MEMORY[0x1E4F4C498];
    xpc_object_t v108 = (char *)*MEMORY[0x1E4F4C580];
    uint64_t v107 = (char *)*MEMORY[0x1E4F4C570];
    uint64_t v106 = (char *)*MEMORY[0x1E4F4C578];
    xpc_object_t v105 = (char *)*MEMORY[0x1E4F4C920];
    std::string::size_type v104 = (char *)*MEMORY[0x1E4F4CB70];
    string = (char *)*MEMORY[0x1E4F4C4C0];
    uint64_t v102 = (char *)*MEMORY[0x1E4F4C540];
    uint64_t v101 = (char *)*MEMORY[0x1E4F4C7B0];
    int v112 = 1;
    v99 = (char *)*MEMORY[0x1E4F4CE40];
    xpc_object_t v100 = (char *)*MEMORY[0x1E4F4C548];
    uint64_t v97 = (char *)*MEMORY[0x1E4F4CB40];
    unint64_t v98 = (char *)*MEMORY[0x1E4F4C3C8];
    size_t v95 = (char *)*MEMORY[0x1E4F4C190];
    xpc_object_t v96 = (char *)*MEMORY[0x1E4F4C158];
    uint64_t v94 = (char *)*MEMORY[0x1E4F4C188];
    __s = (char *)*MEMORY[0x1E4F4C738];
    uint64_t v93 = v2;
    while (1)
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v118, (uint64_t)"[", 1);
      uint64_t v5 = (void *)std::ostream::operator<<();
      uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"] Accessory Info:", 17);
      LOBYTE(__dst) = 10;
      uint64_t v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)&__dst, 1);
      uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"    ", 4);
      uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"ID:           ", 14);
      size_t v10 = (const char *)abm::asString();
      size_t v11 = strlen(v10);
      uint64_t v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
      LOBYTE(__dst) = 10;
      uint64_t v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)&__dst, 1);
      uint64_t v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"    ", 4);
      uint64_t v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"State:        ", 14);
      unint64_t v16 = (const char *)abm::asString();
      size_t v17 = strlen(v16);
      uint64_t v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v16, v17);
      LOBYTE(__dst) = 10;
      xpc_object_t v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)&__dst, 1);
      uint64_t v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"    ", 4);
      xpc_object_t v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"Color:        ", 14);
      unint64_t v22 = (const char *)abm::asString();
      size_t v23 = strlen(v22);
      long long v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
      LOBYTE(__dst) = 10;
      BOOL v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)&__dst, 1);
      uint64_t v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"    ", 4);
      uint64_t v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"Power:        ", 14);
      unint64_t v28 = (const char *)abm::asString();
      size_t v29 = strlen(v28);
      BOOL v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)v28, v29);
      LOBYTE(__dst) = 10;
      int64_t v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)&__dst, 1);
      unint64_t v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"    ", 4);
      long long v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"Material:     ", 14);
      uint64_t v34 = (const char *)abm::asString();
      size_t v35 = strlen(v34);
      unint64_t v36 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)v34, v35);
      LOBYTE(__dst) = 10;
      int64_t v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)&__dst, 1);
      xpc_object_t v38 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"    ", 4);
      xpc_object_t v39 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)"Connection:   ", 14);
      std::string::size_type v40 = (const char *)abm::asString();
      size_t v41 = strlen(v40);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)v40, v41);
      size_t v42 = *(NSObject **)(v2 + 80);
      if (!os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_23;
      }
      if ((BYTE8(v124) & 0x10) != 0) {
        break;
      }
      if ((BYTE8(v124) & 8) != 0)
      {
        uint64_t v45 = *((void *)&v120 + 1);
        uint64_t v46 = (const void **)&v119 + 1;
        goto LABEL_10;
      }
      size_t v43 = 0;
      HIBYTE(v117) = 0;
      p_dst = (void **)&__dst;
LABEL_19:
      *((unsigned char *)p_dst + v43) = 0;
      uint64_t v50 = (void **)&__dst;
      if (v117 < 0) {
        uint64_t v50 = __dst;
      }
      *(_DWORD *)long long buf = 136315138;
      long long v128 = v50;
      _os_log_impl(&dword_1C5767000, v42, OS_LOG_TYPE_DEFAULT, "#I Sending accessory info update:\n%s", buf, 0xCu);
      if (SHIBYTE(v117) < 0) {
        operator delete(__dst);
      }
LABEL_23:
      xpc_object_t v51 = xpc_dictionary_create(0, 0, 0);
      if (v51 || (xpc_object_t v51 = xpc_null_create()) != 0)
      {
        if (MEMORY[0x1C8792D30](v51) == MEMORY[0x1E4F14590])
        {
          xpc_retain(v51);
          xpc_object_t v52 = v51;
        }
        else
        {
          xpc_object_t v52 = xpc_null_create();
        }
      }
      else
      {
        xpc_object_t v52 = xpc_null_create();
        xpc_object_t v51 = 0;
      }
      xpc_release(v51);
      size_t v53 = (const char *)abm::asString();
      xpc_object_t v54 = xpc_string_create(v53);
      if (!v54) {
        xpc_object_t v54 = xpc_null_create();
      }
      xpc_dictionary_set_value(v52, key, v54);
      xpc_object_t v55 = xpc_null_create();
      xpc_release(v54);
      xpc_release(v55);
      uint64_t v56 = (const char *)abm::asString();
      xpc_object_t v57 = xpc_string_create(v56);
      if (!v57) {
        xpc_object_t v57 = xpc_null_create();
      }
      xpc_dictionary_set_value(v52, v108, v57);
      xpc_object_t v58 = xpc_null_create();
      xpc_release(v57);
      xpc_release(v58);
      unint64_t v59 = (const char *)abm::asString();
      xpc_object_t v60 = xpc_string_create(v59);
      if (!v60) {
        xpc_object_t v60 = xpc_null_create();
      }
      xpc_dictionary_set_value(v52, v107, v60);
      xpc_object_t v61 = xpc_null_create();
      xpc_release(v60);
      xpc_release(v61);
      dispatch_object_t v62 = (const char *)abm::asString();
      xpc_object_t v63 = xpc_string_create(v62);
      if (!v63) {
        xpc_object_t v63 = xpc_null_create();
      }
      xpc_dictionary_set_value(v52, v106, v63);
      xpc_object_t v64 = xpc_null_create();
      xpc_release(v63);
      xpc_release(v64);
      unint64_t v65 = (const char *)abm::asString();
      xpc_object_t v66 = xpc_string_create(v65);
      if (!v66) {
        xpc_object_t v66 = xpc_null_create();
      }
      xpc_dictionary_set_value(v52, v105, v66);
      xpc_object_t v67 = xpc_null_create();
      xpc_release(v66);
      xpc_release(v67);
      uint64_t v68 = (const char *)abm::asString();
      xpc_object_t v69 = xpc_string_create(v68);
      if (!v69) {
        xpc_object_t v69 = xpc_null_create();
      }
      xpc_dictionary_set_value(v52, v104, v69);
      xpc_object_t v70 = xpc_null_create();
      xpc_release(v69);
      xpc_release(v70);
      xpc_object_t v71 = xpc_dictionary_create(0, 0, 0);
      if (v71 || (xpc_object_t v71 = xpc_null_create()) != 0)
      {
        if (MEMORY[0x1C8792D30](v71) == MEMORY[0x1E4F14590])
        {
          xpc_retain(v71);
          xpc_object_t v72 = v71;
        }
        else
        {
          xpc_object_t v72 = xpc_null_create();
        }
      }
      else
      {
        xpc_object_t v72 = xpc_null_create();
        xpc_object_t v71 = 0;
      }
      xpc_release(v71);
      xpc_object_t v73 = xpc_string_create(string);
      if (!v73) {
        xpc_object_t v73 = xpc_null_create();
      }
      xpc_dictionary_set_value(v72, v102, v73);
      xpc_object_t v74 = xpc_null_create();
      xpc_release(v73);
      xpc_release(v74);
      xpc_object_t v75 = xpc_string_create(v101);
      if (!v75) {
        xpc_object_t v75 = xpc_null_create();
      }
      xpc_dictionary_set_value(v72, v100, v75);
      xpc_object_t v76 = xpc_null_create();
      xpc_release(v75);
      xpc_release(v76);
      xpc_object_t v77 = xpc_string_create(v99);
      if (!v77) {
        xpc_object_t v77 = xpc_null_create();
      }
      xpc_dictionary_set_value(v72, v98, v77);
      xpc_object_t v78 = xpc_null_create();
      xpc_release(v77);
      xpc_release(v78);
      if (v52)
      {
        xpc_retain(v52);
        xpc_object_t v79 = v52;
      }
      else
      {
        xpc_object_t v79 = xpc_null_create();
      }
      xpc_dictionary_set_value(v72, v97, v79);
      xpc_object_t v80 = xpc_null_create();
      xpc_release(v79);
      xpc_release(v80);
      xpc_object_t v81 = xpc_dictionary_create(0, 0, 0);
      if (v81 || (xpc_object_t v81 = xpc_null_create()) != 0)
      {
        if (MEMORY[0x1C8792D30](v81) == MEMORY[0x1E4F14590])
        {
          xpc_retain(v81);
          xpc_object_t v82 = v81;
        }
        else
        {
          xpc_object_t v82 = xpc_null_create();
        }
      }
      else
      {
        xpc_object_t v82 = xpc_null_create();
        xpc_object_t v81 = 0;
      }
      xpc_release(v81);
      xpc_object_t v83 = xpc_string_create(v96);
      if (!v83) {
        xpc_object_t v83 = xpc_null_create();
      }
      xpc_dictionary_set_value(v82, v95, v83);
      xpc_object_t v84 = xpc_null_create();
      xpc_release(v83);
      xpc_release(v84);
      if (v72)
      {
        xpc_retain(v72);
        xpc_object_t v85 = v72;
      }
      else
      {
        xpc_object_t v85 = xpc_null_create();
      }
      xpc_dictionary_set_value(v82, v94, v85);
      xpc_object_t v86 = xpc_null_create();
      xpc_release(v85);
      xpc_release(v86);
      size_t v87 = strlen(__s);
      if (v87 > 0x7FFFFFFFFFFFFFF7) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      size_t v88 = v87;
      if (v87 >= 0x17)
      {
        uint64_t v90 = (v87 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v87 | 7) != 0x17) {
          uint64_t v90 = v87 | 7;
        }
        uint64_t v91 = v90 + 1;
        unint64_t v89 = (void **)operator new(v90 + 1);
        size_t v116 = v88;
        int64_t v117 = v91 | 0x8000000000000000;
        std::string __dst = v89;
        uint64_t v2 = v93;
      }
      else
      {
        HIBYTE(v117) = v87;
        unint64_t v89 = (void **)&__dst;
        if (!v87)
        {
          LOBYTE(__dst) = 0;
          xpc_object_t object = v82;
          if (!v82) {
            goto LABEL_76;
          }
          goto LABEL_71;
        }
      }
      memmove(v89, __s, v88);
      *((unsigned char *)v89 + v88) = 0;
      xpc_object_t object = v82;
      if (!v82)
      {
LABEL_76:
        xpc_object_t object = xpc_null_create();
        goto LABEL_77;
      }
LABEL_71:
      xpc_retain(v82);
LABEL_77:
      xpc_object_t v113 = 0;
      Service::runCommand(v2, (uint64_t)&__dst, &object, &v113);
      xpc_release(object);
      xpc_object_t object = 0;
      if (SHIBYTE(v117) < 0) {
        operator delete(__dst);
      }
      xpc_release(v82);
      xpc_release(v72);
      xpc_release(v52);
      ++v112;
      v4 += 12;
      if (v4 == v110) {
        goto LABEL_80;
      }
    }
    uint64_t v45 = v124;
    uint64_t v46 = (const void **)&v121;
    if ((unint64_t)v124 < *((void *)&v121 + 1))
    {
      *(void *)&long long v124 = *((void *)&v121 + 1);
      uint64_t v45 = *((void *)&v121 + 1);
      uint64_t v46 = (const void **)&v121;
    }
LABEL_10:
    uint64_t v47 = *v46;
    size_t v43 = v45 - (void)*v46;
    if (v43 > 0x7FFFFFFFFFFFFFF7) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    if (v43 >= 0x17)
    {
      uint64_t v48 = (v43 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v43 | 7) != 0x17) {
        uint64_t v48 = v43 | 7;
      }
      uint64_t v49 = v48 + 1;
      p_dst = (void **)operator new(v48 + 1);
      size_t v116 = v43;
      int64_t v117 = v49 | 0x8000000000000000;
      std::string __dst = p_dst;
    }
    else
    {
      HIBYTE(v117) = v45 - *(unsigned char *)v46;
      p_dst = (void **)&__dst;
      if (!v43) {
        goto LABEL_18;
      }
    }
    memmove(p_dst, v47, v43);
LABEL_18:
    uint64_t v2 = v93;
    goto LABEL_19;
  }
LABEL_80:
  *(void *)&long long v118 = *MEMORY[0x1E4FBA418];
  *(void *)((char *)&v118 + *(void *)(v118 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  *((void *)&v118 + 1) = MEMORY[0x1E4FBA470] + 16;
  if (SHIBYTE(v123) < 0) {
    operator delete(__p[1]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1C8791FB0](v125);
}

void sub_1C58FF9C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,xpc_object_t object,void *__p,uint64_t a39,int a40,__int16 a41,char a42,char a43,char a44)
{
}

void *__copy_helper_block_e8_40c61_ZTSNSt3__16vectorIN3abm13AccessoryInfoENS_9allocatorIS2_EEEE(void *result, uint64_t a2)
{
  result[5] = 0;
  result[6] = 0;
  result[7] = 0;
  long long v3 = *(unsigned char **)(a2 + 40);
  uint64_t v2 = *(unsigned char **)(a2 + 48);
  int64_t v4 = v2 - v3;
  if (v2 != v3)
  {
    uint64_t v5 = result;
    if (0xAAAAAAAAAAAAAAABLL * (v4 >> 2) >= 0x1555555555555556) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v6 = (char *)operator new(v4);
    v5[5] = v6;
    v5[6] = v6;
    uint64_t v7 = &v6[4 * (v4 >> 2)];
    void v5[7] = v7;
    uint64_t result = memcpy(v6, v3, v4);
    v5[6] = v7;
  }
  return result;
}

void sub_1C58FFC48(_Unwind_Exception *exception_object)
{
  int64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 48) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_40c61_ZTSNSt3__16vectorIN3abm13AccessoryInfoENS_9allocatorIS2_EEEE(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(void *)(a1 + 48) = v2;
    operator delete(v2);
  }
}

void std::vector<std::shared_ptr<AccessoriesDelegateBase>>::__assign_with_size[abi:ne180100]<std::shared_ptr<AccessoriesDelegateBase> const*,std::shared_ptr<AccessoriesDelegateBase> const*>(uint64_t a1, void *a2, void *a3, size_t __sz)
{
  uint64_t v6 = a2;
  uint64_t v8 = *(void *)(a1 + 16);
  uint64_t v9 = *(char **)a1;
  if (__sz > (v8 - *(void *)a1) >> 4)
  {
    if (v9)
    {
      size_t v10 = *(char **)(a1 + 8);
      size_t v11 = *(char **)a1;
      if (v10 != v9)
      {
        do
        {
          uint64_t v12 = (std::__shared_weak_count *)*((void *)v10 - 1);
          if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
            std::__shared_weak_count::__release_weak(v12);
          }
          v10 -= 16;
        }
        while (v10 != v9);
        size_t v11 = *(char **)a1;
      }
      *(void *)(a1 + 8) = v9;
      operator delete(v11);
      uint64_t v8 = 0;
      *(void *)a1 = 0;
      *(void *)(a1 + 8) = 0;
      *(void *)(a1 + 16) = 0;
    }
    uint64_t v23 = v8 >> 3;
    if (v8 >> 3 <= __sz) {
      uint64_t v23 = __sz;
    }
    BOOL v24 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0;
    unint64_t v25 = 0xFFFFFFFFFFFFFFFLL;
    if (!v24) {
      unint64_t v25 = v23;
    }
    if (v25 >> 60) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v26 = 2 * v25;
    uint64_t v27 = operator new(16 * v25);
    *(void *)a1 = v27;
    *(void *)(a1 + 8) = v27;
    for (*(void *)(a1 + 16) = &v27[v26]; v6 != a3; v6 += 2)
    {
      uint64_t v28 = v6[1];
      *uint64_t v27 = *v6;
      v27[1] = v28;
      if (v28) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v28 + 8), 1uLL, memory_order_relaxed);
      }
      v27 += 2;
    }
    *(void *)(a1 + 8) = v27;
    return;
  }
  uint64_t v13 = *(char **)(a1 + 8);
  unint64_t v14 = (v13 - v9) >> 4;
  if (v14 >= __sz)
  {
    if (a2 == a3)
    {
      xpc_object_t v19 = *(char **)a1;
      if (v13 == v9)
      {
LABEL_54:
        *(void *)(a1 + 8) = v19;
        return;
      }
    }
    else
    {
      xpc_object_t v19 = *(char **)a1;
      do
      {
        uint64_t v21 = *v6;
        uint64_t v20 = v6[1];
        if (v20) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v20 + 8), 1uLL, memory_order_relaxed);
        }
        unint64_t v22 = (std::__shared_weak_count *)*((void *)v9 + 1);
        *(void *)uint64_t v9 = v21;
        *((void *)v9 + 1) = v20;
        if (v22 && !atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
        }
        v19 += 16;
        v6 += 2;
        v9 += 16;
      }
      while (v6 != a3);
      uint64_t v13 = *(char **)(a1 + 8);
      if (v13 == v19) {
        goto LABEL_54;
      }
    }
    do
    {
      unint64_t v32 = (std::__shared_weak_count *)*((void *)v13 - 1);
      if (v32 && !atomic_fetch_add(&v32->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v32);
      }
      v13 -= 16;
    }
    while (v13 != v19);
    goto LABEL_54;
  }
  uint64_t v15 = &a2[2 * v14];
  if (v13 != v9)
  {
    do
    {
      uint64_t v17 = *v6;
      uint64_t v16 = v6[1];
      if (v16) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v16 + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v18 = (std::__shared_weak_count *)*((void *)v9 + 1);
      *(void *)uint64_t v9 = v17;
      *((void *)v9 + 1) = v16;
      if (v18 && !atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
      v6 += 2;
      v9 += 16;
    }
    while (v6 != v15);
    uint64_t v9 = *(char **)(a1 + 8);
  }
  size_t v29 = v9;
  if (v15 != a3)
  {
    size_t v29 = v9;
    BOOL v30 = v9;
    do
    {
      uint64_t v31 = v15[1];
      *(void *)BOOL v30 = *v15;
      *((void *)v30 + 1) = v31;
      if (v31) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v31 + 8), 1uLL, memory_order_relaxed);
      }
      v29 += 16;
      v15 += 2;
      v30 += 16;
    }
    while (v15 != a3);
  }
  *(void *)(a1 + 8) = v29;
}

void std::__shared_ptr_pointer<AccessoryModule *,std::shared_ptr<AccessoryModule> ctu::SharedSynchronizable<AccessoryModule>::make_shared_ptr<AccessoryModule>(AccessoryModule*)::{lambda(AccessoryModule *)#1},std::allocator<AccessoryModule>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<AccessoryModule *,std::shared_ptr<AccessoryModule> ctu::SharedSynchronizable<AccessoryModule>::make_shared_ptr<AccessoryModule>(AccessoryModule*)::{lambda(AccessoryModule *)#1},std::allocator<AccessoryModule>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<AccessoryModule *,std::shared_ptr<AccessoryModule> ctu::SharedSynchronizable<AccessoryModule>::make_shared_ptr<AccessoryModule>(AccessoryModule*)::{lambda(AccessoryModule *)#1},std::allocator<AccessoryModule>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableI15AccessoryModuleE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_") {
    return a1 + 24;
  }
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableI15AccessoryModuleE15make_shared_ptrIS1_EENSt3__110shared_pt"
                                "rIT_EEPS6_EUlPS1_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableI15AccessoryModuleE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableI15AccessoryModuleE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24; {
  return 0;
  }
}

uint64_t std::shared_ptr<AccessoryModule> ctu::SharedSynchronizable<AccessoryModule>::make_shared_ptr<AccessoryModule>(AccessoryModule*)::{lambda(AccessoryModule*)#1}::operator() const(AccessoryModule*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void ctu::SharedSynchronizable<AccessoryModule>::execute_wrapped(uint64_t *a1, uint64_t a2)
{
  unint64_t v3 = (std::__shared_weak_count *)a1[1];
  if (!v3 || (uint64_t v5 = *a1, (v6 = std::__shared_weak_count::lock(v3)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v7 = v6;
  uint64_t v8 = a1[2];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 1174405120;
  block[2] = ___ZNK3ctu20SharedSynchronizableI15AccessoryModuleE15execute_wrappedEU13block_pointerFvvE_block_invoke;
  block[3] = &unk_1F20FC948;
  block[5] = v5;
  uint64_t v12 = v7;
  p_shared_owners = &v7->__shared_owners_;
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  block[4] = a2;
  dispatch_async(v8, block);
  size_t v10 = v12;
  if (!v12 || atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      return;
    }
LABEL_8:
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    return;
  }
  ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
  std::__shared_weak_count::__release_weak(v10);
  if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_8;
  }
}

uint64_t ___ZNK3ctu20SharedSynchronizableI15AccessoryModuleE15execute_wrappedEU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t __copy_helper_block_e8_40c44_ZTSNSt3__110shared_ptrIK15AccessoryModuleEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c44_ZTSNSt3__110shared_ptrIK15AccessoryModuleEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void *_ZNSt3__110__function6__funcIZZN15AccessoryModule4initEvEUb_E3__0NS_9allocatorIS3_EEFvN3ctu2cf11CFSharedRefI9__CFErrorEENS_6vectorIN3abm13AccessoryInfoENS4_ISD_EEEEEED1Ev(void *a1)
{
  *a1 = &unk_1F20FC988;
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void _ZNSt3__110__function6__funcIZZN15AccessoryModule4initEvEUb_E3__0NS_9allocatorIS3_EEFvN3ctu2cf11CFSharedRefI9__CFErrorEENS_6vectorIN3abm13AccessoryInfoENS4_ISD_EEEEEED0Ev(void *__p)
{
  *std::string __p = &unk_1F20FC988;
  uint64_t v2 = (std::__shared_weak_count *)__p[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  operator delete(__p);
}

char *_ZNKSt3__110__function6__funcIZZN15AccessoryModule4initEvEUb_E3__0NS_9allocatorIS3_EEFvN3ctu2cf11CFSharedRefI9__CFErrorEENS_6vectorIN3abm13AccessoryInfoENS4_ISD_EEEEEE7__cloneEv(uint64_t a1)
{
  uint64_t result = (char *)operator new(0x20uLL);
  *(void *)uint64_t result = &unk_1F20FC988;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 24);
  *((void *)result + 3) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZZN15AccessoryModule4initEvEUb_E3__0NS_9allocatorIS3_EEFvN3ctu2cf11CFSharedRefI9__CFErrorEENS_6vectorIN3abm13AccessoryInfoENS4_ISD_EEEEEE7__cloneEPNS0_6__baseISG_EE(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F20FC988;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  uint64_t v2 = *(void *)(result + 24);
  *(void *)(a2 + 24) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void _ZNSt3__110__function6__funcIZZN15AccessoryModule4initEvEUb_E3__0NS_9allocatorIS3_EEFvN3ctu2cf11CFSharedRefI9__CFErrorEENS_6vectorIN3abm13AccessoryInfoENS4_ISD_EEEEEE7destroyEv(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void _ZNSt3__110__function6__funcIZZN15AccessoryModule4initEvEUb_E3__0NS_9allocatorIS3_EEFvN3ctu2cf11CFSharedRefI9__CFErrorEENS_6vectorIN3abm13AccessoryInfoENS4_ISD_EEEEEE18destroy_deallocateEv(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  operator delete(__p);
}

void _ZNSt3__110__function6__funcIZZN15AccessoryModule4initEvEUb_E3__0NS_9allocatorIS3_EEFvN3ctu2cf11CFSharedRefI9__CFErrorEENS_6vectorIN3abm13AccessoryInfoENS4_ISD_EEEEEEclEOSA_OSF_(void *a1, const void **a2, uint64_t a3)
{
  int64_t v4 = *a2;
  *a2 = 0;
  uint64_t v5 = *(unsigned char **)a3;
  uint64_t v6 = *(unsigned char **)(a3 + 8);
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)a3 = 0;
  uint64_t v7 = (std::__shared_weak_count *)a1[3];
  if (v7)
  {
    uint64_t v8 = a1[1];
    uint64_t v9 = std::__shared_weak_count::lock(v7);
    if (v9)
    {
      size_t v10 = v9;
      if (a1[2])
      {
        v14[0] = MEMORY[0x1E4F143A8];
        v14[1] = 1174405120;
        v14[2] = ___ZZZN15AccessoryModule4initEvEUb_ENK3__0clEN3ctu2cf11CFSharedRefI9__CFErrorEENSt3__16vectorIN3abm13AccessoryInfoENS6_9allocatorIS9_EEEE_block_invoke;
        v14[3] = &__block_descriptor_tmp_49;
        v14[4] = v8;
        CFTypeRef cf = v4;
        if (v4) {
          CFRetain(v4);
        }
        std::string __p = 0;
        uint64_t v17 = 0;
        uint64_t v18 = 0;
        int64_t v11 = v6 - v5;
        if (v6 != v5)
        {
          if (0xAAAAAAAAAAAAAAABLL * (v11 >> 2) >= 0x1555555555555556) {
            std::vector<std::string>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v12 = (char *)operator new(v11);
          uint64_t v13 = &v12[4 * (v11 >> 2)];
          std::string __p = v12;
          uint64_t v18 = v13;
          memcpy(v12, v5, v11);
          uint64_t v17 = v13;
        }
        ctu::SharedSynchronizable<AccessoryModule>::execute_wrapped((uint64_t *)(v8 + 48), (uint64_t)v14);
        if (__p)
        {
          uint64_t v17 = __p;
          operator delete(__p);
        }
        if (cf) {
          CFRelease(cf);
        }
      }
      if (!atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
  }
  if (v5) {
    operator delete(v5);
  }
  if (v4) {
    CFRelease(v4);
  }
}

void sub_1C5900640(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, CFTypeRef cf, void *__p, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (!v18) {
      goto LABEL_7;
    }
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
    if (!v18)
    {
LABEL_7:
      if (!v17) {
LABEL_12:
      }
        _Unwind_Resume(exception_object);
LABEL_11:
      CFRelease(v17);
      goto LABEL_12;
    }
  }
  operator delete(v18);
  if (!v17) {
    goto LABEL_12;
  }
  goto LABEL_11;
}

uint64_t _ZNKSt3__110__function6__funcIZZN15AccessoryModule4initEvEUb_E3__0NS_9allocatorIS3_EEFvN3ctu2cf11CFSharedRefI9__CFErrorEENS_6vectorIN3abm13AccessoryInfoENS4_ISD_EEEEEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZZN15AccessoryModule4initEvEUb_E3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"ZZN15AccessoryModule4initEvEUb_E3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZZN15AccessoryModule4initEvEUb_E3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZZN15AccessoryModule4initEvEUb_E3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZZN15AccessoryModule4initEvEUb_E3__0NS_9allocatorIS3_EEFvN3ctu2cf11CFSharedRefI9__CFErrorEENS_6vectorIN3abm13AccessoryInfoENS4_ISD_EEEEEE11target_typeEv()
{
  return &_ZTIZZN15AccessoryModule4initEvEUb_E3__0;
}

void ___ZZZN15AccessoryModule4initEvEUb_ENK3__0clEN3ctu2cf11CFSharedRefI9__CFErrorEENSt3__16vectorIN3abm13AccessoryInfoENS6_9allocatorIS9_EEEE_block_invoke(void *a1)
{
  uint64_t v3 = a1[4];
  uint64_t v2 = (const void *)a1[5];
  int64_t v11 = v2;
  if (v2) {
    CFRetain(v2);
  }
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  size_t v10 = 0;
  uint64_t v5 = (unsigned char *)a1[6];
  int64_t v4 = (unsigned char *)a1[7];
  int64_t v6 = v4 - v5;
  if (v4 == v5)
  {
    uint64_t v7 = 0;
  }
  else
  {
    if (0xAAAAAAAAAAAAAAABLL * (v6 >> 2) >= 0x1555555555555556) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v7 = (char *)operator new(v6);
    uint64_t v8 = v7;
    size_t v10 = &v7[4 * (v6 >> 2)];
    memcpy(v7, v5, v6);
    uint64_t v9 = v10;
  }
  AccessoryModule::handleAccessoryConnectionEvent_sync(v3, (uint64_t *)&v11, (uint64_t)&v8);
  if (v7) {
    operator delete(v7);
  }
  if (v2) {
    CFRelease(v2);
  }
}

void sub_1C5900848(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, const void *a12)
{
  if (v12) {
    operator delete(v12);
  }
  ctu::cf::CFSharedRef<__CFError>::~CFSharedRef(&a12);
  _Unwind_Resume(a1);
}

const void *__copy_helper_block_e8_40c38_ZTSN3ctu2cf11CFSharedRefI9__CFErrorEE48c61_ZTSNSt3__16vectorIN3abm13AccessoryInfoENS_9allocatorIS2_EEEE(void *a1, void *a2)
{
  uint64_t result = (const void *)a2[5];
  a1[5] = result;
  if (result) {
    uint64_t result = CFRetain(result);
  }
  a1[6] = 0;
  a1[7] = 0;
  a1[8] = 0;
  int64_t v6 = (unsigned char *)a2[6];
  uint64_t v5 = (unsigned char *)a2[7];
  int64_t v7 = v5 - v6;
  if (v5 != v6)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v7 >> 2) >= 0x1555555555555556) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v8 = (char *)operator new(v7);
    a1[6] = v8;
    a1[7] = v8;
    uint64_t v9 = &v8[4 * (v7 >> 2)];
    a1[8] = v9;
    uint64_t result = memcpy(v8, v6, v7);
    a1[7] = v9;
  }
  return result;
}

void sub_1C590093C(_Unwind_Exception *a1)
{
  uint64_t v5 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 56) = v5;
    operator delete(v5);
  }
  ctu::cf::CFSharedRef<__CFError>::~CFSharedRef(v2);
  _Unwind_Resume(a1);
}

void __destroy_helper_block_e8_40c38_ZTSN3ctu2cf11CFSharedRefI9__CFErrorEE48c61_ZTSNSt3__16vectorIN3abm13AccessoryInfoENS_9allocatorIS2_EEEE(void *a1)
{
  uint64_t v2 = (void *)a1[6];
  if (v2)
  {
    a1[7] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (const void *)a1[5];
  if (v3) {
    CFRelease(v3);
  }
}

void *___ZNK3ctu20SharedSynchronizableI15AccessoryModuleE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke(uint64_t a1)
{
  return (*(void *(**)(void *__return_ptr))(**(void **)(a1 + 40) + 16))(*(void **)(a1 + 40));
}

void dispatch::async<void ctu::SharedSynchronizable<AccessoryModule>::execute_wrapped<AccessoryModule::initialize(dispatch::group_session)::$_0>(AccessoryModule::initialize(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<AccessoryModule::initialize(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<AccessoryModule::initialize(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke(void *a1)
{
  uint64_t v2 = *(uint64_t **)a1;
  uint64_t v3 = **(void **)a1;
  int64_t v4 = *(std::__shared_weak_count **)(v3 + 56);
  if (!v4 || (uint64_t v5 = *(void *)(v3 + 48), (v6 = std::__shared_weak_count::lock(v4)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  int64_t v7 = v6;
  atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v7);
  }
  uint64_t v8 = (const void *)*MEMORY[0x1E4F4D150];
  size_t v9 = strlen((const char *)*MEMORY[0x1E4F4D150]);
  if (v9 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v10 = v9;
  if (v9 >= 0x17)
  {
    uint64_t v12 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v12 = v9 | 7;
    }
    uint64_t v13 = v12 + 1;
    p_dst = (void **)operator new(v12 + 1);
    uint64_t v43 = v10;
    unint64_t v44 = v13 | 0x8000000000000000;
    std::string __dst = p_dst;
    goto LABEL_12;
  }
  HIBYTE(v44) = v9;
  p_dst = (void **)&__dst;
  if (v9) {
LABEL_12:
  }
    memmove(p_dst, v8, v10);
  *((unsigned char *)p_dst + v10) = 0;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZZN15AccessoryModule10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_56_3;
  aBlock[4] = v3;
  aBlock[5] = v5;
  xpc_object_t v51 = v7;
  atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  unint64_t v14 = _Block_copy(aBlock);
  xpc_object_t v52 = v14;
  Service::registerCommandHandler(v3, (uint64_t)&__dst, &v52);
  if (v14) {
    _Block_release(v14);
  }
  if (SHIBYTE(v44) < 0) {
    operator delete(__dst);
  }
  uint64_t v15 = (const void *)*MEMORY[0x1E4F4D160];
  size_t v16 = strlen((const char *)*MEMORY[0x1E4F4D160]);
  if (v16 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v17 = v16;
  if (v16 >= 0x17)
  {
    uint64_t v19 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v16 | 7) != 0x17) {
      uint64_t v19 = v16 | 7;
    }
    uint64_t v20 = v19 + 1;
    p_p = operator new(v19 + 1);
    uint64_t v33 = v17;
    unint64_t v34 = v20 | 0x8000000000000000;
    std::string __p = p_p;
    goto LABEL_24;
  }
  HIBYTE(v34) = v16;
  p_p = &__p;
  if (v16) {
LABEL_24:
  }
    memmove(p_p, v15, v17);
  *((unsigned char *)p_p + v17) = 0;
  std::string __dst = (void **)MEMORY[0x1E4F143A8];
  uint64_t v43 = 1174405120;
  unint64_t v44 = (unint64_t)___ZZN15AccessoryModule10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_57;
  uint64_t v45 = &__block_descriptor_tmp_70;
  uint64_t v46 = v3;
  uint64_t v47 = v5;
  uint64_t v48 = v7;
  atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  uint64_t v21 = _Block_copy(&__dst);
  uint64_t v49 = v21;
  Service::registerCommandHandler(v3, (uint64_t)&__p, &v49);
  if (v21) {
    _Block_release(v21);
  }
  if (SHIBYTE(v34) < 0) {
    operator delete(__p);
  }
  unint64_t v22 = (const void *)*MEMORY[0x1E4F4CC00];
  size_t v23 = strlen((const char *)*MEMORY[0x1E4F4CC00]);
  if (v23 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  BOOL v24 = (void *)v23;
  if (v23 >= 0x17)
  {
    uint64_t v26 = (v23 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v23 | 7) != 0x17) {
      uint64_t v26 = v23 | 7;
    }
    uint64_t v27 = v26 + 1;
    unint64_t v25 = operator new(v26 + 1);
    v40[1] = v24;
    unint64_t v41 = v27 | 0x8000000000000000;
    v40[0] = v25;
    goto LABEL_36;
  }
  HIBYTE(v41) = v23;
  unint64_t v25 = v40;
  if (v23) {
LABEL_36:
  }
    memmove(v25, v22, (size_t)v24);
  *((unsigned char *)v24 + (void)v25) = 0;
  std::string __p = (void *)MEMORY[0x1E4F143A8];
  uint64_t v33 = 1174405120;
  unint64_t v34 = (unint64_t)___ZZN15AccessoryModule10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_71;
  size_t v35 = &__block_descriptor_tmp_78_0;
  uint64_t v36 = v3;
  uint64_t v37 = v5;
  xpc_object_t v38 = v7;
  atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  uint64_t v28 = _Block_copy(&__p);
  xpc_object_t v39 = v28;
  Service::registerCommandHandler(v3, (uint64_t)v40, &v39);
  if (v28) {
    _Block_release(v28);
  }
  if (SHIBYTE(v41) < 0) {
    operator delete(v40[0]);
  }
  AccessoryModule::finishInitialization_sync((std::__shared_weak_count **)v3);
  if (v38) {
    std::__shared_weak_count::__release_weak(v38);
  }
  if (v48) {
    std::__shared_weak_count::__release_weak(v48);
  }
  if (v51) {
    std::__shared_weak_count::__release_weak(v51);
  }
  std::__shared_weak_count::__release_weak(v7);
  size_t v29 = v2[1];
  if (v29)
  {
    dispatch_group_leave(v29);
    BOOL v30 = v2[1];
    if (v30) {
      dispatch_release(v30);
    }
  }
  operator delete(v2);
  uint64_t v31 = (std::__shared_weak_count *)*((void *)a1 + 2);
  if (v31 && !atomic_fetch_add(&v31->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
    std::__shared_weak_count::__release_weak(v31);
  }
  operator delete(a1);
}

void sub_1C5900E74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,std::__shared_weak_count *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,std::__shared_weak_count *a43)
{
  if (a18) {
    std::__shared_weak_count::__release_weak(a18);
  }
  if (a35) {
    std::__shared_weak_count::__release_weak(a35);
  }
  if (a43) {
    std::__shared_weak_count::__release_weak(a43);
  }
  std::__shared_weak_count::__release_weak(v45);
  uint64_t v47 = v44[1];
  if (v47)
  {
    dispatch_group_leave(v47);
    uint64_t v48 = v44[1];
    if (v48) {
      dispatch_release(v48);
    }
  }
  operator delete(v44);
  uint64_t v49 = (std::__shared_weak_count *)v43[2];
  if (v49)
  {
    if (!atomic_fetch_add(&v49->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
  operator delete(v43);
  _Unwind_Resume(a1);
}

void ___ZZN15AccessoryModule10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke(void *a1, uint64_t a2, void **a3)
{
  int64_t v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    uint64_t v6 = a1[4];
    int64_t v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      uint64_t v8 = v7;
      if (a1[5])
      {
        v10[0] = MEMORY[0x1E4F143A8];
        v10[1] = 1174405120;
        v10[2] = ___ZZN15AccessoryModule10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_2;
        v10[3] = &__block_descriptor_tmp_52_3;
        v10[4] = v6;
        size_t v9 = *a3;
        if (*a3) {
          size_t v9 = _Block_copy(v9);
        }
        aBlocuint64_t k = v9;
        ctu::SharedSynchronizable<AccessoryModule>::execute_wrapped((uint64_t *)(v6 + 48), (uint64_t)v10);
        if (aBlock) {
          _Block_release(aBlock);
        }
      }
      if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
}

void ___ZZN15AccessoryModule10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_2(uint64_t a1)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 32);
  if (!(*(unsigned int (**)(uint64_t))(*(void *)v2 + 88))(v2))
  {
    LOWORD(v26) = abm::AccessorySimulate::create((abm::AccessorySimulate *)*(unsigned __int8 *)(v2 + 160));
    abm::AccessorySimulate::toDict((uint64_t *)&__dst, (abm::AccessorySimulate *)&v26);
    uint64_t v7 = *(void *)(a1 + 40);
    object[0] = __dst.__r_.__value_.__l.__data_;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
    (*(void (**)(uint64_t, void, xpc_object_t *))(v7 + 16))(v7, 0, object);
    xpc_release(object[0]);
    xpc_release(__dst.__r_.__value_.__l.__data_);
    return;
  }
  memset(object, 170, 24);
  uint64_t v3 = (const void *)*MEMORY[0x1E4F4D150];
  size_t v4 = strlen((const char *)*MEMORY[0x1E4F4D150]);
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  std::string::size_type v5 = v4;
  if (v4 >= 0x17)
  {
    uint64_t v8 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v8 = v4 | 7;
    }
    uint64_t v9 = v8 + 1;
    p_dst = (std::string *)operator new(v8 + 1);
    __dst.__r_.__value_.__l.__size_ = v5;
    __dst.__r_.__value_.__r.__words[2] = v9 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_10;
  }
  *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v4;
  p_dst = &__dst;
  if (v4) {
LABEL_10:
  }
    memmove(p_dst, v3, v5);
  p_dst->__r_.__value_.__s.__data_[v5] = 0;
  size_t v10 = (char *)operator new(0x28uLL);
  strcpy(v10, " rejected; ABM is shutting down ");
  int64_t v11 = std::string::append(&__dst, v10, 0x20uLL);
  long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  xpc_object_t object[2] = (xpc_object_t)v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)xpc_object_t object = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  operator delete(v10);
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    uint64_t v13 = *(NSObject **)(v2 + 80);
    if (!os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_13;
    }
LABEL_16:
    size_t v16 = object;
    if (SHIBYTE(object[2]) < 0) {
      size_t v16 = (xpc_object_t *)object[0];
    }
    LODWORD(__dst.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = (std::string::size_type)v16;
    _os_log_impl(&dword_1C5767000, v13, OS_LOG_TYPE_DEFAULT, "#I %s", (uint8_t *)&__dst, 0xCu);
    uint64_t v17 = *(void *)(a1 + 40);
    unint64_t v14 = (uint64_t *)(a1 + 40);
    if (!v17) {
      goto LABEL_35;
    }
    goto LABEL_19;
  }
  operator delete(__dst.__r_.__value_.__l.__data_);
  uint64_t v13 = *(NSObject **)(v2 + 80);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT)) {
    goto LABEL_16;
  }
LABEL_13:
  uint64_t v15 = *(void *)(a1 + 40);
  unint64_t v14 = (uint64_t *)(a1 + 40);
  if (v15)
  {
LABEL_19:
    __dst.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
    xpc_object_t v18 = (xpc_object_t)HIBYTE(object[2]);
    if (SHIBYTE(object[2]) < 0) {
      xpc_object_t v18 = object[1];
    }
    if (v18)
    {
      xpc_object_t v19 = xpc_dictionary_create(0, 0, 0);
      if (v19 || (xpc_object_t v19 = xpc_null_create()) != 0)
      {
        if (MEMORY[0x1C8792D30](v19) == MEMORY[0x1E4F14590])
        {
          xpc_retain(v19);
          xpc_object_t v20 = v19;
        }
        else
        {
          xpc_object_t v20 = xpc_null_create();
        }
      }
      else
      {
        xpc_object_t v20 = xpc_null_create();
        xpc_object_t v19 = 0;
      }
      xpc_release(v19);
      xpc_object_t v21 = xpc_null_create();
      unint64_t v22 = (void *)__dst.__r_.__value_.__r.__words[0];
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v20;
      xpc_release(v22);
      xpc_release(v21);
      if (SHIBYTE(object[2]) >= 0) {
        size_t v23 = object;
      }
      else {
        size_t v23 = (xpc_object_t *)object[0];
      }
      xpc_object_t v24 = xpc_string_create((const char *)v23);
      if (!v24) {
        xpc_object_t v24 = xpc_null_create();
      }
      xpc_dictionary_set_value(v20, (const char *)*MEMORY[0x1E4F4C240], v24);
      xpc_object_t v25 = xpc_null_create();
      xpc_release(v24);
      xpc_release(v25);
    }
    unsigned int v26 = -534716415;
    dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(v14, &v26, (void **)&__dst.__r_.__value_.__l.__data_);
    xpc_release(__dst.__r_.__value_.__l.__data_);
  }
LABEL_35:
  if (SHIBYTE(object[2]) < 0) {
    operator delete(object[0]);
  }
}

void sub_1C59014B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, xpc_object_t object, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void ___ZZN15AccessoryModule10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_57(void *a1, void **a2, const void **a3)
{
  size_t v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    uint64_t v7 = a1[4];
    uint64_t v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      uint64_t v9 = v8;
      if (!a1[5])
      {
LABEL_11:
        if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
        return;
      }
      v12[0] = MEMORY[0x1E4F143A8];
      v12[1] = 1174405120;
      v12[2] = ___ZZN15AccessoryModule10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_2_58;
      v12[3] = &__block_descriptor_tmp_67_1;
      v12[4] = v7;
      if (*a3)
      {
        size_t v10 = _Block_copy(*a3);
        int64_t v11 = *a2;
        aBlocuint64_t k = v10;
        xpc_object_t object = v11;
        if (v11)
        {
LABEL_6:
          xpc_retain(v11);
          goto LABEL_9;
        }
      }
      else
      {
        int64_t v11 = *a2;
        aBlocuint64_t k = 0;
        xpc_object_t object = v11;
        if (v11) {
          goto LABEL_6;
        }
      }
      xpc_object_t object = xpc_null_create();
LABEL_9:
      ctu::SharedSynchronizable<AccessoryModule>::execute_wrapped((uint64_t *)(v7 + 48), (uint64_t)v12);
      xpc_release(object);
      xpc_object_t object = 0;
      if (aBlock) {
        _Block_release(aBlock);
      }
      goto LABEL_11;
    }
  }
}

void ___ZZN15AccessoryModule10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_2_58(void *a1)
{
  __p[3] = *(void **)MEMORY[0x1E4F143B8];
  uint64_t v2 = (uint64_t *)a1[4];
  if (!(*(unsigned int (**)(uint64_t *))(*v2 + 88))(v2))
  {
    uint64_t v7 = (void *)a1[6];
    xpc_object_t object = v7;
    if (v7) {
      xpc_retain(v7);
    }
    else {
      xpc_object_t object = xpc_null_create();
    }
    __int16 v16 = abm::AccessorySimulate::create();
    xpc_release(object);
    xpc_object_t object = 0;
    if ((v16 & 0x100) == 0)
    {
      uint64_t v17 = 3760250880;
      xpc_object_t v18 = v2[10];
      if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
      {
        LOWORD(__p[0]) = 0;
        xpc_object_t v19 = "Failed setting AccessorySimulate status, bad argument";
LABEL_105:
        _os_log_error_impl(&dword_1C5767000, v18, OS_LOG_TYPE_ERROR, v19, (uint8_t *)__p, 2u);
        goto LABEL_102;
      }
      goto LABEL_102;
    }
    int v20 = v16 & 1;
    if (v20 == *((unsigned __int8 *)v2 + 160))
    {
LABEL_21:
      uint64_t v17 = 0;
      goto LABEL_102;
    }
    pthread_mutex_lock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
    if (!(void)xmmword_1EBBDD0C0)
    {
      uint64_t v27 = operator new(0x18uLL);
      MEMORY[0x1C8791170](v27, @"com.apple.AppleBasebandManager", *MEMORY[0x1E4F1D3F0]);
      unsigned int v26 = operator new(0x20uLL);
      void *v26 = &unk_1F20F3BE0;
      v26[1] = 0;
      v26[2] = 0;
      v26[3] = v27;
      uint64_t v28 = (std::__shared_weak_count *)*((void *)&xmmword_1EBBDD0C0 + 1);
      *(void *)&xmmword_1EBBDD0C0 = v27;
      *((void *)&xmmword_1EBBDD0C0 + 1) = v26;
      if (!v28)
      {
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v27;
        __dst.__r_.__value_.__l.__size_ = (std::string::size_type)v26;
        goto LABEL_51;
      }
      if (!atomic_fetch_add(&v28->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
    unsigned int v26 = (void *)*((void *)&xmmword_1EBBDD0C0 + 1);
    uint64_t v27 = (void *)xmmword_1EBBDD0C0;
    *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = xmmword_1EBBDD0C0;
    if (!*((void *)&xmmword_1EBBDD0C0 + 1))
    {
LABEL_52:
      pthread_mutex_unlock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
      unint64_t v34 = (const char *)*MEMORY[0x1E4F4CAE0];
      size_t v35 = strlen((const char *)*MEMORY[0x1E4F4CAE0]);
      if (v35 > 0x7FFFFFFFFFFFFFF7) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      uint64_t v36 = (void *)v35;
      if (v35 >= 0x17)
      {
        uint64_t v38 = (v35 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v35 | 7) != 0x17) {
          uint64_t v38 = v35 | 7;
        }
        uint64_t v39 = v38 + 1;
        uint64_t v37 = operator new(v38 + 1);
        __p[1] = v36;
        std::string __p[2] = (void *)(v39 | 0x8000000000000000);
        __p[0] = v37;
      }
      else
      {
        HIBYTE(__p[2]) = v35;
        uint64_t v37 = __p;
        if (!v35)
        {
LABEL_60:
          *((unsigned char *)v36 + (void)v37) = 0;
          if (SHIBYTE(__p[2]) >= 0) {
            std::string::size_type v40 = (char *)__p;
          }
          else {
            std::string::size_type v40 = (char *)__p[0];
          }
          BOOL v41 = ctu::cf::plist_adapter::set<BOOL>((uint64_t)v27, v20, v40, 1);
          if (SHIBYTE(__p[2]) < 0) {
            operator delete(__p[0]);
          }
          if (__dst.__r_.__value_.__l.__size_
            && !atomic_fetch_add((atomic_ullong *volatile)(__dst.__r_.__value_.__l.__size_ + 8), 0xFFFFFFFFFFFFFFFFLL))
          {
            (*(void (**)(std::string::size_type))(*(void *)__dst.__r_.__value_.__l.__size_ + 16))(__dst.__r_.__value_.__l.__size_);
            std::__shared_weak_count::__release_weak((std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_);
          }
          if (!v41) {
            goto LABEL_101;
          }
          pthread_mutex_lock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
          if (!(void)xmmword_1EBBDD0C0)
          {
            uint64_t v43 = (uint64_t (***)(void, uint64_t))operator new(0x18uLL);
            MEMORY[0x1C8791170](v43, @"com.apple.AppleBasebandManager", *MEMORY[0x1E4F1D3F0]);
            size_t v42 = operator new(0x20uLL);
            *size_t v42 = &unk_1F20F3BE0;
            v42[1] = 0;
            v42[2] = 0;
            v42[3] = v43;
            unint64_t v44 = (std::__shared_weak_count *)*((void *)&xmmword_1EBBDD0C0 + 1);
            *(void *)&xmmword_1EBBDD0C0 = v43;
            *((void *)&xmmword_1EBBDD0C0 + 1) = v42;
            if (!v44)
            {
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v43;
              __dst.__r_.__value_.__l.__size_ = (std::string::size_type)v42;
              goto LABEL_76;
            }
            if (!atomic_fetch_add(&v44->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
              std::__shared_weak_count::__release_weak(v44);
            }
          }
          size_t v42 = (void *)*((void *)&xmmword_1EBBDD0C0 + 1);
          uint64_t v43 = (uint64_t (***)(void, uint64_t))xmmword_1EBBDD0C0;
          *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = xmmword_1EBBDD0C0;
          if (!*((void *)&xmmword_1EBBDD0C0 + 1))
          {
LABEL_77:
            pthread_mutex_unlock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
            size_t v45 = strlen(v34);
            if (v45 > 0x7FFFFFFFFFFFFFF7) {
              std::string::__throw_length_error[abi:ne180100]();
            }
            uint64_t v46 = (void *)v45;
            if (v45 >= 0x17)
            {
              uint64_t v48 = (v45 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v45 | 7) != 0x17) {
                uint64_t v48 = v45 | 7;
              }
              uint64_t v49 = v48 + 1;
              uint64_t v47 = operator new(v48 + 1);
              __p[1] = v46;
              std::string __p[2] = (void *)(v49 | 0x8000000000000000);
              __p[0] = v47;
            }
            else
            {
              HIBYTE(__p[2]) = v45;
              uint64_t v47 = __p;
              if (!v45)
              {
LABEL_85:
                *((unsigned char *)v46 + (void)v47) = 0;
                int v50 = Preferences::getPreference<BOOL>(v43, (const char *)__p, (ctu::cf *)(v2 + 20));
                if (SHIBYTE(__p[2]) < 0) {
                  operator delete(__p[0]);
                }
                if (__dst.__r_.__value_.__l.__size_
                  && !atomic_fetch_add((atomic_ullong *volatile)(__dst.__r_.__value_.__l.__size_ + 8), 0xFFFFFFFFFFFFFFFFLL))
                {
                  (*(void (**)(std::string::size_type))(*(void *)__dst.__r_.__value_.__l.__size_ + 16))(__dst.__r_.__value_.__l.__size_);
                  std::__shared_weak_count::__release_weak((std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_);
                }
                if (v50)
                {
                  int v51 = *((unsigned __int8 *)v2 + 160);
                  if (v20 == v51)
                  {
                    xpc_object_t v52 = v2[10];
                    if (os_log_type_enabled(v52, OS_LOG_TYPE_DEFAULT))
                    {
                      size_t v53 = "Enabling";
                      if (!v51) {
                        size_t v53 = "Disabling";
                      }
                      LODWORD(__p[0]) = 136315138;
                      *(void **)((char *)__p + 4) = (void *)v53;
                      _os_log_impl(&dword_1C5767000, v52, OS_LOG_TYPE_DEFAULT, "#I %s accessory simulation", (uint8_t *)__p, 0xCu);
                      xpc_object_t v52 = v2[10];
                    }
                    if (os_log_type_enabled(v52, OS_LOG_TYPE_DEFAULT))
                    {
                      LOWORD(__p[0]) = 0;
                      _os_log_impl(&dword_1C5767000, v52, OS_LOG_TYPE_DEFAULT, "#I Stopping all delegates", (uint8_t *)__p, 2u);
                    }
                    uint64_t v54 = v2[13];
                    for (uint64_t i = v2[14]; v54 != i; v54 += 16)
                      (*(void (**)(void))(**(void **)v54 + 40))();
                    v59[0] = MEMORY[0x1E4F143A8];
                    v59[1] = 0x40000000;
                    v59[2] = ___ZZN15AccessoryModule10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_61;
                    v59[3] = &__block_descriptor_tmp_66_0;
                    v59[4] = v2;
                    ctu::SharedSynchronizable<AccessoryModule>::execute_wrapped(v2 + 6, (uint64_t)v59);
                    goto LABEL_21;
                  }
                }
LABEL_101:
                uint64_t v17 = 3760250880;
                xpc_object_t v18 = v2[10];
                if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
                {
                  LOWORD(__p[0]) = 0;
                  xpc_object_t v19 = "Failed setting AccessorySimulate status to preferences";
                  goto LABEL_105;
                }
LABEL_102:
                xpc_object_t v56 = xpc_null_create();
                uint64_t v57 = a1[5];
                __p[0] = v56;
                xpc_object_t v58 = xpc_null_create();
                (*(void (**)(uint64_t, uint64_t, void **))(v57 + 16))(v57, v17, __p);
                xpc_release(__p[0]);
                xpc_release(v58);
                return;
              }
            }
            memmove(v47, v34, (size_t)v46);
            goto LABEL_85;
          }
LABEL_76:
          atomic_fetch_add_explicit(v42 + 1, 1uLL, memory_order_relaxed);
          goto LABEL_77;
        }
      }
      memmove(v37, v34, (size_t)v36);
      goto LABEL_60;
    }
LABEL_51:
    atomic_fetch_add_explicit(v26 + 1, 1uLL, memory_order_relaxed);
    goto LABEL_52;
  }
  memset(__p, 170, 24);
  uint64_t v3 = (const void *)*MEMORY[0x1E4F4D160];
  size_t v4 = strlen((const char *)*MEMORY[0x1E4F4D160]);
  if (v4 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  std::string::size_type v5 = v4;
  if (v4 >= 0x17)
  {
    uint64_t v8 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v8 = v4 | 7;
    }
    uint64_t v9 = v8 + 1;
    p_dst = (std::string *)operator new(v8 + 1);
    __dst.__r_.__value_.__l.__size_ = v5;
    __dst.__r_.__value_.__r.__words[2] = v9 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_11;
  }
  *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v4;
  p_dst = &__dst;
  if (v4) {
LABEL_11:
  }
    memmove(p_dst, v3, v5);
  p_dst->__r_.__value_.__s.__data_[v5] = 0;
  size_t v10 = (char *)operator new(0x28uLL);
  strcpy(v10, " rejected; ABM is shutting down ");
  int64_t v11 = std::string::append(&__dst, v10, 0x20uLL);
  long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  std::string __p[2] = (void *)v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  operator delete(v10);
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    uint64_t v13 = v2[10];
    if (!os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_14;
    }
LABEL_23:
    xpc_object_t v21 = __p;
    if (SHIBYTE(__p[2]) < 0) {
      xpc_object_t v21 = (void **)__p[0];
    }
    LODWORD(__dst.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = (std::string::size_type)v21;
    _os_log_impl(&dword_1C5767000, v13, OS_LOG_TYPE_DEFAULT, "#I %s", (uint8_t *)&__dst, 0xCu);
    uint64_t v22 = a1[5];
    unint64_t v14 = a1 + 5;
    if (!v22) {
      goto LABEL_48;
    }
    goto LABEL_26;
  }
  operator delete(__dst.__r_.__value_.__l.__data_);
  uint64_t v13 = v2[10];
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT)) {
    goto LABEL_23;
  }
LABEL_14:
  uint64_t v15 = a1[5];
  unint64_t v14 = a1 + 5;
  if (v15)
  {
LABEL_26:
    __dst.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
    size_t v23 = (void *)HIBYTE(__p[2]);
    if (SHIBYTE(__p[2]) < 0) {
      size_t v23 = __p[1];
    }
    if (v23)
    {
      xpc_object_t v24 = xpc_dictionary_create(0, 0, 0);
      if (v24 || (xpc_object_t v24 = xpc_null_create()) != 0)
      {
        if (MEMORY[0x1C8792D30](v24) == MEMORY[0x1E4F14590])
        {
          xpc_retain(v24);
          xpc_object_t v25 = v24;
        }
        else
        {
          xpc_object_t v25 = xpc_null_create();
        }
      }
      else
      {
        xpc_object_t v25 = xpc_null_create();
        xpc_object_t v24 = 0;
      }
      xpc_release(v24);
      xpc_object_t v29 = xpc_null_create();
      BOOL v30 = (void *)__dst.__r_.__value_.__r.__words[0];
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v25;
      xpc_release(v30);
      xpc_release(v29);
      if (SHIBYTE(__p[2]) >= 0) {
        uint64_t v31 = __p;
      }
      else {
        uint64_t v31 = (void **)__p[0];
      }
      xpc_object_t v32 = xpc_string_create((const char *)v31);
      if (!v32) {
        xpc_object_t v32 = xpc_null_create();
      }
      xpc_dictionary_set_value(v25, (const char *)*MEMORY[0x1E4F4C240], v32);
      xpc_object_t v33 = xpc_null_create();
      xpc_release(v32);
      xpc_release(v33);
    }
    unsigned int v61 = -534716415;
    dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(v14, &v61, (void **)&__dst.__r_.__value_.__l.__data_);
    xpc_release(__dst.__r_.__value_.__l.__data_);
  }
LABEL_48:
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
}

void ___ZZN15AccessoryModule10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_61(uint64_t a1)
{
  uint64_t v64 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(void *)(a1 + 32);
  if (*(unsigned char *)(v1 + 160))
  {
    uint64_t v2 = *(void *)(v1 + 152);
    if (v2)
    {
      if (v2 == v1 + 128)
      {
        xpc_object_t v63 = v62;
        (*(void (**)(uint64_t, void *))(*(void *)v2 + 24))(v2, v62);
LABEL_11:
        std::string::size_type v5 = *(NSObject **)(v1 + 64);
        dispatch_object_t object = v5;
        if (v5) {
          dispatch_retain(v5);
        }
        AccessorySimulatorDelegate::create(v62, &object, (std::__shared_weak_count_vtbl **)buf);
        std::vector<std::shared_ptr<AccessoriesDelegateBase>>::__assign_with_size[abi:ne180100]<std::shared_ptr<AccessoriesDelegateBase> const*,std::shared_ptr<AccessoriesDelegateBase> const*>(v1 + 104, buf, &v49, 1uLL);
        uint64_t v6 = *(std::__shared_weak_count **)&buf[8];
        if (*(void *)&buf[8]
          && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
        if (object) {
          dispatch_release(object);
        }
        uint64_t v7 = v63;
        if (v63 == v62)
        {
          (*(void (**)(void *))(v62[0] + 32))(v62);
          if (!*(void *)(v1 + 88)) {
            return;
          }
          goto LABEL_48;
        }
        goto LABEL_45;
      }
      uint64_t v2 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 16))(v2);
    }
    xpc_object_t v63 = (void *)v2;
    goto LABEL_11;
  }
  uint64_t v3 = v1 + 128;
  uint64_t v4 = *(void *)(v1 + 152);
  if (!v4) {
    goto LABEL_9;
  }
  if (v4 != v3)
  {
    uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 16))(v4);
LABEL_9:
    unsigned int v61 = (void *)v4;
    goto LABEL_22;
  }
  unsigned int v61 = v60;
  (*(void (**)(uint64_t, void *))(*(void *)v3 + 24))(v1 + 128, v60);
LABEL_22:
  uint64_t v8 = *(NSObject **)(v1 + 64);
  dispatch_object_t v46 = v8;
  if (v8) {
    dispatch_retain(v8);
  }
  CoreAccessoriesDelegate::create(v60, &v46, (std::__shared_weak_count_vtbl **)buf);
  uint64_t v9 = *(void *)(v1 + 152);
  if (!v9) {
    goto LABEL_27;
  }
  if (v9 != v3)
  {
    uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 16))(v9);
LABEL_27:
    unint64_t v59 = (void *)v9;
    goto LABEL_29;
  }
  unint64_t v59 = v58;
  (*(void (**)(uint64_t, void *))(*(void *)v3 + 24))(v1 + 128, v58);
LABEL_29:
  size_t v10 = *(NSObject **)(v1 + 64);
  dispatch_object_t v45 = v10;
  if (v10) {
    dispatch_retain(v10);
  }
  IOKitAccessoriesDelegate::create(v58, &v45, (std::__shared_weak_count_vtbl **)&v49);
  std::vector<std::shared_ptr<AccessoriesDelegateBase>>::__assign_with_size[abi:ne180100]<std::shared_ptr<AccessoriesDelegateBase> const*,std::shared_ptr<AccessoriesDelegateBase> const*>(v1 + 104, buf, &v50, 2uLL);
  int64_t v11 = (std::__shared_weak_count *)*((void *)&v49 + 1);
  if (*((void *)&v49 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v49 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  long long v12 = *(std::__shared_weak_count **)&buf[8];
  if (*(void *)&buf[8]
    && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  if (v45) {
    dispatch_release(v45);
  }
  if (v59 == v58)
  {
    (*(void (**)(void *))(v58[0] + 32))(v58);
    uint64_t v13 = v46;
    if (v46) {
LABEL_43:
    }
      dispatch_release(v13);
  }
  else
  {
    if (v59) {
      (*(void (**)(void *))(*v59 + 40))(v59);
    }
    uint64_t v13 = v46;
    if (v46) {
      goto LABEL_43;
    }
  }
  uint64_t v7 = v61;
  if (v61 == v60)
  {
    (*(void (**)(void *))(v60[0] + 32))(v60);
    if (!*(void *)(v1 + 88)) {
      return;
    }
LABEL_48:
    unint64_t v14 = *(NSObject **)(v1 + 80);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1C5767000, v14, OS_LOG_TYPE_DEFAULT, "#I Requesting modem soft reset due to accessory mode change", buf, 2u);
    }
    xpc_object_t v15 = xpc_dictionary_create(0, 0, 0);
    if (v15 || (xpc_object_t v15 = xpc_null_create()) != 0)
    {
      if (MEMORY[0x1C8792D30](v15) == MEMORY[0x1E4F14590])
      {
        xpc_retain(v15);
        xpc_object_t v16 = v15;
      }
      else
      {
        xpc_object_t v16 = xpc_null_create();
      }
    }
    else
    {
      xpc_object_t v16 = xpc_null_create();
      xpc_object_t v15 = 0;
    }
    xpc_release(v15);
    xpc_object_t v17 = xpc_string_create((const char *)*MEMORY[0x1E4F4C6F0]);
    if (!v17) {
      xpc_object_t v17 = xpc_null_create();
    }
    xpc_dictionary_set_value(v16, (const char *)*MEMORY[0x1E4F4C690], v17);
    xpc_object_t v18 = xpc_null_create();
    xpc_release(v17);
    xpc_release(v18);
    xpc_object_t v19 = xpc_string_create((const char *)*MEMORY[0x1E4F4D138]);
    if (!v19) {
      xpc_object_t v19 = xpc_null_create();
    }
    xpc_dictionary_set_value(v16, (const char *)*MEMORY[0x1E4F4CA38], v19);
    xpc_object_t v20 = xpc_null_create();
    xpc_release(v19);
    xpc_release(v20);
    unint64_t v57 = 0xAAAAAAAAAAAAAAAALL;
    *(void *)&long long v21 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v21 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v56[7] = v21;
    v56[8] = v21;
    v56[5] = v21;
    v56[6] = v21;
    v56[3] = v21;
    v56[4] = v21;
    v56[1] = v21;
    v56[2] = v21;
    long long v55 = v21;
    v56[0] = v21;
    *(_OWORD *)std::string __p = v21;
    long long v54 = v21;
    long long v51 = v21;
    long long v52 = v21;
    long long v49 = v21;
    long long v50 = v21;
    *(_OWORD *)long long buf = v21;
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)buf);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v49, (uint64_t)"User requested to ", 18);
    if (*(unsigned char *)(v1 + 160)) {
      uint64_t v22 = "enable";
    }
    else {
      uint64_t v22 = "disable";
    }
    if (*(unsigned char *)(v1 + 160)) {
      uint64_t v23 = 6;
    }
    else {
      uint64_t v23 = 7;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v49, (uint64_t)v22, v23);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v49, (uint64_t)"Accessory Simulation", 20);
    if ((BYTE8(v55) & 0x10) != 0)
    {
      uint64_t v26 = v55;
      if ((unint64_t)v55 < *((void *)&v52 + 1))
      {
        *(void *)&long long v55 = *((void *)&v52 + 1);
        uint64_t v26 = *((void *)&v52 + 1);
      }
      uint64_t v27 = (const void *)v52;
      size_t v24 = v26 - v52;
      if ((unint64_t)(v26 - v52) > 0x7FFFFFFFFFFFFFF7) {
        goto LABEL_107;
      }
    }
    else
    {
      if ((BYTE8(v55) & 8) == 0)
      {
        size_t v24 = 0;
        HIBYTE(v44) = 0;
        p_dst = (void **)&__dst;
        goto LABEL_83;
      }
      uint64_t v27 = (const void *)*((void *)&v50 + 1);
      size_t v24 = *((void *)&v51 + 1) - *((void *)&v50 + 1);
      if (*((void *)&v51 + 1) - *((void *)&v50 + 1) > 0x7FFFFFFFFFFFFFF7uLL) {
LABEL_107:
      }
        std::string::__throw_length_error[abi:ne180100]();
    }
    if (v24 >= 0x17)
    {
      uint64_t v28 = (v24 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v24 | 7) != 0x17) {
        uint64_t v28 = v24 | 7;
      }
      uint64_t v29 = v28 + 1;
      p_dst = (void **)operator new(v28 + 1);
      size_t v43 = v24;
      int64_t v44 = v29 | 0x8000000000000000;
      std::string __dst = p_dst;
    }
    else
    {
      HIBYTE(v44) = v24;
      p_dst = (void **)&__dst;
      if (!v24)
      {
LABEL_83:
        *((unsigned char *)p_dst + v24) = 0;
        if (v44 >= 0) {
          BOOL v30 = (const char *)&__dst;
        }
        else {
          BOOL v30 = (const char *)__dst;
        }
        xpc_object_t v31 = xpc_string_create(v30);
        if (!v31) {
          xpc_object_t v31 = xpc_null_create();
        }
        xpc_dictionary_set_value(v16, (const char *)*MEMORY[0x1E4F4C8F0], v31);
        xpc_object_t v32 = xpc_null_create();
        xpc_release(v31);
        xpc_release(v32);
        if (SHIBYTE(v44) < 0) {
          operator delete(__dst);
        }
        xpc_object_t v33 = (const void *)*MEMORY[0x1E4F4C638];
        size_t v34 = strlen((const char *)*MEMORY[0x1E4F4C638]);
        if (v34 > 0x7FFFFFFFFFFFFFF7) {
          std::string::__throw_length_error[abi:ne180100]();
        }
        size_t v35 = v34;
        if (v34 >= 0x17)
        {
          uint64_t v37 = (v34 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v34 | 7) != 0x17) {
            uint64_t v37 = v34 | 7;
          }
          uint64_t v38 = v37 + 1;
          uint64_t v36 = (void **)operator new(v37 + 1);
          size_t v43 = v35;
          int64_t v44 = v38 | 0x8000000000000000;
          std::string __dst = v36;
        }
        else
        {
          HIBYTE(v44) = v34;
          uint64_t v36 = (void **)&__dst;
          if (!v34)
          {
            LOBYTE(__dst) = 0;
            xpc_object_t v41 = v16;
            if (v16)
            {
LABEL_94:
              xpc_retain(v16);
LABEL_100:
              std::string::size_type v40 = 0;
              Service::runCommand(v1, (uint64_t)&__dst, &v41, &v40);
              xpc_release(v41);
              xpc_object_t v41 = 0;
              if (SHIBYTE(v44) < 0) {
                operator delete(__dst);
              }
              *(void *)long long buf = *MEMORY[0x1E4FBA408];
              uint64_t v39 = *(void *)(MEMORY[0x1E4FBA408] + 72);
              *(void *)&buf[*(void *)(*(void *)buf - 24)] = *(void *)(MEMORY[0x1E4FBA408] + 64);
              *(void *)&long long v49 = v39;
              *((void *)&v49 + 1) = MEMORY[0x1E4FBA470] + 16;
              if (SHIBYTE(v54) < 0) {
                operator delete(__p[1]);
              }
              std::streambuf::~streambuf();
              std::iostream::~basic_iostream();
              MEMORY[0x1C8791FB0](v56);
              xpc_release(v16);
              return;
            }
LABEL_99:
            xpc_object_t v41 = xpc_null_create();
            goto LABEL_100;
          }
        }
        memmove(v36, v33, v35);
        *((unsigned char *)v36 + v35) = 0;
        xpc_object_t v41 = v16;
        if (v16) {
          goto LABEL_94;
        }
        goto LABEL_99;
      }
    }
    memmove(p_dst, v27, v24);
    goto LABEL_83;
  }
LABEL_45:
  if (v7) {
    (*(void (**)(void *))(*v7 + 40))(v7);
  }
  if (*(void *)(v1 + 88)) {
    goto LABEL_48;
  }
}

void sub_1C5902BB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, dispatch_object_t object, dispatch_object_t a18, dispatch_object_t a19, char a20)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

xpc_object_t __copy_helper_block_e8_40c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE48c15_ZTSN3xpc4dictE(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(const void **)(a2 + 40);
  if (v4)
  {
    std::string::size_type v5 = _Block_copy(v4);
    uint64_t v6 = *(void **)(a2 + 48);
    *(void *)(a1 + 40) = v5;
    *(void *)(a1 + 48) = v6;
    if (v6) {
      return xpc_retain(v6);
    }
  }
  else
  {
    uint64_t v6 = *(void **)(a2 + 48);
    *(void *)(a1 + 40) = 0;
    *(void *)(a1 + 48) = v6;
    if (v6) {
      return xpc_retain(v6);
    }
  }
  xpc_object_t result = xpc_null_create();
  *(void *)(a1 + 48) = result;
  return result;
}

void __destroy_helper_block_e8_40c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE48c15_ZTSN3xpc4dictE(uint64_t a1)
{
  xpc_release(*(xpc_object_t *)(a1 + 48));
  *(void *)(a1 + 48) = 0;
  uint64_t v2 = *(const void **)(a1 + 40);
  if (v2) {
    _Block_release(v2);
  }
}

void ___ZZN15AccessoryModule10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_71(void *a1, void **a2, const void **a3)
{
  uint64_t v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    uint64_t v7 = a1[4];
    uint64_t v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      uint64_t v9 = v8;
      if (!a1[5])
      {
LABEL_11:
        if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
        return;
      }
      v12[0] = MEMORY[0x1E4F143A8];
      v12[1] = 1174405120;
      v12[2] = ___ZZN15AccessoryModule10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_2_72;
      v12[3] = &__block_descriptor_tmp_75_3;
      v12[4] = v7;
      if (*a3)
      {
        size_t v10 = _Block_copy(*a3);
        int64_t v11 = *a2;
        aBlocuint64_t k = v10;
        xpc_object_t object = v11;
        if (v11)
        {
LABEL_6:
          xpc_retain(v11);
          goto LABEL_9;
        }
      }
      else
      {
        int64_t v11 = *a2;
        aBlocuint64_t k = 0;
        xpc_object_t object = v11;
        if (v11) {
          goto LABEL_6;
        }
      }
      xpc_object_t object = xpc_null_create();
LABEL_9:
      ctu::SharedSynchronizable<AccessoryModule>::execute_wrapped((uint64_t *)(v7 + 48), (uint64_t)v12);
      xpc_release(object);
      xpc_object_t object = 0;
      if (aBlock) {
        _Block_release(aBlock);
      }
      goto LABEL_11;
    }
  }
}

void ___ZZN15AccessoryModule10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_2_72(void *a1)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (void *)a1[4];
  if ((*(unsigned int (**)(void *))(*v2 + 88))(v2))
  {
    memset(__p, 170, 24);
    uint64_t v3 = (const void *)*MEMORY[0x1E4F4CC00];
    size_t v4 = strlen((const char *)*MEMORY[0x1E4F4CC00]);
    if (v4 >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    std::string::size_type v5 = v4;
    if (v4 >= 0x17)
    {
      uint64_t v11 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v4 | 7) != 0x17) {
        uint64_t v11 = v4 | 7;
      }
      uint64_t v12 = v11 + 1;
      p_dst = (std::string *)operator new(v11 + 1);
      __dst.__r_.__value_.__l.__size_ = v5;
      __dst.__r_.__value_.__r.__words[2] = v12 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v4;
      p_dst = &__dst;
      if (!v4)
      {
LABEL_14:
        p_dst->__r_.__value_.__s.__data_[v5] = 0;
        uint64_t v13 = (char *)operator new(0x28uLL);
        strcpy(v13, " rejected; ABM is shutting down ");
        unint64_t v14 = std::string::append(&__dst, v13, 0x20uLL);
        long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
        std::string __p[2] = (void *)v14->__r_.__value_.__r.__words[2];
        *(_OWORD *)std::string __p = v15;
        v14->__r_.__value_.__l.__size_ = 0;
        v14->__r_.__value_.__r.__words[2] = 0;
        v14->__r_.__value_.__r.__words[0] = 0;
        operator delete(v13);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__dst.__r_.__value_.__l.__data_);
          xpc_object_t v16 = v2[10];
          if (!os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
          {
LABEL_16:
            uint64_t v18 = a1[5];
            xpc_object_t v17 = a1 + 5;
            if (!v18)
            {
LABEL_62:
              if (SHIBYTE(__p[2]) < 0) {
                operator delete(__p[0]);
              }
              return;
            }
LABEL_22:
            __dst.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
            long long v21 = (void *)HIBYTE(__p[2]);
            if (SHIBYTE(__p[2]) < 0) {
              long long v21 = __p[1];
            }
            if (v21)
            {
              xpc_object_t v22 = xpc_dictionary_create(0, 0, 0);
              if (v22 || (xpc_object_t v22 = xpc_null_create()) != 0)
              {
                if (MEMORY[0x1C8792D30](v22) == MEMORY[0x1E4F14590])
                {
                  xpc_retain(v22);
                  xpc_object_t v23 = v22;
                }
                else
                {
                  xpc_object_t v23 = xpc_null_create();
                }
              }
              else
              {
                xpc_object_t v23 = xpc_null_create();
                xpc_object_t v22 = 0;
              }
              xpc_release(v22);
              xpc_object_t v34 = xpc_null_create();
              size_t v35 = (void *)__dst.__r_.__value_.__r.__words[0];
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v23;
              xpc_release(v35);
              xpc_release(v34);
              if (SHIBYTE(__p[2]) >= 0) {
                uint64_t v36 = __p;
              }
              else {
                uint64_t v36 = (void **)__p[0];
              }
              xpc_object_t v37 = xpc_string_create((const char *)v36);
              if (!v37) {
                xpc_object_t v37 = xpc_null_create();
              }
              xpc_dictionary_set_value(v23, (const char *)*MEMORY[0x1E4F4C240], v37);
              xpc_object_t v38 = xpc_null_create();
              xpc_release(v37);
              xpc_release(v38);
            }
            LODWORD(object) = -534716415;
            dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(v17, (unsigned int *)&object, (void **)&__dst.__r_.__value_.__l.__data_);
            xpc_release(__dst.__r_.__value_.__l.__data_);
            goto LABEL_62;
          }
        }
        else
        {
          xpc_object_t v16 = v2[10];
          if (!os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_16;
          }
        }
        xpc_object_t v19 = __p;
        if (SHIBYTE(__p[2]) < 0) {
          xpc_object_t v19 = (void **)__p[0];
        }
        LODWORD(__dst.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = (std::string::size_type)v19;
        _os_log_impl(&dword_1C5767000, v16, OS_LOG_TYPE_DEFAULT, "#I %s", (uint8_t *)&__dst, 0xCu);
        uint64_t v20 = a1[5];
        xpc_object_t v17 = a1 + 5;
        if (!v20) {
          goto LABEL_62;
        }
        goto LABEL_22;
      }
    }
    memmove(p_dst, v3, v5);
    goto LABEL_14;
  }
  uint64_t v7 = 3760250880;
  uint64_t v8 = (xpc_object_t *)(a1 + 6);
  if (MEMORY[0x1C8792D30](a1[6]) == MEMORY[0x1E4F14590])
  {
    uint64_t v9 = (const char *)*MEMORY[0x1E4F4CC00];
    if (xpc_dictionary_get_value(*v8, (const char *)*MEMORY[0x1E4F4CC00]))
    {
      memset(&__dst, 170, sizeof(__dst));
      xpc_object_t value = xpc_dictionary_get_value(*v8, v9);
      xpc_object_t object = value;
      if (value) {
        xpc_retain(value);
      }
      else {
        xpc_object_t object = xpc_null_create();
      }
      __p[1] = 0;
      std::string __p[2] = 0;
      xpc::dyn_cast_or_default();
      xpc_release(object);
      xpc_object_t object = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
      __p[0] = a1 + 6;
      size_t v24 = &__dst;
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        size_t v24 = (std::string *)__dst.__r_.__value_.__r.__words[0];
      }
      __p[1] = v24;
      xpc::dict::object_proxy::operator xpc::dict((uint64_t)__p, &object);
      xpc_object_t v25 = (uint64_t *)v2[13];
      uint64_t v26 = (uint64_t *)v2[14];
      if (v25 == v26)
      {
        int v30 = 0;
      }
      else
      {
        int v27 = 0;
        do
        {
          uint64_t v28 = *v25;
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
            std::string::__init_copy_ctor_external(&v40, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
          }
          else {
            std::string v40 = __dst;
          }
          xpc_object_t v39 = object;
          if (object) {
            xpc_retain(object);
          }
          else {
            xpc_object_t v39 = xpc_null_create();
          }
          int v29 = (*(uint64_t (**)(uint64_t, std::string *, xpc_object_t *))(*(void *)v28 + 24))(v28, &v40, &v39);
          xpc_release(v39);
          xpc_object_t v39 = 0;
          if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v40.__r_.__value_.__l.__data_);
          }
          if (v29) {
            int v27 = 1;
          }
          v25 += 2;
        }
        while (v25 != v26);
        int v30 = v27;
      }
      xpc_release(object);
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__dst.__r_.__value_.__l.__data_);
      }
      if (v30) {
        uint64_t v7 = 0;
      }
      else {
        uint64_t v7 = 3760250880;
      }
    }
  }
  xpc_object_t v31 = xpc_null_create();
  uint64_t v32 = a1[5];
  __p[0] = v31;
  xpc_object_t v33 = xpc_null_create();
  (*(void (**)(uint64_t, uint64_t, void **))(v32 + 16))(v32, v7, __p);
  xpc_release(__p[0]);
  xpc_release(v33);
}

void sub_1C59034AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, xpc_object_t object, xpc_object_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t __cxx_global_var_init_22()
{
  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<ABMProperties>::~PthreadMutexGuardPolicy, &ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance, &dword_1C5767000);
  }
  return result;
}

{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<SharedData>::~PthreadMutexGuardPolicy, &ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance, &dword_1C5767000);
  }
  return result;
}

uint64_t __cxx_global_var_init_23()
{
  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<CommandDriverFactory>::~PthreadMutexGuardPolicy, &ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance, &dword_1C5767000);
  }
  return result;
}

{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<ABMServer>::~PthreadMutexGuardPolicy, &ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance, &dword_1C5767000);
  }
  return result;
}

void antenna::Service::Internal::create(uint64_t *a1@<X0>, uint64_t a2@<X1>, NSObject **a3@<X2>, antenna::Service::Internal **a4@<X8>)
{
  *a4 = (antenna::Service::Internal *)0xAAAAAAAAAAAAAAAALL;
  a4[1] = (antenna::Service::Internal *)0xAAAAAAAAAAAAAAAALL;
  uint64_t v8 = (antenna::Service::Internal *)operator new(0x2E8uLL);
  uint64_t v9 = (std::__shared_weak_count *)a1[1];
  uint64_t v27 = *a1;
  uint64_t v28 = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (*(void *)a2)
  {
    size_t v10 = _Block_copy(*(const void **)a2);
    uint64_t v11 = *(NSObject **)(a2 + 8);
    xpc_object_t v25 = v10;
    uint64_t v26 = v11;
    if (!v11) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  size_t v10 = 0;
  uint64_t v11 = *(NSObject **)(a2 + 8);
  xpc_object_t v25 = 0;
  uint64_t v26 = v11;
  if (v11) {
LABEL_5:
  }
    dispatch_retain(v11);
LABEL_6:
  uint64_t v12 = *a3;
  dispatch_object_t v24 = v12;
  if (v12) {
    dispatch_retain(v12);
  }
  antenna::Service::Internal::Internal(v8, &v27, (uint64_t)&v25, &v24);
  *a4 = v8;
  a4[1] = (antenna::Service::Internal *)0xAAAAAAAAAAAAAAAALL;
  uint64_t v13 = (std::__shared_weak_count *)operator new(0x20uLL);
  v13->__shared_owners_ = 0;
  p_shared_owners = &v13->__shared_owners_;
  v13->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20FCE28;
  v13->__shared_weak_owners_ = 0;
  v13[1].__vftable = (std::__shared_weak_count_vtbl *)v8;
  a4[1] = (antenna::Service::Internal *)v13;
  long long v15 = (std::__shared_weak_count *)*((void *)v8 + 10);
  if (v15)
  {
    if (v15->__shared_owners_ == -1)
    {
      atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v13->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      *((void *)v8 + 9) = v8;
      *((void *)v8 + 10) = v13;
      std::__shared_weak_count::__release_weak(v15);
      if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL))
      {
LABEL_11:
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
        xpc_object_t v16 = *a4;
        if (!*((void *)*a4 + 7)) {
          goto LABEL_25;
        }
        goto LABEL_17;
      }
    }
  }
  else
  {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v13->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    *((void *)v8 + 9) = v8;
    *((void *)v8 + 10) = v13;
    if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_11;
    }
  }
  xpc_object_t v16 = *a4;
  if (!*((void *)*a4 + 7)) {
    goto LABEL_25;
  }
LABEL_17:
  xpc_object_t v17 = (std::__shared_weak_count *)*((void *)v16 + 10);
  if (!v17 || (uint64_t v18 = *((void *)v16 + 9), (v19 = std::__shared_weak_count::lock(v17)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v20 = v19;
  uint64_t v31 = v18;
  uint64_t v32 = v19;
  ctu::LoggerCommonBase::getLogDomain((antenna::Service::Internal *)((char *)v16 + 8));
  uint64_t v29 = v18;
  int v30 = v20;
  uint64_t v31 = 0;
  uint64_t v32 = 0;
  ctu::TrackedLogger::registerLoggerToServer();
  long long v21 = v30;
  if (v30 && !atomic_fetch_add(&v30->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v21);
  }
  xpc_object_t v22 = v32;
  if (v32 && !atomic_fetch_add(&v32->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
  }
LABEL_25:
  if (v12) {
    dispatch_release(v12);
  }
  if (v11) {
    dispatch_release(v11);
  }
  if (v10) {
    _Block_release(v10);
  }
  xpc_object_t v23 = v28;
  if (v28 && !atomic_fetch_add(&v28->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
  }
  if (*a4) {
    antenna::Service::Internal::init(*a4);
  }
}

void sub_1C590399C()
{
}

void sub_1C59039F0()
{
}

void sub_1C5903A00()
{
}

void antenna::Service::Internal::init(antenna::Service::Internal *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 10);
  if (!v2 || (uint64_t v3 = *((void *)this + 9), (v4 = std::__shared_weak_count::lock(v2)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  std::string::size_type v5 = v4;
  uint64_t v6 = operator new(8uLL);
  *uint64_t v6 = this;
  uint64_t v7 = *((void *)this + 11);
  atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v8 = operator new(0x18uLL);
  *uint64_t v8 = v6;
  v8[1] = v3;
  v8[2] = v5;
  dispatch_async_f(v7, v8, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<antenna::Service::Internal>::execute_wrapped<antenna::Service::Internal::init(void)::$_0>(antenna::Service::Internal::init(void)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<antenna::Service::Internal::init(void)::$_0,dispatch_queue_s *::default_delete<antenna::Service::Internal::init(void)::$_0>>)::{lambda(void *)#1}::__invoke);
  if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void *antenna::Service::Internal::Internal(void *a1, void *a2, uint64_t a3, dispatch_object_t *a4)
{
  *a1 = &unk_1F20FCB68;
  uint64_t v7 = *a4;
  if (*a4) {
    dispatch_retain(*a4);
  }
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v47, "com.apple.telephony.abm", "antenna.svc");
  if (v7) {
    dispatch_retain(v7);
  }
  initially_inactive = dispatch_queue_attr_make_initially_inactive(0);
  uint64_t v9 = dispatch_queue_create_with_target_V2("antenna.svc", initially_inactive, v7);
  dispatch_set_qos_class_floor(v9, QOS_CLASS_DEFAULT, 0);
  dispatch_activate(v9);
  a1[9] = 0;
  a1[10] = 0;
  a1[11] = v9;
  if (v9) {
    dispatch_retain(v9);
  }
  a1[12] = v7;
  if (v7) {
    dispatch_retain(v7);
  }
  if (v9) {
    dispatch_release(v9);
  }
  if (v7) {
    dispatch_release(v7);
  }
  *a1 = &unk_1F20FCD88;
  ctu::OsLogContext::OsLogContext();
  ctu::OsLogContext::OsLogContext();
  ctu::LoggerCommonBase::LoggerCommonBase();
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v49);
  a1[1] = &unk_1F20F0070;
  a1[7] = *a2;
  uint64_t v10 = a2[1];
  a1[8] = v10;
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v48);
  *a1 = &unk_1F20FCE78;
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v47);
  if (v7) {
    dispatch_release(v7);
  }
  *a1 = &unk_1F20FCB68;
  uint64_t v11 = *(void **)a3;
  if (*(void *)a3) {
    uint64_t v11 = _Block_copy(v11);
  }
  a1[13] = v11;
  uint64_t v12 = *(NSObject **)(a3 + 8);
  a1[14] = v12;
  if (v12) {
    dispatch_retain(v12);
  }
  a1[15] = 0;
  a1[16] = 0;
  a1[17] = *a2;
  uint64_t v13 = a2[1];
  a1[18] = v13;
  if (v13) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
  }
  *((unsigned char *)a1 + 164) = 0;
  *((unsigned char *)a1 + 168) = 0;
  a1[23] = 0;
  a1[25] = 0;
  *((unsigned char *)a1 + 216) = 0;
  xpc_object_t v14 = xpc_null_create();
  a1[29] = 0;
  a1[28] = v14;
  a1[32] = 0;
  a1[36] = 0;
  a1[30] = 0;
  *((unsigned char *)a1 + 248) = 0;
  a1[33] = 0;
  *((_DWORD *)a1 + 68) = 0;
  a1[35] = a1 + 36;
  a1[39] = 0;
  a1[40] = 0;
  a1[41] = 0;
  a1[37] = 0;
  a1[38] = a1 + 39;
  *((_DWORD *)a1 + 88) = 255;
  a1[45] = 0;
  a1[47] = 0;
  *((unsigned char *)a1 + 368) = 0;
  a1[48] = 0;
  long long v15 = (const void *)*MEMORY[0x1E4F4D2C8];
  size_t v16 = strlen((const char *)*MEMORY[0x1E4F4D2C8]);
  if (v16 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v17 = v16;
  if (v16 >= 0x17)
  {
    uint64_t v19 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v16 | 7) != 0x17) {
      uint64_t v19 = v16 | 7;
    }
    uint64_t v20 = v19 + 1;
    uint64_t v18 = operator new(v19 + 1);
    a1[50] = v17;
    a1[51] = v20 | 0x8000000000000000;
    a1[49] = v18;
    goto LABEL_30;
  }
  *((unsigned char *)a1 + 415) = v16;
  uint64_t v18 = a1 + 49;
  if (v16) {
LABEL_30:
  }
    memmove(v18, v15, v17);
  *((unsigned char *)v18 + v17) = 0;
  long long v21 = a1 + 52;
  size_t v22 = strlen((const char *)v15);
  if (v22 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v23 = v22;
  if (v22 >= 0x17)
  {
    uint64_t v24 = (v22 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v22 | 7) != 0x17) {
      uint64_t v24 = v22 | 7;
    }
    uint64_t v25 = v24 + 1;
    long long v21 = operator new(v24 + 1);
    a1[53] = v23;
    a1[54] = v25 | 0x8000000000000000;
    a1[52] = v21;
    goto LABEL_38;
  }
  *((unsigned char *)a1 + 439) = v22;
  if (v22) {
LABEL_38:
  }
    memmove(v21, v15, v23);
  *((unsigned char *)v21 + v23) = 0;
  a1[56] = 0;
  a1[57] = 0;
  a1[55] = a1 + 56;
  *((unsigned char *)a1 + 476) = 0;
  *((_DWORD *)a1 + 120) = 0;
  *((unsigned char *)a1 + 488) = 0;
  *((_OWORD *)a1 + 31) = 0u;
  *((_OWORD *)a1 + 32) = 0u;
  uint64_t v26 = a1 + 67;
  *((_DWORD *)a1 + 132) = 255;
  size_t v27 = strlen((const char *)v15);
  if (v27 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v28 = v27;
  if (v27 >= 0x17)
  {
    uint64_t v29 = (v27 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v27 | 7) != 0x17) {
      uint64_t v29 = v27 | 7;
    }
    uint64_t v30 = v29 + 1;
    uint64_t v26 = operator new(v29 + 1);
    a1[67] = v26;
    a1[69] = v30 | 0x8000000000000000;
    a1[68] = v28;
    goto LABEL_46;
  }
  *((unsigned char *)a1 + 559) = v27;
  if (v27) {
LABEL_46:
  }
    memmove(v26, v15, v28);
  *((unsigned char *)v26 + v28) = 0;
  *((_WORD *)a1 + 280) = 0;
  *(void *)((char *)a1 + 564) = 0xFFFFFFFF00000001;
  *((unsigned char *)a1 + 572) = 0;
  *((_OWORD *)a1 + 36) = 0u;
  size_t v31 = strlen((const char *)v15);
  if (v31 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v32 = v31;
  if (v31 >= 0x17)
  {
    uint64_t v34 = (v31 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v31 | 7) != 0x17) {
      uint64_t v34 = v31 | 7;
    }
    uint64_t v35 = v34 + 1;
    xpc_object_t v33 = operator new(v34 + 1);
    a1[74] = v33;
    a1[76] = v35 | 0x8000000000000000;
    a1[75] = v32;
    goto LABEL_54;
  }
  *((unsigned char *)a1 + 615) = v31;
  xpc_object_t v33 = a1 + 74;
  if (v31) {
LABEL_54:
  }
    memmove(v33, v15, v32);
  *((unsigned char *)v33 + v32) = 0;
  a1[79] = 0;
  a1[78] = 0;
  a1[77] = a1 + 78;
  size_t v36 = strlen((const char *)v15);
  if (v36 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v37 = v36;
  if (v36 >= 0x17)
  {
    uint64_t v39 = (v36 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v36 | 7) != 0x17) {
      uint64_t v39 = v36 | 7;
    }
    uint64_t v40 = v39 + 1;
    xpc_object_t v38 = operator new(v39 + 1);
    a1[80] = v38;
    a1[82] = v40 | 0x8000000000000000;
    a1[81] = v37;
    goto LABEL_62;
  }
  *((unsigned char *)a1 + 663) = v36;
  xpc_object_t v38 = a1 + 80;
  if (v36) {
LABEL_62:
  }
    size_t v36 = (size_t)memmove(v38, v15, v37);
  *((unsigned char *)v38 + v37) = 0;
  *((_OWORD *)a1 + 42) = 0u;
  *((unsigned char *)a1 + 688) = config::hw::watch((config::hw *)v36);
  xpc_object_t v41 = a1 + 87;
  size_t v42 = strlen((const char *)v15);
  if (v42 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v43 = v42;
  if (v42 >= 0x17)
  {
    uint64_t v44 = (v42 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v42 | 7) != 0x17) {
      uint64_t v44 = v42 | 7;
    }
    uint64_t v45 = v44 + 1;
    xpc_object_t v41 = operator new(v44 + 1);
    a1[87] = v41;
    a1[89] = v45 | 0x8000000000000000;
    a1[88] = v43;
  }
  else
  {
    *((unsigned char *)a1 + 719) = v42;
    if (!v42) {
      goto LABEL_71;
    }
  }
  memmove(v41, v15, v43);
LABEL_71:
  *((unsigned char *)v41 + v43) = 0;
  *((_WORD *)a1 + 368) = 0;
  return a1;
}

void sub_1C59041C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va1, a11);
  va_start(va, a11);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)(v13 - 96));
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)va1);
  ctu::SharedSynchronizable<DataStallDetection>::~SharedSynchronizable(v12);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)va);
  if (v11)
  {
    dispatch_release(v11);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

const char *antenna::Service::Internal::getName(antenna::Service::Internal *this)
{
  return "antenna.svc";
}

void *ctu::SharedLoggable<antenna::Service::Internal,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(void *a1)
{
  *a1 = &unk_1F20FCD88;
  MEMORY[0x1C8790F40](a1 + 1);
  uint64_t v2 = a1[12];
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = a1[11];
  if (v3) {
    dispatch_release(v3);
  }
  size_t v4 = (std::__shared_weak_count *)a1[10];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = &unk_1F20FCD88;
  MEMORY[0x1C8790F40](a1 + 1);
  uint64_t v2 = a1[12];
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = a1[11];
  if (v3) {
    dispatch_release(v3);
  }
  size_t v4 = (std::__shared_weak_count *)a1[10];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

void antenna::Service::Internal::shutdown(antenna::Service::Internal *this)
{
  uint64_t v2 = (IOKitEventNotifier *)*((void *)this + 47);
  if (v2) {
    IOKitEventNotifier::shutdown(v2);
  }
  uint64_t v3 = (uint64_t **)*((void *)this + 64);
  if (v3)
  {
    std::string::size_type v5 = *v3;
    ctu::SharedSynchronizable<CMHandDetectionHandler>::execute_wrapped<CMHandDetectionHandler::shutdown(void)::{lambda(void)#1}>(v5, &v5);
  }
  size_t v4 = (PPMHandler **)*((void *)this + 72);
  if (v4) {
    PPMHandler::shutdown(*v4);
  }
  if (*((void *)this + 15)) {
    antenna::CommandDriver::registerHandler();
  }
}

void sub_1C5904528(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void antenna::Service::Internal::setupTxPower_sync(antenna::Service::Internal *this)
{
  if (*((unsigned char *)this + 153)) {
    antenna::Service::Internal::configTxPower_sync((uint64_t)this, 1u);
  }
  if (!*((unsigned char *)this + 664)) {
    antenna::Service::Internal::configTxPower_sync((uint64_t)this, 2u);
  }
  if (*((unsigned char *)this + 152)) {
    antenna::Service::Internal::configTxPower_sync((uint64_t)this, 3u);
  }
  if (*((unsigned char *)this + 153) || *((unsigned char *)this + 152))
  {
    antenna::Service::Internal::enableTxPowerCapping_sync(this, 1);
    antenna::Service::Internal::enableTxPowerCappingNotification_sync(this, 1);
    antenna::Service::Internal::enableTxPowerCappingIndication_sync(this);
  }
  *((unsigned char *)this + 216) = 0;
  *((unsigned char *)this + 168) = 0;
  if (*((unsigned char *)this + 163)) {
    antenna::Service::Internal::sendVideoAccessory_sync(this, *((unsigned __int8 *)this + 164));
  }
  if (*((unsigned char *)this + 160)) {
    antenna::Service::Internal::sendAudioAccessory_sync(this);
  }
  if (*((unsigned char *)this + 156) || *((unsigned char *)this + 158))
  {
    if (*((unsigned char *)this + 192))
    {
      uint64_t v2 = (ctu::iokit::IOHIDController *)*((void *)this + 62);
      if (v2) {
        ctu::iokit::IOHIDController::queryHIDEventTrigger(v2);
      }
    }
    antenna::Service::Internal::sendAccessoryStatus_sync((NSObject **)this);
  }
  if (*((unsigned char *)this + 169)) {
    antenna::Service::Internal::sendPowerSource_sync(this);
  }
  if (*((unsigned char *)this + 572)) {
    antenna::Service::Internal::enablePPM_sync(this, 1);
  }
  if (*((unsigned char *)this + 170))
  {
    if (!*((void *)this + 79))
    {
      config::hw::deviceMaterial(this);
      if ((void **)((char *)this + 616) != &v3) {
        std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<unsigned int,unsigned int>,std::__tree_node<std::__value_type<unsigned int,unsigned int>,void *> *,long>>((uint64_t **)this + 77, v3, &v4);
      }
      std::__tree<std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>>>::destroy(v4);
    }
    antenna::Service::Internal::sendDeviceMaterial_sync(this);
  }
}

void sub_1C590469C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
}

void antenna::Service::Internal::configTxPower_sync(uint64_t a1, unsigned int a2)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
  if (v4 || (xpc_object_t v4 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C8792D30](v4) == MEMORY[0x1E4F14590])
    {
      xpc_retain(v4);
      xpc_object_t v5 = v4;
    }
    else
    {
      xpc_object_t v5 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v5 = xpc_null_create();
    xpc_object_t v4 = 0;
  }
  xpc_release(v4);
  uint64_t v6 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)long long buf = 67109120;
    unsigned int v22 = a2;
    _os_log_debug_impl(&dword_1C5767000, v6, OS_LOG_TYPE_DEBUG, "#D  Configuration tx power for %d", buf, 8u);
  }
  xpc_object_t v7 = xpc_int64_create(a2);
  if (!v7) {
    xpc_object_t v7 = xpc_null_create();
  }
  xpc_dictionary_set_value(v5, (const char *)*MEMORY[0x1E4FB9D58], v7);
  xpc_object_t v8 = xpc_null_create();
  xpc_release(v7);
  xpc_release(v8);
  xpc_object_t v9 = xpc_string_create((const char *)*MEMORY[0x1E4FB9D78]);
  if (!v9) {
    xpc_object_t v9 = xpc_null_create();
  }
  xpc_dictionary_set_value(v5, (const char *)*MEMORY[0x1E4FB9C68], v9);
  xpc_object_t v10 = xpc_null_create();
  xpc_release(v9);
  xpc_release(v10);
  if ((a2 & 0xFFFFFFFD) == 1)
  {
    xpc_object_t v11 = xpc_int64_create(*(unsigned int *)(a1 + 336));
    if (!v11) {
      xpc_object_t v11 = xpc_null_create();
    }
    xpc_dictionary_set_value(v5, (const char *)*MEMORY[0x1E4FB9DD0], v11);
    xpc_object_t v12 = xpc_null_create();
    xpc_release(v11);
    xpc_release(v12);
  }
  else if (a2 == 2)
  {
    xpc_object_t v13 = xpc_int64_create(*(unsigned int *)(a1 + 464));
    if (!v13) {
      xpc_object_t v13 = xpc_null_create();
    }
    xpc_dictionary_set_value(v5, (const char *)*MEMORY[0x1E4FB9DE0], v13);
    xpc_object_t v14 = xpc_null_create();
    xpc_release(v13);
    xpc_release(v14);
    xpc_object_t v15 = xpc_int64_create(*(unsigned int *)(a1 + 468));
    if (!v15) {
      xpc_object_t v15 = xpc_null_create();
    }
    xpc_dictionary_set_value(v5, (const char *)*MEMORY[0x1E4FB9DD8], v15);
    xpc_object_t v16 = xpc_null_create();
    xpc_release(v15);
    xpc_release(v16);
    xpc_object_t v17 = xpc_int64_create(*(unsigned int *)(a1 + 472));
    if (!v17) {
      xpc_object_t v17 = xpc_null_create();
    }
    xpc_dictionary_set_value(v5, (const char *)*MEMORY[0x1E4FB9DF0], v17);
    xpc_object_t v18 = xpc_null_create();
    xpc_release(v17);
    xpc_release(v18);
  }
  xpc_object_t object = v5;
  if (v5) {
    xpc_retain(v5);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  v19[0] = 0;
  v19[1] = 0;
  antenna::Service::Internal::performCommandDriver_sync((void *)a1, &object, (uint64_t)v19);
  xpc_release(object);
  xpc_object_t object = 0;
  xpc_release(v5);
}

void sub_1C59049E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, xpc_object_t object)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void antenna::Service::Internal::enableTxPowerCapping_sync(antenna::Service::Internal *this, BOOL a2)
{
  xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
  if (v4 || (xpc_object_t v4 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C8792D30](v4) == MEMORY[0x1E4F14590])
    {
      xpc_retain(v4);
      xpc_object_t v5 = v4;
    }
    else
    {
      xpc_object_t v5 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v5 = xpc_null_create();
    xpc_object_t v4 = 0;
  }
  xpc_release(v4);
  xpc_object_t v6 = xpc_string_create((const char *)*MEMORY[0x1E4FB9D70]);
  if (!v6) {
    xpc_object_t v6 = xpc_null_create();
  }
  xpc_dictionary_set_value(v5, (const char *)*MEMORY[0x1E4FB9C68], v6);
  xpc_object_t v7 = xpc_null_create();
  xpc_release(v6);
  xpc_release(v7);
  xpc_object_t v8 = xpc_BOOL_create(a2);
  if (!v8) {
    xpc_object_t v8 = xpc_null_create();
  }
  xpc_dictionary_set_value(v5, (const char *)*MEMORY[0x1E4FB9D48], v8);
  xpc_object_t v9 = xpc_null_create();
  xpc_release(v8);
  xpc_release(v9);
  if (*((unsigned char *)this + 152))
  {
    xpc_object_t v10 = xpc_int64_create(1);
    if (!v10) {
      xpc_object_t v10 = xpc_null_create();
    }
    xpc_dictionary_set_value(v5, (const char *)*MEMORY[0x1E4FB9D58], v10);
    xpc_object_t v11 = xpc_null_create();
    xpc_release(v10);
    xpc_release(v11);
  }
  xpc_object_t object = v5;
  if (v5) {
    xpc_retain(v5);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  v12[0] = 0;
  v12[1] = 0;
  antenna::Service::Internal::performCommandDriver_sync(this, &object, (uint64_t)v12);
  xpc_release(object);
  xpc_object_t object = 0;
  xpc_release(v5);
}

void sub_1C5904CD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, xpc_object_t object)
{
  dispatch::callback<void({block_pointer})(xpc::object)>::~callback((uint64_t)&a10);
  xpc_release(object);
  xpc_object_t object = 0;
  xpc_release(v12);
  _Unwind_Resume(a1);
}

void antenna::Service::Internal::enableTxPowerCappingNotification_sync(antenna::Service::Internal *this, BOOL a2)
{
  xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
  if (v4 || (xpc_object_t v4 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C8792D30](v4) == MEMORY[0x1E4F14590])
    {
      xpc_retain(v4);
      xpc_object_t v5 = v4;
    }
    else
    {
      xpc_object_t v5 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v5 = xpc_null_create();
    xpc_object_t v4 = 0;
  }
  xpc_release(v4);
  xpc_object_t v6 = xpc_string_create((const char *)*MEMORY[0x1E4FB9DB8]);
  if (!v6) {
    xpc_object_t v6 = xpc_null_create();
  }
  xpc_dictionary_set_value(v5, (const char *)*MEMORY[0x1E4FB9C68], v6);
  xpc_object_t v7 = xpc_null_create();
  xpc_release(v6);
  xpc_release(v7);
  xpc_object_t v8 = xpc_BOOL_create(a2);
  if (!v8) {
    xpc_object_t v8 = xpc_null_create();
  }
  xpc_dictionary_set_value(v5, (const char *)*MEMORY[0x1E4FB9D80], v8);
  xpc_object_t v9 = xpc_null_create();
  xpc_release(v8);
  xpc_release(v9);
  if (config::hw::watch(v10))
  {
    xpc_object_t v11 = xpc_string_create((const char *)*MEMORY[0x1E4FB9DA8]);
    if (!v11) {
      xpc_object_t v11 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v11 = xpc_string_create((const char *)*MEMORY[0x1E4FB9DA0]);
    if (!v11) {
      xpc_object_t v11 = xpc_null_create();
    }
  }
  xpc_dictionary_set_value(v5, (const char *)*MEMORY[0x1E4FB9D98], v11);
  xpc_object_t v12 = xpc_null_create();
  xpc_release(v11);
  xpc_release(v12);
  if (*((unsigned char *)this + 152))
  {
    xpc_object_t v13 = xpc_int64_create(1);
    if (!v13) {
      xpc_object_t v13 = xpc_null_create();
    }
    xpc_dictionary_set_value(v5, (const char *)*MEMORY[0x1E4FB9D58], v13);
    xpc_object_t v14 = xpc_null_create();
    xpc_release(v13);
    xpc_release(v14);
  }
  xpc_object_t object = v5;
  if (v5) {
    xpc_retain(v5);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  v15[0] = 0;
  v15[1] = 0;
  antenna::Service::Internal::performCommandDriver_sync(this, &object, (uint64_t)v15);
  xpc_release(object);
  xpc_object_t object = 0;
  xpc_release(v5);
}

void sub_1C5905014(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, xpc_object_t object)
{
  dispatch::callback<void({block_pointer})(xpc::object)>::~callback((uint64_t)&a10);
  xpc_release(object);
  xpc_object_t object = 0;
  xpc_release(v12);
  _Unwind_Resume(a1);
}

void antenna::Service::Internal::enableTxPowerCappingIndication_sync(antenna::Service::Internal *this)
{
  xpc_object_t v2 = xpc_dictionary_create(0, 0, 0);
  if (v2 || (xpc_object_t v2 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C8792D30](v2) == MEMORY[0x1E4F14590])
    {
      xpc_retain(v2);
      xpc_object_t v3 = v2;
    }
    else
    {
      xpc_object_t v3 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v3 = xpc_null_create();
    xpc_object_t v2 = 0;
  }
  xpc_release(v2);
  xpc_object_t v4 = xpc_string_create((const char *)*MEMORY[0x1E4FB9DE8]);
  if (!v4) {
    xpc_object_t v4 = xpc_null_create();
  }
  xpc_dictionary_set_value(v3, (const char *)*MEMORY[0x1E4FB9C68], v4);
  xpc_object_t v5 = xpc_null_create();
  xpc_release(v4);
  xpc_release(v5);
  xpc_object_t object = v3;
  if (v3) {
    xpc_retain(v3);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  v6[0] = 0;
  v6[1] = 0;
  antenna::Service::Internal::performCommandDriver_sync(this, &object, (uint64_t)v6);
  xpc_release(object);
  xpc_object_t object = 0;
  xpc_release(v3);
}

void sub_1C59051C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, xpc_object_t object)
{
  dispatch::callback<void({block_pointer})(xpc::object)>::~callback((uint64_t)&a10);
  xpc_release(object);
  xpc_object_t object = 0;
  xpc_release(v12);
  _Unwind_Resume(a1);
}

void antenna::Service::Internal::sendVideoAccessory_sync(antenna::Service::Internal *this, int a2)
{
  if (*((unsigned __int8 *)this + 164) != a2)
  {
    xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
    if (v4 || (xpc_object_t v4 = xpc_null_create()) != 0)
    {
      if (MEMORY[0x1C8792D30](v4) == MEMORY[0x1E4F14590])
      {
        xpc_retain(v4);
        xpc_object_t v5 = v4;
      }
      else
      {
        xpc_object_t v5 = xpc_null_create();
      }
    }
    else
    {
      xpc_object_t v5 = xpc_null_create();
      xpc_object_t v4 = 0;
    }
    xpc_release(v4);
    xpc_object_t v6 = xpc_string_create((const char *)*MEMORY[0x1E4FB9CF0]);
    if (!v6) {
      xpc_object_t v6 = xpc_null_create();
    }
    xpc_dictionary_set_value(v5, (const char *)*MEMORY[0x1E4FB9C68], v6);
    xpc_object_t v7 = xpc_null_create();
    xpc_release(v6);
    xpc_release(v7);
    if (capabilities::radio::maverick(v8))
    {
      xpc_object_t v9 = *((void *)this + 5);
      BOOL v10 = os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
      if (a2)
      {
        if (v10)
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl(&dword_1C5767000, v9, OS_LOG_TYPE_DEFAULT, "#I Video link started", buf, 2u);
        }
        xpc_object_t v11 = xpc_int64_create(1);
        if (!v11) {
          xpc_object_t v11 = xpc_null_create();
        }
        xpc_dictionary_set_value(v5, (const char *)*MEMORY[0x1E4FB9D28], v11);
        xpc_object_t v12 = xpc_null_create();
        xpc_release(v11);
        xpc_release(v12);
        xpc_object_t v13 = xpc_int64_create(0);
        if (!v13) {
          xpc_object_t v13 = xpc_null_create();
        }
      }
      else
      {
        if (v10)
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl(&dword_1C5767000, v9, OS_LOG_TYPE_DEFAULT, "#I Video link stopped or terminated", buf, 2u);
        }
        xpc_object_t v16 = xpc_int64_create(0);
        if (!v16) {
          xpc_object_t v16 = xpc_null_create();
        }
        xpc_dictionary_set_value(v5, (const char *)*MEMORY[0x1E4FB9D28], v16);
        xpc_object_t v17 = xpc_null_create();
        xpc_release(v16);
        xpc_release(v17);
        xpc_object_t v13 = xpc_int64_create(1);
        if (!v13) {
          xpc_object_t v13 = xpc_null_create();
        }
      }
      xpc_dictionary_set_value(v5, (const char *)*MEMORY[0x1E4FB9D68], v13);
      xpc_object_t v18 = xpc_null_create();
      xpc_release(v13);
      xpc_release(v18);
    }
    else
    {
      xpc_object_t v14 = xpc_BOOL_create(a2);
      if (!v14) {
        xpc_object_t v14 = xpc_null_create();
      }
      xpc_dictionary_set_value(v5, (const char *)*MEMORY[0x1E4FB9D50], v14);
      xpc_object_t v15 = xpc_null_create();
      xpc_release(v14);
      xpc_release(v15);
    }
    *((unsigned char *)this + 164) = a2;
    xpc_object_t object = v5;
    if (v5) {
      xpc_retain(v5);
    }
    else {
      xpc_object_t object = xpc_null_create();
    }
    v19[0] = 0;
    v19[1] = 0;
    antenna::Service::Internal::performCommandDriver_sync(this, &object, (uint64_t)v19);
    xpc_release(object);
    xpc_object_t object = 0;
    xpc_release(v5);
  }
}

void sub_1C59055D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, xpc_object_t object)
{
  dispatch::callback<void({block_pointer})(xpc::object)>::~callback((uint64_t)&a10);
  xpc_release(object);
  xpc_object_t object = 0;
  xpc_release(v12);
  _Unwind_Resume(a1);
}

void antenna::Service::Internal::sendAudioAccessory_sync(antenna::Service::Internal *this)
{
  xpc_object_t v2 = xpc_dictionary_create(0, 0, 0);
  if (v2 || (xpc_object_t v2 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C8792D30](v2) == MEMORY[0x1E4F14590])
    {
      xpc_retain(v2);
      xpc_object_t v3 = v2;
    }
    else
    {
      xpc_object_t v3 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v3 = xpc_null_create();
    xpc_object_t v2 = 0;
  }
  xpc_release(v2);
  xpc_object_t v4 = xpc_string_create((const char *)*MEMORY[0x1E4FB9D90]);
  if (!v4) {
    xpc_object_t v4 = xpc_null_create();
  }
  xpc_dictionary_set_value(v3, (const char *)*MEMORY[0x1E4FB9C68], v4);
  xpc_object_t v5 = xpc_null_create();
  xpc_release(v4);
  xpc_release(v5);
  xpc_object_t v6 = xpc_BOOL_create(*((unsigned char *)this + 334));
  if (!v6) {
    xpc_object_t v6 = xpc_null_create();
  }
  xpc_dictionary_set_value(v3, (const char *)*MEMORY[0x1E4FB9C90], v6);
  xpc_object_t v7 = xpc_null_create();
  xpc_release(v6);
  xpc_release(v7);
  xpc_object_t object = v3;
  if (v3) {
    xpc_retain(v3);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  v8[0] = 0;
  v8[1] = 0;
  antenna::Service::Internal::performCommandDriver_sync(this, &object, (uint64_t)v8);
  xpc_release(object);
  xpc_object_t object = 0;
  xpc_release(v3);
}

void sub_1C59057B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, xpc_object_t object)
{
  dispatch::callback<void({block_pointer})(xpc::object)>::~callback((uint64_t)&a10);
  xpc_release(object);
  xpc_object_t object = 0;
  xpc_release(v12);
  _Unwind_Resume(a1);
}

void antenna::Service::Internal::sendAccessoryStatus_sync(NSObject **this)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  unint64_t AccessoryState_sync = antenna::Service::Internal::getAccessoryState_sync((antenna::Service::Internal *)this);
  if (*((unsigned char *)this + 168))
  {
    xpc_object_t v3 = this[5];
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1C5767000, v3, OS_LOG_TYPE_DEFAULT, "#I Ignore sending accessory status to BB in low power mode", buf, 2u);
    }
  }
  else
  {
    unint64_t v4 = AccessoryState_sync;
    int64_t v5 = HIDWORD(AccessoryState_sync);
    uint64_t v6 = MEMORY[0x1E4F14590];
    xpc_object_t v7 = (const char **)MEMORY[0x1E4FB9C68];
    xpc_object_t v8 = (const char **)MEMORY[0x1E4FB9D10];
    if (*((unsigned char *)this + 156) || *((unsigned char *)this + 192))
    {
      xpc_object_t v9 = xpc_dictionary_create(0, 0, 0);
      if (v9 || (xpc_object_t v9 = xpc_null_create()) != 0)
      {
        if (MEMORY[0x1C8792D30](v9) == v6)
        {
          xpc_retain(v9);
          xpc_object_t v10 = v9;
        }
        else
        {
          xpc_object_t v10 = xpc_null_create();
        }
      }
      else
      {
        xpc_object_t v10 = xpc_null_create();
        xpc_object_t v9 = 0;
      }
      xpc_release(v9);
      xpc_object_t v11 = xpc_string_create((const char *)*MEMORY[0x1E4FB9DB0]);
      if (!v11) {
        xpc_object_t v11 = xpc_null_create();
      }
      xpc_dictionary_set_value(v10, *v7, v11);
      xpc_object_t v12 = xpc_null_create();
      xpc_release(v11);
      xpc_release(v12);
      xpc_object_t v13 = xpc_int64_create(v4 & 1);
      if (!v13) {
        xpc_object_t v13 = xpc_null_create();
      }
      xpc_dictionary_set_value(v10, *v8, v13);
      xpc_object_t v14 = xpc_null_create();
      xpc_release(v13);
      xpc_release(v14);
      xpc_object_t v15 = this[5];
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
      {
        ctu::iokit::asString();
        if (v39 >= 0) {
          xpc_object_t v16 = buf;
        }
        else {
          xpc_object_t v16 = *(unsigned char **)buf;
        }
        *(_DWORD *)uint64_t v40 = 136315138;
        xpc_object_t v41 = v16;
        _os_log_impl(&dword_1C5767000, v15, OS_LOG_TYPE_DEFAULT, "#I Sending accessory attachment for RF: %s", v40, 0xCu);
        if (v39 < 0) {
          operator delete(*(void **)buf);
        }
        xpc_object_t v15 = this[5];
      }
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
      {
        if (*((unsigned char *)this + 561)) {
          xpc_object_t v17 = "CLOSED";
        }
        else {
          xpc_object_t v17 = "OPENED";
        }
        *(_DWORD *)long long buf = 136315138;
        *(void *)&uint8_t buf[4] = v17;
        _os_log_impl(&dword_1C5767000, v15, OS_LOG_TYPE_DEFAULT, "#I Smart Keyboard Cover: %s", buf, 0xCu);
      }
      if ((v4 & 1) != 0 && (*((unsigned char *)this + 157) || *((unsigned char *)this + 192)))
      {
        xpc_object_t v18 = xpc_int64_create(v5);
        if (!v18) {
          xpc_object_t v18 = xpc_null_create();
        }
        xpc_dictionary_set_value(v10, (const char *)*MEMORY[0x1E4FB9CE0], v18);
        xpc_object_t v19 = xpc_null_create();
        xpc_release(v18);
        xpc_release(v19);
        uint64_t v20 = this[5];
        if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
        {
          ctu::iokit::asString();
          long long v21 = v39 >= 0 ? buf : *(unsigned char **)buf;
          *(_DWORD *)uint64_t v40 = 136315138;
          xpc_object_t v41 = v21;
          _os_log_impl(&dword_1C5767000, v20, OS_LOG_TYPE_DEFAULT, "#I Sending accessory type for RF: %s", v40, 0xCu);
          if (v39 < 0) {
            operator delete(*(void **)buf);
          }
        }
      }
      xpc_object_t object = v10;
      if (v10) {
        xpc_retain(v10);
      }
      else {
        xpc_object_t object = xpc_null_create();
      }
      v36[0] = 0;
      v36[1] = 0;
      antenna::Service::Internal::performCommandDriver_sync(this, &object, (uint64_t)v36);
      xpc_release(object);
      xpc_object_t object = 0;
      xpc_release(v10);
    }
    if (*((unsigned char *)this + 158) || *((unsigned char *)this + 192))
    {
      xpc_object_t v22 = xpc_dictionary_create(0, 0, 0);
      if (v22 || (xpc_object_t v22 = xpc_null_create()) != 0)
      {
        if (MEMORY[0x1C8792D30](v22) == v6)
        {
          xpc_retain(v22);
          xpc_object_t v23 = v22;
        }
        else
        {
          xpc_object_t v23 = xpc_null_create();
        }
      }
      else
      {
        xpc_object_t v23 = xpc_null_create();
        xpc_object_t v22 = 0;
      }
      xpc_release(v22);
      xpc_object_t v24 = xpc_string_create((const char *)*MEMORY[0x1E4FB9DC0]);
      if (!v24) {
        xpc_object_t v24 = xpc_null_create();
      }
      xpc_dictionary_set_value(v23, *v7, v24);
      xpc_object_t v25 = xpc_null_create();
      xpc_release(v24);
      xpc_release(v25);
      xpc_object_t v26 = xpc_int64_create(v4 & 1);
      if (!v26) {
        xpc_object_t v26 = xpc_null_create();
      }
      xpc_dictionary_set_value(v23, *v8, v26);
      xpc_object_t v27 = xpc_null_create();
      xpc_release(v26);
      xpc_release(v27);
      size_t v28 = this[5];
      if (os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG))
      {
        ctu::iokit::asString();
        size_t v32 = v39 >= 0 ? buf : *(unsigned char **)buf;
        *(_DWORD *)uint64_t v40 = 136315138;
        xpc_object_t v41 = v32;
        _os_log_debug_impl(&dword_1C5767000, v28, OS_LOG_TYPE_DEBUG, "#D Sending accessory attachment for ARTD: %s", v40, 0xCu);
        if (v39 < 0) {
          operator delete(*(void **)buf);
        }
      }
      if ((v4 & 1) != 0 && (*((unsigned char *)this + 157) || *((unsigned char *)this + 192)))
      {
        xpc_object_t v29 = xpc_int64_create(v5);
        if (!v29) {
          xpc_object_t v29 = xpc_null_create();
        }
        xpc_dictionary_set_value(v23, (const char *)*MEMORY[0x1E4FB9CE0], v29);
        xpc_object_t v30 = xpc_null_create();
        xpc_release(v29);
        xpc_release(v30);
        size_t v31 = this[5];
        if (os_log_type_enabled(v31, OS_LOG_TYPE_DEBUG))
        {
          ctu::iokit::asString();
          xpc_object_t v33 = v39 >= 0 ? buf : *(unsigned char **)buf;
          *(_DWORD *)uint64_t v40 = 136315138;
          xpc_object_t v41 = v33;
          _os_log_debug_impl(&dword_1C5767000, v31, OS_LOG_TYPE_DEBUG, "#D Sending accessory type for ARTD: %s", v40, 0xCu);
          if (v39 < 0) {
            operator delete(*(void **)buf);
          }
        }
      }
      xpc_object_t v35 = v23;
      if (v23) {
        xpc_retain(v23);
      }
      else {
        xpc_object_t v35 = xpc_null_create();
      }
      v34[0] = 0;
      v34[1] = 0;
      antenna::Service::Internal::performCommandDriver_sync(this, &v35, (uint64_t)v34);
      xpc_release(v35);
      xpc_object_t v35 = 0;
      xpc_release(v23);
    }
    antenna::Service::Internal::reportAccessory_sync((uint64_t)this, v4);
  }
}

void sub_1C5905E90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, xpc_object_t object, char a12, uint64_t a13, xpc_object_t a14)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void antenna::Service::Internal::sendPowerSource_sync(antenna::Service::Internal *this)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  xpc_object_t v2 = xpc_dictionary_create(0, 0, 0);
  if (v2 || (xpc_object_t v2 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C8792D30](v2) == MEMORY[0x1E4F14590])
    {
      xpc_retain(v2);
      xpc_object_t v3 = v2;
    }
    else
    {
      xpc_object_t v3 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v3 = xpc_null_create();
    xpc_object_t v2 = 0;
  }
  xpc_release(v2);
  if (*((_DWORD *)this + 142) == -1
    || (unint64_t v4 = (char *)this + 568, (TelephonyUtilIsInternalBuild() & 1) == 0) && (TelephonyUtilIsCarrierBuild() & 1) == 0)
  {
    unint64_t v4 = (char *)this + 564;
  }
  int64_t v5 = *(unsigned int *)v4;
  xpc_object_t v6 = xpc_string_create((const char *)*MEMORY[0x1E4FB9D40]);
  if (!v6) {
    xpc_object_t v6 = xpc_null_create();
  }
  xpc_dictionary_set_value(v3, (const char *)*MEMORY[0x1E4FB9C68], v6);
  xpc_object_t v7 = xpc_null_create();
  xpc_release(v6);
  xpc_release(v7);
  xpc_object_t v8 = xpc_int64_create(v5);
  if (!v8) {
    xpc_object_t v8 = xpc_null_create();
  }
  xpc_dictionary_set_value(v3, (const char *)*MEMORY[0x1E4FB9CE8], v8);
  xpc_object_t v9 = xpc_null_create();
  xpc_release(v8);
  xpc_release(v9);
  xpc_object_t v10 = *((void *)this + 5);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    ctu::iokit::asString();
    xpc_object_t v11 = v15 >= 0 ? &__p : (void **)__p;
    *(_DWORD *)long long buf = 136315138;
    xpc_object_t v17 = v11;
    _os_log_impl(&dword_1C5767000, v10, OS_LOG_TYPE_DEFAULT, "#I Sending power source state: %s\n", buf, 0xCu);
    if (v15 < 0)
    {
      operator delete(__p);
      xpc_object_t object = v3;
      if (v3) {
        goto LABEL_21;
      }
LABEL_23:
      xpc_object_t object = xpc_null_create();
      goto LABEL_24;
    }
  }
  xpc_object_t object = v3;
  if (!v3) {
    goto LABEL_23;
  }
LABEL_21:
  xpc_retain(v3);
LABEL_24:
  v12[0] = 0;
  v12[1] = 0;
  antenna::Service::Internal::performCommandDriver_sync(this, &object, (uint64_t)v12);
  xpc_release(object);
  xpc_object_t object = 0;
  xpc_release(v3);
}

void sub_1C5906238(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, xpc_object_t object)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void antenna::Service::Internal::enablePPM_sync(antenna::Service::Internal *this, BOOL a2)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  if (*((unsigned char *)this + 572) && *((void *)this + 72))
  {
    xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
    if (v4 || (xpc_object_t v4 = xpc_null_create()) != 0)
    {
      if (MEMORY[0x1C8792D30](v4) == MEMORY[0x1E4F14590])
      {
        xpc_retain(v4);
        xpc_object_t v5 = v4;
      }
      else
      {
        xpc_object_t v5 = xpc_null_create();
      }
    }
    else
    {
      xpc_object_t v5 = xpc_null_create();
      xpc_object_t v4 = 0;
    }
    xpc_release(v4);
    xpc_object_t v7 = xpc_string_create((const char *)*MEMORY[0x1E4FB9CC0]);
    if (!v7) {
      xpc_object_t v7 = xpc_null_create();
    }
    xpc_dictionary_set_value(v5, (const char *)*MEMORY[0x1E4FB9C68], v7);
    xpc_object_t v8 = xpc_null_create();
    xpc_release(v7);
    xpc_release(v8);
    xpc_object_t v9 = xpc_BOOL_create(a2);
    if (!v9) {
      xpc_object_t v9 = xpc_null_create();
    }
    xpc_dictionary_set_value(v5, (const char *)*MEMORY[0x1E4FB9C88], v9);
    xpc_object_t v10 = xpc_null_create();
    xpc_release(v9);
    xpc_release(v10);
    if (a2)
    {
      xpc_object_t v11 = xpc_int64_create(5);
      if (!v11) {
        xpc_object_t v11 = xpc_null_create();
      }
      xpc_dictionary_set_value(v5, (const char *)*MEMORY[0x1E4FB9CA0], v11);
      xpc_object_t v12 = xpc_null_create();
      xpc_release(v11);
      xpc_release(v12);
    }
    xpc_object_t v13 = (std::__shared_weak_count *)*((void *)this + 10);
    if (!v13 || (uint64_t v14 = *((void *)this + 9), (v15 = std::__shared_weak_count::lock(v13)) == 0)) {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    xpc_object_t v16 = v15;
    atomic_fetch_add_explicit(&v15->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    if (atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      xpc_object_t object = v5;
      if (v5)
      {
LABEL_23:
        xpc_retain(v5);
LABEL_26:
        v21[0] = MEMORY[0x1E4F143A8];
        v21[1] = 1174405120;
        v21[2] = ___ZN7antenna7Service8Internal14enablePPM_syncEb_block_invoke;
        v21[3] = &__block_descriptor_tmp_34_1;
        v21[4] = this;
        v21[5] = v14;
        xpc_object_t v22 = v16;
        atomic_fetch_add_explicit(&v16->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        BOOL v24 = a2;
        xpc_object_t v23 = v5;
        if (v5) {
          xpc_retain(v5);
        }
        else {
          xpc_object_t v23 = xpc_null_create();
        }
        xpc_object_t v17 = _Block_copy(v21);
        uint64_t v18 = *((void *)this + 11);
        if (v18) {
          dispatch_retain(*((dispatch_object_t *)this + 11));
        }
        v25[0] = v17;
        v25[1] = v18;
        antenna::Service::Internal::performCommandDriver_sync(this, &object, (uint64_t)v25);
        if (v18) {
          dispatch_release(v18);
        }
        if (v17) {
          _Block_release(v17);
        }
        xpc_release(object);
        xpc_object_t object = 0;
        PPMHandler::start(**((PPMHandler ***)this + 72));
        xpc_object_t v19 = *((void *)this + 5);
        if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v20 = "Disabled";
          if (a2) {
            uint64_t v20 = "Enabled";
          }
          *(_DWORD *)long long buf = 136315138;
          size_t v28 = v20;
          _os_log_impl(&dword_1C5767000, v19, OS_LOG_TYPE_DEFAULT, "#I %s PPM", buf, 0xCu);
        }
        xpc_release(v23);
        xpc_object_t v23 = 0;
        if (v22) {
          std::__shared_weak_count::__release_weak(v22);
        }
        std::__shared_weak_count::__release_weak(v16);
        xpc_release(v5);
        return;
      }
    }
    else
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v16);
      xpc_object_t object = v5;
      if (v5) {
        goto LABEL_23;
      }
    }
    xpc_object_t object = xpc_null_create();
    goto LABEL_26;
  }
  xpc_object_t v6 = *((void *)this + 5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_1C5767000, v6, OS_LOG_TYPE_DEFAULT, "#E PPM is not supported or PPM Manager is not created properly", buf, 2u);
  }
}

void sub_1C59066CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, xpc_object_t object, uint64_t a17, char a18, uint64_t a19, xpc_object_t a20)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void antenna::Service::Internal::sendDeviceMaterial_sync(antenna::Service::Internal *this)
{
  uint64_t v53 = *MEMORY[0x1E4F143B8];
  xpc_object_t v2 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v3 = v2;
  if (v2)
  {
    xpc_object_t xdict = v2;
  }
  else
  {
    xpc_object_t v3 = xpc_null_create();
    xpc_object_t xdict = v3;
    if (!v3)
    {
      xpc_object_t v4 = xpc_null_create();
      xpc_object_t v3 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1C8792D30](v3) == MEMORY[0x1E4F14590])
  {
    xpc_retain(v3);
    goto LABEL_9;
  }
  xpc_object_t v4 = xpc_null_create();
LABEL_8:
  xpc_object_t xdict = v4;
LABEL_9:
  xpc_release(v3);
  xpc_object_t v5 = xpc_string_create((const char *)*MEMORY[0x1E4FB9D00]);
  if (!v5) {
    xpc_object_t v5 = xpc_null_create();
  }
  xpc_dictionary_set_value(xdict, (const char *)*MEMORY[0x1E4FB9C68], v5);
  xpc_object_t v6 = xpc_null_create();
  xpc_release(v5);
  xpc_release(v6);
  xpc_object_t v7 = (uint64_t **)((char *)this + 624);
  xpc_object_t v8 = (uint64_t *)*((void *)this + 78);
  xpc_object_t v9 = (uint64_t **)((char *)this + 624);
  xpc_object_t v10 = (uint64_t **)((char *)this + 624);
  if (v8)
  {
    while (1)
    {
      while (1)
      {
        xpc_object_t v10 = (uint64_t **)v8;
        unsigned int v11 = *((_DWORD *)v8 + 7);
        if (v11 < 2) {
          break;
        }
        xpc_object_t v8 = *v10;
        xpc_object_t v9 = v10;
        if (!*v10) {
          goto LABEL_18;
        }
      }
      if (v11) {
        break;
      }
      xpc_object_t v8 = v10[1];
      if (!v8)
      {
        xpc_object_t v9 = v10 + 1;
        goto LABEL_18;
      }
    }
    xpc_object_t v12 = (uint64_t *)v10;
  }
  else
  {
LABEL_18:
    xpc_object_t v12 = (uint64_t *)operator new(0x28uLL);
    *(uint64_t *)((char *)v12 + 28) = 1;
    *xpc_object_t v12 = 0;
    v12[1] = 0;
    void v12[2] = (uint64_t)v10;
    *xpc_object_t v9 = v12;
    uint64_t v13 = **((void **)this + 77);
    uint64_t v14 = v12;
    if (v13)
    {
      *((void *)this + 77) = v13;
      uint64_t v14 = *v9;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 78), v14);
    ++*((void *)this + 79);
  }
  xpc_object_t v15 = xpc_int64_create(*((unsigned int *)v12 + 8));
  if (!v15) {
    xpc_object_t v15 = xpc_null_create();
  }
  xpc_dictionary_set_value(xdict, (const char *)*MEMORY[0x1E4FB9CF8], v15);
  xpc_object_t v16 = xpc_null_create();
  xpc_release(v15);
  xpc_release(v16);
  xpc_object_t v17 = *v7;
  uint64_t v18 = (uint64_t **)((char *)this + 624);
  xpc_object_t v19 = (uint64_t **)((char *)this + 624);
  if (*v7)
  {
    while (1)
    {
      while (1)
      {
        xpc_object_t v19 = (uint64_t **)v17;
        unsigned int v20 = *((_DWORD *)v17 + 7);
        if (v20 < 3) {
          break;
        }
        xpc_object_t v17 = *v19;
        uint64_t v18 = v19;
        if (!*v19) {
          goto LABEL_31;
        }
      }
      if (v20 == 2) {
        break;
      }
      xpc_object_t v17 = v19[1];
      if (!v17)
      {
        uint64_t v18 = v19 + 1;
        goto LABEL_31;
      }
    }
    long long v21 = (uint64_t *)v19;
  }
  else
  {
LABEL_31:
    long long v21 = (uint64_t *)operator new(0x28uLL);
    *(uint64_t *)((char *)v21 + 28) = 2;
    *long long v21 = 0;
    v21[1] = 0;
    v21[2] = (uint64_t)v19;
    *uint64_t v18 = v21;
    uint64_t v22 = **((void **)this + 77);
    xpc_object_t v23 = v21;
    if (v22)
    {
      *((void *)this + 77) = v22;
      xpc_object_t v23 = *v18;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 78), v23);
    ++*((void *)this + 79);
  }
  xpc_object_t v24 = xpc_int64_create(*((unsigned int *)v21 + 8));
  if (!v24) {
    xpc_object_t v24 = xpc_null_create();
  }
  xpc_dictionary_set_value(xdict, (const char *)*MEMORY[0x1E4FB9CC8], v24);
  xpc_object_t v25 = xpc_null_create();
  xpc_release(v24);
  xpc_release(v25);
  xpc_object_t v26 = *v7;
  xpc_object_t v27 = (uint64_t **)((char *)this + 624);
  size_t v28 = (uint64_t **)((char *)this + 624);
  if (*v7)
  {
    while (1)
    {
      while (1)
      {
        size_t v28 = (uint64_t **)v26;
        unsigned int v29 = *((_DWORD *)v26 + 7);
        if (v29 < 4) {
          break;
        }
        xpc_object_t v26 = *v28;
        xpc_object_t v27 = v28;
        if (!*v28) {
          goto LABEL_44;
        }
      }
      if (v29 == 3) {
        break;
      }
      xpc_object_t v26 = v28[1];
      if (!v26)
      {
        xpc_object_t v27 = v28 + 1;
        goto LABEL_44;
      }
    }
    xpc_object_t v30 = (uint64_t *)v28;
  }
  else
  {
LABEL_44:
    xpc_object_t v30 = (uint64_t *)operator new(0x28uLL);
    *(uint64_t *)((char *)v30 + 28) = 3;
    *xpc_object_t v30 = 0;
    v30[1] = 0;
    v30[2] = (uint64_t)v28;
    *xpc_object_t v27 = v30;
    uint64_t v31 = **((void **)this + 77);
    size_t v32 = v30;
    if (v31)
    {
      *((void *)this + 77) = v31;
      size_t v32 = *v27;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 78), v32);
    ++*((void *)this + 79);
  }
  xpc_object_t v33 = xpc_int64_create(*((unsigned int *)v30 + 8));
  if (!v33) {
    xpc_object_t v33 = xpc_null_create();
  }
  xpc_dictionary_set_value(xdict, (const char *)*MEMORY[0x1E4FB9C80], v33);
  xpc_object_t v34 = xpc_null_create();
  xpc_release(v33);
  xpc_release(v34);
  xpc_object_t v35 = *v7;
  size_t v36 = (uint64_t **)((char *)this + 624);
  if (*v7)
  {
    while (1)
    {
      while (1)
      {
        size_t v36 = (uint64_t **)v35;
        unsigned int v37 = *((_DWORD *)v35 + 7);
        if (v37 < 5) {
          break;
        }
        xpc_object_t v35 = *v36;
        xpc_object_t v7 = v36;
        if (!*v36) {
          goto LABEL_57;
        }
      }
      if (v37 == 4) {
        break;
      }
      xpc_object_t v35 = v36[1];
      if (!v35)
      {
        xpc_object_t v7 = v36 + 1;
        goto LABEL_57;
      }
    }
    xpc_object_t v38 = (uint64_t *)v36;
  }
  else
  {
LABEL_57:
    xpc_object_t v38 = (uint64_t *)operator new(0x28uLL);
    *(uint64_t *)((char *)v38 + 28) = 4;
    *xpc_object_t v38 = 0;
    v38[1] = 0;
    v38[2] = (uint64_t)v36;
    *xpc_object_t v7 = v38;
    uint64_t v39 = **((void **)this + 77);
    uint64_t v40 = v38;
    if (v39)
    {
      *((void *)this + 77) = v39;
      uint64_t v40 = *v7;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 78), v40);
    ++*((void *)this + 79);
  }
  xpc_object_t v41 = xpc_int64_create(*((unsigned int *)v38 + 8));
  if (!v41) {
    xpc_object_t v41 = xpc_null_create();
  }
  xpc_object_t v42 = xdict;
  xpc_dictionary_set_value(xdict, (const char *)*MEMORY[0x1E4FB9C78], v41);
  xpc_object_t v43 = xpc_null_create();
  xpc_release(v41);
  xpc_release(v43);
  uint64_t v44 = *((void *)this + 5);
  if (os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT))
  {
    xpc::object::to_string((uint64_t *)__p, (xpc::object *)&xdict);
    if (v49 >= 0) {
      uint64_t v45 = __p;
    }
    else {
      uint64_t v45 = (void **)__p[0];
    }
    *(_DWORD *)long long buf = 136315138;
    long long v52 = v45;
    _os_log_impl(&dword_1C5767000, v44, OS_LOG_TYPE_DEFAULT, "#I Sending device material: %s\n", buf, 0xCu);
    if (v49 < 0) {
      operator delete(__p[0]);
    }
    xpc_object_t v42 = xdict;
  }
  xpc_object_t v47 = v42;
  if (v42)
  {
    xpc_retain(v42);
  }
  else
  {
    xpc_object_t v42 = xpc_null_create();
    xpc_object_t v47 = v42;
  }
  v46[0] = 0;
  v46[1] = 0;
  antenna::Service::Internal::performCommandDriver_sync(this, &v47, (uint64_t)v46);
  xpc_release(v42);
  xpc_object_t v47 = 0;
  xpc_release(xdict);
}

void sub_1C5906D48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, xpc_object_t object)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t antenna::Service::Internal::configuration_sync(antenna::Service::Internal *this)
{
  *((_DWORD *)this + 49) = capabilities::txpower::supportedControlInput(this);
  xpc_object_t v2 = (capabilities::txpower *)capabilities::txpower::operator&();
  if (v2)
  {
    xpc_object_t v2 = (capabilities::txpower *)capabilities::txpower::operator&();
    BOOL v3 = v2 != 0;
  }
  else
  {
    BOOL v3 = 0;
  }
  *((unsigned char *)this + 152) = v3;
  xpc_object_t v4 = (capabilities::txpower *)capabilities::txpower::supportsMotion(v2);
  *((unsigned char *)this + 153) = (_BYTE)v4;
  xpc_object_t v5 = (capabilities::txpower *)capabilities::txpower::supportsAntennaFreeSpaceConfig(v4);
  *((unsigned char *)this + 154) = (_BYTE)v5;
  xpc_object_t v6 = (capabilities::radio *)capabilities::txpower::supportsMotionAlways(v5);
  *((unsigned char *)this + 155) = (_BYTE)v6;
  xpc_object_t v7 = (capabilities::radio *)capabilities::radio::supportsAccessoryDetection(v6);
  *((unsigned char *)this + 156) = (_BYTE)v7;
  xpc_object_t v8 = (capabilities::radio *)capabilities::radio::supportsAccessoryTypeDetectionForRF(v7);
  *((unsigned char *)this + 157) = (_BYTE)v8;
  xpc_object_t v9 = (capabilities::radio *)capabilities::radio::supportsAccessoryDetectionForARTD(v8);
  *((unsigned char *)this + 158) = (_BYTE)v9;
  xpc_object_t v10 = (capabilities::txpower *)capabilities::radio::supportsAccessoryTypeDetectionForARTD(v9);
  *((unsigned char *)this + 159) = (_BYTE)v10;
  unsigned int v11 = (capabilities::txpower *)capabilities::txpower::supportsAudioJackReport(v10);
  *((unsigned char *)this + 160) = (_BYTE)v11;
  xpc_object_t v12 = (capabilities::radio *)capabilities::txpower::supportsAudioSpeaker(v11);
  *((unsigned char *)this + 161) = (_BYTE)v12;
  uint64_t v13 = (capabilities::txpower *)capabilities::radio::supportsMESA(v12);
  *((unsigned char *)this + 162) = (_BYTE)v13;
  uint64_t v14 = (capabilities::radio *)capabilities::txpower::supportsVideoAntennaSwitching(v13);
  *((unsigned char *)this + 163) = (_BYTE)v14;
  xpc_object_t v15 = (capabilities::radio *)capabilities::radio::supportsUMTS(v14);
  *((unsigned char *)this + 166) = (_BYTE)v15;
  xpc_object_t v16 = (capabilities::txpower *)capabilities::radio::C2KDevice(v15);
  *((unsigned char *)this + 167) = (_BYTE)v16;
  xpc_object_t v17 = (uint64_t *)capabilities::txpower::timeoutConfig(v16);
  *((void *)this + 42) = v17;
  *((void *)this + 43) = v18;
  *((void *)this + 58) = 0x7F0000007FLL;
  *((_DWORD *)this + 118) = 0x7FFF;
  xpc_object_t v19 = (uint64_t **)((char *)this + 312);
  unsigned int v20 = (char *)*((void *)this + 39);
  long long v21 = (uint64_t **)((char *)this + 312);
  uint64_t v22 = (uint64_t **)((char *)this + 312);
  if (v20)
  {
    xpc_object_t v23 = (char *)*((void *)this + 39);
    while (1)
    {
      while (1)
      {
        uint64_t v22 = (uint64_t **)v23;
        int v24 = *((_DWORD *)v23 + 7);
        if (v24 < 1) {
          break;
        }
        xpc_object_t v23 = (char *)*v22;
        long long v21 = v22;
        if (!*v22) {
          goto LABEL_11;
        }
      }
      if ((v24 & 0x80000000) == 0) {
        break;
      }
      xpc_object_t v23 = (char *)v22[1];
      if (!v23)
      {
        long long v21 = v22 + 1;
        goto LABEL_11;
      }
    }
  }
  else
  {
LABEL_11:
    xpc_object_t v25 = (char *)v22;
    uint64_t v22 = (uint64_t **)operator new(0x28uLL);
    *((_DWORD *)v22 + 7) = 0;
    *((unsigned char *)v22 + 32) = 0;
    std::__shared_weak_count *v22 = 0;
    v22[1] = 0;
    v22[2] = (uint64_t *)v25;
    *long long v21 = (uint64_t *)v22;
    uint64_t v26 = **((void **)this + 38);
    xpc_object_t v27 = (uint64_t *)v22;
    if (v26)
    {
      *((void *)this + 38) = v26;
      xpc_object_t v27 = *v21;
    }
    xpc_object_t v17 = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 39), v27);
    unsigned int v20 = (char *)*((void *)this + 39);
    ++*((void *)this + 40);
  }
  *((unsigned char *)v22 + 32) = 0;
  size_t v28 = (uint64_t **)((char *)this + 312);
  unsigned int v29 = (uint64_t **)((char *)this + 312);
  if (v20)
  {
    while (1)
    {
      while (1)
      {
        unsigned int v29 = (uint64_t **)v20;
        int v30 = *((_DWORD *)v20 + 7);
        if (v30 < 2) {
          break;
        }
        unsigned int v20 = (char *)*v29;
        size_t v28 = v29;
        if (!*v29) {
          goto LABEL_21;
        }
      }
      if (v30 == 1) {
        break;
      }
      unsigned int v20 = (char *)v29[1];
      if (!v20)
      {
        size_t v28 = v29 + 1;
        goto LABEL_21;
      }
    }
  }
  else
  {
LABEL_21:
    uint64_t v31 = (char *)v29;
    unsigned int v29 = (uint64_t **)operator new(0x28uLL);
    *((_DWORD *)v29 + 7) = 1;
    *((unsigned char *)v29 + 32) = 0;
    *unsigned int v29 = 0;
    v29[1] = 0;
    v29[2] = (uint64_t *)v31;
    *size_t v28 = (uint64_t *)v29;
    uint64_t v32 = **((void **)this + 38);
    xpc_object_t v33 = (uint64_t *)v29;
    if (v32)
    {
      *((void *)this + 38) = v32;
      xpc_object_t v33 = *v28;
    }
    xpc_object_t v17 = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 39), v33);
    ++*((void *)this + 40);
  }
  *((unsigned char *)v29 + 32) = 0;
  xpc_object_t v34 = *v19;
  xpc_object_t v35 = (uint64_t **)((char *)this + 312);
  size_t v36 = (uint64_t **)((char *)this + 312);
  if (*v19)
  {
    unsigned int v37 = *v19;
    while (1)
    {
      while (1)
      {
        size_t v36 = (uint64_t **)v37;
        int v38 = *((_DWORD *)v37 + 7);
        if (v38 < 4) {
          break;
        }
        unsigned int v37 = *v36;
        xpc_object_t v35 = v36;
        if (!*v36) {
          goto LABEL_31;
        }
      }
      if (v38 == 3) {
        break;
      }
      unsigned int v37 = v36[1];
      if (!v37)
      {
        xpc_object_t v35 = v36 + 1;
        goto LABEL_31;
      }
    }
  }
  else
  {
LABEL_31:
    uint64_t v39 = (char *)v36;
    size_t v36 = (uint64_t **)operator new(0x28uLL);
    *((_DWORD *)v36 + 7) = 3;
    *((unsigned char *)v36 + 32) = 0;
    *size_t v36 = 0;
    v36[1] = 0;
    void v36[2] = (uint64_t *)v39;
    uint64_t *v35 = (uint64_t *)v36;
    uint64_t v40 = **((void **)this + 38);
    xpc_object_t v41 = (uint64_t *)v36;
    if (v40)
    {
      *((void *)this + 38) = v40;
      xpc_object_t v41 = *v35;
    }
    xpc_object_t v17 = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 39), v41);
    xpc_object_t v34 = (uint64_t *)*((void *)this + 39);
    ++*((void *)this + 40);
  }
  *((unsigned char *)v36 + 32) = 0;
  xpc_object_t v42 = (uint64_t **)((char *)this + 312);
  xpc_object_t v43 = (uint64_t **)((char *)this + 312);
  if (v34)
  {
    while (1)
    {
      while (1)
      {
        xpc_object_t v43 = (uint64_t **)v34;
        int v44 = *((_DWORD *)v34 + 7);
        if (v44 < 1) {
          break;
        }
        xpc_object_t v34 = *v43;
        xpc_object_t v42 = v43;
        if (!*v43) {
          goto LABEL_41;
        }
      }
      if ((v44 & 0x80000000) == 0) {
        break;
      }
      xpc_object_t v34 = v43[1];
      if (!v34)
      {
        xpc_object_t v42 = v43 + 1;
        goto LABEL_41;
      }
    }
  }
  else
  {
LABEL_41:
    uint64_t v45 = (char *)v43;
    xpc_object_t v43 = (uint64_t **)operator new(0x28uLL);
    *((_DWORD *)v43 + 7) = 0;
    *((unsigned char *)v43 + 32) = 0;
    void *v43 = 0;
    v43[1] = 0;
    void v43[2] = (uint64_t *)v45;
    *xpc_object_t v42 = (uint64_t *)v43;
    uint64_t v46 = **((void **)this + 38);
    xpc_object_t v47 = (uint64_t *)v43;
    if (v46)
    {
      *((void *)this + 38) = v46;
      xpc_object_t v47 = *v42;
    }
    xpc_object_t v17 = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 39), v47);
    ++*((void *)this + 40);
  }
  char v48 = *((unsigned char *)v43 + 32);
  char v49 = (uint64_t **)((char *)this + 288);
  long long v50 = (char *)*((void *)this + 36);
  long long v51 = (uint64_t **)((char *)this + 288);
  long long v52 = (uint64_t **)((char *)this + 288);
  if (v50)
  {
    while (1)
    {
      while (1)
      {
        long long v52 = (uint64_t **)v50;
        int v53 = *((_DWORD *)v50 + 7);
        if (v53 < 1) {
          break;
        }
        long long v50 = (char *)*v52;
        long long v51 = v52;
        if (!*v52) {
          goto LABEL_51;
        }
      }
      if ((v53 & 0x80000000) == 0) {
        break;
      }
      long long v50 = (char *)v52[1];
      if (!v50)
      {
        long long v51 = v52 + 1;
        goto LABEL_51;
      }
    }
  }
  else
  {
LABEL_51:
    long long v54 = (char *)v52;
    long long v52 = (uint64_t **)operator new(0x28uLL);
    *((_DWORD *)v52 + 7) = 0;
    *((unsigned char *)v52 + 32) = 0;
    NSObject *v52 = 0;
    v52[1] = 0;
    v52[2] = (uint64_t *)v54;
    *long long v51 = (uint64_t *)v52;
    uint64_t v55 = **((void **)this + 35);
    xpc_object_t v56 = (uint64_t *)v52;
    if (v55)
    {
      *((void *)this + 35) = v55;
      xpc_object_t v56 = *v51;
    }
    xpc_object_t v17 = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 36), v56);
    ++*((void *)this + 37);
  }
  *((unsigned char *)v52 + 32) = v48;
  unint64_t v57 = *v19;
  xpc_object_t v58 = (uint64_t **)((char *)this + 312);
  unint64_t v59 = (uint64_t **)((char *)this + 312);
  if (*v19)
  {
    while (1)
    {
      while (1)
      {
        unint64_t v59 = (uint64_t **)v57;
        int v60 = *((_DWORD *)v57 + 7);
        if (v60 < 2) {
          break;
        }
        unint64_t v57 = *v59;
        xpc_object_t v58 = v59;
        if (!*v59) {
          goto LABEL_61;
        }
      }
      if (v60 == 1) {
        break;
      }
      unint64_t v57 = v59[1];
      if (!v57)
      {
        xpc_object_t v58 = v59 + 1;
        goto LABEL_61;
      }
    }
  }
  else
  {
LABEL_61:
    unsigned int v61 = (char *)v59;
    unint64_t v59 = (uint64_t **)operator new(0x28uLL);
    *((_DWORD *)v59 + 7) = 1;
    *((unsigned char *)v59 + 32) = 0;
    *unint64_t v59 = 0;
    v59[1] = 0;
    v59[2] = (uint64_t *)v61;
    *xpc_object_t v58 = (uint64_t *)v59;
    uint64_t v62 = **((void **)this + 38);
    xpc_object_t v63 = (uint64_t *)v59;
    if (v62)
    {
      *((void *)this + 38) = v62;
      xpc_object_t v63 = *v58;
    }
    xpc_object_t v17 = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 39), v63);
    ++*((void *)this + 40);
  }
  char v64 = *((unsigned char *)v59 + 32);
  unint64_t v65 = *v49;
  xpc_object_t v66 = (uint64_t **)((char *)this + 288);
  xpc_object_t v67 = (uint64_t **)((char *)this + 288);
  if (*v49)
  {
    while (1)
    {
      while (1)
      {
        xpc_object_t v67 = (uint64_t **)v65;
        int v68 = *((_DWORD *)v65 + 7);
        if (v68 < 2) {
          break;
        }
        unint64_t v65 = *v67;
        xpc_object_t v66 = v67;
        if (!*v67) {
          goto LABEL_71;
        }
      }
      if (v68 == 1) {
        break;
      }
      unint64_t v65 = v67[1];
      if (!v65)
      {
        xpc_object_t v66 = v67 + 1;
        goto LABEL_71;
      }
    }
  }
  else
  {
LABEL_71:
    xpc_object_t v69 = (char *)v67;
    xpc_object_t v67 = (uint64_t **)operator new(0x28uLL);
    *((_DWORD *)v67 + 7) = 1;
    *((unsigned char *)v67 + 32) = 0;
    std::__shared_weak_count *v67 = 0;
    v67[1] = 0;
    v67[2] = (uint64_t *)v69;
    *xpc_object_t v66 = (uint64_t *)v67;
    uint64_t v70 = **((void **)this + 35);
    xpc_object_t v71 = (uint64_t *)v67;
    if (v70)
    {
      *((void *)this + 35) = v70;
      xpc_object_t v71 = *v66;
    }
    xpc_object_t v17 = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 36), v71);
    ++*((void *)this + 37);
  }
  *((unsigned char *)v67 + 32) = v64;
  xpc_object_t v72 = *v19;
  xpc_object_t v73 = (uint64_t **)((char *)this + 312);
  if (*v19)
  {
    while (1)
    {
      while (1)
      {
        xpc_object_t v73 = (uint64_t **)v72;
        int v74 = *((_DWORD *)v72 + 7);
        if (v74 < 4) {
          break;
        }
        xpc_object_t v72 = *v73;
        xpc_object_t v19 = v73;
        if (!*v73) {
          goto LABEL_81;
        }
      }
      if (v74 == 3) {
        break;
      }
      xpc_object_t v72 = v73[1];
      if (!v72)
      {
        xpc_object_t v19 = v73 + 1;
        goto LABEL_81;
      }
    }
  }
  else
  {
LABEL_81:
    xpc_object_t v75 = (char *)v73;
    xpc_object_t v73 = (uint64_t **)operator new(0x28uLL);
    *((_DWORD *)v73 + 7) = 3;
    *((unsigned char *)v73 + 32) = 0;
    NSObject *v73 = 0;
    v73[1] = 0;
    v73[2] = (uint64_t *)v75;
    NSObject *v19 = (uint64_t *)v73;
    uint64_t v76 = **((void **)this + 38);
    xpc_object_t v77 = (uint64_t *)v73;
    if (v76)
    {
      *((void *)this + 38) = v76;
      xpc_object_t v77 = *v19;
    }
    xpc_object_t v17 = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 39), v77);
    ++*((void *)this + 40);
  }
  char v78 = *((unsigned char *)v73 + 32);
  xpc_object_t v79 = *v49;
  xpc_object_t v80 = (uint64_t **)((char *)this + 288);
  if (*v49)
  {
    while (1)
    {
      while (1)
      {
        xpc_object_t v80 = (uint64_t **)v79;
        int v81 = *((_DWORD *)v79 + 7);
        if (v81 < 4) {
          break;
        }
        xpc_object_t v79 = *v80;
        char v49 = v80;
        if (!*v80) {
          goto LABEL_91;
        }
      }
      if (v81 == 3) {
        break;
      }
      xpc_object_t v79 = v80[1];
      if (!v79)
      {
        char v49 = v80 + 1;
        goto LABEL_91;
      }
    }
  }
  else
  {
LABEL_91:
    xpc_object_t v82 = (char *)v80;
    xpc_object_t v80 = (uint64_t **)operator new(0x28uLL);
    *((_DWORD *)v80 + 7) = 3;
    *((unsigned char *)v80 + 32) = 0;
    std::__shared_weak_count *v80 = 0;
    v80[1] = 0;
    v80[2] = (uint64_t *)v82;
    *char v49 = (uint64_t *)v80;
    uint64_t v83 = **((void **)this + 35);
    xpc_object_t v84 = (uint64_t *)v80;
    if (v83)
    {
      *((void *)this + 35) = v83;
      xpc_object_t v84 = *v49;
    }
    xpc_object_t v17 = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 36), v84);
    ++*((void *)this + 37);
  }
  *((unsigned char *)v80 + 32) = v78;
  *((void *)this + 26) = 0xFF00000004;
  xpc_object_t v85 = (capabilities::radio *)capabilities::txpower::supportsPowerSourceDetection((capabilities::txpower *)v17);
  *((unsigned char *)this + 169) = (_BYTE)v85;
  xpc_object_t v86 = (config::hw *)capabilities::radio::supportsDeviceMaterial(v85);
  *((unsigned char *)this + 170) = (_BYTE)v86;
  size_t v87 = (capabilities::abs *)config::hw::watch(v86);
  *((unsigned char *)this + 688) = (_BYTE)v87;
  CPMSVariant = (capabilities::txpower *)capabilities::abs::getCPMSVariant(v87);
  *((unsigned char *)this + 664) = (_BYTE)CPMSVariant;
  if (CPMSVariant) {
    unint64_t v89 = 0;
  }
  else {
    unint64_t v89 = (capabilities::txpower *)capabilities::txpower::supportsPPM(CPMSVariant);
  }
  *((unsigned char *)this + 572) = (_BYTE)v89;
  uint64_t v90 = (capabilities::txpower *)capabilities::txpower::supportsKeyboard(v89);
  *((unsigned char *)this + 192) = (_BYTE)v90;
  uint64_t v91 = (capabilities::txpower *)capabilities::txpower::supportedFaceID(v90);
  *((_DWORD *)this + 43) = v91;
  uint64_t result = capabilities::txpower::supportsFrontCamera(v91);
  *((unsigned char *)this + 176) = result;
  return result;
}

void antenna::Service::Internal::stopService_sync(antenna::Service::Internal *this)
{
  antenna::Service::Internal::enableTxPowerCappingNotification_sync(this, 0);

  antenna::Service::Internal::stopTxPowerCapping_sync(this);
}

void antenna::Service::Internal::stopTxPowerCapping_sync(antenna::Service::Internal *this)
{
  if (*((unsigned char *)this + 152))
  {
    xpc_object_t v2 = *((void *)this + 5);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)long long buf = 0;
      _os_log_debug_impl(&dword_1C5767000, v2, OS_LOG_TYPE_DEBUG, "#D Tx Power Capping Stop", buf, 2u);
      BOOL v3 = *((void *)this + 25);
      if (v3)
      {
LABEL_4:
        dispatch_source_cancel(v3);
        xpc_object_t v4 = *((void *)this + 25);
        *((void *)this + 25) = 0;
        if (v4) {
          dispatch_release(v4);
        }
      }
    }
    else
    {
      BOOL v3 = *((void *)this + 25);
      if (v3) {
        goto LABEL_4;
      }
    }
    *((unsigned char *)this + 333) = 0;
    antenna::Service::Internal::stopMotionDetection_sync(this);
    antenna::Service::Internal::stopHandDetection_sync(this);
    *((_DWORD *)this + 132) = 255;
  }
  if (*((unsigned char *)this + 153))
  {
    xpc_object_t v5 = *((void *)this + 5);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)xpc_object_t v8 = 0;
      _os_log_debug_impl(&dword_1C5767000, v5, OS_LOG_TYPE_DEBUG, "#D iPad Tx Power Capping based on Motion Sensor Stop", v8, 2u);
      antenna::Service::Internal::stopMotionDetection_sync(this);
      xpc_object_t v6 = *((void *)this + 45);
      if (v6)
      {
LABEL_10:
        dispatch_source_cancel(v6);
        xpc_object_t v7 = *((void *)this + 45);
        *((void *)this + 45) = 0;
        if (v7) {
          dispatch_release(v7);
        }
      }
    }
    else
    {
      antenna::Service::Internal::stopMotionDetection_sync(this);
      xpc_object_t v6 = *((void *)this + 45);
      if (v6) {
        goto LABEL_10;
      }
    }
    *((_DWORD *)this + 88) = 255;
  }
  *((unsigned char *)this + 216) = 0;
}

void antenna::Service::Internal::stopService(antenna::Service::Internal *this)
{
  xpc_object_t v2 = (std::__shared_weak_count *)*((void *)this + 10);
  if (!v2 || (uint64_t v3 = *((void *)this + 9), (v4 = std::__shared_weak_count::lock(v2)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  xpc_object_t v5 = v4;
  xpc_object_t v6 = operator new(8uLL);
  *xpc_object_t v6 = this;
  xpc_object_t v7 = *((void *)this + 11);
  atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  xpc_object_t v8 = operator new(0x18uLL);
  *xpc_object_t v8 = v6;
  v8[1] = v3;
  void v8[2] = v5;
  dispatch_async_f(v7, v8, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<antenna::Service::Internal>::execute_wrapped<antenna::Service::Internal::stopService(void)::$_0>(antenna::Service::Internal::stopService(void)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<antenna::Service::Internal::stopService(void)::$_0,dispatch_queue_s *::default_delete<antenna::Service::Internal::stopService(void)::$_0>>)::{lambda(void *)#1}::__invoke);
  if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void antenna::Service::Internal::startService(antenna::Service::Internal *this)
{
  xpc_object_t v2 = (std::__shared_weak_count *)*((void *)this + 10);
  if (!v2 || (uint64_t v3 = *((void *)this + 9), (v4 = std::__shared_weak_count::lock(v2)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  xpc_object_t v5 = v4;
  xpc_object_t v6 = operator new(8uLL);
  *xpc_object_t v6 = this;
  xpc_object_t v7 = *((void *)this + 11);
  atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  xpc_object_t v8 = operator new(0x18uLL);
  *xpc_object_t v8 = v6;
  v8[1] = v3;
  void v8[2] = v5;
  dispatch_async_f(v7, v8, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<antenna::Service::Internal>::execute_wrapped<antenna::Service::Internal::startService(void)::$_0>(antenna::Service::Internal::startService(void)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<antenna::Service::Internal::startService(void)::$_0,dispatch_queue_s *::default_delete<antenna::Service::Internal::startService(void)::$_0>>)::{lambda(void *)#1}::__invoke);
  if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void antenna::Service::Internal::enterLowPower(antenna::Service::Internal *this)
{
  xpc_object_t v2 = (std::__shared_weak_count *)*((void *)this + 10);
  if (!v2 || (uint64_t v3 = *((void *)this + 9), (v4 = std::__shared_weak_count::lock(v2)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  xpc_object_t v5 = v4;
  xpc_object_t v6 = operator new(8uLL);
  *xpc_object_t v6 = this;
  xpc_object_t v7 = *((void *)this + 11);
  atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  xpc_object_t v8 = operator new(0x18uLL);
  *xpc_object_t v8 = v6;
  v8[1] = v3;
  void v8[2] = v5;
  dispatch_async_f(v7, v8, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<antenna::Service::Internal>::execute_wrapped<antenna::Service::Internal::enterLowPower(void)::$_0>(antenna::Service::Internal::enterLowPower(void)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<antenna::Service::Internal::enterLowPower(void)::$_0,dispatch_queue_s *::default_delete<antenna::Service::Internal::enterLowPower(void)::$_0>>)::{lambda(void *)#1}::__invoke);
  if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void antenna::Service::Internal::exitLowPower(antenna::Service::Internal *this)
{
  xpc_object_t v2 = (std::__shared_weak_count *)*((void *)this + 10);
  if (!v2 || (uint64_t v3 = *((void *)this + 9), (v4 = std::__shared_weak_count::lock(v2)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  xpc_object_t v5 = v4;
  xpc_object_t v6 = operator new(8uLL);
  *xpc_object_t v6 = this;
  xpc_object_t v7 = *((void *)this + 11);
  atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  xpc_object_t v8 = operator new(0x18uLL);
  *xpc_object_t v8 = v6;
  v8[1] = v3;
  void v8[2] = v5;
  dispatch_async_f(v7, v8, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<antenna::Service::Internal>::execute_wrapped<antenna::Service::Internal::exitLowPower(void)::$_0>(antenna::Service::Internal::exitLowPower(void)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<antenna::Service::Internal::exitLowPower(void)::$_0,dispatch_queue_s *::default_delete<antenna::Service::Internal::exitLowPower(void)::$_0>>)::{lambda(void *)#1}::__invoke);
  if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void antenna::Service::Internal::performCommandDriver_sync(void *a1, void *a2, uint64_t a3)
{
  xpc_object_t v4 = (std::__shared_weak_count *)a1[10];
  if (!v4 || (uint64_t v7 = a1[9], (v8 = std::__shared_weak_count::lock(v4)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  xpc_object_t v9 = v8;
  atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
  }
  if (MEMORY[0x1C8792D30](*a2) == MEMORY[0x1E4F14590])
  {
    uint64_t v10 = a1[15];
    xpc_object_t v23 = (xpc_object_t)*a2;
    if (v23) {
      xpc_retain(v23);
    }
    else {
      xpc_object_t v23 = xpc_null_create();
    }
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 1174405120;
    aBlock[2] = ___ZN7antenna7Service8Internal25performCommandDriver_syncEN3xpc4dictEN8dispatch8callbackIU13block_pointerFvNS2_6objectEEEE_block_invoke;
    aBlock[3] = &__block_descriptor_tmp_47_2;
    aBlock[4] = a1;
    aBlock[5] = v7;
    xpc_object_t v17 = v9;
    atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    xpc_object_t v11 = (xpc_object_t)*a2;
    xpc_object_t v18 = v11;
    if (v11)
    {
      xpc_retain(v11);
      xpc_object_t v12 = *(void **)a3;
      if (!*(void *)a3) {
        goto LABEL_14;
      }
    }
    else
    {
      xpc_object_t v18 = xpc_null_create();
      xpc_object_t v12 = *(void **)a3;
      if (!*(void *)a3)
      {
LABEL_14:
        uint64_t v13 = *(NSObject **)(a3 + 8);
        xpc_object_t v19 = v12;
        dispatch_object_t object = v13;
        if (v13) {
          dispatch_retain(v13);
        }
        uint64_t v14 = _Block_copy(aBlock);
        xpc_object_t v15 = a1[11];
        if (v15) {
          dispatch_retain(v15);
        }
        long long v21 = v14;
        dispatch_object_t v22 = v15;
        (*(void (**)(uint64_t, xpc_object_t *, const void **))(*(void *)v10 + 48))(v10, &v23, &v21);
        if (v22) {
          dispatch_release(v22);
        }
        if (v21) {
          _Block_release(v21);
        }
        xpc_release(v23);
        xpc_object_t v23 = 0;
        if (object) {
          dispatch_release(object);
        }
        if (v19) {
          _Block_release(v19);
        }
        xpc_release(v18);
        xpc_object_t v18 = 0;
        if (v17) {
          std::__shared_weak_count::__release_weak(v17);
        }
        goto LABEL_28;
      }
    }
    xpc_object_t v12 = _Block_copy(v12);
    goto LABEL_14;
  }
LABEL_28:
  std::__shared_weak_count::__release_weak(v9);
}

void sub_1C5907CA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, xpc_object_t object)
{
  dispatch::callback<void({block_pointer})(BOOL,xpc::object)>::~callback(v19 - 72);
  dispatch::callback<void({block_pointer})(xpc::object)>::~callback(v18);
  xpc_release(object);
  if (a16) {
    std::__shared_weak_count::__release_weak(a16);
  }
  xpc_release(*(xpc_object_t *)(v19 - 56));
  *(void *)(v19 - 56) = 0;
  std::__shared_weak_count::__release_weak(v17);
  _Unwind_Resume(a1);
}

void sub_1C5907D00(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_weak(v1);
  _Unwind_Resume(a1);
}

uint64_t dispatch::callback<void({block_pointer})(xpc::object)>::~callback(uint64_t a1)
{
  xpc_object_t v2 = *(NSObject **)(a1 + 8);
  if (v2) {
    dispatch_release(v2);
  }
  if (*(void *)a1) {
    _Block_release(*(const void **)a1);
  }
  return a1;
}

void antenna::Service::Internal::transmitStateHandler(void *a1, int a2, int a3)
{
  xpc_object_t v4 = (std::__shared_weak_count *)a1[10];
  if (!v4 || (uint64_t v7 = a1[9], (v8 = std::__shared_weak_count::lock(v4)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  xpc_object_t v9 = v8;
  uint64_t v10 = operator new(0x10uLL);
  *(void *)uint64_t v10 = a1;
  v10[2] = a2;
  v10[3] = a3;
  xpc_object_t v11 = a1[11];
  atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  xpc_object_t v12 = operator new(0x18uLL);
  *xpc_object_t v12 = v10;
  v12[1] = v7;
  void v12[2] = v9;
  dispatch_async_f(v11, v12, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<antenna::Service::Internal>::execute_wrapped<antenna::Service::Internal::transmitStateHandler(antenna::BBTransmitState,antenna::BBTransmitTrigger)::$_0>(antenna::Service::Internal::transmitStateHandler(antenna::BBTransmitState,antenna::BBTransmitTrigger)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<antenna::Service::Internal::transmitStateHandler(antenna::BBTransmitState,antenna::BBTransmitTrigger)::$_0,dispatch_queue_s *::default_delete<antenna::Service::Internal::transmitStateHandler(antenna::BBTransmitState,antenna::BBTransmitTrigger)::$_0>>)::{lambda(void *)#1}::__invoke);
  if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
}

void antenna::Service::Internal::createTransmitStateDict_sync(int a1@<W1>, int a2@<W2>, xpc_object_t *a3@<X8>)
{
  xpc_object_t v6 = xpc_dictionary_create(0, 0, 0);
  if (v6 || (xpc_object_t v6 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C8792D30](v6) == MEMORY[0x1E4F14590])
    {
      xpc_retain(v6);
      xpc_object_t v7 = v6;
    }
    else
    {
      xpc_object_t v7 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v7 = xpc_null_create();
    xpc_object_t v6 = 0;
  }
  xpc_release(v6);
  if (a1 == 1)
  {
    xpc_object_t v8 = xpc_string_create((const char *)*MEMORY[0x1E4F4D0C0]);
    if (!v8) {
      xpc_object_t v8 = xpc_null_create();
    }
  }
  else
  {
    if (a1)
    {
      *a3 = xpc_null_create();
      goto LABEL_31;
    }
    xpc_object_t v8 = xpc_string_create((const char *)*MEMORY[0x1E4F4CDB0]);
    if (!v8) {
      xpc_object_t v8 = xpc_null_create();
    }
  }
  xpc_dictionary_set_value(v7, (const char *)*MEMORY[0x1E4F4CD50], v8);
  xpc_object_t v9 = xpc_null_create();
  xpc_release(v8);
  xpc_release(v9);
  switch(a2)
  {
    case 0:
      xpc_object_t v10 = xpc_string_create((const char *)*MEMORY[0x1E4F4CEC8]);
      if (!v10) {
        xpc_object_t v10 = xpc_null_create();
      }
      goto LABEL_27;
    case 1:
      xpc_object_t v10 = xpc_string_create((const char *)*MEMORY[0x1E4F4CD00]);
      if (!v10) {
        xpc_object_t v10 = xpc_null_create();
      }
      goto LABEL_27;
    case 2:
      xpc_object_t v10 = xpc_string_create((const char *)*MEMORY[0x1E4F4CDA8]);
      if (!v10) {
        xpc_object_t v10 = xpc_null_create();
      }
      goto LABEL_27;
    case 3:
      xpc_object_t v10 = xpc_string_create((const char *)*MEMORY[0x1E4F4CBE0]);
      if (!v10) {
        xpc_object_t v10 = xpc_null_create();
      }
LABEL_27:
      xpc_dictionary_set_value(v7, (const char *)*MEMORY[0x1E4F4CF18], v10);
      xpc_object_t v11 = xpc_null_create();
      xpc_release(v10);
      xpc_release(v11);
      break;
    default:
      break;
  }
  xpc_object_t v12 = xpc_string_create((const char *)*MEMORY[0x1E4F4C750]);
  if (!v12) {
    xpc_object_t v12 = xpc_null_create();
  }
  xpc_dictionary_set_value(v7, (const char *)*MEMORY[0x1E4F4C7D8], v12);
  xpc_object_t v13 = xpc_null_create();
  xpc_release(v12);
  xpc_release(v13);
  *a3 = v7;
  xpc_object_t v7 = xpc_null_create();
LABEL_31:
  xpc_release(v7);
}

void antenna::Service::Internal::startTxPowerCapping_sync(antenna::Service::Internal *this)
{
  if (*((unsigned char *)this + 216) || *((unsigned char *)this + 168)) {
    return;
  }
  *((unsigned char *)this + 216) = 1;
  if (*((unsigned char *)this + 152))
  {
    xpc_object_t v2 = *((void *)this + 5);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(v12[0]) = 0;
      _os_log_debug_impl(&dword_1C5767000, v2, OS_LOG_TYPE_DEBUG, "#D Tx Power Capping Start", (uint8_t *)v12, 2u);
      pthread_mutex_lock(&ctu::Singleton<Capabilities,Capabilities,ctu::PthreadMutexGuardPolicy<Capabilities>>::sInstance);
      uint64_t v3 = (Capabilities *)qword_1EBBDD070;
      if (!qword_1EBBDD070)
      {
LABEL_7:
        xpc_object_t v4 = operator new(1uLL);
        xpc_object_t v5 = operator new(0x20uLL);
        *xpc_object_t v5 = &unk_1F20F7BD0;
        v5[1] = 0;
        v5[2] = 0;
        v5[3] = v4;
        xpc_object_t v6 = (std::__shared_weak_count *)off_1EBBDD078;
        qword_1EBBDD070 = (uint64_t)v4;
        off_1EBBDD078 = v5;
        if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
        uint64_t v3 = (Capabilities *)qword_1EBBDD070;
      }
    }
    else
    {
      pthread_mutex_lock(&ctu::Singleton<Capabilities,Capabilities,ctu::PthreadMutexGuardPolicy<Capabilities>>::sInstance);
      uint64_t v3 = (Capabilities *)qword_1EBBDD070;
      if (!qword_1EBBDD070) {
        goto LABEL_7;
      }
    }
    xpc_object_t v7 = (std::__shared_weak_count *)off_1EBBDD078;
    v12[0] = v3;
    v12[1] = off_1EBBDD078;
    if (off_1EBBDD078) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)off_1EBBDD078 + 1, 1uLL, memory_order_relaxed);
    }
    pthread_mutex_unlock(&ctu::Singleton<Capabilities,Capabilities,ctu::PthreadMutexGuardPolicy<Capabilities>>::sInstance);
    int isCMHandDetectionSupported = Capabilities::isCMHandDetectionSupported(v3);
    if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    if (isCMHandDetectionSupported)
    {
      antenna::Service::Internal::processHandDetection_sync(this);
      antenna::Service::Internal::checkStartHandDetection_sync(this);
    }
    antenna::Service::Internal::startTxPowerCappingIPhone_sync(this);
  }
  if (*((unsigned char *)this + 153))
  {
    xpc_object_t v9 = *((void *)this + 5);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(v12[0]) = 0;
      _os_log_debug_impl(&dword_1C5767000, v9, OS_LOG_TYPE_DEBUG, "#D iPad Tx Power Capping based on Motion Sensor Start", (uint8_t *)v12, 2u);
      if (*((unsigned char *)this + 248))
      {
LABEL_22:
        xpc_object_t v10 = *((void *)this + 45);
        if (!v10) {
          goto LABEL_30;
        }
        goto LABEL_28;
      }
    }
    else if (*((unsigned char *)this + 248))
    {
      goto LABEL_22;
    }
    antenna::Service::Internal::startMotionDetection_sync(this);
    xpc_object_t v10 = *((void *)this + 45);
    if (!v10)
    {
LABEL_30:
      antenna::Service::Internal::sendTxPowerCappingIPadMode_sync(this);
      antenna::Service::Internal::startTxPowerCappingIPadWithMotionTimer_sync((dispatch_queue_t *)this);
      return;
    }
LABEL_28:
    dispatch_source_cancel(v10);
    xpc_object_t v11 = *((void *)this + 45);
    *((void *)this + 45) = 0;
    if (v11) {
      dispatch_release(v11);
    }
    goto LABEL_30;
  }
}

void sub_1C59084EC(_Unwind_Exception *a1)
{
  operator delete(v1);
  pthread_mutex_unlock(&ctu::Singleton<Capabilities,Capabilities,ctu::PthreadMutexGuardPolicy<Capabilities>>::sInstance);
  _Unwind_Resume(a1);
}

void sub_1C5908518(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void antenna::Service::Internal::processHandDetection_sync(antenna::Service::Internal *this)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  pthread_mutex_lock(&ctu::Singleton<Capabilities,Capabilities,ctu::PthreadMutexGuardPolicy<Capabilities>>::sInstance);
  xpc_object_t v2 = (Capabilities *)qword_1EBBDD070;
  if (!qword_1EBBDD070)
  {
    uint64_t v3 = operator new(1uLL);
    xpc_object_t v4 = operator new(0x20uLL);
    void *v4 = &unk_1F20F7BD0;
    v4[1] = 0;
    uint64_t v4[2] = 0;
    v4[3] = v3;
    xpc_object_t v5 = (std::__shared_weak_count *)off_1EBBDD078;
    qword_1EBBDD070 = (uint64_t)v3;
    off_1EBBDD078 = v4;
    if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    xpc_object_t v2 = (Capabilities *)qword_1EBBDD070;
  }
  xpc_object_t v6 = (std::__shared_weak_count *)off_1EBBDD078;
  *(void *)&long long v17 = v2;
  *((void *)&v17 + 1) = off_1EBBDD078;
  if (off_1EBBDD078) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)off_1EBBDD078 + 1, 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<Capabilities,Capabilities,ctu::PthreadMutexGuardPolicy<Capabilities>>::sInstance);
  int isCMHandDetectionSupported = Capabilities::isCMHandDetectionSupported(v2);
  int v8 = isCMHandDetectionSupported;
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    if (!v8) {
      return;
    }
  }
  else if (!isCMHandDetectionSupported)
  {
    return;
  }
  xpc_object_t v9 = (const char **)((char *)this + 536);
  int v10 = *((char *)this + 559);
  xpc_object_t v11 = (char *)this + 536;
  if (v10 < 0) {
    xpc_object_t v11 = *v9;
  }
  size_t v12 = strlen((const char *)*MEMORY[0x1E4F4D2C8]);
  if (!strncasecmp(v11, (const char *)*MEMORY[0x1E4F4D2C8], v12))
  {
    BOOL isHandednessCondition = antenna::Service::Internal::isHandednessCondition(this);
    xpc_object_t v15 = *((void *)this + 5);
    BOOL v16 = os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG);
    if (isHandednessCondition)
    {
      if (v16)
      {
        LOWORD(v17) = 0;
        _os_log_debug_impl(&dword_1C5767000, v15, OS_LOG_TYPE_DEBUG, "#D Handedness condition is met", (uint8_t *)&v17, 2u);
      }
      antenna::Service::Internal::sendMotionHandDetectionState_sync(this, *((_DWORD *)this + 132));
    }
    else
    {
      if (v16)
      {
        LOWORD(v17) = 0;
        _os_log_debug_impl(&dword_1C5767000, v15, OS_LOG_TYPE_DEBUG, "#D Handedness condition is not met. Default handedness state is sending.", (uint8_t *)&v17, 2u);
      }
      antenna::Service::Internal::sendMotionHandDetectionState_sync(this, 0);
    }
  }
  else
  {
    xpc_object_t v13 = *((void *)this + 5);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    {
      if (v10 < 0) {
        xpc_object_t v9 = (const char **)*v9;
      }
      LODWORD(v17) = 136315138;
      *(void *)((char *)&v17 + 4) = v9;
      _os_log_debug_impl(&dword_1C5767000, v13, OS_LOG_TYPE_DEBUG, "#D Hand Detection Overriding Mode is %s, and sending is skipped", (uint8_t *)&v17, 0xCu);
    }
  }
}

void sub_1C59087E0(_Unwind_Exception *a1)
{
  operator delete(v1);
  pthread_mutex_unlock(&ctu::Singleton<Capabilities,Capabilities,ctu::PthreadMutexGuardPolicy<Capabilities>>::sInstance);
  _Unwind_Resume(a1);
}

void antenna::Service::Internal::checkStartHandDetection_sync(antenna::Service::Internal *this)
{
  pthread_mutex_lock(&ctu::Singleton<Capabilities,Capabilities,ctu::PthreadMutexGuardPolicy<Capabilities>>::sInstance);
  xpc_object_t v2 = (uint64_t *)qword_1EBBDD070;
  if (!qword_1EBBDD070)
  {
    uint64_t v3 = operator new(1uLL);
    xpc_object_t v4 = operator new(0x20uLL);
    void *v4 = &unk_1F20F7BD0;
    v4[1] = 0;
    uint64_t v4[2] = 0;
    v4[3] = v3;
    xpc_object_t v5 = (std::__shared_weak_count *)off_1EBBDD078;
    qword_1EBBDD070 = (uint64_t)v3;
    off_1EBBDD078 = v4;
    if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    xpc_object_t v2 = (uint64_t *)qword_1EBBDD070;
  }
  xpc_object_t v6 = (std::__shared_weak_count *)off_1EBBDD078;
  v10[0] = v2;
  v10[1] = (uint64_t *)off_1EBBDD078;
  if (off_1EBBDD078) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)off_1EBBDD078 + 1, 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<Capabilities,Capabilities,ctu::PthreadMutexGuardPolicy<Capabilities>>::sInstance);
  if (Capabilities::isCMHandDetectionSupported((Capabilities *)v2))
  {
    uint64_t v7 = *((void *)this + 64);
    if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
    if (v7)
    {
      if (*((unsigned char *)this + 560))
      {
        v10[0] = **((uint64_t ***)this + 64);
        ctu::SharedSynchronizable<CMHandDetectionHandler>::execute_wrapped<CMHandDetectionHandler::start(void)::{lambda(void)#1}>(v10[0], v10);
        int v8 = *((void *)this + 5);
        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
        {
          LOWORD(v10[0]) = 0;
          _os_log_debug_impl(&dword_1C5767000, v8, OS_LOG_TYPE_DEBUG, "#D Hand Detection Started!", (uint8_t *)v10, 2u);
        }
      }
      else
      {
        xpc_object_t v9 = *((void *)this + 5);
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
        {
          LOWORD(v10[0]) = 0;
          _os_log_debug_impl(&dword_1C5767000, v9, OS_LOG_TYPE_DEBUG, "#D Uncovered prox is detected. Set the detection state as default.", (uint8_t *)v10, 2u);
        }
        antenna::Service::Internal::processHandDetection_sync(this);
        antenna::Service::Internal::stopHandDetection_sync(this);
      }
    }
  }
  else if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
}

void sub_1C5908AA4(_Unwind_Exception *a1)
{
  operator delete(v1);
  pthread_mutex_unlock(&ctu::Singleton<Capabilities,Capabilities,ctu::PthreadMutexGuardPolicy<Capabilities>>::sInstance);
  _Unwind_Resume(a1);
}

void sub_1C5908AD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void antenna::Service::Internal::startTxPowerCappingIPhone_sync(antenna::Service::Internal *this)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  if (capabilities::txpower::operator&())
  {
    if (!*((unsigned char *)this + 155))
    {
      xpc_object_t v2 = (uint64_t **)((char *)this + 288);
      uint64_t v3 = (char *)*((void *)this + 36);
      xpc_object_t v4 = (uint64_t **)((char *)this + 288);
      xpc_object_t v5 = (uint64_t **)((char *)this + 288);
      if (v3)
      {
        while (1)
        {
          while (1)
          {
            xpc_object_t v5 = (uint64_t **)v3;
            int v6 = *((_DWORD *)v3 + 7);
            if (v6 < 2) {
              break;
            }
            uint64_t v3 = (char *)*v5;
            xpc_object_t v4 = v5;
            if (!*v5) {
              goto LABEL_10;
            }
          }
          if (v6 == 1) {
            break;
          }
          uint64_t v3 = (char *)v5[1];
          if (!v3)
          {
            xpc_object_t v4 = v5 + 1;
            goto LABEL_10;
          }
        }
      }
      else
      {
LABEL_10:
        uint64_t v7 = (char *)v5;
        xpc_object_t v5 = (uint64_t **)operator new(0x28uLL);
        *((_DWORD *)v5 + 7) = 1;
        *((unsigned char *)v5 + 32) = 0;
        *xpc_object_t v5 = 0;
        v5[1] = 0;
        v5[2] = (uint64_t *)v7;
        void *v4 = (uint64_t *)v5;
        uint64_t v8 = **((void **)this + 35);
        xpc_object_t v9 = (uint64_t *)v5;
        if (v8)
        {
          *((void *)this + 35) = v8;
          xpc_object_t v9 = *v4;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 36), v9);
        ++*((void *)this + 37);
      }
      if (!*((unsigned char *)v5 + 32))
      {
        int v10 = *v2;
        xpc_object_t v11 = (uint64_t **)((char *)this + 288);
        if (*v2)
        {
          while (1)
          {
            while (1)
            {
              xpc_object_t v11 = (uint64_t **)v10;
              int v12 = *((_DWORD *)v10 + 7);
              if (v12 < 4) {
                break;
              }
              int v10 = *v11;
              xpc_object_t v2 = v11;
              if (!*v11) {
                goto LABEL_21;
              }
            }
            if (v12 == 3) {
              break;
            }
            int v10 = v11[1];
            if (!v10)
            {
              xpc_object_t v2 = v11 + 1;
              goto LABEL_21;
            }
          }
        }
        else
        {
LABEL_21:
          xpc_object_t v13 = (char *)v11;
          xpc_object_t v11 = (uint64_t **)operator new(0x28uLL);
          *((_DWORD *)v11 + 7) = 3;
          *((unsigned char *)v11 + 32) = 0;
          const char *v11 = 0;
          v11[1] = 0;
          v11[2] = (uint64_t *)v13;
          uint64_t *v2 = (uint64_t *)v11;
          uint64_t v14 = **((void **)this + 35);
          xpc_object_t v15 = (uint64_t *)v11;
          if (v14)
          {
            *((void *)this + 35) = v14;
            xpc_object_t v15 = *v2;
          }
          std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 36), v15);
          ++*((void *)this + 37);
        }
        if (!*((unsigned char *)v11 + 32))
        {
          antenna::Service::Internal::stopMotionDetection_sync(this);
          BOOL v16 = *((void *)this + 25);
          if (!v16) {
            goto LABEL_29;
          }
          goto LABEL_27;
        }
      }
    }
    antenna::Service::Internal::startMotionDetection_sync(this);
  }
  BOOL v16 = *((void *)this + 25);
  if (!v16) {
    goto LABEL_29;
  }
LABEL_27:
  dispatch_source_cancel(v16);
  BOOL v16 = *((void *)this + 25);
  *((void *)this + 25) = 0;
  if (v16) {
    dispatch_release(v16);
  }
LABEL_29:
  if (config::hw::watch((config::hw *)v16))
  {
    unsigned int TxPowerCappingForWatch = antenna::Service::Internal::getTxPowerCappingForWatch(this);
  }
  else if ((TelephonyUtilIsInternalBuild() & 1) == 0 && !TelephonyUtilIsCarrierBuild() {
         || (unsigned int TxPowerCappingForWatch = *((_DWORD *)this + 52), TxPowerCappingForWatch == 4))
  }
  {
    if (antenna::Service::Internal::isAudioReceiverOutputOnlyActive(this)
      || antenna::Service::Internal::isAudioAnyOutputActive(this) && !*((_DWORD *)this + 63)
      || *((unsigned char *)this + 155) && !antenna::Service::Internal::isAudioAnyOutputActive(this) && !*((_DWORD *)this + 63))
    {
      unsigned int TxPowerCappingForWatch = 2;
    }
    else
    {
      unsigned int TxPowerCappingForWatch = 3;
    }
  }
  xpc_object_t v18 = xpc_dictionary_create(0, 0, 0);
  if (v18 || (xpc_object_t v18 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C8792D30](v18) == MEMORY[0x1E4F14590])
    {
      xpc_retain(v18);
      xpc_object_t v19 = v18;
    }
    else
    {
      xpc_object_t v19 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v19 = xpc_null_create();
    xpc_object_t v18 = 0;
  }
  xpc_release(v18);
  xpc_object_t v20 = xpc_string_create((const char *)*MEMORY[0x1E4FB9D08]);
  if (!v20) {
    xpc_object_t v20 = xpc_null_create();
  }
  xpc_dictionary_set_value(v19, (const char *)*MEMORY[0x1E4FB9C68], v20);
  xpc_object_t v21 = xpc_null_create();
  xpc_release(v20);
  xpc_release(v21);
  xpc_object_t v22 = xpc_BOOL_create(1);
  if (!v22) {
    xpc_object_t v22 = xpc_null_create();
  }
  xpc_dictionary_set_value(v19, (const char *)*MEMORY[0x1E4FB9D30], v22);
  xpc_object_t v23 = xpc_null_create();
  xpc_release(v22);
  xpc_release(v23);
  xpc_object_t v24 = xpc_int64_create(TxPowerCappingForWatch);
  if (!v24) {
    xpc_object_t v24 = xpc_null_create();
  }
  xpc_dictionary_set_value(v19, (const char *)*MEMORY[0x1E4FB9DC8], v24);
  xpc_object_t v25 = xpc_null_create();
  xpc_release(v24);
  xpc_release(v25);
  uint64_t v26 = *((void *)this + 5);
  if (os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG))
  {
    memset(&v34, 0, sizeof(v34));
    if (TxPowerCappingForWatch - 1 < 3) {
      std::string::__assign_external(&v34, **((const std::string::value_type ***)&unk_1E6518118 + (int)(TxPowerCappingForWatch - 1)));
    }
    uint64_t v31 = &v34;
    if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      uint64_t v31 = (std::string *)v34.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)long long buf = 136315138;
    size_t v36 = v31;
    _os_log_debug_impl(&dword_1C5767000, v26, OS_LOG_TYPE_DEBUG, "#D Tx Power Capping: %s", buf, 0xCu);
    if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v34.__r_.__value_.__l.__data_);
    }
  }
  if (*((unsigned char *)this + 154))
  {
    if ((TelephonyUtilIsInternalBuild() & 1) == 0 && !TelephonyUtilIsCarrierBuild()
      || (unsigned int v27 = *((_DWORD *)this + 53), v27 == 255))
    {
      unsigned int v27 = antenna::Service::Internal::isAudioReceiverOutputOnlyActive(this) || *((_DWORD *)this + 63) != 0;
    }
    xpc_object_t v28 = xpc_int64_create(v27);
    if (!v28) {
      xpc_object_t v28 = xpc_null_create();
    }
    xpc_dictionary_set_value(v19, (const char *)*MEMORY[0x1E4FB9DF8], v28);
    xpc_object_t v29 = xpc_null_create();
    xpc_release(v28);
    xpc_release(v29);
    int v30 = *((void *)this + 5);
    if (os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG))
    {
      LODWORD(v34.__r_.__value_.__l.__data_) = 67109120;
      HIDWORD(v34.__r_.__value_.__r.__words[0]) = v27;
      _os_log_debug_impl(&dword_1C5767000, v30, OS_LOG_TYPE_DEBUG, "#D iPhone Tx Power Free Space: 0x%x", (uint8_t *)&v34, 8u);
      xpc_object_t object = v19;
      if (v19) {
        goto LABEL_66;
      }
LABEL_74:
      xpc_object_t object = xpc_null_create();
      goto LABEL_75;
    }
  }
  xpc_object_t object = v19;
  if (!v19) {
    goto LABEL_74;
  }
LABEL_66:
  xpc_retain(v19);
LABEL_75:
  v32[0] = 0;
  v32[1] = 0;
  antenna::Service::Internal::performCommandDriver_sync(this, &object, (uint64_t)v32);
  xpc_release(object);
  xpc_object_t object = 0;
  antenna::Service::Internal::startTxPowerCappingIPhoneTimer_sync(this);
  if (*((unsigned char *)this + 332) && *((unsigned char *)this + 333))
  {
    AudioServicesPlaySystemSound(0x452u);
    *((unsigned char *)this + 333) = 0;
  }
  xpc_release(v19);
}

void sub_1C5909084(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, xpc_object_t object, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void antenna::Service::Internal::startTxPowerCappingIPadWithMotion_sync(antenna::Service::Internal *this)
{
  if (*((unsigned char *)this + 248))
  {
    xpc_object_t v2 = *((void *)this + 45);
    if (!v2) {
      goto LABEL_7;
    }
  }
  else
  {
    antenna::Service::Internal::startMotionDetection_sync(this);
    xpc_object_t v2 = *((void *)this + 45);
    if (!v2) {
      goto LABEL_7;
    }
  }
  dispatch_source_cancel(v2);
  uint64_t v3 = *((void *)this + 45);
  *((void *)this + 45) = 0;
  if (v3) {
    dispatch_release(v3);
  }
LABEL_7:
  antenna::Service::Internal::sendTxPowerCappingIPadMode_sync(this);

  antenna::Service::Internal::startTxPowerCappingIPadWithMotionTimer_sync((dispatch_queue_t *)this);
}

void antenna::Service::Internal::stopTxPowerCappingIPhone_sync(antenna::Service::Internal *this)
{
  xpc_object_t v2 = *((void *)this + 25);
  if (v2)
  {
    dispatch_source_cancel(v2);
    uint64_t v3 = *((void *)this + 25);
    *((void *)this + 25) = 0;
    if (v3) {
      dispatch_release(v3);
    }
  }
  *((unsigned char *)this + 333) = 0;
  antenna::Service::Internal::stopMotionDetection_sync(this);
  antenna::Service::Internal::stopHandDetection_sync(this);
  *((_DWORD *)this + 132) = 255;
}

void antenna::Service::Internal::stopTxPowerCappingIPadWithMotion_sync(NSObject **this)
{
  antenna::Service::Internal::stopMotionDetection_sync((antenna::Service::Internal *)this);
  xpc_object_t v2 = this[45];
  if (v2)
  {
    dispatch_source_cancel(v2);
    uint64_t v3 = this[45];
    this[45] = 0;
    if (v3) {
      dispatch_release(v3);
    }
  }
  *((_DWORD *)this + 88) = 255;
}

unint64_t antenna::Service::Internal::systemElapsedTime(antenna::Service::Internal *this)
{
  return ctu::Clock::now_in_nanoseconds(this) / 0xF4240uLL;
}

uint64_t antenna::Service::Internal::systemTimeDifference(antenna::Service::Internal *this, int a2, int a3)
{
  return (a2 - a3);
}

uint64_t antenna::Service::Internal::lqmState_sync(uint64_t a1, int a2)
{
  if (a2 == 100) {
    return 2;
  }
  else {
    return a2 == 50;
  }
}

void antenna::Service::Internal::setLinkQualityMetric_sync(uint64_t a1, int a2)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a1 + 162))
  {
    if (a2 == 100) {
      int v2 = 2;
    }
    else {
      int v2 = a2 == 50;
    }
    *(_DWORD *)(a1 + 484) = v2;
    uint64_t v3 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
    {
      v4[0] = 67109120;
      v4[1] = v2;
      _os_log_debug_impl(&dword_1C5767000, v3, OS_LOG_TYPE_DEBUG, "#D fLQMState has set to %d", (uint8_t *)v4, 8u);
    }
  }
}

void antenna::Service::Internal::setMaxPower_sync(antenna::Service::Internal *this, xpc_object_t *a2)
{
  xpc_object_t v4 = (const char *)*MEMORY[0x1E4F4C460];
  if (xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E4F4C460]))
  {
    xpc_object_t value = xpc_dictionary_get_value(*a2, v4);
    xpc_object_t object = value;
    if (value) {
      xpc_retain(value);
    }
    else {
      xpc_object_t object = xpc_null_create();
    }
    unsigned int v6 = xpc::dyn_cast_or_default((xpc *)&object, 0);
    xpc_release(object);
    if (v6 <= 0x3E8) {
      int v7 = v6;
    }
    else {
      int v7 = 0x7FFF;
    }
    *((_DWORD *)this + 116) = v7;
  }
  uint64_t v8 = (const char *)*MEMORY[0x1E4F4C620];
  if (xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E4F4C620]))
  {
    xpc_object_t v9 = xpc_dictionary_get_value(*a2, v8);
    xpc_object_t object = v9;
    if (v9) {
      xpc_retain(v9);
    }
    else {
      xpc_object_t object = xpc_null_create();
    }
    unsigned int v10 = xpc::dyn_cast_or_default((xpc *)&object, 0);
    xpc_release(object);
    if (v10 <= 0x3E8) {
      int v11 = v10;
    }
    else {
      int v11 = 0x7FFF;
    }
    *((_DWORD *)this + 117) = v11;
  }
  int v12 = (const char *)*MEMORY[0x1E4F4C290];
  if (xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E4F4C290]))
  {
    xpc_object_t v13 = xpc_dictionary_get_value(*a2, v12);
    xpc_object_t object = v13;
    if (v13) {
      xpc_retain(v13);
    }
    else {
      xpc_object_t object = xpc_null_create();
    }
    *((_DWORD *)this + 118) = (unsigned __int16)xpc::dyn_cast_or_default((xpc *)&object, 0);
    xpc_release(object);
  }
  if (!*((unsigned char *)this + 664)) {
    antenna::Service::Internal::configTxPower_sync((uint64_t)this, 2u);
  }
}

void sub_1C5909524(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
}

unint64_t antenna::Service::Internal::calculateTxValue(antenna::Service::Internal *this, int a2, int a3)
{
  unint64_t result = 0x7FFFLL;
  if (a3 != 0x7FFF) {
    return (a3 * a2) / 0x64uLL;
  }
  return result;
}

void antenna::Service::Internal::setMaxPower_sync(antenna::Service::Internal *this)
{
  if (!*((unsigned char *)this + 664)) {
    antenna::Service::Internal::configTxPower_sync((uint64_t)this, 2u);
  }
}

void antenna::Service::Internal::callActive(antenna::Service::Internal *this)
{
  int v2 = *((void *)this + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)xpc_object_t v4 = 0;
    _os_log_impl(&dword_1C5767000, v2, OS_LOG_TYPE_DEFAULT, "#I Call Active!", v4, 2u);
  }
  *((unsigned char *)this + 165) = 1;
  if (*((unsigned char *)this + 162))
  {
    uint64_t v3 = *((void *)this + 47);
    if (v3)
    {
      if (*(void *)(v3 + 72)) {
        ctu::iokit::Controller::setMesaQuality();
      }
    }
  }
}

void antenna::Service::Internal::callInactive(antenna::Service::Internal *this)
{
  int v2 = *((void *)this + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)xpc_object_t v4 = 0;
    _os_log_impl(&dword_1C5767000, v2, OS_LOG_TYPE_DEFAULT, "#I Call Inactive!", v4, 2u);
  }
  *((unsigned char *)this + 165) = 0;
  if (*((unsigned char *)this + 162))
  {
    uint64_t v3 = *((void *)this + 47);
    if (v3)
    {
      if (*(void *)(v3 + 72)) {
        ctu::iokit::Controller::setMesaQuality();
      }
    }
  }
}

BOOL antenna::Service::Internal::isAudioReceiverOutputOnlyActive(antenna::Service::Internal *this)
{
  int v2 = (int **)((char *)this + 288);
  uint64_t v3 = (char *)*((void *)this + 36);
  xpc_object_t v4 = (uint64_t **)((char *)this + 288);
  uint64_t v5 = (uint64_t **)((char *)this + 288);
  if (v3)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v5 = (uint64_t **)v3;
        int v6 = *((_DWORD *)v3 + 7);
        if (v6 < 1) {
          break;
        }
        uint64_t v3 = (char *)*v5;
        xpc_object_t v4 = v5;
        if (!*v5) {
          goto LABEL_8;
        }
      }
      if ((v6 & 0x80000000) == 0) {
        break;
      }
      uint64_t v3 = (char *)v5[1];
      if (!v3)
      {
        xpc_object_t v4 = v5 + 1;
        goto LABEL_8;
      }
    }
  }
  else
  {
LABEL_8:
    int v7 = (char *)v5;
    uint64_t v5 = (uint64_t **)operator new(0x28uLL);
    *((_DWORD *)v5 + 7) = 0;
    *((unsigned char *)v5 + 32) = 0;
    *uint64_t v5 = 0;
    v5[1] = 0;
    v5[2] = (uint64_t *)v7;
    const char *v4 = (uint64_t *)v5;
    uint64_t v8 = **((void **)this + 35);
    xpc_object_t v9 = (uint64_t *)v5;
    if (v8)
    {
      *((void *)this + 35) = v8;
      xpc_object_t v9 = *v4;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 36), v9);
    ++*((void *)this + 37);
  }
  if (!*((unsigned char *)v5 + 32)) {
    return 0;
  }
  unsigned int v10 = *v2;
  int v11 = (uint64_t **)v2;
  int v12 = v2;
  if (*v2)
  {
    while (1)
    {
      while (1)
      {
        int v12 = v10;
        int v13 = v10[7];
        if (v13 < 2) {
          break;
        }
        unsigned int v10 = (int *)*v12;
        int v11 = (uint64_t **)v12;
        if (!*v12) {
          goto LABEL_19;
        }
      }
      if (v13 == 1) {
        break;
      }
      unsigned int v10 = (int *)v12[1];
      if (!v10)
      {
        int v11 = (uint64_t **)(v12 + 1);
        goto LABEL_19;
      }
    }
  }
  else
  {
LABEL_19:
    uint64_t v14 = v12;
    int v12 = operator new(0x28uLL);
    *((_DWORD *)v12 + 7) = 1;
    *((unsigned char *)v12 + 32) = 0;
    *int v12 = 0;
    v12[1] = 0;
    void v12[2] = v14;
    const char *v11 = v12;
    uint64_t v15 = **((void **)this + 35);
    BOOL v16 = v12;
    if (v15)
    {
      *((void *)this + 35) = v15;
      BOOL v16 = *v11;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 36), v16);
    ++*((void *)this + 37);
  }
  if (*((unsigned char *)v12 + 32)) {
    return 0;
  }
  xpc_object_t v18 = *v2;
  xpc_object_t v19 = v2;
  if (*v2)
  {
    while (1)
    {
      while (1)
      {
        xpc_object_t v19 = (int **)v18;
        int v20 = v18[7];
        if (v20 < 4) {
          break;
        }
        xpc_object_t v18 = *v19;
        int v2 = v19;
        if (!*v19) {
          goto LABEL_31;
        }
      }
      if (v20 == 3) {
        break;
      }
      xpc_object_t v18 = v19[1];
      if (!v18)
      {
        int v2 = v19 + 1;
        goto LABEL_31;
      }
    }
  }
  else
  {
LABEL_31:
    xpc_object_t v21 = (int *)v19;
    xpc_object_t v19 = (int **)operator new(0x28uLL);
    *((_DWORD *)v19 + 7) = 3;
    *((unsigned char *)v19 + 32) = 0;
    void *v19 = 0;
    v19[1] = 0;
    void v19[2] = v21;
    NSObject *v2 = (int *)v19;
    uint64_t v22 = **((void **)this + 35);
    xpc_object_t v23 = (uint64_t *)v19;
    if (v22)
    {
      *((void *)this + 35) = v22;
      xpc_object_t v23 = (uint64_t *)*v2;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 36), v23);
    ++*((void *)this + 37);
  }
  return *((unsigned char *)v19 + 32) == 0;
}

BOOL antenna::Service::Internal::isAudioAnyOutputActive(antenna::Service::Internal *this)
{
  int v2 = (int **)((char *)this + 288);
  uint64_t v3 = (char *)*((void *)this + 36);
  xpc_object_t v4 = (uint64_t **)((char *)this + 288);
  uint64_t v5 = (uint64_t **)((char *)this + 288);
  if (v3)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v5 = (uint64_t **)v3;
        int v6 = *((_DWORD *)v3 + 7);
        if (v6 < 1) {
          break;
        }
        uint64_t v3 = (char *)*v5;
        xpc_object_t v4 = v5;
        if (!*v5) {
          goto LABEL_8;
        }
      }
      if ((v6 & 0x80000000) == 0) {
        break;
      }
      uint64_t v3 = (char *)v5[1];
      if (!v3)
      {
        xpc_object_t v4 = v5 + 1;
        goto LABEL_8;
      }
    }
  }
  else
  {
LABEL_8:
    int v7 = (char *)v5;
    uint64_t v5 = (uint64_t **)operator new(0x28uLL);
    *((_DWORD *)v5 + 7) = 0;
    *((unsigned char *)v5 + 32) = 0;
    *uint64_t v5 = 0;
    v5[1] = 0;
    v5[2] = (uint64_t *)v7;
    const char *v4 = (uint64_t *)v5;
    uint64_t v8 = **((void **)this + 35);
    xpc_object_t v9 = (uint64_t *)v5;
    if (v8)
    {
      *((void *)this + 35) = v8;
      xpc_object_t v9 = *v4;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 36), v9);
    ++*((void *)this + 37);
  }
  if (*((unsigned char *)v5 + 32)) {
    return 1;
  }
  int v11 = *v2;
  int v12 = (uint64_t **)v2;
  int v13 = v2;
  if (*v2)
  {
    while (1)
    {
      while (1)
      {
        int v13 = v11;
        int v14 = v11[7];
        if (v14 < 2) {
          break;
        }
        int v11 = (int *)*v13;
        int v12 = (uint64_t **)v13;
        if (!*v13) {
          goto LABEL_20;
        }
      }
      if (v14 == 1) {
        break;
      }
      int v11 = (int *)v13[1];
      if (!v11)
      {
        int v12 = (uint64_t **)(v13 + 1);
        goto LABEL_20;
      }
    }
  }
  else
  {
LABEL_20:
    uint64_t v15 = v13;
    int v13 = operator new(0x28uLL);
    *((_DWORD *)v13 + 7) = 1;
    *((unsigned char *)v13 + 32) = 0;
    void *v13 = 0;
    v13[1] = 0;
    uint64_t v13[2] = v15;
    *int v12 = v13;
    uint64_t v16 = **((void **)this + 35);
    long long v17 = v13;
    if (v16)
    {
      *((void *)this + 35) = v16;
      long long v17 = *v12;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 36), v17);
    ++*((void *)this + 37);
  }
  if (*((unsigned char *)v13 + 32)) {
    return 1;
  }
  xpc_object_t v18 = *v2;
  xpc_object_t v19 = v2;
  if (*v2)
  {
    while (1)
    {
      while (1)
      {
        xpc_object_t v19 = (int **)v18;
        int v20 = v18[7];
        if (v20 < 4) {
          break;
        }
        xpc_object_t v18 = *v19;
        int v2 = v19;
        if (!*v19) {
          goto LABEL_31;
        }
      }
      if (v20 == 3) {
        break;
      }
      xpc_object_t v18 = v19[1];
      if (!v18)
      {
        int v2 = v19 + 1;
        goto LABEL_31;
      }
    }
  }
  else
  {
LABEL_31:
    xpc_object_t v21 = (int *)v19;
    xpc_object_t v19 = (int **)operator new(0x28uLL);
    *((_DWORD *)v19 + 7) = 3;
    *((unsigned char *)v19 + 32) = 0;
    void *v19 = 0;
    v19[1] = 0;
    void v19[2] = v21;
    NSObject *v2 = (int *)v19;
    uint64_t v22 = **((void **)this + 35);
    xpc_object_t v23 = (uint64_t *)v19;
    if (v22)
    {
      *((void *)this + 35) = v22;
      xpc_object_t v23 = (uint64_t *)*v2;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 36), v23);
    ++*((void *)this + 37);
  }
  return *((unsigned char *)v19 + 32) != 0;
}

uint64_t antenna::Service::Internal::isAudioOtherOutputActive(antenna::Service::Internal *this)
{
  int v2 = (char *)*((void *)this + 36);
  if (v2)
  {
    while (1)
    {
      while (1)
      {
        xpc_object_t v4 = (uint64_t **)v2;
        int v5 = *((_DWORD *)v2 + 7);
        if (v5 < 2) {
          break;
        }
        int v2 = (char *)*v4;
        uint64_t v3 = v4;
        if (!*v4) {
          goto LABEL_8;
        }
      }
      if (v5 == 1) {
        break;
      }
      int v2 = (char *)v4[1];
      if (!v2)
      {
        uint64_t v3 = v4 + 1;
        goto LABEL_8;
      }
    }
  }
  else
  {
    uint64_t v3 = (uint64_t **)((char *)this + 288);
    xpc_object_t v4 = (uint64_t **)((char *)this + 288);
LABEL_8:
    int v6 = (char *)v4;
    xpc_object_t v4 = (uint64_t **)operator new(0x28uLL);
    *((_DWORD *)v4 + 7) = 1;
    *((unsigned char *)v4 + 32) = 0;
    const char *v4 = 0;
    v4[1] = 0;
    _DWORD v4[2] = (uint64_t *)v6;
    char *v3 = (uint64_t *)v4;
    uint64_t v7 = **((void **)this + 35);
    uint64_t v8 = (uint64_t *)v4;
    if (v7)
    {
      *((void *)this + 35) = v7;
      uint64_t v8 = *v3;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 36), v8);
    ++*((void *)this + 37);
  }
  return *((unsigned __int8 *)v4 + 32);
}

uint64_t antenna::Service::Internal::isAudioSpeakerOutputActive(antenna::Service::Internal *this)
{
  int v2 = (char *)*((void *)this + 36);
  if (v2)
  {
    while (1)
    {
      while (1)
      {
        xpc_object_t v4 = (uint64_t **)v2;
        int v5 = *((_DWORD *)v2 + 7);
        if (v5 < 4) {
          break;
        }
        int v2 = (char *)*v4;
        uint64_t v3 = v4;
        if (!*v4) {
          goto LABEL_8;
        }
      }
      if (v5 == 3) {
        break;
      }
      int v2 = (char *)v4[1];
      if (!v2)
      {
        uint64_t v3 = v4 + 1;
        goto LABEL_8;
      }
    }
  }
  else
  {
    uint64_t v3 = (uint64_t **)((char *)this + 288);
    xpc_object_t v4 = (uint64_t **)((char *)this + 288);
LABEL_8:
    int v6 = (char *)v4;
    xpc_object_t v4 = (uint64_t **)operator new(0x28uLL);
    *((_DWORD *)v4 + 7) = 3;
    *((unsigned char *)v4 + 32) = 0;
    const char *v4 = 0;
    v4[1] = 0;
    _DWORD v4[2] = (uint64_t *)v6;
    char *v3 = (uint64_t *)v4;
    uint64_t v7 = **((void **)this + 35);
    uint64_t v8 = (uint64_t *)v4;
    if (v7)
    {
      *((void *)this + 35) = v7;
      uint64_t v8 = *v3;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 36), v8);
    ++*((void *)this + 37);
  }
  return *((unsigned __int8 *)v4 + 32);
}

uint64_t antenna::Service::Internal::isAudioReceiverOutputActive(antenna::Service::Internal *this)
{
  int v2 = (char *)*((void *)this + 36);
  if (v2)
  {
    while (1)
    {
      while (1)
      {
        xpc_object_t v4 = (uint64_t **)v2;
        int v5 = *((_DWORD *)v2 + 7);
        if (v5 < 1) {
          break;
        }
        int v2 = (char *)*v4;
        uint64_t v3 = v4;
        if (!*v4) {
          goto LABEL_8;
        }
      }
      if ((v5 & 0x80000000) == 0) {
        break;
      }
      int v2 = (char *)v4[1];
      if (!v2)
      {
        uint64_t v3 = v4 + 1;
        goto LABEL_8;
      }
    }
  }
  else
  {
    uint64_t v3 = (uint64_t **)((char *)this + 288);
    xpc_object_t v4 = (uint64_t **)((char *)this + 288);
LABEL_8:
    int v6 = (char *)v4;
    xpc_object_t v4 = (uint64_t **)operator new(0x28uLL);
    *((_DWORD *)v4 + 7) = 0;
    *((unsigned char *)v4 + 32) = 0;
    const char *v4 = 0;
    v4[1] = 0;
    _DWORD v4[2] = (uint64_t *)v6;
    char *v3 = (uint64_t *)v4;
    uint64_t v7 = **((void **)this + 35);
    uint64_t v8 = (uint64_t *)v4;
    if (v7)
    {
      *((void *)this + 35) = v7;
      uint64_t v8 = *v3;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 36), v8);
    ++*((void *)this + 37);
  }
  return *((unsigned __int8 *)v4 + 32);
}

void antenna::Service::Internal::setAudioState(void *a1, xpc_object_t *a2)
{
  xpc_object_t v3 = *a2;
  if (*a2)
  {
    xpc_retain(*a2);
    xpc_object_t v4 = (std::__shared_weak_count *)a1[10];
    if (!v4) {
LABEL_9:
    }
      std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  else
  {
    xpc_object_t v3 = xpc_null_create();
    xpc_object_t v4 = (std::__shared_weak_count *)a1[10];
    if (!v4) {
      goto LABEL_9;
    }
  }
  uint64_t v5 = a1[9];
  int v6 = std::__shared_weak_count::lock(v4);
  if (!v6) {
    goto LABEL_9;
  }
  uint64_t v7 = v6;
  uint64_t v8 = operator new(0x10uLL);
  *uint64_t v8 = a1;
  v8[1] = v3;
  xpc_object_t v9 = xpc_null_create();
  unsigned int v10 = a1[11];
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  int v11 = operator new(0x18uLL);
  void *v11 = v8;
  v11[1] = v5;
  v11[2] = v7;
  dispatch_async_f(v10, v11, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<antenna::Service::Internal>::execute_wrapped<antenna::Service::Internal::setAudioState(xpc::dict)::$_0>(antenna::Service::Internal::setAudioState(xpc::dict)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<antenna::Service::Internal::setAudioState(xpc::dict)::$_0,dispatch_queue_s *::default_delete<antenna::Service::Internal::setAudioState(xpc::dict)::$_0>>)::{lambda(void *)#1}::__invoke);
  if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  xpc_release(v9);
}

uint64_t antenna::Service::Internal::setTxPowerPlayAlert_sync(uint64_t result, int a2)
{
  *(unsigned char *)(result + 333) = 0;
  if (!*(unsigned char *)(result + 332)) {
    return result;
  }
  uint64_t v3 = result;
  unint64_t result = TelephonyUtilIsInternalBuild();
  if ((result & 1) != 0 || (unint64_t result = TelephonyUtilIsCarrierBuild(), result))
  {
    int v4 = *(_DWORD *)(v3 + 208);
    if (v4 != 4)
    {
LABEL_7:
      if (v4 == a2) {
        return result;
      }
      goto LABEL_8;
    }
  }
  unint64_t result = antenna::Service::Internal::isAudioReceiverOutputOnlyActive((antenna::Service::Internal *)v3);
  if ((result & 1) != 0
    || (unint64_t result = antenna::Service::Internal::isAudioAnyOutputActive((antenna::Service::Internal *)v3), result)
    && !*(_DWORD *)(v3 + 252)
    || *(unsigned char *)(v3 + 155)
    && (unint64_t result = antenna::Service::Internal::isAudioAnyOutputActive((antenna::Service::Internal *)v3), (result & 1) == 0)
    && !*(_DWORD *)(v3 + 252))
  {
    int v4 = 2;
    goto LABEL_7;
  }
  if (a2 != 3) {
LABEL_8:
  }
    *(unsigned char *)(v3 + 333) = 1;
  return result;
}

uint64_t antenna::Service::Internal::getTxPowerCappingForIPhone(antenna::Service::Internal *this)
{
  if ((TelephonyUtilIsInternalBuild() & 1) == 0 && !TelephonyUtilIsCarrierBuild()
    || (uint64_t result = *((unsigned int *)this + 52), result == 4))
  {
    if (antenna::Service::Internal::isAudioReceiverOutputOnlyActive(this)
      || antenna::Service::Internal::isAudioAnyOutputActive(this) && !*((_DWORD *)this + 63)
      || *((unsigned char *)this + 155) && !antenna::Service::Internal::isAudioAnyOutputActive(this) && !*((_DWORD *)this + 63))
    {
      return 2;
    }
    else
    {
      return 3;
    }
  }
  return result;
}

BOOL antenna::Service::Internal::isMotionOnTablePosition(antenna::Service::Internal *this)
{
  return *((_DWORD *)this + 63) == 0;
}

void antenna::Service::Internal::stopTxMotionCallbackTimer_sync(antenna::Service::Internal *this)
{
  int v2 = *((void *)this + 32);
  if (v2)
  {
    dispatch_source_cancel(v2);
    uint64_t v3 = *((void *)this + 32);
    *((void *)this + 32) = 0;
    if (v3)
    {
      dispatch_release(v3);
    }
  }
}

void antenna::Service::Internal::startTxMotionCallbackTimer_sync(dispatch_queue_t *this)
{
  int v2 = dispatch_source_create(MEMORY[0x1E4F14490], 1uLL, 0, this[11]);
  uint64_t v3 = this[32];
  this[32] = v2;
  if (v3)
  {
    dispatch_release(v3);
    int v2 = this[32];
  }
  dispatch_time_t v4 = dispatch_time(0, 5120000000);
  dispatch_source_set_timer(v2, v4, 0xFFFFFFFFFFFFFFFFLL, 0xBEBC200uLL);
  uint64_t v5 = (std::__shared_weak_count *)this[10];
  if (!v5 || (v6 = this[9], (uint64_t v7 = std::__shared_weak_count::lock(v5)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v8 = v7;
  p_shared_weak_owners = &v7->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v8);
  }
  unsigned int v10 = this[32];
  handler[0] = MEMORY[0x1E4F143A8];
  handler[1] = 1174405120;
  handler[2] = ___ZN7antenna7Service8Internal31startTxMotionCallbackTimer_syncEv_block_invoke;
  handler[3] = &__block_descriptor_tmp_41;
  handler[4] = this;
  handler[5] = v6;
  int v12 = v8;
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  dispatch_source_set_event_handler(v10, handler);
  dispatch_activate(this[32]);
  if (v12) {
    std::__shared_weak_count::__release_weak(v12);
  }
  std::__shared_weak_count::__release_weak(v8);
}

void ___ZN7antenna7Service8Internal31startTxMotionCallbackTimer_syncEv_block_invoke(void *a1)
{
  int v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    uint64_t v3 = (antenna::Service::Internal *)a1[4];
    dispatch_time_t v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      uint64_t v5 = v4;
      if (a1[5]) {
        antenna::Service::Internal::handleMotionCallbackTimerExpiry_sync(v3);
      }
      if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void sub_1C590A260(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void antenna::Service::Internal::handleMotionCallbackTimerExpiry_sync(antenna::Service::Internal *this)
{
  int v2 = *((void *)this + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v7 = 0;
    _os_log_impl(&dword_1C5767000, v2, OS_LOG_TYPE_DEFAULT, "#I WARNING - Motion callback missing", v7, 2u);
  }
  uint64_t v3 = *((void *)this + 32);
  if (v3)
  {
    dispatch_source_cancel(v3);
    dispatch_time_t v4 = *((void *)this + 32);
    *((void *)this + 32) = 0;
    if (v4) {
      dispatch_release(v4);
    }
  }
  ++*((void *)this + 33);
  *((_DWORD *)this + 63) = 1;
  antenna::Service::Internal::startTxMotionCallbackTimer_sync(this);
  if (*((unsigned char *)this + 153))
  {
    if (*((unsigned char *)this + 248))
    {
      uint64_t v5 = *((void *)this + 45);
      if (!v5) {
        goto LABEL_13;
      }
    }
    else
    {
      antenna::Service::Internal::startMotionDetection_sync(this);
      uint64_t v5 = *((void *)this + 45);
      if (!v5)
      {
LABEL_13:
        antenna::Service::Internal::sendTxPowerCappingIPadMode_sync(this);
        antenna::Service::Internal::startTxPowerCappingIPadWithMotionTimer_sync((dispatch_queue_t *)this);
        return;
      }
    }
    dispatch_source_cancel(v5);
    dispatch_queue_t v6 = *((void *)this + 45);
    *((void *)this + 45) = 0;
    if (v6) {
      dispatch_release(v6);
    }
    goto LABEL_13;
  }
}

uint64_t __copy_helper_block_e8_40c50_ZTSNSt3__18weak_ptrIN7antenna7Service8InternalEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c50_ZTSNSt3__18weak_ptrIN7antenna7Service8InternalEEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void antenna::Service::Internal::setMotionThresholds(CMOnBodyDelegate **a1, ctu **a2)
{
  if (a1[29] && CMOnBodyDelegate::isSupported((CMOnBodyDelegate *)a1))
  {
    ctu::xpc_to_cf((uint64_t *)&cf, *a2, v4);
    CFTypeRef v5 = cf;
    if (cf && (CFTypeID v6 = CFGetTypeID(cf), v6 == CFDictionaryGetTypeID()))
    {
      CFTypeRef v9 = v5;
      CFRetain(v5);
      CFTypeRef v7 = cf;
      if (!cf)
      {
LABEL_9:
        CMOnBodyDelegate::setThresholds(a1[29], v5);
        if (v5) {
          CFRelease(v5);
        }
        return;
      }
    }
    else
    {
      CFTypeRef v5 = 0;
      CFTypeRef v9 = 0;
      CFTypeRef v7 = cf;
      if (!cf) {
        goto LABEL_9;
      }
    }
    CFRelease(v7);
    goto LABEL_9;
  }
}

void sub_1C590A44C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void sub_1C590A460(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
}

void antenna::Service::Internal::startMotionDetection_sync(antenna::Service::Internal *this)
{
  uint64_t v2 = *((void *)this + 32);
  if (v2)
  {
    dispatch_source_cancel(v2);
    uint64_t v2 = *((void *)this + 32);
    *((void *)this + 32) = 0;
    if (v2) {
      dispatch_release(v2);
    }
  }
  if (*((unsigned char *)this + 216))
  {
    if (CMOnBodyDelegate::isSupported((CMOnBodyDelegate *)v2))
    {
      if (!*((unsigned char *)this + 248))
      {
        uint64_t v3 = (CMOnBodyDelegate *)*((void *)this + 29);
        if (v3)
        {
          *((unsigned char *)this + 248) = 1;
          *((_DWORD *)this + 63) = 1;
          CMOnBodyDelegate::startMotionDetection(v3);
          antenna::Service::Internal::startTxMotionCallbackTimer_sync((dispatch_queue_t *)this);
          dispatch_time_t v4 = *((void *)this + 5);
          if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)CFTypeRef v5 = 0;
            _os_log_debug_impl(&dword_1C5767000, v4, OS_LOG_TYPE_DEBUG, "#D Motion Detection has been started!", v5, 2u);
          }
        }
      }
    }
  }
}

void antenna::Service::Internal::stopMotionDetection_sync(antenna::Service::Internal *this)
{
  uint64_t v2 = *((void *)this + 32);
  if (v2)
  {
    dispatch_source_cancel(v2);
    uint64_t v2 = *((void *)this + 32);
    *((void *)this + 32) = 0;
    if (v2) {
      dispatch_release(v2);
    }
  }
  if (*((unsigned char *)this + 248)
    && *((void *)this + 29)
    && CMOnBodyDelegate::isSupported((CMOnBodyDelegate *)v2)
    && (*((unsigned char *)this + 248) = 0,
        CMOnBodyDelegate::stopMotionDetection(*((CMOnBodyDelegate **)this + 29)),
        *((void *)this + 33) = 0,
        uint64_t v3 = *((void *)this + 5),
        os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG)))
  {
    *(_WORD *)dispatch_time_t v4 = 0;
    _os_log_debug_impl(&dword_1C5767000, v3, OS_LOG_TYPE_DEBUG, "#D Motion Detection has been stopped!", v4, 2u);
    *((_DWORD *)this + 63) = 1;
  }
  else
  {
    *((_DWORD *)this + 63) = 1;
  }
}

void antenna::Service::Internal::motionDetectCallback_sync(uint64_t a1, int a2)
{
  if (!*(unsigned char *)(a1 + 248)) {
    return;
  }
  dispatch_time_t v4 = *(NSObject **)(a1 + 256);
  if (v4)
  {
    dispatch_source_cancel(v4);
    CFTypeRef v5 = *(NSObject **)(a1 + 256);
    *(void *)(a1 + 256) = 0;
    if (v5) {
      dispatch_release(v5);
    }
  }
  if ((TelephonyUtilIsInternalBuild() & 1) != 0 || TelephonyUtilIsCarrierBuild())
  {
    int v6 = *(_DWORD *)(a1 + 208);
    if (v6 != 4)
    {
LABEL_10:
      if (!*(unsigned char *)(a1 + 152)) {
        goto LABEL_23;
      }
      goto LABEL_11;
    }
  }
  if (antenna::Service::Internal::isAudioReceiverOutputOnlyActive((antenna::Service::Internal *)a1)
    || antenna::Service::Internal::isAudioAnyOutputActive((antenna::Service::Internal *)a1) && !*(_DWORD *)(a1 + 252)
    || *(unsigned char *)(a1 + 155)
    && !antenna::Service::Internal::isAudioAnyOutputActive((antenna::Service::Internal *)a1)
    && !*(_DWORD *)(a1 + 252))
  {
    int v6 = 2;
    goto LABEL_10;
  }
  int v6 = 3;
  if (!*(unsigned char *)(a1 + 152)) {
    goto LABEL_23;
  }
LABEL_11:
  if ((TelephonyUtilIsInternalBuild() & 1) != 0 || TelephonyUtilIsCarrierBuild())
  {
    int v6 = *(_DWORD *)(a1 + 208);
    if (v6 != 4)
    {
LABEL_23:
      CFTypeRef v7 = *(NSObject **)(a1 + 40);
      BOOL v8 = os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG);
      if (a2) {
        goto LABEL_24;
      }
      goto LABEL_33;
    }
  }
  if (antenna::Service::Internal::isAudioReceiverOutputOnlyActive((antenna::Service::Internal *)a1)
    || antenna::Service::Internal::isAudioAnyOutputActive((antenna::Service::Internal *)a1) && !*(_DWORD *)(a1 + 252)
    || *(unsigned char *)(a1 + 155)
    && !antenna::Service::Internal::isAudioAnyOutputActive((antenna::Service::Internal *)a1)
    && !*(_DWORD *)(a1 + 252))
  {
    int v6 = 2;
    CFTypeRef v7 = *(NSObject **)(a1 + 40);
    BOOL v8 = os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG);
    if (a2)
    {
LABEL_24:
      if (!v8)
      {
        int v9 = 1;
        if (!*(unsigned char *)(a1 + 152)) {
          goto LABEL_46;
        }
LABEL_35:
        *(unsigned char *)(a1 + 333) = 0;
        if (*(unsigned char *)(a1 + 332))
        {
          if ((TelephonyUtilIsInternalBuild() & 1) == 0 && !TelephonyUtilIsCarrierBuild()
            || (int v10 = *(_DWORD *)(a1 + 208), v10 == 4))
          {
            if (!antenna::Service::Internal::isAudioReceiverOutputOnlyActive((antenna::Service::Internal *)a1)
              && (!antenna::Service::Internal::isAudioAnyOutputActive((antenna::Service::Internal *)a1)
               || *(_DWORD *)(a1 + 252))
              && (!*(unsigned char *)(a1 + 155)
               || antenna::Service::Internal::isAudioAnyOutputActive((antenna::Service::Internal *)a1)
               || *(_DWORD *)(a1 + 252)))
            {
              if (v6 == 3) {
                goto LABEL_43;
              }
              goto LABEL_42;
            }
            int v10 = 2;
          }
          if (v10 != v6) {
LABEL_42:
          }
            *(unsigned char *)(a1 + 333) = 1;
        }
LABEL_43:
        if (capabilities::txpower::operator&() && v9 != *(_DWORD *)(a1 + 252)) {
          antenna::Service::Internal::processHandDetection_sync((antenna::Service::Internal *)a1);
        }
        goto LABEL_46;
      }
      *(_WORD *)int v13 = 0;
      _os_log_debug_impl(&dword_1C5767000, v7, OS_LOG_TYPE_DEBUG, "#D Motion Other Position Detected.", v13, 2u);
      int v9 = 1;
      if (*(unsigned char *)(a1 + 152)) {
        goto LABEL_35;
      }
      goto LABEL_46;
    }
  }
  else
  {
    int v6 = 3;
    CFTypeRef v7 = *(NSObject **)(a1 + 40);
    BOOL v8 = os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG);
    if (a2) {
      goto LABEL_24;
    }
  }
LABEL_33:
  if (!v8)
  {
    int v9 = 0;
    if (!*(unsigned char *)(a1 + 152)) {
      goto LABEL_46;
    }
    goto LABEL_35;
  }
  *(_WORD *)long long buf = 0;
  _os_log_debug_impl(&dword_1C5767000, v7, OS_LOG_TYPE_DEBUG, "#D Motion On Table Detected.", buf, 2u);
  int v9 = 0;
  if (*(unsigned char *)(a1 + 152)) {
    goto LABEL_35;
  }
LABEL_46:
  if (*(unsigned char *)(a1 + 153) && *(_DWORD *)(a1 + 252) != v9)
  {
    if (!*(unsigned char *)(a1 + 248)) {
      antenna::Service::Internal::startMotionDetection_sync((antenna::Service::Internal *)a1);
    }
    int v11 = *(NSObject **)(a1 + 360);
    if (v11)
    {
      dispatch_source_cancel(v11);
      int v12 = *(NSObject **)(a1 + 360);
      *(void *)(a1 + 360) = 0;
      if (v12) {
        dispatch_release(v12);
      }
    }
    antenna::Service::Internal::sendTxPowerCappingIPadMode_sync((antenna::Service::Internal *)a1);
    antenna::Service::Internal::startTxPowerCappingIPadWithMotionTimer_sync((dispatch_queue_t *)a1);
  }
  *(_DWORD *)(a1 + 252) = v9;
  antenna::Service::Internal::startTxMotionCallbackTimer_sync((dispatch_queue_t *)a1);
}

void antenna::Service::Internal::sendMotionHandDetectionState_sync(void *a1, int a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
  if (v4 || (xpc_object_t v4 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C8792D30](v4) == MEMORY[0x1E4F14590])
    {
      xpc_retain(v4);
      xpc_object_t v5 = v4;
    }
    else
    {
      xpc_object_t v5 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v5 = xpc_null_create();
    xpc_object_t v4 = 0;
  }
  xpc_release(v4);
  xpc_object_t v6 = xpc_string_create((const char *)*MEMORY[0x1E4FB9D60]);
  if (!v6) {
    xpc_object_t v6 = xpc_null_create();
  }
  xpc_dictionary_set_value(v5, (const char *)*MEMORY[0x1E4FB9C68], v6);
  xpc_object_t v7 = xpc_null_create();
  xpc_release(v6);
  xpc_release(v7);
  xpc_object_t v8 = xpc_int64_create((unsigned __int16)a2);
  if (!v8) {
    xpc_object_t v8 = xpc_null_create();
  }
  xpc_dictionary_set_value(v5, (const char *)*MEMORY[0x1E4FB9D18], v8);
  xpc_object_t v9 = xpc_null_create();
  xpc_release(v8);
  xpc_release(v9);
  xpc_object_t object = v5;
  if (v5) {
    xpc_retain(v5);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  v11[0] = 0;
  v11[1] = 0;
  antenna::Service::Internal::performCommandDriver_sync(a1, &object, (uint64_t)v11);
  xpc_release(object);
  xpc_object_t object = 0;
  int v10 = a1[5];
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 67109120;
    int v14 = a2;
    _os_log_impl(&dword_1C5767000, v10, OS_LOG_TYPE_DEFAULT, "#I Sent Hand Detection: %d", buf, 8u);
  }
  xpc_release(v5);
}

void sub_1C590AB00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, xpc_object_t object)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

BOOL antenna::Service::Internal::isHandednessCondition(antenna::Service::Internal *this)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *((void *)this + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = *((unsigned __int8 *)this + 216);
    xpc_object_t v4 = (char *)*((void *)this + 36);
    if (v4)
    {
      while (1)
      {
        while (1)
        {
          xpc_object_t v6 = (uint64_t **)v4;
          int v7 = *((_DWORD *)v4 + 7);
          if (v7 < 1) {
            break;
          }
          xpc_object_t v4 = (char *)*v6;
          xpc_object_t v5 = v6;
          if (!*v6) {
            goto LABEL_9;
          }
        }
        if ((v7 & 0x80000000) == 0) {
          break;
        }
        xpc_object_t v4 = (char *)v6[1];
        if (!v4)
        {
          xpc_object_t v5 = v6 + 1;
          goto LABEL_9;
        }
      }
    }
    else
    {
      xpc_object_t v5 = (uint64_t **)((char *)this + 288);
      xpc_object_t v6 = (uint64_t **)((char *)this + 288);
LABEL_9:
      xpc_object_t v8 = (char *)v6;
      xpc_object_t v6 = (uint64_t **)operator new(0x28uLL);
      *((_DWORD *)v6 + 7) = 0;
      *((unsigned char *)v6 + 32) = 0;
      *xpc_object_t v6 = 0;
      v6[1] = 0;
      void v6[2] = (uint64_t *)v8;
      *xpc_object_t v5 = (uint64_t *)v6;
      uint64_t v9 = **((void **)this + 35);
      int v10 = (uint64_t *)v6;
      if (v9)
      {
        *((void *)this + 35) = v9;
        int v10 = *v5;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 36), v10);
      ++*((void *)this + 37);
    }
    int v11 = *((unsigned __int8 *)v6 + 32);
    int v12 = *((_DWORD *)this + 63);
    int v13 = *((unsigned __int8 *)this + 560);
    v22[0] = 67109888;
    v22[1] = v3;
    __int16 v23 = 1024;
    int v24 = v11;
    __int16 v25 = 1024;
    int v26 = v12;
    __int16 v27 = 1024;
    int v28 = v13;
    _os_log_impl(&dword_1C5767000, v2, OS_LOG_TYPE_DEFAULT, "#I HandedCondition: fTxPowerTransmitStarted: %u, isAudioReceiverOutputActive(): %u, fMotionState: %u, fHandDetectionProxCovered: %u", (uint8_t *)v22, 0x1Au);
  }
  if (!*((unsigned char *)this + 216)) {
    return 0;
  }
  int v14 = (char *)*((void *)this + 36);
  if (v14)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v16 = (uint64_t **)v14;
        int v17 = *((_DWORD *)v14 + 7);
        if (v17 < 1) {
          break;
        }
        int v14 = (char *)*v16;
        uint64_t v15 = v16;
        if (!*v16) {
          goto LABEL_21;
        }
      }
      if ((v17 & 0x80000000) == 0) {
        break;
      }
      int v14 = (char *)v16[1];
      if (!v14)
      {
        uint64_t v15 = v16 + 1;
        goto LABEL_21;
      }
    }
    if (!*((unsigned char *)v16 + 32)) {
      return 0;
    }
  }
  else
  {
    uint64_t v15 = (uint64_t **)((char *)this + 288);
    uint64_t v16 = (uint64_t **)((char *)this + 288);
LABEL_21:
    xpc_object_t v18 = operator new(0x28uLL);
    v18[7] = 0;
    *((unsigned char *)v18 + 32) = 0;
    *(void *)xpc_object_t v18 = 0;
    *((void *)v18 + 1) = 0;
    *((void *)v18 + 2) = v16;
    *uint64_t v15 = (uint64_t *)v18;
    uint64_t v19 = **((void **)this + 35);
    int v20 = (uint64_t *)v18;
    if (v19)
    {
      *((void *)this + 35) = v19;
      int v20 = *v15;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 36), v20);
    ++*((void *)this + 37);
    if (!*((unsigned char *)v18 + 32)) {
      return 0;
    }
  }
  return *((_DWORD *)this + 63) && *((unsigned char *)this + 560);
}

void antenna::Service::Internal::handDetectCallback(void *a1, int a2)
{
  int v3 = (std::__shared_weak_count *)a1[10];
  if (!v3 || (uint64_t v5 = a1[9], (v6 = std::__shared_weak_count::lock(v3)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  int v7 = v6;
  xpc_object_t v8 = operator new(0x10uLL);
  *(void *)xpc_object_t v8 = a1;
  void v8[2] = a2;
  uint64_t v9 = a1[11];
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  int v10 = operator new(0x18uLL);
  void *v10 = v8;
  v10[1] = v5;
  v10[2] = v7;
  dispatch_async_f(v9, v10, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<antenna::Service::Internal>::execute_wrapped<antenna::Service::Internal::handDetectCallback(CMHandDetectionDelegate::CMHandDetectionResult)::$_0>(antenna::Service::Internal::handDetectCallback(CMHandDetectionDelegate::CMHandDetectionResult)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<antenna::Service::Internal::handDetectCallback(CMHandDetectionDelegate::CMHandDetectionResult)::$_0,dispatch_queue_s *::default_delete<antenna::Service::Internal::handDetectCallback(CMHandDetectionDelegate::CMHandDetectionResult)::$_0>>)::{lambda(void *)#1}::__invoke);
  if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void antenna::Service::Internal::stopHandDetection_sync(antenna::Service::Internal *this)
{
  pthread_mutex_lock(&ctu::Singleton<Capabilities,Capabilities,ctu::PthreadMutexGuardPolicy<Capabilities>>::sInstance);
  uint64_t v2 = (uint64_t *)qword_1EBBDD070;
  if (!qword_1EBBDD070)
  {
    int v3 = operator new(1uLL);
    xpc_object_t v4 = operator new(0x20uLL);
    void *v4 = &unk_1F20F7BD0;
    v4[1] = 0;
    _DWORD v4[2] = 0;
    v4[3] = v3;
    uint64_t v5 = (std::__shared_weak_count *)off_1EBBDD078;
    qword_1EBBDD070 = (uint64_t)v3;
    off_1EBBDD078 = v4;
    if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    uint64_t v2 = (uint64_t *)qword_1EBBDD070;
  }
  xpc_object_t v6 = (std::__shared_weak_count *)off_1EBBDD078;
  v9[0] = v2;
  v9[1] = (uint64_t *)off_1EBBDD078;
  if (off_1EBBDD078) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)off_1EBBDD078 + 1, 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<Capabilities,Capabilities,ctu::PthreadMutexGuardPolicy<Capabilities>>::sInstance);
  if (Capabilities::isCMHandDetectionSupported((Capabilities *)v2))
  {
    uint64_t v7 = *((void *)this + 64);
    if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
    if (v7)
    {
      v9[0] = **((uint64_t ***)this + 64);
      ctu::SharedSynchronizable<CMHandDetectionHandler>::execute_wrapped<CMHandDetectionHandler::stop(void)::{lambda(void)#1}>(v9[0], v9);
      xpc_object_t v8 = *((void *)this + 5);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
      {
        LOWORD(v9[0]) = 0;
        _os_log_debug_impl(&dword_1C5767000, v8, OS_LOG_TYPE_DEBUG, "#D Hand Detection Stopped!", (uint8_t *)v9, 2u);
      }
    }
  }
  else if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
}

void sub_1C590B0C4(_Unwind_Exception *a1)
{
  operator delete(v1);
  pthread_mutex_unlock(&ctu::Singleton<Capabilities,Capabilities,ctu::PthreadMutexGuardPolicy<Capabilities>>::sInstance);
  _Unwind_Resume(a1);
}

void sub_1C590B0F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void antenna::Service::Internal::stopTxPowerCappingIPhoneTimer_sync(antenna::Service::Internal *this)
{
  uint64_t v2 = *((void *)this + 25);
  if (v2)
  {
    dispatch_source_cancel(v2);
    int v3 = *((void *)this + 25);
    *((void *)this + 25) = 0;
    if (v3)
    {
      dispatch_release(v3);
    }
  }
}

uint64_t antenna::Service::Internal::getTxPowerCappingForWatch(antenna::Service::Internal *this)
{
  if ((TelephonyUtilIsInternalBuild() & 1) == 0 && !TelephonyUtilIsCarrierBuild()
    || (uint64_t result = *((unsigned int *)this + 52), result == 4))
  {
    int v3 = (char *)*((void *)this + 36);
    if (v3)
    {
      while (1)
      {
        while (1)
        {
          uint64_t v5 = (uint64_t **)v3;
          int v6 = *((_DWORD *)v3 + 7);
          if (v6 < 4) {
            break;
          }
          int v3 = (char *)*v5;
          xpc_object_t v4 = v5;
          if (!*v5) {
            goto LABEL_11;
          }
        }
        if (v6 == 3) {
          break;
        }
        int v3 = (char *)v5[1];
        if (!v3)
        {
          xpc_object_t v4 = v5 + 1;
          goto LABEL_11;
        }
      }
    }
    else
    {
      xpc_object_t v4 = (uint64_t **)((char *)this + 288);
      uint64_t v5 = (uint64_t **)((char *)this + 288);
LABEL_11:
      uint64_t v7 = (char *)v5;
      uint64_t v5 = (uint64_t **)operator new(0x28uLL);
      *((_DWORD *)v5 + 7) = 3;
      *((unsigned char *)v5 + 32) = 0;
      *uint64_t v5 = 0;
      v5[1] = 0;
      v5[2] = (uint64_t *)v7;
      void *v4 = (uint64_t *)v5;
      uint64_t v8 = **((void **)this + 35);
      uint64_t v9 = (uint64_t *)v5;
      if (v8)
      {
        *((void *)this + 35) = v8;
        uint64_t v9 = *v4;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 36), v9);
      ++*((void *)this + 37);
    }
    uint64_t result = 2;
    if (*((unsigned char *)v5 + 32))
    {
      if (*((unsigned char *)this + 165)) {
        return 3;
      }
      else {
        return 2;
      }
    }
  }
  return result;
}

std::string *antenna::Service::Internal::getTxPowerCappingIPhoneModeString_sync@<X0>(_DWORD *a1@<X1>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  int v3 = *a1 - 1;
  if (v3 < 4) {
    return std::string::__assign_external(a2, **((const std::string::value_type ***)&unk_1E6518150 + v3));
  }
  return result;
}

void sub_1C590B2A0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t antenna::Service::Internal::getTxPowerCappingAntennaFreeSpaceMode(antenna::Service::Internal *this)
{
  if ((TelephonyUtilIsInternalBuild() & 1) == 0 && !TelephonyUtilIsCarrierBuild()) {
    return antenna::Service::Internal::isAudioReceiverOutputOnlyActive(this) || *((_DWORD *)this + 63) != 0;
  }
  uint64_t result = *((unsigned int *)this + 53);
  if (result == 255) {
    return antenna::Service::Internal::isAudioReceiverOutputOnlyActive(this) || *((_DWORD *)this + 63) != 0;
  }
  return result;
}

void antenna::Service::Internal::startTxPowerCappingIPhoneTimer_sync(antenna::Service::Internal *this)
{
  uint64_t v2 = *((void *)this + 25);
  if (v2)
  {
    dispatch_source_cancel(v2);
    int v3 = *((void *)this + 25);
    *((void *)this + 25) = 0;
    if (v3) {
      dispatch_release(v3);
    }
  }
  xpc_object_t v4 = dispatch_source_create(MEMORY[0x1E4F14490], 1uLL, 0, *((dispatch_queue_t *)this + 11));
  uint64_t v5 = *((void *)this + 25);
  *((void *)this + 25) = v4;
  if (v5)
  {
    dispatch_release(v5);
    xpc_object_t v4 = *((void *)this + 25);
  }
  dispatch_time_t v6 = dispatch_time(0, 2000000000);
  dispatch_source_set_timer(v4, v6, 0xFFFFFFFFFFFFFFFFLL, 0xBEBC200uLL);
  uint64_t v7 = (std::__shared_weak_count *)*((void *)this + 10);
  if (!v7 || (uint64_t v8 = *((void *)this + 9), (v9 = std::__shared_weak_count::lock(v7)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  int v10 = v9;
  p_shared_weak_owners = &v9->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v10);
  }
  int v12 = *((void *)this + 25);
  handler[0] = MEMORY[0x1E4F143A8];
  handler[1] = 1174405120;
  handler[2] = ___ZN7antenna7Service8Internal35startTxPowerCappingIPhoneTimer_syncEv_block_invoke;
  handler[3] = &__block_descriptor_tmp_6_11;
  handler[4] = this;
  handler[5] = v8;
  int v14 = v10;
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  dispatch_source_set_event_handler(v12, handler);
  dispatch_activate(*((dispatch_object_t *)this + 25));
  if (v14) {
    std::__shared_weak_count::__release_weak(v14);
  }
  std::__shared_weak_count::__release_weak(v10);
}

void ___ZN7antenna7Service8Internal35startTxPowerCappingIPhoneTimer_syncEv_block_invoke(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    int v3 = (antenna::Service::Internal *)a1[4];
    xpc_object_t v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      uint64_t v5 = v4;
      if (a1[5] && *((unsigned char *)v3 + 216)) {
        antenna::Service::Internal::startTxPowerCappingIPhone_sync(v3);
      }
      if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void sub_1C590B570(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void antenna::Service::Internal::handleTxPowerCappingIPhoneTimerExpiry_sync(antenna::Service::Internal *this)
{
  if (*((unsigned char *)this + 216)) {
    antenna::Service::Internal::startTxPowerCappingIPhone_sync(this);
  }
}

void antenna::Service::Internal::setTxPowerCappingIPhoneMode_sync(antenna::Service::Internal *this, xpc_object_t *a2)
{
  memset(__s1, 170, sizeof(__s1));
  xpc_object_t value = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E4F4D290]);
  xpc_object_t object = value;
  if (value) {
    xpc_retain(value);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  xpc::dyn_cast_or_default(__s1, (xpc *)&object, (const object *)"", v4);
  xpc_release(object);
  if (__s1[2] >= 0) {
    uint64_t v5 = (uint64_t *)((char *)__s1 + HIBYTE(__s1[2]));
  }
  else {
    uint64_t v5 = (uint64_t *)(__s1[0] + __s1[1]);
  }
  if (__s1[2] >= 0) {
    dispatch_time_t v6 = __s1;
  }
  else {
    dispatch_time_t v6 = (uint64_t *)__s1[0];
  }
  for (; v6 != v5; dispatch_time_t v6 = (uint64_t *)((char *)v6 + 1))
    *(unsigned char *)dispatch_time_t v6 = __toupper(*(char *)v6);
  if ((TelephonyUtilIsInternalBuild() & 1) == 0 && !TelephonyUtilIsCarrierBuild()
    || (int v7 = *((_DWORD *)this + 52), v7 == 4))
  {
    if (antenna::Service::Internal::isAudioReceiverOutputOnlyActive(this)
      || antenna::Service::Internal::isAudioAnyOutputActive(this) && !*((_DWORD *)this + 63)
      || *((unsigned char *)this + 155) && !antenna::Service::Internal::isAudioAnyOutputActive(this) && !*((_DWORD *)this + 63))
    {
      int v7 = 2;
    }
    else
    {
      int v7 = 3;
    }
  }
  size_t v8 = strlen((const char *)*MEMORY[0x1E4F4CAC8]);
  unint64_t v9 = v8;
  unint64_t v10 = HIBYTE(__s1[2]);
  if ((SHIBYTE(__s1[2]) & 0x80000000) == 0)
  {
    if (v8 != -1)
    {
      int v11 = __s1;
      unint64_t v12 = HIBYTE(__s1[2]);
      goto LABEL_28;
    }
LABEL_96:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v8 == -1) {
    goto LABEL_96;
  }
  int v11 = (uint64_t *)__s1[0];
  unint64_t v12 = __s1[1];
LABEL_28:
  if (v12 >= v9) {
    size_t v13 = v9;
  }
  else {
    size_t v13 = v12;
  }
  if (!memcmp(v11, (const void *)*MEMORY[0x1E4F4CAC8], v13) && v12 == v9)
  {
    int v20 = 1;
    goto LABEL_78;
  }
  uint64_t v15 = (const void *)*MEMORY[0x1E4F4D2C8];
  size_t v16 = strlen((const char *)*MEMORY[0x1E4F4D2C8]);
  size_t v17 = v16;
  if ((v10 & 0x80) != 0)
  {
    if (v16 != -1)
    {
      uint64_t v18 = __s1[1];
      if (__s1[1] >= v16) {
        size_t v21 = v16;
      }
      else {
        size_t v21 = __s1[1];
      }
      if (memcmp((const void *)__s1[0], v15, v21)) {
        goto LABEL_50;
      }
      goto LABEL_48;
    }
LABEL_97:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v16 == -1) {
    goto LABEL_97;
  }
  uint64_t v18 = v10;
  if (v10 >= v16) {
    size_t v19 = v16;
  }
  else {
    size_t v19 = v10;
  }
  if (memcmp(__s1, v15, v19)) {
    goto LABEL_50;
  }
LABEL_48:
  if (v18 == v17)
  {
    int v20 = 4;
    goto LABEL_78;
  }
LABEL_50:
  uint64_t v22 = (const void *)*MEMORY[0x1E4F4CBB8];
  size_t v23 = strlen((const char *)*MEMORY[0x1E4F4CBB8]);
  size_t v24 = v23;
  if ((v10 & 0x80) == 0)
  {
    if (v23 != -1)
    {
      uint64_t v25 = v10;
      if (v10 >= v23) {
        size_t v26 = v23;
      }
      else {
        size_t v26 = v10;
      }
      if (memcmp(__s1, v22, v26)) {
        goto LABEL_64;
      }
      goto LABEL_62;
    }
LABEL_98:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v23 == -1) {
    goto LABEL_98;
  }
  uint64_t v25 = __s1[1];
  if (__s1[1] >= v23) {
    size_t v27 = v23;
  }
  else {
    size_t v27 = __s1[1];
  }
  if (!memcmp((const void *)__s1[0], v22, v27))
  {
LABEL_62:
    if (v25 != v24) {
      goto LABEL_64;
    }
    int v20 = 3;
LABEL_78:
    *((_DWORD *)this + 52) = v20;
    goto LABEL_79;
  }
LABEL_64:
  int v28 = (const void *)*MEMORY[0x1E4F4CBC0];
  size_t v29 = strlen((const char *)*MEMORY[0x1E4F4CBC0]);
  size_t v30 = v29;
  if ((v10 & 0x80) == 0)
  {
    if (v29 != -1)
    {
      if (v10 >= v29) {
        size_t v31 = v29;
      }
      else {
        size_t v31 = v10;
      }
      if (memcmp(__s1, v28, v31)) {
        goto LABEL_79;
      }
      goto LABEL_76;
    }
LABEL_99:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v29 == -1) {
    goto LABEL_99;
  }
  unint64_t v10 = __s1[1];
  if (__s1[1] >= v29) {
    size_t v32 = v29;
  }
  else {
    size_t v32 = __s1[1];
  }
  if (!memcmp((const void *)__s1[0], v28, v32))
  {
LABEL_76:
    if (v10 != v30) {
      goto LABEL_79;
    }
    int v20 = 2;
    goto LABEL_78;
  }
LABEL_79:
  *((unsigned char *)this + 333) = 0;
  if (!*((unsigned char *)this + 332)) {
    goto LABEL_87;
  }
  if ((TelephonyUtilIsInternalBuild() & 1) != 0 || TelephonyUtilIsCarrierBuild())
  {
    int v33 = *((_DWORD *)this + 52);
    if (v33 != 4)
    {
LABEL_85:
      if (v33 == v7) {
        goto LABEL_87;
      }
      goto LABEL_86;
    }
  }
  if (antenna::Service::Internal::isAudioReceiverOutputOnlyActive(this)
    || antenna::Service::Internal::isAudioAnyOutputActive(this) && !*((_DWORD *)this + 63)
    || *((unsigned char *)this + 155) && !antenna::Service::Internal::isAudioAnyOutputActive(this) && !*((_DWORD *)this + 63))
  {
    int v33 = 2;
    goto LABEL_85;
  }
  if (v7 != 3) {
LABEL_86:
  }
    *((unsigned char *)this + 333) = 1;
LABEL_87:
  if (SHIBYTE(__s1[2]) < 0) {
    operator delete((void *)__s1[0]);
  }
}

void sub_1C590B96C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
}

void antenna::Service::Internal::copyTxPowerCappingIPhoneMode_sync(antenna::Service::Internal *this@<X0>, xpc_object_t *a2@<X8>)
{
  *a2 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v5 = v4;
  uint64_t v6 = MEMORY[0x1E4F14590];
  if (v4)
  {
    *a2 = v4;
  }
  else
  {
    xpc_object_t v5 = xpc_null_create();
    *a2 = v5;
    if (!v5)
    {
      xpc_object_t v7 = xpc_null_create();
      xpc_object_t v5 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1C8792D30](v5) == v6)
  {
    xpc_retain(v5);
    goto LABEL_9;
  }
  xpc_object_t v7 = xpc_null_create();
LABEL_8:
  *a2 = v7;
LABEL_9:
  xpc_release(v5);
  xpc_object_t v8 = *a2;
  if (MEMORY[0x1C8792D30](*a2) == v6)
  {
    memset(&v25, 0, sizeof(v25));
    int v9 = *((_DWORD *)this + 52) - 1;
    if (v9 < 4) {
      std::string::__assign_external(&v25, **((const std::string::value_type ***)&unk_1E6518150 + v9));
    }
    if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unint64_t v10 = &v25;
    }
    else {
      unint64_t v10 = (std::string *)v25.__r_.__value_.__r.__words[0];
    }
    xpc_object_t v11 = xpc_string_create((const char *)v10);
    if (!v11) {
      xpc_object_t v11 = xpc_null_create();
    }
    xpc_dictionary_set_value(v8, (const char *)*MEMORY[0x1E4F4D290], v11);
    xpc_object_t v12 = xpc_null_create();
    xpc_release(v11);
    xpc_release(v12);
    if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v25.__r_.__value_.__l.__data_);
    }
    if (((TelephonyUtilIsInternalBuild() & 1) != 0 || TelephonyUtilIsCarrierBuild())
      && *((unsigned char *)this + 152))
    {
      xpc_object_t v13 = xpc_dictionary_create(0, 0, 0);
      if (v13 || (xpc_object_t v13 = xpc_null_create()) != 0)
      {
        if (MEMORY[0x1C8792D30](v13) == v6)
        {
          xpc_retain(v13);
          xpc_object_t v14 = v13;
        }
        else
        {
          xpc_object_t v14 = xpc_null_create();
        }
      }
      else
      {
        xpc_object_t v14 = xpc_null_create();
        xpc_object_t v13 = 0;
      }
      xpc_release(v13);
      if (MEMORY[0x1C8792D30](v14) == v6)
      {
        xpc_object_t v15 = xpc_string_create((const char *)*MEMORY[0x1E4F4CAC8]);
        if (!v15) {
          xpc_object_t v15 = xpc_null_create();
        }
        xpc_dictionary_set_value(v14, (const char *)*MEMORY[0x1E4F4CF38], v15);
        xpc_object_t v16 = xpc_null_create();
        xpc_release(v15);
        xpc_release(v16);
        xpc_object_t v17 = xpc_string_create((const char *)*MEMORY[0x1E4F4D2C8]);
        if (!v17) {
          xpc_object_t v17 = xpc_null_create();
        }
        xpc_dictionary_set_value(v14, (const char *)*MEMORY[0x1E4F4CFB0], v17);
        xpc_object_t v18 = xpc_null_create();
        xpc_release(v17);
        xpc_release(v18);
        xpc_object_t v19 = xpc_string_create((const char *)*MEMORY[0x1E4F4CBB8]);
        if (!v19) {
          xpc_object_t v19 = xpc_null_create();
        }
        xpc_dictionary_set_value(v14, (const char *)*MEMORY[0x1E4F4CFB8], v19);
        xpc_object_t v20 = xpc_null_create();
        xpc_release(v19);
        xpc_release(v20);
        xpc_object_t v21 = xpc_string_create((const char *)*MEMORY[0x1E4F4CBC0]);
        if (!v21) {
          xpc_object_t v21 = xpc_null_create();
        }
        xpc_dictionary_set_value(v14, (const char *)*MEMORY[0x1E4F4CFC0], v21);
        xpc_object_t v22 = xpc_null_create();
        xpc_release(v21);
        xpc_release(v22);
        if (v14)
        {
          xpc_retain(v14);
          xpc_object_t v23 = v14;
        }
        else
        {
          xpc_object_t v23 = xpc_null_create();
        }
        xpc_dictionary_set_value(*a2, (const char *)*MEMORY[0x1E4F4D298], v23);
        xpc_object_t v24 = xpc_null_create();
        xpc_release(v23);
        xpc_release(v24);
      }
      xpc_release(v14);
    }
  }
}

void sub_1C590BDA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  xpc_release(v16);
  xpc::dict::~dict(v15);
  _Unwind_Resume(a1);
}

void antenna::Service::Internal::setTxPowerCappingIPhoneOverrideFreeSpace_sync(antenna::Service::Internal *this, const xpc::object *a2)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  if ((TelephonyUtilIsInternalBuild() & 1) == 0 && !TelephonyUtilIsCarrierBuild()
    || !*((unsigned char *)this + 154))
  {
    return;
  }
  xpc_object_t v5 = __s1;
  memset(__s1, 170, sizeof(__s1));
  xpc::dyn_cast_or_default(__s1, a2, (const object *)"", v4);
  unsigned __int8 v6 = HIBYTE(__s1[2]);
  if (__s1[2] >= 0) {
    xpc_object_t v7 = (uint64_t *)((char *)__s1 + HIBYTE(__s1[2]));
  }
  else {
    xpc_object_t v7 = (uint64_t *)(__s1[0] + __s1[1]);
  }
  if (__s1[2] < 0) {
    xpc_object_t v5 = (uint64_t *)__s1[0];
  }
  if (v5 != v7)
  {
    do
    {
      *(unsigned char *)xpc_object_t v5 = __toupper(*(char *)v5);
      xpc_object_t v5 = (uint64_t *)((char *)v5 + 1);
    }
    while (v5 != v7);
    unsigned __int8 v6 = HIBYTE(__s1[2]);
  }
  xpc_object_t v8 = *((void *)this + 5);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
  {
    size_t v29 = __s1;
    if ((v6 & 0x80u) != 0) {
      size_t v29 = (uint64_t *)__s1[0];
    }
    *(_DWORD *)long long buf = 136315138;
    int v33 = v29;
    _os_log_debug_impl(&dword_1C5767000, v8, OS_LOG_TYPE_DEBUG, "#D Overridding Free Space as %s", buf, 0xCu);
    unsigned __int8 v6 = HIBYTE(__s1[2]);
  }
  size_t v9 = strlen((const char *)*MEMORY[0x1E4F4CF98]);
  unint64_t v10 = v9;
  if ((v6 & 0x80) == 0)
  {
    if (v9 != -1)
    {
      unint64_t v11 = v6;
      xpc_object_t v12 = __s1;
      goto LABEL_18;
    }
LABEL_63:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v9 == -1) {
    goto LABEL_63;
  }
  xpc_object_t v12 = (uint64_t *)__s1[0];
  unint64_t v11 = __s1[1];
LABEL_18:
  if (v11 >= v10) {
    size_t v13 = v10;
  }
  else {
    size_t v13 = v11;
  }
  if (!memcmp(v12, (const void *)*MEMORY[0x1E4F4CF98], v13) && v11 == v10)
  {
    int v19 = 0;
LABEL_53:
    *((_DWORD *)this + 53) = v19;
    goto LABEL_54;
  }
  size_t v15 = strlen((const char *)*MEMORY[0x1E4F4D128]);
  unint64_t v16 = v15;
  if ((v6 & 0x80) == 0)
  {
    if (v15 != -1)
    {
      unint64_t v17 = v6;
      xpc_object_t v18 = __s1;
      goto LABEL_31;
    }
LABEL_64:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v15 == -1) {
    goto LABEL_64;
  }
  xpc_object_t v18 = (uint64_t *)__s1[0];
  unint64_t v17 = __s1[1];
LABEL_31:
  if (v17 >= v16) {
    size_t v20 = v16;
  }
  else {
    size_t v20 = v17;
  }
  if (!memcmp(v18, (const void *)*MEMORY[0x1E4F4D128], v20) && v17 == v16)
  {
    int v19 = 1;
    goto LABEL_53;
  }
  xpc_object_t v22 = (const void *)*MEMORY[0x1E4F4D188];
  size_t v23 = strlen((const char *)*MEMORY[0x1E4F4D188]);
  size_t v24 = v23;
  if ((v6 & 0x80) != 0)
  {
    if (v23 != -1)
    {
      uint64_t v25 = __s1[1];
      if (__s1[1] >= v23) {
        size_t v27 = v23;
      }
      else {
        size_t v27 = __s1[1];
      }
      if (memcmp((const void *)__s1[0], v22, v27)) {
        goto LABEL_54;
      }
      goto LABEL_51;
    }
LABEL_65:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v23 == -1) {
    goto LABEL_65;
  }
  uint64_t v25 = v6;
  if (v6 >= v23) {
    size_t v26 = v23;
  }
  else {
    size_t v26 = v6;
  }
  if (memcmp(__s1, v22, v26)) {
    goto LABEL_54;
  }
LABEL_51:
  if (v25 == v24)
  {
    int v19 = 255;
    goto LABEL_53;
  }
LABEL_54:
  int v28 = *((void *)this + 5);
  if (!os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG))
  {
    if ((v6 & 0x80) == 0) {
      return;
    }
    goto LABEL_56;
  }
  int v30 = *((_DWORD *)this + 53);
  *(_DWORD *)long long buf = 67109120;
  LODWORD(v33) = v30;
  _os_log_debug_impl(&dword_1C5767000, v28, OS_LOG_TYPE_DEBUG, "#D Overridden Free Space as 0x%x", buf, 8u);
  if (__s1[2] < 0) {
LABEL_56:
  }
    operator delete((void *)__s1[0]);
}

void sub_1C590C124(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void antenna::Service::Internal::getTxPowerCappingIPhoneOverriddenFreeSpaceString_sync(antenna::Service::Internal *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  memset(a2, 170, sizeof(std::string));
  xpc_object_t v4 = (const void *)*MEMORY[0x1E4F4D188];
  size_t v5 = strlen((const char *)*MEMORY[0x1E4F4D188]);
  if (v5 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v6 = v5;
  if (v5 >= 0x17)
  {
    uint64_t v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17) {
      uint64_t v8 = v5 | 7;
    }
    uint64_t v9 = v8 + 1;
    xpc_object_t v7 = operator new(v8 + 1);
    a2->__r_.__value_.__l.__size_ = v6;
    a2->__r_.__value_.__r.__words[2] = v9 | 0x8000000000000000;
    a2->__r_.__value_.__r.__words[0] = (std::string::size_type)v7;
    goto LABEL_8;
  }
  *((unsigned char *)&a2->__r_.__value_.__s + 23) = v5;
  xpc_object_t v7 = a2;
  if (v5) {
LABEL_8:
  }
    memmove(v7, v4, v6);
  *((unsigned char *)v7 + v6) = 0;
  if ((TelephonyUtilIsInternalBuild() & 1) == 0 && !TelephonyUtilIsCarrierBuild()
    || !*((unsigned char *)this + 154))
  {
    return;
  }
  int v10 = *((_DWORD *)this + 53);
  if (v10)
  {
    if (v10 != 1) {
      goto LABEL_17;
    }
    unint64_t v11 = (const std::string::value_type **)MEMORY[0x1E4F4D128];
  }
  else
  {
    unint64_t v11 = (const std::string::value_type **)MEMORY[0x1E4F4CF98];
  }
  std::string::__assign_external(a2, *v11);
LABEL_17:
  xpc_object_t v12 = *((void *)this + 5);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
  {
    if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t v13 = a2;
    }
    else {
      size_t v13 = (std::string *)a2->__r_.__value_.__r.__words[0];
    }
    int v14 = 136315138;
    size_t v15 = v13;
    _os_log_debug_impl(&dword_1C5767000, v12, OS_LOG_TYPE_DEBUG, "#D Overridden Free Space as %s", (uint8_t *)&v14, 0xCu);
  }
}

void sub_1C590C310(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void antenna::Service::Internal::setTxPowerAudioMode_sync(uint64_t **this, xpc_object_t *a2)
{
  object[1] = *(xpc_object_t *)MEMORY[0x1E4F143B8];
  memset(__s1, 170, sizeof(__s1));
  xpc_object_t value = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E4F4D0C8]);
  object[0] = value;
  if (value) {
    xpc_retain(value);
  }
  else {
    object[0] = xpc_null_create();
  }
  xpc::dyn_cast_or_default(__s1, (xpc *)object, (const object *)"", v4);
  xpc_release(object[0]);
  if (__s1[2] >= 0) {
    size_t v5 = (uint64_t *)((char *)__s1 + HIBYTE(__s1[2]));
  }
  else {
    size_t v5 = (uint64_t *)(__s1[0] + __s1[1]);
  }
  if (__s1[2] >= 0) {
    size_t v6 = __s1;
  }
  else {
    size_t v6 = (uint64_t *)__s1[0];
  }
  for (; v6 != v5; size_t v6 = (uint64_t *)((char *)v6 + 1))
    *(unsigned char *)size_t v6 = __toupper(*(char *)v6);
  if ((TelephonyUtilIsInternalBuild() & 1) == 0 && !TelephonyUtilIsCarrierBuild()
    || (int v7 = *((_DWORD *)this + 52), v7 == 4))
  {
    if (antenna::Service::Internal::isAudioReceiverOutputOnlyActive((antenna::Service::Internal *)this)
      || antenna::Service::Internal::isAudioAnyOutputActive((antenna::Service::Internal *)this)
      && !*((_DWORD *)this + 63)
      || *((unsigned char *)this + 155)
      && !antenna::Service::Internal::isAudioAnyOutputActive((antenna::Service::Internal *)this)
      && !*((_DWORD *)this + 63))
    {
      int v7 = 2;
    }
    else
    {
      int v7 = 3;
    }
  }
  size_t v8 = strlen((const char *)*MEMORY[0x1E4F4D2C8]);
  unint64_t v9 = v8;
  unint64_t v10 = HIBYTE(__s1[2]);
  if ((SHIBYTE(__s1[2]) & 0x80000000) == 0)
  {
    if (v8 != -1)
    {
      unint64_t v11 = __s1;
      unint64_t v12 = HIBYTE(__s1[2]);
      goto LABEL_28;
    }
LABEL_349:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v8 == -1) {
    goto LABEL_349;
  }
  unint64_t v11 = (uint64_t *)__s1[0];
  unint64_t v12 = __s1[1];
LABEL_28:
  if (v12 >= v9) {
    size_t v13 = v9;
  }
  else {
    size_t v13 = v12;
  }
  if (!memcmp(v11, (const void *)*MEMORY[0x1E4F4D2C8], v13) && v12 == v9)
  {
    *((_DWORD *)this + 82) = 0;
    size_t v20 = this + 39;
    xpc_object_t v21 = this[39];
    xpc_object_t v22 = this + 39;
    size_t v23 = this + 39;
    if (v21)
    {
      while (1)
      {
        while (1)
        {
          size_t v23 = (uint64_t **)v21;
          int v24 = *((_DWORD *)v21 + 7);
          if (v24 < 1) {
            break;
          }
          xpc_object_t v21 = *v23;
          xpc_object_t v22 = v23;
          if (!*v23) {
            goto LABEL_49;
          }
        }
        if ((v24 & 0x80000000) == 0) {
          break;
        }
        xpc_object_t v21 = v23[1];
        if (!v21)
        {
          xpc_object_t v22 = v23 + 1;
          goto LABEL_49;
        }
      }
      char v28 = *((unsigned char *)v23 + 32);
      size_t v29 = this + 36;
      int v30 = this[36];
      size_t v31 = this + 36;
      size_t v32 = this + 36;
      if (v30) {
        goto LABEL_104;
      }
    }
    else
    {
LABEL_49:
      uint64_t v25 = operator new(0x28uLL);
      v25[7] = 0;
      *((unsigned char *)v25 + 32) = 0;
      *(void *)uint64_t v25 = 0;
      *((void *)v25 + 1) = 0;
      *((void *)v25 + 2) = v23;
      const void *v22 = (uint64_t *)v25;
      size_t v26 = (uint64_t *)*this[38];
      size_t v27 = (uint64_t *)v25;
      if (v26)
      {
        this[38] = v26;
        size_t v27 = *v22;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(this[39], v27);
      this[40] = (uint64_t *)((char *)this[40] + 1);
      char v28 = *((unsigned char *)v25 + 32);
      size_t v29 = this + 36;
      int v30 = this[36];
      size_t v31 = this + 36;
      size_t v32 = this + 36;
      if (v30)
      {
        while (1)
        {
LABEL_104:
          while (1)
          {
            size_t v32 = (uint64_t **)v30;
            int v64 = *((_DWORD *)v30 + 7);
            if (v64 < 1) {
              break;
            }
            int v30 = *v32;
            size_t v31 = v32;
            if (!*v32) {
              goto LABEL_108;
            }
          }
          if ((v64 & 0x80000000) == 0) {
            break;
          }
          int v30 = v32[1];
          if (!v30)
          {
            size_t v31 = v32 + 1;
            goto LABEL_108;
          }
        }
        *((unsigned char *)v32 + 32) = v28;
        int v68 = *v20;
        xpc_object_t v69 = this + 39;
        uint64_t v70 = this + 39;
        if (*v20) {
          goto LABEL_115;
        }
        goto LABEL_119;
      }
    }
LABEL_108:
    unint64_t v65 = operator new(0x28uLL);
    v65[7] = 0;
    *((unsigned char *)v65 + 32) = 0;
    *(void *)unint64_t v65 = 0;
    *((void *)v65 + 1) = 0;
    *((void *)v65 + 2) = v32;
    std::string *v31 = (uint64_t *)v65;
    xpc_object_t v66 = (uint64_t *)*this[35];
    xpc_object_t v67 = (uint64_t *)v65;
    if (v66)
    {
      this[35] = v66;
      xpc_object_t v67 = *v31;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(this[36], v67);
    this[37] = (uint64_t *)((char *)this[37] + 1);
    *((unsigned char *)v65 + 32) = v28;
    int v68 = *v20;
    xpc_object_t v69 = this + 39;
    uint64_t v70 = this + 39;
    if (*v20)
    {
      while (1)
      {
LABEL_115:
        while (1)
        {
          uint64_t v70 = (uint64_t **)v68;
          int v71 = *((_DWORD *)v68 + 7);
          if (v71 < 2) {
            break;
          }
          int v68 = *v70;
          xpc_object_t v69 = v70;
          if (!*v70) {
            goto LABEL_119;
          }
        }
        if (v71 == 1) {
          break;
        }
        int v68 = v70[1];
        if (!v68)
        {
          xpc_object_t v69 = v70 + 1;
          goto LABEL_119;
        }
      }
      char v75 = *((unsigned char *)v70 + 32);
      uint64_t v76 = *v29;
      xpc_object_t v77 = v29;
      char v78 = v29;
      if (*v29) {
        goto LABEL_126;
      }
      goto LABEL_130;
    }
LABEL_119:
    xpc_object_t v72 = operator new(0x28uLL);
    v72[7] = 1;
    *((unsigned char *)v72 + 32) = 0;
    *(void *)xpc_object_t v72 = 0;
    *((void *)v72 + 1) = 0;
    *((void *)v72 + 2) = v70;
    *xpc_object_t v69 = (uint64_t *)v72;
    xpc_object_t v73 = (uint64_t *)*this[38];
    int v74 = (uint64_t *)v72;
    if (v73)
    {
      this[38] = v73;
      int v74 = *v69;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(this[39], v74);
    this[40] = (uint64_t *)((char *)this[40] + 1);
    char v75 = *((unsigned char *)v72 + 32);
    uint64_t v76 = *v29;
    xpc_object_t v77 = v29;
    char v78 = v29;
    if (*v29)
    {
      while (1)
      {
LABEL_126:
        while (1)
        {
          char v78 = (uint64_t **)v76;
          int v79 = *((_DWORD *)v76 + 7);
          if (v79 < 2) {
            break;
          }
          uint64_t v76 = *v78;
          xpc_object_t v77 = v78;
          if (!*v78) {
            goto LABEL_130;
          }
        }
        if (v79 == 1) {
          break;
        }
        uint64_t v76 = v78[1];
        if (!v76)
        {
          xpc_object_t v77 = v78 + 1;
          goto LABEL_130;
        }
      }
      *((unsigned char *)v78 + 32) = v75;
      uint64_t v83 = *v20;
      xpc_object_t v84 = this + 39;
      if (*v20) {
        goto LABEL_137;
      }
      goto LABEL_141;
    }
LABEL_130:
    xpc_object_t v80 = operator new(0x28uLL);
    v80[7] = 1;
    *((unsigned char *)v80 + 32) = 0;
    *(void *)xpc_object_t v80 = 0;
    *((void *)v80 + 1) = 0;
    *((void *)v80 + 2) = v78;
    *xpc_object_t v77 = (uint64_t *)v80;
    int v81 = (uint64_t *)*this[35];
    xpc_object_t v82 = (uint64_t *)v80;
    if (v81)
    {
      this[35] = v81;
      xpc_object_t v82 = *v77;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(this[36], v82);
    this[37] = (uint64_t *)((char *)this[37] + 1);
    *((unsigned char *)v80 + 32) = v75;
    uint64_t v83 = *v20;
    xpc_object_t v84 = this + 39;
    if (*v20)
    {
      while (1)
      {
LABEL_137:
        while (1)
        {
          xpc_object_t v84 = (uint64_t **)v83;
          int v85 = *((_DWORD *)v83 + 7);
          if (v85 < 4) {
            break;
          }
          uint64_t v83 = *v84;
          size_t v20 = v84;
          if (!*v84) {
            goto LABEL_141;
          }
        }
        if (v85 == 3) {
          break;
        }
        uint64_t v83 = v84[1];
        if (!v83)
        {
          size_t v20 = v84 + 1;
          goto LABEL_141;
        }
      }
      char v89 = *((unsigned char *)v84 + 32);
      uint64_t v90 = (char *)*v29;
      uint64_t v91 = (uint64_t *)v29;
      if (*v29) {
        goto LABEL_148;
      }
      goto LABEL_152;
    }
LABEL_141:
    xpc_object_t v86 = operator new(0x28uLL);
    *((_DWORD *)v86 + 7) = 3;
    *((unsigned char *)v86 + 32) = 0;
    *(void *)xpc_object_t v86 = 0;
    *((void *)v86 + 1) = 0;
    *((void *)v86 + 2) = v84;
    uint64_t *v20 = (uint64_t *)v86;
    size_t v87 = (uint64_t *)*this[38];
    size_t v88 = (uint64_t *)v86;
    if (v87)
    {
      this[38] = v87;
      size_t v88 = *v20;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(this[39], v88);
    this[40] = (uint64_t *)((char *)this[40] + 1);
    char v89 = *((unsigned char *)v86 + 32);
    uint64_t v90 = (char *)*v29;
    uint64_t v91 = (uint64_t *)v29;
    if (*v29)
    {
      while (1)
      {
LABEL_148:
        while (1)
        {
          uint64_t v91 = (uint64_t *)v90;
          int v92 = *((_DWORD *)v90 + 7);
          if (v92 < 4) {
            break;
          }
          uint64_t v90 = (char *)*v91;
          size_t v29 = (uint64_t **)v91;
          if (!*v91) {
            goto LABEL_152;
          }
        }
        if (v92 == 3) {
          goto LABEL_211;
        }
        uint64_t v90 = (char *)v91[1];
        if (!v90)
        {
          size_t v29 = (uint64_t **)(v91 + 1);
          break;
        }
      }
    }
LABEL_152:
    uint64_t v93 = (uint64_t *)operator new(0x28uLL);
    uint64_t v94 = v93;
    *((_DWORD *)v93 + 7) = 3;
    *((unsigned char *)v93 + 32) = 0;
    *uint64_t v93 = 0;
    v93[1] = 0;
    v93[2] = (uint64_t)v91;
    *size_t v29 = v93;
    size_t v95 = (uint64_t *)*this[35];
    if (!v95)
    {
      uint64_t v91 = v93;
LABEL_210:
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(this[36], v94);
      this[37] = (uint64_t *)((char *)this[37] + 1);
LABEL_211:
      *((unsigned char *)v91 + 32) = v89;
      goto LABEL_212;
    }
    goto LABEL_208;
  }
  size_t v15 = (const void *)*MEMORY[0x1E4F4CAC0];
  size_t v16 = strlen((const char *)*MEMORY[0x1E4F4CAC0]);
  size_t v17 = v16;
  if ((v10 & 0x80) != 0)
  {
    if (v16 != -1)
    {
      uint64_t v18 = __s1[1];
      if (__s1[1] >= v16) {
        size_t v33 = v16;
      }
      else {
        size_t v33 = __s1[1];
      }
      if (memcmp((const void *)__s1[0], v15, v33)) {
        goto LABEL_70;
      }
      goto LABEL_58;
    }
LABEL_350:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v16 == -1) {
    goto LABEL_350;
  }
  uint64_t v18 = v10;
  if (v10 >= v16) {
    size_t v19 = v16;
  }
  else {
    size_t v19 = v10;
  }
  if (memcmp(__s1, v15, v19)) {
    goto LABEL_70;
  }
LABEL_58:
  if (v18 == v17)
  {
    *((_DWORD *)this + 82) = 1;
    size_t v29 = this + 36;
    uint64_t v34 = this[36];
    xpc_object_t v35 = this + 36;
    size_t v36 = this + 36;
    if (v34)
    {
      uint64_t v37 = this[36];
      do
      {
        while (1)
        {
          size_t v36 = (uint64_t **)v37;
          int v38 = *((_DWORD *)v37 + 7);
          if (v38 < 1) {
            break;
          }
          uint64_t v37 = *v36;
          xpc_object_t v35 = v36;
          if (!*v36) {
            goto LABEL_66;
          }
        }
        if ((v38 & 0x80000000) == 0)
        {
          *((unsigned char *)v36 + 32) = 1;
          goto LABEL_173;
        }
        uint64_t v37 = v36[1];
      }
      while (v37);
      xpc_object_t v35 = v36 + 1;
    }
LABEL_66:
    uint64_t v39 = operator new(0x28uLL);
    v39[7] = 0;
    *((unsigned char *)v39 + 32) = 0;
    *(void *)uint64_t v39 = 0;
    *((void *)v39 + 1) = 0;
    *((void *)v39 + 2) = v36;
    uint64_t *v35 = (uint64_t *)v39;
    uint64_t v40 = (uint64_t *)*this[35];
    xpc_object_t v41 = (uint64_t *)v39;
    if (v40)
    {
      this[35] = v40;
      xpc_object_t v41 = *v35;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(this[36], v41);
    uint64_t v34 = this[36];
    this[37] = (uint64_t *)((char *)this[37] + 1);
    *((unsigned char *)v39 + 32) = 1;
    xpc_object_t v42 = this + 36;
    xpc_object_t v43 = this + 36;
    if (v34)
    {
      while (1)
      {
LABEL_173:
        while (1)
        {
          xpc_object_t v43 = (uint64_t **)v34;
          int v107 = *((_DWORD *)v34 + 7);
          if (v107 < 2) {
            break;
          }
          uint64_t v34 = *v43;
          xpc_object_t v42 = v43;
          if (!*v43) {
            goto LABEL_177;
          }
        }
        if (v107 == 1) {
          break;
        }
        uint64_t v34 = v43[1];
        if (!v34)
        {
          xpc_object_t v42 = v43 + 1;
          goto LABEL_177;
        }
      }
      *((unsigned char *)v43 + 32) = 0;
      xpc_object_t v111 = (char *)*v29;
      uint64_t v91 = (uint64_t *)(this + 36);
      if (*v29) {
        goto LABEL_184;
      }
      goto LABEL_206;
    }
LABEL_177:
    xpc_object_t v108 = operator new(0x28uLL);
    v108[7] = 1;
    *((unsigned char *)v108 + 32) = 0;
    *(void *)xpc_object_t v108 = 0;
    *((void *)v108 + 1) = 0;
    *((void *)v108 + 2) = v43;
    *xpc_object_t v42 = (uint64_t *)v108;
    xpc_object_t v109 = (uint64_t *)*this[35];
    uint64_t v110 = (uint64_t *)v108;
    if (v109)
    {
      this[35] = v109;
      uint64_t v110 = *v42;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(this[36], v110);
    this[37] = (uint64_t *)((char *)this[37] + 1);
    *((unsigned char *)v108 + 32) = 0;
    xpc_object_t v111 = (char *)*v29;
    uint64_t v91 = (uint64_t *)(this + 36);
    if (!*v29) {
      goto LABEL_206;
    }
    while (1)
    {
LABEL_184:
      while (1)
      {
        uint64_t v91 = (uint64_t *)v111;
        int v112 = *((_DWORD *)v111 + 7);
        if (v112 < 4) {
          break;
        }
        xpc_object_t v111 = (char *)*v91;
        size_t v29 = (uint64_t **)v91;
        if (!*v91) {
          goto LABEL_206;
        }
      }
      if (v112 == 3) {
        goto LABEL_291;
      }
      xpc_object_t v111 = (char *)v91[1];
      if (!v111)
      {
        size_t v29 = (uint64_t **)(v91 + 1);
        goto LABEL_206;
      }
    }
  }
LABEL_70:
  int v44 = (const void *)*MEMORY[0x1E4F4C828];
  size_t v45 = strlen((const char *)*MEMORY[0x1E4F4C828]);
  size_t v46 = v45;
  if ((v10 & 0x80) == 0)
  {
    if (v45 != -1)
    {
      uint64_t v47 = v10;
      if (v10 >= v45) {
        size_t v48 = v45;
      }
      else {
        size_t v48 = v10;
      }
      if (memcmp(__s1, v44, v48)) {
        goto LABEL_94;
      }
      goto LABEL_82;
    }
LABEL_351:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v45 == -1) {
    goto LABEL_351;
  }
  uint64_t v47 = __s1[1];
  if (__s1[1] >= v45) {
    size_t v49 = v45;
  }
  else {
    size_t v49 = __s1[1];
  }
  if (!memcmp((const void *)__s1[0], v44, v49))
  {
LABEL_82:
    if (v47 != v46) {
      goto LABEL_94;
    }
    *((_DWORD *)this + 82) = 2;
    size_t v29 = this + 36;
    long long v50 = this[36];
    long long v51 = this + 36;
    long long v52 = this + 36;
    if (v50)
    {
      int v53 = this[36];
      do
      {
        while (1)
        {
          long long v52 = (uint64_t **)v53;
          int v54 = *((_DWORD *)v53 + 7);
          if (v54 < 1) {
            break;
          }
          int v53 = *v52;
          long long v51 = v52;
          if (!*v52) {
            goto LABEL_90;
          }
        }
        if ((v54 & 0x80000000) == 0)
        {
          *((unsigned char *)v52 + 32) = 0;
          goto LABEL_191;
        }
        int v53 = v52[1];
      }
      while (v53);
      long long v51 = v52 + 1;
    }
LABEL_90:
    uint64_t v55 = operator new(0x28uLL);
    v55[7] = 0;
    *((unsigned char *)v55 + 32) = 0;
    *(void *)uint64_t v55 = 0;
    *((void *)v55 + 1) = 0;
    *((void *)v55 + 2) = v52;
    *long long v51 = (uint64_t *)v55;
    xpc_object_t v56 = (uint64_t *)*this[35];
    unint64_t v57 = (uint64_t *)v55;
    if (v56)
    {
      this[35] = v56;
      unint64_t v57 = *v51;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(this[36], v57);
    long long v50 = this[36];
    this[37] = (uint64_t *)((char *)this[37] + 1);
    *((unsigned char *)v55 + 32) = 0;
    xpc_object_t v58 = this + 36;
    unint64_t v59 = this + 36;
    if (v50)
    {
      while (1)
      {
LABEL_191:
        while (1)
        {
          unint64_t v59 = (uint64_t **)v50;
          int v113 = *((_DWORD *)v50 + 7);
          if (v113 < 2) {
            break;
          }
          long long v50 = *v59;
          xpc_object_t v58 = v59;
          if (!*v59) {
            goto LABEL_195;
          }
        }
        if (v113 == 1) {
          break;
        }
        long long v50 = v59[1];
        if (!v50)
        {
          xpc_object_t v58 = v59 + 1;
          goto LABEL_195;
        }
      }
      *((unsigned char *)v59 + 32) = 1;
      int64_t v117 = (char *)*v29;
      uint64_t v91 = (uint64_t *)(this + 36);
      if (*v29) {
        goto LABEL_202;
      }
      goto LABEL_206;
    }
LABEL_195:
    xpc_object_t v114 = operator new(0x28uLL);
    v114[7] = 1;
    *((unsigned char *)v114 + 32) = 0;
    *(void *)xpc_object_t v114 = 0;
    *((void *)v114 + 1) = 0;
    *((void *)v114 + 2) = v59;
    *xpc_object_t v58 = (uint64_t *)v114;
    uint64_t v115 = (uint64_t *)*this[35];
    size_t v116 = (uint64_t *)v114;
    if (v115)
    {
      this[35] = v115;
      size_t v116 = *v58;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(this[36], v116);
    this[37] = (uint64_t *)((char *)this[37] + 1);
    *((unsigned char *)v114 + 32) = 1;
    int64_t v117 = (char *)*v29;
    uint64_t v91 = (uint64_t *)(this + 36);
    if (!*v29)
    {
LABEL_206:
      uint64_t v94 = (uint64_t *)operator new(0x28uLL);
      *((_DWORD *)v94 + 7) = 3;
      *((unsigned char *)v94 + 32) = 0;
      uint64_t *v94 = 0;
      v94[1] = 0;
      v94[2] = (uint64_t)v91;
      *size_t v29 = v94;
      size_t v95 = (uint64_t *)*this[35];
      if (!v95)
      {
        char v89 = 0;
        uint64_t v91 = v94;
        goto LABEL_210;
      }
      char v89 = 0;
LABEL_208:
      this[35] = v95;
LABEL_209:
      uint64_t v91 = v94;
      uint64_t v94 = *v29;
      goto LABEL_210;
    }
    while (1)
    {
LABEL_202:
      while (1)
      {
        uint64_t v91 = (uint64_t *)v117;
        int v118 = *((_DWORD *)v117 + 7);
        if (v118 < 4) {
          break;
        }
        int64_t v117 = (char *)*v91;
        size_t v29 = (uint64_t **)v91;
        if (!*v91) {
          goto LABEL_206;
        }
      }
      if (v118 == 3) {
        break;
      }
      int64_t v117 = (char *)v91[1];
      if (!v117)
      {
        size_t v29 = (uint64_t **)(v91 + 1);
        goto LABEL_206;
      }
    }
LABEL_291:
    char v89 = 0;
    goto LABEL_211;
  }
LABEL_94:
  int v60 = (const void *)*MEMORY[0x1E4F4C600];
  size_t v61 = strlen((const char *)*MEMORY[0x1E4F4C600]);
  size_t v62 = v61;
  if ((v10 & 0x80) == 0)
  {
    if (v61 != -1)
    {
      if (v10 >= v61) {
        size_t v63 = v61;
      }
      else {
        size_t v63 = v10;
      }
      if (memcmp(__s1, v60, v63)) {
        goto LABEL_212;
      }
      goto LABEL_159;
    }
LABEL_352:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v61 == -1) {
    goto LABEL_352;
  }
  unint64_t v10 = __s1[1];
  if (__s1[1] >= v61) {
    size_t v96 = v61;
  }
  else {
    size_t v96 = __s1[1];
  }
  if (!memcmp((const void *)__s1[0], v60, v96))
  {
LABEL_159:
    if (v10 != v62) {
      goto LABEL_212;
    }
    *((_DWORD *)this + 82) = 3;
    size_t v29 = this + 36;
    uint64_t v97 = this[36];
    unint64_t v98 = this + 36;
    v99 = this + 36;
    if (v97)
    {
      xpc_object_t v100 = this[36];
      do
      {
        while (1)
        {
          v99 = (uint64_t **)v100;
          int v101 = *((_DWORD *)v100 + 7);
          if (v101 < 1) {
            break;
          }
          xpc_object_t v100 = *v99;
          unint64_t v98 = v99;
          if (!*v99) {
            goto LABEL_167;
          }
        }
        if ((v101 & 0x80000000) == 0)
        {
          *((unsigned char *)v99 + 32) = 0;
          goto LABEL_327;
        }
        xpc_object_t v100 = v99[1];
      }
      while (v100);
      unint64_t v98 = v99 + 1;
    }
LABEL_167:
    uint64_t v102 = operator new(0x28uLL);
    v102[7] = 0;
    *((unsigned char *)v102 + 32) = 0;
    *(void *)uint64_t v102 = 0;
    *((void *)v102 + 1) = 0;
    *((void *)v102 + 2) = v99;
    *unint64_t v98 = (uint64_t *)v102;
    xpc_object_t v103 = (uint64_t *)*this[35];
    std::string::size_type v104 = (uint64_t *)v102;
    if (v103)
    {
      this[35] = v103;
      std::string::size_type v104 = *v98;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(this[36], v104);
    uint64_t v97 = this[36];
    this[37] = (uint64_t *)((char *)this[37] + 1);
    *((unsigned char *)v102 + 32) = 0;
    xpc_object_t v105 = this + 36;
    uint64_t v106 = this + 36;
    if (v97)
    {
      while (1)
      {
LABEL_327:
        while (1)
        {
          uint64_t v106 = (uint64_t **)v97;
          int v180 = *((_DWORD *)v97 + 7);
          if (v180 < 2) {
            break;
          }
          uint64_t v97 = *v106;
          xpc_object_t v105 = v106;
          if (!*v106) {
            goto LABEL_331;
          }
        }
        if (v180 == 1) {
          break;
        }
        uint64_t v97 = v106[1];
        if (!v97)
        {
          xpc_object_t v105 = v106 + 1;
          goto LABEL_331;
        }
      }
      *((unsigned char *)v106 + 32) = 0;
      v184 = (char *)*v29;
      uint64_t v91 = (uint64_t *)(this + 36);
      if (*v29) {
        goto LABEL_338;
      }
    }
    else
    {
LABEL_331:
      v181 = operator new(0x28uLL);
      v181[7] = 1;
      *((unsigned char *)v181 + 32) = 0;
      *(void *)v181 = 0;
      *((void *)v181 + 1) = 0;
      *((void *)v181 + 2) = v106;
      *xpc_object_t v105 = (uint64_t *)v181;
      v182 = (uint64_t *)*this[35];
      v183 = (uint64_t *)v181;
      if (v182)
      {
        this[35] = v182;
        v183 = *v105;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(this[36], v183);
      this[37] = (uint64_t *)((char *)this[37] + 1);
      *((unsigned char *)v181 + 32) = 0;
      v184 = (char *)*v29;
      uint64_t v91 = (uint64_t *)(this + 36);
      if (*v29)
      {
        while (1)
        {
LABEL_338:
          while (1)
          {
            uint64_t v91 = (uint64_t *)v184;
            int v185 = *((_DWORD *)v184 + 7);
            if (v185 < 4) {
              break;
            }
            v184 = (char *)*v91;
            size_t v29 = (uint64_t **)v91;
            if (!*v91) {
              goto LABEL_342;
            }
          }
          if (v185 == 3) {
            break;
          }
          v184 = (char *)v91[1];
          if (!v184)
          {
            size_t v29 = (uint64_t **)(v91 + 1);
            goto LABEL_342;
          }
        }
        char v89 = 1;
        goto LABEL_211;
      }
    }
LABEL_342:
    v186 = (uint64_t *)operator new(0x28uLL);
    uint64_t v94 = v186;
    *((_DWORD *)v186 + 7) = 3;
    *((unsigned char *)v186 + 32) = 0;
    uint64_t *v186 = 0;
    v186[1] = 0;
    v186[2] = (uint64_t)v91;
    *size_t v29 = v186;
    v187 = (uint64_t *)*this[35];
    if (!v187)
    {
      char v89 = 1;
      uint64_t v91 = v186;
      goto LABEL_210;
    }
    this[35] = v187;
    char v89 = 1;
    goto LABEL_209;
  }
LABEL_212:
  long long v119 = this[5];
  if (os_log_type_enabled(v119, OS_LOG_TYPE_DEBUG))
  {
    long long v156 = this[36];
    if (v156)
    {
      while (1)
      {
        while (1)
        {
          unint64_t v158 = (uint64_t **)v156;
          int v159 = *((_DWORD *)v156 + 7);
          if (v159 < 1) {
            break;
          }
          long long v156 = *v158;
          size_t v157 = v158;
          if (!*v158) {
            goto LABEL_299;
          }
        }
        if ((v159 & 0x80000000) == 0) {
          break;
        }
        long long v156 = v158[1];
        if (!v156)
        {
          size_t v157 = v158 + 1;
          goto LABEL_299;
        }
      }
      std::string v160 = v158;
    }
    else
    {
      size_t v157 = this + 36;
      unint64_t v158 = this + 36;
LABEL_299:
      std::string v160 = operator new(0x28uLL);
      v160[7] = 0;
      *((unsigned char *)v160 + 32) = 0;
      *(void *)std::string v160 = 0;
      *((void *)v160 + 1) = 0;
      *((void *)v160 + 2) = v158;
      *size_t v157 = (uint64_t *)v160;
      std::string v161 = (uint64_t *)*this[35];
      v162 = (uint64_t *)v160;
      if (v161)
      {
        this[35] = v161;
        v162 = *v157;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(this[36], v162);
      this[37] = (uint64_t *)((char *)this[37] + 1);
    }
    int v163 = *((unsigned __int8 *)v160 + 32);
    LODWORD(object[0]) = 67109120;
    HIDWORD(object[0]) = v163;
    _os_log_debug_impl(&dword_1C5767000, v119, OS_LOG_TYPE_DEBUG, "#D Audio Receiver: %d", (uint8_t *)object, 8u);
    long long v119 = this[5];
    if (!os_log_type_enabled(v119, OS_LOG_TYPE_DEBUG))
    {
LABEL_214:
      if (!os_log_type_enabled(v119, OS_LOG_TYPE_DEBUG)) {
        goto LABEL_215;
      }
      goto LABEL_314;
    }
  }
  else if (!os_log_type_enabled(v119, OS_LOG_TYPE_DEBUG))
  {
    goto LABEL_214;
  }
  v164 = this[36];
  if (v164)
  {
    while (1)
    {
      while (1)
      {
        v166 = (uint64_t **)v164;
        int v167 = *((_DWORD *)v164 + 7);
        if (v167 < 2) {
          break;
        }
        v164 = *v166;
        v165 = v166;
        if (!*v166) {
          goto LABEL_310;
        }
      }
      if (v167 == 1) {
        break;
      }
      v164 = v166[1];
      if (!v164)
      {
        v165 = v166 + 1;
        goto LABEL_310;
      }
    }
    int v168 = v166;
  }
  else
  {
    v165 = this + 36;
    v166 = this + 36;
LABEL_310:
    int v168 = operator new(0x28uLL);
    v168[7] = 1;
    *((unsigned char *)v168 + 32) = 0;
    *(void *)int v168 = 0;
    *((void *)v168 + 1) = 0;
    *((void *)v168 + 2) = v166;
    *v165 = (uint64_t *)v168;
    uint64_t v169 = (uint64_t *)*this[35];
    v170 = (uint64_t *)v168;
    if (v169)
    {
      this[35] = v169;
      v170 = *v165;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(this[36], v170);
    this[37] = (uint64_t *)((char *)this[37] + 1);
  }
  int v171 = *((unsigned __int8 *)v168 + 32);
  LODWORD(object[0]) = 67109120;
  HIDWORD(object[0]) = v171;
  _os_log_debug_impl(&dword_1C5767000, v119, OS_LOG_TYPE_DEBUG, "#D Audio Other: %d", (uint8_t *)object, 8u);
  long long v119 = this[5];
  if (os_log_type_enabled(v119, OS_LOG_TYPE_DEBUG))
  {
LABEL_314:
    v172 = this[36];
    if (v172)
    {
      while (1)
      {
        while (1)
        {
          v174 = (uint64_t **)v172;
          int v175 = *((_DWORD *)v172 + 7);
          if (v175 < 4) {
            break;
          }
          v172 = *v174;
          v173 = v174;
          if (!*v174) {
            goto LABEL_321;
          }
        }
        if (v175 == 3) {
          break;
        }
        v172 = v174[1];
        if (!v172)
        {
          v173 = v174 + 1;
          goto LABEL_321;
        }
      }
      v176 = v174;
    }
    else
    {
      v173 = this + 36;
      v174 = this + 36;
LABEL_321:
      v176 = operator new(0x28uLL);
      v176[7] = 3;
      *((unsigned char *)v176 + 32) = 0;
      *(void *)v176 = 0;
      *((void *)v176 + 1) = 0;
      *((void *)v176 + 2) = v174;
      *v173 = (uint64_t *)v176;
      v177 = (uint64_t *)*this[35];
      v178 = (uint64_t *)v176;
      if (v177)
      {
        this[35] = v177;
        v178 = *v173;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(this[36], v178);
      this[37] = (uint64_t *)((char *)this[37] + 1);
    }
    int v179 = *((unsigned __int8 *)v176 + 32);
    LODWORD(object[0]) = 67109120;
    HIDWORD(object[0]) = v179;
    _os_log_debug_impl(&dword_1C5767000, v119, OS_LOG_TYPE_DEBUG, "#D Audio Speaker: %d", (uint8_t *)object, 8u);
  }
LABEL_215:
  xpc_object_t v120 = xpc_dictionary_create(0, 0, 0);
  uint64_t v121 = MEMORY[0x1E4F14590];
  if (v120 || (xpc_object_t v120 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C8792D30](v120) == v121)
    {
      xpc_retain(v120);
      xpc_object_t v122 = v120;
    }
    else
    {
      xpc_object_t v122 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v122 = xpc_null_create();
    xpc_object_t v120 = 0;
  }
  xpc_release(v120);
  xpc_object_t v123 = xpc_dictionary_create(0, 0, 0);
  if (v123 || (xpc_object_t v123 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C8792D30](v123) == v121)
    {
      xpc_retain(v123);
      xpc_object_t v124 = v123;
    }
    else
    {
      xpc_object_t v124 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v124 = xpc_null_create();
    xpc_object_t v123 = 0;
  }
  xpc_release(v123);
  long long v125 = this + 36;
  unint64_t v126 = this[36];
  long long v127 = this + 36;
  long long v128 = this + 36;
  if (v126)
  {
    while (1)
    {
      while (1)
      {
        long long v128 = (uint64_t **)v126;
        int v129 = *((_DWORD *)v126 + 7);
        if (v129 < 1) {
          break;
        }
        unint64_t v126 = *v128;
        long long v127 = v128;
        if (!*v128) {
          goto LABEL_234;
        }
      }
      if ((v129 & 0x80000000) == 0) {
        break;
      }
      unint64_t v126 = v128[1];
      if (!v126)
      {
        long long v127 = v128 + 1;
        goto LABEL_234;
      }
    }
    long long v130 = v128;
  }
  else
  {
LABEL_234:
    long long v130 = operator new(0x28uLL);
    *((_DWORD *)v130 + 7) = 0;
    *((unsigned char *)v130 + 32) = 0;
    *(void *)long long v130 = 0;
    *((void *)v130 + 1) = 0;
    *((void *)v130 + 2) = v128;
    *long long v127 = (uint64_t *)v130;
    long long v131 = (uint64_t *)*this[35];
    long long v132 = (uint64_t *)v130;
    if (v131)
    {
      this[35] = v131;
      long long v132 = *v127;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(this[36], v132);
    this[37] = (uint64_t *)((char *)this[37] + 1);
  }
  xpc_object_t v133 = xpc_BOOL_create(*((unsigned char *)v130 + 32));
  if (!v133) {
    xpc_object_t v133 = xpc_null_create();
  }
  xpc_dictionary_set_value(v124, (const char *)*MEMORY[0x1E4F4CA28], v133);
  xpc_object_t v134 = xpc_null_create();
  xpc_release(v133);
  xpc_release(v134);
  uint64_t v135 = *v125;
  v136 = this + 36;
  v137 = this + 36;
  if (*v125)
  {
    while (1)
    {
      while (1)
      {
        v137 = (uint64_t **)v135;
        int v138 = *((_DWORD *)v135 + 7);
        if (v138 < 2) {
          break;
        }
        uint64_t v135 = *v137;
        v136 = v137;
        if (!*v137) {
          goto LABEL_246;
        }
      }
      if (v138 == 1) {
        break;
      }
      uint64_t v135 = v137[1];
      if (!v135)
      {
        v136 = v137 + 1;
        goto LABEL_246;
      }
    }
    v139 = v137;
  }
  else
  {
LABEL_246:
    v139 = operator new(0x28uLL);
    *((_DWORD *)v139 + 7) = 1;
    *((unsigned char *)v139 + 32) = 0;
    *(void *)v139 = 0;
    *((void *)v139 + 1) = 0;
    *((void *)v139 + 2) = v137;
    atomic_ullong *v136 = (uint64_t *)v139;
    std::string v140 = (uint64_t *)*this[35];
    xpc_object_t v141 = (uint64_t *)v139;
    if (v140)
    {
      this[35] = v140;
      xpc_object_t v141 = *v136;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(this[36], v141);
    this[37] = (uint64_t *)((char *)this[37] + 1);
  }
  xpc_object_t v142 = xpc_BOOL_create(*((unsigned char *)v139 + 32));
  if (!v142) {
    xpc_object_t v142 = xpc_null_create();
  }
  xpc_dictionary_set_value(v124, (const char *)*MEMORY[0x1E4F4C680], v142);
  xpc_object_t v143 = xpc_null_create();
  xpc_release(v142);
  xpc_release(v143);
  unsigned __int8 v144 = *v125;
  v145 = this + 36;
  if (*v125)
  {
    while (1)
    {
      while (1)
      {
        v145 = (uint64_t **)v144;
        int v146 = *((_DWORD *)v144 + 7);
        if (v146 < 4) {
          break;
        }
        unsigned __int8 v144 = *v145;
        long long v125 = v145;
        if (!*v145) {
          goto LABEL_259;
        }
      }
      if (v146 == 3) {
        break;
      }
      unsigned __int8 v144 = v145[1];
      if (!v144)
      {
        long long v125 = v145 + 1;
        goto LABEL_259;
      }
    }
    uint64_t v147 = v145;
  }
  else
  {
LABEL_259:
    uint64_t v147 = operator new(0x28uLL);
    *((_DWORD *)v147 + 7) = 3;
    *((unsigned char *)v147 + 32) = 0;
    *(void *)uint64_t v147 = 0;
    *((void *)v147 + 1) = 0;
    *((void *)v147 + 2) = v145;
    NSObject *v125 = (uint64_t *)v147;
    std::string v148 = (uint64_t *)*this[35];
    xpc_object_t v149 = (uint64_t *)v147;
    if (v148)
    {
      this[35] = v148;
      xpc_object_t v149 = *v125;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(this[36], v149);
    this[37] = (uint64_t *)((char *)this[37] + 1);
  }
  xpc_object_t v150 = xpc_BOOL_create(*((unsigned char *)v147 + 32));
  if (!v150) {
    xpc_object_t v150 = xpc_null_create();
  }
  xpc_dictionary_set_value(v124, (const char *)*MEMORY[0x1E4F4C8D0], v150);
  xpc_object_t v151 = xpc_null_create();
  xpc_release(v150);
  xpc_release(v151);
  if (v124)
  {
    xpc_retain(v124);
    xpc_object_t v152 = v124;
  }
  else
  {
    xpc_object_t v152 = xpc_null_create();
  }
  xpc_dictionary_set_value(v122, (const char *)*MEMORY[0x1E4F4C2A8], v152);
  xpc_object_t v153 = xpc_null_create();
  xpc_release(v152);
  xpc_release(v153);
  xpc_object_t v188 = v122;
  if (v122)
  {
    xpc_retain(v122);
    xpc_object_t v154 = v188;
  }
  else
  {
    xpc_object_t v154 = xpc_null_create();
    xpc_object_t v188 = v154;
  }
  antenna::Service::Internal::setAudioState(this, &v188);
  xpc_release(v154);
  xpc_object_t v188 = 0;
  *((unsigned char *)this + 333) = 0;
  if (!*((unsigned char *)this + 332)) {
    goto LABEL_279;
  }
  if ((TelephonyUtilIsInternalBuild() & 1) != 0 || TelephonyUtilIsCarrierBuild())
  {
    int v155 = *((_DWORD *)this + 52);
    if (v155 != 4)
    {
LABEL_277:
      if (v155 == v7) {
        goto LABEL_279;
      }
      goto LABEL_278;
    }
  }
  if (antenna::Service::Internal::isAudioReceiverOutputOnlyActive((antenna::Service::Internal *)this)
    || antenna::Service::Internal::isAudioAnyOutputActive((antenna::Service::Internal *)this) && !*((_DWORD *)this + 63)
    || *((unsigned char *)this + 155)
    && !antenna::Service::Internal::isAudioAnyOutputActive((antenna::Service::Internal *)this)
    && !*((_DWORD *)this + 63))
  {
    int v155 = 2;
    goto LABEL_277;
  }
  if (v7 != 3) {
LABEL_278:
  }
    *((unsigned char *)this + 333) = 1;
LABEL_279:
  xpc_release(v124);
  xpc_release(v122);
  if (SHIBYTE(__s1[2]) < 0) {
    operator delete((void *)__s1[0]);
  }
}

void sub_1C590D784(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, xpc_object_t object)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void antenna::Service::Internal::getTxPowerAudioModeString(antenna::Service::Internal *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  uint64_t v4 = *((int *)this + 82);
  if (v4 < 4) {
    std::string::__assign_external(a2, **((const std::string::value_type ***)&unk_1E6518130 + v4));
  }
  size_t v5 = *((void *)this + 5);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t v6 = a2;
    }
    else {
      size_t v6 = (std::string *)a2->__r_.__value_.__r.__words[0];
    }
    int v7 = 136315138;
    size_t v8 = v6;
    _os_log_debug_impl(&dword_1C5767000, v5, OS_LOG_TYPE_DEBUG, "#D Audio Selected Mode: %s", (uint8_t *)&v7, 0xCu);
  }
}

void sub_1C590D9D0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void antenna::Service::Internal::copyTxPowerAudioMode_sync(antenna::Service::Internal *this@<X0>, xpc_object_t *a2@<X8>)
{
  *a2 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v5 = v4;
  uint64_t v6 = MEMORY[0x1E4F14590];
  if (v4)
  {
    *a2 = v4;
  }
  else
  {
    xpc_object_t v5 = xpc_null_create();
    *a2 = v5;
    if (!v5)
    {
      xpc_object_t v7 = xpc_null_create();
      xpc_object_t v5 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1C8792D30](v5) == v6)
  {
    xpc_retain(v5);
    goto LABEL_9;
  }
  xpc_object_t v7 = xpc_null_create();
LABEL_8:
  *a2 = v7;
LABEL_9:
  xpc_release(v5);
  xpc_object_t v8 = *a2;
  if (MEMORY[0x1C8792D30](*a2) == v6)
  {
    antenna::Service::Internal::getTxPowerAudioModeString(this, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    xpc_object_t v10 = xpc_string_create((const char *)p_p);
    if (!v10) {
      xpc_object_t v10 = xpc_null_create();
    }
    xpc_dictionary_set_value(v8, (const char *)*MEMORY[0x1E4F4D0C8], v10);
    xpc_object_t v11 = xpc_null_create();
    xpc_release(v10);
    xpc_release(v11);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (((TelephonyUtilIsInternalBuild() & 1) != 0 || TelephonyUtilIsCarrierBuild())
      && *((unsigned char *)this + 152))
    {
      xpc_object_t v12 = xpc_dictionary_create(0, 0, 0);
      if (v12 || (xpc_object_t v12 = xpc_null_create()) != 0)
      {
        if (MEMORY[0x1C8792D30](v12) == v6)
        {
          xpc_retain(v12);
          xpc_object_t v13 = v12;
        }
        else
        {
          xpc_object_t v13 = xpc_null_create();
        }
      }
      else
      {
        xpc_object_t v13 = xpc_null_create();
        xpc_object_t v12 = 0;
      }
      xpc_release(v12);
      if (MEMORY[0x1C8792D30](v13) == v6)
      {
        xpc_object_t v14 = xpc_string_create((const char *)*MEMORY[0x1E4F4D2C8]);
        if (!v14) {
          xpc_object_t v14 = xpc_null_create();
        }
        xpc_dictionary_set_value(v13, (const char *)*MEMORY[0x1E4F4C870], v14);
        xpc_object_t v15 = xpc_null_create();
        xpc_release(v14);
        xpc_release(v15);
        xpc_object_t v16 = xpc_string_create((const char *)*MEMORY[0x1E4F4CAC0]);
        if (!v16) {
          xpc_object_t v16 = xpc_null_create();
        }
        xpc_dictionary_set_value(v13, (const char *)*MEMORY[0x1E4F4CBF0], v16);
        xpc_object_t v17 = xpc_null_create();
        xpc_release(v16);
        xpc_release(v17);
        xpc_object_t v18 = xpc_string_create((const char *)*MEMORY[0x1E4F4C828]);
        if (!v18) {
          xpc_object_t v18 = xpc_null_create();
        }
        xpc_dictionary_set_value(v13, (const char *)*MEMORY[0x1E4F4C9B8], v18);
        xpc_object_t v19 = xpc_null_create();
        xpc_release(v18);
        xpc_release(v19);
        xpc_object_t v20 = xpc_string_create((const char *)*MEMORY[0x1E4F4C600]);
        if (!v20) {
          xpc_object_t v20 = xpc_null_create();
        }
        xpc_dictionary_set_value(v13, (const char *)*MEMORY[0x1E4F4CBF8], v20);
        xpc_object_t v21 = xpc_null_create();
        xpc_release(v20);
        xpc_release(v21);
        if (v13)
        {
          xpc_retain(v13);
          xpc_object_t v22 = v13;
        }
        else
        {
          xpc_object_t v22 = xpc_null_create();
        }
        xpc_dictionary_set_value(*a2, (const char *)*MEMORY[0x1E4F4D0D0], v22);
        xpc_object_t v23 = xpc_null_create();
        xpc_release(v22);
        xpc_release(v23);
      }
      xpc_release(v13);
    }
  }
}

void sub_1C590DDC8(_Unwind_Exception *a1)
{
  xpc_release(v2);
  xpc::dict::~dict(v1);
  _Unwind_Resume(a1);
}

void antenna::Service::Internal::setTxPowerAudioAlert_sync(antenna::Service::Internal *this, xpc_object_t *a2)
{
  uint64_t IsInternalBuild = TelephonyUtilIsInternalBuild();
  if ((IsInternalBuild & 1) != 0 || (uint64_t IsInternalBuild = TelephonyUtilIsCarrierBuild(), IsInternalBuild))
  {
    if (CMOnBodyDelegate::isSupported((CMOnBodyDelegate *)IsInternalBuild))
    {
      memset(__p, 170, sizeof(__p));
      xpc_object_t value = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E4F4D140]);
      xpc_object_t object = value;
      if (value) {
        xpc_retain(value);
      }
      else {
        xpc_object_t object = xpc_null_create();
      }
      xpc::dyn_cast_or_default((uint64_t *)__p, (xpc *)&object, (const object *)"", v6);
      xpc_release(object);
      unsigned __int8 v7 = HIBYTE(__p[2]);
      if (SHIBYTE(__p[2]) >= 0) {
        xpc_object_t v8 = (void **)((char *)__p + HIBYTE(__p[2]));
      }
      else {
        xpc_object_t v8 = (void **)((char *)__p[0] + (unint64_t)__p[1]);
      }
      if (SHIBYTE(__p[2]) >= 0) {
        uint64_t v9 = __p;
      }
      else {
        uint64_t v9 = (void **)__p[0];
      }
      if (v9 != v8)
      {
        do
        {
          *(unsigned char *)uint64_t v9 = __toupper(*(char *)v9);
          uint64_t v9 = (void **)((char *)v9 + 1);
        }
        while (v9 != v8);
        unsigned __int8 v7 = HIBYTE(__p[2]);
      }
      size_t v10 = strlen((const char *)*MEMORY[0x1E4F4C5F8]);
      xpc_object_t v11 = (void *)v10;
      if ((v7 & 0x80) != 0)
      {
        if (v10 != -1)
        {
          xpc_object_t v13 = (void **)__p[0];
          size_t v12 = (size_t)__p[1];
          goto LABEL_21;
        }
      }
      else if (v10 != -1)
      {
        size_t v12 = v7;
        xpc_object_t v13 = __p;
LABEL_21:
        if (v12 >= (unint64_t)v11) {
          size_t v14 = (size_t)v11;
        }
        else {
          size_t v14 = v12;
        }
        BOOL v15 = memcmp(v13, (const void *)*MEMORY[0x1E4F4C5F8], v14) == 0;
        if ((void *)v12 != v11) {
          BOOL v15 = 0;
        }
        *((unsigned char *)this + 332) = v15;
        *((unsigned char *)this + 333) = v15;
        if ((v7 & 0x80) != 0) {
          operator delete(__p[0]);
        }
        return;
      }
      std::string::__throw_out_of_range[abi:ne180100]();
    }
  }
}

void sub_1C590DFA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
}

void antenna::Service::Internal::copyTxPowerAudioAlert_sync(antenna::Service::Internal *this@<X0>, void *a2@<X8>)
{
  *a2 = 0xAAAAAAAAAAAAAAAALL;
  xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v5 = v4;
  uint64_t v6 = MEMORY[0x1E4F14590];
  if (v4)
  {
    *a2 = v4;
  }
  else
  {
    xpc_object_t v5 = xpc_null_create();
    *a2 = v5;
    if (!v5)
    {
      xpc_object_t v7 = xpc_null_create();
      xpc_object_t v5 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1C8792D30](v5) == v6)
  {
    xpc_retain(v5);
    goto LABEL_9;
  }
  xpc_object_t v7 = xpc_null_create();
LABEL_8:
  *a2 = v7;
LABEL_9:
  xpc_release(v5);
  xpc_object_t v8 = (void *)*a2;
  if (MEMORY[0x1C8792D30](*a2) == v6)
  {
    if (((TelephonyUtilIsInternalBuild() & 1) != 0 || TelephonyUtilIsCarrierBuild())
      && *((unsigned char *)this + 152))
    {
      if (*((unsigned char *)this + 332))
      {
        xpc_object_t v9 = xpc_string_create((const char *)*MEMORY[0x1E4F4C5F8]);
        if (!v9) {
          xpc_object_t v9 = xpc_null_create();
        }
      }
      else
      {
        xpc_object_t v9 = xpc_string_create((const char *)*MEMORY[0x1E4F4C6D0]);
        if (!v9) {
          xpc_object_t v9 = xpc_null_create();
        }
      }
    }
    else
    {
      xpc_object_t v9 = xpc_string_create((const char *)*MEMORY[0x1E4F4C6D0]);
      if (!v9) {
        xpc_object_t v9 = xpc_null_create();
      }
    }
    xpc_dictionary_set_value(v8, (const char *)*MEMORY[0x1E4F4D140], v9);
    xpc_object_t v10 = xpc_null_create();
    xpc_release(v9);
    xpc_release(v10);
  }
}

void sub_1C590E200(_Unwind_Exception *a1)
{
  xpc::dict::~dict(v1);
  _Unwind_Resume(a1);
}

void antenna::Service::Internal::setTxPowerMotionMode_sync(antenna::Service::Internal *this, xpc_object_t *a2)
{
  uint64_t IsInternalBuild = TelephonyUtilIsInternalBuild();
  if ((IsInternalBuild & 1) != 0 || (uint64_t IsInternalBuild = TelephonyUtilIsCarrierBuild(), IsInternalBuild))
  {
    if (CMOnBodyDelegate::isSupported((CMOnBodyDelegate *)IsInternalBuild))
    {
      memset(__s1, 170, sizeof(__s1));
      xpc_object_t value = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E4F4D270]);
      xpc_object_t object = value;
      if (value) {
        xpc_retain(value);
      }
      else {
        xpc_object_t object = xpc_null_create();
      }
      xpc::dyn_cast_or_default(__s1, (xpc *)&object, (const object *)"", v6);
      xpc_release(object);
      unsigned __int8 v7 = HIBYTE(__s1[2]);
      if (__s1[2] >= 0) {
        xpc_object_t v8 = (uint64_t *)((char *)__s1 + HIBYTE(__s1[2]));
      }
      else {
        xpc_object_t v8 = (uint64_t *)(__s1[0] + __s1[1]);
      }
      if (__s1[2] >= 0) {
        xpc_object_t v9 = __s1;
      }
      else {
        xpc_object_t v9 = (uint64_t *)__s1[0];
      }
      if (v9 != v8)
      {
        do
        {
          *(unsigned char *)xpc_object_t v9 = __toupper(*(char *)v9);
          xpc_object_t v9 = (uint64_t *)((char *)v9 + 1);
        }
        while (v9 != v8);
        unsigned __int8 v7 = HIBYTE(__s1[2]);
      }
      size_t v10 = strlen((const char *)*MEMORY[0x1E4F4D2C8]);
      unint64_t v11 = v10;
      if ((v7 & 0x80) != 0)
      {
        if (v10 != -1)
        {
          xpc_object_t v13 = (uint64_t *)__s1[0];
          unint64_t v12 = __s1[1];
LABEL_21:
          if (v12 >= v11) {
            size_t v14 = v11;
          }
          else {
            size_t v14 = v12;
          }
          if (!memcmp(v13, (const void *)*MEMORY[0x1E4F4D2C8], v14) && v12 == v11)
          {
            int v20 = 0;
            goto LABEL_56;
          }
          size_t v16 = strlen((const char *)*MEMORY[0x1E4F4CAD8]);
          unint64_t v17 = v16;
          if ((v7 & 0x80) != 0)
          {
            if (v16 != -1)
            {
              xpc_object_t v19 = (uint64_t *)__s1[0];
              unint64_t v18 = __s1[1];
LABEL_34:
              if (v18 >= v17) {
                size_t v21 = v17;
              }
              else {
                size_t v21 = v18;
              }
              if (!memcmp(v19, (const void *)*MEMORY[0x1E4F4CAD8], v21) && v18 == v17)
              {
                int v20 = 1;
                goto LABEL_56;
              }
              xpc_object_t v23 = (const void *)*MEMORY[0x1E4F4CAD0];
              size_t v24 = strlen((const char *)*MEMORY[0x1E4F4CAD0]);
              size_t v25 = v24;
              if ((v7 & 0x80) != 0)
              {
                if (v24 != -1)
                {
                  uint64_t v26 = __s1[1];
                  if (__s1[1] >= v24) {
                    size_t v28 = v24;
                  }
                  else {
                    size_t v28 = __s1[1];
                  }
                  if (memcmp((const void *)__s1[0], v23, v28)) {
                    goto LABEL_57;
                  }
LABEL_54:
                  if (v26 != v25) {
                    goto LABEL_57;
                  }
                  int v20 = 2;
LABEL_56:
                  *((_DWORD *)this + 68) = v20;
LABEL_57:
                  if ((v7 & 0x80) != 0) {
                    operator delete((void *)__s1[0]);
                  }
                  return;
                }
              }
              else if (v24 != -1)
              {
                uint64_t v26 = v7;
                if (v7 >= v24) {
                  size_t v27 = v24;
                }
                else {
                  size_t v27 = v7;
                }
                if (memcmp(__s1, v23, v27)) {
                  goto LABEL_57;
                }
                goto LABEL_54;
              }
              std::string::__throw_out_of_range[abi:ne180100]();
            }
          }
          else if (v16 != -1)
          {
            unint64_t v18 = v7;
            xpc_object_t v19 = __s1;
            goto LABEL_34;
          }
          std::string::__throw_out_of_range[abi:ne180100]();
        }
      }
      else if (v10 != -1)
      {
        unint64_t v12 = v7;
        xpc_object_t v13 = __s1;
        goto LABEL_21;
      }
      std::string::__throw_out_of_range[abi:ne180100]();
    }
  }
}

void sub_1C590E488(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
}

std::string *antenna::Service::Internal::getTxPowerMotionModeString@<X0>(std::string *this@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  uint64_t v3 = SLODWORD(this[11].__r_.__value_.__r.__words[1]);
  if (v3 < 3) {
    return std::string::__assign_external(a2, **((const std::string::value_type ***)&unk_1E6518170 + v3));
  }
  return this;
}

void sub_1C590E508(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void antenna::Service::Internal::copyTxPowerMotionMode_sync(antenna::Service::Internal *this@<X0>, xpc_object_t *a2@<X8>)
{
  *a2 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v5 = v4;
  uint64_t v6 = MEMORY[0x1E4F14590];
  if (v4)
  {
    *a2 = v4;
  }
  else
  {
    xpc_object_t v5 = xpc_null_create();
    *a2 = v5;
    if (!v5)
    {
      xpc_object_t v7 = xpc_null_create();
      xpc_object_t v5 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1C8792D30](v5) == v6)
  {
    xpc_retain(v5);
    goto LABEL_9;
  }
  xpc_object_t v7 = xpc_null_create();
LABEL_8:
  *a2 = v7;
LABEL_9:
  xpc_release(v5);
  xpc_object_t v8 = *a2;
  if (MEMORY[0x1C8792D30](*a2) == v6)
  {
    memset(&v24, 0, sizeof(v24));
    uint64_t v9 = *((int *)this + 68);
    if (v9 < 3) {
      std::string::__assign_external(&v24, **((const std::string::value_type ***)&unk_1E6518170 + v9));
    }
    if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t v10 = &v24;
    }
    else {
      size_t v10 = (std::string *)v24.__r_.__value_.__r.__words[0];
    }
    xpc_object_t v11 = xpc_string_create((const char *)v10);
    if (!v11) {
      xpc_object_t v11 = xpc_null_create();
    }
    xpc_dictionary_set_value(v8, (const char *)*MEMORY[0x1E4F4D270], v11);
    xpc_object_t v12 = xpc_null_create();
    xpc_release(v11);
    xpc_release(v12);
    if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v24.__r_.__value_.__l.__data_);
    }
    uint64_t IsInternalBuild = TelephonyUtilIsInternalBuild();
    if ((IsInternalBuild & 1) != 0 || (uint64_t IsInternalBuild = TelephonyUtilIsCarrierBuild(), IsInternalBuild))
    {
      if (CMOnBodyDelegate::isSupported((CMOnBodyDelegate *)IsInternalBuild))
      {
        xpc_object_t v14 = xpc_dictionary_create(0, 0, 0);
        if (v14 || (xpc_object_t v14 = xpc_null_create()) != 0)
        {
          if (MEMORY[0x1C8792D30](v14) == v6)
          {
            xpc_retain(v14);
            xpc_object_t v15 = v14;
          }
          else
          {
            xpc_object_t v15 = xpc_null_create();
          }
        }
        else
        {
          xpc_object_t v15 = xpc_null_create();
          xpc_object_t v14 = 0;
        }
        xpc_release(v14);
        if (MEMORY[0x1C8792D30](v15) == v6)
        {
          xpc_object_t v16 = xpc_string_create((const char *)*MEMORY[0x1E4F4D2C8]);
          if (!v16) {
            xpc_object_t v16 = xpc_null_create();
          }
          xpc_dictionary_set_value(v15, (const char *)*MEMORY[0x1E4F4D148], v16);
          xpc_object_t v17 = xpc_null_create();
          xpc_release(v16);
          xpc_release(v17);
          xpc_object_t v18 = xpc_string_create((const char *)*MEMORY[0x1E4F4CAD8]);
          if (!v18) {
            xpc_object_t v18 = xpc_null_create();
          }
          xpc_dictionary_set_value(v15, (const char *)*MEMORY[0x1E4F4D1D8], v18);
          xpc_object_t v19 = xpc_null_create();
          xpc_release(v18);
          xpc_release(v19);
          xpc_object_t v20 = xpc_string_create((const char *)*MEMORY[0x1E4F4CAD0]);
          if (!v20) {
            xpc_object_t v20 = xpc_null_create();
          }
          xpc_dictionary_set_value(v15, (const char *)*MEMORY[0x1E4F4D1D0], v20);
          xpc_object_t v21 = xpc_null_create();
          xpc_release(v20);
          xpc_release(v21);
          if (v15)
          {
            xpc_retain(v15);
            xpc_object_t v22 = v15;
          }
          else
          {
            xpc_object_t v22 = xpc_null_create();
          }
          xpc_dictionary_set_value(*a2, (const char *)*MEMORY[0x1E4F4D250], v22);
          xpc_object_t v23 = xpc_null_create();
          xpc_release(v22);
          xpc_release(v23);
        }
        xpc_release(v15);
      }
    }
  }
}

void sub_1C590E8B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  xpc_release(v16);
  xpc::dict::~dict(v15);
  _Unwind_Resume(a1);
}

void antenna::Service::Internal::setTxPowerMotionHandDetection_sync(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (const char *)a2;
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  int v4 = *(char *)(a2 + 23);
  xpc_object_t v5 = (const char *)a2;
  if (v4 < 0) {
    xpc_object_t v5 = *(const char **)a2;
  }
  uint64_t v6 = (const std::string::value_type *)*MEMORY[0x1E4F4D2C8];
  size_t v7 = strlen((const char *)*MEMORY[0x1E4F4D2C8]);
  if (!strncasecmp(v5, (const char *)*MEMORY[0x1E4F4D2C8], v7))
  {
    std::string::__assign_external((std::string *)(a1 + 536), v6);
    int v13 = *(_DWORD *)(a1 + 528);
    xpc_object_t v14 = *(NSObject **)(a1 + 40);
    if (!os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG)) {
      goto LABEL_20;
    }
  }
  else
  {
    xpc_object_t v8 = v2;
    if (v4 < 0) {
      xpc_object_t v8 = *(const char **)v2;
    }
    uint64_t v9 = (const std::string::value_type *)*MEMORY[0x1E4F4D028];
    size_t v10 = strlen((const char *)*MEMORY[0x1E4F4D028]);
    if (!strncasecmp(v8, (const char *)*MEMORY[0x1E4F4D028], v10))
    {
      std::string::__assign_external((std::string *)(a1 + 536), v9);
      int v13 = 1;
      xpc_object_t v14 = *(NSObject **)(a1 + 40);
      if (!os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG)) {
        goto LABEL_20;
      }
    }
    else
    {
      if (v4 < 0) {
        uint64_t v2 = *(const char **)v2;
      }
      xpc_object_t v11 = (const std::string::value_type *)*MEMORY[0x1E4F4D0B0];
      size_t v12 = strlen((const char *)*MEMORY[0x1E4F4D0B0]);
      if (!strncasecmp(v2, (const char *)*MEMORY[0x1E4F4D0B0], v12))
      {
        std::string::__assign_external((std::string *)(a1 + 536), v11);
        int v13 = 2;
        xpc_object_t v14 = *(NSObject **)(a1 + 40);
        if (!os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG)) {
          goto LABEL_20;
        }
      }
      else
      {
        int v13 = 0;
        xpc_object_t v14 = *(NSObject **)(a1 + 40);
        if (!os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG)) {
          goto LABEL_20;
        }
      }
    }
  }
  xpc_object_t v15 = (void *)(a1 + 536);
  if (*(char *)(a1 + 559) < 0) {
    xpc_object_t v15 = (void *)*v15;
  }
  int v16 = 136315138;
  xpc_object_t v17 = v15;
  _os_log_debug_impl(&dword_1C5767000, v14, OS_LOG_TYPE_DEBUG, "#D Hand Detection Overriding: %s", (uint8_t *)&v16, 0xCu);
LABEL_20:
  antenna::Service::Internal::sendMotionHandDetectionState_sync((void *)a1, v13);
}

void antenna::Service::Internal::antennaSetProperty(antenna::Service::Internal *this, xpc_object_t *a2)
{
  xpc_object_t v3 = *a2;
  if (*a2)
  {
    xpc_retain(*a2);
    int v4 = (std::__shared_weak_count *)*((void *)this + 10);
    if (!v4) {
LABEL_12:
    }
      std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  else
  {
    xpc_object_t v3 = xpc_null_create();
    int v4 = (std::__shared_weak_count *)*((void *)this + 10);
    if (!v4) {
      goto LABEL_12;
    }
  }
  uint64_t v5 = *((void *)this + 9);
  uint64_t v6 = std::__shared_weak_count::lock(v4);
  if (!v6) {
    goto LABEL_12;
  }
  size_t v7 = v6;
  xpc_object_t v8 = operator new(0x10uLL);
  *xpc_object_t v8 = this;
  v8[1] = v3;
  if (v3) {
    xpc_retain(v3);
  }
  else {
    v8[1] = xpc_null_create();
  }
  uint64_t v9 = *((void *)this + 11);
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  size_t v10 = operator new(0x18uLL);
  void *v10 = v8;
  v10[1] = v5;
  v10[2] = v7;
  dispatch_async_f(v9, v10, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<antenna::Service::Internal>::execute_wrapped<antenna::Service::Internal::antennaSetProperty(xpc::dict const&)::$_0>(antenna::Service::Internal::antennaSetProperty(xpc::dict const&)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<antenna::Service::Internal::antennaSetProperty(xpc::dict const&)::$_0,dispatch_queue_s *::default_delete<antenna::Service::Internal::antennaSetProperty(xpc::dict const&)::$_0>>)::{lambda(void *)#1}::__invoke);
  if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  xpc_release(v3);
}

void antenna::Service::Internal::antennaGetProperty(NSObject **this@<X0>, void **a2@<X1>, xpc_object_t *a3@<X8>)
{
  xpc_object_t v6 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v7 = v6;
  uint64_t v8 = MEMORY[0x1E4F14590];
  if (v6)
  {
    xpc_object_t v18 = v6;
  }
  else
  {
    xpc_object_t v7 = xpc_null_create();
    xpc_object_t v18 = v7;
    if (!v7)
    {
      xpc_object_t v9 = xpc_null_create();
      xpc_object_t v7 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1C8792D30](v7) == v8)
  {
    xpc_retain(v7);
    goto LABEL_9;
  }
  xpc_object_t v9 = xpc_null_create();
LABEL_8:
  xpc_object_t v18 = v9;
LABEL_9:
  xpc_release(v7);
  xpc_object_t v10 = v18;
  if (MEMORY[0x1C8792D30](v18) == v8)
  {
    size_t v12 = *a2;
    xpc_object_t v15 = &v18;
    xpc_object_t object = v12;
    if (v12)
    {
      xpc_retain(v12);
      xpc_object_t v17 = (antenna::Service::Internal *)this;
      if (this[12])
      {
LABEL_15:
        if (dispatch_workloop_is_current())
        {
          antenna::Service::Internal::antennaGetProperty(xpc::dict const&)::$_0::operator()((uint64_t)&v15);
LABEL_23:
          xpc_release(object);
          *a3 = v18;
          xpc_object_t v10 = xpc_null_create();
          xpc_object_t v18 = v10;
          goto LABEL_24;
        }
        BOOL v13 = this[12] == 0;
LABEL_20:
        block[0] = MEMORY[0x1E4F143A8];
        block[1] = 0x40000000;
        block[2] = ___ZNK3ctu20SharedSynchronizableIN7antenna7Service8InternalEE20execute_wrapped_syncIZNS3_18antennaGetPropertyERKN3xpc4dictEE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOSB__block_invoke;
        block[3] = &__block_descriptor_tmp_132;
        block[4] = this + 9;
        block[5] = &v15;
        xpc_object_t v14 = this[11];
        if (v13) {
          dispatch_sync(v14, block);
        }
        else {
          dispatch_async_and_wait(v14, block);
        }
        goto LABEL_23;
      }
    }
    else
    {
      xpc_object_t object = xpc_null_create();
      xpc_object_t v17 = (antenna::Service::Internal *)this;
      if (this[12]) {
        goto LABEL_15;
      }
    }
    BOOL v13 = 1;
    goto LABEL_20;
  }
  xpc_object_t v11 = this[5];
  if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
  {
    LOWORD(block[0]) = 0;
    _os_log_error_impl(&dword_1C5767000, v11, OS_LOG_TYPE_ERROR, "Failed to create a xpc dictionary!", (uint8_t *)block, 2u);
  }
  *a3 = xpc_null_create();
LABEL_24:
  xpc_release(v10);
}

void sub_1C590EE58(_Unwind_Exception *a1)
{
  xpc_release(v1);
  _Unwind_Resume(a1);
}

void antenna::Service::Internal::sendTxPowerCappingIPadMode_sync(antenna::Service::Internal *this)
{
  int v2 = *((_DWORD *)this + 68);
  if (v2 != 2)
  {
    if (v2)
    {
      int v2 = 0;
    }
    else if (*((_DWORD *)this + 63))
    {
      int v2 = 2;
    }
    else
    {
      int v2 = 2 * (*((unsigned char *)this + 736) == 1);
    }
  }
  *((_DWORD *)this + 88) = v2;
  xpc_object_t v3 = xpc_dictionary_create(0, 0, 0);
  if (v3 || (xpc_object_t v3 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C8792D30](v3) == MEMORY[0x1E4F14590])
    {
      xpc_retain(v3);
      xpc_object_t v4 = v3;
    }
    else
    {
      xpc_object_t v4 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v4 = xpc_null_create();
    xpc_object_t v3 = 0;
  }
  xpc_release(v3);
  xpc_object_t v5 = xpc_string_create((const char *)*MEMORY[0x1E4FB9D08]);
  if (!v5) {
    xpc_object_t v5 = xpc_null_create();
  }
  xpc_dictionary_set_value(v4, (const char *)*MEMORY[0x1E4FB9C68], v5);
  xpc_object_t v6 = xpc_null_create();
  xpc_release(v5);
  xpc_release(v6);
  if (*((_DWORD *)this + 88))
  {
    xpc_object_t v7 = xpc_BOOL_create(1);
    if (!v7) {
      xpc_object_t v7 = xpc_null_create();
    }
    xpc_dictionary_set_value(v4, (const char *)*MEMORY[0x1E4FB9D30], v7);
    xpc_object_t v8 = xpc_null_create();
    xpc_release(v7);
    xpc_release(v8);
    xpc_object_t v9 = *((void *)this + 5);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)long long buf = 0;
      xpc_object_t v10 = "#D iPad Tx Power Capping Start";
LABEL_42:
      _os_log_debug_impl(&dword_1C5767000, v9, OS_LOG_TYPE_DEBUG, v10, buf, 2u);
    }
  }
  else
  {
    xpc_object_t v11 = xpc_BOOL_create(1);
    if (!v11) {
      xpc_object_t v11 = xpc_null_create();
    }
    xpc_dictionary_set_value(v4, (const char *)*MEMORY[0x1E4FB9D20], v11);
    xpc_object_t v12 = xpc_null_create();
    xpc_release(v11);
    xpc_release(v12);
    xpc_object_t v9 = *((void *)this + 5);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)long long buf = 0;
      xpc_object_t v10 = "#D iPad Tx Power Capping Stop";
      goto LABEL_42;
    }
  }
  xpc_object_t v13 = xpc_int64_create(*((unsigned int *)this + 85));
  if (!v13) {
    xpc_object_t v13 = xpc_null_create();
  }
  xpc_dictionary_set_value(v4, (const char *)*MEMORY[0x1E4FB9C70], v13);
  xpc_object_t v14 = xpc_null_create();
  xpc_release(v13);
  xpc_release(v14);
  xpc_object_t v15 = (std::__shared_weak_count *)*((void *)this + 10);
  if (!v15 || (uint64_t v16 = *((void *)this + 9), (v17 = std::__shared_weak_count::lock(v15)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  xpc_object_t v18 = v17;
  atomic_fetch_add_explicit(&v17->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    uint64_t v19 = *((void *)this + 15);
    xpc_object_t v26 = v4;
    if (v4)
    {
LABEL_29:
      xpc_retain(v4);
      goto LABEL_32;
    }
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v18);
    uint64_t v19 = *((void *)this + 15);
    xpc_object_t v26 = v4;
    if (v4) {
      goto LABEL_29;
    }
  }
  xpc_object_t v26 = xpc_null_create();
LABEL_32:
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN7antenna7Service8Internal31sendTxPowerCappingIPadMode_syncEv_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_11_4;
  aBlock[4] = this;
  aBlock[5] = v16;
  xpc_object_t v23 = v18;
  atomic_fetch_add_explicit(&v18->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  xpc_object_t v20 = _Block_copy(aBlock);
  xpc_object_t v21 = *((void *)this + 11);
  if (v21) {
    dispatch_retain(v21);
  }
  *(void *)long long buf = v20;
  dispatch_object_t object = v21;
  (*(void (**)(uint64_t, xpc_object_t *, uint8_t *))(*(void *)v19 + 48))(v19, &v26, buf);
  if (object) {
    dispatch_release(object);
  }
  if (*(void *)buf) {
    _Block_release(*(const void **)buf);
  }
  xpc_release(v26);
  xpc_object_t v26 = 0;
  if (v23) {
    std::__shared_weak_count::__release_weak(v23);
  }
  std::__shared_weak_count::__release_weak(v18);
  xpc_release(v4);
}

void sub_1C590F2C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, char a17)
{
  dispatch::callback<void({block_pointer})(BOOL,xpc::object)>::~callback((uint64_t)&a17);
  if (a16) {
    std::__shared_weak_count::__release_weak(a16);
  }
  xpc_release(*(xpc_object_t *)(v19 - 56));
  *(void *)(v19 - 56) = 0;
  std::__shared_weak_count::__release_weak(v18);
  xpc_release(v17);
  _Unwind_Resume(a1);
}

uint64_t antenna::Service::Internal::getTxPowerIPadWithMotionCappingMode_sync(antenna::Service::Internal *this)
{
  int v1 = *((_DWORD *)this + 68);
  if (v1 == 2) {
    return 2;
  }
  if (v1) {
    return 0;
  }
  if (*((_DWORD *)this + 63)) {
    return 2;
  }
  return 2 * (*((unsigned char *)this + 736) == 1);
}

void ___ZN7antenna7Service8Internal31sendTxPowerCappingIPadMode_syncEv_block_invoke(void *a1, char a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  xpc_object_t v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    uint64_t v5 = a1[4];
    xpc_object_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      xpc_object_t v7 = v6;
      uint64_t v8 = a1[5];
      if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v7);
      }
      if (v8 && (a2 & 1) == 0)
      {
        xpc_object_t v9 = *(NSObject **)(v5 + 40);
        if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
        {
          uint64_t v12 = *MEMORY[0x1E4FB9D08];
          int v13 = 136315138;
          uint64_t v14 = v12;
          _os_log_error_impl(&dword_1C5767000, v9, OS_LOG_TYPE_ERROR, "Failed to run command driver: %s", (uint8_t *)&v13, 0xCu);
          if (!*(unsigned char *)(v5 + 153)) {
            return;
          }
        }
        else if (!*(unsigned char *)(v5 + 153))
        {
          return;
        }
        antenna::Service::Internal::stopMotionDetection_sync((antenna::Service::Internal *)v5);
        xpc_object_t v10 = *(NSObject **)(v5 + 360);
        if (v10)
        {
          dispatch_source_cancel(v10);
          xpc_object_t v11 = *(NSObject **)(v5 + 360);
          *(void *)(v5 + 360) = 0;
          if (v11) {
            dispatch_release(v11);
          }
        }
        *(_DWORD *)(v5 + 352) = 255;
      }
    }
  }
}

void antenna::Service::Internal::stopTxPowerCappingIPadWithMotionTimer_sync(antenna::Service::Internal *this)
{
  int v2 = *((void *)this + 45);
  if (v2)
  {
    dispatch_source_cancel(v2);
    xpc_object_t v3 = *((void *)this + 45);
    *((void *)this + 45) = 0;
    if (v3)
    {
      dispatch_release(v3);
    }
  }
}

void antenna::Service::Internal::startTxPowerCappingIPadWithMotionTimer_sync(dispatch_queue_t *this)
{
  int v2 = dispatch_source_create(MEMORY[0x1E4F14490], 1uLL, 0, this[11]);
  xpc_object_t v3 = this[45];
  this[45] = v2;
  if (v3)
  {
    dispatch_release(v3);
    int v2 = this[45];
  }
  dispatch_time_t v4 = dispatch_time(0, 2000000000);
  dispatch_source_set_timer(v2, v4, 0xFFFFFFFFFFFFFFFFLL, 0xBEBC200uLL);
  uint64_t v5 = (std::__shared_weak_count *)this[10];
  if (!v5 || (v6 = this[9], (xpc_object_t v7 = std::__shared_weak_count::lock(v5)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v8 = v7;
  p_shared_weak_owners = &v7->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v8);
  }
  xpc_object_t v10 = this[45];
  handler[0] = MEMORY[0x1E4F143A8];
  handler[1] = 1174405120;
  handler[2] = ___ZN7antenna7Service8Internal43startTxPowerCappingIPadWithMotionTimer_syncEv_block_invoke;
  handler[3] = &__block_descriptor_tmp_14_2;
  handler[4] = this;
  handler[5] = v6;
  uint64_t v12 = v8;
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  dispatch_source_set_event_handler(v10, handler);
  dispatch_activate(this[45]);
  if (v12) {
    std::__shared_weak_count::__release_weak(v12);
  }
  std::__shared_weak_count::__release_weak(v8);
}

void ___ZN7antenna7Service8Internal43startTxPowerCappingIPadWithMotionTimer_syncEv_block_invoke(void *a1)
{
  int v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    uint64_t v3 = a1[4];
    dispatch_time_t v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      uint64_t v5 = v4;
      if (a1[5] && *(unsigned char *)(v3 + 216))
      {
        if (!*(unsigned char *)(v3 + 248)) {
          antenna::Service::Internal::startMotionDetection_sync((antenna::Service::Internal *)v3);
        }
        dispatch_queue_t v6 = *(NSObject **)(v3 + 360);
        if (v6)
        {
          dispatch_source_cancel(v6);
          xpc_object_t v7 = *(NSObject **)(v3 + 360);
          *(void *)(v3 + 360) = 0;
          if (v7) {
            dispatch_release(v7);
          }
        }
        antenna::Service::Internal::sendTxPowerCappingIPadMode_sync((antenna::Service::Internal *)v3);
        antenna::Service::Internal::startTxPowerCappingIPadWithMotionTimer_sync((antenna::Service::Internal *)v3);
      }
      if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void sub_1C590F798(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void antenna::Service::Internal::handleTxPowerCappingIPadWithMotionTimerExpiry_sync(antenna::Service::Internal *this)
{
  if (!*((unsigned char *)this + 216)) {
    return;
  }
  if (*((unsigned char *)this + 248))
  {
    int v2 = *((void *)this + 45);
    if (!v2) {
      goto LABEL_9;
    }
LABEL_7:
    dispatch_source_cancel(v2);
    uint64_t v3 = *((void *)this + 45);
    *((void *)this + 45) = 0;
    if (v3) {
      dispatch_release(v3);
    }
    goto LABEL_9;
  }
  antenna::Service::Internal::startMotionDetection_sync(this);
  int v2 = *((void *)this + 45);
  if (v2) {
    goto LABEL_7;
  }
LABEL_9:
  antenna::Service::Internal::sendTxPowerCappingIPadMode_sync(this);

  antenna::Service::Internal::startTxPowerCappingIPadWithMotionTimer_sync((dispatch_queue_t *)this);
}

uint64_t antenna::Service::Internal::getAccessoryState_sync(antenna::Service::Internal *this)
{
  int v2 = (char *)this + 392;
  uint64_t v3 = (char *)this + 392;
  if (*((char *)this + 415) < 0) {
    uint64_t v3 = *(const char **)v2;
  }
  size_t v4 = strlen((const char *)*MEMORY[0x1E4F4D2C8]);
  if (!strncasecmp(v3, (const char *)*MEMORY[0x1E4F4D2C8], v4)
    || (TelephonyUtilIsInternalBuild() & 1) == 0 && !TelephonyUtilIsCarrierBuild())
  {
    size_t v31 = (uint64_t *)*((void *)this + 55);
    size_t v32 = (uint64_t **)((char *)this + 448);
    if (v31 == (uint64_t *)((char *)this + 448))
    {
LABEL_97:
      uint64_t v10 = 0;
      goto LABEL_98;
    }
    size_t v33 = (uint64_t *)*((void *)this + 55);
    while (1)
    {
      if (v33[4])
      {
        int v34 = *((_DWORD *)v33 + 9);
        if ((v34 & 0x1000) != 0) {
          break;
        }
      }
      xpc_object_t v35 = (uint64_t *)v33[1];
      if (v35)
      {
        do
        {
          size_t v36 = (uint64_t **)v35;
          xpc_object_t v35 = (uint64_t *)*v35;
        }
        while (v35);
      }
      else
      {
        do
        {
          size_t v36 = (uint64_t **)v33[2];
          BOOL v37 = *v36 == v33;
          size_t v33 = (uint64_t *)v36;
        }
        while (!v37);
      }
      size_t v33 = (uint64_t *)v36;
      if (v36 == v32)
      {
        uint64_t v10 = 0;
        int v39 = 1;
        goto LABEL_103;
      }
    }
    int v39 = 0;
    unsigned int v40 = v34 & 0xFFFFEFFF;
    if (*((unsigned char *)this + 561)) {
      uint64_t v10 = 4096;
    }
    else {
      uint64_t v10 = v40;
    }
LABEL_103:
    uint64_t v38 = 1;
    while (1)
    {
      if (v39)
      {
        if ((v31[4] & 2) != 0)
        {
          int v41 = *((_DWORD *)v31 + 7);
          if (v41 == ctu::iokit::Controller::getAccessoryPrimaryPortNumber(*(ctu::iokit::Controller **)(*((void *)this + 47) + 72))) {
            break;
          }
        }
      }
      if (v31[4])
      {
        int v42 = *((_DWORD *)v31 + 9);
        if ((v42 & 0x1000) != 0) {
          int v42 = 0;
        }
        uint64_t v10 = v42 | v10;
      }
      xpc_object_t v43 = (uint64_t *)v31[1];
      if (v43)
      {
        do
        {
          int v44 = (uint64_t **)v43;
          xpc_object_t v43 = (uint64_t *)*v43;
        }
        while (v43);
      }
      else
      {
        do
        {
          int v44 = (uint64_t **)v31[2];
          BOOL v37 = *v44 == v31;
          size_t v31 = (uint64_t *)v44;
        }
        while (!v37);
      }
      size_t v31 = (uint64_t *)v44;
      if (v44 == v32) {
        return v38 | (v10 << 32);
      }
    }
    std::__tree<std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>>>::destroy(*((void **)this + 56));
    *((void *)this + 56) = 0;
    *((void *)this + 57) = 0;
    *((void *)this + 55) = v32;
    unsigned int AccessoryPrimaryPortNumber = ctu::iokit::Controller::getAccessoryPrimaryPortNumber(*(ctu::iokit::Controller **)(*((void *)this + 47) + 72));
    unsigned int v46 = AccessoryPrimaryPortNumber;
    uint64_t v47 = (char *)*((void *)this + 56);
    size_t v48 = (uint64_t **)((char *)this + 448);
    if (v47)
    {
      while (1)
      {
        while (1)
        {
          size_t v48 = (uint64_t **)v47;
          unsigned int v49 = *((_DWORD *)v47 + 7);
          if (AccessoryPrimaryPortNumber >= v49) {
            break;
          }
          uint64_t v47 = (char *)*v48;
          size_t v32 = v48;
          if (!*v48) {
            goto LABEL_127;
          }
        }
        if (v49 >= AccessoryPrimaryPortNumber) {
          break;
        }
        uint64_t v47 = (char *)v48[1];
        if (!v47)
        {
          size_t v32 = v48 + 1;
          goto LABEL_127;
        }
      }
    }
    else
    {
LABEL_127:
      long long v50 = (char *)v48;
      size_t v48 = (uint64_t **)operator new(0x28uLL);
      v48[4] = 0;
      *((_DWORD *)v48 + 7) = v46;
      NSObject *v48 = 0;
      v48[1] = 0;
      v48[2] = (uint64_t *)v50;
      uint64_t *v32 = (uint64_t *)v48;
      uint64_t v51 = **((void **)this + 55);
      long long v52 = (uint64_t *)v48;
      if (v51)
      {
        *((void *)this + 55) = v51;
        long long v52 = *v32;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 56), v52);
      ++*((void *)this + 57);
    }
    v48[4] = (uint64_t *)0x100000002;
LABEL_131:
    uint64_t v10 = 1;
    uint64_t v38 = 2;
    return v38 | (v10 << 32);
  }
  int v5 = *((char *)this + 415);
  dispatch_queue_t v6 = v2;
  if (v5 < 0) {
    dispatch_queue_t v6 = *(const char **)v2;
  }
  size_t v7 = strlen((const char *)*MEMORY[0x1E4F4C328]);
  if (!strncasecmp(v6, (const char *)*MEMORY[0x1E4F4C328], v7)) {
    goto LABEL_131;
  }
  if (v5 < 0) {
    int v2 = *(const char **)v2;
  }
  size_t v8 = strlen((const char *)*MEMORY[0x1E4F4C320]);
  if (strncasecmp(v2, (const char *)*MEMORY[0x1E4F4C320], v8)) {
    goto LABEL_97;
  }
  memset(v69, 170, sizeof(v69));
  ctu::split_any_copy();
  xpc_object_t v9 = (long long *)v69[0];
  xpc_object_t v67 = (long long *)v69[1];
  if (v69[0] != v69[1])
  {
    LODWORD(v10) = 0;
    xpc_object_t v66 = (char *)*MEMORY[0x1E4F4C110];
    unint64_t v65 = (char *)*MEMORY[0x1E4F4C120];
    int v64 = (char *)*MEMORY[0x1E4F4C080];
    size_t v63 = (char *)*MEMORY[0x1E4F4C090];
    size_t v62 = (char *)*MEMORY[0x1E4F4C118];
    size_t v61 = (char *)*MEMORY[0x1E4F4C098];
    int v60 = (char *)*MEMORY[0x1E4F4C0A0];
    unint64_t v59 = (char *)*MEMORY[0x1E4F4C0A8];
    xpc_object_t v58 = (char *)*MEMORY[0x1E4F4C0B0];
    unint64_t v57 = (char *)*MEMORY[0x1E4F4C0B8];
    xpc_object_t v56 = (char *)*MEMORY[0x1E4F4C0C0];
    xpc_object_t v11 = (const char *)*MEMORY[0x1E4F4C298];
    uint64_t v12 = MEMORY[0x1E4F14390];
    do
    {
      memset(&v68, 170, sizeof(v68));
      if (*((char *)v9 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v68, *(const std::string::value_type **)v9, *((void *)v9 + 1));
      }
      else
      {
        long long v13 = *v9;
        v68.__r_.__value_.__r.__words[2] = *((void *)v9 + 2);
        *(_OWORD *)&v68.__r_.__value_.__l.__data_ = v13;
      }
      if ((v68.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v14 = &v68;
      }
      else {
        uint64_t v14 = (std::string *)v68.__r_.__value_.__r.__words[0];
      }
      if ((v68.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v68.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v68.__r_.__value_.__l.__size_;
      }
      if (!size) {
        goto LABEL_40;
      }
      uint64_t v16 = (std::string *)((char *)v14 + size);
      do
      {
        unsigned int v17 = v14->__r_.__value_.__s.__data_[0];
        if ((v17 & 0x80000000) != 0 ? __maskrune(v17, 0x4000uLL) : *(_DWORD *)(v12 + 4 * v17 + 60) & 0x4000) {
          break;
        }
        uint64_t v14 = (std::string *)((char *)v14 + 1);
        --size;
      }
      while (size);
      if (size == 1)
      {
LABEL_40:
        uint64_t v16 = v14;
      }
      else
      {
        uint64_t v19 = 1;
        uint64_t v16 = v14;
        do
        {
          unsigned int v20 = v14->__r_.__value_.__s.__data_[v19];
          if ((v20 & 0x80000000) != 0) {
            int v21 = __maskrune(v20, 0x4000uLL);
          }
          else {
            int v21 = *(_DWORD *)(v12 + 4 * v20 + 60) & 0x4000;
          }
          if (!v21)
          {
            v16->__r_.__value_.__s.__data_[0] = v14->__r_.__value_.__s.__data_[v19];
            uint64_t v16 = (std::string *)((char *)v16 + 1);
          }
          ++v19;
        }
        while (size != v19);
      }
      std::string::size_type v22 = HIBYTE(v68.__r_.__value_.__r.__words[2]);
      xpc_object_t v23 = (std::string *)v68.__r_.__value_.__r.__words[0];
      std::string v24 = (char *)(v68.__r_.__value_.__r.__words[0] + v68.__r_.__value_.__l.__size_);
      if ((v68.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      {
        size_t v25 = (std::string *)v68.__r_.__value_.__r.__words[0];
      }
      else
      {
        std::string v24 = (char *)&v68 + HIBYTE(v68.__r_.__value_.__r.__words[2]);
        size_t v25 = &v68;
      }
      if ((v68.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v22 = v68.__r_.__value_.__l.__size_;
      }
      std::string::size_type v26 = (char *)v16 - (char *)v25;
      if (v22 < (char *)v16 - (char *)v25) {
        std::string::__throw_out_of_range[abi:ne180100]();
      }
      if (v24 - (char *)v16 == -1)
      {
        if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
        {
          v68.__r_.__value_.__l.__size_ = (char *)v16 - (char *)v25;
        }
        else
        {
          *((unsigned char *)&v68.__r_.__value_.__s + 23) = v26 & 0x7F;
          xpc_object_t v23 = &v68;
        }
        v23->__r_.__value_.__s.__data_[v26] = 0;
      }
      else
      {
        std::string::__erase_external_with_move(&v68, v26, v24 - (char *)v16);
      }
      int v27 = SHIBYTE(v68.__r_.__value_.__r.__words[2]);
      size_t v28 = (void *)v68.__r_.__value_.__r.__words[0];
      if ((v68.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        size_t v29 = &v68;
      }
      else {
        size_t v29 = (std::string *)v68.__r_.__value_.__r.__words[0];
      }
      if ((v68.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        size_t v30 = HIBYTE(v68.__r_.__value_.__r.__words[2]);
      }
      else {
        size_t v30 = v68.__r_.__value_.__l.__size_;
      }
      if (!strncasecmp((const char *)v29, v66, v30)) {
        LODWORD(v10) = v10 | 2;
      }
      if (!strncasecmp((const char *)v29, v65, v30)) {
        LODWORD(v10) = v10 | 4;
      }
      if (!strncasecmp((const char *)v29, v64, v30)) {
        LODWORD(v10) = v10 | 8;
      }
      if (!strncasecmp((const char *)v29, v63, v30)) {
        LODWORD(v10) = v10 | 0x10;
      }
      if (!strncasecmp((const char *)v29, v62, v30)) {
        LODWORD(v10) = v10 | 0x20;
      }
      if (!strncasecmp((const char *)v29, v61, v30)) {
        LODWORD(v10) = v10 | 0x40;
      }
      if (!strncasecmp((const char *)v29, v60, v30)) {
        LODWORD(v10) = v10 | 0x80;
      }
      if (!strncasecmp((const char *)v29, v59, v30)) {
        LODWORD(v10) = v10 | 0x100;
      }
      if (!strncasecmp((const char *)v29, v58, v30)) {
        LODWORD(v10) = v10 | 0x200;
      }
      if (!strncasecmp((const char *)v29, v57, v30)) {
        LODWORD(v10) = v10 | 0x400;
      }
      if (!strncasecmp((const char *)v29, v56, v30)) {
        LODWORD(v10) = v10 | 0x800;
      }
      if (!strncasecmp((const char *)v29, v11, v30)) {
        uint64_t v10 = v10 | 0x1000;
      }
      else {
        uint64_t v10 = v10;
      }
      if (v27 < 0) {
        operator delete(v28);
      }
      xpc_object_t v9 = (long long *)((char *)v9 + 24);
    }
    while (v9 != v67);
    xpc_object_t v9 = (long long *)v69[0];
    if (!v69[0]) {
      goto LABEL_98;
    }
    goto LABEL_134;
  }
  uint64_t v10 = 0;
  if (v69[0])
  {
LABEL_134:
    int v54 = (long long *)v69[1];
    uint64_t v55 = v9;
    if ((long long *)v69[1] != v9)
    {
      do
      {
        if (*((char *)v54 - 1) < 0) {
          operator delete(*((void **)v54 - 3));
        }
        int v54 = (long long *)((char *)v54 - 24);
      }
      while (v54 != v9);
      uint64_t v55 = (long long *)v69[0];
    }
    v69[1] = v9;
    operator delete(v55);
  }
LABEL_98:
  uint64_t v38 = 1;
  return v38 | (v10 << 32);
}

void sub_1C590FF54(_Unwind_Exception *a1)
{
  std::vector<std::string>::~vector[abi:ne180100]((void **)(v1 - 104));
  _Unwind_Resume(a1);
}

void sub_1C590FF68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  std::vector<std::string>::~vector[abi:ne180100]((void **)(v26 - 104));
  _Unwind_Resume(a1);
}

BOOL antenna::Service::Internal::isAccessoryOverridden(antenna::Service::Internal *this)
{
  uint64_t v1 = (char *)this + 392;
  if (*((char *)this + 415) < 0) {
    uint64_t v1 = *(const char **)v1;
  }
  size_t v2 = strlen((const char *)*MEMORY[0x1E4F4D2C8]);
  if (!strncasecmp(v1, (const char *)*MEMORY[0x1E4F4D2C8], v2)) {
    return 0;
  }
  if (TelephonyUtilIsInternalBuild()) {
    return 1;
  }
  return (TelephonyUtilIsCarrierBuild() & 1) != 0;
}

void antenna::Service::Internal::accessoryNotification_sync(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  dispatch_queue_t v6 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(__p[0]) = 67109120;
    HIDWORD(__p[0]) = a3;
    _os_log_impl(&dword_1C5767000, v6, OS_LOG_TYPE_DEFAULT, "#I Accessory Port Number: %u", (uint8_t *)__p, 8u);
    dispatch_queue_t v6 = *(NSObject **)(a1 + 40);
  }
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    ctu::iokit::asString();
    if (v21 >= 0) {
      size_t v7 = __p;
    }
    else {
      size_t v7 = (void **)__p[0];
    }
    *(_DWORD *)long long buf = 136315138;
    xpc_object_t v23 = v7;
    _os_log_impl(&dword_1C5767000, v6, OS_LOG_TYPE_DEFAULT, "#I Accessory Status: %s", buf, 0xCu);
    if (v21 < 0) {
      operator delete(__p[0]);
    }
    dispatch_queue_t v6 = *(NSObject **)(a1 + 40);
  }
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    ctu::iokit::asString();
    size_t v8 = v21 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)long long buf = 136315138;
    xpc_object_t v23 = v8;
    _os_log_impl(&dword_1C5767000, v6, OS_LOG_TYPE_DEFAULT, "#I Accessory Type: %s", buf, 0xCu);
    if (v21 < 0)
    {
      operator delete(__p[0]);
      xpc_object_t v9 = (const char *)(a1 + 392);
      if ((*(char *)(a1 + 415) & 0x80000000) == 0) {
        goto LABEL_17;
      }
      goto LABEL_16;
    }
  }
  xpc_object_t v9 = (const char *)(a1 + 392);
  if (*(char *)(a1 + 415) < 0) {
LABEL_16:
  }
    xpc_object_t v9 = *(const char **)v9;
LABEL_17:
  size_t v10 = strlen((const char *)*MEMORY[0x1E4F4D2C8]);
  if (!strncasecmp(v9, (const char *)*MEMORY[0x1E4F4D2C8], v10)
    || (TelephonyUtilIsInternalBuild() & 1) == 0 && (TelephonyUtilIsCarrierBuild() & 1) == 0)
  {
    uint64_t AccessoryState_sync = antenna::Service::Internal::getAccessoryState_sync((antenna::Service::Internal *)a1);
    uint64_t v12 = *(uint64_t **)(a1 + 448);
    if (v12)
    {
      while (1)
      {
        while (1)
        {
          uint64_t v14 = (uint64_t **)v12;
          unsigned int v15 = *((_DWORD *)v12 + 7);
          if (v15 <= a3) {
            break;
          }
          uint64_t v12 = *v14;
          long long v13 = v14;
          if (!*v14) {
            goto LABEL_27;
          }
        }
        if (v15 >= a3) {
          break;
        }
        uint64_t v12 = v14[1];
        if (!v12)
        {
          long long v13 = v14 + 1;
          goto LABEL_27;
        }
      }
      uint64_t v16 = v14;
    }
    else
    {
      long long v13 = (uint64_t **)(a1 + 448);
      uint64_t v14 = (uint64_t **)(a1 + 448);
LABEL_27:
      uint64_t v16 = operator new(0x28uLL);
      v16[4] = 0;
      *((_DWORD *)v16 + 7) = a3;
      void *v16 = 0;
      v16[1] = 0;
      v16[2] = v14;
      uint64_t *v13 = v16;
      uint64_t v17 = **(void **)(a1 + 440);
      xpc_object_t v18 = v16;
      if (v17)
      {
        *(void *)(a1 + 440) = v17;
        xpc_object_t v18 = *v13;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 448), v18);
      ++*(void *)(a1 + 456);
    }
    v16[4] = a2;
    if (AccessoryState_sync == antenna::Service::Internal::getAccessoryState_sync((antenna::Service::Internal *)a1))
    {
      uint64_t v19 = *(NSObject **)(a1 + 40);
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
      {
        LOWORD(__p[0]) = 0;
        _os_log_debug_impl(&dword_1C5767000, v19, OS_LOG_TYPE_DEBUG, "#D Skip sending accessory since previous and current states are same", (uint8_t *)__p, 2u);
      }
    }
    else
    {
      antenna::Service::Internal::sendAccessoryStatus_sync((NSObject **)a1);
    }
  }
}

void antenna::Service::Internal::mesaNotification_sync(uint64_t a1, char a2)
{
  if (a2)
  {
    size_t v2 = *(NSObject **)(a1 + 40);
    if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    *(_WORD *)long long buf = 0;
    uint64_t v3 = "#I ctu::iokit::kTelephonyIOKitMesaStartShort";
    size_t v4 = buf;
    goto LABEL_7;
  }
  if ((a2 & 2) != 0)
  {
    size_t v2 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      __int16 v5 = 0;
      uint64_t v3 = "#I ctu::iokit::kTelephonyIOKitMesaStartLong";
      size_t v4 = (uint8_t *)&v5;
LABEL_7:
      _os_log_impl(&dword_1C5767000, v2, OS_LOG_TYPE_DEFAULT, v3, v4, 2u);
    }
  }
}

void antenna::Service::Internal::videoNotification_sync(antenna::Service::Internal *a1, unsigned int a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  size_t v4 = *((void *)a1 + 5);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v5[0] = 67109120;
    v5[1] = a2;
    _os_log_impl(&dword_1C5767000, v4, OS_LOG_TYPE_DEFAULT, "#I Display evnet: 0x%x\n", (uint8_t *)v5, 8u);
  }
  antenna::Service::Internal::sendVideoAccessory_sync(a1, (a2 >> 2) & 1);
}

void antenna::Service::Internal::powerSourceNotification_sync(uint64_t a1, int a2)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)(a1 + 564) != a2)
  {
    size_t v4 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      ctu::iokit::asString();
      if (v7 >= 0) {
        p_p = &__p;
      }
      else {
        p_p = __p;
      }
      *(_DWORD *)long long buf = 136315138;
      xpc_object_t v9 = p_p;
      _os_log_impl(&dword_1C5767000, v4, OS_LOG_TYPE_DEFAULT, "#I Power Source: %s", buf, 0xCu);
      if (v7 < 0) {
        operator delete(__p);
      }
    }
    *(_DWORD *)(a1 + 564) = a2;
    antenna::Service::Internal::sendPowerSource_sync((antenna::Service::Internal *)a1);
  }
}

void antenna::Service::Internal::sendSensorID_sync(antenna::Service::Internal *this)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if (*((_DWORD *)this + 43) == 1)
  {
    antenna::Service::Internal::sendTxPowerCappingIPadMode_sync(this);
  }
  else
  {
    size_t v2 = (std::__shared_weak_count *)*((void *)this + 10);
    if (!v2 || (uint64_t v3 = *((void *)this + 9), (v4 = std::__shared_weak_count::lock(v2)) == 0)) {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    __int16 v5 = v4;
    atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v5);
    }
    uint64_t v6 = *((unsigned char *)this + 736) & 7 | (8 * (*((unsigned char *)this + 737) & 7u));
    char v7 = *((void *)this + 5);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 67109120;
      int v16 = v6;
      _os_log_impl(&dword_1C5767000, v7, OS_LOG_TYPE_DEFAULT, "#I Sending sensor-state to BB: 0x%x", buf, 8u);
    }
    uint64_t v8 = *((void *)this + 15);
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 1174405120;
    aBlock[2] = ___ZN7antenna7Service8Internal17sendSensorID_syncEv_block_invoke;
    aBlock[3] = &__block_descriptor_tmp_18_2;
    aBlock[4] = this;
    aBlock[5] = v3;
    uint64_t v12 = v5;
    atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    xpc_object_t v9 = _Block_copy(aBlock);
    uint64_t v10 = *((void *)this + 11);
    if (v10) {
      dispatch_retain(v10);
    }
    long long v13 = v9;
    dispatch_object_t object = v10;
    (*(void (**)(uint64_t, uint64_t, void **))(*(void *)v8 + 56))(v8, v6, &v13);
    if (object) {
      dispatch_release(object);
    }
    if (v13) {
      _Block_release(v13);
    }
    if (v12) {
      std::__shared_weak_count::__release_weak(v12);
    }
    std::__shared_weak_count::__release_weak(v5);
  }
}

void sub_1C59107B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, char a17)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void ___ZN7antenna7Service8Internal17sendSensorID_syncEv_block_invoke(void *a1, char a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    uint64_t v5 = a1[4];
    uint64_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      char v7 = v6;
      uint64_t v8 = a1[5];
      if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v7);
      }
      if (v8 && (a2 & 1) == 0)
      {
        xpc_object_t v9 = *(NSObject **)(v5 + 40);
        if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)uint64_t v10 = 0;
          _os_log_error_impl(&dword_1C5767000, v9, OS_LOG_TYPE_ERROR, "Failed to send sensor ID to BB", v10, 2u);
        }
      }
    }
  }
}

void antenna::Service::Internal::reportAccessory_sync(uint64_t a1, unint64_t a2)
{
  xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
  uint64_t v5 = MEMORY[0x1E4F14590];
  if (v4 || (xpc_object_t v4 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C8792D30](v4) == v5)
    {
      xpc_retain(v4);
      xpc_object_t v6 = v4;
    }
    else
    {
      xpc_object_t v6 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v6 = xpc_null_create();
    xpc_object_t v4 = 0;
  }
  xpc_release(v4);
  xpc_object_t v7 = xpc_int64_create(HIDWORD(a2));
  if (!v7) {
    xpc_object_t v7 = xpc_null_create();
  }
  xpc_dictionary_set_value(v6, (const char *)*MEMORY[0x1E4F4C528], v7);
  xpc_object_t v8 = xpc_null_create();
  xpc_release(v7);
  xpc_release(v8);
  xpc_object_t v9 = xpc_int64_create(a2);
  if (!v9) {
    xpc_object_t v9 = xpc_null_create();
  }
  xpc_dictionary_set_value(v6, (const char *)*MEMORY[0x1E4F4C650], v9);
  xpc_object_t v10 = xpc_null_create();
  xpc_release(v9);
  xpc_release(v10);
  xpc_object_t v11 = xpc_dictionary_create(0, 0, 0);
  if (v11 || (xpc_object_t v11 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C8792D30](v11) == v5)
    {
      xpc_retain(v11);
      xpc_object_t v12 = v11;
    }
    else
    {
      xpc_object_t v12 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v12 = xpc_null_create();
    xpc_object_t v11 = 0;
  }
  xpc_release(v11);
  xpc_object_t v13 = xpc_string_create((const char *)*MEMORY[0x1E4F4D2D0]);
  if (!v13) {
    xpc_object_t v13 = xpc_null_create();
  }
  xpc_dictionary_set_value(v12, (const char *)*MEMORY[0x1E4F4C190], v13);
  xpc_object_t v14 = xpc_null_create();
  xpc_release(v13);
  xpc_release(v14);
  xpc_object_t v15 = xpc_int64_create(524584);
  if (!v15) {
    xpc_object_t v15 = xpc_null_create();
  }
  xpc_dictionary_set_value(v12, (const char *)*MEMORY[0x1E4F4C258], v15);
  xpc_object_t v16 = xpc_null_create();
  xpc_release(v15);
  xpc_release(v16);
  if (v6)
  {
    xpc_retain(v6);
    xpc_object_t v17 = v6;
  }
  else
  {
    xpc_object_t v17 = xpc_null_create();
  }
  xpc_dictionary_set_value(v12, (const char *)*MEMORY[0x1E4F4C188], v17);
  xpc_object_t v18 = xpc_null_create();
  xpc_release(v17);
  xpc_release(v18);
  xpc_object_t v19 = xpc_dictionary_create(0, 0, 0);
  if (v19 || (xpc_object_t v19 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C8792D30](v19) == v5)
    {
      xpc_retain(v19);
      xpc_object_t v20 = v19;
    }
    else
    {
      xpc_object_t v20 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v20 = xpc_null_create();
    xpc_object_t v19 = 0;
  }
  xpc_release(v19);
  xpc_object_t v21 = xpc_string_create((const char *)*MEMORY[0x1E4F4C310]);
  if (!v21) {
    xpc_object_t v21 = xpc_null_create();
  }
  xpc_dictionary_set_value(v20, (const char *)*MEMORY[0x1E4F4C7D8], v21);
  xpc_object_t v22 = xpc_null_create();
  xpc_release(v21);
  xpc_release(v22);
  if (v12)
  {
    xpc_retain(v12);
    xpc_object_t v23 = v12;
  }
  else
  {
    xpc_object_t v23 = xpc_null_create();
  }
  xpc_dictionary_set_value(v20, (const char *)*MEMORY[0x1E4F4C338], v23);
  xpc_object_t v24 = xpc_null_create();
  xpc_release(v23);
  xpc_release(v24);
  if (v20)
  {
    xpc_retain(v20);
    xpc_object_t v25 = v20;
    uint64_t v26 = *(const void **)(a1 + 104);
    if (v26)
    {
LABEL_37:
      int v27 = _Block_copy(v26);
      goto LABEL_40;
    }
  }
  else
  {
    xpc_object_t v25 = xpc_null_create();
    uint64_t v26 = *(const void **)(a1 + 104);
    if (v26) {
      goto LABEL_37;
    }
  }
  int v27 = 0;
LABEL_40:
  size_t v28 = *(NSObject **)(a1 + 112);
  v29[0] = MEMORY[0x1E4F143A8];
  v29[1] = 1174405120;
  v29[2] = ___ZNK8dispatch8callbackIU13block_pointerFvN3xpc4dictEEEclIJS2_EEEvDpT__block_invoke_0;
  v29[3] = &__block_descriptor_tmp_128_1;
  if (v27)
  {
    aBlocuint64_t k = _Block_copy(v27);
    xpc_object_t object = v25;
    if (v25)
    {
LABEL_42:
      xpc_retain(v25);
      goto LABEL_45;
    }
  }
  else
  {
    aBlocuint64_t k = 0;
    xpc_object_t object = v25;
    if (v25) {
      goto LABEL_42;
    }
  }
  xpc_object_t object = xpc_null_create();
LABEL_45:
  dispatch_async(v28, v29);
  xpc_release(object);
  xpc_object_t object = 0;
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v27) {
    _Block_release(v27);
  }
  xpc_release(v25);
  xpc_release(v20);
  xpc_release(v12);
  xpc_release(v6);
}

void antenna::Service::Internal::sendAudioSpeaker_sync(antenna::Service::Internal *this)
{
  xpc_object_t v2 = xpc_dictionary_create(0, 0, 0);
  if (v2 || (xpc_object_t v2 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C8792D30](v2) == MEMORY[0x1E4F14590])
    {
      xpc_retain(v2);
      xpc_object_t v3 = v2;
    }
    else
    {
      xpc_object_t v3 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v3 = xpc_null_create();
    xpc_object_t v2 = 0;
  }
  xpc_release(v2);
  xpc_object_t v4 = xpc_string_create((const char *)*MEMORY[0x1E4FB9CD8]);
  if (!v4) {
    xpc_object_t v4 = xpc_null_create();
  }
  xpc_dictionary_set_value(v3, (const char *)*MEMORY[0x1E4FB9C68], v4);
  xpc_object_t v5 = xpc_null_create();
  xpc_release(v4);
  xpc_release(v5);
  xpc_object_t v6 = xpc_BOOL_create(*((unsigned char *)this + 335));
  if (!v6) {
    xpc_object_t v6 = xpc_null_create();
  }
  xpc_dictionary_set_value(v3, (const char *)*MEMORY[0x1E4FB9CB8], v6);
  xpc_object_t v7 = xpc_null_create();
  xpc_release(v6);
  xpc_release(v7);
  xpc_object_t object = v3;
  if (v3) {
    xpc_retain(v3);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  v8[0] = 0;
  v8[1] = 0;
  antenna::Service::Internal::performCommandDriver_sync(this, &object, (uint64_t)v8);
  xpc_release(object);
  xpc_object_t object = 0;
  xpc_release(v3);
}

void sub_1C5910FF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, xpc_object_t object)
{
  dispatch::callback<void({block_pointer})(xpc::object)>::~callback((uint64_t)&a10);
  xpc_release(object);
  xpc_object_t object = 0;
  xpc_release(v12);
  _Unwind_Resume(a1);
}

void antenna::Service::Internal::sendAudioSpeaker(antenna::Service::Internal *this)
{
  xpc_object_t v2 = (std::__shared_weak_count *)*((void *)this + 10);
  if (!v2 || (uint64_t v3 = *((void *)this + 9), (v4 = std::__shared_weak_count::lock(v2)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  xpc_object_t v5 = v4;
  xpc_object_t v6 = operator new(8uLL);
  *xpc_object_t v6 = this;
  xpc_object_t v7 = *((void *)this + 11);
  atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  xpc_object_t v8 = operator new(0x18uLL);
  *xpc_object_t v8 = v6;
  v8[1] = v3;
  void v8[2] = v5;
  dispatch_async_f(v7, v8, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<antenna::Service::Internal>::execute_wrapped<antenna::Service::Internal::sendAudioSpeaker(void)::$_0>(antenna::Service::Internal::sendAudioSpeaker(void)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<antenna::Service::Internal::sendAudioSpeaker(void)::$_0,dispatch_queue_s *::default_delete<antenna::Service::Internal::sendAudioSpeaker(void)::$_0>>)::{lambda(void *)#1}::__invoke);
  if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

BOOL antenna::Service::Internal::isPowerSourceOverridden_sync(antenna::Service::Internal *this)
{
  if (*((_DWORD *)this + 142) == -1) {
    return 0;
  }
  if (TelephonyUtilIsInternalBuild()) {
    return 1;
  }
  return (TelephonyUtilIsCarrierBuild() & 1) != 0;
}

uint64_t antenna::Service::Internal::getPowerSourceState_sync(antenna::Service::Internal *this)
{
  if (*((_DWORD *)this + 142) == -1
    || (xpc_object_t v2 = (char *)this + 568, (TelephonyUtilIsInternalBuild() & 1) == 0) && (TelephonyUtilIsCarrierBuild() & 1) == 0)
  {
    xpc_object_t v2 = (char *)this + 564;
  }
  return *(unsigned int *)v2;
}

uint64_t **std::map<unsigned int,unsigned int>::operator[](uint64_t **a1, unsigned int a2)
{
  xpc_object_t v5 = a1 + 1;
  xpc_object_t v4 = a1[1];
  if (v4)
  {
    while (1)
    {
      while (1)
      {
        xpc_object_t v6 = (uint64_t **)v4;
        unsigned int v7 = *((_DWORD *)v4 + 7);
        if (v7 <= a2) {
          break;
        }
        xpc_object_t v4 = *v6;
        xpc_object_t v5 = v6;
        if (!*v6) {
          goto LABEL_8;
        }
      }
      if (v7 >= a2) {
        break;
      }
      xpc_object_t v4 = v6[1];
      if (!v4)
      {
        xpc_object_t v5 = v6 + 1;
        goto LABEL_8;
      }
    }
  }
  else
  {
    xpc_object_t v6 = a1 + 1;
LABEL_8:
    xpc_object_t v8 = (uint64_t *)v6;
    xpc_object_t v6 = (uint64_t **)operator new(0x28uLL);
    *((_DWORD *)v6 + 7) = a2;
    *((_DWORD *)v6 + 8) = 0;
    *xpc_object_t v6 = 0;
    v6[1] = 0;
    void v6[2] = v8;
    *xpc_object_t v5 = (uint64_t *)v6;
    xpc_object_t v9 = (uint64_t *)**a1;
    xpc_object_t v10 = (uint64_t *)v6;
    if (v9)
    {
      *a1 = v9;
      xpc_object_t v10 = *v5;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v10);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v6 + 4;
}

void antenna::Service::Internal::sendWorkoutInfo_sync(antenna::Service::Internal *this)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  xpc_object_t v2 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v3 = v2;
  if (v2)
  {
    xpc_object_t xdict = v2;
  }
  else
  {
    xpc_object_t v3 = xpc_null_create();
    xpc_object_t xdict = v3;
    if (!v3)
    {
      xpc_object_t v4 = xpc_null_create();
      xpc_object_t v3 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1C8792D30](v3) == MEMORY[0x1E4F14590])
  {
    xpc_retain(v3);
    goto LABEL_9;
  }
  xpc_object_t v4 = xpc_null_create();
LABEL_8:
  xpc_object_t xdict = v4;
LABEL_9:
  xpc_release(v3);
  xpc_object_t v5 = xpc_string_create((const char *)*MEMORY[0x1E4FB9CD0]);
  if (!v5) {
    xpc_object_t v5 = xpc_null_create();
  }
  xpc_object_t v6 = xdict;
  xpc_dictionary_set_value(xdict, (const char *)*MEMORY[0x1E4FB9C68], v5);
  xpc_object_t v7 = xpc_null_create();
  xpc_release(v5);
  xpc_release(v7);
  xpc_object_t v8 = xpc_int64_create(*((unsigned int *)this + 180));
  if (!v8) {
    xpc_object_t v8 = xpc_null_create();
  }
  xpc_dictionary_set_value(xdict, "kKeyWorkoutType", v8);
  xpc_object_t v9 = xpc_null_create();
  xpc_release(v8);
  xpc_release(v9);
  xpc_object_t v10 = xpc_int64_create(*((unsigned int *)this + 181));
  if (!v10) {
    xpc_object_t v10 = xpc_null_create();
  }
  xpc_dictionary_set_value(xdict, "kKeyWorkoutState", v10);
  xpc_object_t v11 = xpc_null_create();
  xpc_release(v10);
  xpc_release(v11);
  xpc_object_t v12 = xpc_int64_create(*((unsigned int *)this + 182));
  if (!v12) {
    xpc_object_t v12 = xpc_null_create();
  }
  xpc_dictionary_set_value(xdict, "kKeyWorkoutLocation", v12);
  xpc_object_t v13 = xpc_null_create();
  xpc_release(v12);
  xpc_release(v13);
  xpc_object_t v14 = xpc_int64_create(*((unsigned int *)this + 183));
  if (!v14) {
    xpc_object_t v14 = xpc_null_create();
  }
  xpc_dictionary_set_value(xdict, "kKeySwimLocation", v14);
  xpc_object_t v15 = xpc_null_create();
  xpc_release(v14);
  xpc_release(v15);
  xpc_object_t v16 = *((void *)this + 5);
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
    xpc::object::to_string((uint64_t *)__p, (xpc::object *)&xdict);
    if (v21 >= 0) {
      xpc_object_t v17 = __p;
    }
    else {
      xpc_object_t v17 = (void **)__p[0];
    }
    *(_DWORD *)long long buf = 136315138;
    xpc_object_t v24 = v17;
    _os_log_impl(&dword_1C5767000, v16, OS_LOG_TYPE_DEFAULT, "#I Sending workout info: %s\n", buf, 0xCu);
    if (v21 < 0) {
      operator delete(__p[0]);
    }
    xpc_object_t v6 = xdict;
  }
  xpc_object_t v19 = v6;
  if (v6)
  {
    xpc_retain(v6);
  }
  else
  {
    xpc_object_t v6 = xpc_null_create();
    xpc_object_t v19 = v6;
  }
  v18[0] = 0;
  v18[1] = 0;
  antenna::Service::Internal::performCommandDriver_sync(this, &v19, (uint64_t)v18);
  xpc_release(v6);
  xpc_object_t v19 = 0;
  xpc_release(xdict);
}

void sub_1C59115A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, xpc_object_t object)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void antenna::Service::Internal::handleDumpState_sync(antenna::Service::Internal *this)
{
  uint64_t v127 = *MEMORY[0x1E4F143B8];
  xpc_object_t v2 = *((void *)this + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(__p) = 0;
    _os_log_impl(&dword_1C5767000, v2, OS_LOG_TYPE_DEFAULT, "#I --------------- ABM Antenna state ---------------", (uint8_t *)&__p, 2u);
    xpc_object_t v2 = *((void *)this + 5);
    if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
LABEL_3:
      if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_4;
      }
LABEL_19:
      xpc::object::to_string((uint64_t *)&__p, (antenna::Service::Internal *)((char *)this + 224));
      if (v124[0] >= 0) {
        p_p = (const char *)&__p;
      }
      else {
        p_p = (const char *)__p;
      }
      *(_DWORD *)long long buf = 136315138;
      unint64_t v126 = p_p;
      _os_log_impl(&dword_1C5767000, v2, OS_LOG_TYPE_DEFAULT, "#I Transmit state: %s", buf, 0xCu);
      if (SHIBYTE(v124[0]) < 0)
      {
        operator delete((void *)__p);
        xpc_object_t v2 = *((void *)this + 5);
        if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_26;
        }
      }
      else
      {
        xpc_object_t v2 = *((void *)this + 5);
        if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_26;
        }
      }
LABEL_5:
      if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_6;
      }
      goto LABEL_30;
    }
  }
  else if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    goto LABEL_3;
  }
  int v3 = *((unsigned __int8 *)this + 216);
  LODWORD(__p) = 67109120;
  DWORD1(__p) = v3;
  _os_log_impl(&dword_1C5767000, v2, OS_LOG_TYPE_DEFAULT, "#I fTransmitting=%u", (uint8_t *)&__p, 8u);
  xpc_object_t v2 = *((void *)this + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT)) {
    goto LABEL_19;
  }
LABEL_4:
  if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT)) {
    goto LABEL_5;
  }
LABEL_26:
  if (*((unsigned char *)this + 476)) {
    xpc_object_t v5 = (uint64_t *)MEMORY[0x1E4F4C100];
  }
  else {
    xpc_object_t v5 = (uint64_t *)MEMORY[0x1E4F4D2C8];
  }
  uint64_t v6 = *v5;
  LODWORD(__p) = 136315138;
  *(void *)((char *)&__p + 4) = v6;
  _os_log_impl(&dword_1C5767000, v2, OS_LOG_TYPE_DEFAULT, "#I CLTM/PPM Overriding State: %s", (uint8_t *)&__p, 0xCu);
  xpc_object_t v2 = *((void *)this + 5);
  if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
LABEL_6:
    if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_7;
    }
    goto LABEL_31;
  }
LABEL_30:
  LOWORD(__p) = 0;
  _os_log_impl(&dword_1C5767000, v2, OS_LOG_TYPE_DEFAULT, "#I CLTM/PPM power/duty cycle (0.1%% units):", (uint8_t *)&__p, 2u);
  xpc_object_t v2 = *((void *)this + 5);
  if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
LABEL_7:
    if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_8;
    }
    goto LABEL_32;
  }
LABEL_31:
  int v7 = *((_DWORD *)this + 116);
  LODWORD(__p) = 67109120;
  DWORD1(__p) = v7;
  _os_log_impl(&dword_1C5767000, v2, OS_LOG_TYPE_DEFAULT, "#I CLTM/PPM power backoff : %d", (uint8_t *)&__p, 8u);
  xpc_object_t v2 = *((void *)this + 5);
  if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
LABEL_8:
    if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_9;
    }
    goto LABEL_33;
  }
LABEL_32:
  int v8 = *((_DWORD *)this + 117);
  LODWORD(__p) = 67109120;
  DWORD1(__p) = v8;
  _os_log_impl(&dword_1C5767000, v2, OS_LOG_TYPE_DEFAULT, "#I CLTM/PPM duty cycle: %d", (uint8_t *)&__p, 8u);
  xpc_object_t v2 = *((void *)this + 5);
  if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
LABEL_9:
    if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_10;
    }
    goto LABEL_34;
  }
LABEL_33:
  LOWORD(__p) = 0;
  _os_log_impl(&dword_1C5767000, v2, OS_LOG_TYPE_DEFAULT, "#I CLTM/PPM Radio Max Power Unit: mW:", (uint8_t *)&__p, 2u);
  xpc_object_t v2 = *((void *)this + 5);
  if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
LABEL_10:
    if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_11;
    }
    goto LABEL_35;
  }
LABEL_34:
  int v9 = *((_DWORD *)this + 118);
  LODWORD(__p) = 67109120;
  DWORD1(__p) = v9;
  _os_log_impl(&dword_1C5767000, v2, OS_LOG_TYPE_DEFAULT, "#I CLTM/PPM Radio Max Power: %d", (uint8_t *)&__p, 8u);
  xpc_object_t v2 = *((void *)this + 5);
  if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
LABEL_11:
    if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_12;
    }
    goto LABEL_36;
  }
LABEL_35:
  int v10 = *((unsigned __int8 *)this + 156);
  LODWORD(__p) = 67109120;
  DWORD1(__p) = v10;
  _os_log_impl(&dword_1C5767000, v2, OS_LOG_TYPE_DEFAULT, "#I Accessory support for RF: %d", (uint8_t *)&__p, 8u);
  xpc_object_t v2 = *((void *)this + 5);
  if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
LABEL_12:
    if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_13;
    }
    goto LABEL_37;
  }
LABEL_36:
  int v11 = *((unsigned __int8 *)this + 158);
  LODWORD(__p) = 67109120;
  DWORD1(__p) = v11;
  _os_log_impl(&dword_1C5767000, v2, OS_LOG_TYPE_DEFAULT, "#I Accessory support for ARTD: %d", (uint8_t *)&__p, 8u);
  xpc_object_t v2 = *((void *)this + 5);
  if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
LABEL_13:
    if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_14;
    }
    goto LABEL_38;
  }
LABEL_37:
  int v12 = *((unsigned __int8 *)this + 157);
  LODWORD(__p) = 67109120;
  DWORD1(__p) = v12;
  _os_log_impl(&dword_1C5767000, v2, OS_LOG_TYPE_DEFAULT, "#I Accessory type support for RF: %d", (uint8_t *)&__p, 8u);
  xpc_object_t v2 = *((void *)this + 5);
  if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
LABEL_14:
    if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_15;
    }
    goto LABEL_39;
  }
LABEL_38:
  int v13 = *((unsigned __int8 *)this + 159);
  LODWORD(__p) = 67109120;
  DWORD1(__p) = v13;
  _os_log_impl(&dword_1C5767000, v2, OS_LOG_TYPE_DEFAULT, "#I Accessory type support for ARTD: %d", (uint8_t *)&__p, 8u);
  xpc_object_t v2 = *((void *)this + 5);
  if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
LABEL_15:
    if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_45;
    }
    goto LABEL_42;
  }
LABEL_39:
  xpc_object_t v14 = (void *)((char *)this + 392);
  if (*((char *)this + 415) < 0) {
    xpc_object_t v14 = (void *)*v14;
  }
  LODWORD(__p) = 136315138;
  *(void *)((char *)&__p + 4) = v14;
  _os_log_impl(&dword_1C5767000, v2, OS_LOG_TYPE_DEFAULT, "#I Accessory overridden state: %s", (uint8_t *)&__p, 0xCu);
  xpc_object_t v2 = *((void *)this + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
LABEL_42:
    xpc_object_t v15 = (void *)((char *)this + 416);
    if (*((char *)this + 439) < 0) {
      xpc_object_t v15 = (void *)*v15;
    }
    LODWORD(__p) = 136315138;
    *(void *)((char *)&__p + 4) = v15;
    _os_log_impl(&dword_1C5767000, v2, OS_LOG_TYPE_DEFAULT, "#I Accessory overridden type: %s", (uint8_t *)&__p, 0xCu);
  }
LABEL_45:
  antenna::Service::Internal::getAccessoryState_sync(this);
  xpc_object_t v16 = *((void *)this + 5);
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
    ctu::iokit::asString();
    if (v124[0] >= 0) {
      xpc_object_t v17 = (const char *)&__p;
    }
    else {
      xpc_object_t v17 = (const char *)__p;
    }
    *(_DWORD *)long long buf = 136315138;
    unint64_t v126 = v17;
    _os_log_impl(&dword_1C5767000, v16, OS_LOG_TYPE_DEFAULT, "#I Accessory connected: %s", buf, 0xCu);
    if (SHIBYTE(v124[0]) < 0) {
      operator delete((void *)__p);
    }
    xpc_object_t v16 = *((void *)this + 5);
  }
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
    ctu::iokit::asString();
    if (v124[0] >= 0) {
      xpc_object_t v18 = (const char *)&__p;
    }
    else {
      xpc_object_t v18 = (const char *)__p;
    }
    *(_DWORD *)long long buf = 136315138;
    unint64_t v126 = v18;
    _os_log_impl(&dword_1C5767000, v16, OS_LOG_TYPE_DEFAULT, "#I Accessory type: %s", buf, 0xCu);
    if (SHIBYTE(v124[0]) < 0) {
      operator delete((void *)__p);
    }
    xpc_object_t v16 = *((void *)this + 5);
  }
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
    int v19 = *((unsigned __int8 *)this + 163);
    LODWORD(__p) = 67109120;
    DWORD1(__p) = v19;
    _os_log_impl(&dword_1C5767000, v16, OS_LOG_TYPE_DEFAULT, "#I Antenna Switching support: %d", (uint8_t *)&__p, 8u);
    xpc_object_t v16 = *((void *)this + 5);
    if (!os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
LABEL_61:
      if (!os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_62;
      }
      goto LABEL_67;
    }
  }
  else if (!os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
    goto LABEL_61;
  }
  int v20 = *((unsigned __int8 *)this + 164);
  LODWORD(__p) = 67109120;
  DWORD1(__p) = v20;
  _os_log_impl(&dword_1C5767000, v16, OS_LOG_TYPE_DEFAULT, "#I Antenna switched: %d", (uint8_t *)&__p, 8u);
  xpc_object_t v16 = *((void *)this + 5);
  if (!os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
LABEL_62:
    if (!os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_63;
    }
    goto LABEL_68;
  }
LABEL_67:
  int v21 = *((unsigned __int8 *)this + 162);
  LODWORD(__p) = 67109120;
  DWORD1(__p) = v21;
  _os_log_impl(&dword_1C5767000, v16, OS_LOG_TYPE_DEFAULT, "#I MESA supported: %d", (uint8_t *)&__p, 8u);
  xpc_object_t v16 = *((void *)this + 5);
  if (!os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
LABEL_63:
    if (!*((unsigned char *)this + 152)) {
      goto LABEL_143;
    }
    goto LABEL_69;
  }
LABEL_68:
  int v22 = *((_DWORD *)this + 121);
  LODWORD(__p) = 67109120;
  DWORD1(__p) = v22;
  _os_log_impl(&dword_1C5767000, v16, OS_LOG_TYPE_DEFAULT, "#I MESA level: %d", (uint8_t *)&__p, 8u);
  if (!*((unsigned char *)this + 152)) {
    goto LABEL_143;
  }
LABEL_69:
  xpc_object_t v23 = *((void *)this + 5);
  if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
  {
    long long __p = 0uLL;
    v124[0] = 0;
    int v24 = *((_DWORD *)this + 52) - 1;
    if (v24 < 4) {
      std::string::__assign_external((std::string *)&__p, **((const std::string::value_type ***)&unk_1E6518150 + v24));
    }
    uint64_t v25 = (const char *)&__p;
    if (v124[0] < 0) {
      uint64_t v25 = (const char *)__p;
    }
    *(_DWORD *)long long buf = 136315138;
    unint64_t v126 = v25;
    _os_log_impl(&dword_1C5767000, v23, OS_LOG_TYPE_DEFAULT, "#I Tx Power Enhanced Detection Mode: %s", buf, 0xCu);
    if (SHIBYTE(v124[0]) < 0) {
      operator delete((void *)__p);
    }
    xpc_object_t v23 = *((void *)this + 5);
  }
  if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
  {
    antenna::Service::Internal::getTxPowerAudioModeString(this, (std::string *)&__p);
    if (v124[0] >= 0) {
      uint64_t v26 = (const char *)&__p;
    }
    else {
      uint64_t v26 = (const char *)__p;
    }
    *(_DWORD *)long long buf = 136315138;
    unint64_t v126 = v26;
    _os_log_impl(&dword_1C5767000, v23, OS_LOG_TYPE_DEFAULT, "#I Tx Power Audio Mode: %s", buf, 0xCu);
    if (SHIBYTE(v124[0]) < 0) {
      operator delete((void *)__p);
    }
    xpc_object_t v23 = *((void *)this + 5);
  }
  if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
  {
    if (*((unsigned char *)this + 333)) {
      int v27 = "ON";
    }
    else {
      int v27 = "OFF";
    }
    LODWORD(__p) = 136315138;
    *(void *)((char *)&__p + 4) = v27;
    _os_log_impl(&dword_1C5767000, v23, OS_LOG_TYPE_DEFAULT, "#I Tx Power Audio Alert: %s", (uint8_t *)&__p, 0xCu);
    xpc_object_t v23 = *((void *)this + 5);
  }
  if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
  {
    size_t v28 = (uint64_t *)*((void *)this + 36);
    if (v28)
    {
      while (1)
      {
        while (1)
        {
          size_t v30 = (uint64_t **)v28;
          int v31 = *((_DWORD *)v28 + 7);
          if (v31 < 1) {
            break;
          }
          size_t v28 = *v30;
          size_t v29 = v30;
          if (!*v30) {
            goto LABEL_97;
          }
        }
        if ((v31 & 0x80000000) == 0) {
          break;
        }
        size_t v28 = v30[1];
        if (!v28)
        {
          size_t v29 = v30 + 1;
          goto LABEL_97;
        }
      }
      size_t v32 = v30;
    }
    else
    {
      size_t v29 = (uint64_t **)((char *)this + 288);
      size_t v30 = (uint64_t **)((char *)this + 288);
LABEL_97:
      size_t v32 = operator new(0x28uLL);
      v32[7] = 0;
      *((unsigned char *)v32 + 32) = 0;
      *(void *)size_t v32 = 0;
      *((void *)v32 + 1) = 0;
      *((void *)v32 + 2) = v30;
      *size_t v29 = (uint64_t *)v32;
      uint64_t v33 = **((void **)this + 35);
      int v34 = (uint64_t *)v32;
      if (v33)
      {
        *((void *)this + 35) = v33;
        int v34 = *v29;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 36), v34);
      ++*((void *)this + 37);
    }
    if (*((unsigned char *)v32 + 32)) {
      xpc_object_t v35 = "ON";
    }
    else {
      xpc_object_t v35 = "OFF";
    }
    LODWORD(__p) = 136315138;
    *(void *)((char *)&__p + 4) = v35;
    _os_log_impl(&dword_1C5767000, v23, OS_LOG_TYPE_DEFAULT, "#I Tx Power Receiver Audio State: %s", (uint8_t *)&__p, 0xCu);
    xpc_object_t v23 = *((void *)this + 5);
  }
  if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
  {
    size_t v36 = (uint64_t *)*((void *)this + 36);
    if (v36)
    {
      while (1)
      {
        while (1)
        {
          uint64_t v38 = (uint64_t **)v36;
          int v39 = *((_DWORD *)v36 + 7);
          if (v39 < 2) {
            break;
          }
          size_t v36 = *v38;
          BOOL v37 = v38;
          if (!*v38) {
            goto LABEL_112;
          }
        }
        if (v39 == 1) {
          break;
        }
        size_t v36 = v38[1];
        if (!v36)
        {
          BOOL v37 = v38 + 1;
          goto LABEL_112;
        }
      }
      unsigned int v40 = v38;
    }
    else
    {
      BOOL v37 = (uint64_t **)((char *)this + 288);
      uint64_t v38 = (uint64_t **)((char *)this + 288);
LABEL_112:
      unsigned int v40 = operator new(0x28uLL);
      v40[7] = 1;
      *((unsigned char *)v40 + 32) = 0;
      *(void *)unsigned int v40 = 0;
      *((void *)v40 + 1) = 0;
      *((void *)v40 + 2) = v38;
      *BOOL v37 = (uint64_t *)v40;
      uint64_t v41 = **((void **)this + 35);
      int v42 = (uint64_t *)v40;
      if (v41)
      {
        *((void *)this + 35) = v41;
        int v42 = *v37;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 36), v42);
      ++*((void *)this + 37);
    }
    if (*((unsigned char *)v40 + 32)) {
      xpc_object_t v43 = "ON";
    }
    else {
      xpc_object_t v43 = "OFF";
    }
    LODWORD(__p) = 136315138;
    *(void *)((char *)&__p + 4) = v43;
    _os_log_impl(&dword_1C5767000, v23, OS_LOG_TYPE_DEFAULT, "#I Tx Power Other Audio State: %s", (uint8_t *)&__p, 0xCu);
    xpc_object_t v23 = *((void *)this + 5);
  }
  if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
  {
    int v44 = (uint64_t *)*((void *)this + 36);
    if (v44)
    {
      while (1)
      {
        while (1)
        {
          unsigned int v46 = (uint64_t **)v44;
          int v47 = *((_DWORD *)v44 + 7);
          if (v47 < 4) {
            break;
          }
          int v44 = *v46;
          size_t v45 = v46;
          if (!*v46) {
            goto LABEL_128;
          }
        }
        if (v47 == 3) {
          break;
        }
        int v44 = v46[1];
        if (!v44)
        {
          size_t v45 = v46 + 1;
          goto LABEL_128;
        }
      }
      size_t v48 = v46;
    }
    else
    {
      size_t v45 = (uint64_t **)((char *)this + 288);
      unsigned int v46 = (uint64_t **)((char *)this + 288);
LABEL_128:
      size_t v48 = operator new(0x28uLL);
      v48[7] = 3;
      *((unsigned char *)v48 + 32) = 0;
      *(void *)size_t v48 = 0;
      *((void *)v48 + 1) = 0;
      *((void *)v48 + 2) = v46;
      *size_t v45 = (uint64_t *)v48;
      uint64_t v49 = **((void **)this + 35);
      long long v50 = (uint64_t *)v48;
      if (v49)
      {
        *((void *)this + 35) = v49;
        long long v50 = *v45;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 36), v50);
      ++*((void *)this + 37);
    }
    if (*((unsigned char *)v48 + 32)) {
      uint64_t v51 = "ON";
    }
    else {
      uint64_t v51 = "OFF";
    }
    LODWORD(__p) = 136315138;
    *(void *)((char *)&__p + 4) = v51;
    _os_log_impl(&dword_1C5767000, v23, OS_LOG_TYPE_DEFAULT, "#I Tx Power Speaker Audio State: %s", (uint8_t *)&__p, 0xCu);
    xpc_object_t v23 = *((void *)this + 5);
  }
  if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
  {
    if (*((_DWORD *)this + 63)) {
      long long v52 = "On-Body";
    }
    else {
      long long v52 = "Off-Body";
    }
    LODWORD(__p) = 136315138;
    *(void *)((char *)&__p + 4) = v52;
    _os_log_impl(&dword_1C5767000, v23, OS_LOG_TYPE_DEFAULT, "#I Tx Power Motion State: %s", (uint8_t *)&__p, 0xCu);
    xpc_object_t v23 = *((void *)this + 5);
  }
  if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v53 = *((void *)this + 33);
    LODWORD(__p) = 134217984;
    *(void *)((char *)&__p + 4) = v53;
    _os_log_impl(&dword_1C5767000, v23, OS_LOG_TYPE_DEFAULT, "#I Tx Power Enhanced Motion fail counter: %lld", (uint8_t *)&__p, 0xCu);
  }
LABEL_143:
  if (*((unsigned char *)this + 153))
  {
    int v54 = *((void *)this + 5);
    if (os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(__p) = 136315138;
      *(void *)((char *)&__p + 4) = "ON";
      _os_log_impl(&dword_1C5767000, v54, OS_LOG_TYPE_DEFAULT, "#I Tx Power Capping for iPad based on Motion support: %s", (uint8_t *)&__p, 0xCu);
      int v54 = *((void *)this + 5);
    }
    if (os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT))
    {
      long long __p = 0uLL;
      v124[0] = 0;
      uint64_t v55 = *((int *)this + 68);
      if (v55 < 3) {
        std::string::__assign_external((std::string *)&__p, **((const std::string::value_type ***)&unk_1E6518170 + v55));
      }
      xpc_object_t v56 = (const char *)&__p;
      if (v124[0] < 0) {
        xpc_object_t v56 = (const char *)__p;
      }
      *(_DWORD *)long long buf = 136315138;
      unint64_t v126 = v56;
      _os_log_impl(&dword_1C5767000, v54, OS_LOG_TYPE_DEFAULT, "#I Tx Power Capping for iPad Motion Mode: %s", buf, 0xCu);
      if (SHIBYTE(v124[0]) < 0) {
        operator delete((void *)__p);
      }
      int v54 = *((void *)this + 5);
    }
    if (os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT))
    {
      if (*((_DWORD *)this + 63)) {
        unint64_t v57 = "On-Body";
      }
      else {
        unint64_t v57 = "Off-Body";
      }
      LODWORD(__p) = 136315138;
      *(void *)((char *)&__p + 4) = v57;
      _os_log_impl(&dword_1C5767000, v54, OS_LOG_TYPE_DEFAULT, "#I Tx Power Capping for iPad Motion State: %s", (uint8_t *)&__p, 0xCu);
      int v54 = *((void *)this + 5);
    }
    if (os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT))
    {
      if (*((unsigned char *)this + 248)) {
        xpc_object_t v58 = "RUNNING";
      }
      else {
        xpc_object_t v58 = "OFF";
      }
      LODWORD(__p) = 136315138;
      *(void *)((char *)&__p + 4) = v58;
      _os_log_impl(&dword_1C5767000, v54, OS_LOG_TYPE_DEFAULT, "#I Tx Power Capping for iPad Motion Algorithm: %s", (uint8_t *)&__p, 0xCu);
    }
  }
  if (*((unsigned char *)this + 155))
  {
    unint64_t v59 = *((void *)this + 5);
    if (os_log_type_enabled(v59, OS_LOG_TYPE_DEFAULT))
    {
      *(void *)&long long __p = 0x104000100;
      _os_log_impl(&dword_1C5767000, v59, OS_LOG_TYPE_DEFAULT, "#I Tx Power Capping for iPhone with Motion Always Supported: %d", (uint8_t *)&__p, 8u);
      unint64_t v59 = *((void *)this + 5);
      if (!os_log_type_enabled(v59, OS_LOG_TYPE_DEFAULT))
      {
LABEL_167:
        if (!os_log_type_enabled(v59, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_172;
        }
        goto LABEL_168;
      }
    }
    else if (!os_log_type_enabled(v59, OS_LOG_TYPE_DEFAULT))
    {
      goto LABEL_167;
    }
    if (*((_DWORD *)this + 63)) {
      int v64 = "On-Body";
    }
    else {
      int v64 = "Off-Body";
    }
    LODWORD(__p) = 136315138;
    *(void *)((char *)&__p + 4) = v64;
    _os_log_impl(&dword_1C5767000, v59, OS_LOG_TYPE_DEFAULT, "#I Tx Power Capping for iPhone with Motion State: %s", (uint8_t *)&__p, 0xCu);
    unint64_t v59 = *((void *)this + 5);
    if (os_log_type_enabled(v59, OS_LOG_TYPE_DEFAULT))
    {
LABEL_168:
      if (*((unsigned char *)this + 248)) {
        int v60 = "RUNNING";
      }
      else {
        int v60 = "OFF";
      }
      LODWORD(__p) = 136315138;
      *(void *)((char *)&__p + 4) = v60;
      _os_log_impl(&dword_1C5767000, v59, OS_LOG_TYPE_DEFAULT, "#I Tx Power Capping for iPhone with Motion Algorithm: %s", (uint8_t *)&__p, 0xCu);
    }
  }
LABEL_172:
  if (!*((unsigned char *)this + 154)) {
    goto LABEL_198;
  }
  size_t v61 = *((void *)this + 5);
  if (os_log_type_enabled(v61, OS_LOG_TYPE_DEFAULT))
  {
    *(void *)&long long __p = 0x104000100;
    _os_log_impl(&dword_1C5767000, v61, OS_LOG_TYPE_DEFAULT, "#I Tx Power Antenna Free Space Configuration Support: %d", (uint8_t *)&__p, 8u);
    size_t v61 = *((void *)this + 5);
  }
  if (os_log_type_enabled(v61, OS_LOG_TYPE_DEFAULT))
  {
    if ((TelephonyUtilIsInternalBuild() & 1) == 0 && !TelephonyUtilIsCarrierBuild()
      || (int v62 = *((_DWORD *)this + 53), v62 == 255))
    {
      if (antenna::Service::Internal::isAudioReceiverOutputOnlyActive(this))
      {
        size_t v63 = "Not Free Space";
LABEL_191:
        LODWORD(__p) = 136315138;
        *(void *)((char *)&__p + 4) = v63;
        _os_log_impl(&dword_1C5767000, v61, OS_LOG_TYPE_DEFAULT, "#I Tx Power Antenna Free Space Config: %s", (uint8_t *)&__p, 0xCu);
        size_t v61 = *((void *)this + 5);
        goto LABEL_192;
      }
      int v62 = *((_DWORD *)this + 63) != 0;
    }
    if (v62) {
      size_t v63 = "Not Free Space";
    }
    else {
      size_t v63 = "Free Space";
    }
    goto LABEL_191;
  }
LABEL_192:
  if (os_log_type_enabled(v61, OS_LOG_TYPE_DEFAULT))
  {
    antenna::Service::Internal::getTxPowerCappingIPhoneOverriddenFreeSpaceString_sync(this, (std::string *)&__p);
    unint64_t v65 = v124[0] >= 0 ? (const char *)&__p : (const char *)__p;
    *(_DWORD *)long long buf = 136315138;
    unint64_t v126 = v65;
    _os_log_impl(&dword_1C5767000, v61, OS_LOG_TYPE_DEFAULT, "#I Tx Power Overridden Free Space: %s", buf, 0xCu);
    if (SHIBYTE(v124[0]) < 0) {
      operator delete((void *)__p);
    }
  }
LABEL_198:
  pthread_mutex_lock(&ctu::Singleton<Capabilities,Capabilities,ctu::PthreadMutexGuardPolicy<Capabilities>>::sInstance);
  xpc_object_t v66 = (Capabilities *)qword_1EBBDD070;
  if (!qword_1EBBDD070)
  {
    xpc_object_t v67 = operator new(1uLL);
    std::string v68 = operator new(0x20uLL);
    *std::string v68 = &unk_1F20F7BD0;
    v68[1] = 0;
    v68[2] = 0;
    v68[3] = v67;
    xpc_object_t v69 = (std::__shared_weak_count *)off_1EBBDD078;
    qword_1EBBDD070 = (uint64_t)v67;
    off_1EBBDD078 = v68;
    if (v69 && !atomic_fetch_add(&v69->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
      std::__shared_weak_count::__release_weak(v69);
    }
    xpc_object_t v66 = (Capabilities *)qword_1EBBDD070;
  }
  uint64_t v70 = (std::__shared_weak_count *)off_1EBBDD078;
  *(void *)&long long __p = v66;
  *((void *)&__p + 1) = off_1EBBDD078;
  if (off_1EBBDD078) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)off_1EBBDD078 + 1, 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<Capabilities,Capabilities,ctu::PthreadMutexGuardPolicy<Capabilities>>::sInstance);
  int isCMHandDetectionSupported = Capabilities::isCMHandDetectionSupported(v66);
  int v72 = isCMHandDetectionSupported;
  if (v70 && !atomic_fetch_add(&v70->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
    std::__shared_weak_count::__release_weak(v70);
    if (!v72) {
      goto LABEL_215;
    }
  }
  else if (!isCMHandDetectionSupported)
  {
    goto LABEL_215;
  }
  xpc_object_t v73 = *((void *)this + 5);
  if (os_log_type_enabled(v73, OS_LOG_TYPE_DEFAULT))
  {
    int v74 = (void *)((char *)this + 536);
    if (*((char *)this + 559) < 0) {
      int v74 = (void *)*v74;
    }
    LODWORD(__p) = 136315138;
    *(void *)((char *)&__p + 4) = v74;
    _os_log_impl(&dword_1C5767000, v73, OS_LOG_TYPE_DEFAULT, "#I Motion Hand Detection Overriding: %s", (uint8_t *)&__p, 0xCu);
    xpc_object_t v73 = *((void *)this + 5);
  }
  if (os_log_type_enabled(v73, OS_LOG_TYPE_DEFAULT))
  {
    int v75 = *((_DWORD *)this + 132);
    LODWORD(__p) = 67109120;
    DWORD1(__p) = v75;
    _os_log_impl(&dword_1C5767000, v73, OS_LOG_TYPE_DEFAULT, "#I Motion Hand Detection State: %d", (uint8_t *)&__p, 8u);
  }
LABEL_215:
  if (*((unsigned char *)this + 169))
  {
    uint64_t v76 = *((void *)this + 5);
    if (os_log_type_enabled(v76, OS_LOG_TYPE_DEFAULT))
    {
      ctu::iokit::asString();
      if (v124[0] >= 0) {
        xpc_object_t v77 = (const char *)&__p;
      }
      else {
        xpc_object_t v77 = (const char *)__p;
      }
      *(_DWORD *)long long buf = 136315138;
      unint64_t v126 = v77;
      _os_log_impl(&dword_1C5767000, v76, OS_LOG_TYPE_DEFAULT, "#I Current Power Source: %s", buf, 0xCu);
      if (SHIBYTE(v124[0]) < 0) {
        operator delete((void *)__p);
      }
      uint64_t v76 = *((void *)this + 5);
    }
    if (os_log_type_enabled(v76, OS_LOG_TYPE_DEFAULT))
    {
      if (*((_DWORD *)this + 142) != -1
        && ((TelephonyUtilIsInternalBuild() & 1) != 0 || TelephonyUtilIsCarrierBuild()))
      {
        ctu::iokit::asString();
        if (v124[0] >= 0) {
          char v78 = (const char *)&__p;
        }
        else {
          char v78 = (const char *)__p;
        }
        *(_DWORD *)long long buf = 136315138;
        unint64_t v126 = v78;
        _os_log_impl(&dword_1C5767000, v76, OS_LOG_TYPE_DEFAULT, "#I Current Power Source Overridden Value: %s", buf, 0xCu);
        if (SHIBYTE(v124[0]) < 0) {
          operator delete((void *)__p);
        }
      }
      else
      {
        *(_DWORD *)long long buf = 136315138;
        unint64_t v126 = "AUTO";
        _os_log_impl(&dword_1C5767000, v76, OS_LOG_TYPE_DEFAULT, "#I Current Power Source Overridden Value: %s", buf, 0xCu);
      }
    }
  }
  if (!*((unsigned char *)this + 170)) {
    goto LABEL_283;
  }
  int v79 = *((void *)this + 5);
  if (os_log_type_enabled(v79, OS_LOG_TYPE_DEFAULT))
  {
    xpc_object_t v80 = (void *)((char *)this + 640);
    if (*((char *)this + 663) < 0) {
      xpc_object_t v80 = (void *)*v80;
    }
    LODWORD(__p) = 136315138;
    *(void *)((char *)&__p + 4) = v80;
    _os_log_impl(&dword_1C5767000, v79, OS_LOG_TYPE_DEFAULT, "#I Device Material Overridden State: %s", (uint8_t *)&__p, 0xCu);
    int v79 = *((void *)this + 5);
  }
  if (!os_log_type_enabled(v79, OS_LOG_TYPE_DEFAULT)) {
    goto LABEL_283;
  }
  int v81 = (uint64_t **)((char *)this + 624);
  xpc_object_t v82 = (uint64_t *)*((void *)this + 78);
  uint64_t v83 = (uint64_t **)((char *)this + 624);
  xpc_object_t v84 = (uint64_t **)((char *)this + 624);
  if (v82)
  {
    int v85 = (char *)*((void *)this + 78);
    while (1)
    {
      while (1)
      {
        xpc_object_t v84 = (uint64_t **)v85;
        unsigned int v86 = *((_DWORD *)v85 + 7);
        if (v86 < 2) {
          break;
        }
        int v85 = (char *)*v84;
        uint64_t v83 = v84;
        if (!*v84) {
          goto LABEL_246;
        }
      }
      if (v86) {
        break;
      }
      int v85 = (char *)v84[1];
      if (!v85)
      {
        uint64_t v83 = v84 + 1;
        goto LABEL_246;
      }
    }
    unsigned int v90 = *((_DWORD *)v84 + 8);
    goto LABEL_251;
  }
LABEL_246:
  size_t v87 = (uint64_t *)operator new(0x28uLL);
  *(uint64_t *)((char *)v87 + 28) = 1;
  *size_t v87 = 0;
  v87[1] = 0;
  v87[2] = (uint64_t)v84;
  *uint64_t v83 = v87;
  uint64_t v88 = **((void **)this + 77);
  char v89 = v87;
  if (v88)
  {
    *((void *)this + 77) = v88;
    char v89 = *v83;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 78), v89);
  ++*((void *)this + 79);
  xpc_object_t v82 = (uint64_t *)*((void *)this + 78);
  unsigned int v90 = *((_DWORD *)v87 + 8);
  uint64_t v91 = (uint64_t **)((char *)this + 624);
  int v92 = (uint64_t **)((char *)this + 624);
  if (v82)
  {
LABEL_251:
    uint64_t v93 = (char *)v82;
    while (1)
    {
      while (1)
      {
        int v92 = (uint64_t **)v93;
        unsigned int v94 = *((_DWORD *)v93 + 7);
        if (v94 < 3) {
          break;
        }
        uint64_t v93 = (char *)*v92;
        uint64_t v91 = v92;
        if (!*v92) {
          goto LABEL_257;
        }
      }
      if (v94 == 2) {
        break;
      }
      uint64_t v93 = (char *)v92[1];
      if (!v93)
      {
        uint64_t v91 = v92 + 1;
        goto LABEL_257;
      }
    }
    int v98 = *((_DWORD *)v92 + 8);
    goto LABEL_262;
  }
LABEL_257:
  size_t v95 = (uint64_t *)operator new(0x28uLL);
  *(uint64_t *)((char *)v95 + 28) = 2;
  *size_t v95 = 0;
  v95[1] = 0;
  v95[2] = (uint64_t)v92;
  *uint64_t v91 = v95;
  uint64_t v96 = **((void **)this + 77);
  uint64_t v97 = v95;
  if (v96)
  {
    *((void *)this + 77) = v96;
    uint64_t v97 = *v91;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 78), v97);
  ++*((void *)this + 79);
  xpc_object_t v82 = (uint64_t *)*((void *)this + 78);
  int v98 = *((_DWORD *)v95 + 8);
  v99 = (uint64_t **)((char *)this + 624);
  xpc_object_t v100 = (uint64_t **)((char *)this + 624);
  if (v82)
  {
LABEL_262:
    int v101 = (char *)v82;
    do
    {
      while (1)
      {
        xpc_object_t v100 = (uint64_t **)v101;
        unsigned int v102 = *((_DWORD *)v101 + 7);
        if (v102 < 4) {
          break;
        }
        int v101 = (char *)*v100;
        v99 = v100;
        if (!*v100) {
          goto LABEL_268;
        }
      }
      if (v102 == 3)
      {
        int v106 = *((_DWORD *)v100 + 8);
        goto LABEL_274;
      }
      int v101 = (char *)v100[1];
    }
    while (v101);
    v99 = v100 + 1;
  }
LABEL_268:
  xpc_object_t v103 = (uint64_t *)operator new(0x28uLL);
  *(uint64_t *)((char *)v103 + 28) = 3;
  *xpc_object_t v103 = 0;
  v103[1] = 0;
  v103[2] = (uint64_t)v100;
  char *v99 = v103;
  uint64_t v104 = **((void **)this + 77);
  xpc_object_t v105 = v103;
  if (v104)
  {
    *((void *)this + 77) = v104;
    xpc_object_t v105 = *v99;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 78), v105);
  ++*((void *)this + 79);
  xpc_object_t v82 = (uint64_t *)*((void *)this + 78);
  int v106 = *((_DWORD *)v103 + 8);
  int v107 = (uint64_t **)((char *)this + 624);
  if (v82)
  {
    while (1)
    {
LABEL_274:
      while (1)
      {
        int v107 = (uint64_t **)v82;
        unsigned int v108 = *((_DWORD *)v82 + 7);
        if (v108 < 5) {
          break;
        }
        xpc_object_t v82 = *v107;
        int v81 = v107;
        if (!*v107) {
          goto LABEL_278;
        }
      }
      if (v108 == 4) {
        break;
      }
      xpc_object_t v82 = v107[1];
      if (!v82)
      {
        int v81 = v107 + 1;
        goto LABEL_278;
      }
    }
    xpc_object_t v109 = (uint64_t *)v107;
  }
  else
  {
LABEL_278:
    xpc_object_t v109 = (uint64_t *)operator new(0x28uLL);
    *(uint64_t *)((char *)v109 + 28) = 4;
    *xpc_object_t v109 = 0;
    v109[1] = 0;
    v109[2] = (uint64_t)v107;
    uint64_t *v81 = v109;
    uint64_t v110 = **((void **)this + 77);
    xpc_object_t v111 = v109;
    if (v110)
    {
      *((void *)this + 77) = v110;
      xpc_object_t v111 = *v81;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 78), v111);
    ++*((void *)this + 79);
  }
  int v112 = *((_DWORD *)v109 + 8);
  *(void *)&long long __p = __PAIR64__(v90, 67109888);
  WORD4(__p) = 1024;
  *(_DWORD *)((char *)&__p + 10) = v98;
  HIWORD(__p) = 1024;
  LODWORD(v124[0]) = v106;
  WORD2(v124[0]) = 1024;
  *(_DWORD *)((char *)v124 + 6) = v112;
  _os_log_impl(&dword_1C5767000, v79, OS_LOG_TYPE_DEFAULT, "#I Current Device Material Values are as Bottom Enclosure: %d, Top Enclosure: %d, FCM Type: %d, BCM Type: %d", (uint8_t *)&__p, 0x1Au);
LABEL_283:
  if (*((unsigned char *)this + 688))
  {
    int v113 = *((void *)this + 5);
    if (os_log_type_enabled(v113, OS_LOG_TYPE_DEFAULT))
    {
      xpc_object_t v114 = (void *)((char *)this + 696);
      if (*((char *)this + 719) < 0) {
        xpc_object_t v114 = (void *)*v114;
      }
      LODWORD(__p) = 136315138;
      *(void *)((char *)&__p + 4) = v114;
      _os_log_impl(&dword_1C5767000, v113, OS_LOG_TYPE_DEFAULT, "#I Workout info override: %s", (uint8_t *)&__p, 0xCu);
      int v113 = *((void *)this + 5);
    }
    if (os_log_type_enabled(v113, OS_LOG_TYPE_DEFAULT))
    {
      int v115 = *((_DWORD *)this + 180);
      int v116 = *((_DWORD *)this + 181);
      LODWORD(__p) = 67109376;
      DWORD1(__p) = v115;
      WORD4(__p) = 1024;
      *(_DWORD *)((char *)&__p + 10) = v116;
      _os_log_impl(&dword_1C5767000, v113, OS_LOG_TYPE_DEFAULT, "#I Workout info: Type=%d, State=%d", (uint8_t *)&__p, 0xEu);
    }
  }
  if (*((unsigned char *)this + 192))
  {
    int64_t v117 = *((void *)this + 5);
    if (os_log_type_enabled(v117, OS_LOG_TYPE_DEFAULT))
    {
      if (*((unsigned char *)this + 561)) {
        int v118 = "CLOSED";
      }
      else {
        int v118 = "OPENED";
      }
      LODWORD(__p) = 136315138;
      *(void *)((char *)&__p + 4) = v118;
      _os_log_impl(&dword_1C5767000, v117, OS_LOG_TYPE_DEFAULT, "#I Smart Keyboard Cover: %s", (uint8_t *)&__p, 0xCu);
    }
  }
  if (*((_DWORD *)this + 43))
  {
    long long v119 = *((void *)this + 5);
    if (os_log_type_enabled(v119, OS_LOG_TYPE_DEFAULT))
    {
      int v120 = *((unsigned __int8 *)this + 736);
      LODWORD(__p) = 67109120;
      DWORD1(__p) = v120;
      _os_log_impl(&dword_1C5767000, v119, OS_LOG_TYPE_DEFAULT, "#I Face ID Support Version: %d", (uint8_t *)&__p, 8u);
    }
  }
  if (*((unsigned char *)this + 176))
  {
    uint64_t v121 = *((void *)this + 5);
    if (os_log_type_enabled(v121, OS_LOG_TYPE_DEFAULT))
    {
      if (*((unsigned char *)this + 737)) {
        xpc_object_t v122 = "ON";
      }
      else {
        xpc_object_t v122 = "OFF";
      }
      LODWORD(__p) = 136315138;
      *(void *)((char *)&__p + 4) = v122;
      _os_log_impl(&dword_1C5767000, v121, OS_LOG_TYPE_DEFAULT, "#I Front Camera: %s", (uint8_t *)&__p, 0xCu);
    }
  }
}

void sub_1C59130F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void antenna::Service::Internal::dumpState(antenna::Service::Internal *this)
{
  xpc_object_t v2 = (std::__shared_weak_count *)*((void *)this + 10);
  if (!v2 || (uint64_t v3 = *((void *)this + 9), (v4 = std::__shared_weak_count::lock(v2)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  xpc_object_t v5 = v4;
  uint64_t v6 = operator new(8uLL);
  *uint64_t v6 = this;
  int v7 = *((void *)this + 11);
  atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  int v8 = operator new(0x18uLL);
  *int v8 = v6;
  v8[1] = v3;
  void v8[2] = v5;
  dispatch_async_f(v7, v8, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<antenna::Service::Internal>::execute_wrapped<antenna::Service::Internal::dumpState(void)::$_0>(antenna::Service::Internal::dumpState(void)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<antenna::Service::Internal::dumpState(void)::$_0,dispatch_queue_s *::default_delete<antenna::Service::Internal::dumpState(void)::$_0>>)::{lambda(void *)#1}::__invoke);
  if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void ___ZN7antenna7Service8Internal14enablePPM_syncEb_block_invoke(uint64_t a1)
{
  xpc_object_t v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    xpc_object_t v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      xpc_object_t v5 = v4;
      uint64_t v6 = *(void *)(a1 + 40);
      if (atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        if (!v6) {
          return;
        }
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v5);
        if (!v6) {
          return;
        }
      }
      if (*(unsigned char *)(a1 + 64))
      {
        xpc_object_t v7 = xpc_dictionary_create(0, 0, 0);
        if (v7 || (xpc_object_t v7 = xpc_null_create()) != 0)
        {
          if (MEMORY[0x1C8792D30](v7) == MEMORY[0x1E4F14590])
          {
            xpc_retain(v7);
            xpc_object_t v8 = v7;
          }
          else
          {
            xpc_object_t v8 = xpc_null_create();
          }
        }
        else
        {
          xpc_object_t v8 = xpc_null_create();
          xpc_object_t v7 = 0;
        }
        xpc_release(v7);
        xpc_object_t v9 = xpc_string_create((const char *)*MEMORY[0x1E4FB9D88]);
        if (!v9) {
          xpc_object_t v9 = xpc_null_create();
        }
        xpc_dictionary_set_value(v8, (const char *)*MEMORY[0x1E4FB9C68], v9);
        xpc_object_t v10 = xpc_null_create();
        xpc_release(v9);
        xpc_release(v10);
        uint64_t v11 = *(void *)(v3 + 120);
        xpc_object_t v22 = v8;
        if (v8) {
          xpc_retain(v8);
        }
        else {
          xpc_object_t v22 = xpc_null_create();
        }
        aBlock[0] = MEMORY[0x1E4F143A8];
        aBlock[1] = 1174405120;
        aBlock[2] = ___ZN7antenna7Service8Internal14enablePPM_syncEb_block_invoke_2;
        aBlock[3] = &__block_descriptor_tmp_30_1;
        uint64_t v13 = *(void *)(a1 + 40);
        int v12 = *(std::__shared_weak_count **)(a1 + 48);
        aBlock[4] = v3;
        aBlock[5] = v13;
        xpc_object_t v18 = v12;
        if (v12) {
          atomic_fetch_add_explicit(&v12->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        }
        xpc_object_t v14 = *(void **)(a1 + 56);
        xpc_object_t v19 = v14;
        if (v14) {
          xpc_retain(v14);
        }
        else {
          xpc_object_t v19 = xpc_null_create();
        }
        xpc_object_t v15 = _Block_copy(aBlock);
        xpc_object_t v16 = *(NSObject **)(v3 + 88);
        if (v16) {
          dispatch_retain(*(dispatch_object_t *)(v3 + 88));
        }
        int v20 = v15;
        dispatch_object_t object = v16;
        (*(void (**)(uint64_t, xpc_object_t *, void **))(*(void *)v11 + 48))(v11, &v22, &v20);
        if (object) {
          dispatch_release(object);
        }
        if (v20) {
          _Block_release(v20);
        }
        xpc_release(v22);
        xpc_object_t v22 = 0;
        xpc_release(v19);
        xpc_object_t v19 = 0;
        if (v18) {
          std::__shared_weak_count::__release_weak(v18);
        }
        xpc_release(v8);
      }
    }
  }
}

void sub_1C5913514(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, xpc_object_t object, char a18)
{
  dispatch::callback<void({block_pointer})(BOOL,xpc::object)>::~callback((uint64_t)&a18);
  xpc_release(object);
  if (a16) {
    std::__shared_weak_count::__release_weak(a16);
  }
  xpc_release(*(xpc_object_t *)(v19 - 56));
  *(void *)(v19 - 56) = 0;
  xpc_release(v18);
  _Unwind_Resume(a1);
}

void ___ZN7antenna7Service8Internal14enablePPM_syncEb_block_invoke_2(void *a1, char a2, void *a3)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  xpc_object_t v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    uint64_t v7 = a1[4];
    xpc_object_t v8 = std::__shared_weak_count::lock(v4);
    uint64_t v25 = v8;
    if (v8)
    {
      xpc_object_t v9 = v8;
      if (a1[5])
      {
        if (a2)
        {
          xpc_object_t v10 = *(NSObject **)(v7 + 40);
          if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v19 = (char *)MEMORY[0x1C8792C60](*a3);
            memset(__p, 170, sizeof(__p));
            std::string::basic_string[abi:ne180100]<0>(__p, v19);
            free(v19);
            int v20 = SHIBYTE(__p[2]) >= 0 ? __p : (void **)__p[0];
            LODWORD(v26) = 136315138;
            *(void *)((char *)&v26 + 4) = v20;
            _os_log_debug_impl(&dword_1C5767000, v10, OS_LOG_TYPE_DEBUG, "#D PPM telemetry from BB: %s", (uint8_t *)&v26, 0xCu);
            if (SHIBYTE(__p[2]) < 0) {
              operator delete(__p[0]);
            }
          }
          uint64_t v11 = *(uint64_t **)(v7 + 576);
          xpc_object_t v12 = (xpc_object_t)*a3;
          int v21 = v12;
          if (v12 && MEMORY[0x1C8792D30](v12) == MEMORY[0x1E4F14590])
          {
            xpc_retain(v12);
          }
          else
          {
            xpc_object_t v12 = xpc_null_create();
            int v21 = v12;
          }
          PPMManager::reportTelemetry(v11, &v21);
          xpc_release(v12);
          int v21 = 0;
        }
        else
        {
          xpc_object_t v14 = (void *)a1[7];
          uint64_t v13 = a1 + 7;
          uint64_t v15 = *MEMORY[0x1E4FB9C68];
          if (xpc_dictionary_get_value(v14, (const char *)*MEMORY[0x1E4FB9C68]))
          {
            xpc_object_t v16 = *(NSObject **)(v7 + 40);
            if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
            {
              *(void *)&long long v26 = v13;
              *((void *)&v26 + 1) = v15;
              xpc::dict::object_proxy::operator xpc::object((uint64_t)&v26, &object);
              xpc::dyn_cast_or_default((uint64_t *)__p, (xpc *)&object, (const object *)"None", v17);
              if (SHIBYTE(__p[2]) >= 0) {
                xpc_object_t v18 = __p;
              }
              else {
                xpc_object_t v18 = (void **)__p[0];
              }
              *(_DWORD *)long long buf = 136315138;
              size_t v28 = v18;
              _os_log_error_impl(&dword_1C5767000, v16, OS_LOG_TYPE_ERROR, "Failed to run command driver: %s", buf, 0xCu);
              if (SHIBYTE(__p[2]) < 0) {
                operator delete(__p[0]);
              }
              xpc_release(object);
            }
          }
        }
      }
      if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
}

void sub_1C5913818(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, xpc_object_t object, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

xpc_object_t __copy_helper_block_e8_40c50_ZTSNSt3__18weak_ptrIN7antenna7Service8InternalEEE56c15_ZTSN3xpc4dictE(void *a1, void *a2)
{
  uint64_t v3 = a2[6];
  a1[5] = a2[5];
  a1[6] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  xpc_object_t v4 = (void *)a2[7];
  a1[7] = v4;
  if (v4) {
    return xpc_retain(v4);
  }
  xpc_object_t result = xpc_null_create();
  a1[7] = result;
  return result;
}

void __destroy_helper_block_e8_40c50_ZTSNSt3__18weak_ptrIN7antenna7Service8InternalEEE56c15_ZTSN3xpc4dictE(uint64_t a1)
{
  xpc_release(*(xpc_object_t *)(a1 + 56));
  *(void *)(a1 + 56) = 0;
  xpc_object_t v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2)
  {
    std::__shared_weak_count::__release_weak(v2);
  }
}

void *antenna::Service::Service(void *a1, uint64_t *a2, uint64_t a3, NSObject **a4)
{
  *a1 = 0;
  a1[1] = 0;
  uint64_t v7 = a2[1];
  uint64_t v19 = *a2;
  int v20 = (std::__shared_weak_count *)v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  xpc_object_t v8 = *(void **)a3;
  if (*(void *)a3) {
    xpc_object_t v8 = _Block_copy(v8);
  }
  xpc_object_t v9 = *(NSObject **)(a3 + 8);
  aBlocuint64_t k = v8;
  dispatch_object_t v18 = v9;
  if (v9) {
    dispatch_retain(v9);
  }
  xpc_object_t v10 = *a4;
  dispatch_object_t object = v10;
  if (v10) {
    dispatch_retain(v10);
  }
  antenna::Service::Internal::create(&v19, (uint64_t)&aBlock, &object, (antenna::Service::Internal **)&v21);
  long long v11 = v21;
  long long v21 = 0uLL;
  xpc_object_t v12 = (std::__shared_weak_count *)a1[1];
  *(_OWORD *)a1 = v11;
  if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  uint64_t v13 = (std::__shared_weak_count *)*((void *)&v21 + 1);
  if (*((void *)&v21 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v21 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  if (object) {
    dispatch_release(object);
  }
  if (v18) {
    dispatch_release(v18);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  xpc_object_t v14 = v20;
  if (!v20 || atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
  std::__shared_weak_count::__release_weak(v14);
  return a1;
}

void sub_1C5913AF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13)
{
  if (v14) {
    dispatch_release(v14);
  }
  dispatch::callback<void({block_pointer})(xpc::dict)>::~callback((uint64_t)&a11);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v13);
  _Unwind_Resume(a1);
}

void antenna::Service::~Service(antenna::Service *this)
{
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 1);
  if (v1)
  {
    if (!atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

{
  std::__shared_weak_count *v1;

  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 1);
  if (v1)
  {
    if (!atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void antenna::Service::startService(antenna::Service::Internal **this)
{
  uint64_t v1 = *this;
  if (v1) {
    antenna::Service::Internal::startService(v1);
  }
}

void antenna::Service::stopService(antenna::Service::Internal **this)
{
  uint64_t v1 = *this;
  if (v1) {
    antenna::Service::Internal::stopService(v1);
  }
}

void antenna::Service::exitLowPower(antenna::Service::Internal **this)
{
  uint64_t v1 = *this;
  if (v1) {
    antenna::Service::Internal::exitLowPower(v1);
  }
}

void antenna::Service::enterLowPower(antenna::Service::Internal **this)
{
  uint64_t v1 = *this;
  if (v1) {
    antenna::Service::Internal::enterLowPower(v1);
  }
}

void antenna::Service::setMotionThresholds(CMOnBodyDelegate ***a1, ctu **a2)
{
  xpc_object_t v2 = *a1;
  if (*a1)
  {
    uint64_t v3 = *a2;
    xpc_object_t v4 = v3;
    if (v3)
    {
      xpc_retain(v3);
    }
    else
    {
      uint64_t v3 = (ctu *)xpc_null_create();
      xpc_object_t v4 = v3;
    }
    antenna::Service::Internal::setMotionThresholds(v2, &v4);
    xpc_release(v3);
  }
}

void sub_1C5913CC4(_Unwind_Exception *a1)
{
  xpc_release(v1);
  _Unwind_Resume(a1);
}

void antenna::Service::setAudioState(void **a1, xpc_object_t *a2)
{
  xpc_object_t v2 = *a1;
  if (*a1)
  {
    xpc_object_t v3 = *a2;
    xpc_object_t v4 = v3;
    if (v3)
    {
      xpc_retain(v3);
    }
    else
    {
      xpc_object_t v3 = xpc_null_create();
      xpc_object_t v4 = v3;
    }
    antenna::Service::Internal::setAudioState(v2, &v4);
    xpc_release(v3);
  }
}

void antenna::Service::callActive(antenna::Service *this)
{
  uint64_t v1 = *(void *)this;
  if (*(void *)this)
  {
    xpc_object_t v2 = *(NSObject **)(v1 + 40);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)xpc_object_t v4 = 0;
      _os_log_impl(&dword_1C5767000, v2, OS_LOG_TYPE_DEFAULT, "#I Call Active!", v4, 2u);
    }
    *(unsigned char *)(v1 + 165) = 1;
    if (*(unsigned char *)(v1 + 162))
    {
      uint64_t v3 = *(void *)(v1 + 376);
      if (v3)
      {
        if (*(void *)(v3 + 72)) {
          ctu::iokit::Controller::setMesaQuality();
        }
      }
    }
  }
}

void antenna::Service::callInactive(antenna::Service *this)
{
  uint64_t v1 = *(void *)this;
  if (*(void *)this)
  {
    xpc_object_t v2 = *(NSObject **)(v1 + 40);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)xpc_object_t v4 = 0;
      _os_log_impl(&dword_1C5767000, v2, OS_LOG_TYPE_DEFAULT, "#I Call Inactive!", v4, 2u);
    }
    *(unsigned char *)(v1 + 165) = 0;
    if (*(unsigned char *)(v1 + 162))
    {
      uint64_t v3 = *(void *)(v1 + 376);
      if (v3)
      {
        if (*(void *)(v3 + 72)) {
          ctu::iokit::Controller::setMesaQuality();
        }
      }
    }
  }
}

void antenna::Service::antennaSetProperty(antenna::Service::Internal **this, xpc_object_t *a2)
{
  xpc_object_t v2 = *this;
  if (v2) {
    antenna::Service::Internal::antennaSetProperty(v2, a2);
  }
}

void antenna::Service::antennaGetProperty(NSObject ***this@<X0>, void **a2@<X1>, void *a3@<X8>)
{
  *a3 = 0xAAAAAAAAAAAAAAAALL;
  xpc_object_t v6 = xpc_null_create();
  *a3 = v6;
  if (*this)
  {
    antenna::Service::Internal::antennaGetProperty(*this, a2, &v9);
    xpc_object_t v7 = v9;
    xpc_object_t v8 = xpc_null_create();
    *a3 = v7;
    xpc_release(v6);
    xpc_release(v8);
  }
}

void sub_1C5913F10(_Unwind_Exception *a1)
{
  xpc::dict::~dict(v1);
  _Unwind_Resume(a1);
}

void antenna::Service::dumpState(antenna::Service::Internal **this)
{
  uint64_t v1 = *this;
  if (v1) {
    antenna::Service::Internal::dumpState(v1);
  }
}

void antenna::Service::shutdown(antenna::Service::Internal **this)
{
  uint64_t v1 = *this;
  if (v1) {
    antenna::Service::Internal::shutdown(v1);
  }
}

void antenna::Service::Internal::~Internal(xpc_object_t *this)
{
  antenna::Service::Internal::~Internal(this);

  operator delete(v1);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  NSObject *v7;
  NSObject *v8;
  std::__shared_weak_count *v9;
  NSObject *v10;
  NSObject *v11;
  std::__shared_weak_count *v12;
  std::__shared_weak_count *v13;
  NSObject *v14;
  xpc_object_t v15;
  NSObject *v16;
  NSObject *v17;
  std::__shared_weak_count *v18;

  *this = &unk_1F20FCB68;
  antenna::Service::Internal::stopTxPowerCapping_sync((antenna::Service::Internal *)this);
  if (*((char *)this + 719) < 0) {
    operator delete(this[87]);
  }
  xpc_object_t v2 = (std::__shared_weak_count *)this[85];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    if ((*((char *)this + 663) & 0x80000000) == 0)
    {
LABEL_6:
      std::__tree<std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>>>::destroy(this[78]);
      if ((*((char *)this + 615) & 0x80000000) == 0) {
        goto LABEL_7;
      }
      goto LABEL_11;
    }
  }
  else if ((*((char *)this + 663) & 0x80000000) == 0)
  {
    goto LABEL_6;
  }
  operator delete(this[80]);
  std::__tree<std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>>>::destroy(this[78]);
  if ((*((char *)this + 615) & 0x80000000) == 0)
  {
LABEL_7:
    uint64_t v3 = (std::__shared_weak_count *)this[73];
    if (!v3) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(this[74]);
  uint64_t v3 = (std::__shared_weak_count *)this[73];
  if (!v3) {
    goto LABEL_13;
  }
LABEL_12:
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    if ((*((char *)this + 559) & 0x80000000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_14;
  }
LABEL_13:
  if (*((char *)this + 559) < 0) {
LABEL_14:
  }
    operator delete(this[67]);
LABEL_15:
  xpc_object_t v4 = (std::__shared_weak_count *)this[65];
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  xpc_object_t v5 = (std::__shared_weak_count *)this[63];
  if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    std::__tree<std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>>>::destroy(this[56]);
    if ((*((char *)this + 439) & 0x80000000) == 0)
    {
LABEL_21:
      if ((*((char *)this + 415) & 0x80000000) == 0) {
        goto LABEL_22;
      }
      goto LABEL_28;
    }
  }
  else
  {
    std::__tree<std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>>>::destroy(this[56]);
    if ((*((char *)this + 439) & 0x80000000) == 0) {
      goto LABEL_21;
    }
  }
  operator delete(this[52]);
  if ((*((char *)this + 415) & 0x80000000) == 0)
  {
LABEL_22:
    xpc_object_t v6 = (std::__shared_weak_count *)this[48];
    if (!v6) {
      goto LABEL_31;
    }
    goto LABEL_29;
  }
LABEL_28:
  operator delete(this[49]);
  xpc_object_t v6 = (std::__shared_weak_count *)this[48];
  if (!v6) {
    goto LABEL_31;
  }
LABEL_29:
  if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
LABEL_31:
  xpc_object_t v7 = this[45];
  if (v7) {
    dispatch_release(v7);
  }
  std::__tree<std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>>>::destroy(this[39]);
  std::__tree<std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>>>::destroy(this[36]);
  xpc_object_t v8 = this[32];
  if (v8) {
    dispatch_release(v8);
  }
  xpc_object_t v9 = (std::__shared_weak_count *)this[30];
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  xpc_release(this[28]);
  this[28] = 0;
  xpc_object_t v10 = this[25];
  if (v10) {
    dispatch_release(v10);
  }
  long long v11 = this[23];
  if (v11) {
    dispatch_release(v11);
  }
  xpc_object_t v12 = (std::__shared_weak_count *)this[18];
  if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  uint64_t v13 = (std::__shared_weak_count *)this[16];
  if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  xpc_object_t v14 = this[14];
  if (v14) {
    dispatch_release(v14);
  }
  uint64_t v15 = this[13];
  if (v15) {
    _Block_release(v15);
  }
  *this = &unk_1F20FCD88;
  MEMORY[0x1C8790F40](this + 1);
  xpc_object_t v16 = this[12];
  if (v16) {
    dispatch_release(v16);
  }
  xpc_object_t v17 = this[11];
  if (v17) {
    dispatch_release(v17);
  }
  dispatch_object_t v18 = (std::__shared_weak_count *)this[10];
  if (v18) {
    std::__shared_weak_count::__release_weak(v18);
  }
}

uint64_t ctu::Loggable<antenna::Service::Internal,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig(uint64_t a1)
{
  return MEMORY[0x1F417DA50](a1 + 8);
}

void ctu::Loggable<antenna::Service::Internal,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "antenna.svc");
}

uint64_t ctu::Loggable<antenna::Service::Internal,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return MEMORY[0x1F417DD10](a1 + 8);
}

void *ctu::Loggable<antenna::Service::Internal,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_1F20FCD88;
  MEMORY[0x1C8790F40](a1 + 1);
  return a1;
}

void ctu::Loggable<antenna::Service::Internal,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_1F20FCD88;
  MEMORY[0x1C8790F40](a1 + 1);

  operator delete(a1);
}

void ___ZN7antenna7Service8Internal25performCommandDriver_syncEN3xpc4dictEN8dispatch8callbackIU13block_pointerFvNS2_6objectEEEE_block_invoke(uint64_t a1, char a2, xpc_object_t *a3)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  xpc_object_t v4 = *(std::__shared_weak_count **)(a1 + 48);
  if (v4)
  {
    uint64_t v7 = *(void *)(a1 + 32);
    xpc_object_t v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      xpc_object_t v9 = v8;
      uint64_t v10 = *(void *)(a1 + 40);
      if (atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        if (!v10) {
          return;
        }
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v9);
        if (!v10) {
          return;
        }
      }
      if ((a2 & 1) == 0)
      {
        uint64_t v11 = *MEMORY[0x1E4FB9C68];
        if (xpc_dictionary_get_value(*(xpc_object_t *)(a1 + 56), (const char *)*MEMORY[0x1E4FB9C68]))
        {
          xpc_object_t v12 = *(NSObject **)(v7 + 40);
          if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
          {
            v19[0] = a1 + 56;
            v19[1] = v11;
            xpc::dict::object_proxy::operator xpc::object((uint64_t)v19, &v20);
            xpc::dyn_cast_or_default((uint64_t *)block, (xpc *)&v20, (const object *)"None", v17);
            if (SHIBYTE(v22) >= 0) {
              dispatch_object_t v18 = block;
            }
            else {
              dispatch_object_t v18 = (void **)block[0];
            }
            *(_DWORD *)long long buf = 136315138;
            int v27 = v18;
            _os_log_error_impl(&dword_1C5767000, v12, OS_LOG_TYPE_ERROR, "Failed to run command driver: %s", buf, 0xCu);
            if (SHIBYTE(v22) < 0) {
              operator delete(block[0]);
            }
            xpc_release(v20);
          }
        }
      }
      if (*(void *)(a1 + 64) && *(void *)(a1 + 72))
      {
        xpc_object_t v13 = *a3;
        if (v13)
        {
          xpc_retain(v13);
          xpc_object_t v14 = *(const void **)(a1 + 64);
          if (v14)
          {
LABEL_14:
            uint64_t v15 = _Block_copy(v14);
            goto LABEL_17;
          }
        }
        else
        {
          xpc_object_t v13 = xpc_null_create();
          xpc_object_t v14 = *(const void **)(a1 + 64);
          if (v14) {
            goto LABEL_14;
          }
        }
        uint64_t v15 = 0;
LABEL_17:
        xpc_object_t v16 = *(NSObject **)(a1 + 72);
        block[0] = (void *)MEMORY[0x1E4F143A8];
        block[1] = (void *)1174405120;
        xpc_object_t v22 = ___ZNK8dispatch8callbackIU13block_pointerFvN3xpc6objectEEEclIJS2_EEEvDpT__block_invoke;
        xpc_object_t v23 = &__block_descriptor_tmp_48_3;
        if (v15)
        {
          aBlocuint64_t k = _Block_copy(v15);
          xpc_object_t object = v13;
          if (v13)
          {
LABEL_19:
            xpc_retain(v13);
LABEL_22:
            dispatch_async(v16, block);
            xpc_release(object);
            xpc_object_t object = 0;
            if (aBlock) {
              _Block_release(aBlock);
            }
            if (v15) {
              _Block_release(v15);
            }
            xpc_release(v13);
            return;
          }
        }
        else
        {
          aBlocuint64_t k = 0;
          xpc_object_t object = v13;
          if (v13) {
            goto LABEL_19;
          }
        }
        xpc_object_t object = xpc_null_create();
        goto LABEL_22;
      }
    }
  }
}

void sub_1C59142DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, xpc_object_t object)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void __copy_helper_block_e8_40c50_ZTSNSt3__18weak_ptrIN7antenna7Service8InternalEEE56c16_ZTSKN3xpc4dictE64c58_ZTSN8dispatch8callbackIU13block_pointerFvN3xpc6objectEEEE(void *a1, void *a2)
{
  uint64_t v4 = a2[6];
  a1[5] = a2[5];
  a1[6] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 16), 1uLL, memory_order_relaxed);
  }
  xpc_object_t v5 = (void *)a2[7];
  a1[7] = v5;
  if (!v5)
  {
    a1[7] = xpc_null_create();
    xpc_object_t v6 = (void *)a2[8];
    if (!v6) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  xpc_retain(v5);
  xpc_object_t v6 = (void *)a2[8];
  if (v6) {
LABEL_7:
  }
    xpc_object_t v6 = _Block_copy(v6);
LABEL_8:
  uint64_t v7 = a2[9];
  a1[8] = v6;
  a1[9] = v7;
  if (v7)
  {
    dispatch_retain(v7);
  }
}

void __destroy_helper_block_e8_40c50_ZTSNSt3__18weak_ptrIN7antenna7Service8InternalEEE56c16_ZTSKN3xpc4dictE64c58_ZTSN8dispatch8callbackIU13block_pointerFvN3xpc6objectEEEE(uint64_t a1)
{
  xpc_object_t v2 = *(NSObject **)(a1 + 72);
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = *(const void **)(a1 + 64);
  if (v3) {
    _Block_release(v3);
  }
  xpc_release(*(xpc_object_t *)(a1 + 56));
  *(void *)(a1 + 56) = 0;
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 48);
  if (v4)
  {
    std::__shared_weak_count::__release_weak(v4);
  }
}

void ___ZNK8dispatch8callbackIU13block_pointerFvN3xpc6objectEEEclIJS2_EEEvDpT__block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v1 = *(void **)(a1 + 40);
  xpc_object_t object = v1;
  if (v1) {
    xpc_retain(v1);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  (*(void (**)(uint64_t, xpc_object_t *))(v2 + 16))(v2, &object);
  xpc_release(object);
}

void sub_1C591449C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
}

xpc_object_t __copy_helper_block_e8_32c55_ZTSN8dispatch5blockIU13block_pointerFvN3xpc6objectEEEE40c17_ZTSN3xpc6objectE(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(const void **)(a2 + 32);
  if (v4)
  {
    xpc_object_t v5 = _Block_copy(v4);
    xpc_object_t v6 = *(void **)(a2 + 40);
    *(void *)(a1 + 32) = v5;
    *(void *)(a1 + 40) = v6;
    if (v6) {
      return xpc_retain(v6);
    }
  }
  else
  {
    xpc_object_t v6 = *(void **)(a2 + 40);
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = v6;
    if (v6) {
      return xpc_retain(v6);
    }
  }
  xpc_object_t result = xpc_null_create();
  *(void *)(a1 + 40) = result;
  return result;
}

void __destroy_helper_block_e8_32c55_ZTSN8dispatch5blockIU13block_pointerFvN3xpc6objectEEEE40c17_ZTSN3xpc6objectE(uint64_t a1)
{
  xpc_release(*(xpc_object_t *)(a1 + 40));
  *(void *)(a1 + 40) = 0;
  uint64_t v2 = *(const void **)(a1 + 32);
  if (v2) {
    _Block_release(v2);
  }
}

void std::__shared_ptr_pointer<antenna::Service::Internal *,std::shared_ptr<antenna::Service::Internal> ctu::SharedSynchronizable<antenna::Service::Internal>::make_shared_ptr<antenna::Service::Internal>(antenna::Service::Internal*)::{lambda(antenna::Service::Internal *)#1},std::allocator<antenna::Service::Internal>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<antenna::Service::Internal *,std::shared_ptr<antenna::Service::Internal> ctu::SharedSynchronizable<antenna::Service::Internal>::make_shared_ptr<antenna::Service::Internal>(antenna::Service::Internal*)::{lambda(antenna::Service::Internal *)#1},std::allocator<antenna::Service::Internal>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<antenna::Service::Internal *,std::shared_ptr<antenna::Service::Internal> ctu::SharedSynchronizable<antenna::Service::Internal>::make_shared_ptr<antenna::Service::Internal>(antenna::Service::Internal*)::{lambda(antenna::Service::Internal *)#1},std::allocator<antenna::Service::Internal>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableIN7antenna7Service8InternalEE15make_shared_ptrIS3_EENSt3__110shared_ptr"
                     "IT_EEPS8_EUlPS3_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableIN7antenna7Service8InternalEE15make_shared_ptrIS3_EENSt3__11"
                                "0shared_ptrIT_EEPS8_EUlPS3_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableIN7antenna7Service8InternalEE15make_shared_ptrIS3_EENSt3__110shared_ptrIT_EEPS8_EUlPS3_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableIN7antenna7Service8InternalEE15make_shared_ptrIS3_EENSt3__110shared_ptrIT_EEPS8_EUlPS3_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24; {
  return 0;
  }
}

uint64_t std::shared_ptr<antenna::Service::Internal> ctu::SharedSynchronizable<antenna::Service::Internal>::make_shared_ptr<antenna::Service::Internal>(antenna::Service::Internal*)::{lambda(antenna::Service::Internal*)#1}::operator() const(antenna::Service::Internal*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void ctu::SharedLoggable<antenna::Service::Internal,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(void *a1)
{
  *a1 = &unk_1F20FCD88;
  MEMORY[0x1C8790F40](a1 + 1);
  uint64_t v2 = a1[12];
  if (v2) {
    dispatch_release(v2);
  }
  unint64_t v3 = a1[11];
  if (v3) {
    dispatch_release(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[10];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }

  operator delete(a1);
}

void **std::unique_ptr<void ctu::SharedSynchronizable<antenna::Service::Internal>::execute_wrapped<antenna::Service::Internal::init(void)::$_0>(antenna::Service::Internal::init(void)::$_0 &&)::{lambda(void)#1},std::default_delete<antenna::Service::Internal::init(void)::$_0 &&>>::~unique_ptr[abi:ne180100](void **a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    unint64_t v3 = (std::__shared_weak_count *)v2[2];
    if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
    operator delete(v2);
  }
  return a1;
}

void dispatch::async<void ctu::SharedSynchronizable<antenna::Service::Internal>::execute_wrapped<antenna::Service::Internal::init(void)::$_0>(antenna::Service::Internal::init(void)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<antenna::Service::Internal::init(void)::$_0,dispatch_queue_s *::default_delete<antenna::Service::Internal::init(void)::$_0>>)::{lambda(void *)#1}::operator()(uint64_t **a1)
{
  uint64_t v189 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  antenna::Service::Internal::configuration_sync((antenna::Service::Internal *)v2);
  xpc_object_t v3 = xpc_dictionary_create(0, 0, 0);
  if (v3 || (xpc_object_t v3 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C8792D30](v3) == MEMORY[0x1E4F14590])
    {
      xpc_retain(v3);
      xpc_object_t v4 = v3;
    }
    else
    {
      xpc_object_t v4 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v4 = xpc_null_create();
    xpc_object_t v3 = 0;
  }
  xpc_release(v3);
  xpc_object_t v5 = xpc_null_create();
  xpc_object_t v6 = *(void **)(v2 + 224);
  *(void *)(v2 + 224) = v4;
  xpc_release(v6);
  xpc_release(v5);
  xpc_object_t v7 = xpc_string_create((const char *)*MEMORY[0x1E4F4CDB0]);
  if (!v7) {
    xpc_object_t v7 = xpc_null_create();
  }
  xpc_dictionary_set_value(*(xpc_object_t *)(v2 + 224), (const char *)*MEMORY[0x1E4F4CD50], v7);
  xpc_object_t v8 = xpc_null_create();
  xpc_release(v7);
  xpc_release(v8);
  xpc_object_t v9 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  uint64_t v10 = off_1EBBDD2A0;
  if (!off_1EBBDD2A0)
  {
    CommandDriverFactory::create_default_global((uint64_t *)buf, v9);
    long long v11 = *(_OWORD *)buf;
    *(void *)long long buf = 0;
    *(void *)&uint8_t buf[8] = 0;
    xpc_object_t v12 = (std::__shared_weak_count *)*(&off_1EBBDD2A0 + 1);
    off_1EBBDD2A0 = v11;
    if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
    xpc_object_t v13 = *(std::__shared_weak_count **)&buf[8];
    if (*(void *)&buf[8]
      && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
    uint64_t v10 = off_1EBBDD2A0;
  }
  v184[1] = v10;
  int v185 = (std::__shared_weak_count *)*(&off_1EBBDD2A0 + 1);
  if (*(&off_1EBBDD2A0 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDD2A0 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  xpc_object_t v14 = *(NSObject **)(v2 + 96);
  v184[0] = v14;
  if (v14) {
    dispatch_retain(v14);
  }
  (*((void (**)(uint8_t *__return_ptr, NSObject *, dispatch_object_t *))v10->isa + 7))(v188, v10, v184);
  long long v16 = *(_OWORD *)v188;
  *(void *)xpc_object_t v188 = 0;
  *(void *)&v188[8] = 0;
  xpc_object_t v17 = *(std::__shared_weak_count **)(v2 + 128);
  *(_OWORD *)(v2 + 120) = v16;
  if (v17 && !atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  dispatch_object_t v18 = *(std::__shared_weak_count **)&v188[8];
  if (*(void *)&v188[8]
    && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&v188[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
  if (v184[0]) {
    dispatch_release(v184[0]);
  }
  uint64_t v19 = v185;
  if (v185 && !atomic_fetch_add(&v185->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
    if (*(void *)(v2 + 120)) {
      goto LABEL_35;
    }
  }
  else if (*(void *)(v2 + 120))
  {
    goto LABEL_35;
  }
  xpc_object_t v20 = *(NSObject **)(v2 + 40);
  if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)long long buf = 0;
    _os_log_error_impl(&dword_1C5767000, v20, OS_LOG_TYPE_ERROR, "Failed to create command driver", buf, 2u);
  }
LABEL_35:
  if (!*(unsigned char *)(v2 + 152) && !*(unsigned char *)(v2 + 153)) {
    goto LABEL_69;
  }
  long long v21 = *(NSObject **)(v2 + 88);
  v183 = v21;
  if (v21) {
    dispatch_retain(v21);
  }
  CMOnBodyDelegate::create(&v183, v15, buf);
  long long v22 = *(_OWORD *)buf;
  *(void *)long long buf = 0;
  *(void *)&uint8_t buf[8] = 0;
  xpc_object_t v23 = *(std::__shared_weak_count **)(v2 + 240);
  *(_OWORD *)(v2 + 232) = v22;
  if (v23 && !atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
  }
  int v24 = *(std::__shared_weak_count **)&buf[8];
  if (*(void *)&buf[8]
    && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
    std::__shared_weak_count::__release_weak(v24);
  }
  if (v183) {
    dispatch_release(v183);
  }
  if (*(void *)(v2 + 232))
  {
    uint64_t v25 = *(std::__shared_weak_count **)(v2 + 80);
    if (!v25 || (v26 = *(void *)(v2 + 72), (int v27 = std::__shared_weak_count::lock(v25)) == 0)) {
LABEL_354:
    }
      std::__throw_bad_weak_ptr[abi:ne180100]();
    uint64_t v28 = v27;
    p_shared_weak_owners = &v27->__shared_weak_owners_;
    atomic_fetch_add_explicit(&v27->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v27->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v28);
    }
    size_t v30 = *(void **)(v2 + 232);
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 1174405120;
    aBlock[2] = ___ZZN7antenna7Service8Internal4initEvENK3__0clEv_block_invoke;
    aBlock[3] = &__block_descriptor_tmp_61_2;
    aBlock[4] = v2;
    aBlock[5] = v26;
    int v180 = v28;
    atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
    int v31 = _Block_copy(aBlock);
    size_t v32 = *(NSObject **)(v2 + 88);
    if (v32) {
      dispatch_retain(*(dispatch_object_t *)(v2 + 88));
    }
    v181 = v31;
    dispatch_object_t v182 = v32;
    uint64_t v33 = (void *)v30[4];
    if ((unint64_t)v33 >= v30[5])
    {
      xpc_object_t v35 = std::vector<dispatch::callback<void({block_pointer})(CMOnBodyDelegate::CMOnBodyResult,CMOnBodyDelegate::CMOnBodyResultConfidence)>>::__push_back_slow_path<dispatch::callback<void({block_pointer})(CMOnBodyDelegate::CMOnBodyResult,CMOnBodyDelegate::CMOnBodyResultConfidence)> const&>(v30 + 3, (uint64_t)&v181);
      goto LABEL_62;
    }
    if (v31)
    {
      int v34 = _Block_copy(v31);
      size_t v32 = v182;
      void *v33 = v34;
      v33[1] = v32;
      if (!v32)
      {
LABEL_58:
        xpc_object_t v35 = v33 + 2;
LABEL_62:
        void v30[4] = v35;
        if (v182) {
          dispatch_release(v182);
        }
        if (v181) {
          _Block_release(v181);
        }
        if (v180) {
          std::__shared_weak_count::__release_weak(v180);
        }
        std::__shared_weak_count::__release_weak(v28);
        goto LABEL_69;
      }
    }
    else
    {
      void *v33 = 0;
      v33[1] = v32;
      if (!v32) {
        goto LABEL_58;
      }
    }
    dispatch_retain(v32);
    goto LABEL_58;
  }
  size_t v36 = *(NSObject **)(v2 + 40);
  if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)long long buf = 0;
    _os_log_error_impl(&dword_1C5767000, v36, OS_LOG_TYPE_ERROR, "Failed to create on-body handler", buf, 2u);
  }
LABEL_69:
  BOOL v37 = *(std::__shared_weak_count **)(v2 + 80);
  if (!v37) {
    goto LABEL_354;
  }
  uint64_t v38 = *(void *)(v2 + 72);
  int v39 = std::__shared_weak_count::lock(v37);
  if (!v39) {
    goto LABEL_354;
  }
  unsigned int v40 = v39;
  atomic_fetch_add_explicit(&v39->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (atomic_fetch_add(&v39->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (*(unsigned char *)(v2 + 156)) {
      goto LABEL_81;
    }
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
    std::__shared_weak_count::__release_weak(v40);
    if (*(unsigned char *)(v2 + 156)) {
      goto LABEL_81;
    }
  }
  if (*(unsigned char *)(v2 + 158)
    || *(unsigned char *)(v2 + 162)
    || *(unsigned char *)(v2 + 163)
    || *(unsigned char *)(v2 + 169)
    || *(_DWORD *)(v2 + 172)
    || *(unsigned char *)(v2 + 176))
  {
LABEL_81:
    uint64_t v41 = *(std::__shared_weak_count **)(v2 + 144);
    uint64_t v177 = *(void *)(v2 + 136);
    v178 = v41;
    if (v41) {
      atomic_fetch_add_explicit(&v41->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    pthread_mutex_lock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
    uint64_t v42 = off_1EBBDCFD0;
    if (!off_1EBBDCFD0)
    {
      ABMServer::create_default_global(buf);
      long long v43 = *(_OWORD *)buf;
      *(void *)long long buf = 0;
      *(void *)&uint8_t buf[8] = 0;
      int v44 = (std::__shared_weak_count *)*(&off_1EBBDCFD0 + 1);
      off_1EBBDCFD0 = v43;
      if (v44 && !atomic_fetch_add(&v44->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
        std::__shared_weak_count::__release_weak(v44);
      }
      size_t v45 = *(std::__shared_weak_count **)&buf[8];
      if (*(void *)&buf[8]
        && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
        std::__shared_weak_count::__release_weak(v45);
      }
      uint64_t v42 = off_1EBBDCFD0;
    }
    *(void *)xpc_object_t v188 = v42;
    *(void *)&v188[8] = *(&off_1EBBDCFD0 + 1);
    if (*(&off_1EBBDCFD0 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDCFD0 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    pthread_mutex_unlock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
    uint64_t v46 = *(void *)(*(void *)v42 + 208);
    int v47 = operator new(0xD8uLL);
    size_t v48 = v47;
    v47[1] = 0;
    v47[2] = 0;
    void *v47 = &unk_1F20F3AC0;
    uint64_t v49 = v47 + 3;
    *(void *)long long buf = v177;
    *(void *)&uint8_t buf[8] = v178;
    if (v178) {
      atomic_fetch_add_explicit(&v178->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    IOKitEventNotifier::IOKitEventNotifier((uint64_t)(v47 + 3), buf, v46);
    long long v50 = *(std::__shared_weak_count **)&buf[8];
    if (*(void *)&buf[8]
      && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
    uint64_t v51 = *(std::__shared_weak_count **)(v2 + 384);
    *(void *)(v2 + 376) = v49;
    *(void *)(v2 + 384) = v48;
    if (v51 && !atomic_fetch_add(&v51->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
      std::__shared_weak_count::__release_weak(v51);
    }
    long long v52 = *(std::__shared_weak_count **)&v188[8];
    if (*(void *)&v188[8]
      && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&v188[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
      uint64_t v53 = v178;
      if (!v178) {
        goto LABEL_105;
      }
    }
    else
    {
      uint64_t v53 = v178;
      if (!v178) {
        goto LABEL_105;
      }
    }
    if (!atomic_fetch_add(&v53->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
      if (*(unsigned char *)(v2 + 156)) {
        goto LABEL_111;
      }
      goto LABEL_106;
    }
LABEL_105:
    if (*(unsigned char *)(v2 + 156)) {
      goto LABEL_111;
    }
LABEL_106:
    if (!*(unsigned char *)(v2 + 158)) {
      goto LABEL_128;
    }
LABEL_111:
    uint64_t v54 = *(void *)(v2 + 376);
    v175[0] = MEMORY[0x1E4F143A8];
    v175[1] = 1174405120;
    v175[2] = ___ZZN7antenna7Service8Internal4initEvENK3__0clEv_block_invoke_62;
    v175[3] = &__block_descriptor_tmp_66_1;
    v175[4] = v2;
    v175[5] = v38;
    v176 = v40;
    atomic_fetch_add_explicit(&v40->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    uint64_t v55 = _Block_copy(v175);
    xpc_object_t v56 = *(NSObject **)(v2 + 88);
    if (v56) {
      dispatch_retain(*(dispatch_object_t *)(v2 + 88));
    }
    if (v55)
    {
      unint64_t v57 = _Block_copy(v55);
      xpc_object_t v58 = *(const void **)(v54 + 88);
      *(void *)(v54 + 88) = v57;
      if (!v58) {
        goto LABEL_118;
      }
    }
    else
    {
      xpc_object_t v58 = *(const void **)(v54 + 88);
      *(void *)(v54 + 88) = 0;
      if (!v58)
      {
LABEL_118:
        if (v56) {
          dispatch_retain(v56);
        }
        unint64_t v59 = *(NSObject **)(v54 + 96);
        *(void *)(v54 + 96) = v56;
        if (v59) {
          dispatch_release(v59);
        }
        if (v56) {
          dispatch_release(v56);
        }
        if (v55) {
          _Block_release(v55);
        }
        if (v176) {
          std::__shared_weak_count::__release_weak(v176);
        }
LABEL_128:
        if (!*(unsigned char *)(v2 + 162)) {
          goto LABEL_146;
        }
        uint64_t v60 = *(void *)(v2 + 376);
        v173[0] = MEMORY[0x1E4F143A8];
        v173[1] = 1174405120;
        v173[2] = ___ZZN7antenna7Service8Internal4initEvENK3__0clEv_block_invoke_67;
        v173[3] = &__block_descriptor_tmp_71_1;
        v173[4] = v2;
        v173[5] = v38;
        v174 = v40;
        atomic_fetch_add_explicit(&v40->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        size_t v61 = _Block_copy(v173);
        int v62 = *(NSObject **)(v2 + 88);
        if (v62) {
          dispatch_retain(*(dispatch_object_t *)(v2 + 88));
        }
        if (v61)
        {
          size_t v63 = _Block_copy(v61);
          int v64 = *(const void **)(v60 + 120);
          *(void *)(v60 + 120) = v63;
          if (!v64) {
            goto LABEL_136;
          }
        }
        else
        {
          int v64 = *(const void **)(v60 + 120);
          *(void *)(v60 + 120) = 0;
          if (!v64)
          {
LABEL_136:
            if (v62) {
              dispatch_retain(v62);
            }
            unint64_t v65 = *(NSObject **)(v60 + 128);
            *(void *)(v60 + 128) = v62;
            if (v65) {
              dispatch_release(v65);
            }
            if (v62) {
              dispatch_release(v62);
            }
            if (v61) {
              _Block_release(v61);
            }
            if (v174) {
              std::__shared_weak_count::__release_weak(v174);
            }
LABEL_146:
            if (!*(unsigned char *)(v2 + 163)) {
              goto LABEL_164;
            }
            uint64_t v66 = *(void *)(v2 + 376);
            v171[0] = MEMORY[0x1E4F143A8];
            v171[1] = 1174405120;
            v171[2] = ___ZZN7antenna7Service8Internal4initEvENK3__0clEv_block_invoke_72;
            v171[3] = &__block_descriptor_tmp_76_3;
            v171[4] = v2;
            v171[5] = v38;
            v172 = v40;
            atomic_fetch_add_explicit(&v40->__shared_weak_owners_, 1uLL, memory_order_relaxed);
            xpc_object_t v67 = _Block_copy(v171);
            std::string v68 = *(NSObject **)(v2 + 88);
            if (v68) {
              dispatch_retain(*(dispatch_object_t *)(v2 + 88));
            }
            if (v67)
            {
              xpc_object_t v69 = _Block_copy(v67);
              uint64_t v70 = *(const void **)(v66 + 104);
              *(void *)(v66 + 104) = v69;
              if (!v70) {
                goto LABEL_154;
              }
            }
            else
            {
              uint64_t v70 = *(const void **)(v66 + 104);
              *(void *)(v66 + 104) = 0;
              if (!v70)
              {
LABEL_154:
                if (v68) {
                  dispatch_retain(v68);
                }
                int v71 = *(NSObject **)(v66 + 112);
                *(void *)(v66 + 112) = v68;
                if (v71) {
                  dispatch_release(v71);
                }
                if (v68) {
                  dispatch_release(v68);
                }
                if (v67) {
                  _Block_release(v67);
                }
                if (v172) {
                  std::__shared_weak_count::__release_weak(v172);
                }
LABEL_164:
                if (!*(unsigned char *)(v2 + 169)) {
                  goto LABEL_191;
                }
                uint64_t v72 = *(void *)(v2 + 376);
                v169[0] = MEMORY[0x1E4F143A8];
                v169[1] = 1174405120;
                v169[2] = ___ZZN7antenna7Service8Internal4initEvENK3__0clEv_block_invoke_77;
                v169[3] = &__block_descriptor_tmp_80_3;
                v169[4] = v2;
                v169[5] = v38;
                v170 = v40;
                atomic_fetch_add_explicit(&v40->__shared_weak_owners_, 1uLL, memory_order_relaxed);
                xpc_object_t v73 = _Block_copy(v169);
                int v74 = *(NSObject **)(v2 + 88);
                if (v74) {
                  dispatch_retain(*(dispatch_object_t *)(v2 + 88));
                }
                if (v73)
                {
                  int v75 = _Block_copy(v73);
                  uint64_t v76 = *(const void **)(v72 + 136);
                  *(void *)(v72 + 136) = v75;
                  if (!v76)
                  {
LABEL_172:
                    if (v74) {
                      dispatch_retain(v74);
                    }
                    xpc_object_t v77 = *(NSObject **)(v72 + 144);
                    *(void *)(v72 + 144) = v74;
                    if (v77) {
                      dispatch_release(v77);
                    }
                    if (v74) {
                      dispatch_release(v74);
                    }
                    if (v73) {
                      _Block_release(v73);
                    }
                    char v78 = *(ctu::iokit::Controller **)(*(void *)(v2 + 376) + 72);
                    if (v78)
                    {
                      *(_DWORD *)(v2 + 564) = ctu::iokit::Controller::queryPowerSource(v78);
                      int v79 = *(NSObject **)(v2 + 40);
                      if (!os_log_type_enabled(v79, OS_LOG_TYPE_DEFAULT))
                      {
LABEL_189:
                        if (v170) {
                          std::__shared_weak_count::__release_weak(v170);
                        }
LABEL_191:
                        if (!*(_DWORD *)(v2 + 172)) {
                          goto LABEL_209;
                        }
                        *(unsigned char *)(v2 + 736) = 0;
                        uint64_t v81 = *(void *)(v2 + 376);
                        v165[0] = MEMORY[0x1E4F143A8];
                        v165[1] = 1174405120;
                        v165[2] = ___ZZN7antenna7Service8Internal4initEvENK3__0clEv_block_invoke_81;
                        v165[3] = &__block_descriptor_tmp_85;
                        v165[4] = v2;
                        v165[5] = v38;
                        v166 = v40;
                        atomic_fetch_add_explicit(&v40->__shared_weak_owners_, 1uLL, memory_order_relaxed);
                        xpc_object_t v82 = _Block_copy(v165);
                        uint64_t v83 = *(NSObject **)(v2 + 88);
                        if (v83) {
                          dispatch_retain(*(dispatch_object_t *)(v2 + 88));
                        }
                        if (v82)
                        {
                          xpc_object_t v84 = _Block_copy(v82);
                          int v85 = *(const void **)(v81 + 152);
                          *(void *)(v81 + 152) = v84;
                          if (!v85) {
                            goto LABEL_199;
                          }
                        }
                        else
                        {
                          int v85 = *(const void **)(v81 + 152);
                          *(void *)(v81 + 152) = 0;
                          if (!v85)
                          {
LABEL_199:
                            if (v83) {
                              dispatch_retain(v83);
                            }
                            unsigned int v86 = *(NSObject **)(v81 + 160);
                            *(void *)(v81 + 160) = v83;
                            if (v86) {
                              dispatch_release(v86);
                            }
                            if (v83) {
                              dispatch_release(v83);
                            }
                            if (v82) {
                              _Block_release(v82);
                            }
                            if (v166) {
                              std::__shared_weak_count::__release_weak(v166);
                            }
LABEL_209:
                            if (!*(unsigned char *)(v2 + 176))
                            {
LABEL_227:
                              IOKitEventNotifier::start(*(IOKitEventNotifier **)(v2 + 376));
                              goto LABEL_228;
                            }
                            *(unsigned char *)(v2 + 737) = 0;
                            uint64_t v87 = *(void *)(v2 + 376);
                            v163[0] = MEMORY[0x1E4F143A8];
                            v163[1] = 1174405120;
                            v163[2] = ___ZZN7antenna7Service8Internal4initEvENK3__0clEv_block_invoke_86;
                            uint64_t v163[3] = &__block_descriptor_tmp_89_1;
                            v163[4] = v2;
                            v163[5] = v38;
                            v164 = v40;
                            atomic_fetch_add_explicit(&v40->__shared_weak_owners_, 1uLL, memory_order_relaxed);
                            uint64_t v88 = _Block_copy(v163);
                            char v89 = *(NSObject **)(v2 + 88);
                            if (v89) {
                              dispatch_retain(*(dispatch_object_t *)(v2 + 88));
                            }
                            if (v88)
                            {
                              unsigned int v90 = _Block_copy(v88);
                              uint64_t v91 = *(const void **)(v87 + 168);
                              *(void *)(v87 + 168) = v90;
                              if (!v91) {
                                goto LABEL_217;
                              }
                            }
                            else
                            {
                              uint64_t v91 = *(const void **)(v87 + 168);
                              *(void *)(v87 + 168) = 0;
                              if (!v91)
                              {
LABEL_217:
                                if (v89) {
                                  dispatch_retain(v89);
                                }
                                int v92 = *(NSObject **)(v87 + 176);
                                *(void *)(v87 + 176) = v89;
                                if (v92) {
                                  dispatch_release(v92);
                                }
                                if (v89) {
                                  dispatch_release(v89);
                                }
                                if (v88) {
                                  _Block_release(v88);
                                }
                                if (v164) {
                                  std::__shared_weak_count::__release_weak(v164);
                                }
                                goto LABEL_227;
                              }
                            }
                            _Block_release(v91);
                            goto LABEL_217;
                          }
                        }
                        _Block_release(v85);
                        goto LABEL_199;
                      }
                    }
                    else
                    {
                      *(_DWORD *)(v2 + 564) = 1;
                      int v79 = *(NSObject **)(v2 + 40);
                      if (!os_log_type_enabled(v79, OS_LOG_TYPE_DEFAULT)) {
                        goto LABEL_189;
                      }
                    }
                    ctu::iokit::asString();
                    if (v168 >= 0) {
                      xpc_object_t v80 = buf;
                    }
                    else {
                      xpc_object_t v80 = *(uint8_t **)buf;
                    }
                    *(_DWORD *)xpc_object_t v188 = 136315138;
                    *(void *)&v188[4] = v80;
                    _os_log_impl(&dword_1C5767000, v79, OS_LOG_TYPE_DEFAULT, "#I Initial Power Source: %s", v188, 0xCu);
                    if (v168 < 0) {
                      operator delete(*(void **)buf);
                    }
                    goto LABEL_189;
                  }
                }
                else
                {
                  uint64_t v76 = *(const void **)(v72 + 136);
                  *(void *)(v72 + 136) = 0;
                  if (!v76) {
                    goto LABEL_172;
                  }
                }
                _Block_release(v76);
                goto LABEL_172;
              }
            }
            _Block_release(v70);
            goto LABEL_154;
          }
        }
        _Block_release(v64);
        goto LABEL_136;
      }
    }
    _Block_release(v58);
    goto LABEL_118;
  }
LABEL_228:
  pthread_mutex_lock(&ctu::Singleton<Capabilities,Capabilities,ctu::PthreadMutexGuardPolicy<Capabilities>>::sInstance);
  uint64_t v93 = (Capabilities *)qword_1EBBDD070;
  if (!qword_1EBBDD070)
  {
    unsigned int v94 = operator new(1uLL);
    size_t v95 = operator new(0x20uLL);
    *size_t v95 = &unk_1F20F7BD0;
    v95[1] = 0;
    v95[2] = 0;
    v95[3] = v94;
    uint64_t v96 = (std::__shared_weak_count *)off_1EBBDD078;
    qword_1EBBDD070 = (uint64_t)v94;
    off_1EBBDD078 = v95;
    if (v96 && !atomic_fetch_add(&v96->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
      std::__shared_weak_count::__release_weak(v96);
    }
    uint64_t v93 = (Capabilities *)qword_1EBBDD070;
  }
  uint64_t v97 = (std::__shared_weak_count *)off_1EBBDD078;
  *(void *)long long buf = v93;
  *(void *)&uint8_t buf[8] = off_1EBBDD078;
  if (off_1EBBDD078) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)off_1EBBDD078 + 1, 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<Capabilities,Capabilities,ctu::PthreadMutexGuardPolicy<Capabilities>>::sInstance);
  int isCMHandDetectionSupported = Capabilities::isCMHandDetectionSupported(v93);
  int v99 = isCMHandDetectionSupported;
  if (v97 && !atomic_fetch_add(&v97->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
    std::__shared_weak_count::__release_weak(v97);
    if (!v99) {
      goto LABEL_253;
    }
  }
  else if (!isCMHandDetectionSupported)
  {
    goto LABEL_253;
  }
  xpc_object_t v100 = *(NSObject **)(v2 + 88);
  dispatch_object_t v162 = v100;
  if (v100) {
    dispatch_retain(v100);
  }
  int v101 = *(NSObject **)(v2 + 96);
  dispatch_object_t object = v101;
  if (v101) {
    dispatch_retain(v101);
  }
  CMHandDetectionDelegate::create(&v162, &object, buf);
  long long v102 = *(_OWORD *)buf;
  *(void *)long long buf = 0;
  *(void *)&uint8_t buf[8] = 0;
  xpc_object_t v103 = *(std::__shared_weak_count **)(v2 + 520);
  *(_OWORD *)(v2 + 512) = v102;
  if (v103 && !atomic_fetch_add(&v103->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
    std::__shared_weak_count::__release_weak(v103);
  }
  uint64_t v104 = *(std::__shared_weak_count **)&buf[8];
  if (*(void *)&buf[8]
    && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
    std::__shared_weak_count::__release_weak(v104);
  }
  if (object) {
    dispatch_release(object);
  }
  if (v162) {
    dispatch_release(v162);
  }
LABEL_253:
  xpc_object_t v105 = *(uint64_t ***)(v2 + 512);
  if (v105)
  {
    v158[0] = MEMORY[0x1E4F143A8];
    v158[1] = 1174405120;
    v158[2] = ___ZZN7antenna7Service8Internal4initEvENK3__0clEv_block_invoke_90;
    v158[3] = &__block_descriptor_tmp_93_0;
    v158[4] = v2;
    v158[5] = v38;
    int v159 = v40;
    atomic_fetch_add_explicit(&v40->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    int v106 = _Block_copy(v158);
    std::string v160 = v106;
    CMHandDetectionDelegate::registerCallback(v105, &v160);
    if (v106) {
      _Block_release(v106);
    }
    if (v159) {
      std::__shared_weak_count::__release_weak(v159);
    }
  }
  if (*(void *)(v2 + 496)) {
    goto LABEL_274;
  }
  int v107 = *(NSObject **)(v2 + 88);
  dispatch_object_t v157 = v107;
  if (v107) {
    dispatch_retain(v107);
  }
  unsigned int v108 = *(NSObject **)(v2 + 96);
  dispatch_object_t v156 = v108;
  if (v108) {
    dispatch_retain(v108);
  }
  ctu::iokit::IOHIDController::create();
  long long v109 = *(_OWORD *)buf;
  *(void *)long long buf = 0;
  *(void *)&uint8_t buf[8] = 0;
  uint64_t v110 = *(std::__shared_weak_count **)(v2 + 504);
  *(_OWORD *)(v2 + 496) = v109;
  if (v110 && !atomic_fetch_add(&v110->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
    std::__shared_weak_count::__release_weak(v110);
  }
  xpc_object_t v111 = *(std::__shared_weak_count **)&buf[8];
  if (*(void *)&buf[8]
    && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
    std::__shared_weak_count::__release_weak(v111);
  }
  if (v156) {
    dispatch_release(v156);
  }
  if (v157) {
    dispatch_release(v157);
  }
  if (*(void *)(v2 + 496))
  {
LABEL_274:
    v153[0] = MEMORY[0x1E4F143A8];
    v153[1] = 1174405120;
    v153[2] = ___ZZN7antenna7Service8Internal4initEvENK3__0clEv_block_invoke_94;
    v153[3] = &__block_descriptor_tmp_97_0;
    v153[4] = v2;
    v153[5] = v38;
    xpc_object_t v154 = v40;
    atomic_fetch_add_explicit(&v40->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    int v155 = _Block_copy(v153);
    ctu::iokit::IOHIDController::registerProxCallback();
    if (v155) {
      _Block_release(v155);
    }
    if (v154) {
      std::__shared_weak_count::__release_weak(v154);
    }
  }
  if (!*(unsigned char *)(v2 + 192)) {
    goto LABEL_299;
  }
  if (*(void *)(v2 + 496)) {
    goto LABEL_295;
  }
  int v112 = *(NSObject **)(v2 + 88);
  dispatch_object_t v152 = v112;
  if (v112) {
    dispatch_retain(v112);
  }
  int v113 = *(NSObject **)(v2 + 96);
  dispatch_object_t v151 = v113;
  if (v113) {
    dispatch_retain(v113);
  }
  ctu::iokit::IOHIDController::create();
  long long v114 = *(_OWORD *)buf;
  *(void *)long long buf = 0;
  *(void *)&uint8_t buf[8] = 0;
  int v115 = *(std::__shared_weak_count **)(v2 + 504);
  *(_OWORD *)(v2 + 496) = v114;
  if (v115 && !atomic_fetch_add(&v115->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
    std::__shared_weak_count::__release_weak(v115);
  }
  int v116 = *(std::__shared_weak_count **)&buf[8];
  if (*(void *)&buf[8]
    && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
    std::__shared_weak_count::__release_weak(v116);
  }
  if (v151) {
    dispatch_release(v151);
  }
  if (v152) {
    dispatch_release(v152);
  }
  if (*(void *)(v2 + 496))
  {
LABEL_295:
    v148[0] = MEMORY[0x1E4F143A8];
    v148[1] = 1174405120;
    v148[2] = ___ZZN7antenna7Service8Internal4initEvENK3__0clEv_block_invoke_98;
    v148[3] = &__block_descriptor_tmp_102;
    v148[4] = v2;
    v148[5] = v38;
    xpc_object_t v149 = v40;
    atomic_fetch_add_explicit(&v40->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    xpc_object_t v150 = _Block_copy(v148);
    ctu::iokit::IOHIDController::registerKeyboardCallback();
    if (v150) {
      _Block_release(v150);
    }
    if (v149) {
      std::__shared_weak_count::__release_weak(v149);
    }
LABEL_299:
    int64_t v117 = *(ctu::iokit::IOHIDController **)(v2 + 496);
    if (v117) {
      ctu::iokit::IOHIDController::start(v117);
    }
  }
  if (*(unsigned char *)(v2 + 688))
  {
    int v118 = *(NSObject **)(v2 + 96);
    dispatch_object_t v147 = v118;
    if (v118) {
      dispatch_retain(v118);
    }
    memset(buf, 170, 16);
    std::allocate_shared[abi:ne180100]<HKWorkoutManager,std::allocator<HKWorkoutManager>,dispatch::workloop &,void>(&v147, (uint64_t *)buf);
    long long v119 = *(_OWORD *)buf;
    *(void *)long long buf = 0;
    *(void *)&uint8_t buf[8] = 0;
    int v120 = *(std::__shared_weak_count **)(v2 + 680);
    *(_OWORD *)(v2 + 672) = v119;
    if (v120 && !atomic_fetch_add(&v120->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
      std::__shared_weak_count::__release_weak(v120);
    }
    uint64_t v121 = *(std::__shared_weak_count **)&buf[8];
    if (*(void *)&buf[8]
      && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
      std::__shared_weak_count::__release_weak(v121);
    }
    if (v147) {
      dispatch_release(v147);
    }
    xpc_object_t v122 = *(void **)(v2 + 672);
    if (v122)
    {
      v145[0] = MEMORY[0x1E4F143A8];
      v145[1] = 1174405120;
      v145[2] = ___ZZN7antenna7Service8Internal4initEvENK3__0clEv_block_invoke_103;
      v145[3] = &__block_descriptor_tmp_107;
      v145[4] = v2;
      v145[5] = v38;
      int v146 = v40;
      atomic_fetch_add_explicit(&v40->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      v187 = 0;
      v186[0] = &unk_1F20FD128;
      v186[1] = _Block_copy(v145);
      v187 = v186;
      HKWorkoutManager::registerCallback(v122, v186);
      if (v187 == v186)
      {
        (*(void (**)(void *))(v186[0] + 32))(v186);
        xpc_object_t v123 = v146;
        if (v146) {
LABEL_317:
        }
          std::__shared_weak_count::__release_weak(v123);
      }
      else
      {
        if (v187) {
          (*(void (**)(void))(*v187 + 40))();
        }
        xpc_object_t v123 = v146;
        if (v146) {
          goto LABEL_317;
        }
      }
    }
  }
  memset(buf, 170, 16);
  uint64_t v125 = *(void *)(v2 + 72);
  xpc_object_t v124 = *(std::__shared_weak_count **)(v2 + 80);
  uint64_t v143 = v125;
  if (!v124)
  {
    unsigned __int8 v144 = 0;
LABEL_356:
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  unint64_t v126 = std::__shared_weak_count::lock(v124);
  unsigned __int8 v144 = v126;
  if (!v126) {
    goto LABEL_356;
  }
  uint64_t v127 = v126;
  long long v128 = (std::__shared_weak_count *)operator new(0x30uLL);
  int v129 = v128;
  v128->__shared_owners_ = 0;
  v128->__shared_weak_owners_ = 0;
  v128->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20FD1B8;
  long long v130 = &v128[1].__vftable;
  uint64_t v143 = 0;
  unsigned __int8 v144 = 0;
  v128[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20FD260;
  v128[1].__shared_owners_ = v125;
  v128[1].__shared_weak_owners_ = (uint64_t)v127;
  atomic_fetch_add_explicit(&v127->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (atomic_fetch_add(&v127->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    v128[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20FD208;
    *(void *)long long buf = v128 + 1;
    *(void *)&uint8_t buf[8] = v128;
    long long v131 = v144;
    if (v144) {
      goto LABEL_322;
    }
LABEL_327:
    xpc_object_t v141 = v130;
    xpc_object_t v142 = v129;
LABEL_328:
    atomic_fetch_add_explicit(&v129->__shared_owners_, 1uLL, memory_order_relaxed);
    goto LABEL_329;
  }
  ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
  std::__shared_weak_count::__release_weak(v127);
  v129[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20FD208;
  *(void *)long long buf = v130;
  *(void *)&uint8_t buf[8] = v129;
  long long v131 = v144;
  if (!v144) {
    goto LABEL_327;
  }
LABEL_322:
  if (!atomic_fetch_add(&v131->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
    std::__shared_weak_count::__release_weak(v131);
  }
  int v129 = *(std::__shared_weak_count **)&buf[8];
  xpc_object_t v141 = *(void **)buf;
  xpc_object_t v142 = *(std::__shared_weak_count **)&buf[8];
  if (*(void *)&buf[8]) {
    goto LABEL_328;
  }
LABEL_329:
  antenna::CommandDriver::registerHandler();
  if (v142 && !atomic_fetch_add(&v142->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v142->__on_zero_shared)(v142);
    std::__shared_weak_count::__release_weak(v142);
    if (!*(unsigned char *)(v2 + 572)) {
      goto LABEL_341;
    }
  }
  else if (!*(unsigned char *)(v2 + 572))
  {
    goto LABEL_341;
  }
  long long v132 = *(std::__shared_weak_count **)(v2 + 144);
  uint64_t v139 = *(void *)(v2 + 136);
  std::string v140 = v132;
  if (v132) {
    atomic_fetch_add_explicit(&v132->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  xpc_object_t v133 = operator new(0x28uLL);
  std::__shared_ptr_emplace<PPMManager>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<ctu::LogServer> &,std::allocator<PPMManager>,0>(v133, &v139);
  *(void *)(v2 + 576) = v133 + 3;
  xpc_object_t v134 = *(std::__shared_weak_count **)(v2 + 584);
  *(void *)(v2 + 584) = v133;
  if (v134 && !atomic_fetch_add(&v134->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
    std::__shared_weak_count::__release_weak(v134);
  }
  uint64_t v135 = v140;
  if (v140 && !atomic_fetch_add(&v140->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
    std::__shared_weak_count::__release_weak(v135);
  }
LABEL_341:
  v136 = *(std::__shared_weak_count **)&buf[8];
  if (*(void *)&buf[8]
    && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
    std::__shared_weak_count::__release_weak(v136);
  }
  std::__shared_weak_count::__release_weak(v40);
  operator delete(v1);
  if (a1)
  {
    v137 = (std::__shared_weak_count *)a1[2];
    if (v137)
    {
      if (!atomic_fetch_add(&v137->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
        std::__shared_weak_count::__release_weak(v137);
      }
    }
    operator delete(a1);
  }
}

void sub_1C59162B8(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void ___ZZN7antenna7Service8Internal4initEvENK3__0clEv_block_invoke(void *a1, int a2)
{
  xpc_object_t v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    uint64_t v5 = a1[4];
    xpc_object_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      xpc_object_t v7 = v6;
      uint64_t v8 = a1[5];
      if (atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        if (!v8) {
          return;
        }
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v7);
        if (!v8) {
          return;
        }
      }
      antenna::Service::Internal::motionDetectCallback_sync(v5, a2);
    }
  }
}

void ___ZZN7antenna7Service8Internal4initEvENK3__0clEv_block_invoke_62(void *a1, uint64_t a2, unsigned int a3)
{
  xpc_object_t v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    uint64_t v7 = a1[4];
    uint64_t v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      xpc_object_t v9 = v8;
      uint64_t v10 = a1[5];
      if (atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        if (!v10) {
          return;
        }
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v9);
        if (!v10) {
          return;
        }
      }
      antenna::Service::Internal::accessoryNotification_sync(v7, a2, a3);
    }
  }
}

void ___ZZN7antenna7Service8Internal4initEvENK3__0clEv_block_invoke_67(void *a1, char a2)
{
  xpc_object_t v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    uint64_t v5 = a1[4];
    xpc_object_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      uint64_t v7 = v6;
      uint64_t v8 = a1[5];
      if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v7);
      }
      if (v8)
      {
        if (a2)
        {
          xpc_object_t v9 = *(NSObject **)(v5 + 40);
          if (!os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT)) {
            return;
          }
          *(_WORD *)long long buf = 0;
          uint64_t v10 = "#I ctu::iokit::kTelephonyIOKitMesaStartShort";
          long long v11 = buf;
          goto LABEL_12;
        }
        if ((a2 & 2) != 0)
        {
          xpc_object_t v9 = *(NSObject **)(v5 + 40);
          if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
          {
            __int16 v12 = 0;
            uint64_t v10 = "#I ctu::iokit::kTelephonyIOKitMesaStartLong";
            long long v11 = (uint8_t *)&v12;
LABEL_12:
            _os_log_impl(&dword_1C5767000, v9, OS_LOG_TYPE_DEFAULT, v10, v11, 2u);
          }
        }
      }
    }
  }
}

void ___ZZN7antenna7Service8Internal4initEvENK3__0clEv_block_invoke_72(void *a1, unsigned int a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  xpc_object_t v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    uint64_t v5 = (antenna::Service::Internal *)a1[4];
    xpc_object_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      uint64_t v7 = v6;
      uint64_t v8 = a1[5];
      if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v7);
      }
      if (v8)
      {
        xpc_object_t v9 = *((void *)v5 + 5);
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
        {
          v10[0] = 67109120;
          v10[1] = a2;
          _os_log_impl(&dword_1C5767000, v9, OS_LOG_TYPE_DEFAULT, "#I Display evnet: 0x%x\n", (uint8_t *)v10, 8u);
        }
        antenna::Service::Internal::sendVideoAccessory_sync(v5, (a2 >> 2) & 1);
      }
    }
  }
}

void ___ZZN7antenna7Service8Internal4initEvENK3__0clEv_block_invoke_77(void *a1, int a2)
{
  xpc_object_t v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    uint64_t v5 = a1[4];
    xpc_object_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      uint64_t v7 = v6;
      uint64_t v8 = a1[5];
      if (atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        if (!v8) {
          return;
        }
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v7);
        if (!v8) {
          return;
        }
      }
      antenna::Service::Internal::powerSourceNotification_sync(v5, a2);
    }
  }
}

void ___ZZN7antenna7Service8Internal4initEvENK3__0clEv_block_invoke_81(void *a1, int a2)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  xpc_object_t v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    uint64_t v5 = a1[4];
    xpc_object_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      uint64_t v7 = v6;
      uint64_t v8 = a1[5];
      if (atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        if (!v8) {
          return;
        }
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v7);
        if (!v8) {
          return;
        }
      }
      xpc_object_t v9 = *(NSObject **)(v5 + 40);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
      {
        int v12 = *(unsigned __int8 *)(v5 + 736);
        if (*(void *)(v5 + 184)) {
          xpc_object_t v13 = "on";
        }
        else {
          xpc_object_t v13 = "off";
        }
        LODWORD(v22) = 67109634;
        HIDWORD(v22) = v12;
        LOWORD(v23) = 1024;
        *(_DWORD *)((char *)&v23 + 2) = a2;
        HIWORD(v23) = 2080;
        int v24 = v13;
        _os_log_debug_impl(&dword_1C5767000, v9, OS_LOG_TYPE_DEBUG, "#D Cached State: %d, event: %d, Camera-Off-Timer: %s", (uint8_t *)&v22, 0x18u);
        int v10 = *(unsigned __int8 *)(v5 + 736);
        uint64_t v11 = *(void *)(v5 + 184);
        if (v10 == a2)
        {
LABEL_9:
          if (!v11) {
            return;
          }
          goto LABEL_16;
        }
      }
      else
      {
        int v10 = *(unsigned __int8 *)(v5 + 736);
        uint64_t v11 = *(void *)(v5 + 184);
        if (v10 == a2) {
          goto LABEL_9;
        }
      }
      if (v11)
      {
LABEL_16:
        *(unsigned char *)(v5 + 736) = a2;
        return;
      }
      if (a2 || v10 != 1)
      {
        *(unsigned char *)(v5 + 736) = a2;
        antenna::Service::Internal::sendSensorID_sync((antenna::Service::Internal *)v5);
      }
      else
      {
        *(unsigned char *)(v5 + 736) = 0;
        xpc_object_t v14 = *(std::__shared_weak_count **)(v5 + 80);
        if (!v14 || (uint64_t v15 = *(void *)(v5 + 72), (v16 = std::__shared_weak_count::lock(v14)) == 0)) {
          std::__throw_bad_weak_ptr[abi:ne180100]();
        }
        xpc_object_t v17 = v16;
        atomic_fetch_add_explicit(&v16->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        if (!atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v17);
        }
        dispatch_object_t v18 = dispatch_source_create(MEMORY[0x1E4F14490], 1uLL, 0, *(dispatch_queue_t *)(v5 + 88));
        uint64_t v19 = *(NSObject **)(v5 + 184);
        *(void *)(v5 + 184) = v18;
        if (v19)
        {
          dispatch_release(v19);
          dispatch_object_t v18 = *(NSObject **)(v5 + 184);
        }
        dispatch_time_t v20 = dispatch_time(0, 300000000);
        dispatch_source_set_timer(v18, v20, 0xFFFFFFFFFFFFFFFFLL, 0x1312D00uLL);
        long long v21 = *(NSObject **)(v5 + 184);
        uint64_t v22 = MEMORY[0x1E4F143A8];
        uint64_t v23 = 1174405120;
        int v24 = (const char *)___ZN7antenna7Service8Internal31cameraStateCallBackHandler_syncIN3ctu5iokit25TelephonyIOKitFaceIDStateEEEvRT_S6__block_invoke;
        uint64_t v25 = &__block_descriptor_tmp_112_4;
        uint64_t v26 = v5;
        uint64_t v27 = v15;
        uint64_t v28 = v17;
        atomic_fetch_add_explicit(&v17->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        dispatch_source_set_event_handler(v21, &v22);
        dispatch_activate(*(dispatch_object_t *)(v5 + 184));
        if (v28) {
          std::__shared_weak_count::__release_weak(v28);
        }
        std::__shared_weak_count::__release_weak(v17);
      }
    }
  }
}

void ___ZZN7antenna7Service8Internal4initEvENK3__0clEv_block_invoke_86(void *a1, int a2)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  xpc_object_t v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    uint64_t v5 = a1[4];
    xpc_object_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      uint64_t v7 = v6;
      uint64_t v8 = a1[5];
      if (atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        if (!v8) {
          return;
        }
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v7);
        if (!v8) {
          return;
        }
      }
      xpc_object_t v9 = *(NSObject **)(v5 + 40);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
      {
        int v12 = *(unsigned __int8 *)(v5 + 737);
        if (*(void *)(v5 + 184)) {
          xpc_object_t v13 = "on";
        }
        else {
          xpc_object_t v13 = "off";
        }
        LODWORD(v22) = 67109634;
        HIDWORD(v22) = v12;
        LOWORD(v23) = 1024;
        *(_DWORD *)((char *)&v23 + 2) = a2;
        HIWORD(v23) = 2080;
        int v24 = v13;
        _os_log_debug_impl(&dword_1C5767000, v9, OS_LOG_TYPE_DEBUG, "#D Cached State: %d, event: %d, Camera-Off-Timer: %s", (uint8_t *)&v22, 0x18u);
        int v10 = *(unsigned __int8 *)(v5 + 737);
        uint64_t v11 = *(void *)(v5 + 184);
        if (v10 == a2)
        {
LABEL_9:
          if (!v11) {
            return;
          }
          goto LABEL_16;
        }
      }
      else
      {
        int v10 = *(unsigned __int8 *)(v5 + 737);
        uint64_t v11 = *(void *)(v5 + 184);
        if (v10 == a2) {
          goto LABEL_9;
        }
      }
      if (v11)
      {
LABEL_16:
        *(unsigned char *)(v5 + 737) = a2;
        return;
      }
      if (a2 || v10 != 1)
      {
        *(unsigned char *)(v5 + 737) = a2;
        antenna::Service::Internal::sendSensorID_sync((antenna::Service::Internal *)v5);
      }
      else
      {
        *(unsigned char *)(v5 + 737) = 0;
        xpc_object_t v14 = *(std::__shared_weak_count **)(v5 + 80);
        if (!v14 || (uint64_t v15 = *(void *)(v5 + 72), (v16 = std::__shared_weak_count::lock(v14)) == 0)) {
          std::__throw_bad_weak_ptr[abi:ne180100]();
        }
        xpc_object_t v17 = v16;
        atomic_fetch_add_explicit(&v16->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        if (!atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v17);
        }
        dispatch_object_t v18 = dispatch_source_create(MEMORY[0x1E4F14490], 1uLL, 0, *(dispatch_queue_t *)(v5 + 88));
        uint64_t v19 = *(NSObject **)(v5 + 184);
        *(void *)(v5 + 184) = v18;
        if (v19)
        {
          dispatch_release(v19);
          dispatch_object_t v18 = *(NSObject **)(v5 + 184);
        }
        dispatch_time_t v20 = dispatch_time(0, 300000000);
        dispatch_source_set_timer(v18, v20, 0xFFFFFFFFFFFFFFFFLL, 0x1312D00uLL);
        long long v21 = *(NSObject **)(v5 + 184);
        uint64_t v22 = MEMORY[0x1E4F143A8];
        uint64_t v23 = 1174405120;
        int v24 = (const char *)___ZN7antenna7Service8Internal31cameraStateCallBackHandler_syncIN3ctu5iokit30TelephonyIOKitFrontCameraStateEEEvRT_S6__block_invoke;
        uint64_t v25 = &__block_descriptor_tmp_117_0;
        uint64_t v26 = v5;
        uint64_t v27 = v15;
        uint64_t v28 = v17;
        atomic_fetch_add_explicit(&v17->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        dispatch_source_set_event_handler(v21, &v22);
        dispatch_activate(*(dispatch_object_t *)(v5 + 184));
        if (v28) {
          std::__shared_weak_count::__release_weak(v28);
        }
        std::__shared_weak_count::__release_weak(v17);
      }
    }
  }
}

void ___ZZN7antenna7Service8Internal4initEvENK3__0clEv_block_invoke_90(void *a1, int a2)
{
  xpc_object_t v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    uint64_t v5 = (void *)a1[4];
    xpc_object_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      uint64_t v7 = v6;
      uint64_t v8 = a1[5];
      if (atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        if (!v8) {
          return;
        }
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v7);
        if (!v8) {
          return;
        }
      }
      antenna::Service::Internal::handDetectCallback(v5, a2);
    }
  }
}

void ___ZZN7antenna7Service8Internal4initEvENK3__0clEv_block_invoke_94(void *a1, int a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  xpc_object_t v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    uint64_t v5 = a1[4];
    xpc_object_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      uint64_t v7 = v6;
      uint64_t v8 = a1[5];
      if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v7);
      }
      if (v8)
      {
        int isProxCovered = ctu::iokit::IOHIDController::isProxCovered(*(ctu::iokit::IOHIDController **)(v5 + 496));
        if (*(unsigned __int8 *)(v5 + 560) != isProxCovered)
        {
          int v10 = isProxCovered;
          uint64_t v11 = *(NSObject **)(v5 + 40);
          if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
          {
            v12[0] = 67109376;
            v12[1] = v10;
            __int16 v13 = 1024;
            int v14 = a2;
            _os_log_impl(&dword_1C5767000, v11, OS_LOG_TYPE_DEFAULT, "#I Prox Covered State: %d mask value: 0x%x", (uint8_t *)v12, 0xEu);
          }
          *(unsigned char *)(v5 + 560) = v10;
          antenna::Service::Internal::checkStartHandDetection_sync((antenna::Service::Internal *)v5);
        }
      }
    }
  }
}

void ___ZZN7antenna7Service8Internal4initEvENK3__0clEv_block_invoke_98(void *a1, int a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  xpc_object_t v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    uint64_t v5 = a1[4];
    xpc_object_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      uint64_t v7 = v6;
      uint64_t v8 = a1[5];
      if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v7);
      }
      if (v8 && *(unsigned __int8 *)(v5 + 561) != a2)
      {
        xpc_object_t v9 = *(NSObject **)(v5 + 40);
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
        {
          int v10 = "OPENED";
          if (a2) {
            int v10 = "CLOSED";
          }
          int v11 = 136315138;
          int v12 = v10;
          _os_log_impl(&dword_1C5767000, v9, OS_LOG_TYPE_DEFAULT, "#I Smart Keyboard Cover: %s", (uint8_t *)&v11, 0xCu);
        }
        *(unsigned char *)(v5 + 561) = a2;
        antenna::Service::Internal::sendAccessoryStatus_sync((NSObject **)v5);
      }
    }
  }
}

void ___ZZN7antenna7Service8Internal4initEvENK3__0clEv_block_invoke_103(void *a1, int a2, int a3, int a4, int a5)
{
  xpc_object_t v6 = (std::__shared_weak_count *)a1[6];
  if (v6)
  {
    uint64_t v11 = a1[4];
    int v12 = std::__shared_weak_count::lock(v6);
    if (v12)
    {
      uint64_t v13 = v12;
      int v14 = (void *)a1[5];
      if (!v14) {
        goto LABEL_16;
      }
      uint64_t v15 = (std::__shared_weak_count *)v14[10];
      if (!v15 || (uint64_t v16 = v14[9], (v17 = std::__shared_weak_count::lock(v15)) == 0)) {
        std::__throw_bad_weak_ptr[abi:ne180100]();
      }
      dispatch_object_t v18 = v17;
      uint64_t v19 = operator new(0x18uLL);
      *(void *)uint64_t v19 = v11;
      void v19[2] = a2;
      v19[3] = a3;
      v19[4] = a4;
      v19[5] = a5;
      dispatch_time_t v20 = v14[11];
      atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
      long long v21 = operator new(0x18uLL);
      *long long v21 = v19;
      v21[1] = v16;
      v21[2] = v18;
      dispatch_async_f(v20, v21, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN7antenna7Service8InternalEE15execute_wrappedIZZZNS5_4initEvENK3__0clEvEUb9_EUlvE_EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrISA_NSF_14default_deleteISA_EEEEENUlPvE_8__invokeESK_);
      if (!atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
        if (atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
          return;
        }
      }
      else
      {
LABEL_16:
        if (atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
          return;
        }
      }
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

uint64_t std::shared_ptr<PPMManager>::operator=[abi:ne180100](uint64_t result, long long *a2)
{
  uint64_t v2 = result;
  long long v3 = *a2;
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  xpc_object_t v4 = *(std::__shared_weak_count **)(result + 8);
  *(_OWORD *)xpc_object_t result = v3;
  if (v4)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
      return v2;
    }
  }
  return result;
}

void ___ZN7antenna7Service8Internal31cameraStateCallBackHandler_syncIN3ctu5iokit25TelephonyIOKitFaceIDStateEEEvRT_S6__block_invoke(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    long long v3 = (NSObject **)a1[4];
    xpc_object_t v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = a1[5];
      if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v5);
      }
      if (v6)
      {
        uint64_t v7 = v3[5];
        if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)xpc_object_t v9 = 0;
          _os_log_debug_impl(&dword_1C5767000, v7, OS_LOG_TYPE_DEBUG, "#D Camera state debounce timer is expired, sending last state to baseband", v9, 2u);
        }
        antenna::Service::Internal::sendSensorID_sync((antenna::Service::Internal *)v3);
        dispatch_source_cancel(v3[23]);
        uint64_t v8 = v3[23];
        v3[23] = 0;
        if (v8) {
          dispatch_release(v8);
        }
      }
    }
  }
}

void ___ZN7antenna7Service8Internal31cameraStateCallBackHandler_syncIN3ctu5iokit30TelephonyIOKitFrontCameraStateEEEvRT_S6__block_invoke(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    long long v3 = (NSObject **)a1[4];
    xpc_object_t v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = a1[5];
      if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v5);
      }
      if (v6)
      {
        uint64_t v7 = v3[5];
        if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)xpc_object_t v9 = 0;
          _os_log_debug_impl(&dword_1C5767000, v7, OS_LOG_TYPE_DEBUG, "#D Camera state debounce timer is expired, sending last state to baseband", v9, 2u);
        }
        antenna::Service::Internal::sendSensorID_sync((antenna::Service::Internal *)v3);
        dispatch_source_cancel(v3[23]);
        uint64_t v8 = v3[23];
        v3[23] = 0;
        if (v8) {
          dispatch_release(v8);
        }
      }
    }
  }
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN7antenna7Service8InternalEE15execute_wrappedIZZZNS5_4initEvENK3__0clEvEUb9_EUlvE_EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrISA_NSF_14default_deleteISA_EEEEENUlPvE_8__invokeESK_(uint64_t **a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = **a1;
  xpc_object_t v4 = (const void *)*MEMORY[0x1E4F4D2C8];
  size_t v5 = strlen((const char *)*MEMORY[0x1E4F4D2C8]);
  if (v5 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v6 = v5;
  if (v5 >= 0x17)
  {
    uint64_t v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17) {
      uint64_t v8 = v5 | 7;
    }
    uint64_t v9 = v8 + 1;
    uint64_t v7 = operator new(v8 + 1);
    __dst[1] = v6;
    int64_t v18 = v9 | 0x8000000000000000;
    __dst[0] = v7;
    goto LABEL_8;
  }
  HIBYTE(v18) = v5;
  uint64_t v7 = __dst;
  if (v5) {
LABEL_8:
  }
    memmove(v7, v4, v6);
  *((unsigned char *)v7 + v6) = 0;
  if (*(char *)(v3 + 719) >= 0) {
    int v10 = (const char *)(v3 + 696);
  }
  else {
    int v10 = *(const char **)(v3 + 696);
  }
  int v11 = SHIBYTE(v18);
  int v12 = (void *)__dst[0];
  if (v18 >= 0) {
    uint64_t v13 = (const char *)__dst;
  }
  else {
    uint64_t v13 = (const char *)__dst[0];
  }
  int v14 = strcasecmp(v10, v13);
  int v15 = v14;
  if (v11 < 0)
  {
    operator delete(v12);
    if (!v15)
    {
LABEL_19:
      *(_OWORD *)(v3 + 720) = *(_OWORD *)(v2 + 1);
      antenna::Service::Internal::sendWorkoutInfo_sync((antenna::Service::Internal *)v3);
    }
  }
  else if (!v14)
  {
    goto LABEL_19;
  }
  operator delete(v2);
  uint64_t v16 = (std::__shared_weak_count *)a1[2];
  if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
  }

  operator delete(a1);
}

void sub_1C59178F4(_Unwind_Exception *a1)
{
  operator delete(v2);
  xpc_object_t v4 = (std::__shared_weak_count *)v1[2];
  if (v4)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void({block_pointer})(abm::WorkoutType,abm::WorkoutState,abm::WorkoutLocation,abm::SwimLocation),std::allocator<void({block_pointer})(abm::WorkoutType,abm::WorkoutState,abm::WorkoutLocation,abm::SwimLocation)>,void ()(abm::WorkoutType,abm::WorkoutState,abm::WorkoutLocation,abm::SwimLocation)>::__clone()
{
  return 0;
}

void *std::__function::__func<void({block_pointer})(abm::WorkoutType,abm::WorkoutState,abm::WorkoutLocation,abm::SwimLocation),std::allocator<void({block_pointer})(abm::WorkoutType,abm::WorkoutState,abm::WorkoutLocation,abm::SwimLocation)>,void ()(abm::WorkoutType,abm::WorkoutState,abm::WorkoutLocation,abm::SwimLocation)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F20FD128;
  xpc_object_t result = *(void **)(a1 + 8);
  if (result) {
    xpc_object_t result = _Block_copy(result);
  }
  a2[1] = result;
  return result;
}

void std::__function::__func<void({block_pointer})(abm::WorkoutType,abm::WorkoutState,abm::WorkoutLocation,abm::SwimLocation),std::allocator<void({block_pointer})(abm::WorkoutType,abm::WorkoutState,abm::WorkoutLocation,abm::SwimLocation)>,void ()(abm::WorkoutType,abm::WorkoutState,abm::WorkoutLocation,abm::SwimLocation)>::destroy(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 8);
  if (v2) {
    _Block_release(v2);
  }
  *(void *)(a1 + 8) = 0;
}

uint64_t std::__function::__func<void({block_pointer})(abm::WorkoutType,abm::WorkoutState,abm::WorkoutLocation,abm::SwimLocation),std::allocator<void({block_pointer})(abm::WorkoutType,abm::WorkoutState,abm::WorkoutLocation,abm::SwimLocation)>,void ()(abm::WorkoutType,abm::WorkoutState,abm::WorkoutLocation,abm::SwimLocation)>::operator()(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 8) + 16))();
}

uint64_t std::__function::__func<void({block_pointer})(abm::WorkoutType,abm::WorkoutState,abm::WorkoutLocation,abm::SwimLocation),std::allocator<void({block_pointer})(abm::WorkoutType,abm::WorkoutState,abm::WorkoutLocation,abm::SwimLocation)>,void ()(abm::WorkoutType,abm::WorkoutState,abm::WorkoutLocation,abm::SwimLocation)>::target(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x80000001C59A5B8ELL) {
    return a1 + 8;
  }
  if (((v3 & 0x80000001C59A5B8ELL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000001C59A5B8ELL)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001C59A5B8ELL & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 8;
  }
  return 0;
}

void *std::__function::__func<void({block_pointer})(abm::WorkoutType,abm::WorkoutState,abm::WorkoutLocation,abm::SwimLocation),std::allocator<void({block_pointer})(abm::WorkoutType,abm::WorkoutState,abm::WorkoutLocation,abm::SwimLocation)>,void ()(abm::WorkoutType,abm::WorkoutState,abm::WorkoutLocation,abm::SwimLocation)>::target_type()
{
}

void std::__shared_ptr_emplace<antenna::AntennaCommandDriverDelegate<antenna::Service::Internal>::create(std::shared_ptr<antenna::Service::Internal>)::MakeSharedEnabler,std::allocator<antenna::AntennaCommandDriverDelegate<antenna::Service::Internal>::create(std::shared_ptr<antenna::Service::Internal>)::MakeSharedEnabler>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20FD1B8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<antenna::AntennaCommandDriverDelegate<antenna::Service::Internal>::create(std::shared_ptr<antenna::Service::Internal>)::MakeSharedEnabler,std::allocator<antenna::AntennaCommandDriverDelegate<antenna::Service::Internal>::create(std::shared_ptr<antenna::Service::Internal>)::MakeSharedEnabler>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20FD1B8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t std::__shared_ptr_emplace<antenna::AntennaCommandDriverDelegate<antenna::Service::Internal>::create(std::shared_ptr<antenna::Service::Internal>)::MakeSharedEnabler,std::allocator<antenna::AntennaCommandDriverDelegate<antenna::Service::Internal>::create(std::shared_ptr<antenna::Service::Internal>)::MakeSharedEnabler>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void antenna::AntennaCommandDriverDelegate<antenna::Service::Internal>::create(std::shared_ptr<antenna::Service::Internal>)::MakeSharedEnabler::~MakeSharedEnabler(antenna::AntennaCommandDriverDelegateInterface *this)
{
  *(void *)this = &unk_1F20FD260;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  antenna::AntennaCommandDriverDelegateInterface::~AntennaCommandDriverDelegateInterface(this);
}

{
  std::__shared_weak_count *v2;
  void *v3;
  uint64_t vars8;

  *(void *)this = &unk_1F20FD260;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  antenna::AntennaCommandDriverDelegateInterface::~AntennaCommandDriverDelegateInterface(this);

  operator delete(v3);
}

void antenna::AntennaCommandDriverDelegate<antenna::Service::Internal>::signalTransmitState(uint64_t a1, int a2, int a3)
{
  xpc_object_t v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (v4)
  {
    uint64_t v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      uint64_t v8 = v7;
      uint64_t v9 = *(void **)(a1 + 8);
      if (v9) {
        antenna::Service::Internal::transmitStateHandler(v9, a2, a3);
      }
      if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
}

void antenna::AntennaCommandDriverDelegate<antenna::Service::Internal>::~AntennaCommandDriverDelegate(antenna::AntennaCommandDriverDelegateInterface *this)
{
  *(void *)this = &unk_1F20FD260;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  antenna::AntennaCommandDriverDelegateInterface::~AntennaCommandDriverDelegateInterface(this);
}

{
  std::__shared_weak_count *v2;
  void *v3;
  uint64_t vars8;

  *(void *)this = &unk_1F20FD260;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  antenna::AntennaCommandDriverDelegateInterface::~AntennaCommandDriverDelegateInterface(this);

  operator delete(v3);
}

void std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<unsigned int,unsigned int>,std::__tree_node<std::__value_type<unsigned int,unsigned int>,void *> *,long>>(uint64_t **a1, void *a2, void *a3)
{
  xpc_object_t v4 = a2;
  if (a1[2])
  {
    size_t v6 = (uint64_t **)*a1;
    uint64_t v8 = a1 + 1;
    uint64_t v7 = a1[1];
    *a1 = (uint64_t *)(a1 + 1);
    v7[2] = 0;
    a1[2] = 0;
    a1[1] = 0;
    uint64_t v9 = v6[1] ? v6[1] : (uint64_t *)v6;
    if (v9)
    {
      int v10 = (uint64_t *)v9[2];
      if (v10)
      {
        int v11 = (uint64_t *)*v10;
        if ((uint64_t *)*v10 == v9)
        {
          uint64_t *v10 = 0;
          while (1)
          {
            int v34 = (void *)v10[1];
            if (!v34) {
              break;
            }
            do
            {
              int v10 = v34;
              int v34 = (void *)*v34;
            }
            while (v34);
          }
        }
        else
        {
          for (v10[1] = 0; v11; int v11 = (uint64_t *)v10[1])
          {
            do
            {
              int v10 = v11;
              int v11 = (uint64_t *)*v11;
            }
            while (v11);
          }
        }
      }
      if (a2 != a3)
      {
        int v12 = v9;
        uint64_t v13 = v4;
        while (1)
        {
          uint64_t v9 = v10;
          unsigned int v14 = *((_DWORD *)v13 + 7);
          *((_DWORD *)v12 + 7) = v14;
          *((_DWORD *)v12 + 8) = *((_DWORD *)v13 + 8);
          int v15 = *v8;
          uint64_t v16 = a1 + 1;
          xpc_object_t v17 = a1 + 1;
          if (*v8) {
            break;
          }
LABEL_14:
          *int v12 = 0;
          v12[1] = 0;
          _DWORD v12[2] = (uint64_t)v16;
          std::__shared_weak_count *v17 = v12;
          int64_t v18 = (uint64_t *)**a1;
          if (v18) {
            goto LABEL_15;
          }
LABEL_16:
          std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v12);
          a1[2] = (uint64_t *)((char *)a1[2] + 1);
          if (v10)
          {
            int v10 = (uint64_t *)v10[2];
            if (v10)
            {
              long long v21 = (void *)*v10;
              if ((uint64_t *)*v10 == v9)
              {
                uint64_t *v10 = 0;
                while (1)
                {
                  uint64_t v22 = (void *)v10[1];
                  if (!v22) {
                    break;
                  }
                  do
                  {
                    int v10 = v22;
                    uint64_t v22 = (void *)*v22;
                  }
                  while (v22);
                }
              }
              else
              {
                for (v10[1] = 0; v21; long long v21 = (void *)v10[1])
                {
                  do
                  {
                    int v10 = v21;
                    long long v21 = (void *)*v21;
                  }
                  while (v21);
                }
              }
            }
          }
          else
          {
            int v10 = 0;
          }
          uint64_t v19 = (void *)v13[1];
          if (v19)
          {
            do
            {
              xpc_object_t v4 = v19;
              uint64_t v19 = (void *)*v19;
            }
            while (v19);
          }
          else
          {
            do
            {
              xpc_object_t v4 = (void *)v13[2];
              BOOL v20 = *v4 == (void)v13;
              uint64_t v13 = v4;
            }
            while (!v20);
          }
          if (v9)
          {
            int v12 = v9;
            uint64_t v13 = v4;
            if (v4 != a3) {
              continue;
            }
          }
          goto LABEL_42;
        }
        do
        {
          while (1)
          {
            uint64_t v16 = v15;
            if (v14 >= *((_DWORD *)v15 + 7)) {
              break;
            }
            int v15 = (uint64_t *)*v15;
            xpc_object_t v17 = (uint64_t **)v16;
            if (!*v16) {
              goto LABEL_14;
            }
          }
          int v15 = (uint64_t *)v15[1];
        }
        while (v15);
        xpc_object_t v17 = (uint64_t **)(v16 + 1);
        *int v12 = 0;
        v12[1] = 0;
        _DWORD v12[2] = (uint64_t)v16;
        v16[1] = v12;
        int64_t v18 = (uint64_t *)**a1;
        if (!v18) {
          goto LABEL_16;
        }
LABEL_15:
        *a1 = v18;
        int v12 = *v17;
        goto LABEL_16;
      }
LABEL_42:
      std::__tree<std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>>>::destroy(v9);
      if (v10)
      {
        for (uint64_t i = (void *)v10[2]; i; uint64_t i = (void *)i[2])
          int v10 = i;
        std::__tree<std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>>>::destroy(v10);
      }
    }
  }
  if (v4 != a3)
  {
    int v24 = (uint64_t ***)(a1 + 1);
    while (1)
    {
      uint64_t v25 = (uint64_t *)operator new(0x28uLL);
      uint64_t v26 = v25;
      uint64_t v27 = *(void *)((char *)v4 + 28);
      *(uint64_t *)((char *)v25 + 28) = v27;
      uint64_t v28 = *v24;
      uint64_t v29 = a1 + 1;
      size_t v30 = a1 + 1;
      if (*v24) {
        break;
      }
LABEL_50:
      *uint64_t v25 = 0;
      v25[1] = 0;
      void v25[2] = (uint64_t)v29;
      *size_t v30 = v25;
      int v31 = (uint64_t *)**a1;
      if (v31) {
        goto LABEL_51;
      }
LABEL_52:
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v26);
      a1[2] = (uint64_t *)((char *)a1[2] + 1);
      size_t v32 = (void *)v4[1];
      if (v32)
      {
        do
        {
          uint64_t v33 = v32;
          size_t v32 = (void *)*v32;
        }
        while (v32);
      }
      else
      {
        do
        {
          uint64_t v33 = (void *)v4[2];
          BOOL v20 = *v33 == (void)v4;
          xpc_object_t v4 = v33;
        }
        while (!v20);
      }
      xpc_object_t v4 = v33;
      if (v33 == a3) {
        return;
      }
    }
    do
    {
      while (1)
      {
        uint64_t v29 = v28;
        if (*((_DWORD *)v28 + 7) <= v27) {
          break;
        }
        uint64_t v28 = (uint64_t **)*v28;
        size_t v30 = v29;
        if (!*v29) {
          goto LABEL_50;
        }
      }
      uint64_t v28 = (uint64_t **)v28[1];
    }
    while (v28);
    size_t v30 = v29 + 1;
    *uint64_t v25 = 0;
    v25[1] = 0;
    void v25[2] = (uint64_t)v29;
    v29[1] = v25;
    int v31 = (uint64_t *)**a1;
    if (!v31) {
      goto LABEL_52;
    }
LABEL_51:
    *a1 = v31;
    uint64_t v26 = *v30;
    goto LABEL_52;
  }
}

void dispatch::async<void ctu::SharedSynchronizable<antenna::Service::Internal>::execute_wrapped<antenna::Service::Internal::stopService(void)::$_0>(antenna::Service::Internal::stopService(void)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<antenna::Service::Internal::stopService(void)::$_0,dispatch_queue_s *::default_delete<antenna::Service::Internal::stopService(void)::$_0>>)::{lambda(void *)#1}::__invoke(void *a1)
{
  uint64_t v2 = *(antenna::Service::Internal ***)a1;
  uint64_t v3 = **(antenna::Service::Internal ***)a1;
  antenna::Service::Internal::enableTxPowerCappingNotification_sync(v3, 0);
  antenna::Service::Internal::stopTxPowerCapping_sync(v3);
  xpc_object_t v4 = (HKWorkoutManager *)*((void *)v3 + 84);
  if (v4) {
    HKWorkoutManager::stop(v4);
  }
  operator delete(v2);
  size_t v5 = (std::__shared_weak_count *)*((void *)a1 + 2);
  if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    size_t v6 = a1;
  }
  else
  {
    size_t v6 = a1;
  }
  operator delete(v6);
}

void sub_1C5918148(_Unwind_Exception *a1)
{
  operator delete(v2);
  xpc_object_t v4 = (std::__shared_weak_count *)v1[2];
  if (v4)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void dispatch::async<void ctu::SharedSynchronizable<antenna::Service::Internal>::execute_wrapped<antenna::Service::Internal::startService(void)::$_0>(antenna::Service::Internal::startService(void)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<antenna::Service::Internal::startService(void)::$_0,dispatch_queue_s *::default_delete<antenna::Service::Internal::startService(void)::$_0>>)::{lambda(void *)#1}::__invoke(void *a1)
{
  uint64_t v2 = *(antenna::Service::Internal ***)a1;
  uint64_t v3 = **(antenna::Service::Internal ***)a1;
  antenna::Service::Internal::setupTxPower_sync(v3);
  xpc_object_t v4 = (HKWorkoutManager *)*((void *)v3 + 84);
  if (v4) {
    HKWorkoutManager::start(v4);
  }
  operator delete(v2);
  size_t v5 = (std::__shared_weak_count *)*((void *)a1 + 2);
  if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    size_t v6 = a1;
  }
  else
  {
    size_t v6 = a1;
  }
  operator delete(v6);
}

void sub_1C5918278(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;
  operator delete(v3);
  size_t v5 = (std::__shared_weak_count *)v1[2];
  if (v5)
  {
    if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void dispatch::async<void ctu::SharedSynchronizable<antenna::Service::Internal>::execute_wrapped<antenna::Service::Internal::enterLowPower(void)::$_0>(antenna::Service::Internal::enterLowPower(void)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<antenna::Service::Internal::enterLowPower(void)::$_0,dispatch_queue_s *::default_delete<antenna::Service::Internal::enterLowPower(void)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = **a1;
  xpc_object_t v4 = *(NSObject **)(v3 + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)size_t v6 = 0;
    _os_log_debug_impl(&dword_1C5767000, v4, OS_LOG_TYPE_DEBUG, "#D Enter Low Power ! ", v6, 2u);
  }
  *(unsigned char *)(v3 + 168) = 1;
  antenna::Service::Internal::enableTxPowerCappingNotification_sync((antenna::Service::Internal *)v3, 0);
  antenna::Service::Internal::stopTxPowerCapping_sync((antenna::Service::Internal *)v3);
  operator delete(v2);
  size_t v5 = (std::__shared_weak_count *)a1[2];
  if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  operator delete(a1);
}

void sub_1C59183CC(_Unwind_Exception *a1)
{
  operator delete(v2);
  xpc_object_t v4 = (std::__shared_weak_count *)v1[2];
  if (v4)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void dispatch::async<void ctu::SharedSynchronizable<antenna::Service::Internal>::execute_wrapped<antenna::Service::Internal::exitLowPower(void)::$_0>(antenna::Service::Internal::exitLowPower(void)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<antenna::Service::Internal::exitLowPower(void)::$_0,dispatch_queue_s *::default_delete<antenna::Service::Internal::exitLowPower(void)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = **a1;
  xpc_object_t v4 = *(NSObject **)(v3 + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)size_t v6 = 0;
    _os_log_debug_impl(&dword_1C5767000, v4, OS_LOG_TYPE_DEBUG, "#D EXIT Low Power ! ", v6, 2u);
  }
  *(unsigned char *)(v3 + 168) = 0;
  antenna::Service::Internal::enableTxPowerCappingNotification_sync((antenna::Service::Internal *)v3, 1);
  antenna::Service::Internal::sendAccessoryStatus_sync((NSObject **)v3);
  operator delete(v2);
  size_t v5 = (std::__shared_weak_count *)a1[2];
  if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  operator delete(a1);
}

void sub_1C5918518(_Unwind_Exception *a1)
{
  operator delete(v2);
  xpc_object_t v4 = (std::__shared_weak_count *)v1[2];
  if (v4)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void ___ZNK8dispatch8callbackIU13block_pointerFvN3xpc4dictEEEclIJS2_EEEvDpT__block_invoke_0(uint64_t a1)
{
}

void dispatch::async<void ctu::SharedSynchronizable<antenna::Service::Internal>::execute_wrapped<antenna::Service::Internal::transmitStateHandler(antenna::BBTransmitState,antenna::BBTransmitTrigger)::$_0>(antenna::Service::Internal::transmitStateHandler(antenna::BBTransmitState,antenna::BBTransmitTrigger)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<antenna::Service::Internal::transmitStateHandler(antenna::BBTransmitState,antenna::BBTransmitTrigger)::$_0,dispatch_queue_s *::default_delete<antenna::Service::Internal::transmitStateHandler(antenna::BBTransmitState,antenna::BBTransmitTrigger)::$_0>>)::{lambda(void *)#1}::__invoke(int **a1)
{
  uint64_t v55 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *a1;
  uint64_t v3 = *(antenna::Service::Internal **)*a1;
  unint64_t v52 = 0xAAAAAAAAAAAAAAAALL;
  antenna::Service::Internal::createTransmitStateDict_sync(v2[2], v2[3], (xpc_object_t *)&v52);
  xpc_object_t v4 = (xpc_object_t)v52;
  if (MEMORY[0x1C8792D30](v52) == MEMORY[0x1E4F14590])
  {
    if (v4)
    {
      xpc_retain(v4);
      xpc_object_t v5 = v4;
    }
    else
    {
      xpc_object_t v5 = xpc_null_create();
    }
    size_t v6 = (void *)*((void *)v3 + 28);
    *((void *)v3 + 28) = v5;
    xpc_release(v6);
    if (v4)
    {
      xpc_retain(v4);
      xpc_object_t v7 = v4;
      uint64_t v8 = (const void *)*((void *)v3 + 13);
      if (v8)
      {
LABEL_7:
        uint64_t v9 = _Block_copy(v8);
        goto LABEL_10;
      }
    }
    else
    {
      xpc_object_t v7 = xpc_null_create();
      uint64_t v8 = (const void *)*((void *)v3 + 13);
      if (v8) {
        goto LABEL_7;
      }
    }
    uint64_t v9 = 0;
LABEL_10:
    int v10 = *((void *)v3 + 14);
    *(void *)&blocuint64_t k = MEMORY[0x1E4F143A8];
    *((void *)&block + 1) = 1174405120;
    *(void *)&long long v42 = ___ZNK8dispatch8callbackIU13block_pointerFvN3xpc4dictEEEclIJS2_EEEvDpT__block_invoke_0;
    *((void *)&v42 + 1) = &__block_descriptor_tmp_128_1;
    if (v9)
    {
      object[0] = _Block_copy(v9);
      object[1] = v7;
      if (v7)
      {
LABEL_12:
        xpc_retain(v7);
        goto LABEL_15;
      }
    }
    else
    {
      object[0] = 0;
      object[1] = v7;
      if (v7) {
        goto LABEL_12;
      }
    }
    object[1] = xpc_null_create();
LABEL_15:
    dispatch_async(v10, &block);
    xpc_release(object[1]);
    object[1] = 0;
    if (object[0]) {
      _Block_release(object[0]);
    }
    if (v9) {
      _Block_release(v9);
    }
    xpc_release(v7);
    memset(v51, 170, sizeof(v51));
    xpc_object_t value = xpc_dictionary_get_value(v4, (const char *)*MEMORY[0x1E4F4CD50]);
    *(void *)&blocuint64_t k = value;
    if (value) {
      xpc_retain(value);
    }
    else {
      *(void *)&blocuint64_t k = xpc_null_create();
    }
    xpc::dyn_cast_or_default(v51, (xpc *)&block, (const object *)"", v12);
    xpc_release((xpc_object_t)block);
    memset(v50, 170, sizeof(v50));
    xpc_object_t v13 = xpc_dictionary_get_value(v4, (const char *)*MEMORY[0x1E4F4CF18]);
    *(void *)&blocuint64_t k = v13;
    if (v13) {
      xpc_retain(v13);
    }
    else {
      *(void *)&blocuint64_t k = xpc_null_create();
    }
    xpc::dyn_cast_or_default(v50, (xpc *)&block, (const object *)"", v14);
    xpc_release((xpc_object_t)block);
    int v15 = SHIBYTE(v51[2]);
    if (v51[2] >= 0) {
      size_t v16 = HIBYTE(v51[2]);
    }
    else {
      size_t v16 = v51[1];
    }
    if (v16 == strlen((const char *)*MEMORY[0x1E4F4D0C0])
      && (v51[2] >= 0 ? (xpc_object_t v17 = v51) : (xpc_object_t v17 = (uint64_t *)v51[0]), !memcmp(v17, (const void *)*MEMORY[0x1E4F4D0C0], v16)))
    {
      BOOL v20 = *((void *)v3 + 5);
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
      {
        LOWORD(block) = 0;
        _os_log_debug_impl(&dword_1C5767000, v20, OS_LOG_TYPE_DEBUG, "#D Tx Started", (uint8_t *)&block, 2u);
      }
      antenna::Service::Internal::startTxPowerCapping_sync(v3);
    }
    else if (v16 == strlen((const char *)*MEMORY[0x1E4F4CDB0]))
    {
      int64_t v18 = v15 >= 0 ? v51 : (uint64_t *)v51[0];
      if (!memcmp(v18, (const void *)*MEMORY[0x1E4F4CDB0], v16))
      {
        uint64_t v19 = *((void *)v3 + 5);
        if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
        {
          LOWORD(block) = 0;
          _os_log_debug_impl(&dword_1C5767000, v19, OS_LOG_TYPE_DEBUG, "#D Tx Stopped", (uint8_t *)&block, 2u);
        }
        antenna::Service::Internal::stopTxPowerCapping_sync(v3);
      }
    }
    unint64_t v49 = 0xAAAAAAAAAAAAAAAALL;
    *(void *)&long long v21 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v21 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v48[7] = v21;
    v48[8] = v21;
    v48[5] = v21;
    v48[6] = v21;
    v48[3] = v21;
    v48[4] = v21;
    v48[1] = v21;
    v48[2] = v21;
    v48[0] = v21;
    long long v46 = v21;
    long long v47 = v21;
    long long v44 = v21;
    *(_OWORD *)long long __p = v21;
    long long v42 = v21;
    *(_OWORD *)dispatch_object_t object = v21;
    blocuint64_t k = v21;
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&block);
    uint64_t v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&block, (uint64_t)"Transmit State: ", 16);
    if (v51[2] >= 0) {
      uint64_t v23 = v51;
    }
    else {
      uint64_t v23 = (uint64_t *)v51[0];
    }
    if (v51[2] >= 0) {
      uint64_t v24 = HIBYTE(v51[2]);
    }
    else {
      uint64_t v24 = v51[1];
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)v23, v24);
    uint64_t v25 = HIBYTE(v50[2]);
    if (v50[2] < 0) {
      uint64_t v25 = v50[1];
    }
    if (v25)
    {
      uint64_t v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&block, (uint64_t)" (", 2);
      if (v50[2] >= 0) {
        uint64_t v27 = v50;
      }
      else {
        uint64_t v27 = (uint64_t *)v50[0];
      }
      if (v50[2] >= 0) {
        uint64_t v28 = HIBYTE(v50[2]);
      }
      else {
        uint64_t v28 = v50[1];
      }
      uint64_t v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)v27, v28);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)")", 1);
    }
    size_t v30 = *((void *)v3 + 5);
    if (!os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
    {
LABEL_78:
      *(void *)&blocuint64_t k = *MEMORY[0x1E4FBA418];
      *(void *)((char *)&block + *(void *)(block - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
      *((void *)&block + 1) = MEMORY[0x1E4FBA470] + 16;
      if (SHIBYTE(v46) < 0) {
        operator delete(__p[1]);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x1C8791FB0](v48);
      if (SHIBYTE(v50[2]) < 0)
      {
        operator delete((void *)v50[0]);
        if ((SHIBYTE(v51[2]) & 0x80000000) == 0) {
          goto LABEL_82;
        }
      }
      else if ((SHIBYTE(v51[2]) & 0x80000000) == 0)
      {
LABEL_82:
        xpc_object_t v4 = (xpc_object_t)v52;
        goto LABEL_83;
      }
      operator delete((void *)v51[0]);
      goto LABEL_82;
    }
    if ((BYTE8(v47) & 0x10) != 0)
    {
      uint64_t v33 = v47;
      if ((unint64_t)v47 < *((void *)&v44 + 1))
      {
        *(void *)&long long v47 = *((void *)&v44 + 1);
        uint64_t v33 = *((void *)&v44 + 1);
      }
      int v34 = (const void *)v44;
      size_t v31 = v33 - v44;
      if ((unint64_t)(v33 - v44) >= 0x7FFFFFFFFFFFFFF8) {
        goto LABEL_90;
      }
    }
    else
    {
      if ((BYTE8(v47) & 8) == 0)
      {
        size_t v31 = 0;
        HIBYTE(v40) = 0;
        size_t v32 = __dst;
        goto LABEL_74;
      }
      int v34 = (const void *)*((void *)&v42 + 1);
      size_t v31 = (size_t)object[1] - *((void *)&v42 + 1);
      if ((char *)object[1] - *((void *)&v42 + 1) >= (xpc_object_t)0x7FFFFFFFFFFFFFF8) {
LABEL_90:
      }
        std::string::__throw_length_error[abi:ne180100]();
    }
    if (v31 >= 0x17)
    {
      uint64_t v35 = (v31 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v31 | 7) != 0x17) {
        uint64_t v35 = v31 | 7;
      }
      uint64_t v36 = v35 + 1;
      size_t v32 = (void **)operator new(v35 + 1);
      __dst[1] = (void *)v31;
      int64_t v40 = v36 | 0x8000000000000000;
      __dst[0] = v32;
    }
    else
    {
      HIBYTE(v40) = v31;
      size_t v32 = __dst;
      if (!v31) {
        goto LABEL_74;
      }
    }
    memmove(v32, v34, v31);
LABEL_74:
    *((unsigned char *)v32 + v31) = 0;
    BOOL v37 = __dst;
    if (v40 < 0) {
      BOOL v37 = (void **)__dst[0];
    }
    *(_DWORD *)long long buf = 136315138;
    uint64_t v54 = v37;
    _os_log_impl(&dword_1C5767000, v30, OS_LOG_TYPE_DEFAULT, "#I %s", buf, 0xCu);
    if (SHIBYTE(v40) < 0) {
      operator delete(__dst[0]);
    }
    goto LABEL_78;
  }
LABEL_83:
  xpc_release(v4);
  operator delete(v2);
  uint64_t v38 = (std::__shared_weak_count *)a1[2];
  if (v38 && !atomic_fetch_add(&v38->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
    std::__shared_weak_count::__release_weak(v38);
  }
  operator delete(a1);
}

void sub_1C5918C8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, xpc_object_t object, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (*(char *)(v30 - 145) < 0) {
    operator delete(*(void **)(v30 - 168));
  }
  if (*(char *)(v30 - 121) < 0) {
    operator delete(*(void **)(v30 - 144));
  }
  xpc_release(v29);
  operator delete(v28);
  size_t v32 = (std::__shared_weak_count *)v27[2];
  if (v32)
  {
    if (!atomic_fetch_add(&v32->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  operator delete(v27);
  _Unwind_Resume(a1);
}

void dispatch::async<void ctu::SharedSynchronizable<antenna::Service::Internal>::execute_wrapped<antenna::Service::Internal::setAudioState(xpc::dict)::$_0>(antenna::Service::Internal::setAudioState(xpc::dict)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<antenna::Service::Internal::setAudioState(xpc::dict)::$_0,dispatch_queue_s *::default_delete<antenna::Service::Internal::setAudioState(xpc::dict)::$_0>>)::{lambda(void *)#1}::__invoke(void **a1)
{
  uint64_t v1 = a1;
  xpc_object_t object[3] = *(xpc_object_t *)MEMORY[0x1E4F143B8];
  uint64_t v2 = *a1;
  uint64_t v3 = (antenna::Service::Internal *)**a1;
  int v159 = v3;
  dispatch_object_t v156 = (xpc_object_t *)*a1;
  if (!*((_DWORD *)v3 + 82))
  {
    xpc_object_t xdict = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
    xpc_object_t v4 = v2 + 1;
    xpc_object_t v5 = (void *)*MEMORY[0x1E4F4C2A8];
    object[0] = v4;
    object[1] = v5;
    xpc::dict::object_proxy::operator xpc::dict((uint64_t)object, &xdict);
    xpc_object_t value = xpc_dictionary_get_value(xdict, (const char *)*MEMORY[0x1E4F4CA28]);
    object[0] = value;
    if (value) {
      xpc_retain(value);
    }
    else {
      object[0] = xpc_null_create();
    }
    char v7 = xpc::dyn_cast_or_default((xpc *)object, 0);
    uint64_t v8 = (uint64_t **)((char *)v3 + 288);
    uint64_t v9 = (uint64_t *)*((void *)v3 + 36);
    int v10 = (uint64_t **)((char *)v3 + 288);
    int v11 = (uint64_t **)((char *)v3 + 288);
    if (v9)
    {
      while (1)
      {
        while (1)
        {
          int v11 = (uint64_t **)v9;
          int v12 = *((_DWORD *)v9 + 7);
          if (v12 < 1) {
            break;
          }
          uint64_t v9 = *v11;
          int v10 = v11;
          if (!*v11) {
            goto LABEL_12;
          }
        }
        if ((v12 & 0x80000000) == 0) {
          break;
        }
        uint64_t v9 = v11[1];
        if (!v9)
        {
          int v10 = v11 + 1;
          goto LABEL_12;
        }
      }
      xpc_object_t v13 = v11;
    }
    else
    {
LABEL_12:
      xpc_object_t v13 = operator new(0x28uLL);
      v13[7] = 0;
      *((unsigned char *)v13 + 32) = 0;
      *(void *)xpc_object_t v13 = 0;
      *((void *)v13 + 1) = 0;
      *((void *)v13 + 2) = v11;
      NSObject *v10 = (uint64_t *)v13;
      uint64_t v14 = **((void **)v159 + 35);
      int v15 = (uint64_t *)v13;
      if (v14)
      {
        *((void *)v159 + 35) = v14;
        int v15 = *v10;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)v159 + 36), v15);
      ++*((void *)v159 + 37);
    }
    *((unsigned char *)v13 + 32) = v7;
    xpc_release(object[0]);
    xpc_object_t v16 = xpc_dictionary_get_value(xdict, (const char *)*MEMORY[0x1E4F4C680]);
    object[0] = v16;
    if (v16) {
      xpc_retain(v16);
    }
    else {
      object[0] = xpc_null_create();
    }
    char v17 = xpc::dyn_cast_or_default((xpc *)object, 0);
    int64_t v18 = *v8;
    uint64_t v19 = (uint64_t **)((char *)v159 + 288);
    BOOL v20 = (uint64_t **)((char *)v159 + 288);
    if (*v8)
    {
      while (1)
      {
        while (1)
        {
          BOOL v20 = (uint64_t **)v18;
          int v21 = *((_DWORD *)v18 + 7);
          if (v21 < 2) {
            break;
          }
          int64_t v18 = *v20;
          uint64_t v19 = v20;
          if (!*v20) {
            goto LABEL_25;
          }
        }
        if (v21 == 1) {
          break;
        }
        int64_t v18 = v20[1];
        if (!v18)
        {
          uint64_t v19 = v20 + 1;
          goto LABEL_25;
        }
      }
      uint64_t v22 = v20;
    }
    else
    {
LABEL_25:
      uint64_t v22 = operator new(0x28uLL);
      v22[7] = 1;
      *((unsigned char *)v22 + 32) = 0;
      *(void *)uint64_t v22 = 0;
      *((void *)v22 + 1) = 0;
      *((void *)v22 + 2) = v20;
      NSObject *v19 = (uint64_t *)v22;
      uint64_t v23 = **((void **)v159 + 35);
      uint64_t v24 = (uint64_t *)v22;
      if (v23)
      {
        *((void *)v159 + 35) = v23;
        uint64_t v24 = *v19;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)v159 + 36), v24);
      ++*((void *)v159 + 37);
    }
    *((unsigned char *)v22 + 32) = v17;
    xpc_release(object[0]);
    xpc_object_t v25 = xpc_dictionary_get_value(xdict, (const char *)*MEMORY[0x1E4F4C8D0]);
    object[0] = v25;
    if (v25) {
      xpc_retain(v25);
    }
    else {
      object[0] = xpc_null_create();
    }
    char v26 = xpc::dyn_cast_or_default((xpc *)object, 0);
    uint64_t v27 = *v8;
    uint64_t v28 = (uint64_t **)((char *)v159 + 288);
    uint64_t v29 = (uint64_t **)((char *)v159 + 288);
    if (*v8)
    {
      while (1)
      {
        while (1)
        {
          uint64_t v29 = (uint64_t **)v27;
          int v30 = *((_DWORD *)v27 + 7);
          if (v30 < 4) {
            break;
          }
          uint64_t v27 = *v29;
          uint64_t v28 = v29;
          if (!*v29) {
            goto LABEL_39;
          }
        }
        if (v30 == 3) {
          break;
        }
        uint64_t v27 = v29[1];
        if (!v27)
        {
          uint64_t v28 = v29 + 1;
          goto LABEL_39;
        }
      }
      size_t v31 = v29;
    }
    else
    {
LABEL_39:
      size_t v31 = operator new(0x28uLL);
      v31[7] = 3;
      *((unsigned char *)v31 + 32) = 0;
      *(void *)size_t v31 = 0;
      *((void *)v31 + 1) = 0;
      *((void *)v31 + 2) = v29;
      *uint64_t v28 = (uint64_t *)v31;
      uint64_t v32 = **((void **)v159 + 35);
      uint64_t v33 = (uint64_t *)v31;
      if (v32)
      {
        *((void *)v159 + 35) = v32;
        uint64_t v33 = *v28;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)v159 + 36), v33);
      ++*((void *)v159 + 37);
    }
    *((unsigned char *)v31 + 32) = v26;
    xpc_release(object[0]);
    int v34 = *v8;
    uint64_t v35 = (uint64_t **)((char *)v159 + 288);
    uint64_t v36 = (uint64_t **)((char *)v159 + 288);
    if (*v8)
    {
      while (1)
      {
        while (1)
        {
          uint64_t v36 = (uint64_t **)v34;
          int v37 = *((_DWORD *)v34 + 7);
          if (v37 < 1) {
            break;
          }
          int v34 = *v36;
          uint64_t v35 = v36;
          if (!*v36) {
            goto LABEL_50;
          }
        }
        if ((v37 & 0x80000000) == 0) {
          break;
        }
        int v34 = v36[1];
        if (!v34)
        {
          uint64_t v35 = v36 + 1;
          goto LABEL_50;
        }
      }
      char v41 = *((unsigned char *)v36 + 32);
      long long v42 = (uint64_t **)((char *)v159 + 312);
      long long v43 = (uint64_t *)*((void *)v159 + 39);
      long long v44 = (uint64_t **)((char *)v159 + 312);
      size_t v45 = (uint64_t **)((char *)v159 + 312);
      if (v43) {
        goto LABEL_58;
      }
    }
    else
    {
LABEL_50:
      uint64_t v38 = operator new(0x28uLL);
      v38[7] = 0;
      *((unsigned char *)v38 + 32) = 0;
      *(void *)uint64_t v38 = 0;
      *((void *)v38 + 1) = 0;
      *((void *)v38 + 2) = v36;
      void *v35 = (uint64_t *)v38;
      uint64_t v39 = **((void **)v159 + 35);
      int64_t v40 = (uint64_t *)v38;
      if (v39)
      {
        *((void *)v159 + 35) = v39;
        int64_t v40 = *v35;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)v159 + 36), v40);
      ++*((void *)v159 + 37);
      char v41 = *((unsigned char *)v38 + 32);
      long long v42 = (uint64_t **)((char *)v159 + 312);
      long long v43 = (uint64_t *)*((void *)v159 + 39);
      long long v44 = (uint64_t **)((char *)v159 + 312);
      size_t v45 = (uint64_t **)((char *)v159 + 312);
      if (v43)
      {
        while (1)
        {
LABEL_58:
          while (1)
          {
            size_t v45 = (uint64_t **)v43;
            int v46 = *((_DWORD *)v43 + 7);
            if (v46 < 1) {
              break;
            }
            long long v43 = *v45;
            long long v44 = v45;
            if (!*v45) {
              goto LABEL_62;
            }
          }
          if ((v46 & 0x80000000) == 0) {
            break;
          }
          long long v43 = v45[1];
          if (!v43)
          {
            long long v44 = v45 + 1;
            goto LABEL_62;
          }
        }
        *((unsigned char *)v45 + 32) = v41;
        long long v50 = *v8;
        uint64_t v51 = (uint64_t **)((char *)v159 + 288);
        unint64_t v52 = (uint64_t **)((char *)v159 + 288);
        if (*v8) {
          goto LABEL_69;
        }
        goto LABEL_73;
      }
    }
LABEL_62:
    long long v47 = operator new(0x28uLL);
    v47[7] = 0;
    *((unsigned char *)v47 + 32) = 0;
    *(void *)long long v47 = 0;
    *((void *)v47 + 1) = 0;
    *((void *)v47 + 2) = v45;
    *long long v44 = (uint64_t *)v47;
    uint64_t v48 = **((void **)v159 + 38);
    unint64_t v49 = (uint64_t *)v47;
    if (v48)
    {
      *((void *)v159 + 38) = v48;
      unint64_t v49 = *v44;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)v159 + 39), v49);
    ++*((void *)v159 + 40);
    *((unsigned char *)v47 + 32) = v41;
    long long v50 = *v8;
    uint64_t v51 = (uint64_t **)((char *)v159 + 288);
    unint64_t v52 = (uint64_t **)((char *)v159 + 288);
    if (*v8)
    {
      while (1)
      {
LABEL_69:
        while (1)
        {
          unint64_t v52 = (uint64_t **)v50;
          int v53 = *((_DWORD *)v50 + 7);
          if (v53 < 2) {
            break;
          }
          long long v50 = *v52;
          uint64_t v51 = v52;
          if (!*v52) {
            goto LABEL_73;
          }
        }
        if (v53 == 1) {
          break;
        }
        long long v50 = v52[1];
        if (!v50)
        {
          uint64_t v51 = v52 + 1;
          goto LABEL_73;
        }
      }
      char v57 = *((unsigned char *)v52 + 32);
      xpc_object_t v58 = *v42;
      unint64_t v59 = v42;
      uint64_t v60 = v42;
      if (*v42) {
        goto LABEL_80;
      }
      goto LABEL_84;
    }
LABEL_73:
    uint64_t v54 = operator new(0x28uLL);
    v54[7] = 1;
    *((unsigned char *)v54 + 32) = 0;
    *(void *)uint64_t v54 = 0;
    *((void *)v54 + 1) = 0;
    *((void *)v54 + 2) = v52;
    *uint64_t v51 = (uint64_t *)v54;
    uint64_t v55 = **((void **)v159 + 35);
    xpc_object_t v56 = (uint64_t *)v54;
    if (v55)
    {
      *((void *)v159 + 35) = v55;
      xpc_object_t v56 = *v51;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)v159 + 36), v56);
    ++*((void *)v159 + 37);
    char v57 = *((unsigned char *)v54 + 32);
    xpc_object_t v58 = *v42;
    unint64_t v59 = v42;
    uint64_t v60 = v42;
    if (*v42)
    {
      while (1)
      {
LABEL_80:
        while (1)
        {
          uint64_t v60 = (uint64_t **)v58;
          int v61 = *((_DWORD *)v58 + 7);
          if (v61 < 2) {
            break;
          }
          xpc_object_t v58 = *v60;
          unint64_t v59 = v60;
          if (!*v60) {
            goto LABEL_84;
          }
        }
        if (v61 == 1) {
          break;
        }
        xpc_object_t v58 = v60[1];
        if (!v58)
        {
          unint64_t v59 = v60 + 1;
          goto LABEL_84;
        }
      }
      *((unsigned char *)v60 + 32) = v57;
      unint64_t v65 = *v8;
      uint64_t v66 = (uint64_t **)((char *)v159 + 288);
      if (*v8) {
        goto LABEL_91;
      }
      goto LABEL_95;
    }
LABEL_84:
    int v62 = operator new(0x28uLL);
    v62[7] = 1;
    *((unsigned char *)v62 + 32) = 0;
    *(void *)int v62 = 0;
    *((void *)v62 + 1) = 0;
    *((void *)v62 + 2) = v60;
    *unint64_t v59 = (uint64_t *)v62;
    uint64_t v63 = **((void **)v159 + 38);
    int v64 = (uint64_t *)v62;
    if (v63)
    {
      *((void *)v159 + 38) = v63;
      int v64 = *v59;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)v159 + 39), v64);
    ++*((void *)v159 + 40);
    *((unsigned char *)v62 + 32) = v57;
    unint64_t v65 = *v8;
    uint64_t v66 = (uint64_t **)((char *)v159 + 288);
    if (*v8)
    {
      while (1)
      {
LABEL_91:
        while (1)
        {
          uint64_t v66 = (uint64_t **)v65;
          int v67 = *((_DWORD *)v65 + 7);
          if (v67 < 4) {
            break;
          }
          unint64_t v65 = *v66;
          uint64_t v8 = v66;
          if (!*v66) {
            goto LABEL_95;
          }
        }
        if (v67 == 3) {
          break;
        }
        unint64_t v65 = v66[1];
        if (!v65)
        {
          uint64_t v8 = v66 + 1;
          goto LABEL_95;
        }
      }
      char v71 = *((unsigned char *)v66 + 32);
      uint64_t v72 = *v42;
      xpc_object_t v73 = v42;
      if (*v42) {
        goto LABEL_102;
      }
      goto LABEL_106;
    }
LABEL_95:
    std::string v68 = operator new(0x28uLL);
    v68[7] = 3;
    *((unsigned char *)v68 + 32) = 0;
    *(void *)std::string v68 = 0;
    *((void *)v68 + 1) = 0;
    *((void *)v68 + 2) = v66;
    *uint64_t v8 = (uint64_t *)v68;
    uint64_t v69 = **((void **)v159 + 35);
    uint64_t v70 = (uint64_t *)v68;
    if (v69)
    {
      *((void *)v159 + 35) = v69;
      uint64_t v70 = *v8;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)v159 + 36), v70);
    ++*((void *)v159 + 37);
    char v71 = *((unsigned char *)v68 + 32);
    uint64_t v72 = *v42;
    xpc_object_t v73 = v42;
    if (*v42)
    {
      while (1)
      {
LABEL_102:
        while (1)
        {
          xpc_object_t v73 = (uint64_t **)v72;
          int v74 = *((_DWORD *)v72 + 7);
          if (v74 < 4) {
            break;
          }
          uint64_t v72 = *v73;
          long long v42 = v73;
          if (!*v73) {
            goto LABEL_106;
          }
        }
        if (v74 == 3) {
          break;
        }
        uint64_t v72 = v73[1];
        if (!v72)
        {
          long long v42 = v73 + 1;
          goto LABEL_106;
        }
      }
      int v75 = v73;
      uint64_t v3 = v159;
      goto LABEL_110;
    }
LABEL_106:
    int v75 = operator new(0x28uLL);
    v75[7] = 3;
    *((unsigned char *)v75 + 32) = 0;
    *(void *)int v75 = 0;
    *((void *)v75 + 1) = 0;
    *((void *)v75 + 2) = v73;
    *long long v42 = (uint64_t *)v75;
    uint64_t v3 = v159;
    uint64_t v76 = **((void **)v159 + 38);
    xpc_object_t v77 = (uint64_t *)v75;
    if (v76)
    {
      *((void *)v159 + 38) = v76;
      xpc_object_t v77 = *v42;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)v159 + 39), v77);
    ++*((void *)v159 + 40);
LABEL_110:
    *((unsigned char *)v75 + 32) = v71;
    xpc_release(xdict);
  }
  char v78 = (uint64_t **)((char *)v3 + 288);
  int v79 = (uint64_t *)*((void *)v3 + 36);
  xpc_object_t v80 = (uint64_t **)((char *)v3 + 288);
  uint64_t v81 = (uint64_t **)((char *)v3 + 288);
  if (!v79)
  {
LABEL_118:
    uint64_t v83 = operator new(0x28uLL);
    v83[7] = 2;
    *((unsigned char *)v83 + 32) = 0;
    *(void *)uint64_t v83 = 0;
    *((void *)v83 + 1) = 0;
    *((void *)v83 + 2) = v81;
    uint8_t *v80 = (uint64_t *)v83;
    xpc_object_t v84 = v159;
    uint64_t v85 = **((void **)v159 + 35);
    unsigned int v86 = (uint64_t *)v83;
    if (v85)
    {
      *((void *)v159 + 35) = v85;
      unsigned int v86 = *v80;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)v159 + 36), v86);
    ++*((void *)v159 + 37);
    *((unsigned char *)v83 + 32) = 0;
    if (!*((unsigned char *)v159 + 160)) {
      goto LABEL_199;
    }
LABEL_123:
    uint64_t v88 = (void *)*MEMORY[0x1E4F4C7A0];
    xpc_object_t v84 = v159;
    if (!xpc_dictionary_get_value(v156[1], (const char *)*MEMORY[0x1E4F4C7A0])) {
      goto LABEL_199;
    }
    xpc_object_t xdict = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
    object[0] = v156 + 1;
    object[1] = v88;
    xpc::dict::object_proxy::operator xpc::array((uint64_t)object, &xdict);
    xpc_object_t v89 = xdict;
    if (xdict)
    {
      xpc_retain(xdict);
    }
    else
    {
      xpc_object_t v89 = xpc_null_create();
      if (!v89)
      {
        xpc_object_t v89 = xpc_null_create();
        unsigned int v90 = 0;
LABEL_128:
        dispatch_object_t v157 = v78;
        xpc_release(v90);
        xpc_object_t v91 = xdict;
        if (xdict) {
          xpc_retain(xdict);
        }
        else {
          xpc_object_t v91 = xpc_null_create();
        }
        int v155 = v1;
        if (MEMORY[0x1C8792D30](xdict) == MEMORY[0x1E4F14568])
        {
          size_t count = xpc_array_get_count(xdict);
          if (v91) {
            goto LABEL_133;
          }
        }
        else
        {
          size_t count = 0;
          if (v91)
          {
LABEL_133:
            xpc_retain(v91);
            xpc_object_t v158 = v91;
LABEL_136:
            xpc_release(v91);
            if (count || v89 != v158)
            {
              size_t v93 = 0;
              unsigned int v94 = (const char *)*MEMORY[0x1E4F4C400];
              size_t v95 = (const object *)"";
              while (1)
              {
                memset(object, 170, 24);
                xpc_object_t v96 = xpc_array_get_value(v89, v93);
                xpc_object_t v160 = v96;
                if (v96) {
                  xpc_retain(v96);
                }
                else {
                  xpc_object_t v160 = xpc_null_create();
                }
                xpc::dyn_cast_or_default((uint64_t *)object, (xpc *)&v160, v95, v97);
                xpc_release(v160);
                xpc_object_t v98 = (xpc_object_t)strlen(v94);
                xpc_object_t v99 = v98;
                char v100 = HIBYTE(object[2]);
                if (SHIBYTE(object[2]) < 0)
                {
                  if (v98 == (xpc_object_t)-1) {
LABEL_245:
                  }
                    std::string::__throw_out_of_range[abi:ne180100]();
                  xpc_object_t v101 = object[1];
                  if (object[1] >= v98) {
                    xpc_object_t v103 = v98;
                  }
                  else {
                    xpc_object_t v103 = object[1];
                  }
                  if (memcmp(object[0], v94, (size_t)v103)) {
                    goto LABEL_166;
                  }
                }
                else
                {
                  if (v98 == (xpc_object_t)-1) {
                    goto LABEL_245;
                  }
                  xpc_object_t v101 = (xpc_object_t)HIBYTE(object[2]);
                  if (HIBYTE(object[2]) >= (unint64_t)v98) {
                    size_t v102 = (size_t)v98;
                  }
                  else {
                    size_t v102 = HIBYTE(object[2]);
                  }
                  if (memcmp(object, v94, v102)) {
                    goto LABEL_166;
                  }
                }
                if (v101 == v99)
                {
                  uint64_t v104 = v95;
                  xpc_object_t v105 = v157;
                  while (1)
                  {
                    int v106 = *v105;
                    int v107 = v105;
                    if (!*v105) {
                      break;
                    }
                    while (1)
                    {
                      xpc_object_t v105 = (uint64_t **)v106;
                      int v108 = *((_DWORD *)v106 + 7);
                      if (v108 >= 3) {
                        break;
                      }
                      if (v108 == 2)
                      {
                        long long v109 = v105;
                        goto LABEL_165;
                      }
                      int v106 = v105[1];
                      if (!v106)
                      {
                        int v107 = v105 + 1;
                        goto LABEL_161;
                      }
                    }
                  }
LABEL_161:
                  long long v109 = operator new(0x28uLL);
                  v109[7] = 2;
                  *((unsigned char *)v109 + 32) = 0;
                  *(void *)long long v109 = 0;
                  *((void *)v109 + 1) = 0;
                  *((void *)v109 + 2) = v105;
                  *int v107 = (uint64_t *)v109;
                  uint64_t v110 = **((void **)v159 + 35);
                  xpc_object_t v111 = (uint64_t *)v109;
                  if (v110)
                  {
                    *((void *)v159 + 35) = v110;
                    xpc_object_t v111 = *v107;
                  }
                  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)v159 + 36), v111);
                  ++*((void *)v159 + 37);
                  char v100 = HIBYTE(object[2]);
LABEL_165:
                  *((unsigned char *)v109 + 32) = 1;
                  size_t v95 = v104;
                }
LABEL_166:
                if (v100 < 0)
                {
                  operator delete(object[0]);
                  if (++v93 == count) {
                    goto LABEL_170;
                  }
                }
                else if (++v93 == count)
                {
LABEL_170:
                  if (v89 == v158) {
                    break;
                  }
                }
              }
            }
            xpc_release(v158);
            xpc_release(v89);
            uint64_t v1 = v155;
            char v78 = v157;
            int v112 = *((unsigned __int8 *)v159 + 334);
            int v113 = (uint64_t *)*((void *)v159 + 36);
            long long v114 = v157;
            int v115 = v157;
            if (v113)
            {
              while (1)
              {
                while (1)
                {
                  int v115 = (uint64_t **)v113;
                  int v116 = *((_DWORD *)v113 + 7);
                  if (v116 < 3) {
                    break;
                  }
                  int v113 = *v115;
                  long long v114 = v115;
                  if (!*v115) {
                    goto LABEL_178;
                  }
                }
                if (v116 == 2) {
                  break;
                }
                int v113 = v115[1];
                if (!v113)
                {
                  long long v114 = v115 + 1;
                  goto LABEL_178;
                }
              }
              BOOL v120 = v112 == *((unsigned __int8 *)v115 + 32);
              xpc_object_t v84 = v159;
              if (v120) {
                goto LABEL_198;
              }
            }
            else
            {
LABEL_178:
              int64_t v117 = operator new(0x28uLL);
              v117[7] = 2;
              *((unsigned char *)v117 + 32) = 0;
              *(void *)int64_t v117 = 0;
              *((void *)v117 + 1) = 0;
              *((void *)v117 + 2) = v115;
              *long long v114 = (uint64_t *)v117;
              uint64_t v118 = **((void **)v159 + 35);
              long long v119 = (uint64_t *)v117;
              if (v118)
              {
                *((void *)v159 + 35) = v118;
                long long v119 = *v114;
              }
              std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)v159 + 36), v119);
              ++*((void *)v159 + 37);
              BOOL v120 = v112 == *((unsigned __int8 *)v117 + 32);
              xpc_object_t v84 = v159;
              if (v120)
              {
LABEL_198:
                xpc_release(xdict);
                goto LABEL_199;
              }
            }
            uint64_t v121 = *v157;
            xpc_object_t v122 = v157;
            xpc_object_t v123 = v157;
            if (*v157)
            {
              while (1)
              {
                while (1)
                {
                  xpc_object_t v123 = (uint64_t **)v121;
                  int v124 = *((_DWORD *)v121 + 7);
                  if (v124 < 3) {
                    break;
                  }
                  uint64_t v121 = *v123;
                  xpc_object_t v122 = v123;
                  if (!*v123) {
                    goto LABEL_191;
                  }
                }
                if (v124 == 2) {
                  break;
                }
                uint64_t v121 = v123[1];
                if (!v121)
                {
                  xpc_object_t v122 = v123 + 1;
                  goto LABEL_191;
                }
              }
              uint64_t v125 = v123;
              xpc_object_t v84 = v159;
            }
            else
            {
LABEL_191:
              uint64_t v125 = operator new(0x28uLL);
              v125[7] = 2;
              *((unsigned char *)v125 + 32) = 0;
              *(void *)uint64_t v125 = 0;
              *((void *)v125 + 1) = 0;
              *((void *)v125 + 2) = v123;
              *xpc_object_t v122 = (uint64_t *)v125;
              xpc_object_t v84 = v159;
              uint64_t v126 = **((void **)v159 + 35);
              uint64_t v127 = (uint64_t *)v125;
              if (v126)
              {
                *((void *)v159 + 35) = v126;
                uint64_t v127 = *v122;
              }
              std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)v159 + 36), v127);
              ++*((void *)v159 + 37);
            }
            *((unsigned char *)v84 + 334) = *((unsigned char *)v125 + 32);
            antenna::Service::Internal::sendAudioAccessory_sync(v84);
            long long v128 = *((void *)v84 + 5);
            if (os_log_type_enabled(v128, OS_LOG_TYPE_DEBUG))
            {
              int v154 = *((unsigned __int8 *)v84 + 334);
              LODWORD(object[0]) = 67109120;
              HIDWORD(object[0]) = v154;
              _os_log_debug_impl(&dword_1C5767000, v128, OS_LOG_TYPE_DEBUG, "#D Sent audio wired port to baseband as %d", (uint8_t *)object, 8u);
            }
            goto LABEL_198;
          }
        }
        xpc_object_t v158 = xpc_null_create();
        goto LABEL_136;
      }
    }
    xpc_retain(v89);
    unsigned int v90 = v89;
    goto LABEL_128;
  }
  while (1)
  {
    while (1)
    {
      uint64_t v81 = (uint64_t **)v79;
      int v82 = *((_DWORD *)v79 + 7);
      if (v82 < 3) {
        break;
      }
      int v79 = *v81;
      xpc_object_t v80 = v81;
      if (!*v81) {
        goto LABEL_118;
      }
    }
    if (v82 == 2) {
      break;
    }
    int v79 = v81[1];
    if (!v79)
    {
      xpc_object_t v80 = v81 + 1;
      goto LABEL_118;
    }
  }
  uint64_t v87 = v81;
  xpc_object_t v84 = v159;
  *((unsigned char *)v87 + 32) = 0;
  if (*((unsigned char *)v159 + 160)) {
    goto LABEL_123;
  }
LABEL_199:
  if (!*((unsigned char *)v84 + 161)) {
    goto LABEL_225;
  }
  int v129 = v84;
  int v130 = *((unsigned __int8 *)v84 + 335);
  long long v131 = (uint64_t *)*((void *)v129 + 36);
  long long v132 = v78;
  xpc_object_t v133 = v78;
  if (!v131)
  {
LABEL_207:
    uint64_t v135 = operator new(0x28uLL);
    v135[7] = 3;
    *((unsigned char *)v135 + 32) = 0;
    *(void *)uint64_t v135 = 0;
    *((void *)v135 + 1) = 0;
    *((void *)v135 + 2) = v133;
    *long long v132 = (uint64_t *)v135;
    uint64_t v136 = **((void **)v159 + 35);
    v137 = (uint64_t *)v135;
    if (v136)
    {
      *((void *)v159 + 35) = v136;
      v137 = *v132;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)v159 + 36), v137);
    ++*((void *)v159 + 37);
    if (v130 == *((unsigned __int8 *)v135 + 32)) {
      goto LABEL_225;
    }
    goto LABEL_212;
  }
  while (1)
  {
    while (1)
    {
      xpc_object_t v133 = (uint64_t **)v131;
      int v134 = *((_DWORD *)v131 + 7);
      if (v134 < 4) {
        break;
      }
      long long v131 = *v133;
      long long v132 = v133;
      if (!*v133) {
        goto LABEL_207;
      }
    }
    if (v134 == 3) {
      break;
    }
    long long v131 = v133[1];
    if (!v131)
    {
      long long v132 = v133 + 1;
      goto LABEL_207;
    }
  }
  if (v130 != *((unsigned __int8 *)v133 + 32))
  {
LABEL_212:
    int v138 = *v78;
    uint64_t v139 = v78;
    if (*v78)
    {
      while (1)
      {
        while (1)
        {
          uint64_t v139 = (uint64_t **)v138;
          int v140 = *((_DWORD *)v138 + 7);
          if (v140 < 4) {
            break;
          }
          int v138 = *v139;
          char v78 = v139;
          if (!*v139) {
            goto LABEL_219;
          }
        }
        if (v140 == 3) {
          break;
        }
        int v138 = v139[1];
        if (!v138)
        {
          char v78 = v139 + 1;
          goto LABEL_219;
        }
      }
      xpc_object_t v141 = v139;
      xpc_object_t v142 = v159;
    }
    else
    {
LABEL_219:
      xpc_object_t v141 = operator new(0x28uLL);
      v141[7] = 3;
      *((unsigned char *)v141 + 32) = 0;
      *(void *)xpc_object_t v141 = 0;
      *((void *)v141 + 1) = 0;
      *((void *)v141 + 2) = v139;
      *char v78 = (uint64_t *)v141;
      xpc_object_t v142 = v159;
      uint64_t v143 = **((void **)v159 + 35);
      unsigned __int8 v144 = (uint64_t *)v141;
      if (v143)
      {
        *((void *)v159 + 35) = v143;
        unsigned __int8 v144 = *v78;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)v159 + 36), v144);
      ++*((void *)v159 + 37);
    }
    *((unsigned char *)v142 + 335) = *((unsigned char *)v141 + 32);
    antenna::Service::Internal::sendAudioSpeaker(v142);
    v145 = *((void *)v142 + 5);
    if (os_log_type_enabled(v145, OS_LOG_TYPE_DEBUG))
    {
      int v153 = *((unsigned __int8 *)v142 + 335);
      LODWORD(object[0]) = 67109120;
      HIDWORD(object[0]) = v153;
      _os_log_debug_impl(&dword_1C5767000, v145, OS_LOG_TYPE_DEBUG, "#D Sent audio speaker message to baseband as %d", (uint8_t *)object, 8u);
    }
  }
LABEL_225:
  pthread_mutex_lock(&ctu::Singleton<Capabilities,Capabilities,ctu::PthreadMutexGuardPolicy<Capabilities>>::sInstance);
  int v146 = (Capabilities *)qword_1EBBDD070;
  if (!qword_1EBBDD070)
  {
    dispatch_object_t v147 = operator new(1uLL);
    std::string v148 = operator new(0x20uLL);
    *std::string v148 = &unk_1F20F7BD0;
    v148[1] = 0;
    v148[2] = 0;
    v148[3] = v147;
    xpc_object_t v149 = (std::__shared_weak_count *)off_1EBBDD078;
    qword_1EBBDD070 = (uint64_t)v147;
    off_1EBBDD078 = v148;
    if (v149 && !atomic_fetch_add(&v149->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v149->__on_zero_shared)(v149);
      std::__shared_weak_count::__release_weak(v149);
    }
    int v146 = (Capabilities *)qword_1EBBDD070;
  }
  xpc_object_t v150 = (std::__shared_weak_count *)off_1EBBDD078;
  if (off_1EBBDD078) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)off_1EBBDD078 + 1, 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<Capabilities,Capabilities,ctu::PthreadMutexGuardPolicy<Capabilities>>::sInstance);
  if (Capabilities::isCMHandDetectionSupported(v146))
  {
    int v151 = *((unsigned __int8 *)v159 + 216);
    if (v150 && !atomic_fetch_add(&v150->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v150->__on_zero_shared)(v150);
      std::__shared_weak_count::__release_weak(v150);
      if (!v151) {
        goto LABEL_241;
      }
      goto LABEL_236;
    }
    if (v151) {
LABEL_236:
    }
      antenna::Service::Internal::processHandDetection_sync(v159);
  }
  else if (v150 && !atomic_fetch_add(&v150->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v150->__on_zero_shared)(v150);
    std::__shared_weak_count::__release_weak(v150);
  }
LABEL_241:
  xpc_release(v156[1]);
  operator delete(v156);
  dispatch_object_t v152 = (std::__shared_weak_count *)v1[2];
  if (v152 && !atomic_fetch_add(&v152->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v152->__on_zero_shared)(v152);
    std::__shared_weak_count::__release_weak(v152);
  }
  operator delete(v1);
}

void sub_1C5919F30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, xpc_object_t *__p, uint64_t a12, xpc_object_t a13, uint64_t a14, xpc_object_t a15, xpc_object_t object, xpc_object_t a17)
{
  xpc_release(object);
  xpc_release(__p[1]);
  operator delete(__p);
  int64_t v18 = (std::__shared_weak_count *)a10[2];
  if (v18)
  {
    if (!atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  operator delete(a10);
  _Unwind_Resume(a1);
}

void sub_1C591A180(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void dispatch::async<void ctu::SharedSynchronizable<antenna::Service::Internal>::execute_wrapped<antenna::Service::Internal::handDetectCallback(CMHandDetectionDelegate::CMHandDetectionResult)::$_0>(antenna::Service::Internal::handDetectCallback(CMHandDetectionDelegate::CMHandDetectionResult)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<antenna::Service::Internal::handDetectCallback(CMHandDetectionDelegate::CMHandDetectionResult)::$_0,dispatch_queue_s *::default_delete<antenna::Service::Internal::handDetectCallback(CMHandDetectionDelegate::CMHandDetectionResult)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *a1;
  uint64_t v3 = **a1;
  xpc_object_t v4 = *(NSObject **)(v3 + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    int v6 = *((_DWORD *)v2 + 2);
    v7[0] = 67109120;
    v7[1] = v6;
    _os_log_debug_impl(&dword_1C5767000, v4, OS_LOG_TYPE_DEBUG, "#D Hand Detection State: %d", (uint8_t *)v7, 8u);
  }
  *(_DWORD *)(v3 + 528) = *((_DWORD *)v2 + 2);
  antenna::Service::Internal::processHandDetection_sync((antenna::Service::Internal *)v3);
  operator delete(v2);
  xpc_object_t v5 = (std::__shared_weak_count *)a1[2];
  if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  operator delete(a1);
}

void sub_1C591A2B4(_Unwind_Exception *a1)
{
  operator delete(v2);
  xpc_object_t v4 = (std::__shared_weak_count *)v1[2];
  if (v4)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void dispatch::async<void ctu::SharedSynchronizable<antenna::Service::Internal>::execute_wrapped<antenna::Service::Internal::antennaSetProperty(xpc::dict const&)::$_0>(antenna::Service::Internal::antennaSetProperty(xpc::dict const&)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<antenna::Service::Internal::antennaSetProperty(xpc::dict const&)::$_0,dispatch_queue_s *::default_delete<antenna::Service::Internal::antennaSetProperty(xpc::dict const&)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  uint64_t v2 = *(uint64_t **)a1;
  antenna::Service::Internal::antennaSetProperty(xpc::dict const&)::$_0::operator()(*(uint64_t **)a1);
  if (v2)
  {
    xpc_release((xpc_object_t)v2[1]);
    operator delete(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    xpc_object_t v4 = (void *)a1;
  }
  else
  {
    xpc_object_t v4 = (void *)a1;
  }
  operator delete(v4);
}

void sub_1C591A3E4(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;
  if (v3)
  {
    xpc_object_t v5 = v3;
    xpc_release(v3[1]);
    operator delete(v5);
  }
  int v6 = (std::__shared_weak_count *)v1[2];
  if (v6)
  {
    if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void antenna::Service::Internal::antennaSetProperty(xpc::dict const&)::$_0::operator()(uint64_t *a1)
{
  uint64_t v141 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *a1;
  uint64_t v3 = *(NSObject **)(*a1 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    xpc::object::to_string((uint64_t *)v140, (xpc::object *)(a1 + 1));
    xpc_object_t v4 = (v140[23] & 0x80u) == 0 ? v140 : *(uint8_t **)v140;
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v4;
    _os_log_impl(&dword_1C5767000, v3, OS_LOG_TYPE_DEFAULT, "#I Set Property: %s", (uint8_t *)&buf, 0xCu);
    if ((char)v140[23] < 0) {
      operator delete(*(void **)v140);
    }
  }
  memset(&buf, 170, sizeof(buf));
  int v6 = (void *)a1[1];
  xpc_object_t v5 = (xpc_object_t *)(a1 + 1);
  xpc_object_t value = xpc_dictionary_get_value(v6, (const char *)*MEMORY[0x1E4F4C878]);
  *(void *)int v140 = value;
  if (value) {
    xpc_retain(value);
  }
  else {
    *(void *)int v140 = xpc_null_create();
  }
  xpc::dyn_cast_or_default((uint64_t *)&buf, (xpc *)v140, (const object *)"", v8);
  xpc_release(*(xpc_object_t *)v140);
  size_t v9 = strlen((const char *)*MEMORY[0x1E4F4CAF8]);
  std::string::size_type v10 = v9;
  std::string::size_type v11 = HIBYTE(buf.__r_.__value_.__r.__words[2]);
  if ((SHIBYTE(buf.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (v9 != -1)
    {
      p_std::string buf = &buf;
      std::string::size_type size = HIBYTE(buf.__r_.__value_.__r.__words[2]);
      goto LABEL_15;
    }
LABEL_258:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v9 == -1) {
    goto LABEL_258;
  }
  std::string::size_type size = buf.__r_.__value_.__l.__size_;
  p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
LABEL_15:
  if (size >= v10) {
    size_t v14 = v10;
  }
  else {
    size_t v14 = size;
  }
  if (!memcmp(p_buf, (const void *)*MEMORY[0x1E4F4CAF8], v14) && size == v10)
  {
    uint64_t v21 = *MEMORY[0x1E4F4C628];
    if (xpc_dictionary_get_value(*v5, (const char *)*MEMORY[0x1E4F4C628]))
    {
      *(void *)int v140 = v5;
      *(void *)&v140[8] = v21;
      xpc::dict::object_proxy::operator xpc::dict((uint64_t)v140, object);
      antenna::Service::Internal::setTxPowerCappingIPhoneMode_sync((antenna::Service::Internal *)v2, object);
      xpc_release(object[0]);
      goto LABEL_246;
    }
    int v30 = *(NSObject **)(v2 + 40);
    if (!os_log_type_enabled(v30, OS_LOG_TYPE_ERROR)) {
      goto LABEL_246;
    }
    *(_WORD *)int v140 = 0;
    size_t v31 = "Cannot find command data!";
    goto LABEL_112;
  }
  xpc_object_t v16 = (const void *)*MEMORY[0x1E4F4C508];
  size_t v17 = strlen((const char *)*MEMORY[0x1E4F4C508]);
  size_t v18 = v17;
  if ((v11 & 0x80) != 0)
  {
    if (v17 != -1)
    {
      std::string::size_type v19 = buf.__r_.__value_.__l.__size_;
      if (buf.__r_.__value_.__l.__size_ >= v17) {
        size_t v22 = v17;
      }
      else {
        size_t v22 = buf.__r_.__value_.__l.__size_;
      }
      if (memcmp(buf.__r_.__value_.__l.__data_, v16, v22)) {
        goto LABEL_40;
      }
      goto LABEL_36;
    }
LABEL_259:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v17 == -1) {
    goto LABEL_259;
  }
  std::string::size_type v19 = v11;
  if (v11 >= v17) {
    size_t v20 = v17;
  }
  else {
    size_t v20 = v11;
  }
  if (memcmp(&buf, v16, v20)) {
    goto LABEL_40;
  }
LABEL_36:
  if (v19 == v18)
  {
    uint64_t v23 = (const char *)*MEMORY[0x1E4F4C628];
    if (xpc_dictionary_get_value(*v5, (const char *)*MEMORY[0x1E4F4C628]))
    {
      xpc_object_t v24 = xpc_dictionary_get_value(*v5, v23);
      *(void *)int v140 = v24;
      if (v24) {
        xpc_retain(v24);
      }
      else {
        *(void *)int v140 = xpc_null_create();
      }
      antenna::Service::Internal::setTxPowerCappingIPhoneOverrideFreeSpace_sync((antenna::Service::Internal *)v2, (const xpc::object *)v140);
      xpc_release(*(xpc_object_t *)v140);
      goto LABEL_246;
    }
    int v30 = *(NSObject **)(v2 + 40);
    if (!os_log_type_enabled(v30, OS_LOG_TYPE_ERROR)) {
      goto LABEL_246;
    }
    *(_WORD *)int v140 = 0;
    size_t v31 = "Cannot find command data!";
    goto LABEL_112;
  }
LABEL_40:
  xpc_object_t v25 = (const void *)*MEMORY[0x1E4F4C710];
  size_t v26 = strlen((const char *)*MEMORY[0x1E4F4C710]);
  size_t v27 = v26;
  if ((v11 & 0x80) != 0)
  {
    if (v26 != -1)
    {
      std::string::size_type v28 = buf.__r_.__value_.__l.__size_;
      if (buf.__r_.__value_.__l.__size_ >= v26) {
        size_t v32 = v26;
      }
      else {
        size_t v32 = buf.__r_.__value_.__l.__size_;
      }
      if (memcmp(buf.__r_.__value_.__l.__data_, v25, v32)) {
        goto LABEL_57;
      }
      goto LABEL_54;
    }
LABEL_260:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v26 == -1) {
    goto LABEL_260;
  }
  std::string::size_type v28 = v11;
  if (v11 >= v26) {
    size_t v29 = v26;
  }
  else {
    size_t v29 = v11;
  }
  if (memcmp(&buf, v25, v29)) {
    goto LABEL_57;
  }
LABEL_54:
  if (v28 == v27)
  {
    uint64_t v33 = *MEMORY[0x1E4F4C628];
    if (xpc_dictionary_get_value(*v5, (const char *)*MEMORY[0x1E4F4C628]))
    {
      *(void *)int v140 = v5;
      *(void *)&v140[8] = v33;
      xpc::dict::object_proxy::operator xpc::dict((uint64_t)v140, object);
      antenna::Service::Internal::setTxPowerAudioMode_sync((uint64_t **)v2, object);
      xpc_release(object[0]);
      goto LABEL_246;
    }
    int v30 = *(NSObject **)(v2 + 40);
    if (!os_log_type_enabled(v30, OS_LOG_TYPE_ERROR)) {
      goto LABEL_246;
    }
    *(_WORD *)int v140 = 0;
    size_t v31 = "Cannot find command data!";
    goto LABEL_112;
  }
LABEL_57:
  int v34 = (const void *)*MEMORY[0x1E4F4C868];
  size_t v35 = strlen((const char *)*MEMORY[0x1E4F4C868]);
  size_t v36 = v35;
  if ((v11 & 0x80) != 0)
  {
    if (v35 != -1)
    {
      std::string::size_type v37 = buf.__r_.__value_.__l.__size_;
      if (buf.__r_.__value_.__l.__size_ >= v35) {
        size_t v39 = v35;
      }
      else {
        size_t v39 = buf.__r_.__value_.__l.__size_;
      }
      if (memcmp(buf.__r_.__value_.__l.__data_, v34, v39)) {
        goto LABEL_76;
      }
      goto LABEL_73;
    }
LABEL_261:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v35 == -1) {
    goto LABEL_261;
  }
  std::string::size_type v37 = v11;
  if (v11 >= v35) {
    size_t v38 = v35;
  }
  else {
    size_t v38 = v11;
  }
  if (memcmp(&buf, v34, v38)) {
    goto LABEL_76;
  }
LABEL_73:
  if (v37 == v36)
  {
    uint64_t v40 = *MEMORY[0x1E4F4C628];
    if (xpc_dictionary_get_value(*v5, (const char *)*MEMORY[0x1E4F4C628]))
    {
      *(void *)int v140 = v5;
      *(void *)&v140[8] = v40;
      xpc::dict::object_proxy::operator xpc::dict((uint64_t)v140, object);
      antenna::Service::Internal::setTxPowerAudioAlert_sync((antenna::Service::Internal *)v2, object);
      xpc_release(object[0]);
      goto LABEL_246;
    }
    int v30 = *(NSObject **)(v2 + 40);
    if (!os_log_type_enabled(v30, OS_LOG_TYPE_ERROR)) {
      goto LABEL_246;
    }
    *(_WORD *)int v140 = 0;
    size_t v31 = "Cannot find command data!";
    goto LABEL_112;
  }
LABEL_76:
  char v41 = (const void *)*MEMORY[0x1E4F4CFA8];
  size_t v42 = strlen((const char *)*MEMORY[0x1E4F4CFA8]);
  size_t v43 = v42;
  if ((v11 & 0x80) != 0)
  {
    if (v42 != -1)
    {
      std::string::size_type v44 = buf.__r_.__value_.__l.__size_;
      if (buf.__r_.__value_.__l.__size_ >= v42) {
        size_t v46 = v42;
      }
      else {
        size_t v46 = buf.__r_.__value_.__l.__size_;
      }
      if (memcmp(buf.__r_.__value_.__l.__data_, v41, v46)) {
        goto LABEL_93;
      }
      goto LABEL_90;
    }
LABEL_262:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v42 == -1) {
    goto LABEL_262;
  }
  std::string::size_type v44 = v11;
  if (v11 >= v42) {
    size_t v45 = v42;
  }
  else {
    size_t v45 = v11;
  }
  if (memcmp(&buf, v41, v45)) {
    goto LABEL_93;
  }
LABEL_90:
  if (v44 == v43)
  {
    uint64_t v47 = *MEMORY[0x1E4F4C628];
    if (xpc_dictionary_get_value(*v5, (const char *)*MEMORY[0x1E4F4C628]))
    {
      *(void *)int v140 = v5;
      *(void *)&v140[8] = v47;
      xpc::dict::object_proxy::operator xpc::dict((uint64_t)v140, object);
      antenna::Service::Internal::setTxPowerMotionMode_sync((antenna::Service::Internal *)v2, object);
      xpc_release(object[0]);
      goto LABEL_246;
    }
    int v30 = *(NSObject **)(v2 + 40);
    if (!os_log_type_enabled(v30, OS_LOG_TYPE_ERROR)) {
      goto LABEL_246;
    }
    *(_WORD *)int v140 = 0;
    size_t v31 = "Cannot find command data!";
    goto LABEL_112;
  }
LABEL_93:
  size_t v48 = strlen((const char *)*MEMORY[0x1E4F4CFD0]);
  std::string::size_type v49 = v48;
  if ((v11 & 0x80) == 0)
  {
    if (v48 != -1)
    {
      long long v50 = &buf;
      std::string::size_type v51 = v11;
      goto LABEL_100;
    }
LABEL_263:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v48 == -1) {
    goto LABEL_263;
  }
  std::string::size_type v51 = buf.__r_.__value_.__l.__size_;
  long long v50 = (std::string *)buf.__r_.__value_.__r.__words[0];
LABEL_100:
  if (v51 >= v49) {
    size_t v52 = v49;
  }
  else {
    size_t v52 = v51;
  }
  if (!memcmp(v50, (const void *)*MEMORY[0x1E4F4CFD0], v52) && v51 == v49)
  {
    object[0] = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
    uint64_t v53 = *MEMORY[0x1E4F4C628];
    *(void *)int v140 = v5;
    *(void *)&v140[8] = v53;
    xpc::dict::object_proxy::operator xpc::dict((uint64_t)v140, object);
    xpc_object_t v54 = xpc_dictionary_get_value(*v5, (const char *)*MEMORY[0x1E4F4C308]);
    p_xpc_object_t xdict = v54;
    if (v54) {
      xpc_retain(v54);
    }
    else {
      p_xpc_object_t xdict = xpc_null_create();
    }
    uint64_t v66 = (const object *)*MEMORY[0x1E4F4D2C8];
    xpc::dyn_cast_or_default((uint64_t *)v140, (xpc *)&p_xdict, (const object *)*MEMORY[0x1E4F4D2C8], v55);
    int v67 = (void **)(v2 + 392);
    if (*(char *)(v2 + 415) < 0) {
      operator delete(*v67);
    }
    *(_OWORD *)int v67 = *(_OWORD *)v140;
    *(void *)(v2 + 408) = *(void *)&v140[16];
    v140[23] = 0;
    v140[0] = 0;
    xpc_release(p_xdict);
    xpc_object_t v68 = xpc_dictionary_get_value(*v5, (const char *)*MEMORY[0x1E4F4C4F0]);
    p_xpc_object_t xdict = v68;
    if (v68) {
      xpc_retain(v68);
    }
    else {
      p_xpc_object_t xdict = xpc_null_create();
    }
    xpc::dyn_cast_or_default((uint64_t *)v140, (xpc *)&p_xdict, v66, v69);
    uint64_t v70 = (void **)(v2 + 416);
    if (*(char *)(v2 + 439) < 0) {
      operator delete(*v70);
    }
    *(_OWORD *)uint64_t v70 = *(_OWORD *)v140;
    *(void *)(v2 + 432) = *(void *)&v140[16];
    v140[23] = 0;
    v140[0] = 0;
    xpc_release(p_xdict);
    antenna::Service::Internal::sendAccessoryStatus_sync((NSObject **)v2);
    xpc_release(object[0]);
    goto LABEL_246;
  }
  size_t v56 = strlen((const char *)*MEMORY[0x1E4F4CD98]);
  std::string::size_type v57 = v56;
  if ((v11 & 0x80) == 0)
  {
    if (v56 != -1)
    {
      xpc_object_t v58 = &buf;
      std::string::size_type v59 = v11;
      goto LABEL_115;
    }
LABEL_264:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v56 == -1) {
    goto LABEL_264;
  }
  std::string::size_type v59 = buf.__r_.__value_.__l.__size_;
  xpc_object_t v58 = (std::string *)buf.__r_.__value_.__r.__words[0];
LABEL_115:
  if (v59 >= v57) {
    size_t v60 = v57;
  }
  else {
    size_t v60 = v59;
  }
  if (!memcmp(v58, (const void *)*MEMORY[0x1E4F4CD98], v60) && v59 == v57)
  {
    xpc_object_t v61 = xpc_dictionary_get_value(*v5, (const char *)*MEMORY[0x1E4F4C628]);
    *(void *)int v140 = v61;
    if (v61) {
      xpc_retain(v61);
    }
    else {
      *(void *)int v140 = xpc_null_create();
    }
    xpc::dyn_cast_or_default((xpc *)v140, 0);
    xpc_release(*(xpc_object_t *)v140);
    if (!*(unsigned char *)(v2 + 664)) {
      antenna::Service::Internal::configTxPower_sync(v2, 2u);
    }
    goto LABEL_246;
  }
  size_t v62 = strlen((const char *)*MEMORY[0x1E4F4D020]);
  std::string::size_type v63 = v62;
  if ((v11 & 0x80) == 0)
  {
    if (v62 != -1)
    {
      int v64 = &buf;
      std::string::size_type v65 = v11;
      goto LABEL_136;
    }
LABEL_265:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v62 == -1) {
    goto LABEL_265;
  }
  std::string::size_type v65 = buf.__r_.__value_.__l.__size_;
  int v64 = (std::string *)buf.__r_.__value_.__r.__words[0];
LABEL_136:
  if (v65 >= v63) {
    size_t v71 = v63;
  }
  else {
    size_t v71 = v65;
  }
  if (!memcmp(v64, (const void *)*MEMORY[0x1E4F4D020], v71) && v65 == v63)
  {
    if (*(unsigned char *)(v2 + 476))
    {
      uint64_t v72 = *(NSObject **)(v2 + 40);
      if (os_log_type_enabled(v72, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)int v140 = 0;
        _os_log_impl(&dword_1C5767000, v72, OS_LOG_TYPE_DEFAULT, "#I Ignore to set CLTM/PPM since overriding is being used.", v140, 2u);
      }
    }
    else
    {
      uint64_t v84 = *MEMORY[0x1E4F4C628];
      *(void *)int v140 = v5;
      *(void *)&v140[8] = v84;
      xpc::dict::object_proxy::operator xpc::dict((uint64_t)v140, object);
      antenna::Service::Internal::setMaxPower_sync((antenna::Service::Internal *)v2, object);
      xpc_release(object[0]);
    }
    goto LABEL_246;
  }
  size_t v73 = strlen((const char *)*MEMORY[0x1E4F4CEB0]);
  std::string::size_type v74 = v73;
  if ((v11 & 0x80) == 0)
  {
    if (v73 != -1)
    {
      int v75 = &buf;
      goto LABEL_152;
    }
LABEL_266:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v73 == -1) {
    goto LABEL_266;
  }
  std::string::size_type v11 = buf.__r_.__value_.__l.__size_;
  int v75 = (std::string *)buf.__r_.__value_.__r.__words[0];
LABEL_152:
  if (v11 >= v74) {
    size_t v76 = v74;
  }
  else {
    size_t v76 = v11;
  }
  if (!memcmp(v75, (const void *)*MEMORY[0x1E4F4CEB0], v76) && v11 == v74)
  {
    uint64_t v77 = *MEMORY[0x1E4F4C628];
    *(void *)int v140 = v5;
    *(void *)&v140[8] = v77;
    xpc::dict::object_proxy::operator xpc::object((uint64_t)v140, object);
    int v78 = xpc::dyn_cast_or_default((xpc *)object, 0);
    antenna::Service::Internal::setLinkQualityMetric_sync(v2, v78);
    xpc_release(object[0]);
    goto LABEL_246;
  }
  if (!std::string::compare(&buf, (const std::string::value_type *)*MEMORY[0x1E4F4C808]))
  {
    memset(object, 170, 24);
    uint64_t v85 = *MEMORY[0x1E4F4C628];
    p_xpc_object_t xdict = v5;
    uint64_t v136 = v85;
    xpc::dict::object_proxy::operator xpc::object((uint64_t)&p_xdict, &xdict);
    memset(v140, 0, sizeof(v140));
    xpc::dyn_cast_or_default();
    if ((char)v140[23] < 0) {
      operator delete(*(void **)v140);
    }
    xpc_release(xdict);
    if (SHIBYTE(object[2]) >= 0) {
      unsigned int v86 = object;
    }
    else {
      unsigned int v86 = (xpc_object_t *)object[0];
    }
    size_t v87 = strlen((const char *)*MEMORY[0x1E4F4C608]);
    *(unsigned char *)(v2 + 488) = strncasecmp((const char *)v86, (const char *)*MEMORY[0x1E4F4C608], v87) == 0;
    ctu::LoggerCommonBase::setLogLevel();
    if (SHIBYTE(object[2]) < 0) {
      operator delete(object[0]);
    }
    goto LABEL_246;
  }
  if (!std::string::compare(&buf, (const std::string::value_type *)*MEMORY[0x1E4F4CFA0]))
  {
    uint64_t v88 = *MEMORY[0x1E4F4C628];
    if (xpc_dictionary_get_value(*v5, (const char *)*MEMORY[0x1E4F4C628]))
    {
      *(void *)int v140 = v5;
      *(void *)&v140[8] = v88;
      xpc::dict::object_proxy::operator xpc::object((uint64_t)v140, object);
      xpc::dyn_cast_or_default((uint64_t *)__p, (xpc *)object, (const object *)"", v89);
      antenna::Service::Internal::setTxPowerMotionHandDetection_sync(v2, (uint64_t)__p);
      if (v134 < 0) {
        operator delete(__p[0]);
      }
      xpc_release(object[0]);
      goto LABEL_246;
    }
    int v30 = *(NSObject **)(v2 + 40);
    if (!os_log_type_enabled(v30, OS_LOG_TYPE_ERROR)) {
      goto LABEL_246;
    }
    *(_WORD *)int v140 = 0;
    size_t v31 = "Cannot find the command data!";
    goto LABEL_112;
  }
  if (!std::string::compare(&buf, (const std::string::value_type *)*MEMORY[0x1E4F4CF90]))
  {
    uint64_t v90 = *MEMORY[0x1E4F4C628];
    if (xpc_dictionary_get_value(*v5, (const char *)*MEMORY[0x1E4F4C628]))
    {
      *(void *)int v140 = v5;
      *(void *)&v140[8] = v90;
      xpc::dict::object_proxy::operator xpc::object((uint64_t)v140, object);
      *(_DWORD *)(v2 + 568) = xpc::dyn_cast_or_default((xpc *)object, 0);
      xpc_release(object[0]);
      xpc_object_t v91 = *(NSObject **)(v2 + 40);
      if (os_log_type_enabled(v91, OS_LOG_TYPE_DEBUG))
      {
        ctu::iokit::asString();
        long long v128 = (v140[23] & 0x80u) == 0 ? v140 : *(uint8_t **)v140;
        LODWORD(object[0]) = 136315138;
        *(xpc_object_t *)((char *)object + 4) = v128;
        _os_log_debug_impl(&dword_1C5767000, v91, OS_LOG_TYPE_DEBUG, "#D Power source overriding as %s", (uint8_t *)object, 0xCu);
        if ((char)v140[23] < 0) {
          operator delete(*(void **)v140);
        }
      }
      antenna::Service::Internal::sendPowerSource_sync((antenna::Service::Internal *)v2);
      goto LABEL_246;
    }
    int v30 = *(NSObject **)(v2 + 40);
    if (!os_log_type_enabled(v30, OS_LOG_TYPE_ERROR)) {
      goto LABEL_246;
    }
    *(_WORD *)int v140 = 0;
    size_t v31 = "Cannot find the command data!";
    goto LABEL_112;
  }
  if (!std::string::compare(&buf, (const std::string::value_type *)*MEMORY[0x1E4F4C810]))
  {
    int v92 = (void *)*MEMORY[0x1E4F4C628];
    if (xpc_dictionary_get_value(*v5, (const char *)*MEMORY[0x1E4F4C628]))
    {
      object[0] = v5;
      object[1] = v92;
      xpc::dict::object_proxy::operator xpc::object((uint64_t)object, &p_xdict);
      size_t v93 = (const char *)*MEMORY[0x1E4F4D2C8];
      xpc::dyn_cast_or_default((uint64_t *)v140, (xpc *)&p_xdict, (const object *)*MEMORY[0x1E4F4D2C8], v94);
      size_t v95 = (void **)(v2 + 592);
      if (*(char *)(v2 + 615) < 0) {
        operator delete(*v95);
      }
      *(_OWORD *)size_t v95 = *(_OWORD *)v140;
      *(void *)(v2 + 608) = *(void *)&v140[16];
      v140[23] = 0;
      v140[0] = 0;
      xpc_release(p_xdict);
      xpc_object_t v96 = *(NSObject **)(v2 + 40);
      if (os_log_type_enabled(v96, OS_LOG_TYPE_DEBUG))
      {
        int v129 = (void *)(v2 + 592);
        if (*(char *)(v2 + 615) < 0) {
          int v129 = *v95;
        }
        *(_DWORD *)int v140 = 136315138;
        *(void *)&v140[4] = v129;
        _os_log_debug_impl(&dword_1C5767000, v96, OS_LOG_TYPE_DEBUG, "#D Overriding PPM: %s", v140, 0xCu);
        if (*(void *)(v2 + 576))
        {
LABEL_198:
          int v98 = *(char *)(v2 + 615);
          xpc_object_t v99 = (const char *)(v2 + 592);
          if (v98 < 0) {
            xpc_object_t v99 = (const char *)*v95;
          }
          size_t v100 = strlen((const char *)*MEMORY[0x1E4F4C5E0]);
          if (!strncasecmp(v99, (const char *)*MEMORY[0x1E4F4C5E0], v100))
          {
            int v105 = 1;
          }
          else
          {
            xpc_object_t v101 = (const char *)(v2 + 592);
            if (v98 < 0) {
              xpc_object_t v101 = (const char *)*v95;
            }
            size_t v102 = strlen((const char *)*MEMORY[0x1E4F4C6B8]);
            if (!strncasecmp(v101, (const char *)*MEMORY[0x1E4F4C6B8], v102))
            {
              int v105 = 0;
              *(unsigned char *)(v2 + 572) = 0;
              goto LABEL_245;
            }
            if (v98 < 0) {
              size_t v95 = (void **)*v95;
            }
            size_t v103 = strlen(v93);
            uint64_t v104 = (capabilities::txpower *)strncasecmp((const char *)v95, v93, v103);
            if (v104)
            {
              int v105 = *(unsigned char *)(v2 + 572) != 0;
LABEL_245:
              antenna::Service::Internal::enablePPM_sync((antenna::Service::Internal *)v2, v105);
              goto LABEL_246;
            }
            int v105 = capabilities::txpower::supportsPPM(v104);
          }
          *(unsigned char *)(v2 + 572) = v105;
          goto LABEL_245;
        }
      }
      else if (*(void *)(v2 + 576))
      {
        goto LABEL_198;
      }
      uint64_t v97 = *(void *)(v2 + 144);
      v132[0] = *(void *)(v2 + 136);
      v132[1] = v97;
      if (v97) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v97 + 8), 1uLL, memory_order_relaxed);
      }
      PPMManager::create(v132, v140);
      std::shared_ptr<PPMManager>::operator=[abi:ne180100](v2 + 576, (long long *)v140);
      std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)v140);
      std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)v132);
      goto LABEL_198;
    }
    int v30 = *(NSObject **)(v2 + 40);
    if (!os_log_type_enabled(v30, OS_LOG_TYPE_ERROR)) {
      goto LABEL_246;
    }
    *(_WORD *)int v140 = 0;
    size_t v31 = "Cannot find the command data!";
LABEL_112:
    _os_log_error_impl(&dword_1C5767000, v30, OS_LOG_TYPE_ERROR, v31, v140, 2u);
    goto LABEL_246;
  }
  if (std::string::compare(&buf, (const std::string::value_type *)*MEMORY[0x1E4F4D018]))
  {
    if (std::string::compare(&buf, "kSetWorkoutInfo"))
    {
      if (!std::string::compare(&buf, (const std::string::value_type *)*MEMORY[0x1E4F4C108]))
      {
        xpc_object_t xdict = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
        uint64_t v79 = *MEMORY[0x1E4F4C628];
        *(void *)int v140 = v5;
        *(void *)&v140[8] = v79;
        xpc::dict::object_proxy::operator xpc::dict((uint64_t)v140, &xdict);
        memset(v140, 170, sizeof(v140));
        std::string::basic_string[abi:ne180100]<0>(v140, "");
        uint64_t v80 = *MEMORY[0x1E4F4CCB0];
        if (xpc_dictionary_get_value(xdict, (const char *)*MEMORY[0x1E4F4CCB0]))
        {
          p_xpc_object_t xdict = &xdict;
          uint64_t v136 = v80;
          xpc::dict::object_proxy::operator xpc::object((uint64_t)&p_xdict, &v131);
          xpc::dyn_cast_or_default((uint64_t *)object, (xpc *)&v131, (const object *)"", v81);
          if ((char)v140[23] < 0) {
            operator delete(*(void **)v140);
          }
          *(_OWORD *)int v140 = *(_OWORD *)object;
          *(xpc_object_t *)&v140[16] = object[2];
          HIBYTE(object[2]) = 0;
          LOBYTE(object[0]) = 0;
          xpc_release(v131);
          if ((v140[23] & 0x80u) == 0) {
            int v82 = v140;
          }
          else {
            int v82 = *(uint8_t **)v140;
          }
          size_t v83 = strlen((const char *)*MEMORY[0x1E4F4C100]);
          *(unsigned char *)(v2 + 476) = strncmp((const char *)v82, (const char *)*MEMORY[0x1E4F4C100], v83) == 0;
        }
        antenna::Service::Internal::setMaxPower_sync((antenna::Service::Internal *)v2, &xdict);
        if ((char)v140[23] < 0) {
          operator delete(*(void **)v140);
        }
        xpc_release(xdict);
      }
      goto LABEL_246;
    }
    if (*(unsigned char *)(v2 + 688))
    {
      BOOL v120 = (void *)*MEMORY[0x1E4F4C628];
      object[0] = v5;
      object[1] = v120;
      xpc::dict::object_proxy::operator xpc::object((uint64_t)object, &p_xdict);
      uint64_t v121 = (char *)*MEMORY[0x1E4F4D2C8];
      xpc::dyn_cast_or_default((uint64_t *)v140, (xpc *)&p_xdict, (const object *)*MEMORY[0x1E4F4D2C8], v122);
      xpc_object_t v123 = (void **)(v2 + 696);
      if (*(char *)(v2 + 719) < 0) {
        operator delete(*v123);
      }
      *(_OWORD *)xpc_object_t v123 = *(_OWORD *)v140;
      *(void *)(v2 + 712) = *(void *)&v140[16];
      v140[23] = 0;
      v140[0] = 0;
      xpc_release(p_xdict);
      std::string::basic_string[abi:ne180100]<0>(v140, v121);
      BOOL v124 = util::equal_nocase((const char *)(v2 + 696), (const char *)v140);
      if ((char)v140[23] < 0) {
        operator delete(*(void **)v140);
      }
      if (!v124)
      {
        *(void *)int v140 = v5;
        *(void *)&v140[8] = "kKeyWorkoutType";
        xpc::dict::object_proxy::operator xpc::object((uint64_t)v140, object);
        *(_DWORD *)(v2 + 720) = xpc::dyn_cast_or_default((xpc *)object, 0);
        xpc_release(object[0]);
        *(void *)int v140 = v5;
        *(void *)&v140[8] = "kKeyWorkoutState";
        xpc::dict::object_proxy::operator xpc::object((uint64_t)v140, object);
        *(_DWORD *)(v2 + 724) = xpc::dyn_cast_or_default((xpc *)object, 0);
        xpc_release(object[0]);
        *(void *)int v140 = v5;
        *(void *)&v140[8] = "kKeyWorkoutLocation";
        xpc::dict::object_proxy::operator xpc::object((uint64_t)v140, object);
        *(_DWORD *)(v2 + 728) = xpc::dyn_cast_or_default((xpc *)object, 0);
        xpc_release(object[0]);
        *(void *)int v140 = v5;
        *(void *)&v140[8] = "kKeySwimLocation";
        xpc::dict::object_proxy::operator xpc::object((uint64_t)v140, object);
        *(_DWORD *)(v2 + 732) = xpc::dyn_cast_or_default((xpc *)object, 0);
        xpc_release(object[0]);
        antenna::Service::Internal::sendWorkoutInfo_sync((antenna::Service::Internal *)v2);
      }
      goto LABEL_246;
    }
    uint64_t v125 = *(NSObject **)(v2 + 40);
    if (!os_log_type_enabled(v125, OS_LOG_TYPE_ERROR)) {
      goto LABEL_246;
    }
    uint64_t v127 = &buf;
    if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      uint64_t v127 = (std::string *)buf.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)int v140 = 136315138;
    *(void *)&v140[4] = v127;
LABEL_237:
    _os_log_error_impl(&dword_1C5767000, v125, OS_LOG_TYPE_ERROR, "%s is not supported in this device", v140, 0xCu);
    goto LABEL_246;
  }
  if (!*(unsigned char *)(v2 + 170))
  {
    uint64_t v125 = *(NSObject **)(v2 + 40);
    if (!os_log_type_enabled(v125, OS_LOG_TYPE_ERROR)) {
      goto LABEL_246;
    }
    uint64_t v126 = &buf;
    if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      uint64_t v126 = (std::string *)buf.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)int v140 = 136315138;
    *(void *)&v140[4] = v126;
    goto LABEL_237;
  }
  int v106 = (void *)*MEMORY[0x1E4F4C628];
  object[0] = v5;
  object[1] = v106;
  xpc::dict::object_proxy::operator xpc::object((uint64_t)object, &p_xdict);
  int v107 = (const char *)*MEMORY[0x1E4F4D2C8];
  xpc::dyn_cast_or_default((uint64_t *)v140, (xpc *)&p_xdict, (const object *)*MEMORY[0x1E4F4D2C8], v108);
  uint64_t v109 = v2 + 640;
  int v130 = (char *)(v2 + 640);
  if (*(char *)(v2 + 663) < 0)
  {
    operator delete(*(void **)v109);
    uint64_t v109 = v2 + 640;
  }
  *(_OWORD *)uint64_t v109 = *(_OWORD *)v140;
  *(void *)(v109 + 16) = *(void *)&v140[16];
  v140[23] = 0;
  v140[0] = 0;
  xpc_release(p_xdict);
  if (*(char *)(v2 + 663) < 0) {
    int v130 = *(char **)v130;
  }
  size_t v110 = strlen(v107);
  xpc_object_t v111 = (config::hw *)strncasecmp(v130, v107, v110);
  if (v111)
  {
    uint64_t v112 = *MEMORY[0x1E4F4D278];
    *(void *)int v140 = v5;
    *(void *)&v140[8] = v112;
    xpc::dict::object_proxy::operator xpc::object((uint64_t)v140, object);
    int v113 = xpc::dyn_cast_or_default((xpc *)object, 0);
    *(_DWORD *)std::map<unsigned int,unsigned int>::operator[]((uint64_t **)(v2 + 616), 1u) = v113;
    xpc_release(object[0]);
    uint64_t v114 = *MEMORY[0x1E4F4D230];
    *(void *)int v140 = v5;
    *(void *)&v140[8] = v114;
    xpc::dict::object_proxy::operator xpc::object((uint64_t)v140, object);
    int v115 = xpc::dyn_cast_or_default((xpc *)object, 0);
    *(_DWORD *)std::map<unsigned int,unsigned int>::operator[]((uint64_t **)(v2 + 616), 2u) = v115;
    xpc_release(object[0]);
    uint64_t v116 = *MEMORY[0x1E4F4D080];
    *(void *)int v140 = v5;
    *(void *)&v140[8] = v116;
    xpc::dict::object_proxy::operator xpc::object((uint64_t)v140, object);
    int v117 = xpc::dyn_cast_or_default((xpc *)object, 0);
    *(_DWORD *)std::map<unsigned int,unsigned int>::operator[]((uint64_t **)(v2 + 616), 3u) = v117;
    xpc_release(object[0]);
    uint64_t v118 = *MEMORY[0x1E4F4D078];
    *(void *)int v140 = v5;
    *(void *)&v140[8] = v118;
    xpc::dict::object_proxy::operator xpc::object((uint64_t)v140, object);
    int v119 = xpc::dyn_cast_or_default((xpc *)object, 0);
    *(_DWORD *)std::map<unsigned int,unsigned int>::operator[]((uint64_t **)(v2 + 616), 4u) = v119;
    xpc_release(object[0]);
  }
  else
  {
    config::hw::deviceMaterial(v111);
    if ((uint8_t *)(v2 + 616) != v140) {
      std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<unsigned int,unsigned int>,std::__tree_node<std::__value_type<unsigned int,unsigned int>,void *> *,long>>((uint64_t **)(v2 + 616), *(void **)v140, &v140[8]);
    }
    std::__tree<std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>>>::destroy(*(void **)&v140[8]);
  }
  antenna::Service::Internal::sendDeviceMaterial_sync((antenna::Service::Internal *)v2);
LABEL_246:
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf.__r_.__value_.__l.__data_);
  }
}

void sub_1C591B840(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t a10, char a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, xpc_object_t a19, uint64_t a20,xpc_object_t a21,xpc_object_t object,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  std::__tree<std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>>>::destroy(*(void **)(v34 - 88));
  if (a34 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void antenna::Service::Internal::antennaGetProperty(xpc::dict const&)::$_0::operator()(uint64_t a1)
{
  uint64_t v170 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 16);
  memset(&__s1, 170, sizeof(__s1));
  std::string::size_type v3 = a1 + 8;
  xpc_object_t v4 = (const char *)*MEMORY[0x1E4F4C878];
  xpc_object_t value = xpc_dictionary_get_value(*(xpc_object_t *)(a1 + 8), (const char *)*MEMORY[0x1E4F4C878]);
  buf.__r_.__value_.__r.__words[0] = (std::string::size_type)value;
  if (value) {
    xpc_retain(value);
  }
  else {
    buf.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
  }
  xpc::dyn_cast_or_default((uint64_t *)&__s1, (xpc *)&buf, (const object *)"", v6);
  xpc_release(buf.__r_.__value_.__l.__data_);
  size_t v7 = strlen((const char *)*MEMORY[0x1E4F4CBE8]);
  std::string::size_type v8 = v7;
  std::string::size_type v9 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
  if ((SHIBYTE(__s1.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (v7 != -1)
    {
      p_s1 = &__s1;
      std::string::size_type size = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
      goto LABEL_9;
    }
LABEL_237:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v7 == -1) {
    goto LABEL_237;
  }
  std::string::size_type size = __s1.__r_.__value_.__l.__size_;
  p_s1 = (std::string *)__s1.__r_.__value_.__r.__words[0];
LABEL_9:
  if (size >= v8) {
    size_t v12 = v8;
  }
  else {
    size_t v12 = size;
  }
  if (!memcmp(p_s1, (const void *)*MEMORY[0x1E4F4CBE8], v12) && size == v8)
  {
    if ((v9 & 0x80u) == 0) {
      std::string::size_type v19 = &__s1;
    }
    else {
      std::string::size_type v19 = (std::string *)__s1.__r_.__value_.__r.__words[0];
    }
    xpc_object_t v20 = xpc_string_create((const char *)v19);
    if (!v20) {
      xpc_object_t v20 = xpc_null_create();
    }
    xpc_dictionary_set_value(**(xpc_object_t **)a1, v4, v20);
    xpc_object_t v21 = xpc_null_create();
    xpc_release(v20);
    xpc_release(v21);
    std::string::size_type v22 = *MEMORY[0x1E4F4C628];
    buf.__r_.__value_.__r.__words[0] = v3;
    buf.__r_.__value_.__l.__size_ = v22;
    v165 = *(xpc_object_t **)a1;
    std::string::size_type v166 = v22;
    xpc::dict::object_proxy::operator=((uint64_t)&v165, (uint64_t)&buf, &v167);
    xpc_release(v167);
    xpc_object_t v167 = 0;
    antenna::Service::Internal::copyTxPowerCappingIPhoneMode_sync((antenna::Service::Internal *)v2, &v164);
    xpc_dictionary_set_value(**(xpc_object_t **)a1, (const char *)*MEMORY[0x1E4F4C718], v164);
    xpc_object_t v23 = v164;
    xpc_object_t v164 = xpc_null_create();
    xpc_release(v23);
    xpc_release(v164);
    xpc_object_t v164 = 0;
    goto LABEL_136;
  }
  size_t v14 = (const void *)*MEMORY[0x1E4F4C500];
  size_t v15 = strlen((const char *)*MEMORY[0x1E4F4C500]);
  size_t v16 = v15;
  if ((v9 & 0x80) != 0)
  {
    if (v15 != -1)
    {
      std::string::size_type v17 = __s1.__r_.__value_.__l.__size_;
      if (__s1.__r_.__value_.__l.__size_ >= v15) {
        size_t v24 = v15;
      }
      else {
        size_t v24 = __s1.__r_.__value_.__l.__size_;
      }
      if (memcmp(__s1.__r_.__value_.__l.__data_, v14, v24)) {
        goto LABEL_42;
      }
      goto LABEL_34;
    }
LABEL_238:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v15 == -1) {
    goto LABEL_238;
  }
  std::string::size_type v17 = v9;
  if (v9 >= v15) {
    size_t v18 = v15;
  }
  else {
    size_t v18 = v9;
  }
  if (memcmp(&__s1, v14, v18)) {
    goto LABEL_42;
  }
LABEL_34:
  if (v17 == v16)
  {
    antenna::Service::Internal::getTxPowerCappingIPhoneOverriddenFreeSpaceString_sync((antenna::Service::Internal *)v2, &buf);
    if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_std::string buf = &buf;
    }
    else {
      p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
    }
    xpc_object_t v26 = xpc_string_create((const char *)p_buf);
    if (!v26) {
      xpc_object_t v26 = xpc_null_create();
    }
    xpc_dictionary_set_value(**(xpc_object_t **)a1, (const char *)*MEMORY[0x1E4F4C718], v26);
    xpc_object_t v27 = xpc_null_create();
    xpc_release(v26);
    xpc_release(v27);
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf.__r_.__value_.__l.__data_);
    }
    goto LABEL_136;
  }
LABEL_42:
  std::string::size_type v28 = (const void *)*MEMORY[0x1E4F4C860];
  size_t v29 = strlen((const char *)*MEMORY[0x1E4F4C860]);
  size_t v30 = v29;
  if ((v9 & 0x80) != 0)
  {
    if (v29 != -1)
    {
      std::string::size_type v31 = __s1.__r_.__value_.__l.__size_;
      if (__s1.__r_.__value_.__l.__size_ >= v29) {
        size_t v33 = v29;
      }
      else {
        size_t v33 = __s1.__r_.__value_.__l.__size_;
      }
      if (memcmp(__s1.__r_.__value_.__l.__data_, v28, v33)) {
        goto LABEL_61;
      }
      goto LABEL_54;
    }
LABEL_239:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v29 == -1) {
    goto LABEL_239;
  }
  std::string::size_type v31 = v9;
  if (v9 >= v29) {
    size_t v32 = v29;
  }
  else {
    size_t v32 = v9;
  }
  if (memcmp(&__s1, v28, v32)) {
    goto LABEL_61;
  }
LABEL_54:
  if (v31 == v30)
  {
    if ((v9 & 0x80u) == 0) {
      uint64_t v34 = &__s1;
    }
    else {
      uint64_t v34 = (std::string *)__s1.__r_.__value_.__r.__words[0];
    }
    xpc_object_t v35 = xpc_string_create((const char *)v34);
    if (!v35) {
      xpc_object_t v35 = xpc_null_create();
    }
    xpc_dictionary_set_value(**(xpc_object_t **)a1, v4, v35);
    xpc_object_t v36 = xpc_null_create();
    xpc_release(v35);
    xpc_release(v36);
    std::string::size_type v37 = *MEMORY[0x1E4F4C628];
    buf.__r_.__value_.__r.__words[0] = v3;
    buf.__r_.__value_.__l.__size_ = v37;
    v165 = *(xpc_object_t **)a1;
    std::string::size_type v166 = v37;
    xpc::dict::object_proxy::operator=((uint64_t)&v165, (uint64_t)&buf, &v163);
    xpc_release(v163);
    xpc_object_t v163 = 0;
    antenna::Service::Internal::copyTxPowerAudioMode_sync((antenna::Service::Internal *)v2, &v162);
    xpc_dictionary_set_value(**(xpc_object_t **)a1, (const char *)*MEMORY[0x1E4F4C718], v162);
    xpc_object_t v38 = v162;
    xpc_object_t v162 = xpc_null_create();
    xpc_release(v38);
    xpc_release(v162);
    xpc_object_t v162 = 0;
    goto LABEL_136;
  }
LABEL_61:
  size_t v39 = (const void *)*MEMORY[0x1E4F4C9B0];
  size_t v40 = strlen((const char *)*MEMORY[0x1E4F4C9B0]);
  size_t v41 = v40;
  if ((v9 & 0x80) != 0)
  {
    if (v40 != -1)
    {
      std::string::size_type v42 = __s1.__r_.__value_.__l.__size_;
      if (__s1.__r_.__value_.__l.__size_ >= v40) {
        size_t v44 = v40;
      }
      else {
        size_t v44 = __s1.__r_.__value_.__l.__size_;
      }
      if (memcmp(__s1.__r_.__value_.__l.__data_, v39, v44)) {
        goto LABEL_80;
      }
      goto LABEL_73;
    }
LABEL_240:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v40 == -1) {
    goto LABEL_240;
  }
  std::string::size_type v42 = v9;
  if (v9 >= v40) {
    size_t v43 = v40;
  }
  else {
    size_t v43 = v9;
  }
  if (memcmp(&__s1, v39, v43)) {
    goto LABEL_80;
  }
LABEL_73:
  if (v42 == v41)
  {
    if ((v9 & 0x80u) == 0) {
      size_t v45 = &__s1;
    }
    else {
      size_t v45 = (std::string *)__s1.__r_.__value_.__r.__words[0];
    }
    xpc_object_t v46 = xpc_string_create((const char *)v45);
    if (!v46) {
      xpc_object_t v46 = xpc_null_create();
    }
    xpc_dictionary_set_value(**(xpc_object_t **)a1, v4, v46);
    xpc_object_t v47 = xpc_null_create();
    xpc_release(v46);
    xpc_release(v47);
    std::string::size_type v48 = *MEMORY[0x1E4F4C628];
    buf.__r_.__value_.__r.__words[0] = v3;
    buf.__r_.__value_.__l.__size_ = v48;
    v165 = *(xpc_object_t **)a1;
    std::string::size_type v166 = v48;
    xpc::dict::object_proxy::operator=((uint64_t)&v165, (uint64_t)&buf, &v161);
    xpc_release(v161);
    xpc_object_t v161 = 0;
    antenna::Service::Internal::copyTxPowerAudioAlert_sync((antenna::Service::Internal *)v2, &v160);
    xpc_dictionary_set_value(**(xpc_object_t **)a1, (const char *)*MEMORY[0x1E4F4C718], v160);
    xpc_object_t v49 = v160;
    xpc_object_t v160 = xpc_null_create();
    xpc_release(v49);
    xpc_release(v160);
    xpc_object_t v160 = 0;
    goto LABEL_136;
  }
LABEL_80:
  long long v50 = (const void *)*MEMORY[0x1E4F4D048];
  size_t v51 = strlen((const char *)*MEMORY[0x1E4F4D048]);
  size_t v52 = v51;
  if ((v9 & 0x80) != 0)
  {
    if (v51 != -1)
    {
      std::string::size_type v53 = __s1.__r_.__value_.__l.__size_;
      if (__s1.__r_.__value_.__l.__size_ >= v51) {
        size_t v55 = v51;
      }
      else {
        size_t v55 = __s1.__r_.__value_.__l.__size_;
      }
      if (memcmp(__s1.__r_.__value_.__l.__data_, v50, v55)) {
        goto LABEL_100;
      }
      goto LABEL_92;
    }
LABEL_241:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v51 == -1) {
    goto LABEL_241;
  }
  std::string::size_type v53 = v9;
  if (v9 >= v51) {
    size_t v54 = v51;
  }
  else {
    size_t v54 = v9;
  }
  if (memcmp(&__s1, v50, v54)) {
    goto LABEL_100;
  }
LABEL_92:
  if (v53 == v52)
  {
    if (*(unsigned char *)(v2 + 153))
    {
      if ((v9 & 0x80u) == 0) {
        size_t v56 = &__s1;
      }
      else {
        size_t v56 = (std::string *)__s1.__r_.__value_.__r.__words[0];
      }
      xpc_object_t v57 = xpc_string_create((const char *)v56);
      if (!v57) {
        xpc_object_t v57 = xpc_null_create();
      }
      xpc_dictionary_set_value(**(xpc_object_t **)a1, v4, v57);
      xpc_object_t v58 = xpc_null_create();
      xpc_release(v57);
      xpc_release(v58);
      std::string::size_type v59 = *MEMORY[0x1E4F4C628];
      buf.__r_.__value_.__r.__words[0] = v3;
      buf.__r_.__value_.__l.__size_ = v59;
      v165 = *(xpc_object_t **)a1;
      std::string::size_type v166 = v59;
      xpc::dict::object_proxy::operator=((uint64_t)&v165, (uint64_t)&buf, &v159);
      xpc_release(v159);
      xpc_object_t v159 = 0;
      antenna::Service::Internal::copyTxPowerMotionMode_sync((antenna::Service::Internal *)v2, &v158);
      xpc_dictionary_set_value(**(xpc_object_t **)a1, (const char *)*MEMORY[0x1E4F4C718], v158);
      xpc_object_t v60 = v158;
      xpc_object_t v158 = xpc_null_create();
      xpc_release(v60);
      xpc_release(v158);
      xpc_object_t v158 = 0;
    }
    goto LABEL_136;
  }
LABEL_100:
  size_t v61 = strlen((const char *)*MEMORY[0x1E4F4CD50]);
  std::string::size_type v62 = v61;
  if ((v9 & 0x80) == 0)
  {
    if (v61 != -1)
    {
      std::string::size_type v63 = &__s1;
      std::string::size_type v64 = v9;
      goto LABEL_105;
    }
LABEL_242:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v61 == -1) {
    goto LABEL_242;
  }
  std::string::size_type v64 = __s1.__r_.__value_.__l.__size_;
  std::string::size_type v63 = (std::string *)__s1.__r_.__value_.__r.__words[0];
LABEL_105:
  if (v64 >= v62) {
    size_t v65 = v62;
  }
  else {
    size_t v65 = v64;
  }
  if (!memcmp(v63, (const void *)*MEMORY[0x1E4F4CD50], v65) && v64 == v62)
  {
    uint64_t v66 = *(void ***)a1;
    xpc_object_t v67 = *(xpc_object_t *)(v2 + 224);
    if (v67) {
      xpc_retain(*(xpc_object_t *)(v2 + 224));
    }
    else {
      xpc_object_t v67 = xpc_null_create();
    }
    size_t v83 = *v66;
    *uint64_t v66 = v67;
    xpc_release(v83);
    goto LABEL_136;
  }
  size_t v68 = strlen((const char *)*MEMORY[0x1E4F4CC30]);
  std::string::size_type v69 = v68;
  if ((v9 & 0x80) == 0)
  {
    if (v68 != -1)
    {
      uint64_t v70 = &__s1;
      std::string::size_type v71 = v9;
      goto LABEL_117;
    }
LABEL_243:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v68 == -1) {
    goto LABEL_243;
  }
  std::string::size_type v71 = __s1.__r_.__value_.__l.__size_;
  uint64_t v70 = (std::string *)__s1.__r_.__value_.__r.__words[0];
LABEL_117:
  if (v71 >= v69) {
    size_t v72 = v69;
  }
  else {
    size_t v72 = v71;
  }
  if (!memcmp(v70, (const void *)*MEMORY[0x1E4F4CC30], v72) && v71 == v69)
  {
    size_t v73 = (const char *)(v2 + 392);
    if (*(char *)(v2 + 415) < 0) {
      size_t v73 = *(const char **)v73;
    }
    xpc_object_t v74 = xpc_string_create(v73);
    if (!v74) {
      xpc_object_t v74 = xpc_null_create();
    }
    xpc_dictionary_set_value(**(xpc_object_t **)a1, (const char *)*MEMORY[0x1E4F4C308], v74);
    xpc_object_t v75 = xpc_null_create();
    xpc_release(v74);
    xpc_release(v75);
    size_t v76 = (const char *)(v2 + 416);
    if (*(char *)(v2 + 439) < 0) {
      size_t v76 = *(const char **)v76;
    }
    xpc_object_t v77 = xpc_string_create(v76);
    if (!v77) {
      xpc_object_t v77 = xpc_null_create();
    }
    xpc_dictionary_set_value(**(xpc_object_t **)a1, (const char *)*MEMORY[0x1E4F4C4F0], v77);
    xpc_object_t v78 = xpc_null_create();
    xpc_release(v77);
    xpc_release(v78);
    goto LABEL_136;
  }
  size_t v79 = strlen((const char *)*MEMORY[0x1E4F4C760]);
  std::string::size_type v80 = v79;
  if ((v9 & 0x80) == 0)
  {
    if (v79 != -1)
    {
      uint64_t v81 = &__s1;
      std::string::size_type v82 = v9;
      goto LABEL_141;
    }
LABEL_244:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v79 == -1) {
    goto LABEL_244;
  }
  std::string::size_type v82 = __s1.__r_.__value_.__l.__size_;
  uint64_t v81 = (std::string *)__s1.__r_.__value_.__r.__words[0];
LABEL_141:
  if (v82 >= v80) {
    size_t v84 = v80;
  }
  else {
    size_t v84 = v82;
  }
  if (!memcmp(v81, (const void *)*MEMORY[0x1E4F4C760], v84) && v82 == v80)
  {
    uint64_t v85 = (const char **)MEMORY[0x1E4F4C608];
    if (!*(unsigned char *)(v2 + 488)) {
      uint64_t v85 = (const char **)MEMORY[0x1E4F4C6D8];
    }
    xpc_object_t v156 = xpc_string_create(*v85);
    if (!v156) {
      xpc_object_t v156 = xpc_null_create();
    }
    std::string::size_type v86 = *MEMORY[0x1E4F4C628];
    buf.__r_.__value_.__r.__words[0] = *(void *)a1;
    buf.__r_.__value_.__l.__size_ = v86;
    xpc::dict::object_proxy::operator=((uint64_t)&buf, &v156, &v157);
    xpc_release(v157);
    xpc_object_t v157 = 0;
    xpc_release(v156);
    xpc_object_t v156 = 0;
    goto LABEL_136;
  }
  size_t v87 = strlen((const char *)*MEMORY[0x1E4F4D040]);
  std::string::size_type v88 = v87;
  if ((v9 & 0x80) == 0)
  {
    if (v87 != -1)
    {
      xpc_object_t v89 = &__s1;
      goto LABEL_156;
    }
LABEL_245:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v87 == -1) {
    goto LABEL_245;
  }
  std::string::size_type v9 = __s1.__r_.__value_.__l.__size_;
  xpc_object_t v89 = (std::string *)__s1.__r_.__value_.__r.__words[0];
LABEL_156:
  if (v9 >= v88) {
    size_t v90 = v88;
  }
  else {
    size_t v90 = v9;
  }
  if (!memcmp(v89, (const void *)*MEMORY[0x1E4F4D040], v90) && v9 == v88)
  {
    xpc_object_t v91 = (const char *)(v2 + 536);
    if (*(char *)(v2 + 559) < 0) {
      xpc_object_t v91 = *(const char **)v91;
    }
    xpc_object_t object = xpc_string_create(v91);
    if (!object) {
      xpc_object_t object = xpc_null_create();
    }
    std::string::size_type v92 = *MEMORY[0x1E4F4C718];
    buf.__r_.__value_.__r.__words[0] = *(void *)a1;
    buf.__r_.__value_.__l.__size_ = v92;
    xpc::dict::object_proxy::operator=((uint64_t)&buf, &object, &v155);
    xpc_release(v155);
    xpc_object_t v155 = 0;
    xpc_release(object);
    xpc_object_t object = 0;
    goto LABEL_136;
  }
  if (!std::string::compare(&__s1, (const std::string::value_type *)*MEMORY[0x1E4F4CF50]))
  {
    xpc_object_t v152 = xpc_int64_create(*(unsigned int *)(v2 + 568));
    if (!v152) {
      xpc_object_t v152 = xpc_null_create();
    }
    std::string::size_type v95 = *MEMORY[0x1E4F4C718];
    buf.__r_.__value_.__r.__words[0] = *(void *)a1;
    buf.__r_.__value_.__l.__size_ = v95;
    xpc::dict::object_proxy::operator=((uint64_t)&buf, &v152, &v153);
    xpc_release(v153);
    xpc_object_t v153 = 0;
    xpc_release(v152);
    xpc_object_t v152 = 0;
  }
  else if (!std::string::compare(&__s1, (const std::string::value_type *)*MEMORY[0x1E4F4C768]))
  {
    xpc_object_t v96 = (const char *)(v2 + 592);
    if (*(char *)(v2 + 615) < 0) {
      xpc_object_t v96 = *(const char **)v96;
    }
    xpc_object_t v150 = xpc_string_create(v96);
    if (!v150) {
      xpc_object_t v150 = xpc_null_create();
    }
    std::string::size_type v97 = *MEMORY[0x1E4F4C718];
    buf.__r_.__value_.__r.__words[0] = *(void *)a1;
    buf.__r_.__value_.__l.__size_ = v97;
    xpc::dict::object_proxy::operator=((uint64_t)&buf, &v150, &v151);
    xpc_release(v151);
    xpc_object_t v151 = 0;
    xpc_release(v150);
    xpc_object_t v150 = 0;
  }
  else
  {
    if (std::string::compare(&__s1, (const std::string::value_type *)*MEMORY[0x1E4F4CFD8]))
    {
      if (std::string::compare(&__s1, "kGetWorkoutInfo"))
      {
        if (std::string::compare(&__s1, (const std::string::value_type *)*MEMORY[0x1E4F4C0C8])) {
          goto LABEL_136;
        }
        v165 = (xpc_object_t *)0xAAAAAAAAAAAAAAAALL;
        size_t v93 = (xpc_object_t *)xpc_dictionary_create(0, 0, 0);
        unsigned int v94 = v93;
        if (v93)
        {
          v165 = v93;
        }
        else
        {
          unsigned int v94 = (xpc_object_t *)xpc_null_create();
          v165 = v94;
          if (!v94)
          {
            int v117 = (xpc_object_t *)xpc_null_create();
            unsigned int v94 = 0;
            goto LABEL_225;
          }
        }
        if (MEMORY[0x1C8792D30](v94) == MEMORY[0x1E4F14590])
        {
          xpc_retain(v94);
LABEL_226:
          xpc_release(v94);
          uint64_t v118 = (const char **)MEMORY[0x1E4F4C100];
          if (!*(unsigned char *)(v2 + 476)) {
            uint64_t v118 = (const char **)MEMORY[0x1E4F4D2C8];
          }
          xpc_object_t v132 = xpc_string_create(*v118);
          if (!v132) {
            xpc_object_t v132 = xpc_null_create();
          }
          std::string::size_type v119 = *MEMORY[0x1E4F4CCB0];
          buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v165;
          buf.__r_.__value_.__l.__size_ = v119;
          xpc::dict::object_proxy::operator=((uint64_t)&buf, &v132, &v133);
          xpc_release(v133);
          xpc_object_t v133 = 0;
          xpc_release(v132);
          xpc_object_t v132 = 0;
          xpc_object_t v130 = xpc_int64_create(*(unsigned int *)(v2 + 464));
          if (!v130) {
            xpc_object_t v130 = xpc_null_create();
          }
          std::string::size_type v120 = *MEMORY[0x1E4F4C460];
          buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v165;
          buf.__r_.__value_.__l.__size_ = v120;
          xpc::dict::object_proxy::operator=((uint64_t)&buf, &v130, &v131);
          xpc_release(v131);
          xpc_object_t v131 = 0;
          xpc_release(v130);
          xpc_object_t v130 = 0;
          xpc_object_t v128 = xpc_int64_create(*(unsigned int *)(v2 + 468));
          if (!v128) {
            xpc_object_t v128 = xpc_null_create();
          }
          std::string::size_type v121 = *MEMORY[0x1E4F4C620];
          buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v165;
          buf.__r_.__value_.__l.__size_ = v121;
          xpc::dict::object_proxy::operator=((uint64_t)&buf, &v128, &v129);
          xpc_release(v129);
          xpc_object_t v129 = 0;
          xpc_release(v128);
          xpc_object_t v128 = 0;
          xpc_object_t v126 = xpc_int64_create(*(unsigned int *)(v2 + 472));
          if (!v126) {
            xpc_object_t v126 = xpc_null_create();
          }
          std::string::size_type v122 = *MEMORY[0x1E4F4C290];
          buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v165;
          buf.__r_.__value_.__l.__size_ = v122;
          xpc::dict::object_proxy::operator=((uint64_t)&buf, &v126, &v127);
          xpc_release(v127);
          xpc_object_t v127 = 0;
          xpc_release(v126);
          xpc_object_t v126 = 0;
          xpc::dict::dict((xpc::dict *)&v124, (void **)&v165);
          std::string::size_type v123 = *MEMORY[0x1E4F4C718];
          buf.__r_.__value_.__r.__words[0] = *(void *)a1;
          buf.__r_.__value_.__l.__size_ = v123;
          xpc::dict::object_proxy::operator=((uint64_t)&buf, &v124, &v125);
          xpc_release(v125);
          xpc_object_t v125 = 0;
          xpc_release(v124);
          xpc_object_t v124 = 0;
          xpc_release(v165);
          goto LABEL_136;
        }
        int v117 = (xpc_object_t *)xpc_null_create();
LABEL_225:
        v165 = v117;
        goto LABEL_226;
      }
      if (*(unsigned char *)(v2 + 688))
      {
        xpc_object_t v111 = (const char *)(v2 + 696);
        uint64_t v112 = (const char *)(v2 + 696);
        if (*(char *)(v2 + 719) < 0) {
          uint64_t v112 = *(const char **)v111;
        }
        xpc_object_t v138 = xpc_string_create(v112);
        if (!v138) {
          xpc_object_t v138 = xpc_null_create();
        }
        std::string::size_type v113 = *MEMORY[0x1E4F4C718];
        buf.__r_.__value_.__r.__words[0] = *(void *)a1;
        buf.__r_.__value_.__l.__size_ = v113;
        xpc::dict::object_proxy::operator=((uint64_t)&buf, &v138, &v139);
        xpc_release(v139);
        xpc_object_t v139 = 0;
        xpc_release(v138);
        xpc_object_t v138 = 0;
        if (*(char *)(v2 + 719) < 0) {
          xpc_object_t v111 = *(const char **)v111;
        }
        if (!strncasecmp(v111, "OVERRIDE", 8uLL))
        {
          xpc_object_t v136 = xpc_int64_create(*(unsigned int *)(v2 + 720));
          if (!v136) {
            xpc_object_t v136 = xpc_null_create();
          }
          buf.__r_.__value_.__r.__words[0] = *(void *)a1;
          buf.__r_.__value_.__l.__size_ = (std::string::size_type)"kKeyWorkoutType";
          xpc::dict::object_proxy::operator=((uint64_t)&buf, &v136, &v137);
          xpc_release(v137);
          xpc_object_t v137 = 0;
          xpc_release(v136);
          xpc_object_t v136 = 0;
          xpc_object_t v134 = xpc_int64_create(*(unsigned int *)(v2 + 724));
          if (!v134) {
            xpc_object_t v134 = xpc_null_create();
          }
          buf.__r_.__value_.__r.__words[0] = *(void *)a1;
          buf.__r_.__value_.__l.__size_ = (std::string::size_type)"kKeyWorkoutState";
          xpc::dict::object_proxy::operator=((uint64_t)&buf, &v134, &v135);
          xpc_release(v135);
          xpc_object_t v135 = 0;
          xpc_release(v134);
          xpc_object_t v134 = 0;
        }
        goto LABEL_136;
      }
      uint64_t v114 = *(NSObject **)(v2 + 40);
      if (!os_log_type_enabled(v114, OS_LOG_TYPE_ERROR)) {
        goto LABEL_136;
      }
      uint64_t v116 = &__s1;
      if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        uint64_t v116 = (std::string *)__s1.__r_.__value_.__r.__words[0];
      }
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v116;
LABEL_219:
      _os_log_error_impl(&dword_1C5767000, v114, OS_LOG_TYPE_ERROR, "%s is not supported in this device", (uint8_t *)&buf, 0xCu);
      goto LABEL_136;
    }
    if (!*(unsigned char *)(v2 + 170))
    {
      uint64_t v114 = *(NSObject **)(v2 + 40);
      if (!os_log_type_enabled(v114, OS_LOG_TYPE_ERROR)) {
        goto LABEL_136;
      }
      int v115 = &__s1;
      if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        int v115 = (std::string *)__s1.__r_.__value_.__r.__words[0];
      }
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v115;
      goto LABEL_219;
    }
    int v98 = (const char *)(v2 + 640);
    xpc_object_t v99 = (const char *)(v2 + 640);
    if (*(char *)(v2 + 663) < 0) {
      xpc_object_t v99 = *(const char **)v98;
    }
    xpc_object_t v148 = xpc_string_create(v99);
    if (!v148) {
      xpc_object_t v148 = xpc_null_create();
    }
    std::string::size_type v100 = *MEMORY[0x1E4F4C718];
    buf.__r_.__value_.__r.__words[0] = *(void *)a1;
    buf.__r_.__value_.__l.__size_ = v100;
    xpc::dict::object_proxy::operator=((uint64_t)&buf, &v148, &v149);
    xpc_release(v149);
    xpc_object_t v149 = 0;
    xpc_release(v148);
    xpc_object_t v148 = 0;
    if (*(char *)(v2 + 663) < 0) {
      int v98 = *(const char **)v98;
    }
    size_t v101 = strlen((const char *)*MEMORY[0x1E4F4CB08]);
    if (!strncasecmp(v98, (const char *)*MEMORY[0x1E4F4CB08], v101))
    {
      size_t v102 = (uint64_t **)(v2 + 616);
      size_t v103 = std::map<unsigned int,unsigned int>::operator[](v102, 1u);
      xpc_object_t v146 = xpc_int64_create(*(unsigned int *)v103);
      if (!v146) {
        xpc_object_t v146 = xpc_null_create();
      }
      std::string::size_type v104 = *MEMORY[0x1E4F4D278];
      buf.__r_.__value_.__r.__words[0] = *(void *)a1;
      buf.__r_.__value_.__l.__size_ = v104;
      xpc::dict::object_proxy::operator=((uint64_t)&buf, &v146, &v147);
      xpc_release(v147);
      xpc_object_t v147 = 0;
      xpc_release(v146);
      xpc_object_t v146 = 0;
      int v105 = std::map<unsigned int,unsigned int>::operator[](v102, 2u);
      xpc_object_t v144 = xpc_int64_create(*(unsigned int *)v105);
      if (!v144) {
        xpc_object_t v144 = xpc_null_create();
      }
      std::string::size_type v106 = *MEMORY[0x1E4F4D230];
      buf.__r_.__value_.__r.__words[0] = *(void *)a1;
      buf.__r_.__value_.__l.__size_ = v106;
      xpc::dict::object_proxy::operator=((uint64_t)&buf, &v144, &v145);
      xpc_release(v145);
      xpc_object_t v145 = 0;
      xpc_release(v144);
      xpc_object_t v144 = 0;
      int v107 = std::map<unsigned int,unsigned int>::operator[](v102, 3u);
      xpc_object_t v142 = xpc_int64_create(*(unsigned int *)v107);
      if (!v142) {
        xpc_object_t v142 = xpc_null_create();
      }
      std::string::size_type v108 = *MEMORY[0x1E4F4D080];
      buf.__r_.__value_.__r.__words[0] = *(void *)a1;
      buf.__r_.__value_.__l.__size_ = v108;
      xpc::dict::object_proxy::operator=((uint64_t)&buf, &v142, &v143);
      xpc_release(v143);
      xpc_object_t v143 = 0;
      xpc_release(v142);
      xpc_object_t v142 = 0;
      uint64_t v109 = std::map<unsigned int,unsigned int>::operator[](v102, 4u);
      xpc_object_t v140 = xpc_int64_create(*(unsigned int *)v109);
      if (!v140) {
        xpc_object_t v140 = xpc_null_create();
      }
      std::string::size_type v110 = *MEMORY[0x1E4F4D078];
      buf.__r_.__value_.__r.__words[0] = *(void *)a1;
      buf.__r_.__value_.__l.__size_ = v110;
      xpc::dict::object_proxy::operator=((uint64_t)&buf, &v140, &v141);
      xpc_release(v141);
      xpc_object_t v141 = 0;
      xpc_release(v140);
      xpc_object_t v140 = 0;
    }
  }
LABEL_136:
  if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__s1.__r_.__value_.__l.__data_);
  }
}

void sub_1C591CE0C(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void ___ZNK3ctu20SharedSynchronizableIN7antenna7Service8InternalEE20execute_wrapped_syncIZNS3_18antennaGetPropertyERKN3xpc4dictEE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOSB__block_invoke(uint64_t a1)
{
}

void dispatch::async<void ctu::SharedSynchronizable<antenna::Service::Internal>::execute_wrapped<antenna::Service::Internal::sendAudioSpeaker(void)::$_0>(antenna::Service::Internal::sendAudioSpeaker(void)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<antenna::Service::Internal::sendAudioSpeaker(void)::$_0,dispatch_queue_s *::default_delete<antenna::Service::Internal::sendAudioSpeaker(void)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  uint64_t v2 = *(antenna::Service::Internal ***)a1;
  antenna::Service::Internal::sendAudioSpeaker_sync(**(antenna::Service::Internal ***)a1);
  operator delete(v2);
  std::string::size_type v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    xpc_object_t v4 = (void *)a1;
  }
  else
  {
    xpc_object_t v4 = (void *)a1;
  }
  operator delete(v4);
}

void sub_1C591D178(_Unwind_Exception *a1)
{
  operator delete(v2);
  xpc_object_t v4 = (std::__shared_weak_count *)v1[2];
  if (v4)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void dispatch::async<void ctu::SharedSynchronizable<antenna::Service::Internal>::execute_wrapped<antenna::Service::Internal::dumpState(void)::$_0>(antenna::Service::Internal::dumpState(void)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<antenna::Service::Internal::dumpState(void)::$_0,dispatch_queue_s *::default_delete<antenna::Service::Internal::dumpState(void)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  uint64_t v2 = *(antenna::Service::Internal ***)a1;
  antenna::Service::Internal::handleDumpState_sync(**(antenna::Service::Internal ***)a1);
  operator delete(v2);
  std::string::size_type v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    xpc_object_t v4 = (void *)a1;
  }
  else
  {
    xpc_object_t v4 = (void *)a1;
  }
  operator delete(v4);
}

void sub_1C591D298(_Unwind_Exception *a1)
{
  operator delete(v2);
  xpc_object_t v4 = (std::__shared_weak_count *)v1[2];
  if (v4)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t __cxx_global_var_init_37()
{
  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<ctu::power::assertion>::~PthreadMutexGuardPolicy, &ctu::Singleton<ctu::power::assertion,ctu::power::assertion,ctu::PthreadMutexGuardPolicy<ctu::power::assertion>>::sInstance, &dword_1C5767000);
  }
  return result;
}

uint64_t __cxx_global_var_init_38()
{
  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<CommandDriverFactory>::~PthreadMutexGuardPolicy, &ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance, &dword_1C5767000);
  }
  return result;
}

uint64_t __cxx_global_var_init_39()
{
  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<ABMServer>::~PthreadMutexGuardPolicy, &ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance, &dword_1C5767000);
  }
  return result;
}

uint64_t __cxx_global_var_init_40_0()
{
  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<Capabilities>::~PthreadMutexGuardPolicy, &ctu::Singleton<Capabilities,Capabilities,ctu::PthreadMutexGuardPolicy<Capabilities>>::sInstance, &dword_1C5767000);
  }
  return result;
}

uint64_t HealthEvent::HealthEvent(uint64_t result, char a2, uint64_t a3)
{
  *(void *)uint64_t result = &unk_1F20F9640;
  *(unsigned char *)(result + 8) = a2;
  *(void *)(result + 16) = a3;
  return result;
}

{
  *(void *)uint64_t result = &unk_1F20F9640;
  *(unsigned char *)(result + 8) = a2;
  *(void *)(result + 16) = a3;
  return result;
}

uint64_t HealthEvent::HealthEvent(uint64_t a1, char a2, uint64_t a3)
{
  *(void *)a1 = &unk_1F20F9640;
  *(unsigned char *)(a1 + 8) = a2;
  if (*(char *)(a3 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else {
    std::string __p = *(std::string *)a3;
  }
  *(void *)(a1 + 16) = Timestamp::convert((uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return a1;
}

{
  std::string __p;

  *(void *)a1 = &unk_1F20F9640;
  *(unsigned char *)(a1 + 8) = a2;
  if (*(char *)(a3 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else {
    std::string __p = *(std::string *)a3;
  }
  *(void *)(a1 + 16) = Timestamp::convert((uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C591D8F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1C591D9B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t HealthEvent::getType(HealthEvent *this)
{
  return *((char *)this + 8);
}

void HealthEvent::getTime(HealthEvent *this@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = *((void *)this + 2);
  xpc_object_t v4 = operator new(0x38uLL);
  v4[8] = 0;
  *(void *)xpc_object_t v4 = 0;
  *((void *)v4 + 1) = 0;
  *((void *)v4 + 2) = v6;
  xpc_object_t v5 = v4;
  v6[0] = v4;
  *((unsigned char *)v4 + 24) = 1;
  v6[1] = (void *)1;
  *((void *)v4 + 5) = v3;
  *((void *)v4 + 6) = 0xAAAAAAAA00000000;
  Timestamp::asString((uint64_t)&v5, 0, 9, a2);
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&v5, v6[0]);
}

void sub_1C591DA60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, void *a11)
{
}

uint64_t HealthEvent::getChronoTime(HealthEvent *this)
{
  return *((void *)this + 2);
}

uint64_t HealthEvent::setType(uint64_t result, char a2)
{
  *(unsigned char *)(result + 8) = a2;
  return result;
}

void HealthEvent::setTime(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string __p = *(std::string *)a2;
  }
  *(void *)(a1 + 16) = Timestamp::convert((uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1C591DB08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t HealthEvent::setTime(uint64_t result, uint64_t a2)
{
  *(void *)(result + 16) = a2;
  return result;
}

uint64_t HealthEvent::asString@<X0>(HealthEvent *this@<X0>, unsigned char *a2@<X8>)
{
  unint64_t v37 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v36[7] = v4;
  v36[8] = v4;
  v36[5] = v4;
  v36[6] = v4;
  v36[3] = v4;
  v36[4] = v4;
  v36[1] = v4;
  void v36[2] = v4;
  long long v35 = v4;
  v36[0] = v4;
  *(_OWORD *)size_t v33 = v4;
  long long v34 = v4;
  long long v31 = v4;
  long long v32 = v4;
  long long v29 = v4;
  long long v30 = v4;
  long long v28 = v4;
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v28);
  xpc_object_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v29, (uint64_t)"HealthEvent { Type='", 20);
  switch(*((unsigned char *)this + 8))
  {
    case 1:
      uint64_t v6 = 12;
      v27[23] = 12;
      *(_DWORD *)&v27[8] = 1701999980;
      size_t v7 = "boot failure";
      goto LABEL_7;
    case 2:
      std::string::size_type v8 = (char *)operator new(0x19uLL);
      *(void *)xpc_object_t v27 = v8;
      *(_OWORD *)&v27[8] = xmmword_1C599E880;
      strcpy(v8, "boot attempts exhausted");
      uint64_t v6 = 23;
      goto LABEL_10;
    case 3:
      uint64_t v6 = 12;
      v27[23] = 12;
      *(_DWORD *)&v27[8] = 1936942435;
      size_t v7 = "ping success";
      goto LABEL_7;
    case 4:
      uint64_t v6 = 12;
      v27[23] = 12;
      *(_DWORD *)&v27[8] = 1701999980;
      size_t v7 = "ping failure";
LABEL_7:
      *(void *)xpc_object_t v27 = *(void *)v7;
      v27[12] = 0;
      break;
    case 5:
      uint64_t v6 = 11;
      v27[23] = 11;
      strcpy(v27, "erasing efs");
      break;
    default:
      uint64_t v6 = 7;
      v27[23] = 7;
      strcpy(v27, "unknown");
      break;
  }
  std::string::size_type v8 = v27;
LABEL_10:
  std::string::size_type v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)v8, v6);
  std::string::size_type v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"' Time='", 8);
  uint64_t v11 = *((void *)this + 2);
  size_t v39 = 0;
  uint64_t v40 = 0;
  xpc_object_t v38 = &v39;
  size_t v12 = operator new(0x38uLL);
  v12[8] = 0;
  *(void *)size_t v12 = 0;
  *((void *)v12 + 1) = 0;
  *((void *)v12 + 2) = &v39;
  xpc_object_t v38 = (void **)v12;
  size_t v39 = v12;
  *((unsigned char *)v12 + 24) = 1;
  uint64_t v40 = 1;
  *((void *)v12 + 5) = v11;
  *((void *)v12 + 6) = 0xAAAAAAAA00000000;
  Timestamp::asString((uint64_t)&v38, 0, 9, __p);
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&v38, v39);
  if ((v26 & 0x80u) == 0) {
    xpc_object_t v13 = __p;
  }
  else {
    xpc_object_t v13 = (void **)__p[0];
  }
  if ((v26 & 0x80u) == 0) {
    uint64_t v14 = v26;
  }
  else {
    uint64_t v14 = (uint64_t)__p[1];
  }
  size_t v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)v13, v14);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"' }", 3);
  if ((char)v26 < 0)
  {
    operator delete(__p[0]);
    if ((v27[23] & 0x80000000) == 0)
    {
LABEL_18:
      char v16 = BYTE8(v35);
      if ((BYTE8(v35) & 0x10) == 0) {
        goto LABEL_19;
      }
LABEL_23:
      uint64_t v18 = v35;
      if ((unint64_t)v35 < *((void *)&v32 + 1))
      {
        *(void *)&long long v35 = *((void *)&v32 + 1);
        uint64_t v18 = *((void *)&v32 + 1);
      }
      std::string::size_type v19 = (const void *)v32;
      size_t v17 = v18 - v32;
      if ((unint64_t)(v18 - v32) >= 0x7FFFFFFFFFFFFFF8) {
        goto LABEL_37;
      }
      goto LABEL_26;
    }
  }
  else if ((v27[23] & 0x80000000) == 0)
  {
    goto LABEL_18;
  }
  operator delete(*(void **)v27);
  char v16 = BYTE8(v35);
  if ((BYTE8(v35) & 0x10) != 0) {
    goto LABEL_23;
  }
LABEL_19:
  if ((v16 & 8) == 0)
  {
    size_t v17 = 0;
    a2[23] = 0;
    goto LABEL_33;
  }
  std::string::size_type v19 = (const void *)*((void *)&v30 + 1);
  size_t v17 = *((void *)&v31 + 1) - *((void *)&v30 + 1);
  if (*((void *)&v31 + 1) - *((void *)&v30 + 1) >= 0x7FFFFFFFFFFFFFF8uLL) {
LABEL_37:
  }
    std::string::__throw_length_error[abi:ne180100]();
LABEL_26:
  if (v17 >= 0x17)
  {
    uint64_t v20 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v17 | 7) != 0x17) {
      uint64_t v20 = v17 | 7;
    }
    uint64_t v21 = v20 + 1;
    std::string::size_type v22 = operator new(v20 + 1);
    *((void *)a2 + 1) = v17;
    *((void *)a2 + 2) = v21 | 0x8000000000000000;
    *(void *)a2 = v22;
    a2 = v22;
    goto LABEL_32;
  }
  a2[23] = v17;
  if (v17) {
LABEL_32:
  }
    memmove(a2, v19, v17);
LABEL_33:
  a2[v17] = 0;
  *(void *)&long long v28 = *MEMORY[0x1E4FBA408];
  uint64_t v23 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)&v28 + *(void *)(v28 - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  *(void *)&long long v29 = v23;
  *((void *)&v29 + 1) = MEMORY[0x1E4FBA470] + 16;
  if (SHIBYTE(v34) < 0) {
    operator delete(v33[1]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1C8791FB0](v36);
}

void sub_1C591DFA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1C591DFBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy(v21 - 72, *(void **)(v21 - 64));
  if (a20 < 0)
  {
    operator delete(__p);
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a21);
    _Unwind_Resume(a1);
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a21);
  _Unwind_Resume(a1);
}

void sub_1C591E044(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

char *HealthEvent::toString@<X0>(char *result@<X0>, uint64_t a2@<X8>)
{
  switch((int)result)
  {
    case 1:
      *(unsigned char *)(a2 + 23) = 12;
      strcpy((char *)a2, "boot failure");
      break;
    case 2:
      uint64_t result = (char *)operator new(0x19uLL);
      *(void *)a2 = result;
      *(_OWORD *)(a2 + 8) = xmmword_1C599E880;
      strcpy(result, "boot attempts exhausted");
      break;
    case 3:
      *(unsigned char *)(a2 + 23) = 12;
      strcpy((char *)a2, "ping success");
      break;
    case 4:
      *(unsigned char *)(a2 + 23) = 12;
      strcpy((char *)a2, "ping failure");
      break;
    case 5:
      *(unsigned char *)(a2 + 23) = 11;
      strcpy((char *)a2, "erasing efs");
      break;
    default:
      *(unsigned char *)(a2 + 23) = 7;
      strcpy((char *)a2, "unknown");
      break;
  }
  return result;
}

void TraceManager::create(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  *a2 = 0xAAAAAAAAAAAAAAAALL;
  a2[1] = 0xAAAAAAAAAAAAAAAALL;
  long long v4 = operator new(0x140uLL);
  uint64_t v5 = (uint64_t)v4;
  uint64_t v6 = *a1;
  size_t v7 = (std::__shared_weak_count *)a1[1];
  v11[0] = v6;
  v11[1] = (uint64_t)v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  TraceManager::TraceManager((uint64_t)v4, v11);
  *a2 = 0xAAAAAAAAAAAAAAAALL;
  a2[1] = 0xAAAAAAAAAAAAAAAALL;
  std::shared_ptr<TraceManager>::shared_ptr[abi:ne180100]<TraceManager,std::shared_ptr<TraceManager> ctu::SharedSynchronizable<TraceManager>::make_shared_ptr<TraceManager>(TraceManager*)::{lambda(TraceManager*)#1},void>(a2, v5);
  ctu::Loggable<TraceManager,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(*a2 + 48);
  if (v7) {
    std::__shared_weak_count::__release_weak(v7);
  }
  uint64_t v8 = *a2;
  uint64_t v9 = *a2 + 120;
  v12[0] = MEMORY[0x1E4F143A8];
  v12[1] = 0x40000000;
  _DWORD v12[2] = ___ZN12TraceManager4initEv_block_invoke;
  v12[3] = &__block_descriptor_tmp_6_3;
  v12[4] = v8;
  xpc_object_t v13 = v12;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI12TraceManagerE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  block[3] = &__block_descriptor_tmp_150_0;
  block[4] = v9;
  block[5] = &v13;
  std::string::size_type v10 = *(NSObject **)(v8 + 136);
  if (*(void *)(v8 + 144)) {
    dispatch_async_and_wait(v10, block);
  }
  else {
    dispatch_sync(v10, block);
  }
}

void sub_1C591E370(_Unwind_Exception *a1)
{
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v2);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(a1);
}

void TraceManager::init(TraceManager *this)
{
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 0x40000000;
  v3[2] = ___ZN12TraceManager4initEv_block_invoke;
  v3[3] = &__block_descriptor_tmp_6_3;
  v3[4] = this;
  long long v4 = v3;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI12TraceManagerE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  block[3] = &__block_descriptor_tmp_150_0;
  block[4] = (char *)this + 120;
  block[5] = &v4;
  uint64_t v2 = (char *)this + 136;
  uint64_t v1 = *((void *)this + 17);
  if (*((void *)v2 + 1)) {
    dispatch_async_and_wait(v1, block);
  }
  else {
    dispatch_sync(v1, block);
  }
}

uint64_t TraceManager::TraceManager(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  long long v4 = (std::__shared_weak_count *)a2[1];
  if (v4)
  {
    atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  *(void *)a1 = &unk_1F20FC1C8;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = v4;
  if (v4)
  {
    atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    *(void *)(a1 + 24) = 0;
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = 0;
    std::__shared_weak_count::__release_weak(v4);
    *(void *)a1 = &unk_1F20F0BE0;
    std::__shared_weak_count::__release_weak(v4);
  }
  else
  {
    *(void *)(a1 + 24) = 0;
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = 0;
    *(void *)a1 = &unk_1F20F0BE0;
  }
  *(void *)a1 = &unk_1F20FD2B8;
  *(void *)(a1 + 48) = &unk_1F20FD328;
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v22, "com.apple.telephony.abm", "trace.mgr");
  GetABMLogServer(&v20);
  initially_inactive = dispatch_queue_attr_make_initially_inactive(0);
  uint64_t v6 = dispatch_queue_create_with_target_V2("trace.mgr", initially_inactive, 0);
  dispatch_set_qos_class_floor(v6, QOS_CLASS_DEFAULT, 0);
  dispatch_activate(v6);
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = v6;
  if (v6)
  {
    dispatch_retain(v6);
    *(void *)(a1 + 144) = 0;
    dispatch_release(v6);
  }
  else
  {
    *(void *)(a1 + 144) = 0;
  }
  *(void *)(a1 + 48) = &unk_1F20FD990;
  ctu::OsLogContext::OsLogContext();
  ctu::OsLogContext::OsLogContext();
  ctu::LoggerCommonBase::LoggerCommonBase();
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&v24);
  *(void *)(a1 + 56) = &unk_1F20F0070;
  size_t v7 = v21;
  *(void *)(a1 + 104) = v20;
  *(void *)(a1 + 112) = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v23);
  *(void *)(a1 + 48) = &unk_1F20FDA20;
  uint64_t v8 = v21;
  if (v21 && !atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v22);
  *(void *)a1 = &unk_1F20FD2B8;
  *(_OWORD *)(a1 + 152) = 0u;
  *(void *)(a1 + 48) = &unk_1F20FD328;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(void *)(a1 + 216) = a1 + 216;
  *(void *)(a1 + 224) = a1 + 216;
  *(void *)(a1 + 240) = 0;
  *(void *)(a1 + 232) = 0;
  *(void *)(a1 + 248) = 0;
  uint64_t v9 = operator new(0x18uLL);
  v9[2] = 0;
  v9[1] = 0;
  *uint64_t v9 = v9 + 1;
  *(void *)(a1 + 256) = v9;
  std::string::size_type v10 = operator new(0x20uLL);
  void *v10 = &unk_1F20FDA60;
  v10[1] = 0;
  _DWORD v10[2] = 0;
  v10[3] = v9;
  *(void *)(a1 + 264) = v10;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  uint64_t v11 = (BasebandCrashReasonFilter *)operator new(0x60uLL);
  BasebandCrashReasonFilter::BasebandCrashReasonFilter(v11);
  *(void *)&long long v24 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v24 + 1) = 0xAAAAAAAAAAAAAAAALL;
  std::shared_ptr<BasebandCrashReasonFilter>::shared_ptr[abi:ne180100]<BasebandCrashReasonFilter,std::shared_ptr<BasebandCrashReasonFilter> ctu::SharedSynchronizable<BasebandCrashReasonFilter>::make_shared_ptr<BasebandCrashReasonFilter>(BasebandCrashReasonFilter*)::{lambda(BasebandCrashReasonFilter*)#1},void>(&v24, (uint64_t)v11);
  long long v12 = v24;
  long long v24 = 0uLL;
  xpc_object_t v13 = *(std::__shared_weak_count **)(a1 + 296);
  *(_OWORD *)(a1 + 288) = v12;
  if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  uint64_t v14 = (std::__shared_weak_count *)*((void *)&v24 + 1);
  if (*((void *)&v24 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v24 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  size_t v15 = (TraceCAReporter *)operator new(0x68uLL);
  TraceCAReporter::TraceCAReporter(v15);
  *(void *)&long long v24 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v24 + 1) = 0xAAAAAAAAAAAAAAAALL;
  std::shared_ptr<TraceCAReporter>::shared_ptr[abi:ne180100]<TraceCAReporter,std::shared_ptr<TraceCAReporter> ctu::SharedSynchronizable<TraceCAReporter>::make_shared_ptr<TraceCAReporter>(TraceCAReporter*)::{lambda(TraceCAReporter*)#1},void>((std::__shared_weak_count_vtbl **)&v24, (std::__shared_weak_count_vtbl *)v15);
  long long v16 = v24;
  long long v24 = 0uLL;
  size_t v17 = *(std::__shared_weak_count **)(a1 + 312);
  *(_OWORD *)(a1 + 304) = v16;
  if (v17 && !atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  uint64_t v18 = (std::__shared_weak_count *)*((void *)&v24 + 1);
  if (*((void *)&v24 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v24 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
  return a1;
}

void sub_1C591E940(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15)
{
  std::string::size_type v22 = v21;
  operator delete(v22);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v15 + 304);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v15 + 288);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v15 + 272);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v20);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v19);
  std::list<boost::signals2::connection>::~list(v18);
  if (*(char *)(v15 + 215) < 0) {
    operator delete(*(void **)(v15 + 192));
  }
  if (*(char *)(v15 + 191) < 0) {
    operator delete(*(void **)(v15 + 168));
  }
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v17);
  ctu::SharedLoggable<TraceManager,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(v16);
  Service::~Service((Service *)v15);
  _Unwind_Resume(a1);
}

void *ctu::SharedLoggable<TraceManager,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(void *a1)
{
  *a1 = &unk_1F20FD990;
  MEMORY[0x1C8790F40](a1 + 1);
  uint64_t v2 = a1[12];
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = a1[11];
  if (v3) {
    dispatch_release(v3);
  }
  long long v4 = (std::__shared_weak_count *)a1[10];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = &unk_1F20FD990;
  MEMORY[0x1C8790F40](a1 + 1);
  uint64_t v2 = a1[12];
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = a1[11];
  if (v3) {
    dispatch_release(v3);
  }
  long long v4 = (std::__shared_weak_count *)a1[10];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

void TraceManager::~TraceManager(TraceManager *this)
{
  *(void *)this = &unk_1F20FD2B8;
  *((void *)this + 6) = &unk_1F20FD328;
  uint64_t v2 = (char *)this + 216;
  uint64_t v3 = (char *)*((void *)this + 28);
  if (v3 != (char *)this + 216)
  {
    do
    {
      boost::signals2::connection::disconnect((boost::signals2::connection *)(v3 + 16));
      uint64_t v3 = (char *)*((void *)v3 + 1);
    }
    while (v3 != v2);
  }
  if (*((void *)this + 29))
  {
    uint64_t v4 = *((void *)this + 27);
    uint64_t v5 = (char *)*((void *)this + 28);
    uint64_t v6 = *(void *)v5;
    *(void *)(v6 + 8) = *(void *)(v4 + 8);
    **(void **)(v4 + 8) = v6;
    *((void *)this + 29) = 0;
    if (v5 != v2)
    {
      do
      {
        size_t v7 = (char *)*((void *)v5 + 1);
        uint64_t v8 = (atomic_uint *)*((void *)v5 + 3);
        if (v8 && atomic_fetch_add(v8 + 3, 0xFFFFFFFF) == 1) {
          (*(void (**)(atomic_uint *))(*(void *)v8 + 24))(v8);
        }
        operator delete(v5);
        uint64_t v5 = v7;
      }
      while (v7 != v2);
    }
  }
  uint64_t v9 = (std::__shared_weak_count *)*((void *)this + 31);
  *((void *)this + 30) = 0;
  *((void *)this + 31) = 0;
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
    std::string::size_type v10 = *((void *)this + 11);
    if (!os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  std::string::size_type v10 = *((void *)this + 11);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
LABEL_13:
    v30[0] = 0;
    _os_log_impl(&dword_1C5767000, v10, OS_LOG_TYPE_DEFAULT, "#I Gone!", (uint8_t *)v30, 2u);
  }
LABEL_14:
  uint64_t v11 = (std::__shared_weak_count *)*((void *)this + 39);
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  long long v12 = (std::__shared_weak_count *)*((void *)this + 37);
  if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  xpc_object_t v13 = (std::__shared_weak_count *)*((void *)this + 35);
  if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  uint64_t v14 = (std::__shared_weak_count *)*((void *)this + 33);
  if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  uint64_t v15 = (std::__shared_weak_count *)*((void *)this + 31);
  if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
    if (!*((void *)this + 29)) {
      goto LABEL_38;
    }
  }
  else if (!*((void *)this + 29))
  {
    goto LABEL_38;
  }
  uint64_t v16 = *((void *)this + 27);
  uint64_t v17 = (char *)*((void *)this + 28);
  uint64_t v18 = *(void *)v17;
  *(void *)(v18 + 8) = *(void *)(v16 + 8);
  **(void **)(v16 + 8) = v18;
  *((void *)this + 29) = 0;
  if (v17 != v2)
  {
    do
    {
      uint64_t v19 = (char *)*((void *)v17 + 1);
      uint64_t v20 = (atomic_uint *)*((void *)v17 + 3);
      if (v20 && atomic_fetch_add(v20 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v20 + 24))(v20);
      }
      operator delete(v17);
      uint64_t v17 = v19;
    }
    while (v19 != v2);
  }
LABEL_38:
  if (*((char *)this + 215) < 0)
  {
    operator delete(*((void **)this + 24));
    uint64_t v21 = (char *)this + 56;
    if ((*((char *)this + 191) & 0x80000000) == 0)
    {
LABEL_40:
      std::string::size_type v22 = (std::__shared_weak_count *)*((void *)this + 20);
      if (!v22) {
        goto LABEL_46;
      }
      goto LABEL_44;
    }
  }
  else
  {
    uint64_t v21 = (char *)this + 56;
    if ((*((char *)this + 191) & 0x80000000) == 0) {
      goto LABEL_40;
    }
  }
  operator delete(*((void **)this + 21));
  std::string::size_type v22 = (std::__shared_weak_count *)*((void *)this + 20);
  if (!v22) {
    goto LABEL_46;
  }
LABEL_44:
  if (!atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
  }
LABEL_46:
  *((void *)this + 6) = &unk_1F20FD990;
  MEMORY[0x1C8790F40](v21);
  uint64_t v23 = *((void *)this + 18);
  if (v23) {
    dispatch_release(v23);
  }
  long long v24 = *((void *)this + 17);
  if (v24) {
    dispatch_release(v24);
  }
  xpc_object_t v25 = (std::__shared_weak_count *)*((void *)this + 16);
  if (v25) {
    std::__shared_weak_count::__release_weak(v25);
  }
  *(void *)this = &unk_1F20FC1C8;
  uint64_t v26 = *((void *)this + 3);
  if (v26)
  {
    uint64_t v27 = *((void *)this + 4);
    long long v28 = (void *)*((void *)this + 3);
    if (v27 != v26)
    {
      do
      {
        if (*(char *)(v27 - 1) < 0) {
          operator delete(*(void **)(v27 - 24));
        }
        v27 -= 24;
      }
      while (v27 != v26);
      long long v28 = (void *)*((void *)this + 3);
    }
    *((void *)this + 4) = v26;
    operator delete(v28);
  }
  long long v29 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v29) {
    std::__shared_weak_count::__release_weak(v29);
  }
}

{
  void *v1;
  uint64_t vars8;

  TraceManager::~TraceManager(this);

  operator delete(v1);
}

void non-virtual thunk to'TraceManager::~TraceManager(TraceManager *this)
{
}

{
  void *v1;
  uint64_t vars8;

  TraceManager::~TraceManager((TraceManager *)((char *)this - 48));

  operator delete(v1);
}

void ___ZN12TraceManager4initEv_block_invoke(uint64_t a1)
{
  uint64_t v218 = *MEMORY[0x1E4F143B8];
  v181 = *(void **)(a1 + 32);
  uint64_t v1 = v181[11];
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl(&dword_1C5767000, v1, OS_LOG_TYPE_DEFAULT, "#I Initializing", buf, 2u);
  }
  uint64_t v2 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  uint64_t v3 = off_1EBBDD2A0;
  if (!off_1EBBDD2A0)
  {
    CommandDriverFactory::create_default_global((uint64_t *)buf, v2);
    long long v4 = *(_OWORD *)buf;
    *(void *)std::string buf = 0;
    *(void *)&uint8_t buf[8] = 0;
    uint64_t v5 = (std::__shared_weak_count *)*(&off_1EBBDD2A0 + 1);
    off_1EBBDD2A0 = v4;
    if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    uint64_t v6 = *(std::__shared_weak_count **)&buf[8];
    if (*(void *)&buf[8]
      && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
    uint64_t v3 = off_1EBBDD2A0;
  }
  block[5] = v3;
  int v185 = (std::__shared_weak_count *)*(&off_1EBBDD2A0 + 1);
  if (*(&off_1EBBDD2A0 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDD2A0 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)v3 + 16))(&v186, v3);
  uint64_t v188 = 0;
  uint64_t v189 = 0;
  if (v187 && (uint64_t v189 = std::__shared_weak_count::lock(v187)) != 0)
  {
    uint64_t v182 = v186;
    uint64_t v188 = v186;
  }
  else
  {
    uint64_t v182 = 0;
  }
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZN3ctu20SharedSynchronizableI12TraceManagerE13connect_eventIN5boost8signals26signalIFvNS_2cf11CFSharedRefIK14__CFDictionaryEEENS5_19optional_last_valueIvEEiNSt3__14lessIiEENS4_8functionISC_EENSI_IFvRKNS5_10connectionESB_EEENS5_5mutexEEES1_vJSB_EEEDTcl7connectfp_cvNSF_10shared_ptrIS1_EE_EcvP16dispatch_queue_s_EcvPFT1_DpT2_ELi0EEERT_MT0_FSV_SX_E_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_125;
  aBlock[4] = v181 + 15;
  aBlock[5] = TraceManager::handleDumpLogsIndication_sync;
  void aBlock[6] = 0;
  size_t v7 = _Block_copy(aBlock);
  uint64_t v8 = (std::__shared_weak_count *)v181[16];
  if (!v8 || (uint64_t v9 = v181[15], (v10 = std::__shared_weak_count::lock(v8)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v11 = v10;
  long long v12 = v181[17];
  dispatch_object_t v192 = v12;
  int v179 = v7;
  if (v7) {
    xpc_object_t v13 = _Block_copy(v7);
  }
  else {
    xpc_object_t v13 = 0;
  }
  v193 = v13;
  dispatch_retain(v12);
  long long v194 = 0u;
  long long v195 = 0u;
  dispatch_object_t v198 = v12;
  if (v13) {
    xpc_object_t v13 = _Block_copy(v13);
  }
  v199 = v13;
  dispatch_retain(v12);
  dispatch_object_t object = v12;
  int v180 = v11;
  if (!v13)
  {
    v201 = 0;
    dispatch_retain(v12);
    goto LABEL_33;
  }
  uint64_t v14 = _Block_copy(v13);
  v201 = v14;
  dispatch_retain(v12);
  if (!v14)
  {
LABEL_33:
    dispatch_retain(v12);
    unint64_t v202 = 0;
    goto LABEL_34;
  }
  uint64_t v15 = _Block_copy(v14);
  dispatch_retain(v12);
  unint64_t v202 = 0;
  if (!v15)
  {
LABEL_34:
    dispatch_retain(v12);
    int v175 = 0;
    char v20 = 1;
LABEL_35:
    dispatch_retain(v12);
    uint64_t v177 = 0;
    char v21 = 1;
LABEL_36:
    dispatch_retain(v12);
    uint64_t v17 = 0;
    char v22 = 1;
LABEL_37:
    dispatch_retain(v12);
    uint64_t v18 = 0;
    unint64_t v203 = (unint64_t)v12;
    char v23 = 1;
    goto LABEL_38;
  }
  uint64_t v16 = _Block_copy(v15);
  dispatch_retain(v12);
  int v175 = v15;
  if (!v16)
  {
    char v20 = 0;
    goto LABEL_35;
  }
  uint64_t v17 = _Block_copy(v16);
  dispatch_retain(v12);
  uint64_t v177 = v16;
  if (!v17)
  {
    char v20 = 0;
    char v21 = 0;
    goto LABEL_36;
  }
  uint64_t v18 = _Block_copy(v17);
  dispatch_retain(v12);
  if (!v18)
  {
    char v20 = 0;
    char v21 = 0;
    char v22 = 0;
    goto LABEL_37;
  }
  uint64_t v19 = _Block_copy(v18);
  dispatch_retain(v12);
  unint64_t v203 = (unint64_t)v12;
  if (v19)
  {
    char v20 = 0;
    char v21 = 0;
    char v22 = 0;
    char v23 = 0;
    v204 = _Block_copy(v19);
    dispatch_retain(v12);
    dispatch_release(v12);
    _Block_release(v19);
    goto LABEL_39;
  }
  char v20 = 0;
  char v21 = 0;
  char v22 = 0;
  char v23 = 0;
LABEL_38:
  v204 = 0;
  dispatch_retain(v12);
  dispatch_release(v12);
LABEL_39:
  dispatch_release(v12);
  if ((v23 & 1) == 0) {
    _Block_release(v18);
  }
  dispatch_release(v12);
  if ((v22 & 1) == 0) {
    _Block_release(v17);
  }
  unint64_t v202 = (unint64_t)boost::function1<void,ctu::cf::CFSharedRef<__CFDictionary const>>::assign_to<ctu::DispatchSlot<dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFDictionary const>)>>>(ctu::DispatchSlot<dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFDictionary const>)>>)::stored_vtable;
  dispatch_release(v12);
  if ((v21 & 1) == 0) {
    _Block_release(v177);
  }
  dispatch_release(v12);
  if ((v20 & 1) == 0) {
    _Block_release(v175);
  }
  *(void *)std::string buf = 0;
  memset(&buf[8], 170, 24);
  boost::function1<void,ctu::cf::CFSharedRef<__CFDictionary const>>::move_assign((uint64_t)buf, (uint64_t *)&v202);
  boost::function1<void,ctu::cf::CFSharedRef<__CFDictionary const>>::move_assign((uint64_t)&v202, (uint64_t *)&v195 + 1);
  boost::function1<void,ctu::cf::CFSharedRef<__CFDictionary const>>::move_assign((uint64_t)&v195 + 8, (uint64_t *)buf);
  if (*(void *)buf)
  {
    if ((buf[0] & 1) == 0)
    {
      long long v24 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)buf & 0xFFFFFFFFFFFFFFFELL);
      if (v24) {
        v24(&buf[8], &buf[8], 2);
      }
    }
  }
  if (v202)
  {
    if ((v202 & 1) == 0)
    {
      xpc_object_t v25 = *(void (**)(uint64_t, _WORD *, unsigned int))(v202 & 0xFFFFFFFFFFFFFFFELL);
      if (v25) {
        v25((uint64_t)&v203, &v203, 2u);
      }
    }
    unint64_t v202 = 0;
  }
  dispatch_release(object);
  if (v201) {
    _Block_release(v201);
  }
  dispatch_release(v198);
  if (v199) {
    _Block_release(v199);
  }
  atomic_fetch_add_explicit(&v180->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  uint64_t v26 = operator new(0x18uLL);
  void *v26 = &unk_1F20FDCC8;
  v26[1] = v9;
  v26[2] = v180;
  atomic_fetch_add_explicit(&v180->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  uint64_t v27 = operator new(0x18uLL);
  *uint64_t v27 = &unk_1F20FDCC8;
  v27[1] = v9;
  v27[2] = v180;
  atomic_fetch_add_explicit(&v180->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  *(void *)&uint8_t buf[8] = v27;
  *(_DWORD *)std::string buf = 2;
  uint64_t v28 = *((void *)&v194 + 1);
  if (*((void *)&v194 + 1) >= (unint64_t)v195)
  {
    uint64_t v31 = std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::__push_back_slow_path<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>((uint64_t *)&v194, (uint64_t)buf);
    long long v30 = v180;
  }
  else
  {
    long long v29 = operator new(0x18uLL);
    *long long v29 = &unk_1F20FDCC8;
    v29[1] = v9;
    long long v30 = v180;
    v29[2] = v180;
    atomic_fetch_add_explicit(&v180->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    *(void *)(v28 + 8) = v29;
    *(_DWORD *)uint64_t v28 = 2;
    uint64_t v31 = v28 + 24;
  }
  *((void *)&v194 + 1) = v31;
  boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>::destroy_content((uint64_t)buf);
  (*(void (**)(void *))(*v26 + 8))(v26);
  std::__shared_weak_count::__release_weak(v30);
  long long v32 = *(uint64_t ***)(v182 + 112);
  *(void *)&long long v33 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v33 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v212 = v33;
  long long v213 = v33;
  long long v210 = v33;
  long long v211 = v33;
  long long v208 = v33;
  long long v209 = v33;
  long long v206 = v33;
  long long v207 = v33;
  *(_OWORD *)std::string buf = v33;
  *(_OWORD *)&uint8_t buf[16] = v33;
  long long v34 = (pthread_mutex_t *)v32[3];
  unint64_t v214 = 10;
  std::string __p = buf;
  uint64_t v216 = 0;
  v217 = v34;
  pthread_mutex_lock(v34);
  unint64_t v202 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v203 = 0xAAAAAAAAAAAAAAAALL;
  long long v35 = (atomic_uint *)v32[1];
  v183 = (uint64_t ***)v32;
  if (!v35 || atomic_load_explicit(v35 + 2, memory_order_acquire) != 1)
  {
    size_t v39 = (uint64_t *)operator new(0x20uLL);
    uint64_t v40 = *v32;
    uint64_t v41 = **v32;
    v178 = v39;
    std::string::size_type v42 = operator new(0x40uLL);
    size_t v43 = v42;
    *std::string::size_type v42 = v42;
    v42[1] = v42;
    v42[2] = 0;
    size_t v44 = *(void **)(v41 + 8);
    if (v44 != (void *)v41)
    {
      uint64_t v45 = 0;
      xpc_object_t v46 = v42;
      do
      {
        xpc_object_t v47 = operator new(0x20uLL);
        v47[2] = v44[2];
        uint64_t v48 = v44[3];
        void v47[3] = v48;
        if (v48)
        {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v48 + 8), 1u, memory_order_relaxed);
          xpc_object_t v46 = (void *)*v43;
          uint64_t v45 = v43[2];
        }
        void *v47 = v46;
        v47[1] = v43;
        v46[1] = v47;
        void *v43 = v47;
        void v43[2] = ++v45;
        size_t v44 = (void *)v44[1];
        xpc_object_t v46 = v47;
      }
      while (v44 != (void *)v41);
    }
    v176 = v40;
    v43[3] = 0;
    xpc_object_t v49 = (void **)(v43 + 3);
    v43[4] = 0;
    long long v50 = v43 + 4;
    v43[5] = 0;
    *((unsigned char *)v43 + 48) = *(unsigned char *)(v41 + 48);
    v43[3] = v43 + 4;
    size_t v51 = *(void **)(v41 + 24);
    size_t v52 = (void *)(v41 + 32);
    if (v51 == (void *)(v41 + 32))
    {
LABEL_73:
      *((unsigned char *)v43 + 56) = *(unsigned char *)(v41 + 56);
      std::string::size_type v53 = *(void **)(v41 + 24);
      if (v53 != v52)
      {
        size_t v54 = (void *)v43[3];
        uint64_t v55 = v43[1];
        do
        {
          v54[6] = v55;
          uint64_t v56 = v41;
          if (v53 != v52) {
            uint64_t v56 = v53[6];
          }
          xpc_object_t v57 = (void *)v53[1];
          xpc_object_t v58 = v57;
          std::string::size_type v59 = v53;
          if (v57)
          {
            do
            {
              xpc_object_t v60 = v58;
              xpc_object_t v58 = (void *)*v58;
            }
            while (v58);
          }
          else
          {
            do
            {
              xpc_object_t v60 = (void *)v59[2];
              BOOL v105 = *v60 == (void)v59;
              std::string::size_type v59 = v60;
            }
            while (!v105);
          }
          uint64_t v61 = v41;
          if (v60 != v52) {
            uint64_t v61 = v60[6];
          }
          while (v56 != v61)
          {
            uint64_t v56 = *(void *)(v56 + 8);
            uint64_t v55 = *(void *)(v55 + 8);
          }
          if (v57)
          {
            do
            {
              std::string::size_type v62 = v57;
              xpc_object_t v57 = (void *)*v57;
            }
            while (v57);
          }
          else
          {
            do
            {
              std::string::size_type v62 = (void *)v53[2];
              BOOL v105 = *v62 == (void)v53;
              std::string::size_type v53 = v62;
            }
            while (!v105);
          }
          std::string::size_type v63 = (void *)v54[1];
          if (v63)
          {
            do
            {
              std::string::size_type v64 = v63;
              std::string::size_type v63 = (void *)*v63;
            }
            while (v63);
          }
          else
          {
            do
            {
              std::string::size_type v64 = (void *)v54[2];
              BOOL v105 = *v64 == (void)v54;
              size_t v54 = v64;
            }
            while (!v105);
          }
          std::string::size_type v53 = v62;
          size_t v54 = v64;
        }
        while (v62 != v52);
      }
      uint64_t *v178 = (uint64_t)v43;
      v178[1] = 0;
      size_t v84 = operator new(0x18uLL);
      v84[1] = 0x100000001;
      *size_t v84 = &unk_1F20FDB10;
      v84[2] = v43;
      v178[1] = (uint64_t)v84;
      v178[2] = v176[2];
      uint64_t v85 = v176[3];
      v178[3] = v85;
      if (v85) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v85 + 8), 1u, memory_order_relaxed);
      }
      std::string::size_type v86 = (uint64_t *)operator new(0x18uLL);
      v86[1] = 0x100000001;
      *std::string::size_type v86 = (uint64_t)&unk_1F20FDAB0;
      v86[2] = (uint64_t)v178;
      size_t v87 = (atomic_uint *)v32[1];
      std::__shared_weak_count *v32 = v178;
      v32[1] = v86;
      if (v87)
      {
        if (atomic_fetch_add(v87 + 2, 0xFFFFFFFF) == 1)
        {
          (*(void (**)(atomic_uint *))(*(void *)v87 + 16))(v87);
          if (atomic_fetch_add(v87 + 3, 0xFFFFFFFF) == 1) {
            (*(void (**)(atomic_uint *))(*(void *)v87 + 24))(v87);
          }
        }
      }
      int v38 = 0;
      xpc_object_t v36 = (uint64_t *)**v32;
LABEL_152:
      unint64_t v37 = (uint64_t *)v36[1];
      if (v36 == v37) {
        goto LABEL_252;
      }
      goto LABEL_153;
    }
    while (1)
    {
      int v65 = *((_DWORD *)v51 + 8);
      uint64_t v66 = (void *)*v50;
      xpc_object_t v67 = v43 + 4;
      if (*v49 != v50)
      {
        size_t v68 = (void *)*v50;
        std::string::size_type v69 = v43 + 4;
        if (v66)
        {
          do
          {
            xpc_object_t v67 = v68;
            size_t v68 = (void *)v68[1];
          }
          while (v68);
        }
        else
        {
          do
          {
            xpc_object_t v67 = (void *)v69[2];
            BOOL v105 = *v67 == (void)v69;
            std::string::size_type v69 = v67;
          }
          while (v105);
        }
        int v70 = *((_DWORD *)v51 + 10);
        int v71 = *((_DWORD *)v67 + 8);
        if (v71 == v65)
        {
          if (v65 != 1) {
            goto LABEL_118;
          }
          if (*((_DWORD *)v67 + 10) >= v70)
          {
            size_t v72 = (void *)*v50;
            size_t v73 = v43 + 4;
            xpc_object_t v74 = v43 + 4;
            if (v66) {
              goto LABEL_122;
            }
LABEL_129:
            xpc_object_t v78 = operator new(0x38uLL);
            long long v79 = *((_OWORD *)v51 + 2);
            v78[6] = v51[6];
            *((_OWORD *)v78 + 2) = v79;
            *xpc_object_t v78 = 0;
            v78[1] = 0;
            v78[2] = v74;
            void *v73 = v78;
            std::string::size_type v80 = (void *)**v49;
            if (v80)
            {
              *xpc_object_t v49 = v80;
              xpc_object_t v78 = (void *)*v73;
            }
            std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v43[4], v78);
            ++v43[5];
            goto LABEL_132;
          }
        }
        else if (v71 >= v65)
        {
LABEL_118:
          size_t v73 = v43 + 4;
          xpc_object_t v74 = v43 + 4;
          if (!v66) {
            goto LABEL_129;
          }
          size_t v72 = (void *)*v50;
          if (v65 != 1)
          {
            int v75 = *((_DWORD *)v66 + 8);
            xpc_object_t v74 = (void *)*v50;
            while (v65 != v75)
            {
              if (v65 < v75)
              {
                uint64_t v83 = *v74;
                size_t v73 = v74;
                if (!*v74) {
                  goto LABEL_129;
                }
              }
              else
              {
                if (v75 >= v65) {
                  goto LABEL_132;
                }
                uint64_t v83 = v74[1];
                if (!v83) {
                  goto LABEL_128;
                }
              }
              int v75 = *(_DWORD *)(v83 + 32);
              xpc_object_t v74 = (void *)v83;
            }
            goto LABEL_132;
          }
          while (1)
          {
LABEL_122:
            xpc_object_t v74 = v72;
            int v76 = *((_DWORD *)v72 + 8);
            if (v76 == 1)
            {
              int v77 = *((_DWORD *)v72 + 10);
              if (v77 > v70) {
                goto LABEL_121;
              }
              if (v77 >= v70) {
                goto LABEL_132;
              }
            }
            else if (v76 > 1)
            {
LABEL_121:
              size_t v72 = (void *)*v72;
              size_t v73 = v74;
              if (!*v74) {
                goto LABEL_129;
              }
              continue;
            }
            size_t v72 = (void *)v72[1];
            if (!v72)
            {
LABEL_128:
              size_t v73 = v74 + 1;
              goto LABEL_129;
            }
          }
        }
      }
      if (v66) {
        xpc_object_t v74 = v67;
      }
      else {
        xpc_object_t v74 = v43 + 4;
      }
      if (v66) {
        size_t v73 = v67 + 1;
      }
      else {
        size_t v73 = v43 + 4;
      }
      if (!*v73) {
        goto LABEL_129;
      }
LABEL_132:
      uint64_t v81 = (void *)v51[1];
      if (v81)
      {
        do
        {
          std::string::size_type v82 = v81;
          uint64_t v81 = (void *)*v81;
        }
        while (v81);
      }
      else
      {
        do
        {
          std::string::size_type v82 = (void *)v51[2];
          BOOL v105 = *v82 == (void)v51;
          size_t v51 = v82;
        }
        while (!v105);
      }
      size_t v51 = v82;
      if (v82 == v52) {
        goto LABEL_73;
      }
    }
  }
  xpc_object_t v36 = (uint64_t *)**v32;
  unint64_t v37 = v32[2];
  int v38 = 2;
  if (v37 == v36) {
    goto LABEL_152;
  }
LABEL_153:
  int v88 = 0;
  unsigned int v89 = v38 - 1;
  do
  {
    uint64_t v92 = v37[2];
    size_t v93 = *(uint64_t **)(v92 + 32);
    if (v93)
    {
      for (uint64_t i = *v93; i != v93[1]; i += 24)
      {
        if ((*(_DWORD *)i ^ (*(int *)i >> 31)) > 1)
        {
          if ((*(uint64_t (**)(void))(**(void **)(i + 8) + 24))(*(void *)(i + 8))) {
            goto LABEL_170;
          }
        }
        else
        {
          uint64_t v95 = *(void *)(i + 16);
          if (!v95 || !atomic_load_explicit((atomic_uint *volatile)(v95 + 8), memory_order_acquire))
          {
LABEL_170:
            if (*(unsigned char *)(v92 + 24))
            {
              *(unsigned char *)(v92 + 24) = 0;
              boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::mutex>((_DWORD *)v92, buf);
            }
            break;
          }
        }
      }
    }
    uint64_t v90 = v37[2];
    if (*(unsigned char *)(v90 + 24))
    {
      xpc_object_t v36 = (uint64_t *)v37[1];
      goto LABEL_156;
    }
    xpc_object_t v96 = **v183;
    int v98 = (uint64_t **)(v96 + 4);
    uint64_t v97 = v96[4];
    if (!v97)
    {
      if ((uint64_t *)v96[10] != v37) {
        goto LABEL_247;
      }
      std::string::size_type v120 = (uint64_t *)v37[1];
      std::string::size_type v122 = (uint64_t **)(v96 + 4);
      size_t v101 = v96 + 4;
      if (v120 != v96) {
        goto LABEL_243;
      }
LABEL_225:
      xpc_object_t v125 = (uint64_t *)v101[1];
      xpc_object_t v126 = v101;
      if (v125)
      {
        do
        {
          xpc_object_t v127 = v125;
          xpc_object_t v125 = (uint64_t *)*v125;
        }
        while (v125);
      }
      else
      {
        do
        {
          xpc_object_t v127 = (uint64_t *)v126[2];
          BOOL v105 = *v127 == (void)v126;
          xpc_object_t v126 = v127;
        }
        while (!v105);
      }
      if ((uint64_t *)v96[3] == v101) {
        v96[3] = (uint64_t)v127;
      }
      --v96[5];
      std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v97, v101);
      operator delete(v101);
      goto LABEL_247;
    }
    int v99 = *(_DWORD *)(v90 + 64);
    int v100 = *(_DWORD *)(v90 + 72);
    size_t v101 = v96 + 4;
    uint64_t v102 = v96[4];
    if (v99 == 1)
    {
      size_t v101 = v96 + 4;
      uint64_t v103 = v96[4];
      do
      {
        while (1)
        {
          int v109 = *(_DWORD *)(v103 + 32);
          BOOL v110 = v109 < 1;
          if (v109 == 1) {
            BOOL v110 = *(_DWORD *)(v103 + 40) < v100;
          }
          if (!v110) {
            break;
          }
          uint64_t v103 = *(void *)(v103 + 8);
          if (!v103) {
            goto LABEL_191;
          }
        }
        size_t v101 = (uint64_t *)v103;
        uint64_t v103 = *(void *)v103;
      }
      while (v103);
    }
    else
    {
      do
      {
        int v104 = *(_DWORD *)(v102 + 32);
        BOOL v105 = v104 == v99;
        BOOL v106 = v104 < v99;
        if (v104 >= v99) {
          int v107 = (uint64_t *)v102;
        }
        else {
          int v107 = (uint64_t *)(v102 + 8);
        }
        if (v106) {
          std::string::size_type v108 = v101;
        }
        else {
          std::string::size_type v108 = (uint64_t *)v102;
        }
        if (v105)
        {
          int v107 = (uint64_t *)v102;
          size_t v101 = (uint64_t *)v102;
        }
        else
        {
          size_t v101 = v108;
        }
        uint64_t v102 = *v107;
      }
      while (*v107);
    }
LABEL_191:
    if ((uint64_t *)v101[6] != v37) {
      goto LABEL_247;
    }
    xpc_object_t v111 = (uint64_t **)(v96 + 4);
    uint64_t v112 = (uint64_t **)v96[4];
    if (v99 == 1)
    {
      while (1)
      {
        int v118 = *((_DWORD *)v112 + 8);
        if (v118 == 1)
        {
          if (v100 < *((_DWORD *)v112 + 10)) {
            goto LABEL_208;
          }
LABEL_203:
          uint64_t v112 = (uint64_t **)v112[1];
          if (!v112) {
            goto LABEL_209;
          }
        }
        else
        {
          if (v118 <= 1) {
            goto LABEL_203;
          }
LABEL_208:
          xpc_object_t v111 = v112;
          uint64_t v112 = (uint64_t **)*v112;
          if (!v112) {
            goto LABEL_209;
          }
        }
      }
    }
    do
    {
      int v113 = *((_DWORD *)v112 + 8);
      uint64_t v114 = (uint64_t ***)(v112 + 1);
      BOOL v115 = v99 == v113;
      BOOL v116 = v99 < v113;
      if (v99 >= v113) {
        int v117 = (uint64_t ***)(v112 + 1);
      }
      else {
        int v117 = (uint64_t ***)v112;
      }
      if (!v116) {
        uint64_t v112 = v111;
      }
      if (v115) {
        int v117 = v114;
      }
      else {
        xpc_object_t v111 = v112;
      }
      uint64_t v112 = *v117;
    }
    while (*v117);
LABEL_209:
    std::string::size_type v119 = **v183;
    if (v111 != v98) {
      std::string::size_type v119 = v111[6];
    }
    std::string::size_type v120 = (uint64_t *)v37[1];
    if (v120 == v119) {
      goto LABEL_225;
    }
    if (v99 == 1)
    {
      while (1)
      {
        while (1)
        {
          std::string::size_type v122 = (uint64_t **)v97;
          int v123 = *(_DWORD *)(v97 + 32);
          if (v123 == 1) {
            break;
          }
          if (v123 <= 1) {
            goto LABEL_221;
          }
LABEL_215:
          uint64_t v97 = *(void *)v97;
          if (!*v122)
          {
            int v98 = v122;
            goto LABEL_243;
          }
        }
        int v124 = *(_DWORD *)(v97 + 40);
        if (v124 > v100) {
          goto LABEL_215;
        }
        if (v124 >= v100)
        {
          *(void *)(v97 + 48) = v120;
          goto LABEL_247;
        }
LABEL_221:
        uint64_t v97 = *(void *)(v97 + 8);
        if (!v97)
        {
          int v98 = v122 + 1;
          goto LABEL_243;
        }
      }
    }
    int v121 = *(_DWORD *)(v97 + 32);
    if (v99 == v121) {
      goto LABEL_246;
    }
    while (v99 >= v121)
    {
      if (v121 >= v99) {
        goto LABEL_246;
      }
      uint64_t v128 = *(void *)(v97 + 8);
      if (!v128)
      {
        int v98 = (uint64_t **)(v97 + 8);
        goto LABEL_242;
      }
LABEL_234:
      int v121 = *(_DWORD *)(v128 + 32);
      uint64_t v97 = v128;
      if (v99 == v121)
      {
        *(void *)(v128 + 48) = v120;
        goto LABEL_247;
      }
    }
    uint64_t v128 = *(void *)v97;
    if (*(void *)v97) {
      goto LABEL_234;
    }
    int v98 = (uint64_t **)v97;
LABEL_242:
    std::string::size_type v122 = (uint64_t **)v97;
LABEL_243:
    uint64_t v97 = (uint64_t)operator new(0x38uLL);
    uint64_t v129 = *(void *)(v90 + 64);
    *(_DWORD *)(v97 + 40) = *(_DWORD *)(v90 + 72);
    *(void *)(v97 + 32) = v129;
    *(void *)(v97 + 48) = 0;
    *(void *)uint64_t v97 = 0;
    *(void *)(v97 + 8) = 0;
    *(void *)(v97 + 16) = v122;
    *int v98 = (uint64_t *)v97;
    uint64_t v130 = *(void *)v96[3];
    xpc_object_t v131 = (uint64_t *)v97;
    if (v130)
    {
      v96[3] = v130;
      xpc_object_t v131 = *v98;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v96[4], v131);
    ++v96[5];
LABEL_246:
    *(void *)(v97 + 48) = v120;
LABEL_247:
    uint64_t v132 = *v37;
    xpc_object_t v36 = (uint64_t *)v37[1];
    *(void *)(v132 + 8) = v36;
    *(void *)v37[1] = v132;
    --v96[2];
    xpc_object_t v133 = (atomic_uint *)v37[3];
    if (v133)
    {
      if (atomic_fetch_add(v133 + 2, 0xFFFFFFFF) == 1)
      {
        (*(void (**)(atomic_uint *))(*(void *)v133 + 16))(v133);
        if (atomic_fetch_add(v133 + 3, 0xFFFFFFFF) == 1) {
          (*(void (**)(atomic_uint *))(*(void *)v133 + 24))(v133);
        }
      }
    }
    operator delete(v37);
LABEL_156:
    BOOL v91 = v36 != **v183 && v89 >= ++v88;
    unint64_t v37 = v36;
  }
  while (v91);
LABEL_252:
  v183[2] = (uint64_t **)v36;
  xpc_object_t v134 = operator new(0x50uLL);
  v134[1] = 0;
  v134[2] = 0;
  *((unsigned char *)v134 + 24) = 1;
  *((_DWORD *)v134 + 7) = 1;
  *xpc_object_t v134 = &unk_1F20FDB70;
  xpc_object_t v135 = operator new(0x38uLL);
  std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::vector(v135, (uint64_t *)&v194);
  v135[3] = 0;
  uint64_t v136 = *((void *)&v195 + 1);
  if (*((void *)&v195 + 1))
  {
    v135[3] = *((void *)&v195 + 1);
    if (v136)
    {
      *((_OWORD *)v135 + 2) = v196;
      v135[6] = v197;
    }
    else
    {
      (*(void (**)(long long *, void *, void))(v136 & 0xFFFFFFFFFFFFFFFELL))(&v196, v135 + 4, 0);
    }
  }
  v134[4] = v135;
  v134[5] = 0;
  xpc_object_t v137 = operator new(0x18uLL);
  v137[1] = 0x100000001;
  void *v137 = &unk_1F20FDBC8;
  v137[2] = v135;
  v134[5] = v137;
  v134[6] = v183[3];
  xpc_object_t v138 = (atomic_uint *)v183[4];
  v134[7] = v138;
  if (v138) {
    atomic_fetch_add_explicit(v138 + 2, 1u, memory_order_relaxed);
  }
  *((_DWORD *)v134 + 16) = 0;
  *((unsigned char *)v134 + 68) = 0;
  unint64_t v202 = (unint64_t)v134;
  xpc_object_t v139 = operator new(0x18uLL);
  *((void *)v139 + 1) = 0x100000001;
  *(void *)xpc_object_t v139 = &unk_1F20FDC28;
  *((void *)v139 + 2) = v134;
  unint64_t v203 = (unint64_t)v139;
  xpc_object_t v140 = **v183;
  xpc_object_t v141 = operator new(0x20uLL);
  xpc_object_t v142 = v140 + 4;
  v141[2] = v134;
  v141[3] = v139;
  atomic_fetch_add_explicit((atomic_uint *volatile)v139 + 2, 1u, memory_order_relaxed);
  uint64_t v143 = *v140;
  *(void *)(v143 + 8) = v141;
  *xpc_object_t v141 = v143;
  *xpc_object_t v140 = (uint64_t)v141;
  v141[1] = v140;
  ++v140[2];
  xpc_object_t v144 = (uint64_t *)v140[4];
  if (v144)
  {
    xpc_object_t v145 = v140 + 4;
    uint64_t v146 = v140[4];
    do
    {
      int v147 = *(_DWORD *)(v146 + 32);
      BOOL v148 = v147 == 2;
      BOOL v149 = v147 < 2;
      if (v147 >= 2) {
        xpc_object_t v150 = (uint64_t *)v146;
      }
      else {
        xpc_object_t v150 = (uint64_t *)(v146 + 8);
      }
      if (!v149) {
        xpc_object_t v145 = (uint64_t *)v146;
      }
      if (v148)
      {
        xpc_object_t v150 = (uint64_t *)v146;
        xpc_object_t v145 = (uint64_t *)v146;
      }
      uint64_t v146 = *v150;
    }
    while (*v150);
    if (v145 == v142 || *((_DWORD *)v145 + 8) != 2)
    {
      int v151 = *((_DWORD *)v144 + 8);
      while (v151 != 2)
      {
        if (v151 < 3)
        {
          xpc_object_t v152 = (uint64_t *)v144[1];
          if (!v152)
          {
            xpc_object_t v142 = v144 + 1;
            goto LABEL_279;
          }
        }
        else
        {
          xpc_object_t v152 = (uint64_t *)*v144;
          xpc_object_t v142 = v144;
          if (!*v144) {
            goto LABEL_279;
          }
        }
        int v151 = *((_DWORD *)v152 + 8);
        xpc_object_t v144 = v152;
      }
    }
    *((_DWORD *)v134 + 16) = 2;
    *(void *)((char *)v134 + 68) = 0xAAAAAAAAAAAAAA00;
LABEL_282:
    atomic_fetch_add_explicit((atomic_uint *volatile)v139 + 3, 1u, memory_order_relaxed);
    *(void *)&long long v190 = v134;
    *((void *)&v190 + 1) = v139;
    atomic_fetch_add_explicit((atomic_uint *volatile)v139 + 3, 1u, memory_order_relaxed);
    if (atomic_fetch_add((atomic_uint *volatile)v139 + 3, 0xFFFFFFFF) == 1) {
      (*(void (**)(void *))(*(void *)v139 + 24))(v139);
    }
    xpc_object_t v155 = (atomic_uint *)v203;
    if (v203) {
      goto LABEL_285;
    }
  }
  else
  {
    xpc_object_t v144 = v140 + 4;
LABEL_279:
    xpc_object_t v153 = operator new(0x38uLL);
    v153[4] = 0xAAAAAA0000000002;
    *((_DWORD *)v153 + 10) = -1431655766;
    void v153[6] = v141;
    *xpc_object_t v153 = 0;
    v153[1] = 0;
    v153[2] = v144;
    uint64_t *v142 = (uint64_t)v153;
    uint64_t v154 = *(void *)v140[3];
    if (v154)
    {
      v140[3] = v154;
      xpc_object_t v153 = (void *)*v142;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v140[4], v153);
    ++v140[5];
    xpc_object_t v134 = (void *)v202;
    xpc_object_t v139 = (void *)v203;
    *(_DWORD *)(v202 + 64) = 2;
    *(void *)((char *)v134 + 68) = 0xAAAAAAAAAAAAAA00;
    if (v139) {
      goto LABEL_282;
    }
    long long v190 = (unint64_t)v134;
    xpc_object_t v155 = (atomic_uint *)v203;
    if (v203)
    {
LABEL_285:
      if (atomic_fetch_add(v155 + 2, 0xFFFFFFFF) == 1)
      {
        (*(void (**)(atomic_uint *))(*(void *)v155 + 16))(v155);
        if (atomic_fetch_add(v155 + 3, 0xFFFFFFFF) == 1) {
          (*(void (**)(atomic_uint *))(*(void *)v155 + 24))(v155);
        }
      }
    }
  }
  pthread_mutex_unlock(v217);
  xpc_object_t v156 = v179;
  xpc_object_t v157 = (char *)__p;
  if (__p)
  {
    if (v216 - 1 >= 0)
    {
      xpc_object_t v158 = (char *)__p + 16 * v216;
      do
      {
        xpc_object_t v159 = (atomic_uint *)*((void *)v158 - 1);
        if (v159)
        {
          if (atomic_fetch_add(v159 + 2, 0xFFFFFFFF) == 1)
          {
            (*(void (**)(atomic_uint *))(*(void *)v159 + 16))(v159);
            if (atomic_fetch_add(v159 + 3, 0xFFFFFFFF) == 1) {
              (*(void (**)(atomic_uint *))(*(void *)v159 + 24))(v159);
            }
          }
        }
        v158 -= 16;
      }
      while (v158 > v157);
    }
    xpc_object_t v156 = v179;
    if (v214 >= 0xB) {
      operator delete(__p);
    }
  }
  xpc_object_t v160 = v181;
  if (*((void *)&v195 + 1))
  {
    if ((BYTE8(v195) & 1) == 0)
    {
      xpc_object_t v161 = *(void (**)(long long *, long long *, uint64_t))(*((void *)&v195 + 1) & 0xFFFFFFFFFFFFFFFELL);
      if (v161) {
        v161(&v196, &v196, 2);
      }
    }
    *((void *)&v195 + 1) = 0;
  }
  uint64_t v162 = v194;
  if ((void)v194)
  {
    uint64_t v163 = *((void *)&v194 + 1);
    xpc_object_t v164 = (void *)v194;
    if (*((void *)&v194 + 1) != (void)v194)
    {
      do
      {
        v163 -= 24;
        boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>::destroy_content(v163);
      }
      while (v163 != v162);
      xpc_object_t v164 = (void *)v194;
    }
    *((void *)&v194 + 1) = v162;
    operator delete(v164);
    xpc_object_t v160 = v181;
  }
  dispatch_release(v192);
  if (v193) {
    _Block_release(v193);
  }
  if (atomic_fetch_add(&v180->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (!v156) {
      goto LABEL_316;
    }
LABEL_315:
    _Block_release(v156);
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v180->__on_zero_shared)(v180);
    std::__shared_weak_count::__release_weak(v180);
    if (v156) {
      goto LABEL_315;
    }
  }
LABEL_316:
  v165 = operator new(0x20uLL);
  v165[1] = v190;
  long long v190 = 0uLL;
  *((void *)v165 + 1) = v160 + 27;
  uint64_t v166 = v160[27];
  *(void *)v165 = v166;
  *(void *)(v166 + 8) = v165;
  v160[27] = v165;
  ++v160[29];
  xpc_object_t v167 = v189;
  if (v189 && !atomic_fetch_add(&v189->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v167->__on_zero_shared)(v167);
    std::__shared_weak_count::__release_weak(v167);
  }
  if (v187) {
    std::__shared_weak_count::__release_weak(v187);
  }
  if (v185 && !atomic_fetch_add(&v185->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v185->__on_zero_shared)(v185);
    std::__shared_weak_count::__release_weak(v185);
  }
  char v168 = (const void *)*MEMORY[0x1E4F4F910];
  size_t v169 = strlen((const char *)*MEMORY[0x1E4F4F910]);
  if (v169 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v170 = v169;
  if (v169 >= 0x17)
  {
    uint64_t v172 = (v169 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v169 | 7) != 0x17) {
      uint64_t v172 = v169 | 7;
    }
    uint64_t v173 = v172 + 1;
    int v171 = operator new(v172 + 1);
    *(void *)&uint8_t buf[8] = v170;
    *(void *)&uint8_t buf[16] = v173 | 0x8000000000000000;
    *(void *)std::string buf = v171;
    goto LABEL_331;
  }
  uint8_t buf[23] = v169;
  int v171 = buf;
  if (v169) {
LABEL_331:
  }
    memmove(v171, v168, v170);
  v171[v170] = 0;
  support::fs::createDir(buf, 0x1EDu, 1);
  if ((buf[23] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  global_queue = dispatch_get_global_queue(0, 0);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = ___ZN12TraceManager4initEv_block_invoke_2;
  block[3] = &__block_descriptor_tmp_18;
  block[4] = v181;
  dispatch_async(global_queue, block);
}

void sub_1C5920784(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void sub_1C5920790(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_1C592079C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_1C59207A8(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_1C59207B4(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_1C59207C0(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_1C59207CC(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_1C59207D8(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_1C59207E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55)
{
  if (a2)
  {
    xpc_object_t v57 = *v55;
    if (*v55)
    {
      uint64_t v58 = (uint64_t)v55[1];
      std::string::size_type v59 = *v55;
      if ((void *)v58 != v57)
      {
        do
        {
          v58 -= 24;
          boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>::destroy_content(v58);
        }
        while ((void *)v58 != v57);
        std::string::size_type v59 = *v55;
      }
      v55[1] = v57;
      operator delete(v59);
    }
    operator delete(v55);
    boost::signals2::detail::connection_body_base::~connection_body_base(v56);
    operator delete(v56);
    boost::signals2::detail::garbage_collecting_lock<boost::signals2::mutex>::~garbage_collecting_lock((uint64_t)&a55);
    boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>>::~slot(&a39);
    ctu::DispatchSlot<dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFDictionary const>)>>::~DispatchSlot((uint64_t)&a37);
    JUMPOUT(0x1C59211B8);
  }
  _Unwind_Resume(a1);
}

void sub_1C592082C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_1C5920838(_Unwind_Exception *a1)
{
}

void sub_1C592084C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_1C5920858(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_1C5920864(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_1C5920870(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_1C592087C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55)
{
  if (a2)
  {
    boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>::destroy_content((uint64_t)&a55);
    (*(void (**)(uint64_t))(*(void *)v55 + 8))(v55);
    std::__shared_weak_count::__release_weak(a13);
    JUMPOUT(0x1C59211A8);
  }
  _Unwind_Resume(a1);
}

void sub_1C5920898(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_1C59208A4(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_1C59208B0(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_1C59208BC(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_1C59208C8(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_1C59208D4(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_1C59208E0(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_1C59208EC(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_1C59208F8(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_1C5920904(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_1C5920910(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_1C592091C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_1C5920928(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    uint64_t v11 = (atomic_uint *)__p[3];
    if (v11)
    {
      if (atomic_fetch_add(v11 + 2, 0xFFFFFFFF) == 1)
      {
        (*(void (**)(atomic_uint *))(*(void *)v11 + 16))(v11);
        if (atomic_fetch_add(v11 + 3, 0xFFFFFFFF) == 1) {
          (*(void (**)(atomic_uint *))(*(void *)v11 + 24))(v11);
        }
      }
    }
    long long v12 = (atomic_uint *)__p[1];
    if (v12 && atomic_fetch_add(v12 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v12 + 16))(v12);
      if (atomic_fetch_add(v12 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v12 + 24))(v12);
      }
    }
    operator delete(__p);
    __cxa_rethrow();
  }
  _Unwind_Resume(a1);
}

void sub_1C5920A50(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_1C5920A5C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_1C5920A68(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55)
{
  if (a2)
  {
    __cxa_end_catch();
    boost::signals2::detail::garbage_collecting_lock<boost::signals2::mutex>::~garbage_collecting_lock((uint64_t)&a55);
    boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>>::~slot(&a39);
    ctu::DispatchSlot<dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFDictionary const>)>>::~DispatchSlot((uint64_t)&a37);
    JUMPOUT(0x1C59211B8);
  }
  _Unwind_Resume(a1);
}

void sub_1C5920A78(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_1C5920A84(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    std::__tree<std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>>>::destroy((void *)v2[4]);
    if (v2[2])
    {
      uint64_t v3 = (void *)*v2;
      long long v4 = (uint64_t *)v2[1];
      uint64_t v5 = *v4;
      *(void *)(v5 + 8) = *(void *)(*v2 + 8);
      *(void *)v3[1] = v5;
      v2[2] = 0;
      if (v4 != v2)
      {
        do
        {
          uint64_t v6 = (uint64_t *)v4[1];
          size_t v7 = (atomic_uint *)v4[3];
          if (v7 && atomic_fetch_add(v7 + 2, 0xFFFFFFFF) == 1)
          {
            (*(void (**)(atomic_uint *))(*(void *)v7 + 16))(v7);
            if (atomic_fetch_add(v7 + 3, 0xFFFFFFFF) == 1) {
              (*(void (**)(atomic_uint *))(*(void *)v7 + 24))(v7);
            }
          }
          operator delete(v4);
          long long v4 = v6;
        }
        while (v6 != v2);
      }
    }
    operator delete(v2);
    __cxa_rethrow();
  }
  _Unwind_Resume(a1);
}

void sub_1C5920B74(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_1C5920B80(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  if (a2)
  {
    __cxa_end_catch();
    uint64_t v11 = (atomic_uint *)a11[1];
    if (v11)
    {
      if (atomic_fetch_add(v11 + 2, 0xFFFFFFFF) == 1)
      {
        (*(void (**)(atomic_uint *))(*(void *)v11 + 16))(v11);
        if (atomic_fetch_add(v11 + 3, 0xFFFFFFFF) == 1) {
          (*(void (**)(atomic_uint *))(*(void *)v11 + 24))(v11);
        }
      }
    }
    operator delete(a11);
    JUMPOUT(0x1C59211A0);
  }
  _Unwind_Resume(a1);
}

void sub_1C5920C14(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_1C5920C20(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_1C5920C2C(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  if (a2)
  {
    operator delete(a11);
    JUMPOUT(0x1C59211A0);
  }
  _Unwind_Resume(a1);
}

void sub_1C5920C38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *__p,uint64_t a56,int a57,__int16 a58,char a59,char a60)
{
  if (a60 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_1C5920C54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,std::__shared_weak_count *a24,char a25,uint64_t a26,char a27)
{
  if (a24)
  {
    std::__shared_weak_count::__release_weak(a24);
    std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
    _Unwind_Resume(a1);
  }
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
  _Unwind_Resume(a1);
}

void sub_1C5920C84(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_1C5920C90(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    __cxa_rethrow();
  }
  _Unwind_Resume(a1);
}

void sub_1C5920CD0(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55)
{
  if (a2)
  {
    __cxa_end_catch();
    boost::signals2::detail::garbage_collecting_lock<boost::signals2::mutex>::~garbage_collecting_lock((uint64_t)&a55);
    boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>>::~slot(&a39);
    ctu::DispatchSlot<dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFDictionary const>)>>::~DispatchSlot((uint64_t)&a37);
    JUMPOUT(0x1C59211B8);
  }
  _Unwind_Resume(a1);
}

void sub_1C5920CE0(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_1C5920CEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    unint64_t v12 = (unint64_t)v11[3];
    if (v12)
    {
      if ((v12 & 1) == 0)
      {
        xpc_object_t v13 = *(void (**)(void **, void **, uint64_t))(v12 & 0xFFFFFFFFFFFFFFFELL);
        if (v13) {
          v13(v11 + 4, v11 + 4, 2);
        }
      }
      v11[3] = 0;
    }
    uint64_t v14 = *v11;
    if (*v11)
    {
      uint64_t v15 = (uint64_t)v11[1];
      uint64_t v16 = *v11;
      if ((void *)v15 != v14)
      {
        do
        {
          v15 -= 24;
          boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>::destroy_content(v15);
        }
        while ((void *)v15 != v14);
        uint64_t v16 = *v11;
      }
      v11[1] = v14;
      operator delete(v16);
    }
    operator delete(v11);
    __cxa_rethrow();
  }
  _Unwind_Resume(a1);
}

void sub_1C5920D74(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_1C5920D80(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, boost::signals2::detail::connection_body_base *a11)
{
  if (a2)
  {
    __cxa_end_catch();
    uint64_t v11 = (atomic_uint *)*((void *)a11 + 5);
    if (v11)
    {
      if (atomic_fetch_add(v11 + 2, 0xFFFFFFFF) == 1)
      {
        (*(void (**)(atomic_uint *))(*(void *)v11 + 16))(v11);
        if (atomic_fetch_add(v11 + 3, 0xFFFFFFFF) == 1) {
          (*(void (**)(atomic_uint *))(*(void *)v11 + 24))(v11);
        }
      }
    }
    boost::signals2::detail::connection_body_base::~connection_body_base(a11);
    JUMPOUT(0x1C59210DCLL);
  }
  _Unwind_Resume(a1);
}

void sub_1C5920E14(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_1C5920E20(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_1C5920E2C(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    JUMPOUT(0x1C5920E38);
  }
  _Unwind_Resume(a1);
}

void sub_1C5920E44(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    JUMPOUT(0x1C5920E50);
  }
  _Unwind_Resume(a1);
}

void sub_1C5920E5C(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    unint64_t v2 = STACK[0x218];
    if (STACK[0x218])
    {
      if ((uint64_t)(STACK[0x220] - 1) >= 0)
      {
        unint64_t v3 = v2 + 16 * STACK[0x220];
        do
        {
          long long v4 = *(atomic_uint **)(v3 - 8);
          if (v4)
          {
            if (atomic_fetch_add(v4 + 2, 0xFFFFFFFF) == 1)
            {
              (*(void (**)(atomic_uint *))(*(void *)v4 + 16))(v4);
              if (atomic_fetch_add(v4 + 3, 0xFFFFFFFF) == 1) {
                (*(void (**)(atomic_uint *))(*(void *)v4 + 24))(v4);
              }
            }
          }
          v3 -= 16;
        }
        while (v3 > v2);
      }
      if (STACK[0x210] >= 0xB) {
        operator delete((void *)STACK[0x218]);
      }
    }
    JUMPOUT(0x1C59211A8);
  }
  _Unwind_Resume(a1);
}

void sub_1C5920F24(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_1C5920F30(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    JUMPOUT(0x1C5920F38);
  }
  _Unwind_Resume(a1);
}

void sub_1C5920F64(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    JUMPOUT(0x1C5920F6CLL);
  }
  _Unwind_Resume(a1);
}

void sub_1C5920F78(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_1C5920F98(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_1C5920FA4(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55)
{
  if (a2)
  {
    boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>>,boost::signals2::mutex>>::~shared_ptr((uint64_t)&a51);
    boost::signals2::detail::garbage_collecting_lock<boost::signals2::mutex>::~garbage_collecting_lock((uint64_t)&a55);
    boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>>::~slot(&a39);
    ctu::DispatchSlot<dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFDictionary const>)>>::~DispatchSlot((uint64_t)&a37);
    JUMPOUT(0x1C59211B8);
  }
  _Unwind_Resume(a1);
}

void sub_1C5920FBC(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_1C5920FCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char *__p,char *a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55)
{
  if (a2)
  {
    boost::function1<void,ctu::cf::CFSharedRef<__CFDictionary const>>::~function1(&a55);
    boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>::~function(&a51);
    ctu::DispatchSlot<dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFDictionary const>)>>::~DispatchSlot((uint64_t)&a49);
    ctu::DispatchSlot<dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFDictionary const>)>>::~DispatchSlot((uint64_t)&a47);
    if (a42)
    {
      if ((a42 & 1) == 0)
      {
        uint64_t v55 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(a42 & 0xFFFFFFFFFFFFFFFELL);
        if (v55) {
          v55(&a43, &a43, 2);
        }
      }
    }
    if (__p)
    {
      uint64_t v56 = a40;
      xpc_object_t v57 = __p;
      if (a40 != __p)
      {
        do
        {
          v56 -= 24;
          boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>::destroy_content((uint64_t)v56);
        }
        while (v56 != __p);
        xpc_object_t v57 = __p;
      }
      operator delete(v57);
    }
    JUMPOUT(0x1C59211B0);
  }
  _Unwind_Resume(a1);
}

void sub_1C5921060(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_1C592106C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_1C592107C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_1C5921088(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>>>::destroy(v3);
    std::list<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>>,boost::signals2::mutex>>>::~list(v2);
    operator delete(v2);
    JUMPOUT(0x1C59210DCLL);
  }
  _Unwind_Resume(a1);
}

void sub_1C5921184(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_1C5921190(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55)
{
  if (!a2) {
    JUMPOUT(0x1C5921198);
  }
  boost::signals2::detail::garbage_collecting_lock<boost::signals2::mutex>::~garbage_collecting_lock(&a55);
  boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>>::~slot(&a39);
  ctu::DispatchSlot<dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFDictionary const>)>>::~DispatchSlot(&a37);
  JUMPOUT(0x1C59211B8);
}

void TraceManager::handleDumpLogsIndication_sync(uint64_t a1, const __CFDictionary **a2)
{
  long long v4 = *(NSObject **)(a1 + 88);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl(&dword_1C5767000, v4, OS_LOG_TYPE_DEFAULT, "#I Received Dump logs indication from Baseband", buf, 2u);
  }
  memset(buf, 170, 24);
  Timestamp::Timestamp((Timestamp *)buf);
  memset(&__dst, 170, sizeof(__dst));
  uint64_t v5 = (const void *)*MEMORY[0x1E4F4C140];
  size_t v6 = strlen((const char *)*MEMORY[0x1E4F4C140]);
  if (v6 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  std::string::size_type v7 = v6;
  if (v6 >= 0x17)
  {
    uint64_t v15 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17) {
      uint64_t v15 = v6 | 7;
    }
    uint64_t v16 = v15 + 1;
    p_dst = (std::string *)operator new(v15 + 1);
    __dst.__r_.__value_.__l.__size_ = v7;
    __dst.__r_.__value_.__r.__words[2] = v16 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  }
  else
  {
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v6;
    p_dst = &__dst;
    if (!v6)
    {
      __dst.__r_.__value_.__s.__data_[0] = 0;
      CFDictionaryRef v9 = *a2;
      if (*a2) {
        std::string::size_type v10 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
      }
      else {
        std::string::size_type v10 = 0;
      }
      if (v10) {
        goto LABEL_10;
      }
      goto LABEL_21;
    }
  }
  memmove(p_dst, v5, v7);
  p_dst->__r_.__value_.__s.__data_[v7] = 0;
  CFDictionaryRef v9 = *a2;
  if (*a2) {
    uint64_t v17 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
  }
  else {
    uint64_t v17 = 0;
  }
  if (v17)
  {
LABEL_10:
    v49[0] = 0xAAAAAAAAAAAAAAAALL;
    v49[1] = 0xAAAAAAAAAAAAAAAALL;
    ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v49, v9);
    uint64_t v11 = (const void *)*MEMORY[0x1E4F4C1C8];
    size_t v12 = strlen((const char *)*MEMORY[0x1E4F4C1C8]);
    if (v12 > 0x7FFFFFFFFFFFFFF7) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    xpc_object_t v13 = (void *)v12;
    if (v12 >= 0x17)
    {
      uint64_t v19 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v12 | 7) != 0x17) {
        uint64_t v19 = v12 | 7;
      }
      uint64_t v20 = v19 + 1;
      uint64_t v14 = operator new(v19 + 1);
      __p[1] = v13;
      unint64_t v47 = v20 | 0x8000000000000000;
      __p[0] = v14;
    }
    else
    {
      HIBYTE(v47) = v12;
      uint64_t v14 = __p;
      if (!v12)
      {
LABEL_26:
        *((unsigned char *)v13 + (void)v14) = 0;
        ctu::cf::map_adapter::getString();
        if (SHIBYTE(v48[2]) >= 0) {
          char v21 = v48;
        }
        else {
          char v21 = (void **)v48[0];
        }
        if (SHIBYTE(v48[2]) >= 0) {
          std::string::size_type v22 = HIBYTE(v48[2]);
        }
        else {
          std::string::size_type v22 = (std::string::size_type)v48[1];
        }
        std::string::append(&__dst, (const std::string::value_type *)v21, v22);
        if (SHIBYTE(v48[2]) < 0)
        {
          operator delete(v48[0]);
          if ((SHIBYTE(v47) & 0x80000000) == 0) {
            goto LABEL_34;
          }
        }
        else if ((SHIBYTE(v47) & 0x80000000) == 0)
        {
          goto LABEL_34;
        }
        operator delete(__p[0]);
LABEL_34:
        memset(v48, 170, sizeof(v48));
        HIBYTE(v47) = 0;
        LOBYTE(__p[0]) = 0;
        ctu::cf::map_adapter::getString();
        if (SHIBYTE(v47) < 0) {
          operator delete(__p[0]);
        }
        LODWORD(__p[0]) = 1;
        char v23 = (const char *)radio::asString();
        long long v24 = v23;
        int v25 = SHIBYTE(v48[2]);
        if (SHIBYTE(v48[2]) >= 0) {
          size_t v26 = HIBYTE(v48[2]);
        }
        else {
          size_t v26 = (size_t)v48[1];
        }
        if (v26 == strlen(v23))
        {
          if (SHIBYTE(v48[2]) >= 0) {
            uint64_t v27 = v48;
          }
          else {
            uint64_t v27 = (void **)v48[0];
          }
          if (!memcmp(v27, v24, v26)) {
            int64_t v18 = 5;
          }
          else {
            int64_t v18 = 2;
          }
          if ((v25 & 0x80000000) == 0) {
            goto LABEL_50;
          }
        }
        else
        {
          int64_t v18 = 2;
          if ((SHIBYTE(v48[2]) & 0x80000000) == 0)
          {
LABEL_50:
            MEMORY[0x1C8791160](v49);
            goto LABEL_51;
          }
        }
        operator delete(v48[0]);
        goto LABEL_50;
      }
    }
    memmove(v14, v11, (size_t)v13);
    goto LABEL_26;
  }
LABEL_21:
  int64_t v18 = 2;
LABEL_51:
  xpc_object_t v28 = xpc_dictionary_create(0, 0, 0);
  if (v28 || (xpc_object_t v28 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C8792D30](v28) == MEMORY[0x1E4F14590])
    {
      xpc_retain(v28);
      xpc_object_t v29 = v28;
    }
    else
    {
      xpc_object_t v29 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v29 = xpc_null_create();
    xpc_object_t v28 = 0;
  }
  xpc_release(v28);
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    long long v30 = &__dst;
  }
  else {
    long long v30 = (std::string *)__dst.__r_.__value_.__r.__words[0];
  }
  xpc_object_t v31 = xpc_string_create((const char *)v30);
  if (!v31) {
    xpc_object_t v31 = xpc_null_create();
  }
  xpc_dictionary_set_value(v29, (const char *)*MEMORY[0x1E4F4CA98], v31);
  xpc_object_t v32 = xpc_null_create();
  xpc_release(v31);
  xpc_release(v32);
  xpc_object_t v33 = xpc_int64_create(v18);
  if (!v33) {
    xpc_object_t v33 = xpc_null_create();
  }
  xpc_dictionary_set_value(v29, (const char *)*MEMORY[0x1E4F4C180], v33);
  xpc_object_t v34 = xpc_null_create();
  xpc_release(v33);
  xpc_release(v34);
  Timestamp::asString((uint64_t)buf, 0, 9, v48);
  if (SHIBYTE(v48[2]) >= 0) {
    long long v35 = v48;
  }
  else {
    long long v35 = (void **)v48[0];
  }
  xpc_object_t v36 = xpc_string_create((const char *)v35);
  if (!v36) {
    xpc_object_t v36 = xpc_null_create();
  }
  xpc_dictionary_set_value(v29, (const char *)*MEMORY[0x1E4F4C4C8], v36);
  xpc_object_t v37 = xpc_null_create();
  xpc_release(v36);
  xpc_release(v37);
  if (SHIBYTE(v48[2]) < 0) {
    operator delete(v48[0]);
  }
  int v38 = (const void *)*MEMORY[0x1E4F4C748];
  size_t v39 = strlen((const char *)*MEMORY[0x1E4F4C748]);
  if (v39 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v40 = (void *)v39;
  if (v39 >= 0x17)
  {
    uint64_t v42 = (v39 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v39 | 7) != 0x17) {
      uint64_t v42 = v39 | 7;
    }
    uint64_t v43 = v42 + 1;
    uint64_t v41 = operator new(v42 + 1);
    v48[1] = v40;
    v48[2] = (void *)(v43 | 0x8000000000000000);
    v48[0] = v41;
LABEL_81:
    memmove(v41, v38, (size_t)v40);
    *((unsigned char *)v40 + (void)v41) = 0;
    xpc_object_t object = v29;
    if (v29) {
      goto LABEL_77;
    }
    goto LABEL_82;
  }
  HIBYTE(v48[2]) = v39;
  uint64_t v41 = v48;
  if (v39) {
    goto LABEL_81;
  }
  LOBYTE(v48[0]) = 0;
  xpc_object_t object = v29;
  if (v29)
  {
LABEL_77:
    xpc_retain(v29);
    goto LABEL_83;
  }
LABEL_82:
  xpc_object_t object = xpc_null_create();
LABEL_83:
  size_t v44 = 0;
  Service::runCommand(a1, (uint64_t)v48, &object, &v44);
  xpc_release(object);
  xpc_object_t object = 0;
  if (SHIBYTE(v48[2]) < 0) {
    operator delete(v48[0]);
  }
  xpc_release(v29);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)buf, *(void **)&buf[8]);
}

void sub_1C5921798(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, xpc_object_t object, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  MEMORY[0x1C8791160](&a24);
  if (a31 < 0)
  {
    operator delete(a26);
    std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy(v31 - 96, *(void **)(v31 - 88));
    _Unwind_Resume(a1);
  }
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy(v31 - 96, *(void **)(v31 - 88));
  _Unwind_Resume(a1);
}

void ___ZN12TraceManager4initEv_block_invoke_2(uint64_t a1)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(void *)(a1 + 32);
  unint64_t v2 = (const void *)*MEMORY[0x1E4F4F910];
  size_t v3 = strlen((const char *)*MEMORY[0x1E4F4F910]);
  if (v3 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v4 = v3;
  if (v3 >= 0x17)
  {
    uint64_t v6 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17) {
      uint64_t v6 = v3 | 7;
    }
    uint64_t v7 = v6 + 1;
    p_p = operator new(v6 + 1);
    *(void *)&long long v19 = v4;
    *((void *)&v19 + 1) = v7 | 0x8000000000000000;
    std::string __p = p_p;
    goto LABEL_8;
  }
  HIBYTE(v19) = v3;
  p_p = &__p;
  if (v3) {
LABEL_8:
  }
    memmove(p_p, v2, v4);
  *((unsigned char *)p_p + v4) = 0;
  uint64_t v8 = (config::hw *)support::fs::removeDirContents((const char *)&__p, 0);
  if (SHIBYTE(v19) < 0) {
    operator delete(__p);
  }
  if (config::hw::watch(v8)
    && (TelephonyUtilIsInternalBuild() & 1) == 0
    && (TelephonyUtilIsCarrierBuild() & 1) == 0)
  {
    CFDictionaryRef v9 = (const void *)*MEMORY[0x1E4F4F928];
    size_t v10 = strlen((const char *)*MEMORY[0x1E4F4F928]);
    if (v10 > 0x7FFFFFFFFFFFFFF7) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    size_t v11 = v10;
    if (v10 >= 0x17)
    {
      uint64_t v13 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v10 | 7) != 0x17) {
        uint64_t v13 = v10 | 7;
      }
      uint64_t v14 = v13 + 1;
      size_t v12 = operator new(v13 + 1);
      *(void *)&long long v19 = v11;
      *((void *)&v19 + 1) = v14 | 0x8000000000000000;
      std::string __p = v12;
    }
    else
    {
      HIBYTE(v19) = v10;
      size_t v12 = &__p;
      if (!v10) {
        goto LABEL_22;
      }
    }
    memmove(v12, v9, v11);
LABEL_22:
    *((unsigned char *)v12 + v11) = 0;
    int v15 = support::fs::removeDirContents((const char *)&__p, 0x708uLL);
    if (SHIBYTE(v19) < 0) {
      operator delete(__p);
    }
    uint64_t v16 = *(NSObject **)(v1 + 88);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v17 = "failed";
      if (v15) {
        uint64_t v17 = "success";
      }
      std::string __p = (void *)0x1E04000202;
      LOWORD(v19) = 2080;
      *(void *)((char *)&v19 + 2) = v17;
      _os_log_impl(&dword_1C5767000, v16, OS_LOG_TYPE_DEFAULT, "#I Deleting telephony log files older than %d mins %s", (uint8_t *)&__p, 0x12u);
    }
  }
}

void sub_1C5921B04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void TraceManager::setupDumpLogsIndication_sync(NSObject **this)
{
  if (!capabilities::trace::supportsDumpLogIndication((capabilities::trace *)this)) {
    return;
  }
  unint64_t v13 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v14 = (std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL;
  unint64_t v2 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  uint64_t v3 = off_1EBBDD2A0;
  if (!off_1EBBDD2A0)
  {
    CommandDriverFactory::create_default_global((uint64_t *)buf, v2);
    long long v4 = *(_OWORD *)buf;
    memset(buf, 0, sizeof(buf));
    uint64_t v5 = (std::__shared_weak_count *)*(&off_1EBBDD2A0 + 1);
    off_1EBBDD2A0 = v4;
    if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    uint64_t v6 = *(std::__shared_weak_count **)&buf[8];
    if (*(void *)&buf[8]
      && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
    uint64_t v3 = off_1EBBDD2A0;
  }
  uint64_t v7 = (std::__shared_weak_count *)*(&off_1EBBDD2A0 + 1);
  if (*(&off_1EBBDD2A0 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDD2A0 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(unint64_t *__return_ptr, uint64_t))(*(void *)v3 + 16))(&v11, v3);
  unint64_t v13 = 0;
  uint64_t v14 = 0;
  if (v12)
  {
    uint64_t v14 = std::__shared_weak_count::lock(v12);
    if (v14) {
      unint64_t v13 = v11;
    }
    if (v12) {
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    unint64_t v8 = v13;
    if (v13) {
      goto LABEL_20;
    }
  }
  else
  {
    unint64_t v8 = v13;
    if (v13)
    {
LABEL_20:
      CFDictionaryRef v9 = this[11];
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl(&dword_1C5767000, v9, OS_LOG_TYPE_DEFAULT, "#I Enabling Dump logs indication", buf, 2u);
      }
      (*(void (**)(unint64_t))(*(void *)v8 + 200))(v8);
    }
  }
  size_t v10 = v14;
  if (v14)
  {
    if (!atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
}

void sub_1C5921DC4(_Unwind_Exception *a1)
{
}

void sub_1C5921DE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1C5921DF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

const char *TraceManager::getName(TraceManager *this)
{
  return "trace.mgr";
}

char *TraceManager::getShutdownStages@<X0>(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t result = (char *)operator new(3uLL);
  a1[1] = result + 3;
  a1[2] = result + 3;
  *(_WORD *)uint64_t result = 512;
  result[2] = 3;
  *a1 = result;
  return result;
}

void TraceManager::shutdown(uint64_t a1, int a2, NSObject **a3)
{
  if (a2 == 3)
  {
    uint64_t v6 = (uint64_t *)(a1 + 120);
    v10[0] = MEMORY[0x1E4F143A8];
    v10[1] = 1174405120;
    _DWORD v10[2] = ___ZN12TraceManager8shutdownE13ShutdownStageN8dispatch13group_sessionE_block_invoke_14;
    v10[3] = &__block_descriptor_tmp_17_3;
    uint64_t v7 = *a3;
    v10[4] = a1;
    dispatch_group_t group = v7;
    if (v7)
    {
      dispatch_retain(v7);
      dispatch_group_enter(group);
    }
    ctu::SharedSynchronizable<TraceManager>::execute_wrapped(v6, (uint64_t)v10);
    if (group)
    {
      dispatch_group_leave(group);
      uint64_t v5 = group;
      if (group) {
        goto LABEL_18;
      }
    }
  }
  else
  {
    if (a2 != 2)
    {
      if (a2) {
        return;
      }
      uint64_t v3 = (uint64_t *)(a1 + 120);
      v14[0] = MEMORY[0x1E4F143A8];
      v14[1] = 1174405120;
      v14[2] = ___ZN12TraceManager8shutdownE13ShutdownStageN8dispatch13group_sessionE_block_invoke;
      v14[3] = &__block_descriptor_tmp_9_4;
      long long v4 = *a3;
      v14[4] = a1;
      dispatch_group_t v15 = v4;
      if (v4)
      {
        dispatch_retain(v4);
        dispatch_group_enter(v15);
      }
      ctu::SharedSynchronizable<TraceManager>::execute_wrapped(v3, (uint64_t)v14);
      if (!v15) {
        return;
      }
      dispatch_group_leave(v15);
      uint64_t v5 = v15;
      if (!v15) {
        return;
      }
LABEL_18:
      dispatch_release(v5);
      return;
    }
    unint64_t v8 = (uint64_t *)(a1 + 120);
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 1174405120;
    _DWORD v12[2] = ___ZN12TraceManager8shutdownE13ShutdownStageN8dispatch13group_sessionE_block_invoke_10;
    v12[3] = &__block_descriptor_tmp_13_6;
    CFDictionaryRef v9 = *a3;
    v12[4] = a1;
    dispatch_group_t object = v9;
    if (v9)
    {
      dispatch_retain(v9);
      dispatch_group_enter(object);
    }
    ctu::SharedSynchronizable<TraceManager>::execute_wrapped(v8, (uint64_t)v12);
    if (object)
    {
      dispatch_group_leave(object);
      uint64_t v5 = object;
      if (object) {
        goto LABEL_18;
      }
    }
  }
}

void ___ZN12TraceManager8shutdownE13ShutdownStageN8dispatch13group_sessionE_block_invoke(uint64_t a1)
{
  unint64_t v2 = *(void **)(a1 + 32);
  xpc_object_t v3 = xpc_null_create();
  uint64_t v4 = *MEMORY[0x1E4F47130];
  uint64_t v5 = *(NSObject **)(a1 + 40);
  uint64_t v7 = v5;
  xpc_object_t object = v3;
  if (v5)
  {
    dispatch_retain(v5);
    dispatch_group_enter(v5);
  }
  v6[0] = 0;
  v6[1] = 0;
  TraceManager::runOnHelper_sync(v2, (const char *)9, v4, 0x1F40u, 0, &object, &v7, v6);
  if (v5)
  {
    dispatch_group_leave(v5);
    dispatch_release(v5);
  }
  xpc_release(object);
}

void sub_1C59220F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, xpc_object_t object)
{
  dispatch::callback<void({block_pointer})(TelephonyXPC::Result,xpc::dict)>::~callback((uint64_t)&a9);
  if (v12)
  {
    dispatch_group_leave(v12);
    dispatch_release(v12);
  }
  xpc_release(object);
  _Unwind_Resume(a1);
}

void TraceManager::runOnHelper_sync(void *a1, const char *a2, uint64_t a3, unsigned int a4, char a5, xpc_object_t *a6, NSObject **a7, void **a8)
{
  int v13 = (int)a2;
  uint64_t v57 = *MEMORY[0x1E4F143B8];
  if ((a5 & 1) == 0
    && !prop::tracesettings::enabled((prop::tracesettings *)*MEMORY[0x1E4F4C1F8], a2)
    && !prop::tracesettings::enabled((prop::tracesettings *)*MEMORY[0x1E4F4D338], v15)
    && !prop::tracesettings::enabled((prop::tracesettings *)*MEMORY[0x1E4F4C288], v16))
  {
    return;
  }
  uint64_t v17 = a1[11];
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 136315394;
    *(void *)&uint8_t buf[4] = abm::helper::asString();
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = a3;
    _os_log_impl(&dword_1C5767000, v17, OS_LOG_TYPE_DEFAULT, "#I Running helper action: %s:%s", buf, 0x16u);
  }
  memset(buf, 170, 16);
  GetABMLogServer(&v54);
  abm::HelperClient::create();
  int64_t v18 = v55;
  if (v55 && !atomic_fetch_add(&v55->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
  uint64_t v19 = MEMORY[0x1C8792D30](*a6);
  uint64_t v20 = MEMORY[0x1E4F14590];
  if (v19 != MEMORY[0x1E4F14590])
  {
    xpc_object_t v21 = xpc_dictionary_create(0, 0, 0);
    if (v21 || (xpc_object_t v21 = xpc_null_create()) != 0)
    {
      if (MEMORY[0x1C8792D30](v21) == v20)
      {
        xpc_retain(v21);
        xpc_object_t v22 = v21;
      }
      else
      {
        xpc_object_t v22 = xpc_null_create();
      }
    }
    else
    {
      xpc_object_t v22 = xpc_null_create();
      xpc_object_t v21 = 0;
    }
    xpc_release(v21);
    xpc_object_t v23 = xpc_null_create();
    xpc_object_t v24 = *a6;
    *a6 = v22;
    xpc_release(v24);
    xpc_release(v23);
  }
  if (a4)
  {
    xpc_object_t v25 = xpc_int64_create(a4);
    if (!v25) {
      xpc_object_t v25 = xpc_null_create();
    }
    xpc_dictionary_set_value(*a6, (const char *)*MEMORY[0x1E4F470A0], v25);
    xpc_object_t v26 = xpc_null_create();
    xpc_release(v25);
    xpc_release(v26);
  }
  if (!*a8 || !a8[1])
  {
    xpc_object_t v28 = (std::__shared_weak_count *)a1[16];
    if (!v28 || (uint64_t v29 = a1[15], (v30 = std::__shared_weak_count::lock(v28)) == 0)) {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    uint64_t v31 = v30;
    p_shared_weak_owners = &v30->__shared_weak_owners_;
    atomic_fetch_add_explicit(&v30->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v30->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v31);
    }
    unint64_t v49 = 0xAAAAAAAAAAAAAAAALL;
    unint64_t v50 = 0xAAAAAAAAAAAAAAAALL;
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 1174405120;
    aBlock[2] = ___ZN12TraceManager16runOnHelper_syncEN3abm6helper6TaskIDEPKcjbN3xpc4dictEN8dispatch13group_sessionENS7_8callbackIU13block_pointerFvN12TelephonyXPC6ResultES6_EEE_block_invoke;
    aBlock[3] = &__block_descriptor_tmp_100_2;
    aBlock[4] = a1;
    aBlock[5] = v29;
    uint64_t v43 = v31;
    atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
    xpc_object_t v33 = *a7;
    dispatch_group_t group = v33;
    if (v33)
    {
      dispatch_retain(v33);
      dispatch_group_enter(group);
    }
    uint64_t v45 = *(void *)buf;
    xpc_object_t v46 = *(std::__shared_weak_count **)&buf[8];
    if (*(void *)&buf[8]) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 1uLL, memory_order_relaxed);
    }
    int v48 = v13;
    uint64_t v47 = a3;
    xpc_object_t v34 = _Block_copy(aBlock);
    long long v35 = a1[17];
    if (v35) {
      dispatch_retain(v35);
    }
    unint64_t v49 = (unint64_t)v34;
    unint64_t v50 = (unint64_t)v35;
    xpc_object_t v41 = *a6;
    if (*a6)
    {
      xpc_retain(*a6);
      if (v34) {
        goto LABEL_39;
      }
    }
    else
    {
      xpc_object_t v41 = xpc_null_create();
      if (v34)
      {
LABEL_39:
        size_t v39 = _Block_copy(v34);
        xpc_object_t object = v35;
        if (!v35) {
          goto LABEL_41;
        }
        goto LABEL_40;
      }
    }
    size_t v39 = 0;
    xpc_object_t object = v35;
    if (!v35)
    {
LABEL_41:
      abm::HelperClient::perform();
      if (object) {
        dispatch_release(object);
      }
      if (v39) {
        _Block_release(v39);
      }
      xpc_release(v41);
      if (v35) {
        dispatch_release(v35);
      }
      if (v34) {
        _Block_release(v34);
      }
      xpc_object_t v36 = v46;
      if (v46 && !atomic_fetch_add(&v46->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v36);
      }
      if (group)
      {
        dispatch_group_leave(group);
        if (group) {
          dispatch_release(group);
        }
      }
      if (v43) {
        std::__shared_weak_count::__release_weak(v43);
      }
      std::__shared_weak_count::__release_weak(v31);
      xpc_object_t v37 = *(std::__shared_weak_count **)&buf[8];
      if (*(void *)&buf[8]) {
        goto LABEL_71;
      }
      return;
    }
LABEL_40:
    dispatch_retain(v35);
    goto LABEL_41;
  }
  xpc_object_t v53 = *a6;
  if (!v53)
  {
    xpc_object_t v53 = xpc_null_create();
    uint64_t v27 = *a8;
    if (!*a8) {
      goto LABEL_64;
    }
    goto LABEL_63;
  }
  xpc_retain(v53);
  uint64_t v27 = *a8;
  if (*a8) {
LABEL_63:
  }
    uint64_t v27 = _Block_copy(v27);
LABEL_64:
  int v38 = a8[1];
  size_t v51 = v27;
  dispatch_object_t v52 = v38;
  if (v38) {
    dispatch_retain(v38);
  }
  abm::HelperClient::perform();
  if (v52) {
    dispatch_release(v52);
  }
  if (v51) {
    _Block_release(v51);
  }
  xpc_release(v53);
  xpc_object_t v53 = 0;
  xpc_object_t v37 = *(std::__shared_weak_count **)&buf[8];
  if (*(void *)&buf[8])
  {
LABEL_71:
    if (!atomic_fetch_add(&v37->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
}

void sub_1C59226D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, xpc_object_t object, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18, dispatch_group_t group, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,char a26)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void sub_1C5922800(_Unwind_Exception *a1)
{
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v1 - 112);
  _Unwind_Resume(a1);
}

void ___ZN12TraceManager8shutdownE13ShutdownStageN8dispatch13group_sessionE_block_invoke_10(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  xpc_object_t v3 = xpc_dictionary_create(0, 0, 0);
  if (v3 || (xpc_object_t v3 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C8792D30](v3) == MEMORY[0x1E4F14590])
    {
      xpc_retain(v3);
      xpc_object_t v4 = v3;
    }
    else
    {
      xpc_object_t v4 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v4 = xpc_null_create();
    xpc_object_t v3 = 0;
  }
  xpc_release(v3);
  uint64_t v5 = (const char *)(v2 + 168);
  if (*(char *)(v2 + 191) < 0) {
    uint64_t v5 = *(const char **)v5;
  }
  xpc_object_t v6 = xpc_string_create(v5);
  if (!v6) {
    xpc_object_t v6 = xpc_null_create();
  }
  xpc_dictionary_set_value(v4, (const char *)*MEMORY[0x1E4F4C488], v6);
  xpc_object_t v7 = xpc_null_create();
  xpc_release(v6);
  xpc_release(v7);
  xpc_object_t object = v4;
  if (v4)
  {
    xpc_retain(v4);
    uint64_t v8 = *MEMORY[0x1E4F471A8];
    CFDictionaryRef v9 = *(NSObject **)(a1 + 40);
    unint64_t v11 = v9;
    if (!v9) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  xpc_object_t object = xpc_null_create();
  uint64_t v8 = *MEMORY[0x1E4F471A8];
  CFDictionaryRef v9 = *(NSObject **)(a1 + 40);
  unint64_t v11 = v9;
  if (v9)
  {
LABEL_13:
    dispatch_retain(v9);
    dispatch_group_enter(v9);
  }
LABEL_14:
  v10[0] = 0;
  v10[1] = 0;
  TraceManager::runOnHelper_sync((void *)v2, (const char *)9, v8, 0x1388u, 0, &object, &v11, v10);
  if (v9)
  {
    dispatch_group_leave(v9);
    dispatch_release(v9);
  }
  xpc_release(object);
  xpc_object_t object = 0;
  xpc_release(v4);
}

void sub_1C59229CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, xpc_object_t object)
{
  dispatch::callback<void({block_pointer})(TelephonyXPC::Result,xpc::dict)>::~callback((uint64_t)&a9);
  if (v13)
  {
    dispatch_group_leave(v13);
    dispatch_release(v13);
  }
  xpc_release(object);
  xpc_object_t object = 0;
  xpc_release(v12);
  _Unwind_Resume(a1);
}

void ___ZN12TraceManager8shutdownE13ShutdownStageN8dispatch13group_sessionE_block_invoke_14(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(std::__shared_weak_count **)(v1 + 160);
  *(void *)(v1 + 152) = 0;
  *(void *)(v1 + 160) = 0;
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
}

void TraceManager::initialize(uint64_t *a1, NSObject **a2)
{
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 1174405120;
  uint64_t v11[2] = ___ZN12TraceManager10initializeEN8dispatch13group_sessionE_block_invoke;
  v11[3] = &__block_descriptor_tmp_45_1;
  xpc_object_t v3 = *a2;
  v11[4] = a1;
  dispatch_group_t group = v3;
  if (v3)
  {
    dispatch_retain(v3);
    dispatch_group_enter(group);
  }
  ctu::SharedSynchronizable<TraceManager>::execute_wrapped(a1 + 15, (uint64_t)v11);
  xpc_object_t v4 = (std::__shared_weak_count *)a1[16];
  if (!v4 || (uint64_t v5 = a1[15], (v6 = std::__shared_weak_count::lock(v4)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  xpc_object_t v7 = v6;
  uint64_t v8 = operator new(8uLL);
  *uint64_t v8 = a1;
  CFDictionaryRef v9 = a1[17];
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  size_t v10 = operator new(0x18uLL);
  void *v10 = v8;
  v10[1] = v5;
  _DWORD v10[2] = v7;
  dispatch_async_f(v9, v10, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<TraceManager>::execute_wrapped<TraceManager::initialize(dispatch::group_session)::$_0>(TraceManager::initialize(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<TraceManager::initialize(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<TraceManager::initialize(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke);
  if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  if (group)
  {
    dispatch_group_leave(group);
    if (group) {
      dispatch_release(group);
    }
  }
}

void ___ZN12TraceManager10initializeEN8dispatch13group_sessionE_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(std::__shared_weak_count **)(v1 + 128);
  if (!v2 || (uint64_t v3 = *(void *)(v1 + 120), (v4 = std::__shared_weak_count::lock(v2)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v5 = v4;
  atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v5);
  }
  TraceManager::initTraceHelper_sync((TraceManager *)v1);
  xpc_object_t v6 = *(std::__shared_weak_count **)(v1 + 128);
  if (!v6 || (uint64_t v7 = *(void *)(v1 + 120), (v8 = std::__shared_weak_count::lock(v6)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  CFDictionaryRef v9 = v8;
  size_t v10 = (const char **)MEMORY[0x1E4F4CA68];
  atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
  }
  unint64_t v11 = *v10;
  size_t v12 = *(NSObject **)(v1 + 136);
  if (v12) {
    dispatch_retain(*(dispatch_object_t *)(v1 + 136));
  }
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZN12TraceManager10initializeEN8dispatch13group_sessionE_block_invoke_2;
  aBlock[3] = &__block_descriptor_tmp_19;
  aBlock[4] = v1;
  if (v11)
  {
    if (v12)
    {
      int v13 = _Block_copy(aBlock);
      uint64_t v14 = v13;
      dispatch_object_t v54 = v12;
      std::string __dst = (void **)MEMORY[0x1E4F143A8];
      uint64_t v48 = 1174405120;
      unint64_t v49 = (unint64_t)___ZN9analytics29registerCallbackForTimedEventI12TraceManagerEEvPKcNS_9TimerTypeENSt3__18weak_ptrIT_EEN8dispatch5queueEU13block_pointerFvNS5_12basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEE_block_invoke;
      unint64_t v50 = &__block_descriptor_tmp_163;
      uint64_t v51 = v7;
      dispatch_object_t v52 = v9;
      atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      if (v13) {
        dispatch_group_t v15 = _Block_copy(v13);
      }
      else {
        dispatch_group_t v15 = 0;
      }
      xpc_object_t v53 = v15;
      analytics::registerCallbackForTimedEventImpl(v11);
      if (v54) {
        dispatch_release(v54);
      }
      if (v53) {
        _Block_release(v53);
      }
      if (v52) {
        std::__shared_weak_count::__release_weak(v52);
      }
      if (v14) {
        _Block_release(v14);
      }
    }
  }
  else if (v12)
  {
    dispatch_release(v12);
  }
  std::__shared_weak_count::__release_weak(v9);
  uint64_t v16 = (const void *)*MEMORY[0x1E4F4D070];
  size_t v17 = strlen((const char *)*MEMORY[0x1E4F4D070]);
  if (v17 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v18 = v17;
  if (v17 >= 0x17)
  {
    uint64_t v20 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v17 | 7) != 0x17) {
      uint64_t v20 = v17 | 7;
    }
    uint64_t v21 = v20 + 1;
    p_dst = (void **)operator new(v20 + 1);
    uint64_t v48 = v18;
    unint64_t v49 = v21 | 0x8000000000000000;
    std::string __dst = p_dst;
    goto LABEL_33;
  }
  HIBYTE(v49) = v17;
  p_dst = (void **)&__dst;
  if (v17) {
LABEL_33:
  }
    memmove(p_dst, v16, v18);
  *((unsigned char *)p_dst + v18) = 0;
  v43[0] = MEMORY[0x1E4F143A8];
  v43[1] = 1174405120;
  void v43[2] = ___ZN12TraceManager10initializeEN8dispatch13group_sessionE_block_invoke_3;
  v43[3] = &__block_descriptor_tmp_26;
  v43[4] = v1;
  v43[5] = v3;
  size_t v44 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  xpc_object_t v22 = _Block_copy(v43);
  uint64_t v45 = v22;
  Service::registerCommandHandler(v1, (uint64_t)&__dst, &v45);
  if (v22) {
    _Block_release(v22);
  }
  if (SHIBYTE(v49) < 0) {
    operator delete(__dst);
  }
  xpc_object_t v23 = (const void *)*MEMORY[0x1E4F4D060];
  size_t v24 = strlen((const char *)*MEMORY[0x1E4F4D060]);
  if (v24 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v25 = v24;
  if (v24 >= 0x17)
  {
    uint64_t v27 = (v24 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v24 | 7) != 0x17) {
      uint64_t v27 = v24 | 7;
    }
    uint64_t v28 = v27 + 1;
    xpc_object_t v26 = (void **)operator new(v27 + 1);
    uint64_t v48 = v25;
    unint64_t v49 = v28 | 0x8000000000000000;
    std::string __dst = v26;
    goto LABEL_45;
  }
  HIBYTE(v49) = v24;
  xpc_object_t v26 = (void **)&__dst;
  if (v24) {
LABEL_45:
  }
    memmove(v26, v23, v25);
  *((unsigned char *)v26 + v25) = 0;
  v40[0] = MEMORY[0x1E4F143A8];
  v40[1] = 1174405120;
  v40[2] = ___ZN12TraceManager10initializeEN8dispatch13group_sessionE_block_invoke_27;
  v40[3] = &__block_descriptor_tmp_36_3;
  uint8_t v40[4] = v1;
  v40[5] = v3;
  xpc_object_t v41 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  uint64_t v29 = _Block_copy(v40);
  uint64_t v42 = v29;
  Service::registerCommandHandler(v1, (uint64_t)&__dst, &v42);
  if (v29) {
    _Block_release(v29);
  }
  if (SHIBYTE(v49) < 0) {
    operator delete(__dst);
  }
  long long v30 = (const void *)*MEMORY[0x1E4F4CF48];
  size_t v31 = strlen((const char *)*MEMORY[0x1E4F4CF48]);
  if (v31 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v32 = v31;
  if (v31 >= 0x17)
  {
    uint64_t v34 = (v31 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v31 | 7) != 0x17) {
      uint64_t v34 = v31 | 7;
    }
    uint64_t v35 = v34 + 1;
    xpc_object_t v33 = (void **)operator new(v34 + 1);
    uint64_t v48 = v32;
    unint64_t v49 = v35 | 0x8000000000000000;
    std::string __dst = v33;
    goto LABEL_57;
  }
  HIBYTE(v49) = v31;
  xpc_object_t v33 = (void **)&__dst;
  if (v31) {
LABEL_57:
  }
    memmove(v33, v30, v32);
  *((unsigned char *)v33 + v32) = 0;
  v37[0] = MEMORY[0x1E4F143A8];
  v37[1] = 1174405120;
  v37[2] = ___ZN12TraceManager10initializeEN8dispatch13group_sessionE_block_invoke_37;
  v37[3] = &__block_descriptor_tmp_42_2;
  v37[4] = v1;
  v37[5] = v3;
  int v38 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  xpc_object_t v36 = _Block_copy(v37);
  size_t v39 = v36;
  Service::registerCommandHandler(v1, (uint64_t)&__dst, &v39);
  if (v36) {
    _Block_release(v36);
  }
  if (SHIBYTE(v49) < 0) {
    operator delete(__dst);
  }
  if (v38) {
    std::__shared_weak_count::__release_weak(v38);
  }
  if (v41) {
    std::__shared_weak_count::__release_weak(v41);
  }
  if (v44) {
    std::__shared_weak_count::__release_weak(v44);
  }
  std::__shared_weak_count::__release_weak(v5);
}

void sub_1C5923214(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,std::__shared_weak_count *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,std::__shared_weak_count *a32)
{
  xpc_object_t v37 = *(const void **)(v35 - 112);
  if (v37) {
    _Block_release(v37);
  }
  int v38 = *(std::__shared_weak_count **)(v35 - 120);
  if (v38)
  {
    std::__shared_weak_count::__release_weak(v38);
    size_t v39 = *(NSObject **)(v35 - 104);
    if (!v39)
    {
LABEL_5:
      if (!v34)
      {
LABEL_10:
        std::__shared_weak_count::__release_weak(v33);
        std::__shared_weak_count::__release_weak(v32);
        _Unwind_Resume(a1);
      }
LABEL_9:
      _Block_release(v34);
      goto LABEL_10;
    }
  }
  else
  {
    size_t v39 = *(NSObject **)(v35 - 104);
    if (!v39) {
      goto LABEL_5;
    }
  }
  dispatch_release(v39);
  if (!v34) {
    goto LABEL_10;
  }
  goto LABEL_9;
}

void sub_1C592337C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_weak(v1);
  _Unwind_Resume(a1);
}

void TraceManager::initTraceHelper_sync(TraceManager *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 16);
  if (!v2 || (uint64_t v3 = *((void *)this + 15), (v4 = std::__shared_weak_count::lock(v2)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v5 = v4;
  p_shared_weak_owners = &v4->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v5);
  }
  dispatch_group_t v15 = (const void *)0xAAAAAAAAAAAAAAAALL;
  dispatch_object_t v16 = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN12TraceManager20initTraceHelper_syncEv_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_99_0;
  aBlock[4] = this;
  void aBlock[5] = v3;
  uint64_t v14 = v5;
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  uint64_t v7 = _Block_copy(aBlock);
  uint64_t v8 = *((void *)this + 17);
  if (v8) {
    dispatch_retain(*((dispatch_object_t *)this + 17));
  }
  dispatch_group_t v15 = v7;
  dispatch_object_t v16 = v8;
  if (!v7)
  {
    size_t v10 = 0;
    xpc_object_t object = v8;
    if (!v8) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
  size_t v10 = _Block_copy(v7);
  xpc_object_t object = v8;
  if (v8) {
LABEL_9:
  }
    dispatch_retain(v8);
LABEL_10:
  abm::HelperClient::registerForHelperReady();
  CFDictionaryRef v9 = (std::__shared_weak_count *)*((void *)this + 31);
  *((_OWORD *)this + 15) = v12;
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  if (object) {
    dispatch_release(object);
  }
  if (v10) {
    _Block_release(v10);
  }
  if (v16) {
    dispatch_release(v16);
  }
  if (v15) {
    _Block_release(v15);
  }
  if (v14) {
    std::__shared_weak_count::__release_weak(v14);
  }
  std::__shared_weak_count::__release_weak(v5);
}

void sub_1C59235E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::__shared_weak_count *a20)
{
  dispatch::callback<void({block_pointer})(TelephonyXPC::Result,xpc::dict)>::~callback((uint64_t)&a9);
  dispatch::callback<void({block_pointer})(TelephonyXPC::Result,xpc::dict)>::~callback(v21 - 48);
  if (a20) {
    std::__shared_weak_count::__release_weak(a20);
  }
  std::__shared_weak_count::__release_weak(v20);
  _Unwind_Resume(a1);
}

void ___ZN12TraceManager10initializeEN8dispatch13group_sessionE_block_invoke_2(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  xpc_object_t v2 = xpc_dictionary_create(0, 0, 0);
  uint64_t v3 = MEMORY[0x1E4F14590];
  if (v2 || (xpc_object_t v2 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C8792D30](v2) == v3)
    {
      xpc_retain(v2);
      xpc_object_t v4 = v2;
    }
    else
    {
      xpc_object_t v4 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v4 = xpc_null_create();
    xpc_object_t v2 = 0;
  }
  xpc_release(v2);
  xpc_object_t v5 = xpc_string_create((const char *)*MEMORY[0x1E4F4C1F8]);
  if (!v5) {
    xpc_object_t v5 = xpc_null_create();
  }
  xpc_dictionary_set_value(v4, (const char *)*MEMORY[0x1E4F4C1A0], v5);
  xpc_object_t v6 = xpc_null_create();
  xpc_release(v5);
  xpc_release(v6);
  uint64_t v7 = (const char *)*MEMORY[0x1E4F4C2D8];
  xpc_object_t v8 = xpc_string_create((const char *)*MEMORY[0x1E4F4C2D8]);
  if (!v8) {
    xpc_object_t v8 = xpc_null_create();
  }
  xpc_dictionary_set_value(v4, (const char *)*MEMORY[0x1E4F4C6A8], v8);
  xpc_object_t v9 = xpc_null_create();
  xpc_release(v8);
  xpc_release(v9);
  __val[0] = 0;
  size_t v10 = strlen(v7);
  if (v10 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  unint64_t v11 = (void *)v10;
  if (v10 >= 0x17)
  {
    uint64_t v13 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v10 | 7) != 0x17) {
      uint64_t v13 = v10 | 7;
    }
    uint64_t v14 = v13 + 1;
    long long v12 = (xpc_object_t *)operator new(v13 + 1);
    __dst[1] = v11;
    unint64_t v33 = v14 | 0x8000000000000000;
    __dst[0] = v12;
    goto LABEL_18;
  }
  HIBYTE(v33) = v10;
  long long v12 = __dst;
  if (v10) {
LABEL_18:
  }
    memmove(v12, v7, (size_t)v11);
  *((unsigned char *)v11 + (void)v12) = 0;
  memset(&__val[1], 0, 24);
  if (prop::bbtrace::get((char *)__dst, (uint64_t)&__val[1])) {
    util::convert<BOOL>((const std::string *)&__val[1], __val, 0);
  }
  if (__val[24] < 0)
  {
    operator delete(*(void **)&__val[1]);
    if ((SHIBYTE(v33) & 0x80000000) == 0) {
      goto LABEL_23;
    }
  }
  else if ((SHIBYTE(v33) & 0x80000000) == 0)
  {
    goto LABEL_23;
  }
  operator delete(__dst[0]);
LABEL_23:
  std::to_string((std::string *)&__val[1], __val[0]);
  if (__val[24] >= 0) {
    dispatch_group_t v15 = (const char *)&__val[1];
  }
  else {
    dispatch_group_t v15 = *(const char **)&__val[1];
  }
  xpc_object_t v16 = xpc_string_create(v15);
  if (!v16) {
    xpc_object_t v16 = xpc_null_create();
  }
  xpc_dictionary_set_value(v4, (const char *)*MEMORY[0x1E4F4C800], v16);
  xpc_object_t v17 = xpc_null_create();
  xpc_release(v16);
  xpc_release(v17);
  if (__val[24] < 0) {
    operator delete(*(void **)&__val[1]);
  }
  abm::asString();
  if (__val[24] >= 0) {
    size_t v18 = (const char *)&__val[1];
  }
  else {
    size_t v18 = *(const char **)&__val[1];
  }
  xpc_object_t v19 = xpc_string_create(v18);
  if (!v19) {
    xpc_object_t v19 = xpc_null_create();
  }
  xpc_dictionary_set_value(v4, (const char *)*MEMORY[0x1E4F4D120], v19);
  xpc_object_t v20 = xpc_null_create();
  xpc_release(v19);
  xpc_release(v20);
  if (__val[24] < 0)
  {
    operator delete(*(void **)&__val[1]);
    xpc_object_t object = v4;
    __dst[0] = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
    uint64_t v21 = *(TraceCAReporter **)(v1 + 304);
    if (v4) {
      goto LABEL_37;
    }
  }
  else
  {
    xpc_object_t object = v4;
    __dst[0] = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
    uint64_t v21 = *(TraceCAReporter **)(v1 + 304);
    if (v4)
    {
LABEL_37:
      xpc_retain(v4);
      goto LABEL_42;
    }
  }
  xpc_object_t object = xpc_null_create();
LABEL_42:
  TraceCAReporter::prepTraceStats(v21, &object, __dst);
  xpc_release(object);
  xpc_object_t object = 0;
  if (MEMORY[0x1C8792D30](__dst[0]) != v3) {
    goto LABEL_55;
  }
  xpc_object_t v22 = (const void *)*MEMORY[0x1E4F4C738];
  size_t v23 = strlen((const char *)*MEMORY[0x1E4F4C738]);
  if (v23 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v24 = v23;
  if (v23 >= 0x17)
  {
    uint64_t v27 = (v23 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v23 | 7) != 0x17) {
      uint64_t v27 = v23 | 7;
    }
    uint64_t v28 = v27 + 1;
    size_t v25 = (BOOL *)operator new(v27 + 1);
    *(void *)&__val[9] = v24;
    *(void *)&__val[17] = v28 | 0x8000000000000000;
    *(void *)&__val[1] = v25;
LABEL_51:
    memmove(v25, v22, v24);
    v25[v24] = 0;
    xpc_object_t v26 = __dst[0];
    xpc_object_t v30 = __dst[0];
    if (__dst[0]) {
      goto LABEL_47;
    }
    goto LABEL_52;
  }
  __val[24] = v23;
  size_t v25 = &__val[1];
  if (v23) {
    goto LABEL_51;
  }
  __val[1] = 0;
  xpc_object_t v26 = __dst[0];
  xpc_object_t v30 = __dst[0];
  if (__dst[0])
  {
LABEL_47:
    xpc_retain(v26);
    goto LABEL_53;
  }
LABEL_52:
  xpc_object_t v26 = xpc_null_create();
  xpc_object_t v30 = v26;
LABEL_53:
  uint64_t v29 = 0;
  Service::runCommand(v1, (uint64_t)&__val[1], &v30, &v29);
  xpc_release(v26);
  xpc_object_t v30 = 0;
  if (__val[24] < 0) {
    operator delete(*(void **)&__val[1]);
  }
LABEL_55:
  xpc_release(__dst[0]);
  xpc_release(v4);
}

void sub_1C5923A88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, xpc_object_t a11, xpc_object_t object, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  xpc_release(v25);
  if (a24 < 0) {
    operator delete(__p);
  }
  xpc_release(object);
  xpc_release(v24);
  _Unwind_Resume(a1);
}

void ___ZN12TraceManager10initializeEN8dispatch13group_sessionE_block_invoke_3(void *a1, void **a2, void **a3)
{
  xpc_object_t v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    uint64_t v7 = a1[4];
    xpc_object_t v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      xpc_object_t v9 = v8;
      uint64_t v10 = a1[5];
      if (!v10) {
        goto LABEL_14;
      }
      v15[0] = MEMORY[0x1E4F143A8];
      v15[1] = 1174405120;
      void v15[2] = ___ZN12TraceManager10initializeEN8dispatch13group_sessionE_block_invoke_4;
      v15[3] = &__block_descriptor_tmp_24_5;
      unint64_t v11 = *a2;
      v15[4] = v7;
      xpc_object_t object = v11;
      if (v11)
      {
        xpc_retain(v11);
        long long v12 = *a3;
        if (!*a3) {
          goto LABEL_9;
        }
      }
      else
      {
        xpc_object_t object = xpc_null_create();
        long long v12 = *a3;
        if (!*a3)
        {
LABEL_9:
          aBlocuint64_t k = v12;
          uint64_t v18 = v10;
          xpc_object_t v19 = v9;
          atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
          ctu::SharedSynchronizable<TraceManager>::execute_wrapped((uint64_t *)(v7 + 120), (uint64_t)v15);
          uint64_t v13 = v19;
          if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
            std::__shared_weak_count::__release_weak(v13);
            uint64_t v14 = aBlock;
            if (!aBlock) {
              goto LABEL_13;
            }
          }
          else
          {
            uint64_t v14 = aBlock;
            if (!aBlock)
            {
LABEL_13:
              xpc_release(object);
              xpc_object_t object = 0;
LABEL_14:
              if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
                std::__shared_weak_count::__release_weak(v9);
              }
              return;
            }
          }
          _Block_release(v14);
          goto LABEL_13;
        }
      }
      long long v12 = _Block_copy(v12);
      goto LABEL_9;
    }
  }
}

void ___ZN12TraceManager10initializeEN8dispatch13group_sessionE_block_invoke_4(uint64_t a1)
{
  uint64_t v112 = *MEMORY[0x1E4F143B8];
  memset(&v109, 170, sizeof(v109));
  uint64_t v2 = *(void *)(a1 + 32);
  xpc_object_t value = xpc_dictionary_get_value(*(xpc_object_t *)(a1 + 40), (const char *)*MEMORY[0x1E4F4C1A0]);
  v108[0] = value;
  if (value) {
    xpc_retain(value);
  }
  else {
    v108[0] = xpc_null_create();
  }
  memset(buf, 0, sizeof(buf));
  xpc::dyn_cast_or_default();
  xpc_release(v108[0]);
  memset(v108, 170, sizeof(v108));
  xpc_object_t v4 = xpc_dictionary_get_value(*(xpc_object_t *)(a1 + 40), (const char *)*MEMORY[0x1E4F4C6A8]);
  v107[0] = v4;
  if (v4) {
    xpc_retain(v4);
  }
  else {
    v107[0] = xpc_null_create();
  }
  memset(buf, 0, sizeof(buf));
  xpc::dyn_cast_or_default();
  xpc_release(v107[0]);
  memset(v107, 170, sizeof(v107));
  xpc_object_t v5 = xpc_dictionary_get_value(*(xpc_object_t *)(a1 + 40), (const char *)*MEMORY[0x1E4F4C800]);
  v110.__r_.__value_.__r.__words[0] = (std::string::size_type)v5;
  if (v5) {
    xpc_retain(v5);
  }
  else {
    v110.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
  }
  memset(buf, 0, sizeof(buf));
  xpc::dyn_cast_or_default();
  xpc_release(v110.__r_.__value_.__l.__data_);
  xpc_object_t v6 = xpc_dictionary_get_value(*(xpc_object_t *)(a1 + 40), (const char *)*MEMORY[0x1E4F4D180]);
  *(void *)std::string buf = v6;
  if (v6) {
    xpc_retain(v6);
  }
  else {
    *(void *)std::string buf = xpc_null_create();
  }
  int v7 = xpc::dyn_cast_or_default((xpc *)buf, 0);
  xpc_release(*(xpc_object_t *)buf);
  if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v106, v109.__r_.__value_.__l.__data_, v109.__r_.__value_.__l.__size_);
  }
  else {
    std::string v106 = v109;
  }
  char isSupported = abm::trace::isSupported();
  char v9 = isSupported;
  if ((SHIBYTE(v106.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (isSupported) {
      goto LABEL_18;
    }
LABEL_24:
    v110.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
    uint64_t v14 = *(void **)(a1 + 40);
    xpc_object_t object = v14;
    if (v14) {
      xpc_retain(v14);
    }
    else {
      xpc_object_t object = xpc_null_create();
    }
    xpc::bridge((uint64_t *)buf, (xpc *)&object, v15);
    xpc_object_t v19 = *(const void **)buf;
    if (*(void *)buf && (CFTypeID v20 = CFGetTypeID(*(CFTypeRef *)buf), v20 == CFDictionaryGetTypeID()))
    {
      v110.__r_.__value_.__r.__words[0] = (std::string::size_type)v19;
      CFRetain(v19);
      uint64_t v21 = *(const void **)buf;
      if (!*(void *)buf)
      {
LABEL_37:
        xpc_release(object);
        xpc_object_t v22 = (const void *)*MEMORY[0x1E4F4CB20];
        size_t v23 = strlen((const char *)*MEMORY[0x1E4F4CB20]);
        if (v23 > 0x7FFFFFFFFFFFFFF7) {
          std::string::__throw_length_error[abi:ne180100]();
        }
        size_t v24 = (void *)v23;
        if (v23 >= 0x17)
        {
          uint64_t v27 = (v23 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v23 | 7) != 0x17) {
            uint64_t v27 = v23 | 7;
          }
          uint64_t v28 = v27 + 1;
          size_t v25 = (void **)operator new(v27 + 1);
          __dst[1] = v24;
          unint64_t v104 = v28 | 0x8000000000000000;
          __dst[0] = v25;
        }
        else
        {
          HIBYTE(v104) = v23;
          size_t v25 = __dst;
          if (!v23)
          {
            LOBYTE(__dst[0]) = 0;
            xpc_object_t v26 = (const void *)v110.__r_.__value_.__r.__words[0];
            CFTypeRef cf = (CFTypeRef)v110.__r_.__value_.__r.__words[0];
            if (!v110.__r_.__value_.__r.__words[0])
            {
LABEL_47:
              aBlocuint64_t k = 0;
              Service::broadcastEvent(v2, (uint64_t)__dst, &cf, (const void **)&aBlock);
              if (aBlock) {
                _Block_release(aBlock);
              }
              if (cf) {
                CFRelease(cf);
              }
              if (SHIBYTE(v104) < 0)
              {
                operator delete(__dst[0]);
                uint64_t v29 = *(NSObject **)(v2 + 88);
                if (!os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
                {
LABEL_53:
                  if (!*(void *)(a1 + 48)) {
                    goto LABEL_55;
                  }
                  goto LABEL_54;
                }
              }
              else
              {
                uint64_t v29 = *(NSObject **)(v2 + 88);
                if (!os_log_type_enabled(v29, OS_LOG_TYPE_ERROR)) {
                  goto LABEL_53;
                }
              }
              unint64_t v33 = &v109;
              if ((v109.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                unint64_t v33 = (std::string *)v109.__r_.__value_.__r.__words[0];
              }
              *(_DWORD *)std::string buf = 136315138;
              *(void *)&uint8_t buf[4] = v33;
              _os_log_error_impl(&dword_1C5767000, v29, OS_LOG_TYPE_ERROR, "Trace not supported: %s", buf, 0xCu);
              if (!*(void *)(a1 + 48)) {
                goto LABEL_55;
              }
LABEL_54:
              xpc_object_t v30 = xpc_null_create();
              uint64_t v31 = *(void *)(a1 + 48);
              *(void *)std::string buf = v30;
              xpc_object_t v32 = xpc_null_create();
              (*(void (**)(uint64_t, uint64_t, uint8_t *))(v31 + 16))(v31, 3760250884, buf);
              xpc_release(*(xpc_object_t *)buf);
              xpc_release(v32);
LABEL_55:
              if (v26) {
                CFRelease(v26);
              }
LABEL_166:
              if ((SHIBYTE(v107[2]) & 0x80000000) == 0) {
                goto LABEL_167;
              }
              goto LABEL_171;
            }
LABEL_46:
            CFRetain(v26);
            goto LABEL_47;
          }
        }
        memmove(v25, v22, (size_t)v24);
        *((unsigned char *)v24 + (void)v25) = 0;
        xpc_object_t v26 = (const void *)v110.__r_.__value_.__r.__words[0];
        CFTypeRef cf = (CFTypeRef)v110.__r_.__value_.__r.__words[0];
        if (!v110.__r_.__value_.__r.__words[0]) {
          goto LABEL_47;
        }
        goto LABEL_46;
      }
    }
    else
    {
      v110.__r_.__value_.__r.__words[0] = 0;
      uint64_t v21 = *(const void **)buf;
      if (!*(void *)buf) {
        goto LABEL_37;
      }
    }
    CFRelease(v21);
    goto LABEL_37;
  }
  operator delete(v106.__r_.__value_.__l.__data_);
  if ((v9 & 1) == 0) {
    goto LABEL_24;
  }
LABEL_18:
  if (!(*(unsigned int (**)(uint64_t))(*(void *)v2 + 88))(v2))
  {
    xpc_object_t v16 = xpc_dictionary_create(0, 0, 0);
    uint64_t v17 = MEMORY[0x1E4F14590];
    if (v16 || (xpc_object_t v16 = xpc_null_create()) != 0)
    {
      if (MEMORY[0x1C8792D30](v16) == v17)
      {
        xpc_retain(v16);
        xpc_object_t v18 = v16;
      }
      else
      {
        xpc_object_t v18 = xpc_null_create();
      }
    }
    else
    {
      xpc_object_t v18 = xpc_null_create();
      xpc_object_t v16 = 0;
    }
    xpc_release(v16);
    xpc_object_t v47 = xpc_int64_create(5000);
    if (!v47) {
      xpc_object_t v47 = xpc_null_create();
    }
    xpc_dictionary_set_value(v18, (const char *)*MEMORY[0x1E4F470A0], v47);
    xpc_object_t v48 = xpc_null_create();
    xpc_release(v47);
    xpc_release(v48);
    if ((v109.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unint64_t v49 = &v109;
    }
    else {
      unint64_t v49 = (std::string *)v109.__r_.__value_.__r.__words[0];
    }
    xpc_object_t v50 = xpc_string_create((const char *)v49);
    if (!v50) {
      xpc_object_t v50 = xpc_null_create();
    }
    xpc_dictionary_set_value(v18, (const char *)*MEMORY[0x1E4F470B8], v50);
    xpc_object_t v51 = xpc_null_create();
    xpc_release(v50);
    xpc_release(v51);
    if (SHIBYTE(v108[2]) >= 0) {
      dispatch_object_t v52 = (const char *)v108;
    }
    else {
      dispatch_object_t v52 = (const char *)v108[0];
    }
    xpc_object_t v53 = xpc_string_create(v52);
    if (!v53) {
      xpc_object_t v53 = xpc_null_create();
    }
    xpc_dictionary_set_value(v18, (const char *)*MEMORY[0x1E4F470E0], v53);
    xpc_object_t v54 = xpc_null_create();
    xpc_release(v53);
    xpc_release(v54);
    if (SHIBYTE(v107[2]) >= 0) {
      uint64_t v55 = (const char *)v107;
    }
    else {
      uint64_t v55 = (const char *)v107[0];
    }
    xpc_object_t v56 = xpc_string_create(v55);
    if (!v56) {
      xpc_object_t v56 = xpc_null_create();
    }
    xpc_dictionary_set_value(v18, (const char *)*MEMORY[0x1E4F47118], v56);
    xpc_object_t v57 = xpc_null_create();
    xpc_release(v56);
    xpc_release(v57);
    if (v7)
    {
      uint64_t v58 = *(NSObject **)(v2 + 88);
      if (os_log_type_enabled(v58, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_debug_impl(&dword_1C5767000, v58, OS_LOG_TYPE_DEBUG, "#D Request to set property with completion", buf, 2u);
      }
      memset(buf, 170, 16);
      v97[0] = MEMORY[0x1E4F143A8];
      v97[1] = 1174405120;
      v97[2] = ___ZN12TraceManager10initializeEN8dispatch13group_sessionE_block_invoke_21;
      v97[3] = &__block_descriptor_tmp_23_1;
      uint64_t v60 = *(void *)(a1 + 56);
      std::string::size_type v59 = *(std::__shared_weak_count **)(a1 + 64);
      v97[4] = v2;
      v97[5] = v60;
      int v98 = v59;
      if (v59) {
        atomic_fetch_add_explicit(&v59->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v61 = *(const void **)(a1 + 48);
      if (v61)
      {
        std::string::size_type v62 = _Block_copy(v61);
        std::string::size_type v63 = *(void **)(a1 + 40);
        int v99 = v62;
        xpc_object_t v100 = v63;
        if (v63)
        {
LABEL_107:
          xpc_retain(v63);
          goto LABEL_112;
        }
      }
      else
      {
        std::string::size_type v63 = *(void **)(a1 + 40);
        int v99 = 0;
        xpc_object_t v100 = v63;
        if (v63) {
          goto LABEL_107;
        }
      }
      xpc_object_t v100 = xpc_null_create();
LABEL_112:
      std::string::size_type v64 = _Block_copy(v97);
      uint64_t v65 = *(void *)(v2 + 136);
      if (v65) {
        dispatch_retain(*(dispatch_object_t *)(v2 + 136));
      }
      *(void *)std::string buf = v64;
      *(void *)&uint8_t buf[8] = v65;
      xpc_object_t v96 = v18;
      if (v18)
      {
        xpc_retain(v18);
        std::string::size_type v64 = *(void **)buf;
        uint64_t v95 = 0;
        if (*(void *)buf)
        {
LABEL_116:
          uint64_t v66 = _Block_copy(v64);
LABEL_122:
          uint64_t v70 = *MEMORY[0x1E4F47150];
          int v71 = *(NSObject **)&buf[8];
          v94[0] = v66;
          v94[1] = *(void **)&buf[8];
          if (*(void *)&buf[8]) {
            dispatch_retain(*(dispatch_object_t *)&buf[8]);
          }
          TraceManager::runOnHelper_sync((void *)v2, (const char *)9, v70, 0, 1, &v96, &v95, v94);
          if (v71) {
            dispatch_release(v71);
          }
          if (v66) {
            _Block_release(v66);
          }
          xpc_release(v96);
          xpc_object_t v96 = 0;
          if (v71) {
            dispatch_release(v71);
          }
          if (v64) {
            _Block_release(v64);
          }
          xpc_release(v100);
          xpc_object_t v100 = 0;
          if (v99) {
            _Block_release(v99);
          }
          size_t v72 = v98;
          if (v98 && !atomic_fetch_add(&v98->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
            std::__shared_weak_count::__release_weak(v72);
          }
LABEL_156:
          xpc_release(v18);
          goto LABEL_166;
        }
      }
      else
      {
        uint64_t v95 = 0;
        xpc_object_t v96 = xpc_null_create();
        if (v64) {
          goto LABEL_116;
        }
      }
      uint64_t v66 = 0;
      goto LABEL_122;
    }
    xpc_object_t v93 = v18;
    if (v18) {
      xpc_retain(v18);
    }
    else {
      xpc_object_t v93 = xpc_null_create();
    }
    uint64_t v67 = *MEMORY[0x1E4F47150];
    v91[1] = 0;
    uint64_t v92 = 0;
    v91[0] = 0;
    TraceManager::runOnHelper_sync((void *)v2, (const char *)9, v67, 0, 1, &v93, &v92, v91);
    xpc_release(v93);
    xpc_object_t v93 = 0;
    v110.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
    size_t v68 = *(TraceCAReporter **)(v2 + 304);
    std::string::size_type v69 = *(void **)(a1 + 40);
    xpc_object_t v90 = v69;
    if (v69) {
      xpc_retain(v69);
    }
    else {
      xpc_object_t v90 = xpc_null_create();
    }
    TraceCAReporter::prepTraceStats(v68, &v90, (xpc_object_t *)&v110.__r_.__value_.__l.__data_);
    xpc_release(v90);
    xpc_object_t v90 = 0;
    if (MEMORY[0x1C8792D30](v110.__r_.__value_.__r.__words[0]) != v17)
    {
LABEL_153:
      if (*(void *)(a1 + 48))
      {
        xpc_object_t v80 = xpc_null_create();
        uint64_t v81 = *(void *)(a1 + 48);
        *(void *)std::string buf = v80;
        xpc_object_t v82 = xpc_null_create();
        (*(void (**)(uint64_t, void, uint8_t *))(v81 + 16))(v81, 0, buf);
        xpc_release(*(xpc_object_t *)buf);
        xpc_release(v82);
      }
      xpc_release(v110.__r_.__value_.__l.__data_);
      goto LABEL_156;
    }
    size_t v73 = (const void *)*MEMORY[0x1E4F4C738];
    size_t v74 = strlen((const char *)*MEMORY[0x1E4F4C738]);
    if (v74 > 0x7FFFFFFFFFFFFFF7) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    size_t v75 = v74;
    if (v74 >= 0x17)
    {
      uint64_t v77 = (v74 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v74 | 7) != 0x17) {
        uint64_t v77 = v74 | 7;
      }
      uint64_t v78 = v77 + 1;
      int v76 = operator new(v77 + 1);
      *(void *)&uint8_t buf[8] = v75;
      *(void *)&uint8_t buf[16] = v78 | 0x8000000000000000;
      *(void *)std::string buf = v76;
    }
    else
    {
      uint8_t buf[23] = v74;
      int v76 = buf;
      if (!v74)
      {
LABEL_148:
        v76[v75] = 0;
        xpc_object_t v79 = (xpc_object_t)v110.__r_.__value_.__r.__words[0];
        std::string::size_type v89 = v110.__r_.__value_.__r.__words[0];
        if (v110.__r_.__value_.__r.__words[0])
        {
          xpc_retain(v110.__r_.__value_.__l.__data_);
        }
        else
        {
          xpc_object_t v79 = xpc_null_create();
          std::string::size_type v89 = (std::string::size_type)v79;
        }
        int v88 = 0;
        Service::runCommand(v2, (uint64_t)buf, (xpc_object_t *)&v89, &v88);
        xpc_release(v79);
        std::string::size_type v89 = 0;
        if ((char)buf[23] < 0) {
          operator delete(*(void **)buf);
        }
        goto LABEL_153;
      }
    }
    memmove(v76, v73, v75);
    goto LABEL_148;
  }
  memset(buf, 170, sizeof(buf));
  uint64_t v10 = (const void *)*MEMORY[0x1E4F4C9F8];
  size_t v11 = strlen((const char *)*MEMORY[0x1E4F4C9F8]);
  if (v11 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  std::string::size_type v12 = v11;
  if (v11 >= 0x17)
  {
    uint64_t v34 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17) {
      uint64_t v34 = v11 | 7;
    }
    uint64_t v35 = v34 + 1;
    uint64_t v13 = operator new(v34 + 1);
    v110.__r_.__value_.__l.__size_ = v12;
    v110.__r_.__value_.__r.__words[2] = v35 | 0x8000000000000000;
    v110.__r_.__value_.__r.__words[0] = (std::string::size_type)v13;
    goto LABEL_65;
  }
  *((unsigned char *)&v110.__r_.__value_.__s + 23) = v11;
  uint64_t v13 = &v110;
  if (v11) {
LABEL_65:
  }
    memmove(v13, v10, v12);
  *((unsigned char *)v13 + v12) = 0;
  xpc_object_t v36 = (char *)operator new(0x28uLL);
  strcpy(v36, " rejected; ABM is shutting down ");
  xpc_object_t v37 = std::string::append(&v110, v36, 0x20uLL);
  long long v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
  *(void *)&uint8_t buf[16] = *((void *)&v37->__r_.__value_.__l + 2);
  *(_OWORD *)std::string buf = v38;
  v37->__r_.__value_.__l.__size_ = 0;
  v37->__r_.__value_.__r.__words[2] = 0;
  v37->__r_.__value_.__r.__words[0] = 0;
  operator delete(v36);
  if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v110.__r_.__value_.__l.__data_);
    size_t v39 = *(NSObject **)(v2 + 88);
    if (!os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
    {
LABEL_68:
      uint64_t v41 = *(void *)(a1 + 48);
      uint64_t v40 = (uint64_t *)(a1 + 48);
      if (!v41) {
        goto LABEL_165;
      }
      goto LABEL_74;
    }
  }
  else
  {
    size_t v39 = *(NSObject **)(v2 + 88);
    if (!os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_68;
    }
  }
  uint64_t v42 = buf;
  if ((buf[23] & 0x80u) != 0) {
    uint64_t v42 = *(uint8_t **)buf;
  }
  LODWORD(v110.__r_.__value_.__l.__data_) = 136315138;
  *(std::string::size_type *)((char *)v110.__r_.__value_.__r.__words + 4) = (std::string::size_type)v42;
  _os_log_impl(&dword_1C5767000, v39, OS_LOG_TYPE_DEFAULT, "#I %s", (uint8_t *)&v110, 0xCu);
  uint64_t v43 = *(void *)(a1 + 48);
  uint64_t v40 = (uint64_t *)(a1 + 48);
  if (v43)
  {
LABEL_74:
    v110.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
    v110.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
    uint64_t v44 = buf[23];
    if ((buf[23] & 0x80u) != 0) {
      uint64_t v44 = *(void *)&buf[8];
    }
    if (v44)
    {
      xpc_object_t v45 = xpc_dictionary_create(0, 0, 0);
      if (v45 || (xpc_object_t v45 = xpc_null_create()) != 0)
      {
        if (MEMORY[0x1C8792D30](v45) == MEMORY[0x1E4F14590])
        {
          xpc_retain(v45);
          xpc_object_t v46 = v45;
        }
        else
        {
          xpc_object_t v46 = xpc_null_create();
        }
      }
      else
      {
        xpc_object_t v46 = xpc_null_create();
        xpc_object_t v45 = 0;
      }
      xpc_release(v45);
      xpc_object_t v83 = xpc_null_create();
      size_t v84 = (void *)v110.__r_.__value_.__r.__words[0];
      v110.__r_.__value_.__r.__words[0] = (std::string::size_type)v46;
      xpc_release(v84);
      xpc_release(v83);
      if ((buf[23] & 0x80u) == 0) {
        uint64_t v85 = buf;
      }
      else {
        uint64_t v85 = *(uint8_t **)buf;
      }
      xpc_object_t v86 = xpc_string_create((const char *)v85);
      if (!v86) {
        xpc_object_t v86 = xpc_null_create();
      }
      xpc_dictionary_set_value(v46, (const char *)*MEMORY[0x1E4F4C240], v86);
      xpc_object_t v87 = xpc_null_create();
      xpc_release(v86);
      xpc_release(v87);
    }
    LODWORD(object) = -534716415;
    dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(v40, (unsigned int *)&object, (void **)&v110.__r_.__value_.__l.__data_);
    xpc_release(v110.__r_.__value_.__l.__data_);
  }
LABEL_165:
  if (((char)buf[23] & 0x80000000) == 0) {
    goto LABEL_166;
  }
  operator delete(*(void **)buf);
  if ((SHIBYTE(v107[2]) & 0x80000000) == 0)
  {
LABEL_167:
    if ((SHIBYTE(v108[2]) & 0x80000000) == 0) {
      goto LABEL_168;
    }
    goto LABEL_172;
  }
LABEL_171:
  operator delete(v107[0]);
  if ((SHIBYTE(v108[2]) & 0x80000000) == 0)
  {
LABEL_168:
    if ((SHIBYTE(v109.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
LABEL_173:
    operator delete(v109.__r_.__value_.__l.__data_);
    return;
  }
LABEL_172:
  operator delete(v108[0]);
  if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_173;
  }
}

void sub_1C5924B18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, xpc_object_t a11, char a12, uint64_t a13, uint64_t a14, xpc_object_t a15, char a16, uint64_t a17, uint64_t a18, xpc_object_t object, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *aBlock,xpc_object_t a28,void *a29,char a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36,xpc_object_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void ___ZN12TraceManager10initializeEN8dispatch13group_sessionE_block_invoke_21(void *a1, int *a2)
{
  uint64_t v4 = a1[4];
  xpc_object_t v5 = *(NSObject **)(v4 + 88);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_debug_impl(&dword_1C5767000, v5, OS_LOG_TYPE_DEBUG, "#D Set property completion called", buf, 2u);
    if (!a1[7]) {
      return;
    }
  }
  else if (!a1[7])
  {
    return;
  }
  int v6 = *a2;
  if (!*a2)
  {
    int v7 = *(TraceCAReporter **)(v4 + 304);
    xpc_object_t v8 = (void *)a1[8];
    xpc_object_t object = v8;
    xpc_object_t v26 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
    if (v8) {
      xpc_retain(v8);
    }
    else {
      xpc_object_t object = xpc_null_create();
    }
    TraceCAReporter::prepTraceStats(v7, &object, &v26);
    xpc_release(object);
    xpc_object_t object = 0;
    if (MEMORY[0x1C8792D30](v26) != MEMORY[0x1E4F14590])
    {
LABEL_23:
      xpc_release(v26);
      int v6 = *a2;
      goto LABEL_24;
    }
    char v9 = (const void *)*MEMORY[0x1E4F4C738];
    size_t v10 = strlen((const char *)*MEMORY[0x1E4F4C738]);
    if (v10 >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    size_t v11 = v10;
    if (v10 >= 0x17)
    {
      uint64_t v13 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v10 | 7) != 0x17) {
        uint64_t v13 = v10 | 7;
      }
      uint64_t v14 = v13 + 1;
      std::string::size_type v12 = operator new(v13 + 1);
      size_t v23 = v11;
      unint64_t v24 = v14 | 0x8000000000000000;
      *(void *)std::string buf = v12;
    }
    else
    {
      HIBYTE(v24) = v10;
      std::string::size_type v12 = buf;
      if (!v10)
      {
LABEL_18:
        v12[v11] = 0;
        xpc_object_t v15 = v26;
        xpc_object_t v21 = v26;
        if (v26)
        {
          xpc_retain(v26);
        }
        else
        {
          xpc_object_t v15 = xpc_null_create();
          xpc_object_t v21 = v15;
        }
        CFTypeID v20 = 0;
        Service::runCommand(v4, (uint64_t)buf, &v21, &v20);
        xpc_release(v15);
        xpc_object_t v21 = 0;
        if (SHIBYTE(v24) < 0) {
          operator delete(*(void **)buf);
        }
        goto LABEL_23;
      }
    }
    memmove(v12, v9, v11);
    goto LABEL_18;
  }
LABEL_24:
  if (v6) {
    uint64_t v16 = 3760250880;
  }
  else {
    uint64_t v16 = 0;
  }
  xpc_object_t v17 = xpc_null_create();
  uint64_t v18 = a1[7];
  *(void *)std::string buf = v17;
  xpc_object_t v19 = xpc_null_create();
  (*(void (**)(uint64_t, uint64_t, uint8_t *))(v18 + 16))(v18, v16, buf);
  xpc_release(*(xpc_object_t *)buf);
  xpc_release(v19);
}

void sub_1C5925168(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, xpc_object_t a18, xpc_object_t object)
{
  xpc_release(v19);
  if (a16 < 0) {
    operator delete(__p);
  }
  xpc_release(object);
  _Unwind_Resume(a1);
}

xpc_object_t __copy_helper_block_e8_40c40_ZTSNSt3__110shared_ptrI12TraceManagerEE56c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE64c15_ZTSN3xpc4dictE(void *a1, void *a2)
{
  uint64_t v4 = a2[6];
  a1[5] = a2[5];
  a1[6] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  xpc_object_t v5 = (const void *)a2[7];
  if (v5)
  {
    int v6 = _Block_copy(v5);
    int v7 = (void *)a2[8];
    a1[7] = v6;
    a1[8] = v7;
    if (v7) {
      return xpc_retain(v7);
    }
  }
  else
  {
    int v7 = (void *)a2[8];
    a1[7] = 0;
    a1[8] = v7;
    if (v7) {
      return xpc_retain(v7);
    }
  }
  xpc_object_t result = xpc_null_create();
  a1[8] = result;
  return result;
}

void __destroy_helper_block_e8_40c40_ZTSNSt3__110shared_ptrI12TraceManagerEE56c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE64c15_ZTSN3xpc4dictE(uint64_t a1)
{
  xpc_release(*(xpc_object_t *)(a1 + 64));
  *(void *)(a1 + 64) = 0;
  uint64_t v2 = *(const void **)(a1 + 56);
  if (v2) {
    _Block_release(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
}

void *dispatch::callback<void({block_pointer})(TelephonyXPC::Result,xpc::dict)>::callback(void *a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  if (*(void *)a2) {
    uint64_t v4 = _Block_copy(v4);
  }
  xpc_object_t v5 = *(NSObject **)(a2 + 8);
  *a1 = v4;
  a1[1] = v5;
  if (v5) {
    dispatch_retain(v5);
  }
  return a1;
}

void *__copy_helper_block_e8_40c15_ZTSN3xpc4dictE48c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE56c40_ZTSNSt3__110shared_ptrI12TraceManagerEE(void *a1, void *a2)
{
  uint64_t v4 = (void *)a2[5];
  a1[5] = v4;
  if (!v4)
  {
    a1[5] = xpc_null_create();
    xpc_object_t result = (void *)a2[6];
    if (!result) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  xpc_retain(v4);
  xpc_object_t result = (void *)a2[6];
  if (result) {
LABEL_5:
  }
    xpc_object_t result = _Block_copy(result);
LABEL_6:
  uint64_t v7 = a2[7];
  uint64_t v6 = a2[8];
  a1[6] = result;
  a1[7] = v7;
  a1[8] = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c15_ZTSN3xpc4dictE48c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE56c40_ZTSNSt3__110shared_ptrI12TraceManagerEE(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 64);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = *(const void **)(a1 + 48);
    if (!v3) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  uint64_t v3 = *(const void **)(a1 + 48);
  if (v3) {
LABEL_4:
  }
    _Block_release(v3);
LABEL_5:
  xpc_release(*(xpc_object_t *)(a1 + 40));
  *(void *)(a1 + 40) = 0;
}

uint64_t __copy_helper_block_e8_40c37_ZTSNSt3__18weak_ptrI12TraceManagerEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c37_ZTSNSt3__18weak_ptrI12TraceManagerEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void ___ZN12TraceManager10initializeEN8dispatch13group_sessionE_block_invoke_27(void *a1, void **a2, void **a3)
{
  uint64_t v4 = (std::__shared_weak_count *)a1[6];
  if (!v4) {
    return;
  }
  uint64_t v7 = a1[4];
  xpc_object_t v8 = std::__shared_weak_count::lock(v4);
  if (!v8) {
    return;
  }
  char v9 = v8;
  uint64_t v10 = a1[5];
  if (atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (!v10) {
      return;
    }
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
    if (!v10) {
      return;
    }
  }
  v13[0] = MEMORY[0x1E4F143A8];
  v13[1] = 1174405120;
  uint64_t v13[2] = ___ZN12TraceManager10initializeEN8dispatch13group_sessionE_block_invoke_2_28;
  v13[3] = &__block_descriptor_tmp_33_4;
  size_t v11 = *a2;
  v13[4] = v7;
  xpc_object_t object = v11;
  if (v11)
  {
    xpc_retain(v11);
    std::string::size_type v12 = *a3;
    if (!*a3) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }
  xpc_object_t object = xpc_null_create();
  std::string::size_type v12 = *a3;
  if (*a3) {
LABEL_11:
  }
    std::string::size_type v12 = _Block_copy(v12);
LABEL_12:
  aBlocuint64_t k = v12;
  ctu::SharedSynchronizable<TraceManager>::execute_wrapped((uint64_t *)(v7 + 120), (uint64_t)v13);
  if (aBlock) {
    _Block_release(aBlock);
  }
  xpc_release(object);
}

void ___ZN12TraceManager10initializeEN8dispatch13group_sessionE_block_invoke_2_28(uint64_t a1)
{
  uint64_t v55 = *MEMORY[0x1E4F143B8];
  memset(&v48, 170, sizeof(v48));
  uint64_t v2 = *(void *)(a1 + 32);
  xpc_object_t value = xpc_dictionary_get_value(*(xpc_object_t *)(a1 + 40), (const char *)*MEMORY[0x1E4F4C1A0]);
  xpc_object_t object = value;
  if (value) {
    xpc_retain(value);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  long long v49 = 0uLL;
  uint64_t v50 = 0;
  xpc::dyn_cast_or_default();
  xpc_release(object);
  memset(__p, 170, sizeof(__p));
  xpc_object_t v4 = xpc_dictionary_get_value(*(xpc_object_t *)(a1 + 40), (const char *)*MEMORY[0x1E4F4C6A8]);
  xpc_object_t object = v4;
  if (v4) {
    xpc_retain(v4);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  long long v49 = 0uLL;
  uint64_t v50 = 0;
  xpc::dyn_cast_or_default();
  xpc_release(object);
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v46, v48.__r_.__value_.__l.__data_, v48.__r_.__value_.__l.__size_);
  }
  else {
    std::string v46 = v48;
  }
  char isSupported = abm::trace::isSupported();
  char v6 = isSupported;
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v46.__r_.__value_.__l.__data_);
    if (v6)
    {
LABEL_12:
      xpc_object_t object = 0;
      p_xpc_object_t object = &object;
      uint64_t v42 = 0x3002000000;
      uint64_t v43 = __Block_byref_object_copy__5;
      uint64_t v7 = *(void **)(a1 + 40);
      uint64_t v44 = __Block_byref_object_dispose__5;
      xpc_object_t v45 = v7;
      if (v7) {
        xpc_retain(v7);
      }
      else {
        xpc_object_t v45 = xpc_null_create();
      }
      *(void *)&long long v49 = 0;
      *((void *)&v49 + 1) = &v49;
      uint64_t v50 = 0x4002000000;
      xpc_object_t v51 = __Block_byref_object_copy__29;
      dispatch_object_t v52 = __Block_byref_object_dispose__30;
      v53[0] = 0;
      v53[1] = 0;
      uint64_t v54 = 0;
      if (prop::get((char *)&v48, (char *)__p, (uint64_t)v53))
      {
        std::string::size_type v12 = (const char *)(*((void *)&v49 + 1) + 40);
        if (*(char *)(*((void *)&v49 + 1) + 63) < 0) {
          std::string::size_type v12 = *(const char **)v12;
        }
        xpc_object_t v13 = xpc_string_create(v12);
        if (!v13) {
          xpc_object_t v13 = xpc_null_create();
        }
        xpc_dictionary_set_value(p_object[5], (const char *)*MEMORY[0x1E4F4C800], v13);
        xpc_object_t v14 = xpc_null_create();
        xpc_release(v13);
        xpc_release(v14);
        *(_DWORD *)std::string buf = 0;
        dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>((uint64_t *)(a1 + 48), (unsigned int *)buf, p_object + 5);
LABEL_63:
        _Block_object_dispose(&v49, 8);
        if (SHIBYTE(v54) < 0) {
          operator delete(v53[0]);
        }
        _Block_object_dispose(&object, 8);
        xpc_release(v45);
        goto LABEL_66;
      }
      xpc_object_t v15 = *(NSObject **)(v2 + 88);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl(&dword_1C5767000, v15, OS_LOG_TYPE_DEFAULT, "#I Checking with abm-helper daemon", buf, 2u);
      }
      xpc_object_t v16 = xpc_dictionary_create(0, 0, 0);
      if (v16 || (xpc_object_t v16 = xpc_null_create()) != 0)
      {
        if (MEMORY[0x1C8792D30](v16) == MEMORY[0x1E4F14590])
        {
          xpc_retain(v16);
          xpc_object_t v17 = v16;
        }
        else
        {
          xpc_object_t v17 = xpc_null_create();
        }
      }
      else
      {
        xpc_object_t v17 = xpc_null_create();
        xpc_object_t v16 = 0;
      }
      xpc_release(v16);
      xpc_object_t v18 = xpc_int64_create(1500);
      if (!v18) {
        xpc_object_t v18 = xpc_null_create();
      }
      xpc_dictionary_set_value(v17, (const char *)*MEMORY[0x1E4F470A0], v18);
      xpc_object_t v19 = xpc_null_create();
      xpc_release(v18);
      xpc_release(v19);
      if ((v48.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        CFTypeID v20 = &v48;
      }
      else {
        CFTypeID v20 = (std::string *)v48.__r_.__value_.__r.__words[0];
      }
      xpc_object_t v21 = xpc_string_create((const char *)v20);
      if (!v21) {
        xpc_object_t v21 = xpc_null_create();
      }
      xpc_dictionary_set_value(v17, (const char *)*MEMORY[0x1E4F470B8], v21);
      xpc_object_t v22 = xpc_null_create();
      xpc_release(v21);
      xpc_release(v22);
      if (SHIBYTE(__p[2]) >= 0) {
        size_t v23 = __p;
      }
      else {
        size_t v23 = (void **)__p[0];
      }
      xpc_object_t v24 = xpc_string_create((const char *)v23);
      if (!v24) {
        xpc_object_t v24 = xpc_null_create();
      }
      xpc_dictionary_set_value(v17, (const char *)*MEMORY[0x1E4F470E0], v24);
      xpc_object_t v25 = xpc_null_create();
      xpc_release(v24);
      xpc_release(v25);
      memset(buf, 170, sizeof(buf));
      aBlock[0] = MEMORY[0x1E4F143A8];
      aBlock[1] = 1174405120;
      aBlock[2] = ___ZN12TraceManager10initializeEN8dispatch13group_sessionE_block_invoke_31;
      aBlock[3] = &unk_1F20FD480;
      aBlock[4] = &v49;
      void aBlock[5] = &object;
      xpc_object_t v26 = *(void **)(a1 + 48);
      if (v26) {
        xpc_object_t v26 = _Block_copy(v26);
      }
      long long v38 = v26;
      uint64_t v27 = _Block_copy(aBlock);
      uint64_t v28 = *(void *)(v2 + 136);
      if (v28) {
        dispatch_retain(*(dispatch_object_t *)(v2 + 136));
      }
      *(void *)std::string buf = v27;
      *(void *)&uint8_t buf[8] = v28;
      xpc_object_t v36 = v17;
      if (v17)
      {
        xpc_retain(v17);
        uint64_t v27 = *(void **)buf;
        uint64_t v35 = 0;
        if (*(void *)buf) {
          goto LABEL_50;
        }
      }
      else
      {
        uint64_t v35 = 0;
        xpc_object_t v36 = xpc_null_create();
        if (v27)
        {
LABEL_50:
          uint64_t v29 = _Block_copy(v27);
          uint64_t v30 = *MEMORY[0x1E4F47148];
          uint64_t v31 = *(NSObject **)&buf[8];
          unint64_t v33 = v29;
          uint64_t v34 = *(void *)&buf[8];
          if (!*(void *)&buf[8])
          {
LABEL_52:
            TraceManager::runOnHelper_sync((void *)v2, (const char *)9, v30, 0, 1, &v36, &v35, &v33);
            if (v31) {
              dispatch_release(v31);
            }
            if (v29) {
              _Block_release(v29);
            }
            xpc_release(v36);
            xpc_object_t v36 = 0;
            if (v31) {
              dispatch_release(v31);
            }
            if (v27) {
              _Block_release(v27);
            }
            if (v38) {
              _Block_release(v38);
            }
            xpc_release(v17);
            goto LABEL_63;
          }
LABEL_51:
          dispatch_retain(v31);
          goto LABEL_52;
        }
      }
      uint64_t v29 = 0;
      uint64_t v30 = *MEMORY[0x1E4F47148];
      uint64_t v31 = *(NSObject **)&buf[8];
      unint64_t v33 = 0;
      uint64_t v34 = *(void *)&buf[8];
      if (!*(void *)&buf[8]) {
        goto LABEL_52;
      }
      goto LABEL_51;
    }
  }
  else if (isSupported)
  {
    goto LABEL_12;
  }
  xpc_object_t v8 = *(NSObject **)(v2 + 88);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
  {
    xpc_object_t v32 = &v48;
    if ((v48.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      xpc_object_t v32 = (std::string *)v48.__r_.__value_.__r.__words[0];
    }
    LODWORD(v49) = 136315138;
    *(void *)((char *)&v49 + 4) = v32;
    _os_log_error_impl(&dword_1C5767000, v8, OS_LOG_TYPE_ERROR, "Trace not supported: %s", (uint8_t *)&v49, 0xCu);
  }
  xpc_object_t v9 = xpc_null_create();
  uint64_t v10 = *(void *)(a1 + 48);
  *(void *)&long long v49 = v9;
  xpc_object_t v11 = xpc_null_create();
  (*(void (**)(uint64_t, uint64_t, long long *))(v10 + 16))(v10, 3760250884, &v49);
  xpc_release((xpc_object_t)v49);
  xpc_release(v11);
LABEL_66:
  if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v48.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
LABEL_70:
    operator delete(v48.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(__p[0]);
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_70;
  }
}

void sub_1C5925CD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, xpc_object_t object, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *aBlock,char a21,uint64_t a22,xpc_object_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,xpc_object_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

__n128 __Block_byref_object_copy__29(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)(a2 + 40);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(__n128 *)(a1 + 40) = result;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__30(uint64_t a1)
{
  if (*(char *)(a1 + 63) < 0) {
    operator delete(*(void **)(a1 + 40));
  }
}

void ___ZN12TraceManager10initializeEN8dispatch13group_sessionE_block_invoke_31(void *a1, _DWORD *a2, xpc_object_t *a3)
{
  if (!*a2 && MEMORY[0x1C8792D30](*a3) == MEMORY[0x1E4F14590])
  {
    xpc_object_t value = xpc_dictionary_get_value(*a3, (const char *)*MEMORY[0x1E4F47118]);
    xpc_object_t v16 = value;
    if (value) {
      xpc_retain(value);
    }
    else {
      xpc_object_t v16 = xpc_null_create();
    }
    xpc::dyn_cast_or_default((uint64_t *)object, (xpc *)&v16, (const object *)"", v9);
    uint64_t v10 = *(void *)(a1[4] + 8);
    uint64_t v11 = v10 + 40;
    if (*(char *)(v10 + 63) < 0) {
      operator delete(*(void **)v11);
    }
    *(_OWORD *)uint64_t v11 = *(_OWORD *)object;
    *(void *)(v11 + 16) = v18;
    HIBYTE(v18) = 0;
    LOBYTE(object[0]) = 0;
    xpc_release(v16);
    uint64_t v12 = *(void *)(a1[4] + 8);
    xpc_object_t v13 = (const char *)(v12 + 40);
    if (*(char *)(v12 + 63) < 0) {
      xpc_object_t v13 = *(const char **)v13;
    }
    xpc_object_t v14 = xpc_string_create(v13);
    if (!v14) {
      xpc_object_t v14 = xpc_null_create();
    }
    xpc_dictionary_set_value(*(xpc_object_t *)(*(void *)(a1[5] + 8) + 40), (const char *)*MEMORY[0x1E4F4C800], v14);
    xpc_object_t v15 = xpc_null_create();
    xpc_release(v14);
    xpc_release(v15);
    LODWORD(object[0]) = 0;
    dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(a1 + 6, (unsigned int *)object, (void **)(*(void *)(a1[5] + 8) + 40));
  }
  else
  {
    xpc_object_t v5 = xpc_null_create();
    uint64_t v6 = a1[6];
    object[0] = v5;
    xpc_object_t v7 = xpc_null_create();
    (*(void (**)(uint64_t, uint64_t, xpc_object_t *))(v6 + 16))(v6, 3760250880, object);
    xpc_release(object[0]);
    xpc_release(v7);
  }
}

void sub_1C59260C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object, xpc_object_t a10)
{
}

void ___ZN12TraceManager10initializeEN8dispatch13group_sessionE_block_invoke_37(void *a1, void **a2, const void **a3)
{
  xpc_object_t v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    uint64_t v7 = a1[4];
    xpc_object_t v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      xpc_object_t v9 = v8;
      uint64_t v10 = a1[5];
      if (atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        if (!v10) {
          return;
        }
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v9);
        if (!v10) {
          return;
        }
      }
      v13[0] = MEMORY[0x1E4F143A8];
      v13[1] = 1174405120;
      uint64_t v13[2] = ___ZN12TraceManager10initializeEN8dispatch13group_sessionE_block_invoke_2_38;
      v13[3] = &__block_descriptor_tmp_39_4;
      v13[4] = v7;
      if (*a3)
      {
        uint64_t v11 = _Block_copy(*a3);
        uint64_t v12 = *a2;
        aBlocuint64_t k = v11;
        xpc_object_t object = v12;
        if (v12)
        {
LABEL_9:
          xpc_retain(v12);
          goto LABEL_12;
        }
      }
      else
      {
        uint64_t v12 = *a2;
        aBlocuint64_t k = 0;
        xpc_object_t object = v12;
        if (v12) {
          goto LABEL_9;
        }
      }
      xpc_object_t object = xpc_null_create();
LABEL_12:
      ctu::SharedSynchronizable<TraceManager>::execute_wrapped((uint64_t *)(v7 + 120), (uint64_t)v13);
      xpc_release(object);
      xpc_object_t object = 0;
      if (aBlock) {
        _Block_release(aBlock);
      }
    }
  }
}

void ___ZN12TraceManager10initializeEN8dispatch13group_sessionE_block_invoke_2_38(uint64_t a1)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void **)(a1 + 32);
  if (!(*(unsigned int (**)(void *))(*v2 + 88))(v2))
  {
    memset(__p, 170, 24);
    xpc_object_t value = xpc_dictionary_get_value(*(xpc_object_t *)(a1 + 48), (const char *)*MEMORY[0x1E4F4C268]);
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)value;
    if (value) {
      xpc_retain(value);
    }
    else {
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
    }
    xpc::dyn_cast_or_default((uint64_t *)__p, (xpc *)&__dst, (const object *)*MEMORY[0x1E4F4C630], v8);
    xpc_release(__dst.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p[2]) >= 0) {
      size_t v17 = HIBYTE(__p[2]);
    }
    else {
      size_t v17 = (size_t)__p[1];
    }
    if (v17 != strlen((const char *)*MEMORY[0x1E4F4C4F8])
      || (SHIBYTE(__p[2]) >= 0 ? (uint64_t v18 = __p) : (uint64_t v18 = (void **)__p[0]),
          memcmp(v18, (const void *)*MEMORY[0x1E4F4C4F8], v17)))
    {
      xpc_object_t v19 = *(xpc_object_t *)(a1 + 48);
      xpc_object_t v35 = v19;
      if (v19)
      {
        xpc_retain(v19);
        CFTypeID v20 = *(const void **)(a1 + 40);
        if (v20)
        {
LABEL_27:
          xpc_object_t v21 = (void (**)(void *, uint64_t, stat *))_Block_copy(v20);
LABEL_41:
          uint64_t v34 = v21;
          TraceManager::collectLogs_sync(v2, &v35, &v34);
          if (v21) {
            _Block_release(v21);
          }
          xpc_release(v19);
          goto LABEL_61;
        }
      }
      else
      {
        xpc_object_t v19 = xpc_null_create();
        xpc_object_t v35 = v19;
        CFTypeID v20 = *(const void **)(a1 + 40);
        if (v20) {
          goto LABEL_27;
        }
      }
      xpc_object_t v21 = 0;
      goto LABEL_41;
    }
    xpc_object_t v27 = *(xpc_object_t *)(a1 + 48);
    xpc_object_t v37 = v27;
    if (v27)
    {
      xpc_retain(v27);
      uint64_t v28 = *(void **)(a1 + 40);
      if (!v28) {
        goto LABEL_50;
      }
    }
    else
    {
      xpc_object_t v27 = xpc_null_create();
      xpc_object_t v37 = v27;
      uint64_t v28 = *(void **)(a1 + 40);
      if (!v28)
      {
LABEL_50:
        aBlocuint64_t k = v28;
        TraceManager::collectBasebandLogs_sync((uint64_t)v2, &v37, (uint64_t *)&aBlock);
        if (aBlock) {
          _Block_release(aBlock);
        }
        xpc_release(v27);
        goto LABEL_61;
      }
    }
    uint64_t v28 = _Block_copy(v28);
    goto LABEL_50;
  }
  memset(__p, 170, 24);
  uint64_t v3 = (const void *)*MEMORY[0x1E4F4C748];
  size_t v4 = strlen((const char *)*MEMORY[0x1E4F4C748]);
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  std::string::size_type v5 = v4;
  if (v4 >= 0x17)
  {
    uint64_t v9 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v9 = v4 | 7;
    }
    uint64_t v10 = v9 + 1;
    p_dst = (std::string *)operator new(v9 + 1);
    __dst.__r_.__value_.__l.__size_ = v5;
    __dst.__r_.__value_.__r.__words[2] = v10 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  }
  else
  {
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v4;
    p_dst = &__dst;
    if (!v4) {
      goto LABEL_12;
    }
  }
  memmove(p_dst, v3, v5);
LABEL_12:
  p_dst->__r_.__value_.__s.__data_[v5] = 0;
  uint64_t v11 = (char *)operator new(0x28uLL);
  strcpy(v11, " rejected; ABM is shutting down ");
  uint64_t v12 = std::string::append(&__dst, v11, 0x20uLL);
  long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  std::string __p[2] = (void *)v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  operator delete(v11);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__dst.__r_.__value_.__l.__data_);
    xpc_object_t v14 = v2[11];
    if (!os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
LABEL_14:
      uint64_t v16 = *(void *)(a1 + 40);
      xpc_object_t v15 = (uint64_t *)(a1 + 40);
      if (!v16) {
        goto LABEL_61;
      }
      goto LABEL_32;
    }
  }
  else
  {
    xpc_object_t v14 = v2[11];
    if (!os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_14;
    }
  }
  xpc_object_t v22 = __p;
  if (SHIBYTE(__p[2]) < 0) {
    xpc_object_t v22 = (void **)__p[0];
  }
  LODWORD(__dst.__r_.__value_.__l.__data_) = 136315138;
  *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = (std::string::size_type)v22;
  _os_log_impl(&dword_1C5767000, v14, OS_LOG_TYPE_DEFAULT, "#I %s", (uint8_t *)&__dst, 0xCu);
  uint64_t v23 = *(void *)(a1 + 40);
  xpc_object_t v15 = (uint64_t *)(a1 + 40);
  if (v23)
  {
LABEL_32:
    __dst.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
    xpc_object_t v24 = (void *)HIBYTE(__p[2]);
    if (SHIBYTE(__p[2]) < 0) {
      xpc_object_t v24 = __p[1];
    }
    if (v24)
    {
      xpc_object_t v25 = xpc_dictionary_create(0, 0, 0);
      if (v25 || (xpc_object_t v25 = xpc_null_create()) != 0)
      {
        if (MEMORY[0x1C8792D30](v25) == MEMORY[0x1E4F14590])
        {
          xpc_retain(v25);
          xpc_object_t v26 = v25;
        }
        else
        {
          xpc_object_t v26 = xpc_null_create();
        }
      }
      else
      {
        xpc_object_t v26 = xpc_null_create();
        xpc_object_t v25 = 0;
      }
      xpc_release(v25);
      xpc_object_t v29 = xpc_null_create();
      uint64_t v30 = (void *)__dst.__r_.__value_.__r.__words[0];
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v26;
      xpc_release(v30);
      xpc_release(v29);
      if (SHIBYTE(__p[2]) >= 0) {
        uint64_t v31 = __p;
      }
      else {
        uint64_t v31 = (void **)__p[0];
      }
      xpc_object_t v32 = xpc_string_create((const char *)v31);
      if (!v32) {
        xpc_object_t v32 = xpc_null_create();
      }
      xpc_dictionary_set_value(v26, (const char *)*MEMORY[0x1E4F4C240], v32);
      xpc_object_t v33 = xpc_null_create();
      xpc_release(v32);
      xpc_release(v33);
    }
    unsigned int v38 = -534716415;
    dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(v15, &v38, (void **)&__dst.__r_.__value_.__l.__data_);
    xpc_release(__dst.__r_.__value_.__l.__data_);
  }
LABEL_61:
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
}

void sub_1C5926734(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *aBlock, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,xpc_object_t object,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void TraceManager::collectBasebandLogs_sync(uint64_t a1, xpc_object_t *a2, uint64_t *a3)
{
  uint64_t v142 = *MEMORY[0x1E4F143B8];
  if (MEMORY[0x1C8792D30](*a2) != MEMORY[0x1E4F14590])
  {
    xpc_object_t v6 = xpc_null_create();
    uint64_t v7 = *a3;
    *(void *)xpc_object_t object = v6;
    xpc_object_t v8 = xpc_null_create();
    (*(void (**)(uint64_t, uint64_t, unsigned char *))(v7 + 16))(v7, 3760250880, object);
    xpc_release(*(xpc_object_t *)object);
    xpc_release(v8);
    return;
  }
  memset(v137, 170, sizeof(v137));
  uint64_t v9 = (const __CFString **)*MEMORY[0x1E4F4C268];
  xpc_object_t value = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E4F4C268]);
  *(void *)xpc_object_t object = value;
  if (value) {
    xpc_retain(value);
  }
  else {
    *(void *)xpc_object_t object = xpc_null_create();
  }
  xpc::dyn_cast_or_default((uint64_t *)v137, (xpc *)object, (const object *)*MEMORY[0x1E4F4C4F8], v11);
  xpc_release(*(xpc_object_t *)object);
  memset(&v136, 170, sizeof(v136));
  std::string::size_type v108 = (const __CFString **)*MEMORY[0x1E4F4C4C8];
  xpc_object_t v12 = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E4F4C4C8]);
  v135.__r_.__value_.__r.__words[0] = (std::string::size_type)v12;
  if (v12) {
    xpc_retain(v12);
  }
  else {
    v135.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
  }
  Timestamp::Timestamp((Timestamp *)&__dst);
  Timestamp::asString(v13, 0, 9, object);
  xpc::dyn_cast_or_default();
  if ((object[23] & 0x80000000) != 0) {
    operator delete(*(void **)object);
  }
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&__dst, (void *)__dst.__r_.__value_.__l.__size_);
  xpc_release(v135.__r_.__value_.__l.__data_);
  memset(&v135, 170, sizeof(v135));
  xpc_object_t v14 = (const __CFString **)*MEMORY[0x1E4F4CA98];
  xpc_object_t v15 = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E4F4CA98]);
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v15;
  if (v15) {
    xpc_retain(v15);
  }
  else {
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
  }
  memset(object, 0, 24);
  xpc::dyn_cast_or_default();
  if ((object[23] & 0x80000000) != 0) {
    operator delete(*(void **)object);
  }
  xpc_release(__dst.__r_.__value_.__l.__data_);
  uint64_t IsInternalBuild = TelephonyUtilIsInternalBuild();
  if ((IsInternalBuild & 1) != 0 || (uint64_t IsInternalBuild = TelephonyUtilIsCarrierBuild(), IsInternalBuild)) {
    uint64_t CompressionMode = capabilities::trace::getCompressionMode((capabilities::trace *)IsInternalBuild);
  }
  else {
    uint64_t CompressionMode = 2;
  }
  BOOL v134 = 0;
  uint64_t v18 = (const void *)*MEMORY[0x1E4F47258];
  size_t v19 = strlen((const char *)*MEMORY[0x1E4F47258]);
  if (v19 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  std::string::size_type v20 = v19;
  if (v19 >= 0x17)
  {
    uint64_t v22 = (v19 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v19 | 7) != 0x17) {
      uint64_t v22 = v19 | 7;
    }
    uint64_t v23 = v22 + 1;
    p_dst = (std::string *)operator new(v22 + 1);
    __dst.__r_.__value_.__l.__size_ = v20;
    __dst.__r_.__value_.__r.__words[2] = v23 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_27;
  }
  *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v19;
  p_dst = &__dst;
  if (v19) {
LABEL_27:
  }
    memmove(p_dst, v18, v20);
  p_dst->__r_.__value_.__s.__data_[v20] = 0;
  memset(object, 0, 24);
  if (prop::compression::get((char *)&__dst, (uint64_t)object))
  {
    LODWORD(v140[0]) = -1431655766;
    if (util::convert<int>((const std::string *)object, v140, 0)) {
      uint64_t CompressionMode = LODWORD(v140[0]);
    }
    else {
      uint64_t CompressionMode = CompressionMode;
    }
  }
  if ((object[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)object);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_34;
    }
  }
  else if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_34;
  }
  operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_34:
  xpc_object_t v24 = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E4F4D210]);
  *(void *)xpc_object_t object = v24;
  if (v24) {
    xpc_retain(v24);
  }
  else {
    *(void *)xpc_object_t object = xpc_null_create();
  }
  int v25 = xpc::dyn_cast_or_default((xpc *)object, (const object *)CompressionMode);
  xpc_release(*(xpc_object_t *)object);
  if (v25)
  {
    BOOL v134 = 0;
    xpc_object_t v26 = (const void *)*MEMORY[0x1E4F47108];
    size_t v27 = strlen((const char *)*MEMORY[0x1E4F47108]);
    if (v27 > 0x7FFFFFFFFFFFFFF7) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    std::string::size_type v28 = v27;
    if (v27 >= 0x17)
    {
      uint64_t v30 = (v27 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v27 | 7) != 0x17) {
        uint64_t v30 = v27 | 7;
      }
      uint64_t v31 = v30 + 1;
      xpc_object_t v29 = (std::string *)operator new(v30 + 1);
      __dst.__r_.__value_.__l.__size_ = v28;
      __dst.__r_.__value_.__r.__words[2] = v31 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v29;
    }
    else
    {
      *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v27;
      xpc_object_t v29 = &__dst;
      if (!v27)
      {
LABEL_48:
        v29->__r_.__value_.__s.__data_[v28] = 0;
        memset(object, 0, 24);
        if (prop::compression::get((char *)&__dst, (uint64_t)object)) {
          util::convert<BOOL>((const std::string *)object, &v134, 0);
        }
        if ((object[23] & 0x80000000) != 0)
        {
          operator delete(*(void **)object);
          if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_52;
          }
        }
        else if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_52:
          xpc_object_t v32 = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E4F4CF88]);
          *(void *)xpc_object_t object = v32;
          if (v32) {
            xpc_retain(v32);
          }
          else {
            *(void *)xpc_object_t object = xpc_null_create();
          }
          BOOL v134 = xpc::dyn_cast_or_default((xpc *)object, (const object *)v134);
          xpc_release(*(xpc_object_t *)object);
          goto LABEL_58;
        }
        operator delete(__dst.__r_.__value_.__l.__data_);
        goto LABEL_52;
      }
    }
    memmove(v29, v26, v28);
    goto LABEL_48;
  }
LABEL_58:
  std::string::size_type size = HIBYTE(v135.__r_.__value_.__r.__words[2]);
  if ((v135.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v135.__r_.__value_.__l.__size_;
  }
  if (!size) {
    std::string::__assign_external(&v135, (const std::string::value_type *)*MEMORY[0x1E4F4C1C8]);
  }
  uint64_t v132 = (ctu *)0xAAAAAAAAAAAAAAAALL;
  unint64_t v133 = 0xAAAAAAAAAAAAAAAALL;
  GetABMLogServer(&v130);
  abm::HelperClient::create();
  uint64_t v34 = v131;
  if (v131 && !atomic_fetch_add(&v131->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
    std::__shared_weak_count::__release_weak(v34);
  }
  xpc_object_t xdict = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  xpc_object_t xdict = xpc_null_create();
  xpc_object_t v35 = xpc_dictionary_create(0, 0, 0);
  if (v35 || (xpc_object_t v35 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C8792D30](v35) == MEMORY[0x1E4F14590])
    {
      xpc_retain(v35);
      xpc_object_t v36 = v35;
    }
    else
    {
      xpc_object_t v36 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v36 = xpc_null_create();
    xpc_object_t v35 = 0;
  }
  xpc_release(v35);
  xpc_object_t v37 = xpc_int64_create(1500);
  if (!v37) {
    xpc_object_t v37 = xpc_null_create();
  }
  xpc_dictionary_set_value(v36, (const char *)*MEMORY[0x1E4F470A0], v37);
  xpc_object_t v38 = xpc_null_create();
  xpc_release(v37);
  xpc_release(v38);
  *(void *)&long long v39 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v39 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)xpc_object_t object = v39;
  *(_OWORD *)&object[16] = v39;
  xpc_object_t v127 = v36;
  if (v36) {
    xpc_retain(v36);
  }
  else {
    xpc_object_t v127 = xpc_null_create();
  }
  abm::HelperClient::perform();
  xpc_release(v127);
  xpc_object_t v127 = 0;
  xpc_object_t v126 = xpc_null_create();
  if (*(_DWORD *)object || MEMORY[0x1C8792D30](xdict) != MEMORY[0x1E4F14590] || !*(void *)(a1 + 256))
  {
LABEL_78:
    xpc_release(v126);
    if ((object[31] & 0x80000000) != 0) {
      operator delete(*(void **)&object[8]);
    }
    xpc_release(v36);
    xpc_release(xdict);
    int v107 = (void **)a3;
    uint64_t v40 = (std::__shared_weak_count *)v133;
    if (v133 && !atomic_fetch_add((atomic_ullong *volatile)(v133 + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
    uint64_t v41 = (const char **)MEMORY[0x1E4F4F928];
    uint64_t v42 = (const void *)*MEMORY[0x1E4F4F928];
    size_t v43 = strlen((const char *)*MEMORY[0x1E4F4F928]);
    if (v43 > 0x7FFFFFFFFFFFFFF7) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    size_t v44 = v43;
    if (v43 >= 0x17)
    {
      uint64_t v46 = (v43 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v43 | 7) != 0x17) {
        uint64_t v46 = v43 | 7;
      }
      uint64_t v47 = v46 + 1;
      xpc_object_t v45 = operator new(v46 + 1);
      *(void *)&object[8] = v44;
      *(void *)&object[16] = v47 | 0x8000000000000000;
      *(void *)xpc_object_t object = v45;
    }
    else
    {
      object[23] = v43;
      xpc_object_t v45 = object;
      if (!v43)
      {
LABEL_91:
        v45[v44] = 0;
        support::fs::createDir(object, 0x1EDu, 1);
        if ((object[23] & 0x80000000) != 0) {
          operator delete(*(void **)object);
        }
        uint64_t v132 = 0;
        uint64_t v48 = *MEMORY[0x1E4F1CF80];
        Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
        xpc_object_t v51 = Mutable;
        if (Mutable) {
          uint64_t v132 = Mutable;
        }
        if (SHIBYTE(v135.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external((std::string *)object, v135.__r_.__value_.__l.__data_, v135.__r_.__value_.__l.__size_);
        }
        else {
          *(std::string *)xpc_object_t object = v135;
        }
        ctu::cf::insert<char const*,std::string>(v51, v14, (uint64_t)object, v48, v50);
        if ((object[23] & 0x80000000) != 0)
        {
          operator delete(*(void **)object);
          if ((SHIBYTE(v136.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_100;
          }
        }
        else if ((SHIBYTE(v136.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_100:
          *(std::string *)xpc_object_t object = v136;
          goto LABEL_103;
        }
        std::string::__init_copy_ctor_external((std::string *)object, v136.__r_.__value_.__l.__data_, v136.__r_.__value_.__l.__size_);
LABEL_103:
        ctu::cf::insert<char const*,std::string>(v51, v108, (uint64_t)object, v48, v52);
        if ((object[23] & 0x80000000) != 0) {
          operator delete(*(void **)object);
        }
        memset(&__dst, 170, sizeof(__dst));
        xpc_object_t v53 = *v41;
        size_t v54 = strlen(*v41);
        if (v54 > 0x7FFFFFFFFFFFFFF7) {
          std::string::__throw_length_error[abi:ne180100]();
        }
        std::string::size_type v55 = v54;
        if (v54 >= 0x17)
        {
          uint64_t v57 = (v54 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v54 | 7) != 0x17) {
            uint64_t v57 = v54 | 7;
          }
          uint64_t v58 = v57 + 1;
          xpc_object_t v56 = (std::string *)operator new(v57 + 1);
          __dst.__r_.__value_.__l.__size_ = v55;
          __dst.__r_.__value_.__r.__words[2] = v58 | 0x8000000000000000;
          __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v56;
        }
        else
        {
          *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v54;
          xpc_object_t v56 = &__dst;
          if (!v54)
          {
            __dst.__r_.__value_.__s.__data_[0] = 0;
            if (!v25) {
              goto LABEL_131;
            }
LABEL_114:
            uint64_t v59 = a1;
            int v60 = v25;
            std::string v109 = v9;
            uint64_t v61 = (const void *)*MEMORY[0x1E4F4F940];
            size_t v62 = strlen((const char *)*MEMORY[0x1E4F4F940]);
            int v63 = SHIBYTE(v136.__r_.__value_.__r.__words[2]);
            if ((v136.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              size_t v64 = HIBYTE(v136.__r_.__value_.__r.__words[2]);
            }
            else {
              size_t v64 = v136.__r_.__value_.__l.__size_;
            }
            unint64_t v65 = v64 + v62;
            memset(object, 170, 24);
            if (v64 + v62 > 0x7FFFFFFFFFFFFFF7) {
              std::string::__throw_length_error[abi:ne180100]();
            }
            size_t v66 = v62;
            if (v65 > 0x16)
            {
              uint64_t v86 = (v65 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v65 | 7) != 0x17) {
                uint64_t v86 = v65 | 7;
              }
              uint64_t v87 = v86 + 1;
              uint64_t v67 = operator new(v86 + 1);
              *(void *)&object[8] = v65;
              *(void *)&object[16] = v87 | 0x8000000000000000;
              *(void *)xpc_object_t object = v67;
              int v25 = v60;
              if (!v66) {
                goto LABEL_121;
              }
            }
            else
            {
              memset(object, 0, 24);
              uint64_t v67 = object;
              object[23] = v64 + v62;
              int v25 = v60;
              if (!v62)
              {
LABEL_121:
                a1 = v59;
                if (v64)
                {
                  if (v63 >= 0) {
                    size_t v68 = &v136;
                  }
                  else {
                    size_t v68 = (std::string *)v136.__r_.__value_.__r.__words[0];
                  }
                  memmove(&v67[v66], v68, v64);
                }
                v67[v66 + v64] = 0;
                std::string::size_type v69 = std::string::append((std::string *)object, "/", 1uLL);
                std::string::size_type v70 = v69->__r_.__value_.__r.__words[0];
                v140[0] = (const void *)v69->__r_.__value_.__l.__size_;
                *(const void **)((char *)v140 + 7) = *(const void **)((char *)&v69->__r_.__value_.__r.__words[1] + 7);
                char v71 = HIBYTE(v69->__r_.__value_.__r.__words[2]);
                v69->__r_.__value_.__l.__size_ = 0;
                v69->__r_.__value_.__r.__words[2] = 0;
                v69->__r_.__value_.__r.__words[0] = 0;
                if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(__dst.__r_.__value_.__l.__data_);
                }
                __dst.__r_.__value_.__r.__words[0] = v70;
                __dst.__r_.__value_.__l.__size_ = (std::string::size_type)v140[0];
                *(std::string::size_type *)((char *)&__dst.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v140 + 7);
                *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v71;
                if ((object[23] & 0x80000000) != 0) {
                  operator delete(*(void **)object);
                }
                uint64_t v9 = v109;
LABEL_131:
                support::fs::createDir((const char *)&__dst, 0x1EDu, 1);
                size_t v73 = v132;
                if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
                  std::string::__init_copy_ctor_external((std::string *)object, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
                }
                else {
                  *(std::string *)xpc_object_t object = __dst;
                }
                ctu::cf::insert<char const*,std::string>(v73, (const __CFString **)*MEMORY[0x1E4F4C7F8], (uint64_t)object, v48, v72);
                if ((object[23] & 0x80000000) != 0)
                {
                  operator delete(*(void **)object);
                  if ((v137[23] & 0x80000000) == 0) {
                    goto LABEL_136;
                  }
                }
                else if ((v137[23] & 0x80000000) == 0)
                {
LABEL_136:
                  *(_OWORD *)xpc_object_t object = *(_OWORD *)v137;
                  *(void *)&object[16] = *(void *)&v137[16];
                  goto LABEL_139;
                }
                std::string::__init_copy_ctor_external((std::string *)object, *(const std::string::value_type **)v137, *(std::string::size_type *)&v137[8]);
LABEL_139:
                ctu::cf::insert<char const*,std::string>(v73, v9, (uint64_t)object, v48, v74);
                if ((object[23] & 0x80000000) != 0) {
                  operator delete(*(void **)object);
                }
                size_t v75 = *(std::__shared_weak_count **)(a1 + 128);
                if (!v75 || (v76 = *(void *)(a1 + 120), (uint64_t v77 = std::__shared_weak_count::lock(v75)) == 0)) {
                  std::__throw_bad_weak_ptr[abi:ne180100]();
                }
                uint64_t v78 = v77;
                p_shared_weak_owners = &v77->__shared_weak_owners_;
                atomic_fetch_add_explicit(&v77->__shared_weak_owners_, 1uLL, memory_order_relaxed);
                if (!atomic_fetch_add(&v77->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
                  std::__shared_weak_count::__release_weak(v78);
                }
                memset(object, 170, 16);
                aBlock[0] = MEMORY[0x1E4F143A8];
                aBlock[1] = 1174405120;
                aBlock[2] = ___ZN12TraceManager24collectBasebandLogs_syncEN3xpc4dictEN8dispatch5blockIU13block_pointerFviS1_EEE_block_invoke;
                aBlock[3] = &__block_descriptor_tmp_51_1;
                aBlock[4] = a1;
                void aBlock[5] = v76;
                BOOL v115 = v78;
                atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
                xpc_object_t v80 = *v107;
                if (*v107) {
                  xpc_object_t v80 = _Block_copy(v80);
                }
                BOOL v116 = v80;
                if (SHIBYTE(v136.__r_.__value_.__r.__words[2]) < 0) {
                  std::string::__init_copy_ctor_external(&v117, v136.__r_.__value_.__l.__data_, v136.__r_.__value_.__l.__size_);
                }
                else {
                  std::string v117 = v136;
                }
                int v119 = v25;
                if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
                  std::string::__init_copy_ctor_external(&v118, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
                }
                else {
                  std::string v118 = __dst;
                }
                BOOL v120 = v134;
                xpc_object_t v82 = _Block_copy(aBlock);
                xpc_object_t v83 = *(NSObject **)(a1 + 136);
                if (v83) {
                  dispatch_retain(*(dispatch_object_t *)(a1 + 136));
                }
                *(void *)xpc_object_t object = v82;
                *(void *)&object[8] = v83;
                size_t v84 = v132;
                ctu::cf_to_xpc((uint64_t *)v140, v132, v81);
                xpc_object_t v85 = (xpc_object_t)v140[0];
                if (v140[0] && MEMORY[0x1C8792D30](v140[0]) == MEMORY[0x1E4F14590]) {
                  xpc_retain(v85);
                }
                else {
                  xpc_object_t v85 = xpc_null_create();
                }
                xpc_release((xpc_object_t)v140[0]);
                int v88 = (const char *)(a1 + 168);
                if (*(char *)(a1 + 191) < 0) {
                  int v88 = *(const char **)v88;
                }
                xpc_object_t v89 = xpc_string_create(v88);
                if (!v89) {
                  xpc_object_t v89 = xpc_null_create();
                }
                xpc_dictionary_set_value(v85, (const char *)*MEMORY[0x1E4F4C488], v89);
                xpc_object_t v90 = xpc_null_create();
                xpc_release(v89);
                xpc_release(v90);
                xpc_object_t v113 = v85;
                if (v85)
                {
                  xpc_retain(v85);
                  uint64_t v112 = 0;
                  if (v82) {
                    goto LABEL_169;
                  }
                }
                else
                {
                  uint64_t v112 = 0;
                  xpc_object_t v113 = xpc_null_create();
                  if (v82)
                  {
LABEL_169:
                    BOOL v91 = _Block_copy(v82);
                    uint64_t v92 = *MEMORY[0x1E4F47210];
                    std::string v110 = v91;
                    xpc_object_t v111 = v83;
                    if (!v83) {
                      goto LABEL_171;
                    }
                    goto LABEL_170;
                  }
                }
                BOOL v91 = 0;
                uint64_t v92 = *MEMORY[0x1E4F47210];
                std::string v110 = 0;
                xpc_object_t v111 = v83;
                if (!v83)
                {
LABEL_171:
                  TraceManager::runOnHelper_sync((void *)a1, (const char *)9, v92, 0x1388u, 1, &v113, &v112, &v110);
                  if (v83) {
                    dispatch_release(v83);
                  }
                  if (v91) {
                    _Block_release(v91);
                  }
                  xpc_release(v113);
                  xpc_object_t v113 = 0;
                  xpc_release(v85);
                  if (v83) {
                    dispatch_release(v83);
                  }
                  if (v82) {
                    _Block_release(v82);
                  }
                  if (SHIBYTE(v118.__r_.__value_.__r.__words[2]) < 0)
                  {
                    operator delete(v118.__r_.__value_.__l.__data_);
                    if ((SHIBYTE(v117.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                    {
LABEL_181:
                      xpc_object_t v93 = v116;
                      if (!v116)
                      {
LABEL_189:
                        if (v115) {
                          std::__shared_weak_count::__release_weak(v115);
                        }
                        std::__shared_weak_count::__release_weak(v78);
                        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
                        {
                          operator delete(__dst.__r_.__value_.__l.__data_);
                          if (!v84) {
                            goto LABEL_196;
                          }
                        }
                        else if (!v84)
                        {
LABEL_196:
                          if (SHIBYTE(v135.__r_.__value_.__r.__words[2]) < 0) {
                            goto LABEL_236;
                          }
LABEL_197:
                          if (SHIBYTE(v136.__r_.__value_.__r.__words[2]) < 0) {
                            goto LABEL_237;
                          }
                          goto LABEL_198;
                        }
                        CFRelease(v84);
                        goto LABEL_196;
                      }
LABEL_188:
                      _Block_release(v93);
                      goto LABEL_189;
                    }
                  }
                  else if ((SHIBYTE(v117.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  {
                    goto LABEL_181;
                  }
                  operator delete(v117.__r_.__value_.__l.__data_);
                  xpc_object_t v93 = v116;
                  if (!v116) {
                    goto LABEL_189;
                  }
                  goto LABEL_188;
                }
LABEL_170:
                dispatch_retain(v83);
                goto LABEL_171;
              }
            }
            memcpy(v67, v61, v66);
            goto LABEL_121;
          }
        }
        memmove(v56, v53, v55);
        v56->__r_.__value_.__s.__data_[v55] = 0;
        if (!v25) {
          goto LABEL_131;
        }
        goto LABEL_114;
      }
    }
    memmove(v45, v42, v44);
    goto LABEL_91;
  }
  memset(v140, 170, sizeof(v140));
  xpc_object_t v94 = xpc_dictionary_get_value(xdict, (const char *)*MEMORY[0x1E4F47178]);
  v125[0] = v94;
  if (v94) {
    xpc_retain(v94);
  }
  else {
    v125[0] = xpc_null_create();
  }
  memset(&__dst, 0, sizeof(__dst));
  xpc::dyn_cast_or_default();
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  xpc_release(v125[0]);
  uint64_t v95 = *(NSObject **)(a1 + 88);
  if (os_log_type_enabled(v95, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v96 = *(void *)(*(void *)(a1 + 256) + 16);
    LODWORD(__dst.__r_.__value_.__l.__data_) = 67109120;
    HIDWORD(__dst.__r_.__value_.__r.__words[0]) = v96;
    _os_log_impl(&dword_1C5767000, v95, OS_LOG_TYPE_DEFAULT, "#I Baseband Log tracker size: %d", (uint8_t *)&__dst, 8u);
  }
  v125[0] = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  v125[1] = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  BBLogTracker::getLog(*(void *)(a1 + 256), v140, (uint64_t *)v125);
  xpc_object_t v97 = v125[0];
  if (!v125[0])
  {
    std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)v125);
    if (SHIBYTE(v140[2]) < 0) {
      operator delete((void *)v140[0]);
    }
    goto LABEL_78;
  }
  int v98 = *(NSObject **)(a1 + 88);
  BOOL v99 = os_log_type_enabled(v98, OS_LOG_TYPE_DEFAULT);
  uint64_t v100 = MEMORY[0x1E4F14590];
  if (v99)
  {
    asString((uint64_t)v97, &__dst);
    size_t v101 = (__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
         ? &__dst
         : (std::string *)__dst.__r_.__value_.__r.__words[0];
    *(_DWORD *)std::string buf = 136315138;
    xpc_object_t v139 = v101;
    _os_log_impl(&dword_1C5767000, v98, OS_LOG_TYPE_DEFAULT, "#I Log tracker info: %s", buf, 0xCu);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__dst.__r_.__value_.__l.__data_);
    }
  }
  xpc_object_t v102 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v103 = v102;
  if (v102)
  {
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v102;
  }
  else
  {
    xpc_object_t v103 = xpc_null_create();
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v103;
    if (!v103)
    {
      xpc_object_t v104 = xpc_null_create();
      xpc_object_t v103 = 0;
      goto LABEL_224;
    }
  }
  if (MEMORY[0x1C8792D30](v103) == v100)
  {
    xpc_retain(v103);
    goto LABEL_225;
  }
  xpc_object_t v104 = xpc_null_create();
LABEL_224:
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v104;
LABEL_225:
  xpc_release(v103);
  xpc::dict::operator=(&v126, (xpc_object_t *)&__dst.__r_.__value_.__l.__data_);
  xpc_release(__dst.__r_.__value_.__l.__data_);
  xpc_object_t v123 = xpc_string_create((const char *)*MEMORY[0x1E4F4F928]);
  if (!v123) {
    xpc_object_t v123 = xpc_null_create();
  }
  std::string::size_type v105 = *MEMORY[0x1E4F4C7F8];
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&v126;
  __dst.__r_.__value_.__l.__size_ = v105;
  xpc::dict::object_proxy::operator=((uint64_t)&__dst, &v123, &v124);
  xpc_release(v124);
  xpc_object_t v124 = 0;
  xpc_release(v123);
  xpc_object_t v123 = 0;
  std::string v106 = (const char *)v125[0];
  if (*((char *)v125[0] + 23) < 0) {
    std::string v106 = *(const char **)v125[0];
  }
  xpc_object_t v121 = xpc_string_create(v106);
  if (!v121) {
    xpc_object_t v121 = xpc_null_create();
  }
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&v126;
  __dst.__r_.__value_.__l.__size_ = (std::string::size_type)v108;
  xpc::dict::object_proxy::operator=((uint64_t)&__dst, &v121, &v122);
  xpc_release(v122);
  xpc_object_t v122 = 0;
  xpc_release(v121);
  xpc_object_t v121 = 0;
  LODWORD(__dst.__r_.__value_.__l.__data_) = 0;
  dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(a3, (unsigned int *)&__dst, &v126);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)v125);
  if (SHIBYTE(v140[2]) < 0) {
    operator delete((void *)v140[0]);
  }
  xpc_release(v126);
  if ((object[31] & 0x80000000) != 0) {
    operator delete(*(void **)&object[8]);
  }
  xpc_release(v36);
  xpc_release(xdict);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&v132);
  if ((SHIBYTE(v135.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_197;
  }
LABEL_236:
  operator delete(v135.__r_.__value_.__l.__data_);
  if (SHIBYTE(v136.__r_.__value_.__r.__words[2]) < 0)
  {
LABEL_237:
    operator delete(v136.__r_.__value_.__l.__data_);
    if ((v137[23] & 0x80000000) != 0) {
      goto LABEL_238;
    }
    return;
  }
LABEL_198:
  if ((v137[23] & 0x80000000) != 0) {
LABEL_238:
  }
    operator delete(*(void **)v137);
}

void sub_1C5927A78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, xpc_object_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,std::__shared_weak_count *a22,void *aBlock,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,xpc_object_t a41,uint64_t a42,xpc_object_t object,xpc_object_t a44,xpc_object_t a45,void *__p,int a47,__int16 a48,char a49,char a50,int a51,__int16 a52,char a53,char a54,uint64_t a55,xpc_object_t a56,char a57,uint64_t a58,char a59)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void TraceManager::collectLogs_sync(void *a1, xpc_object_t *a2, void (***a3)(void *, uint64_t, stat *))
{
  size_t v4 = a2;
  uint64_t v229 = *MEMORY[0x1E4F143B8];
  if (MEMORY[0x1C8792D30](*a2) != MEMORY[0x1E4F14590])
  {
    xpc_object_t v6 = xpc_null_create();
    uint64_t v7 = *a3;
    *(void *)&v228.st_dev = v6;
    xpc_object_t v8 = xpc_null_create();
    v7[2](v7, 3760250880, &v228);
    xpc_release(*(xpc_object_t *)&v228.st_dev);
    xpc_release(v8);
    return;
  }
  memset(__sz, 170, sizeof(__sz));
  uint64_t v9 = (const __CFString **)*MEMORY[0x1E4F4C268];
  xpc_object_t value = xpc_dictionary_get_value(*v4, (const char *)*MEMORY[0x1E4F4C268]);
  *(void *)&v228.st_dev = value;
  if (value) {
    xpc_retain(value);
  }
  else {
    *(void *)&v228.st_dev = xpc_null_create();
  }
  xpc_object_t v12 = (char *)*MEMORY[0x1E4F4C630];
  xpc::dyn_cast_or_default((uint64_t *)__sz, (xpc *)&v228, (const object *)*MEMORY[0x1E4F4C630], v11);
  xpc_release(*(xpc_object_t *)&v228.st_dev);
  memset(v224, 170, sizeof(v224));
  uint64_t v13 = (const __CFString **)*MEMORY[0x1E4F4C4C8];
  xpc_object_t v14 = xpc_dictionary_get_value(*v4, (const char *)*MEMORY[0x1E4F4C4C8]);
  v222[1].__r_.__value_.__r.__words[0] = (std::string::size_type)v14;
  if (v14) {
    xpc_retain(v14);
  }
  else {
    v222[1].__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
  }
  Timestamp::Timestamp((Timestamp *)v223);
  Timestamp::asString((uint64_t)v223, 0, 9, &v228);
  xpc::dyn_cast_or_default();
  if (SHIBYTE(v228.st_gid) < 0) {
    operator delete(*(void **)&v228.st_dev);
  }
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v223, (void *)v223[1]);
  xpc_release(v222[1].__r_.__value_.__l.__data_);
  memset(v223, 170, sizeof(v223));
  xpc_object_t v15 = (const __CFString **)*MEMORY[0x1E4F4C690];
  xpc_object_t v16 = xpc_dictionary_get_value(*v4, (const char *)*MEMORY[0x1E4F4C690]);
  v222[1].__r_.__value_.__r.__words[0] = (std::string::size_type)v16;
  if (v16) {
    xpc_retain(v16);
  }
  else {
    v222[1].__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
  }
  memset(&v228, 0, 24);
  xpc::dyn_cast_or_default();
  if (SHIBYTE(v228.st_gid) < 0) {
    operator delete(*(void **)&v228.st_dev);
  }
  xpc_release(v222[1].__r_.__value_.__l.__data_);
  memset(&v222[1], 170, sizeof(std::string));
  size_t v17 = (const __CFString **)*MEMORY[0x1E4F4CA38];
  xpc_object_t v18 = xpc_dictionary_get_value(*v4, (const char *)*MEMORY[0x1E4F4CA38]);
  v222[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v18;
  if (v18) {
    xpc_retain(v18);
  }
  else {
    v222[0].__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
  }
  memset(&v228, 0, 24);
  xpc::dyn_cast_or_default();
  if (SHIBYTE(v228.st_gid) < 0) {
    operator delete(*(void **)&v228.st_dev);
  }
  xpc_release(v222[0].__r_.__value_.__l.__data_);
  memset(v222, 170, 24);
  size_t v19 = (const __CFString **)*MEMORY[0x1E4F4CA98];
  xpc_object_t v20 = xpc_dictionary_get_value(*v4, (const char *)*MEMORY[0x1E4F4CA98]);
  __dst[0] = v20;
  if (v20) {
    xpc_retain(v20);
  }
  else {
    __dst[0] = xpc_null_create();
  }
  memset(&v228, 0, 24);
  xpc::dyn_cast_or_default();
  if (SHIBYTE(v228.st_gid) < 0) {
    operator delete(*(void **)&v228.st_dev);
  }
  xpc_release(__dst[0]);
  xpc_object_t v21 = (const __CFString **)*MEMORY[0x1E4F4C180];
  xpc_object_t v22 = xpc_dictionary_get_value(*v4, (const char *)*MEMORY[0x1E4F4C180]);
  *(void *)&v228.st_dev = v22;
  if (v22) {
    xpc_retain(v22);
  }
  else {
    *(void *)&v228.st_dev = xpc_null_create();
  }
  v191 = v19;
  __s = v12;
  int v185 = xpc::dyn_cast_or_default((xpc *)&v228, (const object *)7);
  uint64_t v186 = v21;
  long long v190 = v13;
  uint64_t v188 = v17;
  xpc_release(*(xpc_object_t *)&v228.st_dev);
  char v221 = 1;
  __src = (void *)*MEMORY[0x1E4F4D268];
  size_t v23 = strlen((const char *)*MEMORY[0x1E4F4D268]);
  if (v23 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  xpc_object_t v24 = (void *)v23;
  v187 = v15;
  uint64_t v189 = v9;
  if (v23 >= 0x17)
  {
    uint64_t v26 = (v23 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v23 | 7) != 0x17) {
      uint64_t v26 = v23 | 7;
    }
    uint64_t v27 = v26 + 1;
    int v25 = operator new(v26 + 1);
    xpc_object_t __dst[2] = (xpc_object_t)(v27 | 0x8000000000000000);
    __dst[0] = v25;
    __dst[1] = v24;
    goto LABEL_36;
  }
  HIBYTE(__dst[2]) = v23;
  int v25 = __dst;
  if (v23) {
LABEL_36:
  }
    memmove(v25, __src, (size_t)v24);
  *((unsigned char *)v24 + (void)v25) = 0;
  memset(&v228, 0, 24);
  if (prop::logfilter::get((char *)__dst, (uint64_t)&v228)) {
    util::convert<BOOL>((const std::string *)&v228, (BOOL *)&v221, 0);
  }
  if (SHIBYTE(v228.st_gid) < 0)
  {
    operator delete(*(void **)&v228.st_dev);
    if ((SHIBYTE(__dst[2]) & 0x80000000) == 0) {
      goto LABEL_41;
    }
  }
  else if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
  {
    goto LABEL_41;
  }
  operator delete(__dst[0]);
LABEL_41:
  xpc_object_t v28 = xpc_dictionary_get_value(*v4, (const char *)__src);
  *(void *)&v228.st_dev = v28;
  if (v28) {
    xpc_retain(v28);
  }
  else {
    *(void *)&v228.st_dev = xpc_null_create();
  }
  char v221 = xpc::dyn_cast_or_default((xpc *)&v228, (const object *)v221);
  xpc_release(*(xpc_object_t *)&v228.st_dev);
  uint64_t IsInternalBuild = TelephonyUtilIsInternalBuild();
  if ((IsInternalBuild & 1) != 0 || (uint64_t IsInternalBuild = TelephonyUtilIsCarrierBuild(), IsInternalBuild)) {
    uint64_t CompressionMode = capabilities::trace::getCompressionMode((capabilities::trace *)IsInternalBuild);
  }
  else {
    uint64_t CompressionMode = 2;
  }
  BOOL v220 = 0;
  uint64_t v31 = (const void *)*MEMORY[0x1E4F47258];
  size_t v32 = strlen((const char *)*MEMORY[0x1E4F47258]);
  if (v32 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  xpc_object_t v33 = (void *)v32;
  if (v32 >= 0x17)
  {
    uint64_t v35 = (v32 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v32 | 7) != 0x17) {
      uint64_t v35 = v32 | 7;
    }
    uint64_t v36 = v35 + 1;
    uint64_t v34 = operator new(v35 + 1);
    xpc_object_t __dst[2] = (xpc_object_t)(v36 | 0x8000000000000000);
    __dst[0] = v34;
    __dst[1] = v33;
    goto LABEL_57;
  }
  HIBYTE(__dst[2]) = v32;
  uint64_t v34 = __dst;
  if (v32) {
LABEL_57:
  }
    memmove(v34, v31, (size_t)v33);
  *((unsigned char *)v33 + (void)v34) = 0;
  memset(&v228, 0, 24);
  if (prop::compression::get((char *)__dst, (uint64_t)&v228))
  {
    LODWORD(v226.__r_.__value_.__l.__data_) = -1431655766;
    if (util::convert<int>((const std::string *)&v228, &v226, 0)) {
      uint64_t CompressionMode = LODWORD(v226.__r_.__value_.__l.__data_);
    }
    else {
      uint64_t CompressionMode = CompressionMode;
    }
  }
  if (SHIBYTE(v228.st_gid) < 0)
  {
    operator delete(*(void **)&v228.st_dev);
    if ((SHIBYTE(__dst[2]) & 0x80000000) == 0) {
      goto LABEL_64;
    }
  }
  else if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
  {
    goto LABEL_64;
  }
  operator delete(__dst[0]);
LABEL_64:
  v184 = (const __CFString **)*MEMORY[0x1E4F4D210];
  xpc_object_t v37 = xpc_dictionary_get_value(*v4, (const char *)*MEMORY[0x1E4F4D210]);
  *(void *)&v228.st_dev = v37;
  if (v37) {
    xpc_retain(v37);
  }
  else {
    *(void *)&v228.st_dev = xpc_null_create();
  }
  int v38 = xpc::dyn_cast_or_default((xpc *)&v228, (const object *)CompressionMode);
  xpc_release(*(xpc_object_t *)&v228.st_dev);
  if (v38)
  {
    BOOL v220 = 0;
    long long v39 = (const void *)*MEMORY[0x1E4F47108];
    size_t v40 = strlen((const char *)*MEMORY[0x1E4F47108]);
    if (v40 > 0x7FFFFFFFFFFFFFF7) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    uint64_t v41 = (void *)v40;
    if (v40 >= 0x17)
    {
      uint64_t v43 = (v40 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v40 | 7) != 0x17) {
        uint64_t v43 = v40 | 7;
      }
      uint64_t v44 = v43 + 1;
      uint64_t v42 = operator new(v43 + 1);
      xpc_object_t __dst[2] = (xpc_object_t)(v44 | 0x8000000000000000);
      __dst[0] = v42;
      __dst[1] = v41;
    }
    else
    {
      HIBYTE(__dst[2]) = v40;
      uint64_t v42 = __dst;
      if (!v40)
      {
LABEL_78:
        *((unsigned char *)v41 + (void)v42) = 0;
        memset(&v228, 0, 24);
        if (prop::compression::get((char *)__dst, (uint64_t)&v228)) {
          util::convert<BOOL>((const std::string *)&v228, &v220, 0);
        }
        if (SHIBYTE(v228.st_gid) < 0)
        {
          operator delete(*(void **)&v228.st_dev);
          if ((SHIBYTE(__dst[2]) & 0x80000000) == 0) {
            goto LABEL_82;
          }
        }
        else if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
        {
LABEL_82:
          xpc_object_t v45 = xpc_dictionary_get_value(*v4, (const char *)*MEMORY[0x1E4F4CF88]);
          *(void *)&v228.st_dev = v45;
          if (v45) {
            xpc_retain(v45);
          }
          else {
            *(void *)&v228.st_dev = xpc_null_create();
          }
          BOOL v220 = xpc::dyn_cast_or_default((xpc *)&v228, (const object *)v220);
          xpc_release(*(xpc_object_t *)&v228.st_dev);
          goto LABEL_88;
        }
        operator delete(__dst[0]);
        goto LABEL_82;
      }
    }
    memmove(v42, v39, (size_t)v41);
    goto LABEL_78;
  }
LABEL_88:
  char v219 = 1;
  key = (char *)*MEMORY[0x1E4F4CBA8];
  size_t v46 = strlen((const char *)*MEMORY[0x1E4F4CBA8]);
  if (v46 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v47 = (void *)v46;
  if (v46 >= 0x17)
  {
    uint64_t v49 = (v46 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v46 | 7) != 0x17) {
      uint64_t v49 = v46 | 7;
    }
    uint64_t v50 = v49 + 1;
    uint64_t v48 = operator new(v49 + 1);
    xpc_object_t __dst[2] = (xpc_object_t)(v50 | 0x8000000000000000);
    __dst[0] = v48;
    __dst[1] = v47;
    goto LABEL_95;
  }
  HIBYTE(__dst[2]) = v46;
  uint64_t v48 = __dst;
  if (v46) {
LABEL_95:
  }
    memmove(v48, key, (size_t)v47);
  *((unsigned char *)v47 + (void)v48) = 0;
  memset(&v228, 0, 24);
  if (prop::systemlogs::get((char *)__dst, (uint64_t)&v228)) {
    util::convert<BOOL>((const std::string *)&v228, (BOOL *)&v219, 0);
  }
  if (SHIBYTE(v228.st_gid) < 0)
  {
    operator delete(*(void **)&v228.st_dev);
    if ((SHIBYTE(__dst[2]) & 0x80000000) == 0) {
      goto LABEL_100;
    }
  }
  else if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
  {
    goto LABEL_100;
  }
  operator delete(__dst[0]);
LABEL_100:
  xpc_object_t v51 = xpc_dictionary_get_value(*v4, key);
  *(void *)&v228.st_dev = v51;
  if (v51) {
    xpc_retain(v51);
  }
  else {
    *(void *)&v228.st_dev = xpc_null_create();
  }
  char v219 = xpc::dyn_cast_or_default((xpc *)&v228, (const object *)v219);
  xpc_release(*(xpc_object_t *)&v228.st_dev);
  std::string::size_type size = HIBYTE(v222[0].__r_.__value_.__r.__words[2]);
  if ((v222[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v222[0].__r_.__value_.__l.__size_;
  }
  if (!size) {
    std::string::__assign_external(v222, (const std::string::value_type *)*MEMORY[0x1E4F4C1C8]);
  }
  xpc_object_t v53 = (const void *)*MEMORY[0x1E4F4C198];
  size_t v54 = strlen((const char *)*MEMORY[0x1E4F4C198]);
  if (v54 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  std::string::size_type v55 = (void *)v54;
  if (v54 >= 0x17)
  {
    uint64_t v57 = (v54 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v54 | 7) != 0x17) {
      uint64_t v57 = v54 | 7;
    }
    uint64_t v58 = v57 + 1;
    xpc_object_t v56 = operator new(v57 + 1);
    xpc_object_t __dst[2] = (xpc_object_t)(v58 | 0x8000000000000000);
    __dst[0] = v56;
    __dst[1] = v55;
    goto LABEL_116;
  }
  HIBYTE(__dst[2]) = v54;
  xpc_object_t v56 = __dst;
  if (v54) {
LABEL_116:
  }
    memmove(v56, v53, (size_t)v55);
  *((unsigned char *)v55 + (void)v56) = 0;
  memset(&v228, 0, 24);
  if (!prop::systemlogs::get((char *)__dst, (uint64_t)&v228))
  {
    unsigned int data = 0;
    if ((SHIBYTE(v228.st_gid) & 0x80000000) == 0) {
      goto LABEL_125;
    }
    goto LABEL_124;
  }
  LODWORD(v226.__r_.__value_.__l.__data_) = -1431655766;
  if (util::convert<int>((const std::string *)&v228, &v226, 0)) {
    unsigned int data = v226.__r_.__value_.__l.__data_;
  }
  else {
    unsigned int data = 0;
  }
  if (SHIBYTE(v228.st_gid) < 0) {
LABEL_124:
  }
    operator delete(*(void **)&v228.st_dev);
LABEL_125:
  if (SHIBYTE(__dst[2]) < 0) {
    operator delete(__dst[0]);
  }
  v183 = (const __CFString **)*MEMORY[0x1E4F4C2F8];
  xpc_object_t v60 = xpc_dictionary_get_value(*v4, (const char *)*MEMORY[0x1E4F4C2F8]);
  *(void *)&v228.st_dev = v60;
  if (v60) {
    xpc_retain(v60);
  }
  else {
    *(void *)&v228.st_dev = xpc_null_create();
  }
  int v61 = xpc::dyn_cast_or_default((xpc *)&v228, (const object *)data);
  xpc_release(*(xpc_object_t *)&v228.st_dev);
  if ((TelephonyUtilIsInternalBuild() & 1) != 0
    || ((char IsCarrierBuild = TelephonyUtilIsCarrierBuild(), v61 != 2) ? (v63 = 1) : (v63 = IsCarrierBuild), (v63 & 1) != 0))
  {
    if (v61 == 2)
    {
      size_t v64 = (uint64_t **)a1[32];
      if (v64)
      {
        unint64_t v65 = a1[11];
        if (os_log_type_enabled(v65, OS_LOG_TYPE_DEFAULT))
        {
          abm::helper::asString();
          if ((v228.st_gid & 0x80000000) == 0) {
            size_t v66 = &v228;
          }
          else {
            size_t v66 = *(stat **)&v228.st_dev;
          }
          LODWORD(__dst[0]) = 136315138;
          *(xpc_object_t *)((char *)__dst + 4) = v66;
          _os_log_impl(&dword_1C5767000, v65, OS_LOG_TYPE_DEFAULT, "#I Detected a log dump with sysdiagnose mode, overriding compression mode to %s", (uint8_t *)__dst, 0xCu);
          if (SHIBYTE(v228.st_gid) < 0) {
            operator delete(*(void **)&v228.st_dev);
          }
          size_t v64 = (uint64_t **)a1[32];
        }
        BBLogTracker::addLog(v64, (long long *)v224, 2, (uint64_t)__sz);
        uint64_t v67 = (uint64_t *)a1[32];
        if ((unint64_t)v67[2] >= 0xB)
        {
          do
            std::__tree<std::__value_type<std::string,std::shared_ptr<LogInfo>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<LogInfo>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<LogInfo>>>>::erase(v67, *v67);
          while ((unint64_t)v67[2] > 0xA);
        }
        int v38 = 0;
      }
      int v182 = 2;
    }
    else
    {
      int v182 = v61;
    }
  }
  else
  {
    size_t v68 = a1[11];
    if (os_log_type_enabled(v68, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v228.st_dev) = 0;
      _os_log_error_impl(&dword_1C5767000, v68, OS_LOG_TYPE_ERROR, "Detected a log dump with SYSDIAGNOSE mode in customer build, overriding to OFF", (uint8_t *)&v228, 2u);
    }
    int v182 = 0;
  }
  memset(__dst, 170, 24);
  std::string::size_type v69 = (const void *)*MEMORY[0x1E4F4F928];
  size_t v70 = strlen((const char *)*MEMORY[0x1E4F4F928]);
  if (v70 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  char v71 = (void *)v70;
  if (v70 >= 0x17)
  {
    uint64_t v73 = (v70 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v70 | 7) != 0x17) {
      uint64_t v73 = v70 | 7;
    }
    uint64_t v74 = v73 + 1;
    CFAllocatorRef v72 = operator new(v73 + 1);
    xpc_object_t __dst[2] = (xpc_object_t)(v74 | 0x8000000000000000);
    __dst[0] = v72;
    __dst[1] = v71;
LABEL_160:
    memmove(v72, v69, (size_t)v71);
    *((unsigned char *)v71 + (void)v72) = 0;
    if (!v38) {
      goto LABEL_177;
    }
    goto LABEL_161;
  }
  HIBYTE(__dst[2]) = v70;
  CFAllocatorRef v72 = __dst;
  if (v70) {
    goto LABEL_160;
  }
  LOBYTE(__dst[0]) = 0;
  if (!v38) {
    goto LABEL_177;
  }
LABEL_161:
  size_t v75 = v4;
  int v76 = v38;
  v181 = a3;
  uint64_t v77 = a1;
  uint64_t v78 = (const void *)*MEMORY[0x1E4F4F940];
  size_t v79 = strlen((const char *)*MEMORY[0x1E4F4F940]);
  int v80 = SHIBYTE(v224[2]);
  if (SHIBYTE(v224[2]) >= 0) {
    size_t v81 = HIBYTE(v224[2]);
  }
  else {
    size_t v81 = (size_t)v224[1];
  }
  __darwin_ino64_t v82 = v81 + v79;
  memset(&v228, 170, 24);
  if (v81 + v79 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v83 = v79;
  if (v82 > 0x16)
  {
    uint64_t v92 = (v82 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v82 | 7) != 0x17) {
      uint64_t v92 = v82 | 7;
    }
    uint64_t v93 = v92 + 1;
    size_t v84 = (char *)operator new(v92 + 1);
    v228.st_ino = v82;
    *(void *)&v228.st_uid = v93 | 0x8000000000000000;
    *(void *)&v228.st_dev = v84;
    int v38 = v76;
    if (!v83) {
      goto LABEL_168;
    }
    goto LABEL_167;
  }
  memset(&v228, 0, 24);
  size_t v84 = (char *)&v228;
  HIBYTE(v228.st_gid) = v81 + v79;
  int v38 = v76;
  if (v79) {
LABEL_167:
  }
    memcpy(v84, v78, v83);
LABEL_168:
  xpc_object_t v85 = &v84[v83];
  size_t v4 = v75;
  if (v81)
  {
    if (v80 >= 0) {
      uint64_t v86 = v224;
    }
    else {
      uint64_t v86 = (void **)v224[0];
    }
    memmove(v85, v86, v81);
  }
  v85[v81] = 0;
  uint64_t v87 = std::string::append((std::string *)&v228, "/", 1uLL);
  int v88 = (void *)v87->__r_.__value_.__r.__words[0];
  v226.__r_.__value_.__r.__words[0] = v87->__r_.__value_.__l.__size_;
  *(std::string::size_type *)((char *)v226.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v87->__r_.__value_.__r.__words[1] + 7);
  char v89 = HIBYTE(v87->__r_.__value_.__r.__words[2]);
  v87->__r_.__value_.__l.__size_ = 0;
  v87->__r_.__value_.__r.__words[2] = 0;
  v87->__r_.__value_.__r.__words[0] = 0;
  a1 = v77;
  if (SHIBYTE(__dst[2]) < 0) {
    operator delete(__dst[0]);
  }
  __dst[0] = v88;
  __dst[1] = v226.__r_.__value_.__l.__data_;
  *(xpc_object_t *)((char *)&__dst[1] + 7) = *(xpc_object_t *)((char *)v226.__r_.__value_.__r.__words + 7);
  HIBYTE(__dst[2]) = v89;
  a3 = v181;
  if (SHIBYTE(v228.st_gid) < 0) {
    operator delete(*(void **)&v228.st_dev);
  }
LABEL_177:
  support::fs::createDir((const char *)__dst, 0x1EDu, 1);
  if ((__sz[2] & 0x8000000000000000) == 0) {
    size_t v90 = HIBYTE(__sz[2]);
  }
  else {
    size_t v90 = __sz[1];
  }
  if (v90 == strlen(__s))
  {
    BOOL v91 = (__sz[2] & 0x8000000000000000) == 0 ? __sz : (std::string::size_type *)__sz[0];
    if (!memcmp(v91, __s, v90))
    {
      char v218 = 9;
      strcpy((char *)__p, "StateDump");
      if (SHIBYTE(v222[0].__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v216, v222[0].__r_.__value_.__l.__data_, v222[0].__r_.__value_.__l.__size_);
      }
      else {
        std::string v216 = v222[0];
      }
      TraceManager::submitTraceMetric_sync((uint64_t)a1, (const char *)__p, (const char *)&v216);
      if (SHIBYTE(v216.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v216.__r_.__value_.__l.__data_);
      }
      if (v218 < 0) {
        operator delete(__p[0]);
      }
    }
  }
  memset(&v226, 0, sizeof(v226));
  TraceFilter::determineFilterAction(&v226);
  xpc_object_t v94 = (const void *)*MEMORY[0x1E4F4C820];
  size_t v95 = strlen((const char *)*MEMORY[0x1E4F4C820]);
  if (v95 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  __darwin_ino64_t v96 = v95;
  if (v95 >= 0x17)
  {
    uint64_t v99 = (v95 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v95 | 7) != 0x17) {
      uint64_t v99 = v95 | 7;
    }
    uint64_t v100 = v99 + 1;
    xpc_object_t v97 = operator new(v99 + 1);
    v228.st_ino = v96;
    *(void *)&v228.st_uid = v100 | 0x8000000000000000;
    *(void *)&v228.st_dev = v97;
  }
  else
  {
    HIBYTE(v228.st_gid) = v95;
    xpc_object_t v97 = &v228;
    if (!v95)
    {
      int v98 = v38;
      goto LABEL_204;
    }
  }
  int v98 = v38;
  memmove(v97, v94, v96);
LABEL_204:
  *((unsigned char *)v97 + v96) = 0;
  int st_gid_high = SHIBYTE(v228.st_gid);
  xpc_object_t v102 = *(void **)&v228.st_dev;
  if ((v228.st_gid & 0x80000000) == 0) {
    xpc_object_t v103 = &v228;
  }
  else {
    xpc_object_t v103 = *(stat **)&v228.st_dev;
  }
  if ((v226.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    xpc_object_t v104 = &v226;
  }
  else {
    xpc_object_t v104 = (std::string *)v226.__r_.__value_.__r.__words[0];
  }
  size_t v105 = strlen((const char *)v94);
  int v106 = strncasecmp((const char *)v103, (const char *)v104, v105);
  int v107 = v106;
  if (st_gid_high < 0)
  {
    operator delete(v102);
    int v108 = v98;
    if (!v107) {
      goto LABEL_215;
    }
    goto LABEL_214;
  }
  int v108 = v98;
  if (v106) {
LABEL_214:
  }
    std::string::append(v222, " (some logs are dropped due to not enough space on device!)", 0x3BuLL);
LABEL_215:
  std::string v109 = a1[11];
  if (os_log_type_enabled(v109, OS_LOG_TYPE_DEFAULT))
  {
    std::string v110 = &v226;
    if ((v226.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string v110 = (std::string *)v226.__r_.__value_.__r.__words[0];
    }
    v228.st_dev = 136315138;
    *(void *)&v228.st_mode = v110;
    _os_log_impl(&dword_1C5767000, v109, OS_LOG_TYPE_DEFAULT, "#I Trace filter '%s'", (uint8_t *)&v228, 0xCu);
  }
  CFTypeRef cf = 0;
  CFAllocatorRef v111 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  uint64_t v114 = Mutable;
  if (Mutable) {
    CFTypeRef cf = Mutable;
  }
  if (SHIBYTE(v222[0].__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)&v228, v222[0].__r_.__value_.__l.__data_, v222[0].__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v228.st_dev = *(_OWORD *)&v222[0].__r_.__value_.__l.__data_;
    *(void *)&v228.st_uid = *((void *)&v222[0].__r_.__value_.__l + 2);
  }
  ctu::cf::insert<char const*,std::string>(v114, v191, (uint64_t)&v228, (uint64_t)v111, v113);
  if (SHIBYTE(v228.st_gid) < 0)
  {
    operator delete(*(void **)&v228.st_dev);
    if ((SHIBYTE(v224[2]) & 0x80000000) == 0) {
      goto LABEL_226;
    }
  }
  else if ((SHIBYTE(v224[2]) & 0x80000000) == 0)
  {
LABEL_226:
    *(_OWORD *)&v228.st_dev = *(_OWORD *)v224;
    *(void **)&v228.st_uid = v224[2];
    goto LABEL_229;
  }
  std::string::__init_copy_ctor_external((std::string *)&v228, (const std::string::value_type *)v224[0], (std::string::size_type)v224[1]);
LABEL_229:
  ctu::cf::insert<char const*,std::string>(v114, v190, (uint64_t)&v228, (uint64_t)v111, v115);
  if (SHIBYTE(v228.st_gid) < 0)
  {
    operator delete(*(void **)&v228.st_dev);
    if ((SHIBYTE(__dst[2]) & 0x80000000) == 0) {
      goto LABEL_231;
    }
  }
  else if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
  {
LABEL_231:
    *(_OWORD *)&v228.st_dev = *(_OWORD *)__dst;
    *(xpc_object_t *)&v228.st_uid = __dst[2];
    goto LABEL_234;
  }
  std::string::__init_copy_ctor_external((std::string *)&v228, (const std::string::value_type *)__dst[0], (std::string::size_type)__dst[1]);
LABEL_234:
  ctu::cf::insert<char const*,std::string>(v114, (const __CFString **)*MEMORY[0x1E4F4C7F8], (uint64_t)&v228, (uint64_t)v111, v116);
  if (SHIBYTE(v228.st_gid) < 0)
  {
    operator delete(*(void **)&v228.st_dev);
    if ((SHIBYTE(__sz[2]) & 0x80000000) == 0) {
      goto LABEL_236;
    }
  }
  else if ((SHIBYTE(__sz[2]) & 0x80000000) == 0)
  {
LABEL_236:
    *(_OWORD *)&v228.st_dev = *(_OWORD *)__sz;
    *(void *)&v228.st_uid = __sz[2];
    goto LABEL_239;
  }
  std::string::__init_copy_ctor_external((std::string *)&v228, (const std::string::value_type *)__sz[0], __sz[1]);
LABEL_239:
  ctu::cf::insert<char const*,std::string>(v114, v189, (uint64_t)&v228, (uint64_t)v111, v117);
  if (SHIBYTE(v228.st_gid) < 0)
  {
    operator delete(*(void **)&v228.st_dev);
    if ((SHIBYTE(v226.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_241;
    }
  }
  else if ((SHIBYTE(v226.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_241:
    *(_OWORD *)&v228.st_dev = *(_OWORD *)&v226.__r_.__value_.__l.__data_;
    *(void *)&v228.st_uid = *((void *)&v226.__r_.__value_.__l + 2);
    goto LABEL_244;
  }
  std::string::__init_copy_ctor_external((std::string *)&v228, v226.__r_.__value_.__l.__data_, v226.__r_.__value_.__l.__size_);
LABEL_244:
  ctu::cf::insert<char const*,std::string>(v114, (const __CFString **)*MEMORY[0x1E4F4C6A0], (uint64_t)&v228, (uint64_t)v111, v118);
  if (SHIBYTE(v228.st_gid) < 0)
  {
    operator delete(*(void **)&v228.st_dev);
    if ((SHIBYTE(v223[2]) & 0x80000000) == 0) {
      goto LABEL_246;
    }
  }
  else if ((SHIBYTE(v223[2]) & 0x80000000) == 0)
  {
LABEL_246:
    *(_OWORD *)&v228.st_dev = *(_OWORD *)v223;
    *(void **)&v228.st_uid = v223[2];
    goto LABEL_249;
  }
  std::string::__init_copy_ctor_external((std::string *)&v228, (const std::string::value_type *)v223[0], (std::string::size_type)v223[1]);
LABEL_249:
  ctu::cf::insert<char const*,std::string>(v114, v187, (uint64_t)&v228, (uint64_t)v111, v119);
  if (SHIBYTE(v228.st_gid) < 0)
  {
    operator delete(*(void **)&v228.st_dev);
    if ((SHIBYTE(v222[1].__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_251;
    }
  }
  else if ((SHIBYTE(v222[1].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_251:
    *(_OWORD *)&v228.st_dev = *(_OWORD *)&v222[1].__r_.__value_.__l.__data_;
    *(void *)&v228.st_uid = *((void *)&v222[1].__r_.__value_.__l + 2);
    goto LABEL_254;
  }
  std::string::__init_copy_ctor_external((std::string *)&v228, v222[1].__r_.__value_.__l.__data_, v222[1].__r_.__value_.__l.__size_);
LABEL_254:
  ctu::cf::insert<char const*,std::string>(v114, v188, (uint64_t)&v228, (uint64_t)v111, v120);
  if (SHIBYTE(v228.st_gid) < 0) {
    operator delete(*(void **)&v228.st_dev);
  }
  ctu::cf::insert<char const*,int>(v114, v186, v185, v111, v121);
  ctu::cf::insert<char const*,int>(v114, v184, v108, v111, v122);
  ctu::cf::insert<char const*,BOOL>(v114, (const __CFString **)*MEMORY[0x1E4F4CF88], v220, (uint64_t)v111, v123);
  ctu::cf::insert<char const*,int>(v114, v183, v182, v111, v124);
  ctu::cf::insert<char const*,BOOL>(v114, (const __CFString **)key, v219, (uint64_t)v111, v125);
  xpc_object_t v126 = (const __CFString **)*MEMORY[0x1E4F4C8E8];
  xpc_object_t v127 = xpc_dictionary_get_value(*v4, (const char *)*MEMORY[0x1E4F4C8E8]);
  *(void *)&v228.st_dev = v127;
  if (v127) {
    xpc_retain(v127);
  }
  else {
    *(void *)&v228.st_dev = xpc_null_create();
  }
  int v128 = xpc::dyn_cast_or_default((xpc *)&v228, 0);
  ctu::cf::insert<char const*,BOOL>(v114, v126, v128, (uint64_t)v111, v129);
  xpc_release(*(xpc_object_t *)&v228.st_dev);
  uint64_t v130 = (const __CFString **)*MEMORY[0x1E4F4C900];
  xpc_object_t v131 = xpc_dictionary_get_value(*v4, (const char *)*MEMORY[0x1E4F4C900]);
  *(void *)&v228.st_dev = v131;
  if (v131) {
    xpc_retain(v131);
  }
  else {
    *(void *)&v228.st_dev = xpc_null_create();
  }
  int v132 = xpc::dyn_cast_or_default((xpc *)&v228, 0);
  ctu::cf::insert<char const*,BOOL>(v114, v130, v132, (uint64_t)v111, v133);
  xpc_release(*(xpc_object_t *)&v228.st_dev);
  BOOL v134 = (const __CFString **)*MEMORY[0x1E4F4C8F8];
  xpc_object_t v135 = xpc_dictionary_get_value(*v4, (const char *)*MEMORY[0x1E4F4C8F8]);
  *(void *)&v228.st_dev = v135;
  if (v135) {
    xpc_retain(v135);
  }
  else {
    *(void *)&v228.st_dev = xpc_null_create();
  }
  int v136 = xpc::dyn_cast_or_default((xpc *)&v228, 0);
  ctu::cf::insert<char const*,BOOL>(v114, v134, v136, (uint64_t)v111, v137);
  xpc_release(*(xpc_object_t *)&v228.st_dev);
  ctu::cf::insert<char const*,BOOL>(v114, (const __CFString **)__src, v221, (uint64_t)v111, v138);
  unint64_t v213 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v214 = 0xAAAAAAAAAAAAAAAALL;
  GetABMLogServer(&v211);
  abm::HelperClient::create();
  xpc_object_t v139 = v212;
  if (v212 && !atomic_fetch_add(&v212->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v139->__on_zero_shared)(v139);
    std::__shared_weak_count::__release_weak(v139);
  }
  xpc_object_t v140 = xpc_dictionary_create(0, 0, 0);
  if (v140 || (xpc_object_t v140 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C8792D30](v140) == MEMORY[0x1E4F14590])
    {
      xpc_retain(v140);
      xpc_object_t v141 = v140;
    }
    else
    {
      xpc_object_t v141 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v141 = xpc_null_create();
    xpc_object_t v140 = 0;
  }
  xpc_release(v140);
  xpc_object_t v210 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  xpc_object_t v142 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v143 = v142;
  if (v142)
  {
    xpc_object_t v210 = v142;
  }
  else
  {
    xpc_object_t v143 = xpc_null_create();
    xpc_object_t v210 = v143;
    if (!v143)
    {
      xpc_object_t v144 = xpc_null_create();
      xpc_object_t v143 = 0;
      goto LABEL_281;
    }
  }
  if (MEMORY[0x1C8792D30](v143) == MEMORY[0x1E4F14590])
  {
    xpc_retain(v143);
    goto LABEL_282;
  }
  xpc_object_t v144 = xpc_null_create();
LABEL_281:
  xpc_object_t v210 = v144;
LABEL_282:
  xpc_release(v143);
  xpc_object_t v145 = xpc_int64_create(1500);
  if (!v145) {
    xpc_object_t v145 = xpc_null_create();
  }
  xpc_dictionary_set_value(v141, (const char *)*MEMORY[0x1E4F470A0], v145);
  xpc_object_t v146 = xpc_null_create();
  xpc_release(v145);
  xpc_release(v146);
  if (prop::tracesettings::enabled((prop::tracesettings *)*MEMORY[0x1E4F4C1F8], v147)
    || prop::tracesettings::enabled((prop::tracesettings *)*MEMORY[0x1E4F4D338], v148)
    || prop::tracesettings::enabled((prop::tracesettings *)*MEMORY[0x1E4F4C288], v149))
  {
    xpc_object_t v150 = (const __CFString ***)MEMORY[0x1E4F4F968];
    int v151 = (const void *)*MEMORY[0x1E4F4F968];
    size_t v152 = strlen((const char *)*MEMORY[0x1E4F4F968]);
    if (v152 > 0x7FFFFFFFFFFFFFF7) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    xpc_object_t v153 = (void *)v152;
    if (v152 >= 0x17)
    {
      uint64_t v155 = (v152 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v152 | 7) != 0x17) {
        uint64_t v155 = v152 | 7;
      }
      uint64_t v156 = v155 + 1;
      uint64_t v154 = operator new(v155 + 1);
      v208[1] = v153;
      int64_t v209 = v156 | 0x8000000000000000;
      v208[0] = v154;
    }
    else
    {
      HIBYTE(v209) = v152;
      uint64_t v154 = v208;
      if (!v152)
      {
LABEL_295:
        *((unsigned char *)v153 + (void)v154) = 0;
        v157.tv_sec = 0xAAAAAAAAAAAAAAAALL;
        v157.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
        *(timespec *)&v228.st_blkstd::string::size_type size = v157;
        *(timespec *)v228.st_qspare = v157;
        v228.st_birthtimespec = v157;
        *(timespec *)&v228.st_std::string::size_type size = v157;
        v228.st_mtimespec = v157;
        v228.st_ctimespec = v157;
        *(timespec *)&v228.st_uid = v157;
        v228.st_atimespec = v157;
        *(timespec *)&v228.st_dev = v157;
        if (v209 >= 0) {
          xpc_object_t v158 = v208;
        }
        else {
          xpc_object_t v158 = (void **)v208[0];
        }
        int v159 = stat((const char *)v158, &v228);
        int v161 = v159;
        if (SHIBYTE(v209) < 0)
        {
          operator delete(v208[0]);
          if (v161) {
            goto LABEL_300;
          }
        }
        else if (v159)
        {
LABEL_300:
          *(void *)&long long v162 = 0xAAAAAAAAAAAAAAAALL;
          *((void *)&v162 + 1) = 0xAAAAAAAAAAAAAAAALL;
          *(_OWORD *)&v228.st_dev = v162;
          *(_OWORD *)&v228.st_uid = v162;
          xpc_object_t v207 = v141;
          if (v141) {
            xpc_retain(v141);
          }
          else {
            xpc_object_t v207 = xpc_null_create();
          }
          abm::HelperClient::perform();
          xpc_release(v207);
          xpc_object_t v207 = 0;
          if (!v228.st_dev) {
            ctu::cf::insert<char const*,char const*>((__CFDictionary *)cf, (const __CFString **)*MEMORY[0x1E4F4D2B8], *v150, (uint64_t)v111, v163);
          }
          if (*((char *)&v228.st_rdev + 7) < 0) {
            operator delete((void *)v228.st_ino);
          }
          goto LABEL_311;
        }
        ctu::cf::insert<char const*,char const*>((__CFDictionary *)cf, (const __CFString **)*MEMORY[0x1E4F4D2B8], *v150, (uint64_t)v111, v160);
        goto LABEL_311;
      }
    }
    memmove(v154, v151, (size_t)v153);
    goto LABEL_295;
  }
  xpc_object_t v164 = a1[11];
  if (os_log_type_enabled(v164, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v228.st_dev) = 0;
    _os_log_impl(&dword_1C5767000, v164, OS_LOG_TYPE_DEFAULT, "#I mobile BasebandServices path is disabled as baseband log is off", (uint8_t *)&v228, 2u);
  }
LABEL_311:
  v165 = (std::__shared_weak_count *)a1[16];
  *(void *)&v228.st_dev = a1[15];
  if (!v165 || (v228.st_ino = (__darwin_ino64_t)std::__shared_weak_count::lock(v165)) == 0) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v166 = (const void *)*MEMORY[0x1E4F4CB10];
  size_t v167 = strlen((const char *)*MEMORY[0x1E4F4CB10]);
  if (v167 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  char v168 = (void *)v167;
  if (v167 >= 0x17)
  {
    uint64_t v171 = (v167 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v167 | 7) != 0x17) {
      uint64_t v171 = v167 | 7;
    }
    uint64_t v172 = v171 + 1;
    size_t v169 = operator new(v171 + 1);
    v205[1] = v168;
    unint64_t v206 = v172 | 0x8000000000000000;
    v205[0] = v169;
LABEL_321:
    memmove(v169, v166, (size_t)v168);
    *((unsigned char *)v168 + (void)v169) = 0;
    CFTypeRef v170 = cf;
    if (!cf) {
      goto LABEL_324;
    }
    goto LABEL_322;
  }
  HIBYTE(v206) = v167;
  size_t v169 = v205;
  if (v167) {
    goto LABEL_321;
  }
  LOBYTE(v205[0]) = 0;
  CFTypeRef v170 = cf;
  if (!cf) {
    goto LABEL_324;
  }
LABEL_322:
  CFTypeID v173 = CFGetTypeID(v170);
  if (v173 == CFDictionaryGetTypeID())
  {
    CFTypeRef v204 = v170;
    CFRetain(v170);
    goto LABEL_325;
  }
LABEL_324:
  CFTypeRef v204 = 0;
LABEL_325:
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN12TraceManager16collectLogs_syncEN3xpc4dictEN8dispatch5blockIU13block_pointerFviS1_EEE_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_50_0;
  aBlock[4] = a1;
  long long v196 = *(_OWORD *)&v228.st_dev;
  if (v228.st_ino) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v228.st_ino + 8), 1uLL, memory_order_relaxed);
  }
  unint64_t v197 = v213;
  dispatch_object_t v198 = (std::__shared_weak_count *)v214;
  if (v214) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v214 + 8), 1uLL, memory_order_relaxed);
  }
  xpc_object_t v199 = v141;
  if (!v141)
  {
    xpc_object_t v199 = xpc_null_create();
    CFTypeRef v200 = v170;
    if (!v170) {
      goto LABEL_334;
    }
    goto LABEL_333;
  }
  xpc_retain(v141);
  CFTypeRef v170 = cf;
  CFTypeRef v200 = cf;
  if (cf) {
LABEL_333:
  }
    CFRetain(v170);
LABEL_334:
  v174 = *a3;
  if (*a3) {
    v174 = _Block_copy(v174);
  }
  v201 = v174;
  if (SHIBYTE(v222[0].__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v202, v222[0].__r_.__value_.__l.__data_, v222[0].__r_.__value_.__l.__size_);
  }
  else {
    std::string v202 = v222[0];
  }
  unint64_t v203 = _Block_copy(aBlock);
  Service::broadcastEvent((uint64_t)a1, (uint64_t)v205, &v204, (const void **)&v203);
  if (v203) {
    _Block_release(v203);
  }
  if (v204) {
    CFRelease(v204);
  }
  if ((SHIBYTE(v206) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v202.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_345;
    }
LABEL_348:
    operator delete(v202.__r_.__value_.__l.__data_);
    int v175 = v201;
    if (!v201) {
      goto LABEL_350;
    }
    goto LABEL_349;
  }
  operator delete(v205[0]);
  if (SHIBYTE(v202.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_348;
  }
LABEL_345:
  int v175 = v201;
  if (v201) {
LABEL_349:
  }
    _Block_release(v175);
LABEL_350:
  if (v200) {
    CFRelease(v200);
  }
  xpc_release(v199);
  xpc_object_t v199 = 0;
  v176 = v198;
  if (v198 && !atomic_fetch_add(&v198->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v176->__on_zero_shared)(v176);
    std::__shared_weak_count::__release_weak(v176);
  }
  uint64_t v177 = (std::__shared_weak_count *)*((void *)&v196 + 1);
  if (*((void *)&v196 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v196 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v177->__on_zero_shared)(v177);
    std::__shared_weak_count::__release_weak(v177);
  }
  st_ino = (std::__shared_weak_count *)v228.st_ino;
  if (v228.st_ino && !atomic_fetch_add((atomic_ullong *volatile)(v228.st_ino + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))st_ino->__on_zero_shared)(st_ino);
    std::__shared_weak_count::__release_weak(st_ino);
  }
  xpc_release(v210);
  xpc_release(v141);
  int v179 = (std::__shared_weak_count *)v214;
  if (!v214 || atomic_fetch_add((atomic_ullong *volatile)(v214 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    CFTypeRef v180 = cf;
    if (!cf) {
      goto LABEL_365;
    }
    goto LABEL_364;
  }
  ((void (*)(std::__shared_weak_count *))v179->__on_zero_shared)(v179);
  std::__shared_weak_count::__release_weak(v179);
  CFTypeRef v180 = cf;
  if (cf) {
LABEL_364:
  }
    CFRelease(v180);
LABEL_365:
  if (SHIBYTE(v226.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v226.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
    {
LABEL_367:
      if ((SHIBYTE(v222[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_368;
      }
      goto LABEL_375;
    }
  }
  else if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
  {
    goto LABEL_367;
  }
  operator delete(__dst[0]);
  if ((SHIBYTE(v222[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_368:
    if ((SHIBYTE(v222[1].__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_369;
    }
    goto LABEL_376;
  }
LABEL_375:
  operator delete(v222[0].__r_.__value_.__l.__data_);
  if ((SHIBYTE(v222[1].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_369:
    if ((SHIBYTE(v223[2]) & 0x80000000) == 0) {
      goto LABEL_370;
    }
    goto LABEL_377;
  }
LABEL_376:
  operator delete(v222[1].__r_.__value_.__l.__data_);
  if ((SHIBYTE(v223[2]) & 0x80000000) == 0)
  {
LABEL_370:
    if ((SHIBYTE(v224[2]) & 0x80000000) == 0) {
      goto LABEL_371;
    }
    goto LABEL_378;
  }
LABEL_377:
  operator delete(v223[0]);
  if ((SHIBYTE(v224[2]) & 0x80000000) == 0)
  {
LABEL_371:
    if ((SHIBYTE(__sz[2]) & 0x80000000) == 0) {
      return;
    }
LABEL_379:
    operator delete((void *)__sz[0]);
    return;
  }
LABEL_378:
  operator delete(v224[0]);
  if (SHIBYTE(__sz[2]) < 0) {
    goto LABEL_379;
  }
}

void sub_1C5929A74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,xpc_object_t a32,uint64_t a33,void *aBlock,void *a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,void *a40,uint64_t a41,uint64_t a42,xpc_object_t a43,void *a44,uint64_t a45,uint64_t a46,xpc_object_t object,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,uint64_t a56,void *__p,uint64_t a58,int a59,__int16 a60,char a61,char a62,uint64_t a63)
{
  if (a62 < 0) {
    operator delete(__p);
  }
  if (SLOBYTE(STACK[0x247]) < 0) {
    operator delete((void *)STACK[0x230]);
  }
  if (a69 < 0) {
    operator delete(a64);
  }
  if (a72 < 0) {
    operator delete(a70);
  }
  if (a74 < 0) {
    operator delete(a73);
  }
  if (a76 < 0) {
    operator delete(a75);
  }
  if (SLOBYTE(STACK[0x217]) < 0) {
    operator delete((void *)STACK[0x200]);
  }
  _Unwind_Resume(a1);
}

void TraceManager::submitTraceMetric_sync(uint64_t a1, const char *a2, const char *a3)
{
  uint64_t v3 = *(NSObject **)(a1 + 88);
  if (*(void *)(a1 + 152))
  {
    if (os_log_type_enabled(*(os_log_t *)(a1 + 88), OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl(&dword_1C5767000, v3, OS_LOG_TYPE_DEFAULT, "#I Submitting AWD of trace stats", buf, 2u);
    }
    xpc_object_t v7 = xpc_dictionary_create(0, 0, 0);
    uint64_t v8 = MEMORY[0x1E4F14590];
    if (v7 || (xpc_object_t v7 = xpc_null_create()) != 0)
    {
      if (MEMORY[0x1C8792D30](v7) == v8)
      {
        xpc_retain(v7);
        xpc_object_t v9 = v7;
      }
      else
      {
        xpc_object_t v9 = xpc_null_create();
      }
    }
    else
    {
      xpc_object_t v9 = xpc_null_create();
      xpc_object_t v7 = 0;
    }
    xpc_release(v7);
    xpc_object_t v10 = xpc_dictionary_create(0, 0, 0);
    if (v10 || (xpc_object_t v10 = xpc_null_create()) != 0)
    {
      if (MEMORY[0x1C8792D30](v10) == v8)
      {
        xpc_retain(v10);
        xpc_object_t v11 = v10;
      }
      else
      {
        xpc_object_t v11 = xpc_null_create();
      }
    }
    else
    {
      xpc_object_t v11 = xpc_null_create();
      xpc_object_t v10 = 0;
    }
    xpc_release(v10);
    if (a2[23] < 0) {
      a2 = *(const char **)a2;
    }
    xpc_object_t v12 = xpc_string_create(a2);
    if (!v12) {
      xpc_object_t v12 = xpc_null_create();
    }
    xpc_dictionary_set_value(v11, (const char *)*MEMORY[0x1E4F4C8C8], v12);
    xpc_object_t v13 = xpc_null_create();
    xpc_release(v12);
    xpc_release(v13);
    if (a3[23] < 0) {
      a3 = *(const char **)a3;
    }
    xpc_object_t v14 = xpc_string_create(a3);
    if (!v14) {
      xpc_object_t v14 = xpc_null_create();
    }
    xpc_dictionary_set_value(v11, (const char *)*MEMORY[0x1E4F4CB30], v14);
    xpc_object_t v15 = xpc_null_create();
    xpc_release(v14);
    xpc_release(v15);
    xpc_object_t v16 = xpc_string_create((const char *)*MEMORY[0x1E4F4D2D0]);
    if (!v16) {
      xpc_object_t v16 = xpc_null_create();
    }
    xpc_dictionary_set_value(v9, (const char *)*MEMORY[0x1E4F4C190], v16);
    xpc_object_t v17 = xpc_null_create();
    xpc_release(v16);
    xpc_release(v17);
    xpc_object_t v18 = xpc_int64_create(524539);
    if (!v18) {
      xpc_object_t v18 = xpc_null_create();
    }
    xpc_dictionary_set_value(v9, (const char *)*MEMORY[0x1E4F4C258], v18);
    xpc_object_t v19 = xpc_null_create();
    xpc_release(v18);
    xpc_release(v19);
    if (v11)
    {
      xpc_retain(v11);
      xpc_object_t v20 = v11;
    }
    else
    {
      xpc_object_t v20 = xpc_null_create();
    }
    xpc_dictionary_set_value(v9, (const char *)*MEMORY[0x1E4F4C188], v20);
    xpc_object_t v21 = xpc_null_create();
    xpc_release(v20);
    xpc_release(v21);
    xpc_object_t v22 = (const void *)*MEMORY[0x1E4F4C738];
    size_t v23 = strlen((const char *)*MEMORY[0x1E4F4C738]);
    if (v23 >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    size_t v24 = v23;
    if (v23 >= 0x17)
    {
      uint64_t v26 = (v23 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v23 | 7) != 0x17) {
        uint64_t v26 = v23 | 7;
      }
      uint64_t v27 = v26 + 1;
      int v25 = operator new(v26 + 1);
      size_t v31 = v24;
      unint64_t v32 = v27 | 0x8000000000000000;
      *(void *)std::string buf = v25;
    }
    else
    {
      HIBYTE(v32) = v23;
      int v25 = buf;
      if (!v23)
      {
        buf[0] = 0;
        xpc_object_t object = v9;
        if (v9)
        {
LABEL_37:
          xpc_retain(v9);
LABEL_43:
          xpc_object_t v28 = 0;
          Service::runCommand(a1, (uint64_t)buf, &object, &v28);
          xpc_release(object);
          xpc_object_t object = 0;
          if (SHIBYTE(v32) < 0) {
            operator delete(*(void **)buf);
          }
          xpc_release(v11);
          xpc_release(v9);
          return;
        }
LABEL_42:
        xpc_object_t object = xpc_null_create();
        goto LABEL_43;
      }
    }
    memmove(v25, v22, v24);
    *((unsigned char *)v25 + v24) = 0;
    xpc_object_t object = v9;
    if (v9) {
      goto LABEL_37;
    }
    goto LABEL_42;
  }
  if (os_log_type_enabled(*(os_log_t *)(a1 + 88), OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_error_impl(&dword_1C5767000, v3, OS_LOG_TYPE_ERROR, "Baseband manager is not ready yet", buf, 2u);
  }
}

void sub_1C592A414(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  xpc_release(object);
  if (a16 < 0) {
    operator delete(__p);
  }
  xpc_release(v17);
  xpc_release(v16);
  _Unwind_Resume(a1);
}

uint64_t ___ZN12TraceManager16collectLogs_syncEN3xpc4dictEN8dispatch5blockIU13block_pointerFviS1_EEE_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  std::string::size_type v3 = *(void *)(a1 + 64);
  std::string::size_type v20 = *(void *)(a1 + 56);
  std::string::size_type v21 = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  size_t v4 = *(void **)(a1 + 72);
  xpc_object_t object = v4;
  if (!v4)
  {
    xpc_object_t object = xpc_null_create();
    std::string::size_type v5 = *(const void **)(a1 + 80);
    size_t v23 = v2;
    size_t v24 = v5;
    if (!v5) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  xpc_retain(v4);
  std::string::size_type v5 = *(const void **)(a1 + 80);
  size_t v23 = v2;
  size_t v24 = v5;
  if (v5) {
LABEL_7:
  }
    CFRetain(v5);
LABEL_8:
  xpc_object_t v6 = *(void **)(a1 + 88);
  if (v6) {
    xpc_object_t v6 = _Block_copy(v6);
  }
  aBlocuint64_t k = v6;
  if (*(char *)(a1 + 119) < 0) {
    std::string::__init_copy_ctor_external(&v26, *(const std::string::value_type **)(a1 + 96), *(void *)(a1 + 104));
  }
  else {
    std::string v26 = *(std::string *)(a1 + 96);
  }
  xpc_object_t v7 = (std::__shared_weak_count *)v2[16];
  if (!v7 || (uint64_t v8 = v2[15], (v9 = std::__shared_weak_count::lock(v7)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  xpc_object_t v10 = v9;
  xpc_object_t v11 = (std::string *)operator new(0x48uLL);
  std::string::size_type v12 = v21;
  v11->__r_.__value_.__r.__words[0] = v20;
  v11->__r_.__value_.__l.__size_ = v12;
  if (v12) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
  }
  xpc_object_t v13 = object;
  v11->__r_.__value_.__r.__words[2] = (std::string::size_type)object;
  if (!v13)
  {
    v11->__r_.__value_.__r.__words[2] = (std::string::size_type)xpc_null_create();
    xpc_object_t v14 = v24;
    v11[1].__r_.__value_.__r.__words[0] = (std::string::size_type)v23;
    v11[1].__r_.__value_.__l.__size_ = (std::string::size_type)v14;
    if (!v14) {
      goto LABEL_22;
    }
    goto LABEL_21;
  }
  xpc_retain(v13);
  xpc_object_t v14 = v24;
  v11[1].__r_.__value_.__r.__words[0] = (std::string::size_type)v23;
  v11[1].__r_.__value_.__l.__size_ = (std::string::size_type)v14;
  if (v14) {
LABEL_21:
  }
    CFRetain(v14);
LABEL_22:
  xpc_object_t v15 = aBlock;
  if (aBlock) {
    xpc_object_t v15 = _Block_copy(aBlock);
  }
  v11[1].__r_.__value_.__r.__words[2] = (std::string::size_type)v15;
  xpc_object_t v16 = v11 + 2;
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v16, v26.__r_.__value_.__l.__data_, v26.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v16->__r_.__value_.__l.__data_ = *(_OWORD *)&v26.__r_.__value_.__l.__data_;
    v11[2].__r_.__value_.__r.__words[2] = v26.__r_.__value_.__r.__words[2];
  }
  xpc_object_t v17 = v2[17];
  atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  xpc_object_t v18 = operator new(0x18uLL);
  *xpc_object_t v18 = v11;
  v18[1] = v8;
  void v18[2] = v10;
  dispatch_async_f(v17, v18, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI12TraceManagerE15execute_wrappedIZZNS3_16collectLogs_syncEN3xpc4dictENS_5blockIU13block_pointerFviS7_EEEEUb0_E3__1EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrISD_NSI_14default_deleteISD_EEEEENUlPvE_8__invokeESN_);
  if (!atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  return _ZZZN12TraceManager16collectLogs_syncEN3xpc4dictEN8dispatch5blockIU13block_pointerFviS1_EEEEUb0_EN3__1D1Ev((uint64_t)&v20);
}

void sub_1C592A6EC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, xpc_object_t object, uint64_t a13, uint64_t a14, void *aBlock)
{
  xpc_object_t v17 = *(const void **)(v15 + 40);
  if (v17) {
    _Block_release(v17);
  }
  xpc_object_t v18 = *(const void **)(v15 + 32);
  if (v18) {
    CFRelease(v18);
  }
  xpc_release(*(xpc_object_t *)(v15 + 16));
  *(void *)(v15 + 16) = 0;
  xpc_object_t v19 = *(std::__shared_weak_count **)(v15 + 8);
  if (v19)
  {
    if (!atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
      __clang_call_terminate(a1);
    }
  }
  __clang_call_terminate(a1);
}

uint64_t _ZZZN12TraceManager16collectLogs_syncEN3xpc4dictEN8dispatch5blockIU13block_pointerFviS1_EEEEUb0_EN3__1D1Ev(uint64_t a1)
{
  if (*(char *)(a1 + 71) < 0)
  {
    operator delete(*(void **)(a1 + 48));
    uint64_t v2 = *(const void **)(a1 + 40);
    if (!v2) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  uint64_t v2 = *(const void **)(a1 + 40);
  if (v2) {
LABEL_5:
  }
    _Block_release(v2);
LABEL_6:
  std::string::size_type v3 = *(const void **)(a1 + 32);
  if (v3) {
    CFRelease(v3);
  }
  xpc_release(*(xpc_object_t *)(a1 + 16));
  *(void *)(a1 + 16) = 0;
  size_t v4 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v4 || atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void __copy_helper_block_e8_40c40_ZTSNSt3__110shared_ptrI12TraceManagerEE56c46_ZTSNSt3__110shared_ptrIN3abm12HelperClientEEE72c15_ZTSN3xpc4dictE80c44_ZTSN3ctu2cf11CFSharedRefI14__CFDictionaryEE88c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE96c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(std::string *a1, uint64_t a2)
{
  std::string::size_type v4 = *(void *)(a2 + 48);
  a1[1].__r_.__value_.__r.__words[2] = *(void *)(a2 + 40);
  a1[2].__r_.__value_.__r.__words[0] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  std::string::size_type v5 = *(void *)(a2 + 64);
  a1[2].__r_.__value_.__l.__size_ = *(void *)(a2 + 56);
  a1[2].__r_.__value_.__r.__words[2] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  xpc_object_t v6 = *(void **)(a2 + 72);
  a1[3].__r_.__value_.__r.__words[0] = (std::string::size_type)v6;
  if (!v6)
  {
    a1[3].__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
    xpc_object_t v7 = *(const void **)(a2 + 80);
    a1[3].__r_.__value_.__l.__size_ = (std::string::size_type)v7;
    if (!v7) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
  xpc_retain(v6);
  xpc_object_t v7 = *(const void **)(a2 + 80);
  a1[3].__r_.__value_.__l.__size_ = (std::string::size_type)v7;
  if (v7) {
LABEL_9:
  }
    CFRetain(v7);
LABEL_10:
  uint64_t v8 = *(void **)(a2 + 88);
  if (v8) {
    uint64_t v8 = _Block_copy(v8);
  }
  a1[3].__r_.__value_.__r.__words[2] = (std::string::size_type)v8;
  xpc_object_t v9 = a1 + 4;
  if (*(char *)(a2 + 119) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)(a2 + 96), *(void *)(a2 + 104));
  }
  else
  {
    long long v10 = *(_OWORD *)(a2 + 96);
    a1[4].__r_.__value_.__r.__words[2] = *(void *)(a2 + 112);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v10;
  }
}

void sub_1C592A998(_Unwind_Exception *a1)
{
  xpc_object_t v7 = *(const void **)(v3 + 88);
  if (v7) {
    _Block_release(v7);
  }
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(v5);
  xpc::dict::~dict(v4);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v2);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void __destroy_helper_block_e8_40c40_ZTSNSt3__110shared_ptrI12TraceManagerEE56c46_ZTSNSt3__110shared_ptrIN3abm12HelperClientEEE72c15_ZTSN3xpc4dictE80c44_ZTSN3ctu2cf11CFSharedRefI14__CFDictionaryEE88c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE96c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1)
{
  if (*(char *)(a1 + 119) < 0)
  {
    operator delete(*(void **)(a1 + 96));
    uint64_t v2 = *(const void **)(a1 + 88);
    if (!v2) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  uint64_t v2 = *(const void **)(a1 + 88);
  if (v2) {
LABEL_5:
  }
    _Block_release(v2);
LABEL_6:
  uint64_t v3 = *(const void **)(a1 + 80);
  if (v3) {
    CFRelease(v3);
  }
  xpc_release(*(xpc_object_t *)(a1 + 72));
  *(void *)(a1 + 72) = 0;
  std::string::size_type v4 = *(std::__shared_weak_count **)(a1 + 64);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    std::string::size_type v5 = *(std::__shared_weak_count **)(a1 + 48);
    if (!v5) {
      return;
    }
  }
  else
  {
    std::string::size_type v5 = *(std::__shared_weak_count **)(a1 + 48);
    if (!v5) {
      return;
    }
  }
  if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void ___ZN12TraceManager24collectBasebandLogs_syncEN3xpc4dictEN8dispatch5blockIU13block_pointerFviS1_EEE_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  __p.__r_.__value_.__r.__words[0] = 0;
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (!v3)
  {
    std::string::size_type v5 = 0;
LABEL_7:
    xpc_object_t v7 = xpc_null_create();
    uint64_t v8 = *(void *)(a1 + 56);
    xpc_object_t v31 = v7;
    xpc_object_t v9 = xpc_null_create();
    (*(void (**)(uint64_t, uint64_t, xpc_object_t *))(v8 + 16))(v8, 3760250880, &v31);
    xpc_release(v31);
    xpc_release(v9);
    if (!v5 || atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
      return;
    }
    char v6 = 1;
    goto LABEL_10;
  }
  std::string::size_type v4 = std::__shared_weak_count::lock(v3);
  std::string::size_type v5 = v4;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v4;
  if (!v4 || !*(void *)(a1 + 40)) {
    goto LABEL_7;
  }
  if (atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_11;
  }
  char v6 = 0;
LABEL_10:
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  if (v6) {
    return;
  }
LABEL_11:
  if (*(char *)(a1 + 87) < 0)
  {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a1 + 64), *(void *)(a1 + 72));
    long long v10 = *(void **)(a1 + 56);
    if (!v10) {
      goto LABEL_16;
    }
    goto LABEL_15;
  }
  std::string __p = *(std::string *)(a1 + 64);
  long long v10 = *(void **)(a1 + 56);
  if (v10) {
LABEL_15:
  }
    long long v10 = _Block_copy(v10);
LABEL_16:
  aBlocuint64_t k = v10;
  int v26 = *(_DWORD *)(a1 + 112);
  xpc_object_t v11 = *(std::__shared_weak_count **)(a1 + 48);
  uint64_t v27 = *(void *)(a1 + 40);
  xpc_object_t v28 = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  if (*(char *)(a1 + 111) < 0) {
    std::string::__init_copy_ctor_external(&v29, *(const std::string::value_type **)(a1 + 88), *(void *)(a1 + 96));
  }
  else {
    std::string v29 = *(std::string *)(a1 + 88);
  }
  char v30 = *(unsigned char *)(a1 + 116);
  std::string::size_type v12 = (std::__shared_weak_count *)v2[16];
  if (!v12 || (v13 = v2[15], (xpc_object_t v14 = std::__shared_weak_count::lock(v12)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v15 = v14;
  xpc_object_t v16 = (char *)operator new(0x60uLL);
  xpc_object_t v17 = v16;
  *(void *)xpc_object_t v16 = v2;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external((std::string *)(v16 + 8), __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else {
    *(std::string *)(v16 + 8) = __p;
  }
  xpc_object_t v18 = aBlock;
  if (aBlock) {
    xpc_object_t v18 = _Block_copy(aBlock);
  }
  *((void *)v17 + 4) = v18;
  *((_DWORD *)v17 + 10) = v26;
  xpc_object_t v19 = v28;
  *((void *)v17 + 6) = v27;
  *((void *)v17 + 7) = v19;
  if (v19) {
    atomic_fetch_add_explicit(&v19->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  std::string::size_type v20 = (std::string *)(v17 + 64);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v20, v29.__r_.__value_.__l.__data_, v29.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v20->__r_.__value_.__l.__data_ = *(_OWORD *)&v29.__r_.__value_.__l.__data_;
    *((void *)v17 + 10) = *((void *)&v29.__r_.__value_.__l + 2);
  }
  v17[88] = v30;
  std::string::size_type v21 = v2[17];
  atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  xpc_object_t v22 = operator new(0x18uLL);
  void *v22 = v17;
  v22[1] = v13;
  _DWORD v22[2] = v15;
  dispatch_async_f(v21, v22, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI12TraceManagerE15execute_wrappedIZZNS3_24collectBasebandLogs_syncEN3xpc4dictENS_5blockIU13block_pointerFviS7_EEEEUb1_E3__2EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrISD_NSI_14default_deleteISD_EEEEENUlPvE_8__invokeESN_);
  if (atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if ((SHIBYTE(v29.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_35;
    }
LABEL_43:
    operator delete(v29.__r_.__value_.__l.__data_);
    size_t v23 = v28;
    if (!v28) {
      goto LABEL_37;
    }
    goto LABEL_36;
  }
  ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
  std::__shared_weak_count::__release_weak(v15);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_43;
  }
LABEL_35:
  size_t v23 = v28;
  if (v28) {
LABEL_36:
  }
    std::__shared_weak_count::__release_weak(v23);
LABEL_37:
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1C592AE44(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *aBlock, uint64_t a18, uint64_t a19, std::__shared_weak_count *a20)
{
  size_t v23 = *(std::__shared_weak_count **)(v20 + 56);
  if (v23) {
    std::__shared_weak_count::__release_weak(v23);
  }
  size_t v24 = *(const void **)(v20 + 32);
  if (v24) {
    _Block_release(v24);
  }
  if (*(char *)(v20 + 31) < 0)
  {
    operator delete(*v21);
    __clang_call_terminate(a1);
  }
  __clang_call_terminate(a1);
}

void __copy_helper_block_e8_40c37_ZTSNSt3__18weak_ptrI12TraceManagerEE56c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE64c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE88c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 16), 1uLL, memory_order_relaxed);
  }
  std::string::size_type v5 = *(void **)(a2 + 56);
  if (v5) {
    std::string::size_type v5 = _Block_copy(v5);
  }
  *(void *)(a1 + 56) = v5;
  if (*(char *)(a2 + 87) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 64), *(const std::string::value_type **)(a2 + 64), *(void *)(a2 + 72));
  }
  else
  {
    long long v6 = *(_OWORD *)(a2 + 64);
    *(void *)(a1 + 80) = *(void *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = v6;
  }
  xpc_object_t v7 = (std::string *)(a1 + 88);
  if (*(char *)(a2 + 111) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)(a2 + 88), *(void *)(a2 + 96));
  }
  else
  {
    long long v8 = *(_OWORD *)(a2 + 88);
    *(void *)(a1 + 104) = *(void *)(a2 + 104);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
  }
}

void sub_1C592AFC8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 87) < 0) {
    operator delete(*v2);
  }
  uint64_t v4 = *(const void **)(v1 + 56);
  if (v4) {
    _Block_release(v4);
  }
  std::string::size_type v5 = *(std::__shared_weak_count **)(v1 + 48);
  if (v5) {
    std::__shared_weak_count::__release_weak(v5);
  }
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_40c37_ZTSNSt3__18weak_ptrI12TraceManagerEE56c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE64c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE88c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1)
{
  if ((*(char *)(a1 + 111) & 0x80000000) == 0)
  {
    if ((*(char *)(a1 + 87) & 0x80000000) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    operator delete(*(void **)(a1 + 64));
    uint64_t v2 = *(const void **)(a1 + 56);
    if (!v2) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  operator delete(*(void **)(a1 + 88));
  if (*(char *)(a1 + 87) < 0) {
    goto LABEL_6;
  }
LABEL_3:
  uint64_t v2 = *(const void **)(a1 + 56);
  if (v2) {
LABEL_7:
  }
    _Block_release(v2);
LABEL_8:
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3)
  {
    std::__shared_weak_count::__release_weak(v3);
  }
}

void TraceManager::start(void *a1, dispatch_object_t *a2)
{
  uint64_t v3 = *a2;
  if (*a2)
  {
    dispatch_retain(*a2);
    dispatch_group_enter(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[16];
  if (!v4 || (uint64_t v5 = a1[15], (v6 = std::__shared_weak_count::lock(v4)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  xpc_object_t v7 = v6;
  long long v8 = operator new(0x10uLL);
  *long long v8 = v3;
  v8[1] = a1;
  xpc_object_t v9 = a1[17];
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  long long v10 = operator new(0x18uLL);
  void *v10 = v8;
  v10[1] = v5;
  _DWORD v10[2] = v7;
  dispatch_async_f(v9, v10, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<TraceManager>::execute_wrapped<TraceManager::start(dispatch::group_session)::$_0>(TraceManager::start(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<TraceManager::start(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<TraceManager::start(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke);
  if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void TraceManager::finishInitialization_sync(std::__shared_weak_count **this)
{
  uint64_t v2 = (const char *)((uint64_t (*)(std::__shared_weak_count **))(*this)->__shared_weak_owners_)(this);
  size_t v3 = strlen(v2);
  if (v3 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v4 = (void *)v3;
  if (v3 >= 0x17)
  {
    uint64_t v6 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17) {
      uint64_t v6 = v3 | 7;
    }
    uint64_t v7 = v6 + 1;
    uint64_t v5 = (void **)operator new(v6 + 1);
    __dst[1] = v4;
    unint64_t v60 = v7 | 0x8000000000000000;
    __dst[0] = v5;
  }
  else
  {
    HIBYTE(v60) = v3;
    uint64_t v5 = __dst;
    if (!v3) {
      goto LABEL_9;
    }
  }
  memmove(v5, v2, (size_t)v4);
LABEL_9:
  *((unsigned char *)v4 + (void)v5) = 0;
  uint64_t v58 = 0;
  AppleBasebandManager::create();
  long long v8 = v61;
  long long v61 = 0uLL;
  xpc_object_t v9 = this[20];
  *(_OWORD *)(this + 19) = v8;
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  long long v10 = (std::__shared_weak_count *)*((void *)&v61 + 1);
  if (!*((void *)&v61 + 1)
    || atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v61 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    xpc_object_t v11 = v58;
    if (!v58) {
      goto LABEL_16;
    }
    goto LABEL_15;
  }
  ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
  std::__shared_weak_count::__release_weak(v10);
  xpc_object_t v11 = v58;
  if (v58) {
LABEL_15:
  }
    CFRelease(v11);
LABEL_16:
  if (SHIBYTE(v60) < 0) {
    operator delete(__dst[0]);
  }
  std::string::size_type v12 = this[16];
  if (!v12 || (v13 = this[15], (xpc_object_t v14 = std::__shared_weak_count::lock(v12)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v15 = v14;
  atomic_fetch_add_explicit(&v14->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v15);
  }
  xpc_object_t v16 = (const void *)*MEMORY[0x1E4F4CEF8];
  size_t v17 = strlen((const char *)*MEMORY[0x1E4F4CEF8]);
  if (v17 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  xpc_object_t v18 = (void *)v17;
  if (v17 >= 0x17)
  {
    uint64_t v20 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v17 | 7) != 0x17) {
      uint64_t v20 = v17 | 7;
    }
    uint64_t v21 = v20 + 1;
    xpc_object_t v19 = (void **)operator new(v20 + 1);
    v56[1] = v18;
    unint64_t v57 = v21 | 0x8000000000000000;
    v56[0] = v19;
    goto LABEL_29;
  }
  HIBYTE(v57) = v17;
  xpc_object_t v19 = v56;
  if (v17) {
LABEL_29:
  }
    memmove(v19, v16, (size_t)v18);
  *((unsigned char *)v18 + (void)v19) = 0;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN12TraceManager25finishInitialization_syncEv_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_82_0;
  aBlock[4] = this;
  void aBlock[5] = v13;
  xpc_object_t v53 = v15;
  atomic_fetch_add_explicit(&v15->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  xpc_object_t v22 = _Block_copy(aBlock);
  size_t v23 = this[17];
  if (v23) {
    dispatch_retain((dispatch_object_t)this[17]);
  }
  size_t v54 = v22;
  dispatch_object_t v55 = v23;
  AppleBasebandManager::setEventHandler();
  if (v55) {
    dispatch_release(v55);
  }
  if (v54) {
    _Block_release(v54);
  }
  if (SHIBYTE(v57) < 0) {
    operator delete(v56[0]);
  }
  size_t v24 = (const void *)*MEMORY[0x1E4F4CB10];
  size_t v25 = strlen((const char *)*MEMORY[0x1E4F4CB10]);
  if (v25 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  int v26 = (void *)v25;
  if (v25 >= 0x17)
  {
    uint64_t v28 = (v25 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v25 | 7) != 0x17) {
      uint64_t v28 = v25 | 7;
    }
    uint64_t v29 = v28 + 1;
    uint64_t v27 = operator new(v28 + 1);
    __p[1] = v26;
    unint64_t v51 = v29 | 0x8000000000000000;
    __p[0] = v27;
    goto LABEL_45;
  }
  HIBYTE(v51) = v25;
  uint64_t v27 = __p;
  if (v25) {
LABEL_45:
  }
    memmove(v27, v24, (size_t)v26);
  *((unsigned char *)v26 + (void)v27) = 0;
  v46[0] = MEMORY[0x1E4F143A8];
  v46[1] = 1174405120;
  void v46[2] = ___ZN12TraceManager25finishInitialization_syncEv_block_invoke_83;
  v46[3] = &__block_descriptor_tmp_88_1;
  v46[4] = this;
  void v46[5] = v13;
  uint64_t v47 = v15;
  atomic_fetch_add_explicit(&v15->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  char v30 = _Block_copy(v46);
  xpc_object_t v31 = this[17];
  if (v31) {
    dispatch_retain((dispatch_object_t)this[17]);
  }
  uint64_t v48 = v30;
  dispatch_object_t object = v31;
  AppleBasebandManager::setEventHandler();
  if (object) {
    dispatch_release(object);
  }
  if (v48) {
    _Block_release(v48);
  }
  if (SHIBYTE(v51) < 0) {
    operator delete(__p[0]);
  }
  unint64_t v32 = (const void *)*MEMORY[0x1E4F4CB18];
  size_t v33 = strlen((const char *)*MEMORY[0x1E4F4CB18]);
  if (v33 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v34 = (void *)v33;
  if (v33 >= 0x17)
  {
    uint64_t v36 = (v33 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v33 | 7) != 0x17) {
      uint64_t v36 = v33 | 7;
    }
    uint64_t v37 = v36 + 1;
    uint64_t v35 = operator new(v36 + 1);
    v44[1] = v34;
    unint64_t v45 = v37 | 0x8000000000000000;
    v44[0] = v35;
    goto LABEL_61;
  }
  HIBYTE(v45) = v33;
  uint64_t v35 = v44;
  if (v33) {
LABEL_61:
  }
    memmove(v35, v32, (size_t)v34);
  *((unsigned char *)v34 + (void)v35) = 0;
  v40[0] = MEMORY[0x1E4F143A8];
  v40[1] = 1174405120;
  v40[2] = ___ZN12TraceManager25finishInitialization_syncEv_block_invoke_89;
  v40[3] = &__block_descriptor_tmp_93_1;
  uint8_t v40[4] = this;
  v40[5] = v13;
  uint64_t v41 = v15;
  atomic_fetch_add_explicit(&v15->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  int v38 = _Block_copy(v40);
  long long v39 = this[17];
  if (v39) {
    dispatch_retain((dispatch_object_t)this[17]);
  }
  uint64_t v42 = v38;
  dispatch_object_t v43 = v39;
  AppleBasebandManager::setEventHandler();
  if (v43) {
    dispatch_release(v43);
  }
  if (v42) {
    _Block_release(v42);
  }
  if (SHIBYTE(v45) < 0) {
    operator delete(v44[0]);
  }
  AppleBasebandManager::eventsOn((AppleBasebandManager *)this[19]);
  if (v41) {
    std::__shared_weak_count::__release_weak(v41);
  }
  if (v47) {
    std::__shared_weak_count::__release_weak(v47);
  }
  if (v53) {
    std::__shared_weak_count::__release_weak(v53);
  }
  std::__shared_weak_count::__release_weak(v15);
}

void sub_1C592B7C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,std::__shared_weak_count *a30,char a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,std::__shared_weak_count *a45)
{
  if (a15) {
    std::__shared_weak_count::__release_weak(a15);
  }
  if (a30) {
    std::__shared_weak_count::__release_weak(a30);
  }
  if (a45) {
    std::__shared_weak_count::__release_weak(a45);
  }
  std::__shared_weak_count::__release_weak(v45);
  _Unwind_Resume(a1);
}

void ___ZN12TraceManager25finishInitialization_syncEv_block_invoke(void *a1, uint64_t a2)
{
  uint64_t v287 = *MEMORY[0x1E4F143B8];
  size_t v3 = (std::__shared_weak_count *)a1[6];
  if (!v3) {
    return;
  }
  uint64_t v5 = a1[4];
  uint64_t v6 = std::__shared_weak_count::lock(v3);
  v284 = v6;
  if (!v6) {
    return;
  }
  uint64_t v7 = v6;
  uint64_t v8 = a1[5];
  uint64_t v283 = v8;
  if (!v8)
  {
LABEL_447:
    if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    return;
  }
  CFDictionaryRef v282 = (const __CFDictionary *)0xAAAAAAAAAAAAAAAALL;
  abm::client::Event::getData((uint64_t *)&v282, *(abm::client::Event **)a2);
  CFDictionaryRef v9 = v282;
  if (v282) {
    long long v10 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
  }
  else {
    long long v10 = 0;
  }
  if (v10)
  {
    v281[0] = 0xAAAAAAAAAAAAAAAALL;
    v281[1] = 0xAAAAAAAAAAAAAAAALL;
    ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v281, v282);
    memset(v280, 170, sizeof(v280));
    xpc_object_t v11 = (const char *)*MEMORY[0x1E4F4C688];
    ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&buf, (const char *)*MEMORY[0x1E4F4C688]);
    ctu::cf::map_adapter::getString();
    MEMORY[0x1C8791110](&buf);
    std::string::size_type v12 = (void **)(v5 + 192);
    if ((unsigned char *)(v5 + 192) != v280)
    {
      if (*(char *)(v5 + 215) < 0)
      {
        if (v280[23] >= 0) {
          uint64_t v13 = v280;
        }
        else {
          uint64_t v13 = *(unsigned char **)v280;
        }
        if (v280[23] >= 0) {
          size_t v14 = v280[23];
        }
        else {
          size_t v14 = *(void *)&v280[8];
        }
        std::string::__assign_no_alias<false>(v12, v13, v14);
      }
      else if ((v280[23] & 0x80) != 0)
      {
        std::string::__assign_no_alias<true>(v12, *(void **)v280, *(size_t *)&v280[8]);
      }
      else
      {
        *(_OWORD *)std::string::size_type v12 = *(_OWORD *)v280;
        *(void *)(v5 + 208) = *(void *)&v280[16];
      }
    }
    uint64_t v15 = *(NSObject **)(v5 + 88);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      xpc_object_t v16 = v280;
      if (v280[23] < 0) {
        xpc_object_t v16 = *(unsigned char **)v280;
      }
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v16;
      _os_log_impl(&dword_1C5767000, v15, OS_LOG_TYPE_DEFAULT, "#I %s", (uint8_t *)&buf, 0xCu);
    }
    int v17 = v280[23];
    if (v280[23] >= 0) {
      size_t v18 = v280[23];
    }
    else {
      size_t v18 = *(void *)&v280[8];
    }
    if (v18 != strlen((const char *)*MEMORY[0x1E4F4CCD8])
      || (v280[23] >= 0 ? (xpc_object_t v19 = v280) : (xpc_object_t v19 = *(unsigned char **)v280), memcmp(v19, (const void *)*MEMORY[0x1E4F4CCD8], v18)))
    {
      uint64_t v20 = (const char *)*MEMORY[0x1E4F4C958];
      if (v18 == strlen((const char *)*MEMORY[0x1E4F4C958]))
      {
        uint64_t v21 = v17 >= 0 ? v280 : *(unsigned char **)v280;
        if (!memcmp(v21, v20, v18))
        {
          memset(&buf, 170, 16);
          v243[0] = MEMORY[0x1E4F143A8];
          v243[1] = 1174405120;
          v243[2] = ___ZN12TraceManager25finishInitialization_syncEv_block_invoke_59;
          v243[3] = &__block_descriptor_tmp_62_0;
          v243[4] = v5;
          v243[5] = v8;
          v244 = v7;
          atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
          long long v39 = *(std::__shared_weak_count **)(a2 + 8);
          v245 = *(abm::client::Event **)a2;
          v246 = v39;
          if (v39) {
            atomic_fetch_add_explicit(&v39->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          size_t v40 = _Block_copy(v243);
          std::string::size_type v41 = *(void *)(v5 + 136);
          if (v41) {
            dispatch_retain(*(dispatch_object_t *)(v5 + 136));
          }
          buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v40;
          buf.__r_.__value_.__l.__size_ = v41;
          xpc_object_t v42 = xpc_dictionary_create(0, 0, 0);
          if (v42 || (xpc_object_t v42 = xpc_null_create()) != 0)
          {
            if (MEMORY[0x1C8792D30](v42) == MEMORY[0x1E4F14590])
            {
              xpc_retain(v42);
              xpc_object_t v43 = v42;
            }
            else
            {
              xpc_object_t v43 = xpc_null_create();
            }
          }
          else
          {
            xpc_object_t v43 = xpc_null_create();
            xpc_object_t v42 = 0;
          }
          xpc_release(v42);
          xpc_object_t v76 = xpc_string_create(v20);
          if (!v76) {
            xpc_object_t v76 = xpc_null_create();
          }
          xpc_dictionary_set_value(v43, v11, v76);
          xpc_object_t v77 = xpc_null_create();
          xpc_release(v76);
          xpc_release(v77);
          xpc_object_t v242 = v43;
          if (v43) {
            xpc_retain(v43);
          }
          else {
            xpc_object_t v242 = xpc_null_create();
          }
          v241 = 0;
          if (buf.__r_.__value_.__r.__words[0]) {
            uint64_t v78 = _Block_copy(buf.__r_.__value_.__l.__data_);
          }
          else {
            uint64_t v78 = 0;
          }
          uint64_t v79 = *MEMORY[0x1E4F47188];
          std::string::size_type size = buf.__r_.__value_.__l.__size_;
          v240[0] = v78;
          v240[1] = (void *)buf.__r_.__value_.__l.__size_;
          if (buf.__r_.__value_.__l.__size_) {
            dispatch_retain((dispatch_object_t)buf.__r_.__value_.__l.__size_);
          }
          TraceManager::runOnHelper_sync((void *)v5, (const char *)9, v79, 0x1388u, 0, &v242, &v241, v240);
          if (size) {
            dispatch_release(size);
          }
          if (v78) {
            _Block_release(v78);
          }
          xpc_release(v242);
          xpc_object_t v242 = 0;
          xpc_release(v43);
          if (buf.__r_.__value_.__l.__size_) {
            dispatch_release((dispatch_object_t)buf.__r_.__value_.__l.__size_);
          }
          if (buf.__r_.__value_.__r.__words[0]) {
            _Block_release(buf.__r_.__value_.__l.__data_);
          }
          size_t v81 = v246;
          if (v246 && !atomic_fetch_add(&v246->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
            std::__shared_weak_count::__release_weak(v81);
          }
          __darwin_ino64_t v82 = v244;
          if (!v244) {
            goto LABEL_441;
          }
LABEL_252:
          if (!atomic_fetch_add(&v82->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
            std::__shared_weak_count::__release_weak(v82);
          }
          goto LABEL_441;
        }
      }
      xpc_object_t v22 = (const void *)*MEMORY[0x1E4F4CAE8];
      if (v18 != strlen((const char *)*MEMORY[0x1E4F4CAE8])
        || (v17 >= 0 ? (size_t v23 = v280) : (size_t v23 = *(unsigned char **)v280), memcmp(v23, v22, v18)))
      {
        if (v18 == strlen((const char *)*MEMORY[0x1E4F4C6E0]))
        {
          size_t v24 = v17 >= 0 ? v280 : *(unsigned char **)v280;
          if (!memcmp(v24, (const void *)*MEMORY[0x1E4F4C6E0], v18))
          {
            v279[0] = (void *)0xAAAAAAAAAAAAAAAALL;
            v279[1] = (void *)0xAAAAAAAAAAAAAAAALL;
            aBlock[0] = MEMORY[0x1E4F143A8];
            aBlock[1] = 1174405120;
            aBlock[2] = ___ZN12TraceManager25finishInitialization_syncEv_block_invoke_71;
            aBlock[3] = &__block_descriptor_tmp_74_1;
            aBlock[4] = v5;
            v226[0] = v8;
            v226[1] = v7;
            atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
            uint64_t v25 = *(void *)(a2 + 8);
            v227[0] = *(void *)a2;
            v227[1] = v25;
            if (v25) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v25 + 8), 1uLL, memory_order_relaxed);
            }
            int v26 = _Block_copy(aBlock);
            uint64_t v27 = *(void **)(v5 + 136);
            if (v27) {
              dispatch_retain(*(dispatch_object_t *)(v5 + 136));
            }
            v279[0] = v26;
            v279[1] = v27;
            LODWORD(v278.__r_.__value_.__l.__data_) = -1431655766;
            uint64_t v28 = (char *)std::string::basic_string[abi:ne180100]<0>(&buf, (char *)*MEMORY[0x1E4F4C198]);
            prop::bbtrace::get<diag::config::Mode>(v28, (int *)&v278);
            if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(buf.__r_.__value_.__l.__data_);
            }
            LODWORD(__dst[0]) = -1431655766;
            uint64_t v29 = (char *)std::string::basic_string[abi:ne180100]<0>(&buf, (char *)*MEMORY[0x1E4F4C428]);
            prop::bbtrace::get<abm::traceOwnership>(v29, (int *)__dst);
            if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(buf.__r_.__value_.__l.__data_);
            }
            if (LODWORD(v278.__r_.__value_.__l.__data_) == 4 && LODWORD(__dst[0]) == 1)
            {
              char v30 = *(NSObject **)(v5 + 88);
              if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
              {
                LOWORD(buf.__r_.__value_.__l.__data_) = 0;
                _os_log_impl(&dword_1C5767000, v30, OS_LOG_TYPE_DEFAULT, "#N Baseband is dead while Cellular Logging is running. Cellular Logging will be stopped.", (uint8_t *)&buf, 2u);
              }
              v223 = 0;
              xpc_object_t object = xpc_null_create();
              v220[0] = MEMORY[0x1E4F143A8];
              v220[1] = 1174405120;
              v220[2] = ___ZN12TraceManager25finishInitialization_syncEv_block_invoke_75;
              v220[3] = &__block_descriptor_tmp_78_1;
              v220[4] = v5;
              dispatch::callback<void({block_pointer})(TelephonyXPC::Result,xpc::dict)>::callback(v221, (uint64_t)v279);
              xpc_object_t v31 = _Block_copy(v220);
              uint64_t v32 = *MEMORY[0x1E4F47208];
              size_t v33 = *(void **)(v5 + 136);
              if (v33) {
                dispatch_retain(*(dispatch_object_t *)(v5 + 136));
              }
              v222[0] = v31;
              v222[1] = v33;
              TraceManager::runOnHelper_sync((void *)v5, (const char *)0xA, v32, 0x1388u, 1, &object, &v223, v222);
              dispatch::callback<void({block_pointer})(TelephonyXPC::Result,xpc::dict)>::~callback((uint64_t)v222);
              xpc_release(object);
              xpc_object_t object = 0;
              dispatch::callback<void({block_pointer})(TelephonyXPC::Result,xpc::dict)>::~callback((uint64_t)v221);
            }
            else
            {
              xpc_object_t v62 = xpc_null_create();
              uint64_t v63 = *MEMORY[0x1E4F47128];
              char v218 = 0;
              xpc_object_t v219 = v62;
              dispatch::callback<void({block_pointer})(TelephonyXPC::Result,xpc::dict)>::callback(v217, (uint64_t)v279);
              TraceManager::runOnHelper_sync((void *)v5, (const char *)9, v63, 0x7D0u, 0, &v219, &v218, v217);
              dispatch::callback<void({block_pointer})(TelephonyXPC::Result,xpc::dict)>::~callback((uint64_t)v217);
              xpc_release(v219);
              xpc_object_t v219 = 0;
            }
            dispatch::callback<void({block_pointer})(TelephonyXPC::Result,xpc::dict)>::~callback((uint64_t)v279);
            std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)v227);
            std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)v226);
          }
        }
LABEL_441:
        if ((v280[23] & 0x80000000) != 0) {
          operator delete(*(void **)v280);
        }
        MEMORY[0x1C8791160](v281);
        CFDictionaryRef v9 = v282;
        goto LABEL_444;
      }
      TraceManager::updateBasebandFWInfo((TraceManager *)v5);
      v278.__r_.__value_.__l.__size_ = 0xAAAAAAAAAAAAAAAALL;
      v278.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
      v236[0] = MEMORY[0x1E4F143A8];
      v236[1] = 1174405120;
      v236[2] = ___ZN12TraceManager25finishInitialization_syncEv_block_invoke_63;
      v236[3] = &__block_descriptor_tmp_66_2;
      v236[4] = v5;
      v236[5] = v8;
      v237 = v7;
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v44 = *(std::__shared_weak_count **)(a2 + 8);
      v238 = *(abm::client::Event **)a2;
      v239 = v44;
      if (v44) {
        atomic_fetch_add_explicit(&v44->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      unint64_t v45 = _Block_copy(v236);
      std::string::size_type v46 = *(void *)(v5 + 136);
      if (v46) {
        dispatch_retain(*(dispatch_object_t *)(v5 + 136));
      }
      v278.__r_.__value_.__r.__words[0] = (std::string::size_type)v45;
      v278.__r_.__value_.__l.__size_ = v46;
      __dst[0] = (void *)0xAAAAAAAAAAAAAAAALL;
      xpc_object_t v47 = xpc_dictionary_create(0, 0, 0);
      xpc_object_t v48 = v47;
      if (v47)
      {
        __dst[0] = v47;
      }
      else
      {
        xpc_object_t v48 = xpc_null_create();
        __dst[0] = v48;
        if (!v48)
        {
          xpc_object_t v64 = xpc_null_create();
          xpc_object_t v48 = 0;
          goto LABEL_200;
        }
      }
      if (MEMORY[0x1C8792D30](v48) == MEMORY[0x1E4F14590])
      {
        xpc_retain(v48);
        goto LABEL_201;
      }
      xpc_object_t v64 = xpc_null_create();
LABEL_200:
      __dst[0] = v64;
LABEL_201:
      xpc_release(v48);
      xpc_object_t v100 = xpc_string_create((const char *)v22);
      if (!v100) {
        xpc_object_t v100 = xpc_null_create();
      }
      xpc_dictionary_set_value(__dst[0], v11, v100);
      xpc_object_t v101 = xpc_null_create();
      xpc_release(v100);
      xpc_release(v101);
      xpc_object_t v102 = (const void *)*MEMORY[0x1E4F4C198];
      size_t v103 = strlen((const char *)*MEMORY[0x1E4F4C198]);
      if (v103 > 0x7FFFFFFFFFFFFFF7) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      xpc_object_t v104 = (void *)v103;
      if (v103 >= 0x17)
      {
        uint64_t v106 = (v103 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v103 | 7) != 0x17) {
          uint64_t v106 = v103 | 7;
        }
        uint64_t v107 = v106 + 1;
        size_t v105 = (void **)operator new(v106 + 1);
        v279[1] = v104;
        v279[2] = (void *)(v107 | 0x8000000000000000);
        v279[0] = v105;
      }
      else
      {
        HIBYTE(v279[2]) = v103;
        size_t v105 = v279;
        if (!v103)
        {
LABEL_211:
          *((unsigned char *)v104 + (void)v105) = 0;
          memset(&buf, 0, sizeof(buf));
          int v108 = -1431655766;
          int v109 = -1431655766;
          if (prop::bbtrace::get((char *)v279, (uint64_t)&buf))
          {
            LODWORD(__p) = -1431655766;
            if (util::convert<int>(&buf, &__p, 0)) {
              int v109 = (int)__p;
            }
            else {
              int v109 = -1431655766;
            }
          }
          if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(buf.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v279[2]) < 0) {
            operator delete(v279[0]);
          }
          std::string v110 = (const void *)*MEMORY[0x1E4F4C428];
          size_t v111 = strlen((const char *)*MEMORY[0x1E4F4C428]);
          if (v111 > 0x7FFFFFFFFFFFFFF7) {
            std::string::__throw_length_error[abi:ne180100]();
          }
          uint64_t v112 = (void *)v111;
          if (v111 >= 0x17)
          {
            uint64_t v114 = (v111 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v111 | 7) != 0x17) {
              uint64_t v114 = v111 | 7;
            }
            uint64_t v115 = v114 + 1;
            CFAllocatorRef v113 = (void **)operator new(v114 + 1);
            v279[1] = v112;
            v279[2] = (void *)(v115 | 0x8000000000000000);
            v279[0] = v113;
          }
          else
          {
            HIBYTE(v279[2]) = v111;
            CFAllocatorRef v113 = v279;
            if (!v111)
            {
LABEL_227:
              *((unsigned char *)v112 + (void)v113) = 0;
              memset(&buf, 0, sizeof(buf));
              if (prop::bbtrace::get((char *)v279, (uint64_t)&buf))
              {
                LODWORD(__p) = -1431655766;
                if (util::convert<int>(&buf, &__p, 0)) {
                  int v108 = (int)__p;
                }
                else {
                  int v108 = -1431655766;
                }
              }
              if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
              {
                operator delete(buf.__r_.__value_.__l.__data_);
                if ((SHIBYTE(v279[2]) & 0x80000000) == 0)
                {
LABEL_233:
                  CFAllocatorRef v116 = (uint64_t *)MEMORY[0x1E4F47138];
                  if (v109 != 4) {
                    goto LABEL_243;
                  }
LABEL_237:
                  if (v108 == 1)
                  {
                    CFAllocatorRef v117 = *(NSObject **)(v5 + 88);
                    if (os_log_type_enabled(v117, OS_LOG_TYPE_DEFAULT))
                    {
                      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
                      _os_log_impl(&dword_1C5767000, v117, OS_LOG_TYPE_DEFAULT, "#N Resume notification will be sent to cellular logging after all traces are started.", (uint8_t *)&buf, 2u);
                    }
                    v234 = 0;
                    xpc_object_t v235 = xpc_null_create();
                    v231[0] = MEMORY[0x1E4F143A8];
                    v231[1] = 1174405120;
                    v231[2] = ___ZN12TraceManager25finishInitialization_syncEv_block_invoke_67;
                    v231[3] = &__block_descriptor_tmp_70_0;
                    v231[4] = v5;
                    dispatch::callback<void({block_pointer})(TelephonyXPC::Result,xpc::dict)>::callback(v232, (uint64_t)&v278);
                    CFAllocatorRef v118 = _Block_copy(v231);
                    uint64_t v119 = *v116;
                    CFAllocatorRef v120 = *(void **)(v5 + 136);
                    if (v120) {
                      dispatch_retain(*(dispatch_object_t *)(v5 + 136));
                    }
                    v233[0] = v118;
                    v233[1] = v120;
                    TraceManager::runOnHelper_sync((void *)v5, (const char *)9, v119, 0x1388u, 0, &v235, &v234, v233);
                    dispatch::callback<void({block_pointer})(TelephonyXPC::Result,xpc::dict)>::~callback((uint64_t)v233);
                    xpc_release(v235);
                    xpc_object_t v235 = 0;
                    dispatch::callback<void({block_pointer})(TelephonyXPC::Result,xpc::dict)>::~callback((uint64_t)v232);
LABEL_244:
                    TraceManager::setupDumpLogsIndication_sync((NSObject **)v5);
                    xpc_release(__dst[0]);
                    if (v278.__r_.__value_.__l.__size_) {
                      dispatch_release((dispatch_object_t)v278.__r_.__value_.__l.__size_);
                    }
                    if (v278.__r_.__value_.__r.__words[0]) {
                      _Block_release(v278.__r_.__value_.__l.__data_);
                    }
                    CFAllocatorRef v122 = v239;
                    if (v239 && !atomic_fetch_add(&v239->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                    {
                      ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
                      std::__shared_weak_count::__release_weak(v122);
                    }
                    __darwin_ino64_t v82 = v237;
                    if (!v237) {
                      goto LABEL_441;
                    }
                    goto LABEL_252;
                  }
LABEL_243:
                  uint64_t v121 = *v116;
                  xpc::dict::dict((xpc::dict *)&v230, __dst);
                  uint64_t v229 = 0;
                  dispatch::callback<void({block_pointer})(TelephonyXPC::Result,xpc::dict)>::callback(v228, (uint64_t)&v278);
                  TraceManager::runOnHelper_sync((void *)v5, (const char *)9, v121, 0x1388u, 0, &v230, &v229, v228);
                  dispatch::callback<void({block_pointer})(TelephonyXPC::Result,xpc::dict)>::~callback((uint64_t)v228);
                  xpc_release(v230);
                  xpc_object_t v230 = 0;
                  goto LABEL_244;
                }
              }
              else if ((SHIBYTE(v279[2]) & 0x80000000) == 0)
              {
                goto LABEL_233;
              }
              operator delete(v279[0]);
              CFAllocatorRef v116 = (uint64_t *)MEMORY[0x1E4F47138];
              if (v109 != 4) {
                goto LABEL_243;
              }
              goto LABEL_237;
            }
          }
          memmove(v113, v110, (size_t)v112);
          goto LABEL_227;
        }
      }
      memmove(v105, v102, (size_t)v104);
      goto LABEL_211;
    }
    memset(v279, 170, sizeof(v279));
    uint64_t v34 = (const char *)*MEMORY[0x1E4F4C690];
    memset(&buf, 0, sizeof(buf));
    ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v278, v34);
    ctu::cf::map_adapter::getString();
    MEMORY[0x1C8791110](&v278);
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf.__r_.__value_.__l.__data_);
    }
    memset(&v278, 170, sizeof(v278));
    uint64_t v35 = (const std::string::value_type *)*MEMORY[0x1E4F4C1C8];
    size_t v36 = strlen((const char *)*MEMORY[0x1E4F4C1C8]);
    if (v36 > 0x7FFFFFFFFFFFFFF7) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    std::string::size_type v37 = v36;
    if (v36 >= 0x17)
    {
      uint64_t v49 = (v36 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v36 | 7) != 0x17) {
        uint64_t v49 = v36 | 7;
      }
      uint64_t v50 = v49 + 1;
      p_std::string buf = (std::string *)operator new(v49 + 1);
      buf.__r_.__value_.__l.__size_ = v37;
      buf.__r_.__value_.__r.__words[2] = v50 | 0x8000000000000000;
      buf.__r_.__value_.__r.__words[0] = (std::string::size_type)p_buf;
    }
    else
    {
      *((unsigned char *)&buf.__r_.__value_.__s + 23) = v36;
      p_std::string buf = &buf;
      if (!v36)
      {
LABEL_86:
        unint64_t v51 = (const char *)*MEMORY[0x1E4F4C8F0];
        p_buf->__r_.__value_.__s.__data_[v37] = 0;
        ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)__dst, v51);
        ctu::cf::map_adapter::getString();
        MEMORY[0x1C8791110](__dst);
        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(buf.__r_.__value_.__l.__data_);
        }
        CFAllocatorRef v52 = (const char *)*MEMORY[0x1E4F4C180];
        ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&buf, (const char *)*MEMORY[0x1E4F4C180]);
        int Int = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v281, (const __CFString *)buf.__r_.__value_.__l.__data_);
        MEMORY[0x1C8791110](&buf);
        std::string::size_type v53 = HIBYTE(v278.__r_.__value_.__r.__words[2]);
        if ((v278.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type v53 = v278.__r_.__value_.__l.__size_;
        }
        if (!v53) {
          std::string::__assign_external(&v278, v35);
        }
        size_t v54 = (const void *)*MEMORY[0x1E4F4C6E8];
        int v55 = SHIBYTE(v279[2]);
        if (SHIBYTE(v279[2]) >= 0) {
          size_t v56 = HIBYTE(v279[2]);
        }
        else {
          size_t v56 = (size_t)v279[1];
        }
        if (v56 != strlen((const char *)*MEMORY[0x1E4F4C6E8])
          || (SHIBYTE(v279[2]) >= 0 ? (unint64_t v57 = v279) : (unint64_t v57 = (void **)v279[0]), memcmp(v57, v54, v56)))
        {
          uint64_t v58 = (const void *)*MEMORY[0x1E4F4C6F0];
          if (v56 != strlen((const char *)*MEMORY[0x1E4F4C6F0])
            || (v55 >= 0 ? (uint64_t v59 = v279) : (uint64_t v59 = (void **)v279[0]), memcmp(v59, v58, v56)))
          {
            unint64_t v60 = *(NSObject **)(v5 + 88);
            if (os_log_type_enabled(v60, OS_LOG_TYPE_DEFAULT))
            {
              long long v61 = (void **)v279[0];
              if (v55 >= 0) {
                long long v61 = v279;
              }
              LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
              *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v61;
              _os_log_impl(&dword_1C5767000, v60, OS_LOG_TYPE_DEFAULT, "#I Invalid reset type [%s]", (uint8_t *)&buf, 0xCu);
            }
LABEL_437:
            if (SHIBYTE(v278.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v278.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v279[2]) < 0) {
              operator delete(v279[0]);
            }
            goto LABEL_441;
          }
          dispatch_object_t v272 = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
          std::string __p = (void *)0xAAAAAAAAAAAAAAAALL;
          v258[0] = MEMORY[0x1E4F143A8];
          v258[1] = 1174405120;
          v258[2] = ___ZN12TraceManager25finishInitialization_syncEv_block_invoke_55;
          v258[3] = &__block_descriptor_tmp_56_4;
          v258[4] = v5;
          v258[5] = v283;
          v259 = v284;
          if (v284) {
            atomic_fetch_add_explicit(&v284->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          std::string::size_type v69 = *(std::__shared_weak_count **)(a2 + 8);
          v260 = *(abm::client::Event **)a2;
          v261 = v69;
          if (v69) {
            atomic_fetch_add_explicit(&v69->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          size_t v70 = _Block_copy(v258);
          char v71 = *(NSObject **)(v5 + 136);
          if (v71) {
            dispatch_retain(*(dispatch_object_t *)(v5 + 136));
          }
          std::string __p = v70;
          dispatch_object_t v272 = v71;
          CFAllocatorRef v72 = (const void *)*MEMORY[0x1E4F4C198];
          size_t v73 = strlen((const char *)*MEMORY[0x1E4F4C198]);
          if (v73 > 0x7FFFFFFFFFFFFFF7) {
            std::string::__throw_length_error[abi:ne180100]();
          }
          uint64_t v74 = (void *)v73;
          if (v73 >= 0x17)
          {
            uint64_t v123 = (v73 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v73 | 7) != 0x17) {
              uint64_t v123 = v73 | 7;
            }
            uint64_t v124 = v123 + 1;
            size_t v75 = (void **)operator new(v123 + 1);
            xpc_object_t __dst[2] = (void *)(v124 | 0x8000000000000000);
            __dst[0] = v75;
            __dst[1] = v74;
          }
          else
          {
            HIBYTE(__dst[2]) = v73;
            size_t v75 = __dst;
            if (!v73)
            {
LABEL_258:
              *((unsigned char *)v74 + (void)v75) = 0;
              memset(&buf, 0, sizeof(buf));
              int v125 = -1431655766;
              if (prop::bbtrace::get((char *)__dst, (uint64_t)&buf))
              {
                LODWORD(v285) = -1431655766;
                if (util::convert<int>(&buf, &v285, 0)) {
                  int v125 = v285;
                }
                else {
                  int v125 = -1431655766;
                }
              }
              if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(buf.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(__dst[2]) < 0) {
                operator delete(__dst[0]);
              }
              xpc_object_t v126 = (const void *)*MEMORY[0x1E4F4C428];
              size_t v127 = strlen((const char *)*MEMORY[0x1E4F4C428]);
              if (v127 > 0x7FFFFFFFFFFFFFF7) {
                std::string::__throw_length_error[abi:ne180100]();
              }
              int v128 = (void *)v127;
              if (v127 >= 0x17)
              {
                uint64_t v130 = (v127 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v127 | 7) != 0x17) {
                  uint64_t v130 = v127 | 7;
                }
                uint64_t v131 = v130 + 1;
                CFAllocatorRef v129 = (void **)operator new(v130 + 1);
                xpc_object_t __dst[2] = (void *)(v131 | 0x8000000000000000);
                __dst[0] = v129;
                __dst[1] = v128;
              }
              else
              {
                HIBYTE(__dst[2]) = v127;
                CFAllocatorRef v129 = __dst;
                if (!v127)
                {
LABEL_274:
                  *((unsigned char *)v128 + (void)v129) = 0;
                  memset(&buf, 0, sizeof(buf));
                  int v132 = -1431655766;
                  if (prop::bbtrace::get((char *)__dst, (uint64_t)&buf))
                  {
                    LODWORD(v285) = -1431655766;
                    if (util::convert<int>(&buf, &v285, 0)) {
                      int v132 = v285;
                    }
                    else {
                      int v132 = -1431655766;
                    }
                  }
                  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(buf.__r_.__value_.__l.__data_);
                  }
                  if (SHIBYTE(__dst[2]) < 0) {
                    operator delete(__dst[0]);
                  }
                  CFAllocatorRef v133 = (const void *)*MEMORY[0x1E4F4F9B0];
                  size_t v134 = strlen((const char *)*MEMORY[0x1E4F4F9B0]);
                  if (v134 > 0x7FFFFFFFFFFFFFF7) {
                    std::string::__throw_length_error[abi:ne180100]();
                  }
                  xpc_object_t v135 = (void *)v134;
                  if (v134 >= 0x17)
                  {
                    uint64_t v137 = (v134 & 0xFFFFFFFFFFFFFFF8) + 8;
                    if ((v134 | 7) != 0x17) {
                      uint64_t v137 = v134 | 7;
                    }
                    uint64_t v138 = v137 + 1;
                    int v136 = (void **)operator new(v137 + 1);
                    xpc_object_t __dst[2] = (void *)(v138 | 0x8000000000000000);
                    __dst[0] = v136;
                    __dst[1] = v135;
                  }
                  else
                  {
                    HIBYTE(__dst[2]) = v134;
                    int v136 = __dst;
                    if (!v134)
                    {
LABEL_290:
                      *((unsigned char *)v135 + (void)v136) = 0;
                      memset(&buf, 0, sizeof(buf));
                      if (prop::bbtrace::get((char *)__dst, (uint64_t)&buf))
                      {
                        LODWORD(v285) = -1431655766;
                        if (util::convert<int>(&buf, &v285, 0)) {
                          int v139 = v285;
                        }
                        else {
                          int v139 = 0;
                        }
                      }
                      else
                      {
                        int v139 = 0;
                      }
                      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
                      {
                        operator delete(buf.__r_.__value_.__l.__data_);
                        if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
                        {
LABEL_297:
                          if (v125 != 4) {
                            goto LABEL_333;
                          }
LABEL_327:
                          if (v132 == 1)
                          {
                            xpc_object_t v153 = *(NSObject **)(v5 + 88);
                            if (os_log_type_enabled(v153, OS_LOG_TYPE_DEFAULT))
                            {
                              LOWORD(buf.__r_.__value_.__l.__data_) = 0;
                              _os_log_impl(&dword_1C5767000, v153, OS_LOG_TYPE_DEFAULT, "#N Soft reset detected while Cellular Logging is running. Cellular Logging will be paused.", (uint8_t *)&buf, 2u);
                            }
                            xpc_object_t v257 = xpc_null_create();
                            v256 = 0;
                            v253[0] = MEMORY[0x1E4F143A8];
                            v253[1] = 1174405120;
                            v253[2] = ___ZN12TraceManager25finishInitialization_syncEv_block_invoke_57;
                            v253[3] = &__block_descriptor_tmp_58_0;
                            v253[4] = v5;
                            dispatch::callback<void({block_pointer})(TelephonyXPC::Result,xpc::dict)>::callback(v254, (uint64_t)&__p);
                            uint64_t v154 = _Block_copy(v253);
                            uint64_t v155 = *MEMORY[0x1E4F47228];
                            uint64_t v156 = *(void **)(v5 + 136);
                            if (v156) {
                              dispatch_retain(*(dispatch_object_t *)(v5 + 136));
                            }
                            v255[0] = v154;
                            v255[1] = v156;
                            TraceManager::runOnHelper_sync((void *)v5, (const char *)0xA, v155, 0x1388u, 1, &v257, &v256, v255);
                            dispatch::callback<void({block_pointer})(TelephonyXPC::Result,xpc::dict)>::~callback((uint64_t)v255);
                            xpc_release(v257);
                            xpc_object_t v257 = 0;
                            dispatch::callback<void({block_pointer})(TelephonyXPC::Result,xpc::dict)>::~callback((uint64_t)v254);
LABEL_337:
                            size_t v159 = strlen((const char *)v58);
                            if (v159 > 0x7FFFFFFFFFFFFFF7) {
                              std::string::__throw_length_error[abi:ne180100]();
                            }
                            CFAllocatorRef v160 = (void *)v159;
                            if (v159 >= 0x17)
                            {
                              uint64_t v162 = (v159 & 0xFFFFFFFFFFFFFFF8) + 8;
                              if ((v159 | 7) != 0x17) {
                                uint64_t v162 = v159 | 7;
                              }
                              uint64_t v163 = v162 + 1;
                              int v161 = operator new(v162 + 1);
                              unint64_t v249 = v163 | 0x8000000000000000;
                              v248[0] = v161;
                              v248[1] = v160;
                            }
                            else
                            {
                              HIBYTE(v249) = v159;
                              int v161 = v248;
                              if (!v159)
                              {
LABEL_345:
                                *((unsigned char *)v160 + (void)v161) = 0;
                                if (SHIBYTE(v278.__r_.__value_.__r.__words[2]) < 0) {
                                  std::string::__init_copy_ctor_external(&v247, v278.__r_.__value_.__l.__data_, v278.__r_.__value_.__l.__size_);
                                }
                                else {
                                  std::string v247 = v278;
                                }
                                TraceManager::submitTraceMetric_sync(v5, (const char *)v248, (const char *)&v247);
                                if (SHIBYTE(v247.__r_.__value_.__r.__words[2]) < 0)
                                {
                                  operator delete(v247.__r_.__value_.__l.__data_);
                                  if ((SHIBYTE(v249) & 0x80000000) == 0)
                                  {
LABEL_350:
                                    xpc_object_t v164 = v272;
                                    if (!v272)
                                    {
LABEL_352:
                                      if (__p) {
                                        _Block_release(__p);
                                      }
                                      v165 = v261;
                                      if (v261 && !atomic_fetch_add(&v261->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                                      {
                                        ((void (*)(std::__shared_weak_count *))v165->__on_zero_shared)(v165);
                                        std::__shared_weak_count::__release_weak(v165);
                                      }
                                      uint64_t v166 = v259;
                                      if (v259 && !atomic_fetch_add(&v259->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                                      {
                                        ((void (*)(std::__shared_weak_count *))v166->__on_zero_shared)(v166);
                                        std::__shared_weak_count::__release_weak(v166);
                                      }
                                      goto LABEL_437;
                                    }
LABEL_351:
                                    dispatch_release(v164);
                                    goto LABEL_352;
                                  }
                                }
                                else if ((SHIBYTE(v249) & 0x80000000) == 0)
                                {
                                  goto LABEL_350;
                                }
                                operator delete(v248[0]);
                                xpc_object_t v164 = v272;
                                if (!v272) {
                                  goto LABEL_352;
                                }
                                goto LABEL_351;
                              }
                            }
                            memmove(v161, v58, (size_t)v160);
                            goto LABEL_345;
                          }
LABEL_333:
                          if (v132 | v125 || v139 != 3)
                          {
                            xpc_object_t v157 = xpc_null_create();
                            uint64_t v158 = *MEMORY[0x1E4F47128];
                            xpc_object_t v252 = v157;
                            v251 = 0;
                            dispatch::callback<void({block_pointer})(TelephonyXPC::Result,xpc::dict)>::callback(v250, (uint64_t)&__p);
                            TraceManager::runOnHelper_sync((void *)v5, (const char *)9, v158, 0x1388u, 0, &v252, &v251, v250);
                            dispatch::callback<void({block_pointer})(TelephonyXPC::Result,xpc::dict)>::~callback((uint64_t)v250);
                            xpc_release(v252);
                            xpc_object_t v252 = 0;
                          }
                          else
                          {
                            notify_post("com.apple.cellularlogging.bbreset");
                          }
                          goto LABEL_337;
                        }
                      }
                      else if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
                      {
                        goto LABEL_297;
                      }
                      operator delete(__dst[0]);
                      if (v125 != 4) {
                        goto LABEL_333;
                      }
                      goto LABEL_327;
                    }
                  }
                  memmove(v136, v133, (size_t)v135);
                  goto LABEL_290;
                }
              }
              memmove(v129, v126, (size_t)v128);
              goto LABEL_274;
            }
          }
          memmove(v75, v72, (size_t)v74);
          goto LABEL_258;
        }
        unint64_t v65 = (const void *)*MEMORY[0x1E4F4C198];
        size_t v66 = strlen((const char *)*MEMORY[0x1E4F4C198]);
        if (v66 > 0x7FFFFFFFFFFFFFF7) {
          std::string::__throw_length_error[abi:ne180100]();
        }
        uint64_t v67 = (void *)v66;
        if (v66 >= 0x17)
        {
          uint64_t v83 = (v66 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v66 | 7) != 0x17) {
            uint64_t v83 = v66 | 7;
          }
          uint64_t v84 = v83 + 1;
          size_t v68 = (void **)operator new(v83 + 1);
          xpc_object_t __dst[2] = (void *)(v84 | 0x8000000000000000);
          __dst[0] = v68;
          __dst[1] = v67;
        }
        else
        {
          HIBYTE(__dst[2]) = v66;
          size_t v68 = __dst;
          if (!v66)
          {
LABEL_158:
            *((unsigned char *)v67 + (void)v68) = 0;
            memset(&buf, 0, sizeof(buf));
            int v85 = -1431655766;
            if (prop::bbtrace::get((char *)__dst, (uint64_t)&buf))
            {
              LODWORD(__p) = -1431655766;
              if (util::convert<int>(&buf, &__p, 0)) {
                int v85 = (int)__p;
              }
              else {
                int v85 = -1431655766;
              }
            }
            if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(buf.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(__dst[2]) < 0) {
              operator delete(__dst[0]);
            }
            uint64_t v86 = (const void *)*MEMORY[0x1E4F4C428];
            size_t v87 = strlen((const char *)*MEMORY[0x1E4F4C428]);
            if (v87 > 0x7FFFFFFFFFFFFFF7) {
              std::string::__throw_length_error[abi:ne180100]();
            }
            int v88 = (void *)v87;
            v215 = (const char *)v54;
            if (v87 >= 0x17)
            {
              uint64_t v90 = (v87 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v87 | 7) != 0x17) {
                uint64_t v90 = v87 | 7;
              }
              uint64_t v91 = v90 + 1;
              char v89 = (void **)operator new(v90 + 1);
              xpc_object_t __dst[2] = (void *)(v91 | 0x8000000000000000);
              __dst[0] = v89;
              __dst[1] = v88;
            }
            else
            {
              HIBYTE(__dst[2]) = v87;
              char v89 = __dst;
              if (!v87)
              {
LABEL_174:
                *((unsigned char *)v88 + (void)v89) = 0;
                memset(&buf, 0, sizeof(buf));
                int v92 = -1431655766;
                if (prop::bbtrace::get((char *)__dst, (uint64_t)&buf))
                {
                  LODWORD(__p) = -1431655766;
                  if (util::convert<int>(&buf, &__p, 0)) {
                    int v92 = (int)__p;
                  }
                  else {
                    int v92 = -1431655766;
                  }
                }
                if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(buf.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(__dst[2]) < 0) {
                  operator delete(__dst[0]);
                }
                uint64_t v93 = (const void *)*MEMORY[0x1E4F4F9B0];
                size_t v94 = strlen((const char *)*MEMORY[0x1E4F4F9B0]);
                if (v94 > 0x7FFFFFFFFFFFFFF7) {
                  std::string::__throw_length_error[abi:ne180100]();
                }
                size_t v95 = (void *)v94;
                if (v94 >= 0x17)
                {
                  uint64_t v97 = (v94 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v94 | 7) != 0x17) {
                    uint64_t v97 = v94 | 7;
                  }
                  uint64_t v98 = v97 + 1;
                  __darwin_ino64_t v96 = (void **)operator new(v97 + 1);
                  xpc_object_t __dst[2] = (void *)(v98 | 0x8000000000000000);
                  __dst[0] = v96;
                  __dst[1] = v95;
                }
                else
                {
                  HIBYTE(__dst[2]) = v94;
                  __darwin_ino64_t v96 = __dst;
                  if (!v94)
                  {
LABEL_190:
                    *((unsigned char *)v95 + (void)v96) = 0;
                    memset(&buf, 0, sizeof(buf));
                    if (prop::bbtrace::get((char *)__dst, (uint64_t)&buf))
                    {
                      LODWORD(__p) = -1431655766;
                      if (util::convert<int>(&buf, &__p, 0)) {
                        int v99 = (int)__p;
                      }
                      else {
                        int v99 = 0;
                      }
                    }
                    else
                    {
                      int v99 = 0;
                    }
                    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
                    {
                      operator delete(buf.__r_.__value_.__l.__data_);
                      if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
                      {
LABEL_197:
                        if (v85 != 4) {
                          goto LABEL_305;
                        }
LABEL_301:
                        if (v92 == 1)
                        {
                          xpc_object_t v140 = *(NSObject **)(v5 + 88);
                          if (os_log_type_enabled(v140, OS_LOG_TYPE_DEFAULT))
                          {
                            LOWORD(buf.__r_.__value_.__l.__data_) = 0;
                            _os_log_impl(&dword_1C5767000, v140, OS_LOG_TYPE_DEFAULT, "#N Hard reset detected while Cellular Logging is running. Cellular Logging will be paused.", (uint8_t *)&buf, 2u);
                          }
                          xpc_object_t v141 = xpc_null_create();
                          uint64_t v142 = *MEMORY[0x1E4F47228];
                          xpc_object_t v276 = v141;
                          v275 = 0;
                          v274[1] = 0;
                          v274[0] = 0;
                          TraceManager::runOnHelper_sync((void *)v5, (const char *)0xA, v142, 0x1388u, 1, &v276, &v275, v274);
                          xpc_release(v276);
                          xpc_object_t v276 = 0;
LABEL_308:
                          memset(&buf, 170, sizeof(buf));
                          xpc_object_t v143 = (const char *)*MEMORY[0x1E4F4CA38];
                          memset(__dst, 0, sizeof(__dst));
                          ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&__p, v143);
                          ctu::cf::map_adapter::getString();
                          MEMORY[0x1C8791110](&__p);
                          if (SHIBYTE(__dst[2]) < 0) {
                            operator delete(__dst[0]);
                          }
                          memset(__dst, 170, sizeof(__dst));
                          xpc_object_t v144 = (const void *)*MEMORY[0x1E4F4C3A0];
                          size_t v145 = strlen((const char *)*MEMORY[0x1E4F4C3A0]);
                          if (v145 > 0x7FFFFFFFFFFFFFF7) {
                            std::string::__throw_length_error[abi:ne180100]();
                          }
                          xpc_object_t v146 = v145;
                          if (v145 >= 0x17)
                          {
                            uint64_t v148 = (v145 & 0xFFFFFFFFFFFFFFF8) + 8;
                            if ((v145 | 7) != 0x17) {
                              uint64_t v148 = v145 | 7;
                            }
                            uint64_t v149 = v148 + 1;
                            p_p = operator new(v148 + 1);
                            unint64_t v273 = v149 | 0x8000000000000000;
                            std::string __p = p_p;
                            dispatch_object_t v272 = v146;
                          }
                          else
                          {
                            HIBYTE(v273) = v145;
                            p_p = &__p;
                            if (!v145)
                            {
LABEL_318:
                              xpc_object_t v150 = (const char *)*MEMORY[0x1E4F4C4C8];
                              *((unsigned char *)&v146->isa + (void)p_p) = 0;
                              ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v285, v150);
                              ctu::cf::map_adapter::getString();
                              MEMORY[0x1C8791110](&v285);
                              if (SHIBYTE(v273) < 0) {
                                operator delete(__p);
                              }
                              xpc_object_t v151 = xpc_dictionary_create(0, 0, 0);
                              if (v151 || (xpc_object_t v151 = xpc_null_create()) != 0)
                              {
                                if (MEMORY[0x1C8792D30](v151) == MEMORY[0x1E4F14590])
                                {
                                  xpc_retain(v151);
                                  xpc_object_t v152 = v151;
                                }
                                else
                                {
                                  xpc_object_t v152 = xpc_null_create();
                                }
                              }
                              else
                              {
                                xpc_object_t v152 = xpc_null_create();
                                xpc_object_t v151 = 0;
                              }
                              xpc_release(v151);
                              if (SHIBYTE(v279[2]) >= 0) {
                                size_t v167 = (const char *)v279;
                              }
                              else {
                                size_t v167 = (const char *)v279[0];
                              }
                              xpc_object_t v168 = xpc_string_create(v167);
                              if (!v168) {
                                xpc_object_t v168 = xpc_null_create();
                              }
                              xpc_dictionary_set_value(v152, v34, v168);
                              xpc_object_t v169 = xpc_null_create();
                              xpc_release(v168);
                              xpc_release(v169);
                              if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                                CFTypeRef v170 = &buf;
                              }
                              else {
                                CFTypeRef v170 = (std::string *)buf.__r_.__value_.__r.__words[0];
                              }
                              xpc_object_t v171 = xpc_string_create((const char *)v170);
                              if (!v171) {
                                xpc_object_t v171 = xpc_null_create();
                              }
                              xpc_dictionary_set_value(v152, v143, v171);
                              xpc_object_t v172 = xpc_null_create();
                              xpc_release(v171);
                              xpc_release(v172);
                              if ((v278.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                                CFTypeID v173 = &v278;
                              }
                              else {
                                CFTypeID v173 = (std::string *)v278.__r_.__value_.__r.__words[0];
                              }
                              xpc_object_t v174 = xpc_string_create((const char *)v173);
                              if (!v174) {
                                xpc_object_t v174 = xpc_null_create();
                              }
                              xpc_dictionary_set_value(v152, (const char *)*MEMORY[0x1E4F4CA98], v174);
                              xpc_object_t v175 = xpc_null_create();
                              xpc_release(v174);
                              xpc_release(v175);
                              if (SHIBYTE(__dst[2]) >= 0) {
                                v176 = (const char *)__dst;
                              }
                              else {
                                v176 = (const char *)__dst[0];
                              }
                              xpc_object_t v177 = xpc_string_create(v176);
                              if (!v177) {
                                xpc_object_t v177 = xpc_null_create();
                              }
                              xpc_dictionary_set_value(v152, v150, v177);
                              xpc_object_t v178 = xpc_null_create();
                              xpc_release(v177);
                              xpc_release(v178);
                              xpc_object_t v179 = xpc_string_create((const char *)*MEMORY[0x1E4F4D0D8]);
                              if (!v179) {
                                xpc_object_t v179 = xpc_null_create();
                              }
                              xpc_dictionary_set_value(v152, (const char *)*MEMORY[0x1E4F4C268], v179);
                              xpc_object_t v180 = xpc_null_create();
                              xpc_release(v179);
                              xpc_release(v180);
                              xpc_object_t v181 = xpc_int64_create(Int);
                              if (!v181) {
                                xpc_object_t v181 = xpc_null_create();
                              }
                              xpc_dictionary_set_value(v152, v52, v181);
                              xpc_object_t v182 = xpc_null_create();
                              xpc_release(v181);
                              xpc_release(v182);
                              v183 = (const char *)*MEMORY[0x1E4F4C8E8];
                              ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&__p, (const char *)*MEMORY[0x1E4F4C8E8]);
                              char Bool = ctu::cf::map_adapter::getBool((ctu::cf::map_adapter *)v281, (const __CFString *)__p);
                              MEMORY[0x1C8791110](&__p);
                              xpc_object_t v185 = xpc_BOOL_create(Bool);
                              if (!v185) {
                                xpc_object_t v185 = xpc_null_create();
                              }
                              xpc_dictionary_set_value(v152, v183, v185);
                              xpc_object_t v186 = xpc_null_create();
                              xpc_release(v185);
                              xpc_release(v186);
                              v187 = (const char *)*MEMORY[0x1E4F4C900];
                              ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&__p, (const char *)*MEMORY[0x1E4F4C900]);
                              char v188 = ctu::cf::map_adapter::getBool((ctu::cf::map_adapter *)v281, (const __CFString *)__p);
                              MEMORY[0x1C8791110](&__p);
                              xpc_object_t v189 = xpc_BOOL_create(v188);
                              if (!v189) {
                                xpc_object_t v189 = xpc_null_create();
                              }
                              xpc_dictionary_set_value(v152, v187, v189);
                              xpc_object_t v190 = xpc_null_create();
                              xpc_release(v189);
                              xpc_release(v190);
                              v191 = (const char *)*MEMORY[0x1E4F4C8F8];
                              ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&__p, (const char *)*MEMORY[0x1E4F4C8F8]);
                              char v192 = ctu::cf::map_adapter::getBool((ctu::cf::map_adapter *)v281, (const __CFString *)__p);
                              MEMORY[0x1C8791110](&__p);
                              xpc_object_t v193 = xpc_BOOL_create(v192);
                              if (!v193) {
                                xpc_object_t v193 = xpc_null_create();
                              }
                              xpc_dictionary_set_value(v152, v191, v193);
                              xpc_object_t v194 = xpc_null_create();
                              xpc_release(v193);
                              xpc_release(v194);
                              long long v195 = *(std::__shared_weak_count **)(v5 + 128);
                              if (!v195
                                || (uint64_t v196 = *(void *)(v5 + 120), (v197 = std::__shared_weak_count::lock(v195)) == 0))
                              {
                                std::__throw_bad_weak_ptr[abi:ne180100]();
                              }
                              dispatch_object_t v198 = v197;
                              atomic_fetch_add_explicit(&v197->__shared_weak_owners_, 1uLL, memory_order_relaxed);
                              if (!atomic_fetch_add(&v197->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                              {
                                ((void (*)(std::__shared_weak_count *))v197->__on_zero_shared)(v197);
                                std::__shared_weak_count::__release_weak(v198);
                              }
                              xpc_object_t v199 = (const void *)*MEMORY[0x1E4F4C748];
                              size_t v200 = strlen((const char *)*MEMORY[0x1E4F4C748]);
                              if (v200 > 0x7FFFFFFFFFFFFFF7) {
                                std::string::__throw_length_error[abi:ne180100]();
                              }
                              v201 = v200;
                              if (v200 >= 0x17)
                              {
                                uint64_t v203 = (v200 & 0xFFFFFFFFFFFFFFF8) + 8;
                                if ((v200 | 7) != 0x17) {
                                  uint64_t v203 = v200 | 7;
                                }
                                uint64_t v204 = v203 + 1;
                                std::string v202 = operator new(v203 + 1);
                                unint64_t v273 = v204 | 0x8000000000000000;
                                std::string __p = v202;
                                dispatch_object_t v272 = v201;
                              }
                              else
                              {
                                HIBYTE(v273) = v200;
                                std::string v202 = &__p;
                                if (!v200)
                                {
LABEL_406:
                                  *((unsigned char *)&v201->isa + (void)v202) = 0;
                                  xpc_object_t v270 = v152;
                                  if (v152) {
                                    xpc_retain(v152);
                                  }
                                  else {
                                    xpc_object_t v270 = xpc_null_create();
                                  }
                                  v265[0] = MEMORY[0x1E4F143A8];
                                  v265[1] = 1174405120;
                                  v265[2] = ___ZN12TraceManager25finishInitialization_syncEv_block_invoke_52;
                                  v265[3] = &__block_descriptor_tmp_54_1;
                                  unint64_t v206 = *(abm::client::Event **)a2;
                                  v205 = *(std::__shared_weak_count **)(a2 + 8);
                                  v265[4] = v5;
                                  v265[5] = v206;
                                  v266 = v205;
                                  if (v205) {
                                    atomic_fetch_add_explicit(&v205->__shared_owners_, 1uLL, memory_order_relaxed);
                                  }
                                  uint64_t v267 = v196;
                                  v268 = v198;
                                  atomic_fetch_add_explicit(&v198->__shared_weak_owners_, 1uLL, memory_order_relaxed);
                                  xpc_object_t v207 = _Block_copy(v265);
                                  v269 = v207;
                                  Service::runCommand(v5, (uint64_t)&__p, &v270, &v269);
                                  if (v207) {
                                    _Block_release(v207);
                                  }
                                  xpc_release(v270);
                                  xpc_object_t v270 = 0;
                                  if (SHIBYTE(v273) < 0) {
                                    operator delete(__p);
                                  }
                                  size_t v208 = strlen(v215);
                                  if (v208 > 0x7FFFFFFFFFFFFFF7) {
                                    std::string::__throw_length_error[abi:ne180100]();
                                  }
                                  int64_t v209 = (void *)v208;
                                  if (v208 >= 0x17)
                                  {
                                    uint64_t v211 = (v208 & 0xFFFFFFFFFFFFFFF8) + 8;
                                    if ((v208 | 7) != 0x17) {
                                      uint64_t v211 = v208 | 7;
                                    }
                                    uint64_t v212 = v211 + 1;
                                    xpc_object_t v210 = operator new(v211 + 1);
                                    unint64_t v264 = v212 | 0x8000000000000000;
                                    v263[0] = v210;
                                    v263[1] = v209;
                                  }
                                  else
                                  {
                                    HIBYTE(v264) = v208;
                                    xpc_object_t v210 = v263;
                                    if (!v208)
                                    {
LABEL_423:
                                      *((unsigned char *)v209 + (void)v210) = 0;
                                      if (SHIBYTE(v278.__r_.__value_.__r.__words[2]) < 0) {
                                        std::string::__init_copy_ctor_external(&v262, v278.__r_.__value_.__l.__data_, v278.__r_.__value_.__l.__size_);
                                      }
                                      else {
                                        std::string v262 = v278;
                                      }
                                      TraceManager::submitTraceMetric_sync(v5, (const char *)v263, (const char *)&v262);
                                      if (SHIBYTE(v262.__r_.__value_.__r.__words[2]) < 0)
                                      {
                                        operator delete(v262.__r_.__value_.__l.__data_);
                                        if ((SHIBYTE(v264) & 0x80000000) == 0)
                                        {
LABEL_428:
                                          unint64_t v213 = v268;
                                          if (!v268) {
                                            goto LABEL_430;
                                          }
                                          goto LABEL_429;
                                        }
                                      }
                                      else if ((SHIBYTE(v264) & 0x80000000) == 0)
                                      {
                                        goto LABEL_428;
                                      }
                                      operator delete(v263[0]);
                                      unint64_t v213 = v268;
                                      if (!v268)
                                      {
LABEL_430:
                                        unint64_t v214 = v266;
                                        if (v266 && !atomic_fetch_add(&v266->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                                        {
                                          ((void (*)(std::__shared_weak_count *))v214->__on_zero_shared)(v214);
                                          std::__shared_weak_count::__release_weak(v214);
                                        }
                                        std::__shared_weak_count::__release_weak(v198);
                                        xpc_release(v152);
                                        if (SHIBYTE(__dst[2]) < 0) {
                                          operator delete(__dst[0]);
                                        }
                                        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
                                          operator delete(buf.__r_.__value_.__l.__data_);
                                        }
                                        goto LABEL_437;
                                      }
LABEL_429:
                                      std::__shared_weak_count::__release_weak(v213);
                                      goto LABEL_430;
                                    }
                                  }
                                  memmove(v210, v215, (size_t)v209);
                                  goto LABEL_423;
                                }
                              }
                              memmove(v202, v199, (size_t)v201);
                              goto LABEL_406;
                            }
                          }
                          memmove(p_p, v144, (size_t)v146);
                          goto LABEL_318;
                        }
LABEL_305:
                        if (!(v92 | v85) && v99 == 3) {
                          notify_post("com.apple.cellularlogging.bbreset");
                        }
                        goto LABEL_308;
                      }
                    }
                    else if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
                    {
                      goto LABEL_197;
                    }
                    operator delete(__dst[0]);
                    if (v85 != 4) {
                      goto LABEL_305;
                    }
                    goto LABEL_301;
                  }
                }
                memmove(v96, v93, (size_t)v95);
                goto LABEL_190;
              }
            }
            memmove(v89, v86, (size_t)v88);
            goto LABEL_174;
          }
        }
        memmove(v68, v65, (size_t)v67);
        goto LABEL_158;
      }
    }
    memmove(p_buf, v35, v37);
    goto LABEL_86;
  }
LABEL_444:
  if (v9) {
    CFRelease(v9);
  }
  uint64_t v7 = v284;
  if (v284) {
    goto LABEL_447;
  }
}

void sub_1C592DC18(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void sub_1C592E2AC()
{
}

void sub_1C592E2B4()
{
}

void prop::bbtrace::get<diag::config::Mode>(char *a1, int *a2)
{
  memset(&__p, 0, sizeof(__p));
  if (prop::bbtrace::get(a1, (uint64_t)&__p))
  {
    int v4 = -1431655766;
    if (util::convert<int>(&__p, &v4, 0)) {
      *a2 = v4;
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1C592E33C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void prop::bbtrace::get<abm::traceOwnership>(char *a1, int *a2)
{
  memset(&__p, 0, sizeof(__p));
  if (prop::bbtrace::get(a1, (uint64_t)&__p))
  {
    int v4 = -1431655766;
    if (util::convert<int>(&__p, &v4, 0)) {
      *a2 = v4;
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1C592E3D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL TraceManager::isCellullarLoggingStreamingMode(uint64_t a1, int a2, int a3, int a4)
{
  return !(a3 | a2) && a4 == 3;
}

uint64_t TraceManager::postBBResetNotification(TraceManager *this)
{
  return notify_post("com.apple.cellularlogging.bbreset");
}

void ___ZN12TraceManager25finishInitialization_syncEv_block_invoke_52(void *a1, int a2, xpc_object_t *a3)
{
  int v4 = (std::__shared_weak_count *)a1[8];
  if (!v4) {
    return;
  }
  uint64_t v7 = (void *)a1[4];
  uint64_t v8 = std::__shared_weak_count::lock(v4);
  if (!v8) {
    return;
  }
  CFDictionaryRef v9 = v8;
  uint64_t v10 = a1[7];
  if (v10)
  {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    xpc_object_t v11 = *a3;
    if (*a3)
    {
      xpc_retain(*a3);
      uint64_t v13 = a1[5];
      std::string::size_type v12 = (std::__shared_weak_count *)a1[6];
      if (!v12) {
        goto LABEL_7;
      }
    }
    else
    {
      xpc_object_t v11 = xpc_null_create();
      uint64_t v13 = a1[5];
      std::string::size_type v12 = (std::__shared_weak_count *)a1[6];
      if (!v12)
      {
LABEL_7:
        size_t v14 = (std::__shared_weak_count *)v7[16];
        if (!v14 || (uint64_t v15 = v7[15], (v16 = std::__shared_weak_count::lock(v14)) == 0)) {
          std::__throw_bad_weak_ptr[abi:ne180100]();
        }
        int v17 = v16;
        size_t v18 = operator new(0x38uLL);
        *size_t v18 = v7;
        v18[1] = v10;
        void v18[2] = v9;
        *((_DWORD *)v18 + 6) = a2;
        v18[4] = v11;
        xpc_object_t v19 = xpc_null_create();
        v18[5] = v13;
        v18[6] = v12;
        if (v12) {
          atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v20 = v7[17];
        atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
        uint64_t v21 = operator new(0x18uLL);
        *uint64_t v21 = v18;
        v21[1] = v15;
        v21[2] = v17;
        dispatch_async_f(v20, v21, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI12TraceManagerE15execute_wrappedIZZZNS3_25finishInitialization_syncEvEUb2_EUb3_E3__4EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS7_NSC_14default_deleteIS7_EEEEENUlPvE_8__invokeESH_);
        if (!atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
        if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
        xpc_release(v19);
        goto LABEL_17;
      }
    }
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    goto LABEL_7;
  }
LABEL_17:
  if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
}

void *__copy_helper_block_e8_40c45_ZTSNSt3__110shared_ptrIN3abm6client5EventEEE56c37_ZTSNSt3__18weak_ptrI12TraceManagerEE(void *result, void *a2)
{
  uint64_t v2 = a2[6];
  result[5] = a2[5];
  result[6] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v3 = a2[8];
  result[7] = a2[7];
  result[8] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c45_ZTSNSt3__110shared_ptrIN3abm6client5EventEEE56c37_ZTSNSt3__18weak_ptrI12TraceManagerEE(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 64);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
}

void ___ZN12TraceManager25finishInitialization_syncEv_block_invoke_55(uint64_t a1)
{
  uint64_t v1 = *(NSObject **)(*(void *)(a1 + 32) + 88);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v2 = 0;
    _os_log_impl(&dword_1C5767000, v1, OS_LOG_TYPE_DEFAULT, "#I Abort complete", v2, 2u);
  }
}

void *__copy_helper_block_e8_40c40_ZTSNSt3__110shared_ptrI12TraceManagerEE56c45_ZTSNSt3__110shared_ptrIN3abm6client5EventEEE(void *result, void *a2)
{
  uint64_t v2 = a2[6];
  result[5] = a2[5];
  result[6] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v3 = a2[8];
  result[7] = a2[7];
  result[8] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c40_ZTSNSt3__110shared_ptrI12TraceManagerEE56c45_ZTSNSt3__110shared_ptrIN3abm6client5EventEEE(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 64);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = *(std::__shared_weak_count **)(a1 + 48);
    if (!v3) {
      return;
    }
  }
  else
  {
    uint64_t v3 = *(std::__shared_weak_count **)(a1 + 48);
    if (!v3) {
      return;
    }
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
}

void ___ZN12TraceManager25finishInitialization_syncEv_block_invoke_57(void *a1)
{
  uint64_t v2 = (void *)a1[4];
  CFDictionaryRef v9 = 0;
  xpc_object_t object = xpc_null_create();
  uint64_t v3 = (const void *)a1[5];
  if (v3)
  {
    int v4 = _Block_copy(v3);
    uint64_t v5 = *MEMORY[0x1E4F47128];
    uint64_t v6 = a1[6];
    uint64_t v7 = v4;
    uint64_t v8 = v6;
    if (!v6) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  int v4 = 0;
  uint64_t v5 = *MEMORY[0x1E4F47128];
  uint64_t v6 = a1[6];
  uint64_t v7 = 0;
  uint64_t v8 = v6;
  if (v6) {
LABEL_3:
  }
    dispatch_retain(v6);
LABEL_4:
  TraceManager::runOnHelper_sync(v2, (const char *)9, v5, 0x1388u, 0, &object, &v9, &v7);
  if (v6) {
    dispatch_release(v6);
  }
  if (v4) {
    _Block_release(v4);
  }
  xpc_release(object);
}

void sub_1C592E95C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, xpc_object_t object)
{
}

void __copy_helper_block_e8_40c79_ZTSN8dispatch8callbackIU13block_pointerFvN12TelephonyXPC6ResultEN3xpc4dictEEEE(uint64_t a1, uint64_t a2)
{
  int v4 = *(void **)(a2 + 40);
  if (v4) {
    int v4 = _Block_copy(v4);
  }
  uint64_t v5 = *(NSObject **)(a2 + 48);
  *(void *)(a1 + 40) = v4;
  *(void *)(a1 + 48) = v5;
  if (v5)
  {
    dispatch_retain(v5);
  }
}

void __destroy_helper_block_e8_40c79_ZTSN8dispatch8callbackIU13block_pointerFvN12TelephonyXPC6ResultEN3xpc4dictEEEE(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 48);
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = *(const void **)(a1 + 40);
  if (v3) {
    _Block_release(v3);
  }
}

void ___ZN12TraceManager25finishInitialization_syncEv_block_invoke_59(uint64_t a1)
{
  uint64_t v1 = *(NSObject **)(*(void *)(a1 + 32) + 88);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v2 = 0;
    _os_log_impl(&dword_1C5767000, v1, OS_LOG_TYPE_DEFAULT, "#I Prepare complete", v2, 2u);
  }
}

void TraceManager::updateBasebandFWInfo(TraceManager *this)
{
  xpc_object_t v2 = xpc_dictionary_create(0, 0, 0);
  if (v2 || (xpc_object_t v2 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C8792D30](v2) == MEMORY[0x1E4F14590])
    {
      xpc_retain(v2);
      xpc_object_t v3 = v2;
    }
    else
    {
      xpc_object_t v3 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v3 = xpc_null_create();
    xpc_object_t v2 = 0;
  }
  xpc_release(v2);
  int v4 = (std::__shared_weak_count *)*((void *)this + 16);
  if (!v4 || (uint64_t v5 = *((void *)this + 15), (v6 = std::__shared_weak_count::lock(v4)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v7 = v6;
  atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v7);
  }
  uint64_t v8 = (const void *)*MEMORY[0x1E4F4CF40];
  size_t v9 = strlen((const char *)*MEMORY[0x1E4F4CF40]);
  if (v9 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v10 = (void *)v9;
  if (v9 >= 0x17)
  {
    uint64_t v12 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v12 = v9 | 7;
    }
    uint64_t v13 = v12 + 1;
    xpc_object_t v11 = (void **)operator new(v12 + 1);
    __dst[1] = v10;
    unint64_t v20 = v13 | 0x8000000000000000;
    __dst[0] = v11;
LABEL_19:
    memmove(v11, v8, (size_t)v10);
    *((unsigned char *)v10 + (void)v11) = 0;
    xpc_object_t object = v3;
    if (v3) {
      goto LABEL_15;
    }
    goto LABEL_20;
  }
  HIBYTE(v20) = v9;
  xpc_object_t v11 = __dst;
  if (v9) {
    goto LABEL_19;
  }
  LOBYTE(__dst[0]) = 0;
  xpc_object_t object = v3;
  if (v3)
  {
LABEL_15:
    xpc_retain(v3);
    goto LABEL_21;
  }
LABEL_20:
  xpc_object_t object = xpc_null_create();
LABEL_21:
  v15[0] = MEMORY[0x1E4F143A8];
  v15[1] = 1174405120;
  void v15[2] = ___ZN12TraceManager20updateBasebandFWInfoEv_block_invoke;
  v15[3] = &__block_descriptor_tmp_96_2;
  v15[4] = this;
  void v15[5] = v5;
  xpc_object_t v16 = v7;
  atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  size_t v14 = _Block_copy(v15);
  int v17 = v14;
  Service::runCommand((uint64_t)this, (uint64_t)__dst, &object, &v17);
  if (v14) {
    _Block_release(v14);
  }
  xpc_release(object);
  xpc_object_t object = 0;
  if (SHIBYTE(v20) < 0) {
    operator delete(__dst[0]);
  }
  if (v16) {
    std::__shared_weak_count::__release_weak(v16);
  }
  std::__shared_weak_count::__release_weak(v7);
  xpc_release(v3);
}

void sub_1C592ED18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, xpc_object_t object, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (v25) {
    _Block_release(v25);
  }
  if (a15) {
    std::__shared_weak_count::__release_weak(a15);
  }
  xpc_release(object);
  if (a23 < 0) {
    operator delete(__p);
  }
  std::__shared_weak_count::__release_weak(v24);
  xpc_release(v23);
  _Unwind_Resume(a1);
}

void ___ZN12TraceManager25finishInitialization_syncEv_block_invoke_63(uint64_t a1)
{
  uint64_t v1 = *(NSObject **)(*(void *)(a1 + 32) + 88);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)xpc_object_t v2 = 0;
    _os_log_impl(&dword_1C5767000, v1, OS_LOG_TYPE_DEFAULT, "#I Start complete", v2, 2u);
  }
}

void ___ZN12TraceManager25finishInitialization_syncEv_block_invoke_67(void *a1)
{
  xpc_object_t v2 = (void *)a1[4];
  size_t v9 = 0;
  xpc_object_t object = xpc_null_create();
  xpc_object_t v3 = (const void *)a1[5];
  if (v3)
  {
    int v4 = _Block_copy(v3);
    uint64_t v5 = *MEMORY[0x1E4F47238];
    uint64_t v6 = a1[6];
    uint64_t v7 = v4;
    uint64_t v8 = v6;
    if (!v6) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  int v4 = 0;
  uint64_t v5 = *MEMORY[0x1E4F47238];
  uint64_t v6 = a1[6];
  uint64_t v7 = 0;
  uint64_t v8 = v6;
  if (v6) {
LABEL_3:
  }
    dispatch_retain(v6);
LABEL_4:
  TraceManager::runOnHelper_sync(v2, (const char *)0xA, v5, 0x1388u, 1, &object, &v9, &v7);
  if (v6) {
    dispatch_release(v6);
  }
  if (v4) {
    _Block_release(v4);
  }
  xpc_release(object);
}

void sub_1C592EED8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, xpc_object_t object)
{
}

void ___ZN12TraceManager25finishInitialization_syncEv_block_invoke_71(uint64_t a1)
{
  uint64_t v1 = *(NSObject **)(*(void *)(a1 + 32) + 88);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)xpc_object_t v2 = 0;
    _os_log_impl(&dword_1C5767000, v1, OS_LOG_TYPE_DEFAULT, "#I Abort complete", v2, 2u);
  }
}

void ___ZN12TraceManager25finishInitialization_syncEv_block_invoke_75(void *a1)
{
  xpc_object_t v2 = (void *)a1[4];
  size_t v9 = 0;
  xpc_object_t object = xpc_null_create();
  xpc_object_t v3 = (const void *)a1[5];
  if (v3)
  {
    int v4 = _Block_copy(v3);
    uint64_t v5 = *MEMORY[0x1E4F47128];
    uint64_t v6 = a1[6];
    uint64_t v7 = v4;
    uint64_t v8 = v6;
    if (!v6) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  int v4 = 0;
  uint64_t v5 = *MEMORY[0x1E4F47128];
  uint64_t v6 = a1[6];
  uint64_t v7 = 0;
  uint64_t v8 = v6;
  if (v6) {
LABEL_3:
  }
    dispatch_retain(v6);
LABEL_4:
  TraceManager::runOnHelper_sync(v2, (const char *)9, v5, 0x7D0u, 0, &object, &v9, &v7);
  if (v6) {
    dispatch_release(v6);
  }
  if (v4) {
    _Block_release(v4);
  }
  xpc_release(object);
}

void sub_1C592F03C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, xpc_object_t object)
{
}

void ___ZN12TraceManager25finishInitialization_syncEv_block_invoke_83(void *a1, uint64_t a2)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  xpc_object_t v3 = (std::__shared_weak_count *)a1[6];
  if (!v3) {
    return;
  }
  uint64_t v5 = (char *)a1[4];
  uint64_t v6 = std::__shared_weak_count::lock(v3);
  int v38 = v6;
  if (!v6) {
    return;
  }
  uint64_t v7 = v6;
  uint64_t v8 = a1[5];
  uint64_t v37 = v8;
  if (!v8)
  {
LABEL_51:
    if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    return;
  }
  size_t v9 = *((void *)v5 + 11);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    abm::client::Event::name((uint64_t *)&__p, *(abm::client::Event **)a2);
    uint64_t v10 = v40 >= 0 ? &__p : (long long *)__p;
    *(_DWORD *)std::string buf = 136315138;
    *(void *)&uint8_t buf[4] = v10;
    _os_log_impl(&dword_1C5767000, v9, OS_LOG_TYPE_DEFAULT, "#I Received event %s", buf, 0xCu);
    if (v40 < 0) {
      operator delete((void *)__p);
    }
  }
  if ((*(unsigned int (**)(char *))(*(void *)v5 + 88))(v5))
  {
    xpc_object_t v11 = *((void *)v5 + 11);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v12 = *MEMORY[0x1E4F4CB10];
      LODWORD(__p) = 136315138;
      *(void *)((char *)&__p + 4) = v12;
      _os_log_impl(&dword_1C5767000, v11, OS_LOG_TYPE_DEFAULT, "#I Server going down. Skipping event %s", (uint8_t *)&__p, 0xCu);
    }
    goto LABEL_51;
  }
  *(void *)std::string buf = 0xAAAAAAAAAAAAAAAALL;
  abm::client::Event::getData((uint64_t *)buf, *(abm::client::Event **)a2);
  uint64_t v13 = *(const void **)buf;
  if (*(void *)buf) {
    size_t v14 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
  }
  else {
    size_t v14 = 0;
  }
  if (v14)
  {
    *(void *)&long long __p = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&__p + 1) = 0xAAAAAAAAAAAAAAAALL;
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 1174405120;
    aBlock[2] = ___ZN12TraceManager25finishInitialization_syncEv_block_invoke_84;
    aBlock[3] = &__block_descriptor_tmp_85_0;
    xpc_object_t v16 = *(abm::client::Event **)a2;
    uint64_t v15 = *(std::__shared_weak_count **)(a2 + 8);
    aBlock[4] = v5;
    void aBlock[5] = v16;
    uint64_t v34 = v15;
    if (v15) {
      atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v35 = v8;
    size_t v36 = v7;
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    size_t v18 = _Block_copy(aBlock);
    xpc_object_t v19 = *((void *)v5 + 17);
    if (v19) {
      dispatch_retain(*((dispatch_object_t *)v5 + 17));
    }
    *(void *)&long long __p = v18;
    *((void *)&__p + 1) = v19;
    ctu::cf_to_xpc((uint64_t *)&object, *(ctu **)buf, v17);
    xpc_object_t v20 = object;
    if (object && MEMORY[0x1C8792D30](object) == MEMORY[0x1E4F14590]) {
      xpc_retain(v20);
    }
    else {
      xpc_object_t v20 = xpc_null_create();
    }
    xpc_release(object);
    uint64_t v21 = v5 + 168;
    if (v5[191] < 0) {
      uint64_t v21 = *(const char **)v21;
    }
    xpc_object_t v22 = xpc_string_create(v21);
    if (!v22) {
      xpc_object_t v22 = xpc_null_create();
    }
    xpc_dictionary_set_value(v20, (const char *)*MEMORY[0x1E4F4C488], v22);
    xpc_object_t v23 = xpc_null_create();
    xpc_release(v22);
    xpc_release(v23);
    xpc_object_t v31 = v20;
    if (v20)
    {
      xpc_retain(v20);
      char v30 = 0;
      if (v18) {
        goto LABEL_31;
      }
    }
    else
    {
      char v30 = 0;
      xpc_object_t v31 = xpc_null_create();
      if (v18)
      {
LABEL_31:
        size_t v24 = _Block_copy(v18);
        uint64_t v25 = *MEMORY[0x1E4F47140];
        uint64_t v28 = v24;
        uint64_t v29 = v19;
        if (!v19)
        {
LABEL_33:
          TraceManager::runOnHelper_sync(v5, (const char *)9, v25, 0x1388u, 1, &v31, &v30, &v28);
          if (v19) {
            dispatch_release(v19);
          }
          if (v24) {
            _Block_release(v24);
          }
          xpc_release(v31);
          xpc_object_t v31 = 0;
          xpc_release(v20);
          if (v19) {
            dispatch_release(v19);
          }
          if (v18) {
            _Block_release(v18);
          }
          int v26 = v36;
          if (v36 && !atomic_fetch_add(&v36->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
            std::__shared_weak_count::__release_weak(v26);
          }
          uint64_t v27 = v34;
          if (v34 && !atomic_fetch_add(&v34->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
            std::__shared_weak_count::__release_weak(v27);
          }
          uint64_t v13 = *(const void **)buf;
          goto LABEL_48;
        }
LABEL_32:
        dispatch_retain(v19);
        goto LABEL_33;
      }
    }
    size_t v24 = 0;
    uint64_t v25 = *MEMORY[0x1E4F47140];
    uint64_t v28 = 0;
    uint64_t v29 = v19;
    if (!v19) {
      goto LABEL_33;
    }
    goto LABEL_32;
  }
LABEL_48:
  if (v13) {
    CFRelease(v13);
  }
  uint64_t v7 = v38;
  if (v38) {
    goto LABEL_51;
  }
}

void sub_1C592F514(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, xpc_object_t object, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,char a25)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN12TraceManager25finishInitialization_syncEv_block_invoke_84(uint64_t a1, _DWORD *a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  xpc_object_t v3 = *(NSObject **)(*(void *)(a1 + 32) + 88);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    BOOL v4 = *a2 == 0;
    v5[0] = 67109120;
    v5[1] = v4;
    _os_log_impl(&dword_1C5767000, v3, OS_LOG_TYPE_DEFAULT, "#I Snapshot : Snapshot complete. Success = %d", (uint8_t *)v5, 8u);
  }
}

void *__copy_helper_block_e8_40c45_ZTSNSt3__110shared_ptrIN3abm6client5EventEEE56c40_ZTSNSt3__110shared_ptrI12TraceManagerEE(void *result, void *a2)
{
  uint64_t v2 = a2[6];
  result[5] = a2[5];
  result[6] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v3 = a2[8];
  result[7] = a2[7];
  result[8] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c45_ZTSNSt3__110shared_ptrIN3abm6client5EventEEE56c40_ZTSNSt3__110shared_ptrI12TraceManagerEE(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 64);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = *(std::__shared_weak_count **)(a1 + 48);
    if (!v3) {
      return;
    }
  }
  else
  {
    uint64_t v3 = *(std::__shared_weak_count **)(a1 + 48);
    if (!v3) {
      return;
    }
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
}

void ___ZN12TraceManager25finishInitialization_syncEv_block_invoke_89(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    uint64_t v3 = (void *)a1[4];
    BOOL v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = a1[5];
      if (atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        if (!v6) {
          return;
        }
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v5);
        if (!v6) {
          return;
        }
      }
      xpc_object_t v7 = xpc_dictionary_create(0, 0, 0);
      if (v7 || (xpc_object_t v7 = xpc_null_create()) != 0)
      {
        if (MEMORY[0x1C8792D30](v7) == MEMORY[0x1E4F14590])
        {
          xpc_retain(v7);
          xpc_object_t v8 = v7;
        }
        else
        {
          xpc_object_t v8 = xpc_null_create();
        }
      }
      else
      {
        xpc_object_t v8 = xpc_null_create();
        xpc_object_t v7 = 0;
      }
      xpc_release(v7);
      xpc_object_t v9 = xpc_string_create("Trace state for sysdiagnose");
      if (!v9) {
        xpc_object_t v9 = xpc_null_create();
      }
      xpc_dictionary_set_value(v8, (const char *)*MEMORY[0x1E4F47160], v9);
      xpc_object_t v10 = xpc_null_create();
      xpc_release(v9);
      xpc_release(v10);
      xpc_object_t object = v8;
      if (v8) {
        xpc_retain(v8);
      }
      else {
        xpc_object_t object = xpc_null_create();
      }
      uint64_t v11 = *MEMORY[0x1E4F47110];
      v12[1] = 0;
      uint64_t v13 = 0;
      v12[0] = 0;
      TraceManager::runOnHelper_sync(v3, (const char *)9, v11, 0x1388u, 1, &object, &v13, v12);
      xpc_release(object);
      xpc_object_t object = 0;
      xpc_release(v8);
    }
  }
}

void sub_1C592F94C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, xpc_object_t object)
{
  dispatch::callback<void({block_pointer})(TelephonyXPC::Result,xpc::dict)>::~callback((uint64_t)&a9);
  xpc_release(object);
  xpc_object_t object = 0;
  xpc_release(v12);
  _Unwind_Resume(a1);
}

void TraceManager::sleep(void *a1, dispatch_object_t *a2)
{
  uint64_t v3 = *a2;
  if (*a2)
  {
    dispatch_retain(*a2);
    dispatch_group_enter(v3);
  }
  BOOL v4 = (std::__shared_weak_count *)a1[16];
  if (!v4 || (uint64_t v5 = a1[15], (v6 = std::__shared_weak_count::lock(v4)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  xpc_object_t v7 = v6;
  xpc_object_t v8 = operator new(0x10uLL);
  *xpc_object_t v8 = a1;
  v8[1] = v3;
  xpc_object_t v9 = a1[17];
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  xpc_object_t v10 = operator new(0x18uLL);
  void *v10 = v8;
  v10[1] = v5;
  _DWORD v10[2] = v7;
  dispatch_async_f(v9, v10, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<TraceManager>::execute_wrapped<TraceManager::sleep(dispatch::group_session)::$_0>(TraceManager::sleep(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<TraceManager::sleep(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<TraceManager::sleep(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke);
  if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void TraceManager::wake(void *a1, dispatch_object_t *a2)
{
  uint64_t v3 = *a2;
  if (*a2)
  {
    dispatch_retain(*a2);
    dispatch_group_enter(v3);
  }
  BOOL v4 = (std::__shared_weak_count *)a1[16];
  if (!v4 || (uint64_t v5 = a1[15], (v6 = std::__shared_weak_count::lock(v4)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  xpc_object_t v7 = v6;
  xpc_object_t v8 = operator new(0x10uLL);
  *xpc_object_t v8 = a1;
  v8[1] = v3;
  xpc_object_t v9 = a1[17];
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  xpc_object_t v10 = operator new(0x18uLL);
  void *v10 = v8;
  v10[1] = v5;
  _DWORD v10[2] = v7;
  dispatch_async_f(v9, v10, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<TraceManager>::execute_wrapped<TraceManager::wake(dispatch::group_session)::$_0>(TraceManager::wake(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<TraceManager::wake(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<TraceManager::wake(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke);
  if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void ___ZN12TraceManager20updateBasebandFWInfoEv_block_invoke(void *a1, int a2, xpc_object_t *a3)
{
  BOOL v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    uint64_t v7 = a1[4];
    xpc_object_t v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      xpc_object_t v9 = v8;
      uint64_t v10 = a1[5];
      if (atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        if (a2) {
          return;
        }
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v9);
        if (a2) {
          return;
        }
      }
      if (v10)
      {
        xpc_object_t value = xpc_dictionary_get_value(*a3, (const char *)*MEMORY[0x1E4F4C488]);
        xpc_object_t object = value;
        if (value) {
          xpc_retain(value);
        }
        else {
          xpc_object_t object = xpc_null_create();
        }
        xpc::dyn_cast_or_default((uint64_t *)&v15, (xpc *)&object, (const object *)"", v12);
        uint64_t v13 = (void **)(v7 + 168);
        if (*(char *)(v7 + 191) < 0) {
          operator delete(*v13);
        }
        *(_OWORD *)uint64_t v13 = v15;
        *(void *)(v7 + 184) = v16;
        HIBYTE(v16) = 0;
        LOBYTE(v15) = 0;
        xpc_release(object);
      }
    }
  }
}

void sub_1C592FCF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object)
{
}

void ___ZN12TraceManager20initTraceHelper_syncEv_block_invoke(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    uint64_t v3 = a1[4];
    BOOL v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = a1[5];
      if (atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        if (!v6) {
          return;
        }
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v5);
        if (!v6) {
          return;
        }
      }
      uint64_t v7 = *(NSObject **)(v3 + 88);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl(&dword_1C5767000, v7, OS_LOG_TYPE_DEFAULT, "#I Wireless helper server has started", buf, 2u);
      }
      xpc_object_t v8 = (const char *)*MEMORY[0x1E4F4CAE8];
      int v9 = *(char *)(v3 + 215);
      if (v9 >= 0) {
        size_t v10 = *(unsigned __int8 *)(v3 + 215);
      }
      else {
        size_t v10 = *(void *)(v3 + 200);
      }
      if (v10 == strlen((const char *)*MEMORY[0x1E4F4CAE8])
        && (v9 >= 0 ? (uint64_t v11 = (const void *)(v3 + 192)) : (uint64_t v11 = *(const void **)(v3 + 192)),
            !memcmp(v11, v8, v10)
         && (prop::tracesettings::enabled((prop::tracesettings *)*MEMORY[0x1E4F4C1F8], v12)
          || prop::tracesettings::enabled((prop::tracesettings *)*MEMORY[0x1E4F4D338], v14)
          || prop::tracesettings::enabled((prop::tracesettings *)*MEMORY[0x1E4F4C288], v15))))
      {
        xpc_object_t v16 = xpc_dictionary_create(0, 0, 0);
        if (v16 || (xpc_object_t v16 = xpc_null_create()) != 0)
        {
          if (MEMORY[0x1C8792D30](v16) == MEMORY[0x1E4F14590])
          {
            xpc_retain(v16);
            xpc_object_t v17 = v16;
          }
          else
          {
            xpc_object_t v17 = xpc_null_create();
          }
        }
        else
        {
          xpc_object_t v17 = xpc_null_create();
          xpc_object_t v16 = 0;
        }
        xpc_release(v16);
        xpc_object_t v18 = xpc_string_create(v8);
        if (!v18) {
          xpc_object_t v18 = xpc_null_create();
        }
        xpc_dictionary_set_value(v17, (const char *)*MEMORY[0x1E4F4C688], v18);
        xpc_object_t v19 = xpc_null_create();
        xpc_release(v18);
        xpc_release(v19);
        xpc_object_t object = v17;
        if (v17) {
          xpc_retain(v17);
        }
        else {
          xpc_object_t object = xpc_null_create();
        }
        uint64_t v20 = *MEMORY[0x1E4F47138];
        v21[1] = 0;
        xpc_object_t v22 = 0;
        v21[0] = 0;
        TraceManager::runOnHelper_sync((void *)v3, (const char *)9, v20, 0x1388u, 0, &object, &v22, v21);
        xpc_release(object);
        xpc_object_t object = 0;
        xpc_release(v17);
      }
      else
      {
        uint64_t v13 = *(NSObject **)(v3 + 88);
        if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)std::string buf = 0;
          _os_log_impl(&dword_1C5767000, v13, OS_LOG_TYPE_DEFAULT, "#I Skipping trace start", buf, 2u);
        }
      }
    }
  }
}

void sub_1C592FFE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, xpc_object_t object)
{
  dispatch::callback<void({block_pointer})(TelephonyXPC::Result,xpc::dict)>::~callback((uint64_t)&a9);
  xpc_release(object);
  xpc_object_t object = 0;
  xpc_release(v12);
  _Unwind_Resume(a1);
}

void ___ZN12TraceManager16runOnHelper_syncEN3abm6helper6TaskIDEPKcjbN3xpc4dictEN8dispatch13group_sessionENS7_8callbackIU13block_pointerFvN12TelephonyXPC6ResultES6_EEE_block_invoke(void *a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    uint64_t v3 = a1[4];
    BOOL v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = a1[5];
      if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v5);
      }
      if (v6)
      {
        uint64_t v7 = *(NSObject **)(v3 + 88);
        if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v8 = abm::helper::asString();
          uint64_t v9 = a1[10];
          int v10 = 136315394;
          uint64_t v11 = v8;
          __int16 v12 = 2080;
          uint64_t v13 = v9;
          _os_log_impl(&dword_1C5767000, v7, OS_LOG_TYPE_DEFAULT, "#I %s:%s: complete", (uint8_t *)&v10, 0x16u);
        }
      }
    }
  }
}

void __copy_helper_block_e8_40c37_ZTSNSt3__18weak_ptrI12TraceManagerEE56c30_ZTSN8dispatch13group_sessionE64c46_ZTSNSt3__110shared_ptrIN3abm12HelperClientEEE(void *a1, void *a2)
{
  uint64_t v4 = a2[6];
  a1[5] = a2[5];
  a1[6] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 16), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = a2[7];
  a1[7] = v5;
  if (v5)
  {
    dispatch_retain(v5);
    uint64_t v6 = a1[7];
    if (v6) {
      dispatch_group_enter(v6);
    }
  }
  uint64_t v7 = a2[9];
  a1[8] = a2[8];
  a1[9] = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
}

void __destroy_helper_block_e8_40c37_ZTSNSt3__18weak_ptrI12TraceManagerEE56c30_ZTSN8dispatch13group_sessionE64c46_ZTSNSt3__110shared_ptrIN3abm12HelperClientEEE(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[9];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = a1[7];
    if (!v3) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v3 = a1[7];
    if (!v3) {
      goto LABEL_7;
    }
  }
  dispatch_group_leave(v3);
  uint64_t v4 = a1[7];
  if (v4) {
    dispatch_release(v4);
  }
LABEL_7:
  uint64_t v5 = (std::__shared_weak_count *)a1[6];
  if (v5)
  {
    std::__shared_weak_count::__release_weak(v5);
  }
}

uint64_t ctu::Loggable<TraceManager,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig(uint64_t a1)
{
  return MEMORY[0x1F417DA50](a1 + 8);
}

size_t ctu::Loggable<TraceManager,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = (const char *)(*(uint64_t (**)(void))(*(void *)(a1 - 48) + 16))();
  size_t result = strlen(v3);
  if (result >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v5 = result;
  if (result >= 0x17)
  {
    uint64_t v6 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17) {
      uint64_t v6 = result | 7;
    }
    uint64_t v7 = v6 + 1;
    uint64_t v8 = operator new(v6 + 1);
    a2[1] = v5;
    a2[2] = v7 | 0x8000000000000000;
    *a2 = v8;
    a2 = v8;
  }
  else
  {
    *((unsigned char *)a2 + 23) = result;
    if (!result)
    {
      *(unsigned char *)a2 = 0;
      return result;
    }
  }
  size_t result = (size_t)memmove(a2, v3, v5);
  *((unsigned char *)a2 + v5) = 0;
  return result;
}

uint64_t ctu::Loggable<TraceManager,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return MEMORY[0x1F417DD10](a1 + 8);
}

void *ctu::Loggable<TraceManager,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_1F20FD990;
  MEMORY[0x1C8790F40](a1 + 1);
  return a1;
}

void ctu::Loggable<TraceManager,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_1F20FD990;
  MEMORY[0x1C8790F40](a1 + 1);

  operator delete(a1);
}

void ctu::Loggable<TraceManager,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(uint64_t a1)
{
  uint64_t v1 = a1 + 56;
  if (*(void *)(a1 + 56))
  {
    if (!*(void *)(a1 + 80) || (uint64_t v2 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(a1 + 80))) == 0) {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    uint64_t v3 = v2;
    ctu::LoggerCommonBase::getLogDomain((ctu::LoggerCommonBase *)(v1 - 48));
    ctu::TrackedLogger::registerLoggerToServer();
    if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_1C5930524(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

void sub_1C5930540(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void *std::shared_ptr<TraceManager>::shared_ptr[abi:ne180100]<TraceManager,std::shared_ptr<TraceManager> ctu::SharedSynchronizable<TraceManager>::make_shared_ptr<TraceManager>(TraceManager*)::{lambda(TraceManager*)#1},void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  uint64_t v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = &v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20FD9D0;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)a2;
  a1[1] = v4;
  if (!a2) {
    return a1;
  }
  uint64_t v6 = *(std::__shared_weak_count **)(a2 + 128);
  if (v6)
  {
    if (v6->__shared_owners_ == -1)
    {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      *(void *)(a2 + 120) = a2;
      *(void *)(a2 + 128) = v4;
      std::__shared_weak_count::__release_weak(v6);
      if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
        goto LABEL_8;
      }
    }
    return a1;
  }
  atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  *(void *)(a2 + 120) = a2;
  *(void *)(a2 + 128) = v4;
  if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
LABEL_8:
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void sub_1C593066C(void *a1)
{
  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[17], v1, (dispatch_function_t)std::shared_ptr<TraceManager> ctu::SharedSynchronizable<TraceManager>::make_shared_ptr<TraceManager>(TraceManager*)::{lambda(TraceManager*)#1}::operator() const(TraceManager*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_1C5930694(_Unwind_Exception *a1)
{
}

void std::__shared_ptr_pointer<TraceManager *,std::shared_ptr<TraceManager> ctu::SharedSynchronizable<TraceManager>::make_shared_ptr<TraceManager>(TraceManager*)::{lambda(TraceManager *)#1},std::allocator<TraceManager>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<TraceManager *,std::shared_ptr<TraceManager> ctu::SharedSynchronizable<TraceManager>::make_shared_ptr<TraceManager>(TraceManager*)::{lambda(TraceManager *)#1},std::allocator<TraceManager>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<TraceManager *,std::shared_ptr<TraceManager> ctu::SharedSynchronizable<TraceManager>::make_shared_ptr<TraceManager>(TraceManager*)::{lambda(TraceManager *)#1},std::allocator<TraceManager>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableI12TraceManagerE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_") {
    return a1 + 24;
  }
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableI12TraceManagerE15make_shared_ptrIS1_EENSt3__110shared_ptrIT"
                                "_EEPS6_EUlPS1_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableI12TraceManagerE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableI12TraceManagerE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24; {
  return 0;
  }
}

uint64_t std::shared_ptr<TraceManager> ctu::SharedSynchronizable<TraceManager>::make_shared_ptr<TraceManager>(TraceManager*)::{lambda(TraceManager*)#1}::operator() const(TraceManager*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void ctu::SharedLoggable<TraceManager,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(void *a1)
{
  *a1 = &unk_1F20FD990;
  MEMORY[0x1C8790F40](a1 + 1);
  uint64_t v2 = a1[12];
  if (v2) {
    dispatch_release(v2);
  }
  unint64_t v3 = a1[11];
  if (v3) {
    dispatch_release(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[10];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }

  operator delete(a1);
}

void std::__shared_ptr_pointer<BBLogTracker *,std::shared_ptr<BBLogTracker>::__shared_ptr_default_delete<BBLogTracker,BBLogTracker>,std::allocator<BBLogTracker>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<BBLogTracker *,std::shared_ptr<BBLogTracker>::__shared_ptr_default_delete<BBLogTracker,BBLogTracker>,std::allocator<BBLogTracker>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1 = *(uint64_t **)(a1 + 24);
  if (v1)
  {
    std::__tree<std::__value_type<std::string,std::shared_ptr<support::misc::Watchdog>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<support::misc::Watchdog>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<support::misc::Watchdog>>>>::destroy(v1[1]);
    operator delete(v1);
  }
}

uint64_t std::__shared_ptr_pointer<BBLogTracker *,std::shared_ptr<BBLogTracker>::__shared_ptr_default_delete<BBLogTracker,BBLogTracker>,std::allocator<BBLogTracker>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x80000001C59A5FEALL) {
    return a1 + 24;
  }
  if (((v3 & 0x80000001C59A5FEALL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000001C59A5FEALL)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001C59A5FEALL & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 24;
  }
  return 0;
}

void ___ZN3ctu20SharedSynchronizableI12TraceManagerE13connect_eventIN5boost8signals26signalIFvNS_2cf11CFSharedRefIK14__CFDictionaryEEENS5_19optional_last_valueIvEEiNSt3__14lessIiEENS4_8functionISC_EENSI_IFvRKNS5_10connectionESB_EEENS5_5mutexEEES1_vJSB_EEEDTcl7connectfp_cvNSF_10shared_ptrIS1_EE_EcvP16dispatch_queue_s_EcvPFT1_DpT2_ELi0EEERT_MT0_FSV_SX_E_block_invoke(void *a1, const void **a2)
{
  uint64_t v3 = (void (*)(void *, CFTypeRef *))a1[5];
  uint64_t v2 = a1[6];
  uint64_t v4 = (void *)(a1[4] + (v2 >> 1) - 120);
  if (v2)
  {
    uint64_t v3 = *(void (**)(void *, CFTypeRef *))(*v4 + v3);
    size_t v5 = *a2;
    CFTypeRef cf = v5;
    if (!v5) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  size_t v5 = *a2;
  CFTypeRef cf = v5;
  if (v5) {
LABEL_5:
  }
    CFRetain(v5);
LABEL_6:
  v3(v4, &cf);
  if (cf) {
    CFRelease(cf);
  }
}

void sub_1C5930A1C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void **boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>>::~slot(void **a1)
{
  unint64_t v2 = (unint64_t)a1[3];
  if (v2)
  {
    if ((v2 & 1) == 0)
    {
      uint64_t v3 = *(void (**)(void **, void **, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
      if (v3) {
        v3(a1 + 4, a1 + 4, 2);
      }
    }
    a1[3] = 0;
  }
  uint64_t v4 = *a1;
  if (*a1)
  {
    uint64_t v5 = (uint64_t)a1[1];
    uint64_t v6 = *a1;
    if ((void *)v5 != v4)
    {
      do
      {
        v5 -= 24;
        boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>::destroy_content(v5);
      }
      while ((void *)v5 != v4);
      uint64_t v6 = *a1;
    }
    a1[1] = v4;
    operator delete(v6);
  }
  return a1;
}

uint64_t ctu::DispatchSlot<dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFDictionary const>)>>::~DispatchSlot(uint64_t a1)
{
  dispatch_release(*(dispatch_object_t *)a1);
  unint64_t v2 = *(const void **)(a1 + 8);
  if (v2) {
    _Block_release(v2);
  }
  return a1;
}

uint64_t boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>>,boost::signals2::mutex>>::~shared_ptr(uint64_t a1)
{
  unint64_t v2 = *(atomic_uint **)(a1 + 8);
  if (v2)
  {
    if (atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
      if (atomic_fetch_add(v2 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v2 + 24))(v2);
      }
    }
  }
  return a1;
}

void boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>,boost::function<void ()(boost::signals2::connection const&,ctu::cf::CFSharedRef<__CFDictionary const>)>,boost::signals2::mutex>::invocation_state>::dispose(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 16);
  if (v1)
  {
    unint64_t v2 = (atomic_uint *)v1[3];
    if (v2)
    {
      if (atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1)
      {
        (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
        if (atomic_fetch_add(v2 + 3, 0xFFFFFFFF) == 1) {
          (*(void (**)(atomic_uint *))(*(void *)v2 + 24))(v2);
        }
      }
    }
    uint64_t v3 = (atomic_uint *)v1[1];
    if (v3)
    {
      if (atomic_fetch_add(v3 + 2, 0xFFFFFFFF) == 1)
      {
        (*(void (**)(atomic_uint *))(*(void *)v3 + 16))(v3);
        if (atomic_fetch_add(v3 + 3, 0xFFFFFFFF) == 1) {
          (*(void (**)(atomic_uint *))(*(void *)v3 + 24))(v3);
        }
      }
    }
    operator delete(v1);
  }
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>,boost::function<void ()(boost::signals2::connection const&,ctu::cf::CFSharedRef<__CFDictionary const>)>,boost::signals2::mutex>::invocation_state>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>,boost::function<void ()(boost::signals2::connection const&,ctu::cf::CFSharedRef<__CFDictionary const>)>,boost::signals2::mutex>::invocation_state>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>,boost::function<void ()(boost::signals2::connection const&,ctu::cf::CFSharedRef<__CFDictionary const>)>,boost::signals2::mutex>::invocation_state>::get_untyped_deleter()
{
  return 0;
}

uint64_t *std::list<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>>,boost::signals2::mutex>>>::~list(uint64_t *a1)
{
  if (a1[2])
  {
    uint64_t v2 = *a1;
    uint64_t v3 = (uint64_t *)a1[1];
    uint64_t v4 = *v3;
    *(void *)(v4 + 8) = *(void *)(*a1 + 8);
    **(void **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        uint64_t v5 = (uint64_t *)v3[1];
        uint64_t v6 = (atomic_uint *)v3[3];
        if (v6)
        {
          if (atomic_fetch_add(v6 + 2, 0xFFFFFFFF) == 1)
          {
            (*(void (**)(atomic_uint *))(*(void *)v6 + 16))(v6);
            if (atomic_fetch_add(v6 + 3, 0xFFFFFFFF) == 1) {
              (*(void (**)(atomic_uint *))(*(void *)v6 + 24))(v6);
            }
          }
        }
        operator delete(v3);
        uint64_t v3 = v5;
      }
      while (v5 != a1);
    }
  }
  return a1;
}

void boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>>,boost::signals2::mutex>>>>::dispose(uint64_t a1)
{
  uint64_t v1 = *(uint64_t **)(a1 + 16);
  if (v1)
  {
    std::__tree<std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>>>::destroy((void *)v1[4]);
    if (v1[2])
    {
      uint64_t v2 = (void *)*v1;
      uint64_t v3 = (uint64_t *)v1[1];
      uint64_t v4 = *v3;
      *(void *)(v4 + 8) = *(void *)(*v1 + 8);
      *(void *)v2[1] = v4;
      v1[2] = 0;
      if (v3 != v1)
      {
        do
        {
          uint64_t v5 = (uint64_t *)v3[1];
          uint64_t v6 = (atomic_uint *)v3[3];
          if (v6)
          {
            if (atomic_fetch_add(v6 + 2, 0xFFFFFFFF) == 1)
            {
              (*(void (**)(atomic_uint *))(*(void *)v6 + 16))(v6);
              if (atomic_fetch_add(v6 + 3, 0xFFFFFFFF) == 1) {
                (*(void (**)(atomic_uint *))(*(void *)v6 + 24))(v6);
              }
            }
          }
          operator delete(v3);
          uint64_t v3 = v5;
        }
        while (v5 != v1);
      }
    }
    operator delete(v1);
  }
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>>,boost::signals2::mutex>>>>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>>,boost::signals2::mutex>>>>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>>,boost::signals2::mutex>>>>::get_untyped_deleter()
{
  return 0;
}

void boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>>,boost::signals2::mutex>::~connection_body(void *a1)
{
  uint64_t v1 = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>>,boost::signals2::mutex>::~connection_body(a1);

  operator delete(v1);
}

BOOL boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>>,boost::signals2::mutex>::connected(uint64_t a1)
{
  v19[3] = *MEMORY[0x1E4F143B8];
  *(void *)&long long v2 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v2 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v14[8] = v2;
  v14[9] = v2;
  v14[6] = v2;
  v14[7] = v2;
  v14[4] = v2;
  void v14[5] = v2;
  v14[2] = v2;
  v14[3] = v2;
  v14[0] = v2;
  v14[1] = v2;
  uint64_t v3 = *(pthread_mutex_t **)(a1 + 48);
  unint64_t v15 = 10;
  xpc_object_t v16 = (char *)v14;
  uint64_t v17 = 0;
  xpc_object_t v18 = v3;
  pthread_mutex_lock(v3);
  uint64_t v4 = *(uint64_t **)(a1 + 32);
  if (v4)
  {
    uint64_t v5 = *v4;
    if (*v4 != v4[1])
    {
      while (1)
      {
        memset(v19, 170, 24);
        boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>::apply_visitor<boost::signals2::detail::lock_weak_ptr_visitor const>(v5, (uint64_t)v19);
        if ((*(_DWORD *)v5 ^ (*(int *)v5 >> 31)) == 2)
        {
          if (!(*(unsigned int (**)(void))(**(void **)(v5 + 8) + 24))(*(void *)(v5 + 8))) {
            goto LABEL_6;
          }
        }
        else
        {
          uint64_t v6 = *(void *)(v5 + 16);
          if (v6 && atomic_load_explicit((atomic_uint *volatile)(v6 + 8), memory_order_acquire))
          {
LABEL_6:
            char v7 = 0;
            if (LODWORD(v19[0]) == SLODWORD(v19[0]) >> 31) {
              goto LABEL_13;
            }
            goto LABEL_7;
          }
        }
        if (*(unsigned char *)(a1 + 24))
        {
          *(unsigned char *)(a1 + 24) = 0;
          boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::mutex>((_DWORD *)a1, v14);
        }
        char v7 = 1;
        if (LODWORD(v19[0]) == SLODWORD(v19[0]) >> 31)
        {
LABEL_13:
          uint64_t v8 = (atomic_uint *)v19[2];
          if (v19[2])
          {
            if (atomic_fetch_add((atomic_uint *volatile)(v19[2] + 8), 0xFFFFFFFF) == 1)
            {
              (*(void (**)(atomic_uint *))(*(void *)v8 + 16))(v8);
              if (atomic_fetch_add(v8 + 3, 0xFFFFFFFF) == 1) {
                (*(void (**)(atomic_uint *))(*(void *)v8 + 24))(v8);
              }
            }
          }
          goto LABEL_17;
        }
LABEL_7:
        if (v19[1]) {
          (*(void (**)(void))(*(void *)v19[1] + 8))(v19[1]);
        }
LABEL_17:
        if ((v7 & 1) == 0)
        {
          v5 += 24;
          if (v5 != *(void *)(*(void *)(a1 + 32) + 8)) {
            continue;
          }
        }
        break;
      }
    }
  }
  int v9 = *(unsigned __int8 *)(a1 + 24);
  pthread_mutex_unlock(v18);
  int v10 = v16;
  if (v16)
  {
    if (v17 - 1 >= 0)
    {
      uint64_t v11 = &v16[16 * v17];
      do
      {
        __int16 v12 = (atomic_uint *)*((void *)v11 - 1);
        if (v12)
        {
          if (atomic_fetch_add(v12 + 2, 0xFFFFFFFF) == 1)
          {
            (*(void (**)(atomic_uint *))(*(void *)v12 + 16))(v12);
            if (atomic_fetch_add(v12 + 3, 0xFFFFFFFF) == 1) {
              (*(void (**)(atomic_uint *))(*(void *)v12 + 24))(v12);
            }
          }
        }
        v11 -= 16;
      }
      while (v11 > v10);
    }
    if (v15 >= 0xB) {
      operator delete(v16);
    }
  }
  return v9 != 0;
}

void sub_1C593127C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>>,boost::signals2::mutex>::lock(uint64_t a1)
{
  return pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 48));
}

uint64_t boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>>,boost::signals2::mutex>::unlock(uint64_t a1)
{
  return pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 48));
}

uint64_t boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>>,boost::signals2::mutex>::release_slot@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(result + 40);
  long long v2 = (void *)(result + 32);
  *a2 = *(void *)(result + 32);
  a2[1] = v3;
  if (v3)
  {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 + 8), 1u, memory_order_relaxed);
    uint64_t v4 = *(atomic_uint **)(result + 40);
    void *v2 = 0;
    *(void *)(result + 40) = 0;
    if (v4 && atomic_fetch_add(v4 + 2, 0xFFFFFFFF) == 1)
    {
      size_t result = (*(uint64_t (**)(atomic_uint *))(*(void *)v4 + 16))(v4);
      if (atomic_fetch_add(v4 + 3, 0xFFFFFFFF) == 1) {
        return (*(uint64_t (**)(atomic_uint *))(*(void *)v4 + 24))(v4);
      }
    }
  }
  else
  {
    void *v2 = 0;
    *(void *)(result + 40) = 0;
  }
  return result;
}

void boost::detail::sp_counted_impl_p<boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>>>::dispose(uint64_t a1)
{
  uint64_t v1 = *(void ***)(a1 + 16);
  if (v1)
  {
    unint64_t v2 = (unint64_t)v1[3];
    if (v2)
    {
      if ((v2 & 1) == 0)
      {
        uint64_t v3 = *(void (**)(void **, void **, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
        if (v3) {
          v3(v1 + 4, v1 + 4, 2);
        }
      }
      v1[3] = 0;
    }
    uint64_t v4 = *v1;
    if (*v1)
    {
      uint64_t v5 = (uint64_t)v1[1];
      uint64_t v6 = *v1;
      if ((void *)v5 != v4)
      {
        do
        {
          v5 -= 24;
          boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>::destroy_content(v5);
        }
        while ((void *)v5 != v4);
        uint64_t v6 = *v1;
      }
      v1[1] = v4;
      operator delete(v6);
    }
    operator delete(v1);
  }
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>>>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>>>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>>>::get_untyped_deleter()
{
  return 0;
}

void *boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>>,boost::signals2::mutex>::~connection_body(void *a1)
{
  *a1 = &unk_1F20FDB70;
  unint64_t v2 = (atomic_uint *)a1[7];
  if (v2)
  {
    if (atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
      if (atomic_fetch_add(v2 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v2 + 24))(v2);
      }
    }
  }
  uint64_t v3 = (atomic_uint *)a1[5];
  if (v3)
  {
    if (atomic_fetch_add(v3 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v3 + 16))(v3);
      if (atomic_fetch_add(v3 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v3 + 24))(v3);
      }
    }
  }
  *a1 = &unk_1F20F20E8;
  uint64_t v4 = (atomic_uint *)a1[2];
  if (v4 && atomic_fetch_add(v4 + 3, 0xFFFFFFFF) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v4 + 24))(v4);
  }
  return a1;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>>,boost::signals2::mutex>>::dispose(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 16);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>>,boost::signals2::mutex>>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>>,boost::signals2::mutex>>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>>,boost::signals2::mutex>>::get_untyped_deleter()
{
  return 0;
}

uint64_t *boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>::~function(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    if ((v2 & 1) == 0)
    {
      uint64_t v3 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
      if (v3) {
        v3(a1 + 1, a1 + 1, 2);
      }
    }
    *a1 = 0;
  }
  return a1;
}

void boost::detail::function::functor_manager<ctu::DispatchSlot<dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFDictionary const>)>>>::manage(uint64_t a1, _WORD *a2, unsigned int a3)
{
  if (a3 == 4) {
    goto LABEL_2;
  }
  if (a3 > 1)
  {
    if (a3 == 3)
    {
      int v9 = (const char *)(*(void *)(*(void *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL);
      if (v9 == (const char *)(0x80000001C59A6433 & 0x7FFFFFFFFFFFFFFFLL)
        || !strcmp(v9, (const char *)(0x80000001C59A6433 & 0x7FFFFFFFFFFFFFFFLL)))
      {
        *(void *)a2 = a1;
      }
      else
      {
        *(void *)a2 = 0;
      }
    }
    else
    {
      if (a3 != 2)
      {
LABEL_2:
        a2[4] = 0;
        return;
      }
      dispatch_release(*(dispatch_object_t *)a2);
      uint64_t v8 = (const void *)*((void *)a2 + 1);
      if (v8) {
LABEL_9:
      }
        _Block_release(v8);
    }
  }
  else
  {
    uint64_t v6 = *(NSObject **)a1;
    char v7 = *(void **)(a1 + 8);
    *(void *)a2 = *(void *)a1;
    if (v7)
    {
      char v7 = _Block_copy(v7);
      uint64_t v6 = *(NSObject **)a2;
    }
    *((void *)a2 + 1) = v7;
    dispatch_retain(v6);
    if (a3 == 1)
    {
      dispatch_release(*(dispatch_object_t *)a1);
      uint64_t v8 = *(const void **)(a1 + 8);
      if (v8) {
        goto LABEL_9;
      }
    }
  }
}

void boost::detail::function::void_function_obj_invoker1<ctu::DispatchSlot<dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFDictionary const>)>>,void,ctu::cf::CFSharedRef<__CFDictionary const>>::invoke(uint64_t a1, const void **a2)
{
  uint64_t v2 = *a2;
  xpc_object_t v22 = *a2;
  *a2 = 0;
  uint64_t v4 = *(NSObject **)a1;
  uint64_t v3 = *(const void **)(a1 + 8);
  if (!v3)
  {
    uint64_t v6 = 0;
LABEL_10:
    char v17 = 1;
    *(void *)&long long v23 = 0;
    if (!v2) {
      goto LABEL_23;
    }
    goto LABEL_22;
  }
  uint64_t v5 = _Block_copy(v3);
  uint64_t v6 = v5;
  if (!v5) {
    goto LABEL_10;
  }
  char v7 = _Block_copy(v5);
  uint64_t v8 = v7;
  if (!v7)
  {
    char v17 = 0;
    *(void *)&long long v23 = 0;
    if (!v2) {
      goto LABEL_23;
    }
LABEL_22:
    CFRetain(v2);
    goto LABEL_23;
  }
  int v9 = _Block_copy(v7);
  int v10 = v9;
  if (v9)
  {
    uint64_t v11 = _Block_copy(v9);
    __int16 v12 = v11;
    if (v11)
    {
      uint64_t v13 = _Block_copy(v11);
      uint64_t v14 = v13;
      if (v13)
      {
        unint64_t v15 = _Block_copy(v13);
        xpc_object_t v16 = v15;
        if (v15)
        {
          *(void *)&long long v23 = _Block_copy(v15);
          _Block_release(v16);
        }
        else
        {
          *(void *)&long long v23 = 0;
        }
        _Block_release(v14);
      }
      else
      {
        *(void *)&long long v23 = 0;
      }
      _Block_release(v12);
    }
    else
    {
      *(void *)&long long v23 = 0;
    }
    _Block_release(v10);
  }
  else
  {
    *(void *)&long long v23 = 0;
  }
  _Block_release(v8);
  char v17 = 0;
  if (v2) {
    goto LABEL_22;
  }
LABEL_23:
  xpc_object_t v18 = operator new(8uLL);
  *xpc_object_t v18 = v2;
  if (v2) {
    CFRetain(v2);
  }
  xpc_object_t v19 = (char *)operator new(0x20uLL);
  uint64_t v20 = v19;
  *(void *)xpc_object_t v19 = 0;
  if (boost::function1<void,ctu::cf::CFSharedRef<__CFDictionary const>>::assign_to<dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFDictionary const>)>>(dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFDictionary const>)>)::stored_vtable)
  {
    *(void *)xpc_object_t v19 = boost::function1<void,ctu::cf::CFSharedRef<__CFDictionary const>>::assign_to<dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFDictionary const>)>>(dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFDictionary const>)>)::stored_vtable;
    if (boost::function1<void,ctu::cf::CFSharedRef<__CFDictionary const>>::assign_to<dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFDictionary const>)>>(dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFDictionary const>)>)::stored_vtable)
    {
      *(_OWORD *)(v19 + 8) = v23;
      *((void *)v19 + 3) = v24;
    }
    else
    {
      (*(void (**)(long long *, char *, void))((unint64_t)boost::function1<void,ctu::cf::CFSharedRef<__CFDictionary const>>::assign_to<dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFDictionary const>)>>(dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFDictionary const>)>)::stored_vtable & 0xFFFFFFFFFFFFFFFELL))(&v23, v19 + 8, 0);
    }
  }
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = ___Z13execute_blockP16dispatch_queue_sRKN5boost8functionIFvN3ctu2cf11CFSharedRefIK14__CFDictionaryEEEEES8__block_invoke;
  block[3] = &__block_descriptor_tmp_138;
  block[4] = v20;
  block[5] = v18;
  dispatch_async(v4, block);
  if (v2) {
    CFRelease(v2);
  }
  if (boost::function1<void,ctu::cf::CFSharedRef<__CFDictionary const>>::assign_to<dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFDictionary const>)>>(dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFDictionary const>)>)::stored_vtable)
  {
    if ((boost::function1<void,ctu::cf::CFSharedRef<__CFDictionary const>>::assign_to<dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFDictionary const>)>>(dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFDictionary const>)>)::stored_vtable & 1) == 0)
    {
      uint64_t v21 = *(void (**)(long long *, long long *, uint64_t))((unint64_t)boost::function1<void,ctu::cf::CFSharedRef<__CFDictionary const>>::assign_to<dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFDictionary const>)>>(dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFDictionary const>)>)::stored_vtable & 0xFFFFFFFFFFFFFFFELL);
      if (v21) {
        v21(&v23, &v23, 2);
      }
    }
  }
  if ((v17 & 1) == 0)
  {
    _Block_release(v6);
    uint64_t v2 = v22;
  }
  if (v2) {
    CFRelease(v2);
  }
}

void sub_1C5931B54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10, uint64_t a11)
{
  operator delete(v12);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&a10);
  boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>::~function(&a11);
  if ((v13 & 1) == 0) {
    _Block_release(v11);
  }
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)&a9);
  _Unwind_Resume(a1);
}

void ___Z13execute_blockP16dispatch_queue_sRKN5boost8functionIFvN3ctu2cf11CFSharedRefIK14__CFDictionaryEEEEES8__block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = **(std::runtime_error_vtbl ***)(a1 + 40);
  if (v3) {
    CFRetain(v3);
  }
  if (!*v2)
  {
    std::runtime_error::runtime_error(&cf, "call to empty boost::function");
    cf.__vftable = (std::runtime_error_vtbl *)&unk_1F20F2330;
    boost::throw_exception<boost::bad_function_call>(&cf);
  }
  uint64_t v4 = *(void (**)(void *, std::runtime_error *))((*v2 & 0xFFFFFFFFFFFFFFFELL) + 8);
  cf.__vftable = v3;
  v4(v2 + 1, &cf);
  if (cf.__vftable) {
    CFRelease(cf.__vftable);
  }
  uint64_t v5 = *(uint64_t **)(a1 + 32);
  if (v5)
  {
    uint64_t v6 = *v5;
    if (*v5)
    {
      if ((v6 & 1) == 0)
      {
        char v7 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 & 0xFFFFFFFFFFFFFFFELL);
        if (v7) {
          v7(v5 + 1, v5 + 1, 2);
        }
      }
      *uint64_t v5 = 0;
    }
    operator delete(v5);
  }
  uint64_t v8 = *(CFTypeRef **)(a1 + 40);
  if (v8)
  {
    if (*v8) {
      CFRelease(*v8);
    }
    operator delete(v8);
  }
}

void sub_1C5931CC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10, std::runtime_error a11)
{
}

void sub_1C5931CE0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void sub_1C5931CFC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, const void *);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)va1);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void boost::detail::function::functor_manager<dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFDictionary const>)>>::manage(void **a1, _WORD *a2, unsigned int a3)
{
  if (a3 == 4) {
    goto LABEL_2;
  }
  if (a3 > 1)
  {
    if (a3 == 3)
    {
      uint64_t v8 = (const char *)(*(void *)(*(void *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL);
      if (v8 == (const char *)(0x80000001C59A6497 & 0x7FFFFFFFFFFFFFFFLL)
        || !strcmp(v8, (const char *)(0x80000001C59A6497 & 0x7FFFFFFFFFFFFFFFLL)))
      {
        *(void *)a2 = a1;
      }
      else
      {
        *(void *)a2 = 0;
      }
    }
    else
    {
      if (a3 != 2)
      {
LABEL_2:
        a2[4] = 0;
        return;
      }
      char v7 = *(void **)a2;
      if (*(void *)a2) {
LABEL_9:
      }
        _Block_release(v7);
    }
  }
  else
  {
    uint64_t v6 = *a1;
    if (*a1) {
      uint64_t v6 = _Block_copy(v6);
    }
    *(void *)a2 = v6;
    if (a3 == 1)
    {
      char v7 = *a1;
      if (*a1) {
        goto LABEL_9;
      }
    }
  }
}

void boost::detail::function::void_function_obj_invoker1<dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFDictionary const>)>,void,ctu::cf::CFSharedRef<__CFDictionary const>>::invoke(uint64_t *a1, CFTypeRef *a2)
{
  uint64_t v2 = *a1;
  CFTypeRef cf = *a2;
  *a2 = 0;
  (*(void (**)(void))(v2 + 16))();
  if (cf) {
    CFRelease(cf);
  }
}

void sub_1C5931E68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

uint64_t boost::function1<void,ctu::cf::CFSharedRef<__CFDictionary const>>::move_assign(uint64_t result, uint64_t *a2)
{
  if (a2 != (uint64_t *)result)
  {
    uint64_t v2 = a2;
    uint64_t v3 = (uint64_t *)result;
    uint64_t v4 = *a2;
    if (*a2)
    {
      *(void *)uint64_t result = v4;
      if (v4)
      {
        long long v7 = *(_OWORD *)(a2 + 1);
        *(void *)(result + 24) = a2[3];
        *(_OWORD *)(result + 8) = v7;
      }
      else
      {
        uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v4 & 0xFFFFFFFFFFFFFFFELL))(a2 + 1, result + 8, 1);
      }
    }
    else
    {
      uint64_t v5 = *(void *)result;
      if (!*(void *)result) {
        return result;
      }
      if ((v5 & 1) == 0)
      {
        uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 & 0xFFFFFFFFFFFFFFFELL);
        if (v6) {
          uint64_t result = v6(result + 8, result + 8, 2);
        }
      }
      uint64_t v2 = v3;
    }
    uint64_t *v2 = 0;
  }
  return result;
}

void sub_1C5931F20(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_rethrow();
}

void sub_1C5931F30(_Unwind_Exception *a1)
{
}

uint64_t *boost::function1<void,ctu::cf::CFSharedRef<__CFDictionary const>>::~function1(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    if ((v2 & 1) == 0)
    {
      uint64_t v3 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
      if (v3) {
        v3(a1 + 1, a1 + 1, 2);
      }
    }
    *a1 = 0;
  }
  return a1;
}

void *boost::signals2::detail::foreign_weak_ptr_impl<std::weak_ptr<TraceManager>>::~foreign_weak_ptr_impl(void *a1)
{
  *a1 = &unk_1F20FDCC8;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void boost::signals2::detail::foreign_weak_ptr_impl<std::weak_ptr<TraceManager>>::~foreign_weak_ptr_impl(void *__p)
{
  *long long __p = &unk_1F20FDCC8;
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  operator delete(__p);
}

void boost::signals2::detail::foreign_weak_ptr_impl<std::weak_ptr<TraceManager>>::lock(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (v4)
  {
    uint64_t v5 = std::__shared_weak_count::lock(v4);
    if (v5)
    {
      uint64_t v6 = *(void *)(a1 + 8);
      goto LABEL_6;
    }
  }
  else
  {
    uint64_t v5 = 0;
  }
  uint64_t v6 = 0;
LABEL_6:
  long long v7 = operator new(0x18uLL);
  *long long v7 = &unk_1F20FDD18;
  v7[1] = v6;
  _DWORD v7[2] = v5;
  if (v5)
  {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    *a2 = v7;
    if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  else
  {
    *a2 = v7;
  }
}

void sub_1C5932154(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

BOOL boost::signals2::detail::foreign_weak_ptr_impl<std::weak_ptr<TraceManager>>::expired(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  return !v1 || *(void *)(v1 + 8) == -1;
}

void *boost::signals2::detail::foreign_weak_ptr_impl<std::weak_ptr<TraceManager>>::clone(uint64_t a1)
{
  uint64_t result = operator new(0x18uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  void *result = &unk_1F20FDCC8;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void *boost::signals2::detail::foreign_shared_ptr_impl<std::shared_ptr<TraceManager>>::~foreign_shared_ptr_impl(void *result)
{
  uint64_t v1 = result;
  void *result = &unk_1F20FDD18;
  uint64_t v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void boost::signals2::detail::foreign_shared_ptr_impl<std::shared_ptr<TraceManager>>::~foreign_shared_ptr_impl(void *__p)
{
  uint64_t v1 = __p;
  *long long __p = &unk_1F20FDD18;
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    long long __p = v1;
  }
  else if (((vars8 ^ (2 * vars8)) & 0x4000000000000000) != 0)
  {
    __break(0xC471u);
  }
  operator delete(__p);
}

void *boost::signals2::detail::foreign_shared_ptr_impl<std::shared_ptr<TraceManager>>::clone(uint64_t a1)
{
  uint64_t result = operator new(0x18uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  void *result = &unk_1F20FDD18;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void *___ZNK3ctu20SharedSynchronizableI12TraceManagerE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke(uint64_t a1)
{
  return (*(void *(**)(void *__return_ptr))(**(void **)(a1 + 40) + 16))(*(void **)(a1 + 40));
}

void ctu::SharedSynchronizable<TraceManager>::execute_wrapped(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[1];
  if (!v3 || (uint64_t v5 = *a1, (v6 = std::__shared_weak_count::lock(v3)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  long long v7 = v6;
  uint64_t v8 = a1[2];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 1174405120;
  block[2] = ___ZNK3ctu20SharedSynchronizableI12TraceManagerE15execute_wrappedEU13block_pointerFvvE_block_invoke;
  block[3] = &unk_1F20FDD50;
  block[5] = v5;
  __int16 v12 = v7;
  p_shared_owners = &v7->__shared_owners_;
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  block[4] = a2;
  dispatch_async(v8, block);
  int v10 = v12;
  if (!v12 || atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      return;
    }
LABEL_8:
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    return;
  }
  ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
  std::__shared_weak_count::__release_weak(v10);
  if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_8;
  }
}

uint64_t ___ZNK3ctu20SharedSynchronizableI12TraceManagerE15execute_wrappedEU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t __copy_helper_block_e8_40c41_ZTSNSt3__110shared_ptrIK12TraceManagerEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c41_ZTSNSt3__110shared_ptrIK12TraceManagerEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void ___ZN9analytics29registerCallbackForTimedEventI12TraceManagerEEvPKcNS_9TimerTypeENSt3__18weak_ptrIT_EEN8dispatch5queueEU13block_pointerFvNS5_12basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEE_block_invoke(void *a1, uint64_t a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[5];
  if (v3)
  {
    uint64_t v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      uint64_t v6 = v5;
      if (!a1[4]) {
        goto LABEL_14;
      }
      uint64_t v7 = a1[6];
      if (*(char *)(a2 + 23) < 0) {
        std::string::__init_copy_ctor_external(&v8, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
      }
      else {
        std::string v8 = *(std::string *)a2;
      }
      (*(void (**)(uint64_t, std::string *))(v7 + 16))(v7, &v8);
      if ((SHIBYTE(v8.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_14:
        if (atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
          return;
        }
LABEL_11:
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
        return;
      }
      operator delete(v8.__r_.__value_.__l.__data_);
      if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
        goto LABEL_11;
      }
    }
  }
}

void sub_1C59326B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1C59326CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void *__copy_helper_block_e8_32c37_ZTSNSt3__18weak_ptrI12TraceManagerEE48c106_ZTSN8dispatch5blockIU13block_pointerFvNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEEE(void *a1, void *a2)
{
  uint64_t v3 = a2[5];
  a1[4] = a2[4];
  a1[5] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  uint64_t result = (void *)a2[6];
  if (result) {
    uint64_t result = _Block_copy(result);
  }
  a1[6] = result;
  return result;
}

void __destroy_helper_block_e8_32c37_ZTSNSt3__18weak_ptrI12TraceManagerEE48c106_ZTSN8dispatch5blockIU13block_pointerFvNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEEE(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 48);
  if (v2) {
    _Block_release(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 40);
  if (v3)
  {
    std::__shared_weak_count::__release_weak(v3);
  }
}

void dispatch::async<void ctu::SharedSynchronizable<TraceManager>::execute_wrapped<TraceManager::initialize(dispatch::group_session)::$_0>(TraceManager::initialize(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<TraceManager::initialize(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<TraceManager::initialize(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count ****)a1;
  TraceManager::finishInitialization_sync(**(std::__shared_weak_count ****)a1);
  operator delete(v2);
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    uint64_t v4 = (void *)a1;
  }
  else
  {
    uint64_t v4 = (void *)a1;
  }
  operator delete(v4);
}

void sub_1C593284C(_Unwind_Exception *a1)
{
  operator delete(v2);
  uint64_t v4 = (std::__shared_weak_count *)v1[2];
  if (v4)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void ctu::cf::insert<char const*,int>(__CFDictionary *a1, const __CFString **a2, int a3, const __CFAllocator *a4, const __CFAllocator *a5)
{
  CFNumberRef v12 = 0;
  ctu::cf::convert_copy((ctu::cf *)&v12, a2, (const char *)0x8000100, (uint64_t)a4, a5);
  CFNumberRef v8 = v12;
  int valuePtr = a3;
  CFNumberRef v9 = CFNumberCreate(a4, kCFNumberIntType, &valuePtr);
  CFNumberRef v10 = v9;
  CFNumberRef v12 = v9;
  if (v8) {
    BOOL v11 = v9 == 0;
  }
  else {
    BOOL v11 = 1;
  }
  if (v11)
  {
    if (!v9) {
      goto LABEL_8;
    }
  }
  else
  {
    CFDictionaryAddValue(a1, v8, v9);
  }
  CFRelease(v10);
LABEL_8:
  if (v8) {
    CFRelease(v8);
  }
}

void sub_1C5932958(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, const void *);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va1);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  _Unwind_Resume(a1);
}

void sub_1C593297C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  _Unwind_Resume(a1);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI12TraceManagerE15execute_wrappedIZZNS3_16collectLogs_syncEN3xpc4dictENS_5blockIU13block_pointerFviS7_EEEEUb0_E3__1EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrISD_NSI_14default_deleteISD_EEEEENUlPvE_8__invokeESN_(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *(void *)(*a1 + 24);
  memset(&v56, 0, sizeof(v56));
  xpc_object_t v55 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v5 = v4;
  uint64_t v6 = MEMORY[0x1E4F14590];
  if (v4)
  {
    xpc_object_t v55 = v4;
  }
  else
  {
    xpc_object_t v5 = xpc_null_create();
    xpc_object_t v55 = v5;
    if (!v5)
    {
      xpc_object_t v7 = xpc_null_create();
      xpc_object_t v5 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1C8792D30](v5) == v6)
  {
    xpc_retain(v5);
    goto LABEL_9;
  }
  xpc_object_t v7 = xpc_null_create();
LABEL_8:
  xpc_object_t v55 = v7;
LABEL_9:
  xpc_release(v5);
  *(void *)&long long v8 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)long long __p = v8;
  long long v54 = v8;
  CFNumberRef v9 = *(void **)(v2 + 16);
  xpc_object_t object = v9;
  if (v9) {
    xpc_retain(v9);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  abm::HelperClient::perform();
  xpc_release(object);
  xpc_object_t object = 0;
  BOOL v11 = (const char **)MEMORY[0x1E4F471C8];
  CFNumberRef v12 = (uint64_t *)MEMORY[0x1E4F1CF80];
  if (!LODWORD(__p[0]) && MEMORY[0x1C8792D30](v55) == v6)
  {
    xpc_object_t value = xpc_dictionary_get_value(v55, *v11);
    aBlocuint64_t k = value;
    if (value) {
      xpc_retain(value);
    }
    else {
      aBlocuint64_t k = xpc_null_create();
    }
    xpc::dyn_cast_or_default((uint64_t *)&v42, (xpc *)&aBlock, (const object *)"", v14);
    if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v56.__r_.__value_.__l.__data_);
    }
    std::string v56 = v42;
    *((unsigned char *)&v42.__r_.__value_.__s + 23) = 0;
    v42.__r_.__value_.__s.__data_[0] = 0;
    xpc_release(aBlock);
    if (ResetInfo::reasonMatchesAtLeastOneApplicablePattern(2, (uint64_t)&v56, (long long **)(*(void *)(v3 + 288) + 48)))ctu::cf::update<char const*,BOOL>(*(__CFDictionary **)(v2 + 32), (const __CFString **)*MEMORY[0x1E4F4C900], 1, *v12, v15); {
    if (ResetInfo::reasonMatchesAtLeastOneApplicablePattern(4, (uint64_t)&v56, (long long **)(*(void *)(v3 + 288) + 48)))ctu::cf::update<char const*,BOOL>(*(__CFDictionary **)(v2 + 32), (const __CFString **)*MEMORY[0x1E4F4C8F8], 1, *v12, v10);
    }
  }
  xpc_object_t v16 = *(__CFDictionary **)(v2 + 32);
  if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v42, v56.__r_.__value_.__l.__data_, v56.__r_.__value_.__l.__size_);
  }
  else {
    std::string v42 = v56;
  }
  ctu::cf::insert<char const*,std::string>(v16, (const __CFString **)*MEMORY[0x1E4F4C8D8], (uint64_t)&v42, *v12, v10);
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v42.__r_.__value_.__l.__data_);
  }
  xpc_object_t v17 = xpc_string_create("");
  if (!v17) {
    xpc_object_t v17 = xpc_null_create();
  }
  xpc_dictionary_set_value(*(xpc_object_t *)(v2 + 16), *v11, v17);
  xpc_object_t v18 = xpc_null_create();
  xpc_release(v17);
  xpc_release(v18);
  xpc_object_t v19 = *(void **)(v2 + 16);
  xpc_object_t v51 = v19;
  if (v19) {
    xpc_retain(v19);
  }
  else {
    xpc_object_t v51 = xpc_null_create();
  }
  aBlocuint64_t k = 0;
  dispatch_object_t v50 = 0;
  abm::HelperClient::perform();
  if (v50) {
    dispatch_release(v50);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  xpc_release(v51);
  xpc_object_t v51 = 0;
  uint64_t v20 = *(std::__shared_weak_count **)(v3 + 128);
  if (!v20 || (uint64_t v21 = *(void *)(v3 + 120), (v22 = std::__shared_weak_count::lock(v20)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  long long v23 = v22;
  p_shared_weak_owners = &v22->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v22->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v23);
  }
  v42.__r_.__value_.__r.__words[0] = MEMORY[0x1E4F143A8];
  v42.__r_.__value_.__l.__size_ = 1174405120;
  v42.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZZZN12TraceManager16collectLogs_syncEN3xpc4dictEN8dispatch5blockIU13block_pointerFviS1_EEEEUb0_ENK3__1clEv_block_invoke;
  xpc_object_t v43 = &__block_descriptor_tmp_165_0;
  uint64_t v44 = v3;
  uint64_t v45 = v21;
  std::string::size_type v46 = v23;
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  uint64_t v25 = *(void **)(v2 + 40);
  if (v25) {
    uint64_t v25 = _Block_copy(v25);
  }
  xpc_object_t v47 = v25;
  int v26 = *(const void **)(v2 + 32);
  CFTypeRef cf = v26;
  if (v26) {
    CFRetain(v26);
  }
  uint64_t v27 = _Block_copy(&v42);
  uint64_t v28 = *(NSObject **)(v3 + 136);
  if (v28) {
    dispatch_retain(*(dispatch_object_t *)(v3 + 136));
  }
  xpc_object_t v29 = xpc_dictionary_create(0, 0, 0);
  if (v29 || (xpc_object_t v29 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C8792D30](v29) == v6)
    {
      xpc_retain(v29);
      xpc_object_t v30 = v29;
    }
    else
    {
      xpc_object_t v30 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v30 = xpc_null_create();
    xpc_object_t v29 = 0;
  }
  xpc_release(v29);
  xpc_object_t v31 = (const char *)(v2 + 48);
  if (*(char *)(v2 + 71) < 0) {
    xpc_object_t v31 = *(const char **)v31;
  }
  xpc_object_t v32 = xpc_string_create(v31);
  if (!v32) {
    xpc_object_t v32 = xpc_null_create();
  }
  xpc_dictionary_set_value(v30, (const char *)*MEMORY[0x1E4F47160], v32);
  xpc_object_t v33 = xpc_null_create();
  xpc_release(v32);
  xpc_release(v33);
  xpc_object_t v41 = v30;
  if (v30)
  {
    xpc_retain(v30);
    char v40 = 0;
    if (v27) {
      goto LABEL_59;
    }
  }
  else
  {
    char v40 = 0;
    xpc_object_t v41 = xpc_null_create();
    if (v27)
    {
LABEL_59:
      uint64_t v34 = _Block_copy(v27);
      uint64_t v35 = *MEMORY[0x1E4F47110];
      int v38 = v34;
      long long v39 = v28;
      if (!v28) {
        goto LABEL_61;
      }
      goto LABEL_60;
    }
  }
  uint64_t v34 = 0;
  uint64_t v35 = *MEMORY[0x1E4F47110];
  int v38 = 0;
  long long v39 = v28;
  if (v28) {
LABEL_60:
  }
    dispatch_retain(v28);
LABEL_61:
  TraceManager::runOnHelper_sync((void *)v3, (const char *)9, v35, 0, 1, &v41, &v40, &v38);
  if (v28) {
    dispatch_release(v28);
  }
  if (v34) {
    _Block_release(v34);
  }
  xpc_release(v41);
  xpc_object_t v41 = 0;
  xpc_release(v30);
  if (v28) {
    dispatch_release(v28);
  }
  if (v27) {
    _Block_release(v27);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (v47) {
    _Block_release(v47);
  }
  if (v46) {
    std::__shared_weak_count::__release_weak(v46);
  }
  std::__shared_weak_count::__release_weak(v23);
  if (SHIBYTE(v54) < 0) {
    operator delete(__p[1]);
  }
  xpc_release(v55);
  if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v56.__r_.__value_.__l.__data_);
  }
  size_t v36 = (void *)_ZZZN12TraceManager16collectLogs_syncEN3xpc4dictEN8dispatch5blockIU13block_pointerFviS1_EEEEUb0_EN3__1D1Ev(v2);
  operator delete(v36);
  uint64_t v37 = (std::__shared_weak_count *)a1[2];
  if (v37 && !atomic_fetch_add(&v37->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
    std::__shared_weak_count::__release_weak(v37);
  }
  operator delete(a1);
}

void sub_1C5932FEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, xpc_object_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,std::__shared_weak_count *a22,void *aBlock,CFTypeRef cf,uint64_t a25,xpc_object_t object,dispatch_object_t a27,xpc_object_t a28,xpc_object_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  xpc_release(object);
  if (a36 < 0) {
    operator delete(__p);
  }
  xpc_release(*(xpc_object_t *)(v38 - 120));
  if (*(char *)(v38 - 89) < 0) {
    operator delete(*(void **)(v38 - 112));
  }
  char v40 = (void *)_ZZZN12TraceManager16collectLogs_syncEN3xpc4dictEN8dispatch5blockIU13block_pointerFviS1_EEEEUb0_EN3__1D1Ev(v37);
  operator delete(v40);
  xpc_object_t v41 = (std::__shared_weak_count *)v36[2];
  if (v41)
  {
    if (!atomic_fetch_add(&v41->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  operator delete(v36);
  _Unwind_Resume(a1);
}

void ___ZZZN12TraceManager16collectLogs_syncEN3xpc4dictEN8dispatch5blockIU13block_pointerFviS1_EEEEUb0_ENK3__1clEv_block_invoke(void *a1)
{
  uint64_t v2 = a1[4];
  uint64_t v27 = 0;
  uint64_t v28 = 0;
  uint64_t v3 = (std::__shared_weak_count *)a1[6];
  if (!v3 || (uint64_t v28 = std::__shared_weak_count::lock(v3)) == 0 || (v27 = a1[5]) == 0)
  {
    xpc_object_t v9 = xpc_null_create();
    uint64_t v10 = a1[7];
    xpc_object_t v29 = v9;
    xpc_object_t v11 = xpc_null_create();
    (*(void (**)(uint64_t, uint64_t, xpc_object_t *))(v10 + 16))(v10, 3760250880, &v29);
    xpc_release(v29);
    xpc_release(v11);
    goto LABEL_10;
  }
  xpc_object_t v4 = (const void *)*MEMORY[0x1E4F4C8A0];
  size_t v5 = strlen((const char *)*MEMORY[0x1E4F4C8A0]);
  if (v5 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v6 = (void *)v5;
  if (v5 >= 0x17)
  {
    uint64_t v13 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17) {
      uint64_t v13 = v5 | 7;
    }
    uint64_t v14 = v13 + 1;
    xpc_object_t v7 = (void **)operator new(v13 + 1);
    __dst[1] = v6;
    unint64_t v26 = v14 | 0x8000000000000000;
    __dst[0] = v7;
LABEL_17:
    memmove(v7, v4, (size_t)v6);
    *((unsigned char *)v6 + (void)v7) = 0;
    long long v8 = (const void *)a1[8];
    if (!v8) {
      goto LABEL_20;
    }
    goto LABEL_18;
  }
  HIBYTE(v26) = v5;
  xpc_object_t v7 = __dst;
  if (v5) {
    goto LABEL_17;
  }
  LOBYTE(__dst[0]) = 0;
  long long v8 = (const void *)a1[8];
  if (!v8) {
    goto LABEL_20;
  }
LABEL_18:
  CFTypeID v15 = CFGetTypeID(v8);
  if (v15 == CFDictionaryGetTypeID())
  {
    CFTypeRef cf = v8;
    CFRetain(v8);
    goto LABEL_21;
  }
LABEL_20:
  CFTypeRef cf = 0;
LABEL_21:
  v20[0] = MEMORY[0x1E4F143A8];
  v20[1] = 1174405120;
  v20[2] = ___ZZZN12TraceManager16collectLogs_syncEN3xpc4dictEN8dispatch5blockIU13block_pointerFviS1_EEEEUb0_ENK3__1clEv_block_invoke_2;
  v20[3] = &__block_descriptor_tmp_164;
  xpc_object_t v16 = (const void *)a1[7];
  if (!v16)
  {
    xpc_object_t v18 = (const void *)a1[8];
    uint64_t v21 = 0;
    CFTypeRef v22 = v18;
    if (!v18) {
      goto LABEL_26;
    }
    goto LABEL_25;
  }
  xpc_object_t v17 = _Block_copy(v16);
  xpc_object_t v18 = (const void *)a1[8];
  uint64_t v21 = v17;
  CFTypeRef v22 = v18;
  if (v18) {
LABEL_25:
  }
    CFRetain(v18);
LABEL_26:
  aBlocuint64_t k = _Block_copy(v20);
  Service::broadcastEvent(v2, (uint64_t)__dst, &cf, (const void **)&aBlock);
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (SHIBYTE(v26) < 0)
  {
    operator delete(__dst[0]);
    CFTypeRef v19 = v22;
    if (!v22) {
      goto LABEL_35;
    }
    goto LABEL_34;
  }
  CFTypeRef v19 = v22;
  if (v22) {
LABEL_34:
  }
    CFRelease(v19);
LABEL_35:
  if (v21) {
    _Block_release(v21);
  }
LABEL_10:
  CFNumberRef v12 = v28;
  if (v28)
  {
    if (!atomic_fetch_add(&v28->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_1C5933504(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, void *aBlock, const void *a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (aBlock) {
    _Block_release(aBlock);
  }
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(v22);
  if (a13) {
    _Block_release(a13);
  }
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&a16);
  if (a22 < 0)
  {
    operator delete(__p);
    std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v23 - 72);
    _Unwind_Resume(a1);
  }
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v23 - 72);
  _Unwind_Resume(a1);
}

void ___ZZZN12TraceManager16collectLogs_syncEN3xpc4dictEN8dispatch5blockIU13block_pointerFviS1_EEEEUb0_ENK3__1clEv_block_invoke_2(uint64_t a1, const void *a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 32);
  unsigned int v4 = 0;
  ctu::cf_to_xpc((uint64_t *)&object, *(ctu **)(a1 + 40), a2);
  dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::object>(v2, &v4, &object);
  xpc_release(object);
}

void sub_1C5933608(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object)
{
}

CFTypeRef __copy_helper_block_e8_32c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE40c44_ZTSN3ctu2cf11CFSharedRefI14__CFDictionaryEE(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = *(const void **)(a2 + 32);
  if (!v4)
  {
    CFTypeRef result = *(CFTypeRef *)(a2 + 40);
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = result;
    if (!result) {
      return result;
    }
    return CFRetain(result);
  }
  size_t v5 = _Block_copy(v4);
  CFTypeRef result = *(CFTypeRef *)(a2 + 40);
  *(void *)(a1 + 32) = v5;
  *(void *)(a1 + 40) = result;
  if (result) {
    return CFRetain(result);
  }
  return result;
}

void __destroy_helper_block_e8_32c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE40c44_ZTSN3ctu2cf11CFSharedRefI14__CFDictionaryEE(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 40);
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = *(const void **)(a1 + 32);
  if (v3) {
    _Block_release(v3);
  }
}

CFTypeRef __copy_helper_block_e8_40c37_ZTSNSt3__18weak_ptrI12TraceManagerEE56c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE64c44_ZTSN3ctu2cf11CFSharedRefI14__CFDictionaryEE(void *a1, void *a2)
{
  uint64_t v4 = a2[6];
  a1[5] = a2[5];
  a1[6] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 16), 1uLL, memory_order_relaxed);
  }
  size_t v5 = (const void *)a2[7];
  if (!v5)
  {
    CFTypeRef result = (CFTypeRef)a2[8];
    a1[7] = 0;
    a1[8] = result;
    if (!result) {
      return result;
    }
    return CFRetain(result);
  }
  uint64_t v6 = _Block_copy(v5);
  CFTypeRef result = (CFTypeRef)a2[8];
  a1[7] = v6;
  a1[8] = result;
  if (result) {
    return CFRetain(result);
  }
  return result;
}

void __destroy_helper_block_e8_40c37_ZTSNSt3__18weak_ptrI12TraceManagerEE56c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE64c44_ZTSN3ctu2cf11CFSharedRefI14__CFDictionaryEE(void *a1)
{
  uint64_t v2 = (const void *)a1[8];
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = (const void *)a1[7];
  if (v3) {
    _Block_release(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    std::__shared_weak_count::__release_weak(v4);
  }
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI12TraceManagerE15execute_wrappedIZZNS3_24collectBasebandLogs_syncEN3xpc4dictENS_5blockIU13block_pointerFviS7_EEEEUb1_E3__2EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrISD_NSI_14default_deleteISD_EEEEENUlPvE_8__invokeESN_(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v30 = v2;
  uint64_t v3 = *(void *)v2;
  uint64_t v4 = *(NSObject **)(*(void *)v2 + 88);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl(&dword_1C5767000, v4, OS_LOG_TYPE_DEFAULT, "#I Snapshot of baseband trace complete", buf, 2u);
  }
  size_t v5 = (const char *)(v2 + 8);
  *(void *)&long long v6 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)xpc_object_t v48 = v6;
  *(_OWORD *)&char v48[16] = v6;
  if (*(char *)(v2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)v48, *(const std::string::value_type **)(v2 + 8), *(void *)(v2 + 16));
  }
  else
  {
    long long v7 = *(_OWORD *)v5;
    *(void *)&char v48[16] = *(void *)(v2 + 24);
    *(_OWORD *)xpc_object_t v48 = v7;
  }
  long long v8 = *(void **)(v2 + 32);
  if (v8) {
    long long v8 = _Block_copy(v8);
  }
  *(void *)&v48[24] = v8;
  if (!*(_DWORD *)(v2 + 40))
  {
    _ZZZZN12TraceManager24collectBasebandLogs_syncEN3xpc4dictEN8dispatch5blockIU13block_pointerFviS1_EEEEUb1_ENK3__2clEvENKUlvE_clEv((uint64_t)v48);
    goto LABEL_65;
  }
  *(void *)std::string buf = MEMORY[0x1E4F143A8];
  uint64_t v39 = 1174405120;
  char v40 = ___ZZZN12TraceManager24collectBasebandLogs_syncEN3xpc4dictEN8dispatch5blockIU13block_pointerFviS1_EEEEUb1_ENK3__2clEv_block_invoke;
  xpc_object_t v41 = &__block_descriptor_tmp_166_0;
  uint64_t v10 = *(void *)(v2 + 48);
  xpc_object_t v9 = *(std::__shared_weak_count **)(v2 + 56);
  uint64_t v42 = v3;
  uint64_t v43 = v10;
  uint64_t v44 = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  xpc_object_t v11 = *(void **)(v2 + 32);
  if (v11) {
    xpc_object_t v11 = _Block_copy(v11);
  }
  uint64_t v45 = v11;
  if ((v48[23] & 0x80000000) != 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v48, *(std::string::size_type *)&v48[8]);
  }
  else {
    std::string __p = *(std::string *)v48;
  }
  CFNumberRef v12 = *(void **)&v48[24];
  if (*(void *)&v48[24]) {
    CFNumberRef v12 = _Block_copy(*(const void **)&v48[24]);
  }
  xpc_object_t v47 = v12;
  uint64_t v13 = _Block_copy(buf);
  uint64_t v14 = *(NSObject **)(v3 + 136);
  if (v14) {
    dispatch_retain(v14);
  }
  xpc_object_t v15 = xpc_dictionary_create(0, 0, 0);
  if (v15 || (xpc_object_t v15 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C8792D30](v15) == MEMORY[0x1E4F14590])
    {
      xpc_retain(v15);
      xpc_object_t v16 = v15;
    }
    else
    {
      xpc_object_t v16 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v16 = xpc_null_create();
    xpc_object_t v15 = 0;
  }
  xpc_release(v15);
  if (*(char *)(v2 + 31) < 0) {
    size_t v5 = *(const char **)v5;
  }
  xpc_object_t v17 = xpc_string_create(v5);
  if (!v17) {
    xpc_object_t v17 = xpc_null_create();
  }
  xpc_dictionary_set_value(v16, (const char *)*MEMORY[0x1E4F47178], v17);
  xpc_object_t v18 = xpc_null_create();
  xpc_release(v17);
  xpc_release(v18);
  CFTypeRef v19 = (const char *)(v2 + 64);
  if (*(char *)(v2 + 87) < 0) {
    CFTypeRef v19 = *(const char **)v19;
  }
  xpc_object_t v20 = xpc_string_create(v19);
  if (!v20) {
    xpc_object_t v20 = xpc_null_create();
  }
  xpc_dictionary_set_value(v16, (const char *)*MEMORY[0x1E4F47190], v20);
  xpc_object_t v21 = xpc_null_create();
  xpc_release(v20);
  xpc_release(v21);
  xpc_object_t v22 = xpc_int64_create(*(int *)(v2 + 40));
  if (!v22) {
    xpc_object_t v22 = xpc_null_create();
  }
  xpc_dictionary_set_value(v16, (const char *)*MEMORY[0x1E4F47258], v22);
  xpc_object_t v23 = xpc_null_create();
  xpc_release(v22);
  xpc_release(v23);
  xpc_object_t v24 = xpc_BOOL_create(*(unsigned char *)(v2 + 88));
  if (!v24) {
    xpc_object_t v24 = xpc_null_create();
  }
  xpc_dictionary_set_value(v16, (const char *)*MEMORY[0x1E4F47108], v24);
  xpc_object_t v25 = xpc_null_create();
  xpc_release(v24);
  xpc_release(v25);
  unint64_t v36 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v37 = 0xAAAAAAAAAAAAAAAALL;
  GetABMLogServer(&v34);
  abm::HelperClient::create();
  unint64_t v26 = v35;
  if (v35 && !atomic_fetch_add(&v35->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
    std::__shared_weak_count::__release_weak(v26);
    xpc_object_t v33 = v16;
    if (v16)
    {
LABEL_42:
      xpc_retain(v16);
      if (v13) {
        goto LABEL_43;
      }
      goto LABEL_75;
    }
  }
  else
  {
    xpc_object_t v33 = v16;
    if (v16) {
      goto LABEL_42;
    }
  }
  xpc_object_t v33 = xpc_null_create();
  if (v13)
  {
LABEL_43:
    aBlocuint64_t k = _Block_copy(v13);
    dispatch_object_t object = v14;
    if (!v14) {
      goto LABEL_45;
    }
    goto LABEL_44;
  }
LABEL_75:
  aBlocuint64_t k = 0;
  dispatch_object_t object = v14;
  if (v14) {
LABEL_44:
  }
    dispatch_retain(v14);
LABEL_45:
  abm::HelperClient::perform();
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  xpc_release(v33);
  xpc_object_t v33 = 0;
  uint64_t v27 = (std::__shared_weak_count *)v37;
  if (v37 && !atomic_fetch_add((atomic_ullong *volatile)(v37 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
    std::__shared_weak_count::__release_weak(v27);
  }
  xpc_release(v16);
  if (v14) {
    dispatch_release(v14);
  }
  if (v13) {
    _Block_release(v13);
  }
  if (v47) {
    _Block_release(v47);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    uint64_t v28 = v45;
    if (!v45) {
      goto LABEL_63;
    }
    goto LABEL_62;
  }
  uint64_t v28 = v45;
  if (v45) {
LABEL_62:
  }
    _Block_release(v28);
LABEL_63:
  if (v44) {
    std::__shared_weak_count::__release_weak(v44);
  }
LABEL_65:
  if (*(void *)&v48[24]) {
    _Block_release(*(const void **)&v48[24]);
  }
  if ((v48[23] & 0x80000000) != 0) {
    operator delete(*(void **)v48);
  }
  _ZNSt3__110unique_ptrIZZN12TraceManager24collectBasebandLogs_syncEN3xpc4dictEN8dispatch5blockIU13block_pointerFviS3_EEEEUb1_E3__2NS_14default_deleteIS9_EEED1B8ne180100Ev(&v30);
  xpc_object_t v29 = (std::__shared_weak_count *)a1[2];
  if (v29 && !atomic_fetch_add(&v29->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
    std::__shared_weak_count::__release_weak(v29);
  }
  operator delete(a1);
}

void sub_1C5933D30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, dispatch_object_t object, xpc_object_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,std::__shared_weak_count *a23,void *aBlock,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31)
{
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (a23) {
    std::__shared_weak_count::__release_weak(a23);
  }
  uint64_t v34 = *(const void **)(v32 - 72);
  if (v34) {
    _Block_release(v34);
  }
  if (*(char *)(v32 - 73) < 0) {
    operator delete(*(void **)(v32 - 96));
  }
  _ZNSt3__110unique_ptrIZZN12TraceManager24collectBasebandLogs_syncEN3xpc4dictEN8dispatch5blockIU13block_pointerFviS3_EEEEUb1_E3__2NS_14default_deleteIS9_EEED1B8ne180100Ev(&a9);
  uint64_t v35 = (std::__shared_weak_count *)v31[2];
  if (v35)
  {
    if (!atomic_fetch_add(&v35->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  operator delete(v31);
  _Unwind_Resume(a1);
}

uint64_t *_ZNSt3__110unique_ptrIZZN12TraceManager24collectBasebandLogs_syncEN3xpc4dictEN8dispatch5blockIU13block_pointerFviS3_EEEEUb1_E3__2NS_14default_deleteIS9_EEED1B8ne180100Ev(uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*(char *)(v2 + 87) < 0) {
      operator delete(*(void **)(v2 + 64));
    }
    uint64_t v3 = *(std::__shared_weak_count **)(v2 + 56);
    if (v3) {
      std::__shared_weak_count::__release_weak(v3);
    }
    uint64_t v4 = *(const void **)(v2 + 32);
    if (v4) {
      _Block_release(v4);
    }
    if (*(char *)(v2 + 31) < 0) {
      operator delete(*(void **)(v2 + 8));
    }
    operator delete((void *)v2);
  }
  return a1;
}

void _ZZZZN12TraceManager24collectBasebandLogs_syncEN3xpc4dictEN8dispatch5blockIU13block_pointerFviS1_EEEEUb1_ENK3__2clEvENKUlvE_clEv(uint64_t a1)
{
  xpc_object_t v2 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v3 = v2;
  if (v2)
  {
    xpc_object_t xdict = v2;
  }
  else
  {
    xpc_object_t v3 = xpc_null_create();
    xpc_object_t xdict = v3;
    if (!v3)
    {
      xpc_object_t v4 = xpc_null_create();
      xpc_object_t v3 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1C8792D30](v3) == MEMORY[0x1E4F14590])
  {
    xpc_retain(v3);
    goto LABEL_9;
  }
  xpc_object_t v4 = xpc_null_create();
LABEL_8:
  xpc_object_t xdict = v4;
LABEL_9:
  xpc_release(v3);
  xpc_object_t v5 = xpc_string_create((const char *)*MEMORY[0x1E4F4F928]);
  if (!v5) {
    xpc_object_t v5 = xpc_null_create();
  }
  xpc_dictionary_set_value(xdict, (const char *)*MEMORY[0x1E4F4C7F8], v5);
  xpc_object_t v6 = xpc_null_create();
  xpc_release(v5);
  xpc_release(v6);
  long long v7 = (const char *)a1;
  if (*(char *)(a1 + 23) < 0) {
    long long v7 = *(const char **)a1;
  }
  xpc_object_t v8 = xpc_string_create(v7);
  if (!v8) {
    xpc_object_t v8 = xpc_null_create();
  }
  xpc_dictionary_set_value(xdict, (const char *)*MEMORY[0x1E4F4C4C8], v8);
  xpc_object_t v9 = xpc_null_create();
  xpc_release(v8);
  xpc_release(v9);
  unsigned int v10 = 0;
  dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>((uint64_t *)(a1 + 24), &v10, &xdict);
  xpc_release(xdict);
}

void sub_1C5934144(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
}

void ___ZZZN12TraceManager24collectBasebandLogs_syncEN3xpc4dictEN8dispatch5blockIU13block_pointerFviS1_EEEEUb1_ENK3__2clEv_block_invoke(void *a1, unsigned int *a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a1[4];
  uint64_t v15 = 0;
  xpc_object_t v16 = 0;
  xpc_object_t v4 = (std::__shared_weak_count *)a1[6];
  if (!v4)
  {
    xpc_object_t v6 = 0;
    goto LABEL_12;
  }
  xpc_object_t v6 = std::__shared_weak_count::lock(v4);
  xpc_object_t v16 = v6;
  if (!v6 || (uint64_t v15 = a1[5]) == 0)
  {
LABEL_12:
    xpc_object_t v10 = xpc_null_create();
    uint64_t v11 = a1[7];
    __p[0] = v10;
    xpc_object_t v12 = xpc_null_create();
    (*(void (**)(uint64_t, uint64_t, void **))(v11 + 16))(v11, 3760250880, __p);
    xpc_release(__p[0]);
    xpc_release(v12);
    if (!v6) {
      return;
    }
    goto LABEL_17;
  }
  uint64_t v7 = *a2;
  xpc_object_t v8 = *(NSObject **)(v3 + 88);
  if (v7)
  {
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      TelephonyXPC::Result::toString(v7, (uint64_t)__p);
      if (v14 >= 0) {
        xpc_object_t v9 = __p;
      }
      else {
        xpc_object_t v9 = (void **)__p[0];
      }
      *(_DWORD *)std::string buf = 136315138;
      xpc_object_t v18 = v9;
      _os_log_error_impl(&dword_1C5767000, v8, OS_LOG_TYPE_ERROR, "Failed to archive logs. Result: %s", buf, 0xCu);
      if (v14 < 0) {
        operator delete(__p[0]);
      }
    }
  }
  else if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
  {
    LOWORD(__p[0]) = 0;
    _os_log_debug_impl(&dword_1C5767000, v8, OS_LOG_TYPE_DEBUG, "#D Compression is done.", (uint8_t *)__p, 2u);
  }
  _ZZZZN12TraceManager24collectBasebandLogs_syncEN3xpc4dictEN8dispatch5blockIU13block_pointerFviS1_EEEEUb1_ENK3__2clEvENKUlvE_clEv((uint64_t)(a1 + 8));
LABEL_17:
  if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
}

void sub_1C5934374(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
}

void sub_1C59343B8(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void *__copy_helper_block_e8_40c37_ZTSNSt3__18weak_ptrI12TraceManagerEE56c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE64c124_ZTSZZZN12TraceManager24collectBasebandLogs_syncEN3xpc4dictEN8dispatch5blockIU13block_pointerFviS1_EEEEUb1_ENK3__2clEvEUlvE_(void *a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 48);
  a1[5] = *(void *)(a2 + 40);
  a1[6] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 16), 1uLL, memory_order_relaxed);
  }
  xpc_object_t v5 = *(void **)(a2 + 56);
  if (v5) {
    xpc_object_t v5 = _Block_copy(v5);
  }
  a1[7] = v5;
  xpc_object_t v6 = (std::string *)(a1 + 8);
  if (*(char *)(a2 + 87) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)(a2 + 64), *(void *)(a2 + 72));
  }
  else
  {
    long long v7 = *(_OWORD *)(a2 + 64);
    a1[10] = *(void *)(a2 + 80);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  CFTypeRef result = *(void **)(a2 + 88);
  if (result) {
    CFTypeRef result = _Block_copy(result);
  }
  a1[11] = result;
  return result;
}

void sub_1C5934458(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(const void **)(v1 + 56);
  if (v3) {
    _Block_release(v3);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(v1 + 48);
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_40c37_ZTSNSt3__18weak_ptrI12TraceManagerEE56c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE64c124_ZTSZZZN12TraceManager24collectBasebandLogs_syncEN3xpc4dictEN8dispatch5blockIU13block_pointerFviS1_EEEEUb1_ENK3__2clEvEUlvE_(uint64_t a1)
{
  xpc_object_t v2 = *(const void **)(a1 + 88);
  if (v2) {
    _Block_release(v2);
  }
  if (*(char *)(a1 + 87) < 0)
  {
    operator delete(*(void **)(a1 + 64));
    uint64_t v3 = *(const void **)(a1 + 56);
    if (!v3) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  uint64_t v3 = *(const void **)(a1 + 56);
  if (v3) {
LABEL_7:
  }
    _Block_release(v3);
LABEL_8:
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 48);
  if (v4)
  {
    std::__shared_weak_count::__release_weak(v4);
  }
}

void dispatch::async<void ctu::SharedSynchronizable<TraceManager>::execute_wrapped<TraceManager::start(dispatch::group_session)::$_0>(TraceManager::start(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<TraceManager::start(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<TraceManager::start(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke(dispatch_group_t **__p)
{
  xpc_object_t v2 = *__p;
  if (*__p)
  {
    if (*v2)
    {
      dispatch_group_leave(*v2);
      if (*v2) {
        dispatch_release(*v2);
      }
    }
    operator delete(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)__p[2];
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    uint64_t v4 = __p;
  }
  else
  {
    uint64_t v4 = __p;
  }
  operator delete(v4);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI12TraceManagerE15execute_wrappedIZZZNS3_25finishInitialization_syncEvEUb2_EUb3_E3__4EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS7_NSC_14default_deleteIS7_EEEEENUlPvE_8__invokeESH_(void *a1)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  xpc_object_t v2 = (_DWORD *)*a1;
  xpc_object_t v6 = v2;
  if (v2[6])
  {
    uint64_t v3 = *(NSObject **)(*(void *)v2 + 88);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      xpc::object::to_string((uint64_t *)__p, (xpc::object *)(v2 + 8));
      xpc_object_t v5 = v8 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)std::string buf = 136315138;
      xpc_object_t v10 = v5;
      _os_log_error_impl(&dword_1C5767000, v3, OS_LOG_TYPE_ERROR, "Dump state failed: %s", buf, 0xCu);
      if (v8 < 0) {
        operator delete(__p[0]);
      }
    }
  }
  _ZNSt3__110unique_ptrIZZZN12TraceManager25finishInitialization_syncEvEUb2_EUb3_E3__4NS_14default_deleteIS2_EEED1B8ne180100Ev((uint64_t *)&v6);
  uint64_t v4 = (std::__shared_weak_count *)a1[2];
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  operator delete(a1);
}

void sub_1C5934710(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _ZNSt3__110unique_ptrIZZZN12TraceManager25finishInitialization_syncEvEUb2_EUb3_E3__4NS_14default_deleteIS2_EEED1B8ne180100Ev(&a9);
  uint64_t v11 = (std::__shared_weak_count *)v9[2];
  if (v11)
  {
    if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  operator delete(v9);
  _Unwind_Resume(a1);
}

uint64_t *_ZNSt3__110unique_ptrIZZZN12TraceManager25finishInitialization_syncEvEUb2_EUb3_E3__4NS_14default_deleteIS2_EEED1B8ne180100Ev(uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    uint64_t v3 = *(std::__shared_weak_count **)(v2 + 48);
    if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
    xpc_release(*(xpc_object_t *)(v2 + 32));
    *(void *)(v2 + 32) = 0;
    uint64_t v4 = *(std::__shared_weak_count **)(v2 + 16);
    if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    operator delete((void *)v2);
  }
  return a1;
}

void dispatch::async<void ctu::SharedSynchronizable<TraceManager>::execute_wrapped<TraceManager::sleep(dispatch::group_session)::$_0>(TraceManager::sleep(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<TraceManager::sleep(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<TraceManager::sleep(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = **a1;
  uint64_t v4 = *(NSObject **)(v3 + 88);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(__p.__r_.__value_.__l.__data_) = 0;
    _os_log_impl(&dword_1C5767000, v4, OS_LOG_TYPE_DEFAULT, "#I Helper sleep requested", (uint8_t *)&__p, 2u);
  }
  xpc_object_t v5 = (const void *)*MEMORY[0x1E4F4C198];
  size_t v6 = strlen((const char *)*MEMORY[0x1E4F4C198]);
  if (v6 > 0x7FFFFFFFFFFFFFF7) {
LABEL_69:
  }
    std::string::__throw_length_error[abi:ne180100]();
  size_t v7 = v6;
  if (v6 >= 0x17)
  {
    uint64_t v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17) {
      uint64_t v9 = v6 | 7;
    }
    uint64_t v10 = v9 + 1;
    p_dst = (void **)operator new(v9 + 1);
    size_t v39 = v7;
    unint64_t v40 = v10 | 0x8000000000000000;
    std::string __dst = p_dst;
    goto LABEL_10;
  }
  HIBYTE(v40) = v6;
  p_dst = (void **)&__dst;
  if (v6) {
LABEL_10:
  }
    memmove(p_dst, v5, v7);
  *((unsigned char *)p_dst + v7) = 0;
  memset(&__p, 0, sizeof(__p));
  int v11 = -1431655766;
  int v12 = -1431655766;
  if (prop::bbtrace::get((char *)&__dst, (uint64_t)&__p))
  {
    LODWORD(object) = -1431655766;
    if (util::convert<int>(&__p, &object, 0)) {
      int v12 = (int)object;
    }
    else {
      int v12 = -1431655766;
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v40) & 0x80000000) == 0) {
      goto LABEL_17;
    }
  }
  else if ((SHIBYTE(v40) & 0x80000000) == 0)
  {
    goto LABEL_17;
  }
  operator delete(__dst);
LABEL_17:
  uint64_t v13 = (const void *)*MEMORY[0x1E4F4C428];
  size_t v14 = strlen((const char *)*MEMORY[0x1E4F4C428]);
  if (v14 > 0x7FFFFFFFFFFFFFF7) {
    goto LABEL_69;
  }
  size_t v15 = v14;
  if (v14 >= 0x17)
  {
    uint64_t v17 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v14 | 7) != 0x17) {
      uint64_t v17 = v14 | 7;
    }
    uint64_t v18 = v17 + 1;
    xpc_object_t v16 = (void **)operator new(v17 + 1);
    size_t v39 = v15;
    unint64_t v40 = v18 | 0x8000000000000000;
    std::string __dst = v16;
    goto LABEL_24;
  }
  HIBYTE(v40) = v14;
  xpc_object_t v16 = (void **)&__dst;
  if (v14) {
LABEL_24:
  }
    memmove(v16, v13, v15);
  *((unsigned char *)v16 + v15) = 0;
  memset(&__p, 0, sizeof(__p));
  if (prop::bbtrace::get((char *)&__dst, (uint64_t)&__p))
  {
    LODWORD(object) = -1431655766;
    if (util::convert<int>(&__p, &object, 0)) {
      int v11 = (int)object;
    }
    else {
      int v11 = -1431655766;
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v40) & 0x80000000) == 0)
    {
LABEL_31:
      if (v12 != 4) {
        goto LABEL_42;
      }
      goto LABEL_37;
    }
  }
  else if ((SHIBYTE(v40) & 0x80000000) == 0)
  {
    goto LABEL_31;
  }
  operator delete(__dst);
  if (v12 != 4)
  {
LABEL_42:
    xpc_object_t v23 = (void **)xpc_null_create();
    uint64_t v24 = *MEMORY[0x1E4F47200];
    xpc_object_t v25 = v2[1];
    xpc_object_t object = v25;
    std::string __dst = v23;
    if (v25)
    {
      dispatch_retain(v25);
      dispatch_group_enter(v25);
    }
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
    TraceManager::runOnHelper_sync((void *)v3, (const char *)9, v24, 0x61A8u, 0, (xpc_object_t *)&__dst, (NSObject **)&object, (void **)&__p.__r_.__value_.__l.__data_);
    if (v25)
    {
      dispatch_group_leave(v25);
      dispatch_release(v25);
    }
    xpc_release(__dst);
    goto LABEL_62;
  }
LABEL_37:
  if (v11 != 1) {
    goto LABEL_42;
  }
  uint64_t v19 = *(NSObject **)(v3 + 88);
  if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(__p.__r_.__value_.__l.__data_) = 0;
    _os_log_impl(&dword_1C5767000, v19, OS_LOG_TYPE_DEFAULT, "#I Cellular Logging should be paused and the other traces will hanlde enter low power.", (uint8_t *)&__p, 2u);
  }
  xpc_object_t v20 = xpc_null_create();
  xpc_object_t v21 = v2[1];
  unint64_t v36 = v21;
  xpc_object_t object = v20;
  if (v21)
  {
    dispatch_retain(v21);
    dispatch_group_enter(v21);
    xpc_object_t v22 = v2[1];
  }
  else
  {
    xpc_object_t v22 = 0;
  }
  __p.__r_.__value_.__r.__words[0] = MEMORY[0x1E4F143A8];
  __p.__r_.__value_.__l.__size_ = 1174405120;
  __p.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZZN12TraceManager5sleepEN8dispatch13group_sessionEENK3__0clEv_block_invoke;
  xpc_object_t v33 = &__block_descriptor_tmp_179_0;
  uint64_t v34 = v3;
  dispatch_group_t group = v22;
  if (v22)
  {
    dispatch_retain(v22);
    if (group) {
      dispatch_group_enter(group);
    }
  }
  unint64_t v26 = (void **)_Block_copy(&__p);
  uint64_t v27 = *MEMORY[0x1E4F47228];
  uint64_t v28 = *(NSObject **)(v3 + 136);
  if (v28) {
    dispatch_retain(*(dispatch_object_t *)(v3 + 136));
  }
  std::string __dst = v26;
  size_t v39 = (size_t)v28;
  TraceManager::runOnHelper_sync((void *)v3, (const char *)0xA, v27, 0x1388u, 1, &object, &v36, (void **)&__dst);
  if (v28) {
    dispatch_release(v28);
  }
  if (v26) {
    _Block_release(v26);
  }
  if (v21)
  {
    dispatch_group_leave(v21);
    dispatch_release(v21);
  }
  xpc_release(object);
  if (group)
  {
    dispatch_group_leave(group);
    if (group) {
      dispatch_release(group);
    }
  }
LABEL_62:
  xpc_object_t v29 = v2[1];
  if (v29)
  {
    dispatch_group_leave(v29);
    uint64_t v30 = v2[1];
    if (v30) {
      dispatch_release(v30);
    }
  }
  operator delete(v2);
  xpc_object_t v31 = (std::__shared_weak_count *)a1[2];
  if (v31 && !atomic_fetch_add(&v31->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
    std::__shared_weak_count::__release_weak(v31);
  }
  operator delete(a1);
}

void sub_1C5934D20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, dispatch_group_t group, uint64_t a18, uint64_t a19, xpc_object_t object,xpc_object_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (v30) {
    dispatch_release(v30);
  }
  if (v29) {
    _Block_release(v29);
  }
  if (group)
  {
    dispatch_group_leave(group);
    dispatch_release(group);
  }
  if (v28)
  {
    dispatch_group_leave(v28);
    dispatch_release(v28);
  }
  xpc_release(object);
  uint64_t v32 = v27[1];
  if (v32)
  {
    dispatch_group_leave(v32);
    xpc_object_t v33 = v27[1];
    if (v33) {
      dispatch_release(v33);
    }
  }
  operator delete(v27);
  uint64_t v34 = (std::__shared_weak_count *)v26[2];
  if (v34)
  {
    if (!atomic_fetch_add(&v34->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  operator delete(v26);
  _Unwind_Resume(a1);
}

void ___ZZN12TraceManager5sleepEN8dispatch13group_sessionEENK3__0clEv_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  xpc_object_t v3 = xpc_null_create();
  uint64_t v4 = *MEMORY[0x1E4F47200];
  xpc_object_t v5 = *(NSObject **)(a1 + 40);
  size_t v7 = v5;
  xpc_object_t object = v3;
  if (v5)
  {
    dispatch_retain(v5);
    dispatch_group_enter(v5);
  }
  v6[0] = 0;
  v6[1] = 0;
  TraceManager::runOnHelper_sync(v2, (const char *)9, v4, 0x61A8u, 0, &object, &v7, v6);
  if (v5)
  {
    dispatch_group_leave(v5);
    dispatch_release(v5);
  }
  xpc_release(object);
}

void sub_1C5934F04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, xpc_object_t object)
{
  dispatch::callback<void({block_pointer})(TelephonyXPC::Result,xpc::dict)>::~callback((uint64_t)&a9);
  if (v12)
  {
    dispatch_group_leave(v12);
    dispatch_release(v12);
  }
  xpc_release(object);
  _Unwind_Resume(a1);
}

void dispatch::async<void ctu::SharedSynchronizable<TraceManager>::execute_wrapped<TraceManager::wake(dispatch::group_session)::$_0>(TraceManager::wake(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<TraceManager::wake(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<TraceManager::wake(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = **a1;
  uint64_t v4 = *(NSObject **)(v3 + 88);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(__p.__r_.__value_.__l.__data_) = 0;
    _os_log_impl(&dword_1C5767000, v4, OS_LOG_TYPE_DEFAULT, "#I Helper wake requested", (uint8_t *)&__p, 2u);
  }
  xpc_object_t v5 = (const void *)*MEMORY[0x1E4F4C198];
  size_t v6 = strlen((const char *)*MEMORY[0x1E4F4C198]);
  if (v6 > 0x7FFFFFFFFFFFFFF7) {
LABEL_60:
  }
    std::string::__throw_length_error[abi:ne180100]();
  size_t v7 = v6;
  if (v6 >= 0x17)
  {
    uint64_t v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17) {
      uint64_t v9 = v6 | 7;
    }
    uint64_t v10 = v9 + 1;
    p_dst = (void **)operator new(v9 + 1);
    size_t v38 = v7;
    unint64_t v39 = v10 | 0x8000000000000000;
    std::string __dst = p_dst;
    goto LABEL_10;
  }
  HIBYTE(v39) = v6;
  p_dst = (void **)&__dst;
  if (v6) {
LABEL_10:
  }
    memmove(p_dst, v5, v7);
  *((unsigned char *)p_dst + v7) = 0;
  memset(&__p, 0, sizeof(__p));
  int v11 = -1431655766;
  int v12 = -1431655766;
  if (prop::bbtrace::get((char *)&__dst, (uint64_t)&__p))
  {
    LODWORD(object) = -1431655766;
    if (util::convert<int>(&__p, &object, 0)) {
      int v12 = (int)object;
    }
    else {
      int v12 = -1431655766;
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v39) & 0x80000000) == 0) {
      goto LABEL_17;
    }
  }
  else if ((SHIBYTE(v39) & 0x80000000) == 0)
  {
    goto LABEL_17;
  }
  operator delete(__dst);
LABEL_17:
  uint64_t v13 = (const void *)*MEMORY[0x1E4F4C428];
  size_t v14 = strlen((const char *)*MEMORY[0x1E4F4C428]);
  if (v14 > 0x7FFFFFFFFFFFFFF7) {
    goto LABEL_60;
  }
  size_t v15 = v14;
  if (v14 >= 0x17)
  {
    uint64_t v17 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v14 | 7) != 0x17) {
      uint64_t v17 = v14 | 7;
    }
    uint64_t v18 = v17 + 1;
    xpc_object_t v16 = (void **)operator new(v17 + 1);
    size_t v38 = v15;
    unint64_t v39 = v18 | 0x8000000000000000;
    std::string __dst = v16;
    goto LABEL_24;
  }
  HIBYTE(v39) = v14;
  xpc_object_t v16 = (void **)&__dst;
  if (v14) {
LABEL_24:
  }
    memmove(v16, v13, v15);
  *((unsigned char *)v16 + v15) = 0;
  memset(&__p, 0, sizeof(__p));
  if (prop::bbtrace::get((char *)&__dst, (uint64_t)&__p))
  {
    LODWORD(object) = -1431655766;
    if (util::convert<int>(&__p, &object, 0)) {
      int v11 = (int)object;
    }
    else {
      int v11 = -1431655766;
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v39) & 0x80000000) == 0)
    {
LABEL_31:
      uint64_t v19 = (uint64_t *)MEMORY[0x1E4F471E0];
      if (v12 != 4) {
        goto LABEL_52;
      }
      goto LABEL_37;
    }
  }
  else if ((SHIBYTE(v39) & 0x80000000) == 0)
  {
    goto LABEL_31;
  }
  operator delete(__dst);
  uint64_t v19 = (uint64_t *)MEMORY[0x1E4F471E0];
  if (v12 != 4)
  {
LABEL_52:
    unint64_t v26 = (void **)xpc_null_create();
    uint64_t v27 = *v19;
    xpc_object_t object = 0;
    std::string __dst = v26;
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
    TraceManager::runOnHelper_sync((void *)v3, (const char *)9, v27, 0x1388u, 0, (xpc_object_t *)&__dst, (NSObject **)&object, (void **)&__p.__r_.__value_.__l.__data_);
    xpc_release(__dst);
    goto LABEL_53;
  }
LABEL_37:
  if (v11 != 1) {
    goto LABEL_52;
  }
  xpc_object_t v20 = *(NSObject **)(v3 + 88);
  if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(__p.__r_.__value_.__l.__data_) = 0;
    _os_log_impl(&dword_1C5767000, v20, OS_LOG_TYPE_DEFAULT, "#I The other traces will handle exit low power first, then the Cellular Logging should be resumed.", (uint8_t *)&__p, 2u);
  }
  xpc_object_t v21 = xpc_null_create();
  uint64_t v35 = 0;
  xpc_object_t object = v21;
  __p.__r_.__value_.__r.__words[0] = MEMORY[0x1E4F143A8];
  __p.__r_.__value_.__l.__size_ = 1174405120;
  __p.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZZN12TraceManager4wakeEN8dispatch13group_sessionEENK3__0clEv_block_invoke;
  uint64_t v32 = &__block_descriptor_tmp_182;
  uint64_t v33 = v3;
  xpc_object_t v22 = v2[1];
  dispatch_group_t group = v22;
  if (v22)
  {
    dispatch_retain(v22);
    if (group) {
      dispatch_group_enter(group);
    }
  }
  xpc_object_t v23 = (void **)_Block_copy(&__p);
  uint64_t v24 = *v19;
  xpc_object_t v25 = *(NSObject **)(v3 + 136);
  if (v25) {
    dispatch_retain(*(dispatch_object_t *)(v3 + 136));
  }
  std::string __dst = v23;
  size_t v38 = (size_t)v25;
  TraceManager::runOnHelper_sync((void *)v3, (const char *)9, v24, 0x1388u, 0, &object, &v35, (void **)&__dst);
  if (v25) {
    dispatch_release(v25);
  }
  if (v23) {
    _Block_release(v23);
  }
  xpc_release(object);
  if (group)
  {
    dispatch_group_leave(group);
    if (group) {
      dispatch_release(group);
    }
  }
LABEL_53:
  uint64_t v28 = v2[1];
  if (v28)
  {
    dispatch_group_leave(v28);
    xpc_object_t v29 = v2[1];
    if (v29) {
      dispatch_release(v29);
    }
  }
  operator delete(v2);
  uint64_t v30 = (std::__shared_weak_count *)a1[2];
  if (v30 && !atomic_fetch_add(&v30->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
    std::__shared_weak_count::__release_weak(v30);
  }
  operator delete(a1);
}

void sub_1C59353A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, dispatch_group_t group, uint64_t a18, uint64_t a19, xpc_object_t object,xpc_object_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (v29) {
    dispatch_release(v29);
  }
  if (v28) {
    _Block_release(v28);
  }
  if (group)
  {
    dispatch_group_leave(group);
    dispatch_release(group);
  }
  xpc_release(object);
  xpc_object_t v31 = v27[1];
  if (v31)
  {
    dispatch_group_leave(v31);
    uint64_t v32 = v27[1];
    if (v32) {
      dispatch_release(v32);
    }
  }
  operator delete(v27);
  uint64_t v33 = (std::__shared_weak_count *)v26[2];
  if (v33)
  {
    if (!atomic_fetch_add(&v33->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  operator delete(v26);
  _Unwind_Resume(a1);
}

void ___ZZN12TraceManager4wakeEN8dispatch13group_sessionEENK3__0clEv_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  xpc_object_t v2 = xpc_null_create();
  uint64_t v3 = *MEMORY[0x1E4F47238];
  xpc_object_t v5 = 0;
  xpc_object_t object = v2;
  v4[0] = 0;
  v4[1] = 0;
  TraceManager::runOnHelper_sync(v1, (const char *)0xA, v3, 0x1388u, 1, &object, &v5, v4);
  xpc_release(object);
}

void sub_1C5935528(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, xpc_object_t object)
{
}

uint64_t __cxx_global_var_init_102()
{
  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<CommandDriverFactory>::~PthreadMutexGuardPolicy, &ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance, &dword_1C5767000);
  }
  return result;
}

void TransportModule::create(uint64_t *a1@<X0>, uint64_t *a2@<X1>, void *a3@<X8>)
{
  *a3 = 0xAAAAAAAAAAAAAAAALL;
  a3[1] = 0xAAAAAAAAAAAAAAAALL;
  size_t v6 = operator new(0xE8uLL);
  size_t v7 = v6;
  uint64_t v8 = *a1;
  uint64_t v9 = (std::__shared_weak_count *)a1[1];
  uint64_t v27 = v8;
  uint64_t v28 = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v10 = *a2;
  int v11 = (std::__shared_weak_count *)a2[1];
  v26[0] = v10;
  v26[1] = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  TransportModule::TransportModule((uint64_t)v6, &v27, v26);
  *a3 = v7;
  a3[1] = 0xAAAAAAAAAAAAAAAALL;
  int v12 = (std::__shared_weak_count *)operator new(0x20uLL);
  v12->__shared_owners_ = 0;
  p_shared_owners = &v12->__shared_owners_;
  v12->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20FE2C0;
  v12->__shared_weak_owners_ = 0;
  v12[1].__vftable = (std::__shared_weak_count_vtbl *)v7;
  a3[1] = v12;
  size_t v14 = (std::__shared_weak_count *)*((void *)v7 + 16);
  if (!v14)
  {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v12->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    *((void *)v7 + 15) = v7;
    *((void *)v7 + 16) = v12;
    if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_8;
    }
LABEL_11:
    size_t v15 = (void *)*a3;
    if (!*(void *)(*a3 + 104)) {
      goto LABEL_22;
    }
    goto LABEL_12;
  }
  if (v14->__shared_owners_ != -1) {
    goto LABEL_11;
  }
  atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  atomic_fetch_add_explicit(&v12->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  *((void *)v7 + 15) = v7;
  *((void *)v7 + 16) = v12;
  std::__shared_weak_count::__release_weak(v14);
  if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_11;
  }
LABEL_8:
  ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
  std::__shared_weak_count::__release_weak(v12);
  size_t v15 = (void *)*a3;
  if (!*(void *)(*a3 + 104)) {
    goto LABEL_22;
  }
LABEL_12:
  xpc_object_t v16 = (std::__shared_weak_count *)v15[16];
  if (!v16 || (v17 = v15[15], (uint64_t v18 = std::__shared_weak_count::lock(v16)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v19 = v18;
  blocuint64_t k = v17;
  uint64_t v36 = (uint64_t)v18;
  ctu::LoggerCommonBase::getLogDomain((ctu::LoggerCommonBase *)(v15 + 7));
  uint64_t v20 = v17 + 48;
  if (!v17) {
    uint64_t v20 = 0;
  }
  uint64_t v29 = v20;
  uint64_t v30 = (uint64_t)v19;
  blocuint64_t k = 0;
  uint64_t v36 = 0;
  ctu::TrackedLogger::registerLoggerToServer();
  xpc_object_t v21 = (std::__shared_weak_count *)v30;
  if (v30 && !atomic_fetch_add((atomic_ullong *volatile)(v30 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v21);
  }
  xpc_object_t v22 = (std::__shared_weak_count *)v36;
  if (v36 && !atomic_fetch_add((atomic_ullong *volatile)(v36 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
  }
LABEL_22:
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  if (v28) {
    std::__shared_weak_count::__release_weak(v28);
  }
  uint64_t v23 = *a3;
  uint64_t v24 = *a3 + 120;
  uint64_t v29 = MEMORY[0x1E4F143A8];
  uint64_t v30 = 0x40000000;
  xpc_object_t v31 = ___ZN15TransportModule4initEv_block_invoke;
  uint64_t v32 = &__block_descriptor_tmp_19;
  uint64_t v33 = v23;
  uint64_t v34 = &v29;
  blocuint64_t k = MEMORY[0x1E4F143A8];
  uint64_t v36 = 0x40000000;
  unint64_t v37 = ___ZNK3ctu20SharedSynchronizableI15TransportModuleE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  size_t v38 = &__block_descriptor_tmp_89;
  uint64_t v39 = v24;
  unint64_t v40 = &v34;
  xpc_object_t v25 = *(NSObject **)(v23 + 136);
  if (*(void *)(v23 + 144)) {
    dispatch_async_and_wait(v25, &block);
  }
  else {
    dispatch_sync(v25, &block);
  }
}

void sub_1C59358F4()
{
}

void sub_1C5935940()
{
}

void sub_1C5935950()
{
}

void TransportModule::init(TransportModule *this)
{
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 0x40000000;
  v3[2] = ___ZN15TransportModule4initEv_block_invoke;
  v3[3] = &__block_descriptor_tmp_19;
  v3[4] = this;
  uint64_t v4 = v3;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI15TransportModuleE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  block[3] = &__block_descriptor_tmp_89;
  block[4] = (char *)this + 120;
  block[5] = &v4;
  xpc_object_t v2 = (char *)this + 136;
  uint64_t v1 = *((void *)this + 17);
  if (*((void *)v2 + 1)) {
    dispatch_async_and_wait(v1, block);
  }
  else {
    dispatch_sync(v1, block);
  }
}

uint64_t TransportModule::TransportModule(uint64_t a1, uint64_t *a2, void *a3)
{
  uint64_t v5 = *a2;
  size_t v6 = (std::__shared_weak_count *)a2[1];
  if (v6)
  {
    atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  *(void *)a1 = &unk_1F20FC1C8;
  *(void *)(a1 + 8) = v5;
  *(void *)(a1 + 16) = v6;
  if (v6)
  {
    atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    *(void *)(a1 + 24) = 0;
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = 0;
    std::__shared_weak_count::__release_weak(v6);
    *(void *)a1 = &unk_1F20F0BE0;
    std::__shared_weak_count::__release_weak(v6);
  }
  else
  {
    *(void *)(a1 + 24) = 0;
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = 0;
    *(void *)a1 = &unk_1F20F0BE0;
  }
  *(void *)a1 = &unk_1F20FDEB0;
  *(void *)(a1 + 48) = &unk_1F20FDF20;
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v27, "com.apple.telephony.abm", "ipc.mod");
  GetABMLogServer(&v25);
  initially_inactive = dispatch_queue_attr_make_initially_inactive(0);
  uint64_t v8 = dispatch_queue_create_with_target_V2("ipc.mod", initially_inactive, 0);
  dispatch_set_qos_class_floor(v8, QOS_CLASS_DEFAULT, 0);
  dispatch_activate(v8);
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = v8;
  if (v8)
  {
    dispatch_retain(v8);
    *(void *)(a1 + 144) = 0;
    dispatch_release(v8);
  }
  else
  {
    *(void *)(a1 + 144) = 0;
  }
  *(void *)(a1 + 48) = &unk_1F20FE280;
  ctu::OsLogContext::OsLogContext();
  ctu::OsLogContext::OsLogContext();
  ctu::LoggerCommonBase::LoggerCommonBase();
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&v29);
  *(void *)(a1 + 56) = &unk_1F20F0070;
  uint64_t v9 = v26;
  *(void *)(a1 + 104) = v25;
  *(void *)(a1 + 112) = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&v28);
  *(void *)(a1 + 48) = &unk_1F20FE310;
  uint64_t v10 = v26;
  if (v26 && !atomic_fetch_add(&v26->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v27);
  *(void *)a1 = &unk_1F20FDEB0;
  *(void *)(a1 + 48) = &unk_1F20FDF20;
  *(_DWORD *)(a1 + 152) = 0;
  xpc_object_t v11 = xpc_null_create();
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(void *)(a1 + 216) = *a3;
  *(void *)(a1 + 160) = v11;
  uint64_t v12 = a3[1];
  *(void *)(a1 + 224) = v12;
  if (v12) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
  }
  xpc_object_t v13 = xpc_null_create();
  size_t v14 = v13;
  *(_DWORD *)(a1 + 152) = 1;
  if (v13)
  {
    xpc_retain(v13);
    xpc_object_t v15 = v14;
  }
  else
  {
    xpc_object_t v15 = xpc_null_create();
  }
  xpc_object_t v16 = *(void **)(a1 + 160);
  *(void *)(a1 + 160) = v15;
  xpc_release(v16);
  xpc_release(v14);
  GetABMLogServer(&v23);
  uint64_t v29 = v23;
  uint64_t v30 = v24;
  if (v24) {
    atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  data::TransportService::State::create((capabilities::abs *)&v29, (unint64_t *)&v28);
  uint64_t v17 = v30;
  if (v30 && !atomic_fetch_add(&v30->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  long long v18 = v28;
  long long v28 = 0uLL;
  uint64_t v19 = *(std::__shared_weak_count **)(a1 + 192);
  *(_OWORD *)(a1 + 184) = v18;
  if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
  uint64_t v20 = (std::__shared_weak_count *)*((void *)&v28 + 1);
  if (*((void *)&v28 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v28 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
  xpc_object_t v21 = v24;
  if (v24 && !atomic_fetch_add(&v24->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v21);
  }
  return a1;
}

void sub_1C5935F0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18)
{
  unint64_t v26 = a18;
  if (a18)
  {
    if (!atomic_fetch_add(&a18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v24);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v23);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v22);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v21);
  WakeReason::~WakeReason(v20);
  ctu::SharedLoggable<TransportModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(v19);
  Service::~Service(v18);
  _Unwind_Resume(a1);
}

void sub_1C5935FBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va3, a3);
  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v9 = va_arg(va2, void);
  uint64_t v11 = va_arg(va2, void);
  va_copy(va3, va2);
  uint64_t v12 = va_arg(va3, void);
  uint64_t v14 = va_arg(va3, void);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)va3);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)va2);
  ctu::SharedSynchronizable<DataStallDetection>::~SharedSynchronizable(v4);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)va1);
  Service::~Service(v3);
  _Unwind_Resume(a1);
}

void sub_1C5936000(_Unwind_Exception *a1)
{
  Service::~Service(v1);
  _Unwind_Resume(a1);
}

void WakeReason::~WakeReason(xpc_object_t *this)
{
  this[1] = 0;
}

void *ctu::SharedLoggable<TransportModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(void *a1)
{
  *a1 = &unk_1F20FE280;
  MEMORY[0x1C8790F40](a1 + 1);
  xpc_object_t v2 = a1[12];
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = a1[11];
  if (v3) {
    dispatch_release(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[10];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = &unk_1F20FE280;
  MEMORY[0x1C8790F40](a1 + 1);
  xpc_object_t v2 = a1[12];
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = a1[11];
  if (v3) {
    dispatch_release(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[10];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

void TransportModule::~TransportModule(TransportModule *this)
{
  *(void *)this = &unk_1F20FDEB0;
  *((void *)this + 6) = &unk_1F20FDF20;
  xpc_object_t v2 = *((void *)this + 11);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v14 = 0;
    _os_log_impl(&dword_1C5767000, v2, OS_LOG_TYPE_DEFAULT, "#I Gone!", v14, 2u);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 28);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 26);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 24);
  if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 22);
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  xpc_release(*((xpc_object_t *)this + 20));
  *((void *)this + 20) = 0;
  *((void *)this + 6) = &unk_1F20FE280;
  MEMORY[0x1C8790F40]((char *)this + 56);
  size_t v7 = *((void *)this + 18);
  if (v7) {
    dispatch_release(v7);
  }
  uint64_t v8 = *((void *)this + 17);
  if (v8) {
    dispatch_release(v8);
  }
  uint64_t v9 = (std::__shared_weak_count *)*((void *)this + 16);
  if (v9) {
    std::__shared_weak_count::__release_weak(v9);
  }
  *(void *)this = &unk_1F20FC1C8;
  uint64_t v10 = *((void *)this + 3);
  if (v10)
  {
    uint64_t v11 = *((void *)this + 4);
    uint64_t v12 = (void *)*((void *)this + 3);
    if (v11 != v10)
    {
      do
      {
        if (*(char *)(v11 - 1) < 0) {
          operator delete(*(void **)(v11 - 24));
        }
        v11 -= 24;
      }
      while (v11 != v10);
      uint64_t v12 = (void *)*((void *)this + 3);
    }
    *((void *)this + 4) = v10;
    operator delete(v12);
  }
  xpc_object_t v13 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v13) {
    std::__shared_weak_count::__release_weak(v13);
  }
}

{
  void *v1;
  uint64_t vars8;

  TransportModule::~TransportModule(this);

  operator delete(v1);
}

void non-virtual thunk to'TransportModule::~TransportModule(TransportModule *this)
{
}

{
  void *v1;
  uint64_t vars8;

  TransportModule::~TransportModule((TransportModule *)((char *)this - 48));

  operator delete(v1);
}

const char *TransportModule::getName(TransportModule *this)
{
  return "ipc.mod";
}

void ___ZN15TransportModule4initEv_block_invoke(uint64_t a1)
{
}

void TransportModule::configureWakeEventPktDelay_sync(TransportModule *this)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  int v11 = -1431655766;
  size_t v9 = 4;
  if (sysctlbyname("net.link.generic.system.port_used.wake_pkt_event_delay_if_families", &v11, &v9, 0, 0))
  {
    xpc_object_t v2 = *((void *)this + 11);
    if (!os_log_type_enabled(v2, OS_LOG_TYPE_ERROR)) {
      return;
    }
    uint64_t v3 = __error();
    uint64_t v4 = strerror(*v3);
    *(_DWORD *)std::string buf = 136315138;
    xpc_object_t v13 = v4;
    uint64_t v5 = "Failed to get current sysctl value, error: (%s)";
LABEL_7:
    _os_log_error_impl(&dword_1C5767000, v2, OS_LOG_TYPE_ERROR, v5, buf, 0xCu);
    return;
  }
  int v10 = v11 | 0x8000;
  int v6 = sysctlbyname("net.link.generic.system.port_used.wake_pkt_event_delay_if_families", 0, 0, &v10, 4uLL);
  xpc_object_t v2 = *((void *)this + 11);
  if (v6)
  {
    if (!os_log_type_enabled(v2, OS_LOG_TYPE_ERROR)) {
      return;
    }
    size_t v7 = __error();
    uint64_t v8 = strerror(*v7);
    *(_DWORD *)std::string buf = 136315138;
    xpc_object_t v13 = v8;
    uint64_t v5 = "Failed to configure in-band wake packet event, error (%s)";
    goto LABEL_7;
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl(&dword_1C5767000, v2, OS_LOG_TYPE_DEFAULT, "#I Successfully configured in-band wake packet event", buf, 2u);
  }
}

unsigned char *TransportModule::getShutdownStages@<X0>(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v3 = operator new(1uLL);
  *a1 = v3;
  unsigned char *v3 = 3;
  uint64_t result = v3 + 1;
  a1[1] = result;
  a1[2] = result;
  return result;
}

void TransportModule::shutdown(uint64_t a1, char a2, NSObject **a3)
{
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 1174405120;
  _DWORD v7[2] = ___ZN15TransportModule8shutdownE13ShutdownStageN8dispatch13group_sessionE_block_invoke;
  v7[3] = &__block_descriptor_tmp_3_3;
  uint64_t v5 = *a3;
  int v6 = (uint64_t *)(a1 + 120);
  v7[4] = a1;
  dispatch_group_t group = v5;
  if (v5)
  {
    dispatch_retain(v5);
    dispatch_group_enter(group);
  }
  char v9 = a2;
  ctu::SharedSynchronizable<TransportModule>::execute_wrapped(v6, (uint64_t)v7);
  if (group)
  {
    dispatch_group_leave(group);
    if (group) {
      dispatch_release(group);
    }
  }
}

void ___ZN15TransportModule8shutdownE13ShutdownStageN8dispatch13group_sessionE_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  uint64_t v2 = v1[21];
  if (v2)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 16))(v2);
    (*(void (**)(void))(*(void *)v1[21] + 56))(v1[21]);
  }
  uint64_t v3 = (std::__shared_weak_count *)v1[22];
  v1[21] = 0;
  v1[22] = 0;
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    uint64_t v4 = (std::__shared_weak_count *)v1[26];
    v1[25] = 0;
    v1[26] = 0;
    if (!v4) {
      return;
    }
  }
  else
  {
    uint64_t v4 = (std::__shared_weak_count *)v1[26];
    v1[25] = 0;
    v1[26] = 0;
    if (!v4) {
      return;
    }
  }
  if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
}

void std::shared_ptr<TransportService>::reset[abi:ne180100](void *a1)
{
  uint64_t v1 = (std::__shared_weak_count *)a1[1];
  *a1 = 0;
  a1[1] = 0;
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void TransportModule::initialize(uint64_t *a1, NSObject **a2)
{
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 1174405120;
  uint64_t v11[2] = ___ZN15TransportModule10initializeEN8dispatch13group_sessionE_block_invoke;
  v11[3] = &__block_descriptor_tmp_29_5;
  uint64_t v3 = *a2;
  v11[4] = a1;
  dispatch_group_t group = v3;
  if (v3)
  {
    dispatch_retain(v3);
    dispatch_group_enter(group);
  }
  ctu::SharedSynchronizable<TransportModule>::execute_wrapped(a1 + 15, (uint64_t)v11);
  uint64_t v4 = (std::__shared_weak_count *)a1[16];
  if (!v4 || (uint64_t v5 = a1[15], (v6 = std::__shared_weak_count::lock(v4)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  size_t v7 = v6;
  uint64_t v8 = operator new(8uLL);
  *uint64_t v8 = a1;
  char v9 = a1[17];
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  int v10 = operator new(0x18uLL);
  void *v10 = v8;
  v10[1] = v5;
  _DWORD v10[2] = v7;
  dispatch_async_f(v9, v10, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<TransportModule>::execute_wrapped<TransportModule::initialize(dispatch::group_session)::$_0>(TransportModule::initialize(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<TransportModule::initialize(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<TransportModule::initialize(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke);
  if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  if (group)
  {
    dispatch_group_leave(group);
    if (group) {
      dispatch_release(group);
    }
  }
}

void ___ZN15TransportModule10initializeEN8dispatch13group_sessionE_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(std::__shared_weak_count **)(v1 + 128);
  if (!v2 || (uint64_t v3 = *(void *)(v1 + 120), (v4 = std::__shared_weak_count::lock(v2)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v5 = v4;
  atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v5);
  }
  int v6 = abm::kCommandNetworkInterfaceControl[0];
  size_t v7 = strlen(abm::kCommandNetworkInterfaceControl[0]);
  if (v7 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v8 = v7;
  if (v7 >= 0x17)
  {
    uint64_t v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17) {
      uint64_t v10 = v7 | 7;
    }
    uint64_t v11 = v10 + 1;
    p_dst = (void **)operator new(v10 + 1);
    size_t v37 = v8;
    unint64_t v38 = v11 | 0x8000000000000000;
    std::string __dst = p_dst;
    goto LABEL_12;
  }
  HIBYTE(v38) = v7;
  p_dst = (void **)&__dst;
  if (v7) {
LABEL_12:
  }
    memmove(p_dst, v6, v8);
  *((unsigned char *)p_dst + v8) = 0;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN15TransportModule10initializeEN8dispatch13group_sessionE_block_invoke_2;
  aBlock[3] = &__block_descriptor_tmp_6_12;
  aBlock[4] = v1;
  void aBlock[5] = v3;
  uint64_t v34 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  uint64_t v12 = _Block_copy(aBlock);
  uint64_t v35 = v12;
  Service::registerCommandHandler(v1, (uint64_t)&__dst, &v35);
  if (v12) {
    _Block_release(v12);
  }
  if (SHIBYTE(v38) < 0) {
    operator delete(__dst);
  }
  xpc_object_t v13 = (const void *)*MEMORY[0x1E4F4CEE0];
  size_t v14 = strlen((const char *)*MEMORY[0x1E4F4CEE0]);
  if (v14 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v15 = v14;
  if (v14 >= 0x17)
  {
    uint64_t v17 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v14 | 7) != 0x17) {
      uint64_t v17 = v14 | 7;
    }
    uint64_t v18 = v17 + 1;
    xpc_object_t v16 = (void **)operator new(v17 + 1);
    size_t v37 = v15;
    unint64_t v38 = v18 | 0x8000000000000000;
    std::string __dst = v16;
    goto LABEL_24;
  }
  HIBYTE(v38) = v14;
  xpc_object_t v16 = (void **)&__dst;
  if (v14) {
LABEL_24:
  }
    memmove(v16, v13, v15);
  *((unsigned char *)v16 + v15) = 0;
  v30[0] = MEMORY[0x1E4F143A8];
  v30[1] = 1174405120;
  v30[2] = ___ZN15TransportModule10initializeEN8dispatch13group_sessionE_block_invoke_7;
  v30[3] = &__block_descriptor_tmp_16_2;
  void v30[4] = v1;
  v30[5] = v3;
  xpc_object_t v31 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  uint64_t v19 = _Block_copy(v30);
  uint64_t v32 = v19;
  Service::registerCommandHandler(v1, (uint64_t)&__dst, &v32);
  if (v19) {
    _Block_release(v19);
  }
  if (SHIBYTE(v38) < 0) {
    operator delete(__dst);
  }
  uint64_t v20 = (const void *)*MEMORY[0x1E4F4CED8];
  size_t v21 = strlen((const char *)*MEMORY[0x1E4F4CED8]);
  if (v21 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v22 = v21;
  if (v21 >= 0x17)
  {
    uint64_t v24 = (v21 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v21 | 7) != 0x17) {
      uint64_t v24 = v21 | 7;
    }
    uint64_t v25 = v24 + 1;
    uint64_t v23 = (void **)operator new(v24 + 1);
    size_t v37 = v22;
    unint64_t v38 = v25 | 0x8000000000000000;
    std::string __dst = v23;
    goto LABEL_36;
  }
  HIBYTE(v38) = v21;
  uint64_t v23 = (void **)&__dst;
  if (v21) {
LABEL_36:
  }
    memmove(v23, v20, v22);
  *((unsigned char *)v23 + v22) = 0;
  v27[0] = MEMORY[0x1E4F143A8];
  v27[1] = 1174405120;
  v27[2] = ___ZN15TransportModule10initializeEN8dispatch13group_sessionE_block_invoke_17;
  v27[3] = &__block_descriptor_tmp_26_0;
  v27[4] = v1;
  v27[5] = v3;
  long long v28 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  unint64_t v26 = _Block_copy(v27);
  uint64_t v29 = v26;
  Service::registerCommandHandler(v1, (uint64_t)&__dst, &v29);
  if (v26) {
    _Block_release(v26);
  }
  if (SHIBYTE(v38) < 0) {
    operator delete(__dst);
  }
  if (v28) {
    std::__shared_weak_count::__release_weak(v28);
  }
  if (v31) {
    std::__shared_weak_count::__release_weak(v31);
  }
  if (v34) {
    std::__shared_weak_count::__release_weak(v34);
  }
  std::__shared_weak_count::__release_weak(v5);
}

void sub_1C5936D90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,std::__shared_weak_count *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,std::__shared_weak_count *a32)
{
  if (v33) {
    _Block_release(v33);
  }
  if (a16)
  {
    std::__shared_weak_count::__release_weak(a16);
    if ((*(char *)(v34 - 97) & 0x80000000) == 0)
    {
LABEL_5:
      uint64_t v36 = a24;
      if (!a24)
      {
LABEL_10:
        if (a32)
        {
          std::__shared_weak_count::__release_weak(a32);
          std::__shared_weak_count::__release_weak(v32);
          _Unwind_Resume(a1);
        }
        std::__shared_weak_count::__release_weak(v32);
        _Unwind_Resume(a1);
      }
LABEL_9:
      std::__shared_weak_count::__release_weak(v36);
      goto LABEL_10;
    }
  }
  else if ((*(char *)(v34 - 97) & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(*(void **)(v34 - 120));
  uint64_t v36 = a24;
  if (!a24) {
    goto LABEL_10;
  }
  goto LABEL_9;
}

void ___ZN15TransportModule10initializeEN8dispatch13group_sessionE_block_invoke_2(void *a1, void **a2, void **a3)
{
  uint64_t v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    uint64_t v7 = a1[4];
    size_t v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      char v9 = v8;
      if (!a1[5])
      {
LABEL_12:
        if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
        return;
      }
      v12[0] = MEMORY[0x1E4F143A8];
      v12[1] = 1174405120;
      _DWORD v12[2] = ___ZN15TransportModule10initializeEN8dispatch13group_sessionE_block_invoke_3;
      v12[3] = &__block_descriptor_tmp_4_5;
      uint64_t v10 = *a2;
      v12[4] = v7;
      xpc_object_t object = v10;
      if (v10)
      {
        xpc_retain(v10);
        uint64_t v11 = *a3;
        if (!*a3) {
          goto LABEL_9;
        }
      }
      else
      {
        xpc_object_t object = xpc_null_create();
        uint64_t v11 = *a3;
        if (!*a3)
        {
LABEL_9:
          aBlocuint64_t k = v11;
          ctu::SharedSynchronizable<TransportModule>::execute_wrapped((uint64_t *)(v7 + 120), (uint64_t)v12);
          if (aBlock) {
            _Block_release(aBlock);
          }
          xpc_release(object);
          xpc_object_t object = 0;
          goto LABEL_12;
        }
      }
      uint64_t v11 = _Block_copy(v11);
      goto LABEL_9;
    }
  }
}

void ___ZN15TransportModule10initializeEN8dispatch13group_sessionE_block_invoke_3(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  xpc_object_t v3 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v4 = v3;
  if (v3)
  {
    v15[0] = v3;
  }
  else
  {
    xpc_object_t v4 = xpc_null_create();
    v15[0] = v4;
    if (!v4)
    {
      xpc_object_t v5 = xpc_null_create();
      xpc_object_t v4 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1C8792D30](v4) == MEMORY[0x1E4F14590])
  {
    xpc_retain(v4);
    goto LABEL_9;
  }
  xpc_object_t v5 = xpc_null_create();
LABEL_8:
  v15[0] = v5;
LABEL_9:
  xpc_release(v4);
  unsigned int v14 = -534716414;
  memset(v13, 170, sizeof(v13));
  xpc_object_t value = xpc_dictionary_get_value(*(xpc_object_t *)(a1 + 40), (const char *)*MEMORY[0x1E4F4C088]);
  xpc_object_t object = value;
  if (value) {
    xpc_retain(value);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  memset(&v15[1], 0, 24);
  xpc::dyn_cast_or_default();
  xpc_release(object);
  if (SHIBYTE(v13[2]) >= 0) {
    size_t v7 = HIBYTE(v13[2]);
  }
  else {
    size_t v7 = (size_t)v13[1];
  }
  if (v7 != strlen(abm::kActionConfigureDataThrottling)) {
    goto LABEL_26;
  }
  size_t v8 = SHIBYTE(v13[2]) >= 0 ? v13 : (void **)v13[0];
  if (memcmp(v8, abm::kActionConfigureDataThrottling, v7)) {
    goto LABEL_26;
  }
  xpc_object_t v9 = *(xpc_object_t *)(a1 + 40);
  xpc_object_t v11 = v9;
  if (!v9)
  {
    xpc_object_t v9 = xpc_null_create();
    xpc_object_t v11 = v9;
    xpc_object_t v10 = v15[0];
    if (v15[0]) {
      goto LABEL_22;
    }
LABEL_24:
    xpc_object_t v10 = xpc_null_create();
    goto LABEL_25;
  }
  xpc_retain(v9);
  xpc_object_t v10 = v15[0];
  if (!v15[0]) {
    goto LABEL_24;
  }
LABEL_22:
  xpc_retain(v10);
LABEL_25:
  TransportModule::configureDataThrottling_sync(v2, &v11);
  unsigned int v14 = 0;
  xpc_release(v10);
  xpc_release(v9);
  xpc_object_t v11 = 0;
LABEL_26:
  dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int &,xpc::dict&>((uint64_t *)(a1 + 48), &v14, v15);
  if (SHIBYTE(v13[2]) < 0) {
    operator delete(v13[0]);
  }
  xpc_release(v15[0]);
}

void sub_1C5937218(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, xpc_object_t object, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  xpc_release(v25);
  xpc_release(v24);
  if (a16 < 0) {
    operator delete(__p);
  }
  xpc_release(object);
  _Unwind_Resume(a1);
}

uint64_t TransportModule::configureDataThrottling_sync(uint64_t a1, xpc_object_t *a2)
{
  xpc_object_t v4 = *(NSObject **)(a1 + 88);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(object[0]) = 0;
    _os_log_impl(&dword_1C5767000, v4, OS_LOG_TYPE_DEFAULT, "#I Configure data throttling", (uint8_t *)object, 2u);
  }
  xpc_object_t value = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E4F4C0E0]);
  object[0] = value;
  if (value) {
    xpc_retain(value);
  }
  else {
    object[0] = xpc_null_create();
  }
  unsigned int v6 = xpc::dyn_cast_or_default((xpc *)object, 0);
  xpc_release(object[0]);
  xpc_object_t v7 = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E4F4C0F8]);
  object[0] = v7;
  if (v7) {
    xpc_retain(v7);
  }
  else {
    object[0] = xpc_null_create();
  }
  uint64_t v8 = xpc::dyn_cast_or_default((xpc *)object, 0);
  xpc_release(object[0]);
  xpc_object_t v9 = *(uint64_t **)(a1 + 184);
  if (v9)
  {
    object[0] = (xpc_object_t)MEMORY[0x1E4F143A8];
    object[1] = (xpc_object_t)0x40000000;
    xpc_object_t object[2] = ___ZN4data16TransportService5State9setConfigENS0_16ThrottlingConfigE_block_invoke;
    xpc_object_t object[3] = &__block_descriptor_tmp_59_0;
    xpc_object_t object[4] = v9;
    object[5] = (xpc_object_t)(v6 | (unint64_t)(v8 << 32));
    ctu::SharedSynchronizable<data::TransportService::State>::execute_wrapped(v9 + 9, (uint64_t)object);
  }
  return 0;
}

void sub_1C5937418(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object)
{
}

uint64_t __copy_helper_block_e8_40c40_ZTSNSt3__18weak_ptrI15TransportModuleEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c40_ZTSNSt3__18weak_ptrI15TransportModuleEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void ___ZN15TransportModule10initializeEN8dispatch13group_sessionE_block_invoke_7(void *a1, void **a2, void **a3)
{
  xpc_object_t v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    uint64_t v7 = a1[4];
    uint64_t v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      xpc_object_t v9 = v8;
      if (!a1[5])
      {
LABEL_12:
        if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
        return;
      }
      v12[0] = MEMORY[0x1E4F143A8];
      v12[1] = 1174405120;
      _DWORD v12[2] = ___ZN15TransportModule10initializeEN8dispatch13group_sessionE_block_invoke_2_8;
      v12[3] = &__block_descriptor_tmp_13_7;
      xpc_object_t v10 = *a2;
      v12[4] = v7;
      xpc_object_t object = v10;
      if (v10)
      {
        xpc_retain(v10);
        xpc_object_t v11 = *a3;
        if (!*a3) {
          goto LABEL_9;
        }
      }
      else
      {
        xpc_object_t object = xpc_null_create();
        xpc_object_t v11 = *a3;
        if (!*a3)
        {
LABEL_9:
          aBlocuint64_t k = v11;
          ctu::SharedSynchronizable<TransportModule>::execute_wrapped((uint64_t *)(v7 + 120), (uint64_t)v12);
          if (aBlock) {
            _Block_release(aBlock);
          }
          xpc_release(object);
          xpc_object_t object = 0;
          goto LABEL_12;
        }
      }
      xpc_object_t v11 = _Block_copy(v11);
      goto LABEL_9;
    }
  }
}

void ___ZN15TransportModule10initializeEN8dispatch13group_sessionE_block_invoke_2_8(uint64_t a1)
{
  v18[1] = *(xpc_object_t *)MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 32);
  xpc_object_t v3 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v4 = v3;
  uint64_t v5 = MEMORY[0x1E4F14590];
  if (v3)
  {
    xpc_object_t object = v3;
  }
  else
  {
    xpc_object_t v4 = xpc_null_create();
    xpc_object_t object = v4;
    if (!v4)
    {
      xpc_object_t v6 = xpc_null_create();
      xpc_object_t v4 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1C8792D30](v4) != v5)
  {
    xpc_object_t v6 = xpc_null_create();
LABEL_8:
    xpc_object_t object = v6;
    goto LABEL_9;
  }
  xpc_retain(v4);
LABEL_9:
  xpc_release(v4);
  unsigned int v16 = -534716416;
  if (MEMORY[0x1C8792D30](*(void *)(a1 + 40)) == v5
    && (xpc_object_t v9 = (const char *)*MEMORY[0x1E4F4CAB0],
        xpc_dictionary_get_value(*(xpc_object_t *)(a1 + 40), (const char *)*MEMORY[0x1E4F4CAB0])))
  {
    xpc_object_t value = xpc_dictionary_get_value(*(xpc_object_t *)(a1 + 40), v9);
    v18[0] = value;
    if (value) {
      xpc_retain(value);
    }
    else {
      v18[0] = xpc_null_create();
    }
    int v11 = xpc::dyn_cast_or_default((xpc *)v18, 0);
    xpc_release(v18[0]);
    uint64_t v12 = *(NSObject **)(v2 + 88);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(v18[0]) = 67109120;
      HIDWORD(v18[0]) = v11;
      _os_log_impl(&dword_1C5767000, v12, OS_LOG_TYPE_DEFAULT, "#I Transport bypass enable (%u)", (uint8_t *)v18, 8u);
    }
    uint64_t v13 = *(void *)(v2 + 168);
    if (v13)
    {
      if ((*(unsigned int (**)(uint64_t, BOOL))(*(void *)v13 + 72))(v13, v11 != 0)) {
        unsigned int v16 = 0;
      }
    }
    else if (MEMORY[0x1C8792D30](object) == v5)
    {
      xpc_object_t v14 = xpc_string_create("TransportService is not ready!");
      if (!v14) {
        xpc_object_t v14 = xpc_null_create();
      }
      xpc_dictionary_set_value(object, (const char *)*MEMORY[0x1E4F4C240], v14);
      xpc_object_t v15 = xpc_null_create();
      xpc_release(v14);
      xpc_release(v15);
    }
  }
  else
  {
    if (MEMORY[0x1C8792D30](object) == v5)
    {
      xpc_object_t v7 = xpc_string_create("Invalid key!");
      if (!v7) {
        xpc_object_t v7 = xpc_null_create();
      }
      xpc_dictionary_set_value(object, (const char *)*MEMORY[0x1E4F4C240], v7);
      xpc_object_t v8 = xpc_null_create();
      xpc_release(v7);
      xpc_release(v8);
    }
    unsigned int v16 = -534716414;
  }
  dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int &,xpc::dict&>((uint64_t *)(a1 + 48), &v16, &object);
  xpc_release(object);
}

void sub_1C593789C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, xpc_object_t a11)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void ___ZN15TransportModule10initializeEN8dispatch13group_sessionE_block_invoke_17(void *a1, uint64_t a2, void **a3)
{
  xpc_object_t v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    uint64_t v6 = a1[4];
    xpc_object_t v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      xpc_object_t v8 = v7;
      if (a1[5])
      {
        v10[0] = MEMORY[0x1E4F143A8];
        v10[1] = 1174405120;
        _DWORD v10[2] = ___ZN15TransportModule10initializeEN8dispatch13group_sessionE_block_invoke_2_18;
        v10[3] = &__block_descriptor_tmp_23_2;
        v10[4] = v6;
        xpc_object_t v9 = *a3;
        if (*a3) {
          xpc_object_t v9 = _Block_copy(v9);
        }
        aBlocuint64_t k = v9;
        ctu::SharedSynchronizable<TransportModule>::execute_wrapped((uint64_t *)(v6 + 120), (uint64_t)v10);
        if (aBlock) {
          _Block_release(aBlock);
        }
      }
      if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
}

void ___ZN15TransportModule10initializeEN8dispatch13group_sessionE_block_invoke_2_18(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  xpc_object_t xdict = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  xpc_object_t v3 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v4 = v3;
  if (v3)
  {
    xpc_object_t xdict = v3;
  }
  else
  {
    xpc_object_t v4 = xpc_null_create();
    xpc_object_t xdict = v4;
    if (!v4)
    {
      xpc_object_t v5 = xpc_null_create();
      xpc_object_t v4 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1C8792D30](v4) == MEMORY[0x1E4F14590])
  {
    xpc_retain(v4);
    goto LABEL_9;
  }
  xpc_object_t v5 = xpc_null_create();
LABEL_8:
  xpc_object_t xdict = v5;
LABEL_9:
  xpc_release(v4);
  switch(*(_DWORD *)(v2 + 152))
  {
    case 0:
      xpc_object_t v6 = xpc_string_create("Wake data is not supported on this device.");
      if (!v6) {
        xpc_object_t v6 = xpc_null_create();
      }
      xpc_dictionary_set_value(xdict, (const char *)*MEMORY[0x1E4F4C240], v6);
      xpc_object_t v7 = xpc_null_create();
      xpc_release(v6);
      xpc_release(v7);
      LODWORD(object) = -534716412;
      dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>((uint64_t *)(a1 + 40), (unsigned int *)&object, &xdict);
      break;
    case 1:
      xpc_object_t v13 = xpc_string_create("Device has not entered sleep state after bootup. So, there is no wake data yet.");
      if (!v13) {
        xpc_object_t v13 = xpc_null_create();
      }
      xpc_dictionary_set_value(xdict, (const char *)*MEMORY[0x1E4F4C240], v13);
      xpc_object_t v14 = xpc_null_create();
      xpc_release(v13);
      xpc_release(v14);
      LODWORD(object) = -534716409;
      dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>((uint64_t *)(a1 + 40), (unsigned int *)&object, &xdict);
      break;
    case 2:
      xpc_object_t v8 = xpc_string_create("Requested for wake data from baseband. Please try again.");
      if (!v8) {
        xpc_object_t v8 = xpc_null_create();
      }
      xpc_dictionary_set_value(xdict, (const char *)*MEMORY[0x1E4F4C240], v8);
      xpc_object_t v9 = xpc_null_create();
      xpc_release(v8);
      xpc_release(v9);
      LODWORD(object) = -534716411;
      dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>((uint64_t *)(a1 + 40), (unsigned int *)&object, &xdict);
      break;
    case 3:
      xpc_object_t v10 = *(xpc_object_t *)(v2 + 160);
      if (v10) {
        xpc_retain(*(xpc_object_t *)(v2 + 160));
      }
      else {
        xpc_object_t v10 = xpc_null_create();
      }
      uint64_t v15 = *(void *)(a1 + 40);
      xpc_object_t object = v10;
      xpc_object_t v16 = xpc_null_create();
      (*(void (**)(uint64_t, void, xpc_object_t *))(v15 + 16))(v15, 0, &object);
      xpc_release(object);
      xpc_release(v16);
      break;
    default:
      xpc_object_t v11 = xpc_string_create("Request for wake data from baseband returned error.");
      if (!v11) {
        xpc_object_t v11 = xpc_null_create();
      }
      xpc_dictionary_set_value(xdict, (const char *)*MEMORY[0x1E4F4C240], v11);
      xpc_object_t v12 = xpc_null_create();
      xpc_release(v11);
      xpc_release(v12);
      LODWORD(object) = -534716416;
      dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>((uint64_t *)(a1 + 40), (unsigned int *)&object, &xdict);
      break;
  }
  xpc_release(xdict);
}

void sub_1C5937D60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t a9, xpc_object_t object)
{
  xpc_release(object);
  xpc_release(v10);
  xpc_release(a9);
  _Unwind_Resume(a1);
}

void TransportModule::claimSystemWake_sync(TransportModule *this)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  if (*((_DWORD *)this + 38) != 3) {
    return;
  }
  xpc_object_t v2 = (xpc_object_t)*((void *)this + 20);
  if (v2) {
    xpc_retain(*((xpc_object_t *)this + 20));
  }
  else {
    xpc_object_t v2 = xpc_null_create();
  }
  xpc_object_t value = xpc_dictionary_get_value(v2, (const char *)*MEMORY[0x1E4F4C568]);
  xpc_object_t object = value;
  if (value) {
    xpc_retain(value);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  xpc::bridge((uint64_t *)cf, (xpc *)&object, v4);
  xpc_object_t v5 = *(const void **)cf;
  if (!*(void *)cf || (CFTypeID v6 = CFGetTypeID(*(CFTypeRef *)cf), v6 != CFStringGetTypeID()))
  {
    xpc_object_t v5 = 0;
    xpc_object_t v7 = *(const void **)cf;
    if (!*(void *)cf) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  CFRetain(v5);
  xpc_object_t v7 = *(const void **)cf;
  if (*(void *)cf) {
LABEL_13:
  }
    CFRelease(v7);
LABEL_14:
  xpc_release(object);
  xpc_object_t v8 = (const __CFString **)*MEMORY[0x1E4F4C560];
  xpc_object_t v9 = xpc_dictionary_get_value(v2, (const char *)*MEMORY[0x1E4F4C560]);
  xpc_object_t object = v9;
  if (v9) {
    xpc_retain(v9);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  xpc::bridge((uint64_t *)cf, (xpc *)&object, v10);
  xpc_object_t v11 = *(const void **)cf;
  if (*(void *)cf)
  {
    CFTypeID v12 = CFGetTypeID(*(CFTypeRef *)cf);
    if (v12 == CFDataGetTypeID())
    {
      CFRetain(v11);
      xpc_object_t v13 = *(const void **)cf;
      if (!*(void *)cf) {
        goto LABEL_23;
      }
      goto LABEL_22;
    }
  }
  xpc_object_t v11 = 0;
  xpc_object_t v13 = *(const void **)cf;
  if (*(void *)cf) {
LABEL_22:
  }
    CFRelease(v13);
LABEL_23:
  xpc_release(object);
  uint64_t v14 = *MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  *(void *)CFTypeRef cf = 0;
  ctu::cf::convert_copy((ctu::cf *)cf, v8, (const char *)0x8000100, v14, v16);
  uint64_t v17 = *(const void **)cf;
  xpc_object_t object = *(xpc_object_t *)cf;
  *(void *)CFTypeRef cf = v11;
  if (v11)
  {
    CFRetain(v11);
    if (v17) {
      CFDictionaryAddValue(Mutable, v17, v11);
    }
    CFRelease(v11);
  }
  if (v17) {
    CFRelease(v17);
  }
  IOPMClaimSystemWakeEvent();
  uint64_t v18 = *((void *)this + 11);
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)CFTypeRef cf = 138412802;
    *(void *)&cf[4] = @"com.apple.CommCenter";
    __int16 v21 = 2112;
    size_t v22 = v5;
    __int16 v23 = 2112;
    uint64_t v24 = Mutable;
    _os_log_impl(&dword_1C5767000, v18, OS_LOG_TYPE_DEFAULT, "#I \n--- IOPM System Wake ---\nIdentity: %@\nReason: %@\nDetails: %@---", cf, 0x20u);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (v11) {
    CFRelease(v11);
  }
  if (v5) {
    CFRelease(v5);
  }
  xpc_release(v2);
}

void sub_1C5938110(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, __int16 a12, char a13, char a14, xpc_object_t object, char a16)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void TransportModule::submitMetric_sync(TransportModule *this, xpc_object_t *a2)
{
  xpc_object_t v4 = *((void *)this + 11);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl(&dword_1C5767000, v4, OS_LOG_TYPE_DEFAULT, "#I Submitting Wake Reason Info to AWD", buf, 2u);
  }
  uint64_t v5 = MEMORY[0x1C8792D30](*a2);
  uint64_t v6 = MEMORY[0x1E4F14590];
  if (v5 == MEMORY[0x1E4F14590])
  {
    xpc_object_t v8 = xpc_dictionary_create(0, 0, 0);
    if (v8 || (xpc_object_t v8 = xpc_null_create()) != 0)
    {
      if (MEMORY[0x1C8792D30](v8) == v6)
      {
        xpc_retain(v8);
        xpc_object_t v9 = v8;
      }
      else
      {
        xpc_object_t v9 = xpc_null_create();
      }
    }
    else
    {
      xpc_object_t v9 = xpc_null_create();
      xpc_object_t v8 = 0;
    }
    xpc_release(v8);
    xpc_object_t v90 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
    xpc_object_t v10 = xpc_dictionary_create(0, 0, 0);
    xpc_object_t v11 = v10;
    if (v10)
    {
      xpc_object_t v90 = v10;
    }
    else
    {
      xpc_object_t v11 = xpc_null_create();
      xpc_object_t v90 = v11;
      if (!v11)
      {
        xpc_object_t v12 = xpc_null_create();
        xpc_object_t v11 = 0;
        goto LABEL_19;
      }
    }
    if (MEMORY[0x1C8792D30](v11) == v6)
    {
      xpc_retain(v11);
      goto LABEL_20;
    }
    xpc_object_t v12 = xpc_null_create();
LABEL_19:
    xpc_object_t v90 = v12;
LABEL_20:
    xpc_release(v11);
    size_t v13 = *MEMORY[0x1E4F4C5B0];
    xpc_object_t value = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E4F4C5B0]);
    BOOL v15 = value != 0;
    if (value)
    {
      *(void *)std::string buf = a2;
      size_t v67 = v13;
      uint64_t v16 = *MEMORY[0x1E4F4D100];
      size_t v87 = &v90;
      uint64_t v88 = v16;
      xpc::dict::object_proxy::operator=((uint64_t)&v87, (uint64_t)buf, &v89);
      xpc_release(v89);
      xpc_object_t v89 = 0;
    }
    size_t v17 = *MEMORY[0x1E4F4CF80];
    if (xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E4F4CF80]))
    {
      *(void *)std::string buf = a2;
      size_t v67 = v17;
      uint64_t v18 = *MEMORY[0x1E4F4CFE8];
      size_t v87 = &v90;
      uint64_t v88 = v18;
      xpc::dict::object_proxy::operator=((uint64_t)&v87, (uint64_t)buf, &v86);
      xpc_release(v86);
      xpc_object_t v86 = 0;
      BOOL v15 = 1;
    }
    size_t v19 = *MEMORY[0x1E4F4C408];
    if (xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E4F4C408]))
    {
      *(void *)std::string buf = a2;
      size_t v67 = v19;
      uint64_t v20 = *MEMORY[0x1E4F4D1B8];
      size_t v87 = &v90;
      uint64_t v88 = v20;
      xpc::dict::object_proxy::operator=((uint64_t)&v87, (uint64_t)buf, &v85);
      xpc_release(v85);
      xpc_object_t v85 = 0;
      BOOL v15 = 1;
    }
    size_t v21 = *MEMORY[0x1E4F4C910];
    if (xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E4F4C910]))
    {
      *(void *)std::string buf = a2;
      size_t v67 = v21;
      uint64_t v22 = *MEMORY[0x1E4F4D090];
      size_t v87 = &v90;
      uint64_t v88 = v22;
      xpc::dict::object_proxy::operator=((uint64_t)&v87, (uint64_t)buf, &v84);
      xpc_release(v84);
      xpc_object_t v84 = 0;
      BOOL v15 = 1;
    }
    size_t v23 = *MEMORY[0x1E4F4C568];
    if (xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E4F4C568]))
    {
      *(void *)std::string buf = a2;
      size_t v67 = v23;
      uint64_t v24 = *MEMORY[0x1E4F4CF10];
      size_t v87 = &v90;
      uint64_t v88 = v24;
      xpc::dict::object_proxy::operator=((uint64_t)&v87, (uint64_t)buf, &v83);
      xpc_release(v83);
      xpc_object_t v83 = 0;
      BOOL v15 = 1;
    }
    uint64_t v25 = (const char *)*MEMORY[0x1E4F4C918];
    if (xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E4F4C918]))
    {
      *(void *)std::string buf = a2;
      size_t v67 = (size_t)v25;
      uint64_t v26 = *MEMORY[0x1E4F4D098];
      size_t v87 = &v90;
      uint64_t v88 = v26;
      xpc::dict::object_proxy::operator=((uint64_t)&v87, (uint64_t)buf, &v82);
      xpc_release(v82);
      xpc_object_t v82 = 0;
      size_t v27 = *MEMORY[0x1E4F4CC78];
      if (xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E4F4CC78]))
      {
        xpc_object_t v81 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
        *(void *)std::string buf = a2;
        size_t v67 = v27;
        xpc::dict::object_proxy::operator xpc::dict((uint64_t)buf, &v81);
        if (xpc::operator==<char const*>(*a2, v25, MEMORY[0x1E4F4C6F8]))
        {
          size_t v28 = *MEMORY[0x1E4F4CC80];
          *(void *)std::string buf = &v81;
          size_t v67 = v28;
          uint64_t v29 = *MEMORY[0x1E4F4CFE0];
          size_t v87 = &v90;
          uint64_t v88 = v29;
          xpc::dict::object_proxy::operator=((uint64_t)&v87, (uint64_t)buf, &object);
          xpc_release(object);
          xpc_object_t object = 0;
          size_t v30 = *MEMORY[0x1E4F4CB60];
          *(void *)std::string buf = &v81;
          size_t v67 = v30;
          uint64_t v31 = *MEMORY[0x1E4F4CF58];
          size_t v87 = &v90;
          uint64_t v88 = v31;
          xpc::dict::object_proxy::operator=((uint64_t)&v87, (uint64_t)buf, &v79);
          xpc_release(v79);
          xpc_object_t v79 = 0;
        }
        else if (xpc::operator==<char const*>(*a2, v25, MEMORY[0x1E4F4C848]))
        {
          size_t v33 = *MEMORY[0x1E4F4CA58];
          *(void *)std::string buf = &v81;
          size_t v67 = v33;
          uint64_t v34 = *MEMORY[0x1E4F4CC48];
          size_t v87 = &v90;
          uint64_t v88 = v34;
          xpc::dict::object_proxy::operator=((uint64_t)&v87, (uint64_t)buf, &v78);
          xpc_release(v78);
          xpc_object_t v78 = 0;
          size_t v35 = *MEMORY[0x1E4F4CC88];
          *(void *)std::string buf = &v81;
          size_t v67 = v35;
          uint64_t v36 = *MEMORY[0x1E4F4CE10];
          size_t v87 = &v90;
          uint64_t v88 = v36;
          xpc::dict::object_proxy::operator=((uint64_t)&v87, (uint64_t)buf, &v77);
          xpc_release(v77);
          xpc_object_t v77 = 0;
          size_t v37 = *MEMORY[0x1E4F4CD40];
          *(void *)std::string buf = &v81;
          size_t v67 = v37;
          uint64_t v38 = *MEMORY[0x1E4F4CF08];
          size_t v87 = &v90;
          uint64_t v88 = v38;
          xpc::dict::object_proxy::operator=((uint64_t)&v87, (uint64_t)buf, &v76);
          xpc_release(v76);
          xpc_object_t v76 = 0;
          size_t v39 = *MEMORY[0x1E4F4CF68];
          *(void *)std::string buf = &v81;
          size_t v67 = v39;
          uint64_t v40 = *MEMORY[0x1E4F4CE08];
          size_t v87 = &v90;
          uint64_t v88 = v40;
          xpc::dict::object_proxy::operator=((uint64_t)&v87, (uint64_t)buf, &v75);
          xpc_release(v75);
          xpc_object_t v75 = 0;
          size_t v41 = *MEMORY[0x1E4F4CA50];
          *(void *)std::string buf = &v81;
          size_t v67 = v41;
          uint64_t v42 = *MEMORY[0x1E4F4CB38];
          size_t v87 = &v90;
          uint64_t v88 = v42;
          xpc::dict::object_proxy::operator=((uint64_t)&v87, (uint64_t)buf, &v74);
          xpc_release(v74);
          xpc_object_t v74 = 0;
        }
        else if (xpc::operator==<char const*>(*a2, v25, MEMORY[0x1E4F4C838]))
        {
          size_t v43 = *MEMORY[0x1E4F4CA48];
          *(void *)std::string buf = &v81;
          size_t v67 = v43;
          uint64_t v44 = *MEMORY[0x1E4F4CC48];
          size_t v87 = &v90;
          uint64_t v88 = v44;
          xpc::dict::object_proxy::operator=((uint64_t)&v87, (uint64_t)buf, &v73);
          xpc_release(v73);
          xpc_object_t v73 = 0;
          size_t v45 = *MEMORY[0x1E4F4CC70];
          *(void *)std::string buf = &v81;
          size_t v67 = v45;
          uint64_t v46 = *MEMORY[0x1E4F4CE10];
          size_t v87 = &v90;
          uint64_t v88 = v46;
          xpc::dict::object_proxy::operator=((uint64_t)&v87, (uint64_t)buf, &v72);
          xpc_release(v72);
          xpc_object_t v72 = 0;
          size_t v47 = *MEMORY[0x1E4F4CC68];
          *(void *)std::string buf = &v81;
          size_t v67 = v47;
          xpc::dict::object_proxy::operator xpc::object((uint64_t)buf, &v87);
          int v48 = xpc::dyn_cast_or_default((xpc *)&v87, 0);
          xpc_release(v87);
          xpc_object_t v70 = xpc_int64_create(v48 | 0x10000);
          if (!v70) {
            xpc_object_t v70 = xpc_null_create();
          }
          size_t v49 = *MEMORY[0x1E4F4CE08];
          *(void *)std::string buf = &v90;
          size_t v67 = v49;
          xpc::dict::object_proxy::operator=((uint64_t)buf, &v70, &v71);
          xpc_release(v71);
          xpc_object_t v71 = 0;
          xpc_release(v70);
          xpc_object_t v70 = 0;
          size_t v50 = *MEMORY[0x1E4F4CA50];
          *(void *)std::string buf = &v81;
          size_t v67 = v50;
          uint64_t v51 = *MEMORY[0x1E4F4CB38];
          size_t v87 = &v90;
          uint64_t v88 = v51;
          xpc::dict::object_proxy::operator=((uint64_t)&v87, (uint64_t)buf, &v69);
          xpc_release(v69);
          xpc_object_t v69 = 0;
        }
        xpc_release(v81);
      }
    }
    else if (!v15)
    {
      uint64_t v32 = *((void *)this + 11);
      if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_error_impl(&dword_1C5767000, v32, OS_LOG_TYPE_ERROR, "Wake Reason data is missing", buf, 2u);
      }
      goto LABEL_63;
    }
    xpc_object_t v52 = xpc_string_create((const char *)*MEMORY[0x1E4F4D2D0]);
    if (!v52) {
      xpc_object_t v52 = xpc_null_create();
    }
    xpc_dictionary_set_value(v9, (const char *)*MEMORY[0x1E4F4C190], v52);
    xpc_object_t v53 = xpc_null_create();
    xpc_release(v52);
    xpc_release(v53);
    xpc_object_t v54 = xpc_int64_create(524467);
    if (!v54) {
      xpc_object_t v54 = xpc_null_create();
    }
    xpc_dictionary_set_value(v9, (const char *)*MEMORY[0x1E4F4C258], v54);
    xpc_object_t v55 = xpc_null_create();
    xpc_release(v54);
    xpc_release(v55);
    xpc_object_t v56 = v90;
    if (v90) {
      xpc_retain(v90);
    }
    else {
      xpc_object_t v56 = xpc_null_create();
    }
    xpc_dictionary_set_value(v9, (const char *)*MEMORY[0x1E4F4C188], v56);
    xpc_object_t v57 = xpc_null_create();
    xpc_release(v56);
    xpc_release(v57);
    uint64_t v58 = (const void *)*MEMORY[0x1E4F4C738];
    size_t v59 = strlen((const char *)*MEMORY[0x1E4F4C738]);
    if (v59 >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    size_t v60 = v59;
    if (v59 >= 0x17)
    {
      uint64_t v62 = (v59 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v59 | 7) != 0x17) {
        uint64_t v62 = v59 | 7;
      }
      uint64_t v63 = v62 + 1;
      long long v61 = operator new(v62 + 1);
      size_t v67 = v60;
      unint64_t v68 = v63 | 0x8000000000000000;
      *(void *)std::string buf = v61;
    }
    else
    {
      HIBYTE(v68) = v59;
      long long v61 = buf;
      if (!v59)
      {
        buf[0] = 0;
        xpc_object_t v65 = v9;
        if (v9)
        {
LABEL_55:
          xpc_retain(v9);
          goto LABEL_61;
        }
LABEL_60:
        xpc_object_t v65 = xpc_null_create();
LABEL_61:
        xpc_object_t v64 = 0;
        Service::runCommand((uint64_t)this, (uint64_t)buf, &v65, &v64);
        xpc_release(v65);
        xpc_object_t v65 = 0;
        if (SHIBYTE(v68) < 0) {
          operator delete(*(void **)buf);
        }
LABEL_63:
        xpc_release(v90);
        xpc_release(v9);
        return;
      }
    }
    memmove(v61, v58, v60);
    *((unsigned char *)v61 + v60) = 0;
    xpc_object_t v65 = v9;
    if (v9) {
      goto LABEL_55;
    }
    goto LABEL_60;
  }
  xpc_object_t v7 = *((void *)this + 11);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_error_impl(&dword_1C5767000, v7, OS_LOG_TYPE_ERROR, "Invalid Wake Reason dictionary", buf, 2u);
  }
}

void sub_1C5938B88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,xpc_object_t object)
{
  xpc_release(*(xpc_object_t *)(v31 - 96));
  xpc_release(object);
  xpc_release(*(xpc_object_t *)(v31 - 72));
  xpc_release(v30);
  _Unwind_Resume(a1);
}

BOOL xpc::operator==<char const*>(void *a1, const char *a2, const char **a3)
{
  xpc_object_t value = xpc_dictionary_get_value(a1, a2);
  if (value)
  {
    xpc_object_t v5 = value;
    xpc_retain(value);
  }
  else
  {
    xpc_object_t v5 = xpc_null_create();
  }
  xpc_object_t v6 = xpc_string_create(*a3);
  if (!v6) {
    xpc_object_t v6 = xpc_null_create();
  }
  BOOL v7 = xpc_equal(v5, v6);
  xpc_release(v6);
  xpc_release(v5);
  return v7;
}

void sub_1C5938D68(_Unwind_Exception *a1)
{
  xpc_release(v2);
  xpc_release(v1);
  _Unwind_Resume(a1);
}

void TransportModule::finishInitialization_sync(TransportModule *this)
{
  uint64_t v121 = *MEMORY[0x1E4F143B8];
  xpc_object_t v2 = (std::__shared_weak_count *)*((void *)this + 16);
  if (!v2 || (uint64_t v3 = *((void *)this + 15), (v4 = std::__shared_weak_count::lock(v2)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  xpc_object_t v5 = v4;
  atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v5);
  }
  xpc_object_t v6 = (const char *)(*(uint64_t (**)(TransportModule *))(*(void *)this + 16))(this);
  size_t v7 = strlen(v6);
  if (v7 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  xpc_object_t v8 = (void *)v7;
  if (v7 >= 0x17)
  {
    uint64_t v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17) {
      uint64_t v10 = v7 | 7;
    }
    uint64_t v11 = v10 + 1;
    xpc_object_t v9 = (void **)operator new(v10 + 1);
    __dst[1] = v8;
    unint64_t v115 = v11 | 0x8000000000000000;
    __dst[0] = v9;
  }
  else
  {
    HIBYTE(v115) = v7;
    xpc_object_t v9 = __dst;
    if (!v7) {
      goto LABEL_13;
    }
  }
  memmove(v9, v6, (size_t)v8);
LABEL_13:
  *((unsigned char *)v8 + (void)v9) = 0;
  CFAllocatorRef v113 = 0;
  AppleBasebandManager::create();
  long long v12 = *(_OWORD *)buf;
  *(void *)std::string buf = 0;
  *(void *)&uint8_t buf[8] = 0;
  size_t v13 = (std::__shared_weak_count *)*((void *)this + 26);
  *(_OWORD *)((char *)this + 200) = v12;
  if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  uint64_t v14 = *(std::__shared_weak_count **)&buf[8];
  if (!*(void *)&buf[8]
    || atomic_fetch_add((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    BOOL v15 = v113;
    if (!v113) {
      goto LABEL_20;
    }
    goto LABEL_19;
  }
  ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
  std::__shared_weak_count::__release_weak(v14);
  BOOL v15 = v113;
  if (v113) {
LABEL_19:
  }
    CFRelease(v15);
LABEL_20:
  if (SHIBYTE(v115) < 0) {
    operator delete(__dst[0]);
  }
  GetABMLogServer(&v111);
  uint64_t v16 = (std::__shared_weak_count *)*((void *)this + 26);
  uint64_t v109 = *((void *)this + 25);
  std::string v110 = v16;
  if (v16) {
    atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  size_t v17 = (std::__shared_weak_count *)*((void *)this + 16);
  if (!v17 || (uint64_t v18 = *((void *)this + 15), (v19 = std::__shared_weak_count::lock(v17)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v20 = v19;
  uint64_t v107 = v18;
  int v108 = v19;
  atomic_fetch_add_explicit(&v19->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v20);
  }
  size_t v21 = (std::__shared_weak_count *)*((void *)this + 28);
  uint64_t v105 = *((void *)this + 27);
  uint64_t v106 = v21;
  if (v21) {
    atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  TransportService::create(&v111, &v109, &v107, &v105, buf);
  long long v22 = *(_OWORD *)buf;
  *(void *)std::string buf = 0;
  *(void *)&uint8_t buf[8] = 0;
  size_t v23 = (std::__shared_weak_count *)*((void *)this + 22);
  *(_OWORD *)((char *)this + 168) = v22;
  if (v23 && !atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
  }
  uint64_t v24 = *(std::__shared_weak_count **)&buf[8];
  if (*(void *)&buf[8]
    && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
    std::__shared_weak_count::__release_weak(v24);
  }
  uint64_t v25 = v106;
  if (v106 && !atomic_fetch_add(&v106->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
    std::__shared_weak_count::__release_weak(v25);
  }
  if (v108) {
    std::__shared_weak_count::__release_weak(v108);
  }
  uint64_t v26 = v110;
  if (v110 && !atomic_fetch_add(&v110->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
    std::__shared_weak_count::__release_weak(v26);
  }
  size_t v27 = v112;
  if (v112 && !atomic_fetch_add(&v112->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
    std::__shared_weak_count::__release_weak(v27);
  }
  uint64_t v28 = *((void *)this + 21);
  if (!v28)
  {
    xpc_object_t v70 = GetOsLogContext()[1];
    if (!os_log_type_enabled(v70, OS_LOG_TYPE_FAULT)) {
      __break(1u);
    }
    *(_DWORD *)std::string buf = 136315906;
    *(void *)&uint8_t buf[4] = "ABM ASSERT";
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = "fTransportService != NULL";
    __int16 v117 = 2080;
    CFAllocatorRef v118 = "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices_Manager/AppleBasebandManager/BasebandManager/Serv"
           "er/Transport/TransportModule.cpp";
    __int16 v119 = 1024;
    int v120 = 366;
    _os_log_fault_impl(&dword_1C5767000, v70, OS_LOG_TYPE_FAULT, "%s (%s): File: %s Line: %d", buf, 0x26u);
    __break(1u);
LABEL_171:
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (*((_DWORD *)this + 38))
  {
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 1174405120;
    aBlock[2] = ___ZN15TransportModule25finishInitialization_syncEv_block_invoke;
    aBlock[3] = &__block_descriptor_tmp_37_4;
    aBlock[4] = this;
    void aBlock[5] = v3;
    xpc_object_t v102 = v5;
    atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    uint64_t v29 = _Block_copy(aBlock);
    size_t v30 = *((void *)this + 17);
    if (v30) {
      dispatch_retain(*((dispatch_object_t *)this + 17));
    }
    size_t v103 = v29;
    dispatch_object_t v104 = v30;
    (*(void (**)(uint64_t, const void **))(*(void *)v28 + 80))(v28, &v103);
    if (v104) {
      dispatch_release(v104);
    }
    if (v103) {
      _Block_release(v103);
    }
    if (v102) {
      std::__shared_weak_count::__release_weak(v102);
    }
  }
  else
  {
    uint64_t v31 = *((void *)this + 11);
    if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl(&dword_1C5767000, v31, OS_LOG_TYPE_DEFAULT, "#I Wake reason is not supported by this baseband", buf, 2u);
    }
  }
  memset(buf, 170, 16);
  v99[0] = MEMORY[0x1E4F143A8];
  v99[1] = 1174405120;
  v99[2] = ___ZN15TransportModule25finishInitialization_syncEv_block_invoke_38;
  v99[3] = &__block_descriptor_tmp_42_3;
  v99[4] = this;
  v99[5] = v3;
  xpc_object_t v100 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  uint64_t v32 = _Block_copy(v99);
  uint64_t v33 = *((void *)this + 17);
  if (v33) {
    dispatch_retain(*((dispatch_object_t *)this + 17));
  }
  *(void *)std::string buf = v32;
  *(void *)&uint8_t buf[8] = v33;
  uint64_t v97 = (void *)0xAAAAAAAAAAAAAAAALL;
  dispatch_object_t object = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
  v95[0] = MEMORY[0x1E4F143A8];
  v95[1] = 1174405120;
  v95[2] = ___ZN15TransportModule25finishInitialization_syncEv_block_invoke_43;
  v95[3] = &__block_descriptor_tmp_47_3;
  v95[4] = this;
  v95[5] = v3;
  __darwin_ino64_t v96 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  uint64_t v34 = _Block_copy(v95);
  size_t v35 = *((void *)this + 17);
  if (v35) {
    dispatch_retain(*((dispatch_object_t *)this + 17));
  }
  uint64_t v97 = v34;
  dispatch_object_t object = v35;
  uint64_t v93 = (void *)0xAAAAAAAAAAAAAAAALL;
  dispatch_object_t v94 = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
  v91[0] = MEMORY[0x1E4F143A8];
  v91[1] = 1174405120;
  v91[2] = ___ZN15TransportModule25finishInitialization_syncEv_block_invoke_48;
  v91[3] = &__block_descriptor_tmp_51_2;
  v91[4] = this;
  v91[5] = v3;
  int v92 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  uint64_t v36 = _Block_copy(v91);
  size_t v37 = *((void *)this + 17);
  if (v37) {
    dispatch_retain(*((dispatch_object_t *)this + 17));
  }
  uint64_t v93 = v36;
  dispatch_object_t v94 = v37;
  xpc_object_t v89 = (void *)0xAAAAAAAAAAAAAAAALL;
  dispatch_object_t v90 = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
  v87[0] = MEMORY[0x1E4F143A8];
  v87[1] = 1174405120;
  v87[2] = ___ZN15TransportModule25finishInitialization_syncEv_block_invoke_52;
  v87[3] = &__block_descriptor_tmp_55_1;
  v87[4] = this;
  v87[5] = v3;
  uint64_t v88 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  uint64_t v38 = _Block_copy(v87);
  size_t v39 = *((void *)this + 17);
  if (v39) {
    dispatch_retain(*((dispatch_object_t *)this + 17));
  }
  xpc_object_t v89 = v38;
  dispatch_object_t v90 = v39;
  uint64_t v40 = (const void *)*MEMORY[0x1E4F4CEF8];
  size_t v41 = strlen((const char *)*MEMORY[0x1E4F4CEF8]);
  if (v41 > 0x7FFFFFFFFFFFFFF7) {
    goto LABEL_171;
  }
  uint64_t v42 = (void *)v41;
  if (v41 >= 0x17)
  {
    uint64_t v45 = (v41 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v41 | 7) != 0x17) {
      uint64_t v45 = v41 | 7;
    }
    uint64_t v46 = v45 + 1;
    size_t v43 = operator new(v45 + 1);
    __p[1] = v42;
    unint64_t v86 = v46 | 0x8000000000000000;
    __p[0] = v43;
LABEL_75:
    memmove(v43, v40, (size_t)v42);
    *((unsigned char *)v42 + (void)v43) = 0;
    uint64_t v44 = v97;
    if (!v97) {
      goto LABEL_77;
    }
    goto LABEL_76;
  }
  HIBYTE(v86) = v41;
  size_t v43 = __p;
  if (v41) {
    goto LABEL_75;
  }
  LOBYTE(__p[0]) = 0;
  uint64_t v44 = v97;
  if (v97) {
LABEL_76:
  }
    uint64_t v44 = _Block_copy(v44);
LABEL_77:
  xpc_object_t v83 = v44;
  dispatch_object_t v84 = object;
  if (object) {
    dispatch_retain(object);
  }
  AppleBasebandManager::setEventHandler();
  if (v84) {
    dispatch_release(v84);
  }
  if (v83) {
    _Block_release(v83);
  }
  if (SHIBYTE(v86) < 0) {
    operator delete(__p[0]);
  }
  size_t v47 = (const void *)*MEMORY[0x1E4F4CB10];
  size_t v48 = strlen((const char *)*MEMORY[0x1E4F4CB10]);
  if (v48 > 0x7FFFFFFFFFFFFFF7) {
    goto LABEL_171;
  }
  size_t v49 = (void *)v48;
  if (v48 >= 0x17)
  {
    uint64_t v52 = (v48 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v48 | 7) != 0x17) {
      uint64_t v52 = v48 | 7;
    }
    uint64_t v53 = v52 + 1;
    size_t v50 = operator new(v52 + 1);
    v81[1] = v49;
    unint64_t v82 = v53 | 0x8000000000000000;
    v81[0] = v50;
LABEL_93:
    memmove(v50, v47, (size_t)v49);
    *((unsigned char *)v49 + (void)v50) = 0;
    uint64_t v51 = *(void **)buf;
    if (!*(void *)buf) {
      goto LABEL_95;
    }
    goto LABEL_94;
  }
  HIBYTE(v82) = v48;
  size_t v50 = v81;
  if (v48) {
    goto LABEL_93;
  }
  LOBYTE(v81[0]) = 0;
  uint64_t v51 = *(void **)buf;
  if (*(void *)buf) {
LABEL_94:
  }
    uint64_t v51 = _Block_copy(v51);
LABEL_95:
  xpc_object_t v79 = v51;
  dispatch_object_t v80 = *(dispatch_object_t *)&buf[8];
  if (*(void *)&buf[8]) {
    dispatch_retain(*(dispatch_object_t *)&buf[8]);
  }
  AppleBasebandManager::setEventHandler();
  if (v80) {
    dispatch_release(v80);
  }
  if (v79) {
    _Block_release(v79);
  }
  if (SHIBYTE(v82) < 0) {
    operator delete(v81[0]);
  }
  xpc_object_t v54 = (const void *)*MEMORY[0x1E4F4CD28];
  size_t v55 = strlen((const char *)*MEMORY[0x1E4F4CD28]);
  if (v55 > 0x7FFFFFFFFFFFFFF7) {
    goto LABEL_171;
  }
  xpc_object_t v56 = (void *)v55;
  if (v55 >= 0x17)
  {
    uint64_t v59 = (v55 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v55 | 7) != 0x17) {
      uint64_t v59 = v55 | 7;
    }
    uint64_t v60 = v59 + 1;
    xpc_object_t v57 = operator new(v59 + 1);
    v77[1] = v56;
    unint64_t v78 = v60 | 0x8000000000000000;
    v77[0] = v57;
LABEL_111:
    memmove(v57, v54, (size_t)v56);
    *((unsigned char *)v56 + (void)v57) = 0;
    uint64_t v58 = v93;
    if (!v93) {
      goto LABEL_113;
    }
    goto LABEL_112;
  }
  HIBYTE(v78) = v55;
  xpc_object_t v57 = v77;
  if (v55) {
    goto LABEL_111;
  }
  LOBYTE(v77[0]) = 0;
  uint64_t v58 = v93;
  if (v93) {
LABEL_112:
  }
    uint64_t v58 = _Block_copy(v58);
LABEL_113:
  xpc_object_t v75 = v58;
  dispatch_object_t v76 = v94;
  if (v94) {
    dispatch_retain(v94);
  }
  AppleBasebandManager::setEventHandler();
  if (v76) {
    dispatch_release(v76);
  }
  if (v75) {
    _Block_release(v75);
  }
  if (SHIBYTE(v78) < 0) {
    operator delete(v77[0]);
  }
  long long v61 = (const void *)*MEMORY[0x1E4F4CB18];
  size_t v62 = strlen((const char *)*MEMORY[0x1E4F4CB18]);
  if (v62 > 0x7FFFFFFFFFFFFFF7) {
    goto LABEL_171;
  }
  uint64_t v63 = (void *)v62;
  if (v62 >= 0x17)
  {
    uint64_t v68 = (v62 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v62 | 7) != 0x17) {
      uint64_t v68 = v62 | 7;
    }
    uint64_t v69 = v68 + 1;
    xpc_object_t v64 = operator new(v68 + 1);
    v73[1] = v63;
    unint64_t v74 = v69 | 0x8000000000000000;
    v73[0] = v64;
  }
  else
  {
    HIBYTE(v74) = v62;
    xpc_object_t v64 = v73;
    if (!v62)
    {
      LOBYTE(v73[0]) = 0;
      xpc_object_t v65 = v89;
      if (v89) {
        goto LABEL_125;
      }
      goto LABEL_162;
    }
  }
  memmove(v64, v61, (size_t)v63);
  *((unsigned char *)v63 + (void)v64) = 0;
  xpc_object_t v65 = v89;
  if (v89)
  {
LABEL_125:
    size_t v66 = _Block_copy(v65);
    size_t v67 = v90;
    xpc_object_t v71 = v66;
    xpc_object_t v72 = v90;
    if (!v90) {
      goto LABEL_127;
    }
    goto LABEL_126;
  }
LABEL_162:
  size_t v67 = v90;
  xpc_object_t v71 = 0;
  xpc_object_t v72 = v90;
  if (v90) {
LABEL_126:
  }
    dispatch_retain(v67);
LABEL_127:
  AppleBasebandManager::setEventHandler();
  if (v72) {
    dispatch_release(v72);
  }
  if (v71) {
    _Block_release(v71);
  }
  if (SHIBYTE(v74) < 0) {
    operator delete(v73[0]);
  }
  AppleBasebandManager::eventsOn(*((AppleBasebandManager **)this + 25));
  if (v67) {
    dispatch_release(v67);
  }
  if (v65) {
    _Block_release(v65);
  }
  if (v88) {
    std::__shared_weak_count::__release_weak(v88);
  }
  if (v94) {
    dispatch_release(v94);
  }
  if (v93) {
    _Block_release(v93);
  }
  if (v92) {
    std::__shared_weak_count::__release_weak(v92);
  }
  if (object) {
    dispatch_release(object);
  }
  if (v97) {
    _Block_release(v97);
  }
  if (v96) {
    std::__shared_weak_count::__release_weak(v96);
  }
  if (*(void *)&buf[8]) {
    dispatch_release(*(dispatch_object_t *)&buf[8]);
  }
  if (*(void *)buf) {
    _Block_release(*(const void **)buf);
  }
  if (v100) {
    std::__shared_weak_count::__release_weak(v100);
  }
  std::__shared_weak_count::__release_weak(v5);
}

void sub_1C5939A30(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void ___ZN15TransportModule25finishInitialization_syncEv_block_invoke(void *a1, uint64_t a2)
{
  uint64_t v64 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    uint64_t v5 = a1[4];
    xpc_object_t v6 = std::__shared_weak_count::lock(v3);
    uint64_t v52 = v6;
    if (v6)
    {
      if (!a1[5])
      {
        uint64_t v11 = v6;
LABEL_92:
        if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
        return;
      }
      size_t v7 = (_DWORD *)(v5 + 152);
      int v8 = *(_DWORD *)(v5 + 152);
      xpc_object_t v9 = *(xpc_object_t *)(v5 + 160);
      if (v9)
      {
        xpc_retain(*(xpc_object_t *)(v5 + 160));
        *size_t v7 = *(_DWORD *)a2;
        xpc_object_t v10 = *(xpc_object_t *)(a2 + 8);
        if (v10)
        {
LABEL_6:
          xpc_retain(v10);
          goto LABEL_10;
        }
      }
      else
      {
        xpc_object_t v9 = xpc_null_create();
        *size_t v7 = *(_DWORD *)a2;
        xpc_object_t v10 = *(xpc_object_t *)(a2 + 8);
        if (v10) {
          goto LABEL_6;
        }
      }
      xpc_object_t v10 = xpc_null_create();
LABEL_10:
      long long v12 = *(void **)(v5 + 160);
      *(void *)(v5 + 160) = v10;
      xpc_release(v12);
      if (v8 != 2) {
        goto LABEL_91;
      }
      if (*v7 != 3)
      {
        BOOL v15 = *(NSObject **)(v5 + 88);
        if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
        {
          WakeReason::describe((WakeReason *)&block, (_DWORD *)(v5 + 152));
          size_t v27 = SHIBYTE(v56) >= 0 ? (void **)&block : block;
          LODWORD(buf) = 136315138;
          *(void *)((char *)&buf + 4) = v27;
          _os_log_error_impl(&dword_1C5767000, v15, OS_LOG_TYPE_ERROR, "Baseband wake data (Error): %s", (uint8_t *)&buf, 0xCu);
          if (SHIBYTE(v56) < 0) {
            operator delete(block);
          }
        }
        uint64_t v16 = *(void *)(v5 + 184);
        if (v16)
        {
          *(void *)&long long buf = MEMORY[0x1E4F143A8];
          *((void *)&buf + 1) = 0x40000000;
          long long v61 = ___ZN4data16TransportService5State17unblockThrottlingEv_block_invoke;
          size_t v62 = &__block_descriptor_tmp_61_0;
          uint64_t v63 = v16;
          p_long long buf = &buf;
          blocuint64_t k = (void **)MEMORY[0x1E4F143A8];
          uint64_t v55 = 0x40000000;
          xpc_object_t v56 = ___ZNK3ctu20SharedSynchronizableIN4data16TransportService5StateEE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS9__block_invoke;
          xpc_object_t v57 = &__block_descriptor_tmp_55_0;
          uint64_t v58 = v16 + 72;
          p_p_long long buf = &p_buf;
          size_t v17 = *(NSObject **)(v16 + 88);
          if (*(void *)(v16 + 96)) {
            dispatch_async_and_wait(v17, &block);
          }
          else {
            dispatch_sync(v17, &block);
          }
        }
LABEL_91:
        xpc_release(v9);
        uint64_t v11 = v52;
        if (!v52) {
          return;
        }
        goto LABEL_92;
      }
      size_t v13 = *(void **)(v5 + 160);
      xpc_object_t xdict = v13;
      if (v13)
      {
        xpc_retain(v13);
        xpc_object_t v14 = xdict;
      }
      else
      {
        xpc_object_t v14 = xpc_null_create();
        xpc_object_t xdict = v14;
      }
      uint64_t v18 = MEMORY[0x1C8792D30](v14);
      uint64_t v19 = MEMORY[0x1E4F14590];
      if (v18 == MEMORY[0x1E4F14590])
      {
        *(void *)&long long buf = 0xAAAAAAAAAAAAAAAALL;
        uint64_t v22 = *MEMORY[0x1E4F4CC78];
        blocuint64_t k = &xdict;
        uint64_t v55 = v22;
        xpc::dict::object_proxy::operator xpc::dict((uint64_t)&block, &buf);
        xpc_object_t value = (void **)xpc_dictionary_get_value(xdict, (const char *)*MEMORY[0x1E4F4CF80]);
        blocuint64_t k = value;
        if (value) {
          xpc_retain(value);
        }
        else {
          blocuint64_t k = (void **)xpc_null_create();
        }
        int v21 = xpc::dyn_cast_or_default((xpc *)&block, 0);
        xpc_release(block);
        uint64_t v24 = (void **)xpc_dictionary_get_value(xdict, (const char *)*MEMORY[0x1E4F4C910]);
        blocuint64_t k = v24;
        if (v24) {
          xpc_retain(v24);
        }
        else {
          blocuint64_t k = (void **)xpc_null_create();
        }
        int v20 = xpc::dyn_cast_or_default((xpc *)&block, 0);
        xpc_release(block);
        if (MEMORY[0x1C8792D30](buf) == v19)
        {
          uint64_t v26 = (void **)xpc_dictionary_get_value((xpc_object_t)buf, (const char *)*MEMORY[0x1E4F4CA50]);
          blocuint64_t k = v26;
          if (v26) {
            xpc_retain(v26);
          }
          else {
            blocuint64_t k = (void **)xpc_null_create();
          }
          char v25 = xpc::dyn_cast_or_default((xpc *)&block, 0);
          xpc_release(block);
        }
        else
        {
          char v25 = 0;
        }
        xpc_release((xpc_object_t)buf);
        if (v25) {
          goto LABEL_55;
        }
      }
      else
      {
        int v20 = 0;
        int v21 = 0;
      }
      uint64_t v28 = *(void *)(v5 + 184);
      if (v28)
      {
        *(void *)&long long buf = MEMORY[0x1E4F143A8];
        *((void *)&buf + 1) = 0x40000000;
        long long v61 = ___ZN4data16TransportService5State17unblockThrottlingEv_block_invoke;
        size_t v62 = &__block_descriptor_tmp_61_0;
        uint64_t v63 = v28;
        p_long long buf = &buf;
        blocuint64_t k = (void **)MEMORY[0x1E4F143A8];
        uint64_t v55 = 0x40000000;
        xpc_object_t v56 = ___ZNK3ctu20SharedSynchronizableIN4data16TransportService5StateEE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS9__block_invoke;
        xpc_object_t v57 = &__block_descriptor_tmp_55_0;
        uint64_t v58 = v28 + 72;
        p_p_long long buf = &p_buf;
        uint64_t v29 = *(NSObject **)(v28 + 88);
        if (*(void *)(v28 + 96))
        {
          dispatch_async_and_wait(v29, &block);
          if ((v21 & 1) == 0) {
            goto LABEL_43;
          }
LABEL_56:
          TransportModule::claimSystemWake_sync((TransportModule *)v5);
          TransportModule::notifyWakeToNetworkStack_sync((TransportModule *)v5);
          uint64_t v34 = (const void *)*MEMORY[0x1E4F4CA10];
          size_t v35 = strlen((const char *)*MEMORY[0x1E4F4CA10]);
          if (v35 >= 0x7FFFFFFFFFFFFFF8) {
            std::string::__throw_length_error[abi:ne180100]();
          }
          uint64_t v36 = (void *)v35;
          if (v35 >= 0x17)
          {
            uint64_t v38 = (v35 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v35 | 7) != 0x17) {
              uint64_t v38 = v35 | 7;
            }
            uint64_t v39 = v38 + 1;
            size_t v37 = (void **)operator new(v38 + 1);
            __dst[1] = v36;
            unint64_t v49 = v39 | 0x8000000000000000;
            __dst[0] = v37;
          }
          else
          {
            HIBYTE(v49) = v35;
            size_t v37 = __dst;
            if (!v35)
            {
LABEL_64:
              *((unsigned char *)v36 + (void)v37) = 0;
              xpc_object_t v40 = *(xpc_object_t *)(v5 + 160);
              if (v40)
              {
                xpc_retain(*(xpc_object_t *)(v5 + 160));
                *(void *)&long long buf = v40;
              }
              else
              {
                xpc_object_t v40 = xpc_null_create();
                *(void *)&long long buf = v40;
                if (!v40)
                {
                  xpc_object_t v40 = 0;
                  *(void *)&long long buf = xpc_null_create();
LABEL_70:
                  xpc::bridge((uint64_t *)&block, (xpc *)&buf, v41);
                  uint64_t v42 = block;
                  if (block && (CFTypeID v43 = CFGetTypeID(block), v43 == CFDictionaryGetTypeID()))
                  {
                    CFTypeRef cf = v42;
                    CFRetain(v42);
                  }
                  else
                  {
                    CFTypeRef cf = 0;
                  }
                  aBlocuint64_t k = 0;
                  Service::broadcastEvent(v5, (uint64_t)__dst, &cf, (const void **)&aBlock);
                  if (aBlock) {
                    _Block_release(aBlock);
                  }
                  if (cf) {
                    CFRelease(cf);
                  }
                  if (block) {
                    CFRelease(block);
                  }
                  xpc_release((xpc_object_t)buf);
                  *(void *)&long long buf = 0;
                  xpc_release(v40);
                  if (SHIBYTE(v49) < 0) {
                    operator delete(__dst[0]);
                  }
                  uint64_t v44 = *(NSObject **)(v5 + 88);
                  if (!os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT)) {
                    goto LABEL_89;
                  }
                  WakeReason::describe((WakeReason *)&block, (_DWORD *)(v5 + 152));
                  if (SHIBYTE(v56) >= 0) {
                    p_blocuint64_t k = &block;
                  }
                  else {
                    p_blocuint64_t k = (void ***)block;
                  }
                  LODWORD(buf) = 136315138;
                  *(void *)((char *)&buf + 4) = p_block;
                  _os_log_impl(&dword_1C5767000, v44, OS_LOG_TYPE_DEFAULT, "#I Baseband wake data (Did wake AP): %s", (uint8_t *)&buf, 0xCu);
                  goto LABEL_87;
                }
              }
              xpc_retain(v40);
              goto LABEL_70;
            }
          }
          memmove(v37, v34, (size_t)v36);
          goto LABEL_64;
        }
        dispatch_sync(v29, &block);
        if (v21) {
          goto LABEL_56;
        }
LABEL_43:
        size_t v30 = *(NSObject **)(v5 + 88);
        if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
        {
          WakeReason::describe((WakeReason *)&block, (_DWORD *)(v5 + 152));
          uint64_t v31 = SHIBYTE(v56) >= 0 ? (void **)&block : block;
          LODWORD(buf) = 136315138;
          *(void *)((char *)&buf + 4) = v31;
          _os_log_impl(&dword_1C5767000, v30, OS_LOG_TYPE_DEFAULT, "#I Baseband wake data (Did NOT wake AP): %s", (uint8_t *)&buf, 0xCu);
          if (SHIBYTE(v56) < 0) {
            operator delete(block);
          }
        }
        if (!v20) {
          goto LABEL_90;
        }
        uint64_t v32 = *(NSObject **)(v5 + 88);
        if (!os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
        {
LABEL_89:
          TransportModule::submitMetric_sync((TransportModule *)v5, &xdict);
LABEL_90:
          xpc_release(xdict);
          goto LABEL_91;
        }
        WakeReason::describe((WakeReason *)&block, (_DWORD *)(v5 + 152));
        if (SHIBYTE(v56) >= 0) {
          uint64_t v33 = &block;
        }
        else {
          uint64_t v33 = (void ***)block;
        }
        LODWORD(buf) = 136315138;
        *(void *)((char *)&buf + 4) = v33;
        _os_log_error_impl(&dword_1C5767000, v32, OS_LOG_TYPE_ERROR, "System and Baseband wake reason mismatch: %s", (uint8_t *)&buf, 0xCu);
LABEL_87:
        if (SHIBYTE(v56) < 0) {
          operator delete(block);
        }
        goto LABEL_89;
      }
LABEL_55:
      if (v21) {
        goto LABEL_56;
      }
      goto LABEL_43;
    }
  }
}

void sub_1C593A3B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *aBlock, char a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, xpc_object_t a18, char a19, uint64_t a20,uint64_t a21,xpc_object_t object)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void TransportModule::notifyWakeToNetworkStack_sync(TransportModule *this)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if (*((_DWORD *)this + 38) == 3)
  {
    xpc_object_t v2 = (xpc_object_t)*((void *)this + 20);
    if (v2) {
      xpc_retain(*((xpc_object_t *)this + 20));
    }
    else {
      xpc_object_t v2 = xpc_null_create();
    }
    if (xpc::operator==<char const*>(MEMORY[0x1E4F4C618], v2, (char *)*MEMORY[0x1E4F4C568])
      && xpc::operator==<char const*>(MEMORY[0x1E4F4C6F8], v2, (char *)*MEMORY[0x1E4F4C918]))
    {
      int v7 = 15;
      int v3 = sysctlbyname("net.link.generic.system.port_used.wake_pkt_event_notify", 0, 0, &v7, 4uLL);
      xpc_object_t v4 = *((void *)this + 11);
      if (v3)
      {
        if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
        {
          uint64_t v5 = __error();
          xpc_object_t v6 = strerror(*v5);
          *(_DWORD *)long long buf = 136315138;
          xpc_object_t v9 = v6;
          _os_log_error_impl(&dword_1C5767000, v4, OS_LOG_TYPE_ERROR, "Failed to notify networking stack about Baseband wake packet, error: (%s)", buf, 0xCu);
        }
      }
      else if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_1C5767000, v4, OS_LOG_TYPE_DEFAULT, "#I Notified networking stack about Baseband wake packet", buf, 2u);
      }
    }
    xpc_release(v2);
  }
}

void sub_1C593A69C(_Unwind_Exception *a1)
{
  xpc_release(v1);
  _Unwind_Resume(a1);
}

uint64_t WakeReason::describe(WakeReason *this, _DWORD *a2)
{
  unint64_t v35 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v34[7] = v4;
  v34[8] = v4;
  v34[5] = v4;
  v34[6] = v4;
  v34[3] = v4;
  v34[4] = v4;
  v34[1] = v4;
  void v34[2] = v4;
  v34[0] = v4;
  long long v32 = v4;
  long long v33 = v4;
  long long v30 = v4;
  *(_OWORD *)uint64_t v31 = v4;
  long long v28 = v4;
  long long v29 = v4;
  long long v27 = v4;
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v27);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v27, (uint64_t)"WakeStatus:'", 12);
  switch(*a2)
  {
    case 0:
      uint64_t v6 = 13;
      int v7 = "kNotSupported";
      goto LABEL_8;
    case 1:
      uint64_t v6 = 13;
      int v7 = "kNotAvailable";
LABEL_8:
      char v26 = 13;
      __p[0] = *(void **)v7;
      *(void **)((char *)__p + 5) = *(void **)(v7 + 5);
      BYTE5(__p[1]) = 0;
      break;
    case 2:
      uint64_t v6 = 10;
      char v26 = 10;
      LOWORD(__p[1]) = 25701;
      int v8 = "kRequested";
      goto LABEL_6;
    case 3:
      uint64_t v6 = 10;
      char v26 = 10;
      LOWORD(__p[1]) = 25964;
      int v8 = "kAvailable";
LABEL_6:
      __p[0] = *(void **)v8;
      BYTE2(__p[1]) = 0;
      break;
    case 4:
      uint64_t v6 = 6;
      char v26 = 6;
      strcpy((char *)__p, "kError");
      break;
    default:
      uint64_t v6 = 8;
      char v26 = 8;
      strcpy((char *)__p, "kInvalid");
      break;
  }
  xpc_object_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)__p, v6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"'", 1);
  if (v26 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v11 = *((void *)a2 + 1);
  uint64_t v10 = (xpc::object *)(a2 + 2);
  if (MEMORY[0x1C8792D30](v11) == MEMORY[0x1E4F14590])
  {
    long long v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v27, (uint64_t)" WakeData:'", 11);
    xpc::object::to_string((uint64_t *)__p, v10);
    size_t v13 = v26 >= 0 ? __p : (void **)__p[0];
    xpc_object_t v14 = v26 >= 0 ? (void *)v26 : __p[1];
    BOOL v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)v13, (uint64_t)v14);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"'", 1);
    if (v26 < 0)
    {
      operator delete(__p[0]);
      char v16 = BYTE8(v33);
      if ((BYTE8(v33) & 0x10) == 0) {
        goto LABEL_21;
      }
LABEL_25:
      uint64_t v19 = v33;
      if ((unint64_t)v33 < *((void *)&v30 + 1))
      {
        *(void *)&long long v33 = *((void *)&v30 + 1);
        uint64_t v19 = *((void *)&v30 + 1);
      }
      uint64_t v18 = (const void **)&v30;
      goto LABEL_28;
    }
  }
  char v16 = BYTE8(v33);
  if ((BYTE8(v33) & 0x10) != 0) {
    goto LABEL_25;
  }
LABEL_21:
  if ((v16 & 8) == 0)
  {
    size_t v17 = 0;
    *((unsigned char *)this + 23) = 0;
    goto LABEL_36;
  }
  uint64_t v18 = (const void **)&v28 + 1;
  uint64_t v19 = *((void *)&v29 + 1);
LABEL_28:
  int v20 = *v18;
  size_t v17 = v19 - (void)*v18;
  if (v17 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v17 >= 0x17)
  {
    uint64_t v21 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v17 | 7) != 0x17) {
      uint64_t v21 = v17 | 7;
    }
    uint64_t v22 = v21 + 1;
    size_t v23 = (WakeReason *)operator new(v21 + 1);
    *((void *)this + 1) = v17;
    *((void *)this + 2) = v22 | 0x8000000000000000;
    *(void *)this = v23;
    this = v23;
    goto LABEL_35;
  }
  *((unsigned char *)this + 23) = v17;
  if (v17) {
LABEL_35:
  }
    memmove(this, v20, v17);
LABEL_36:
  *((unsigned char *)this + v17) = 0;
  *(void *)&long long v27 = *MEMORY[0x1E4FBA418];
  *(void *)((char *)&v27 + *(void *)(v27 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  *((void *)&v27 + 1) = MEMORY[0x1E4FBA470] + 16;
  if (SHIBYTE(v32) < 0) {
    operator delete(v31[1]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1C8791FB0](v34);
}

void sub_1C593AA9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
}

uint64_t dispatch::callback<void({block_pointer})(WakeReason)>::~callback(uint64_t a1)
{
  xpc_object_t v2 = *(NSObject **)(a1 + 8);
  if (v2) {
    dispatch_release(v2);
  }
  if (*(void *)a1) {
    _Block_release(*(const void **)a1);
  }
  return a1;
}

void ___ZN15TransportModule25finishInitialization_syncEv_block_invoke_38(void *a1, abm::client::Event **a2)
{
  uint64_t v69 = *MEMORY[0x1E4F143B8];
  int v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    uint64_t v5 = (void *)a1[4];
    uint64_t v6 = std::__shared_weak_count::lock(v3);
    long long v61 = v6;
    if (v6)
    {
      if (!a1[5])
      {
        BOOL v15 = v6;
LABEL_64:
        if (!atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
        return;
      }
      int v7 = v5[11];
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_1C5767000, v7, OS_LOG_TYPE_DEFAULT, "#I --------------- ABM Transport state ---------------", buf, 2u);
      }
      int v8 = (void *)v5[23];
      if (v8)
      {
        __dst[0] = (void *)MEMORY[0x1E4F143A8];
        __dst[1] = (void *)0x40000000;
        xpc_object_t __dst[2] = ___ZNK4data16TransportService5State9dumpStateEv_block_invoke;
        __dst[3] = &__block_descriptor_tmp_60_0;
        __p[0] = __dst;
        xpc_object_t __dst[4] = v8;
        *(void *)long long buf = MEMORY[0x1E4F143A8];
        *(void *)&uint8_t buf[8] = 0x40000000;
        *(void *)&uint8_t buf[16] = ___ZNK3ctu20SharedSynchronizableIN4data16TransportService5StateEE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS9__block_invoke;
        xpc_object_t v65 = &__block_descriptor_tmp_55_0;
        size_t v66 = v8 + 9;
        size_t v67 = __p;
        xpc_object_t v9 = v8[11];
        if (!v8[12])
        {
          dispatch_sync(v9, buf);
          uint64_t v10 = v5[21];
          if (!v10)
          {
LABEL_11:
            CFTypeRef cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
            abm::client::Event::getData((uint64_t *)&cf, *a2);
            v58[0] = 0xAAAAAAAAAAAAAAAALL;
            v58[1] = 0xAAAAAAAAAAAAAAAALL;
            ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v58, (const __CFDictionary *)cf);
            memset(buf, 170, sizeof(buf));
            uint64_t v11 = (const void *)*MEMORY[0x1E4F4C3A0];
            size_t v12 = strlen((const char *)*MEMORY[0x1E4F4C3A0]);
            if (v12 > 0x7FFFFFFFFFFFFFF7) {
              std::string::__throw_length_error[abi:ne180100]();
            }
            size_t v13 = (void *)v12;
            if (v12 >= 0x17)
            {
              uint64_t v16 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v12 | 7) != 0x17) {
                uint64_t v16 = v12 | 7;
              }
              uint64_t v17 = v16 + 1;
              xpc_object_t v14 = (void **)operator new(v16 + 1);
              __dst[1] = v13;
              xpc_object_t __dst[2] = (void *)(v17 | 0x8000000000000000);
              __dst[0] = v14;
            }
            else
            {
              HIBYTE(__dst[2]) = v12;
              xpc_object_t v14 = __dst;
              if (!v12)
              {
LABEL_20:
                uint64_t v18 = (const char *)*MEMORY[0x1E4F4C4C8];
                *((unsigned char *)v13 + (void)v14) = 0;
                ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)__p, v18);
                ctu::cf::map_adapter::getString();
                MEMORY[0x1C8791110](__p);
                if (SHIBYTE(__dst[2]) < 0) {
                  operator delete(__dst[0]);
                }
                memset(__dst, 170, 24);
                uint64_t v19 = (const void *)*MEMORY[0x1E4F4F928];
                size_t v20 = strlen((const char *)*MEMORY[0x1E4F4F928]);
                if (v20 > 0x7FFFFFFFFFFFFFF7) {
                  std::string::__throw_length_error[abi:ne180100]();
                }
                uint64_t v21 = (void *)v20;
                if (v20 >= 0x17)
                {
                  uint64_t v23 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v20 | 7) != 0x17) {
                    uint64_t v23 = v20 | 7;
                  }
                  uint64_t v24 = v23 + 1;
                  uint64_t v22 = operator new(v23 + 1);
                  __p[1] = v21;
                  std::string __p[2] = (void *)(v24 | 0x8000000000000000);
                  __p[0] = v22;
                }
                else
                {
                  HIBYTE(__p[2]) = v20;
                  uint64_t v22 = __p;
                  if (!v20)
                  {
LABEL_30:
                    char v25 = (const char *)*MEMORY[0x1E4F4C7F8];
                    *((unsigned char *)v21 + (void)v22) = 0;
                    ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v68, v25);
                    ctu::cf::map_adapter::getString();
                    MEMORY[0x1C8791110](&v68);
                    if (SHIBYTE(__p[2]) < 0) {
                      operator delete(__p[0]);
                    }
                    memset(__p, 170, sizeof(__p));
                    char v26 = (const char *)*MEMORY[0x1E4F4C820];
                    size_t v27 = strlen((const char *)*MEMORY[0x1E4F4C820]);
                    if (v27 > 0x7FFFFFFFFFFFFFF7) {
                      std::string::__throw_length_error[abi:ne180100]();
                    }
                    std::string::size_type v28 = v27;
                    if (v27 >= 0x17)
                    {
                      uint64_t v30 = (v27 & 0xFFFFFFFFFFFFFFF8) + 8;
                      if ((v27 | 7) != 0x17) {
                        uint64_t v30 = v27 | 7;
                      }
                      uint64_t v31 = v30 + 1;
                      long long v29 = (std::string *)operator new(v30 + 1);
                      v68.__r_.__value_.__l.__size_ = v28;
                      v68.__r_.__value_.__r.__words[2] = v31 | 0x8000000000000000;
                      v68.__r_.__value_.__r.__words[0] = (std::string::size_type)v29;
                    }
                    else
                    {
                      *((unsigned char *)&v68.__r_.__value_.__s + 23) = v27;
                      long long v29 = &v68;
                      if (!v27)
                      {
LABEL_40:
                        long long v32 = (const char *)*MEMORY[0x1E4F4C6A0];
                        v29->__r_.__value_.__s.__data_[v28] = 0;
                        ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v62, v32);
                        ctu::cf::map_adapter::getString();
                        MEMORY[0x1C8791110](&v62);
                        if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0) {
                          operator delete(v68.__r_.__value_.__l.__data_);
                        }
                        int v33 = SHIBYTE(__p[2]);
                        if (SHIBYTE(__p[2]) >= 0) {
                          size_t v34 = HIBYTE(__p[2]);
                        }
                        else {
                          size_t v34 = (size_t)__p[1];
                        }
                        if (v34 == strlen(v26)
                          && (SHIBYTE(__p[2]) >= 0 ? (unint64_t v35 = __p) : (unint64_t v35 = (void **)__p[0]), !memcmp(v35, v26, v34)))
                        {
                          uint64_t v39 = v5[21];
                          if (v39)
                          {
                            xpc_object_t v40 = (const void *)*MEMORY[0x1E4F4F918];
                            int v41 = SHIBYTE(__dst[2]);
                            if (SHIBYTE(__dst[2]) >= 0) {
                              size_t v42 = HIBYTE(__dst[2]);
                            }
                            else {
                              size_t v42 = (size_t)__dst[1];
                            }
                            size_t v43 = strlen((const char *)*MEMORY[0x1E4F4F918]);
                            std::string::size_type v44 = v42 + v43;
                            memset(&v68, 170, sizeof(v68));
                            if (v42 + v43 > 0x7FFFFFFFFFFFFFF7) {
                              std::string::__throw_length_error[abi:ne180100]();
                            }
                            size_t v45 = v43;
                            if (v44 > 0x16)
                            {
                              uint64_t v47 = (v44 & 0xFFFFFFFFFFFFFFF8) + 8;
                              if ((v44 | 7) != 0x17) {
                                uint64_t v47 = v44 | 7;
                              }
                              uint64_t v48 = v47 + 1;
                              uint64_t v46 = (std::string *)operator new(v47 + 1);
                              v68.__r_.__value_.__l.__size_ = v44;
                              v68.__r_.__value_.__r.__words[2] = v48 | 0x8000000000000000;
                              v68.__r_.__value_.__r.__words[0] = (std::string::size_type)v46;
                            }
                            else
                            {
                              memset(&v68, 0, sizeof(v68));
                              uint64_t v46 = &v68;
                              *((unsigned char *)&v68.__r_.__value_.__s + 23) = v42 + v43;
                            }
                            if (v42)
                            {
                              if (v41 >= 0) {
                                unint64_t v49 = __dst;
                              }
                              else {
                                unint64_t v49 = (void **)__dst[0];
                              }
                              memmove(v46, v49, v42);
                            }
                            size_t v50 = (char *)v46 + v42;
                            if (v45) {
                              memmove(v50, v40, v45);
                            }
                            v50[v45] = 0;
                            if ((buf[23] & 0x80u) == 0) {
                              uint64_t v51 = buf;
                            }
                            else {
                              uint64_t v51 = *(uint8_t **)buf;
                            }
                            if ((buf[23] & 0x80u) == 0) {
                              std::string::size_type v52 = buf[23];
                            }
                            else {
                              std::string::size_type v52 = *(void *)&buf[8];
                            }
                            uint64_t v53 = std::string::append(&v68, (const std::string::value_type *)v51, v52);
                            long long v54 = *(_OWORD *)&v53->__r_.__value_.__l.__data_;
                            std::string::size_type v56 = v53->__r_.__value_.__r.__words[2];
                            *(_OWORD *)uint64_t v55 = v54;
                            v53->__r_.__value_.__l.__size_ = 0;
                            v53->__r_.__value_.__r.__words[2] = 0;
                            v53->__r_.__value_.__r.__words[0] = 0;
                            (*(void (**)(uint64_t, void **))(*(void *)v39 + 48))(v39, v55);
                            if (SHIBYTE(v56) < 0) {
                              operator delete(v55[0]);
                            }
                            if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0) {
                              operator delete(v68.__r_.__value_.__l.__data_);
                            }
                          }
                        }
                        else
                        {
                          uint64_t v36 = v5[11];
                          if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
                          {
                            size_t v37 = (void **)__p[0];
                            if (v33 >= 0) {
                              size_t v37 = __p;
                            }
                            LODWORD(v68.__r_.__value_.__l.__data_) = 136315138;
                            *(std::string::size_type *)((char *)v68.__r_.__value_.__r.__words + 4) = (std::string::size_type)v37;
                            _os_log_impl(&dword_1C5767000, v36, OS_LOG_TYPE_DEFAULT, "#I Skipping snapshot as trace filter is '%s'", (uint8_t *)&v68, 0xCu);
                          }
                        }
                        if (SHIBYTE(__p[2]) < 0)
                        {
                          operator delete(__p[0]);
                          if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
                          {
LABEL_56:
                            if (((char)buf[23] & 0x80000000) == 0) {
                              goto LABEL_57;
                            }
                            goto LABEL_61;
                          }
                        }
                        else if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
                        {
                          goto LABEL_56;
                        }
                        operator delete(__dst[0]);
                        if (((char)buf[23] & 0x80000000) == 0)
                        {
LABEL_57:
                          MEMORY[0x1C8791160](v58);
                          CFTypeRef v38 = cf;
                          if (!cf)
                          {
LABEL_63:
                            BOOL v15 = v61;
                            if (!v61) {
                              return;
                            }
                            goto LABEL_64;
                          }
LABEL_62:
                          CFRelease(v38);
                          goto LABEL_63;
                        }
LABEL_61:
                        operator delete(*(void **)buf);
                        MEMORY[0x1C8791160](v58);
                        CFTypeRef v38 = cf;
                        if (!cf) {
                          goto LABEL_63;
                        }
                        goto LABEL_62;
                      }
                    }
                    memmove(v29, v26, v28);
                    goto LABEL_40;
                  }
                }
                memmove(v22, v19, (size_t)v21);
                goto LABEL_30;
              }
            }
            memmove(v14, v11, (size_t)v13);
            goto LABEL_20;
          }
LABEL_10:
          (*(void (**)(uint64_t))(*(void *)v10 + 40))(v10);
          goto LABEL_11;
        }
        dispatch_async_and_wait(v9, buf);
      }
      uint64_t v10 = v5[21];
      if (!v10) {
        goto LABEL_11;
      }
      goto LABEL_10;
    }
  }
}

void sub_1C593B258(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,const void *a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((*(char *)(v43 - 89) & 0x80000000) == 0)
    {
LABEL_3:
      if ((a21 & 0x80000000) == 0)
      {
LABEL_8:
        if (a35 < 0) {
          operator delete(a30);
        }
        if (a43 < 0) {
          operator delete(a38);
        }
        MEMORY[0x1C8791160](&a22);
        ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&a24);
        std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
        _Unwind_Resume(a1);
      }
LABEL_7:
      operator delete(a16);
      goto LABEL_8;
    }
  }
  else if ((*(char *)(v43 - 89) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(v43 - 112));
  if ((a21 & 0x80000000) == 0) {
    goto LABEL_8;
  }
  goto LABEL_7;
}

void ___ZN15TransportModule25finishInitialization_syncEv_block_invoke_43(void *a1, abm::client::Event **a2)
{
  int v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    uint64_t v5 = a1[4];
    uint64_t v6 = std::__shared_weak_count::lock(v3);
    size_t v34 = v6;
    if (v6)
    {
      int v7 = v6;
      if (!a1[5]) {
        goto LABEL_68;
      }
      int v8 = *(void **)(v5 + 184);
      if (v8)
      {
        __p[0] = (void *)MEMORY[0x1E4F143A8];
        __p[1] = (void *)0x40000000;
        std::string __p[2] = ___ZN4data16TransportService5State17unblockThrottlingEv_block_invoke;
        __p[3] = &__block_descriptor_tmp_61_0;
        v29[0] = __p;
        __p[4] = v8;
        block[0] = (void *)MEMORY[0x1E4F143A8];
        block[1] = (void *)0x40000000;
        block[2] = ___ZNK3ctu20SharedSynchronizableIN4data16TransportService5StateEE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS9__block_invoke;
        block[3] = &__block_descriptor_tmp_55_0;
        block[4] = v8 + 9;
        block[5] = v29;
        xpc_object_t v9 = v8[11];
        if (!v8[12])
        {
          dispatch_sync(v9, block);
          uint64_t v27 = *(void *)(v5 + 168);
          uint64_t v10 = (void (****)(void))(v5 + 168);
          if (v27)
          {
LABEL_8:
            CFTypeRef cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
            abm::client::Event::getData((uint64_t *)&cf, *a2);
            CFTypeRef v12 = cf;
            if (cf) {
              size_t v13 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
            }
            else {
              size_t v13 = 0;
            }
            if (!v13)
            {
LABEL_66:
              if (v12) {
                CFRelease(v12);
              }
              goto LABEL_68;
            }
            v31[0] = 0xAAAAAAAAAAAAAAAALL;
            v31[1] = 0xAAAAAAAAAAAAAAAALL;
            ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v31, (const __CFDictionary *)cf);
            memset(block, 170, 24);
            xpc_object_t v14 = (const char *)*MEMORY[0x1E4F4C688];
            HIBYTE(__p[2]) = 0;
            LOBYTE(__p[0]) = 0;
            ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)v29, v14);
            ctu::cf::map_adapter::getString();
            MEMORY[0x1C8791110](v29);
            if (SHIBYTE(__p[2]) < 0) {
              operator delete(__p[0]);
            }
            memset(__p, 170, 24);
            BOOL v15 = (const char *)*MEMORY[0x1E4F4C690];
            char v30 = 0;
            LOBYTE(v29[0]) = 0;
            ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v35, v15);
            ctu::cf::map_adapter::getString();
            MEMORY[0x1C8791110](&v35);
            if (v30 < 0) {
              operator delete(v29[0]);
            }
            size_t v16 = HIBYTE(block[2]);
            int v17 = SHIBYTE(block[2]);
            uint64_t v18 = block[1];
            if (SHIBYTE(block[2]) >= 0) {
              size_t v19 = HIBYTE(block[2]);
            }
            else {
              size_t v19 = (size_t)block[1];
            }
            if (v19 == strlen((const char *)*MEMORY[0x1E4F4C958]))
            {
              size_t v20 = SHIBYTE(block[2]) >= 0 ? block : (void **)block[0];
              if (!memcmp(v20, (const void *)*MEMORY[0x1E4F4C958], v19))
              {
                (**v10)[1]();
                std::string::size_type v28 = **v10;
LABEL_60:
                (*v28)();
                goto LABEL_61;
              }
            }
            if (v19 == strlen((const char *)*MEMORY[0x1E4F4CCD8]))
            {
              uint64_t v21 = v17 >= 0 ? block : (void **)block[0];
              if (!memcmp(v21, (const void *)*MEMORY[0x1E4F4CCD8], v19))
              {
                uint64_t v22 = SHIBYTE(__p[2]) >= 0 ? (void *)HIBYTE(__p[2]) : __p[1];
                if (v22 == (void *)strlen((const char *)*MEMORY[0x1E4F4C6E8]))
                {
                  uint64_t v23 = SHIBYTE(__p[2]) >= 0 ? __p : (void **)__p[0];
                  if (!memcmp(v23, (const void *)*MEMORY[0x1E4F4C6E8], (size_t)v22))
                  {
                    if (((uint64_t (*)(void))(**v10)[11])())
                    {
LABEL_59:
                      std::string::size_type v28 = **v10 + 2;
                      goto LABEL_60;
                    }
                    size_t v16 = HIBYTE(block[2]);
                    uint64_t v18 = block[1];
                    LOBYTE(v17) = HIBYTE(block[2]);
                  }
                }
              }
            }
            if ((v17 & 0x80u) == 0) {
              size_t v24 = v16;
            }
            else {
              size_t v24 = (size_t)v18;
            }
            if (v24 != strlen((const char *)*MEMORY[0x1E4F4CBC8])
              || ((v17 & 0x80u) == 0 ? (char v25 = block) : (char v25 = (void **)block[0]),
                  memcmp(v25, (const void *)*MEMORY[0x1E4F4CBC8], v24)))
            {
              if (v24 == strlen((const char *)*MEMORY[0x1E4F4CEB8]))
              {
                char v26 = (v17 & 0x80u) == 0 ? block : (void **)block[0];
                if (!memcmp(v26, (const void *)*MEMORY[0x1E4F4CEB8], v24))
                {
                  (**v10)[2]();
                  (**v10)[7]();
                  std::shared_ptr<TransportService>::reset[abi:ne180100](v10);
                }
              }
              goto LABEL_61;
            }
            if (((unsigned int (*)(void))(**v10)[11])()
              && (!((unsigned int (*)(void))(**v10)[11])()
               || !std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)__p, (char *)*MEMORY[0x1E4F4C6F0])))
            {
LABEL_61:
              if (SHIBYTE(__p[2]) < 0) {
                operator delete(__p[0]);
              }
              if (SHIBYTE(block[2]) < 0) {
                operator delete(block[0]);
              }
              MEMORY[0x1C8791160](v31);
              CFTypeRef v12 = cf;
              goto LABEL_66;
            }
            goto LABEL_59;
          }
LABEL_68:
          if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
            std::__shared_weak_count::__release_weak(v7);
          }
          return;
        }
        dispatch_async_and_wait(v9, block);
      }
      uint64_t v11 = *(void *)(v5 + 168);
      uint64_t v10 = (void (****)(void))(v5 + 168);
      if (v11) {
        goto LABEL_8;
      }
      goto LABEL_68;
    }
  }
}

void sub_1C593B934(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, const void *a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a36 < 0) {
    operator delete(a31);
  }
  MEMORY[0x1C8791160](&a15);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&a17);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  _Unwind_Resume(a1);
}

void sub_1C593B9C4()
{
}

void sub_1C593B9CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void ___ZN15TransportModule25finishInitialization_syncEv_block_invoke_48(void *a1)
{
  xpc_object_t v2 = (std::__shared_weak_count *)a1[6];
  if (!v2) {
    return;
  }
  uint64_t v3 = a1[4];
  long long v4 = std::__shared_weak_count::lock(v2);
  if (!v4) {
    return;
  }
  uint64_t v5 = v4;
  if (a1[5])
  {
    uint64_t v6 = *(void *)(v3 + 184);
    if (!v6) {
      goto LABEL_7;
    }
    v9[0] = MEMORY[0x1E4F143A8];
    v9[1] = 0x40000000;
    v9[2] = ___ZN4data16TransportService5State17unblockThrottlingEv_block_invoke;
    v9[3] = &__block_descriptor_tmp_61_0;
    v9[4] = v6;
    uint64_t v10 = v9;
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 0x40000000;
    block[2] = ___ZNK3ctu20SharedSynchronizableIN4data16TransportService5StateEE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS9__block_invoke;
    block[3] = &__block_descriptor_tmp_55_0;
    block[4] = v6 + 72;
    block[5] = &v10;
    int v7 = *(NSObject **)(v6 + 88);
    if (*(void *)(v6 + 96))
    {
      dispatch_async_and_wait(v7, block);
LABEL_7:
      uint64_t v8 = *(void *)(v3 + 168);
      if (!v8) {
        goto LABEL_9;
      }
      goto LABEL_8;
    }
    dispatch_sync(v7, block);
    uint64_t v8 = *(void *)(v3 + 168);
    if (v8) {
LABEL_8:
    }
      (*(void (**)(uint64_t))(*(void *)v8 + 16))(v8);
  }
LABEL_9:
  if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void sub_1C593BB7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void ___ZN15TransportModule25finishInitialization_syncEv_block_invoke_52(void *a1)
{
  xpc_object_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    uint64_t v3 = (void *)a1[4];
    long long v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = a1[5];
      if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v5);
      }
      if (v6)
      {
        int v7 = v3[11];
        if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl(&dword_1C5767000, v7, OS_LOG_TYPE_DEFAULT, "#I --------------- ABM Transport state ---------------", buf, 2u);
        }
        uint64_t v8 = v3[23];
        if (v8)
        {
          v11[0] = MEMORY[0x1E4F143A8];
          v11[1] = 0x40000000;
          uint64_t v11[2] = ___ZNK4data16TransportService5State9dumpStateEv_block_invoke;
          v11[3] = &__block_descriptor_tmp_60_0;
          v11[4] = v8;
          CFTypeRef v12 = v11;
          *(void *)long long buf = MEMORY[0x1E4F143A8];
          uint64_t v14 = 0x40000000;
          BOOL v15 = ___ZNK3ctu20SharedSynchronizableIN4data16TransportService5StateEE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS9__block_invoke;
          size_t v16 = &__block_descriptor_tmp_55_0;
          uint64_t v17 = v8 + 72;
          uint64_t v18 = &v12;
          xpc_object_t v9 = *(NSObject **)(v8 + 88);
          if (!*(void *)(v8 + 96))
          {
            dispatch_sync(v9, buf);
            uint64_t v10 = v3[21];
            if (!v10) {
              return;
            }
LABEL_12:
            (*(void (**)(uint64_t))(*(void *)v10 + 40))(v10);
            return;
          }
          dispatch_async_and_wait(v9, buf);
        }
        uint64_t v10 = v3[21];
        if (!v10) {
          return;
        }
        goto LABEL_12;
      }
    }
  }
}

void TransportModule::sleep(void *a1, dispatch_object_t *a2)
{
  uint64_t v3 = *a2;
  if (*a2)
  {
    dispatch_retain(*a2);
    dispatch_group_enter(v3);
  }
  long long v4 = (std::__shared_weak_count *)a1[16];
  if (!v4 || (uint64_t v5 = a1[15], (v6 = std::__shared_weak_count::lock(v4)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  int v7 = v6;
  uint64_t v8 = operator new(0x10uLL);
  *uint64_t v8 = a1;
  v8[1] = v3;
  xpc_object_t v9 = a1[17];
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v10 = operator new(0x18uLL);
  void *v10 = v8;
  v10[1] = v5;
  _DWORD v10[2] = v7;
  dispatch_async_f(v9, v10, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<TransportModule>::execute_wrapped<TransportModule::sleep(dispatch::group_session)::$_0>(TransportModule::sleep(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<TransportModule::sleep(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<TransportModule::sleep(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke);
  if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void TransportModule::wake(void *a1, dispatch_object_t *a2)
{
  uint64_t v3 = *a2;
  if (*a2)
  {
    dispatch_retain(*a2);
    dispatch_group_enter(v3);
  }
  long long v4 = (std::__shared_weak_count *)a1[16];
  if (!v4 || (uint64_t v5 = a1[15], (v6 = std::__shared_weak_count::lock(v4)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  int v7 = v6;
  uint64_t v8 = operator new(0x10uLL);
  *uint64_t v8 = a1;
  v8[1] = v3;
  xpc_object_t v9 = a1[17];
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v10 = operator new(0x18uLL);
  void *v10 = v8;
  v10[1] = v5;
  _DWORD v10[2] = v7;
  dispatch_async_f(v9, v10, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<TransportModule>::execute_wrapped<TransportModule::wake(dispatch::group_session)::$_0>(TransportModule::wake(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<TransportModule::wake(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<TransportModule::wake(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke);
  if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

BOOL xpc::operator==<char const*>(const char **a1, xpc_object_t xdict, char *key)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, key);
  if (value)
  {
    xpc_object_t v5 = value;
    xpc_retain(value);
  }
  else
  {
    xpc_object_t v5 = xpc_null_create();
  }
  xpc_object_t v6 = xpc_string_create(*a1);
  if (!v6) {
    xpc_object_t v6 = xpc_null_create();
  }
  BOOL v7 = xpc_equal(v6, v5);
  xpc_release(v6);
  xpc_release(v5);
  return v7;
}

void sub_1C593C004(_Unwind_Exception *a1)
{
  xpc_release(v2);
  xpc_release(v1);
  _Unwind_Resume(a1);
}

uint64_t ctu::Loggable<TransportModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig(uint64_t a1)
{
  return MEMORY[0x1F417DA50](a1 + 8);
}

size_t ctu::Loggable<TransportModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = (const char *)(*(uint64_t (**)(void))(*(void *)(a1 - 48) + 16))();
  size_t result = strlen(v3);
  if (result >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v5 = result;
  if (result >= 0x17)
  {
    uint64_t v6 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17) {
      uint64_t v6 = result | 7;
    }
    uint64_t v7 = v6 + 1;
    uint64_t v8 = operator new(v6 + 1);
    a2[1] = v5;
    a2[2] = v7 | 0x8000000000000000;
    *a2 = v8;
    a2 = v8;
  }
  else
  {
    *((unsigned char *)a2 + 23) = result;
    if (!result)
    {
      *(unsigned char *)a2 = 0;
      return result;
    }
  }
  size_t result = (size_t)memmove(a2, v3, v5);
  *((unsigned char *)a2 + v5) = 0;
  return result;
}

uint64_t ctu::Loggable<TransportModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return MEMORY[0x1F417DD10](a1 + 8);
}

void *ctu::Loggable<TransportModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_1F20FE280;
  MEMORY[0x1C8790F40](a1 + 1);
  return a1;
}

void ctu::Loggable<TransportModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_1F20FE280;
  MEMORY[0x1C8790F40](a1 + 1);

  operator delete(a1);
}

void std::__shared_ptr_pointer<TransportModule *,std::shared_ptr<TransportModule> ctu::SharedSynchronizable<TransportModule>::make_shared_ptr<TransportModule>(TransportModule*)::{lambda(TransportModule *)#1},std::allocator<TransportModule>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<TransportModule *,std::shared_ptr<TransportModule> ctu::SharedSynchronizable<TransportModule>::make_shared_ptr<TransportModule>(TransportModule*)::{lambda(TransportModule *)#1},std::allocator<TransportModule>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<TransportModule *,std::shared_ptr<TransportModule> ctu::SharedSynchronizable<TransportModule>::make_shared_ptr<TransportModule>(TransportModule*)::{lambda(TransportModule *)#1},std::allocator<TransportModule>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableI15TransportModuleE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_") {
    return a1 + 24;
  }
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableI15TransportModuleE15make_shared_ptrIS1_EENSt3__110shared_pt"
                                "rIT_EEPS6_EUlPS1_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableI15TransportModuleE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableI15TransportModuleE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24; {
  return 0;
  }
}

uint64_t std::shared_ptr<TransportModule> ctu::SharedSynchronizable<TransportModule>::make_shared_ptr<TransportModule>(TransportModule*)::{lambda(TransportModule*)#1}::operator() const(TransportModule*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void ctu::SharedLoggable<TransportModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(void *a1)
{
  *a1 = &unk_1F20FE280;
  MEMORY[0x1C8790F40](a1 + 1);
  xpc_object_t v2 = a1[12];
  if (v2) {
    dispatch_release(v2);
  }
  unint64_t v3 = a1[11];
  if (v3) {
    dispatch_release(v3);
  }
  long long v4 = (std::__shared_weak_count *)a1[10];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }

  operator delete(a1);
}

void *___ZNK3ctu20SharedSynchronizableI15TransportModuleE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke(uint64_t a1)
{
  return (*(void *(**)(void *__return_ptr))(**(void **)(a1 + 40) + 16))(*(void **)(a1 + 40));
}

void ctu::SharedSynchronizable<TransportModule>::execute_wrapped(uint64_t *a1, uint64_t a2)
{
  unint64_t v3 = (std::__shared_weak_count *)a1[1];
  if (!v3 || (uint64_t v5 = *a1, (v6 = std::__shared_weak_count::lock(v3)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v7 = v6;
  uint64_t v8 = a1[2];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 1174405120;
  block[2] = ___ZNK3ctu20SharedSynchronizableI15TransportModuleE15execute_wrappedEU13block_pointerFvvE_block_invoke;
  block[3] = &unk_1F20FE348;
  block[5] = v5;
  CFTypeRef v12 = v7;
  p_shared_owners = &v7->__shared_owners_;
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  block[4] = a2;
  dispatch_async(v8, block);
  uint64_t v10 = v12;
  if (!v12 || atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      return;
    }
LABEL_8:
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    return;
  }
  ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
  std::__shared_weak_count::__release_weak(v10);
  if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_8;
  }
}

uint64_t ___ZNK3ctu20SharedSynchronizableI15TransportModuleE15execute_wrappedEU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t __copy_helper_block_e8_40c44_ZTSNSt3__110shared_ptrIK15TransportModuleEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c44_ZTSNSt3__110shared_ptrIK15TransportModuleEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void dispatch::async<void ctu::SharedSynchronizable<TransportModule>::execute_wrapped<TransportModule::initialize(dispatch::group_session)::$_0>(TransportModule::initialize(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<TransportModule::initialize(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<TransportModule::initialize(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  uint64_t v2 = *(TransportModule ***)a1;
  TransportModule::finishInitialization_sync(**(TransportModule ***)a1);
  operator delete(v2);
  unint64_t v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    long long v4 = (void *)a1;
  }
  else
  {
    long long v4 = (void *)a1;
  }
  operator delete(v4);
}

void sub_1C593C650(_Unwind_Exception *a1)
{
  operator delete(v2);
  long long v4 = (std::__shared_weak_count *)v1[2];
  if (v4)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void dispatch::async<void ctu::SharedSynchronizable<TransportModule>::execute_wrapped<TransportModule::sleep(dispatch::group_session)::$_0>(TransportModule::sleep(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<TransportModule::sleep(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<TransportModule::sleep(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = **a1;
  long long v4 = *(NSObject **)(v3 + 184);
  if (!v4)
  {
LABEL_4:
    uint64_t v6 = *(void *)(v3 + 168);
    if (!v6) {
      goto LABEL_11;
    }
    goto LABEL_5;
  }
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 0x40000000;
  uint64_t v11[2] = ___ZN4data16TransportService5State13enterLowPowerEv_block_invoke;
  v11[3] = &__block_descriptor_tmp_54;
  v11[4] = v4;
  CFTypeRef v12 = v11;
  block[0] = (dispatch_group_t)MEMORY[0x1E4F143A8];
  block[1] = (dispatch_group_t)0x40000000;
  block[2] = (dispatch_group_t)___ZNK3ctu20SharedSynchronizableIN4data16TransportService5StateEE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS9__block_invoke;
  block[3] = (dispatch_group_t)&__block_descriptor_tmp_55_0;
  block[4] = v4 + 9;
  block[5] = (dispatch_group_t)&v12;
  int isa = v4[11].isa;
  if (v4[12].isa)
  {
    dispatch_async_and_wait(isa, block);
    goto LABEL_4;
  }
  dispatch_sync(isa, block);
  uint64_t v6 = *(void *)(v3 + 168);
  if (!v6) {
    goto LABEL_11;
  }
LABEL_5:
  uint64_t v7 = v2[1];
  block[0] = v7;
  if (v7)
  {
    dispatch_retain(v7);
    dispatch_group_enter(v7);
  }
  (*(void (**)(uint64_t, dispatch_group_t *))(*(void *)v6 + 24))(v6, block);
  if (block[0])
  {
    dispatch_group_leave(block[0]);
    if (block[0]) {
      dispatch_release(block[0]);
    }
  }
LABEL_11:
  uint64_t v8 = v2[1];
  if (v8)
  {
    dispatch_group_leave(v8);
    xpc_object_t v9 = v2[1];
    if (v9) {
      dispatch_release(v9);
    }
  }
  operator delete(v2);
  uint64_t v10 = (std::__shared_weak_count *)a1[2];
  if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  operator delete(a1);
}

void sub_1C593C87C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, dispatch_group_t group)
{
  if (group)
  {
    dispatch_group_leave(group);
    dispatch_release(group);
  }
  uint64_t v18 = v16[1];
  if (v18)
  {
    dispatch_group_leave(v18);
    size_t v19 = v16[1];
    if (v19) {
      dispatch_release(v19);
    }
  }
  operator delete(v16);
  size_t v20 = (std::__shared_weak_count *)v15[2];
  if (v20)
  {
    if (!atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  operator delete(v15);
  _Unwind_Resume(a1);
}

void dispatch::async<void ctu::SharedSynchronizable<TransportModule>::execute_wrapped<TransportModule::wake(dispatch::group_session)::$_0>(TransportModule::wake(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<TransportModule::wake(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<TransportModule::wake(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = **a1;
  uint64_t v4 = *(void *)(v3 + 184);
  if (v4)
  {
    dispatch_group_t group = (dispatch_group_t)MEMORY[0x1E4F143A8];
    uint64_t v15 = 0x40000000;
    size_t v16 = ___ZN4data16TransportService5State12exitLowPowerEv_block_invoke;
    uint64_t v17 = &__block_descriptor_tmp_56_0;
    uint64_t v18 = v4;
    ctu::SharedSynchronizable<data::TransportService::State>::execute_wrapped((uint64_t *)(v4 + 72), (uint64_t)&group);
  }
  if (!*(_DWORD *)(v3 + 152))
  {
    uint64_t v10 = *(void *)(v3 + 184);
    if (v10)
    {
      v12[0] = MEMORY[0x1E4F143A8];
      v12[1] = 0x40000000;
      _DWORD v12[2] = ___ZN4data16TransportService5State17unblockThrottlingEv_block_invoke;
      v12[3] = &__block_descriptor_tmp_61_0;
      v12[4] = v10;
      size_t v13 = v12;
      dispatch_group_t group = (dispatch_group_t)MEMORY[0x1E4F143A8];
      uint64_t v15 = 0x40000000;
      size_t v16 = ___ZNK3ctu20SharedSynchronizableIN4data16TransportService5StateEE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS9__block_invoke;
      uint64_t v17 = &__block_descriptor_tmp_55_0;
      uint64_t v18 = v10 + 72;
      size_t v19 = &v13;
      uint64_t v11 = *(NSObject **)(v10 + 88);
      if (*(void *)(v10 + 96)) {
        dispatch_async_and_wait(v11, &group);
      }
      else {
        dispatch_sync(v11, &group);
      }
    }
  }
  uint64_t v5 = *(void *)(v3 + 168);
  if (v5)
  {
    uint64_t v6 = v2[1];
    dispatch_group_t group = v6;
    if (v6)
    {
      dispatch_retain(v6);
      dispatch_group_enter(v6);
    }
    (*(void (**)(uint64_t, dispatch_group_t *))(*(void *)v5 + 32))(v5, &group);
    if (group)
    {
      dispatch_group_leave(group);
      if (group) {
        dispatch_release(group);
      }
    }
  }
  uint64_t v7 = v2[1];
  if (v7)
  {
    dispatch_group_leave(v7);
    uint64_t v8 = v2[1];
    if (v8) {
      dispatch_release(v8);
    }
  }
  operator delete(v2);
  xpc_object_t v9 = (std::__shared_weak_count *)a1[2];
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  operator delete(a1);
}

void sub_1C593CB38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, dispatch_group_t group)
{
  if (group)
  {
    dispatch_group_leave(group);
    dispatch_release(group);
  }
  uint64_t v18 = v16[1];
  if (v18)
  {
    dispatch_group_leave(v18);
    size_t v19 = v16[1];
    if (v19) {
      dispatch_release(v19);
    }
  }
  operator delete(v16);
  size_t v20 = (std::__shared_weak_count *)v15[2];
  if (v20)
  {
    if (!atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  operator delete(v15);
  _Unwind_Resume(a1);
}

const char *ABMGetProjectVersion(void)
{
  return "AppleBasebandManager-AppleBasebandServices_Manager-1211";
}

void *BasebandTransportMAV::BasebandTransportMAV(void *a1, uint64_t *a2, NSObject **a3)
{
  uint64_t v4 = (std::__shared_weak_count *)a2[1];
  uint64_t v9 = *a2;
  uint64_t v10 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = *a3;
  dispatch_object_t object = v5;
  if (v5) {
    dispatch_retain(v5);
  }
  BasebandTransport::BasebandTransport((uint64_t)a1, &v9, &object);
  if (object) {
    dispatch_release(object);
  }
  uint64_t v6 = v10;
  if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  *a1 = &unk_1F20FE388;
  return a1;
}

void sub_1C593CCAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_object_t object, char a11)
{
  if (object) {
    dispatch_release(object);
  }
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void BasebandTransportMAV::~BasebandTransportMAV(BasebandTransportMAV *this)
{
  BasebandTransport::~BasebandTransport(this);

  operator delete(v1);
}

uint64_t BasebandTransportMAV::switchDIAG_sync(BasebandTransportMAV *this)
{
  uint64_t v1 = *((void *)this + 5);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl(&dword_1C5767000, v1, OS_LOG_TYPE_DEFAULT, "#I Switch succeeded", v3, 2u);
  }
  return 1;
}

void FSModule::create(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  *a2 = 0xAAAAAAAAAAAAAAAALL;
  a2[1] = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v4 = operator new(0x448uLL);
  uint64_t v5 = (uint64_t)v4;
  uint64_t v6 = *a1;
  uint64_t v7 = (std::__shared_weak_count *)a1[1];
  v11[0] = v6;
  v11[1] = (uint64_t)v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  FSModule::FSModule((uint64_t)v4, v11);
  *a2 = 0xAAAAAAAAAAAAAAAALL;
  a2[1] = 0xAAAAAAAAAAAAAAAALL;
  std::shared_ptr<FSModule>::shared_ptr[abi:ne180100]<FSModule,std::shared_ptr<FSModule> ctu::SharedSynchronizable<FSModule>::make_shared_ptr<FSModule>(FSModule*)::{lambda(FSModule*)#1},void>(a2, v5);
  ctu::Loggable<FSModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(*a2 + 48);
  if (v7) {
    std::__shared_weak_count::__release_weak(v7);
  }
  uint64_t v8 = *a2;
  uint64_t v9 = *a2 + 120;
  v12[0] = MEMORY[0x1E4F143A8];
  v12[1] = 0x40000000;
  _DWORD v12[2] = ___ZN8FSModule4initEv_block_invoke;
  v12[3] = &__block_descriptor_tmp_20;
  v12[4] = v8;
  size_t v13 = v12;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI8FSModuleE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  block[3] = &__block_descriptor_tmp_137;
  block[4] = v9;
  block[5] = &v13;
  uint64_t v10 = *(NSObject **)(v8 + 136);
  if (*(void *)(v8 + 144)) {
    dispatch_async_and_wait(v10, block);
  }
  else {
    dispatch_sync(v10, block);
  }
}

void sub_1C593CECC(_Unwind_Exception *a1)
{
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v2);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(a1);
}

void FSModule::init(FSModule *this)
{
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 0x40000000;
  v3[2] = ___ZN8FSModule4initEv_block_invoke;
  v3[3] = &__block_descriptor_tmp_20;
  v3[4] = this;
  uint64_t v4 = v3;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI8FSModuleE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  block[3] = &__block_descriptor_tmp_137;
  block[4] = (char *)this + 120;
  block[5] = &v4;
  uint64_t v2 = (char *)this + 136;
  uint64_t v1 = *((void *)this + 17);
  if (*((void *)v2 + 1)) {
    dispatch_async_and_wait(v1, block);
  }
  else {
    dispatch_sync(v1, block);
  }
}

void FSModule::~FSModule(FSModule *this)
{
  *(void *)this = &unk_1F20FE408;
  *((void *)this + 6) = &unk_1F20FE478;
  uint64_t v2 = *((void *)this + 11);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)size_t v24 = 0;
    _os_log_impl(&dword_1C5767000, v2, OS_LOG_TYPE_DEFAULT, "#I Gone!", v24, 2u);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 133);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    if (!*((void *)this + 131)) {
      goto LABEL_13;
    }
  }
  else if (!*((void *)this + 131))
  {
    goto LABEL_13;
  }
  uint64_t v4 = (FSModule *)*((void *)this + 130);
  uint64_t v5 = *((void *)this + 129);
  uint64_t v6 = *(void *)v4;
  *(void *)(v6 + 8) = *(void *)(v5 + 8);
  **(void **)(v5 + 8) = v6;
  *((void *)this + 131) = 0;
  if (v4 != (FSModule *)((char *)this + 1032))
  {
    do
    {
      uint64_t v7 = (FSModule *)*((void *)v4 + 1);
      uint64_t v8 = (atomic_uint *)*((void *)v4 + 3);
      if (v8 && atomic_fetch_add(v8 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v8 + 24))(v8);
      }
      operator delete(v4);
      uint64_t v4 = v7;
    }
    while (v7 != (FSModule *)((char *)this + 1032));
  }
LABEL_13:
  uint64_t v9 = (void *)*((void *)this + 128);
  *((void *)this + 128) = 0;
  if (v9)
  {
    TelephonyBasebandWatchdogStop();
    operator delete(v9);
  }
  uint64_t v10 = *((void *)this + 127);
  if (v10)
  {
    dispatch_resume(v10);
    uint64_t v11 = *((void *)this + 127);
    if (v11) {
      dispatch_release(v11);
    }
  }
  CFTypeRef v12 = *((void *)this + 126);
  if (v12) {
    dispatch_release(v12);
  }
  size_t v13 = *((void *)this + 125);
  if (v13) {
    dispatch_release(v13);
  }
  uint64_t v14 = (const void *)*((void *)this + 124);
  if (v14) {
    _Block_release(v14);
  }
  if (*((char *)this + 991) < 0) {
    operator delete(*((void **)this + 121));
  }
  uint64_t v15 = *((void *)this + 120);
  if (v15) {
    dispatch_release(v15);
  }
  size_t v16 = (std::__shared_weak_count *)*((void *)this + 119);
  if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
  }
  *((void *)this + 6) = &unk_1F20FE9B8;
  MEMORY[0x1C8790F40]((char *)this + 56);
  uint64_t v17 = *((void *)this + 18);
  if (v17) {
    dispatch_release(v17);
  }
  uint64_t v18 = *((void *)this + 17);
  if (v18) {
    dispatch_release(v18);
  }
  size_t v19 = (std::__shared_weak_count *)*((void *)this + 16);
  if (v19) {
    std::__shared_weak_count::__release_weak(v19);
  }
  *(void *)this = &unk_1F20FC1C8;
  uint64_t v20 = *((void *)this + 3);
  if (v20)
  {
    uint64_t v21 = *((void *)this + 4);
    uint64_t v22 = (void *)*((void *)this + 3);
    if (v21 != v20)
    {
      do
      {
        if (*(char *)(v21 - 1) < 0) {
          operator delete(*(void **)(v21 - 24));
        }
        v21 -= 24;
      }
      while (v21 != v20);
      uint64_t v22 = (void *)*((void *)this + 3);
    }
    *((void *)this + 4) = v20;
    operator delete(v22);
  }
  uint64_t v23 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v23) {
    std::__shared_weak_count::__release_weak(v23);
  }
}

{
  void *v1;
  uint64_t vars8;

  FSModule::~FSModule(this);

  operator delete(v1);
}

void *ctu::SharedLoggable<FSModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(void *a1)
{
  *a1 = &unk_1F20FE9B8;
  MEMORY[0x1C8790F40](a1 + 1);
  uint64_t v2 = a1[12];
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = a1[11];
  if (v3) {
    dispatch_release(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[10];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = &unk_1F20FE9B8;
  MEMORY[0x1C8790F40](a1 + 1);
  uint64_t v2 = a1[12];
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = a1[11];
  if (v3) {
    dispatch_release(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[10];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

void non-virtual thunk to'FSModule::~FSModule(FSModule *this)
{
}

{
  void *v1;
  uint64_t vars8;

  FSModule::~FSModule((FSModule *)((char *)this - 48));

  operator delete(v1);
}

const char *FSModule::getName(FSModule *this)
{
  return "rfs.mod";
}

uint64_t FSModule::FSModule(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = (std::__shared_weak_count *)a2[1];
  if (v4)
  {
    atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  *(void *)a1 = &unk_1F20FC1C8;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = v4;
  if (v4)
  {
    atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    *(void *)(a1 + 24) = 0;
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = 0;
    std::__shared_weak_count::__release_weak(v4);
    *(void *)a1 = &unk_1F20F0BE0;
    std::__shared_weak_count::__release_weak(v4);
  }
  else
  {
    *(void *)(a1 + 24) = 0;
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = 0;
    *(void *)a1 = &unk_1F20F0BE0;
  }
  *(void *)a1 = &unk_1F20FE408;
  *(void *)(a1 + 48) = &unk_1F20FE478;
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v19, "com.apple.telephony.abm", "rfs.mod");
  GetABMLogServer(&v17);
  initially_inactive = dispatch_queue_attr_make_initially_inactive(0);
  uint64_t v6 = dispatch_queue_create_with_target_V2("rfs.mod", initially_inactive, 0);
  dispatch_set_qos_class_floor(v6, QOS_CLASS_USER_INITIATED, 0);
  dispatch_activate(v6);
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = v6;
  if (v6)
  {
    dispatch_retain(v6);
    *(void *)(a1 + 144) = 0;
    dispatch_release(v6);
  }
  else
  {
    *(void *)(a1 + 144) = 0;
  }
  *(void *)(a1 + 48) = &unk_1F20FE9B8;
  ctu::OsLogContext::OsLogContext();
  ctu::OsLogContext::OsLogContext();
  ctu::LoggerCommonBase::LoggerCommonBase();
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v21);
  *(void *)(a1 + 56) = &unk_1F20F0070;
  uint64_t v7 = v18;
  *(void *)(a1 + 104) = v17;
  *(void *)(a1 + 112) = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v20);
  *(void *)(a1 + 48) = &unk_1F20FEA48;
  uint64_t v8 = v18;
  if (v18 && !atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v19);
  *(void *)a1 = &unk_1F20FE408;
  *(void *)(a1 + 48) = &unk_1F20FE478;
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 560) = 0;
  *(_DWORD *)(a1 + 928) = 256;
  *(void *)(a1 + 936) = 0;
  *(void *)(a1 + 952) = 0;
  *(void *)(a1 + 944) = 0;
  *(void *)(a1 + 960) = dispatch_group_create();
  uint64_t v9 = (char *)operator new(0x30uLL);
  *(void *)(a1 + 968) = v9;
  strcpy(v9, "com.apple.AppleBasebandManager.FSModuleSync");
  *(_OWORD *)(a1 + 976) = xmmword_1C59A6800;
  *(_OWORD *)(a1 + 992) = 0u;
  uint64_t v10 = dispatch_queue_attr_make_with_qos_class(0, QOS_CLASS_DEFAULT, 0);
  *(void *)(a1 + 1008) = dispatch_queue_create("rfs.sched.queue", v10);
  *(_OWORD *)(a1 + 1016) = 0u;
  *(void *)(a1 + 1032) = a1 + 1032;
  *(void *)(a1 + 1040) = a1 + 1032;
  *(void *)(a1 + 1048) = 0;
  GetABMLogServer(&v15);
  uint64_t v11 = *(NSObject **)(a1 + 136);
  dispatch_object_t object = v11;
  if (v11) {
    dispatch_retain(v11);
  }
  BasebandTransport::create((capabilities::radio *)&v15, &object, a1 + 1056);
  if (object) {
    dispatch_release(object);
  }
  CFTypeRef v12 = v16;
  if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  *(_DWORD *)(a1 + 1072) = 0;
  return a1;
}

void sub_1C593D79C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_object_t object, char a11)
{
  if (object) {
    dispatch_release(object);
  }
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::list<boost::signals2::connection>::~list(v13);
  std::unique_ptr<support::misc::Watchdog>::~unique_ptr[abi:ne180100]((void **)(v11 + 1024));
  if (*v14)
  {
    dispatch_resume(*v14);
    if (*v14) {
      dispatch_release(*v14);
    }
  }
  size_t v16 = *(NSObject **)(v11 + 1008);
  if (v16) {
    dispatch_release(v16);
  }
  dispatch::callback<void({block_pointer})(BOOL)>::~callback(v11 + 992);
  if (*(char *)(v11 + 991) < 0) {
    operator delete(*(void **)(v11 + 968));
  }
  if (*(void *)(v11 + 960)) {
    dispatch_release(*(dispatch_object_t *)(v11 + 960));
  }
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v11 + 944);
  ctu::SharedLoggable<FSModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(v12);
  Service::~Service((Service *)v11);
  _Unwind_Resume(a1);
}

void sub_1C593D84C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va3, a5);
  va_start(va2, a5);
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v11 = va_arg(va2, void);
  uint64_t v13 = va_arg(va2, void);
  va_copy(va3, va2);
  uint64_t v14 = va_arg(va3, void);
  uint64_t v16 = va_arg(va3, void);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)va3);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)va2);
  ctu::SharedSynchronizable<DataStallDetection>::~SharedSynchronizable(v6);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)va1);
  Service::~Service(v5);
  _Unwind_Resume(a1);
}

void sub_1C593D890(_Unwind_Exception *a1)
{
  Service::~Service(v1);
  _Unwind_Resume(a1);
}

void ___ZN8FSModule4initEv_block_invoke(uint64_t a1)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(void *)(a1 + 32);
  if (!*(unsigned char *)(v1 + 929)) {
    return;
  }
  uint64_t v2 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  uint64_t v3 = off_1EBBDD2A0;
  if (!off_1EBBDD2A0)
  {
    CommandDriverFactory::create_default_global((uint64_t *)__p, v2);
    long long v4 = *(_OWORD *)__p;
    __p[0] = 0;
    __p[1] = 0;
    uint64_t v5 = (std::__shared_weak_count *)*(&off_1EBBDD2A0 + 1);
    off_1EBBDD2A0 = v4;
    if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    uint64_t v6 = (std::__shared_weak_count *)__p[1];
    if (__p[1] && !atomic_fetch_add((atomic_ullong *volatile)__p[1] + 1, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
    uint64_t v3 = off_1EBBDD2A0;
  }
  uint64_t v27 = (std::__shared_weak_count *)*(&off_1EBBDD2A0 + 1);
  if (*(&off_1EBBDD2A0 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDD2A0 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)v3 + 40))(&v28, v3);
  uint64_t v30 = 0;
  uint64_t v31 = 0;
  if (v29 && (uint64_t v31 = std::__shared_weak_count::lock(v29)) != 0)
  {
    uint64_t v7 = v28;
    uint64_t v30 = v28;
  }
  else
  {
    uint64_t v7 = 0;
  }
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZN3ctu20SharedSynchronizableI8FSModuleE13connect_eventIN5boost8signals26signalIFvbENS5_19optional_last_valueIvEEiNSt3__14lessIiEENS4_8functionIS7_EENSD_IFvRKNS5_10connectionEbEEENS5_5mutexEEES1_vJbEEEDTcl7connectfp_cvNSA_10shared_ptrIS1_EE_EcvP16dispatch_queue_s_EcvPFT1_DpT2_ELi0EEERT_MT0_FSQ_SS_E_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_112;
  aBlock[4] = v1 + 120;
  void aBlock[5] = FSModule::requestFSSyncIndication;
  void aBlock[6] = 0;
  uint64_t v8 = _Block_copy(aBlock);
  uint64_t v9 = *(std::__shared_weak_count **)(v1 + 128);
  if (!v9 || (uint64_t v10 = *(void *)(v1 + 120), (v11 = std::__shared_weak_count::lock(v9)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  CFTypeRef v12 = v11;
  uint64_t v13 = *(NSObject **)(v1 + 136);
  dispatch_object_t object = v13;
  if (v8) {
    uint64_t v14 = _Block_copy(v8);
  }
  else {
    uint64_t v14 = 0;
  }
  uint64_t v35 = v14;
  dispatch_retain(v13);
  boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>::slot<ctu::DispatchSlot<dispatch::block<void({block_pointer})(BOOL)>>>(__p, (uint64_t)&object);
  atomic_fetch_add_explicit(&v12->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  uint64_t v15 = operator new(0x18uLL);
  *uint64_t v15 = &unk_1F20FEA88;
  v15[1] = v10;
  void v15[2] = v12;
  atomic_fetch_add_explicit(&v12->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  uint64_t v16 = operator new(0x18uLL);
  void *v16 = &unk_1F20FEA88;
  v16[1] = v10;
  v16[2] = v12;
  atomic_fetch_add_explicit(&v12->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  int v41 = v16;
  int v40 = 2;
  uint64_t v17 = __p[1];
  if (__p[1] >= v37)
  {
    size_t v19 = (void *)std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::__push_back_slow_path<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>((uint64_t *)__p, (uint64_t)&v40);
  }
  else
  {
    uint64_t v18 = operator new(0x18uLL);
    *uint64_t v18 = &unk_1F20FEA88;
    v18[1] = v10;
    xpc_object_t v18[2] = v12;
    atomic_fetch_add_explicit(&v12->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v17[1] = v18;
    *(_DWORD *)uint64_t v17 = 2;
    size_t v19 = v17 + 3;
  }
  __p[1] = v19;
  boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>::destroy_content((uint64_t)&v40);
  (*(void (**)(void *))(*v15 + 8))(v15);
  std::__shared_weak_count::__release_weak(v12);
  boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::connect(*(void *)(v7 + 112), (uint64_t)__p, 0, (unint64_t *)&v32);
  if (v38)
  {
    if ((v38 & 1) == 0)
    {
      uint64_t v20 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(v38 & 0xFFFFFFFFFFFFFFFELL);
      if (v20) {
        v20(v39, v39, 2);
      }
    }
    uint64_t v38 = 0;
  }
  uint64_t v21 = (char *)__p[0];
  if (__p[0])
  {
    uint64_t v22 = (char *)__p[1];
    uint64_t v23 = __p[0];
    if (__p[1] != __p[0])
    {
      do
      {
        v22 -= 24;
        boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>::destroy_content((uint64_t)v22);
      }
      while (v22 != v21);
      uint64_t v23 = __p[0];
    }
    __p[1] = v21;
    operator delete(v23);
  }
  dispatch_release(object);
  if (v35) {
    _Block_release(v35);
  }
  if (!atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
    if (!v8) {
      goto LABEL_41;
    }
    goto LABEL_40;
  }
  if (v8) {
LABEL_40:
  }
    _Block_release(v8);
LABEL_41:
  size_t v24 = operator new(0x20uLL);
  v24[1] = v32;
  long long v32 = 0uLL;
  *((void *)v24 + 1) = v1 + 1032;
  uint64_t v25 = *(void *)(v1 + 1032);
  *(void *)size_t v24 = v25;
  *(void *)(v25 + 8) = v24;
  *(void *)(v1 + 1032) = v24;
  ++*(void *)(v1 + 1048);
  char v26 = v31;
  if (v31 && !atomic_fetch_add(&v31->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
    std::__shared_weak_count::__release_weak(v26);
  }
  if (v29) {
    std::__shared_weak_count::__release_weak(v29);
  }
  if (v27)
  {
    if (!atomic_fetch_add(&v27->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
}

void sub_1C593DDF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, char a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,char a27)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void FSModule::requestFSSyncIndication(NSObject **this, int a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  int v4 = ((uint64_t (*)(NSObject **))(*this)[11].isa)(this);
  uint64_t v5 = this[11];
  BOOL v6 = os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
  if (v4)
  {
    if (v6)
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1C5767000, v5, OS_LOG_TYPE_DEFAULT, "#I Server going down. Skipping baseband requested rfs sync", buf, 2u);
    }
    return;
  }
  if (v6)
  {
    uint64_t v7 = "false";
    if (a2) {
      uint64_t v7 = "true";
    }
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = v7;
    _os_log_impl(&dword_1C5767000, v5, OS_LOG_TYPE_DEFAULT, "#I Baseband requested rfs sync with resetAfterSync = %s", buf, 0xCu);
  }
  memset(buf, 170, 16);
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZN8FSModule23requestFSSyncIndicationEb_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_69;
  aBlock[4] = this;
  uint64_t v8 = _Block_copy(aBlock);
  uint64_t v9 = this[17];
  if (v9) {
    dispatch_retain(this[17]);
  }
  *(void *)long long buf = v8;
  *(void *)&uint8_t buf[8] = v9;
  if (a2)
  {
    if (v8)
    {
      uint64_t v10 = _Block_copy(v8);
      CFTypeRef v12 = v10;
      uint64_t v13 = v9;
      if (!v9)
      {
LABEL_14:
        FSModule::requestFSSync(this, 2, (uint64_t)&v12);
        if (v9) {
          dispatch_release(v9);
        }
        if (v10) {
          _Block_release(v10);
        }
        goto LABEL_19;
      }
    }
    else
    {
      uint64_t v10 = 0;
      CFTypeRef v12 = 0;
      uint64_t v13 = v9;
      if (!v9) {
        goto LABEL_14;
      }
    }
    dispatch_retain(v9);
    goto LABEL_14;
  }
  v11[0] = 0;
  v11[1] = 0;
  FSModule::requestFSSync(this, 2, (uint64_t)v11);
LABEL_19:
  if (v9) {
    dispatch_release(v9);
  }
  if (v8) {
    _Block_release(v8);
  }
}

void sub_1C593E120(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

_WORD *FSModule::getShutdownStages@<X0>(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v3 = operator new(2uLL);
  *a1 = v3;
  _WORD *v3 = 768;
  size_t result = v3 + 1;
  a1[1] = result;
  a1[2] = result;
  return result;
}

void FSModule::shutdown(uint64_t a1, char a2, NSObject **a3)
{
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 1174405120;
  _DWORD v7[2] = ___ZN8FSModule8shutdownE13ShutdownStageN8dispatch13group_sessionE_block_invoke;
  v7[3] = &__block_descriptor_tmp_7_5;
  uint64_t v5 = *a3;
  BOOL v6 = (uint64_t *)(a1 + 120);
  v7[4] = a1;
  dispatch_group_t group = v5;
  if (v5)
  {
    dispatch_retain(v5);
    dispatch_group_enter(group);
  }
  char v9 = a2;
  ctu::SharedSynchronizable<FSModule>::execute_wrapped(v6, (uint64_t)v7);
  if (group)
  {
    dispatch_group_leave(group);
    if (group) {
      dispatch_release(group);
    }
  }
}

void ___ZN8FSModule8shutdownE13ShutdownStageN8dispatch13group_sessionE_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (*(unsigned char *)(a1 + 48) == 3)
  {
    int v4 = (uint64_t *)(v1 + 1032);
    uint64_t v5 = *(uint64_t **)(v1 + 1040);
    if (v5 != (uint64_t *)(v1 + 1032))
    {
      do
      {
        boost::signals2::connection::disconnect((boost::signals2::connection *)(v5 + 2));
        uint64_t v5 = (uint64_t *)v5[1];
      }
      while (v5 != v4);
    }
    if (*(void *)(v1 + 1048))
    {
      BOOL v6 = *(uint64_t **)(v1 + 1040);
      uint64_t v7 = *(void *)(v1 + 1032);
      uint64_t v8 = *v6;
      *(void *)(v8 + 8) = *(void *)(v7 + 8);
      **(void **)(v7 + 8) = v8;
      *(void *)(v1 + 1048) = 0;
      if (v6 != v4)
      {
        do
        {
          char v9 = (uint64_t *)v6[1];
          uint64_t v10 = (atomic_uint *)v6[3];
          if (v10 && atomic_fetch_add(v10 + 3, 0xFFFFFFFF) == 1) {
            (*(void (**)(atomic_uint *))(*(void *)v10 + 24))(v10);
          }
          operator delete(v6);
          BOOL v6 = v9;
        }
        while (v9 != v4);
      }
    }
    uint64_t v11 = *(void **)(v1 + 1024);
    *(void *)(v1 + 1024) = 0;
    if (v11)
    {
      TelephonyBasebandWatchdogStop();
      operator delete(v11);
    }
    CFTypeRef v12 = *(std::__shared_weak_count **)(v1 + 1064);
    *(_OWORD *)(v1 + 1056) = 0u;
    if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
      uint64_t v13 = *(std::__shared_weak_count **)(v1 + 952);
      *(_OWORD *)(v1 + 944) = 0u;
      if (!v13) {
        return;
      }
    }
    else
    {
      uint64_t v13 = *(std::__shared_weak_count **)(v1 + 952);
      *(_OWORD *)(v1 + 944) = 0uLL;
      if (!v13) {
        return;
      }
    }
    if (!atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  else if (!*(unsigned char *)(a1 + 48))
  {
    uint64_t v2 = *(NSObject **)(v1 + 1008);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 1174405120;
    block[2] = ___ZN8FSModule8shutdownE13ShutdownStageN8dispatch13group_sessionE_block_invoke_2;
    block[3] = &__block_descriptor_tmp_6_13;
    uint64_t v3 = *(NSObject **)(a1 + 40);
    dispatch_group_t group = v3;
    if (v3)
    {
      dispatch_retain(v3);
      dispatch_group_enter(group);
    }
    dispatch_async(v2, block);
    if (group)
    {
      dispatch_group_leave(group);
      if (group) {
        dispatch_release(group);
      }
    }
  }
}

void FSModule::initialize(uint64_t *a1, NSObject **a2)
{
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 1174405120;
  void v11[2] = ___ZN8FSModule10initializeEN8dispatch13group_sessionE_block_invoke;
  v11[3] = &__block_descriptor_tmp_55_2;
  uint64_t v3 = *a2;
  v11[4] = a1;
  dispatch_group_t group = v3;
  if (v3)
  {
    dispatch_retain(v3);
    dispatch_group_enter(group);
  }
  ctu::SharedSynchronizable<FSModule>::execute_wrapped(a1 + 15, (uint64_t)v11);
  int v4 = (std::__shared_weak_count *)a1[16];
  if (!v4 || (uint64_t v5 = a1[15], (v6 = std::__shared_weak_count::lock(v4)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v7 = v6;
  uint64_t v8 = operator new(8uLL);
  *uint64_t v8 = a1;
  char v9 = a1[17];
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v10 = operator new(0x18uLL);
  void *v10 = v8;
  v10[1] = v5;
  _DWORD v10[2] = v7;
  dispatch_async_f(v9, v10, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<FSModule>::execute_wrapped<FSModule::initialize(dispatch::group_session)::$_0>(FSModule::initialize(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<FSModule::initialize(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<FSModule::initialize(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke);
  if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  if (group)
  {
    dispatch_group_leave(group);
    if (group) {
      dispatch_release(group);
    }
  }
}

void ___ZN8FSModule10initializeEN8dispatch13group_sessionE_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(std::__shared_weak_count **)(v1 + 128);
  if (!v2 || (uint64_t v3 = *(void *)(v1 + 120), (v4 = std::__shared_weak_count::lock(v2)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v5 = v4;
  atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v5);
  }
  BOOL v6 = (const void *)*MEMORY[0x1E4F4C728];
  size_t v7 = strlen((const char *)*MEMORY[0x1E4F4C728]);
  if (v7 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v8 = v7;
  if (v7 >= 0x17)
  {
    uint64_t v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17) {
      uint64_t v10 = v7 | 7;
    }
    uint64_t v11 = v10 + 1;
    p_dst = (void **)operator new(v10 + 1);
    size_t v57 = v8;
    unint64_t v58 = v11 | 0x8000000000000000;
    std::string __dst = p_dst;
    goto LABEL_12;
  }
  HIBYTE(v58) = v7;
  p_dst = (void **)&__dst;
  if (v7) {
LABEL_12:
  }
    memmove(p_dst, v6, v8);
  *((unsigned char *)p_dst + v8) = 0;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN8FSModule10initializeEN8dispatch13group_sessionE_block_invoke_2;
  aBlock[3] = &__block_descriptor_tmp_14_3;
  aBlock[4] = v1;
  void aBlock[5] = v3;
  long long v54 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  CFTypeRef v12 = _Block_copy(aBlock);
  uint64_t v55 = v12;
  Service::registerCommandHandler(v1, (uint64_t)&__dst, &v55);
  if (v12) {
    _Block_release(v12);
  }
  if (SHIBYTE(v58) < 0) {
    operator delete(__dst);
  }
  uint64_t v13 = (const void *)*MEMORY[0x1E4F4CDB8];
  size_t v14 = strlen((const char *)*MEMORY[0x1E4F4CDB8]);
  if (v14 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v15 = v14;
  if (v14 >= 0x17)
  {
    uint64_t v17 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v14 | 7) != 0x17) {
      uint64_t v17 = v14 | 7;
    }
    uint64_t v18 = v17 + 1;
    uint64_t v16 = (void **)operator new(v17 + 1);
    size_t v57 = v15;
    unint64_t v58 = v18 | 0x8000000000000000;
    std::string __dst = v16;
    goto LABEL_24;
  }
  HIBYTE(v58) = v14;
  uint64_t v16 = (void **)&__dst;
  if (v14) {
LABEL_24:
  }
    memmove(v16, v13, v15);
  *((unsigned char *)v16 + v15) = 0;
  v50[0] = MEMORY[0x1E4F143A8];
  v50[1] = 1174405120;
  v50[2] = ___ZN8FSModule10initializeEN8dispatch13group_sessionE_block_invoke_15;
  uint64_t v50[3] = &__block_descriptor_tmp_20_4;
  v50[4] = v1;
  v50[5] = v3;
  uint64_t v51 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  size_t v19 = _Block_copy(v50);
  std::string::size_type v52 = v19;
  Service::registerCommandHandler(v1, (uint64_t)&__dst, &v52);
  if (v19) {
    _Block_release(v19);
  }
  if (SHIBYTE(v58) < 0) {
    operator delete(__dst);
  }
  uint64_t v20 = (const void *)*MEMORY[0x1E4F4C720];
  size_t v21 = strlen((const char *)*MEMORY[0x1E4F4C720]);
  if (v21 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v22 = v21;
  if (v21 >= 0x17)
  {
    uint64_t v24 = (v21 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v21 | 7) != 0x17) {
      uint64_t v24 = v21 | 7;
    }
    uint64_t v25 = v24 + 1;
    uint64_t v23 = (void **)operator new(v24 + 1);
    size_t v57 = v22;
    unint64_t v58 = v25 | 0x8000000000000000;
    std::string __dst = v23;
    goto LABEL_36;
  }
  HIBYTE(v58) = v21;
  uint64_t v23 = (void **)&__dst;
  if (v21) {
LABEL_36:
  }
    memmove(v23, v20, v22);
  *((unsigned char *)v23 + v22) = 0;
  v47[0] = MEMORY[0x1E4F143A8];
  v47[1] = 1174405120;
  v47[2] = ___ZN8FSModule10initializeEN8dispatch13group_sessionE_block_invoke_21;
  void v47[3] = &__block_descriptor_tmp_36_4;
  v47[4] = v1;
  v47[5] = v3;
  uint64_t v48 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  char v26 = _Block_copy(v47);
  unint64_t v49 = v26;
  Service::registerCommandHandler(v1, (uint64_t)&__dst, &v49);
  if (v26) {
    _Block_release(v26);
  }
  if (SHIBYTE(v58) < 0) {
    operator delete(__dst);
  }
  uint64_t v27 = (const void *)*MEMORY[0x1E4F4CD10];
  size_t v28 = strlen((const char *)*MEMORY[0x1E4F4CD10]);
  if (v28 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v29 = v28;
  if (v28 >= 0x17)
  {
    uint64_t v31 = (v28 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v28 | 7) != 0x17) {
      uint64_t v31 = v28 | 7;
    }
    uint64_t v32 = v31 + 1;
    uint64_t v30 = (void **)operator new(v31 + 1);
    size_t v57 = v29;
    unint64_t v58 = v32 | 0x8000000000000000;
    std::string __dst = v30;
    goto LABEL_48;
  }
  HIBYTE(v58) = v28;
  uint64_t v30 = (void **)&__dst;
  if (v28) {
LABEL_48:
  }
    memmove(v30, v27, v29);
  *((unsigned char *)v30 + v29) = 0;
  v44[0] = MEMORY[0x1E4F143A8];
  v44[1] = 1174405120;
  v44[2] = ___ZN8FSModule10initializeEN8dispatch13group_sessionE_block_invoke_37;
  v44[3] = &__block_descriptor_tmp_44_1;
  v44[4] = v1;
  v44[5] = v3;
  size_t v45 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  int v33 = _Block_copy(v44);
  uint64_t v46 = v33;
  Service::registerCommandHandler(v1, (uint64_t)&__dst, &v46);
  if (v33) {
    _Block_release(v33);
  }
  if (SHIBYTE(v58) < 0) {
    operator delete(__dst);
  }
  size_t v34 = (const void *)*MEMORY[0x1E4F4CED0];
  size_t v35 = strlen((const char *)*MEMORY[0x1E4F4CED0]);
  if (v35 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v36 = v35;
  if (v35 >= 0x17)
  {
    uint64_t v38 = (v35 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v35 | 7) != 0x17) {
      uint64_t v38 = v35 | 7;
    }
    uint64_t v39 = v38 + 1;
    size_t v37 = (void **)operator new(v38 + 1);
    size_t v57 = v36;
    unint64_t v58 = v39 | 0x8000000000000000;
    std::string __dst = v37;
    goto LABEL_60;
  }
  HIBYTE(v58) = v35;
  size_t v37 = (void **)&__dst;
  if (v35) {
LABEL_60:
  }
    memmove(v37, v34, v36);
  *((unsigned char *)v37 + v36) = 0;
  v41[0] = MEMORY[0x1E4F143A8];
  v41[1] = 1174405120;
  v41[2] = ___ZN8FSModule10initializeEN8dispatch13group_sessionE_block_invoke_45;
  void v41[3] = &__block_descriptor_tmp_52_4;
  v41[4] = v1;
  v41[5] = v3;
  uint64_t v42 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  int v40 = _Block_copy(v41);
  uint64_t v43 = v40;
  Service::registerCommandHandler(v1, (uint64_t)&__dst, &v43);
  if (v40) {
    _Block_release(v40);
  }
  if (SHIBYTE(v58) < 0) {
    operator delete(__dst);
  }
  if (v42) {
    std::__shared_weak_count::__release_weak(v42);
  }
  if (v45) {
    std::__shared_weak_count::__release_weak(v45);
  }
  if (v48) {
    std::__shared_weak_count::__release_weak(v48);
  }
  if (v51) {
    std::__shared_weak_count::__release_weak(v51);
  }
  if (v54) {
    std::__shared_weak_count::__release_weak(v54);
  }
  std::__shared_weak_count::__release_weak(v5);
}

void sub_1C593ECF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,std::__shared_weak_count *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,std::__shared_weak_count *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,std::__shared_weak_count *a40)
{
  if (v41) {
    _Block_release(v41);
  }
  if (a16)
  {
    std::__shared_weak_count::__release_weak(a16);
    if ((*(char *)(v42 - 97) & 0x80000000) == 0)
    {
LABEL_5:
      std::string::size_type v44 = a24;
      if (!a24)
      {
LABEL_10:
        if (a32) {
          std::__shared_weak_count::__release_weak(a32);
        }
        if (a40) {
          std::__shared_weak_count::__release_weak(a40);
        }
        size_t v45 = *(std::__shared_weak_count **)(v42 - 136);
        if (v45)
        {
          std::__shared_weak_count::__release_weak(v45);
          std::__shared_weak_count::__release_weak(v40);
          _Unwind_Resume(a1);
        }
        std::__shared_weak_count::__release_weak(v40);
        _Unwind_Resume(a1);
      }
LABEL_9:
      std::__shared_weak_count::__release_weak(v44);
      goto LABEL_10;
    }
  }
  else if ((*(char *)(v42 - 97) & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(*(void **)(v42 - 120));
  std::string::size_type v44 = a24;
  if (!a24) {
    goto LABEL_10;
  }
  goto LABEL_9;
}

void ___ZN8FSModule10initializeEN8dispatch13group_sessionE_block_invoke_2(void *a1, void **a2, const void **a3)
{
  int v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    uint64_t v7 = a1[4];
    size_t v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      char v9 = v8;
      if (!a1[5])
      {
LABEL_11:
        if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
        return;
      }
      v12[0] = MEMORY[0x1E4F143A8];
      v12[1] = 1174405120;
      _DWORD v12[2] = ___ZN8FSModule10initializeEN8dispatch13group_sessionE_block_invoke_3;
      v12[3] = &__block_descriptor_tmp_12_2;
      v12[4] = v7;
      if (*a3)
      {
        uint64_t v10 = _Block_copy(*a3);
        uint64_t v11 = *a2;
        aBlocuint64_t k = v10;
        xpc_object_t object = v11;
        if (v11)
        {
LABEL_6:
          xpc_retain(v11);
          goto LABEL_9;
        }
      }
      else
      {
        uint64_t v11 = *a2;
        aBlocuint64_t k = 0;
        xpc_object_t object = v11;
        if (v11) {
          goto LABEL_6;
        }
      }
      xpc_object_t object = xpc_null_create();
LABEL_9:
      ctu::SharedSynchronizable<FSModule>::execute_wrapped((uint64_t *)(v7 + 120), (uint64_t)v12);
      xpc_release(object);
      xpc_object_t object = 0;
      if (aBlock) {
        _Block_release(aBlock);
      }
      goto LABEL_11;
    }
  }
}

void ___ZN8FSModule10initializeEN8dispatch13group_sessionE_block_invoke_3(uint64_t a1)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void **)(a1 + 32);
  if ((*(unsigned int (**)(void *))(*v2 + 88))(v2))
  {
    memset(object, 170, sizeof(object));
    uint64_t v3 = (const void *)*MEMORY[0x1E4F4C728];
    size_t v4 = strlen((const char *)*MEMORY[0x1E4F4C728]);
    if (v4 >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    std::string::size_type v5 = v4;
    if (v4 >= 0x17)
    {
      uint64_t v11 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v4 | 7) != 0x17) {
        uint64_t v11 = v4 | 7;
      }
      uint64_t v12 = v11 + 1;
      p_dst = (std::string *)operator new(v11 + 1);
      __dst.__r_.__value_.__l.__size_ = v5;
      __dst.__r_.__value_.__r.__words[2] = v12 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v4;
      p_dst = &__dst;
      if (!v4)
      {
LABEL_17:
        p_dst->__r_.__value_.__s.__data_[v5] = 0;
        uint64_t v13 = (char *)operator new(0x28uLL);
        strcpy(v13, " rejected; ABM is shutting down ");
        size_t v14 = std::string::append(&__dst, v13, 0x20uLL);
        long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
        xpc_object_t object[2] = (xpc_object_t)v14->__r_.__value_.__r.__words[2];
        *(_OWORD *)xpc_object_t object = v15;
        v14->__r_.__value_.__l.__size_ = 0;
        v14->__r_.__value_.__r.__words[2] = 0;
        v14->__r_.__value_.__r.__words[0] = 0;
        operator delete(v13);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__dst.__r_.__value_.__l.__data_);
          uint64_t v16 = v2[11];
          if (!os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
          {
LABEL_19:
            uint64_t v18 = *(void *)(a1 + 40);
            uint64_t v17 = (uint64_t *)(a1 + 40);
            if (!v18)
            {
LABEL_78:
              if (SHIBYTE(object[2]) < 0) {
                operator delete(object[0]);
              }
              return;
            }
LABEL_27:
            __dst.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
            xpc_object_t v22 = (xpc_object_t)HIBYTE(object[2]);
            if (SHIBYTE(object[2]) < 0) {
              xpc_object_t v22 = object[1];
            }
            if (v22)
            {
              xpc_object_t v23 = xpc_dictionary_create(0, 0, 0);
              if (v23 || (xpc_object_t v23 = xpc_null_create()) != 0)
              {
                if (MEMORY[0x1C8792D30](v23) == MEMORY[0x1E4F14590])
                {
                  xpc_retain(v23);
                  xpc_object_t v24 = v23;
                }
                else
                {
                  xpc_object_t v24 = xpc_null_create();
                }
              }
              else
              {
                xpc_object_t v24 = xpc_null_create();
                xpc_object_t v23 = 0;
              }
              xpc_release(v23);
              xpc_object_t v30 = xpc_null_create();
              uint64_t v31 = (void *)__dst.__r_.__value_.__r.__words[0];
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v24;
              xpc_release(v31);
              xpc_release(v30);
              if (SHIBYTE(object[2]) >= 0) {
                uint64_t v32 = object;
              }
              else {
                uint64_t v32 = (xpc_object_t *)object[0];
              }
              xpc_object_t v33 = xpc_string_create((const char *)v32);
              if (!v33) {
                xpc_object_t v33 = xpc_null_create();
              }
              xpc_dictionary_set_value(v24, (const char *)*MEMORY[0x1E4F4C240], v33);
              xpc_object_t v34 = xpc_null_create();
              xpc_release(v33);
              xpc_release(v34);
            }
            unsigned int v40 = -534716415;
            dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(v17, &v40, (void **)&__dst.__r_.__value_.__l.__data_);
            xpc_release(__dst.__r_.__value_.__l.__data_);
            goto LABEL_78;
          }
        }
        else
        {
          uint64_t v16 = v2[11];
          if (!os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_19;
          }
        }
        uint64_t v20 = object;
        if (SHIBYTE(object[2]) < 0) {
          uint64_t v20 = (xpc_object_t *)object[0];
        }
        LODWORD(__dst.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = (std::string::size_type)v20;
        _os_log_impl(&dword_1C5767000, v16, OS_LOG_TYPE_DEFAULT, "#I %s", (uint8_t *)&__dst, 0xCu);
        uint64_t v21 = *(void *)(a1 + 40);
        uint64_t v17 = (uint64_t *)(a1 + 40);
        if (!v21) {
          goto LABEL_78;
        }
        goto LABEL_27;
      }
    }
    memmove(p_dst, v3, v5);
    goto LABEL_17;
  }
  __dst.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
  __dst.__r_.__value_.__l.__size_ = 0xAAAAAAAAAAAAAAAALL;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN8FSModule10initializeEN8dispatch13group_sessionE_block_invoke_9;
  aBlock[3] = &__block_descriptor_tmp_11_5;
  uint64_t v7 = *(void **)(a1 + 40);
  if (v7) {
    uint64_t v7 = _Block_copy(v7);
  }
  uint64_t v39 = v7;
  size_t v8 = _Block_copy(aBlock);
  char v9 = v2[17];
  if (v9) {
    dispatch_retain((dispatch_object_t)v2[17]);
  }
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
  __dst.__r_.__value_.__l.__size_ = (std::string::size_type)v9;
  if (!*((unsigned char *)v2 + 929))
  {
    if (v8) {
      size_t v19 = _Block_copy(v8);
    }
    else {
      size_t v19 = 0;
    }
    object[0] = (xpc_object_t)MEMORY[0x1E4F143A8];
    object[1] = (xpc_object_t)1174405120;
    xpc_object_t object[2] = ___ZNK8dispatch8callbackIU13block_pointerFvbEEclIJbEEEvDpT__block_invoke_2;
    uint64_t v42 = &__block_descriptor_tmp_140_0;
    if (v19) {
      size_t v28 = _Block_copy(v19);
    }
    else {
      size_t v28 = 0;
    }
    uint64_t v43 = v28;
    char v44 = 1;
    dispatch_async(v9, object);
    if (v43) {
      _Block_release(v43);
    }
    if (v19) {
      _Block_release(v19);
    }
    goto LABEL_64;
  }
  xpc_object_t value = xpc_dictionary_get_value(*(xpc_object_t *)(a1 + 48), (const char *)*MEMORY[0x1E4F4CD58]);
  object[0] = value;
  if (value) {
    xpc_retain(value);
  }
  else {
    object[0] = xpc_null_create();
  }
  int v25 = xpc::dyn_cast_or_default((xpc *)object, 0);
  xpc_release(object[0]);
  if (!v25)
  {
    v35[0] = 0;
    v35[1] = 0;
    FSModule::requestFSSync(v2, 1, (uint64_t)v35);
    if (v8) {
      uint64_t v27 = _Block_copy(v8);
    }
    else {
      uint64_t v27 = 0;
    }
    object[0] = (xpc_object_t)MEMORY[0x1E4F143A8];
    object[1] = (xpc_object_t)1174405120;
    xpc_object_t object[2] = ___ZNK8dispatch8callbackIU13block_pointerFvbEEclIJbEEEvDpT__block_invoke_2;
    uint64_t v42 = &__block_descriptor_tmp_140_0;
    if (v27) {
      size_t v29 = _Block_copy(v27);
    }
    else {
      size_t v29 = 0;
    }
    uint64_t v43 = v29;
    char v44 = 1;
    dispatch_async(v9, object);
    if (v43) {
      _Block_release(v43);
    }
    if (v27) {
      _Block_release(v27);
    }
    goto LABEL_64;
  }
  if (!v8)
  {
    char v26 = 0;
    size_t v36 = 0;
    size_t v37 = v9;
    if (!v9) {
      goto LABEL_39;
    }
    goto LABEL_38;
  }
  char v26 = _Block_copy(v8);
  size_t v36 = v26;
  size_t v37 = v9;
  if (v9) {
LABEL_38:
  }
    dispatch_retain(v9);
LABEL_39:
  FSModule::requestFSSync(v2, 1, (uint64_t)&v36);
  if (v9) {
    dispatch_release(v9);
  }
  if (v26) {
    _Block_release(v26);
  }
LABEL_64:
  if (v9) {
    dispatch_release(v9);
  }
  if (v8) {
    _Block_release(v8);
  }
  if (v39) {
    _Block_release(v39);
  }
}

void sub_1C593F604(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *aBlock, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void ___ZN8FSModule10initializeEN8dispatch13group_sessionE_block_invoke_9(uint64_t a1, int a2)
{
  if (a2) {
    uint64_t v3 = 0;
  }
  else {
    uint64_t v3 = 3760250880;
  }
  xpc_object_t v4 = xpc_null_create();
  uint64_t v5 = *(void *)(a1 + 32);
  xpc_object_t object = v4;
  xpc_object_t v6 = xpc_null_create();
  (*(void (**)(uint64_t, uint64_t, xpc_object_t *))(v5 + 16))(v5, v3, &object);
  xpc_release(object);
  xpc_release(v6);
}

void sub_1C593F7C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  xpc_release(object);
  xpc_release(v10);
  _Unwind_Resume(a1);
}

void FSModule::requestFSSync(void *a1, int a2, uint64_t a3)
{
  xpc_object_t v4 = (std::__shared_weak_count *)a1[16];
  if (!v4 || (uint64_t v7 = a1[15], (v8 = std::__shared_weak_count::lock(v4)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  char v9 = v8;
  p_shared_weak_owners = &v8->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
  }
  uint64_t v11 = a1[126];
  v14[0] = MEMORY[0x1E4F143A8];
  v14[1] = 1174405120;
  v14[2] = ___ZN8FSModule13requestFSSyncEjN8dispatch8callbackIU13block_pointerFvbEEE_block_invoke;
  v14[3] = &__block_descriptor_tmp_71_2;
  v14[4] = a1;
  void v14[5] = v7;
  long long v15 = v9;
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  uint64_t v12 = *(void **)a3;
  if (*(void *)a3) {
    uint64_t v12 = _Block_copy(v12);
  }
  uint64_t v13 = *(NSObject **)(a3 + 8);
  aBlocuint64_t k = v12;
  dispatch_object_t object = v13;
  if (v13) {
    dispatch_retain(v13);
  }
  int v18 = a2;
  dispatch_async(v11, v14);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v15) {
    std::__shared_weak_count::__release_weak(v15);
  }
  std::__shared_weak_count::__release_weak(v9);
}

uint64_t __copy_helper_block_e8_40c32_ZTSNSt3__18weak_ptrI8FSModuleEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c32_ZTSNSt3__18weak_ptrI8FSModuleEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void ___ZN8FSModule10initializeEN8dispatch13group_sessionE_block_invoke_15(void *a1, uint64_t a2, void **a3)
{
  xpc_object_t v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    uint64_t v6 = a1[4];
    uint64_t v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      size_t v8 = v7;
      if (a1[5])
      {
        v10[0] = MEMORY[0x1E4F143A8];
        v10[1] = 1174405120;
        _DWORD v10[2] = ___ZN8FSModule10initializeEN8dispatch13group_sessionE_block_invoke_2_16;
        v10[3] = &__block_descriptor_tmp_17_4;
        v10[4] = v6;
        char v9 = *a3;
        if (*a3) {
          char v9 = _Block_copy(v9);
        }
        aBlocuint64_t k = v9;
        ctu::SharedSynchronizable<FSModule>::execute_wrapped((uint64_t *)(v6 + 120), (uint64_t)v10);
        if (aBlock) {
          _Block_release(aBlock);
        }
      }
      if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
}

void ___ZN8FSModule10initializeEN8dispatch13group_sessionE_block_invoke_2_16(uint64_t a1)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(unsigned char *)(v2 + 929))
  {
    int v3 = BBUFSServerFlushInProgress();
    BOOL v4 = *(unsigned char *)(v2 + 931) != 0;
    uint64_t v5 = *(NSObject **)(v2 + 88);
    if (!os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  BOOL v4 = 0;
  int v3 = 0;
  uint64_t v5 = *(NSObject **)(v2 + 88);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
LABEL_3:
    *(_DWORD *)long long buf = 67109376;
    *(_DWORD *)&uint8_t buf[4] = v3;
    __int16 v16 = 1024;
    BOOL v17 = v4;
    _os_log_impl(&dword_1C5767000, v5, OS_LOG_TYPE_DEFAULT, "#I Reporting sync in progress: %d and sync not started: %d", buf, 0xEu);
  }
LABEL_4:
  *(void *)long long buf = 0xAAAAAAAAAAAAAAAALL;
  xpc_object_t v6 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v7 = v6;
  if (v6)
  {
    *(void *)long long buf = v6;
  }
  else
  {
    xpc_object_t v7 = xpc_null_create();
    *(void *)long long buf = v7;
    if (!v7)
    {
      xpc_object_t v8 = xpc_null_create();
      xpc_object_t v7 = 0;
      goto LABEL_13;
    }
  }
  if (MEMORY[0x1C8792D30](v7) == MEMORY[0x1E4F14590])
  {
    xpc_retain(v7);
    goto LABEL_14;
  }
  xpc_object_t v8 = xpc_null_create();
LABEL_13:
  *(void *)long long buf = v8;
LABEL_14:
  xpc_release(v7);
  xpc_object_t v9 = xpc_BOOL_create(v3);
  if (!v9) {
    xpc_object_t v9 = xpc_null_create();
  }
  xpc_object_t v10 = *(xpc_object_t *)buf;
  xpc_dictionary_set_value(*(xpc_object_t *)buf, (const char *)*MEMORY[0x1E4F4C590], v9);
  xpc_object_t v11 = xpc_null_create();
  xpc_release(v9);
  xpc_release(v11);
  xpc_object_t v12 = xpc_BOOL_create(v4);
  if (!v12) {
    xpc_object_t v12 = xpc_null_create();
  }
  xpc_dictionary_set_value(v10, (const char *)*MEMORY[0x1E4F4C598], v12);
  xpc_object_t v13 = xpc_null_create();
  xpc_release(v12);
  xpc_release(v13);
  unsigned int v14 = 0;
  dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>((uint64_t *)(a1 + 40), &v14, (void **)buf);
  xpc_release(*(xpc_object_t *)buf);
}

void sub_1C593FCCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, xpc_object_t object)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void ___ZN8FSModule10initializeEN8dispatch13group_sessionE_block_invoke_21(void *a1, xpc_object_t *a2, void **a3)
{
  uint64_t v5 = a1[4];
  memset(&v16, 170, sizeof(v16));
  xpc_object_t value = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E4F4CA30]);
  xpc_object_t object = value;
  if (value) {
    xpc_retain(value);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  xpc::dyn_cast_or_default();
  xpc_release(object);
  xpc_object_t v7 = (std::__shared_weak_count *)a1[6];
  if (!v7 || (xpc_object_t v8 = std::__shared_weak_count::lock(v7), (v18 = v8) == 0))
  {
LABEL_18:
    if ((SHIBYTE(v16.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
LABEL_21:
    operator delete(v16.__r_.__value_.__l.__data_);
    return;
  }
  xpc_object_t v9 = v8;
  uint64_t v17 = a1[5];
  if (v17)
  {
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 1174405120;
    _DWORD v12[2] = ___ZN8FSModule10initializeEN8dispatch13group_sessionE_block_invoke_2_22;
    v12[3] = &__block_descriptor_tmp_33_5;
    v12[4] = v5;
    xpc_object_t v10 = *a3;
    if (*a3) {
      xpc_object_t v10 = _Block_copy(v10);
    }
    aBlocuint64_t k = v10;
    if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&__p, v16.__r_.__value_.__l.__data_, v16.__r_.__value_.__l.__size_);
    }
    else {
      std::string __p = v16;
    }
    ctu::SharedSynchronizable<FSModule>::execute_wrapped((uint64_t *)(v5 + 120), (uint64_t)v12);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      xpc_object_t v11 = aBlock;
      if (!aBlock) {
        goto LABEL_17;
      }
    }
    else
    {
      xpc_object_t v11 = aBlock;
      if (!aBlock) {
        goto LABEL_17;
      }
    }
    _Block_release(v11);
  }
LABEL_17:
  if (atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_18;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_21;
  }
}

void sub_1C593FF20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *aBlock, uint64_t a15, uint64_t a16, uint64_t a17, xpc_object_t object, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (aBlock) {
    _Block_release(aBlock);
  }
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v24 - 56);
  if (a24 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void ___ZN8FSModule10initializeEN8dispatch13group_sessionE_block_invoke_2_22(uint64_t a1)
{
  uint64_t v98 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 32);
  if ((*(unsigned int (**)(uint64_t))(*(void *)v2 + 88))(v2))
  {
    memset(buf, 170, sizeof(buf));
    int v3 = (const void *)*MEMORY[0x1E4F4C720];
    size_t v4 = strlen((const char *)*MEMORY[0x1E4F4C720]);
    if (v4 > 0x7FFFFFFFFFFFFFF7) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    std::string::size_type v5 = v4;
    if (v4 >= 0x17)
    {
      uint64_t v15 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v4 | 7) != 0x17) {
        uint64_t v15 = v4 | 7;
      }
      uint64_t v16 = v15 + 1;
      p_dst = (std::string *)operator new(v15 + 1);
      __dst.__r_.__value_.__l.__size_ = v5;
      __dst.__r_.__value_.__r.__words[2] = v16 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v4;
      p_dst = &__dst;
      if (!v4)
      {
LABEL_26:
        p_dst->__r_.__value_.__s.__data_[v5] = 0;
        uint64_t v17 = (char *)operator new(0x28uLL);
        strcpy(v17, " rejected; ABM is shutting down ");
        uint64_t v18 = std::string::append(&__dst, v17, 0x20uLL);
        long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
        *(void *)&uint8_t buf[16] = *((void *)&v18->__r_.__value_.__l + 2);
        *(_OWORD *)long long buf = v19;
        v18->__r_.__value_.__l.__size_ = 0;
        v18->__r_.__value_.__r.__words[2] = 0;
        v18->__r_.__value_.__r.__words[0] = 0;
        operator delete(v17);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__dst.__r_.__value_.__l.__data_);
          uint64_t v20 = *(NSObject **)(v2 + 88);
          if (!os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
          {
LABEL_28:
            uint64_t v22 = *(void *)(a1 + 40);
            uint64_t v21 = (uint64_t *)(a1 + 40);
            if (!v22)
            {
LABEL_160:
              if ((char)buf[23] < 0) {
                operator delete(*(void **)buf);
              }
              return;
            }
LABEL_34:
            __dst.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
            uint64_t v25 = buf[23];
            if ((buf[23] & 0x80u) != 0) {
              uint64_t v25 = *(void *)&buf[8];
            }
            if (v25)
            {
              xpc_object_t v26 = xpc_dictionary_create(0, 0, 0);
              if (v26 || (xpc_object_t v26 = xpc_null_create()) != 0)
              {
                if (MEMORY[0x1C8792D30](v26) == MEMORY[0x1E4F14590])
                {
                  xpc_retain(v26);
                  xpc_object_t v27 = v26;
                }
                else
                {
                  xpc_object_t v27 = xpc_null_create();
                }
              }
              else
              {
                xpc_object_t v27 = xpc_null_create();
                xpc_object_t v26 = 0;
              }
              xpc_release(v26);
              xpc_object_t v68 = xpc_null_create();
              uint64_t v69 = (void *)__dst.__r_.__value_.__r.__words[0];
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v27;
              xpc_release(v69);
              xpc_release(v68);
              if ((buf[23] & 0x80u) == 0) {
                xpc_object_t v70 = buf;
              }
              else {
                xpc_object_t v70 = *(uint8_t **)buf;
              }
              xpc_object_t v71 = xpc_string_create((const char *)v70);
              if (!v71) {
                xpc_object_t v71 = xpc_null_create();
              }
              xpc_dictionary_set_value(v27, (const char *)*MEMORY[0x1E4F4C240], v71);
              xpc_object_t v72 = xpc_null_create();
              xpc_release(v71);
              xpc_release(v72);
            }
            LODWORD(v89) = -534716415;
            dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(v21, (unsigned int *)&v89, (void **)&__dst.__r_.__value_.__l.__data_);
            xpc_release(__dst.__r_.__value_.__l.__data_);
            goto LABEL_160;
          }
        }
        else
        {
          uint64_t v20 = *(NSObject **)(v2 + 88);
          if (!os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_28;
          }
        }
        xpc_object_t v23 = buf;
        if ((buf[23] & 0x80u) != 0) {
          xpc_object_t v23 = *(uint8_t **)buf;
        }
        LODWORD(__dst.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = (std::string::size_type)v23;
        _os_log_impl(&dword_1C5767000, v20, OS_LOG_TYPE_DEFAULT, "#I %s", (uint8_t *)&__dst, 0xCu);
        uint64_t v24 = *(void *)(a1 + 40);
        uint64_t v21 = (uint64_t *)(a1 + 40);
        if (!v24) {
          goto LABEL_160;
        }
        goto LABEL_34;
      }
    }
    memmove(p_dst, v3, v5);
    goto LABEL_26;
  }
  xpc_object_t v7 = (void *)(a1 + 48);
  int v8 = *(char *)(a1 + 71);
  if (v8 >= 0) {
    size_t v9 = *(unsigned __int8 *)(a1 + 71);
  }
  else {
    size_t v9 = *(void *)(a1 + 56);
  }
  if (v9 == strlen((const char *)*MEMORY[0x1E4F4C4E8]))
  {
    xpc_object_t v10 = (const void *)(v8 >= 0 ? a1 + 48 : *v7);
    if (!memcmp(v10, (const void *)*MEMORY[0x1E4F4C4E8], v9))
    {
      if (!*(unsigned char *)(v2 + 929))
      {
        __dst.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
        __dst.__r_.__value_.__l.__size_ = 0xAAAAAAAAAAAAAAAALL;
        aBlock[0] = MEMORY[0x1E4F143A8];
        aBlock[1] = 1174405120;
        aBlock[2] = ___ZN8FSModule10initializeEN8dispatch13group_sessionE_block_invoke_23;
        aBlock[3] = &__block_descriptor_tmp_27_2;
        void aBlock[4] = v2;
        uint64_t v43 = *(void **)(a1 + 40);
        if (v43) {
          uint64_t v43 = _Block_copy(v43);
        }
        int v92 = v43;
        char v44 = _Block_copy(aBlock);
        size_t v45 = *(NSObject **)(v2 + 136);
        if (v45) {
          dispatch_retain(v45);
        }
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v44;
        __dst.__r_.__value_.__l.__size_ = (std::string::size_type)v45;
        unint64_t v89 = 0xAAAAAAAAAAAAAAAALL;
        dispatch_object_t v90 = (std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL;
        uint64_t v46 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
        uint64_t v47 = off_1EBBDD2A0;
        if (!off_1EBBDD2A0)
        {
          CommandDriverFactory::create_default_global((uint64_t *)buf, v46);
          long long v48 = *(_OWORD *)buf;
          *(void *)long long buf = 0;
          *(void *)&uint8_t buf[8] = 0;
          unint64_t v49 = (std::__shared_weak_count *)*(&off_1EBBDD2A0 + 1);
          off_1EBBDD2A0 = v48;
          if (v49 && !atomic_fetch_add(&v49->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
            std::__shared_weak_count::__release_weak(v49);
          }
          size_t v50 = *(std::__shared_weak_count **)&buf[8];
          if (*(void *)&buf[8]
            && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
            std::__shared_weak_count::__release_weak(v50);
          }
          uint64_t v47 = off_1EBBDD2A0;
        }
        uint64_t v51 = (std::__shared_weak_count *)*(&off_1EBBDD2A0 + 1);
        uint64_t v85 = v47;
        uint64_t v86 = *(&off_1EBBDD2A0 + 1);
        if (*(&off_1EBBDD2A0 + 1)) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDD2A0 + 1) + 8), 1uLL, memory_order_relaxed);
        }
        pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
        (*(void (**)(unint64_t *__return_ptr, uint64_t))(*(void *)v47 + 16))(&v87, v47);
        unint64_t v89 = 0;
        dispatch_object_t v90 = 0;
        if (v88)
        {
          dispatch_object_t v90 = std::__shared_weak_count::lock(v88);
          if (v90) {
            unint64_t v89 = v87;
          }
          if (v88) {
            std::__shared_weak_count::__release_weak(v88);
          }
        }
        if (v51 && !atomic_fetch_add(&v51->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
          std::__shared_weak_count::__release_weak(v51);
        }
        unint64_t v52 = v89;
        if (v89)
        {
          uint64_t v53 = (void *)__dst.__r_.__value_.__r.__words[0];
          if (__dst.__r_.__value_.__r.__words[0]) {
            uint64_t v53 = _Block_copy(__dst.__r_.__value_.__l.__data_);
          }
          xpc_object_t v83 = v53;
          dispatch_object_t object = (dispatch_object_t)__dst.__r_.__value_.__l.__size_;
          if (__dst.__r_.__value_.__l.__size_) {
            dispatch_retain((dispatch_object_t)__dst.__r_.__value_.__l.__size_);
          }
          (*(void (**)(unint64_t, void **))(*(void *)v52 + 80))(v52, &v83);
          if (object) {
            dispatch_release(object);
          }
          if (v83) {
            _Block_release(v83);
          }
        }
        long long v54 = v90;
        if (v90 && !atomic_fetch_add(&v90->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
          std::__shared_weak_count::__release_weak(v54);
        }
        if (__dst.__r_.__value_.__l.__size_) {
          dispatch_release((dispatch_object_t)__dst.__r_.__value_.__l.__size_);
        }
        if (__dst.__r_.__value_.__r.__words[0]) {
          _Block_release(__dst.__r_.__value_.__l.__data_);
        }
        if (v92) {
          _Block_release(v92);
        }
        return;
      }
      if (!FSModule::eraseRemoteFileSystem_sync((NSObject **)v2))
      {
        uint64_t v55 = 3760250880;
LABEL_175:
        xpc_object_t v76 = xpc_null_create();
        uint64_t v77 = *(void *)(a1 + 40);
        *(void *)long long buf = v76;
        xpc_object_t v78 = xpc_null_create();
        (*(void (**)(uint64_t, uint64_t, uint8_t *))(v77 + 16))(v77, v55, buf);
        xpc_release(*(xpc_object_t *)buf);
        xpc_release(v78);
        return;
      }
      __dst.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
      __dst.__r_.__value_.__l.__size_ = 0xAAAAAAAAAAAAAAAALL;
      pthread_mutex_lock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
      size_t v29 = (uint64_t *)off_1EBBDCFD0;
      if (!off_1EBBDCFD0)
      {
        ABMServer::create_default_global(buf);
        long long v30 = *(_OWORD *)buf;
        *(void *)long long buf = 0;
        *(void *)&uint8_t buf[8] = 0;
        uint64_t v31 = (std::__shared_weak_count *)*(&off_1EBBDCFD0 + 1);
        off_1EBBDCFD0 = v30;
        if (v31 && !atomic_fetch_add(&v31->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
          std::__shared_weak_count::__release_weak(v31);
        }
        uint64_t v32 = *(std::__shared_weak_count **)&buf[8];
        if (*(void *)&buf[8]
          && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
          std::__shared_weak_count::__release_weak(v32);
        }
        size_t v29 = (uint64_t *)off_1EBBDCFD0;
      }
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v29;
      __dst.__r_.__value_.__l.__size_ = *(&off_1EBBDCFD0 + 1);
      if (*(&off_1EBBDCFD0 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDCFD0 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      pthread_mutex_unlock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
      xpc_object_t v33 = (const void *)*MEMORY[0x1E4F4CC38];
      size_t v34 = strlen((const char *)*MEMORY[0x1E4F4CC38]);
      if (v34 > 0x7FFFFFFFFFFFFFF7) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      size_t v35 = (void *)v34;
      if (v34 >= 0x17)
      {
        uint64_t v73 = (v34 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v34 | 7) != 0x17) {
          uint64_t v73 = v34 | 7;
        }
        uint64_t v74 = v73 + 1;
        size_t v36 = (void **)operator new(v73 + 1);
        v94[1] = v35;
        unint64_t v95 = v74 | 0x8000000000000000;
        v94[0] = v36;
      }
      else
      {
        HIBYTE(v95) = v34;
        size_t v36 = v94;
        if (!v34) {
          goto LABEL_169;
        }
      }
      memmove(v36, v33, (size_t)v35);
LABEL_169:
      *((unsigned char *)v35 + (void)v36) = 0;
      uint64_t v93 = 0;
      ABMServer::broadcast(v29, (uint64_t)v94, &v93);
      if (SHIBYTE(v95) < 0) {
        operator delete(v94[0]);
      }
      std::string::size_type size = (std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_;
      if (__dst.__r_.__value_.__l.__size_
        && !atomic_fetch_add((atomic_ullong *volatile)(__dst.__r_.__value_.__l.__size_ + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
      uint64_t v55 = 0;
      goto LABEL_175;
    }
  }
  if (v9 != strlen((const char *)*MEMORY[0x1E4F4D228])
    || (v8 >= 0 ? (xpc_object_t v11 = (void *)(a1 + 48)) : (xpc_object_t v11 = (void *)*v7),
        memcmp(v11, (const void *)*MEMORY[0x1E4F4D228], v9)))
  {
    xpc_object_t v12 = *(NSObject **)(v2 + 88);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      if (v8 < 0) {
        xpc_object_t v7 = (void *)*v7;
      }
      *(_DWORD *)long long buf = 136315138;
      *(void *)&uint8_t buf[4] = v7;
      _os_log_error_impl(&dword_1C5767000, v12, OS_LOG_TYPE_ERROR, "Command [%s] not supported", buf, 0xCu);
    }
    *(void *)long long buf = 0xAAAAAAAAAAAAAAAALL;
    xpc_object_t v13 = xpc_dictionary_create(0, 0, 0);
    xpc_object_t v14 = v13;
    if (v13)
    {
      *(void *)long long buf = v13;
    }
    else
    {
      xpc_object_t v14 = xpc_null_create();
      *(void *)long long buf = v14;
      if (!v14)
      {
        xpc_object_t v28 = xpc_null_create();
        xpc_object_t v14 = 0;
        goto LABEL_67;
      }
    }
    if (MEMORY[0x1C8792D30](v14) == MEMORY[0x1E4F14590])
    {
      xpc_retain(v14);
LABEL_68:
      xpc_release(v14);
      xpc_object_t v41 = xpc_string_create("Command not supported");
      if (!v41) {
        xpc_object_t v41 = xpc_null_create();
      }
      xpc_dictionary_set_value(*(xpc_object_t *)buf, (const char *)*MEMORY[0x1E4F4C240], v41);
      xpc_object_t v42 = xpc_null_create();
      xpc_release(v41);
      xpc_release(v42);
      LODWORD(__dst.__r_.__value_.__l.__data_) = -534716414;
      dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>((uint64_t *)(a1 + 40), (unsigned int *)&__dst, (void **)buf);
      xpc_release(*(xpc_object_t *)buf);
      return;
    }
    xpc_object_t v28 = xpc_null_create();
LABEL_67:
    *(void *)long long buf = v28;
    goto LABEL_68;
  }
  if (*(unsigned char *)(v2 + 929))
  {
    size_t v37 = *(NSObject **)(v2 + 88);
    if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl(&dword_1C5767000, v37, OS_LOG_TYPE_ERROR, "Restore carrier defaults command is not supported on this device", buf, 2u);
    }
    xpc_object_t v38 = xpc_null_create();
    uint64_t v39 = *(void *)(a1 + 40);
    *(void *)long long buf = v38;
    xpc_object_t v40 = xpc_null_create();
    (*(void (**)(uint64_t, void, uint8_t *))(v39 + 16))(v39, 0, buf);
    xpc_release(*(xpc_object_t *)buf);
    xpc_release(v40);
  }
  else
  {
    __dst.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
    __dst.__r_.__value_.__l.__size_ = 0xAAAAAAAAAAAAAAAALL;
    v81[0] = MEMORY[0x1E4F143A8];
    v81[1] = 1174405120;
    v81[2] = ___ZN8FSModule10initializeEN8dispatch13group_sessionE_block_invoke_28;
    v81[3] = &__block_descriptor_tmp_31_3;
    v81[4] = v2;
    std::string::size_type v56 = *(void **)(a1 + 40);
    if (v56) {
      std::string::size_type v56 = _Block_copy(v56);
    }
    unint64_t v82 = v56;
    size_t v57 = _Block_copy(v81);
    unint64_t v58 = *(NSObject **)(v2 + 136);
    if (v58) {
      dispatch_retain(v58);
    }
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v57;
    __dst.__r_.__value_.__l.__size_ = (std::string::size_type)v58;
    unint64_t v89 = 0xAAAAAAAAAAAAAAAALL;
    dispatch_object_t v90 = (std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL;
    uint64_t v59 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
    uint64_t v60 = off_1EBBDD2A0;
    if (!off_1EBBDD2A0)
    {
      CommandDriverFactory::create_default_global((uint64_t *)buf, v59);
      long long v61 = *(_OWORD *)buf;
      *(void *)long long buf = 0;
      *(void *)&uint8_t buf[8] = 0;
      uint64_t v62 = (std::__shared_weak_count *)*(&off_1EBBDD2A0 + 1);
      off_1EBBDD2A0 = v61;
      if (v62 && !atomic_fetch_add(&v62->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
        std::__shared_weak_count::__release_weak(v62);
      }
      uint64_t v63 = *(std::__shared_weak_count **)&buf[8];
      if (*(void *)&buf[8]
        && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
        std::__shared_weak_count::__release_weak(v63);
      }
      uint64_t v60 = off_1EBBDD2A0;
    }
    uint64_t v64 = (std::__shared_weak_count *)*(&off_1EBBDD2A0 + 1);
    uint64_t v85 = v60;
    uint64_t v86 = *(&off_1EBBDD2A0 + 1);
    if (*(&off_1EBBDD2A0 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDD2A0 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
    (*(void (**)(unint64_t *__return_ptr, uint64_t))(*(void *)v60 + 16))(&v87, v60);
    unint64_t v89 = 0;
    dispatch_object_t v90 = 0;
    if (v88)
    {
      dispatch_object_t v90 = std::__shared_weak_count::lock(v88);
      if (v90) {
        unint64_t v89 = v87;
      }
      if (v88) {
        std::__shared_weak_count::__release_weak(v88);
      }
    }
    if (v64 && !atomic_fetch_add(&v64->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
      std::__shared_weak_count::__release_weak(v64);
    }
    unint64_t v65 = v89;
    if (v89)
    {
      size_t v66 = (void *)__dst.__r_.__value_.__r.__words[0];
      if (__dst.__r_.__value_.__r.__words[0]) {
        size_t v66 = _Block_copy(__dst.__r_.__value_.__l.__data_);
      }
      xpc_object_t v79 = v66;
      dispatch_object_t v80 = (dispatch_object_t)__dst.__r_.__value_.__l.__size_;
      if (__dst.__r_.__value_.__l.__size_) {
        dispatch_retain((dispatch_object_t)__dst.__r_.__value_.__l.__size_);
      }
      (*(void (**)(unint64_t, void **))(*(void *)v65 + 88))(v65, &v79);
      if (v80) {
        dispatch_release(v80);
      }
      if (v79) {
        _Block_release(v79);
      }
    }
    size_t v67 = v90;
    if (v90 && !atomic_fetch_add(&v90->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
    if (__dst.__r_.__value_.__l.__size_) {
      dispatch_release((dispatch_object_t)__dst.__r_.__value_.__l.__size_);
    }
    if (__dst.__r_.__value_.__r.__words[0]) {
      _Block_release(__dst.__r_.__value_.__l.__data_);
    }
    if (v82) {
      _Block_release(v82);
    }
  }
}

void sub_1C5940D54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *aBlock, char a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30)
{
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>::~callback(v30 - 128);
  if (aBlock) {
    _Block_release(aBlock);
  }
  _Unwind_Resume(a1);
}

uint64_t FSModule::eraseRemoteFileSystem_sync(NSObject **this)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  FSModule::handleBasebandReset_sync((FSModule *)this);
  memset(__dst, 170, sizeof(__dst));
  uint64_t v2 = (const char *)MEMORY[0x1C878FC70]();
  size_t v3 = strlen(v2);
  if (v3 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v4 = (void *)v3;
  if (v3 >= 0x17)
  {
    uint64_t v6 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17) {
      uint64_t v6 = v3 | 7;
    }
    uint64_t v7 = v6 + 1;
    std::string::size_type v5 = (void **)operator new(v6 + 1);
    __dst[1] = v4;
    xpc_object_t __dst[2] = (void *)(v7 | 0x8000000000000000);
    __dst[0] = v5;
    goto LABEL_8;
  }
  HIBYTE(__dst[2]) = v3;
  std::string::size_type v5 = __dst;
  if (v3) {
LABEL_8:
  }
    memmove(v5, v2, (size_t)v4);
  *((unsigned char *)v4 + (void)v5) = 0;
  uint64_t v8 = support::fs::removeDirContents((const char *)__dst, 0);
  size_t v9 = this[11];
  if (v8)
  {
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      xpc_object_t v10 = __dst;
      if (SHIBYTE(__dst[2]) < 0) {
        xpc_object_t v10 = (void **)__dst[0];
      }
      *(_DWORD *)long long buf = 136315138;
      uint64_t v15 = v10;
      _os_log_impl(&dword_1C5767000, v9, OS_LOG_TYPE_DEFAULT, "#I Removed contents of %s", buf, 0xCu);
      if (SHIBYTE(__dst[2]) < 0) {
        goto LABEL_17;
      }
      return v8;
    }
  }
  else if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
  {
    xpc_object_t v12 = __dst;
    if (SHIBYTE(__dst[2]) < 0) {
      xpc_object_t v12 = (void **)__dst[0];
    }
    *(_DWORD *)long long buf = 136315138;
    uint64_t v15 = v12;
    _os_log_error_impl(&dword_1C5767000, v9, OS_LOG_TYPE_ERROR, "Failed removing %s", buf, 0xCu);
    if (SHIBYTE(__dst[2]) < 0) {
      goto LABEL_17;
    }
    return v8;
  }
  if (SHIBYTE(__dst[2]) < 0) {
LABEL_17:
  }
    operator delete(__dst[0]);
  return v8;
}

void sub_1C59411D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void ABMServer::broadcast(uint64_t *a1, uint64_t a2, const void **a3)
{
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v8, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    std::string::size_type v5 = *a3;
    uint64_t v7 = v5;
    if (!v5) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  std::string v8 = *(std::string *)a2;
  std::string::size_type v5 = *a3;
  uint64_t v7 = v5;
  if (v5) {
LABEL_5:
  }
    CFRetain(v5);
LABEL_6:
  uint64_t v6 = 0;
  ABMServer::broadcast(a1, (uint64_t)&v8, &v7, &v6);
  if (v5) {
    CFRelease(v5);
  }
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v8.__r_.__value_.__l.__data_);
  }
}

void sub_1C59412C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void ___ZN8FSModule10initializeEN8dispatch13group_sessionE_block_invoke_23(uint64_t a1, void **a2)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  size_t v4 = *a2;
  if (*a2) {
    std::string::size_type v5 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  }
  else {
    std::string::size_type v5 = 0;
  }
  if (v5)
  {
    uint64_t v6 = *(NSObject **)(*(void *)(a1 + 32) + 88);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf[0]) = 138412290;
      *(xpc_object_t *)((char *)buf + 4) = v4;
      _os_log_impl(&dword_1C5767000, v6, OS_LOG_TYPE_DEFAULT, "#I Failed to trigger nonvolatile erase: %@", (uint8_t *)buf, 0xCu);
    }
    goto LABEL_30;
  }
  unint64_t v26 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v27 = 0xAAAAAAAAAAAAAAAALL;
  pthread_mutex_lock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
  uint64_t v7 = (uint64_t *)off_1EBBDCFD0;
  if (!off_1EBBDCFD0)
  {
    ABMServer::create_default_global(buf);
    long long v8 = *(_OWORD *)buf;
    memset(buf, 0, 16);
    size_t v9 = (std::__shared_weak_count *)*(&off_1EBBDCFD0 + 1);
    off_1EBBDCFD0 = v8;
    if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
    xpc_object_t v10 = (std::__shared_weak_count *)buf[1];
    if (buf[1] && !atomic_fetch_add((atomic_ullong *volatile)buf[1] + 1, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
    uint64_t v7 = (uint64_t *)off_1EBBDCFD0;
  }
  unint64_t v26 = (unint64_t)v7;
  unint64_t v27 = *(&off_1EBBDCFD0 + 1);
  if (*(&off_1EBBDCFD0 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDCFD0 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
  xpc_object_t v11 = (const void *)*MEMORY[0x1E4F4CC38];
  size_t v12 = strlen((const char *)*MEMORY[0x1E4F4CC38]);
  if (v12 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  xpc_object_t v13 = (void *)v12;
  if (v12 >= 0x17)
  {
    uint64_t v15 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v12 | 7) != 0x17) {
      uint64_t v15 = v12 | 7;
    }
    uint64_t v16 = v15 + 1;
    xpc_object_t v14 = (void **)operator new(v15 + 1);
    __dst[1] = v13;
    unint64_t v25 = v16 | 0x8000000000000000;
    __dst[0] = v14;
  }
  else
  {
    HIBYTE(v25) = v12;
    xpc_object_t v14 = __dst;
    if (!v12) {
      goto LABEL_25;
    }
  }
  memmove(v14, v11, (size_t)v13);
LABEL_25:
  *((unsigned char *)v13 + (void)v14) = 0;
  xpc_object_t v23 = 0;
  ABMServer::broadcast(v7, (uint64_t)__dst, &v23);
  if (SHIBYTE(v25) < 0) {
    operator delete(__dst[0]);
  }
  uint64_t v17 = (std::__shared_weak_count *)v27;
  if (v27 && !atomic_fetch_add((atomic_ullong *volatile)(v27 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
LABEL_30:
  if (*a2) {
    uint64_t v18 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  }
  else {
    uint64_t v18 = 0;
  }
  if (v18) {
    uint64_t v19 = 3760250880;
  }
  else {
    uint64_t v19 = 0;
  }
  xpc_object_t v20 = xpc_null_create();
  uint64_t v21 = *(void *)(a1 + 40);
  buf[0] = v20;
  xpc_object_t v22 = xpc_null_create();
  (*(void (**)(uint64_t, uint64_t, xpc_object_t *))(v21 + 16))(v21, v19, buf);
  xpc_release(buf[0]);
  xpc_release(v22);
}

void sub_1C5941614(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, xpc_object_t object)
{
}

void ___ZN8FSModule10initializeEN8dispatch13group_sessionE_block_invoke_28(uint64_t a1, uint64_t *a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *a2;
  if (*a2) {
    size_t v4 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  }
  else {
    size_t v4 = 0;
  }
  if (v4)
  {
    uint64_t v6 = *(NSObject **)(*(void *)(a1 + 32) + 88);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)dispatch_object_t object = 138412290;
      *(void *)&xpc_object_t object[4] = v3;
      _os_log_error_impl(&dword_1C5767000, v6, OS_LOG_TYPE_ERROR, "Failed to trigger nonvolatile restore: %@", object, 0xCu);
      uint64_t v3 = *a2;
    }
  }
  if (v3) {
    uint64_t v7 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  }
  else {
    uint64_t v7 = 0;
  }
  if (v7) {
    uint64_t v8 = 3760250880;
  }
  else {
    uint64_t v8 = 0;
  }
  xpc_object_t v9 = xpc_null_create();
  uint64_t v10 = *(void *)(a1 + 40);
  *(void *)dispatch_object_t object = v9;
  xpc_object_t v11 = xpc_null_create();
  (*(void (**)(uint64_t, uint64_t, unsigned char *))(v10 + 16))(v10, v8, object);
  xpc_release(*(xpc_object_t *)object);
  xpc_release(v11);
}

void sub_1C59417EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void __copy_helper_block_e8_40c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE48c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(std::string *a1, uint64_t a2)
{
  size_t v4 = *(void **)(a2 + 40);
  if (v4) {
    size_t v4 = _Block_copy(v4);
  }
  a1[1].__r_.__value_.__r.__words[2] = (std::string::size_type)v4;
  std::string::size_type v5 = a1 + 2;
  if (*(char *)(a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(a2 + 48), *(void *)(a2 + 56));
  }
  else
  {
    long long v6 = *(_OWORD *)(a2 + 48);
    a1[2].__r_.__value_.__r.__words[2] = *(void *)(a2 + 64);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
}

void sub_1C5941898(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(const void **)(v1 + 40);
  if (v3) {
    _Block_release(v3);
  }
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_40c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE48c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1)
{
  if (*(char *)(a1 + 71) < 0)
  {
    operator delete(*(void **)(a1 + 48));
    uint64_t v2 = *(const void **)(a1 + 40);
    if (!v2) {
      return;
    }
    goto LABEL_5;
  }
  uint64_t v2 = *(const void **)(a1 + 40);
  if (v2) {
LABEL_5:
  }
    _Block_release(v2);
}

void ___ZN8FSModule10initializeEN8dispatch13group_sessionE_block_invoke_37(void *a1, uint64_t a2, void **a3)
{
  size_t v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    uint64_t v6 = a1[4];
    uint64_t v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      uint64_t v8 = v7;
      if (a1[5])
      {
        v10[0] = MEMORY[0x1E4F143A8];
        v10[1] = 1174405120;
        _DWORD v10[2] = ___ZN8FSModule10initializeEN8dispatch13group_sessionE_block_invoke_2_38;
        v10[3] = &__block_descriptor_tmp_41_4;
        v10[4] = v6;
        xpc_object_t v9 = *a3;
        if (*a3) {
          xpc_object_t v9 = _Block_copy(v9);
        }
        aBlocuint64_t k = v9;
        ctu::SharedSynchronizable<FSModule>::execute_wrapped((uint64_t *)(v6 + 120), (uint64_t)v10);
        if (aBlock) {
          _Block_release(aBlock);
        }
      }
      if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
}

void ___ZN8FSModule10initializeEN8dispatch13group_sessionE_block_invoke_2_38(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(*(void *)(a1 + 32) + 88);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v6 = 0;
    _os_log_impl(&dword_1C5767000, v2, OS_LOG_TYPE_DEFAULT, "#I Request to allow rfs sync is not supported", v6, 2u);
  }
  xpc_object_t v3 = xpc_null_create();
  uint64_t v4 = *(void *)(a1 + 40);
  xpc_object_t object = v3;
  xpc_object_t v5 = xpc_null_create();
  (*(void (**)(uint64_t, uint64_t, xpc_object_t *))(v4 + 16))(v4, 3760250884, &object);
  xpc_release(object);
  xpc_release(v5);
}

void sub_1C5941AD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  xpc_release(object);
  xpc_release(v10);
  _Unwind_Resume(a1);
}

void ___ZN8FSModule10initializeEN8dispatch13group_sessionE_block_invoke_45(void *a1, uint64_t a2, void **a3)
{
  uint64_t v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    uint64_t v6 = a1[4];
    uint64_t v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      uint64_t v8 = v7;
      if (a1[5])
      {
        v10[0] = MEMORY[0x1E4F143A8];
        v10[1] = 1174405120;
        _DWORD v10[2] = ___ZN8FSModule10initializeEN8dispatch13group_sessionE_block_invoke_2_46;
        v10[3] = &__block_descriptor_tmp_49_0;
        v10[4] = v6;
        xpc_object_t v9 = *a3;
        if (*a3) {
          xpc_object_t v9 = _Block_copy(v9);
        }
        aBlocuint64_t k = v9;
        ctu::SharedSynchronizable<FSModule>::execute_wrapped((uint64_t *)(v6 + 120), (uint64_t)v10);
        if (aBlock) {
          _Block_release(aBlock);
        }
      }
      if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
}

void ___ZN8FSModule10initializeEN8dispatch13group_sessionE_block_invoke_2_46(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(*(void *)(a1 + 32) + 88);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v6 = 0;
    _os_log_impl(&dword_1C5767000, v2, OS_LOG_TYPE_DEFAULT, "#I Request to prevent rfs sync is not supported", v6, 2u);
  }
  xpc_object_t v3 = xpc_null_create();
  uint64_t v4 = *(void *)(a1 + 40);
  xpc_object_t object = v3;
  xpc_object_t v5 = xpc_null_create();
  (*(void (**)(uint64_t, uint64_t, xpc_object_t *))(v4 + 16))(v4, 3760250884, &object);
  xpc_release(object);
  xpc_release(v5);
}

void sub_1C5941CD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  xpc_release(object);
  xpc_release(v10);
  _Unwind_Resume(a1);
}

void FSModule::finishInitialization_sync(FSModule *this)
{
  if (!*((unsigned char *)this + 929)) {
    return;
  }
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 16);
  if (!v2 || (uint64_t v3 = *((void *)this + 15), (v4 = std::__shared_weak_count::lock(v2)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  xpc_object_t v5 = v4;
  atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v5);
  }
  uint64_t v6 = (const char *)(*(uint64_t (**)(FSModule *))(*(void *)this + 16))(this);
  size_t v7 = strlen(v6);
  if (v7 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v8 = (void *)v7;
  if (v7 >= 0x17)
  {
    uint64_t v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17) {
      uint64_t v10 = v7 | 7;
    }
    uint64_t v11 = v10 + 1;
    xpc_object_t v9 = (void **)operator new(v10 + 1);
    __dst[1] = v8;
    unint64_t v60 = v11 | 0x8000000000000000;
    __dst[0] = v9;
  }
  else
  {
    HIBYTE(v60) = v7;
    xpc_object_t v9 = __dst;
    if (!v7) {
      goto LABEL_14;
    }
  }
  memmove(v9, v6, (size_t)v8);
LABEL_14:
  *((unsigned char *)v8 + (void)v9) = 0;
  unint64_t v58 = 0;
  AppleBasebandManager::create();
  long long v12 = v61;
  long long v61 = 0uLL;
  uint64_t v13 = (std::__shared_weak_count *)*((void *)this + 119);
  *((_OWORD *)this + 59) = v12;
  if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  xpc_object_t v14 = (std::__shared_weak_count *)*((void *)&v61 + 1);
  if (!*((void *)&v61 + 1)
    || atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v61 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    uint64_t v15 = v58;
    if (!v58) {
      goto LABEL_21;
    }
    goto LABEL_20;
  }
  ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
  std::__shared_weak_count::__release_weak(v14);
  uint64_t v15 = v58;
  if (v58) {
LABEL_20:
  }
    CFRelease(v15);
LABEL_21:
  if (SHIBYTE(v60) < 0) {
    operator delete(__dst[0]);
  }
  uint64_t v16 = (const void *)*MEMORY[0x1E4F4CEF8];
  size_t v17 = strlen((const char *)*MEMORY[0x1E4F4CEF8]);
  if (v17 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v18 = (void *)v17;
  if (v17 >= 0x17)
  {
    uint64_t v20 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v17 | 7) != 0x17) {
      uint64_t v20 = v17 | 7;
    }
    uint64_t v21 = v20 + 1;
    uint64_t v19 = (void **)operator new(v20 + 1);
    v56[1] = v18;
    unint64_t v57 = v21 | 0x8000000000000000;
    v56[0] = v19;
    goto LABEL_30;
  }
  HIBYTE(v57) = v17;
  uint64_t v19 = v56;
  if (v17) {
LABEL_30:
  }
    memmove(v19, v16, (size_t)v18);
  *((unsigned char *)v18 + (void)v19) = 0;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN8FSModule25finishInitialization_syncEv_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_59_3;
  void aBlock[4] = this;
  void aBlock[5] = v3;
  uint64_t v53 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  xpc_object_t v22 = _Block_copy(aBlock);
  xpc_object_t v23 = *((void *)this + 17);
  if (v23) {
    dispatch_retain(*((dispatch_object_t *)this + 17));
  }
  long long v54 = v22;
  dispatch_object_t v55 = v23;
  AppleBasebandManager::setEventHandler();
  if (v55) {
    dispatch_release(v55);
  }
  if (v54) {
    _Block_release(v54);
  }
  if (SHIBYTE(v57) < 0) {
    operator delete(v56[0]);
  }
  uint64_t v24 = (const void *)*MEMORY[0x1E4F4D0F8];
  size_t v25 = strlen((const char *)*MEMORY[0x1E4F4D0F8]);
  if (v25 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  unint64_t v26 = (void *)v25;
  if (v25 >= 0x17)
  {
    uint64_t v28 = (v25 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v25 | 7) != 0x17) {
      uint64_t v28 = v25 | 7;
    }
    uint64_t v29 = v28 + 1;
    unint64_t v27 = operator new(v28 + 1);
    __p[1] = v26;
    unint64_t v51 = v29 | 0x8000000000000000;
    __p[0] = v27;
    goto LABEL_46;
  }
  HIBYTE(v51) = v25;
  unint64_t v27 = __p;
  if (v25) {
LABEL_46:
  }
    memmove(v27, v24, (size_t)v26);
  *((unsigned char *)v26 + (void)v27) = 0;
  v46[0] = MEMORY[0x1E4F143A8];
  v46[1] = 1174405120;
  void v46[2] = ___ZN8FSModule25finishInitialization_syncEv_block_invoke_60;
  v46[3] = &__block_descriptor_tmp_63;
  v46[4] = this;
  void v46[5] = v3;
  uint64_t v47 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  uint64_t v30 = _Block_copy(v46);
  uint64_t v31 = *((void *)this + 17);
  if (v31) {
    dispatch_retain(*((dispatch_object_t *)this + 17));
  }
  long long v48 = v30;
  dispatch_object_t object = v31;
  AppleBasebandManager::setEventHandler();
  if (object) {
    dispatch_release(object);
  }
  if (v48) {
    _Block_release(v48);
  }
  if (SHIBYTE(v51) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v32 = (const void *)*MEMORY[0x1E4F4CB10];
  size_t v33 = strlen((const char *)*MEMORY[0x1E4F4CB10]);
  if (v33 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v34 = (void *)v33;
  if (v33 >= 0x17)
  {
    uint64_t v36 = (v33 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v33 | 7) != 0x17) {
      uint64_t v36 = v33 | 7;
    }
    uint64_t v37 = v36 + 1;
    size_t v35 = operator new(v36 + 1);
    v44[1] = v34;
    unint64_t v45 = v37 | 0x8000000000000000;
    v44[0] = v35;
  }
  else
  {
    HIBYTE(v45) = v33;
    size_t v35 = v44;
    if (!v33) {
      goto LABEL_63;
    }
  }
  memmove(v35, v32, (size_t)v34);
LABEL_63:
  *((unsigned char *)v34 + (void)v35) = 0;
  v40[0] = MEMORY[0x1E4F143A8];
  v40[1] = 1174405120;
  v40[2] = ___ZN8FSModule25finishInitialization_syncEv_block_invoke_64;
  v40[3] = &__block_descriptor_tmp_65_2;
  uint8_t v40[4] = v3;
  xpc_object_t v41 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  xpc_object_t v38 = _Block_copy(v40);
  uint64_t v39 = *((void *)this + 17);
  if (v39) {
    dispatch_retain(*((dispatch_object_t *)this + 17));
  }
  xpc_object_t v42 = v38;
  dispatch_object_t v43 = v39;
  AppleBasebandManager::setEventHandler();
  if (v43) {
    dispatch_release(v43);
  }
  if (v42) {
    _Block_release(v42);
  }
  if (SHIBYTE(v45) < 0) {
    operator delete(v44[0]);
  }
  AppleBasebandManager::eventsOn(*((AppleBasebandManager **)this + 118));
  if (v41) {
    std::__shared_weak_count::__release_weak(v41);
  }
  if (v47) {
    std::__shared_weak_count::__release_weak(v47);
  }
  if (v53) {
    std::__shared_weak_count::__release_weak(v53);
  }
  std::__shared_weak_count::__release_weak(v5);
}

void sub_1C5942330(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,std::__shared_weak_count *a30,char a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,std::__shared_weak_count *a45)
{
  if (a15) {
    std::__shared_weak_count::__release_weak(a15);
  }
  if (a30) {
    std::__shared_weak_count::__release_weak(a30);
  }
  if (a45)
  {
    std::__shared_weak_count::__release_weak(a45);
    std::__shared_weak_count::__release_weak(v45);
    _Unwind_Resume(a1);
  }
  std::__shared_weak_count::__release_weak(v45);
  _Unwind_Resume(a1);
}

void ___ZN8FSModule25finishInitialization_syncEv_block_invoke(void *a1, abm::client::Event **a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    uint64_t v5 = a1[4];
    uint64_t v6 = std::__shared_weak_count::lock(v3);
    uint64_t v29 = v6;
    if (v6)
    {
      size_t v7 = v6;
      if (a1[5])
      {
        CFDictionaryRef v27 = (const __CFDictionary *)0xAAAAAAAAAAAAAAAALL;
        abm::client::Event::getData((uint64_t *)&v27, *a2);
        CFDictionaryRef v8 = v27;
        if (v27) {
          xpc_object_t v9 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
        }
        else {
          xpc_object_t v9 = 0;
        }
        if (v9)
        {
          v26[0] = 0xAAAAAAAAAAAAAAAALL;
          v26[1] = 0xAAAAAAAAAAAAAAAALL;
          ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v26, v27);
          memset(v25, 170, sizeof(v25));
          uint64_t v10 = (const char *)*MEMORY[0x1E4F4C688];
          memset(__p, 0, sizeof(__p));
          ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)v22, v10);
          ctu::cf::map_adapter::getString();
          MEMORY[0x1C8791110](v22);
          if (SHIBYTE(__p[2]) < 0) {
            operator delete(__p[0]);
          }
          int v11 = SHIBYTE(v25[2]);
          if (SHIBYTE(v25[2]) >= 0) {
            size_t v12 = HIBYTE(v25[2]);
          }
          else {
            size_t v12 = (size_t)v25[1];
          }
          if (v12 == strlen((const char *)*MEMORY[0x1E4F4CAE8])
            && (SHIBYTE(v25[2]) >= 0 ? (uint64_t v13 = v25) : (uint64_t v13 = (void **)v25[0]),
                !memcmp(v13, (const void *)*MEMORY[0x1E4F4CAE8], v12)))
          {
            FSModule::handleBasebandBooted_sync((FSModule *)v5);
          }
          else if (v12 == strlen((const char *)*MEMORY[0x1E4F4CCD8]) {
                 && (v11 >= 0 ? (xpc_object_t v14 = v25) : (xpc_object_t v14 = (void **)v25[0]),
          }
                     !memcmp(v14, (const void *)*MEMORY[0x1E4F4CCD8], v12)))
          {
            memset(__p, 170, sizeof(__p));
            size_t v17 = (const char *)*MEMORY[0x1E4F4C690];
            v22[0] = 0;
            v22[1] = 0;
            uint64_t v23 = 0;
            ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v30, v17);
            ctu::cf::map_adapter::getString();
            MEMORY[0x1C8791110](&v30);
            if (SHIBYTE(v23) < 0) {
              operator delete(v22[0]);
            }
            int v18 = SHIBYTE(__p[2]);
            if (SHIBYTE(__p[2]) >= 0) {
              size_t v19 = HIBYTE(__p[2]);
            }
            else {
              size_t v19 = (size_t)__p[1];
            }
            if (v19 == strlen((const char *)*MEMORY[0x1E4F4C6E8])
              && (SHIBYTE(__p[2]) >= 0 ? (uint64_t v20 = __p) : (uint64_t v20 = (void **)__p[0]),
                  !memcmp(v20, (const void *)*MEMORY[0x1E4F4C6E8], v19)))
            {
              FSModule::handleBasebandReset_sync((FSModule *)v5);
            }
            else if (v19 == strlen((const char *)*MEMORY[0x1E4F4C6F0]))
            {
              uint64_t v21 = v18 >= 0 ? __p : (void **)__p[0];
              if (!memcmp(v21, (const void *)*MEMORY[0x1E4F4C6F0], v19))
              {
                *(unsigned char *)(v5 + 931) = 1;
                *(void *)(v5 + 1080) = TelephonyUtilGetSystemTime();
                *(_DWORD *)(v5 + 1072) = 5;
                *(unsigned char *)(v5 + 1088) = 1;
              }
            }
            if (SHIBYTE(__p[2]) < 0) {
              operator delete(__p[0]);
            }
          }
          else if (v12 == strlen((const char *)*MEMORY[0x1E4F4CBC8]) {
                 && (v11 >= 0 ? (uint64_t v15 = v25) : (uint64_t v15 = (void **)v25[0]),
          }
                     !memcmp(v15, (const void *)*MEMORY[0x1E4F4CBC8], v12))
                 || v12 == strlen((const char *)*MEMORY[0x1E4F4CEB8])
                 && (v11 >= 0 ? (uint64_t v16 = v25) : (uint64_t v16 = (void **)v25[0]),
                     !memcmp(v16, (const void *)*MEMORY[0x1E4F4CEB8], v12)))
          {
            FSModule::handleBasebandReset_sync((FSModule *)v5);
          }
          if (SHIBYTE(v25[2]) < 0) {
            operator delete(v25[0]);
          }
          MEMORY[0x1C8791160](v26);
          CFDictionaryRef v8 = v27;
        }
        if (v8) {
          CFRelease(v8);
        }
      }
      if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_1C5942818(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  MEMORY[0x1C8791160](&a28);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)(v28 - 80));
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v28 - 72);
  _Unwind_Resume(a1);
}

void sub_1C59428BC(_Unwind_Exception *a1)
{
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v1 - 72);
  _Unwind_Resume(a1);
}

void FSModule::handleBasebandBooted_sync(FSModule *this)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  if (*((unsigned char *)this + 928))
  {
    uint64_t v2 = *((void *)this + 11);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1C5767000, v2, OS_LOG_TYPE_DEFAULT, "#I skipping establishing transport", buf, 2u);
    }
    goto LABEL_15;
  }
  uint64_t v3 = MEMORY[0x1C878FC70]();
  if (!v3)
  {
    GetABMLogServer(v38);
    uint64_t v15 = *((void *)GetGlobalLogger(v38) + 4);
    std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)v38);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_fault_impl(&dword_1C5767000, v15, OS_LOG_TYPE_FAULT, "failed copying default destination", buf, 2u);
    }
    GetABMLogServer(v37);
    uint64_t v16 = *((void *)GetGlobalLogger(v37) + 4);
    std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)v37);
    if (!os_log_type_enabled(v16, OS_LOG_TYPE_FAULT)) {
      goto LABEL_37;
    }
    *(_DWORD *)long long buf = 136315906;
    *(void *)&uint8_t buf[4] = "ABM ASSERT";
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = "success";
    *(_WORD *)&unsigned char buf[22] = 2080;
    xpc_object_t v41 = "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices_Manager/AppleBasebandManager/BasebandManager/Serve"
          "r/RFS/FSModule.cpp";
    __int16 v42 = 1024;
    int v43 = 742;
    goto LABEL_36;
  }
  uint64_t v4 = (void *)v3;
  uint64_t v5 = BBUFSServerParametersInit();
  if ((v5 & 1) == 0)
  {
    GetABMLogServer(v36);
    size_t v17 = *((void *)GetGlobalLogger(v36) + 4);
    std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)v36);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_fault_impl(&dword_1C5767000, v17, OS_LOG_TYPE_FAULT, "failed preparing fs sync parameters", buf, 2u);
    }
    GetABMLogServer(v35);
    uint64_t v16 = *((void *)GetGlobalLogger(v35) + 4);
    std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)v35);
    if (!os_log_type_enabled(v16, OS_LOG_TYPE_FAULT)) {
      goto LABEL_37;
    }
    *(_DWORD *)long long buf = 136315906;
    *(void *)&uint8_t buf[4] = "ABM ASSERT";
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = "success";
    *(_WORD *)&unsigned char buf[22] = 2080;
    xpc_object_t v41 = "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices_Manager/AppleBasebandManager/BasebandManager/Serve"
          "r/RFS/FSModule.cpp";
    __int16 v42 = 1024;
    int v43 = 748;
    goto LABEL_36;
  }
  char v28 = -86;
  __int16 v27 = -21846;
  memset(v34, 170, sizeof(v34));
  shouldUseMinBasebandTransportIOReadSize = (capabilities::abs *)capabilities::abs::shouldUseMinBasebandTransportIOReadSize((capabilities::abs *)v5);
  if (shouldUseMinBasebandTransportIOReadSize) {
    int v7 = 0x4000;
  }
  else {
    int v7 = 0x8000;
  }
  capabilities::abs::shouldUseMinBasebandTransportIOReadCount(shouldUseMinBasebandTransportIOReadSize);
  uint64_t v8 = *((void *)this + 132);
  int v25 = 3;
  char v26 = 1;
  uint64_t v29 = 10;
  int v30 = v7;
  int v31 = 4;
  uint64_t v32 = 0;
  char v33 = 0;
  aBlocuint64_t k = 0;
  char v9 = (*(uint64_t (**)(uint64_t, int *, void **))(*(void *)v8 + 48))(v8, &v25, &aBlock);
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v9)
  {
    uint64_t v10 = BasebandTransport::operator*(*((void *)this + 132));
    long long v11 = *(_OWORD *)(v10 + 16);
    *(_OWORD *)((char *)this + 568) = *(_OWORD *)v10;
    *(_OWORD *)((char *)this + 584) = v11;
    long long v13 = *(_OWORD *)(v10 + 48);
    long long v12 = *(_OWORD *)(v10 + 64);
    uint64_t v14 = *(void *)(v10 + 80);
    *(_OWORD *)((char *)this + 600) = *(_OWORD *)(v10 + 32);
    *((void *)this + 81) = v14;
    *(_OWORD *)((char *)this + 632) = v12;
    *(_OWORD *)((char *)this + 616) = v13;
    memcpy(__dst, (char *)this + 560, sizeof(__dst));
    if (BBUFSServerCreate())
    {
      if (BBUFSServerStart())
      {
        FSModule::repeatFlushOperation_sync(this);
        *((unsigned char *)this + 928) = 1;
        free(v4);
LABEL_15:
        FSModule::restartSyncTimer_sync(this);
        return;
      }
      GetABMLogServer(v21);
      size_t v19 = *((void *)GetGlobalLogger(v21) + 4);
      std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)v21);
      if (os_log_type_enabled(v19, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_fault_impl(&dword_1C5767000, v19, OS_LOG_TYPE_FAULT, "failed starting file server", buf, 2u);
      }
      GetABMLogServer(v20);
      uint64_t v16 = *((void *)GetGlobalLogger(v20) + 4);
      std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)v20);
      if (!os_log_type_enabled(v16, OS_LOG_TYPE_FAULT))
      {
LABEL_37:
        __break(1u);
        return;
      }
      *(_DWORD *)long long buf = 136315906;
      *(void *)&uint8_t buf[4] = "ABM ASSERT";
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&buf[14] = "success";
      *(_WORD *)&unsigned char buf[22] = 2080;
      xpc_object_t v41 = "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices_Manager/AppleBasebandManager/BasebandManager/Ser"
            "ver/RFS/FSModule.cpp";
      __int16 v42 = 1024;
      int v43 = 777;
    }
    else
    {
      GetABMLogServer(v23);
      int v18 = *((void *)GetGlobalLogger(v23) + 4);
      std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)v23);
      if (os_log_type_enabled(v18, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_fault_impl(&dword_1C5767000, v18, OS_LOG_TYPE_FAULT, "failed creating file server", buf, 2u);
      }
      GetABMLogServer(v22);
      uint64_t v16 = *((void *)GetGlobalLogger(v22) + 4);
      std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)v22);
      if (!os_log_type_enabled(v16, OS_LOG_TYPE_FAULT)) {
        goto LABEL_37;
      }
      *(_DWORD *)long long buf = 136315906;
      *(void *)&uint8_t buf[4] = "ABM ASSERT";
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&buf[14] = "success";
      *(_WORD *)&unsigned char buf[22] = 2080;
      xpc_object_t v41 = "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices_Manager/AppleBasebandManager/BasebandManager/Ser"
            "ver/RFS/FSModule.cpp";
      __int16 v42 = 1024;
      int v43 = 771;
    }
LABEL_36:
    _os_log_fault_impl(&dword_1C5767000, v16, OS_LOG_TYPE_FAULT, "%s (%s): File: %s Line: %d", buf, 0x26u);
    goto LABEL_37;
  }
  BasebandTransport::close(*((BasebandTransport **)this + 132));
  *(void *)long long buf = operator new(0x38uLL);
  *(_OWORD *)&uint8_t buf[8] = xmmword_1C59A6810;
  strcpy(*(char **)buf, "failed establishing transport for filesystem sync");
  FSModule::resetBaseband_sync(this, (uint64_t)buf);
  if ((buf[23] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  free(v4);
}

void sub_1C5942ED8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1C5942EEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1C5942F00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1C5942F14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

void sub_1C5942F28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1C5942F3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1C5942F50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1C5942F64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
}

void sub_1C5942F78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *aBlock)
{
  if (*(char *)(v17 - 73) < 0)
  {
    operator delete(*(void **)(v17 - 96));
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void FSModule::handleBasebandReset_sync(FSModule *this)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *((void *)this + 117);
  if (v2)
  {
    dispatch_source_cancel(v2);
    dispatch_release(*((dispatch_object_t *)this + 117));
    *((void *)this + 117) = 0;
  }
  if (*((unsigned char *)this + 928))
  {
    *((unsigned char *)this + 928) = 0;
    *((unsigned char *)this + 931) = 0;
    FSModule::handleResult_sync(this, 0);
    BBUFSServerStop();
    uint64_t v3 = *((void *)this + 11);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      v8[0] = 67109120;
      v8[1] = 12;
      _os_log_impl(&dword_1C5767000, v3, OS_LOG_TYPE_DEFAULT, "#I Waiting for BBUFSServerFlush to unblock for %d seconds", (uint8_t *)v8, 8u);
    }
    uint64_t v4 = *((void *)this + 120);
    dispatch_time_t v5 = dispatch_time(0, 12000000000);
    intptr_t v6 = dispatch_group_wait(v4, v5);
    int v7 = *((void *)this + 11);
    if (v6)
    {
      if (os_log_type_enabled(*((os_log_t *)this + 11), OS_LOG_TYPE_ERROR))
      {
        LOWORD(v8[0]) = 0;
        _os_log_error_impl(&dword_1C5767000, v7, OS_LOG_TYPE_ERROR, "Timeout waiting for BBUFSServerFlush to unblock", (uint8_t *)v8, 2u);
      }
    }
    else if (os_log_type_enabled(*((os_log_t *)this + 11), OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v8[0]) = 0;
      _os_log_impl(&dword_1C5767000, v7, OS_LOG_TYPE_DEFAULT, "#I BBUFSServerFlush unblocked", (uint8_t *)v8, 2u);
    }
    BBUFSServerRelease();
    BasebandTransport::close(*((BasebandTransport **)this + 132));
  }
}

void ___ZN8FSModule25finishInitialization_syncEv_block_invoke_60(void *a1, abm::client::Event **a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    uint64_t v5 = a1[4];
    intptr_t v6 = std::__shared_weak_count::lock(v3);
    uint64_t v15 = v6;
    if (v6)
    {
      int v7 = v6;
      if (a1[5])
      {
        uint64_t v8 = *a2;
        if (*a2)
        {
          CFTypeRef cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
          abm::client::Event::getData((uint64_t *)&cf, v8);
          CFTypeRef v9 = cf;
          if (cf) {
            uint64_t v10 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
          }
          else {
            uint64_t v10 = 0;
          }
          if (v10)
          {
            v12[0] = 0xAAAAAAAAAAAAAAAALL;
            v12[1] = 0xAAAAAAAAAAAAAAAALL;
            ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v12, (const __CFDictionary *)cf);
            ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v16, (const char *)*MEMORY[0x1E4F4CB50]);
            int Int = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v12, v16);
            MEMORY[0x1C8791110](&v16);
            if (Int == 5)
            {
              *(void *)(v5 + 1080) = TelephonyUtilGetSystemTime();
              *(_DWORD *)(v5 + 1072) = 3;
              *(unsigned char *)(v5 + 1088) = 1;
            }
            MEMORY[0x1C8791160](v12);
            CFTypeRef v9 = cf;
          }
          if (v9) {
            CFRelease(v9);
          }
        }
      }
      if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void ___ZN8FSModule25finishInitialization_syncEv_block_invoke_64(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1)
  {
    uint64_t v2 = std::__shared_weak_count::lock(v1);
    if (v2)
    {
      uint64_t v3 = v2;
      if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
  }
}

uint64_t __copy_helper_block_e8_32c32_ZTSNSt3__18weak_ptrI8FSModuleEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c32_ZTSNSt3__18weak_ptrI8FSModuleEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void FSModule::sleep(void *a1, dispatch_object_t *a2)
{
  uint64_t v3 = *a2;
  if (*a2)
  {
    dispatch_retain(*a2);
    dispatch_group_enter(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[16];
  if (!v4 || (uint64_t v5 = a1[15], (v6 = std::__shared_weak_count::lock(v4)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  int v7 = v6;
  uint64_t v8 = operator new(0x10uLL);
  *uint64_t v8 = a1;
  v8[1] = v3;
  CFTypeRef v9 = a1[17];
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v10 = operator new(0x18uLL);
  void *v10 = v8;
  v10[1] = v5;
  _DWORD v10[2] = v7;
  dispatch_async_f(v9, v10, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<FSModule>::execute_wrapped<FSModule::sleep(dispatch::group_session)::$_0>(FSModule::sleep(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<FSModule::sleep(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<FSModule::sleep(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke);
  if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void FSModule::wake(void *a1, dispatch_object_t *a2)
{
  uint64_t v3 = *a2;
  if (*a2)
  {
    dispatch_retain(*a2);
    dispatch_group_enter(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[16];
  if (!v4 || (uint64_t v5 = a1[15], (v6 = std::__shared_weak_count::lock(v4)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  int v7 = v6;
  uint64_t v8 = operator new(0x10uLL);
  *uint64_t v8 = a1;
  v8[1] = v3;
  CFTypeRef v9 = a1[17];
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v10 = operator new(0x18uLL);
  void *v10 = v8;
  v10[1] = v5;
  _DWORD v10[2] = v7;
  dispatch_async_f(v9, v10, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<FSModule>::execute_wrapped<FSModule::wake(dispatch::group_session)::$_0>(FSModule::wake(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<FSModule::wake(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<FSModule::wake(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke);
  if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void FSModule::handleResult_sync(FSModule *this, BOOL a2)
{
  BOOL v2 = a2;
  if (a2) {
    *((unsigned char *)this + 931) = 0;
  }
  uint64_t v4 = (void *)*((void *)this + 128);
  if (v4)
  {
    uint64_t v5 = *((void *)this + 11);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v14[0]) = 0;
      _os_log_impl(&dword_1C5767000, v5, OS_LOG_TYPE_DEFAULT, "#I Clear watchdog timer", (uint8_t *)v14, 2u);
      uint64_t v4 = (void *)*((void *)this + 128);
      *((void *)this + 128) = 0;
      if (!v4) {
        goto LABEL_9;
      }
    }
    else
    {
      *((void *)this + 128) = 0;
    }
    TelephonyBasebandWatchdogStop();
    operator delete(v4);
  }
LABEL_9:
  intptr_t v6 = (const void *)*((void *)this + 124);
  if (v6 && *((void *)this + 125))
  {
    int v7 = _Block_copy(v6);
    uint64_t v8 = v7;
    CFTypeRef v9 = *((void *)this + 125);
    v14[0] = MEMORY[0x1E4F143A8];
    v14[1] = 1174405120;
    v14[2] = ___ZNK8dispatch8callbackIU13block_pointerFvbEEclIJbEEEvDpT__block_invoke_2;
    v14[3] = &__block_descriptor_tmp_140_0;
    if (v7) {
      uint64_t v10 = _Block_copy(v7);
    }
    else {
      uint64_t v10 = 0;
    }
    aBlocuint64_t k = v10;
    BOOL v16 = v2;
    dispatch_async(v9, v14);
    if (aBlock) {
      _Block_release(aBlock);
    }
    if (v8) {
      _Block_release(v8);
    }
    long long v11 = (const void *)*((void *)this + 124);
    *((void *)this + 124) = 0;
    if (v11) {
      _Block_release(v11);
    }
    long long v12 = *((void *)this + 125);
    *((void *)this + 125) = 0;
    if (v12) {
      dispatch_release(v12);
    }
  }
  FSModule::submitMetric_sync(this, v2);
  long long v13 = *((void *)this + 127);
  if (v13)
  {
    *((void *)this + 127) = 0;
    dispatch_resume(v13);
    dispatch_release(v13);
  }
}

void FSModule::submitMetric_sync(FSModule *this, BOOL a2)
{
  int v2 = *((_DWORD *)this + 268);
  if (!v2) {
    return;
  }
  BOOL v5 = (v2 != 5 || *((unsigned char *)this + 931) == 0) && a2;
  xpc_object_t v6 = xpc_dictionary_create(0, 0, 0);
  uint64_t v7 = MEMORY[0x1E4F14590];
  if (v6 || (xpc_object_t v6 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C8792D30](v6) == v7)
    {
      xpc_retain(v6);
      xpc_object_t v8 = v6;
    }
    else
    {
      xpc_object_t v8 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v8 = xpc_null_create();
    xpc_object_t v6 = 0;
  }
  xpc_release(v6);
  xpc_object_t v9 = xpc_int64_create(*((unsigned int *)this + 268));
  if (!v9) {
    xpc_object_t v9 = xpc_null_create();
  }
  xpc_dictionary_set_value(v8, (const char *)*MEMORY[0x1E4F4C530], v9);
  xpc_object_t v10 = xpc_null_create();
  xpc_release(v9);
  xpc_release(v10);
  uint64_t SystemTime = TelephonyUtilGetSystemTime();
  xpc_object_t v12 = xpc_uint64_create(SystemTime - *((void *)this + 135));
  if (!v12) {
    xpc_object_t v12 = xpc_null_create();
  }
  xpc_dictionary_set_value(v8, (const char *)*MEMORY[0x1E4F4C788], v12);
  xpc_object_t v13 = xpc_null_create();
  xpc_release(v12);
  xpc_release(v13);
  xpc_object_t v14 = xpc_BOOL_create(v5);
  if (!v14) {
    xpc_object_t v14 = xpc_null_create();
  }
  xpc_dictionary_set_value(v8, (const char *)*MEMORY[0x1E4F4C658], v14);
  xpc_object_t v15 = xpc_null_create();
  xpc_release(v14);
  xpc_release(v15);
  xpc_object_t v16 = xpc_BOOL_create(*((unsigned char *)this + 1088) == 0);
  if (!v16) {
    xpc_object_t v16 = xpc_null_create();
  }
  xpc_dictionary_set_value(v8, (const char *)*MEMORY[0x1E4F4CD30], v16);
  xpc_object_t v17 = xpc_null_create();
  xpc_release(v16);
  xpc_release(v17);
  xpc_object_t v18 = xpc_dictionary_create(0, 0, 0);
  if (v18 || (xpc_object_t v18 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C8792D30](v18) == v7)
    {
      xpc_retain(v18);
      xpc_object_t v19 = v18;
    }
    else
    {
      xpc_object_t v19 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v19 = xpc_null_create();
    xpc_object_t v18 = 0;
  }
  xpc_release(v18);
  xpc_object_t v20 = xpc_string_create((const char *)*MEMORY[0x1E4F4C4C0]);
  if (!v20) {
    xpc_object_t v20 = xpc_null_create();
  }
  xpc_dictionary_set_value(v19, (const char *)*MEMORY[0x1E4F4C540], v20);
  xpc_object_t v21 = xpc_null_create();
  xpc_release(v20);
  xpc_release(v21);
  xpc_object_t v22 = xpc_string_create((const char *)*MEMORY[0x1E4F4C480]);
  if (!v22) {
    xpc_object_t v22 = xpc_null_create();
  }
  xpc_dictionary_set_value(v19, (const char *)*MEMORY[0x1E4F4C3C8], v22);
  xpc_object_t v23 = xpc_null_create();
  xpc_release(v22);
  xpc_release(v23);
  xpc_object_t v24 = xpc_string_create((const char *)*MEMORY[0x1E4F4C660]);
  if (!v24) {
    xpc_object_t v24 = xpc_null_create();
  }
  xpc_dictionary_set_value(v19, (const char *)*MEMORY[0x1E4F4C548], v24);
  xpc_object_t v25 = xpc_null_create();
  xpc_release(v24);
  xpc_release(v25);
  if (v8)
  {
    xpc_retain(v8);
    xpc_object_t v26 = v8;
  }
  else
  {
    xpc_object_t v26 = xpc_null_create();
  }
  xpc_dictionary_set_value(v19, (const char *)*MEMORY[0x1E4F4CB40], v26);
  xpc_object_t v27 = xpc_null_create();
  xpc_release(v26);
  xpc_release(v27);
  xpc_object_t v28 = xpc_dictionary_create(0, 0, 0);
  if (v28 || (xpc_object_t v28 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C8792D30](v28) == v7)
    {
      xpc_retain(v28);
      xpc_object_t v29 = v28;
    }
    else
    {
      xpc_object_t v29 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v29 = xpc_null_create();
    xpc_object_t v28 = 0;
  }
  xpc_release(v28);
  xpc_object_t v30 = xpc_string_create((const char *)*MEMORY[0x1E4F4C158]);
  if (!v30) {
    xpc_object_t v30 = xpc_null_create();
  }
  xpc_dictionary_set_value(v29, (const char *)*MEMORY[0x1E4F4C190], v30);
  xpc_object_t v31 = xpc_null_create();
  xpc_release(v30);
  xpc_release(v31);
  if (v19)
  {
    xpc_retain(v19);
    xpc_object_t v32 = v19;
  }
  else
  {
    xpc_object_t v32 = xpc_null_create();
  }
  xpc_dictionary_set_value(v29, (const char *)*MEMORY[0x1E4F4C188], v32);
  xpc_object_t v33 = xpc_null_create();
  xpc_release(v32);
  xpc_release(v33);
  size_t v34 = (const void *)*MEMORY[0x1E4F4C738];
  size_t v35 = strlen((const char *)*MEMORY[0x1E4F4C738]);
  if (v35 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v36 = (void *)v35;
  if (v35 >= 0x17)
  {
    uint64_t v38 = (v35 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v35 | 7) != 0x17) {
      uint64_t v38 = v35 | 7;
    }
    uint64_t v39 = v38 + 1;
    uint64_t v37 = (void **)operator new(v38 + 1);
    __dst[1] = v36;
    unint64_t v43 = v39 | 0x8000000000000000;
    __dst[0] = v37;
LABEL_56:
    memmove(v37, v34, (size_t)v36);
    *((unsigned char *)v36 + (void)v37) = 0;
    xpc_object_t object = v29;
    if (v29) {
      goto LABEL_52;
    }
LABEL_57:
    xpc_object_t object = xpc_null_create();
    goto LABEL_58;
  }
  HIBYTE(v43) = v35;
  uint64_t v37 = __dst;
  if (v35) {
    goto LABEL_56;
  }
  LOBYTE(__dst[0]) = 0;
  xpc_object_t object = v29;
  if (!v29) {
    goto LABEL_57;
  }
LABEL_52:
  xpc_retain(v29);
LABEL_58:
  xpc_object_t v40 = 0;
  Service::runCommand((uint64_t)this, (uint64_t)__dst, &object, &v40);
  xpc_release(object);
  xpc_object_t object = 0;
  if (SHIBYTE(v43) < 0) {
    operator delete(__dst[0]);
  }
  *((_DWORD *)this + 268) = 0;
  xpc_release(v29);
  xpc_release(v19);
  xpc_release(v8);
}

void sub_1C5943D70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, xpc_object_t object, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  xpc_release(object);
  if (a17 < 0) {
    operator delete(__p);
  }
  xpc_release(v19);
  xpc_release(v18);
  xpc_release(v17);
  _Unwind_Resume(a1);
}

void ___ZN8FSModule23requestFSSyncIndicationEb_block_invoke(uint64_t a1, char a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if ((a2 & 1) == 0)
  {
    uint64_t v3 = *(NSObject **)(v2 + 88);
    if (!os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
      return;
    }
    *(_WORD *)long long buf = 0;
    xpc_object_t v6 = "FS Sync failed, skipping baseband requested soft reset";
    goto LABEL_13;
  }
  uint64_t v3 = *(NSObject **)(v2 + 88);
  if (!*(void *)(v2 + 944))
  {
    if (!os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
      return;
    }
    *(_WORD *)long long buf = 0;
    xpc_object_t v6 = "Invalid AppleBasebandManager pointer, unable to fulfill baseband's soft reset request";
LABEL_13:
    _os_log_error_impl(&dword_1C5767000, v3, OS_LOG_TYPE_ERROR, v6, buf, 2u);
    return;
  }
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_1C5767000, v3, OS_LOG_TYPE_DEFAULT, "#I Performing soft reset due to request from baseband", buf, 2u);
  }
  xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
  if (v4 || (xpc_object_t v4 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C8792D30](v4) == MEMORY[0x1E4F14590])
    {
      xpc_retain(v4);
      xpc_object_t v5 = v4;
    }
    else
    {
      xpc_object_t v5 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v5 = xpc_null_create();
    xpc_object_t v4 = 0;
  }
  xpc_release(v4);
  xpc_object_t v7 = xpc_string_create((const char *)*MEMORY[0x1E4F4C6F0]);
  if (!v7) {
    xpc_object_t v7 = xpc_null_create();
  }
  xpc_dictionary_set_value(v5, (const char *)*MEMORY[0x1E4F4C690], v7);
  xpc_object_t v8 = xpc_null_create();
  xpc_release(v7);
  xpc_release(v8);
  xpc_object_t v9 = xpc_string_create((const char *)*MEMORY[0x1E4F4D198]);
  if (!v9) {
    xpc_object_t v9 = xpc_null_create();
  }
  xpc_dictionary_set_value(v5, (const char *)*MEMORY[0x1E4F4CA38], v9);
  xpc_object_t v10 = xpc_null_create();
  xpc_release(v9);
  xpc_release(v10);
  long long v11 = (char *)operator new(0x30uLL);
  strcpy(v11, "Baseband requested rfs sync via indication");
  xpc_object_t v12 = xpc_string_create(v11);
  if (!v12) {
    xpc_object_t v12 = xpc_null_create();
  }
  xpc_dictionary_set_value(v5, (const char *)*MEMORY[0x1E4F4C8F0], v12);
  xpc_object_t v13 = xpc_null_create();
  xpc_release(v12);
  xpc_release(v13);
  unint64_t v26 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v27 = 0xAAAAAAAAAAAAAAAALL;
  xpc_object_t v14 = (const void *)*MEMORY[0x1E4F4C638];
  size_t v15 = strlen((const char *)*MEMORY[0x1E4F4C638]);
  if (v15 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v16 = v15;
  if (v15 >= 0x17)
  {
    uint64_t v18 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v15 | 7) != 0x17) {
      uint64_t v18 = v15 | 7;
    }
    uint64_t v19 = v18 + 1;
    xpc_object_t v17 = operator new(v18 + 1);
    size_t v24 = v16;
    unint64_t v25 = v19 | 0x8000000000000000;
    *(void *)long long buf = v17;
LABEL_30:
    memmove(v17, v14, v16);
    *((unsigned char *)v17 + v16) = 0;
    xpc_object_t v22 = v5;
    if (v5) {
      goto LABEL_26;
    }
LABEL_31:
    xpc_object_t v22 = xpc_null_create();
    goto LABEL_32;
  }
  HIBYTE(v25) = v15;
  xpc_object_t v17 = buf;
  if (v15) {
    goto LABEL_30;
  }
  buf[0] = 0;
  xpc_object_t v22 = v5;
  if (!v5) {
    goto LABEL_31;
  }
LABEL_26:
  xpc_retain(v5);
LABEL_32:
  abm::client::Command::create();
  xpc_release(v22);
  if (SHIBYTE(v25) < 0) {
    operator delete(*(void **)buf);
  }
  xpc_object_t v21 = (std::__shared_weak_count *)v27;
  if (v27) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v27 + 8), 1uLL, memory_order_relaxed);
  }
  AppleBasebandManager::perform();
  if (v21 && !atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v21);
  }
  xpc_object_t v20 = (std::__shared_weak_count *)v27;
  if (v27)
  {
    if (!atomic_fetch_add((atomic_ullong *volatile)(v27 + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  operator delete(v11);
  xpc_release(v5);
}

void sub_1C5944304(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, xpc_object_t object, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,char a22)
{
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a22);
  operator delete(v23);
  xpc_release(v22);
  _Unwind_Resume(a1);
}

void ___ZN8FSModule13requestFSSyncEjN8dispatch8callbackIU13block_pointerFvbEEE_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    xpc_object_t v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      xpc_object_t v5 = v4;
      if (*(void *)(a1 + 40))
      {
        if (*(unsigned char *)(v3 + 928))
        {
          xpc_object_t v6 = *(NSObject **)(v3 + 1008);
          if (v6)
          {
            dispatch_retain(*(dispatch_object_t *)(v3 + 1008));
            dispatch_suspend(v6);
          }
          xpc_object_t v7 = *(NSObject **)(v3 + 1016);
          *(void *)(v3 + 1016) = v6;
          if (v7)
          {
            dispatch_resume(v7);
            dispatch_release(v7);
          }
          v15[0] = MEMORY[0x1E4F143A8];
          v15[1] = 1174405120;
          void v15[2] = ___ZN8FSModule13requestFSSyncEjN8dispatch8callbackIU13block_pointerFvbEEE_block_invoke_2;
          v15[3] = &__block_descriptor_tmp_70_1;
          xpc_object_t v15[4] = v3;
          xpc_object_t v8 = *(void **)(a1 + 56);
          if (v8) {
            xpc_object_t v8 = _Block_copy(v8);
          }
          xpc_object_t v9 = *(NSObject **)(a1 + 64);
          aBlocuint64_t k = v8;
          dispatch_object_t object = v9;
          if (v9) {
            dispatch_retain(v9);
          }
          int v18 = *(_DWORD *)(a1 + 72);
          ctu::SharedSynchronizable<FSModule>::execute_wrapped((uint64_t *)(v3 + 120), (uint64_t)v15);
          if (object) {
            dispatch_release(object);
          }
          if (aBlock) {
            _Block_release(aBlock);
          }
        }
        else
        {
          xpc_object_t v10 = *(const void **)(a1 + 56);
          if (v10 && *(void *)(a1 + 64))
          {
            long long v11 = _Block_copy(v10);
            xpc_object_t v12 = v11;
            xpc_object_t v13 = *(NSObject **)(a1 + 64);
            block[0] = MEMORY[0x1E4F143A8];
            block[1] = 1174405120;
            block[2] = ___ZNK8dispatch8callbackIU13block_pointerFvbEEclIJbEEEvDpT__block_invoke_2;
            block[3] = &__block_descriptor_tmp_140_0;
            if (v11) {
              xpc_object_t v14 = _Block_copy(v11);
            }
            else {
              xpc_object_t v14 = 0;
            }
            xpc_object_t v20 = v14;
            char v21 = 0;
            dispatch_async(v13, block);
            if (v20) {
              _Block_release(v20);
            }
            if (v12) {
              _Block_release(v12);
            }
          }
        }
      }
      if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void ___ZN8FSModule13requestFSSyncEjN8dispatch8callbackIU13block_pointerFvbEEE_block_invoke_2(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v2 = *(void **)(a1 + 40);
  if (v2) {
    uint64_t v2 = _Block_copy(v2);
  }
  xpc_object_t v4 = *(const void **)(v3 + 992);
  *(void *)(v3 + 992) = v2;
  if (v4) {
    _Block_release(v4);
  }
  uint64_t v5 = *(void *)(a1 + 48);
  if (v5) {
    dispatch_retain(*(dispatch_object_t *)(a1 + 48));
  }
  xpc_object_t v6 = *(NSObject **)(v3 + 1000);
  *(void *)(v3 + 1000) = v5;
  if (v6) {
    dispatch_release(v6);
  }
  *(_DWORD *)(v3 + 1072) = *(_DWORD *)(a1 + 56);
  *(void *)(v3 + 1080) = TelephonyUtilGetSystemTime();

  FSModule::requestFSSync_sync((const std::string::value_type **)v3);
}

void FSModule::requestFSSync_sync(const std::string::value_type **this)
{
  unint64_t v18 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v19 = 0xAAAAAAAAAAAAAAAALL;
  (*((void (**)(unint64_t *__return_ptr))*this + 10))(&v18);
  unint64_t v2 = v18;
  if (!v18) {
    goto LABEL_22;
  }
  dispatch_object_t object = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
  if (*((char *)this + 991) < 0) {
    std::string::__init_copy_ctor_external(&v16, this[121], (std::string::size_type)this[122]);
  }
  else {
    std::string v16 = *(std::string *)(this + 121);
  }
  uint64_t v3 = *(void *)(v2 + 104);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__p, v16.__r_.__value_.__l.__data_, v16.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = v16;
  }
  (*(void (**)(dispatch_object_t *__return_ptr, uint64_t, std::string *, void))(*(void *)v3 + 24))(&object, v3, &__p, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v16.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_10:
      xpc_object_t v4 = (std::__shared_weak_count *)this[16];
      if (!v4) {
LABEL_26:
      }
        std::__throw_bad_weak_ptr[abi:ne180100]();
      goto LABEL_14;
    }
  }
  else if ((SHIBYTE(v16.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_10;
  }
  operator delete(v16.__r_.__value_.__l.__data_);
  xpc_object_t v4 = (std::__shared_weak_count *)this[16];
  if (!v4) {
    goto LABEL_26;
  }
LABEL_14:
  std::string::size_type v5 = (std::string::size_type)this[15];
  xpc_object_t v6 = std::__shared_weak_count::lock(v4);
  if (!v6) {
    goto LABEL_26;
  }
  xpc_object_t v7 = v6;
  p_shared_weak_owners = &v6->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v7);
  }
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)this;
  __p.__r_.__value_.__l.__size_ = v5;
  __p.__r_.__value_.__r.__words[2] = (std::string::size_type)v7;
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  dispatch_object_t v9 = object;
  dispatch_object_t v15 = object;
  if (object)
  {
    dispatch_retain(object);
    xpc_object_t v10 = object;
  }
  else
  {
    xpc_object_t v10 = 0;
  }
  long long v11 = this[17];
  xpc_object_t v12 = operator new(0x20uLL);
  *xpc_object_t v12 = this;
  v12[1] = v5;
  void v12[2] = v7;
  v12[3] = v9;
  dispatch_group_notify_f(v10, v11, v12, (dispatch_function_t)dispatch::detail::group_notify<FSModule::requestFSSync_sync(void)::$_0>(dispatch_group_s *,dispatch_queue_s *,FSModule::requestFSSync_sync(void)::$_0 &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke);
  std::__shared_weak_count::__release_weak(v7);
  if (object) {
    dispatch_release(object);
  }
LABEL_22:
  xpc_object_t v13 = (std::__shared_weak_count *)v19;
  if (v19)
  {
    if (!atomic_fetch_add((atomic_ullong *volatile)(v19 + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

void sub_1C5944914(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,dispatch_object_t object,char a23)
{
  if (a21 < 0)
  {
    operator delete(__p);
    std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a23);
    _Unwind_Resume(a1);
  }
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a23);
  _Unwind_Resume(a1);
}

void __copy_helper_block_e8_40c46_ZTSN8dispatch8callbackIU13block_pointerFvbEEE(uint64_t a1, uint64_t a2)
{
  xpc_object_t v4 = *(void **)(a2 + 40);
  if (v4) {
    xpc_object_t v4 = _Block_copy(v4);
  }
  std::string::size_type v5 = *(NSObject **)(a2 + 48);
  *(void *)(a1 + 40) = v4;
  *(void *)(a1 + 48) = v5;
  if (v5)
  {
    dispatch_retain(v5);
  }
}

void __destroy_helper_block_e8_40c46_ZTSN8dispatch8callbackIU13block_pointerFvbEEE(uint64_t a1)
{
  unint64_t v2 = *(NSObject **)(a1 + 48);
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = *(const void **)(a1 + 40);
  if (v3) {
    _Block_release(v3);
  }
}

void __copy_helper_block_e8_40c32_ZTSNSt3__18weak_ptrI8FSModuleEE56c46_ZTSN8dispatch8callbackIU13block_pointerFvbEEE(void *a1, void *a2)
{
  uint64_t v4 = a2[6];
  a1[5] = a2[5];
  a1[6] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 16), 1uLL, memory_order_relaxed);
  }
  std::string::size_type v5 = (void *)a2[7];
  if (v5) {
    std::string::size_type v5 = _Block_copy(v5);
  }
  xpc_object_t v6 = a2[8];
  a1[7] = v5;
  a1[8] = v6;
  if (v6)
  {
    dispatch_retain(v6);
  }
}

void __destroy_helper_block_e8_40c32_ZTSNSt3__18weak_ptrI8FSModuleEE56c46_ZTSN8dispatch8callbackIU13block_pointerFvbEEE(void *a1)
{
  unint64_t v2 = a1[8];
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = (const void *)a1[7];
  if (v3) {
    _Block_release(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    std::__shared_weak_count::__release_weak(v4);
  }
}

uint64_t FSModule::requestFSSync_sync(void)::$_0::~$_0(uint64_t a1)
{
  unint64_t v2 = *(NSObject **)(a1 + 24);
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

void FSModule::restartSyncTimer_sync(FSModule *this)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  unint64_t v2 = *((void *)this + 117);
  if (v2)
  {
    dispatch_source_cancel(v2);
    dispatch_release(*((dispatch_object_t *)this + 117));
    *((void *)this + 117) = 0;
  }
  uint64_t v3 = capabilities::abs::fileSystemFlushInterval((capabilities::abs *)v2);
  uint64_t v4 = *((void *)this + 11);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 134217984;
    uint64_t v17 = v3;
    _os_log_impl(&dword_1C5767000, v4, OS_LOG_TYPE_DEFAULT, "#I Automatic sync interval set to %llu seconds", buf, 0xCu);
  }
  if (v3)
  {
    std::string::size_type v5 = dispatch_source_create(MEMORY[0x1E4F14490], 2uLL, 0, *((dispatch_queue_t *)this + 17));
    *((void *)this + 117) = v5;
    dispatch_time_t v6 = dispatch_time(0x8000000000000000, 1000000000 * v3);
    dispatch_source_set_timer(v5, v6, 1000000000 * v3, 0x45D964B800uLL);
    xpc_object_t v7 = (std::__shared_weak_count *)*((void *)this + 16);
    if (!v7 || (uint64_t v8 = *((void *)this + 15), (v9 = std::__shared_weak_count::lock(v7)) == 0)) {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    xpc_object_t v10 = v9;
    p_shared_weak_owners = &v9->__shared_weak_owners_;
    atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v10);
    }
    xpc_object_t v12 = *((void *)this + 117);
    v13[0] = MEMORY[0x1E4F143A8];
    v13[1] = 1174405120;
    uint64_t v13[2] = ___ZN8FSModule21restartSyncTimer_syncEv_block_invoke;
    v13[3] = &__block_descriptor_tmp_74_2;
    v13[4] = this;
    void v13[5] = v8;
    xpc_object_t v14 = v10;
    atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
    uint64_t v15 = v3;
    dispatch_source_set_event_handler(v12, v13);
    dispatch_activate(*((dispatch_object_t *)this + 117));
    if (v14) {
      std::__shared_weak_count::__release_weak(v14);
    }
    std::__shared_weak_count::__release_weak(v10);
  }
}

void FSModule::cancelSyncTimer_sync(FSModule *this)
{
  unint64_t v2 = *((void *)this + 117);
  if (v2)
  {
    dispatch_source_cancel(v2);
    dispatch_release(*((dispatch_object_t *)this + 117));
    *((void *)this + 117) = 0;
  }
}

void ___ZN8FSModule21restartSyncTimer_syncEv_block_invoke(void *a1)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  unint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    uint64_t v3 = a1[4];
    uint64_t v4 = std::__shared_weak_count::lock(v2);
    xpc_object_t v10 = v4;
    if (v4)
    {
      std::string::size_type v5 = v4;
      if (a1[5])
      {
        dispatch_time_t v6 = *(NSObject **)(v3 + 88);
        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v7 = a1[7];
          *(_DWORD *)long long buf = 134217984;
          uint64_t v12 = v7;
          _os_log_impl(&dword_1C5767000, v6, OS_LOG_TYPE_DEFAULT, "#I Periodic rfs sync request timer fired. Interval = %llu sec", buf, 0xCu);
        }
        v8[0] = 0;
        v8[1] = 0;
        FSModule::requestFSSync(v3, 4, v8);
      }
      if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void sub_1C5944EB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

void FSModule::repeatFlushOperation_sync(FSModule *this)
{
  unint64_t v2 = *((void *)this + 120);
  if (v2)
  {
    dispatch_retain(*((dispatch_object_t *)this + 120));
    dispatch_group_enter(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 16);
  if (!v3 || (v4 = *((void *)this + 15), (std::string::size_type v5 = std::__shared_weak_count::lock(v3)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  dispatch_time_t v6 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v6);
  }
  global_queue = dispatch_get_global_queue(25, 0);
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 1174405120;
  void v8[2] = ___ZN8FSModule25repeatFlushOperation_syncEv_block_invoke;
  v8[3] = &__block_descriptor_tmp_83_1;
  v8[4] = this;
  dispatch_group_t group = v2;
  if (v2)
  {
    dispatch_retain(v2);
    dispatch_group_enter(group);
  }
  uint64_t v10 = v4;
  long long v11 = v6;
  atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  dispatch_async(global_queue, v8);
  if (v11) {
    std::__shared_weak_count::__release_weak(v11);
  }
  if (group)
  {
    dispatch_group_leave(group);
    if (group) {
      dispatch_release(group);
    }
  }
  std::__shared_weak_count::__release_weak(v6);
  if (v2)
  {
    dispatch_group_leave(v2);
    dispatch_release(v2);
  }
}

void sub_1C5945058(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    dispatch_group_leave(v1);
    dispatch_release(v1);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN8FSModule25repeatFlushOperation_syncEv_block_invoke(void *a1)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  unint64_t v2 = (std::__shared_weak_count *)a1[7];
  if (v2)
  {
    uint64_t v3 = a1[4];
    uint64_t v4 = std::__shared_weak_count::lock(v2);
    std::string v16 = v4;
    if (v4)
    {
      std::string::size_type v5 = v4;
      if (a1[6])
      {
        int v6 = BBUFSServerFlush();
        if (v6 && *(unsigned char *)(v3 + 520))
        {
          v14[0] = MEMORY[0x1E4F143A8];
          v14[1] = 0x40000000;
          v14[2] = ___ZN8FSModule25repeatFlushOperation_syncEv_block_invoke_2;
          v14[3] = &__block_descriptor_tmp_75;
          void v14[4] = v3;
          ctu::SharedSynchronizable<FSModule>::execute_wrapped((uint64_t *)(v3 + 120), (uint64_t)v14);
        }
        uint64_t v7 = *(NSObject **)(v3 + 88);
        if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
        {
          int v8 = *(unsigned __int8 *)(v3 + 520);
          *(_DWORD *)long long buf = 67109376;
          int v18 = v6;
          __int16 v19 = 1024;
          int v20 = v8;
          _os_log_impl(&dword_1C5767000, v7, OS_LOG_TYPE_DEFAULT, "#I Flush completed with success: %d, server running: %d", buf, 0xEu);
        }
        v13[0] = MEMORY[0x1E4F143A8];
        v13[1] = 0x40000000;
        uint64_t v13[2] = ___ZN8FSModule25repeatFlushOperation_syncEv_block_invoke_76;
        v13[3] = &__block_descriptor_tmp_77_0;
        v13[4] = v3;
        ctu::SharedSynchronizable<FSModule>::execute_wrapped((uint64_t *)(v3 + 120), (uint64_t)v13);
        if (*(unsigned char *)(v3 + 520))
        {
          if (v6)
          {
            v12[0] = MEMORY[0x1E4F143A8];
            v12[1] = 0x40000000;
            void v12[2] = ___ZN8FSModule25repeatFlushOperation_syncEv_block_invoke_78;
            v12[3] = &__block_descriptor_tmp_79;
            v12[4] = v3;
            dispatch_object_t v9 = v12;
          }
          else
          {
            v11[0] = MEMORY[0x1E4F143A8];
            v11[1] = 0x40000000;
            void v11[2] = ___ZN8FSModule25repeatFlushOperation_syncEv_block_invoke_2_80;
            v11[3] = &__block_descriptor_tmp_82;
            v11[4] = v3;
            dispatch_object_t v9 = v11;
          }
          ctu::SharedSynchronizable<FSModule>::execute_wrapped((uint64_t *)(v3 + 120), (uint64_t)v9);
        }
        else
        {
          uint64_t v10 = *(NSObject **)(v3 + 88);
          if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)long long buf = 0;
            _os_log_impl(&dword_1C5767000, v10, OS_LOG_TYPE_DEFAULT, "#I file server has stopped", buf, 2u);
          }
        }
      }
      if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void sub_1C5945344(_Unwind_Exception *a1)
{
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100](v1 - 112);
  _Unwind_Resume(a1);
}

void ___ZN8FSModule25repeatFlushOperation_syncEv_block_invoke_2(uint64_t a1)
{
}

void ___ZN8FSModule25repeatFlushOperation_syncEv_block_invoke_76(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  unint64_t v6 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v7 = 0xAAAAAAAAAAAAAAAALL;
  (*(void (**)(unint64_t *__return_ptr, uint64_t))(*(void *)v1 + 80))(&v6, v1);
  unint64_t v2 = v6;
  if (!v6) {
    goto LABEL_10;
  }
  if (*(char *)(v1 + 991) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v1 + 968), *(void *)(v1 + 976));
  }
  else {
    std::string __p = *(std::string *)(v1 + 968);
  }
  uint64_t v3 = *(void *)(v2 + 104);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v8, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else {
    std::string v8 = __p;
  }
  (*(void (**)(uint64_t, std::string *))(*(void *)v3 + 32))(v3, &v8);
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v8.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      goto LABEL_15;
    }
LABEL_10:
    uint64_t v4 = (std::__shared_weak_count *)v7;
    if (!v7) {
      return;
    }
    goto LABEL_11;
  }
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_10;
  }
LABEL_15:
  operator delete(__p.__r_.__value_.__l.__data_);
  uint64_t v4 = (std::__shared_weak_count *)v7;
  if (!v7) {
    return;
  }
LABEL_11:
  if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
}

void sub_1C59454DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if ((a14 & 0x80000000) == 0)
  {
    std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
    _Unwind_Resume(a1);
  }
  operator delete(__p);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

uint64_t ___ZN8FSModule25repeatFlushOperation_syncEv_block_invoke_78(uint64_t a1)
{
  return FSModule::repeatFlushOperation_sync(*(FSModule **)(a1 + 32));
}

void ___ZN8FSModule25repeatFlushOperation_syncEv_block_invoke_2_80(uint64_t a1)
{
  uint64_t v1 = *(FSModule **)(a1 + 32);
  std::string __p = operator new(0x28uLL);
  long long v3 = xmmword_1C59A1AE0;
  strcpy((char *)__p, "filesystem flush operation failed");
  FSModule::resetBaseband_sync(v1, (uint64_t)&__p);
  if (SHIBYTE(v3) < 0) {
    operator delete(__p);
  }
}

void sub_1C59455D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void FSModule::resetBaseband_sync(FSModule *a1, uint64_t a2)
{
  FSModule::handleResult_sync(a1, 0);
  xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
  if (v4 || (xpc_object_t v4 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C8792D30](v4) == MEMORY[0x1E4F14590])
    {
      xpc_retain(v4);
      xpc_object_t v5 = v4;
    }
    else
    {
      xpc_object_t v5 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v5 = xpc_null_create();
    xpc_object_t v4 = 0;
  }
  xpc_release(v4);
  xpc_object_t v6 = xpc_string_create((const char *)*MEMORY[0x1E4F4C6E8]);
  if (!v6) {
    xpc_object_t v6 = xpc_null_create();
  }
  xpc_dictionary_set_value(v5, (const char *)*MEMORY[0x1E4F4C690], v6);
  xpc_object_t v7 = xpc_null_create();
  xpc_release(v6);
  xpc_release(v7);
  xpc_object_t v8 = xpc_string_create((const char *)*MEMORY[0x1E4F4D240]);
  if (!v8) {
    xpc_object_t v8 = xpc_null_create();
  }
  xpc_dictionary_set_value(v5, (const char *)*MEMORY[0x1E4F4CA38], v8);
  xpc_object_t v9 = xpc_null_create();
  xpc_release(v8);
  xpc_release(v9);
  if (*(char *)(a2 + 23) >= 0) {
    uint64_t v10 = (const char *)a2;
  }
  else {
    uint64_t v10 = *(const char **)a2;
  }
  xpc_object_t v11 = xpc_string_create(v10);
  if (!v11) {
    xpc_object_t v11 = xpc_null_create();
  }
  xpc_dictionary_set_value(v5, (const char *)*MEMORY[0x1E4F4C8F0], v11);
  xpc_object_t v12 = xpc_null_create();
  xpc_release(v11);
  xpc_release(v12);
  uint64_t v13 = (const void *)*MEMORY[0x1E4F4C638];
  size_t v14 = strlen((const char *)*MEMORY[0x1E4F4C638]);
  if (v14 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v15 = (void *)v14;
  if (v14 >= 0x17)
  {
    uint64_t v17 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v14 | 7) != 0x17) {
      uint64_t v17 = v14 | 7;
    }
    uint64_t v18 = v17 + 1;
    std::string v16 = (void **)operator new(v17 + 1);
    __dst[1] = v15;
    unint64_t v22 = v18 | 0x8000000000000000;
    __dst[0] = v16;
LABEL_24:
    memmove(v16, v13, (size_t)v15);
    *((unsigned char *)v15 + (void)v16) = 0;
    xpc_object_t object = v5;
    if (v5) {
      goto LABEL_20;
    }
    goto LABEL_25;
  }
  HIBYTE(v22) = v14;
  std::string v16 = __dst;
  if (v14) {
    goto LABEL_24;
  }
  LOBYTE(__dst[0]) = 0;
  xpc_object_t object = v5;
  if (v5)
  {
LABEL_20:
    xpc_retain(v5);
    goto LABEL_26;
  }
LABEL_25:
  xpc_object_t object = xpc_null_create();
LABEL_26:
  __int16 v19 = 0;
  Service::runCommand((uint64_t)a1, (uint64_t)__dst, &object, &v19);
  xpc_release(object);
  xpc_object_t object = 0;
  if (SHIBYTE(v22) < 0) {
    operator delete(__dst[0]);
  }
  xpc_release(v5);
}

void sub_1C594589C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, xpc_object_t object, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  xpc_release(object);
  if (a17 < 0) {
    operator delete(__p);
  }
  xpc_release(v17);
  _Unwind_Resume(a1);
}

void __copy_helper_block_e8_40c30_ZTSN8dispatch13group_sessionE48c32_ZTSNSt3__18weak_ptrI8FSModuleEE(void *a1, void *a2)
{
  xpc_object_t v4 = a2[5];
  a1[5] = v4;
  if (v4)
  {
    dispatch_retain(v4);
    xpc_object_t v5 = a1[5];
    if (v5) {
      dispatch_group_enter(v5);
    }
  }
  uint64_t v6 = a2[7];
  a1[6] = a2[6];
  a1[7] = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 16), 1uLL, memory_order_relaxed);
  }
}

void __destroy_helper_block_e8_40c30_ZTSN8dispatch13group_sessionE48c32_ZTSNSt3__18weak_ptrI8FSModuleEE(uint64_t a1)
{
  unint64_t v2 = *(std::__shared_weak_count **)(a1 + 56);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  long long v3 = *(NSObject **)(a1 + 40);
  if (v3)
  {
    dispatch_group_leave(v3);
    xpc_object_t v4 = *(NSObject **)(a1 + 40);
    if (v4)
    {
      dispatch_release(v4);
    }
  }
}

uint64_t ctu::Loggable<FSModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig(uint64_t a1)
{
  return MEMORY[0x1F417DA50](a1 + 8);
}

size_t ctu::Loggable<FSModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  long long v3 = (const char *)(*(uint64_t (**)(void))(*(void *)(a1 - 48) + 16))();
  size_t result = strlen(v3);
  if (result >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v5 = result;
  if (result >= 0x17)
  {
    uint64_t v6 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17) {
      uint64_t v6 = result | 7;
    }
    uint64_t v7 = v6 + 1;
    xpc_object_t v8 = operator new(v6 + 1);
    a2[1] = v5;
    a2[2] = v7 | 0x8000000000000000;
    *a2 = v8;
    a2 = v8;
  }
  else
  {
    *((unsigned char *)a2 + 23) = result;
    if (!result)
    {
      *(unsigned char *)a2 = 0;
      return result;
    }
  }
  size_t result = (size_t)memmove(a2, v3, v5);
  *((unsigned char *)a2 + v5) = 0;
  return result;
}

uint64_t ctu::Loggable<FSModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return MEMORY[0x1F417DD10](a1 + 8);
}

void *ctu::Loggable<FSModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_1F20FE9B8;
  MEMORY[0x1C8790F40](a1 + 1);
  return a1;
}

void ctu::Loggable<FSModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_1F20FE9B8;
  MEMORY[0x1C8790F40](a1 + 1);

  operator delete(a1);
}

void ctu::Loggable<FSModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(uint64_t a1)
{
  uint64_t v1 = a1 + 56;
  if (*(void *)(a1 + 56))
  {
    if (!*(void *)(a1 + 80) || (unint64_t v2 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(a1 + 80))) == 0) {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    long long v3 = v2;
    ctu::LoggerCommonBase::getLogDomain((ctu::LoggerCommonBase *)(v1 - 48));
    ctu::TrackedLogger::registerLoggerToServer();
    if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_1C5945C88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

void sub_1C5945CA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void *std::shared_ptr<FSModule>::shared_ptr[abi:ne180100]<FSModule,std::shared_ptr<FSModule> ctu::SharedSynchronizable<FSModule>::make_shared_ptr<FSModule>(FSModule*)::{lambda(FSModule*)#1},void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  xpc_object_t v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = &v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20FE9F8;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)a2;
  a1[1] = v4;
  if (!a2) {
    return a1;
  }
  uint64_t v6 = *(std::__shared_weak_count **)(a2 + 128);
  if (v6)
  {
    if (v6->__shared_owners_ == -1)
    {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      *(void *)(a2 + 120) = a2;
      *(void *)(a2 + 128) = v4;
      std::__shared_weak_count::__release_weak(v6);
      if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
        goto LABEL_8;
      }
    }
    return a1;
  }
  atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  *(void *)(a2 + 120) = a2;
  *(void *)(a2 + 128) = v4;
  if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
LABEL_8:
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void sub_1C5945DD0(void *a1)
{
  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[17], v1, (dispatch_function_t)std::shared_ptr<FSModule> ctu::SharedSynchronizable<FSModule>::make_shared_ptr<FSModule>(FSModule*)::{lambda(FSModule*)#1}::operator() const(FSModule*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_1C5945DF8(_Unwind_Exception *a1)
{
}

void std::__shared_ptr_pointer<FSModule *,std::shared_ptr<FSModule> ctu::SharedSynchronizable<FSModule>::make_shared_ptr<FSModule>(FSModule*)::{lambda(FSModule *)#1},std::allocator<FSModule>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<FSModule *,std::shared_ptr<FSModule> ctu::SharedSynchronizable<FSModule>::make_shared_ptr<FSModule>(FSModule*)::{lambda(FSModule *)#1},std::allocator<FSModule>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<FSModule *,std::shared_ptr<FSModule> ctu::SharedSynchronizable<FSModule>::make_shared_ptr<FSModule>(FSModule*)::{lambda(FSModule *)#1},std::allocator<FSModule>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableI8FSModuleE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_") {
    return a1 + 24;
  }
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableI8FSModuleE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableI8FSModuleE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_"))return 0; {
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableI8FSModuleE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  }
  return 0;
}

uint64_t std::shared_ptr<FSModule> ctu::SharedSynchronizable<FSModule>::make_shared_ptr<FSModule>(FSModule*)::{lambda(FSModule*)#1}::operator() const(FSModule*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void ctu::SharedLoggable<FSModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(void *a1)
{
  *a1 = &unk_1F20FE9B8;
  MEMORY[0x1C8790F40](a1 + 1);
  unint64_t v2 = a1[12];
  if (v2) {
    dispatch_release(v2);
  }
  unint64_t v3 = a1[11];
  if (v3) {
    dispatch_release(v3);
  }
  xpc_object_t v4 = (std::__shared_weak_count *)a1[10];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }

  operator delete(a1);
}

uint64_t ___ZN3ctu20SharedSynchronizableI8FSModuleE13connect_eventIN5boost8signals26signalIFvbENS5_19optional_last_valueIvEEiNSt3__14lessIiEENS4_8functionIS7_EENSD_IFvRKNS5_10connectionEbEEENS5_5mutexEEES1_vJbEEEDTcl7connectfp_cvNSA_10shared_ptrIS1_EE_EcvP16dispatch_queue_s_EcvPFT1_DpT2_ELi0EEERT_MT0_FSQ_SS_E_block_invoke(void *a1)
{
  uint64_t v1 = (uint64_t (*)(void *))a1[5];
  uint64_t v2 = a1[6];
  unint64_t v3 = (void *)(a1[4] + (v2 >> 1) - 120);
  if (v2) {
    return (*(uint64_t (**)(void))(*v3 + v1))();
  }
  else {
    return v1(v3);
  }
}

void *boost::signals2::detail::foreign_weak_ptr_impl<std::weak_ptr<FSModule>>::~foreign_weak_ptr_impl(void *a1)
{
  *a1 = &unk_1F20FEA88;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void boost::signals2::detail::foreign_weak_ptr_impl<std::weak_ptr<FSModule>>::~foreign_weak_ptr_impl(void *__p)
{
  *std::string __p = &unk_1F20FEA88;
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  operator delete(__p);
}

void boost::signals2::detail::foreign_weak_ptr_impl<std::weak_ptr<FSModule>>::lock(uint64_t a1@<X0>, void *a2@<X8>)
{
  xpc_object_t v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (v4)
  {
    size_t v5 = std::__shared_weak_count::lock(v4);
    if (v5)
    {
      uint64_t v6 = *(void *)(a1 + 8);
      goto LABEL_6;
    }
  }
  else
  {
    size_t v5 = 0;
  }
  uint64_t v6 = 0;
LABEL_6:
  uint64_t v7 = operator new(0x18uLL);
  *uint64_t v7 = &unk_1F20FEAD8;
  v7[1] = v6;
  _DWORD v7[2] = v5;
  if (v5)
  {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    *a2 = v7;
    if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  else
  {
    *a2 = v7;
  }
}

void sub_1C59461DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

BOOL boost::signals2::detail::foreign_weak_ptr_impl<std::weak_ptr<FSModule>>::expired(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  return !v1 || *(void *)(v1 + 8) == -1;
}

void *boost::signals2::detail::foreign_weak_ptr_impl<std::weak_ptr<FSModule>>::clone(uint64_t a1)
{
  size_t result = operator new(0x18uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  void *result = &unk_1F20FEA88;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void *boost::signals2::detail::foreign_shared_ptr_impl<std::shared_ptr<FSModule>>::~foreign_shared_ptr_impl(void *result)
{
  uint64_t v1 = result;
  void *result = &unk_1F20FEAD8;
  uint64_t v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void boost::signals2::detail::foreign_shared_ptr_impl<std::shared_ptr<FSModule>>::~foreign_shared_ptr_impl(void *__p)
{
  uint64_t v1 = __p;
  *std::string __p = &unk_1F20FEAD8;
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    std::string __p = v1;
  }
  else if (((vars8 ^ (2 * vars8)) & 0x4000000000000000) != 0)
  {
    __break(0xC471u);
  }
  operator delete(__p);
}

void *boost::signals2::detail::foreign_shared_ptr_impl<std::shared_ptr<FSModule>>::clone(uint64_t a1)
{
  size_t result = operator new(0x18uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  void *result = &unk_1F20FEAD8;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void *___ZNK3ctu20SharedSynchronizableI8FSModuleE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke(uint64_t a1)
{
  return (*(void *(**)(void *__return_ptr))(**(void **)(a1 + 40) + 16))(*(void **)(a1 + 40));
}

void ctu::SharedSynchronizable<FSModule>::execute_wrapped(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[1];
  if (!v3 || (uint64_t v5 = *a1, (v6 = std::__shared_weak_count::lock(v3)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v7 = v6;
  xpc_object_t v8 = a1[2];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 1174405120;
  block[2] = ___ZNK3ctu20SharedSynchronizableI8FSModuleE15execute_wrappedEU13block_pointerFvvE_block_invoke;
  block[3] = &unk_1F20FEB10;
  block[5] = v5;
  xpc_object_t v12 = v7;
  p_shared_owners = &v7->__shared_owners_;
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  void block[4] = a2;
  dispatch_async(v8, block);
  uint64_t v10 = v12;
  if (!v12 || atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      return;
    }
LABEL_8:
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    return;
  }
  ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
  std::__shared_weak_count::__release_weak(v10);
  if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_8;
  }
}

uint64_t ___ZNK3ctu20SharedSynchronizableI8FSModuleE15execute_wrappedEU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t __copy_helper_block_e8_40c36_ZTSNSt3__110shared_ptrIK8FSModuleEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c36_ZTSNSt3__110shared_ptrIK8FSModuleEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

uint64_t ___ZNK8dispatch8callbackIU13block_pointerFvbEEclIJbEEEvDpT__block_invoke_2(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *(unsigned __int8 *)(a1 + 40));
}

void dispatch::async<void ctu::SharedSynchronizable<FSModule>::execute_wrapped<FSModule::initialize(dispatch::group_session)::$_0>(FSModule::initialize(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<FSModule::initialize(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<FSModule::initialize(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  uint64_t v2 = *(FSModule ***)a1;
  FSModule::finishInitialization_sync(**(FSModule ***)a1);
  operator delete(v2);
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    uint64_t v4 = (void *)a1;
  }
  else
  {
    uint64_t v4 = (void *)a1;
  }
  operator delete(v4);
}

void sub_1C5946708(_Unwind_Exception *a1)
{
  operator delete(v2);
  uint64_t v4 = (std::__shared_weak_count *)v1[2];
  if (v4)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void dispatch::async<void ctu::SharedSynchronizable<FSModule>::execute_wrapped<FSModule::sleep(dispatch::group_session)::$_0>(FSModule::sleep(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<FSModule::sleep(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<FSModule::sleep(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t v2 = *a1;
  uint64_t v4 = **a1;
  uint64_t v3 = (*a1)[1];
  *(unsigned char *)(v4 + 930) = 1;
  if (v3)
  {
    dispatch_group_leave(v3);
    uint64_t v5 = v2[1];
    if (v5) {
      dispatch_release(v5);
    }
  }
  operator delete(v2);
  uint64_t v6 = (std::__shared_weak_count *)a1[2];
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    uint64_t v7 = a1;
  }
  else
  {
    uint64_t v7 = a1;
  }
  operator delete(v7);
}

void dispatch::async<void ctu::SharedSynchronizable<FSModule>::execute_wrapped<FSModule::wake(dispatch::group_session)::$_0>(FSModule::wake(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<FSModule::wake(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<FSModule::wake(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t v2 = *a1;
  uint64_t v4 = **a1;
  uint64_t v3 = (*a1)[1];
  *(unsigned char *)(v4 + 930) = 0;
  if (v3)
  {
    dispatch_group_leave(v3);
    uint64_t v5 = v2[1];
    if (v5) {
      dispatch_release(v5);
    }
  }
  operator delete(v2);
  uint64_t v6 = (std::__shared_weak_count *)a1[2];
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    uint64_t v7 = a1;
  }
  else
  {
    uint64_t v7 = a1;
  }
  operator delete(v7);
}

void dispatch::detail::group_notify<FSModule::requestFSSync_sync(void)::$_0>(dispatch_group_s *,dispatch_queue_s *,FSModule::requestFSSync_sync(void)::$_0 &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke(uint64_t *__p)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (!v2) {
    goto LABEL_60;
  }
  uint64_t v3 = *__p;
  uint64_t v4 = (capabilities::abs *)std::__shared_weak_count::lock(v2);
  if (!v4) {
    goto LABEL_60;
  }
  uint64_t v5 = (std::__shared_weak_count *)v4;
  if (__p[1])
  {
    if (!*(unsigned char *)(v3 + 930))
    {
      uint64_t v6 = capabilities::abs::fileSystemFlushTimeout(v4);
      uint64_t v7 = *(NSObject **)(v3 + 88);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(buf) = 134217984;
        *(void *)((char *)&buf + 4) = v6;
        _os_log_impl(&dword_1C5767000, v7, OS_LOG_TYPE_DEFAULT, "#I Created rfs sync watchdog timer; timeout=%llu sec",
          (uint8_t *)&buf,
          0xCu);
      }
      *(void *)&long long buf = MEMORY[0x1E4F143A8];
      *((void *)&buf + 1) = 1174405120;
      xpc_object_t v33 = ___ZZN8FSModule18requestFSSync_syncEvENK3__0clEv_block_invoke;
      size_t v34 = &__block_descriptor_tmp_146;
      uint64_t v9 = __p[1];
      xpc_object_t v8 = (std::__shared_weak_count *)__p[2];
      uint64_t v35 = v3;
      uint64_t v36 = v9;
      uint64_t v37 = v8;
      if (v8) {
        atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v38 = v6;
      uint64_t v10 = operator new(0x10uLL);
      xpc_object_t v11 = _Block_copy(&buf);
      void *v10 = "Watchdog timed out";
      TelephonyBasebandWatchdogStart();
      if (v11) {
        _Block_release(v11);
      }
      xpc_object_t v12 = *(void **)(v3 + 1024);
      *(void *)(v3 + 1024) = v10;
      if (v12)
      {
        TelephonyBasebandWatchdogStop();
        operator delete(v12);
      }
      if (v37) {
        std::__shared_weak_count::__release_weak(v37);
      }
    }
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 1174405120;
    aBlock[2] = ___ZZN8FSModule18requestFSSync_syncEvENK3__0clEv_block_invoke_147;
    aBlock[3] = &__block_descriptor_tmp_152_0;
    uint64_t v14 = __p[1];
    uint64_t v13 = (std::__shared_weak_count *)__p[2];
    void aBlock[4] = v3;
    void aBlock[5] = v14;
    xpc_object_t v30 = v13;
    if (v13) {
      atomic_fetch_add_explicit(&v13->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v15 = _Block_copy(aBlock);
    std::string v16 = *(NSObject **)(v3 + 136);
    if (v16) {
      dispatch_retain(*(dispatch_object_t *)(v3 + 136));
    }
    uint64_t v17 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
    uint64_t v18 = off_1EBBDD2A0;
    if (!off_1EBBDD2A0)
    {
      CommandDriverFactory::create_default_global((uint64_t *)object, v17);
      long long v19 = *(_OWORD *)object;
      object[0] = 0;
      object[1] = 0;
      int v20 = (std::__shared_weak_count *)*(&off_1EBBDD2A0 + 1);
      off_1EBBDD2A0 = v19;
      if (v20 && !atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
      uint64_t v21 = (std::__shared_weak_count *)object[1];
      if (object[1] && !atomic_fetch_add((atomic_ullong *volatile)&object[1][1], 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
      uint64_t v18 = off_1EBBDD2A0;
    }
    unint64_t v22 = (std::__shared_weak_count *)*(&off_1EBBDD2A0 + 1);
    if (*(&off_1EBBDD2A0 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDD2A0 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
    (*(void (**)(CFTypeRef *__return_ptr, uint64_t))(*(void *)v18 + 40))(&cf, v18);
    if (v28)
    {
      xpc_object_t v23 = std::__shared_weak_count::lock(v28);
      if (v23) {
        CFTypeRef v24 = cf;
      }
      else {
        CFTypeRef v24 = 0;
      }
      if (v28) {
        std::__shared_weak_count::__release_weak(v28);
      }
      if (!v22) {
        goto LABEL_39;
      }
    }
    else
    {
      xpc_object_t v23 = 0;
      CFTypeRef v24 = 0;
      if (!v22) {
        goto LABEL_39;
      }
    }
    if (!atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
      if (v24)
      {
LABEL_40:
        CFTypeRef cf = 0;
        if (v15)
        {
          object[0] = (dispatch_object_t)_Block_copy(v15);
          object[1] = v16;
          if (!v16)
          {
LABEL_43:
            (*(void (**)(CFTypeRef, CFTypeRef *, dispatch_object_t *))(*(void *)v24 + 48))(v24, &cf, object);
            if (object[1]) {
              dispatch_release(object[1]);
            }
            if (object[0]) {
              _Block_release(object[0]);
            }
            if (cf) {
              CFRelease(cf);
            }
            goto LABEL_49;
          }
        }
        else
        {
          object[0] = 0;
          object[1] = v16;
          if (!v16) {
            goto LABEL_43;
          }
        }
        dispatch_retain(v16);
        goto LABEL_43;
      }
LABEL_49:
      if (v23 && !atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
      if (v16) {
        dispatch_release(v16);
      }
      if (v15) {
        _Block_release(v15);
      }
      if (v30) {
        std::__shared_weak_count::__release_weak(v30);
      }
      goto LABEL_58;
    }
LABEL_39:
    if (v24) {
      goto LABEL_40;
    }
    goto LABEL_49;
  }
LABEL_58:
  if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_60:
  unint64_t v25 = __p[3];
  if (v25) {
    dispatch_release(v25);
  }
  unint64_t v26 = (std::__shared_weak_count *)__p[2];
  if (v26) {
    std::__shared_weak_count::__release_weak(v26);
  }
  operator delete(__p);
}

void sub_1C5946E00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18, void *aBlock, dispatch_object_t object,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void ___ZZN8FSModule18requestFSSync_syncEvENK3__0clEv_block_invoke(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    uint64_t v3 = a1[4];
    uint64_t v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = a1[5];
      if (!v6) {
        goto LABEL_12;
      }
      v8[0] = MEMORY[0x1E4F143A8];
      v8[1] = 1174405120;
      void v8[2] = ___ZZN8FSModule18requestFSSync_syncEvENK3__0clEv_block_invoke_2;
      v8[3] = &__block_descriptor_tmp_143;
      v8[4] = v3;
      void v8[5] = v6;
      uint64_t v9 = v4;
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v10 = a1[7];
      ctu::SharedSynchronizable<FSModule>::execute_wrapped((uint64_t *)(v3 + 120), (uint64_t)v8);
      uint64_t v7 = v9;
      if (!v9 || atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
LABEL_12:
        if (atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
          return;
        }
LABEL_9:
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
        return;
      }
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
      if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
        goto LABEL_9;
      }
    }
  }
}

uint64_t ___ZZN8FSModule18requestFSSync_syncEvENK3__0clEv_block_invoke_2(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  unint64_t v25 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v2 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v2 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v24[7] = v2;
  v24[8] = v2;
  v24[5] = v2;
  void v24[6] = v2;
  v24[3] = v2;
  v24[4] = v2;
  v24[1] = v2;
  void v24[2] = v2;
  long long v23 = v2;
  v24[0] = v2;
  *(_OWORD *)uint64_t v21 = v2;
  long long v22 = v2;
  long long v19 = v2;
  long long v20 = v2;
  long long v17 = v2;
  long long v18 = v2;
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v17);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v17, (uint64_t)"RFS sync watchdog timer expired; timeout=",
    41);
  uint64_t v3 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)" sec", 4);
  if ((BYTE8(v23) & 0x10) != 0)
  {
    uint64_t v6 = v23;
    if ((unint64_t)v23 < *((void *)&v20 + 1))
    {
      *(void *)&long long v23 = *((void *)&v20 + 1);
      uint64_t v6 = *((void *)&v20 + 1);
    }
    uint64_t v7 = (const void *)v20;
    std::string::size_type v4 = v6 - v20;
    if ((unint64_t)(v6 - v20) >= 0x7FFFFFFFFFFFFFF8) {
      goto LABEL_20;
    }
  }
  else
  {
    if ((BYTE8(v23) & 8) == 0)
    {
      std::string::size_type v4 = 0;
      *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 0;
      p_dst = &__dst;
      goto LABEL_14;
    }
    uint64_t v7 = (const void *)*((void *)&v18 + 1);
    std::string::size_type v4 = *((void *)&v19 + 1) - *((void *)&v18 + 1);
    if (*((void *)&v19 + 1) - *((void *)&v18 + 1) >= 0x7FFFFFFFFFFFFFF8uLL) {
LABEL_20:
    }
      std::string::__throw_length_error[abi:ne180100]();
  }
  if (v4 >= 0x17)
  {
    uint64_t v8 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v8 = v4 | 7;
    }
    uint64_t v9 = v8 + 1;
    p_dst = (std::string *)operator new(v8 + 1);
    __dst.__r_.__value_.__l.__size_ = v4;
    __dst.__r_.__value_.__r.__words[2] = v9 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_13;
  }
  *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v4;
  p_dst = &__dst;
  if (v4) {
LABEL_13:
  }
    memmove(p_dst, v7, v4);
LABEL_14:
  p_dst->__r_.__value_.__s.__data_[v4] = 0;
  FSModule::resetBaseband_sync((FSModule *)v1, (uint64_t)&__dst);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  unint64_t v15 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v16 = 0xAAAAAAAAAAAAAAAALL;
  (*(void (**)(unint64_t *__return_ptr, uint64_t))(*(void *)v1 + 80))(&v15, v1);
  unint64_t v10 = v15;
  if (v15)
  {
    if (*(char *)(v1 + 991) < 0) {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v1 + 968), *(void *)(v1 + 976));
    }
    else {
      std::string __p = *(std::string *)(v1 + 968);
    }
    uint64_t v11 = *(void *)(v10 + 104);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&__dst, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    }
    else {
      std::string __dst = __p;
    }
    (*(void (**)(uint64_t, std::string *))(*(void *)v11 + 32))(v11, &__dst);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_27;
      }
LABEL_31:
      operator delete(__p.__r_.__value_.__l.__data_);
      xpc_object_t v12 = (std::__shared_weak_count *)v16;
      if (!v16) {
        goto LABEL_32;
      }
      goto LABEL_28;
    }
    operator delete(__dst.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      goto LABEL_31;
    }
  }
LABEL_27:
  xpc_object_t v12 = (std::__shared_weak_count *)v16;
  if (!v16) {
    goto LABEL_32;
  }
LABEL_28:
  if (!atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
LABEL_32:
  *(void *)&long long v17 = *MEMORY[0x1E4FBA418];
  *(void *)((char *)&v17 + *(void *)(v17 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  *((void *)&v17 + 1) = MEMORY[0x1E4FBA470] + 16;
  if (SHIBYTE(v22) < 0) {
    operator delete(v21[1]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1C8791FB0](v24);
}

void sub_1C59474CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, char a18)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  std::ostringstream::~ostringstream((uint64_t)&a18);
  _Unwind_Resume(a1);
}

void sub_1C5947518(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1C594752C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  if (*(char *)(v7 - 57) < 0)
  {
    operator delete(*(void **)(v7 - 80));
    std::ostringstream::~ostringstream((uint64_t)va);
    _Unwind_Resume(a1);
  }
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_40c35_ZTSNSt3__110shared_ptrI8FSModuleEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c35_ZTSNSt3__110shared_ptrI8FSModuleEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void ___ZZN8FSModule18requestFSSync_syncEvENK3__0clEv_block_invoke_147(void *a1, void *a2, void **a3)
{
  __p[3] = *(void **)MEMORY[0x1E4F143B8];
  std::string::size_type v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    uint64_t v7 = a1[4];
    uint64_t v8 = std::__shared_weak_count::lock(v4);
    uint64_t v21 = v8;
    if (v8)
    {
      uint64_t v9 = v8;
      if (!a1[5])
      {
LABEL_29:
        if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
        return;
      }
      if (*a2) {
        unint64_t v10 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
      }
      else {
        unint64_t v10 = 0;
      }
      if (v10)
      {
        __p[0] = operator new(0x30uLL);
        *(_OWORD *)&__p[1] = xmmword_1C59A4CE0;
        strcpy((char *)__p[0], "Failed to issue rfs sync command to baseband");
        FSModule::resetBaseband_sync((FSModule *)v7, (uint64_t)__p);
        if (SHIBYTE(__p[2]) < 0) {
          operator delete(__p[0]);
        }
        goto LABEL_29;
      }
      uint64_t v11 = *a3;
      if (*a3) {
        xpc_object_t v12 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
      }
      else {
        xpc_object_t v12 = 0;
      }
      if (!v12) {
        goto LABEL_29;
      }
      uint64_t v13 = *(NSObject **)(v7 + 88);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(__p[0]) = 138412290;
        *(void **)((char *)__p + 4) = v11;
        _os_log_impl(&dword_1C5767000, v13, OS_LOG_TYPE_DEFAULT, "#I %@", (uint8_t *)__p, 0xCu);
        uint64_t v11 = *a3;
      }
      memset(__p, 170, 16);
      ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)__p, (const __CFDictionary *)v11);
      ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)buf, (const char *)*MEMORY[0x1E4FB9B70]);
      char Bool = ctu::cf::map_adapter::getBool((ctu::cf::map_adapter *)__p, *(const __CFString **)buf);
      MEMORY[0x1C8791110](buf);
      *(unsigned char *)(v7 + 1088) = Bool;
      if ((Bool & 1) == 0)
      {
        unint64_t v15 = *(NSObject **)(v7 + 88);
        if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl(&dword_1C5767000, v15, OS_LOG_TYPE_DEFAULT, "#I No new data to sync; skipping rfs sync", buf, 2u);
        }
        memset(buf, 170, sizeof(buf));
        (*(void (**)(uint8_t *__return_ptr, uint64_t))(*(void *)v7 + 80))(buf, v7);
        uint64_t v16 = *(void *)buf;
        if (*(void *)buf)
        {
          if (*(char *)(v7 + 991) < 0) {
            std::string::__init_copy_ctor_external(&v18, *(const std::string::value_type **)(v7 + 968), *(void *)(v7 + 976));
          }
          else {
            std::string v18 = *(std::string *)(v7 + 968);
          }
          ServiceManager::releasePowerAssertion(v16, (uint64_t)&v18);
          if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v18.__r_.__value_.__l.__data_);
          }
        }
        FSModule::handleResult_sync((FSModule *)v7, 1);
        long long v17 = *(std::__shared_weak_count **)&buf[8];
        if (*(void *)&buf[8]
          && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
      }
      FSModule::restartSyncTimer_sync((FSModule *)v7);
      MEMORY[0x1C8791160](__p);
      uint64_t v9 = v21;
      if (v21) {
        goto LABEL_29;
      }
    }
  }
}

void sub_1C5947944(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, char a18, uint64_t a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  MEMORY[0x1C8791160](&a20);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  _Unwind_Resume(a1);
}

void sub_1C59479C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
  {
    operator delete(__p);
    std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
    _Unwind_Resume(a1);
  }
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t __cxx_global_var_init_88()
{
  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<ctu::power::assertion>::~PthreadMutexGuardPolicy, &ctu::Singleton<ctu::power::assertion,ctu::power::assertion,ctu::PthreadMutexGuardPolicy<ctu::power::assertion>>::sInstance, &dword_1C5767000);
  }
  return result;
}

uint64_t __cxx_global_var_init_89()
{
  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<CommandDriverFactory>::~PthreadMutexGuardPolicy, &ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance, &dword_1C5767000);
  }
  return result;
}

uint64_t __cxx_global_var_init_90()
{
  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<ABMServer>::~PthreadMutexGuardPolicy, &ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance, &dword_1C5767000);
  }
  return result;
}

void PowerBudget::PowerBudget(PowerBudget *this)
{
  *((void *)this + 1) = 0;
  *(void *)this = (char *)this + 8;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
}

{
  *((void *)this + 1) = 0;
  *(void *)this = (char *)this + 8;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
}

void PowerBudget::PowerBudget(PowerBudget *this, NSDictionary *a2)
{
  *((void *)this + 1) = 0;
  *(void *)this = (char *)this + 8;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  PowerBudget::fill((id *)this, a2);
}

{
  *((void *)this + 1) = 0;
  *(void *)this = (char *)this + 8;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  PowerBudget::fill((id *)this, a2);
}

void sub_1C5947B28(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy(v1, *(void **)(v1 + 8));
  *(void *)(v1 + 8) = 0;
  *(void *)(v1 + 16) = 0;
  *(void *)uint64_t v1 = v3;
  _Unwind_Resume(a1);
}

void PowerBudget::fill(id *this, NSDictionary *a2)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];

  this[3] = 0;
  if (a2)
  {
    long long v42 = 0u;
    long long v43 = 0u;
    long long v40 = 0u;
    long long v41 = 0u;
    NSUInteger v4 = [(NSDictionary *)a2 countByEnumeratingWithState:&v40 objects:v44 count:16];
    if (v4)
    {
      uint64_t v36 = *MEMORY[0x1E4F566A0];
      uint64_t v37 = *(void *)v41;
      uint64_t v34 = *MEMORY[0x1E4F566C0];
      uint64_t v35 = *MEMORY[0x1E4F566B0];
      uint64_t v5 = (uint64_t **)(this + 1);
      do
      {
        for (uint64_t i = 0; i != v4; ++i)
        {
          if (*(void *)v41 != v37) {
            objc_enumerationMutation(a2);
          }
          uint64_t v7 = *(void **)(*((void *)&v40 + 1) + 8 * i);
          id v8 = [(NSDictionary *)a2 objectForKeyedSubscript:v7];
          if (v8)
          {
            int v9 = [v8 integerValue];
            if ([v7 isEqualToString:v36])
            {
              unsigned int v10 = 1;
              uint64_t v11 = *v5;
              xpc_object_t v12 = (uint64_t **)(this + 1);
              uint64_t v13 = (uint64_t **)(this + 1);
              if (*v5) {
                goto LABEL_54;
              }
LABEL_58:
              xpc_object_t v31 = operator new(0x28uLL);
              v31[28] = v10;
              v31[32] = 0;
              v31[36] = 0;
              *(void *)xpc_object_t v31 = 0;
              *((void *)v31 + 1) = 0;
              *((void *)v31 + 2) = v13;
              *xpc_object_t v12 = (uint64_t *)v31;
              xpc_object_t v32 = *(void **)*this;
              xpc_object_t v33 = (uint64_t *)v31;
              if (v32)
              {
                *this = v32;
                xpc_object_t v33 = *v12;
              }
              std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)this[1], v33);
              this[2] = (char *)this[2] + 1;
              goto LABEL_6;
            }
            if ([v7 isEqualToString:v35])
            {
              unsigned int v10 = 0;
              uint64_t v11 = *v5;
              xpc_object_t v12 = (uint64_t **)(this + 1);
              uint64_t v13 = (uint64_t **)(this + 1);
              if (*v5) {
                goto LABEL_54;
              }
              goto LABEL_58;
            }
            if ([v7 isEqualToString:v34])
            {
              unsigned int v10 = 2;
              uint64_t v11 = *v5;
              xpc_object_t v12 = (uint64_t **)(this + 1);
              uint64_t v13 = (uint64_t **)(this + 1);
              if (*v5) {
                goto LABEL_54;
              }
              goto LABEL_58;
            }
            uint64_t v14 = NSString;
            PowerBudget::asString(10, (char *)__p);
            if (v39 >= 0) {
              unint64_t v15 = __p;
            }
            else {
              unint64_t v15 = (void **)__p[0];
            }
            char v16 = [v7 isEqualToString:[v14 stringWithUTF8String:v15]];
            char v17 = v16;
            if (v39 < 0)
            {
              operator delete(__p[0]);
              if (v17)
              {
LABEL_25:
                unsigned int v10 = 10;
                uint64_t v11 = *v5;
                xpc_object_t v12 = (uint64_t **)(this + 1);
                uint64_t v13 = (uint64_t **)(this + 1);
                if (*v5) {
                  goto LABEL_54;
                }
                goto LABEL_58;
              }
            }
            else if (v16)
            {
              goto LABEL_25;
            }
            std::string v18 = NSString;
            PowerBudget::asString(11, (char *)__p);
            if (v39 >= 0) {
              long long v19 = __p;
            }
            else {
              long long v19 = (void **)__p[0];
            }
            char v20 = [v7 isEqualToString:[v18 stringWithUTF8String:v19]];
            char v21 = v20;
            if (v39 < 0)
            {
              operator delete(__p[0]);
              if (v21)
              {
LABEL_33:
                unsigned int v10 = 11;
                uint64_t v11 = *v5;
                xpc_object_t v12 = (uint64_t **)(this + 1);
                uint64_t v13 = (uint64_t **)(this + 1);
                if (*v5) {
                  goto LABEL_54;
                }
                goto LABEL_58;
              }
            }
            else if (v20)
            {
              goto LABEL_33;
            }
            long long v22 = NSString;
            PowerBudget::asString(12, (char *)__p);
            if (v39 >= 0) {
              long long v23 = __p;
            }
            else {
              long long v23 = (void **)__p[0];
            }
            char v24 = [v7 isEqualToString:[v22 stringWithUTF8String:v23]];
            char v25 = v24;
            if (v39 < 0)
            {
              operator delete(__p[0]);
              if (v25)
              {
LABEL_41:
                unsigned int v10 = 12;
                uint64_t v11 = *v5;
                xpc_object_t v12 = (uint64_t **)(this + 1);
                uint64_t v13 = (uint64_t **)(this + 1);
                if (*v5) {
                  goto LABEL_54;
                }
                goto LABEL_58;
              }
            }
            else if (v24)
            {
              goto LABEL_41;
            }
            unint64_t v26 = NSString;
            PowerBudget::asString(13, (char *)__p);
            if (v39 >= 0) {
              unint64_t v27 = __p;
            }
            else {
              unint64_t v27 = (void **)__p[0];
            }
            char v28 = [v7 isEqualToString:[v26 stringWithUTF8String:v27]];
            char v29 = v28;
            if (v39 < 0)
            {
              operator delete(__p[0]);
              if (v29)
              {
LABEL_51:
                unsigned int v10 = 13;
                uint64_t v11 = *v5;
                xpc_object_t v12 = (uint64_t **)(this + 1);
                uint64_t v13 = (uint64_t **)(this + 1);
                if (!*v5) {
                  goto LABEL_58;
                }
                while (1)
                {
LABEL_54:
                  while (1)
                  {
                    uint64_t v13 = (uint64_t **)v11;
                    unsigned int v30 = *((unsigned __int8 *)v11 + 28);
                    if (v30 <= v10) {
                      break;
                    }
                    uint64_t v11 = *v13;
                    xpc_object_t v12 = v13;
                    if (!*v13) {
                      goto LABEL_58;
                    }
                  }
                  if (v30 >= v10) {
                    break;
                  }
                  uint64_t v11 = v13[1];
                  if (!v11)
                  {
                    xpc_object_t v12 = v13 + 1;
                    goto LABEL_58;
                  }
                }
                xpc_object_t v31 = v13;
LABEL_6:
                *((_DWORD *)v31 + 8) = v9;
                v31[36] = 1;
                continue;
              }
            }
            else if (v28)
            {
              goto LABEL_51;
            }
          }
        }
        NSUInteger v4 = [(NSDictionary *)a2 countByEnumeratingWithState:&v40 objects:v44 count:16];
      }
      while (v4);
    }
  }
}

void sub_1C5947F70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1C5947FE4(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy(v1, *(void **)(v1 + 8));
  *(void *)(v1 + 8) = 0;
  *(void *)(v1 + 16) = 0;
  *(void *)uint64_t v1 = v3;
  _Unwind_Resume(a1);
}

void PowerBudget::~PowerBudget(PowerBudget *this)
{
  uint64_t v2 = (void *)((char *)this + 8);
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)this, *((void **)this + 1));
  *(void *)this = v2;
  *((void *)this + 2) = 0;
  void *v2 = 0;

  *((void *)this + 3) = 0;
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)this, *((void **)this + 1));
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *(void *)this = v2;
}

{
  void *v2;

  uint64_t v2 = (void *)((char *)this + 8);
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)this, *((void **)this + 1));
  *(void *)this = v2;
  *((void *)this + 2) = 0;
  void *v2 = 0;

  *((void *)this + 3) = 0;
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)this, *((void **)this + 1));
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *(void *)this = v2;
}

void PowerBudget::PowerBudget(PowerBudget *this, const PowerBudget *a2)
{
  *((void *)this + 1) = 0;
  *(void *)this = (char *)this + 8;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  if (a2 != this) {
    std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__tree_node<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,void *> *,long>>((uint64_t)this, *(void **)a2, (void *)a2 + 1);
  }
  *((void *)this + 3) = [*((id *)a2 + 3) copy];
}

{
  *((void *)this + 1) = 0;
  *(void *)this = (char *)this + 8;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  if (a2 != this) {
    std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__tree_node<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,void *> *,long>>((uint64_t)this, *(void **)a2, (void *)a2 + 1);
  }
  *((void *)this + 3) = [*((id *)a2 + 3) copy];
}

void sub_1C594812C(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy(v1, *(void **)(v1 + 8));
  *(void *)(v1 + 8) = 0;
  *(void *)(v1 + 16) = 0;
  *(void *)uint64_t v1 = v2;
  _Unwind_Resume(a1);
}

void sub_1C59481B0(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy(v1, *(void **)(v1 + 8));
  *(void *)(v1 + 8) = 0;
  *(void *)(v1 + 16) = 0;
  *(void *)uint64_t v1 = v2;
  _Unwind_Resume(a1);
}

uint64_t PowerBudget::PowerBudget(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 24) = 0;
  *(_OWORD *)(a1 + 8) = 0u;
  long long v7 = 0u;
  uint64_t v6 = &v7;
  *(void *)a1 = a1 + 8;
  if (a2 != a1) {
    std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__tree_node<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,void *> *,long>>(a1, *(void **)a2, (void *)(a2 + 8));
  }
  if (&v6 != (long long **)a2) {
    std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__tree_node<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,void *> *,long>>(a2, v6, &v7);
  }
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&v6, (void *)v7);
  uint64_t v4 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a2 + 24) = v4;
  return a1;
}

void sub_1C5948280(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, void *a11)
{
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&a10, a11);
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy(v11, *(void **)(v11 + 8));
  *(void *)(v11 + 8) = 0;
  *(void *)(v11 + 16) = 0;
  *(void *)uint64_t v11 = v12;
  _Unwind_Resume(a1);
}

uint64_t PowerBudget::operator=(uint64_t a1, uint64_t a2)
{
  if (a2 != a1)
  {
    std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__tree_node<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,void *> *,long>>(a1, *(void **)a2, (void *)(a2 + 8));

    *(void *)(a1 + 24) = [*(id *)(a2 + 24) copy];
  }
  return a1;
}

void PowerBudget::PowerBudget(PowerBudget *this, BudgetData *a2)
{
  *((void *)this + 1) = 0;
  *(void *)this = (char *)this + 8;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((void *)this + 3) = 0;
  if (a2 != this) {
    std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__tree_node<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,void *> *,long>>((uint64_t)this, *(void **)a2, (void *)a2 + 1);
  }
}

{
  *((void *)this + 1) = 0;
  *(void *)this = (char *)this + 8;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((void *)this + 3) = 0;
  if (a2 != this) {
    std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__tree_node<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,void *> *,long>>((uint64_t)this, *(void **)a2, (void *)a2 + 1);
  }
}

void sub_1C5948360(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy(v1, *(void **)(v1 + 8));
  *(void *)(v1 + 8) = 0;
  *(void *)(v1 + 16) = 0;
  *(void *)uint64_t v1 = v2;
  _Unwind_Resume(a1);
}

void PowerBudget::fill(id *this, id *a2)
{
  this[3] = 0;
  if (a2 != this)
  {
    uint64_t v4 = *a2;
    std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__tree_node<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,void *> *,long>>((uint64_t)this, v4, a2 + 1);
  }
}

void sub_1C594843C(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy(v1, *(void **)(v1 + 8));
  *(void *)(v1 + 8) = 0;
  *(void *)(v1 + 16) = 0;
  *(void *)uint64_t v1 = v2;
  _Unwind_Resume(a1);
}

void *PowerBudget::PowerBudget(void *a1, void *a2)
{
  a1[1] = 0;
  *a1 = a1 + 1;
  a1[2] = 0;
  a1[3] = 0;
  a1[3] = 0;
  if (a2 != a1) {
    std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__tree_node<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,void *> *,long>>((uint64_t)a1, (void *)*a2, a2 + 1);
  }
  return a1;
}

{
  a1[1] = 0;
  *a1 = a1 + 1;
  a1[2] = 0;
  a1[3] = 0;
  a1[3] = 0;
  if (a2 != a1) {
    std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__tree_node<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,void *> *,long>>((uint64_t)a1, (void *)*a2, a2 + 1);
  }
  return a1;
}

void sub_1C59484B8(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy(v1, *(void **)(v1 + 8));
  *(void *)(v1 + 8) = 0;
  *(void *)(v1 + 16) = 0;
  *(void *)uint64_t v1 = v2;
  _Unwind_Resume(a1);
}

void PowerBudget::fill(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 24) = 0;
  if (a2 != a1)
  {
    uint64_t v4 = *(void **)a2;
    std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__tree_node<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,void *> *,long>>(a1, v4, (void *)(a2 + 8));
  }
}

void sub_1C5948594(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy(v1, *(void **)(v1 + 8));
  *(void *)(v1 + 8) = 0;
  *(void *)(v1 + 16) = 0;
  *(void *)uint64_t v1 = v2;
  _Unwind_Resume(a1);
}

id PowerBudget::getNSDict(id *this)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];

  this[3] = 0;
  uint64_t v2 = (void (**)(void *))&unk_1F20FEC10;
  v9[0] = &unk_1F20FEC10;
  v9[1] = this;
  unsigned int v10 = v9;
  uint64_t v3 = (id *)*this;
  if (*this == this + 1) {
    goto LABEL_16;
  }
  uint64_t v4 = v9;
  while ((*(unsigned int (**)(void *, uint64_t, id *))(*v4 + 48))(v4, (uint64_t)v3 + 28, v3 + 4))
  {
    uint64_t v5 = (id *)v3[1];
    uint64_t v6 = v3;
    if (v5)
    {
      do
      {
        uint64_t v3 = v5;
        uint64_t v5 = (id *)*v5;
      }
      while (v5);
    }
    else
    {
      do
      {
        uint64_t v3 = (id *)v6[2];
        BOOL v7 = *v3 == v6;
        uint64_t v6 = v3;
      }
      while (!v7);
    }
    if (v3 == this + 1) {
      break;
    }
    uint64_t v4 = v10;
    if (!v10) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
  }
  if (v10 == v9)
  {
    uint64_t v2 = (void (**)(void *))v9[0];
LABEL_16:
    v2[4](v9);
    return this[3];
  }
  if (v10) {
    (*(void (**)(void))(*v10 + 40))();
  }
  return this[3];
}

void sub_1C5948734(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<BOOL ()(abm::BasebandCPMSPowerBudgetScale const&,std::optional<unsigned int> const&)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1C5948748(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<BOOL ()(abm::BasebandCPMSPowerBudgetScale const&,std::optional<unsigned int> const&)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

void PowerBudget::getData(PowerBudget *this@<X0>, PowerBudget *a2@<X8>)
{
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 1) = 0;
  *(void *)a2 = (char *)a2 + 8;
  if (a2 != this) {
    std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__tree_node<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,void *> *,long>>((uint64_t)a2, *(void **)this, (void *)this + 1);
  }
}

void sub_1C59487A0(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t PowerBudget::get(uint64_t **a1, unsigned int a2)
{
  char v2 = a2;
  uint64_t v5 = a1 + 1;
  uint64_t v4 = (unsigned __int8 *)a1[1];
  if (v4)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v6 = v4;
        unsigned int v7 = v4[28];
        if (v7 <= a2) {
          break;
        }
        uint64_t v4 = (unsigned __int8 *)*v6;
        uint64_t v5 = (uint64_t **)v6;
        if (!*v6) {
          goto LABEL_8;
        }
      }
      if (v7 >= a2) {
        break;
      }
      uint64_t v4 = (unsigned __int8 *)v6[1];
      if (!v4)
      {
        uint64_t v5 = (uint64_t **)(v6 + 1);
        goto LABEL_8;
      }
    }
  }
  else
  {
    uint64_t v6 = a1 + 1;
LABEL_8:
    id v8 = v6;
    uint64_t v6 = operator new(0x28uLL);
    *((unsigned char *)v6 + 28) = v2;
    *((unsigned char *)v6 + 32) = 0;
    *((unsigned char *)v6 + 36) = 0;
    *uint64_t v6 = 0;
    v6[1] = 0;
    void v6[2] = v8;
    *uint64_t v5 = v6;
    int v9 = (uint64_t *)**a1;
    unsigned int v10 = v6;
    if (v9)
    {
      *a1 = v9;
      unsigned int v10 = *v5;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v10);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v6[4];
}

uint64_t *PowerBudget::set(uint64_t *result, unsigned int a2, int a3)
{
  if (a2 <= 0xD)
  {
    char v3 = a2;
    if (((1 << a2) & 0x3C07) != 0)
    {
      uint64_t v5 = result;
      unsigned int v7 = (uint64_t **)(result + 1);
      uint64_t v6 = (unsigned __int8 *)result[1];
      if (v6)
      {
        while (1)
        {
          while (1)
          {
            id v8 = v6;
            unsigned int v9 = v6[28];
            if (v9 <= a2) {
              break;
            }
            uint64_t v6 = (unsigned __int8 *)*v8;
            unsigned int v7 = (uint64_t **)v8;
            if (!*v8) {
              goto LABEL_10;
            }
          }
          if (v9 >= a2) {
            break;
          }
          uint64_t v6 = (unsigned __int8 *)v8[1];
          if (!v6)
          {
            unsigned int v7 = (uint64_t **)(v8 + 1);
            goto LABEL_10;
          }
        }
      }
      else
      {
        id v8 = result + 1;
LABEL_10:
        unsigned int v10 = v8;
        id v8 = operator new(0x28uLL);
        *((unsigned char *)v8 + 28) = v3;
        *((unsigned char *)v8 + 32) = 0;
        *((unsigned char *)v8 + 36) = 0;
        *id v8 = 0;
        v8[1] = 0;
        void v8[2] = v10;
        *unsigned int v7 = v8;
        uint64_t v11 = *(void *)*v5;
        uint64_t v12 = v8;
        if (v11)
        {
          *uint64_t v5 = v11;
          uint64_t v12 = *v7;
        }
        uint64_t result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v5[1], v12);
        ++v5[2];
      }
      *((_DWORD *)v8 + 8) = a3;
      *((unsigned char *)v8 + 36) = 1;
    }
  }
  return result;
}

void PowerBudget::asString(int a1@<W0>, char *a2@<X8>)
{
  char v2 = a2;
  switch(a1)
  {
    case 0:
      char v3 = (id *)MEMORY[0x1E4F566B0];
      goto LABEL_5;
    case 1:
      char v3 = (id *)MEMORY[0x1E4F566A0];
      goto LABEL_5;
    case 2:
      char v3 = (id *)MEMORY[0x1E4F566C0];
LABEL_5:
      uint64_t v4 = (const char *)[*v3 UTF8String];
      size_t v5 = strlen(v4);
      if (v5 > 0x7FFFFFFFFFFFFFF7) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      size_t v6 = v5;
      if (v5 >= 0x17)
      {
        uint64_t v7 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v5 | 7) != 0x17) {
          uint64_t v7 = v5 | 7;
        }
        uint64_t v8 = v7 + 1;
        unsigned int v9 = (char *)operator new(v7 + 1);
        *((void *)v2 + 1) = v6;
        *((void *)v2 + 2) = v8 | 0x8000000000000000;
        *(void *)char v2 = v9;
        char v2 = v9;
      }
      else
      {
        v2[23] = v5;
        if (!v5) {
          goto LABEL_13;
        }
      }
      memmove(v2, v4, v6);
LABEL_13:
      v2[v6] = 0;
      return;
    case 10:
      unsigned int v10 = (const char *)[(id)*MEMORY[0x1E4F566D0] UTF8String];
      size_t v11 = strlen(v10);
      if (v11 > 0x7FFFFFFFFFFFFFF7) {
        goto LABEL_56;
      }
      std::string::size_type v12 = v11;
      if (v11 >= 0x17)
      {
        uint64_t v26 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v11 | 7) != 0x17) {
          uint64_t v26 = v11 | 7;
        }
        uint64_t v27 = v26 + 1;
        p_dst = (std::string *)operator new(v26 + 1);
        __dst.__r_.__value_.__l.__size_ = v12;
        __dst.__r_.__value_.__r.__words[2] = v27 | 0x8000000000000000;
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
      }
      else
      {
        *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v11;
        p_dst = &__dst;
        if (!v11) {
          goto LABEL_35;
        }
      }
      memmove(p_dst, v10, v12);
LABEL_35:
      p_dst->__r_.__value_.__s.__data_[v12] = 0;
      char v28 = std::string::append(&__dst, ".", 1uLL);
      long long v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
      v49.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v29;
      v28->__r_.__value_.__l.__size_ = 0;
      v28->__r_.__value_.__r.__words[2] = 0;
      v28->__r_.__value_.__r.__words[0] = 0;
      size_t v30 = strlen((const char *)*MEMORY[0x1E4F4C458]);
      xpc_object_t v31 = std::string::append(&v49, (const std::string::value_type *)*MEMORY[0x1E4F4C458], v30);
      goto LABEL_51;
    case 11:
      uint64_t v14 = (const char *)[(id)*MEMORY[0x1E4F566D0] UTF8String];
      size_t v15 = strlen(v14);
      if (v15 > 0x7FFFFFFFFFFFFFF7) {
        goto LABEL_56;
      }
      std::string::size_type v16 = v15;
      if (v15 >= 0x17)
      {
        uint64_t v32 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v15 | 7) != 0x17) {
          uint64_t v32 = v15 | 7;
        }
        uint64_t v33 = v32 + 1;
        char v17 = (std::string *)operator new(v32 + 1);
        __dst.__r_.__value_.__l.__size_ = v16;
        __dst.__r_.__value_.__r.__words[2] = v33 | 0x8000000000000000;
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v17;
      }
      else
      {
        *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v15;
        char v17 = &__dst;
        if (!v15) {
          goto LABEL_40;
        }
      }
      memmove(v17, v14, v16);
LABEL_40:
      v17->__r_.__value_.__s.__data_[v16] = 0;
      uint64_t v34 = std::string::append(&__dst, ".", 1uLL);
      long long v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
      v49.__r_.__value_.__r.__words[2] = v34->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v35;
      v34->__r_.__value_.__l.__size_ = 0;
      v34->__r_.__value_.__r.__words[2] = 0;
      v34->__r_.__value_.__r.__words[0] = 0;
      size_t v36 = strlen((const char *)*MEMORY[0x1E4F4C440]);
      xpc_object_t v31 = std::string::append(&v49, (const std::string::value_type *)*MEMORY[0x1E4F4C440], v36);
      goto LABEL_51;
    case 12:
      std::string v18 = (const char *)[(id)*MEMORY[0x1E4F566D0] UTF8String];
      size_t v19 = strlen(v18);
      if (v19 > 0x7FFFFFFFFFFFFFF7) {
        goto LABEL_56;
      }
      std::string::size_type v20 = v19;
      if (v19 >= 0x17)
      {
        uint64_t v37 = (v19 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v19 | 7) != 0x17) {
          uint64_t v37 = v19 | 7;
        }
        uint64_t v38 = v37 + 1;
        char v21 = (std::string *)operator new(v37 + 1);
        __dst.__r_.__value_.__l.__size_ = v20;
        __dst.__r_.__value_.__r.__words[2] = v38 | 0x8000000000000000;
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v21;
      }
      else
      {
        *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v19;
        char v21 = &__dst;
        if (!v19) {
          goto LABEL_45;
        }
      }
      memmove(v21, v18, v20);
LABEL_45:
      v21->__r_.__value_.__s.__data_[v20] = 0;
      char v39 = std::string::append(&__dst, ".", 1uLL);
      long long v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
      v49.__r_.__value_.__r.__words[2] = v39->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v40;
      v39->__r_.__value_.__l.__size_ = 0;
      v39->__r_.__value_.__r.__words[2] = 0;
      v39->__r_.__value_.__r.__words[0] = 0;
      size_t v41 = strlen((const char *)*MEMORY[0x1E4F4C448]);
      xpc_object_t v31 = std::string::append(&v49, (const std::string::value_type *)*MEMORY[0x1E4F4C448], v41);
      goto LABEL_51;
    case 13:
      long long v22 = (const char *)[(id)*MEMORY[0x1E4F566D0] UTF8String];
      size_t v23 = strlen(v22);
      if (v23 > 0x7FFFFFFFFFFFFFF7) {
LABEL_56:
      }
        std::string::__throw_length_error[abi:ne180100]();
      std::string::size_type v24 = v23;
      if (v23 >= 0x17)
      {
        uint64_t v42 = (v23 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v23 | 7) != 0x17) {
          uint64_t v42 = v23 | 7;
        }
        uint64_t v43 = v42 + 1;
        char v25 = (std::string *)operator new(v42 + 1);
        __dst.__r_.__value_.__l.__size_ = v24;
        __dst.__r_.__value_.__r.__words[2] = v43 | 0x8000000000000000;
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v25;
      }
      else
      {
        *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v23;
        char v25 = &__dst;
        if (!v23) {
          goto LABEL_50;
        }
      }
      memmove(v25, v22, v24);
LABEL_50:
      v25->__r_.__value_.__s.__data_[v24] = 0;
      uint64_t v44 = std::string::append(&__dst, ".", 1uLL);
      long long v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
      v49.__r_.__value_.__r.__words[2] = v44->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v45;
      v44->__r_.__value_.__l.__size_ = 0;
      v44->__r_.__value_.__r.__words[2] = 0;
      v44->__r_.__value_.__r.__words[0] = 0;
      size_t v46 = strlen((const char *)*MEMORY[0x1E4F4C450]);
      xpc_object_t v31 = std::string::append(&v49, (const std::string::value_type *)*MEMORY[0x1E4F4C450], v46);
LABEL_51:
      long long v47 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
      *((void *)v2 + 2) = *((void *)&v31->__r_.__value_.__l + 2);
      *(_OWORD *)char v2 = v47;
      v31->__r_.__value_.__l.__size_ = 0;
      v31->__r_.__value_.__r.__words[2] = 0;
      v31->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v49.__r_.__value_.__l.__data_);
        if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          return;
        }
      }
      else if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        return;
      }
      operator delete(__dst.__r_.__value_.__l.__data_);
      return;
    default:
      a2[23] = 7;
      strcpy(a2, "Unknown");
      return;
  }
}

void sub_1C5948EA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
  {
    operator delete(__p);
    if ((a15 & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else if ((a15 & 0x80000000) == 0)
  {
LABEL_3:
    _Unwind_Resume(a1);
  }
  operator delete(a10);
  _Unwind_Resume(a1);
}

void sub_1C5948F1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    JUMPOUT(0x1C5948F0CLL);
  }
  JUMPOUT(0x1C5948EFCLL);
}

uint64_t PowerBudget::to_string@<X0>(PowerBudget *this@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  unint64_t v30 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v29[7] = v4;
  v29[8] = v4;
  void v29[5] = v4;
  v29[6] = v4;
  v29[3] = v4;
  void v29[4] = v4;
  v29[1] = v4;
  v29[2] = v4;
  long long v28 = v4;
  v29[0] = v4;
  *(_OWORD *)std::string __p = v4;
  long long v27 = v4;
  long long v24 = v4;
  *(_OWORD *)__src = v4;
  long long v22 = v4;
  long long v23 = v4;
  long long v21 = v4;
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v21);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v22, (uint64_t)"{ ", 2);
  size_t v5 = (void (**)(void *))&unk_1F20FEC90;
  v31[0] = &unk_1F20FEC90;
  v31[1] = &v21;
  uint64_t v32 = v31;
  uint64_t v8 = *(char **)this;
  size_t v6 = (char *)this + 8;
  uint64_t v7 = v8;
  if (v8 == v6) {
    goto LABEL_16;
  }
  unsigned int v9 = v31;
  while ((*(unsigned int (**)(void *, char *, void *))(*v9 + 48))(v9, v7 + 28, (void *)v7 + 4))
  {
    unsigned int v10 = (char *)*((void *)v7 + 1);
    size_t v11 = v7;
    if (v10)
    {
      do
      {
        uint64_t v7 = v10;
        unsigned int v10 = *(char **)v10;
      }
      while (v10);
    }
    else
    {
      do
      {
        uint64_t v7 = (char *)*((void *)v11 + 2);
        BOOL v12 = *(void *)v7 == (void)v11;
        size_t v11 = v7;
      }
      while (!v12);
    }
    if (v7 == v6) {
      break;
    }
    unsigned int v9 = v32;
    if (!v32) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
  }
  if (v32 == v31)
  {
    size_t v5 = (void (**)(void *))v31[0];
LABEL_16:
    v5[4](v31);
    goto LABEL_17;
  }
  if (v32) {
    (*(void (**)(void *))(*v32 + 40))(v32);
  }
LABEL_17:
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v22, (uint64_t)"}", 1);
  if ((BYTE8(v28) & 0x10) != 0)
  {
    uint64_t v14 = (unsigned char *)v28;
    if ((void *)v28 < __src[1])
    {
      *(void **)&long long v28 = __src[1];
      uint64_t v14 = __src[1];
    }
    size_t v15 = __src[0];
    size_t v13 = v14 - (char *)__src[0];
    if ((unint64_t)(v14 - (char *)__src[0]) >= 0x7FFFFFFFFFFFFFF8) {
      goto LABEL_34;
    }
  }
  else
  {
    if ((BYTE8(v28) & 8) == 0)
    {
      size_t v13 = 0;
      a2[23] = 0;
      goto LABEL_30;
    }
    size_t v15 = (const void *)*((void *)&v23 + 1);
    size_t v13 = *((void *)&v24 + 1) - *((void *)&v23 + 1);
    if (*((void *)&v24 + 1) - *((void *)&v23 + 1) >= 0x7FFFFFFFFFFFFFF8uLL) {
LABEL_34:
    }
      std::string::__throw_length_error[abi:ne180100]();
  }
  if (v13 >= 0x17)
  {
    uint64_t v16 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v13 | 7) != 0x17) {
      uint64_t v16 = v13 | 7;
    }
    uint64_t v17 = v16 + 1;
    std::string v18 = operator new(v16 + 1);
    *((void *)a2 + 1) = v13;
    *((void *)a2 + 2) = v17 | 0x8000000000000000;
    *(void *)a2 = v18;
    a2 = v18;
    goto LABEL_29;
  }
  a2[23] = v13;
  if (v13) {
LABEL_29:
  }
    memmove(a2, v15, v13);
LABEL_30:
  a2[v13] = 0;
  *(void *)&long long v21 = *MEMORY[0x1E4FBA408];
  uint64_t v19 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)&v21 + *(void *)(v21 - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  *(void *)&long long v22 = v19;
  *((void *)&v22 + 1) = MEMORY[0x1E4FBA470] + 16;
  if (SHIBYTE(v27) < 0) {
    operator delete(__p[1]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1C8791FB0](v29);
}

void sub_1C5949324(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1C5949338(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::function<BOOL ()(abm::BasebandCPMSPowerBudgetScale const&,std::optional<unsigned int> const&)>::~function((void *)(v9 - 88));
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void *std::__function::__func<PowerBudget::getNSDict(void)::$_0,std::allocator<PowerBudget::getNSDict(void)::$_0>,BOOL ()(abm::BasebandCPMSPowerBudgetScale const&,std::optional<unsigned int> const&)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1F20FEC10;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<PowerBudget::getNSDict(void)::$_0,std::allocator<PowerBudget::getNSDict(void)::$_0>,BOOL ()(abm::BasebandCPMSPowerBudgetScale const&,std::optional<unsigned int> const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F20FEC10;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<PowerBudget::getNSDict(void)::$_0,std::allocator<PowerBudget::getNSDict(void)::$_0>,BOOL ()(abm::BasebandCPMSPowerBudgetScale const&,std::optional<unsigned int> const&)>::operator()(uint64_t a1, char *a2, unsigned int *a3)
{
  if (*((unsigned char *)a3 + 4))
  {
    uint64_t v5 = *(void *)(a1 + 8);
    id v6 = *(id *)(v5 + 24);
    if (!v6)
    {
      id v6 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
      *(void *)(v5 + 24) = v6;
      unint64_t v7 = *a2;
      if (v7 > 2) {
        return 1;
      }
      goto LABEL_4;
    }
    unint64_t v7 = *a2;
    if (v7 <= 2) {
LABEL_4:
    }
      [v6 setValue:[NSNumber numberWithInt:*a3] forKey:**((void **)&unk_1E6518388 + v7)];
  }
  return 1;
}

uint64_t std::__function::__func<PowerBudget::getNSDict(void)::$_0,std::allocator<PowerBudget::getNSDict(void)::$_0>,BOOL ()(abm::BasebandCPMSPowerBudgetScale const&,std::optional<unsigned int> const&)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN11PowerBudget9getNSDictEvE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"ZN11PowerBudget9getNSDictEvE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN11PowerBudget9getNSDictEvE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN11PowerBudget9getNSDictEvE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *std::__function::__func<PowerBudget::getNSDict(void)::$_0,std::allocator<PowerBudget::getNSDict(void)::$_0>,BOOL ()(abm::BasebandCPMSPowerBudgetScale const&,std::optional<unsigned int> const&)>::target_type()
{
}

void *std::__function::__func<PowerBudget::to_string(void)::$_0,std::allocator<PowerBudget::to_string(void)::$_0>,BOOL ()(abm::BasebandCPMSPowerBudgetScale const&,std::optional<unsigned int> const&)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1F20FEC90;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<PowerBudget::to_string(void)::$_0,std::allocator<PowerBudget::to_string(void)::$_0>,BOOL ()(abm::BasebandCPMSPowerBudgetScale const&,std::optional<unsigned int> const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F20FEC90;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<PowerBudget::to_string(void)::$_0,std::allocator<PowerBudget::to_string(void)::$_0>,BOOL ()(abm::BasebandCPMSPowerBudgetScale const&,std::optional<unsigned int> const&)>::operator()(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  if (!*(unsigned char *)(a3 + 4)) {
    return 1;
  }
  uint64_t v3 = (void *)(*(void *)(a1 + 8) + 16);
  PowerBudget::asString(*a2, (char *)__p);
  long long v4 = (v10 & 0x80u) == 0 ? __p : (void **)__p[0];
  uint64_t v5 = (v10 & 0x80u) == 0 ? (void *)v10 : __p[1];
  id v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, (uint64_t)v5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)" = ", 3);
  unint64_t v7 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)", ", 2);
  if (((char)v10 & 0x80000000) == 0) {
    return 1;
  }
  operator delete(__p[0]);
  return 1;
}

void sub_1C5949634(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<PowerBudget::to_string(void)::$_0,std::allocator<PowerBudget::to_string(void)::$_0>,BOOL ()(abm::BasebandCPMSPowerBudgetScale const&,std::optional<unsigned int> const&)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZNK11PowerBudget9to_stringEvE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"ZNK11PowerBudget9to_stringEvE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK11PowerBudget9to_stringEvE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK11PowerBudget9to_stringEvE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *std::__function::__func<PowerBudget::to_string(void)::$_0,std::allocator<PowerBudget::to_string(void)::$_0>,BOOL ()(abm::BasebandCPMSPowerBudgetScale const&,std::optional<unsigned int> const&)>::target_type()
{
}

void sub_1C59498AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C59498DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C5949B28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va2, a4);
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v8 = va_arg(va1, const void *);
  va_copy(va2, va1);
  unsigned __int8 v10 = va_arg(va2, const void *);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)va);
  ctu::cf::CFSharedRef<__CFString const>::~CFSharedRef((const void **)va1);
  ctu::cf::CFSharedRef<__CFString const>::~CFSharedRef((const void **)va2);

  _Unwind_Resume(a1);
}

void sub_1C5949C34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, const void *a10)
{
  ctu::cf::CFSharedRef<__CFString const>::~CFSharedRef(&a9);
  ctu::cf::CFSharedRef<__CFString const>::~CFSharedRef(&a10);

  _Unwind_Resume(a1);
}

void *__copy_helper_atomic_property_(void **a1, const void **a2)
{
  *a1 = _Block_copy(*a2);
  uint64_t result = _Block_copy(a2[1]);
  a1[1] = result;
  return result;
}

uint64_t __assign_helper_atomic_property_(uint64_t a1, const void **a2)
{
  long long v4 = _Block_copy(*a2);
  uint64_t v5 = *(void **)a1;
  *(void *)a1 = v4;

  *(void *)(a1 + 8) = _Block_copy(a2[1]);

  return MEMORY[0x1F41817F8]();
}

void sub_1C5949D90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  _Unwind_Resume(a1);
}

const char *CoreAccessoriesDelegate::getName(CoreAccessoriesDelegate *this)
{
  return "CoreAccessories.delegate";
}

uint64_t CoreAccessoriesDelegate::create@<X0>(void *a1@<X0>, NSObject **a2@<X1>, std::__shared_weak_count_vtbl **a3@<X8>)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  id v6 = (std::__shared_weak_count_vtbl *)operator new(0x90uLL);
  uint64_t v7 = a1[3];
  if (!v7) {
    goto LABEL_4;
  }
  if ((void *)v7 != a1)
  {
    uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 16))(v7);
LABEL_4:
    uint64_t v19 = (void *)v7;
    goto LABEL_6;
  }
  uint64_t v19 = v18;
  (*(void (**)(void *, void *))(*a1 + 24))(a1, v18);
LABEL_6:
  uint64_t v8 = *a2;
  size_t v15 = v8;
  if (v8) {
    dispatch_retain(v8);
  }
  CoreAccessoriesDelegate::CoreAccessoriesDelegate((uint64_t)v6, v18, &v15);
  size_t v11 = (std::__shared_weak_count *)operator new(0x20uLL);
  v11->__shared_owners_ = 0;
  p_shared_owners = &v11->__shared_owners_;
  v11->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20FEE38;
  v11->__shared_weak_owners_ = 0;
  v11[1].__vftable = v6;
  on_zero_shared = (std::__shared_weak_count *)v6->__on_zero_shared;
  if (!on_zero_shared)
  {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v6->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v6;
    v6->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v11;
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  if (on_zero_shared->__shared_owners_ == -1)
  {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v6->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v6;
    v6->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v11;
    std::__shared_weak_count::__release_weak(on_zero_shared);
    if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL))
    {
LABEL_13:
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
LABEL_14:
  uint64_t v16 = v6;
  uint64_t v17 = v11;
  if (v8) {
    dispatch_release(v8);
  }
  if (v19 == v18)
  {
    (*(void (**)(void *))(v18[0] + 32))(v18);
  }
  else if (v19)
  {
    (*(void (**)(void *, uint64_t, uint64_t))(*v19 + 40))(v19, v9, v10);
  }
  uint64_t result = (*((uint64_t (**)(std::__shared_weak_count_vtbl *))v6->~__shared_weak_count + 7))(v6);
  *a3 = v6;
  a3[1] = (std::__shared_weak_count_vtbl *)v11;
  return result;
}

void sub_1C594A0C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12)
{
  operator delete(v12);
  std::shared_ptr<ABMServer>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  _Unwind_Resume(a1);
}

uint64_t CoreAccessoriesDelegate::CoreAccessoriesDelegate(uint64_t a1, void *a2, NSObject **a3)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  *(void *)a1 = &unk_1F20FED10;
  uint64_t v5 = (void *)a2[3];
  if (v5)
  {
    if (v5 == a2)
    {
      BOOL v12 = v11;
      (*(void (**)(void *, void *))(*a2 + 24))(a2, v11);
    }
    else
    {
      BOOL v12 = (void *)(*(uint64_t (**)(void *))(*v5 + 16))(v5);
    }
  }
  else
  {
    BOOL v12 = 0;
  }
  id v6 = *a3;
  uint64_t v10 = v6;
  if (v6) {
    dispatch_retain(v6);
  }
  uint64_t v7 = (char *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
  AccessoriesDelegateBase::AccessoriesDelegateBase(a1, (uint64_t)v11, &v10, v7);
  if (v6) {
    dispatch_release(v6);
  }
  if (v12 == v11)
  {
    (*(void (**)(void *))(v11[0] + 32))(v11);
  }
  else if (v12)
  {
    (*(void (**)(void *))(*v12 + 40))(v12);
  }
  *(void *)a1 = &unk_1F20FED10;
  uint64_t v8 = operator new(0x20uLL);
  v8[1] = 0;
  void v8[2] = 0;
  *uint64_t v8 = &unk_1F20FEE88;
  v8[3] = 0;
  *(void *)(a1 + 88) = v8 + 3;
  *(void *)(a1 + 96) = v8;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_DWORD *)(a1 + 136) = 1065353216;
  return a1;
}

void sub_1C594A374(_Unwind_Exception *a1)
{
  AccessoriesDelegateBase::~AccessoriesDelegateBase(v1);
  _Unwind_Resume(a1);
}

void sub_1C594A388(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (v10) {
    dispatch_release(v10);
  }
  std::function<void ()(ctu::cf::CFSharedRef<__CFError>,std::vector<abm::AccessoryInfo>)>::~function(&a10);
  _Unwind_Resume(a1);
}

void CoreAccessoriesDelegate::~CoreAccessoriesDelegate(CoreAccessoriesDelegate *this)
{
  *(void *)this = &unk_1F20FED10;
  uint64_t v2 = (void **)*((void *)this + 15);
  if (v2)
  {
    do
    {
      id v6 = (void **)*v2;
      if (*((char *)v2 + 39) < 0) {
        operator delete(v2[2]);
      }
      operator delete(v2);
      uint64_t v2 = v6;
    }
    while (v6);
  }
  unint64_t v3 = (void *)*((void *)this + 13);
  *((void *)this + 13) = 0;
  if (v3) {
    operator delete(v3);
  }
  long long v4 = (std::__shared_weak_count *)*((void *)this + 12);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    uint64_t v5 = this;
  }
  else
  {
    uint64_t v5 = this;
  }
  AccessoriesDelegateBase::~AccessoriesDelegateBase(v5);
}

{
  void *v1;
  uint64_t vars8;

  CoreAccessoriesDelegate::~CoreAccessoriesDelegate(this);

  operator delete(v1);
}

void CoreAccessoriesDelegate::init(CoreAccessoriesDelegate *this)
{
  v1[0] = MEMORY[0x1E4F143A8];
  v1[1] = 3221225472;
  v1[2] = ___ZN23CoreAccessoriesDelegate4initEv_block_invoke;
  v1[3] = &__block_descriptor_40_e5_v8__0l;
  v1[4] = this;
  ctu::SharedSynchronizable<AccessoriesDelegateBase>::execute_wrapped((uint64_t *)this + 1, (uint64_t)v1);
}

void ___ZN23CoreAccessoriesDelegate4initEv_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  uint64_t v2 = (std::__shared_weak_count *)v1[2];
  if (!v2 || (uint64_t v3 = v1[1], (v4 = std::__shared_weak_count::lock(v2)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v5 = v4;
  p_shared_weak_owners = &v4->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v5);
  }
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 3321888768;
  aBlock[2] = ___ZN23CoreAccessoriesDelegate4initEv_block_invoke_2;
  aBlock[3] = &__block_descriptor_56_ea8_32c49_ZTSKZZN23CoreAccessoriesDelegate4initEvEUb_E3__0_e160_v40__0_CFSharedRef_const___CFString______CFString__8_CFSharedRef_const___CFString______CFString__16i24i28_CFSharedRef_const___CFDictionary______CFDictionary__32l;
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  void aBlock[4] = v1;
  void aBlock[5] = v3;
  uint64_t v20 = v5;
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  uint64_t v7 = _Block_copy(aBlock);
  std::__shared_weak_count::__release_weak(v5);
  v17[0] = MEMORY[0x1E4F143A8];
  v17[1] = 3321888768;
  dispatch_object_t v17[2] = ___ZN23CoreAccessoriesDelegate4initEv_block_invoke_111;
  v17[3] = &__block_descriptor_56_ea8_32c49_ZTSKZZN23CoreAccessoriesDelegate4initEvEUb_E3__1_e52_v16__0_CFSharedRef_const___CFString______CFString__8l;
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  v17[4] = v1;
  v17[5] = v3;
  std::string v18 = v5;
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  uint64_t v8 = _Block_copy(v17);
  std::__shared_weak_count::__release_weak(v5);
  uint64_t v9 = (void **)v1[11];
  uint64_t v10 = _Block_copy(v7);
  size_t v11 = _Block_copy(v8);
  BOOL v12 = [AccessoryDetection alloc];
  uint64_t v13 = _Block_copy(v10);
  uint64_t v14 = _Block_copy(v11);
  if (v12)
  {
    uint64_t v15 = -[AccessoryDetection initWithCallback:](v12, "initWithCallback:", v13, v14);
  }
  else
  {

    uint64_t v15 = 0;
  }
  uint64_t v16 = *v9;
  *uint64_t v9 = (void *)v15;

  if (v18) {
    std::__shared_weak_count::__release_weak(v18);
  }
  if (v20) {
    std::__shared_weak_count::__release_weak(v20);
  }

  std::__shared_weak_count::__release_weak(v5);
}

void sub_1C594A768(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,std::__shared_weak_count *a22)
{
  if (a15)
  {
    std::__shared_weak_count::__release_weak(a15);
    long long v28 = a22;
    if (!a22)
    {
LABEL_3:

      std::__shared_weak_count::__release_weak(v22);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    long long v28 = a22;
    if (!a22) {
      goto LABEL_3;
    }
  }
  std::__shared_weak_count::__release_weak(v28);

  std::__shared_weak_count::__release_weak(v22);
  _Unwind_Resume(a1);
}

void ___ZN23CoreAccessoriesDelegate4initEv_block_invoke_2(void *a1, const void **a2, const void **a3, int a4, int a5, const void **a6)
{
  uint64_t v7 = (std::__shared_weak_count *)a1[6];
  if (v7)
  {
    uint64_t v13 = a1[4];
    uint64_t v14 = std::__shared_weak_count::lock(v7);
    if (v14)
    {
      uint64_t v15 = v14;
      if (a1[5])
      {
        v19[0] = MEMORY[0x1E4F143A8];
        v19[1] = 3321888768;
        void v19[2] = ___ZZZN23CoreAccessoriesDelegate4initEvEUb_ENK3__0clEN3ctu2cf11CFSharedRefIK10__CFStringEES6_27ACCEndpoint_TransportType_t20ACCConnection_Type_tNS3_IK14__CFDictionaryEE_block_invoke;
        v19[3] = &__block_descriptor_72_ea8_40c41_ZTSN3ctu2cf11CFSharedRefIK10__CFStringEE48c41_ZTSN3ctu2cf11CFSharedRefIK10__CFStringEE56c45_ZTSN3ctu2cf11CFSharedRefIK14__CFDictionaryEE_e5_v8__0l;
        uint64_t v16 = *a2;
        void v19[4] = v13;
        CFTypeRef v20 = v16;
        if (v16) {
          CFRetain(v16);
        }
        uint64_t v17 = *a3;
        CFTypeRef v21 = v17;
        if (v17) {
          CFRetain(v17);
        }
        std::string v18 = *a6;
        CFTypeRef cf = v18;
        if (v18) {
          CFRetain(v18);
        }
        int v23 = a4;
        int v24 = a5;
        ctu::SharedSynchronizable<AccessoriesDelegateBase>::execute_wrapped((uint64_t *)(v13 + 8), (uint64_t)v19);
        if (cf) {
          CFRelease(cf);
        }
        if (v21) {
          CFRelease(v21);
        }
        if (v20) {
          CFRelease(v20);
        }
      }
      if (!atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
  }
}

uint64_t __copy_helper_block_ea8_32c49_ZTSKZZN23CoreAccessoriesDelegate4initEvEUb_E3__0(uint64_t result, uint64_t a2)
{
  *(_OWORD *)(result + 32) = *(_OWORD *)(a2 + 32);
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_ea8_32c49_ZTSKZZN23CoreAccessoriesDelegate4initEvEUb_E3__0(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void ___ZN23CoreAccessoriesDelegate4initEv_block_invoke_111(void *a1, const void **a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    uint64_t v5 = a1[4];
    id v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      uint64_t v7 = v6;
      if (a1[5])
      {
        v9[0] = MEMORY[0x1E4F143A8];
        v9[1] = 3321888768;
        v9[2] = ___ZZZN23CoreAccessoriesDelegate4initEvEUb_ENK3__1clEN3ctu2cf11CFSharedRefIK10__CFStringEE_block_invoke;
        void v9[3] = &__block_descriptor_48_ea8_40c41_ZTSN3ctu2cf11CFSharedRefIK10__CFStringEE_e5_v8__0l;
        uint64_t v8 = *a2;
        v9[4] = v5;
        CFTypeRef cf = v8;
        if (v8) {
          CFRetain(v8);
        }
        ctu::SharedSynchronizable<AccessoriesDelegateBase>::execute_wrapped((uint64_t *)(v5 + 8), (uint64_t)v9);
        if (cf) {
          CFRelease(cf);
        }
      }
      if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

uint64_t __copy_helper_block_ea8_32c49_ZTSKZZN23CoreAccessoriesDelegate4initEvEUb_E3__1(uint64_t result, uint64_t a2)
{
  *(_OWORD *)(result + 32) = *(_OWORD *)(a2 + 32);
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_ea8_32c49_ZTSKZZN23CoreAccessoriesDelegate4initEvEUb_E3__1(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void CoreAccessoriesDelegate::start(CoreAccessoriesDelegate *this)
{
  v1[0] = MEMORY[0x1E4F143A8];
  v1[1] = 3221225472;
  v1[2] = ___ZN23CoreAccessoriesDelegate5startEv_block_invoke;
  v1[3] = &__block_descriptor_40_e5_v8__0l;
  v1[4] = this;
  ctu::SharedSynchronizable<AccessoriesDelegateBase>::execute_wrapped((uint64_t *)this + 1, (uint64_t)v1);
}

void ___ZN23CoreAccessoriesDelegate5startEv_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  int v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = *(NSObject **)(v1 + 40);
  BOOL v4 = os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);
  if (v2)
  {
    if (v4)
    {
      *(_WORD *)uint64_t v5 = 0;
      _os_log_impl(&dword_1C5767000, v3, OS_LOG_TYPE_DEFAULT, "#I Already started", v5, 2u);
    }
  }
  else
  {
    if (v4)
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1C5767000, v3, OS_LOG_TYPE_DEFAULT, "#I Starting", buf, 2u);
    }
    *(unsigned char *)(v1 + 80) = 1;
    [**(id **)(v1 + 88) start];
  }
}

void CoreAccessoriesDelegate::stop(CoreAccessoriesDelegate *this)
{
  v1[0] = MEMORY[0x1E4F143A8];
  v1[1] = 3221225472;
  v1[2] = ___ZN23CoreAccessoriesDelegate4stopEv_block_invoke;
  v1[3] = &__block_descriptor_40_e5_v8__0l;
  v1[4] = this;
  ctu::SharedSynchronizable<AccessoriesDelegateBase>::execute_wrapped((uint64_t *)this + 1, (uint64_t)v1);
}

void ___ZN23CoreAccessoriesDelegate4stopEv_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  int v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = *(NSObject **)(v1 + 40);
  BOOL v4 = os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);
  if (v2)
  {
    if (v4)
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1C5767000, v3, OS_LOG_TYPE_DEFAULT, "#I Stopping", buf, 2u);
    }
    *(unsigned char *)(v1 + 80) = 0;
    [**(id **)(v1 + 88) stop];
    if (*(void *)(v1 + 128))
    {
      uint64_t v5 = *(void ***)(v1 + 120);
      if (v5)
      {
        do
        {
          uint64_t v8 = (void **)*v5;
          if (*((char *)v5 + 39) < 0) {
            operator delete(v5[2]);
          }
          operator delete(v5);
          uint64_t v5 = v8;
        }
        while (v8);
      }
      *(void *)(v1 + 120) = 0;
      uint64_t v6 = *(void *)(v1 + 112);
      if (v6)
      {
        for (uint64_t i = 0; i != v6; ++i)
          *(void *)(*(void *)(v1 + 104) + 8 * i) = 0;
      }
      *(void *)(v1 + 128) = 0;
    }
  }
  else if (v4)
  {
    v9[0] = 0;
    _os_log_impl(&dword_1C5767000, v3, OS_LOG_TYPE_DEFAULT, "#I Already stopped", (uint8_t *)v9, 2u);
  }
}

void ___ZZZN23CoreAccessoriesDelegate4initEvEUb_ENK3__0clEN3ctu2cf11CFSharedRefIK10__CFStringEES6_27ACCEndpoint_TransportType_t20ACCConnection_Type_tNS3_IK14__CFDictionaryEE_block_invoke(uint64_t a1)
{
  int v2 = 0;
  uint64_t v79 = *MEMORY[0x1E4F143B8];
  CFTypeRef v74 = 0;
  uint64_t v3 = *(void **)(a1 + 32);
  if (*(void *)(a1 + 40)) {
    BOOL v4 = ctu::SharedRef<__CFString const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFString const>::get;
  }
  else {
    BOOL v4 = 0;
  }
  if (v4
    || (HIBYTE(v73[2]) = 21,
        strcpy((char *)v73, "Invalid endpoint UUID"),
        (*(void (**)(std::string *__return_ptr, void *, void **, uint64_t))(*v3 + 48))(&buf, v3, v73, 5),
        int v2 = (const void *)buf.__r_.__value_.__r.__words[0],
        CFTypeRef v74 = (CFTypeRef)buf.__r_.__value_.__r.__words[0],
        buf.__r_.__value_.__r.__words[0] = 0,
        (SHIBYTE(v73[2]) & 0x80000000) == 0))
  {
    std::string::size_type v5 = *(void *)(a1 + 48);
    if (v5) {
      uint64_t v6 = ctu::SharedRef<__CFString const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFString const>::get;
    }
    else {
      uint64_t v6 = 0;
    }
    if (v6) {
      goto LABEL_10;
    }
LABEL_22:
    xpc_object_t v71 = (char *)operator new(0x19uLL);
    long long v72 = xmmword_1C599E880;
    strcpy(v71, "Invalid connection UUID");
    (*(void (**)(std::string *__return_ptr, void *, char **, uint64_t))(*v3 + 48))(&buf, v3, &v71, 5);
    std::string::size_type v14 = buf.__r_.__value_.__r.__words[0];
    CFTypeRef v74 = (CFTypeRef)buf.__r_.__value_.__r.__words[0];
    buf.__r_.__value_.__r.__words[0] = 0;
    if (v2)
    {
      CFRelease(v2);
      if (buf.__r_.__value_.__r.__words[0]) {
        CFRelease(buf.__r_.__value_.__l.__data_);
      }
    }
    if (SHIBYTE(v72) < 0)
    {
      operator delete(v71);
      if (*(void *)(a1 + 56)) {
        uint64_t v16 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
      }
      else {
        uint64_t v16 = 0;
      }
      if (v16) {
        goto LABEL_42;
      }
    }
    else
    {
      if (*(void *)(a1 + 56)) {
        uint64_t v15 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
      }
      else {
        uint64_t v15 = 0;
      }
      if (v15) {
        goto LABEL_42;
      }
    }
    int v2 = (const void *)v14;
    goto LABEL_36;
  }
  operator delete(v73[0]);
  std::string::size_type v5 = *(void *)(a1 + 48);
  if (v5) {
    uint64_t v13 = ctu::SharedRef<__CFString const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFString const>::get;
  }
  else {
    uint64_t v13 = 0;
  }
  if (!v13) {
    goto LABEL_22;
  }
LABEL_10:
  uint64_t v7 = *(void *)(a1 + 56);
  if (v7) {
    uint64_t v8 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
  }
  else {
    uint64_t v8 = 0;
  }
  if (!v8)
  {
LABEL_36:
    std::string __p = operator new(0x20uLL);
    long long v70 = xmmword_1C599E720;
    strcpy((char *)__p, "Invalid connection properties");
    (*(void (**)(std::string *__return_ptr, void *, void **, uint64_t))(*v3 + 48))(&buf, v3, &__p, 5);
    CFTypeRef v74 = (CFTypeRef)buf.__r_.__value_.__r.__words[0];
    buf.__r_.__value_.__r.__words[0] = 0;
    if (v2)
    {
      CFRelease(v2);
      if (buf.__r_.__value_.__r.__words[0]) {
        CFRelease(buf.__r_.__value_.__l.__data_);
      }
    }
    if ((SHIBYTE(v70) & 0x80000000) == 0) {
      goto LABEL_42;
    }
    uint64_t v17 = (char *)__p;
    goto LABEL_41;
  }
  if (!v4) {
    goto LABEL_42;
  }
  uint64_t v9 = v3[5];
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    std::string::size_type v10 = *(void *)(a1 + 40);
    uint64_t v11 = *(unsigned int *)(a1 + 64);
    if (v11 > 0xD) {
      BOOL v12 = "Unknown";
    }
    else {
      BOOL v12 = transportTypeToString(ACCEndpoint_TransportType_t)::transportTypes[v11];
    }
    LODWORD(buf.__r_.__value_.__l.__data_) = 138413058;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v10;
    WORD2(buf.__r_.__value_.__r.__words[1]) = 2112;
    *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v5;
    HIWORD(buf.__r_.__value_.__r.__words[2]) = 2080;
    xpc_object_t v76 = v12;
    __int16 v77 = 2112;
    uint64_t v78 = v7;
    _os_log_impl(&dword_1C5767000, v9, OS_LOG_TYPE_DEFAULT, "#I Accessory attached:\n    endpoint UUID:      %@\n    connection UUID:    %@\n    transport:         %s\n    properties:        \n%@", (uint8_t *)&buf, 0x2Au);
  }
  int v26 = *(_DWORD *)(a1 + 64);
  if (v26 == 13)
  {
    uint64_t v33 = *(const void **)(a1 + 56);
    unint64_t v65 = v33;
    if (v33)
    {
      CFRetain(v33);
      LODWORD(buf.__r_.__value_.__l.__data_) = 0;
      if (ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get)
      {
        char v39 = (const void *)*MEMORY[0x1E4F5B1D0];
        if (CFDictionaryContainsKey((CFDictionaryRef)v33, (const void *)*MEMORY[0x1E4F5B1D0]))
        {
          CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)v33, v39);
          CFNumberRef v20 = Value;
          if (!Value)
          {
            uint64_t v42 = v33;
            __int16 v18 = 0;
            __int16 v19 = 0;
            goto LABEL_103;
          }
          CFTypeID v41 = CFGetTypeID(Value);
          if (v41 == CFNumberGetTypeID() && CFNumberGetValue(v20, kCFNumberIntType, &buf))
          {
            uint64_t v42 = v33;
            __int16 v18 = 0;
            __int16 v22 = -1;
            __int16 v43 = 2056;
            __int16 v44 = 3;
            __int16 v19 = 0;
            LOWORD(v20) = 0;
            __int16 v21 = 0;
            char v45 = 0;
            switch(buf.__r_.__value_.__s.__data_[0])
            {
              case 0x39:
              case 0x93:
                __int16 v44 = 0;
                __int16 v18 = 3;
                __int16 v43 = 2055;
                goto LABEL_167;
              case 0x3A:
              case 0x3B:
              case 0x3C:
              case 0x3D:
              case 0x3E:
              case 0x3F:
              case 0x40:
              case 0x41:
              case 0x46:
              case 0x47:
              case 0x48:
              case 0x49:
              case 0x4A:
              case 0x4B:
              case 0x4F:
              case 0x50:
              case 0x51:
              case 0x52:
              case 0x59:
              case 0x5A:
              case 0x5B:
              case 0x5C:
              case 0x5D:
              case 0x5E:
              case 0x5F:
              case 0x60:
              case 0x61:
              case 0x62:
              case 0x63:
              case 0x64:
              case 0x65:
              case 0x66:
              case 0x67:
              case 0x68:
              case 0x69:
              case 0x6A:
              case 0x6B:
              case 0x6C:
              case 0x6D:
              case 0x6E:
              case 0x6F:
              case 0x70:
              case 0x71:
              case 0x73:
              case 0x74:
              case 0x75:
              case 0x76:
              case 0x77:
              case 0x78:
              case 0x79:
              case 0x7A:
              case 0x7B:
              case 0x7C:
              case 0x7D:
              case 0x7E:
              case 0x7F:
              case 0x82:
              case 0x83:
              case 0x84:
              case 0x86:
              case 0x87:
              case 0x89:
              case 0x8A:
              case 0x8B:
              case 0x8C:
              case 0x8D:
              case 0x8E:
              case 0x8F:
              case 0x90:
              case 0x91:
              case 0x92:
                break;
              case 0x42:
                __int16 v44 = 0;
                __int16 v18 = 3;
                __int16 v43 = 2053;
                goto LABEL_167;
              case 0x43:
              case 0x44:
              case 0x45:
              case 0x85:
                __int16 v18 = 0;
                __int16 v43 = 2050;
                goto LABEL_167;
              case 0x4C:
              case 0x4D:
              case 0x4E:
                __int16 v18 = 0;
                __int16 v43 = 2049;
                goto LABEL_166;
              case 0x53:
              case 0x54:
              case 0x55:
              case 0x81:
                __int16 v18 = 0;
                __int16 v43 = 2048;
                __int16 v44 = 2;
                goto LABEL_167;
              case 0x56:
                __int16 v18 = 0;
                __int16 v43 = 2051;
                goto LABEL_166;
              case 0x57:
                __int16 v18 = 0;
                __int16 v43 = 2052;
LABEL_166:
                __int16 v44 = 1;
                goto LABEL_167;
              case 0x58:
                __int16 v18 = 0;
                __int16 v43 = 2052;
                __int16 v44 = 4;
                goto LABEL_167;
              case 0x72:
                goto LABEL_167;
              case 0x80:
                __int16 v18 = 0;
                __int16 v43 = 2057;
                __int16 v44 = 4;
                goto LABEL_167;
              case 0x88:
                __int16 v44 = 0;
                __int16 v18 = 3;
                __int16 v43 = 2054;
LABEL_167:
                LOWORD(v20) = v18;
                char v45 = 1;
                __int16 v21 = 2;
                __int16 v19 = 3;
                __int16 v18 = v44;
                __int16 v22 = v43;
                break;
              default:
                __int16 v19 = 0;
                LOWORD(v20) = 0;
                __int16 v21 = 0;
                char v45 = 0;
                break;
            }
LABEL_104:
            if (v42) {
              CFRelease(v42);
            }
            if ((v45 & 1) == 0)
            {
              uint64_t v63 = operator new(0x28uLL);
              long long v64 = xmmword_1C59A3D50;
              strcpy((char *)v63, "Error parsing NFC Accessory properties");
              (*(void (**)(std::string *__return_ptr, void *, void **, uint64_t))(*v3 + 48))(&buf, v3, &v63, 5);
              CFTypeRef v74 = (CFTypeRef)buf.__r_.__value_.__r.__words[0];
              buf.__r_.__value_.__r.__words[0] = 0;
              if (v2)
              {
                CFRelease(v2);
                if (buf.__r_.__value_.__r.__words[0]) {
                  CFRelease(buf.__r_.__value_.__l.__data_);
                }
              }
              if (SHIBYTE(v64) < 0) {
                operator delete(v63);
              }
              goto LABEL_43;
            }
            goto LABEL_119;
          }
        }
      }
    }
    else
    {
      LODWORD(buf.__r_.__value_.__l.__data_) = 0;
    }
    uint64_t v42 = v33;
    __int16 v18 = 0;
    __int16 v19 = 0;
    LOWORD(v20) = 0;
LABEL_103:
    __int16 v21 = 0;
    char v45 = 0;
    __int16 v22 = -1;
    goto LABEL_104;
  }
  if (v26 != 7)
  {
    if (v26 == 5)
    {
      long long v27 = *(const void **)(a1 + 56);
      xpc_object_t v68 = v27;
      if (!v27
        || (CFRetain(v27),
            !ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get))
      {
        __int16 v19 = 0;
        LOWORD(v20) = 0;
        __int16 v21 = 0;
        char v37 = 0;
        __int16 v22 = -1;
        if (!v27) {
          goto LABEL_117;
        }
        goto LABEL_116;
      }
      long long v28 = (const void *)*MEMORY[0x1E4F5B1B8];
      if (CFDictionaryContainsKey((CFDictionaryRef)v27, (const void *)*MEMORY[0x1E4F5B1B8])
        && (CFStringRef v29 = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)v27, v28), (v30 = v29) != 0)
        && (CFTypeID v31 = CFGetTypeID(v29), v31 == CFStringGetTypeID()))
      {
        if (CFEqual(v30, @"A1749"))
        {
          LOWORD(v20) = 0;
          __int16 v19 = 1;
          __int16 v22 = 1;
          goto LABEL_157;
        }
        if (CFEqual(v30, @"A1605")
          || CFEqual(v30, @"A1717"))
        {
          LOWORD(v20) = 0;
          __int16 v22 = 5;
          goto LABEL_156;
        }
        if (CFEqual(v30, @"A1748"))
        {
          LOWORD(v20) = 0;
          __int16 v22 = 2;
          goto LABEL_156;
        }
        __int16 v19 = -1;
      }
      else
      {
        __int16 v19 = 0;
      }
      uint64_t v34 = (const void *)*MEMORY[0x1E4F5B1C0];
      if (CFDictionaryContainsKey((CFDictionaryRef)v27, (const void *)*MEMORY[0x1E4F5B1C0]))
      {
        CFNumberRef v35 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)v27, v34);
        CFNumberRef v20 = v35;
        if (!v35)
        {
LABEL_115:
          __int16 v21 = 0;
          char v37 = 0;
          __int16 v22 = -1;
          goto LABEL_116;
        }
        CFTypeID v36 = CFGetTypeID(v35);
        if (v36 == CFStringGetTypeID())
        {
          if (CFStringCompare((CFStringRef)v20, @"B292", 0))
          {
            if (CFStringCompare((CFStringRef)v20, @"A2308", 0)
              && CFStringCompare((CFStringRef)v20, @"A2309", 0))
            {
              LOWORD(v20) = 0;
              __int16 v21 = 0;
              char v37 = 0;
              __int16 v19 = -1;
              __int16 v22 = -1;
LABEL_116:
              CFRelease(v27);
LABEL_117:
              if ((v37 & 1) == 0)
              {
                size_t v66 = operator new(0x30uLL);
                long long v67 = xmmword_1C59A3D70;
                strcpy((char *)v66, "Error parsing Generic Accessory properties");
                (*(void (**)(std::string *__return_ptr, void *, void **, uint64_t))(*v3 + 48))(&buf, v3, &v66, 5);
                CFTypeRef v74 = (CFTypeRef)buf.__r_.__value_.__r.__words[0];
                buf.__r_.__value_.__r.__words[0] = 0;
                if (v2)
                {
                  CFRelease(v2);
                  if (buf.__r_.__value_.__r.__words[0]) {
                    CFRelease(buf.__r_.__value_.__l.__data_);
                  }
                }
                if (SHIBYTE(v67) < 0) {
                  operator delete(v66);
                }
                __int16 v18 = 0;
                goto LABEL_43;
              }
              __int16 v18 = 0;
              goto LABEL_119;
            }
            LOWORD(v20) = 0;
            __int16 v22 = 12;
            __int16 v19 = 4;
LABEL_157:
            char v37 = 1;
            __int16 v21 = 2;
            goto LABEL_116;
          }
          LOWORD(v20) = 2;
          __int16 v22 = 4;
LABEL_156:
          __int16 v19 = 1;
          goto LABEL_157;
        }
      }
      LOWORD(v20) = 0;
      goto LABEL_115;
    }
    uint64_t v59 = (char *)operator new(0x28uLL);
    long long v60 = xmmword_1C59A4360;
    strcpy(v59, "Unsupported accessory transport type");
    (*(void (**)(std::string *__return_ptr, void *, char **, uint64_t))(*v3 + 48))(&buf, v3, &v59, 5);
    CFTypeRef v74 = (CFTypeRef)buf.__r_.__value_.__r.__words[0];
    buf.__r_.__value_.__r.__words[0] = 0;
    if (v2)
    {
      CFRelease(v2);
      if (buf.__r_.__value_.__r.__words[0]) {
        CFRelease(buf.__r_.__value_.__l.__data_);
      }
    }
    if (SHIBYTE(v60) < 0)
    {
      uint64_t v17 = v59;
LABEL_41:
      operator delete(v17);
    }
LABEL_42:
    __int16 v18 = 0;
    __int16 v19 = 0;
    LOWORD(v20) = 0;
    __int16 v21 = 0;
    __int16 v22 = -1;
    goto LABEL_43;
  }
  if (*(_DWORD *)(a1 + 68) == 3)
  {
    uint64_t v32 = *(const void **)(a1 + 56);
    if (v32)
    {
      CFRetain(*(CFTypeRef *)(a1 + 56));
      CFRelease(v32);
    }
    __int16 v18 = 0;
    LOWORD(v20) = 0;
    __int16 v21 = 2;
    __int16 v22 = 12;
    __int16 v19 = 4;
  }
  else
  {
    long long v61 = operator new(0x28uLL);
    long long v62 = xmmword_1C59A3D60;
    strcpy((char *)v61, "Unsupported AID Bus connection type");
    (*(void (**)(std::string *__return_ptr, void *, void **, uint64_t))(*v3 + 48))(&buf, v3, &v61, 5);
    std::string::size_type v38 = buf.__r_.__value_.__r.__words[0];
    CFTypeRef v74 = (CFTypeRef)buf.__r_.__value_.__r.__words[0];
    buf.__r_.__value_.__r.__words[0] = 0;
    if (v2)
    {
      CFRelease(v2);
      if (buf.__r_.__value_.__r.__words[0]) {
        CFRelease(buf.__r_.__value_.__l.__data_);
      }
    }
    if (SHIBYTE(v62) < 0) {
      operator delete(v61);
    }
    __int16 v18 = 0;
    __int16 v19 = 0;
    LOWORD(v20) = 0;
    __int16 v21 = 0;
    __int16 v22 = -1;
    int v2 = (const void *)v38;
  }
LABEL_119:
  memset(&buf, 0, sizeof(buf));
  ctu::cf::assign();
  std::string v58 = buf;
  if (!std::__hash_table<std::__hash_value_type<std::string,abm::AccessoryInfo>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,abm::AccessoryInfo>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,abm::AccessoryInfo>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,abm::AccessoryInfo>>>::find<std::string>(v3 + 13, (uint64_t)&v58))
  {
    buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v58;
    unint64_t v52 = std::__hash_table<std::__hash_value_type<std::string,abm::AccessoryInfo>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,abm::AccessoryInfo>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,abm::AccessoryInfo>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,abm::AccessoryInfo>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)(v3 + 13), (uint64_t)&v58, (long long **)&buf);
    *((_WORD *)v52 + 20) = v22;
    *((_WORD *)v52 + 21) = v21;
    *((_WORD *)v52 + 22) = 0;
    *((_WORD *)v52 + 23) = (_WORD)v20;
    *((_WORD *)v52 + 24) = v18;
    *((_WORD *)v52 + 25) = v19;
    if ((SHIBYTE(v58.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_43;
    }
    goto LABEL_145;
  }
  *((unsigned char *)&buf.__r_.__value_.__s + 23) = 21;
  strcpy((char *)&buf, "Duplicate accessory: ");
  if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t v46 = &v58;
  }
  else {
    size_t v46 = (std::string *)v58.__r_.__value_.__r.__words[0];
  }
  if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v58.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v58.__r_.__value_.__l.__size_;
  }
  long long v48 = std::string::append(&buf, (const std::string::value_type *)v46, size);
  std::string v49 = (std::string::value_type *)v48->__r_.__value_.__r.__words[0];
  std::string::size_type v50 = v48->__r_.__value_.__l.__size_;
  std::string::size_type v51 = v48->__r_.__value_.__r.__words[2];
  v48->__r_.__value_.__l.__size_ = 0;
  v48->__r_.__value_.__r.__words[2] = 0;
  v48->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf.__r_.__value_.__l.__data_);
  }
  if ((v51 & 0x8000000000000000) != 0)
  {
    std::string::__init_copy_ctor_external(&v57, v49, v50);
  }
  else
  {
    v57.__r_.__value_.__r.__words[0] = (std::string::size_type)v49;
    v57.__r_.__value_.__l.__size_ = v50;
    v57.__r_.__value_.__r.__words[2] = v51;
  }
  (*(void (**)(std::string *__return_ptr, void *, std::string *, uint64_t))(*v3 + 48))(&buf, v3, &v57, 5);
  CFTypeRef v74 = (CFTypeRef)buf.__r_.__value_.__r.__words[0];
  buf.__r_.__value_.__r.__words[0] = 0;
  if (v2)
  {
    CFRelease(v2);
    if (buf.__r_.__value_.__r.__words[0]) {
      CFRelease(buf.__r_.__value_.__l.__data_);
    }
  }
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v57.__r_.__value_.__l.__data_);
    if ((v51 & 0x8000000000000000) == 0)
    {
LABEL_144:
      if ((SHIBYTE(v58.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_43;
      }
      goto LABEL_145;
    }
  }
  else if ((v51 & 0x8000000000000000) == 0)
  {
    goto LABEL_144;
  }
  operator delete(v49);
  if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
LABEL_145:
  }
    operator delete(v58.__r_.__value_.__l.__data_);
LABEL_43:
  CFTypeRef v23 = v74;
  if (v3[9])
  {
    CFTypeRef cf = v74;
    if (v74) {
      CFRetain(v74);
    }
    int v24 = operator new(0xCuLL);
    long long v54 = v24 + 6;
    dispatch_object_t v55 = v24 + 6;
    *int v24 = v22;
    v24[1] = v21;
    void v24[2] = 0;
    v24[3] = (_WORD)v20;
    v24[4] = v18;
    v24[5] = v19;
    uint64_t v53 = v24;
    uint64_t v25 = v3[9];
    if (!v25) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    (*(void (**)(uint64_t, CFTypeRef *, void **))(*(void *)v25 + 48))(v25, &cf, &v53);
    if (v53)
    {
      long long v54 = v53;
      operator delete(v53);
    }
    if (cf) {
      CFRelease(cf);
    }
  }
  if (v23) {
    CFRelease(v23);
  }
}

void sub_1C594BA94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, char a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,char a45,void *__p,uint64_t a47,int a48,__int16 a49,char a50,char a51,char a52,void *a53,uint64_t a54,int a55,__int16 a56,char a57,char a58)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::SharedRef<__CFString const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFString const>::get(uint64_t a1)
{
  return *(void *)a1;
}

CFTypeRef __copy_helper_block_ea8_40c41_ZTSN3ctu2cf11CFSharedRefIK10__CFStringEE48c41_ZTSN3ctu2cf11CFSharedRefIK10__CFStringEE56c45_ZTSN3ctu2cf11CFSharedRefIK14__CFDictionaryEE(void *a1, void *a2)
{
  BOOL v4 = (const void *)a2[5];
  a1[5] = v4;
  if (v4) {
    CFRetain(v4);
  }
  std::string::size_type v5 = (const void *)a2[6];
  a1[6] = v5;
  if (v5) {
    CFRetain(v5);
  }
  CFTypeRef result = (CFTypeRef)a2[7];
  a1[7] = result;
  if (result) {
    return CFRetain(result);
  }
  return result;
}

void __destroy_helper_block_ea8_40c41_ZTSN3ctu2cf11CFSharedRefIK10__CFStringEE48c41_ZTSN3ctu2cf11CFSharedRefIK10__CFStringEE56c45_ZTSN3ctu2cf11CFSharedRefIK14__CFDictionaryEE(void *a1)
{
  int v2 = (const void *)a1[7];
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = (const void *)a1[6];
  if (v3) {
    CFRelease(v3);
  }
  BOOL v4 = (const void *)a1[5];
  if (v4) {
    CFRelease(v4);
  }
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,abm::AccessoryInfo>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,abm::AccessoryInfo>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,abm::AccessoryInfo>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,abm::AccessoryInfo>>>::find<std::string>(void *a1, uint64_t a2)
{
  int v2 = (unsigned char *)a2;
  unint64_t v4 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v5 = v4;
  }
  unint64_t v6 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v25, (uint64_t *)a2, v5);
  int8x8_t v7 = (int8x8_t)a1[1];
  if (!*(void *)&v7) {
    return 0;
  }
  unint64_t v8 = v6;
  uint8x8_t v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    unint64_t v10 = v6;
    if (v6 >= *(void *)&v7) {
      unint64_t v10 = v6 % *(void *)&v7;
    }
  }
  else
  {
    unint64_t v10 = (*(void *)&v7 - 1) & v6;
  }
  BOOL v12 = *(uint64_t ***)(*a1 + 8 * v10);
  if (v12)
  {
    uint64_t v13 = *v12;
    if (*v12)
    {
      char v14 = v2[23];
      if (v14 >= 0) {
        uint64_t v15 = v2[23];
      }
      else {
        uint64_t v15 = *((void *)v2 + 1);
      }
      if (v14 < 0) {
        int v2 = *(unsigned char **)v2;
      }
      if (v9.u32[0] < 2uLL)
      {
        uint64_t v16 = *(void *)&v7 - 1;
        while (1)
        {
          uint64_t v21 = v13[1];
          if (v21 == v8)
          {
            uint64_t v22 = *((unsigned __int8 *)v13 + 39);
            if ((v22 & 0x80u) == 0) {
              uint64_t v23 = *((unsigned __int8 *)v13 + 39);
            }
            else {
              uint64_t v23 = v13[3];
            }
            if (v23 == v15)
            {
              if ((v22 & 0x80) != 0)
              {
                if (!memcmp((const void *)v13[2], v2, v13[3])) {
                  return v13;
                }
              }
              else
              {
                if (!*((unsigned char *)v13 + 39)) {
                  return v13;
                }
                uint64_t v24 = 0;
                while (*((unsigned __int8 *)v13 + v24 + 16) == v2[v24])
                {
                  if (v22 == ++v24) {
                    return v13;
                  }
                }
              }
            }
          }
          else if ((v21 & v16) != v10)
          {
            return 0;
          }
          CFTypeRef result = 0;
          uint64_t v13 = (uint64_t *)*v13;
          if (!v13) {
            return result;
          }
        }
      }
      while (1)
      {
        unint64_t v17 = v13[1];
        if (v17 == v8)
        {
          uint64_t v18 = *((unsigned __int8 *)v13 + 39);
          if ((v18 & 0x80u) == 0) {
            uint64_t v19 = *((unsigned __int8 *)v13 + 39);
          }
          else {
            uint64_t v19 = v13[3];
          }
          if (v19 == v15)
          {
            if ((v18 & 0x80) != 0)
            {
              if (!memcmp((const void *)v13[2], v2, v13[3])) {
                return v13;
              }
            }
            else
            {
              if (!*((unsigned char *)v13 + 39)) {
                return v13;
              }
              uint64_t v20 = 0;
              while (*((unsigned __int8 *)v13 + v20 + 16) == v2[v20])
              {
                if (v18 == ++v20) {
                  return v13;
                }
              }
            }
          }
        }
        else
        {
          if (v17 >= *(void *)&v7) {
            v17 %= *(void *)&v7;
          }
          if (v17 != v10) {
            return 0;
          }
        }
        CFTypeRef result = 0;
        uint64_t v13 = (uint64_t *)*v13;
        if (!v13) {
          return result;
        }
      }
    }
  }
  return 0;
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,abm::AccessoryInfo>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,abm::AccessoryInfo>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,abm::AccessoryInfo>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,abm::AccessoryInfo>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, uint64_t a2, long long **a3)
{
  unint64_t v4 = (unsigned char *)a2;
  unint64_t v6 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v7 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v7 = v6;
  }
  unint64_t v8 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)v58, (uint64_t *)a2, v7);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v12 = v8;
      if (v8 >= v10) {
        unint64_t v12 = v8 % v10;
      }
    }
    else
    {
      unint64_t v12 = (v10 - 1) & v8;
    }
    uint64_t v13 = *(uint64_t ***)(*(void *)a1 + 8 * v12);
    if (v13)
    {
      char v14 = *v13;
      if (*v13)
      {
        char v15 = v4[23];
        if (v15 >= 0) {
          uint64_t v16 = v4[23];
        }
        else {
          uint64_t v16 = *((void *)v4 + 1);
        }
        if (v15 < 0) {
          unint64_t v4 = *(unsigned char **)v4;
        }
        if (v11.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v21 = v14[1];
            if (v21 == v9)
            {
              uint64_t v22 = *((unsigned __int8 *)v14 + 39);
              if ((v22 & 0x80u) == 0) {
                uint64_t v23 = *((unsigned __int8 *)v14 + 39);
              }
              else {
                uint64_t v23 = v14[3];
              }
              if (v23 == v16)
              {
                if ((v22 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v14[2], v4, v14[3])) {
                    return v14;
                  }
                }
                else
                {
                  if (!*((unsigned char *)v14 + 39)) {
                    return v14;
                  }
                  uint64_t v24 = 0;
                  while (*((unsigned __int8 *)v14 + v24 + 16) == v4[v24])
                  {
                    if (v22 == ++v24) {
                      return v14;
                    }
                  }
                }
              }
            }
            else if ((v21 & (v10 - 1)) != v12)
            {
              goto LABEL_51;
            }
            char v14 = (uint64_t *)*v14;
            if (!v14) {
              goto LABEL_51;
            }
          }
        }
        do
        {
          unint64_t v17 = v14[1];
          if (v17 == v9)
          {
            uint64_t v18 = *((unsigned __int8 *)v14 + 39);
            if ((v18 & 0x80u) == 0) {
              uint64_t v19 = *((unsigned __int8 *)v14 + 39);
            }
            else {
              uint64_t v19 = v14[3];
            }
            if (v19 == v16)
            {
              if ((v18 & 0x80) != 0)
              {
                if (!memcmp((const void *)v14[2], v4, v14[3])) {
                  return v14;
                }
              }
              else
              {
                if (!*((unsigned char *)v14 + 39)) {
                  return v14;
                }
                uint64_t v20 = 0;
                while (*((unsigned __int8 *)v14 + v20 + 16) == v4[v20])
                {
                  if (v18 == ++v20) {
                    return v14;
                  }
                }
              }
            }
          }
          else
          {
            if (v17 >= v10) {
              v17 %= v10;
            }
            if (v17 != v12) {
              break;
            }
          }
          char v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
    }
  }
  else
  {
    unint64_t v12 = 0xAAAAAAAAAAAAAAAALL;
  }
LABEL_51:
  char v25 = (void *)(a1 + 16);
  unint64_t v59 = 0xAAAAAAAAAAAAAA00;
  int v26 = (char *)operator new(0x38uLL);
  v58[0] = v26;
  v58[1] = a1 + 16;
  *(void *)int v26 = 0;
  *((void *)v26 + 1) = v9;
  long long v27 = (std::string *)(v26 + 16);
  long long v28 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v27, *(const std::string::value_type **)v28, *((void *)v28 + 1));
  }
  else
  {
    long long v29 = *v28;
    *((void *)v26 + 4) = *((void *)v28 + 2);
    *(_OWORD *)&v27->__r_.__value_.__l.__data_ = v29;
  }
  *((_WORD *)v26 + 20) = -1;
  *(void *)(v26 + 42) = 0;
  *((_WORD *)v26 + 25) = 0;
  LOBYTE(v59) = 1;
  float v30 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v31 = *(float *)(a1 + 32);
  if (!v10 || (float)(v31 * (float)v10) < v30)
  {
    BOOL v34 = 1;
    if (v10 >= 3) {
      BOOL v34 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v35 = v34 | (2 * v10);
    unint64_t v36 = vcvtps_u32_f32(v30 / v31);
    if (v35 <= v36) {
      size_t prime = v36;
    }
    else {
      size_t prime = v35;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    unint64_t v10 = *(void *)(a1 + 8);
    if (prime > v10)
    {
LABEL_68:
      if (prime >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      std::string::size_type v38 = operator new(8 * prime);
      char v39 = *(void **)a1;
      *(void *)a1 = v38;
      if (v39) {
        operator delete(v39);
      }
      uint64_t v40 = 0;
      *(void *)(a1 + 8) = prime;
      do
        *(void *)(*(void *)a1 + 8 * v40++) = 0;
      while (prime != v40);
      CFTypeID v41 = (void *)*v25;
      if (!*v25) {
        goto LABEL_100;
      }
      size_t v42 = v41[1];
      size_t v43 = prime - 1;
      if ((prime & (prime - 1)) == 0)
      {
        size_t v44 = v42 & v43;
        *(void *)(*(void *)a1 + 8 * v44) = v25;
        for (uint64_t i = (void *)*v41; *v41; uint64_t i = (void *)*v41)
        {
          size_t v46 = i[1] & v43;
          if (v46 == v44)
          {
            CFTypeID v41 = i;
          }
          else if (*(void *)(*(void *)a1 + 8 * v46))
          {
            *CFTypeID v41 = *i;
            uint64_t v47 = 8 * v46;
            *uint64_t i = **(void **)(*(void *)a1 + v47);
            **(void **)(*(void *)a1 + v47) = i;
          }
          else
          {
            *(void *)(*(void *)a1 + 8 * v46) = v41;
            CFTypeID v41 = i;
            size_t v44 = v46;
          }
        }
        goto LABEL_100;
      }
      if (v42 >= prime) {
        v42 %= prime;
      }
      *(void *)(*(void *)a1 + 8 * v42) = v25;
      std::string::size_type v51 = (void *)*v41;
      if (!*v41)
      {
LABEL_100:
        unint64_t v10 = prime;
        uint64_t v54 = prime - 1;
        if ((prime & (prime - 1)) != 0) {
          goto LABEL_101;
        }
        goto LABEL_116;
      }
      while (1)
      {
        size_t v53 = v51[1];
        if (v53 >= prime) {
          v53 %= prime;
        }
        if (v53 == v42) {
          goto LABEL_94;
        }
        if (*(void *)(*(void *)a1 + 8 * v53))
        {
          *CFTypeID v41 = *v51;
          uint64_t v52 = 8 * v53;
          *std::string::size_type v51 = **(void **)(*(void *)a1 + v52);
          **(void **)(*(void *)a1 + v52) = v51;
          std::string::size_type v51 = v41;
LABEL_94:
          CFTypeID v41 = v51;
          std::string::size_type v51 = (void *)*v51;
          if (!v51) {
            goto LABEL_100;
          }
        }
        else
        {
          *(void *)(*(void *)a1 + 8 * v53) = v41;
          CFTypeID v41 = v51;
          std::string::size_type v51 = (void *)*v51;
          size_t v42 = v53;
          if (!v51) {
            goto LABEL_100;
          }
        }
      }
    }
    if (prime < v10)
    {
      unint64_t v48 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v10 < 3 || (uint8x8_t v49 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v49.i16[0] = vaddlv_u8(v49), v49.u32[0] > 1uLL))
      {
        unint64_t v48 = std::__next_prime(v48);
      }
      else
      {
        uint64_t v50 = 1 << -(char)__clz(v48 - 1);
        if (v48 >= 2) {
          unint64_t v48 = v50;
        }
      }
      if (prime <= v48) {
        size_t prime = v48;
      }
      if (prime < v10)
      {
        if (!prime)
        {
          dispatch_object_t v55 = *(void **)a1;
          *(void *)a1 = 0;
          if (v55) {
            operator delete(v55);
          }
          unint64_t v10 = 0;
          *(void *)(a1 + 8) = 0;
          uint64_t v54 = -1;
          goto LABEL_116;
        }
        goto LABEL_68;
      }
      unint64_t v10 = *(void *)(a1 + 8);
    }
    uint64_t v54 = v10 - 1;
    if ((v10 & (v10 - 1)) != 0)
    {
LABEL_101:
      if (v9 >= v10)
      {
        unint64_t v12 = v9 % v10;
        uint64_t v32 = *(void **)(*(void *)a1 + 8 * (v9 % v10));
        uint64_t v33 = (void *)v58[0];
        if (v32) {
          goto LABEL_57;
        }
      }
      else
      {
        unint64_t v12 = v9;
        uint64_t v32 = *(void **)(*(void *)a1 + 8 * v9);
        uint64_t v33 = (void *)v58[0];
        if (v32) {
          goto LABEL_57;
        }
      }
LABEL_117:
      void *v33 = *(void *)(a1 + 16);
      *(void *)(a1 + 16) = v58[0];
      *(void *)(*(void *)a1 + 8 * v12) = v25;
      if (*(void *)v58[0])
      {
        unint64_t v56 = *(void *)(*(void *)v58[0] + 8);
        if ((v10 & (v10 - 1)) != 0)
        {
          if (v56 >= v10) {
            v56 %= v10;
          }
        }
        else
        {
          v56 &= v10 - 1;
        }
        *(void *)(*(void *)a1 + 8 * v56) = v58[0];
      }
      goto LABEL_123;
    }
LABEL_116:
    unint64_t v12 = v54 & v9;
    uint64_t v32 = *(void **)(*(void *)a1 + 8 * (v54 & v9));
    uint64_t v33 = (void *)v58[0];
    if (v32) {
      goto LABEL_57;
    }
    goto LABEL_117;
  }
  uint64_t v32 = *(void **)(*(void *)a1 + 8 * v12);
  uint64_t v33 = (void *)v58[0];
  if (!v32) {
    goto LABEL_117;
  }
LABEL_57:
  void *v33 = *v32;
  void *v32 = v58[0];
LABEL_123:
  char v14 = (uint64_t *)v58[0];
  ++*(void *)(a1 + 24);
  return v14;
}

void sub_1C594C6E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,abm::AccessoryInfo>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,abm::AccessoryInfo>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1C594C6F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,abm::AccessoryInfo>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,abm::AccessoryInfo>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,abm::AccessoryInfo>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,abm::AccessoryInfo>,void *>>>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((unsigned char *)a1 + 16) && *(char *)(v2 + 39) < 0) {
      operator delete(*(void **)(v2 + 16));
    }
    operator delete((void *)v2);
  }
  return a1;
}

void ___ZZZN23CoreAccessoriesDelegate4initEvEUb_ENK3__1clEN3ctu2cf11CFSharedRefIK10__CFStringEE_block_invoke(uint64_t a1)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  CFTypeRef v34 = 0;
  uint64_t v1 = *(void **)(a1 + 32);
  uint64_t v2 = *(void *)(a1 + 40);
  if (v2) {
    uint64_t v3 = ctu::SharedRef<__CFString const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFString const>::get;
  }
  else {
    uint64_t v3 = 0;
  }
  if (v3)
  {
    unint64_t v4 = v1[5];
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string buf = 138412290;
      *(void *)&uint8_t buf[4] = v2;
      _os_log_impl(&dword_1C5767000, v4, OS_LOG_TYPE_DEFAULT, "#I Accessory detached:\n    UUID:          %@\n", buf, 0xCu);
    }
    memset(buf, 0, sizeof(buf));
    uint64_t v36 = 0;
    ctu::cf::assign();
    *(_OWORD *)float v30 = *(_OWORD *)buf;
    uint64_t v31 = v36;
    unint64_t v5 = v1 + 13;
    if (std::__hash_table<std::__hash_value_type<std::string,abm::AccessoryInfo>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,abm::AccessoryInfo>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,abm::AccessoryInfo>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,abm::AccessoryInfo>>>::find<std::string>(v1 + 13, (uint64_t)v30))
    {
      *(void *)std::string buf = v30;
      unint64_t v6 = std::__hash_table<std::__hash_value_type<std::string,abm::AccessoryInfo>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,abm::AccessoryInfo>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,abm::AccessoryInfo>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,abm::AccessoryInfo>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)(v1 + 13), (uint64_t)v30, (long long **)buf);
      __int16 v7 = *((_WORD *)v6 + 20);
      uint64_t v23 = *(uint64_t *)((char *)v6 + 44);
      unint64_t v8 = std::__hash_table<std::__hash_value_type<std::string,abm::AccessoryInfo>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,abm::AccessoryInfo>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,abm::AccessoryInfo>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,abm::AccessoryInfo>>>::find<std::string>(v1 + 13, (uint64_t)v30);
      if (v8)
      {
        unint64_t v9 = v8;
        int8x8_t v10 = (int8x8_t)v1[14];
        unint64_t v11 = v8[1];
        uint8x8_t v12 = (uint8x8_t)vcnt_s8(v10);
        v12.i16[0] = vaddlv_u8(v12);
        if (v12.u32[0] > 1uLL)
        {
          if (v11 >= *(void *)&v10) {
            v11 %= *(void *)&v10;
          }
        }
        else
        {
          v11 &= *(void *)&v10 - 1;
        }
        char v15 = *(uint64_t **)(*v5 + 8 * v11);
        do
        {
          uint64_t v16 = v15;
          char v15 = (uint64_t *)*v15;
        }
        while (v15 != v8);
        if (v16 == v1 + 15) {
          goto LABEL_34;
        }
        unint64_t v17 = v16[1];
        if (v12.u32[0] > 1uLL)
        {
          if (v17 >= *(void *)&v10) {
            v17 %= *(void *)&v10;
          }
        }
        else
        {
          v17 &= *(void *)&v10 - 1;
        }
        if (v17 != v11)
        {
LABEL_34:
          if (!*v8) {
            goto LABEL_35;
          }
          unint64_t v18 = *(void *)(*v8 + 8);
          if (v12.u32[0] > 1uLL)
          {
            if (v18 >= *(void *)&v10) {
              v18 %= *(void *)&v10;
            }
          }
          else
          {
            v18 &= *(void *)&v10 - 1;
          }
          if (v18 != v11) {
LABEL_35:
          }
            *(void *)(*v5 + 8 * v11) = 0;
        }
        uint64_t v19 = *v8;
        if (*v8)
        {
          unint64_t v20 = *(void *)(v19 + 8);
          if (v12.u32[0] > 1uLL)
          {
            if (v20 >= *(void *)&v10) {
              v20 %= *(void *)&v10;
            }
          }
          else
          {
            v20 &= *(void *)&v10 - 1;
          }
          if (v20 != v11)
          {
            *(void *)(*v5 + 8 * v20) = v16;
            uint64_t v19 = *v8;
          }
        }
        uint64_t *v16 = v19;
        *unint64_t v8 = 0;
        --v1[16];
        if (*((char *)v8 + 39) < 0) {
          operator delete((void *)v8[2]);
        }
        operator delete(v9);
      }
      uint64_t v13 = 0;
      __int16 v14 = 1;
      if ((SHIBYTE(v31) & 0x80000000) == 0) {
        goto LABEL_47;
      }
    }
    else
    {
      std::string __p = operator new(0x40uLL);
      long long v29 = xmmword_1C59A6C30;
      strcpy((char *)__p, "Invalid UUID, could not find in cached accessory dictionary");
      (*(void (**)(uint8_t *__return_ptr, void *, void **, uint64_t))(*v1 + 48))(buf, v1, &__p, 5);
      uint64_t v13 = *(const void **)buf;
      CFTypeRef v34 = *(CFTypeRef *)buf;
      *(void *)std::string buf = 0;
      if (SHIBYTE(v29) < 0) {
        operator delete(__p);
      }
      __int16 v14 = 0;
      uint64_t v23 = 0;
      __int16 v7 = -1;
      if ((SHIBYTE(v31) & 0x80000000) == 0)
      {
LABEL_47:
        if (!v1[9]) {
          goto LABEL_55;
        }
        goto LABEL_48;
      }
    }
    operator delete(v30[0]);
    if (!v1[9]) {
      goto LABEL_55;
    }
    goto LABEL_48;
  }
  char v33 = 12;
  strcpy((char *)v32, "Invalid UUID");
  (*(void (**)(uint8_t *__return_ptr, void *, void **, uint64_t))(*v1 + 48))(buf, v1, v32, 5);
  uint64_t v13 = *(const void **)buf;
  CFTypeRef v34 = *(CFTypeRef *)buf;
  *(void *)std::string buf = 0;
  if (v33 < 0) {
    operator delete(v32[0]);
  }
  __int16 v14 = 0;
  uint64_t v23 = 0;
  __int16 v7 = -1;
  if (v1[9])
  {
LABEL_48:
    CFTypeRef cf = v13;
    if (v13) {
      CFRetain(v13);
    }
    uint64_t v21 = (char *)operator new(0xCuLL);
    char v25 = v21 + 12;
    int v26 = v21 + 12;
    *(_WORD *)uint64_t v21 = v7;
    *((_WORD *)v21 + 1) = v14;
    *(void *)(v21 + 4) = v23;
    uint64_t v24 = v21;
    uint64_t v22 = v1[9];
    if (!v22) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    (*(void (**)(uint64_t, CFTypeRef *, void **))(*(void *)v22 + 48))(v22, &cf, &v24);
    if (v24)
    {
      char v25 = v24;
      operator delete(v24);
    }
    if (cf) {
      CFRelease(cf);
    }
  }
LABEL_55:
  if (v34) {
    CFRelease(v34);
  }
}

void sub_1C594CBE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  ctu::cf::CFSharedRef<__CFError>::~CFSharedRef((const void **)(v27 - 72));
  _Unwind_Resume(a1);
}

CFTypeRef __copy_helper_block_ea8_40c41_ZTSN3ctu2cf11CFSharedRefIK10__CFStringEE(uint64_t a1, uint64_t a2)
{
  CFTypeRef result = *(CFTypeRef *)(a2 + 40);
  *(void *)(a1 + 40) = result;
  if (result) {
    return CFRetain(result);
  }
  return result;
}

void __destroy_helper_block_ea8_40c41_ZTSN3ctu2cf11CFSharedRefIK10__CFStringEE(uint64_t a1)
{
  uint64_t v1 = *(const void **)(a1 + 40);
  if (v1) {
    CFRelease(v1);
  }
}

void std::__shared_ptr_pointer<CoreAccessoriesDelegate *,std::shared_ptr<CoreAccessoriesDelegate> ctu::SharedSynchronizable<AccessoriesDelegateBase>::make_shared_ptr<CoreAccessoriesDelegate>(CoreAccessoriesDelegate*)::{lambda(CoreAccessoriesDelegate *)#1},std::allocator<CoreAccessoriesDelegate>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<CoreAccessoriesDelegate *,std::shared_ptr<CoreAccessoriesDelegate> ctu::SharedSynchronizable<AccessoriesDelegateBase>::make_shared_ptr<CoreAccessoriesDelegate>(CoreAccessoriesDelegate*)::{lambda(CoreAccessoriesDelegate *)#1},std::allocator<CoreAccessoriesDelegate>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<CoreAccessoriesDelegate *,std::shared_ptr<CoreAccessoriesDelegate> ctu::SharedSynchronizable<AccessoriesDelegateBase>::make_shared_ptr<CoreAccessoriesDelegate>(CoreAccessoriesDelegate*)::{lambda(CoreAccessoriesDelegate *)#1},std::allocator<CoreAccessoriesDelegate>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableI23AccessoriesDelegateBaseE15make_shared_ptrI23CoreAccessoriesDelegateE"
                     "ENSt3__110shared_ptrIT_EEPS7_EUlPS4_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableI23AccessoriesDelegateBaseE15make_shared_ptrI23CoreAccessori"
                                "esDelegateEENSt3__110shared_ptrIT_EEPS7_EUlPS4_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableI23AccessoriesDelegateBaseE15make_shared_ptrI23CoreAccessoriesDelegateEENSt3__110shared_ptrIT_EEPS7_EUlPS4_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableI23AccessoriesDelegateBaseE15make_shared_ptrI23CoreAccessoriesDelegateEENSt3__110shared_ptrIT_EEPS7_EUlPS4_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24; {
  return 0;
  }
}

uint64_t std::shared_ptr<CoreAccessoriesDelegate> ctu::SharedSynchronizable<AccessoriesDelegateBase>::make_shared_ptr<CoreAccessoriesDelegate>(CoreAccessoriesDelegate*)::{lambda(CoreAccessoriesDelegate*)#1}::operator() const(CoreAccessoriesDelegate*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void std::__shared_ptr_emplace<AccessoryDetectionManager>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20FEE88;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<AccessoryDetectionManager>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20FEE88;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_emplace<AccessoryDetectionManager>::__on_zero_shared(uint64_t a1)
{
}

const char *HealthEventDB::getName(HealthEventDB *this)
{
  return "HealthEventDB";
}

uint64_t HealthEventDB::addHealthEvent(HealthEventDB *this, const HealthEvent *a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  unint64_t v4 = *((void *)this + 5);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    HealthEvent::asString(a2, __p);
    unint64_t v11 = v13 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)std::string buf = 136315138;
    char v15 = v11;
    _os_log_debug_impl(&dword_1C5767000, v4, OS_LOG_TYPE_DEBUG, "#D Adding health event: %s", buf, 0xCu);
    if (v13 < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t v6 = *((void *)this + 10);
  uint64_t v5 = *((void *)this + 11);
  if (0xAAAAAAAAAAAAAAABLL * ((v5 - v6) >> 3) == *((void *)this + 14))
  {
    if (v5 != v6)
    {
      *(_OWORD *)(*((void *)this + 13) + 8) = *(_OWORD *)((char *)a2 + 8);
      uint64_t v7 = *((void *)this + 13) + 24;
      *((void *)this + 13) = v7;
      if (v7 == *((void *)this + 11))
      {
        uint64_t v7 = *((void *)this + 10);
        *((void *)this + 13) = v7;
      }
      *((void *)this + 12) = v7;
    }
  }
  else
  {
    uint64_t v8 = *((void *)this + 13);
    *(void *)uint64_t v8 = &unk_1F20F9640;
    *(_OWORD *)(v8 + 8) = *(_OWORD *)((char *)a2 + 8);
    uint64_t v9 = *((void *)this + 13) + 24;
    *((void *)this + 13) = v9;
    if (v9 == *((void *)this + 11)) {
      *((void *)this + 13) = *((void *)this + 10);
    }
    ++*((void *)this + 14);
  }
  HealthEventDB::commitToDisk(this);
  return 1;
}

void HealthEventDB::commitToDisk(HealthEventDB *this)
{
  CFTypeRef v29 = 0;
  CFTypeRef v30 = 0;
  CFTypeRef cf = 0;
  CFAllocatorRef v2 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  unint64_t v4 = Mutable;
  if (Mutable) {
    CFTypeRef v30 = Mutable;
  }
  CFMutableArrayRef v5 = CFArrayCreateMutable(v2, 0, MEMORY[0x1E4F1D510]);
  uint64_t v6 = v5;
  if (v5) {
    CFTypeRef v29 = v5;
  }
  CFMutableArrayRef v7 = CFArrayCreateMutable(v2, 0, MEMORY[0x1E4F1D510]);
  uint64_t v9 = v7;
  if (v7) {
    CFTypeRef cf = v7;
  }
  if (*((void *)this + 14))
  {
    uint64_t v10 = *((void *)this + 12);
    if (v10)
    {
      while (1)
      {
        LOBYTE(__p[0]) = *(unsigned char *)(v10 + 8);
        *(void *)&long long valuePtr = *(void *)(v10 + 16);
        CFNumberRef v11 = CFNumberCreate(v2, kCFNumberSInt8Type, __p);
        CFNumberRef v12 = CFNumberCreate(v2, kCFNumberSInt64Type, &valuePtr);
        CFNumberRef v13 = v12;
        if (v11
           ? ctu::SharedRef<__CFNumber const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFNumber const>::get
           : 0)
        {
          if (v12
             ? ctu::SharedRef<__CFNumber const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFNumber const>::get
             : 0)
          {
            break;
          }
        }
        if (v12) {
          goto LABEL_22;
        }
LABEL_23:
        if (v11) {
          CFRelease(v11);
        }
        v10 += 24;
        if (v10 == *((void *)this + 11)) {
          uint64_t v10 = *((void *)this + 10);
        }
        if (!v10 || v10 == *((void *)this + 13)) {
          goto LABEL_29;
        }
      }
      if (v11)
      {
        CFRetain(v11);
        CFArrayAppendValue(v6, v11);
        CFRelease(v11);
      }
      if (!v13) {
        goto LABEL_23;
      }
      CFRetain(v13);
      CFArrayAppendValue(v9, v13);
      CFRelease(v13);
LABEL_22:
      CFRelease(v13);
      goto LABEL_23;
    }
  }
LABEL_29:
  ctu::cf::insert<char const*,__CFArray *>(v4, (const __CFString **)"HealthEventTypes", v6, (uint64_t)v2, v8);
  ctu::cf::insert<char const*,__CFArray *>((__CFDictionary *)v30, (const __CFString **)"HealthEventTimes", cf, (uint64_t)v2, v16);
  for (uint64_t i = (uint64_t *)*((void *)this + 17); i; uint64_t i = (uint64_t *)*i)
  {
    uint64_t v24 = (const __CFString **)(i + 2);
    if (*((char *)i + 39) < 0) {
      uint64_t v24 = (const __CFString **)*v24;
    }
    (*(void (**)(long long *__return_ptr))(*(void *)i[5] + 24))(&valuePtr);
    ctu::cf::insert<char const*,__CFDictionary const*>((__CFDictionary *)v30, v24, (const void *)valuePtr, (uint64_t)v2, v25);
    if ((void)valuePtr) {
      CFRelease((CFTypeRef)valuePtr);
    }
  }
  pthread_mutex_lock(&ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance);
  unint64_t v18 = (os_unfair_lock_s *)off_1EBBDD340;
  if (!off_1EBBDD340)
  {
    SharedData::create_default_global(&valuePtr);
    long long v19 = valuePtr;
    long long valuePtr = 0uLL;
    unint64_t v20 = (std::__shared_weak_count *)*(&off_1EBBDD340 + 1);
    off_1EBBDD340 = v19;
    if (v20 && !atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
    uint64_t v21 = (std::__shared_weak_count *)*((void *)&valuePtr + 1);
    if (*((void *)&valuePtr + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&valuePtr + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
    unint64_t v18 = (os_unfair_lock_s *)off_1EBBDD340;
  }
  uint64_t v22 = (std::__shared_weak_count *)*(&off_1EBBDD340 + 1);
  if (*(&off_1EBBDD340 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDD340 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance);
  char v27 = 13;
  strcpy((char *)__p, "HealthEventDB");
  uint64_t v32 = v18;
  CFTypeRef v33 = v30;
  *(void *)&long long valuePtr = __p;
  *((void *)&valuePtr + 1) = &v33;
  ctu::SharedLockable<SharedData>::execute_sync<BOOL SharedData::setPreference<__CFDictionary *>(std::string const&,__CFDictionary *)::{lambda(void)#1}>(v18 + 6, (uint64_t *)&valuePtr);
  if (v27 < 0) {
    operator delete(__p[0]);
  }
  if (!v22 || atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    CFTypeRef v23 = cf;
    if (!cf) {
      goto LABEL_46;
    }
    goto LABEL_45;
  }
  ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
  std::__shared_weak_count::__release_weak(v22);
  CFTypeRef v23 = cf;
  if (cf) {
LABEL_45:
  }
    CFRelease(v23);
LABEL_46:
  if (v29) {
    CFRelease(v29);
  }
  if (v30) {
    CFRelease(v30);
  }
}