void Timestamp::Timestamp(Timestamp *this)
{
  void *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  int v6;
  char *v7;
  uint64_t v8;
  uint64_t *v9;
  int *v10;
  char *v11;
  unsigned long long v12;
  uint8_t buf[4];
  char *v14;
  uint64_t v15;

  v15 = *MEMORY[0x263EF8340];
  *((void *)this + 1) = 0;
  v2 = (void *)((char *)this + 8);
  *((void *)this + 2) = 0;
  *(void *)this = (char *)this + 8;
  v12 = 0uLL;
  if ((gettimeofday((timeval *)&v12, 0) & 0x80000000) == 0
    || !os_log_type_enabled(MEMORY[0x263EF8438], OS_LOG_TYPE_ERROR))
  {
    v3 = *v2;
    v4 = v2;
    if (*v2) {
      goto LABEL_4;
    }
LABEL_10:
    v7 = (char *)operator new(0x38uLL);
    *((_DWORD *)v7 + 8) = 0;
    *((void *)v7 + 5) = 0;
    *((void *)v7 + 6) = 0;
    *(void *)v7 = 0;
    *((void *)v7 + 1) = 0;
    *((void *)v7 + 2) = v4;
    *v2 = v7;
    v8 = **(void **)this;
    v9 = (uint64_t *)v7;
    if (v8)
    {
      *(void *)this = v8;
      v9 = (uint64_t *)*v2;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 1), v9);
    ++*((void *)this + 2);
    goto LABEL_13;
  }
  v10 = __error();
  v11 = strerror(*v10);
  *(_DWORD *)buf = 136315138;
  v14 = v11;
  _os_log_error_impl(&dword_26368A000, MEMORY[0x263EF8438], OS_LOG_TYPE_ERROR, "Failed to get current time. Error: %s\n", buf, 0xCu);
  v3 = *v2;
  v4 = v2;
  if (!*v2) {
    goto LABEL_10;
  }
LABEL_4:
  v5 = v3;
  while (1)
  {
    while (1)
    {
      v4 = (void *)v5;
      v6 = *(_DWORD *)(v5 + 32);
      if (v6 < 1) {
        break;
      }
      v5 = *v4;
      v2 = v4;
      if (!*v4) {
        goto LABEL_10;
      }
    }
    if ((v6 & 0x80000000) == 0) {
      break;
    }
    v5 = v4[1];
    if (!v5)
    {
      v2 = v4 + 1;
      goto LABEL_10;
    }
  }
  v7 = (char *)v4;
LABEL_13:
  *(_OWORD *)(v7 + 40) = v12;
}

void sub_26368B9AC(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy(v1, *v2);
  _Unwind_Resume(a1);
}

void sub_26368B9C8(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy(v1, v2);
  _Unwind_Resume(a1);
}

void Timestamp::Timestamp(Timestamp *this, const Timestamp *a2)
{
  *((void *)this + 2) = 0;
  *((void *)this + 1) = 0;
  *(void *)this = (char *)this + 8;
  std::map<Timestamp::TimeDomain,timeval>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<Timestamp::TimeDomain,timeval>,std::__tree_node<std::__value_type<Timestamp::TimeDomain,timeval>,void *> *,long>>>((uint64_t *)this, *(void **)a2, (void *)a2 + 1);
}

{
  *((void *)this + 2) = 0;
  *((void *)this + 1) = 0;
  *(void *)this = (char *)this + 8;
  std::map<Timestamp::TimeDomain,timeval>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<Timestamp::TimeDomain,timeval>,std::__tree_node<std::__value_type<Timestamp::TimeDomain,timeval>,void *> *,long>>>((uint64_t *)this, *(void **)a2, (void *)a2 + 1);
}

void sub_26368BA24(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_26368BA7C(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

void *Timestamp::Timestamp(void *a1, _OWORD *a2, int a3)
{
  a1[2] = 0;
  a1[1] = 0;
  v6 = a1 + 1;
  *a1 = a1 + 1;
  v7 = (char *)operator new(0x38uLL);
  *((_DWORD *)v7 + 8) = a3;
  *(void *)v7 = 0;
  *((void *)v7 + 1) = 0;
  *((void *)v7 + 2) = v6;
  void *v6 = v7;
  *a1 = v7;
  v7[24] = 1;
  a1[2] = 1;
  *(_OWORD *)(v7 + 40) = *a2;
  return a1;
}

{
  void *v6;
  char *v7;

  a1[2] = 0;
  a1[1] = 0;
  v6 = a1 + 1;
  *a1 = a1 + 1;
  v7 = (char *)operator new(0x38uLL);
  *((_DWORD *)v7 + 8) = a3;
  *(void *)v7 = 0;
  *((void *)v7 + 1) = 0;
  *((void *)v7 + 2) = v6;
  void *v6 = v7;
  *a1 = v7;
  v7[24] = 1;
  a1[2] = 1;
  *(_OWORD *)(v7 + 40) = *a2;
  return a1;
}

__n128 Timestamp::set(uint64_t **a1, __n128 *a2, int a3)
{
  v7 = a1 + 1;
  v6 = (char *)a1[1];
  if (v6)
  {
    while (1)
    {
      while (1)
      {
        v8 = v6;
        int v9 = *((_DWORD *)v6 + 8);
        if (v9 <= a3) {
          break;
        }
        v6 = *(char **)v8;
        v7 = (uint64_t **)v8;
        if (!*(void *)v8) {
          goto LABEL_8;
        }
      }
      if (v9 >= a3) {
        break;
      }
      v6 = (char *)*((void *)v8 + 1);
      if (!v6)
      {
        v7 = (uint64_t **)(v8 + 8);
        goto LABEL_8;
      }
    }
  }
  else
  {
    v8 = (char *)(a1 + 1);
LABEL_8:
    v10 = v8;
    v8 = (char *)operator new(0x38uLL);
    *((_DWORD *)v8 + 8) = a3;
    *((void *)v8 + 5) = 0;
    *((void *)v8 + 6) = 0;
    *(void *)v8 = 0;
    *((void *)v8 + 1) = 0;
    *((void *)v8 + 2) = v10;
    char *v7 = (uint64_t *)v8;
    v11 = (uint64_t *)**a1;
    v12 = (uint64_t *)v8;
    if (v11)
    {
      *a1 = v11;
      v12 = *v7;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v12);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  __n128 result = *a2;
  *(__n128 *)(v8 + 40) = *a2;
  return result;
}

void *Timestamp::Timestamp(void *a1, uint64_t a2, int a3)
{
  a1[2] = 0;
  a1[1] = 0;
  v6 = a1 + 1;
  *a1 = a1 + 1;
  v7 = operator new(0x38uLL);
  v7[8] = a3;
  *(void *)v7 = 0;
  *((void *)v7 + 1) = 0;
  *((void *)v7 + 2) = v6;
  void *v6 = v7;
  *a1 = v7;
  *((unsigned char *)v7 + 24) = 1;
  a1[2] = 1;
  *((void *)v7 + 5) = a2;
  *((void *)v7 + 6) = 0xAAAAAAAAAAAAAAAALL;
  return a1;
}

{
  void *v6;
  _DWORD *v7;

  a1[2] = 0;
  a1[1] = 0;
  v6 = a1 + 1;
  *a1 = a1 + 1;
  v7 = operator new(0x38uLL);
  v7[8] = a3;
  *(void *)v7 = 0;
  *((void *)v7 + 1) = 0;
  *((void *)v7 + 2) = v6;
  void *v6 = v7;
  *a1 = v7;
  *((unsigned char *)v7 + 24) = 1;
  a1[2] = 1;
  *((void *)v7 + 5) = a2;
  *((void *)v7 + 6) = 0xAAAAAAAAAAAAAAAALL;
  return a1;
}

uint64_t **Timestamp::Timestamp(uint64_t **a1, char *a2, char a3, int a4)
{
  v5 = a2;
  uint64_t v28 = *MEMORY[0x263EF8340];
  a1[1] = 0;
  v7 = a1 + 1;
  a1[2] = 0;
  *a1 = (uint64_t *)(a1 + 1);
  __p[2] = (void *)0x11AAAAAAAAAA0053;
  *(_OWORD *)__p = *(_OWORD *)"%Y-%m-%d-%H-%M-%S";
  if ((a3 & 0x10) != 0)
  {
    HIBYTE(__p[2]) = 19;
    strcpy((char *)__p, "%Y.%m.%d_%H-%M-%S%z");
  }
  *((void *)&v23 + 1) = 0xAAAAAAAA00000000;
  memset(&v24, 0, sizeof(v24));
  if (a2[23] < 0) {
    v5 = *(const char **)a2;
  }
  if (strptime(v5, (const char *)__p, &v24))
  {
    v24.tm_isdst = -1;
    *(void *)&unsigned long long v23 = mktime(&v24);
    if ((void)v23 != -1) {
      goto LABEL_15;
    }
    if (os_log_type_enabled(MEMORY[0x263EF8438], OS_LOG_TYPE_ERROR))
    {
      v19 = __error();
      v20 = strerror(*v19);
      *(_DWORD *)buf = 136315138;
      v27 = v20;
      _os_log_error_impl(&dword_26368A000, MEMORY[0x263EF8438], OS_LOG_TYPE_ERROR, "Failed to convert to absolute time. Error: %s\n", buf, 0xCu);
      unsigned long long v23 = 0uLL;
      if ((gettimeofday((timeval *)&v23, 0) & 0x80000000) == 0) {
        goto LABEL_15;
      }
    }
    else
    {
      unsigned long long v23 = 0uLL;
      if ((gettimeofday((timeval *)&v23, 0) & 0x80000000) == 0) {
        goto LABEL_15;
      }
    }
    if (!os_log_type_enabled(MEMORY[0x263EF8438], OS_LOG_TYPE_ERROR)) {
      goto LABEL_15;
    }
    v8 = __error();
    int v9 = strerror(*v8);
    *(_DWORD *)buf = 136315138;
    v27 = v9;
    v10 = MEMORY[0x263EF8438];
    v11 = "Failed to get current time after absolute time conversion failed. Error: %s\n";
    goto LABEL_32;
  }
  if (os_log_type_enabled(MEMORY[0x263EF8438], OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_26368A000, MEMORY[0x263EF8438], OS_LOG_TYPE_DEFAULT, "Failed to convert time from string format\n", buf, 2u);
  }
  unsigned long long v23 = 0uLL;
  if (gettimeofday((timeval *)&v23, 0) < 0 && os_log_type_enabled(MEMORY[0x263EF8438], OS_LOG_TYPE_ERROR))
  {
    v21 = __error();
    v22 = strerror(*v21);
    *(_DWORD *)buf = 136315138;
    v27 = v22;
    v10 = MEMORY[0x263EF8438];
    v11 = "Failed to get current time after conversion failure. Error: %s\n";
LABEL_32:
    _os_log_error_impl(&dword_26368A000, v10, OS_LOG_TYPE_ERROR, v11, buf, 0xCu);
  }
LABEL_15:
  v12 = *v7;
  v13 = v7;
  if (*v7)
  {
    while (1)
    {
      while (1)
      {
        v13 = (uint64_t **)v12;
        int v14 = *((_DWORD *)v12 + 8);
        if (v14 <= a4) {
          break;
        }
        v12 = *v13;
        v7 = v13;
        if (!*v13) {
          goto LABEL_22;
        }
      }
      if (v14 >= a4) {
        break;
      }
      v12 = v13[1];
      if (!v12)
      {
        v7 = v13 + 1;
        goto LABEL_22;
      }
    }
    *(_OWORD *)(v13 + 5) = v23;
    if (SHIBYTE(__p[2]) < 0) {
      goto LABEL_25;
    }
  }
  else
  {
LABEL_22:
    v15 = (char *)operator new(0x38uLL);
    *((_DWORD *)v15 + 8) = a4;
    *((void *)v15 + 5) = 0;
    *((void *)v15 + 6) = 0;
    *(void *)v15 = 0;
    *((void *)v15 + 1) = 0;
    *((void *)v15 + 2) = v13;
    _DWORD *v7 = (uint64_t *)v15;
    v16 = (uint64_t *)**a1;
    v17 = (uint64_t *)v15;
    if (v16)
    {
      *a1 = v16;
      v17 = *v7;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v17);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    *(_OWORD *)(v15 + 40) = v23;
    if (SHIBYTE(__p[2]) < 0) {
LABEL_25:
    }
      operator delete(__p[0]);
  }
  return a1;
}

void sub_26368C098(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy(v24, *(void **)(v24 + 8));
  _Unwind_Resume(a1);
}

uint64_t Timestamp::get(uint64_t a1, void *a2, int a3)
{
  *a2 = 0;
  a2[1] = 0;
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v3 = a1 + 8;
  uint64_t v4 = v5;
  if (!v5) {
    return 0;
  }
  uint64_t v6 = v3;
  do
  {
    int v7 = *(_DWORD *)(v4 + 32);
    BOOL v8 = v7 < a3;
    if (v7 >= a3) {
      int v9 = (uint64_t *)v4;
    }
    else {
      int v9 = (uint64_t *)(v4 + 8);
    }
    if (!v8) {
      uint64_t v6 = v4;
    }
    uint64_t v4 = *v9;
  }
  while (*v9);
  if (v6 == v3 || *(_DWORD *)(v6 + 32) > a3) {
    return 0;
  }
  *(_OWORD *)a2 = *(_OWORD *)(v6 + 40);
  return 1;
}

uint64_t Timestamp::now(timeval *this, timeval *a2)
{
  return gettimeofday(this, 0);
}

uint64_t Timestamp::asString@<X0>(uint64_t a1@<X0>, int a2@<W1>, char a3@<W2>, unsigned char *a4@<X8>)
{
  uint64_t v48 = *MEMORY[0x263EF8340];
  unint64_t v42 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v8 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v41[7] = v8;
  v41[8] = v8;
  v41[5] = v8;
  v41[6] = v8;
  v41[3] = v8;
  v41[4] = v8;
  v41[1] = v8;
  v41[2] = v8;
  long long v40 = v8;
  v41[0] = v8;
  *(_OWORD *)__p = v8;
  long long v39 = v8;
  long long v36 = v8;
  long long v37 = v8;
  long long v34 = v8;
  long long v35 = v8;
  long long v33 = v8;
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v33);
  uint64_t v11 = *(void *)(a1 + 8);
  uint64_t v10 = a1 + 8;
  uint64_t v9 = v11;
  if (!v11) {
    goto LABEL_11;
  }
  uint64_t v12 = v10;
  do
  {
    int v13 = *(_DWORD *)(v9 + 32);
    BOOL v14 = v13 < a2;
    if (v13 >= a2) {
      v15 = (uint64_t *)v9;
    }
    else {
      v15 = (uint64_t *)(v9 + 8);
    }
    if (!v14) {
      uint64_t v12 = v9;
    }
    uint64_t v9 = *v15;
  }
  while (*v15);
  if (v12 != v10 && *(_DWORD *)(v12 + 32) <= a2)
  {
    time_t v16 = *(void *)(v12 + 40);
    if ((a3 & 0x11) != 0)
    {
LABEL_12:
      v31.tm_zone = (char *)0xAAAAAAAAAAAAAAAALL;
      time_t v32 = v16;
      *(void *)&long long v17 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v17 + 1) = 0xAAAAAAAAAAAAAAAALL;
      *(_OWORD *)&v31.tm_mon = v17;
      *(_OWORD *)&v31.tm_isdst = v17;
      *(_OWORD *)&v31.tm_sec = v17;
      localtime_r(&v32, &v31);
      long long v46 = 0u;
      long long v47 = 0u;
      *(_OWORD *)__s = 0u;
      long long v45 = 0u;
      if ((a3 & 0x10) != 0) {
        v18 = "%Y.%m.%d_%H-%M-%S%z";
      }
      else {
        v18 = "%Y-%m-%d-%H-%M-%S";
      }
      strftime(__s, 0x40uLL, v18, &v31);
      size_t v19 = strlen(__s);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v34, (uint64_t)__s, v19);
      if ((a3 & 8) != 0)
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v34, (uint64_t)"-", 1);
        uint64_t v20 = v34;
        v21 = (char *)&v34 + *(void *)(v34 - 24);
        if (*((_DWORD *)v21 + 36) == -1)
        {
          std::ios_base::getloc((const std::ios_base *)((char *)&v34 + *(void *)(v34 - 24)));
          v22 = std::locale::use_facet(&v43, MEMORY[0x263F8C108]);
          ((void (*)(const std::locale::facet *, uint64_t))v22->__vftable[2].~facet_0)(v22, 32);
          std::locale::~locale(&v43);
          uint64_t v20 = v34;
        }
        *((_DWORD *)v21 + 36) = 48;
        *(void *)((char *)&v35 + *(void *)(v20 - 24) + 8) = 3;
        std::ostream::operator<<();
      }
      goto LABEL_23;
    }
  }
  else
  {
LABEL_11:
    time_t v16 = 0;
    if ((a3 & 0x11) != 0) {
      goto LABEL_12;
    }
  }
  std::ostream::operator<<();
  if ((a3 & 4) != 0 || (a3 & 8) != 0)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v34, (uint64_t)".", 1);
    std::ostream::operator<<();
  }
LABEL_23:
  if ((BYTE8(v40) & 0x10) != 0)
  {
    uint64_t v24 = v40;
    if ((unint64_t)v40 < *((void *)&v37 + 1))
    {
      *(void *)&long long v40 = *((void *)&v37 + 1);
      uint64_t v24 = *((void *)&v37 + 1);
    }
    v25 = (const void *)v37;
    size_t v23 = v24 - v37;
    if ((unint64_t)(v24 - v37) >= 0x7FFFFFFFFFFFFFF8) {
      goto LABEL_40;
    }
  }
  else
  {
    if ((BYTE8(v40) & 8) == 0)
    {
      size_t v23 = 0;
      a4[23] = 0;
      goto LABEL_36;
    }
    v25 = (const void *)*((void *)&v35 + 1);
    size_t v23 = *((void *)&v36 + 1) - *((void *)&v35 + 1);
    if (*((void *)&v36 + 1) - *((void *)&v35 + 1) >= 0x7FFFFFFFFFFFFFF8uLL) {
LABEL_40:
    }
      std::string::__throw_length_error[abi:ne180100]();
  }
  if (v23 >= 0x17)
  {
    uint64_t v26 = (v23 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v23 | 7) != 0x17) {
      uint64_t v26 = v23 | 7;
    }
    uint64_t v27 = v26 + 1;
    uint64_t v28 = operator new(v26 + 1);
    *((void *)a4 + 1) = v23;
    *((void *)a4 + 2) = v27 | 0x8000000000000000;
    *(void *)a4 = v28;
    a4 = v28;
    goto LABEL_35;
  }
  a4[23] = v23;
  if (v23) {
LABEL_35:
  }
    memmove(a4, v25, v23);
LABEL_36:
  a4[v23] = 0;
  *(void *)&long long v33 = *MEMORY[0x263F8C2B8];
  uint64_t v29 = *(void *)(MEMORY[0x263F8C2B8] + 72);
  *(void *)((char *)&v33 + *(void *)(v33 - 24)) = *(void *)(MEMORY[0x263F8C2B8] + 64);
  *(void *)&long long v34 = v29;
  *((void *)&v34 + 1) = MEMORY[0x263F8C318] + 16;
  if (SHIBYTE(v39) < 0) {
    operator delete(__p[1]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x263E69630](v41);
}

void sub_26368C5CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_26368C5E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  std::locale::~locale((std::locale *)(v9 - 136));
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_26368C5FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_26368C614(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_26368C628(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = MEMORY[0x263F8C328] + 104;
  *(void *)(a1 + 128) = MEMORY[0x263F8C328] + 104;
  uint64_t v3 = a1 + 16;
  uint64_t v4 = MEMORY[0x263F8C328] + 64;
  *(void *)(a1 + 16) = MEMORY[0x263F8C328] + 64;
  uint64_t v5 = (void *)MEMORY[0x263F8C2B8];
  uint64_t v6 = *(void *)(MEMORY[0x263F8C2B8] + 24);
  uint64_t v7 = *(void *)(MEMORY[0x263F8C2B8] + 16);
  *(void *)a1 = v7;
  *(void *)(a1 + *(void *)(v7 - 24)) = v6;
  *(void *)(a1 + 8) = 0;
  long long v8 = (std::ios_base *)(a1 + *(void *)(*(void *)a1 - 24));
  std::ios_base::init(v8, (void *)(a1 + 24));
  uint64_t v9 = MEMORY[0x263F8C328] + 24;
  v8[1].__vftable = 0;
  v8[1].__fmtflags_ = -1;
  uint64_t v10 = v5[5];
  uint64_t v11 = v5[4];
  *(void *)(a1 + 16) = v11;
  *(void *)(v3 + *(void *)(v11 - 24)) = v10;
  uint64_t v12 = v5[1];
  *(void *)a1 = v12;
  *(void *)(a1 + *(void *)(v12 - 24)) = v5[6];
  *(void *)a1 = v9;
  *(void *)(a1 + 128) = v2;
  *(void *)(a1 + 16) = v4;
  std::streambuf::basic_streambuf();
  *(void *)(a1 + 24) = MEMORY[0x263F8C318] + 16;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = 24;
  return a1;
}

void sub_26368C8EC(_Unwind_Exception *a1)
{
  std::iostream::~basic_iostream();
  MEMORY[0x263E69630](v1);
  _Unwind_Resume(a1);
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream(uint64_t a1)
{
  uint64_t v2 = MEMORY[0x263F8C2B8];
  uint64_t v3 = *MEMORY[0x263F8C2B8];
  *(void *)a1 = *MEMORY[0x263F8C2B8];
  uint64_t v4 = *(void *)(v2 + 72);
  *(void *)(a1 + *(void *)(v3 - 24)) = *(void *)(v2 + 64);
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 111) < 0) {
    operator delete(*(void **)(a1 + 88));
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x263E69630](a1 + 128);
  return a1;
}

uint64_t *Timestamp::convert(uint64_t a1)
{
  memset(v11, 170, sizeof(v11));
  if (*(char *)(a1 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
  }
  else {
    std::string __p = *(std::string *)a1;
  }
  Timestamp::Timestamp(v11, (char *)&__p, 9, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    uint64_t v1 = v11[1];
    if (!v11[1])
    {
LABEL_18:
      long long v8 = 0;
      goto LABEL_19;
    }
  }
  else
  {
    uint64_t v1 = v11[1];
    if (!v11[1]) {
      goto LABEL_18;
    }
  }
  uint64_t v2 = &v11[1];
  uint64_t v3 = v1;
  do
  {
    uint64_t v4 = (uint64_t **)v3;
    uint64_t v5 = v2;
    int v6 = *((_DWORD *)v3 + 8);
    if (v6 >= 0) {
      uint64_t v2 = (uint64_t **)v3;
    }
    else {
      ++v3;
    }
    uint64_t v3 = (uint64_t *)*v3;
  }
  while (v3);
  if (v2 == &v11[1]) {
    goto LABEL_18;
  }
  uint64_t v7 = v6 >= 0 ? v4 : v5;
  if (*((int *)v7 + 8) > 0) {
    goto LABEL_18;
  }
  if (v6 < 0) {
    uint64_t v4 = v5;
  }
  long long v8 = v4[5];
LABEL_19:
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v11, v1);
  return v8;
}

void sub_26368CB58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::string::__throw_length_error[abi:ne180100]()
{
}

void std::__throw_length_error[abi:ne180100](const char *a1)
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::length_error::length_error[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_2655D4790, MEMORY[0x263F8C060]);
}

void sub_26368CBD4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::length_error::length_error[abi:ne180100](std::logic_error *a1, const char *a2)
{
  __n128 result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C388] + 16);
  return result;
}

void __clang_call_terminate(void *a1)
{
}

void std::string::__init_copy_ctor_external(std::string *this, const std::string::value_type *__s, std::string::size_type __sz)
{
  uint64_t v5 = this;
  if (__sz > 0x16)
  {
    if (__sz >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    std::string::size_type v6 = (__sz & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__sz | 7) != 0x17) {
      std::string::size_type v6 = __sz | 7;
    }
    std::string::size_type v7 = v6 + 1;
    long long v8 = (std::string *)operator new(v6 + 1);
    v5->__r_.__value_.__l.__size_ = __sz;
    v5->__r_.__value_.__r.__words[2] = v7 | 0x8000000000000000;
    v5->__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
    uint64_t v5 = v8;
  }
  else
  {
    *((unsigned char *)&this->__r_.__value_.__s + 23) = __sz;
  }

  memmove(v5, __s, __sz + 1);
}

void std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy(a1, a2[1]);
    operator delete(a2);
  }
}

uint64_t *std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  *((unsigned char *)a2 + 24) = a2 == result;
  if (a2 == result) {
    return result;
  }
  while (1)
  {
    uint64_t v2 = a2[2];
    if (*(unsigned char *)(v2 + 24)) {
      return result;
    }
    uint64_t v3 = *(uint64_t **)(v2 + 16);
    uint64_t v4 = *v3;
    if (*v3 != v2) {
      break;
    }
    uint64_t v7 = v3[1];
    if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), uint64_t v5 = (unsigned char *)(v7 + 24), v8))
    {
      if (*(uint64_t **)v2 == a2)
      {
        *(unsigned char *)(v2 + 24) = 1;
        *((unsigned char *)v3 + 24) = 0;
        uint64_t v11 = *(void *)(v2 + 8);
        *uint64_t v3 = v11;
        if (v11) {
          goto LABEL_15;
        }
      }
      else
      {
        uint64_t v9 = *(uint64_t **)(v2 + 8);
        uint64_t v10 = *v9;
        *(void *)(v2 + 8) = *v9;
        if (v10)
        {
          *(void *)(v10 + 16) = v2;
          uint64_t v3 = *(uint64_t **)(v2 + 16);
        }
        v9[2] = (uint64_t)v3;
        *(void *)(*(void *)(v2 + 16) + 8 * (**(void **)(v2 + 16) != v2)) = v9;
        *uint64_t v9 = v2;
        *(void *)(v2 + 16) = v9;
        uint64_t v3 = (uint64_t *)v9[2];
        uint64_t v2 = *v3;
        *((unsigned char *)v9 + 24) = 1;
        *((unsigned char *)v3 + 24) = 0;
        uint64_t v11 = *(void *)(v2 + 8);
        *uint64_t v3 = v11;
        if (v11) {
LABEL_15:
        }
          *(void *)(v11 + 16) = v3;
      }
      *(void *)(v2 + 16) = v3[2];
      *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v2;
      *(void *)(v2 + 8) = v3;
      v3[2] = v2;
      return result;
    }
LABEL_3:
    *(unsigned char *)(v2 + 24) = 1;
    a2 = v3;
    *((unsigned char *)v3 + 24) = v3 == result;
    unsigned char *v5 = 1;
    if (v3 == result) {
      return result;
    }
  }
  if (v4)
  {
    int v6 = *(unsigned __int8 *)(v4 + 24);
    uint64_t v5 = (unsigned char *)(v4 + 24);
    if (!v6) {
      goto LABEL_3;
    }
  }
  if (*(uint64_t **)v2 == a2)
  {
    uint64_t v12 = a2[1];
    *(void *)uint64_t v2 = v12;
    if (v12)
    {
      *(void *)(v12 + 16) = v2;
      uint64_t v3 = *(uint64_t **)(v2 + 16);
    }
    a2[2] = (uint64_t)v3;
    *(void *)(*(void *)(v2 + 16) + 8 * (**(void **)(v2 + 16) != v2)) = a2;
    a2[1] = v2;
    *(void *)(v2 + 16) = a2;
    uint64_t v3 = (uint64_t *)a2[2];
  }
  else
  {
    a2 = (uint64_t *)a2[2];
  }
  *((unsigned char *)a2 + 24) = 1;
  *((unsigned char *)v3 + 24) = 0;
  int v13 = (uint64_t *)v3[1];
  uint64_t v14 = *v13;
  v3[1] = *v13;
  if (v14) {
    *(void *)(v14 + 16) = v3;
  }
  v13[2] = v3[2];
  *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v13;
  *int v13 = (uint64_t)v3;
  v3[2] = (uint64_t)v13;
  return result;
}

uint64_t *std::map<Timestamp::TimeDomain,timeval>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<Timestamp::TimeDomain,timeval>,std::__tree_node<std::__value_type<Timestamp::TimeDomain,timeval>,void *> *,long>>>(uint64_t *result, void *a2, void *a3)
{
  if (a2 != a3)
  {
    uint64_t v4 = a2;
    uint64_t v5 = result;
    int v6 = result + 1;
    do
    {
      int v7 = *((_DWORD *)v4 + 8);
      int v8 = (uint64_t *)v5[1];
      uint64_t v9 = v6;
      if ((uint64_t *)*v5 == v6) {
        goto LABEL_10;
      }
      uint64_t v10 = v5[1];
      uint64_t v11 = v6;
      if (v8)
      {
        do
        {
          uint64_t v9 = (uint64_t *)v10;
          uint64_t v10 = *(void *)(v10 + 8);
        }
        while (v10);
      }
      else
      {
        do
        {
          uint64_t v9 = (uint64_t *)v11[2];
          BOOL v12 = *v9 == (void)v11;
          uint64_t v11 = v9;
        }
        while (v12);
      }
      if (*((_DWORD *)v9 + 8) < v7)
      {
LABEL_10:
        if (v8) {
          int v13 = (uint64_t **)v9;
        }
        else {
          int v13 = (uint64_t **)v6;
        }
        if (v8) {
          uint64_t v14 = (uint64_t **)(v9 + 1);
        }
        else {
          uint64_t v14 = (uint64_t **)v6;
        }
        if (*v14) {
          goto LABEL_29;
        }
      }
      else
      {
        uint64_t v14 = (uint64_t **)v6;
        int v13 = (uint64_t **)v6;
        if (v8)
        {
          while (1)
          {
            while (1)
            {
              int v13 = (uint64_t **)v8;
              int v15 = *((_DWORD *)v8 + 8);
              if (v15 <= v7) {
                break;
              }
              int v8 = *v13;
              uint64_t v14 = v13;
              if (!*v13) {
                goto LABEL_25;
              }
            }
            if (v15 >= v7) {
              goto LABEL_29;
            }
            int v8 = v13[1];
            if (!v8)
            {
              uint64_t v14 = v13 + 1;
              break;
            }
          }
        }
      }
LABEL_25:
      time_t v16 = operator new(0x38uLL);
      uint64_t v17 = v4[6];
      v16[2] = *((_OWORD *)v4 + 2);
      *((void *)v16 + 6) = v17;
      *(void *)time_t v16 = 0;
      *((void *)v16 + 1) = 0;
      *((void *)v16 + 2) = v13;
      *uint64_t v14 = (uint64_t *)v16;
      uint64_t v18 = *(void *)*v5;
      if (v18)
      {
        uint64_t *v5 = v18;
        size_t v19 = *v14;
      }
      else
      {
        size_t v19 = (uint64_t *)v16;
      }
      __n128 result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v5[1], v19);
      ++v5[2];
LABEL_29:
      uint64_t v20 = (void *)v4[1];
      if (v20)
      {
        do
        {
          v21 = v20;
          uint64_t v20 = (void *)*v20;
        }
        while (v20);
      }
      else
      {
        do
        {
          v21 = (void *)v4[2];
          BOOL v12 = *v21 == (void)v4;
          uint64_t v4 = v21;
        }
        while (!v12);
      }
      uint64_t v4 = v21;
    }
    while (v21 != a3);
  }
  return result;
}

void *std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(void *a1, uint64_t a2, uint64_t a3)
{
  v13[0] = 0xAAAAAAAAAAAAAAAALL;
  v13[1] = 0xAAAAAAAAAAAAAAAALL;
  MEMORY[0x263E69470](v13, a1);
  if (LOBYTE(v13[0]))
  {
    uint64_t v6 = (uint64_t)a1 + *(void *)(*a1 - 24);
    uint64_t v7 = *(void *)(v6 + 40);
    int v8 = *(_DWORD *)(v6 + 8);
    int v9 = *(_DWORD *)(v6 + 144);
    if (v9 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)));
      uint64_t v10 = std::locale::use_facet(&v14, MEMORY[0x263F8C108]);
      int v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32);
      std::locale::~locale(&v14);
      *(_DWORD *)(v6 + 144) = v9;
    }
    if ((v8 & 0xB0) == 0x20) {
      uint64_t v11 = a2 + a3;
    }
    else {
      uint64_t v11 = a2;
    }
    if (!std::__pad_and_output[abi:ne180100]<char,std::char_traits<char>>(v7, a2, v11, a2 + a3, v6, (char)v9)) {
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) | 5);
    }
  }
  MEMORY[0x263E69480](v13);
  return a1;
}

void sub_26368D1AC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::locale a12)
{
  MEMORY[0x263E69480](&a10);
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v12 + *(void *)(*v12 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x26368D18CLL);
}

void sub_26368D200(_Unwind_Exception *a1)
{
}

uint64_t std::__pad_and_output[abi:ne180100]<char,std::char_traits<char>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int __c)
{
  uint64_t v6 = a1;
  if (a1)
  {
    uint64_t v11 = *(void *)(a5 + 24);
    if (v11 <= a4 - a2) {
      size_t v12 = 0;
    }
    else {
      size_t v12 = v11 - (a4 - a2);
    }
    if (a3 - a2 >= 1 && (*(uint64_t (**)(uint64_t))(*(void *)a1 + 96))(a1) != a3 - a2) {
      return 0;
    }
    if ((uint64_t)v12 >= 1)
    {
      memset(__b, 170, sizeof(__b));
      if (v12 >= 0x7FFFFFFFFFFFFFF8) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      if (v12 >= 0x17)
      {
        uint64_t v14 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v12 | 7) != 0x17) {
          uint64_t v14 = v12 | 7;
        }
        uint64_t v15 = v14 + 1;
        int v13 = (void **)operator new(v14 + 1);
        __b[1] = (void *)v12;
        __b[2] = (void *)(v15 | 0x8000000000000000);
        __b[0] = v13;
      }
      else
      {
        HIBYTE(__b[2]) = v12;
        int v13 = __b;
      }
      memset(v13, __c, v12);
      *((unsigned char *)v13 + v12) = 0;
      if (SHIBYTE(__b[2]) >= 0) {
        time_t v16 = __b;
      }
      else {
        time_t v16 = (void **)__b[0];
      }
      uint64_t v17 = (*(uint64_t (**)(uint64_t, void **, size_t))(*(void *)v6 + 96))(v6, v16, v12);
      uint64_t v18 = v17;
      if (SHIBYTE(__b[2]) < 0)
      {
        operator delete(__b[0]);
        if (v18 != v12) {
          return 0;
        }
      }
      else if (v17 != v12)
      {
        return 0;
      }
    }
    uint64_t v19 = a4 - a3;
    if (v19 < 1 || (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v6 + 96))(v6, a3, v19) == v19)
    {
      *(void *)(a5 + 24) = 0;
      return v6;
    }
    return 0;
  }
  return v6;
}

void sub_26368D3F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void metric::sendCoreAnalyticsEvent(const void **a1, xpc_object_t *a2)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  int v2 = *((char *)a1 + 23);
  if (v2 >= 0) {
    size_t v3 = *((unsigned __int8 *)a1 + 23);
  }
  else {
    size_t v3 = (size_t)a1[1];
  }
  unint64_t v4 = v3 + 20;
  memset(__p, 170, 24);
  if (v3 + 20 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v4 >= 0x17)
  {
    uint64_t v8 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v8 = v4 | 7;
    }
    uint64_t v9 = v8 + 1;
    uint64_t v10 = (char *)operator new(v8 + 1);
    __p[1] = (void *)(v3 + 20);
    __p[2] = (void *)(v9 | 0x8000000000000000);
    __p[0] = v10;
    uint64_t v7 = v10 + 20;
    *((_DWORD *)v10 + 4) = 779710063;
    *(_OWORD *)uint64_t v10 = *(_OWORD *)"com.apple.Telephony.";
  }
  else
  {
    HIDWORD(__p[2]) = 0;
    HIBYTE(__p[2]) = v3 + 20;
    uint64_t v7 = (char *)&__p[2] + 4;
    LODWORD(__p[2]) = 779710063;
    *(_OWORD *)std::string __p = *(_OWORD *)"com.apple.Telephony.";
    if (!v3) {
      goto LABEL_15;
    }
  }
  if (v2 >= 0) {
    uint64_t v11 = a1;
  }
  else {
    uint64_t v11 = *a1;
  }
  memmove(v7, v11, v3);
LABEL_15:
  v7[v3] = 0;
  size_t v12 = GetOsLogContext()[1];
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    int v13 = __p;
    if (SHIBYTE(__p[2]) < 0) {
      int v13 = (void **)__p[0];
    }
    *(_DWORD *)buf = 136315138;
    uint64_t v17 = v13;
    _os_log_impl(&dword_26368A000, v12, OS_LOG_TYPE_DEFAULT, "Sending CoreAnalytics event: %s", buf, 0xCu);
  }
  xpc_object_t object = *a2;
  if (*a2) {
    xpc_retain(*a2);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  analytics_send_event_lazy();
  xpc_release(object);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
}

void sub_26368D654(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, xpc_object_t object, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

xpc_object_t ___ZN6metric22sendCoreAnalyticsEventENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEN3xpc4dictE_block_invoke(uint64_t a1)
{
  xpc_object_t v1 = *(xpc_object_t *)(a1 + 32);
  if (v1) {
    xpc_retain(*(xpc_object_t *)(a1 + 32));
  }
  else {
    xpc_object_t v1 = xpc_null_create();
  }
  xpc_object_t v2 = xpc_null_create();
  xpc_release(v2);
  return v1;
}

void sub_26368D6F0(_Unwind_Exception *a1)
{
  xpc_release(v1);
  _Unwind_Resume(a1);
}

xpc_object_t __copy_helper_block_e8_32c15_ZTSN3xpc4dictE(uint64_t a1, uint64_t a2)
{
  size_t v3 = *(void **)(a2 + 32);
  *(void *)(a1 + 32) = v3;
  if (v3) {
    return xpc_retain(v3);
  }
  xpc_object_t result = xpc_null_create();
  *(void *)(a1 + 32) = result;
  return result;
}

void __destroy_helper_block_e8_32c15_ZTSN3xpc4dictE(uint64_t a1)
{
  *(void *)(a1 + 32) = 0;
}

char *ABMGetRootVersionString@<X0>(uint64_t a1@<X8>)
{
  xpc_object_t result = (char *)operator new(0x28uLL);
  *(void *)a1 = result;
  *(_OWORD *)(a1 + 8) = xmmword_2637A4D60;
  strcpy(result, "AppleBasebandServices_Manager-1211");
  return result;
}

uint64_t hasBasebandEntitlement(xpc_object_t *a1, char a2)
{
  uint64_t v4 = MEMORY[0x263E6A240](*a1);
  uint64_t v5 = MEMORY[0x263EF8708];
  if (v4 == MEMORY[0x263EF8708])
  {
    xpc_connection_t remote_connection = xpc_dictionary_get_remote_connection(*a1);
    if (remote_connection)
    {
      xpc_object_t v8 = remote_connection;
      xpc_retain(remote_connection);
    }
    else
    {
      xpc_object_t v8 = xpc_null_create();
    }
    if (MEMORY[0x263E6A240](v8) != MEMORY[0x263EF86F0])
    {
      uint64_t v6 = 0;
LABEL_99:
      xpc_release(v8);
      return v6;
    }
    *(void *)&long long v9 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v9 + 1) = 0xAAAAAAAAAAAAAAAALL;
    long long v49 = v9;
    long long v50 = v9;
    xpc_connection_get_audit_token();
    uint64_t v10 = (void *)xpc_copy_entitlement_for_token();
    if (v10 || (uint64_t v10 = xpc_null_create()) != 0)
    {
      if (MEMORY[0x263E6A240](v10) == v5)
      {
        xpc_retain(v10);
        xpc_object_t v11 = v10;
      }
      else
      {
        xpc_object_t v11 = xpc_null_create();
      }
    }
    else
    {
      xpc_object_t v11 = xpc_null_create();
      uint64_t v10 = 0;
    }
    xpc_release(v10);
    xpc_object_t v12 = xpc_null_create();
    uint64_t v13 = MEMORY[0x263E6A240](v11);
    uint64_t v14 = MEMORY[0x263EF86D8];
    if (v13 != v5)
    {
LABEL_23:
      xpc_object_t v46 = v12;
      if (MEMORY[0x263E6A240](v12) != v14)
      {
        uint64_t v6 = 0;
LABEL_41:
        if ((a2 & 1) == 0)
        {
          if (MEMORY[0x263E6A240](v11) == v5)
          {
            xpc_object_t value = xpc_dictionary_get_value(v11, (const char *)kKeyEntitlementBasebanddAllow);
            xpc_object_t v33 = value;
            std::string __p = value;
            if (value)
            {
              xpc_retain(value);
            }
            else
            {
              xpc_object_t v33 = xpc_null_create();
              std::string __p = v33;
            }
            if (MEMORY[0x263E6A240](v33) == MEMORY[0x263EF8758])
            {
              uint64_t v6 = 0;
            }
            else
            {
              uint64_t v6 = xpc::dyn_cast_or_default((xpc *)&__p, 0);
              xpc_object_t v33 = __p;
            }
            xpc_release(v33);
          }
          else
          {
            uint64_t v6 = 0;
          }
        }
LABEL_98:
        xpc_release(v12);
        xpc_release(v11);
        goto LABEL_99;
      }
      if (v12)
      {
        xpc_retain(v12);
        xpc_object_t v19 = v12;
      }
      else
      {
        xpc_object_t v19 = xpc_null_create();
        if (!v19)
        {
          xpc_object_t v19 = xpc_null_create();
          uint64_t v20 = 0;
LABEL_29:
          xpc_release(v20);
          if (v12)
          {
            xpc_retain(v12);
            xpc_object_t v21 = v12;
          }
          else
          {
            xpc_object_t v21 = xpc_null_create();
          }
          xpc_object_t v43 = v11;
          if (MEMORY[0x263E6A240](v12) == v14)
          {
            size_t count = xpc_array_get_count(v12);
            if (v21) {
              goto LABEL_34;
            }
          }
          else
          {
            size_t count = 0;
            if (v21)
            {
LABEL_34:
              xpc_retain(v21);
              xpc_object_t object = v21;
              goto LABEL_37;
            }
          }
          xpc_object_t object = xpc_null_create();
LABEL_37:
          xpc_release(v21);
          if (!count && v19 == object)
          {
            char v44 = 0;
LABEL_40:
            xpc_release(object);
            xpc_release(v19);
            xpc_object_t v11 = v43;
            uint64_t v6 = v44 & 1;
            if (v44) {
              goto LABEL_98;
            }
            goto LABEL_41;
          }
          if (a2)
          {
            char v44 = 0;
            size_t v23 = 0;
            size_t v24 = count - 1;
            while (1)
            {
              xpc_object_t v48 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
              xpc_object_t v25 = xpc_array_get_value(v19, v23);
              xpc_object_t v48 = v25;
              if (v25) {
                xpc_retain(v25);
              }
              else {
                xpc_object_t v48 = xpc_null_create();
              }
              memset(v47, 170, sizeof(v47));
              std::string __p = 0;
              uint64_t v52 = 0;
              uint64_t v53 = 0;
              xpc::dyn_cast_or_default();
              if (SHIBYTE(v53) < 0) {
                operator delete(__p);
              }
              int v26 = SHIBYTE(v47[2]);
              uint64_t v27 = SHIBYTE(v47[2]) >= 0 ? (void *)HIBYTE(v47[2]) : v47[1];
              if (v27 != (void *)strlen((const char *)kBasebandXpcRestricted)) {
                break;
              }
              uint64_t v28 = SHIBYTE(v47[2]) >= 0 ? v47 : (void **)v47[0];
              if (memcmp(v28, (const void *)kBasebandXpcRestricted, (size_t)v27)) {
                break;
              }
              int v29 = 0;
              char v44 = 1;
              if (v26 < 0) {
                goto LABEL_60;
              }
LABEL_61:
              xpc_release(v48);
              xpc_object_t v12 = v46;
              if (v29)
              {
                size_t v30 = v23 + 1;
                BOOL v31 = v24 == v23++;
                if (!v31) {
                  continue;
                }
                size_t v23 = v30;
                if (v19 != object) {
                  continue;
                }
              }
              goto LABEL_40;
            }
            int v29 = 1;
            if ((v26 & 0x80000000) == 0) {
              goto LABEL_61;
            }
LABEL_60:
            operator delete(v47[0]);
            goto LABEL_61;
          }
          char v44 = 0;
          size_t v34 = 0;
          size_t v35 = count - 1;
          while (1)
          {
            xpc_object_t v48 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
            xpc_object_t v36 = xpc_array_get_value(v19, v34);
            xpc_object_t v48 = v36;
            if (v36) {
              xpc_retain(v36);
            }
            else {
              xpc_object_t v48 = xpc_null_create();
            }
            memset(v47, 170, sizeof(v47));
            std::string __p = 0;
            uint64_t v52 = 0;
            uint64_t v53 = 0;
            xpc::dyn_cast_or_default();
            if (SHIBYTE(v53) < 0) {
              operator delete(__p);
            }
            int v37 = SHIBYTE(v47[2]);
            v38 = SHIBYTE(v47[2]) >= 0 ? (void *)HIBYTE(v47[2]) : v47[1];
            if (v38 != (void *)strlen((const char *)kBasebandXpc)) {
              break;
            }
            long long v39 = SHIBYTE(v47[2]) >= 0 ? v47 : (void **)v47[0];
            if (memcmp(v39, (const void *)kBasebandXpc, (size_t)v38)) {
              break;
            }
            int v40 = 0;
            char v44 = 1;
            if (v37 < 0) {
              goto LABEL_85;
            }
LABEL_86:
            xpc_release(v48);
            xpc_object_t v12 = v46;
            if (v40)
            {
              size_t v41 = v34 + 1;
              BOOL v31 = v35 == v34++;
              if (!v31) {
                continue;
              }
              size_t v34 = v41;
              if (v19 != object) {
                continue;
              }
            }
            goto LABEL_40;
          }
          int v40 = 1;
          if ((v37 & 0x80000000) == 0) {
            goto LABEL_86;
          }
LABEL_85:
          operator delete(v47[0]);
          goto LABEL_86;
        }
      }
      xpc_retain(v19);
      uint64_t v20 = v19;
      goto LABEL_29;
    }
    xpc_object_t v15 = xpc_dictionary_get_value(v11, (const char *)kKeyEntitlementFineGrained);
    xpc_object_t v16 = v15;
    if (v15)
    {
      xpc_retain(v15);
    }
    else
    {
      xpc_object_t v16 = xpc_null_create();
      if (!v16)
      {
        xpc_object_t v17 = xpc_null_create();
        xpc_object_t v16 = 0;
LABEL_22:
        xpc_release(v16);
        xpc_object_t v18 = xpc_null_create();
        xpc_release(v12);
        xpc_release(v18);
        xpc_object_t v12 = v17;
        goto LABEL_23;
      }
    }
    if (MEMORY[0x263E6A240](v16) == v14)
    {
      xpc_retain(v16);
      xpc_object_t v17 = v16;
    }
    else
    {
      xpc_object_t v17 = xpc_null_create();
    }
    goto LABEL_22;
  }
  return 0;
}

void sub_26368DD64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t a9, uint64_t a10, xpc_object_t a11, xpc_object_t a12, uint64_t a13, uint64_t a14, uint64_t a15, xpc_object_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,xpc_object_t object,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  xpc_release(object);
  xpc_release(a12);
  xpc_release(v28);
  xpc_release(v27);
  _Unwind_Resume(a1);
}

uint64_t data::TransportService::ThrottlingConfig::asString@<X0>(data::TransportService::ThrottlingConfig *this@<X0>, unsigned char *a2@<X8>)
{
  unint64_t v24 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v23[7] = v4;
  v23[8] = v4;
  v23[5] = v4;
  v23[6] = v4;
  v23[3] = v4;
  v23[4] = v4;
  v23[1] = v4;
  v23[2] = v4;
  long long v22 = v4;
  v23[0] = v4;
  *(_OWORD *)std::string __p = v4;
  long long v21 = v4;
  long long v18 = v4;
  *(_OWORD *)__src = v4;
  long long v16 = v4;
  long long v17 = v4;
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v16);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v16, (uint64_t)"enabled ", 8);
  uint64_t v6 = "???";
  if (!*(_DWORD *)this) {
    uint64_t v6 = "Disabled";
  }
  if (*(_DWORD *)this == 1) {
    uint64_t v7 = "Enabled";
  }
  else {
    uint64_t v7 = v6;
  }
  size_t v8 = strlen(v7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)v7, v8);
  if (*(_DWORD *)this == 1)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v16, (uint64_t)", timeout ", 10);
    std::ostream::operator<<();
  }
  if ((BYTE8(v22) & 0x10) != 0)
  {
    uint64_t v10 = (unsigned char *)v22;
    if ((void *)v22 < __src[1])
    {
      *(void **)&long long v22 = __src[1];
      uint64_t v10 = __src[1];
    }
    xpc_object_t v11 = __src[0];
    size_t v9 = v10 - (char *)__src[0];
    if ((unint64_t)(v10 - (char *)__src[0]) >= 0x7FFFFFFFFFFFFFF8) {
      goto LABEL_25;
    }
  }
  else
  {
    if ((BYTE8(v22) & 8) == 0)
    {
      size_t v9 = 0;
      a2[23] = 0;
      goto LABEL_21;
    }
    xpc_object_t v11 = (const void *)*((void *)&v17 + 1);
    size_t v9 = *((void *)&v18 + 1) - *((void *)&v17 + 1);
    if (*((void *)&v18 + 1) - *((void *)&v17 + 1) >= 0x7FFFFFFFFFFFFFF8uLL) {
LABEL_25:
    }
      std::string::__throw_length_error[abi:ne180100]();
  }
  if (v9 >= 0x17)
  {
    uint64_t v12 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v12 = v9 | 7;
    }
    uint64_t v13 = v12 + 1;
    uint64_t v14 = operator new(v12 + 1);
    *((void *)a2 + 1) = v9;
    *((void *)a2 + 2) = v13 | 0x8000000000000000;
    *(void *)a2 = v14;
    a2 = v14;
    goto LABEL_20;
  }
  a2[23] = v9;
  if (v9) {
LABEL_20:
  }
    memmove(a2, v11, v9);
LABEL_21:
  a2[v9] = 0;
  *(void *)&long long v16 = *MEMORY[0x263F8C2C8];
  *(void *)((char *)&v16 + *(void *)(v16 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  *((void *)&v16 + 1) = MEMORY[0x263F8C318] + 16;
  if (SHIBYTE(v21) < 0) {
    operator delete(__p[1]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x263E69630](v23);
}

void sub_26368E148(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::ostringstream::basic_ostringstream[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = MEMORY[0x263F8C340] + 64;
  *(void *)(a1 + 112) = MEMORY[0x263F8C340] + 64;
  uint64_t v3 = *(void *)(MEMORY[0x263F8C2C8] + 16);
  uint64_t v4 = *(void *)(MEMORY[0x263F8C2C8] + 8);
  *(void *)a1 = v4;
  *(void *)(a1 + *(void *)(v4 - 24)) = v3;
  uint64_t v5 = (std::ios_base *)(a1 + *(void *)(*(void *)a1 - 24));
  std::ios_base::init(v5, (void *)(a1 + 8));
  uint64_t v6 = MEMORY[0x263F8C340] + 24;
  v5[1].__vftable = 0;
  v5[1].__fmtflags_ = -1;
  *(void *)a1 = v6;
  *(void *)(a1 + 112) = v2;
  std::streambuf::basic_streambuf();
  *(void *)(a1 + 8) = MEMORY[0x263F8C318] + 16;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_DWORD *)(a1 + 104) = 16;
  return a1;
}

void sub_26368E2CC(_Unwind_Exception *a1)
{
  std::ostream::~ostream();
  MEMORY[0x263E69630](v1);
  _Unwind_Resume(a1);
}

uint64_t std::ostringstream::~ostringstream(uint64_t a1)
{
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)a1 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 8) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x263E69630](a1 + 112);
  return a1;
}

void *data::TransportService::TransportService(void *this)
{
  *this = 0;
  this[1] = 0;
  return this;
}

{
  *this = 0;
  this[1] = 0;
  return this;
}

dispatch_object_t *data::TransportService::TransportService(dispatch_object_t *a1, uint64_t *a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a2[1];
  uint64_t v6 = *a2;
  uint64_t v7 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  data::TransportService::State::create((capabilities::abs *)&v6, a1);
  uint64_t v4 = v7;
  if (!v7 || atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v6;
  std::__shared_weak_count *v7;

  uint64_t v3 = (std::__shared_weak_count *)a2[1];
  uint64_t v6 = *a2;
  uint64_t v7 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  data::TransportService::State::create((capabilities::abs *)&v6, a1);
  uint64_t v4 = v7;
  if (!v7 || atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void sub_26368E4C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void data::TransportService::State::create(capabilities::abs *a1@<X0>, dispatch_object_t *a2@<X8>)
{
  uint64_t v146 = *MEMORY[0x263EF8340];
  *a2 = 0;
  a2[1] = 0;
  if (capabilities::abs::supportsDataTransportService(a1))
  {
    uint64_t v4 = (char *)operator new(0xA8uLL);
    uint64_t v5 = (std::__shared_weak_count *)*((void *)a1 + 1);
    uint64_t v115 = *(void *)a1;
    v116 = v5;
    if (v5) {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    BYTE7(v133) = 12;
    strcpy(label, "ipc.svc.data");
    BYTE7(v123) = 12;
    strcpy((char *)__p, "ipc.svc.data");
    ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)&object, "com.apple.telephony.abm", (const char *)__p);
    uint64_t v6 = dispatch_queue_create(label, 0);
    *((void *)v4 + 9) = 0;
    *((void *)v4 + 10) = 0;
    *((void *)v4 + 11) = v6;
    if (v6)
    {
      uint64_t v7 = v6;
      dispatch_retain(v6);
      *((void *)v4 + 12) = 0;
      dispatch_release(v7);
    }
    else
    {
      *((void *)v4 + 12) = 0;
    }
    *(void *)uint64_t v4 = &unk_270EA53E8;
    ctu::OsLogContext::OsLogContext();
    ctu::OsLogContext::OsLogContext();
    ctu::LoggerCommonBase::LoggerCommonBase();
    ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)aBlock);
    *((void *)v4 + 1) = &unk_270EA5428;
    *((void *)v4 + 7) = v115;
    *((void *)v4 + 8) = v116;
    if (v116) {
      atomic_fetch_add_explicit(&v116->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&v128);
    *(void *)uint64_t v4 = &unk_270EA53A8;
    ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&object);
    if (SBYTE7(v123) < 0)
    {
      operator delete(__p[0]);
      if ((SBYTE7(v133) & 0x80000000) == 0) {
        goto LABEL_11;
      }
    }
    else if ((SBYTE7(v133) & 0x80000000) == 0)
    {
      goto LABEL_11;
    }
    operator delete(*(void **)label);
LABEL_11:
    *(void *)uint64_t v4 = &unk_270EA52D8;
    *((_DWORD *)v4 + 28) = 0;
    *((void *)v4 + 15) = v4 + 120;
    *((void *)v4 + 16) = v4 + 120;
    *(_OWORD *)(v4 + 136) = 0u;
    *(_OWORD *)(v4 + 152) = 0u;
    *((void *)v4 + 13) = 0x2D00000000;
    dispatch_object_t v126 = (dispatch_object_t)v4;
    v127 = (void *)0xAAAAAAAAAAAAAAAALL;
    size_t v8 = (std::__shared_weak_count *)operator new(0x20uLL);
    v8->__shared_owners_ = 0;
    p_shared_owners = &v8->__shared_owners_;
    v8->__vftable = (std::__shared_weak_count_vtbl *)&unk_270EA5288;
    v8->__shared_weak_owners_ = 0;
    v8[1].__vftable = (std::__shared_weak_count_vtbl *)v4;
    v127 = v8;
    uint64_t v10 = (std::__shared_weak_count *)*((void *)v4 + 10);
    if (v10)
    {
      if (v10->__shared_owners_ != -1
        || (atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed),
            atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed),
            *((void *)v4 + 9) = v4,
            *((void *)v4 + 10) = v8,
            std::__shared_weak_count::__release_weak(v10),
            atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)))
      {
LABEL_19:
        dispatch_object_t v11 = v126;
        if (v126[7].isa)
        {
          isa = (std::__shared_weak_count *)v126[10].isa;
          if (!isa || (v13 = v126[9].isa, (uint64_t v14 = std::__shared_weak_count::lock(isa)) == 0)) {
            std::__throw_bad_weak_ptr[abi:ne180100]();
          }
          xpc_object_t v15 = v14;
          *(void *)label = v13;
          *(void *)&label[8] = v14;
          ctu::LoggerCommonBase::getLogDomain((ctu::LoggerCommonBase *)&v11[1]);
          __p[0] = v13;
          __p[1] = v15;
          memset(label, 0, sizeof(label));
          ctu::TrackedLogger::registerLoggerToServer();
          long long v16 = (std::__shared_weak_count *)__p[1];
          if (__p[1] && !atomic_fetch_add((atomic_ullong *volatile)__p[1] + 1, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
            std::__shared_weak_count::__release_weak(v16);
          }
          long long v17 = *(std::__shared_weak_count **)&label[8];
          if (*(void *)&label[8]
            && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&label[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
            std::__shared_weak_count::__release_weak(v17);
          }
          dispatch_object_t v11 = v126;
        }
        long long v18 = v127;
        dispatch_object_t v126 = 0;
        v127 = 0;
        *a2 = v11;
        a2[1] = v18;
        if (v116 && !atomic_fetch_add(&v116->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
          std::__shared_weak_count::__release_weak(v116);
        }
        xpc_object_t v19 = *a2;
        uint64_t v20 = (*a2)[5].isa;
        if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)label = 0;
          _os_log_impl(&dword_26368A000, v20, OS_LOG_TYPE_DEFAULT, "#I Inited", (uint8_t *)label, 2u);
        }
        pthread_mutex_lock(&ctu::Singleton<sys::UIObserver,sys::UIObserver,ctu::PthreadMutexGuardPolicy<sys::UIObserver>>::sInstance);
        uint64_t v21 = xmmword_26A99EFE0;
        if (!(void)xmmword_26A99EFE0)
        {
          memset(label, 170, sizeof(label));
          long long v22 = (sys::UIObserver *)operator new(0x40uLL);
          sys::UIObserver::UIObserver(v22);
          std::shared_ptr<sys::UIObserver>::shared_ptr[abi:ne180100]<sys::UIObserver,void>((std::__shared_weak_count_vtbl **)label, (std::__shared_weak_count_vtbl *)v22);
          long long v23 = *(_OWORD *)label;
          memset(label, 0, sizeof(label));
          unint64_t v24 = (std::__shared_weak_count *)*((void *)&xmmword_26A99EFE0 + 1);
          xmmword_26A99EFE0 = v23;
          if (v24 && !atomic_fetch_add(&v24->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v24);
          }
          xpc_object_t v25 = *(std::__shared_weak_count **)&label[8];
          if (*(void *)&label[8]
            && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&label[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
            std::__shared_weak_count::__release_weak(v25);
          }
          uint64_t v21 = xmmword_26A99EFE0;
        }
        v118 = (std::__shared_weak_count *)*((void *)&xmmword_26A99EFE0 + 1);
        if (*((void *)&xmmword_26A99EFE0 + 1)) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&xmmword_26A99EFE0 + 1) + 8), 1uLL, memory_order_relaxed);
        }
        pthread_mutex_unlock(&ctu::Singleton<sys::UIObserver,sys::UIObserver,ctu::PthreadMutexGuardPolicy<sys::UIObserver>>::sInstance);
        aBlock[0] = MEMORY[0x263EF8330];
        aBlock[1] = 0x40000000;
        aBlock[2] = ___ZN3ctu20SharedSynchronizableIN4data16TransportService5StateEE13connect_eventIN5boost8signals26signalIFvbENS7_19optional_last_valueIvEEiNSt3__14lessIiEENS6_8functionIS9_EENSF_IFvRKNS7_10connectionEbEEENS7_5mutexEEES3_vJbEEEDTcl7connectfp_cvNSC_10shared_ptrIS3_EE_EcvP16dispatch_queue_s_EcvPFT1_DpT2_ELi0EEERT_MT0_FSS_SU_E_block_invoke;
        aBlock[3] = &__block_descriptor_tmp;
        aBlock[4] = v19 + 9;
        aBlock[5] = data::TransportService::State::handleUILockStateChange_sync;
        aBlock[6] = 0;
        int v26 = _Block_copy(aBlock);
        uint64_t v112 = v21;
        uint64_t v27 = (std::__shared_weak_count *)v19[10];
        if (!v27 || (uint64_t v28 = v19[9], (v114 = std::__shared_weak_count::lock(v27)) == 0)) {
          std::__throw_bad_weak_ptr[abi:ne180100]();
        }
        int v29 = v19[11];
        dispatch_object_t v120 = v29;
        v111 = v26;
        if (v26) {
          size_t v30 = _Block_copy(v26);
        }
        else {
          size_t v30 = 0;
        }
        v121 = v30;
        dispatch_retain(v29);
        *(_OWORD *)std::string __p = 0u;
        long long v123 = 0u;
        dispatch_object_t v126 = v29;
        if (v30) {
          size_t v30 = _Block_copy(v30);
        }
        v127 = v30;
        dispatch_retain(v29);
        dispatch_object_t object = v29;
        v110 = v19;
        if (v30)
        {
          BOOL v31 = _Block_copy(v30);
          v131 = v31;
          dispatch_retain(v29);
          if (v31)
          {
            time_t v32 = _Block_copy(v31);
            dispatch_retain(v29);
            v128 = 0;
            if (v32)
            {
              xpc_object_t v33 = _Block_copy(v32);
              dispatch_retain(v29);
              if (v33)
              {
                size_t v34 = _Block_copy(v33);
                dispatch_retain(v29);
                if (v34)
                {
                  v113 = v34;
                  size_t v35 = _Block_copy(v34);
                  dispatch_retain(v29);
                  v109 = v32;
                  if (v35)
                  {
                    xpc_object_t v36 = _Block_copy(v35);
                    dispatch_retain(v29);
                    v129[0] = v29;
                    if (v36)
                    {
                      uint64_t v37 = v28;
                      v38 = _Block_copy(v36);
                      char v39 = 0;
                      char v40 = 0;
                      char v41 = 0;
                      char v42 = 0;
                      char v43 = 0;
                      goto LABEL_66;
                    }
                    uint64_t v37 = v28;
                    char v39 = 0;
                    char v40 = 0;
                    char v41 = 0;
                    char v42 = 0;
                    v38 = 0;
LABEL_65:
                    char v43 = 1;
LABEL_66:
                    v129[1] = v38;
                    dispatch_retain(v29);
                    dispatch_release(v29);
                    if ((v43 & 1) == 0) {
                      _Block_release(v36);
                    }
                    dispatch_release(v29);
                    if ((v42 & 1) == 0) {
                      _Block_release(v35);
                    }
                    dispatch_release(v29);
                    if ((v41 & 1) == 0) {
                      _Block_release(v113);
                    }
                    v128 = (uint64_t *)boost::function1<void,BOOL>::assign_to<ctu::DispatchSlot<dispatch::block<void({block_pointer})(BOOL)>>>(ctu::DispatchSlot<dispatch::block<void({block_pointer})(BOOL)>>)::stored_vtable;
                    dispatch_release(v29);
                    if ((v40 & 1) == 0) {
                      _Block_release(v33);
                    }
                    dispatch_release(v29);
                    if ((v39 & 1) == 0) {
                      _Block_release(v109);
                    }
                    *(void *)&long long v133 = 0xAAAAAAAAAAAAAAAALL;
                    *((void *)&v133 + 1) = 0xAAAAAAAAAAAAAAAALL;
                    *(void *)label = 0;
                    *(void *)&label[8] = 0xAAAAAAAAAAAAAAAALL;
                    boost::function1<void,BOOL>::move_assign((uint64_t)label, (uint64_t *)&v128);
                    boost::function1<void,BOOL>::move_assign((uint64_t)&v128, (uint64_t *)&v123 + 1);
                    boost::function1<void,BOOL>::move_assign((uint64_t)&v123 + 8, (uint64_t *)label);
                    if (*(void *)label)
                    {
                      if ((label[0] & 1) == 0)
                      {
                        char v44 = *(void (**)(char *, char *, uint64_t))(*(void *)label & 0xFFFFFFFFFFFFFFFELL);
                        if (v44) {
                          v44(&label[8], &label[8], 2);
                        }
                      }
                    }
                    if (v128)
                    {
                      if ((v128 & 1) == 0)
                      {
                        long long v45 = *(void (**)(uint64_t, _WORD *, unsigned int))((unint64_t)v128 & 0xFFFFFFFFFFFFFFFELL);
                        if (v45) {
                          v45((uint64_t)v129, v129, 2u);
                        }
                      }
                      v128 = 0;
                    }
                    dispatch_release(object);
                    if (v131) {
                      _Block_release(v131);
                    }
                    dispatch_release(v126);
                    if (v127) {
                      _Block_release(v127);
                    }
                    atomic_fetch_add_explicit(&v114->__shared_weak_owners_, 1uLL, memory_order_relaxed);
                    xpc_object_t v46 = operator new(0x18uLL);
                    *xpc_object_t v46 = &unk_270EA5610;
                    v46[1] = v37;
                    v46[2] = v114;
                    atomic_fetch_add_explicit(&v114->__shared_weak_owners_, 1uLL, memory_order_relaxed);
                    long long v47 = operator new(0x18uLL);
                    *long long v47 = &unk_270EA5610;
                    v47[1] = v37;
                    v47[2] = v114;
                    atomic_fetch_add_explicit(&v114->__shared_weak_owners_, 1uLL, memory_order_relaxed);
                    *(void *)&label[8] = v47;
                    *(_DWORD *)label = 2;
                    xpc_object_t v48 = __p[1];
                    if (__p[1] >= (void *)v123)
                    {
                      long long v50 = (void *)std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::__push_back_slow_path<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>((uint64_t *)__p, (uint64_t)label);
                    }
                    else
                    {
                      long long v49 = operator new(0x18uLL);
                      *long long v49 = &unk_270EA5610;
                      v49[1] = v37;
                      v49[2] = v114;
                      atomic_fetch_add_explicit(&v114->__shared_weak_owners_, 1uLL, memory_order_relaxed);
                      v48[1] = v49;
                      *(_DWORD *)xpc_object_t v48 = 2;
                      long long v50 = v48 + 3;
                    }
                    __p[1] = v50;
                    boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>::destroy_content((uint64_t)label);
                    (*(void (**)(void *))(*v46 + 8))(v46);
                    std::__shared_weak_count::__release_weak(v114);
                    v51 = *(uint64_t ***)(v112 + 40);
                    *(void *)&long long v52 = 0xAAAAAAAAAAAAAAAALL;
                    *((void *)&v52 + 1) = 0xAAAAAAAAAAAAAAAALL;
                    long long v140 = v52;
                    long long v141 = v52;
                    long long v138 = v52;
                    long long v139 = v52;
                    long long v136 = v52;
                    long long v137 = v52;
                    long long v134 = v52;
                    long long v135 = v52;
                    *(_OWORD *)label = v52;
                    long long v133 = v52;
                    uint64_t v53 = (pthread_mutex_t *)v51[3];
                    unint64_t v142 = 10;
                    v143 = label;
                    uint64_t v144 = 0;
                    v145 = v53;
                    pthread_mutex_lock(v53);
                    dispatch_object_t object = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
                    v131 = (void *)0xAAAAAAAAAAAAAAAALL;
                    v54 = (atomic_uint *)v51[1];
                    if (v54 && atomic_load_explicit(v54 + 2, memory_order_acquire) == 1)
                    {
                      uint64_t v55 = **v51;
                      v56 = v51[2];
                      int v57 = 2;
                      if (v56 != (uint64_t *)v55)
                      {
                        v128 = v51[2];
                        if ((uint64_t *)**v51 == v56) {
                          goto LABEL_125;
                        }
                        goto LABEL_105;
                      }
                    }
                    else
                    {
                      v58 = (uint64_t *)operator new(0x20uLL);
                      v59 = (uint64_t **)*v51;
                      uint64_t v60 = **v51;
                      v61 = operator new(0x40uLL);
                      boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>::grouped_list((uint64_t)v61, v60);
                      boost::shared_ptr<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>>::shared_ptr<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>>(v58, (uint64_t)v61);
                      v58[2] = (uint64_t)v59[2];
                      uint64_t v62 = (uint64_t)v59[3];
                      v58[3] = v62;
                      if (v62) {
                        atomic_fetch_add_explicit((atomic_uint *volatile)(v62 + 8), 1u, memory_order_relaxed);
                      }
                      boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::invocation_state>::shared_ptr<boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::invocation_state>((uint64_t *)&v128, (uint64_t)v58);
                      v63 = v128;
                      v64 = (atomic_uint *)v51[1];
                      v128 = *v51;
                      *v51 = v63;
                      v51[1] = (uint64_t *)v129[0];
                      v129[0] = v64;
                      if (v64)
                      {
                        if (atomic_fetch_add(v64 + 2, 0xFFFFFFFF) == 1)
                        {
                          (*(void (**)(atomic_uint *))(*(void *)v64 + 16))(v64);
                          if (atomic_fetch_add(v64 + 3, 0xFFFFFFFF) == 1) {
                            (*(void (**)(atomic_uint *))(*(void *)v64 + 24))(v64);
                          }
                        }
                      }
                      int v57 = 0;
                      uint64_t v55 = **v51;
                    }
                    v56 = *(uint64_t **)(v55 + 8);
                    v128 = v56;
                    if ((uint64_t *)**v51 == v56) {
                      goto LABEL_125;
                    }
LABEL_105:
                    unsigned int v65 = 0;
                    unsigned int v66 = v57 - 1;
                    do
                    {
                      uint64_t v69 = v56[2];
                      v70 = *(uint64_t **)(v69 + 32);
                      if (v70)
                      {
                        for (uint64_t i = *v70; i != v70[1]; i += 24)
                        {
                          if ((*(_DWORD *)i ^ (*(int *)i >> 31)) > 1)
                          {
                            if ((*(uint64_t (**)(void))(**(void **)(i + 8) + 24))(*(void *)(i + 8))) {
                              goto LABEL_122;
                            }
                          }
                          else
                          {
                            uint64_t v72 = *(void *)(i + 16);
                            if (!v72 || !atomic_load_explicit((atomic_uint *volatile)(v72 + 8), memory_order_acquire))
                            {
LABEL_122:
                              if (*(unsigned char *)(v69 + 24))
                              {
                                *(unsigned char *)(v69 + 24) = 0;
                                boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::mutex>((_DWORD *)v69, label);
                              }
                              break;
                            }
                          }
                        }
                      }
                      uint64_t v67 = v128[2];
                      if (*(unsigned char *)(v67 + 24)) {
                        v56 = (uint64_t *)v128[1];
                      }
                      else {
                        v56 = (uint64_t *)boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>::erase((uint64_t *)**v51, (int *)(v67 + 64), &v128);
                      }
                      v128 = v56;
                      ++v65;
                    }
                    while (v56 != (uint64_t *)**v51 && v66 >= v65);
LABEL_125:
                    v51[2] = v56;
                    v73 = (char *)operator new(0x50uLL);
                    *((void *)v73 + 1) = 0;
                    *((void *)v73 + 2) = 0;
                    v73[24] = 1;
                    *((_DWORD *)v73 + 7) = 1;
                    *(void *)v73 = &unk_270EA5468;
                    v74 = operator new(0x38uLL);
                    std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::vector(v74, (uint64_t *)__p);
                    v74[3] = 0;
                    uint64_t v75 = *((void *)&v123 + 1);
                    if (*((void *)&v123 + 1))
                    {
                      v74[3] = *((void *)&v123 + 1);
                      if (v75)
                      {
                        *((_OWORD *)v74 + 2) = v124;
                        v74[6] = v125;
                      }
                      else
                      {
                        (*(void (**)(long long *, void *, void))(v75 & 0xFFFFFFFFFFFFFFFELL))(&v124, v74 + 4, 0);
                      }
                    }
                    *((void *)v73 + 4) = v74;
                    *((void *)v73 + 5) = 0;
                    v76 = operator new(0x18uLL);
                    v76[1] = 0x100000001;
                    void *v76 = &unk_270EA5510;
                    v76[2] = v74;
                    *((void *)v73 + 5) = v76;
                    *((void *)v73 + 6) = v51[3];
                    v77 = (atomic_uint *)v51[4];
                    *((void *)v73 + 7) = v77;
                    if (v77) {
                      atomic_fetch_add_explicit(v77 + 2, 1u, memory_order_relaxed);
                    }
                    *((_DWORD *)v73 + 16) = 0;
                    v73[68] = 0;
                    dispatch_object_t object = (dispatch_object_t)v73;
                    v131 = 0;
                    v78 = (atomic_uint *)operator new(0x18uLL);
                    *((void *)v78 + 1) = 0x100000001;
                    *(void *)v78 = &unk_270EA5570;
                    *((void *)v78 + 2) = v73;
                    v131 = v78;
                    uint64_t v79 = **v51;
                    v80 = operator new(0x20uLL);
                    v81 = (void *)(v79 + 32);
                    v80[2] = v73;
                    v80[3] = v78;
                    atomic_fetch_add_explicit(v78 + 2, 1u, memory_order_relaxed);
                    uint64_t v82 = *(void *)v79;
                    *(void *)(v82 + 8) = v80;
                    void *v80 = v82;
                    *(void *)uint64_t v79 = v80;
                    v80[1] = v79;
                    ++*(void *)(v79 + 16);
                    v83 = *(uint64_t **)(v79 + 32);
                    if (v83)
                    {
                      uint64_t v84 = v79 + 32;
                      uint64_t v85 = *(void *)(v79 + 32);
                      do
                      {
                        int v86 = *(_DWORD *)(v85 + 32);
                        BOOL v87 = v86 == 2;
                        BOOL v88 = v86 < 2;
                        if (v86 >= 2) {
                          v89 = (uint64_t *)v85;
                        }
                        else {
                          v89 = (uint64_t *)(v85 + 8);
                        }
                        if (!v88) {
                          uint64_t v84 = v85;
                        }
                        if (v87)
                        {
                          v89 = (uint64_t *)v85;
                          uint64_t v84 = v85;
                        }
                        uint64_t v85 = *v89;
                      }
                      while (*v89);
                      if ((void *)v84 == v81 || *(_DWORD *)(v84 + 32) != 2)
                      {
                        int v90 = *((_DWORD *)v83 + 8);
                        while (v90 != 2)
                        {
                          if (v90 < 3)
                          {
                            v91 = (uint64_t *)v83[1];
                            if (!v91)
                            {
                              v81 = v83 + 1;
                              goto LABEL_152;
                            }
                          }
                          else
                          {
                            v91 = (uint64_t *)*v83;
                            v81 = v83;
                            if (!*v83) {
                              goto LABEL_152;
                            }
                          }
                          int v90 = *((_DWORD *)v91 + 8);
                          v83 = v91;
                        }
                      }
                      *((_DWORD *)v73 + 16) = 2;
                      *(void *)(v73 + 68) = 0xAAAAAAAAAAAAAA00;
                    }
                    else
                    {
                      v83 = (uint64_t *)(v79 + 32);
LABEL_152:
                      v92 = operator new(0x38uLL);
                      v92[4] = 0xAAAAAA0000000002;
                      *((_DWORD *)v92 + 10) = -1431655766;
                      v92[6] = v80;
                      void *v92 = 0;
                      v92[1] = 0;
                      v92[2] = v83;
                      void *v81 = v92;
                      uint64_t v93 = **(void **)(v79 + 24);
                      if (v93)
                      {
                        *(void *)(v79 + 24) = v93;
                        v92 = (void *)*v81;
                      }
                      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v79 + 32), v92);
                      ++*(void *)(v79 + 40);
                      v73 = (char *)object;
                      v78 = (atomic_uint *)v131;
                      LODWORD(object[8].isa) = 2;
                      *(void *)(v73 + 68) = 0xAAAAAAAAAAAAAA00;
                      if (!v78)
                      {
                        long long v117 = (unint64_t)v73;
                        v94 = (atomic_uint *)v131;
                        if (!v131) {
                          goto LABEL_162;
                        }
                        goto LABEL_158;
                      }
                    }
                    atomic_fetch_add_explicit(v78 + 3, 1u, memory_order_relaxed);
                    *(void *)&long long v117 = v73;
                    *((void *)&v117 + 1) = v78;
                    atomic_fetch_add_explicit(v78 + 3, 1u, memory_order_relaxed);
                    if (atomic_fetch_add(v78 + 3, 0xFFFFFFFF) == 1) {
                      (*(void (**)(atomic_uint *))(*(void *)v78 + 24))(v78);
                    }
                    v94 = (atomic_uint *)v131;
                    if (!v131)
                    {
LABEL_162:
                      pthread_mutex_unlock(v145);
                      v95 = (char *)v143;
                      if (v143)
                      {
                        if (v144 - 1 >= 0)
                        {
                          v96 = (char *)v143 + 16 * v144;
                          do
                          {
                            v97 = (atomic_uint *)*((void *)v96 - 1);
                            if (v97)
                            {
                              if (atomic_fetch_add(v97 + 2, 0xFFFFFFFF) == 1)
                              {
                                (*(void (**)(atomic_uint *))(*(void *)v97 + 16))(v97);
                                if (atomic_fetch_add(v97 + 3, 0xFFFFFFFF) == 1) {
                                  (*(void (**)(atomic_uint *))(*(void *)v97 + 24))(v97);
                                }
                              }
                            }
                            v96 -= 16;
                          }
                          while (v96 > v95);
                        }
                        if (v142 >= 0xB) {
                          operator delete(v143);
                        }
                      }
                      if (*((void *)&v123 + 1))
                      {
                        if ((BYTE8(v123) & 1) == 0)
                        {
                          v98 = *(void (**)(long long *, long long *, uint64_t))(*((void *)&v123 + 1) & 0xFFFFFFFFFFFFFFFELL);
                          if (v98) {
                            v98(&v124, &v124, 2);
                          }
                        }
                        *((void *)&v123 + 1) = 0;
                      }
                      v99 = (char *)__p[0];
                      if (__p[0])
                      {
                        v100 = (char *)__p[1];
                        v101 = __p[0];
                        if (__p[1] != __p[0])
                        {
                          do
                          {
                            v100 -= 24;
                            boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>::destroy_content((uint64_t)v100);
                          }
                          while (v100 != v99);
                          v101 = __p[0];
                        }
                        __p[1] = v99;
                        operator delete(v101);
                      }
                      dispatch_release(v120);
                      if (v121) {
                        _Block_release(v121);
                      }
                      if (atomic_fetch_add(&v114->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                      {
                        if (!v111)
                        {
LABEL_189:
                          v102 = operator new(0x20uLL);
                          v102[1] = v117;
                          uint64_t v103 = v110[15];
                          *(void *)v102 = v103;
                          *((void *)v102 + 1) = v110 + 15;
                          *(void *)(v103 + 8) = v102;
                          v110[15] = v102;
                          ++v110[17];
                          v104 = (ApplePDPHelperInterface *)capabilities::ipc::supportsIPMetadataTrailer((capabilities::ipc *)v102);
                          if (v104)
                          {
                            Instance = (ApplePDPHelperInterface *)ApplePDPHelperInterface::getInstance(v104);
                            int v106 = ApplePDPHelperInterface::enableMetadataTrailer(Instance, 1, 0);
                            v107 = v110[5];
                            if (v106)
                            {
                              if (os_log_type_enabled(v107, OS_LOG_TYPE_DEFAULT))
                              {
                                *(_WORD *)label = 0;
                                _os_log_impl(&dword_26368A000, v107, OS_LOG_TYPE_DEFAULT, "#I Enabled IP metadata trailer appending", (uint8_t *)label, 2u);
                                v108 = v118;
                                if (!v118) {
                                  return;
                                }
LABEL_196:
                                if (!atomic_fetch_add(&v108->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                                {
                                  ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
                                  std::__shared_weak_count::__release_weak(v108);
                                }
                                return;
                              }
                            }
                            else if (os_log_type_enabled(v107, OS_LOG_TYPE_ERROR))
                            {
                              *(_WORD *)label = 0;
                              _os_log_error_impl(&dword_26368A000, v107, OS_LOG_TYPE_ERROR, "Failed to enable IP metadata trailer appending", (uint8_t *)label, 2u);
                              v108 = v118;
                              if (!v118) {
                                return;
                              }
                              goto LABEL_196;
                            }
                          }
                          v108 = v118;
                          if (!v118) {
                            return;
                          }
                          goto LABEL_196;
                        }
                      }
                      else
                      {
                        ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
                        std::__shared_weak_count::__release_weak(v114);
                        if (!v111) {
                          goto LABEL_189;
                        }
                      }
                      _Block_release(v111);
                      goto LABEL_189;
                    }
LABEL_158:
                    if (atomic_fetch_add(v94 + 2, 0xFFFFFFFF) == 1)
                    {
                      (*(void (**)(atomic_uint *))(*(void *)v94 + 16))(v94);
                      if (atomic_fetch_add(v94 + 3, 0xFFFFFFFF) == 1) {
                        (*(void (**)(atomic_uint *))(*(void *)v94 + 24))(v94);
                      }
                    }
                    goto LABEL_162;
                  }
                  uint64_t v37 = v28;
                  char v39 = 0;
                  char v40 = 0;
                  char v41 = 0;
LABEL_64:
                  dispatch_retain(v29);
                  size_t v35 = 0;
                  xpc_object_t v36 = 0;
                  v38 = 0;
                  v129[0] = v29;
                  char v42 = 1;
                  goto LABEL_65;
                }
                uint64_t v37 = v28;
                char v39 = 0;
                char v40 = 0;
LABEL_63:
                v109 = v32;
                dispatch_retain(v29);
                v113 = 0;
                char v41 = 1;
                goto LABEL_64;
              }
              char v39 = 0;
LABEL_62:
              uint64_t v37 = v28;
              dispatch_retain(v29);
              xpc_object_t v33 = 0;
              char v40 = 1;
              goto LABEL_63;
            }
LABEL_61:
            dispatch_retain(v29);
            time_t v32 = 0;
            char v39 = 1;
            goto LABEL_62;
          }
        }
        else
        {
          v131 = 0;
          dispatch_retain(v29);
        }
        dispatch_retain(v29);
        v128 = 0;
        goto LABEL_61;
      }
    }
    else
    {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      *((void *)v4 + 9) = v4;
      *((void *)v4 + 10) = v8;
      if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
        goto LABEL_19;
      }
    }
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    goto LABEL_19;
  }
}

void sub_26368F81C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, char a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  if (a2)
  {
    v51 = *v50;
    if (*v50)
    {
      uint64_t v52 = (uint64_t)v50[1];
      uint64_t v53 = *v50;
      if ((void *)v52 != v51)
      {
        do
        {
          v52 -= 24;
          boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>::destroy_content(v52);
        }
        while ((void *)v52 != v51);
        uint64_t v53 = *v50;
      }
      v50[1] = v51;
      operator delete(v53);
    }
    operator delete(v50);
    boost::signals2::detail::connection_body_base::~connection_body_base(v49);
    operator delete(v49);
    JUMPOUT(0x26368FE40);
  }
  JUMPOUT(0x26368FE38);
}

void sub_26368FB64(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a2)
  {
    if (__p)
    {
      if (a71 - 1 >= 0)
      {
        v71 = &__p[16 * a71];
        do
        {
          uint64_t v72 = (atomic_uint *)*((void *)v71 - 1);
          if (v72)
          {
            if (atomic_fetch_add(v72 + 2, 0xFFFFFFFF) == 1)
            {
              (*(void (**)(atomic_uint *))(*(void *)v72 + 16))(v72);
              if (atomic_fetch_add(v72 + 3, 0xFFFFFFFF) == 1) {
                (*(void (**)(atomic_uint *))(*(void *)v72 + 24))(v72);
              }
            }
          }
          v71 -= 16;
        }
        while (v71 > __p);
      }
      if (a69 >= 0xB) {
        operator delete(__p);
      }
    }
    JUMPOUT(0x26368FE48);
  }
  JUMPOUT(0x26368FE38);
}

void sub_26368FC30(uint64_t a1, int a2)
{
  if (a2) {
    JUMPOUT(0x26368FC38);
  }
  JUMPOUT(0x26368FE38);
}

void sub_26368FC64(uint64_t a1, int a2)
{
  if (a2) {
    JUMPOUT(0x26368FC6CLL);
  }
  JUMPOUT(0x26368FE38);
}

void sub_26368FC80(void *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    dispatch_barrier_async_f(v2[11], v2, (dispatch_function_t)std::shared_ptr<data::TransportService::State> ctu::SharedSynchronizable<data::TransportService::State>::make_shared_ptr<data::TransportService::State>(data::TransportService::State*)::{lambda(data::TransportService::State*)#1}::operator() const(data::TransportService::State*)::{lambda(void *)#1}::__invoke);
    __cxa_rethrow();
  }
  JUMPOUT(0x26368FE38);
}

void sub_26368FCB4()
{
}

void sub_26368FCC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,char a46,uint64_t a47,uint64_t a48,uint64_t a49,char a50,uint64_t a51,void *a52,uint64_t a53,int a54,__int16 a55,char a56,char a57)
{
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&a24);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&a46);
  ctu::SharedSynchronizable<data::TransportService::State>::~SharedSynchronizable(v58);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&a50);
  if (a38 < 0) {
    operator delete(__p);
  }
  if (a57 < 0) {
    operator delete(a52);
  }
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  operator delete(v57);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100](a10);
  _Unwind_Resume(a1);
}

void sub_26368FD40(uint64_t a1, int a2)
{
  if (a2) {
    JUMPOUT(0x26368FD48);
  }
  JUMPOUT(0x26368FE38);
}

void sub_26368FD54(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
  if (a2)
  {
    boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>::~shared_ptr((uint64_t)&a47);
    JUMPOUT(0x26368FE40);
  }
  JUMPOUT(0x26368FE38);
}

void sub_26368FD70(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char *__p,char *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49)
{
  if (a2)
  {
    boost::function1<void,BOOL>::~function1(&a49);
    boost::function<void ()(BOOL)>::~function(&a43);
    ctu::DispatchSlot<dispatch::block<void({block_pointer})(BOOL)>>::~DispatchSlot((uint64_t)&a47);
    ctu::DispatchSlot<dispatch::block<void({block_pointer})(BOOL)>>::~DispatchSlot((uint64_t)&a41);
    if (a36)
    {
      if ((a36 & 1) == 0)
      {
        long long v49 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(a36 & 0xFFFFFFFFFFFFFFFELL);
        if (v49) {
          v49(&a37, &a37, 2);
        }
      }
    }
    if (__p)
    {
      long long v50 = a34;
      v51 = __p;
      if (a34 != __p)
      {
        do
        {
          v50 -= 24;
          boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>::destroy_content((uint64_t)v50);
        }
        while (v50 != __p);
        v51 = __p;
      }
      operator delete(v51);
    }
    JUMPOUT(0x26368FE50);
  }
  JUMPOUT(0x26368FE38);
}

void sub_26368FE20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100](uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(std::__shared_weak_count **)(result + 8);
  if (v2)
  {
    if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_26368FF88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10)
  {
    if (!atomic_fetch_add(&a10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

void data::TransportService::enterLowPower(data::TransportService *this)
{
  uint64_t v1 = *(void *)this;
  if (*(void *)this)
  {
    v3[0] = MEMORY[0x263EF8330];
    v3[1] = 0x40000000;
    v3[2] = ___ZN4data16TransportService5State13enterLowPowerEv_block_invoke;
    v3[3] = &__block_descriptor_tmp_54;
    v3[4] = v1;
    uint64_t v4 = v3;
    block[0] = MEMORY[0x263EF8330];
    block[1] = 0x40000000;
    block[2] = ___ZNK3ctu20SharedSynchronizableIN4data16TransportService5StateEE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS9__block_invoke;
    block[3] = &__block_descriptor_tmp_55;
    block[4] = v1 + 72;
    block[5] = &v4;
    uint64_t v2 = *(NSObject **)(v1 + 88);
    if (*(void *)(v1 + 96)) {
      dispatch_async_and_wait(v2, block);
    }
    else {
      dispatch_sync(v2, block);
    }
  }
}

void data::TransportService::exitLowPower(data::TransportService *this)
{
  uint64_t v1 = *(void *)this;
  if (*(void *)this)
  {
    v2[0] = MEMORY[0x263EF8330];
    v2[1] = 0x40000000;
    v2[2] = ___ZN4data16TransportService5State12exitLowPowerEv_block_invoke;
    v2[3] = &__block_descriptor_tmp_56;
    v2[4] = v1;
    ctu::SharedSynchronizable<data::TransportService::State>::execute_wrapped((uint64_t *)(v1 + 72), (uint64_t)v2);
  }
}

void data::TransportService::setConfig(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    uint64_t v3 = *a2;
    v4[0] = MEMORY[0x263EF8330];
    v4[1] = 0x40000000;
    v4[2] = ___ZN4data16TransportService5State9setConfigENS0_16ThrottlingConfigE_block_invoke;
    v4[3] = &__block_descriptor_tmp_59;
    v4[4] = v2;
    v4[5] = v3;
    ctu::SharedSynchronizable<data::TransportService::State>::execute_wrapped((uint64_t *)(v2 + 72), (uint64_t)v4);
  }
}

void data::TransportService::dumpState(data::TransportService *this)
{
  uint64_t v1 = *(void *)this;
  if (*(void *)this)
  {
    v3[0] = MEMORY[0x263EF8330];
    v3[1] = 0x40000000;
    v3[2] = ___ZNK4data16TransportService5State9dumpStateEv_block_invoke;
    v3[3] = &__block_descriptor_tmp_60;
    v3[4] = v1;
    uint64_t v4 = v3;
    block[0] = MEMORY[0x263EF8330];
    block[1] = 0x40000000;
    block[2] = ___ZNK3ctu20SharedSynchronizableIN4data16TransportService5StateEE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS9__block_invoke;
    block[3] = &__block_descriptor_tmp_55;
    block[4] = v1 + 72;
    block[5] = &v4;
    uint64_t v2 = *(NSObject **)(v1 + 88);
    if (*(void *)(v1 + 96)) {
      dispatch_async_and_wait(v2, block);
    }
    else {
      dispatch_sync(v2, block);
    }
  }
}

void data::TransportService::unblockThrottling(data::TransportService *this)
{
  uint64_t v1 = *(void *)this;
  if (*(void *)this)
  {
    v3[0] = MEMORY[0x263EF8330];
    v3[1] = 0x40000000;
    v3[2] = ___ZN4data16TransportService5State17unblockThrottlingEv_block_invoke;
    v3[3] = &__block_descriptor_tmp_61;
    v3[4] = v1;
    uint64_t v4 = v3;
    block[0] = MEMORY[0x263EF8330];
    block[1] = 0x40000000;
    block[2] = ___ZNK3ctu20SharedSynchronizableIN4data16TransportService5StateEE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS9__block_invoke;
    block[3] = &__block_descriptor_tmp_55;
    block[4] = v1 + 72;
    block[5] = &v4;
    uint64_t v2 = *(NSObject **)(v1 + 88);
    if (*(void *)(v1 + 96)) {
      dispatch_async_and_wait(v2, block);
    }
    else {
      dispatch_sync(v2, block);
    }
  }
}

uint64_t ctu::PthreadMutexGuardPolicy<sys::UIObserver>::~PthreadMutexGuardPolicy(uint64_t a1)
{
  pthread_mutex_lock((pthread_mutex_t *)a1);
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 72);
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 72);
  if (!v3 || atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v3);
  return a1;
}

uint64_t std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100](uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(std::__shared_weak_count **)(result + 8);
  if (v2)
  {
    if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void std::__shared_ptr_pointer<data::TransportService::State *,std::shared_ptr<data::TransportService::State> ctu::SharedSynchronizable<data::TransportService::State>::make_shared_ptr<data::TransportService::State>(data::TransportService::State*)::{lambda(data::TransportService::State *)#1},std::allocator<data::TransportService::State>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<data::TransportService::State *,std::shared_ptr<data::TransportService::State> ctu::SharedSynchronizable<data::TransportService::State>::make_shared_ptr<data::TransportService::State>(data::TransportService::State*)::{lambda(data::TransportService::State *)#1},std::allocator<data::TransportService::State>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<data::TransportService::State *,std::shared_ptr<data::TransportService::State> ctu::SharedSynchronizable<data::TransportService::State>::make_shared_ptr<data::TransportService::State>(data::TransportService::State*)::{lambda(data::TransportService::State *)#1},std::allocator<data::TransportService::State>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableIN4data16TransportService5StateEE15make_shared_ptrIS3_EENSt3__110shared"
                     "_ptrIT_EEPS8_EUlPS3_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableIN4data16TransportService5StateEE15make_shared_ptrIS3_EENSt3"
                                "__110shared_ptrIT_EEPS8_EUlPS3_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableIN4data16TransportService5StateEE15make_shared_ptrIS3_EENSt3__110shared_ptrIT_EEPS8_EUlPS3_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableIN4data16TransportService5StateEE15make_shared_ptrIS3_EENSt3__110shared_ptrIT_EEPS8_EUlPS3_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24; {
  return 0;
  }
}

uint64_t std::shared_ptr<data::TransportService::State> ctu::SharedSynchronizable<data::TransportService::State>::make_shared_ptr<data::TransportService::State>(data::TransportService::State*)::{lambda(data::TransportService::State*)#1}::operator() const(data::TransportService::State*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void std::__throw_bad_weak_ptr[abi:ne180100]()
{
  exception = __cxa_allocate_exception(8uLL);
  void *exception = MEMORY[0x263F8C2D8] + 16;
  __cxa_throw(exception, MEMORY[0x263F8C198], MEMORY[0x263F8C0A0]);
}

void data::TransportService::State::~State(data::TransportService::State *this)
{
  data::TransportService::State::~State(this);

  operator delete(v1);
}

{
  char *v2;
  char *v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  atomic_uint *v8;
  NSObject *v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  atomic_uint *v15;
  NSObject *v16;
  NSObject *v17;
  std::__shared_weak_count *v18;

  *(void *)this = &unk_270EA52D8;
  uint64_t v2 = (char *)this + 120;
  unint64_t v3 = (char *)*((void *)this + 16);
  if (v3 != (char *)this + 120)
  {
    do
    {
      boost::signals2::connection::disconnect((boost::signals2::connection *)(v3 + 16));
      unint64_t v3 = (char *)*((void *)v3 + 1);
    }
    while (v3 != v2);
  }
  if (*((void *)this + 17))
  {
    uint64_t v4 = *((void *)this + 15);
    uint64_t v5 = (char *)*((void *)this + 16);
    uint64_t v6 = *(void *)v5;
    *(void *)(v6 + 8) = *(void *)(v4 + 8);
    **(void **)(v4 + 8) = v6;
    *((void *)this + 17) = 0;
    if (v5 != v2)
    {
      do
      {
        uint64_t v7 = (char *)*((void *)v5 + 1);
        size_t v8 = (atomic_uint *)*((void *)v5 + 3);
        if (v8 && atomic_fetch_add(v8 + 3, 0xFFFFFFFF) == 1) {
          (*(void (**)(atomic_uint *))(*(void *)v8 + 24))(v8);
        }
        operator delete(v5);
        uint64_t v5 = v7;
      }
      while (v7 != v2);
    }
  }
  size_t v9 = *((void *)this + 20);
  if (v9) {
    dispatch_release(v9);
  }
  uint64_t v10 = (std::__shared_weak_count *)*((void *)this + 19);
  if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
    if (!*((void *)this + 17)) {
      goto LABEL_22;
    }
  }
  else if (!*((void *)this + 17))
  {
    goto LABEL_22;
  }
  dispatch_object_t v11 = *((void *)this + 15);
  uint64_t v12 = (char *)*((void *)this + 16);
  Class v13 = *(void *)v12;
  *(void *)(v13 + 8) = *(void *)(v11 + 8);
  **(void **)(v11 + 8) = v13;
  *((void *)this + 17) = 0;
  if (v12 != v2)
  {
    do
    {
      uint64_t v14 = (char *)*((void *)v12 + 1);
      xpc_object_t v15 = (atomic_uint *)*((void *)v12 + 3);
      if (v15 && atomic_fetch_add(v15 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v15 + 24))(v15);
      }
      operator delete(v12);
      uint64_t v12 = v14;
    }
    while (v14 != v2);
  }
LABEL_22:
  *(void *)this = &unk_270EA53E8;
  MEMORY[0x263E68AF0]((char *)this + 8);
  long long v16 = *((void *)this + 12);
  if (v16) {
    dispatch_release(v16);
  }
  long long v17 = *((void *)this + 11);
  if (v17) {
    dispatch_release(v17);
  }
  long long v18 = (std::__shared_weak_count *)*((void *)this + 10);
  if (v18) {
    std::__shared_weak_count::__release_weak(v18);
  }
}

uint64_t ctu::Loggable<data::TransportService::State,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig(uint64_t a1)
{
  return MEMORY[0x270F97428](a1 + 8);
}

void ctu::Loggable<data::TransportService::State,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName(char *a1@<X8>)
{
  a1[23] = 12;
  strcpy(a1, "ipc.svc.data");
}

uint64_t ctu::Loggable<data::TransportService::State,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return MEMORY[0x270F978E0](a1 + 8);
}

void std::__throw_bad_array_new_length[abi:ne180100]()
{
  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  uint64_t v1 = std::bad_array_new_length::bad_array_new_length(exception);
  __cxa_throw(v1, MEMORY[0x263F8C208], MEMORY[0x263F8C090]);
}

void *ctu::SharedSynchronizable<data::TransportService::State>::~SharedSynchronizable(void *a1)
{
  uint64_t v2 = a1[3];
  if (v2) {
    dispatch_release(v2);
  }
  unint64_t v3 = a1[2];
  if (v3) {
    dispatch_release(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[1];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

void *ctu::SharedLoggable<data::TransportService::State,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(void *a1)
{
  *a1 = &unk_270EA53E8;
  MEMORY[0x263E68AF0](a1 + 1);
  uint64_t v2 = a1[12];
  if (v2) {
    dispatch_release(v2);
  }
  unint64_t v3 = a1[11];
  if (v3) {
    dispatch_release(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[10];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

void ctu::SharedLoggable<data::TransportService::State,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(void *a1)
{
  *a1 = &unk_270EA53E8;
  MEMORY[0x263E68AF0](a1 + 1);
  uint64_t v2 = a1[12];
  if (v2) {
    dispatch_release(v2);
  }
  unint64_t v3 = a1[11];
  if (v3) {
    dispatch_release(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[10];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }

  operator delete(a1);
}

void *ctu::Loggable<data::TransportService::State,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_270EA53E8;
  MEMORY[0x263E68AF0](a1 + 1);
  return a1;
}

void ctu::Loggable<data::TransportService::State,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_270EA53E8;
  MEMORY[0x263E68AF0](a1 + 1);

  operator delete(a1);
}

void boost::signals2::connection::disconnect(boost::signals2::connection *this)
{
  uint64_t v1 = (atomic_uint *)*((void *)this + 1);
  if (v1)
  {
    uint64_t v2 = v1[2];
    while (v2)
    {
      uint64_t v3 = v2;
      atomic_compare_exchange_strong_explicit(v1 + 2, (unsigned int *)&v3, v2 + 1, memory_order_relaxed, memory_order_relaxed);
      BOOL v4 = v3 == v2;
      uint64_t v2 = v3;
      if (v4)
      {
        uint64_t v5 = *(boost::signals2::detail::connection_body_base **)this;
        if (v5) {
          boost::signals2::detail::connection_body_base::disconnect(v5);
        }
        if (atomic_fetch_add(v1 + 2, 0xFFFFFFFF) == 1)
        {
          (*(void (**)(atomic_uint *))(*(void *)v1 + 16))(v1);
          if (atomic_fetch_add(v1 + 3, 0xFFFFFFFF) == 1) {
            (*(void (**)(atomic_uint *))(*(void *)v1 + 24))(v1);
          }
        }
        return;
      }
    }
  }
}

void sub_263690B50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void boost::signals2::detail::connection_body_base::disconnect(boost::signals2::detail::connection_body_base *this)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  *(void *)&long long v2 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v2 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v6[8] = v2;
  v6[9] = v2;
  v6[6] = v2;
  v6[7] = v2;
  v6[4] = v2;
  v6[5] = v2;
  v6[2] = v2;
  v6[3] = v2;
  v6[0] = v2;
  v6[1] = v2;
  unint64_t v7 = 10;
  std::string __p = v6;
  uint64_t v9 = 0;
  uint64_t v10 = this;
  (*(void (**)(boost::signals2::detail::connection_body_base *))(*(void *)this + 24))(this);
  if (*((unsigned char *)this + 24))
  {
    *((unsigned char *)this + 24) = 0;
    boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::detail::connection_body_base>(this, v6);
  }
  (*(void (**)(boost::signals2::detail::connection_body_base *))(*(void *)v10 + 32))(v10);
  uint64_t v3 = (char *)__p;
  if (__p)
  {
    if (v9 - 1 >= 0)
    {
      BOOL v4 = (char *)__p + 16 * v9;
      do
      {
        uint64_t v5 = (atomic_uint *)*((void *)v4 - 1);
        if (v5)
        {
          if (atomic_fetch_add(v5 + 2, 0xFFFFFFFF) == 1)
          {
            (*(void (**)(atomic_uint *))(*(void *)v5 + 16))(v5);
            if (atomic_fetch_add(v5 + 3, 0xFFFFFFFF) == 1) {
              (*(void (**)(atomic_uint *))(*(void *)v5 + 24))(v5);
            }
          }
        }
        v4 -= 16;
      }
      while (v4 > v3);
    }
    if (v7 >= 0xB) {
      operator delete(__p);
    }
  }
}

void sub_263690D14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_263690D28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t boost::shared_ptr<boost::signals2::detail::connection_body_base>::~shared_ptr(uint64_t a1)
{
  long long v2 = *(atomic_uint **)(a1 + 8);
  if (v2)
  {
    if (atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
      if (atomic_fetch_add(v2 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v2 + 24))(v2);
      }
    }
  }
  return a1;
}

uint64_t boost::signals2::detail::garbage_collecting_lock<boost::signals2::detail::connection_body_base>::~garbage_collecting_lock(uint64_t a1)
{
  (*(void (**)(void))(**(void **)(a1 + 184) + 32))(*(void *)(a1 + 184));
  unint64_t v2 = *(void *)(a1 + 168);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 176);
    if (v3 - 1 >= 0)
    {
      unint64_t v4 = v2 + 16 * v3;
      do
      {
        uint64_t v5 = *(atomic_uint **)(v4 - 8);
        if (v5)
        {
          if (atomic_fetch_add(v5 + 2, 0xFFFFFFFF) == 1)
          {
            (*(void (**)(atomic_uint *))(*(void *)v5 + 16))(v5);
            if (atomic_fetch_add(v5 + 3, 0xFFFFFFFF) == 1) {
              (*(void (**)(atomic_uint *))(*(void *)v5 + 24))(v5);
            }
          }
        }
        v4 -= 16;
      }
      while (v4 > v2);
    }
    if (*(void *)(a1 + 160) >= 0xBuLL) {
      operator delete(*(void **)(a1 + 168));
    }
  }
  return a1;
}

uint64_t boost::shared_ptr<void>::~shared_ptr(uint64_t a1)
{
  unint64_t v2 = *(atomic_uint **)(a1 + 8);
  if (v2)
  {
    if (atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
      if (atomic_fetch_add(v2 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v2 + 24))(v2);
      }
    }
  }
  return a1;
}

void boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::detail::connection_body_base>(_DWORD *a1, void *a2)
{
  int v2 = a1[7] - 1;
  a1[7] = v2;
  if (!v2)
  {
    (*(void (**)(long long *__return_ptr))(*(void *)a1 + 40))(&v8);
    uint64_t v4 = a2[22];
    if (v4 == a2[20] && v4 != -1)
    {
      if (4 * v4 <= (unint64_t)(v4 + 1)) {
        unint64_t v5 = v4 + 1;
      }
      else {
        unint64_t v5 = 4 * v4;
      }
      boost::signals2::detail::auto_buffer<boost::shared_ptr<void>,boost::signals2::detail::store_n_objects<10u>,boost::signals2::detail::default_grow_policy,std::allocator<boost::shared_ptr<void>>>::reserve_impl((uint64_t)a2, v5);
      uint64_t v4 = a2[22];
    }
    uint64_t v6 = *((void *)&v8 + 1);
    *(_OWORD *)(a2[21] + 16 * v4) = v8;
    if (v6)
    {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v6 + 8), 1u, memory_order_relaxed);
      uint64_t v4 = a2[22];
    }
    a2[22] = v4 + 1;
    unint64_t v7 = (atomic_uint *)*((void *)&v8 + 1);
    if (*((void *)&v8 + 1) && atomic_fetch_add((atomic_uint *volatile)(*((void *)&v8 + 1) + 8), 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v7 + 16))(v7);
      if (atomic_fetch_add(v7 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v7 + 24))(v7);
      }
    }
  }
}

void sub_2636911C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void boost::signals2::detail::auto_buffer<boost::shared_ptr<void>,boost::signals2::detail::store_n_objects<10u>,boost::signals2::detail::default_grow_policy,std::allocator<boost::shared_ptr<void>>>::reserve_impl(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = (void *)a1;
  if (a2 >= 0xB)
  {
    if (a2 >> 60) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    uint64_t v4 = operator new(16 * a2);
  }
  uint64_t v6 = *(void **)(a1 + 168);
  uint64_t v5 = *(void *)(a1 + 176);
  if (v5)
  {
    unint64_t v7 = &v6[2 * v5];
    long long v8 = v4;
    do
    {
      uint64_t v9 = v6[1];
      void *v8 = *v6;
      v8[1] = v9;
      if (v9) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v9 + 8), 1u, memory_order_relaxed);
      }
      v6 += 2;
      v8 += 2;
    }
    while (v6 != v7);
    uint64_t v6 = *(void **)(a1 + 168);
  }
  if (v6)
  {
    uint64_t v10 = *(void *)(a1 + 176);
    if (v10 - 1 >= 0)
    {
      uint64_t v11 = &v6[2 * v10];
      do
      {
        uint64_t v12 = (atomic_uint *)*(v11 - 1);
        if (v12)
        {
          if (atomic_fetch_add(v12 + 2, 0xFFFFFFFF) == 1)
          {
            (*(void (**)(atomic_uint *))(*(void *)v12 + 16))(v12);
            if (atomic_fetch_add(v12 + 3, 0xFFFFFFFF) == 1) {
              (*(void (**)(atomic_uint *))(*(void *)v12 + 24))(v12);
            }
          }
        }
        v11 -= 2;
      }
      while (v11 > v6);
    }
    if (*(void *)(a1 + 160) >= 0xBuLL) {
      operator delete(*(void **)(a1 + 168));
    }
  }
  *(void *)(a1 + 160) = a2;
  *(void *)(a1 + 168) = v4;
}

void boost::signals2::connection::~connection(boost::signals2::connection *this)
{
  uint64_t v1 = (atomic_uint *)*((void *)this + 1);
  if (v1)
  {
    if (atomic_fetch_add(v1 + 3, 0xFFFFFFFF) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)v1 + 24))(v1);
    }
  }
}

void data::TransportService::State::handleUILockStateChange_sync(data::TransportService::State *this, int a2)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  uint64_t v4 = *((void *)this + 5);
  if (!os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    if (a2) {
      return;
    }
LABEL_7:
    data::TransportService::State::unblockThrottling_sync(this);
    return;
  }
  uint64_t v5 = "unlocked";
  if (a2) {
    uint64_t v5 = "locked";
  }
  int v6 = 136315138;
  unint64_t v7 = v5;
  _os_log_impl(&dword_26368A000, v4, OS_LOG_TYPE_DEFAULT, "#I UI has %s", (uint8_t *)&v6, 0xCu);
  if ((a2 & 1) == 0) {
    goto LABEL_7;
  }
}

uint64_t ___ZN3ctu20SharedSynchronizableIN4data16TransportService5StateEE13connect_eventIN5boost8signals26signalIFvbENS7_19optional_last_valueIvEEiNSt3__14lessIiEENS6_8functionIS9_EENSF_IFvRKNS7_10connectionEbEEENS7_5mutexEEES3_vJbEEEDTcl7connectfp_cvNSC_10shared_ptrIS3_EE_EcvP16dispatch_queue_s_EcvPFT1_DpT2_ELi0EEERT_MT0_FSS_SU_E_block_invoke(void *a1)
{
  uint64_t v1 = (uint64_t (*)(void *))a1[5];
  uint64_t v2 = a1[6];
  uint64_t v3 = (void *)(a1[4] + (v2 >> 1) - 72);
  if (v2) {
    return (*(uint64_t (**)(void))(*v3 + v1))();
  }
  else {
    return v1(v3);
  }
}

void **boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>::~slot(void **a1)
{
  unint64_t v2 = (unint64_t)a1[3];
  if (v2)
  {
    if ((v2 & 1) == 0)
    {
      uint64_t v3 = *(void (**)(void **, void **, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
      if (v3) {
        v3(a1 + 4, a1 + 4, 2);
      }
    }
    a1[3] = 0;
  }
  uint64_t v4 = *a1;
  if (*a1)
  {
    uint64_t v5 = (uint64_t)a1[1];
    int v6 = *a1;
    if ((void *)v5 != v4)
    {
      do
      {
        v5 -= 24;
        boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>::destroy_content(v5);
      }
      while ((void *)v5 != v4);
      int v6 = *a1;
    }
    a1[1] = v4;
    operator delete(v6);
  }
  return a1;
}

uint64_t ctu::DispatchSlot<dispatch::block<void({block_pointer})(BOOL)>>::~DispatchSlot(uint64_t a1)
{
  dispatch_release(*(dispatch_object_t *)a1);
  unint64_t v2 = *(const void **)(a1 + 8);
  if (v2) {
    _Block_release(v2);
  }
  return a1;
}

uint64_t boost::signals2::detail::garbage_collecting_lock<boost::signals2::mutex>::~garbage_collecting_lock(uint64_t a1)
{
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 184));
  unint64_t v2 = *(void *)(a1 + 168);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 176);
    if (v3 - 1 >= 0)
    {
      unint64_t v4 = v2 + 16 * v3;
      do
      {
        uint64_t v5 = *(atomic_uint **)(v4 - 8);
        if (v5)
        {
          if (atomic_fetch_add(v5 + 2, 0xFFFFFFFF) == 1)
          {
            (*(void (**)(atomic_uint *))(*(void *)v5 + 16))(v5);
            if (atomic_fetch_add(v5 + 3, 0xFFFFFFFF) == 1) {
              (*(void (**)(atomic_uint *))(*(void *)v5 + 24))(v5);
            }
          }
        }
        v4 -= 16;
      }
      while (v4 > v2);
    }
    if (*(void *)(a1 + 160) >= 0xBuLL) {
      operator delete(*(void **)(a1 + 168));
    }
  }
  return a1;
}

uint64_t boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>::~shared_ptr(uint64_t a1)
{
  unint64_t v2 = *(atomic_uint **)(a1 + 8);
  if (v2)
  {
    if (atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
      if (atomic_fetch_add(v2 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v2 + 24))(v2);
      }
    }
  }
  return a1;
}

uint64_t *boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::invocation_state>::shared_ptr<boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::invocation_state>(uint64_t *a1, uint64_t a2)
{
  *a1 = a2;
  a1[1] = 0;
  boost::detail::shared_count::shared_count<boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::invocation_state>(&v5, a2);
  uint64_t v3 = (atomic_uint *)a1[1];
  a1[1] = (uint64_t)v5;
  uint64_t v5 = v3;
  if (v3)
  {
    if (atomic_fetch_add(v3 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v3 + 16))(v3);
      if (atomic_fetch_add(v3 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v3 + 24))(v3);
      }
    }
  }
  return a1;
}

void sub_26369181C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(atomic_uint **)(v1 + 8);
  if (v3 && atomic_fetch_add(v3 + 2, 0xFFFFFFFF) == 1)
  {
    (*(void (**)(atomic_uint *))(*(void *)v3 + 16))(v3);
    if (atomic_fetch_add(v3 + 3, 0xFFFFFFFF) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)v3 + 24))(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

void *boost::detail::shared_count::shared_count<boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::invocation_state>(void *a1, uint64_t a2)
{
  *a1 = 0;
  unint64_t v4 = operator new(0x18uLL);
  v4[1] = 0x100000001;
  *unint64_t v4 = &unk_270EA5798;
  v4[2] = a2;
  *a1 = v4;
  return a1;
}

void sub_26369190C(void *a1)
{
  __cxa_begin_catch(a1);
  if (v1)
  {
    unint64_t v2 = (atomic_uint *)v1[3];
    if (v2)
    {
      if (atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1)
      {
        (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
        if (atomic_fetch_add(v2 + 3, 0xFFFFFFFF) == 1) {
          (*(void (**)(atomic_uint *))(*(void *)v2 + 24))(v2);
        }
      }
    }
    uint64_t v3 = (atomic_uint *)v1[1];
    if (v3 && atomic_fetch_add(v3 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v3 + 16))(v3);
      if (atomic_fetch_add(v3 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v3 + 24))(v3);
      }
    }
    operator delete(v1);
  }
  __cxa_rethrow();
}

void sub_263691A2C(_Unwind_Exception *a1)
{
}

void boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::invocation_state>::dispose(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 16);
  if (v1)
  {
    unint64_t v2 = (atomic_uint *)v1[3];
    if (v2)
    {
      if (atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1)
      {
        (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
        if (atomic_fetch_add(v2 + 3, 0xFFFFFFFF) == 1) {
          (*(void (**)(atomic_uint *))(*(void *)v2 + 24))(v2);
        }
      }
    }
    uint64_t v3 = (atomic_uint *)v1[1];
    if (v3)
    {
      if (atomic_fetch_add(v3 + 2, 0xFFFFFFFF) == 1)
      {
        (*(void (**)(atomic_uint *))(*(void *)v3 + 16))(v3);
        if (atomic_fetch_add(v3 + 3, 0xFFFFFFFF) == 1) {
          (*(void (**)(atomic_uint *))(*(void *)v3 + 24))(v3);
        }
      }
    }
    operator delete(v1);
  }
}

uint64_t boost::detail::sp_counted_base::destroy(uint64_t this)
{
  if (this) {
    return (*(uint64_t (**)(void))(*(void *)this + 8))();
  }
  return this;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::invocation_state>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::invocation_state>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::invocation_state>::get_untyped_deleter()
{
  return 0;
}

uint64_t *boost::shared_ptr<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>>::shared_ptr<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>>(uint64_t *a1, uint64_t a2)
{
  *a1 = a2;
  a1[1] = 0;
  boost::detail::shared_count::shared_count<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>>(&v5, a2);
  uint64_t v3 = (atomic_uint *)a1[1];
  a1[1] = (uint64_t)v5;
  uint64_t v5 = v3;
  if (v3)
  {
    if (atomic_fetch_add(v3 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v3 + 16))(v3);
      if (atomic_fetch_add(v3 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v3 + 24))(v3);
      }
    }
  }
  return a1;
}

void sub_263691CA0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(atomic_uint **)(v1 + 8);
  if (v3 && atomic_fetch_add(v3 + 2, 0xFFFFFFFF) == 1)
  {
    (*(void (**)(atomic_uint *))(*(void *)v3 + 16))(v3);
    if (atomic_fetch_add(v3 + 3, 0xFFFFFFFF) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)v3 + 24))(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>::grouped_list(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = std::list<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>::list((void *)a1, (void *)a2);
  v4[3] = 0;
  v4[4] = 0;
  v4[5] = 0;
  *((unsigned char *)v4 + 48) = *(unsigned char *)(a2 + 48);
  v4[3] = v4 + 4;
  uint64_t v5 = (void *)(a2 + 32);
  std::map<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>,boost::signals2::detail::group_key_less<int,std::less<int>>,std::allocator<std::pair<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>> const,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>>>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>>,std::__tree_node<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>>,void *> *,long>>>(v4 + 3, *(int **)(a2 + 24), (int *)(a2 + 32));
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  int v6 = *(void **)(a2 + 24);
  if (v6 != (void *)(a2 + 32))
  {
    unint64_t v7 = *(void **)(a1 + 24);
    uint64_t v8 = *(void *)(a1 + 8);
    do
    {
      v7[6] = v8;
      uint64_t v9 = a2;
      if (v6 != v5) {
        uint64_t v9 = v6[6];
      }
      uint64_t v10 = (void *)v6[1];
      uint64_t v11 = v10;
      uint64_t v12 = v6;
      if (v10)
      {
        do
        {
          Class v13 = v11;
          uint64_t v11 = (void *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          Class v13 = (void *)v12[2];
          BOOL v14 = *v13 == (void)v12;
          uint64_t v12 = v13;
        }
        while (!v14);
      }
      uint64_t v15 = a2;
      if (v13 != v5) {
        uint64_t v15 = v13[6];
      }
      while (v9 != v15)
      {
        uint64_t v9 = *(void *)(v9 + 8);
        uint64_t v8 = *(void *)(v8 + 8);
      }
      if (v10)
      {
        do
        {
          long long v16 = v10;
          uint64_t v10 = (void *)*v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          long long v16 = (void *)v6[2];
          BOOL v14 = *v16 == (void)v6;
          int v6 = v16;
        }
        while (!v14);
      }
      long long v17 = (void *)v7[1];
      if (v17)
      {
        do
        {
          long long v18 = v17;
          long long v17 = (void *)*v17;
        }
        while (v17);
      }
      else
      {
        do
        {
          long long v18 = (void *)v7[2];
          BOOL v14 = *v18 == (void)v7;
          unint64_t v7 = v18;
        }
        while (!v14);
      }
      int v6 = v16;
      unint64_t v7 = v18;
    }
    while (v16 != v5);
  }
  return a1;
}

void sub_263691E8C(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy(v2, *(void **)(v1 + 32));
  std::list<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>::~list((uint64_t *)v1);
  _Unwind_Resume(a1);
}

void *std::list<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>::list(void *a1, void *a2)
{
  *a1 = a1;
  a1[1] = a1;
  a1[2] = 0;
  uint64_t v3 = (void *)a2[1];
  if (v3 != a2)
  {
    uint64_t v5 = 0;
    int v6 = a1;
    do
    {
      unint64_t v7 = operator new(0x20uLL);
      uint64_t v8 = v3[3];
      v7[2] = v3[2];
      v7[3] = v8;
      if (v8)
      {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v8 + 8), 1u, memory_order_relaxed);
        int v6 = (void *)*a1;
        uint64_t v5 = a1[2];
      }
      void *v7 = v6;
      v7[1] = a1;
      v6[1] = v7;
      *a1 = v7;
      a1[2] = ++v5;
      uint64_t v3 = (void *)v3[1];
      int v6 = v7;
    }
    while (v3 != a2);
  }
  return a1;
}

void sub_263691F54(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    uint64_t v5 = (uint64_t *)v1[1];
    uint64_t v6 = *v5;
    *(void *)(v6 + 8) = *(void *)(v3 + 8);
    **(void **)(v3 + 8) = v6;
    v1[2] = 0;
    if (v5 != v1)
    {
      do
      {
        unint64_t v7 = (uint64_t *)v5[1];
        uint64_t v8 = (atomic_uint *)v5[3];
        if (v8 && atomic_fetch_add(v8 + 2, 0xFFFFFFFF) == 1)
        {
          (*(void (**)(atomic_uint *))(*(void *)v8 + 16))(v8);
          if (atomic_fetch_add(v8 + 3, 0xFFFFFFFF) == 1) {
            (*(void (**)(atomic_uint *))(*(void *)v8 + 24))(v8);
          }
        }
        operator delete(v5);
        uint64_t v5 = v7;
      }
      while (v7 != v1);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::list<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>::~list(uint64_t *a1)
{
  if (a1[2])
  {
    uint64_t v2 = *a1;
    uint64_t v3 = (uint64_t *)a1[1];
    uint64_t v4 = *v3;
    *(void *)(v4 + 8) = *(void *)(*a1 + 8);
    **(void **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        uint64_t v5 = (uint64_t *)v3[1];
        uint64_t v6 = (atomic_uint *)v3[3];
        if (v6)
        {
          if (atomic_fetch_add(v6 + 2, 0xFFFFFFFF) == 1)
          {
            (*(void (**)(atomic_uint *))(*(void *)v6 + 16))(v6);
            if (atomic_fetch_add(v6 + 3, 0xFFFFFFFF) == 1) {
              (*(void (**)(atomic_uint *))(*(void *)v6 + 24))(v6);
            }
          }
        }
        operator delete(v3);
        uint64_t v3 = v5;
      }
      while (v5 != a1);
    }
  }
  return a1;
}

uint64_t *std::map<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>,boost::signals2::detail::group_key_less<int,std::less<int>>,std::allocator<std::pair<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>> const,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>>>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>>,std::__tree_node<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>>,void *> *,long>>>(uint64_t *result, int *a2, int *a3)
{
  if (a2 != a3)
  {
    v19[9] = v3;
    v19[10] = v4;
    uint64_t v6 = a2;
    unint64_t v7 = result;
    uint64_t v8 = result + 1;
    do
    {
      long long v18 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
      v19[0] = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
      xpc_object_t result = std::__tree<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>>,std::__map_value_compare<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>>,boost::signals2::detail::group_key_less<int,std::less<int>>,false>,std::allocator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>>>>::__find_equal<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>>(v7, v8, v19, &v18, v6 + 8);
      if (*result)
      {
        uint64_t v9 = (int *)*((void *)v6 + 1);
        if (v9) {
          goto LABEL_11;
        }
      }
      else
      {
        uint64_t v10 = result;
        uint64_t v11 = operator new(0x38uLL);
        uint64_t v12 = *((void *)v6 + 6);
        v11[2] = *((_OWORD *)v6 + 2);
        *((void *)v11 + 6) = v12;
        Class v13 = v19[0];
        *(void *)uint64_t v11 = 0;
        *((void *)v11 + 1) = 0;
        *((void *)v11 + 2) = v13;
        uint64_t *v10 = (uint64_t)v11;
        BOOL v14 = *(void **)*v7;
        if (v14)
        {
          uint64_t *v7 = (uint64_t)v14;
          uint64_t v15 = (uint64_t *)*v10;
        }
        else
        {
          uint64_t v15 = (uint64_t *)v11;
        }
        xpc_object_t result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v7[1], v15);
        ++v7[2];
        uint64_t v9 = (int *)*((void *)v6 + 1);
        if (v9)
        {
          do
          {
LABEL_11:
            long long v16 = v9;
            uint64_t v9 = *(int **)v9;
          }
          while (v9);
          goto LABEL_3;
        }
      }
      do
      {
        long long v16 = (int *)*((void *)v6 + 2);
        BOOL v17 = *(void *)v16 == (void)v6;
        uint64_t v6 = v16;
      }
      while (!v17);
LABEL_3:
      uint64_t v6 = v16;
    }
    while (v16 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>>,std::__map_value_compare<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>>,boost::signals2::detail::group_key_less<int,std::less<int>>,false>,std::allocator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>>>>::__find_equal<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>>(void *a1, uint64_t *a2, uint64_t **a3, uint64_t **a4, int *a5)
{
  uint64_t v5 = a1 + 1;
  if (a1 + 1 == a2) {
    goto LABEL_8;
  }
  int v6 = *a5;
  int v7 = *((_DWORD *)a2 + 8);
  if (*a5 == v7)
  {
    if (v6 != 1)
    {
LABEL_6:
      *a3 = a2;
      *a4 = a2;
      return (uint64_t *)a4;
    }
    int v8 = a5[2];
    int v9 = *((_DWORD *)a2 + 10);
    if (v8 >= v9)
    {
      if (v9 >= v8) {
        goto LABEL_6;
      }
      goto LABEL_15;
    }
LABEL_8:
    uint64_t v11 = (uint64_t *)*a2;
    if ((uint64_t *)*a1 == a2)
    {
      Class v13 = a2;
    }
    else
    {
      if (v11)
      {
        uint64_t v12 = (uint64_t *)*a2;
        do
        {
          Class v13 = v12;
          uint64_t v12 = (uint64_t *)v12[1];
        }
        while (v12);
      }
      else
      {
        BOOL v17 = a2;
        do
        {
          Class v13 = (uint64_t *)v17[2];
          BOOL v18 = *v13 == (void)v17;
          BOOL v17 = v13;
        }
        while (v18);
      }
      int v19 = *((_DWORD *)v13 + 8);
      int v20 = *a5;
      if (v19 == *a5)
      {
        if (v19 != 1 || *((_DWORD *)v13 + 10) >= a5[2]) {
          goto LABEL_24;
        }
      }
      else if (v19 >= v20)
      {
LABEL_24:
        uint64_t v21 = (void *)*v5;
        if (!*v5)
        {
          *a3 = v5;
          return a1 + 1;
        }
        if (v20 != 1)
        {
          while (1)
          {
            int v26 = *((_DWORD *)v21 + 8);
            long long v23 = v21;
            if (v20 == v26) {
              break;
            }
            if (v20 < v26)
            {
              uint64_t v21 = (void *)*v21;
              uint64_t v5 = v23;
              if (!*v23) {
                break;
              }
            }
            else
            {
              if (v26 >= v20) {
                break;
              }
              uint64_t v5 = v21 + 1;
              uint64_t v21 = (void *)v21[1];
              if (!v21) {
                break;
              }
            }
          }
LABEL_40:
          *a3 = v23;
          return v5;
        }
        int v22 = a5[2];
        while (1)
        {
          long long v23 = v21;
          int v24 = *((_DWORD *)v21 + 8);
          if (v24 == 1)
          {
            int v25 = *((_DWORD *)v23 + 10);
            if (v22 >= v25)
            {
              if (v25 >= v22) {
                goto LABEL_40;
              }
              goto LABEL_33;
            }
LABEL_27:
            uint64_t v21 = (void *)*v23;
            uint64_t v5 = v23;
            if (!*v23) {
              goto LABEL_40;
            }
          }
          else
          {
            if (v24 > 1) {
              goto LABEL_27;
            }
LABEL_33:
            uint64_t v5 = v23 + 1;
            uint64_t v21 = (void *)v23[1];
            if (!v21) {
              goto LABEL_40;
            }
          }
        }
      }
    }
    if (v11)
    {
      *a3 = v13;
      return v13 + 1;
    }
    else
    {
      *a3 = a2;
      return a2;
    }
  }
  if (v6 < v7) {
    goto LABEL_8;
  }
  if (v7 >= v6) {
    goto LABEL_6;
  }
LABEL_15:
  uint64_t v14 = a2[1];
  if (v14)
  {
    uint64_t v15 = (uint64_t *)a2[1];
    do
    {
      long long v16 = v15;
      uint64_t v15 = (uint64_t *)*v15;
    }
    while (v15);
  }
  else
  {
    uint64_t v27 = a2;
    do
    {
      long long v16 = (uint64_t *)v27[2];
      BOOL v18 = *v16 == (void)v27;
      uint64_t v27 = v16;
    }
    while (!v18);
  }
  if (v16 == v5) {
    goto LABEL_56;
  }
  int v28 = *((_DWORD *)v16 + 8);
  if (v6 == v28)
  {
    if (v6 == 1)
    {
      int v29 = a5[2];
      if (v29 >= *((_DWORD *)v16 + 10))
      {
        size_t v30 = (void *)*v5;
        if (!*v5)
        {
          *a3 = v5;
          return a1 + 1;
        }
        goto LABEL_61;
      }
      goto LABEL_56;
    }
    goto LABEL_58;
  }
  if (v6 < v28)
  {
LABEL_56:
    if (v14)
    {
      *a3 = v16;
      return v16;
    }
    else
    {
      *a3 = a2;
      return a2 + 1;
    }
  }
LABEL_58:
  size_t v30 = (void *)*v5;
  if (*v5)
  {
    if (v6 == 1)
    {
      int v29 = a5[2];
LABEL_61:
      BOOL v31 = v30;
      while (1)
      {
        size_t v30 = v31;
        int v32 = *((_DWORD *)v31 + 8);
        if (v32 == 1)
        {
          int v33 = *((_DWORD *)v30 + 10);
          if (v29 >= v33)
          {
            if (v33 >= v29) {
              goto LABEL_72;
            }
            goto LABEL_68;
          }
LABEL_62:
          BOOL v31 = (void *)*v30;
          uint64_t v5 = v30;
          if (!*v30) {
            goto LABEL_72;
          }
        }
        else
        {
          if (v32 > 1) {
            goto LABEL_62;
          }
LABEL_68:
          uint64_t v5 = v30 + 1;
          BOOL v31 = (void *)v30[1];
          if (!v31) {
            goto LABEL_72;
          }
        }
      }
    }
    int v34 = *((_DWORD *)v30 + 8);
    while (v6 != v34)
    {
      if (v6 < v34)
      {
        uint64_t v35 = *v30;
        uint64_t v5 = v30;
        if (!*v30) {
          break;
        }
      }
      else
      {
        if (v34 >= v6) {
          break;
        }
        uint64_t v5 = v30 + 1;
        uint64_t v35 = v30[1];
        if (!v35) {
          break;
        }
      }
      int v34 = *(_DWORD *)(v35 + 32);
      size_t v30 = (void *)v35;
    }
  }
  else
  {
    size_t v30 = a1 + 1;
  }
LABEL_72:
  *a3 = v30;
  return v5;
}

void *boost::detail::shared_count::shared_count<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>>(void *a1, uint64_t a2)
{
  *a1 = 0;
  uint64_t v4 = operator new(0x18uLL);
  v4[1] = 0x100000001;
  *uint64_t v4 = &unk_270EA5728;
  v4[2] = a2;
  *a1 = v4;
  return a1;
}

void sub_2636925AC(void *a1)
{
  __cxa_begin_catch(a1);
  if (v1)
  {
    std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)(v1 + 3), (void *)v1[4]);
    if (v1[2])
    {
      uint64_t v2 = (void *)*v1;
      uint64_t v3 = (uint64_t *)v1[1];
      uint64_t v4 = *v3;
      *(void *)(v4 + 8) = *(void *)(*v1 + 8);
      *(void *)v2[1] = v4;
      v1[2] = 0;
      if (v3 != v1)
      {
        do
        {
          uint64_t v5 = (uint64_t *)v3[1];
          int v6 = (atomic_uint *)v3[3];
          if (v6 && atomic_fetch_add(v6 + 2, 0xFFFFFFFF) == 1)
          {
            (*(void (**)(atomic_uint *))(*(void *)v6 + 16))(v6);
            if (atomic_fetch_add(v6 + 3, 0xFFFFFFFF) == 1) {
              (*(void (**)(atomic_uint *))(*(void *)v6 + 24))(v6);
            }
          }
          operator delete(v3);
          uint64_t v3 = v5;
        }
        while (v5 != v1);
      }
    }
    operator delete(v1);
  }
  __cxa_rethrow();
}

void sub_26369269C(_Unwind_Exception *a1)
{
}

void boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>>::dispose(uint64_t a1)
{
  uint64_t v1 = *(uint64_t **)(a1 + 16);
  if (v1)
  {
    std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)(v1 + 3), (void *)v1[4]);
    if (v1[2])
    {
      uint64_t v2 = (void *)*v1;
      uint64_t v3 = (uint64_t *)v1[1];
      uint64_t v4 = *v3;
      *(void *)(v4 + 8) = *(void *)(*v1 + 8);
      *(void *)v2[1] = v4;
      v1[2] = 0;
      if (v3 != v1)
      {
        do
        {
          uint64_t v5 = (uint64_t *)v3[1];
          int v6 = (atomic_uint *)v3[3];
          if (v6)
          {
            if (atomic_fetch_add(v6 + 2, 0xFFFFFFFF) == 1)
            {
              (*(void (**)(atomic_uint *))(*(void *)v6 + 16))(v6);
              if (atomic_fetch_add(v6 + 3, 0xFFFFFFFF) == 1) {
                (*(void (**)(atomic_uint *))(*(void *)v6 + 24))(v6);
              }
            }
          }
          operator delete(v3);
          uint64_t v3 = v5;
        }
        while (v5 != v1);
      }
    }
    operator delete(v1);
  }
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>>::get_untyped_deleter()
{
  return 0;
}

uint64_t boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>::erase(uint64_t *a1, int *a2, uint64_t **a3)
{
  int v6 = a1 + 4;
  uint64_t v5 = (uint64_t *)a1[4];
  if (!v5)
  {
    uint64_t v23 = a1[10];
    if ((uint64_t *)v23 != *a3) {
      goto LABEL_55;
    }
    int v19 = *(uint64_t **)(v23 + 8);
    int v9 = v6;
    int v24 = (uint64_t **)(v6 - 1);
    if (v19 != a1)
    {
LABEL_46:
      char v39 = a2;
      std::__tree<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>>,std::__map_value_compare<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>>,boost::signals2::detail::group_key_less<int,std::less<int>>,false>,std::allocator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>>>>::__emplace_unique_key_args<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::piecewise_construct_t const&,std::tuple<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>> const&>,std::tuple<>>(v24, a2, (uint64_t)&std::piecewise_construct, &v39)[6] = v19;
      goto LABEL_55;
    }
    goto LABEL_31;
  }
  int v7 = *a2;
  int v8 = a2[2];
  int v9 = v6;
  uint64_t v10 = v5;
  if (*a2 == 1)
  {
    do
    {
      while (1)
      {
        int v16 = *((_DWORD *)v10 + 8);
        BOOL v17 = v16 < 1;
        if (v16 == 1) {
          BOOL v17 = *((_DWORD *)v10 + 10) < v8;
        }
        if (!v17) {
          break;
        }
        uint64_t v10 = (uint64_t *)v10[1];
        if (!v10) {
          goto LABEL_19;
        }
      }
      int v9 = v10;
      uint64_t v10 = (uint64_t *)*v10;
    }
    while (v10);
  }
  else
  {
    do
    {
      int v11 = *((_DWORD *)v10 + 8);
      BOOL v12 = v11 == v7;
      BOOL v13 = v11 < v7;
      if (v11 >= v7) {
        uint64_t v14 = (uint64_t **)v10;
      }
      else {
        uint64_t v14 = (uint64_t **)(v10 + 1);
      }
      if (v13) {
        uint64_t v15 = v9;
      }
      else {
        uint64_t v15 = v10;
      }
      if (v12)
      {
        uint64_t v14 = (uint64_t **)v10;
        int v9 = v10;
      }
      else
      {
        int v9 = v15;
      }
      uint64_t v10 = *v14;
    }
    while (*v14);
  }
LABEL_19:
  uint64_t v18 = v9[6];
  if ((uint64_t *)v18 == *a3)
  {
    int v19 = *(uint64_t **)(v18 + 8);
    int v20 = v6;
    if (v7 == 1)
    {
      uint64_t v21 = v5;
      while (1)
      {
        int v22 = *((_DWORD *)v21 + 8);
        if (v22 == 1)
        {
          if (v8 < *((_DWORD *)v21 + 10)) {
            goto LABEL_27;
          }
LABEL_22:
          uint64_t v21 = (uint64_t *)v21[1];
          if (!v21) {
            goto LABEL_44;
          }
        }
        else
        {
          if (v22 <= 1) {
            goto LABEL_22;
          }
LABEL_27:
          int v20 = v21;
          uint64_t v21 = (uint64_t *)*v21;
          if (!v21) {
            goto LABEL_44;
          }
        }
      }
    }
    uint64_t v27 = v5;
    do
    {
      int v28 = *((_DWORD *)v27 + 8);
      int v29 = (uint64_t **)(v27 + 1);
      BOOL v30 = v7 == v28;
      BOOL v31 = v7 < v28;
      if (v7 >= v28) {
        int v32 = (uint64_t **)(v27 + 1);
      }
      else {
        int v32 = (uint64_t **)v27;
      }
      if (!v31) {
        uint64_t v27 = v20;
      }
      if (v30) {
        int v32 = v29;
      }
      else {
        int v20 = v27;
      }
      uint64_t v27 = *v32;
    }
    while (*v32);
LABEL_44:
    if (v20 == v6)
    {
      int v24 = (uint64_t **)(v6 - 1);
      if (v19 != a1) {
        goto LABEL_46;
      }
    }
    else
    {
      int v24 = (uint64_t **)(v6 - 1);
      if (v19 != (uint64_t *)v20[6]) {
        goto LABEL_46;
      }
    }
LABEL_31:
    int v25 = (uint64_t *)v9[1];
    if (v25)
    {
      do
      {
        int v26 = v25;
        int v25 = (uint64_t *)*v25;
      }
      while (v25);
    }
    else
    {
      int v33 = v9;
      do
      {
        int v26 = (uint64_t *)v33[2];
        BOOL v12 = *v26 == (void)v33;
        int v33 = v26;
      }
      while (!v12);
    }
    if (*v24 == v9) {
      *int v24 = v26;
    }
    --a1[5];
    std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v5, v9);
    operator delete(v9);
  }
LABEL_55:
  int v34 = *a3;
  uint64_t v35 = **a3;
  uint64_t v36 = (*a3)[1];
  *(void *)(v35 + 8) = v36;
  *(void *)v34[1] = v35;
  --a1[2];
  uint64_t v37 = (atomic_uint *)v34[3];
  if (v37)
  {
    if (atomic_fetch_add(v37 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v37 + 16))(v37);
      if (atomic_fetch_add(v37 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v37 + 24))(v37);
      }
    }
  }
  operator delete(v34);
  return v36;
}

void boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::mutex>(_DWORD *a1, void *a2)
{
  int v2 = a1[7] - 1;
  a1[7] = v2;
  if (!v2)
  {
    (*(void (**)(long long *__return_ptr))(*(void *)a1 + 40))(&v8);
    uint64_t v4 = a2[22];
    if (v4 == a2[20] && v4 != -1)
    {
      if (4 * v4 <= (unint64_t)(v4 + 1)) {
        unint64_t v5 = v4 + 1;
      }
      else {
        unint64_t v5 = 4 * v4;
      }
      boost::signals2::detail::auto_buffer<boost::shared_ptr<void>,boost::signals2::detail::store_n_objects<10u>,boost::signals2::detail::default_grow_policy,std::allocator<boost::shared_ptr<void>>>::reserve_impl((uint64_t)a2, v5);
      uint64_t v4 = a2[22];
    }
    uint64_t v6 = *((void *)&v8 + 1);
    *(_OWORD *)(a2[21] + 16 * v4) = v8;
    if (v6)
    {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v6 + 8), 1u, memory_order_relaxed);
      uint64_t v4 = a2[22];
    }
    a2[22] = v4 + 1;
    int v7 = (atomic_uint *)*((void *)&v8 + 1);
    if (*((void *)&v8 + 1) && atomic_fetch_add((atomic_uint *volatile)(*((void *)&v8 + 1) + 8), 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v7 + 16))(v7);
      if (atomic_fetch_add(v7 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v7 + 24))(v7);
      }
    }
  }
}

void sub_263692C08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t **std::__tree<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>>,std::__map_value_compare<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>>,boost::signals2::detail::group_key_less<int,std::less<int>>,false>,std::allocator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>>>>::__emplace_unique_key_args<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::piecewise_construct_t const&,std::tuple<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>> const&>,std::tuple<>>(uint64_t **a1, int *a2, uint64_t a3, void **a4)
{
  int v7 = a1 + 1;
  uint64_t v6 = a1[1];
  if (v6)
  {
    int v8 = *a2;
    if (*a2 != 1)
    {
      int v18 = *((_DWORD *)v6 + 8);
      if (v8 == v18) {
        return (uint64_t **)v6;
      }
      uint64_t v10 = (uint64_t **)a1[1];
      while (1)
      {
        if (v8 < v18)
        {
          uint64_t v6 = *v10;
          int v7 = v10;
          if (!*v10) {
            goto LABEL_13;
          }
        }
        else
        {
          if (v18 >= v8) {
            return v10;
          }
          uint64_t v6 = v10[1];
          if (!v6)
          {
LABEL_11:
            int v7 = v10 + 1;
            goto LABEL_13;
          }
        }
        int v18 = *((_DWORD *)v6 + 8);
        uint64_t v10 = (uint64_t **)v6;
        if (v8 == v18) {
          return (uint64_t **)v6;
        }
      }
    }
    int v9 = a2[2];
    while (1)
    {
      uint64_t v10 = (uint64_t **)v6;
      int v11 = *((_DWORD *)v6 + 8);
      if (v11 == 1)
      {
        int v12 = *((_DWORD *)v6 + 10);
        if (v9 >= v12)
        {
          if (v12 >= v9) {
            return v10;
          }
          goto LABEL_10;
        }
LABEL_4:
        uint64_t v6 = (uint64_t *)*v6;
        int v7 = v10;
        if (!*v10) {
          goto LABEL_13;
        }
      }
      else
      {
        if (v11 > 1) {
          goto LABEL_4;
        }
LABEL_10:
        uint64_t v6 = (uint64_t *)v6[1];
        if (!v6) {
          goto LABEL_11;
        }
      }
    }
  }
  uint64_t v10 = a1 + 1;
LABEL_13:
  BOOL v13 = operator new(0x38uLL);
  int v14 = *((_DWORD *)*a4 + 2);
  v13[4] = **a4;
  *((_DWORD *)v13 + 10) = v14;
  v13[6] = 0;
  *BOOL v13 = 0;
  v13[1] = 0;
  void v13[2] = v10;
  atomic_uint *v7 = v13;
  uint64_t v15 = (uint64_t *)**a1;
  int v16 = v13;
  if (v15)
  {
    *a1 = v15;
    int v16 = *v7;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v16);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return (uint64_t **)v13;
}

uint64_t *std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = a2;
  if (*a2)
  {
    uint64_t v4 = (uint64_t *)a2[1];
    if (!v4)
    {
      uint64_t v3 = a2;
      goto LABEL_10;
    }
    do
    {
      uint64_t v3 = v4;
      uint64_t v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  uint64_t v2 = v3[1];
  if (!v2)
  {
    int v5 = 1;
    uint64_t v6 = (uint64_t **)v3[2];
    int v7 = *v6;
    if (*v6 == v3) {
      goto LABEL_6;
    }
LABEL_11:
    v6[1] = (uint64_t *)v2;
    int v8 = *((unsigned __int8 *)v3 + 24);
    if (v3 == a2) {
      goto LABEL_16;
    }
    goto LABEL_12;
  }
LABEL_10:
  int v5 = 0;
  *(void *)(v2 + 16) = v3[2];
  uint64_t v6 = (uint64_t **)v3[2];
  int v7 = *v6;
  if (*v6 != v3) {
    goto LABEL_11;
  }
LABEL_6:
  uint64_t *v6 = (uint64_t *)v2;
  if (v3 != result)
  {
    int v7 = v6[1];
    int v8 = *((unsigned __int8 *)v3 + 24);
    if (v3 == a2) {
      goto LABEL_16;
    }
LABEL_12:
    uint64_t v9 = a2[2];
    v3[2] = v9;
    *(void *)(v9 + 8 * (*(void *)a2[2] != (void)a2)) = v3;
    uint64_t v11 = *a2;
    uint64_t v10 = a2[1];
    *(void *)(v11 + 16) = v3;
    *uint64_t v3 = v11;
    v3[1] = v10;
    if (v10) {
      *(void *)(v10 + 16) = v3;
    }
    *((unsigned char *)v3 + 24) = *((unsigned char *)a2 + 24);
    if (result == a2) {
      xpc_object_t result = v3;
    }
    goto LABEL_16;
  }
  int v7 = 0;
  xpc_object_t result = (uint64_t *)v2;
  int v8 = *((unsigned __int8 *)v3 + 24);
  if (v3 != a2) {
    goto LABEL_12;
  }
LABEL_16:
  if (!v8 || !result) {
    return result;
  }
  if (!v5)
  {
    *(unsigned char *)(v2 + 24) = 1;
    return result;
  }
  while (1)
  {
    int v14 = (uint64_t **)v7[2];
    if (*v14 != v7) {
      break;
    }
    if (*((unsigned char *)v7 + 24))
    {
      int v16 = (void *)*v7;
      if (*v7) {
        goto LABEL_48;
      }
    }
    else
    {
      *((unsigned char *)v7 + 24) = 1;
      *((unsigned char *)v14 + 24) = 0;
      int v20 = (uint64_t *)v7[1];
      *int v14 = v20;
      if (v20) {
        v20[2] = (uint64_t)v14;
      }
      v7[2] = (uint64_t)v14[2];
      v14[2][*v14[2] != (void)v14] = (uint64_t)v7;
      v7[1] = (uint64_t)v14;
      v14[2] = v7;
      if (result == (uint64_t *)v14) {
        xpc_object_t result = v7;
      }
      int v7 = *v14;
      int v16 = (void *)**v14;
      if (v16)
      {
LABEL_48:
        if (!*((unsigned char *)v16 + 24)) {
          goto LABEL_71;
        }
      }
    }
    uint64_t v21 = (uint64_t *)v7[1];
    if (v21 && !*((unsigned char *)v21 + 24))
    {
      if (v16 && !*((unsigned char *)v16 + 24))
      {
LABEL_71:
        uint64_t v21 = v7;
      }
      else
      {
        *((unsigned char *)v21 + 24) = 1;
        *((unsigned char *)v7 + 24) = 0;
        uint64_t v22 = *v21;
        v7[1] = *v21;
        if (v22) {
          *(void *)(v22 + 16) = v7;
        }
        v21[2] = v7[2];
        *(void *)(v7[2] + 8 * (*(void *)v7[2] != (void)v7)) = v21;
        uint64_t *v21 = (uint64_t)v7;
        v7[2] = (uint64_t)v21;
        int v16 = v7;
      }
      uint64_t v27 = (uint64_t *)v21[2];
      *((unsigned char *)v21 + 24) = *((unsigned char *)v27 + 24);
      *((unsigned char *)v27 + 24) = 1;
      *((unsigned char *)v16 + 24) = 1;
      uint64_t v28 = *v27;
      uint64_t v29 = *(void *)(*v27 + 8);
      uint64_t *v27 = v29;
      if (v29) {
        *(void *)(v29 + 16) = v27;
      }
      *(void *)(v28 + 16) = v27[2];
      *(void *)(v27[2] + 8 * (*(void *)v27[2] != (void)v27)) = v28;
      *(void *)(v28 + 8) = v27;
      v27[2] = v28;
      return result;
    }
    *((unsigned char *)v7 + 24) = 0;
    int v12 = (uint64_t *)v7[2];
    if (*((unsigned char *)v12 + 24)) {
      BOOL v13 = v12 == result;
    }
    else {
      BOOL v13 = 1;
    }
    if (v13) {
      goto LABEL_61;
    }
LABEL_24:
    int v7 = *(uint64_t **)(v12[2] + 8 * (*(void *)v12[2] == (void)v12));
  }
  if (*((unsigned char *)v7 + 24))
  {
    uint64_t v15 = (void *)*v7;
    if (!*v7)
    {
LABEL_38:
      int v19 = (uint64_t *)v7[1];
      if (v19 && !*((unsigned char *)v19 + 24)) {
        goto LABEL_67;
      }
      *((unsigned char *)v7 + 24) = 0;
      int v12 = (uint64_t *)v7[2];
      if (v12 == result)
      {
        int v12 = result;
LABEL_61:
        *((unsigned char *)v12 + 24) = 1;
        return result;
      }
      if (!*((unsigned char *)v12 + 24)) {
        goto LABEL_61;
      }
      goto LABEL_24;
    }
  }
  else
  {
    *((unsigned char *)v7 + 24) = 1;
    *((unsigned char *)v14 + 24) = 0;
    BOOL v17 = v14[1];
    int v18 = (uint64_t *)*v17;
    v14[1] = (uint64_t *)*v17;
    if (v18) {
      v18[2] = (uint64_t)v14;
    }
    v17[2] = (uint64_t)v14[2];
    v14[2][*v14[2] != (void)v14] = (uint64_t)v17;
    uint64_t *v17 = (uint64_t)v14;
    v14[2] = v17;
    if (result == (uint64_t *)*v7) {
      xpc_object_t result = v7;
    }
    int v7 = *(uint64_t **)(*v7 + 8);
    uint64_t v15 = (void *)*v7;
    if (!*v7) {
      goto LABEL_38;
    }
  }
  if (*((unsigned char *)v15 + 24)) {
    goto LABEL_38;
  }
  int v19 = (uint64_t *)v7[1];
  if (v19 && !*((unsigned char *)v19 + 24))
  {
LABEL_67:
    uint64_t v15 = v7;
  }
  else
  {
    *((unsigned char *)v15 + 24) = 1;
    *((unsigned char *)v7 + 24) = 0;
    uint64_t v23 = v15[1];
    uint64_t *v7 = v23;
    if (v23) {
      *(void *)(v23 + 16) = v7;
    }
    v15[2] = v7[2];
    *(void *)(v7[2] + 8 * (*(void *)v7[2] != (void)v7)) = v15;
    v15[1] = v7;
    v7[2] = (uint64_t)v15;
    int v19 = v7;
  }
  uint64_t v24 = v15[2];
  *((unsigned char *)v15 + 24) = *(unsigned char *)(v24 + 24);
  *(unsigned char *)(v24 + 24) = 1;
  *((unsigned char *)v19 + 24) = 1;
  int v25 = *(uint64_t **)(v24 + 8);
  uint64_t v26 = *v25;
  *(void *)(v24 + 8) = *v25;
  if (v26) {
    *(void *)(v26 + 16) = v24;
  }
  v25[2] = *(void *)(v24 + 16);
  *(void *)(*(void *)(v24 + 16) + 8 * (**(void **)(v24 + 16) != v24)) = v25;
  uint64_t *v25 = v24;
  *(void *)(v24 + 16) = v25;
  return result;
}

void boost::signals2::detail::connection_body_base::~connection_body_base(boost::signals2::detail::connection_body_base *this)
{
  *(void *)this = &unk_270EA54D0;
  uint64_t v1 = (atomic_uint *)*((void *)this + 2);
  if (v1)
  {
    if (atomic_fetch_add(v1 + 3, 0xFFFFFFFF) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)v1 + 24))(v1);
    }
  }
}

void boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>::~connection_body(void *a1)
{
  uint64_t v1 = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>::~connection_body(a1);

  operator delete(v1);
}

BOOL boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>::connected(uint64_t a1)
{
  v19[3] = *MEMORY[0x263EF8340];
  *(void *)&long long v2 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v2 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v14[8] = v2;
  v14[9] = v2;
  v14[6] = v2;
  v14[7] = v2;
  v14[4] = v2;
  v14[5] = v2;
  v14[2] = v2;
  v14[3] = v2;
  v14[0] = v2;
  v14[1] = v2;
  uint64_t v3 = *(pthread_mutex_t **)(a1 + 48);
  unint64_t v15 = 10;
  int v16 = (char *)v14;
  uint64_t v17 = 0;
  int v18 = v3;
  pthread_mutex_lock(v3);
  uint64_t v4 = *(uint64_t **)(a1 + 32);
  if (v4)
  {
    uint64_t v5 = *v4;
    if (*v4 != v4[1])
    {
      while (1)
      {
        memset(v19, 170, 24);
        boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>::apply_visitor<boost::signals2::detail::lock_weak_ptr_visitor const>(v5, (uint64_t)v19);
        if ((*(_DWORD *)v5 ^ (*(int *)v5 >> 31)) == 2)
        {
          if (!(*(unsigned int (**)(void))(**(void **)(v5 + 8) + 24))(*(void *)(v5 + 8))) {
            goto LABEL_6;
          }
        }
        else
        {
          uint64_t v6 = *(void *)(v5 + 16);
          if (v6 && atomic_load_explicit((atomic_uint *volatile)(v6 + 8), memory_order_acquire))
          {
LABEL_6:
            char v7 = 0;
            if (LODWORD(v19[0]) == SLODWORD(v19[0]) >> 31) {
              goto LABEL_13;
            }
            goto LABEL_7;
          }
        }
        if (*(unsigned char *)(a1 + 24))
        {
          *(unsigned char *)(a1 + 24) = 0;
          boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::mutex>((_DWORD *)a1, v14);
        }
        char v7 = 1;
        if (LODWORD(v19[0]) == SLODWORD(v19[0]) >> 31)
        {
LABEL_13:
          int v8 = (atomic_uint *)v19[2];
          if (v19[2])
          {
            if (atomic_fetch_add((atomic_uint *volatile)(v19[2] + 8), 0xFFFFFFFF) == 1)
            {
              (*(void (**)(atomic_uint *))(*(void *)v8 + 16))(v8);
              if (atomic_fetch_add(v8 + 3, 0xFFFFFFFF) == 1) {
                (*(void (**)(atomic_uint *))(*(void *)v8 + 24))(v8);
              }
            }
          }
          goto LABEL_17;
        }
LABEL_7:
        if (v19[1]) {
          (*(void (**)(void))(*(void *)v19[1] + 8))(v19[1]);
        }
LABEL_17:
        if ((v7 & 1) == 0)
        {
          v5 += 24;
          if (v5 != *(void *)(*(void *)(a1 + 32) + 8)) {
            continue;
          }
        }
        break;
      }
    }
  }
  int v9 = *(unsigned __int8 *)(a1 + 24);
  pthread_mutex_unlock(v18);
  uint64_t v10 = v16;
  if (v16)
  {
    if (v17 - 1 >= 0)
    {
      uint64_t v11 = &v16[16 * v17];
      do
      {
        int v12 = (atomic_uint *)*((void *)v11 - 1);
        if (v12)
        {
          if (atomic_fetch_add(v12 + 2, 0xFFFFFFFF) == 1)
          {
            (*(void (**)(atomic_uint *))(*(void *)v12 + 16))(v12);
            if (atomic_fetch_add(v12 + 3, 0xFFFFFFFF) == 1) {
              (*(void (**)(atomic_uint *))(*(void *)v12 + 24))(v12);
            }
          }
        }
        v11 -= 16;
      }
      while (v11 > v10);
    }
    if (v15 >= 0xB) {
      operator delete(v16);
    }
  }
  return v9 != 0;
}

void sub_26369350C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>::lock(uint64_t a1)
{
  return pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 48));
}

uint64_t boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>::unlock(uint64_t a1)
{
  return pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 48));
}

uint64_t boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>::release_slot@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(result + 40);
  long long v2 = (void *)(result + 32);
  *a2 = *(void *)(result + 32);
  a2[1] = v3;
  if (v3)
  {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 + 8), 1u, memory_order_relaxed);
    uint64_t v4 = *(atomic_uint **)(result + 40);
    void *v2 = 0;
    *(void *)(result + 40) = 0;
    if (v4 && atomic_fetch_add(v4 + 2, 0xFFFFFFFF) == 1)
    {
      xpc_object_t result = (*(uint64_t (**)(atomic_uint *))(*(void *)v4 + 16))(v4);
      if (atomic_fetch_add(v4 + 3, 0xFFFFFFFF) == 1) {
        return (*(uint64_t (**)(atomic_uint *))(*(void *)v4 + 24))(v4);
      }
    }
  }
  else
  {
    void *v2 = 0;
    *(void *)(result + 40) = 0;
  }
  return result;
}

void *std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::vector(void *a1, uint64_t *a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  int64_t v5 = v4 - *a2;
  if (v4 != *a2)
  {
    unint64_t v6 = 0xAAAAAAAAAAAAAAABLL * (v5 >> 3);
    if (v6 >= 0xAAAAAAAAAAAAAABLL) {
      std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::__throw_length_error[abi:ne180100]();
    }
    char v7 = (char *)operator new(v5);
    *a1 = v7;
    a1[1] = v7;
    a1[2] = &v7[24 * v6];
    std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::__construct_at_end<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>*,boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>*>((uint64_t)a1, v3, v4);
  }
  return a1;
}

void sub_263693798(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *v1;
  if (*v1)
  {
    uint64_t v4 = (uint64_t)v1[1];
    int64_t v5 = *v1;
    if ((void *)v4 != v3)
    {
      do
      {
        v4 -= 24;
        boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>::destroy_content(v4);
      }
      while ((void *)v4 != v3);
      int64_t v5 = *v1;
    }
    v1[1] = v3;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::__construct_at_end<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>*,boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>*>(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = result;
  uint64_t v4 = *(void *)(result + 8);
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      uint64_t v8 = v4 + v7;
      uint64_t v9 = a2 + v7;
      if ((*(_DWORD *)(a2 + v7) ^ (*(int *)(a2 + v7) >> 31)) == 2)
      {
        xpc_object_t result = (*(uint64_t (**)(void))(**(void **)(v9 + 8) + 32))(*(void *)(v9 + 8));
        *(void *)(v8 + 8) = result;
      }
      else
      {
        *(void *)(v8 + 8) = *(void *)(v9 + 8);
        uint64_t v10 = *(void *)(a2 + v7 + 16);
        *(void *)(v4 + v7 + 16) = v10;
        if (v10) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v10 + 12), 1u, memory_order_relaxed);
        }
      }
      *(_DWORD *)uint64_t v8 = *(_DWORD *)(a2 + v7) ^ (*(int *)(a2 + v7) >> 31);
      v7 += 24;
    }
    while (a2 + v7 != a3);
    v4 += v7;
  }
  *(void *)(v3 + 8) = v4;
  return result;
}

void sub_2636938CC(_Unwind_Exception *exception_object)
{
  for (; v3; v3 -= 24)
    boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>::destroy_content(v2 - 24 + v3);
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(exception_object);
}

void std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::__throw_length_error[abi:ne180100]()
{
}

atomic_uint *boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>::destroy_content(uint64_t a1)
{
  int v1 = *(_DWORD *)a1 ^ (*(int *)a1 >> 31);
  if (v1 == 2)
  {
    xpc_object_t result = *(atomic_uint **)(a1 + 8);
    if (result)
    {
      uint64_t v3 = *(uint64_t (**)(void))(*(void *)result + 8);
      return (atomic_uint *)v3();
    }
  }
  else if (v1 == 1)
  {
    xpc_object_t result = *(atomic_uint **)(a1 + 16);
    if (result && atomic_fetch_add(result + 3, 0xFFFFFFFF) == 1) {
      return (atomic_uint *)(*(uint64_t (**)(atomic_uint *))(*(void *)result + 24))(result);
    }
  }
  else
  {
    xpc_object_t result = *(atomic_uint **)(a1 + 16);
    if (result && atomic_fetch_add(result + 3, 0xFFFFFFFF) == 1) {
      return (atomic_uint *)(*(uint64_t (**)(atomic_uint *))(*(void *)result + 24))(result);
    }
  }
  return result;
}

void boost::detail::sp_counted_impl_p<boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>>::dispose(uint64_t a1)
{
  int v1 = *(void ***)(a1 + 16);
  if (v1)
  {
    unint64_t v2 = (unint64_t)v1[3];
    if (v2)
    {
      if ((v2 & 1) == 0)
      {
        uint64_t v3 = *(void (**)(void **, void **, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
        if (v3) {
          v3(v1 + 4, v1 + 4, 2);
        }
      }
      v1[3] = 0;
    }
    uint64_t v4 = *v1;
    if (*v1)
    {
      uint64_t v5 = (uint64_t)v1[1];
      unint64_t v6 = *v1;
      if ((void *)v5 != v4)
      {
        do
        {
          v5 -= 24;
          boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>::destroy_content(v5);
        }
        while ((void *)v5 != v4);
        unint64_t v6 = *v1;
      }
      v1[1] = v4;
      operator delete(v6);
    }
    operator delete(v1);
  }
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>>::get_untyped_deleter()
{
  return 0;
}

void *boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>::~connection_body(void *a1)
{
  *a1 = &unk_270EA5468;
  unint64_t v2 = (atomic_uint *)a1[7];
  if (v2)
  {
    if (atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
      if (atomic_fetch_add(v2 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v2 + 24))(v2);
      }
    }
  }
  uint64_t v3 = (atomic_uint *)a1[5];
  if (v3)
  {
    if (atomic_fetch_add(v3 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v3 + 16))(v3);
      if (atomic_fetch_add(v3 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v3 + 24))(v3);
      }
    }
  }
  *a1 = &unk_270EA54D0;
  uint64_t v4 = (atomic_uint *)a1[2];
  if (v4 && atomic_fetch_add(v4 + 3, 0xFFFFFFFF) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v4 + 24))(v4);
  }
  return a1;
}

uint64_t boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>::~variant(uint64_t a1)
{
  if (*(_DWORD *)a1 == *(int *)a1 >> 31)
  {
    unint64_t v2 = *(atomic_uint **)(a1 + 16);
    if (v2 && atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
      if (atomic_fetch_add(v2 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v2 + 24))(v2);
      }
    }
    return a1;
  }
  uint64_t v4 = *(void *)(a1 + 8);
  if (!v4) {
    return a1;
  }
  (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  return a1;
}

uint64_t boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>::apply_visitor<boost::signals2::detail::lock_weak_ptr_visitor const>@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  int v3 = *(_DWORD *)result ^ (*(int *)result >> 31);
  if (v3 == 2)
  {
    (*(void (**)(uint64_t *__return_ptr))(**(void **)(result + 8) + 16))(&v8);
    *(void *)(a2 + 8) = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 16))(v8);
    *(_DWORD *)a2 = 1;
    xpc_object_t result = v8;
    if (v8) {
      return (*(uint64_t (**)(uint64_t))(*(void *)v8 + 8))(v8);
    }
  }
  else if (v3 == 1)
  {
    uint64_t v4 = *(void *)(result + 16);
    if (v4)
    {
      uint64_t v5 = *(unsigned int *)(v4 + 8);
      while (v5)
      {
        uint64_t v6 = v5;
        atomic_compare_exchange_strong_explicit((atomic_uint *volatile)(v4 + 8), (unsigned int *)&v6, v5 + 1, memory_order_relaxed, memory_order_relaxed);
        BOOL v7 = v6 == v5;
        uint64_t v5 = v6;
        if (v7)
        {
          *(void *)(a2 + 8) = *(void *)(result + 8);
          *(void *)(a2 + 16) = v4;
          *(_DWORD *)a2 = 0;
          return result;
        }
      }
      uint64_t v4 = 0;
    }
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = v4;
    *(_DWORD *)a2 = 0;
  }
  else
  {
    *(_DWORD *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
  }
  return result;
}

void sub_263693EC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>::dispose(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 16);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>::get_untyped_deleter()
{
  return 0;
}

uint64_t *boost::function<void ()(BOOL)>::~function(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    if ((v2 & 1) == 0)
    {
      int v3 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
      if (v3) {
        v3(a1 + 1, a1 + 1, 2);
      }
    }
    *a1 = 0;
  }
  return a1;
}

void boost::detail::function::functor_manager<ctu::DispatchSlot<dispatch::block<void({block_pointer})(BOOL)>>>::manage(uint64_t a1, _WORD *a2, unsigned int a3)
{
  if (a3 == 4) {
    goto LABEL_2;
  }
  if (a3 > 1)
  {
    if (a3 == 3)
    {
      uint64_t v9 = (const char *)(*(void *)(*(void *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL);
      if (v9 == (const char *)(0x80000002637A522FLL & 0x7FFFFFFFFFFFFFFFLL)
        || !strcmp(v9, (const char *)(0x80000002637A522FLL & 0x7FFFFFFFFFFFFFFFLL)))
      {
        *(void *)a2 = a1;
      }
      else
      {
        *(void *)a2 = 0;
      }
    }
    else
    {
      if (a3 != 2)
      {
LABEL_2:
        a2[4] = 0;
        return;
      }
      dispatch_release(*(dispatch_object_t *)a2);
      uint64_t v8 = (const void *)*((void *)a2 + 1);
      if (v8) {
LABEL_9:
      }
        _Block_release(v8);
    }
  }
  else
  {
    uint64_t v6 = *(NSObject **)a1;
    BOOL v7 = *(void **)(a1 + 8);
    *(void *)a2 = *(void *)a1;
    if (v7)
    {
      BOOL v7 = _Block_copy(v7);
      uint64_t v6 = *(NSObject **)a2;
    }
    *((void *)a2 + 1) = v7;
    dispatch_retain(v6);
    if (a3 == 1)
    {
      dispatch_release(*(dispatch_object_t *)a1);
      uint64_t v8 = *(const void **)(a1 + 8);
      if (v8) {
        goto LABEL_9;
      }
    }
  }
}

void boost::detail::function::void_function_obj_invoker1<ctu::DispatchSlot<dispatch::block<void({block_pointer})(BOOL)>>,void,BOOL>::invoke(uint64_t a1, char a2)
{
  uint64_t v4 = *(NSObject **)a1;
  int v3 = *(const void **)(a1 + 8);
  if (!v3)
  {
    uint64_t v6 = 0;
    goto LABEL_10;
  }
  uint64_t v5 = _Block_copy(v3);
  uint64_t v6 = v5;
  if (!v5)
  {
LABEL_10:
    char v18 = 1;
LABEL_11:
    uint64_t v17 = 0;
    v23[0] = 0;
    goto LABEL_21;
  }
  BOOL v7 = _Block_copy(v5);
  uint64_t v8 = v7;
  if (!v7)
  {
    char v18 = 0;
    goto LABEL_11;
  }
  uint64_t v9 = _Block_copy(v7);
  uint64_t v10 = v9;
  if (v9)
  {
    uint64_t v11 = _Block_copy(v9);
    int v12 = v11;
    if (v11)
    {
      BOOL v13 = _Block_copy(v11);
      int v14 = v13;
      if (v13)
      {
        unint64_t v15 = _Block_copy(v13);
        int v16 = v15;
        if (v15)
        {
          uint64_t v17 = _Block_copy(v15);
          v23[0] = v17;
          _Block_release(v16);
        }
        else
        {
          uint64_t v17 = 0;
          v23[0] = 0;
        }
        _Block_release(v14);
      }
      else
      {
        uint64_t v17 = 0;
        v23[0] = 0;
      }
      _Block_release(v12);
    }
    else
    {
      uint64_t v17 = 0;
      v23[0] = 0;
    }
    _Block_release(v10);
  }
  else
  {
    uint64_t v17 = 0;
    v23[0] = 0;
  }
  _Block_release(v8);
  char v18 = 0;
LABEL_21:
  int v19 = operator new(1uLL);
  unsigned char *v19 = a2;
  int v20 = operator new(0x20uLL);
  void *v20 = boost::function1<void,BOOL>::assign_to<dispatch::block<void({block_pointer})(BOOL)>>(dispatch::block<void({block_pointer})(BOOL)>)::stored_vtable;
  if (v17) {
    uint64_t v21 = _Block_copy(v17);
  }
  else {
    uint64_t v21 = 0;
  }
  v20[1] = v21;
  block[0] = MEMORY[0x263EF8330];
  block[1] = 0x40000000;
  block[2] = ___Z13execute_blockP16dispatch_queue_sRKN5boost8functionIFvbEEEb_block_invoke;
  block[3] = &__block_descriptor_tmp_37;
  block[4] = v20;
  block[5] = v19;
  dispatch_async(v4, block);
  if (boost::function1<void,BOOL>::assign_to<dispatch::block<void({block_pointer})(BOOL)>>(dispatch::block<void({block_pointer})(BOOL)>)::stored_vtable)
  {
    if ((boost::function1<void,BOOL>::assign_to<dispatch::block<void({block_pointer})(BOOL)>>(dispatch::block<void({block_pointer})(BOOL)>)::stored_vtable & 1) == 0)
    {
      uint64_t v22 = *(void (**)(void *, void *, uint64_t))((unint64_t)boost::function1<void,BOOL>::assign_to<dispatch::block<void({block_pointer})(BOOL)>>(dispatch::block<void({block_pointer})(BOOL)>)::stored_vtable & 0xFFFFFFFFFFFFFFFELL);
      if (v22) {
        v22(v23, v23, 2);
      }
    }
  }
  if ((v18 & 1) == 0) {
    _Block_release(v6);
  }
}

void sub_263694300(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (v10) {
    _Block_release(v10);
  }
  if ((v11 & 1) == 0) {
    _Block_release(v9);
  }
  _Unwind_Resume(exception_object);
}

void ___Z13execute_blockP16dispatch_queue_sRKN5boost8functionIFvbEEEb_block_invoke(uint64_t a1)
{
  int v1 = *(void **)(a1 + 32);
  if (!*v1)
  {
    std::runtime_error::runtime_error(&v7, "call to empty boost::function");
    v7.__vftable = (std::runtime_error_vtbl *)&unk_270EA5920;
    boost::throw_exception<boost::bad_function_call>(&v7);
  }
  (*(void (**)(void *, void))((*v1 & 0xFFFFFFFFFFFFFFFELL) + 8))(v1 + 1, **(unsigned __int8 **)(a1 + 40));
  int v3 = *(uint64_t **)(a1 + 32);
  if (v3)
  {
    uint64_t v4 = *v3;
    if (*v3)
    {
      if ((v4 & 1) == 0)
      {
        uint64_t v5 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v4 & 0xFFFFFFFFFFFFFFFELL);
        if (v5) {
          v5(v3 + 1, v3 + 1, 2);
        }
      }
      *int v3 = 0;
    }
    operator delete(v3);
  }
  uint64_t v6 = *(void **)(a1 + 40);
  if (v6)
  {
    operator delete(v6);
  }
}

void sub_263694420(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::runtime_error a9)
{
}

void boost::throw_exception<boost::bad_function_call>(const std::runtime_error *a1)
{
  exception = __cxa_allocate_exception(0x40uLL);
  boost::wrapexcept<boost::bad_function_call>::wrapexcept((uint64_t)exception, a1);
}

void sub_26369447C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t boost::wrapexcept<boost::bad_function_call>::wrapexcept(uint64_t a1, const std::runtime_error *a2)
{
  *(void *)a1 = &unk_270EA58F0;
  std::runtime_error::runtime_error((std::runtime_error *)(a1 + 8), a2);
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = -1;
  *(void *)a1 = &unk_270EA5878;
  *(void *)(a1 + 8) = &unk_270EA58A8;
  *(void *)(a1 + 24) = &unk_270EA58D0;
  return a1;
}

uint64_t boost::wrapexcept<boost::bad_function_call>::~wrapexcept(uint64_t a1)
{
  *(void *)(a1 + 24) = &unk_270EA5948;
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2 && (*(unsigned int (**)(uint64_t))(*(void *)v2 + 32))(v2)) {
    *(void *)(a1 + 32) = 0;
  }
  std::runtime_error::~runtime_error((std::runtime_error *)(a1 + 8));
  return a1;
}

char *boost::wrapexcept<boost::bad_function_call>::clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x40uLL);
  *(void *)uint64_t v2 = &unk_270EA58F0;
  std::runtime_error::runtime_error((std::runtime_error *)(v2 + 8), (const std::runtime_error *)(a1 + 8));
  *((void *)v2 + 1) = &unk_270EA5920;
  uint64_t v3 = *(void *)(a1 + 32);
  *((void *)v2 + 3) = &unk_270EA5948;
  *((void *)v2 + 4) = v3;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 24))(v3);
  }
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  *((_DWORD *)v2 + 14) = *(_DWORD *)(a1 + 56);
  *(void *)uint64_t v2 = &unk_270EA5878;
  *((void *)v2 + 1) = &unk_270EA58A8;
  *((void *)v2 + 3) = &unk_270EA58D0;
  boost::exception_detail::copy_boost_exception((uint64_t)(v2 + 24), a1 + 24);
  return v2;
}

void sub_263694700(_Unwind_Exception *a1)
{
  std::runtime_error::~runtime_error(v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_26369471C(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 24))(v1);
  _Unwind_Resume(a1);
}

void boost::wrapexcept<boost::bad_function_call>::rethrow(uint64_t a1)
{
  exception = __cxa_allocate_exception(0x40uLL);
  boost::wrapexcept<boost::bad_function_call>::wrapexcept((uint64_t)exception, a1);
}

void sub_263694798(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void boost::wrapexcept<boost::bad_function_call>::~wrapexcept(uint64_t a1)
{
  *(void *)(a1 + 24) = &unk_270EA5948;
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2 && (*(unsigned int (**)(uint64_t))(*(void *)v2 + 32))(v2)) {
    *(void *)(a1 + 32) = 0;
  }
  std::runtime_error::~runtime_error((std::runtime_error *)(a1 + 8));

  operator delete((void *)a1);
}

void non-virtual thunk to'boost::wrapexcept<boost::bad_function_call>::~wrapexcept(std::runtime_error *this)
{
  this[1].__vftable = (std::runtime_error_vtbl *)&unk_270EA5948;
  imp = this[1].__imp_.__imp_;
  if (imp && (*(unsigned int (**)(const char *))(*(void *)imp + 32))(imp)) {
    this[1].__imp_.__imp_ = 0;
  }

  std::runtime_error::~runtime_error(this);
}

{
  const char *imp;
  uint64_t vars8;

  this[1].__vftable = (std::runtime_error_vtbl *)&unk_270EA5948;
  imp = this[1].__imp_.__imp_;
  if (imp && (*(unsigned int (**)(const char *))(*(void *)imp + 32))(imp)) {
    this[1].__imp_.__imp_ = 0;
  }
  std::runtime_error::~runtime_error(this);

  operator delete(&this[-1].__imp_);
}

void non-virtual thunk to'boost::wrapexcept<boost::bad_function_call>::~wrapexcept(std::runtime_error *a1)
{
  a1->__vftable = (std::runtime_error_vtbl *)&unk_270EA5948;
  imp = a1->__imp_.__imp_;
  if (imp && (*(unsigned int (**)(const char *))(*(void *)imp + 32))(imp)) {
    a1->__imp_.__imp_ = 0;
  }

  std::runtime_error::~runtime_error(a1 - 1);
}

{
  const char *imp;
  uint64_t vars8;

  a1->__vftable = (std::runtime_error_vtbl *)&unk_270EA5948;
  imp = a1->__imp_.__imp_;
  if (imp && (*(unsigned int (**)(const char *))(*(void *)imp + 32))(imp)) {
    a1->__imp_.__imp_ = 0;
  }
  std::runtime_error::~runtime_error(a1 - 1);

  operator delete(&a1[-2].__imp_);
}

void boost::bad_function_call::~bad_function_call(std::runtime_error *this)
{
  std::runtime_error::~runtime_error(this);

  operator delete(v1);
}

uint64_t *boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2 && (*(unsigned int (**)(uint64_t))(*(void *)v2 + 32))(v2)) {
    *a1 = 0;
  }
  return a1;
}

uint64_t boost::wrapexcept<boost::bad_function_call>::wrapexcept(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270EA58F0;
  std::runtime_error::runtime_error((std::runtime_error *)(a1 + 8), (const std::runtime_error *)(a2 + 8));
  *(void *)(a1 + 8) = &unk_270EA5920;
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = &unk_270EA5948;
  *(void *)(a1 + 32) = v4;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
  }
  long long v5 = *(_OWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v5;
  *(void *)a1 = &unk_270EA5878;
  *(void *)(a1 + 8) = &unk_270EA58A8;
  *(void *)(a1 + 24) = &unk_270EA58D0;
  return a1;
}

void sub_263694C34(_Unwind_Exception *a1)
{
  std::runtime_error::~runtime_error(v1);
  _Unwind_Resume(a1);
}

uint64_t boost::exception_detail::copy_boost_exception(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = 0;
  uint64_t v4 = *(void *)(a2 + 8);
  if (!v4)
  {
    uint64_t v5 = 0;
    *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    uint64_t result = *(void *)(a1 + 8);
    if (!result) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
  (*(void (**)(uint64_t *__return_ptr))(*(void *)v4 + 40))(&v7);
  uint64_t v5 = v7;
  uint64_t v8 = v7;
  if (v7)
  {
    (*(void (**)(uint64_t))(*(void *)v7 + 24))(v7);
    if (v7) {
      (*(void (**)(uint64_t))(*(void *)v7 + 32))(v7);
    }
  }
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  uint64_t result = *(void *)(a1 + 8);
  if (result) {
LABEL_8:
  }
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 32))(result);
LABEL_9:
  *(void *)(a1 + 8) = v5;
  if (v5)
  {
    (*(void (**)(uint64_t))(*(void *)v5 + 24))(v5);
    return (*(uint64_t (**)(uint64_t))(*(void *)v5 + 32))(v5);
  }
  return result;
}

void sub_263694DC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

void sub_263694DE8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_263694DFC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)va);
  _Unwind_Resume(a1);
}

void boost::detail::function::functor_manager<dispatch::block<void({block_pointer})(BOOL)>>::manage(void **a1, _WORD *a2, unsigned int a3)
{
  if (a3 == 4) {
    goto LABEL_2;
  }
  if (a3 > 1)
  {
    if (a3 == 3)
    {
      uint64_t v8 = (const char *)(*(void *)(*(void *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL);
      if (v8 == (const char *)(0x80000002637A526DLL & 0x7FFFFFFFFFFFFFFFLL)
        || !strcmp(v8, (const char *)(0x80000002637A526DLL & 0x7FFFFFFFFFFFFFFFLL)))
      {
        *(void *)a2 = a1;
      }
      else
      {
        *(void *)a2 = 0;
      }
    }
    else
    {
      if (a3 != 2)
      {
LABEL_2:
        a2[4] = 0;
        return;
      }
      uint64_t v7 = *(void **)a2;
      if (*(void *)a2) {
LABEL_9:
      }
        _Block_release(v7);
    }
  }
  else
  {
    uint64_t v6 = *a1;
    if (*a1) {
      uint64_t v6 = _Block_copy(v6);
    }
    *(void *)a2 = v6;
    if (a3 == 1)
    {
      uint64_t v7 = *a1;
      if (*a1) {
        goto LABEL_9;
      }
    }
  }
}

uint64_t boost::detail::function::void_function_obj_invoker1<dispatch::block<void({block_pointer})(BOOL)>,void,BOOL>::invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 16))();
}

uint64_t boost::function1<void,BOOL>::move_assign(uint64_t result, uint64_t *a2)
{
  if (a2 != (uint64_t *)result)
  {
    uint64_t v2 = a2;
    uint64_t v3 = (uint64_t *)result;
    uint64_t v4 = *a2;
    if (*a2)
    {
      *(void *)uint64_t result = v4;
      if (v4)
      {
        long long v7 = *(_OWORD *)(a2 + 1);
        *(void *)(result + 24) = a2[3];
        *(_OWORD *)(result + 8) = v7;
      }
      else
      {
        uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v4 & 0xFFFFFFFFFFFFFFFELL))(a2 + 1, result + 8, 1);
      }
    }
    else
    {
      uint64_t v5 = *(void *)result;
      if (!*(void *)result) {
        return result;
      }
      if ((v5 & 1) == 0)
      {
        uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 & 0xFFFFFFFFFFFFFFFELL);
        if (v6) {
          uint64_t result = v6(result + 8, result + 8, 2);
        }
      }
      uint64_t v2 = v3;
    }
    uint64_t *v2 = 0;
  }
  return result;
}

void sub_263694FB8(void *a1)
{
  __cxa_begin_catch(a1);
  *uint64_t v1 = 0;
  __cxa_rethrow();
}

void sub_263694FC8(_Unwind_Exception *a1)
{
}

uint64_t *boost::function1<void,BOOL>::~function1(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    if ((v2 & 1) == 0)
    {
      uint64_t v3 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
      if (v3) {
        v3(a1 + 1, a1 + 1, 2);
      }
    }
    *a1 = 0;
  }
  return a1;
}

uint64_t std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::__push_back_slow_path<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>(uint64_t *a1, uint64_t a2)
{
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::__throw_length_error[abi:ne180100]();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 3) > v4) {
    unint64_t v4 = 0x5555555555555556 * ((a1[2] - *a1) >> 3);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 3) >= 0x555555555555555) {
    unint64_t v6 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v6 = v4;
  }
  uint64_t v21 = a1 + 2;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    long long v7 = (char *)operator new(24 * v6);
  }
  else
  {
    long long v7 = 0;
  }
  uint64_t v8 = (int *)&v7[24 * v3];
  std::string __p = v7;
  char v18 = v8;
  int v19 = v8;
  int v20 = &v7[24 * v6];
  uint64_t v9 = v8 + 2;
  uint64_t v10 = a2 + 8;
  int v11 = *(_DWORD *)a2 ^ (*(int *)a2 >> 31);
  if (v11 == 2)
  {
    *uint64_t v9 = (*(uint64_t (**)(void))(**(void **)v10 + 32))();
    int v11 = *(_DWORD *)a2 ^ (*(int *)a2 >> 31);
    int v12 = v19;
  }
  else
  {
    if (v11 != 1) {
      int v11 = 0;
    }
    *(_OWORD *)uint64_t v9 = *(_OWORD *)v10;
    *(void *)uint64_t v10 = 0;
    *(void *)(a2 + 16) = 0;
    int v12 = v8;
  }
  int *v8 = v11;
  int v19 = v12 + 6;
  std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::__swap_out_circular_buffer(a1, &__p);
  uint64_t v13 = a1[1];
  unint64_t v15 = v18;
  for (uint64_t i = v19; v19 != v15; uint64_t i = v19)
  {
    int v19 = i - 6;
    boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>::destroy_content((uint64_t)(i - 6));
  }
  if (__p) {
    operator delete(__p);
  }
  return v13;
}

void sub_2636951C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::__swap_out_circular_buffer(uint64_t *result, void *a2)
{
  unint64_t v3 = result;
  uint64_t v5 = *result;
  uint64_t v4 = result[1];
  uint64_t v6 = a2[1];
  if (v4 != *result)
  {
    uint64_t v7 = 0;
    do
    {
      uint64_t v8 = v6 + v7;
      uint64_t v9 = v4 + v7;
      if ((*(_DWORD *)(v4 + v7 - 24) ^ (*(int *)(v4 + v7 - 24) >> 31)) == 2)
      {
        uint64_t result = (uint64_t *)(*(uint64_t (**)(void))(**(void **)(v9 - 16) + 32))(*(void *)(v9 - 16));
        *(void *)(v8 - 16) = result;
      }
      else
      {
        *(void *)(v8 - 16) = *(void *)(v9 - 16);
        uint64_t v10 = *(void *)(v4 + v7 - 8);
        *(void *)(v6 + v7 - 8) = v10;
        if (v10) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v10 + 12), 1u, memory_order_relaxed);
        }
      }
      *(_DWORD *)(v8 - 24) = *(_DWORD *)(v9 - 24) ^ (*(int *)(v9 - 24) >> 31);
      v7 -= 24;
    }
    while (v4 + v7 != v5);
    v6 += v7;
  }
  a2[1] = v6;
  uint64_t v11 = *v3;
  *unint64_t v3 = v6;
  a2[1] = v11;
  uint64_t v12 = v3[1];
  v3[1] = a2[2];
  a2[2] = v12;
  uint64_t v13 = v3[2];
  v3[2] = a2[3];
  a2[3] = v13;
  *a2 = a2[1];
  return result;
}

void sub_263695304(_Unwind_Exception *exception_object)
{
  for (; v2; v2 += 24)
    boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>::destroy_content(v1 + v2);
  _Unwind_Resume(exception_object);
}

uint64_t std::__split_buffer<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 24;
    boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>::destroy_content(i - 24);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void *boost::signals2::detail::foreign_weak_ptr_impl<std::weak_ptr<data::TransportService::State>>::~foreign_weak_ptr_impl(void *a1)
{
  *a1 = &unk_270EA5610;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void boost::signals2::detail::foreign_weak_ptr_impl<std::weak_ptr<data::TransportService::State>>::~foreign_weak_ptr_impl(void *__p)
{
  *std::string __p = &unk_270EA5610;
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  operator delete(__p);
}

void boost::signals2::detail::foreign_weak_ptr_impl<std::weak_ptr<data::TransportService::State>>::lock(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (v4)
  {
    uint64_t v5 = std::__shared_weak_count::lock(v4);
    if (v5)
    {
      uint64_t v6 = *(void *)(a1 + 8);
      goto LABEL_6;
    }
  }
  else
  {
    uint64_t v5 = 0;
  }
  uint64_t v6 = 0;
LABEL_6:
  uint64_t v7 = operator new(0x18uLL);
  void *v7 = &unk_270EA5670;
  v7[1] = v6;
  v7[2] = v5;
  if (v5)
  {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    *a2 = v7;
    if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  else
  {
    *a2 = v7;
  }
}

void sub_263695534(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

BOOL boost::signals2::detail::foreign_weak_ptr_impl<std::weak_ptr<data::TransportService::State>>::expired(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  return !v1 || *(void *)(v1 + 8) == -1;
}

void *boost::signals2::detail::foreign_weak_ptr_impl<std::weak_ptr<data::TransportService::State>>::clone(uint64_t a1)
{
  uint64_t result = operator new(0x18uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *uint64_t result = &unk_270EA5610;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void *boost::signals2::detail::foreign_shared_ptr_impl<std::shared_ptr<data::TransportService::State>>::~foreign_shared_ptr_impl(void *result)
{
  uint64_t v1 = result;
  *uint64_t result = &unk_270EA5670;
  uint64_t v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void boost::signals2::detail::foreign_shared_ptr_impl<std::shared_ptr<data::TransportService::State>>::~foreign_shared_ptr_impl(void *__p)
{
  uint64_t v1 = __p;
  *std::string __p = &unk_270EA5670;
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    std::string __p = v1;
  }
  else if (((vars8 ^ (2 * vars8)) & 0x4000000000000000) != 0)
  {
    __break(0xC471u);
  }
  operator delete(__p);
}

void *boost::signals2::detail::foreign_shared_ptr_impl<std::shared_ptr<data::TransportService::State>>::clone(uint64_t a1)
{
  uint64_t result = operator new(0x18uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *uint64_t result = &unk_270EA5670;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void data::TransportService::State::unblockThrottling_sync(data::TransportService::State *this)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  uint64_t v2 = *((void *)this + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v11) = 0;
    _os_log_impl(&dword_26368A000, v2, OS_LOG_TYPE_DEFAULT, "#I Disabling throttling", (uint8_t *)&v11, 2u);
  }
  if (*((void *)this + 18))
  {
    uint64_t v3 = *((void *)this + 5);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v11) = 0;
      _os_log_impl(&dword_26368A000, v3, OS_LOG_TYPE_DEFAULT, "#I Stop Listening for UI events", (uint8_t *)&v11, 2u);
    }
    uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 19);
    *((void *)this + 18) = 0;
    *((void *)this + 19) = 0;
    if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  uint64_t v5 = *((void *)this + 20);
  if (v5)
  {
    dispatch_source_cancel(v5);
    uint64_t v6 = *((void *)this + 20);
    *((void *)this + 20) = 0;
    if (v6) {
      dispatch_release(v6);
    }
    uint64_t v7 = *((void *)this + 5);
    uint64_t v5 = os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
    if (v5)
    {
      LOWORD(v11) = 0;
      _os_log_impl(&dword_26368A000, v7, OS_LOG_TYPE_DEFAULT, "#I Limit timer stopped", (uint8_t *)&v11, 2u);
    }
  }
  if (*((_DWORD *)this + 26) == 1)
  {
    if (*((_DWORD *)this + 28) == 1)
    {
      uint64_t v8 = *((void *)this + 5);
      uint64_t v5 = os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
      if (v5)
      {
        int v11 = 136315394;
        uint64_t v12 = "Throttled";
        __int16 v13 = 2080;
        int v14 = "Idle";
        _os_log_impl(&dword_26368A000, v8, OS_LOG_TYPE_DEFAULT, "#I State changing from %s to %s", (uint8_t *)&v11, 0x16u);
      }
      *((_DWORD *)this + 28) = 0;
    }
    Instance = (ApplePDPHelperInterface *)ApplePDPHelperInterface::getInstance((ApplePDPHelperInterface *)v5);
    if ((ApplePDPHelperInterface::activateLowPowerPDPThrottle(Instance) & 1) == 0)
    {
      uint64_t v10 = *((void *)this + 5);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        LOWORD(v11) = 0;
        _os_log_error_impl(&dword_26368A000, v10, OS_LOG_TYPE_ERROR, "Failed to disable flow for throttling", (uint8_t *)&v11, 2u);
      }
    }
  }
}

void ___ZN4data16TransportService5State13enterLowPowerEv_block_invoke(uint64_t a1)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(NSObject **)(v1 + 160);
  if (v2)
  {
    dispatch_source_cancel(v2);
    uint64_t v3 = *(NSObject **)(v1 + 160);
    *(void *)(v1 + 160) = 0;
    if (v3) {
      dispatch_release(v3);
    }
    uint64_t v4 = *(NSObject **)(v1 + 40);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v9) = 0;
      _os_log_impl(&dword_26368A000, v4, OS_LOG_TYPE_DEFAULT, "#I Limit timer stopped", (uint8_t *)&v9, 2u);
    }
  }
  unsigned int v5 = *(_DWORD *)(v1 + 112);
  if (v5 >= 2)
  {
    if (v5 == 2) {
      return;
    }
  }
  else
  {
    uint64_t v6 = *(NSObject **)(v1 + 40);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = "???";
      if (!v5) {
        uint64_t v7 = "Idle";
      }
      if (v5 == 1) {
        uint64_t v7 = "Throttled";
      }
      int v9 = 136315394;
      uint64_t v10 = v7;
      __int16 v11 = 2080;
      uint64_t v12 = "LowPower";
      _os_log_impl(&dword_26368A000, v6, OS_LOG_TYPE_DEFAULT, "#I State changing from %s to %s", (uint8_t *)&v9, 0x16u);
    }
    *(_DWORD *)(v1 + 112) = 2;
  }
  uint64_t v8 = *(NSObject **)(v1 + 40);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v9) = 0;
    _os_log_impl(&dword_26368A000, v8, OS_LOG_TYPE_DEFAULT, "#I Entered low power", (uint8_t *)&v9, 2u);
  }
}

void *___ZNK3ctu20SharedSynchronizableIN4data16TransportService5StateEE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS9__block_invoke(uint64_t a1)
{
  return (*(void *(**)(void *__return_ptr))(**(void **)(a1 + 40) + 16))(*(void **)(a1 + 40));
}

void ___ZN4data16TransportService5State12exitLowPowerEv_block_invoke(uint64_t a1)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  uint64_t v1 = *(void *)(a1 + 32);
  int v2 = *(_DWORD *)(v1 + 112);
  if ((v2 - 1) <= 1)
  {
    uint64_t v3 = *(NSObject **)(v1 + 40);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v4 = "???";
      if (v2 == 1) {
        uint64_t v4 = "Throttled";
      }
      if (v2 == 2) {
        uint64_t v4 = "LowPower";
      }
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = v4;
      *(_WORD *)&buf[12] = 2080;
      *(void *)&buf[14] = "Throttled";
      _os_log_impl(&dword_26368A000, v3, OS_LOG_TYPE_DEFAULT, "#I State changing from %s to %s", buf, 0x16u);
    }
    *(_DWORD *)(v1 + 112) = 1;
    data::TransportService::State::startLimitTimer_sync((data::TransportService::State *)v1);
  }
  unsigned int v5 = *(NSObject **)(v1 + 40);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_26368A000, v5, OS_LOG_TYPE_DEFAULT, "#I Exited Low Power", buf, 2u);
  }
  if (!*(void *)(v1 + 144))
  {
    uint64_t v6 = *(NSObject **)(v1 + 40);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_26368A000, v6, OS_LOG_TYPE_DEFAULT, "#I Listening for UI events", buf, 2u);
    }
    pthread_mutex_lock(&ctu::Singleton<sys::UIObserver,sys::UIObserver,ctu::PthreadMutexGuardPolicy<sys::UIObserver>>::sInstance);
    uint64_t v7 = (sys::UIObserver *)xmmword_26A99EFE0;
    if (!(void)xmmword_26A99EFE0)
    {
      memset(buf, 170, 16);
      uint64_t v8 = (sys::UIObserver *)operator new(0x40uLL);
      sys::UIObserver::UIObserver(v8);
      std::shared_ptr<sys::UIObserver>::shared_ptr[abi:ne180100]<sys::UIObserver,void>((std::__shared_weak_count_vtbl **)buf, (std::__shared_weak_count_vtbl *)v8);
      long long v9 = *(_OWORD *)buf;
      *(void *)buf = 0;
      *(void *)&buf[8] = 0;
      uint64_t v10 = (std::__shared_weak_count *)*((void *)&xmmword_26A99EFE0 + 1);
      xmmword_26A99EFE0 = v9;
      if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
      __int16 v11 = *(std::__shared_weak_count **)&buf[8];
      if (*(void *)&buf[8]
        && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
      uint64_t v7 = (sys::UIObserver *)xmmword_26A99EFE0;
    }
    uint64_t v12 = (std::__shared_weak_count *)*((void *)&xmmword_26A99EFE0 + 1);
    if (*((void *)&xmmword_26A99EFE0 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&xmmword_26A99EFE0 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    pthread_mutex_unlock(&ctu::Singleton<sys::UIObserver,sys::UIObserver,ctu::PthreadMutexGuardPolicy<sys::UIObserver>>::sInstance);
    sys::UIObserver::observe(v7, 1, (std::__shared_weak_count_vtbl **)&v16);
    long long v13 = v16;
    long long v16 = 0uLL;
    int v14 = *(std::__shared_weak_count **)(v1 + 152);
    *(_OWORD *)(v1 + 144) = v13;
    if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
    uint64_t v15 = (std::__shared_weak_count *)*((void *)&v16 + 1);
    if (*((void *)&v16 + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v16 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
    if (v12)
    {
      if (!atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
  }
}

void sub_263695ED8(_Unwind_Exception *a1)
{
  operator delete(v1);
  pthread_mutex_unlock(&ctu::Singleton<sys::UIObserver,sys::UIObserver,ctu::PthreadMutexGuardPolicy<sys::UIObserver>>::sInstance);
  _Unwind_Resume(a1);
}

void data::TransportService::State::startLimitTimer_sync(data::TransportService::State *this)
{
  if (*((_DWORD *)this + 26) == 1)
  {
    dispatch_time_t v2 = dispatch_time(0, 1000000000 * *((unsigned int *)this + 27) + 500000000);
    uint64_t v3 = *((void *)this + 20);
    if (v3)
    {
      dispatch_source_cancel(v3);
      uint64_t v4 = *((void *)this + 20);
      *((void *)this + 20) = 0;
      if (v4) {
        dispatch_release(v4);
      }
      unsigned int v5 = *((void *)this + 5);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_26368A000, v5, OS_LOG_TYPE_DEFAULT, "#I Limit timer stopped", buf, 2u);
      }
    }
    uint64_t v6 = dispatch_source_create(MEMORY[0x263EF8400], 1uLL, 0, *((dispatch_queue_t *)this + 11));
    uint64_t v7 = *((void *)this + 20);
    *((void *)this + 20) = v6;
    if (v7)
    {
      dispatch_release(v7);
      uint64_t v6 = *((void *)this + 20);
    }
    dispatch_source_set_timer(v6, v2, 0xFFFFFFFFFFFFFFFFLL, 0x1DCD6500uLL);
    uint64_t v8 = (std::__shared_weak_count *)*((void *)this + 10);
    if (!v8 || (uint64_t v9 = *((void *)this + 9), (v10 = std::__shared_weak_count::lock(v8)) == 0)) {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    __int16 v11 = v10;
    p_shared_weak_owners = &v10->__shared_weak_owners_;
    atomic_fetch_add_explicit(&v10->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v11);
    }
    long long v13 = *((void *)this + 20);
    handler[0] = MEMORY[0x263EF8330];
    handler[1] = 1174405120;
    handler[2] = ___ZN4data16TransportService5State20startLimitTimer_syncEv_block_invoke;
    handler[3] = &__block_descriptor_tmp_58;
    handler[4] = this;
    handler[5] = v9;
    long long v16 = v11;
    atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
    dispatch_source_set_event_handler(v13, handler);
    dispatch_activate(*((dispatch_object_t *)this + 20));
    int v14 = *((void *)this + 5);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_26368A000, v14, OS_LOG_TYPE_DEFAULT, "#I Limit timer started", buf, 2u);
    }
    if (v16) {
      std::__shared_weak_count::__release_weak(v16);
    }
    std::__shared_weak_count::__release_weak(v11);
  }
}

void ctu::SharedSynchronizable<data::TransportService::State>::execute_wrapped(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[1];
  if (!v3 || (uint64_t v5 = *a1, (v6 = std::__shared_weak_count::lock(v3)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v7 = v6;
  uint64_t v8 = a1[2];
  block[0] = MEMORY[0x263EF8330];
  block[1] = 1174405120;
  block[2] = ___ZNK3ctu20SharedSynchronizableIN4data16TransportService5StateEE15execute_wrappedEU13block_pointerFvvE_block_invoke;
  block[3] = &unk_270EA56B8;
  block[5] = v5;
  uint64_t v12 = v7;
  p_shared_owners = &v7->__shared_owners_;
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  block[4] = a2;
  dispatch_async(v8, block);
  uint64_t v10 = v12;
  if (!v12 || atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      return;
    }
LABEL_8:
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    return;
  }
  ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
  std::__shared_weak_count::__release_weak(v10);
  if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_8;
  }
}

uint64_t ___ZNK3ctu20SharedSynchronizableIN4data16TransportService5StateEE15execute_wrappedEU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t __copy_helper_block_e8_40c58_ZTSNSt3__110shared_ptrIKN4data16TransportService5StateEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c58_ZTSNSt3__110shared_ptrIKN4data16TransportService5StateEEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void ___ZN4data16TransportService5State20startLimitTimer_syncEv_block_invoke(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    uint64_t v3 = (data::TransportService::State *)a1[4];
    uint64_t v4 = std::__shared_weak_count::lock(v2);
    uint64_t v9 = v4;
    if (v4)
    {
      uint64_t v5 = v4;
      if (a1[5])
      {
        uint64_t v6 = *((void *)v3 + 5);
        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)uint64_t v7 = 0;
          _os_log_impl(&dword_26368A000, v6, OS_LOG_TYPE_DEFAULT, "#I Limit timer expired", v7, 2u);
        }
        data::TransportService::State::unblockThrottling_sync(v3);
      }
      if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void sub_263696480(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_40c54_ZTSNSt3__18weak_ptrIN4data16TransportService5StateEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c54_ZTSNSt3__18weak_ptrIN4data16TransportService5StateEEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void ___ZN4data16TransportService5State9setConfigENS0_16ThrottlingConfigE_block_invoke(uint64_t a1)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(NSObject **)(v2 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT)
    && ((data::TransportService::ThrottlingConfig::asString((data::TransportService::ThrottlingConfig *)(a1 + 40), __p),
         v13 >= 0)
      ? (uint64_t v4 = __p)
      : (uint64_t v4 = (void **)__p[0]),
        *(_DWORD *)buf = 136315138,
        uint64_t v15 = v4,
        _os_log_impl(&dword_26368A000, v3, OS_LOG_TYPE_DEFAULT, "#I Config set to %s", buf, 0xCu),
        v13 < 0))
  {
    operator delete(__p[0]);
    int v5 = *(_DWORD *)(v2 + 104);
    int v6 = *(_DWORD *)(a1 + 40);
    if (v5 == v6) {
      goto LABEL_13;
    }
  }
  else
  {
    int v5 = *(_DWORD *)(v2 + 104);
    int v6 = *(_DWORD *)(a1 + 40);
    if (v5 == v6) {
      goto LABEL_13;
    }
  }
  *(_DWORD *)(v2 + 104) = v6;
  uint64_t v7 = *(NSObject **)(v2 + 40);
  BOOL v8 = os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
  if (v8)
  {
    LODWORD(__p[0]) = 67109120;
    HIDWORD(__p[0]) = v6;
    _os_log_impl(&dword_26368A000, v7, OS_LOG_TYPE_DEFAULT, "#I Throttling %d", (uint8_t *)__p, 8u);
  }
  Instance = (ApplePDPHelperInterface *)ApplePDPHelperInterface::getInstance((ApplePDPHelperInterface *)v8);
  if ((ApplePDPHelperInterface::enableLowPowerPDPThrottle(Instance) & 1) == 0)
  {
    uint64_t v10 = *(NSObject **)(v2 + 40);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      LODWORD(__p[0]) = 67109120;
      HIDWORD(__p[0]) = v6;
      _os_log_error_impl(&dword_26368A000, v10, OS_LOG_TYPE_ERROR, "Failed setting throttling to %d", (uint8_t *)__p, 8u);
    }
  }
  int v5 = *(_DWORD *)(a1 + 40);
LABEL_13:
  if (v5 == 1)
  {
    int v11 = *(_DWORD *)(a1 + 44);
    if (*(_DWORD *)(v2 + 108) != v11)
    {
      *(_DWORD *)(v2 + 108) = v11;
      if (*(void *)(v2 + 160)) {
        data::TransportService::State::startLimitTimer_sync((data::TransportService::State *)v2);
      }
    }
  }
}

void ___ZNK4data16TransportService5State9dumpStateEv_block_invoke(uint64_t a1)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(NSObject **)(v1 + 40);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    data::TransportService::ThrottlingConfig::asString((data::TransportService::ThrottlingConfig *)(v1 + 104), __p);
    if (v12 >= 0) {
      uint64_t v3 = __p;
    }
    else {
      uint64_t v3 = *(unsigned char **)__p;
    }
    *(_DWORD *)buf = 136315138;
    *(void *)&uint8_t buf[4] = v3;
    _os_log_impl(&dword_26368A000, v2, OS_LOG_TYPE_DEFAULT, "#I Config: %s", buf, 0xCu);
    if (v12 < 0) {
      operator delete(*(void **)__p);
    }
    uint64_t v2 = *(NSObject **)(v1 + 40);
  }
  BOOL v4 = os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT);
  if (v4)
  {
    uint64_t v5 = *(int *)(v1 + 112);
    if (v5 > 2) {
      int v6 = "???";
    }
    else {
      int v6 = off_2655D49D0[v5];
    }
    *(_DWORD *)std::string __p = 136315138;
    *(void *)&__p[4] = v6;
    _os_log_impl(&dword_26368A000, v2, OS_LOG_TYPE_DEFAULT, "#I Low Power State %s", __p, 0xCu);
  }
  memset(buf, 0, 12);
  ApplePDPHelperInterface::getInstance((ApplePDPHelperInterface *)v4);
  int NumLowPowerPDPThrottleStats = ApplePDPHelperInterface::getNumLowPowerPDPThrottleStats();
  BOOL v8 = *(NSObject **)(v1 + 40);
  if (NumLowPowerPDPThrottleStats)
  {
    if (os_log_type_enabled(*(os_log_t *)(v1 + 40), OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string __p = 67109632;
      *(_DWORD *)&__p[4] = *(_DWORD *)buf;
      *(_WORD *)&__p[8] = 1024;
      *(_DWORD *)&__p[10] = *(_DWORD *)&buf[4];
      __int16 v10 = 1024;
      int v11 = *(_DWORD *)&buf[8];
      _os_log_impl(&dword_26368A000, v8, OS_LOG_TYPE_DEFAULT, "#I Blocked outgoing packets: %u, non-baseband wakes: %u, incoming traffic deactivations: %u", __p, 0x14u);
    }
  }
  else if (os_log_type_enabled(*(os_log_t *)(v1 + 40), OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)std::string __p = 0;
    _os_log_error_impl(&dword_26368A000, v8, OS_LOG_TYPE_ERROR, "Failed to query throttle stats", __p, 2u);
  }
}

void ___ZN4data16TransportService5State17unblockThrottlingEv_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(data::TransportService::State **)(a1 + 32);
  uint64_t v2 = *((void *)v1 + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl(&dword_26368A000, v2, OS_LOG_TYPE_DEFAULT, "#I Unblocking throttling", v3, 2u);
  }
  data::TransportService::State::unblockThrottling_sync(v1);
}

uint64_t __cxx_global_var_init_3()
{
  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<sys::UIObserver>::~PthreadMutexGuardPolicy, &ctu::Singleton<sys::UIObserver,sys::UIObserver,ctu::PthreadMutexGuardPolicy<sys::UIObserver>>::sInstance, &dword_26368A000);
  }
  return result;
}

{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<abm::AWDHelper>::~PthreadMutexGuardPolicy, &ctu::Singleton<abm::AWDHelper,abm::AWDHelper,ctu::PthreadMutexGuardPolicy<abm::AWDHelper>>::sInstance, &dword_26368A000);
  }
  return result;
}

void AppleBasebandManagerInitServer(const char *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = (std::__shared_weak_count *)a2[1];
  uint64_t v31 = *a2;
  int v32 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v6 = (std::__shared_weak_count *)a2[3];
  uint64_t v29 = a2[2];
  BOOL v30 = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = (std::__shared_weak_count *)a2[5];
  v27[2] = a2[4];
  uint64_t v28 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v4)
  {
    v27[0] = v4;
    v27[1] = (uint64_t)v5;
    if (v5) {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    abm::AWDHelperSetConnection(v27);
    if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  unint64_t v25 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v26 = 0xAAAAAAAAAAAAAAAALL;
  pthread_mutex_lock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
  BOOL v8 = (uint64_t *)off_26A99F030;
  if (!off_26A99F030)
  {
    ABMServer::create_default_global(&v33);
    long long v9 = *(_OWORD *)&v33.__r_.__value_.__l.__data_;
    *(_OWORD *)&v33.__r_.__value_.__l.__data_ = 0uLL;
    __int16 v10 = (std::__shared_weak_count *)*(&off_26A99F030 + 1);
    off_26A99F030 = v9;
    if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
    size = (std::__shared_weak_count *)v33.__r_.__value_.__l.__size_;
    if (v33.__r_.__value_.__l.__size_
      && !atomic_fetch_add((atomic_ullong *volatile)(v33.__r_.__value_.__l.__size_ + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
    BOOL v8 = (uint64_t *)off_26A99F030;
  }
  unint64_t v25 = (unint64_t)v8;
  unint64_t v26 = *(&off_26A99F030 + 1);
  if (*(&off_26A99F030 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_26A99F030 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
  if (!v8) {
    goto LABEL_36;
  }
  size_t v12 = strlen(a1);
  if (v12 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  std::string::size_type v13 = v12;
  if (v12 >= 0x17)
  {
    uint64_t v17 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v12 | 7) != 0x17) {
      uint64_t v17 = v12 | 7;
    }
    uint64_t v18 = v17 + 1;
    p_dst = (std::string *)operator new(v17 + 1);
    __dst.__r_.__value_.__l.__size_ = v13;
    __dst.__r_.__value_.__r.__words[2] = v18 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
LABEL_32:
    memcpy(p_dst, a1, v13);
    p_dst->__r_.__value_.__s.__data_[v13] = 0;
    uint64_t v15 = *v8;
    int v16 = SHIBYTE(__dst.__r_.__value_.__r.__words[2]);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_28;
    }
LABEL_33:
    std::string::__init_copy_ctor_external(&v33, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
    goto LABEL_34;
  }
  *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v12;
  p_dst = &__dst;
  if (v12) {
    goto LABEL_32;
  }
  __dst.__r_.__value_.__s.__data_[0] = 0;
  uint64_t v15 = *v8;
  int v16 = SHIBYTE(__dst.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_33;
  }
LABEL_28:
  std::string v33 = __dst;
LABEL_34:
  ABMServerInternal::init(v15, (uint64_t)&v33, (uint64_t)a2);
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v33.__r_.__value_.__l.__data_);
    if ((v16 & 0x80000000) == 0) {
      goto LABEL_36;
    }
  }
  else if ((v16 & 0x80000000) == 0)
  {
    goto LABEL_36;
  }
  operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_36:
  abm::asString();
  if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v19 = &v33;
  }
  else {
    int v19 = (std::string *)v33.__r_.__value_.__r.__words[0];
  }
  syslog(5, "%s hosting ABM with profile: %s", a1, (const char *)v19);
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v33.__r_.__value_.__l.__data_);
  }
  int v20 = (std::__shared_weak_count *)v26;
  if (v26 && !atomic_fetch_add((atomic_ullong *volatile)(v26 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
  uint64_t v21 = v28;
  if (v28 && !atomic_fetch_add(&v28->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v21);
  }
  uint64_t v22 = v30;
  if (v30 && !atomic_fetch_add(&v30->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
    uint64_t v23 = v32;
    if (!v32) {
      return;
    }
  }
  else
  {
    uint64_t v23 = v32;
    if (!v32) {
      return;
    }
  }
  if (!atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
  }
}

void sub_263696DC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,char a21)
{
  operator delete(__p);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)&a19);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100](v21 - 96);
  _Unwind_Resume(a1);
}

BOOL AppleBasebandManagerStartServer(NSObject *a1)
{
  pthread_mutex_lock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
  uint64_t v2 = (ABMServerInternal **)off_26A99F030;
  if (!off_26A99F030)
  {
    ABMServer::create_default_global(&v9);
    long long v3 = v9;
    long long v9 = 0uLL;
    uint64_t v4 = (std::__shared_weak_count *)*(&off_26A99F030 + 1);
    off_26A99F030 = v3;
    if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    uint64_t v5 = (std::__shared_weak_count *)*((void *)&v9 + 1);
    if (*((void *)&v9 + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v9 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    uint64_t v2 = (ABMServerInternal **)off_26A99F030;
  }
  int v6 = (std::__shared_weak_count *)*(&off_26A99F030 + 1);
  if (*(&off_26A99F030 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_26A99F030 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
  BOOL result = ABMServerInternal::start(*v2, a1);
  BOOL v8 = result;
  if (v6)
  {
    if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
      return v8;
    }
  }
  return result;
}

void sub_263696FE4(_Unwind_Exception *a1)
{
}

BOOL AppleBasebandManagerStopServer(NSObject *a1)
{
  pthread_mutex_lock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
  uint64_t v2 = (ABMServerInternal **)off_26A99F030;
  if (!off_26A99F030)
  {
    ABMServer::create_default_global(&v9);
    long long v3 = v9;
    long long v9 = 0uLL;
    uint64_t v4 = (std::__shared_weak_count *)*(&off_26A99F030 + 1);
    off_26A99F030 = v3;
    if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    uint64_t v5 = (std::__shared_weak_count *)*((void *)&v9 + 1);
    if (*((void *)&v9 + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v9 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    uint64_t v2 = (ABMServerInternal **)off_26A99F030;
  }
  int v6 = (std::__shared_weak_count *)*(&off_26A99F030 + 1);
  if (*(&off_26A99F030 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_26A99F030 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
  BOOL result = ABMServerInternal::stop(*v2, a1);
  BOOL v8 = result;
  if (v6)
  {
    if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
      return v8;
    }
  }
  return result;
}

void sub_263697184(_Unwind_Exception *a1)
{
}

BOOL AppleBasebandManagerShutdownServer(NSObject *a1)
{
  pthread_mutex_lock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
  uint64_t v2 = (ABMServerInternal **)off_26A99F030;
  if (!off_26A99F030)
  {
    ABMServer::create_default_global(&v9);
    long long v3 = v9;
    long long v9 = 0uLL;
    uint64_t v4 = (std::__shared_weak_count *)*(&off_26A99F030 + 1);
    off_26A99F030 = v3;
    if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    uint64_t v5 = (std::__shared_weak_count *)*((void *)&v9 + 1);
    if (*((void *)&v9 + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v9 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    uint64_t v2 = (ABMServerInternal **)off_26A99F030;
  }
  int v6 = (std::__shared_weak_count *)*(&off_26A99F030 + 1);
  if (*(&off_26A99F030 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_26A99F030 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
  BOOL result = ABMServerInternal::shutdown(*v2, a1);
  BOOL v8 = result;
  if (v6)
  {
    if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
      return v8;
    }
  }
  return result;
}

void sub_263697324(_Unwind_Exception *a1)
{
}

uint64_t AppleBasebandManagerGetProfile()
{
  return 3;
}

uint64_t ctu::PthreadMutexGuardPolicy<ABMServer>::~PthreadMutexGuardPolicy(uint64_t a1)
{
  pthread_mutex_lock((pthread_mutex_t *)a1);
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 72);
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  long long v3 = *(std::__shared_weak_count **)(a1 + 72);
  if (!v3 || atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v3);
  return a1;
}

uint64_t __cxx_global_var_init()
{
  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<ABMServer>::~PthreadMutexGuardPolicy, &ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance, &dword_26368A000);
  }
  return result;
}

void AnalyticsHelper::create(AnalyticsHelper **a1@<X8>)
{
  *a1 = (AnalyticsHelper *)0xAAAAAAAAAAAAAAAALL;
  a1[1] = (AnalyticsHelper *)0xAAAAAAAAAAAAAAAALL;
  long long v3 = (AnalyticsHelper *)operator new(0x80uLL);
  AnalyticsHelper::AnalyticsHelper(v3);
  *a1 = v3;
  a1[1] = (AnalyticsHelper *)0xAAAAAAAAAAAAAAAALL;
  uint64_t v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = &v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&unk_270EA5A78;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)v3;
  a1[1] = (AnalyticsHelper *)v4;
  int v6 = (std::__shared_weak_count *)*((void *)v3 + 10);
  if (v6)
  {
    if (v6->__shared_owners_ == -1)
    {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      *((void *)v3 + 9) = v3;
      *((void *)v3 + 10) = v4;
      std::__shared_weak_count::__release_weak(v6);
      if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL))
      {
LABEL_13:
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
        uint64_t v7 = *a1;
        if (!*((void *)*a1 + 7)) {
          return;
        }
        goto LABEL_7;
      }
    }
  }
  else
  {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    *((void *)v3 + 9) = v3;
    *((void *)v3 + 10) = v4;
    if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_13;
    }
  }
  uint64_t v7 = *a1;
  if (!*((void *)*a1 + 7)) {
    return;
  }
LABEL_7:
  BOOL v8 = (std::__shared_weak_count *)*((void *)v7 + 10);
  if (!v8 || (long long v9 = std::__shared_weak_count::lock(v8)) == 0) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  __int16 v10 = v9;
  ctu::LoggerCommonBase::getLogDomain((AnalyticsHelper *)((char *)v7 + 8));
  ctu::TrackedLogger::registerLoggerToServer();
  if (!atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
}

void sub_263697698()
{
}

void sub_2636976F0(_Unwind_Exception *a1)
{
}

void sub_263697704(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_263697718(_Unwind_Exception *a1)
{
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void AnalyticsHelper::AnalyticsHelper(AnalyticsHelper *this)
{
  *(void *)this = &unk_270EA5968;
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v8, "com.apple.telephony.abm", "stats.analytics");
  GetABMLogServer(&v6);
  initially_inactive = dispatch_queue_attr_make_initially_inactive(0);
  long long v3 = dispatch_queue_create_with_target_V2("stats.analytics", initially_inactive, 0);
  dispatch_set_qos_class_floor(v3, QOS_CLASS_DEFAULT, 0);
  dispatch_activate(v3);
  *((void *)this + 9) = 0;
  *((void *)this + 10) = 0;
  *((void *)this + 11) = v3;
  if (v3)
  {
    dispatch_retain(v3);
    *((void *)this + 12) = 0;
    dispatch_release(v3);
  }
  else
  {
    *((void *)this + 12) = 0;
  }
  *(void *)this = &unk_270EA5A38;
  ctu::OsLogContext::OsLogContext();
  ctu::OsLogContext::OsLogContext();
  ctu::LoggerCommonBase::LoggerCommonBase();
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v10);
  *((void *)this + 1) = &unk_270EA5428;
  uint64_t v4 = v7;
  *((void *)this + 7) = v6;
  *((void *)this + 8) = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v9);
  *(void *)this = &unk_270EA5AC8;
  uint64_t v5 = v7;
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v8);
  *(void *)this = &unk_270EA5968;
  *((void *)this + 15) = 0;
  *((void *)this + 14) = 0;
  *((void *)this + 13) = (char *)this + 112;
}

void sub_26369790C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15)
{
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&a15);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&a13);
  ctu::SharedSynchronizable<data::TransportService::State>::~SharedSynchronizable(v15);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&a11);
  _Unwind_Resume(a1);
}

void sub_263697940(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)va);
  _Unwind_Resume(a1);
}

const char *AnalyticsHelper::getName(AnalyticsHelper *this)
{
  return "stats.analytics";
}

void AnalyticsHelper::~AnalyticsHelper(char **this)
{
  *this = (char *)&unk_270EA5968;
  std::__tree<std::__value_type<std::string,std::map<std::string,xpc::dict>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,xpc::dict>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,xpc::dict>>>>::destroy(this[14]);
  *this = (char *)&unk_270EA5A38;
  MEMORY[0x263E68AF0](this + 1);
  uint64_t v2 = this[12];
  if (v2) {
    dispatch_release(v2);
  }
  long long v3 = this[11];
  if (v3) {
    dispatch_release(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)this[10];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
}

{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *this = (char *)&unk_270EA5968;
  std::__tree<std::__value_type<std::string,std::map<std::string,xpc::dict>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,xpc::dict>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,xpc::dict>>>>::destroy(this[14]);
  *this = (char *)&unk_270EA5A38;
  MEMORY[0x263E68AF0](this + 1);
  uint64_t v2 = this[12];
  if (v2) {
    dispatch_release(v2);
  }
  long long v3 = this[11];
  if (v3) {
    dispatch_release(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)this[10];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
}

{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;
  uint64_t vars8;

  *this = (char *)&unk_270EA5968;
  std::__tree<std::__value_type<std::string,std::map<std::string,xpc::dict>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,xpc::dict>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,xpc::dict>>>>::destroy(this[14]);
  *this = (char *)&unk_270EA5A38;
  MEMORY[0x263E68AF0](this + 1);
  uint64_t v2 = this[12];
  if (v2) {
    dispatch_release(v2);
  }
  long long v3 = this[11];
  if (v3) {
    dispatch_release(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)this[10];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }

  operator delete(this);
}

void AnalyticsHelper::describeAnalyticsCache(AnalyticsHelper *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 272) = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v3 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)(a2 + 240) = v3;
  *(_OWORD *)(a2 + 256) = v3;
  *(_OWORD *)(a2 + 208) = v3;
  *(_OWORD *)(a2 + 224) = v3;
  *(_OWORD *)(a2 + 176) = v3;
  *(_OWORD *)(a2 + 192) = v3;
  *(_OWORD *)(a2 + 144) = v3;
  *(_OWORD *)(a2 + 160) = v3;
  *(_OWORD *)(a2 + 112) = v3;
  *(_OWORD *)(a2 + 128) = v3;
  *(_OWORD *)(a2 + 80) = v3;
  *(_OWORD *)(a2 + 96) = v3;
  *(_OWORD *)(a2 + 48) = v3;
  *(_OWORD *)(a2 + 64) = v3;
  *(_OWORD *)(a2 + 32) = v3;
  *(_OWORD *)a2 = v3;
  *(_OWORD *)(a2 + 16) = v3;
  uint64_t v4 = (void *)(a2 + 16);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100](a2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"** analyticsData **\n", 20);
  uint64_t v5 = (void *)*((void *)this + 13);
  BOOL v30 = (char *)this + 112;
  if (v5 != (void *)((char *)this + 112))
  {
    while (1)
    {
      uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"[", 1);
      uint64_t v7 = (const char *)(v5 + 4);
      if (*((char *)v5 + 55) < 0) {
        uint64_t v7 = *(const char **)v7;
      }
      size_t v8 = strlen(v7);
      long long v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)v7, v8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"] = \n", 5);
      __int16 v10 = (void *)v5[7];
      if (v10 != v5 + 8) {
        break;
      }
LABEL_7:
      int v11 = (char *)v5[1];
      if (v11)
      {
        do
        {
          size_t v12 = v11;
          int v11 = *(char **)v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          size_t v12 = (char *)v5[2];
          BOOL v29 = *(void *)v12 == (void)v5;
          uint64_t v5 = v12;
        }
        while (!v29);
      }
      uint64_t v5 = v12;
      if (v12 == v30) {
        return;
      }
    }
    while (1)
    {
      std::string::size_type v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"<<<", 3);
      uint64_t v14 = (const char *)(v10 + 4);
      if (*((char *)v10 + 55) < 0) {
        uint64_t v14 = *(const char **)v14;
      }
      size_t v15 = strlen(v14);
      int v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)v14, v15);
      uint64_t v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)">>> = ", 6);
      uint64_t v18 = (char *)MEMORY[0x263E6A1A0](v10[7]);
      memset(__dst, 170, sizeof(__dst));
      size_t v19 = strlen(v18);
      if (v19 >= 0x7FFFFFFFFFFFFFF8) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      int v20 = (unsigned char *)v19;
      if (v19 >= 0x17) {
        break;
      }
      HIBYTE(__dst[2]) = v19;
      uint64_t v21 = __dst;
      if (v19) {
        goto LABEL_20;
      }
LABEL_21:
      v20[(void)v21] = 0;
      free(v18);
      if (SHIBYTE(__dst[2]) >= 0) {
        uint64_t v24 = (const char *)__dst;
      }
      else {
        uint64_t v24 = (const char *)__dst[0];
      }
      size_t v25 = strlen(v24);
      unint64_t v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)v24, v25);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"\n", 1);
      if (SHIBYTE(__dst[2]) < 0)
      {
        operator delete(__dst[0]);
        uint64_t v27 = (void *)v10[1];
        if (v27)
        {
          do
          {
LABEL_28:
            uint64_t v28 = v27;
            uint64_t v27 = (void *)*v27;
          }
          while (v27);
          goto LABEL_10;
        }
      }
      else
      {
        uint64_t v27 = (void *)v10[1];
        if (v27) {
          goto LABEL_28;
        }
      }
      do
      {
        uint64_t v28 = (void *)v10[2];
        BOOL v29 = *v28 == (void)v10;
        __int16 v10 = v28;
      }
      while (!v29);
LABEL_10:
      __int16 v10 = v28;
      if (v28 == v5 + 8) {
        goto LABEL_7;
      }
    }
    uint64_t v22 = (v19 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v19 | 7) != 0x17) {
      uint64_t v22 = v19 | 7;
    }
    uint64_t v23 = v22 + 1;
    uint64_t v21 = (void **)operator new(v22 + 1);
    __dst[1] = v20;
    __dst[2] = (void *)(v23 | 0x8000000000000000);
    __dst[0] = v21;
LABEL_20:
    memcpy(v21, v18, (size_t)v20);
    goto LABEL_21;
  }
}

void sub_263697DFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

void sub_263697E10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

void sub_263697E24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

void sub_263697E38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

void sub_263697E4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
  {
    operator delete(__p);
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream(a10);
    _Unwind_Resume(a1);
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream(a10);
  _Unwind_Resume(a1);
}

void AnalyticsHelper::updateData(uint64_t a1, xpc_object_t *a2)
{
  uint64_t v203 = *MEMORY[0x263EF8340];
  memset(&v187, 170, sizeof(v187));
  xpc_object_t value = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x263F25FA8]);
  object[0] = value;
  if (value) {
    xpc_retain(value);
  }
  else {
    object[0] = xpc_null_create();
  }
  xpc::dyn_cast_or_default((uint64_t *)&v187, (xpc *)object, (const object *)"", v5);
  xpc_release(object[0]);
  memset(__p, 170, sizeof(__p));
  xpc_object_t v6 = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x263F26080]);
  object[0] = v6;
  if (v6) {
    xpc_retain(v6);
  }
  else {
    object[0] = xpc_null_create();
  }
  xpc::dyn_cast_or_default((uint64_t *)__p, (xpc *)object, (const object *)"None", v7);
  xpc_release(object[0]);
  std::string::size_type size = HIBYTE(v187.__r_.__value_.__r.__words[2]);
  if ((v187.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v187.__r_.__value_.__l.__size_;
  }
  if (!size || (long long v9 = (void *)*MEMORY[0x263F26420], !xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x263F26420])))
  {
    size_t v12 = *(NSObject **)(a1 + 40);
    if (!os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
      goto LABEL_342;
    }
    std::string::size_type v13 = (char *)MEMORY[0x263E6A1A0](*a2);
    memset(object, 170, sizeof(object));
    size_t v14 = strlen(v13);
    if (v14 >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    size_t v15 = (void *)v14;
    if (v14 >= 0x17)
    {
      uint64_t v94 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v14 | 7) != 0x17) {
        uint64_t v94 = v14 | 7;
      }
      uint64_t v95 = v94 + 1;
      int v16 = operator new(v94 + 1);
      object[1] = v15;
      object[2] = (xpc_object_t)(v95 | 0x8000000000000000);
      object[0] = v16;
    }
    else
    {
      HIBYTE(object[2]) = v14;
      int v16 = object;
      if (!v14) {
        goto LABEL_191;
      }
    }
    memcpy(v16, v13, (size_t)v15);
LABEL_191:
    *((unsigned char *)v15 + (void)v16) = 0;
    free(v13);
    v96 = object;
    if (SHIBYTE(object[2]) < 0) {
      v96 = (xpc_object_t *)object[0];
    }
    LODWORD(buf) = 136315138;
    *(void *)((char *)&buf + 4) = v96;
    _os_log_error_impl(&dword_26368A000, v12, OS_LOG_TYPE_ERROR, "Input error: Failed to update AnalyticsData with %s", (uint8_t *)&buf, 0xCu);
    if (SHIBYTE(object[2]) < 0) {
      operator delete(object[0]);
    }
    goto LABEL_342;
  }
  xpc_object_t v10 = xpc_dictionary_create(0, 0, 0);
  uint64_t v11 = MEMORY[0x263EF8708];
  if (v10 || (xpc_object_t v10 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x263E6A240](v10) == v11)
    {
      xpc_retain(v10);
      xpc_object_t xdict = v10;
    }
    else
    {
      xpc_object_t xdict = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t xdict = xpc_null_create();
    xpc_object_t v10 = 0;
  }
  uint64_t v180 = a1;
  xpc_release(v10);
  *((void *)&buf + 1) = 0;
  uint64_t v202 = 0;
  *(void *)&long long buf = (char *)&buf + 8;
  v177 = (uint64_t **)(a1 + 104);
  uint64_t v17 = std::__tree<std::__value_type<std::string,std::map<std::string,xpc::dict>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,xpc::dict>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,xpc::dict>>>>::find<std::string>(a1 + 104, (const void **)&v187.__r_.__value_.__l.__data_);
  v178 = (uint64_t *)(a1 + 112);
  if ((uint64_t *)(a1 + 112) == v17)
  {
LABEL_59:
    xpc_object_t v38 = xpc_dictionary_get_value(xdict, "ReportProcessStatus");
    goto LABEL_60;
  }
  v176 = v9;
  if (&buf == (long long *)(v17 + 7) || (v18 = (uint64_t *)v17[7], size_t v19 = v17 + 8, v18 == v17 + 8))
  {
    uint64_t v11 = MEMORY[0x263EF8708];
    goto LABEL_59;
  }
  while (2)
  {
    memset(object, 170, sizeof(object));
    std::__tree<std::__value_type<std::string,xpc::dict>,std::__map_value_compare<std::string,std::__value_type<std::string,xpc::dict>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xpc::dict>>>::__construct_node<std::pair<std::string const,xpc::dict> const&>(object, (uint64_t)&buf, (uint64_t)(v18 + 4));
    int v20 = (uint64_t *)object[0];
    uint64_t v21 = (uint64_t *)*((void *)&buf + 1);
    uint64_t v22 = (uint64_t **)&buf + 1;
    uint64_t v23 = (uint64_t **)&buf + 1;
    if (!*((void *)&buf + 1)) {
      goto LABEL_50;
    }
    int v24 = *((char *)object[0] + 55);
    if (v24 >= 0) {
      size_t v25 = (char *)object[0] + 32;
    }
    else {
      size_t v25 = (char *)*((void *)object[0] + 4);
    }
    if (v24 >= 0) {
      unint64_t v26 = *((unsigned __int8 *)object[0] + 55);
    }
    else {
      unint64_t v26 = *((void *)object[0] + 5);
    }
    do
    {
      while (1)
      {
        uint64_t v22 = (uint64_t **)v21;
        uint64_t v29 = v21[4];
        uint64_t v27 = v21 + 4;
        uint64_t v28 = (void *)v29;
        int v30 = *((char *)v27 + 23);
        uint64_t v31 = v30 >= 0 ? v27 : v28;
        unint64_t v32 = v30 >= 0 ? *((unsigned __int8 *)v27 + 23) : v27[1];
        size_t v33 = v32 >= v26 ? v26 : v32;
        int v34 = memcmp(v25, v31, v33);
        if (v34) {
          break;
        }
        if (v26 >= v32) {
          goto LABEL_48;
        }
LABEL_34:
        uint64_t v21 = *v22;
        uint64_t v23 = v22;
        if (!*v22) {
          goto LABEL_50;
        }
      }
      if (v34 < 0) {
        goto LABEL_34;
      }
LABEL_48:
      uint64_t v21 = v22[1];
    }
    while (v21);
    uint64_t v23 = v22 + 1;
LABEL_50:
    uint64_t *v20 = 0;
    v20[1] = 0;
    v20[2] = (uint64_t)v22;
    *uint64_t v23 = v20;
    if (*(void *)buf)
    {
      *(void *)&long long buf = *(void *)buf;
      int v20 = *v23;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)&buf + 1), v20);
    ++v202;
    uint64_t v35 = (uint64_t *)v18[1];
    if (v35)
    {
      do
      {
        uint64_t v36 = v35;
        uint64_t v35 = (uint64_t *)*v35;
      }
      while (v35);
    }
    else
    {
      do
      {
        uint64_t v36 = (uint64_t *)v18[2];
        BOOL v37 = *v36 == (void)v18;
        uint64_t v18 = v36;
      }
      while (!v37);
    }
    uint64_t v18 = v36;
    if (v36 != v19) {
      continue;
    }
    break;
  }
  char v43 = (char *)*((void *)&buf + 1);
  HIBYTE(object[2]) = 9;
  strcpy((char *)object, "EventInfo");
  long long v9 = v176;
  uint64_t v11 = MEMORY[0x263EF8708];
  if (!*((void *)&buf + 1)) {
    goto LABEL_59;
  }
  char v44 = (char *)&buf + 8;
  while (2)
  {
    while (2)
    {
      int v45 = v43[55];
      if (v45 >= 0) {
        xpc_object_t v46 = v43 + 32;
      }
      else {
        xpc_object_t v46 = (const void *)*((void *)v43 + 4);
      }
      if (v45 >= 0) {
        unint64_t v47 = v43[55];
      }
      else {
        unint64_t v47 = *((void *)v43 + 5);
      }
      if (v47 >= 9) {
        size_t v48 = 9;
      }
      else {
        size_t v48 = v47;
      }
      int v49 = memcmp(v46, object, v48);
      if (v49)
      {
        if ((v49 & 0x80000000) == 0) {
          break;
        }
        goto LABEL_71;
      }
      if (v47 < 9)
      {
LABEL_71:
        char v43 = (char *)*((void *)v43 + 1);
        if (!v43) {
          goto LABEL_86;
        }
        continue;
      }
      break;
    }
    char v44 = v43;
    char v43 = *(char **)v43;
    if (v43) {
      continue;
    }
    break;
  }
LABEL_86:
  if (v44 == (char *)&buf + 8) {
    goto LABEL_59;
  }
  int v50 = v44[55];
  if (v50 >= 0) {
    v51 = v44 + 32;
  }
  else {
    v51 = (const void *)*((void *)v44 + 4);
  }
  if (v50 >= 0) {
    unint64_t v52 = v44[55];
  }
  else {
    unint64_t v52 = *((void *)v44 + 5);
  }
  if (v52 >= 9) {
    size_t v53 = 9;
  }
  else {
    size_t v53 = v52;
  }
  int v54 = memcmp(object, v51, v53);
  if (v54)
  {
    if (v54 < 0) {
      goto LABEL_59;
    }
  }
  else if (v52 > 9)
  {
    goto LABEL_59;
  }
  xpc_object_t v97 = (xpc_object_t)*((void *)v44 + 7);
  if (v97) {
    xpc_retain(*((xpc_object_t *)v44 + 7));
  }
  else {
    xpc_object_t v97 = xpc_null_create();
  }
  xpc_release(xdict);
  xpc_object_t xdict = v97;
  xpc_object_t v38 = xpc_dictionary_get_value(v97, "ReportProcessStatus");
LABEL_60:
  object[0] = v38;
  if (v38) {
    xpc_retain(v38);
  }
  else {
    object[0] = xpc_null_create();
  }
  LOBYTE(v39) = xpc::dyn_cast_or_default((xpc *)object, (const object *)0xFF);
  xpc_release(object[0]);
  xpc_object_t v185 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  xpc_object_t v40 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v41 = v40;
  if (v40)
  {
    xpc_object_t v185 = v40;
    goto LABEL_66;
  }
  xpc_object_t v41 = xpc_null_create();
  xpc_object_t v185 = v41;
  if (v41)
  {
LABEL_66:
    if (MEMORY[0x263E6A240](v41) != v11)
    {
      xpc_object_t v42 = xpc_null_create();
      goto LABEL_100;
    }
    xpc_retain(v41);
  }
  else
  {
    xpc_object_t v42 = xpc_null_create();
    xpc_object_t v41 = 0;
LABEL_100:
    xpc_object_t v185 = v42;
  }
  xpc_release(v41);
  object[0] = a2;
  object[1] = v9;
  __s1[0] = (uint64_t)&v185;
  __s1[1] = (uint64_t)v9;
  xpc::dict::object_proxy::operator=((uint64_t)__s1, (uint64_t)object, &v184);
  xpc_release(v184);
  xpc_object_t v184 = 0;
  memset(__s1, 170, sizeof(__s1));
  xpc_object_t v55 = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x263F26078]);
  object[0] = v55;
  if (v55) {
    xpc_retain(v55);
  }
  else {
    object[0] = xpc_null_create();
  }
  xpc::dyn_cast_or_default(__s1, (xpc *)object, (const object *)"", v56);
  xpc_release(object[0]);
  int v57 = (const void *)*MEMORY[0x263F26028];
  size_t v58 = strlen((const char *)*MEMORY[0x263F26028]);
  size_t v59 = v58;
  size_t v60 = HIBYTE(__s1[2]);
  if ((SHIBYTE(__s1[2]) & 0x80000000) == 0)
  {
    if (v58 != -1)
    {
      uint64_t v61 = HIBYTE(__s1[2]);
      if (HIBYTE(__s1[2]) >= v58) {
        size_t v62 = v58;
      }
      else {
        size_t v62 = HIBYTE(__s1[2]);
      }
      if (memcmp(__s1, v57, v62)) {
        goto LABEL_117;
      }
LABEL_116:
      if (v61 != v59) {
        goto LABEL_117;
      }
LABEL_131:
      std::map<std::string,xpc::dict>::insert_or_assign[abi:ne180100]<xpc::dict>((void **)&buf, (const std::string::value_type **)__p, &v185);
      if (SHIBYTE(v187.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v182, v187.__r_.__value_.__l.__data_, v187.__r_.__value_.__l.__size_);
      }
      else {
        std::string v182 = v187;
      }
      AnalyticsHelper::submitEvent(v180, (uint64_t)&v182, &buf);
      if (SHIBYTE(v182.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v182.__r_.__value_.__l.__data_);
      }
      int v39 = 1;
      goto LABEL_208;
    }
LABEL_405:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v58 == -1) {
    goto LABEL_405;
  }
  uint64_t v61 = __s1[1];
  if (__s1[1] >= v58) {
    size_t v63 = v58;
  }
  else {
    size_t v63 = __s1[1];
  }
  if (!memcmp((const void *)__s1[0], v57, v63)) {
    goto LABEL_116;
  }
LABEL_117:
  v64 = (const void *)*MEMORY[0x263F260C0];
  size_t v65 = strlen((const char *)*MEMORY[0x263F260C0]);
  size_t v66 = v65;
  if ((v60 & 0x80) != 0)
  {
    if (v65 != -1)
    {
      uint64_t v67 = __s1[1];
      int v39 = v39;
      if (__s1[1] >= v65) {
        size_t v69 = v65;
      }
      else {
        size_t v69 = __s1[1];
      }
      if (!memcmp((const void *)__s1[0], v64, v69)) {
        goto LABEL_129;
      }
      goto LABEL_137;
    }
LABEL_406:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v65 == -1) {
    goto LABEL_406;
  }
  uint64_t v67 = v60;
  int v39 = v39;
  if (v60 >= v65) {
    size_t v68 = v65;
  }
  else {
    size_t v68 = v60;
  }
  if (memcmp(__s1, v64, v68)) {
    goto LABEL_137;
  }
LABEL_129:
  if (v67 == v66 && !v39) {
    goto LABEL_131;
  }
LABEL_137:
  v70 = (const void *)*MEMORY[0x263F26020];
  size_t v71 = strlen((const char *)*MEMORY[0x263F26020]);
  size_t v72 = v71;
  if ((v60 & 0x80) == 0)
  {
    if (v71 != -1)
    {
      uint64_t v73 = v60;
      if (v60 >= v71) {
        size_t v74 = v71;
      }
      else {
        size_t v74 = v60;
      }
      if (memcmp(__s1, v70, v74)) {
        goto LABEL_182;
      }
      goto LABEL_149;
    }
LABEL_407:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v71 == -1) {
    goto LABEL_407;
  }
  uint64_t v73 = __s1[1];
  if (__s1[1] >= v71) {
    size_t v75 = v71;
  }
  else {
    size_t v75 = __s1[1];
  }
  if (memcmp((const void *)__s1[0], v70, v75))
  {
LABEL_182:
    if ((v60 & 0x80u) == 0) {
      uint64_t v93 = v60;
    }
    else {
      uint64_t v93 = __s1[1];
    }
    if (!v93) {
      std::map<std::string,xpc::dict>::insert_or_assign[abi:ne180100]<xpc::dict>((void **)&buf, (const std::string::value_type **)__p, &v185);
    }
    goto LABEL_208;
  }
LABEL_149:
  if (v73 != v72) {
    goto LABEL_182;
  }
  std::map<std::string,xpc::dict>::insert_or_assign[abi:ne180100]<xpc::dict>((void **)&buf, (const std::string::value_type **)__p, &v185);
  xpc_object_t v76 = xpc_int64_create(0);
  if (!v76) {
    xpc_object_t v76 = xpc_null_create();
  }
  xpc_dictionary_set_value(xdict, "ReportProcessStatus", v76);
  xpc_object_t v77 = xpc_null_create();
  xpc_release(v76);
  xpc_release(v77);
  HIBYTE(object[2]) = 9;
  strcpy((char *)object, "EventInfo");
  v78 = (char *)*((void *)&buf + 1);
  uint64_t v79 = (uint64_t *)&buf + 1;
  if (!*((void *)&buf + 1)) {
    goto LABEL_202;
  }
  v80 = (char *)&buf + 8;
  while (2)
  {
    while (2)
    {
      int v81 = v78[55];
      if (v81 >= 0) {
        uint64_t v82 = v78 + 32;
      }
      else {
        uint64_t v82 = (const void *)*((void *)v78 + 4);
      }
      if (v81 >= 0) {
        unint64_t v83 = v78[55];
      }
      else {
        unint64_t v83 = *((void *)v78 + 5);
      }
      if (v83 >= 9) {
        size_t v84 = 9;
      }
      else {
        size_t v84 = v83;
      }
      int v85 = memcmp(v82, object, v84);
      if (v85)
      {
        if ((v85 & 0x80000000) == 0) {
          break;
        }
        goto LABEL_154;
      }
      if (v83 < 9)
      {
LABEL_154:
        v78 = (char *)*((void *)v78 + 1);
        if (!v78) {
          goto LABEL_169;
        }
        continue;
      }
      break;
    }
    v80 = v78;
    v78 = *(char **)v78;
    if (v78) {
      continue;
    }
    break;
  }
LABEL_169:
  uint64_t v79 = (uint64_t *)&buf + 1;
  if (v80 == (char *)&buf + 8) {
    goto LABEL_202;
  }
  int v86 = v80[55];
  if (v86 >= 0) {
    BOOL v87 = v80 + 32;
  }
  else {
    BOOL v87 = (const void *)*((void *)v80 + 4);
  }
  if (v86 >= 0) {
    unint64_t v88 = v80[55];
  }
  else {
    unint64_t v88 = *((void *)v80 + 5);
  }
  if (v88 >= 9) {
    size_t v89 = 9;
  }
  else {
    size_t v89 = v88;
  }
  int v90 = memcmp(object, v87, v89);
  if (v90)
  {
    if ((v90 & 0x80000000) == 0) {
      goto LABEL_181;
    }
LABEL_201:
    uint64_t v79 = (uint64_t *)v80;
LABEL_202:
    v181.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
    *(void *)v200 = 0xAAAAAAAAAAAAAAAALL;
    v98 = std::__tree<std::__value_type<std::string,xpc::dict>,std::__map_value_compare<std::string,std::__value_type<std::string,xpc::dict>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xpc::dict>>>::__find_equal<std::string>((uint64_t **)&buf, v79, (uint64_t **)&v181, (uint64_t **)v200, (const void **)object);
    if (!*v98)
    {
      v99 = v98;
      v100 = operator new(0x40uLL);
      v100[2] = *(_OWORD *)object;
      xpc_object_t v101 = object[2];
      memset(object, 0, sizeof(object));
      *((void *)v100 + 6) = v101;
      *((void *)v100 + 7) = xdict;
      xpc_object_t xdict = xpc_null_create();
      std::string::size_type v102 = v181.__r_.__value_.__r.__words[0];
      *(void *)v100 = 0;
      *((void *)v100 + 1) = 0;
      *((void *)v100 + 2) = v102;
      uint64_t *v99 = (uint64_t)v100;
      if (*(void *)buf)
      {
        *(void *)&long long buf = *(void *)buf;
        v100 = (_OWORD *)*v99;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)&buf + 1), (uint64_t *)v100);
      ++v202;
    }
    xpc_object_t v91 = xdict;
  }
  else
  {
    if (v88 > 9) {
      goto LABEL_201;
    }
LABEL_181:
    xpc_object_t v91 = xpc_null_create();
    v92 = (void *)*((void *)v80 + 7);
    *((void *)v80 + 7) = xdict;
    xpc_release(v92);
  }
  int v39 = 0;
  xpc_object_t xdict = v91;
LABEL_208:
  uint64_t v103 = *(NSObject **)(v180 + 40);
  if (os_log_type_enabled(v103, OS_LOG_TYPE_DEFAULT))
  {
    v104 = &v187;
    if ((v187.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      v104 = (std::string *)v187.__r_.__value_.__r.__words[0];
    }
    v105 = __s1;
    if (__s1[2] < 0) {
      v105 = (uint64_t *)__s1[0];
    }
    LODWORD(object[0]) = 136315650;
    *(xpc_object_t *)((char *)object + 4) = v104;
    WORD2(object[1]) = 2080;
    *(xpc_object_t *)((char *)&object[1] + 6) = v105;
    HIWORD(object[2]) = 1024;
    LODWORD(v189) = v39;
    _os_log_impl(&dword_26368A000, v103, OS_LOG_TYPE_DEFAULT, "#I Updating AnalyticsData for event[%s]: command=%s, status=%d", (uint8_t *)object, 0x1Cu);
  }
  if (v39 == 1)
  {
    int v106 = std::__tree<std::__value_type<std::string,std::map<std::string,xpc::dict>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,xpc::dict>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,xpc::dict>>>>::find<std::string>((uint64_t)v177, (const void **)&v187.__r_.__value_.__l.__data_);
    if (v178 != v106)
    {
      v107 = v106;
      v108 = (uint64_t *)v106[1];
      if (v108)
      {
        do
        {
          v109 = v108;
          v108 = (uint64_t *)*v108;
        }
        while (v108);
      }
      else
      {
        v130 = v106;
        do
        {
          v109 = (uint64_t *)v130[2];
          BOOL v37 = *v109 == (void)v130;
          v130 = v109;
        }
        while (!v37);
      }
      if (*v177 == v106) {
        *v177 = v109;
      }
      v131 = *(uint64_t **)(v180 + 112);
      --*(void *)(v180 + 120);
      std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v131, v107);
      std::__tree<std::__value_type<std::string,xpc::dict>,std::__map_value_compare<std::string,std::__value_type<std::string,xpc::dict>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xpc::dict>>>::destroy((char *)v107[8]);
      if (*((char *)v107 + 55) < 0) {
        operator delete((void *)v107[4]);
      }
      operator delete(v107);
    }
    goto LABEL_338;
  }
  uint64_t v110 = v202;
  if (!v202) {
    goto LABEL_338;
  }
  v111 = v178;
  uint64_t v112 = *v178;
  if (!*v178)
  {
    v121 = v178;
    if (*v177 == v178)
    {
      uint64_t v132 = 0;
      long long v133 = v178;
      v121 = v178;
      goto LABEL_321;
    }
    goto LABEL_276;
  }
  if ((v187.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v113 = &v187;
  }
  else {
    v113 = (std::string *)v187.__r_.__value_.__r.__words[0];
  }
  if ((v187.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v114 = HIBYTE(v187.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v114 = v187.__r_.__value_.__l.__size_;
  }
  uint64_t v115 = *v178;
  while (2)
  {
    while (1)
    {
      int v116 = *(char *)(v115 + 55);
      long long v117 = v116 >= 0 ? (const void *)(v115 + 32) : *(const void **)(v115 + 32);
      std::string::size_type v118 = v116 >= 0 ? *(unsigned __int8 *)(v115 + 55) : *(void *)(v115 + 40);
      size_t v119 = v114 >= v118 ? v118 : v114;
      int v120 = memcmp(v117, v113, v119);
      if (!v120) {
        break;
      }
      if (v120 < 0) {
        goto LABEL_230;
      }
LABEL_228:
      v111 = (uint64_t *)v115;
      uint64_t v115 = *(void *)v115;
      if (!v115) {
        goto LABEL_245;
      }
    }
    if (v118 >= v114) {
      goto LABEL_228;
    }
LABEL_230:
    uint64_t v115 = *(void *)(v115 + 8);
    if (v115) {
      continue;
    }
    break;
  }
LABEL_245:
  v121 = v178;
  if (v111 != v178)
  {
    int v122 = *((char *)v111 + 55);
    if (v122 >= 0) {
      long long v123 = v111 + 4;
    }
    else {
      long long v123 = (const void *)v111[4];
    }
    if (v122 >= 0) {
      size_t v124 = *((unsigned __int8 *)v111 + 55);
    }
    else {
      size_t v124 = v111[5];
    }
    if (v124 >= v114) {
      size_t v125 = v114;
    }
    else {
      size_t v125 = v124;
    }
    int v126 = memcmp(v113, v123, v125);
    if (v126)
    {
      if ((v126 & 0x80000000) == 0)
      {
LABEL_257:
        v127 = v111 + 8;
        std::__tree<std::__value_type<std::string,xpc::dict>,std::__map_value_compare<std::string,std::__value_type<std::string,xpc::dict>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xpc::dict>>>::destroy((char *)v111[8]);
        uint64_t v128 = *((void *)&buf + 1);
        v111[7] = buf;
        v111[8] = v128;
        uint64_t v129 = v202;
        v111[9] = v202;
        if (v129)
        {
          *(void *)(v128 + 16) = v127;
          *(void *)&long long buf = (char *)&buf + 8;
          *((void *)&buf + 1) = 0;
          uint64_t v202 = 0;
        }
        else
        {
          v111[7] = (uint64_t)v127;
        }
        goto LABEL_338;
      }
    }
    else if (v114 >= v124)
    {
      goto LABEL_257;
    }
    v121 = v111;
  }
  uint64_t v132 = *v121;
  if (*v177 == v121)
  {
    long long v133 = v121;
    goto LABEL_321;
  }
  if (!v132)
  {
LABEL_276:
    long long v133 = v121;
    do
    {
      long long v135 = v133;
      long long v133 = (uint64_t *)v133[2];
    }
    while ((uint64_t *)*v133 == v135);
    uint64_t v132 = 0;
    goto LABEL_279;
  }
  long long v134 = (uint64_t *)*v121;
  do
  {
    long long v133 = v134;
    long long v134 = (uint64_t *)v134[1];
  }
  while (v134);
LABEL_279:
  int v136 = *((char *)v133 + 55);
  if (v136 >= 0) {
    long long v137 = v133 + 4;
  }
  else {
    long long v137 = (const void *)v133[4];
  }
  if (v136 >= 0) {
    size_t v138 = *((unsigned __int8 *)v133 + 55);
  }
  else {
    size_t v138 = v133[5];
  }
  char v139 = HIBYTE(v187.__r_.__value_.__r.__words[2]);
  if ((v187.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    long long v140 = &v187;
  }
  else {
    long long v140 = (std::string *)v187.__r_.__value_.__r.__words[0];
  }
  if ((v187.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v141 = HIBYTE(v187.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v141 = v187.__r_.__value_.__l.__size_;
  }
  if (v141 >= v138) {
    size_t v142 = v138;
  }
  else {
    size_t v142 = v141;
  }
  int v143 = memcmp(v137, v140, v142);
  if (v143)
  {
    if (v143 < 0) {
      goto LABEL_321;
    }
LABEL_298:
    if (!v112)
    {
      long long v133 = v178;
      goto LABEL_329;
    }
    while (1)
    {
      long long v133 = (uint64_t *)v112;
      size_t v144 = *(unsigned __int8 *)(v112 + 55);
      size_t v145 = *(void *)(v112 + 40);
      if ((v144 & 0x80u) == 0) {
        uint64_t v146 = (const void *)(v112 + 32);
      }
      else {
        uint64_t v146 = *(const void **)(v112 + 32);
      }
      if ((v144 & 0x80u) == 0) {
        size_t v147 = v144;
      }
      else {
        size_t v147 = v145;
      }
      if (v147 >= v141) {
        size_t v148 = v141;
      }
      else {
        size_t v148 = v147;
      }
      int v149 = memcmp(v140, v146, v148);
      if (v149)
      {
        if ((v149 & 0x80000000) == 0) {
          goto LABEL_314;
        }
      }
      else if (v141 >= v147)
      {
LABEL_314:
        int v150 = memcmp(v146, v140, v148);
        if (v150)
        {
          if ((v150 & 0x80000000) == 0) {
            goto LABEL_338;
          }
        }
        else if (v147 >= v141)
        {
          goto LABEL_338;
        }
        uint64_t v112 = v133[1];
        if (!v112)
        {
          v178 = v133 + 1;
          goto LABEL_329;
        }
        continue;
      }
      uint64_t v112 = *v133;
      if (!*v133)
      {
        v178 = v133;
        goto LABEL_329;
      }
    }
  }
  if (v138 >= v141) {
    goto LABEL_298;
  }
LABEL_321:
  v151 = v133 + 1;
  if (!v132) {
    v151 = v121;
  }
  v178 = v151;
  if (!*v151)
  {
    if (!v132) {
      long long v133 = v121;
    }
    char v139 = HIBYTE(v187.__r_.__value_.__r.__words[2]);
LABEL_329:
    v152 = (uint64_t *)operator new(0x50uLL);
    v153 = (std::string *)(v152 + 4);
    if (v139 < 0)
    {
      std::string::__init_copy_ctor_external(v153, v187.__r_.__value_.__l.__data_, v187.__r_.__value_.__l.__size_);
      uint64_t v110 = v202;
    }
    else
    {
      *(_OWORD *)&v153->__r_.__value_.__l.__data_ = *(_OWORD *)&v187.__r_.__value_.__l.__data_;
      v152[6] = v187.__r_.__value_.__r.__words[2];
    }
    long long v154 = buf;
    v152[8] = *((void *)&buf + 1);
    v155 = v152 + 8;
    v152[7] = v154;
    v152[9] = v110;
    if (v110)
    {
      *(void *)(*((void *)&v154 + 1) + 16) = v155;
      *(void *)&long long buf = (char *)&buf + 8;
      *((void *)&buf + 1) = 0;
      uint64_t v202 = 0;
    }
    else
    {
      v152[7] = (uint64_t)v155;
    }
    uint64_t *v152 = 0;
    v152[1] = 0;
    v152[2] = (uint64_t)v133;
    uint64_t *v178 = (uint64_t)v152;
    v156 = (uint64_t *)**v177;
    if (v156)
    {
      *v177 = v156;
      v152 = (uint64_t *)*v178;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v180 + 112), v152);
    ++*(void *)(v180 + 120);
  }
LABEL_338:
  v157 = *(NSObject **)(v180 + 40);
  if (!os_log_type_enabled(v157, OS_LOG_TYPE_DEBUG))
  {
    if (SHIBYTE(__s1[2]) < 0) {
      goto LABEL_340;
    }
    goto LABEL_341;
  }
  AnalyticsHelper::describeAnalyticsCache((AnalyticsHelper *)v180, (uint64_t)object);
  if ((v198 & 0x10) != 0)
  {
    v160 = v197;
    if (v197 < v194)
    {
      v197 = v194;
      v160 = v194;
    }
    v161 = v193;
  }
  else
  {
    if ((v198 & 8) == 0)
    {
      int64_t v158 = 0;
      std::string::size_type v159 = 0;
      goto LABEL_359;
    }
    v161 = v190;
    v160 = v192;
  }
  int64_t v158 = (char *)v160 - (char *)v161;
  if (v158)
  {
    v162 = &v196;
    if ((v196.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      v162 = (std::string *)v196.__r_.__value_.__r.__words[0];
    }
    std::string::size_type v159 = (char *)v161 - (char *)v162;
  }
  else
  {
    std::string::size_type v159 = 0;
  }
LABEL_359:
  std::string v181 = v196;
  memset(&v196, 0, sizeof(v196));
  std::string::size_type v163 = v159 + v158;
  if (SHIBYTE(v181.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::size_type v164 = v181.__r_.__value_.__l.__size_;
    if (v181.__r_.__value_.__l.__size_ >= v163)
    {
      v165 = (std::string *)v181.__r_.__value_.__r.__words[0];
      v181.__r_.__value_.__l.__size_ = v163;
      goto LABEL_365;
    }
LABEL_363:
    std::string::append(&v181, v163 - v164, 0);
  }
  else
  {
    std::string::size_type v164 = HIBYTE(v181.__r_.__value_.__r.__words[2]);
    if (v163 > HIBYTE(v181.__r_.__value_.__r.__words[2])) {
      goto LABEL_363;
    }
    *((unsigned char *)&v181.__r_.__value_.__s + 23) = v163 & 0x7F;
    v165 = &v181;
LABEL_365:
    v165->__r_.__value_.__s.__data_[v163] = 0;
  }
  if (SHIBYTE(v181.__r_.__value_.__r.__words[2]) < 0)
  {
    if (v159 == -1)
    {
      v181.__r_.__value_.__l.__size_ = 0;
      *v181.__r_.__value_.__l.__data_ = 0;
      goto LABEL_372;
    }
LABEL_371:
    std::string::__erase_external_with_move(&v181, 0, v159);
  }
  else
  {
    if (v159 != -1) {
      goto LABEL_371;
    }
    *((unsigned char *)&v181.__r_.__value_.__s + 23) = 0;
    v181.__r_.__value_.__s.__data_[0] = 0;
  }
LABEL_372:
  v166 = &v196;
  v197 = 0;
  std::string::size_type v167 = HIBYTE(v196.__r_.__value_.__r.__words[2]);
  if ((v196.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v168 = &v196;
  }
  else {
    v168 = (std::string *)v196.__r_.__value_.__r.__words[0];
  }
  if ((v196.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v169 = HIBYTE(v196.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v169 = v196.__r_.__value_.__l.__size_;
  }
  if ((v198 & 8) != 0)
  {
    v190 = v168;
    v191 = v168;
    v197 = (std::string *)((char *)v168 + v169);
    v192 = (std::string *)((char *)v168 + v169);
  }
  if ((v198 & 0x10) != 0)
  {
    v197 = (std::string *)((char *)v168 + v169);
    if ((*((unsigned char *)&v196.__r_.__value_.__s + 23) & 0x80) != 0)
    {
      std::string::size_type v170 = (v196.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
      if (v196.__r_.__value_.__l.__size_ < v170)
      {
        std::string::size_type v167 = v196.__r_.__value_.__l.__size_;
        goto LABEL_385;
      }
      v196.__r_.__value_.__l.__size_ = (v196.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
      v166 = (std::string *)v196.__r_.__value_.__r.__words[0];
LABEL_388:
      v166->__r_.__value_.__s.__data_[v170] = 0;
    }
    else
    {
      std::string::size_type v170 = 22;
      if (HIBYTE(v196.__r_.__value_.__r.__words[2]) > 0x15u)
      {
        *((unsigned char *)&v196.__r_.__value_.__s + 23) = 22;
        goto LABEL_388;
      }
LABEL_385:
      std::string::append(&v196, v170 - v167, 0);
    }
    std::string::size_type v171 = HIBYTE(v196.__r_.__value_.__r.__words[2]);
    if ((v196.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v171 = v196.__r_.__value_.__l.__size_;
    }
    v193 = v168;
    v194 = v168;
    v195 = (char *)v168 + v171;
    if ((v198 & 3) != 0)
    {
      if (v169 >> 31)
      {
        uint64_t v172 = ((v169 - 0x80000000) * (unsigned __int128)0x200000005uLL) >> 64;
        unint64_t v173 = 0x7FFFFFFF * ((v172 + ((v169 - 0x80000000 - v172) >> 1)) >> 30);
        v168 = (std::string *)((char *)v168 + v173 + 0x7FFFFFFF);
        std::string::size_type v169 = v169 - v173 - 0x7FFFFFFF;
        v194 = v168;
      }
      if (v169) {
        v194 = (std::string *)((char *)v168 + v169);
      }
    }
  }
  v174 = &v181;
  if ((v181.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    v174 = (std::string *)v181.__r_.__value_.__r.__words[0];
  }
  *(_DWORD *)v200 = 136315138;
  *(void *)&v200[4] = v174;
  _os_log_debug_impl(&dword_26368A000, v157, OS_LOG_TYPE_DEBUG, "#D %s", v200, 0xCu);
  if (SHIBYTE(v181.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v181.__r_.__value_.__l.__data_);
  }
  object[0] = *(xpc_object_t *)MEMORY[0x263F8C2B8];
  v175 = *(void **)(MEMORY[0x263F8C2B8] + 72);
  *(xpc_object_t *)((char *)object + *((void *)object[0] - 3)) = *(xpc_object_t *)(MEMORY[0x263F8C2B8] + 64);
  object[2] = v175;
  uint64_t v189 = MEMORY[0x263F8C318] + 16;
  if (SHIBYTE(v196.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v196.__r_.__value_.__l.__data_);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x263E69630](&v199);
  if (SHIBYTE(__s1[2]) < 0) {
LABEL_340:
  }
    operator delete((void *)__s1[0]);
LABEL_341:
  xpc_release(v185);
  std::__tree<std::__value_type<std::string,xpc::dict>,std::__map_value_compare<std::string,std::__value_type<std::string,xpc::dict>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xpc::dict>>>::destroy(*((char **)&buf + 1));
  xpc_release(xdict);
LABEL_342:
  if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v187.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
LABEL_346:
    operator delete(v187.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(__p[0]);
  if (SHIBYTE(v187.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_346;
  }
}

void sub_2636991FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, xpc_object_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,xpc_object_t object,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,xpc_object_t a48)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void xpc::dict::object_proxy::operator=(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  xpc_object_t value = xpc_dictionary_get_value(**(xpc_object_t **)a2, *(const char **)(a2 + 8));
  xpc_object_t v6 = value;
  if (value)
  {
    xpc_retain(value);
  }
  else
  {
    xpc_object_t v6 = xpc_null_create();
    if (!v6)
    {
      xpc_object_t v7 = xpc_null_create();
      xpc_object_t v6 = 0;
      goto LABEL_5;
    }
  }
  xpc_retain(v6);
  xpc_object_t v7 = v6;
LABEL_5:
  xpc_dictionary_set_value(**(xpc_object_t **)a1, *(const char **)(a1 + 8), v7);
  *a3 = v7;
  xpc_object_t v8 = xpc_null_create();
  xpc_release(v8);
  xpc_release(v6);
}

void std::map<std::string,xpc::dict>::insert_or_assign[abi:ne180100]<xpc::dict>(void **a1, const std::string::value_type **a2, xpc_object_t *a3)
{
  xpc_object_t v6 = (uint64_t *)(a1 + 1);
  xpc_object_t v7 = a1[1];
  if (!v7) {
    goto LABEL_41;
  }
  int v8 = *((char *)a2 + 23);
  if (v8 >= 0) {
    long long v9 = (const std::string::value_type *)a2;
  }
  else {
    long long v9 = *a2;
  }
  if (v8 >= 0) {
    size_t v10 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v10 = (size_t)a2[1];
  }
  uint64_t v11 = (uint64_t *)(a1 + 1);
  do
  {
    while (1)
    {
      int v12 = *((char *)v7 + 55);
      std::string::size_type v13 = v12 >= 0 ? v7 + 4 : (uint64_t *)v7[4];
      size_t v14 = v12 >= 0 ? *((unsigned __int8 *)v7 + 55) : v7[5];
      size_t v15 = v10 >= v14 ? v14 : v10;
      int v16 = memcmp(v13, v9, v15);
      if (v16) {
        break;
      }
      if (v14 < v10) {
        goto LABEL_11;
      }
LABEL_9:
      uint64_t v11 = v7;
      xpc_object_t v7 = (uint64_t *)*v7;
      if (!v7) {
        goto LABEL_26;
      }
    }
    if ((v16 & 0x80000000) == 0) {
      goto LABEL_9;
    }
LABEL_11:
    xpc_object_t v7 = (uint64_t *)v7[1];
  }
  while (v7);
LABEL_26:
  if (v11 == v6) {
    goto LABEL_40;
  }
  int v17 = *((char *)v11 + 55);
  if (v17 >= 0) {
    uint64_t v18 = v11 + 4;
  }
  else {
    uint64_t v18 = (void *)v11[4];
  }
  if (v17 >= 0) {
    size_t v19 = *((unsigned __int8 *)v11 + 55);
  }
  else {
    size_t v19 = v11[5];
  }
  if (v19 >= v10) {
    size_t v20 = v10;
  }
  else {
    size_t v20 = v19;
  }
  int v21 = memcmp(v9, v18, v20);
  if (v21)
  {
    if ((v21 & 0x80000000) == 0) {
      goto LABEL_38;
    }
LABEL_40:
    xpc_object_t v6 = v11;
LABEL_41:
    int v30 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
    uint64_t v31 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
    int v24 = std::__tree<std::__value_type<std::string,xpc::dict>,std::__map_value_compare<std::string,std::__value_type<std::string,xpc::dict>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xpc::dict>>>::__find_equal<std::string>(a1, v6, &v31, &v30, (const void **)a2);
    if (!*v24)
    {
      size_t v25 = (uint64_t **)v24;
      unint64_t v26 = (uint64_t *)operator new(0x40uLL);
      uint64_t v27 = (std::string *)(v26 + 4);
      if (*((char *)a2 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v27, *a2, (std::string::size_type)a2[1]);
      }
      else
      {
        *(_OWORD *)&v27->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
        v26[6] = (uint64_t)a2[2];
      }
      v26[7] = (uint64_t)*a3;
      *a3 = xpc_null_create();
      uint64_t v28 = v31;
      *unint64_t v26 = 0;
      v26[1] = 0;
      v26[2] = (uint64_t)v28;
      char *v25 = v26;
      uint64_t v29 = (void *)**a1;
      if (v29)
      {
        *a1 = v29;
        unint64_t v26 = *v25;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v26);
      a1[2] = (void *)((char *)a1[2] + 1);
    }
  }
  else
  {
    if (v10 < v19) {
      goto LABEL_40;
    }
LABEL_38:
    uint64_t v22 = (uint64_t)*a3;
    *a3 = xpc_null_create();
    uint64_t v23 = (void *)v11[7];
    v11[7] = v22;
    xpc_release(v23);
  }
}

void sub_263699660(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void AnalyticsHelper::submitEvent(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v43 = *MEMORY[0x263EF8340];
  if (*(char *)(a2 + 23) < 0)
  {
    if (*(void *)(a2 + 8)) {
      BOOL v7 = a3[2] == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7)
    {
LABEL_12:
      xpc_object_t object = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
      xpc_object_t v8 = xpc_dictionary_create(0, 0, 0);
      xpc_object_t v9 = v8;
      if (v8)
      {
        xpc_object_t object = v8;
      }
      else
      {
        xpc_object_t v9 = xpc_null_create();
        xpc_object_t object = v9;
        if (!v9)
        {
          xpc_object_t v10 = xpc_null_create();
          xpc_object_t v9 = 0;
          goto LABEL_19;
        }
      }
      if (MEMORY[0x263E6A240](v9) == MEMORY[0x263EF8708])
      {
        xpc_retain(v9);
        goto LABEL_20;
      }
      xpc_object_t v10 = xpc_null_create();
LABEL_19:
      xpc_object_t object = v10;
LABEL_20:
      xpc_release(v9);
      AnalyticsHelper::append(v11, (uint64_t)&object, a3);
      int v12 = (const void *)*MEMORY[0x263F265C8];
      size_t v13 = strlen((const char *)*MEMORY[0x263F265C8]);
      if (v13 > 0x7FFFFFFFFFFFFFF7) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      size_t v14 = (const void *)v13;
      if (v13 >= 0x17)
      {
        uint64_t v16 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v13 | 7) != 0x17) {
          uint64_t v16 = v13 | 7;
        }
        uint64_t v17 = v16 + 1;
        size_t v15 = (const void **)operator new(v16 + 1);
        __dst[1] = v14;
        __dst[2] = (const void *)(v17 | 0x8000000000000000);
        __dst[0] = v15;
      }
      else
      {
        HIBYTE(__dst[2]) = v13;
        size_t v15 = __dst;
        if (!v13) {
          goto LABEL_28;
        }
      }
      memmove(v15, v12, (size_t)v14);
LABEL_28:
      *((unsigned char *)v14 + (void)v15) = 0;
      uint64_t v18 = std::__tree<std::__value_type<std::string,std::map<std::string,xpc::dict>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,xpc::dict>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,xpc::dict>>>>::find<std::string>(a1 + 104, __dst);
      size_t v19 = v18;
      if (SHIBYTE(__dst[2]) < 0)
      {
        operator delete((void *)__dst[0]);
        if ((uint64_t *)(a1 + 112) == v19)
        {
LABEL_30:
          size_t v20 = *(NSObject **)(a1 + 40);
          if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
          {
LABEL_58:
            uint64_t v28 = (const std::string::value_type *)a2;
            if (*(char *)(a2 + 23) < 0) {
              uint64_t v28 = *(const std::string::value_type **)a2;
            }
            uint64_t v29 = (char *)MEMORY[0x263E6A1A0](object);
            memset(__dst, 170, sizeof(__dst));
            size_t v30 = strlen(v29);
            if (v30 > 0x7FFFFFFFFFFFFFF7) {
              std::string::__throw_length_error[abi:ne180100]();
            }
            uint64_t v31 = (const void *)v30;
            if (v30 >= 0x17)
            {
              uint64_t v33 = (v30 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v30 | 7) != 0x17) {
                uint64_t v33 = v30 | 7;
              }
              uint64_t v34 = v33 + 1;
              unint64_t v32 = (const void **)operator new(v33 + 1);
              __dst[1] = v31;
              __dst[2] = (const void *)(v34 | 0x8000000000000000);
              __dst[0] = v32;
            }
            else
            {
              HIBYTE(__dst[2]) = v30;
              unint64_t v32 = __dst;
              if (!v30) {
                goto LABEL_68;
              }
            }
            memcpy(v32, v29, (size_t)v31);
LABEL_68:
            *((unsigned char *)v31 + (void)v32) = 0;
            free(v29);
            uint64_t v35 = __dst;
            if (SHIBYTE(__dst[2]) < 0) {
              uint64_t v35 = (const void **)__dst[0];
            }
            *(_DWORD *)long long buf = 136315394;
            *(void *)&uint8_t buf[4] = v28;
            *(_WORD *)&buf[12] = 2080;
            *(void *)&buf[14] = v35;
            _os_log_debug_impl(&dword_26368A000, v20, OS_LOG_TYPE_DEBUG, "#D Submitting CoreAnalytics event[%s] - %s", buf, 0x16u);
            if (SHIBYTE(__dst[2]) < 0) {
              operator delete((void *)__dst[0]);
            }
          }
LABEL_48:
          if (*(char *)(a2 + 23) < 0) {
            std::string::__init_copy_ctor_external(&v37, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
          }
          else {
            std::string v37 = *(std::string *)a2;
          }
          xpc_object_t v36 = object;
          if (object) {
            xpc_retain(object);
          }
          else {
            xpc_object_t v36 = xpc_null_create();
          }
          metric::sendCoreAnalyticsEvent((const void **)&v37.__r_.__value_.__l.__data_, &v36);
          xpc_release(v36);
          xpc_object_t v36 = 0;
          if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v37.__r_.__value_.__l.__data_);
          }
          xpc_release(object);
          return;
        }
      }
      else if ((uint64_t *)(a1 + 112) == v18)
      {
        goto LABEL_30;
      }
      *(void *)&buf[8] = 0;
      *(void *)&uint8_t buf[16] = 0;
      *(void *)long long buf = &buf[8];
      int v21 = (const void **)v19[7];
      uint64_t v22 = (const void ***)(v19 + 8);
      if (v21 == (const void **)(v19 + 8))
      {
LABEL_47:
        AnalyticsHelper::append((uint64_t)v18, (uint64_t)&object, buf);
        std::__tree<std::__value_type<std::string,xpc::dict>,std::__map_value_compare<std::string,std::__value_type<std::string,xpc::dict>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xpc::dict>>>::destroy(*(char **)&buf[8]);
        size_t v20 = *(NSObject **)(a1 + 40);
        if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG)) {
          goto LABEL_58;
        }
        goto LABEL_48;
      }
      while (1)
      {
        xpc_object_t v40 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
        xpc_object_t v41 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
        uint64_t v18 = std::__tree<std::__value_type<std::string,xpc::dict>,std::__map_value_compare<std::string,std::__value_type<std::string,xpc::dict>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xpc::dict>>>::__find_equal<std::string>((uint64_t **)buf, (uint64_t *)&buf[8], &v41, &v40, v21 + 4);
        if (*v18)
        {
          uint64_t v23 = (const void **)v21[1];
          if (v23) {
            goto LABEL_42;
          }
        }
        else
        {
          int v24 = (uint64_t **)v18;
          memset(__dst, 170, sizeof(__dst));
          std::__tree<std::__value_type<std::string,xpc::dict>,std::__map_value_compare<std::string,std::__value_type<std::string,xpc::dict>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xpc::dict>>>::__construct_node<std::pair<std::string const,xpc::dict> const&>(__dst, (uint64_t)buf, (uint64_t)(v21 + 4));
          size_t v25 = v41;
          unint64_t v26 = (uint64_t *)__dst[0];
          *(void *)__dst[0] = 0;
          v26[1] = 0;
          v26[2] = (uint64_t)v25;
          *int v24 = v26;
          if (**(void **)buf)
          {
            *(void *)long long buf = **(void **)buf;
            unint64_t v26 = *v24;
          }
          uint64_t v18 = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)&buf[8], v26);
          ++*(void *)&buf[16];
          uint64_t v23 = (const void **)v21[1];
          if (v23)
          {
            do
            {
LABEL_42:
              uint64_t v27 = (const void ***)v23;
              uint64_t v23 = (const void **)*v23;
            }
            while (v23);
            goto LABEL_35;
          }
        }
        do
        {
          uint64_t v27 = (const void ***)v21[2];
          BOOL v6 = *v27 == v21;
          int v21 = (const void **)v27;
        }
        while (!v6);
LABEL_35:
        int v21 = (const void **)v27;
        if (v27 == v22) {
          goto LABEL_47;
        }
      }
    }
  }
  else
  {
    if (*(unsigned char *)(a2 + 23)) {
      BOOL v6 = a3[2] == 0;
    }
    else {
      BOOL v6 = 1;
    }
    if (!v6) {
      goto LABEL_12;
    }
  }
}

void sub_263699B30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, xpc_object_t object, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
}

void AnalyticsHelper::append(uint64_t a1, uint64_t a2, void *a3)
{
  long long v3 = a3 + 1;
  uint64_t v4 = (void *)*a3;
  if ((void *)*a3 != a3 + 1)
  {
    do
    {
      memset(&v11, 170, sizeof(v11));
      if (*((char *)v4 + 55) < 0)
      {
        std::string::__init_copy_ctor_external(&v11, (const std::string::value_type *)v4[4], v4[5]);
        xpc_object_t v6 = (xpc_object_t)v4[7];
        if (v6)
        {
LABEL_6:
          xpc_retain(v6);
          goto LABEL_9;
        }
      }
      else
      {
        std::string v11 = *(std::string *)(v4 + 4);
        xpc_object_t v6 = (xpc_object_t)v4[7];
        if (v6) {
          goto LABEL_6;
        }
      }
      xpc_object_t v6 = xpc_null_create();
LABEL_9:
      applier[0] = MEMORY[0x263EF8330];
      applier[1] = 0x40000000;
      applier[2] = ___ZN15AnalyticsHelper6appendERN3xpc4dictERNSt3__13mapINS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEES1_NS3_4lessISA_EENS8_INS3_4pairIKSA_S1_EEEEEE_block_invoke;
      applier[3] = &__block_descriptor_tmp_13;
      applier[4] = a2;
      xpc_dictionary_apply(v6, applier);
      xpc_release(v6);
      if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v11.__r_.__value_.__l.__data_);
        BOOL v7 = (void *)v4[1];
        if (v7)
        {
          do
          {
LABEL_13:
            xpc_object_t v8 = v7;
            BOOL v7 = (void *)*v7;
          }
          while (v7);
          goto LABEL_3;
        }
      }
      else
      {
        BOOL v7 = (void *)v4[1];
        if (v7) {
          goto LABEL_13;
        }
      }
      do
      {
        xpc_object_t v8 = (void *)v4[2];
        BOOL v9 = *v8 == (void)v4;
        uint64_t v4 = v8;
      }
      while (!v9);
LABEL_3:
      uint64_t v4 = v8;
    }
    while (v8 != v3);
  }
}

void sub_263699D30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  xpc_release(v20);
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t ___ZN15AnalyticsHelper6appendERN3xpc4dictERNSt3__13mapINS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEES1_NS3_4lessISA_EENS8_INS3_4pairIKSA_S1_EEEEEE_block_invoke(uint64_t a1, char *__s, void *a3)
{
  memset(__dst, 170, sizeof(__dst));
  size_t v6 = strlen(__s);
  if (v6 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  BOOL v7 = (void *)v6;
  if (v6 >= 0x17)
  {
    uint64_t v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17) {
      uint64_t v9 = v6 | 7;
    }
    uint64_t v10 = v9 + 1;
    xpc_object_t v8 = (void **)operator new(v9 + 1);
    __dst[1] = v7;
    __dst[2] = (void *)(v10 | 0x8000000000000000);
    __dst[0] = v8;
    goto LABEL_8;
  }
  HIBYTE(__dst[2]) = v6;
  xpc_object_t v8 = __dst;
  if (v6) {
LABEL_8:
  }
    memcpy(v8, __s, (size_t)v7);
  *((unsigned char *)v7 + (void)v8) = 0;
  size_t v11 = strlen((const char *)*MEMORY[0x263F26420]);
  int v12 = (void *)v11;
  char v13 = HIBYTE(__dst[2]);
  if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
  {
    if (v11 != -1)
    {
      size_t v14 = (void *)HIBYTE(__dst[2]);
      size_t v15 = __dst;
      goto LABEL_14;
    }
LABEL_27:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v11 == -1) {
    goto LABEL_27;
  }
  size_t v15 = (void **)__dst[0];
  size_t v14 = __dst[1];
LABEL_14:
  if (v14 >= v12) {
    size_t v16 = (size_t)v12;
  }
  else {
    size_t v16 = (size_t)v14;
  }
  if (!memcmp(v15, (const void *)*MEMORY[0x263F26420], v16) && v14 == v12)
  {
    v19[0] = MEMORY[0x263EF8330];
    v19[1] = 0x40000000;
    v19[2] = ___ZN15AnalyticsHelper6appendERN3xpc4dictERNSt3__13mapINS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEES1_NS3_4lessISA_EENS8_INS3_4pairIKSA_S1_EEEEEE_block_invoke_2;
    v19[3] = &__block_descriptor_tmp_0;
    void v19[4] = *(void *)(a1 + 32);
    xpc_dictionary_apply(a3, v19);
    char v13 = HIBYTE(__dst[2]);
  }
  if (v13 < 0) {
    operator delete(__dst[0]);
  }
  return 1;
}

void sub_263699EFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN15AnalyticsHelper6appendERN3xpc4dictERNSt3__13mapINS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEES1_NS3_4lessISA_EENS8_INS3_4pairIKSA_S1_EEEEEE_block_invoke_2(uint64_t a1, const char *a2, xpc_object_t object)
{
  if (object)
  {
    xpc_object_t v5 = object;
    xpc_retain(object);
  }
  else
  {
    xpc_object_t v5 = xpc_null_create();
  }
  xpc_dictionary_set_value(**(xpc_object_t **)(a1 + 32), a2, v5);
  xpc_object_t v6 = xpc_null_create();
  xpc_release(v5);
  xpc_release(v6);
  return 1;
}

void analytics::registerCallbackForTimedEventImpl(const char *a1)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  unint64_t v14 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v15 = 0xAAAAAAAAAAAAAAAALL;
  abm::AWDHelperGetConnection(&v14);
  if (!v14) {
    goto LABEL_18;
  }
  size_t v2 = strlen(a1);
  if (v2 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  std::string::size_type v3 = v2;
  if (v2 >= 0x17)
  {
    uint64_t v5 = (v2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v2 | 7) != 0x17) {
      uint64_t v5 = v2 | 7;
    }
    uint64_t v6 = v5 + 1;
    p_dst = (std::string *)operator new(v5 + 1);
    __dst.__r_.__value_.__l.__size_ = v3;
    __dst.__r_.__value_.__r.__words[2] = v6 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  }
  else
  {
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v2;
    p_dst = &__dst;
    if (!v2) {
      goto LABEL_10;
    }
  }
  memcpy(p_dst, a1, v3);
LABEL_10:
  p_dst->__r_.__value_.__s.__data_[v3] = 0;
  BOOL v7 = std::string::insert(&__dst, 0, "com.apple.Telephony.", 0x14uLL);
  long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
  int64_t v13 = v7->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v8;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  uint64_t v9 = GetOsLogContext()[1];
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    uint64_t v10 = __p;
    if (v13 < 0) {
      uint64_t v10 = (void **)__p[0];
    }
    LODWORD(__dst.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = (std::string::size_type)v10;
    _os_log_impl(&dword_26368A000, v9, OS_LOG_TYPE_INFO, "Register for 24h timer: event[%s]", (uint8_t *)&__dst, 0xCu);
  }
  wis::WISServerConnection::RegisterCallbackForTimer();
  if (SHIBYTE(v13) < 0) {
    operator delete(__p[0]);
  }
LABEL_18:
  size_t v11 = (std::__shared_weak_count *)v15;
  if (v15)
  {
    if (!atomic_fetch_add((atomic_ullong *volatile)(v15 + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

void sub_26369A204(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,char a22)
{
  if (a20 < 0)
  {
    operator delete(__p);
    std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)&a22);
    _Unwind_Resume(a1);
  }
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)&a22);
  _Unwind_Resume(a1);
}

void ___ZN9analytics33registerCallbackForTimedEventImplEPKcN8dispatch5queueEU13block_pointerFvNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEE_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string __p = *(std::string *)a2;
  }
  (*(void (**)(uint64_t, std::string *))(v2 + 16))(v2, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_26369A2E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::Loggable<AnalyticsHelper,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig(uint64_t a1)
{
  return MEMORY[0x270F97428](a1 + 8);
}

void ctu::Loggable<AnalyticsHelper,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName(char *a1@<X8>)
{
  a1[23] = 15;
  strcpy(a1, "stats.analytics");
}

uint64_t ctu::Loggable<AnalyticsHelper,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return MEMORY[0x270F978E0](a1 + 8);
}

void *ctu::Loggable<AnalyticsHelper,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_270EA5A38;
  MEMORY[0x263E68AF0](a1 + 1);
  return a1;
}

void ctu::Loggable<AnalyticsHelper,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_270EA5A38;
  MEMORY[0x263E68AF0](a1 + 1);

  operator delete(a1);
}

void std::string::__throw_out_of_range[abi:ne180100]()
{
}

void std::__throw_out_of_range[abi:ne180100](const char *a1)
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::out_of_range::out_of_range[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_2655D4798, MEMORY[0x263F8C068]);
}

void sub_26369A430(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::out_of_range::out_of_range[abi:ne180100](std::logic_error *a1, const char *a2)
{
  uint64_t result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C390] + 16);
  return result;
}

void std::__shared_ptr_pointer<AnalyticsHelper *,std::shared_ptr<AnalyticsHelper> ctu::SharedSynchronizable<AnalyticsHelper>::make_shared_ptr<AnalyticsHelper>(AnalyticsHelper*)::{lambda(AnalyticsHelper *)#1},std::allocator<AnalyticsHelper>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<AnalyticsHelper *,std::shared_ptr<AnalyticsHelper> ctu::SharedSynchronizable<AnalyticsHelper>::make_shared_ptr<AnalyticsHelper>(AnalyticsHelper*)::{lambda(AnalyticsHelper *)#1},std::allocator<AnalyticsHelper>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<AnalyticsHelper *,std::shared_ptr<AnalyticsHelper> ctu::SharedSynchronizable<AnalyticsHelper>::make_shared_ptr<AnalyticsHelper>(AnalyticsHelper*)::{lambda(AnalyticsHelper *)#1},std::allocator<AnalyticsHelper>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableI15AnalyticsHelperE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_") {
    return a1 + 24;
  }
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableI15AnalyticsHelperE15make_shared_ptrIS1_EENSt3__110shared_pt"
                                "rIT_EEPS6_EUlPS1_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableI15AnalyticsHelperE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableI15AnalyticsHelperE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24; {
  return 0;
  }
}

uint64_t std::shared_ptr<AnalyticsHelper> ctu::SharedSynchronizable<AnalyticsHelper>::make_shared_ptr<AnalyticsHelper>(AnalyticsHelper*)::{lambda(AnalyticsHelper*)#1}::operator() const(AnalyticsHelper*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void *ctu::SharedLoggable<AnalyticsHelper,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(void *a1)
{
  *a1 = &unk_270EA5A38;
  MEMORY[0x263E68AF0](a1 + 1);
  uint64_t v2 = a1[12];
  if (v2) {
    dispatch_release(v2);
  }
  unint64_t v3 = a1[11];
  if (v3) {
    dispatch_release(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[10];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

void ctu::SharedLoggable<AnalyticsHelper,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(void *a1)
{
  *a1 = &unk_270EA5A38;
  MEMORY[0x263E68AF0](a1 + 1);
  uint64_t v2 = a1[12];
  if (v2) {
    dispatch_release(v2);
  }
  unint64_t v3 = a1[11];
  if (v3) {
    dispatch_release(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[10];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }

  operator delete(a1);
}

void std::__tree<std::__value_type<std::string,std::map<std::string,xpc::dict>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,xpc::dict>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,xpc::dict>>>>::destroy(char *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,std::map<std::string,xpc::dict>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,xpc::dict>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,xpc::dict>>>>::destroy(*(void *)a1);
    std::__tree<std::__value_type<std::string,std::map<std::string,xpc::dict>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,xpc::dict>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,xpc::dict>>>>::destroy(*((void *)a1 + 1));
    std::__tree<std::__value_type<std::string,xpc::dict>,std::__map_value_compare<std::string,std::__value_type<std::string,xpc::dict>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xpc::dict>>>::destroy(*((char **)a1 + 8));
    if (a1[55] < 0)
    {
      operator delete(*((void **)a1 + 4));
      uint64_t v2 = a1;
    }
    else
    {
      uint64_t v2 = a1;
    }
    operator delete(v2);
  }
}

void std::__tree<std::__value_type<std::string,xpc::dict>,std::__map_value_compare<std::string,std::__value_type<std::string,xpc::dict>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xpc::dict>>>::destroy(char *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,xpc::dict>,std::__map_value_compare<std::string,std::__value_type<std::string,xpc::dict>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xpc::dict>>>::destroy(*(void *)a1);
    std::__tree<std::__value_type<std::string,xpc::dict>,std::__map_value_compare<std::string,std::__value_type<std::string,xpc::dict>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xpc::dict>>>::destroy(*((void *)a1 + 1));
    xpc_release(*((xpc_object_t *)a1 + 7));
    *((void *)a1 + 7) = 0;
    if (a1[55] < 0)
    {
      operator delete(*((void **)a1 + 4));
      uint64_t v2 = a1;
    }
    else
    {
      uint64_t v2 = a1;
    }
    operator delete(v2);
  }
}

uint64_t *std::__tree<std::__value_type<std::string,std::map<std::string,xpc::dict>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,xpc::dict>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,xpc::dict>>>>::find<std::string>(uint64_t a1, const void **a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  unint64_t v3 = *(uint64_t **)(a1 + 8);
  if (!v3) {
    return v2;
  }
  int v4 = *((char *)a2 + 23);
  if (v4 >= 0) {
    uint64_t v5 = a2;
  }
  else {
    uint64_t v5 = *a2;
  }
  if (v4 >= 0) {
    size_t v6 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v6 = (size_t)a2[1];
  }
  BOOL v7 = (uint64_t *)(a1 + 8);
  do
  {
    while (1)
    {
      int v8 = *((char *)v3 + 55);
      uint64_t v9 = v8 >= 0 ? v3 + 4 : (uint64_t *)v3[4];
      size_t v10 = v8 >= 0 ? *((unsigned __int8 *)v3 + 55) : v3[5];
      size_t v11 = v6 >= v10 ? v10 : v6;
      int v12 = memcmp(v9, v5, v11);
      if (v12) {
        break;
      }
      if (v10 >= v6) {
        goto LABEL_23;
      }
LABEL_9:
      unint64_t v3 = (uint64_t *)v3[1];
      if (!v3) {
        goto LABEL_24;
      }
    }
    if (v12 < 0) {
      goto LABEL_9;
    }
LABEL_23:
    BOOL v7 = v3;
    unint64_t v3 = (uint64_t *)*v3;
  }
  while (v3);
LABEL_24:
  if (v7 == v2) {
    return v2;
  }
  int v13 = *((char *)v7 + 55);
  if (v13 >= 0) {
    unint64_t v14 = v7 + 4;
  }
  else {
    unint64_t v14 = (const void *)v7[4];
  }
  if (v13 >= 0) {
    size_t v15 = *((unsigned __int8 *)v7 + 55);
  }
  else {
    size_t v15 = v7[5];
  }
  if (v15 >= v6) {
    size_t v16 = v6;
  }
  else {
    size_t v16 = v15;
  }
  int v17 = memcmp(v5, v14, v16);
  if (v17)
  {
    if ((v17 & 0x80000000) == 0) {
      return v7;
    }
    return v2;
  }
  else
  {
    if (v6 < v15) {
      return v2;
    }
    return v7;
  }
}

void *std::string::__assign_no_alias<true>(void *__dst, void *__src, size_t __len)
{
  if (__len > 0x16)
  {
    if (__len - 0x7FFFFFFFFFFFFFF7 <= 0x800000000000001ELL) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    size_t v7 = 44;
    if (__len > 0x2C) {
      size_t v7 = __len;
    }
    size_t v8 = (v7 | 7) + 1;
    size_t v6 = operator new(v8);
    memcpy(v6, __src, __len);
    __dst[1] = __len;
    __dst[2] = v8 | 0x8000000000000000;
    *std::string __dst = v6;
  }
  else
  {
    *((unsigned char *)__dst + 23) = __len;
    size_t v6 = __dst;
    if (__len)
    {
      memmove(__dst, __src, __len);
      size_t v6 = __dst;
    }
  }
  *((unsigned char *)v6 + __len) = 0;
  return __dst;
}

void **std::string::__assign_no_alias<false>(void **a1, void *__src, size_t __len)
{
  unint64_t v6 = (unint64_t)a1[2];
  uint64_t v7 = v6 & 0x7FFFFFFFFFFFFFFFLL;
  if ((v6 & 0x7FFFFFFFFFFFFFFFLL) > __len)
  {
    size_t v8 = *a1;
    a1[1] = (void *)__len;
    if (__len) {
      memmove(v8, __src, __len);
    }
    goto LABEL_12;
  }
  size_t v9 = 0x7FFFFFFFFFFFFFF7;
  if (0x7FFFFFFFFFFFFFF7 - v7 < __len - v7 + 1) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  unint64_t v10 = v7 - 1;
  size_t v11 = a1;
  if ((v6 & 0x8000000000000000) == 0)
  {
    if (v10 > 0x3FFFFFFFFFFFFFF2) {
      goto LABEL_7;
    }
LABEL_14:
    unint64_t v13 = 2 * v10;
    if (__len > 2 * v10) {
      unint64_t v13 = __len;
    }
    uint64_t v14 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v13 | 7) != 0x17) {
      uint64_t v14 = v13 | 7;
    }
    if (v13 >= 0x17) {
      size_t v9 = v14 + 1;
    }
    else {
      size_t v9 = 23;
    }
    size_t v8 = operator new(v9);
    if (!__len) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
  size_t v11 = *a1;
  if (v10 <= 0x3FFFFFFFFFFFFFF2) {
    goto LABEL_14;
  }
LABEL_7:
  size_t v8 = operator new(0x7FFFFFFFFFFFFFF7uLL);
  if (__len) {
LABEL_8:
  }
    memcpy(v8, __src, __len);
LABEL_9:
  if (v10 != 22) {
    operator delete(v11);
  }
  a1[1] = (void *)__len;
  a1[2] = (void *)(v9 | 0x8000000000000000);
  *a1 = v8;
LABEL_12:
  *((unsigned char *)v8 + __len) = 0;
  return a1;
}

xpc_object_t std::__tree<std::__value_type<std::string,xpc::dict>,std::__map_value_compare<std::string,std::__value_type<std::string,xpc::dict>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xpc::dict>>>::__construct_node<std::pair<std::string const,xpc::dict> const&>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a2 + 8;
  memset(a1, 170, 24);
  unint64_t v6 = (char *)operator new(0x40uLL);
  *a1 = v6;
  a1[1] = v5;
  *((unsigned char *)a1 + 16) = 0;
  uint64_t v7 = (std::string *)(v6 + 32);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    *((void *)v6 + 6) = *(void *)(a3 + 16);
  }
  size_t v8 = *(void **)(a3 + 24);
  *((void *)v6 + 7) = v8;
  if (v8)
  {
    xpc_object_t result = xpc_retain(v8);
  }
  else
  {
    xpc_object_t result = xpc_null_create();
    *((void *)v6 + 7) = result;
  }
  *((unsigned char *)a1 + 16) = 1;
  return result;
}

void sub_26369AB34(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,xpc::dict>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,xpc::dict>,void *>>>>::~unique_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<std::__tree_node<std::__value_type<std::string,xpc::dict>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,xpc::dict>,void *>>>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((unsigned char *)a1 + 16))
    {
      xpc_release(*(xpc_object_t *)(v2 + 56));
      *(void *)(v2 + 56) = 0;
      if (*(char *)(v2 + 55) < 0) {
        operator delete(*(void **)(v2 + 32));
      }
    }
    operator delete((void *)v2);
  }
  return a1;
}

uint64_t *std::__tree<std::__value_type<std::string,xpc::dict>,std::__map_value_compare<std::string,std::__value_type<std::string,xpc::dict>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xpc::dict>>>::__find_equal<std::string>(uint64_t **a1, uint64_t *a2, uint64_t **a3, uint64_t **a4, const void **a5)
{
  size_t v8 = a1 + 1;
  if (a1 + 1 == (uint64_t **)a2) {
    goto LABEL_23;
  }
  int v10 = *((char *)a5 + 23);
  if (v10 >= 0) {
    size_t v11 = a5;
  }
  else {
    size_t v11 = *a5;
  }
  if (v10 >= 0) {
    size_t v12 = *((unsigned __int8 *)a5 + 23);
  }
  else {
    size_t v12 = (size_t)a5[1];
  }
  int v13 = *((char *)a2 + 55);
  if (v13 >= 0) {
    uint64_t v14 = a2 + 4;
  }
  else {
    uint64_t v14 = (const void *)a2[4];
  }
  if (v13 >= 0) {
    size_t v15 = *((unsigned __int8 *)a2 + 55);
  }
  else {
    size_t v15 = a2[5];
  }
  if (v15 >= v12) {
    size_t v16 = v12;
  }
  else {
    size_t v16 = v15;
  }
  int v17 = memcmp(v11, v14, v16);
  if (!v17)
  {
    if (v12 >= v15) {
      goto LABEL_19;
    }
LABEL_23:
    size_t v19 = (uint64_t *)*a2;
    if (*a1 == a2)
    {
      int v21 = a2;
    }
    else
    {
      if (v19)
      {
        size_t v20 = (uint64_t *)*a2;
        do
        {
          int v21 = v20;
          size_t v20 = (uint64_t *)v20[1];
        }
        while (v20);
      }
      else
      {
        uint64_t v22 = a2;
        do
        {
          int v21 = (uint64_t *)v22[2];
          BOOL v23 = *v21 == (void)v22;
          uint64_t v22 = v21;
        }
        while (v23);
      }
      int v24 = *((char *)v21 + 55);
      if (v24 >= 0) {
        size_t v25 = v21 + 4;
      }
      else {
        size_t v25 = (const void *)v21[4];
      }
      if (v24 >= 0) {
        size_t v26 = *((unsigned __int8 *)v21 + 55);
      }
      else {
        size_t v26 = v21[5];
      }
      int v27 = *((char *)a5 + 23);
      if (v27 >= 0) {
        uint64_t v28 = a5;
      }
      else {
        uint64_t v28 = *a5;
      }
      if (v27 >= 0) {
        size_t v29 = *((unsigned __int8 *)a5 + 23);
      }
      else {
        size_t v29 = (size_t)a5[1];
      }
      if (v29 >= v26) {
        size_t v30 = v26;
      }
      else {
        size_t v30 = v29;
      }
      int v31 = memcmp(v25, v28, v30);
      if (v31)
      {
        if ((v31 & 0x80000000) == 0) {
          goto LABEL_48;
        }
      }
      else if (v26 >= v29)
      {
LABEL_48:
        unint64_t v32 = *v8;
        if (!*v8)
        {
          uint64_t v33 = v8;
LABEL_69:
          *a3 = (uint64_t *)v33;
          return (uint64_t *)v8;
        }
        while (1)
        {
          uint64_t v33 = (uint64_t **)v32;
          xpc_object_t v36 = (const void *)v32[4];
          uint64_t v34 = v32 + 4;
          uint64_t v35 = v36;
          int v37 = *((char *)v34 + 23);
          if (v37 >= 0) {
            xpc_object_t v38 = v34;
          }
          else {
            xpc_object_t v38 = v35;
          }
          if (v37 >= 0) {
            size_t v39 = *((unsigned __int8 *)v34 + 23);
          }
          else {
            size_t v39 = v34[1];
          }
          if (v39 >= v29) {
            size_t v40 = v29;
          }
          else {
            size_t v40 = v39;
          }
          int v41 = memcmp(v28, v38, v40);
          if (v41)
          {
            if (v41 < 0) {
              goto LABEL_50;
            }
LABEL_64:
            int v42 = memcmp(v38, v28, v40);
            if (v42)
            {
              if ((v42 & 0x80000000) == 0) {
                goto LABEL_69;
              }
            }
            else if (v39 >= v29)
            {
              goto LABEL_69;
            }
            size_t v8 = v33 + 1;
            unint64_t v32 = v33[1];
            if (!v32) {
              goto LABEL_69;
            }
          }
          else
          {
            if (v29 >= v39) {
              goto LABEL_64;
            }
LABEL_50:
            unint64_t v32 = *v33;
            size_t v8 = v33;
            if (!*v33) {
              goto LABEL_69;
            }
          }
        }
      }
    }
    if (v19)
    {
      *a3 = v21;
      return v21 + 1;
    }
    else
    {
      *a3 = a2;
      return a2;
    }
  }
  if (v17 < 0) {
    goto LABEL_23;
  }
LABEL_19:
  int v18 = memcmp(v14, v11, v16);
  if (v18)
  {
    if ((v18 & 0x80000000) == 0)
    {
LABEL_21:
      *a3 = a2;
      *a4 = a2;
      return (uint64_t *)a4;
    }
  }
  else if (v15 >= v12)
  {
    goto LABEL_21;
  }
  uint64_t v43 = a2[1];
  if (v43)
  {
    char v44 = (uint64_t *)a2[1];
    do
    {
      a4 = (uint64_t **)v44;
      char v44 = (uint64_t *)*v44;
    }
    while (v44);
  }
  else
  {
    int v45 = a2;
    do
    {
      a4 = (uint64_t **)v45[2];
      BOOL v23 = *a4 == v45;
      int v45 = (uint64_t *)a4;
    }
    while (!v23);
  }
  if (a4 != v8)
  {
    int v46 = *((char *)a4 + 55);
    if (v46 >= 0) {
      unint64_t v47 = (uint64_t *)(a4 + 4);
    }
    else {
      unint64_t v47 = a4[4];
    }
    if (v46 >= 0) {
      size_t v48 = *((unsigned __int8 *)a4 + 55);
    }
    else {
      size_t v48 = (size_t)a4[5];
    }
    if (v48 >= v12) {
      size_t v49 = v12;
    }
    else {
      size_t v49 = v48;
    }
    int v50 = memcmp(v11, v47, v49);
    if (v50)
    {
      if ((v50 & 0x80000000) == 0)
      {
LABEL_95:
        v51 = *v8;
        if (*v8)
        {
          unint64_t v52 = a3;
          while (1)
          {
            size_t v53 = (uint64_t **)v51;
            v56 = (const void *)v51[4];
            int v54 = v51 + 4;
            xpc_object_t v55 = v56;
            int v57 = *((char *)v54 + 23);
            if (v57 >= 0) {
              size_t v58 = v54;
            }
            else {
              size_t v58 = v55;
            }
            if (v57 >= 0) {
              size_t v59 = *((unsigned __int8 *)v54 + 23);
            }
            else {
              size_t v59 = v54[1];
            }
            if (v59 >= v12) {
              size_t v60 = v12;
            }
            else {
              size_t v60 = v59;
            }
            int v61 = memcmp(v11, v58, v60);
            if (v61)
            {
              if (v61 < 0) {
                goto LABEL_97;
              }
LABEL_111:
              int v62 = memcmp(v58, v11, v60);
              if (v62)
              {
                if ((v62 & 0x80000000) == 0) {
                  goto LABEL_123;
                }
              }
              else if (v59 >= v12)
              {
                goto LABEL_123;
              }
              size_t v8 = v53 + 1;
              v51 = v53[1];
              if (!v51) {
                goto LABEL_123;
              }
            }
            else
            {
              if (v12 >= v59) {
                goto LABEL_111;
              }
LABEL_97:
              v51 = *v53;
              size_t v8 = v53;
              if (!*v53) {
                goto LABEL_123;
              }
            }
          }
        }
        size_t v53 = v8;
        unint64_t v52 = a3;
LABEL_123:
        *unint64_t v52 = (uint64_t *)v53;
        return (uint64_t *)v8;
      }
    }
    else if (v12 >= v48)
    {
      goto LABEL_95;
    }
  }
  if (v43)
  {
    *a3 = (uint64_t *)a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return (uint64_t *)a4;
}

void std::string::__erase_external_with_move(std::string *this, std::string::size_type __pos, std::string::size_type __n)
{
  if (!__n) {
    return;
  }
  int v4 = SHIBYTE(this->__r_.__value_.__r.__words[2]);
  if (v4 < 0)
  {
    unint64_t v6 = (std::string *)this->__r_.__value_.__r.__words[0];
    std::string::size_type size = this->__r_.__value_.__l.__size_;
    std::string::size_type v7 = size - __pos;
    if (size - __pos >= __n) {
      std::string::size_type v8 = __n;
    }
    else {
      std::string::size_type v8 = size - __pos;
    }
    if (size - __pos <= __n) {
      goto LABEL_8;
    }
  }
  else
  {
    std::string::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    unint64_t v6 = this;
    std::string::size_type v7 = size - __pos;
    if (size - __pos >= __n) {
      std::string::size_type v8 = __n;
    }
    else {
      std::string::size_type v8 = HIBYTE(this->__r_.__value_.__r.__words[2]) - __pos;
    }
    if (v7 <= __n) {
      goto LABEL_8;
    }
  }
  memmove((char *)v6 + __pos, (char *)v6 + __pos + v8, v7 - v8);
  LOBYTE(v4) = *((unsigned char *)&this->__r_.__value_.__s + 23);
LABEL_8:
  std::string::size_type v9 = size - v8;
  if ((v4 & 0x80) != 0) {
    this->__r_.__value_.__l.__size_ = v9;
  }
  else {
    *((unsigned char *)&this->__r_.__value_.__s + 23) = v9 & 0x7F;
  }
  v6->__r_.__value_.__s.__data_[v9] = 0;
}

void ResetDetection::create(NSObject **a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  *a4 = 0xAAAAAAAAAAAAAAAALL;
  a4[1] = 0xAAAAAAAAAAAAAAAALL;
  std::string::size_type v8 = operator new(0xB8uLL);
  std::string::size_type v9 = *a1;
  dispatch_object_t object = v9;
  if (v9) {
    dispatch_retain(v9);
  }
  int v10 = (std::__shared_weak_count *)a2[1];
  uint64_t v12 = *a2;
  int v13 = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  ResetDetection::ResetDetection((uint64_t)v8, &object, &v12, a3);
  *a4 = 0xAAAAAAAAAAAAAAAALL;
  a4[1] = 0xAAAAAAAAAAAAAAAALL;
  std::shared_ptr<ResetDetection>::shared_ptr[abi:ne180100]<ResetDetection,std::shared_ptr<ResetDetection> ctu::SharedSynchronizable<ResetDetection>::make_shared_ptr<ResetDetection>(ResetDetection*)::{lambda(ResetDetection*)#1},void>(a4, (uint64_t)v8);
  ctu::Loggable<ResetDetection,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(*a4);
  size_t v11 = v13;
  if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  if (object) {
    dispatch_release(object);
  }
}

void sub_26369B100(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100](v3);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  if (v2) {
    dispatch_release(v2);
  }
  _Unwind_Resume(a1);
}

uint64_t ResetDetection::ResetDetection(uint64_t a1, NSObject **a2, void *a3, uint64_t a4)
{
  *(void *)a1 = &unk_270EA5B08;
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v10, "com.apple.telephony.abm", "reset.detect");
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  std::string::size_type v8 = *a2;
  *(void *)(a1 + 88) = *a2;
  if (v8) {
    dispatch_retain(v8);
  }
  *(void *)(a1 + 96) = 0;
  ctu::Loggable<ResetDetection,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::Loggable<ctu::OsLogContext,std::shared_ptr<ctu::LogServer>&>((void *)a1, (uint64_t)v10, a3);
  *(void *)a1 = &unk_270EA5CC8;
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v10);
  *(void *)a1 = &unk_270EA5B08;
  *(void *)(a1 + 104) = a4;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = TelephonyBasebandCreateController();
  *(_DWORD *)(a1 + 128) = 2;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 136) = a1 + 144;
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 160) = a1 + 168;
  return a1;
}

void sub_26369B260(_Unwind_Exception *a1)
{
  ctu::SharedLoggable<ResetDetection,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(v1);
  _Unwind_Resume(a1);
}

void sub_26369B274(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  ctu::SharedSynchronizable<data::TransportService::State>::~SharedSynchronizable(v9);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&a9);
  _Unwind_Resume(a1);
}

const char *ResetDetection::getName(ResetDetection *this)
{
  return "reset.detect";
}

void *ctu::SharedLoggable<ResetDetection,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(void *a1)
{
  *a1 = &unk_270EA5C38;
  MEMORY[0x263E68AF0](a1 + 1);
  uint64_t v2 = a1[12];
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = a1[11];
  if (v3) {
    dispatch_release(v3);
  }
  int v4 = (std::__shared_weak_count *)a1[10];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = &unk_270EA5C38;
  MEMORY[0x263E68AF0](a1 + 1);
  uint64_t v2 = a1[12];
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = a1[11];
  if (v3) {
    dispatch_release(v3);
  }
  int v4 = (std::__shared_weak_count *)a1[10];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

void ResetDetection::~ResetDetection(ResetDetection *this)
{
  *(void *)this = &unk_270EA5B08;
  uint64_t v2 = (const void *)*((void *)this + 15);
  *((void *)this + 15) = 0;
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = (__CFRunLoop *)*((void *)this + 13);
  uint64_t v4 = *((void *)this + 14);
  *((void *)this + 14) = 0;
  uint64_t v5 = (const void *)*MEMORY[0x263EFFE88];
  block[0] = MEMORY[0x263EF8330];
  block[1] = 0x40000000;
  block[2] = ___ZN14ResetDetectionD2Ev_block_invoke;
  block[3] = &__block_descriptor_tmp_1;
  block[4] = v4;
  CFRunLoopPerformBlock(v3, v5, block);
  CFRunLoopWakeUp(*((CFRunLoopRef *)this + 13));
  std::__tree<std::__value_type<std::string,std::pair<dispatch_source_s *,dispatch::block<void({block_pointer})(int)>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<dispatch_source_s *,dispatch::block<void({block_pointer})(int)>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<dispatch_source_s *,dispatch::block<void({block_pointer})(int)>>>>>::destroy(*((char **)this + 21));
  std::__tree<std::__value_type<std::string,std::pair<dispatch_source_s *,dispatch::block<void({block_pointer})(int)>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<dispatch_source_s *,dispatch::block<void({block_pointer})(int)>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<dispatch_source_s *,dispatch::block<void({block_pointer})(int)>>>>>::destroy(*((char **)this + 18));
  unint64_t v6 = (const void *)*((void *)this + 15);
  if (v6) {
    CFRelease(v6);
  }
  *(void *)this = &unk_270EA5C38;
  MEMORY[0x263E68AF0]((char *)this + 8);
  std::string::size_type v7 = *((void *)this + 12);
  if (v7) {
    dispatch_release(v7);
  }
  std::string::size_type v8 = *((void *)this + 11);
  if (v8) {
    dispatch_release(v8);
  }
  std::string::size_type v9 = (std::__shared_weak_count *)*((void *)this + 10);
  if (v9) {
    std::__shared_weak_count::__release_weak(v9);
  }
}

{
  void *v1;
  uint64_t vars8;

  ResetDetection::~ResetDetection(this);

  operator delete(v1);
}

void ___ZN14ResetDetectionD2Ev_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  if (v1)
  {
    uint64_t v2 = (std::__shared_weak_count *)v1[1];
    if (v2) {
      std::__shared_weak_count::__release_weak(v2);
    }
    operator delete(v1);
  }
}

void ResetDetection::start(ResetDetection *this)
{
  v1[0] = MEMORY[0x263EF8330];
  v1[1] = 0x40000000;
  v1[2] = ___ZN14ResetDetection5startEv_block_invoke;
  v1[3] = &__block_descriptor_tmp_3;
  v1[4] = this;
  ctu::SharedSynchronizable<ResetDetection>::execute_wrapped((uint64_t *)this + 9, (uint64_t)v1);
}

void ___ZN14ResetDetection5startEv_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(NSObject **)(v1 + 40);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_26368A000, v2, OS_LOG_TYPE_DEFAULT, "#I Started", buf, 2u);
  }
  uint64_t v3 = operator new(0x10uLL);
  uint64_t v4 = *(std::__shared_weak_count **)(v1 + 80);
  if (!v4 || (uint64_t v5 = *(void *)(v1 + 72), (v6 = std::__shared_weak_count::lock(v4)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  std::string::size_type v7 = v6;
  *uint64_t v3 = v5;
  v3[1] = v6;
  atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  *(void *)(v1 + 112) = v3;
  if (atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (TelephonyBasebandRegisterForReset()) {
      goto LABEL_10;
    }
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v7);
    if (TelephonyBasebandRegisterForReset()) {
      goto LABEL_10;
    }
  }
  std::string::size_type v8 = *(NSObject **)(v1 + 40);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)uint64_t v12 = 0;
    _os_log_error_impl(&dword_26368A000, v8, OS_LOG_TYPE_ERROR, "failed registering for reset detect", v12, 2u);
    if (*(void *)(v1 + 120)) {
      size_t v11 = ctu::SharedRef<__TelephonyBasebandControllerHandle_tag,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__TelephonyBasebandControllerHandle_tag>::get;
    }
    else {
      size_t v11 = 0;
    }
    if (v11) {
      goto LABEL_14;
    }
    return;
  }
LABEL_10:
  if (*(void *)(v1 + 120)) {
    std::string::size_type v9 = ctu::SharedRef<__TelephonyBasebandControllerHandle_tag,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__TelephonyBasebandControllerHandle_tag>::get;
  }
  else {
    std::string::size_type v9 = 0;
  }
  if (v9)
  {
LABEL_14:
    unsigned __int8 v15 = 1;
    if (TelephonyBasebandGetReset())
    {
      *(_DWORD *)(v1 + 128) = v15;
    }
    else
    {
      int v10 = *(NSObject **)(v1 + 40);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)uint64_t v14 = 0;
        _os_log_error_impl(&dword_26368A000, v10, OS_LOG_TYPE_ERROR, "failed to poll for reset detect", v14, 2u);
      }
    }
  }
}

void sub_26369B744(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t ctu::SharedRef<__TelephonyBasebandControllerHandle_tag,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__TelephonyBasebandControllerHandle_tag>::get(uint64_t a1)
{
  return *(void *)a1;
}

void ResetDetection::sResetDetectCallback(ResetDetection *this, void *a2, int a3, unsigned int a4, void *a5)
{
  if (this)
  {
    uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 1);
    if (v5)
    {
      uint64_t v7 = *(void *)this;
      atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      std::string::size_type v8 = std::__shared_weak_count::lock(v5);
      if (v8)
      {
        std::string::size_type v9 = v8;
        if (v7)
        {
          v10[0] = MEMORY[0x263EF8330];
          v10[1] = 0x40000000;
          v10[2] = ___ZN14ResetDetection19resetDetectCallbackEPvjjS0__block_invoke;
          v10[3] = &__block_descriptor_tmp_6;
          v10[4] = v7;
          int v11 = a3;
          ctu::SharedSynchronizable<ResetDetection>::execute_wrapped((uint64_t *)(v7 + 72), (uint64_t)v10);
        }
        if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

uint64_t ResetDetection::poll(ResetDetection *this, BOOL *a2)
{
  if (*((void *)this + 15)) {
    uint64_t v3 = ctu::SharedRef<__TelephonyBasebandControllerHandle_tag,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__TelephonyBasebandControllerHandle_tag>::get;
  }
  else {
    uint64_t v3 = 0;
  }
  if (!v3) {
    return 0;
  }
  BOOL v9 = 1;
  uint64_t Reset = TelephonyBasebandGetReset();
  if (Reset)
  {
    *a2 = v9;
    return Reset;
  }
  uint64_t v7 = *((void *)this + 5);
  if (!os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
    return Reset;
  }
  *(_WORD *)std::string::size_type v8 = 0;
  _os_log_error_impl(&dword_26368A000, v7, OS_LOG_TYPE_ERROR, "failed to poll for reset detect", v8, 2u);
  return Reset;
}

void ResetDetection::add(uint64_t a1, uint64_t a2, char a3, void **a4, uint64_t a5)
{
  v10[0] = MEMORY[0x263EF8330];
  v10[1] = 1174405120;
  v10[2] = ___ZN14ResetDetection3addENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEbN8dispatch5blockIU13block_pointerFviEEEy_block_invoke;
  v10[3] = &__block_descriptor_tmp_4;
  v10[4] = a1;
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    char v14 = a3;
    BOOL v9 = *a4;
    if (!*a4) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  std::string __p = *(std::string *)a2;
  char v14 = a3;
  BOOL v9 = *a4;
  if (*a4) {
LABEL_5:
  }
    BOOL v9 = _Block_copy(v9);
LABEL_6:
  aBlock = v9;
  uint64_t v13 = a5;
  ctu::SharedSynchronizable<ResetDetection>::execute_wrapped((uint64_t *)(a1 + 72), (uint64_t)v10);
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void ___ZN14ResetDetection3addENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEbN8dispatch5blockIU13block_pointerFviEEEy_block_invoke(uint64_t a1)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(NSObject **)(v2 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = (void *)(a1 + 40);
    if (*(char *)(a1 + 63) < 0) {
      uint64_t v4 = (void *)*v4;
    }
    int v5 = *(unsigned __int8 *)(a1 + 80);
    *(_DWORD *)long long buf = 136315394;
    size_t v25 = v4;
    __int16 v26 = 1024;
    int v27 = v5;
    _os_log_impl(&dword_26368A000, v3, OS_LOG_TYPE_DEFAULT, "#I Added detection with key '%s', reset=%d", buf, 0x12u);
  }
  int v6 = *(_DWORD *)(v2 + 128);
  int v7 = *(unsigned __int8 *)(a1 + 80);
  if (v6)
  {
    if (v6 != 2)
    {
      BOOL v8 = v6 != 1 || v7 == 0;
      BOOL v9 = !v8;
      BOOL v10 = v6 | v7 || v6 == 1;
      BOOL v11 = !v10 && v7 == 0;
      if (v11 || v9) {
        goto LABEL_28;
      }
    }
  }
  else if (!*(unsigned char *)(a1 + 80))
  {
LABEL_28:
    (*(void (**)(void))(*(void *)(a1 + 64) + 16))();
    return;
  }
  uint64_t v13 = (_OWORD *)(a1 + 40);
  int v14 = *(char *)(a1 + 63);
  if (*(unsigned char *)(a1 + 80))
  {
    if (v14 < 0)
    {
      std::string::__init_copy_ctor_external(&v23, *(const std::string::value_type **)(a1 + 40), *(void *)(a1 + 48));
    }
    else
    {
      *(_OWORD *)&v23.__r_.__value_.__l.__data_ = *v13;
      v23.__r_.__value_.__r.__words[2] = *(void *)(a1 + 56);
    }
    unsigned __int8 v15 = *(const void **)(a1 + 64);
    if (v15) {
      size_t v16 = _Block_copy(v15);
    }
    else {
      size_t v16 = 0;
    }
    uint64_t v22 = v16;
    ResetDetection::addToBlocks_sync(v2, (uint64_t)&v23, &v22, (uint64_t **)(v2 + 136), *(void *)(a1 + 72));
    if (v16) {
      _Block_release(v16);
    }
    if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
    {
      int v17 = (void *)v23.__r_.__value_.__r.__words[0];
LABEL_47:
      operator delete(v17);
    }
  }
  else
  {
    if (v14 < 0)
    {
      std::string::__init_copy_ctor_external(&v21, *(const std::string::value_type **)(a1 + 40), *(void *)(a1 + 48));
    }
    else
    {
      *(_OWORD *)&v21.__r_.__value_.__l.__data_ = *v13;
      v21.__r_.__value_.__r.__words[2] = *(void *)(a1 + 56);
    }
    int v18 = *(const void **)(a1 + 64);
    if (v18) {
      size_t v19 = _Block_copy(v18);
    }
    else {
      size_t v19 = 0;
    }
    size_t v20 = v19;
    ResetDetection::addToBlocks_sync(v2, (uint64_t)&v21, &v20, (uint64_t **)(v2 + 160), *(void *)(a1 + 72));
    if (v19) {
      _Block_release(v19);
    }
    if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    {
      int v17 = (void *)v21.__r_.__value_.__r.__words[0];
      goto LABEL_47;
    }
  }
}

void sub_26369BC8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void ResetDetection::addToBlocks_sync(uint64_t a1, uint64_t a2, void **a3, uint64_t **a4, dispatch_time_t a5)
{
  BOOL v10 = dispatch_source_create(MEMORY[0x263EF8400], 1uLL, 0, *(dispatch_queue_t *)(a1 + 88));
  dispatch_source_set_timer(v10, a5, 0xFFFFFFFFFFFFFFFFLL, 0x5F5E100uLL);
  BOOL v11 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v11 || (uint64_t v12 = *(void *)(a1 + 72), (v13 = std::__shared_weak_count::lock(v11)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  int v14 = v13;
  p_shared_weak_owners = &v13->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v13->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v14);
  }
  handler[0] = MEMORY[0x263EF8330];
  handler[1] = 1174405120;
  handler[2] = ___ZN14ResetDetection16addToBlocks_syncENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEN8dispatch5blockIU13block_pointerFviEEERNS0_3mapIS6_NS0_4pairIP17dispatch_source_sSB_EENS0_4lessIS6_EENS4_INSD_IKS6_SG_EEEEEEy_block_invoke;
  handler[3] = &__block_descriptor_tmp_5_4;
  handler[4] = a1;
  handler[5] = v12;
  size_t v39 = v14;
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  size_t v40 = a4;
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string __p = *(std::string *)a2;
  }
  dispatch_source_set_event_handler(v10, handler);
  dispatch_activate(v10);
  size_t v16 = *a3;
  if (*a3) {
    size_t v16 = _Block_copy(v16);
  }
  int v37 = (uint64_t *)v16;
  int v18 = a4 + 1;
  int v17 = a4[1];
  if (v17)
  {
    int v19 = *(char *)(a2 + 23);
    if (v19 >= 0) {
      size_t v20 = (const std::string::value_type *)a2;
    }
    else {
      size_t v20 = *(const std::string::value_type **)a2;
    }
    if (v19 >= 0) {
      size_t v21 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      size_t v21 = *(void *)(a2 + 8);
    }
    while (1)
    {
      uint64_t v22 = (uint64_t **)v17;
      size_t v25 = (const void *)v17[4];
      std::string v23 = v17 + 4;
      int v24 = v25;
      int v26 = *((char *)v23 + 23);
      if (v26 >= 0) {
        int v27 = v23;
      }
      else {
        int v27 = v24;
      }
      if (v26 >= 0) {
        size_t v28 = *((unsigned __int8 *)v23 + 23);
      }
      else {
        size_t v28 = v23[1];
      }
      if (v28 >= v21) {
        size_t v29 = v21;
      }
      else {
        size_t v29 = v28;
      }
      int v30 = memcmp(v20, v27, v29);
      if (v30)
      {
        if (v30 < 0) {
          goto LABEL_17;
        }
LABEL_31:
        int v31 = memcmp(v27, v20, v29);
        if (v31)
        {
          if ((v31 & 0x80000000) == 0) {
            goto LABEL_45;
          }
        }
        else if (v28 >= v21)
        {
LABEL_45:
          xpc_object_t v36 = v22[8];
          v22[7] = (uint64_t *)v10;
          v22[8] = v37;
          if (v36) {
            goto LABEL_46;
          }
          goto LABEL_47;
        }
        int v17 = v22[1];
        if (!v17)
        {
          int v18 = v22 + 1;
          goto LABEL_38;
        }
      }
      else
      {
        if (v21 >= v28) {
          goto LABEL_31;
        }
LABEL_17:
        int v17 = *v22;
        int v18 = v22;
        if (!*v22) {
          goto LABEL_38;
        }
      }
    }
  }
  uint64_t v22 = a4 + 1;
LABEL_38:
  unint64_t v32 = operator new(0x48uLL);
  uint64_t v33 = (std::string *)(v32 + 4);
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v33, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&v33->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    v32[6] = *(void *)(a2 + 16);
  }
  v32[7] = 0;
  v32[8] = 0;
  *unint64_t v32 = 0;
  v32[1] = 0;
  v32[2] = v22;
  const void *v18 = v32;
  uint64_t v34 = (uint64_t *)**a4;
  uint64_t v35 = v32;
  if (v34)
  {
    *a4 = v34;
    uint64_t v35 = *v18;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a4[1], v35);
  a4[2] = (uint64_t *)((char *)a4[2] + 1);
  xpc_object_t v36 = (uint64_t *)v32[8];
  v32[7] = v10;
  v32[8] = v37;
  if (v36) {
LABEL_46:
  }
    _Block_release(v36);
LABEL_47:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v39) {
    std::__shared_weak_count::__release_weak(v39);
  }
  std::__shared_weak_count::__release_weak(v14);
}

void sub_26369C030(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  operator delete(v26);
  std::pair<dispatch_source_s *,dispatch::block<void({block_pointer})(int)>>::~pair((uint64_t)&a10);
  if (a25 < 0)
  {
    operator delete(__p);
    size_t v28 = a18;
    if (a18) {
      goto LABEL_3;
    }
  }
  else
  {
    size_t v28 = a18;
    if (a18)
    {
LABEL_3:
      std::__shared_weak_count::__release_weak(v28);
      std::__shared_weak_count::__release_weak(v25);
      _Unwind_Resume(a1);
    }
  }
  std::__shared_weak_count::__release_weak(v25);
  _Unwind_Resume(a1);
}

void *__copy_helper_block_e8_40c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE64c43_ZTSN8dispatch5blockIU13block_pointerFviEEE(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (std::string *)(a1 + 40);
  if ((*(char *)(a2 + 63) & 0x80000000) == 0)
  {
    long long v5 = *(_OWORD *)(a2 + 40);
    v4->__r_.__value_.__r.__words[2] = *(void *)(a2 + 56);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
    xpc_object_t result = *(void **)(a2 + 64);
    if (!result) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)(a2 + 40), *(void *)(a2 + 48));
  xpc_object_t result = *(void **)(a2 + 64);
  if (result) {
LABEL_5:
  }
    xpc_object_t result = _Block_copy(result);
LABEL_6:
  *(void *)(a1 + 64) = result;
  return result;
}

void __destroy_helper_block_e8_40c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE64c43_ZTSN8dispatch5blockIU13block_pointerFviEEE(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 64);
  if (v2) {
    _Block_release(v2);
  }
  if (*(char *)(a1 + 63) < 0)
  {
    uint64_t v3 = *(void **)(a1 + 40);
    operator delete(v3);
  }
}

void ___ZN14ResetDetection16addToBlocks_syncENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEN8dispatch5blockIU13block_pointerFviEEERNS0_3mapIS6_NS0_4pairIP17dispatch_source_sSB_EENS0_4lessIS6_EENS4_INSD_IKS6_SG_EEEEEEy_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (!v2) {
    return;
  }
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = std::__shared_weak_count::lock(v2);
  if (!v4) {
    return;
  }
  long long v5 = v4;
  if (!*(void *)(a1 + 40)) {
    goto LABEL_54;
  }
  uint64_t v6 = *(void *)(a1 + 56);
  BOOL v9 = *(uint64_t ***)(v6 + 8);
  int v7 = (uint64_t *)(v6 + 8);
  BOOL v8 = v9;
  if (!v9) {
    goto LABEL_54;
  }
  int v10 = *(char *)(a1 + 87);
  if (v10 >= 0) {
    BOOL v11 = (const void *)(a1 + 64);
  }
  else {
    BOOL v11 = *(const void **)(a1 + 64);
  }
  if (v10 >= 0) {
    size_t v12 = *(unsigned __int8 *)(a1 + 87);
  }
  else {
    size_t v12 = *(void *)(a1 + 72);
  }
  uint64_t v13 = v7;
  do
  {
    while (1)
    {
      int v14 = *((char *)v8 + 55);
      unsigned __int8 v15 = v14 >= 0 ? (uint64_t *)(v8 + 4) : v8[4];
      size_t v16 = v14 >= 0 ? *((unsigned __int8 *)v8 + 55) : (size_t)v8[5];
      size_t v17 = v12 >= v16 ? v16 : v12;
      int v18 = memcmp(v15, v11, v17);
      if (v18) {
        break;
      }
      if (v16 >= v12) {
        goto LABEL_26;
      }
LABEL_12:
      BOOL v8 = (uint64_t **)v8[1];
      if (!v8) {
        goto LABEL_27;
      }
    }
    if (v18 < 0) {
      goto LABEL_12;
    }
LABEL_26:
    uint64_t v13 = (uint64_t *)v8;
    BOOL v8 = (uint64_t **)*v8;
  }
  while (v8);
LABEL_27:
  if (v13 != v7)
  {
    int v19 = *((char *)v13 + 55);
    if (v19 >= 0) {
      size_t v20 = v13 + 4;
    }
    else {
      size_t v20 = (const void *)v13[4];
    }
    if (v19 >= 0) {
      size_t v21 = *((unsigned __int8 *)v13 + 55);
    }
    else {
      size_t v21 = v13[5];
    }
    if (v21 >= v12) {
      size_t v22 = v12;
    }
    else {
      size_t v22 = v21;
    }
    int v23 = memcmp(v11, v20, v22);
    if (v23)
    {
      if (v23 < 0) {
        goto LABEL_54;
      }
LABEL_41:
      ResetDetection::invokeBlock_sync(v3, (uint64_t)(v13 + 4), 3760250883);
      int v24 = *(uint64_t ***)(a1 + 56);
      size_t v25 = (uint64_t *)v13[1];
      if (v25)
      {
        do
        {
          int v26 = v25;
          size_t v25 = (uint64_t *)*v25;
        }
        while (v25);
      }
      else
      {
        int v27 = v13;
        do
        {
          int v26 = (uint64_t *)v27[2];
          BOOL v28 = *v26 == (void)v27;
          int v27 = v26;
        }
        while (!v28);
      }
      if (*v24 == v13) {
        *int v24 = v26;
      }
      size_t v29 = v24[1];
      v24[2] = (uint64_t *)((char *)v24[2] - 1);
      std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v29, v13);
      int v30 = (const void *)v13[8];
      if (v30) {
        _Block_release(v30);
      }
      if (*((char *)v13 + 55) < 0) {
        operator delete((void *)v13[4]);
      }
      operator delete(v13);
    }
    else if (v12 >= v21)
    {
      goto LABEL_41;
    }
  }
LABEL_54:
  if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void sub_26369C3B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void ResetDetection::invokeBlock_sync(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  memset(&__p, 170, sizeof(__p));
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string __p = *(std::string *)a2;
  }
  int v7 = *(NSObject **)(a2 + 24);
  uint64_t v6 = *(const void **)(a2 + 32);
  if (v6)
  {
    BOOL v8 = (void (**)(void *, void))_Block_copy(v6);
    *(void *)(a2 + 24) = 0;
    if (!v7) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  BOOL v8 = 0;
  *(void *)(a2 + 24) = 0;
  if (v7)
  {
LABEL_6:
    dispatch_source_cancel(v7);
    dispatch_release(v7);
  }
LABEL_7:
  BOOL v9 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    p_p = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)long long buf = 136315138;
    uint64_t v13 = p_p;
    _os_log_impl(&dword_26368A000, v9, OS_LOG_TYPE_DEFAULT, "#I Signalling %s", buf, 0xCu);
  }
  v8[2](v8, a3);
  _Block_release(v8);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_26369C530(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void __copy_helper_block_e8_40c39_ZTSNSt3__18weak_ptrI14ResetDetectionEE64c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(void *a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 48);
  a1[5] = *(void *)(a2 + 40);
  a1[6] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = (std::string *)(a1 + 8);
  if (*(char *)(a2 + 87) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)(a2 + 64), *(void *)(a2 + 72));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 64);
    a1[10] = *(void *)(a2 + 80);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  }
}

void sub_26369C5E4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 48);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_40c39_ZTSNSt3__18weak_ptrI14ResetDetectionEE64c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1)
{
  if (*(char *)(a1 + 87) < 0)
  {
    operator delete(*(void **)(a1 + 64));
    uint64_t v2 = *(std::__shared_weak_count **)(a1 + 48);
    if (!v2) {
      return;
    }
  }
  else
  {
    uint64_t v2 = *(std::__shared_weak_count **)(a1 + 48);
    if (!v2) {
      return;
    }
  }

  std::__shared_weak_count::__release_weak(v2);
}

uint64_t std::pair<dispatch_source_s *,dispatch::block<void({block_pointer})(int)>>::~pair(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 8);
  if (v2) {
    _Block_release(v2);
  }
  return a1;
}

void ResetDetection::notifyResetDetectBlocks_sync(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = &v15;
  uint64_t v4 = *(char **)(a2 + 8);
  unsigned __int8 v15 = *(void **)a2;
  v16[0] = v4;
  uint64_t v5 = *(void *)(a2 + 16);
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 8) = 0;
  v16[1] = v5;
  if (v5) {
    uint64_t v3 = v4 + 16;
  }
  *uint64_t v3 = v16;
  *(void *)a2 = a2 + 8;
  uint64_t v6 = v15;
  if (v15 != v16)
  {
    while (1)
    {
      aBlock = (void *)0xAAAAAAAAAAAAAAAALL;
      *(void *)&long long v7 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
      *(_OWORD *)std::string __p = v7;
      long long v13 = v7;
      if (*((char *)v6 + 55) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)__p, (const std::string::value_type *)v6[4], v6[5]);
      }
      else
      {
        *(_OWORD *)std::string __p = *((_OWORD *)v6 + 2);
        *(void *)&long long v13 = v6[6];
      }
      BOOL v8 = (void *)v6[8];
      *((void *)&v13 + 1) = v6[7];
      if (v8) {
        BOOL v8 = _Block_copy(v8);
      }
      aBlock = v8;
      ResetDetection::invokeBlock_sync(a1, (uint64_t)__p, 0);
      if (aBlock) {
        _Block_release(aBlock);
      }
      if (SBYTE7(v13) < 0)
      {
        operator delete(__p[0]);
        BOOL v9 = (void *)v6[1];
        if (v9)
        {
          do
          {
LABEL_17:
            int v10 = v9;
            BOOL v9 = (void *)*v9;
          }
          while (v9);
          goto LABEL_5;
        }
      }
      else
      {
        BOOL v9 = (void *)v6[1];
        if (v9) {
          goto LABEL_17;
        }
      }
      do
      {
        int v10 = (void *)v6[2];
        BOOL v11 = *v10 == (void)v6;
        uint64_t v6 = v10;
      }
      while (!v11);
LABEL_5:
      uint64_t v6 = v10;
      if (v10 == v16)
      {
        uint64_t v4 = (char *)v16[0];
        break;
      }
    }
  }
  std::__tree<std::__value_type<std::string,std::pair<dispatch_source_s *,dispatch::block<void({block_pointer})(int)>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<dispatch_source_s *,dispatch::block<void({block_pointer})(int)>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<dispatch_source_s *,dispatch::block<void({block_pointer})(int)>>>>>::destroy(v4);
}

void sub_26369C7D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char *a15)
{
}

void sub_26369C7F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char *a15)
{
}

uint64_t std::pair<std::string const,std::pair<dispatch_source_s *,dispatch::block<void({block_pointer})(int)>>>::~pair(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 32);
  if (v2) {
    _Block_release(v2);
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void ResetDetection::resetDetectCallback(ResetDetection *this, void *a2, unsigned int a3, int a4, void *a5)
{
  v5[0] = MEMORY[0x263EF8330];
  v5[1] = 0x40000000;
  v5[2] = ___ZN14ResetDetection19resetDetectCallbackEPvjjS0__block_invoke;
  v5[3] = &__block_descriptor_tmp_6;
  v5[4] = this;
  int v6 = a4;
  ctu::SharedSynchronizable<ResetDetection>::execute_wrapped((uint64_t *)this + 9, (uint64_t)v5);
}

void ___ZN14ResetDetection19resetDetectCallbackEPvjjS0__block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  int v2 = *(_DWORD *)(a1 + 40);
  if (v2 == -469794815)
  {
    uint64_t v5 = *(NSObject **)(v1 + 40);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(state.opaque[0]) = 0;
      _os_log_impl(&dword_26368A000, v5, OS_LOG_TYPE_DEFAULT, "#I baseband alive detected", (uint8_t *)&state, 2u);
    }
    *(_DWORD *)(v1 + 128) = 0;
    ResetDetection::notifyResetDetectBlocks_sync(v1, v1 + 160);
  }
  else if (v2 == -469794816)
  {
    uint64_t v3 = _os_activity_create(&dword_26368A000, "Baseband state: reset detected", MEMORY[0x263EF8420], OS_ACTIVITY_FLAG_DEFAULT);
    state.opaque[1] = 0xAAAAAAAAAAAAAAAALL;
    state.opaque[0] = 0xAAAAAAAAAAAAAAAALL;
    os_activity_scope_enter(v3, &state);
    os_activity_scope_leave(&state);
    uint64_t v4 = *(NSObject **)(v1 + 40);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(state.opaque[0]) = 0;
      _os_log_impl(&dword_26368A000, v4, OS_LOG_TYPE_DEFAULT, "#I baseband reset detected", (uint8_t *)&state, 2u);
    }
    *(_DWORD *)(v1 + 128) = 1;
    ResetDetection::notifyResetDetectBlocks_sync(v1, v1 + 136);
    if (v3) {
      os_release(v3);
    }
  }
}

void sub_26369CA2C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ctu::os::scoped_activity::~scoped_activity((void **)va);
  _Unwind_Resume(a1);
}

void ctu::os::scoped_activity::~scoped_activity(void **this)
{
  uint64_t v1 = *this;
  if (v1) {
    os_release(v1);
  }
}

uint64_t ctu::Loggable<ResetDetection,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig(uint64_t a1)
{
  return MEMORY[0x270F97428](a1 + 8);
}

void ctu::Loggable<ResetDetection,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName(char *a1@<X8>)
{
  a1[23] = 12;
  strcpy(a1, "reset.detect");
}

uint64_t ctu::Loggable<ResetDetection,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return MEMORY[0x270F978E0](a1 + 8);
}

void *ctu::Loggable<ResetDetection,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_270EA5C38;
  MEMORY[0x263E68AF0](a1 + 1);
  return a1;
}

void ctu::Loggable<ResetDetection,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_270EA5C38;
  MEMORY[0x263E68AF0](a1 + 1);

  operator delete(a1);
}

void ctu::Loggable<ResetDetection,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(uint64_t a1)
{
  uint64_t v1 = a1 + 56;
  if (*(void *)(a1 + 56))
  {
    if (!*(void *)(a1 + 80) || (int v2 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(a1 + 80))) == 0) {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    uint64_t v3 = v2;
    ctu::LoggerCommonBase::getLogDomain((ctu::LoggerCommonBase *)(v1 - 48));
    ctu::TrackedLogger::registerLoggerToServer();
    if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_26369CC6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

void sub_26369CC88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void *std::shared_ptr<ResetDetection>::shared_ptr[abi:ne180100]<ResetDetection,std::shared_ptr<ResetDetection> ctu::SharedSynchronizable<ResetDetection>::make_shared_ptr<ResetDetection>(ResetDetection*)::{lambda(ResetDetection*)#1},void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  uint64_t v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = &v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&unk_270EA5C78;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)a2;
  a1[1] = v4;
  if (!a2) {
    return a1;
  }
  int v6 = *(std::__shared_weak_count **)(a2 + 80);
  if (v6)
  {
    if (v6->__shared_owners_ == -1)
    {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      *(void *)(a2 + 72) = a2;
      *(void *)(a2 + 80) = v4;
      std::__shared_weak_count::__release_weak(v6);
      if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
        goto LABEL_8;
      }
    }
    return a1;
  }
  atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  *(void *)(a2 + 72) = a2;
  *(void *)(a2 + 80) = v4;
  if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
LABEL_8:
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void sub_26369CDB4(void *a1)
{
  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[11], v1, (dispatch_function_t)std::shared_ptr<ResetDetection> ctu::SharedSynchronizable<ResetDetection>::make_shared_ptr<ResetDetection>(ResetDetection*)::{lambda(ResetDetection*)#1}::operator() const(ResetDetection*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_26369CDDC(_Unwind_Exception *a1)
{
}

void std::__shared_ptr_pointer<ResetDetection *,std::shared_ptr<ResetDetection> ctu::SharedSynchronizable<ResetDetection>::make_shared_ptr<ResetDetection>(ResetDetection*)::{lambda(ResetDetection *)#1},std::allocator<ResetDetection>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<ResetDetection *,std::shared_ptr<ResetDetection> ctu::SharedSynchronizable<ResetDetection>::make_shared_ptr<ResetDetection>(ResetDetection*)::{lambda(ResetDetection *)#1},std::allocator<ResetDetection>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<ResetDetection *,std::shared_ptr<ResetDetection> ctu::SharedSynchronizable<ResetDetection>::make_shared_ptr<ResetDetection>(ResetDetection*)::{lambda(ResetDetection *)#1},std::allocator<ResetDetection>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableI14ResetDetectionE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_") {
    return a1 + 24;
  }
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableI14ResetDetectionE15make_shared_ptrIS1_EENSt3__110shared_ptr"
                                "IT_EEPS6_EUlPS1_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableI14ResetDetectionE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableI14ResetDetectionE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24; {
  return 0;
  }
}

uint64_t std::shared_ptr<ResetDetection> ctu::SharedSynchronizable<ResetDetection>::make_shared_ptr<ResetDetection>(ResetDetection*)::{lambda(ResetDetection*)#1}::operator() const(ResetDetection*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void *ctu::Loggable<ResetDetection,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::Loggable<ctu::OsLogContext,std::shared_ptr<ctu::LogServer>&>(void *a1, uint64_t a2, void *a3)
{
  *a1 = &unk_270EA5C38;
  ctu::OsLogContext::OsLogContext();
  ctu::OsLogContext::OsLogContext();
  ctu::LoggerCommonBase::LoggerCommonBase();
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v8);
  a1[1] = &unk_270EA5428;
  a1[7] = *a3;
  uint64_t v5 = a3[1];
  a1[8] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&v7);
  return a1;
}

void sub_26369CF9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

void ctu::SharedLoggable<ResetDetection,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(void *a1)
{
  *a1 = &unk_270EA5C38;
  MEMORY[0x263E68AF0](a1 + 1);
  int v2 = a1[12];
  if (v2) {
    dispatch_release(v2);
  }
  unint64_t v3 = a1[11];
  if (v3) {
    dispatch_release(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[10];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }

  operator delete(a1);
}

void std::__tree<std::__value_type<std::string,std::pair<dispatch_source_s *,dispatch::block<void({block_pointer})(int)>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<dispatch_source_s *,dispatch::block<void({block_pointer})(int)>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<dispatch_source_s *,dispatch::block<void({block_pointer})(int)>>>>>::destroy(char *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,std::pair<dispatch_source_s *,dispatch::block<void({block_pointer})(int)>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<dispatch_source_s *,dispatch::block<void({block_pointer})(int)>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<dispatch_source_s *,dispatch::block<void({block_pointer})(int)>>>>>::destroy(*(void *)a1);
    std::__tree<std::__value_type<std::string,std::pair<dispatch_source_s *,dispatch::block<void({block_pointer})(int)>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<dispatch_source_s *,dispatch::block<void({block_pointer})(int)>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<dispatch_source_s *,dispatch::block<void({block_pointer})(int)>>>>>::destroy(*((void *)a1 + 1));
    int v2 = (const void *)*((void *)a1 + 8);
    if (v2) {
      _Block_release(v2);
    }
    if (a1[55] < 0)
    {
      operator delete(*((void **)a1 + 4));
      unint64_t v3 = a1;
    }
    else
    {
      unint64_t v3 = a1;
    }
    operator delete(v3);
  }
}

void ctu::SharedSynchronizable<ResetDetection>::execute_wrapped(uint64_t *a1, uint64_t a2)
{
  unint64_t v3 = (std::__shared_weak_count *)a1[1];
  if (!v3 || (uint64_t v5 = *a1, (v6 = std::__shared_weak_count::lock(v3)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v7 = v6;
  BOOL v8 = a1[2];
  block[0] = MEMORY[0x263EF8330];
  block[1] = 1174405120;
  block[2] = ___ZNK3ctu20SharedSynchronizableI14ResetDetectionE15execute_wrappedEU13block_pointerFvvE_block_invoke;
  block[3] = &unk_270EA5D00;
  void block[5] = v5;
  size_t v12 = v7;
  p_shared_owners = &v7->__shared_owners_;
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  block[4] = a2;
  dispatch_async(v8, block);
  int v10 = v12;
  if (!v12 || atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      return;
    }
LABEL_8:
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    return;
  }
  ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
  std::__shared_weak_count::__release_weak(v10);
  if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_8;
  }
}

uint64_t ___ZNK3ctu20SharedSynchronizableI14ResetDetectionE15execute_wrappedEU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t __copy_helper_block_e8_40c43_ZTSNSt3__110shared_ptrIK14ResetDetectionEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c43_ZTSNSt3__110shared_ptrIK14ResetDetectionEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void **std::vector<ResetInfo::RegexPatternAndReasonMask>::~vector[abi:ne180100](void **a1)
{
  uint64_t v2 = (void **)*a1;
  if (*a1)
  {
    unint64_t v3 = (void **)a1[1];
    uint64_t v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        if (*((char *)v3 - 9) < 0) {
          operator delete(*(v3 - 4));
        }
        v3 -= 4;
      }
      while (v3 != v2);
      uint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void ResetInfo::ResetInfo(ResetInfo *this)
{
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 13) = 0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((void *)this + 8) = 0;
}

{
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 13) = 0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((void *)this + 8) = 0;
}

uint64_t ResetInfo::ResetInfo(uint64_t a1, uint64_t a2, uint64_t a3, long long *a4, uint64_t a5, int a6, long long *a7)
{
  uint64_t v18 = 0;
  ctu::cf::assign();
  *(_OWORD *)a1 = 0uLL;
  *(void *)(a1 + 16) = v18;
  long long v17 = 0uLL;
  uint64_t v18 = 0;
  ctu::cf::assign();
  *(_OWORD *)(a1 + 24) = 0uLL;
  *(void *)(a1 + 40) = v18;
  if (*((char *)a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 48), *(const std::string::value_type **)a4, *((void *)a4 + 1));
  }
  else
  {
    long long v12 = *a4;
    *(void *)(a1 + 64) = *((void *)a4 + 2);
    *(_OWORD *)(a1 + 48) = v12;
  }
  if (*(char *)(a5 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a5, *(void *)(a5 + 8));
  }
  else {
    std::string __p = *(std::string *)a5;
  }
  *(void *)(a1 + 72) = Timestamp::convert((uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    *(_DWORD *)(a1 + 80) = a6;
    long long v13 = (std::string *)(a1 + 88);
    if ((*((char *)a7 + 23) & 0x80000000) == 0) {
      goto LABEL_9;
    }
LABEL_11:
    std::string::__init_copy_ctor_external(v13, *(const std::string::value_type **)a7, *((void *)a7 + 1));
    return a1;
  }
  *(_DWORD *)(a1 + 80) = a6;
  long long v13 = (std::string *)(a1 + 88);
  if (*((char *)a7 + 23) < 0) {
    goto LABEL_11;
  }
LABEL_9:
  long long v14 = *a7;
  v13->__r_.__value_.__r.__words[2] = *((void *)a7 + 2);
  *(_OWORD *)&v13->__r_.__value_.__l.__data_ = v14;
  return a1;
}

void sub_26369D52C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (*(char *)(v20 + 47) < 0) {
    operator delete(*v21);
  }
  if (*(char *)(v20 + 23) < 0) {
    operator delete(*(void **)v20);
  }
  _Unwind_Resume(exception_object);
}

void ResetInfo::ResetInfo(std::string *this, long long *a2, long long *a3, long long *a4, uint64_t a5, int a6, long long *a7)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
    long long v14 = this + 1;
    if ((*((char *)a3 + 23) & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else
  {
    long long v13 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v13;
    long long v14 = this + 1;
    if ((*((char *)a3 + 23) & 0x80000000) == 0)
    {
LABEL_3:
      long long v15 = *a3;
      v14->__r_.__value_.__r.__words[2] = *((void *)a3 + 2);
      *(_OWORD *)&v14->__r_.__value_.__l.__data_ = v15;
      goto LABEL_6;
    }
  }
  std::string::__init_copy_ctor_external(v14, *(const std::string::value_type **)a3, *((void *)a3 + 1));
LABEL_6:
  if (*((char *)a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this + 2, *(const std::string::value_type **)a4, *((void *)a4 + 1));
  }
  else
  {
    long long v16 = *a4;
    this[2].__r_.__value_.__r.__words[2] = *((void *)a4 + 2);
    *(_OWORD *)&this[2].__r_.__value_.__l.__data_ = v16;
  }
  if (*(char *)(a5 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a5, *(void *)(a5 + 8));
  }
  else {
    std::string __p = *(std::string *)a5;
  }
  this[3].__r_.__value_.__r.__words[0] = (std::string::size_type)Timestamp::convert((uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    LODWORD(this[3].__r_.__value_.__r.__words[1]) = a6;
    long long v17 = (std::string *)((char *)this + 88);
    if ((*((char *)a7 + 23) & 0x80000000) == 0) {
      goto LABEL_14;
    }
  }
  else
  {
    LODWORD(this[3].__r_.__value_.__r.__words[1]) = a6;
    long long v17 = (std::string *)((char *)this + 88);
    if ((*((char *)a7 + 23) & 0x80000000) == 0)
    {
LABEL_14:
      long long v18 = *a7;
      v17->__r_.__value_.__r.__words[2] = *((void *)a7 + 2);
      *(_OWORD *)&v17->__r_.__value_.__l.__data_ = v18;
      return;
    }
  }
  std::string::__init_copy_ctor_external(v17, *(const std::string::value_type **)a7, *((void *)a7 + 1));
}

void sub_26369D73C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (*(char *)(v14 + 47) < 0)
  {
    operator delete(*v15);
    if ((*(char *)(v14 + 23) & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((*(char *)(v14 + 23) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)v14);
  _Unwind_Resume(exception_object);
}

void ResetInfo::~ResetInfo(void **this)
{
  if (*((char *)this + 111) < 0)
  {
    operator delete(this[11]);
    if ((*((char *)this + 71) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*((char *)this + 47) & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }
  else if ((*((char *)this + 71) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(this[6]);
  if ((*((char *)this + 47) & 0x80000000) == 0)
  {
LABEL_4:
    if ((*((char *)this + 23) & 0x80000000) == 0) {
      return;
    }
LABEL_9:
    operator delete(*this);
    return;
  }
LABEL_8:
  operator delete(this[3]);
  if (*((char *)this + 23) < 0) {
    goto LABEL_9;
  }
}

{
  if (*((char *)this + 111) < 0)
  {
    operator delete(this[11]);
    if ((*((char *)this + 71) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*((char *)this + 47) & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }
  else if ((*((char *)this + 71) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(this[6]);
  if ((*((char *)this + 47) & 0x80000000) == 0)
  {
LABEL_4:
    if ((*((char *)this + 23) & 0x80000000) == 0) {
      return;
    }
LABEL_9:
    operator delete(*this);
    return;
  }
LABEL_8:
  operator delete(this[3]);
  if (*((char *)this + 23) < 0) {
    goto LABEL_9;
  }
}

void ResetInfo::getType(ResetInfo *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)this, *((void *)this + 1));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)this;
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 2);
  }
}

void ResetInfo::getSubType(ResetInfo *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 47) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 3), *((void *)this + 4));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 24);
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 5);
  }
}

void ResetInfo::getReason(ResetInfo *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 71) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 6), *((void *)this + 7));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *((_OWORD *)this + 3);
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 8);
  }
}

void ResetInfo::getTime(ResetInfo *this@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = *((void *)this + 9);
  uint64_t v4 = operator new(0x38uLL);
  v4[8] = 0;
  *(void *)uint64_t v4 = 0;
  *((void *)v4 + 1) = 0;
  *((void *)v4 + 2) = v6;
  uint64_t v5 = v4;
  v6[0] = v4;
  *((unsigned char *)v4 + 24) = 1;
  v6[1] = (void *)1;
  *((void *)v4 + 5) = v3;
  *((void *)v4 + 6) = 0xAAAAAAAA00000000;
  Timestamp::asString((uint64_t)&v5, 0, 9, a2);
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&v5, v6[0]);
}

void sub_26369DA00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, void *a11)
{
}

uint64_t ResetInfo::getChronoTime(ResetInfo *this)
{
  return *((void *)this + 9);
}

uint64_t ResetInfo::getRadar(ResetInfo *this)
{
  return *((unsigned int *)this + 20);
}

void ResetInfo::getCrashReason(ResetInfo *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 111) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 11), *((void *)this + 12));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 88);
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 13);
  }
}

void ResetInfo::setType(ResetInfo *this, const __CFString *a2)
{
  if (*((char *)this + 23) < 0) {
    operator delete(*(void **)this);
  }
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *(void *)((char *)this + 15) = 0;
  *((unsigned char *)this + 23) = 0;
}

void sub_26369DAF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ResetInfo::setSubType(ResetInfo *this, const __CFString *a2)
{
  if (*((char *)this + 47) < 0) {
    operator delete(*((void **)this + 3));
  }
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;
  *(void *)((char *)this + 39) = 0;
  *((unsigned char *)this + 47) = 0;
}

void sub_26369DBB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void **ResetInfo::setReason(uint64_t a1, void **a2)
{
  xpc_object_t result = (void **)(a1 + 48);
  if (result != a2)
  {
    if (*(char *)(a1 + 71) < 0)
    {
      size_t v5 = (size_t)a2[1];
      if (*((char *)a2 + 23) >= 0)
      {
        size_t v6 = *((unsigned __int8 *)a2 + 23);
      }
      else
      {
        a2 = (void **)*a2;
        size_t v6 = v5;
      }
      return std::string::__assign_no_alias<false>(result, a2, v6);
    }
    else if ((*((unsigned char *)a2 + 23) & 0x80) != 0)
    {
      return (void **)std::string::__assign_no_alias<true>(result, *a2, (size_t)a2[1]);
    }
    else
    {
      long long v4 = *(_OWORD *)a2;
      result[2] = a2[2];
      *(_OWORD *)xpc_object_t result = v4;
    }
  }
  return result;
}

void ResetInfo::setTime(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string __p = *(std::string *)a2;
  }
  *(void *)(a1 + 72) = Timestamp::convert((uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_26369DCAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ResetInfo::setRadar(uint64_t result, int a2)
{
  *(_DWORD *)(result + 80) = a2;
  return result;
}

void **ResetInfo::setCrashReason(uint64_t a1, void **a2)
{
  xpc_object_t result = (void **)(a1 + 88);
  if (result != a2)
  {
    if (*(char *)(a1 + 111) < 0)
    {
      size_t v5 = (size_t)a2[1];
      if (*((char *)a2 + 23) >= 0)
      {
        size_t v6 = *((unsigned __int8 *)a2 + 23);
      }
      else
      {
        a2 = (void **)*a2;
        size_t v6 = v5;
      }
      return std::string::__assign_no_alias<false>(result, a2, v6);
    }
    else if ((*((unsigned char *)a2 + 23) & 0x80) != 0)
    {
      return (void **)std::string::__assign_no_alias<true>(result, *a2, (size_t)a2[1]);
    }
    else
    {
      long long v4 = *(_OWORD *)a2;
      result[2] = a2[2];
      *(_OWORD *)xpc_object_t result = v4;
    }
  }
  return result;
}

uint64_t ResetInfo::asString@<X0>(ResetInfo *this@<X0>, unsigned char *a2@<X8>)
{
  if (ResetInfo::readResetReasonPatterns(void)::sOnce != -1) {
    dispatch_once(&ResetInfo::readResetReasonPatterns(void)::sOnce, &__block_literal_global);
  }
  unint64_t v54 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v53[7] = v4;
  v53[8] = v4;
  v53[5] = v4;
  v53[6] = v4;
  v53[3] = v4;
  v53[4] = v4;
  v53[1] = v4;
  v53[2] = v4;
  long long v52 = v4;
  v53[0] = v4;
  *(_OWORD *)int v50 = v4;
  long long v51 = v4;
  long long v48 = v4;
  long long v49 = v4;
  long long v46 = v4;
  long long v47 = v4;
  long long v45 = v4;
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v45);
  size_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v46, (uint64_t)"ResetInfo { Type='", 18);
  int v6 = *((char *)this + 23);
  if (v6 >= 0) {
    uint64_t v7 = this;
  }
  else {
    uint64_t v7 = *(ResetInfo **)this;
  }
  if (v6 >= 0) {
    uint64_t v8 = *((unsigned __int8 *)this + 23);
  }
  else {
    uint64_t v8 = *((void *)this + 1);
  }
  BOOL v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)v7, v8);
  int v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"' SubType='", 11);
  int v11 = *((char *)this + 47);
  if (v11 >= 0) {
    long long v12 = (char *)this + 24;
  }
  else {
    long long v12 = (char *)*((void *)this + 3);
  }
  if (v11 >= 0) {
    uint64_t v13 = *((unsigned __int8 *)this + 47);
  }
  else {
    uint64_t v13 = *((void *)this + 4);
  }
  uint64_t v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)v12, v13);
  long long v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"' Time='", 8);
  uint64_t v16 = *((void *)this + 9);
  v56 = 0;
  uint64_t v57 = 0;
  xpc_object_t v55 = &v56;
  long long v17 = operator new(0x38uLL);
  v17[8] = 0;
  *(void *)long long v17 = 0;
  *((void *)v17 + 1) = 0;
  *((void *)v17 + 2) = &v56;
  xpc_object_t v55 = (void **)v17;
  v56 = v17;
  *((unsigned char *)v17 + 24) = 1;
  uint64_t v57 = 1;
  *((void *)v17 + 5) = v16;
  *((void *)v17 + 6) = 0xAAAAAAAA00000000;
  Timestamp::asString((uint64_t)&v55, 0, 9, __p);
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&v55, v56);
  if ((v44 & 0x80u) == 0) {
    long long v18 = __p;
  }
  else {
    long long v18 = (void **)__p[0];
  }
  if ((v44 & 0x80u) == 0) {
    uint64_t v19 = v44;
  }
  else {
    uint64_t v19 = (uint64_t)__p[1];
  }
  uint64_t v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v18, v19);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"' Radar='", 9);
  size_t v21 = (void *)std::ostream::operator<<();
  size_t v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"' Reason='", 10);
  int v23 = (char *)this + 48;
  int v24 = *((char *)this + 71);
  if (v24 >= 0) {
    size_t v25 = (char *)this + 48;
  }
  else {
    size_t v25 = (char *)*((void *)this + 6);
  }
  if (v24 >= 0) {
    uint64_t v26 = *((unsigned __int8 *)this + 71);
  }
  else {
    uint64_t v26 = *((void *)this + 7);
  }
  int v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)v25, v26);
  BOOL v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"' MTBF='", 8);
  *(_DWORD *)((char *)v28 + *(void *)(*v28 - 24) + 8) |= 1u;
  ResetInfo::isMTBF((ResetInfo **)this);
  size_t v29 = (void *)std::ostream::operator<<();
  int v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"' SCD='", 7);
  *(_DWORD *)((char *)v30 + *(void *)(*v30 - 24) + 8) |= 1u;
  ResetInfo::reasonMatchesAtLeastOneApplicablePattern(2, (uint64_t)v23, (long long **)&ResetInfo::sPatternMasks);
  int v31 = (void *)std::ostream::operator<<();
  unint64_t v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"' COF='", 7);
  *(_DWORD *)((char *)v32 + *(void *)(*v32 - 24) + 8) |= 1u;
  ResetInfo::reasonMatchesAtLeastOneApplicablePattern(4, (uint64_t)v23, (long long **)&ResetInfo::sPatternMasks);
  uint64_t v33 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)"' }", 3);
  if (((char)v44 & 0x80000000) == 0)
  {
    char v34 = BYTE8(v52);
    if ((BYTE8(v52) & 0x10) == 0) {
      goto LABEL_29;
    }
LABEL_32:
    uint64_t v36 = v52;
    if ((unint64_t)v52 < *((void *)&v49 + 1))
    {
      *(void *)&long long v52 = *((void *)&v49 + 1);
      uint64_t v36 = *((void *)&v49 + 1);
    }
    int v37 = (const void *)v49;
    size_t v35 = v36 - v49;
    if ((unint64_t)(v36 - v49) >= 0x7FFFFFFFFFFFFFF8) {
      goto LABEL_46;
    }
    goto LABEL_35;
  }
  operator delete(__p[0]);
  char v34 = BYTE8(v52);
  if ((BYTE8(v52) & 0x10) != 0) {
    goto LABEL_32;
  }
LABEL_29:
  if ((v34 & 8) == 0)
  {
    size_t v35 = 0;
    a2[23] = 0;
    goto LABEL_42;
  }
  int v37 = (const void *)*((void *)&v47 + 1);
  size_t v35 = *((void *)&v48 + 1) - *((void *)&v47 + 1);
  if (*((void *)&v48 + 1) - *((void *)&v47 + 1) >= 0x7FFFFFFFFFFFFFF8uLL) {
LABEL_46:
  }
    std::string::__throw_length_error[abi:ne180100]();
LABEL_35:
  if (v35 >= 0x17)
  {
    uint64_t v38 = (v35 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v35 | 7) != 0x17) {
      uint64_t v38 = v35 | 7;
    }
    uint64_t v39 = v38 + 1;
    size_t v40 = operator new(v38 + 1);
    *((void *)a2 + 1) = v35;
    *((void *)a2 + 2) = v39 | 0x8000000000000000;
    *(void *)a2 = v40;
    a2 = v40;
    goto LABEL_41;
  }
  a2[23] = v35;
  if (v35) {
LABEL_41:
  }
    memmove(a2, v37, v35);
LABEL_42:
  a2[v35] = 0;
  *(void *)&long long v45 = *MEMORY[0x263F8C2B8];
  uint64_t v41 = *(void *)(MEMORY[0x263F8C2B8] + 72);
  *(void *)((char *)&v45 + *(void *)(v45 - 24)) = *(void *)(MEMORY[0x263F8C2B8] + 64);
  *(void *)&long long v46 = v41;
  *((void *)&v46 + 1) = MEMORY[0x263F8C318] + 16;
  if (SHIBYTE(v51) < 0) {
    operator delete(v50[1]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x263E69630](v53);
}

void sub_26369E220(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy(v5 - 88, *(void **)(v5 - 80));
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_26369E240(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_26369E254(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_26369E268(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void ResetInfo::readResetReasonPatterns(ResetInfo *this)
{
  if (ResetInfo::readResetReasonPatterns(void)::sOnce != -1) {
    dispatch_once(&ResetInfo::readResetReasonPatterns(void)::sOnce, &__block_literal_global);
  }
}

uint64_t ResetInfo::isMTBF(ResetInfo **this)
{
  uint64_t v2 = (char *)*MEMORY[0x263F26178];
  if (*((char *)this + 23) < 0)
  {
    long long v4 = *this;
    int64_t v3 = (int64_t)this[1];
    int64_t v5 = strlen((const char *)*MEMORY[0x263F26178]);
    if (!v5) {
      return ResetInfo::reasonMatchesAtLeastOneApplicablePattern(1, (uint64_t)(this + 6), (long long **)&ResetInfo::sPatternMasks) ^ 1;
    }
  }
  else
  {
    int64_t v3 = *((unsigned __int8 *)this + 23);
    long long v4 = (ResetInfo *)this;
    int64_t v5 = strlen((const char *)*MEMORY[0x263F26178]);
    if (!v5) {
      return ResetInfo::reasonMatchesAtLeastOneApplicablePattern(1, (uint64_t)(this + 6), (long long **)&ResetInfo::sPatternMasks) ^ 1;
    }
  }
  int64_t v6 = v5;
  if (v3 < v5) {
    return 0;
  }
  uint64_t v8 = (char *)v4 + v3;
  int v9 = *v2;
  int v10 = v4;
  while (1)
  {
    if (v3 - v6 == -1) {
      return 0;
    }
    uint64_t result = (uint64_t)memchr(v10, v9, v3 - v6 + 1);
    if (!result) {
      return result;
    }
    uint64_t v11 = result;
    uint64_t result = memcmp((const void *)result, v2, v6);
    if (!result) {
      break;
    }
    int v10 = (ResetInfo *)(v11 + 1);
    int64_t v3 = (int64_t)&v8[-v11 - 1];
    if (v3 < v6) {
      return 0;
    }
  }
  if ((char *)v11 != v8 && v11 - (void)v4 != -1) {
    return ResetInfo::reasonMatchesAtLeastOneApplicablePattern(1, (uint64_t)(this + 6), (long long **)&ResetInfo::sPatternMasks) ^ 1;
  }
  return result;
}

uint64_t ResetInfo::shouldSetSCD(ResetInfo *this)
{
  return ResetInfo::reasonMatchesAtLeastOneApplicablePattern(2, (uint64_t)this + 48, (long long **)&ResetInfo::sPatternMasks);
}

uint64_t ResetInfo::shouldSetCOF(ResetInfo *this)
{
  return ResetInfo::reasonMatchesAtLeastOneApplicablePattern(4, (uint64_t)this + 48, (long long **)&ResetInfo::sPatternMasks);
}

uint64_t ResetInfo::addToDict(uint64_t result, __CFDictionary **a2, uint64_t a3, uint64_t a4, const __CFAllocator *a5)
{
  if (*a2) {
    int64_t v5 = ctu::SharedRef<__CFDictionary,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary>::get;
  }
  else {
    int64_t v5 = 0;
  }
  if (v5)
  {
    uint64_t v7 = result;
    if (ResetInfo::readResetReasonPatterns(void)::sOnce != -1) {
      dispatch_once(&ResetInfo::readResetReasonPatterns(void)::sOnce, &__block_literal_global);
    }
    CFAllocatorRef v8 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    int v9 = *a2;
    int v10 = (const __CFString **)*MEMORY[0x263F26148];
    if (*(char *)(v7 + 23) < 0) {
      std::string::__init_copy_ctor_external(&v30, *(const std::string::value_type **)v7, *(void *)(v7 + 8));
    }
    else {
      std::string v30 = *(std::string *)v7;
    }
    ctu::cf::update<char const*,std::string>(v9, v10, (uint64_t)&v30, (uint64_t)v8, a5);
    if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v30.__r_.__value_.__l.__data_);
      long long v12 = *a2;
      uint64_t v13 = (const __CFString **)*MEMORY[0x263F26368];
      if ((*(char *)(v7 + 47) & 0x80000000) == 0) {
        goto LABEL_12;
      }
    }
    else
    {
      long long v12 = *a2;
      uint64_t v13 = (const __CFString **)*MEMORY[0x263F26368];
      if ((*(char *)(v7 + 47) & 0x80000000) == 0)
      {
LABEL_12:
        std::string v30 = *(std::string *)(v7 + 24);
        goto LABEL_15;
      }
    }
    std::string::__init_copy_ctor_external(&v30, *(const std::string::value_type **)(v7 + 24), *(void *)(v7 + 32));
LABEL_15:
    ctu::cf::update<char const*,std::string>(v12, v13, (uint64_t)&v30, (uint64_t)v8, v11);
    if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v30.__r_.__value_.__l.__data_);
    }
    long long v15 = (_OWORD *)(v7 + 48);
    uint64_t v16 = *a2;
    long long v17 = (const __CFString **)*MEMORY[0x263F262A8];
    if (*(char *)(v7 + 71) < 0)
    {
      std::string::__init_copy_ctor_external(&v30, *(const std::string::value_type **)(v7 + 48), *(void *)(v7 + 56));
    }
    else
    {
      *(_OWORD *)&v30.__r_.__value_.__l.__data_ = *v15;
      v30.__r_.__value_.__r.__words[2] = *(void *)(v7 + 64);
    }
    ctu::cf::update<char const*,std::string>(v16, v17, (uint64_t)&v30, (uint64_t)v8, v14);
    if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v30.__r_.__value_.__l.__data_);
    }
    uint64_t v18 = *(void *)(v7 + 72);
    uint64_t v19 = operator new(0x38uLL);
    v19[8] = 0;
    *(void *)uint64_t v19 = 0;
    *((void *)v19 + 1) = 0;
    *((void *)v19 + 2) = &v30.__r_.__value_.__l.__size_;
    v30.__r_.__value_.__r.__words[0] = (std::string::size_type)v19;
    v30.__r_.__value_.__l.__size_ = (std::string::size_type)v19;
    *((unsigned char *)v19 + 24) = 1;
    v30.__r_.__value_.__r.__words[2] = 1;
    *((void *)v19 + 5) = v18;
    *((void *)v19 + 6) = 0xAAAAAAAA00000000;
    Timestamp::asString((uint64_t)&v30, 0, 9, &__p);
    std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&v30, (void *)v30.__r_.__value_.__l.__size_);
    size_t v21 = *a2;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v30, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    }
    else {
      std::string v30 = __p;
    }
    ctu::cf::update<char const*,std::string>(v21, (const __CFString **)*MEMORY[0x263F26030], (uint64_t)&v30, (uint64_t)v8, v20);
    if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v30.__r_.__value_.__l.__data_);
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_27;
      }
    }
    else if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_27:
      ctu::cf::update<char const*,unsigned int>(*a2, (const __CFString **)*MEMORY[0x263F25E10], *(_DWORD *)(v7 + 80), v8, v22);
      int isMTBF = ResetInfo::isMTBF((ResetInfo **)v7);
      ctu::cf::update<char const*,BOOL>(*a2, (const __CFString **)*MEMORY[0x263F262A0], isMTBF, (uint64_t)v8, v24);
      int v25 = ResetInfo::reasonMatchesAtLeastOneApplicablePattern(2, (uint64_t)v15, (long long **)&ResetInfo::sPatternMasks);
      ctu::cf::update<char const*,BOOL>(*a2, (const __CFString **)*MEMORY[0x263F262B8], v25, (uint64_t)v8, v26);
      int v27 = ResetInfo::reasonMatchesAtLeastOneApplicablePattern(4, (uint64_t)v15, (long long **)&ResetInfo::sPatternMasks);
      return ctu::cf::update<char const*,BOOL>(*a2, (const __CFString **)*MEMORY[0x263F262B0], v27, (uint64_t)v8, v28);
    }
    operator delete(__p.__r_.__value_.__l.__data_);
    goto LABEL_27;
  }
  return result;
}

void sub_26369E73C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ResetInfo::addToDict(ResetInfo *this, xpc_object_t *a2)
{
  if (MEMORY[0x263E6A240](*a2) != MEMORY[0x263EF8708]) {
    return;
  }
  if (ResetInfo::readResetReasonPatterns(void)::sOnce != -1)
  {
    dispatch_once(&ResetInfo::readResetReasonPatterns(void)::sOnce, &__block_literal_global);
    long long v4 = (const char *)this;
    if ((*((char *)this + 23) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  long long v4 = (const char *)this;
  if (*((char *)this + 23) < 0) {
LABEL_4:
  }
    long long v4 = *(const char **)this;
LABEL_5:
  xpc_object_t v5 = xpc_string_create(v4);
  if (!v5) {
    xpc_object_t v5 = xpc_null_create();
  }
  xpc_dictionary_set_value(*a2, (const char *)*MEMORY[0x263F26148], v5);
  xpc_object_t v6 = xpc_null_create();
  xpc_release(v5);
  xpc_release(v6);
  uint64_t v7 = (char *)this + 24;
  if (*((char *)this + 47) < 0) {
    uint64_t v7 = *(const char **)v7;
  }
  xpc_object_t v8 = xpc_string_create(v7);
  if (!v8) {
    xpc_object_t v8 = xpc_null_create();
  }
  xpc_dictionary_set_value(*a2, (const char *)*MEMORY[0x263F26368], v8);
  xpc_object_t v9 = xpc_null_create();
  xpc_release(v8);
  xpc_release(v9);
  int v10 = (const char **)((char *)this + 48);
  CFAllocatorRef v11 = (char *)this + 48;
  if (*((char *)this + 71) < 0) {
    CFAllocatorRef v11 = *v10;
  }
  xpc_object_t v12 = xpc_string_create(v11);
  if (!v12) {
    xpc_object_t v12 = xpc_null_create();
  }
  xpc_dictionary_set_value(*a2, (const char *)*MEMORY[0x263F262A8], v12);
  xpc_object_t v13 = xpc_null_create();
  xpc_release(v12);
  xpc_release(v13);
  uint64_t v14 = *((void *)this + 9);
  long long v15 = operator new(0x38uLL);
  v15[8] = 0;
  *(void *)long long v15 = 0;
  *((void *)v15 + 1) = 0;
  *((void *)v15 + 2) = v33;
  unint64_t v32 = v15;
  v33[0] = v15;
  *((unsigned char *)v15 + 24) = 1;
  v33[1] = (void *)1;
  *((void *)v15 + 5) = v14;
  *((void *)v15 + 6) = 0xAAAAAAAA00000000;
  Timestamp::asString((uint64_t)&v32, 0, 9, __p);
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&v32, v33[0]);
  if (v31 >= 0) {
    uint64_t v16 = __p;
  }
  else {
    uint64_t v16 = (void **)__p[0];
  }
  xpc_object_t v17 = xpc_string_create((const char *)v16);
  if (!v17) {
    xpc_object_t v17 = xpc_null_create();
  }
  xpc_dictionary_set_value(*a2, (const char *)*MEMORY[0x263F26030], v17);
  xpc_object_t v18 = xpc_null_create();
  xpc_release(v17);
  xpc_release(v18);
  if (v31 < 0) {
    operator delete(__p[0]);
  }
  xpc_object_t v19 = xpc_int64_create(*((unsigned int *)this + 20));
  if (!v19) {
    xpc_object_t v19 = xpc_null_create();
  }
  xpc_dictionary_set_value(*a2, (const char *)*MEMORY[0x263F25E10], v19);
  xpc_object_t v20 = xpc_null_create();
  xpc_release(v19);
  xpc_release(v20);
  char isMTBF = ResetInfo::isMTBF((ResetInfo **)this);
  xpc_object_t v22 = xpc_BOOL_create(isMTBF);
  if (!v22) {
    xpc_object_t v22 = xpc_null_create();
  }
  xpc_dictionary_set_value(*a2, (const char *)*MEMORY[0x263F262A0], v22);
  xpc_object_t v23 = xpc_null_create();
  xpc_release(v22);
  xpc_release(v23);
  char v24 = ResetInfo::reasonMatchesAtLeastOneApplicablePattern(2, (uint64_t)v10, (long long **)&ResetInfo::sPatternMasks);
  xpc_object_t v25 = xpc_BOOL_create(v24);
  if (!v25) {
    xpc_object_t v25 = xpc_null_create();
  }
  xpc_dictionary_set_value(*a2, (const char *)*MEMORY[0x263F262B8], v25);
  xpc_object_t v26 = xpc_null_create();
  xpc_release(v25);
  xpc_release(v26);
  char v27 = ResetInfo::reasonMatchesAtLeastOneApplicablePattern(4, (uint64_t)v10, (long long **)&ResetInfo::sPatternMasks);
  xpc_object_t v28 = xpc_BOOL_create(v27);
  if (!v28) {
    xpc_object_t v28 = xpc_null_create();
  }
  xpc_dictionary_set_value(*a2, (const char *)*MEMORY[0x263F262B0], v28);
  xpc_object_t v29 = xpc_null_create();
  xpc_release(v28);
  xpc_release(v29);
}

void sub_26369EBB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, void *a13)
{
}

void ResetInfo::fetchFromDict(void **this, xpc_object_t *a2)
{
  if (MEMORY[0x263E6A240](*a2) != MEMORY[0x263EF8708]) {
    return;
  }
  xpc_object_t value = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x263F26148]);
  xpc_object_t object = value;
  if (value) {
    xpc_retain(value);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  std::string __p = 0;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  xpc::dyn_cast_or_default();
  if (*((char *)this + 23) < 0) {
    operator delete(*this);
  }
  *(_OWORD *)this = v14;
  this[2] = v15;
  HIBYTE(v15) = 0;
  LOBYTE(v14) = 0;
  xpc_release(object);
  xpc_object_t v5 = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x263F26368]);
  xpc_object_t object = v5;
  if (v5) {
    xpc_retain(v5);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  std::string __p = 0;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  xpc::dyn_cast_or_default();
  xpc_object_t v6 = this + 3;
  if (*((char *)this + 47) < 0) {
    operator delete(*v6);
  }
  *(_OWORD *)xpc_object_t v6 = v14;
  this[5] = v15;
  HIBYTE(v15) = 0;
  LOBYTE(v14) = 0;
  xpc_release(object);
  xpc_object_t v7 = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x263F262A8]);
  xpc_object_t object = v7;
  if (v7) {
    xpc_retain(v7);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  std::string __p = 0;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  xpc::dyn_cast_or_default();
  xpc_object_t v8 = this + 6;
  if (*((char *)this + 71) < 0) {
    operator delete(*v8);
  }
  *(_OWORD *)xpc_object_t v8 = v14;
  this[8] = v15;
  HIBYTE(v15) = 0;
  LOBYTE(v14) = 0;
  xpc_release(object);
  xpc_object_t v9 = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x263F26030]);
  xpc_object_t object = v9;
  if (v9) {
    xpc_retain(v9);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  Timestamp::Timestamp((Timestamp *)&v14);
  Timestamp::asString((uint64_t)&v14, 0, 9, &__p);
  xpc::dyn_cast_or_default();
  this[9] = Timestamp::convert((uint64_t)&v11);
  if (v12 < 0)
  {
    operator delete(v11);
    if ((SHIBYTE(v18) & 0x80000000) == 0) {
      goto LABEL_22;
    }
LABEL_25:
    operator delete(__p);
    goto LABEL_22;
  }
  if (SHIBYTE(v18) < 0) {
    goto LABEL_25;
  }
LABEL_22:
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&v14, *((void **)&v14 + 1));
  xpc_release(object);
  xpc_object_t v10 = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x263F25E10]);
  std::string __p = v10;
  if (v10) {
    xpc_retain(v10);
  }
  else {
    std::string __p = xpc_null_create();
  }
  *((_DWORD *)this + 20) = xpc::dyn_cast_or_default((xpc *)&__p, (const object *)7);
  xpc_release(__p);
}

void sub_26369EF0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, xpc_object_t a15, char a16, uint64_t a17, uint64_t a18, xpc_object_t object, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
}

uint64_t ResetInfo::reasonMatchesAtLeastOneApplicablePattern(int a1, uint64_t a2, long long **a3)
{
  uint64_t v57 = *MEMORY[0x263EF8340];
  int64_t v3 = *a3;
  size_t v35 = a3[1];
  if (*a3 != v35)
  {
    int v4 = 0;
    while (1)
    {
      *(void *)&long long v5 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
      *(_OWORD *)size_t v40 = v5;
      *(_OWORD *)&v40[16] = v5;
      if (*((char *)v3 + 23) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)v40, *(const std::string::value_type **)v3, *((void *)v3 + 1));
      }
      else
      {
        long long v6 = *v3;
        *(void *)&v40[16] = *((void *)v3 + 2);
        *(_OWORD *)size_t v40 = v6;
      }
      *(_DWORD *)&v40[24] = *((_DWORD *)v3 + 6);
      if ((*(_DWORD *)&v40[24] & a1) != 0)
      {
        memset(&v39, 170, sizeof(v39));
        if ((v40[23] & 0x80000000) != 0) {
          std::string::__init_copy_ctor_external(&v39, *(const std::string::value_type **)v40, *(std::string::size_type *)&v40[8]);
        }
        else {
          std::string v39 = *(std::string *)v40;
        }
        *(void *)&long long v8 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
        *(_OWORD *)&v38[16] = v8;
        *(_OWORD *)&v38[32] = v8;
        *(_OWORD *)&v37[0].__locale_ = v8;
        *(_OWORD *)uint64_t v38 = v8;
        MEMORY[0x263E695E0](v37);
        v37[1].__locale_ = (std::locale::__imp *)std::locale::use_facet(v37, MEMORY[0x263F8C108]);
        *(void *)uint64_t v38 = std::locale::use_facet(v37, MEMORY[0x263F8C130]);
        memset(&v38[8], 0, 40);
        std::string::size_type size = HIBYTE(v39.__r_.__value_.__r.__words[2]);
        if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          xpc_object_t v10 = &v39;
        }
        else {
          xpc_object_t v10 = (std::string *)v39.__r_.__value_.__r.__words[0];
        }
        if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type size = v39.__r_.__value_.__l.__size_;
        }
        if ((char *)v10 + size != std::basic_regex<char,std::regex_traits<char>>::__parse<std::__wrap_iter<char const*>>((uint64_t)v37, (char *)v10, (char *)v10 + size))std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)17>(); {
        uint64_t v11 = *(unsigned __int8 *)(a2 + 23);
        }
        if ((v11 & 0x80u) == 0) {
          char v12 = (std::sub_match<const char *> *)a2;
        }
        else {
          char v12 = *(std::sub_match<const char *> **)a2;
        }
        if ((v11 & 0x80u) != 0) {
          uint64_t v11 = *(void *)(a2 + 8);
        }
        xpc_object_t v13 = (char *)v12 + v11;
        *(void *)&long long v14 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v14 + 1) = 0xAAAAAAAAAAAAAAAALL;
        long long v47 = v14;
        unint64_t v44 = 0xAAAAAAAAAAAAAA00;
        *(void *)&v41[40] = 0xAAAAAAAAAAAAAAAALL;
        int v42 = 0;
        uint64_t v43 = 0;
        long long v45 = 0;
        long long v46 = 0;
        LOBYTE(v47) = 0;
        BYTE8(v47) = 0;
        long long v48 = 0;
        memset(v41, 0, 41);
        long long v55 = v14;
        unint64_t v52 = 0xAAAAAAAAAAAAAA00;
        v49[1].__end_cap_.__value_ = (std::sub_match<const char *> *)0xAAAAAAAAAAAAAAAALL;
        uint64_t v50 = 0;
        uint64_t v51 = 0;
        uint64_t v53 = 0;
        uint64_t v54 = 0;
        LOBYTE(v55) = 0;
        BYTE8(v55) = 0;
        uint64_t v56 = 0;
        memset(v49, 0, 41);
        int v15 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>((uint64_t)v37, v12, (std::sub_match<const char *> *)((char *)v12 + v11), v49, 4160);
        uint64_t v16 = v50;
        unint64_t v17 = 0xAAAAAAAAAAAAAAABLL * (((char *)v49[0].__end_ - (char *)v49[0].__begin_) >> 3);
        int64_t v19 = *(void *)&v41[8];
        uint64_t v18 = *(char **)v41;
        unint64_t v20 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)&v41[8] - *(void *)v41) >> 3);
        if (v17 <= v20)
        {
          if (v17 < v20)
          {
            int64_t v19 = *(void *)v41 + 8 * (((char *)v49[0].__end_ - (char *)v49[0].__begin_) >> 3);
            *(void *)&v41[8] = v19;
          }
        }
        else
        {
          std::vector<std::sub_match<std::__wrap_iter<char const*>>>::__append((std::vector<std::ssub_match> *)v41, v17 - v20);
          int64_t v19 = *(void *)&v41[8];
          uint64_t v18 = *(char **)v41;
        }
        if ((char *)v19 == v18)
        {
          begin = v49[0].__begin_;
        }
        else
        {
          uint64_t v21 = 0;
          unint64_t v22 = 0;
          std::vector<std::csub_match>::pointer end = v49[0].__end_;
          begin = v49[0].__begin_;
          do
          {
            unint64_t v25 = 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)begin) >> 3);
            xpc_object_t v26 = (std::vector<std::csub_match> *)&begin[v21];
            if (v25 <= v22) {
              xpc_object_t v26 = &v49[1];
            }
            *(void *)&v18[v21 * 24] = (char *)v12 + (unint64_t)v26->__begin_ - v16;
            if (0xAAAAAAAAAAAAAAABLL * (((char *)v49[0].__end_ - (char *)v49[0].__begin_) >> 3) <= v22) {
              p_std::vector<std::csub_match>::pointer end = &v49[1].__end_;
            }
            else {
              p_std::vector<std::csub_match>::pointer end = &v49[0].__begin_[v21].second;
            }
            *(void *)(*(void *)v41 + v21 * 24 + 8) = (char *)v12 + *p_end - v16;
            std::vector<std::csub_match>::pointer end = v49[0].__end_;
            begin = v49[0].__begin_;
            if (0xAAAAAAAAAAAAAAABLL * (((char *)v49[0].__end_ - (char *)v49[0].__begin_) >> 3) <= v22) {
              p_end_cap = &v49[1].__end_cap_;
            }
            else {
              p_end_cap = &v49[0].__begin_[v21].matched;
            }
            uint64_t v18 = *(char **)v41;
            *(unsigned char *)(*(void *)v41 + v21 * 24 + 16) = *p_end_cap;
            ++v22;
            ++v21;
          }
          while (v22 < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)&v41[8] - (void)v18) >> 3));
        }
        *(void *)&v41[24] = v13;
        *(void *)&v41[32] = v13;
        int v42 = (char *)v12 + v50 - v16;
        uint64_t v43 = (char *)v12 + v51 - v16;
        LOBYTE(v44) = v52;
        v41[40] = 0;
        long long v45 = (char *)v12 + v53 - v16;
        long long v46 = (char *)v12 + v54 - v16;
        int v29 = v55;
        LOBYTE(v47) = v55;
        long long v48 = v42;
        BYTE8(v47) = BYTE8(v55);
        if (begin)
        {
          v49[0].__end_ = begin;
          operator delete(begin);
          int v29 = v47;
          uint64_t v18 = *(char **)v41;
        }
        if (v29) {
          int v30 = v15 ^ 1;
        }
        else {
          int v30 = 1;
        }
        if (v18)
        {
          *(void *)&v41[8] = v18;
          operator delete(v18);
        }
        int v31 = v15 & v30;
        if (v31) {
          int v7 = 2;
        }
        else {
          int v7 = 0;
        }
        unint64_t v32 = *(std::__shared_weak_count **)&v38[32];
        if (*(void *)&v38[32]
          && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&v38[32] + 8), 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
          std::__shared_weak_count::__release_weak(v32);
          std::locale::~locale(v37);
          if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
          {
LABEL_60:
            operator delete(v39.__r_.__value_.__l.__data_);
            v4 |= v31;
            if ((v40[23] & 0x80000000) == 0) {
              goto LABEL_56;
            }
LABEL_55:
            operator delete(*(void **)v40);
            goto LABEL_56;
          }
        }
        else
        {
          std::locale::~locale(v37);
          if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
            goto LABEL_60;
          }
        }
        v4 |= v31;
        if ((v40[23] & 0x80000000) != 0) {
          goto LABEL_55;
        }
      }
      else
      {
        int v7 = 3;
        if ((v40[23] & 0x80000000) != 0) {
          goto LABEL_55;
        }
      }
LABEL_56:
      if (v7 == 3 || !v7)
      {
        v3 += 2;
        if (v3 != v35) {
          continue;
        }
      }
      return v4 & 1;
    }
  }
  LOBYTE(v4) = 0;
  return v4 & 1;
}

void sub_26369F508(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (a36 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_26369F514(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, std::locale a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void **__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,long long a52)
{
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)&a24);
  std::locale::~locale(&a19);
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    long long v55 = GetOsLogContext()[1];
    if (os_log_type_enabled(v55, OS_LOG_TYPE_ERROR))
    {
      p_p = (void **)&__p;
      if (a32 < 0) {
        p_p = __p;
      }
      *(_DWORD *)(v52 - 224) = 136315138;
      *(void *)((char *)&a52 + 4) = p_p;
      _os_log_error_impl(&dword_26368A000, v55, OS_LOG_TYPE_ERROR, "Exception with %s", (uint8_t *)(v52 - 224), 0xCu);
    }
    __cxa_rethrow();
  }
  if (a32 < 0) {
    operator delete(__p);
  }
  if (SHIBYTE(a36) < 0)
  {
    operator delete(a34);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x26369F62CLL);
}

void sub_26369F5F0()
{
}

void sub_26369F624(void *a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x26369F62CLL);
  }
  __clang_call_terminate(a1);
}

void std::basic_regex<char,std::regex_traits<char>>::~basic_regex(std::locale *this)
{
  uint64_t v1 = this;
  locale = (std::__shared_weak_count *)this[6].__locale_;
  if (locale && !atomic_fetch_add(&locale->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))locale->__on_zero_shared)(locale);
    std::__shared_weak_count::__release_weak(locale);
    this = v1;
  }
  else if (((vars8 ^ (2 * vars8)) & 0x4000000000000000) != 0)
  {
    __break(0xC471u);
  }
  std::locale::~locale(this);
}

void ___ZN9ResetInfo23readResetReasonPatternsEv_block_invoke()
{
  v0 = GetOsLogContext()[1];
  if (os_log_type_enabled(v0, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t v1 = 0;
    _os_log_debug_impl(&dword_26368A000, v0, OS_LOG_TYPE_DEBUG, "Default pattern masks will be used", v1, 2u);
  }
  std::vector<ResetInfo::RegexPatternAndReasonMask>::__assign_with_size[abi:ne180100]<ResetInfo::RegexPatternAndReasonMask*,ResetInfo::RegexPatternAndReasonMask*>((void **)&ResetInfo::sPatternMasks, (void **)kDefaultPatternMasks, (char *)qword_26B431B48, (qword_26B431B48 - kDefaultPatternMasks) >> 5);
}

void ***std::__exception_guard_exceptions<std::vector<ResetInfo::RegexPatternAndReasonMask>::__destroy_vector>::~__exception_guard_exceptions[abi:ne180100](void ***result)
{
  uint64_t v1 = result;
  if (!*((unsigned char *)result + 8))
  {
    uint64_t v2 = *result;
    int64_t v3 = (void **)**result;
    if (v3)
    {
      int v4 = (void **)v2[1];
      long long v5 = **result;
      if (v4 != v3)
      {
        do
        {
          if (*((char *)v4 - 9) < 0) {
            operator delete(*(v4 - 4));
          }
          v4 -= 4;
        }
        while (v4 != v3);
        long long v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

void std::vector<ResetInfo::RegexPatternAndReasonMask>::__assign_with_size[abi:ne180100]<ResetInfo::RegexPatternAndReasonMask*,ResetInfo::RegexPatternAndReasonMask*>(void **a1, void **a2, char *a3, unint64_t a4)
{
  uint64_t v8 = (uint64_t)a1[2];
  xpc_object_t v9 = (void **)*a1;
  if (a4 <= (v8 - (uint64_t)*a1) >> 5)
  {
    char v12 = (void **)a1[1];
    unint64_t v13 = ((char *)v12 - (char *)v9) >> 5;
    if (v13 >= a4)
    {
      if (a2 != (void **)a3)
      {
        unint64_t v23 = 0;
        do
        {
          xpc_object_t v26 = (char *)&v9[v23];
          char v27 = (char *)&a2[v23];
          if (a2 != v9)
          {
            char v28 = v27[23];
            if (v26[23] < 0)
            {
              if (v28 >= 0) {
                char v24 = (char *)&a2[v23];
              }
              else {
                char v24 = (char *)a2[v23];
              }
              if (v28 >= 0) {
                size_t v25 = v27[23];
              }
              else {
                size_t v25 = (size_t)a2[v23 + 1];
              }
              std::string::__assign_no_alias<false>(&v9[v23], v24, v25);
            }
            else if (v27[23] < 0)
            {
              std::string::__assign_no_alias<true>(&v9[v23], a2[v23], (size_t)a2[v23 + 1]);
            }
            else
            {
              long long v29 = *(_OWORD *)v27;
              *((void *)v26 + 2) = *((void *)v27 + 2);
              *(_OWORD *)xpc_object_t v26 = v29;
            }
          }
          *((_DWORD *)v26 + 6) = *((_DWORD *)v27 + 6);
          v23 += 4;
        }
        while (&a2[v23] != (void **)a3);
        char v12 = (void **)a1[1];
        xpc_object_t v9 = (void **)((char *)v9 + v23 * 8);
      }
      while (v12 != v9)
      {
        if (*((char *)v12 - 9) < 0) {
          operator delete(*(v12 - 4));
        }
        v12 -= 4;
      }
      a1[1] = v9;
    }
    else
    {
      long long v14 = (char *)&a2[4 * v13];
      if (v12 != v9)
      {
        unint64_t v15 = 0;
        uint64_t v16 = 32 * v13;
        do
        {
          int64_t v19 = (char *)&v9[v15 / 8];
          unint64_t v20 = (char *)&a2[v15 / 8];
          if (a2 != v9)
          {
            char v21 = v20[23];
            if (v19[23] < 0)
            {
              if (v21 >= 0) {
                unint64_t v17 = (char *)&a2[v15 / 8];
              }
              else {
                unint64_t v17 = (char *)a2[v15 / 8];
              }
              if (v21 >= 0) {
                size_t v18 = v20[23];
              }
              else {
                size_t v18 = (size_t)a2[v15 / 8 + 1];
              }
              std::string::__assign_no_alias<false>(&v9[v15 / 8], v17, v18);
            }
            else if (v20[23] < 0)
            {
              std::string::__assign_no_alias<true>(&v9[v15 / 8], a2[v15 / 8], (size_t)a2[v15 / 8 + 1]);
            }
            else
            {
              long long v22 = *(_OWORD *)v20;
              *((void *)v19 + 2) = *((void *)v20 + 2);
              *(_OWORD *)int64_t v19 = v22;
            }
          }
          *((_DWORD *)v19 + 6) = *((_DWORD *)v20 + 6);
          v15 += 32;
        }
        while (v16 != v15);
        xpc_object_t v9 = (void **)a1[1];
      }
      uint64_t v38 = (char *)v9;
      if (v14 != a3)
      {
        uint64_t v39 = 0;
        do
        {
          uint64_t v41 = (std::string *)&v9[v39];
          int v42 = &v14[v39 * 8];
          if (v14[v39 * 8 + 23] < 0)
          {
            std::string::__init_copy_ctor_external(v41, *(const std::string::value_type **)v42, *((void *)v42 + 1));
          }
          else
          {
            long long v40 = *(_OWORD *)v42;
            v41->__r_.__value_.__r.__words[2] = *((void *)v42 + 2);
            *(_OWORD *)&v41->__r_.__value_.__l.__data_ = v40;
          }
          LODWORD(v9[v39 + 3]) = *(_DWORD *)&v14[v39 * 8 + 24];
          v39 += 4;
        }
        while (&v14[v39 * 8] != a3);
        uint64_t v38 = (char *)&v9[v39];
      }
      a1[1] = v38;
    }
  }
  else
  {
    if (v9)
    {
      xpc_object_t v10 = (void **)a1[1];
      uint64_t v11 = *a1;
      if (v10 != v9)
      {
        do
        {
          if (*((char *)v10 - 9) < 0) {
            operator delete(*(v10 - 4));
          }
          v10 -= 4;
        }
        while (v10 != v9);
        uint64_t v11 = *a1;
      }
      a1[1] = v9;
      operator delete(v11);
      uint64_t v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 >> 59) {
      goto LABEL_70;
    }
    uint64_t v30 = v8 >> 4;
    if (v8 >> 4 <= a4) {
      uint64_t v30 = a4;
    }
    BOOL v31 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0;
    unint64_t v32 = 0x7FFFFFFFFFFFFFFLL;
    if (!v31) {
      unint64_t v32 = v30;
    }
    if (v32 >> 59) {
LABEL_70:
    }
      std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::__throw_length_error[abi:ne180100]();
    uint64_t v33 = 32 * v32;
    char v34 = (char *)operator new(32 * v32);
    *a1 = v34;
    a1[1] = v34;
    a1[2] = &v34[v33];
    if (a2 != (void **)a3)
    {
      uint64_t v35 = 0;
      do
      {
        uint64_t v36 = (std::string *)&v34[v35 * 8];
        int v37 = (char *)&a2[v35];
        if (SHIBYTE(a2[v35 + 2]) < 0)
        {
          std::string::__init_copy_ctor_external(v36, *(const std::string::value_type **)v37, *((void *)v37 + 1));
        }
        else
        {
          *(_OWORD *)&v36->__r_.__value_.__l.__data_ = *(_OWORD *)v37;
          v36->__r_.__value_.__r.__words[2] = *((void *)v37 + 2);
        }
        *(_DWORD *)&v34[v35 * 8 + 24] = a2[v35 + 3];
        v35 += 4;
      }
      while (&a2[v35] != (void **)a3);
      v34 += v35 * 8;
    }
    a1[1] = v34;
  }
}

void sub_26369FB74(_Unwind_Exception *exception_object)
{
  for (; v3; v3 -= 32)
  {
    if (*(char *)(v2 + v3 - 9) < 0) {
      operator delete(*(void **)(v2 + v3 - 32));
    }
  }
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(exception_object);
}

uint64_t ctu::SharedRef<__CFDictionary,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary>::get(uint64_t a1)
{
  return *(void *)a1;
}

void ctu::cf::update<char const*,std::string>(__CFDictionary *a1, const __CFString **a2, uint64_t a3, uint64_t a4, const __CFAllocator *a5)
{
  xpc_object_t value = 0;
  ctu::cf::convert_copy((ctu::cf *)&value, a2, (const char *)0x8000100, a4, a5);
  long long v6 = value;
  xpc_object_t value = 0;
  ctu::cf::convert_copy();
  int v7 = value;
  if (v6) {
    BOOL v8 = value == 0;
  }
  else {
    BOOL v8 = 1;
  }
  if (v8)
  {
    if (!value) {
      goto LABEL_8;
    }
  }
  else
  {
    CFDictionarySetValue(a1, v6, value);
  }
  CFRelease(v7);
LABEL_8:
  if (v6) {
    CFRelease(v6);
  }
}

void sub_26369FC5C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, const void *);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va1);
  _Unwind_Resume(a1);
}

void sub_26369FC80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  _Unwind_Resume(a1);
}

void ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef(const void **this)
{
  uint64_t v1 = *this;
  if (v1) {
    CFRelease(v1);
  }
}

uint64_t ctu::cf::update<char const*,unsigned int>(__CFDictionary *a1, const __CFString **a2, unsigned int a3, const __CFAllocator *a4, const __CFAllocator *a5)
{
  unint64_t valuePtr = 0;
  ctu::cf::convert_copy((ctu::cf *)&valuePtr, a2, (const char *)0x8000100, (uint64_t)a4, a5);
  BOOL v8 = (const void *)valuePtr;
  unint64_t valuePtr = a3;
  CFNumberRef v9 = CFNumberCreate(a4, kCFNumberLongLongType, &valuePtr);
  CFNumberRef v10 = v9;
  if (v8) {
    BOOL v11 = v9 == 0;
  }
  else {
    BOOL v11 = 1;
  }
  uint64_t v12 = !v11;
  if (v11)
  {
    if (!v9) {
      goto LABEL_11;
    }
  }
  else
  {
    CFDictionarySetValue(a1, v8, v9);
  }
  CFRelease(v10);
LABEL_11:
  if (v8) {
    CFRelease(v8);
  }
  return v12;
}

void sub_26369FD78(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, const void *);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va1);
  _Unwind_Resume(a1);
}

void sub_26369FD9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t ctu::cf::update<char const*,BOOL>(__CFDictionary *a1, const __CFString **a2, int a3, uint64_t a4, const __CFAllocator *a5)
{
  key = 0;
  ctu::cf::convert_copy((ctu::cf *)&key, a2, (const char *)0x8000100, a4, a5);
  int v7 = key;
  BOOL v8 = (void **)MEMORY[0x263EFFB40];
  if (!a3) {
    BOOL v8 = (void **)MEMORY[0x263EFFB38];
  }
  CFNumberRef v9 = *v8;
  key = *v8;
  if (v7) {
    BOOL v10 = v9 == 0;
  }
  else {
    BOOL v10 = 1;
  }
  uint64_t v11 = !v10;
  if (v10)
  {
    if (!v9) {
      goto LABEL_13;
    }
  }
  else
  {
    CFDictionarySetValue(a1, v7, v9);
  }
  CFRelease(v9);
LABEL_13:
  if (v7) {
    CFRelease(v7);
  }
  return v11;
}

void sub_26369FE60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, const void *a10)
{
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]<std::char_traits<char>,std::allocator<char>>(uint64_t a1, uint64_t a2, int a3)
{
  long long v6 = (const std::locale *)MEMORY[0x263E695E0]();
  *(void *)(a1 + 8) = std::locale::use_facet(v6, MEMORY[0x263F8C108]);
  *(void *)(a1 + 16) = std::locale::use_facet((const std::locale *)a1, MEMORY[0x263F8C130]);
  *(_DWORD *)(a1 + 24) = a3;
  *(_OWORD *)(a1 + 28) = 0u;
  *(_OWORD *)(a1 + 44) = 0u;
  *(_DWORD *)(a1 + 60) = 0;
  uint64_t v7 = *(unsigned __int8 *)(a2 + 23);
  if ((v7 & 0x80u) == 0) {
    BOOL v8 = (char *)a2;
  }
  else {
    BOOL v8 = *(char **)a2;
  }
  if ((v7 & 0x80u) != 0) {
    uint64_t v7 = *(void *)(a2 + 8);
  }
  if (&v8[v7] != std::basic_regex<char,std::regex_traits<char>>::__parse<std::__wrap_iter<char const*>>(a1, v8, &v8[v7]))std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)17>(); {
  return a1;
  }
}

void sub_26369FF30(_Unwind_Exception *a1)
{
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100](v2);
  std::locale::~locale(v1);
  _Unwind_Resume(a1);
}

void sub_26369FF4C(_Unwind_Exception *a1)
{
  std::locale::~locale(v1);
  _Unwind_Resume(a1);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse<std::__wrap_iter<char const*>>(uint64_t a1, char *a2, char *a3)
{
  long long v6 = operator new(8uLL);
  void *v6 = &unk_270EA5D60;
  uint64_t v7 = operator new(0x10uLL);
  v7[1] = v6;
  BOOL v8 = operator new(0x20uLL);
  void *v8 = &unk_270EA5DB8;
  v8[1] = 0;
  v8[2] = 0;
  v8[3] = v7;
  CFNumberRef v9 = *(std::__shared_weak_count **)(a1 + 48);
  *(void *)(a1 + 40) = v7;
  *(void *)(a1 + 48) = v8;
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
    *(void *)(a1 + 56) = *(void *)(a1 + 40);
    unsigned int v10 = *(_DWORD *)(a1 + 24) & 0x1F0;
    if (v10 <= 0x3F)
    {
LABEL_4:
      if (v10)
      {
        if (v10 != 16)
        {
          if (v10 != 32) {
LABEL_27:
          }
            std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)14>();
          goto LABEL_15;
        }
        return std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<std::__wrap_iter<char const*>>(a1, a2, a3);
      }
      else
      {
        return std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, a2, a3);
      }
    }
  }
  else
  {
    *(void *)(a1 + 56) = *(void *)(a1 + 40);
    unsigned int v10 = *(_DWORD *)(a1 + 24) & 0x1F0;
    if (v10 <= 0x3F) {
      goto LABEL_4;
    }
  }
  switch(v10)
  {
    case 0x40u:
LABEL_15:
      return (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<std::__wrap_iter<char const*>>(a1, (std::basic_regex<char> *)a2, (std::basic_regex<char> *)a3);
    case 0x80u:
      return std::basic_regex<char,std::regex_traits<char>>::__parse_grep<std::__wrap_iter<char const*>>(a1, a2, a3);
    case 0x100u:
      return (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_egrep<std::__wrap_iter<char const*>>(a1, (std::basic_regex<char> *)a2, (std::basic_regex<char> *)a3);
    default:
      goto LABEL_27;
  }
}

void sub_2636A01A0(_Unwind_Exception *a1)
{
  std::__empty_state<char>::~__empty_state(v2);
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)17>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x263E69360](exception, 17);
  __cxa_throw(exception, MEMORY[0x263F8C190], MEMORY[0x263F8C098]);
}

void sub_2636A022C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, char *a2, char *a3)
{
  std::vector<std::csub_match>::pointer end = a1->__end_;
  uint64_t v7 = a2;
  while (1)
  {
    BOOL v8 = (std::basic_regex<char> *)v7;
    uint64_t v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_assertion<std::__wrap_iter<char const*>>((uint64_t)a1, v7, a3);
    if (v8 == (std::basic_regex<char> *)v7) {
      break;
    }
LABEL_2:
    if (v7 == (char *)v8) {
      goto LABEL_6;
    }
  }
  CFNumberRef v9 = a1->__end_;
  marked_size_t count = a1->__marked_count_;
  uint64_t v11 = std::basic_regex<char,std::regex_traits<char>>::__parse_atom<std::__wrap_iter<char const*>>(a1, v8, (std::basic_regex<char> *)a3);
  if (v8 != v11)
  {
    uint64_t v7 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__wrap_iter<char const*>>((uint64_t)a1, v11, (std::basic_regex<char> *)a3, v9, marked_count + 1, a1->__marked_count_ + 1);
    goto LABEL_2;
  }
LABEL_6:
  if (v8 == (std::basic_regex<char> *)a2)
  {
    uint64_t v12 = (std::__node<char> *)operator new(0x10uLL);
    unint64_t v13 = a1->__end_;
    first = v13->__first_;
    v12[1].__vftable = (std::__node<char>_vtbl *)first;
    v13->__first_ = v12;
    unint64_t v15 = (std::__owns_one_state<char> *)a1->__end_->__first_;
    goto LABEL_8;
  }
LABEL_9:
  if (v8 == (std::basic_regex<char> *)a3) {
    return a3;
  }
  if (LOBYTE(v8->__traits_.__loc_.__locale_) == 124)
  {
    uint64_t v16 = a1->__end_;
    unint64_t v17 = (std::basic_regex<char> *)((char *)&v8->__traits_.__loc_.__locale_ + 1);
    size_t v18 = (char *)&v8->__traits_.__loc_.__locale_ + 1;
    while (1)
    {
      BOOL v8 = (std::basic_regex<char> *)v18;
      size_t v18 = std::basic_regex<char,std::regex_traits<char>>::__parse_assertion<std::__wrap_iter<char const*>>((uint64_t)a1, v18, a3);
      if (v8 == (std::basic_regex<char> *)v18)
      {
        int64_t v19 = a1->__end_;
        unsigned int v20 = a1->__marked_count_;
        char v21 = std::basic_regex<char,std::regex_traits<char>>::__parse_atom<std::__wrap_iter<char const*>>(a1, v8, (std::basic_regex<char> *)a3);
        if (v8 == v21)
        {
LABEL_16:
          if (v8 == v17)
          {
            long long v22 = (std::__node<char> *)operator new(0x10uLL);
            unint64_t v23 = a1->__end_;
            char v24 = v23->__first_;
            v22[1].__vftable = (std::__node<char>_vtbl *)v24;
            v23->__first_ = v22;
            a1->__end_ = (std::__owns_one_state<char> *)a1->__end_->__first_;
          }
          size_t v25 = (std::__node<char> *)operator new(0x18uLL);
          xpc_object_t v26 = v16->__first_;
          v25[1].__vftable = (std::__node<char>_vtbl *)end->__first_;
          v25[2].__vftable = (std::__node<char>_vtbl *)v26;
          v25->__vftable = (std::__node<char>_vtbl *)&unk_270EA6378;
          end->__first_ = v25;
          v16->__first_ = 0;
          char v27 = (std::__node<char> *)operator new(0x10uLL);
          char v28 = a1->__end_->__first_;
          v27[1].__vftable = (std::__node<char>_vtbl *)v28;
          v16->__first_ = v27;
          a1->__end_->__first_ = 0;
          long long v29 = (std::__node<char> *)operator new(0x10uLL);
          uint64_t v30 = v16->__first_;
          v29->__vftable = (std::__node<char>_vtbl *)&unk_270EA63C0;
          v29[1].__vftable = (std::__node<char>_vtbl *)v30;
          a1->__end_->__first_ = v29;
          unint64_t v15 = (std::__owns_one_state<char> *)v16->__first_;
LABEL_8:
          a1->__end_ = v15;
          goto LABEL_9;
        }
        size_t v18 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__wrap_iter<char const*>>((uint64_t)a1, v21, (std::basic_regex<char> *)a3, v19, v20 + 1, a1->__marked_count_ + 1);
      }
      if (v18 == (char *)v8) {
        goto LABEL_16;
      }
    }
  }
  return (char *)v8;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<std::__wrap_iter<char const*>>(uint64_t a1, char *a2, char *a3)
{
  uint64_t v3 = (std::basic_regex<char> *)a2;
  if (a2 == a3) {
    return a2;
  }
  if (*a2 == 94)
  {
    long long v6 = operator new(0x18uLL);
    BOOL v7 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
    uint64_t v8 = *(void *)(a1 + 56);
    uint64_t v9 = *(void *)(v8 + 8);
    void *v6 = &unk_270EA5EB0;
    v6[1] = v9;
    *((unsigned char *)v6 + 16) = v7;
    *(void *)(v8 + 8) = v6;
    *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
    uint64_t v3 = (std::basic_regex<char> *)((char *)v3 + 1);
  }
  if (v3 != (std::basic_regex<char> *)a3)
  {
    while (v3 != (std::basic_regex<char> *)a3)
    {
      unsigned int v10 = v3;
      uint64_t v11 = *(std::__owns_one_state<char> **)(a1 + 56);
      int v12 = *(_DWORD *)(a1 + 28);
      unint64_t v13 = std::basic_regex<char,std::regex_traits<char>>::__parse_nondupl_RE<std::__wrap_iter<char const*>>(a1, (uint64_t)v10, a3);
      if (v10 != v13)
      {
        uint64_t v3 = std::basic_regex<char,std::regex_traits<char>>::__parse_RE_dupl_symbol<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, (std::basic_regex<char> *)v13, (std::basic_regex<char> *)a3, v11, (v12 + 1), (*(_DWORD *)(a1 + 28) + 1));
        if (v10 != (unsigned char *)v3) {
          continue;
        }
      }
      if (v10 + 1 != a3 || *v10 != 36) {
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
      }
      long long v14 = operator new(0x18uLL);
      BOOL v15 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
      uint64_t v16 = *(void *)(a1 + 56);
      uint64_t v17 = *(void *)(v16 + 8);
      *long long v14 = &unk_270EA5EF8;
      v14[1] = v17;
      *((unsigned char *)v14 + 16) = v15;
      *(void *)(v16 + 8) = v14;
      *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
      return a3;
    }
  }
  return a3;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<std::__wrap_iter<char const*>>(uint64_t a1, std::basic_regex<char> *a2, std::basic_regex<char> *a3)
{
  uint64_t v6 = *(void *)(a1 + 56);
  BOOL v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<std::__wrap_iter<char const*>>(a1, a2, a3);
  if (v7 == a2) {
    goto LABEL_12;
  }
  do
  {
    uint64_t v8 = v7;
    BOOL v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<std::__wrap_iter<char const*>>(a1, v7, a3);
  }
  while (v8 != v7);
  if (v8 == a2) {
LABEL_12:
  }
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
  if (v8 == a3) {
    return a3;
  }
  while (LOBYTE(v8->__traits_.__loc_.__locale_) == 124)
  {
    uint64_t v9 = *(void *)(a1 + 56);
    unsigned int v10 = (std::basic_regex<char> *)((char *)&v8->__traits_.__loc_.__locale_ + 1);
    uint64_t v11 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<std::__wrap_iter<char const*>>(a1, (std::basic_regex<char> *)((char *)&v8->__traits_.__loc_.__locale_ + 1), a3);
    if ((std::basic_regex<char> *)((char *)&v8->__traits_.__loc_.__locale_ + 1) == v11) {
      goto LABEL_12;
    }
    do
    {
      uint64_t v8 = v11;
      uint64_t v11 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<std::__wrap_iter<char const*>>(a1, v11, a3);
    }
    while (v8 != v11);
    if (v8 == v10) {
      goto LABEL_12;
    }
    int v12 = operator new(0x18uLL);
    uint64_t v13 = *(void *)(v9 + 8);
    v12[1] = *(void *)(v6 + 8);
    v12[2] = v13;
    void *v12 = &unk_270EA6378;
    *(void *)(v6 + 8) = v12;
    *(void *)(v9 + 8) = 0;
    long long v14 = operator new(0x10uLL);
    uint64_t v15 = *(void *)(*(void *)(a1 + 56) + 8);
    v14[1] = v15;
    *(void *)(v9 + 8) = v14;
    *(void *)(*(void *)(a1 + 56) + 8) = 0;
    uint64_t v16 = operator new(0x10uLL);
    uint64_t v17 = *(void *)(v9 + 8);
    void *v16 = &unk_270EA63C0;
    v16[1] = v17;
    *(void *)(*(void *)(a1 + 56) + 8) = v16;
    *(void *)(a1 + 56) = *(void *)(v9 + 8);
    if (v8 == a3) {
      return a3;
    }
  }
  return v8;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_grep<std::__wrap_iter<char const*>>(uint64_t a1, char *__s, char *a3)
{
  uint64_t v6 = *(void *)(a1 + 56);
  BOOL v7 = (char *)memchr(__s, 10, a3 - __s);
  if (v7) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = a3;
  }
  if (v8 == __s)
  {
    uint64_t v9 = operator new(0x10uLL);
    uint64_t v10 = *(void *)(v6 + 8);
    v9[1] = v10;
    *(void *)(v6 + 8) = v9;
    *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
    if (v8 == a3) {
      uint64_t v11 = v8;
    }
    else {
      uint64_t v11 = v8 + 1;
    }
    if (v11 == a3) {
      return a3;
    }
  }
  else
  {
    std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<std::__wrap_iter<char const*>>(a1, __s, v8);
    if (v8 == a3) {
      uint64_t v11 = v8;
    }
    else {
      uint64_t v11 = v8 + 1;
    }
    if (v11 == a3) {
      return a3;
    }
  }
  uint64_t v12 = *(void *)(a1 + 56);
  do
  {
    char v21 = (char *)memchr(v11, 10, a3 - v11);
    if (v21) {
      long long v22 = v21;
    }
    else {
      long long v22 = a3;
    }
    if (v22 == v11)
    {
      uint64_t v13 = operator new(0x10uLL);
      uint64_t v14 = *(void *)(v12 + 8);
      v13[1] = v14;
      *(void *)(v12 + 8) = v13;
      *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
    }
    else
    {
      std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<std::__wrap_iter<char const*>>(a1, v11, v22);
    }
    uint64_t v15 = operator new(0x18uLL);
    uint64_t v16 = *(void *)(v12 + 8);
    v15[1] = *(void *)(v6 + 8);
    v15[2] = v16;
    void *v15 = &unk_270EA6378;
    *(void *)(v6 + 8) = v15;
    *(void *)(v12 + 8) = 0;
    uint64_t v17 = operator new(0x10uLL);
    uint64_t v18 = *(void *)(*(void *)(a1 + 56) + 8);
    v17[1] = v18;
    *(void *)(v12 + 8) = v17;
    *(void *)(*(void *)(a1 + 56) + 8) = 0;
    int64_t v19 = operator new(0x10uLL);
    uint64_t v20 = *(void *)(v12 + 8);
    void *v19 = &unk_270EA63C0;
    v19[1] = v20;
    *(void *)(*(void *)(a1 + 56) + 8) = v19;
    uint64_t v12 = *(void *)(v12 + 8);
    *(void *)(a1 + 56) = v12;
    if (v22 == a3) {
      uint64_t v11 = v22;
    }
    else {
      uint64_t v11 = v22 + 1;
    }
  }
  while (v11 != a3);
  return a3;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_egrep<std::__wrap_iter<char const*>>(uint64_t a1, std::basic_regex<char> *__s, std::basic_regex<char> *a3)
{
  uint64_t v6 = *(void *)(a1 + 56);
  BOOL v7 = (std::basic_regex<char> *)memchr(__s, 10, (char *)a3 - (char *)__s);
  if (v7) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = a3;
  }
  if (v8 == __s)
  {
    uint64_t v9 = operator new(0x10uLL);
    uint64_t v10 = *(void *)(v6 + 8);
    v9[1] = v10;
    *(void *)(v6 + 8) = v9;
    *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
    if (v8 == a3) {
      uint64_t v11 = v8;
    }
    else {
      uint64_t v11 = (std::basic_regex<char> *)((char *)&v8->__traits_.__loc_.__locale_ + 1);
    }
    if (v11 == a3) {
      return a3;
    }
  }
  else
  {
    std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<std::__wrap_iter<char const*>>(a1, __s, v8);
    if (v8 == a3) {
      uint64_t v11 = v8;
    }
    else {
      uint64_t v11 = (std::basic_regex<char> *)((char *)&v8->__traits_.__loc_.__locale_ + 1);
    }
    if (v11 == a3) {
      return a3;
    }
  }
  uint64_t v12 = *(void *)(a1 + 56);
  do
  {
    char v21 = (std::basic_regex<char> *)memchr(v11, 10, (char *)a3 - (char *)v11);
    if (v21) {
      long long v22 = v21;
    }
    else {
      long long v22 = a3;
    }
    if (v22 == v11)
    {
      uint64_t v13 = operator new(0x10uLL);
      uint64_t v14 = *(void *)(v12 + 8);
      v13[1] = v14;
      *(void *)(v12 + 8) = v13;
      *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
    }
    else
    {
      std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<std::__wrap_iter<char const*>>(a1, v11, v22);
    }
    uint64_t v15 = operator new(0x18uLL);
    uint64_t v16 = *(void *)(v12 + 8);
    v15[1] = *(void *)(v6 + 8);
    v15[2] = v16;
    void *v15 = &unk_270EA6378;
    *(void *)(v6 + 8) = v15;
    *(void *)(v12 + 8) = 0;
    uint64_t v17 = operator new(0x10uLL);
    uint64_t v18 = *(void *)(*(void *)(a1 + 56) + 8);
    v17[1] = v18;
    *(void *)(v12 + 8) = v17;
    *(void *)(*(void *)(a1 + 56) + 8) = 0;
    int64_t v19 = operator new(0x10uLL);
    uint64_t v20 = *(void *)(v12 + 8);
    void *v19 = &unk_270EA63C0;
    v19[1] = v20;
    *(void *)(*(void *)(a1 + 56) + 8) = v19;
    uint64_t v12 = *(void *)(v12 + 8);
    *(void *)(a1 + 56) = v12;
    if (v22 == a3) {
      uint64_t v11 = v22;
    }
    else {
      uint64_t v11 = (std::basic_regex<char> *)((char *)&v22->__traits_.__loc_.__locale_ + 1);
    }
  }
  while (v11 != a3);
  return a3;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)14>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x263E69360](exception, 14);
  __cxa_throw(exception, MEMORY[0x263F8C190], MEMORY[0x263F8C098]);
}

void sub_2636A0C00(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__end_state<char>::__exec(uint64_t a1, _DWORD *a2)
{
  *a2 = -1000;
}

void std::__shared_ptr_pointer<std::__empty_state<char> *,std::shared_ptr<std::__empty_state<char>>::__shared_ptr_default_delete<std::__empty_state<char>,std::__empty_state<char>>,std::allocator<std::__empty_state<char>>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t std::__shared_ptr_pointer<std::__empty_state<char> *,std::shared_ptr<std::__empty_state<char>>::__shared_ptr_default_delete<std::__empty_state<char>,std::__empty_state<char>>,std::allocator<std::__empty_state<char>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<std::__empty_state<char> *,std::shared_ptr<std::__empty_state<char>>::__shared_ptr_default_delete<std::__empty_state<char>,std::__empty_state<char>>,std::allocator<std::__empty_state<char>>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x80000002637A5BA1) {
    return a1 + 24;
  }
  if (((v3 & 0x80000002637A5BA1 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000002637A5BA1)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000002637A5BA1 & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 24;
  }
  return 0;
}

void (__cdecl ***std::__empty_state<char>::~__empty_state(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  uint64_t v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

void std::__empty_state<char>::~__empty_state(void (__cdecl ***__p)(std::__owns_one_state<char> *__hidden this))
{
  uint64_t v2 = __p[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }

  operator delete(__p);
}

void std::__empty_state<char>::__exec(const std::__empty_state<char> *this, std::__empty_state<char>::__state *a2)
{
  a2->__do_ = -994;
  a2->__node_ = this->__first_;
}

void std::__owns_one_state<char>::~__owns_one_state(std::__owns_one_state<char> *this)
{
  first = this->__first_;
  if (first) {
    ((void (*)(std::__node<char> *))first->~__node_0)(first);
  }
}

{
  std::__node<char> *first;
  uint64_t vars8;

  first = this->__first_;
  if (first) {
    ((void (*)(std::__node<char> *))first->~__node_0)(first);
  }

  operator delete(this);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_assertion<std::__wrap_iter<char const*>>(uint64_t a1, char *a2, char *a3)
{
  uint64_t v3 = a2;
  if (a2 == a3) {
    return v3;
  }
  int v6 = *a2;
  if (v6 > 91)
  {
    if (v6 == 92)
    {
      if (a2 + 1 != a3)
      {
        int v16 = a2[1];
        if (v16 == 66)
        {
          uint64_t v17 = (char *)operator new(0x30uLL);
          uint64_t v19 = *(void *)(*(void *)(a1 + 56) + 8);
          *(void *)uint64_t v17 = &unk_270EA5F40;
          *((void *)v17 + 1) = v19;
          std::locale::locale((std::locale *)v17 + 2, (const std::locale *)a1);
          *(_OWORD *)(v17 + 24) = *(_OWORD *)(a1 + 8);
          v17[40] = 1;
        }
        else
        {
          if (v16 != 98) {
            return v3;
          }
          uint64_t v17 = (char *)operator new(0x30uLL);
          uint64_t v18 = *(void *)(*(void *)(a1 + 56) + 8);
          *(void *)uint64_t v17 = &unk_270EA5F40;
          *((void *)v17 + 1) = v18;
          std::locale::locale((std::locale *)v17 + 2, (const std::locale *)a1);
          *(_OWORD *)(v17 + 24) = *(_OWORD *)(a1 + 8);
          v17[40] = 0;
        }
        *(void *)(*(void *)(a1 + 56) + 8) = v17;
        *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
        return v3 + 2;
      }
      return v3;
    }
    if (v6 != 94) {
      return v3;
    }
    uint64_t v11 = operator new(0x18uLL);
    BOOL v12 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
    uint64_t v13 = *(void *)(a1 + 56);
    v11[1] = *(void *)(v13 + 8);
    uint64_t v14 = &unk_270EA5EB0;
LABEL_17:
    void *v11 = v14;
    *((unsigned char *)v11 + 16) = v12;
    *(void *)(v13 + 8) = v11;
    *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
    return ++v3;
  }
  if (v6 == 36)
  {
    uint64_t v11 = operator new(0x18uLL);
    BOOL v12 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
    uint64_t v13 = *(void *)(a1 + 56);
    v11[1] = *(void *)(v13 + 8);
    uint64_t v14 = &unk_270EA5EF8;
    goto LABEL_17;
  }
  if (v6 != 40 || a2 + 1 == a3 || a2[1] != 63 || a2 + 2 == a3) {
    return v3;
  }
  int v7 = a2[2];
  if (v7 == 33)
  {
    *(void *)&long long v20 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v20 + 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)&v22.__loop_count_ = v20;
    *(_OWORD *)&v22.__start_.__cntrl_ = v20;
    *(_OWORD *)&v22.__traits_.__loc_.__locale_ = v20;
    *(_OWORD *)&v22.__traits_.__col_ = v20;
    std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]((uint64_t)&v22);
    v22.__flags_ = *(_DWORD *)(a1 + 24);
    uint64_t v9 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse<std::__wrap_iter<char const*>>(&v22, v3 + 3, a3);
    marked_size_t count = v22.__marked_count_;
    std::basic_regex<char,std::regex_traits<char>>::__push_lookahead((std::basic_regex<char> *)a1, &v22, 1, *(_DWORD *)(a1 + 28));
    *(_DWORD *)(a1 + 28) += marked_count;
    if (v9 == a3 || *v9 != 41) {
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
    }
    goto LABEL_27;
  }
  if (v7 != 61) {
    return v3;
  }
  *(void *)&long long v8 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&v22.__loop_count_ = v8;
  *(_OWORD *)&v22.__start_.__cntrl_ = v8;
  *(_OWORD *)&v22.__traits_.__loc_.__locale_ = v8;
  *(_OWORD *)&v22.__traits_.__col_ = v8;
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]((uint64_t)&v22);
  v22.__flags_ = *(_DWORD *)(a1 + 24);
  uint64_t v9 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse<std::__wrap_iter<char const*>>(&v22, v3 + 3, a3);
  unsigned int v10 = v22.__marked_count_;
  std::basic_regex<char,std::regex_traits<char>>::__push_lookahead((std::basic_regex<char> *)a1, &v22, 0, *(_DWORD *)(a1 + 28));
  *(_DWORD *)(a1 + 28) += v10;
  if (v9 == a3 || *v9 != 41) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
  }
LABEL_27:
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&v22.__traits_.__loc_);
  return v9 + 1;
}

void sub_2636A1220(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
}

void sub_2636A1234(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
}

void sub_2636A1248(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
}

void sub_2636A125C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_atom<std::__wrap_iter<char const*>>(std::basic_regex<char> *this, std::basic_regex<char> *a2, std::basic_regex<char> *a3)
{
  uint64_t v3 = a2;
  if (a2 == a3) {
    return v3;
  }
  switch(LOBYTE(a2->__traits_.__loc_.__locale_))
  {
    case '(':
      if ((std::basic_regex<char> *)((char *)&a2->__traits_.__loc_.__locale_ + 1) == a3) {
        goto LABEL_26;
      }
      if ((std::basic_regex<char> *)((char *)&a2->__traits_.__loc_.__locale_ + 2) != a3
        && BYTE1(a2->__traits_.__loc_.__locale_) == 63
        && BYTE2(a2->__traits_.__loc_.__locale_) == 58)
      {
        ++this->__open_count_;
        int v6 = (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<std::__wrap_iter<char const*>>(this, (char *)&a2->__traits_.__loc_.__locale_ + 3, a3);
        if (v6 != a3 && LOBYTE(v6->__traits_.__loc_.__locale_) == 41)
        {
          --this->__open_count_;
          return (std::basic_regex<char> *)((char *)&v6->__traits_.__loc_.__locale_ + 1);
        }
LABEL_26:
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
      }
      if ((this->__flags_ & 2) != 0)
      {
        marked_size_t count = this->__marked_count_;
      }
      else
      {
        uint64_t v11 = (std::__node<char> *)operator new(0x18uLL);
        marked_size_t count = this->__marked_count_ + 1;
        this->__marked_count_ = marked_count;
        std::vector<std::csub_match>::pointer end = this->__end_;
        first = end->__first_;
        v11->__vftable = (std::__node<char>_vtbl *)&unk_270EA6210;
        v11[1].__vftable = (std::__node<char>_vtbl *)first;
        LODWORD(v11[2].__vftable) = marked_count;
        end->__first_ = v11;
        this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
      }
      ++this->__open_count_;
      uint64_t v15 = (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<std::__wrap_iter<char const*>>(this, (char *)&v3->__traits_.__loc_.__locale_ + 1, a3);
      if (v15 == a3) {
        goto LABEL_26;
      }
      int v16 = v15;
      if (LOBYTE(v15->__traits_.__loc_.__locale_) != 41) {
        goto LABEL_26;
      }
      if ((this->__flags_ & 2) == 0)
      {
        uint64_t v17 = (std::__node<char> *)operator new(0x18uLL);
        uint64_t v18 = this->__end_;
        uint64_t v19 = v18->__first_;
        v17->__vftable = (std::__node<char>_vtbl *)&unk_270EA6258;
        v17[1].__vftable = (std::__node<char>_vtbl *)v19;
        LODWORD(v17[2].__vftable) = marked_count;
        v18->__first_ = v17;
        this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
      }
      --this->__open_count_;
      uint64_t result = (std::basic_regex<char> *)((char *)&v16->__traits_.__loc_.__locale_ + 1);
      break;
    case ')':
    case ',':
    case '-':
    case '/':
    case '0':
    case '1':
    case '2':
    case '3':
    case '4':
    case '5':
    case '6':
    case '7':
    case '8':
    case '9':
    case ':':
    case ';':
    case '<':
    case '=':
    case '>':
    case '@':
    case 'A':
    case 'B':
    case 'C':
    case 'D':
    case 'E':
    case 'F':
    case 'G':
    case 'H':
    case 'I':
    case 'J':
    case 'K':
    case 'L':
    case 'M':
    case 'N':
    case 'O':
    case 'P':
    case 'Q':
    case 'R':
    case 'S':
    case 'T':
    case 'U':
    case 'V':
    case 'W':
    case 'X':
    case 'Y':
    case 'Z':
      return std::basic_regex<char,std::regex_traits<char>>::__parse_pattern_character<std::__wrap_iter<char const*>>(this, a2, a3);
    case '*':
    case '+':
    case '?':
      goto LABEL_25;
    case '.':
      long long v8 = (std::__node<char> *)operator new(0x10uLL);
      uint64_t v9 = this->__end_;
      unsigned int v10 = v9->__first_;
      v8->__vftable = (std::__node<char>_vtbl *)&unk_270EA5FD0;
      v8[1].__vftable = (std::__node<char>_vtbl *)v10;
      v9->__first_ = v8;
      this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
      return (std::basic_regex<char> *)((char *)v3 + 1);
    case '[':
      return (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<std::__wrap_iter<char const*>>((uint64_t)this, (char *)a2, (char *)a3);
    case '\\':
      return (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_atom_escape<std::__wrap_iter<char const*>>(this, (unsigned __int8 *)a2, (unsigned __int8 *)a3);
    default:
      if (LOBYTE(a2->__traits_.__loc_.__locale_) == 123) {
LABEL_25:
      }
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)11>();
      return std::basic_regex<char,std::regex_traits<char>>::__parse_pattern_character<std::__wrap_iter<char const*>>(this, a2, a3);
  }
  return result;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__wrap_iter<char const*>>(uint64_t a1, std::basic_regex<char> *this, std::basic_regex<char> *a3, std::__owns_one_state<char> *a4, size_t __mexp_begin, size_t __mexp_end)
{
  if (this == a3) {
    return this;
  }
  int v6 = *(_DWORD *)(a1 + 24) & 0x1F0;
  int locale_low = SLOBYTE(this->__traits_.__loc_.__locale_);
  if (locale_low <= 62)
  {
    if (locale_low == 42)
    {
      uint64_t v9 = (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
      if (v6) {
        BOOL v21 = 1;
      }
      else {
        BOOL v21 = v9 == a3;
      }
      if (!v21 && LOBYTE(v9->__traits_.__loc_.__locale_) == 63)
      {
        unsigned int v10 = (char *)&this->__traits_.__loc_.__locale_ + 2;
        __mexp_begin = __mexp_begin;
        __mexp_std::vector<std::csub_match>::pointer end = __mexp_end;
        size_t v11 = 0;
        goto LABEL_36;
      }
      __mexp_begin = __mexp_begin;
      __mexp_std::vector<std::csub_match>::pointer end = __mexp_end;
      size_t v25 = 0;
      goto LABEL_45;
    }
    long long v8 = this;
    if (locale_low == 43)
    {
      uint64_t v9 = (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
      if (!v6 && v9 != a3 && LOBYTE(v9->__traits_.__loc_.__locale_) == 63)
      {
        unsigned int v10 = (char *)&this->__traits_.__loc_.__locale_ + 2;
        __mexp_begin = __mexp_begin;
        __mexp_std::vector<std::csub_match>::pointer end = __mexp_end;
        size_t v11 = 1;
LABEL_36:
        std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v11, 0xFFFFFFFFFFFFFFFFLL, a4, __mexp_begin, __mexp_end, 0);
        return (std::basic_regex<char> *)v10;
      }
      __mexp_begin = __mexp_begin;
      __mexp_std::vector<std::csub_match>::pointer end = __mexp_end;
      size_t v25 = 1;
      goto LABEL_45;
    }
    return v8;
  }
  if (locale_low == 63)
  {
    std::basic_regex<char> v22 = (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
    if (v6) {
      BOOL v23 = 1;
    }
    else {
      BOOL v23 = v22 == a3;
    }
    if (v23 || LOBYTE(v22->__traits_.__loc_.__locale_) != 63)
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, 0, 1uLL, a4, __mexp_begin, __mexp_end, 1);
      return v22;
    }
    else
    {
      char v24 = (char *)&this->__traits_.__loc_.__locale_ + 2;
      std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, 0, 1uLL, a4, __mexp_begin, __mexp_end, 0);
      return (std::basic_regex<char> *)v24;
    }
  }
  else
  {
    long long v8 = this;
    if (locale_low != 123) {
      return v8;
    }
    uint64_t v13 = (char *)&this->__traits_.__loc_.__locale_ + 1;
    if ((std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1) == a3) {
      goto LABEL_72;
    }
    int v14 = *v13;
    if ((v14 & 0xF8) != 0x30 && (v14 & 0xFE) != 0x38) {
      goto LABEL_72;
    }
    int v15 = v14 - 48;
    int v16 = (char *)&this->__traits_.__loc_.__locale_ + 2;
    if ((std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 2) == a3)
    {
LABEL_21:
      int v16 = (char *)a3;
    }
    else
    {
      while (1)
      {
        int v17 = *v16;
        if ((v17 & 0xF8) != 0x30 && (v17 & 0xFE) != 0x38) {
          break;
        }
        if (v15 >= 214748364) {
          goto LABEL_72;
        }
        int v15 = v17 + 10 * v15 - 48;
        if (++v16 == (char *)a3) {
          goto LABEL_21;
        }
      }
    }
    if (v16 == v13) {
      goto LABEL_72;
    }
    if (v16 == (char *)a3) {
      goto LABEL_73;
    }
    int v18 = *v16;
    if (v18 != 44)
    {
      if (v18 == 125)
      {
        uint64_t v19 = (std::basic_regex<char> *)(v16 + 1);
        if (v6 || v19 == a3 || LOBYTE(v19->__traits_.__loc_.__locale_) != 63)
        {
          std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v15, v15, a4, __mexp_begin, __mexp_end, 1);
          return v19;
        }
        else
        {
          long long v20 = (unsigned __int8 *)(v16 + 2);
          std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v15, v15, a4, __mexp_begin, __mexp_end, 0);
          return (std::basic_regex<char> *)v20;
        }
      }
LABEL_72:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>();
    }
    xpc_object_t v26 = (std::basic_regex<char> *)(v16 + 1);
    if (v16 + 1 == (char *)a3) {
      goto LABEL_72;
    }
    int v27 = LOBYTE(v26->__traits_.__loc_.__locale_);
    if (v27 == 125)
    {
      uint64_t v9 = (std::basic_regex<char> *)(v16 + 2);
      if (!v6 && v9 != a3 && LOBYTE(v9->__traits_.__loc_.__locale_) == 63)
      {
        size_t v11 = v15;
        unsigned int v10 = v16 + 3;
        __mexp_begin = __mexp_begin;
        __mexp_std::vector<std::csub_match>::pointer end = __mexp_end;
        goto LABEL_36;
      }
      size_t v25 = v15;
      __mexp_begin = __mexp_begin;
      __mexp_std::vector<std::csub_match>::pointer end = __mexp_end;
LABEL_45:
      std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v25, 0xFFFFFFFFFFFFFFFFLL, a4, __mexp_begin, __mexp_end, 1);
      return v9;
    }
    if ((v27 & 0xF8) != 0x30 && (v27 & 0xFE) != 0x38) {
      goto LABEL_73;
    }
    int v28 = v27 - 48;
    long long v29 = (std::basic_regex<char> *)(v16 + 2);
    if (v29 == a3)
    {
LABEL_61:
      long long v29 = a3;
    }
    else
    {
      while (1)
      {
        int v30 = LOBYTE(v29->__traits_.__loc_.__locale_);
        if ((v30 & 0xF8) != 0x30 && (v30 & 0xFE) != 0x38) {
          break;
        }
        if (v28 >= 214748364) {
          goto LABEL_72;
        }
        int v28 = v30 + 10 * v28 - 48;
        long long v29 = (std::basic_regex<char> *)((char *)v29 + 1);
        if (v29 == a3) {
          goto LABEL_61;
        }
      }
    }
    if (v29 == v26 || v29 == a3 || LOBYTE(v29->__traits_.__loc_.__locale_) != 125) {
LABEL_73:
    }
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>();
    if (v28 < v15) {
      goto LABEL_72;
    }
    BOOL v31 = (std::basic_regex<char> *)((char *)&v29->__traits_.__loc_.__locale_ + 1);
    if (v6 || v31 == a3 || LOBYTE(v31->__traits_.__loc_.__locale_) != 63)
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v15, v28, a4, __mexp_begin, __mexp_end, 1);
      return v31;
    }
    else
    {
      unint64_t v32 = (char *)&v29->__traits_.__loc_.__locale_ + 2;
      std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v15, v28, a4, __mexp_begin, __mexp_end, 0);
      return (std::basic_regex<char> *)v32;
    }
  }
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = (const std::locale *)MEMORY[0x263E695E0]();
  *(void *)(a1 + 8) = std::locale::use_facet(v2, MEMORY[0x263F8C108]);
  *(void *)(a1 + 16) = std::locale::use_facet((const std::locale *)a1, MEMORY[0x263F8C130]);
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(void *)(a1 + 56) = 0;
  return a1;
}

void sub_2636A1A38(_Unwind_Exception *a1)
{
  std::locale::~locale(v1);
  _Unwind_Resume(a1);
}

void std::basic_regex<char,std::regex_traits<char>>::__push_lookahead(std::basic_regex<char> *this, const std::basic_regex<char> *a2, BOOL a3, unsigned int a4)
{
  long long v8 = (char *)operator new(0x58uLL);
  first = this->__end_->__first_;
  *(void *)long long v8 = &unk_270EA5F88;
  *((void *)v8 + 1) = first;
  std::locale::locale((std::locale *)v8 + 2, &a2->__traits_.__loc_);
  *(_OWORD *)(v8 + 24) = *(_OWORD *)&a2->__traits_.__ct_;
  *(_OWORD *)(v8 + 40) = *(_OWORD *)&a2->__flags_;
  cntrl = a2->__start_.__cntrl_;
  *((void *)v8 + 7) = a2->__start_.__ptr_;
  *((void *)v8 + 8) = cntrl;
  if (cntrl) {
    atomic_fetch_add_explicit(&cntrl->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *((void *)v8 + 9) = a2->__end_;
  *((_DWORD *)v8 + 20) = a4;
  v8[84] = a3;
  this->__end_->__first_ = (std::__node<char> *)v8;
  this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x263E69360](exception, 6);
  __cxa_throw(exception, MEMORY[0x263F8C190], MEMORY[0x263F8C098]);
}

void sub_2636A1B50(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void (__cdecl ***std::__l_anchor_multiline<char>::~__l_anchor_multiline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  uint64_t v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

void std::__l_anchor_multiline<char>::~__l_anchor_multiline(void (__cdecl ***__p)(std::__owns_one_state<char> *__hidden this))
{
  uint64_t v2 = __p[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }

  operator delete(__p);
}

uint64_t std::__l_anchor_multiline<char>::__exec(uint64_t result, uint64_t a2)
{
  if (!*(unsigned char *)(a2 + 92))
  {
    if (!*(unsigned char *)(result + 16)) {
      goto LABEL_12;
    }
    int v2 = *(unsigned __int8 *)(*(void *)(a2 + 16) - 1);
    if (v2 != 13 && v2 != 10) {
      goto LABEL_12;
    }
LABEL_11:
    *(_DWORD *)a2 = -994;
    *(void *)(a2 + 80) = *(void *)(result + 8);
    return result;
  }
  if (*(void *)(a2 + 16) == *(void *)(a2 + 8) && (*(unsigned char *)(a2 + 88) & 1) == 0) {
    goto LABEL_11;
  }
LABEL_12:
  *(_DWORD *)a2 = -993;
  *(void *)(a2 + 80) = 0;
  return result;
}

void (__cdecl ***std::__r_anchor_multiline<char>::~__r_anchor_multiline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  int v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

void std::__r_anchor_multiline<char>::~__r_anchor_multiline(void (__cdecl ***__p)(std::__owns_one_state<char> *__hidden this))
{
  int v2 = __p[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }

  operator delete(__p);
}

uint64_t std::__r_anchor_multiline<char>::__exec(uint64_t result, uint64_t a2)
{
  int v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) && (*(unsigned char *)(a2 + 88) & 2) == 0
    || *(unsigned char *)(result + 16) && ((int v3 = *v2, v3 != 13) ? (v4 = v3 == 10) : (v4 = 1), v4))
  {
    *(_DWORD *)a2 = -994;
    *(void *)(a2 + 80) = *(void *)(result + 8);
  }
  else
  {
    *(_DWORD *)a2 = -993;
    *(void *)(a2 + 80) = 0;
  }
  return result;
}

std::locale *std::__word_boundary<char,std::regex_traits<char>>::~__word_boundary(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_270EA5F40;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  return a1;
}

void std::__word_boundary<char,std::regex_traits<char>>::~__word_boundary(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_270EA5F40;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }

  operator delete(a1);
}

uint64_t std::__word_boundary<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  int v2 = *(unsigned __int8 **)(a2 + 8);
  int v3 = *(unsigned __int8 **)(a2 + 24);
  if (v2 == v3) {
    goto LABEL_19;
  }
  BOOL v4 = *(unsigned __int8 **)(a2 + 16);
  if (v4 != v3)
  {
    if (v4 == v2)
    {
      int v5 = *(_DWORD *)(a2 + 88);
      if ((v5 & 0x80) == 0)
      {
        if ((v5 & 4) == 0)
        {
          uint64_t v6 = *v2;
          if (v6 == 95) {
            goto LABEL_17;
          }
          goto LABEL_15;
        }
        goto LABEL_19;
      }
    }
    uint64_t v7 = *(v4 - 1);
    uint64_t v8 = *v4;
    if (v7 == 95
      || (v7 & 0x80) == 0 && (*(_DWORD *)(*(void *)(*(void *)(result + 24) + 16) + 4 * v7) & 0x500) != 0)
    {
      int v9 = 1;
      if (v8 == 95) {
        goto LABEL_24;
      }
    }
    else
    {
      int v9 = 0;
      if (v8 == 95) {
        goto LABEL_24;
      }
    }
    if ((v8 & 0x80) != 0 || (*(_DWORD *)(*(void *)(*(void *)(result + 24) + 16) + 4 * v8) & 0x500) == 0)
    {
      if (*(unsigned char *)(result + 40) == (v9 != 0)) {
        goto LABEL_20;
      }
      goto LABEL_27;
    }
LABEL_24:
    if (*(unsigned char *)(result + 40) != (v9 != 1)) {
      goto LABEL_27;
    }
    goto LABEL_20;
  }
  if ((*(unsigned char *)(a2 + 88) & 8) == 0)
  {
    uint64_t v6 = *(v3 - 1);
    if (v6 == 95) {
      goto LABEL_17;
    }
LABEL_15:
    if ((v6 & 0x80) == 0 && (*(_DWORD *)(*(void *)(*(void *)(result + 24) + 16) + 4 * v6) & 0x500) != 0)
    {
LABEL_17:
      if (*(unsigned char *)(result + 40) != 1) {
        goto LABEL_27;
      }
LABEL_20:
      *(_DWORD *)a2 = -993;
      *(void *)(a2 + 80) = 0;
      return result;
    }
  }
LABEL_19:
  if (!*(unsigned char *)(result + 40)) {
    goto LABEL_20;
  }
LABEL_27:
  uint64_t v10 = *(void *)(result + 8);
  *(_DWORD *)a2 = -994;
  *(void *)(a2 + 80) = v10;
  return result;
}

std::locale *std::__lookahead<char,std::regex_traits<char>>::~__lookahead(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_270EA5F88;
  int v2 = a1 + 2;
  locale = (std::__shared_weak_count *)a1[8].__locale_;
  if (locale && !atomic_fetch_add(&locale->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))locale->__on_zero_shared)(locale);
    std::__shared_weak_count::__release_weak(locale);
    std::locale::~locale(v2);
    BOOL v4 = a1[1].__locale_;
    if (!v4) {
      return a1;
    }
    goto LABEL_4;
  }
  std::locale::~locale(a1 + 2);
  BOOL v4 = a1[1].__locale_;
  if (v4) {
LABEL_4:
  }
    (*(void (**)(std::locale::__imp *))(*(void *)v4 + 8))(v4);
  return a1;
}

void std::__lookahead<char,std::regex_traits<char>>::~__lookahead(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_270EA5F88;
  int v2 = a1 + 2;
  locale = (std::__shared_weak_count *)a1[8].__locale_;
  if (!locale || atomic_fetch_add(&locale->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    std::locale::~locale(a1 + 2);
    BOOL v4 = a1[1].__locale_;
    if (!v4) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  ((void (*)(std::__shared_weak_count *))locale->__on_zero_shared)(locale);
  std::__shared_weak_count::__release_weak(locale);
  std::locale::~locale(v2);
  BOOL v4 = a1[1].__locale_;
  if (v4) {
LABEL_4:
  }
    (*(void (**)(std::locale::__imp *))(*(void *)v4 + 8))(v4);
LABEL_5:

  operator delete(a1);
}

void std::__lookahead<char,std::regex_traits<char>>::__exec(uint64_t a1, uint64_t a2)
{
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v20 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v22 = 0xAAAAAAAAAAAAAA00;
  long long v24 = v4;
  uint64_t v21 = 0;
  long long v23 = 0uLL;
  LOBYTE(v24) = 0;
  BYTE8(v24) = 0;
  uint64_t v25 = 0;
  memset(&__p, 0, sizeof(__p));
  std::vector<std::csub_match>::size_type v5 = (*(_DWORD *)(a1 + 44) + 1);
  uint64_t v6 = *(void *)(a2 + 16);
  *(void *)&long long v19 = *(void *)(a2 + 24);
  *((void *)&v19 + 1) = v19;
  LOBYTE(v20) = 0;
  std::vector<std::sub_match<char const*>>::assign(&__p, v5, (std::vector<std::csub_match>::const_reference)&v19);
  *((void *)&v20 + 1) = v6;
  uint64_t v21 = v6;
  LOBYTE(v22) = 0;
  long long v23 = v19;
  LOBYTE(v24) = v20;
  uint64_t v25 = v6;
  BYTE8(v24) = 1;
  uint64_t v7 = *(const char **)(a2 + 16);
  if (*(unsigned char *)(a2 + 92)) {
    BOOL v8 = v7 == *(const char **)(a2 + 8);
  }
  else {
    BOOL v8 = 0;
  }
  char v9 = v8;
  if (*(unsigned __int8 *)(a1 + 84) == std::basic_regex<char,std::regex_traits<char>>::__match_at_start_ecma<std::allocator<std::sub_match<char const*>>>(a1 + 16, v7, *(const char **)(a2 + 24), (uint64_t *)&__p, *(_DWORD *)(a2 + 88) & 0xFBF | 0x40u, v9))
  {
    *(_DWORD *)a2 = -993;
    *(void *)(a2 + 80) = 0;
    begin = __p.__begin_;
    goto LABEL_13;
  }
  *(_DWORD *)a2 = -994;
  *(void *)(a2 + 80) = *(void *)(a1 + 8);
  begin = __p.__begin_;
  unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * (((char *)__p.__end_ - (char *)__p.__begin_) >> 3);
  if (v11 < 2)
  {
LABEL_13:
    if (!begin) {
      return;
    }
    goto LABEL_14;
  }
  int v12 = 0;
  int v13 = *(_DWORD *)(a1 + 80);
  uint64_t v14 = *(void *)(a2 + 32);
  unint64_t v15 = 1;
  do
  {
    int v16 = &begin[v15];
    uint64_t v17 = v14 + 24 * (v13 + v12);
    *(std::pair<const char *, const char *> *)uint64_t v17 = v16->std::pair<const char *, const char *>;
    *(unsigned char *)(v17 + 16) = v16->matched;
    unint64_t v15 = (v12 + 2);
    ++v12;
  }
  while (v11 > v15);
LABEL_14:
  __p.__end_ = begin;
  operator delete(begin);
}

void sub_2636A2418(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__match_at_start_ecma<std::allocator<std::sub_match<char const*>>>(uint64_t a1, const char *a2, const char *a3, uint64_t *a4, int a5, char a6)
{
  long long v48 = 0;
  long long v49 = 0;
  unint64_t v50 = 0;
  uint64_t v6 = *(void *)(a1 + 40);
  if (!v6) {
    return 0;
  }
  __x.second = a3;
  *(void *)&__x.matched = 0xAAAAAAAAAAAAAA00;
  __x.first = a3;
  *(_DWORD *)long long v46 = 0;
  memset(&v46[8], 0, 85);
  long long v49 = std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>((void **)&v48, (uint64_t)v46);
  if (*(void *)&v46[56])
  {
    *(void *)&v46[64] = *(void *)&v46[56];
    operator delete(*(void **)&v46[56]);
  }
  if (*(void *)&v46[32])
  {
    *(void *)&v46[40] = *(void *)&v46[32];
    operator delete(*(void **)&v46[32]);
  }
  int v13 = v49;
  *((_DWORD *)v49 - 24) = 0;
  *((void *)v13 - 11) = a2;
  *((void *)v13 - 10) = a2;
  *((void *)v13 - 9) = a3;
  uint64_t v14 = *((void *)v13 - 8);
  unint64_t v15 = *(unsigned int *)(a1 + 28);
  unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((*((void *)v13 - 7) - v14) >> 3);
  if (v15 <= v16)
  {
    if (v15 < v16) {
      *((void *)v13 - 7) = v14 + 24 * v15;
    }
  }
  else
  {
    std::vector<std::sub_match<char const*>>::__append((std::vector<std::csub_match> *)(v13 - 64), v15 - v16, &__x);
    int v13 = v49;
  }
  uint64_t v18 = *((void *)v13 - 5);
  unint64_t v19 = *(unsigned int *)(a1 + 32);
  unint64_t v20 = (*((void *)v13 - 4) - v18) >> 4;
  if (v19 <= v20)
  {
    if (v19 < v20) {
      *((void *)v13 - 4) = v18 + 16 * v19;
    }
  }
  else
  {
    std::vector<std::pair<unsigned long,char const*>>::__append((std::vector<std::pair<unsigned long, const char *>> *)(v13 - 40), v19 - v20);
    int v13 = v49;
  }
  *((void *)v13 - 2) = v6;
  *((_DWORD *)v13 - 2) = a5;
  *(v13 - 4) = a6;
  unsigned int v21 = 1;
  while (2)
  {
    if ((v21 & 0xFFF) == 0 && (int)(v21 >> 12) >= (int)a3 - (int)a2) {
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)12>();
    }
    uint64_t v23 = *((void *)v13 - 2);
    if (v23) {
      (*(void (**)(uint64_t, char *))(*(void *)v23 + 16))(v23, v13 - 96);
    }
    switch(*((_DWORD *)v13 - 24))
    {
      case 0xFFFFFC18:
        long long v24 = (const char *)*((void *)v13 - 10);
        if ((a5 & 0x20) != 0 && v24 == a2 || (a5 & 0x1000) != 0 && v24 != a3) {
          goto LABEL_27;
        }
        uint64_t v37 = *a4;
        *(void *)uint64_t v37 = a2;
        *(void *)(v37 + 8) = v24;
        *(unsigned char *)(v37 + 16) = 1;
        uint64_t v38 = *((void *)v13 - 8);
        uint64_t v39 = *((void *)v13 - 7) - v38;
        if (v39)
        {
          unint64_t v40 = 0xAAAAAAAAAAAAAAABLL * (v39 >> 3);
          uint64_t v41 = (unsigned char *)(v38 + 16);
          unsigned int v42 = 1;
          do
          {
            uint64_t v43 = v37 + 24 * v42;
            *(_OWORD *)uint64_t v43 = *((_OWORD *)v41 - 1);
            char v44 = *v41;
            v41 += 24;
            *(unsigned char *)(v43 + 16) = v44;
          }
          while (v40 > v42++);
        }
        uint64_t v17 = 1;
        unint64_t v22 = v48;
        if (!v48) {
          return v17;
        }
        goto LABEL_38;
      case 0xFFFFFC1D:
      case 0xFFFFFC1E:
      case 0xFFFFFC21:
        goto LABEL_17;
      case 0xFFFFFC1F:
LABEL_27:
        uint64_t v25 = v49;
        xpc_object_t v26 = (void *)*((void *)v49 - 5);
        if (v26)
        {
          *((void *)v49 - 4) = v26;
          operator delete(v26);
        }
        int v27 = (void *)*((void *)v25 - 8);
        if (v27)
        {
          *((void *)v25 - 7) = v27;
          operator delete(v27);
        }
        long long v49 = v25 - 96;
        goto LABEL_17;
      case 0xFFFFFC20:
        *(void *)&long long v28 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v28 + 1) = 0xAAAAAAAAAAAAAAAALL;
        *(_OWORD *)&v46[64] = v28;
        *(_OWORD *)&v46[80] = v28;
        *(_OWORD *)&v46[32] = v28;
        *(_OWORD *)&v46[48] = v28;
        *(_OWORD *)long long v46 = v28;
        *(_OWORD *)&v46[16] = v28;
        std::__state<char>::__state((uint64_t)v46, (long long *)v13 - 6);
        (*(void (**)(void, uint64_t, char *))(**((void **)v13 - 2) + 24))(*((void *)v13 - 2), 1, v13 - 96);
        (*(void (**)(void, void, unsigned char *))(**(void **)&v46[80] + 24))(*(void *)&v46[80], 0, v46);
        long long v29 = v49;
        if ((unint64_t)v49 >= v50)
        {
          long long v49 = std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>((void **)&v48, (uint64_t)v46);
          if (*(void *)&v46[56])
          {
            *(void *)&v46[64] = *(void *)&v46[56];
            operator delete(*(void **)&v46[56]);
          }
        }
        else
        {
          long long v30 = *(_OWORD *)&v46[16];
          *(_OWORD *)long long v49 = *(_OWORD *)v46;
          *((_OWORD *)v29 + 1) = v30;
          *((void *)v29 + 4) = 0;
          *((void *)v29 + 5) = 0;
          *((void *)v29 + 6) = 0;
          *((void *)v29 + 7) = 0;
          *((_OWORD *)v29 + 2) = *(_OWORD *)&v46[32];
          *((void *)v29 + 6) = *(void *)&v46[48];
          memset(&v46[32], 0, 24);
          *((void *)v29 + 8) = 0;
          *((void *)v29 + 9) = 0;
          *(_OWORD *)(v29 + 56) = *(_OWORD *)&v46[56];
          *((void *)v29 + 9) = *(void *)&v46[72];
          memset(&v46[56], 0, 24);
          uint64_t v31 = *(void *)&v46[80];
          *(void *)(v29 + 85) = *(void *)&v46[85];
          *((void *)v29 + 10) = v31;
          long long v49 = v29 + 96;
        }
        if (*(void *)&v46[32])
        {
          *(void *)&v46[40] = *(void *)&v46[32];
          operator delete(*(void **)&v46[32]);
        }
LABEL_17:
        unint64_t v22 = v48;
        int v13 = v49;
        ++v21;
        if (v48 != v49) {
          continue;
        }
        uint64_t v17 = 0;
        if (v48)
        {
LABEL_38:
          unint64_t v32 = v49;
          uint64_t v33 = v22;
          if (v49 != v22)
          {
            do
            {
              char v34 = (void *)*((void *)v32 - 5);
              if (v34)
              {
                *((void *)v32 - 4) = v34;
                operator delete(v34);
              }
              uint64_t v35 = (void *)*((void *)v32 - 8);
              if (v35)
              {
                *((void *)v32 - 7) = v35;
                operator delete(v35);
              }
              v32 -= 96;
            }
            while (v32 != v22);
            uint64_t v33 = v48;
          }
          long long v49 = v22;
          operator delete(v33);
        }
        break;
      default:
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)16>();
    }
    return v17;
  }
}

void sub_2636A2898(_Unwind_Exception *a1)
{
  std::vector<std::__state<char>>::~vector[abi:ne180100]((void **)(v1 - 112));
  _Unwind_Resume(a1);
}

void sub_2636A28AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::__state<char>::~__state((uint64_t *)va);
  std::vector<std::__state<char>>::~vector[abi:ne180100]((void **)(v3 - 112));
  _Unwind_Resume(a1);
}

void sub_2636A28F4(_Unwind_Exception *a1)
{
  std::vector<std::__state<char>>::~vector[abi:ne180100]((void **)(v1 - 112));
  _Unwind_Resume(a1);
}

void sub_2636A2908(_Unwind_Exception *a1)
{
  std::vector<std::__state<char>>::~vector[abi:ne180100]((void **)(v1 - 112));
  _Unwind_Resume(a1);
}

void std::vector<std::sub_match<char const*>>::assign(std::vector<std::csub_match> *this, std::vector<std::csub_match>::size_type __n, std::vector<std::csub_match>::const_reference __u)
{
  xpc_object_t value = this->__end_cap_.__value_;
  begin = this->__begin_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)begin) >> 3) < __n)
  {
    if (begin)
    {
      this->__end_ = begin;
      operator delete(begin);
      xpc_object_t value = 0;
      this->__begin_ = 0;
      this->__end_ = 0;
      this->__end_cap_.__value_ = 0;
    }
    if (__n > 0xAAAAAAAAAAAAAAALL) {
      goto LABEL_26;
    }
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)value >> 3);
    std::vector<std::csub_match>::size_type v9 = 2 * v8;
    if (2 * v8 <= __n) {
      std::vector<std::csub_match>::size_type v9 = __n;
    }
    unint64_t v10 = v8 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v9;
    if (v10 > 0xAAAAAAAAAAAAAAALL) {
LABEL_26:
    }
      std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::__throw_length_error[abi:ne180100]();
    uint64_t v11 = v10;
    int v12 = (std::sub_match<const char *> *)operator new(24 * v10);
    this->__begin_ = v12;
    this->__end_ = v12;
    this->__end_cap_.__value_ = &v12[v11];
    std::vector<std::csub_match>::size_type v13 = 24 * __n;
    uint64_t v14 = &v12[__n];
    do
    {
      v12->std::pair<const char *, const char *> = __u->std::pair<const char *, const char *>;
      *(void *)&v12->matched = *(void *)&__u->matched;
      ++v12;
      v13 -= 24;
    }
    while (v13);
    goto LABEL_25;
  }
  std::vector<std::csub_match>::pointer end = this->__end_;
  unint64_t v16 = end - begin;
  if (v16 >= __n) {
    std::vector<std::csub_match>::size_type v17 = __n;
  }
  else {
    std::vector<std::csub_match>::size_type v17 = end - begin;
  }
  if (v17)
  {
    uint64_t v18 = begin;
    do
    {
      *v18++ = *__u;
      --v17;
    }
    while (v17);
  }
  if (__n <= v16)
  {
    uint64_t v14 = &begin[__n];
LABEL_25:
    this->__end_ = v14;
    return;
  }
  unint64_t v19 = &end[__n - v16];
  std::vector<std::csub_match>::size_type v20 = 24 * __n - 24 * v16;
  do
  {
    std::pair<const char *, const char *> v21 = __u->std::pair<const char *, const char *>;
    *(void *)&end->matched = *(void *)&__u->matched;
    end->std::pair<const char *, const char *> = v21;
    ++end;
    v20 -= 24;
  }
  while (v20);
  this->__end_ = v19;
}

void *std::__state<char>::~__state(void *a1)
{
  int v2 = (void *)a1[7];
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[4];
  if (v3)
  {
    a1[5] = v3;
    operator delete(v3);
  }
  return a1;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)12>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x263E69360](exception, 12);
  __cxa_throw(exception, MEMORY[0x263F8C190], MEMORY[0x263F8C098]);
}

void sub_2636A2B68(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)16>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x263E69360](exception, 16);
  __cxa_throw(exception, MEMORY[0x263F8C190], MEMORY[0x263F8C098]);
}

void sub_2636A2BC0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void **std::vector<std::__state<char>>::~vector[abi:ne180100](void **a1)
{
  int v2 = (char *)*a1;
  if (*a1)
  {
    uint64_t v3 = (char *)a1[1];
    long long v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        std::vector<std::csub_match>::size_type v5 = (void *)*((void *)v3 - 5);
        if (v5)
        {
          *((void *)v3 - 4) = v5;
          operator delete(v5);
        }
        uint64_t v6 = (void *)*((void *)v3 - 8);
        if (v6)
        {
          *((void *)v3 - 7) = v6;
          operator delete(v6);
        }
        v3 -= 96;
      }
      while (v3 != v2);
      long long v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

char *std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>(void **a1, uint64_t a2)
{
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[1] - (unsigned char *)*a1) >> 5);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x2AAAAAAAAAAAAAALL) {
    std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::__throw_length_error[abi:ne180100]();
  }
  if (0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 5) > v4) {
    unint64_t v4 = 0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 5);
  }
  if (0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 5) >= 0x155555555555555) {
    unint64_t v6 = 0x2AAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0x2AAAAAAAAAAAAAALL) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    uint64_t v7 = (char *)operator new(96 * v6);
  }
  else
  {
    uint64_t v7 = 0;
  }
  long long v8 = *(_OWORD *)(a2 + 16);
  std::vector<std::csub_match>::size_type v9 = &v7[96 * v3];
  *(_OWORD *)std::vector<std::csub_match>::size_type v9 = *(_OWORD *)a2;
  *((_OWORD *)v9 + 1) = v8;
  unint64_t v10 = &v7[96 * v6];
  *((_OWORD *)v9 + 2) = *(_OWORD *)(a2 + 32);
  *((void *)v9 + 6) = *(void *)(a2 + 48);
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  *(void *)(v9 + 85) = *(void *)(a2 + 85);
  uint64_t v11 = *(void *)(a2 + 72);
  uint64_t v12 = *(void *)(a2 + 80);
  *((void *)v9 + 9) = 0;
  *((void *)v9 + 10) = v12;
  *(_OWORD *)(v9 + 56) = *(_OWORD *)(a2 + 56);
  *((void *)v9 + 9) = v11;
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  std::vector<std::csub_match>::size_type v13 = v9 + 96;
  uint64_t v14 = (char *)*a1;
  unint64_t v15 = (char *)a1[1];
  if (v15 == *a1)
  {
    *a1 = v9;
    a1[1] = v13;
    a1[2] = v10;
  }
  else
  {
    uint64_t v16 = 0;
    do
    {
      std::vector<std::csub_match>::size_type v17 = &v9[v16];
      uint64_t v18 = &v15[v16];
      long long v19 = *(_OWORD *)&v15[v16 - 80];
      *((_OWORD *)v17 - 6) = *(_OWORD *)&v15[v16 - 96];
      *((_OWORD *)v17 - 5) = v19;
      *((void *)v17 - 7) = 0;
      *((void *)v17 - 6) = 0;
      *((_OWORD *)v17 - 4) = *(_OWORD *)&v15[v16 - 64];
      *((void *)v17 - 6) = *(void *)&v15[v16 - 48];
      *((void *)v18 - 8) = 0;
      *((void *)v18 - 7) = 0;
      *((void *)v18 - 6) = 0;
      *((void *)v17 - 4) = 0;
      *((void *)v17 - 3) = 0;
      *(_OWORD *)(v17 - 40) = *(_OWORD *)&v15[v16 - 40];
      *((void *)v17 - 3) = *(void *)&v15[v16 - 24];
      *((void *)v18 - 5) = 0;
      *((void *)v18 - 4) = 0;
      *((void *)v18 - 3) = 0;
      uint64_t v20 = *(void *)&v15[v16 - 16];
      *(void *)(v17 - 11) = *(void *)&v15[v16 - 11];
      *((void *)v17 - 2) = v20;
      v16 -= 96;
    }
    while (&v15[v16] != v14);
    unint64_t v15 = (char *)*a1;
    std::pair<const char *, const char *> v21 = (char *)a1[1];
    *a1 = &v9[v16];
    a1[1] = v13;
    a1[2] = v10;
    while (v21 != v15)
    {
      unint64_t v22 = (void *)*((void *)v21 - 5);
      if (v22)
      {
        *((void *)v21 - 4) = v22;
        operator delete(v22);
      }
      uint64_t v23 = (void *)*((void *)v21 - 8);
      if (v23)
      {
        *((void *)v21 - 7) = v23;
        operator delete(v23);
      }
      v21 -= 96;
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v13;
}

void std::vector<std::sub_match<char const*>>::__append(std::vector<std::csub_match> *this, std::vector<std::csub_match>::size_type __n, std::vector<std::csub_match>::const_reference __x)
{
  std::vector<std::csub_match>::pointer end = this->__end_;
  xpc_object_t value = this->__end_cap_.__value_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)end) >> 3) >= __n)
  {
    if (__n)
    {
      std::vector<std::csub_match>::size_type v13 = &end[__n];
      std::vector<std::csub_match>::size_type v14 = 24 * __n;
      do
      {
        std::pair<const char *, const char *> v15 = __x->std::pair<const char *, const char *>;
        *(void *)&end->matched = *(void *)&__x->matched;
        end->std::pair<const char *, const char *> = v15;
        ++end;
        v14 -= 24;
      }
      while (v14);
      std::vector<std::csub_match>::pointer end = v13;
    }
    this->__end_ = end;
  }
  else
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)this->__begin_) >> 3);
    unint64_t v9 = v8 + __n;
    if (v8 + __n > 0xAAAAAAAAAAAAAAALL) {
      std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)this->__begin_) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11)
    {
      if (v11 > 0xAAAAAAAAAAAAAAALL) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v12 = (char *)operator new(24 * v11);
    }
    else
    {
      uint64_t v12 = 0;
    }
    uint64_t v16 = (std::sub_match<const char *> *)&v12[24 * v8];
    std::vector<std::csub_match>::size_type v17 = 24 * __n;
    uint64_t v18 = &v16[__n];
    long long v19 = v16;
    do
    {
      std::pair<const char *, const char *> v20 = __x->std::pair<const char *, const char *>;
      v19[1].first = *(const char **)&__x->matched;
      std::pair<const char *, const char *> *v19 = v20;
      long long v19 = (std::pair<const char *, const char *> *)((char *)v19 + 24);
      v17 -= 24;
    }
    while (v17);
    std::vector<std::csub_match>::pointer begin = this->__begin_;
    if (end != this->__begin_)
    {
      do
      {
        std::pair<const char *, const char *> v22 = end[-1].std::pair<const char *, const char *>;
        *(void *)&v16[-1].matched = *(void *)&end[-1].matched;
        v16[-1].std::pair<const char *, const char *> = v22;
        --v16;
        --end;
      }
      while (end != begin);
      std::vector<std::csub_match>::pointer end = this->__begin_;
    }
    this->__begin_ = v16;
    this->__end_ = v18;
    this->__end_cap_.__value_ = (std::sub_match<const char *> *)&v12[24 * v11];
    if (end)
    {
      operator delete(end);
    }
  }
}

void std::vector<std::pair<unsigned long,char const*>>::__append(std::vector<std::pair<unsigned long, const char *>> *this, std::vector<std::pair<unsigned long, const char *>>::size_type __n)
{
  std::vector<std::csub_match>::pointer end = this->__end_;
  xpc_object_t value = this->__end_cap_.__value_;
  if (__n <= value - end)
  {
    if (__n)
    {
      std::vector<std::pair<unsigned long, const char *>>::size_type v12 = 16 * __n;
      bzero(this->__end_, 16 * __n);
      std::vector<std::csub_match>::pointer end = (std::pair<unsigned long, const char *> *)((char *)end + v12);
    }
    this->__end_ = end;
  }
  else
  {
    std::vector<std::pair<unsigned long, const char *>>::pointer begin = this->__begin_;
    uint64_t v7 = end - this->__begin_;
    unint64_t v8 = v7 + __n;
    if ((v7 + __n) >> 60) {
      std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v9 = (char *)value - (char *)begin;
    if (v9 >> 3 > v8) {
      unint64_t v8 = v9 >> 3;
    }
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v10 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v10 = v8;
    }
    if (v10)
    {
      if (v10 >> 60) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      unint64_t v11 = (char *)operator new(16 * v10);
    }
    else
    {
      unint64_t v11 = 0;
    }
    std::vector<std::csub_match>::size_type v13 = (std::pair<unsigned long, const char *> *)&v11[16 * v7];
    size_t v14 = __n;
    std::pair<const char *, const char *> v15 = (std::pair<unsigned long, const char *> *)&v11[16 * v10];
    bzero(v13, v14 * 16);
    uint64_t v16 = &v13[v14];
    if (end != begin)
    {
      do
      {
        v13[-1] = end[-1];
        --v13;
        --end;
      }
      while (end != begin);
      std::vector<std::csub_match>::pointer end = this->__begin_;
    }
    this->__begin_ = v13;
    this->__end_ = v16;
    this->__end_cap_.__value_ = v15;
    if (end)
    {
      operator delete(end);
    }
  }
}

uint64_t std::__state<char>::__state(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  long long v5 = a2[1];
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = v4;
  *(_OWORD *)(a1 + 16) = v5;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  uint64_t v7 = (unsigned char *)*((void *)a2 + 4);
  unint64_t v6 = (unsigned char *)*((void *)a2 + 5);
  int64_t v8 = v6 - v7;
  if (v6 != v7)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v8 >> 3) >= 0xAAAAAAAAAAAAAABLL) {
      std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v9 = (char *)operator new(v8);
    *(void *)(a1 + 32) = v9;
    *(void *)(a1 + 40) = v9;
    *(void *)(a1 + 48) = &v9[8 * (v8 >> 3)];
    size_t v10 = 24 * ((v8 - 24) / 0x18uLL) + 24;
    memcpy(v9, v7, v10);
    *(void *)(a1 + 40) = &v9[v10];
  }
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  std::vector<std::pair<unsigned long, const char *>>::size_type v12 = (unsigned char *)*((void *)a2 + 7);
  unint64_t v11 = (unsigned char *)*((void *)a2 + 8);
  uint64_t v13 = v11 - v12;
  if (v11 != v12)
  {
    if (v13 < 0) {
      std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::__throw_length_error[abi:ne180100]();
    }
    size_t v14 = (char *)operator new(v11 - v12);
    *(void *)(a1 + 56) = v14;
    *(void *)(a1 + 64) = v14;
    *(void *)(a1 + 72) = &v14[16 * (v13 >> 4)];
    memcpy(v14, v12, v13 & 0xFFFFFFFFFFFFFFF0);
    *(void *)(a1 + 64) = &v14[v13 & 0xFFFFFFFFFFFFFFF0];
  }
  uint64_t v15 = *((void *)a2 + 10);
  *(void *)(a1 + 85) = *(void *)((char *)a2 + 85);
  *(void *)(a1 + 80) = v15;
  return a1;
}

void sub_2636A3264(_Unwind_Exception *exception_object)
{
  long long v5 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 64) = v5;
    operator delete(v5);
  }
  unint64_t v6 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 40) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(exception_object);
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_atom_escape<std::__wrap_iter<char const*>>(std::basic_regex<char> *this, unsigned __int8 *a2, unsigned __int8 *a3)
{
  if (a2 == a3) {
    return a2;
  }
  long long v4 = a2;
  if (*a2 == 92)
  {
    unint64_t v6 = a2 + 1;
    if (a2 + 1 == a3) {
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
    }
    int v8 = *v6;
    unsigned int v9 = v8 - 48;
    if (v8 == 48)
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_char(this, v9);
      return a2 + 2;
    }
    if ((v8 - 49) <= 8)
    {
      long long v4 = a2 + 2;
      if (a2 + 2 == a3)
      {
        long long v4 = a3;
      }
      else
      {
        while (1)
        {
          int v11 = *v4;
          if ((v11 - 48) > 9) {
            break;
          }
          if (v9 >= 0x19999999) {
            goto LABEL_24;
          }
          ++v4;
          unsigned int v9 = v11 + 10 * v9 - 48;
          if (v4 == a3)
          {
            long long v4 = a3;
            break;
          }
        }
        if (!v9) {
LABEL_24:
        }
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
      }
      if (v9 > this->__marked_count_) {
        goto LABEL_24;
      }
      std::basic_regex<char,std::regex_traits<char>>::__push_back_ref(this, v9);
      if (v4 != v6) {
        return v4;
      }
    }
    long long v4 = std::basic_regex<char,std::regex_traits<char>>::__parse_character_class_escape<std::__wrap_iter<char const*>>((uint64_t)this, a2 + 1, a3);
    if (v6 == v4)
    {
      std::vector<std::pair<unsigned long, const char *>>::size_type v12 = std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<std::__wrap_iter<char const*>>(this, a2 + 1, a3, 0);
      if (v6 == v12) {
        return a2;
      }
      else {
        return v12;
      }
    }
  }
  return v4;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<std::__wrap_iter<char const*>>(uint64_t a1, char *a2, char *a3)
{
  if (a2 != a3 && *a2 == 91)
  {
    if (a2 + 1 == a3) {
      goto LABEL_20;
    }
    int v5 = a2[1];
    char v6 = v5 == 94;
    uint64_t v7 = v5 == 94 ? a2 + 2 : a2 + 1;
    int v8 = operator new(0xB0uLL);
    std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v8, a1, *(void *)(*(void *)(a1 + 56) + 8), v6, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
    *(void *)(*(void *)(a1 + 56) + 8) = v8;
    *(void *)(a1 + 56) = v8;
    if (v7 == a3) {
      goto LABEL_20;
    }
    if ((*(_WORD *)(a1 + 24) & 0x1F0) != 0 && *v7 == 93)
    {
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)v8, 93);
      ++v7;
    }
    if (v7 == a3) {
      goto LABEL_20;
    }
    do
    {
      unsigned int v9 = v7;
      uint64_t v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_expression_term<std::__wrap_iter<char const*>>(a1, v7, a3, (uint64_t)v8);
    }
    while (v9 != v7);
    if (v9 == a3) {
      goto LABEL_20;
    }
    if (*v9 == 45)
    {
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)v8, 45);
      ++v9;
    }
    if (v9 == a3 || *v9 != 93) {
LABEL_20:
    }
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
    return v9 + 1;
  }
  return a2;
}

void sub_2636A3540(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)11>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x263E69360](exception, 11);
  __cxa_throw(exception, MEMORY[0x263F8C190], MEMORY[0x263F8C098]);
}

void sub_2636A3598(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_pattern_character<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, std::basic_regex<char> *this, std::basic_regex<char> *a3)
{
  if (this == a3) {
    return this;
  }
  switch(LOBYTE(this->__traits_.__loc_.__locale_))
  {
    case '$':
    case '(':
    case ')':
    case '*':
    case '+':
    case '.':
    case '?':
    case '[':
    case '\\':
    case ']':
    case '^':
    case '{':
    case '|':
    case '}':
      return this;
    default:
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, (std::basic_regex<char>::value_type)this->__traits_.__loc_.__locale_);
      uint64_t result = (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
      break;
  }
  return result;
}

void (__cdecl ***std::__match_any_but_newline<char>::~__match_any_but_newline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  int v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

void std::__match_any_but_newline<char>::~__match_any_but_newline(void (__cdecl ***__p)(std::__owns_one_state<char> *__hidden this))
{
  int v2 = __p[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }

  operator delete(__p);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x263E69360](exception, 3);
  __cxa_throw(exception, MEMORY[0x263F8C190], MEMORY[0x263F8C098]);
}

void sub_2636A38BC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unsigned char *std::basic_regex<char,std::regex_traits<char>>::__parse_character_class_escape<std::__wrap_iter<char const*>>(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  unint64_t v3 = a2;
  if (a2 != a3)
  {
    switch(*a2)
    {
      case 'D':
        int v5 = operator new(0xB0uLL);
        std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v5, a1, *(void *)(*(void *)(a1 + 56) + 8), 1, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
        goto LABEL_7;
      case 'S':
        int v5 = operator new(0xB0uLL);
        std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v5, a1, *(void *)(*(void *)(a1 + 56) + 8), 1, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
        goto LABEL_11;
      case 'W':
        char v6 = operator new(0xB0uLL);
        std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v6, a1, *(void *)(*(void *)(a1 + 56) + 8), 1, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
        goto LABEL_9;
      case 'd':
        int v5 = operator new(0xB0uLL);
        std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v5, a1, *(void *)(*(void *)(a1 + 56) + 8), 0, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
LABEL_7:
        *(void *)(*(void *)(a1 + 56) + 8) = v5;
        *(void *)(a1 + 56) = v5;
        int v7 = v5[40] | 0x400;
        goto LABEL_12;
      case 's':
        int v5 = operator new(0xB0uLL);
        std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v5, a1, *(void *)(*(void *)(a1 + 56) + 8), 0, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
LABEL_11:
        *(void *)(*(void *)(a1 + 56) + 8) = v5;
        *(void *)(a1 + 56) = v5;
        int v7 = v5[40] | 0x4000;
LABEL_12:
        v5[40] = v7;
        goto LABEL_13;
      case 'w':
        char v6 = operator new(0xB0uLL);
        std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v6, a1, *(void *)(*(void *)(a1 + 56) + 8), 0, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
LABEL_9:
        *(void *)(*(void *)(a1 + 56) + 8) = v6;
        *(void *)(a1 + 56) = v6;
        v6[40] |= 0x500u;
        std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)v6, 95);
LABEL_13:
        ++v3;
        break;
      default:
        return v3;
    }
  }
  return v3;
}

void sub_2636A3AAC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_2636A3AC0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_2636A3AD4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_2636A3AE8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_2636A3AFC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_2636A3B10(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t *a4)
{
  long long v4 = a2;
  if (a2 == a3) {
    return v4;
  }
  uint64_t v5 = *a2;
  std::basic_regex<char>::value_type v6 = v5;
  switch((char)v5)
  {
    case '0':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 0;
        return v4 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 0);
        return v4 + 1;
      }
    case 'c':
      if (v4 + 1 == a3 || (char)v4[1] < 65) {
        goto LABEL_85;
      }
      unsigned int v8 = v4[1];
      if (v8 >= 0x5B && (v8 - 97) > 0x19u) {
        goto LABEL_85;
      }
      std::basic_regex<char>::value_type v10 = v8 & 0x1F;
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(unsigned char *)a4 = v10;
        *((unsigned char *)a4 + 1) = 0;
        return v4 + 2;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v10);
        return v4 + 2;
      }
    case 'f':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 12;
        return v4 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 12);
        return v4 + 1;
      }
    case 'n':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 10;
        return v4 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 10);
        return v4 + 1;
      }
    case 'r':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 13;
        return v4 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 13);
        return v4 + 1;
      }
    case 't':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 9;
        return v4 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 9);
        return v4 + 1;
      }
    case 'u':
      if (v4 + 1 != a3)
      {
        int v11 = v4[1];
        if ((v11 & 0xF8) == 0x30 || (v11 & 0xFE) == 0x38 || (v11 | 0x20u) - 97 < 6)
        {
          v4 += 2;
          if (v4 != a3)
          {
            int v12 = *v4;
            if ((v12 & 0xF8) == 0x30 || (v12 & 0xFE) == 0x38 || (v12 | 0x20u) - 97 < 6) {
              goto LABEL_42;
            }
          }
        }
      }
      goto LABEL_85;
    case 'v':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 11;
        return v4 + 1;
      }
      else
      {
        std::basic_regex<char>::value_type v6 = 11;
LABEL_68:
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v6);
        return v4 + 1;
      }
    case 'x':
LABEL_42:
      if (v4 + 1 == a3) {
        goto LABEL_85;
      }
      unsigned __int8 v13 = v4[1];
      char v14 = -48;
      if ((v13 & 0xF8) == 0x30 || (v13 & 0xFE) == 0x38) {
        goto LABEL_47;
      }
      v13 |= 0x20u;
      if ((v13 - 97) >= 6u) {
        goto LABEL_85;
      }
      char v14 = -87;
LABEL_47:
      if (v4 + 2 == a3) {
        goto LABEL_85;
      }
      unsigned __int8 v15 = v4[2];
      char v16 = -48;
      if ((v15 & 0xF8) != 0x30 && (v15 & 0xFE) != 0x38)
      {
        v15 |= 0x20u;
        if ((v15 - 97) >= 6u) {
LABEL_85:
        }
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
        char v16 = -87;
      }
      std::basic_regex<char>::value_type v17 = v15 + 16 * (v13 + v14) + v16;
      if (!a4)
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v17);
        v4 += 3;
        return v4;
      }
      if (*((char *)a4 + 23) < 0)
      {
        a4[1] = 1;
        a4 = (uint64_t *)*a4;
      }
      else
      {
        *((unsigned char *)a4 + 23) = 1;
      }
      *(unsigned char *)a4 = v17;
      *((unsigned char *)a4 + 1) = 0;
      uint64_t result = v4 + 3;
      break;
    default:
      if ((char)v5 == 95 || ((char)v5 & 0x80000000) == 0 && (a1->__traits_.__ct_->__tab_[v5] & 0x500) != 0) {
        goto LABEL_85;
      }
      if (!a4) {
        goto LABEL_68;
      }
      if (*((char *)a4 + 23) < 0)
      {
        a4[1] = 1;
        a4 = (uint64_t *)*a4;
      }
      else
      {
        *((unsigned char *)a4 + 23) = 1;
      }
      *(unsigned char *)a4 = v5;
      *((unsigned char *)a4 + 1) = 0;
      return v4 + 1;
  }
  return result;
}

void std::basic_regex<char,std::regex_traits<char>>::__push_char(std::basic_regex<char> *this, std::basic_regex<char>::value_type __c)
{
  uint64_t v2 = __c;
  std::basic_regex<_CharT, _Traits>::flag_type flags = this->__flags_;
  if (flags)
  {
    unsigned int v8 = (char *)operator new(0x30uLL);
    first = this->__end_->__first_;
    *(void *)unsigned int v8 = &unk_270EA6018;
    *((void *)v8 + 1) = first;
    std::locale::locale((std::locale *)v8 + 2, &this->__traits_.__loc_);
    *(_OWORD *)(v8 + 24) = *(_OWORD *)&this->__traits_.__ct_;
    v8[40] = ((uint64_t (*)(const std::ctype<char> *, uint64_t))this->__traits_.__ct_->do_tolower)(this->__traits_.__ct_, v2);
LABEL_6:
    this->__end_->__first_ = (std::__node<char> *)v8;
    goto LABEL_7;
  }
  if ((flags & 8) != 0)
  {
    unsigned int v8 = (char *)operator new(0x30uLL);
    std::basic_regex<char>::value_type v10 = this->__end_->__first_;
    *(void *)unsigned int v8 = &unk_270EA6060;
    *((void *)v8 + 1) = v10;
    std::locale::locale((std::locale *)v8 + 2, &this->__traits_.__loc_);
    *(_OWORD *)(v8 + 24) = *(_OWORD *)&this->__traits_.__ct_;
    v8[40] = v2;
    goto LABEL_6;
  }
  uint64_t v5 = (std::__node<char> *)operator new(0x18uLL);
  std::vector<std::csub_match>::pointer end = this->__end_;
  int v7 = end->__first_;
  v5->__vftable = (std::__node<char>_vtbl *)&unk_270EA60A8;
  v5[1].__vftable = (std::__node<char>_vtbl *)v7;
  LOBYTE(v5[2].__vftable) = v2;
  end->__first_ = v5;
LABEL_7:
  this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
}

void sub_2636A4338(_Unwind_Exception *a1)
{
  std::locale::~locale(v2);
  long long v4 = v1[1];
  if (v4) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v4 + 1))(v4);
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x263E69360](exception, 4);
  __cxa_throw(exception, MEMORY[0x263F8C190], MEMORY[0x263F8C098]);
}

void sub_2636A43E4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::basic_regex<char,std::regex_traits<char>>::__push_back_ref(std::basic_regex<char> *this, int __i)
{
  std::basic_regex<_CharT, _Traits>::flag_type flags = this->__flags_;
  if (flags)
  {
    unsigned int v8 = (std::locale *)operator new(0x30uLL);
    unsigned int v9 = v8;
    v8[1].__locale_ = (std::locale::__imp *)this->__end_->__first_;
    std::basic_regex<char>::value_type v10 = (std::locale::__imp *)&unk_270EA60F0;
LABEL_6:
    v8->__locale_ = v10;
    std::locale::locale(v8 + 2, &this->__traits_.__loc_);
    *(_OWORD *)&v9[3].__locale_ = *(_OWORD *)&this->__traits_.__ct_;
    LODWORD(v9[5].__locale_) = __i;
    this->__end_->__first_ = (std::__node<char> *)v9;
    goto LABEL_7;
  }
  if ((flags & 8) != 0)
  {
    unsigned int v8 = (std::locale *)operator new(0x30uLL);
    unsigned int v9 = v8;
    v8[1].__locale_ = (std::locale::__imp *)this->__end_->__first_;
    std::basic_regex<char>::value_type v10 = (std::locale::__imp *)&unk_270EA6138;
    goto LABEL_6;
  }
  uint64_t v5 = (std::__node<char> *)operator new(0x18uLL);
  std::vector<std::csub_match>::pointer end = this->__end_;
  first = end->__first_;
  v5->__vftable = (std::__node<char>_vtbl *)&unk_270EA6180;
  v5[1].__vftable = (std::__node<char>_vtbl *)first;
  LODWORD(v5[2].__vftable) = __i;
  end->__first_ = v5;
LABEL_7:
  this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
}

std::locale *std::__match_char_icase<char,std::regex_traits<char>>::~__match_char_icase(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_270EA6018;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  return a1;
}

void std::__match_char_icase<char,std::regex_traits<char>>::~__match_char_icase(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_270EA6018;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }

  operator delete(a1);
}

uint64_t std::__match_char_icase<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  unint64_t v3 = *(char **)(a2 + 16);
  if (v3 == *(char **)(a2 + 24)
    || (uint64_t v4 = result,
        uint64_t result = (*(uint64_t (**)(void, void))(**(void **)(result + 24) + 40))(*(void *)(result + 24), *v3), *(unsigned __int8 *)(v4 + 40) != result))
  {
    *(_DWORD *)a2 = -993;
    *(void *)(a2 + 80) = 0;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    ++*(void *)(a2 + 16);
    *(void *)(a2 + 80) = *(void *)(v4 + 8);
  }
  return result;
}

std::locale *std::__match_char_collate<char,std::regex_traits<char>>::~__match_char_collate(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_270EA6060;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  return a1;
}

void std::__match_char_collate<char,std::regex_traits<char>>::~__match_char_collate(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_270EA6060;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }

  operator delete(a1);
}

uint64_t std::__match_char_collate<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) || *v2 != *(unsigned __int8 *)(result + 40))
  {
    *(_DWORD *)a2 = -993;
    *(void *)(a2 + 80) = 0;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(void *)(a2 + 16) = v2 + 1;
    *(void *)(a2 + 80) = *(void *)(result + 8);
  }
  return result;
}

void (__cdecl ***std::__match_char<char>::~__match_char(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  uint64_t v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

void std::__match_char<char>::~__match_char(void (__cdecl ***__p)(std::__owns_one_state<char> *__hidden this))
{
  uint64_t v2 = __p[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }

  operator delete(__p);
}

uint64_t std::__match_char<char>::__exec(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) || *v2 != *(unsigned __int8 *)(result + 16))
  {
    *(_DWORD *)a2 = -993;
    *(void *)(a2 + 80) = 0;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(void *)(a2 + 16) = v2 + 1;
    *(void *)(a2 + 80) = *(void *)(result + 8);
  }
  return result;
}

std::locale *std::__back_ref_icase<char,std::regex_traits<char>>::~__back_ref_icase(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_270EA60F0;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  return a1;
}

void std::__back_ref_icase<char,std::regex_traits<char>>::~__back_ref_icase(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_270EA60F0;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }

  operator delete(a1);
}

uint64_t std::__back_ref_icase<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 32) + 24 * (*(_DWORD *)(result + 40) - 1);
  if (!*(unsigned char *)(v3 + 16)
    || (uint64_t v4 = *(void *)(v3 + 8) - *(void *)v3, v5 = *(void *)(a2 + 16), *(void *)(a2 + 24) - v5 < v4))
  {
LABEL_3:
    *(_DWORD *)a2 = -993;
    *(void *)(a2 + 80) = 0;
    return result;
  }
  uint64_t v6 = result;
  if (v4 >= 1)
  {
    uint64_t v7 = 0;
    while (1)
    {
      int v8 = (*(uint64_t (**)(void, void))(**(void **)(v6 + 24) + 40))(*(void *)(v6 + 24), *(char *)(*(void *)v3 + v7));
      uint64_t result = (*(uint64_t (**)(void, void))(**(void **)(v6 + 24) + 40))(*(void *)(v6 + 24), *(char *)(*(void *)(a2 + 16) + v7));
      if (v8 != result) {
        goto LABEL_3;
      }
      if (v4 == ++v7)
      {
        uint64_t v5 = *(void *)(a2 + 16);
        break;
      }
    }
  }
  *(_DWORD *)a2 = -994;
  *(void *)(a2 + 16) = v5 + v4;
  *(void *)(a2 + 80) = *(void *)(v6 + 8);
  return result;
}

std::locale *std::__back_ref_collate<char,std::regex_traits<char>>::~__back_ref_collate(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_270EA6138;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  return a1;
}

void std::__back_ref_collate<char,std::regex_traits<char>>::~__back_ref_collate(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_270EA6138;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }

  operator delete(a1);
}

uint64_t std::__back_ref_collate<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  unsigned int v2 = *(_DWORD *)(result + 40) - 1;
  uint64_t v3 = *(void *)(a2 + 32);
  if (!*(unsigned char *)(v3 + 24 * v2 + 16)
    || (uint64_t v4 = (unsigned __int8 **)(v3 + 24 * v2),
        uint64_t v5 = *v4,
        uint64_t v6 = v4[1] - *v4,
        uint64_t v7 = *(void *)(a2 + 16),
        *(void *)(a2 + 24) - v7 < v6))
  {
LABEL_3:
    *(_DWORD *)a2 = -993;
    *(void *)(a2 + 80) = 0;
    return result;
  }
  if (v6 >= 1)
  {
    uint64_t v8 = v6;
    unsigned int v9 = *(unsigned __int8 **)(a2 + 16);
    do
    {
      int v11 = *v5++;
      int v10 = v11;
      int v12 = *v9++;
      if (v10 != v12) {
        goto LABEL_3;
      }
    }
    while (--v8);
  }
  *(_DWORD *)a2 = -994;
  *(void *)(a2 + 16) = v7 + v6;
  *(void *)(a2 + 80) = *(void *)(result + 8);
  return result;
}

void (__cdecl ***std::__back_ref<char>::~__back_ref(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  unsigned int v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

void std::__back_ref<char>::~__back_ref(void (__cdecl ***__p)(std::__owns_one_state<char> *__hidden this))
{
  unsigned int v2 = __p[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }

  operator delete(__p);
}

unsigned int *std::__back_ref<char>::__exec(unsigned int *result, uint64_t a2)
{
  unint64_t v2 = result[4];
  uint64_t v3 = *(void *)(a2 + 32);
  if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(a2 + 40) - v3) >> 3) < v2) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
  }
  unsigned int v5 = v2 - 1;
  if (*(unsigned char *)(v3 + 24 * v5 + 16)
    && (uint64_t v6 = result,
        uint64_t v7 = v3 + 24 * v5,
        uint64_t result = *(unsigned int **)v7,
        int64_t v8 = *(void *)(v7 + 8) - *(void *)v7,
        uint64_t v9 = *(void *)(a2 + 16),
        *(void *)(a2 + 24) - v9 >= v8)
    && (uint64_t result = (unsigned int *)memcmp(result, *(const void **)(a2 + 16), v8), !result))
  {
    *(_DWORD *)a2 = -994;
    *(void *)(a2 + 16) = v9 + v8;
    *(void *)(a2 + 80) = *((void *)v6 + 1);
  }
  else
  {
    *(_DWORD *)a2 = -993;
    *(void *)(a2 + 80) = 0;
  }
  return result;
}

void std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](uint64_t a1, uint64_t a2)
{
  char v2 = a2;
  if (!*(unsigned char *)(a1 + 169))
  {
    uint64_t v6 = (void *)(a1 + 40);
    unsigned int v5 = *(unsigned char **)(a1 + 48);
    unint64_t v16 = *(void *)(a1 + 56);
    if (*(unsigned char *)(a1 + 170))
    {
      if ((unint64_t)v5 < v16) {
        goto LABEL_24;
      }
      std::basic_regex<char>::value_type v17 = (unsigned char *)*v6;
      unint64_t v18 = (unint64_t)&v5[-*v6];
      unint64_t v19 = v18 + 1;
      if ((uint64_t)(v18 + 1) >= 0)
      {
        unint64_t v20 = v16 - (void)v17;
        if (2 * v20 > v19) {
          unint64_t v19 = 2 * v20;
        }
        if (v20 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v21 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v21 = v19;
        }
        if (v21)
        {
          int v12 = operator new(v21);
          unsigned __int8 v13 = &v12[v18];
          char v14 = &v12[v21];
          v12[v18] = v2;
          uint64_t v15 = (uint64_t)&v12[v18 + 1];
          if (v5 == v17) {
            goto LABEL_49;
          }
        }
        else
        {
          int v12 = 0;
          unsigned __int8 v13 = &v5[-*v6];
          char v14 = 0;
          *(unsigned char *)unint64_t v18 = a2;
          uint64_t v15 = v18 + 1;
          if (v5 == v17) {
            goto LABEL_49;
          }
        }
        if (v18 >= 8 && (unint64_t)(v17 - v12) >= 0x20)
        {
          if (v18 >= 0x20)
          {
            unint64_t v28 = v18 & 0xFFFFFFFFFFFFFFE0;
            uint64_t v38 = (long long *)(v5 - 16);
            uint64_t v39 = &v12[v5 - 16 - v17];
            unint64_t v40 = v18 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              long long v41 = *v38;
              *(v39 - 1) = *(v38 - 1);
              *uint64_t v39 = v41;
              v39 -= 2;
              v38 -= 2;
              v40 -= 32;
            }
            while (v40);
            if (v18 == v28) {
              goto LABEL_86;
            }
            if ((v18 & 0x18) == 0)
            {
              v13 -= v28;
              v5 -= v28;
              goto LABEL_80;
            }
          }
          else
          {
            unint64_t v28 = 0;
          }
          v13 -= v18 & 0xFFFFFFFFFFFFFFF8;
          unsigned int v42 = &v5[-v28 - 8];
          uint64_t v43 = &v12[v42 - v17];
          unint64_t v44 = v28 - (v18 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            uint64_t v45 = *(void *)v42;
            v42 -= 8;
            *v43-- = v45;
            v44 += 8;
          }
          while (v44);
          v5 -= v18 & 0xFFFFFFFFFFFFFFF8;
          if (v18 == (v18 & 0xFFFFFFFFFFFFFFF8)) {
            goto LABEL_86;
          }
        }
LABEL_80:
        uint64_t v56 = v13 - 1;
        do
        {
          char v57 = *--v5;
          *v56-- = v57;
        }
        while (v5 != v17);
        goto LABEL_86;
      }
LABEL_89:
      std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::__throw_length_error[abi:ne180100]();
    }
    if ((unint64_t)v5 < v16) {
      goto LABEL_24;
    }
    uint64_t v23 = (unsigned char *)*v6;
    unint64_t v24 = (unint64_t)&v5[-*v6];
    unint64_t v25 = v24 + 1;
    if ((uint64_t)(v24 + 1) < 0) {
      goto LABEL_89;
    }
    unint64_t v26 = v16 - (void)v23;
    if (2 * v26 > v25) {
      unint64_t v25 = 2 * v26;
    }
    if (v26 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v27 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v27 = v25;
    }
    if (v27)
    {
      int v12 = operator new(v27);
      unsigned __int8 v13 = &v12[v24];
      char v14 = &v12[v27];
      v12[v24] = v2;
      uint64_t v15 = (uint64_t)&v12[v24 + 1];
      if (v5 == v23)
      {
LABEL_49:
        *(void *)(a1 + 40) = v13;
        *(void *)(a1 + 48) = v15;
        *(void *)(a1 + 56) = v14;
        if (!v5) {
          goto LABEL_88;
        }
        goto LABEL_87;
      }
    }
    else
    {
      int v12 = 0;
      unsigned __int8 v13 = &v5[-*v6];
      char v14 = 0;
      *(unsigned char *)unint64_t v24 = a2;
      uint64_t v15 = v24 + 1;
      if (v5 == v23) {
        goto LABEL_49;
      }
    }
    if (v24 >= 8 && (unint64_t)(v23 - v12) >= 0x20)
    {
      if (v24 >= 0x20)
      {
        unint64_t v29 = v24 & 0xFFFFFFFFFFFFFFE0;
        long long v46 = (long long *)(v5 - 16);
        long long v47 = &v12[v5 - 16 - v23];
        unint64_t v48 = v24 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          long long v49 = *v46;
          *(v47 - 1) = *(v46 - 1);
          *long long v47 = v49;
          v47 -= 2;
          v46 -= 2;
          v48 -= 32;
        }
        while (v48);
        if (v24 == v29) {
          goto LABEL_86;
        }
        if ((v24 & 0x18) == 0)
        {
          v13 -= v29;
          v5 -= v29;
          goto LABEL_84;
        }
      }
      else
      {
        unint64_t v29 = 0;
      }
      v13 -= v24 & 0xFFFFFFFFFFFFFFF8;
      unint64_t v50 = &v5[-v29 - 8];
      uint64_t v51 = &v12[v50 - v23];
      unint64_t v52 = v29 - (v24 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        uint64_t v53 = *(void *)v50;
        v50 -= 8;
        *v51-- = v53;
        v52 += 8;
      }
      while (v52);
      v5 -= v24 & 0xFFFFFFFFFFFFFFF8;
      if (v24 == (v24 & 0xFFFFFFFFFFFFFFF8)) {
        goto LABEL_86;
      }
    }
LABEL_84:
    size_t v58 = v13 - 1;
    do
    {
      char v59 = *--v5;
      *v58-- = v59;
    }
    while (v5 != v23);
    goto LABEL_86;
  }
  char v2 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), a2);
  unsigned int v5 = *(unsigned char **)(a1 + 48);
  unint64_t v4 = *(void *)(a1 + 56);
  if ((unint64_t)v5 < v4)
  {
LABEL_24:
    unsigned char *v5 = v2;
    uint64_t v15 = (uint64_t)(v5 + 1);
    goto LABEL_88;
  }
  uint64_t v6 = (void *)(a1 + 40);
  uint64_t v7 = *(unsigned char **)(a1 + 40);
  unint64_t v8 = v5 - v7;
  uint64_t v9 = v5 - v7 + 1;
  if (v9 < 0) {
    goto LABEL_89;
  }
  unint64_t v10 = v4 - (void)v7;
  if (2 * v10 > v9) {
    uint64_t v9 = 2 * v10;
  }
  if (v10 >= 0x3FFFFFFFFFFFFFFFLL) {
    size_t v11 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    size_t v11 = v9;
  }
  if (v11)
  {
    int v12 = operator new(v11);
    unsigned __int8 v13 = &v12[v8];
    char v14 = &v12[v11];
    v12[v8] = v2;
    uint64_t v15 = (uint64_t)&v12[v8 + 1];
    if (v5 == v7) {
      goto LABEL_49;
    }
  }
  else
  {
    int v12 = 0;
    unsigned __int8 v13 = (char *)(v5 - v7);
    char v14 = 0;
    *(unsigned char *)unint64_t v8 = v2;
    uint64_t v15 = v8 + 1;
    if (v5 == v7) {
      goto LABEL_49;
    }
  }
  if (v8 < 8 || (unint64_t)(v7 - v12) < 0x20) {
    goto LABEL_76;
  }
  if (v8 < 0x20)
  {
    unint64_t v22 = 0;
    goto LABEL_55;
  }
  unint64_t v22 = v8 & 0xFFFFFFFFFFFFFFE0;
  long long v30 = (long long *)(v5 - 16);
  uint64_t v31 = &v12[v5 - 16 - v7];
  unint64_t v32 = v8 & 0xFFFFFFFFFFFFFFE0;
  do
  {
    long long v33 = *v30;
    *(v31 - 1) = *(v30 - 1);
    *uint64_t v31 = v33;
    v31 -= 2;
    v30 -= 2;
    v32 -= 32;
  }
  while (v32);
  if (v8 != v22)
  {
    if ((v8 & 0x18) == 0)
    {
      v13 -= v22;
      v5 -= v22;
      goto LABEL_76;
    }
LABEL_55:
    v13 -= v8 & 0xFFFFFFFFFFFFFFF8;
    char v34 = &v5[-v22 - 8];
    uint64_t v35 = &v12[v34 - v7];
    unint64_t v36 = v22 - (v8 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      uint64_t v37 = *(void *)v34;
      v34 -= 8;
      *v35-- = v37;
      v36 += 8;
    }
    while (v36);
    v5 -= v8 & 0xFFFFFFFFFFFFFFF8;
    if (v8 == (v8 & 0xFFFFFFFFFFFFFFF8)) {
      goto LABEL_86;
    }
LABEL_76:
    uint64_t v54 = v13 - 1;
    do
    {
      char v55 = *--v5;
      *v54-- = v55;
    }
    while (v5 != v7);
  }
LABEL_86:
  unsigned int v5 = (unsigned char *)*v6;
  *(void *)(a1 + 40) = v12;
  *(void *)(a1 + 48) = v15;
  *(void *)(a1 + 56) = v14;
  if (v5) {
LABEL_87:
  }
    operator delete(v5);
LABEL_88:
  *(void *)(a1 + 48) = v15;
}

uint64_t std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100](uint64_t a1, uint64_t a2, uint64_t a3, char a4, char a5, char a6)
{
  *(void *)(a1 + 8) = a3;
  size_t v11 = (const std::locale *)(a1 + 16);
  std::locale::locale((std::locale *)(a1 + 16), (const std::locale *)a2);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(unsigned char *)(a1 + 168) = a4;
  *(unsigned char *)(a1 + 169) = a5;
  *(unsigned char *)(a1 + 170) = a6;
  std::locale::locale(&v16, v11);
  std::locale::name(&v17, &v16);
  std::string::size_type size = HIBYTE(v17.__r_.__value_.__r.__words[2]);
  if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v17.__r_.__value_.__l.__size_;
  }
  if (size == 1)
  {
    unsigned __int8 v13 = (std::string *)v17.__r_.__value_.__r.__words[0];
    if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unsigned __int8 v13 = &v17;
    }
    BOOL v14 = v13->__r_.__value_.__s.__data_[0] != 67;
    if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
      goto LABEL_9;
    }
  }
  else
  {
    BOOL v14 = 1;
    if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
LABEL_9:
    }
      operator delete(v17.__r_.__value_.__l.__data_);
  }
  std::locale::~locale(&v16);
  *(unsigned char *)(a1 + 171) = v14;
  return a1;
}

void sub_2636A5504(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
  std::locale::~locale(&a9);
  std::vector<std::string>::~vector[abi:ne180100]((void **)(v9 + 136));
  uint64_t v15 = *(void **)(v9 + 112);
  if (v15)
  {
    *(void *)(v9 + 120) = v15;
    operator delete(v15);
    std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100](v12);
    std::locale v16 = *(void **)(v9 + 64);
    if (!v16)
    {
LABEL_3:
      std::string v17 = *v13;
      if (!*v13) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }
  else
  {
    std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100](v12);
    std::locale v16 = *(void **)(v9 + 64);
    if (!v16) {
      goto LABEL_3;
    }
  }
  *(void *)(v9 + 72) = v16;
  operator delete(v16);
  std::string v17 = *v13;
  if (!*v13)
  {
LABEL_4:
    std::locale::~locale(v11);
    *(void *)uint64_t v9 = v10;
    uint64_t v18 = *(void *)(v9 + 8);
    if (!v18) {
      goto LABEL_5;
    }
    goto LABEL_9;
  }
LABEL_8:
  *(void *)(v9 + 48) = v17;
  operator delete(v17);
  std::locale::~locale(v11);
  *(void *)uint64_t v9 = v10;
  uint64_t v18 = *(void *)(v9 + 8);
  if (!v18) {
LABEL_5:
  }
    _Unwind_Resume(a1);
LABEL_9:
  (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
  _Unwind_Resume(a1);
}

void **std::vector<std::string>::~vector[abi:ne180100](void **a1)
{
  char v2 = (void **)*a1;
  if (*a1)
  {
    uint64_t v3 = (void **)a1[1];
    unint64_t v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        if (*((char *)v3 - 1) < 0) {
          operator delete(*(v3 - 3));
        }
        v3 -= 3;
      }
      while (v3 != v2);
      unint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void **std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100](void **a1)
{
  char v2 = (void **)*a1;
  if (*a1)
  {
    uint64_t v3 = (void **)a1[1];
    unint64_t v4 = *a1;
    if (v3 == v2)
    {
LABEL_11:
      a1[1] = v2;
      operator delete(v4);
      return a1;
    }
    while (1)
    {
      if (*((char *)v3 - 1) < 0)
      {
        operator delete(*(v3 - 3));
        if (*((char *)v3 - 25) < 0) {
LABEL_9:
        }
          operator delete(*(v3 - 6));
      }
      else if (*((char *)v3 - 25) < 0)
      {
        goto LABEL_9;
      }
      v3 -= 6;
      if (v3 == v2)
      {
        unint64_t v4 = *a1;
        goto LABEL_11;
      }
    }
  }
  return a1;
}

void std::__bracket_expression<char,std::regex_traits<char>>::~__bracket_expression(std::locale *a1)
{
  uint64_t v1 = std::__bracket_expression<char,std::regex_traits<char>>::~__bracket_expression(a1);

  operator delete(v1);
}

void std::__bracket_expression<char,std::regex_traits<char>>::__exec(const std::__bracket_expression<char, std::regex_traits<char>> *this, std::__bracket_expression<char, std::regex_traits<char>>::__state *a2)
{
  char v2 = a2;
  current = a2->__current_;
  last = a2->__last_;
  if (current == last)
  {
    uint64_t v25 = 0;
    BOOL negate = this->__negate_;
    goto LABEL_245;
  }
  if (!this->__might_have_digraph_ || current + 1 == last) {
    goto LABEL_34;
  }
  char v6 = *current;
  LOBYTE(__src) = *current;
  char v7 = current[1];
  HIBYTE(__src) = v7;
  if (this->__icase_)
  {
    LOBYTE(__src) = ((uint64_t (*)(const std::ctype<char> *, void))this->__traits_.__ct_->do_tolower)(this->__traits_.__ct_, v6);
    HIBYTE(__src) = ((uint64_t (*)(const std::ctype<char> *, void))this->__traits_.__ct_->do_tolower)(this->__traits_.__ct_, v7);
  }
  p_traits = &this->__traits_;
  std::regex_traits<char>::__lookup_collatename<char *>(&__src, (uint64_t)&this->__traits_, __p, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0)
  {
    size_t v27 = __p[1];
    operator delete(__p[0]);
    if (v27) {
      goto LABEL_8;
    }
LABEL_34:
    BOOL negate = 0;
    uint64_t v25 = 1;
    unsigned __int8 v28 = *v2->__current_;
    LOBYTE(__src) = v28;
    if (!this->__icase_) {
      goto LABEL_36;
    }
    goto LABEL_35;
  }
  if (!HIBYTE(__p[2])) {
    goto LABEL_34;
  }
LABEL_8:
  std::vector<std::pair<char, char>>::pointer begin = this->__digraphs_.__begin_;
  uint64_t v10 = (char *)this->__digraphs_.__end_ - (char *)begin;
  if (v10)
  {
    uint64_t v11 = v10 >> 1;
    if ((unint64_t)(v10 >> 1) <= 1) {
      uint64_t v11 = 1;
    }
    p_second = &begin->second;
    while (__src != *(p_second - 1) || HIBYTE(__src) != *p_second)
    {
      p_second += 2;
      if (!--v11) {
        goto LABEL_17;
      }
    }
    goto LABEL_227;
  }
LABEL_17:
  if (!this->__collate_ || this->__ranges_.__begin_ == this->__ranges_.__end_)
  {
    BOOL negate = 0;
    goto LABEL_167;
  }
  memset(v136, 170, sizeof(v136));
  __p[1] = (void *)0xAAAAAAAAAAAAAAAALL;
  __p[2] = (void *)0x2AAAAAAAAAAAAAALL;
  __p[0] = (void *)0xAAAAAAAAAA00AAAALL;
  LOWORD(__p[0]) = __src;
  (*(void (**)(void **__return_ptr))(*(void *)this->__traits_.__col_ + 32))(v136);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  std::vector<std::pair<std::string, std::string>>::pointer v14 = this->__ranges_.__begin_;
  char v15 = HIBYTE(v136[2]);
  int64_t v16 = (char *)this->__ranges_.__end_ - (char *)v14;
  if (!v16)
  {
    BOOL v24 = 0;
    int v70 = 0;
    int v69 = 0;
    goto LABEL_164;
  }
  uint64_t v128 = v2;
  uint64_t v17 = 0;
  unint64_t v18 = v16 / 48;
  if (SHIBYTE(v136[2]) >= 0) {
    unint64_t v19 = v136;
  }
  else {
    unint64_t v19 = (void **)v136[0];
  }
  char v20 = HIBYTE(v136[2]);
  if (SHIBYTE(v136[2]) >= 0) {
    size_t v21 = (void *)HIBYTE(v136[2]);
  }
  else {
    size_t v21 = v136[1];
  }
  if (v18 <= 1) {
    uint64_t v22 = 1;
  }
  else {
    uint64_t v22 = v16 / 48;
  }
  uint64_t v23 = (unsigned __int8 *)&v14->second.__r_.__value_.__r.__words[2] + 7;
  BOOL v24 = 1;
  do
  {
    int v59 = (char)*(v23 - 24);
    if (v59 >= 0) {
      size_t v60 = (char *)(v23 - 47);
    }
    else {
      size_t v60 = *(char **)(v23 - 47);
    }
    if (v59 >= 0) {
      size_t v61 = *(v23 - 24);
    }
    else {
      size_t v61 = *(void *)(v23 - 39);
    }
    if ((unint64_t)v21 >= v61) {
      size_t v62 = v61;
    }
    else {
      size_t v62 = (size_t)v21;
    }
    int v63 = memcmp(v60, v19, v62);
    if (v63)
    {
      if ((v63 & 0x80000000) == 0) {
        goto LABEL_98;
      }
    }
    else if (v61 > (unint64_t)v21)
    {
      goto LABEL_98;
    }
    int v64 = (char)*v23;
    if (v64 >= 0) {
      size_t v65 = (char *)(v23 - 23);
    }
    else {
      size_t v65 = *(char **)(v23 - 23);
    }
    if (v64 >= 0) {
      size_t v66 = *v23;
    }
    else {
      size_t v66 = *(void *)(v23 - 15);
    }
    if (v66 >= (unint64_t)v21) {
      size_t v67 = (size_t)v21;
    }
    else {
      size_t v67 = v66;
    }
    int v68 = memcmp(v19, v65, v67);
    if (v68)
    {
      if (v68 < 0)
      {
LABEL_123:
        int v69 = 1;
        int v70 = 5;
        goto LABEL_162;
      }
    }
    else if ((unint64_t)v21 <= v66)
    {
      goto LABEL_123;
    }
LABEL_98:
    BOOL v24 = ++v17 < v18;
    v23 += 48;
  }
  while (v22 != v17);
  int v70 = 0;
  int v69 = 0;
LABEL_162:
  char v2 = v128;
  p_traits = &this->__traits_;
  char v15 = v20;
LABEL_164:
  if (v15 < 0) {
    operator delete(v136[0]);
  }
  BOOL negate = v69;
  if (v24) {
    goto LABEL_207;
  }
LABEL_167:
  if (this->__equivalences_.__begin_ == this->__equivalences_.__end_) {
    goto LABEL_209;
  }
  int v133 = negate;
  unint64_t v88 = v2;
  memset(__p, 170, sizeof(__p));
  std::regex_traits<char>::__transform_primary<char *>(&__src, (uint64_t)p_traits, __p, __p);
  std::vector<std::string>::pointer v89 = this->__equivalences_.__begin_;
  int v90 = SHIBYTE(__p[2]);
  int64_t v91 = (char *)this->__equivalences_.__end_ - (char *)v89;
  if (!v91) {
    goto LABEL_188;
  }
  unint64_t v92 = v91 / 24;
  uint64_t v93 = __p[1];
  if (SHIBYTE(__p[2]) >= 0) {
    uint64_t v94 = (void *)HIBYTE(__p[2]);
  }
  else {
    uint64_t v94 = __p[1];
  }
  if (SHIBYTE(__p[2]) < 0)
  {
    int v135 = SHIBYTE(__p[2]);
    uint64_t v103 = 0;
    v104 = __p[0];
    if (v92 <= 1) {
      uint64_t v105 = 1;
    }
    else {
      uint64_t v105 = v91 / 24;
    }
    BOOL v97 = 1;
    do
    {
      std::string::size_type size = HIBYTE(v89->__r_.__value_.__r.__words[2]);
      int v107 = (char)size;
      if ((size & 0x80u) != 0) {
        std::string::size_type size = v89->__r_.__value_.__l.__size_;
      }
      if (v94 == (void *)size)
      {
        std::vector<std::string>::pointer v108 = v107 >= 0 ? v89 : (std::vector<std::string>::pointer)v89->__r_.__value_.__r.__words[0];
        if (!memcmp(v104, v108, (size_t)v93))
        {
          int v133 = 1;
          int v70 = 5;
          goto LABEL_203;
        }
      }
      BOOL v97 = ++v103 < v92;
      ++v89;
    }
    while (v105 != v103);
    int v70 = 0;
LABEL_203:
    char v2 = v88;
    int v90 = v135;
    goto LABEL_204;
  }
  if (!HIBYTE(__p[2]))
  {
    std::string::size_type v114 = HIBYTE(v89->__r_.__value_.__r.__words[2]);
    if ((v114 & 0x80u) != 0) {
      std::string::size_type v114 = v89->__r_.__value_.__l.__size_;
    }
    if (v114 != HIBYTE(__p[2]))
    {
      unint64_t v119 = 0;
      if (v92 <= 1) {
        uint64_t v120 = 1;
      }
      else {
        uint64_t v120 = v92;
      }
      uint64_t v121 = v120 - 1;
      int v122 = &v89[1].__r_.__value_.__s.__data_[8];
      char v2 = v88;
      while (v121 != v119)
      {
        ++v119;
        unint64_t v123 = v122[15];
        unint64_t v125 = *(void *)v122;
        v122 += 24;
        unint64_t v124 = v125;
        if ((v123 & 0x80u) != 0) {
          unint64_t v123 = v124;
        }
        if (v94 == (void *)v123)
        {
          BOOL v97 = v119 < v92;
          int v133 = 1;
          int v70 = 5;
          goto LABEL_204;
        }
      }
      BOOL v97 = 0;
      int v70 = 0;
      goto LABEL_204;
    }
    char v2 = v88;
    BOOL negate = 1;
LABEL_208:
    uint64_t v25 = 2;
    goto LABEL_245;
  }
  uint64_t v95 = 0;
  uint64_t v96 = v92 <= 1 ? 1 : v91 / 24;
  BOOL v97 = 1;
  do
  {
    v98 = &v89[v95];
    v99 = (void *)HIBYTE(v98->__r_.__value_.__r.__words[2]);
    int v100 = (char)v99;
    if ((char)v99 < 0) {
      v99 = (void *)v98->__r_.__value_.__l.__size_;
    }
    if (v94 == v99)
    {
      if (v100 < 0) {
        v98 = (std::string *)v98->__r_.__value_.__r.__words[0];
      }
      xpc_object_t v101 = __p;
      uint64_t v102 = HIBYTE(__p[2]);
      while (*(unsigned __int8 *)v101 == v98->__r_.__value_.__s.__data_[0])
      {
        xpc_object_t v101 = (void **)((char *)v101 + 1);
        v98 = (std::string *)((char *)v98 + 1);
        if (!--v102)
        {
          int v133 = 1;
          int v70 = 5;
          char v2 = v88;
          goto LABEL_204;
        }
      }
    }
    BOOL v97 = ++v95 < v92;
  }
  while (v95 != v96);
LABEL_188:
  BOOL v97 = 0;
  int v70 = 0;
  char v2 = v88;
LABEL_204:
  if (v90 < 0) {
    operator delete(__p[0]);
  }
  BOOL negate = v133;
  if (!v97)
  {
LABEL_209:
    if ((char)__src < 0)
    {
      neg_std::regex_traits<char>::char_class_type mask = this->__neg_mask_;
    }
    else
    {
      std::regex_traits<char>::char_class_type mask = this->__mask_;
      tab = this->__traits_.__ct_->__tab_;
      std::ctype_base::mask v111 = tab[__src];
      if (((v111 & mask) != 0 || __src == 95 && (mask & 0x80) != 0)
        && (SHIBYTE(__src) & 0x80000000) == 0
        && ((tab[HIBYTE(__src)] & mask) != 0 || (mask & 0x80) != 0 && HIBYTE(__src) == 95))
      {
        goto LABEL_227;
      }
      neg_std::regex_traits<char>::char_class_type mask = this->__neg_mask_;
      if ((neg_mask & v111) != 0 || __src == 95 && (neg_mask & 0x80) != 0)
      {
LABEL_226:
        int v113 = negate;
LABEL_228:
        BOOL negate = v113;
        uint64_t v25 = 2;
        goto LABEL_245;
      }
    }
    if ((SHIBYTE(__src) & 0x80000000) == 0)
    {
      if ((this->__traits_.__ct_->__tab_[HIBYTE(__src)] & neg_mask) == 0)
      {
        int v113 = 1;
        if (HIBYTE(__src) != 95 || (neg_mask & 0x80) == 0) {
          goto LABEL_228;
        }
      }
      goto LABEL_226;
    }
LABEL_227:
    int v113 = 1;
    goto LABEL_228;
  }
LABEL_207:
  if (v70) {
    goto LABEL_208;
  }
  uint64_t v25 = 2;
  unsigned __int8 v28 = *v2->__current_;
  LOBYTE(__src) = v28;
  if (this->__icase_)
  {
LABEL_35:
    unsigned __int8 v28 = ((uint64_t (*)(const std::ctype<char> *, void))this->__traits_.__ct_->do_tolower)(this->__traits_.__ct_, (char)v28);
    LOBYTE(__src) = v28;
  }
LABEL_36:
  std::vector<char>::pointer v29 = this->__chars_.__begin_;
  unint64_t v30 = this->__chars_.__end_ - v29;
  if (v30)
  {
    if (v30 <= 1) {
      unint64_t v30 = 1;
    }
    while (1)
    {
      int v31 = *v29++;
      if (v31 == v28) {
        break;
      }
      if (!--v30) {
        goto LABEL_41;
      }
    }
LABEL_244:
    BOOL negate = 1;
    goto LABEL_245;
  }
LABEL_41:
  std::regex_traits<char>::char_class_type v32 = this->__neg_mask_;
  if (v32 || this->__neg_chars_.__begin_ != this->__neg_chars_.__end_)
  {
    if ((v28 & 0x80) != 0 || (this->__traits_.__ct_->__tab_[v28] & v32) == 0)
    {
      int v34 = (v32 >> 7) & 1;
      char v33 = v28 == 95 ? v34 : 0;
    }
    else
    {
      char v33 = 1;
    }
    std::vector<char>::pointer end = this->__neg_chars_.__end_;
    std::vector<char>::pointer v36 = (std::vector<char>::pointer)memchr(this->__neg_chars_.__begin_, (char)v28, end - this->__neg_chars_.__begin_);
    uint64_t v37 = v36 ? v36 : end;
    if ((v33 & 1) == 0 && v37 == end) {
      goto LABEL_244;
    }
  }
  std::vector<std::pair<std::string, std::string>>::pointer v38 = this->__ranges_.__begin_;
  std::vector<std::pair<std::string, std::string>>::pointer v39 = this->__ranges_.__end_;
  if (v38 == v39) {
    goto LABEL_128;
  }
  memset(v136, 170, sizeof(v136));
  if (!this->__collate_)
  {
    unsigned int v40 = 1;
    HIBYTE(v136[2]) = 1;
    LOWORD(v136[0]) = v28;
    int64_t v41 = (char *)v39 - (char *)v38;
    if (v41) {
      goto LABEL_59;
    }
LABEL_155:
    BOOL v48 = 0;
    if ((v40 & 0x80) != 0) {
      goto LABEL_126;
    }
    goto LABEL_127;
  }
  __p[1] = (void *)0xAAAAAAAAAAAAAAAALL;
  __p[2] = (void *)0x1AAAAAAAAAAAAAALL;
  __p[0] = (void *)0xAAAAAAAAAAAAAAAALL;
  LOWORD(__p[0]) = v28;
  (*(void (**)(void **__return_ptr))(*(void *)this->__traits_.__col_ + 32))(v136);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  std::vector<std::pair<std::string, std::string>>::pointer v38 = this->__ranges_.__begin_;
  unsigned int v40 = HIBYTE(v136[2]);
  int64_t v41 = (char *)this->__ranges_.__end_ - (char *)v38;
  if (!v41) {
    goto LABEL_155;
  }
LABEL_59:
  uint64_t v134 = v25;
  BOOL v131 = negate;
  uint64_t v129 = v2;
  uint64_t v42 = 0;
  unint64_t v43 = v41 / 48;
  char v126 = v40;
  if ((v40 & 0x80u) == 0) {
    unint64_t v44 = v136;
  }
  else {
    unint64_t v44 = (void **)v136[0];
  }
  if ((v40 & 0x80u) == 0) {
    uint64_t v45 = (void *)v40;
  }
  else {
    uint64_t v45 = v136[1];
  }
  if (v43 <= 1) {
    uint64_t v46 = 1;
  }
  else {
    uint64_t v46 = v41 / 48;
  }
  long long v47 = (unsigned __int8 *)&v38->second.__r_.__value_.__r.__words[2] + 7;
  BOOL v48 = 1;
  while (2)
  {
    int v49 = (char)*(v47 - 24);
    if (v49 >= 0) {
      unint64_t v50 = (char *)(v47 - 47);
    }
    else {
      unint64_t v50 = *(char **)(v47 - 47);
    }
    if (v49 >= 0) {
      size_t v51 = *(v47 - 24);
    }
    else {
      size_t v51 = *(void *)(v47 - 39);
    }
    if ((unint64_t)v45 >= v51) {
      size_t v52 = v51;
    }
    else {
      size_t v52 = (size_t)v45;
    }
    int v53 = memcmp(v50, v44, v52);
    if (v53)
    {
      if (v53 < 0) {
        goto LABEL_84;
      }
    }
    else if (v51 <= (unint64_t)v45)
    {
LABEL_84:
      int v54 = (char)*v47;
      if (v54 >= 0) {
        char v55 = (char *)(v47 - 23);
      }
      else {
        char v55 = *(char **)(v47 - 23);
      }
      if (v54 >= 0) {
        size_t v56 = *v47;
      }
      else {
        size_t v56 = *(void *)(v47 - 15);
      }
      if (v56 >= (unint64_t)v45) {
        size_t v57 = (size_t)v45;
      }
      else {
        size_t v57 = v56;
      }
      int v58 = memcmp(v44, v55, v57);
      if (v58)
      {
        if (v58 < 0)
        {
LABEL_95:
          BOOL negate = 1;
          char v2 = v129;
          uint64_t v25 = v134;
          if ((v126 & 0x80) == 0) {
            goto LABEL_127;
          }
          goto LABEL_126;
        }
      }
      else if ((unint64_t)v45 <= v56)
      {
        goto LABEL_95;
      }
    }
    BOOL v48 = ++v42 < v43;
    v47 += 48;
    if (v46 != v42) {
      continue;
    }
    break;
  }
  char v2 = v129;
  BOOL negate = v131;
  uint64_t v25 = v134;
  if ((v126 & 0x80) == 0) {
    goto LABEL_127;
  }
LABEL_126:
  operator delete(v136[0]);
LABEL_127:
  if (v48) {
    goto LABEL_245;
  }
LABEL_128:
  if (this->__equivalences_.__begin_ == this->__equivalences_.__end_)
  {
LABEL_239:
    if ((v28 & 0x80) != 0) {
      goto LABEL_245;
    }
    std::regex_traits<char>::char_class_type v115 = this->__mask_;
    if ((this->__traits_.__ct_->__tab_[v28] & v115) == 0)
    {
      int v116 = (v115 >> 7) & 1;
      if (v28 != 95) {
        int v116 = 0;
      }
      if (v116 != 1) {
        goto LABEL_245;
      }
    }
    goto LABEL_244;
  }
  memset(__p, 170, sizeof(__p));
  std::regex_traits<char>::__transform_primary<char *>(&__src, (uint64_t)&this->__traits_, (unsigned char *)&__src + 1, __p);
  std::vector<std::string>::pointer v71 = this->__equivalences_.__begin_;
  uint64_t v72 = HIBYTE(__p[2]);
  int64_t v73 = (char *)this->__equivalences_.__end_ - (char *)v71;
  if (!v73)
  {
    if ((HIBYTE(__p[2]) & 0x80) != 0) {
      operator delete(__p[0]);
    }
LABEL_238:
    unsigned __int8 v28 = __src;
    goto LABEL_239;
  }
  BOOL v132 = negate;
  v130 = v2;
  unint64_t v74 = 0;
  unint64_t v75 = v73 / 24;
  xpc_object_t v76 = __p[0];
  xpc_object_t v77 = __p[1];
  if (SHIBYTE(__p[2]) >= 0) {
    v78 = (void *)HIBYTE(__p[2]);
  }
  else {
    v78 = __p[1];
  }
  if (v75 <= 1) {
    uint64_t v79 = 1;
  }
  else {
    uint64_t v79 = v73 / 24;
  }
  BOOL v80 = 1;
  while (2)
  {
    int v81 = &v71[v74];
    uint64_t v82 = (void *)HIBYTE(v81->__r_.__value_.__r.__words[2]);
    int v83 = (char)v82;
    if ((char)v82 < 0) {
      uint64_t v82 = (void *)v81->__r_.__value_.__l.__size_;
    }
    if (v78 != v82)
    {
LABEL_149:
      if (++v74 == v79)
      {
        if ((v72 & 0x80) != 0) {
LABEL_236:
        }
          operator delete(__p[0]);
        char v2 = v130;
        BOOL negate = v132;
        goto LABEL_238;
      }
      goto LABEL_153;
    }
    if (v83 >= 0) {
      size_t v84 = &v71[v74];
    }
    else {
      size_t v84 = (std::string *)v81->__r_.__value_.__r.__words[0];
    }
    if ((v72 & 0x80) == 0)
    {
      if (!v72)
      {
LABEL_157:
        char v2 = v130;
        BOOL negate = 1;
        if (!v80) {
          goto LABEL_238;
        }
        goto LABEL_245;
      }
      uint64_t v85 = 0;
      while (*((unsigned __int8 *)__p + v85) == v84->__r_.__value_.__s.__data_[v85])
      {
        if (v72 == ++v85) {
          goto LABEL_157;
        }
      }
      goto LABEL_149;
    }
    BOOL v127 = v80;
    int v86 = v76;
    BOOL v87 = v77;
    if (memcmp(v76, v84, (size_t)v77))
    {
      ++v74;
      xpc_object_t v77 = v87;
      xpc_object_t v76 = v86;
      if (v74 == v79) {
        goto LABEL_236;
      }
LABEL_153:
      BOOL v80 = v74 < v75;
      continue;
    }
    break;
  }
  operator delete(__p[0]);
  char v2 = v130;
  BOOL negate = 1;
  if (!v127) {
    goto LABEL_238;
  }
LABEL_245:
  if (negate == this->__negate_)
  {
    first = 0;
    int v118 = -993;
  }
  else
  {
    v2->__current_ += v25;
    first = this->__first_;
    int v118 = -995;
  }
  v2->__do_ = v118;
  v2->__node_ = first;
}

void sub_2636A6238(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::pair<std::string,std::string>::~pair(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0)
  {
    operator delete(*(void **)(a1 + 24));
    if ((*(char *)(a1 + 23) & 0x80000000) == 0) {
      return a1;
    }
  }
  else if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    return a1;
  }
  operator delete(*(void **)a1);
  return a1;
}

std::locale *std::__bracket_expression<char,std::regex_traits<char>>::~__bracket_expression(std::locale *a1)
{
  locale = a1[17].__locale_;
  if (locale)
  {
    uint64_t v3 = a1[18].__locale_;
    unint64_t v4 = a1[17].__locale_;
    if (v3 != locale)
    {
      do
      {
        if (*((char *)v3 - 1) < 0) {
          operator delete(*((void **)v3 - 3));
        }
        uint64_t v3 = (std::locale::__imp *)((char *)v3 - 24);
      }
      while (v3 != locale);
      unint64_t v4 = a1[17].__locale_;
    }
    a1[18].__locale_ = locale;
    operator delete(v4);
  }
  unsigned int v5 = a1[14].__locale_;
  if (v5)
  {
    a1[15].__locale_ = v5;
    operator delete(v5);
  }
  char v6 = a1[11].__locale_;
  if (v6)
  {
    char v7 = a1[12].__locale_;
    unint64_t v8 = a1[11].__locale_;
    if (v7 == v6)
    {
LABEL_21:
      a1[12].__locale_ = v6;
      operator delete(v8);
      goto LABEL_22;
    }
    while (1)
    {
      if (*((char *)v7 - 1) < 0)
      {
        operator delete(*((void **)v7 - 3));
        if (*((char *)v7 - 25) < 0) {
LABEL_19:
        }
          operator delete(*((void **)v7 - 6));
      }
      else if (*((char *)v7 - 25) < 0)
      {
        goto LABEL_19;
      }
      char v7 = (std::locale::__imp *)((char *)v7 - 48);
      if (v7 == v6)
      {
        unint64_t v8 = a1[11].__locale_;
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  uint64_t v9 = a1[8].__locale_;
  if (v9)
  {
    a1[9].__locale_ = v9;
    operator delete(v9);
  }
  uint64_t v10 = a1[5].__locale_;
  if (v10)
  {
    a1[6].__locale_ = v10;
    operator delete(v10);
  }
  std::locale::~locale(a1 + 2);
  uint64_t v11 = a1[1].__locale_;
  if (v11) {
    (*(void (**)(std::locale::__imp *))(*(void *)v11 + 8))(v11);
  }
  return a1;
}

void std::regex_traits<char>::__lookup_collatename<char *>(unsigned char *__src@<X1>, uint64_t a2@<X0>, unsigned char *a3@<X2>, uint64_t a4@<X8>)
{
  size_t v5 = a3 - __src;
  memset(__dst, 170, sizeof(__dst));
  if ((unint64_t)(a3 - __src) >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v5 <= 0x16)
  {
    __dst[23] = (_BYTE)a3 - (_BYTE)__src;
    uint64_t v9 = __dst;
    if (__src == a3) {
      goto LABEL_9;
    }
LABEL_8:
    memcpy(v9, __src, v5);
    v9 += v5;
    goto LABEL_9;
  }
  uint64_t v10 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v5 | 7) != 0x17) {
    uint64_t v10 = v5 | 7;
  }
  uint64_t v11 = v10 + 1;
  uint64_t v9 = operator new(v10 + 1);
  *(void *)&__dst[8] = v5;
  *(void *)&__dst[16] = v11 | 0x8000000000000000;
  *(void *)std::string __dst = v9;
  if (__src != a3) {
    goto LABEL_8;
  }
LABEL_9:
  *uint64_t v9 = 0;
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  if ((__dst[23] & 0x80000000) != 0)
  {
    int v12 = *(char **)__dst;
    if (!*(void *)&__dst[8]) {
      goto LABEL_18;
    }
  }
  else
  {
    if (!__dst[23]) {
      return;
    }
    int v12 = __dst;
  }
  std::__get_collation_name(&v19, v12);
  *(_OWORD *)a4 = *(_OWORD *)&v19.__r_.__value_.__l.__data_;
  unint64_t v13 = v19.__r_.__value_.__r.__words[2];
  *(void *)(a4 + 16) = *((void *)&v19.__r_.__value_.__l + 2);
  unint64_t v14 = HIBYTE(v13);
  if ((v14 & 0x80u) != 0) {
    unint64_t v14 = *(void *)(a4 + 8);
  }
  if (v14) {
    goto LABEL_16;
  }
  if ((__dst[23] & 0x80000000) != 0)
  {
    int v12 = *(char **)__dst;
    if (*(void *)&__dst[8] < 3uLL)
    {
LABEL_24:
      (*(void (**)(std::string *__return_ptr))(**(void **)(a2 + 16) + 32))(&v19);
      if (*(char *)(a4 + 23) < 0) {
        operator delete(*(void **)a4);
      }
      *(std::string *)a4 = v19;
      if (*(char *)(a4 + 23) < 0)
      {
        uint64_t v16 = *(void *)(a4 + 8);
        if (v16 == 1 || v16 == 12)
        {
          if (__dst != (unsigned char *)a4)
          {
            if (__dst[23] >= 0) {
              uint64_t v17 = __dst;
            }
            else {
              uint64_t v17 = *(unsigned char **)__dst;
            }
            if (__dst[23] >= 0) {
              size_t v18 = __dst[23];
            }
            else {
              size_t v18 = *(void *)&__dst[8];
            }
            std::string::__assign_no_alias<false>((void **)a4, v17, v18);
          }
        }
        else
        {
          **(unsigned char **)a4 = 0;
          *(void *)(a4 + 8) = 0;
        }
      }
      else
      {
        int v15 = *(unsigned __int8 *)(a4 + 23);
        if (v15 == 1 || v15 == 12)
        {
          if (__dst != (unsigned char *)a4)
          {
            if ((__dst[23] & 0x80000000) != 0)
            {
              std::string::__assign_no_alias<true>((void *)a4, *(void **)__dst, *(size_t *)&__dst[8]);
            }
            else
            {
              *(_OWORD *)a4 = *(_OWORD *)__dst;
              *(void *)(a4 + 16) = *(void *)&__dst[16];
            }
          }
        }
        else
        {
          *(unsigned char *)a4 = 0;
          *(unsigned char *)(a4 + 23) = 0;
        }
      }
LABEL_16:
      if ((__dst[23] & 0x80000000) == 0) {
        return;
      }
      int v12 = *(char **)__dst;
    }
LABEL_18:
    operator delete(v12);
    return;
  }
  if (__dst[23] < 3u) {
    goto LABEL_24;
  }
}

void sub_2636A669C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (*(char *)(v17 + 23) < 0)
  {
    operator delete(*(void **)v17);
    if ((a17 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a17 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::regex_traits<char>::__transform_primary<char *>(unsigned char *__src@<X1>, uint64_t a2@<X0>, unsigned char *a3@<X2>, void *a4@<X8>)
{
  size_t v5 = a3 - __src;
  memset(__dst, 170, sizeof(__dst));
  if ((unint64_t)(a3 - __src) >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v5 <= 0x16)
  {
    HIBYTE(__dst[2]) = (_BYTE)a3 - (_BYTE)__src;
    uint64_t v9 = __dst;
    if (__src == a3) {
      goto LABEL_9;
    }
LABEL_8:
    memcpy(v9, __src, v5);
    uint64_t v9 = (void **)((char *)v9 + v5);
    goto LABEL_9;
  }
  uint64_t v10 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v5 | 7) != 0x17) {
    uint64_t v10 = v5 | 7;
  }
  uint64_t v11 = v10 + 1;
  uint64_t v9 = (void **)operator new(v10 + 1);
  __dst[1] = (void *)v5;
  __dst[2] = (void *)(v11 | 0x8000000000000000);
  __dst[0] = v9;
  if (__src != a3) {
    goto LABEL_8;
  }
LABEL_9:
  *(unsigned char *)uint64_t v9 = 0;
  memset(a4, 170, 24);
  int v12 = (char *)HIBYTE(__dst[2]);
  if (SHIBYTE(__dst[2]) >= 0) {
    unint64_t v13 = __dst;
  }
  else {
    unint64_t v13 = (void **)__dst[0];
  }
  if (SHIBYTE(__dst[2]) < 0) {
    int v12 = (char *)__dst[1];
  }
  (*(void (**)(void, void **, char *))(**(void **)(a2 + 16) + 32))(*(void *)(a2 + 16), v13, &v12[(void)v13]);
  uint64_t v14 = *((unsigned __int8 *)a4 + 23);
  int v15 = (char)v14;
  if ((v14 & 0x80u) != 0) {
    uint64_t v14 = a4[1];
  }
  if (v14 == 1)
  {
LABEL_25:
    if ((SHIBYTE(__dst[2]) & 0x80000000) == 0) {
      return;
    }
    goto LABEL_26;
  }
  if (v14 == 12)
  {
    if (v15 >= 0) {
      uint64_t v16 = a4;
    }
    else {
      uint64_t v16 = (unsigned char *)*a4;
    }
    v16[11] = v16[3];
    if (SHIBYTE(__dst[2]) < 0) {
      goto LABEL_26;
    }
    return;
  }
  if ((v15 & 0x80000000) == 0)
  {
    *(unsigned char *)a4 = 0;
    *((unsigned char *)a4 + 23) = 0;
    goto LABEL_25;
  }
  *(unsigned char *)*a4 = 0;
  a4[1] = 0;
  if (SHIBYTE(__dst[2]) < 0) {
LABEL_26:
  }
    operator delete(__dst[0]);
}

void sub_2636A688C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x263E69360](exception, 5);
  __cxa_throw(exception, MEMORY[0x263F8C190], MEMORY[0x263F8C098]);
}

void sub_2636A68EC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_expression_term<std::__wrap_iter<char const*>>(uint64_t a1, char *a2, char *a3, uint64_t a4)
{
  unint64_t v4 = a2;
  int64_t v5 = a2 - a3;
  if (a2 == a3) {
    return a2;
  }
  int v6 = *a2;
  char v7 = a2;
  if (v6 == 93) {
    return v7;
  }
  unint64_t v8 = (char *)a4;
  int v11 = 0;
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v42 = 0;
  if (a2 + 1 == a3 || v6 != 91)
  {
LABEL_36:
    int v27 = *(_DWORD *)(a1 + 24) & 0x1F0;
    goto LABEL_39;
  }
  int v12 = a2[1];
  if (v12 != 46)
  {
    if (v12 == 58)
    {
      uint64_t v14 = (uint64_t)(a2 + 2);
      if (a3 - (v4 + 2) < 2) {
        goto LABEL_91;
      }
      uint64_t v15 = 0;
      int64_t v16 = v5 + 4;
      uint64_t v17 = (unsigned __int8 *)v4;
      uint64_t v18 = v16;
      if (v4[2] == 58) {
        goto LABEL_15;
      }
      do
      {
        do
        {
          if (!v18) {
            goto LABEL_91;
          }
          uint64_t v17 = (unsigned __int8 *)&v4[++v15];
          uint64_t v18 = v16 + v15;
        }
        while (v4[v15 + 2] != 58);
LABEL_15:
        ;
      }
      while (v17[3] != 93);
      std::string v19 = &v4[v15 + 2];
      if (v19 == a3) {
LABEL_91:
      }
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
      int v20 = std::regex_traits<char>::__lookup_classname<std::__wrap_iter<char const*>>(a1, v14, v19, *(_DWORD *)(a1 + 24) & 1);
      if (!v20) {
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)2>();
      }
      char v13 = 0;
      *((_DWORD *)v8 + 40) |= v20;
      unint64_t v8 = &v4[v15 + 4];
      char v7 = v4;
      if (SHIBYTE(v42) < 0) {
        goto LABEL_70;
      }
      goto LABEL_71;
    }
    if (v12 == 61)
    {
      unint64_t v8 = std::basic_regex<char,std::regex_traits<char>>::__parse_equivalence_class<std::__wrap_iter<char const*>>(a1, a2 + 2, a3, a4);
      char v13 = 0;
      char v7 = v4;
      if ((SHIBYTE(v42) & 0x80000000) == 0) {
        goto LABEL_71;
      }
      goto LABEL_70;
    }
    int v11 = 0;
    goto LABEL_36;
  }
  size_t v21 = a2 + 2;
  if (a3 - (v4 + 2) < 2) {
    goto LABEL_92;
  }
  uint64_t v22 = (unsigned __int8 *)(v4 + 2);
  uint64_t v23 = (unsigned __int8 *)(v4 + 3);
  if (*v21 == 46) {
    goto LABEL_24;
  }
  do
  {
    do
    {
      if (a3 - 4 == v4) {
        goto LABEL_92;
      }
      ++v4;
      uint64_t v22 = v23;
      int v24 = *v23++;
    }
    while (v24 != 46);
LABEL_24:
    ;
  }
  while (*v23 != 93);
  if (v22 == (unsigned __int8 *)a3) {
LABEL_92:
  }
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
  std::regex_traits<char>::__lookup_collatename<std::__wrap_iter<char const*>>(a1, (uint64_t)v21, v4 + 2, (uint64_t)&v43);
  if (SHIBYTE(v42) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v42 = v44;
  *(_OWORD *)std::vector<std::csub_match> __p = v43;
  uint64_t v25 = (char *)HIBYTE(v44);
  int v11 = SHIBYTE(v44);
  uint64_t v26 = *((void *)&v43 + 1);
  if (v44 < 0) {
    uint64_t v25 = (char *)__p[1];
  }
  if ((unint64_t)(v25 - 1) >= 2) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
  }
  unint64_t v4 = (char *)(v22 + 2);
  int v27 = *(_DWORD *)(a1 + 24) & 0x1F0;
  if (v44 >= 0) {
    uint64_t v26 = HIBYTE(v44);
  }
  if (v26)
  {
    if (v4 == a3) {
      goto LABEL_52;
    }
    goto LABEL_51;
  }
LABEL_39:
  if ((v27 | 0x40) != 0x40)
  {
    LOBYTE(v28) = *v4;
LABEL_44:
    if (v11 < 0)
    {
      int v31 = __p[0];
      __p[1] = (void *)1;
      *(unsigned char *)__p[0] = v28;
      v31[1] = 0;
      if (++v4 == a3) {
        goto LABEL_52;
      }
    }
    else
    {
      HIBYTE(v42) = 1;
      LOWORD(__p[0]) = v28;
      if (++v4 == a3) {
        goto LABEL_52;
      }
    }
    goto LABEL_51;
  }
  int v28 = *v4;
  if (v28 != 92) {
    goto LABEL_44;
  }
  std::vector<char>::pointer v29 = v4 + 1;
  if (v27) {
    unint64_t v30 = std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, v29, a3, (uint64_t *)__p);
  }
  else {
    unint64_t v30 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, (unsigned __int8 *)v29, (unsigned __int8 *)a3, (uint64_t)__p, (uint64_t)v8);
  }
  unint64_t v4 = v30;
  if (v30 == a3)
  {
LABEL_52:
    if (SHIBYTE(v42) < 0)
    {
      if (!__p[1]) {
        goto LABEL_69;
      }
      if (__p[1] != (void *)1)
      {
        char v33 = (void **)__p[0];
LABEL_68:
        std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:ne180100]((uint64_t)v8, *(char *)v33, *((char *)v33 + 1));
LABEL_69:
        char v13 = 1;
        char v7 = v4;
        if ((SHIBYTE(v42) & 0x80000000) == 0) {
          goto LABEL_71;
        }
        goto LABEL_70;
      }
      char v33 = (void **)__p[0];
    }
    else
    {
      if (!HIBYTE(v42)) {
        goto LABEL_69;
      }
      char v33 = __p;
      if (HIBYTE(v42) != 1) {
        goto LABEL_68;
      }
    }
    std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)v8, *(char *)v33);
    goto LABEL_69;
  }
LABEL_51:
  int v32 = *v4;
  if (v32 == 93) {
    goto LABEL_52;
  }
  int v34 = v4 + 1;
  if (v4 + 1 == a3 || v32 != 45 || *v34 == 93) {
    goto LABEL_52;
  }
  long long v43 = 0uLL;
  int64_t v44 = 0;
  char v7 = v4 + 2;
  if (v4 + 2 == a3 || *v34 != 91 || *v7 != 46)
  {
    if ((v27 | 0x40) == 0x40)
    {
      LODWORD(v34) = *v34;
      if (v34 == 92)
      {
        if (v27) {
          uint64_t v35 = std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, v4 + 2, a3, (uint64_t *)&v43);
        }
        else {
          uint64_t v35 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, (unsigned __int8 *)v4 + 2, (unsigned __int8 *)a3, (uint64_t)&v43, (uint64_t)v8);
        }
        goto LABEL_81;
      }
    }
    else
    {
      LOBYTE(v34) = *v34;
    }
    HIBYTE(v44) = 1;
    LOWORD(v43) = v34;
    goto LABEL_82;
  }
  uint64_t v35 = std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<std::__wrap_iter<char const*>>(a1, v4 + 3, a3, (uint64_t)&v43);
LABEL_81:
  char v7 = v35;
LABEL_82:
  *(_OWORD *)std::vector<std::pair<std::string, std::string>>::pointer v39 = *(_OWORD *)__p;
  uint64_t v40 = v42;
  __p[1] = 0;
  uint64_t v42 = 0;
  __p[0] = 0;
  *(_OWORD *)uint64_t v37 = v43;
  uint64_t v38 = v44;
  long long v43 = 0uLL;
  int64_t v44 = 0;
  std::__bracket_expression<char,std::regex_traits<char>>::__add_range[abi:ne180100]((uint64_t)v8, (char *)v39, (uint64_t)v37);
  if (SHIBYTE(v38) < 0)
  {
    operator delete(v37[0]);
    if ((SHIBYTE(v40) & 0x80000000) == 0)
    {
LABEL_84:
      if ((SHIBYTE(v44) & 0x80000000) == 0) {
        goto LABEL_85;
      }
LABEL_89:
      operator delete((void *)v43);
      char v13 = 1;
      if (SHIBYTE(v42) < 0) {
        goto LABEL_70;
      }
      goto LABEL_71;
    }
  }
  else if ((SHIBYTE(v40) & 0x80000000) == 0)
  {
    goto LABEL_84;
  }
  operator delete(v39[0]);
  if (SHIBYTE(v44) < 0) {
    goto LABEL_89;
  }
LABEL_85:
  char v13 = 1;
  if (SHIBYTE(v42) < 0) {
LABEL_70:
  }
    operator delete(__p[0]);
LABEL_71:
  if (v13) {
    return v7;
  }
  return v8;
}

void sub_2636A6E24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (*(char *)(v28 - 49) < 0)
  {
    operator delete(*(void **)(v28 - 72));
    if (a28 < 0)
    {
LABEL_5:
      operator delete(__p);
      _Unwind_Resume(a1);
    }
  }
  else if (a28 < 0)
  {
    goto LABEL_5;
  }
  _Unwind_Resume(a1);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_equivalence_class<std::__wrap_iter<char const*>>(uint64_t a1, char *a2, char *a3, uint64_t a4)
{
  if (a3 - a2 < 2 || a3 - 1 == a2) {
    goto LABEL_39;
  }
  int v6 = a3 - 2;
  char v7 = a2;
  unint64_t v8 = a2;
  uint64_t v9 = a2 + 1;
  if (*a2 != 61) {
    goto LABEL_5;
  }
LABEL_4:
  if (*v9 != 93)
  {
LABEL_5:
    while (a2 != v6)
    {
      ++v7;
      --v6;
      unint64_t v8 = v9;
      int v10 = *v9++;
      if (v10 == 61) {
        goto LABEL_4;
      }
    }
LABEL_39:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
  }
  if (v8 == a3) {
    goto LABEL_39;
  }
  memset(v20, 170, sizeof(v20));
  std::regex_traits<char>::__lookup_collatename<std::__wrap_iter<char const*>>(a1, (uint64_t)a2, v7, (uint64_t)v20);
  if ((SHIBYTE(v20[2]) & 0x80000000) == 0)
  {
    int v11 = (char *)HIBYTE(v20[2]);
    if (HIBYTE(v20[2]))
    {
      memset(__p, 170, sizeof(__p));
      int v12 = v20;
      goto LABEL_14;
    }
LABEL_40:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
  }
  int v11 = (char *)v20[1];
  if (!v20[1]) {
    goto LABEL_40;
  }
  memset(__p, 170, sizeof(__p));
  int v12 = (void **)v20[0];
LABEL_14:
  std::regex_traits<char>::__transform_primary<std::__wrap_iter<char *>>(a1, (uint64_t)v12, &v11[(void)v12], (unsigned char **)__p);
  if (SHIBYTE(__p[2]) < 0)
  {
    if (__p[1])
    {
LABEL_16:
      unint64_t v13 = *(void *)(a4 + 144);
      if (v13 >= *(void *)(a4 + 152))
      {
        *(void *)(a4 + 144) = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)(a4 + 136), (uint64_t)__p);
        if (SHIBYTE(__p[2]) < 0) {
          goto LABEL_37;
        }
      }
      else
      {
        if ((HIBYTE(__p[2]) & 0x80) != 0)
        {
          std::string::__init_copy_ctor_external(*(std::string **)(a4 + 144), (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
        }
        else
        {
          long long v14 = *(_OWORD *)__p;
          *(void **)(v13 + 16) = __p[2];
          *(_OWORD *)unint64_t v13 = v14;
        }
        *(void *)(a4 + 144) = v13 + 24;
        *(void *)(a4 + 144) = v13 + 24;
        if (SHIBYTE(__p[2]) < 0) {
          goto LABEL_37;
        }
      }
      goto LABEL_33;
    }
  }
  else if (HIBYTE(__p[2]))
  {
    goto LABEL_16;
  }
  uint64_t v15 = (void *)HIBYTE(v20[2]);
  if (SHIBYTE(v20[2]) < 0) {
    uint64_t v15 = v20[1];
  }
  if (v15 == (void *)2)
  {
    uint64_t v17 = v20;
    if (SHIBYTE(v20[2]) < 0) {
      uint64_t v17 = (void **)v20[0];
    }
    std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:ne180100](a4, *(char *)v17, *((char *)v17 + 1));
  }
  else
  {
    if (v15 != (void *)1) {
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
    }
    int64_t v16 = v20;
    if (SHIBYTE(v20[2]) < 0) {
      int64_t v16 = (void **)v20[0];
    }
    std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](a4, *(char *)v16);
  }
  if (SHIBYTE(__p[2]) < 0)
  {
LABEL_37:
    operator delete(__p[0]);
    if (SHIBYTE(v20[2]) < 0) {
      goto LABEL_38;
    }
    return v7 + 2;
  }
LABEL_33:
  if ((SHIBYTE(v20[2]) & 0x80000000) == 0) {
    return v7 + 2;
  }
LABEL_38:
  operator delete(v20[0]);
  return v7 + 2;
}

void sub_2636A712C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  *(void *)(v20 + 144) = v21;
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<std::__wrap_iter<char const*>>(uint64_t a1, char *a2, char *a3, uint64_t a4)
{
  if (a3 - a2 < 2 || a3 - 1 == a2) {
    goto LABEL_15;
  }
  int64_t v5 = a3 - 2;
  int v6 = a2;
  char v7 = a2;
  unint64_t v8 = a2 + 1;
  if (*a2 != 46) {
    goto LABEL_5;
  }
LABEL_4:
  if (*v8 != 93)
  {
LABEL_5:
    while (a2 != v5)
    {
      ++v6;
      --v5;
      char v7 = v8;
      int v9 = *v8++;
      if (v9 == 46) {
        goto LABEL_4;
      }
    }
LABEL_15:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
  }
  if (v7 == a3) {
    goto LABEL_15;
  }
  std::regex_traits<char>::__lookup_collatename<std::__wrap_iter<char const*>>(a1, (uint64_t)a2, v6, (uint64_t)&v13);
  if (*(char *)(a4 + 23) < 0) {
    operator delete(*(void **)a4);
  }
  *(_OWORD *)a4 = v13;
  unint64_t v10 = v14;
  *(void *)(a4 + 16) = v14;
  unint64_t v11 = HIBYTE(v10);
  if ((v11 & 0x80u) != 0) {
    unint64_t v11 = *(void *)(a4 + 8);
  }
  if (v11 - 1 >= 2) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
  }
  return v6 + 2;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t a4, uint64_t a5)
{
  if (a2 == a3) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  }
  switch(*a2)
  {
    case 'D':
      *(_DWORD *)(a5 + 164) |= 0x400u;
      uint64_t result = a2 + 1;
      break;
    case 'E':
    case 'F':
    case 'G':
    case 'H':
    case 'I':
    case 'J':
    case 'K':
    case 'L':
    case 'M':
    case 'N':
    case 'O':
    case 'P':
    case 'Q':
    case 'R':
    case 'T':
    case 'U':
    case 'V':
    case 'X':
    case 'Y':
    case 'Z':
    case '[':
    case '\\':
    case ']':
    case '^':
    case '_':
    case 'a':
    case 'c':
    case 'e':
    case 'f':
    case 'g':
    case 'h':
    case 'i':
    case 'j':
    case 'k':
    case 'l':
    case 'm':
    case 'n':
    case 'o':
    case 'p':
    case 'q':
    case 'r':
    case 't':
    case 'u':
    case 'v':
      goto LABEL_8;
    case 'S':
      *(_DWORD *)(a5 + 164) |= 0x4000u;
      uint64_t result = a2 + 1;
      break;
    case 'W':
      *(_DWORD *)(a5 + 164) |= 0x500u;
      std::__bracket_expression<char,std::regex_traits<char>>::__add_neg_char[abi:ne180100](a5, 95);
      uint64_t result = a2 + 1;
      break;
    case 'b':
      if (*(char *)(a4 + 23) < 0)
      {
        *(void *)(a4 + 8) = 1;
        a4 = *(void *)a4;
      }
      else
      {
        *(unsigned char *)(a4 + 23) = 1;
      }
      *(_WORD *)a4 = 8;
      uint64_t result = a2 + 1;
      break;
    case 'd':
      *(_DWORD *)(a5 + 160) |= 0x400u;
      uint64_t result = a2 + 1;
      break;
    case 's':
      *(_DWORD *)(a5 + 160) |= 0x4000u;
      uint64_t result = a2 + 1;
      break;
    case 'w':
      *(_DWORD *)(a5 + 160) |= 0x500u;
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](a5, 95);
      uint64_t result = a2 + 1;
      break;
    default:
      if (*a2)
      {
LABEL_8:
        uint64_t result = std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<std::__wrap_iter<char const*>>(a1, a2, a3, (uint64_t *)a4);
      }
      else
      {
        if (*(char *)(a4 + 23) < 0)
        {
          *(void *)(a4 + 8) = 1;
          a4 = *(void *)a4;
        }
        else
        {
          *(unsigned char *)(a4 + 23) = 1;
        }
        *(unsigned char *)a4 = 0;
        *(unsigned char *)(a4 + 1) = 0;
        uint64_t result = a2 + 1;
      }
      break;
  }
  return result;
}

std::basic_regex<char>::value_type *std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, std::basic_regex<char>::value_type *a2, std::basic_regex<char>::value_type *a3, uint64_t *a4)
{
  if (a2 == a3) {
LABEL_70:
  }
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  std::basic_regex<char>::value_type v5 = *a2;
  switch(*a2)
  {
    case '""':
    case '/':
    case '\\':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(unsigned char *)a4 = v5;
        *((unsigned char *)a4 + 1) = 0;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v5);
        return a2 + 1;
      }
    case 'a':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 7;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 7);
        return a2 + 1;
      }
    case 'b':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 8;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 8);
        return a2 + 1;
      }
    case 'f':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 12;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 12);
        return a2 + 1;
      }
    case 'n':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 10;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 10);
        return a2 + 1;
      }
    case 'r':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 13;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 13);
        return a2 + 1;
      }
    case 't':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 9;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 9);
        return a2 + 1;
      }
    case 'v':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 11;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 11);
        return a2 + 1;
      }
    default:
      if ((v5 & 0xF8) != 0x30) {
        goto LABEL_70;
      }
      std::basic_regex<char>::value_type v7 = *a2 - 48;
      unint64_t v8 = a2 + 1;
      if (a2 + 1 == a3)
      {
        unint64_t v8 = a3;
LABEL_42:
        if (a4) {
          goto LABEL_43;
        }
LABEL_69:
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v7);
        return v8;
      }
      if ((*v8 & 0xF8) != 0x30) {
        goto LABEL_42;
      }
      std::basic_regex<char>::value_type v7 = *v8 + 8 * v7 - 48;
      if (a2 + 2 == a3)
      {
        unint64_t v8 = a3;
        if (a4) {
          goto LABEL_43;
        }
        goto LABEL_69;
      }
      std::basic_regex<char>::value_type v9 = a2[2];
      int v10 = v9 & 0xF8;
      std::basic_regex<char>::value_type v11 = v9 + 8 * v7 - 48;
      if (v10 == 48) {
        unint64_t v8 = a2 + 3;
      }
      else {
        unint64_t v8 = a2 + 2;
      }
      if (v10 == 48) {
        std::basic_regex<char>::value_type v7 = v11;
      }
      if (!a4) {
        goto LABEL_69;
      }
LABEL_43:
      if (*((char *)a4 + 23) < 0)
      {
        a4[1] = 1;
        a4 = (uint64_t *)*a4;
      }
      else
      {
        *((unsigned char *)a4 + 23) = 1;
      }
      *(unsigned char *)a4 = v7;
      *((unsigned char *)a4 + 1) = 0;
      return v8;
  }
}

void std::__bracket_expression<char,std::regex_traits<char>>::__add_range[abi:ne180100](uint64_t a1, char *a2, uint64_t a3)
{
  uint64_t v3 = a3;
  uint64_t v4 = (uint64_t)a2;
  if (!*(unsigned char *)(a1 + 170))
  {
    uint64_t v16 = a2[23];
    if (a2[23] < 0)
    {
      if (*((void *)a2 + 1) != 1) {
        goto LABEL_74;
      }
    }
    else if (v16 != 1)
    {
LABEL_74:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)9>();
    }
    if (*(char *)(a3 + 23) < 0)
    {
      if (*(void *)(a3 + 8) != 1) {
        goto LABEL_74;
      }
    }
    else if (*(unsigned char *)(a3 + 23) != 1)
    {
      goto LABEL_74;
    }
    if (!*(unsigned char *)(a1 + 169))
    {
LABEL_67:
      *(_OWORD *)std::vector<std::csub_match> __p = *(_OWORD *)v4;
      uint64_t v49 = *(void *)(v4 + 16);
      *(void *)(v4 + 8) = 0;
      *(void *)(v4 + 16) = 0;
      *(void *)uint64_t v4 = 0;
      *(_OWORD *)unint64_t v50 = *(_OWORD *)v3;
      uint64_t v51 = *(void *)(v3 + 16);
      *(void *)(v3 + 8) = 0;
      *(void *)(v3 + 16) = 0;
      *(void *)uint64_t v3 = 0;
      unint64_t v39 = *(void *)(a1 + 96);
      if (v39 < *(void *)(a1 + 104))
      {
        long long v40 = *(_OWORD *)__p;
        *(void *)(v39 + 16) = v49;
        *(_OWORD *)unint64_t v39 = v40;
        __p[1] = 0;
        uint64_t v49 = 0;
        __p[0] = 0;
        uint64_t v41 = v51;
        *(_OWORD *)(v39 + 24) = *(_OWORD *)v50;
        *(void *)(v39 + 40) = v41;
        v50[1] = 0;
        uint64_t v51 = 0;
        v50[0] = 0;
        *(void *)(a1 + 96) = v39 + 48;
        if (SHIBYTE(v49) < 0) {
          goto LABEL_69;
        }
        return;
      }
      uint64_t v42 = std::vector<std::pair<std::string,std::string>>::__push_back_slow_path<std::pair<std::string,std::string>>((void **)(a1 + 88), (uint64_t)__p);
      int v43 = SHIBYTE(v51);
      *(void *)(a1 + 96) = v42;
      if ((v43 & 0x80000000) == 0)
      {
        if (SHIBYTE(v49) < 0) {
          goto LABEL_69;
        }
        return;
      }
      operator delete(v50[0]);
      if ((SHIBYTE(v49) & 0x80000000) == 0) {
        return;
      }
LABEL_69:
      operator delete(__p[0]);
      return;
    }
    int v34 = a2;
    if ((v16 & 0x80) != 0) {
      int v34 = *(char **)a2;
    }
    char v35 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), *v34);
    if (*(char *)(v4 + 23) < 0)
    {
      **(unsigned char **)uint64_t v4 = v35;
      std::vector<char>::pointer v36 = (char *)v3;
      if ((*(char *)(v3 + 23) & 0x80000000) == 0) {
        goto LABEL_64;
      }
    }
    else
    {
      *(unsigned char *)uint64_t v4 = v35;
      std::vector<char>::pointer v36 = (char *)v3;
      if ((*(char *)(v3 + 23) & 0x80000000) == 0)
      {
LABEL_64:
        char v37 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), *v36);
        uint64_t v38 = (unsigned char *)v3;
        if (*(char *)(v3 + 23) < 0) {
          uint64_t v38 = *(unsigned char **)v3;
        }
        unsigned char *v38 = v37;
        goto LABEL_67;
      }
    }
    std::vector<char>::pointer v36 = *(char **)v3;
    goto LABEL_64;
  }
  if (*(unsigned char *)(a1 + 169))
  {
    for (unint64_t i = 0; ; ++i)
    {
      unint64_t v7 = *(unsigned __int8 *)(v4 + 23);
      if (*(char *)(v4 + 23) < 0)
      {
        if (i >= *(void *)(v4 + 8))
        {
LABEL_13:
          for (unint64_t j = 0; ; ++j)
          {
            unint64_t v12 = *(unsigned __int8 *)(v3 + 23);
            if (*(char *)(v3 + 23) < 0)
            {
              if (j >= *(void *)(v3 + 8)) {
                goto LABEL_44;
              }
            }
            else if (j >= v12)
            {
              goto LABEL_44;
            }
            uint64_t v13 = v3;
            if ((v12 & 0x80) != 0) {
              uint64_t v13 = *(void *)v3;
            }
            char v14 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), *(char *)(v13 + j));
            uint64_t v15 = v3;
            if (*(char *)(v3 + 23) < 0) {
              uint64_t v15 = *(void *)v3;
            }
            *(unsigned char *)(v15 + j) = v14;
          }
        }
      }
      else if (i >= v7)
      {
        goto LABEL_13;
      }
      uint64_t v8 = v4;
      if ((v7 & 0x80) != 0) {
        uint64_t v8 = *(void *)v4;
      }
      char v9 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), *(char *)(v8 + i));
      uint64_t v10 = v4;
      if (*(char *)(v4 + 23) < 0) {
        uint64_t v10 = *(void *)v4;
      }
      *(unsigned char *)(v10 + i) = v9;
    }
  }
  for (unint64_t k = 0; ; ++k)
  {
    unint64_t v19 = a2[23];
    if (a2[23] < 0) {
      break;
    }
    if (k >= v19) {
      goto LABEL_35;
    }
LABEL_33:
    uint64_t v18 = a2;
    if ((v19 & 0x80) != 0)
    {
      uint64_t v18 = *(char **)a2;
      uint64_t v20 = *(char **)a2;
    }
    else
    {
      uint64_t v20 = a2;
    }
    v20[k] = v18[k];
  }
  if (k < *((void *)a2 + 1)) {
    goto LABEL_33;
  }
LABEL_35:
  for (unint64_t m = 0; ; ++m)
  {
    unint64_t v23 = *(unsigned __int8 *)(a3 + 23);
    if (*(char *)(a3 + 23) < 0) {
      break;
    }
    if (m >= v23) {
      goto LABEL_44;
    }
LABEL_42:
    uint64_t v22 = a3;
    if ((v23 & 0x80) != 0)
    {
      uint64_t v22 = *(void *)a3;
      uint64_t v24 = *(void *)a3;
    }
    else
    {
      uint64_t v24 = a3;
    }
    *(unsigned char *)(v24 + m) = *(unsigned char *)(v22 + m);
  }
  if (m < *(void *)(a3 + 8)) {
    goto LABEL_42;
  }
LABEL_44:
  if (*(char *)(v4 + 23) < 0)
  {
    uint64_t v26 = v4;
    uint64_t v4 = *(void *)v4;
    uint64_t v25 = *(void *)(v26 + 8);
  }
  else
  {
    uint64_t v25 = *(unsigned __int8 *)(v4 + 23);
  }
  std::regex_traits<char>::transform<std::__wrap_iter<char *>>(a1 + 16, v4, (char *)(v4 + v25));
  if (*(char *)(v3 + 23) < 0)
  {
    uint64_t v28 = v3;
    uint64_t v3 = *(void *)v3;
    uint64_t v27 = *(void *)(v28 + 8);
  }
  else
  {
    uint64_t v27 = *(unsigned __int8 *)(v3 + 23);
  }
  std::regex_traits<char>::transform<std::__wrap_iter<char *>>(a1 + 16, v3, (char *)(v3 + v27));
  *(_OWORD *)std::vector<std::csub_match> __p = *(_OWORD *)v46;
  uint64_t v49 = v47;
  *(_OWORD *)unint64_t v50 = *(_OWORD *)v44;
  uint64_t v51 = v45;
  unint64_t v29 = *(void *)(a1 + 96);
  if (v29 >= *(void *)(a1 + 104))
  {
    int v32 = std::vector<std::pair<std::string,std::string>>::__push_back_slow_path<std::pair<std::string,std::string>>((void **)(a1 + 88), (uint64_t)__p);
    int v33 = SHIBYTE(v51);
    *(void *)(a1 + 96) = v32;
    if (v33 < 0)
    {
      operator delete(v50[0]);
      if ((SHIBYTE(v49) & 0x80000000) == 0) {
        return;
      }
    }
    else if ((SHIBYTE(v49) & 0x80000000) == 0)
    {
      return;
    }
    goto LABEL_69;
  }
  long long v30 = *(_OWORD *)__p;
  *(void *)(v29 + 16) = v49;
  *(_OWORD *)unint64_t v29 = v30;
  __p[1] = 0;
  uint64_t v49 = 0;
  __p[0] = 0;
  uint64_t v31 = v51;
  *(_OWORD *)(v29 + 24) = *(_OWORD *)v50;
  *(void *)(v29 + 40) = v31;
  v50[1] = 0;
  uint64_t v51 = 0;
  v50[0] = 0;
  *(void *)(a1 + 96) = v29 + 48;
  if (SHIBYTE(v49) < 0) {
    goto LABEL_69;
  }
}

void sub_2636A7FC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  std::pair<std::string,std::string>::~pair((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2636A7FDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(a1);
}

void std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:ne180100](uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 169))
  {
    unsigned __int8 v5 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), a2);
    __int16 v6 = v5 | (unsigned __int16)((*(unsigned __int16 (**)(void, uint64_t))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), a3) << 8);
    uint64_t v8 = *(char **)(a1 + 120);
    unint64_t v7 = *(void *)(a1 + 128);
    if ((unint64_t)v8 >= v7)
    {
      char v9 = (char **)(a1 + 112);
      uint64_t v10 = *(char **)(a1 + 112);
      uint64_t v11 = v8 - v10;
      if (v8 - v10 > -3)
      {
        uint64_t v12 = v11 >> 1;
        unint64_t v13 = v7 - (void)v10;
        if (v13 <= (v11 >> 1) + 1) {
          unint64_t v14 = v12 + 1;
        }
        else {
          unint64_t v14 = v13;
        }
        if (v13 >= 0x7FFFFFFFFFFFFFFELL) {
          uint64_t v15 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          uint64_t v15 = v14;
        }
        if (!v15)
        {
          uint64_t v16 = 0;
          uint64_t v17 = (_WORD *)(2 * v12);
          uint64_t v18 = 0;
          *(_WORD *)(2 * v12) = v6;
          uint64_t v19 = 2 * v12 + 2;
          uint64_t v20 = (char *)(v8 - v10);
          if (v8 == v10) {
            goto LABEL_64;
          }
LABEL_30:
          unint64_t v30 = (unint64_t)(v20 - 2);
          if (v30 < 0x1E) {
            goto LABEL_71;
          }
          if (v8 - v16 - (v11 & 0xFFFFFFFFFFFFFFFELL) < 0x20) {
            goto LABEL_71;
          }
          uint64_t v31 = (v30 >> 1) + 1;
          unint64_t v32 = 2 * (v31 & 0xFFFFFFFFFFFFFFF0);
          int v33 = &v8[-v32];
          uint64_t v17 = (_WORD *)((char *)v17 - v32);
          int v34 = &v16[2 * v12 - 16];
          char v35 = v8 - 16;
          unint64_t v36 = v31 & 0xFFFFFFFFFFFFFFF0;
          do
          {
            long long v37 = *(_OWORD *)v35;
            *(v34 - 1) = *((_OWORD *)v35 - 1);
            *int v34 = v37;
            v34 -= 2;
            v35 -= 32;
            v36 -= 16;
          }
          while (v36);
          uint64_t v8 = v33;
          if (v31 != (v31 & 0xFFFFFFFFFFFFFFF0))
          {
LABEL_71:
            do
            {
              __int16 v38 = *((_WORD *)v8 - 1);
              v8 -= 2;
              *--uint64_t v17 = v38;
            }
            while (v8 != v10);
          }
LABEL_63:
          uint64_t v8 = *v9;
          goto LABEL_64;
        }
        if ((v15 & 0x8000000000000000) == 0)
        {
          uint64_t v16 = operator new(2 * v15);
          uint64_t v17 = &v16[2 * v12];
          uint64_t v18 = &v16[2 * v15];
          _WORD *v17 = v6;
          uint64_t v19 = (uint64_t)(v17 + 1);
          uint64_t v20 = (char *)(v8 - v10);
          if (v8 == v10) {
            goto LABEL_64;
          }
          goto LABEL_30;
        }
LABEL_68:
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
LABEL_67:
      std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::__throw_length_error[abi:ne180100]();
    }
LABEL_28:
    *(_WORD *)uint64_t v8 = v6;
    uint64_t v19 = (uint64_t)(v8 + 2);
    goto LABEL_66;
  }
  char v9 = (char **)(a1 + 112);
  __int16 v6 = a2 | (unsigned __int16)((_WORD)a3 << 8);
  uint64_t v8 = *(char **)(a1 + 120);
  unint64_t v21 = *(void *)(a1 + 128);
  if (*(unsigned char *)(a1 + 170))
  {
    if ((unint64_t)v8 < v21) {
      goto LABEL_28;
    }
    uint64_t v22 = *v9;
    uint64_t v23 = v8 - *v9;
    if (v23 <= -3) {
      goto LABEL_67;
    }
    uint64_t v24 = v23 >> 1;
    unint64_t v25 = v21 - (void)v22;
    if (v25 <= (v23 >> 1) + 1) {
      unint64_t v26 = v24 + 1;
    }
    else {
      unint64_t v26 = v25;
    }
    if (v25 >= 0x7FFFFFFFFFFFFFFELL) {
      uint64_t v27 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v27 = v26;
    }
    if (v27)
    {
      if (v27 < 0) {
        goto LABEL_68;
      }
      uint64_t v28 = operator new(2 * v27);
      uint64_t v17 = &v28[2 * v24];
      uint64_t v18 = &v28[2 * v27];
      _WORD *v17 = v6;
      uint64_t v19 = (uint64_t)(v17 + 1);
      unint64_t v29 = (char *)(v8 - v22);
      if (v8 == v22) {
        goto LABEL_64;
      }
    }
    else
    {
      uint64_t v28 = 0;
      uint64_t v17 = (_WORD *)(2 * v24);
      uint64_t v18 = 0;
      *(_WORD *)(2 * v24) = v6;
      uint64_t v19 = 2 * v24 + 2;
      unint64_t v29 = (char *)(v8 - v22);
      if (v8 == v22) {
        goto LABEL_64;
      }
    }
    unint64_t v47 = (unint64_t)(v29 - 2);
    if (v47 < 0x1E) {
      goto LABEL_72;
    }
    if ((unint64_t)(v8 - &v28[v23 & 0xFFFFFFFFFFFFFFFELL]) < 0x20) {
      goto LABEL_72;
    }
    uint64_t v48 = (v47 >> 1) + 1;
    unint64_t v49 = 2 * (v48 & 0xFFFFFFFFFFFFFFF0);
    unint64_t v50 = &v8[-v49];
    uint64_t v17 = (_WORD *)((char *)v17 - v49);
    uint64_t v51 = &v28[2 * v24 - 16];
    size_t v52 = v8 - 16;
    unint64_t v53 = v48 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      long long v54 = *(_OWORD *)v52;
      *(v51 - 1) = *((_OWORD *)v52 - 1);
      _OWORD *v51 = v54;
      v51 -= 2;
      v52 -= 32;
      v53 -= 16;
    }
    while (v53);
    uint64_t v8 = v50;
    if (v48 != (v48 & 0xFFFFFFFFFFFFFFF0))
    {
LABEL_72:
      do
      {
        __int16 v55 = *((_WORD *)v8 - 1);
        v8 -= 2;
        *--uint64_t v17 = v55;
      }
      while (v8 != v22);
    }
    goto LABEL_63;
  }
  if ((unint64_t)v8 < v21) {
    goto LABEL_28;
  }
  unint64_t v39 = *v9;
  uint64_t v40 = v8 - *v9;
  if (v40 <= -3) {
    goto LABEL_67;
  }
  uint64_t v41 = v40 >> 1;
  unint64_t v42 = v21 - (void)v39;
  if (v42 <= (v40 >> 1) + 1) {
    unint64_t v43 = v41 + 1;
  }
  else {
    unint64_t v43 = v42;
  }
  if (v42 >= 0x7FFFFFFFFFFFFFFELL) {
    uint64_t v44 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    uint64_t v44 = v43;
  }
  if (!v44)
  {
    uint64_t v45 = 0;
    uint64_t v17 = (_WORD *)(2 * v41);
    uint64_t v18 = 0;
    *(_WORD *)(2 * v41) = v6;
    uint64_t v19 = 2 * v41 + 2;
    uint64_t v46 = (char *)(v8 - v39);
    if (v8 == v39) {
      goto LABEL_64;
    }
    goto LABEL_57;
  }
  if (v44 < 0) {
    goto LABEL_68;
  }
  uint64_t v45 = operator new(2 * v44);
  uint64_t v17 = &v45[2 * v41];
  uint64_t v18 = &v45[2 * v44];
  _WORD *v17 = v6;
  uint64_t v19 = (uint64_t)(v17 + 1);
  uint64_t v46 = (char *)(v8 - v39);
  if (v8 != v39)
  {
LABEL_57:
    unint64_t v56 = (unint64_t)(v46 - 2);
    if (v56 < 0x1E) {
      goto LABEL_73;
    }
    if ((unint64_t)(v8 - &v45[v40 & 0xFFFFFFFFFFFFFFFELL]) < 0x20) {
      goto LABEL_73;
    }
    uint64_t v57 = (v56 >> 1) + 1;
    unint64_t v58 = 2 * (v57 & 0xFFFFFFFFFFFFFFF0);
    int v59 = &v8[-v58];
    uint64_t v17 = (_WORD *)((char *)v17 - v58);
    size_t v60 = &v45[2 * v41 - 16];
    size_t v61 = v8 - 16;
    unint64_t v62 = v57 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      long long v63 = *(_OWORD *)v61;
      *(v60 - 1) = *((_OWORD *)v61 - 1);
      *size_t v60 = v63;
      v60 -= 2;
      v61 -= 32;
      v62 -= 16;
    }
    while (v62);
    uint64_t v8 = v59;
    if (v57 != (v57 & 0xFFFFFFFFFFFFFFF0))
    {
LABEL_73:
      do
      {
        __int16 v64 = *((_WORD *)v8 - 1);
        v8 -= 2;
        *--uint64_t v17 = v64;
      }
      while (v8 != v39);
    }
    goto LABEL_63;
  }
LABEL_64:
  *(void *)(a1 + 112) = v17;
  *(void *)(a1 + 120) = v19;
  *(void *)(a1 + 128) = v18;
  if (v8) {
    operator delete(v8);
  }
LABEL_66:
  *(void *)(a1 + 120) = v19;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x263E69360](exception, 1);
  __cxa_throw(exception, MEMORY[0x263F8C190], MEMORY[0x263F8C098]);
}

void sub_2636A8458(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::regex_traits<char>::__lookup_collatename<std::__wrap_iter<char const*>>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v5 = (unint64_t)&a3[-a2];
  memset(__s, 170, sizeof(__s));
  if ((unint64_t)&a3[-a2] >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v5 <= 0x16)
  {
    __s[23] = (_BYTE)a3 - a2;
    char v9 = __s;
    if ((char *)a2 != a3) {
      goto LABEL_4;
    }
LABEL_13:
    uint64_t v10 = v9;
    goto LABEL_16;
  }
  uint64_t v16 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v5 | 7) != 0x17) {
    uint64_t v16 = v5 | 7;
  }
  uint64_t v17 = v16 + 1;
  char v9 = (char *)operator new(v16 + 1);
  *(void *)&__s[8] = v5;
  *(void *)&char __s[16] = v17 | 0x8000000000000000;
  *(void *)__s = v9;
  if ((char *)a2 == a3) {
    goto LABEL_13;
  }
LABEL_4:
  if (v5 < 0x20 || (unint64_t)&v9[-a2] < 0x20)
  {
    uint64_t v10 = v9;
    uint64_t v11 = (char *)a2;
    do
    {
LABEL_15:
      char v18 = *v11++;
      *v10++ = v18;
    }
    while (v11 != a3);
    goto LABEL_16;
  }
  uint64_t v10 = &v9[v5 & 0xFFFFFFFFFFFFFFE0];
  uint64_t v11 = (char *)(a2 + (v5 & 0xFFFFFFFFFFFFFFE0));
  uint64_t v12 = (long long *)(a2 + 16);
  unint64_t v13 = v9 + 16;
  unint64_t v14 = v5 & 0xFFFFFFFFFFFFFFE0;
  do
  {
    long long v15 = *v12;
    *(v13 - 1) = *(v12 - 1);
    *unint64_t v13 = v15;
    v12 += 2;
    v13 += 2;
    v14 -= 32;
  }
  while (v14);
  if (v5 != (v5 & 0xFFFFFFFFFFFFFFE0)) {
    goto LABEL_15;
  }
LABEL_16:
  char *v10 = 0;
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  if (__s[23] < 0)
  {
    uint64_t v19 = *(char **)__s;
    if (!*(void *)&__s[8]) {
      goto LABEL_29;
    }
  }
  else
  {
    if (!__s[23]) {
      return;
    }
    uint64_t v19 = __s;
  }
  std::__get_collation_name(&v26, v19);
  *(_OWORD *)a4 = *(_OWORD *)&v26.__r_.__value_.__l.__data_;
  unint64_t v20 = v26.__r_.__value_.__r.__words[2];
  *(void *)(a4 + 16) = *((void *)&v26.__r_.__value_.__l + 2);
  unint64_t v21 = HIBYTE(v20);
  if ((v21 & 0x80u) != 0) {
    unint64_t v21 = *(void *)(a4 + 8);
  }
  if (v21)
  {
LABEL_23:
    if ((__s[23] & 0x80000000) == 0) {
      return;
    }
    uint64_t v19 = *(char **)__s;
LABEL_29:
    operator delete(v19);
    return;
  }
  if (__s[23] < 0)
  {
    uint64_t v19 = *(char **)__s;
    if (*(void *)&__s[8] >= 3uLL) {
      goto LABEL_29;
    }
    goto LABEL_31;
  }
  if (__s[23] < 3u)
  {
LABEL_31:
    (*(void (**)(std::string *__return_ptr))(**(void **)(a1 + 16) + 32))(&v26);
    if (*(char *)(a4 + 23) < 0) {
      operator delete(*(void **)a4);
    }
    *(std::string *)a4 = v26;
    if (*(char *)(a4 + 23) < 0)
    {
      uint64_t v23 = *(void *)(a4 + 8);
      if (v23 == 1 || v23 == 12)
      {
        if (__s != (char *)a4)
        {
          if (__s[23] >= 0) {
            uint64_t v24 = __s;
          }
          else {
            uint64_t v24 = *(char **)__s;
          }
          if (__s[23] >= 0) {
            size_t v25 = __s[23];
          }
          else {
            size_t v25 = *(void *)&__s[8];
          }
          std::string::__assign_no_alias<false>((void **)a4, v24, v25);
        }
      }
      else
      {
        **(unsigned char **)a4 = 0;
        *(void *)(a4 + 8) = 0;
      }
    }
    else
    {
      int v22 = *(unsigned __int8 *)(a4 + 23);
      if (v22 == 1 || v22 == 12)
      {
        if (__s != (char *)a4)
        {
          if (__s[23] < 0)
          {
            std::string::__assign_no_alias<true>((void *)a4, *(void **)__s, *(size_t *)&__s[8]);
          }
          else
          {
            *(_OWORD *)a4 = *(_OWORD *)__s;
            *(void *)(a4 + 16) = *(void *)&__s[16];
          }
        }
      }
      else
      {
        *(unsigned char *)a4 = 0;
        *(unsigned char *)(a4 + 23) = 0;
      }
    }
    goto LABEL_23;
  }
}

void sub_2636A8744(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (*(char *)(v17 + 23) < 0)
  {
    operator delete(*(void **)v17);
    if ((a17 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a17 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::regex_traits<char>::__transform_primary<std::__wrap_iter<char *>>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, unsigned char **a4@<X8>)
{
  unint64_t v5 = (unint64_t)&a3[-a2];
  memset(__p, 170, sizeof(__p));
  if ((unint64_t)&a3[-a2] >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v5 > 0x16)
  {
    uint64_t v16 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17) {
      uint64_t v16 = v5 | 7;
    }
    uint64_t v17 = v16 + 1;
    char v9 = operator new(v16 + 1);
    __p[1] = (void *)v5;
    __p[2] = (void *)(v17 | 0x8000000000000000);
    __p[0] = v9;
    if ((char *)a2 != a3) {
      goto LABEL_4;
    }
LABEL_13:
    uint64_t v10 = v9;
    goto LABEL_16;
  }
  HIBYTE(__p[2]) = (_BYTE)a3 - a2;
  char v9 = __p;
  if ((char *)a2 == a3) {
    goto LABEL_13;
  }
LABEL_4:
  if (v5 < 0x20 || (unint64_t)v9 - a2 < 0x20)
  {
    uint64_t v10 = v9;
    uint64_t v11 = (char *)a2;
  }
  else
  {
    uint64_t v10 = (char *)v9 + (v5 & 0xFFFFFFFFFFFFFFE0);
    uint64_t v11 = (char *)(a2 + (v5 & 0xFFFFFFFFFFFFFFE0));
    uint64_t v12 = (long long *)(a2 + 16);
    unint64_t v13 = v9 + 1;
    unint64_t v14 = v5 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      long long v15 = *v12;
      *(v13 - 1) = *(v12 - 1);
      *unint64_t v13 = v15;
      v12 += 2;
      v13 += 2;
      v14 -= 32;
    }
    while (v14);
    if (v5 == (v5 & 0xFFFFFFFFFFFFFFE0)) {
      goto LABEL_16;
    }
  }
  do
  {
    char v18 = *v11++;
    *v10++ = v18;
  }
  while (v11 != a3);
LABEL_16:
  unsigned char *v10 = 0;
  memset(a4, 170, 24);
  uint64_t v19 = (char *)HIBYTE(__p[2]);
  if (SHIBYTE(__p[2]) >= 0) {
    unint64_t v20 = __p;
  }
  else {
    unint64_t v20 = (void **)__p[0];
  }
  if (SHIBYTE(__p[2]) < 0) {
    uint64_t v19 = (char *)__p[1];
  }
  (*(void (**)(void, void **, char *))(**(void **)(a1 + 16) + 32))(*(void *)(a1 + 16), v20, &v19[(void)v20]);
  unint64_t v21 = (unsigned char *)*((unsigned __int8 *)a4 + 23);
  int v22 = (char)v21;
  if ((char)v21 < 0) {
    unint64_t v21 = a4[1];
  }
  if (v21 == (unsigned char *)1) {
    goto LABEL_32;
  }
  if (v21 != (unsigned char *)12)
  {
    if (v22 < 0)
    {
      **a4 = 0;
      a4[1] = 0;
      if ((SHIBYTE(__p[2]) & 0x80000000) == 0) {
        return;
      }
LABEL_35:
      operator delete(__p[0]);
      return;
    }
    *(unsigned char *)a4 = 0;
    *((unsigned char *)a4 + 23) = 0;
LABEL_32:
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0) {
      return;
    }
    goto LABEL_35;
  }
  if (v22 >= 0) {
    uint64_t v23 = a4;
  }
  else {
    uint64_t v23 = *a4;
  }
  v23[11] = v23[3];
  if (SHIBYTE(__p[2]) < 0) {
    goto LABEL_35;
  }
}

void sub_2636A8994(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

std::string *std::vector<std::string>::__push_back_slow_path<std::string const&>(char **a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::__throw_length_error[abi:ne180100]();
  }
  if (0x5555555555555556 * ((a1[2] - v3) >> 3) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((a1[2] - v3) >> 3);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3) >= 0x555555555555555) {
    unint64_t v8 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v8 = v6;
  }
  if (v8)
  {
    if (v8 > 0xAAAAAAAAAAAAAAALL) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    char v9 = (char *)operator new(24 * v8);
  }
  else
  {
    char v9 = 0;
  }
  uint64_t v10 = (std::string *)&v9[24 * v5];
  uint64_t v16 = v10;
  uint64_t v17 = v10;
  char v18 = &v9[24 * v8];
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v10, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    uint64_t v3 = *a1;
    uint64_t v4 = a1[1];
    uint64_t v10 = v16;
    uint64_t v11 = v17 + 1;
    if (v4 == *a1)
    {
LABEL_17:
      unint64_t v13 = v3;
      goto LABEL_18;
    }
  }
  else
  {
    *(_OWORD *)&v10->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    v10->__r_.__value_.__r.__words[2] = *(void *)(a2 + 16);
    uint64_t v11 = v10 + 1;
    if (v4 == v3) {
      goto LABEL_17;
    }
  }
  do
  {
    long long v12 = *(_OWORD *)(v4 - 24);
    v10[-1].__r_.__value_.__r.__words[2] = *((void *)v4 - 1);
    *(_OWORD *)&v10[-1].__r_.__value_.__l.__data_ = v12;
    --v10;
    *((void *)v4 - 2) = 0;
    *((void *)v4 - 1) = 0;
    *((void *)v4 - 3) = 0;
    v4 -= 24;
  }
  while (v4 != v3);
  unint64_t v13 = *a1;
  uint64_t v3 = a1[1];
LABEL_18:
  *a1 = (char *)v10;
  a1[1] = (char *)v11;
  a1[2] = v18;
  if (v3 != v13)
  {
    unint64_t v14 = (void **)(v3 - 24);
    do
    {
      if (*((char *)v14 + 23) < 0) {
        operator delete(*v14);
      }
      v14 -= 3;
    }
    while (v14 + 3 != (void **)v13);
    uint64_t v3 = v13;
  }
  if (v3) {
    operator delete(v3);
  }
  return v11;
}

void sub_2636A8B74(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

void std::__split_buffer<std::string>::~__split_buffer(std::__split_buffer<std::string> *this)
{
  std::__split_buffer<std::string>::pointer begin = this->__begin_;
  std::__split_buffer<std::string>::pointer end = this->__end_;
  if (end != begin)
  {
    do
    {
      std::__split_buffer<std::string>::pointer v4 = end - 1;
      this->__end_ = end - 1;
      if (SHIBYTE(end[-1].__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v4->__r_.__value_.__l.__data_);
        std::__split_buffer<std::string>::pointer v4 = this->__end_;
      }
      std::__split_buffer<std::string>::pointer end = v4;
    }
    while (v4 != begin);
  }
  if (this->__first_) {
    operator delete(this->__first_);
  }
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)2>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x263E69360](exception, 2);
  __cxa_throw(exception, MEMORY[0x263F8C190], MEMORY[0x263F8C098]);
}

void sub_2636A8C34(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t std::regex_traits<char>::__lookup_classname<std::__wrap_iter<char const*>>(uint64_t a1, uint64_t a2, char *a3, BOOL a4)
{
  unint64_t v4 = (unint64_t)&a3[-a2];
  memset(__p, 170, sizeof(__p));
  if ((unint64_t)&a3[-a2] >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v4 > 0x16)
  {
    uint64_t v16 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v16 = v4 | 7;
    }
    uint64_t v17 = v16 + 1;
    char v9 = operator new(v16 + 1);
    __p[1] = (void *)v4;
    __p[2] = (void *)(v17 | 0x8000000000000000);
    __p[0] = v9;
    if ((char *)a2 != a3) {
      goto LABEL_4;
    }
LABEL_13:
    uint64_t v10 = v9;
    goto LABEL_16;
  }
  HIBYTE(__p[2]) = (_BYTE)a3 - a2;
  char v9 = __p;
  if ((char *)a2 == a3) {
    goto LABEL_13;
  }
LABEL_4:
  if (v4 < 0x20 || (unint64_t)v9 - a2 < 0x20)
  {
    uint64_t v10 = v9;
    uint64_t v11 = (char *)a2;
  }
  else
  {
    uint64_t v10 = (char *)v9 + (v4 & 0xFFFFFFFFFFFFFFE0);
    uint64_t v11 = (char *)(a2 + (v4 & 0xFFFFFFFFFFFFFFE0));
    long long v12 = (long long *)(a2 + 16);
    unint64_t v13 = v9 + 1;
    unint64_t v14 = v4 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      long long v15 = *v12;
      *(v13 - 1) = *(v12 - 1);
      *unint64_t v13 = v15;
      v12 += 2;
      v13 += 2;
      v14 -= 32;
    }
    while (v14);
    if (v4 == (v4 & 0xFFFFFFFFFFFFFFE0)) {
      goto LABEL_16;
    }
  }
  do
  {
    char v18 = *v11++;
    *v10++ = v18;
  }
  while (v11 != a3);
LABEL_16:
  unsigned char *v10 = 0;
  uint64_t v19 = (char *)HIBYTE(__p[2]);
  if (SHIBYTE(__p[2]) >= 0) {
    unint64_t v20 = __p;
  }
  else {
    unint64_t v20 = (void **)__p[0];
  }
  if (SHIBYTE(__p[2]) < 0) {
    uint64_t v19 = (char *)__p[1];
  }
  (*(void (**)(void, void **, char *))(**(void **)(a1 + 8) + 48))(*(void *)(a1 + 8), v20, &v19[(void)v20]);
  if (SHIBYTE(__p[2]) >= 0) {
    unint64_t v21 = __p;
  }
  else {
    unint64_t v21 = (void **)__p[0];
  }
  uint64_t classname = std::__get_classname((const char *)v21, a4);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  return classname;
}

void sub_2636A8DE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__bracket_expression<char,std::regex_traits<char>>::__add_neg_char[abi:ne180100](uint64_t a1, uint64_t a2)
{
  char v2 = a2;
  if (!*(unsigned char *)(a1 + 169))
  {
    unint64_t v6 = (void *)(a1 + 64);
    unint64_t v5 = *(unsigned char **)(a1 + 72);
    unint64_t v16 = *(void *)(a1 + 80);
    if (*(unsigned char *)(a1 + 170))
    {
      if ((unint64_t)v5 < v16) {
        goto LABEL_24;
      }
      uint64_t v17 = (unsigned char *)*v6;
      unint64_t v18 = (unint64_t)&v5[-*v6];
      unint64_t v19 = v18 + 1;
      if ((uint64_t)(v18 + 1) >= 0)
      {
        unint64_t v20 = v16 - (void)v17;
        if (2 * v20 > v19) {
          unint64_t v19 = 2 * v20;
        }
        if (v20 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v21 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v21 = v19;
        }
        if (v21)
        {
          long long v12 = operator new(v21);
          unint64_t v13 = &v12[v18];
          unint64_t v14 = &v12[v21];
          v12[v18] = v2;
          uint64_t v15 = (uint64_t)&v12[v18 + 1];
          if (v5 == v17) {
            goto LABEL_49;
          }
        }
        else
        {
          long long v12 = 0;
          unint64_t v13 = &v5[-*v6];
          unint64_t v14 = 0;
          *(unsigned char *)unint64_t v18 = a2;
          uint64_t v15 = v18 + 1;
          if (v5 == v17) {
            goto LABEL_49;
          }
        }
        if (v18 >= 8 && (unint64_t)(v17 - v12) >= 0x20)
        {
          if (v18 >= 0x20)
          {
            unint64_t v28 = v18 & 0xFFFFFFFFFFFFFFE0;
            __int16 v38 = (long long *)(v5 - 16);
            unint64_t v39 = &v12[v5 - 16 - v17];
            unint64_t v40 = v18 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              long long v41 = *v38;
              *(v39 - 1) = *(v38 - 1);
              *unint64_t v39 = v41;
              v39 -= 2;
              v38 -= 2;
              v40 -= 32;
            }
            while (v40);
            if (v18 == v28) {
              goto LABEL_86;
            }
            if ((v18 & 0x18) == 0)
            {
              v13 -= v28;
              v5 -= v28;
              goto LABEL_80;
            }
          }
          else
          {
            unint64_t v28 = 0;
          }
          v13 -= v18 & 0xFFFFFFFFFFFFFFF8;
          unint64_t v42 = &v5[-v28 - 8];
          unint64_t v43 = &v12[v42 - v17];
          unint64_t v44 = v28 - (v18 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            uint64_t v45 = *(void *)v42;
            v42 -= 8;
            *v43-- = v45;
            v44 += 8;
          }
          while (v44);
          v5 -= v18 & 0xFFFFFFFFFFFFFFF8;
          if (v18 == (v18 & 0xFFFFFFFFFFFFFFF8)) {
            goto LABEL_86;
          }
        }
LABEL_80:
        unint64_t v56 = v13 - 1;
        do
        {
          char v57 = *--v5;
          *v56-- = v57;
        }
        while (v5 != v17);
        goto LABEL_86;
      }
LABEL_89:
      std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::__throw_length_error[abi:ne180100]();
    }
    if ((unint64_t)v5 < v16) {
      goto LABEL_24;
    }
    uint64_t v23 = (unsigned char *)*v6;
    unint64_t v24 = (unint64_t)&v5[-*v6];
    unint64_t v25 = v24 + 1;
    if ((uint64_t)(v24 + 1) < 0) {
      goto LABEL_89;
    }
    unint64_t v26 = v16 - (void)v23;
    if (2 * v26 > v25) {
      unint64_t v25 = 2 * v26;
    }
    if (v26 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v27 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v27 = v25;
    }
    if (v27)
    {
      long long v12 = operator new(v27);
      unint64_t v13 = &v12[v24];
      unint64_t v14 = &v12[v27];
      v12[v24] = v2;
      uint64_t v15 = (uint64_t)&v12[v24 + 1];
      if (v5 == v23)
      {
LABEL_49:
        *(void *)(a1 + 64) = v13;
        *(void *)(a1 + 72) = v15;
        *(void *)(a1 + 80) = v14;
        if (!v5) {
          goto LABEL_88;
        }
        goto LABEL_87;
      }
    }
    else
    {
      long long v12 = 0;
      unint64_t v13 = &v5[-*v6];
      unint64_t v14 = 0;
      *(unsigned char *)unint64_t v24 = a2;
      uint64_t v15 = v24 + 1;
      if (v5 == v23) {
        goto LABEL_49;
      }
    }
    if (v24 >= 8 && (unint64_t)(v23 - v12) >= 0x20)
    {
      if (v24 >= 0x20)
      {
        unint64_t v29 = v24 & 0xFFFFFFFFFFFFFFE0;
        uint64_t v46 = (long long *)(v5 - 16);
        unint64_t v47 = &v12[v5 - 16 - v23];
        unint64_t v48 = v24 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          long long v49 = *v46;
          *(v47 - 1) = *(v46 - 1);
          *unint64_t v47 = v49;
          v47 -= 2;
          v46 -= 2;
          v48 -= 32;
        }
        while (v48);
        if (v24 == v29) {
          goto LABEL_86;
        }
        if ((v24 & 0x18) == 0)
        {
          v13 -= v29;
          v5 -= v29;
          goto LABEL_84;
        }
      }
      else
      {
        unint64_t v29 = 0;
      }
      v13 -= v24 & 0xFFFFFFFFFFFFFFF8;
      unint64_t v50 = &v5[-v29 - 8];
      uint64_t v51 = &v12[v50 - v23];
      unint64_t v52 = v29 - (v24 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        uint64_t v53 = *(void *)v50;
        v50 -= 8;
        *v51-- = v53;
        v52 += 8;
      }
      while (v52);
      v5 -= v24 & 0xFFFFFFFFFFFFFFF8;
      if (v24 == (v24 & 0xFFFFFFFFFFFFFFF8)) {
        goto LABEL_86;
      }
    }
LABEL_84:
    unint64_t v58 = v13 - 1;
    do
    {
      char v59 = *--v5;
      *v58-- = v59;
    }
    while (v5 != v23);
    goto LABEL_86;
  }
  char v2 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), a2);
  unint64_t v5 = *(unsigned char **)(a1 + 72);
  unint64_t v4 = *(void *)(a1 + 80);
  if ((unint64_t)v5 < v4)
  {
LABEL_24:
    unsigned char *v5 = v2;
    uint64_t v15 = (uint64_t)(v5 + 1);
    goto LABEL_88;
  }
  unint64_t v6 = (void *)(a1 + 64);
  unint64_t v7 = *(unsigned char **)(a1 + 64);
  unint64_t v8 = v5 - v7;
  uint64_t v9 = v5 - v7 + 1;
  if (v9 < 0) {
    goto LABEL_89;
  }
  unint64_t v10 = v4 - (void)v7;
  if (2 * v10 > v9) {
    uint64_t v9 = 2 * v10;
  }
  if (v10 >= 0x3FFFFFFFFFFFFFFFLL) {
    size_t v11 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    size_t v11 = v9;
  }
  if (v11)
  {
    long long v12 = operator new(v11);
    unint64_t v13 = &v12[v8];
    unint64_t v14 = &v12[v11];
    v12[v8] = v2;
    uint64_t v15 = (uint64_t)&v12[v8 + 1];
    if (v5 == v7) {
      goto LABEL_49;
    }
  }
  else
  {
    long long v12 = 0;
    unint64_t v13 = (char *)(v5 - v7);
    unint64_t v14 = 0;
    *(unsigned char *)unint64_t v8 = v2;
    uint64_t v15 = v8 + 1;
    if (v5 == v7) {
      goto LABEL_49;
    }
  }
  if (v8 < 8 || (unint64_t)(v7 - v12) < 0x20) {
    goto LABEL_76;
  }
  if (v8 < 0x20)
  {
    unint64_t v22 = 0;
    goto LABEL_55;
  }
  unint64_t v22 = v8 & 0xFFFFFFFFFFFFFFE0;
  unint64_t v30 = (long long *)(v5 - 16);
  uint64_t v31 = &v12[v5 - 16 - v7];
  unint64_t v32 = v8 & 0xFFFFFFFFFFFFFFE0;
  do
  {
    long long v33 = *v30;
    *(v31 - 1) = *(v30 - 1);
    *uint64_t v31 = v33;
    v31 -= 2;
    v30 -= 2;
    v32 -= 32;
  }
  while (v32);
  if (v8 != v22)
  {
    if ((v8 & 0x18) == 0)
    {
      v13 -= v22;
      v5 -= v22;
      goto LABEL_76;
    }
LABEL_55:
    v13 -= v8 & 0xFFFFFFFFFFFFFFF8;
    int v34 = &v5[-v22 - 8];
    char v35 = &v12[v34 - v7];
    unint64_t v36 = v22 - (v8 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      uint64_t v37 = *(void *)v34;
      v34 -= 8;
      *v35-- = v37;
      v36 += 8;
    }
    while (v36);
    v5 -= v8 & 0xFFFFFFFFFFFFFFF8;
    if (v8 == (v8 & 0xFFFFFFFFFFFFFFF8)) {
      goto LABEL_86;
    }
LABEL_76:
    long long v54 = v13 - 1;
    do
    {
      char v55 = *--v5;
      *v54-- = v55;
    }
    while (v5 != v7);
  }
LABEL_86:
  unint64_t v5 = (unsigned char *)*v6;
  *(void *)(a1 + 64) = v12;
  *(void *)(a1 + 72) = v15;
  *(void *)(a1 + 80) = v14;
  if (v5) {
LABEL_87:
  }
    operator delete(v5);
LABEL_88:
  *(void *)(a1 + 72) = v15;
}

void std::regex_traits<char>::transform<std::__wrap_iter<char *>>(uint64_t a1, uint64_t a2, char *a3)
{
  unint64_t v3 = (unint64_t)&a3[-a2];
  memset(__p, 170, sizeof(__p));
  if ((unint64_t)&a3[-a2] >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v3 > 0x16)
  {
    uint64_t v14 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17) {
      uint64_t v14 = v3 | 7;
    }
    uint64_t v15 = v14 + 1;
    unint64_t v7 = operator new(v14 + 1);
    __p[1] = (void *)v3;
    __p[2] = (void *)(v15 | 0x8000000000000000);
    __p[0] = v7;
    if ((char *)a2 != a3) {
      goto LABEL_4;
    }
LABEL_13:
    unint64_t v8 = v7;
    goto LABEL_16;
  }
  HIBYTE(__p[2]) = (_BYTE)a3 - a2;
  unint64_t v7 = __p;
  if ((char *)a2 == a3) {
    goto LABEL_13;
  }
LABEL_4:
  if (v3 < 0x20 || (unint64_t)v7 - a2 < 0x20)
  {
    unint64_t v8 = v7;
    uint64_t v9 = (char *)a2;
  }
  else
  {
    unint64_t v8 = (char *)v7 + (v3 & 0xFFFFFFFFFFFFFFE0);
    uint64_t v9 = (char *)(a2 + (v3 & 0xFFFFFFFFFFFFFFE0));
    unint64_t v10 = (long long *)(a2 + 16);
    size_t v11 = v7 + 1;
    unint64_t v12 = v3 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      long long v13 = *v10;
      *(v11 - 1) = *(v10 - 1);
      _OWORD *v11 = v13;
      v10 += 2;
      v11 += 2;
      v12 -= 32;
    }
    while (v12);
    if (v3 == (v3 & 0xFFFFFFFFFFFFFFE0)) {
      goto LABEL_16;
    }
  }
  do
  {
    char v16 = *v9++;
    *v8++ = v16;
  }
  while (v9 != a3);
LABEL_16:
  unsigned char *v8 = 0;
  uint64_t v17 = (char *)HIBYTE(__p[2]);
  if (SHIBYTE(__p[2]) >= 0) {
    unint64_t v18 = __p;
  }
  else {
    unint64_t v18 = (void **)__p[0];
  }
  if (SHIBYTE(__p[2]) < 0) {
    uint64_t v17 = (char *)__p[1];
  }
  (*(void (**)(void, void **, char *))(**(void **)(a1 + 16) + 32))(*(void *)(a1 + 16), v18, &v17[(void)v18]);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
}

void sub_2636A9434(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)9>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x263E69360](exception, 9);
  __cxa_throw(exception, MEMORY[0x263F8C190], MEMORY[0x263F8C098]);
}

void sub_2636A9494(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

char *std::vector<std::pair<std::string,std::string>>::__push_back_slow_path<std::pair<std::string,std::string>>(void **a1, uint64_t a2)
{
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[1] - (unsigned char *)*a1) >> 4);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x555555555555555) {
    std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::__throw_length_error[abi:ne180100]();
  }
  if (0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 4) > v4) {
    unint64_t v4 = 0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v6 = 0x555555555555555;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0x555555555555555) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    unint64_t v7 = (char *)operator new(48 * v6);
  }
  else
  {
    unint64_t v7 = 0;
  }
  unint64_t v8 = &v7[48 * v3];
  *((void *)v8 + 2) = *(void *)(a2 + 16);
  *(_OWORD *)unint64_t v8 = *(_OWORD *)a2;
  uint64_t v9 = &v7[48 * v6];
  long long v10 = *(_OWORD *)(a2 + 24);
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(_OWORD *)(v8 + 24) = v10;
  *((void *)v8 + 5) = *(void *)(a2 + 40);
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  size_t v11 = v8 + 48;
  unint64_t v12 = (void **)*a1;
  long long v13 = (void **)a1[1];
  if (v13 != *a1)
  {
    do
    {
      long long v14 = *((_OWORD *)v13 - 3);
      *((void *)v8 - 4) = *(v13 - 4);
      *((_OWORD *)v8 - 3) = v14;
      *(v13 - 5) = 0;
      *(v13 - 4) = 0;
      *(v13 - 6) = 0;
      long long v15 = *(_OWORD *)(v13 - 3);
      *((void *)v8 - 1) = *(v13 - 1);
      *(_OWORD *)(v8 - 24) = v15;
      v8 -= 48;
      *(v13 - 2) = 0;
      *(v13 - 1) = 0;
      *(v13 - 3) = 0;
      v13 -= 6;
    }
    while (v13 != v12);
    long long v13 = (void **)*a1;
    char v16 = (void **)a1[1];
    *a1 = v8;
    a1[1] = v11;
    a1[2] = v9;
    while (1)
    {
      if (v16 == v13) {
        goto LABEL_22;
      }
      if (*((char *)v16 - 1) < 0)
      {
        operator delete(*(v16 - 3));
        if ((*((char *)v16 - 25) & 0x80000000) == 0) {
          goto LABEL_14;
        }
      }
      else if ((*((char *)v16 - 25) & 0x80000000) == 0)
      {
        goto LABEL_14;
      }
      operator delete(*(v16 - 6));
LABEL_14:
      v16 -= 6;
    }
  }
  *a1 = v8;
  a1[1] = v11;
  a1[2] = v9;
LABEL_22:
  if (v13) {
    operator delete(v13);
  }
  return v11;
}

void (__cdecl ***std::__begin_marked_subexpression<char>::~__begin_marked_subexpression(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  char v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

void std::__begin_marked_subexpression<char>::~__begin_marked_subexpression(void (__cdecl ***__p)(std::__owns_one_state<char> *__hidden this))
{
  char v2 = __p[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }

  operator delete(__p);
}

uint64_t std::__begin_marked_subexpression<char>::__exec(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -994;
  *(void *)(*(void *)(a2 + 32) + 24 * (*(_DWORD *)(result + 16) - 1)) = *(void *)(a2 + 16);
  *(void *)(a2 + 80) = *(void *)(result + 8);
  return result;
}

void (__cdecl ***std::__end_marked_subexpression<char>::~__end_marked_subexpression(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  char v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

void std::__end_marked_subexpression<char>::~__end_marked_subexpression(void (__cdecl ***__p)(std::__owns_one_state<char> *__hidden this))
{
  char v2 = __p[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }

  operator delete(__p);
}

uint64_t std::__end_marked_subexpression<char>::__exec(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -994;
  uint64_t v2 = *(void *)(a2 + 32) + 24 * (*(_DWORD *)(result + 16) - 1);
  *(void *)(v2 + 8) = *(void *)(a2 + 16);
  *(unsigned char *)(v2 + 16) = 1;
  *(void *)(a2 + 80) = *(void *)(result + 8);
  return result;
}

void std::basic_regex<char,std::regex_traits<char>>::__push_loop(std::basic_regex<char> *this, size_t __min, size_t __max, std::__owns_one_state<char> *__s, size_t __mexp_begin, size_t __mexp_end, BOOL __greedy)
{
  int v8 = __mexp_end;
  int v9 = __mexp_begin;
  long long v14 = operator new(0x10uLL);
  std::__split_buffer<std::string>::pointer end = this->__end_;
  first = end->__first_;
  v14[1] = first;
  end->__first_ = 0;
  uint64_t v17 = operator new(0x38uLL);
  loop_size_t count = this->__loop_count_;
  *((void *)v17 + 1) = __s->__first_;
  *((void *)v17 + 2) = v14;
  *(void *)uint64_t v17 = &unk_270EA62A0;
  *((void *)v17 + 3) = __min;
  *((void *)v17 + 4) = __max;
  *((_DWORD *)v17 + 10) = loop_count;
  *((_DWORD *)v17 + 11) = v9;
  *((_DWORD *)v17 + 12) = v8;
  *((unsigned char *)v17 + 52) = __greedy;
  __s->__first_ = 0;
  unint64_t v19 = (std::__node<char> *)operator new(0x10uLL);
  v19->__vftable = (std::__node<char>_vtbl *)&unk_270EA6330;
  v19[1].__vftable = (std::__node<char>_vtbl *)v17;
  this->__end_->__first_ = v19;
  this->__end_ = (std::__owns_one_state<char> *)*((void *)v17 + 2);
  __s->__first_ = (std::__node<char> *)v17;
  this->__loop_count_ = loop_count + 1;
}

void sub_2636A9994(_Unwind_Exception *a1)
{
  std::__loop<char>::~__loop(v1);
  _Unwind_Resume(a1);
}

void sub_2636A99A8(_Unwind_Exception *a1)
{
  std::__empty_state<char>::~__empty_state(v1);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x263E69360](exception, 8);
  __cxa_throw(exception, MEMORY[0x263F8C190], MEMORY[0x263F8C098]);
}

void sub_2636A9A00(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x263E69360](exception, 7);
  __cxa_throw(exception, MEMORY[0x263F8C190], MEMORY[0x263F8C098]);
}

void sub_2636A9A58(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void (__cdecl ***std::__loop<char>::~__loop(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_270EA6300;
  uint64_t v2 = a1[2];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  unint64_t v3 = a1[1];
  if (v3) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  }
  return a1;
}

void std::__loop<char>::~__loop(void (__cdecl ***__p)(std::__owns_one_state<char> *__hidden this))
{
  *std::vector<std::csub_match> __p = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_270EA6300;
  uint64_t v2 = __p[2];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  unint64_t v3 = __p[1];
  if (v3) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  }

  operator delete(__p);
}

uint64_t std::__loop<char>::__exec(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(unsigned int *)(result + 40);
  uint64_t v3 = *(void *)(a2 + 56);
  unint64_t v4 = (unint64_t *)(v3 + 16 * v2);
  if (*(_DWORD *)a2 != -991)
  {
    *unint64_t v4 = 0;
    if (!*(void *)(result + 32))
    {
      *(_DWORD *)a2 = -994;
      goto LABEL_28;
    }
    if (*(void *)(result + 24))
    {
      *(_DWORD *)a2 = -994;
      *(void *)(a2 + 80) = *(void *)(result + 8);
      *(void *)(v3 + 16 * v2 + 8) = *(void *)(a2 + 16);
      int v20 = *(_DWORD *)(result + 44);
      int v21 = *(_DWORD *)(result + 48);
      if (v20 == v21) {
        return result;
      }
      uint64_t v22 = (v21 - 1);
      uint64_t v23 = (v20 - 1);
      uint64_t v24 = *(void *)(a2 + 24);
      uint64_t v25 = *(void *)(a2 + 32);
      uint64_t v26 = v22 - v23;
      if ((unint64_t)(v22 - v23) >= 2)
      {
        uint64_t v27 = (v26 & 0xFFFFFFFFFFFFFFFELL) + v23;
        uint64_t v28 = v25 + 24 * v23 + 24;
        unint64_t v29 = v26 & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          *(void *)(v28 - 24) = v24;
          *(void *)(v28 - 16) = v24;
          *(void *)uint64_t v28 = v24;
          *(void *)(v28 + 8) = v24;
          *(unsigned char *)(v28 - 8) = 0;
          *(unsigned char *)(v28 + 16) = 0;
          v28 += 48;
          v29 -= 2;
        }
        while (v29);
        if (v26 == (v26 & 0xFFFFFFFFFFFFFFFELL)) {
          return result;
        }
      }
      else
      {
        uint64_t v27 = v23;
      }
      uint64_t v30 = v22 - v27;
      uint64_t v31 = (unsigned char *)(v25 + 24 * v27 + 16);
      do
      {
        *((void *)v31 - 2) = v24;
        *((void *)v31 - 1) = v24;
        *uint64_t v31 = 0;
        v31 += 24;
        --v30;
      }
      while (v30);
      return result;
    }
LABEL_26:
    *(_DWORD *)a2 = -992;
    return result;
  }
  unint64_t v5 = *v4 + 1;
  *unint64_t v4 = v5;
  unint64_t v6 = *(void *)(result + 24);
  unint64_t v7 = *(void *)(result + 32);
  BOOL v8 = v5 < v7;
  if (v5 < v7 && v5 >= v6) {
    BOOL v8 = v5 < v7 && *(void *)(v3 + 16 * v2 + 8) != *(void *)(a2 + 16);
  }
  if (v8 && v5 >= v6) {
    goto LABEL_26;
  }
  *(_DWORD *)a2 = -994;
  if (!v8)
  {
LABEL_28:
    *(void *)(a2 + 80) = *(void *)(result + 16);
    return result;
  }
  *(void *)(a2 + 80) = *(void *)(result + 8);
  *(void *)(v3 + 16 * v2 + 8) = *(void *)(a2 + 16);
  int v12 = *(_DWORD *)(result + 44);
  int v13 = *(_DWORD *)(result + 48);
  if (v12 == v13) {
    return result;
  }
  uint64_t v14 = (v13 - 1);
  uint64_t v15 = (v12 - 1);
  uint64_t v16 = *(void *)(a2 + 24);
  uint64_t v17 = *(void *)(a2 + 32);
  uint64_t v18 = v14 - v15;
  if ((unint64_t)(v14 - v15) < 2)
  {
    uint64_t v19 = v15;
LABEL_39:
    uint64_t v34 = v14 - v19;
    char v35 = (unsigned char *)(v17 + 24 * v19 + 16);
    do
    {
      *((void *)v35 - 2) = v16;
      *((void *)v35 - 1) = v16;
      *char v35 = 0;
      v35 += 24;
      --v34;
    }
    while (v34);
    return result;
  }
  uint64_t v19 = (v18 & 0xFFFFFFFFFFFFFFFELL) + v15;
  uint64_t v32 = v17 + 24 * v15 + 24;
  unint64_t v33 = v18 & 0xFFFFFFFFFFFFFFFELL;
  do
  {
    *(void *)(v32 - 24) = v16;
    *(void *)(v32 - 16) = v16;
    *(void *)uint64_t v32 = v16;
    *(void *)(v32 + 8) = v16;
    *(unsigned char *)(v32 - 8) = 0;
    *(unsigned char *)(v32 + 16) = 0;
    v32 += 48;
    v33 -= 2;
  }
  while (v33);
  if (v18 != (v18 & 0xFFFFFFFFFFFFFFFELL)) {
    goto LABEL_39;
  }
  return result;
}

uint64_t std::__loop<char>::__exec_split(uint64_t result, int a2, uint64_t a3)
{
  *(_DWORD *)a3 = -994;
  if (*(unsigned __int8 *)(result + 52) == a2)
  {
    *(void *)(a3 + 80) = *(void *)(result + 16);
    return result;
  }
  *(void *)(a3 + 80) = *(void *)(result + 8);
  int v3 = *(_DWORD *)(result + 44);
  *(void *)(*(void *)(a3 + 56) + 16 * *(unsigned int *)(result + 40) + 8) = *(void *)(a3 + 16);
  int v4 = *(_DWORD *)(result + 48);
  if (v3 != v4)
  {
    uint64_t v5 = (v4 - 1);
    uint64_t v6 = (v3 - 1);
    uint64_t v7 = *(void *)(a3 + 24);
    uint64_t v8 = *(void *)(a3 + 32);
    uint64_t v9 = v5 - v6;
    if ((unint64_t)(v5 - v6) < 2)
    {
      uint64_t v10 = v6;
LABEL_9:
      uint64_t v13 = v5 - v10;
      uint64_t v14 = (unsigned char *)(v8 + 24 * v10 + 16);
      do
      {
        *((void *)v14 - 2) = v7;
        *((void *)v14 - 1) = v7;
        *uint64_t v14 = 0;
        v14 += 24;
        --v13;
      }
      while (v13);
      return result;
    }
    uint64_t v10 = (v9 & 0xFFFFFFFFFFFFFFFELL) + v6;
    uint64_t v11 = v8 + 24 * v6 + 24;
    unint64_t v12 = v9 & 0xFFFFFFFFFFFFFFFELL;
    do
    {
      *(void *)(v11 - 24) = v7;
      *(void *)(v11 - 16) = v7;
      *(void *)uint64_t v11 = v7;
      *(void *)(v11 + 8) = v7;
      *(unsigned char *)(v11 - 8) = 0;
      *(unsigned char *)(v11 + 16) = 0;
      v11 += 48;
      v12 -= 2;
    }
    while (v12);
    if (v9 != (v9 & 0xFFFFFFFFFFFFFFFELL)) {
      goto LABEL_9;
    }
  }
  return result;
}

void (__cdecl ***std::__owns_two_states<char>::~__owns_two_states(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_270EA6300;
  uint64_t v2 = a1[2];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  int v3 = a1[1];
  if (v3) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  }
  return a1;
}

void std::__owns_two_states<char>::~__owns_two_states(void (__cdecl ***__p)(std::__owns_one_state<char> *__hidden this))
{
  *std::vector<std::csub_match> __p = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_270EA6300;
  uint64_t v2 = __p[2];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  int v3 = __p[1];
  if (v3) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  }

  operator delete(__p);
}

uint64_t std::__repeat_one_loop<char>::__exec(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -991;
  *(void *)(a2 + 80) = *(void *)(result + 8);
  return result;
}

void (__cdecl ***std::__alternate<char>::~__alternate(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_270EA6300;
  uint64_t v2 = a1[2];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  int v3 = a1[1];
  if (v3) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  }
  return a1;
}

void std::__alternate<char>::~__alternate(void (__cdecl ***__p)(std::__owns_one_state<char> *__hidden this))
{
  *std::vector<std::csub_match> __p = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_270EA6300;
  uint64_t v2 = __p[2];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  int v3 = __p[1];
  if (v3) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  }

  operator delete(__p);
}

void std::__alternate<char>::__exec(uint64_t a1, _DWORD *a2)
{
  *a2 = -992;
}

uint64_t std::__alternate<char>::__exec_split(uint64_t result, int a2, uint64_t a3)
{
  *(_DWORD *)a3 = -994;
  uint64_t v3 = 8;
  if (a2) {
    uint64_t v3 = 16;
  }
  *(void *)(a3 + 80) = *(void *)(result + v3);
  return result;
}

uint64_t std::__empty_non_own_state<char>::__exec(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -994;
  *(void *)(a2 + 80) = *(void *)(result + 8);
  return result;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x263E69360](exception, 15);
  __cxa_throw(exception, MEMORY[0x263F8C190], MEMORY[0x263F8C098]);
}

void sub_2636AA22C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_nondupl_RE<std::__wrap_iter<char const*>>(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v6 = std::basic_regex<char,std::regex_traits<char>>::__parse_one_char_or_coll_elem_RE<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, (char *)a2, a3);
  if ((char *)a2 != v6 || (char *)a2 == a3 || (char *)(a2 + 1) == a3 || *(unsigned char *)a2 != 92) {
    return v6;
  }
  int v8 = *(unsigned __int8 *)(a2 + 1);
  if (v8 == 40)
  {
    uint64_t v9 = (std::basic_regex<char> *)(a2 + 2);
    if ((*(unsigned char *)(a1 + 24) & 2) != 0)
    {
      int v11 = *(_DWORD *)(a1 + 28);
    }
    else
    {
      uint64_t v10 = operator new(0x18uLL);
      int v11 = *(_DWORD *)(a1 + 28) + 1;
      *(_DWORD *)(a1 + 28) = v11;
      uint64_t v12 = *(void *)(a1 + 56);
      uint64_t v13 = *(void *)(v12 + 8);
      void *v10 = &unk_270EA6210;
      v10[1] = v13;
      *((_DWORD *)v10 + 4) = v11;
      *(void *)(v12 + 8) = v10;
      *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
    }
    do
    {
      if (v9 == (std::basic_regex<char> *)a3) {
        goto LABEL_23;
      }
      uint64_t v14 = v9;
      uint64_t v15 = *(std::__owns_one_state<char> **)(a1 + 56);
      int v16 = *(_DWORD *)(a1 + 28);
      uint64_t v17 = (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_nondupl_RE<std::__wrap_iter<char const*>>(a1, v14, a3);
      if (v14 == v17) {
        break;
      }
      uint64_t v9 = std::basic_regex<char,std::regex_traits<char>>::__parse_RE_dupl_symbol<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, v17, (std::basic_regex<char> *)a3, v15, (v16 + 1), (*(_DWORD *)(a1 + 28) + 1));
    }
    while (v14 != v9);
    if ((char *)&v14->__traits_.__loc_.__locale_ + 1 == a3
      || LOBYTE(v14->__traits_.__loc_.__locale_) != 92
      || BYTE1(v14->__traits_.__loc_.__locale_) != 41)
    {
LABEL_23:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
    }
    uint64_t v6 = (char *)v14 + 2 * (BYTE1(v14->__traits_.__loc_.__locale_) == 41);
    if ((*(unsigned char *)(a1 + 24) & 2) == 0)
    {
      uint64_t v18 = operator new(0x18uLL);
      uint64_t v19 = *(void *)(a1 + 56);
      uint64_t v20 = *(void *)(v19 + 8);
      void *v18 = &unk_270EA6258;
      v18[1] = v20;
      *((_DWORD *)v18 + 4) = v11;
      *(void *)(v19 + 8) = v18;
      *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
      return v6;
    }
    return v6;
  }
  if ((v8 & 0xF8) != 0x30 && (v8 & 0xFE) != 0x38 || (v8 - 49) > 8) {
    return v6;
  }
  if ((v8 - 48) > *(_DWORD *)(a1 + 28)) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
  }
  std::basic_regex<char,std::regex_traits<char>>::__push_back_ref((std::basic_regex<char> *)a1, v8 - 48);
  return (char *)(a2 + 2);
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_RE_dupl_symbol<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, std::basic_regex<char> *this, std::basic_regex<char> *a3, std::__owns_one_state<char> *a4, size_t __mexp_begin, size_t __mexp_end)
{
  if (this == a3) {
    return this;
  }
  int locale_low = LOBYTE(this->__traits_.__loc_.__locale_);
  if (locale_low == 42)
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_loop(a1, 0, 0xFFFFFFFFFFFFFFFFLL, a4, __mexp_begin, __mexp_end, 1);
    return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
  }
  uint64_t v9 = (unsigned __int8 *)a3;
  if ((std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1) == a3
    || locale_low != 92
    || BYTE1(this->__traits_.__loc_.__locale_) != 123)
  {
    return this;
  }
  uint64_t v10 = (std::basic_regex<char> *)((char *)this + 2 * (BYTE1(this->__traits_.__loc_.__locale_) == 123));
  if (v10 == a3) {
    goto LABEL_45;
  }
  int v11 = LOBYTE(v10->__traits_.__loc_.__locale_);
  if ((v11 & 0xF8) != 0x30 && (v11 & 0xFE) != 0x38) {
    goto LABEL_45;
  }
  int v12 = v11 - 48;
  uint64_t v13 = (std::basic_regex<char> *)((char *)&v10->__traits_.__loc_.__locale_ + 1);
  if ((std::basic_regex<char> *)((char *)&v10->__traits_.__loc_.__locale_ + 1) == a3)
  {
LABEL_15:
    uint64_t v13 = a3;
  }
  else
  {
    while (1)
    {
      int v14 = LOBYTE(v13->__traits_.__loc_.__locale_);
      if ((v14 & 0xF8) != 0x30 && (v14 & 0xFE) != 0x38) {
        break;
      }
      if (v12 >= 214748364) {
        goto LABEL_45;
      }
      int v12 = v14 + 10 * v12 - 48;
      uint64_t v13 = (std::basic_regex<char> *)((char *)v13 + 1);
      if (v13 == a3) {
        goto LABEL_15;
      }
    }
  }
  if (v13 == v10) {
    goto LABEL_45;
  }
  if (v13 == a3) {
LABEL_46:
  }
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>();
  uint64_t v15 = (std::basic_regex<char> *)((char *)&v13->__traits_.__loc_.__locale_ + 1);
  int v16 = LOBYTE(v13->__traits_.__loc_.__locale_);
  if (v16 != 44)
  {
    if (v15 != a3 && v16 == 92 && LOBYTE(v15->__traits_.__loc_.__locale_) == 125)
    {
      uint64_t v19 = (unsigned __int8 *)&v13->__traits_.__loc_.__locale_ + 2;
      std::basic_regex<char,std::regex_traits<char>>::__push_loop(a1, v12, v12, a4, __mexp_begin, __mexp_end, 1);
      return (std::basic_regex<char> *)v19;
    }
    goto LABEL_46;
  }
  if (v15 == a3) {
    goto LABEL_46;
  }
  int v17 = LOBYTE(v15->__traits_.__loc_.__locale_);
  if ((v17 & 0xF8) == 0x30 || (v17 & 0xFE) == 0x38)
  {
    int v18 = v17 - 48;
    uint64_t v15 = (std::basic_regex<char> *)((char *)&v13->__traits_.__loc_.__locale_ + 2);
    if ((std::basic_regex<char> *)((char *)&v13->__traits_.__loc_.__locale_ + 2) == a3)
    {
LABEL_37:
      uint64_t v15 = a3;
      goto LABEL_40;
    }
    while (1)
    {
      int v17 = LOBYTE(v15->__traits_.__loc_.__locale_);
      if ((v17 & 0xF8) != 0x30 && (v17 & 0xFE) != 0x38) {
        break;
      }
      if (v18 >= 214748364) {
        goto LABEL_45;
      }
      int v18 = v17 + 10 * v18 - 48;
      uint64_t v15 = (std::basic_regex<char> *)((char *)v15 + 1);
      if (v15 == a3) {
        goto LABEL_37;
      }
    }
  }
  else
  {
    int v18 = -1;
  }
  if (v15 == a3)
  {
    uint64_t v20 = (unsigned __int8 *)v15;
    uint64_t v15 = a3;
    uint64_t v9 = v20;
  }
  else if ((std::basic_regex<char> *)((char *)&v15->__traits_.__loc_.__locale_ + 1) == a3 || v17 != 92)
  {
    uint64_t v9 = (unsigned __int8 *)v15;
  }
  else
  {
    uint64_t v9 = (unsigned __int8 *)v15 + 2 * (BYTE1(v15->__traits_.__loc_.__locale_) == 125);
  }
LABEL_40:
  if (v15 == (std::basic_regex<char> *)v9) {
    goto LABEL_46;
  }
  if (v18 != -1)
  {
    if (v18 >= v12)
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_loop(a1, v12, v18, a4, __mexp_begin, __mexp_end, 1);
      return (std::basic_regex<char> *)v9;
    }
LABEL_45:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>();
  }
  std::basic_regex<char,std::regex_traits<char>>::__push_loop(a1, v12, 0xFFFFFFFFFFFFFFFFLL, a4, __mexp_begin, __mexp_end, 1);
  return (std::basic_regex<char> *)v9;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_one_char_or_coll_elem_RE<std::__wrap_iter<char const*>>(std::basic_regex<char> *this, char *a2, char *a3)
{
  if (a2 != a3)
  {
    uint64_t v6 = a2 + 1;
    int v5 = *a2;
    if (a2 + 1 != a3 || v5 != 36)
    {
      if ((v5 - 46) > 0x2E || ((1 << (v5 - 46)) & 0x600000000001) == 0)
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(this, v5);
        return a2 + 1;
      }
      if (v6 != a3 && v5 == 92)
      {
        int v9 = *v6;
        if ((v9 - 36) <= 0x3A && ((1 << (v9 - 36)) & 0x580000000000441) != 0)
        {
          std::basic_regex<char,std::regex_traits<char>>::__push_char(this, v9);
          return a2 + 2;
        }
      }
      if (*a2 == 46)
      {
        uint64_t v10 = (std::__node<char> *)operator new(0x10uLL);
        std::__split_buffer<std::string>::pointer end = this->__end_;
        first = end->__first_;
        v10->__vftable = (std::__node<char>_vtbl *)&unk_270EA6408;
        v10[1].__vftable = (std::__node<char>_vtbl *)first;
        end->__first_ = v10;
        this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
        return a2 + 1;
      }
    }
  }

  return std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<std::__wrap_iter<char const*>>((uint64_t)this, a2, a3);
}

void (__cdecl ***std::__match_any<char>::~__match_any(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  uint64_t v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

void std::__match_any<char>::~__match_any(void (__cdecl ***__p)(std::__owns_one_state<char> *__hidden this))
{
  uint64_t v2 = __p[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }

  operator delete(__p);
}

uint64_t std::__match_any<char>::__exec(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(unsigned char **)(a2 + 16);
  if (v2 == *(unsigned char **)(a2 + 24) || !*v2)
  {
    *(_DWORD *)a2 = -993;
    *(void *)(a2 + 80) = 0;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(void *)(a2 + 16) = v2 + 1;
    *(void *)(a2 + 80) = *(void *)(result + 8);
  }
  return result;
}

BOOL std::basic_regex<char,std::regex_traits<char>>::__test_back_ref(std::basic_regex<char> *this, char a2)
{
  if ((a2 & 0xF8) != 0x30 && (a2 & 0xFE) != 0x38 || a2 - 49 > 8) {
    return 0;
  }
  if (a2 - 48 > this->__marked_count_) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
  }
  std::basic_regex<char,std::regex_traits<char>>::__push_back_ref(this, a2 - 48);
  return 1;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<std::__wrap_iter<char const*>>(uint64_t a1, std::basic_regex<char> *a2, std::basic_regex<char> *a3)
{
  uint64_t v6 = *(std::__owns_one_state<char> **)(a1 + 56);
  int v7 = *(_DWORD *)(a1 + 28);
  int v8 = std::basic_regex<char,std::regex_traits<char>>::__parse_ORD_CHAR_ERE<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, a2, a3);
  if (v8 == a2)
  {
    int v8 = (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_QUOTED_CHAR_ERE<std::__wrap_iter<char const*>>(a1, (std::basic_regex<char>::value_type *)a2, (std::basic_regex<char>::value_type *)a3);
    if (v8 == a2)
    {
      if (a2 == a3 || LOBYTE(a2->__traits_.__loc_.__locale_) != 46)
      {
        int v8 = (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<std::__wrap_iter<char const*>>(a1, (char *)a2, (char *)a3);
      }
      else
      {
        int v9 = operator new(0x10uLL);
        uint64_t v10 = *(void *)(a1 + 56);
        uint64_t v11 = *(void *)(v10 + 8);
        *int v9 = &unk_270EA6408;
        v9[1] = v11;
        *(void *)(v10 + 8) = v9;
        *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
        int v8 = (std::basic_regex<char> *)((char *)&a2->__traits_.__loc_.__locale_ + 1);
      }
    }
  }
  if (v8 != a2 || v8 == a3)
  {
LABEL_23:
    if (v8 != a2) {
      goto LABEL_24;
    }
    return a2;
  }
  int locale_low = SLOBYTE(a2->__traits_.__loc_.__locale_);
  if (locale_low == 36)
  {
    uint64_t v13 = operator new(0x18uLL);
    BOOL v14 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
    uint64_t v15 = *(void *)(a1 + 56);
    v13[1] = *(void *)(v15 + 8);
    int v16 = &unk_270EA5EF8;
    goto LABEL_14;
  }
  if (locale_low == 40)
  {
    if ((*(unsigned char *)(a1 + 24) & 2) != 0)
    {
      int v18 = *(_DWORD *)(a1 + 28);
    }
    else
    {
      int v17 = operator new(0x18uLL);
      int v18 = *(_DWORD *)(a1 + 28) + 1;
      *(_DWORD *)(a1 + 28) = v18;
      uint64_t v19 = *(void *)(a1 + 56);
      uint64_t v20 = *(void *)(v19 + 8);
      void *v17 = &unk_270EA6210;
      v17[1] = v20;
      *((_DWORD *)v17 + 4) = v18;
      *(void *)(v19 + 8) = v17;
      *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
    }
    ++*(_DWORD *)(a1 + 36);
    int v21 = (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<std::__wrap_iter<char const*>>(a1, (char *)&a2->__traits_.__loc_.__locale_ + 1, a3);
    if (v21 == a3 || (uint64_t v22 = v21, LOBYTE(v21->__traits_.__loc_.__locale_) != 41)) {
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
    }
    if ((*(unsigned char *)(a1 + 24) & 2) == 0)
    {
      uint64_t v23 = operator new(0x18uLL);
      uint64_t v24 = *(void *)(a1 + 56);
      uint64_t v25 = *(void *)(v24 + 8);
      *uint64_t v23 = &unk_270EA6258;
      v23[1] = v25;
      *((_DWORD *)v23 + 4) = v18;
      *(void *)(v24 + 8) = v23;
      *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
    }
    --*(_DWORD *)(a1 + 36);
    int v8 = (std::basic_regex<char> *)((char *)&v22->__traits_.__loc_.__locale_ + 1);
    goto LABEL_23;
  }
  if (locale_low != 94) {
    return a2;
  }
  uint64_t v13 = operator new(0x18uLL);
  BOOL v14 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
  uint64_t v15 = *(void *)(a1 + 56);
  v13[1] = *(void *)(v15 + 8);
  int v16 = &unk_270EA5EB0;
LABEL_14:
  *uint64_t v13 = v16;
  *((unsigned char *)v13 + 16) = v14;
  *(void *)(v15 + 8) = v13;
  *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
  int v8 = (std::basic_regex<char> *)((char *)&a2->__traits_.__loc_.__locale_ + 1);
LABEL_24:
  size_t v26 = (*(_DWORD *)(a1 + 28) + 1);

  return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__wrap_iter<char const*>>(a1, v8, a3, v6, (v7 + 1), v26);
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_ORD_CHAR_ERE<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, std::basic_regex<char> *this, std::basic_regex<char> *a3)
{
  if (this == a3) {
    return this;
  }
  switch(LOBYTE(this->__traits_.__loc_.__locale_))
  {
    case '$':
    case '(':
    case '*':
    case '+':
    case '.':
    case '?':
    case '[':
    case '\\':
    case '^':
    case '{':
    case '|':
      return this;
    case ')':
      if (a1->__open_count_) {
        return this;
      }
      break;
    default:
      break;
  }
  std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, (std::basic_regex<char>::value_type)this->__traits_.__loc_.__locale_);
  return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
}

std::basic_regex<char>::value_type *std::basic_regex<char,std::regex_traits<char>>::__parse_QUOTED_CHAR_ERE<std::__wrap_iter<char const*>>(uint64_t a1, std::basic_regex<char>::value_type *a2, std::basic_regex<char>::value_type *a3)
{
  uint64_t v3 = a2;
  if (a2 == a3) {
    return v3;
  }
  int v4 = a2 + 1;
  if (v3 + 1 == a3 || *v3 != 92) {
    return v3;
  }
  std::basic_regex<char>::value_type v5 = *v4;
  switch(*v4)
  {
    case '$':
    case '(':
    case ')':
    case '*':
    case '+':
    case '.':
    case '?':
    case '[':
    case '\\':
    case '^':
    case '{':
    case '|':
    case '}':
      std::basic_regex<char,std::regex_traits<char>>::__push_char((std::basic_regex<char> *)a1, v5);
      v3 += 2;
      return v3;
    default:
      if ((*(_DWORD *)(a1 + 24) & 0x1F0) == 0x40)
      {
        uint64_t result = std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, v4, a3, 0);
      }
      else
      {
        BOOL v7 = std::basic_regex<char,std::regex_traits<char>>::__test_back_ref((std::basic_regex<char> *)a1, v5);
        uint64_t v8 = 2;
        if (!v7) {
          uint64_t v8 = 0;
        }
        uint64_t result = &v3[v8];
      }
      break;
  }
  return result;
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>(uint64_t a1, std::sub_match<const char *> *a2, std::sub_match<const char *> *a3, std::vector<std::csub_match> *this, int a5)
{
  if ((a5 & 0x80) != 0) {
    int v9 = a5 & 0xFFA;
  }
  else {
    int v9 = a5;
  }
  int v10 = *(_DWORD *)(a1 + 28);
  this[1].__begin_ = a3;
  uint64_t v11 = (const std::vector<std::csub_match>::value_type *)&this[1];
  this[1].__end_ = a3;
  LOBYTE(this[1].__end_cap_.__value_) = 0;
  std::vector<std::sub_match<char const*>>::assign(this, (v10 + 1), (std::vector<std::csub_match>::const_reference)&this[1]);
  this[2].__begin_ = a2;
  this[2].__end_ = a2;
  LOBYTE(this[2].__end_cap_.__value_) = 0;
  *(std::pair<const char *, const char *> *)&this[3].__begin_ = v11->std::pair<const char *, const char *>;
  LOBYTE(this[3].__end_cap_.__value_) = this[1].__end_cap_.__value_;
  if ((v9 & 0x800) == 0) {
    this[4].__end_ = a2;
  }
  LOBYTE(this[4].__begin_) = 1;
  if ((*(_WORD *)(a1 + 24) & 0x1F0) == 0)
  {
    if (std::basic_regex<char,std::regex_traits<char>>::__match_at_start_ecma<std::allocator<std::sub_match<char const*>>>(a1, (const char *)a2, (const char *)a3, (uint64_t *)this, v9, (v9 & 0x800) == 0))goto LABEL_28; {
    goto LABEL_13;
    }
  }
  if (*(_DWORD *)(a1 + 28))
  {
    if (std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_subs<std::allocator<std::sub_match<char const*>>>(a1, (const char *)a2, (const char *)a3, (uint64_t *)this, v9, (v9 & 0x800) == 0))goto LABEL_28; {
LABEL_13:
    }
    if (a2 != a3 && (v9 & 0x40) == 0)
    {
      int v12 = v9 | 0x80;
      for (unint64_t i = (char *)&a2->first + 1; i != (const char *)a3; ++i)
      {
        std::vector<std::sub_match<char const*>>::assign(this, 0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_ - (char *)this->__begin_) >> 3), v11);
        if ((*(_WORD *)(a1 + 24) & 0x1F0) != 0)
        {
          if (*(_DWORD *)(a1 + 28))
          {
            if (std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_subs<std::allocator<std::sub_match<char const*>>>(a1, i, (const char *)a3, (uint64_t *)this, v12, 0))goto LABEL_28; {
          }
            }
          else if (std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_nosubs<std::allocator<std::sub_match<char const*>>>(a1, (uint64_t)i, (uint64_t)a3, (uint64_t *)this, v12, 0))
          {
            goto LABEL_28;
          }
        }
        else if (std::basic_regex<char,std::regex_traits<char>>::__match_at_start_ecma<std::allocator<std::sub_match<char const*>>>(a1, i, (const char *)a3, (uint64_t *)this, v12, 0))
        {
          goto LABEL_28;
        }
        std::vector<std::sub_match<char const*>>::assign(this, 0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_ - (char *)this->__begin_) >> 3), v11);
      }
      std::vector<std::sub_match<char const*>>::assign(this, 0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_ - (char *)this->__begin_) >> 3), v11);
      if ((*(_WORD *)(a1 + 24) & 0x1F0) != 0)
      {
        if (*(_DWORD *)(a1 + 28))
        {
          if (std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_subs<std::allocator<std::sub_match<char const*>>>(a1, (const char *)a3, (const char *)a3, (uint64_t *)this, v12, 0))goto LABEL_28; {
        }
          }
        else if (std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_nosubs<std::allocator<std::sub_match<char const*>>>(a1, (uint64_t)a3, (uint64_t)a3, (uint64_t *)this, v12, 0))
        {
          goto LABEL_28;
        }
      }
      else if (std::basic_regex<char,std::regex_traits<char>>::__match_at_start_ecma<std::allocator<std::sub_match<char const*>>>(a1, (const char *)a3, (const char *)a3, (uint64_t *)this, v12, 0))
      {
        goto LABEL_28;
      }
    }
    uint64_t result = 0;
    this->__end_ = this->__begin_;
    return result;
  }
  if ((std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_nosubs<std::allocator<std::sub_match<char const*>>>(a1, (uint64_t)a2, (uint64_t)a3, (uint64_t *)this, v9, (v9 & 0x800) == 0) & 1) == 0)goto LABEL_13; {
LABEL_28:
  }
  if (this->__end_ == this->__begin_) {
    std::vector<std::csub_match>::pointer begin = (std::vector<std::csub_match>::pointer)v11;
  }
  else {
    std::vector<std::csub_match>::pointer begin = this->__begin_;
  }
  first = (std::sub_match<const char *> *)begin->first;
  this[2].__end_ = (std::vector<std::csub_match>::pointer)begin->first;
  LOBYTE(this[2].__end_cap_.__value_) = this[2].__begin_ != first;
  second = (std::sub_match<const char *> *)begin->second;
  this[3].__begin_ = second;
  LOBYTE(this[3].__end_cap_.__value_) = second != this[3].__end_;
  return 1;
}

void std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>(std::vector<std::ssub_match> *this, uint64_t a2, std::sub_match<std::__wrap_iter<const char *>> *a3, uint64_t *a4, char a5)
{
  uint64_t v10 = a4[6];
  unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 3);
  std::vector<std::ssub_match>::pointer begin = this->__begin_;
  std::__split_buffer<std::string>::pointer end = this->__end_;
  unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)this->__begin_) >> 3);
  if (v11 <= v14)
  {
    if (v11 < v14)
    {
      std::__split_buffer<std::string>::pointer end = (std::vector<std::ssub_match>::pointer)((char *)begin + 8 * ((a4[1] - *a4) >> 3));
      this->__end_ = end;
    }
  }
  else
  {
    std::vector<std::sub_match<std::__wrap_iter<char const*>>>::__append(this, v11 - v14);
    std::vector<std::ssub_match>::pointer begin = this->__begin_;
    std::__split_buffer<std::string>::pointer end = this->__end_;
  }
  if (end != begin)
  {
    uint64_t v15 = 0;
    unint64_t v16 = 0;
    uint64_t v18 = *a4;
    uint64_t v17 = a4[1];
    do
    {
      unint64_t v19 = 0xAAAAAAAAAAAAAAABLL * ((v17 - v18) >> 3);
      uint64_t v20 = (void *)(v18 + v15 * 24);
      if (v19 <= v16) {
        int v21 = a4 + 3;
      }
      else {
        int v21 = v20;
      }
      begin[v15].first.__i_ = (std::__wrap_iter<const char *>::iterator_type)(a2 + *v21 - v10);
      if (0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 3) <= v16) {
        uint64_t v22 = (uint64_t)(a4 + 3);
      }
      else {
        uint64_t v22 = *a4 + v15 * 24;
      }
      this->__begin_[v15].second.__i_ = (std::__wrap_iter<const char *>::iterator_type)(a2 + *(void *)(v22 + 8) - v10);
      uint64_t v18 = *a4;
      uint64_t v17 = a4[1];
      if (0xAAAAAAAAAAAAAAABLL * ((v17 - *a4) >> 3) <= v16) {
        uint64_t v23 = (uint64_t)(a4 + 3);
      }
      else {
        uint64_t v23 = *a4 + v15 * 24;
      }
      char v24 = *(unsigned char *)(v23 + 16);
      std::vector<std::ssub_match>::pointer begin = this->__begin_;
      std::vector<std::ssub_match>::pointer v25 = this->__end_;
      this->__begin_[v15].matched = v24;
      ++v16;
      ++v15;
    }
    while (v16 < 0xAAAAAAAAAAAAAAABLL * (((char *)v25 - (char *)begin) >> 3));
  }
  this[1].__begin_ = a3;
  this[1].__end_ = a3;
  LOBYTE(this[1].__end_cap_.__value_) = 0;
  size_t v26 = (std::sub_match<std::__wrap_iter<const char *>> *)(a2 + a4[6] - v10);
  this[2].__begin_ = v26;
  this[2].__end_ = (std::vector<std::ssub_match>::pointer)(a2 + a4[7] - v10);
  LOBYTE(this[2].__end_cap_.__value_) = *((unsigned char *)a4 + 64);
  this[3].__begin_ = (std::vector<std::ssub_match>::pointer)(a2 + a4[9] - v10);
  this[3].__end_ = (std::vector<std::ssub_match>::pointer)(a2 + a4[10] - v10);
  LOBYTE(this[3].__end_cap_.__value_) = *((unsigned char *)a4 + 88);
  if ((a5 & 1) == 0) {
    this[4].__end_ = v26;
  }
  LOBYTE(this[4].__begin_) = *((unsigned char *)a4 + 96);
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_nosubs<std::allocator<std::sub_match<char const*>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, int a5, char a6)
{
  long long v100 = 0u;
  long long v101 = 0u;
  long long v99 = 0u;
  uint64_t v6 = *(void *)(a1 + 40);
  if (!v6)
  {
LABEL_79:
    uint64_t v85 = (void **)*((void *)&v99 + 1);
    int v86 = (void **)v100;
    *((void *)&v101 + 1) = 0;
    unint64_t v87 = v100 - *((void *)&v99 + 1);
    if ((void)v100 - *((void *)&v99 + 1) < 0x11uLL) {
      goto LABEL_81;
    }
    do
    {
LABEL_80:
      operator delete(*v85);
      int v86 = (void **)v100;
      uint64_t v85 = (void **)(*((void *)&v99 + 1) + 8);
      *((void *)&v99 + 1) = v85;
      unint64_t v87 = v100 - (void)v85;
    }
    while ((void)v100 - (void)v85 > 0x10uLL);
    goto LABEL_81;
  }
  *(_DWORD *)v98 = 0;
  memset(&v98[8], 0, 85);
  std::deque<std::__state<char>>::__add_back_capacity((uint64_t)&v99);
  unint64_t v11 = *(void *)(*((void *)&v99 + 1) + 8 * (((void)v101 + *((void *)&v101 + 1)) / 0x2AuLL))
      + 96 * (((void)v101 + *((void *)&v101 + 1)) % 0x2AuLL);
  long long v12 = *(_OWORD *)&v98[16];
  *(_OWORD *)unint64_t v11 = *(_OWORD *)v98;
  *(_OWORD *)(v11 + 16) = v12;
  *(void *)(v11 + 40) = 0;
  *(void *)(v11 + 48) = 0;
  *(void *)(v11 + 32) = 0;
  memset(&v98[32], 0, 24);
  *(void *)(v11 + 56) = 0;
  *(void *)(v11 + 64) = 0;
  *(void *)(v11 + 72) = 0;
  memset(&v98[56], 0, 24);
  uint64_t v13 = *(void *)&v98[80];
  *(void *)(v11 + 85) = *(void *)&v98[85];
  *(void *)(v11 + 80) = v13;
  uint64_t v15 = *((void *)&v101 + 1);
  uint64_t v14 = v101;
  uint64_t v16 = ++*((void *)&v101 + 1);
  uint64_t v17 = *((void *)&v99 + 1);
  unint64_t v18 = *(unsigned int *)(a1 + 32);
  unint64_t v19 = v101 + v15;
  unint64_t v20 = 8 * (v19 / 0x2A);
  unint64_t v21 = 96 * (v19 % 0x2A);
  unint64_t v22 = *(void *)(*((void *)&v99 + 1) + v20) + v21;
  *(_DWORD *)unint64_t v22 = 0;
  *(void *)(v22 + 8) = a2;
  *(void *)(*(void *)(v17 + v20) + v21 + 16) = a2;
  *(void *)(*(void *)(v17 + v20) + v21 + 24) = a3;
  unint64_t v23 = *(void *)(v17 + v20) + v21;
  uint64_t v26 = *(void *)(v23 + 56);
  char v24 = (std::vector<std::pair<unsigned long, const char *>> *)(v23 + 56);
  uint64_t v25 = v26;
  unint64_t v27 = ((uint64_t)v24->__end_ - v26) >> 4;
  unint64_t v92 = a4;
  if (v18 <= v27)
  {
    if (v18 < v27) {
      v24->__end_ = (std::vector<std::pair<unsigned long, const char *>>::pointer)(v25 + 16 * v18);
    }
  }
  else
  {
    std::vector<std::pair<unsigned long,char const*>>::__append(v24, v18 - v27);
    uint64_t v16 = *((void *)&v101 + 1);
    uint64_t v14 = v101;
    uint64_t v17 = *((void *)&v99 + 1);
  }
  uint64_t v94 = 0;
  char v95 = 0;
  unsigned int v28 = 0;
  unint64_t v29 = v14 + v16 - 1;
  unint64_t v30 = 8 * (v29 / 0x2A);
  unint64_t v31 = 96 * (v29 % 0x2A);
  *(void *)(*(void *)(v17 + v30) + v31 + 80) = v6;
  uint64_t v93 = a3;
  uint64_t v32 = a3 - a2;
  unint64_t v33 = *(void *)(v17 + v30) + v31;
  *(_DWORD *)(v33 + 88) = a5;
  *(unsigned char *)(v33 + 92) = a6;
  while (2)
  {
    if ((++v28 & 0xFFF) == 0 && (int)(v28 >> 12) >= (int)v32) {
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)12>();
    }
    unint64_t v35 = v16 + v101 - 1;
    uint64_t v36 = *(void *)(*((void *)&v99 + 1) + 8 * (v35 / 0x2A));
    unint64_t v37 = v35 % 0x2A;
    uint64_t v38 = v36 + 96 * (v35 % 0x2A);
    unint64_t v40 = (void *)(v38 + 80);
    uint64_t v39 = *(void *)(v38 + 80);
    if (v39) {
      (*(void (**)(uint64_t, unint64_t))(*(void *)v39 + 16))(v39, v36 + 96 * v37);
    }
    switch(*(_DWORD *)v38)
    {
      case 0xFFFFFC18:
        uint64_t v41 = *(void *)(v36 + 96 * v37 + 16);
        if ((a5 & 0x20) != 0 && v41 == a2 || (a5 & 0x1000) != 0 && v41 != v93) {
          goto LABEL_21;
        }
        uint64_t v65 = v41 - *(void *)(v36 + 96 * v37 + 8);
        uint64_t v66 = v94;
        if ((v95 & (v94 >= v65)) == 0) {
          uint64_t v66 = v65;
        }
        if (v66 == v32)
        {
          size_t v67 = (void **)*((void *)&v99 + 1);
          uint64_t v68 = v100;
          if ((void)v100 == *((void *)&v99 + 1))
          {
            *((void *)&v101 + 1) = 0;
            unint64_t v82 = 0;
          }
          else
          {
            int v69 = (void *)(*((void *)&v99 + 1) + 8 * ((unint64_t)v101 / 0x2A));
            int v70 = (void *)(*v69 + 96 * ((unint64_t)v101 % 0x2A));
            unint64_t v71 = *(void *)(*((void *)&v99 + 1) + 8 * ((*((void *)&v101 + 1) + (void)v101) / 0x2AuLL))
                + 96 * ((*((void *)&v101 + 1) + (void)v101) % 0x2AuLL);
            if (v70 != (void *)v71)
            {
              do
              {
                uint64_t v72 = (void *)v70[7];
                if (v72)
                {
                  v70[8] = v72;
                  operator delete(v72);
                }
                int64_t v73 = (void *)v70[4];
                if (v73)
                {
                  v70[5] = v73;
                  operator delete(v73);
                }
                v70 += 12;
                if ((void *)((char *)v70 - *v69) == (void *)4032)
                {
                  unint64_t v74 = (void *)v69[1];
                  ++v69;
                  int v70 = v74;
                }
              }
              while (v70 != (void *)v71);
              size_t v67 = (void **)*((void *)&v99 + 1);
              uint64_t v68 = v100;
            }
            *((void *)&v101 + 1) = 0;
            unint64_t v82 = v68 - (void)v67;
            if (v82 >= 0x11)
            {
              do
              {
                operator delete(*v67);
                size_t v67 = (void **)(*((void *)&v99 + 1) + 8);
                *((void *)&v99 + 1) = v67;
                unint64_t v82 = v100 - (void)v67;
              }
              while ((void)v100 - (void)v67 > 0x10uLL);
            }
          }
          if (v82 >> 3 == 1)
          {
            uint64_t v83 = 21;
          }
          else
          {
            if (v82 >> 3 != 2)
            {
LABEL_76:
              char v95 = 1;
              uint64_t v94 = v32;
              goto LABEL_8;
            }
            uint64_t v83 = 42;
          }
          *(void *)&long long v101 = v83;
          goto LABEL_76;
        }
        uint64_t v94 = v66;
        unint64_t v75 = *((void *)&v101 + 1) + v101 - 1;
        uint64_t v76 = *(void *)(*((void *)&v99 + 1) + 8 * (v75 / 0x2A));
        unint64_t v77 = v75 % 0x2A;
        v78 = *(void **)(v76 + 96 * (v75 % 0x2A) + 56);
        if (v78)
        {
          *(void *)(v76 + 96 * v77 + 64) = v78;
          operator delete(v78);
        }
        uint64_t v79 = *(void **)(v76 + 96 * v77 + 32);
        if (v79)
        {
          *(void *)(v76 + 96 * v77 + 40) = v79;
          operator delete(v79);
        }
        uint64_t v80 = 42 * ((uint64_t)(v100 - *((void *)&v99 + 1)) >> 3) - 1;
        long long v81 = v101;
        --*((void *)&v101 + 1);
        if ((void)v100 == *((void *)&v99 + 1)) {
          uint64_t v80 = 0;
        }
        if ((unint64_t)(v80 - (*((void *)&v81 + 1) + v81) + 1) >= 0x54)
        {
          operator delete(*(void **)(v100 - 8));
          *(void *)&long long v100 = v100 - 8;
        }
        char v95 = 1;
LABEL_8:
        uint64_t v16 = *((void *)&v101 + 1);
        if (*((void *)&v101 + 1)) {
          continue;
        }
        if (v95)
        {
          uint64_t v84 = *v92;
          *(void *)uint64_t v84 = a2;
          *(void *)(v84 + 8) = a2 + v94;
          uint64_t v6 = 1;
          *(unsigned char *)(v84 + 16) = 1;
          goto LABEL_79;
        }
        uint64_t v6 = 0;
        uint64_t v85 = (void **)*((void *)&v99 + 1);
        int v86 = (void **)v100;
        *((void *)&v101 + 1) = 0;
        unint64_t v87 = v100 - *((void *)&v99 + 1);
        if ((void)v100 - *((void *)&v99 + 1) >= 0x11uLL) {
          goto LABEL_80;
        }
LABEL_81:
        unint64_t v88 = v87 >> 3;
        if (v88 == 1)
        {
          uint64_t v89 = 21;
LABEL_85:
          *(void *)&long long v101 = v89;
        }
        else if (v88 == 2)
        {
          uint64_t v89 = 42;
          goto LABEL_85;
        }
        if (v85 != v86)
        {
          do
          {
            int v90 = *v85++;
            operator delete(v90);
          }
          while (v85 != v86);
          if ((void)v100 != *((void *)&v99 + 1)) {
            *(void *)&long long v100 = v100 + ((*((void *)&v99 + 1) - v100 + 7) & 0xFFFFFFFFFFFFFFF8);
          }
        }
        if ((void)v99) {
          operator delete((void *)v99);
        }
        return v6;
      case 0xFFFFFC19:
      case 0xFFFFFC1E:
      case 0xFFFFFC21:
        goto LABEL_8;
      case 0xFFFFFC1D:
        unint64_t v49 = v101;
        if (!(void)v101)
        {
          std::deque<std::__state<char>>::__add_front_capacity((uint64_t)&v99);
          unint64_t v49 = v101;
        }
        unint64_t v50 = (void *)(*((void *)&v99 + 1) + 8 * (v49 / 0x2A));
        uint64_t v51 = *v50 + 96 * (v49 % 0x2A);
        if ((void)v100 == *((void *)&v99 + 1)) {
          uint64_t v51 = 0;
        }
        if (v51 == *v50) {
          uint64_t v51 = *(v50 - 1) + 4032;
        }
        long long v52 = *(_OWORD *)(v38 + 16);
        *(_OWORD *)(v51 - 96) = *(_OWORD *)v38;
        *(_OWORD *)(v51 - 80) = v52;
        uint64_t v53 = v36 + 96 * v37;
        *(void *)(v51 - 56) = 0;
        *(void *)(v51 - 48) = 0;
        *(void *)(v51 - 64) = 0;
        *(_OWORD *)(v51 - 64) = *(_OWORD *)(v53 + 32);
        *(void *)(v51 - 48) = *(void *)(v53 + 48);
        *(void *)(v53 + 32) = 0;
        *(void *)(v53 + 40) = 0;
        *(void *)(v53 + 48) = 0;
        *(void *)(v51 - 40) = 0;
        *(void *)(v51 - 32) = 0;
        *(void *)(v51 - 24) = 0;
        *(_OWORD *)(v51 - 40) = *(_OWORD *)(v53 + 56);
        *(void *)(v51 - 24) = *(void *)(v53 + 72);
        *(void *)(v53 + 56) = 0;
        *(void *)(v53 + 64) = 0;
        *(void *)(v53 + 72) = 0;
        uint64_t v54 = *v40;
        *(void *)(v51 - 11) = *(void *)(v38 + 85);
        *(void *)(v51 - 16) = v54;
        uint64_t v55 = *((void *)&v101 + 1);
        *(void *)&long long v101 = v101 - 1;
        ++*((void *)&v101 + 1);
        uint64_t v56 = v55 + v101;
        unint64_t v57 = (v55 + (uint64_t)v101) / 0x2AuLL;
        uint64_t v43 = *(void *)(*((void *)&v99 + 1) + 8 * v57);
        unint64_t v44 = v56 - 42 * v57;
        uint64_t v45 = *(void **)(v43 + 96 * v44 + 56);
        if (!v45) {
          goto LABEL_23;
        }
        goto LABEL_22;
      case 0xFFFFFC1F:
LABEL_21:
        unint64_t v42 = *((void *)&v101 + 1) + v101 - 1;
        uint64_t v43 = *(void *)(*((void *)&v99 + 1) + 8 * (v42 / 0x2A));
        unint64_t v44 = v42 % 0x2A;
        uint64_t v45 = *(void **)(v43 + 96 * (v42 % 0x2A) + 56);
        if (v45)
        {
LABEL_22:
          *(void *)(v43 + 96 * v44 + 64) = v45;
          operator delete(v45);
        }
LABEL_23:
        uint64_t v46 = *(void **)(v43 + 96 * v44 + 32);
        if (v46)
        {
          *(void *)(v43 + 96 * v44 + 40) = v46;
          operator delete(v46);
        }
        uint64_t v47 = 42 * ((uint64_t)(v100 - *((void *)&v99 + 1)) >> 3) - 1;
        long long v48 = v101;
        --*((void *)&v101 + 1);
        if ((void)v100 == *((void *)&v99 + 1)) {
          uint64_t v47 = 0;
        }
        if ((unint64_t)(v47 - (*((void *)&v48 + 1) + v48) + 1) >= 0x54)
        {
          operator delete(*(void **)(v100 - 8));
          *(void *)&long long v100 = v100 - 8;
        }
        goto LABEL_8;
      case 0xFFFFFC20:
        *(void *)&long long v58 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v58 + 1) = 0xAAAAAAAAAAAAAAAALL;
        *(_OWORD *)&v98[64] = v58;
        *(_OWORD *)&v98[80] = v58;
        *(_OWORD *)&v98[32] = v58;
        *(_OWORD *)&v98[48] = v58;
        *(_OWORD *)v98 = v58;
        *(_OWORD *)&v98[16] = v58;
        std::__state<char>::__state((uint64_t)v98, (long long *)(v36 + 96 * v37));
        (*(void (**)(void, uint64_t, unint64_t))(*(void *)*v40 + 24))(*v40, 1, v36 + 96 * v37);
        (*(void (**)(void, void, unsigned char *))(**(void **)&v98[80] + 24))(*(void *)&v98[80], 0, v98);
        uint64_t v59 = *((void *)&v99 + 1);
        if ((void)v100 == *((void *)&v99 + 1)) {
          uint64_t v60 = 0;
        }
        else {
          uint64_t v60 = 42 * ((uint64_t)(v100 - *((void *)&v99 + 1)) >> 3) - 1;
        }
        unint64_t v61 = *((void *)&v101 + 1) + v101;
        if (v60 == *((void *)&v101 + 1) + (void)v101)
        {
          std::deque<std::__state<char>>::__add_back_capacity((uint64_t)&v99);
          uint64_t v59 = *((void *)&v99 + 1);
          unint64_t v61 = *((void *)&v101 + 1) + v101;
        }
        unint64_t v62 = *(void *)(v59 + 8 * (v61 / 0x2A)) + 96 * (v61 % 0x2A);
        long long v63 = *(_OWORD *)&v98[16];
        *(_OWORD *)unint64_t v62 = *(_OWORD *)v98;
        *(_OWORD *)(v62 + 16) = v63;
        *(void *)(v62 + 40) = 0;
        *(void *)(v62 + 48) = 0;
        *(void *)(v62 + 32) = 0;
        *(_OWORD *)(v62 + 32) = *(_OWORD *)&v98[32];
        *(void *)(v62 + 48) = *(void *)&v98[48];
        memset(&v98[32], 0, 24);
        *(void *)(v62 + 56) = 0;
        *(void *)(v62 + 64) = 0;
        *(void *)(v62 + 72) = 0;
        *(_OWORD *)(v62 + 56) = *(_OWORD *)&v98[56];
        *(void *)(v62 + 72) = *(void *)&v98[72];
        memset(&v98[56], 0, 24);
        uint64_t v64 = *(void *)&v98[80];
        *(void *)(v62 + 85) = *(void *)&v98[85];
        *(void *)(v62 + 80) = v64;
        ++*((void *)&v101 + 1);
        if (*(void *)&v98[56])
        {
          *(void *)&v98[64] = *(void *)&v98[56];
          operator delete(*(void **)&v98[56]);
        }
        if (*(void *)&v98[32])
        {
          *(void *)&v98[40] = *(void *)&v98[32];
          operator delete(*(void **)&v98[32]);
        }
        goto LABEL_8;
      default:
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)16>();
    }
  }
}

void sub_2636ABEBC(_Unwind_Exception *a1)
{
  std::deque<std::__state<char>>::~deque[abi:ne180100]((void **)(v1 - 144));
  _Unwind_Resume(a1);
}

void sub_2636ABED0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  std::__state<char>::~__state((uint64_t *)va);
  std::deque<std::__state<char>>::~deque[abi:ne180100]((void **)(v9 - 144));
  _Unwind_Resume(a1);
}

void sub_2636ABF18(_Unwind_Exception *a1)
{
  std::deque<std::__state<char>>::~deque[abi:ne180100]((void **)(v1 - 144));
  _Unwind_Resume(a1);
}

void sub_2636ABF2C(_Unwind_Exception *a1)
{
  std::deque<std::__state<char>>::~deque[abi:ne180100]((void **)(v1 - 144));
  _Unwind_Resume(a1);
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_subs<std::allocator<std::sub_match<char const*>>>(uint64_t a1, const char *a2, const char *a3, uint64_t *a4, int a5, char a6)
{
  size_t v67 = 0;
  uint64_t v68 = 0;
  unint64_t v69 = 0;
  *(_DWORD *)&v66[36] = -1431655766;
  *(void *)uint64_t v64 = 0xAAAAAAAA00000000;
  memset(&v64[8], 0, 32);
  *(_OWORD *)uint64_t v65 = 0u;
  memset(v66, 0, 36);
  uint64_t v6 = *(void *)(a1 + 40);
  if (!v6) {
    goto LABEL_63;
  }
  __x.second = a3;
  *(void *)&__x.matched = 0xAAAAAAAAAAAAAA00;
  __x.first = a3;
  *(_DWORD *)unint64_t v62 = 0;
  memset(&v62[8], 0, 85);
  uint64_t v68 = std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>((void **)&v67, (uint64_t)v62);
  if (*(void *)&v62[56])
  {
    *(void *)&v62[64] = *(void *)&v62[56];
    operator delete(*(void **)&v62[56]);
  }
  if (*(void *)&v62[32])
  {
    *(void *)&v62[40] = *(void *)&v62[32];
    operator delete(*(void **)&v62[32]);
  }
  uint64_t v13 = v68;
  *((_DWORD *)v68 - 24) = 0;
  *((void *)v13 - 11) = a2;
  *((void *)v13 - 10) = a2;
  *((void *)v13 - 9) = a3;
  uint64_t v14 = *((void *)v13 - 8);
  unint64_t v15 = *(unsigned int *)(a1 + 28);
  unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((*((void *)v13 - 7) - v14) >> 3);
  if (v15 <= v16)
  {
    if (v15 < v16) {
      *((void *)v13 - 7) = v14 + 24 * v15;
    }
  }
  else
  {
    std::vector<std::sub_match<char const*>>::__append((std::vector<std::csub_match> *)(v13 - 64), v15 - v16, &__x);
    uint64_t v13 = v68;
  }
  uint64_t v17 = *((void *)v13 - 5);
  unint64_t v18 = *(unsigned int *)(a1 + 32);
  unint64_t v19 = (*((void *)v13 - 4) - v17) >> 4;
  long long v58 = a4;
  if (v18 <= v19)
  {
    if (v18 < v19) {
      *((void *)v13 - 4) = v17 + 16 * v18;
    }
  }
  else
  {
    std::vector<std::pair<unsigned long,char const*>>::__append((std::vector<std::pair<unsigned long, const char *>> *)(v13 - 40), v18 - v19);
    uint64_t v13 = v68;
  }
  char v61 = 0;
  unsigned int v20 = 0;
  unint64_t v21 = (const char *)(a3 - a2);
  *((void *)v13 - 2) = v6;
  *((_DWORD *)v13 - 2) = a5;
  *(v13 - 4) = a6;
  uint64_t v60 = 0;
  uint64_t v59 = a3;
  do
  {
    BOOL v22 = (++v20 & 0xFFF) != 0 || (int)(v20 >> 12) < (int)v21;
    if (!v22) {
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)12>();
    }
    char v24 = v13 - 16;
    uint64_t v23 = *((void *)v13 - 2);
    uint64_t v25 = v13 - 96;
    if (v23) {
      (*(void (**)(uint64_t, char *))(*(void *)v23 + 16))(v23, v13 - 96);
    }
    switch(*(_DWORD *)v25)
    {
      case 0xFFFFFC18:
        uint64_t v26 = (const char *)*((void *)v13 - 10);
        if ((a5 & 0x20) != 0 && v26 == a2 || (a5 & 0x1000) != 0 && v26 != v59) {
          goto LABEL_29;
        }
        uint64_t v34 = &v26[-*((void *)v13 - 11)];
        unint64_t v35 = v60;
        if ((v61 & ((uint64_t)v60 >= (uint64_t)v34)) == 0)
        {
          long long v36 = *((_OWORD *)v13 - 5);
          *(_OWORD *)uint64_t v64 = *(_OWORD *)v25;
          *(_OWORD *)&v64[16] = v36;
          if (v64 != v25)
          {
            std::vector<std::sub_match<char const*>>::__assign_with_size[abi:ne180100]<std::sub_match<char const*>*,std::sub_match<char const*>*>((char **)&v64[32], *((char **)v13 - 8), *((char **)v13 - 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)v13 - 7) - *((void *)v13 - 8)) >> 3));
            std::vector<std::pair<unsigned long,char const*>>::__assign_with_size[abi:ne180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>((uint64_t)v66, *((const double **)v13 - 5), *((const double **)v13 - 4), (uint64_t)(*((void *)v13 - 4) - *((void *)v13 - 5)) >> 4);
          }
          uint64_t v37 = *(void *)v24;
          *(void *)&v66[29] = *(void *)(v13 - 11);
          *(void *)&v66[24] = v37;
          unint64_t v35 = v34;
        }
        uint64_t v38 = v68;
        if (v35 == v21)
        {
          uint64_t v39 = v67;
          while (v38 != v39)
          {
            unint64_t v40 = (void *)*((void *)v38 - 5);
            if (v40)
            {
              *((void *)v38 - 4) = v40;
              operator delete(v40);
            }
            uint64_t v41 = (void *)*((void *)v38 - 8);
            if (v41)
            {
              *((void *)v38 - 7) = v41;
              operator delete(v41);
            }
            v38 -= 96;
          }
          uint64_t v68 = v39;
          char v61 = 1;
          uint64_t v60 = v21;
        }
        else
        {
          uint64_t v60 = v35;
          unint64_t v42 = (void *)*((void *)v68 - 5);
          if (v42)
          {
            *((void *)v68 - 4) = v42;
            operator delete(v42);
          }
          uint64_t v43 = (void *)*((void *)v38 - 8);
          if (v43)
          {
            *((void *)v38 - 7) = v43;
            operator delete(v43);
          }
          uint64_t v68 = v38 - 96;
          char v61 = 1;
        }
        break;
      case 0xFFFFFC1D:
      case 0xFFFFFC1E:
      case 0xFFFFFC21:
        break;
      case 0xFFFFFC1F:
LABEL_29:
        unint64_t v27 = v68;
        unsigned int v28 = (void *)*((void *)v68 - 5);
        if (v28)
        {
          *((void *)v68 - 4) = v28;
          operator delete(v28);
        }
        unint64_t v29 = (void *)*((void *)v27 - 8);
        if (v29)
        {
          *((void *)v27 - 7) = v29;
          operator delete(v29);
        }
        uint64_t v68 = v27 - 96;
        break;
      case 0xFFFFFC20:
        *(void *)&long long v30 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v30 + 1) = 0xAAAAAAAAAAAAAAAALL;
        *(_OWORD *)&v62[64] = v30;
        *(_OWORD *)&v62[80] = v30;
        *(_OWORD *)&v62[32] = v30;
        *(_OWORD *)&v62[48] = v30;
        *(_OWORD *)unint64_t v62 = v30;
        *(_OWORD *)&v62[16] = v30;
        std::__state<char>::__state((uint64_t)v62, (long long *)v13 - 6);
        (*(void (**)(void, uint64_t, char *))(**(void **)v24 + 24))(*(void *)v24, 1, v13 - 96);
        (*(void (**)(void, void, unsigned char *))(**(void **)&v62[80] + 24))(*(void *)&v62[80], 0, v62);
        unint64_t v31 = v68;
        if ((unint64_t)v68 >= v69)
        {
          uint64_t v68 = std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>((void **)&v67, (uint64_t)v62);
          if (*(void *)&v62[56])
          {
            *(void *)&v62[64] = *(void *)&v62[56];
            operator delete(*(void **)&v62[56]);
          }
        }
        else
        {
          long long v32 = *(_OWORD *)&v62[16];
          *(_OWORD *)uint64_t v68 = *(_OWORD *)v62;
          *((_OWORD *)v31 + 1) = v32;
          *((void *)v31 + 4) = 0;
          *((void *)v31 + 5) = 0;
          *((void *)v31 + 6) = 0;
          *((void *)v31 + 7) = 0;
          *((_OWORD *)v31 + 2) = *(_OWORD *)&v62[32];
          *((void *)v31 + 6) = *(void *)&v62[48];
          memset(&v62[32], 0, 24);
          *((void *)v31 + 8) = 0;
          *((void *)v31 + 9) = 0;
          *(_OWORD *)(v31 + 56) = *(_OWORD *)&v62[56];
          *((void *)v31 + 9) = *(void *)&v62[72];
          memset(&v62[56], 0, 24);
          uint64_t v33 = *(void *)&v62[80];
          *(void *)(v31 + 85) = *(void *)&v62[85];
          *((void *)v31 + 10) = v33;
          uint64_t v68 = v31 + 96;
        }
        if (*(void *)&v62[32])
        {
          *(void *)&v62[40] = *(void *)&v62[32];
          operator delete(*(void **)&v62[32]);
        }
        break;
      default:
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)16>();
    }
    uint64_t v13 = v68;
  }
  while (v67 != v68);
  if ((v61 & 1) == 0)
  {
LABEL_63:
    uint64_t v50 = 0;
    uint64_t v51 = *(void **)v66;
    if (!*(void *)v66) {
      goto LABEL_65;
    }
    goto LABEL_64;
  }
  uint64_t v44 = *v58;
  *(void *)uint64_t v44 = a2;
  *(void *)(v44 + 8) = &v60[(void)a2];
  *(unsigned char *)(v44 + 16) = 1;
  if (v65[0] != *(void **)&v64[32])
  {
    unint64_t v45 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v65[0] - *(void *)&v64[32]) >> 3);
    uint64_t v46 = (unsigned char *)(*(void *)&v64[32] + 16);
    unsigned int v47 = 1;
    do
    {
      uint64_t v48 = v44 + 24 * v47;
      *(_OWORD *)uint64_t v48 = *((_OWORD *)v46 - 1);
      char v49 = *v46;
      v46 += 24;
      *(unsigned char *)(v48 + 16) = v49;
      BOOL v22 = v45 > v47++;
    }
    while (v22);
  }
  uint64_t v50 = 1;
  uint64_t v51 = *(void **)v66;
  if (*(void *)v66)
  {
LABEL_64:
    *(void *)&v66[8] = v51;
    operator delete(v51);
  }
LABEL_65:
  if (*(void *)&v64[32])
  {
    v65[0] = *(void **)&v64[32];
    operator delete(*(void **)&v64[32]);
  }
  long long v52 = v67;
  if (v67)
  {
    uint64_t v53 = v68;
    uint64_t v54 = v67;
    if (v68 != v67)
    {
      do
      {
        uint64_t v55 = (void *)*((void *)v53 - 5);
        if (v55)
        {
          *((void *)v53 - 4) = v55;
          operator delete(v55);
        }
        uint64_t v56 = (void *)*((void *)v53 - 8);
        if (v56)
        {
          *((void *)v53 - 7) = v56;
          operator delete(v56);
        }
        v53 -= 96;
      }
      while (v53 != v52);
      uint64_t v54 = v67;
    }
    uint64_t v68 = v52;
    operator delete(v54);
  }
  return v50;
}

void sub_2636AC560(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  std::__state<char>::~__state(&a33);
  std::vector<std::__state<char>>::~vector[abi:ne180100]((void **)(v33 - 120));
  _Unwind_Resume(a1);
}

void std::deque<std::__state<char>>::clear(void *a1)
{
  uint64_t v2 = (void **)a1[1];
  uint64_t v3 = (void **)a1[2];
  if (v3 == v2)
  {
    a1[5] = 0;
    unint64_t v11 = 0;
  }
  else
  {
    unint64_t v4 = a1[4];
    std::basic_regex<char>::value_type v5 = &v2[v4 / 0x2A];
    uint64_t v6 = (char *)*v5 + 96 * (v4 % 0x2A);
    unint64_t v7 = (unint64_t)v2[(a1[5] + v4) / 0x2A] + 96 * ((a1[5] + v4) % 0x2A);
    if (v6 != (char *)v7)
    {
      do
      {
        uint64_t v8 = (void *)*((void *)v6 + 7);
        if (v8)
        {
          *((void *)v6 + 8) = v8;
          operator delete(v8);
        }
        uint64_t v9 = (void *)*((void *)v6 + 4);
        if (v9)
        {
          *((void *)v6 + 5) = v9;
          operator delete(v9);
        }
        v6 += 96;
        if (v6 - (unsigned char *)*v5 == 4032)
        {
          uint64_t v10 = (char *)v5[1];
          ++v5;
          uint64_t v6 = v10;
        }
      }
      while (v6 != (char *)v7);
      uint64_t v2 = (void **)a1[1];
      uint64_t v3 = (void **)a1[2];
    }
    a1[5] = 0;
    unint64_t v11 = (char *)v3 - (char *)v2;
    if (v11 >= 0x11)
    {
      do
      {
        operator delete(*v2);
        uint64_t v12 = a1[2];
        uint64_t v2 = (void **)(a1[1] + 8);
        a1[1] = v2;
        unint64_t v11 = v12 - (void)v2;
      }
      while (v11 > 0x10);
    }
  }
  if (v11 >> 3 == 1)
  {
    uint64_t v13 = 21;
  }
  else
  {
    if (v11 >> 3 != 2) {
      return;
    }
    uint64_t v13 = 42;
  }
  a1[4] = v13;
}

void **std::deque<std::__state<char>>::~deque[abi:ne180100](void **a1)
{
  std::deque<std::__state<char>>::clear(a1);
  uint64_t v2 = (void **)a1[1];
  uint64_t v3 = (void **)a1[2];
  if (v2 != v3)
  {
    do
    {
      unint64_t v4 = *v2++;
      operator delete(v4);
    }
    while (v2 != v3);
    uint64_t v6 = a1[1];
    std::basic_regex<char>::value_type v5 = a1[2];
    if (v5 != v6) {
      a1[2] = &v5[(v6 - v5 + 7) & 0xFFFFFFFFFFFFFFF8];
    }
  }
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::deque<std::__state<char>>::__add_back_capacity(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 32);
  BOOL v3 = v2 >= 0x2A;
  unint64_t v4 = v2 - 42;
  if (v3)
  {
    *(void *)(a1 + 32) = v4;
    uint64_t v6 = *(void **)(a1 + 8);
    std::basic_regex<char>::value_type v5 = *(char **)(a1 + 16);
    unint64_t v7 = (char *)(v6 + 1);
    uint64_t v8 = *v6;
    *(void *)(a1 + 8) = v6 + 1;
    if (v5 != *(char **)(a1 + 24))
    {
LABEL_78:
      *(void *)std::basic_regex<char>::value_type v5 = v8;
      *(void *)(a1 + 16) += 8;
      return;
    }
    uint64_t v9 = *(char **)a1;
    uint64_t v10 = (uint64_t)&v7[-*(void *)a1];
    if ((unint64_t)v7 <= *(void *)a1)
    {
      unint64_t v32 = (v5 - v9) >> 2;
      if (v5 == v9) {
        unint64_t v32 = 1;
      }
      if (!(v32 >> 61))
      {
        unint64_t v33 = v32 >> 2;
        uint64_t v34 = 8 * v32;
        unint64_t v35 = (char *)operator new(8 * v32);
        long long v36 = &v35[8 * v33];
        uint64_t v37 = &v35[v34];
        int64_t v39 = v5 - v7;
        BOOL v38 = v5 == v7;
        std::basic_regex<char>::value_type v5 = v36;
        if (!v38)
        {
          std::basic_regex<char>::value_type v5 = &v36[v39 & 0xFFFFFFFFFFFFFFF8];
          unint64_t v40 = v39 - 8;
          if ((unint64_t)(v39 - 8) >= 0x38)
          {
            int64_t v73 = &v35[8 * v33];
            uint64_t v41 = v73;
            if ((unint64_t)(v73 - v7) >= 0x20)
            {
              uint64_t v74 = (v40 >> 3) + 1;
              uint64_t v75 = 8 * (v74 & 0x3FFFFFFFFFFFFFFCLL);
              uint64_t v41 = &v36[v75];
              v7 += v75;
              uint64_t v76 = (long long *)(v6 + 3);
              unint64_t v77 = v73 + 16;
              uint64_t v78 = v74 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v79 = *v76;
                *(v77 - 1) = *(v76 - 1);
                _OWORD *v77 = v79;
                v76 += 2;
                v77 += 2;
                v78 -= 4;
              }
              while (v78);
              if (v74 == (v74 & 0x3FFFFFFFFFFFFFFCLL)) {
                goto LABEL_76;
              }
            }
          }
          else
          {
            uint64_t v41 = &v35[8 * v33];
          }
          do
          {
            uint64_t v80 = *(void *)v7;
            v7 += 8;
            *(void *)uint64_t v41 = v80;
            v41 += 8;
          }
          while (v41 != v5);
        }
        goto LABEL_76;
      }
LABEL_87:
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
LABEL_5:
    uint64_t v11 = v10 >> 3;
    if (v11 >= -1) {
      uint64_t v12 = v11 + 1;
    }
    else {
      uint64_t v12 = v11 + 2;
    }
    uint64_t v13 = v12 >> 1;
    uint64_t v14 = -v13;
    unint64_t v15 = &v7[-8 * v13];
    int64_t v16 = v5 - v7;
    if (v5 != v7)
    {
      memmove(&v7[-8 * v13], v7, v5 - v7);
      unint64_t v7 = *(char **)(a1 + 8);
    }
    std::basic_regex<char>::value_type v5 = &v15[v16];
    *(void *)(a1 + 8) = &v7[8 * v14];
    *(void *)(a1 + 16) = &v15[v16];
    goto LABEL_78;
  }
  uint64_t v18 = *(void *)(a1 + 16);
  uint64_t v17 = *(void *)(a1 + 24);
  uint64_t v19 = *(void *)(a1 + 8);
  uint64_t v20 = v18 - v19;
  uint64_t v21 = (v18 - v19) >> 3;
  uint64_t v22 = v17 - *(void *)a1;
  if (v21 < (unint64_t)(v22 >> 3))
  {
    if (v17 != v18)
    {
      uint64_t v89 = operator new(0xFC0uLL);
      std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_back((char **)a1, &v89);
      return;
    }
    uint64_t v89 = operator new(0xFC0uLL);
    std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_front((void **)a1, &v89);
    unint64_t v42 = *(void **)(a1 + 8);
    std::basic_regex<char>::value_type v5 = *(char **)(a1 + 16);
    unint64_t v7 = (char *)(v42 + 1);
    uint64_t v8 = *v42;
    *(void *)(a1 + 8) = v42 + 1;
    if (v5 != *(char **)(a1 + 24)) {
      goto LABEL_78;
    }
    uint64_t v9 = *(char **)a1;
    uint64_t v10 = (uint64_t)&v7[-*(void *)a1];
    if ((unint64_t)v7 <= *(void *)a1)
    {
      unint64_t v43 = (v5 - v9) >> 2;
      if (v5 == v9) {
        unint64_t v43 = 1;
      }
      if (!(v43 >> 61))
      {
        unint64_t v44 = v43 >> 2;
        uint64_t v45 = 8 * v43;
        unint64_t v35 = (char *)operator new(8 * v43);
        long long v36 = &v35[8 * v44];
        uint64_t v37 = &v35[v45];
        int64_t v46 = v5 - v7;
        BOOL v38 = v5 == v7;
        std::basic_regex<char>::value_type v5 = v36;
        if (!v38)
        {
          std::basic_regex<char>::value_type v5 = &v36[v46 & 0xFFFFFFFFFFFFFFF8];
          unint64_t v47 = v46 - 8;
          if ((unint64_t)(v46 - 8) >= 0x38)
          {
            long long v81 = &v35[8 * v44];
            uint64_t v48 = v81;
            if ((unint64_t)(v81 - v7) >= 0x20)
            {
              uint64_t v82 = (v47 >> 3) + 1;
              uint64_t v83 = 8 * (v82 & 0x3FFFFFFFFFFFFFFCLL);
              uint64_t v48 = &v36[v83];
              v7 += v83;
              uint64_t v84 = (long long *)(v42 + 3);
              uint64_t v85 = v81 + 16;
              uint64_t v86 = v82 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v87 = *v84;
                *(v85 - 1) = *(v84 - 1);
                *uint64_t v85 = v87;
                v84 += 2;
                v85 += 2;
                v86 -= 4;
              }
              while (v86);
              if (v82 == (v82 & 0x3FFFFFFFFFFFFFFCLL)) {
                goto LABEL_76;
              }
            }
          }
          else
          {
            uint64_t v48 = &v35[8 * v44];
          }
          do
          {
            uint64_t v88 = *(void *)v7;
            v7 += 8;
            *(void *)uint64_t v48 = v88;
            v48 += 8;
          }
          while (v48 != v5);
        }
LABEL_76:
        *(void *)a1 = v35;
        *(void *)(a1 + 8) = v36;
        *(void *)(a1 + 16) = v5;
        *(void *)(a1 + 24) = v37;
        if (v9)
        {
          operator delete(v9);
          std::basic_regex<char>::value_type v5 = *(char **)(a1 + 16);
        }
        goto LABEL_78;
      }
      goto LABEL_87;
    }
    goto LABEL_5;
  }
  uint64_t v23 = v22 >> 2;
  if (v17 == *(void *)a1) {
    unint64_t v24 = 1;
  }
  else {
    unint64_t v24 = v23;
  }
  if (v24 >> 61) {
    goto LABEL_87;
  }
  uint64_t v25 = (char *)operator new(8 * v24);
  uint64_t v26 = operator new(0xFC0uLL);
  unint64_t v27 = &v25[8 * v21];
  unsigned int v28 = &v25[8 * v24];
  if (v21 == v24)
  {
    long long v30 = v26;
    if (v20 < 1)
    {
      if (v18 == v19) {
        unint64_t v49 = 1;
      }
      else {
        unint64_t v49 = v20 >> 2;
      }
      if (v49 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      unint64_t v27 = (char *)operator new(8 * v49);
      unsigned int v28 = &v27[8 * v49];
      operator delete(v25);
      uint64_t v50 = *(void *)(a1 + 8);
      uint64_t v18 = *(void *)(a1 + 16);
      uint64_t v25 = v27;
      *(void *)unint64_t v27 = v30;
      unint64_t v29 = v27 + 8;
      if (v18 == v50) {
        goto LABEL_45;
      }
    }
    else
    {
      unint64_t v31 = v21 + 2;
      if (v21 >= -1) {
        unint64_t v31 = v21 + 1;
      }
      v27 -= 8 * (v31 >> 1);
      *(void *)unint64_t v27 = v26;
      unint64_t v29 = v27 + 8;
      if (v18 == v19) {
        goto LABEL_45;
      }
    }
    goto LABEL_51;
  }
  *(void *)unint64_t v27 = v26;
  unint64_t v29 = v27 + 8;
  if (v18 != v19)
  {
    do
    {
LABEL_51:
      if (v27 == v25)
      {
        if (v29 >= v28)
        {
          if (v28 == v25) {
            unint64_t v57 = 1;
          }
          else {
            unint64_t v57 = (v28 - v25) >> 2;
          }
          if (v57 >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          long long v58 = (char *)operator new(8 * v57);
          uint64_t v59 = v58;
          unint64_t v60 = (v57 + 3) >> 2;
          unint64_t v27 = &v58[8 * v60];
          int64_t v61 = v29 - v25;
          BOOL v38 = v29 == v25;
          unint64_t v29 = v27;
          if (!v38)
          {
            unint64_t v29 = &v27[v61 & 0xFFFFFFFFFFFFFFF8];
            unint64_t v62 = v61 - 8;
            long long v63 = &v58[8 * v60];
            uint64_t v64 = v25;
            if (v62 < 0x38) {
              goto LABEL_91;
            }
            uint64_t v65 = 8 * v60;
            long long v63 = &v58[8 * v60];
            uint64_t v64 = v25;
            if ((unint64_t)(v63 - v25) < 0x20) {
              goto LABEL_91;
            }
            uint64_t v66 = (v62 >> 3) + 1;
            uint64_t v67 = 8 * (v66 & 0x3FFFFFFFFFFFFFFCLL);
            long long v63 = &v27[v67];
            uint64_t v64 = &v25[v67];
            uint64_t v68 = (long long *)(v25 + 16);
            unint64_t v69 = &v58[v65 + 16];
            uint64_t v70 = v66 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v71 = *v68;
              *((_OWORD *)v69 - 1) = *(v68 - 1);
              *(_OWORD *)unint64_t v69 = v71;
              v68 += 2;
              v69 += 32;
              v70 -= 4;
            }
            while (v70);
            if (v66 != (v66 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_91:
              do
              {
                uint64_t v72 = *(void *)v64;
                v64 += 8;
                *(void *)long long v63 = v72;
                v63 += 8;
              }
              while (v63 != v29);
            }
          }
          unsigned int v28 = &v58[8 * v57];
          operator delete(v25);
          uint64_t v25 = v59;
        }
        else
        {
          uint64_t v53 = (v28 - v29) >> 3;
          if (v53 >= -1) {
            uint64_t v54 = v53 + 1;
          }
          else {
            uint64_t v54 = v53 + 2;
          }
          uint64_t v55 = v54 >> 1;
          unint64_t v27 = &v25[8 * (v54 >> 1)];
          uint64_t v56 = v25;
          if (v29 != v25)
          {
            memmove(v27, v25, v29 - v25);
            uint64_t v56 = v29;
          }
          unint64_t v29 = (char *)v56 + 8 * v55;
        }
      }
      uint64_t v52 = *(void *)(v18 - 8);
      v18 -= 8;
      *((void *)v27 - 1) = v52;
      v27 -= 8;
    }
    while (v18 != *(void *)(a1 + 8));
  }
LABEL_45:
  uint64_t v51 = *(char **)a1;
  *(void *)a1 = v25;
  *(void *)(a1 + 8) = v27;
  *(void *)(a1 + 16) = v29;
  *(void *)(a1 + 24) = v28;
  if (v51)
  {
    operator delete(v51);
  }
}

void sub_2636ACD0C(_Unwind_Exception *a1)
{
  operator delete(v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_back(char **a1, void *a2)
{
  unint64_t v4 = a1[2];
  if (v4 != a1[3]) {
    goto LABEL_22;
  }
  std::basic_regex<char>::value_type v5 = *a1;
  uint64_t v6 = a1[1];
  if (v6 > *a1)
  {
    uint64_t v7 = (v6 - *a1) >> 3;
    if (v7 >= -1) {
      uint64_t v8 = v7 + 1;
    }
    else {
      uint64_t v8 = v7 + 2;
    }
    uint64_t v9 = v8 >> 1;
    uint64_t v10 = -v9;
    uint64_t v11 = &v6[-8 * v9];
    int64_t v12 = v4 - v6;
    if (v4 != v6)
    {
      memmove(&v6[-8 * v9], a1[1], v4 - v6);
      unint64_t v4 = a1[1];
    }
    uint64_t v13 = &v4[8 * v10];
    unint64_t v4 = &v11[v12];
    a1[1] = v13;
    a1[2] = &v11[v12];
    goto LABEL_22;
  }
  unint64_t v14 = (v4 - v5) >> 2;
  if (v4 == v5) {
    unint64_t v14 = 1;
  }
  if (v14 >> 61) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  unint64_t v15 = v14 >> 2;
  uint64_t v16 = 8 * v14;
  uint64_t v17 = (char *)operator new(8 * v14);
  uint64_t v18 = &v17[8 * v15];
  int64_t v20 = v4 - v6;
  BOOL v19 = v4 == v6;
  unint64_t v4 = v18;
  if (!v19)
  {
    unint64_t v4 = &v18[v20 & 0xFFFFFFFFFFFFFFF8];
    unint64_t v21 = v20 - 8;
    if ((unint64_t)(v20 - 8) < 0x38)
    {
      uint64_t v22 = &v17[8 * v15];
      do
      {
LABEL_19:
        uint64_t v31 = *(void *)v6;
        v6 += 8;
        *(void *)uint64_t v22 = v31;
        v22 += 8;
      }
      while (v22 != v4);
      goto LABEL_20;
    }
    uint64_t v23 = &v17[8 * v15];
    uint64_t v22 = v23;
    if ((unint64_t)(v23 - v6) < 0x20) {
      goto LABEL_19;
    }
    uint64_t v24 = (v21 >> 3) + 1;
    uint64_t v25 = 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
    uint64_t v22 = &v18[v25];
    uint64_t v26 = &v6[v25];
    unint64_t v27 = (long long *)(v6 + 16);
    unsigned int v28 = v23 + 16;
    uint64_t v29 = v24 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v30 = *v27;
      *(v28 - 1) = *(v27 - 1);
      *unsigned int v28 = v30;
      v27 += 2;
      v28 += 2;
      v29 -= 4;
    }
    while (v29);
    uint64_t v6 = v26;
    if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL)) {
      goto LABEL_19;
    }
  }
LABEL_20:
  *a1 = v17;
  a1[1] = v18;
  a1[2] = v4;
  a1[3] = &v17[v16];
  if (v5)
  {
    operator delete(v5);
    unint64_t v4 = a1[2];
  }
LABEL_22:
  *(void *)unint64_t v4 = *a2;
  a1[2] += 8;
}

void std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_front(void **a1, void *a2)
{
  unint64_t v4 = (char *)a1[1];
  if (v4 == *a1)
  {
    uint64_t v7 = a1[2];
    uint64_t v6 = a1[3];
    if (v7 >= v6)
    {
      uint64_t v13 = v6 - v4;
      BOOL v12 = v13 == 0;
      unint64_t v14 = v13 >> 2;
      if (v12) {
        unint64_t v14 = 1;
      }
      if (v14 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      unint64_t v15 = (v14 + 3) >> 2;
      uint64_t v16 = 8 * v14;
      uint64_t v17 = (char *)operator new(8 * v14);
      std::basic_regex<char>::value_type v5 = &v17[8 * v15];
      uint64_t v18 = v5;
      uint64_t v19 = v7 - v4;
      if (v7 != v4)
      {
        uint64_t v18 = &v5[v19 & 0xFFFFFFFFFFFFFFF8];
        unint64_t v20 = v19 - 8;
        unint64_t v21 = &v17[8 * v15];
        uint64_t v22 = v4;
        if (v20 < 0x38) {
          goto LABEL_27;
        }
        uint64_t v23 = &v17[8 * v15];
        unint64_t v21 = v23;
        uint64_t v22 = v4;
        if ((unint64_t)(v23 - v4) < 0x20) {
          goto LABEL_27;
        }
        uint64_t v24 = (v20 >> 3) + 1;
        uint64_t v25 = 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
        unint64_t v21 = &v5[v25];
        uint64_t v22 = &v4[v25];
        uint64_t v26 = (long long *)(v4 + 16);
        unint64_t v27 = v23 + 16;
        uint64_t v28 = v24 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v29 = *v26;
          *(v27 - 1) = *(v26 - 1);
          _OWORD *v27 = v29;
          v26 += 2;
          v27 += 2;
          v28 -= 4;
        }
        while (v28);
        if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_27:
          do
          {
            uint64_t v30 = *(void *)v22;
            v22 += 8;
            *(void *)unint64_t v21 = v30;
            v21 += 8;
          }
          while (v21 != v18);
        }
      }
      *a1 = v17;
      a1[1] = v5;
      a1[2] = v18;
      a1[3] = &v17[v16];
      if (v4)
      {
        operator delete(v4);
        std::basic_regex<char>::value_type v5 = (char *)a1[1];
      }
    }
    else
    {
      uint64_t v8 = (v6 - v7) >> 3;
      if (v8 >= -1) {
        uint64_t v9 = v8 + 1;
      }
      else {
        uint64_t v9 = v8 + 2;
      }
      uint64_t v10 = v9 >> 1;
      uint64_t v11 = &v7[8 * (v9 >> 1)];
      std::basic_regex<char>::value_type v5 = &v11[-(v7 - v4)];
      if (v7 != v4)
      {
        memmove(&v11[-(v7 - v4)], v4, v7 - v4);
        unint64_t v4 = (char *)a1[2];
      }
      a1[1] = v5;
      a1[2] = &v4[8 * v10];
    }
  }
  else
  {
    std::basic_regex<char>::value_type v5 = (char *)a1[1];
  }
  *((void *)v5 - 1) = *a2;
  a1[1] = (char *)a1[1] - 8;
}

void std::deque<std::__state<char>>::__add_front_capacity(uint64_t a1)
{
  BOOL v3 = *(uint64_t **)(a1 + 8);
  unint64_t v2 = *(uint64_t **)(a1 + 16);
  unint64_t v4 = v2 - v3;
  if (v2 == v3) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = 42 * v4 - 1;
  }
  uint64_t v6 = *(void *)(a1 + 32);
  if ((unint64_t)(v5 - (*(void *)(a1 + 40) + v6)) >= 0x2A)
  {
    *(void *)(a1 + 32) = v6 + 42;
    unint64_t v47 = (void *)*(v2 - 1);
    *(void *)(a1 + 16) = v2 - 1;
    std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_front((void **)a1, &v47);
    return;
  }
  uint64_t v7 = *(uint64_t **)(a1 + 24);
  uint64_t v8 = *(uint64_t **)a1;
  uint64_t v9 = (uint64_t)v7 - *(void *)a1;
  if (v4 < v9 >> 3)
  {
    if (v3 == v8)
    {
      unint64_t v47 = operator new(0xFC0uLL);
      std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_back((char **)a1, &v47);
      uint64_t v43 = *(void *)(a1 + 16);
      unint64_t v47 = *(void **)(v43 - 8);
      *(void *)(a1 + 16) = v43 - 8;
      std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_front((void **)a1, &v47);
      if (*(void *)(a1 + 16) - *(void *)(a1 + 8) == 8) {
        goto LABEL_9;
      }
    }
    else
    {
      unint64_t v47 = operator new(0xFC0uLL);
      std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_front((void **)a1, &v47);
      if (*(void *)(a1 + 16) - *(void *)(a1 + 8) == 8)
      {
LABEL_9:
        uint64_t v10 = 21;
LABEL_45:
        *(void *)(a1 + 32) = v10;
        return;
      }
    }
    uint64_t v10 = *(void *)(a1 + 32) + 42;
    goto LABEL_45;
  }
  if (v7 == v8) {
    unint64_t v11 = 1;
  }
  else {
    unint64_t v11 = v9 >> 2;
  }
  if (v11 >> 61) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  BOOL v12 = (char *)operator new(8 * v11);
  uint64_t v13 = operator new(0xFC0uLL);
  unint64_t v14 = v13;
  if (v11)
  {
    unint64_t v15 = &v12[8 * v11];
    *(void *)BOOL v12 = v13;
    uint64_t v16 = v12 + 8;
    if (v3 != v2)
    {
LABEL_16:
      uint64_t v17 = v12;
      while (1)
      {
        if (v16 == v15)
        {
          if (v17 <= v12)
          {
            if (v16 == v12) {
              unint64_t v26 = 1;
            }
            else {
              unint64_t v26 = (v16 - v12) >> 2;
            }
            if (v26 >> 61) {
              std::__throw_bad_array_new_length[abi:ne180100]();
            }
            unint64_t v27 = (char *)operator new(8 * v26);
            uint64_t v28 = v27;
            unint64_t v29 = v26 >> 2;
            uint64_t v18 = &v27[8 * (v26 >> 2)];
            int64_t v31 = v16 - v17;
            BOOL v30 = v16 == v17;
            uint64_t v16 = v18;
            if (!v30)
            {
              uint64_t v16 = &v18[v31 & 0xFFFFFFFFFFFFFFF8];
              unint64_t v32 = v31 - 8;
              if (v32 < 0x38 || (uint64_t v33 = 8 * v29, (unint64_t)(&v27[8 * v29] - v17) < 0x20))
              {
                uint64_t v34 = &v27[8 * (v26 >> 2)];
                unint64_t v35 = v17;
                goto LABEL_35;
              }
              uint64_t v37 = (v32 >> 3) + 1;
              uint64_t v38 = 8 * (v37 & 0x3FFFFFFFFFFFFFFCLL);
              uint64_t v34 = &v18[v38];
              unint64_t v35 = &v17[v38];
              int64_t v39 = (long long *)(v17 + 16);
              unint64_t v40 = &v27[v33 + 16];
              uint64_t v41 = v37 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v42 = *v39;
                *((_OWORD *)v40 - 1) = *(v39 - 1);
                *(_OWORD *)unint64_t v40 = v42;
                v39 += 2;
                v40 += 32;
                v41 -= 4;
              }
              while (v41);
              if (v37 != (v37 & 0x3FFFFFFFFFFFFFFCLL))
              {
                do
                {
LABEL_35:
                  uint64_t v36 = *(void *)v35;
                  v35 += 8;
                  *(void *)uint64_t v34 = v36;
                  v34 += 8;
                }
                while (v34 != v16);
              }
            }
            unint64_t v15 = &v27[8 * v26];
            if (v12) {
              operator delete(v12);
            }
            BOOL v12 = v28;
            goto LABEL_18;
          }
          uint64_t v20 = (v17 - v12) >> 3;
          if (v20 >= -1) {
            uint64_t v21 = v20 + 1;
          }
          else {
            uint64_t v21 = v20 + 2;
          }
          uint64_t v22 = v21 >> 1;
          uint64_t v23 = &v17[-8 * (v21 >> 1)];
          uint64_t v24 = v16;
          if (v16 != v17)
          {
            memmove(v23, v17, v16 - v17);
            uint64_t v24 = v17;
          }
          uint64_t v25 = -v22;
          unint64_t v15 = v16;
          uint64_t v16 = &v23[v16 - v17];
          uint64_t v18 = &v24[8 * v25];
        }
        else
        {
          uint64_t v18 = v17;
        }
LABEL_18:
        uint64_t v19 = *v3++;
        *(void *)uint64_t v16 = v19;
        v16 += 8;
        uint64_t v17 = v18;
        if (v3 == *(uint64_t **)(a1 + 16)) {
          goto LABEL_48;
        }
      }
    }
  }
  else
  {
    unint64_t v44 = (char *)operator new(8uLL);
    unint64_t v15 = v44 + 8;
    operator delete(v12);
    BOOL v3 = *(uint64_t **)(a1 + 8);
    uint64_t v45 = *(uint64_t **)(a1 + 16);
    BOOL v12 = v44;
    *(void *)unint64_t v44 = v14;
    uint64_t v16 = v44 + 8;
    if (v3 != v45) {
      goto LABEL_16;
    }
  }
  uint64_t v18 = v12;
LABEL_48:
  int64_t v46 = *(void **)a1;
  *(void *)a1 = v12;
  *(void *)(a1 + 8) = v18;
  *(void *)(a1 + 16) = v16;
  *(void *)(a1 + 24) = v15;
  if (v16 - v18 == 8)
  {
    *(void *)(a1 + 32) = 21;
    if (!v46) {
      return;
    }
  }
  else
  {
    *(void *)(a1 + 32) += 42;
    if (!v46) {
      return;
    }
  }

  operator delete(v46);
}

void sub_2636AD3DC(_Unwind_Exception *a1)
{
  operator delete(v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

char *std::vector<std::sub_match<char const*>>::__assign_with_size[abi:ne180100]<std::sub_match<char const*>*,std::sub_match<char const*>*>(char **a1, char *a2, char *a3, size_t __sz)
{
  uint64_t v6 = a2;
  uint64_t v8 = (uint64_t)a1[2];
  uint64_t result = *a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - (uint64_t)result) >> 3) >= __sz)
  {
    uint64_t v18 = a1[1];
    uint64_t v17 = a1 + 1;
    unint64_t v14 = v18;
    unint64_t v19 = 0xAAAAAAAAAAAAAAABLL * ((v18 - result) >> 3);
    if (v19 >= __sz)
    {
      uint64_t v24 = result;
      if (a2 != a3)
      {
        uint64_t v25 = result;
        do
        {
          *(_OWORD *)uint64_t v25 = *(_OWORD *)v6;
          v25[16] = v6[16];
          v24 += 24;
          v6 += 24;
          v25 += 24;
        }
        while (v6 != a3);
      }
      int64_t v16 = v24 - result;
      unint64_t v14 = result;
    }
    else
    {
      uint64_t v20 = &a2[24 * v19];
      if (v14 != result)
      {
        do
        {
          *(_OWORD *)uint64_t result = *(_OWORD *)v6;
          result[16] = v6[16];
          v6 += 24;
          result += 24;
        }
        while (v6 != v20);
      }
      uint64_t v21 = v14;
      if (v20 != a3)
      {
        uint64_t v22 = v14;
        do
        {
          long long v23 = *(_OWORD *)v20;
          *((void *)v22 + 2) = *((void *)v20 + 2);
          *(_OWORD *)uint64_t v22 = v23;
          v22 += 24;
          v20 += 24;
          v21 += 24;
        }
        while (v20 != a3);
      }
      int64_t v16 = v21 - v14;
    }
  }
  else
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      uint64_t v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (__sz > 0xAAAAAAAAAAAAAAALL) {
      goto LABEL_26;
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
    uint64_t v11 = 2 * v10;
    if (2 * v10 <= __sz) {
      uint64_t v11 = __sz;
    }
    unint64_t v12 = v10 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v11;
    if (v12 > 0xAAAAAAAAAAAAAAALL) {
LABEL_26:
    }
      std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::__throw_length_error[abi:ne180100]();
    uint64_t v13 = 24 * v12;
    uint64_t result = (char *)operator new(24 * v12);
    unint64_t v14 = result;
    *a1 = result;
    a1[1] = result;
    a1[2] = &result[v13];
    unint64_t v15 = result;
    if (v6 != a3)
    {
      uint64_t result = (char *)memcpy(result, v6, 24 * ((a3 - v6 - 24) / 0x18uLL) + 24);
      unint64_t v15 = &v14[24 * ((a3 - v6 - 24) / 0x18uLL) + 24];
    }
    int64_t v16 = v15 - v14;
    uint64_t v17 = a1 + 1;
  }
  void *v17 = &v14[v16];
  return result;
}

double *std::vector<std::pair<unsigned long,char const*>>::__assign_with_size[abi:ne180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>(uint64_t a1, const double *a2, const double *a3, size_t __sz)
{
  uint64_t v8 = *(void *)(a1 + 16);
  uint64_t result = *(double **)a1;
  if (__sz > (v8 - (uint64_t)result) >> 4)
  {
    if (result)
    {
      *(void *)(a1 + 8) = result;
      operator delete(result);
      uint64_t v8 = 0;
      *(void *)a1 = 0;
      *(void *)(a1 + 8) = 0;
      *(void *)(a1 + 16) = 0;
    }
    if (__sz >> 60) {
      goto LABEL_62;
    }
    uint64_t v10 = v8 >> 3;
    if (v8 >> 3 <= __sz) {
      uint64_t v10 = __sz;
    }
    BOOL v37 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0;
    unint64_t v11 = 0xFFFFFFFFFFFFFFFLL;
    if (!v37) {
      unint64_t v11 = v10;
    }
    if (v11 >> 60) {
LABEL_62:
    }
      std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::__throw_length_error[abi:ne180100]();
    uint64_t v12 = 2 * v11;
    uint64_t result = (double *)operator new(16 * v11);
    uint64_t v13 = result;
    *(void *)a1 = result;
    *(void *)(a1 + 8) = result;
    *(void *)(a1 + 16) = &result[v12];
    unint64_t v14 = result;
    if (a2 != a3)
    {
      uint64_t result = (double *)memcpy(result, a2, ((char *)a3 - (char *)a2) & 0xFFFFFFFFFFFFFFF0);
      unint64_t v14 = (double *)((char *)v13 + (((char *)a3 - (char *)a2) & 0xFFFFFFFFFFFFFFF0));
    }
    int64_t v15 = (char *)v14 - (char *)v13;
    int64_t v16 = (void *)(a1 + 8);
    goto LABEL_29;
  }
  uint64_t v17 = *(double **)(a1 + 8);
  int64_t v16 = (void *)(a1 + 8);
  uint64_t v13 = v17;
  int64_t v18 = (char *)v17 - (char *)result;
  unint64_t v19 = ((char *)v17 - (char *)result) >> 4;
  if (v19 >= __sz)
  {
    if (a2 == a3)
    {
      BOOL v30 = (char *)result;
    }
    else
    {
      unint64_t v29 = (char *)a3 - (char *)a2 - 16;
      if (v29 < 0xF0
        || ((unint64_t v47 = v29 & 0xFFFFFFFFFFFFFFF0 | 8,
             uint64_t v48 = (char *)result + v47,
             unint64_t v49 = (unint64_t)a2 + v47,
             unint64_t v50 = (v29 & 0xFFFFFFFFFFFFFFF0) + 16,
             result + 1 < (const double *)((char *)a2 + v50))
          ? (BOOL v51 = a2 + 1 >= (double *)((char *)result + v50))
          : (BOOL v51 = 1),
            v51 ? (char v52 = 0) : (char v52 = 1),
            v48 > (char *)a2 ? (BOOL v53 = (unint64_t)result >= v49) : (BOOL v53 = 1),
            !v53 || (v52 & 1) != 0))
      {
        BOOL v30 = (char *)result;
        int64_t v31 = a2;
      }
      else
      {
        uint64_t v54 = (v29 >> 4) + 1;
        uint64_t v55 = 2 * (v54 & 0x1FFFFFFFFFFFFFFCLL);
        BOOL v30 = (char *)&result[v55];
        int64_t v31 = &a2[v55];
        uint64_t v56 = a2 + 4;
        unint64_t v57 = result + 4;
        uint64_t v58 = v54 & 0x1FFFFFFFFFFFFFFCLL;
        do
        {
          uint64_t v59 = v56 - 4;
          float64x2x2_t v62 = vld2q_f64(v59);
          float64x2x2_t v64 = vld2q_f64(v56);
          unint64_t v60 = v57 - 4;
          vst2q_f64(v60, v62);
          vst2q_f64(v57, v64);
          v56 += 8;
          v57 += 8;
          v58 -= 4;
        }
        while (v58);
        if (v54 == (v54 & 0x1FFFFFFFFFFFFFFCLL)) {
          goto LABEL_28;
        }
      }
      do
      {
        uint64_t v32 = *(void *)v31;
        uint64_t v33 = *((void *)v31 + 1);
        v31 += 2;
        *(void *)BOOL v30 = v32;
        *((void *)v30 + 1) = v33;
        v30 += 16;
      }
      while (v31 != a3);
    }
LABEL_28:
    int64_t v15 = v30 - (char *)result;
    uint64_t v13 = result;
    goto LABEL_29;
  }
  uint64_t v20 = &a2[2 * v19];
  if (v13 != result)
  {
    unint64_t v21 = v18 - 16;
    if ((unint64_t)(v18 - 16) < 0xF0
      || ((unint64_t v34 = v18 & 0xFFFFFFFFFFFFFFF0,
           unint64_t v35 = (char *)result + v34 - 8,
           unint64_t v36 = (unint64_t)a2 + v34 - 8,
           result + 1 < (const double *)((char *)a2 + v34))
        ? (BOOL v37 = a2 + 1 >= (double *)((char *)result + v34))
        : (BOOL v37 = 1),
          v37 ? (char v38 = 0) : (char v38 = 1),
          v35 > (char *)a2 ? (BOOL v39 = (unint64_t)result >= v36) : (BOOL v39 = 1),
          !v39 || (v38 & 1) != 0))
    {
      uint64_t v22 = result;
      long long v23 = a2;
    }
    else
    {
      uint64_t v40 = (v21 >> 4) + 1;
      uint64_t v41 = 2 * (v40 & 0x1FFFFFFFFFFFFFFCLL);
      uint64_t v22 = &result[v41];
      long long v23 = &a2[v41];
      long long v42 = a2 + 4;
      uint64_t v43 = result + 4;
      uint64_t v44 = v40 & 0x1FFFFFFFFFFFFFFCLL;
      do
      {
        uint64_t v45 = v42 - 4;
        float64x2x2_t v61 = vld2q_f64(v45);
        float64x2x2_t v63 = vld2q_f64(v42);
        int64_t v46 = v43 - 4;
        vst2q_f64(v46, v61);
        vst2q_f64(v43, v63);
        v42 += 8;
        v43 += 8;
        v44 -= 4;
      }
      while (v44);
      if (v40 == (v40 & 0x1FFFFFFFFFFFFFFCLL)) {
        goto LABEL_18;
      }
    }
    do
    {
      uint64_t v24 = *(void *)v23;
      uint64_t v25 = *((void *)v23 + 1);
      v23 += 2;
      *(void *)uint64_t v22 = v24;
      *((void *)v22 + 1) = v25;
      v22 += 2;
    }
    while (v23 != v20);
  }
LABEL_18:
  unint64_t v26 = v13;
  if (v20 != a3)
  {
    unint64_t v27 = v13;
    do
    {
      long long v28 = *(_OWORD *)v20;
      v20 += 2;
      *(_OWORD *)unint64_t v27 = v28;
      v27 += 2;
      v26 += 2;
    }
    while (v20 != a3);
  }
  int64_t v15 = (char *)v26 - (char *)v13;
LABEL_29:
  void *v16 = (char *)v13 + v15;
  return result;
}

void std::vector<std::sub_match<std::__wrap_iter<char const*>>>::__append(std::vector<std::ssub_match> *this, std::vector<std::ssub_match>::size_type __n)
{
  std::vector<std::ssub_match>::pointer end = this->__end_;
  xpc_object_t value = this->__end_cap_.__value_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)end) >> 3) >= __n)
  {
    if (__n)
    {
      unint64_t v11 = &end[__n];
      std::vector<std::ssub_match>::size_type v12 = 24 * __n;
      do
      {
        end->first.__i_ = 0;
        end->second.__i_ = 0;
        end->matched = 0;
        ++end;
        v12 -= 24;
      }
      while (v12);
      std::vector<std::ssub_match>::pointer end = v11;
    }
    this->__end_ = end;
  }
  else
  {
    unint64_t v6 = 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)this->__begin_) >> 3);
    unint64_t v7 = v6 + __n;
    if (v6 + __n > 0xAAAAAAAAAAAAAAALL) {
      std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)this->__begin_) >> 3);
    if (2 * v8 > v7) {
      unint64_t v7 = 2 * v8;
    }
    if (v8 >= 0x555555555555555) {
      unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      if (v9 > 0xAAAAAAAAAAAAAAALL) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v10 = (char *)operator new(24 * v9);
    }
    else
    {
      uint64_t v10 = 0;
    }
    uint64_t v13 = (std::sub_match<std::__wrap_iter<const char *>> *)&v10[24 * v6];
    std::vector<std::ssub_match>::size_type v14 = 24 * __n;
    int64_t v15 = &v13[__n];
    int64_t v16 = v13;
    do
    {
      v16->first.__i_ = 0;
      v16->second.__i_ = 0;
      v16->matched = 0;
      ++v16;
      v14 -= 24;
    }
    while (v14);
    std::vector<std::ssub_match>::pointer begin = this->__begin_;
    if (end != this->__begin_)
    {
      do
      {
        std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> v18 = end[-1].std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>>;
        *(void *)&v13[-1].matched = *(void *)&end[-1].matched;
        v13[-1].std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> = v18;
        --v13;
        --end;
      }
      while (end != begin);
      std::vector<std::ssub_match>::pointer end = this->__begin_;
    }
    this->__begin_ = v13;
    this->__end_ = v15;
    this->__end_cap_.__value_ = (std::sub_match<std::__wrap_iter<const char *>> *)&v10[24 * v9];
    if (end)
    {
      operator delete(end);
    }
  }
}

uint64_t _GLOBAL__sub_I_ResetInfo_cpp()
{
  uint64_t v74 = *MEMORY[0x263EF8340];
  __cxa_atexit((void (*)(void *))std::vector<ResetInfo::RegexPatternAndReasonMask>::~vector[abi:ne180100], &ResetInfo::sPatternMasks, &dword_26368A000);
  char v6 = 15;
  strcpy((char *)v5, ".*\\[abmtool\\].*");
  v7[0] = 1;
  char v9 = 14;
  strcpy((char *)v8, ".*\\[bbutil\\].*");
  int v10 = 1;
  unint64_t v11 = operator new(0x50uLL);
  long long v12 = xmmword_2637A5AA0;
  strcpy((char *)v11, ".*AP forced coredump via SPMI - Please analyze reason from AP perspective.*");
  int v13 = 1;
  std::vector<std::ssub_match>::size_type v14 = operator new(0x19uLL);
  long long v15 = xmmword_2637A5AB0;
  strcpy((char *)v14, ".*(after OTASP/OTAPA).*");
  int v16 = 1;
  uint64_t v17 = operator new(0x38uLL);
  long long v18 = xmmword_2637A5AC0;
  strcpy((char *)v17, ".*Carrier bundle updated settings that require reset");
  int v19 = 1;
  uint64_t v20 = operator new(0x28uLL);
  long long v21 = xmmword_2637A4D60;
  strcpy((char *)v20, ".*Manually Triggering BB Core Dump");
  int v22 = 1;
  long long v23 = operator new(0x28uLL);
  long long v24 = xmmword_2637A5AD0;
  strcpy((char *)v23, ".*modem manager triggered reset.*");
  int v25 = 1;
  unint64_t v26 = operator new(0x38uLL);
  long long v27 = xmmword_2637A5AE0;
  strcpy((char *)v26, ".*User requested to change Baseband field test config");
  int v28 = 1;
  unint64_t v29 = operator new(0x28uLL);
  uint64_t v30 = 33;
  unint64_t v31 = 0x8000000000000028;
  strcpy((char *)v29, ".*applebbproxy setup AT interface");
  int v32 = 1;
  uint64_t v33 = operator new(0x28uLL);
  uint64_t v34 = 36;
  unint64_t v35 = 0x8000000000000028;
  strcpy((char *)v33, ".*Resetting Baseband after restore.*");
  int v36 = 1;
  BOOL v37 = operator new(0x30uLL);
  uint64_t v38 = 42;
  unint64_t v39 = 0x8000000000000030;
  strcpy((char *)v37, ".*Resetting baseband after pushing files.*");
  int v40 = 1;
  uint64_t v41 = operator new(0x40uLL);
  uint64_t v42 = 59;
  unint64_t v43 = 0x8000000000000040;
  strcpy((char *)v41, ".*Resetting Baseband after successful restore of carrier NV");
  int v44 = 1;
  uint64_t v45 = operator new(0x30uLL);
  uint64_t v46 = 41;
  unint64_t v47 = 0x8000000000000030;
  strcpy((char *)v45, ".*Resetting modem from WirelessAutomation");
  int v48 = 1;
  unint64_t v49 = operator new(0x20uLL);
  uint64_t v50 = 25;
  unint64_t v51 = 0x8000000000000020;
  strcpy((char *)v49, ".*Requesting Soft Reset.*");
  int v52 = 1;
  BOOL v53 = operator new(0x30uLL);
  uint64_t v54 = 42;
  unint64_t v55 = 0x8000000000000030;
  strcpy((char *)v53, ".*AP-triggered((?!: locationd PDS).*|(.*))");
  int v56 = 1;
  unint64_t v59 = 0x8000000000000038;
  unint64_t v57 = operator new(0x38uLL);
  uint64_t v58 = 50;
  strcpy((char *)v57, ".*User ((requested state)|(Triggered Core))dump.*");
  int v60 = 1;
  HIBYTE(v61[2]) = 19;
  strcpy((char *)v61, ".*SIM APNs change.*");
  int v62 = 1;
  float64x2x2_t v63 = operator new(0x28uLL);
  unint64_t v65 = 0x8000000000000028;
  uint64_t v64 = 34;
  strcpy((char *)v63, ".*AttachAPN Push to force detach.*");
  int v66 = 1;
  char v68 = 14;
  strcpy((char *)v67, ".*CSIM reset.*");
  int v69 = 1;
  std::vector<std::csub_match> __p = operator new(0x20uLL);
  unint64_t v72 = 0x8000000000000020;
  uint64_t v71 = 25;
  strcpy((char *)__p, ".*com\\.apple\\.symptomsd.*");
  int v73 = 1;
  qword_26B431B48 = 0;
  qword_26B431B50 = 0;
  kDefaultPatternMasks = 0;
  v0 = (char *)operator new(0x280uLL);
  unint64_t v1 = 0;
  kDefaultPatternMasks = (uint64_t)v0;
  qword_26B431B48 = (uint64_t)v0;
  qword_26B431B50 = (uint64_t)(v0 + 640);
  do
  {
    unint64_t v2 = (std::string *)&v0[v1 * 4];
    BOOL v3 = &v5[v1 / 2];
    if (*(&v6 + v1 * 4) < 0)
    {
      std::string::__init_copy_ctor_external(v2, (const std::string::value_type *)*v3, (std::string::size_type)v3[1]);
    }
    else
    {
      *(_OWORD *)&v2->__r_.__value_.__l.__data_ = *(_OWORD *)v3;
      v2->__r_.__value_.__r.__words[2] = (std::string::size_type)v3[2];
    }
    *(_DWORD *)&v0[v1 * 4 + 24] = v7[v1];
    v1 += 8;
  }
  while (v1 != 160);
  qword_26B431B48 = (uint64_t)(v0 + 640);
  if (SHIBYTE(v72) < 0)
  {
    operator delete(__p);
    if ((v68 & 0x80000000) == 0)
    {
LABEL_8:
      if ((SHIBYTE(v65) & 0x80000000) == 0) {
        goto LABEL_9;
      }
      goto LABEL_31;
    }
  }
  else if ((v68 & 0x80000000) == 0)
  {
    goto LABEL_8;
  }
  operator delete(v67[0]);
  if ((SHIBYTE(v65) & 0x80000000) == 0)
  {
LABEL_9:
    if ((SHIBYTE(v61[2]) & 0x80000000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_32;
  }
LABEL_31:
  operator delete(v63);
  if ((SHIBYTE(v61[2]) & 0x80000000) == 0)
  {
LABEL_10:
    if ((SHIBYTE(v59) & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_33;
  }
LABEL_32:
  operator delete(v61[0]);
  if ((SHIBYTE(v59) & 0x80000000) == 0)
  {
LABEL_11:
    if ((SHIBYTE(v55) & 0x80000000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_34;
  }
LABEL_33:
  operator delete(v57);
  if ((SHIBYTE(v55) & 0x80000000) == 0)
  {
LABEL_12:
    if ((SHIBYTE(v51) & 0x80000000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_35;
  }
LABEL_34:
  operator delete(v53);
  if ((SHIBYTE(v51) & 0x80000000) == 0)
  {
LABEL_13:
    if ((SHIBYTE(v47) & 0x80000000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_36;
  }
LABEL_35:
  operator delete(v49);
  if ((SHIBYTE(v47) & 0x80000000) == 0)
  {
LABEL_14:
    if ((SHIBYTE(v43) & 0x80000000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_37;
  }
LABEL_36:
  operator delete(v45);
  if ((SHIBYTE(v43) & 0x80000000) == 0)
  {
LABEL_15:
    if ((SHIBYTE(v39) & 0x80000000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_38;
  }
LABEL_37:
  operator delete(v41);
  if ((SHIBYTE(v39) & 0x80000000) == 0)
  {
LABEL_16:
    if ((SHIBYTE(v35) & 0x80000000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_39;
  }
LABEL_38:
  operator delete(v37);
  if ((SHIBYTE(v35) & 0x80000000) == 0)
  {
LABEL_17:
    if ((SHIBYTE(v31) & 0x80000000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_40;
  }
LABEL_39:
  operator delete(v33);
  if ((SHIBYTE(v31) & 0x80000000) == 0)
  {
LABEL_18:
    if ((SHIBYTE(v27) & 0x80000000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_41;
  }
LABEL_40:
  operator delete(v29);
  if ((SHIBYTE(v27) & 0x80000000) == 0)
  {
LABEL_19:
    if ((SHIBYTE(v24) & 0x80000000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_42;
  }
LABEL_41:
  operator delete(v26);
  if ((SHIBYTE(v24) & 0x80000000) == 0)
  {
LABEL_20:
    if ((SHIBYTE(v21) & 0x80000000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_43;
  }
LABEL_42:
  operator delete(v23);
  if ((SHIBYTE(v21) & 0x80000000) == 0)
  {
LABEL_21:
    if ((SHIBYTE(v18) & 0x80000000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_44;
  }
LABEL_43:
  operator delete(v20);
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
LABEL_22:
    if ((SHIBYTE(v15) & 0x80000000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_45;
  }
LABEL_44:
  operator delete(v17);
  if ((SHIBYTE(v15) & 0x80000000) == 0)
  {
LABEL_23:
    if ((SHIBYTE(v12) & 0x80000000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_46;
  }
LABEL_45:
  operator delete(v14);
  if ((SHIBYTE(v12) & 0x80000000) == 0)
  {
LABEL_24:
    if ((v9 & 0x80000000) == 0) {
      goto LABEL_25;
    }
LABEL_47:
    operator delete(v8[0]);
    if ((v6 & 0x80000000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_48;
  }
LABEL_46:
  operator delete(v11);
  if (v9 < 0) {
    goto LABEL_47;
  }
LABEL_25:
  if ((v6 & 0x80000000) == 0) {
    goto LABEL_26;
  }
LABEL_48:
  operator delete(v5[0]);
LABEL_26:

  return __cxa_atexit((void (*)(void *))std::vector<ResetInfo::RegexPatternAndReasonMask>::~vector[abi:ne180100], &kDefaultPatternMasks, &dword_26368A000);
}

void sub_2636AE280(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59,uint64_t a60,void *a61,uint64_t a62,int a63)
{
  std::__exception_guard_exceptions<std::vector<ResetInfo::RegexPatternAndReasonMask>::__destroy_vector>::~__exception_guard_exceptions[abi:ne180100](&a10);
  if (SLOBYTE(STACK[0x28F]) < 0)
  {
    operator delete((void *)STACK[0x278]);
    if ((SLOBYTE(STACK[0x26F]) & 0x80000000) == 0)
    {
LABEL_3:
      if ((SLOBYTE(STACK[0x24F]) & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_24;
    }
  }
  else if ((SLOBYTE(STACK[0x26F]) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete((void *)STACK[0x258]);
  if ((SLOBYTE(STACK[0x24F]) & 0x80000000) == 0)
  {
LABEL_4:
    if ((SLOBYTE(STACK[0x22F]) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_25;
  }
LABEL_24:
  operator delete((void *)STACK[0x238]);
  if ((SLOBYTE(STACK[0x22F]) & 0x80000000) == 0)
  {
LABEL_5:
    if ((SLOBYTE(STACK[0x20F]) & 0x80000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_26;
  }
LABEL_25:
  operator delete((void *)STACK[0x218]);
  if ((SLOBYTE(STACK[0x20F]) & 0x80000000) == 0)
  {
LABEL_6:
    if ((a84 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_27;
  }
LABEL_26:
  operator delete(a85);
  if ((a84 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a82 & 0x80000000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_28;
  }
LABEL_27:
  operator delete(a83);
  if ((a82 & 0x80000000) == 0)
  {
LABEL_8:
    if ((a80 & 0x80000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_29;
  }
LABEL_28:
  operator delete(a81);
  if ((a80 & 0x80000000) == 0)
  {
LABEL_9:
    if ((a78 & 0x80000000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_30;
  }
LABEL_29:
  operator delete(a79);
  if ((a78 & 0x80000000) == 0)
  {
LABEL_10:
    if ((a76 & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_31;
  }
LABEL_30:
  operator delete(a77);
  if ((a76 & 0x80000000) == 0)
  {
LABEL_11:
    if ((a74 & 0x80000000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_32;
  }
LABEL_31:
  operator delete(a75);
  if ((a74 & 0x80000000) == 0)
  {
LABEL_12:
    if ((a72 & 0x80000000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_33;
  }
LABEL_32:
  operator delete(a73);
  if ((a72 & 0x80000000) == 0)
  {
LABEL_13:
    if ((a66 & 0x80000000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_34;
  }
LABEL_33:
  operator delete(a68);
  if ((a66 & 0x80000000) == 0)
  {
LABEL_14:
    if ((a59 & 0x80000000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_35;
  }
LABEL_34:
  operator delete(a61);
  if ((a59 & 0x80000000) == 0)
  {
LABEL_15:
    if ((a52 & 0x80000000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_36;
  }
LABEL_35:
  operator delete(a54);
  if ((a52 & 0x80000000) == 0)
  {
LABEL_16:
    if ((a45 & 0x80000000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_37;
  }
LABEL_36:
  operator delete(a47);
  if ((a45 & 0x80000000) == 0)
  {
LABEL_17:
    if ((a38 & 0x80000000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_38;
  }
LABEL_37:
  operator delete(a40);
  if ((a38 & 0x80000000) == 0)
  {
LABEL_18:
    if ((a31 & 0x80000000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_39;
  }
LABEL_38:
  operator delete(a33);
  if ((a31 & 0x80000000) == 0)
  {
LABEL_19:
    if ((a24 & 0x80000000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_40;
  }
LABEL_39:
  operator delete(a26);
  if ((a24 & 0x80000000) == 0)
  {
LABEL_20:
    if ((a17 & 0x80000000) == 0) {
LABEL_42:
    }
      _Unwind_Resume(a1);
LABEL_41:
    operator delete(a12);
    _Unwind_Resume(a1);
  }
LABEL_40:
  operator delete(a19);
  if ((a17 & 0x80000000) == 0) {
    goto LABEL_42;
  }
  goto LABEL_41;
}

void LogDumpDB::LogDumpDB(LogDumpDB *this)
{
  *(void *)this = &unk_270EA6450;
  *((_DWORD *)this + 4) = 10;
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  LogDumpDB::init(this);
}

{
  ctu::OsLogLogger::OsLogLogger((LogDumpDB *)((char *)this + 8), "com.apple.telephony.abm", "Log Dump History");
  *(void *)this = &unk_270EA6450;
  *((_DWORD *)this + 4) = 10;
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  LogDumpDB::init(this);
}

void sub_2636AE554(_Unwind_Exception *a1)
{
  std::vector<ResetInfo>::~vector[abi:ne180100](v2);
  MEMORY[0x263E68B30](v1);
  _Unwind_Resume(a1);
}

void LogDumpDB::init(LogDumpDB *this)
{
  int v36 = 0;
  pthread_mutex_lock(&ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance);
  uint64_t v2 = xmmword_26A99F080;
  if (!(void)xmmword_26A99F080)
  {
    SharedData::create_default_global(__p);
    long long v3 = *(_OWORD *)__p;
    *(void *)std::vector<std::csub_match> __p = 0;
    *(void *)&__p[8] = 0;
    unint64_t v4 = (std::__shared_weak_count *)*((void *)&xmmword_26A99F080 + 1);
    xmmword_26A99F080 = v3;
    if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    uint64_t v5 = *(std::__shared_weak_count **)&__p[8];
    if (*(void *)&__p[8]
      && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&__p[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    uint64_t v2 = xmmword_26A99F080;
  }
  char v6 = (std::__shared_weak_count *)*((void *)&xmmword_26A99F080 + 1);
  if (*((void *)&xmmword_26A99F080 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&xmmword_26A99F080 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance);
  __p[23] = 16;
  strcpy(__p, "Log Dump History");
  os_unfair_lock_lock((os_unfair_lock_t)(v2 + 40));
  Preferences::getPreference<__CFArray const*>((uint64_t (***)(void, uint64_t))v2, __p, &v36);
  os_unfair_lock_unlock((os_unfair_lock_t)(v2 + 40));
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    unint64_t v7 = v36;
    unint64_t v35 = v36;
    if (!v36) {
      goto LABEL_71;
    }
  }
  else
  {
    unint64_t v7 = v36;
    unint64_t v35 = v36;
    if (!v36) {
      goto LABEL_71;
    }
  }
  CFRetain(v7);
  if (ctu::SharedRef<__CFArray const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFArray const>::get)
  {
    uint64_t Count = CFArrayGetCount((CFArrayRef)v7);
    if (Count)
    {
      CFIndex v8 = 0;
      int v19 = (char *)*MEMORY[0x263F26030];
      char v9 = (const char *)*MEMORY[0x263F263C0];
      int v10 = (const char *)*MEMORY[0x263F26148];
      unint64_t v11 = (const char *)*MEMORY[0x263F26368];
      long long v12 = (const char *)*MEMORY[0x263F26298];
      do
      {
        ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)v7, v8);
        std::vector<std::ssub_match>::size_type v14 = ValueAtIndex;
        if (ValueAtIndex && (CFTypeID v15 = CFGetTypeID(ValueAtIndex), v15 == CFDictionaryGetTypeID()))
        {
          uint64_t v34 = v14;
          CFRetain(v14);
        }
        else
        {
          std::vector<std::ssub_match>::size_type v14 = 0;
          uint64_t v34 = 0;
        }
        v33[0] = 0xAAAAAAAAAAAAAAAALL;
        v33[1] = 0xAAAAAAAAAAAAAAAALL;
        ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v33, (const __CFDictionary *)v14);
        memset((char *)&v32[1] + 8, 170, 24);
        memset(__p, 0, 24);
        ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)v32, v19);
        ctu::cf::map_adapter::getString();
        MEMORY[0x263E68C90](v32);
        if ((__p[23] & 0x80000000) != 0) {
          operator delete(*(void **)__p);
        }
        memset(v32, 170, 24);
        memset(__p, 0, 24);
        ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)v31, v9);
        ctu::cf::map_adapter::getString();
        MEMORY[0x263E68C90](v31);
        if ((__p[23] & 0x80000000) != 0) {
          operator delete(*(void **)__p);
        }
        memset(v31, 170, sizeof(v31));
        memset(__p, 0, 24);
        ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)v30, v10);
        ctu::cf::map_adapter::getString();
        MEMORY[0x263E68C90](v30);
        if ((__p[23] & 0x80000000) != 0) {
          operator delete(*(void **)__p);
        }
        memset(v30, 170, sizeof(v30));
        memset(__p, 0, 24);
        ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v29, v11);
        ctu::cf::map_adapter::getString();
        MEMORY[0x263E68C90](&v29);
        if ((__p[23] & 0x80000000) != 0) {
          operator delete(*(void **)__p);
        }
        memset(&v29, 170, sizeof(v29));
        memset(__p, 0, 24);
        ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)v37, v12);
        ctu::cf::map_adapter::getString();
        MEMORY[0x263E68C90](v37);
        if ((__p[23] & 0x80000000) != 0) {
          operator delete(*(void **)__p);
        }
        *(void *)&long long v16 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v16 + 1) = 0xAAAAAAAAAAAAAAAALL;
        *(_OWORD *)long long v27 = v16;
        long long v28 = v16;
        *(_OWORD *)int v25 = v16;
        long long v26 = v16;
        *(_OWORD *)&__p[16] = v16;
        long long v24 = v16;
        *(_OWORD *)std::vector<std::csub_match> __p = v16;
        if (SHIBYTE(v32[2]) < 0) {
          std::string::__init_copy_ctor_external(&v22, *((const std::string::value_type **)&v32[1] + 1), *(std::string::size_type *)&v32[2]);
        }
        else {
          std::string v22 = *(std::string *)((char *)&v32[1] + 8);
        }
        if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v21, v29.__r_.__value_.__l.__data_, v29.__r_.__value_.__l.__size_);
        }
        else {
          std::string v21 = v29;
        }
        ResetInfo::ResetInfo((std::string *)__p, (long long *)v31, (long long *)v30, v32, (uint64_t)&v22, 7, (long long *)&v21);
        if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v21.__r_.__value_.__l.__data_);
          if ((SHIBYTE(v22.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_45:
            uint64_t v17 = (std::string *)*((void *)this + 4);
            if ((unint64_t)v17 < *((void *)this + 5)) {
              goto LABEL_46;
            }
            goto LABEL_49;
          }
        }
        else if ((SHIBYTE(v22.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          goto LABEL_45;
        }
        operator delete(v22.__r_.__value_.__l.__data_);
        uint64_t v17 = (std::string *)*((void *)this + 4);
        if ((unint64_t)v17 < *((void *)this + 5))
        {
LABEL_46:
          ResetInfo::ResetInfo(v17, (const ResetInfo *)__p);
          long long v18 = &v17[4].__r_.__value_.__s.__data_[16];
          *((void *)this + 4) = (char *)v17 + 112;
          goto LABEL_50;
        }
LABEL_49:
        long long v18 = std::vector<ResetInfo>::__push_back_slow_path<ResetInfo const&>((void *)this + 3, (const ResetInfo *)__p);
LABEL_50:
        *((void *)this + 4) = v18;
        if (SHIBYTE(v28) < 0)
        {
          operator delete(v27[1]);
          if ((SBYTE7(v26) & 0x80000000) == 0)
          {
LABEL_52:
            if ((SHIBYTE(v24) & 0x80000000) == 0) {
              goto LABEL_53;
            }
            goto LABEL_63;
          }
        }
        else if ((SBYTE7(v26) & 0x80000000) == 0)
        {
          goto LABEL_52;
        }
        operator delete(v25[0]);
        if ((SHIBYTE(v24) & 0x80000000) == 0)
        {
LABEL_53:
          if ((__p[23] & 0x80000000) == 0) {
            goto LABEL_54;
          }
          goto LABEL_64;
        }
LABEL_63:
        operator delete(*(void **)&__p[24]);
        if ((__p[23] & 0x80000000) == 0)
        {
LABEL_54:
          if ((SHIBYTE(v29.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_55;
          }
          goto LABEL_65;
        }
LABEL_64:
        operator delete(*(void **)__p);
        if ((SHIBYTE(v29.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_55:
          if ((SHIBYTE(v30[2]) & 0x80000000) == 0) {
            goto LABEL_56;
          }
          goto LABEL_66;
        }
LABEL_65:
        operator delete(v29.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v30[2]) & 0x80000000) == 0)
        {
LABEL_56:
          if ((v31[23] & 0x80000000) == 0) {
            goto LABEL_57;
          }
          goto LABEL_67;
        }
LABEL_66:
        operator delete(v30[0]);
        if ((v31[23] & 0x80000000) == 0)
        {
LABEL_57:
          if ((SBYTE7(v32[1]) & 0x80000000) == 0) {
            goto LABEL_58;
          }
          goto LABEL_68;
        }
LABEL_67:
        operator delete(*(void **)v31);
        if ((SBYTE7(v32[1]) & 0x80000000) == 0)
        {
LABEL_58:
          if ((SHIBYTE(v32[2]) & 0x80000000) == 0) {
            goto LABEL_59;
          }
          goto LABEL_69;
        }
LABEL_68:
        operator delete(*(void **)&v32[0]);
        if ((SHIBYTE(v32[2]) & 0x80000000) == 0)
        {
LABEL_59:
          MEMORY[0x263E68CD0](v33);
          if (!v14) {
            goto LABEL_22;
          }
LABEL_70:
          CFRelease(v14);
          goto LABEL_22;
        }
LABEL_69:
        operator delete(*((void **)&v32[1] + 1));
        MEMORY[0x263E68CD0](v33);
        if (v14) {
          goto LABEL_70;
        }
LABEL_22:
        ++v8;
      }
      while (Count != v8);
    }
  }
LABEL_71:
  if (v7) {
    CFRelease(v7);
  }
}

void sub_2636AEBBC(_Unwind_Exception *a1)
{
}

void sub_2636AEBDC(_Unwind_Exception *a1)
{
  ctu::cf::CFSharedRef<__CFArray const>::~CFSharedRef((const void **)(v1 - 120));
  _Unwind_Resume(a1);
}

void sub_2636AEC00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,void *a51,uint64_t a52,int a53,__int16 a54,char a55,char a56)
{
  if (a25 < 0)
  {
    operator delete(__p);
    if ((a50 & 0x80000000) == 0) {
      goto LABEL_6;
    }
  }
  else if ((a50 & 0x80000000) == 0)
  {
LABEL_6:
    if (a56 < 0) {
      operator delete(a51);
    }
    if (*(char *)(v56 - 193) < 0) {
      operator delete(*(void **)(v56 - 216));
    }
    if (*(char *)(v56 - 169) < 0) {
      operator delete(*(void **)(v56 - 192));
    }
    if (*(char *)(v56 - 145) < 0) {
      operator delete(*(void **)(v56 - 168));
    }
    MEMORY[0x263E68CD0](v56 - 144);
    ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)(v56 - 128));
    ctu::cf::CFSharedRef<__CFArray const>::~CFSharedRef((const void **)(v56 - 120));
    _Unwind_Resume(a1);
  }
  operator delete(a45);
  goto LABEL_6;
}

void **std::vector<ResetInfo>::~vector[abi:ne180100](void **a1)
{
  uint64_t v2 = (void **)*a1;
  if (*a1)
  {
    long long v3 = (void **)a1[1];
    unint64_t v4 = *a1;
    if (v3 == v2)
    {
LABEL_15:
      a1[1] = v2;
      operator delete(v4);
      return a1;
    }
    while (1)
    {
      if (*((char *)v3 - 1) < 0)
      {
        operator delete(*(v3 - 3));
        if ((*((char *)v3 - 41) & 0x80000000) == 0)
        {
LABEL_7:
          if ((*((char *)v3 - 65) & 0x80000000) == 0) {
            goto LABEL_8;
          }
          goto LABEL_12;
        }
      }
      else if ((*((char *)v3 - 41) & 0x80000000) == 0)
      {
        goto LABEL_7;
      }
      operator delete(*(v3 - 8));
      if ((*((char *)v3 - 65) & 0x80000000) == 0)
      {
LABEL_8:
        if (*((char *)v3 - 89) < 0) {
          goto LABEL_13;
        }
        goto LABEL_4;
      }
LABEL_12:
      operator delete(*(v3 - 11));
      if (*((char *)v3 - 89) < 0) {
LABEL_13:
      }
        operator delete(*(v3 - 14));
LABEL_4:
      v3 -= 14;
      if (v3 == v2)
      {
        unint64_t v4 = *a1;
        goto LABEL_15;
      }
    }
  }
  return a1;
}

void sub_2636AEF1C(_Unwind_Exception *a1)
{
  unint64_t v4 = v3;
  char v9 = v4;
  char v6 = (void **)*v4;
  if (*v4)
  {
    unint64_t v7 = *(void ***)(v2 + 32);
    CFIndex v8 = *v4;
    if (v7 != v6)
    {
      do
        ResetInfo::~ResetInfo(v7 - 14);
      while (v7 != v6);
      CFIndex v8 = *v9;
    }
    *(void *)(v2 + 32) = v6;
    operator delete(v8);
  }
  MEMORY[0x263E68B30](v1);
  _Unwind_Resume(a1);
}

uint64_t ctu::SharedRef<__CFArray const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFArray const>::get(uint64_t a1)
{
  return *(void *)a1;
}

const void **ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

const void **ctu::cf::CFSharedRef<__CFArray const>::~CFSharedRef(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

BOOL LogDumpDB::isDuplicated(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v32 = 0;
  if (*(char *)(a2 + 47) < 0) {
    std::string::__init_copy_ctor_external(&v31, *(const std::string::value_type **)(a2 + 24), *(void *)(a2 + 32));
  }
  else {
    std::string v31 = *(std::string *)(a2 + 24);
  }
  int v6 = SHIBYTE(v31.__r_.__value_.__r.__words[2]);
  if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t size = HIBYTE(v31.__r_.__value_.__r.__words[2]);
  }
  else {
    size_t size = v31.__r_.__value_.__l.__size_;
  }
  if (size != strlen((const char *)*MEMORY[0x263F267A8]))
  {
    BOOL v9 = 0;
    if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
      goto LABEL_16;
    }
LABEL_14:
    if (!v9) {
      goto LABEL_17;
    }
    return 0;
  }
  if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    CFIndex v8 = &v31;
  }
  else {
    CFIndex v8 = (std::string *)v31.__r_.__value_.__r.__words[0];
  }
  BOOL v9 = memcmp(v8, (const void *)*MEMORY[0x263F267A8], size) == 0;
  if ((v6 & 0x80000000) == 0) {
    goto LABEL_14;
  }
LABEL_16:
  operator delete(v31.__r_.__value_.__l.__data_);
  if (v9) {
    return 0;
  }
LABEL_17:
  unint64_t v11 = *(NSObject **)(a1 + 8);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
  {
    LOWORD(v31.__r_.__value_.__l.__data_) = 0;
    _os_log_debug_impl(&dword_26368A000, v11, OS_LOG_TYPE_DEBUG, "#D Checking if log dump is duplicated", (uint8_t *)&v31, 2u);
  }
  long long v12 = *(const ResetInfo **)(a1 + 24);
  int v13 = *(const ResetInfo **)(a1 + 32);
  v22[0] = &v32;
  v22[1] = a1;
  ResetInfo::ResetInfo(&v23, (const ResetInfo *)a2);
  uint64_t v30 = a3;
  if (v12 != v13)
  {
    while (!LogDumpDB::isDuplicated(ResetInfo const&,std::chrono::duration<long long,std::ratio<1l,1l>>)::$_0::operator()((uint64_t)v22, v12))
    {
      long long v12 = (const ResetInfo *)((char *)v12 + 112);
      if (v12 == v13)
      {
        long long v12 = v13;
        goto LABEL_29;
      }
    }
    if (v12 != v13)
    {
      for (unint64_t i = (char *)v12 + 112; i != (char *)v13; i += 112)
      {
        if (!LogDumpDB::isDuplicated(ResetInfo const&,std::chrono::duration<long long,std::ratio<1l,1l>>)::$_0::operator()((uint64_t)v22, (const ResetInfo *)i))
        {
          ResetInfo::operator=((char *)v12, i);
          long long v12 = (const ResetInfo *)((char *)v12 + 112);
        }
      }
    }
  }
LABEL_29:
  if (v29 < 0)
  {
    operator delete(__p);
    if ((v27 & 0x80000000) == 0)
    {
LABEL_31:
      if ((v25 & 0x80000000) == 0) {
        goto LABEL_32;
      }
      goto LABEL_38;
    }
  }
  else if ((v27 & 0x80000000) == 0)
  {
    goto LABEL_31;
  }
  operator delete(v26);
  if ((v25 & 0x80000000) == 0)
  {
LABEL_32:
    if ((SHIBYTE(v23.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_33;
    }
    goto LABEL_39;
  }
LABEL_38:
  operator delete(v24);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
  {
LABEL_39:
    operator delete(v23.__r_.__value_.__l.__data_);
    CFTypeID v15 = *(const ResetInfo **)(a1 + 32);
    if (v12 == v15) {
      goto LABEL_34;
    }
    while (1)
    {
LABEL_42:
      if (v15 == v12)
      {
        *(void *)(a1 + 32) = v12;
        if (!v32) {
          goto LABEL_53;
        }
        goto LABEL_54;
      }
      if (*((char *)v15 - 1) < 0)
      {
        operator delete(*((void **)v15 - 3));
        if ((*((char *)v15 - 41) & 0x80000000) == 0)
        {
LABEL_45:
          if (*((char *)v15 - 65) < 0) {
            goto LABEL_50;
          }
          goto LABEL_46;
        }
      }
      else if ((*((char *)v15 - 41) & 0x80000000) == 0)
      {
        goto LABEL_45;
      }
      operator delete(*((void **)v15 - 8));
      if (*((char *)v15 - 65) < 0)
      {
LABEL_50:
        operator delete(*((void **)v15 - 11));
        if ((*((char *)v15 - 89) & 0x80000000) == 0) {
          goto LABEL_41;
        }
        goto LABEL_51;
      }
LABEL_46:
      if ((*((char *)v15 - 89) & 0x80000000) == 0) {
        goto LABEL_41;
      }
LABEL_51:
      operator delete(*((void **)v15 - 14));
LABEL_41:
      CFTypeID v15 = (const ResetInfo *)((char *)v15 - 112);
    }
  }
LABEL_33:
  CFTypeID v15 = *(const ResetInfo **)(a1 + 32);
  if (v12 != v15) {
    goto LABEL_42;
  }
LABEL_34:
  if (v32) {
    goto LABEL_54;
  }
LABEL_53:
  long long v16 = *(NSObject **)(a1 + 8);
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
  {
    LOWORD(v31.__r_.__value_.__l.__data_) = 0;
    _os_log_debug_impl(&dword_26368A000, v16, OS_LOG_TYPE_DEBUG, "#D Not found duplicated log", (uint8_t *)&v31, 2u);
    long long v12 = *(const ResetInfo **)(a1 + 32);
    if ((unint64_t)v12 < *(void *)(a1 + 40)) {
      goto LABEL_55;
    }
LABEL_57:
    uint64_t v17 = std::vector<ResetInfo>::__push_back_slow_path<ResetInfo const&>((void *)(a1 + 24), (const ResetInfo *)a2);
    goto LABEL_58;
  }
LABEL_54:
  if ((unint64_t)v12 >= *(void *)(a1 + 40)) {
    goto LABEL_57;
  }
LABEL_55:
  ResetInfo::ResetInfo((std::string *)v12, (const ResetInfo *)a2);
  uint64_t v17 = (char *)v12 + 112;
  *(void *)(a1 + 32) = (char *)v12 + 112;
LABEL_58:
  *(void *)(a1 + 32) = v17;
  long long v18 = *(char **)(a1 + 24);
  if (0x6DB6DB6DB6DB6DB7 * ((v17 - v18) >> 4) <= (unint64_t)*(unsigned int *)(a1 + 16)) {
    goto LABEL_76;
  }
  if (v18 + 112 == v17)
  {
    int v19 = *(std::string::value_type **)(a1 + 24);
  }
  else
  {
    int v19 = *(std::string::value_type **)(a1 + 24);
    do
    {
      uint64_t v20 = v18 + 112;
      v19 += 112;
      std::string v21 = ResetInfo::operator=(v18, v18 + 112) + 224;
      long long v18 = v20;
    }
    while (v21 != v17);
    uint64_t v17 = *(std::string::value_type **)(a1 + 32);
  }
  while (v17 != v19)
  {
    if (*(v17 - 1) < 0)
    {
      operator delete(*((void **)v17 - 3));
      if ((*(v17 - 41) & 0x80000000) == 0)
      {
LABEL_68:
        if (*(v17 - 65) < 0) {
          goto LABEL_73;
        }
        goto LABEL_69;
      }
    }
    else if ((*(v17 - 41) & 0x80000000) == 0)
    {
      goto LABEL_68;
    }
    operator delete(*((void **)v17 - 8));
    if (*(v17 - 65) < 0)
    {
LABEL_73:
      operator delete(*((void **)v17 - 11));
      if ((*(v17 - 89) & 0x80000000) == 0) {
        goto LABEL_64;
      }
      goto LABEL_74;
    }
LABEL_69:
    if ((*(v17 - 89) & 0x80000000) == 0) {
      goto LABEL_64;
    }
LABEL_74:
    operator delete(*((void **)v17 - 14));
LABEL_64:
    v17 -= 112;
  }
  *(void *)(a1 + 32) = v19;
LABEL_76:
  LogDumpDB::commitToDisk((LogDumpDB *)a1);
  return v32 != 0;
}

void sub_2636AF468(_Unwind_Exception *a1)
{
  *(void *)(v1 + 32) = v2;
  _Unwind_Resume(a1);
}

void sub_2636AF470(_Unwind_Exception *a1)
{
  ResetInfo::~ResetInfo(v1);
  _Unwind_Resume(a1);
}

void sub_2636AF484(_Unwind_Exception *a1)
{
  ResetInfo::~ResetInfo(v1);
  _Unwind_Resume(a1);
}

void LogDumpDB::commitToDisk(LogDumpDB *this)
{
  uint64_t v36 = *MEMORY[0x263EF8340];
  CFMutableArrayRef cf = 0;
  CFAllocatorRef v2 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF70]);
  unint64_t v4 = Mutable;
  if (Mutable) {
    CFMutableArrayRef cf = Mutable;
  }
  int v6 = (long long *)*((void *)this + 3);
  uint64_t v5 = (long long *)*((void *)this + 4);
  long long v28 = this;
  if (v6 != v5)
  {
    std::string v31 = (const __CFString **)*MEMORY[0x263F26030];
    uint64_t v30 = (const __CFString **)*MEMORY[0x263F26148];
    char v29 = (const __CFString **)*MEMORY[0x263F26368];
    unint64_t v7 = (const __CFString **)*MEMORY[0x263F263C0];
    CFIndex v8 = (const __CFString **)*MEMORY[0x263F26298];
    do
    {
      BOOL v9 = CFDictionaryCreateMutable(v2, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
      uint64_t v10 = *((void *)v6 + 9);
      unint64_t v11 = operator new(0x38uLL);
      v11[8] = 0;
      *(void *)unint64_t v11 = 0;
      *((void *)v11 + 1) = 0;
      *((void *)v11 + 2) = &v35.__r_.__value_.__l.__size_;
      v35.__r_.__value_.__r.__words[0] = (std::string::size_type)v11;
      v35.__r_.__value_.__l.__size_ = (std::string::size_type)v11;
      *((unsigned char *)v11 + 24) = 1;
      v35.__r_.__value_.__r.__words[2] = 1;
      *((void *)v11 + 5) = v10;
      *((void *)v11 + 6) = 0xAAAAAAAA00000000;
      Timestamp::asString((uint64_t)&v35, 0, 9, &__p);
      std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&v35, (void *)v35.__r_.__value_.__l.__size_);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v35, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
      }
      else {
        std::string v35 = __p;
      }
      ctu::cf::insert<char const*,std::string>(v9, v31, (uint64_t)&v35, (uint64_t)v2, v12);
      if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v35.__r_.__value_.__l.__data_);
        if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_11:
          if ((*((char *)v6 + 23) & 0x80000000) == 0) {
            goto LABEL_12;
          }
          goto LABEL_15;
        }
      }
      else if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_11;
      }
      operator delete(__p.__r_.__value_.__l.__data_);
      if ((*((char *)v6 + 23) & 0x80000000) == 0)
      {
LABEL_12:
        long long v14 = *v6;
        __p.__r_.__value_.__r.__words[2] = *((void *)v6 + 2);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v14;
        goto LABEL_16;
      }
LABEL_15:
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v6, *((void *)v6 + 1));
LABEL_16:
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v35, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
      }
      else {
        std::string v35 = __p;
      }
      ctu::cf::insert<char const*,std::string>(v9, v30, (uint64_t)&v35, (uint64_t)v2, v13);
      if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v35.__r_.__value_.__l.__data_);
        if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_21:
          if ((*((char *)v6 + 47) & 0x80000000) == 0) {
            goto LABEL_22;
          }
          goto LABEL_25;
        }
      }
      else if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_21;
      }
      operator delete(__p.__r_.__value_.__l.__data_);
      if ((*((char *)v6 + 47) & 0x80000000) == 0)
      {
LABEL_22:
        long long v16 = *(long long *)((char *)v6 + 24);
        __p.__r_.__value_.__r.__words[2] = *((void *)v6 + 5);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v16;
        goto LABEL_26;
      }
LABEL_25:
      std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)v6 + 3), *((void *)v6 + 4));
LABEL_26:
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v35, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
      }
      else {
        std::string v35 = __p;
      }
      ctu::cf::insert<char const*,std::string>(v9, v29, (uint64_t)&v35, (uint64_t)v2, v15);
      if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v35.__r_.__value_.__l.__data_);
        if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_31:
          if ((*((char *)v6 + 71) & 0x80000000) == 0) {
            goto LABEL_32;
          }
          goto LABEL_35;
        }
      }
      else if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_31;
      }
      operator delete(__p.__r_.__value_.__l.__data_);
      if ((*((char *)v6 + 71) & 0x80000000) == 0)
      {
LABEL_32:
        long long v18 = v6[3];
        __p.__r_.__value_.__r.__words[2] = *((void *)v6 + 8);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v18;
        goto LABEL_36;
      }
LABEL_35:
      std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)v6 + 6), *((void *)v6 + 7));
LABEL_36:
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v35, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
      }
      else {
        std::string v35 = __p;
      }
      ctu::cf::insert<char const*,std::string>(v9, v7, (uint64_t)&v35, (uint64_t)v2, v17);
      if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v35.__r_.__value_.__l.__data_);
        if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_41:
          if ((*((char *)v6 + 111) & 0x80000000) == 0) {
            goto LABEL_42;
          }
          goto LABEL_45;
        }
      }
      else if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_41;
      }
      operator delete(__p.__r_.__value_.__l.__data_);
      if ((*((char *)v6 + 111) & 0x80000000) == 0)
      {
LABEL_42:
        long long v20 = *(long long *)((char *)v6 + 88);
        __p.__r_.__value_.__r.__words[2] = *((void *)v6 + 13);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
        goto LABEL_46;
      }
LABEL_45:
      std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)v6 + 11), *((void *)v6 + 12));
LABEL_46:
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v35, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
      }
      else {
        std::string v35 = __p;
      }
      ctu::cf::insert<char const*,std::string>(v9, v8, (uint64_t)&v35, (uint64_t)v2, v19);
      if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v35.__r_.__value_.__l.__data_);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
LABEL_54:
        }
          operator delete(__p.__r_.__value_.__l.__data_);
      }
      else if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        goto LABEL_54;
      }
      CFArrayAppendValue(v4, v9);
      if (v9) {
        CFRelease(v9);
      }
      v6 += 7;
    }
    while (v6 != v5);
  }
  std::string v21 = *((void *)v28 + 1);
  if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG))
  {
    LODWORD(v35.__r_.__value_.__l.__data_) = 138412290;
    *(std::string::size_type *)((char *)v35.__r_.__value_.__r.__words + 4) = (std::string::size_type)v4;
    _os_log_debug_impl(&dword_26368A000, v21, OS_LOG_TYPE_DEBUG, "#D Current tracking list: %@", (uint8_t *)&v35, 0xCu);
  }
  pthread_mutex_lock(&ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance);
  std::string v22 = (os_unfair_lock_s *)xmmword_26A99F080;
  if (!(void)xmmword_26A99F080)
  {
    SharedData::create_default_global(&v35);
    long long v23 = *(_OWORD *)&v35.__r_.__value_.__l.__data_;
    *(_OWORD *)&v35.__r_.__value_.__l.__data_ = 0uLL;
    long long v24 = (std::__shared_weak_count *)*((void *)&xmmword_26A99F080 + 1);
    xmmword_26A99F080 = v23;
    if (v24 && !atomic_fetch_add(&v24->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
    size_t size = (std::__shared_weak_count *)v35.__r_.__value_.__l.__size_;
    if (v35.__r_.__value_.__l.__size_
      && !atomic_fetch_add((atomic_ullong *volatile)(v35.__r_.__value_.__l.__size_ + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
    std::string v22 = (os_unfair_lock_s *)xmmword_26A99F080;
  }
  long long v26 = (std::__shared_weak_count *)*((void *)&xmmword_26A99F080 + 1);
  if (*((void *)&xmmword_26A99F080 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&xmmword_26A99F080 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance);
  *((unsigned char *)&__p.__r_.__value_.__s + 23) = 16;
  strcpy((char *)&__p, "Log Dump History");
  CFMutableArrayRef v34 = cf;
  v35.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  v35.__r_.__value_.__l.__size_ = (std::string::size_type)&v34;
  v35.__r_.__value_.__r.__words[2] = (std::string::size_type)v22;
  ctu::SharedLockable<SharedData>::execute_sync<BOOL SharedData::setPreference<__CFArray *>(std::string const&,__CFArray *)::{lambda(void)#1}>(v22 + 6, (uint64_t *)&v35);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v26 && !atomic_fetch_add(&v26->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
    std::__shared_weak_count::__release_weak(v26);
    CFMutableArrayRef v27 = cf;
    if (!cf) {
      return;
    }
  }
  else
  {
    CFMutableArrayRef v27 = cf;
    if (!cf) {
      return;
    }
  }
  CFRelease(v27);
}

void sub_2636AFADC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, const void *a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
}

const void **ctu::cf::CFSharedRef<__CFArray>::~CFSharedRef(const void **a1)
{
  CFAllocatorRef v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

const char *LogDumpDB::getName(LogDumpDB *this)
{
  return "Log Dump History";
}

BOOL LogDumpDB::checkIfDuplicatedSignature(LogDumpDB *this, const ResetInfo *a2, const ResetInfo *a3)
{
  uint64_t v97 = *MEMORY[0x263EF8340];
  if (*((char *)a3 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v94, *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else {
    std::string v94 = *(std::string *)a3;
  }
  if (*((char *)a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v96, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else {
    std::string v96 = *(std::string *)a2;
  }
  int v6 = SHIBYTE(v96.__r_.__value_.__r.__words[2]);
  unint64_t v7 = (void *)v96.__r_.__value_.__r.__words[0];
  char v8 = HIBYTE(v94.__r_.__value_.__r.__words[2]);
  if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v94.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v94.__r_.__value_.__l.__size_;
  }
  if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v10 = &v94;
  }
  else {
    uint64_t v10 = (std::string *)v94.__r_.__value_.__r.__words[0];
  }
  if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v11 = HIBYTE(v96.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v11 = v96.__r_.__value_.__l.__size_;
  }
  if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    CFAllocatorRef v12 = &v96;
  }
  else {
    CFAllocatorRef v12 = (std::string *)v96.__r_.__value_.__r.__words[0];
  }
  if (v11 >= size) {
    size_t v13 = size;
  }
  else {
    size_t v13 = v11;
  }
  BOOL v14 = memcmp(v10, v12, v13) == 0;
  BOOL v15 = v11 == size && v14;
  if (v6 < 0)
  {
    operator delete(v7);
    if ((*((unsigned char *)&v94.__r_.__value_.__s + 23) & 0x80) == 0)
    {
LABEL_27:
      if (v15) {
        goto LABEL_28;
      }
LABEL_32:
      long long v16 = *((void *)this + 1);
      BOOL result = os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG);
      if (!result) {
        return result;
      }
      LOWORD(v94.__r_.__value_.__l.__data_) = 0;
      long long v18 = "#D Two reset types are not same. No need to check duplicated signature";
      goto LABEL_34;
    }
  }
  else if ((v8 & 0x80) == 0)
  {
    goto LABEL_27;
  }
  operator delete(v94.__r_.__value_.__l.__data_);
  if (!v15) {
    goto LABEL_32;
  }
LABEL_28:
  if (*((char *)a3 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v94, *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else {
    std::string v94 = *(std::string *)a3;
  }
  size_t v19 = strlen((const char *)*MEMORY[0x263F26178]);
  std::string::size_type v20 = v19;
  char v21 = HIBYTE(v94.__r_.__value_.__r.__words[2]);
  if ((SHIBYTE(v94.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (v19 != -1)
    {
      std::string v22 = &v94;
      std::string::size_type v23 = HIBYTE(v94.__r_.__value_.__r.__words[2]);
      goto LABEL_41;
    }
LABEL_254:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v19 == -1) {
    goto LABEL_254;
  }
  std::string::size_type v23 = v94.__r_.__value_.__l.__size_;
  std::string v22 = (std::string *)v94.__r_.__value_.__r.__words[0];
LABEL_41:
  if (v23 >= v20) {
    size_t v24 = v20;
  }
  else {
    size_t v24 = v23;
  }
  BOOL v25 = memcmp(v22, (const void *)*MEMORY[0x263F26178], v24) == 0;
  BOOL v26 = v23 == v20 && v25;
  if ((v21 & 0x80) == 0)
  {
    if (v26) {
      goto LABEL_49;
    }
LABEL_53:
    if (*((char *)a2 + 71) < 0) {
      std::string::__init_copy_ctor_external(&v94, *((const std::string::value_type **)a2 + 6), *((void *)a2 + 7));
    }
    else {
      std::string v94 = *(std::string *)((unsigned char *)a2 + 2);
    }
    long long v28 = (_OWORD *)((char *)a3 + 48);
    if (*((char *)a3 + 71) < 0)
    {
      std::string::__init_copy_ctor_external(&v96, *((const std::string::value_type **)a3 + 6), *((void *)a3 + 7));
    }
    else
    {
      *(_OWORD *)&v96.__r_.__value_.__l.__data_ = *v28;
      v96.__r_.__value_.__r.__words[2] = *((void *)a3 + 8);
    }
    *(void *)std::string __dst = operator new(0x68uLL);
    *(_OWORD *)&__dst[8] = xmmword_2637A5F60;
    strcpy(*(char **)__dst, "(Power assertion watchdog fired for 'com.apple.AppleBasebandManager.RadioNotReady.Bootup'; Timeout =).*");
    int v29 = util::compareTwoStringsWithPattern((uint64_t)&v94, (uint64_t)&v96, (uint64_t)__dst);
    if ((__dst[23] & 0x80000000) != 0)
    {
      operator delete(*(void **)__dst);
      if ((SHIBYTE(v96.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_61:
        if ((SHIBYTE(v94.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_62;
        }
        goto LABEL_121;
      }
    }
    else if ((SHIBYTE(v96.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_61;
    }
    operator delete(v96.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v94.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_62:
      if (!v29) {
        return 0;
      }
      goto LABEL_122;
    }
LABEL_121:
    operator delete(v94.__r_.__value_.__l.__data_);
    if (!v29) {
      return 0;
    }
LABEL_122:
    uint64_t v50 = *((void *)this + 1);
    if (!os_log_type_enabled(v50, OS_LOG_TYPE_DEBUG)) {
      return 1;
    }
    if (*((char *)a3 + 71) < 0)
    {
      std::string::__init_copy_ctor_external(&v94, *((const std::string::value_type **)a3 + 6), *((void *)a3 + 7));
    }
    else
    {
      *(_OWORD *)&v94.__r_.__value_.__l.__data_ = *v28;
      v94.__r_.__value_.__r.__words[2] = *((void *)a3 + 8);
    }
    int64_t v91 = &v94;
    if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      int64_t v91 = (std::string *)v94.__r_.__value_.__r.__words[0];
    }
    LODWORD(v96.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)v96.__r_.__value_.__r.__words + 4) = (std::string::size_type)v91;
LABEL_244:
    _os_log_debug_impl(&dword_26368A000, v50, OS_LOG_TYPE_DEBUG, "#D This is duplicated signature based on the dump reason: \"%s\"", (uint8_t *)&v96, 0xCu);
    if ((SHIBYTE(v94.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return 1;
    }
    operator delete(v94.__r_.__value_.__l.__data_);
    return 1;
  }
  operator delete(v94.__r_.__value_.__l.__data_);
  if (!v26) {
    goto LABEL_53;
  }
LABEL_49:
  CFMutableArrayRef v27 = *((void *)this + 1);
  if (os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG))
  {
    if (*((char *)a3 + 111) < 0) {
      std::string::__init_copy_ctor_external(&v94, *((const std::string::value_type **)a3 + 11), *((void *)a3 + 12));
    }
    else {
      std::string v94 = *(std::string *)((char *)a3 + 88);
    }
    int v75 = SHIBYTE(v94.__r_.__value_.__r.__words[2]);
    std::string::size_type v76 = v94.__r_.__value_.__r.__words[0];
    if (*((char *)a2 + 111) < 0) {
      std::string::__init_copy_ctor_external(&v96, *((const std::string::value_type **)a2 + 11), *((void *)a2 + 12));
    }
    else {
      std::string v96 = *(std::string *)((char *)a2 + 88);
    }
    unint64_t v77 = &v94;
    if (v75 < 0) {
      unint64_t v77 = (std::string *)v76;
    }
    uint64_t v78 = &v96;
    if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      uint64_t v78 = (std::string *)v96.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)std::string __dst = 136315394;
    *(void *)&__dst[4] = v77;
    *(_WORD *)&__dst[12] = 2080;
    *(void *)&__dst[14] = v78;
    _os_log_debug_impl(&dword_26368A000, v27, OS_LOG_TYPE_DEBUG, "#D Comparing current reason, \"%s\", and the recorded reason, \"%s\"", __dst, 0x16u);
    if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v96.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v94.__r_.__value_.__l.__data_);
    }
  }
  if (*((char *)a3 + 111) < 0) {
    std::string::__init_copy_ctor_external(&v94, *((const std::string::value_type **)a3 + 11), *((void *)a3 + 12));
  }
  else {
    std::string v94 = *(std::string *)((char *)a3 + 88);
  }
  if (*((char *)a2 + 111) < 0) {
    std::string::__init_copy_ctor_external(&v96, *((const std::string::value_type **)a2 + 11), *((void *)a2 + 12));
  }
  else {
    std::string v96 = *(std::string *)((char *)a2 + 88);
  }
  int v30 = SHIBYTE(v96.__r_.__value_.__r.__words[2]);
  std::string v31 = (void *)v96.__r_.__value_.__r.__words[0];
  char v32 = HIBYTE(v94.__r_.__value_.__r.__words[2]);
  if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v33 = HIBYTE(v94.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v33 = v94.__r_.__value_.__l.__size_;
  }
  if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    CFMutableArrayRef v34 = &v94;
  }
  else {
    CFMutableArrayRef v34 = (std::string *)v94.__r_.__value_.__r.__words[0];
  }
  if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v35 = HIBYTE(v96.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v35 = v96.__r_.__value_.__l.__size_;
  }
  if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v36 = &v96;
  }
  else {
    uint64_t v36 = (std::string *)v96.__r_.__value_.__r.__words[0];
  }
  if (v35 >= v33) {
    size_t v37 = v33;
  }
  else {
    size_t v37 = v35;
  }
  BOOL v38 = memcmp(v34, v36, v37) == 0;
  BOOL v39 = v35 == v33 && v38;
  if ((v30 & 0x80000000) == 0)
  {
    if ((v32 & 0x80) == 0) {
      goto LABEL_88;
    }
LABEL_116:
    operator delete(v94.__r_.__value_.__l.__data_);
    if (v39) {
      goto LABEL_89;
    }
    goto LABEL_117;
  }
  operator delete(v31);
  if ((*((unsigned char *)&v94.__r_.__value_.__s + 23) & 0x80) != 0) {
    goto LABEL_116;
  }
LABEL_88:
  if (!v39)
  {
LABEL_117:
    long long v16 = *((void *)this + 1);
    BOOL result = os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG);
    if (!result) {
      return result;
    }
    LOWORD(v94.__r_.__value_.__l.__data_) = 0;
    long long v18 = "#D Two crash reasons are not identical. No need to check duplicated signature";
LABEL_34:
    _os_log_debug_impl(&dword_26368A000, v16, OS_LOG_TYPE_DEBUG, v18, (uint8_t *)&v94, 2u);
    return 0;
  }
LABEL_89:
  uint64_t v40 = 0;
  uint64_t v41 = (_OWORD *)((char *)a3 + 48);
  do
  {
    if (*((char *)a2 + 71) < 0) {
      std::string::__init_copy_ctor_external(&v94, *((const std::string::value_type **)a2 + 6), *((void *)a2 + 7));
    }
    else {
      std::string v94 = *(std::string *)((unsigned char *)a2 + 2);
    }
    if (*((char *)a3 + 71) < 0)
    {
      std::string::__init_copy_ctor_external(&v96, *((const std::string::value_type **)a3 + 6), *((void *)a3 + 7));
    }
    else
    {
      *(_OWORD *)&v96.__r_.__value_.__l.__data_ = *v41;
      v96.__r_.__value_.__r.__words[2] = *((void *)a3 + 8);
    }
    uint64_t v42 = abm::kInterestingHardResetReasonSignatures[v40];
    size_t v43 = strlen(v42);
    if (v43 >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    size_t v44 = v43;
    if (v43 >= 0x17)
    {
      uint64_t v46 = (v43 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v43 | 7) != 0x17) {
        uint64_t v46 = v43 | 7;
      }
      uint64_t v47 = v46 + 1;
      uint64_t v45 = operator new(v46 + 1);
      *(void *)&__dst[8] = v44;
      *(void *)&__dst[16] = v47 | 0x8000000000000000;
      *(void *)std::string __dst = v45;
LABEL_103:
      memmove(v45, v42, v44);
      goto LABEL_104;
    }
    __dst[23] = v43;
    uint64_t v45 = __dst;
    if (v43) {
      goto LABEL_103;
    }
LABEL_104:
    v45[v44] = 0;
    int v48 = util::compareTwoStringsWithPattern((uint64_t)&v94, (uint64_t)&v96, (uint64_t)__dst);
    if ((__dst[23] & 0x80000000) != 0)
    {
      operator delete(*(void **)__dst);
      if ((SHIBYTE(v96.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_106:
        if ((SHIBYTE(v94.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_107;
        }
        goto LABEL_111;
      }
    }
    else if ((SHIBYTE(v96.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_106;
    }
    operator delete(v96.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v94.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_107:
      if (v48) {
        goto LABEL_125;
      }
      goto LABEL_112;
    }
LABEL_111:
    operator delete(v94.__r_.__value_.__l.__data_);
    if (v48)
    {
LABEL_125:
      uint64_t v50 = *((void *)this + 1);
      if (!os_log_type_enabled(v50, OS_LOG_TYPE_DEBUG)) {
        return 1;
      }
      if (*((char *)a3 + 71) < 0)
      {
        std::string::__init_copy_ctor_external(&v94, *((const std::string::value_type **)a3 + 6), *((void *)a3 + 7));
      }
      else
      {
        *(_OWORD *)&v94.__r_.__value_.__l.__data_ = *v41;
        v94.__r_.__value_.__r.__words[2] = *((void *)a3 + 8);
      }
      unint64_t v92 = &v94;
      if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        unint64_t v92 = (std::string *)v94.__r_.__value_.__r.__words[0];
      }
      LODWORD(v96.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)v96.__r_.__value_.__r.__words + 4) = (std::string::size_type)v92;
      goto LABEL_244;
    }
LABEL_112:
    ++v40;
  }
  while (v40 != 8);
  if (*((char *)a3 + 111) < 0)
  {
    std::string::__init_copy_ctor_external(&v94, *((const std::string::value_type **)a3 + 11), *((void *)a3 + 12));
    unint64_t v49 = (std::string *)((char *)a3 + 88);
  }
  else
  {
    unint64_t v49 = (std::string *)((char *)a3 + 88);
    std::string v94 = *(std::string *)((char *)a3 + 88);
  }
  int v51 = SHIBYTE(v94.__r_.__value_.__r.__words[2]);
  int v52 = (void *)v94.__r_.__value_.__r.__words[0];
  if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    BOOL v53 = &v94;
  }
  else {
    BOOL v53 = (std::string *)v94.__r_.__value_.__r.__words[0];
  }
  int64_t v54 = HIBYTE(v94.__r_.__value_.__r.__words[2]);
  if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    int64_t v54 = v94.__r_.__value_.__l.__size_;
  }
  unint64_t v55 = (char *)v53 + v54;
  if (v54 >= 17)
  {
    uint64_t v58 = v53;
    unint64_t v57 = this;
    do
    {
      uint64_t v56 = (char *)memchr(v58, 67, v54 - 16);
      if (!v56) {
        break;
      }
      if (*(void *)v56 == 0x63206D6F74737543 && *((void *)v56 + 1) == 0x7079742068736172 && v56[16] == 101) {
        goto LABEL_146;
      }
      uint64_t v58 = (std::string *)(v56 + 1);
      int64_t v54 = v55 - (char *)v58;
    }
    while (v55 - (char *)v58 > 16);
    uint64_t v56 = v55;
  }
  else
  {
    uint64_t v56 = (char *)v53 + v54;
    unint64_t v57 = this;
  }
LABEL_146:
  BOOL v62 = v56 == v55 || v56 - (char *)v53 == -1;
  if (v51 < 0) {
    operator delete(v52);
  }
  if (v62)
  {
    if (*((char *)a3 + 111) < 0)
    {
      std::string::__init_copy_ctor_external(&v94, *((const std::string::value_type **)a3 + 11), *((void *)a3 + 12));
      unint64_t v49 = (std::string *)((char *)a3 + 88);
    }
    else
    {
      std::string v94 = *v49;
    }
    int v64 = SHIBYTE(v94.__r_.__value_.__r.__words[2]);
    unint64_t v65 = (void *)v94.__r_.__value_.__r.__words[0];
    if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v66 = &v94;
    }
    else {
      int v66 = (std::string *)v94.__r_.__value_.__r.__words[0];
    }
    int64_t v67 = HIBYTE(v94.__r_.__value_.__r.__words[2]);
    if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      int64_t v67 = v94.__r_.__value_.__l.__size_;
    }
    char v68 = (char *)v66 + v67;
    if (v67 >= 18)
    {
      uint64_t v70 = v66;
      unint64_t v57 = this;
      do
      {
        int v69 = (char *)memchr(v70, 67, v67 - 17);
        if (!v69) {
          break;
        }
        if (*(void *)v69 == 0x7274206873617243
          && *((void *)v69 + 1) == 0x2064657265676769
          && *((_WORD *)v69 + 8) == 31074)
        {
          goto LABEL_179;
        }
        uint64_t v70 = (std::string *)(v69 + 1);
        int64_t v67 = v68 - (char *)v70;
      }
      while (v68 - (char *)v70 >= 18);
      int v69 = v68;
    }
    else
    {
      int v69 = (char *)v66 + v67;
      unint64_t v57 = this;
    }
LABEL_179:
    BOOL v74 = v69 == v68 || v69 - (char *)v66 == -1;
    if (v64 < 0) {
      operator delete(v65);
    }
    if (v74)
    {
      if (*((char *)a3 + 111) < 0)
      {
        std::string::__init_copy_ctor_external(&v94, *((const std::string::value_type **)a3 + 11), *((void *)a3 + 12));
        unint64_t v49 = (std::string *)((char *)a3 + 88);
      }
      else
      {
        std::string v94 = *v49;
      }
      int v79 = SHIBYTE(v94.__r_.__value_.__r.__words[2]);
      uint64_t v80 = (void *)v94.__r_.__value_.__r.__words[0];
      if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        long long v81 = &v94;
      }
      else {
        long long v81 = (std::string *)v94.__r_.__value_.__r.__words[0];
      }
      int64_t v82 = HIBYTE(v94.__r_.__value_.__r.__words[2]);
      if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        int64_t v82 = v94.__r_.__value_.__l.__size_;
      }
      uint64_t v83 = (char *)v81 + v82;
      if (v82 >= 14)
      {
        uint64_t v85 = v81;
        unint64_t v57 = this;
        do
        {
          uint64_t v84 = (char *)memchr(v85, 67, v82 - 13);
          if (!v84) {
            break;
          }
          if (*(void *)v84 == 0x6E69206873617243 && *(void *)(v84 + 6) == 0x64657463656A6E69) {
            goto LABEL_219;
          }
          uint64_t v85 = (std::string *)(v84 + 1);
          int64_t v82 = v83 - (char *)v85;
        }
        while (v83 - (char *)v85 >= 14);
        uint64_t v84 = v83;
      }
      else
      {
        uint64_t v84 = (char *)v81 + v82;
        unint64_t v57 = this;
      }
LABEL_219:
      BOOL v88 = v84 == v83 || v84 - (char *)v81 == -1;
      if (v79 < 0) {
        operator delete(v80);
      }
      if (v88)
      {
        uint64_t v89 = *((void *)v57 + 1);
        if (os_log_type_enabled(v89, OS_LOG_TYPE_DEBUG))
        {
          LOWORD(v94.__r_.__value_.__l.__data_) = 0;
          _os_log_debug_impl(&dword_26368A000, v89, OS_LOG_TYPE_DEBUG, "#D The crash reason has duplicated signature", (uint8_t *)&v94, 2u);
        }
        return 1;
      }
      float64x2x2_t v63 = "Crash injected";
    }
    else
    {
      float64x2x2_t v63 = "Crash triggered by";
    }
  }
  else
  {
    float64x2x2_t v63 = "Custom crash type";
  }
  int v90 = *((void *)v57 + 1);
  BOOL result = os_log_type_enabled(v90, OS_LOG_TYPE_DEBUG);
  if (!result) {
    return result;
  }
  if (*((char *)a3 + 111) < 0) {
    std::string::__init_copy_ctor_external(&v94, *((const std::string::value_type **)a3 + 11), *((void *)a3 + 12));
  }
  else {
    std::string v94 = *v49;
  }
  uint64_t v93 = &v94;
  if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    uint64_t v93 = (std::string *)v94.__r_.__value_.__r.__words[0];
  }
  LODWORD(v96.__r_.__value_.__l.__data_) = 136315394;
  *(std::string::size_type *)((char *)v96.__r_.__value_.__r.__words + 4) = (std::string::size_type)v93;
  WORD2(v96.__r_.__value_.__r.__words[1]) = 2080;
  *(std::string::size_type *)((char *)&v96.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v63;
  _os_log_debug_impl(&dword_26368A000, v90, OS_LOG_TYPE_DEBUG, "#D This is NOT duplicated signature based on the crash reason: \"%s\" has \"%s\"", (uint8_t *)&v96, 0x16u);
  if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v94.__r_.__value_.__l.__data_);
  }
  return 0;
}

void sub_2636B0790(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a16 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void LogDumpDB::clearDB(LogDumpDB *this)
{
  CFTypeRef cf = 0;
  CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF70]);
  if (Mutable) {
    CFTypeRef cf = Mutable;
  }
  pthread_mutex_lock(&ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance);
  long long v3 = (os_unfair_lock_s *)xmmword_26A99F080;
  if (!(void)xmmword_26A99F080)
  {
    SharedData::create_default_global(buf);
    long long v4 = *(_OWORD *)buf;
    memset(buf, 0, sizeof(buf));
    uint64_t v5 = (std::__shared_weak_count *)*((void *)&xmmword_26A99F080 + 1);
    xmmword_26A99F080 = v4;
    if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    int v6 = *(std::__shared_weak_count **)&buf[8];
    if (*(void *)&buf[8]
      && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
    long long v3 = (os_unfair_lock_s *)xmmword_26A99F080;
  }
  unint64_t v7 = (std::__shared_weak_count *)*((void *)&xmmword_26A99F080 + 1);
  if (*((void *)&xmmword_26A99F080 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&xmmword_26A99F080 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance);
  char v12 = 16;
  strcpy(__p, "Log Dump History");
  CFTypeRef v16 = cf;
  *(void *)long long buf = __p;
  *(void *)&buf[8] = &v16;
  BOOL v15 = v3;
  ctu::SharedLockable<SharedData>::execute_sync<BOOL SharedData::setPreference<__CFArray *>(std::string const&,__CFArray *)::{lambda(void)#1}>(v3 + 6, (uint64_t *)buf);
  if (v12 < 0) {
    operator delete(*(void **)__p);
  }
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  uint64_t v8 = *((void *)this + 3);
  for (uint64_t i = *((void *)this + 4); i != v8; i -= 112)
  {
    if (*(char *)(i - 1) < 0)
    {
      operator delete(*(void **)(i - 24));
      if ((*(char *)(i - 41) & 0x80000000) == 0)
      {
LABEL_23:
        if (*(char *)(i - 65) < 0) {
          goto LABEL_28;
        }
        goto LABEL_24;
      }
    }
    else if ((*(char *)(i - 41) & 0x80000000) == 0)
    {
      goto LABEL_23;
    }
    operator delete(*(void **)(i - 64));
    if (*(char *)(i - 65) < 0)
    {
LABEL_28:
      operator delete(*(void **)(i - 88));
      if ((*(char *)(i - 89) & 0x80000000) == 0) {
        continue;
      }
      goto LABEL_29;
    }
LABEL_24:
    if ((*(char *)(i - 89) & 0x80000000) == 0) {
      continue;
    }
LABEL_29:
    operator delete(*(void **)(i - 112));
  }
  *((void *)this + 4) = v8;
  uint64_t v10 = *((void *)this + 1);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_26368A000, v10, OS_LOG_TYPE_DEFAULT, "#I Log Dump DB is cleared", buf, 2u);
  }
  if (cf) {
    CFRelease(cf);
  }
}

void sub_2636B0AD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  pthread_mutex_unlock(&ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance);
  ctu::cf::CFSharedRef<__CFArray>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

std::string::value_type *std::vector<ResetInfo>::__push_back_slow_path<ResetInfo const&>(void *a1, const ResetInfo *a2)
{
  uint64_t v2 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(a1[1] - *a1) >> 4);
  unint64_t v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) > 0x249249249249249) {
    std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::__throw_length_error[abi:ne180100]();
  }
  if (0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(a1[2] - *a1) >> 4) > v3) {
    unint64_t v3 = 0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(a1[2] - *a1) >> 4);
  }
  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((uint64_t)(a1[2] - *a1) >> 4)) >= 0x124924924924924) {
    unint64_t v6 = 0x249249249249249;
  }
  else {
    unint64_t v6 = v3;
  }
  if (v6)
  {
    if (v6 > 0x249249249249249) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    unint64_t v7 = (char *)operator new(112 * v6);
  }
  else
  {
    unint64_t v7 = 0;
  }
  BOOL v15 = (std::string *)&v7[112 * v2];
  *((void *)&v16 + 1) = &v7[112 * v6];
  ResetInfo::ResetInfo(v15, a2);
  uint64_t v8 = 0;
  uint64_t v10 = (void **)*a1;
  for (uint64_t i = a1[1];
        (void **)(i + v8) != v10;
        ResetInfo::ResetInfo((std::string *)((char *)v15 + v8), (const ResetInfo *)(v8 + i)))
  {
    v8 -= 112;
  }
  std::string::size_type v11 = (char *)v15 + v8;
  char v12 = (void **)*a1;
  size_t v13 = (void **)a1[1];
  *a1 = v11;
  *(void *)&long long v16 = (char *)v15 + 112;
  *(_OWORD *)(a1 + 1) = v16;
  while (v13 != v12)
  {
    if (*((char *)v13 - 1) < 0)
    {
      operator delete(*(v13 - 3));
      if ((*((char *)v13 - 41) & 0x80000000) == 0)
      {
LABEL_19:
        if (*((char *)v13 - 65) < 0) {
          goto LABEL_24;
        }
        goto LABEL_20;
      }
    }
    else if ((*((char *)v13 - 41) & 0x80000000) == 0)
    {
      goto LABEL_19;
    }
    operator delete(*(v13 - 8));
    if (*((char *)v13 - 65) < 0)
    {
LABEL_24:
      operator delete(*(v13 - 11));
      if ((*((char *)v13 - 89) & 0x80000000) == 0) {
        goto LABEL_15;
      }
      goto LABEL_25;
    }
LABEL_20:
    if ((*((char *)v13 - 89) & 0x80000000) == 0) {
      goto LABEL_15;
    }
LABEL_25:
    operator delete(*(v13 - 14));
LABEL_15:
    v13 -= 14;
  }
  if (v12) {
    operator delete(v12);
  }
  return &v15[4].__r_.__value_.__s.__data_[16];
}

void sub_2636B0CE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::__split_buffer<ResetInfo>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<ResetInfo>::~__split_buffer(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v2; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 112;
    if (*(char *)(i - 1) < 0)
    {
      operator delete(*(void **)(i - 24));
      if ((*(char *)(i - 41) & 0x80000000) == 0)
      {
LABEL_6:
        if (*(char *)(i - 65) < 0) {
          goto LABEL_11;
        }
        goto LABEL_7;
      }
    }
    else if ((*(char *)(i - 41) & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(*(void **)(i - 64));
    if (*(char *)(i - 65) < 0)
    {
LABEL_11:
      operator delete(*(void **)(i - 88));
      if ((*(char *)(i - 89) & 0x80000000) == 0) {
        continue;
      }
      goto LABEL_12;
    }
LABEL_7:
    if ((*(char *)(i - 89) & 0x80000000) == 0) {
      continue;
    }
LABEL_12:
    operator delete(*(void **)(i - 112));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

BOOL LogDumpDB::isDuplicated(ResetInfo const&,std::chrono::duration<long long,std::ratio<1l,1l>>)::$_0::operator()(uint64_t a1, const ResetInfo *a2)
{
  uint64_t v37 = *MEMORY[0x263EF8340];
  long long v4 = *(LogDumpDB **)(a1 + 8);
  BOOL v5 = LogDumpDB::checkIfDuplicatedSignature(v4, a2, (const ResetInfo *)(a1 + 16));
  if (v5)
  {
    uint64_t v6 = *((void *)a2 + 9);
    if (*(void *)(a1 + 88) - v6 < *(void *)(a1 + 128))
    {
      unint64_t v7 = *((void *)v4 + 1);
      if (!os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
LABEL_23:
        **(unsigned char **)a1 = 1;
        return v5;
      }
      uint64_t v8 = operator new(0x38uLL);
      v8[8] = 0;
      *(void *)uint64_t v8 = 0;
      *((void *)v8 + 1) = 0;
      *((void *)v8 + 2) = &v24.__r_.__value_.__l.__size_;
      v24.__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
      v24.__r_.__value_.__l.__size_ = (std::string::size_type)v8;
      *((unsigned char *)v8 + 24) = 1;
      v24.__r_.__value_.__r.__words[2] = 1;
      *((void *)v8 + 5) = v6;
      *((void *)v8 + 6) = 0xAAAAAAAA00000000;
      BOOL v9 = v22;
      Timestamp::asString((uint64_t)&v24, 0, 9, v22);
      std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&v24, (void *)v24.__r_.__value_.__l.__size_);
      if (v23 < 0) {
        BOOL v9 = (void **)v22[0];
      }
      uint64_t v10 = *(void *)(a1 + 88);
      std::string::size_type v11 = operator new(0x38uLL);
      v11[8] = 0;
      *(void *)std::string::size_type v11 = 0;
      *((void *)v11 + 1) = 0;
      *((void *)v11 + 2) = &v24.__r_.__value_.__l.__size_;
      v24.__r_.__value_.__r.__words[0] = (std::string::size_type)v11;
      v24.__r_.__value_.__l.__size_ = (std::string::size_type)v11;
      *((unsigned char *)v11 + 24) = 1;
      v24.__r_.__value_.__r.__words[2] = 1;
      *((void *)v11 + 5) = v10;
      *((void *)v11 + 6) = 0xAAAAAAAA00000000;
      Timestamp::asString((uint64_t)&v24, 0, 9, v20);
      std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&v24, (void *)v24.__r_.__value_.__l.__size_);
      if (v21 >= 0) {
        char v12 = v20;
      }
      else {
        char v12 = (void **)v20[0];
      }
      uint64_t v13 = *(void *)(a1 + 88);
      if (*(char *)(a1 + 87) < 0) {
        std::string::__init_copy_ctor_external(&v24, *(const std::string::value_type **)(a1 + 64), *(void *)(a1 + 72));
      }
      else {
        std::string v24 = *(std::string *)(a1 + 64);
      }
      int v14 = SHIBYTE(v24.__r_.__value_.__r.__words[2]);
      std::string::size_type v15 = v24.__r_.__value_.__r.__words[0];
      if (*(char *)(a1 + 127) < 0) {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a1 + 104), *(void *)(a1 + 112));
      }
      else {
        std::string __p = *(std::string *)(a1 + 104);
      }
      long long v16 = &v24;
      if (v14 < 0) {
        long long v16 = (std::string *)v15;
      }
      p_p = &__p;
      *(_DWORD *)long long buf = 136316418;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      BOOL v26 = v9;
      __int16 v27 = 2050;
      uint64_t v28 = v6;
      __int16 v29 = 2080;
      int v30 = v12;
      __int16 v31 = 2050;
      uint64_t v32 = v13;
      __int16 v33 = 2082;
      CFMutableArrayRef v34 = v16;
      __int16 v35 = 2082;
      uint64_t v36 = p_p;
      _os_log_impl(&dword_26368A000, v7, OS_LOG_TYPE_DEFAULT, "#I Found duplicated log at timestamp: %s[%{public}llu], new log timestamp: %s[%{public}llu], dump reason: %{public}s, crash reason: %{public}s", buf, 0x3Eu);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v24.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_21:
          if ((v21 & 0x80000000) == 0) {
            goto LABEL_22;
          }
          goto LABEL_27;
        }
      }
      else if ((SHIBYTE(v24.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_21;
      }
      operator delete(v24.__r_.__value_.__l.__data_);
      if ((v21 & 0x80000000) == 0)
      {
LABEL_22:
        if ((v23 & 0x80000000) == 0) {
          goto LABEL_23;
        }
LABEL_28:
        operator delete(v22[0]);
        goto LABEL_23;
      }
LABEL_27:
      operator delete(v20[0]);
      if ((v23 & 0x80000000) == 0) {
        goto LABEL_23;
      }
      goto LABEL_28;
    }
  }
  return v5;
}

void sub_2636B10C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a30 < 0)
  {
    operator delete(__p);
    if ((a18 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a24 & 0x80000000) == 0) {
LABEL_8:
      }
        _Unwind_Resume(exception_object);
LABEL_7:
      operator delete(a19);
      _Unwind_Resume(exception_object);
    }
  }
  else if ((a18 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a13);
  if ((a24 & 0x80000000) == 0) {
    goto LABEL_8;
  }
  goto LABEL_7;
}

char *ResetInfo::operator=(char *a1, char *a2)
{
  if (a1 == a2) {
    return a1;
  }
  unint64_t v3 = a2;
  if ((a1[23] & 0x80000000) == 0)
  {
    if (a2[23] < 0)
    {
      std::string::__assign_no_alias<true>(a1, *(void **)a2, *((void *)a2 + 1));
      BOOL v5 = (void **)(a1 + 24);
      uint64_t v6 = v3 + 24;
      size_t v7 = v3[47];
      if (a1[47] < 0) {
        goto LABEL_14;
      }
    }
    else
    {
      long long v4 = *(_OWORD *)a2;
      *((void *)a1 + 2) = *((void *)a2 + 2);
      *(_OWORD *)a1 = v4;
      BOOL v5 = (void **)(a1 + 24);
      uint64_t v6 = a2 + 24;
      size_t v7 = a2[47];
      if (a1[47] < 0) {
        goto LABEL_14;
      }
    }
LABEL_10:
    if ((v7 & 0x80) != 0)
    {
      std::string::__assign_no_alias<true>(v5, *((void **)v3 + 3), *((void *)v3 + 4));
      uint64_t v10 = (void **)(a1 + 48);
      std::string::size_type v11 = v3 + 48;
      size_t v12 = v3[71];
      if (a1[71] < 0) {
        goto LABEL_24;
      }
    }
    else
    {
      long long v9 = *(_OWORD *)v6;
      v5[2] = (void *)*((void *)v6 + 2);
      *(_OWORD *)BOOL v5 = v9;
      uint64_t v10 = (void **)(a1 + 48);
      std::string::size_type v11 = v3 + 48;
      size_t v12 = v3[71];
      if (a1[71] < 0) {
        goto LABEL_24;
      }
    }
LABEL_21:
    if ((v12 & 0x80) != 0)
    {
      std::string::__assign_no_alias<true>(v10, *((void **)v3 + 6), *((void *)v3 + 7));
    }
    else
    {
      long long v15 = *(_OWORD *)v11;
      v10[2] = (void *)v11[2];
      *(_OWORD *)uint64_t v10 = v15;
    }
    goto LABEL_32;
  }
  if (a2[23] >= 0)
  {
    size_t v8 = a2[23];
  }
  else
  {
    a2 = *(char **)a2;
    size_t v8 = *((void *)v3 + 1);
  }
  std::string::__assign_no_alias<false>((void **)a1, a2, v8);
  BOOL v5 = (void **)(a1 + 24);
  uint64_t v6 = v3 + 24;
  size_t v7 = v3[47];
  if ((a1[47] & 0x80000000) == 0) {
    goto LABEL_10;
  }
LABEL_14:
  if ((v7 & 0x80u) == 0) {
    uint64_t v13 = v6;
  }
  else {
    uint64_t v13 = (void *)*((void *)v3 + 3);
  }
  if ((v7 & 0x80u) == 0) {
    size_t v14 = v7;
  }
  else {
    size_t v14 = *((void *)v3 + 4);
  }
  std::string::__assign_no_alias<false>(v5, v13, v14);
  uint64_t v10 = (void **)(a1 + 48);
  std::string::size_type v11 = v3 + 48;
  size_t v12 = v3[71];
  if ((a1[71] & 0x80000000) == 0) {
    goto LABEL_21;
  }
LABEL_24:
  if ((v12 & 0x80u) == 0) {
    long long v16 = v11;
  }
  else {
    long long v16 = (void *)*((void *)v3 + 6);
  }
  if ((v12 & 0x80u) == 0) {
    size_t v17 = v12;
  }
  else {
    size_t v17 = *((void *)v3 + 7);
  }
  std::string::__assign_no_alias<false>(v10, v16, v17);
LABEL_32:
  uint64_t v18 = *((void *)v3 + 9);
  *((_DWORD *)a1 + 20) = *((_DWORD *)v3 + 20);
  *((void *)a1 + 9) = v18;
  size_t v19 = (void **)(a1 + 88);
  char v20 = v3[111];
  if (a1[111] < 0)
  {
    if (v20 >= 0) {
      char v23 = v3 + 88;
    }
    else {
      char v23 = (void *)*((void *)v3 + 11);
    }
    if (v20 >= 0) {
      size_t v24 = v3[111];
    }
    else {
      size_t v24 = *((void *)v3 + 12);
    }
    std::string::__assign_no_alias<false>(v19, v23, v24);
    return a1;
  }
  else
  {
    if ((v3[111] & 0x80) == 0)
    {
      long long v21 = *(_OWORD *)(v3 + 88);
      *((void *)a1 + 13) = *((void *)v3 + 13);
      *(_OWORD *)size_t v19 = v21;
      return a1;
    }
    std::string::__assign_no_alias<true>(v19, *((void **)v3 + 11), *((void *)v3 + 12));
    return a1;
  }
}

void ResetInfo::ResetInfo(std::string *this, const ResetInfo *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
    BOOL v5 = this + 1;
    if ((*((char *)a2 + 47) & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else
  {
    long long v4 = *(_OWORD *)a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
    BOOL v5 = this + 1;
    if ((*((char *)a2 + 47) & 0x80000000) == 0)
    {
LABEL_3:
      long long v6 = *(_OWORD *)((char *)a2 + 24);
      v5->__r_.__value_.__r.__words[2] = *((void *)a2 + 5);
      *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
      goto LABEL_6;
    }
  }
  std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)a2 + 3), *((void *)a2 + 4));
LABEL_6:
  if (*((char *)a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(this + 2, *((const std::string::value_type **)a2 + 6), *((void *)a2 + 7));
  }
  else
  {
    long long v7 = *((_OWORD *)a2 + 3);
    this[2].__r_.__value_.__r.__words[2] = *((void *)a2 + 8);
    *(_OWORD *)&this[2].__r_.__value_.__l.__data_ = v7;
  }
  std::string::size_type v8 = *((void *)a2 + 9);
  LODWORD(this[3].__r_.__value_.__r.__words[1]) = *((_DWORD *)a2 + 20);
  this[3].__r_.__value_.__r.__words[0] = v8;
  long long v9 = (std::string *)((char *)this + 88);
  if (*((char *)a2 + 111) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *((const std::string::value_type **)a2 + 11), *((void *)a2 + 12));
  }
  else
  {
    long long v10 = *(_OWORD *)((char *)a2 + 88);
    this[4].__r_.__value_.__l.__size_ = *((void *)a2 + 13);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v10;
  }
}

void sub_2636B1454(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 71) < 0)
  {
    operator delete(*v3);
    if ((*(char *)(v1 + 47) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(v1 + 23) & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else if ((*(char *)(v1 + 47) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*v2);
  if ((*(char *)(v1 + 23) & 0x80000000) == 0) {
LABEL_4:
  }
    _Unwind_Resume(exception_object);
LABEL_7:
  operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::cf::insert<char const*,std::string>(__CFDictionary *a1, const __CFString **a2, uint64_t a3, uint64_t a4, const __CFAllocator *a5)
{
  xpc_object_t value = 0;
  ctu::cf::convert_copy((ctu::cf *)&value, a2, (const char *)0x8000100, a4, a5);
  long long v6 = value;
  xpc_object_t value = 0;
  ctu::cf::convert_copy();
  long long v7 = value;
  if (v6) {
    BOOL v8 = value == 0;
  }
  else {
    BOOL v8 = 1;
  }
  uint64_t v9 = !v8;
  if (v8)
  {
    if (!value) {
      goto LABEL_11;
    }
  }
  else
  {
    CFDictionaryAddValue(a1, v6, value);
  }
  CFRelease(v7);
LABEL_11:
  if (v6) {
    CFRelease(v6);
  }
  return v9;
}

void sub_2636B157C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  unint64_t v3 = va_arg(va1, const void *);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va1);
  _Unwind_Resume(a1);
}

void sub_2636B15A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  _Unwind_Resume(a1);
}

void SharedData::create_default_global(void *a1@<X8>)
{
  std::string __p = operator new(0x60uLL);
  strcpy((char *)__p, "/private/var/wireless/Library/Preferences/com.apple.AppleBasebandManager.Statistics.plist");
  v3.tv_sec = 0xAAAAAAAAAAAAAAAALL;
  v3.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
  *(timespec *)&v10.st_blkstd::string::size_type size = v3;
  *(timespec *)v10.st_qspare = v3;
  v10.st_birthtimespec = v3;
  *(timespec *)&v10.st_std::string::size_type size = v3;
  v10.st_mtimespec = v3;
  v10.st_ctimespec = v3;
  *(timespec *)&v10.st_uid = v3;
  v10.st_atimespec = v3;
  long long v9 = xmmword_2637A5F70;
  *(timespec *)&v10.st_dev = v3;
  if (!stat((const char *)__p, &v10))
  {
    BOOL v5 = v9 >= 0 ? (const std::__fs::filesystem::path *)&__p : (const std::__fs::filesystem::path *)__p;
    if (remove(v5, v4))
    {
      if (v9 >= 0) {
        p_p = (const char *)&__p;
      }
      else {
        p_p = (const char *)__p;
      }
      unlink(p_p);
    }
  }
  long long v7 = operator new(0x30uLL);
  MEMORY[0x263E68CE0](v7, @"com.apple.AppleBasebandManager.data", *MEMORY[0x263EFFE70]);
  v7[3] = 0;
  v7[4] = 0;
  *((_DWORD *)v7 + 10) = 0;
  std::shared_ptr<SharedData>::shared_ptr[abi:ne180100]<SharedData,void>(a1, (uint64_t)v7);
  if (SHIBYTE(v9) < 0) {
    operator delete(__p);
  }
}

void sub_2636B16CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  operator delete(v15);
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void *std::shared_ptr<SharedData>::shared_ptr[abi:ne180100]<SharedData,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  long long v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = &v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&unk_270EA64C0;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)a2;
  a1[1] = v4;
  if (a2)
  {
    long long v6 = *(std::__shared_weak_count **)(a2 + 32);
    if (v6)
    {
      if (v6->__shared_owners_ == -1)
      {
        atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
        atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        *(void *)(a2 + 24) = a2;
        *(void *)(a2 + 32) = v4;
        std::__shared_weak_count::__release_weak(v6);
        if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
          goto LABEL_7;
        }
      }
    }
    else
    {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      *(void *)(a2 + 24) = a2;
      *(void *)(a2 + 32) = v4;
      if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL))
      {
LABEL_7:
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
  return a1;
}

void sub_2636B182C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<SharedData>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<SharedData>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    timespec v3 = *(std::__shared_weak_count **)(v2 + 32);
    if (v3) {
      std::__shared_weak_count::__release_weak(v3);
    }
    long long v4 = (void *)MEMORY[0x263E68CF0](v2);
    operator delete(v4);
  }
  return a1;
}

void std::__shared_ptr_pointer<SharedData *,std::shared_ptr<SharedData>::__shared_ptr_default_delete<SharedData,SharedData>,std::allocator<SharedData>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<SharedData *,std::shared_ptr<SharedData>::__shared_ptr_default_delete<SharedData,SharedData>,std::allocator<SharedData>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 24);
  if (v1)
  {
    uint64_t v2 = *(std::__shared_weak_count **)(v1 + 32);
    if (v2) {
      std::__shared_weak_count::__release_weak(v2);
    }
    timespec v3 = (void *)MEMORY[0x263E68CF0](v1);
    operator delete(v3);
  }
}

uint64_t std::__shared_ptr_pointer<SharedData *,std::shared_ptr<SharedData>::__shared_ptr_default_delete<SharedData,SharedData>,std::allocator<SharedData>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x80000002637A6075) {
    return a1 + 24;
  }
  if (((v3 & 0x80000002637A6075 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000002637A6075)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000002637A6075 & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 24;
  }
  return 0;
}

uint64_t ctu::PthreadMutexGuardPolicy<SharedData>::~PthreadMutexGuardPolicy(uint64_t a1)
{
  pthread_mutex_lock((pthread_mutex_t *)a1);
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 72);
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 72);
  if (!v3 || atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v3);
  return a1;
}

BOOL Preferences::getPreference<__CFArray const*>(uint64_t (***a1)(void, uint64_t), const char *a2, void *a3)
{
  if (a2[23] < 0) {
    a2 = *(const char **)a2;
  }
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v11, a2);
  BOOL v5 = (const void *)(**a1)(a1, v11);
  long long v6 = v5;
  if (v5)
  {
    CFTypeID v7 = CFGetTypeID(v5);
    BOOL v8 = v7 == CFArrayGetTypeID();
    BOOL v9 = v8;
    if (v8) {
      *a3 = v6;
    }
    CFRelease(v6);
  }
  else
  {
    BOOL v9 = 0;
  }
  MEMORY[0x263E68C90](&v11);
  return v9;
}

BOOL ctu::SharedLockable<SharedData>::execute_sync<BOOL SharedData::setPreference<__CFArray *>(std::string const&,__CFArray *)::{lambda(void)#1}>(os_unfair_lock_s *a1, uint64_t *a2)
{
  uint64_t v3 = a1 + 4;
  os_unfair_lock_lock(a1 + 4);
  uint64_t v4 = a2[2];
  uint64_t v5 = *a2;
  long long v6 = *(const void **)a2[1];
  if (*(char *)(v5 + 23) >= 0) {
    CFTypeID v7 = (const char *)v5;
  }
  else {
    CFTypeID v7 = *(const char **)v5;
  }
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v10, v7);
  BOOL v8 = ctu::cf::plist_adapter::set<__CFArray *>(v4, v6, v10, 1);
  MEMORY[0x263E68C90](&v10);
  os_unfair_lock_unlock(v3);
  return v8;
}

BOOL ctu::cf::plist_adapter::set<__CFArray *>(uint64_t a1, CFTypeRef cf, const __CFString *a3, int a4)
{
  if (!cf) {
    return 0;
  }
  CFRetain(cf);
  CFStringRef v8 = (const __CFString *)*MEMORY[0x263EFFE68];
  CFPreferencesSetValue(a3, cf, *(CFStringRef *)(a1 + 8), *(CFStringRef *)(a1 + 16), (CFStringRef)*MEMORY[0x263EFFE68]);
  if (a4) {
    BOOL v9 = CFPreferencesSynchronize(*(CFStringRef *)(a1 + 8), *(CFStringRef *)(a1 + 16), v8) != 0;
  }
  else {
    BOOL v9 = 1;
  }
  CFRelease(cf);
  return v9;
}

void sub_2636B1C9C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t __cxx_global_var_init_0()
{
  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<SharedData>::~PthreadMutexGuardPolicy, &ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance, &dword_26368A000);
  }
  return result;
}

BOOL BasebandStats::initFromDisk(BasebandStats *this)
{
  size_t v24 = 0;
  pthread_mutex_lock(&ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance);
  uint64_t v2 = xmmword_26A99F080;
  if (!(void)xmmword_26A99F080)
  {
    SharedData::create_default_global(__p);
    long long v3 = *(_OWORD *)__p;
    __p[0] = 0;
    __p[1] = 0;
    uint64_t v4 = (std::__shared_weak_count *)*((void *)&xmmword_26A99F080 + 1);
    xmmword_26A99F080 = v3;
    if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    uint64_t v5 = (std::__shared_weak_count *)__p[1];
    if (__p[1] && !atomic_fetch_add((atomic_ullong *volatile)__p[1] + 1, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    uint64_t v2 = xmmword_26A99F080;
  }
  long long v6 = (std::__shared_weak_count *)*((void *)&xmmword_26A99F080 + 1);
  if (*((void *)&xmmword_26A99F080 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&xmmword_26A99F080 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance);
  char v23 = 13;
  strcpy((char *)__p, "HealthEventDB");
  os_unfair_lock_lock((os_unfair_lock_t)(v2 + 40));
  Preferences::getPreference<__CFDictionary const*>((uint64_t (***)(void, uint64_t))v2, (const char *)__p, &v24);
  os_unfair_lock_unlock((os_unfair_lock_t)(v2 + 40));
  if (v23 < 0) {
    operator delete(__p[0]);
  }
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    CFTypeID v7 = v24;
    if (v24) {
      goto LABEL_16;
    }
    return 0;
  }
  CFTypeID v7 = v24;
  if (!v24) {
    return 0;
  }
LABEL_16:
  v21[4] = v7;
  CFRetain(v7);
  __p[0] = (void *)0xAAAAAAAAAAAAAAAALL;
  __p[1] = (void *)0xAAAAAAAAAAAAAAAALL;
  ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)__p, (const __CFDictionary *)v7);
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)v21, "KeyBasebandStats");
  CFStringRef v8 = (__CFString *)ctu::cf::map_adapter::copyCFDictionaryRef((ctu::cf::map_adapter *)__p, v21[0]);
  MEMORY[0x263E68C90](v21);
  v21[3] = v8;
  if (v8) {
    BOOL v9 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
  }
  else {
    BOOL v9 = 0;
  }
  BOOL v10 = v9 != 0;
  if (v9)
  {
    v21[2] = v8;
    if (v8) {
      CFRetain(v8);
    }
    v21[0] = (__CFString *)0xAAAAAAAAAAAAAAAALL;
    v21[1] = (__CFString *)0xAAAAAAAAAAAAAAAALL;
    ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v21, (const __CFDictionary *)v8);
    ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v25, (const char *)*MEMORY[0x263F26670]);
    int Int = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v21, v25);
    size_t v12 = (ctu::cf::MakeCFString *)MEMORY[0x263E68C90](&v25);
    *((void *)this + 1) = Int;
    ctu::cf::MakeCFString::MakeCFString(v12, (const char *)*MEMORY[0x263F266B0]);
    int v13 = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v21, v25);
    size_t v14 = (ctu::cf::MakeCFString *)MEMORY[0x263E68C90](&v25);
    *((void *)this + 2) = v13;
    ctu::cf::MakeCFString::MakeCFString(v14, (const char *)*MEMORY[0x263F26540]);
    int v15 = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v21, v25);
    long long v16 = (ctu::cf::MakeCFString *)MEMORY[0x263E68C90](&v25);
    *((_DWORD *)this + 8) = v15;
    ctu::cf::MakeCFString::MakeCFString(v16, (const char *)*MEMORY[0x263F26548]);
    int v17 = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v21, v25);
    uint64_t v18 = (ctu::cf::MakeCFString *)MEMORY[0x263E68C90](&v25);
    *((_DWORD *)this + 9) = v17;
    ctu::cf::MakeCFString::MakeCFString(v18, (const char *)*MEMORY[0x263F26618]);
    unsigned int v19 = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v21, v25);
    MEMORY[0x263E68C90](&v25);
    *((void *)this + 3) = v19;
    MEMORY[0x263E68CD0](v21);
    if (v8) {
      CFRelease(v8);
    }
  }
  if (v8) {
    CFRelease(v8);
  }
  MEMORY[0x263E68CD0](__p);
  CFRelease(v7);
  return v10;
}

void sub_2636B209C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va4, a2);
  va_start(va3, a2);
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  va_copy(va2, va1);
  CFTypeID v7 = va_arg(va2, const void *);
  va_copy(va3, va2);
  BOOL v9 = va_arg(va3, const void *);
  va_copy(va4, va3);
  uint64_t v11 = va_arg(va4, const void *);
  MEMORY[0x263E68C90](v2 - 56);
  MEMORY[0x263E68CD0]((uint64_t *)va);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)va1);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)va2);
  MEMORY[0x263E68CD0](va4);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)va3);
  _Unwind_Resume(a1);
}

uint64_t ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get(uint64_t a1)
{
  return *(void *)a1;
}

void BasebandStats::updateStats(uint64_t a1@<X0>, xpc_object_t *a2@<X1>, __CFDictionary **a3@<X8>)
{
  uint64_t v6 = (const char *)*MEMORY[0x263F26670];
  if (xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x263F26670]))
  {
    xpc_object_t value = xpc_dictionary_get_value(*a2, v6);
    xpc_object_t object = value;
    if (value) {
      xpc_retain(value);
    }
    else {
      xpc_object_t object = xpc_null_create();
    }
    *(void *)(a1 + 8) = xpc::dyn_cast_or_default((xpc *)&object, 0);
    xpc_release(object);
    if (!*(void *)(a1 + 24)) {
      *(void *)(a1 + 24) = *(void *)(a1 + 8);
    }
  }
  CFStringRef v8 = (const char *)*MEMORY[0x263F266B0];
  if (xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x263F266B0]))
  {
    xpc_object_t v9 = xpc_dictionary_get_value(*a2, v8);
    xpc_object_t object = v9;
    if (v9) {
      xpc_retain(v9);
    }
    else {
      xpc_object_t object = xpc_null_create();
    }
    *(void *)(a1 + 16) = xpc::dyn_cast_or_default((xpc *)&object, 0);
    xpc_release(object);
  }
  BOOL v10 = (const char *)*MEMORY[0x263F26540];
  if (xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x263F26540]))
  {
    xpc_object_t v11 = xpc_dictionary_get_value(*a2, v10);
    xpc_object_t object = v11;
    if (v11) {
      xpc_retain(v11);
    }
    else {
      xpc_object_t object = xpc_null_create();
    }
    *(_DWORD *)(a1 + 32) = xpc::dyn_cast_or_default((xpc *)&object, 0);
    xpc_release(object);
  }
  size_t v12 = (const char *)*MEMORY[0x263F26548];
  if (xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x263F26548]))
  {
    xpc_object_t v13 = xpc_dictionary_get_value(*a2, v12);
    xpc_object_t object = v13;
    if (v13) {
      xpc_retain(v13);
    }
    else {
      xpc_object_t object = xpc_null_create();
    }
    *(_DWORD *)(a1 + 36) = xpc::dyn_cast_or_default((xpc *)&object, 0);
    xpc_release(object);
  }
  size_t v14 = (const char *)*MEMORY[0x263F26618];
  if (xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x263F26618]))
  {
    xpc_object_t v15 = xpc_dictionary_get_value(*a2, v14);
    xpc_object_t object = v15;
    if (v15) {
      xpc_retain(v15);
    }
    else {
      xpc_object_t object = xpc_null_create();
    }
    *(void *)(a1 + 24) = xpc::dyn_cast_or_default((xpc *)&object, 0);
    xpc_release(object);
  }
  BasebandStats::getCurrentBasebandStats((BasebandStats *)a1, a3);
}

void sub_2636B2394(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
}

void BasebandStats::getCurrentBasebandStats(BasebandStats *this@<X0>, __CFDictionary **a2@<X8>)
{
  CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFMutableArrayRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  CFTypeID v7 = Mutable;
  if (Mutable)
  {
    ctu::cf::update<char const*,long>(Mutable, (const __CFString **)*MEMORY[0x263F26670], *((const void **)this + 1), v4, v6);
    ctu::cf::update<char const*,long>(v7, (const __CFString **)*MEMORY[0x263F266B0], *((const void **)this + 2), v4, v8);
    ctu::cf::update<char const*,unsigned int>(v7, (const __CFString **)*MEMORY[0x263F26540], *((_DWORD *)this + 8), v4, v9);
    ctu::cf::update<char const*,unsigned int>(v7, (const __CFString **)*MEMORY[0x263F26548], *((_DWORD *)this + 9), v4, v10);
    ctu::cf::update<char const*,long>(v7, (const __CFString **)*MEMORY[0x263F26618], *((const void **)this + 3), v4, v11);
    CFTypeID v12 = CFGetTypeID(v7);
    if (v12 == CFDictionaryGetTypeID())
    {
      *a2 = v7;
      CFRetain(v7);
    }
    else
    {
      *a2 = 0;
    }
    CFRelease(v7);
  }
  else
  {
    *a2 = 0;
  }
}

void sub_2636B256C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

const void **ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

BOOL Preferences::getPreference<__CFDictionary const*>(uint64_t (***a1)(void, uint64_t), const char *a2, void *a3)
{
  if (a2[23] < 0) {
    a2 = *(const char **)a2;
  }
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v11, a2);
  uint64_t v5 = (const void *)(**a1)(a1, v11);
  CFAllocatorRef v6 = v5;
  if (v5)
  {
    CFTypeID v7 = CFGetTypeID(v5);
    BOOL v8 = v7 == CFDictionaryGetTypeID();
    BOOL v9 = v8;
    if (v8) {
      *a3 = v6;
    }
    CFRelease(v6);
  }
  else
  {
    BOOL v9 = 0;
  }
  MEMORY[0x263E68C90](&v11);
  return v9;
}

void ctu::cf::update<char const*,long>(__CFDictionary *a1, const __CFString **a2, const void *a3, const __CFAllocator *a4, const __CFAllocator *a5)
{
  unint64_t valuePtr = 0;
  ctu::cf::convert_copy((ctu::cf *)&valuePtr, a2, (const char *)0x8000100, (uint64_t)a4, a5);
  BOOL v8 = valuePtr;
  unint64_t valuePtr = a3;
  CFNumberRef v9 = CFNumberCreate(a4, kCFNumberLongType, &valuePtr);
  CFNumberRef v10 = v9;
  if (v8) {
    BOOL v11 = v9 == 0;
  }
  else {
    BOOL v11 = 1;
  }
  if (v11)
  {
    if (!v9) {
      goto LABEL_8;
    }
  }
  else
  {
    CFDictionarySetValue(a1, v8, v9);
  }
  CFRelease(v10);
LABEL_8:
  if (v8) {
    CFRelease(v8);
  }
}

void sub_2636B2748(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  long long v3 = va_arg(va1, const void *);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va1);
  _Unwind_Resume(a1);
}

void sub_2636B276C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t __cxx_global_var_init_1()
{
  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<SharedData>::~PthreadMutexGuardPolicy, &ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance, &dword_26368A000);
  }
  return result;
}

BOOL CommCenterStats::initFromDisk(CommCenterStats *this)
{
  uint64_t v18 = 0;
  pthread_mutex_lock(&ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance);
  uint64_t v2 = xmmword_26A99F080;
  if (!(void)xmmword_26A99F080)
  {
    SharedData::create_default_global(__p);
    long long v3 = *(_OWORD *)__p;
    __p[0] = 0;
    __p[1] = 0;
    CFAllocatorRef v4 = (std::__shared_weak_count *)*((void *)&xmmword_26A99F080 + 1);
    xmmword_26A99F080 = v3;
    if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    uint64_t v5 = (std::__shared_weak_count *)__p[1];
    if (__p[1] && !atomic_fetch_add((atomic_ullong *volatile)__p[1] + 1, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    uint64_t v2 = xmmword_26A99F080;
  }
  CFAllocatorRef v6 = (std::__shared_weak_count *)*((void *)&xmmword_26A99F080 + 1);
  if (*((void *)&xmmword_26A99F080 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&xmmword_26A99F080 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance);
  char v17 = 13;
  strcpy((char *)__p, "HealthEventDB");
  os_unfair_lock_lock((os_unfair_lock_t)(v2 + 40));
  Preferences::getPreference<__CFDictionary const*>((uint64_t (***)(void, uint64_t))v2, (const char *)__p, &v18);
  os_unfair_lock_unlock((os_unfair_lock_t)(v2 + 40));
  if (v17 < 0) {
    operator delete(__p[0]);
  }
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    CFTypeID v7 = v18;
    if (v18)
    {
LABEL_16:
      v15[4] = v7;
      CFRetain(v7);
      __p[0] = (void *)0xAAAAAAAAAAAAAAAALL;
      __p[1] = (void *)0xAAAAAAAAAAAAAAAALL;
      ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)__p, (const __CFDictionary *)v7);
      ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)v15, "KeyCommCenterStats");
      BOOL v8 = (__CFString *)ctu::cf::map_adapter::copyCFDictionaryRef((ctu::cf::map_adapter *)__p, v15[0]);
      MEMORY[0x263E68C90](v15);
      v15[3] = v8;
      if (v8) {
        CFNumberRef v9 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
      }
      else {
        CFNumberRef v9 = 0;
      }
      BOOL v10 = v9 != 0;
      if (v9)
      {
        v15[2] = v8;
        if (v8) {
          CFRetain(v8);
        }
        v15[0] = (__CFString *)0xAAAAAAAAAAAAAAAALL;
        v15[1] = (__CFString *)0xAAAAAAAAAAAAAAAALL;
        ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v15, (const __CFDictionary *)v8);
        ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v19, "KeyCommCenterStatsLaunchCount");
        int Int = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v15, v19);
        CFTypeID v12 = (ctu::cf::MakeCFString *)MEMORY[0x263E68C90](&v19);
        *((_DWORD *)this + 2) = Int;
        ctu::cf::MakeCFString::MakeCFString(v12, "KeyCommCenterStatsFirstLaunchTime");
        int v13 = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v15, v19);
        MEMORY[0x263E68C90](&v19);
        *((void *)this + 3) = v13;
        ++*((_DWORD *)this + 2);
        *((void *)this + 2) = time(0);
        MEMORY[0x263E68CD0](v15);
        if (!v8) {
          goto LABEL_28;
        }
        CFRelease(v8);
      }
      else
      {
        ++*((_DWORD *)this + 2);
        *((void *)this + 2) = time(0);
        if (!v8)
        {
LABEL_28:
          MEMORY[0x263E68CD0](__p);
          CFRelease(v7);
          return v10;
        }
      }
      CFRelease(v8);
      goto LABEL_28;
    }
  }
  else
  {
    CFTypeID v7 = v18;
    if (v18) {
      goto LABEL_16;
    }
  }
  ++*((_DWORD *)this + 2);
  BOOL v10 = 0;
  *((void *)this + 2) = time(0);
  return v10;
}

void sub_2636B2B10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va2, a5);
  va_start(va1, a5);
  va_start(va, a5);
  CFAllocatorRef v6 = va_arg(va1, const void *);
  va_copy(va2, va1);
  BOOL v8 = va_arg(va2, const void *);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)va);
  MEMORY[0x263E68CD0](va2);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)va1);
  _Unwind_Resume(a1);
}

void CommCenterStats::getStats(const void **this@<X0>, __CFDictionary **a2@<X8>)
{
  CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFMutableArrayRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  if (!Mutable)
  {
    *a2 = 0;
    return;
  }
  CFTypeID v7 = (const void *)*((unsigned int *)this + 2);
  unint64_t valuePtr = 0;
  ctu::cf::convert_copy((ctu::cf *)&valuePtr, (const __CFString **)"KeyCommCenterStatsLaunchCount", (const char *)0x8000100, (uint64_t)v4, v5);
  BOOL v8 = valuePtr;
  unint64_t valuePtr = v7;
  CFNumberRef v9 = CFNumberCreate(v4, kCFNumberLongLongType, &valuePtr);
  CFNumberRef v11 = v9;
  if (v8 && v9)
  {
    CFDictionaryAddValue(Mutable, v8, v9);
LABEL_7:
    CFRelease(v11);
    goto LABEL_8;
  }
  if (v9) {
    goto LABEL_7;
  }
LABEL_8:
  if (v8) {
    CFRelease(v8);
  }
  ctu::cf::insert<char const*,long>(Mutable, (const __CFString **)"KeyCommCenterStatsLastLaunchTime", this[2], v4, v10);
  ctu::cf::insert<char const*,long>(Mutable, (const __CFString **)"KeyCommCenterStatsFirstLaunchTime", this[3], v4, v12);
  CFTypeID v13 = CFGetTypeID(Mutable);
  if (v13 == CFDictionaryGetTypeID())
  {
    *a2 = Mutable;
    CFRetain(Mutable);
  }
  else
  {
    *a2 = 0;
  }
  CFRelease(Mutable);
}

void sub_2636B2D64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, const void *a10, const void *a11)
{
}

void sub_2636B2D9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
}

void CommCenterStats::updateStats(uint64_t a1@<X0>, xpc_object_t *a2@<X1>, __CFDictionary **a3@<X8>)
{
  if (xpc_dictionary_get_value(*a2, "KeyCommCenterStatsLaunchCount"))
  {
    xpc_object_t value = xpc_dictionary_get_value(*a2, "KeyCommCenterStatsLaunchCount");
    xpc_object_t object = value;
    if (value) {
      xpc_retain(value);
    }
    else {
      xpc_object_t object = xpc_null_create();
    }
    *(_DWORD *)(a1 + 8) = xpc::dyn_cast_or_default((xpc *)&object, 0);
    xpc_release(object);
  }
  if (xpc_dictionary_get_value(*a2, "KeyCommCenterStatsLastLaunchTime"))
  {
    xpc_object_t v7 = xpc_dictionary_get_value(*a2, "KeyCommCenterStatsLastLaunchTime");
    xpc_object_t object = v7;
    if (v7) {
      xpc_retain(v7);
    }
    else {
      xpc_object_t object = xpc_null_create();
    }
    *(void *)(a1 + 16) = xpc::dyn_cast_or_default((xpc *)&object, 0);
    xpc_release(object);
  }
  if (xpc_dictionary_get_value(*a2, "KeyCommCenterStatsFirstLaunchTime"))
  {
    xpc_object_t v8 = xpc_dictionary_get_value(*a2, "KeyCommCenterStatsFirstLaunchTime");
    xpc_object_t object = v8;
    if (v8) {
      xpc_retain(v8);
    }
    else {
      xpc_object_t object = xpc_null_create();
    }
    *(void *)(a1 + 24) = xpc::dyn_cast_or_default((xpc *)&object, 0);
    xpc_release(object);
  }
  CommCenterStats::getStats((const void **)a1, a3);
}

void sub_2636B2EFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
}

void ctu::cf::insert<char const*,long>(__CFDictionary *a1, const __CFString **a2, const void *a3, const __CFAllocator *a4, const __CFAllocator *a5)
{
  unint64_t valuePtr = 0;
  ctu::cf::convert_copy((ctu::cf *)&valuePtr, a2, (const char *)0x8000100, (uint64_t)a4, a5);
  xpc_object_t v8 = valuePtr;
  unint64_t valuePtr = a3;
  CFNumberRef v9 = CFNumberCreate(a4, kCFNumberLongType, &valuePtr);
  CFNumberRef v10 = v9;
  if (v8) {
    BOOL v11 = v9 == 0;
  }
  else {
    BOOL v11 = 1;
  }
  if (v11)
  {
    if (!v9) {
      goto LABEL_8;
    }
  }
  else
  {
    CFDictionaryAddValue(a1, v8, v9);
  }
  CFRelease(v10);
LABEL_8:
  if (v8) {
    CFRelease(v8);
  }
}

void sub_2636B2FFC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  long long v3 = va_arg(va1, const void *);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va1);
  _Unwind_Resume(a1);
}

void sub_2636B3020(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t __cxx_global_var_init_2()
{
  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<SharedData>::~PthreadMutexGuardPolicy, &ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance, &dword_26368A000);
  }
  return result;
}

void abm::debug::registerLogServer(uint64_t a1)
{
  block[0] = MEMORY[0x263EF8330];
  block[1] = 0x40000000;
  block[2] = ___ZN3abm5debugL14sLogServerInitERNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  block[3] = &__block_descriptor_tmp_3;
  block[4] = a1;
  if (abm::debug::sLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce != -1) {
    dispatch_once(&abm::debug::sLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, block);
  }
}

void ___ZN3abm5debugL14sLogServerInitERNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke(uint64_t a1)
{
  xpc_object_t xdict = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  ctu::LogServer::getConfig((uint64_t *)&xdict, **(ctu::LogServer ***)(a1 + 32));
  v26[0] = &xdict;
  v26[1] = "kDomainLogLevels";
  xpc_object_t object = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  xpc::dict::object_proxy::operator xpc::dict((uint64_t)v26, &object);
  uint64_t v2 = MEMORY[0x263E6A240](object);
  uint64_t v3 = MEMORY[0x263EF8708];
  if (v2 != MEMORY[0x263EF8708])
  {
    xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
    if (v4 || (xpc_object_t v4 = xpc_null_create()) != 0)
    {
      if (MEMORY[0x263E6A240](v4) == v3)
      {
        xpc_retain(v4);
        xpc_object_t v5 = v4;
      }
      else
      {
        xpc_object_t v5 = xpc_null_create();
      }
    }
    else
    {
      xpc_object_t v5 = xpc_null_create();
      xpc_object_t v4 = 0;
    }
    xpc_release(v4);
    xpc_object_t v6 = xpc_null_create();
    xpc_object_t v7 = object;
    xpc_object_t object = v5;
    xpc_release(v7);
    xpc_release(v6);
  }
  xpc_object_t v8 = xpc_int64_create(1);
  if (!v8) {
    xpc_object_t v8 = xpc_null_create();
  }
  xpc_dictionary_set_value(object, "libetl", v8);
  xpc_object_t v9 = xpc_null_create();
  xpc_release(v8);
  xpc_release(v9);
  xpc_object_t v10 = xpc_int64_create(1);
  if (!v10) {
    xpc_object_t v10 = xpc_null_create();
  }
  xpc_dictionary_set_value(object, "libtu", v10);
  xpc_object_t v11 = xpc_null_create();
  xpc_release(v10);
  xpc_release(v11);
  xpc_object_t v12 = xpc_int64_create(1);
  if (!v12) {
    xpc_object_t v12 = xpc_null_create();
  }
  xpc_dictionary_set_value(object, "trace.diag.cfg", v12);
  xpc_object_t v13 = xpc_null_create();
  xpc_release(v12);
  xpc_release(v13);
  xpc_object_t v14 = xpc_int64_create(1);
  if (!v14) {
    xpc_object_t v14 = xpc_null_create();
  }
  xpc_dictionary_set_value(object, "trace.diag.svc", v14);
  xpc_object_t v15 = xpc_null_create();
  xpc_release(v14);
  xpc_release(v15);
  xpc_object_t v16 = xpc_int64_create(1);
  if (!v16) {
    xpc_object_t v16 = xpc_null_create();
  }
  xpc_dictionary_set_value(object, "libktl", v16);
  xpc_object_t v17 = xpc_null_create();
  xpc_release(v16);
  xpc_release(v17);
  xpc_object_t v18 = object;
  if (object) {
    xpc_retain(object);
  }
  else {
    xpc_object_t v18 = xpc_null_create();
  }
  xpc_dictionary_set_value(xdict, "kDomainLogLevels", v18);
  xpc_object_t v19 = xpc_null_create();
  xpc_release(v18);
  xpc_release(v19);
  xpc_object_t v25 = xdict;
  if (xdict) {
    xpc_retain(xdict);
  }
  else {
    xpc_object_t v25 = xpc_null_create();
  }
  ctu::LogServer::updateConfig();
  xpc_release(v25);
  char v20 = (capabilities::abs *)operator new(0x10uLL);
  long long v21 = *(void **)(a1 + 32);
  *(void *)char v20 = *v21;
  uint64_t v22 = v21[1];
  *((void *)v20 + 1) = v22;
  if (v22) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v22 + 16), 1uLL, memory_order_relaxed);
  }
  _MergedGlobals = (uint64_t)v20;
  if (!qword_26A99F658)
  {
    char v20 = (capabilities::abs *)os_log_create("com.apple.telephony.abm", "libtu");
    qword_26A99F658 = (uint64_t)v20;
  }
  capabilities::abs::TUDebugFlags(v20);
  TelephonyUtilDebugSetFlags();
  char v23 = (capabilities::radio *)TelephonyUtilDebugRegisterDelegate();
  size_t v24 = (capabilities::radio *)capabilities::radio::ice(v23);
  if ((v24 & 1) == 0) {
    capabilities::radio::maverick(v24);
  }
  if (!qword_26A99F660) {
    qword_26A99F660 = (uint64_t)os_log_create("com.apple.telephony.abm", "bbu");
  }
  BBUpdaterRegisterGlobalLogSink();
  xpc_release(object);
  xpc_release(xdict);
}

void sub_2636B34DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, uint64_t a11, uint64_t a12, xpc_object_t a13, xpc_object_t a14)
{
}

void xpc::dict::object_proxy::operator xpc::dict(uint64_t a1@<X0>, void *a2@<X8>)
{
  xpc_object_t value = xpc_dictionary_get_value(**(xpc_object_t **)a1, *(const char **)(a1 + 8));
  if (value)
  {
    xpc_object_t v4 = value;
    xpc_retain(value);
    *a2 = v4;
  }
  else
  {
    xpc_object_t v4 = xpc_null_create();
    *a2 = v4;
    if (!v4)
    {
      xpc_object_t v5 = xpc_null_create();
      xpc_object_t v4 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x263E6A240](v4) != MEMORY[0x263EF8708])
  {
    xpc_object_t v5 = xpc_null_create();
LABEL_8:
    *a2 = v5;
    goto LABEL_9;
  }
  xpc_retain(v4);
LABEL_9:
  xpc_release(v4);
}

void abm::debug::handleDebugPrintTelephonyUtil(abm::debug *this, const char *a2, const char *a3, char *a4)
{
}

void abm::debug::handleDebugPrintBinaryTelephonyUtil(uint64_t a1, int a2, uint64_t a3, int a4)
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  xpc_object_t v4 = "misc";
  if (!a2) {
    xpc_object_t v4 = "send";
  }
  if (a2 == 1) {
    xpc_object_t v5 = "recv";
  }
  else {
    xpc_object_t v5 = v4;
  }
  xpc_object_t v6 = (void *)_MergedGlobals;
  if (_MergedGlobals)
  {
    xpc_object_t v8 = *(std::__shared_weak_count **)(_MergedGlobals + 8);
    if (v8)
    {
      xpc_object_t v10 = std::__shared_weak_count::lock(v8);
      if (v10)
      {
        xpc_object_t v11 = v10;
        if (!*v6)
        {
LABEL_22:
          if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
            std::__shared_weak_count::__release_weak(v11);
          }
          return;
        }
        unint64_t v28 = 0xAAAAAAAAAAAAAAAALL;
        *(void *)&long long v12 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v12 + 1) = 0xAAAAAAAAAAAAAAAALL;
        v27[1] = v12;
        v27[2] = v12;
        v27[0] = v12;
        ctu::LogMessageBuffer::LogMessageBuffer((ctu::LogMessageBuffer *)v27);
        uint64_t v13 = MEMORY[0x263E68F80](v27, a1);
        MEMORY[0x263E68F80](v13, " (");
        uint64_t v14 = ctu::operator<<();
        uint64_t v15 = MEMORY[0x263E68F80](v14, ") ");
        uint64_t v16 = MEMORY[0x263E68F80](v15, v5);
        MEMORY[0x263E68F80](v16, "\n");
        v25[1] = (void *)0xAAAAAAAAAAAAAAAALL;
        uint64_t v26 = 0xAAAAAAAAAAAAAALL;
        v25[0] = (void *)0xAAAAAAAAAAAAAA00;
        ctu::assign();
        xpc_object_t v17 = (ctu::Clock *)MEMORY[0x263E68F90](v27, v25);
        ctu::Clock::now_in_nanoseconds(v17);
        xpc_object_t v18 = (std::__shared_weak_count_vtbl *)operator new(0x60uLL);
        char v24 = 5;
        strcpy((char *)__p, "libtu");
        MEMORY[0x263E68BD0](v27);
        ctu::LogMessageBuffer::takeMetadata((ctu::LogMessageBuffer *)v27);
        ctu::LogMessage::LogMessage();
        xpc_object_t v19 = (std::__shared_weak_count *)operator new(0x20uLL);
        v19->__shared_owners_ = 0;
        p_shared_owners = &v19->__shared_owners_;
        v19->__vftable = (std::__shared_weak_count_vtbl *)&unk_270EA65D0;
        v19->__shared_weak_owners_ = 0;
        v19[1].__vftable = v18;
        if (v24 < 0) {
          operator delete(__p[0]);
        }
        atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
        ctu::LogServer::log();
        if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
        long long v21 = qword_26A99F658;
        if (qword_26A99F658 && os_log_type_enabled((os_log_t)qword_26A99F658, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v22 = v25;
          if (v26 < 0) {
            uint64_t v22 = (void **)v25[0];
          }
          *(_DWORD *)long long buf = 67109634;
          int v30 = a4;
          __int16 v31 = 2080;
          uint64_t v32 = v5;
          __int16 v33 = 2080;
          CFMutableArrayRef v34 = v22;
          _os_log_debug_impl(&dword_26368A000, v21, OS_LOG_TYPE_DEBUG, "(%d) %s: %s", buf, 0x1Cu);
          if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
            goto LABEL_19;
          }
        }
        else if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL))
        {
LABEL_19:
          if (SHIBYTE(v26) < 0) {
            operator delete(v25[0]);
          }
          MEMORY[0x263E68C10](v27);
          goto LABEL_22;
        }
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
        goto LABEL_19;
      }
    }
  }
}

void sub_2636B39D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  if (a10 && !atomic_fetch_add(&a10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
    std::__shared_weak_count::__release_weak(a10);
  }
  if (!atomic_fetch_add(v25, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
    std::__shared_weak_count::__release_weak(v24);
  }
  if (a22 < 0) {
    operator delete(__p);
  }
  MEMORY[0x263E68C10](&a23);
  if (!atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
  }
  _Unwind_Resume(a1);
}

uint64_t abm::debug::handleDebugPrintBBU(abm::debug *this, void *a2, const char *a3, const char *a4)
{
  unint64_t v30 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v5 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v29[7] = v5;
  v29[8] = v5;
  v29[5] = v5;
  v29[6] = v5;
  v29[3] = v5;
  v29[4] = v5;
  v29[1] = v5;
  v29[2] = v5;
  v29[0] = v5;
  long long v27 = v5;
  long long v28 = v5;
  long long v25 = v5;
  *(_OWORD *)std::string __p = v5;
  long long v23 = v5;
  long long v24 = v5;
  long long v22 = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v22);
  xpc_object_t v6 = (void *)std::ostream::operator<<();
  xpc_object_t v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  size_t v8 = strlen(a3);
  xpc_object_t v9 = (abm::debug *)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)a3, v8);
  memset(__dst, 170, sizeof(__dst));
  if ((BYTE8(v28) & 0x10) != 0)
  {
    uint64_t v15 = v28;
    if ((unint64_t)v28 < *((void *)&v25 + 1))
    {
      *(void *)&long long v28 = *((void *)&v25 + 1);
      uint64_t v15 = *((void *)&v25 + 1);
    }
    uint64_t v16 = (const void *)v25;
    size_t v13 = v15 - v25;
    if ((unint64_t)(v15 - v25) >= 0x7FFFFFFFFFFFFFF8) {
      goto LABEL_22;
    }
  }
  else
  {
    if ((BYTE8(v28) & 8) == 0)
    {
      size_t v13 = 0;
      HIBYTE(__dst[2]) = 0;
      uint64_t v14 = __dst;
      goto LABEL_14;
    }
    uint64_t v16 = (const void *)*((void *)&v23 + 1);
    size_t v13 = *((void *)&v24 + 1) - *((void *)&v23 + 1);
    if (*((void *)&v24 + 1) - *((void *)&v23 + 1) >= 0x7FFFFFFFFFFFFFF8uLL) {
LABEL_22:
    }
      std::string::__throw_length_error[abi:ne180100]();
  }
  if (v13 >= 0x17)
  {
    uint64_t v17 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v13 | 7) != 0x17) {
      uint64_t v17 = v13 | 7;
    }
    uint64_t v18 = v17 + 1;
    uint64_t v14 = (void **)operator new(v17 + 1);
    __dst[1] = (void *)v13;
    __dst[2] = (void *)(v18 | 0x8000000000000000);
    __dst[0] = v14;
    goto LABEL_13;
  }
  HIBYTE(__dst[2]) = v13;
  uint64_t v14 = __dst;
  if (v13) {
LABEL_13:
  }
    xpc_object_t v9 = (abm::debug *)memmove(v14, v16, v13);
LABEL_14:
  *((unsigned char *)v14 + v13) = 0;
  xpc_object_t v19 = __dst;
  if (SHIBYTE(__dst[2]) < 0) {
    xpc_object_t v19 = (void **)__dst[0];
  }
  abm::debug::handleDebugPrintBBUHelper(v9, v10, v11, v12, v19);
  if (SHIBYTE(__dst[2]) < 0) {
    operator delete(__dst[0]);
  }
  *(void *)&long long v22 = *MEMORY[0x263F8C2C8];
  *(void *)((char *)&v22 + *(void *)(v22 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  *((void *)&v22 + 1) = MEMORY[0x263F8C318] + 16;
  if (SHIBYTE(v27) < 0) {
    operator delete(__p[1]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x263E69630](v29);
}

void sub_2636B3DD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
  {
    operator delete(__p);
    std::ostringstream::~ostringstream((uint64_t)&a16);
    _Unwind_Resume(a1);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void abm::debug::handleDebugPrint(int a1, unsigned char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v53 = *MEMORY[0x263EF8340];
  xpc_object_t v4 = (void *)_MergedGlobals;
  if (!_MergedGlobals) {
    return;
  }
  xpc_object_t v6 = *(std::__shared_weak_count **)(_MergedGlobals + 8);
  if (!v6) {
    return;
  }
  xpc_object_t v10 = std::__shared_weak_count::lock(v6);
  uint64_t v50 = v10;
  if (!v10) {
    return;
  }
  if (!*v4)
  {
    xpc_object_t v19 = v10;
LABEL_62:
    if (!atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
    return;
  }
  unint64_t v48 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v11 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v11 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v47[1] = v11;
  v47[2] = v11;
  v47[0] = v11;
  ctu::LogMessageBuffer::LogMessageBuffer((ctu::LogMessageBuffer *)v47);
  if (a2 && *a2)
  {
    uint64_t v12 = MEMORY[0x263E68F80](v47, a2);
    MEMORY[0x263E68F80](v12, ": ");
  }
  MEMORY[0x263E68BF0](&v45, a3, a4);
  ctu::operator<<();
  size_t v13 = (ctu::Clock *)MEMORY[0x263E68C10](&v45);
  ctu::Clock::now_in_nanoseconds(v13);
  uint64_t v14 = (std::string *)operator new(0x60uLL);
  uint64_t v15 = abm::debug::kLogDomainMap[a1];
  size_t v16 = strlen(v15);
  if (v16 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v17 = (void *)v16;
  if (v16 >= 0x17)
  {
    uint64_t v20 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v16 | 7) != 0x17) {
      uint64_t v20 = v16 | 7;
    }
    uint64_t v21 = v20 + 1;
    uint64_t v18 = (void **)operator new(v20 + 1);
    __dst[1] = v17;
    unint64_t v44 = v21 | 0x8000000000000000;
    __dst[0] = v18;
    goto LABEL_16;
  }
  HIBYTE(v44) = v16;
  uint64_t v18 = __dst;
  if (v16) {
LABEL_16:
  }
    memmove(v18, v15, (size_t)v17);
  *((unsigned char *)v17 + (void)v18) = 0;
  MEMORY[0x263E68BD0](v47);
  ctu::LogMessageBuffer::takeMetadata((ctu::LogMessageBuffer *)v47);
  ctu::LogMessage::LogMessage();
  uint64_t v45 = v14;
  long long v22 = (std::__shared_weak_count *)operator new(0x20uLL);
  v22->__vftable = (std::__shared_weak_count_vtbl *)&unk_270EA65D0;
  v22->__shared_owners_ = 0;
  v22->__shared_weak_owners_ = 0;
  v22[1].__vftable = (std::__shared_weak_count_vtbl *)v14;
  uint64_t v46 = v22;
  if (SHIBYTE(v44) < 0)
  {
    operator delete(__dst[0]);
    long long v23 = v14 + 2;
    int v24 = SHIBYTE(v14[2].__r_.__value_.__r.__words[2]);
    if ((v24 & 0x80000000) == 0) {
      goto LABEL_19;
    }
  }
  else
  {
    long long v23 = v14 + 2;
    int v24 = SHIBYTE(v14[2].__r_.__value_.__r.__words[2]);
    if ((v24 & 0x80000000) == 0)
    {
LABEL_19:
      size_t size = v24;
      data = v23;
      goto LABEL_22;
    }
  }
  data = (std::string *)v14[2].__r_.__value_.__l.__data_;
  size_t size = v14[2].__r_.__value_.__l.__size_;
LABEL_22:
  long long v27 = memchr(data, 10, size);
  if (v27) {
    unint64_t v28 = (unint64_t)v27;
  }
  else {
    unint64_t v28 = (unint64_t)data + size;
  }
  if (v28 - (void)data != size)
  {
    __int16 v29 = (unsigned __int8 *)(v28 + 1);
    if ((std::string *)(v28 + 1) != (std::string *)((char *)data + size))
    {
      unint64_t v30 = (char *)data + size + ~v28;
      do
      {
        int v31 = *v29;
        if (v31 != 10) {
          *(unsigned char *)v28++ = v31;
        }
        ++v29;
        --v30;
      }
      while (v30);
      LOBYTE(v24) = *((unsigned char *)&v14[2].__r_.__value_.__s + 23);
    }
  }
  if ((v24 & 0x80) == 0)
  {
    uint64_t v32 = (char *)v23 + v24;
    std::string::size_type v33 = v28 - (void)v23;
    if (v24 >= v28 - (unint64_t)v23) {
      goto LABEL_34;
    }
LABEL_48:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  std::string::pointer v38 = v14[2].__r_.__value_.__l.__data_;
  std::string::size_type v37 = v14[2].__r_.__value_.__l.__size_;
  uint64_t v32 = &v38[v37];
  std::string::size_type v33 = v28 - (void)v38;
  if (v37 < v28 - (unint64_t)v38) {
    goto LABEL_48;
  }
LABEL_34:
  if (&v32[-v28] == (char *)-1)
  {
    if ((v24 & 0x80) != 0)
    {
      std::string::pointer v41 = v14[2].__r_.__value_.__l.__data_;
      v14[2].__r_.__value_.__l.__size_ = v33;
      v41[v33] = 0;
      CFMutableArrayRef v34 = v46;
      uint64_t v42 = v46;
      if (!v46) {
        goto LABEL_37;
      }
    }
    else
    {
      *((unsigned char *)&v14[2].__r_.__value_.__s + 23) = v33 & 0x7F;
      v23->__r_.__value_.__s.__data_[v33] = 0;
      CFMutableArrayRef v34 = v46;
      uint64_t v42 = v46;
      if (!v46) {
        goto LABEL_37;
      }
    }
    goto LABEL_36;
  }
  std::string::__erase_external_with_move(v23, v33, (std::string::size_type)&v32[-v28]);
  CFMutableArrayRef v34 = v46;
  uint64_t v42 = v46;
  if (v46) {
LABEL_36:
  }
    atomic_fetch_add_explicit(&v34->__shared_owners_, 1uLL, memory_order_relaxed);
LABEL_37:
  ctu::LogServer::log();
  if (v42 && !atomic_fetch_add(&v42->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
    std::__shared_weak_count::__release_weak(v42);
  }
  if (a1)
  {
    if (a1 == 3)
    {
      uint64_t v35 = qword_26A99F660;
      if (qword_26A99F660)
      {
        if (os_log_type_enabled((os_log_t)qword_26A99F660, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v36 = (std::string::__raw *)&v45[2];
          if (SHIBYTE(v45[2].__r_.__value_.__r.__words[2]) < 0) {
            uint64_t v36 = (std::string::__raw *)v36->__words[0];
          }
          *(_DWORD *)long long buf = 136315138;
          int v52 = v36;
LABEL_57:
          _os_log_impl(&dword_26368A000, v35, OS_LOG_TYPE_DEFAULT, "%s", buf, 0xCu);
        }
      }
    }
  }
  else
  {
    uint64_t v35 = qword_26A99F658;
    if (qword_26A99F658 && os_log_type_enabled((os_log_t)qword_26A99F658, OS_LOG_TYPE_DEFAULT))
    {
      BOOL v39 = (std::string::__raw *)&v45[2];
      if (SHIBYTE(v45[2].__r_.__value_.__r.__words[2]) < 0) {
        BOOL v39 = (std::string::__raw *)v39->__words[0];
      }
      *(_DWORD *)long long buf = 136315138;
      int v52 = v39;
      goto LABEL_57;
    }
  }
  uint64_t v40 = v46;
  if (v46 && !atomic_fetch_add(&v46->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
    std::__shared_weak_count::__release_weak(v40);
  }
  MEMORY[0x263E68C10](v47);
  xpc_object_t v19 = v50;
  if (v50) {
    goto LABEL_62;
  }
}

void sub_2636B4330(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  MEMORY[0x263E68C10](&a24);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100](v24 - 112);
  _Unwind_Resume(a1);
}

void sub_2636B43E0(_Unwind_Exception *a1)
{
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100](v1 - 112);
  _Unwind_Resume(a1);
}

void sub_2636B43F4()
{
  operator delete(v0);
  JUMPOUT(0x2636B443CLL);
}

void sub_2636B4420(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  operator delete(v16);
  JUMPOUT(0x2636B443CLL);
}

void std::__shared_ptr_pointer<ctu::LogMessage *,std::shared_ptr<ctu::LogMessage>::__shared_ptr_default_delete<ctu::LogMessage,ctu::LogMessage>,std::allocator<ctu::LogMessage>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t std::__shared_ptr_pointer<ctu::LogMessage *,std::shared_ptr<ctu::LogMessage>::__shared_ptr_default_delete<ctu::LogMessage,ctu::LogMessage>,std::allocator<ctu::LogMessage>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<ctu::LogMessage *,std::shared_ptr<ctu::LogMessage>::__shared_ptr_default_delete<ctu::LogMessage,ctu::LogMessage>,std::allocator<ctu::LogMessage>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x80000002637A6179) {
    return a1 + 24;
  }
  if (((v3 & 0x80000002637A6179 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000002637A6179)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000002637A6179 & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 24;
  }
  return 0;
}

void abm::debug::handleDebugPrintBBUHelper(abm::debug *this, void *a2, uint64_t a3, const char *a4, ...)
{
  va_start(va, a4);
  abm::debug::handleDebugPrint(3, "", (uint64_t)"%s", (uint64_t)va);
}

void abm::AWDHelperSetConnection(uint64_t *a1)
{
  uint64_t v1 = a1[1];
  uint64_t v5 = *a1;
  xpc_object_t v6 = (std::__shared_weak_count *)v1;
  if (v1) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v1 + 8), 1uLL, memory_order_relaxed);
  }
  abm::AWDHelper::create(&v5, &v7);
  pthread_mutex_lock(&ctu::Singleton<abm::AWDHelper,abm::AWDHelper,ctu::PthreadMutexGuardPolicy<abm::AWDHelper>>::sInstance);
  uint64_t v2 = (std::__shared_weak_count *)off_26A99F0D8;
  *(_OWORD *)&qword_26A99F0D0 = v7;
  long long v7 = 0uLL;
  pthread_mutex_unlock(&ctu::Singleton<abm::AWDHelper,abm::AWDHelper,ctu::PthreadMutexGuardPolicy<abm::AWDHelper>>::sInstance);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)&v7 + 1);
  if (*((void *)&v7 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v7 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  xpc_object_t v4 = v6;
  if (v6)
  {
    if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_2636B46CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

void sub_2636B46E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t abm::isWISServerAvailable(abm *this)
{
  return 1;
}

void abm::AWDHelper::create(uint64_t *a1@<X0>, void *a2@<X8>)
{
  xpc_object_t v4 = operator new(0x10uLL);
  uint64_t v5 = v4;
  uint64_t v6 = *a1;
  long long v7 = (std::__shared_weak_count *)a1[1];
  if (v7)
  {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    *xpc_object_t v4 = v6;
    v4[1] = v7;
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  else
  {
    *xpc_object_t v4 = v6;
    v4[1] = 0;
  }
  *a2 = v4;
  size_t v8 = operator new(0x20uLL);
  void *v8 = &unk_270EA6620;
  v8[1] = 0;
  v8[2] = 0;
  v8[3] = v5;
  a2[1] = v8;
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void sub_2636B4800(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (v9)
  {
    if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  operator delete(v10);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void abm::AWDHelperGetConnection(void *a1@<X8>)
{
  pthread_mutex_lock(&ctu::Singleton<abm::AWDHelper,abm::AWDHelper,ctu::PthreadMutexGuardPolicy<abm::AWDHelper>>::sInstance);
  uint64_t v3 = (void *)qword_26A99F0D0;
  if (!qword_26A99F0D0)
  {
    xpc_object_t v4 = (wis::WISServerConnection *)operator new(0x10uLL);
    wis::WISServerConnection::WISServerConnection(v4);
    size_t v16 = v4;
    uint64_t v5 = (std::__shared_weak_count *)operator new(0x20uLL);
    v5->__shared_owners_ = 0;
    v5->__vftable = (std::__shared_weak_count_vtbl *)&unk_270EA6670;
    v5->__shared_weak_owners_ = 0;
    v5[1].__vftable = (std::__shared_weak_count_vtbl *)v4;
    uint64_t v17 = v5;
    uint64_t v14 = v4;
    uint64_t v15 = v5;
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    abm::AWDHelper::create((uint64_t *)&v14, &v13);
    uint64_t v6 = v15;
    if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
    long long v7 = v17;
    if (v17 && !atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    long long v8 = v13;
    long long v13 = 0uLL;
    xpc_object_t v9 = (std::__shared_weak_count *)off_26A99F0D8;
    *(_OWORD *)&qword_26A99F0D0 = v8;
    if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
    xpc_object_t v10 = (std::__shared_weak_count *)*((void *)&v13 + 1);
    if (*((void *)&v13 + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
    uint64_t v3 = (void *)qword_26A99F0D0;
  }
  long long v11 = (std::__shared_weak_count *)off_26A99F0D8;
  if (off_26A99F0D8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)off_26A99F0D8 + 1, 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<abm::AWDHelper,abm::AWDHelper,ctu::PthreadMutexGuardPolicy<abm::AWDHelper>>::sInstance);
  uint64_t v12 = v3[1];
  *a1 = *v3;
  a1[1] = v12;
  if (v12) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
  }
  if (v11)
  {
    if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

void sub_2636B4ACC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  pthread_mutex_unlock(&ctu::Singleton<abm::AWDHelper,abm::AWDHelper,ctu::PthreadMutexGuardPolicy<abm::AWDHelper>>::sInstance);
  _Unwind_Resume(a1);
}

uint64_t ctu::PthreadMutexGuardPolicy<abm::AWDHelper>::~PthreadMutexGuardPolicy(uint64_t a1)
{
  pthread_mutex_lock((pthread_mutex_t *)a1);
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 72);
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 72);
  if (!v3 || atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void std::__shared_ptr_pointer<abm::AWDHelper *,std::shared_ptr<abm::AWDHelper>::__shared_ptr_default_delete<abm::AWDHelper,abm::AWDHelper>,std::allocator<abm::AWDHelper>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<abm::AWDHelper *,std::shared_ptr<abm::AWDHelper>::__shared_ptr_default_delete<abm::AWDHelper,abm::AWDHelper>,std::allocator<abm::AWDHelper>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count ***)(a1 + 24);
  if (v1)
  {
    uint64_t v2 = v1[1];
    if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      uint64_t v3 = v1;
    }
    else
    {
      uint64_t v3 = v1;
    }
    operator delete(v3);
  }
}

uint64_t std::__shared_ptr_pointer<abm::AWDHelper *,std::shared_ptr<abm::AWDHelper>::__shared_ptr_default_delete<abm::AWDHelper,abm::AWDHelper>,std::allocator<abm::AWDHelper>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x80000002637A6246) {
    return a1 + 24;
  }
  if (((v3 & 0x80000002637A6246 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000002637A6246)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000002637A6246 & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 24;
  }
  return 0;
}

void std::__shared_ptr_pointer<wis::WISServerConnection *,std::shared_ptr<wis::WISServerConnection>::__shared_ptr_default_delete<wis::WISServerConnection,wis::WISServerConnection>,std::allocator<wis::WISServerConnection>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<wis::WISServerConnection *,std::shared_ptr<wis::WISServerConnection>::__shared_ptr_default_delete<wis::WISServerConnection,wis::WISServerConnection>,std::allocator<wis::WISServerConnection>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1 = *(wis::WISServerConnection **)(a1 + 24);
  if (v1)
  {
    wis::WISServerConnection::~WISServerConnection(v1);
    operator delete(v2);
  }
}

uint64_t std::__shared_ptr_pointer<wis::WISServerConnection *,std::shared_ptr<wis::WISServerConnection>::__shared_ptr_default_delete<wis::WISServerConnection,wis::WISServerConnection>,std::allocator<wis::WISServerConnection>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x80000002637A631CLL) {
    return a1 + 24;
  }
  if (((v3 & 0x80000002637A631CLL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000002637A631CLL)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000002637A631CLL & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 24;
  }
  return 0;
}

const char *asString(unsigned int a1)
{
  if (a1 > 3) {
    return "???";
  }
  else {
    return off_2655D4BE0[(char)a1];
  }
}

const char *ABMServiceManager::getName(ABMServiceManager *this)
{
  return "service.mgr";
}

uint64_t ABMServiceManager::getInitTimeoutSec(ABMServiceManager *this)
{
  return 12 * capabilities::abs::serviceInitTimeoutScalingFactor(this);
}

uint64_t ABMServiceManager::getStartTimeoutSec(ABMServiceManager *this)
{
  return 30 * capabilities::abs::serviceStartTimeoutScalingFactor(this);
}

uint64_t ABMServiceManager::getSleepTimeoutSec(ABMServiceManager *this)
{
  return 29 * capabilities::abs::serviceSleepTimeoutScalingFactor(this);
}

uint64_t ABMServiceManager::getDefaultShutdownTimeoutSec(ABMServiceManager *this)
{
  return 5 * capabilities::abs::serviceShutdownTimeoutScalingFactor(this);
}

uint64_t ABMServiceManager::getShutdownTimeoutSec(capabilities::abs *a1, int a2)
{
  if (a2 == 1) {
    return 15 * capabilities::abs::serviceShutdownTimeoutScalingFactor(a1);
  }
  if (a2)
  {
    uint64_t v4 = *(uint64_t (**)(void))(*(void *)a1 + 112);
    return v4();
  }
  else
  {
    uint64_t IsInternalBuild = config::hw::watch(a1);
    if (IsInternalBuild
      && ((uint64_t IsInternalBuild = TelephonyUtilIsInternalBuild(), (IsInternalBuild & 1) != 0)
       || (uint64_t IsInternalBuild = TelephonyUtilIsCarrierBuild(), IsInternalBuild)))
    {
      return 120 * capabilities::abs::serviceShutdownTimeoutScalingFactor((capabilities::abs *)IsInternalBuild);
    }
    else
    {
      return 30 * capabilities::abs::serviceShutdownTimeoutScalingFactor((capabilities::abs *)IsInternalBuild);
    }
  }
}

void ABMServiceManager::ABMServiceManager(ServiceManager *a1, void *a2)
{
  *(void *)a1 = &unk_270EA66C0;
  ServiceManager::ServiceManager(a1, "service.mgr");
  *uint64_t v3 = &unk_270EA66C0;
  uint64_t v4 = a2[1];
  v3[25] = *a2;
  v3[26] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
}

{
  void *v3;
  uint64_t v4;

  *(void *)a1 = &unk_270EA66C0;
  ServiceManager::ServiceManager(a1, "service.mgr");
  *uint64_t v3 = &unk_270EA66C0;
  uint64_t v4 = a2[1];
  v3[25] = *a2;
  v3[26] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
}

double ABMServiceManager::create@<D0>(uint64_t *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v4 = (ServiceManager *)operator new(0xD8uLL);
  uint64_t v5 = v4;
  uint64_t v6 = (std::__shared_weak_count *)a1[1];
  uint64_t v8 = *a1;
  xpc_object_t v9 = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(void *)uint64_t v4 = &unk_270EA66C0;
  ServiceManager::ServiceManager(v4, "service.mgr");
  *(void *)uint64_t v5 = &unk_270EA66C0;
  *((void *)v5 + 25) = v8;
  *((void *)v5 + 26) = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v10[0] = (ABMServiceManager *)0xAAAAAAAAAAAAAAAALL;
  v10[1] = (ABMServiceManager *)0xAAAAAAAAAAAAAAAALL;
  std::shared_ptr<ABMServiceManager>::shared_ptr[abi:ne180100]<ABMServiceManager,std::shared_ptr<ABMServiceManager> ctu::SharedSynchronizable<ServiceManager>::make_shared_ptr<ABMServiceManager>(ABMServiceManager*)::{lambda(ABMServiceManager*)#1},void>(v10, (uint64_t)v5);
  ctu::Loggable<ServiceManager,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync((uint64_t)v10[0]);
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  ABMServiceManager::init(v10[0]);
  double result = *(double *)v10;
  *a2 = *(_OWORD *)v10;
  return result;
}

void sub_2636B51D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2636B51EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

void sub_2636B5208(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_2636B521C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  operator delete(v9);
  _Unwind_Resume(a1);
}

void ABMServiceManager::init(ABMServiceManager *this)
{
  unint64_t v21 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v22 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v2 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  unint64_t v3 = off_26A99F170;
  if (!off_26A99F170)
  {
    CommandDriverFactory::create_default_global((uint64_t *)buf, v2);
    long long v4 = *(_OWORD *)buf;
    memset(buf, 0, sizeof(buf));
    uint64_t v5 = (std::__shared_weak_count *)*(&off_26A99F170 + 1);
    off_26A99F170 = v4;
    if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    uint64_t v6 = *(std::__shared_weak_count **)&buf[8];
    if (*(void *)&buf[8]
      && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
    unint64_t v3 = off_26A99F170;
  }
  unint64_t v21 = v3;
  unint64_t v22 = *(&off_26A99F170 + 1);
  if (*(&off_26A99F170 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_26A99F170 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  if (!v3)
  {
    xpc_object_t v9 = *((void *)this + 5);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl(&dword_26368A000, v9, OS_LOG_TYPE_ERROR, "Unable to access CommandDriverFactory. BasebandManager registry will not be set in command drivers!", buf, 2u);
      uint64_t v8 = (std::__shared_weak_count *)*((void *)this + 10);
      if (!v8) {
        goto LABEL_36;
      }
      goto LABEL_20;
    }
LABEL_19:
    uint64_t v8 = (std::__shared_weak_count *)*((void *)this + 10);
    if (!v8) {
      goto LABEL_36;
    }
    goto LABEL_20;
  }
  long long v7 = (std::__shared_weak_count *)*((void *)this + 26);
  uint64_t v19 = *((void *)this + 25);
  uint64_t v20 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  CommandDriverFactory::setRegistry();
  if (!v20 || atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_19;
  }
  ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
  std::__shared_weak_count::__release_weak(v20);
  uint64_t v8 = (std::__shared_weak_count *)*((void *)this + 10);
  if (!v8) {
LABEL_36:
  }
    std::__throw_bad_weak_ptr[abi:ne180100]();
LABEL_20:
  uint64_t v10 = *((void *)this + 9);
  long long v11 = std::__shared_weak_count::lock(v8);
  if (!v11) {
    goto LABEL_36;
  }
  uint64_t v12 = v11;
  uint64_t v16 = v10;
  uint64_t v17 = v11;
  atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v12);
  }
  PowerManager::create(&v16, buf);
  long long v18 = *(_OWORD *)buf;
  memset(buf, 0, sizeof(buf));
  ServiceManager::init(this, (uint64_t *)&v18);
  long long v13 = (std::__shared_weak_count *)*((void *)&v18 + 1);
  if (*((void *)&v18 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v18 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  uint64_t v14 = *(std::__shared_weak_count **)&buf[8];
  if (*(void *)&buf[8]
    && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  if (v17) {
    std::__shared_weak_count::__release_weak(v17);
  }
  uint64_t v15 = (std::__shared_weak_count *)v22;
  if (v22)
  {
    if (!atomic_fetch_add((atomic_ullong *volatile)(v22 + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void sub_2636B55A0(_Unwind_Exception *a1)
{
}

void sub_2636B55BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_2636B55D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100](v15 - 48);
  if (a10)
  {
    std::__shared_weak_count::__release_weak(a10);
    std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
    _Unwind_Resume(a1);
  }
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void ABMServiceManager::registerGlobalServices(ABMServiceManager *this)
{
  unint64_t v3 = this;
  block[0] = MEMORY[0x263EF8330];
  block[1] = 3221225472;
  block[2] = ___ZNK3ctu20SharedSynchronizableI14ServiceManagerE20execute_wrapped_syncIZN17ABMServiceManager22registerGlobalServicesEvE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS6__block_invoke;
  block[3] = &__block_descriptor_48_e5_v8__0l;
  block[4] = (char *)this + 72;
  void block[5] = &v3;
  uint64_t v2 = (char *)this + 88;
  uint64_t v1 = *((void *)this + 11);
  if (*((void *)v2 + 1)) {
    dispatch_async_and_wait(v1, block);
  }
  else {
    dispatch_sync(v1, block);
  }
}

void ABMServiceManager::registerDynamicServices(ABMServiceManager *this)
{
  unint64_t v3 = this;
  block[0] = MEMORY[0x263EF8330];
  block[1] = 3221225472;
  block[2] = ___ZNK3ctu20SharedSynchronizableI14ServiceManagerE20execute_wrapped_syncIZN17ABMServiceManager23registerDynamicServicesEvE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS6__block_invoke;
  block[3] = &__block_descriptor_48_e5_v8__0l;
  block[4] = (char *)this + 72;
  void block[5] = &v3;
  uint64_t v2 = (char *)this + 88;
  uint64_t v1 = *((void *)this + 11);
  if (*((void *)v2 + 1)) {
    dispatch_async_and_wait(v1, block);
  }
  else {
    dispatch_sync(v1, block);
  }
}

void ABMServiceManager::~ABMServiceManager(std::__shared_weak_count **this)
{
  uint64_t v1 = (ABMServiceManager *)this;
  *this = (std::__shared_weak_count *)&unk_270EA66C0;
  uint64_t v2 = this[26];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    this = (std::__shared_weak_count **)v1;
  }
  else if (((vars8 ^ (2 * vars8)) & 0x4000000000000000) != 0)
  {
    __break(0xC471u);
  }
  ServiceManager::~ServiceManager((ServiceManager *)this);
}

void ABMServiceManager::~ABMServiceManager(ABMServiceManager *this)
{
  *(void *)this = &unk_270EA66C0;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 26);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    ServiceManager::~ServiceManager(this);
  }
  else
  {
    ServiceManager::~ServiceManager(this);
  }
  operator delete(v3);
}

uint64_t ctu::Loggable<ServiceManager,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig(uint64_t a1)
{
  return MEMORY[0x270F97428](a1 + 8);
}

size_t ctu::Loggable<ServiceManager,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  unint64_t v3 = (const char *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  size_t result = strlen(v3);
  if (result >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v5 = result;
  if (result >= 0x17)
  {
    uint64_t v6 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17) {
      uint64_t v6 = result | 7;
    }
    uint64_t v7 = v6 + 1;
    uint64_t v8 = operator new(v6 + 1);
    a2[1] = v5;
    a2[2] = v7 | 0x8000000000000000;
    *a2 = v8;
    a2 = v8;
  }
  else
  {
    *((unsigned char *)a2 + 23) = result;
    if (!result)
    {
      *(unsigned char *)a2 = 0;
      return result;
    }
  }
  size_t result = (size_t)memmove(a2, v3, v5);
  *((unsigned char *)a2 + v5) = 0;
  return result;
}

uint64_t ctu::Loggable<ServiceManager,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return MEMORY[0x270F978E0](a1 + 8);
}

uint64_t ctu::PthreadMutexGuardPolicy<ctu::power::assertion>::~PthreadMutexGuardPolicy(uint64_t a1)
{
  pthread_mutex_lock((pthread_mutex_t *)a1);
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 72);
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  unint64_t v3 = *(std::__shared_weak_count **)(a1 + 72);
  if (!v3 || atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void ctu::Loggable<ServiceManager,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(uint64_t a1)
{
  uint64_t v1 = a1 + 56;
  if (*(void *)(a1 + 56))
  {
    if (!*(void *)(a1 + 80) || (uint64_t v2 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(a1 + 80))) == 0) {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    unint64_t v3 = v2;
    ctu::LoggerCommonBase::getLogDomain((ctu::LoggerCommonBase *)(v1 - 48));
    ctu::TrackedLogger::registerLoggerToServer();
    if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_2636B5BA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

void sub_2636B5BC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void *std::shared_ptr<ABMServiceManager>::shared_ptr[abi:ne180100]<ABMServiceManager,std::shared_ptr<ABMServiceManager> ctu::SharedSynchronizable<ServiceManager>::make_shared_ptr<ABMServiceManager>(ABMServiceManager*)::{lambda(ABMServiceManager*)#1},void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  long long v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = &v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&unk_270EA6768;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)a2;
  a1[1] = v4;
  if (!a2) {
    return a1;
  }
  uint64_t v6 = *(std::__shared_weak_count **)(a2 + 80);
  if (v6)
  {
    if (v6->__shared_owners_ == -1)
    {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      *(void *)(a2 + 72) = a2;
      *(void *)(a2 + 80) = v4;
      std::__shared_weak_count::__release_weak(v6);
      if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
        goto LABEL_8;
      }
    }
    return a1;
  }
  atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  *(void *)(a2 + 72) = a2;
  *(void *)(a2 + 80) = v4;
  if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
LABEL_8:
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void sub_2636B5CEC(void *a1)
{
  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[11], v1, (dispatch_function_t)std::shared_ptr<ABMServiceManager> ctu::SharedSynchronizable<ServiceManager>::make_shared_ptr<ABMServiceManager>(ABMServiceManager*)::{lambda(ABMServiceManager*)#1}::operator() const(ABMServiceManager*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_2636B5D14(_Unwind_Exception *a1)
{
}

void std::__shared_ptr_pointer<ABMServiceManager *,std::shared_ptr<ABMServiceManager> ctu::SharedSynchronizable<ServiceManager>::make_shared_ptr<ABMServiceManager>(ABMServiceManager*)::{lambda(ABMServiceManager *)#1},std::allocator<ABMServiceManager>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<ABMServiceManager *,std::shared_ptr<ABMServiceManager> ctu::SharedSynchronizable<ServiceManager>::make_shared_ptr<ABMServiceManager>(ABMServiceManager*)::{lambda(ABMServiceManager *)#1},std::allocator<ABMServiceManager>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<ABMServiceManager *,std::shared_ptr<ABMServiceManager> ctu::SharedSynchronizable<ServiceManager>::make_shared_ptr<ABMServiceManager>(ABMServiceManager*)::{lambda(ABMServiceManager *)#1},std::allocator<ABMServiceManager>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableI14ServiceManagerE15make_shared_ptrI17ABMServiceManagerEENSt3__110share"
                     "d_ptrIT_EEPS7_EUlPS4_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableI14ServiceManagerE15make_shared_ptrI17ABMServiceManagerEENSt"
                                "3__110shared_ptrIT_EEPS7_EUlPS4_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableI14ServiceManagerE15make_shared_ptrI17ABMServiceManagerEENSt3__110shared_ptrIT_EEPS7_EUlPS4_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableI14ServiceManagerE15make_shared_ptrI17ABMServiceManagerEENSt3__110shared_ptrIT_EEPS7_EUlPS4_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24; {
  return 0;
  }
}

uint64_t std::shared_ptr<ABMServiceManager> ctu::SharedSynchronizable<ServiceManager>::make_shared_ptr<ABMServiceManager>(ABMServiceManager*)::{lambda(ABMServiceManager*)#1}::operator() const(ABMServiceManager*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t ctu::PthreadMutexGuardPolicy<CommandDriverFactory>::~PthreadMutexGuardPolicy(uint64_t a1)
{
  pthread_mutex_lock((pthread_mutex_t *)a1);
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 72);
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  unint64_t v3 = *(std::__shared_weak_count **)(a1 + 72);
  if (!v3 || atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void ___ZNK3ctu20SharedSynchronizableI14ServiceManagerE20execute_wrapped_syncIZN17ABMServiceManager22registerGlobalServicesEvE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS6__block_invoke(uint64_t a1)
{
  uint64_t v1 = *(uint64_t **)(a1 + 40);
  uint64_t v2 = *v1;
  unint64_t v3 = *(std::__shared_weak_count **)(*v1 + 80);
  if (!v3 || (uint64_t v4 = *(void *)(v2 + 72), (v5 = std::__shared_weak_count::lock(v3)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v6 = v5;
  uint64_t v13 = v4;
  uint64_t v14 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v6);
  }
  LogTracker::create(&v13, &v15);
  uint64_t v7 = v15;
  if (v15)
  {
    uint64_t v8 = v16;
    uint64_t v17 = v15;
    long long v18 = v16;
    if (v16) {
      atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    xpc_object_t v9 = *(void **)(v2 + 128);
    if ((unint64_t)v9 >= *(void *)(v2 + 136))
    {
      uint64_t v10 = std::vector<std::shared_ptr<Service>>::__push_back_slow_path<std::shared_ptr<Service>>((char **)(v2 + 120), (uint64_t)&v17);
      long long v11 = v18;
      *(void *)(v2 + 128) = v10;
      if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    else
    {
      *xpc_object_t v9 = v7;
      v9[1] = v8;
      *(void *)(v2 + 128) = v9 + 2;
    }
  }
  uint64_t v12 = v16;
  if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  if (v14) {
    std::__shared_weak_count::__release_weak(v14);
  }
}

void sub_2636B6080(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14 && !atomic_fetch_add(&a14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))a14->__on_zero_shared)(a14);
    std::__shared_weak_count::__release_weak(a14);
  }
  if (a12 && !atomic_fetch_add(&a12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))a12->__on_zero_shared)(a12);
    std::__shared_weak_count::__release_weak(a12);
  }
  if (a10) {
    std::__shared_weak_count::__release_weak(a10);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<std::shared_ptr<Service>>::__push_back_slow_path<std::shared_ptr<Service>>(char **a1, uint64_t a2)
{
  uint64_t v2 = (a1[1] - *a1) >> 4;
  unint64_t v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) >> 60) {
    std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v5 = a1[2] - *a1;
  if (v5 >> 3 > v3) {
    unint64_t v3 = v5 >> 3;
  }
  BOOL v6 = (unint64_t)v5 >= 0x7FFFFFFFFFFFFFF0;
  unint64_t v7 = 0xFFFFFFFFFFFFFFFLL;
  if (!v6) {
    unint64_t v7 = v3;
  }
  if (v7 >> 60) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  uint64_t v9 = 16 * v7;
  uint64_t v10 = (char *)operator new(16 * v7);
  long long v11 = &v10[16 * v2];
  *(_OWORD *)long long v11 = *(_OWORD *)a2;
  uint64_t v12 = v11 + 16;
  uint64_t v13 = &v10[v9];
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  uint64_t v14 = *a1;
  uint64_t v15 = a1[1];
  if (v15 == *a1)
  {
    *a1 = v11;
    a1[1] = v12;
    a1[2] = v13;
  }
  else
  {
    do
    {
      long long v16 = *((_OWORD *)v15 - 1);
      v15 -= 16;
      *((_OWORD *)v11 - 1) = v16;
      v11 -= 16;
      *(void *)uint64_t v15 = 0;
      *((void *)v15 + 1) = 0;
    }
    while (v15 != v14);
    uint64_t v15 = *a1;
    uint64_t v17 = a1[1];
    *a1 = v11;
    a1[1] = v12;
    for (a1[2] = v13; v17 != v15; v17 -= 16)
    {
      long long v18 = (std::__shared_weak_count *)*((void *)v17 - 1);
      if (v18 && !atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v12;
}

void ___ZNK3ctu20SharedSynchronizableI14ServiceManagerE20execute_wrapped_syncIZN17ABMServiceManager23registerDynamicServicesEvE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS6__block_invoke(uint64_t a1)
{
  uint64_t v1 = *(uint64_t **)(a1 + 40);
  uint64_t v2 = *v1;
  unint64_t v3 = *(std::__shared_weak_count **)(*v1 + 80);
  if (!v3) {
    goto LABEL_109;
  }
  uint64_t v4 = *(void *)(v2 + 72);
  uint64_t v5 = std::__shared_weak_count::lock(v3);
  if (!v5) {
    goto LABEL_109;
  }
  BOOL v6 = v5;
  uint64_t v87 = v4;
  BOOL v88 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v6);
  }
  unint64_t v7 = *(std::__shared_weak_count **)(v2 + 208);
  uint64_t v85 = *(void *)(v2 + 200);
  uint64_t v86 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  TransportModule::create(&v87, &v85, &v89);
  uint64_t v8 = v89;
  if (v89)
  {
    uint64_t v9 = v90;
    uint64_t v91 = v89;
    unint64_t v92 = v90;
    if (v90) {
      atomic_fetch_add_explicit(&v90->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v10 = *(uint64_t **)(v2 + 152);
    if ((unint64_t)v10 >= *(void *)(v2 + 160))
    {
      long long v11 = std::vector<std::shared_ptr<Service>>::__push_back_slow_path<std::shared_ptr<Service>>((char **)(v2 + 144), (uint64_t)&v91);
      uint64_t v12 = v92;
      *(void *)(v2 + 152) = v11;
      if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    else
    {
      uint64_t *v10 = v8;
      v10[1] = (uint64_t)v9;
      *(void *)(v2 + 152) = v10 + 2;
    }
  }
  uint64_t v13 = v90;
  if (v90 && !atomic_fetch_add(&v90->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  uint64_t v14 = v86;
  if (v86 && !atomic_fetch_add(&v86->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  if (v88) {
    std::__shared_weak_count::__release_weak(v88);
  }
  uint64_t v15 = *(std::__shared_weak_count **)(v2 + 80);
  if (!v15) {
    goto LABEL_109;
  }
  uint64_t v16 = *(void *)(v2 + 72);
  uint64_t v17 = std::__shared_weak_count::lock(v15);
  if (!v17) {
    goto LABEL_109;
  }
  long long v18 = v17;
  uint64_t v81 = v16;
  int64_t v82 = v17;
  atomic_fetch_add_explicit(&v17->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v18);
  }
  RadioModule::create(&v81, &v83);
  uint64_t v19 = v83;
  if (v83)
  {
    uint64_t v20 = v84;
    uint64_t v91 = v83;
    unint64_t v92 = v84;
    if (v84) {
      atomic_fetch_add_explicit(&v84->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    unint64_t v21 = *(uint64_t **)(v2 + 152);
    if ((unint64_t)v21 >= *(void *)(v2 + 160))
    {
      unint64_t v22 = std::vector<std::shared_ptr<Service>>::__push_back_slow_path<std::shared_ptr<Service>>((char **)(v2 + 144), (uint64_t)&v91);
      long long v23 = v92;
      *(void *)(v2 + 152) = v22;
      if (v23 && !atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    else
    {
      uint64_t *v21 = v19;
      v21[1] = (uint64_t)v20;
      *(void *)(v2 + 152) = v21 + 2;
    }
  }
  uint64_t v24 = v84;
  if (v84 && !atomic_fetch_add(&v84->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
    std::__shared_weak_count::__release_weak(v24);
  }
  if (v82) {
    std::__shared_weak_count::__release_weak(v82);
  }
  long long v25 = *(std::__shared_weak_count **)(v2 + 80);
  if (!v25) {
    goto LABEL_109;
  }
  uint64_t v26 = *(void *)(v2 + 72);
  long long v27 = std::__shared_weak_count::lock(v25);
  if (!v27) {
    goto LABEL_109;
  }
  unint64_t v28 = v27;
  uint64_t v77 = v26;
  uint64_t v78 = v27;
  atomic_fetch_add_explicit(&v27->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v27->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
    std::__shared_weak_count::__release_weak(v28);
  }
  Simulator::create(&v77, &v79);
  uint64_t v29 = v79;
  if (v79)
  {
    unint64_t v30 = v80;
    uint64_t v91 = v79;
    unint64_t v92 = v80;
    if (v80) {
      atomic_fetch_add_explicit(&v80->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    int v31 = *(uint64_t **)(v2 + 152);
    if ((unint64_t)v31 >= *(void *)(v2 + 160))
    {
      uint64_t v32 = std::vector<std::shared_ptr<Service>>::__push_back_slow_path<std::shared_ptr<Service>>((char **)(v2 + 144), (uint64_t)&v91);
      std::string::size_type v33 = v92;
      *(void *)(v2 + 152) = v32;
      if (v33 && !atomic_fetch_add(&v33->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    else
    {
      *int v31 = v29;
      v31[1] = (uint64_t)v30;
      *(void *)(v2 + 152) = v31 + 2;
    }
  }
  CFMutableArrayRef v34 = v80;
  if (v80 && !atomic_fetch_add(&v80->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
    std::__shared_weak_count::__release_weak(v34);
  }
  if (v78) {
    std::__shared_weak_count::__release_weak(v78);
  }
  uint64_t v35 = *(std::__shared_weak_count **)(v2 + 80);
  if (!v35) {
    goto LABEL_109;
  }
  uint64_t v36 = *(void *)(v2 + 72);
  std::string::size_type v37 = std::__shared_weak_count::lock(v35);
  if (!v37) {
    goto LABEL_109;
  }
  std::string::pointer v38 = v37;
  uint64_t v73 = v36;
  BOOL v74 = v37;
  atomic_fetch_add_explicit(&v37->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v37->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
    std::__shared_weak_count::__release_weak(v38);
  }
  TraceManager::create(&v73, &v75);
  uint64_t v39 = v75;
  if (v75)
  {
    uint64_t v40 = v76;
    uint64_t v91 = v75;
    unint64_t v92 = v76;
    if (v76) {
      atomic_fetch_add_explicit(&v76->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::pointer v41 = *(uint64_t **)(v2 + 152);
    if ((unint64_t)v41 >= *(void *)(v2 + 160))
    {
      uint64_t v42 = std::vector<std::shared_ptr<Service>>::__push_back_slow_path<std::shared_ptr<Service>>((char **)(v2 + 144), (uint64_t)&v91);
      size_t v43 = v92;
      *(void *)(v2 + 152) = v42;
      if (v43 && !atomic_fetch_add(&v43->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
        std::__shared_weak_count::__release_weak(v43);
      }
    }
    else
    {
      *std::string::pointer v41 = v39;
      v41[1] = (uint64_t)v40;
      *(void *)(v2 + 152) = v41 + 2;
    }
  }
  unint64_t v44 = v76;
  if (v76 && !atomic_fetch_add(&v76->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
    std::__shared_weak_count::__release_weak(v44);
  }
  if (v74) {
    std::__shared_weak_count::__release_weak(v74);
  }
  uint64_t v45 = *(std::__shared_weak_count **)(v2 + 80);
  if (!v45) {
    goto LABEL_109;
  }
  uint64_t v46 = *(void *)(v2 + 72);
  uint64_t v47 = std::__shared_weak_count::lock(v45);
  if (!v47) {
    goto LABEL_109;
  }
  unint64_t v48 = v47;
  uint64_t v69 = v46;
  uint64_t v70 = v47;
  atomic_fetch_add_explicit(&v47->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v47->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
    std::__shared_weak_count::__release_weak(v48);
  }
  AWDModule::create(&v69, &v71);
  uint64_t v49 = v71;
  if (v71)
  {
    uint64_t v50 = v72;
    uint64_t v91 = v71;
    unint64_t v92 = v72;
    if (v72) {
      atomic_fetch_add_explicit(&v72->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    int v51 = *(uint64_t **)(v2 + 152);
    if ((unint64_t)v51 >= *(void *)(v2 + 160))
    {
      int v52 = std::vector<std::shared_ptr<Service>>::__push_back_slow_path<std::shared_ptr<Service>>((char **)(v2 + 144), (uint64_t)&v91);
      uint64_t v53 = v92;
      *(void *)(v2 + 152) = v52;
      if (v53 && !atomic_fetch_add(&v53->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
        std::__shared_weak_count::__release_weak(v53);
      }
    }
    else
    {
      uint64_t *v51 = v49;
      v51[1] = (uint64_t)v50;
      *(void *)(v2 + 152) = v51 + 2;
    }
  }
  int64_t v54 = v72;
  if (v72 && !atomic_fetch_add(&v72->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
    std::__shared_weak_count::__release_weak(v54);
  }
  if (v70) {
    std::__shared_weak_count::__release_weak(v70);
  }
  unint64_t v55 = *(std::__shared_weak_count **)(v2 + 80);
  if (!v55 || (v56 = *(void *)(v2 + 72), (unint64_t v57 = std::__shared_weak_count::lock(v55)) == 0)) {
LABEL_109:
  }
    std::__throw_bad_weak_ptr[abi:ne180100]();
  uint64_t v58 = v57;
  uint64_t v65 = v56;
  int v66 = v57;
  atomic_fetch_add_explicit(&v57->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v57->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
    std::__shared_weak_count::__release_weak(v58);
  }
  BootModule::create(&v65, &v67);
  uint64_t v59 = v67;
  if (v67)
  {
    int v60 = v68;
    uint64_t v91 = v67;
    unint64_t v92 = v68;
    if (v68) {
      atomic_fetch_add_explicit(&v68->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    float64x2x2_t v61 = *(uint64_t **)(v2 + 152);
    if ((unint64_t)v61 >= *(void *)(v2 + 160))
    {
      BOOL v62 = std::vector<std::shared_ptr<Service>>::__push_back_slow_path<std::shared_ptr<Service>>((char **)(v2 + 144), (uint64_t)&v91);
      float64x2x2_t v63 = v92;
      *(void *)(v2 + 152) = v62;
      if (v63 && !atomic_fetch_add(&v63->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
        std::__shared_weak_count::__release_weak(v63);
      }
    }
    else
    {
      uint64_t *v61 = v59;
      v61[1] = (uint64_t)v60;
      *(void *)(v2 + 152) = v61 + 2;
    }
  }
  int v64 = v68;
  if (v68 && !atomic_fetch_add(&v68->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
    std::__shared_weak_count::__release_weak(v64);
  }
  if (v66) {
    std::__shared_weak_count::__release_weak(v66);
  }
}

void sub_2636B6B40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  unint64_t v28 = *(std::__shared_weak_count **)(v26 - 40);
  if (v28 && !atomic_fetch_add(&v28->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
    std::__shared_weak_count::__release_weak(v28);
  }
  if (a12 && !atomic_fetch_add(&a12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))a12->__on_zero_shared)(a12);
    std::__shared_weak_count::__release_weak(a12);
  }
  if (a10) {
    std::__shared_weak_count::__release_weak(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t __cxx_global_var_init_7()
{
  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<ctu::power::assertion>::~PthreadMutexGuardPolicy, &ctu::Singleton<ctu::power::assertion,ctu::power::assertion,ctu::PthreadMutexGuardPolicy<ctu::power::assertion>>::sInstance, &dword_26368A000);
  }
  return result;
}

{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<ctu::power::assertion>::~PthreadMutexGuardPolicy, &ctu::Singleton<ctu::power::assertion,ctu::power::assertion,ctu::PthreadMutexGuardPolicy<ctu::power::assertion>>::sInstance, &dword_26368A000);
  }
  return result;
}

uint64_t __cxx_global_var_init_8()
{
  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<CommandDriverFactory>::~PthreadMutexGuardPolicy, &ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance, &dword_26368A000);
  }
  return result;
}

{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<ctu::power::assertion>::~PthreadMutexGuardPolicy, &ctu::Singleton<ctu::power::assertion,ctu::power::assertion,ctu::PthreadMutexGuardPolicy<ctu::power::assertion>>::sInstance, &dword_26368A000);
  }
  return result;
}

uint64_t util::apfs::is_transcription_pending(util::apfs *this)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  bzero(&v13, 0x878uLL);
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)buf, "com.apple.telephony.abm", "apfs");
  uint64_t v1 = *(NSObject **)&v12[4];
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)buf);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_26368A000, v1, OS_LOG_TYPE_DEFAULT, "Checking if disk requires APFS transcription", buf, 2u);
  }
  if (statfs("/private/var", &v13))
  {
    ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)buf, "com.apple.telephony.abm", "apfs");
    uint64_t v2 = *(NSObject **)&v12[4];
    ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)buf);
    if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_11;
    }
    *(_DWORD *)long long buf = 136315138;
    *(void *)uint64_t v12 = "/private/var";
    unint64_t v3 = "Failed to statfs: %s";
    uint64_t v4 = v2;
LABEL_9:
    uint32_t v6 = 12;
LABEL_10:
    _os_log_impl(&dword_26368A000, v4, OS_LOG_TYPE_DEFAULT, v3, buf, v6);
    goto LABEL_11;
  }
  if (strlen(v13.f_mntfromname) - 1024 <= 0xFFFFFFFFFFFFFC00)
  {
    ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)buf, "com.apple.telephony.abm", "apfs");
    uint64_t v5 = *(NSObject **)&v12[4];
    ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)buf);
    if (!os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_11;
    }
    *(_DWORD *)long long buf = 136315138;
    *(void *)uint64_t v12 = v13.f_mntfromname;
    unint64_t v3 = "Failed to get mount point: %s";
    uint64_t v4 = v5;
    goto LABEL_9;
  }
  if (APFSVolumeRole())
  {
    ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)buf, "com.apple.telephony.abm", "apfs");
    uint64_t v9 = *(NSObject **)&v12[4];
    ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)buf);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 67109120;
      *(_DWORD *)uint64_t v12 = 0;
      unint64_t v3 = "APFS volume role error: %d";
      uint64_t v4 = v9;
      uint32_t v6 = 8;
      goto LABEL_10;
    }
  }
  else
  {
    ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)buf, "com.apple.telephony.abm", "apfs");
    uint64_t v10 = *(NSObject **)&v12[4];
    ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)buf);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      unint64_t v3 = "APFS volume role does not match";
      uint64_t v4 = v10;
      uint32_t v6 = 2;
      goto LABEL_10;
    }
  }
LABEL_11:
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)buf, "com.apple.telephony.abm", "apfs");
  unint64_t v7 = *(NSObject **)&v12[4];
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)buf);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 67109120;
    *(_DWORD *)uint64_t v12 = 0;
    _os_log_impl(&dword_26368A000, v7, OS_LOG_TYPE_DEFAULT, "APFS needs crypto migration: %d", buf, 8u);
  }
  return 0;
}

const char *DeviceHistoryDB::getName(DeviceHistoryDB *this)
{
  return "DeviceHistroyDB";
}

void DeviceHistoryDB::DeviceHistoryDB(DeviceHistoryDB *this)
{
  *(void *)this = &unk_270EA67B8;
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v5, "com.apple.telephony.abm", "DeviceHistroyDB");
  GetABMLogServer(&v3);
  ctu::Loggable<DeviceHistoryDB,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::Loggable<ctu::OsLogContext,std::shared_ptr<ctu::LogServer>>(this, (uint64_t)v5, &v3);
  uint64_t v2 = v4;
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v5);
  *(void *)this = &unk_270EA67B8;
  *((void *)this + 9) = 0;
  *((void *)this + 10) = 0;
  *((void *)this + 11) = 0;
  DeviceHistoryDB::initFromDisk(this);
}

void sub_2636B751C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::vector<_DeviceHistoryItem>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  *uint64_t v3 = &unk_270EA6860;
  MEMORY[0x263E68AF0](v3 + 1);
  _Unwind_Resume(a1);
}

void sub_2636B7558(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

void sub_2636B7574(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)va);
  _Unwind_Resume(a1);
}

void *ctu::Loggable<DeviceHistoryDB,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::Loggable<ctu::OsLogContext,std::shared_ptr<ctu::LogServer>>(void *a1, uint64_t a2, void *a3)
{
  *a1 = &unk_270EA6860;
  ctu::OsLogContext::OsLogContext();
  ctu::OsLogContext::OsLogContext();
  ctu::LoggerCommonBase::LoggerCommonBase();
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v8);
  a1[1] = &unk_270EA5428;
  a1[7] = *a3;
  uint64_t v5 = a3[1];
  a1[8] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&v7);
  return a1;
}

void sub_2636B764C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

void DeviceHistoryDB::initFromDisk(DeviceHistoryDB *this)
{
  std::string::size_type v37 = 0;
  pthread_mutex_lock(&ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance);
  uint64_t v2 = xmmword_26A99F080;
  if (!(void)xmmword_26A99F080)
  {
    SharedData::create_default_global(&__dst);
    long long v3 = __dst;
    long long __dst = 0uLL;
    uint64_t v4 = (std::__shared_weak_count *)*((void *)&xmmword_26A99F080 + 1);
    xmmword_26A99F080 = v3;
    if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    uint64_t v5 = (std::__shared_weak_count *)*((void *)&__dst + 1);
    if (*((void *)&__dst + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&__dst + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    uint64_t v2 = xmmword_26A99F080;
  }
  *((void *)&v33[1] + 1) = v2;
  *(void *)&void v33[2] = *((void *)&xmmword_26A99F080 + 1);
  if (*((void *)&xmmword_26A99F080 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&xmmword_26A99F080 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance);
  uint32_t v6 = (const void *)*MEMORY[0x263F25FE8];
  size_t v7 = strlen((const char *)*MEMORY[0x263F25FE8]);
  if (v7 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v8 = v7;
  if (v7 >= 0x17)
  {
    uint64_t v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17) {
      uint64_t v10 = v7 | 7;
    }
    uint64_t v11 = v10 + 1;
    p_dst = (long long *)operator new(v10 + 1);
    *((void *)&__dst + 1) = v8;
    *(void *)unint64_t v28 = v11 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
    goto LABEL_18;
  }
  v28[7] = v7;
  p_dst = &__dst;
  if (v7) {
LABEL_18:
  }
    memmove(p_dst, v6, v8);
  *((unsigned char *)p_dst + v8) = 0;
  os_unfair_lock_lock((os_unfair_lock_t)(v2 + 40));
  Preferences::getPreference<__CFArray const*>((uint64_t (***)(void, uint64_t))v2, (const char *)&__dst, &v37);
  os_unfair_lock_unlock((os_unfair_lock_t)(v2 + 40));
  if ((v28[7] & 0x80000000) != 0) {
    operator delete((void *)__dst);
  }
  uint64_t v12 = *(std::__shared_weak_count **)&v33[2];
  if (*(void *)&v33[2]
    && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&v33[2] + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
    statfs v13 = v37;
    uint64_t v36 = v37;
    if (!v37) {
      goto LABEL_77;
    }
  }
  else
  {
    statfs v13 = v37;
    uint64_t v36 = v37;
    if (!v37) {
      goto LABEL_77;
    }
  }
  CFRetain(v13);
  if (ctu::SharedRef<__CFArray const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFArray const>::get)
  {
    uint64_t Count = CFArrayGetCount((CFArrayRef)v13);
    if (Count)
    {
      CFIndex v14 = 0;
      long long v25 = (char *)*MEMORY[0x263F26030];
      long long v23 = (char *)*MEMORY[0x263F261C8];
      uint64_t v24 = (char *)*MEMORY[0x263F26068];
      uint64_t v15 = (const char *)*MEMORY[0x263F261C0];
      do
      {
        ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)v13, v14);
        uint64_t v17 = ValueAtIndex;
        if (ValueAtIndex && (CFTypeID v18 = CFGetTypeID(ValueAtIndex), v18 == CFDictionaryGetTypeID()))
        {
          uint64_t v35 = v17;
          CFRetain(v17);
        }
        else
        {
          uint64_t v17 = 0;
          uint64_t v35 = 0;
        }
        v34[0] = 0xAAAAAAAAAAAAAAAALL;
        v34[1] = 0xAAAAAAAAAAAAAAAALL;
        ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v34, (const __CFDictionary *)v17);
        memset((char *)&v33[1] + 8, 170, 24);
        long long __dst = 0uLL;
        *(void *)unint64_t v28 = 0;
        ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)v33, v25);
        ctu::cf::map_adapter::getString();
        MEMORY[0x263E68C90](v33);
        if ((v28[7] & 0x80000000) != 0) {
          operator delete((void *)__dst);
        }
        memset(v33, 170, 24);
        long long __dst = 0uLL;
        *(void *)unint64_t v28 = 0;
        ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)v32, v24);
        ctu::cf::map_adapter::getString();
        MEMORY[0x263E68C90](v32);
        if ((v28[7] & 0x80000000) != 0) {
          operator delete((void *)__dst);
        }
        memset(v32, 170, sizeof(v32));
        long long __dst = 0uLL;
        *(void *)unint64_t v28 = 0;
        ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)v31, v23);
        ctu::cf::map_adapter::getString();
        MEMORY[0x263E68C90](v31);
        if ((v28[7] & 0x80000000) != 0) {
          operator delete((void *)__dst);
        }
        memset(v31, 170, sizeof(v31));
        long long __dst = 0uLL;
        *(void *)unint64_t v28 = 0;
        ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)v38, v15);
        ctu::cf::map_adapter::getString();
        MEMORY[0x263E68C90](v38);
        if ((v28[7] & 0x80000000) != 0)
        {
          operator delete((void *)__dst);
          *(void *)&long long v20 = 0xAAAAAAAAAAAAAAAALL;
          *((void *)&v20 + 1) = 0xAAAAAAAAAAAAAAAALL;
          *(_OWORD *)std::string __p = v20;
          *(_OWORD *)&__p[16] = v20;
          *(_OWORD *)&v28[16] = v20;
          *(_OWORD *)uint64_t v29 = v20;
          long long __dst = v20;
          *(_OWORD *)unint64_t v28 = v20;
          if ((SBYTE7(v33[1]) & 0x80000000) == 0)
          {
LABEL_43:
            long long __dst = v33[0];
            *(void *)unint64_t v28 = *(void *)&v33[1];
            goto LABEL_46;
          }
        }
        else
        {
          *(void *)&long long v19 = 0xAAAAAAAAAAAAAAAALL;
          *((void *)&v19 + 1) = 0xAAAAAAAAAAAAAAAALL;
          *(_OWORD *)std::string __p = v19;
          *(_OWORD *)&__p[16] = v19;
          *(_OWORD *)&v28[16] = v19;
          *(_OWORD *)uint64_t v29 = v19;
          long long __dst = v19;
          *(_OWORD *)unint64_t v28 = v19;
          if ((SBYTE7(v33[1]) & 0x80000000) == 0) {
            goto LABEL_43;
          }
        }
        std::string::__init_copy_ctor_external((std::string *)&__dst, *(const std::string::value_type **)&v33[0], *((std::string::size_type *)&v33[0] + 1));
LABEL_46:
        if (SHIBYTE(v32[2]) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&v28[8], (const std::string::value_type *)v32[0], (std::string::size_type)v32[1]);
        }
        else
        {
          *(_OWORD *)&v28[8] = *(_OWORD *)v32;
          *(void **)&v28[24] = v32[2];
        }
        if (SHIBYTE(v31[2]) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)v29, (const std::string::value_type *)v31[0], (std::string::size_type)v31[1]);
        }
        else
        {
          *(_OWORD *)uint64_t v29 = *(_OWORD *)v31;
          *(void **)std::string __p = v31[2];
        }
        if (SHIBYTE(v33[2]) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&__p[8], *((const std::string::value_type **)&v33[1] + 1), *(std::string::size_type *)&v33[2]);
        }
        else
        {
          *(_OWORD *)&__p[8] = *(_OWORD *)((char *)&v33[1] + 8);
          *(void *)&__p[24] = *((void *)&v33[2] + 1);
        }
        unint64_t v21 = *((void *)this + 10);
        if (v21 >= *((void *)this + 11))
        {
          uint64_t v22 = std::vector<_DeviceHistoryItem>::__push_back_slow_path<_DeviceHistoryItem const&>((int64x2_t *)((char *)this + 72), (const _DeviceHistoryItem *)&__dst);
        }
        else
        {
          _DeviceHistoryItem::_DeviceHistoryItem(*((std::string **)this + 10), (const _DeviceHistoryItem *)&__dst);
          uint64_t v22 = v21 + 96;
          *((void *)this + 10) = v21 + 96;
        }
        *((void *)this + 10) = v22;
        if ((__p[31] & 0x80000000) != 0)
        {
          operator delete(*(void **)&__p[8]);
          if ((__p[7] & 0x80000000) == 0)
          {
LABEL_60:
            if ((v28[31] & 0x80000000) == 0) {
              goto LABEL_61;
            }
            goto LABEL_70;
          }
        }
        else if ((__p[7] & 0x80000000) == 0)
        {
          goto LABEL_60;
        }
        operator delete(v29[0]);
        if ((v28[31] & 0x80000000) == 0)
        {
LABEL_61:
          if ((v28[7] & 0x80000000) == 0) {
            goto LABEL_62;
          }
          goto LABEL_71;
        }
LABEL_70:
        operator delete(*(void **)&v28[8]);
        if ((v28[7] & 0x80000000) == 0)
        {
LABEL_62:
          if ((SHIBYTE(v31[2]) & 0x80000000) == 0) {
            goto LABEL_63;
          }
          goto LABEL_72;
        }
LABEL_71:
        operator delete((void *)__dst);
        if ((SHIBYTE(v31[2]) & 0x80000000) == 0)
        {
LABEL_63:
          if ((SHIBYTE(v32[2]) & 0x80000000) == 0) {
            goto LABEL_64;
          }
          goto LABEL_73;
        }
LABEL_72:
        operator delete(v31[0]);
        if ((SHIBYTE(v32[2]) & 0x80000000) == 0)
        {
LABEL_64:
          if ((SBYTE7(v33[1]) & 0x80000000) == 0) {
            goto LABEL_65;
          }
          goto LABEL_74;
        }
LABEL_73:
        operator delete(v32[0]);
        if ((SBYTE7(v33[1]) & 0x80000000) == 0)
        {
LABEL_65:
          if ((SHIBYTE(v33[2]) & 0x80000000) == 0) {
            goto LABEL_66;
          }
          goto LABEL_75;
        }
LABEL_74:
        operator delete(*(void **)&v33[0]);
        if ((SHIBYTE(v33[2]) & 0x80000000) == 0)
        {
LABEL_66:
          MEMORY[0x263E68CD0](v34);
          if (!v17) {
            goto LABEL_30;
          }
LABEL_76:
          CFRelease(v17);
          goto LABEL_30;
        }
LABEL_75:
        operator delete(*((void **)&v33[1] + 1));
        MEMORY[0x263E68CD0](v34);
        if (v17) {
          goto LABEL_76;
        }
LABEL_30:
        ++v14;
      }
      while (Count != v14);
    }
  }
LABEL_77:
  if (v13) {
    CFRelease(v13);
  }
}

void sub_2636B7CDC(_Unwind_Exception *a1)
{
}

void sub_2636B7CFC(_Unwind_Exception *a1)
{
  ctu::cf::CFSharedRef<__CFArray const>::~CFSharedRef((const void **)(v1 - 112));
  _Unwind_Resume(a1);
}

void sub_2636B7D1C(_Unwind_Exception *a1)
{
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100](v1 - 160);
  _Unwind_Resume(a1);
}

void sub_2636B7D34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48)
{
  if (a20 < 0)
  {
    operator delete(__p);
    if ((a42 & 0x80000000) == 0) {
      goto LABEL_6;
    }
  }
  else if ((a42 & 0x80000000) == 0)
  {
LABEL_6:
    if (a48 < 0) {
      operator delete(a43);
    }
    if (*(char *)(v48 - 161) < 0) {
      operator delete(*(void **)(v48 - 184));
    }
    if (*(char *)(v48 - 137) < 0) {
      operator delete(*(void **)(v48 - 160));
    }
    MEMORY[0x263E68CD0](v48 - 136);
    ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)(v48 - 120));
    ctu::cf::CFSharedRef<__CFArray const>::~CFSharedRef((const void **)(v48 - 112));
    _Unwind_Resume(a1);
  }
  operator delete(a37);
  goto LABEL_6;
}

void sub_2636B7EE8(_Unwind_Exception *a1)
{
  ctu::cf::CFSharedRef<__CFArray const>::~CFSharedRef((const void **)(v1 - 112));
  _Unwind_Resume(a1);
}

void DeviceHistoryDB::addDeviceHistory(uint64_t a1, const _DeviceHistoryItem *a2)
{
  unint64_t v3 = *(void *)(a1 + 80);
  if (v3 >= *(void *)(a1 + 88))
  {
    *(void *)(a1 + 80) = std::vector<_DeviceHistoryItem>::__push_back_slow_path<_DeviceHistoryItem const&>((int64x2_t *)(a1 + 72), a2);
    uint64_t v4 = (DeviceHistoryDB *)a1;
  }
  else
  {
    _DeviceHistoryItem::_DeviceHistoryItem(*(std::string **)(a1 + 80), a2);
    *(void *)(a1 + 80) = v3 + 96;
    *(void *)(a1 + 80) = v3 + 96;
    uint64_t v4 = (DeviceHistoryDB *)a1;
  }
  DeviceHistoryDB::commitToDisk(v4);
}

void sub_2636B7F80(_Unwind_Exception *a1)
{
  *(void *)(v1 + 80) = v2;
  _Unwind_Resume(a1);
}

void DeviceHistoryDB::commitToDisk(DeviceHistoryDB *this)
{
  CFTypeRef cf = 0;
  CFAllocatorRef v2 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF70]);
  uint64_t v4 = Mutable;
  if (Mutable) {
    CFTypeRef cf = Mutable;
  }
  uint32_t v6 = (long long *)*((void *)this + 9);
  uint64_t v5 = (long long *)*((void *)this + 10);
  if (v6 != v5)
  {
    size_t v7 = (const __CFString **)*MEMORY[0x263F26030];
    size_t v8 = (const __CFString **)*MEMORY[0x263F26068];
    uint64_t v9 = (const __CFString **)*MEMORY[0x263F261C8];
    uint64_t v10 = (const __CFString **)*MEMORY[0x263F261C0];
    uint64_t v11 = (const CFDictionaryValueCallBacks *)MEMORY[0x263EFFF90];
    do
    {
      statfs v13 = CFDictionaryCreateMutable(v2, 0, MEMORY[0x263EFFF88], v11);
      if (*((char *)v6 + 95) < 0)
      {
        std::string::__init_copy_ctor_external(&v38, *((const std::string::value_type **)v6 + 9), *((void *)v6 + 10));
      }
      else
      {
        long long v14 = *(long long *)((char *)v6 + 72);
        v38.__r_.__value_.__r.__words[2] = *((void *)v6 + 11);
        *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v14;
      }
      ctu::cf::insert<char const*,std::string>(v13, v7, (uint64_t)&v38, (uint64_t)v2, v12);
      if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v38.__r_.__value_.__l.__data_);
        if ((*((char *)v6 + 23) & 0x80000000) == 0)
        {
LABEL_11:
          long long v16 = *v6;
          v38.__r_.__value_.__r.__words[2] = *((void *)v6 + 2);
          *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v16;
          goto LABEL_14;
        }
      }
      else if ((*((char *)v6 + 23) & 0x80000000) == 0)
      {
        goto LABEL_11;
      }
      std::string::__init_copy_ctor_external(&v38, *(const std::string::value_type **)v6, *((void *)v6 + 1));
LABEL_14:
      ctu::cf::insert<char const*,std::string>(v13, v8, (uint64_t)&v38, (uint64_t)v2, v15);
      if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v38.__r_.__value_.__l.__data_);
        if ((*((char *)v6 + 47) & 0x80000000) == 0)
        {
LABEL_16:
          long long v18 = *(long long *)((char *)v6 + 24);
          v38.__r_.__value_.__r.__words[2] = *((void *)v6 + 5);
          *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v18;
          goto LABEL_19;
        }
      }
      else if ((*((char *)v6 + 47) & 0x80000000) == 0)
      {
        goto LABEL_16;
      }
      std::string::__init_copy_ctor_external(&v38, *((const std::string::value_type **)v6 + 3), *((void *)v6 + 4));
LABEL_19:
      ctu::cf::insert<char const*,std::string>(v13, v9, (uint64_t)&v38, (uint64_t)v2, v17);
      if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v38.__r_.__value_.__l.__data_);
        if (*((char *)v6 + 71) < 0)
        {
LABEL_23:
          std::string::__init_copy_ctor_external(&v38, *((const std::string::value_type **)v6 + 6), *((void *)v6 + 7));
          goto LABEL_24;
        }
      }
      else if (*((char *)v6 + 71) < 0)
      {
        goto LABEL_23;
      }
      long long v20 = v6[3];
      v38.__r_.__value_.__r.__words[2] = *((void *)v6 + 8);
      *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v20;
LABEL_24:
      ctu::cf::insert<char const*,std::string>(v13, v10, (uint64_t)&v38, (uint64_t)v2, v19);
      if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v38.__r_.__value_.__l.__data_);
      }
      CFArrayAppendValue(v4, v13);
      if (v13) {
        CFRelease(v13);
      }
      v6 += 6;
    }
    while (v6 != v5);
  }
  pthread_mutex_lock(&ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance);
  unint64_t v21 = (os_unfair_lock_s *)xmmword_26A99F080;
  if (!(void)xmmword_26A99F080)
  {
    SharedData::create_default_global(&v38);
    long long v22 = *(_OWORD *)&v38.__r_.__value_.__l.__data_;
    *(_OWORD *)&v38.__r_.__value_.__l.__data_ = 0uLL;
    long long v23 = (std::__shared_weak_count *)*((void *)&xmmword_26A99F080 + 1);
    xmmword_26A99F080 = v22;
    if (v23 && !atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
    size_t size = (std::__shared_weak_count *)v38.__r_.__value_.__l.__size_;
    if (v38.__r_.__value_.__l.__size_
      && !atomic_fetch_add((atomic_ullong *volatile)(v38.__r_.__value_.__l.__size_ + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
    unint64_t v21 = (os_unfair_lock_s *)xmmword_26A99F080;
  }
  uint64_t v35 = v21;
  uint64_t v36 = (std::__shared_weak_count *)*((void *)&xmmword_26A99F080 + 1);
  if (*((void *)&xmmword_26A99F080 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&xmmword_26A99F080 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance);
  long long v25 = (const void *)*MEMORY[0x263F25FE8];
  size_t v26 = strlen((const char *)*MEMORY[0x263F25FE8]);
  if (v26 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  long long v27 = (void *)v26;
  if (v26 >= 0x17)
  {
    uint64_t v29 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v26 | 7) != 0x17) {
      uint64_t v29 = v26 | 7;
    }
    uint64_t v30 = v29 + 1;
    unint64_t v28 = operator new(v29 + 1);
    __p[1] = v27;
    unint64_t v34 = v30 | 0x8000000000000000;
    __p[0] = v28;
    goto LABEL_45;
  }
  HIBYTE(v34) = v26;
  unint64_t v28 = __p;
  if (v26) {
LABEL_45:
  }
    memmove(v28, v25, (size_t)v27);
  *((unsigned char *)v27 + (void)v28) = 0;
  v38.__r_.__value_.__r.__words[2] = (std::string::size_type)v21;
  CFTypeRef v39 = cf;
  v38.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
  v38.__r_.__value_.__l.__size_ = (std::string::size_type)&v39;
  ctu::SharedLockable<SharedData>::execute_sync<BOOL SharedData::setPreference<__CFArray *>(std::string const&,__CFArray *)::{lambda(void)#1}>(v21 + 6, (uint64_t *)&v38);
  if (SHIBYTE(v34) < 0) {
    operator delete(__p[0]);
  }
  int v31 = v36;
  if (!v36 || atomic_fetch_add(&v36->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    CFTypeRef v32 = cf;
    if (!cf) {
      return;
    }
    goto LABEL_51;
  }
  ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
  std::__shared_weak_count::__release_weak(v31);
  CFTypeRef v32 = cf;
  if (cf) {
LABEL_51:
  }
    CFRelease(v32);
}

void sub_2636B83E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, const void *a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
}

void _DeviceHistoryItem::~_DeviceHistoryItem(void **this)
{
  if (*((char *)this + 95) < 0)
  {
    operator delete(this[9]);
    if ((*((char *)this + 71) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*((char *)this + 47) & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }
  else if ((*((char *)this + 71) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(this[6]);
  if ((*((char *)this + 47) & 0x80000000) == 0)
  {
LABEL_4:
    if ((*((char *)this + 23) & 0x80000000) == 0) {
      return;
    }
LABEL_9:
    operator delete(*this);
    return;
  }
LABEL_8:
  operator delete(this[3]);
  if (*((char *)this + 23) < 0) {
    goto LABEL_9;
  }
}

void DeviceHistoryDB::~DeviceHistoryDB(DeviceHistoryDB *this)
{
  *(void *)this = &unk_270EA67B8;
  CFAllocatorRef v2 = (void **)((char *)this + 72);
  std::vector<_DeviceHistoryItem>::__destroy_vector::operator()[abi:ne180100](&v2);
  *(void *)this = &unk_270EA6860;
  MEMORY[0x263E68AF0]((char *)this + 8);
}

{
  void **v2;

  *(void *)this = &unk_270EA67B8;
  CFAllocatorRef v2 = (void **)((char *)this + 72);
  std::vector<_DeviceHistoryItem>::__destroy_vector::operator()[abi:ne180100](&v2);
  *(void *)this = &unk_270EA6860;
  MEMORY[0x263E68AF0]((char *)this + 8);
  operator delete(this);
}

uint64_t ctu::Loggable<DeviceHistoryDB,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig(uint64_t a1)
{
  return MEMORY[0x270F97428](a1 + 8);
}

size_t ctu::Loggable<DeviceHistoryDB,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  unint64_t v3 = (const char *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 48))(a1);
  size_t result = strlen(v3);
  if (result >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v5 = result;
  if (result >= 0x17)
  {
    uint64_t v6 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17) {
      uint64_t v6 = result | 7;
    }
    uint64_t v7 = v6 + 1;
    size_t v8 = operator new(v6 + 1);
    a2[1] = v5;
    a2[2] = v7 | 0x8000000000000000;
    *a2 = v8;
    a2 = v8;
  }
  else
  {
    *((unsigned char *)a2 + 23) = result;
    if (!result)
    {
      *(unsigned char *)a2 = 0;
      return result;
    }
  }
  size_t result = (size_t)memmove(a2, v3, v5);
  *((unsigned char *)a2 + v5) = 0;
  return result;
}

uint64_t ctu::Loggable<DeviceHistoryDB,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return MEMORY[0x270F978E0](a1 + 8);
}

void std::vector<_DeviceHistoryItem>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  CFAllocatorRef v2 = (void **)**a1;
  if (!v2) {
    return;
  }
  uint64_t v4 = (void **)v1[1];
  size_t v5 = **a1;
  if (v4 == v2)
  {
    v1[1] = v2;
    goto LABEL_5;
  }
  do
  {
    if (*((char *)v4 - 1) < 0)
    {
      operator delete(*(v4 - 3));
      if ((*((char *)v4 - 25) & 0x80000000) == 0)
      {
LABEL_9:
        if (*((char *)v4 - 49) < 0) {
          goto LABEL_14;
        }
        goto LABEL_10;
      }
    }
    else if ((*((char *)v4 - 25) & 0x80000000) == 0)
    {
      goto LABEL_9;
    }
    operator delete(*(v4 - 6));
    if (*((char *)v4 - 49) < 0)
    {
LABEL_14:
      operator delete(*(v4 - 9));
      if ((*((char *)v4 - 73) & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_15;
    }
LABEL_10:
    if ((*((char *)v4 - 73) & 0x80000000) == 0) {
      goto LABEL_6;
    }
LABEL_15:
    operator delete(*(v4 - 12));
LABEL_6:
    v4 -= 12;
  }
  while (v4 != v2);
  size_t v5 = **a1;
  v1[1] = v2;

LABEL_5:
  operator delete(v5);
}

void *ctu::Loggable<DeviceHistoryDB,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_270EA6860;
  MEMORY[0x263E68AF0](a1 + 1);
  return a1;
}

void ctu::Loggable<DeviceHistoryDB,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_270EA6860;
  MEMORY[0x263E68AF0](a1 + 1);

  operator delete(a1);
}

uint64_t std::vector<_DeviceHistoryItem>::__push_back_slow_path<_DeviceHistoryItem const&>(int64x2_t *a1, const _DeviceHistoryItem *a2)
{
  unint64_t v2 = 0xAAAAAAAAAAAAAAABLL * ((a1->i64[1] - a1->i64[0]) >> 5);
  unint64_t v3 = v2 + 1;
  if (v2 + 1 > 0x2AAAAAAAAAAAAAALL) {
    std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::__throw_length_error[abi:ne180100]();
  }
  if (0x5555555555555556 * ((a1[1].i64[0] - a1->i64[0]) >> 5) > v3) {
    unint64_t v3 = 0x5555555555555556 * ((a1[1].i64[0] - a1->i64[0]) >> 5);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[1].i64[0] - a1->i64[0]) >> 5) >= 0x155555555555555) {
    unint64_t v6 = 0x2AAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v6 = v3;
  }
  long long v23 = a1 + 1;
  if (v6)
  {
    if (v6 > 0x2AAAAAAAAAAAAAALL) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    uint64_t v7 = (char *)operator new(96 * v6);
  }
  else
  {
    uint64_t v7 = 0;
  }
  long long v20 = v7;
  v21.i64[0] = (uint64_t)&v7[96 * v2];
  v21.i64[1] = v21.i64[0];
  long long v22 = &v7[96 * v6];
  _DeviceHistoryItem::_DeviceHistoryItem((std::string *)v21.i64[0], a2);
  uint64_t v8 = a1->i64[0];
  unint64_t v9 = a1->u64[1];
  uint64_t v10 = v21.i64[0];
  uint64_t v11 = v21.i64[0];
  if (v9 == a1->i64[0])
  {
    int64x2_t v16 = vdupq_n_s64(v9);
  }
  else
  {
    do
    {
      long long v12 = *(_OWORD *)(v9 - 96);
      *(void *)(v11 - 80) = *(void *)(v9 - 80);
      *(_OWORD *)(v11 - 96) = v12;
      *(void *)(v9 - 88) = 0;
      *(void *)(v9 - 80) = 0;
      *(void *)(v9 - 96) = 0;
      long long v13 = *(_OWORD *)(v9 - 72);
      *(void *)(v11 - 56) = *(void *)(v9 - 56);
      *(_OWORD *)(v11 - 72) = v13;
      *(void *)(v9 - 64) = 0;
      *(void *)(v9 - 56) = 0;
      *(void *)(v9 - 72) = 0;
      long long v14 = *(_OWORD *)(v9 - 48);
      *(void *)(v11 - 32) = *(void *)(v9 - 32);
      *(_OWORD *)(v11 - 48) = v14;
      *(void *)(v9 - 40) = 0;
      *(void *)(v9 - 32) = 0;
      *(void *)(v9 - 48) = 0;
      long long v15 = *(_OWORD *)(v9 - 24);
      *(void *)(v11 - 8) = *(void *)(v9 - 8);
      *(_OWORD *)(v11 - 24) = v15;
      v11 -= 96;
      *(void *)(v9 - 24) = 0;
      *(void *)(v9 - 16) = 0;
      *(void *)(v9 - 8) = 0;
      v9 -= 96;
    }
    while (v9 != v8);
    int64x2_t v16 = *a1;
  }
  uint64_t v17 = v10 + 96;
  a1->i64[0] = v11;
  a1->i64[1] = v10 + 96;
  int64x2_t v21 = v16;
  long long v18 = (char *)a1[1].i64[0];
  a1[1].i64[0] = (uint64_t)v22;
  long long v22 = v18;
  long long v20 = (char *)v16.i64[0];
  std::__split_buffer<_DeviceHistoryItem>::~__split_buffer((uint64_t)&v20);
  return v17;
}

void sub_2636B8A34(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<_DeviceHistoryItem>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void _DeviceHistoryItem::_DeviceHistoryItem(std::string *this, const _DeviceHistoryItem *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
    size_t v5 = this + 1;
    if ((*((char *)a2 + 47) & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else
  {
    long long v4 = *(_OWORD *)a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
    size_t v5 = this + 1;
    if ((*((char *)a2 + 47) & 0x80000000) == 0)
    {
LABEL_3:
      long long v6 = *(_OWORD *)((char *)a2 + 24);
      v5->__r_.__value_.__r.__words[2] = *((void *)a2 + 5);
      *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
      goto LABEL_6;
    }
  }
  std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)a2 + 3), *((void *)a2 + 4));
LABEL_6:
  if (*((char *)a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(this + 2, *((const std::string::value_type **)a2 + 6), *((void *)a2 + 7));
  }
  else
  {
    long long v7 = *((_OWORD *)a2 + 3);
    this[2].__r_.__value_.__r.__words[2] = *((void *)a2 + 8);
    *(_OWORD *)&this[2].__r_.__value_.__l.__data_ = v7;
  }
  uint64_t v8 = this + 3;
  if (*((char *)a2 + 95) < 0)
  {
    std::string::__init_copy_ctor_external(v8, *((const std::string::value_type **)a2 + 9), *((void *)a2 + 10));
  }
  else
  {
    long long v9 = *(_OWORD *)((char *)a2 + 72);
    this[3].__r_.__value_.__r.__words[2] = *((void *)a2 + 11);
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v9;
  }
}

void sub_2636B8B44(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 71) < 0)
  {
    operator delete(*v3);
    if ((*(char *)(v1 + 47) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(v1 + 23) & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else if ((*(char *)(v1 + 47) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*v2);
  if ((*(char *)(v1 + 23) & 0x80000000) == 0) {
LABEL_4:
  }
    _Unwind_Resume(exception_object);
LABEL_7:
  operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::__split_buffer<_DeviceHistoryItem>::~__split_buffer(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v2; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 96;
    if (*(char *)(i - 1) < 0)
    {
      operator delete(*(void **)(i - 24));
      if ((*(char *)(i - 25) & 0x80000000) == 0)
      {
LABEL_6:
        if (*(char *)(i - 49) < 0) {
          goto LABEL_11;
        }
        goto LABEL_7;
      }
    }
    else if ((*(char *)(i - 25) & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(*(void **)(i - 48));
    if (*(char *)(i - 49) < 0)
    {
LABEL_11:
      operator delete(*(void **)(i - 72));
      if ((*(char *)(i - 73) & 0x80000000) == 0) {
        continue;
      }
      goto LABEL_12;
    }
LABEL_7:
    if ((*(char *)(i - 73) & 0x80000000) == 0) {
      continue;
    }
LABEL_12:
    operator delete(*(void **)(i - 96));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t __cxx_global_var_init_4()
{
  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<SharedData>::~PthreadMutexGuardPolicy, &ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance, &dword_26368A000);
  }
  return result;
}

void sub_2636B8E78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void __copy_helper_block_ea8_32c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (std::string *)(a1 + 32);
  if (*(char *)(a2 + 55) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a2 + 32), *(void *)(a2 + 40));
  }
  else
  {
    long long v3 = *(_OWORD *)(a2 + 32);
    v2->__r_.__value_.__r.__words[2] = *(void *)(a2 + 48);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void __destroy_helper_block_ea8_32c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1)
{
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
}

void sub_2636B8FBC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2636B8FD0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2636B9148(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)va);

  _Unwind_Resume(a1);
}

void sub_2636B9C08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_2636B9EA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,dispatch_object_t object)
{
  if (object) {
    dispatch_release(object);
  }

  support::ui::NotificationInfo::~NotificationInfo(v25);
  _Unwind_Resume(a1);
}

void sub_2636B9ED0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  if (a20 < 0)
  {
    operator delete(a15);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_2636BA56C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, dispatch_object_t object, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  _Unwind_Resume(a1);
}

void CallBackData::~CallBackData(void **this)
{
  if (*((char *)this + 39) < 0)
  {
    operator delete(this[2]);
    uint64_t v2 = this[1];
    if (!v2) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  uint64_t v2 = this[1];
  if (v2) {
LABEL_3:
  }
    dispatch_release(v2);
LABEL_4:
}

void support::ui::NotificationInfo::~NotificationInfo(void **this)
{
  if (*((char *)this + 71) < 0)
  {
    operator delete(this[6]);
    if ((*((char *)this + 47) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*((char *)this + 23) & 0x80000000) == 0) {
        return;
      }
LABEL_7:
      operator delete(*this);
      return;
    }
  }
  else if ((*((char *)this + 47) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(this[3]);
  if (*((char *)this + 23) < 0) {
    goto LABEL_7;
  }
}

void __copy_helper_block_ea8_40c35_ZTSN7support2ui16NotificationInfoE112c18_ZTS12CallBackData(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 40), *(const std::string::value_type **)(a2 + 40), *(void *)(a2 + 48));
    size_t v5 = (std::string *)(a1 + 64);
    if ((*(char *)(a2 + 87) & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else
  {
    long long v4 = *(_OWORD *)(a2 + 40);
    *(void *)(a1 + 56) = *(void *)(a2 + 56);
    *(_OWORD *)(a1 + 40) = v4;
    size_t v5 = (std::string *)(a1 + 64);
    if ((*(char *)(a2 + 87) & 0x80000000) == 0)
    {
LABEL_3:
      long long v6 = *(_OWORD *)(a2 + 64);
      v5->__r_.__value_.__r.__words[2] = *(void *)(a2 + 80);
      *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
      goto LABEL_6;
    }
  }
  std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(a2 + 64), *(void *)(a2 + 72));
LABEL_6:
  long long v7 = (std::string *)(a1 + 88);
  if (*(char *)(a2 + 111) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)(a2 + 88), *(void *)(a2 + 96));
  }
  else
  {
    long long v8 = *(_OWORD *)(a2 + 88);
    *(void *)(a1 + 104) = *(void *)(a2 + 104);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
  }
  long long v9 = _Block_copy(*(const void **)(a2 + 112));
  uint64_t v10 = *(NSObject **)(a2 + 120);
  *(void *)(a1 + 112) = v9;
  *(void *)(a1 + 120) = v10;
  if (v10) {
    dispatch_retain(v10);
  }
  uint64_t v11 = (std::string *)(a1 + 128);
  if (*(char *)(a2 + 151) < 0)
  {
    std::string::__init_copy_ctor_external(v11, *(const std::string::value_type **)(a2 + 128), *(void *)(a2 + 136));
  }
  else
  {
    long long v12 = *(_OWORD *)(a2 + 128);
    *(void *)(a1 + 144) = *(void *)(a2 + 144);
    *(_OWORD *)&v11->__r_.__value_.__l.__data_ = v12;
  }
}

void sub_2636BA8C0(_Unwind_Exception *a1)
{
  long long v4 = *(NSObject **)(v2 + 120);
  if (v4) {
    dispatch_release(v4);
  }

  support::ui::NotificationInfo::~NotificationInfo(v1);
  _Unwind_Resume(a1);
}

void sub_2636BA8E8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v2 + 87) < 0)
  {
    operator delete(*v3);
    if ((*(char *)(v2 + 63) & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((*(char *)(v2 + 63) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*v1);
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_ea8_40c35_ZTSN7support2ui16NotificationInfoE112c18_ZTS12CallBackData(uint64_t a1)
{
  if ((*(char *)(a1 + 151) & 0x80000000) == 0)
  {
    uint64_t v2 = *(NSObject **)(a1 + 120);
    if (!v2) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 128));
  uint64_t v2 = *(NSObject **)(a1 + 120);
  if (v2) {
LABEL_3:
  }
    dispatch_release(v2);
LABEL_4:

  if ((*(char *)(a1 + 111) & 0x80000000) == 0)
  {
    if ((*(char *)(a1 + 87) & 0x80000000) == 0) {
      goto LABEL_6;
    }
LABEL_11:
    operator delete(*(void **)(a1 + 64));
    if ((*(char *)(a1 + 63) & 0x80000000) == 0) {
      return;
    }
    goto LABEL_12;
  }
  operator delete(*(void **)(a1 + 88));
  if (*(char *)(a1 + 87) < 0) {
    goto LABEL_11;
  }
LABEL_6:
  if ((*(char *)(a1 + 63) & 0x80000000) == 0) {
    return;
  }
LABEL_12:
  long long v3 = *(void **)(a1 + 40);

  operator delete(v3);
}

void sub_2636BADC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  xpc_release(*(xpc_object_t *)(v27 - 72));
  _Unwind_Resume(a1);
}

void sub_2636BB6BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, dispatch_object_t object, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,dispatch_object_t a36)
{
  if (object) {
    dispatch_release(object);
  }

  CallBackData::~CallBackData((void **)&a35);
  if (a26 < 0) {
    operator delete(__p);
  }
  if (a34 < 0)
  {
    operator delete(a29);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void __copy_helper_block_ea8_32c18_ZTS12CallBackData(std::string *a1, uint64_t a2)
{
  long long v4 = _Block_copy(*(const void **)(a2 + 32));
  size_t v5 = *(NSObject **)(a2 + 40);
  a1[1].__r_.__value_.__l.__size_ = (std::string::size_type)v4;
  a1[1].__r_.__value_.__r.__words[2] = (std::string::size_type)v5;
  if (v5) {
    dispatch_retain(v5);
  }
  long long v6 = a1 + 2;
  if (*(char *)(a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)(a2 + 48), *(void *)(a2 + 56));
  }
  else
  {
    long long v7 = *(_OWORD *)(a2 + 48);
    a1[2].__r_.__value_.__r.__words[2] = *(void *)(a2 + 64);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
}

void sub_2636BB820(_Unwind_Exception *a1)
{
  long long v3 = *(NSObject **)(v1 + 40);
  if (v3) {
    dispatch_release(v3);
  }

  _Unwind_Resume(a1);
}

void __destroy_helper_block_ea8_32c18_ZTS12CallBackData(uint64_t a1)
{
  if ((*(char *)(a1 + 71) & 0x80000000) == 0)
  {
    uint64_t v2 = *(NSObject **)(a1 + 40);
    if (!v2) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 48));
  uint64_t v2 = *(NSObject **)(a1 + 40);
  if (v2) {
LABEL_3:
  }
    dispatch_release(v2);
LABEL_4:
  long long v3 = *(void **)(a1 + 32);
}

void support::ui::showNotification(unsigned int a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v7, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v7 = *(std::string *)a2;
  }
  if (*(char *)(a2 + 47) < 0) {
    std::string::__init_copy_ctor_external(&v8, *(const std::string::value_type **)(a2 + 24), *(void *)(a2 + 32));
  }
  else {
    std::string v8 = *(std::string *)(a2 + 24);
  }
  if (*(char *)(a2 + 71) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a2 + 48), *(void *)(a2 + 56));
  }
  else {
    std::string __p = *(std::string *)(a2 + 48);
  }
  long long v6 = 0;
  support::ui::showNotification(a1, (uint64_t)&v7, v5, &v6);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v8.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_12;
    }
LABEL_15:
    operator delete(v8.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v7.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_16;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_15;
  }
LABEL_12:
  if ((SHIBYTE(v7.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_13:

    return;
  }
LABEL_16:
  operator delete(v7.__r_.__value_.__l.__data_);
}

void sub_2636BBA34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
  {
    operator delete(__p);
    if ((a16 & 0x80000000) == 0)
    {
LABEL_3:

      _Unwind_Resume(a1);
    }
  }
  else if ((a16 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a11);

  _Unwind_Resume(a1);
}

void sub_2636BBA88(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2636BBA98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  support::ui::NotificationInfo::~NotificationInfo((void **)va);

  _Unwind_Resume(a1);
}

void support::ui::showNotification(unsigned int a1, uint64_t a2, void *a3, NSObject **a4)
{
  id v7 = a3;
  memset(&v62, 170, sizeof(v62));
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v62, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v62 = *(std::string *)a2;
  }
  std::string::size_type size = HIBYTE(v62.__r_.__value_.__r.__words[2]);
  if ((v62.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v62.__r_.__value_.__l.__size_;
  }
  if (size)
  {
    std::string::insert(&v62, 0, "com.apple.telephony.", 0x14uLL);
  }
  else
  {
    GetABMLogServer(&aBlock);
    long long v9 = *((void *)GetGlobalLogger(&aBlock) + 4);
    uint64_t v10 = (std::__shared_weak_count *)*((void *)&aBlock + 1);
    if (*((void *)&aBlock + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&aBlock + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      _os_log_impl(&dword_26368A000, v9, OS_LOG_TYPE_DEFAULT, "#I Notification requires identifier!", (uint8_t *)&buf, 2u);
    }
  }
  memset(&buf, 0, sizeof(buf));
  if (a1 > 2)
  {
    GetABMLogServer(&aBlock);
    long long v12 = *((void *)GetGlobalLogger(&aBlock) + 4);
    long long v13 = (std::__shared_weak_count *)*((void *)&aBlock + 1);
    if (*((void *)&aBlock + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&aBlock + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
    uint64_t v11 = (std::string *)os_log_type_enabled(v12, OS_LOG_TYPE_ERROR);
    if (v11)
    {
      *(_WORD *)float64x2x2_t v63 = 0;
      _os_log_error_impl(&dword_26368A000, v12, OS_LOG_TYPE_ERROR, "ABM notification is not supported for the caller", v63, 2u);
      std::string::size_type v51 = HIBYTE(v62.__r_.__value_.__r.__words[2]);
      if ((v62.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v51 = v62.__r_.__value_.__l.__size_;
      }
      if (!v51) {
        goto LABEL_116;
      }
      goto LABEL_22;
    }
  }
  else
  {
    uint64_t v11 = std::string::__assign_external(&buf, "BasebandServicesNotification", 0x1CuLL);
  }
  std::string::size_type v14 = HIBYTE(v62.__r_.__value_.__r.__words[2]);
  if ((v62.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v14 = v62.__r_.__value_.__l.__size_;
  }
  if (!v14) {
    goto LABEL_116;
  }
LABEL_22:
  std::string::size_type v15 = HIBYTE(buf.__r_.__value_.__r.__words[2]);
  if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v15 = buf.__r_.__value_.__l.__size_;
  }
  if (v15)
  {
    int64x2_t v16 = (uint64_t **)(a2 + 24);
    uint64_t v17 = *(unsigned __int8 *)(a2 + 47);
    int v18 = (char)v17;
    if ((v17 & 0x80u) != 0) {
      uint64_t v17 = *(void *)(a2 + 32);
    }
    switch(v17)
    {
      case 20:
        if (v18 >= 0) {
          CFAllocatorRef v19 = (uint64_t *)(a2 + 24);
        }
        else {
          CFAllocatorRef v19 = *v16;
        }
        uint64_t v20 = *v19;
        uint64_t v21 = v19[1];
        int v22 = *((_DWORD *)v19 + 4);
        if (v20 == 0x6E6F6870656C6554 && v21 == 0x525F706D75445F79 && v22 == 2036621669) {
          goto LABEL_80;
        }
        goto LABEL_82;
      case 22:
        if (v18 >= 0) {
          long long v25 = (uint64_t *)(a2 + 24);
        }
        else {
          long long v25 = *v16;
        }
        uint64_t v26 = *v25;
        uint64_t v27 = v25[1];
        uint64_t v28 = *(uint64_t *)((char *)v25 + 14);
        if (v26 != 0x6E6F6870656C6554 || v27 != 0x535F706D75445F79 || v28 != 0x646574726174535FLL) {
          goto LABEL_82;
        }
        goto LABEL_80;
      case 23:
        if (v18 >= 0) {
          int v31 = (uint64_t *)(a2 + 24);
        }
        else {
          int v31 = *v16;
        }
        uint64_t v32 = *v31;
        uint64_t v33 = v31[1];
        uint64_t v34 = *(uint64_t *)((char *)v31 + 15);
        BOOL v36 = v32 == 0x72616C756C6C6543 && v33 == 0x445F65757373495FLL && v34 == 0x6465746365746544;
        if (v36 && (a1 != 2 || (config::hw::watch((config::hw *)v11) & 1) != 0)) {
          break;
        }
        goto LABEL_82;
      case 27:
        if (v18 >= 0) {
          std::string::size_type v37 = (uint64_t *)(a2 + 24);
        }
        else {
          std::string::size_type v37 = *v16;
        }
        uint64_t v38 = *v37;
        uint64_t v39 = v37[1];
        uint64_t v40 = v37[2];
        uint64_t v41 = *(uint64_t *)((char *)v37 + 19);
        if (v38 != 0x6E6F6870656C6554
          || v39 != 0x495F706D75445F79
          || v40 != 0x696369666675736ELL
          || v41 != 0x746E656963696666)
        {
          goto LABEL_82;
        }
LABEL_80:
        if ((TelephonyUtilIsInternalBuild() & 1) != 0 || TelephonyUtilIsCarrierBuild()) {
          goto LABEL_82;
        }
        break;
      default:
LABEL_82:
        std::string::size_type v45 = *(void *)a2;
        long long v46 = *(_OWORD *)(a2 + 8);
        *(std::string *)a2 = v62;
        v62.__r_.__value_.__r.__words[0] = v45;
        *(_OWORD *)&v62.__r_.__value_.__r.__words[1] = v46;
        v60.__r_.__value_.__r.__words[2] = 0xAAAAAAAAAAAAAAAALL;
        *(void *)&long long v46 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v46 + 1) = 0xAAAAAAAAAAAAAAAALL;
        aBlocunint64_t k = v46;
        *(_OWORD *)&v60.__r_.__value_.__l.__data_ = v46;
        uint64_t v47 = _Block_copy(v7);
        uint64_t v48 = *a4;
        *(void *)&aBlocunint64_t k = v47;
        *((void *)&aBlock + 1) = v48;
        if (v48) {
          dispatch_retain(v48);
        }
        if (*(char *)(a2 + 47) < 0)
        {
          std::string::__init_copy_ctor_external(&v60, *(const std::string::value_type **)(a2 + 24), *(void *)(a2 + 32));
        }
        else
        {
          *(_OWORD *)&v60.__r_.__value_.__l.__data_ = *(_OWORD *)v16;
          v60.__r_.__value_.__r.__words[2] = *(void *)(a2 + 40);
        }
        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v58, buf.__r_.__value_.__l.__data_, buf.__r_.__value_.__l.__size_);
        }
        else {
          std::string v58 = buf;
        }
        uint64_t v49 = +[UserNotificationManager sharedInstance:&v58];
        if (*(char *)(a2 + 23) < 0) {
          std::string::__init_copy_ctor_external(&v55, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
        }
        else {
          std::string v55 = *(std::string *)a2;
        }
        if (*(char *)(a2 + 47) < 0)
        {
          std::string::__init_copy_ctor_external(&v56, *(const std::string::value_type **)(a2 + 24), *(void *)(a2 + 32));
        }
        else
        {
          *(_OWORD *)&v56.__r_.__value_.__l.__data_ = *(_OWORD *)v16;
          v56.__r_.__value_.__r.__words[2] = *(void *)(a2 + 40);
        }
        if (*(char *)(a2 + 71) < 0) {
          std::string::__init_copy_ctor_external(&v57, *(const std::string::value_type **)(a2 + 48), *(void *)(a2 + 56));
        }
        else {
          std::string v57 = *(std::string *)(a2 + 48);
        }
        id v52 = _Block_copy((const void *)aBlock);
        dispatch_object_t v53 = (dispatch_object_t)*((void *)&aBlock + 1);
        if (*((void *)&aBlock + 1)) {
          dispatch_retain(*((dispatch_object_t *)&aBlock + 1));
        }
        if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&__p, v60.__r_.__value_.__l.__data_, v60.__r_.__value_.__l.__size_);
        }
        else {
          std::string __p = v60;
        }
        [v49 showNotification:&v55 withCallBackData:&v52];
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (v53) {
          dispatch_release(v53);
        }

        if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v57.__r_.__value_.__l.__data_);
          if ((SHIBYTE(v56.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_110:
            if ((SHIBYTE(v55.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
              goto LABEL_111;
            }
            goto LABEL_123;
          }
        }
        else if ((SHIBYTE(v56.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          goto LABEL_110;
        }
        operator delete(v56.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v55.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_111:

          if ((SHIBYTE(v58.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_112;
          }
          goto LABEL_124;
        }
LABEL_123:
        operator delete(v55.__r_.__value_.__l.__data_);

        if ((SHIBYTE(v58.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_112:
          if ((SHIBYTE(v60.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_113;
          }
          goto LABEL_125;
        }
LABEL_124:
        operator delete(v58.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v60.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_113:
          uint64_t v50 = *((void *)&aBlock + 1);
          if (!*((void *)&aBlock + 1)) {
            goto LABEL_115;
          }
          goto LABEL_114;
        }
LABEL_125:
        operator delete(v60.__r_.__value_.__l.__data_);
        uint64_t v50 = *((void *)&aBlock + 1);
        if (*((void *)&aBlock + 1)) {
LABEL_114:
        }
          dispatch_release(v50);
LABEL_115:

        break;
    }
  }
LABEL_116:
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(buf.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v62.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_118;
    }
LABEL_120:
    operator delete(v62.__r_.__value_.__l.__data_);
    goto LABEL_118;
  }
  if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_120;
  }
LABEL_118:
}

void sub_2636BC160(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, dispatch_object_t object, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,uint64_t a38,dispatch_object_t a39)
{
  if (object) {
    dispatch_release(object);
  }

  support::ui::NotificationInfo::~NotificationInfo(&a15);
  if (a36 < 0) {
    operator delete(__p);
  }
  CallBackData::~CallBackData((void **)&a38);
  if (*(char *)(v41 - 121) < 0)
  {
    operator delete(*(void **)(v41 - 144));
    if ((*(char *)(v41 - 89) & 0x80000000) == 0)
    {
LABEL_7:

      _Unwind_Resume(a1);
    }
  }
  else if ((*(char *)(v41 - 89) & 0x80000000) == 0)
  {
    goto LABEL_7;
  }
  operator delete(*(void **)(v41 - 112));

  _Unwind_Resume(a1);
}

std::string *__cdecl std::string::__assign_external(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  LODWORD(v6) = SHIBYTE(this->__r_.__value_.__r.__words[2]);
  if ((v6 & 0x80000000) != 0)
  {
    unint64_t v10 = this->__r_.__value_.__r.__words[2];
    unint64_t v8 = (v10 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if (__n > v8)
    {
      size_t v11 = 0x7FFFFFFFFFFFFFF7;
      if (0x7FFFFFFFFFFFFFF7 - (v10 & 0x7FFFFFFFFFFFFFFFLL) >= __n - v8)
      {
        long long v9 = (std::string *)this->__r_.__value_.__r.__words[0];
        if (v8 > 0x3FFFFFFFFFFFFFF2)
        {
LABEL_15:
          id v7 = operator new(v11);
          memcpy(v7, __s, __n);
          if (v8 != 22) {
            operator delete(v9);
          }
          this->__r_.__value_.__r.__words[2] = v11 | 0x8000000000000000;
          this->__r_.__value_.__r.__words[0] = (std::string::size_type)v7;
LABEL_23:
          this->__r_.__value_.__l.__size_ = __n;
          goto LABEL_24;
        }
LABEL_8:
        std::string::size_type v12 = 2 * v8;
        if (__n > 2 * v8) {
          std::string::size_type v12 = __n;
        }
        uint64_t v13 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v12 | 7) != 0x17) {
          uint64_t v13 = v12 | 7;
        }
        if (v12 >= 0x17) {
          size_t v11 = v13 + 1;
        }
        else {
          size_t v11 = 23;
        }
        goto LABEL_15;
      }
LABEL_25:
      std::string::__throw_length_error[abi:ne180100]();
    }
    unint64_t v6 = HIBYTE(v10);
    id v7 = (void *)this->__r_.__value_.__r.__words[0];
  }
  else
  {
    id v7 = this;
    if (__n > 0x16)
    {
      if (__n - 0x7FFFFFFFFFFFFFF7 >= 0x800000000000001FLL)
      {
        unint64_t v8 = 22;
        long long v9 = this;
        goto LABEL_8;
      }
      goto LABEL_25;
    }
  }
  if (__n)
  {
    memmove(v7, __s, __n);
    LOBYTE(v6) = *((unsigned char *)&this->__r_.__value_.__s + 23);
  }
  if ((v6 & 0x80) != 0) {
    goto LABEL_23;
  }
  *((unsigned char *)&this->__r_.__value_.__s + 23) = __n & 0x7F;
LABEL_24:
  *((unsigned char *)v7 + __n) = 0;
  return this;
}

void std::__tree<std::__value_type<std::string,CallBackData>,std::__map_value_compare<std::string,std::__value_type<std::string,CallBackData>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CallBackData>>>::destroy(char *a1)
{
  if (!a1) {
    return;
  }
  std::__tree<std::__value_type<std::string,CallBackData>,std::__map_value_compare<std::string,std::__value_type<std::string,CallBackData>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CallBackData>>>::destroy(*(void *)a1);
  std::__tree<std::__value_type<std::string,CallBackData>,std::__map_value_compare<std::string,std::__value_type<std::string,CallBackData>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CallBackData>>>::destroy(*((void *)a1 + 1));
  if (a1[95] < 0)
  {
    operator delete(*((void **)a1 + 9));
    uint64_t v2 = *((void *)a1 + 8);
    if (!v2) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  uint64_t v2 = *((void *)a1 + 8);
  if (v2) {
LABEL_4:
  }
    dispatch_release(v2);
LABEL_5:

  if (a1[55] < 0)
  {
    operator delete(*((void **)a1 + 4));
    long long v3 = a1;
  }
  else
  {
    long long v3 = a1;
  }
  operator delete(v3);
}

void Simulator::create(uint64_t *a1@<X0>, void *a2@<X8>)
{
  long long v4 = operator new(0xB0uLL);
  uint64_t v5 = (uint64_t)v4;
  uint64_t v6 = *a1;
  id v7 = (std::__shared_weak_count *)a1[1];
  v8[0] = v6;
  v8[1] = (uint64_t)v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  Simulator::Simulator((uint64_t)v4, v8);
  *a2 = 0xAAAAAAAAAAAAAAAALL;
  a2[1] = 0xAAAAAAAAAAAAAAAALL;
  std::shared_ptr<Simulator>::shared_ptr[abi:ne180100]<Simulator,std::shared_ptr<Simulator> ctu::SharedSynchronizable<Simulator>::make_shared_ptr<Simulator>(Simulator*)::{lambda(Simulator*)#1},void>(a2, v5);
  ctu::Loggable<Simulator,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(*a2 + 48);
  if (v7)
  {
    std::__shared_weak_count::__release_weak(v7);
  }
}

void sub_2636BC5B0(_Unwind_Exception *a1)
{
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100](v2);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(a1);
}

uint64_t Simulator::Simulator(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  long long v4 = (std::__shared_weak_count *)a2[1];
  if (v4)
  {
    atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  *(void *)a1 = &unk_270EAD770;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = v4;
  if (v4)
  {
    atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    *(void *)(a1 + 24) = 0;
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = 0;
    std::__shared_weak_count::__release_weak(v4);
    *(void *)a1 = &unk_270EA6BA0;
    std::__shared_weak_count::__release_weak(v4);
  }
  else
  {
    *(void *)(a1 + 24) = 0;
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = 0;
    *(void *)a1 = &unk_270EA6BA0;
  }
  *(void *)a1 = &unk_270EA6938;
  *(void *)(a1 + 48) = &unk_270EA69A8;
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v12, "com.apple.telephony.abm", "simulator");
  GetABMLogServer(&v10);
  initially_inactive = dispatch_queue_attr_make_initially_inactive(0);
  uint64_t v6 = dispatch_queue_create_with_target_V2("simulator", initially_inactive, 0);
  dispatch_set_qos_class_floor(v6, QOS_CLASS_DEFAULT, 0);
  dispatch_activate(v6);
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = v6;
  if (v6)
  {
    dispatch_retain(v6);
    *(void *)(a1 + 144) = 0;
    dispatch_release(v6);
  }
  else
  {
    *(void *)(a1 + 144) = 0;
  }
  *(void *)(a1 + 48) = &unk_270EA6C10;
  ctu::OsLogContext::OsLogContext();
  ctu::OsLogContext::OsLogContext();
  ctu::LoggerCommonBase::LoggerCommonBase();
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v14);
  *(void *)(a1 + 56) = &unk_270EA5428;
  id v7 = v11;
  *(void *)(a1 + 104) = v10;
  *(void *)(a1 + 112) = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v13);
  *(void *)(a1 + 48) = &unk_270EA6CA0;
  unint64_t v8 = v11;
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v12);
  *(void *)a1 = &unk_270EA6938;
  *(void *)(a1 + 48) = &unk_270EA69A8;
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 160) = 0;
  *(unsigned char *)(a1 + 168) = 0;
  return a1;
}

void sub_2636BC8A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15)
{
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&a15);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&a13);
  ctu::SharedSynchronizable<data::TransportService::State>::~SharedSynchronizable(v16);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&a11);
  Service::~Service(v15);
  _Unwind_Resume(a1);
}

void sub_2636BC8E4(_Unwind_Exception *a1)
{
  Service::~Service(v1);
  _Unwind_Resume(a1);
}

const char *Simulator::getName(Simulator *this)
{
  return "simulator";
}

void Simulator::initialize(uint64_t *a1, NSObject **a2)
{
  v11[0] = MEMORY[0x263EF8330];
  v11[1] = 1174405120;
  v11[2] = ___ZN9Simulator10initializeEN8dispatch13group_sessionE_block_invoke;
  v11[3] = &__block_descriptor_tmp_5_5;
  uint64_t v3 = *a2;
  v11[4] = a1;
  dispatch_group_t group = v3;
  if (v3)
  {
    dispatch_retain(v3);
    dispatch_group_enter(group);
  }
  ctu::SharedSynchronizable<Simulator>::execute_wrapped(a1 + 15, (uint64_t)v11);
  long long v4 = (std::__shared_weak_count *)a1[16];
  if (!v4 || (uint64_t v5 = a1[15], (v6 = std::__shared_weak_count::lock(v4)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  id v7 = v6;
  unint64_t v8 = operator new(8uLL);
  void *v8 = a1;
  long long v9 = a1[17];
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v10 = operator new(0x18uLL);
  void *v10 = v8;
  v10[1] = v5;
  v10[2] = v7;
  dispatch_async_f(v9, v10, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<Simulator>::execute_wrapped<Simulator::initialize(dispatch::group_session)::$_0>(Simulator::initialize(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<Simulator::initialize(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<Simulator::initialize(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke);
  if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  if (group)
  {
    dispatch_group_leave(group);
    if (group) {
      dispatch_release(group);
    }
  }
}

void ___ZN9Simulator10initializeEN8dispatch13group_sessionE_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(std::__shared_weak_count **)(v1 + 128);
  if (!v2 || (uint64_t v3 = *(void *)(v1 + 120), (v4 = std::__shared_weak_count::lock(v2)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v5 = v4;
  atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v5);
  }
  uint64_t v6 = (const void *)*MEMORY[0x263F26780];
  size_t v7 = strlen((const char *)*MEMORY[0x263F26780]);
  if (v7 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  unint64_t v8 = (void *)v7;
  if (v7 >= 0x17)
  {
    uint64_t v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17) {
      uint64_t v10 = v7 | 7;
    }
    uint64_t v11 = v10 + 1;
    long long v9 = (void **)operator new(v10 + 1);
    __dst[1] = v8;
    unint64_t v17 = v11 | 0x8000000000000000;
    __dst[0] = v9;
    goto LABEL_12;
  }
  HIBYTE(v17) = v7;
  long long v9 = __dst;
  if (v7) {
LABEL_12:
  }
    memmove(v9, v6, (size_t)v8);
  *((unsigned char *)v8 + (void)v9) = 0;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN9Simulator10initializeEN8dispatch13group_sessionE_block_invoke_2;
  aBlock[3] = &__block_descriptor_tmp_4_0;
  aBlock[4] = v1;
  aBlock[5] = v3;
  std::string::size_type v14 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  std::string::size_type v12 = _Block_copy(aBlock);
  std::string::size_type v15 = v12;
  Service::registerCommandHandler(v1, (uint64_t)__dst, &v15);
  if (v12) {
    _Block_release(v12);
  }
  if (SHIBYTE(v17) < 0) {
    operator delete(__dst[0]);
  }
  if (v14) {
    std::__shared_weak_count::__release_weak(v14);
  }
  std::__shared_weak_count::__release_weak(v5);
}

void sub_2636BCC54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (v24) {
    _Block_release(v24);
  }
  if (a16)
  {
    std::__shared_weak_count::__release_weak(a16);
    if ((a23 & 0x80000000) == 0)
    {
LABEL_5:
      std::__shared_weak_count::__release_weak(v23);
      _Unwind_Resume(a1);
    }
  }
  else if ((a23 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(__p);
  std::__shared_weak_count::__release_weak(v23);
  _Unwind_Resume(a1);
}

void sub_2636BCCB0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_weak(v1);
  _Unwind_Resume(a1);
}

void ___ZN9Simulator10initializeEN8dispatch13group_sessionE_block_invoke_2(void *a1, void **a2, void **a3)
{
  long long v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    uint64_t v7 = a1[4];
    unint64_t v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      long long v9 = v8;
      if (!a1[5])
      {
LABEL_12:
        if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
        return;
      }
      v12[0] = MEMORY[0x263EF8330];
      v12[1] = 1174405120;
      v12[2] = ___ZN9Simulator10initializeEN8dispatch13group_sessionE_block_invoke_3;
      v12[3] = &__block_descriptor_tmp_16;
      uint64_t v10 = *a2;
      v12[4] = v7;
      xpc_object_t object = v10;
      if (v10)
      {
        xpc_retain(v10);
        uint64_t v11 = *a3;
        if (!*a3) {
          goto LABEL_9;
        }
      }
      else
      {
        xpc_object_t object = xpc_null_create();
        uint64_t v11 = *a3;
        if (!*a3)
        {
LABEL_9:
          aBlocunint64_t k = v11;
          ctu::SharedSynchronizable<Simulator>::execute_wrapped((uint64_t *)(v7 + 120), (uint64_t)v12);
          if (aBlock) {
            _Block_release(aBlock);
          }
          xpc_release(object);
          xpc_object_t object = 0;
          goto LABEL_12;
        }
      }
      uint64_t v11 = _Block_copy(v11);
      goto LABEL_9;
    }
  }
}

void ___ZN9Simulator10initializeEN8dispatch13group_sessionE_block_invoke_3(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  xpc_object_t value = xpc_dictionary_get_value(*(xpc_object_t *)(a1 + 40), (const char *)*MEMORY[0x263F26610]);
  xpc_object_t object = value;
  if (value) {
    xpc_retain(value);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  int v4 = xpc::dyn_cast_or_default((xpc *)&object, 0);
  xpc_release(object);
  if ((v4 | 0xE0000000) != 0xE0000270) {
    *(unsigned char *)(v2 + 168) = (v4 | 0xE0000000) == -536870272;
  }
  xpc_object_t v5 = xpc_null_create();
  uint64_t v6 = *(void *)(a1 + 48);
  xpc_object_t object = v5;
  xpc_object_t v7 = xpc_null_create();
  (*(void (**)(uint64_t, uint64_t, xpc_object_t *))(v6 + 16))(v6, 3760250880, &object);
  xpc_release(object);
  xpc_release(v7);
}

void sub_2636BCF14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  xpc_release(object);
  xpc_release(v10);
  _Unwind_Resume(a1);
}

uint64_t Simulator::handleSimulatedPowerNotification_sync(Simulator *this, int a2)
{
  if (a2 != -536870288) {
    *((unsigned char *)this + 168) = a2 == -536870272;
  }
  return 0;
}

void *__copy_helper_block_e8_40c15_ZTSN3xpc4dictE48c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE(uint64_t a1, uint64_t a2)
{
  int v4 = *(void **)(a2 + 40);
  *(void *)(a1 + 40) = v4;
  if (v4)
  {
    xpc_retain(v4);
    uint64_t result = *(void **)(a2 + 48);
    if (!result) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  *(void *)(a1 + 40) = xpc_null_create();
  uint64_t result = *(void **)(a2 + 48);
  if (result) {
LABEL_5:
  }
    uint64_t result = _Block_copy(result);
LABEL_6:
  *(void *)(a1 + 48) = result;
  return result;
}

void __destroy_helper_block_e8_40c15_ZTSN3xpc4dictE48c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 48);
  if (v2) {
    _Block_release(v2);
  }
  xpc_release(*(xpc_object_t *)(a1 + 40));
  *(void *)(a1 + 40) = 0;
}

uint64_t __copy_helper_block_e8_40c33_ZTSNSt3__18weak_ptrI9SimulatorEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c33_ZTSNSt3__18weak_ptrI9SimulatorEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void __copy_helper_block_e8_40c30_ZTSN8dispatch13group_sessionE(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(NSObject **)(a2 + 40);
  *(void *)(a1 + 40) = v3;
  if (v3)
  {
    dispatch_retain(v3);
    int v4 = *(NSObject **)(a1 + 40);
    if (v4)
    {
      dispatch_group_enter(v4);
    }
  }
}

void __destroy_helper_block_e8_40c30_ZTSN8dispatch13group_sessionE(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 40);
  if (v2)
  {
    dispatch_group_leave(v2);
    uint64_t v3 = *(NSObject **)(a1 + 40);
    if (v3)
    {
      dispatch_release(v3);
    }
  }
}

void Simulator::finishInitialization_sync(std::__shared_weak_count **this)
{
  uint64_t v2 = (const char *)((uint64_t (*)(std::__shared_weak_count **))(*this)->__shared_weak_owners_)(this);
  size_t v3 = strlen(v2);
  if (v3 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  int v4 = (void *)v3;
  if (v3 >= 0x17)
  {
    uint64_t v6 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17) {
      uint64_t v6 = v3 | 7;
    }
    uint64_t v7 = v6 + 1;
    xpc_object_t v5 = (void **)operator new(v6 + 1);
    __dst[1] = v4;
    unint64_t v32 = v7 | 0x8000000000000000;
    __dst[0] = v5;
  }
  else
  {
    HIBYTE(v32) = v3;
    xpc_object_t v5 = __dst;
    if (!v3) {
      goto LABEL_9;
    }
  }
  memmove(v5, v2, (size_t)v4);
LABEL_9:
  *((unsigned char *)v4 + (void)v5) = 0;
  CFTypeRef cf = 0;
  AppleBasebandManager::create();
  long long v8 = v33;
  long long v33 = 0uLL;
  long long v9 = this[20];
  *(_OWORD *)(this + 19) = v8;
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  uint64_t v10 = (std::__shared_weak_count *)*((void *)&v33 + 1);
  if (!*((void *)&v33 + 1)
    || atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v33 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    CFTypeRef v11 = cf;
    if (!cf) {
      goto LABEL_16;
    }
    goto LABEL_15;
  }
  ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
  std::__shared_weak_count::__release_weak(v10);
  CFTypeRef v11 = cf;
  if (cf) {
LABEL_15:
  }
    CFRelease(v11);
LABEL_16:
  if (SHIBYTE(v32) < 0) {
    operator delete(__dst[0]);
  }
  std::string::size_type v12 = this[16];
  if (!v12 || (v13 = this[15], (std::string::size_type v14 = std::__shared_weak_count::lock(v12)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  std::string::size_type v15 = v14;
  atomic_fetch_add_explicit(&v14->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v15);
  }
  int64x2_t v16 = (const void *)*MEMORY[0x263F26518];
  size_t v17 = strlen((const char *)*MEMORY[0x263F26518]);
  if (v17 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  int v18 = (void *)v17;
  if (v17 >= 0x17)
  {
    uint64_t v20 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v17 | 7) != 0x17) {
      uint64_t v20 = v17 | 7;
    }
    uint64_t v21 = v20 + 1;
    CFAllocatorRef v19 = operator new(v20 + 1);
    __p[1] = v18;
    unint64_t v29 = v21 | 0x8000000000000000;
    __p[0] = v19;
    goto LABEL_29;
  }
  HIBYTE(v29) = v17;
  CFAllocatorRef v19 = __p;
  if (v17) {
LABEL_29:
  }
    memmove(v19, v16, (size_t)v18);
  *((unsigned char *)v18 + (void)v19) = 0;
  v24[0] = MEMORY[0x263EF8330];
  v24[1] = 1174405120;
  v24[2] = ___ZN9Simulator25finishInitialization_syncEv_block_invoke;
  v24[3] = &__block_descriptor_tmp_9_0;
  v24[4] = this;
  v24[5] = v13;
  long long v25 = v15;
  atomic_fetch_add_explicit(&v15->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  int v22 = _Block_copy(v24);
  long long v23 = this[17];
  if (v23) {
    dispatch_retain((dispatch_object_t)this[17]);
  }
  aBlocunint64_t k = v22;
  dispatch_object_t object = v23;
  AppleBasebandManager::setEventHandler();
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (SHIBYTE(v29) < 0) {
    operator delete(__p[0]);
  }
  AppleBasebandManager::eventsOn((AppleBasebandManager *)this[19]);
  if (v25) {
    std::__shared_weak_count::__release_weak(v25);
  }
  std::__shared_weak_count::__release_weak(v15);
}

void sub_2636BD484(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a15) {
    std::__shared_weak_count::__release_weak(a15);
  }
  std::__shared_weak_count::__release_weak(v30);
  _Unwind_Resume(a1);
}

void ___ZN9Simulator25finishInitialization_syncEv_block_invoke(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    uint64_t v3 = a1[4];
    int v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      xpc_object_t v5 = v4;
      if (a1[5] && *(unsigned char *)(v3 + 168))
      {
        uint64_t v6 = *(NSObject **)(v3 + 88);
        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)uint64_t v7 = 0;
          _os_log_impl(&dword_26368A000, v6, OS_LOG_TYPE_DEFAULT, "#I Baseband reset during simulated low power, simulating exit low power", v7, 2u);
        }
        *(unsigned char *)(v3 + 168) = 0;
      }
      if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

uint64_t dispatch::callback<void({block_pointer})(std::shared_ptr<abm::client::Event>)>::~callback(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 8);
  if (v2) {
    dispatch_release(v2);
  }
  if (*(void *)a1) {
    _Block_release(*(const void **)a1);
  }
  return a1;
}

unsigned char *Simulator::getShutdownStages@<X0>(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v3 = operator new(1uLL);
  *a1 = v3;
  *uint64_t v3 = 3;
  uint64_t result = v3 + 1;
  a1[1] = result;
  a1[2] = result;
  return result;
}

void Simulator::shutdown(uint64_t a1, char a2, NSObject **a3)
{
  int v4 = (uint64_t *)(a1 + 120);
  v6[0] = MEMORY[0x263EF8330];
  v6[1] = 1174405120;
  v6[2] = ___ZN9Simulator8shutdownE13ShutdownStageN8dispatch13group_sessionE_block_invoke;
  v6[3] = &__block_descriptor_tmp_10;
  xpc_object_t v5 = *a3;
  dispatch_group_t group = v5;
  if (v5)
  {
    dispatch_retain(v5);
    dispatch_group_enter(group);
  }
  char v8 = a2;
  ctu::SharedSynchronizable<Simulator>::execute_wrapped(v4, (uint64_t)v6);
  if (group)
  {
    dispatch_group_leave(group);
    if (group) {
      dispatch_release(group);
    }
  }
}

void __copy_helper_block_e8_32c30_ZTSN8dispatch13group_sessionE(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(NSObject **)(a2 + 32);
  *(void *)(a1 + 32) = v3;
  if (v3)
  {
    dispatch_retain(v3);
    int v4 = *(NSObject **)(a1 + 32);
    if (v4)
    {
      dispatch_group_enter(v4);
    }
  }
}

void __destroy_helper_block_e8_32c30_ZTSN8dispatch13group_sessionE(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 32);
  if (v2)
  {
    dispatch_group_leave(v2);
    uint64_t v3 = *(NSObject **)(a1 + 32);
    if (v3)
    {
      dispatch_release(v3);
    }
  }
}

void Simulator::~Simulator(Simulator *this)
{
  Simulator::~Simulator(this);

  operator delete(v1);
}

{
  std::__shared_weak_count *v2;
  NSObject *v3;
  NSObject *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  std::__shared_weak_count *v9;

  *(void *)this = &unk_270EA6938;
  *((void *)this + 6) = &unk_270EA69A8;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 20);
  if (!v2 || atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    *((void *)this + 6) = &unk_270EA6C10;
    MEMORY[0x263E68AF0]((char *)this + 56);
    uint64_t v3 = *((void *)this + 18);
    if (!v3) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  *((void *)this + 6) = &unk_270EA6C10;
  MEMORY[0x263E68AF0]((char *)this + 56);
  uint64_t v3 = *((void *)this + 18);
  if (v3) {
LABEL_4:
  }
    dispatch_release(v3);
LABEL_5:
  int v4 = *((void *)this + 17);
  if (v4) {
    dispatch_release(v4);
  }
  xpc_object_t v5 = (std::__shared_weak_count *)*((void *)this + 16);
  if (v5) {
    std::__shared_weak_count::__release_weak(v5);
  }
  *(void *)this = &unk_270EAD770;
  uint64_t v6 = *((void *)this + 3);
  if (v6)
  {
    uint64_t v7 = *((void *)this + 4);
    char v8 = (void *)*((void *)this + 3);
    if (v7 != v6)
    {
      do
      {
        if (*(char *)(v7 - 1) < 0) {
          operator delete(*(void **)(v7 - 24));
        }
        v7 -= 24;
      }
      while (v7 != v6);
      char v8 = (void *)*((void *)this + 3);
    }
    *((void *)this + 4) = v6;
    operator delete(v8);
  }
  long long v9 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v9) {
    std::__shared_weak_count::__release_weak(v9);
  }
}

void non-virtual thunk to'Simulator::~Simulator(Simulator *this)
{
}

{
  void *v1;
  uint64_t vars8;

  Simulator::~Simulator((Simulator *)((char *)this - 48));

  operator delete(v1);
}

uint64_t ctu::Loggable<Simulator,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig(uint64_t a1)
{
  return MEMORY[0x270F97428](a1 + 8);
}

size_t ctu::Loggable<Simulator,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = (const char *)(*(uint64_t (**)(void))(*(void *)(a1 - 48) + 16))();
  size_t result = strlen(v3);
  if (result >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v5 = result;
  if (result >= 0x17)
  {
    uint64_t v6 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17) {
      uint64_t v6 = result | 7;
    }
    uint64_t v7 = v6 + 1;
    char v8 = operator new(v6 + 1);
    a2[1] = v5;
    a2[2] = v7 | 0x8000000000000000;
    *a2 = v8;
    a2 = v8;
  }
  else
  {
    *((unsigned char *)a2 + 23) = result;
    if (!result)
    {
      *(unsigned char *)a2 = 0;
      return result;
    }
  }
  size_t result = (size_t)memmove(a2, v3, v5);
  *((unsigned char *)a2 + v5) = 0;
  return result;
}

uint64_t ctu::Loggable<Simulator,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return MEMORY[0x270F978E0](a1 + 8);
}

void *ctu::Loggable<Simulator,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_270EA6C10;
  MEMORY[0x263E68AF0](a1 + 1);
  return a1;
}

void ctu::Loggable<Simulator,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_270EA6C10;
  MEMORY[0x263E68AF0](a1 + 1);

  operator delete(a1);
}

void ctu::Loggable<Simulator,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(uint64_t a1)
{
  uint64_t v1 = a1 + 56;
  if (*(void *)(a1 + 56))
  {
    if (!*(void *)(a1 + 80) || (uint64_t v2 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(a1 + 80))) == 0) {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    uint64_t v3 = v2;
    ctu::LoggerCommonBase::getLogDomain((ctu::LoggerCommonBase *)(v1 - 48));
    ctu::TrackedLogger::registerLoggerToServer();
    if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_2636BDC80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

void sub_2636BDC9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void *std::shared_ptr<Simulator>::shared_ptr[abi:ne180100]<Simulator,std::shared_ptr<Simulator> ctu::SharedSynchronizable<Simulator>::make_shared_ptr<Simulator>(Simulator*)::{lambda(Simulator*)#1},void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  int v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = &v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&unk_270EA6C50;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)a2;
  a1[1] = v4;
  if (!a2) {
    return a1;
  }
  uint64_t v6 = *(std::__shared_weak_count **)(a2 + 128);
  if (v6)
  {
    if (v6->__shared_owners_ == -1)
    {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      *(void *)(a2 + 120) = a2;
      *(void *)(a2 + 128) = v4;
      std::__shared_weak_count::__release_weak(v6);
      if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
        goto LABEL_8;
      }
    }
    return a1;
  }
  atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  *(void *)(a2 + 120) = a2;
  *(void *)(a2 + 128) = v4;
  if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
LABEL_8:
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void sub_2636BDDC8(void *a1)
{
  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[17], v1, (dispatch_function_t)std::shared_ptr<Simulator> ctu::SharedSynchronizable<Simulator>::make_shared_ptr<Simulator>(Simulator*)::{lambda(Simulator*)#1}::operator() const(Simulator*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_2636BDDF0(_Unwind_Exception *a1)
{
}

void std::__shared_ptr_pointer<Simulator *,std::shared_ptr<Simulator> ctu::SharedSynchronizable<Simulator>::make_shared_ptr<Simulator>(Simulator*)::{lambda(Simulator *)#1},std::allocator<Simulator>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<Simulator *,std::shared_ptr<Simulator> ctu::SharedSynchronizable<Simulator>::make_shared_ptr<Simulator>(Simulator*)::{lambda(Simulator *)#1},std::allocator<Simulator>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<Simulator *,std::shared_ptr<Simulator> ctu::SharedSynchronizable<Simulator>::make_shared_ptr<Simulator>(Simulator*)::{lambda(Simulator *)#1},std::allocator<Simulator>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableI9SimulatorE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_") {
    return a1 + 24;
  }
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableI9SimulatorE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableI9SimulatorE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_"))return 0; {
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableI9SimulatorE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  }
  return 0;
}

uint64_t std::shared_ptr<Simulator> ctu::SharedSynchronizable<Simulator>::make_shared_ptr<Simulator>(Simulator*)::{lambda(Simulator*)#1}::operator() const(Simulator*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void *ctu::SharedLoggable<Simulator,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(void *a1)
{
  *a1 = &unk_270EA6C10;
  MEMORY[0x263E68AF0](a1 + 1);
  uint64_t v2 = a1[12];
  if (v2) {
    dispatch_release(v2);
  }
  unint64_t v3 = a1[11];
  if (v3) {
    dispatch_release(v3);
  }
  int v4 = (std::__shared_weak_count *)a1[10];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

void ctu::SharedLoggable<Simulator,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(void *a1)
{
  *a1 = &unk_270EA6C10;
  MEMORY[0x263E68AF0](a1 + 1);
  uint64_t v2 = a1[12];
  if (v2) {
    dispatch_release(v2);
  }
  unint64_t v3 = a1[11];
  if (v3) {
    dispatch_release(v3);
  }
  int v4 = (std::__shared_weak_count *)a1[10];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }

  operator delete(a1);
}

void ctu::SharedSynchronizable<Simulator>::execute_wrapped(uint64_t *a1, uint64_t a2)
{
  unint64_t v3 = (std::__shared_weak_count *)a1[1];
  if (!v3 || (uint64_t v5 = *a1, (v6 = std::__shared_weak_count::lock(v3)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v7 = v6;
  char v8 = a1[2];
  block[0] = MEMORY[0x263EF8330];
  block[1] = 1174405120;
  block[2] = ___ZNK3ctu20SharedSynchronizableI9SimulatorE15execute_wrappedEU13block_pointerFvvE_block_invoke;
  block[3] = &unk_270EA6CD8;
  void block[5] = v5;
  std::string::size_type v12 = v7;
  p_shared_owners = &v7->__shared_owners_;
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  block[4] = a2;
  dispatch_async(v8, block);
  uint64_t v10 = v12;
  if (!v12 || atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      return;
    }
LABEL_8:
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    return;
  }
  ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
  std::__shared_weak_count::__release_weak(v10);
  if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_8;
  }
}

uint64_t ___ZNK3ctu20SharedSynchronizableI9SimulatorE15execute_wrappedEU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t __copy_helper_block_e8_40c37_ZTSNSt3__110shared_ptrIK9SimulatorEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c37_ZTSNSt3__110shared_ptrIK9SimulatorEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void dispatch::async<void ctu::SharedSynchronizable<Simulator>::execute_wrapped<Simulator::initialize(dispatch::group_session)::$_0>(Simulator::initialize(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<Simulator::initialize(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<Simulator::initialize(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count ****)a1;
  Simulator::finishInitialization_sync(**(std::__shared_weak_count ****)a1);
  operator delete(v2);
  unint64_t v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    int v4 = (void *)a1;
  }
  else
  {
    int v4 = (void *)a1;
  }
  operator delete(v4);
}

void sub_2636BE290(_Unwind_Exception *a1)
{
  operator delete(v2);
  int v4 = (std::__shared_weak_count *)v1[2];
  if (v4)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t __cxx_global_var_init_5()
{
  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<ctu::power::assertion>::~PthreadMutexGuardPolicy, &ctu::Singleton<ctu::power::assertion,ctu::power::assertion,ctu::PthreadMutexGuardPolicy<ctu::power::assertion>>::sInstance, &dword_26368A000);
  }
  return result;
}

{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<support::log::buffer>::~PthreadMutexGuardPolicy, &ctu::Singleton<support::log::buffer,support::log::buffer,ctu::PthreadMutexGuardPolicy<support::log::buffer>>::sInstance, &dword_26368A000);
  }
  return result;
}

void TransportService::create(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

uint64_t MipcTransportService::MipcTransportService(uint64_t a1, void *a2, void *a3, void *a4, uint64_t *a5)
{
  *(void *)a1 = &unk_270EA6D18;
  *(void *)(a1 + 104) = &unk_270EA6DC8;
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v18, "com.apple.telephony.abm", "ipc.svc.mipc");
  initially_inactive = dispatch_queue_attr_make_initially_inactive(0);
  CFTypeRef v11 = dispatch_queue_create_with_target_V2("ipc.svc.mipc", initially_inactive, 0);
  dispatch_set_qos_class_floor(v11, QOS_CLASS_DEFAULT, 0);
  dispatch_activate(v11);
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = v11;
  if (v11)
  {
    dispatch_retain(v11);
    *(void *)(a1 + 96) = 0;
    dispatch_release(v11);
  }
  else
  {
    *(void *)(a1 + 96) = 0;
  }
  *(void *)a1 = &unk_270EA6FE8;
  ctu::OsLogContext::OsLogContext();
  ctu::OsLogContext::OsLogContext();
  ctu::LoggerCommonBase::LoggerCommonBase();
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v20);
  *(void *)(a1 + 8) = &unk_270EA5428;
  *(void *)(a1 + 56) = *a2;
  uint64_t v12 = a2[1];
  *(void *)(a1 + 64) = v12;
  if (v12) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v19);
  *(void *)a1 = &unk_270EA7028;
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v18);
  uint64_t v13 = *a5;
  std::string::size_type v14 = (std::__shared_weak_count *)a5[1];
  if (v14)
  {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
    *(void *)(a1 + 104) = &unk_270EA6F68;
    *(void *)(a1 + 112) = v13;
    *(void *)(a1 + 120) = v14;
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  else
  {
    *(void *)(a1 + 104) = &unk_270EA6F68;
    *(void *)(a1 + 112) = v13;
    *(void *)(a1 + 120) = 0;
  }
  *(void *)a1 = &unk_270EA6D18;
  *(void *)(a1 + 104) = &unk_270EA6DC8;
  *(_DWORD *)(a1 + 128) = 0;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(void *)(a1 + 184) = *a3;
  uint64_t v15 = a3[1];
  *(void *)(a1 + 192) = v15;
  if (v15) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 200) = *a4;
  uint64_t v16 = a4[1];
  *(void *)(a1 + 208) = v16;
  if (v16) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v16 + 16), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 216) = 0;
  *(unsigned char *)(a1 + 240) = 0;
  *(void *)(a1 + 224) = 0;
  *(void *)(a1 + 232) = 0;
  std::string::append((std::string *)(a1 + 216), 0x100uLL, 0);
  return a1;
}

void sub_2636BE62C(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 239) < 0)
  {
    operator delete(*v7);
    long long v9 = *(std::__shared_weak_count **)(v1 + 208);
    if (!v9)
    {
LABEL_3:
      std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100](v6);
      std::unique_ptr<support::misc::Watchdog>::~unique_ptr[abi:ne180100](v3);
      uint64_t v10 = *(NSObject **)(v1 + 168);
      if (!v10) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  else
  {
    long long v9 = *(std::__shared_weak_count **)(v1 + 208);
    if (!v9) {
      goto LABEL_3;
    }
  }
  std::__shared_weak_count::__release_weak(v9);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100](v6);
  std::unique_ptr<support::misc::Watchdog>::~unique_ptr[abi:ne180100](v3);
  uint64_t v10 = *(NSObject **)(v1 + 168);
  if (!v10)
  {
LABEL_5:
    dispatch::callback<void({block_pointer})(WakeReason)>::~callback(v5);
    std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100](v4);
    TransportService::~TransportService(v2);
    ctu::SharedLoggable<MipcTransportService,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable((void *)v1);
    _Unwind_Resume(a1);
  }
LABEL_4:
  dispatch_release(v10);
  goto LABEL_5;
}

void sub_2636BE6B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13)
{
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&a13);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&a11);
  ctu::SharedSynchronizable<data::TransportService::State>::~SharedSynchronizable(v13);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&a9);
  _Unwind_Resume(a1);
}

const char *MipcTransportService::getName(MipcTransportService *this)
{
  return "ipc.svc.mipc";
}

void **std::unique_ptr<support::misc::Watchdog>::~unique_ptr[abi:ne180100](void **a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    TelephonyBasebandWatchdogStop();
    operator delete(v2);
  }
  return a1;
}

uint64_t dispatch::callback<void({block_pointer})(WakeReason)>::~callback(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 8);
  if (v2) {
    dispatch_release(v2);
  }
  if (*(void *)a1) {
    _Block_release(*(const void **)a1);
  }
  return a1;
}

void TransportService::~TransportService(TransportService *this)
{
  *(void *)this = &unk_270EA6F68;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v1)
  {
    if (!atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void *ctu::SharedLoggable<MipcTransportService,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(void *a1)
{
  *a1 = &unk_270EA6FE8;
  MEMORY[0x263E68AF0](a1 + 1);
  uint64_t v2 = a1[12];
  if (v2) {
    dispatch_release(v2);
  }
  unint64_t v3 = a1[11];
  if (v3) {
    dispatch_release(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[10];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = &unk_270EA6FE8;
  MEMORY[0x263E68AF0](a1 + 1);
  uint64_t v2 = a1[12];
  if (v2) {
    dispatch_release(v2);
  }
  unint64_t v3 = a1[11];
  if (v3) {
    dispatch_release(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[10];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

void MipcTransportService::~MipcTransportService(MipcTransportService *this)
{
  *(void *)this = &unk_270EA6D18;
  *((void *)this + 13) = &unk_270EA6DC8;
  MipcTransportService::cancelWakeRequest_sync(this);
  uint64_t v2 = dispatch_group_create();
  dispatch_group_wait(v2, 0xFFFFFFFFFFFFFFFFLL);
  if (v2) {
    dispatch_release(v2);
  }
  unint64_t v3 = *((void *)this + 5);
  if (!os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    if ((*((char *)this + 239) & 0x80000000) == 0) {
      goto LABEL_5;
    }
LABEL_31:
    operator delete(*((void **)this + 27));
    uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 26);
    if (!v4) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  *(_WORD *)uint64_t v15 = 0;
  _os_log_impl(&dword_26368A000, v3, OS_LOG_TYPE_DEFAULT, "#I Gone!", v15, 2u);
  if (*((char *)this + 239) < 0) {
    goto LABEL_31;
  }
LABEL_5:
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 26);
  if (v4) {
LABEL_6:
  }
    std::__shared_weak_count::__release_weak(v4);
LABEL_7:
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 24);
  if (!v5 || atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    uint64_t v6 = (void *)*((void *)this + 22);
    *((void *)this + 22) = 0;
    if (!v6) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  uint64_t v6 = (void *)*((void *)this + 22);
  *((void *)this + 22) = 0;
  if (v6)
  {
LABEL_10:
    TelephonyBasebandWatchdogStop();
    operator delete(v6);
  }
LABEL_11:
  uint64_t v7 = *((void *)this + 21);
  if (v7) {
    dispatch_release(v7);
  }
  char v8 = *((void *)this + 20);
  if (v8) {
    dispatch_release(v8);
  }
  long long v9 = (const void *)*((void *)this + 19);
  if (v9) {
    _Block_release(v9);
  }
  uint64_t v10 = (std::__shared_weak_count *)*((void *)this + 18);
  if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  *((void *)this + 13) = &unk_270EA6F68;
  CFTypeRef v11 = (std::__shared_weak_count *)*((void *)this + 15);
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  *(void *)this = &unk_270EA6FE8;
  MEMORY[0x263E68AF0]((char *)this + 8);
  uint64_t v12 = *((void *)this + 12);
  if (v12) {
    dispatch_release(v12);
  }
  uint64_t v13 = *((void *)this + 11);
  if (v13) {
    dispatch_release(v13);
  }
  std::string::size_type v14 = (std::__shared_weak_count *)*((void *)this + 10);
  if (v14) {
    std::__shared_weak_count::__release_weak(v14);
  }
}

{
  void *v1;
  uint64_t vars8;

  MipcTransportService::~MipcTransportService(this);

  operator delete(v1);
}

void MipcTransportService::shutdown_sync(MipcTransportService *this)
{
  MipcTransportService::cancelWakeRequest_sync(this);
  uint64_t v1 = dispatch_group_create();
  dispatch_group_wait(v1, 0xFFFFFFFFFFFFFFFFLL);
  if (v1)
  {
    dispatch_release(v1);
  }
}

const char *non-virtual thunk to'MipcTransportService::getName(MipcTransportService *this)
{
  return "ipc.svc.mipc";
}

void MipcTransportService::cancelWakeRequest_sync(MipcTransportService *this)
{
  uint64_t v2 = *((void *)this + 21);
  if (v2)
  {
    dispatch_source_cancel(v2);
    unint64_t v3 = *((void *)this + 21);
    *((void *)this + 21) = 0;
    if (v3) {
      dispatch_release(v3);
    }
    if (*((void *)this + 19) && *((void *)this + 20))
    {
      if (*((char *)this + 239) < 0)
      {
        if (*((void *)this + 28)) {
          goto LABEL_8;
        }
      }
      else if (*((unsigned char *)this + 239))
      {
LABEL_8:
        xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
        if (v4 || (xpc_object_t v4 = xpc_null_create()) != 0)
        {
          if (MEMORY[0x263E6A240](v4) == MEMORY[0x263EF8708])
          {
            xpc_retain(v4);
            xpc_object_t v5 = v4;
          }
          else
          {
            xpc_object_t v5 = xpc_null_create();
          }
        }
        else
        {
          xpc_object_t v5 = xpc_null_create();
          xpc_object_t v4 = 0;
        }
        xpc_release(v4);
        uint64_t v10 = (char *)this + 216;
        if (*((char *)this + 239) < 0) {
          uint64_t v10 = *(const char **)v10;
        }
        xpc_object_t v11 = xpc_string_create(v10);
        if (!v11) {
          xpc_object_t v11 = xpc_null_create();
        }
        xpc_dictionary_set_value(v5, (const char *)*MEMORY[0x263F260D0], v11);
        xpc_object_t v12 = xpc_null_create();
        xpc_release(v11);
        xpc_release(v12);
        xpc_object_t v13 = xpc_BOOL_create(*((unsigned char *)this + 240));
        if (!v13) {
          xpc_object_t v13 = xpc_null_create();
        }
        xpc_dictionary_set_value(v5, (const char *)*MEMORY[0x263F266B8], v13);
        xpc_object_t v14 = xpc_null_create();
        xpc_release(v13);
        xpc_release(v14);
        if (v5)
        {
          xpc_retain(v5);
          xpc_object_t v15 = v5;
          uint64_t v16 = (const void *)*((void *)this + 19);
          if (v16)
          {
LABEL_36:
            size_t v17 = _Block_copy(v16);
            goto LABEL_39;
          }
        }
        else
        {
          xpc_object_t v15 = xpc_null_create();
          uint64_t v16 = (const void *)*((void *)this + 19);
          if (v16) {
            goto LABEL_36;
          }
        }
        size_t v17 = 0;
LABEL_39:
        int v18 = *((void *)this + 20);
        blocunint64_t k = MEMORY[0x263EF8330];
        uint64_t v20 = 1174405120;
        uint64_t v21 = ___ZNK8dispatch8callbackIU13block_pointerFv10WakeReasonEEclIJS1_EEEvDpT__block_invoke;
        int v22 = &__block_descriptor_tmp_51;
        if (v17)
        {
          aBlocunint64_t k = _Block_copy(v17);
          int v24 = 3;
          xpc_object_t object = v15;
          if (v15)
          {
LABEL_41:
            xpc_retain(v15);
LABEL_44:
            dispatch_async(v18, &block);
            xpc_release(object);
            xpc_object_t object = 0;
            if (aBlock) {
              _Block_release(aBlock);
            }
            if (v17) {
              _Block_release(v17);
            }
            xpc_release(v15);
            xpc_release(v5);
            return;
          }
        }
        else
        {
          aBlocunint64_t k = 0;
          int v24 = 3;
          xpc_object_t object = v15;
          if (v15) {
            goto LABEL_41;
          }
        }
        xpc_object_t object = xpc_null_create();
        goto LABEL_44;
      }
      xpc_object_t v6 = xpc_null_create();
      uint64_t v7 = (const void *)*((void *)this + 19);
      if (v7) {
        char v8 = _Block_copy(v7);
      }
      else {
        char v8 = 0;
      }
      long long v9 = *((void *)this + 20);
      blocunint64_t k = MEMORY[0x263EF8330];
      uint64_t v20 = 1174405120;
      uint64_t v21 = ___ZNK8dispatch8callbackIU13block_pointerFv10WakeReasonEEclIJS1_EEEvDpT__block_invoke;
      int v22 = &__block_descriptor_tmp_51;
      if (v8)
      {
        aBlocunint64_t k = _Block_copy(v8);
        int v24 = 4;
        xpc_object_t object = v6;
        if (v6)
        {
LABEL_19:
          xpc_retain(v6);
LABEL_22:
          dispatch_async(v9, &block);
          xpc_release(object);
          xpc_object_t object = 0;
          if (aBlock) {
            _Block_release(aBlock);
          }
          if (v8) {
            _Block_release(v8);
          }
          xpc_release(v6);
          return;
        }
      }
      else
      {
        aBlocunint64_t k = 0;
        int v24 = 4;
        xpc_object_t object = v6;
        if (v6) {
          goto LABEL_19;
        }
      }
      xpc_object_t object = xpc_null_create();
      goto LABEL_22;
    }
  }
}

void MipcTransportService::shutdown(MipcTransportService *this)
{
  v3[0] = MEMORY[0x263EF8330];
  v3[1] = 0x40000000;
  v3[2] = ___ZN20MipcTransportService8shutdownEv_block_invoke;
  v3[3] = &__block_descriptor_tmp_4;
  v3[4] = this;
  xpc_object_t v4 = v3;
  block[0] = MEMORY[0x263EF8330];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI20MipcTransportServiceE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  block[3] = &__block_descriptor_tmp_33;
  block[4] = (char *)this + 72;
  void block[5] = &v4;
  uint64_t v2 = (char *)this + 88;
  uint64_t v1 = *((void *)this + 11);
  if (*((void *)v2 + 1)) {
    dispatch_async_and_wait(v1, block);
  }
  else {
    dispatch_sync(v1, block);
  }
}

void ___ZN20MipcTransportService8shutdownEv_block_invoke(uint64_t a1)
{
  MipcTransportService::cancelWakeRequest_sync(*(MipcTransportService **)(a1 + 32));
  uint64_t v1 = dispatch_group_create();
  dispatch_group_wait(v1, 0xFFFFFFFFFFFFFFFFLL);
  if (v1)
  {
    dispatch_release(v1);
  }
}

void non-virtual thunk to'MipcTransportService::shutdown(MipcTransportService *this)
{
  v3[0] = MEMORY[0x263EF8330];
  v3[1] = 0x40000000;
  v3[2] = ___ZN20MipcTransportService8shutdownEv_block_invoke;
  v3[3] = &__block_descriptor_tmp_4;
  v3[4] = (char *)this - 104;
  xpc_object_t v4 = v3;
  block[0] = MEMORY[0x263EF8330];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI20MipcTransportServiceE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  block[3] = &__block_descriptor_tmp_33;
  block[4] = (char *)this - 32;
  void block[5] = &v4;
  uint64_t v2 = (char *)this - 16;
  uint64_t v1 = *((void *)this - 2);
  if (*((void *)v2 + 1)) {
    dispatch_async_and_wait(v1, block);
  }
  else {
    dispatch_sync(v1, block);
  }
}

void MipcTransportService::init(MipcTransportService *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 10);
  if (!v2 || (uint64_t v3 = *((void *)this + 9), (v4 = std::__shared_weak_count::lock(v2)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  xpc_object_t v5 = v4;
  xpc_object_t v6 = operator new(8uLL);
  void *v6 = this;
  uint64_t v7 = *((void *)this + 11);
  atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  char v8 = operator new(0x18uLL);
  void *v8 = v6;
  v8[1] = v3;
  uint64_t v8[2] = v5;
  dispatch_async_f(v7, v8, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<MipcTransportService>::execute_wrapped<MipcTransportService::init(void)::$_0>(MipcTransportService::init(void)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<MipcTransportService::init(void)::$_0,dispatch_queue_s *::default_delete<MipcTransportService::init(void)::$_0>>)::{lambda(void *)#1}::__invoke);
  if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void non-virtual thunk to'MipcTransportService::init(MipcTransportService *this)
{
}

BOOL MipcTransportService::engage(MipcTransportService *this)
{
  xpc_object_t v4 = this;
  v5[0] = MEMORY[0x263EF8330];
  v5[1] = 0x40000000;
  v5[2] = ___ZNK3ctu20SharedSynchronizableI20MipcTransportServiceE20execute_wrapped_syncIZNS1_6engageEvE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS5__block_invoke;
  v5[3] = &__block_descriptor_tmp_39;
  v5[4] = (char *)this + 72;
  void v5[5] = &v4;
  xpc_object_t v6 = v5;
  uint64_t v2 = (char *)this + 88;
  uint64_t v1 = *((void *)this + 11);
  if (*((void *)v2 + 1))
  {
    char v13 = -86;
    blocunint64_t k = MEMORY[0x263EF8330];
    uint64_t v8 = 0x40000000;
    long long v9 = ___ZN8dispatch19async_and_wait_implIRU13block_pointerFbvEEENSt3__15decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS4_17integral_constantIbLb0EEE_block_invoke;
    uint64_t v10 = &__block_descriptor_tmp_46;
    xpc_object_t v11 = &v13;
    xpc_object_t v12 = &v6;
    dispatch_async_and_wait(v1, &block);
  }
  else
  {
    char v13 = -86;
    blocunint64_t k = MEMORY[0x263EF8330];
    uint64_t v8 = 0x40000000;
    long long v9 = ___ZN8dispatch9sync_implIRU13block_pointerFbvEEENSt3__15decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS4_17integral_constantIbLb0EEE_block_invoke;
    uint64_t v10 = &__block_descriptor_tmp_45;
    xpc_object_t v11 = &v13;
    xpc_object_t v12 = &v6;
    dispatch_sync(v1, &block);
  }
  return v13 != 0;
}

BOOL non-virtual thunk to'MipcTransportService::engage(MipcTransportService *this)
{
  return MipcTransportService::engage((MipcTransportService *)((char *)this - 104));
}

void MipcTransportService::resetBaseband_sync(void *a1, const char *a2)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  xpc_object_t v4 = a1[5];
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    if (a2[23] >= 0) {
      uint64_t v10 = a2;
    }
    else {
      uint64_t v10 = *(const char **)a2;
    }
    LODWORD(buf) = 136315138;
    *(void *)((char *)&buf + 4) = v10;
    _os_log_error_impl(&dword_26368A000, v4, OS_LOG_TYPE_ERROR, "%s", (uint8_t *)&buf, 0xCu);
    xpc_object_t v5 = (std::__shared_weak_count *)a1[26];
    if (!v5) {
      return;
    }
  }
  else
  {
    xpc_object_t v5 = (std::__shared_weak_count *)a1[26];
    if (!v5) {
      return;
    }
  }
  xpc_object_t v6 = std::__shared_weak_count::lock(v5);
  uint64_t v28 = v6;
  if (!v6) {
    return;
  }
  uint64_t v27 = a1[25];
  if (!v27)
  {
    long long v9 = v6;
LABEL_39:
    if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
    return;
  }
  xpc_object_t v7 = xpc_dictionary_create(0, 0, 0);
  if (v7 || (xpc_object_t v7 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x263E6A240](v7) == MEMORY[0x263EF8708])
    {
      xpc_retain(v7);
      xpc_object_t v8 = v7;
    }
    else
    {
      xpc_object_t v8 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v8 = xpc_null_create();
    xpc_object_t v7 = 0;
  }
  xpc_release(v7);
  xpc_object_t v11 = xpc_string_create((const char *)*MEMORY[0x263F26178]);
  if (!v11) {
    xpc_object_t v11 = xpc_null_create();
  }
  xpc_dictionary_set_value(v8, (const char *)*MEMORY[0x263F26148], v11);
  xpc_object_t v12 = xpc_null_create();
  xpc_release(v11);
  xpc_release(v12);
  xpc_object_t v13 = xpc_string_create((const char *)*MEMORY[0x263F267D8]);
  if (!v13) {
    xpc_object_t v13 = xpc_null_create();
  }
  xpc_dictionary_set_value(v8, (const char *)*MEMORY[0x263F26368], v13);
  xpc_object_t v14 = xpc_null_create();
  xpc_release(v13);
  xpc_release(v14);
  if (a2[23] >= 0) {
    xpc_object_t v15 = a2;
  }
  else {
    xpc_object_t v15 = *(const char **)a2;
  }
  xpc_object_t v16 = xpc_string_create(v15);
  if (!v16) {
    xpc_object_t v16 = xpc_null_create();
  }
  xpc_dictionary_set_value(v8, (const char *)*MEMORY[0x263F262A8], v16);
  xpc_object_t v17 = xpc_null_create();
  xpc_release(v16);
  xpc_release(v17);
  uint64_t v18 = v27;
  CFAllocatorRef v19 = (const void *)*MEMORY[0x263F26118];
  size_t v20 = strlen((const char *)*MEMORY[0x263F26118]);
  if (v20 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v21 = v20;
  if (v20 >= 0x17)
  {
    uint64_t v23 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v20 | 7) != 0x17) {
      uint64_t v23 = v20 | 7;
    }
    uint64_t v24 = v23 + 1;
    p_long long buf = (long long *)operator new(v23 + 1);
    *((void *)&buf + 1) = v21;
    unint64_t v30 = v24 | 0x8000000000000000;
    *(void *)&long long buf = p_buf;
LABEL_34:
    memmove(p_buf, v19, v21);
    *((unsigned char *)p_buf + v21) = 0;
    xpc_object_t object = v8;
    if (v8) {
      goto LABEL_30;
    }
    goto LABEL_35;
  }
  HIBYTE(v30) = v20;
  p_long long buf = &buf;
  if (v20) {
    goto LABEL_34;
  }
  LOBYTE(buf) = 0;
  xpc_object_t object = v8;
  if (v8)
  {
LABEL_30:
    xpc_retain(v8);
    goto LABEL_36;
  }
LABEL_35:
  xpc_object_t object = xpc_null_create();
LABEL_36:
  long long v25 = 0;
  Service::runCommand(v18, (uint64_t)&buf, &object, &v25);
  xpc_release(object);
  xpc_object_t object = 0;
  if (SHIBYTE(v30) < 0) {
    operator delete((void *)buf);
  }
  xpc_release(v8);
  long long v9 = v28;
  if (v28) {
    goto LABEL_39;
  }
}

void sub_2636BF76C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, char a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t MipcTransportService::recover(MipcTransportService *this)
{
  return 1;
}

uint64_t non-virtual thunk to'MipcTransportService::recover(MipcTransportService *this)
{
  return 1;
}

void MipcTransportService::enterLowPower(void *a1, dispatch_object_t *a2)
{
  uint64_t v3 = *a2;
  if (*a2)
  {
    dispatch_retain(*a2);
    dispatch_group_enter(v3);
  }
  xpc_object_t v4 = (std::__shared_weak_count *)a1[10];
  if (!v4 || (uint64_t v5 = a1[9], (v6 = std::__shared_weak_count::lock(v4)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  xpc_object_t v7 = v6;
  xpc_object_t v8 = operator new(0x10uLL);
  void *v8 = a1;
  v8[1] = v3;
  long long v9 = a1[11];
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v10 = operator new(0x18uLL);
  void *v10 = v8;
  v10[1] = v5;
  v10[2] = v7;
  dispatch_async_f(v9, v10, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<MipcTransportService>::execute_wrapped<MipcTransportService::enterLowPower(dispatch::group_session)::$_0>(MipcTransportService::enterLowPower(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<MipcTransportService::enterLowPower(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<MipcTransportService::enterLowPower(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke);
  if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void non-virtual thunk to'MipcTransportService::enterLowPower(uint64_t a1, dispatch_object_t *a2)
{
}

BOOL MipcTransportService::tearDown(MipcTransportService *this)
{
  xpc_object_t v4 = this;
  v5[0] = MEMORY[0x263EF8330];
  v5[1] = 0x40000000;
  v5[2] = ___ZNK3ctu20SharedSynchronizableI20MipcTransportServiceE20execute_wrapped_syncIZNS1_8tearDownEvE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS5__block_invoke;
  v5[3] = &__block_descriptor_tmp_49;
  v5[4] = (char *)this + 72;
  void v5[5] = &v4;
  xpc_object_t v6 = v5;
  uint64_t v2 = (char *)this + 88;
  uint64_t v1 = *((void *)this + 11);
  if (*((void *)v2 + 1))
  {
    char v13 = -86;
    blocunint64_t k = MEMORY[0x263EF8330];
    uint64_t v8 = 0x40000000;
    long long v9 = ___ZN8dispatch19async_and_wait_implIRU13block_pointerFbvEEENSt3__15decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS4_17integral_constantIbLb0EEE_block_invoke;
    uint64_t v10 = &__block_descriptor_tmp_46;
    xpc_object_t v11 = &v13;
    xpc_object_t v12 = &v6;
    dispatch_async_and_wait(v1, &block);
  }
  else
  {
    char v13 = -86;
    blocunint64_t k = MEMORY[0x263EF8330];
    uint64_t v8 = 0x40000000;
    long long v9 = ___ZN8dispatch9sync_implIRU13block_pointerFbvEEENSt3__15decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS4_17integral_constantIbLb0EEE_block_invoke;
    uint64_t v10 = &__block_descriptor_tmp_45;
    xpc_object_t v11 = &v13;
    xpc_object_t v12 = &v6;
    dispatch_sync(v1, &block);
  }
  return v13 != 0;
}

BOOL non-virtual thunk to'MipcTransportService::tearDown(MipcTransportService *this)
{
  return MipcTransportService::tearDown((MipcTransportService *)((char *)this - 104));
}

void MipcTransportService::exitLowPower(void *a1, dispatch_object_t *a2)
{
  uint64_t v3 = *a2;
  if (*a2)
  {
    dispatch_retain(*a2);
    dispatch_group_enter(v3);
  }
  xpc_object_t v4 = (std::__shared_weak_count *)a1[10];
  if (!v4 || (uint64_t v5 = a1[9], (v6 = std::__shared_weak_count::lock(v4)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  xpc_object_t v7 = v6;
  uint64_t v8 = operator new(0x10uLL);
  void *v8 = a1;
  v8[1] = v3;
  long long v9 = a1[11];
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v10 = operator new(0x18uLL);
  void *v10 = v8;
  v10[1] = v5;
  v10[2] = v7;
  dispatch_async_f(v9, v10, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<MipcTransportService>::execute_wrapped<MipcTransportService::exitLowPower(dispatch::group_session)::$_0>(MipcTransportService::exitLowPower(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<MipcTransportService::exitLowPower(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<MipcTransportService::exitLowPower(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke);
  if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void non-virtual thunk to'MipcTransportService::exitLowPower(uint64_t a1, dispatch_object_t *a2)
{
}

void MipcTransportService::dumpState(MipcTransportService *this)
{
  uint64_t v3 = this;
  block[0] = MEMORY[0x263EF8330];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI20MipcTransportServiceE20execute_wrapped_syncIZNS1_9dumpStateEvE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS5__block_invoke;
  block[3] = &__block_descriptor_tmp_50;
  block[4] = (char *)this + 72;
  void block[5] = &v3;
  uint64_t v2 = (char *)this + 88;
  uint64_t v1 = *((void *)this + 11);
  if (*((void *)v2 + 1)) {
    dispatch_async_and_wait(v1, block);
  }
  else {
    dispatch_sync(v1, block);
  }
}

void non-virtual thunk to'MipcTransportService::dumpState(MipcTransportService *this)
{
  uint64_t v3 = (char *)this - 104;
  block[0] = MEMORY[0x263EF8330];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI20MipcTransportServiceE20execute_wrapped_syncIZNS1_9dumpStateEvE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS5__block_invoke;
  block[3] = &__block_descriptor_tmp_50;
  block[4] = (char *)this - 32;
  void block[5] = &v3;
  uint64_t v2 = (char *)this - 16;
  uint64_t v1 = *((void *)this - 2);
  if (*((void *)v2 + 1)) {
    dispatch_async_and_wait(v1, block);
  }
  else {
    dispatch_sync(v1, block);
  }
}

uint64_t MipcTransportService::enableBypass(MipcTransportService *this)
{
  return 0;
}

uint64_t non-virtual thunk to'MipcTransportService::enableBypass(MipcTransportService *this)
{
  return 0;
}

void MipcTransportService::registerForWakeReason(void *a1, long long *a2)
{
  long long v10 = *a2;
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  uint64_t v3 = (std::__shared_weak_count *)a1[10];
  if (!v3 || (uint64_t v4 = a1[9], (v5 = std::__shared_weak_count::lock(v3)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  xpc_object_t v6 = v5;
  xpc_object_t v7 = (char *)operator new(0x18uLL);
  *(void *)xpc_object_t v7 = a1;
  *(_OWORD *)(v7 + 8) = v10;
  uint64_t v8 = a1[11];
  atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  long long v9 = operator new(0x18uLL);
  *long long v9 = v7;
  v9[1] = v4;
  v9[2] = v6;
  dispatch_async_f(v8, v9, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<MipcTransportService>::execute_wrapped<MipcTransportService::registerForWakeReason(dispatch::callback<void({block_pointer})(WakeReason)>)::$_0>(MipcTransportService::registerForWakeReason(dispatch::callback<void({block_pointer})(WakeReason)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<MipcTransportService::registerForWakeReason(dispatch::callback<void({block_pointer})(WakeReason)>)::$_0,dispatch_queue_s *::default_delete<MipcTransportService::registerForWakeReason(dispatch::callback<void({block_pointer})(WakeReason)>)::$_0>>)::{lambda(void *)#1}::__invoke);
  if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
}

void non-virtual thunk to'MipcTransportService::registerForWakeReason(uint64_t a1, long long *a2)
{
}

void MipcTransportService::updateWakeReason_sync(MipcTransportService *this)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  uint64_t v2 = (void *)((char *)this + 216);
  if ((*((char *)this + 239) & 0x80000000) == 0)
  {
    char SystemWakeReason = TelephonyUtilGetSystemWakeReason();
    uint64_t v4 = *((void *)this + 5);
    if (SystemWakeReason) {
      goto LABEL_3;
    }
LABEL_9:
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v6) = 0;
      _os_log_error_impl(&dword_26368A000, v4, OS_LOG_TYPE_ERROR, "Failed to fetch system wake reason", (uint8_t *)&v6, 2u);
      if (!*((void *)this + 19)) {
        return;
      }
      goto LABEL_11;
    }
LABEL_10:
    if (!*((void *)this + 19)) {
      return;
    }
    goto LABEL_11;
  }
  char v5 = TelephonyUtilGetSystemWakeReason();
  uint64_t v4 = *((void *)this + 5);
  if ((v5 & 1) == 0) {
    goto LABEL_9;
  }
LABEL_3:
  if (!os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT)) {
    goto LABEL_10;
  }
  if (*((char *)this + 239) < 0) {
    uint64_t v2 = (void *)*v2;
  }
  int v6 = 136315138;
  xpc_object_t v7 = v2;
  _os_log_impl(&dword_26368A000, v4, OS_LOG_TYPE_DEFAULT, "#I System wake reason: %s", (uint8_t *)&v6, 0xCu);
  if (*((void *)this + 19))
  {
LABEL_11:
    if (*((void *)this + 20)) {
      MipcTransportService::getWakeReason_sync(this, 2);
    }
  }
}

void MipcTransportService::getWakeReason_sync(MipcTransportService *this, int a2)
{
  uint64_t v32 = *MEMORY[0x263EF8340];
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 10);
  if (!v3 || (uint64_t v5 = *((void *)this + 9), (v6 = std::__shared_weak_count::lock(v3)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  xpc_object_t v7 = v6;
  atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    uint64_t v8 = *((void *)this + 5);
    if (!os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
  std::__shared_weak_count::__release_weak(v7);
  uint64_t v8 = *((void *)this + 5);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
LABEL_5:
    --a2;
    *(_DWORD *)long long buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = a2;
    _os_log_impl(&dword_26368A000, v8, OS_LOG_TYPE_DEFAULT, "#I Sending request to get wake reason. Remaining-attempts=%u", buf, 8u);
  }
LABEL_6:
  unint64_t v29 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v30 = (std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL;
  long long v9 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  uint64_t v10 = off_26A99F170;
  if (!off_26A99F170)
  {
    CommandDriverFactory::create_default_global((uint64_t *)buf, v9);
    long long v11 = *(_OWORD *)buf;
    memset(buf, 0, sizeof(buf));
    xpc_object_t v12 = (std::__shared_weak_count *)*(&off_26A99F170 + 1);
    off_26A99F170 = v11;
    if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
    char v13 = *(std::__shared_weak_count **)&buf[8];
    if (*(void *)&buf[8]
      && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
    uint64_t v10 = off_26A99F170;
  }
  xpc_object_t v14 = (std::__shared_weak_count *)*(&off_26A99F170 + 1);
  uint64_t v25 = v10;
  uint64_t v26 = *(&off_26A99F170 + 1);
  if (*(&off_26A99F170 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_26A99F170 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(unint64_t *__return_ptr, uint64_t))(*(void *)v10 + 16))(&v27, v10);
  unint64_t v29 = 0;
  unint64_t v30 = 0;
  if (v28)
  {
    unint64_t v30 = std::__shared_weak_count::lock(v28);
    if (v30) {
      unint64_t v29 = v27;
    }
    if (v28) {
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
    unint64_t v15 = v29;
    if (v29)
    {
LABEL_24:
      v20[0] = MEMORY[0x263EF8330];
      v20[1] = 1174405120;
      v20[2] = ___ZN20MipcTransportService18getWakeReason_syncEj_block_invoke;
      v20[3] = &__block_descriptor_tmp_8;
      v20[4] = this;
      v20[5] = v5;
      size_t v21 = v7;
      atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      int v22 = a2;
      xpc_object_t v16 = _Block_copy(v20);
      xpc_object_t v17 = *((void *)this + 11);
      if (v17) {
        dispatch_retain(v17);
      }
      aBlocunint64_t k = v16;
      dispatch_object_t object = v17;
      (*(void (**)(unint64_t, void **))(*(void *)v15 + 136))(v15, &aBlock);
      if (object) {
        dispatch_release(object);
      }
      if (aBlock) {
        _Block_release(aBlock);
      }
      if (v21)
      {
        std::__shared_weak_count::__release_weak(v21);
        uint64_t v18 = v30;
        if (!v30) {
          goto LABEL_40;
        }
        goto LABEL_38;
      }
LABEL_37:
      uint64_t v18 = v30;
      if (!v30) {
        goto LABEL_40;
      }
      goto LABEL_38;
    }
  }
  else
  {
    unint64_t v15 = v29;
    if (v29) {
      goto LABEL_24;
    }
  }
  CFAllocatorRef v19 = *((void *)this + 5);
  if (!os_log_type_enabled(v19, OS_LOG_TYPE_ERROR)) {
    goto LABEL_37;
  }
  *(_WORD *)long long buf = 0;
  _os_log_error_impl(&dword_26368A000, v19, OS_LOG_TYPE_ERROR, "Failed to get radio command driver!", buf, 2u);
  uint64_t v18 = v30;
  if (!v30) {
    goto LABEL_40;
  }
LABEL_38:
  if (!atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
LABEL_40:
  std::__shared_weak_count::__release_weak(v7);
}

void sub_2636C03C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, char a17, uint64_t a18, char a19)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN20MipcTransportService18getWakeReason_syncEj_block_invoke(uint64_t a1, void *a2, ctu **a3)
{
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 48);
  if (v4)
  {
    uint64_t v7 = *(void *)(a1 + 32);
    uint64_t v8 = std::__shared_weak_count::lock(v4);
    uint64_t v41 = v8;
    if (v8)
    {
      if (!*(void *)(a1 + 40))
      {
        long long v11 = v8;
LABEL_78:
        if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
        return;
      }
      xpc_object_t v9 = xpc_dictionary_create(0, 0, 0);
      if (v9 || (xpc_object_t v9 = xpc_null_create()) != 0)
      {
        if (MEMORY[0x263E6A240](v9) == MEMORY[0x263EF8708])
        {
          xpc_retain(v9);
          xpc_object_t v10 = v9;
        }
        else
        {
          xpc_object_t v10 = xpc_null_create();
        }
      }
      else
      {
        xpc_object_t v10 = xpc_null_create();
        xpc_object_t v9 = 0;
      }
      xpc_release(v9);
      xpc_object_t v12 = (const char *)(v7 + 216);
      if (*(char *)(v7 + 239) < 0) {
        xpc_object_t v12 = *(const char **)v12;
      }
      xpc_object_t v13 = xpc_string_create(v12);
      if (!v13) {
        xpc_object_t v13 = xpc_null_create();
      }
      xpc_dictionary_set_value(v10, (const char *)*MEMORY[0x263F260D0], v13);
      xpc_object_t v14 = xpc_null_create();
      xpc_release(v13);
      xpc_release(v14);
      xpc_object_t v15 = xpc_BOOL_create(*(unsigned char *)(v7 + 240));
      if (!v15) {
        xpc_object_t v15 = xpc_null_create();
      }
      xpc_dictionary_set_value(v10, (const char *)*MEMORY[0x263F266B8], v15);
      xpc_object_t v16 = xpc_null_create();
      xpc_release(v15);
      xpc_release(v16);
      if (*a2) {
        uint64_t v18 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
      }
      else {
        uint64_t v18 = 0;
      }
      if (v18
        || (*a3
          ? (uint64_t v26 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get)
          : (uint64_t v26 = 0),
            !v26))
      {
        int v19 = *(_DWORD *)(a1 + 56);
        if (v19)
        {
          size_t v20 = dispatch_source_create(MEMORY[0x263EF8400], 1uLL, 0, *(dispatch_queue_t *)(v7 + 88));
          size_t v21 = *(NSObject **)(v7 + 168);
          *(void *)(v7 + 168) = v20;
          if (v21)
          {
            dispatch_release(v21);
            size_t v20 = *(NSObject **)(v7 + 168);
          }
          if (v20)
          {
            dispatch_time_t v22 = dispatch_time(0, 1000000000);
            dispatch_source_set_timer(v20, v22, 0xFFFFFFFFFFFFFFFFLL, 0xBEBC200uLL);
            uint64_t v23 = *(NSObject **)(v7 + 168);
            handler[0] = MEMORY[0x263EF8330];
            handler[1] = 1174405120;
            handler[2] = ___ZN20MipcTransportService18getWakeReason_syncEj_block_invoke_2;
            handler[3] = &__block_descriptor_tmp_4_1;
            uint64_t v25 = *(void *)(a1 + 40);
            uint64_t v24 = *(std::__shared_weak_count **)(a1 + 48);
            handler[4] = v7;
            handler[5] = v25;
            uint64_t v38 = v24;
            if (v24) {
              atomic_fetch_add_explicit(&v24->__shared_weak_owners_, 1uLL, memory_order_relaxed);
            }
            int v39 = *(_DWORD *)(a1 + 56);
            dispatch_source_set_event_handler(v23, handler);
            dispatch_activate(*(dispatch_object_t *)(v7 + 168));
            if (v38) {
              std::__shared_weak_count::__release_weak(v38);
            }
          }
          goto LABEL_77;
        }
      }
      else
      {
        if (*(void *)(v7 + 152) && *(void *)(v7 + 160))
        {
          ctu::cf_to_xpc((uint64_t *)&object, *a3, v17);
          xpc_object_t v27 = object;
          if (object && MEMORY[0x263E6A240](object) == MEMORY[0x263EF8708]) {
            xpc_retain(v27);
          }
          else {
            xpc_object_t v27 = xpc_null_create();
          }
          xpc_release(object);
          xpc_release(v27);
        }
        int v19 = 1;
      }
      if (*(void *)(v7 + 152) && *(void *)(v7 + 160))
      {
        if (*(char *)(v7 + 239) < 0)
        {
          if (((*(void *)(v7 + 224) == 0) & ~v19) == 0) {
            goto LABEL_45;
          }
        }
        else if (((*(unsigned char *)(v7 + 239) == 0) & ~v19) == 0)
        {
LABEL_45:
          if (v10)
          {
            xpc_retain(v10);
            xpc_object_t v28 = v10;
          }
          else
          {
            xpc_object_t v28 = xpc_null_create();
          }
          uint64_t v31 = *(const void **)(v7 + 152);
          if (v31) {
            uint64_t v32 = _Block_copy(v31);
          }
          else {
            uint64_t v32 = 0;
          }
          uint64_t v35 = *(NSObject **)(v7 + 160);
          xpc_object_t object = (xpc_object_t)MEMORY[0x263EF8330];
          uint64_t v43 = 1174405120;
          unint64_t v44 = ___ZNK8dispatch8callbackIU13block_pointerFv10WakeReasonEEclIJS1_EEEvDpT__block_invoke;
          std::string::size_type v45 = &__block_descriptor_tmp_51;
          if (v32) {
            BOOL v36 = _Block_copy(v32);
          }
          else {
            BOOL v36 = 0;
          }
          aBlocunint64_t k = v36;
          int v47 = 3;
          xpc_object_t v48 = v28;
          if (v28) {
            xpc_retain(v28);
          }
          else {
            xpc_object_t v48 = xpc_null_create();
          }
          dispatch_async(v35, &object);
          xpc_release(v48);
          xpc_object_t v48 = 0;
          if (aBlock) {
            _Block_release(aBlock);
          }
          if (v32) {
            _Block_release(v32);
          }
LABEL_76:
          xpc_release(v28);
          goto LABEL_77;
        }
        xpc_object_t v28 = xpc_null_create();
        unint64_t v29 = *(const void **)(v7 + 152);
        if (v29) {
          unint64_t v30 = _Block_copy(v29);
        }
        else {
          unint64_t v30 = 0;
        }
        long long v33 = *(NSObject **)(v7 + 160);
        xpc_object_t object = (xpc_object_t)MEMORY[0x263EF8330];
        uint64_t v43 = 1174405120;
        unint64_t v44 = ___ZNK8dispatch8callbackIU13block_pointerFv10WakeReasonEEclIJS1_EEEvDpT__block_invoke;
        std::string::size_type v45 = &__block_descriptor_tmp_51;
        if (v30) {
          uint64_t v34 = _Block_copy(v30);
        }
        else {
          uint64_t v34 = 0;
        }
        aBlocunint64_t k = v34;
        int v47 = 4;
        xpc_object_t v48 = v28;
        if (v28) {
          xpc_retain(v28);
        }
        else {
          xpc_object_t v48 = xpc_null_create();
        }
        dispatch_async(v33, &object);
        xpc_release(v48);
        xpc_object_t v48 = 0;
        if (aBlock) {
          _Block_release(aBlock);
        }
        if (v30) {
          _Block_release(v30);
        }
        goto LABEL_76;
      }
LABEL_77:
      xpc_release(v10);
      long long v11 = v41;
      if (!v41) {
        return;
      }
      goto LABEL_78;
    }
  }
}

void sub_2636C09D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  xpc_release(v18);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  _Unwind_Resume(a1);
}

void ___ZN20MipcTransportService18getWakeReason_syncEj_block_invoke_2(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2)
  {
    uint64_t v3 = *(dispatch_source_t **)(a1 + 32);
    uint64_t v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      uint64_t v5 = v4;
      if (*(void *)(a1 + 40))
      {
        dispatch_source_cancel(v3[21]);
        int v6 = v3[21];
        v3[21] = 0;
        if (v6) {
          dispatch_release(v6);
        }
        MipcTransportService::getWakeReason_sync((MipcTransportService *)v3, *(_DWORD *)(a1 + 56));
      }
      if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void sub_2636C0B34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t __copy_helper_block_e8_40c45_ZTSNSt3__18weak_ptrI20MipcTransportServiceEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c45_ZTSNSt3__18weak_ptrI20MipcTransportServiceEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

uint64_t dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>::~callback(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 8);
  if (v2) {
    dispatch_release(v2);
  }
  if (*(void *)a1) {
    _Block_release(*(const void **)a1);
  }
  return a1;
}

uint64_t MipcTransportService::shouldTeardownOnWillReset(MipcTransportService *this)
{
  return 0;
}

uint64_t non-virtual thunk to'MipcTransportService::shouldTeardownOnWillReset(MipcTransportService *this)
{
  return 0;
}

uint64_t ctu::Loggable<MipcTransportService,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig(uint64_t a1)
{
  return MEMORY[0x270F97428](a1 + 8);
}

void ctu::Loggable<MipcTransportService,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName(char *a1@<X8>)
{
  a1[23] = 12;
  strcpy(a1, "ipc.svc.mipc");
}

uint64_t ctu::Loggable<MipcTransportService,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return MEMORY[0x270F978E0](a1 + 8);
}

void *ctu::Loggable<MipcTransportService,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_270EA6FE8;
  MEMORY[0x263E68AF0](a1 + 1);
  return a1;
}

void ctu::Loggable<MipcTransportService,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_270EA6FE8;
  MEMORY[0x263E68AF0](a1 + 1);

  operator delete(a1);
}

void ctu::SharedLoggable<MipcTransportService,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(void *a1)
{
  *a1 = &unk_270EA6FE8;
  MEMORY[0x263E68AF0](a1 + 1);
  uint64_t v2 = a1[12];
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = a1[11];
  if (v3) {
    dispatch_release(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[10];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }

  operator delete(a1);
}

void *___ZNK3ctu20SharedSynchronizableI20MipcTransportServiceE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke(uint64_t a1)
{
  return (*(void *(**)(void *__return_ptr))(**(void **)(a1 + 40) + 16))(*(void **)(a1 + 40));
}

void dispatch::async<void ctu::SharedSynchronizable<MipcTransportService>::execute_wrapped<MipcTransportService::init(void)::$_0>(MipcTransportService::init(void)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<MipcTransportService::init(void)::$_0,dispatch_queue_s *::default_delete<MipcTransportService::init(void)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  uint64_t v2 = *a1;
  uint64_t v3 = **a1;
  uint64_t v4 = *(NSObject **)(v3 + 40);
  BOOL v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
  if (v5)
  {
    LOWORD(v9) = 0;
    _os_log_impl(&dword_26368A000, v4, OS_LOG_TYPE_DEFAULT, "#I ----------------- Setting up ----------------", (uint8_t *)&v9, 2u);
  }
  if ((capabilities::ipc::supportsPCI((capabilities::ipc *)v5) & 1) == 0)
  {
    uint64_t v8 = GetOsLogContext()[1];
    if (os_log_type_enabled(v8, OS_LOG_TYPE_FAULT))
    {
      int v9 = 136315906;
      xpc_object_t v10 = "ABM ASSERT";
      __int16 v11 = 2080;
      xpc_object_t v12 = "capabilities::ipc::supportsPCI()";
      __int16 v13 = 2080;
      xpc_object_t v14 = "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices_Manager/AppleBasebandManager/BasebandManager/Ser"
            "ver/Transport/MIPC/Service/MipcTransportService.cpp";
      __int16 v15 = 1024;
      int v16 = 112;
      _os_log_fault_impl(&dword_26368A000, v8, OS_LOG_TYPE_FAULT, "%s (%s): File: %s Line: %d", (uint8_t *)&v9, 0x26u);
    }
    __break(1u);
  }
  if (!*(void *)(v3 + 112) && (int v6 = *(NSObject **)(v3 + 40), os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)))
  {
    LOWORD(v9) = 0;
    _os_log_error_impl(&dword_26368A000, v6, OS_LOG_TYPE_ERROR, "Invalid registry; skipping router server setup",
      (uint8_t *)&v9,
      2u);
    operator delete(v2);
    uint64_t v7 = (std::__shared_weak_count *)a1[2];
    if (!v7) {
      goto LABEL_9;
    }
  }
  else
  {
    operator delete(v2);
    uint64_t v7 = (std::__shared_weak_count *)a1[2];
    if (!v7) {
      goto LABEL_9;
    }
  }
  if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
LABEL_9:
  operator delete(a1);
}

void sub_2636C0F7C(_Unwind_Exception *a1)
{
  operator delete(v2);
  uint64_t v4 = (std::__shared_weak_count *)v1[2];
  if (v4)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t ___ZNK3ctu20SharedSynchronizableI20MipcTransportServiceE20execute_wrapped_syncIZNS1_6engageEvE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS5__block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  uint64_t v2 = *(void **)v1;
  uint64_t v3 = *(std::__shared_weak_count **)(*(void *)v1 + 80);
  if (!v3 || (uint64_t v4 = v2[9], (v5 = std::__shared_weak_count::lock(v3)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  int v6 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    uint64_t v7 = v2[5];
    if (!os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v6);
  uint64_t v7 = v2[5];
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
LABEL_5:
    LOWORD(v15[0]) = 0;
    _os_log_impl(&dword_26368A000, v7, OS_LOG_TYPE_DEFAULT, "#I Requesting start transition", (uint8_t *)v15, 2u);
  }
LABEL_6:
  v15[0] = MEMORY[0x263EF8330];
  v15[1] = 1174405120;
  v15[2] = ___ZZN20MipcTransportService6engageEvENK3__0clEv_block_invoke;
  v15[3] = &__block_descriptor_tmp_42;
  v15[4] = v2;
  v15[5] = v4;
  int v16 = v6;
  atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  uint64_t v8 = operator new(0x10uLL);
  int v9 = _Block_copy(v15);
  void *v8 = "Watchdog timed out";
  TelephonyBasebandWatchdogStart();
  if (v9) {
    _Block_release(v9);
  }
  xpc_object_t v10 = (void *)v2[22];
  v2[22] = v8;
  if (v10)
  {
    TelephonyBasebandWatchdogStop();
    operator delete(v10);
  }
  __int16 v11 = dispatch_group_create();
  atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  xpc_object_t v12 = v2[11];
  __int16 v13 = operator new(0x18uLL);
  *__int16 v13 = v2;
  v13[1] = v4;
  void v13[2] = v6;
  dispatch_group_notify_f(v11, v12, v13, (dispatch_function_t)dispatch::detail::group_notify<MipcTransportService::engage(void)::$_0::operator() const(void)::{lambda(void)#1}>(dispatch_group_s *,dispatch_queue_s *,MipcTransportService::engage(void)::$_0::operator() const(void)::{lambda(void)#1} &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke);
  if (v11) {
    dispatch_release(v11);
  }
  if (v16) {
    std::__shared_weak_count::__release_weak(v16);
  }
  std::__shared_weak_count::__release_weak(v6);
  return 1;
}

void sub_2636C1200(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15)
{
  std::__shared_weak_count::__release_weak(v15);
  if (v16)
  {
    dispatch_release(v16);
    uint64_t v18 = a15;
    if (!a15)
    {
LABEL_3:
      std::__shared_weak_count::__release_weak(v15);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    uint64_t v18 = a15;
    if (!a15) {
      goto LABEL_3;
    }
  }
  std::__shared_weak_count::__release_weak(v18);
  std::__shared_weak_count::__release_weak(v15);
  _Unwind_Resume(a1);
}

void ___ZZN20MipcTransportService6engageEvENK3__0clEv_block_invoke(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    uint64_t v3 = (void *)a1[4];
    uint64_t v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      BOOL v5 = v4;
      if (!a1[5]) {
        goto LABEL_16;
      }
      int v6 = (std::__shared_weak_count *)v3[10];
      if (!v6 || (uint64_t v7 = v3[9], (v8 = std::__shared_weak_count::lock(v6)) == 0)) {
        std::__throw_bad_weak_ptr[abi:ne180100]();
      }
      int v9 = v8;
      xpc_object_t v10 = operator new(8uLL);
      void *v10 = v3;
      __int16 v11 = v3[11];
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
      xpc_object_t v12 = operator new(0x18uLL);
      void *v12 = v10;
      v12[1] = v7;
      v12[2] = v9;
      dispatch_async_f(v11, v12, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI20MipcTransportServiceE15execute_wrappedIZZZNS3_6engageEvENK3__0clEvEUb_EUlvE_EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_);
      if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
        if (atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
          return;
        }
      }
      else
      {
LABEL_16:
        if (atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
          return;
        }
      }
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI20MipcTransportServiceE15execute_wrappedIZZZNS3_6engageEvENK3__0clEvEUb_EUlvE_EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_(uint64_t **a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = **a1;
  if (*(_DWORD *)(v3 + 128) != 2)
  {
    std::string __p = operator new(0x20uLL);
    long long v6 = xmmword_2637A67A0;
    strcpy((char *)__p, "Transport engage timeout");
    MipcTransportService::resetBaseband_sync((void *)v3, (const char *)&__p);
    if (SHIBYTE(v6) < 0) {
      operator delete(__p);
    }
  }
  operator delete(v2);
  uint64_t v4 = (std::__shared_weak_count *)a1[2];
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  operator delete(a1);
}

void sub_2636C14E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  operator delete(v16);
  uint64_t v18 = (std::__shared_weak_count *)v15[2];
  if (v18)
  {
    if (!atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  operator delete(v15);
  _Unwind_Resume(a1);
}

void dispatch::detail::group_notify<MipcTransportService::engage(void)::$_0::operator() const(void)::{lambda(void)#1}>(dispatch_group_s *,dispatch_queue_s *,MipcTransportService::engage(void)::$_0::operator() const(void)::{lambda(void)#1} &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke(uint64_t *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (!v2) {
    goto LABEL_33;
  }
  uint64_t v3 = *__p;
  uint64_t v4 = std::__shared_weak_count::lock(v2);
  if (v4)
  {
    BOOL v5 = v4;
    if (!__p[1]) {
      goto LABEL_29;
    }
    long long v6 = *(NSObject **)(v3 + 40);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_26368A000, v6, OS_LOG_TYPE_DEFAULT, "#I Start transition complete", buf, 2u);
    }
    *(_DWORD *)(v3 + 128) = 2;
    uint64_t v7 = *(void **)(v3 + 176);
    *(void *)(v3 + 176) = 0;
    if (v7)
    {
      TelephonyBasebandWatchdogStop();
      operator delete(v7);
    }
    uint64_t v8 = *(std::__shared_weak_count **)(v3 + 208);
    if (!v8) {
      goto LABEL_29;
    }
    int v9 = std::__shared_weak_count::lock(v8);
    if (!v9) {
      goto LABEL_29;
    }
    xpc_object_t v10 = v9;
    uint64_t v11 = *(void *)(v3 + 200);
    if (!v11)
    {
LABEL_27:
      if (!atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
LABEL_29:
      if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
      goto LABEL_31;
    }
    xpc_object_t v12 = *(NSObject **)(v3 + 40);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_26368A000, v12, OS_LOG_TYPE_DEFAULT, "#I ----------------- TransportIsReady -----------------", buf, 2u);
    }
    __int16 v13 = abm::kEventTransportIsReady;
    size_t v14 = strlen(abm::kEventTransportIsReady);
    if (v14 >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    __int16 v15 = (void *)v14;
    if (v14 >= 0x17)
    {
      uint64_t v17 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v14 | 7) != 0x17) {
        uint64_t v17 = v14 | 7;
      }
      uint64_t v18 = v17 + 1;
      int v16 = (void **)operator new(v17 + 1);
      __dst[1] = v15;
      unint64_t v23 = v18 | 0x8000000000000000;
      __dst[0] = v16;
    }
    else
    {
      HIBYTE(v23) = v14;
      int v16 = __dst;
      if (!v14) {
        goto LABEL_21;
      }
    }
    memmove(v16, v13, (size_t)v15);
LABEL_21:
    *((unsigned char *)v15 + (void)v16) = 0;
    aBlocunint64_t k = 0;
    CFTypeRef cf = 0;
    Service::broadcastEvent(v11, (uint64_t)__dst, &cf, (const void **)&aBlock);
    if (aBlock) {
      _Block_release(aBlock);
    }
    if (cf) {
      CFRelease(cf);
    }
    if (SHIBYTE(v23) < 0) {
      operator delete(__dst[0]);
    }
    goto LABEL_27;
  }
LABEL_31:
  int v19 = (std::__shared_weak_count *)__p[2];
  if (v19) {
    std::__shared_weak_count::__release_weak(v19);
  }
LABEL_33:
  operator delete(__p);
}

void sub_2636C17E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *aBlock, CFTypeRef cf, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (a17 < 0)
  {
    operator delete(__p);
    if (atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
LABEL_7:
      if (atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
        goto LABEL_8;
      }
      goto LABEL_12;
    }
  }
  else if (atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    goto LABEL_7;
  }
  ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
  std::__shared_weak_count::__release_weak(v19);
  if (atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
LABEL_8:
    size_t v21 = (std::__shared_weak_count *)v17[2];
    if (!v21) {
      goto LABEL_9;
    }
    goto LABEL_13;
  }
LABEL_12:
  ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
  std::__shared_weak_count::__release_weak(v18);
  size_t v21 = (std::__shared_weak_count *)v17[2];
  if (!v21)
  {
LABEL_9:
    operator delete(v17);
    _Unwind_Resume(a1);
  }
LABEL_13:
  std::__shared_weak_count::__release_weak(v21);
  operator delete(v17);
  _Unwind_Resume(a1);
}

uint64_t ___ZN8dispatch9sync_implIRU13block_pointerFbvEEENSt3__15decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS4_17integral_constantIbLb0EEE_block_invoke(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 40) + 16))();
  **(unsigned char **)(a1 + 32) = result;
  return result;
}

uint64_t ___ZN8dispatch19async_and_wait_implIRU13block_pointerFbvEEENSt3__15decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS4_17integral_constantIbLb0EEE_block_invoke(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 40) + 16))();
  **(unsigned char **)(a1 + 32) = result;
  return result;
}

void dispatch::async<void ctu::SharedSynchronizable<MipcTransportService>::execute_wrapped<MipcTransportService::enterLowPower(dispatch::group_session)::$_0>(MipcTransportService::enterLowPower(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<MipcTransportService::enterLowPower(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<MipcTransportService::enterLowPower(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke(dispatch_object_t **a1)
{
  uint64_t v2 = *a1;
  dispatch_object_t v3 = **a1;
  isa = v3[5].isa;
  if (os_log_type_enabled(isa, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v22[0]) = 0;
    _os_log_impl(&dword_26368A000, isa, OS_LOG_TYPE_DEFAULT, "#I Requesting sleep transition", (uint8_t *)v22, 2u);
  }
  LOBYTE(v3[30].isa) = 0;
  if (SHIBYTE(v3[29].isa) < 0)
  {
    v3[28].isa = 0;
    *(unsigned char *)v3[27].isa = 0;
    Class v5 = v3[19].isa;
    if (!v5) {
      goto LABEL_15;
    }
  }
  else
  {
    HIBYTE(v3[29].isa) = 0;
    LOBYTE(v3[27].isa) = 0;
    Class v5 = v3[19].isa;
    if (!v5) {
      goto LABEL_15;
    }
  }
  if (v3[20].isa)
  {
    long long v6 = _Block_copy(v5);
    uint64_t v7 = v6;
    uint64_t v8 = v3[20].isa;
    v22[0] = MEMORY[0x263EF8330];
    v22[1] = 1174405120;
    void v22[2] = ___ZNK8dispatch8callbackIU13block_pointerFv10WakeReasonEEclIJNS1_6StatusEEEEvDpT__block_invoke;
    v22[3] = &__block_descriptor_tmp_48;
    if (v6) {
      int v9 = _Block_copy(v6);
    }
    else {
      int v9 = 0;
    }
    aBlocunint64_t k = v9;
    int v24 = 2;
    dispatch_async(v8, v22);
    if (aBlock) {
      _Block_release(aBlock);
    }
    if (v7) {
      _Block_release(v7);
    }
  }
LABEL_15:
  xpc_object_t v10 = dispatch_group_create();
  uint64_t v11 = (std::__shared_weak_count *)v3[10].isa;
  if (!v11 || (Class v12 = v3[9].isa, (v13 = std::__shared_weak_count::lock(v11)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  size_t v14 = v13;
  p_shared_weak_owners = &v13->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v13->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v14);
  }
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  int v16 = v2[1];
  if (v16)
  {
    dispatch_retain(v2[1]);
    dispatch_group_enter(v16);
  }
  uint64_t v17 = v3[11].isa;
  uint64_t v18 = operator new(0x20uLL);
  void *v18 = v3;
  v18[1] = v12;
  v18[2] = v14;
  v18[3] = v16;
  dispatch_group_notify_f(v10, v17, v18, (dispatch_function_t)dispatch::detail::group_notify<MipcTransportService::enterLowPower(dispatch::group_session)::$_0::operator() const(void)::{lambda(void)#1}>(dispatch_group_s *,dispatch_queue_s *,MipcTransportService::enterLowPower(dispatch::group_session)::$_0::operator() const(void)::{lambda(void)#1} &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke);
  std::__shared_weak_count::__release_weak(v14);
  if (v10) {
    dispatch_release(v10);
  }
  int v19 = v2[1];
  if (v19)
  {
    dispatch_group_leave(v19);
    size_t v20 = v2[1];
    if (v20) {
      dispatch_release(v20);
    }
  }
  operator delete(v2);
  size_t v21 = (std::__shared_weak_count *)a1[2];
  if (v21 && !atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v21);
  }
  operator delete(a1);
}

void sub_2636C1C28(_Unwind_Exception *a1)
{
  long long v6 = v5;
  if (v6)
  {
    uint64_t v8 = v6;
    dispatch_group_leave(v6);
    dispatch_release(v8);
  }
  std::__shared_weak_count::__release_weak(v4);
  std::__shared_weak_count::__release_weak(v4);
  if (v3) {
    dispatch_release(v3);
  }
  int v9 = v2[1];
  if (v9)
  {
    dispatch_group_leave(v9);
    xpc_object_t v10 = v2[1];
    if (v10) {
      dispatch_release(v10);
    }
  }
  operator delete(v2);
  uint64_t v11 = (std::__shared_weak_count *)v1[2];
  if (v11)
  {
    if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void ___ZNK8dispatch8callbackIU13block_pointerFv10WakeReasonEEclIJNS1_6StatusEEEEvDpT__block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  int v2 = *(_DWORD *)(a1 + 40);
  xpc_object_t object = xpc_null_create();
  (*(void (**)(uint64_t, int *))(v1 + 16))(v1, &v2);
  xpc_release(object);
}

void sub_2636C1D3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
}

void *__copy_helper_block_e8_32c54_ZTSN8dispatch5blockIU13block_pointerFv10WakeReasonEEE(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void **)(a2 + 32);
  if (result) {
    uint64_t result = _Block_copy(result);
  }
  *(void *)(a1 + 32) = result;
  return result;
}

void __destroy_helper_block_e8_32c54_ZTSN8dispatch5blockIU13block_pointerFv10WakeReasonEEE(uint64_t a1)
{
  uint64_t v1 = *(const void **)(a1 + 32);
  if (v1) {
    _Block_release(v1);
  }
}

void dispatch::detail::group_notify<MipcTransportService::enterLowPower(dispatch::group_session)::$_0::operator() const(void)::{lambda(void)#1}>(dispatch_group_s *,dispatch_queue_s *,MipcTransportService::enterLowPower(dispatch::group_session)::$_0::operator() const(void)::{lambda(void)#1} &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke(uint64_t *__p)
{
  int v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
  {
    uint64_t v3 = *__p;
    uint64_t v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      Class v5 = v4;
      if (__p[1])
      {
        long long v6 = *(NSObject **)(v3 + 40);
        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)xpc_object_t v10 = 0;
          _os_log_impl(&dword_26368A000, v6, OS_LOG_TYPE_DEFAULT, "#I Sleep transition complete", v10, 2u);
        }
      }
      if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
  uint64_t v7 = __p[3];
  if (v7)
  {
    dispatch_group_leave(v7);
    uint64_t v8 = __p[3];
    if (v8) {
      dispatch_release(v8);
    }
  }
  int v9 = (std::__shared_weak_count *)__p[2];
  if (v9) {
    std::__shared_weak_count::__release_weak(v9);
  }
  operator delete(__p);
}

uint64_t ___ZNK3ctu20SharedSynchronizableI20MipcTransportServiceE20execute_wrapped_syncIZNS1_8tearDownEvE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS5__block_invoke(uint64_t a1)
{
  uint64_t v1 = *(uint64_t **)(a1 + 40);
  uint64_t v2 = *v1;
  uint64_t v3 = *(void **)(*v1 + 176);
  *(void *)(*v1 + 176) = 0;
  if (v3)
  {
    TelephonyBasebandWatchdogStop();
    operator delete(v3);
  }
  if (*(_DWORD *)(v2 + 128))
  {
    MipcTransportService::cancelWakeRequest_sync((MipcTransportService *)v2);
    uint64_t v4 = *(NSObject **)(v2 + 40);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_26368A000, v4, OS_LOG_TYPE_DEFAULT, "#I Teardown mipc router transport", buf, 2u);
    }
    Class v5 = dispatch_group_create();
    *(_DWORD *)(v2 + 128) = 0;
    if (v5) {
      dispatch_release(v5);
    }
    return 1;
  }
  uint64_t v7 = *(NSObject **)(v2 + 40);
  if (!os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT)) {
    return 1;
  }
  *(_WORD *)uint64_t v8 = 0;
  _os_log_impl(&dword_26368A000, v7, OS_LOG_TYPE_DEFAULT, "#I Ignoring tear down request as transport state is already reset", v8, 2u);
  return 1;
}

void dispatch::async<void ctu::SharedSynchronizable<MipcTransportService>::execute_wrapped<MipcTransportService::exitLowPower(dispatch::group_session)::$_0>(MipcTransportService::exitLowPower(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<MipcTransportService::exitLowPower(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<MipcTransportService::exitLowPower(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke(dispatch_object_t **a1)
{
  uint64_t v2 = *a1;
  dispatch_object_t v3 = **a1;
  isa = v3[5].isa;
  if (os_log_type_enabled(isa, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_26368A000, isa, OS_LOG_TYPE_DEFAULT, "#I Requesting wake transition", buf, 2u);
  }
  if (LODWORD(v3[16].isa) == 2)
  {
    MipcTransportService::updateWakeReason_sync((MipcTransportService *)v3);
    Class v5 = dispatch_group_create();
    long long v6 = (std::__shared_weak_count *)v3[10].isa;
    if (!v6 || (Class v7 = v3[9].isa, (v8 = std::__shared_weak_count::lock(v6)) == 0)) {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    int v9 = v8;
    p_shared_weak_owners = &v8->__shared_weak_owners_;
    atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v9);
    }
    atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
    uint64_t v11 = v2[1];
    if (v11)
    {
      dispatch_retain(v2[1]);
      dispatch_group_enter(v11);
    }
    Class v12 = v3[11].isa;
    __int16 v13 = operator new(0x20uLL);
    *__int16 v13 = v3;
    v13[1] = v7;
    void v13[2] = v9;
    v13[3] = v11;
    dispatch_group_notify_f(v5, v12, v13, (dispatch_function_t)dispatch::detail::group_notify<MipcTransportService::exitLowPower(dispatch::group_session)::$_0::operator() const(void)::{lambda(void)#1}>(dispatch_group_s *,dispatch_queue_s *,MipcTransportService::exitLowPower(dispatch::group_session)::$_0::operator() const(void)::{lambda(void)#1} &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke);
    std::__shared_weak_count::__release_weak(v9);
    if (v5) {
      dispatch_release(v5);
    }
  }
  else
  {
    size_t v14 = v3[5].isa;
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      v18[0] = 0;
      _os_log_impl(&dword_26368A000, v14, OS_LOG_TYPE_DEFAULT, "#I Skipping wake transition as baseband ready is pending", (uint8_t *)v18, 2u);
    }
  }
  __int16 v15 = v2[1];
  if (v15)
  {
    dispatch_group_leave(v15);
    int v16 = v2[1];
    if (v16) {
      dispatch_release(v16);
    }
  }
  operator delete(v2);
  uint64_t v17 = (std::__shared_weak_count *)a1[2];
  if (v17 && !atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  operator delete(a1);
}

void sub_2636C21C8(_Unwind_Exception *a1)
{
  if (v5)
  {
    dispatch_group_leave(v5);
    dispatch_release(v5);
  }
  std::__shared_weak_count::__release_weak(v4);
  std::__shared_weak_count::__release_weak(v4);
  if (v3) {
    dispatch_release(v3);
  }
  Class v7 = v2[1];
  if (v7)
  {
    dispatch_group_leave(v7);
    uint64_t v8 = v2[1];
    if (v8) {
      dispatch_release(v8);
    }
  }
  operator delete(v2);
  int v9 = (std::__shared_weak_count *)v1[2];
  if (v9)
  {
    if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void dispatch::detail::group_notify<MipcTransportService::exitLowPower(dispatch::group_session)::$_0::operator() const(void)::{lambda(void)#1}>(dispatch_group_s *,dispatch_queue_s *,MipcTransportService::exitLowPower(dispatch::group_session)::$_0::operator() const(void)::{lambda(void)#1} &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke(uint64_t *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
  {
    uint64_t v3 = *__p;
    uint64_t v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      Class v5 = v4;
      if (__p[1])
      {
        long long v6 = *(NSObject **)(v3 + 40);
        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)xpc_object_t v10 = 0;
          _os_log_impl(&dword_26368A000, v6, OS_LOG_TYPE_DEFAULT, "#I Wake transition complete", v10, 2u);
        }
      }
      if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
  Class v7 = __p[3];
  if (v7)
  {
    dispatch_group_leave(v7);
    uint64_t v8 = __p[3];
    if (v8) {
      dispatch_release(v8);
    }
  }
  int v9 = (std::__shared_weak_count *)__p[2];
  if (v9) {
    std::__shared_weak_count::__release_weak(v9);
  }
  operator delete(__p);
}

void dispatch::async<void ctu::SharedSynchronizable<MipcTransportService>::execute_wrapped<MipcTransportService::registerForWakeReason(dispatch::callback<void({block_pointer})(WakeReason)>)::$_0>(MipcTransportService::registerForWakeReason(dispatch::callback<void({block_pointer})(WakeReason)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<MipcTransportService::registerForWakeReason(dispatch::callback<void({block_pointer})(WakeReason)>)::$_0,dispatch_queue_s *::default_delete<MipcTransportService::registerForWakeReason(dispatch::callback<void({block_pointer})(WakeReason)>)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t v2 = *a1;
  uint64_t v4 = **a1;
  uint64_t v3 = (void *)(*a1)[1];
  if (v3) {
    uint64_t v3 = _Block_copy(v3);
  }
  Class v5 = *(const void **)(v4 + 152);
  *(void *)(v4 + 152) = v3;
  if (v5) {
    _Block_release(v5);
  }
  uint64_t v6 = v2[2];
  if (v6) {
    dispatch_retain((dispatch_object_t)v2[2]);
  }
  Class v7 = *(NSObject **)(v4 + 160);
  *(void *)(v4 + 160) = v6;
  if (v7) {
    dispatch_release(v7);
  }
  uint64_t v8 = v2[2];
  if (v8) {
    dispatch_release(v8);
  }
  int v9 = (const void *)v2[1];
  if (v9) {
    _Block_release(v9);
  }
  operator delete(v2);
  xpc_object_t v10 = (std::__shared_weak_count *)a1[2];
  if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
    uint64_t v11 = a1;
  }
  else
  {
    uint64_t v11 = a1;
  }
  operator delete(v11);
}

uint64_t ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get(uint64_t a1)
{
  return *(void *)a1;
}

void ___ZNK8dispatch8callbackIU13block_pointerFv10WakeReasonEEclIJS1_EEEvDpT__block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  int v2 = *(_DWORD *)(a1 + 40);
  uint64_t v3 = *(void **)(a1 + 48);
  int v4 = v2;
  xpc_object_t object = v3;
  if (v3) {
    xpc_retain(v3);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  (*(void (**)(uint64_t, int *))(v1 + 16))(v1, &v4);
  xpc_release(object);
}

void sub_2636C250C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
}

xpc_object_t __copy_helper_block_e8_32c54_ZTSN8dispatch5blockIU13block_pointerFv10WakeReasonEEE40c16_ZTS10WakeReason(uint64_t a1, uint64_t a2)
{
  int v4 = *(void **)(a2 + 32);
  if (v4) {
    int v4 = _Block_copy(v4);
  }
  *(void *)(a1 + 32) = v4;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  Class v5 = *(void **)(a2 + 48);
  *(void *)(a1 + 48) = v5;
  if (v5) {
    return xpc_retain(v5);
  }
  xpc_object_t result = xpc_null_create();
  *(void *)(a1 + 48) = result;
  return result;
}

void __destroy_helper_block_e8_32c54_ZTSN8dispatch5blockIU13block_pointerFv10WakeReasonEEE40c16_ZTS10WakeReason(uint64_t a1)
{
  xpc_release(*(xpc_object_t *)(a1 + 48));
  *(void *)(a1 + 48) = 0;
  int v2 = *(const void **)(a1 + 32);
  if (v2) {
    _Block_release(v2);
  }
}

uint64_t __cxx_global_var_init_9()
{
  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<CommandDriverFactory>::~PthreadMutexGuardPolicy, &ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance, &dword_26368A000);
  }
  return result;
}

{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<ABMServer>::~PthreadMutexGuardPolicy, &ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance, &dword_26368A000);
  }
  return result;
}

void util::strip_non_printable(std::string *this)
{
  uint64_t v1 = this;
  std::string::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) == 0) {
    uint64_t v3 = this;
  }
  else {
    uint64_t v3 = (std::string *)this->__r_.__value_.__r.__words[0];
  }
  if ((size & 0x80u) != 0) {
    std::string::size_type size = this->__r_.__value_.__l.__size_;
  }
  if (size)
  {
    int v4 = (std::string *)((char *)v3 + size);
    std::string::size_type v5 = size - 1;
    uint64_t v6 = MEMORY[0x263EF8318];
    while (1)
    {
      unsigned int v7 = v3->__r_.__value_.__s.__data_[0];
      if ((v7 & 0x80000000) != 0) {
        break;
      }
      int v8 = *(_DWORD *)(v6 + 4 * v7 + 60);
      if ((v8 & 0x40000) == 0 || (v8 & 0x4000) != 0) {
        goto LABEL_15;
      }
LABEL_8:
      uint64_t v3 = (std::string *)((char *)v3 + 1);
      --v5;
      if (v3 == v4) {
        goto LABEL_28;
      }
    }
    if (__maskrune(v3->__r_.__value_.__s.__data_[0], 0x40000uLL) && !__maskrune(v7, 0x4000uLL)) {
      goto LABEL_8;
    }
LABEL_15:
    if (v3 != v4 && (std::string *)((char *)&v3->__r_.__value_.__l.__data_ + 1) != v4)
    {
      uint64_t v9 = 1;
      int v4 = v3;
      while (1)
      {
        unsigned int v10 = v3->__r_.__value_.__s.__data_[v9];
        if ((v10 & 0x80000000) != 0)
        {
          if (!__maskrune(v3->__r_.__value_.__s.__data_[v9], 0x40000uLL) || __maskrune(v10, 0x4000uLL)) {
            goto LABEL_19;
          }
        }
        else
        {
          int v11 = *(_DWORD *)(v6 + 4 * v10 + 60);
          if ((v11 & 0x40000) == 0 || (v11 & 0x4000) != 0) {
            goto LABEL_19;
          }
        }
        v4->__r_.__value_.__s.__data_[0] = v3->__r_.__value_.__s.__data_[v9];
        int v4 = (std::string *)((char *)v4 + 1);
LABEL_19:
        ++v9;
        if (!--v5) {
          goto LABEL_28;
        }
      }
    }
  }
  int v4 = v3;
LABEL_28:
  std::string::size_type v12 = HIBYTE(v1->__r_.__value_.__r.__words[2]);
  int v13 = (char)v12;
  size_t v14 = (std::string *)v1->__r_.__value_.__r.__words[0];
  __int16 v15 = (char *)(v1->__r_.__value_.__r.__words[0] + v1->__r_.__value_.__l.__size_);
  if ((v12 & 0x80u) != 0)
  {
    std::string::size_type v16 = v1->__r_.__value_.__r.__words[0];
  }
  else
  {
    __int16 v15 = (char *)v1 + v12;
    std::string::size_type v16 = (std::string::size_type)v1;
  }
  if ((v12 & 0x80u) != 0) {
    std::string::size_type v12 = v1->__r_.__value_.__l.__size_;
  }
  std::string::size_type v17 = (std::string::size_type)v4 - v16;
  if (v12 < (unint64_t)v4 - v16) {
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v15 - (char *)v4 == -1)
  {
    if (v13 < 0)
    {
      v1->__r_.__value_.__l.__size_ = v17;
      uint64_t v1 = v14;
    }
    else
    {
      *((unsigned char *)&v1->__r_.__value_.__s + 23) = v17 & 0x7F;
    }
    v1->__r_.__value_.__s.__data_[v17] = 0;
  }
  else
  {
    std::string::__erase_external_with_move(v1, v17, v15 - (char *)v4);
  }
}

uint64_t util::convert_garbage(uint64_t result)
{
  int v1 = *(char *)(result + 23);
  if (v1 >= 0) {
    int v2 = (unsigned char *)result;
  }
  else {
    int v2 = *(unsigned char **)result;
  }
  if (v1 >= 0) {
    uint64_t v3 = *(unsigned __int8 *)(result + 23);
  }
  else {
    uint64_t v3 = *(void *)(result + 8);
  }
  if (v3)
  {
    uint64_t v4 = MEMORY[0x263EF8318];
    do
    {
      unsigned int v5 = (char)*v2;
      if ((v5 & 0x80000000) != 0)
      {
        uint64_t result = __maskrune((char)*v2, 0x40000uLL);
        if (result) {
          goto LABEL_10;
        }
        uint64_t result = __maskrune(v5, 0x4000uLL);
        if (result) {
          goto LABEL_10;
        }
      }
      else
      {
        int v6 = *(_DWORD *)(v4 + 4 * v5 + 60);
        if ((v6 & 0x40000) != 0) {
          goto LABEL_10;
        }
        uint64_t result = v6 & 0x4000;
        if ((v6 & 0x4000) != 0) {
          goto LABEL_10;
        }
      }
      unsigned char *v2 = 32;
LABEL_10:
      ++v2;
      --v3;
    }
    while (v3);
  }
  return result;
}

void util::strip_pattern(char *a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  memset(a3, 170, sizeof(std::string));
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a3, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&a3->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    a3->__r_.__value_.__r.__words[2] = *(void *)(a2 + 16);
  }
  int v5 = a1[23];
  int v6 = SHIBYTE(a3->__r_.__value_.__r.__words[2]);
  unsigned int v7 = (std::string *)a3->__r_.__value_.__r.__words[0];
  if (v6 >= 0) {
    int v8 = a3;
  }
  else {
    int v8 = (std::string *)a3->__r_.__value_.__r.__words[0];
  }
  if (v5 >= 0) {
    int64_t v9 = a1[23];
  }
  else {
    int64_t v9 = *((void *)a1 + 1);
  }
  std::string::size_type v10 = HIBYTE(a3->__r_.__value_.__r.__words[2]);
  if (v5 >= 0) {
    int v11 = a1;
  }
  else {
    int v11 = *(char **)a1;
  }
  if (!v9)
  {
    std::string::size_type v13 = 0;
    goto LABEL_20;
  }
  if (v6 >= 0) {
    uint64_t size = HIBYTE(a3->__r_.__value_.__r.__words[2]);
  }
  else {
    uint64_t size = a3->__r_.__value_.__l.__size_;
  }
  if (size >= v9)
  {
    xpc_object_t v27 = (char *)v8 + size;
    int v28 = *v11;
    unint64_t v29 = v8;
    do
    {
      uint64_t v30 = size - v9;
      if (v30 == -1) {
        break;
      }
      uint64_t v31 = (char *)memchr(v29, v28, v30 + 1);
      if (!v31) {
        break;
      }
      uint64_t v32 = v31;
      if (!memcmp(v31, v11, v9))
      {
        if (v32 != v27)
        {
          std::string::size_type v13 = v32 - (char *)v8;
          if (v32 - (char *)v8 != -1)
          {
            if (v9 == -1)
            {
              while (1)
              {
                std::string::size_type v33 = a3->__r_.__value_.__l.__size_;
                if ((v10 & 0x80u) == 0) {
                  std::string::size_type v33 = v10;
                }
                if (v33 < v13) {
                  break;
                }
                if ((char)v10 < 0)
                {
                  a3->__r_.__value_.__l.__size_ = v13;
                }
                else
                {
                  *((unsigned char *)&a3->__r_.__value_.__s + 23) = v13 & 0x7F;
                  unsigned int v7 = a3;
                }
                v7->__r_.__value_.__s.__data_[v13] = 0;
                int v34 = SHIBYTE(a3->__r_.__value_.__r.__words[2]);
                std::string::size_type v10 = HIBYTE(a3->__r_.__value_.__r.__words[2]);
                unsigned int v7 = (std::string *)a3->__r_.__value_.__r.__words[0];
                if (v34 >= 0) {
                  uint64_t v35 = a3;
                }
                else {
                  uint64_t v35 = (std::string *)a3->__r_.__value_.__r.__words[0];
                }
                int v36 = a1[23];
                if (v36 >= 0) {
                  std::string::size_type v37 = a1;
                }
                else {
                  std::string::size_type v37 = *(char **)a1;
                }
                if (v36 >= 0) {
                  int64_t v38 = a1[23];
                }
                else {
                  int64_t v38 = *((void *)a1 + 1);
                }
                if (v38)
                {
                  if (v34 >= 0) {
                    int64_t v39 = HIBYTE(a3->__r_.__value_.__r.__words[2]);
                  }
                  else {
                    int64_t v39 = a3->__r_.__value_.__l.__size_;
                  }
                  if (v39 < v38) {
                    return;
                  }
                  uint64_t v40 = (char *)v35 + v39;
                  int v41 = *v37;
                  uint64_t v42 = v35;
                  while (1)
                  {
                    int64_t v43 = v39 - v38;
                    if (v43 == -1) {
                      return;
                    }
                    unint64_t v44 = (char *)memchr(v42, v41, v43 + 1);
                    if (!v44) {
                      return;
                    }
                    std::string::size_type v45 = v44;
                    if (!memcmp(v44, v37, v38)) {
                      break;
                    }
                    uint64_t v42 = (std::string *)(v45 + 1);
                    int64_t v39 = v40 - (v45 + 1);
                    if (v39 < v38) {
                      return;
                    }
                  }
                  if (v45 == v40) {
                    return;
                  }
                  std::string::size_type v13 = v45 - (char *)v35;
                  if (v45 - (char *)v35 == -1) {
                    return;
                  }
                }
                else
                {
                  std::string::size_type v13 = 0;
                }
              }
            }
            else
            {
LABEL_20:
              while (1)
              {
                std::string::size_type v14 = (v10 & 0x80u) == 0 ? v10 : a3->__r_.__value_.__l.__size_;
                if (v14 < v13) {
                  break;
                }
                std::string::__erase_external_with_move(a3, v13, v9);
                int v15 = SHIBYTE(a3->__r_.__value_.__r.__words[2]);
                std::string::size_type v10 = HIBYTE(a3->__r_.__value_.__r.__words[2]);
                if (v15 >= 0) {
                  std::string::size_type v16 = a3;
                }
                else {
                  std::string::size_type v16 = (std::string *)a3->__r_.__value_.__r.__words[0];
                }
                int v17 = a1[23];
                if (v17 >= 0) {
                  uint64_t v18 = a1;
                }
                else {
                  uint64_t v18 = *(char **)a1;
                }
                if (v17 >= 0) {
                  int64_t v19 = a1[23];
                }
                else {
                  int64_t v19 = *((void *)a1 + 1);
                }
                if (v19)
                {
                  if (v15 >= 0) {
                    int64_t v20 = HIBYTE(a3->__r_.__value_.__r.__words[2]);
                  }
                  else {
                    int64_t v20 = a3->__r_.__value_.__l.__size_;
                  }
                  if (v20 < v19) {
                    return;
                  }
                  size_t v21 = (char *)v16 + v20;
                  int v22 = *v18;
                  unint64_t v23 = v16;
                  while (1)
                  {
                    int64_t v24 = v20 - v19;
                    if (v24 == -1) {
                      return;
                    }
                    uint64_t v25 = (char *)memchr(v23, v22, v24 + 1);
                    if (!v25) {
                      return;
                    }
                    uint64_t v26 = v25;
                    if (!memcmp(v25, v18, v19)) {
                      break;
                    }
                    unint64_t v23 = (std::string *)(v26 + 1);
                    int64_t v20 = v21 - (v26 + 1);
                    if (v20 < v19) {
                      return;
                    }
                  }
                  if (v26 == v21) {
                    return;
                  }
                  std::string::size_type v13 = v26 - (char *)v16;
                  if (v26 - (char *)v16 == -1) {
                    return;
                  }
                }
                else
                {
                  std::string::size_type v13 = 0;
                }
              }
            }
            std::string::__throw_out_of_range[abi:ne180100]();
          }
        }
        return;
      }
      unint64_t v29 = (std::string *)(v32 + 1);
      uint64_t size = v27 - (v32 + 1);
    }
    while (size >= v9);
  }
}

void sub_2636C2B7C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *util::strip_leading_trailing@<X0>(void *result@<X0>, void **a2@<X1>, void *a3@<X8>)
{
  unint64_t v4 = *((unsigned __int8 *)result + 23);
  int v5 = (void *)*result;
  unint64_t v6 = result[1];
  if ((v4 & 0x80u) == 0) {
    unsigned int v7 = result;
  }
  else {
    unsigned int v7 = (void *)*result;
  }
  if ((v4 & 0x80u) == 0) {
    uint64_t v8 = *((unsigned __int8 *)result + 23);
  }
  else {
    uint64_t v8 = result[1];
  }
  int v9 = *((char *)a2 + 23);
  if (v9 >= 0) {
    std::string::size_type v10 = a2;
  }
  else {
    std::string::size_type v10 = *a2;
  }
  if (v9 >= 0) {
    size_t v11 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v11 = (size_t)a2[1];
  }
  if (!v8) {
    goto LABEL_26;
  }
  std::string::size_type v12 = result;
  unint64_t v13 = 0;
  if (!v11)
  {
    uint64_t v14 = v8 - 1;
    if ((v4 & 0x80) == 0) {
      goto LABEL_28;
    }
    goto LABEL_24;
  }
  while (1)
  {
    uint64_t result = memchr(v10, *((char *)v7 + v13), v11);
    if (!result) {
      break;
    }
    if (v8 == ++v13) {
      goto LABEL_26;
    }
  }
  if (v13 == -1)
  {
LABEL_26:
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    return result;
  }
  do
  {
    if (!v8)
    {
      uint64_t v14 = -1;
      if ((v4 & 0x80) == 0) {
        goto LABEL_28;
      }
LABEL_24:
      if (v6 >= v13)
      {
        unint64_t v4 = v6;
        std::string::size_type v12 = v5;
        goto LABEL_29;
      }
LABEL_41:
      std::string::__throw_out_of_range[abi:ne180100]();
    }
    uint64_t result = memchr(v10, *((char *)v7 + --v8), v11);
  }
  while (result);
  uint64_t v14 = v8;
  if ((v4 & 0x80) != 0) {
    goto LABEL_24;
  }
LABEL_28:
  if (v13 > v4) {
    goto LABEL_41;
  }
LABEL_29:
  unint64_t v15 = v14 - v13 + 1;
  if (v4 - v13 >= v15) {
    size_t v16 = v15;
  }
  else {
    size_t v16 = v4 - v13;
  }
  if (v16 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v16 >= 0x17)
  {
    uint64_t v17 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v16 | 7) != 0x17) {
      uint64_t v17 = v16 | 7;
    }
    uint64_t v18 = v17 + 1;
    int64_t v19 = operator new(v17 + 1);
    a3[1] = v16;
    a3[2] = v18 | 0x8000000000000000;
    *a3 = v19;
    a3 = v19;
    goto LABEL_39;
  }
  *((unsigned char *)a3 + 23) = v16;
  if (v16) {
LABEL_39:
  }
    uint64_t result = memmove(a3, (char *)v12 + v13, v16);
  *((unsigned char *)a3 + v16) = 0;
  return result;
}

uint64_t util::to_upper(uint64_t result)
{
  uint64_t v1 = *(unsigned __int8 *)(result + 23);
  int v2 = (char)v1;
  uint64_t v3 = (unsigned char *)(result + v1);
  if (v2 >= 0) {
    unint64_t v4 = v3;
  }
  else {
    unint64_t v4 = (unsigned char *)(*(void *)result + *(void *)(result + 8));
  }
  if (v2 >= 0) {
    int v5 = (unsigned char *)result;
  }
  else {
    int v5 = *(unsigned char **)result;
  }
  for (; v5 != v4; ++v5)
  {
    uint64_t result = __toupper((char)*v5);
    unsigned char *v5 = result;
  }
  return result;
}

BOOL util::equal_nocase(const char *a1, const char *a2)
{
  if (a1[23] < 0) {
    a1 = *(const char **)a1;
  }
  if (a2[23] < 0) {
    a2 = *(const char **)a2;
  }
  return strcasecmp(a1, a2) == 0;
}

void util::strip_non_alpha(std::string *a1)
{
  std::string::size_type size = HIBYTE(a1->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) == 0) {
    uint64_t v3 = (char *)a1;
  }
  else {
    uint64_t v3 = (char *)a1->__r_.__value_.__r.__words[0];
  }
  if ((size & 0x80u) != 0) {
    std::string::size_type size = a1->__r_.__value_.__l.__size_;
  }
  if (!size) {
    goto LABEL_21;
  }
  unint64_t v4 = &v3[size];
  std::string::size_type v5 = size - 1;
  uint64_t v6 = MEMORY[0x263EF8318];
  while (1)
  {
    unsigned int v7 = *v3;
    if ((v7 & 0x80000000) != 0)
    {
      if (!__maskrune(v7, 0x100uLL)) {
        break;
      }
      goto LABEL_9;
    }
    if ((*(_DWORD *)(v6 + 4 * v7 + 60) & 0x100) == 0) {
      break;
    }
LABEL_9:
    ++v3;
    --v5;
    if (v3 == v4) {
      goto LABEL_22;
    }
  }
  if (v3 != v4 && v3 + 1 != v4)
  {
    uint64_t v8 = 1;
    unint64_t v4 = v3;
    while (1)
    {
      unsigned int v9 = v3[v8];
      if ((v9 & 0x80000000) == 0) {
        break;
      }
      if (__maskrune(v9, 0x100uLL)) {
        goto LABEL_16;
      }
LABEL_17:
      ++v8;
      if (!--v5) {
        goto LABEL_22;
      }
    }
    if ((*(_DWORD *)(v6 + 4 * v9 + 60) & 0x100) == 0) {
      goto LABEL_17;
    }
LABEL_16:
    *v4++ = v3[v8];
    goto LABEL_17;
  }
LABEL_21:
  unint64_t v4 = v3;
LABEL_22:
  unint64_t v10 = HIBYTE(a1->__r_.__value_.__r.__words[2]);
  int v11 = (char)v10;
  std::string::size_type v12 = a1->__r_.__value_.__r.__words[0];
  unint64_t v13 = (char *)(a1->__r_.__value_.__r.__words[0] + a1->__r_.__value_.__l.__size_);
  if ((v10 & 0x80u) != 0)
  {
    uint64_t v14 = (std::string *)a1->__r_.__value_.__r.__words[0];
  }
  else
  {
    unint64_t v13 = (char *)a1 + v10;
    uint64_t v14 = a1;
  }
  if ((v10 & 0x80u) != 0) {
    unint64_t v10 = a1->__r_.__value_.__l.__size_;
  }
  std::string::size_type v15 = v4 - (char *)v14;
  if (v10 < v4 - (char *)v14) {
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v13 - v4 == -1)
  {
    if (v11 < 0)
    {
      a1->__r_.__value_.__l.__size_ = v15;
      *(unsigned char *)(v12 + v15) = 0;
    }
    else
    {
      *((unsigned char *)&a1->__r_.__value_.__s + 23) = v15 & 0x7F;
      a1->__r_.__value_.__s.__data_[v15] = 0;
    }
  }
  else
  {
    std::string::__erase_external_with_move(a1, v15, v13 - v4);
  }
}

void util::readPlistToCFDictionary(uint64_t a1@<X0>, void *a2@<X8>)
{
  int v2 = (const char *)a1;
  uint64_t v20 = *MEMORY[0x263EF8340];
  CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  if (*(char *)(a1 + 23) < 0) {
    int v2 = *(const char **)a1;
  }
  std::string::size_type v5 = (__CFError *)CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x263EFFB08], v2, 0x8000100u);
  error[3] = v5;
  uint64_t v6 = CFURLCreateWithFileSystemPath(v4, (CFStringRef)v5, kCFURLPOSIXPathStyle, 0);
  error[2] = v6;
  *a2 = 0;
  if (v6) {
    unsigned int v7 = ctu::SharedRef<__CFURL const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFURL const>::get;
  }
  else {
    unsigned int v7 = 0;
  }
  if (v7)
  {
    uint64_t v8 = CFReadStreamCreateWithFile(v4, v6);
    unsigned int v9 = v8;
    error[1] = v8;
    if (v8) {
      unint64_t v10 = ctu::SharedRef<__CFReadStream,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFReadStream>::get;
    }
    else {
      unint64_t v10 = 0;
    }
    if (!v10) {
      goto LABEL_16;
    }
    CFReadStreamOpen(v8);
    error[0] = 0;
    CFPropertyListRef v11 = CFPropertyListCreateWithStream(v4, v9, 0, 1uLL, 0, error);
    *a2 = v11;
    CFReadStreamClose(v9);
    if (!error[0]) {
      goto LABEL_16;
    }
    CFErrorGetDomain(error[0]);
    memset(buf, 0, sizeof(buf));
    ctu::cf::assign();
    *(_OWORD *)std::string __p = *(_OWORD *)buf;
    uint64_t v16 = *(void *)&buf[16];
    std::string::size_type v12 = GetOsLogContext()[1];
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      CFIndex Code = CFErrorGetCode(error[0]);
      uint64_t v14 = __p;
      if (v16 < 0) {
        uint64_t v14 = (void **)__p[0];
      }
      *(_DWORD *)long long buf = 138412802;
      *(void *)&uint8_t buf[4] = v6;
      *(_WORD *)&buf[12] = 2048;
      *(void *)&buf[14] = Code;
      *(_WORD *)&unsigned char buf[22] = 2080;
      int64_t v19 = v14;
      _os_log_error_impl(&dword_26368A000, v12, OS_LOG_TYPE_ERROR, "Failed to create %@ PropertyList: %ld: %s", buf, 0x20u);
    }
    CFRelease(error[0]);
    *a2 = 0;
    if (v11) {
      CFRelease(v11);
    }
    if ((SHIBYTE(v16) & 0x80000000) == 0)
    {
LABEL_16:
      if (!v9) {
        goto LABEL_18;
      }
      goto LABEL_17;
    }
    operator delete(__p[0]);
    if (v9) {
LABEL_17:
    }
      CFRelease(v9);
  }
LABEL_18:
  if (v6) {
    CFRelease(v6);
  }
  if (v5) {
    CFRelease(v5);
  }
}

void sub_2636C31A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, char a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::SharedRef<__CFURL const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFURL const>::get(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t ctu::SharedRef<__CFReadStream,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFReadStream>::get(uint64_t a1)
{
  return *(void *)a1;
}

const void **ctu::cf::CFSharedRef<__CFReadStream>::~CFSharedRef(const void **a1)
{
  int v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

const void **ctu::cf::CFSharedRef<__CFURL const>::~CFSharedRef(const void **a1)
{
  int v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

const void **ctu::cf::CFSharedRef<__CFString const>::~CFSharedRef(const void **a1)
{
  int v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

void util::moveDirContent(std::string::size_type a1, uint64_t a2, unsigned int a3, int a4, uint64_t a5)
{
  uint64_t v140 = *MEMORY[0x263EF8340];
  BOOL v131 = 0;
  BOOL v132 = 0;
  uint64_t v133 = 0;
  std::locale::locale(&v125, (const std::locale *)a5);
  long long v126 = *(_OWORD *)(a5 + 8);
  long long v127 = *(_OWORD *)(a5 + 24);
  uint64_t v8 = *(std::__shared_weak_count **)(a5 + 48);
  uint64_t v128 = *(void *)(a5 + 40);
  uint64_t v129 = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v130 = *(void *)(a5 + 56);
  int filtered_files = ctu::fs::get_filtered_files();
  unint64_t v10 = v129;
  if (!v129 || atomic_fetch_add(&v129->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    std::locale::~locale(&v125);
    if (filtered_files) {
      goto LABEL_6;
    }
LABEL_104:
    dispatch_object_t v53 = GetOsLogContext()[1];
    if (os_log_type_enabled(v53, OS_LOG_TYPE_ERROR))
    {
      std::string::size_type v109 = a1;
      if (*(char *)(a1 + 23) < 0) {
        std::string::size_type v109 = *(void *)a1;
      }
      LODWORD(v139.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)v139.__r_.__value_.__r.__words + 4) = v109;
      _os_log_error_impl(&dword_26368A000, v53, OS_LOG_TYPE_ERROR, "Failed to find a content in %s", (uint8_t *)&v139, 0xCu);
    }
    goto LABEL_105;
  }
  ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
  std::__shared_weak_count::__release_weak(v10);
  std::locale::~locale(&v125);
  if (!filtered_files) {
    goto LABEL_104;
  }
LABEL_6:
  CFPropertyListRef v11 = v131;
  int v113 = (char *)v132;
  if (v131 != (char *)v132)
  {
    if (a4)
    {
      while (1)
      {
        memset(&v139, 170, sizeof(v139));
        if (v11[23] < 0)
        {
          std::string::__init_copy_ctor_external(&v139, *(const std::string::value_type **)v11, *((void *)v11 + 1));
        }
        else
        {
          long long v12 = *(_OWORD *)v11;
          v139.__r_.__value_.__r.__words[2] = *((void *)v11 + 2);
          *(_OWORD *)&v139.__r_.__value_.__l.__data_ = v12;
        }
        int v13 = *(char *)(a1 + 23);
        if (v13 >= 0) {
          size_t v14 = *(unsigned __int8 *)(a1 + 23);
        }
        else {
          size_t v14 = *(void *)(a1 + 8);
        }
        unint64_t v15 = v14 + 1;
        memset(&__p, 170, sizeof(__p));
        if (v14 + 1 > 0x7FFFFFFFFFFFFFF7) {
          std::string::__throw_length_error[abi:ne180100]();
        }
        if (v15 >= 0x17) {
          break;
        }
        memset(&__p, 0, sizeof(__p));
        p_p = &__p;
        *((unsigned char *)&__p.__r_.__value_.__s + 23) = v14 + 1;
        if (v14) {
          goto LABEL_24;
        }
LABEL_28:
        *(_WORD *)((char *)&p_p->__r_.__value_.__l.__data_ + v14) = 47;
        if ((v139.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v20 = &v139;
        }
        else {
          uint64_t v20 = (std::string *)v139.__r_.__value_.__r.__words[0];
        }
        if ((v139.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(v139.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = v139.__r_.__value_.__l.__size_;
        }
        int v22 = std::string::append(&__p, (const std::string::value_type *)v20, size);
        long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
        v124.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v124.__r_.__value_.__l.__data_ = v23;
        v22->__r_.__value_.__l.__size_ = 0;
        v22->__r_.__value_.__r.__words[2] = 0;
        v22->__r_.__value_.__r.__words[0] = 0;
        int is_directory = ctu::fs::is_directory();
        if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v124.__r_.__value_.__l.__data_);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            goto LABEL_45;
          }
LABEL_36:
          if (is_directory) {
            goto LABEL_37;
          }
LABEL_46:
          unint64_t v29 = GetOsLogContext()[1];
          if (!os_log_type_enabled(v29, OS_LOG_TYPE_ERROR)) {
            goto LABEL_83;
          }
          int v30 = *(char *)(a1 + 23);
          if (v30 >= 0) {
            size_t v31 = *(unsigned __int8 *)(a1 + 23);
          }
          else {
            size_t v31 = *(void *)(a1 + 8);
          }
          unint64_t v32 = v31 + 1;
          memset(&__p, 170, sizeof(__p));
          if (v31 + 1 > 0x7FFFFFFFFFFFFFF7) {
            std::string::__throw_length_error[abi:ne180100]();
          }
          if (v32 >= 0x17)
          {
            int v110 = v30;
            uint64_t v45 = (v32 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v32 | 7) != 0x17) {
              uint64_t v45 = v32 | 7;
            }
            uint64_t v46 = v45 + 1;
            std::string::size_type v33 = (std::string *)operator new(v45 + 1);
            __p.__r_.__value_.__l.__size_ = v31 + 1;
            __p.__r_.__value_.__r.__words[2] = v46 | 0x8000000000000000;
            __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v33;
            int v30 = v110;
          }
          else
          {
            memset(&__p, 0, sizeof(__p));
            std::string::size_type v33 = &__p;
            *((unsigned char *)&__p.__r_.__value_.__s + 23) = v31 + 1;
            if (!v31) {
              goto LABEL_93;
            }
          }
          if (v30 >= 0) {
            int v47 = (const void *)a1;
          }
          else {
            int v47 = *(const void **)a1;
          }
          memmove(v33, v47, v31);
LABEL_93:
          *(_WORD *)((char *)&v33->__r_.__value_.__l.__data_ + v31) = 47;
          if ((v139.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            xpc_object_t v48 = &v139;
          }
          else {
            xpc_object_t v48 = (std::string *)v139.__r_.__value_.__r.__words[0];
          }
          if ((v139.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v49 = HIBYTE(v139.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v49 = v139.__r_.__value_.__l.__size_;
          }
          uint64_t v50 = std::string::append(&__p, (const std::string::value_type *)v48, v49);
          long long v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
          v124.__r_.__value_.__r.__words[2] = v50->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v124.__r_.__value_.__l.__data_ = v51;
          v50->__r_.__value_.__l.__size_ = 0;
          v50->__r_.__value_.__r.__words[2] = 0;
          v50->__r_.__value_.__r.__words[0] = 0;
          id v52 = &v124;
          if ((v124.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            id v52 = (std::string *)v124.__r_.__value_.__r.__words[0];
          }
          LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v52;
          WORD2(buf.__r_.__value_.__r.__words[1]) = 1024;
          *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = a4;
          _os_log_error_impl(&dword_26368A000, v29, OS_LOG_TYPE_ERROR, "%s is not a directory. So, skip to move it with the depth (%d)", (uint8_t *)&buf, 0x12u);
          if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0) {
            goto LABEL_82;
          }
LABEL_77:
          if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_83;
          }
LABEL_9:
          operator delete(__p.__r_.__value_.__l.__data_);
          if (SHIBYTE(v139.__r_.__value_.__r.__words[2]) < 0) {
            goto LABEL_84;
          }
LABEL_10:
          v11 += 24;
          if (v11 == v113) {
            goto LABEL_105;
          }
        }
        else
        {
          if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_36;
          }
LABEL_45:
          operator delete(__p.__r_.__value_.__l.__data_);
          if (!is_directory) {
            goto LABEL_46;
          }
LABEL_37:
          int v25 = *(char *)(a1 + 23);
          if (v25 >= 0) {
            size_t v26 = *(unsigned __int8 *)(a1 + 23);
          }
          else {
            size_t v26 = *(void *)(a1 + 8);
          }
          unint64_t v27 = v26 + 1;
          memset(&__p, 170, sizeof(__p));
          if (v26 + 1 > 0x7FFFFFFFFFFFFFF7) {
            std::string::__throw_length_error[abi:ne180100]();
          }
          if (v27 >= 0x17)
          {
            uint64_t v34 = (v27 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v27 | 7) != 0x17) {
              uint64_t v34 = v27 | 7;
            }
            uint64_t v35 = v34 + 1;
            int v28 = (std::string *)operator new(v34 + 1);
            __p.__r_.__value_.__l.__size_ = v26 + 1;
            __p.__r_.__value_.__r.__words[2] = v35 | 0x8000000000000000;
            __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v28;
          }
          else
          {
            memset(&__p, 0, sizeof(__p));
            int v28 = &__p;
            *((unsigned char *)&__p.__r_.__value_.__s + 23) = v26 + 1;
            if (!v26) {
              goto LABEL_61;
            }
          }
          if (v25 >= 0) {
            int v36 = (const void *)a1;
          }
          else {
            int v36 = *(const void **)a1;
          }
          memmove(v28, v36, v26);
LABEL_61:
          *(_WORD *)((char *)&v28->__r_.__value_.__l.__data_ + v26) = 47;
          if ((v139.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v37 = &v139;
          }
          else {
            std::string::size_type v37 = (std::string *)v139.__r_.__value_.__r.__words[0];
          }
          if ((v139.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v38 = HIBYTE(v139.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v38 = v139.__r_.__value_.__l.__size_;
          }
          int64_t v39 = std::string::append(&__p, (const std::string::value_type *)v37, v38);
          long long v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
          v124.__r_.__value_.__r.__words[2] = v39->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v124.__r_.__value_.__l.__data_ = v40;
          v39->__r_.__value_.__l.__size_ = 0;
          v39->__r_.__value_.__r.__words[2] = 0;
          v39->__r_.__value_.__r.__words[0] = 0;
          int v41 = std::string::append(&v124, "/", 1uLL);
          long long v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
          std::string::size_type v122 = v41->__r_.__value_.__r.__words[2];
          *(_OWORD *)uint64_t v121 = v42;
          v41->__r_.__value_.__l.__size_ = 0;
          v41->__r_.__value_.__r.__words[2] = 0;
          v41->__r_.__value_.__r.__words[0] = 0;
          if (*(char *)(a2 + 23) < 0) {
            std::string::__init_copy_ctor_external(&v120, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
          }
          else {
            std::string v120 = *(std::string *)a2;
          }
          std::locale::locale(&v114, (const std::locale *)a5);
          long long v115 = *(_OWORD *)(a5 + 8);
          long long v116 = *(_OWORD *)(a5 + 24);
          int64_t v43 = *(std::__shared_weak_count **)(a5 + 48);
          uint64_t v117 = *(void *)(a5 + 40);
          int v118 = v43;
          if (v43) {
            atomic_fetch_add_explicit(&v43->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v119 = *(void *)(a5 + 56);
          util::moveDirContent(v121, &v120, a3, (a4 - 1), &v114);
          unint64_t v44 = v118;
          if (v118 && !atomic_fetch_add(&v118->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
            std::__shared_weak_count::__release_weak(v44);
            std::locale::~locale(&v114);
            if ((SHIBYTE(v120.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
LABEL_75:
              if ((SHIBYTE(v122) & 0x80000000) == 0) {
                goto LABEL_76;
              }
LABEL_81:
              operator delete(v121[0]);
              if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0) {
                goto LABEL_82;
              }
              goto LABEL_77;
            }
          }
          else
          {
            std::locale::~locale(&v114);
            if ((SHIBYTE(v120.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
              goto LABEL_75;
            }
          }
          operator delete(v120.__r_.__value_.__l.__data_);
          if (SHIBYTE(v122) < 0) {
            goto LABEL_81;
          }
LABEL_76:
          if ((SHIBYTE(v124.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_77;
          }
LABEL_82:
          operator delete(v124.__r_.__value_.__l.__data_);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            goto LABEL_9;
          }
LABEL_83:
          if ((SHIBYTE(v139.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_10;
          }
LABEL_84:
          operator delete(v139.__r_.__value_.__l.__data_);
          v11 += 24;
          if (v11 == v113) {
            goto LABEL_105;
          }
        }
      }
      uint64_t v17 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v15 | 7) != 0x17) {
        uint64_t v17 = v15 | 7;
      }
      uint64_t v18 = v17 + 1;
      p_p = (std::string *)operator new(v17 + 1);
      __p.__r_.__value_.__l.__size_ = v14 + 1;
      __p.__r_.__value_.__r.__words[2] = v18 | 0x8000000000000000;
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)p_p;
LABEL_24:
      if (v13 >= 0) {
        int64_t v19 = (const void *)a1;
      }
      else {
        int64_t v19 = *(const void **)a1;
      }
      memmove(p_p, v19, v14);
      goto LABEL_28;
    }
    while (1)
    {
      memset(&v139, 170, sizeof(v139));
      if (v11[23] < 0)
      {
        std::string::__init_copy_ctor_external(&v139, *(const std::string::value_type **)v11, *((void *)v11 + 1));
      }
      else
      {
        long long v57 = *(_OWORD *)v11;
        v139.__r_.__value_.__r.__words[2] = *((void *)v11 + 2);
        *(_OWORD *)&v139.__r_.__value_.__l.__data_ = v57;
      }
      memset(&v124, 170, sizeof(v124));
      int v58 = *(char *)(a2 + 23);
      if (v58 >= 0) {
        size_t v59 = *(unsigned __int8 *)(a2 + 23);
      }
      else {
        size_t v59 = *(void *)(a2 + 8);
      }
      unint64_t v60 = v59 + 1;
      memset(&buf, 170, sizeof(buf));
      if (v59 + 1 > 0x7FFFFFFFFFFFFFF7) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      if (v60 >= 0x17)
      {
        uint64_t v62 = (v60 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v60 | 7) != 0x17) {
          uint64_t v62 = v60 | 7;
        }
        uint64_t v63 = v62 + 1;
        p_std::string buf = (std::string *)operator new(v62 + 1);
        buf.__r_.__value_.__l.__size_ = v59 + 1;
        buf.__r_.__value_.__r.__words[2] = v63 | 0x8000000000000000;
        buf.__r_.__value_.__r.__words[0] = (std::string::size_type)p_buf;
      }
      else
      {
        memset(&buf, 0, sizeof(buf));
        p_std::string buf = &buf;
        *((unsigned char *)&buf.__r_.__value_.__s + 23) = v59 + 1;
        if (!v59) {
          goto LABEL_136;
        }
      }
      if (v58 >= 0) {
        int v64 = (const void *)a2;
      }
      else {
        int v64 = *(const void **)a2;
      }
      memmove(p_buf, v64, v59);
LABEL_136:
      *(_WORD *)((char *)&p_buf->__r_.__value_.__l.__data_ + v59) = 47;
      if ((v139.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v65 = &v139;
      }
      else {
        uint64_t v65 = (std::string *)v139.__r_.__value_.__r.__words[0];
      }
      if ((v139.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v66 = HIBYTE(v139.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v66 = v139.__r_.__value_.__l.__size_;
      }
      uint64_t v67 = std::string::append(&buf, (const std::string::value_type *)v65, v66);
      long long v68 = *(_OWORD *)&v67->__r_.__value_.__l.__data_;
      __p.__r_.__value_.__r.__words[2] = v67->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v68;
      v67->__r_.__value_.__l.__size_ = 0;
      v67->__r_.__value_.__r.__words[2] = 0;
      v67->__r_.__value_.__r.__words[0] = 0;
      ctu::fs::get_unique_filename();
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        if ((SHIBYTE(buf.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_144;
        }
      }
      else if ((SHIBYTE(buf.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_144;
      }
      operator delete(buf.__r_.__value_.__l.__data_);
LABEL_144:
      int v69 = *(char *)(a1 + 23);
      if (v69 >= 0) {
        size_t v70 = *(unsigned __int8 *)(a1 + 23);
      }
      else {
        size_t v70 = *(void *)(a1 + 8);
      }
      unint64_t v71 = v70 + 1;
      memset(&buf, 170, sizeof(buf));
      if (v70 + 1 > 0x7FFFFFFFFFFFFFF7) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      if (v71 >= 0x17)
      {
        uint64_t v73 = (v71 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v71 | 7) != 0x17) {
          uint64_t v73 = v71 | 7;
        }
        uint64_t v74 = v73 + 1;
        unint64_t v72 = (std::string *)operator new(v73 + 1);
        buf.__r_.__value_.__l.__size_ = v70 + 1;
        buf.__r_.__value_.__r.__words[2] = v74 | 0x8000000000000000;
        buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v72;
LABEL_154:
        if (v69 >= 0) {
          uint64_t v75 = (const void *)a1;
        }
        else {
          uint64_t v75 = *(const void **)a1;
        }
        memmove(v72, v75, v70);
        goto LABEL_158;
      }
      memset(&buf, 0, sizeof(buf));
      unint64_t v72 = &buf;
      *((unsigned char *)&buf.__r_.__value_.__s + 23) = v70 + 1;
      if (v70) {
        goto LABEL_154;
      }
LABEL_158:
      *(_WORD *)((char *)&v72->__r_.__value_.__l.__data_ + v70) = 47;
      if ((v139.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v76 = &v139;
      }
      else {
        std::string::size_type v76 = (std::string *)v139.__r_.__value_.__r.__words[0];
      }
      if ((v139.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v77 = HIBYTE(v139.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v77 = v139.__r_.__value_.__l.__size_;
      }
      uint64_t v78 = std::string::append(&buf, (const std::string::value_type *)v76, v77);
      long long v79 = *(_OWORD *)&v78->__r_.__value_.__l.__data_;
      __p.__r_.__value_.__r.__words[2] = v78->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v79;
      v78->__r_.__value_.__l.__size_ = 0;
      v78->__r_.__value_.__r.__words[2] = 0;
      v78->__r_.__value_.__r.__words[0] = 0;
      char v80 = ctu::fs::rename();
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
          goto LABEL_178;
        }
LABEL_166:
        if (v80) {
          goto LABEL_167;
        }
LABEL_179:
        uint64_t v86 = GetOsLogContext()[1];
        if (!os_log_type_enabled(v86, OS_LOG_TYPE_ERROR)) {
          goto LABEL_206;
        }
        int v87 = *(char *)(a1 + 23);
        if (v87 >= 0) {
          size_t v88 = *(unsigned __int8 *)(a1 + 23);
        }
        else {
          size_t v88 = *(void *)(a1 + 8);
        }
        unint64_t v89 = v88 + 1;
        memset(&buf, 170, sizeof(buf));
        if (v88 + 1 > 0x7FFFFFFFFFFFFFF7) {
          std::string::__throw_length_error[abi:ne180100]();
        }
        if (v89 >= 0x17)
        {
          uint64_t v100 = (v89 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v89 | 7) != 0x17) {
            uint64_t v100 = v89 | 7;
          }
          uint64_t v101 = v100 + 1;
          int v90 = (std::string *)operator new(v100 + 1);
          buf.__r_.__value_.__l.__size_ = v88 + 1;
          buf.__r_.__value_.__r.__words[2] = v101 | 0x8000000000000000;
          buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v90;
        }
        else
        {
          memset(&buf, 0, sizeof(buf));
          int v90 = &buf;
          *((unsigned char *)&buf.__r_.__value_.__s + 23) = v88 + 1;
          if (!v88) {
            goto LABEL_217;
          }
        }
        if (v87 >= 0) {
          uint64_t v102 = (const void *)a1;
        }
        else {
          uint64_t v102 = *(const void **)a1;
        }
        memmove(v90, v102, v88);
LABEL_217:
        *(_WORD *)((char *)&v90->__r_.__value_.__l.__data_ + v88) = 47;
        if ((v139.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v103 = &v139;
        }
        else {
          uint64_t v103 = (std::string *)v139.__r_.__value_.__r.__words[0];
        }
        if ((v139.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v104 = HIBYTE(v139.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v104 = v139.__r_.__value_.__l.__size_;
        }
        uint64_t v105 = std::string::append(&buf, (const std::string::value_type *)v103, v104);
        long long v106 = *(_OWORD *)&v105->__r_.__value_.__l.__data_;
        __p.__r_.__value_.__r.__words[2] = v105->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v106;
        v105->__r_.__value_.__l.__size_ = 0;
        v105->__r_.__value_.__r.__words[2] = 0;
        v105->__r_.__value_.__r.__words[0] = 0;
        int v107 = &__p;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          int v107 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        std::vector<std::string>::pointer v108 = &v124;
        if ((v124.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::vector<std::string>::pointer v108 = (std::string *)v124.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)uint64_t v134 = 136315394;
        int v135 = v107;
        __int16 v136 = 2080;
        long long v137 = v108;
        _os_log_error_impl(&dword_26368A000, v86, OS_LOG_TYPE_ERROR, "Failed to move %s -> %s", v134, 0x16u);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          goto LABEL_228;
        }
LABEL_205:
        if ((SHIBYTE(buf.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_206;
        }
LABEL_229:
        operator delete(buf.__r_.__value_.__l.__data_);
        if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0) {
          goto LABEL_117;
        }
LABEL_207:
        if (SHIBYTE(v139.__r_.__value_.__r.__words[2]) < 0) {
          goto LABEL_208;
        }
LABEL_118:
        v11 += 24;
        if (v11 == v113) {
          break;
        }
      }
      else
      {
        if ((SHIBYTE(buf.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_166;
        }
LABEL_178:
        operator delete(buf.__r_.__value_.__l.__data_);
        if ((v80 & 1) == 0) {
          goto LABEL_179;
        }
LABEL_167:
        uint64_t v81 = GetOsLogContext()[1];
        if (!os_log_type_enabled(v81, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_206;
        }
        int v82 = *(char *)(a1 + 23);
        if (v82 >= 0) {
          size_t v83 = *(unsigned __int8 *)(a1 + 23);
        }
        else {
          size_t v83 = *(void *)(a1 + 8);
        }
        unint64_t v84 = v83 + 1;
        memset(&buf, 170, sizeof(buf));
        if (v83 + 1 > 0x7FFFFFFFFFFFFFF7) {
          std::string::__throw_length_error[abi:ne180100]();
        }
        if (v84 >= 0x17)
        {
          uint64_t v91 = (v84 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v84 | 7) != 0x17) {
            uint64_t v91 = v84 | 7;
          }
          uint64_t v92 = v91 + 1;
          uint64_t v85 = (std::string *)operator new(v91 + 1);
          buf.__r_.__value_.__l.__size_ = v83 + 1;
          buf.__r_.__value_.__r.__words[2] = v92 | 0x8000000000000000;
          buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v85;
        }
        else
        {
          memset(&buf, 0, sizeof(buf));
          uint64_t v85 = &buf;
          *((unsigned char *)&buf.__r_.__value_.__s + 23) = v83 + 1;
          if (!v83) {
            goto LABEL_194;
          }
        }
        if (v82 >= 0) {
          uint64_t v93 = (const void *)a1;
        }
        else {
          uint64_t v93 = *(const void **)a1;
        }
        memmove(v85, v93, v83);
LABEL_194:
        *(_WORD *)((char *)&v85->__r_.__value_.__l.__data_ + v83) = 47;
        if ((v139.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string v94 = &v139;
        }
        else {
          std::string v94 = (std::string *)v139.__r_.__value_.__r.__words[0];
        }
        if ((v139.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v95 = HIBYTE(v139.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v95 = v139.__r_.__value_.__l.__size_;
        }
        std::string v96 = std::string::append(&buf, (const std::string::value_type *)v94, v95);
        long long v97 = *(_OWORD *)&v96->__r_.__value_.__l.__data_;
        __p.__r_.__value_.__r.__words[2] = v96->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v97;
        v96->__r_.__value_.__l.__size_ = 0;
        v96->__r_.__value_.__r.__words[2] = 0;
        v96->__r_.__value_.__r.__words[0] = 0;
        v98 = &__p;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          v98 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        long long v99 = &v124;
        if ((v124.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          long long v99 = (std::string *)v124.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)uint64_t v134 = 136315394;
        int v135 = v98;
        __int16 v136 = 2080;
        long long v137 = v99;
        _os_log_impl(&dword_26368A000, v81, OS_LOG_TYPE_DEFAULT, "Moved %s -> %s", v134, 0x16u);
        if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_205;
        }
LABEL_228:
        operator delete(__p.__r_.__value_.__l.__data_);
        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
          goto LABEL_229;
        }
LABEL_206:
        if ((SHIBYTE(v124.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_207;
        }
LABEL_117:
        operator delete(v124.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v139.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_118;
        }
LABEL_208:
        operator delete(v139.__r_.__value_.__l.__data_);
        v11 += 24;
        if (v11 == v113) {
          break;
        }
      }
    }
  }
LABEL_105:
  if (a3) {
    ctu::fs::remove_dir();
  }
  int64_t v54 = (void **)v131;
  if (v131)
  {
    std::string v55 = v132;
    std::string v56 = v131;
    if (v132 != (void **)v131)
    {
      do
      {
        if (*((char *)v55 - 1) < 0) {
          operator delete(*(v55 - 3));
        }
        v55 -= 3;
      }
      while (v55 != v54);
      std::string v56 = v131;
    }
    BOOL v132 = v54;
    operator delete(v56);
  }
}

void sub_2636C4118(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,std::locale a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,uint64_t a51,void *__p,uint64_t a53,int a54,__int16 a55,char a56,char a57,std::locale a58)
{
  if (a57 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v58 - 105) < 0) {
    operator delete(*(void **)(v58 - 128));
  }
  std::vector<std::string>::~vector[abi:ne180100]((void **)(v58 - 216));
  _Unwind_Resume(a1);
}

void util::generateSHA256(const char *a1@<X0>, void *a2@<X1>, unsigned int a3@<W2>, unsigned __int8 **a4@<X8>)
{
  uint64_t v38 = *MEMORY[0x263EF8340];
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  uint64_t v8 = (unsigned __int8 *)operator new(0x20uLL);
  a4[1] = v8 + 32;
  a4[2] = v8 + 32;
  *(_OWORD *)uint64_t v8 = 0u;
  *((_OWORD *)v8 + 1) = 0u;
  *a4 = v8;
  if (!a2)
  {
    size_t v14 = GetOsLogContext()[1];
    if (!os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
      return;
    }
    LOWORD(c.count[0]) = 0;
    unint64_t v15 = "dataIn Buffer is NULL";
    p_CC_SHA256_CTX c = (uint8_t *)&c;
    uint64_t v17 = v14;
    uint32_t v18 = 2;
    goto LABEL_16;
  }
  *(void *)&c.wbuf[14] = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v9 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v9 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&c.wbuf[6] = v9;
  *(_OWORD *)&c.wbuf[10] = v9;
  *(_OWORD *)&c.hash[6] = v9;
  *(_OWORD *)&c.wbuf[2] = v9;
  *(_OWORD *)c.size_t count = v9;
  *(_OWORD *)&c.hash[2] = v9;
  if (!ctu::fs::get_file_size()) {
    return;
  }
  CC_SHA256_Init(&c);
  unint64_t v10 = a1;
  if (a1[23] < 0) {
    unint64_t v10 = *(const char **)a1;
  }
  int v11 = open(v10, 0);
  if (v11 < 1)
  {
    int64_t v19 = GetOsLogContext()[1];
    if (!os_log_type_enabled(v19, OS_LOG_TYPE_ERROR)) {
      return;
    }
    if (a1[23] < 0) {
      a1 = *(const char **)a1;
    }
    uint64_t v20 = __error();
    size_t v21 = strerror(*v20);
    int v22 = *__error();
    int v23 = *__error();
    *(_DWORD *)std::string buf = 136315906;
    size_t v31 = a1;
    __int16 v32 = 2080;
    std::string::size_type v33 = v21;
    __int16 v34 = 1024;
    int v35 = v22;
    __int16 v36 = 1024;
    int v37 = v23;
    unint64_t v15 = "Failed to open: %s : %s (%d, 0x%x)";
    p_CC_SHA256_CTX c = buf;
    uint64_t v17 = v19;
    uint32_t v18 = 34;
LABEL_16:
    _os_log_error_impl(&dword_26368A000, v17, OS_LOG_TYPE_ERROR, v15, p_c, v18);
    return;
  }
  unint64_t v12 = 0;
  while (1)
  {
    ssize_t v13 = read(v11, a2, a3);
    if (v13 == -1) {
      break;
    }
    CC_SHA256_Update(&c, a2, v13);
    v12 += v13;
    if (v12 >= 0xAAAAAAAAAAAAAAAALL) {
      goto LABEL_18;
    }
  }
  int64_t v24 = GetOsLogContext()[1];
  if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
  {
    if (a1[23] < 0) {
      a1 = *(const char **)a1;
    }
    int v25 = __error();
    size_t v26 = strerror(*v25);
    int v27 = *__error();
    int v28 = *__error();
    *(_DWORD *)std::string buf = 136315906;
    size_t v31 = a1;
    __int16 v32 = 2080;
    std::string::size_type v33 = v26;
    __int16 v34 = 1024;
    int v35 = v27;
    __int16 v36 = 1024;
    int v37 = v28;
    _os_log_error_impl(&dword_26368A000, v24, OS_LOG_TYPE_ERROR, "Failed to read: %s : %s (%d,0x%x)", buf, 0x22u);
  }
LABEL_18:
  CC_SHA256_Final(v8, &c);
  close(v11);
}

void sub_2636C45F4(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  operator delete(v2);
  _Unwind_Resume(a1);
}

void sub_2636C460C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  operator delete(v2);
  _Unwind_Resume(a1);
}

void sub_2636C4624(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  operator delete(v2);
  _Unwind_Resume(a1);
}

void sub_2636C463C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  operator delete(v2);
  _Unwind_Resume(a1);
}

void sub_2636C4654(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  operator delete(v2);
  _Unwind_Resume(a1);
}

void sub_2636C466C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  operator delete(v2);
  _Unwind_Resume(a1);
}

void sub_2636C4684(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  operator delete(v2);
  _Unwind_Resume(a1);
}

void sub_2636C469C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  operator delete(v2);
  _Unwind_Resume(a1);
}

BOOL util::markPurgeableFile(uint64_t *a1)
{
  uint64_t v1 = a1;
  uint64_t v22 = *MEMORY[0x263EF8340];
  uint64_t v15 = 65541;
  if ((*((char *)a1 + 23) & 0x80000000) == 0)
  {
    int v2 = open((const char *)a1, 0);
    if ((v2 & 0x80000000) == 0) {
      goto LABEL_3;
    }
LABEL_9:
    unint64_t v12 = GetOsLogContext()[1];
    BOOL result = os_log_type_enabled(v12, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    if (*((char *)v1 + 23) < 0) {
      uint64_t v1 = (uint64_t *)*v1;
    }
    ssize_t v13 = __error();
    size_t v14 = strerror(*v13);
    *(_DWORD *)std::string buf = 136315394;
    uint64_t v17 = v1;
    __int16 v18 = 2080;
    *(void *)int64_t v19 = v14;
    long long v9 = "Failed to open %s : %s";
    unint64_t v10 = v12;
    uint32_t v11 = 22;
    goto LABEL_13;
  }
  int v2 = open((const char *)*a1, 0);
  if (v2 < 0) {
    goto LABEL_9;
  }
LABEL_3:
  int v3 = v2;
  int v4 = ffsctl(v2, 0xC0084A44uLL, &v15, 0);
  close(v3);
  if (v4)
  {
    std::string::size_type v5 = GetOsLogContext()[1];
    BOOL result = os_log_type_enabled(v5, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    if (*((char *)v1 + 23) < 0) {
      uint64_t v1 = (uint64_t *)*v1;
    }
    unsigned int v7 = __error();
    uint64_t v8 = strerror(*v7);
    *(_DWORD *)std::string buf = 136315906;
    uint64_t v17 = v1;
    __int16 v18 = 1024;
    *(_DWORD *)int64_t v19 = v4;
    *(_WORD *)&void v19[4] = 2080;
    *(void *)&v19[6] = v8;
    __int16 v20 = 2048;
    uint64_t v21 = v15;
    long long v9 = "Failed to mark %s as purgeable %d (%s) (flags 0x%llx)";
    unint64_t v10 = v5;
    uint32_t v11 = 38;
LABEL_13:
    _os_log_error_impl(&dword_26368A000, v10, OS_LOG_TYPE_ERROR, v9, buf, v11);
    return 0;
  }
  return 1;
}

BOOL util::checkLogFileAge(uint64_t a1, int64_t a2, uint64_t a3)
{
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v95 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v97 = 0xAAAAAAAAAAAAAA00;
  long long v99 = v4;
  uint64_t v96 = 0;
  long long v98 = 0uLL;
  LOBYTE(v99) = 0;
  BYTE8(v99) = 0;
  uint64_t v100 = 0;
  memset(v94, 0, sizeof(v94));
  uint64_t v5 = *(unsigned __int8 *)(a1 + 23);
  if ((v5 & 0x80u) == 0) {
    uint64_t v6 = (std::sub_match<const char *> *)a1;
  }
  else {
    uint64_t v6 = *(std::sub_match<const char *> **)a1;
  }
  if ((v5 & 0x80u) != 0) {
    uint64_t v5 = *(void *)(a1 + 8);
  }
  unsigned int v7 = (std::sub_match<std::__wrap_iter<const char *>> *)((char *)v6 + v5);
  unint64_t v103 = 0xAAAAAAAAAAAAAA00;
  __p.tm_gmtoff = 0xAAAAAAAAAAAAAAAALL;
  long long v106 = v4;
  __p.tm_zone = 0;
  uint64_t v102 = 0;
  uint64_t v104 = 0;
  uint64_t v105 = 0;
  LOBYTE(v106) = 0;
  BYTE8(v106) = 0;
  uint64_t v107 = 0;
  memset(&__p, 0, 41);
  int v8 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>(a3, v6, (std::sub_match<const char *> *)((char *)v6 + v5), (std::vector<std::csub_match> *)&__p, 4160);
  std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>((std::vector<std::ssub_match> *)v94, (uint64_t)v6, v7, (uint64_t *)&__p.tm_sec, 0);
  if (*(void *)&__p.tm_sec)
  {
    *(void *)&__p.tm_hour = *(void *)&__p.tm_sec;
    operator delete(*(void **)&__p.tm_sec);
  }
  if ((_BYTE)v99) {
    int v9 = 0;
  }
  else {
    int v9 = v8;
  }
  if (v9 != 1)
  {
    BOOL v21 = 0;
    uint64_t v22 = *(void **)v94;
    if (!*(void *)v94) {
      return v21;
    }
LABEL_23:
    *(void *)&v94[8] = v22;
    operator delete(v22);
    return v21;
  }
  memset(&__p, 0, sizeof(__p));
  uint64_t v10 = *(void *)v94;
  if (!*(unsigned char *)(*(void *)v94 + 40))
  {
    memset(&v93, 0, sizeof(v93));
    goto LABEL_33;
  }
  uint64_t v12 = *(void *)(*(void *)v94 + 24);
  uint32_t v11 = *(char **)(*(void *)v94 + 32);
  unint64_t v13 = (unint64_t)&v11[-v12];
  if ((unint64_t)&v11[-v12] > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v13 <= 0x16)
  {
    *((unsigned char *)&v93.__r_.__value_.__s + 23) = (_BYTE)v11 - v12;
    size_t v14 = &v93;
    if ((char *)v12 != v11) {
      goto LABEL_16;
    }
LABEL_29:
    *size_t v14 = 0;
    goto LABEL_33;
  }
  uint64_t v24 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v13 | 7) != 0x17) {
    uint64_t v24 = v13 | 7;
  }
  uint64_t v25 = v24 + 1;
  size_t v14 = operator new(v24 + 1);
  v93.__r_.__value_.__l.__size_ = (std::string::size_type)&v11[-v12];
  v93.__r_.__value_.__r.__words[2] = v25 | 0x8000000000000000;
  v93.__r_.__value_.__r.__words[0] = (std::string::size_type)v14;
  if ((char *)v12 == v11) {
    goto LABEL_29;
  }
LABEL_16:
  if (v13 < 0x20 || (unint64_t)&v14[-v12] < 0x20)
  {
    uint64_t v15 = v14;
    uint64_t v16 = (char *)v12;
  }
  else
  {
    uint64_t v15 = &v14[v13 & 0xFFFFFFFFFFFFFFE0];
    uint64_t v16 = (char *)(v12 + (v13 & 0xFFFFFFFFFFFFFFE0));
    uint64_t v17 = (long long *)(v12 + 16);
    __int16 v18 = v14 + 16;
    unint64_t v19 = v13 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      long long v20 = *v17;
      *(v18 - 1) = *(v17 - 1);
      _OWORD *v18 = v20;
      v17 += 2;
      v18 += 2;
      v19 -= 32;
    }
    while (v19);
    if (v13 == (v13 & 0xFFFFFFFFFFFFFFE0)) {
      goto LABEL_32;
    }
  }
  do
  {
    char v26 = *v16++;
    *v15++ = v26;
  }
  while (v16 != v11);
LABEL_32:
  unsigned char *v15 = 0;
LABEL_33:
  util::convert<int>(&v93, &__p.tm_year, 10);
  if ((SHIBYTE(v93.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    __p.tm_year -= 1900;
    if (*(unsigned char *)(v10 + 64)) {
      goto LABEL_35;
    }
LABEL_45:
    memset(&v93, 0, sizeof(v93));
    goto LABEL_53;
  }
  operator delete(v93.__r_.__value_.__l.__data_);
  __p.tm_year -= 1900;
  if (!*(unsigned char *)(v10 + 64)) {
    goto LABEL_45;
  }
LABEL_35:
  uint64_t v28 = *(void *)(v10 + 48);
  int v27 = *(char **)(v10 + 56);
  unint64_t v29 = (unint64_t)&v27[-v28];
  if ((unint64_t)&v27[-v28] > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v29 <= 0x16)
  {
    *((unsigned char *)&v93.__r_.__value_.__s + 23) = (_BYTE)v27 - v28;
    int v30 = &v93;
    if ((char *)v28 != v27) {
      goto LABEL_38;
    }
LABEL_49:
    *int v30 = 0;
    goto LABEL_53;
  }
  uint64_t v37 = (v29 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v29 | 7) != 0x17) {
    uint64_t v37 = v29 | 7;
  }
  uint64_t v38 = v37 + 1;
  int v30 = operator new(v37 + 1);
  v93.__r_.__value_.__l.__size_ = (std::string::size_type)&v27[-v28];
  v93.__r_.__value_.__r.__words[2] = v38 | 0x8000000000000000;
  v93.__r_.__value_.__r.__words[0] = (std::string::size_type)v30;
  if ((char *)v28 == v27) {
    goto LABEL_49;
  }
LABEL_38:
  if (v29 < 0x20 || (unint64_t)&v30[-v28] < 0x20)
  {
    size_t v31 = v30;
    __int16 v32 = (char *)v28;
  }
  else
  {
    size_t v31 = &v30[v29 & 0xFFFFFFFFFFFFFFE0];
    __int16 v32 = (char *)(v28 + (v29 & 0xFFFFFFFFFFFFFFE0));
    std::string::size_type v33 = (long long *)(v28 + 16);
    __int16 v34 = v30 + 16;
    unint64_t v35 = v29 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      long long v36 = *v33;
      *(v34 - 1) = *(v33 - 1);
      *__int16 v34 = v36;
      v33 += 2;
      v34 += 2;
      v35 -= 32;
    }
    while (v35);
    if (v29 == (v29 & 0xFFFFFFFFFFFFFFE0)) {
      goto LABEL_52;
    }
  }
  do
  {
    char v39 = *v32++;
    *v31++ = v39;
  }
  while (v32 != v27);
LABEL_52:
  *size_t v31 = 0;
LABEL_53:
  util::convert<int>(&v93, &__p.tm_mon, 10);
  if ((SHIBYTE(v93.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    --__p.tm_mon;
    if (*(unsigned char *)(v10 + 88)) {
      goto LABEL_55;
    }
LABEL_65:
    memset(&v93, 0, sizeof(v93));
    goto LABEL_73;
  }
  operator delete(v93.__r_.__value_.__l.__data_);
  --__p.tm_mon;
  if (!*(unsigned char *)(v10 + 88)) {
    goto LABEL_65;
  }
LABEL_55:
  uint64_t v41 = *(void *)(v10 + 72);
  long long v40 = *(char **)(v10 + 80);
  unint64_t v42 = (unint64_t)&v40[-v41];
  if ((unint64_t)&v40[-v41] > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v42 <= 0x16)
  {
    *((unsigned char *)&v93.__r_.__value_.__s + 23) = (_BYTE)v40 - v41;
    int64_t v43 = &v93;
    if ((char *)v41 != v40) {
      goto LABEL_58;
    }
LABEL_69:
    *int64_t v43 = 0;
    goto LABEL_73;
  }
  uint64_t v50 = (v42 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v42 | 7) != 0x17) {
    uint64_t v50 = v42 | 7;
  }
  uint64_t v51 = v50 + 1;
  int64_t v43 = operator new(v50 + 1);
  v93.__r_.__value_.__l.__size_ = (std::string::size_type)&v40[-v41];
  v93.__r_.__value_.__r.__words[2] = v51 | 0x8000000000000000;
  v93.__r_.__value_.__r.__words[0] = (std::string::size_type)v43;
  if ((char *)v41 == v40) {
    goto LABEL_69;
  }
LABEL_58:
  if (v42 < 0x20 || (unint64_t)&v43[-v41] < 0x20)
  {
    unint64_t v44 = v43;
    uint64_t v45 = (char *)v41;
  }
  else
  {
    unint64_t v44 = &v43[v42 & 0xFFFFFFFFFFFFFFE0];
    uint64_t v45 = (char *)(v41 + (v42 & 0xFFFFFFFFFFFFFFE0));
    uint64_t v46 = (long long *)(v41 + 16);
    int v47 = v43 + 16;
    unint64_t v48 = v42 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      long long v49 = *v46;
      *(v47 - 1) = *(v46 - 1);
      *int v47 = v49;
      v46 += 2;
      v47 += 2;
      v48 -= 32;
    }
    while (v48);
    if (v42 == (v42 & 0xFFFFFFFFFFFFFFE0)) {
      goto LABEL_72;
    }
  }
  do
  {
    char v52 = *v45++;
    *v44++ = v52;
  }
  while (v45 != v40);
LABEL_72:
  *unint64_t v44 = 0;
LABEL_73:
  util::convert<int>(&v93, (_DWORD *)((unint64_t)&__p | 0xC), 10);
  if ((SHIBYTE(v93.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (*(unsigned char *)(v10 + 112)) {
      goto LABEL_75;
    }
LABEL_85:
    memset(&v93, 0, sizeof(v93));
    goto LABEL_93;
  }
  operator delete(v93.__r_.__value_.__l.__data_);
  if (!*(unsigned char *)(v10 + 112)) {
    goto LABEL_85;
  }
LABEL_75:
  uint64_t v54 = *(void *)(v10 + 96);
  dispatch_object_t v53 = *(char **)(v10 + 104);
  unint64_t v55 = (unint64_t)&v53[-v54];
  if ((unint64_t)&v53[-v54] > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v55 <= 0x16)
  {
    *((unsigned char *)&v93.__r_.__value_.__s + 23) = (_BYTE)v53 - v54;
    std::string v56 = &v93;
    if ((char *)v54 != v53) {
      goto LABEL_78;
    }
LABEL_89:
    unsigned char *v56 = 0;
    goto LABEL_93;
  }
  uint64_t v63 = (v55 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v55 | 7) != 0x17) {
    uint64_t v63 = v55 | 7;
  }
  uint64_t v64 = v63 + 1;
  std::string v56 = operator new(v63 + 1);
  v93.__r_.__value_.__l.__size_ = (std::string::size_type)&v53[-v54];
  v93.__r_.__value_.__r.__words[2] = v64 | 0x8000000000000000;
  v93.__r_.__value_.__r.__words[0] = (std::string::size_type)v56;
  if ((char *)v54 == v53) {
    goto LABEL_89;
  }
LABEL_78:
  if (v55 < 0x20 || (unint64_t)&v56[-v54] < 0x20)
  {
    long long v57 = v56;
    uint64_t v58 = (char *)v54;
  }
  else
  {
    long long v57 = &v56[v55 & 0xFFFFFFFFFFFFFFE0];
    uint64_t v58 = (char *)(v54 + (v55 & 0xFFFFFFFFFFFFFFE0));
    size_t v59 = (long long *)(v54 + 16);
    unint64_t v60 = v56 + 16;
    unint64_t v61 = v55 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      long long v62 = *v59;
      *(v60 - 1) = *(v59 - 1);
      *unint64_t v60 = v62;
      v59 += 2;
      v60 += 2;
      v61 -= 32;
    }
    while (v61);
    if (v55 == (v55 & 0xFFFFFFFFFFFFFFE0)) {
      goto LABEL_92;
    }
  }
  do
  {
    char v65 = *v58++;
    *v57++ = v65;
  }
  while (v58 != v53);
LABEL_92:
  *long long v57 = 0;
LABEL_93:
  util::convert<int>(&v93, &__p.tm_hour, 10);
  if ((SHIBYTE(v93.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (*(unsigned char *)(v10 + 136)) {
      goto LABEL_95;
    }
LABEL_105:
    memset(&v93, 0, sizeof(v93));
    goto LABEL_113;
  }
  operator delete(v93.__r_.__value_.__l.__data_);
  if (!*(unsigned char *)(v10 + 136)) {
    goto LABEL_105;
  }
LABEL_95:
  uint64_t v67 = *(void *)(v10 + 120);
  std::string::size_type v66 = *(char **)(v10 + 128);
  unint64_t v68 = (unint64_t)&v66[-v67];
  if ((unint64_t)&v66[-v67] > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v68 <= 0x16)
  {
    *((unsigned char *)&v93.__r_.__value_.__s + 23) = (_BYTE)v66 - v67;
    int v69 = &v93;
    if ((char *)v67 != v66) {
      goto LABEL_98;
    }
LABEL_109:
    *int v69 = 0;
    goto LABEL_113;
  }
  uint64_t v76 = (v68 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v68 | 7) != 0x17) {
    uint64_t v76 = v68 | 7;
  }
  uint64_t v77 = v76 + 1;
  int v69 = operator new(v76 + 1);
  v93.__r_.__value_.__l.__size_ = (std::string::size_type)&v66[-v67];
  v93.__r_.__value_.__r.__words[2] = v77 | 0x8000000000000000;
  v93.__r_.__value_.__r.__words[0] = (std::string::size_type)v69;
  if ((char *)v67 == v66) {
    goto LABEL_109;
  }
LABEL_98:
  if (v68 < 0x20 || (unint64_t)&v69[-v67] < 0x20)
  {
    size_t v70 = v69;
    unint64_t v71 = (char *)v67;
  }
  else
  {
    size_t v70 = &v69[v68 & 0xFFFFFFFFFFFFFFE0];
    unint64_t v71 = (char *)(v67 + (v68 & 0xFFFFFFFFFFFFFFE0));
    unint64_t v72 = (long long *)(v67 + 16);
    uint64_t v73 = v69 + 16;
    unint64_t v74 = v68 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      long long v75 = *v72;
      *(v73 - 1) = *(v72 - 1);
      _OWORD *v73 = v75;
      v72 += 2;
      v73 += 2;
      v74 -= 32;
    }
    while (v74);
    if (v68 == (v68 & 0xFFFFFFFFFFFFFFE0)) {
      goto LABEL_112;
    }
  }
  do
  {
    char v78 = *v71++;
    *v70++ = v78;
  }
  while (v71 != v66);
LABEL_112:
  unsigned char *v70 = 0;
LABEL_113:
  util::convert<int>(&v93, &__p.tm_min, 10);
  if ((SHIBYTE(v93.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (*(unsigned char *)(v10 + 160)) {
      goto LABEL_115;
    }
LABEL_125:
    memset(&v93, 0, sizeof(v93));
    goto LABEL_133;
  }
  operator delete(v93.__r_.__value_.__l.__data_);
  if (!*(unsigned char *)(v10 + 160)) {
    goto LABEL_125;
  }
LABEL_115:
  uint64_t v80 = *(void *)(v10 + 144);
  long long v79 = *(char **)(v10 + 152);
  unint64_t v81 = (unint64_t)&v79[-v80];
  if ((unint64_t)&v79[-v80] > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v81 <= 0x16)
  {
    *((unsigned char *)&v93.__r_.__value_.__s + 23) = (_BYTE)v79 - v80;
    int v82 = &v93;
    if ((char *)v80 != v79) {
      goto LABEL_118;
    }
LABEL_129:
    *int v82 = 0;
    goto LABEL_133;
  }
  uint64_t v89 = (v81 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v81 | 7) != 0x17) {
    uint64_t v89 = v81 | 7;
  }
  uint64_t v90 = v89 + 1;
  int v82 = operator new(v89 + 1);
  v93.__r_.__value_.__l.__size_ = (std::string::size_type)&v79[-v80];
  v93.__r_.__value_.__r.__words[2] = v90 | 0x8000000000000000;
  v93.__r_.__value_.__r.__words[0] = (std::string::size_type)v82;
  if ((char *)v80 == v79) {
    goto LABEL_129;
  }
LABEL_118:
  if (v81 < 0x20 || (unint64_t)&v82[-v80] < 0x20)
  {
    size_t v83 = v82;
    unint64_t v84 = (char *)v80;
  }
  else
  {
    size_t v83 = &v82[v81 & 0xFFFFFFFFFFFFFFE0];
    unint64_t v84 = (char *)(v80 + (v81 & 0xFFFFFFFFFFFFFFE0));
    uint64_t v85 = (long long *)(v80 + 16);
    uint64_t v86 = v82 + 16;
    unint64_t v87 = v81 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      long long v88 = *v85;
      *(v86 - 1) = *(v85 - 1);
      *uint64_t v86 = v88;
      v85 += 2;
      v86 += 2;
      v87 -= 32;
    }
    while (v87);
    if (v81 == (v81 & 0xFFFFFFFFFFFFFFE0)) {
      goto LABEL_132;
    }
  }
  do
  {
    char v91 = *v84++;
    *v83++ = v91;
  }
  while (v84 != v79);
LABEL_132:
  unsigned char *v83 = 0;
LABEL_133:
  util::convert<int>(&v93, &__p, 10);
  if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v93.__r_.__value_.__l.__data_);
  }
  __p.tm_isdst = -1;
  time_t v92 = mktime(&__p);
  v93.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
  v93.__r_.__value_.__l.__size_ = 0xAAAAAAAAAAAAAAAALL;
  gettimeofday((timeval *)&v93, 0);
  BOOL v21 = (int64_t)(v93.__r_.__value_.__r.__words[0] - v92) > a2;
  uint64_t v22 = *(void **)v94;
  if (*(void *)v94) {
    goto LABEL_23;
  }
  return v21;
}

void sub_2636C50EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t util::convert<int>(const std::string *a1, _DWORD *a2, int a3)
{
  if ((SHIBYTE(a1->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    LODWORD(v6) = strcasecmp((const char *)a1, "false");
    if (!v6) {
      goto LABEL_29;
    }
    LODWORD(v6) = strcasecmp((const char *)a1, "off");
    if (!v6) {
      goto LABEL_29;
    }
    LODWORD(v6) = strcasecmp((const char *)a1, "no");
    if (!v6) {
      goto LABEL_29;
    }
    if (strcasecmp((const char *)a1, "true")
      && strcasecmp((const char *)a1, "on")
      && strcasecmp((const char *)a1, "yes")
      && strcasecmp((const char *)a1, "full")
      && strcasecmp((const char *)a1, "streaming"))
    {
      unsigned int v7 = (const char *)a1;
      if (!strcasecmp((const char *)a1, "lite")) {
        goto LABEL_30;
      }
      goto LABEL_21;
    }
LABEL_28:
    LODWORD(v6) = 1;
    goto LABEL_29;
  }
  unsigned int v7 = (const char *)a1->__r_.__value_.__r.__words[0];
  LODWORD(v6) = strcasecmp(a1->__r_.__value_.__l.__data_, "false");
  if (!v6) {
    goto LABEL_29;
  }
  LODWORD(v6) = strcasecmp(v7, "off");
  if (!v6) {
    goto LABEL_29;
  }
  LODWORD(v6) = strcasecmp(v7, "no");
  if (!v6) {
    goto LABEL_29;
  }
  if (!strcasecmp(v7, "true")
    || !strcasecmp(v7, "on")
    || !strcasecmp(v7, "yes")
    || !strcasecmp(v7, "full")
    || !strcasecmp(v7, "streaming"))
  {
    goto LABEL_28;
  }
  if (!strcasecmp(v7, "lite"))
  {
LABEL_30:
    LODWORD(v6) = 2;
    goto LABEL_29;
  }
LABEL_21:
  if (!strcasecmp(v7, "background")) {
    goto LABEL_30;
  }
  size_t __idx = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v6 = std::stol(a1, &__idx, a3);
  std::string::size_type size = HIBYTE(a1->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) != 0) {
    std::string::size_type size = a1->__r_.__value_.__l.__size_;
  }
  if (__idx != size || v6 < (uint64_t)0xFFFFFFFF80000000 || v6 > 0x7FFFFFFF) {
    return 0;
  }
LABEL_29:
  *a2 = v6;
  return 1;
}

uint64_t sub_2636C53A4(void *a1)
{
  return 0;
}

void util::findBasebandLogInfoFile(const void **a1@<X0>, long long **a2@<X1>, void *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  uint64_t v46 = a3;
  a3[2] = 0;
  int v3 = *a2;
  int v47 = a2[1];
  if (v3 == v47) {
    return;
  }
  while (1)
  {
    memset(&v49, 170, sizeof(v49));
    if (*((char *)v3 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v49, *(const std::string::value_type **)v3, *((void *)v3 + 1));
    }
    else
    {
      long long v5 = *v3;
      v49.__r_.__value_.__r.__words[2] = *((void *)v3 + 2);
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v5;
    }
    int v6 = *((char *)a1 + 23);
    if (v6 >= 0) {
      size_t v7 = *((unsigned __int8 *)a1 + 23);
    }
    else {
      size_t v7 = (size_t)a1[1];
    }
    int v8 = SHIBYTE(v49.__r_.__value_.__r.__words[2]);
    if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t size = HIBYTE(v49.__r_.__value_.__r.__words[2]);
    }
    else {
      size_t size = v49.__r_.__value_.__l.__size_;
    }
    unint64_t v10 = size + v7;
    memset(__dst, 170, sizeof(__dst));
    if (size + v7 > 0x7FFFFFFFFFFFFFF7) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    if (v10 <= 0x16)
    {
      memset(__dst, 0, sizeof(__dst));
      uint32_t v11 = __dst;
      HIBYTE(__dst[2]) = size + v7;
      if (!v7) {
        goto LABEL_20;
      }
LABEL_16:
      if (v6 >= 0) {
        uint64_t v12 = a1;
      }
      else {
        uint64_t v12 = *a1;
      }
      memmove(v11, v12, v7);
      goto LABEL_20;
    }
    uint64_t v18 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v10 | 7) != 0x17) {
      uint64_t v18 = v10 | 7;
    }
    uint64_t v19 = v18 + 1;
    uint32_t v11 = (void **)operator new(v18 + 1);
    __dst[1] = (void *)(size + v7);
    __dst[2] = (void *)(v19 | 0x8000000000000000);
    __dst[0] = v11;
    if (v7) {
      goto LABEL_16;
    }
LABEL_20:
    unint64_t v13 = (char *)v11 + v7;
    if (size)
    {
      if (v8 >= 0) {
        size_t v14 = &v49;
      }
      else {
        size_t v14 = (std::string *)v49.__r_.__value_.__r.__words[0];
      }
      memmove(v13, v14, size);
    }
    v13[size] = 0;
    v15.tv_seCC_SHA256_CTX c = 0xAAAAAAAAAAAAAAAALL;
    v15.tv_nseCC_SHA256_CTX c = 0xAAAAAAAAAAAAAAAALL;
    *(timespec *)&v50.st_blksize_t size = v15;
    *(timespec *)v50.st_qspare = v15;
    v50.st_birthtimespeCC_SHA256_CTX c = v15;
    *(timespec *)&v50.st_size_t size = v15;
    v50.st_mtimespeCC_SHA256_CTX c = v15;
    v50.st_ctimespeCC_SHA256_CTX c = v15;
    *(timespec *)&v50.st_uid = v15;
    v50.st_atimespeCC_SHA256_CTX c = v15;
    *(timespec *)&v50.st_dev = v15;
    if (SHIBYTE(__dst[2]) >= 0) {
      uint64_t v16 = (const char *)__dst;
    }
    else {
      uint64_t v16 = (const char *)__dst[0];
    }
    if (stat(v16, &v50)
      || (SHIBYTE(__dst[2]) >= 0 ? (long long v20 = (const char *)__dst) : (long long v20 = (const char *)__dst[0]),
          BOOL v21 = opendir(v20),
          (uint64_t v22 = v21) == 0))
    {
      char v17 = HIBYTE(__dst[2]);
      goto LABEL_30;
    }
    int v23 = readdir(v21);
    closedir(v22);
    char v17 = HIBYTE(__dst[2]);
    if (v23) {
      break;
    }
LABEL_30:
    if (v17 < 0)
    {
      operator delete(__dst[0]);
      if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
LABEL_59:
      }
        operator delete(v49.__r_.__value_.__l.__data_);
    }
    else if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
    {
      goto LABEL_59;
    }
    int v3 = (long long *)((char *)v3 + 24);
    if (v3 == v47) {
      return;
    }
  }
  if ((HIBYTE(__dst[2]) & 0x80) == 0)
  {
    if (HIBYTE(__dst[2]) <= 4u) {
      goto LABEL_99;
    }
    uint64_t v24 = (_DWORD *)((char *)__dst + HIBYTE(__dst[2]) - 5);
    if (*v24 == 1885626669 && *((unsigned char *)__dst + HIBYTE(__dst[2]) - 1) == 108) {
      goto LABEL_79;
    }
    if (*v24 == 1935962413 && *((unsigned char *)__dst + HIBYTE(__dst[2]) - 1) == 115) {
      goto LABEL_79;
    }
    if (*v24 == 1634296877 && *((unsigned char *)__dst + HIBYTE(__dst[2]) - 1) == 103) {
      goto LABEL_79;
    }
    if (HIBYTE(__dst[2]) < 9u) {
      goto LABEL_99;
    }
    uint64_t v28 = __dst;
    unint64_t v29 = (void *)HIBYTE(__dst[2]);
    goto LABEL_74;
  }
  unint64_t v29 = __dst[1];
  if (__dst[1] < (void *)5) {
    goto LABEL_99;
  }
  uint64_t v28 = (void **)__dst[0];
  int v30 = (char *)__dst[1] + (unint64_t)__dst[0] - 5;
  if ((*v30 != 1885626669 || *((unsigned char *)__dst[1] + (unint64_t)__dst[0] - 1) != 108)
    && (*v30 != 1935962413 || *((unsigned char *)__dst[1] + (unint64_t)__dst[0] - 1) != 115)
    && (*v30 != 1634296877 || *((unsigned char *)__dst[1] + (unint64_t)__dst[0] - 1) != 103))
  {
    if (__dst[1] < (void *)9) {
LABEL_99:
    }
      std::string::__throw_out_of_range[abi:ne180100]();
LABEL_74:
    __int16 v34 = (char *)v28 + (void)v29;
    uint64_t v35 = *(void *)(v34 - 9);
    int v36 = *(v34 - 1);
    if (v35 == 0x636172742D62622DLL && v36 == 101) {
      goto LABEL_79;
    }
    goto LABEL_30;
  }
LABEL_79:
  int v38 = SHIBYTE(v49.__r_.__value_.__r.__words[2]);
  if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t v39 = HIBYTE(v49.__r_.__value_.__r.__words[2]);
  }
  else {
    size_t v39 = v49.__r_.__value_.__l.__size_;
  }
  unint64_t v40 = v39 + 9;
  memset(&v50, 170, 24);
  if (v39 + 9 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v40 >= 0x17)
  {
    uint64_t v42 = (v40 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v40 | 7) != 0x17) {
      uint64_t v42 = v40 | 7;
    }
    uint64_t v43 = v42 + 1;
    uint64_t v41 = operator new(v42 + 1);
    v50.st_ino = v39 + 9;
    *(void *)&v50.st_uid = v43 | 0x8000000000000000;
    *(void *)&v50.st_dev = v41;
  }
  else
  {
    memset(&v50, 0, 24);
    uint64_t v41 = &v50;
    HIBYTE(v50.st_gid) = v39 + 9;
    if (!v39) {
      goto LABEL_93;
    }
  }
  if (v38 >= 0) {
    unint64_t v44 = &v49;
  }
  else {
    unint64_t v44 = (std::string *)v49.__r_.__value_.__r.__words[0];
  }
  memmove(v41, v44, v39);
LABEL_93:
  strcpy((char *)v41 + v39, "/info.txt");
  uint64_t v45 = v46;
  *uint64_t v46 = *(_OWORD *)&v50.st_dev;
  *((void *)v45 + 2) = *(void *)&v50.st_uid;
  if ((v17 & 0x80) == 0)
  {
    if ((v38 & 0x80) == 0) {
      return;
    }
LABEL_97:
    operator delete(v49.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(__dst[0]);
  if ((*((unsigned char *)&v49.__r_.__value_.__s + 23) & 0x80) != 0) {
    goto LABEL_97;
  }
}

void sub_2636C5840(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17 < 0)
  {
    operator delete(__p);
    if ((a23 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a23 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a18);
  _Unwind_Resume(exception_object);
}

BOOL util::isDumpForSysdiagnose(uint64_t a1, uint64_t a2)
{
  __p[73] = *(void **)MEMORY[0x263EF8340];
  char v65 = 0;
  std::string::size_type v66 = 0;
  uint64_t v67 = 0;
  *(void *)&long long v2 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v2 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&v63[32] = v2;
  long long v64 = v2;
  *(_OWORD *)uint64_t v63 = v2;
  *(_OWORD *)&uint8_t v63[16] = v2;
  int v3 = *(char *)(a2 + 23);
  if (v3 >= 0) {
    size_t v4 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    size_t v4 = *(void *)(a2 + 8);
  }
  unint64_t v5 = v4 + 2;
  memset(&v62, 170, sizeof(v62));
  if (v4 + 2 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  int v6 = (const void **)a2;
  if (v5 >= 0x17)
  {
    uint64_t v9 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17) {
      uint64_t v9 = v5 | 7;
    }
    uint64_t v10 = v9 + 1;
    uint32_t v11 = operator new(v9 + 1);
    v62.__r_.__value_.__l.__size_ = v4 + 2;
    v62.__r_.__value_.__r.__words[2] = v10 | 0x8000000000000000;
    v62.__r_.__value_.__r.__words[0] = (std::string::size_type)v11;
    _WORD *v11 = 10798;
    int v8 = (std::string::value_type *)(v11 + 1);
  }
  else
  {
    v62.__r_.__value_.__r.__words[2] = 0;
    *((unsigned char *)&v62.__r_.__value_.__s + 23) = v4 + 2;
    int v8 = &v62.__r_.__value_.__s.__data_[2];
    *(_OWORD *)&v62.__r_.__value_.__l.__data_ = 0x2A2EuLL;
    if (!v4) {
      goto LABEL_15;
    }
  }
  if (v3 >= 0) {
    uint64_t v12 = v6;
  }
  else {
    uint64_t v12 = (const void **)*v6;
  }
  memmove(v8, v12, v4);
LABEL_15:
  v8[v4] = 0;
  unint64_t v13 = std::string::append(&v62, ".*", 2uLL);
  long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  __p[2] = (void *)v13->__r_.__value_.__r.__words[2];
  *(_OWORD *)tm __p = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]<std::char_traits<char>,std::allocator<char>>((uint64_t)v63, (uint64_t)__p, 0);
  if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v62.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_17;
    }
LABEL_20:
    operator delete(v62.__r_.__value_.__l.__data_);
    if ((*(char *)(a1 + 23) & 0x80000000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_21;
  }
  operator delete(__p[0]);
  if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_20;
  }
LABEL_17:
  if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
LABEL_18:
    std::string v61 = *(std::string *)a1;
    goto LABEL_22;
  }
LABEL_21:
  std::string::__init_copy_ctor_external(&v61, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
LABEL_22:
  std::locale::locale(&v55, (const std::locale *)v63);
  long long v56 = *(_OWORD *)&v63[8];
  long long v57 = *(_OWORD *)&v63[24];
  uint64_t v58 = *(void *)&v63[40];
  size_t v59 = (std::__shared_weak_count *)v64;
  if ((void)v64) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v64 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v60 = *((void *)&v64 + 1);
  BOOL FilteredFiles = support::fs::getFilteredFiles((const char *)&v61, (uint64_t)&v55, (uint64_t)&v65, 0);
  uint64_t v16 = v59;
  if (v59 && !atomic_fetch_add(&v59->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
    std::locale::~locale(&v55);
    if ((SHIBYTE(v61.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_27:
      if (FilteredFiles) {
        goto LABEL_28;
      }
LABEL_32:
      BOOL v17 = 0;
      goto LABEL_110;
    }
  }
  else
  {
    std::locale::~locale(&v55);
    if ((SHIBYTE(v61.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_27;
    }
  }
  operator delete(v61.__r_.__value_.__l.__data_);
  if (!FilteredFiles) {
    goto LABEL_32;
  }
LABEL_28:
  memset(&v62, 170, sizeof(v62));
  if (*(char *)(a1 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v54, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
  }
  else {
    std::string v54 = *(std::string *)a1;
  }
  uint64_t v51 = 0;
  char v52 = 0;
  uint64_t v53 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v51, (uint64_t)v65, (uint64_t)v66, 0xAAAAAAAAAAAAAAABLL * (((char *)v66 - (unsigned char *)v65) >> 3));
  util::findBasebandLogInfoFile((const void **)&v54.__r_.__value_.__l.__data_, (long long **)&v51, &v62);
  uint64_t v18 = (void **)v51;
  if (v51)
  {
    uint64_t v19 = v52;
    long long v20 = v51;
    if (v52 != v51)
    {
      do
      {
        if (*((char *)v19 - 1) < 0) {
          operator delete(*(v19 - 3));
        }
        v19 -= 3;
      }
      while (v19 != v18);
      long long v20 = v51;
    }
    char v52 = v18;
    operator delete(v20);
  }
  if ((SHIBYTE(v54.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    int v21 = SHIBYTE(v62.__r_.__value_.__r.__words[2]);
    if ((v62.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t size = HIBYTE(v62.__r_.__value_.__r.__words[2]);
    }
    else {
      size_t size = v62.__r_.__value_.__l.__size_;
    }
    if (size) {
      goto LABEL_47;
    }
LABEL_94:
    uint64_t v42 = GetOsLogContext()[1];
    if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
    {
      if (*((char *)v6 + 23) < 0) {
        int v6 = (const void **)*v6;
      }
      LODWORD(__p[0]) = 136315138;
      *(void **)((char *)__p + 4) = v6;
      _os_log_impl(&dword_26368A000, v42, OS_LOG_TYPE_DEFAULT, "No baseband info file found for %s", (uint8_t *)__p, 0xCu);
    }
    BOOL v17 = 0;
    if ((v21 & 0x80) != 0) {
      goto LABEL_109;
    }
    goto LABEL_110;
  }
  operator delete(v54.__r_.__value_.__l.__data_);
  int v21 = SHIBYTE(v62.__r_.__value_.__r.__words[2]);
  if ((v62.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t size = HIBYTE(v62.__r_.__value_.__r.__words[2]);
  }
  else {
    size_t size = v62.__r_.__value_.__l.__size_;
  }
  if (!size) {
    goto LABEL_94;
  }
LABEL_47:
  memset(__p, 170, 0x240uLL);
  int v23 = *(char *)(a1 + 23);
  if (v23 >= 0) {
    size_t v24 = *(unsigned __int8 *)(a1 + 23);
  }
  else {
    size_t v24 = *(void *)(a1 + 8);
  }
  unint64_t v25 = v24 + size;
  memset(__dst, 170, 24);
  if (v24 + size > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v25 <= 0x16)
  {
    memset(__dst, 0, 24);
    char v26 = __dst;
    HIBYTE(__dst[2]) = v24 + size;
    if (!v24) {
      goto LABEL_57;
    }
    goto LABEL_53;
  }
  uint64_t v43 = (v25 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v25 | 7) != 0x17) {
    uint64_t v43 = v25 | 7;
  }
  uint64_t v44 = v43 + 1;
  char v26 = (void **)operator new(v43 + 1);
  __dst[1] = (void *)(v24 + size);
  __dst[2] = (void *)(v44 | 0x8000000000000000);
  __dst[0] = v26;
  if (v24)
  {
LABEL_53:
    if (v23 >= 0) {
      int v27 = (const void *)a1;
    }
    else {
      int v27 = *(const void **)a1;
    }
    memmove(v26, v27, v24);
  }
LABEL_57:
  uint64_t v28 = (char *)v26 + v24;
  if (v21 >= 0) {
    unint64_t v29 = &v62;
  }
  else {
    unint64_t v29 = (std::string *)v62.__r_.__value_.__r.__words[0];
  }
  memmove(v28, v29, size);
  v28[size] = 0;
  std::ifstream::basic_ifstream((uint64_t *)__p);
  if (SHIBYTE(__dst[2]) < 0)
  {
    operator delete(__dst[0]);
    if (__p[17]) {
      goto LABEL_62;
    }
LABEL_105:
    uint64_t v45 = GetOsLogContext()[1];
    if (os_log_type_enabled(v45, OS_LOG_TYPE_ERROR))
    {
      LODWORD(__dst[0]) = 136315138;
      *(void **)((char *)__dst + 4) = v29;
      _os_log_error_impl(&dword_26368A000, v45, OS_LOG_TYPE_ERROR, "Failed to open info file: %s", (uint8_t *)__dst, 0xCu);
    }
    BOOL v17 = 0;
    goto LABEL_108;
  }
  if (!__p[17]) {
    goto LABEL_105;
  }
LABEL_62:
  std::istream::seekg();
  memset(__dst, 170, 24);
  int v30 = __dst;
  support::fs::readCurrentLine(__p, __dst);
  uint64_t v31 = HIBYTE(__dst[2]);
  int v32 = SHIBYTE(__dst[2]);
  std::string::size_type v33 = __dst[0];
  if (SHIBYTE(__dst[2]) < 0)
  {
    uint64_t v31 = (uint64_t)__dst[1];
    int v30 = (void **)__dst[0];
  }
  __int16 v34 = (char *)v30 + v31;
  if (v31 >= 35)
  {
    uint64_t v35 = v30;
    do
    {
      int v36 = (char *)memchr(v35, 98, v31 - 34);
      if (!v36) {
        break;
      }
      if (*(void *)v36 == 0x6320676F6C206262
        && *((void *)v36 + 1) == 0x6F697463656C6C6FLL
        && *((void *)v36 + 2) == 0x20726F66202D206ELL
        && *((void *)v36 + 3) == 0x6E67616964737973
        && *(void *)(v36 + 27) == 0x65736F6E67616964)
      {
        goto LABEL_82;
      }
      uint64_t v35 = (void **)(v36 + 1);
      uint64_t v31 = v34 - (char *)v35;
    }
    while (v34 - (char *)v35 > 34);
  }
  int v36 = v34;
LABEL_82:
  BOOL v17 = v36 != v34 && v36 - (char *)v30 != -1;
  if (v32 < 0) {
    operator delete(v33);
  }
LABEL_108:
  __p[0] = *(void **)MEMORY[0x263F8C2A8];
  *(void **)((char *)__p + *((void *)__p[0] - 3)) = *(void **)(MEMORY[0x263F8C2A8] + 24);
  MEMORY[0x263E69400](&__p[2]);
  std::istream::~istream();
  MEMORY[0x263E69630](&__p[53]);
  if ((*((unsigned char *)&v62.__r_.__value_.__s + 23) & 0x80) != 0) {
LABEL_109:
  }
    operator delete(v62.__r_.__value_.__l.__data_);
LABEL_110:
  uint64_t v46 = (std::__shared_weak_count *)v64;
  if ((void)v64 && !atomic_fetch_add((atomic_ullong *volatile)(v64 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
    std::__shared_weak_count::__release_weak(v46);
  }
  std::locale::~locale((std::locale *)v63);
  int v47 = (void **)v65;
  if (v65)
  {
    unint64_t v48 = v66;
    std::string v49 = v65;
    if (v66 != v65)
    {
      do
      {
        if (*((char *)v48 - 1) < 0) {
          operator delete(*(v48 - 3));
        }
        v48 -= 3;
      }
      while (v48 != v47);
      std::string v49 = v65;
    }
    std::string::size_type v66 = v47;
    operator delete(v49);
  }
  return v17;
}

void sub_2636C6078(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, std::locale a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *__p,uint64_t a35,uint64_t a36,std::locale a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54,uint64_t a55,uint64_t a56)
{
  std::ifstream::~ifstream(&a56);
  if (v56 < 0) {
    operator delete(__p);
  }
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&a37);
  std::vector<std::string>::~vector[abi:ne180100](&a46);
  _Unwind_Resume(a1);
}

void sub_2636C6134(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *__p,uint64_t a51,int a52,__int16 a53,char a54,char a55)
{
  if (a55 < 0)
  {
    operator delete(__p);
    if (a33 < 0)
    {
LABEL_5:
      operator delete(a28);
      std::vector<std::string>::~vector[abi:ne180100](&a43);
      _Unwind_Resume(a1);
    }
  }
  else if (a33 < 0)
  {
    goto LABEL_5;
  }
  std::vector<std::string>::~vector[abi:ne180100](&a43);
  _Unwind_Resume(a1);
}

void sub_2636C6190(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *a40)
{
}

uint64_t *std::ifstream::basic_ifstream(uint64_t *a1)
{
  uint64_t v2 = MEMORY[0x263F8C308] + 64;
  a1[53] = MEMORY[0x263F8C308] + 64;
  int v3 = a1 + 2;
  uint64_t v4 = *(void *)(MEMORY[0x263F8C2A8] + 16);
  uint64_t v5 = *(void *)(MEMORY[0x263F8C2A8] + 8);
  *a1 = v5;
  *(uint64_t *)((char *)a1 + *(void *)(v5 - 24)) = v4;
  a1[1] = 0;
  int v6 = (std::ios_base *)((char *)a1 + *(void *)(*a1 - 24));
  std::ios_base::init(v6, a1 + 2);
  uint64_t v7 = MEMORY[0x263F8C308] + 24;
  v6[1].__vftable = 0;
  v6[1].__fmtflags_ = -1;
  *a1 = v7;
  a1[53] = v2;
  MEMORY[0x263E693F0](v3);
  if (!std::filebuf::open()) {
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) | 4);
  }
  return a1;
}

void sub_2636C633C(_Unwind_Exception *a1)
{
  std::istream::~istream();
  MEMORY[0x263E69630](v1);
  _Unwind_Resume(a1);
}

void *std::ifstream::~ifstream(void *a1)
{
  uint64_t v2 = MEMORY[0x263F8C2A8];
  uint64_t v3 = *MEMORY[0x263F8C2A8];
  *a1 = *MEMORY[0x263F8C2A8];
  *(void *)((char *)a1 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  MEMORY[0x263E69400](a1 + 2);
  std::istream::~istream();
  MEMORY[0x263E69630](a1 + 53);
  return a1;
}

void util::findLastLogDumpTimestamp(util *this@<X0>, const char *__s@<X1>, const char *a3@<X2>, int a4@<W3>, char *a5@<X4>, std::string *a6@<X8>)
{
  unsigned int v8 = a3;
  uint64_t v10 = a6;
  uint64_t v150 = *MEMORY[0x263EF8340];
  a6->__r_.__value_.__r.__words[0] = 0;
  a6->__r_.__value_.__l.__size_ = 0;
  a6->__r_.__value_.__r.__words[2] = 0;
  size_t v138 = 0;
  std::string v139 = 0;
  uint64_t v140 = 0;
  memset(v137, 170, sizeof(v137));
  size_t v11 = strlen(__s);
  unint64_t v103 = v10;
  if (v11 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v12 = v11;
  if (v11 >= 0x17)
  {
    uint64_t v14 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17) {
      uint64_t v14 = v11 | 7;
    }
    uint64_t v15 = v14 + 1;
    p_dst = (long long *)operator new(v14 + 1);
    *((void *)&__dst + 1) = v12;
    *(void *)size_t v142 = v15 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
    goto LABEL_8;
  }
  v142[7] = v11;
  p_dst = &__dst;
  if (v11) {
LABEL_8:
  }
    memcpy(p_dst, __s, v12);
  *((unsigned char *)p_dst + v12) = 0;
  uint64_t v16 = std::string::append((std::string *)&__dst, ".*", 2uLL);
  long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v137[2] = (void *)v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)long long v137 = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  if ((v142[7] & 0x80000000) != 0) {
    operator delete((void *)__dst);
  }
  *(void *)&long long v18 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v18 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&v135[32] = v18;
  long long v136 = v18;
  *(_OWORD *)int v135 = v18;
  *(_OWORD *)&v135[16] = v18;
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]<std::char_traits<char>,std::allocator<char>>((uint64_t)v135, (uint64_t)v137, 0);
  *(void *)&long long v19 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v19 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&v133[32] = v19;
  long long v134 = v19;
  *(_OWORD *)uint64_t v133 = v19;
  *(_OWORD *)&v133[16] = v19;
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]((uint64_t)v133, "(\\d{4})-(\\d{2})-(\\d{2})-(\\d{2})-(\\d{2})-(\\d{2})-(\\d{3})", 0);
  BOOL v104 = a5 == 0;
  size_t v20 = strlen((const char *)this);
  if (v20 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  int v21 = (void *)v20;
  if (v20 >= 0x17)
  {
    uint64_t v23 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v20 | 7) != 0x17) {
      uint64_t v23 = v20 | 7;
    }
    uint64_t v24 = v23 + 1;
    uint64_t v22 = operator new(v23 + 1);
    unint64_t v132 = v24 | 0x8000000000000000;
    __p[0] = v22;
    __p[1] = v21;
    goto LABEL_18;
  }
  HIBYTE(v132) = v20;
  uint64_t v22 = __p;
  if (v20) {
LABEL_18:
  }
    memcpy(v22, this, (size_t)v21);
  *((unsigned char *)v21 + (void)v22) = 0;
  std::locale::locale(&v125, (const std::locale *)v135);
  long long v126 = *(_OWORD *)&v135[8];
  long long v127 = *(_OWORD *)&v135[24];
  uint64_t v128 = *(void *)&v135[40];
  uint64_t v129 = (std::__shared_weak_count *)v136;
  if ((void)v136) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v136 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v130 = *((void *)&v136 + 1);
  BOOL FilteredFiles = support::fs::getFilteredFiles((const char *)__p, (uint64_t)&v125, (uint64_t)&v138, 0);
  char v26 = v129;
  if (v129 && !atomic_fetch_add(&v129->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
    std::__shared_weak_count::__release_weak(v26);
    std::locale::~locale(&v125);
    if ((SHIBYTE(v132) & 0x80000000) == 0)
    {
LABEL_24:
      if (!FilteredFiles) {
        goto LABEL_167;
      }
      goto LABEL_28;
    }
  }
  else
  {
    std::locale::~locale(&v125);
    if ((SHIBYTE(v132) & 0x80000000) == 0) {
      goto LABEL_24;
    }
  }
  operator delete(__p[0]);
  if (!FilteredFiles) {
    goto LABEL_167;
  }
LABEL_28:
  unint64_t v28 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (v139 - v138));
  if (v139 == v138) {
    uint64_t v29 = 0;
  }
  else {
    uint64_t v29 = v28;
  }
  std::__introsort<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*,false>((unint64_t)v138, v139, v29, 1, v27);
  memset(&v124, 0, sizeof(v124));
  int v30 = v138;
  uint64_t v102 = v139;
  if (v138 == v139)
  {
LABEL_167:
    if (!v8) {
      goto LABEL_184;
    }
LABEL_168:
    if (SHIBYTE(v10->__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v111, v10->__r_.__value_.__l.__data_, v10->__r_.__value_.__l.__size_);
    }
    else {
      std::string v111 = *v10;
    }
    std::locale::locale(&v105, (const std::locale *)v133);
    long long v106 = *(_OWORD *)&v133[8];
    long long v107 = *(_OWORD *)&v133[24];
    uint64_t v108 = *(void *)&v133[40];
    std::string::size_type v109 = (std::__shared_weak_count *)v134;
    if ((void)v134) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v134 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v110 = *((void *)&v134 + 1);
    BOOL v91 = util::checkLogFileAge((uint64_t)&v111, v8, (uint64_t)&v105);
    time_t v92 = v109;
    if (v109 && !atomic_fetch_add(&v109->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
      std::__shared_weak_count::__release_weak(v92);
      std::locale::~locale(&v105);
      if ((SHIBYTE(v111.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_176:
        if (!v91) {
          goto LABEL_184;
        }
LABEL_180:
        if (SHIBYTE(v10->__r_.__value_.__r.__words[2]) < 0)
        {
          *v10->__r_.__value_.__l.__data_ = 0;
          v10->__r_.__value_.__l.__size_ = 0;
        }
        else
        {
          v10->__r_.__value_.__s.__data_[0] = 0;
          *((unsigned char *)&v10->__r_.__value_.__s + 23) = 0;
        }
        goto LABEL_184;
      }
    }
    else
    {
      std::locale::~locale(&v105);
      if ((SHIBYTE(v111.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_176;
      }
    }
    operator delete(v111.__r_.__value_.__l.__data_);
    if (!v91) {
      goto LABEL_184;
    }
    goto LABEL_180;
  }
  unsigned int v98 = v8;
  uint64_t v100 = a5;
  while (1)
  {
    memset(&v123, 170, sizeof(v123));
    if (*((char *)v30 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v123, (const std::string::value_type *)*v30, (std::string::size_type)v30[1]);
    }
    else
    {
      long long v31 = *(_OWORD *)v30;
      v123.__r_.__value_.__r.__words[2] = (std::string::size_type)v30[2];
      *(_OWORD *)&v123.__r_.__value_.__l.__data_ = v31;
    }
    if ((v124.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int64_t size = HIBYTE(v124.__r_.__value_.__r.__words[2]);
    }
    else {
      int64_t size = v124.__r_.__value_.__l.__size_;
    }
    std::string::size_type v33 = HIBYTE(v123.__r_.__value_.__r.__words[2]);
    int v34 = SHIBYTE(v123.__r_.__value_.__r.__words[2]);
    uint64_t v35 = (std::string *)v123.__r_.__value_.__r.__words[0];
    if (size)
    {
      if ((v124.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v36 = &v124;
      }
      else {
        int v36 = (std::string *)v124.__r_.__value_.__r.__words[0];
      }
      if ((v123.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v37 = &v123;
      }
      else {
        uint64_t v37 = (std::string *)v123.__r_.__value_.__r.__words[0];
      }
      int64_t v38 = v123.__r_.__value_.__l.__size_;
      if ((v123.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int64_t v38 = HIBYTE(v123.__r_.__value_.__r.__words[2]);
      }
      if (v38 >= size)
      {
        uint64_t v63 = (char *)v37 + v38;
        int v64 = v36->__r_.__value_.__s.__data_[0];
        char v65 = v37;
        do
        {
          int64_t v66 = v38 - size;
          if (v66 == -1) {
            break;
          }
          uint64_t v67 = (char *)memchr(v65, v64, v66 + 1);
          if (!v67) {
            break;
          }
          unint64_t v68 = v67;
          if (!memcmp(v67, v36, size))
          {
            if (v68 == v63 || v68 - (char *)v37 == -1) {
              break;
            }
            int v61 = 3;
            uint64_t v10 = v103;
            if ((v34 & 0x80) == 0) {
              goto LABEL_150;
            }
            goto LABEL_106;
          }
          char v65 = (std::string *)(v68 + 1);
          int64_t v38 = v63 - (v68 + 1);
        }
        while (v38 >= size);
      }
    }
    *(void *)&long long v39 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v39 + 1) = 0xAAAAAAAAAAAAAAAALL;
    long long v121 = v39;
    unint64_t v118 = 0xAAAAAAAAAAAAAA00;
    v115[1].__end_cap_.__value_ = (std::sub_match<std::__wrap_iter<const char *>> *)0xAAAAAAAAAAAAAAAALL;
    uint64_t v116 = 0;
    uint64_t v117 = 0;
    uint64_t v119 = 0;
    uint64_t v120 = 0;
    LOBYTE(v121) = 0;
    BYTE8(v121) = 0;
    uint64_t v122 = 0;
    memset(v115, 0, 41);
    if (v104)
    {
      std::string::size_type v40 = v123.__r_.__value_.__l.__size_;
      long long v148 = v39;
      unint64_t v145 = 0xAAAAAAAAAAAAAA00;
      *(void *)&v142[24] = v39;
      uint64_t v143 = 0;
      uint64_t v144 = 0;
      uint64_t v146 = 0;
      uint64_t v147 = 0;
      LOBYTE(v148) = 0;
      BYTE8(v148) = 0;
      uint64_t v149 = 0;
      long long __dst = 0uLL;
      *(_OWORD *)size_t v142 = 0uLL;
      if (v34 >= 0) {
        uint64_t v41 = (std::sub_match<const char *> *)&v123;
      }
      else {
        uint64_t v41 = (std::sub_match<const char *> *)v35;
      }
      if (v34 >= 0) {
        std::string::size_type v40 = v33;
      }
      *(_OWORD *)&v142[9] = 0uLL;
      uint64_t v10 = v103;
      int v42 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>((uint64_t)v133, v41, (std::sub_match<const char *> *)((char *)v41 + v40), (std::vector<std::csub_match> *)&__dst, 0);
      std::string::size_type v43 = HIBYTE(v123.__r_.__value_.__r.__words[2]);
      if ((v123.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v44 = &v123;
      }
      else {
        uint64_t v44 = (std::string *)v123.__r_.__value_.__r.__words[0];
      }
      if ((v123.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v43 = v123.__r_.__value_.__l.__size_;
      }
      std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>(v115, (uint64_t)v44, (std::sub_match<std::__wrap_iter<const char *>> *)((char *)v44 + v43), (uint64_t *)&__dst, 0);
      if ((void)__dst)
      {
        *((void *)&__dst + 1) = __dst;
        operator delete((void *)__dst);
      }
      if (v42)
      {
        p_end_cap = &v115[1].__end_cap_;
        if (v115[0].__end_ != v115[0].__begin_) {
          p_end_cap = &v115[0].__begin_->matched;
        }
        if (!*p_end_cap)
        {
          long long __dst = 0uLL;
          *(void *)size_t v142 = 0;
          if ((SHIBYTE(v103->__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_116;
          }
          goto LABEL_101;
        }
        std::vector<std::ssub_match>::pointer begin = (std::vector<std::ssub_match>::pointer)&v115[1];
        if (v115[0].__end_ != v115[0].__begin_) {
          std::vector<std::ssub_match>::pointer begin = v115[0].__begin_;
        }
        std::__wrap_iter<const char *>::iterator_type i = begin->first.__i_;
        p_std::__wrap_iter<const char *>::iterator_type i = &v115[0].__begin_->second.__i_;
        if (v115[0].__end_ == v115[0].__begin_) {
          p_std::__wrap_iter<const char *>::iterator_type i = (const char **)&v115[1].__end_;
        }
        std::string v49 = *p_i;
        unint64_t v50 = *p_i - i;
        if (v50 > 0x7FFFFFFFFFFFFFF7) {
          std::string::__throw_length_error[abi:ne180100]();
        }
        if (v50 > 0x16)
        {
          uint64_t v75 = (v50 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v50 | 7) != 0x17) {
            uint64_t v75 = v50 | 7;
          }
          uint64_t v76 = v75 + 1;
          uint64_t v51 = (long long *)operator new(v75 + 1);
          *((void *)&__dst + 1) = v50;
          *(void *)size_t v142 = v76 | 0x8000000000000000;
          *(void *)&long long __dst = v51;
          if (i != v49)
          {
LABEL_74:
            if (v50 < 0x20 || (unint64_t)((char *)v51 - i) < 0x20)
            {
              char v52 = v51;
              uint64_t v53 = i;
            }
            else
            {
              char v52 = (long long *)((char *)v51 + (v50 & 0xFFFFFFFFFFFFFFE0));
              uint64_t v53 = &i[v50 & 0xFFFFFFFFFFFFFFE0];
              std::string v54 = (long long *)(i + 16);
              std::locale v55 = v51 + 1;
              unint64_t v56 = v50 & 0xFFFFFFFFFFFFFFE0;
              do
              {
                long long v57 = *v54;
                *(v55 - 1) = *(v54 - 1);
                *std::locale v55 = v57;
                v54 += 2;
                v55 += 2;
                v56 -= 32;
              }
              while (v56);
              if (v50 == (v50 & 0x7FFFFFFFFFFFFFE0))
              {
LABEL_115:
                *(unsigned char *)char v52 = 0;
                if ((SHIBYTE(v103->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                {
LABEL_116:
                  *(_OWORD *)&v103->__r_.__value_.__l.__data_ = __dst;
                  v103->__r_.__value_.__r.__words[2] = *(void *)v142;
                  if (a4) {
                    goto LABEL_117;
                  }
                  goto LABEL_141;
                }
LABEL_101:
                operator delete(v103->__r_.__value_.__l.__data_);
                *(_OWORD *)&v103->__r_.__value_.__l.__data_ = __dst;
                v103->__r_.__value_.__r.__words[2] = *(void *)v142;
                if (a4)
                {
LABEL_117:
                  size_t v78 = strlen((const char *)this);
                  if (v78 > 0x7FFFFFFFFFFFFFF7) {
                    std::string::__throw_length_error[abi:ne180100]();
                  }
                  long long v79 = (void *)v78;
                  if (v78 >= 0x17)
                  {
                    uint64_t v81 = (v78 & 0xFFFFFFFFFFFFFFF8) + 8;
                    if ((v78 | 7) != 0x17) {
                      uint64_t v81 = v78 | 7;
                    }
                    uint64_t v82 = v81 + 1;
                    uint64_t v80 = operator new(v81 + 1);
                    v113[1] = v79;
                    unint64_t v114 = v82 | 0x8000000000000000;
                    v113[0] = v80;
                  }
                  else
                  {
                    HIBYTE(v114) = v78;
                    uint64_t v80 = v113;
                    if (!v78)
                    {
                      LOBYTE(v113[0]) = 0;
                      if ((SHIBYTE(v103->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                      {
LABEL_121:
                        std::string v112 = *v103;
                        goto LABEL_127;
                      }
LABEL_126:
                      std::string::__init_copy_ctor_external(&v112, v103->__r_.__value_.__l.__data_, v103->__r_.__value_.__l.__size_);
LABEL_127:
                      BOOL isDumpForSysdiagnose = util::isDumpForSysdiagnose((uint64_t)v113, (uint64_t)&v112);
                      if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0)
                      {
                        operator delete(v112.__r_.__value_.__l.__data_);
                        if ((SHIBYTE(v114) & 0x80000000) == 0)
                        {
LABEL_129:
                          if (isDumpForSysdiagnose) {
                            goto LABEL_130;
                          }
                          goto LABEL_141;
                        }
                      }
                      else if ((SHIBYTE(v114) & 0x80000000) == 0)
                      {
                        goto LABEL_129;
                      }
                      operator delete(v113[0]);
                      if (isDumpForSysdiagnose)
                      {
LABEL_130:
                        unint64_t v84 = GetOsLogContext()[1];
                        if (os_log_type_enabled(v84, OS_LOG_TYPE_DEFAULT))
                        {
                          if ((v103->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                            uint64_t v85 = v103;
                          }
                          else {
                            uint64_t v85 = (std::string *)v103->__r_.__value_.__r.__words[0];
                          }
                          LODWORD(__dst) = 136315138;
                          *(void *)((char *)&__dst + 4) = v85;
                          _os_log_impl(&dword_26368A000, v84, OS_LOG_TYPE_DEFAULT, "Ignore dump for sysdiagnose: %s", (uint8_t *)&__dst, 0xCu);
                        }
                        if (&v124 != v103)
                        {
                          char v86 = HIBYTE(v103->__r_.__value_.__r.__words[2]);
                          if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0)
                          {
                            if (v86 >= 0) {
                              uint64_t v89 = v103;
                            }
                            else {
                              uint64_t v89 = (std::string *)v103->__r_.__value_.__r.__words[0];
                            }
                            if (v86 >= 0) {
                              size_t v90 = HIBYTE(v103->__r_.__value_.__r.__words[2]);
                            }
                            else {
                              size_t v90 = v103->__r_.__value_.__l.__size_;
                            }
                            std::string::__assign_no_alias<false>((void **)&v124.__r_.__value_.__l.__data_, v89, v90);
                          }
                          else
                          {
                            if ((*((unsigned char *)&v103->__r_.__value_.__s + 23) & 0x80) == 0)
                            {
                              std::string v124 = *v103;
LABEL_164:
                              int v61 = 0;
                              v103->__r_.__value_.__s.__data_[0] = 0;
                              *((unsigned char *)&v103->__r_.__value_.__s + 23) = 0;
                              goto LABEL_146;
                            }
                            std::string::__assign_no_alias<true>(&v124, v103->__r_.__value_.__l.__data_, v103->__r_.__value_.__l.__size_);
                          }
                        }
                        if (SHIBYTE(v103->__r_.__value_.__r.__words[2]) < 0)
                        {
                          int v61 = 0;
                          *v103->__r_.__value_.__l.__data_ = 0;
                          v103->__r_.__value_.__l.__size_ = 0;
                          goto LABEL_146;
                        }
                        goto LABEL_164;
                      }
                      goto LABEL_141;
                    }
                  }
                  memcpy(v80, this, (size_t)v79);
                  *((unsigned char *)v79 + (void)v80) = 0;
                  if ((SHIBYTE(v103->__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                    goto LABEL_121;
                  }
                  goto LABEL_126;
                }
LABEL_141:
                int v61 = 2;
LABEL_146:
                char v87 = 1;
LABEL_147:
                BOOL v104 = v87;
                std::string v62 = v115[0].__begin_;
                if (v115[0].__begin_) {
                  goto LABEL_148;
                }
                goto LABEL_149;
              }
            }
            do
            {
              char v77 = *v53++;
              *(unsigned char *)char v52 = v77;
              char v52 = (long long *)((char *)v52 + 1);
            }
            while (v53 != v49);
            goto LABEL_115;
          }
        }
        else
        {
          v142[7] = *(unsigned char *)p_i - (_BYTE)i;
          uint64_t v51 = &__dst;
          if (i != v49) {
            goto LABEL_74;
          }
        }
        *(unsigned char *)uint64_t v51 = 0;
        if ((SHIBYTE(v103->__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_116;
        }
        goto LABEL_101;
      }
LABEL_145:
      int v61 = 0;
      goto LABEL_146;
    }
    if (v34 >= 0) {
      uint64_t v35 = &v123;
    }
    int64_t v58 = strlen(v100);
    uint64_t v10 = v103;
    if (!v58)
    {
LABEL_144:
      std::string::__assign_external(&v124, v100);
      goto LABEL_145;
    }
    int64_t v59 = v58;
    int64_t v60 = v123.__r_.__value_.__l.__size_;
    if (v34 >= 0) {
      int64_t v60 = v33;
    }
    if (v60 >= v58)
    {
      int v69 = (char *)v35 + v60;
      int v70 = *v100;
      unint64_t v71 = v35;
      do
      {
        int64_t v72 = v60 - v59;
        if (v72 == -1) {
          break;
        }
        uint64_t v73 = (char *)memchr(v71, v70, v72 + 1);
        if (!v73) {
          break;
        }
        unint64_t v74 = v73;
        if (!memcmp(v73, v100, v59))
        {
          char v87 = 0;
          if (v74 != v69)
          {
            int64_t v88 = v74 - (char *)v35;
            int v61 = 0;
            if (v88 == -1) {
              goto LABEL_147;
            }
            goto LABEL_144;
          }
          int v61 = 0;
          BOOL v104 = 0;
          std::string v62 = v115[0].__begin_;
          if (v115[0].__begin_) {
            goto LABEL_148;
          }
          goto LABEL_149;
        }
        unint64_t v71 = (std::string *)(v74 + 1);
        int64_t v60 = v69 - (v74 + 1);
      }
      while (v60 >= v59);
    }
    int v61 = 0;
    BOOL v104 = 0;
    std::string v62 = v115[0].__begin_;
    if (v115[0].__begin_)
    {
LABEL_148:
      v115[0].__end_ = v62;
      operator delete(v62);
    }
LABEL_149:
    if ((*((unsigned char *)&v123.__r_.__value_.__s + 23) & 0x80) != 0) {
      break;
    }
LABEL_150:
    if (v61 != 3) {
      goto LABEL_151;
    }
LABEL_33:
    v30 += 3;
    if (v30 == v102) {
      goto LABEL_166;
    }
  }
LABEL_106:
  operator delete(v123.__r_.__value_.__l.__data_);
  if (v61 == 3) {
    goto LABEL_33;
  }
LABEL_151:
  if (!v61) {
    goto LABEL_33;
  }
LABEL_166:
  unsigned int v8 = v98;
  if ((SHIBYTE(v124.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_167;
  }
  operator delete(v124.__r_.__value_.__l.__data_);
  if (v98) {
    goto LABEL_168;
  }
LABEL_184:
  std::string v93 = (std::__shared_weak_count *)v134;
  if ((void)v134 && !atomic_fetch_add((atomic_ullong *volatile)(v134 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
    std::__shared_weak_count::__release_weak(v93);
    std::locale::~locale((std::locale *)v133);
    std::string v94 = (std::__shared_weak_count *)v136;
    if (!(void)v136) {
      goto LABEL_188;
    }
LABEL_187:
    if (atomic_fetch_add(&v94->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_188;
    }
    ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
    std::__shared_weak_count::__release_weak(v94);
    std::locale::~locale((std::locale *)v135);
    if (SHIBYTE(v137[2]) < 0) {
LABEL_189:
    }
      operator delete(v137[0]);
  }
  else
  {
    std::locale::~locale((std::locale *)v133);
    std::string v94 = (std::__shared_weak_count *)v136;
    if ((void)v136) {
      goto LABEL_187;
    }
LABEL_188:
    std::locale::~locale((std::locale *)v135);
    if (SHIBYTE(v137[2]) < 0) {
      goto LABEL_189;
    }
  }
  long long v95 = v138;
  if (v138)
  {
    uint64_t v96 = v139;
    unint64_t v97 = v138;
    if (v139 != v138)
    {
      do
      {
        if (*((char *)v96 - 1) < 0) {
          operator delete((void *)*(v96 - 3));
        }
        v96 -= 3;
      }
      while (v96 != v95);
      unint64_t v97 = v138;
    }
    std::string v139 = v95;
    operator delete(v97);
  }
}

void sub_2636C70CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex((std::locale *)&STACK[0x220]);
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex((std::locale *)&STACK[0x260]);
  if (SLOBYTE(STACK[0x2B7]) < 0) {
    operator delete((void *)STACK[0x2A0]);
  }
  std::vector<std::string>::~vector[abi:ne180100]((void **)(v24 - 248));
  if (*(char *)(a24 + 23) < 0) {
    operator delete(*(void **)a24);
  }
  _Unwind_Resume(a1);
}

uint64_t util::getNumberOfLogDumps(uint64_t a1, const void **a2)
{
  uint64_t v164 = *MEMORY[0x263EF8340];
  unint64_t v145 = 0;
  uint64_t v146 = 0;
  uint64_t v147 = 0;
  long long v142 = 0u;
  long long v143 = 0u;
  unint64_t v144 = 0xAAAAAAAA3F800000;
  uint64_t v4 = (char *)operator new(0x48uLL);
  uint64_t v5 = v4;
  strcpy(v4, "[0-9]{4}-[0-9]{2}-[0-9]{2}-[0-9]{2}-[0-9]{2}-[0-9]{2,4}-[0-9]{3}");
  *(void *)&long long v6 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&v140[32] = v6;
  long long v141 = v6;
  *(_OWORD *)uint64_t v140 = v6;
  *(_OWORD *)&v140[16] = v6;
  int v7 = *((char *)a2 + 23);
  if (v7 >= 0) {
    size_t v8 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v8 = (size_t)a2[1];
  }
  unint64_t v9 = v8 + 64;
  memset(__dst, 170, 24);
  std::locale v125 = v4;
  if (v8 + 64 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v9 <= 0x16)
  {
    memset(__dst, 0, 24);
    uint64_t v10 = __dst;
    __dst[23] = v8 + 64;
LABEL_10:
    if (v7 >= 0) {
      unint64_t v13 = a2;
    }
    else {
      unint64_t v13 = *a2;
    }
    memmove(v10, v13, v8);
    goto LABEL_14;
  }
  uint64_t v11 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v9 | 7) != 0x17) {
    uint64_t v11 = v9 | 7;
  }
  uint64_t v12 = v11 + 1;
  uint64_t v10 = operator new(v11 + 1);
  *(void *)&__dst[8] = v8 + 64;
  *(void *)&__dst[16] = v12 | 0x8000000000000000;
  *(void *)long long __dst = v10;
  if (v8) {
    goto LABEL_10;
  }
LABEL_14:
  uint64_t v14 = &v10[v8];
  long long v15 = *(_OWORD *)v5;
  long long v16 = *((_OWORD *)v5 + 1);
  long long v17 = *((_OWORD *)v5 + 3);
  *((_OWORD *)v14 + 2) = *((_OWORD *)v5 + 2);
  *((_OWORD *)v14 + 3) = v17;
  *(_OWORD *)uint64_t v14 = v15;
  *((_OWORD *)v14 + 1) = v16;
  v14[64] = 0;
  long long v18 = std::string::append((std::string *)__dst, ".*", 2uLL);
  long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  *(void *)&__p[16] = *((void *)&v18->__r_.__value_.__l + 2);
  *(_OWORD *)tm __p = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]<std::char_traits<char>,std::allocator<char>>((uint64_t)v140, (uint64_t)__p, 0);
  if ((__p[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)__p);
    if ((__dst[23] & 0x80000000) == 0) {
      goto LABEL_16;
    }
  }
  else if ((__dst[23] & 0x80000000) == 0)
  {
    goto LABEL_16;
  }
  operator delete(*(void **)__dst);
LABEL_16:
  *(void *)&long long v20 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v20 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v138 = v20;
  long long v139 = v20;
  long long v137 = v20;
  *(_OWORD *)&v136[0].__locale_ = v20;
  int v21 = *((char *)a2 + 23);
  if (v21 >= 0) {
    size_t v22 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v22 = (size_t)a2[1];
  }
  unint64_t v23 = v22 + 64;
  memset(__dst, 170, 24);
  if (v22 + 64 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v23 <= 0x16)
  {
    memset(__dst, 0, 24);
    uint64_t v24 = __dst;
    __dst[23] = v22 + 64;
LABEL_25:
    if (v21 >= 0) {
      __n128 v27 = a2;
    }
    else {
      __n128 v27 = *a2;
    }
    memmove(v24, v27, v22);
    goto LABEL_29;
  }
  uint64_t v25 = (v23 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v23 | 7) != 0x17) {
    uint64_t v25 = v23 | 7;
  }
  uint64_t v26 = v25 + 1;
  uint64_t v24 = operator new(v25 + 1);
  *(void *)&__dst[8] = v22 + 64;
  *(void *)&__dst[16] = v26 | 0x8000000000000000;
  *(void *)long long __dst = v24;
  if (v22) {
    goto LABEL_25;
  }
LABEL_29:
  unint64_t v28 = &v24[v22];
  long long v29 = *(_OWORD *)v5;
  long long v30 = *((_OWORD *)v5 + 1);
  long long v31 = *((_OWORD *)v5 + 3);
  *((_OWORD *)v28 + 2) = *((_OWORD *)v5 + 2);
  *((_OWORD *)v28 + 3) = v31;
  *(_OWORD *)unint64_t v28 = v29;
  *((_OWORD *)v28 + 1) = v30;
  v28[64] = 0;
  int v32 = std::string::append((std::string *)__dst, "(?=-*)(?!\\.json)", 0x10uLL);
  long long v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
  *(void *)&__p[16] = *((void *)&v32->__r_.__value_.__l + 2);
  *(_OWORD *)tm __p = v33;
  v32->__r_.__value_.__l.__size_ = 0;
  v32->__r_.__value_.__r.__words[2] = 0;
  v32->__r_.__value_.__r.__words[0] = 0;
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]<std::char_traits<char>,std::allocator<char>>((uint64_t)v136, (uint64_t)__p, 0);
  if ((__p[23] & 0x80000000) == 0)
  {
    if ((__dst[23] & 0x80000000) == 0) {
      goto LABEL_31;
    }
LABEL_36:
    operator delete(*(void **)__dst);
    if ((*(char *)(a1 + 23) & 0x80000000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_37;
  }
  operator delete(*(void **)__p);
  if ((__dst[23] & 0x80000000) != 0) {
    goto LABEL_36;
  }
LABEL_31:
  if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
LABEL_32:
    std::string v135 = *(std::string *)a1;
    goto LABEL_38;
  }
LABEL_37:
  std::string::__init_copy_ctor_external(&v135, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
LABEL_38:
  std::locale::locale(&v129, (const std::locale *)v140);
  long long v130 = *(_OWORD *)&v140[8];
  long long v131 = *(_OWORD *)&v140[24];
  uint64_t v132 = *(void *)&v140[40];
  uint64_t v133 = (std::__shared_weak_count *)v141;
  if ((void)v141) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v141 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v134 = *((void *)&v141 + 1);
  support::fs::getFilteredFiles((const char *)&v135, (uint64_t)&v129, (uint64_t)&v145, 0);
  int v34 = v133;
  if (v133 && !atomic_fetch_add(&v133->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
    std::__shared_weak_count::__release_weak(v34);
    std::locale::~locale(&v129);
    if ((SHIBYTE(v135.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_43:
      int v36 = (std::sub_match<const char *> *)v145;
      uint64_t v35 = v146;
      if (v145 == v146) {
        goto LABEL_219;
      }
      goto LABEL_47;
    }
  }
  else
  {
    std::locale::~locale(&v129);
    if ((SHIBYTE(v135.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_43;
    }
  }
  operator delete(v135.__r_.__value_.__l.__data_);
  int v36 = (std::sub_match<const char *> *)v145;
  uint64_t v35 = v146;
  if (v145 != v146)
  {
LABEL_47:
    long long v126 = v35;
    while (1)
    {
      *(void *)&long long v37 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v37 + 1) = 0xAAAAAAAAAAAAAAAALL;
      long long v162 = v37;
      unint64_t v159 = 0xAAAAAAAAAAAAAA00;
      *(void *)&__dst[40] = 0xAAAAAAAAAAAAAAAALL;
      uint64_t v157 = 0;
      uint64_t v158 = 0;
      uint64_t v160 = 0;
      uint64_t v161 = 0;
      LOBYTE(v162) = 0;
      BYTE8(v162) = 0;
      uint64_t v163 = 0;
      memset(__dst, 0, 41);
      long long v154 = v37;
      unint64_t v151 = 0xAAAAAAAAAAAAAA00;
      *(void *)&__p[40] = 0xAAAAAAAAAAAAAAAALL;
      uint64_t v149 = 0;
      uint64_t v150 = 0;
      uint64_t v152 = 0;
      uint64_t v153 = 0;
      LOBYTE(v154) = 0;
      BYTE8(v154) = 0;
      uint64_t v155 = 0;
      memset(__p, 0, 41);
      second = (const char *)*((unsigned __int8 *)&v36->matched + 7);
      if ((char)second >= 0) {
        first = v36;
      }
      else {
        first = (std::sub_match<const char *> *)v36->first;
      }
      if ((char)second < 0) {
        second = v36->second;
      }
      int v40 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>((uint64_t)v136, first, (std::sub_match<const char *> *)&second[(void)first], (std::vector<std::csub_match> *)__p, 0);
      uint64_t v41 = (const char *)*((unsigned __int8 *)&v36->matched + 7);
      if ((char)v41 >= 0) {
        uint64_t v42 = (uint64_t)v36;
      }
      else {
        uint64_t v42 = (uint64_t)v36->first;
      }
      if ((char)v41 < 0) {
        uint64_t v41 = v36->second;
      }
      std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>((std::vector<std::ssub_match> *)__dst, v42, (std::sub_match<std::__wrap_iter<const char *>> *)&v41[v42], (uint64_t *)__p, 0);
      if (*(void *)__p)
      {
        *(void *)&__p[8] = *(void *)__p;
        operator delete(*(void **)__p);
      }
      if (!v40) {
        goto LABEL_217;
      }
      std::string::size_type v43 = *(void *)&__dst[8] == *(void *)__dst ? &__dst[40] : (unsigned char *)(*(void *)__dst + 16);
      if (*v43) {
        break;
      }
      unint64_t v56 = 0;
      long long v57 = 0;
      unint64_t v58 = 0;
      v127[0] = 0;
      v127[1] = 0;
      int64_t v128 = 0;
LABEL_87:
      if ((v58 & 0x80u) == 0) {
        std::string v62 = (uint64_t *)v127;
      }
      else {
        std::string v62 = v57;
      }
      if ((v58 & 0x80u) == 0) {
        unint64_t v63 = v58;
      }
      else {
        unint64_t v63 = (unint64_t)v56;
      }
      unint64_t v64 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)__p, v62, v63);
      unint64_t v65 = v64;
      unint64_t v66 = *((void *)&v142 + 1);
      if (!*((void *)&v142 + 1))
      {
        unint64_t v68 = 0xAAAAAAAAAAAAAAAALL;
LABEL_143:
        *(void *)&__p[16] = 0xAAAAAAAAAAAAAA01;
        char v87 = operator new(0x28uLL);
        *(void *)tm __p = v87;
        *(void *)&__p[8] = &v143;
        *char v87 = 0;
        v87[1] = v65;
        *((_OWORD *)v87 + 1) = *(_OWORD *)v127;
        v87[4] = v128;
        v127[0] = 0;
        v127[1] = 0;
        int64_t v128 = 0;
        float v88 = (float)(unint64_t)(*((void *)&v143 + 1) + 1);
        if (v66 && (float)(*(float *)&v144 * (float)v66) >= v88)
        {
          uint64_t v35 = v126;
          uint64_t v89 = v142;
          size_t v90 = *(void **)(v142 + 8 * v68);
          if (v90) {
            goto LABEL_146;
          }
LABEL_195:
          *char v87 = v143;
          *(void *)&long long v143 = v87;
          *(void *)(v89 + 8 * v68) = &v143;
          if (*v87)
          {
            unint64_t v111 = *(void *)(*v87 + 8);
            if ((v66 & (v66 - 1)) != 0)
            {
              if (v111 >= v66) {
                v111 %= v66;
              }
            }
            else
            {
              v111 &= v66 - 1;
            }
            size_t v90 = (void *)(v142 + 8 * v111);
LABEL_214:
            *size_t v90 = v87;
          }
          ++*((void *)&v143 + 1);
          if (v128 < 0) {
            goto LABEL_216;
          }
          goto LABEL_217;
        }
        BOOL v91 = (v66 & (v66 - 1)) != 0;
        if (v66 < 3) {
          BOOL v91 = 1;
        }
        unint64_t v92 = v91 | (2 * v66);
        unint64_t v93 = vcvtps_u32_f32(v88 / *(float *)&v144);
        if (v92 <= v93) {
          size_t prime = v93;
        }
        else {
          size_t prime = v92;
        }
        uint64_t v35 = v126;
        if (prime == 1)
        {
          size_t prime = 2;
        }
        else if ((prime & (prime - 1)) != 0)
        {
          size_t prime = std::__next_prime(prime);
          unint64_t v66 = *((void *)&v142 + 1);
        }
        if (prime <= v66)
        {
          if (prime >= v66) {
            goto LABEL_193;
          }
          unint64_t v105 = vcvtps_u32_f32((float)*((unint64_t *)&v143 + 1) / *(float *)&v144);
          if (v66 < 3 || (uint8x8_t v106 = (uint8x8_t)vcnt_s8((int8x8_t)v66), v106.i16[0] = vaddlv_u8(v106), v106.u32[0] > 1uLL))
          {
            unint64_t v105 = std::__next_prime(v105);
          }
          else
          {
            uint64_t v107 = 1 << -(char)__clz(v105 - 1);
            if (v105 >= 2) {
              unint64_t v105 = v107;
            }
          }
          if (prime <= v105) {
            size_t prime = v105;
          }
          if (prime < v66)
          {
            if (prime) {
              goto LABEL_157;
            }
            std::string::size_type v109 = (void *)v142;
            *(void *)&long long v142 = 0;
            if (v109) {
              operator delete(v109);
            }
            unint64_t v66 = 0;
            *((void *)&v142 + 1) = 0;
            uint64_t v110 = -1;
            goto LABEL_194;
          }
          unint64_t v66 = *((void *)&v142 + 1);
          uint64_t v110 = *((void *)&v142 + 1) - 1;
          if ((*((void *)&v142 + 1) & (*((void *)&v142 + 1) - 1)) == 0) {
            goto LABEL_194;
          }
          goto LABEL_206;
        }
LABEL_157:
        if (prime >> 61) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        long long v95 = operator new(8 * prime);
        uint64_t v96 = (void *)v142;
        *(void *)&long long v142 = v95;
        if (v96) {
          operator delete(v96);
        }
        uint64_t v97 = 0;
        *((void *)&v142 + 1) = prime;
        do
          *(void *)(v142 + 8 * v97++) = 0;
        while (prime != v97);
        unsigned int v98 = (void **)v143;
        if (!(void)v143)
        {
LABEL_205:
          unint64_t v66 = prime;
          uint64_t v110 = prime - 1;
          if ((prime & (prime - 1)) == 0) {
            goto LABEL_194;
          }
          goto LABEL_206;
        }
        size_t v99 = *(void *)(v143 + 8);
        size_t v100 = prime - 1;
        if ((prime & (prime - 1)) == 0)
        {
          size_t v101 = v99 & v100;
          *(void *)(v142 + 8 * v101) = &v143;
          for (std::__wrap_iter<const char *>::iterator_type i = *v98; *v98; std::__wrap_iter<const char *>::iterator_type i = *v98)
          {
            size_t v103 = i[1] & v100;
            if (v103 == v101)
            {
              unsigned int v98 = (void **)i;
            }
            else if (*(void *)(v142 + 8 * v103))
            {
              std::string *v98 = (void *)*i;
              uint64_t v104 = 8 * v103;
              *std::__wrap_iter<const char *>::iterator_type i = **(void **)(v142 + v104);
              **(void **)(v142 + v104) = i;
            }
            else
            {
              *(void *)(v142 + 8 * v103) = v98;
              unsigned int v98 = (void **)i;
              size_t v101 = v103;
            }
          }
          goto LABEL_205;
        }
        if (v99 < prime)
        {
          *(void *)(v142 + 8 * v99) = &v143;
          uint64_t v108 = *v98;
          if (*v98) {
            goto LABEL_200;
          }
LABEL_192:
          unint64_t v66 = prime;
LABEL_193:
          uint64_t v110 = v66 - 1;
          if ((v66 & (v66 - 1)) == 0)
          {
LABEL_194:
            unint64_t v68 = v110 & v65;
            uint64_t v89 = v142;
            size_t v90 = *(void **)(v142 + 8 * (v110 & v65));
            if (!v90) {
              goto LABEL_195;
            }
LABEL_146:
            *char v87 = *v90;
            goto LABEL_214;
          }
LABEL_206:
          if (v65 >= v66)
          {
            unint64_t v68 = v65 % v66;
            uint64_t v89 = v142;
            size_t v90 = *(void **)(v142 + 8 * (v65 % v66));
            if (!v90) {
              goto LABEL_195;
            }
          }
          else
          {
            unint64_t v68 = v65;
            uint64_t v89 = v142;
            size_t v90 = *(void **)(v142 + 8 * v65);
            if (!v90) {
              goto LABEL_195;
            }
          }
          goto LABEL_146;
        }
        v99 %= prime;
        *(void *)(v142 + 8 * v99) = &v143;
        uint64_t v108 = *v98;
        if (!*v98) {
          goto LABEL_192;
        }
        while (1)
        {
LABEL_200:
          size_t v113 = v108[1];
          if (v113 >= prime) {
            v113 %= prime;
          }
          if (v113 == v99) {
            goto LABEL_199;
          }
          if (*(void *)(v142 + 8 * v113)) {
            break;
          }
          *(void *)(v142 + 8 * v113) = v98;
          unsigned int v98 = (void **)v108;
          uint64_t v108 = (void *)*v108;
          size_t v99 = v113;
          if (!v108) {
            goto LABEL_205;
          }
        }
        std::string *v98 = (void *)*v108;
        uint64_t v112 = 8 * v113;
        void *v108 = **(void **)(v142 + v112);
        **(void **)(v142 + v112) = v108;
        uint64_t v108 = v98;
LABEL_199:
        unsigned int v98 = (void **)v108;
        uint64_t v108 = (void *)*v108;
        if (!v108) {
          goto LABEL_205;
        }
        goto LABEL_200;
      }
      uint8x8_t v67 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v142 + 8));
      v67.i16[0] = vaddlv_u8(v67);
      if (v67.u32[0] > 1uLL)
      {
        unint64_t v68 = v64;
        if (v64 >= *((void *)&v142 + 1)) {
          unint64_t v68 = v64 % *((void *)&v142 + 1);
        }
      }
      else
      {
        unint64_t v68 = (*((void *)&v142 + 1) - 1) & v64;
      }
      int v69 = *(uint64_t ***)(v142 + 8 * v68);
      if (!v69) {
        goto LABEL_143;
      }
      int v70 = *v69;
      if (!*v69) {
        goto LABEL_143;
      }
      char v71 = HIBYTE(v128);
      if (v128 >= 0) {
        int64_t v72 = (void *)HIBYTE(v128);
      }
      else {
        int64_t v72 = v127[1];
      }
      if (v128 >= 0) {
        uint64_t v73 = v127;
      }
      else {
        uint64_t v73 = (void **)v127[0];
      }
      if (v67.u32[0] >= 2uLL)
      {
        while (1)
        {
          unint64_t v75 = v70[1];
          if (v75 == v65)
          {
            uint64_t v76 = *((unsigned __int8 *)v70 + 39);
            if ((v76 & 0x80u) == 0) {
              char v77 = (void *)*((unsigned __int8 *)v70 + 39);
            }
            else {
              char v77 = (void *)v70[3];
            }
            if (v77 == v72)
            {
              size_t v78 = (const void **)(v70 + 2);
              if ((v76 & 0x80) != 0)
              {
                if (!memcmp(*v78, v73, v70[3]))
                {
LABEL_125:
                  uint64_t v35 = v126;
                  if (v71 < 0) {
                    goto LABEL_216;
                  }
                  goto LABEL_217;
                }
              }
              else
              {
                if (!*((unsigned char *)v70 + 39)) {
                  goto LABEL_125;
                }
                long long v79 = v73;
                while (*(unsigned __int8 *)v78 == *(unsigned __int8 *)v79)
                {
                  size_t v78 = (const void **)((char *)v78 + 1);
                  long long v79 = (void **)((char *)v79 + 1);
                  if (!--v76) {
                    goto LABEL_125;
                  }
                }
              }
            }
          }
          else
          {
            if (v75 >= v66) {
              v75 %= v66;
            }
            if (v75 != v68) {
              goto LABEL_143;
            }
          }
          int v70 = (uint64_t *)*v70;
          if (!v70) {
            goto LABEL_143;
          }
        }
      }
      uint64_t v74 = *((void *)&v142 + 1) - 1;
      while (1)
      {
        uint64_t v80 = v70[1];
        if (v80 != v65)
        {
          if ((v80 & v74) != v68) {
            goto LABEL_143;
          }
          goto LABEL_128;
        }
        uint64_t v81 = *((unsigned __int8 *)v70 + 39);
        uint64_t v82 = (v81 & 0x80u) == 0 ? (void *)*((unsigned __int8 *)v70 + 39) : (void *)v70[3];
        if (v82 == v72) {
          break;
        }
LABEL_128:
        int v70 = (uint64_t *)*v70;
        if (!v70) {
          goto LABEL_143;
        }
      }
      size_t v83 = (const void **)(v70 + 2);
      if ((v81 & 0x80) == 0)
      {
        if (!*((unsigned char *)v70 + 39)) {
          goto LABEL_141;
        }
        unint64_t v84 = v73;
        while (*(unsigned __int8 *)v83 == *(unsigned __int8 *)v84)
        {
          size_t v83 = (const void **)((char *)v83 + 1);
          unint64_t v84 = (void **)((char *)v84 + 1);
          if (!--v81) {
            goto LABEL_141;
          }
        }
        goto LABEL_128;
      }
      std::string v124 = v72;
      uint64_t v85 = v74;
      int v86 = memcmp(*v83, v73, v70[3]);
      uint64_t v74 = v85;
      int64_t v72 = v124;
      if (v86) {
        goto LABEL_128;
      }
LABEL_141:
      uint64_t v35 = v126;
      if (v71 < 0) {
LABEL_216:
      }
        operator delete(v127[0]);
LABEL_217:
      if (*(void *)__dst)
      {
        *(void *)&__dst[8] = *(void *)__dst;
        operator delete(*(void **)__dst);
      }
      if (++v36 == v35) {
        goto LABEL_219;
      }
    }
    uint64_t v44 = (uint64_t *)&__dst[24];
    if (*(void *)&__dst[8] != *(void *)__dst) {
      uint64_t v44 = *(uint64_t **)__dst;
    }
    uint64_t v45 = *v44;
    uint64_t v46 = (char **)(*(void *)__dst + 8);
    if (*(void *)&__dst[8] == *(void *)__dst) {
      uint64_t v46 = (char **)&__dst[32];
    }
    int v47 = *v46;
    unint64_t v48 = (unint64_t)&(*v46)[-v45];
    if (v48 > 0x7FFFFFFFFFFFFFF7) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    if (v48 > 0x16)
    {
      uint64_t v59 = (v48 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v48 | 7) != 0x17) {
        uint64_t v59 = v48 | 7;
      }
      uint64_t v60 = v59 + 1;
      std::string v49 = operator new(v59 + 1);
      v127[1] = (void *)v48;
      int64_t v128 = v60 | 0x8000000000000000;
      v127[0] = v49;
      if ((char *)v45 != v47) {
        goto LABEL_73;
      }
    }
    else
    {
      HIBYTE(v128) = *(unsigned char *)v46 - v45;
      std::string v49 = v127;
      if ((char *)v45 != v47)
      {
LABEL_73:
        if (v48 < 0x20 || (unint64_t)v49 - v45 < 0x20)
        {
          unint64_t v50 = v49;
          uint64_t v51 = (char *)v45;
        }
        else
        {
          unint64_t v50 = (char *)v49 + (v48 & 0xFFFFFFFFFFFFFFE0);
          uint64_t v51 = (char *)(v45 + (v48 & 0xFFFFFFFFFFFFFFE0));
          char v52 = (long long *)(v45 + 16);
          uint64_t v53 = v49 + 1;
          unint64_t v54 = v48 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            long long v55 = *v52;
            *(v53 - 1) = *(v52 - 1);
            *uint64_t v53 = v55;
            v52 += 2;
            v53 += 2;
            v54 -= 32;
          }
          while (v54);
          if (v48 == (v48 & 0x7FFFFFFFFFFFFFE0)) {
            goto LABEL_86;
          }
        }
        do
        {
          char v61 = *v51++;
          *v50++ = v61;
        }
        while (v51 != v47);
LABEL_86:
        *unint64_t v50 = 0;
        unint64_t v58 = HIBYTE(v128);
        long long v57 = (uint64_t *)v127[0];
        unint64_t v56 = v127[1];
        goto LABEL_87;
      }
    }
    unint64_t v50 = v49;
    goto LABEL_86;
  }
LABEL_219:
  uint64_t v114 = *((void *)&v143 + 1);
  long long v115 = (std::__shared_weak_count *)v139;
  if ((void)v139 && !atomic_fetch_add((atomic_ullong *volatile)(v139 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
    std::__shared_weak_count::__release_weak(v115);
  }
  std::locale::~locale(v136);
  uint64_t v116 = (std::__shared_weak_count *)v141;
  if ((void)v141 && !atomic_fetch_add((atomic_ullong *volatile)(v141 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
    std::__shared_weak_count::__release_weak(v116);
  }
  std::locale::~locale((std::locale *)v140);
  operator delete(v125);
  uint64_t v117 = (void **)v143;
  if ((void)v143)
  {
    do
    {
      std::string v123 = (void **)*v117;
      if (*((char *)v117 + 39) < 0) {
        operator delete(v117[2]);
      }
      operator delete(v117);
      uint64_t v117 = v123;
    }
    while (v123);
  }
  unint64_t v118 = (void *)v142;
  *(void *)&long long v142 = 0;
  if (v118) {
    operator delete(v118);
  }
  uint64_t v119 = (void **)v145;
  if (v145)
  {
    uint64_t v120 = (void **)v146;
    long long v121 = v145;
    if (v146 != v145)
    {
      do
      {
        if (*((char *)v120 - 1) < 0) {
          operator delete(*(v120 - 3));
        }
        v120 -= 3;
      }
      while (v120 != v119);
      long long v121 = v145;
    }
    uint64_t v146 = (std::sub_match<const char *> *)v119;
    operator delete(v121);
  }
  return v114;
}

void sub_2636C826C(_Unwind_Exception *a1)
{
  operator delete(v2);
  std::unordered_set<std::string>::~unordered_set[abi:ne180100](&v3);
  std::vector<std::string>::~vector[abi:ne180100](&v4);
  _Unwind_Resume(a1);
}

void sub_2636C8274()
{
}

void sub_2636C829C(uint64_t a1, int a2)
{
  if (a2) {
    JUMPOUT(0x2636C82A4);
  }
  JUMPOUT(0x2636C812CLL);
}

uint64_t std::unordered_set<std::string>::~unordered_set[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void ***)(a1 + 16);
  if (v2)
  {
    do
    {
      uint64_t v5 = (void **)*v2;
      if (*((char *)v2 + 39) < 0) {
        operator delete(v2[2]);
      }
      operator delete(v2);
      uint64_t v2 = v5;
    }
    while (v5);
  }
  uint64_t v3 = *(void **)a1;
  *(void *)a1 = 0;
  if (v3) {
    operator delete(v3);
  }
  return a1;
}

uint64_t util::compareTwoStringsWithPattern(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)&long long v5 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v87 = 0xAAAAAAAAAAAAAA00;
  v84[1].__end_cap_.__value_ = (std::sub_match<std::__wrap_iter<const char *>> *)0xAAAAAAAAAAAAAAAALL;
  long long v90 = v5;
  uint64_t v85 = 0;
  uint64_t v86 = 0;
  uint64_t v88 = 0;
  uint64_t v89 = 0;
  LOBYTE(v90) = 0;
  BYTE8(v90) = 0;
  uint64_t v91 = 0;
  memset(v84, 0, 41);
  long long v82 = v5;
  long long v83 = v5;
  *(_OWORD *)&v80[0].__locale_ = v5;
  long long v81 = v5;
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]<std::char_traits<char>,std::allocator<char>>((uint64_t)v80, a3, 0);
  char v77 = 0;
  size_t v78 = 0;
  unint64_t v79 = 0;
  tm __p = 0;
  unint64_t v75 = 0;
  unint64_t v76 = 0;
  *(void *)&long long v6 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v95 = 0xAAAAAAAAAAAAAA00;
  v92[1].__end_cap_.__value_ = (std::sub_match<const char *> *)0xAAAAAAAAAAAAAAAALL;
  long long v98 = v6;
  uint64_t v93 = 0;
  uint64_t v94 = 0;
  uint64_t v96 = 0;
  uint64_t v97 = 0;
  LOBYTE(v98) = 0;
  BYTE8(v98) = 0;
  uint64_t v99 = 0;
  memset(v92, 0, 32);
  uint64_t v7 = *(unsigned __int8 *)(a1 + 23);
  if ((v7 & 0x80u) == 0) {
    size_t v8 = (std::sub_match<const char *> *)a1;
  }
  else {
    size_t v8 = *(std::sub_match<const char *> **)a1;
  }
  if ((v7 & 0x80u) != 0) {
    uint64_t v7 = *(void *)(a1 + 8);
  }
  *(_OWORD *)((char *)&v92[1].__begin_ + 1) = 0uLL;
  int v9 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>((uint64_t)v80, v8, (std::sub_match<const char *> *)((char *)v8 + v7), v92, 0);
  uint64_t v10 = *(unsigned __int8 *)(a1 + 23);
  if ((v10 & 0x80u) == 0) {
    uint64_t v11 = a1;
  }
  else {
    uint64_t v11 = *(void *)a1;
  }
  if ((v10 & 0x80u) != 0) {
    uint64_t v10 = *(void *)(a1 + 8);
  }
  std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>(v84, v11, (std::sub_match<std::__wrap_iter<const char *>> *)(v11 + v10), (uint64_t *)v92, 0);
  if (v92[0].__begin_)
  {
    v92[0].__end_ = v92[0].__begin_;
    operator delete(v92[0].__begin_);
  }
  if (v9)
  {
    std::vector<std::ssub_match>::pointer end = v84[0].__end_;
    std::vector<std::ssub_match>::pointer begin = v84[0].__begin_;
    if (v84[0].__begin_ != v84[0].__end_)
    {
      while (1)
      {
        if (!begin->matched)
        {
          memset(v92, 0, 24);
          uint64_t v25 = v78;
          if ((unint64_t)v78 >= v79) {
            goto LABEL_38;
          }
          goto LABEL_16;
        }
        std::__wrap_iter<const char *>::iterator_type i = begin->first.__i_;
        std::__wrap_iter<const char *>::iterator_type v15 = begin->second.__i_;
        unint64_t v17 = v15 - begin->first.__i_;
        if (v17 > 0x7FFFFFFFFFFFFFF7) {
          std::string::__throw_length_error[abi:ne180100]();
        }
        if (v17 > 0x16)
        {
          uint64_t v26 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v17 | 7) != 0x17) {
            uint64_t v26 = v17 | 7;
          }
          uint64_t v27 = v26 + 1;
          long long v18 = (std::sub_match<const char *> *)operator new(v26 + 1);
          v92[0].__end_ = (std::vector<std::csub_match>::pointer)v17;
          v92[0].__end_cap_.__value_ = (std::sub_match<const char *> *)(v27 | 0x8000000000000000);
          v92[0].__begin_ = v18;
          if (i == v15)
          {
LABEL_33:
            LOBYTE(v18->first) = 0;
            uint64_t v25 = v78;
            if ((unint64_t)v78 >= v79) {
              goto LABEL_38;
            }
            goto LABEL_16;
          }
        }
        else
        {
          HIBYTE(v92[0].__end_cap_.__value_) = (_BYTE)v15 - LOBYTE(begin->first.__i_);
          long long v18 = (std::sub_match<const char *> *)v92;
          if (i == v15) {
            goto LABEL_33;
          }
        }
        if (v17 < 0x20 || (unint64_t)((char *)v18 - i) < 0x20) {
          break;
        }
        long long v19 = (std::sub_match<const char *> *)((char *)v18 + (v17 & 0xFFFFFFFFFFFFFFE0));
        long long v20 = &i[v17 & 0xFFFFFFFFFFFFFFE0];
        int v21 = (long long *)(i + 16);
        p_matched = &v18->matched;
        unint64_t v23 = v17 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          long long v24 = *v21;
          *((_OWORD *)p_matched - 1) = *(v21 - 1);
          *(_OWORD *)p_matched = v24;
          v21 += 2;
          p_matched += 32;
          v23 -= 32;
        }
        while (v23);
        if (v17 != (v17 & 0x7FFFFFFFFFFFFFE0)) {
          goto LABEL_36;
        }
LABEL_37:
        LOBYTE(v19->first) = 0;
        uint64_t v25 = v78;
        if ((unint64_t)v78 >= v79)
        {
LABEL_38:
          size_t v78 = std::vector<std::string>::__push_back_slow_path<std::string>(&v77, (uint64_t)v92);
          if (SHIBYTE(v92[0].__end_cap_.__value_) < 0) {
            operator delete(v92[0].__begin_);
          }
          goto LABEL_17;
        }
LABEL_16:
        long long v14 = *(_OWORD *)&v92[0].__begin_;
        *((void *)v25 + 2) = v92[0].__end_cap_.__value_;
        *(_OWORD *)uint64_t v25 = v14;
        size_t v78 = v25 + 24;
LABEL_17:
        if (++begin == end) {
          goto LABEL_40;
        }
      }
      long long v19 = v18;
      long long v20 = i;
      do
      {
LABEL_36:
        char v28 = *v20++;
        LOBYTE(v19->first) = v28;
        long long v19 = (std::sub_match<const char *> *)((char *)v19 + 1);
      }
      while (v20 != v15);
      goto LABEL_37;
    }
LABEL_40:
    long long v29 = (char *)v77;
    long long v30 = v78;
    if (v78 - (unsigned char *)v77 != 24)
    {
      if ((char *)v77 + 24 != v78)
      {
        long long v31 = (char *)v77 + 23;
        do
        {
          int v32 = (void **)(v31 - 23);
          if (*v31 < 0) {
            operator delete(*v32);
          }
          *(_OWORD *)int v32 = *(_OWORD *)(v31 + 1);
          *(void *)(v31 - 7) = *(void *)(v31 + 17);
          unsigned char v31[24] = 0;
          v31 += 24;
          *(v31 - 23) = 0;
          v29 += 24;
        }
        while (v31 + 1 != v30);
        long long v30 = v78;
      }
      while (v30 != v29)
      {
        if (*(v30 - 1) < 0) {
          operator delete(*((void **)v30 - 3));
        }
        v30 -= 24;
      }
      size_t v78 = v29;
    }
    *(void *)&long long v33 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v33 + 1) = 0xAAAAAAAAAAAAAAAALL;
    unint64_t v95 = 0xAAAAAAAAAAAAAA00;
    v92[1].__end_cap_.__value_ = (std::sub_match<const char *> *)0xAAAAAAAAAAAAAAAALL;
    long long v98 = v33;
    uint64_t v93 = 0;
    uint64_t v94 = 0;
    uint64_t v96 = 0;
    uint64_t v97 = 0;
    LOBYTE(v98) = 0;
    BYTE8(v98) = 0;
    uint64_t v99 = 0;
    memset(v92, 0, 32);
    uint64_t v34 = *(unsigned __int8 *)(a2 + 23);
    if ((v34 & 0x80u) == 0) {
      uint64_t v35 = (std::sub_match<const char *> *)a2;
    }
    else {
      uint64_t v35 = *(std::sub_match<const char *> **)a2;
    }
    if ((v34 & 0x80u) != 0) {
      uint64_t v34 = *(void *)(a2 + 8);
    }
    *(_OWORD *)((char *)&v92[1].__begin_ + 1) = 0uLL;
    int v36 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>((uint64_t)v80, v35, (std::sub_match<const char *> *)((char *)v35 + v34), v92, 0);
    uint64_t v37 = *(unsigned __int8 *)(a2 + 23);
    if ((v37 & 0x80u) == 0) {
      uint64_t v38 = a2;
    }
    else {
      uint64_t v38 = *(void *)a2;
    }
    if ((v37 & 0x80u) != 0) {
      uint64_t v37 = *(void *)(a2 + 8);
    }
    std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>(v84, v38, (std::sub_match<std::__wrap_iter<const char *>> *)(v38 + v37), (uint64_t *)v92, 0);
    if (v92[0].__begin_)
    {
      v92[0].__end_ = v92[0].__begin_;
      operator delete(v92[0].__begin_);
    }
    if (v36)
    {
      std::vector<std::ssub_match>::pointer v40 = v84[0].__end_;
      std::vector<std::ssub_match>::pointer v39 = v84[0].__begin_;
      if (v84[0].__begin_ != v84[0].__end_)
      {
        while (1)
        {
          if (!v39->matched)
          {
            memset(v92, 0, 24);
            char v52 = v75;
            if ((unint64_t)v75 >= v76) {
              goto LABEL_89;
            }
            goto LABEL_67;
          }
          std::__wrap_iter<const char *>::iterator_type v43 = v39->first.__i_;
          std::__wrap_iter<const char *>::iterator_type v42 = v39->second.__i_;
          unint64_t v44 = v42 - v39->first.__i_;
          if (v44 > 0x7FFFFFFFFFFFFFF7) {
            std::string::__throw_length_error[abi:ne180100]();
          }
          if (v44 > 0x16)
          {
            uint64_t v53 = (v44 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v44 | 7) != 0x17) {
              uint64_t v53 = v44 | 7;
            }
            uint64_t v54 = v53 + 1;
            uint64_t v45 = (std::sub_match<const char *> *)operator new(v53 + 1);
            v92[0].__end_ = (std::vector<std::csub_match>::pointer)v44;
            v92[0].__end_cap_.__value_ = (std::sub_match<const char *> *)(v54 | 0x8000000000000000);
            v92[0].__begin_ = v45;
            if (v43 == v42)
            {
LABEL_84:
              LOBYTE(v45->first) = 0;
              char v52 = v75;
              if ((unint64_t)v75 >= v76) {
                goto LABEL_89;
              }
              goto LABEL_67;
            }
          }
          else
          {
            HIBYTE(v92[0].__end_cap_.__value_) = (_BYTE)v42 - LOBYTE(v39->first.__i_);
            uint64_t v45 = (std::sub_match<const char *> *)v92;
            if (v43 == v42) {
              goto LABEL_84;
            }
          }
          if (v44 < 0x20 || (unint64_t)((char *)v45 - v43) < 0x20) {
            break;
          }
          uint64_t v46 = (std::sub_match<const char *> *)((char *)v45 + (v44 & 0xFFFFFFFFFFFFFFE0));
          int v47 = &v43[v44 & 0xFFFFFFFFFFFFFFE0];
          unint64_t v48 = (long long *)(v43 + 16);
          std::string v49 = &v45->matched;
          unint64_t v50 = v44 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            long long v51 = *v48;
            *((_OWORD *)v49 - 1) = *(v48 - 1);
            *(_OWORD *)std::string v49 = v51;
            v48 += 2;
            v49 += 32;
            v50 -= 32;
          }
          while (v50);
          if (v44 != (v44 & 0x7FFFFFFFFFFFFFE0)) {
            goto LABEL_87;
          }
LABEL_88:
          LOBYTE(v46->first) = 0;
          char v52 = v75;
          if ((unint64_t)v75 >= v76)
          {
LABEL_89:
            unint64_t v75 = std::vector<std::string>::__push_back_slow_path<std::string>(&__p, (uint64_t)v92);
            if (SHIBYTE(v92[0].__end_cap_.__value_) < 0) {
              operator delete(v92[0].__begin_);
            }
            goto LABEL_68;
          }
LABEL_67:
          long long v41 = *(_OWORD *)&v92[0].__begin_;
          *((void *)v52 + 2) = v92[0].__end_cap_.__value_;
          *(_OWORD *)char v52 = v41;
          unint64_t v75 = v52 + 24;
LABEL_68:
          if (++v39 == v40) {
            goto LABEL_91;
          }
        }
        uint64_t v46 = v45;
        int v47 = v43;
        do
        {
LABEL_87:
          char v55 = *v47++;
          LOBYTE(v46->first) = v55;
          uint64_t v46 = (std::sub_match<const char *> *)((char *)v46 + 1);
        }
        while (v47 != v42);
        goto LABEL_88;
      }
LABEL_91:
      long long v57 = (char *)__p;
      unint64_t v56 = v75;
      if (v75 - (unsigned char *)__p == 24)
      {
        unint64_t v58 = (char *)v77;
        uint64_t v59 = v78;
        uint64_t v60 = 1;
        if (v77 != v78) {
          goto LABEL_117;
        }
LABEL_105:
        if (v57) {
          goto LABEL_106;
        }
LABEL_134:
        unint64_t v64 = (char *)v77;
        if (v77) {
          goto LABEL_135;
        }
        goto LABEL_108;
      }
      if ((char *)__p + 24 != v75)
      {
        char v61 = (char *)__p + 23;
        do
        {
          std::string v62 = (void **)(v61 - 23);
          if (*v61 < 0) {
            operator delete(*v62);
          }
          *(_OWORD *)std::string v62 = *(_OWORD *)(v61 + 1);
          *(void *)(v61 - 7) = *(void *)(v61 + 17);
          v61[24] = 0;
          v61 += 24;
          *(v61 - 23) = 0;
          v57 += 24;
        }
        while (v61 + 1 != v56);
        unint64_t v56 = v75;
      }
      while (v56 != v57)
      {
        if (*(v56 - 1) < 0) {
          operator delete(*((void **)v56 - 3));
        }
        v56 -= 24;
      }
      unint64_t v75 = v57;
      long long v57 = (char *)__p;
      unint64_t v58 = (char *)v77;
      uint64_t v59 = v78;
      uint64_t v60 = 1;
      if (v77 == v78) {
        goto LABEL_105;
      }
      while (1)
      {
LABEL_117:
        uint64_t v66 = v58[23];
        if ((v66 & 0x80u) == 0) {
          uint64_t v67 = v58[23];
        }
        else {
          uint64_t v67 = *((void *)v58 + 1);
        }
        uint64_t v68 = v57[23];
        int v69 = (char)v68;
        if ((v68 & 0x80u) != 0) {
          uint64_t v68 = *((void *)v57 + 1);
        }
        if (v67 != v68) {
          break;
        }
        if (v69 >= 0) {
          int v70 = v57;
        }
        else {
          int v70 = *(char **)v57;
        }
        if ((v66 & 0x80) != 0)
        {
          if (memcmp(*(const void **)v58, v70, *((void *)v58 + 1))) {
            break;
          }
        }
        else if (v58[23])
        {
          uint64_t v71 = 0;
          while (v58[v71] == v70[v71])
          {
            if (v66 == ++v71) {
              goto LABEL_116;
            }
          }
          break;
        }
LABEL_116:
        v58 += 24;
        v57 += 24;
        if (v58 == v59) {
          goto LABEL_133;
        }
      }
    }
  }
  uint64_t v60 = 0;
LABEL_133:
  long long v57 = (char *)__p;
  if (!__p) {
    goto LABEL_134;
  }
LABEL_106:
  unint64_t v63 = v75;
  if (v75 != v57)
  {
    do
    {
      if (*(v63 - 1) < 0) {
        operator delete(*((void **)v63 - 3));
      }
      v63 -= 24;
    }
    while (v63 != v57);
    unint64_t v75 = v57;
    operator delete(__p);
    unint64_t v64 = (char *)v77;
    if (v77) {
      goto LABEL_135;
    }
LABEL_108:
    unint64_t v65 = (std::__shared_weak_count *)v83;
    if (!(void)v83) {
      goto LABEL_144;
    }
    goto LABEL_142;
  }
  unint64_t v75 = v57;
  operator delete(v57);
  unint64_t v64 = (char *)v77;
  if (!v77) {
    goto LABEL_108;
  }
LABEL_135:
  int64_t v72 = v78;
  if (v78 == v64)
  {
    size_t v78 = v64;
    operator delete(v64);
    unint64_t v65 = (std::__shared_weak_count *)v83;
    if (!(void)v83) {
      goto LABEL_144;
    }
    goto LABEL_142;
  }
  do
  {
    if (*(v72 - 1) < 0) {
      operator delete(*((void **)v72 - 3));
    }
    v72 -= 24;
  }
  while (v72 != v64);
  size_t v78 = v64;
  operator delete(v77);
  unint64_t v65 = (std::__shared_weak_count *)v83;
  if ((void)v83)
  {
LABEL_142:
    if (!atomic_fetch_add(&v65->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
      std::__shared_weak_count::__release_weak(v65);
    }
  }
LABEL_144:
  std::locale::~locale(v80);
  if (v84[0].__begin_)
  {
    v84[0].__end_ = v84[0].__begin_;
    operator delete(v84[0].__begin_);
  }
  return v60;
}

void sub_2636C8B04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, std::locale a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24)
{
  uint64_t v26 = *(void **)(v24 - 192);
  if (v26)
  {
    *(void *)(v24 - 184) = v26;
    operator delete(v26);
  }
  std::vector<std::string>::~vector[abi:ne180100]((void **)&a9);
  std::vector<std::string>::~vector[abi:ne180100](&a12);
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&a15);
  if (__p)
  {
    a24 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(void *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    if (a4 >= 0xAAAAAAAAAAAAAABLL) {
      std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::__throw_length_error[abi:ne180100]();
    }
    size_t v8 = (char *)operator new(24 * a4);
    *a1 = v8;
    a1[1] = v8;
    a1[2] = &v8[24 * a4];
    if (a2 != a3)
    {
      uint64_t v9 = 0;
      do
      {
        uint64_t v10 = (std::string *)&v8[v9];
        uint64_t v11 = a2 + v9;
        if (*(char *)(a2 + v9 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(v10, *(const std::string::value_type **)v11, *(void *)(v11 + 8));
        }
        else
        {
          *(_OWORD *)&v10->__r_.__value_.__l.__data_ = *(_OWORD *)v11;
          v10->__r_.__value_.__r.__words[2] = *(void *)(v11 + 16);
        }
        v9 += 24;
      }
      while (a2 + v9 != a3);
      v8 += v9;
    }
    a1[1] = v8;
  }
}

void sub_2636C8C60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_2636C8C74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  for (; v11; v11 -= 24)
  {
    if (*(char *)(v10 + v11 - 1) < 0) {
      operator delete(*(void **)(v10 + v11 - 24));
    }
  }
  *(void *)(v9 + 8) = v10;
  std::__exception_guard_exceptions<std::vector<std::string>::__destroy_vector>::~__exception_guard_exceptions[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void ***std::__exception_guard_exceptions<std::vector<std::string>::__destroy_vector>::~__exception_guard_exceptions[abi:ne180100](void ***result)
{
  uint64_t v1 = result;
  if (!*((unsigned char *)result + 8))
  {
    uint64_t v2 = *result;
    uint64_t v3 = (void **)**result;
    if (v3)
    {
      uint64_t v4 = (void **)v2[1];
      long long v5 = **result;
      if (v4 != v3)
      {
        do
        {
          if (*((char *)v4 - 1) < 0) {
            operator delete(*(v4 - 3));
          }
          v4 -= 3;
        }
        while (v4 != v3);
        long long v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

__n128 std::__introsort<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*,false>(unint64_t a1, const void **a2, uint64_t a3, char a4, __n128 result)
{
LABEL_1:
  v268 = a2 - 3;
  v271 = a2;
  v260 = a2 - 9;
  v261 = a2 - 6;
  unint64_t k = a1;
  while (1)
  {
    a1 = k;
    uint64_t v11 = (uint64_t)a2 - k;
    unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)a2 - k) >> 3);
    if (v6 || !v5)
    {
      switch(v12)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          uint64_t v119 = (__n128 *)(a2 - 3);
          int v120 = *((char *)a2 - 1);
          if (v120 >= 0) {
            long long v121 = a2 - 3;
          }
          else {
            long long v121 = (const void **)*(a2 - 3);
          }
          if (v120 >= 0) {
            size_t v122 = *((unsigned __int8 *)a2 - 1);
          }
          else {
            size_t v122 = (size_t)*(a2 - 2);
          }
          int v123 = *(char *)(a1 + 23);
          std::string v124 = *(void **)a1;
          std::locale v125 = *(const void **)(a1 + 8);
          if (v123 >= 0) {
            long long v126 = (const void *)a1;
          }
          else {
            long long v126 = *(const void **)a1;
          }
          if (v123 >= 0) {
            size_t v127 = *(unsigned __int8 *)(a1 + 23);
          }
          else {
            size_t v127 = *(void *)(a1 + 8);
          }
          if (v127 >= v122) {
            size_t v128 = v122;
          }
          else {
            size_t v128 = v127;
          }
          int v129 = memcmp(v121, v126, v128);
          if (v129)
          {
            if (v129 < 0) {
              return result;
            }
          }
          else if (v122 <= v127)
          {
            return result;
          }
          v258 = *(const void **)(a1 + 16);
          uint64_t v259 = (uint64_t)*(a2 - 1);
          BOOL result = *v119;
          *(__n128 *)a1 = *v119;
          *(void *)(a1 + 16) = v259;
          *(a2 - 3) = v124;
          *(a2 - 2) = v125;
          *(a2 - 1) = v258;
          break;
        case 3uLL:
          result.n128_u64[0] = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*>(a1, a1 + 24, v268).n128_u64[0];
          return result;
        case 4uLL:
          result.n128_u64[0] = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*>(a1, a1 + 24, a1 + 48, v268).n128_u64[0];
          return result;
        case 5uLL:
          result.n128_u64[0] = std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*>(a1, a1 + 24, a1 + 48, a1 + 72, v268).n128_u64[0];
          return result;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v11 <= 575)
    {
      if (a4)
      {
        if ((const void **)a1 == a2) {
          return result;
        }
        long long v130 = (const void *)(a1 + 24);
        if ((const void **)(a1 + 24) == a2) {
          return result;
        }
        uint64_t v131 = 0;
        unint64_t v132 = a1;
        while (2)
        {
          uint64_t v134 = (__n128 *)v132;
          unint64_t v132 = (unint64_t)v130;
          int v135 = v134[2].n128_i8[15];
          if (v135 >= 0) {
            long long v136 = v130;
          }
          else {
            long long v136 = (const void *)v134[1].n128_u64[1];
          }
          if (v135 >= 0) {
            size_t v137 = v134[2].n128_u8[15];
          }
          else {
            size_t v137 = v134[2].n128_u64[0];
          }
          int v138 = v134[1].n128_i8[7];
          if (v138 >= 0) {
            long long v139 = v134;
          }
          else {
            long long v139 = (__n128 *)v134->n128_u64[0];
          }
          if (v138 >= 0) {
            size_t v140 = v134[1].n128_u8[7];
          }
          else {
            size_t v140 = v134->n128_u64[1];
          }
          if (v140 >= v137) {
            size_t v141 = v137;
          }
          else {
            size_t v141 = v140;
          }
          int v142 = memcmp(v136, v139, v141);
          if (v142)
          {
            if (v142 < 0)
            {
LABEL_266:
              long long v130 = (const void *)(v132 + 24);
              v131 += 24;
              if ((const void **)(v132 + 24) == v271) {
                return result;
              }
              continue;
            }
          }
          else if (v137 <= v140)
          {
            goto LABEL_266;
          }
          break;
        }
        __n128 v143 = *(__n128 *)v132;
        int64_t v274 = *(void *)(v132 + 16);
        __n128 v273 = v143;
        if (v274 >= 0) {
          unint64_t v144 = &v273;
        }
        else {
          unint64_t v144 = (__n128 *)v143.n128_u64[0];
        }
        if (v274 >= 0) {
          size_t v145 = HIBYTE(v274);
        }
        else {
          size_t v145 = v143.n128_u64[1];
        }
        *(void *)(v132 + 16) = v134[1].n128_u64[0];
        *(__n128 *)unint64_t v132 = *v134;
        v134[1].n128_u8[7] = 0;
        v134->n128_u8[0] = 0;
        uint64_t v133 = (__n128 *)a1;
        if (v134 != (__n128 *)a1)
        {
          uint64_t v146 = v131;
          while (1)
          {
            uint64_t v147 = a1 + v146;
            int v148 = *(char *)(a1 + v146 - 1);
            if (v148 >= 0) {
              uint64_t v149 = (const void *)(a1 + v146 - 24);
            }
            else {
              uint64_t v149 = *(const void **)(a1 + v146 - 24);
            }
            if (v148 >= 0) {
              size_t v150 = *(unsigned __int8 *)(a1 + v146 - 1);
            }
            else {
              size_t v150 = *(void *)(a1 + v146 - 16);
            }
            if (v150 >= v145) {
              size_t v151 = v145;
            }
            else {
              size_t v151 = v150;
            }
            int v152 = memcmp(v144, v149, v151);
            if (v152)
            {
              if (v152 < 0)
              {
                uint64_t v133 = (__n128 *)(a1 + v146);
                break;
              }
            }
            else if (v145 <= v150)
            {
              uint64_t v133 = v134;
              break;
            }
            uint64_t v134 = (__n128 *)((char *)v134 - 24);
            *(_OWORD *)uint64_t v147 = *(_OWORD *)(a1 + v146 - 24);
            *(void *)(v147 + 16) = *(void *)(a1 + v146 - 8);
            *(unsigned char *)(v147 - 1) = 0;
            *(unsigned char *)(v147 - 24) = 0;
            v146 -= 24;
            if (!v146)
            {
              uint64_t v133 = (__n128 *)a1;
              break;
            }
          }
        }
        BOOL result = v273;
        v133[1].n128_u64[0] = v274;
        *uint64_t v133 = result;
        goto LABEL_266;
      }
      if ((const void **)a1 == a2) {
        return result;
      }
      v239 = (const void *)(a1 + 24);
      if ((const void **)(a1 + 24) == a2) {
        return result;
      }
LABEL_478:
      v240 = (const void **)a1;
      a1 = (unint64_t)v239;
      int v241 = *((char *)v240 + 47);
      if (v241 >= 0) {
        v242 = v239;
      }
      else {
        v242 = v240[3];
      }
      if (v241 >= 0) {
        size_t v243 = *((unsigned __int8 *)v240 + 47);
      }
      else {
        size_t v243 = (size_t)v240[4];
      }
      int v244 = *((char *)v240 + 23);
      if (v244 >= 0) {
        v245 = v240;
      }
      else {
        v245 = *v240;
      }
      if (v244 >= 0) {
        size_t v246 = *((unsigned __int8 *)v240 + 23);
      }
      else {
        size_t v246 = (size_t)v240[1];
      }
      if (v246 >= v243) {
        size_t v247 = v243;
      }
      else {
        size_t v247 = v246;
      }
      int v248 = memcmp(v242, v245, v247);
      if (v248)
      {
        if (v248 < 0) {
          goto LABEL_477;
        }
      }
      else if (v243 <= v246)
      {
        goto LABEL_477;
      }
      __n128 v249 = *(__n128 *)a1;
      int64_t v274 = *(void *)(a1 + 16);
      __n128 v273 = v249;
      *(void *)(a1 + 8) = 0;
      *(void *)(a1 + 16) = 0;
      *(void *)a1 = 0;
      if (v274 >= 0) {
        v250 = &v273;
      }
      else {
        v250 = (__n128 *)v273.n128_u64[0];
      }
      if (v274 >= 0) {
        size_t v251 = HIBYTE(v274);
      }
      else {
        size_t v251 = v273.n128_u64[1];
      }
      for (unint64_t i = a1; ; i -= 24)
      {
        *(_OWORD *)unint64_t i = *(_OWORD *)(i - 24);
        *(void *)(i + 16) = *(void *)(i - 8);
        *(unsigned char *)(i - 1) = 0;
        *(unsigned char *)(i - 24) = 0;
        int v253 = *(char *)(i - 25);
        if (v253 >= 0) {
          v254 = (const void *)(i - 48);
        }
        else {
          v254 = *(const void **)(i - 48);
        }
        if (v253 >= 0) {
          size_t v255 = *(unsigned __int8 *)(i - 25);
        }
        else {
          size_t v255 = *(void *)(i - 40);
        }
        if (v255 >= v251) {
          size_t v256 = v251;
        }
        else {
          size_t v256 = v255;
        }
        int v257 = memcmp(v250, v254, v256);
        if (v257)
        {
          if (v257 < 0)
          {
LABEL_476:
            BOOL result = v273;
            *(void *)(i - 8) = v274;
            *(__n128 *)(i - 24) = result;
LABEL_477:
            v239 = (const void *)(a1 + 24);
            if ((const void **)(a1 + 24) == a2) {
              return result;
            }
            goto LABEL_478;
          }
        }
        else if (v251 <= v255)
        {
          goto LABEL_476;
        }
      }
    }
    if (!a3) {
      break;
    }
    unint64_t v13 = v12 >> 1;
    uint64_t v14 = a1 + 24 * (v12 >> 1);
    if ((unint64_t)v11 < 0xC01)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*>(v14, a1, v268);
      uint64_t v265 = a3 - 1;
      if ((a4 & 1) == 0)
      {
LABEL_10:
        int v19 = *(char *)(a1 - 1);
        if (v19 >= 0) {
          long long v20 = (const void *)(a1 - 24);
        }
        else {
          long long v20 = *(const void **)(a1 - 24);
        }
        if (v19 >= 0) {
          size_t v21 = *(unsigned __int8 *)(a1 - 1);
        }
        else {
          size_t v21 = *(void *)(a1 - 16);
        }
        int v22 = *(char *)(a1 + 23);
        if (v22 >= 0) {
          unint64_t v23 = (const void *)a1;
        }
        else {
          unint64_t v23 = *(const void **)a1;
        }
        if (v22 >= 0) {
          size_t v24 = *(unsigned __int8 *)(a1 + 23);
        }
        else {
          size_t v24 = *(void *)(a1 + 8);
        }
        if (v24 >= v21) {
          size_t v25 = v21;
        }
        else {
          size_t v25 = v24;
        }
        int v26 = memcmp(v20, v23, v25);
        if (v26)
        {
          if (v26 < 0) {
            goto LABEL_125;
          }
        }
        else if (v21 <= v24)
        {
LABEL_125:
          __n128 v72 = *(__n128 *)a1;
          int64_t v274 = *(void *)(a1 + 16);
          __n128 v273 = v72;
          *(void *)(a1 + 8) = 0;
          *(void *)(a1 + 16) = 0;
          *(void *)a1 = 0;
          uint64_t v73 = a2;
          if (v274 >= 0) {
            uint64_t v74 = &v273;
          }
          else {
            uint64_t v74 = (__n128 *)v273.n128_u64[0];
          }
          if (v274 >= 0) {
            size_t v75 = HIBYTE(v274);
          }
          else {
            size_t v75 = v273.n128_u64[1];
          }
          size_t v76 = *((unsigned __int8 *)v73 - 1);
          size_t v78 = (const void **)*(v73 - 3);
          char v77 = *(v73 - 2);
          if ((v76 & 0x80u) == 0) {
            unint64_t v79 = v268;
          }
          else {
            unint64_t v79 = (const void **)*(v73 - 3);
          }
          if ((v76 & 0x80u) == 0) {
            size_t v80 = *((unsigned __int8 *)v73 - 1);
          }
          else {
            size_t v80 = (size_t)*(v73 - 2);
          }
          if (v80 >= v75) {
            size_t v81 = v75;
          }
          else {
            size_t v81 = v80;
          }
          int v82 = memcmp(v74, v79, v81);
          if (v82)
          {
            if ((v82 & 0x80000000) == 0)
            {
LABEL_142:
              unint64_t v83 = a1 + 24;
              do
              {
                while (1)
                {
                  unint64_t k = v83;
                  uint64_t v84 = *(unsigned __int8 *)(v83 + 23);
                  uint64_t v85 = (v84 & 0x80u) == 0 ? (const void *)k : *(const void **)k;
                  size_t v86 = (v84 & 0x80u) == 0 ? v84 : *(void *)(k + 8);
                  size_t v87 = v86 >= v75 ? v75 : v86;
                  int v88 = memcmp(v74, v85, v87);
                  unint64_t v83 = k + 24;
                  if (v88) {
                    break;
                  }
                  if (v75 > v86) {
                    goto LABEL_155;
                  }
                }
              }
              while (v88 < 0);
LABEL_155:
              unint64_t j = v271;
              if (k < (unint64_t)v271)
              {
                for (j = v268; ; char v77 = j[1])
                {
                  if ((v76 & 0x80u) == 0) {
                    uint64_t v91 = j;
                  }
                  else {
                    uint64_t v91 = v78;
                  }
                  if ((v76 & 0x80u) == 0) {
                    size_t v92 = v76;
                  }
                  else {
                    size_t v92 = (size_t)v77;
                  }
                  if (v92 >= v75) {
                    size_t v93 = v75;
                  }
                  else {
                    size_t v93 = v92;
                  }
                  int v94 = memcmp(v74, v91, v93);
                  if (v94)
                  {
                    if (v94 < 0) {
                      break;
                    }
                  }
                  else if (v75 <= v92)
                  {
                    break;
                  }
                  long long v90 = (const void **)*(j - 3);
                  j -= 3;
                  size_t v78 = v90;
                  size_t v76 = *((unsigned __int8 *)j + 23);
                }
              }
              if (k < (unint64_t)j)
              {
                unint64_t v95 = *(const void **)k;
                do
                {
                  long long v96 = *(_OWORD *)(k + 8);
                  long long v97 = *(_OWORD *)j;
                  *(void *)(k + 16) = j[2];
                  *(_OWORD *)unint64_t k = v97;
                  *unint64_t j = v95;
                  *(_OWORD *)(j + 1) = v96;
                  if (v274 >= 0) {
                    long long v98 = &v273;
                  }
                  else {
                    long long v98 = (__n128 *)v273.n128_u64[0];
                  }
                  if (v274 >= 0) {
                    unint64_t v99 = HIBYTE(v274);
                  }
                  else {
                    unint64_t v99 = v273.n128_u64[1];
                  }
                  unint64_t v100 = k + 24;
                  do
                  {
                    while (1)
                    {
                      unint64_t k = v100;
                      uint64_t v101 = *(unsigned __int8 *)(v100 + 23);
                      unint64_t v95 = *(const void **)k;
                      uint64_t v102 = (v101 & 0x80u) == 0 ? (const void *)k : *(const void **)k;
                      unint64_t v103 = (v101 & 0x80u) == 0 ? v101 : *(void *)(k + 8);
                      size_t v104 = v103 >= v99 ? v99 : v103;
                      int v105 = memcmp(v98, v102, v104);
                      unint64_t v100 = k + 24;
                      if (v105) {
                        break;
                      }
                      if (v99 > v103) {
                        goto LABEL_192;
                      }
                    }
                  }
                  while (v105 < 0);
LABEL_192:
                  uint8x8_t v106 = j - 3;
                  do
                  {
                    while (1)
                    {
                      unint64_t j = v106;
                      uint64_t v107 = (const void *)*((unsigned __int8 *)v106 + 23);
                      uint64_t v108 = (char)v107 >= 0 ? j : (const void **)*j;
                      std::string::size_type v109 = (char)v107 >= 0 ? v107 : j[1];
                      size_t v110 = (unint64_t)v109 >= v99 ? v99 : (size_t)v109;
                      int v111 = memcmp(v98, v108, v110);
                      uint8x8_t v106 = j - 3;
                      if (v111) {
                        break;
                      }
                      if (v99 <= (unint64_t)v109) {
                        goto LABEL_172;
                      }
                    }
                  }
                  while ((v111 & 0x80000000) == 0);
LABEL_172:
                  ;
                }
                while (k < (unint64_t)j);
              }
              uint64_t v112 = (__n128 *)(k - 24);
              BOOL v5 = k - 24 >= a1;
              BOOL v6 = k - 24 == a1;
              if (k - 24 == a1)
              {
                a2 = v271;
                a3 = v265;
                if (*(char *)(k - 1) < 0) {
                  operator delete(*(void **)a1);
                }
              }
              else
              {
                if (*(char *)(a1 + 23) < 0) {
                  operator delete(*(void **)a1);
                }
                __n128 v113 = *v112;
                *(void *)(a1 + 16) = *(void *)(k - 8);
                *(__n128 *)a1 = v113;
                *(unsigned char *)(k - 1) = 0;
                *(unsigned char *)(k - 24) = 0;
                a2 = v271;
                a3 = v265;
              }
              a4 = 0;
              BOOL result = v273;
              *(void *)(k - 8) = v274;
              *uint64_t v112 = result;
              continue;
            }
          }
          else if (v75 > v80)
          {
            goto LABEL_142;
          }
          for (unint64_t k = a1 + 24; k < (unint64_t)v271; k += 24)
          {
            int v114 = *(char *)(k + 23);
            if (v114 >= 0) {
              long long v115 = (const void *)k;
            }
            else {
              long long v115 = *(const void **)k;
            }
            if (v114 >= 0) {
              size_t v116 = *(unsigned __int8 *)(k + 23);
            }
            else {
              size_t v116 = *(void *)(k + 8);
            }
            if (v116 >= v75) {
              size_t v117 = v75;
            }
            else {
              size_t v117 = v116;
            }
            int v118 = memcmp(v74, v115, v117);
            if (v118)
            {
              if ((v118 & 0x80000000) == 0) {
                goto LABEL_155;
              }
            }
            else if (v75 > v116)
            {
              goto LABEL_155;
            }
          }
          goto LABEL_155;
        }
      }
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*>(a1, v14, v268);
      uint64_t v15 = 24 * v13;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*>(a1 + 24, v15 + a1 - 24, v261);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*>(a1 + 48, a1 + 24 + v15, v260);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*>(v15 + a1 - 24, v14, (const void **)(a1 + 24 + v15));
      long long v16 = *(void **)a1;
      long long v17 = *(_OWORD *)(a1 + 8);
      long long v18 = *(_OWORD *)v14;
      *(void *)(a1 + 16) = *(void *)(v14 + 16);
      *(_OWORD *)a1 = v18;
      *(void *)uint64_t v14 = v16;
      *(_OWORD *)(v14 + 8) = v17;
      uint64_t v265 = a3 - 1;
      if ((a4 & 1) == 0) {
        goto LABEL_10;
      }
    }
    uint64_t v27 = 0;
    __n128 v28 = *(__n128 *)a1;
    int64_t v274 = *(void *)(a1 + 16);
    __n128 v273 = v28;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    if (v274 >= 0) {
      long long v29 = &v273;
    }
    else {
      long long v29 = (__n128 *)v273.n128_u64[0];
    }
    if (v274 >= 0) {
      unint64_t v30 = HIBYTE(v274);
    }
    else {
      unint64_t v30 = v273.n128_u64[1];
    }
    while (1)
    {
      long long v31 = *(const void **)(a1 + v27 + 24);
      int v32 = *(char *)(a1 + v27 + 47);
      long long v33 = v32 >= 0 ? (const void *)(a1 + v27 + 24) : *(const void **)(a1 + v27 + 24);
      unint64_t v34 = v32 >= 0 ? *(unsigned __int8 *)(a1 + v27 + 47) : *(void *)(a1 + v27 + 32);
      size_t v35 = v30 >= v34 ? v34 : v30;
      int v36 = memcmp(v33, v29, v35);
      if (v36) {
        break;
      }
      if (v34 <= v30) {
        goto LABEL_46;
      }
LABEL_34:
      v27 += 24;
    }
    if ((v36 & 0x80000000) == 0) {
      goto LABEL_34;
    }
LABEL_46:
    unint64_t v37 = a1 + v27 + 24;
    uint64_t v38 = v268;
    if (v27)
    {
      do
      {
        while (1)
        {
          std::vector<std::ssub_match>::pointer v39 = v38;
          uint64_t v46 = (const void *)*((unsigned __int8 *)v38 + 23);
          int v47 = (char)v46 >= 0 ? v39 : (const void **)*v39;
          unint64_t v48 = (unint64_t)((char)v46 >= 0 ? v46 : v39[1]);
          size_t v49 = v30 >= v48 ? v48 : v30;
          int v50 = memcmp(v47, v29, v49);
          uint64_t v38 = v39 - 3;
          if (v50) {
            break;
          }
          if (v48 > v30) {
            goto LABEL_77;
          }
        }
      }
      while (v50 < 0);
    }
    else
    {
      std::vector<std::ssub_match>::pointer v39 = v271;
      if (v37 < (unint64_t)v271)
      {
        std::vector<std::ssub_match>::pointer v40 = v268;
        do
        {
          while (1)
          {
            std::vector<std::ssub_match>::pointer v39 = v40;
            long long v41 = (const void *)*((unsigned __int8 *)v40 + 23);
            std::__wrap_iter<const char *>::iterator_type v42 = (char)v41 >= 0 ? v39 : (const void **)*v39;
            unint64_t v43 = (unint64_t)((char)v41 >= 0 ? v41 : v39[1]);
            size_t v44 = v30 >= v43 ? v43 : v30;
            int v45 = memcmp(v42, v29, v44);
            std::vector<std::ssub_match>::pointer v40 = v39 - 3;
            if (!v45) {
              break;
            }
            if (v37 >= (unint64_t)v39 || (v45 & 0x80000000) == 0) {
              goto LABEL_77;
            }
          }
        }
        while (v37 < (unint64_t)v39 && v43 <= v30);
      }
    }
LABEL_77:
    if (v37 >= (unint64_t)v39)
    {
      unint64_t k = v37;
    }
    else
    {
      long long v51 = v39;
      unint64_t k = v37;
      do
      {
        long long v52 = *(_OWORD *)(k + 8);
        long long v53 = *(_OWORD *)v51;
        *(void *)(k + 16) = v51[2];
        *(_OWORD *)unint64_t k = v53;
        char *v51 = v31;
        *(_OWORD *)(v51 + 1) = v52;
        if (v274 >= 0) {
          uint64_t v54 = &v273;
        }
        else {
          uint64_t v54 = (__n128 *)v273.n128_u64[0];
        }
        if (v274 >= 0) {
          unint64_t v55 = HIBYTE(v274);
        }
        else {
          unint64_t v55 = v273.n128_u64[1];
        }
        unint64_t v56 = k + 24;
        do
        {
          while (1)
          {
            unint64_t k = v56;
            uint64_t v57 = *(unsigned __int8 *)(v56 + 23);
            long long v31 = *(const void **)k;
            unint64_t v58 = (v57 & 0x80u) == 0 ? (const void *)k : *(const void **)k;
            unint64_t v59 = (v57 & 0x80u) == 0 ? v57 : *(void *)(k + 8);
            size_t v60 = v55 >= v59 ? v59 : v55;
            int v61 = memcmp(v58, v54, v60);
            unint64_t v56 = k + 24;
            if (v61) {
              break;
            }
            if (v59 <= v55) {
              goto LABEL_99;
            }
          }
        }
        while ((v61 & 0x80000000) == 0);
LABEL_99:
        std::string v62 = v51 - 3;
        do
        {
          while (1)
          {
            long long v51 = v62;
            unint64_t v63 = (const void *)*((unsigned __int8 *)v62 + 23);
            unint64_t v64 = (char)v63 >= 0 ? v51 : (const void **)*v51;
            unint64_t v65 = (unint64_t)((char)v63 >= 0 ? v63 : v51[1]);
            size_t v66 = v55 >= v65 ? v65 : v55;
            int v67 = memcmp(v64, v54, v66);
            std::string v62 = v51 - 3;
            if (v67) {
              break;
            }
            if (v65 > v55) {
              goto LABEL_79;
            }
          }
        }
        while (v67 < 0);
LABEL_79:
        ;
      }
      while (k < (unint64_t)v51);
    }
    uint64_t v68 = (__n128 *)(k - 24);
    if (k - 24 == a1)
    {
      a2 = v271;
      a3 = v265;
      if (*(char *)(k - 1) < 0) {
        operator delete(*(void **)a1);
      }
    }
    else
    {
      a2 = v271;
      a3 = v265;
      if (*(char *)(a1 + 23) < 0) {
        operator delete(*(void **)a1);
      }
      __n128 v69 = *v68;
      *(void *)(a1 + 16) = *(void *)(k - 8);
      *(__n128 *)a1 = v69;
      *(unsigned char *)(k - 1) = 0;
      *(unsigned char *)(k - 24) = 0;
    }
    __n128 v70 = v273;
    *(void *)(k - 8) = v274;
    *uint64_t v68 = v70;
    if (v37 < (unint64_t)v39)
    {
LABEL_123:
      std::__introsort<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*,false>(a1, k - 24, a3, a4 & 1);
      a4 = 0;
    }
    else
    {
      BOOL v71 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*>(a1, (const void **)(k - 24));
      if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*>(k, a2))
      {
        a2 = (const void **)(k - 24);
        if (v71) {
          return result;
        }
        goto LABEL_1;
      }
      if (!v71) {
        goto LABEL_123;
      }
    }
  }
  if ((const void **)a1 == a2) {
    return result;
  }
  int64_t v153 = (v12 - 2) >> 1;
  int64_t v154 = v153;
  while (2)
  {
    int64_t v156 = v154;
    if (v153 >= v154)
    {
      uint64_t v157 = (2 * v154) | 1;
      unint64_t v158 = a1 + 24 * v157;
      uint64_t v159 = 2 * v154 + 2;
      if (v159 >= (uint64_t)v12) {
        goto LABEL_337;
      }
      uint64_t v160 = (const void **)(v158 + 24);
      int v161 = *(char *)(v158 + 23);
      if (v161 >= 0) {
        long long v162 = (const void *)(a1 + 24 * v157);
      }
      else {
        long long v162 = *(const void **)v158;
      }
      if (v161 >= 0) {
        size_t v163 = *(unsigned __int8 *)(v158 + 23);
      }
      else {
        size_t v163 = *(void *)(v158 + 8);
      }
      int v164 = *(char *)(v158 + 47);
      if (v164 >= 0) {
        v165 = (const void *)(v158 + 24);
      }
      else {
        v165 = *(const void **)(v158 + 24);
      }
      if (v164 >= 0) {
        size_t v166 = *(unsigned __int8 *)(v158 + 47);
      }
      else {
        size_t v166 = *(void *)(v158 + 32);
      }
      if (v166 >= v163) {
        size_t v167 = v163;
      }
      else {
        size_t v167 = v166;
      }
      int v168 = memcmp(v162, v165, v167);
      if (v168)
      {
        a2 = v271;
        if (v168 < 0)
        {
LABEL_337:
          uint64_t v160 = (const void **)(a1 + 24 * v157);
          uint64_t v159 = (2 * v156) | 1;
        }
      }
      else
      {
        BOOL v169 = v163 >= v166;
        if (v163 == v166)
        {
          uint64_t v160 = (const void **)(a1 + 24 * v157);
          uint64_t v159 = (2 * v156) | 1;
          a2 = v271;
        }
        else
        {
          a2 = v271;
          if (!v169) {
            goto LABEL_337;
          }
        }
      }
      unint64_t v170 = a1 + 24 * v156;
      int v171 = *((char *)v160 + 23);
      if (v171 >= 0) {
        uint64_t v172 = v160;
      }
      else {
        uint64_t v172 = *v160;
      }
      if (v171 >= 0) {
        size_t v173 = *((unsigned __int8 *)v160 + 23);
      }
      else {
        size_t v173 = (size_t)v160[1];
      }
      int v174 = *(char *)(v170 + 23);
      if (v174 >= 0) {
        v175 = (const void *)(a1 + 24 * v156);
      }
      else {
        v175 = *(const void **)v170;
      }
      if (v174 >= 0) {
        size_t v176 = *(unsigned __int8 *)(v170 + 23);
      }
      else {
        size_t v176 = *(void *)(v170 + 8);
      }
      if (v176 >= v173) {
        size_t v177 = v173;
      }
      else {
        size_t v177 = v176;
      }
      int v178 = memcmp(v172, v175, v177);
      if (v178)
      {
        int64_t v153 = (v12 - 2) >> 1;
        if (v178 < 0)
        {
LABEL_357:
          __n128 v180 = *(__n128 *)v170;
          int64_t v274 = *(void *)(v170 + 16);
          __n128 v273 = v180;
          *(void *)(v170 + 8) = 0;
          *(void *)(v170 + 16) = 0;
          *(void *)unint64_t v170 = 0;
          long long v181 = *(_OWORD *)v160;
          *(void *)(v170 + 16) = v160[2];
          *(_OWORD *)unint64_t v170 = v181;
          *((unsigned char *)v160 + 23) = 0;
          *(unsigned char *)uint64_t v160 = 0;
          if (v153 >= v159)
          {
            unint64_t v182 = HIBYTE(v274);
            v183 = &v273;
            if (v274 < 0)
            {
              unint64_t v182 = v273.n128_u64[1];
              v183 = (__n128 *)v273.n128_u64[0];
            }
            size_t v263 = v182;
            v266 = v183;
            int64_t v269 = v156;
            while (1)
            {
              uint64_t v185 = (2 * v159) | 1;
              unint64_t v186 = a1 + 24 * v185;
              uint64_t v159 = 2 * v159 + 2;
              if (v159 >= (uint64_t)v12) {
                goto LABEL_385;
              }
              uint64_t v155 = (const void **)(v186 + 24);
              int v187 = *(char *)(v186 + 23);
              v188 = v187 >= 0 ? (const void *)(a1 + 24 * v185) : *(const void **)v186;
              unint64_t v189 = v187 >= 0 ? *(unsigned __int8 *)(v186 + 23) : *(void *)(v186 + 8);
              int v190 = *(char *)(v186 + 47);
              v191 = v190 >= 0 ? (const void *)(v186 + 24) : *(const void **)(v186 + 24);
              unint64_t v192 = v190 >= 0 ? *(unsigned __int8 *)(v186 + 47) : *(void *)(v186 + 32);
              size_t v193 = v192 >= v189 ? v189 : v192;
              int v194 = memcmp(v188, v191, v193);
              if (v194) {
                break;
              }
              BOOL v195 = v189 >= v192;
              if (v189 == v192)
              {
                uint64_t v155 = (const void **)(a1 + 24 * v185);
                uint64_t v159 = v185;
                a2 = v271;
                int64_t v153 = (v12 - 2) >> 1;
                goto LABEL_386;
              }
              a2 = v271;
              int64_t v153 = (v12 - 2) >> 1;
              if (!v195) {
                goto LABEL_385;
              }
LABEL_386:
              int v196 = *((char *)v155 + 23);
              if (v196 >= 0) {
                v197 = v155;
              }
              else {
                v197 = *v155;
              }
              if (v196 >= 0) {
                size_t v198 = *((unsigned __int8 *)v155 + 23);
              }
              else {
                size_t v198 = (size_t)v155[1];
              }
              if (v263 >= v198) {
                size_t v199 = v198;
              }
              else {
                size_t v199 = v263;
              }
              int v200 = memcmp(v197, v266, v199);
              if (v200)
              {
                int64_t v156 = v269;
                if ((v200 & 0x80000000) == 0) {
                  goto LABEL_311;
                }
              }
              else
              {
                int64_t v156 = v269;
                if (v198 > v263) {
                  goto LABEL_311;
                }
              }
              long long v184 = *(_OWORD *)v155;
              v160[2] = v155[2];
              *(_OWORD *)uint64_t v160 = v184;
              *((unsigned char *)v155 + 23) = 0;
              *(unsigned char *)uint64_t v155 = 0;
              uint64_t v160 = v155;
              if (v153 < v159) {
                goto LABEL_312;
              }
            }
            a2 = v271;
            int64_t v153 = (v12 - 2) >> 1;
            if ((v194 & 0x80000000) == 0) {
              goto LABEL_386;
            }
LABEL_385:
            uint64_t v155 = (const void **)(a1 + 24 * v185);
            uint64_t v159 = v185;
            goto LABEL_386;
          }
LABEL_311:
          uint64_t v155 = v160;
LABEL_312:
          BOOL result = v273;
          v155[2] = (const void *)v274;
          *(__n128 *)uint64_t v155 = result;
        }
      }
      else
      {
        BOOL v179 = v173 > v176;
        int64_t v153 = (v12 - 2) >> 1;
        if (!v179) {
          goto LABEL_357;
        }
      }
    }
    int64_t v154 = v156 - 1;
    if (v156) {
      continue;
    }
    break;
  }
  int64_t v201 = v11 / 0x18uLL;
  do
  {
    if (v201 < 2) {
      goto LABEL_400;
    }
    uint64_t v202 = 0;
    v270 = *(void **)a1;
    v272 = a2;
    v264 = *(const void **)(a1 + 16);
    v267 = *(const void **)(a1 + 8);
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    unint64_t v203 = a1;
    *(void *)a1 = 0;
    do
    {
      uint64_t v205 = v203 + 24 * v202 + 24;
      uint64_t v206 = (2 * v202) | 1;
      uint64_t v202 = 2 * v202 + 2;
      if (v202 < v201)
      {
        v204 = (__n128 *)(v205 + 24);
        int v207 = *(char *)(v205 + 23);
        if (v207 >= 0) {
          v208 = (const void *)v205;
        }
        else {
          v208 = *(const void **)v205;
        }
        if (v207 >= 0) {
          size_t v209 = *(unsigned __int8 *)(v205 + 23);
        }
        else {
          size_t v209 = *(void *)(v205 + 8);
        }
        int v210 = *(char *)(v205 + 47);
        if (v210 >= 0) {
          v211 = (const void *)(v205 + 24);
        }
        else {
          v211 = *(const void **)(v205 + 24);
        }
        if (v210 >= 0) {
          size_t v212 = *(unsigned __int8 *)(v205 + 47);
        }
        else {
          size_t v212 = *(void *)(v205 + 32);
        }
        if (v212 >= v209) {
          size_t v213 = v209;
        }
        else {
          size_t v213 = v212;
        }
        int v214 = memcmp(v208, v211, v213);
        if (v214)
        {
          if ((v214 & 0x80000000) == 0) {
            goto LABEL_424;
          }
        }
        else if (v209 != v212 && v209 >= v212)
        {
LABEL_424:
          if ((*(char *)(v203 + 23) & 0x80000000) == 0) {
            goto LABEL_405;
          }
          goto LABEL_425;
        }
      }
      v204 = (__n128 *)v205;
      uint64_t v202 = v206;
      if ((*(char *)(v203 + 23) & 0x80000000) == 0) {
        goto LABEL_405;
      }
LABEL_425:
      operator delete(*(void **)v203);
LABEL_405:
      BOOL result = *v204;
      *(void *)(v203 + 16) = v204[1].n128_u64[0];
      *(__n128 *)unint64_t v203 = result;
      v204[1].n128_u8[7] = 0;
      v204->n128_u8[0] = 0;
      unint64_t v203 = (unint64_t)v204;
    }
    while (v202 <= (uint64_t)((unint64_t)(v201 - 2) >> 1));
    if (v204 == (__n128 *)(a2 - 3))
    {
      v204->n128_u64[0] = (unint64_t)v270;
      v204->n128_u64[1] = (unint64_t)v267;
      v204[1].n128_u64[0] = (unint64_t)v264;
      goto LABEL_400;
    }
    BOOL result = *(__n128 *)(a2 - 3);
    v204[1].n128_u64[0] = (unint64_t)*(a2 - 1);
    __n128 *v204 = result;
    *(a2 - 3) = v270;
    *(a2 - 2) = v267;
    *(a2 - 1) = v264;
    uint64_t v215 = (uint64_t)&v204[1].n128_i64[1] - a1;
    if (v215 >= 25)
    {
      unint64_t v216 = v215 / 0x18uLL - 2;
      unint64_t v217 = v216 >> 1;
      unint64_t v218 = a1 + 24 * (v216 >> 1);
      int v219 = *(char *)(v218 + 23);
      if (v219 >= 0) {
        v220 = (const void *)(a1 + 24 * (v216 >> 1));
      }
      else {
        v220 = *(const void **)v218;
      }
      if (v219 >= 0) {
        size_t v221 = *(unsigned __int8 *)(v218 + 23);
      }
      else {
        size_t v221 = *(void *)(v218 + 8);
      }
      int v222 = v204[1].n128_i8[7];
      if (v222 >= 0) {
        v223 = v204;
      }
      else {
        v223 = (__n128 *)v204->n128_u64[0];
      }
      if (v222 >= 0) {
        size_t v224 = v204[1].n128_u8[7];
      }
      else {
        size_t v224 = v204->n128_u64[1];
      }
      if (v224 >= v221) {
        size_t v225 = v221;
      }
      else {
        size_t v225 = v224;
      }
      int v226 = memcmp(v220, v223, v225);
      if (v226)
      {
        if (v226 < 0) {
          goto LABEL_400;
        }
      }
      else if (v221 <= v224)
      {
        goto LABEL_400;
      }
      __n128 v227 = *v204;
      int64_t v274 = v204[1].n128_i64[0];
      __n128 v273 = v227;
      v204->n128_u64[1] = 0;
      v204[1].n128_u64[0] = 0;
      v204->n128_u64[0] = 0;
      if (v274 >= 0) {
        v228 = &v273;
      }
      else {
        v228 = (__n128 *)v273.n128_u64[0];
      }
      if (v274 >= 0) {
        size_t v229 = HIBYTE(v274);
      }
      else {
        size_t v229 = v273.n128_u64[1];
      }
      __n128 v230 = *(__n128 *)v218;
      v204[1].n128_u64[0] = *(void *)(v218 + 16);
      __n128 *v204 = v230;
      *(unsigned char *)(v218 + 23) = 0;
      *(unsigned char *)unint64_t v218 = 0;
      if (v216 >= 2)
      {
        while (1)
        {
          unint64_t v232 = v217 - 1;
          unint64_t v217 = (v217 - 1) >> 1;
          unint64_t v233 = a1 + 24 * v217;
          int v234 = *(char *)(v233 + 23);
          if (v234 >= 0) {
            v235 = (const void *)(a1 + 24 * v217);
          }
          else {
            v235 = *(const void **)v233;
          }
          if (v234 >= 0) {
            size_t v236 = *(unsigned __int8 *)(v233 + 23);
          }
          else {
            size_t v236 = *(void *)(v233 + 8);
          }
          if (v229 >= v236) {
            size_t v237 = v236;
          }
          else {
            size_t v237 = v229;
          }
          int v238 = memcmp(v235, v228, v237);
          if (v238)
          {
            if (v238 < 0) {
              break;
            }
          }
          else if (v236 <= v229)
          {
            break;
          }
          long long v231 = *(_OWORD *)v233;
          *(void *)(v218 + 16) = *(void *)(v233 + 16);
          *(_OWORD *)unint64_t v218 = v231;
          *(unsigned char *)(v233 + 23) = 0;
          *(unsigned char *)unint64_t v233 = 0;
          unint64_t v218 = a1 + 24 * v217;
          if (v232 <= 1) {
            goto LABEL_472;
          }
        }
      }
      unint64_t v233 = v218;
LABEL_472:
      BOOL result = v273;
      *(void *)(v233 + 16) = v274;
      *(__n128 *)unint64_t v233 = result;
      a2 = v272;
    }
LABEL_400:
    a2 -= 3;
    BOOL v179 = (unint64_t)v201-- > 2;
  }
  while (v179);
  return result;
}

__n128 std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*>(uint64_t a1, uint64_t a2, const void **a3)
{
  int v6 = *(char *)(a2 + 23);
  uint64_t v7 = *(const void **)a2;
  size_t v8 = *(const void **)(a2 + 8);
  if (v6 >= 0) {
    uint64_t v9 = (const void *)a2;
  }
  else {
    uint64_t v9 = *(const void **)a2;
  }
  if (v6 >= 0) {
    size_t v10 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    size_t v10 = *(void *)(a2 + 8);
  }
  int v11 = *(char *)(a1 + 23);
  unint64_t v13 = *(const void **)a1;
  unint64_t v12 = *(const void **)(a1 + 8);
  if (v11 >= 0) {
    uint64_t v14 = (const void *)a1;
  }
  else {
    uint64_t v14 = *(const void **)a1;
  }
  if (v11 >= 0) {
    size_t v15 = *(unsigned __int8 *)(a1 + 23);
  }
  else {
    size_t v15 = *(void *)(a1 + 8);
  }
  if (v15 >= v10) {
    size_t v16 = v10;
  }
  else {
    size_t v16 = v15;
  }
  int v17 = memcmp(v9, v14, v16);
  if (v17)
  {
    if ((v17 & 0x80000000) == 0) {
      goto LABEL_18;
    }
  }
  else if (v10 > v15)
  {
LABEL_18:
    int v18 = *((char *)a3 + 23);
    if (v18 >= 0) {
      int v19 = a3;
    }
    else {
      int v19 = *a3;
    }
    if (v18 >= 0) {
      size_t v20 = *((unsigned __int8 *)a3 + 23);
    }
    else {
      size_t v20 = (size_t)a3[1];
    }
    if (v10 >= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v10;
    }
    int v22 = memcmp(v19, v9, v21);
    if (v22)
    {
      if ((v22 & 0x80000000) == 0)
      {
LABEL_29:
        unint64_t v23 = *(const void **)(a1 + 16);
        size_t v24 = a3[2];
        __n128 result = *(__n128 *)a3;
        *(_OWORD *)a1 = *(_OWORD *)a3;
        *(void *)(a1 + 16) = v24;
        *a3 = v13;
        a3[1] = v12;
        a3[2] = v23;
        return result;
      }
    }
    else if (v20 > v10)
    {
      goto LABEL_29;
    }
    uint64_t v31 = *(void *)(a1 + 16);
    uint64_t v32 = *(void *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(void *)(a1 + 16) = v32;
    *(void *)a2 = v13;
    *(void *)(a2 + 8) = v12;
    *(void *)(a2 + 16) = v31;
    int v33 = *((char *)a3 + 23);
    if (v33 >= 0) {
      unint64_t v34 = a3;
    }
    else {
      unint64_t v34 = *a3;
    }
    if (v33 >= 0) {
      size_t v35 = *((unsigned __int8 *)a3 + 23);
    }
    else {
      size_t v35 = (size_t)a3[1];
    }
    if (v31 >= 0) {
      int v36 = (const void *)a2;
    }
    else {
      int v36 = v13;
    }
    if (v31 >= 0) {
      size_t v37 = HIBYTE(v31);
    }
    else {
      size_t v37 = (size_t)v12;
    }
    if (v37 >= v35) {
      size_t v38 = v35;
    }
    else {
      size_t v38 = v37;
    }
    int v39 = memcmp(v34, v36, v38);
    if (v39)
    {
      if (v39 < 0) {
        return result;
      }
    }
    else if (v35 <= v37)
    {
      return result;
    }
    __n128 result = *(__n128 *)a3;
    *(void *)(a2 + 16) = a3[2];
    *(__n128 *)a2 = result;
    *a3 = v13;
    a3[1] = v12;
    a3[2] = (const void *)v31;
    return result;
  }
  int v26 = *((char *)a3 + 23);
  if (v26 >= 0) {
    uint64_t v27 = a3;
  }
  else {
    uint64_t v27 = *a3;
  }
  if (v26 >= 0) {
    size_t v28 = *((unsigned __int8 *)a3 + 23);
  }
  else {
    size_t v28 = (size_t)a3[1];
  }
  if (v10 >= v28) {
    size_t v29 = v28;
  }
  else {
    size_t v29 = v10;
  }
  int v30 = memcmp(v27, v9, v29);
  if (v30)
  {
    if (v30 < 0) {
      return result;
    }
  }
  else if (v28 <= v10)
  {
    return result;
  }
  std::vector<std::ssub_match>::pointer v40 = *(const void **)(a2 + 16);
  long long v41 = a3[2];
  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(void *)(a2 + 16) = v41;
  *a3 = v7;
  a3[1] = v8;
  a3[2] = v40;
  int v42 = *(char *)(a2 + 23);
  if (v42 >= 0) {
    unint64_t v43 = (const void *)a2;
  }
  else {
    unint64_t v43 = *(const void **)a2;
  }
  if (v42 >= 0) {
    size_t v44 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    size_t v44 = *(void *)(a2 + 8);
  }
  int v45 = *(char *)(a1 + 23);
  uint64_t v46 = *(const void **)a1;
  uint64_t v47 = *(void *)(a1 + 8);
  if (v45 >= 0) {
    unint64_t v48 = (const void *)a1;
  }
  else {
    unint64_t v48 = *(const void **)a1;
  }
  if (v45 >= 0) {
    size_t v49 = *(unsigned __int8 *)(a1 + 23);
  }
  else {
    size_t v49 = *(void *)(a1 + 8);
  }
  if (v49 >= v44) {
    size_t v50 = v44;
  }
  else {
    size_t v50 = v49;
  }
  int v51 = memcmp(v43, v48, v50);
  if (!v51)
  {
    if (v44 <= v49) {
      return result;
    }
    goto LABEL_84;
  }
  if ((v51 & 0x80000000) == 0)
  {
LABEL_84:
    uint64_t v52 = *(void *)(a1 + 16);
    uint64_t v53 = *(void *)(a2 + 16);
    __n128 result = *(__n128 *)a2;
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(void *)(a1 + 16) = v53;
    *(void *)a2 = v46;
    *(void *)(a2 + 8) = v47;
    *(void *)(a2 + 16) = v52;
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*>(uint64_t a1, const void **a2)
{
  uint64_t v2 = a2;
  uint64_t v4 = ((uint64_t)a2 - a1) >> 3;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      int v6 = a2 - 3;
      int v7 = *((char *)a2 - 1);
      if (v7 >= 0) {
        size_t v8 = a2 - 3;
      }
      else {
        size_t v8 = (const void **)*(a2 - 3);
      }
      if (v7 >= 0) {
        size_t v9 = *((unsigned __int8 *)a2 - 1);
      }
      else {
        size_t v9 = (size_t)*(a2 - 2);
      }
      int v10 = *(char *)(a1 + 23);
      int v11 = *(const void **)a1;
      unint64_t v12 = *(const void **)(a1 + 8);
      if (v10 >= 0) {
        unint64_t v13 = (const void *)a1;
      }
      else {
        unint64_t v13 = *(const void **)a1;
      }
      if (v10 >= 0) {
        size_t v14 = *(unsigned __int8 *)(a1 + 23);
      }
      else {
        size_t v14 = *(void *)(a1 + 8);
      }
      if (v14 >= v9) {
        size_t v15 = v9;
      }
      else {
        size_t v15 = v14;
      }
      int v16 = memcmp(v8, v13, v15);
      if (v16)
      {
        if (v16 < 0) {
          return 1;
        }
      }
      else if (v9 <= v14)
      {
        return 1;
      }
      long long v41 = *(const void **)(a1 + 16);
      uint64_t v42 = (uint64_t)*(v2 - 1);
      *(_OWORD *)a1 = *(_OWORD *)v6;
      *(void *)(a1 + 16) = v42;
      *(v2 - 3) = v11;
      *(v2 - 2) = v12;
      *(v2 - 1) = v41;
      return 1;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*>(a1, a1 + 24, a2 - 3);
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*>(a1, a1 + 24, a1 + 48, a2 - 3);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*>(a1, a1 + 24, a1 + 48, a1 + 72, a2 - 3);
      return 1;
    default:
      int v17 = (const void **)(a1 + 48);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*>(a1, a1 + 24, (const void **)(a1 + 48));
      int v18 = (const void **)(a1 + 72);
      if ((const void **)(a1 + 72) == v2) {
        return 1;
      }
      uint64_t v19 = 0;
      int v20 = 0;
      unint64_t v43 = v2;
      break;
  }
  while (2)
  {
    int v23 = *((char *)v18 + 23);
    if (v23 >= 0) {
      size_t v24 = v18;
    }
    else {
      size_t v24 = *v18;
    }
    if (v23 >= 0) {
      size_t v25 = *((unsigned __int8 *)v18 + 23);
    }
    else {
      size_t v25 = (size_t)v18[1];
    }
    int v26 = *((char *)v17 + 23);
    if (v26 >= 0) {
      uint64_t v27 = v17;
    }
    else {
      uint64_t v27 = *v17;
    }
    if (v26 >= 0) {
      size_t v28 = *((unsigned __int8 *)v17 + 23);
    }
    else {
      size_t v28 = (size_t)v17[1];
    }
    if (v28 >= v25) {
      size_t v29 = v25;
    }
    else {
      size_t v29 = v28;
    }
    int v30 = memcmp(v24, v27, v29);
    if (v30)
    {
      if (v30 < 0) {
        goto LABEL_25;
      }
    }
    else if (v25 <= v28)
    {
      goto LABEL_25;
    }
    long long v44 = *(_OWORD *)v18;
    int v45 = v18[2];
    *(_OWORD *)int v18 = *(_OWORD *)v17;
    v18[2] = v17[2];
    *((unsigned char *)v17 + 23) = 0;
    *(unsigned char *)int v17 = 0;
    uint64_t v21 = a1;
    if (v17 == (const void **)a1) {
      goto LABEL_24;
    }
    uint64_t v31 = v19;
    while (1)
    {
      uint64_t v32 = a1 + v31;
      int v33 = (_OWORD *)(a1 + v31 + 24);
      unint64_t v34 = SHIBYTE(v45) >= 0 ? &v44 : (long long *)v44;
      unint64_t v35 = SHIBYTE(v45) >= 0 ? HIBYTE(v45) : *((void *)&v44 + 1);
      int v36 = *(char *)(v32 + 47);
      size_t v37 = v36 >= 0 ? (const void *)(a1 + v31 + 24) : *(const void **)(a1 + v31 + 24);
      unint64_t v38 = v36 >= 0 ? *(unsigned __int8 *)(v32 + 47) : *(void *)(v32 + 32);
      size_t v39 = v38 >= v35 ? v35 : v38;
      int v40 = memcmp(v34, v37, v39);
      if (!v40) {
        break;
      }
      if (v40 < 0)
      {
        uint64_t v21 = (uint64_t)v17;
        goto LABEL_23;
      }
LABEL_48:
      v17 -= 3;
      *(_OWORD *)(v32 + 48) = *v33;
      *(void *)(v32 + 64) = *(void *)(a1 + v31 + 40);
      *(unsigned char *)(v32 + 47) = 0;
      *(unsigned char *)int v33 = 0;
      v31 -= 24;
      if (v31 == -48)
      {
        uint64_t v21 = a1;
        goto LABEL_23;
      }
    }
    if (v35 > v38) {
      goto LABEL_48;
    }
    uint64_t v21 = a1 + v31 + 48;
LABEL_23:
    uint64_t v2 = v43;
LABEL_24:
    long long v22 = v44;
    *(void *)(v21 + 16) = v45;
    *(_OWORD *)uint64_t v21 = v22;
    if (++v20 == 8) {
      return v18 + 3 == v2;
    }
LABEL_25:
    int v17 = v18;
    v19 += 24;
    v18 += 3;
    if (v18 != v2) {
      continue;
    }
    return 1;
  }
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*>(uint64_t a1, uint64_t a2, uint64_t a3, const void **a4)
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*>(a1, a2, (const void **)a3);
  int v8 = *((char *)a4 + 23);
  if (v8 >= 0) {
    size_t v9 = a4;
  }
  else {
    size_t v9 = *a4;
  }
  if (v8 >= 0) {
    size_t v10 = *((unsigned __int8 *)a4 + 23);
  }
  else {
    size_t v10 = (size_t)a4[1];
  }
  int v11 = *(char *)(a3 + 23);
  unint64_t v12 = *(const void **)a3;
  unint64_t v13 = *(const void **)(a3 + 8);
  if (v11 >= 0) {
    size_t v14 = (const void *)a3;
  }
  else {
    size_t v14 = *(const void **)a3;
  }
  if (v11 >= 0) {
    size_t v15 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    size_t v15 = *(void *)(a3 + 8);
  }
  if (v15 >= v10) {
    size_t v16 = v10;
  }
  else {
    size_t v16 = v15;
  }
  int v17 = memcmp(v9, v14, v16);
  if (v17)
  {
    if (v17 < 0) {
      return result;
    }
  }
  else if (v10 <= v15)
  {
    return result;
  }
  uint64_t v19 = *(const void **)(a3 + 16);
  int v20 = a4[2];
  *(_OWORD *)a3 = *(_OWORD *)a4;
  *(void *)(a3 + 16) = v20;
  *a4 = v12;
  a4[1] = v13;
  a4[2] = v19;
  int v21 = *(char *)(a3 + 23);
  if (v21 >= 0) {
    long long v22 = (const void *)a3;
  }
  else {
    long long v22 = *(const void **)a3;
  }
  if (v21 >= 0) {
    size_t v23 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    size_t v23 = *(void *)(a3 + 8);
  }
  int v24 = *(char *)(a2 + 23);
  size_t v25 = *(const void **)a2;
  uint64_t v26 = *(void *)(a2 + 8);
  if (v24 >= 0) {
    uint64_t v27 = (const void *)a2;
  }
  else {
    uint64_t v27 = *(const void **)a2;
  }
  if (v24 >= 0) {
    size_t v28 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    size_t v28 = *(void *)(a2 + 8);
  }
  if (v28 >= v23) {
    size_t v29 = v23;
  }
  else {
    size_t v29 = v28;
  }
  int v30 = memcmp(v22, v27, v29);
  if (v30)
  {
    if (v30 < 0) {
      return result;
    }
  }
  else if (v23 <= v28)
  {
    return result;
  }
  uint64_t v31 = *(void *)(a2 + 16);
  uint64_t v32 = *(void *)(a3 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(void *)(a2 + 16) = v32;
  *(void *)a3 = v25;
  *(void *)(a3 + 8) = v26;
  *(void *)(a3 + 16) = v31;
  int v33 = *(char *)(a2 + 23);
  if (v33 >= 0) {
    unint64_t v34 = (const void *)a2;
  }
  else {
    unint64_t v34 = *(const void **)a2;
  }
  if (v33 >= 0) {
    size_t v35 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    size_t v35 = *(void *)(a2 + 8);
  }
  int v36 = *(char *)(a1 + 23);
  size_t v37 = *(const void **)a1;
  uint64_t v38 = *(void *)(a1 + 8);
  if (v36 >= 0) {
    size_t v39 = (const void *)a1;
  }
  else {
    size_t v39 = *(const void **)a1;
  }
  if (v36 >= 0) {
    size_t v40 = *(unsigned __int8 *)(a1 + 23);
  }
  else {
    size_t v40 = *(void *)(a1 + 8);
  }
  if (v40 >= v35) {
    size_t v41 = v35;
  }
  else {
    size_t v41 = v40;
  }
  int v42 = memcmp(v34, v39, v41);
  if (!v42)
  {
    if (v35 <= v40) {
      return result;
    }
LABEL_58:
    uint64_t v43 = *(void *)(a1 + 16);
    uint64_t v44 = *(void *)(a2 + 16);
    __n128 result = *(__n128 *)a2;
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(void *)(a1 + 16) = v44;
    *(void *)a2 = v37;
    *(void *)(a2 + 8) = v38;
    *(void *)(a2 + 16) = v43;
    return result;
  }
  if ((v42 & 0x80000000) == 0) {
    goto LABEL_58;
  }
  return result;
}

__n128 std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const void **a5)
{
  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*>(a1, a2, a3, (const void **)a4);
  int v10 = *((char *)a5 + 23);
  if (v10 >= 0) {
    int v11 = a5;
  }
  else {
    int v11 = *a5;
  }
  if (v10 >= 0) {
    size_t v12 = *((unsigned __int8 *)a5 + 23);
  }
  else {
    size_t v12 = (size_t)a5[1];
  }
  int v13 = *(char *)(a4 + 23);
  size_t v14 = *(const void **)a4;
  size_t v15 = *(const void **)(a4 + 8);
  if (v13 >= 0) {
    size_t v16 = (const void *)a4;
  }
  else {
    size_t v16 = *(const void **)a4;
  }
  if (v13 >= 0) {
    size_t v17 = *(unsigned __int8 *)(a4 + 23);
  }
  else {
    size_t v17 = *(void *)(a4 + 8);
  }
  if (v17 >= v12) {
    size_t v18 = v12;
  }
  else {
    size_t v18 = v17;
  }
  int v19 = memcmp(v11, v16, v18);
  if (v19)
  {
    if (v19 < 0) {
      return result;
    }
  }
  else if (v12 <= v17)
  {
    return result;
  }
  int v21 = *(const void **)(a4 + 16);
  long long v22 = a5[2];
  *(_OWORD *)a4 = *(_OWORD *)a5;
  *(void *)(a4 + 16) = v22;
  *a5 = v14;
  a5[1] = v15;
  a5[2] = v21;
  int v23 = *(char *)(a4 + 23);
  if (v23 >= 0) {
    int v24 = (const void *)a4;
  }
  else {
    int v24 = *(const void **)a4;
  }
  if (v23 >= 0) {
    size_t v25 = *(unsigned __int8 *)(a4 + 23);
  }
  else {
    size_t v25 = *(void *)(a4 + 8);
  }
  int v26 = *(char *)(a3 + 23);
  uint64_t v27 = *(const void **)a3;
  uint64_t v28 = *(void *)(a3 + 8);
  if (v26 >= 0) {
    size_t v29 = (const void *)a3;
  }
  else {
    size_t v29 = *(const void **)a3;
  }
  if (v26 >= 0) {
    size_t v30 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    size_t v30 = *(void *)(a3 + 8);
  }
  if (v30 >= v25) {
    size_t v31 = v25;
  }
  else {
    size_t v31 = v30;
  }
  int v32 = memcmp(v24, v29, v31);
  if (v32)
  {
    if (v32 < 0) {
      return result;
    }
  }
  else if (v25 <= v30)
  {
    return result;
  }
  uint64_t v33 = *(void *)(a3 + 16);
  uint64_t v34 = *(void *)(a4 + 16);
  *(_OWORD *)a3 = *(_OWORD *)a4;
  *(void *)(a3 + 16) = v34;
  *(void *)a4 = v27;
  *(void *)(a4 + 8) = v28;
  *(void *)(a4 + 16) = v33;
  int v35 = *(char *)(a3 + 23);
  if (v35 >= 0) {
    int v36 = (const void *)a3;
  }
  else {
    int v36 = *(const void **)a3;
  }
  if (v35 >= 0) {
    size_t v37 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    size_t v37 = *(void *)(a3 + 8);
  }
  int v38 = *(char *)(a2 + 23);
  size_t v39 = *(const void **)a2;
  uint64_t v40 = *(void *)(a2 + 8);
  if (v38 >= 0) {
    size_t v41 = (const void *)a2;
  }
  else {
    size_t v41 = *(const void **)a2;
  }
  if (v38 >= 0) {
    size_t v42 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    size_t v42 = *(void *)(a2 + 8);
  }
  if (v42 >= v37) {
    size_t v43 = v37;
  }
  else {
    size_t v43 = v42;
  }
  int v44 = memcmp(v36, v41, v43);
  if (v44)
  {
    if (v44 < 0) {
      return result;
    }
  }
  else if (v37 <= v42)
  {
    return result;
  }
  uint64_t v45 = *(void *)(a2 + 16);
  uint64_t v46 = *(void *)(a3 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(void *)(a2 + 16) = v46;
  *(void *)a3 = v39;
  *(void *)(a3 + 8) = v40;
  *(void *)(a3 + 16) = v45;
  int v47 = *(char *)(a2 + 23);
  if (v47 >= 0) {
    unint64_t v48 = (const void *)a2;
  }
  else {
    unint64_t v48 = *(const void **)a2;
  }
  if (v47 >= 0) {
    size_t v49 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    size_t v49 = *(void *)(a2 + 8);
  }
  int v50 = *(char *)(a1 + 23);
  int v51 = *(const void **)a1;
  uint64_t v52 = *(void *)(a1 + 8);
  if (v50 >= 0) {
    uint64_t v53 = (const void *)a1;
  }
  else {
    uint64_t v53 = *(const void **)a1;
  }
  if (v50 >= 0) {
    size_t v54 = *(unsigned __int8 *)(a1 + 23);
  }
  else {
    size_t v54 = *(void *)(a1 + 8);
  }
  if (v54 >= v49) {
    size_t v55 = v49;
  }
  else {
    size_t v55 = v54;
  }
  int v56 = memcmp(v48, v53, v55);
  if (v56)
  {
    if (v56 < 0) {
      return result;
    }
  }
  else if (v49 <= v54)
  {
    return result;
  }
  uint64_t v57 = *(void *)(a1 + 16);
  uint64_t v58 = *(void *)(a2 + 16);
  __n128 result = *(__n128 *)a2;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = v58;
  *(void *)a2 = v51;
  *(void *)(a2 + 8) = v52;
  *(void *)(a2 + 16) = v57;
  return result;
}

std::string *__cdecl std::string::__assign_external(std::string *this, const std::string::value_type *__s)
{
  size_t v4 = strlen(__s);

  return std::string::__assign_external(this, __s, v4);
}

char *std::vector<std::string>::__push_back_slow_path<std::string>(void **a1, uint64_t a2)
{
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[1] - (unsigned char *)*a1) >> 3);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::__throw_length_error[abi:ne180100]();
  }
  if (0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3) > v4) {
    unint64_t v4 = 0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3);
  }
  if (0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3) >= 0x555555555555555) {
    unint64_t v6 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    int v7 = (char *)operator new(24 * v6);
  }
  else
  {
    int v7 = 0;
  }
  int v8 = &v7[24 * v3];
  size_t v9 = &v7[24 * v6];
  *(_OWORD *)int v8 = *(_OWORD *)a2;
  *((void *)v8 + 2) = *(void *)(a2 + 16);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  int v10 = v8 + 24;
  int v11 = (void **)*a1;
  size_t v12 = (void **)a1[1];
  if (v12 == *a1)
  {
    *a1 = v8;
    a1[1] = v10;
    a1[2] = v9;
  }
  else
  {
    do
    {
      long long v13 = *(_OWORD *)(v12 - 3);
      *((void *)v8 - 1) = *(v12 - 1);
      *(_OWORD *)(v8 - 24) = v13;
      v8 -= 24;
      *(v12 - 2) = 0;
      *(v12 - 1) = 0;
      *(v12 - 3) = 0;
      v12 -= 3;
    }
    while (v12 != v11);
    size_t v12 = (void **)*a1;
    size_t v14 = (void **)a1[1];
    *a1 = v8;
    a1[1] = v10;
    a1[2] = v9;
    while (v14 != v12)
    {
      if (*((char *)v14 - 1) < 0) {
        operator delete(*(v14 - 3));
      }
      v14 -= 3;
    }
  }
  if (v12) {
    operator delete(v12);
  }
  return v10;
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100](uint64_t a1, char *a2, int a3)
{
  unint64_t v6 = (const std::locale *)MEMORY[0x263E695E0]();
  *(void *)(a1 + 8) = std::locale::use_facet(v6, MEMORY[0x263F8C108]);
  *(void *)(a1 + 16) = std::locale::use_facet((const std::locale *)a1, MEMORY[0x263F8C130]);
  *(_DWORD *)(a1 + 24) = a3;
  *(_OWORD *)(a1 + 28) = 0u;
  *(_OWORD *)(a1 + 44) = 0u;
  *(_DWORD *)(a1 + 60) = 0;
  size_t v7 = strlen(a2);
  if (std::basic_regex<char,std::regex_traits<char>>::__parse<char const*>(a1, a2, &a2[v7]) != &a2[v7]) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)17>();
  }
  return a1;
}

void sub_2636CA924(_Unwind_Exception *a1)
{
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100](v2);
  std::locale::~locale(v1);
  _Unwind_Resume(a1);
}

void sub_2636CA940(_Unwind_Exception *a1)
{
  std::locale::~locale(v1);
  _Unwind_Resume(a1);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse<char const*>(uint64_t a1, char *a2, char *a3)
{
  unint64_t v6 = operator new(8uLL);
  void *v6 = &unk_270EA5D60;
  size_t v7 = operator new(0x10uLL);
  v7[1] = v6;
  int v8 = operator new(0x20uLL);
  void *v8 = &unk_270EA5DB8;
  v8[1] = 0;
  uint64_t v8[2] = 0;
  v8[3] = v7;
  size_t v9 = *(std::__shared_weak_count **)(a1 + 48);
  *(void *)(a1 + 40) = v7;
  *(void *)(a1 + 48) = v8;
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
    uint64_t v10 = *(void *)(a1 + 40);
    *(void *)(a1 + 56) = v10;
    unsigned int v11 = *(_DWORD *)(a1 + 24) & 0x1F0;
    if (v11 <= 0x3F) {
      goto LABEL_4;
    }
LABEL_9:
    if (v11 != 64)
    {
      if (v11 == 128)
      {
        return std::basic_regex<char,std::regex_traits<char>>::__parse_grep<char const*>(a1, a2, a3);
      }
      if (v11 == 256)
      {
        return (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_egrep<char const*>(a1, (std::basic_regex<char> *)a2, (std::basic_regex<char> *)a3);
      }
LABEL_31:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)14>();
    }
LABEL_15:
    return (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>(a1, (std::basic_regex<char> *)a2, (std::basic_regex<char> *)a3);
  }
  uint64_t v10 = *(void *)(a1 + 40);
  *(void *)(a1 + 56) = v10;
  unsigned int v11 = *(_DWORD *)(a1 + 24) & 0x1F0;
  if (v11 > 0x3F) {
    goto LABEL_9;
  }
LABEL_4:
  if (v11)
  {
    if (v11 == 16)
    {
      return std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<char const*>(a1, a2, a3);
    }
    if (v11 != 32) {
      goto LABEL_31;
    }
    goto LABEL_15;
  }
  long long v13 = a2;
  while (1)
  {
    size_t v14 = (std::basic_regex<char> *)v13;
    long long v13 = std::basic_regex<char,std::regex_traits<char>>::__parse_assertion<char const*>(a1, v13, a3);
    if (v13 == (char *)v14) {
      break;
    }
LABEL_19:
    if (v13 == (char *)v14) {
      goto LABEL_29;
    }
  }
  size_t v15 = *(std::__owns_one_state<char> **)(a1 + 56);
  int v16 = *(_DWORD *)(a1 + 28);
  size_t v17 = std::basic_regex<char,std::regex_traits<char>>::__parse_atom<char const*>((std::basic_regex<char> *)a1, v14, (std::basic_regex<char> *)a3);
  if (v17 != (unsigned __int8 *)v14)
  {
    long long v13 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>(a1, (std::basic_regex<char> *)v17, (std::basic_regex<char> *)a3, v15, (v16 + 1), (*(_DWORD *)(a1 + 28) + 1));
    goto LABEL_19;
  }
LABEL_29:
  if (v14 == (std::basic_regex<char> *)a2)
  {
    size_t v18 = operator new(0x10uLL);
    uint64_t v19 = *(void *)(a1 + 56);
    uint64_t v20 = *(void *)(v19 + 8);
    v18[1] = v20;
    *(void *)(v19 + 8) = v18;
    uint64_t v21 = *(void *)(*(void *)(a1 + 56) + 8);
    goto LABEL_32;
  }
LABEL_33:
  if (v14 != (std::basic_regex<char> *)a3)
  {
    if (LOBYTE(v14->__traits_.__loc_.__locale_) == 124)
    {
      uint64_t v22 = *(void *)(a1 + 56);
      int v23 = (std::basic_regex<char> *)((char *)&v14->__traits_.__loc_.__locale_ + 1);
      int v24 = (char *)&v14->__traits_.__loc_.__locale_ + 1;
      while (1)
      {
        size_t v14 = (std::basic_regex<char> *)v24;
        int v24 = std::basic_regex<char,std::regex_traits<char>>::__parse_assertion<char const*>(a1, v24, a3);
        if (v24 == (char *)v14)
        {
          size_t v25 = *(std::__owns_one_state<char> **)(a1 + 56);
          int v26 = *(_DWORD *)(a1 + 28);
          uint64_t v27 = std::basic_regex<char,std::regex_traits<char>>::__parse_atom<char const*>((std::basic_regex<char> *)a1, v14, (std::basic_regex<char> *)a3);
          if (v27 == (unsigned __int8 *)v14)
          {
LABEL_40:
            if (v14 == v23)
            {
              uint64_t v28 = operator new(0x10uLL);
              uint64_t v29 = *(void *)(a1 + 56);
              uint64_t v30 = *(void *)(v29 + 8);
              v28[1] = v30;
              *(void *)(v29 + 8) = v28;
              *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
            }
            size_t v31 = operator new(0x18uLL);
            uint64_t v32 = *(void *)(v22 + 8);
            v31[1] = *(void *)(v10 + 8);
            v31[2] = v32;
            *size_t v31 = &unk_270EA6378;
            *(void *)(v10 + 8) = v31;
            *(void *)(v22 + 8) = 0;
            uint64_t v33 = operator new(0x10uLL);
            uint64_t v34 = *(void *)(*(void *)(a1 + 56) + 8);
            v33[1] = v34;
            *(void *)(v22 + 8) = v33;
            *(void *)(*(void *)(a1 + 56) + 8) = 0;
            int v35 = operator new(0x10uLL);
            uint64_t v36 = *(void *)(v22 + 8);
            *int v35 = &unk_270EA63C0;
            v35[1] = v36;
            *(void *)(*(void *)(a1 + 56) + 8) = v35;
            uint64_t v21 = *(void *)(v22 + 8);
LABEL_32:
            *(void *)(a1 + 56) = v21;
            goto LABEL_33;
          }
          int v24 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>(a1, (std::basic_regex<char> *)v27, (std::basic_regex<char> *)a3, v25, (v26 + 1), (*(_DWORD *)(a1 + 28) + 1));
        }
        if (v24 == (char *)v14) {
          goto LABEL_40;
        }
      }
    }
    return (char *)v14;
  }
  return a3;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<char const*>(std::basic_regex<char> *a1, char *a2, char *a3)
{
  std::vector<std::ssub_match>::pointer end = a1->__end_;
  size_t v7 = a2;
  do
  {
    int v8 = (std::basic_regex<char> *)v7;
    size_t v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_assertion<char const*>((uint64_t)a1, v7, a3);
    if (v7 != (char *)v8) {
      continue;
    }
    size_t v9 = a1->__end_;
    marked_size_t count = a1->__marked_count_;
    unsigned int v11 = (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_atom<char const*>(a1, v8);
    if (v11 == v8) {
      break;
    }
    size_t v7 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>((uint64_t)a1, v11, (std::basic_regex<char> *)a3, v9, marked_count + 1, a1->__marked_count_ + 1);
  }
  while (v7 != (char *)v8);
  if (v8 == (std::basic_regex<char> *)a2)
  {
    size_t v12 = (std::__node<char> *)operator new(0x10uLL);
    long long v13 = a1->__end_;
    first = v13->__first_;
    v12[1].__vftable = (std::__node<char>_vtbl *)first;
    v13->__first_ = v12;
    size_t v15 = (std::__owns_one_state<char> *)a1->__end_->__first_;
    goto LABEL_8;
  }
LABEL_9:
  if (v8 != (std::basic_regex<char> *)a3)
  {
    if (LOBYTE(v8->__traits_.__loc_.__locale_) == 124)
    {
      int v16 = a1->__end_;
      size_t v17 = (std::basic_regex<char> *)((char *)&v8->__traits_.__loc_.__locale_ + 1);
      size_t v18 = (char *)&v8->__traits_.__loc_.__locale_ + 1;
      while (1)
      {
        int v8 = (std::basic_regex<char> *)v18;
        size_t v18 = std::basic_regex<char,std::regex_traits<char>>::__parse_assertion<char const*>((uint64_t)a1, v18, a3);
        if (v18 == (char *)v8)
        {
          uint64_t v19 = a1->__end_;
          unsigned int v20 = a1->__marked_count_;
          uint64_t v21 = (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_atom<char const*>(a1, v8);
          if (v21 == v8)
          {
LABEL_16:
            if (v8 == v17)
            {
              uint64_t v22 = (std::__node<char> *)operator new(0x10uLL);
              int v23 = a1->__end_;
              int v24 = v23->__first_;
              v22[1].__vftable = (std::__node<char>_vtbl *)v24;
              v23->__first_ = v22;
              a1->__end_ = (std::__owns_one_state<char> *)a1->__end_->__first_;
            }
            size_t v25 = (std::__node<char> *)operator new(0x18uLL);
            int v26 = v16->__first_;
            v25[1].__vftable = (std::__node<char>_vtbl *)end->__first_;
            v25[2].__vftable = (std::__node<char>_vtbl *)v26;
            v25->__vftable = (std::__node<char>_vtbl *)&unk_270EA6378;
            end->__first_ = v25;
            v16->__first_ = 0;
            uint64_t v27 = (std::__node<char> *)operator new(0x10uLL);
            uint64_t v28 = a1->__end_->__first_;
            v27[1].__vftable = (std::__node<char>_vtbl *)v28;
            v16->__first_ = v27;
            a1->__end_->__first_ = 0;
            uint64_t v29 = (std::__node<char> *)operator new(0x10uLL);
            uint64_t v30 = v16->__first_;
            v29->__vftable = (std::__node<char>_vtbl *)&unk_270EA63C0;
            v29[1].__vftable = (std::__node<char>_vtbl *)v30;
            a1->__end_->__first_ = v29;
            size_t v15 = (std::__owns_one_state<char> *)v16->__first_;
LABEL_8:
            a1->__end_ = v15;
            goto LABEL_9;
          }
          size_t v18 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>((uint64_t)a1, v21, (std::basic_regex<char> *)a3, v19, v20 + 1, a1->__marked_count_ + 1);
        }
        if (v18 == (char *)v8) {
          goto LABEL_16;
        }
      }
    }
    return (char *)v8;
  }
  return a3;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<char const*>(uint64_t a1, char *a2, char *a3)
{
  unint64_t v3 = (std::basic_regex<char> *)a2;
  if (a2 == a3) {
    return a2;
  }
  if (*a2 == 94)
  {
    unint64_t v6 = operator new(0x18uLL);
    BOOL v7 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
    uint64_t v8 = *(void *)(a1 + 56);
    uint64_t v9 = *(void *)(v8 + 8);
    void *v6 = &unk_270EA5EB0;
    v6[1] = v9;
    *((unsigned char *)v6 + 16) = v7;
    *(void *)(v8 + 8) = v6;
    *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
    unint64_t v3 = (std::basic_regex<char> *)((char *)v3 + 1);
  }
  if (v3 != (std::basic_regex<char> *)a3)
  {
    while (v3 != (std::basic_regex<char> *)a3)
    {
      uint64_t v10 = v3;
      unsigned int v11 = *(std::__owns_one_state<char> **)(a1 + 56);
      int v12 = *(_DWORD *)(a1 + 28);
      long long v13 = std::basic_regex<char,std::regex_traits<char>>::__parse_nondupl_RE<char const*>(a1, (uint64_t)v10, a3);
      if (v13 != (char *)v10)
      {
        unint64_t v3 = std::basic_regex<char,std::regex_traits<char>>::__parse_RE_dupl_symbol<char const*>((std::basic_regex<char> *)a1, (std::basic_regex<char> *)v13, (std::basic_regex<char> *)a3, v11, (v12 + 1), (*(_DWORD *)(a1 + 28) + 1));
        if (v3 != v10) {
          continue;
        }
      }
      if ((char *)&v10->__traits_.__loc_.__locale_ + 1 != a3 || LOBYTE(v10->__traits_.__loc_.__locale_) != 36) {
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
      }
      size_t v14 = operator new(0x18uLL);
      BOOL v15 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
      uint64_t v16 = *(void *)(a1 + 56);
      uint64_t v17 = *(void *)(v16 + 8);
      *size_t v14 = &unk_270EA5EF8;
      v14[1] = v17;
      *((unsigned char *)v14 + 16) = v15;
      *(void *)(v16 + 8) = v14;
      *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
      return a3;
    }
  }
  return a3;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>(uint64_t a1, std::basic_regex<char> *a2, std::basic_regex<char> *a3)
{
  uint64_t v6 = *(void *)(a1 + 56);
  BOOL v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<char const*>(a1, a2, a3);
  if (v7 == a2) {
    goto LABEL_12;
  }
  do
  {
    uint64_t v8 = v7;
    BOOL v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<char const*>(a1, v7, a3);
  }
  while (v7 != v8);
  if (v8 == a2) {
LABEL_12:
  }
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
  if (v8 == a3) {
    return a3;
  }
  while (LOBYTE(v8->__traits_.__loc_.__locale_) == 124)
  {
    uint64_t v9 = *(void *)(a1 + 56);
    uint64_t v10 = (std::basic_regex<char> *)((char *)&v8->__traits_.__loc_.__locale_ + 1);
    unsigned int v11 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<char const*>(a1, (std::basic_regex<char> *)((char *)&v8->__traits_.__loc_.__locale_ + 1), a3);
    if (v11 == (std::basic_regex<char> *)((char *)&v8->__traits_.__loc_.__locale_ + 1)) {
      goto LABEL_12;
    }
    do
    {
      uint64_t v8 = v11;
      unsigned int v11 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<char const*>(a1, v11, a3);
    }
    while (v11 != v8);
    if (v8 == v10) {
      goto LABEL_12;
    }
    int v12 = operator new(0x18uLL);
    uint64_t v13 = *(void *)(v9 + 8);
    v12[1] = *(void *)(v6 + 8);
    v12[2] = v13;
    void *v12 = &unk_270EA6378;
    *(void *)(v6 + 8) = v12;
    *(void *)(v9 + 8) = 0;
    size_t v14 = operator new(0x10uLL);
    uint64_t v15 = *(void *)(*(void *)(a1 + 56) + 8);
    v14[1] = v15;
    *(void *)(v9 + 8) = v14;
    *(void *)(*(void *)(a1 + 56) + 8) = 0;
    uint64_t v16 = operator new(0x10uLL);
    uint64_t v17 = *(void *)(v9 + 8);
    void *v16 = &unk_270EA63C0;
    v16[1] = v17;
    *(void *)(*(void *)(a1 + 56) + 8) = v16;
    *(void *)(a1 + 56) = *(void *)(v9 + 8);
    if (v8 == a3) {
      return a3;
    }
  }
  return v8;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_grep<char const*>(uint64_t a1, char *__s, char *a3)
{
  uint64_t v6 = *(void *)(a1 + 56);
  BOOL v7 = (char *)memchr(__s, 10, a3 - __s);
  if (v7) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = a3;
  }
  if (v8 == __s)
  {
    uint64_t v10 = operator new(0x10uLL);
    uint64_t v11 = *(void *)(v6 + 8);
    v10[1] = v11;
    *(void *)(v6 + 8) = v10;
    *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
    if (v8 == a3) {
      uint64_t v9 = v8;
    }
    else {
      uint64_t v9 = v8 + 1;
    }
    if (v9 == a3) {
      return a3;
    }
  }
  else
  {
    std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<char const*>(a1, __s, v8);
    if (v8 == a3) {
      uint64_t v9 = v8;
    }
    else {
      uint64_t v9 = v8 + 1;
    }
    if (v9 == a3) {
      return a3;
    }
  }
  uint64_t v12 = *(void *)(a1 + 56);
  do
  {
    uint64_t v21 = (char *)memchr(v9, 10, a3 - v9);
    if (v21) {
      uint64_t v22 = v21;
    }
    else {
      uint64_t v22 = a3;
    }
    if (v22 == v9)
    {
      uint64_t v13 = operator new(0x10uLL);
      uint64_t v14 = *(void *)(v12 + 8);
      v13[1] = v14;
      *(void *)(v12 + 8) = v13;
      *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
    }
    else
    {
      std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<char const*>(a1, v9, v22);
    }
    uint64_t v15 = operator new(0x18uLL);
    uint64_t v16 = *(void *)(v12 + 8);
    v15[1] = *(void *)(v6 + 8);
    v15[2] = v16;
    void *v15 = &unk_270EA6378;
    *(void *)(v6 + 8) = v15;
    *(void *)(v12 + 8) = 0;
    uint64_t v17 = operator new(0x10uLL);
    uint64_t v18 = *(void *)(*(void *)(a1 + 56) + 8);
    v17[1] = v18;
    *(void *)(v12 + 8) = v17;
    *(void *)(*(void *)(a1 + 56) + 8) = 0;
    uint64_t v19 = operator new(0x10uLL);
    uint64_t v20 = *(void *)(v12 + 8);
    void *v19 = &unk_270EA63C0;
    v19[1] = v20;
    *(void *)(*(void *)(a1 + 56) + 8) = v19;
    uint64_t v12 = *(void *)(v12 + 8);
    *(void *)(a1 + 56) = v12;
    if (v22 == a3) {
      uint64_t v9 = v22;
    }
    else {
      uint64_t v9 = v22 + 1;
    }
  }
  while (v9 != a3);
  return a3;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_egrep<char const*>(uint64_t a1, std::basic_regex<char> *__s, std::basic_regex<char> *a3)
{
  uint64_t v6 = *(void *)(a1 + 56);
  BOOL v7 = (std::basic_regex<char> *)memchr(__s, 10, (char *)a3 - (char *)__s);
  if (v7) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = a3;
  }
  if (v8 == __s)
  {
    uint64_t v10 = operator new(0x10uLL);
    uint64_t v11 = *(void *)(v6 + 8);
    v10[1] = v11;
    *(void *)(v6 + 8) = v10;
    *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
    if (v8 == a3) {
      uint64_t v9 = v8;
    }
    else {
      uint64_t v9 = (std::basic_regex<char> *)((char *)&v8->__traits_.__loc_.__locale_ + 1);
    }
    if (v9 == a3) {
      return a3;
    }
  }
  else
  {
    std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>(a1, __s, v8);
    if (v8 == a3) {
      uint64_t v9 = v8;
    }
    else {
      uint64_t v9 = (std::basic_regex<char> *)((char *)&v8->__traits_.__loc_.__locale_ + 1);
    }
    if (v9 == a3) {
      return a3;
    }
  }
  uint64_t v12 = *(void *)(a1 + 56);
  do
  {
    uint64_t v21 = (std::basic_regex<char> *)memchr(v9, 10, (char *)a3 - (char *)v9);
    if (v21) {
      uint64_t v22 = v21;
    }
    else {
      uint64_t v22 = a3;
    }
    if (v22 == v9)
    {
      uint64_t v13 = operator new(0x10uLL);
      uint64_t v14 = *(void *)(v12 + 8);
      v13[1] = v14;
      *(void *)(v12 + 8) = v13;
      *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
    }
    else
    {
      std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>(a1, v9, v22);
    }
    uint64_t v15 = operator new(0x18uLL);
    uint64_t v16 = *(void *)(v12 + 8);
    v15[1] = *(void *)(v6 + 8);
    v15[2] = v16;
    void *v15 = &unk_270EA6378;
    *(void *)(v6 + 8) = v15;
    *(void *)(v12 + 8) = 0;
    uint64_t v17 = operator new(0x10uLL);
    uint64_t v18 = *(void *)(*(void *)(a1 + 56) + 8);
    v17[1] = v18;
    *(void *)(v12 + 8) = v17;
    *(void *)(*(void *)(a1 + 56) + 8) = 0;
    uint64_t v19 = operator new(0x10uLL);
    uint64_t v20 = *(void *)(v12 + 8);
    void *v19 = &unk_270EA63C0;
    v19[1] = v20;
    *(void *)(*(void *)(a1 + 56) + 8) = v19;
    uint64_t v12 = *(void *)(v12 + 8);
    *(void *)(a1 + 56) = v12;
    if (v22 == a3) {
      uint64_t v9 = v22;
    }
    else {
      uint64_t v9 = (std::basic_regex<char> *)((char *)&v22->__traits_.__loc_.__locale_ + 1);
    }
  }
  while (v9 != a3);
  return a3;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_assertion<char const*>(uint64_t a1, char *a2, char *a3)
{
  if (a2 == a3) {
    return a2;
  }
  int v6 = *a2;
  if (v6 > 91)
  {
    if (v6 == 92)
    {
      if (a2 + 1 != a3)
      {
        int v14 = a2[1];
        if (v14 == 66)
        {
          uint64_t v15 = (char *)operator new(0x30uLL);
          uint64_t v23 = *(void *)(*(void *)(a1 + 56) + 8);
          *(void *)uint64_t v15 = &unk_270EA5F40;
          *((void *)v15 + 1) = v23;
          std::locale::locale((std::locale *)v15 + 2, (const std::locale *)a1);
          *(_OWORD *)(v15 + 24) = *(_OWORD *)(a1 + 8);
          v15[40] = 1;
        }
        else
        {
          if (v14 != 98) {
            return a2;
          }
          uint64_t v15 = (char *)operator new(0x30uLL);
          uint64_t v16 = *(void *)(*(void *)(a1 + 56) + 8);
          *(void *)uint64_t v15 = &unk_270EA5F40;
          *((void *)v15 + 1) = v16;
          std::locale::locale((std::locale *)v15 + 2, (const std::locale *)a1);
          *(_OWORD *)(v15 + 24) = *(_OWORD *)(a1 + 8);
          v15[40] = 0;
        }
        *(void *)(*(void *)(a1 + 56) + 8) = v15;
        *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
        return a2 + 2;
      }
      return a2;
    }
    if (v6 != 94) {
      return a2;
    }
    uint64_t v10 = operator new(0x18uLL);
    BOOL v11 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
    uint64_t v12 = *(void *)(a1 + 56);
    v10[1] = *(void *)(v12 + 8);
    uint64_t v13 = &unk_270EA5EB0;
LABEL_14:
    void *v10 = v13;
    *((unsigned char *)v10 + 16) = v11;
    *(void *)(v12 + 8) = v10;
    *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
    return a2 + 1;
  }
  if (v6 == 36)
  {
    uint64_t v10 = operator new(0x18uLL);
    BOOL v11 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
    uint64_t v12 = *(void *)(a1 + 56);
    v10[1] = *(void *)(v12 + 8);
    uint64_t v13 = &unk_270EA5EF8;
    goto LABEL_14;
  }
  BOOL v8 = v6 == 40;
  BOOL v7 = a2 + 1;
  BOOL v8 = !v8 || v7 == a3;
  if (v8) {
    return a2;
  }
  BOOL v8 = *v7 == 63;
  uint64_t v17 = a2 + 2;
  if (!v8 || v17 == a3) {
    return a2;
  }
  int v19 = *v17;
  if (v19 == 33)
  {
    *(void *)&long long v24 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v24 + 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)&v26.__loop_count_ = v24;
    *(_OWORD *)&v26.__start_.__cntrl_ = v24;
    *(_OWORD *)&v26.__traits_.__loc_.__locale_ = v24;
    *(_OWORD *)&v26.__traits_.__col_ = v24;
    std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]((uint64_t)&v26);
    v26.__flags_ = *(_DWORD *)(a1 + 24);
    uint64_t v21 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse<char const*>(&v26, a2 + 3, a3);
    marked_size_t count = v26.__marked_count_;
    std::basic_regex<char,std::regex_traits<char>>::__push_lookahead((std::basic_regex<char> *)a1, &v26, 1, *(_DWORD *)(a1 + 28));
    *(_DWORD *)(a1 + 28) += marked_count;
    if (v21 == a3 || *v21 != 41) {
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
    }
    goto LABEL_32;
  }
  if (v19 != 61) {
    return a2;
  }
  *(void *)&long long v20 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v20 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&v26.__loop_count_ = v20;
  *(_OWORD *)&v26.__start_.__cntrl_ = v20;
  *(_OWORD *)&v26.__traits_.__loc_.__locale_ = v20;
  *(_OWORD *)&v26.__traits_.__col_ = v20;
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]((uint64_t)&v26);
  v26.__flags_ = *(_DWORD *)(a1 + 24);
  uint64_t v21 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse<char const*>(&v26, a2 + 3, a3);
  unsigned int v22 = v26.__marked_count_;
  std::basic_regex<char,std::regex_traits<char>>::__push_lookahead((std::basic_regex<char> *)a1, &v26, 0, *(_DWORD *)(a1 + 28));
  *(_DWORD *)(a1 + 28) += v22;
  if (v21 == a3 || *v21 != 41) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
  }
LABEL_32:
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&v26.__traits_.__loc_);
  return v21 + 1;
}

void sub_2636CBAD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
}

void sub_2636CBAE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
}

void sub_2636CBAFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
}

void sub_2636CBB10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_atom<char const*>(std::basic_regex<char> *this, std::basic_regex<char> *a2, std::basic_regex<char> *a3)
{
  unint64_t v3 = a2;
  if (a2 != a3)
  {
    switch(LOBYTE(a2->__traits_.__loc_.__locale_))
    {
      case '(':
        if ((std::basic_regex<char> *)((char *)&a2->__traits_.__loc_.__locale_ + 1) == a3) {
          goto LABEL_32;
        }
        if ((std::basic_regex<char> *)((char *)&a2->__traits_.__loc_.__locale_ + 2) != a3
          && BYTE1(a2->__traits_.__loc_.__locale_) == 63
          && BYTE2(a2->__traits_.__loc_.__locale_) == 58)
        {
          p_open_size_t count = &this->__open_count_;
          ++this->__open_count_;
          BOOL v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<char const*>(this, (char *)&a2->__traits_.__loc_.__locale_ + 3, (char *)a3);
          if (v7 == (char *)a3) {
            goto LABEL_32;
          }
          unint64_t v3 = (std::basic_regex<char> *)v7;
          if (*v7 != 41) {
            goto LABEL_32;
          }
        }
        else
        {
          if ((this->__flags_ & 2) != 0)
          {
            marked_size_t count = this->__marked_count_;
          }
          else
          {
            uint64_t v12 = (std::__node<char> *)operator new(0x18uLL);
            marked_size_t count = this->__marked_count_ + 1;
            this->__marked_count_ = marked_count;
            std::vector<std::ssub_match>::pointer end = this->__end_;
            first = end->__first_;
            v12->__vftable = (std::__node<char>_vtbl *)&unk_270EA6210;
            v12[1].__vftable = (std::__node<char>_vtbl *)first;
            LODWORD(v12[2].__vftable) = marked_count;
            end->__first_ = v12;
            this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
          }
          p_open_size_t count = &this->__open_count_;
          ++this->__open_count_;
          uint64_t v16 = std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<char const*>(this, (char *)&v3->__traits_.__loc_.__locale_ + 1, (char *)a3);
          if (v16 == (char *)a3 || (unint64_t v3 = (std::basic_regex<char> *)v16, *v16 != 41)) {
LABEL_32:
          }
            std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
          if ((this->__flags_ & 2) == 0)
          {
            uint64_t v17 = (std::__node<char> *)operator new(0x18uLL);
            uint64_t v18 = this->__end_;
            int v19 = v18->__first_;
            v17->__vftable = (std::__node<char>_vtbl *)&unk_270EA6258;
            v17[1].__vftable = (std::__node<char>_vtbl *)v19;
            LODWORD(v17[2].__vftable) = marked_count;
            v18->__first_ = v17;
            this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
          }
        }
        --*p_open_count;
LABEL_29:
        unint64_t v3 = (std::basic_regex<char> *)((char *)v3 + 1);
        break;
      case ')':
      case ',':
      case '-':
      case '/':
      case '0':
      case '1':
      case '2':
      case '3':
      case '4':
      case '5':
      case '6':
      case '7':
      case '8':
      case '9':
      case ':':
      case ';':
      case '<':
      case '=':
      case '>':
      case '@':
      case 'A':
      case 'B':
      case 'C':
      case 'D':
      case 'E':
      case 'F':
      case 'G':
      case 'H':
      case 'I':
      case 'J':
      case 'K':
      case 'L':
      case 'M':
      case 'N':
      case 'O':
      case 'P':
      case 'Q':
      case 'R':
      case 'S':
      case 'T':
      case 'U':
      case 'V':
      case 'W':
      case 'X':
      case 'Y':
      case 'Z':
        goto LABEL_20;
      case '*':
      case '+':
      case '?':
        goto LABEL_31;
      case '.':
        BOOL v8 = (std::__node<char> *)operator new(0x10uLL);
        uint64_t v9 = this->__end_;
        uint64_t v10 = v9->__first_;
        v8->__vftable = (std::__node<char>_vtbl *)&unk_270EA5FD0;
        v8[1].__vftable = (std::__node<char>_vtbl *)v10;
        v9->__first_ = v8;
        this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
        goto LABEL_29;
      case '[':
        return (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>((uint64_t)this, (char *)a2, (char *)a3);
      case '\\':
        return std::basic_regex<char,std::regex_traits<char>>::__parse_atom_escape<char const*>(this, (unsigned __int8 *)a2, (unsigned __int8 *)a3);
      default:
        if (LOBYTE(a2->__traits_.__loc_.__locale_) == 123) {
LABEL_31:
        }
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)11>();
LABEL_20:
        return (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_pattern_character<char const*>(this, a2, a3);
    }
  }
  return (unsigned __int8 *)v3;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>(uint64_t a1, std::basic_regex<char> *this, std::basic_regex<char> *a3, std::__owns_one_state<char> *a4, size_t __mexp_begin, size_t __mexp_end)
{
  if (this == a3) {
    return this;
  }
  int v6 = *(_DWORD *)(a1 + 24) & 0x1F0;
  int locale_low = SLOBYTE(this->__traits_.__loc_.__locale_);
  if (locale_low <= 62)
  {
    if (locale_low == 42)
    {
      BOOL v8 = (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
      if (v6) {
        BOOL v20 = 1;
      }
      else {
        BOOL v20 = v8 == a3;
      }
      if (!v20 && LOBYTE(v8->__traits_.__loc_.__locale_) == 63)
      {
        uint64_t v9 = (char *)&this->__traits_.__loc_.__locale_ + 2;
        __mexp_std::vector<std::ssub_match>::pointer begin = __mexp_begin;
        __mexp_std::vector<std::ssub_match>::pointer end = __mexp_end;
        size_t v10 = 0;
        goto LABEL_35;
      }
      __mexp_std::vector<std::ssub_match>::pointer begin = __mexp_begin;
      __mexp_std::vector<std::ssub_match>::pointer end = __mexp_end;
      size_t v24 = 0;
      goto LABEL_44;
    }
    if (locale_low == 43)
    {
      BOOL v8 = (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
      if (!v6 && v8 != a3 && LOBYTE(v8->__traits_.__loc_.__locale_) == 63)
      {
        uint64_t v9 = (char *)&this->__traits_.__loc_.__locale_ + 2;
        __mexp_std::vector<std::ssub_match>::pointer begin = __mexp_begin;
        __mexp_std::vector<std::ssub_match>::pointer end = __mexp_end;
        size_t v10 = 1;
LABEL_35:
        std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v10, 0xFFFFFFFFFFFFFFFFLL, a4, __mexp_begin, __mexp_end, 0);
        return (std::basic_regex<char> *)v9;
      }
      __mexp_std::vector<std::ssub_match>::pointer begin = __mexp_begin;
      __mexp_std::vector<std::ssub_match>::pointer end = __mexp_end;
      size_t v24 = 1;
      goto LABEL_44;
    }
    return this;
  }
  if (locale_low == 63)
  {
    uint64_t v21 = (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
    if (v6) {
      BOOL v22 = 1;
    }
    else {
      BOOL v22 = v21 == a3;
    }
    if (v22 || LOBYTE(v21->__traits_.__loc_.__locale_) != 63)
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, 0, 1uLL, a4, __mexp_begin, __mexp_end, 1);
      return v21;
    }
    else
    {
      uint64_t v23 = (char *)&this->__traits_.__loc_.__locale_ + 2;
      std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, 0, 1uLL, a4, __mexp_begin, __mexp_end, 0);
      return (std::basic_regex<char> *)v23;
    }
  }
  else
  {
    if (locale_low != 123) {
      return this;
    }
    BOOL v11 = (char *)&this->__traits_.__loc_.__locale_ + 1;
    if ((std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1) == a3) {
      goto LABEL_71;
    }
    int v12 = *v11;
    if ((v12 & 0xF8) != 0x30 && (v12 & 0xFE) != 0x38) {
      goto LABEL_71;
    }
    int v13 = v12 - 48;
    int v14 = (char *)&this->__traits_.__loc_.__locale_ + 2;
    if ((std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 2) == a3)
    {
LABEL_19:
      int v14 = (char *)a3;
    }
    else
    {
      while (1)
      {
        int v15 = *v14;
        if ((v15 & 0xF8) != 0x30 && (v15 & 0xFE) != 0x38) {
          break;
        }
        if (v13 >= 214748364) {
          goto LABEL_71;
        }
        int v13 = v15 + 10 * v13 - 48;
        if (++v14 == (char *)a3) {
          goto LABEL_19;
        }
      }
    }
    if (v14 == v11) {
      goto LABEL_71;
    }
    if (v14 == (char *)a3) {
      goto LABEL_72;
    }
    int v16 = *v14;
    if (v16 != 44)
    {
      if (v16 == 125)
      {
        uint64_t v17 = (std::basic_regex<char> *)(v14 + 1);
        if (v6 || v17 == a3 || LOBYTE(v17->__traits_.__loc_.__locale_) != 63)
        {
          std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v13, v13, a4, __mexp_begin, __mexp_end, 1);
          return v17;
        }
        else
        {
          uint64_t v18 = (unsigned __int8 *)(v14 + 2);
          std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v13, v13, a4, __mexp_begin, __mexp_end, 0);
          return (std::basic_regex<char> *)v18;
        }
      }
LABEL_71:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>();
    }
    size_t v25 = (std::basic_regex<char> *)(v14 + 1);
    if (v14 + 1 == (char *)a3) {
      goto LABEL_71;
    }
    int v26 = LOBYTE(v25->__traits_.__loc_.__locale_);
    if (v26 == 125)
    {
      BOOL v8 = (std::basic_regex<char> *)(v14 + 2);
      if (!v6 && v8 != a3 && LOBYTE(v8->__traits_.__loc_.__locale_) == 63)
      {
        size_t v10 = v13;
        uint64_t v9 = v14 + 3;
        __mexp_std::vector<std::ssub_match>::pointer begin = __mexp_begin;
        __mexp_std::vector<std::ssub_match>::pointer end = __mexp_end;
        goto LABEL_35;
      }
      size_t v24 = v13;
      __mexp_std::vector<std::ssub_match>::pointer begin = __mexp_begin;
      __mexp_std::vector<std::ssub_match>::pointer end = __mexp_end;
LABEL_44:
      std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v24, 0xFFFFFFFFFFFFFFFFLL, a4, __mexp_begin, __mexp_end, 1);
      return v8;
    }
    if ((v26 & 0xF8) != 0x30 && (v26 & 0xFE) != 0x38) {
      goto LABEL_72;
    }
    int v27 = v26 - 48;
    uint64_t v28 = (std::basic_regex<char> *)(v14 + 2);
    if (v28 == a3)
    {
LABEL_60:
      uint64_t v28 = a3;
    }
    else
    {
      while (1)
      {
        int v29 = LOBYTE(v28->__traits_.__loc_.__locale_);
        if ((v29 & 0xF8) != 0x30 && (v29 & 0xFE) != 0x38) {
          break;
        }
        if (v27 >= 214748364) {
          goto LABEL_71;
        }
        int v27 = v29 + 10 * v27 - 48;
        uint64_t v28 = (std::basic_regex<char> *)((char *)v28 + 1);
        if (v28 == a3) {
          goto LABEL_60;
        }
      }
    }
    if (v28 == v25 || v28 == a3 || LOBYTE(v28->__traits_.__loc_.__locale_) != 125) {
LABEL_72:
    }
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>();
    if (v27 < v13) {
      goto LABEL_71;
    }
    uint64_t v30 = (std::basic_regex<char> *)((char *)&v28->__traits_.__loc_.__locale_ + 1);
    if (v6 || v30 == a3 || LOBYTE(v30->__traits_.__loc_.__locale_) != 63)
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v13, v27, a4, __mexp_begin, __mexp_end, 1);
      return v30;
    }
    else
    {
      size_t v31 = (char *)&v28->__traits_.__loc_.__locale_ + 2;
      std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v13, v27, a4, __mexp_begin, __mexp_end, 0);
      return (std::basic_regex<char> *)v31;
    }
  }
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_atom_escape<char const*>(std::basic_regex<char> *this, unsigned __int8 *a2, unsigned __int8 *a3)
{
  if (a2 == a3 || *a2 != 92) {
    return a2;
  }
  BOOL v5 = a2 + 1;
  if (a2 + 1 == a3) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  }
  int v7 = *v5;
  unsigned int v8 = v7 - 48;
  if (v7 == 48)
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_char(this, v8);
    return a2 + 2;
  }
  if ((v7 - 49) > 8) {
    goto LABEL_18;
  }
  size_t v10 = a2 + 2;
  if (a2 + 2 == a3)
  {
    size_t v10 = a3;
  }
  else
  {
    while (1)
    {
      int v11 = *v10;
      if ((v11 - 48) > 9) {
        break;
      }
      if (v8 >= 0x19999999) {
        goto LABEL_23;
      }
      ++v10;
      unsigned int v8 = v11 + 10 * v8 - 48;
      if (v10 == a3)
      {
        size_t v10 = a3;
        break;
      }
    }
    if (!v8) {
LABEL_23:
    }
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
  }
  if (v8 > this->__marked_count_) {
    goto LABEL_23;
  }
  std::basic_regex<char,std::regex_traits<char>>::__push_back_ref(this, v8);
  if (v10 == v5)
  {
LABEL_18:
    size_t v10 = std::basic_regex<char,std::regex_traits<char>>::__parse_character_class_escape<char const*>((uint64_t)this, a2 + 1, a3);
    if (v10 == v5)
    {
      int v12 = std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<char const*>(this, a2 + 1, a3, 0);
      if (v12 == v5) {
        return a2;
      }
      else {
        return v12;
      }
    }
  }
  return v10;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>(uint64_t a1, char *a2, char *a3)
{
  if (a2 != a3 && *a2 == 91)
  {
    if (a2 + 1 == a3) {
      goto LABEL_20;
    }
    int v5 = a2[1];
    char v6 = v5 == 94;
    int v7 = v5 == 94 ? a2 + 2 : a2 + 1;
    unsigned int v8 = operator new(0xB0uLL);
    std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v8, a1, *(void *)(*(void *)(a1 + 56) + 8), v6, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
    *(void *)(*(void *)(a1 + 56) + 8) = v8;
    *(void *)(a1 + 56) = v8;
    if (v7 == a3) {
      goto LABEL_20;
    }
    if ((*(_WORD *)(a1 + 24) & 0x1F0) != 0 && *v7 == 93)
    {
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)v8, 93);
      ++v7;
    }
    if (v7 == a3) {
      goto LABEL_20;
    }
    do
    {
      uint64_t v9 = v7;
      int v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_expression_term<char const*>(a1, v7, a3, (uint64_t)v8);
    }
    while (v7 != v9);
    if (v9 == a3) {
      goto LABEL_20;
    }
    if (*v9 == 45)
    {
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)v8, 45);
      ++v9;
    }
    if (v9 == a3 || *v9 != 93) {
LABEL_20:
    }
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
    return v9 + 1;
  }
  return a2;
}

void sub_2636CC558(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_pattern_character<char const*>(std::basic_regex<char> *a1, std::basic_regex<char> *this, std::basic_regex<char> *a3)
{
  if (this == a3) {
    return this;
  }
  switch(LOBYTE(this->__traits_.__loc_.__locale_))
  {
    case '$':
    case '(':
    case ')':
    case '*':
    case '+':
    case '.':
    case '?':
    case '[':
    case '\\':
    case ']':
    case '^':
    case '{':
    case '|':
    case '}':
      return this;
    default:
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, (std::basic_regex<char>::value_type)this->__traits_.__loc_.__locale_);
      __n128 result = (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
      break;
  }
  return result;
}

unsigned char *std::basic_regex<char,std::regex_traits<char>>::__parse_character_class_escape<char const*>(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  unint64_t v3 = a2;
  if (a2 != a3)
  {
    switch(*a2)
    {
      case 'D':
        int v5 = operator new(0xB0uLL);
        std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v5, a1, *(void *)(*(void *)(a1 + 56) + 8), 1, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
        goto LABEL_7;
      case 'S':
        int v5 = operator new(0xB0uLL);
        std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v5, a1, *(void *)(*(void *)(a1 + 56) + 8), 1, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
        goto LABEL_11;
      case 'W':
        char v6 = operator new(0xB0uLL);
        std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v6, a1, *(void *)(*(void *)(a1 + 56) + 8), 1, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
        goto LABEL_9;
      case 'd':
        int v5 = operator new(0xB0uLL);
        std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v5, a1, *(void *)(*(void *)(a1 + 56) + 8), 0, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
LABEL_7:
        *(void *)(*(void *)(a1 + 56) + 8) = v5;
        *(void *)(a1 + 56) = v5;
        int v7 = v5[40] | 0x400;
        goto LABEL_12;
      case 's':
        int v5 = operator new(0xB0uLL);
        std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v5, a1, *(void *)(*(void *)(a1 + 56) + 8), 0, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
LABEL_11:
        *(void *)(*(void *)(a1 + 56) + 8) = v5;
        *(void *)(a1 + 56) = v5;
        int v7 = v5[40] | 0x4000;
LABEL_12:
        v5[40] = v7;
        goto LABEL_13;
      case 'w':
        char v6 = operator new(0xB0uLL);
        std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v6, a1, *(void *)(*(void *)(a1 + 56) + 8), 0, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
LABEL_9:
        *(void *)(*(void *)(a1 + 56) + 8) = v6;
        *(void *)(a1 + 56) = v6;
        v6[40] |= 0x500u;
        std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)v6, 95);
LABEL_13:
        ++v3;
        break;
      default:
        return v3;
    }
  }
  return v3;
}

void sub_2636CC92C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_2636CC940(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_2636CC954(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_2636CC968(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_2636CC97C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_2636CC990(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<char const*>(std::basic_regex<char> *a1, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t *a4)
{
  unint64_t v4 = a2;
  if (a2 == a3) {
    return v4;
  }
  uint64_t v5 = *a2;
  std::basic_regex<char>::value_type v6 = v5;
  switch((char)v5)
  {
    case '0':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 0;
        return v4 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 0);
        return v4 + 1;
      }
    case 'c':
      if (v4 + 1 == a3) {
        goto LABEL_81;
      }
      unsigned __int8 v8 = v4[1];
      if (((v8 & 0xDF) - 65) > 0x19u) {
        goto LABEL_81;
      }
      std::basic_regex<char>::value_type v9 = v8 & 0x1F;
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(unsigned char *)a4 = v9;
        *((unsigned char *)a4 + 1) = 0;
        return v4 + 2;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v9);
        return v4 + 2;
      }
    case 'f':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 12;
        return v4 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 12);
        return v4 + 1;
      }
    case 'n':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 10;
        return v4 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 10);
        return v4 + 1;
      }
    case 'r':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 13;
        return v4 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 13);
        return v4 + 1;
      }
    case 't':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 9;
        return v4 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 9);
        return v4 + 1;
      }
    case 'u':
      if (v4 + 1 != a3)
      {
        int v10 = v4[1];
        if ((v10 & 0xF8) == 0x30 || (v10 & 0xFE) == 0x38 || (v10 | 0x20u) - 97 < 6)
        {
          v4 += 2;
          if (v4 != a3)
          {
            int v11 = *v4;
            if ((v11 & 0xF8) == 0x30 || (v11 & 0xFE) == 0x38 || (v11 | 0x20u) - 97 < 6) {
              goto LABEL_38;
            }
          }
        }
      }
      goto LABEL_81;
    case 'v':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 11;
        return v4 + 1;
      }
      else
      {
        std::basic_regex<char>::value_type v6 = 11;
LABEL_65:
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v6);
        return v4 + 1;
      }
    case 'x':
LABEL_38:
      if (v4 + 1 == a3) {
        goto LABEL_81;
      }
      unsigned __int8 v12 = v4[1];
      char v13 = -48;
      if ((v12 & 0xF8) == 0x30 || (v12 & 0xFE) == 0x38) {
        goto LABEL_43;
      }
      v12 |= 0x20u;
      if ((v12 - 97) >= 6u) {
        goto LABEL_81;
      }
      char v13 = -87;
LABEL_43:
      if (v4 + 2 == a3) {
        goto LABEL_81;
      }
      unsigned __int8 v14 = v4[2];
      char v15 = -48;
      if ((v14 & 0xF8) != 0x30 && (v14 & 0xFE) != 0x38)
      {
        v14 |= 0x20u;
        if ((v14 - 97) >= 6u) {
LABEL_81:
        }
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
        char v15 = -87;
      }
      std::basic_regex<char>::value_type v16 = v14 + 16 * (v12 + v13) + v15;
      if (!a4)
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v16);
        v4 += 3;
        return v4;
      }
      if (*((char *)a4 + 23) < 0)
      {
        a4[1] = 1;
        a4 = (uint64_t *)*a4;
      }
      else
      {
        *((unsigned char *)a4 + 23) = 1;
      }
      *(unsigned char *)a4 = v16;
      *((unsigned char *)a4 + 1) = 0;
      __n128 result = v4 + 3;
      break;
    default:
      if ((char)v5 == 95 || ((char)v5 & 0x80000000) == 0 && (a1->__traits_.__ct_->__tab_[v5] & 0x500) != 0) {
        goto LABEL_81;
      }
      if (!a4) {
        goto LABEL_65;
      }
      if (*((char *)a4 + 23) < 0)
      {
        a4[1] = 1;
        a4 = (uint64_t *)*a4;
      }
      else
      {
        *((unsigned char *)a4 + 23) = 1;
      }
      *(unsigned char *)a4 = v5;
      *((unsigned char *)a4 + 1) = 0;
      return v4 + 1;
  }
  return result;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_expression_term<char const*>(uint64_t a1, char *a2, char *a3, uint64_t a4)
{
  unint64_t v4 = a2;
  if (a2 == a3) {
    return v4;
  }
  int v5 = *a2;
  if (v5 == 93) {
    return v4;
  }
  std::basic_regex<char>::value_type v6 = (char *)a4;
  int v9 = 0;
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v40 = 0;
  if (a2 + 1 == a3 || v5 != 91)
  {
LABEL_38:
    int v24 = *(_DWORD *)(a1 + 24) & 0x1F0;
    goto LABEL_33;
  }
  int v10 = a2[1];
  if (v10 != 46)
  {
    if (v10 != 58)
    {
      if (v10 == 61)
      {
        std::basic_regex<char>::value_type v6 = std::basic_regex<char,std::regex_traits<char>>::__parse_equivalence_class<char const*>(a1, a2 + 2, a3, a4);
        char v11 = 0;
        if ((SHIBYTE(v40) & 0x80000000) == 0) {
          goto LABEL_64;
        }
        goto LABEL_63;
      }
      int v9 = 0;
      goto LABEL_38;
    }
    unsigned __int8 v12 = a2 + 2;
    if (a3 - (v4 + 2) >= 2)
    {
      uint64_t v13 = 0;
      unsigned __int8 v14 = (unsigned __int8 *)v4;
      if (v4[2] == 58) {
        goto LABEL_14;
      }
      do
      {
        do
        {
          if (a3 - v4 - 4 == v13) {
            goto LABEL_89;
          }
          unsigned __int8 v14 = (unsigned __int8 *)&v4[++v13];
        }
        while (v4[v13 + 2] != 58);
LABEL_14:
        ;
      }
      while (v14[3] != 93);
      char v15 = &v4[v13 + 2];
      if (v15 != a3)
      {
        int v16 = std::regex_traits<char>::__lookup_classname<char const*>(a1, v12, v15, *(_DWORD *)(a1 + 24) & 1);
        if (!v16) {
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)2>();
        }
        char v11 = 0;
        *((_DWORD *)v6 + 40) |= v16;
        std::basic_regex<char>::value_type v6 = &v4[v13 + 4];
        if (SHIBYTE(v40) < 0) {
          goto LABEL_63;
        }
        goto LABEL_64;
      }
    }
LABEL_89:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
  }
  uint64_t v17 = a2 + 2;
  if (a3 - (v4 + 2) < 2) {
    goto LABEL_89;
  }
  uint64_t v18 = a3 - v4 - 4;
  int v19 = v4 + 2;
  BOOL v20 = v17 + 1;
  if (*v17 == 46) {
    goto LABEL_23;
  }
  do
  {
    do
    {
      if (!v18) {
        goto LABEL_89;
      }
      --v18;
      int v19 = v20;
      int v21 = *v20++;
    }
    while (v21 != 46);
LABEL_23:
    ;
  }
  while (*v20 != 93);
  if (v19 == a3) {
    goto LABEL_89;
  }
  std::regex_traits<char>::__lookup_collatename<char *>(v17, a1, v19, (uint64_t)&v41);
  if (SHIBYTE(v40) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v40 = v42;
  *(_OWORD *)tm __p = v41;
  BOOL v22 = (char *)HIBYTE(v42);
  int v9 = SHIBYTE(v42);
  uint64_t v23 = *((void *)&v41 + 1);
  if (v42 < 0) {
    BOOL v22 = (char *)__p[1];
  }
  if ((unint64_t)(v22 - 1) >= 2) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
  }
  unint64_t v4 = v19 + 2;
  int v24 = *(_DWORD *)(a1 + 24) & 0x1F0;
  if (v42 >= 0) {
    uint64_t v23 = HIBYTE(v42);
  }
  if (v23)
  {
    uint64_t v28 = v4;
    if (v4 == a3) {
      goto LABEL_41;
    }
    goto LABEL_40;
  }
LABEL_33:
  if ((v24 | 0x40) != 0x40)
  {
    LOBYTE(v25) = *v4;
LABEL_57:
    if (v9 < 0)
    {
      uint64_t v34 = __p[0];
      __p[1] = (void *)1;
      *(unsigned char *)__p[0] = v25;
      v34[1] = 0;
      uint64_t v28 = v4 + 1;
      if (v4 + 1 == a3) {
        goto LABEL_41;
      }
    }
    else
    {
      HIBYTE(v40) = 1;
      LOWORD(__p[0]) = v25;
      uint64_t v28 = v4 + 1;
      if (v4 + 1 == a3) {
        goto LABEL_41;
      }
    }
    goto LABEL_40;
  }
  int v25 = *v4;
  if (v25 != 92) {
    goto LABEL_57;
  }
  int v26 = v4 + 1;
  if (v24) {
    int v27 = std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<char const*>((std::basic_regex<char> *)a1, v26, a3, (uint64_t *)__p);
  }
  else {
    int v27 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<char const*>((std::basic_regex<char> *)a1, (unsigned __int8 *)v26, (unsigned __int8 *)a3, (uint64_t)__p, (uint64_t)v6);
  }
  uint64_t v28 = v27;
  if (v27 == a3)
  {
LABEL_41:
    if (SHIBYTE(v40) < 0)
    {
      if (!__p[1]) {
        goto LABEL_62;
      }
      if (__p[1] != (void *)1)
      {
        uint64_t v30 = (void **)__p[0];
LABEL_61:
        std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:ne180100]((uint64_t)v6, *(char *)v30, *((char *)v30 + 1));
LABEL_62:
        char v11 = 1;
        unint64_t v4 = v28;
        if ((SHIBYTE(v40) & 0x80000000) == 0) {
          goto LABEL_64;
        }
        goto LABEL_63;
      }
      uint64_t v30 = (void **)__p[0];
    }
    else
    {
      if (!HIBYTE(v40)) {
        goto LABEL_62;
      }
      uint64_t v30 = __p;
      if (HIBYTE(v40) != 1) {
        goto LABEL_61;
      }
    }
    std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)v6, *(char *)v30);
    goto LABEL_62;
  }
LABEL_40:
  int v29 = *v28;
  if (v29 == 93) {
    goto LABEL_41;
  }
  size_t v31 = v28 + 1;
  if (v28 + 1 == a3 || v29 != 45 || *v31 == 93) {
    goto LABEL_41;
  }
  long long v41 = 0uLL;
  int64_t v42 = 0;
  unint64_t v4 = v28 + 2;
  if (v28 + 2 == a3 || *v31 != 91 || *v4 != 46)
  {
    if ((v24 | 0x40) == 0x40)
    {
      LODWORD(v31) = *v31;
      if (v31 == 92)
      {
        if (v24) {
          uint64_t v32 = std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<char const*>((std::basic_regex<char> *)a1, v28 + 2, a3, (uint64_t *)&v41);
        }
        else {
          uint64_t v32 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<char const*>((std::basic_regex<char> *)a1, (unsigned __int8 *)v28 + 2, (unsigned __int8 *)a3, (uint64_t)&v41, (uint64_t)v6);
        }
        goto LABEL_79;
      }
    }
    else
    {
      LOBYTE(v31) = *v31;
    }
    HIBYTE(v42) = 1;
    LOWORD(v41) = v31;
    goto LABEL_80;
  }
  uint64_t v32 = std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<char const*>(a1, v28 + 3, a3, (uint64_t)&v41);
LABEL_79:
  unint64_t v4 = v32;
LABEL_80:
  *(_OWORD *)size_t v37 = *(_OWORD *)__p;
  uint64_t v38 = v40;
  __p[1] = 0;
  uint64_t v40 = 0;
  __p[0] = 0;
  *(_OWORD *)int v35 = v41;
  uint64_t v36 = v42;
  long long v41 = 0uLL;
  int64_t v42 = 0;
  std::__bracket_expression<char,std::regex_traits<char>>::__add_range[abi:ne180100]((uint64_t)v6, (char *)v37, (uint64_t)v35);
  if (SHIBYTE(v36) < 0)
  {
    operator delete(v35[0]);
    if ((SHIBYTE(v38) & 0x80000000) == 0)
    {
LABEL_82:
      if ((SHIBYTE(v42) & 0x80000000) == 0) {
        goto LABEL_83;
      }
LABEL_87:
      operator delete((void *)v41);
      char v11 = 1;
      if (SHIBYTE(v40) < 0) {
        goto LABEL_63;
      }
      goto LABEL_64;
    }
  }
  else if ((SHIBYTE(v38) & 0x80000000) == 0)
  {
    goto LABEL_82;
  }
  operator delete(v37[0]);
  if (SHIBYTE(v42) < 0) {
    goto LABEL_87;
  }
LABEL_83:
  char v11 = 1;
  if (SHIBYTE(v40) < 0) {
LABEL_63:
  }
    operator delete(__p[0]);
LABEL_64:
  if (v11) {
    return v4;
  }
  return v6;
}

void sub_2636CD570(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (*(char *)(v28 - 49) < 0)
  {
    operator delete(*(void **)(v28 - 72));
    if (a28 < 0)
    {
LABEL_5:
      operator delete(__p);
      _Unwind_Resume(a1);
    }
  }
  else if (a28 < 0)
  {
    goto LABEL_5;
  }
  _Unwind_Resume(a1);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_equivalence_class<char const*>(uint64_t a1, char *__src, char *a3, uint64_t a4)
{
  if (a3 - __src < 2 || a3 - 1 == __src) {
    goto LABEL_39;
  }
  uint64_t v7 = 0;
  unsigned __int8 v8 = __src;
  if (*__src != 61) {
    goto LABEL_5;
  }
LABEL_4:
  if (v8[1] != 93)
  {
LABEL_5:
    while (a3 - __src - 2 != v7)
    {
      unsigned __int8 v8 = &__src[++v7];
      if (__src[v7] == 61) {
        goto LABEL_4;
      }
    }
LABEL_39:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
  }
  if (&__src[v7] == a3) {
    goto LABEL_39;
  }
  memset(v18, 170, sizeof(v18));
  std::regex_traits<char>::__lookup_collatename<char *>(__src, a1, &__src[v7], (uint64_t)v18);
  if ((SHIBYTE(v18[2]) & 0x80000000) == 0)
  {
    int v9 = (char *)HIBYTE(v18[2]);
    if (HIBYTE(v18[2]))
    {
      memset(__p, 170, sizeof(__p));
      int v10 = v18;
      goto LABEL_14;
    }
LABEL_40:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
  }
  int v9 = (char *)v18[1];
  if (!v18[1]) {
    goto LABEL_40;
  }
  memset(__p, 170, sizeof(__p));
  int v10 = (void **)v18[0];
LABEL_14:
  std::regex_traits<char>::__transform_primary<std::__wrap_iter<char *>>(a1, (uint64_t)v10, &v9[(void)v10], (unsigned char **)__p);
  if (SHIBYTE(__p[2]) < 0)
  {
    if (__p[1])
    {
LABEL_16:
      unint64_t v11 = *(void *)(a4 + 144);
      if (v11 >= *(void *)(a4 + 152))
      {
        *(void *)(a4 + 144) = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)(a4 + 136), (uint64_t)__p);
        if (SHIBYTE(__p[2]) < 0) {
          goto LABEL_37;
        }
      }
      else
      {
        if ((HIBYTE(__p[2]) & 0x80) != 0)
        {
          std::string::__init_copy_ctor_external(*(std::string **)(a4 + 144), (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
        }
        else
        {
          long long v12 = *(_OWORD *)__p;
          *(void **)(v11 + 16) = __p[2];
          *(_OWORD *)unint64_t v11 = v12;
        }
        *(void *)(a4 + 144) = v11 + 24;
        *(void *)(a4 + 144) = v11 + 24;
        if (SHIBYTE(__p[2]) < 0) {
          goto LABEL_37;
        }
      }
      goto LABEL_33;
    }
  }
  else if (HIBYTE(__p[2]))
  {
    goto LABEL_16;
  }
  uint64_t v13 = (void *)HIBYTE(v18[2]);
  if (SHIBYTE(v18[2]) < 0) {
    uint64_t v13 = v18[1];
  }
  if (v13 == (void *)2)
  {
    char v15 = v18;
    if (SHIBYTE(v18[2]) < 0) {
      char v15 = (void **)v18[0];
    }
    std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:ne180100](a4, *(char *)v15, *((char *)v15 + 1));
  }
  else
  {
    if (v13 != (void *)1) {
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
    }
    unsigned __int8 v14 = v18;
    if (SHIBYTE(v18[2]) < 0) {
      unsigned __int8 v14 = (void **)v18[0];
    }
    std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](a4, *(char *)v14);
  }
  if (SHIBYTE(__p[2]) < 0)
  {
LABEL_37:
    operator delete(__p[0]);
    if (SHIBYTE(v18[2]) < 0) {
      goto LABEL_38;
    }
    return &__src[v7 + 2];
  }
LABEL_33:
  if (SHIBYTE(v18[2]) < 0) {
LABEL_38:
  }
    operator delete(v18[0]);
  return &__src[v7 + 2];
}

void sub_2636CD83C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  *(void *)(v20 + 144) = v21;
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<char const*>(uint64_t a1, char *__src, char *a3, uint64_t a4)
{
  if (a3 - __src < 2 || a3 - 1 == __src) {
    goto LABEL_15;
  }
  uint64_t v6 = 0;
  uint64_t v7 = __src;
  if (*__src != 46) {
    goto LABEL_5;
  }
LABEL_4:
  if (v7[1] != 93)
  {
LABEL_5:
    while (a3 - __src - 2 != v6)
    {
      uint64_t v7 = &__src[++v6];
      if (__src[v6] == 46) {
        goto LABEL_4;
      }
    }
LABEL_15:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
  }
  if (&__src[v6] == a3) {
    goto LABEL_15;
  }
  std::regex_traits<char>::__lookup_collatename<char *>(__src, a1, &__src[v6], (uint64_t)&v11);
  if (*(char *)(a4 + 23) < 0) {
    operator delete(*(void **)a4);
  }
  *(_OWORD *)a4 = v11;
  unint64_t v8 = v12;
  *(void *)(a4 + 16) = v12;
  unint64_t v9 = HIBYTE(v8);
  if ((v9 & 0x80u) != 0) {
    unint64_t v9 = *(void *)(a4 + 8);
  }
  if (v9 - 1 >= 2) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
  }
  return &__src[v6 + 2];
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<char const*>(std::basic_regex<char> *a1, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t a4, uint64_t a5)
{
  if (a2 == a3) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  }
  switch(*a2)
  {
    case 'D':
      *(_DWORD *)(a5 + 164) |= 0x400u;
      __n128 result = a2 + 1;
      break;
    case 'E':
    case 'F':
    case 'G':
    case 'H':
    case 'I':
    case 'J':
    case 'K':
    case 'L':
    case 'M':
    case 'N':
    case 'O':
    case 'P':
    case 'Q':
    case 'R':
    case 'T':
    case 'U':
    case 'V':
    case 'X':
    case 'Y':
    case 'Z':
    case '[':
    case '\\':
    case ']':
    case '^':
    case '_':
    case 'a':
    case 'c':
    case 'e':
    case 'f':
    case 'g':
    case 'h':
    case 'i':
    case 'j':
    case 'k':
    case 'l':
    case 'm':
    case 'n':
    case 'o':
    case 'p':
    case 'q':
    case 'r':
    case 't':
    case 'u':
    case 'v':
      goto LABEL_8;
    case 'S':
      *(_DWORD *)(a5 + 164) |= 0x4000u;
      __n128 result = a2 + 1;
      break;
    case 'W':
      *(_DWORD *)(a5 + 164) |= 0x500u;
      std::__bracket_expression<char,std::regex_traits<char>>::__add_neg_char[abi:ne180100](a5, 95);
      __n128 result = a2 + 1;
      break;
    case 'b':
      if (*(char *)(a4 + 23) < 0)
      {
        *(void *)(a4 + 8) = 1;
        a4 = *(void *)a4;
      }
      else
      {
        *(unsigned char *)(a4 + 23) = 1;
      }
      *(_WORD *)a4 = 8;
      __n128 result = a2 + 1;
      break;
    case 'd':
      *(_DWORD *)(a5 + 160) |= 0x400u;
      __n128 result = a2 + 1;
      break;
    case 's':
      *(_DWORD *)(a5 + 160) |= 0x4000u;
      __n128 result = a2 + 1;
      break;
    case 'w':
      *(_DWORD *)(a5 + 160) |= 0x500u;
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](a5, 95);
      __n128 result = a2 + 1;
      break;
    default:
      if (*a2)
      {
LABEL_8:
        __n128 result = std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<char const*>(a1, a2, a3, (uint64_t *)a4);
      }
      else
      {
        if (*(char *)(a4 + 23) < 0)
        {
          *(void *)(a4 + 8) = 1;
          a4 = *(void *)a4;
        }
        else
        {
          *(unsigned char *)(a4 + 23) = 1;
        }
        *(unsigned char *)a4 = 0;
        *(unsigned char *)(a4 + 1) = 0;
        __n128 result = a2 + 1;
      }
      break;
  }
  return result;
}

std::basic_regex<char>::value_type *std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<char const*>(std::basic_regex<char> *a1, std::basic_regex<char>::value_type *a2, std::basic_regex<char>::value_type *a3, uint64_t *a4)
{
  if (a2 == a3) {
LABEL_70:
  }
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  std::basic_regex<char>::value_type v5 = *a2;
  switch(*a2)
  {
    case '""':
    case '/':
    case '\\':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(unsigned char *)a4 = v5;
        *((unsigned char *)a4 + 1) = 0;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v5);
        return a2 + 1;
      }
    case 'a':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 7;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 7);
        return a2 + 1;
      }
    case 'b':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 8;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 8);
        return a2 + 1;
      }
    case 'f':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 12;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 12);
        return a2 + 1;
      }
    case 'n':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 10;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 10);
        return a2 + 1;
      }
    case 'r':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 13;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 13);
        return a2 + 1;
      }
    case 't':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 9;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 9);
        return a2 + 1;
      }
    case 'v':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 11;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 11);
        return a2 + 1;
      }
    default:
      if ((v5 & 0xF8) != 0x30) {
        goto LABEL_70;
      }
      std::basic_regex<char>::value_type v7 = *a2 - 48;
      unint64_t v8 = a2 + 1;
      if (a2 + 1 == a3)
      {
        unint64_t v8 = a3;
LABEL_42:
        if (a4) {
          goto LABEL_43;
        }
LABEL_69:
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v7);
        return v8;
      }
      if ((*v8 & 0xF8) != 0x30) {
        goto LABEL_42;
      }
      std::basic_regex<char>::value_type v7 = *v8 + 8 * v7 - 48;
      if (a2 + 2 == a3)
      {
        unint64_t v8 = a3;
        if (a4) {
          goto LABEL_43;
        }
        goto LABEL_69;
      }
      std::basic_regex<char>::value_type v9 = a2[2];
      int v10 = v9 & 0xF8;
      std::basic_regex<char>::value_type v11 = v9 + 8 * v7 - 48;
      if (v10 == 48) {
        unint64_t v8 = a2 + 3;
      }
      else {
        unint64_t v8 = a2 + 2;
      }
      if (v10 == 48) {
        std::basic_regex<char>::value_type v7 = v11;
      }
      if (!a4) {
        goto LABEL_69;
      }
LABEL_43:
      if (*((char *)a4 + 23) < 0)
      {
        a4[1] = 1;
        a4 = (uint64_t *)*a4;
      }
      else
      {
        *((unsigned char *)a4 + 23) = 1;
      }
      *(unsigned char *)a4 = v7;
      *((unsigned char *)a4 + 1) = 0;
      return v8;
  }
}

uint64_t std::regex_traits<char>::__lookup_classname<char const*>(uint64_t a1, unsigned char *__src, unsigned char *a3, BOOL a4)
{
  size_t v4 = a3 - __src;
  memset(__dst, 170, sizeof(__dst));
  if ((unint64_t)(a3 - __src) >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v4 <= 0x16)
  {
    HIBYTE(__dst[2]) = (_BYTE)a3 - (_BYTE)__src;
    std::basic_regex<char>::value_type v9 = __dst;
    if (__src == a3) {
      goto LABEL_9;
    }
LABEL_8:
    memcpy(v9, __src, v4);
    std::basic_regex<char>::value_type v9 = (void **)((char *)v9 + v4);
    goto LABEL_9;
  }
  uint64_t v10 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v4 | 7) != 0x17) {
    uint64_t v10 = v4 | 7;
  }
  uint64_t v11 = v10 + 1;
  std::basic_regex<char>::value_type v9 = (void **)operator new(v10 + 1);
  __dst[1] = (void *)v4;
  __dst[2] = (void *)(v11 | 0x8000000000000000);
  __dst[0] = v9;
  if (__src != a3) {
    goto LABEL_8;
  }
LABEL_9:
  *(unsigned char *)std::basic_regex<char>::value_type v9 = 0;
  unint64_t v12 = (char *)HIBYTE(__dst[2]);
  if (SHIBYTE(__dst[2]) >= 0) {
    uint64_t v13 = __dst;
  }
  else {
    uint64_t v13 = (void **)__dst[0];
  }
  if (SHIBYTE(__dst[2]) < 0) {
    unint64_t v12 = (char *)__dst[1];
  }
  (*(void (**)(void, void **, char *))(**(void **)(a1 + 8) + 48))(*(void *)(a1 + 8), v13, &v12[(void)v13]);
  if (SHIBYTE(__dst[2]) >= 0) {
    unsigned __int8 v14 = (const char *)__dst;
  }
  else {
    unsigned __int8 v14 = (const char *)__dst[0];
  }
  uint64_t classname = std::__get_classname(v14, a4);
  if (SHIBYTE(__dst[2]) < 0) {
    operator delete(__dst[0]);
  }
  return classname;
}

void sub_2636CE2F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_nondupl_RE<char const*>(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v6 = std::basic_regex<char,std::regex_traits<char>>::__parse_one_char_or_coll_elem_RE<char const*>((std::basic_regex<char> *)a1, (char *)a2, a3);
  std::basic_regex<char>::value_type v7 = v6;
  if (v6 != (char *)a2 || v6 == a3) {
    return v7;
  }
  if ((char *)(a2 + 1) == a3) {
    return (char *)a2;
  }
  if (*(unsigned char *)a2 != 92) {
    return (char *)a2;
  }
  int v8 = *(unsigned __int8 *)(a2 + 1);
  if (v8 == 40)
  {
    std::basic_regex<char>::value_type v9 = (std::basic_regex<char> *)(a2 + 2);
    if ((*(unsigned char *)(a1 + 24) & 2) != 0)
    {
      int v11 = *(_DWORD *)(a1 + 28);
    }
    else
    {
      uint64_t v10 = operator new(0x18uLL);
      int v11 = *(_DWORD *)(a1 + 28) + 1;
      *(_DWORD *)(a1 + 28) = v11;
      uint64_t v12 = *(void *)(a1 + 56);
      uint64_t v13 = *(void *)(v12 + 8);
      void *v10 = &unk_270EA6210;
      v10[1] = v13;
      *((_DWORD *)v10 + 4) = v11;
      *(void *)(v12 + 8) = v10;
      *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
    }
    do
    {
      if (v9 == (std::basic_regex<char> *)a3) {
        goto LABEL_25;
      }
      char v15 = v9;
      int v16 = *(std::__owns_one_state<char> **)(a1 + 56);
      int v17 = *(_DWORD *)(a1 + 28);
      uint64_t v18 = (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_nondupl_RE<char const*>(a1, v15, a3);
      if (v18 == v15) {
        break;
      }
      std::basic_regex<char>::value_type v9 = std::basic_regex<char,std::regex_traits<char>>::__parse_RE_dupl_symbol<char const*>((std::basic_regex<char> *)a1, v18, (std::basic_regex<char> *)a3, v16, (v17 + 1), (*(_DWORD *)(a1 + 28) + 1));
    }
    while (v9 != v15);
    if ((char *)&v15->__traits_.__loc_.__locale_ + 1 == a3
      || LOBYTE(v15->__traits_.__loc_.__locale_) != 92
      || BYTE1(v15->__traits_.__loc_.__locale_) != 41)
    {
LABEL_25:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
    }
    std::basic_regex<char>::value_type v7 = (char *)v15 + 2 * (BYTE1(v15->__traits_.__loc_.__locale_) == 41);
    if ((*(unsigned char *)(a1 + 24) & 2) == 0)
    {
      int v19 = operator new(0x18uLL);
      uint64_t v20 = *(void *)(a1 + 56);
      uint64_t v21 = *(void *)(v20 + 8);
      void *v19 = &unk_270EA6258;
      v19[1] = v21;
      *((_DWORD *)v19 + 4) = v11;
      *(void *)(v20 + 8) = v19;
      *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
      return v7;
    }
    return v7;
  }
  if ((v8 & 0xF8) != 0x30 && (v8 & 0xFE) != 0x38 || (v8 - 49) > 8) {
    return (char *)a2;
  }
  if ((v8 - 48) > *(_DWORD *)(a1 + 28)) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
  }
  std::basic_regex<char,std::regex_traits<char>>::__push_back_ref((std::basic_regex<char> *)a1, v8 - 48);
  return (char *)(a2 + 2);
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_RE_dupl_symbol<char const*>(std::basic_regex<char> *a1, std::basic_regex<char> *this, std::basic_regex<char> *a3, std::__owns_one_state<char> *a4, size_t __mexp_begin, size_t __mexp_end)
{
  uint64_t v6 = this;
  if (this == a3) {
    return v6;
  }
  int locale_low = LOBYTE(this->__traits_.__loc_.__locale_);
  if (locale_low == 42)
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_loop(a1, 0, 0xFFFFFFFFFFFFFFFFLL, a4, __mexp_begin, __mexp_end, 1);
    return (std::basic_regex<char> *)((char *)v6 + 1);
  }
  if ((std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1) == a3
    || locale_low != 92
    || BYTE1(this->__traits_.__loc_.__locale_) != 123)
  {
    return v6;
  }
  std::basic_regex<char>::value_type v9 = (std::basic_regex<char> *)((char *)this + 2 * (BYTE1(this->__traits_.__loc_.__locale_) == 123));
  if (v9 == a3) {
    goto LABEL_43;
  }
  int v10 = LOBYTE(v9->__traits_.__loc_.__locale_);
  if ((v10 & 0xF8) != 0x30 && (v10 & 0xFE) != 0x38) {
    goto LABEL_43;
  }
  int v11 = v10 - 48;
  uint64_t v12 = (std::basic_regex<char> *)((char *)&v9->__traits_.__loc_.__locale_ + 1);
  if ((std::basic_regex<char> *)((char *)&v9->__traits_.__loc_.__locale_ + 1) == a3)
  {
LABEL_16:
    uint64_t v12 = a3;
  }
  else
  {
    while (1)
    {
      int v13 = LOBYTE(v12->__traits_.__loc_.__locale_);
      if ((v13 & 0xF8) != 0x30 && (v13 & 0xFE) != 0x38) {
        break;
      }
      if (v11 >= 214748364) {
        goto LABEL_43;
      }
      int v11 = v13 + 10 * v11 - 48;
      uint64_t v12 = (std::basic_regex<char> *)((char *)v12 + 1);
      if (v12 == a3) {
        goto LABEL_16;
      }
    }
  }
  if (v12 == v9) {
    goto LABEL_43;
  }
  if (v12 == a3) {
    goto LABEL_41;
  }
  unsigned __int8 v14 = (std::basic_regex<char> *)((char *)&v12->__traits_.__loc_.__locale_ + 1);
  int v15 = LOBYTE(v12->__traits_.__loc_.__locale_);
  if (v15 != 44)
  {
    if (v14 != a3 && v15 == 92 && LOBYTE(v14->__traits_.__loc_.__locale_) == 125)
    {
      int v19 = (unsigned __int8 *)&v12->__traits_.__loc_.__locale_ + 2;
      std::basic_regex<char,std::regex_traits<char>>::__push_loop(a1, v11, v11, a4, __mexp_begin, __mexp_end, 1);
      return (std::basic_regex<char> *)v19;
    }
    goto LABEL_41;
  }
  if (v14 == a3) {
    goto LABEL_41;
  }
  int v16 = LOBYTE(v14->__traits_.__loc_.__locale_);
  if ((v16 & 0xF8) == 0x30 || (v16 & 0xFE) == 0x38)
  {
    unsigned __int8 v14 = (std::basic_regex<char> *)((char *)&v12->__traits_.__loc_.__locale_ + 2);
    if ((std::basic_regex<char> *)((char *)&v12->__traits_.__loc_.__locale_ + 2) == a3) {
      goto LABEL_41;
    }
    int v17 = v16 - 48;
    while (1)
    {
      int v16 = LOBYTE(v14->__traits_.__loc_.__locale_);
      if ((v16 & 0xF8) != 0x30 && (v16 & 0xFE) != 0x38) {
        break;
      }
      if (v17 >= 214748364) {
        goto LABEL_43;
      }
      int v17 = v16 + 10 * v17 - 48;
      unsigned __int8 v14 = (std::basic_regex<char> *)((char *)v14 + 1);
      if (v14 == a3) {
        goto LABEL_41;
      }
    }
  }
  else
  {
    int v17 = -1;
  }
  if (v14 == a3
    || (std::basic_regex<char> *)((char *)&v14->__traits_.__loc_.__locale_ + 1) == a3
    || v16 != 92
    || BYTE1(v14->__traits_.__loc_.__locale_) != 125)
  {
LABEL_41:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>();
  }
  uint64_t v18 = (unsigned __int8 *)v14 + 2 * (BYTE1(v14->__traits_.__loc_.__locale_) == 125);
  if (v17 != -1)
  {
    if (v17 >= v11)
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_loop(a1, v11, v17, a4, __mexp_begin, __mexp_end, 1);
      return (std::basic_regex<char> *)v18;
    }
LABEL_43:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>();
  }
  std::basic_regex<char,std::regex_traits<char>>::__push_loop(a1, v11, 0xFFFFFFFFFFFFFFFFLL, a4, __mexp_begin, __mexp_end, 1);
  return (std::basic_regex<char> *)v18;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_one_char_or_coll_elem_RE<char const*>(std::basic_regex<char> *this, char *a2, char *a3)
{
  if (a2 != a3)
  {
    uint64_t v6 = a2 + 1;
    int v5 = *a2;
    if (a2 + 1 != a3 || v5 != 36)
    {
      if ((v5 - 46) > 0x2E || ((1 << (v5 - 46)) & 0x600000000001) == 0)
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(this, v5);
        return a2 + 1;
      }
      if (v6 == a3 || v5 != 92)
      {
        if (v5 == 46)
        {
          int v10 = (std::__node<char> *)operator new(0x10uLL);
          std::vector<std::ssub_match>::pointer end = this->__end_;
          first = end->__first_;
          v10->__vftable = (std::__node<char>_vtbl *)&unk_270EA6408;
          v10[1].__vftable = (std::__node<char>_vtbl *)first;
          end->__first_ = v10;
          this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
          return a2 + 1;
        }
      }
      else
      {
        int v9 = *v6;
        if ((v9 - 36) <= 0x3A && ((1 << (v9 - 36)) & 0x580000000000441) != 0)
        {
          std::basic_regex<char,std::regex_traits<char>>::__push_char(this, v9);
          return a2 + 2;
        }
      }
    }
  }

  return std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>((uint64_t)this, a2, a3);
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<char const*>(uint64_t a1, std::basic_regex<char> *a2, std::basic_regex<char> *a3)
{
  uint64_t v6 = *(std::__owns_one_state<char> **)(a1 + 56);
  int v7 = *(_DWORD *)(a1 + 28);
  int v8 = std::basic_regex<char,std::regex_traits<char>>::__parse_ORD_CHAR_ERE<char const*>((std::basic_regex<char> *)a1, a2, a3);
  if (v8 != a2
    || (int v8 = (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_QUOTED_CHAR_ERE<char const*>(a1, a2, a3), v8 != a2))
  {
    if (v8 != a2) {
      goto LABEL_25;
    }
LABEL_4:
    if (v8 != a3)
    {
      int locale_low = SLOBYTE(a2->__traits_.__loc_.__locale_);
      if (locale_low == 36)
      {
        int v10 = operator new(0x18uLL);
        BOOL v11 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
        uint64_t v12 = *(void *)(a1 + 56);
        v10[1] = *(void *)(v12 + 8);
        int v13 = &unk_270EA5EF8;
        goto LABEL_13;
      }
      if (locale_low != 40)
      {
        if (locale_low == 94)
        {
          int v10 = operator new(0x18uLL);
          BOOL v11 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
          uint64_t v12 = *(void *)(a1 + 56);
          v10[1] = *(void *)(v12 + 8);
          int v13 = &unk_270EA5EB0;
LABEL_13:
          void *v10 = v13;
          *((unsigned char *)v10 + 16) = v11;
          *(void *)(v12 + 8) = v10;
          goto LABEL_14;
        }
        return a2;
      }
      if ((*(unsigned char *)(a1 + 24) & 2) != 0)
      {
        int v18 = *(_DWORD *)(a1 + 28);
      }
      else
      {
        int v17 = operator new(0x18uLL);
        int v18 = *(_DWORD *)(a1 + 28) + 1;
        *(_DWORD *)(a1 + 28) = v18;
        uint64_t v19 = *(void *)(a1 + 56);
        uint64_t v20 = *(void *)(v19 + 8);
        void *v17 = &unk_270EA6210;
        v17[1] = v20;
        *((_DWORD *)v17 + 4) = v18;
        *(void *)(v19 + 8) = v17;
        *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
      }
      ++*(_DWORD *)(a1 + 36);
      uint64_t v21 = (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>(a1, (char *)&a2->__traits_.__loc_.__locale_ + 1, a3);
      if (v21 == a3 || (BOOL v22 = v21, LOBYTE(v21->__traits_.__loc_.__locale_) != 41)) {
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
      }
      if ((*(unsigned char *)(a1 + 24) & 2) == 0)
      {
        uint64_t v23 = operator new(0x18uLL);
        uint64_t v24 = *(void *)(a1 + 56);
        uint64_t v25 = *(void *)(v24 + 8);
        *uint64_t v23 = &unk_270EA6258;
        v23[1] = v25;
        *((_DWORD *)v23 + 4) = v18;
        *(void *)(v24 + 8) = v23;
        *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
      }
      --*(_DWORD *)(a1 + 36);
      int v8 = (std::basic_regex<char> *)((char *)&v22->__traits_.__loc_.__locale_ + 1);
    }
LABEL_25:
    if (v8 != a2) {
      goto LABEL_26;
    }
    return a2;
  }
  if (a2 == a3 || LOBYTE(a2->__traits_.__loc_.__locale_) != 46)
  {
    int v8 = (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>(a1, (char *)a2, (char *)a3);
    if (v8 != a2) {
      goto LABEL_25;
    }
    goto LABEL_4;
  }
  unsigned __int8 v14 = operator new(0x10uLL);
  uint64_t v15 = *(void *)(a1 + 56);
  uint64_t v16 = *(void *)(v15 + 8);
  *unsigned __int8 v14 = &unk_270EA6408;
  v14[1] = v16;
  *(void *)(v15 + 8) = v14;
LABEL_14:
  *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
  int v8 = (std::basic_regex<char> *)((char *)&a2->__traits_.__loc_.__locale_ + 1);
LABEL_26:
  size_t v26 = (*(_DWORD *)(a1 + 28) + 1);

  return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>(a1, v8, a3, v6, (v7 + 1), v26);
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_ORD_CHAR_ERE<char const*>(std::basic_regex<char> *a1, std::basic_regex<char> *this, std::basic_regex<char> *a3)
{
  if (this == a3) {
    return this;
  }
  switch(LOBYTE(this->__traits_.__loc_.__locale_))
  {
    case '$':
    case '(':
    case '*':
    case '+':
    case '.':
    case '?':
    case '[':
    case '\\':
    case '^':
    case '{':
    case '|':
      return this;
    case ')':
      if (a1->__open_count_) {
        return this;
      }
      break;
    default:
      break;
  }
  std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, (std::basic_regex<char>::value_type)this->__traits_.__loc_.__locale_);
  return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
}

std::basic_regex<char>::value_type *std::basic_regex<char,std::regex_traits<char>>::__parse_QUOTED_CHAR_ERE<char const*>(uint64_t a1, std::basic_regex<char> *this, std::basic_regex<char> *a3)
{
  unint64_t v3 = this;
  if (this == a3) {
    return (std::basic_regex<char>::value_type *)v3;
  }
  size_t v4 = (char *)&this->__traits_.__loc_.__locale_ + 1;
  if ((std::basic_regex<char> *)((char *)&v3->__traits_.__loc_.__locale_ + 1) == a3
    || LOBYTE(v3->__traits_.__loc_.__locale_) != 92)
  {
    return (std::basic_regex<char>::value_type *)v3;
  }
  std::basic_regex<char>::value_type v5 = *v4;
  switch(*v4)
  {
    case '$':
    case '(':
    case ')':
    case '*':
    case '+':
    case '.':
    case '?':
    case '[':
    case '\\':
    case '^':
    case '{':
    case '|':
    case '}':
      std::basic_regex<char,std::regex_traits<char>>::__push_char((std::basic_regex<char> *)a1, v5);
      return (char *)v3 + 2;
    default:
      if ((*(_DWORD *)(a1 + 24) & 0x1F0) == 0x40)
      {
        __n128 result = std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<char const*>((std::basic_regex<char> *)a1, v4, (std::basic_regex<char>::value_type *)a3, 0);
      }
      else
      {
        BOOL v7 = std::basic_regex<char,std::regex_traits<char>>::__test_back_ref((std::basic_regex<char> *)a1, v5);
        uint64_t v8 = 2;
        if (!v7) {
          uint64_t v8 = 0;
        }
        __n128 result = (char *)v3 + v8;
      }
      break;
  }
  return result;
}

uint64_t *std::unique_ptr<std::__hash_node<std::string,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((unsigned char *)a1 + 16) && *(char *)(v2 + 39) < 0) {
      operator delete(*(void **)(v2 + 16));
    }
    operator delete((void *)v2);
  }
  return a1;
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100](uint64_t a1, uint64_t *a2, unint64_t a3)
{
  if (a3 > 0x20)
  {
    if (a3 > 0x40)
    {
      uint64_t v23 = *(uint64_t *)((char *)a2 + a3 - 48);
      uint64_t v24 = *(uint64_t *)((char *)a2 + a3 - 40);
      uint64_t v25 = *(uint64_t *)((char *)a2 + a3 - 24);
      uint64_t v27 = *(uint64_t *)((char *)a2 + a3 - 64);
      uint64_t v26 = *(uint64_t *)((char *)a2 + a3 - 56);
      uint64_t v28 = *(uint64_t *)((char *)a2 + a3 - 16);
      uint64_t v29 = *(uint64_t *)((char *)a2 + a3 - 8);
      unint64_t v30 = v26 + v28;
      unint64_t v31 = 0x9DDFEA08EB382D69
          * (v25 ^ ((0x9DDFEA08EB382D69 * (v25 ^ (v23 + a3))) >> 47) ^ (0x9DDFEA08EB382D69 * (v25 ^ (v23 + a3))));
      unint64_t v32 = 0x9DDFEA08EB382D69 * (v31 ^ (v31 >> 47));
      unint64_t v33 = v23 + v26 + v27 + a3;
      uint64_t v34 = v33 + v24;
      unint64_t v35 = __ROR8__(v33, 44) + v27 + a3 + __ROR8__(v27 + a3 + v24 - 0x622015F714C7D297 * (v31 ^ (v31 >> 47)), 21);
      uint64_t v36 = v26 + v28 + *(uint64_t *)((char *)a2 + a3 - 32) - 0x4B6D499041670D8DLL;
      uint64_t v37 = v25 + v28 + v36;
      uint64_t v38 = __ROR8__(v37, 44);
      uint64_t v39 = v37 + v29;
      uint64_t v40 = v38 + v36 + __ROR8__(v36 + v24 + v29, 21);
      uint64_t v42 = *a2;
      long long v41 = a2 + 4;
      unint64_t v43 = v42 - 0x4B6D499041670D8DLL * v24;
      uint64_t v44 = -(uint64_t)((a3 - 1) & 0xFFFFFFFFFFFFFFC0);
      do
      {
        uint64_t v45 = *(v41 - 3);
        uint64_t v46 = v43 + v34 + v30 + v45;
        uint64_t v47 = v41[2];
        uint64_t v48 = v41[3];
        uint64_t v49 = v41[1];
        unint64_t v30 = v49 + v34 - 0x4B6D499041670D8DLL * __ROR8__(v30 + v35 + v47, 42);
        uint64_t v50 = v32 + v39;
        uint64_t v51 = *(v41 - 2);
        uint64_t v52 = *(v41 - 1);
        uint64_t v53 = *(v41 - 4) - 0x4B6D499041670D8DLL * v35;
        uint64_t v54 = v53 + v39 + v52;
        uint64_t v55 = v53 + v45 + v51;
        uint64_t v34 = v55 + v52;
        uint64_t v56 = __ROR8__(v55, 44) + v53;
        unint64_t v57 = (0xB492B66FBE98F273 * __ROR8__(v46, 37)) ^ v40;
        unint64_t v43 = 0xB492B66FBE98F273 * __ROR8__(v50, 33);
        unint64_t v35 = v56 + __ROR8__(v54 + v57, 21);
        unint64_t v58 = v43 + v40 + *v41;
        uint64_t v39 = v49 + v47 + v58 + v48;
        uint64_t v40 = __ROR8__(v49 + v47 + v58, 44) + v58 + __ROR8__(v30 + v51 + v58 + v48, 21);
        v41 += 8;
        unint64_t v32 = v57;
        v44 += 64;
      }
      while (v44);
      unint64_t v59 = v43
          - 0x622015F714C7D297
          * ((0x9DDFEA08EB382D69
            * (v40 ^ ((0x9DDFEA08EB382D69 * (v40 ^ v35)) >> 47) ^ (0x9DDFEA08EB382D69 * (v40 ^ v35)))) ^ ((0x9DDFEA08EB382D69 * (v40 ^ ((0x9DDFEA08EB382D69 * (v40 ^ v35)) >> 47) ^ (0x9DDFEA08EB382D69 * (v40 ^ v35)))) >> 47));
      unint64_t v60 = 0x9DDFEA08EB382D69
          * (v59 ^ (v57
                  - 0x4B6D499041670D8DLL * (v30 ^ (v30 >> 47))
                  - 0x622015F714C7D297
                  * ((0x9DDFEA08EB382D69
                    * (v39 ^ ((0x9DDFEA08EB382D69 * (v39 ^ v34)) >> 47) ^ (0x9DDFEA08EB382D69 * (v39 ^ v34)))) ^ ((0x9DDFEA08EB382D69 * (v39 ^ ((0x9DDFEA08EB382D69 * (v39 ^ v34)) >> 47) ^ (0x9DDFEA08EB382D69 * (v39 ^ v34)))) >> 47))));
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v59 ^ (v60 >> 47) ^ v60)) ^ ((0x9DDFEA08EB382D69 * (v59 ^ (v60 >> 47) ^ v60)) >> 47));
    }
    else
    {
      uint64_t v6 = *(uint64_t *)((char *)a2 + a3 - 16);
      uint64_t v7 = *a2 - 0x3C5A37A36834CED9 * (v6 + a3);
      uint64_t v9 = a2[2];
      uint64_t v8 = a2[3];
      uint64_t v10 = __ROR8__(v7 + v8, 52);
      uint64_t v11 = v7 + a2[1];
      uint64_t v12 = __ROR8__(v11, 7);
      uint64_t v13 = v11 + v9;
      uint64_t v14 = *(uint64_t *)((char *)a2 + a3 - 32) + v9;
      uint64_t v15 = v12 + __ROR8__(*a2 - 0x3C5A37A36834CED9 * (v6 + a3), 37) + v10 + __ROR8__(v13, 31);
      uint64_t v16 = *(uint64_t *)((char *)a2 + a3 - 24) + v14 + v6;
      unint64_t v17 = 0xC3A5C85C97CB3127 * (v16 + *(uint64_t *)((char *)a2 + a3 - 8) + v8 + v15)
          - 0x651E95C4D06FBFB1
          * (v13
           + v8
           + __ROR8__(v14, 37)
           + __ROR8__(*(uint64_t *)((char *)a2 + a3 - 24) + v14, 7)
           + __ROR8__(*(uint64_t *)((char *)a2 + a3 - 8) + v8 + v14, 52)
           + __ROR8__(v16, 31));
      return 0x9AE16A3B2F90404FLL
           * ((v15 - 0x3C5A37A36834CED9 * (v17 ^ (v17 >> 47))) ^ ((v15 - 0x3C5A37A36834CED9 * (v17 ^ (v17 >> 47))) >> 47));
    }
  }
  else if (a3 > 0x10)
  {
    uint64_t v18 = a2[1];
    unint64_t v19 = 0xB492B66FBE98F273 * *a2;
    uint64_t v20 = __ROR8__(0x9AE16A3B2F90404FLL * *(uint64_t *)((char *)a2 + a3 - 8), 30) + __ROR8__(v19 - v18, 43);
    unint64_t v21 = v19 + a3 + __ROR8__(v18 ^ 0xC949D7C7509E6557, 20) - 0x9AE16A3B2F90404FLL * *(uint64_t *)((char *)a2 + a3 - 8);
    unint64_t v22 = 0x9DDFEA08EB382D69 * ((v20 - 0x3C5A37A36834CED9 * *(uint64_t *)((char *)a2 + a3 - 16)) ^ v21);
    return 0x9DDFEA08EB382D69
         * ((0x9DDFEA08EB382D69 * (v21 ^ (v22 >> 47) ^ v22)) ^ ((0x9DDFEA08EB382D69 * (v21 ^ (v22 >> 47) ^ v22)) >> 47));
  }
  else if (a3 < 9)
  {
    if (a3 < 4)
    {
      unint64_t result = 0x9AE16A3B2F90404FLL;
      if (a3)
      {
        unint64_t v63 = (0xC949D7C7509E6557 * (a3 + 4 * *((unsigned __int8 *)a2 + a3 - 1))) ^ (0x9AE16A3B2F90404FLL
                                                                                       * (*(unsigned __int8 *)a2 | ((unint64_t)*((unsigned __int8 *)a2 + (a3 >> 1)) << 8)));
        return 0x9AE16A3B2F90404FLL * (v63 ^ (v63 >> 47));
      }
    }
    else
    {
      uint64_t v61 = *(unsigned int *)((char *)a2 + a3 - 4);
      unint64_t v62 = 0x9DDFEA08EB382D69 * (((8 * *(_DWORD *)a2) + a3) ^ v61);
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v61 ^ (v62 >> 47) ^ v62)) ^ ((0x9DDFEA08EB382D69 * (v61 ^ (v62 >> 47) ^ v62)) >> 47));
    }
  }
  else
  {
    uint64_t v3 = *(uint64_t *)((char *)a2 + a3 - 8);
    uint64_t v4 = __ROR8__(v3 + a3, a3);
    return (0x9DDFEA08EB382D69
          * ((0x9DDFEA08EB382D69
            * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *a2)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *a2)))) ^ ((0x9DDFEA08EB382D69 * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *a2)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *a2)))) >> 47))) ^ v3;
  }
  return result;
}

_DWORD *BasebandTransport::getSupportedProtocols@<X0>(BasebandTransport *this@<X0>, void *a2@<X8>)
{
  *a2 = a2;
  a2[1] = a2;
  a2[2] = 0;
  unint64_t result = (_DWORD *)capabilities::radio::vendor(this);
  if (result == 1)
  {
    uint64_t v13 = operator new(0x18uLL);
    v13[4] = 0;
    *(void *)uint64_t v13 = &v33;
    *((void *)v13 + 1) = &v33;
    uint64_t v34 = v13;
    uint64_t v14 = operator new(0x18uLL);
    v14[4] = 1;
    *(void *)uint64_t v14 = v13;
    *((void *)v14 + 1) = &v33;
    *((void *)v13 + 1) = v14;
    uint64_t v15 = operator new(0x18uLL);
    v15[4] = 2;
    *(void *)uint64_t v15 = v14;
    *((void *)v15 + 1) = &v33;
    *((void *)v14 + 1) = v15;
    uint64_t v16 = operator new(0x18uLL);
    v16[4] = 3;
    *(void *)uint64_t v16 = v15;
    *((void *)v16 + 1) = &v33;
    *((void *)v15 + 1) = v16;
    unint64_t v17 = operator new(0x18uLL);
    v17[4] = 4;
    *(void *)unint64_t v17 = v16;
    *((void *)v17 + 1) = &v33;
    *((void *)v16 + 1) = v17;
    uint64_t v18 = operator new(0x18uLL);
    v18[4] = 5;
    *(void *)uint64_t v18 = v17;
    *((void *)v18 + 1) = &v33;
    *((void *)v17 + 1) = v18;
    unint64_t v19 = operator new(0x18uLL);
    void v19[4] = 10;
    *(void *)unint64_t v19 = v18;
    *((void *)v19 + 1) = &v33;
    *((void *)v18 + 1) = v19;
    uint64_t v20 = operator new(0x18uLL);
    v20[4] = 12;
    *(void *)uint64_t v20 = v19;
    *((void *)v20 + 1) = &v33;
    *((void *)v19 + 1) = v20;
    unint64_t v21 = operator new(0x18uLL);
    v21[4] = 14;
    *(void *)unint64_t v21 = v20;
    *((void *)v21 + 1) = &v33;
    *((void *)v20 + 1) = v21;
    unint64_t v33 = v21;
    uint64_t v35 = 9;
    unint64_t result = (_DWORD *)capabilities::radio::mav20Plus((capabilities::radio *)v21);
    if (result)
    {
      unint64_t v22 = operator new(0x18uLL);
      void v22[4] = 11;
      uint64_t v23 = v33;
      *(void *)unint64_t v22 = v33;
      *((void *)v22 + 1) = &v33;
      v23[1] = v22;
      uint64_t v24 = v35;
      unint64_t v33 = v22;
      ++v35;
      unint64_t result = operator new(0x18uLL);
      result[4] = 15;
      *(void *)unint64_t result = v22;
      *((void *)result + 1) = &v33;
      *((void *)v22 + 1) = result;
      unint64_t v33 = result;
      uint64_t v35 = v24 + 2;
    }
    if (a2[2])
    {
      uint64_t v25 = *a2;
      unint64_t result = (_DWORD *)a2[1];
      uint64_t v26 = *(void *)result;
      *(void *)(v26 + 8) = *(void *)(*a2 + 8);
      **(void **)(v25 + 8) = v26;
      a2[2] = 0;
      if (result != (_DWORD *)a2)
      {
        do
        {
          uint64_t v27 = (void *)*((void *)result + 1);
          operator delete(result);
          unint64_t result = v27;
        }
        while (v27 != a2);
      }
    }
  }
  else
  {
    if (result != 2) {
      return result;
    }
    uint64_t v4 = operator new(0x18uLL);
    v4[4] = 6;
    *(void *)uint64_t v4 = &v33;
    *((void *)v4 + 1) = &v33;
    uint64_t v34 = v4;
    std::basic_regex<char>::value_type v5 = operator new(0x18uLL);
    v5[4] = 7;
    *(void *)std::basic_regex<char>::value_type v5 = v4;
    *((void *)v5 + 1) = &v33;
    *((void *)v4 + 1) = v5;
    uint64_t v6 = operator new(0x18uLL);
    void v6[4] = 8;
    *(void *)uint64_t v6 = v5;
    *((void *)v6 + 1) = &v33;
    *((void *)v5 + 1) = v6;
    uint64_t v7 = operator new(0x18uLL);
    v7[4] = 9;
    *(void *)uint64_t v7 = v6;
    *((void *)v7 + 1) = &v33;
    *((void *)v6 + 1) = v7;
    uint64_t v8 = operator new(0x18uLL);
    v8[4] = 10;
    *(void *)uint64_t v8 = v7;
    *((void *)v8 + 1) = &v33;
    *((void *)v7 + 1) = v8;
    unint64_t v33 = v8;
    uint64_t v35 = 5;
    unint64_t result = (_DWORD *)capabilities::abs::supportsETSProtocol((capabilities::abs *)v8);
    if (result)
    {
      unint64_t result = operator new(0x18uLL);
      result[4] = 13;
      uint64_t v9 = v33;
      *(void *)unint64_t result = v33;
      *((void *)result + 1) = &v33;
      v9[1] = result;
      unint64_t v33 = result;
      ++v35;
    }
    if (a2[2])
    {
      uint64_t v10 = *a2;
      unint64_t result = (_DWORD *)a2[1];
      uint64_t v11 = *(void *)result;
      *(void *)(v11 + 8) = *(void *)(*a2 + 8);
      **(void **)(v10 + 8) = v11;
      a2[2] = 0;
      if (result != (_DWORD *)a2)
      {
        do
        {
          uint64_t v12 = (void *)*((void *)result + 1);
          operator delete(result);
          unint64_t result = v12;
        }
        while (v12 != a2);
      }
    }
  }
  uint64_t v28 = v35;
  if (v35)
  {
    unint64_t v30 = v33;
    uint64_t v29 = v34;
    uint64_t v31 = *v34;
    *(void *)(v31 + 8) = v33[1];
    *(void *)v30[1] = v31;
    uint64_t v32 = *a2;
    *(void *)(v32 + 8) = v29;
    *uint64_t v29 = v32;
    *a2 = v30;
    v30[1] = a2;
    a2[2] += v28;
  }
  return result;
}

void sub_2636CF834(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::list<BasebandTransport::Protocol>::~list((uint64_t *)va);
  std::list<BasebandTransport::Protocol>::~list(v2);
  _Unwind_Resume(a1);
}

void sub_2636CF864(_Unwind_Exception *a1)
{
  std::list<BasebandTransport::Protocol>::~list(v1);
  _Unwind_Resume(a1);
}

void sub_2636CF87C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  do
  {
    uint64_t v16 = (void *)v13[1];
    operator delete(v13);
    uint64_t v13 = v16;
  }
  while (v16 != v14);
  std::list<BasebandTransport::Protocol>::~list(v12);
  _Unwind_Resume(a1);
}

uint64_t *std::list<BasebandTransport::Protocol>::~list(uint64_t *a1)
{
  if (a1[2])
  {
    uint64_t v3 = *a1;
    uint64_t v2 = (uint64_t *)a1[1];
    uint64_t v4 = *v2;
    *(void *)(v4 + 8) = *(void *)(*a1 + 8);
    **(void **)(v3 + 8) = v4;
    a1[2] = 0;
    if (v2 != a1)
    {
      do
      {
        std::basic_regex<char>::value_type v5 = (uint64_t *)v2[1];
        operator delete(v2);
        uint64_t v2 = v5;
      }
      while (v5 != a1);
    }
  }
  return a1;
}

void BasebandTransport::getSupportedProtocolsAsStringLowerCase(BasebandTransport *this@<X0>, uint64_t *a2@<X8>)
{
  *a2 = (uint64_t)a2;
  a2[1] = (uint64_t)a2;
  a2[2] = 0;
  memset(v20, 170, sizeof(v20));
  BasebandTransport::getSupportedProtocols(this, v20);
  for (uint64_t i = v20[1]; (void *)i != v20; uint64_t i = *(void *)(i + 8))
  {
    int v4 = *(_DWORD *)(i + 16);
    memset(v19, 170, sizeof(v19));
    switch(v4)
    {
      case 0:
        char v5 = 0;
        char v6 = 0;
        char v7 = 0;
        char v8 = 0;
        HIBYTE(v19[5]) = 3;
        __darwin_ct_rune_t v9 = 4997712;
        goto LABEL_30;
      case 1:
        char v5 = 0;
        char v6 = 0;
        char v7 = 0;
        char v8 = 0;
        HIBYTE(v19[5]) = 3;
        __darwin_ct_rune_t v9 = 4997715;
        goto LABEL_30;
      case 2:
        char v5 = 0;
        char v10 = 0;
        char v7 = 0;
        char v8 = 0;
        HIBYTE(v19[5]) = 4;
        __darwin_ct_rune_t v11 = 1195460932;
        goto LABEL_26;
      case 3:
        char v5 = 0;
        char v10 = 0;
        char v7 = 0;
        char v8 = 0;
        HIBYTE(v19[5]) = 4;
        __darwin_ct_rune_t v11 = 1397114194;
        goto LABEL_26;
      case 4:
        char v5 = 0;
        char v10 = 0;
        char v6 = 0;
        char v8 = 0;
        HIBYTE(v19[5]) = 5;
        strcpy((char *)v19, "QMUX1");
        char v7 = 1;
        break;
      case 5:
        char v5 = 0;
        char v10 = 0;
        char v6 = 0;
        char v8 = 0;
        HIBYTE(v19[5]) = 5;
        strcpy((char *)v19, "QMUX2");
        char v7 = 1;
        break;
      case 6:
        char v5 = 0;
        char v6 = 0;
        char v7 = 0;
        char v8 = 0;
        HIBYTE(v19[5]) = 3;
        __darwin_ct_rune_t v9 = 5066578;
        goto LABEL_30;
      case 7:
        char v5 = 0;
        char v10 = 0;
        char v7 = 0;
        char v8 = 0;
        HIBYTE(v19[5]) = 4;
        __darwin_ct_rune_t v11 = 1414483778;
        goto LABEL_26;
      case 8:
        char v5 = 0;
        char v6 = 0;
        char v7 = 0;
        char v8 = 0;
        HIBYTE(v19[5]) = 3;
        __darwin_ct_rune_t v9 = 4805185;
        goto LABEL_30;
      case 9:
        char v5 = 0;
        char v6 = 0;
        char v7 = 0;
        char v8 = 0;
        HIBYTE(v19[5]) = 3;
        __darwin_ct_rune_t v9 = 5526611;
        goto LABEL_30;
      case 10:
        char v10 = 0;
        char v6 = 0;
        char v7 = 0;
        char v8 = 0;
        HIBYTE(v19[5]) = 2;
        strcpy((char *)v19, "AT");
        char v5 = 1;
        break;
      case 11:
        char v5 = 0;
        char v10 = 0;
        char v7 = 0;
        char v8 = 0;
        HIBYTE(v19[5]) = 4;
        __darwin_ct_rune_t v11 = 1280328769;
        goto LABEL_26;
      case 12:
        char v5 = 0;
        char v10 = 0;
        char v6 = 0;
        char v7 = 0;
        char v8 = 0;
        HIBYTE(v19[5]) = 8;
        strcpy((char *)v19, "MEDIACTL");
        break;
      case 13:
        char v5 = 0;
        char v6 = 0;
        char v7 = 0;
        char v8 = 0;
        HIBYTE(v19[5]) = 3;
        __darwin_ct_rune_t v9 = 5461061;
        goto LABEL_30;
      case 14:
        char v5 = 0;
        char v10 = 0;
        char v7 = 0;
        char v8 = 0;
        HIBYTE(v19[5]) = 4;
        strcpy((char *)v19, "GNSS");
        char v6 = 1;
        break;
      case 15:
        char v5 = 0;
        char v10 = 0;
        char v7 = 0;
        char v8 = 0;
        HIBYTE(v19[5]) = 4;
        __darwin_ct_rune_t v11 = 1397965905;
        goto LABEL_26;
      case 16:
        char v5 = 0;
        char v10 = 0;
        char v6 = 0;
        char v8 = 0;
        HIBYTE(v19[5]) = 5;
        strcpy((char *)v19, "RCTTH");
        char v7 = 1;
        break;
      case 17:
        char v5 = 0;
        char v6 = 0;
        char v7 = 0;
        char v8 = 0;
        HIBYTE(v19[5]) = 3;
        __darwin_ct_rune_t v9 = 5260097;
        goto LABEL_30;
      case 18:
        char v5 = 0;
        char v10 = 0;
        char v7 = 0;
        char v8 = 0;
        HIBYTE(v19[5]) = 4;
        __darwin_ct_rune_t v11 = 1297040214;
        goto LABEL_26;
      case 19:
        char v5 = 0;
        char v10 = 0;
        char v7 = 0;
        char v8 = 0;
        HIBYTE(v19[5]) = 4;
        __darwin_ct_rune_t v11 = 1129335117;
LABEL_26:
        v19[0] = v11;
        char v6 = 1;
        LOBYTE(v19[1]) = 0;
        break;
      case 20:
        char v5 = 0;
        char v6 = 0;
        char v7 = 0;
        char v8 = 0;
        HIBYTE(v19[5]) = 3;
        __darwin_ct_rune_t v9 = 4999236;
        goto LABEL_30;
      case 21:
        char v5 = 0;
        char v6 = 0;
        char v7 = 0;
        char v8 = 0;
        HIBYTE(v19[5]) = 3;
        __darwin_ct_rune_t v9 = 5789005;
        goto LABEL_30;
      case 22:
        char v5 = 0;
        char v6 = 0;
        char v7 = 0;
        char v8 = 0;
        HIBYTE(v19[5]) = 3;
        __darwin_ct_rune_t v9 = 4407622;
LABEL_30:
        v19[0] = v9;
        char v10 = 1;
        break;
      default:
        char v5 = 0;
        char v10 = 0;
        char v6 = 0;
        char v7 = 0;
        HIBYTE(v19[5]) = 7;
        strcpy((char *)v19, "Unknown");
        char v8 = 1;
        break;
    }
    LOBYTE(v19[0]) = __tolower(SLOBYTE(v19[0]));
    BYTE1(v19[0]) = __tolower(SBYTE1(v19[0]));
    if ((v5 & 1) == 0)
    {
      BYTE2(v19[0]) = __tolower(SBYTE2(v19[0]));
      if ((v10 & 1) == 0)
      {
        HIBYTE(v19[0]) = __tolower(SHIBYTE(v19[0]));
        if ((v6 & 1) == 0)
        {
          LOBYTE(v19[1]) = __tolower(SLOBYTE(v19[1]));
          if ((v7 & 1) == 0)
          {
            BYTE1(v19[1]) = __tolower(SBYTE1(v19[1]));
            BYTE2(v19[1]) = __tolower(SBYTE2(v19[1]));
            if ((v8 & 1) == 0) {
              HIBYTE(v19[1]) = __tolower(SHIBYTE(v19[1]));
            }
          }
        }
      }
    }
    uint64_t v12 = operator new(0x28uLL);
    uint64_t v13 = (std::string *)(v12 + 2);
    void *v12 = 0;
    v12[1] = 0;
    if (SHIBYTE(v19[5]) < 0)
    {
      std::string::__init_copy_ctor_external(v13, *(const std::string::value_type **)v19, *(std::string::size_type *)&v19[2]);
    }
    else
    {
      *(_OWORD *)&v13->__r_.__value_.__l.__data_ = *(_OWORD *)v19;
      v12[4] = *(void *)&v19[4];
    }
    uint64_t v14 = *a2;
    void *v12 = *a2;
    v12[1] = a2;
    *(void *)(v14 + 8) = v12;
    *a2 = (uint64_t)v12;
    ++a2[2];
    if (SHIBYTE(v19[5]) < 0) {
      operator delete(*(void **)v19);
    }
  }
  if (v20[2])
  {
    uint64_t v16 = v20[0];
    uint64_t v15 = (void *)v20[1];
    uint64_t v17 = *(void *)v20[1];
    *(void *)(v17 + 8) = *(void *)(v20[0] + 8);
    **(void **)(v16 + 8) = v17;
    v20[2] = 0;
    if (v15 != v20)
    {
      do
      {
        uint64_t v18 = (void *)v15[1];
        operator delete(v15);
        uint64_t v15 = v18;
      }
      while (v18 != v20);
    }
  }
}

void sub_2636CFEDC(_Unwind_Exception *a1)
{
  std::list<std::string>::~list(v1);
  _Unwind_Resume(a1);
}

void sub_2636CFEF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  uint64_t v17 = v16;
  operator delete(v17);
  if (a14 < 0) {
    operator delete(__p);
  }
  std::list<BasebandTransport::Protocol>::~list(&a15);
  std::list<std::string>::~list(v15);
  _Unwind_Resume(a1);
}

uint64_t BasebandTransport::asStringLowerCase@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  memset(a2, 170, 24);
  uint64_t result = BasebandTransport::asString(a1, (char *)a2);
  uint64_t v4 = *((unsigned __int8 *)a2 + 23);
  int v5 = (char)v4;
  char v6 = (char *)a2 + v4;
  if (v5 >= 0) {
    char v7 = v6;
  }
  else {
    char v7 = (unsigned char *)(*a2 + a2[1]);
  }
  if (v5 >= 0) {
    char v8 = a2;
  }
  else {
    char v8 = (unsigned char *)*a2;
  }
  for (; v8 != v7; ++v8)
  {
    uint64_t result = __tolower((char)*v8);
    unsigned char *v8 = result;
  }
  return result;
}

void sub_2636D0008(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

char *std::list<std::string>::~list(char *a1)
{
  if (*((void *)a1 + 2))
  {
    uint64_t v2 = *(void *)a1;
    uint64_t v3 = (char *)*((void *)a1 + 1);
    uint64_t v4 = *(void *)v3;
    *(void *)(v4 + 8) = *(void *)(*(void *)a1 + 8);
    **(void **)(v2 + 8) = v4;
    *((void *)a1 + 2) = 0;
    if (v3 != a1)
    {
      do
      {
        char v6 = (char *)*((void *)v3 + 1);
        if (v3[39] < 0) {
          operator delete(*((void **)v3 + 2));
        }
        operator delete(v3);
        uint64_t v3 = v6;
      }
      while (v6 != a1);
    }
  }
  return a1;
}

void BasebandTransport::getSupportedProtocolsAsString(BasebandTransport *this@<X0>, void *a2@<X8>)
{
  *a2 = a2;
  a2[1] = a2;
  a2[2] = 0;
  memset(v18, 170, sizeof(v18));
  BasebandTransport::getSupportedProtocols(this, v18);
  uint64_t v3 = (uint64_t *)v18[1];
  if ((void *)v18[1] != v18)
  {
    unint64_t v4 = a2[2];
    unint64_t v5 = v4 + 1;
    char v6 = (void *)*a2;
    uint64_t v7 = v18[1];
    do
    {
      char v8 = 8;
      unint64_t v9 = 0x4C5443414944454DLL;
      switch(*(_DWORD *)(v7 + 16))
      {
        case 0:
          unint64_t v9 = v4 & 0xFFFFFFFF00000000 | 0x4C4250;
          char v8 = 3;
          break;
        case 1:
          unint64_t v9 = (v4 & 0xFFFFFFFF00000000 | 0x4C4250) + 3;
          char v8 = 3;
          break;
        case 2:
          uint64_t v10 = 1195460932;
          goto LABEL_25;
        case 3:
          uint64_t v10 = 1397114194;
          goto LABEL_25;
        case 4:
          uint64_t v11 = 0x3158554D51;
          goto LABEL_21;
        case 5:
          uint64_t v11 = 0x3258554D51;
          goto LABEL_21;
        case 6:
          unsigned int v12 = 5066578;
          goto LABEL_29;
        case 7:
          uint64_t v10 = 1414483778;
          goto LABEL_25;
        case 8:
          unsigned int v12 = 4805185;
          goto LABEL_29;
        case 9:
          unsigned int v12 = 5526611;
          goto LABEL_29;
        case 0xA:
          unint64_t v13 = v4 & 0xFFFFFFFFFF000000 | 0x5441;
          char v8 = 2;
          goto LABEL_30;
        case 0xB:
          uint64_t v10 = 1280328769;
          goto LABEL_25;
        case 0xC:
          break;
        case 0xD:
          unsigned int v12 = 5461061;
          goto LABEL_29;
        case 0xE:
          unint64_t v9 = (v4 & 0xFFFFFF0000000000 | 0x53534451) + 2550;
          char v8 = 4;
          break;
        case 0xF:
          unint64_t v9 = v4 & 0xFFFFFF0000000000 | 0x53534451;
          char v8 = 4;
          break;
        case 0x10:
          uint64_t v11 = 0x4854544352;
LABEL_21:
          unint64_t v13 = v4 & 0xFFFF000000000000 | v11 & 0xFFFFFFFFFFFFLL;
          char v8 = 5;
          goto LABEL_30;
        case 0x11:
          unsigned int v12 = 5260097;
          goto LABEL_29;
        case 0x12:
          uint64_t v10 = 1297040214;
          goto LABEL_25;
        case 0x13:
          uint64_t v10 = 1129335117;
LABEL_25:
          unint64_t v13 = v4 & 0xFFFFFF0000000000 | v10 & 0xFFFFFFFFFFLL;
          char v8 = 4;
          goto LABEL_30;
        case 0x14:
          unint64_t v9 = (v4 & 0xFFFFFFFF00000000 | 0x4C4250) + 1524;
          char v8 = 3;
          break;
        case 0x15:
          unsigned int v12 = 5789005;
          goto LABEL_29;
        case 0x16:
          unsigned int v12 = 4407622;
LABEL_29:
          unint64_t v13 = v4 & 0xFFFFFFFF00000000 | v12;
          char v8 = 3;
LABEL_30:
          unint64_t v9 = v13;
          break;
        default:
          char v8 = 7;
          unint64_t v9 = 0x6E776F6E6B6E55;
          break;
      }
      uint64_t v14 = operator new(0x28uLL);
      v14[2] = v9;
      v14[3] = 0;
      *((unsigned char *)v14 + 39) = v8;
      *uint64_t v14 = v6;
      v14[1] = a2;
      v6[1] = v14;
      *a2 = v14;
      a2[2] = v5;
      uint64_t v7 = *(void *)(v7 + 8);
      ++v5;
      unint64_t v4 = v9;
      char v6 = v14;
    }
    while ((void *)v7 != v18);
  }
  if (v18[2])
  {
    uint64_t v15 = v18[0];
    uint64_t v16 = *v3;
    *(void *)(v16 + 8) = *(void *)(v18[0] + 8);
    **(void **)(v15 + 8) = v16;
    v18[2] = 0;
    if (v3 != v18)
    {
      do
      {
        uint64_t v17 = (uint64_t *)v3[1];
        operator delete(v3);
        uint64_t v3 = v17;
      }
      while (v17 != v18);
    }
  }
}

void sub_2636D0368(_Unwind_Exception *a1)
{
  std::list<std::string>::~list(v1);
  _Unwind_Resume(a1);
}

void sub_2636D037C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::list<BasebandTransport::Protocol>::~list((uint64_t *)va);
  std::list<std::string>::~list(v2);
  _Unwind_Resume(a1);
}

uint64_t BasebandTransport::asString@<X0>(uint64_t result@<X0>, char *a2@<X8>)
{
  switch((int)result)
  {
    case 0:
      a2[23] = 3;
      *(_DWORD *)a2 = 4997712;
      break;
    case 1:
      a2[23] = 3;
      *(_DWORD *)a2 = 4997715;
      break;
    case 2:
      a2[23] = 4;
      strcpy(a2, "DIAG");
      break;
    case 3:
      a2[23] = 4;
      strcpy(a2, "REFS");
      break;
    case 4:
      a2[23] = 5;
      strcpy(a2, "QMUX1");
      break;
    case 5:
      a2[23] = 5;
      strcpy(a2, "QMUX2");
      break;
    case 6:
      a2[23] = 3;
      *(_DWORD *)a2 = 5066578;
      break;
    case 7:
      a2[23] = 4;
      strcpy(a2, "BOOT");
      break;
    case 8:
      a2[23] = 3;
      *(_DWORD *)a2 = 4805185;
      break;
    case 9:
      a2[23] = 3;
      *(_DWORD *)a2 = 5526611;
      break;
    case 10:
      a2[23] = 2;
      strcpy(a2, "AT");
      break;
    case 11:
      a2[23] = 4;
      strcpy(a2, "ADPL");
      break;
    case 12:
      a2[23] = 8;
      strcpy(a2, "MEDIACTL");
      break;
    case 13:
      a2[23] = 3;
      *(_DWORD *)a2 = 5461061;
      break;
    case 14:
      a2[23] = 4;
      strcpy(a2, "GNSS");
      break;
    case 15:
      a2[23] = 4;
      strcpy(a2, "QDSS");
      break;
    case 16:
      a2[23] = 5;
      strcpy(a2, "RCTTH");
      break;
    case 17:
      a2[23] = 3;
      *(_DWORD *)a2 = 5260097;
      break;
    case 18:
      a2[23] = 4;
      strcpy(a2, "VCOM");
      break;
    case 19:
      a2[23] = 4;
      strcpy(a2, "MIPC");
      break;
    case 20:
      a2[23] = 3;
      *(_DWORD *)a2 = 4999236;
      break;
    case 21:
      a2[23] = 3;
      *(_DWORD *)a2 = 5789005;
      break;
    case 22:
      a2[23] = 3;
      *(_DWORD *)a2 = 4407622;
      break;
    default:
      a2[23] = 7;
      strcpy(a2, "Unknown");
      break;
  }
  return result;
}

{
  switch((int)result)
  {
    case 0:
      a2[23] = 8;
      strcpy(a2, "NotReady");
      break;
    case 1:
      a2[23] = 5;
      strcpy(a2, "Ready");
      break;
    case 2:
      a2[23] = 5;
      strcpy(a2, "Error");
      break;
    case 3:
      a2[23] = 7;
      strcpy(a2, "Stalled");
      break;
    default:
      a2[23] = 7;
      strcpy(a2, "Unknown");
      break;
  }
  return result;
}

uint64_t BasebandTransport::asProtocol(char *__s1)
{
  uint64_t v1 = __s1;
  if ((__s1[23] & 0x80000000) == 0)
  {
    uint64_t result = strcmp(__s1, "PBL");
    if (!result) {
      return result;
    }
    if (!strcmp(v1, "SBL")) {
      return 1;
    }
    if (strcasecmp(v1, "DIAG"))
    {
      if (strcasecmp(v1, "REFS"))
      {
        if (strcasecmp(v1, "QMUX1"))
        {
          if (strcasecmp(v1, "QMUX2"))
          {
            if (strcasecmp(v1, "ROM"))
            {
              if (strcasecmp(v1, "BOOT"))
              {
                if (strcasecmp(v1, "ARI"))
                {
                  if (strcasecmp(v1, "STT"))
                  {
                    if (strcasecmp(v1, "AT"))
                    {
                      if (strcasecmp(v1, "ADPL"))
                      {
                        if (strcasecmp(v1, "MEDIACTL"))
                        {
                          if (strcasecmp(v1, "ETS"))
                          {
                            if (strcasecmp(v1, "GNSS"))
                            {
                              if (strcasecmp(v1, "QDSS"))
                              {
                                if (strcasecmp(v1, "RCTTH"))
                                {
                                  if (strcasecmp(v1, "ACP"))
                                  {
                                    if (strcasecmp(v1, "VCOM"))
                                    {
                                      if (strcasecmp(v1, "MIPC"))
                                      {
                                        if (strcasecmp(v1, "DHL"))
                                        {
                                          if (strcasecmp(v1, "MUX")) {
                                            goto LABEL_24;
                                          }
                                          return 21;
                                        }
                                        return 20;
                                      }
                                      return 19;
                                    }
                                    return 18;
                                  }
                                  return 17;
                                }
                                return 16;
                              }
                              return 15;
                            }
                            return 14;
                          }
                          return 13;
                        }
                        return 12;
                      }
                      return 11;
                    }
                    return 10;
                  }
                  return 9;
                }
                return 8;
              }
              return 7;
            }
            return 6;
          }
          return 5;
        }
        return 4;
      }
      return 3;
    }
    return 2;
  }
  uint64_t v1 = *(const char **)__s1;
  uint64_t result = strcmp(*(const char **)__s1, "PBL");
  if (!result) {
    return result;
  }
  if (!strcmp(v1, "SBL")) {
    return 1;
  }
  if (!strcasecmp(v1, "DIAG")) {
    return 2;
  }
  if (!strcasecmp(v1, "REFS")) {
    return 3;
  }
  if (!strcasecmp(v1, "QMUX1")) {
    return 4;
  }
  if (!strcasecmp(v1, "QMUX2")) {
    return 5;
  }
  if (!strcasecmp(v1, "ROM")) {
    return 6;
  }
  if (!strcasecmp(v1, "BOOT")) {
    return 7;
  }
  if (!strcasecmp(v1, "ARI")) {
    return 8;
  }
  if (!strcasecmp(v1, "STT")) {
    return 9;
  }
  if (!strcasecmp(v1, "AT")) {
    return 10;
  }
  if (!strcasecmp(v1, "ADPL")) {
    return 11;
  }
  if (!strcasecmp(v1, "MEDIACTL")) {
    return 12;
  }
  if (!strcasecmp(v1, "ETS")) {
    return 13;
  }
  if (!strcasecmp(v1, "GNSS")) {
    return 14;
  }
  if (!strcasecmp(v1, "QDSS")) {
    return 15;
  }
  if (!strcasecmp(v1, "RCTTH")) {
    return 16;
  }
  if (!strcasecmp(v1, "ACP")) {
    return 17;
  }
  if (!strcasecmp(v1, "VCOM")) {
    return 18;
  }
  if (!strcasecmp(v1, "MIPC")) {
    return 19;
  }
  if (!strcasecmp(v1, "DHL")) {
    return 20;
  }
  if (!strcasecmp(v1, "MUX")) {
    return 21;
  }
LABEL_24:
  if (!strcasecmp(v1, "FAC")) {
    return 22;
  }
  else {
    return 23;
  }
}

uint64_t BasebandTransport::getDefaultTransportIOReadSize(capabilities::abs *a1)
{
  if (capabilities::abs::shouldUseMinBasebandTransportIOReadSize(a1)) {
    return 0x4000;
  }
  else {
    return 0x8000;
  }
}

uint64_t BasebandTransport::getDefaultTransportIOReadCount(capabilities::abs *a1)
{
  int v1 = (int)a1;
  shouldUseMinBasebandTransportIOReaduint64_t Count = capabilities::abs::shouldUseMinBasebandTransportIOReadCount(a1);
  if (v1 == 15) {
    int v3 = 36;
  }
  else {
    int v3 = 4;
  }
  if (v1 == 16) {
    int v4 = 36;
  }
  else {
    int v4 = v3;
  }
  if (v1 == 2) {
    unsigned int v5 = 16;
  }
  else {
    unsigned int v5 = v4;
  }
  if (shouldUseMinBasebandTransportIOReadCount) {
    return 4;
  }
  else {
    return v5;
  }
}

double BasebandTransport::Status::Status(BasebandTransport::Status *this)
{
  *(_DWORD *)this = 0;
  *((unsigned char *)this + 4) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  return result;
}

{
  double result;

  *(_DWORD *)this = 0;
  *((unsigned char *)this + 4) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  return result;
}

double BasebandTransport::Status::init(BasebandTransport::Status *this)
{
  *(_DWORD *)this = 0;
  *((unsigned char *)this + 4) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  return result;
}

uint64_t BasebandTransport::Status::toString@<X0>(BasebandTransport::Status *this@<X0>, unsigned char *a2@<X8>)
{
  unint64_t v36 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v35[7] = v4;
  v35[8] = v4;
  v35[5] = v4;
  v35[6] = v4;
  v35[3] = v4;
  v35[4] = v4;
  v35[1] = v4;
  v35[2] = v4;
  long long v34 = v4;
  v35[0] = v4;
  *(_OWORD *)uint64_t v32 = v4;
  long long v33 = v4;
  long long v30 = v4;
  long long v31 = v4;
  long long v28 = v4;
  long long v29 = v4;
  long long v27 = v4;
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v27);
  unsigned int v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v28, (uint64_t)"State: ", 7);
  switch(*(_DWORD *)this)
  {
    case 0:
      uint64_t v6 = 8;
      char v26 = 8;
      strcpy((char *)__p, "NotReady");
      break;
    case 1:
      uint64_t v6 = 5;
      char v26 = 5;
      strcpy((char *)__p, "Ready");
      break;
    case 2:
      uint64_t v6 = 5;
      char v26 = 5;
      strcpy((char *)__p, "Error");
      break;
    case 3:
      uint64_t v6 = 7;
      char v26 = 7;
      LODWORD(__p[0]) = 1818326099;
      int v7 = 1684368492;
      goto LABEL_7;
    default:
      uint64_t v6 = 7;
      char v26 = 7;
      LODWORD(__p[0]) = 1852534357;
      int v7 = 1853321070;
LABEL_7:
      *(_DWORD *)((char *)__p + 3) = v7;
      HIBYTE(__p[0]) = 0;
      break;
  }
  char v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)__p, v6);
  unint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)", ", 2);
  uint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"Async: ", 7);
  *(_DWORD *)((char *)v10 + *(void *)(*v10 - 24) + 8) |= 1u;
  uint64_t v11 = (void *)std::ostream::operator<<();
  unsigned int v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)", ", 2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"Total Rx: ", 10);
  unint64_t v13 = (void *)std::ostream::operator<<();
  uint64_t v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" KB, ", 5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"Total Tx: ", 10);
  uint64_t v15 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)" KB", 3);
  if ((v26 & 0x80000000) == 0)
  {
    char v16 = BYTE8(v34);
    if ((BYTE8(v34) & 0x10) == 0) {
      goto LABEL_10;
    }
LABEL_13:
    uint64_t v18 = v34;
    if ((unint64_t)v34 < *((void *)&v31 + 1))
    {
      *(void *)&long long v34 = *((void *)&v31 + 1);
      uint64_t v18 = *((void *)&v31 + 1);
    }
    unint64_t v19 = (const void *)v31;
    size_t v17 = v18 - v31;
    if ((unint64_t)(v18 - v31) >= 0x7FFFFFFFFFFFFFF8) {
      goto LABEL_27;
    }
    goto LABEL_16;
  }
  operator delete(__p[0]);
  char v16 = BYTE8(v34);
  if ((BYTE8(v34) & 0x10) != 0) {
    goto LABEL_13;
  }
LABEL_10:
  if ((v16 & 8) == 0)
  {
    size_t v17 = 0;
    a2[23] = 0;
    goto LABEL_23;
  }
  unint64_t v19 = (const void *)*((void *)&v29 + 1);
  size_t v17 = *((void *)&v30 + 1) - *((void *)&v29 + 1);
  if (*((void *)&v30 + 1) - *((void *)&v29 + 1) >= 0x7FFFFFFFFFFFFFF8uLL) {
LABEL_27:
  }
    std::string::__throw_length_error[abi:ne180100]();
LABEL_16:
  if (v17 >= 0x17)
  {
    uint64_t v20 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v17 | 7) != 0x17) {
      uint64_t v20 = v17 | 7;
    }
    uint64_t v21 = v20 + 1;
    unint64_t v22 = operator new(v20 + 1);
    *((void *)a2 + 1) = v17;
    *((void *)a2 + 2) = v21 | 0x8000000000000000;
    *(void *)a2 = v22;
    a2 = v22;
    goto LABEL_22;
  }
  a2[23] = v17;
  if (v17) {
LABEL_22:
  }
    memmove(a2, v19, v17);
LABEL_23:
  a2[v17] = 0;
  *(void *)&long long v27 = *MEMORY[0x263F8C2B8];
  uint64_t v23 = *(void *)(MEMORY[0x263F8C2B8] + 72);
  *(void *)((char *)&v27 + *(void *)(v27 - 24)) = *(void *)(MEMORY[0x263F8C2B8] + 64);
  *(void *)&long long v28 = v23;
  *((void *)&v28 + 1) = MEMORY[0x263F8C318] + 16;
  if (SHIBYTE(v33) < 0) {
    operator delete(v32[1]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x263E69630](v35);
}

void sub_2636D1104(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2636D1118(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

uint64_t BasebandTransport::Parameters::toString@<X0>(BasebandTransport::Parameters *this@<X0>, unsigned char *a2@<X8>)
{
  unint64_t v41 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v40[7] = v4;
  v40[8] = v4;
  v40[5] = v4;
  v40[6] = v4;
  v40[3] = v4;
  v40[4] = v4;
  v40[1] = v4;
  v40[2] = v4;
  long long v39 = v4;
  v40[0] = v4;
  *(_OWORD *)uint64_t v37 = v4;
  long long v38 = v4;
  long long v35 = v4;
  long long v36 = v4;
  long long v33 = v4;
  long long v34 = v4;
  long long v32 = v4;
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v32);
  switch(*(_DWORD *)this)
  {
    case 0:
      size_t v5 = 3;
      char v28 = 3;
      strcpy((char *)v27, "PBL");
      break;
    case 1:
      size_t v5 = 3;
      char v28 = 3;
      strcpy((char *)v27, "SBL");
      break;
    case 2:
      size_t v5 = 4;
      char v28 = 4;
      int v6 = 1195460932;
      goto LABEL_25;
    case 3:
      size_t v5 = 4;
      char v28 = 4;
      int v6 = 1397114194;
      goto LABEL_25;
    case 4:
      size_t v5 = 5;
      char v28 = 5;
      strcpy((char *)v27, "QMUX1");
      break;
    case 5:
      size_t v5 = 5;
      char v28 = 5;
      strcpy((char *)v27, "QMUX2");
      break;
    case 6:
      size_t v5 = 3;
      char v28 = 3;
      strcpy((char *)v27, "ROM");
      break;
    case 7:
      size_t v5 = 4;
      char v28 = 4;
      int v6 = 1414483778;
      goto LABEL_25;
    case 8:
      size_t v5 = 3;
      char v28 = 3;
      strcpy((char *)v27, "ARI");
      break;
    case 9:
      size_t v5 = 3;
      char v28 = 3;
      strcpy((char *)v27, "STT");
      break;
    case 0xA:
      size_t v5 = 2;
      char v28 = 2;
      strcpy((char *)v27, "AT");
      break;
    case 0xB:
      size_t v5 = 4;
      char v28 = 4;
      int v6 = 1280328769;
      goto LABEL_25;
    case 0xC:
      size_t v5 = 8;
      char v28 = 8;
      strcpy((char *)v27, "MEDIACTL");
      break;
    case 0xD:
      size_t v5 = 3;
      char v28 = 3;
      strcpy((char *)v27, "ETS");
      break;
    case 0xE:
      size_t v5 = 4;
      char v28 = 4;
      int v6 = 1397968455;
      goto LABEL_25;
    case 0xF:
      size_t v5 = 4;
      char v28 = 4;
      int v6 = 1397965905;
      goto LABEL_25;
    case 0x10:
      size_t v5 = 5;
      char v28 = 5;
      strcpy((char *)v27, "RCTTH");
      break;
    case 0x11:
      size_t v5 = 3;
      char v28 = 3;
      strcpy((char *)v27, "ACP");
      break;
    case 0x12:
      size_t v5 = 4;
      char v28 = 4;
      int v6 = 1297040214;
      goto LABEL_25;
    case 0x13:
      size_t v5 = 4;
      char v28 = 4;
      int v6 = 1129335117;
LABEL_25:
      LODWORD(v27[0]) = v6;
      BYTE4(v27[0]) = 0;
      break;
    case 0x14:
      size_t v5 = 3;
      char v28 = 3;
      strcpy((char *)v27, "DHL");
      break;
    case 0x15:
      size_t v5 = 3;
      char v28 = 3;
      strcpy((char *)v27, "MUX");
      break;
    case 0x16:
      size_t v5 = 3;
      char v28 = 3;
      strcpy((char *)v27, "FAC");
      break;
    default:
      size_t v5 = 7;
      char v28 = 7;
      strcpy((char *)v27, "Unknown");
      break;
  }
  uint64_t v30 = 8250;
  uint64_t v31 = 0;
  HIBYTE(v31) = v5 + 10;
  tm __p = *(void **)"Protocol: ";
  memcpy((char *)&v30 + 2, v27, v5);
  *((unsigned char *)&v30 + v5 + 2) = 0;
  if (v31 >= 0) {
    uint64_t p_p = (uint64_t)&__p;
  }
  else {
    uint64_t p_p = 0x6C6F636F746F7250;
  }
  if (v31 >= 0) {
    uint64_t v8 = HIBYTE(v31);
  }
  else {
    uint64_t v8 = v30;
  }
  unint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v33, p_p, v8);
  uint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)", ", 2);
  uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"Powersave: ", 11);
  *(_DWORD *)((char *)v11 + *(void *)(*v11 - 24) + 8) |= 1u;
  unsigned int v12 = (void *)std::ostream::operator<<();
  unint64_t v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)", ", 2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"Create Timeout: ", 16);
  uint64_t v14 = (void *)std::ostream::operator<<();
  uint64_t v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)" sec, ", 6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"IO Size: ", 9);
  char v16 = (void *)std::ostream::operator<<();
  size_t v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)" KB, ", 5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"Num Pending Reads: ", 19);
  std::ostream::operator<<();
  if (SHIBYTE(v31) < 0)
  {
    operator delete(__p);
    if ((v28 & 0x80000000) == 0)
    {
LABEL_34:
      char v18 = BYTE8(v39);
      if ((BYTE8(v39) & 0x10) == 0) {
        goto LABEL_35;
      }
LABEL_39:
      uint64_t v20 = v39;
      if ((unint64_t)v39 < *((void *)&v36 + 1))
      {
        *(void *)&long long v39 = *((void *)&v36 + 1);
        uint64_t v20 = *((void *)&v36 + 1);
      }
      uint64_t v21 = (const void *)v36;
      size_t v19 = v20 - v36;
      if ((unint64_t)(v20 - v36) >= 0x7FFFFFFFFFFFFFF8) {
        goto LABEL_53;
      }
      goto LABEL_42;
    }
  }
  else if ((v28 & 0x80000000) == 0)
  {
    goto LABEL_34;
  }
  operator delete(v27[0]);
  char v18 = BYTE8(v39);
  if ((BYTE8(v39) & 0x10) != 0) {
    goto LABEL_39;
  }
LABEL_35:
  if ((v18 & 8) == 0)
  {
    size_t v19 = 0;
    a2[23] = 0;
    goto LABEL_49;
  }
  uint64_t v21 = (const void *)*((void *)&v34 + 1);
  size_t v19 = *((void *)&v35 + 1) - *((void *)&v34 + 1);
  if (*((void *)&v35 + 1) - *((void *)&v34 + 1) >= 0x7FFFFFFFFFFFFFF8uLL) {
LABEL_53:
  }
    std::string::__throw_length_error[abi:ne180100]();
LABEL_42:
  if (v19 >= 0x17)
  {
    uint64_t v22 = (v19 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v19 | 7) != 0x17) {
      uint64_t v22 = v19 | 7;
    }
    uint64_t v23 = v22 + 1;
    uint64_t v24 = operator new(v22 + 1);
    *((void *)a2 + 1) = v19;
    *((void *)a2 + 2) = v23 | 0x8000000000000000;
    *(void *)a2 = v24;
    a2 = v24;
    goto LABEL_48;
  }
  a2[23] = v19;
  if (v19) {
LABEL_48:
  }
    memmove(a2, v21, v19);
LABEL_49:
  a2[v19] = 0;
  *(void *)&long long v32 = *MEMORY[0x263F8C2B8];
  uint64_t v25 = *(void *)(MEMORY[0x263F8C2B8] + 72);
  *(void *)((char *)&v32 + *(void *)(v32 - 24)) = *(void *)(MEMORY[0x263F8C2B8] + 64);
  *(void *)&long long v33 = v25;
  *((void *)&v33 + 1) = MEMORY[0x263F8C318] + 16;
  if (SHIBYTE(v38) < 0) {
    operator delete(v37[1]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x263E69630](v40);
}

void sub_2636D1888(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2636D189C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  if (a20 < 0)
  {
    operator delete(__p);
    if ((a14 & 0x80000000) == 0)
    {
LABEL_3:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a21);
      _Unwind_Resume(a1);
    }
  }
  else if ((a14 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a9);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a21);
  _Unwind_Resume(a1);
}

uint64_t BasebandTransport::BasebandTransport(uint64_t a1, void *a2, NSObject **a3)
{
  *(void *)a1 = &unk_270EA70F8;
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v15, "com.apple.telephony.abm", "ipc.bb");
  int v6 = dispatch_queue_create("ipc.bb", 0);
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = v6;
  if (v6)
  {
    int v7 = v6;
    dispatch_retain(v6);
    *(void *)(a1 + 96) = 0;
    dispatch_release(v7);
  }
  else
  {
    *(void *)(a1 + 96) = 0;
  }
  *(void *)a1 = &unk_270EA73D8;
  ctu::OsLogContext::OsLogContext();
  ctu::OsLogContext::OsLogContext();
  ctu::LoggerCommonBase::LoggerCommonBase();
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v17);
  *(void *)(a1 + 8) = &unk_270EA5428;
  *(void *)(a1 + 56) = *a2;
  uint64_t v8 = a2[1];
  *(void *)(a1 + 64) = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v16);
  *(void *)a1 = &unk_270EA74D0;
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v15);
  *(void *)a1 = &unk_270EA70F8;
  *(_DWORD *)(a1 + 104) = 23;
  *(unsigned char *)(a1 + 108) = 0;
  *(void *)(a1 + 112) = 10;
  shouldUseMinBasebandTransportIOReadSize = (capabilities::abs *)capabilities::abs::shouldUseMinBasebandTransportIOReadSize(v9);
  if (shouldUseMinBasebandTransportIOReadSize) {
    int v11 = 0x4000;
  }
  else {
    int v11 = 0x8000;
  }
  *(_DWORD *)(a1 + 120) = v11;
  capabilities::abs::shouldUseMinBasebandTransportIOReadCount(shouldUseMinBasebandTransportIOReadSize);
  *(_DWORD *)(a1 + 124) = 4;
  *(void *)(a1 + 128) = 0;
  *(unsigned char *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  unsigned int v12 = *a3;
  *(void *)(a1 + 152) = *a3;
  if (v12) {
    dispatch_retain(v12);
  }
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 168) = 0;
  uint64_t Controller = TelephonyBasebandCreateController();
  *(void *)(a1 + 272) = 0;
  *(void *)(a1 + 280) = 0;
  *(void *)(a1 + 264) = Controller;
  *(void *)(a1 + 285) = 0;
  *(void *)(a1 + 304) = 0;
  *(void *)(a1 + 312) = 0;
  *(void *)(a1 + 296) = 0;
  *(void *)(a1 + 320) = dispatch_group_create();
  *(_DWORD *)(a1 + 328) = 0;
  *(unsigned char *)(a1 + 332) = 0;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(void *)(a1 + 256) = 0;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(void *)(a1 + 365) = 0;
  return a1;
}

void sub_2636D1B74(_Unwind_Exception *a1)
{
  long long v4 = (const void *)v1[21];
  if (v4) {
    _Block_release(v4);
  }
  if (*v2) {
    _Block_release(*v2);
  }
  size_t v5 = v1[19];
  if (v5) {
    dispatch_release(v5);
  }
  int v6 = (const void *)v1[18];
  if (v6) {
    _Block_release(v6);
  }
  ctu::SharedLoggable<BasebandTransport,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(v1);
  _Unwind_Resume(a1);
}

const char *BasebandTransport::getName(BasebandTransport *this)
{
  return "ipc.bb";
}

void *ctu::SharedLoggable<BasebandTransport,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(void *a1)
{
  *a1 = &unk_270EA73D8;
  MEMORY[0x263E68AF0](a1 + 1);
  uint64_t v2 = a1[12];
  if (v2) {
    dispatch_release(v2);
  }
  int v3 = a1[11];
  if (v3) {
    dispatch_release(v3);
  }
  long long v4 = (std::__shared_weak_count *)a1[10];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = &unk_270EA73D8;
  MEMORY[0x263E68AF0](a1 + 1);
  uint64_t v2 = a1[12];
  if (v2) {
    dispatch_release(v2);
  }
  int v3 = a1[11];
  if (v3) {
    dispatch_release(v3);
  }
  long long v4 = (std::__shared_weak_count *)a1[10];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

void BasebandTransport::~BasebandTransport(BasebandTransport *this)
{
  *(void *)this = &unk_270EA70F8;
  uint64_t v2 = *((void *)this + 35);
  if (v2)
  {
    dispatch_source_cancel(v2);
    dispatch_release(*((dispatch_object_t *)this + 35));
    *((void *)this + 35) = 0;
    int v3 = *((void *)this + 5);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)char v16 = 0;
      _os_log_impl(&dword_26368A000, v3, OS_LOG_TYPE_DEFAULT, "#I Status report disabled", v16, 2u);
    }
  }
  (*(void (**)(BasebandTransport *))(*(void *)this + 80))(this);
  long long v4 = (const void *)*((void *)this + 33);
  if (v4)
  {
    CFRelease(v4);
    *((void *)this + 33) = 0;
  }
  size_t v5 = (void *)*((void *)this + 37);
  if (v5)
  {
    operator delete[](v5);
    *((void *)this + 37) = 0;
  }
  int v6 = *((void *)this + 40);
  if (v6) {
    dispatch_release(v6);
  }
  int v7 = *((void *)this + 39);
  if (v7) {
    dispatch_release(v7);
  }
  uint64_t v8 = (const void *)*((void *)this + 34);
  if (v8) {
    _Block_release(v8);
  }
  unint64_t v9 = (const void *)*((void *)this + 21);
  if (v9) {
    _Block_release(v9);
  }
  uint64_t v10 = (const void *)*((void *)this + 20);
  if (v10) {
    _Block_release(v10);
  }
  int v11 = *((void *)this + 19);
  if (v11) {
    dispatch_release(v11);
  }
  unsigned int v12 = (const void *)*((void *)this + 18);
  if (v12) {
    _Block_release(v12);
  }
  *(void *)this = &unk_270EA73D8;
  MEMORY[0x263E68AF0]((char *)this + 8);
  unint64_t v13 = *((void *)this + 12);
  if (v13) {
    dispatch_release(v13);
  }
  uint64_t v14 = *((void *)this + 11);
  if (v14) {
    dispatch_release(v14);
  }
  uint64_t v15 = (std::__shared_weak_count *)*((void *)this + 10);
  if (v15) {
    std::__shared_weak_count::__release_weak(v15);
  }
}

{
  void *v1;
  uint64_t vars8;

  BasebandTransport::~BasebandTransport(this);

  operator delete(v1);
}

void BasebandTransport::timerOff_sync(BasebandTransport *this)
{
  uint64_t v2 = *((void *)this + 35);
  if (v2)
  {
    dispatch_source_cancel(v2);
    dispatch_release(*((dispatch_object_t *)this + 35));
    *((void *)this + 35) = 0;
    int v3 = *((void *)this + 5);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long v4 = 0;
      _os_log_impl(&dword_26368A000, v3, OS_LOG_TYPE_DEFAULT, "#I Status report disabled", v4, 2u);
    }
  }
}

void BasebandTransport::create(NSObject **this@<X0>, queue a2@<0:X1>, uint64_t a3@<X8>)
{
  block[0] = MEMORY[0x263EF8330];
  block[1] = 0x40000000;
  block[2] = ___ZL14sLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  block[3] = &__block_descriptor_tmp_90;
  block[4] = &qword_26A99F6B0;
  if (_MergedGlobals_1 == -1)
  {
    size_t v5 = *(std::__shared_weak_count **)algn_26A99F6B8;
    uint64_t v8 = qword_26A99F6B0;
    uint64_t v9 = *(void *)algn_26A99F6B8;
    if (!*(void *)algn_26A99F6B8) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  dispatch_once(&_MergedGlobals_1, block);
  size_t v5 = *(std::__shared_weak_count **)algn_26A99F6B8;
  uint64_t v8 = qword_26A99F6B0;
  uint64_t v9 = *(void *)algn_26A99F6B8;
  if (*(void *)algn_26A99F6B8) {
LABEL_3:
  }
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
LABEL_4:
  int v6 = *this;
  int v7 = v6;
  if (v6) {
    dispatch_retain(v6);
  }
  BasebandTransport::create((capabilities::radio *)&v8, &v7, a3);
  if (v6) {
    dispatch_release(v6);
  }
  if (v5)
  {
    if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_2636D200C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (v10) {
    dispatch_release(v10);
  }
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void BasebandTransport::create(capabilities::radio *a1@<X0>, NSObject **a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  if (capabilities::radio::vendor(a1) != 3) {
    return;
  }
  int v6 = operator new(0x198uLL);
  int v7 = (std::__shared_weak_count *)*((void *)a1 + 1);
  uint64_t v22 = *(void *)a1;
  uint64_t v23 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v8 = *a2;
  uint64_t v21 = v8;
  if (v8) {
    dispatch_retain(v8);
  }
  BasebandTransport::BasebandTransport((uint64_t)v6, &v22, &v21);
  uint64_t v24 = v6;
  unint64_t v25 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v9 = (std::__shared_weak_count *)operator new(0x20uLL);
  v9->__shared_owners_ = 0;
  p_shared_owners = &v9->__shared_owners_;
  v9->__vftable = (std::__shared_weak_count_vtbl *)&unk_270EA7510;
  v9->__shared_weak_owners_ = 0;
  v9[1].__vftable = (std::__shared_weak_count_vtbl *)v6;
  unint64_t v25 = (unint64_t)v9;
  int v11 = (std::__shared_weak_count *)*((void *)v6 + 10);
  if (v11)
  {
    if (v11->__shared_owners_ != -1) {
      goto LABEL_12;
    }
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    *((void *)v6 + 9) = v6;
    *((void *)v6 + 10) = v9;
    std::__shared_weak_count::__release_weak(v11);
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }
  atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  *((void *)v6 + 9) = v6;
  *((void *)v6 + 10) = v9;
  if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL))
  {
LABEL_11:
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
LABEL_12:
  unsigned int v12 = v24;
  if (v24[7])
  {
    unint64_t v13 = (std::__shared_weak_count *)v24[10];
    if (!v13 || (uint64_t v14 = v24[9], (v15 = std::__shared_weak_count::lock(v13)) == 0)) {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    char v16 = v15;
    uint64_t v28 = v14;
    long long v29 = v15;
    ctu::LoggerCommonBase::getLogDomain((ctu::LoggerCommonBase *)(v12 + 1));
    uint64_t v26 = v14;
    long long v27 = v16;
    uint64_t v28 = 0;
    long long v29 = 0;
    ctu::TrackedLogger::registerLoggerToServer();
    size_t v17 = v27;
    if (v27 && !atomic_fetch_add(&v27->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
    char v18 = v29;
    if (v29 && !atomic_fetch_add(&v29->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
    unsigned int v12 = v24;
  }
  unint64_t v19 = v25;
  uint64_t v24 = 0;
  unint64_t v25 = 0;
  *(void *)a3 = v12;
  *(void *)(a3 + 8) = v19;
  if (v8) {
    dispatch_release(v8);
  }
  uint64_t v20 = v23;
  if (v23)
  {
    if (!atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  BasebandTransport::init(*(BasebandTransport **)a3);
}

void sub_2636D22EC()
{
}

void sub_2636D2338()
{
}

void sub_2636D2348()
{
}

void sub_2636D2354(_Unwind_Exception *a1)
{
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_2636D23C4(_Unwind_Exception *a1)
{
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void BasebandTransport::init(BasebandTransport *this)
{
  uint64_t v5 = *((void *)this + 9);
  int v3 = (std::__shared_weak_count *)*((void *)this + 10);
  long long v4 = (char *)this + 72;
  if (!v3 || (int v6 = std::__shared_weak_count::lock(v3)) == 0) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  int v7 = v6;
  p_shared_weak_owners = &v6->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v7);
  }
  v11[0] = MEMORY[0x263EF8330];
  v11[1] = 1174405120;
  v11[2] = ___ZN17BasebandTransport4initEv_block_invoke;
  v11[3] = &__block_descriptor_tmp_51_0;
  v11[4] = this;
  void v11[5] = v5;
  unsigned int v12 = v7;
  unint64_t v13 = v11;
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  block[0] = MEMORY[0x263EF8330];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI17BasebandTransportE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  block[3] = &__block_descriptor_tmp_98;
  block[4] = v4;
  void block[5] = &v13;
  uint64_t v9 = *((void *)this + 11);
  if (!*((void *)this + 12))
  {
    dispatch_sync(v9, block);
    uint64_t v10 = v12;
    if (!v12) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  dispatch_async_and_wait(v9, block);
  uint64_t v10 = v12;
  if (v12) {
LABEL_7:
  }
    std::__shared_weak_count::__release_weak(v10);
LABEL_8:
  std::__shared_weak_count::__release_weak(v7);
}

void ___ZN17BasebandTransport4initEv_block_invoke(capabilities::ipc *a1)
{
  uint64_t v2 = *((void *)a1 + 4);
  if (capabilities::ipc::supportsPCI(a1))
  {
    aBlock[0] = MEMORY[0x263EF8330];
    aBlock[1] = 1174405120;
    aBlock[2] = ___ZN17BasebandTransport4initEv_block_invoke_2;
    aBlock[3] = &__block_descriptor_tmp_17;
    uint64_t v4 = *((void *)a1 + 5);
    int v3 = (std::__shared_weak_count *)*((void *)a1 + 6);
    aBlock[4] = v2;
    aBlock[5] = v4;
    uint64_t v14 = v3;
    if (v3) {
      atomic_fetch_add_explicit(&v3->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v5 = _Block_copy(aBlock);
    int v6 = *(const void **)(v2 + 160);
    *(void *)(v2 + 160) = v5;
    if (v6) {
      _Block_release(v6);
    }
    v11[0] = MEMORY[0x263EF8330];
    v11[1] = 1174405120;
    v11[2] = ___ZN17BasebandTransport4initEv_block_invoke_43;
    v11[3] = &__block_descriptor_tmp_47;
    uint64_t v8 = *((void *)a1 + 5);
    int v7 = (std::__shared_weak_count *)*((void *)a1 + 6);
    v11[4] = v2;
    void v11[5] = v8;
    unsigned int v12 = v7;
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v9 = _Block_copy(v11);
    uint64_t v10 = *(const void **)(v2 + 168);
    *(void *)(v2 + 168) = v9;
    if (v10) {
      _Block_release(v10);
    }
    if (v12) {
      std::__shared_weak_count::__release_weak(v12);
    }
    if (v14) {
      std::__shared_weak_count::__release_weak(v14);
    }
  }
}

void ___ZN17BasebandTransport4initEv_block_invoke_2(void *a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  uint64_t v5 = (std::__shared_weak_count *)a1[6];
  if (v5)
  {
    uint64_t v9 = a1[4];
    uint64_t v10 = std::__shared_weak_count::lock(v5);
    if (v10)
    {
      int v11 = v10;
      if (a1[5])
      {
        unsigned int v12 = *(NSObject **)(v9 + 40);
        if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)uint64_t v21 = 67109632;
          *(_DWORD *)&v21[4] = a2;
          *(_WORD *)&v21[8] = 2048;
          *(void *)&v21[10] = a3;
          *(_WORD *)&v21[18] = 2048;
          *(void *)&v21[20] = a4;
          _os_log_error_impl(&dword_26368A000, v12, OS_LOG_TYPE_ERROR, "PCI Transport Status: 0x%x (0x%08lx, 0x%08lx)", v21, 0x1Cu);
        }
        *(_DWORD *)(v9 + 328) = 2 * (a2 != 0);
        *(int64x2_t *)(v9 + 352) = vsubq_s64(*(int64x2_t *)(v9 + 336), *(int64x2_t *)(v9 + 376));
        unint64_t v13 = *(const void **)(v9 + 272);
        if (v13)
        {
          uint64_t v14 = _Block_copy(v13);
          uint64_t v15 = v14;
          long long v16 = *(_OWORD *)(v9 + 344);
          *(_OWORD *)uint64_t v21 = *(_OWORD *)(v9 + 328);
          *(_OWORD *)&v21[16] = v16;
          uint64_t v22 = *(void *)(v9 + 360);
          size_t v17 = *(NSObject **)(v9 + 152);
          if (v14) {
            char v18 = _Block_copy(v14);
          }
          else {
            char v18 = 0;
          }
          unint64_t v19 = (char *)operator new(0x30uLL);
          *(void *)unint64_t v19 = v18;
          long long v20 = *(_OWORD *)&v21[16];
          *(_OWORD *)(v19 + 8) = *(_OWORD *)v21;
          *(_OWORD *)(v19 + 24) = v20;
          *((void *)v19 + 5) = v22;
          dispatch_async_f(v17, v19, (dispatch_function_t)_ZZN8dispatch5asyncIZZZN17BasebandTransport4initEvEUb_EUb0_E3__0EEvP16dispatch_queue_sNSt3__110unique_ptrIT_NS5_14default_deleteIS7_EEEEENUlPvE_8__invokeESB_);
          if (v15) {
            _Block_release(v15);
          }
        }
      }
      if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
}

void sub_2636D287C(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

int64x2_t BasebandTransport::updateDeltas_sync(BasebandTransport *this)
{
  int64x2_t result = vsubq_s64(*((int64x2_t *)this + 21), *(int64x2_t *)((char *)this + 376));
  *((int64x2_t *)this + 22) = result;
  return result;
}

uint64_t __copy_helper_block_e8_40c42_ZTSNSt3__18weak_ptrI17BasebandTransportEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c42_ZTSNSt3__18weak_ptrI17BasebandTransportEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void ___ZN17BasebandTransport4initEv_block_invoke_43(void *a1, int a2, void *a3, unsigned int a4)
{
  uint64_t v37 = *MEMORY[0x263EF8340];
  uint64_t v6 = a1[4];
  uint64_t v31 = 0;
  long long v32 = 0;
  int v7 = (std::__shared_weak_count *)a1[6];
  if (v7 && (v32 = std::__shared_weak_count::lock(v7)) != 0 && (uint64_t v10 = a1[5], (v31 = v10) != 0))
  {
    int v11 = *(NSObject **)(v10 + 320);
    if (v11)
    {
      dispatch_retain(*(dispatch_object_t *)(v10 + 320));
      dispatch_group_enter(v11);
    }
    if (a2)
    {
      unsigned int v12 = *(NSObject **)(v6 + 40);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)std::string buf = 67109120;
        *(_DWORD *)&uint8_t buf[4] = a2;
        _os_log_debug_impl(&dword_26368A000, v12, OS_LOG_TYPE_DEBUG, "#D Async read error 0x%08x", buf, 8u);
      }
    }
    else
    {
      *(void *)(v6 + 336) += a4;
      uint64_t v14 = *(const void **)(v6 + 144);
      if (v14)
      {
        uint64_t v15 = _Block_copy(v14);
        uint64_t v16 = *(void *)(v6 + 128);
        if (v16)
        {
          tm __p = 0;
          long long v29 = 0;
          uint64_t v30 = 0;
          (*(void (**)(uint64_t, void *, void, void **))(*(void *)v16 + 8))(v16, a3, a4, &__p);
          size_t v17 = *(NSObject **)(v6 + 152);
          if (v15) {
            char v18 = _Block_copy(v15);
          }
          else {
            char v18 = 0;
          }
          *(void *)std::string buf = v18;
          long long v34 = 0;
          long long v35 = 0;
          long long v36 = 0;
          uint64_t v22 = __p;
          size_t v23 = v29 - (unsigned char *)__p;
          if (v29 == __p)
          {
            unint64_t v25 = 0;
            uint64_t v24 = 0;
          }
          else
          {
            if ((v23 & 0x8000000000000000) != 0) {
              std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v24 = (char *)operator new(v29 - (unsigned char *)__p);
            unint64_t v25 = &v24[v23];
            long long v34 = v24;
            long long v36 = &v24[v23];
            memcpy(v24, v22, v23);
            long long v35 = &v24[v23];
          }
          uint64_t v26 = operator new(0x20uLL);
          *uint64_t v26 = v18;
          v26[1] = v24;
          void v26[2] = v25;
          v26[3] = v25;
          dispatch_async_f(v17, v26, (dispatch_function_t)_ZZN8dispatch5asyncIZZZN17BasebandTransport4initEvEUb_EUb1_E3__1EEvP16dispatch_queue_sNSt3__110unique_ptrIT_NS5_14default_deleteIS7_EEEEENUlPvE_8__invokeESB_);
          if (__p)
          {
            long long v29 = __p;
            operator delete(__p);
          }
        }
        else
        {
          char v19 = *(unsigned char *)(v6 + 136);
          long long v20 = *(NSObject **)(v6 + 152);
          if (v15) {
            uint64_t v21 = _Block_copy(v15);
          }
          else {
            uint64_t v21 = 0;
          }
          long long v27 = operator new(0x18uLL);
          void *v27 = v21;
          v27[1] = a3;
          *((_DWORD *)v27 + 4) = a4;
          *((unsigned char *)v27 + 20) = v19;
          dispatch_async_f(v20, v27, (dispatch_function_t)_ZZN8dispatch5asyncIZZZN17BasebandTransport4initEvEUb_EUb1_E3__2EEvP16dispatch_queue_sNSt3__110unique_ptrIT_NS5_14default_deleteIS7_EEEEENUlPvE_8__invokeESB_);
          a3 = 0;
        }
        if (v15) {
          _Block_release(v15);
        }
      }
    }
    if (a3 && !*(unsigned char *)(v6 + 136)) {
      free(a3);
    }
    if (v11)
    {
      dispatch_group_leave(v11);
      dispatch_release(v11);
    }
  }
  else if (a3)
  {
    free(a3);
  }
  unint64_t v13 = v32;
  if (v32)
  {
    if (!atomic_fetch_add(&v32->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

void sub_2636D2BEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13, uint64_t a14, void *aBlock, void *a16, uint64_t a17)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

BOOL BasebandTransport::open(BasebandTransport *a1, long long *a2, void **a3)
{
  uint64_t v17 = 0;
  char v18 = &v17;
  uint64_t v19 = 0x2000000000;
  char v20 = 0;
  BasebandTransport::stopReader(a1);
  v12[0] = MEMORY[0x263EF8330];
  v12[1] = 1174405120;
  v12[2] = ___ZN17BasebandTransport4openENS_10ParametersEN8dispatch5blockIU13block_pointerFvPhjEEE_block_invoke;
  v12[3] = &unk_270EA71E8;
  void v12[5] = a1;
  long long v6 = a2[1];
  long long v13 = *a2;
  long long v14 = v6;
  uint64_t v15 = *((void *)a2 + 4);
  int v7 = *a3;
  if (*a3) {
    int v7 = _Block_copy(v7);
  }
  aBlocunint64_t k = v7;
  v12[4] = &v17;
  uint64_t v21 = v12;
  block[0] = MEMORY[0x263EF8330];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI17BasebandTransportE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  block[3] = &__block_descriptor_tmp_98;
  block[4] = (char *)a1 + 72;
  void block[5] = &v21;
  uint64_t v8 = *((void *)a1 + 11);
  if (*((void *)a1 + 12))
  {
    dispatch_async_and_wait(v8, block);
    int v9 = *((unsigned __int8 *)v18 + 24);
    uint64_t v10 = aBlock;
    if (!aBlock) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  dispatch_sync(v8, block);
  int v9 = *((unsigned __int8 *)v18 + 24);
  uint64_t v10 = aBlock;
  if (aBlock) {
LABEL_7:
  }
    _Block_release(v10);
LABEL_8:
  _Block_object_dispose(&v17, 8);
  return v9 != 0;
}

void sub_2636D2DFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void BasebandTransport::stopReader(BasebandTransport *this)
{
  v14[0] = 0;
  v14[1] = v14;
  v14[2] = 0x2000000000;
  char v15 = 0;
  uint64_t v2 = (uint64_t *)((char *)this + 72);
  v13[0] = MEMORY[0x263EF8330];
  v13[1] = 0x40000000;
  void v13[2] = ___ZN17BasebandTransport10stopReaderEv_block_invoke;
  v13[3] = &unk_2655D4E40;
  v13[4] = v14;
  v13[5] = this;
  uint64_t v16 = v13;
  block[0] = MEMORY[0x263EF8330];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI17BasebandTransportE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  block[3] = &__block_descriptor_tmp_98;
  block[4] = (char *)this + 72;
  void block[5] = &v16;
  uint64_t v4 = (char *)this + 88;
  int v3 = *((void *)this + 11);
  if (*((void *)v4 + 1)) {
    dispatch_async_and_wait(v3, block);
  }
  else {
    dispatch_sync(v3, block);
  }
  v12[0] = MEMORY[0x263EF8330];
  v12[1] = 0x40000000;
  v12[2] = ___ZN17BasebandTransport10stopReaderEv_block_invoke_2;
  v12[3] = &unk_2655D4E68;
  v12[4] = v14;
  void v12[5] = this;
  ctu::SharedSynchronizable<BasebandTransport>::execute_wrapped(v2, (uint64_t)v12);
  uint64_t v5 = *((void *)this + 40);
  if (v5)
  {
    long long v6 = *((void *)this + 5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(block[0]) = 0;
      _os_log_impl(&dword_26368A000, v6, OS_LOG_TYPE_DEFAULT, "#I Waiting for reader to be stopped", (uint8_t *)block, 2u);
      uint64_t v5 = *((void *)this + 40);
    }
    dispatch_time_t v7 = dispatch_time(0, 3000000000);
    if (dispatch_group_wait(v5, v7))
    {
      (*(void (**)(BasebandTransport *))(*(void *)this + 80))(this);
      uint64_t v8 = *((void *)this + 5);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        LOWORD(block[0]) = 0;
        _os_log_error_impl(&dword_26368A000, v8, OS_LOG_TYPE_ERROR, "Timeout waiting for read to unblock, freed transport to force read unblock", (uint8_t *)block, 2u);
      }
    }
    else
    {
      uint64_t v10 = (void *)*((void *)this + 37);
      if (v10)
      {
        operator delete[](v10);
        *((void *)this + 37) = 0;
        int v11 = *((void *)this + 39);
        *((void *)this + 39) = 0;
        if (v11) {
          dispatch_release(v11);
        }
      }
    }
    int v9 = *((void *)this + 5);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(block[0]) = 0;
      _os_log_impl(&dword_26368A000, v9, OS_LOG_TYPE_DEFAULT, "#I Reader stopped", (uint8_t *)block, 2u);
    }
  }
  _Block_object_dispose(v14, 8);
}

void sub_2636D3098(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void ___ZN17BasebandTransport4openENS_10ParametersEN8dispatch5blockIU13block_pointerFvPhjEEE_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  int v3 = *(NSObject **)(v2 + 280);
  if (v3)
  {
    dispatch_source_cancel(v3);
    dispatch_release(*(dispatch_object_t *)(v2 + 280));
    *(void *)(v2 + 280) = 0;
    uint64_t v4 = *(NSObject **)(v2 + 40);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v9[0]) = 0;
      _os_log_impl(&dword_26368A000, v4, OS_LOG_TYPE_DEFAULT, "#I Status report disabled", (uint8_t *)v9, 2u);
    }
  }
  (*(void (**)(uint64_t))(*(void *)v2 + 80))(v2);
  *(_DWORD *)(v2 + 328) = 0;
  *(unsigned char *)(v2 + 332) = 0;
  *(_OWORD *)(v2 + 376) = 0u;
  *(_OWORD *)(v2 + 392) = 0u;
  *(_OWORD *)(v2 + 336) = 0u;
  *(_OWORD *)(v2 + 352) = 0u;
  *(void *)(v2 + 365) = 0;
  char v5 = *(unsigned char *)(a1 + 80);
  long long v6 = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(v2 + 104) = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v2 + 120) = v6;
  *(unsigned char *)(v2 + 136) = v5;
  dispatch_time_t v7 = *(void **)(a1 + 88);
  if (v7) {
    dispatch_time_t v7 = _Block_copy(v7);
  }
  uint64_t v8 = *(const void **)(v2 + 144);
  *(void *)(v2 + 144) = v7;
  if (v8) {
    _Block_release(v8);
  }
  if (*(_DWORD *)(v2 + 104) != 23)
  {
    if (capabilities::ipc::supportsPCI((capabilities::ipc *)v7)) {
      *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = BasebandTransport::openPCI_sync((BasebandTransport *)v2);
    }
    if (*(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
      BasebandTransport::timerOn_sync((BasebandTransport *)v2);
    }
    else {
      (*(void (**)(uint64_t))(*(void *)v2 + 80))(v2);
    }
    v9[0] = MEMORY[0x263EF8330];
    v9[1] = 0x40000000;
    v9[2] = ___ZN17BasebandTransport9dumpStateEb_block_invoke;
    v9[3] = &__block_descriptor_tmp_80;
    v9[4] = v2;
    char v10 = 0;
    ctu::SharedSynchronizable<BasebandTransport>::execute_wrapped((uint64_t *)(v2 + 72), (uint64_t)v9);
  }
}

uint64_t BasebandTransport::openPCI_sync(BasebandTransport *this)
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 10);
  if (!v2 || (int v3 = std::__shared_weak_count::lock(v2)) == 0) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v4 = v3;
  atomic_fetch_add_explicit(&v3->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v4);
  }
  inited = (capabilities::abs *)TelephonyBasebandPCITransportInitParameters();
  int v6 = *((_DWORD *)this + 28);
  shouldUseMinBasebandTransportIOReaduint64_t Count = capabilities::abs::traceTransportTimeoutScalingFactor(inited);
  int v8 = 1000 * v6;
  if ((((1000 * v6) * (unint64_t)shouldUseMinBasebandTransportIOReadCount) & 0xFFFFFFFF00000000) != 0)
  {
    int v9 = *((void *)this + 5);
    shouldUseMinBasebandTransportIOReaduint64_t Count = os_log_type_enabled(v9, OS_LOG_TYPE_ERROR);
    if (shouldUseMinBasebandTransportIOReadCount)
    {
      *(_DWORD *)std::string buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v8;
      _os_log_error_impl(&dword_26368A000, v9, OS_LOG_TYPE_ERROR, "Scaled create timeout overflowed, falling back to unscaled value: %u", buf, 8u);
    }
  }
  int v10 = *((_DWORD *)this + 31);
  if (v10) {
    goto LABEL_16;
  }
  int v11 = *((_DWORD *)this + 26);
  shouldUseMinBasebandTransportIOReaduint64_t Count = capabilities::abs::shouldUseMinBasebandTransportIOReadCount((capabilities::abs *)shouldUseMinBasebandTransportIOReadCount);
  if (shouldUseMinBasebandTransportIOReadCount) {
    goto LABEL_10;
  }
  if (v11 != 2)
  {
    if (v11 != 16 && v11 != 15)
    {
LABEL_10:
      unsigned int v27 = 4;
      unsigned int v12 = *((_DWORD *)this + 30);
      if (!v12) {
        goto LABEL_17;
      }
      goto LABEL_20;
    }
    int v10 = 36;
LABEL_16:
    unsigned int v27 = v10;
    unsigned int v12 = *((_DWORD *)this + 30);
    if (!v12) {
      goto LABEL_17;
    }
    goto LABEL_20;
  }
  unsigned int v27 = 16;
  unsigned int v12 = *((_DWORD *)this + 30);
  if (!v12)
  {
LABEL_17:
    if (capabilities::abs::shouldUseMinBasebandTransportIOReadSize((capabilities::abs *)shouldUseMinBasebandTransportIOReadCount)) {
      unsigned int v12 = 0x4000;
    }
    else {
      unsigned int v12 = 0x8000;
    }
  }
LABEL_20:
  unsigned int v28 = v12;
  int v13 = *((_DWORD *)this + 26);
  switch(v13)
  {
    case 0:
      uint64_t v14 = v27;
      if (v27 < 0x41) {
        goto LABEL_56;
      }
      goto LABEL_26;
    case 1:
      uint64_t v14 = v27;
      if (v27 < 0x41) {
        goto LABEL_56;
      }
      goto LABEL_26;
    case 2:
      uint64_t v14 = v27;
      if (v27 < 0x41) {
        goto LABEL_56;
      }
      goto LABEL_26;
    case 3:
      uint64_t v14 = v27;
      if (v27 < 0x41) {
        goto LABEL_56;
      }
      goto LABEL_26;
    case 4:
      uint64_t v14 = v27;
      if (v27 < 0x41) {
        goto LABEL_56;
      }
      goto LABEL_26;
    case 5:
      uint64_t v14 = v27;
      if (v27 < 0x41) {
        goto LABEL_56;
      }
      goto LABEL_26;
    case 6:
      uint64_t v14 = v27;
      if (v27 < 0x41) {
        goto LABEL_56;
      }
      goto LABEL_26;
    case 7:
      uint64_t v14 = v27;
      if (v27 < 0x41) {
        goto LABEL_56;
      }
      goto LABEL_26;
    case 8:
      uint64_t v14 = v27;
      if (v27 < 0x41) {
        goto LABEL_56;
      }
      goto LABEL_26;
    case 9:
    case 17:
      uint64_t v14 = v27;
      if (v27 < 0x41) {
        goto LABEL_56;
      }
      goto LABEL_26;
    case 10:
      uint64_t v14 = v27;
      if (v27 < 0x41) {
        goto LABEL_56;
      }
      goto LABEL_26;
    case 11:
      uint64_t v14 = v27;
      if (v27 < 0x41) {
        goto LABEL_56;
      }
      goto LABEL_26;
    case 12:
      uint64_t v14 = v27;
      if (v27 < 0x41) {
        goto LABEL_56;
      }
      goto LABEL_26;
    case 13:
    case 18:
      uint64_t v14 = v27;
      if (v27 < 0x41) {
        goto LABEL_56;
      }
      goto LABEL_26;
    case 14:
      uint64_t v14 = v27;
      if (v27 < 0x41) {
        goto LABEL_56;
      }
      goto LABEL_26;
    case 15:
      uint64_t v14 = v27;
      if (v27 < 0x41) {
        goto LABEL_56;
      }
      goto LABEL_26;
    case 16:
      uint64_t v14 = v27;
      if (v27 >= 0x41)
      {
LABEL_26:
        char v15 = *((void *)this + 5);
        if (!os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
          goto LABEL_144;
        }
        switch(v13)
        {
          case 0:
            char v30 = 3;
            strcpy((char *)buf, "PBL");
            break;
          case 1:
            char v30 = 3;
            strcpy((char *)buf, "SBL");
            break;
          case 2:
            char v30 = 4;
            int v24 = 1195460932;
            goto LABEL_118;
          case 3:
            char v30 = 4;
            int v24 = 1397114194;
            goto LABEL_118;
          case 4:
            char v30 = 5;
            strcpy((char *)buf, "QMUX1");
            break;
          case 5:
            char v30 = 5;
            strcpy((char *)buf, "QMUX2");
            break;
          case 6:
            char v30 = 3;
            strcpy((char *)buf, "ROM");
            break;
          case 7:
            char v30 = 4;
            int v24 = 1414483778;
            goto LABEL_118;
          case 8:
            char v30 = 3;
            strcpy((char *)buf, "ARI");
            break;
          case 9:
            char v30 = 3;
            strcpy((char *)buf, "STT");
            break;
          case 10:
            char v30 = 2;
            strcpy((char *)buf, "AT");
            break;
          case 11:
            char v30 = 4;
            int v24 = 1280328769;
            goto LABEL_118;
          case 12:
            char v30 = 8;
            strcpy((char *)buf, "MEDIACTL");
            break;
          case 13:
            char v30 = 3;
            strcpy((char *)buf, "ETS");
            break;
          case 14:
            char v30 = 4;
            int v24 = 1397968455;
            goto LABEL_118;
          case 15:
            char v30 = 4;
            int v24 = 1397965905;
            goto LABEL_118;
          case 16:
            char v30 = 5;
            strcpy((char *)buf, "RCTTH");
            break;
          case 17:
            char v30 = 3;
            strcpy((char *)buf, "ACP");
            break;
          case 18:
            char v30 = 4;
            int v24 = 1297040214;
LABEL_118:
            *(_DWORD *)std::string buf = v24;
            uint8_t buf[4] = 0;
            break;
          default:
            char v30 = 7;
            strcpy((char *)buf, "Unknown");
            break;
        }
        *(_DWORD *)uint64_t v31 = 136315394;
        long long v32 = buf;
        __int16 v33 = 2048;
        uint64_t v34 = v14;
        char v20 = "%s: invalid transport io read count (%lu)";
LABEL_141:
        uint64_t v21 = v15;
        uint32_t v22 = 22;
LABEL_142:
        _os_log_error_impl(&dword_26368A000, v21, OS_LOG_TYPE_ERROR, v20, v31, v22);
        if (v30 < 0) {
          operator delete(*(void **)buf);
        }
        goto LABEL_144;
      }
LABEL_56:
      if (v12 - 0x4000 > 0xFC000)
      {
        char v15 = *((void *)this + 5);
        if (!os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
          goto LABEL_144;
        }
        switch(v13)
        {
          case 0:
            char v30 = 3;
            strcpy((char *)buf, "PBL");
            break;
          case 1:
            char v30 = 3;
            strcpy((char *)buf, "SBL");
            break;
          case 2:
            char v30 = 4;
            int v25 = 1195460932;
            goto LABEL_139;
          case 3:
            char v30 = 4;
            int v25 = 1397114194;
            goto LABEL_139;
          case 4:
            char v30 = 5;
            strcpy((char *)buf, "QMUX1");
            break;
          case 5:
            char v30 = 5;
            strcpy((char *)buf, "QMUX2");
            break;
          case 6:
            char v30 = 3;
            strcpy((char *)buf, "ROM");
            break;
          case 7:
            char v30 = 4;
            int v25 = 1414483778;
            goto LABEL_139;
          case 8:
            char v30 = 3;
            strcpy((char *)buf, "ARI");
            break;
          case 9:
            char v30 = 3;
            strcpy((char *)buf, "STT");
            break;
          case 10:
            char v30 = 2;
            strcpy((char *)buf, "AT");
            break;
          case 11:
            char v30 = 4;
            int v25 = 1280328769;
            goto LABEL_139;
          case 12:
            char v30 = 8;
            strcpy((char *)buf, "MEDIACTL");
            break;
          case 13:
            char v30 = 3;
            strcpy((char *)buf, "ETS");
            break;
          case 14:
            char v30 = 4;
            int v25 = 1397968455;
            goto LABEL_139;
          case 15:
            char v30 = 4;
            int v25 = 1397965905;
            goto LABEL_139;
          case 16:
            char v30 = 5;
            strcpy((char *)buf, "RCTTH");
            break;
          case 17:
            char v30 = 3;
            strcpy((char *)buf, "ACP");
            break;
          case 18:
            char v30 = 4;
            int v25 = 1297040214;
LABEL_139:
            *(_DWORD *)std::string buf = v25;
            uint8_t buf[4] = 0;
            break;
          default:
            char v30 = 7;
            strcpy((char *)buf, "Unknown");
            break;
        }
        *(_DWORD *)uint64_t v31 = 136315394;
        long long v32 = buf;
        __int16 v33 = 2048;
        uint64_t v34 = v12;
        char v20 = "%s: invalid transport io read size (%lu)";
        goto LABEL_141;
      }
      if (*((void *)this + 18)) {
        *((unsigned char *)this + 332) = 1;
      }
      if (!TelephonyBasebandPCITransportCreate())
      {
        *((_DWORD *)this + 82) = 2;
        char v18 = *((void *)this + 5);
        if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
        {
          BasebandTransport::asString(*((unsigned int *)this + 26), (char *)buf);
          if (v30 >= 0) {
            uint64_t v19 = buf;
          }
          else {
            uint64_t v19 = *(uint8_t **)buf;
          }
          *(_DWORD *)uint64_t v31 = 136315138;
          long long v32 = v19;
          char v20 = "%s: transport open failed";
          uint64_t v21 = v18;
          uint32_t v22 = 12;
          goto LABEL_142;
        }
LABEL_144:
        uint64_t v16 = 0;
        goto LABEL_145;
      }
      uint64_t v16 = 1;
      *((_DWORD *)this + 82) = 1;
      uint64_t v17 = *((void *)this + 5);
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
      {
        switch(*((_DWORD *)this + 26))
        {
          case 0:
            char v30 = 3;
            strcpy((char *)buf, "PBL");
            break;
          case 1:
            char v30 = 3;
            strcpy((char *)buf, "SBL");
            break;
          case 2:
            char v30 = 4;
            int v23 = 1195460932;
            goto LABEL_93;
          case 3:
            char v30 = 4;
            int v23 = 1397114194;
            goto LABEL_93;
          case 4:
            char v30 = 5;
            strcpy((char *)buf, "QMUX1");
            break;
          case 5:
            char v30 = 5;
            strcpy((char *)buf, "QMUX2");
            break;
          case 6:
            char v30 = 3;
            strcpy((char *)buf, "ROM");
            break;
          case 7:
            char v30 = 4;
            int v23 = 1414483778;
            goto LABEL_93;
          case 8:
            char v30 = 3;
            strcpy((char *)buf, "ARI");
            break;
          case 9:
            char v30 = 3;
            strcpy((char *)buf, "STT");
            break;
          case 0xA:
            char v30 = 2;
            strcpy((char *)buf, "AT");
            break;
          case 0xB:
            char v30 = 4;
            int v23 = 1280328769;
            goto LABEL_93;
          case 0xC:
            char v30 = 8;
            strcpy((char *)buf, "MEDIACTL");
            break;
          case 0xD:
            char v30 = 3;
            strcpy((char *)buf, "ETS");
            break;
          case 0xE:
            char v30 = 4;
            int v23 = 1397968455;
            goto LABEL_93;
          case 0xF:
            char v30 = 4;
            int v23 = 1397965905;
            goto LABEL_93;
          case 0x10:
            char v30 = 5;
            strcpy((char *)buf, "RCTTH");
            break;
          case 0x11:
            char v30 = 3;
            strcpy((char *)buf, "ACP");
            break;
          case 0x12:
            char v30 = 4;
            int v23 = 1297040214;
            goto LABEL_93;
          case 0x13:
            char v30 = 4;
            int v23 = 1129335117;
LABEL_93:
            *(_DWORD *)std::string buf = v23;
            uint8_t buf[4] = 0;
            break;
          case 0x14:
            char v30 = 3;
            strcpy((char *)buf, "DHL");
            break;
          case 0x15:
            char v30 = 3;
            strcpy((char *)buf, "MUX");
            break;
          case 0x16:
            char v30 = 3;
            strcpy((char *)buf, "FAC");
            break;
          default:
            char v30 = 7;
            strcpy((char *)buf, "Unknown");
            break;
        }
        *(_DWORD *)uint64_t v31 = 136315394;
        long long v32 = buf;
        __int16 v33 = 1024;
        LODWORD(v34) = v28;
        _os_log_impl(&dword_26368A000, v17, OS_LOG_TYPE_DEFAULT, "#I %s: transport successfully opened with read io size as %u", v31, 0x12u);
        if (v30 < 0) {
          operator delete(*(void **)buf);
        }
      }
LABEL_145:
      std::__shared_weak_count::__release_weak(v4);
      return v16;
    default:
      goto LABEL_144;
  }
}

void sub_2636D3F4C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_weak(v1);
  _Unwind_Resume(a1);
}

void sub_2636D3F60(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_weak(v1);
  _Unwind_Resume(a1);
}

void BasebandTransport::timerOn_sync(BasebandTransport *this)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  uint64_t v2 = *((void *)this + 35);
  if (v2)
  {
    dispatch_source_cancel(v2);
    dispatch_release(*((dispatch_object_t *)this + 35));
    *((void *)this + 35) = 0;
    int v3 = *((void *)this + 5);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl(&dword_26368A000, v3, OS_LOG_TYPE_DEFAULT, "#I Status report disabled", buf, 2u);
    }
  }
  if (*((_DWORD *)this + 82) == 1)
  {
    unsigned int v4 = *((_DWORD *)this + 72);
    if (v4 && *((void *)this + 34))
    {
      uint64_t v5 = 1000000000 * v4;
      int v6 = dispatch_source_create(MEMORY[0x263EF8400], 1uLL, 0, *((dispatch_queue_t *)this + 11));
      *((void *)this + 35) = v6;
      dispatch_time_t v7 = dispatch_time(0, v5);
      dispatch_source_set_timer(v6, v7, v5, 0xBEBC200uLL);
      int v8 = (std::__shared_weak_count *)*((void *)this + 10);
      if (!v8 || (uint64_t v9 = *((void *)this + 9), (v10 = std::__shared_weak_count::lock(v8)) == 0)) {
        std::__throw_bad_weak_ptr[abi:ne180100]();
      }
      int v11 = v10;
      p_shared_weak_owners = &v10->__shared_weak_owners_;
      atomic_fetch_add_explicit(&v10->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      if (!atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v11);
      }
      int v13 = *((void *)this + 35);
      handler[0] = MEMORY[0x263EF8330];
      handler[1] = 1174405120;
      handler[2] = ___ZN17BasebandTransport12timerOn_syncEv_block_invoke;
      handler[3] = &__block_descriptor_tmp_79;
      handler[4] = this;
      handler[5] = v9;
      char v18 = v11;
      atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
      dispatch_source_set_event_handler(v13, handler);
      dispatch_activate(*((dispatch_object_t *)this + 35));
      uint64_t v14 = *((void *)this + 5);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
        int v15 = *((_DWORD *)this + 72);
        *(_DWORD *)std::string buf = 67109120;
        int v20 = v15;
        _os_log_impl(&dword_26368A000, v14, OS_LOG_TYPE_DEFAULT, "#I Status report enabled(%d sec)", buf, 8u);
      }
      if (v18) {
        std::__shared_weak_count::__release_weak(v18);
      }
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  else
  {
    uint64_t v16 = *((void *)this + 5);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl(&dword_26368A000, v16, OS_LOG_TYPE_DEFAULT, "#I Invalid state for status report enable.  Ignoring enable request.", buf, 2u);
    }
  }
}

void BasebandTransport::dumpState(BasebandTransport *this, char a2)
{
  v2[0] = MEMORY[0x263EF8330];
  v2[1] = 0x40000000;
  v2[2] = ___ZN17BasebandTransport9dumpStateEb_block_invoke;
  v2[3] = &__block_descriptor_tmp_80;
  v2[4] = this;
  char v3 = a2;
  ctu::SharedSynchronizable<BasebandTransport>::execute_wrapped((uint64_t *)this + 9, (uint64_t)v2);
}

void *__copy_helper_block_e8_88c45_ZTSN8dispatch5blockIU13block_pointerFvPhjEEE(uint64_t a1, uint64_t a2)
{
  int64x2_t result = *(void **)(a2 + 88);
  if (result) {
    int64x2_t result = _Block_copy(result);
  }
  *(void *)(a1 + 88) = result;
  return result;
}

void __destroy_helper_block_e8_88c45_ZTSN8dispatch5blockIU13block_pointerFvPhjEEE(uint64_t a1)
{
  uint64_t v1 = *(const void **)(a1 + 88);
  if (v1) {
    _Block_release(v1);
  }
}

BOOL BasebandTransport::write(BasebandTransport *this, const unsigned __int8 *a2, uint64_t a3, unsigned int *a4)
{
  uint64_t v39 = 0;
  uint64_t v40 = &v39;
  uint64_t v41 = 0x2000000000;
  char v42 = 0;
  uint64_t v35 = 0;
  long long v36 = &v35;
  uint64_t v37 = 0x2000000000;
  uint64_t v38 = 0;
  dispatch_time_t v7 = (char *)this + 72;
  v34[0] = MEMORY[0x263EF8330];
  v34[1] = 0x40000000;
  void v34[2] = ___ZN17BasebandTransport5writeEPKhmPjbj_block_invoke;
  v34[3] = &unk_2655D4D10;
  v34[5] = &v39;
  v34[6] = this;
  v34[4] = &v35;
  uint64_t v44 = v34;
  blocunint64_t k = MEMORY[0x263EF8330];
  p_blocunint64_t k = 0x40000000;
  uint64_t v28 = (uint64_t)___ZNK3ctu20SharedSynchronizableI17BasebandTransportE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  long long v29 = (__n128 (*)(void *, uint64_t))&__block_descriptor_tmp_98;
  char v30 = (void (*)(uint64_t))((char *)this + 72);
  tm __p = &v44;
  uint64_t v9 = (char *)this + 88;
  int v8 = *((void *)this + 11);
  if (*((void *)v9 + 1))
  {
    dispatch_async_and_wait(v8, &block);
    if (*((unsigned char *)v40 + 24)) {
      goto LABEL_3;
    }
LABEL_10:
    BOOL v14 = 0;
    goto LABEL_19;
  }
  dispatch_sync(v8, &block);
  if (!*((unsigned char *)v40 + 24)) {
    goto LABEL_10;
  }
LABEL_3:
  blocunint64_t k = 0;
  p_blocunint64_t k = (uint64_t)&block;
  uint64_t v28 = 0x4002000000;
  long long v29 = __Block_byref_object_copy_;
  char v30 = __Block_byref_object_dispose_;
  tm __p = 0;
  long long v32 = 0;
  uint64_t v33 = 0;
  uint64_t v22 = 0;
  int v23 = &v22;
  uint64_t v24 = 0x2000000000;
  int v25 = a2;
  uint64_t v18 = 0;
  uint64_t v19 = &v18;
  uint64_t v20 = 0x2000000000;
  uint64_t v21 = a3;
  v17[0] = MEMORY[0x263EF8330];
  v17[1] = 0x40000000;
  v17[2] = ___ZN17BasebandTransport5writeEPKhmPjbj_block_invoke_54;
  v17[3] = &unk_2655D4D38;
  v17[8] = a2;
  v17[9] = a3;
  v17[4] = &block;
  v17[5] = &v22;
  v17[6] = &v18;
  v17[7] = this;
  unint64_t v43 = v17;
  uint64_t v44 = (void *)MEMORY[0x263EF8330];
  uint64_t v45 = 0x40000000;
  uint64_t v46 = ___ZNK3ctu20SharedSynchronizableI17BasebandTransportE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  uint64_t v47 = &__block_descriptor_tmp_98;
  uint64_t v48 = v7;
  uint64_t v49 = &v43;
  int v10 = *((void *)this + 11);
  if (*((void *)this + 12))
  {
    dispatch_async_and_wait(v10, &v44);
    if (v19[3]) {
      goto LABEL_5;
    }
  }
  else
  {
    dispatch_sync(v10, &v44);
    if (v19[3])
    {
LABEL_5:
      int v11 = (uint64_t (**)(void, uint64_t))v36[3];
      if (*v11)
      {
        int v12 = (*v11)(v11, v23[3]);
        *((unsigned char *)v40 + 24) = v12;
        if (v12)
        {
          v16[0] = MEMORY[0x263EF8330];
          v16[1] = 0x40000000;
          void v16[2] = ___ZN17BasebandTransport5writeEPKhmPjbj_block_invoke_2;
          v16[3] = &unk_2655D4D60;
          v16[4] = &v18;
          v16[5] = this;
          unint64_t v43 = v16;
          uint64_t v44 = (void *)MEMORY[0x263EF8330];
          uint64_t v45 = 0x40000000;
          uint64_t v46 = ___ZNK3ctu20SharedSynchronizableI17BasebandTransportE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
          uint64_t v47 = &__block_descriptor_tmp_98;
          uint64_t v48 = v7;
          uint64_t v49 = &v43;
          int v13 = *((void *)this + 11);
          if (*((void *)this + 12)) {
            dispatch_async_and_wait(v13, &v44);
          }
          else {
            dispatch_sync(v13, &v44);
          }
          BOOL v14 = *((unsigned char *)v40 + 24) != 0;
        }
        else
        {
          BOOL v14 = 0;
        }
      }
      else
      {
        BOOL v14 = 0;
        *((unsigned char *)v40 + 24) = 0;
      }
      goto LABEL_17;
    }
  }
  BOOL v14 = 1;
LABEL_17:
  _Block_object_dispose(&v18, 8);
  _Block_object_dispose(&v22, 8);
  _Block_object_dispose(&block, 8);
  if (__p)
  {
    long long v32 = __p;
    operator delete(__p);
  }
LABEL_19:
  _Block_object_dispose(&v35, 8);
  _Block_object_dispose(&v39, 8);
  return v14;
}

void sub_2636D47D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *__p,uint64_t a39)
{
  _Block_object_dispose(&a25, 8);
  _Block_object_dispose(&a29, 8);
  _Block_object_dispose(&a33, 8);
  if (__p)
  {
    a39 = (uint64_t)__p;
    operator delete(__p);
  }
  _Block_object_dispose((const void *)(v39 - 216), 8);
  _Block_object_dispose((const void *)(v39 - 184), 8);
  _Unwind_Resume(a1);
}

uint64_t ___ZN17BasebandTransport5writeEPKhmPjbj_block_invoke(void *a1)
{
  uint64_t v2 = a1[6];
  *(void *)(*(void *)(a1[4] + 8) + 24) = v2 + 176;
  char v3 = *(uint64_t (**)(void))(v2 + 232);
  if (v3)
  {
    uint64_t result = v3();
    *(unsigned char *)(*(void *)(a1[5] + 8) + 24) = result;
  }
  else
  {
    uint64_t result = 0;
    *(unsigned char *)(*(void *)(a1[5] + 8) + 24) = 0;
  }
  return result;
}

__n128 __Block_byref_object_copy_(void *a1, uint64_t a2)
{
  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(void *)(a2 + 56);
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  return result;
}

void __Block_byref_object_dispose_(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(void *)(a1 + 48) = v2;
    operator delete(v2);
  }
}

uint64_t (***___ZN17BasebandTransport5writeEPKhmPjbj_block_invoke_54(void *a1))(void, void, void, uint64_t)
{
  __n128 result = *(uint64_t (****)(void, void, void, uint64_t))(a1[7] + 128);
  if (result)
  {
    __n128 result = (uint64_t (***)(void, void, void, uint64_t))(**result)(result, a1[8], a1[9], *(void *)(a1[4] + 8) + 40);
    *(void *)(*(void *)(a1[5] + 8) + 24) = *(void *)(*(void *)(a1[4] + 8) + 40);
    *(void *)(*(void *)(a1[6] + 8) + 24) = *(void *)(*(void *)(a1[4] + 8) + 48)
                                                 - *(void *)(*(void *)(a1[4] + 8) + 40);
  }
  return result;
}

void ___ZN17BasebandTransport5writeEPKhmPjbj_block_invoke_2(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v3 = *(void *)(v2 + 344) + *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  *(void *)(v2 + 344) = v3;
  unsigned int v4 = *(NSObject **)(v2 + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v5 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
    int v6 = 134218240;
    uint64_t v7 = v5;
    __int16 v8 = 2048;
    uint64_t v9 = v3;
    _os_log_debug_impl(&dword_26368A000, v4, OS_LOG_TYPE_DEBUG, "#D Written: %zu bytes, for a total of: %llu", (uint8_t *)&v6, 0x16u);
  }
}

uint64_t BasebandTransport::read(BasebandTransport *this, unsigned __int8 *a2, unint64_t a3, unsigned int *a4)
{
  uint64_t v22 = 0;
  int v23 = &v22;
  uint64_t v24 = 0x2000000000;
  char v25 = 0;
  uint64_t v18 = 0;
  uint64_t v19 = &v18;
  uint64_t v20 = 0x2000000000;
  uint64_t v21 = 0;
  int v6 = (uint64_t *)((char *)this + 72);
  v17[0] = MEMORY[0x263EF8330];
  v17[1] = 0x40000000;
  v17[2] = ___ZN17BasebandTransport4readEPhmPjbj_block_invoke;
  v17[3] = &unk_2655D4D88;
  v17[5] = &v22;
  v17[6] = this;
  v17[4] = &v18;
  uint64_t v26 = v17;
  block[0] = MEMORY[0x263EF8330];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI17BasebandTransportE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  block[3] = &__block_descriptor_tmp_98;
  block[4] = (char *)this + 72;
  void block[5] = &v26;
  __int16 v8 = (char *)this + 88;
  uint64_t v7 = *((void *)this + 11);
  if (*((void *)v8 + 1))
  {
    dispatch_async_and_wait(v7, block);
    uint64_t v9 = v23;
    if (!*((unsigned char *)v23 + 24)) {
      goto LABEL_13;
    }
LABEL_5:
    uint64_t v10 = v19[3];
    if (v10 && (int v11 = *(uint64_t (**)(void))(v10 + 8)) != 0)
    {
      char v12 = v11();
      *((unsigned char *)v23 + 24) = v12;
      if (v12)
      {
        v16[0] = MEMORY[0x263EF8330];
        v16[1] = 0x40000000;
        void v16[2] = ___ZN17BasebandTransport4readEPhmPjbj_block_invoke_58;
        v16[3] = &__block_descriptor_tmp_59_0;
        v16[4] = this;
        v16[5] = a4;
        ctu::SharedSynchronizable<BasebandTransport>::execute_wrapped(v6, (uint64_t)v16);
        goto LABEL_13;
      }
      int v13 = *(void (**)(void))(v19[3] + 24);
      if (!v13) {
        goto LABEL_13;
      }
    }
    else
    {
      *((unsigned char *)v9 + 24) = 0;
      int v13 = *(void (**)(void))(v10 + 24);
      if (!v13) {
        goto LABEL_13;
      }
    }
    v13();
    goto LABEL_13;
  }
  dispatch_sync(v7, block);
  uint64_t v9 = v23;
  if (*((unsigned char *)v23 + 24)) {
    goto LABEL_5;
  }
LABEL_13:
  uint64_t v14 = *((unsigned __int8 *)v23 + 24);
  _Block_object_dispose(&v18, 8);
  _Block_object_dispose(&v22, 8);
  return v14;
}

void sub_2636D4C68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
}

void ___ZN17BasebandTransport4readEPhmPjbj_block_invoke(void *a1)
{
  uint64_t v2 = a1[6];
  *(void *)(*(void *)(a1[4] + 8) + 24) = v2 + 176;
  uint64_t v3 = *(unsigned int (**)(void))(v2 + 232);
  if (v3)
  {
    if (!v3())
    {
      *(unsigned char *)(*(void *)(a1[5] + 8) + 24) = 0;
      if (!*(unsigned char *)(v2 + 332)) {
        return;
      }
      goto LABEL_7;
    }
    LOBYTE(v3) = *(unsigned char *)(v2 + 332) == 0;
  }
  *(unsigned char *)(*(void *)(a1[5] + 8) + 24) = (_BYTE)v3;
  if (!*(unsigned char *)(v2 + 332)) {
    return;
  }
LABEL_7:
  unsigned int v4 = *(NSObject **)(v2 + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)uint64_t v5 = 0;
    _os_log_error_impl(&dword_26368A000, v4, OS_LOG_TYPE_ERROR, "Explicit reads not allowed in async mode", v5, 2u);
  }
}

uint64_t ___ZN17BasebandTransport4readEPhmPjbj_block_invoke_58(uint64_t result)
{
  *(void *)(*(void *)(result + 32) + 336) += **(unsigned int **)(result + 40);
  return result;
}

uint64_t BasebandTransport::close(BasebandTransport *this)
{
  uint64_t v10 = 0;
  int v11 = &v10;
  uint64_t v12 = 0x2000000000;
  char v13 = 1;
  *((_DWORD *)this + 72) = 0;
  uint64_t v2 = (char *)this + 72;
  v9[0] = MEMORY[0x263EF8330];
  v9[1] = 0x40000000;
  v9[2] = ___ZN17BasebandTransport5closeEv_block_invoke;
  v9[3] = &__block_descriptor_tmp_60_0;
  v9[4] = this;
  uint64_t v14 = v9;
  blocunint64_t k = MEMORY[0x263EF8330];
  uint64_t v16 = 0x40000000;
  uint64_t v17 = ___ZNK3ctu20SharedSynchronizableI17BasebandTransportE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  uint64_t v18 = &__block_descriptor_tmp_98;
  uint64_t v19 = (char *)this + 72;
  uint64_t v20 = &v14;
  unsigned int v4 = (char *)this + 88;
  uint64_t v3 = *((void *)this + 11);
  if (*((void *)v4 + 1)) {
    dispatch_async_and_wait(v3, &block);
  }
  else {
    dispatch_sync(v3, &block);
  }
  BasebandTransport::stopReader(this);
  v8[0] = MEMORY[0x263EF8330];
  v8[1] = 0x40000000;
  uint64_t v8[2] = ___ZN17BasebandTransport5closeEv_block_invoke_2;
  v8[3] = &unk_2655D4DF0;
  v8[4] = &v10;
  v8[5] = this;
  uint64_t v14 = v8;
  blocunint64_t k = MEMORY[0x263EF8330];
  uint64_t v16 = 0x40000000;
  uint64_t v17 = ___ZNK3ctu20SharedSynchronizableI17BasebandTransportE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  uint64_t v18 = &__block_descriptor_tmp_98;
  uint64_t v19 = v2;
  uint64_t v20 = &v14;
  uint64_t v5 = *((void *)this + 11);
  if (*((void *)this + 12)) {
    dispatch_async_and_wait(v5, &block);
  }
  else {
    dispatch_sync(v5, &block);
  }
  uint64_t v6 = *((unsigned __int8 *)v11 + 24);
  _Block_object_dispose(&v10, 8);
  return v6;
}

void sub_2636D4F34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void ___ZN17BasebandTransport5closeEv_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(NSObject **)(v1 + 280);
  if (v2)
  {
    dispatch_source_cancel(v2);
    dispatch_release(*(dispatch_object_t *)(v1 + 280));
    *(void *)(v1 + 280) = 0;
    uint64_t v3 = *(NSObject **)(v1 + 40);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)unsigned int v4 = 0;
      _os_log_impl(&dword_26368A000, v3, OS_LOG_TYPE_DEFAULT, "#I Status report disabled", v4, 2u);
    }
  }
}

uint64_t ___ZN17BasebandTransport5closeEv_block_invoke_2(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 40) + 80))(*(void *)(a1 + 40));
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t BasebandTransport::operator*(uint64_t a1)
{
  uint64_t v6 = 0;
  uint64_t v7 = &v6;
  uint64_t v8 = 0x2000000000;
  uint64_t v9 = 0;
  v5[0] = MEMORY[0x263EF8330];
  v5[1] = 0x40000000;
  v5[2] = ___ZN17BasebandTransportdeEv_block_invoke;
  v5[3] = &unk_2655D4E18;
  v5[4] = &v6;
  void v5[5] = a1;
  uint64_t v10 = v5;
  block[0] = MEMORY[0x263EF8330];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI17BasebandTransportE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  block[3] = &__block_descriptor_tmp_98;
  block[4] = a1 + 72;
  void block[5] = &v10;
  uint64_t v2 = a1 + 88;
  uint64_t v1 = *(NSObject **)(a1 + 88);
  if (*(void *)(v2 + 8)) {
    dispatch_async_and_wait(v1, block);
  }
  else {
    dispatch_sync(v1, block);
  }
  uint64_t v3 = v7[3];
  _Block_object_dispose(&v6, 8);
  return v3;
}

uint64_t ___ZN17BasebandTransportdeEv_block_invoke(uint64_t result)
{
  *(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(void *)(result + 40) + 176;
  return result;
}

uint64_t BasebandTransport::switchDIAG_sync(BasebandTransport *this)
{
  return 0;
}

uint64_t BasebandTransport::getIOSizeRx(BasebandTransport *this)
{
  return *((unsigned int *)this + 30);
}

uint64_t BasebandTransport::close_sync(BasebandTransport *this)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  uint64_t v2 = (unsigned int (*)(char *))*((void *)this + 29);
  if (v2 && (uint64_t v3 = (_OWORD *)((char *)this + 176), v2((char *)this + 176)))
  {
    *((_DWORD *)this + 82) = 0;
    uint64_t v4 = TelephonyUtilTransportFree();
    *uint64_t v3 = 0u;
    *((_OWORD *)this + 12) = 0u;
    *((_OWORD *)this + 13) = 0u;
    *((_OWORD *)this + 14) = 0u;
    *((_OWORD *)this + 15) = 0u;
    *((void *)this + 32) = 0;
    uint64_t v5 = *((void *)this + 5);
    if (!os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT)) {
      return v4;
    }
  }
  else
  {
    uint64_t v4 = 1;
    uint64_t v5 = *((void *)this + 5);
    if (!os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT)) {
      return v4;
    }
  }
  switch(*((_DWORD *)this + 26))
  {
    case 0:
      char v10 = 3;
      LODWORD(__p[0]) = 4997712;
      break;
    case 1:
      char v10 = 3;
      LODWORD(__p[0]) = 4997715;
      break;
    case 2:
      char v10 = 4;
      int v6 = 1195460932;
      goto LABEL_28;
    case 3:
      char v10 = 4;
      int v6 = 1397114194;
      goto LABEL_28;
    case 4:
      char v10 = 5;
      strcpy((char *)__p, "QMUX1");
      break;
    case 5:
      char v10 = 5;
      strcpy((char *)__p, "QMUX2");
      break;
    case 6:
      char v10 = 3;
      LODWORD(__p[0]) = 5066578;
      break;
    case 7:
      char v10 = 4;
      int v6 = 1414483778;
      goto LABEL_28;
    case 8:
      char v10 = 3;
      LODWORD(__p[0]) = 4805185;
      break;
    case 9:
      char v10 = 3;
      LODWORD(__p[0]) = 5526611;
      break;
    case 0xA:
      char v10 = 2;
      strcpy((char *)__p, "AT");
      break;
    case 0xB:
      char v10 = 4;
      int v6 = 1280328769;
      goto LABEL_28;
    case 0xC:
      char v10 = 8;
      strcpy((char *)__p, "MEDIACTL");
      break;
    case 0xD:
      char v10 = 3;
      LODWORD(__p[0]) = 5461061;
      break;
    case 0xE:
      char v10 = 4;
      int v6 = 1397968455;
      goto LABEL_28;
    case 0xF:
      char v10 = 4;
      int v6 = 1397965905;
      goto LABEL_28;
    case 0x10:
      char v10 = 5;
      strcpy((char *)__p, "RCTTH");
      break;
    case 0x11:
      char v10 = 3;
      LODWORD(__p[0]) = 5260097;
      break;
    case 0x12:
      char v10 = 4;
      int v6 = 1297040214;
      goto LABEL_28;
    case 0x13:
      char v10 = 4;
      int v6 = 1129335117;
LABEL_28:
      LODWORD(__p[0]) = v6;
      BYTE4(__p[0]) = 0;
      break;
    case 0x14:
      char v10 = 3;
      LODWORD(__p[0]) = 4999236;
      break;
    case 0x15:
      char v10 = 3;
      LODWORD(__p[0]) = 5789005;
      break;
    case 0x16:
      char v10 = 3;
      LODWORD(__p[0]) = 4407622;
      break;
    default:
      char v10 = 7;
      strcpy((char *)__p, "Unknown");
      break;
  }
  uint64_t v7 = "error";
  if (v4) {
    uint64_t v7 = "success";
  }
  *(_DWORD *)std::string buf = 136315394;
  uint64_t v12 = __p;
  __int16 v13 = 2080;
  uint64_t v14 = v7;
  _os_log_impl(&dword_26368A000, v5, OS_LOG_TYPE_DEFAULT, "#I Transport close %s: %s", buf, 0x16u);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  return v4;
}

uint64_t BasebandTransport::startReader_sync(NSObject **this)
{
  if (!this[37])
  {
    if (capabilities::abs::shouldUseMinBasebandTransportIOReadSize((capabilities::abs *)this)) {
      size_t v2 = 0x4000;
    }
    else {
      size_t v2 = 0x8000;
    }
    this[38] = v2;
    this[37] = operator new[](v2);
    dispatch_queue_t v3 = dispatch_queue_create("ipc.bb", 0);
    uint64_t v4 = this[39];
    this[39] = v3;
    if (v4) {
      dispatch_release(v4);
    }
  }
  *((unsigned char *)this + 292) = 1;
  *((unsigned char *)this + 332) = 1;
  BasebandTransport::queueRead_sync((BasebandTransport *)this);
  return *((unsigned __int8 *)this + 292);
}

void BasebandTransport::queueRead_sync(BasebandTransport *this)
{
  size_t v2 = (std::__shared_weak_count *)*((void *)this + 10);
  if (!v2 || (uint64_t v3 = *((void *)this + 9), (v4 = std::__shared_weak_count::lock(v2)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v5 = v4;
  int v6 = *((void *)this + 40);
  if (v6)
  {
    dispatch_retain(*((dispatch_object_t *)this + 40));
    dispatch_group_enter(v6);
  }
  v8[0] = MEMORY[0x263EF8330];
  v8[1] = 1174405120;
  uint64_t v8[2] = ___ZN17BasebandTransport14queueRead_syncEv_block_invoke;
  v8[3] = &__block_descriptor_tmp_67;
  v8[4] = this;
  v8[5] = v3;
  uint64_t v9 = v5;
  atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  dispatch_group_t group = v6;
  if (v6)
  {
    dispatch_retain(v6);
    dispatch_group_enter(group);
  }
  dispatch_async(*((dispatch_queue_t *)this + 39), v8);
  if (group)
  {
    dispatch_group_leave(group);
    if (group) {
      dispatch_release(group);
    }
  }
  uint64_t v7 = v9;
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  if (v6)
  {
    dispatch_group_leave(v6);
    dispatch_release(v6);
  }
  if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

uint64_t ___ZN17BasebandTransport10stopReaderEv_block_invoke(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 40);
  *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(unsigned char *)(v1 + 292);
  *(unsigned char *)(v1 + 292) = 0;
  *(unsigned char *)(v1 + 332) = 0;
  return result;
}

uint64_t ___ZN17BasebandTransport10stopReaderEv_block_invoke_2(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 40);
  size_t v2 = *(uint64_t (**)(uint64_t))(v1 + 232);
  if (v2)
  {
    uint64_t v3 = result;
    uint64_t result = v2(v1 + 176);
    if (result)
    {
      if (*(unsigned char *)(*(void *)(*(void *)(v3 + 32) + 8) + 24))
      {
        uint64_t v4 = *(uint64_t (**)(uint64_t))(v1 + 192);
        if (v4)
        {
          return v4(v1 + 176);
        }
      }
    }
  }
  return result;
}

void ___ZN17BasebandTransport14queueRead_syncEv_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  size_t v2 = *(NSObject **)(a1 + 56);
  uint64_t v3 = v2;
  if (v2)
  {
    dispatch_retain(v2);
    dispatch_group_enter(v2);
  }
  BasebandTransport::read_sync(v1, &v3);
  if (v2)
  {
    dispatch_group_leave(v2);
    dispatch_release(v2);
  }
}

void sub_2636D58A4(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    dispatch_group_leave(v1);
    dispatch_release(v1);
  }
  _Unwind_Resume(exception_object);
}

void BasebandTransport::read_sync(uint64_t a1, NSObject **a2)
{
  uint64_t v6 = *(void *)(a1 + 72);
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 80);
  uint64_t v5 = (uint64_t *)(a1 + 72);
  uint64_t v28 = v6;
  if (!v4
    || (uint64_t v8 = (capabilities::abs *)std::__shared_weak_count::lock(v4), (v29 = (std::__shared_weak_count *)v8) == 0))
  {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  int v27 = 0;
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, int *, void, uint64_t, void))(a1 + 184);
  if (v9)
  {
    char v10 = v8;
    uint64_t v11 = *(void *)(a1 + 296);
    uint64_t v12 = capabilities::abs::shouldUseMinBasebandTransportIOReadSize(v8) ? 0x4000 : 0x8000;
    int v13 = v9(a1 + 176, v11, v12, &v27, 0, 0xFFFFFFFFLL, 0);
    int v14 = v27 ? v13 : 0;
    if (v14 == 1)
    {
      v25[0] = MEMORY[0x263EF8330];
      v25[1] = 0x40000000;
      v25[2] = ___ZN17BasebandTransport9read_syncEN8dispatch13group_sessionE_block_invoke;
      v25[3] = &__block_descriptor_tmp_68;
      v25[4] = a1;
      int v26 = v27;
      ctu::SharedSynchronizable<BasebandTransport>::execute_wrapped(v5, (uint64_t)v25);
      block[0] = MEMORY[0x263EF8330];
      block[1] = 1174405120;
      block[2] = ___ZN17BasebandTransport9read_syncEN8dispatch13group_sessionE_block_invoke_2;
      block[3] = &__block_descriptor_tmp_71;
      block[4] = a1;
      void block[5] = v6;
      uint64_t v22 = (std::__shared_weak_count *)v10;
      atomic_fetch_add_explicit((atomic_ullong *volatile)v10 + 1, 1uLL, memory_order_relaxed);
      uint64_t v15 = *a2;
      dispatch_group_t group = v15;
      if (v15)
      {
        dispatch_retain(v15);
        dispatch_group_enter(group);
      }
      int v24 = v27;
      dispatch_sync(*(dispatch_queue_t *)(a1 + 152), block);
      if (group)
      {
        dispatch_group_leave(group);
        if (group) {
          dispatch_release(group);
        }
      }
      uint64_t v16 = v22;
      if (v22 && !atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
  }
  v19[0] = MEMORY[0x263EF8330];
  v19[1] = 1174405120;
  v19[2] = ___ZN17BasebandTransport9read_syncEN8dispatch13group_sessionE_block_invoke_72;
  v19[3] = &__block_descriptor_tmp_73_0;
  void v19[4] = a1;
  void v19[5] = v28;
  uint64_t v20 = v29;
  if (v29) {
    atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  ctu::SharedSynchronizable<BasebandTransport>::execute_wrapped(v5, (uint64_t)v19);
  uint64_t v17 = v20;
  if (v20 && !atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  uint64_t v18 = v29;
  if (v29)
  {
    if (!atomic_fetch_add(&v29->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
}

void sub_2636D5BC4(_Unwind_Exception *a1)
{
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100](v1 - 96);
  _Unwind_Resume(a1);
}

void __copy_helper_block_e8_40c45_ZTSNSt3__110shared_ptrI17BasebandTransportEE56c30_ZTSN8dispatch13group_sessionE(void *a1, void *a2)
{
  uint64_t v3 = a2[6];
  a1[5] = a2[5];
  a1[6] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = a2[7];
  a1[7] = v4;
  if (v4)
  {
    dispatch_retain(v4);
    uint64_t v5 = a1[7];
    if (v5)
    {
      dispatch_group_enter(v5);
    }
  }
}

void __destroy_helper_block_e8_40c45_ZTSNSt3__110shared_ptrI17BasebandTransportEE56c30_ZTSN8dispatch13group_sessionE(uint64_t a1)
{
  size_t v2 = *(NSObject **)(a1 + 56);
  if (v2)
  {
    dispatch_group_leave(v2);
    uint64_t v3 = *(NSObject **)(a1 + 56);
    if (v3) {
      dispatch_release(v3);
    }
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 48);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
}

uint64_t ___ZN17BasebandTransport9read_syncEN8dispatch13group_sessionE_block_invoke(uint64_t result)
{
  *(void *)(*(void *)(result + 32) + 336) += *(unsigned int *)(result + 40);
  return result;
}

void ___ZN17BasebandTransport9read_syncEN8dispatch13group_sessionE_block_invoke_2(uint64_t a1)
{
  size_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = v2[16];
  if (v3)
  {
    tm __p = 0;
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    (*(void (**)(uint64_t, void, void, void **))(*(void *)v3 + 8))(v3, v2[37], *(unsigned int *)(a1 + 64), &__p);
    (*(void (**)(void))(v2[18] + 16))();
    if (__p)
    {
      uint64_t v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    uint64_t v4 = *(void (**)(void))(v2[18] + 16);
    v4();
  }
}

void sub_2636D5DC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BasebandTransport *___ZN17BasebandTransport9read_syncEN8dispatch13group_sessionE_block_invoke_72(uint64_t a1)
{
  uint64_t result = *(BasebandTransport **)(a1 + 32);
  if (*((unsigned char *)result + 292)) {
    return (BasebandTransport *)BasebandTransport::queueRead_sync(result);
  }
  return result;
}

uint64_t __copy_helper_block_e8_40c45_ZTSNSt3__110shared_ptrI17BasebandTransportEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c45_ZTSNSt3__110shared_ptrI17BasebandTransportEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void ___ZN17BasebandTransport12timerOn_syncEv_block_invoke(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (!v2) {
    return;
  }
  uint64_t v3 = a1[4];
  uint64_t v4 = std::__shared_weak_count::lock(v2);
  if (!v4) {
    return;
  }
  uint64_t v5 = v4;
  uint64_t v6 = a1[5];
  if (!v6) {
    goto LABEL_14;
  }
  uint64_t v7 = (int *)(v3 + 328);
  uint64_t v8 = *(void *)(v3 + 336);
  uint64_t v9 = *(void *)(v3 + 376);
  uint64_t v10 = *(void *)(v3 + 344) - *(void *)(v3 + 384);
  *(void *)(v3 + 352) = v8 - v9;
  *(void *)(v3 + 360) = v10;
  if (v10) {
    BOOL v11 = 0;
  }
  else {
    BOOL v11 = v8 == v9;
  }
  if (v11)
  {
    int v12 = 3;
  }
  else
  {
    if (*v7 != 3) {
      goto LABEL_12;
    }
    int v12 = 1;
  }
  int *v7 = v12;
LABEL_12:
  long long v13 = *(_OWORD *)(v3 + 344);
  *(_OWORD *)(v3 + 368) = *(_OWORD *)v7;
  *(_OWORD *)(v3 + 384) = v13;
  *(void *)(v3 + 400) = *(void *)(v3 + 360);
  block[0] = MEMORY[0x263EF8330];
  block[1] = 1174405120;
  block[2] = ___ZN17BasebandTransport12timerOn_syncEv_block_invoke_2;
  block[3] = &__block_descriptor_tmp_76;
  block[4] = v3;
  void block[5] = v6;
  uint64_t v16 = v4;
  atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  dispatch_async(*(dispatch_queue_t *)(v3 + 152), block);
  int v14 = v16;
  if (!v16 || atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
LABEL_14:
    if (atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
      return;
    }
LABEL_17:
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    return;
  }
  ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
  std::__shared_weak_count::__release_weak(v14);
  if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_17;
  }
}

uint64_t ___ZN17BasebandTransport12timerOn_syncEv_block_invoke_2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v6 = *(void *)(v5 + 272);
  uint64_t v10 = *(void *)(v5 + 400);
  long long v7 = *(_OWORD *)(v5 + 384);
  v9[0] = *(_OWORD *)(v5 + 368);
  v9[1] = v7;
  return (*(uint64_t (**)(uint64_t, _OWORD *, uint64_t, uint64_t, uint64_t))(v6 + 16))(v6, v9, a3, a4, a5);
}

__n128 BasebandTransport::getStatus@<Q0>(BasebandTransport *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 32) = *((void *)this + 45);
  __n128 result = *(__n128 *)((char *)this + 328);
  long long v3 = *(_OWORD *)((char *)this + 344);
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v3;
  return result;
}

void ___ZN17BasebandTransport9dumpStateEb_block_invoke(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 32);
  *(int64x2_t *)(v2 + 352) = vsubq_s64(*(int64x2_t *)(v2 + 336), *(int64x2_t *)(v2 + 376));
  long long v3 = *(NSObject **)(v2 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    BasebandTransport::Parameters::toString((BasebandTransport::Parameters *)(v2 + 104), __p);
    if (v7 >= 0) {
      uint64_t v4 = __p;
    }
    else {
      uint64_t v4 = (void **)__p[0];
    }
    *(_DWORD *)std::string buf = 136315138;
    uint64_t v9 = v4;
    _os_log_impl(&dword_26368A000, v3, OS_LOG_TYPE_DEFAULT, "#I %s", buf, 0xCu);
    if (v7 < 0) {
      operator delete(__p[0]);
    }
    long long v3 = *(NSObject **)(v2 + 40);
  }
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT)
    && ((BasebandTransport::Status::toString((BasebandTransport::Status *)(v2 + 328), __p), v7 >= 0)
      ? (uint64_t v5 = __p)
      : (uint64_t v5 = (void **)__p[0]),
        *(_DWORD *)std::string buf = 136315138,
        uint64_t v9 = v5,
        _os_log_impl(&dword_26368A000, v3, OS_LOG_TYPE_DEFAULT, "#I %s", buf, 0xCu),
        v7 < 0))
  {
    operator delete(__p[0]);
    if (!*(unsigned char *)(a1 + 40)) {
      return;
    }
  }
  else if (!*(unsigned char *)(a1 + 40))
  {
    return;
  }
  *(_DWORD *)(v2 + 328) = 0;
  *(unsigned char *)(v2 + 332) = 0;
  *(_OWORD *)(v2 + 376) = 0u;
  *(_OWORD *)(v2 + 392) = 0u;
  *(_OWORD *)(v2 + 336) = 0u;
  *(_OWORD *)(v2 + 352) = 0u;
  *(void *)(v2 + 365) = 0;
  BasebandTransport::timerOn_sync((BasebandTransport *)v2);
}

void BasebandTransport::reportStatus(uint64_t a1, int a2, void **a3)
{
  v7[0] = MEMORY[0x263EF8330];
  v7[1] = 1174405120;
  _DWORD v7[2] = ___ZN17BasebandTransport12reportStatusEjN8dispatch5blockIU13block_pointerFvNS_6StatusEEEE_block_invoke;
  v7[3] = &__block_descriptor_tmp_81;
  v7[4] = a1;
  int v9 = a2;
  uint64_t v4 = *a3;
  if (*a3) {
    uint64_t v4 = _Block_copy(v4);
  }
  aBlocunint64_t k = v4;
  uint64_t v10 = v7;
  block[0] = MEMORY[0x263EF8330];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI17BasebandTransportE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  block[3] = &__block_descriptor_tmp_98;
  block[4] = a1 + 72;
  void block[5] = &v10;
  uint64_t v5 = *(NSObject **)(a1 + 88);
  if (!*(void *)(a1 + 96))
  {
    dispatch_sync(v5, block);
    uint64_t v6 = aBlock;
    if (!aBlock) {
      return;
    }
    goto LABEL_7;
  }
  dispatch_async_and_wait(v5, block);
  uint64_t v6 = aBlock;
  if (aBlock) {
LABEL_7:
  }
    _Block_release(v6);
}

void ___ZN17BasebandTransport12reportStatusEjN8dispatch5blockIU13block_pointerFvNS_6StatusEEEE_block_invoke(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 48);
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v2 = *(void **)(a1 + 40);
  *(_DWORD *)(v3 + 288) = v1;
  if (v2) {
    uint64_t v2 = _Block_copy(v2);
  }
  uint64_t v4 = *(const void **)(v3 + 272);
  *(void *)(v3 + 272) = v2;
  if (v4) {
    _Block_release(v4);
  }

  BasebandTransport::timerOn_sync((BasebandTransport *)v3);
}

void *__copy_helper_block_e8_40c70_ZTSN8dispatch5blockIU13block_pointerFvN17BasebandTransport6StatusEEEE(uint64_t a1, uint64_t a2)
{
  __n128 result = *(void **)(a2 + 40);
  if (result) {
    __n128 result = _Block_copy(result);
  }
  *(void *)(a1 + 40) = result;
  return result;
}

void __destroy_helper_block_e8_40c70_ZTSN8dispatch5blockIU13block_pointerFvN17BasebandTransport6StatusEEEE(uint64_t a1)
{
  int v1 = *(const void **)(a1 + 40);
  if (v1) {
    _Block_release(v1);
  }
}

uint64_t ctu::Loggable<BasebandTransport,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig(uint64_t a1)
{
  return MEMORY[0x270F97428](a1 + 8);
}

double ctu::Loggable<BasebandTransport,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName@<D0>(uint64_t a1@<X8>)
{
  *(void *)(a1 + 16) = 0x600000000000000;
  double result = *(double *)"ipc.bb";
  *(_OWORD *)a1 = *(_OWORD *)"ipc.bb";
  return result;
}

uint64_t ctu::Loggable<BasebandTransport,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return MEMORY[0x270F978E0](a1 + 8);
}

void *ctu::Loggable<BasebandTransport,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_270EA73D8;
  MEMORY[0x263E68AF0](a1 + 1);
  return a1;
}

void ctu::Loggable<BasebandTransport,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_270EA73D8;
  MEMORY[0x263E68AF0](a1 + 1);

  operator delete(a1);
}

void ___ZL14sLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke(uint64_t a1)
{
  char v9 = 18;
  strcpy(__p, "baseband.transport");
  ctu::LogServer::create();
  uint64_t v2 = *(void *)(a1 + 32);
  long long v3 = v10;
  long long v10 = 0uLL;
  uint64_t v4 = *(std::__shared_weak_count **)(v2 + 8);
  *(_OWORD *)uint64_t v2 = v3;
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  if (*((void *)&v10 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v10 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    (*(void (**)(void))(**((void **)&v10 + 1) + 16))(*((void *)&v10 + 1));
    std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v10 + 1));
    if ((v9 & 0x80000000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  if (v9 < 0) {
LABEL_7:
  }
    operator delete(*(void **)__p);
LABEL_8:
  uint64_t v5 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v5->~__shared_weak_size_t count = (void (__cdecl *)(std::__shared_weak_count *__hidden))&unk_270EA7418;
  *(void *)tm __p = v5;
  uint64_t v6 = (std::__shared_weak_count *)operator new(0x20uLL);
  v6->__shared_owners_ = 0;
  v6->__vftable = (std::__shared_weak_count_vtbl *)&unk_270EA7480;
  v6->__shared_weak_owners_ = 0;
  v6[1].__vftable = v5;
  *(void *)&__p[8] = v6;
  char v7 = v6;
  atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  ctu::LogServer::addWriter();
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  ctu::LogServer::start(**(ctu::LogServer ***)(a1 + 32));
  ctu::LogServer::setEnabled(**(ctu::LogServer ***)(a1 + 32));
  if (*(void *)&__p[8])
  {
    if (!atomic_fetch_add((atomic_ullong *volatile)(*(void *)&__p[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      (*(void (**)(void))(**(void **)&__p[8] + 16))(*(void *)&__p[8]);
      std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&__p[8]);
    }
  }
}

void sub_2636D6714(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

void sub_2636D6730(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  operator delete(v16);
  _Unwind_Resume(a1);
}

void sub_2636D6758(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<EmptyLogWriter *,std::shared_ptr<ctu::LogWriter>::__shared_ptr_default_delete<ctu::LogWriter,EmptyLogWriter>,std::allocator<EmptyLogWriter>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t std::__shared_ptr_pointer<EmptyLogWriter *,std::shared_ptr<ctu::LogWriter>::__shared_ptr_default_delete<ctu::LogWriter,EmptyLogWriter>,std::allocator<EmptyLogWriter>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<EmptyLogWriter *,std::shared_ptr<ctu::LogWriter>::__shared_ptr_default_delete<ctu::LogWriter,EmptyLogWriter>,std::allocator<EmptyLogWriter>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x80000002637A6B1FLL) {
    return a1 + 24;
  }
  if (((v3 & 0x80000002637A6B1FLL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000002637A6B1FLL)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000002637A6B1FLL & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 24;
  }
  return 0;
}

void ctu::SharedLoggable<BasebandTransport,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(void *a1)
{
  *a1 = &unk_270EA73D8;
  MEMORY[0x263E68AF0](a1 + 1);
  uint64_t v2 = a1[12];
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = a1[11];
  if (v3) {
    dispatch_release(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[10];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }

  operator delete(a1);
}

void std::__shared_ptr_pointer<BasebandTransport *,std::shared_ptr<BasebandTransport> ctu::SharedSynchronizable<BasebandTransport>::make_shared_ptr<BasebandTransport>(BasebandTransport*)::{lambda(BasebandTransport *)#1},std::allocator<BasebandTransport>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<BasebandTransport *,std::shared_ptr<BasebandTransport> ctu::SharedSynchronizable<BasebandTransport>::make_shared_ptr<BasebandTransport>(BasebandTransport*)::{lambda(BasebandTransport *)#1},std::allocator<BasebandTransport>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<BasebandTransport *,std::shared_ptr<BasebandTransport> ctu::SharedSynchronizable<BasebandTransport>::make_shared_ptr<BasebandTransport>(BasebandTransport*)::{lambda(BasebandTransport *)#1},std::allocator<BasebandTransport>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableI17BasebandTransportE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_") {
    return a1 + 24;
  }
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableI17BasebandTransportE15make_shared_ptrIS1_EENSt3__110shared_"
                                "ptrIT_EEPS6_EUlPS1_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableI17BasebandTransportE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableI17BasebandTransportE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24; {
  return 0;
  }
}

uint64_t std::shared_ptr<BasebandTransport> ctu::SharedSynchronizable<BasebandTransport>::make_shared_ptr<BasebandTransport>(BasebandTransport*)::{lambda(BasebandTransport*)#1}::operator() const(BasebandTransport*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void _ZZN8dispatch5asyncIZZZN17BasebandTransport4initEvEUb_EUb0_E3__0EEvP16dispatch_queue_sNSt3__110unique_ptrIT_NS5_14default_deleteIS7_EEEEENUlPvE_8__invokeESB_(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = *(void (***)(const void *, _OWORD *, uint64_t, uint64_t, uint64_t))a1;
  long long v7 = *(_OWORD *)(a1 + 24);
  uint64_t v9 = *(void *)(a1 + 40);
  v8[0] = *(_OWORD *)(a1 + 8);
  v8[1] = v7;
  v6[2](v6, v8, a3, a4, a5);
  if (*(void *)a1) {
    _Block_release(*(const void **)a1);
  }
  operator delete((void *)a1);
}

void sub_2636D6A8C(_Unwind_Exception *a1)
{
  if (*v1) {
    _Block_release(*v1);
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void _ZZN8dispatch5asyncIZZZN17BasebandTransport4initEvEUb_EUb1_E3__1EEvP16dispatch_queue_sNSt3__110unique_ptrIT_NS5_14default_deleteIS7_EEEEENUlPvE_8__invokeESB_(const void **a1)
{
  (*((void (**)(void))*a1 + 2))();
  uint64_t v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  if (*a1) {
    _Block_release(*a1);
  }

  operator delete(a1);
}

void sub_2636D6B1C(_Unwind_Exception *a1)
{
  unint64_t v3 = *(void **)(v1 + 8);
  if (v3)
  {
    *(void *)(v1 + 16) = v3;
    operator delete(v3);
  }
  if (*(void *)v1) {
    _Block_release(*(const void **)v1);
  }
  operator delete((void *)v1);
  _Unwind_Resume(a1);
}

void _ZZN8dispatch5asyncIZZZN17BasebandTransport4initEvEUb_EUb1_E3__2EEvP16dispatch_queue_sNSt3__110unique_ptrIT_NS5_14default_deleteIS7_EEEEENUlPvE_8__invokeESB_(void **a1)
{
  (*((void (**)(void))*a1 + 2))();
  if (!*((unsigned char *)a1 + 20))
  {
    free(a1[1]);
    uint64_t v2 = *a1;
    if (!*a1) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  uint64_t v2 = *a1;
  if (*a1) {
LABEL_5:
  }
    _Block_release(v2);
LABEL_6:

  operator delete(a1);
}

void sub_2636D6BC4(_Unwind_Exception *a1)
{
  if (*v1) {
    _Block_release(*v1);
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *___ZNK3ctu20SharedSynchronizableI17BasebandTransportE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke(uint64_t a1)
{
  return (*(void *(**)(void *__return_ptr))(**(void **)(a1 + 40) + 16))(*(void **)(a1 + 40));
}

void ctu::SharedSynchronizable<BasebandTransport>::execute_wrapped(uint64_t *a1, uint64_t a2)
{
  unint64_t v3 = (std::__shared_weak_count *)a1[1];
  if (!v3 || (uint64_t v5 = *a1, (v6 = std::__shared_weak_count::lock(v3)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  long long v7 = v6;
  uint64_t v8 = a1[2];
  block[0] = MEMORY[0x263EF8330];
  block[1] = 1174405120;
  block[2] = ___ZNK3ctu20SharedSynchronizableI17BasebandTransportE15execute_wrappedEU13block_pointerFvvE_block_invoke;
  block[3] = &unk_270EA7558;
  void block[5] = v5;
  int v12 = v7;
  p_shared_owners = &v7->__shared_owners_;
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  block[4] = a2;
  dispatch_async(v8, block);
  long long v10 = v12;
  if (!v12 || atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      return;
    }
LABEL_8:
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    return;
  }
  ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
  std::__shared_weak_count::__release_weak(v10);
  if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_8;
  }
}

uint64_t ___ZNK3ctu20SharedSynchronizableI17BasebandTransportE15execute_wrappedEU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t __copy_helper_block_e8_40c46_ZTSNSt3__110shared_ptrIK17BasebandTransportEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c46_ZTSNSt3__110shared_ptrIK17BasebandTransportEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void RadioModule::create(uint64_t *a1@<X0>, void *a2@<X8>)
{
  *a2 = 0xAAAAAAAAAAAAAAAALL;
  a2[1] = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v4 = operator new(0x168uLL);
  uint64_t v5 = (std::__shared_weak_count *)a1[1];
  uint64_t v26 = *a1;
  int v27 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  uint64_t v7 = off_26A99F170;
  if (!off_26A99F170)
  {
    CommandDriverFactory::create_default_global((uint64_t *)&v28, v6);
    long long v8 = v28;
    long long v28 = 0uLL;
    uint64_t v9 = (std::__shared_weak_count *)*(&off_26A99F170 + 1);
    off_26A99F170 = v8;
    if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
    long long v10 = (std::__shared_weak_count *)*((void *)&v28 + 1);
    if (*((void *)&v28 + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v28 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
    uint64_t v7 = off_26A99F170;
  }
  BOOL v11 = (std::__shared_weak_count *)*(&off_26A99F170 + 1);
  if (*(&off_26A99F170 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_26A99F170 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(dispatch_object_t *__return_ptr, uint64_t))(*(void *)v7 + 24))(&object, v7);
  RadioModule::RadioModule((uint64_t)v4, &v26, &object);
  *a2 = v4;
  a2[1] = 0xAAAAAAAAAAAAAAAALL;
  int v12 = (std::__shared_weak_count *)operator new(0x20uLL);
  v12->__shared_owners_ = 0;
  p_shared_owners = &v12->__shared_owners_;
  v12->__vftable = (std::__shared_weak_count_vtbl *)&unk_270EA8158;
  v12->__shared_weak_owners_ = 0;
  v12[1].__vftable = (std::__shared_weak_count_vtbl *)v4;
  a2[1] = v12;
  int v14 = (std::__shared_weak_count *)*((void *)v4 + 16);
  if (v14)
  {
    if (v14->__shared_owners_ == -1)
    {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v12->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      *((void *)v4 + 15) = v4;
      *((void *)v4 + 16) = v12;
      std::__shared_weak_count::__release_weak(v14);
      if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL))
      {
LABEL_16:
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
        uint64_t v15 = (void *)*a2;
        if (!*(void *)(*a2 + 104)) {
          goto LABEL_30;
        }
        goto LABEL_20;
      }
    }
  }
  else
  {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v12->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    *((void *)v4 + 15) = v4;
    *((void *)v4 + 16) = v12;
    if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_16;
    }
  }
  uint64_t v15 = (void *)*a2;
  if (!*(void *)(*a2 + 104)) {
    goto LABEL_30;
  }
LABEL_20:
  uint64_t v16 = (std::__shared_weak_count *)v15[16];
  if (!v16 || (uint64_t v17 = v15[15], (v18 = std::__shared_weak_count::lock(v16)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v19 = v18;
  *(void *)&long long v28 = v17;
  *((void *)&v28 + 1) = v18;
  ctu::LoggerCommonBase::getLogDomain((ctu::LoggerCommonBase *)(v15 + 7));
  uint64_t v20 = v17 + 48;
  if (!v17) {
    uint64_t v20 = 0;
  }
  uint64_t v32 = v20;
  uint64_t v33 = v19;
  long long v28 = 0uLL;
  ctu::TrackedLogger::registerLoggerToServer();
  uint64_t v21 = v33;
  if (v33 && !atomic_fetch_add(&v33->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v21);
  }
  uint64_t v22 = (std::__shared_weak_count *)*((void *)&v28 + 1);
  if (*((void *)&v28 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v28 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
  }
LABEL_30:
  if (object) {
    dispatch_release(object);
  }
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  if (v27) {
    std::__shared_weak_count::__release_weak(v27);
  }
  uint64_t v23 = *a2;
  int v24 = (uint64_t *)(*a2 + 120);
  *(void *)&long long v28 = MEMORY[0x263EF8330];
  *((void *)&v28 + 1) = 0x40000000;
  long long v29 = ___ZN11RadioModule4initEv_block_invoke;
  char v30 = &__block_descriptor_tmp_5;
  uint64_t v31 = v23;
  ctu::SharedSynchronizable<RadioModule>::execute_wrapped(v24, (uint64_t)&v28);
}

void sub_2636D7218(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, dispatch_object_t object, uint64_t a13, uint64_t a14, char a15)
{
}

void sub_2636D7280()
{
}

void sub_2636D7290()
{
}

void sub_2636D729C()
{
}

void sub_2636D72AC()
{
}

void RadioModule::init(RadioModule *this)
{
  v1[0] = MEMORY[0x263EF8330];
  v1[1] = 0x40000000;
  v1[2] = ___ZN11RadioModule4initEv_block_invoke;
  v1[3] = &__block_descriptor_tmp_5;
  v1[4] = this;
  ctu::SharedSynchronizable<RadioModule>::execute_wrapped((uint64_t *)this + 15, (uint64_t)v1);
}

uint64_t RadioModule::RadioModule(uint64_t a1, uint64_t *a2, NSObject **a3)
{
  uint64_t v5 = *a2;
  uint64_t v6 = (std::__shared_weak_count *)a2[1];
  if (v6)
  {
    atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  *(void *)a1 = &unk_270EAD770;
  *(void *)(a1 + 8) = v5;
  *(void *)(a1 + 16) = v6;
  if (v6)
  {
    atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    *(void *)(a1 + 24) = 0;
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = 0;
    std::__shared_weak_count::__release_weak(v6);
    *(void *)a1 = &unk_270EA6BA0;
    std::__shared_weak_count::__release_weak(v6);
  }
  else
  {
    *(void *)(a1 + 24) = 0;
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = 0;
    *(void *)a1 = &unk_270EA6BA0;
  }
  *(void *)a1 = &unk_270EA7598;
  *(void *)(a1 + 48) = &unk_270EA7608;
  uint64_t v7 = *a3;
  if (v7)
  {
    dispatch_retain(v7);
    long long v8 = *(uint64_t (***)(void))a1;
  }
  else
  {
    long long v8 = (uint64_t (**)(void))&unk_270EA7598;
  }
  uint64_t v9 = (const char *)v8[2](a1);
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v32, "com.apple.telephony.abm", v9);
  GetABMLogServer(&v30);
  if (v7) {
    dispatch_retain(v7);
  }
  initially_inactive = dispatch_queue_attr_make_initially_inactive(0);
  BOOL v11 = dispatch_queue_create_with_target_V2("radio.mod", initially_inactive, v7);
  dispatch_set_qos_class_floor(v11, QOS_CLASS_DEFAULT, 0);
  dispatch_activate(v11);
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = v11;
  if (v11) {
    dispatch_retain(v11);
  }
  *(void *)(a1 + 144) = v7;
  if (v7) {
    dispatch_retain(v7);
  }
  if (v11) {
    dispatch_release(v11);
  }
  if (v7) {
    dispatch_release(v7);
  }
  *(void *)(a1 + 48) = &unk_270EA8118;
  ctu::OsLogContext::OsLogContext();
  ctu::OsLogContext::OsLogContext();
  ctu::LoggerCommonBase::LoggerCommonBase();
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&v34);
  *(void *)(a1 + 56) = &unk_270EA5428;
  int v12 = v31;
  *(void *)(a1 + 104) = v30;
  *(void *)(a1 + 112) = v12;
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v33);
  *(void *)(a1 + 48) = &unk_270EA81A8;
  long long v13 = v31;
  if (v31 && !atomic_fetch_add(&v31->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v32);
  if (v7) {
    dispatch_release(v7);
  }
  *(void *)a1 = &unk_270EA7598;
  *(void *)(a1 + 175) = 0;
  *(void *)(a1 + 48) = &unk_270EA7608;
  *(unsigned char *)(a1 + 152) = 0;
  *(void *)(a1 + 183) = 0;
  *(_WORD *)(a1 + 191) = 768;
  radio::RFCalibration_t::RFCalibration_t((radio::RFCalibration_t *)(a1 + 200));
  int v14 = (void **)(a1 + 248);
  *(void *)(a1 + 248) = xpc_null_create();
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(unsigned char *)(a1 + 288) = 1;
  *(unsigned char *)(a1 + 296) = 0;
  GetABMLogServer(&v28);
  pthread_mutex_lock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
  uint64_t v15 = off_26A99F030;
  if (!off_26A99F030)
  {
    ABMServer::create_default_global(&v34);
    long long v16 = v34;
    long long v34 = 0uLL;
    uint64_t v17 = (std::__shared_weak_count *)*(&off_26A99F030 + 1);
    off_26A99F030 = v16;
    if (v17 && !atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
    uint64_t v18 = (std::__shared_weak_count *)*((void *)&v34 + 1);
    if (*((void *)&v34 + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v34 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
    uint64_t v15 = off_26A99F030;
  }
  uint64_t v19 = (std::__shared_weak_count *)*(&off_26A99F030 + 1);
  v33[0] = v15;
  v33[1] = *(&off_26A99F030 + 1);
  if (*(&off_26A99F030 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_26A99F030 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
  ctu::iokit::Controller::create();
  if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
  uint64_t v20 = v29;
  if (v29 && !atomic_fetch_add(&v29->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
  *(_WORD *)(a1 + 320) = 0;
  *(unsigned char *)(a1 + 322) = 0;
  *(void *)(a1 + 328) = a1 + 328;
  *(void *)(a1 + 336) = a1 + 328;
  *(void *)(a1 + 288) = 0;
  *(void *)(a1 + 344) = 0;
  *(void *)(a1 + 352) = 0;
  xpc_object_t v21 = xpc_dictionary_create(0, 0, 0);
  if (v21 || (xpc_object_t v21 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x263E6A240](v21) == MEMORY[0x263EF8708])
    {
      xpc_retain(v21);
      xpc_object_t v22 = v21;
    }
    else
    {
      xpc_object_t v22 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v22 = xpc_null_create();
    xpc_object_t v21 = 0;
  }
  xpc_release(v21);
  xpc_object_t v23 = xpc_null_create();
  int v24 = *v14;
  *int v14 = v22;
  xpc_release(v24);
  xpc_release(v23);
  uint64_t Controller = TelephonyBasebandCreateController();
  uint64_t v26 = *(const void **)(a1 + 352);
  *(void *)(a1 + 352) = Controller;
  if (v26) {
    CFRelease(v26);
  }
  return a1;
}

void sub_2636D7934(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pthread_mutex_unlock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)(v9 + 34));
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)(v9 + 32));
  xpc::dict::~dict(v11);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)(v9 + 22));
  if (*v12 < 0) {
    operator delete(v9[19]);
  }
  ctu::SharedLoggable<RadioModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(v10);
  Service::~Service((Service *)v9);
  _Unwind_Resume(a1);
}

void sub_2636D79FC()
{
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100](v0 + 176);
  if ((*v1 & 0x80000000) == 0) {
    JUMPOUT(0x2636D79E0);
  }
  JUMPOUT(0x2636D79D8);
}

void sub_2636D7A14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va3, a3);
  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v10 = va_arg(va2, void);
  uint64_t v12 = va_arg(va2, void);
  va_copy(va3, va2);
  uint64_t v13 = va_arg(va3, void);
  uint64_t v15 = va_arg(va3, void);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)va3);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)va2);
  ctu::SharedSynchronizable<data::TransportService::State>::~SharedSynchronizable(v5);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)va1);
  if (v4) {
    dispatch_release(v4);
  }
  Service::~Service(v3);
  _Unwind_Resume(a1);
}

void xpc::dict::~dict(xpc_object_t *this)
{
  *this = 0;
}

const void **ctu::cf::CFSharedRef<__TelephonyBasebandControllerHandle_tag>::~CFSharedRef(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

uint64_t *std::list<boost::signals2::connection>::~list(uint64_t *a1)
{
  if (a1[2])
  {
    uint64_t v2 = *a1;
    unint64_t v3 = (uint64_t *)a1[1];
    uint64_t v4 = *v3;
    *(void *)(v4 + 8) = *(void *)(*a1 + 8);
    **(void **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        uint64_t v5 = (uint64_t *)v3[1];
        uint64_t v6 = (atomic_uint *)v3[3];
        if (v6 && atomic_fetch_add(v6 + 3, 0xFFFFFFFF) == 1) {
          (*(void (**)(atomic_uint *))(*(void *)v6 + 24))(v6);
        }
        operator delete(v3);
        unint64_t v3 = v5;
      }
      while (v5 != a1);
    }
  }
  return a1;
}

void *ctu::SharedLoggable<RadioModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(void *a1)
{
  *a1 = &unk_270EA8118;
  MEMORY[0x263E68AF0](a1 + 1);
  uint64_t v2 = a1[12];
  if (v2) {
    dispatch_release(v2);
  }
  unint64_t v3 = a1[11];
  if (v3) {
    dispatch_release(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[10];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = &unk_270EA8118;
  MEMORY[0x263E68AF0](a1 + 1);
  uint64_t v2 = a1[12];
  if (v2) {
    dispatch_release(v2);
  }
  unint64_t v3 = a1[11];
  if (v3) {
    dispatch_release(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[10];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

void RadioModule::~RadioModule(RadioModule *this)
{
  *(void *)this = &unk_270EA7598;
  *((void *)this + 6) = &unk_270EA7608;
  uint64_t v2 = *((void *)this + 11);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v20 = 0;
    _os_log_impl(&dword_26368A000, v2, OS_LOG_TYPE_DEFAULT, "#I Gone!", v20, 2u);
  }
  unint64_t v3 = (const void *)*((void *)this + 44);
  if (v3) {
    CFRelease(v3);
  }
  if (*((void *)this + 43))
  {
    uint64_t v4 = *((void *)this + 41);
    uint64_t v5 = (RadioModule *)*((void *)this + 42);
    uint64_t v6 = *(void *)v5;
    *(void *)(v6 + 8) = *(void *)(v4 + 8);
    **(void **)(v4 + 8) = v6;
    *((void *)this + 43) = 0;
    if (v5 != (RadioModule *)((char *)this + 328))
    {
      do
      {
        uint64_t v7 = (RadioModule *)*((void *)v5 + 1);
        long long v8 = (atomic_uint *)*((void *)v5 + 3);
        if (v8 && atomic_fetch_add(v8 + 3, 0xFFFFFFFF) == 1) {
          (*(void (**)(atomic_uint *))(*(void *)v8 + 24))(v8);
        }
        operator delete(v5);
        uint64_t v5 = v7;
      }
      while (v7 != (RadioModule *)((char *)this + 328));
    }
  }
  uint64_t v9 = (std::__shared_weak_count *)*((void *)this + 39);
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  uint64_t v10 = (std::__shared_weak_count *)*((void *)this + 35);
  if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  BOOL v11 = (std::__shared_weak_count *)*((void *)this + 33);
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  xpc_release(*((xpc_object_t *)this + 31));
  *((void *)this + 31) = 0;
  uint64_t v12 = (std::__shared_weak_count *)*((void *)this + 23);
  if (!v12 || atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if ((*((char *)this + 175) & 0x80000000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
  std::__shared_weak_count::__release_weak(v12);
  if (*((char *)this + 175) < 0) {
LABEL_24:
  }
    operator delete(*((void **)this + 19));
LABEL_25:
  *((void *)this + 6) = &unk_270EA8118;
  MEMORY[0x263E68AF0]((char *)this + 56);
  uint64_t v13 = *((void *)this + 18);
  if (v13) {
    dispatch_release(v13);
  }
  int v14 = *((void *)this + 17);
  if (v14) {
    dispatch_release(v14);
  }
  uint64_t v15 = (std::__shared_weak_count *)*((void *)this + 16);
  if (v15) {
    std::__shared_weak_count::__release_weak(v15);
  }
  *(void *)this = &unk_270EAD770;
  uint64_t v16 = *((void *)this + 3);
  if (v16)
  {
    uint64_t v17 = *((void *)this + 4);
    uint64_t v18 = (void *)*((void *)this + 3);
    if (v17 != v16)
    {
      do
      {
        if (*(char *)(v17 - 1) < 0) {
          operator delete(*(void **)(v17 - 24));
        }
        v17 -= 24;
      }
      while (v17 != v16);
      uint64_t v18 = (void *)*((void *)this + 3);
    }
    *((void *)this + 4) = v16;
    operator delete(v18);
  }
  uint64_t v19 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v19) {
    std::__shared_weak_count::__release_weak(v19);
  }
}

{
  void *v1;
  uint64_t vars8;

  RadioModule::~RadioModule(this);

  operator delete(v1);
}

void non-virtual thunk to'RadioModule::~RadioModule(RadioModule *this)
{
}

{
  void *v1;
  uint64_t vars8;

  RadioModule::~RadioModule((RadioModule *)((char *)this - 48));

  operator delete(v1);
}

const char *RadioModule::getName(RadioModule *this)
{
  return "radio.mod";
}

void ___ZN11RadioModule4initEv_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(NSObject **)(*(void *)(a1 + 32) + 88);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v2 = 0;
    _os_log_impl(&dword_26368A000, v1, OS_LOG_TYPE_DEFAULT, "#I Initializing", v2, 2u);
  }
}

unsigned char *RadioModule::getShutdownStages@<X0>(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  unint64_t v3 = operator new(1uLL);
  *a1 = v3;
  *unint64_t v3 = 3;
  uint64_t result = v3 + 1;
  a1[1] = result;
  a1[2] = result;
  return result;
}

void RadioModule::shutdown(uint64_t a1, char a2, NSObject **a3)
{
  v7[0] = MEMORY[0x263EF8330];
  v7[1] = 1174405120;
  _DWORD v7[2] = ___ZN11RadioModule8shutdownE13ShutdownStageN8dispatch13group_sessionE_block_invoke;
  v7[3] = &__block_descriptor_tmp_5_6;
  uint64_t v5 = *a3;
  uint64_t v6 = (uint64_t *)(a1 + 120);
  v7[4] = a1;
  dispatch_group_t group = v5;
  if (v5)
  {
    dispatch_retain(v5);
    dispatch_group_enter(group);
  }
  char v9 = a2;
  ctu::SharedSynchronizable<RadioModule>::execute_wrapped(v6, (uint64_t)v7);
  if (group)
  {
    dispatch_group_leave(group);
    if (group) {
      dispatch_release(group);
    }
  }
}

void ___ZN11RadioModule8shutdownE13ShutdownStageN8dispatch13group_sessionE_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  uint64_t v2 = v1 + 41;
  unint64_t v3 = (uint64_t *)v1[42];
  if (v3 != v1 + 41)
  {
    do
    {
      boost::signals2::connection::disconnect((boost::signals2::connection *)(v3 + 2));
      unint64_t v3 = (uint64_t *)v3[1];
    }
    while (v3 != v2);
  }
  if (v1[43])
  {
    uint64_t v4 = v1[41];
    uint64_t v5 = (uint64_t *)v1[42];
    uint64_t v6 = *v5;
    *(void *)(v6 + 8) = *(void *)(v4 + 8);
    **(void **)(v4 + 8) = v6;
    v1[43] = 0;
    if (v5 != v2)
    {
      do
      {
        uint64_t v7 = (uint64_t *)v5[1];
        long long v8 = (atomic_uint *)v5[3];
        if (v8 && atomic_fetch_add(v8 + 3, 0xFFFFFFFF) == 1) {
          (*(void (**)(atomic_uint *))(*(void *)v8 + 24))(v8);
        }
        operator delete(v5);
        uint64_t v5 = v7;
      }
      while (v7 != v2);
    }
  }
  char v9 = (std::__shared_weak_count *)v1[35];
  v1[34] = 0;
  v1[35] = 0;
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  uint64_t v10 = (std::__shared_weak_count *)v1[33];
  v1[32] = 0;
  v1[33] = 0;
  if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
    BOOL v11 = (std::__shared_weak_count *)v1[23];
    v1[22] = 0;
    v1[23] = 0;
    if (!v11) {
      return;
    }
  }
  else
  {
    BOOL v11 = (std::__shared_weak_count *)v1[23];
    v1[22] = 0;
    v1[23] = 0;
    if (!v11) {
      return;
    }
  }
  if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
}

void RadioModule::initialize(uint64_t *a1, NSObject **a2)
{
  v11[0] = MEMORY[0x263EF8330];
  v11[1] = 1174405120;
  v11[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke;
  v11[3] = &__block_descriptor_tmp_161;
  unint64_t v3 = *a2;
  v11[4] = a1;
  dispatch_group_t group = v3;
  if (v3)
  {
    dispatch_retain(v3);
    dispatch_group_enter(group);
  }
  ctu::SharedSynchronizable<RadioModule>::execute_wrapped(a1 + 15, (uint64_t)v11);
  uint64_t v4 = (std::__shared_weak_count *)a1[16];
  if (!v4 || (uint64_t v5 = a1[15], (v6 = std::__shared_weak_count::lock(v4)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v7 = v6;
  long long v8 = operator new(8uLL);
  void *v8 = a1;
  char v9 = a1[17];
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v10 = operator new(0x18uLL);
  void *v10 = v8;
  v10[1] = v5;
  v10[2] = v7;
  dispatch_async_f(v9, v10, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<RadioModule>::execute_wrapped<RadioModule::initialize(dispatch::group_session)::$_0>(RadioModule::initialize(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<RadioModule::initialize(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<RadioModule::initialize(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke);
  if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  if (group)
  {
    dispatch_group_leave(group);
    if (group) {
      dispatch_release(group);
    }
  }
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  uint64_t v2 = (std::__shared_weak_count *)v1[16];
  if (!v2 || (uint64_t v3 = v1[15], (v4 = std::__shared_weak_count::lock(v2)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v5 = v4;
  atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v5);
  }
  uint64_t v6 = (const void *)*MEMORY[0x263F26250];
  size_t v7 = strlen((const char *)*MEMORY[0x263F26250]);
  if (v7 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v8 = v7;
  if (v7 >= 0x17)
  {
    uint64_t v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17) {
      uint64_t v10 = v7 | 7;
    }
    uint64_t v11 = v10 + 1;
    p_dst = (void **)operator new(v10 + 1);
    size_t v260 = v8;
    unint64_t v261 = v11 | 0x8000000000000000;
    long long __dst = p_dst;
    goto LABEL_12;
  }
  HIBYTE(v261) = v7;
  p_dst = (void **)&__dst;
  if (v7) {
LABEL_12:
  }
    memmove(p_dst, v6, v8);
  *((unsigned char *)p_dst + v8) = 0;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_2;
  aBlock[3] = &__block_descriptor_tmp_13_0;
  aBlock[4] = v1;
  aBlock[5] = v3;
  int v257 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  uint64_t v12 = _Block_copy(aBlock);
  v258 = v12;
  Service::registerCommandHandler((uint64_t)v1, (uint64_t)&__dst, &v258);
  if (v12) {
    _Block_release(v12);
  }
  if (SHIBYTE(v261) < 0) {
    operator delete(__dst);
  }
  uint64_t v13 = (const void *)*MEMORY[0x263F26680];
  size_t v14 = strlen((const char *)*MEMORY[0x263F26680]);
  if (v14 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v15 = v14;
  if (v14 >= 0x17)
  {
    uint64_t v17 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v14 | 7) != 0x17) {
      uint64_t v17 = v14 | 7;
    }
    uint64_t v18 = v17 + 1;
    uint64_t v16 = (void **)operator new(v17 + 1);
    size_t v260 = v15;
    unint64_t v261 = v18 | 0x8000000000000000;
    long long __dst = v16;
    goto LABEL_24;
  }
  HIBYTE(v261) = v14;
  uint64_t v16 = (void **)&__dst;
  if (v14) {
LABEL_24:
  }
    memmove(v16, v13, v15);
  *((unsigned char *)v16 + v15) = 0;
  v253[0] = MEMORY[0x263EF8330];
  v253[1] = 1174405120;
  v253[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_14;
  v253[3] = &__block_descriptor_tmp_24;
  v253[4] = v1;
  v253[5] = v3;
  v254 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  uint64_t v19 = _Block_copy(v253);
  size_t v255 = v19;
  Service::registerCommandHandler((uint64_t)v1, (uint64_t)&__dst, &v255);
  if (v19) {
    _Block_release(v19);
  }
  if (SHIBYTE(v261) < 0) {
    operator delete(__dst);
  }
  uint64_t v20 = (const void *)*MEMORY[0x263F26728];
  size_t v21 = strlen((const char *)*MEMORY[0x263F26728]);
  if (v21 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v22 = v21;
  if (v21 >= 0x17)
  {
    uint64_t v24 = (v21 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v21 | 7) != 0x17) {
      uint64_t v24 = v21 | 7;
    }
    uint64_t v25 = v24 + 1;
    xpc_object_t v23 = (void **)operator new(v24 + 1);
    size_t v260 = v22;
    unint64_t v261 = v25 | 0x8000000000000000;
    long long __dst = v23;
    goto LABEL_36;
  }
  HIBYTE(v261) = v21;
  xpc_object_t v23 = (void **)&__dst;
  if (v21) {
LABEL_36:
  }
    memmove(v23, v20, v22);
  *((unsigned char *)v23 + v22) = 0;
  v250[0] = MEMORY[0x263EF8330];
  v250[1] = 1174405120;
  v250[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_25;
  v250[3] = &__block_descriptor_tmp_35_0;
  v250[4] = v1;
  v250[5] = v3;
  size_t v251 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  uint64_t v26 = _Block_copy(v250);
  v252 = v26;
  Service::registerCommandHandler((uint64_t)v1, (uint64_t)&__dst, &v252);
  if (v26) {
    _Block_release(v26);
  }
  if (SHIBYTE(v261) < 0) {
    operator delete(__dst);
  }
  int v27 = (const void *)*MEMORY[0x263F26738];
  size_t v28 = strlen((const char *)*MEMORY[0x263F26738]);
  if (v28 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v29 = v28;
  if (v28 >= 0x17)
  {
    uint64_t v31 = (v28 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v28 | 7) != 0x17) {
      uint64_t v31 = v28 | 7;
    }
    uint64_t v32 = v31 + 1;
    uint64_t v30 = (void **)operator new(v31 + 1);
    size_t v260 = v29;
    unint64_t v261 = v32 | 0x8000000000000000;
    long long __dst = v30;
    goto LABEL_48;
  }
  HIBYTE(v261) = v28;
  uint64_t v30 = (void **)&__dst;
  if (v28) {
LABEL_48:
  }
    memmove(v30, v27, v29);
  *((unsigned char *)v30 + v29) = 0;
  v247[0] = MEMORY[0x263EF8330];
  v247[1] = 1174405120;
  v247[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_36;
  v247[3] = &__block_descriptor_tmp_48_0;
  v247[4] = v1;
  v247[5] = v3;
  int v248 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  uint64_t v33 = _Block_copy(v247);
  __n128 v249 = v33;
  Service::registerCommandHandler((uint64_t)v1, (uint64_t)&__dst, &v249);
  if (v33) {
    _Block_release(v33);
  }
  if (SHIBYTE(v261) < 0) {
    operator delete(__dst);
  }
  long long v34 = (const void *)*MEMORY[0x263F26720];
  size_t v35 = strlen((const char *)*MEMORY[0x263F26720]);
  if (v35 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v36 = v35;
  if (v35 >= 0x17)
  {
    uint64_t v38 = (v35 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v35 | 7) != 0x17) {
      uint64_t v38 = v35 | 7;
    }
    uint64_t v39 = v38 + 1;
    uint64_t v37 = (void **)operator new(v38 + 1);
    size_t v260 = v36;
    unint64_t v261 = v39 | 0x8000000000000000;
    long long __dst = v37;
    goto LABEL_60;
  }
  HIBYTE(v261) = v35;
  uint64_t v37 = (void **)&__dst;
  if (v35) {
LABEL_60:
  }
    memmove(v37, v34, v36);
  *((unsigned char *)v37 + v36) = 0;
  v244[0] = MEMORY[0x263EF8330];
  v244[1] = 1174405120;
  v244[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_49;
  v244[3] = &__block_descriptor_tmp_60_2;
  v244[4] = v1;
  v244[5] = v3;
  v245 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  uint64_t v40 = _Block_copy(v244);
  size_t v246 = v40;
  Service::registerCommandHandler((uint64_t)v1, (uint64_t)&__dst, &v246);
  if (v40) {
    _Block_release(v40);
  }
  if (SHIBYTE(v261) < 0) {
    operator delete(__dst);
  }
  uint64_t v41 = (const void *)*MEMORY[0x263F26580];
  size_t v42 = strlen((const char *)*MEMORY[0x263F26580]);
  if (v42 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v43 = v42;
  if (v42 >= 0x17)
  {
    uint64_t v45 = (v42 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v42 | 7) != 0x17) {
      uint64_t v45 = v42 | 7;
    }
    uint64_t v46 = v45 + 1;
    uint64_t v44 = (void **)operator new(v45 + 1);
    size_t v260 = v43;
    unint64_t v261 = v46 | 0x8000000000000000;
    long long __dst = v44;
    goto LABEL_72;
  }
  HIBYTE(v261) = v42;
  uint64_t v44 = (void **)&__dst;
  if (v42) {
LABEL_72:
  }
    memmove(v44, v41, v43);
  *((unsigned char *)v44 + v43) = 0;
  v241[0] = MEMORY[0x263EF8330];
  v241[1] = 1174405120;
  v241[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_61;
  v241[3] = &__block_descriptor_tmp_68_1;
  v241[4] = v1;
  v241[5] = v3;
  v242 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  uint64_t v47 = _Block_copy(v241);
  size_t v243 = v47;
  Service::registerCommandHandler((uint64_t)v1, (uint64_t)&__dst, &v243);
  if (v47) {
    _Block_release(v47);
  }
  if (SHIBYTE(v261) < 0) {
    operator delete(__dst);
  }
  uint64_t v48 = (const void *)*MEMORY[0x263F26590];
  size_t v49 = strlen((const char *)*MEMORY[0x263F26590]);
  if (v49 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v50 = v49;
  if (v49 >= 0x17)
  {
    uint64_t v52 = (v49 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v49 | 7) != 0x17) {
      uint64_t v52 = v49 | 7;
    }
    uint64_t v53 = v52 + 1;
    uint64_t v51 = (void **)operator new(v52 + 1);
    size_t v260 = v50;
    unint64_t v261 = v53 | 0x8000000000000000;
    long long __dst = v51;
    goto LABEL_84;
  }
  HIBYTE(v261) = v49;
  uint64_t v51 = (void **)&__dst;
  if (v49) {
LABEL_84:
  }
    memmove(v51, v48, v50);
  *((unsigned char *)v51 + v50) = 0;
  v238[0] = MEMORY[0x263EF8330];
  v238[1] = 1174405120;
  v238[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_69;
  v238[3] = &__block_descriptor_tmp_80_0;
  v238[4] = v1;
  v238[5] = v3;
  v239 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  uint64_t v54 = _Block_copy(v238);
  v240 = v54;
  Service::registerCommandHandler((uint64_t)v1, (uint64_t)&__dst, &v240);
  if (v54) {
    _Block_release(v54);
  }
  if (SHIBYTE(v261) < 0) {
    operator delete(__dst);
  }
  uint64_t v55 = (const void *)*MEMORY[0x263F25EA0];
  size_t v56 = strlen((const char *)*MEMORY[0x263F25EA0]);
  if (v56 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v57 = v56;
  if (v56 >= 0x17)
  {
    uint64_t v59 = (v56 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v56 | 7) != 0x17) {
      uint64_t v59 = v56 | 7;
    }
    uint64_t v60 = v59 + 1;
    unint64_t v58 = (void **)operator new(v59 + 1);
    size_t v260 = v57;
    unint64_t v261 = v60 | 0x8000000000000000;
    long long __dst = v58;
    goto LABEL_96;
  }
  HIBYTE(v261) = v56;
  unint64_t v58 = (void **)&__dst;
  if (v56) {
LABEL_96:
  }
    memmove(v58, v55, v57);
  *((unsigned char *)v58 + v57) = 0;
  v235[0] = MEMORY[0x263EF8330];
  v235[1] = 1174405120;
  v235[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_81;
  v235[3] = &__block_descriptor_tmp_92;
  v235[4] = v1;
  v235[5] = v3;
  size_t v236 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  uint64_t v61 = _Block_copy(v235);
  size_t v237 = v61;
  Service::registerCommandHandler((uint64_t)v1, (uint64_t)&__dst, &v237);
  if (v61) {
    _Block_release(v61);
  }
  if (SHIBYTE(v261) < 0) {
    operator delete(__dst);
  }
  unint64_t v62 = (const void *)*MEMORY[0x263F267F0];
  size_t v63 = strlen((const char *)*MEMORY[0x263F267F0]);
  if (v63 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v64 = v63;
  if (v63 >= 0x17)
  {
    uint64_t v66 = (v63 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v63 | 7) != 0x17) {
      uint64_t v66 = v63 | 7;
    }
    uint64_t v67 = v66 + 1;
    unint64_t v65 = (void **)operator new(v66 + 1);
    size_t v260 = v64;
    unint64_t v261 = v67 | 0x8000000000000000;
    long long __dst = v65;
    goto LABEL_108;
  }
  HIBYTE(v261) = v63;
  unint64_t v65 = (void **)&__dst;
  if (v63) {
LABEL_108:
  }
    memmove(v65, v62, v64);
  *((unsigned char *)v65 + v64) = 0;
  v232[0] = MEMORY[0x263EF8330];
  v232[1] = 1174405120;
  v232[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_93;
  v232[3] = &__block_descriptor_tmp_96;
  v232[4] = v1;
  v232[5] = v3;
  unint64_t v233 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  uint64_t v68 = _Block_copy(v232);
  int v234 = v68;
  Service::registerCommandHandler((uint64_t)v1, (uint64_t)&__dst, &v234);
  if (v68) {
    _Block_release(v68);
  }
  if (SHIBYTE(v261) < 0) {
    operator delete(__dst);
  }
  __n128 v69 = (const void *)*MEMORY[0x263F260A8];
  size_t v70 = strlen((const char *)*MEMORY[0x263F260A8]);
  if (v70 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v71 = v70;
  if (v70 >= 0x17)
  {
    uint64_t v73 = (v70 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v70 | 7) != 0x17) {
      uint64_t v73 = v70 | 7;
    }
    uint64_t v74 = v73 + 1;
    __n128 v72 = (void **)operator new(v73 + 1);
    size_t v260 = v71;
    unint64_t v261 = v74 | 0x8000000000000000;
    long long __dst = v72;
    goto LABEL_120;
  }
  HIBYTE(v261) = v70;
  __n128 v72 = (void **)&__dst;
  if (v70) {
LABEL_120:
  }
    memmove(v72, v69, v71);
  *((unsigned char *)v72 + v71) = 0;
  v229[0] = MEMORY[0x263EF8330];
  v229[1] = 1174405120;
  v229[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_97;
  v229[3] = &__block_descriptor_tmp_100;
  v229[4] = v1;
  v229[5] = v3;
  __n128 v230 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  size_t v75 = _Block_copy(v229);
  long long v231 = v75;
  Service::registerCommandHandler((uint64_t)v1, (uint64_t)&__dst, &v231);
  if (v75) {
    _Block_release(v75);
  }
  if (SHIBYTE(v261) < 0) {
    operator delete(__dst);
  }
  size_t v76 = (const void *)*MEMORY[0x263F264E8];
  size_t v77 = strlen((const char *)*MEMORY[0x263F264E8]);
  if (v77 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v78 = v77;
  if (v77 >= 0x17)
  {
    uint64_t v80 = (v77 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v77 | 7) != 0x17) {
      uint64_t v80 = v77 | 7;
    }
    uint64_t v81 = v80 + 1;
    unint64_t v79 = (void **)operator new(v80 + 1);
    size_t v260 = v78;
    unint64_t v261 = v81 | 0x8000000000000000;
    long long __dst = v79;
    goto LABEL_132;
  }
  HIBYTE(v261) = v77;
  unint64_t v79 = (void **)&__dst;
  if (v77) {
LABEL_132:
  }
    memmove(v79, v76, v78);
  *((unsigned char *)v79 + v78) = 0;
  v226[0] = MEMORY[0x263EF8330];
  v226[1] = 1174405120;
  v226[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_101;
  v226[3] = &__block_descriptor_tmp_104;
  v226[4] = v1;
  v226[5] = v3;
  __n128 v227 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  int v82 = _Block_copy(v226);
  v228 = v82;
  Service::registerCommandHandler((uint64_t)v1, (uint64_t)&__dst, &v228);
  if (v82) {
    _Block_release(v82);
  }
  if (SHIBYTE(v261) < 0) {
    operator delete(__dst);
  }
  unint64_t v83 = (const void *)*MEMORY[0x263F265F0];
  size_t v84 = strlen((const char *)*MEMORY[0x263F265F0]);
  if (v84 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v85 = v84;
  if (v84 >= 0x17)
  {
    uint64_t v87 = (v84 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v84 | 7) != 0x17) {
      uint64_t v87 = v84 | 7;
    }
    uint64_t v88 = v87 + 1;
    size_t v86 = (void **)operator new(v87 + 1);
    size_t v260 = v85;
    unint64_t v261 = v88 | 0x8000000000000000;
    long long __dst = v86;
    goto LABEL_144;
  }
  HIBYTE(v261) = v84;
  size_t v86 = (void **)&__dst;
  if (v84) {
LABEL_144:
  }
    memmove(v86, v83, v85);
  *((unsigned char *)v86 + v85) = 0;
  v223[0] = MEMORY[0x263EF8330];
  v223[1] = 1174405120;
  v223[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_105;
  v223[3] = &__block_descriptor_tmp_108;
  v223[4] = v1;
  v223[5] = v3;
  size_t v224 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  uint64_t v89 = _Block_copy(v223);
  size_t v225 = v89;
  Service::registerCommandHandler((uint64_t)v1, (uint64_t)&__dst, &v225);
  if (v89) {
    _Block_release(v89);
  }
  if (SHIBYTE(v261) < 0) {
    operator delete(__dst);
  }
  long long v90 = (const void *)*MEMORY[0x263F26200];
  size_t v91 = strlen((const char *)*MEMORY[0x263F26200]);
  if (v91 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v92 = v91;
  if (v91 >= 0x17)
  {
    uint64_t v94 = (v91 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v91 | 7) != 0x17) {
      uint64_t v94 = v91 | 7;
    }
    uint64_t v95 = v94 + 1;
    size_t v93 = (void **)operator new(v94 + 1);
    size_t v260 = v92;
    unint64_t v261 = v95 | 0x8000000000000000;
    long long __dst = v93;
    goto LABEL_156;
  }
  HIBYTE(v261) = v91;
  size_t v93 = (void **)&__dst;
  if (v91) {
LABEL_156:
  }
    memmove(v93, v90, v92);
  *((unsigned char *)v93 + v92) = 0;
  v220[0] = MEMORY[0x263EF8330];
  v220[1] = 1174405120;
  v220[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_109;
  v220[3] = &__block_descriptor_tmp_112;
  v220[4] = v1;
  v220[5] = v3;
  size_t v221 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  long long v96 = _Block_copy(v220);
  int v222 = v96;
  Service::registerCommandHandler((uint64_t)v1, (uint64_t)&__dst, &v222);
  if (v96) {
    _Block_release(v96);
  }
  if (SHIBYTE(v261) < 0) {
    operator delete(__dst);
  }
  long long v97 = (const void *)*MEMORY[0x263F267B0];
  size_t v98 = strlen((const char *)*MEMORY[0x263F267B0]);
  if (v98 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v99 = v98;
  if (v98 >= 0x17)
  {
    uint64_t v101 = (v98 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v98 | 7) != 0x17) {
      uint64_t v101 = v98 | 7;
    }
    uint64_t v102 = v101 + 1;
    unint64_t v100 = (void **)operator new(v101 + 1);
    size_t v260 = v99;
    unint64_t v261 = v102 | 0x8000000000000000;
    long long __dst = v100;
    goto LABEL_168;
  }
  HIBYTE(v261) = v98;
  unint64_t v100 = (void **)&__dst;
  if (v98) {
LABEL_168:
  }
    memmove(v100, v97, v99);
  *((unsigned char *)v100 + v99) = 0;
  v217[0] = MEMORY[0x263EF8330];
  v217[1] = 1174405120;
  v217[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_113;
  v217[3] = &__block_descriptor_tmp_116;
  v217[4] = v1;
  v217[5] = v3;
  unint64_t v218 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  unint64_t v103 = _Block_copy(v217);
  int v219 = v103;
  Service::registerCommandHandler((uint64_t)v1, (uint64_t)&__dst, &v219);
  if (v103) {
    _Block_release(v103);
  }
  if (SHIBYTE(v261) < 0) {
    operator delete(__dst);
  }
  if (capabilities::abs::supportsRFSelfTest(v104))
  {
    int v105 = (const void *)*MEMORY[0x263F26770];
    size_t v106 = strlen((const char *)*MEMORY[0x263F26770]);
    if (v106 > 0x7FFFFFFFFFFFFFF7) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    size_t v107 = v106;
    if (v106 >= 0x17)
    {
      uint64_t v110 = (v106 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v106 | 7) != 0x17) {
        uint64_t v110 = v106 | 7;
      }
      uint64_t v111 = v110 + 1;
      uint64_t v108 = (void **)operator new(v110 + 1);
      size_t v260 = v107;
      unint64_t v261 = v111 | 0x8000000000000000;
      long long __dst = v108;
    }
    else
    {
      HIBYTE(v261) = v106;
      uint64_t v108 = (void **)&__dst;
      if (!v106)
      {
LABEL_184:
        *((unsigned char *)v108 + v107) = 0;
        v214[0] = MEMORY[0x263EF8330];
        v214[1] = 1174405120;
        v214[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_117;
        v214[3] = &__block_descriptor_tmp_120;
        v214[4] = v1;
        v214[5] = v3;
        uint64_t v215 = v5;
        atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        uint64_t v112 = _Block_copy(v214);
        unint64_t v216 = v112;
        Service::registerCommandHandler((uint64_t)v1, (uint64_t)&__dst, &v216);
        if (v112) {
          _Block_release(v112);
        }
        if (SHIBYTE(v261) < 0) {
          operator delete(__dst);
        }
        __n128 v113 = (const void *)*MEMORY[0x263F26778];
        size_t v114 = strlen((const char *)*MEMORY[0x263F26778]);
        if (v114 > 0x7FFFFFFFFFFFFFF7) {
          std::string::__throw_length_error[abi:ne180100]();
        }
        size_t v115 = v114;
        if (v114 >= 0x17)
        {
          uint64_t v117 = (v114 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v114 | 7) != 0x17) {
            uint64_t v117 = v114 | 7;
          }
          uint64_t v118 = v117 + 1;
          size_t v116 = (void **)operator new(v117 + 1);
          size_t v260 = v115;
          unint64_t v261 = v118 | 0x8000000000000000;
          long long __dst = v116;
        }
        else
        {
          HIBYTE(v261) = v114;
          size_t v116 = (void **)&__dst;
          if (!v114)
          {
LABEL_196:
            *((unsigned char *)v116 + v115) = 0;
            v211[0] = MEMORY[0x263EF8330];
            v211[1] = 1174405120;
            v211[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_121;
            v211[3] = &__block_descriptor_tmp_124;
            v211[4] = v1;
            v211[5] = v3;
            size_t v212 = v5;
            atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
            uint64_t v119 = _Block_copy(v211);
            size_t v213 = v119;
            Service::registerCommandHandler((uint64_t)v1, (uint64_t)&__dst, &v213);
            if (v119) {
              _Block_release(v119);
            }
            if (SHIBYTE(v261) < 0) {
              operator delete(__dst);
            }
            int v120 = (const void *)*MEMORY[0x263F267E0];
            size_t v121 = strlen((const char *)*MEMORY[0x263F267E0]);
            if (v121 > 0x7FFFFFFFFFFFFFF7) {
              std::string::__throw_length_error[abi:ne180100]();
            }
            size_t v122 = v121;
            if (v121 >= 0x17)
            {
              uint64_t v124 = (v121 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v121 | 7) != 0x17) {
                uint64_t v124 = v121 | 7;
              }
              uint64_t v125 = v124 + 1;
              int v123 = (void **)operator new(v124 + 1);
              size_t v260 = v122;
              unint64_t v261 = v125 | 0x8000000000000000;
              long long __dst = v123;
            }
            else
            {
              HIBYTE(v261) = v121;
              int v123 = (void **)&__dst;
              if (!v121) {
                goto LABEL_208;
              }
            }
            memmove(v123, v120, v122);
LABEL_208:
            *((unsigned char *)v123 + v122) = 0;
            v208[0] = MEMORY[0x263EF8330];
            v208[1] = 1174405120;
            v208[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_125;
            v208[3] = &__block_descriptor_tmp_128;
            v208[4] = v1;
            v208[5] = v3;
            size_t v209 = v5;
            atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
            long long v126 = _Block_copy(v208);
            int v210 = v126;
            Service::registerCommandHandler((uint64_t)v1, (uint64_t)&__dst, &v210);
            if (v126) {
              _Block_release(v126);
            }
            if (SHIBYTE(v261) < 0) {
              operator delete(__dst);
            }
            if (v209) {
              std::__shared_weak_count::__release_weak(v209);
            }
            if (v212) {
              std::__shared_weak_count::__release_weak(v212);
            }
            if (v215) {
              std::__shared_weak_count::__release_weak(v215);
            }
            goto LABEL_218;
          }
        }
        memmove(v116, v113, v115);
        goto LABEL_196;
      }
    }
    memmove(v108, v105, v107);
    goto LABEL_184;
  }
  std::string::size_type v109 = v1[11];
  if (os_log_type_enabled(v109, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(__dst) = 0;
    _os_log_impl(&dword_26368A000, v109, OS_LOG_TYPE_DEFAULT, "#I RF Self Test not supported", (uint8_t *)&__dst, 2u);
  }
LABEL_218:
  size_t v127 = (const void *)*MEMORY[0x263F26338];
  size_t v128 = strlen((const char *)*MEMORY[0x263F26338]);
  if (v128 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v129 = v128;
  if (v128 >= 0x17)
  {
    uint64_t v131 = (v128 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v128 | 7) != 0x17) {
      uint64_t v131 = v128 | 7;
    }
    uint64_t v132 = v131 + 1;
    long long v130 = (void **)operator new(v131 + 1);
    size_t v260 = v129;
    unint64_t v261 = v132 | 0x8000000000000000;
    long long __dst = v130;
    goto LABEL_225;
  }
  HIBYTE(v261) = v128;
  long long v130 = (void **)&__dst;
  if (v128) {
LABEL_225:
  }
    memmove(v130, v127, v129);
  *((unsigned char *)v130 + v129) = 0;
  v205[0] = MEMORY[0x263EF8330];
  v205[1] = 1174405120;
  v205[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_129;
  v205[3] = &__block_descriptor_tmp_132;
  v205[4] = v1;
  v205[5] = v3;
  uint64_t v206 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  uint64_t v133 = _Block_copy(v205);
  int v207 = v133;
  Service::registerCommandHandler((uint64_t)v1, (uint64_t)&__dst, &v207);
  if (v133) {
    _Block_release(v133);
  }
  if (SHIBYTE(v261) < 0) {
    operator delete(__dst);
  }
  uint64_t v134 = (const void *)*MEMORY[0x263F26198];
  size_t v135 = strlen((const char *)*MEMORY[0x263F26198]);
  if (v135 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v136 = v135;
  if (v135 >= 0x17)
  {
    uint64_t v138 = (v135 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v135 | 7) != 0x17) {
      uint64_t v138 = v135 | 7;
    }
    uint64_t v139 = v138 + 1;
    size_t v137 = (void **)operator new(v138 + 1);
    size_t v260 = v136;
    unint64_t v261 = v139 | 0x8000000000000000;
    long long __dst = v137;
    goto LABEL_237;
  }
  HIBYTE(v261) = v135;
  size_t v137 = (void **)&__dst;
  if (v135) {
LABEL_237:
  }
    memmove(v137, v134, v136);
  *((unsigned char *)v137 + v136) = 0;
  v202[0] = MEMORY[0x263EF8330];
  v202[1] = 1174405120;
  v202[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_133;
  v202[3] = &__block_descriptor_tmp_136;
  v202[4] = v1;
  v202[5] = v3;
  unint64_t v203 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  size_t v140 = _Block_copy(v202);
  v204 = v140;
  Service::registerCommandHandler((uint64_t)v1, (uint64_t)&__dst, &v204);
  if (v140) {
    _Block_release(v140);
  }
  if (SHIBYTE(v261) < 0) {
    operator delete(__dst);
  }
  size_t v141 = (const void *)*MEMORY[0x263F261A8];
  size_t v142 = strlen((const char *)*MEMORY[0x263F261A8]);
  if (v142 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v143 = v142;
  if (v142 >= 0x17)
  {
    uint64_t v145 = (v142 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v142 | 7) != 0x17) {
      uint64_t v145 = v142 | 7;
    }
    uint64_t v146 = v145 + 1;
    unint64_t v144 = (void **)operator new(v145 + 1);
    size_t v260 = v143;
    unint64_t v261 = v146 | 0x8000000000000000;
    long long __dst = v144;
    goto LABEL_249;
  }
  HIBYTE(v261) = v142;
  unint64_t v144 = (void **)&__dst;
  if (v142) {
LABEL_249:
  }
    memmove(v144, v141, v143);
  *((unsigned char *)v144 + v143) = 0;
  v199[0] = MEMORY[0x263EF8330];
  v199[1] = 1174405120;
  v199[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_137;
  v199[3] = &__block_descriptor_tmp_140;
  v199[4] = v1;
  v199[5] = v3;
  int v200 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  uint64_t v147 = _Block_copy(v199);
  int64_t v201 = v147;
  Service::registerCommandHandler((uint64_t)v1, (uint64_t)&__dst, &v201);
  if (v147) {
    _Block_release(v147);
  }
  if (SHIBYTE(v261) < 0) {
    operator delete(__dst);
  }
  int v148 = (const void *)*MEMORY[0x263F25E50];
  size_t v149 = strlen((const char *)*MEMORY[0x263F25E50]);
  if (v149 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v150 = v149;
  if (v149 >= 0x17)
  {
    uint64_t v152 = (v149 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v149 | 7) != 0x17) {
      uint64_t v152 = v149 | 7;
    }
    uint64_t v153 = v152 + 1;
    size_t v151 = (void **)operator new(v152 + 1);
    size_t v260 = v150;
    unint64_t v261 = v153 | 0x8000000000000000;
    long long __dst = v151;
    goto LABEL_261;
  }
  HIBYTE(v261) = v149;
  size_t v151 = (void **)&__dst;
  if (v149) {
LABEL_261:
  }
    memmove(v151, v148, v150);
  *((unsigned char *)v151 + v150) = 0;
  v196[0] = MEMORY[0x263EF8330];
  v196[1] = 1174405120;
  v196[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_141;
  v196[3] = &__block_descriptor_tmp_144;
  v196[4] = v1;
  v196[5] = v3;
  v197 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  int64_t v154 = _Block_copy(v196);
  size_t v198 = v154;
  Service::registerCommandHandler((uint64_t)v1, (uint64_t)&__dst, &v198);
  if (v154) {
    _Block_release(v154);
  }
  if (SHIBYTE(v261) < 0) {
    operator delete(__dst);
  }
  if (capabilities::abs::supportsRFFEScanData(v155))
  {
    int64_t v156 = (const void *)*MEMORY[0x263F266D0];
    size_t v157 = strlen((const char *)*MEMORY[0x263F266D0]);
    if (v157 > 0x7FFFFFFFFFFFFFF7) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    size_t v158 = v157;
    if (v157 >= 0x17)
    {
      uint64_t v160 = (v157 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v157 | 7) != 0x17) {
        uint64_t v160 = v157 | 7;
      }
      uint64_t v161 = v160 + 1;
      uint64_t v159 = (void **)operator new(v160 + 1);
      size_t v260 = v158;
      unint64_t v261 = v161 | 0x8000000000000000;
      long long __dst = v159;
    }
    else
    {
      HIBYTE(v261) = v157;
      uint64_t v159 = (void **)&__dst;
      if (!v157) {
        goto LABEL_275;
      }
    }
    memmove(v159, v156, v158);
LABEL_275:
    *((unsigned char *)v159 + v158) = 0;
    v193[0] = MEMORY[0x263EF8330];
    v193[1] = 1174405120;
    v193[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_145;
    v193[3] = &__block_descriptor_tmp_148;
    v193[4] = v1;
    v193[5] = v3;
    int v194 = v5;
    atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    long long v162 = _Block_copy(v193);
    BOOL v195 = v162;
    Service::registerCommandHandler((uint64_t)v1, (uint64_t)&__dst, &v195);
    if (v162) {
      _Block_release(v162);
    }
    if (SHIBYTE(v261) < 0) {
      operator delete(__dst);
    }
    if (v194) {
      std::__shared_weak_count::__release_weak(v194);
    }
  }
  size_t v163 = (const void *)*MEMORY[0x263F26648];
  size_t v164 = strlen((const char *)*MEMORY[0x263F26648]);
  if (v164 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v165 = v164;
  if (v164 >= 0x17)
  {
    uint64_t v167 = (v164 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v164 | 7) != 0x17) {
      uint64_t v167 = v164 | 7;
    }
    uint64_t v168 = v167 + 1;
    size_t v166 = (void **)operator new(v167 + 1);
    size_t v260 = v165;
    unint64_t v261 = v168 | 0x8000000000000000;
    long long __dst = v166;
    goto LABEL_288;
  }
  HIBYTE(v261) = v164;
  size_t v166 = (void **)&__dst;
  if (v164) {
LABEL_288:
  }
    memmove(v166, v163, v165);
  *((unsigned char *)v166 + v165) = 0;
  v190[0] = MEMORY[0x263EF8330];
  v190[1] = 1174405120;
  v190[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_149;
  v190[3] = &__block_descriptor_tmp_150_1;
  v190[4] = v3;
  v191 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  BOOL v169 = _Block_copy(v190);
  unint64_t v192 = v169;
  Service::registerCommandHandler((uint64_t)v1, (uint64_t)&__dst, &v192);
  if (v169) {
    _Block_release(v169);
  }
  if (SHIBYTE(v261) < 0) {
    operator delete(__dst);
  }
  unint64_t v170 = (const void *)*MEMORY[0x263F26598];
  size_t v171 = strlen((const char *)*MEMORY[0x263F26598]);
  if (v171 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v172 = v171;
  if (v171 >= 0x17)
  {
    uint64_t v174 = (v171 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v171 | 7) != 0x17) {
      uint64_t v174 = v171 | 7;
    }
    uint64_t v175 = v174 + 1;
    size_t v173 = (void **)operator new(v174 + 1);
    size_t v260 = v172;
    unint64_t v261 = v175 | 0x8000000000000000;
    long long __dst = v173;
    goto LABEL_300;
  }
  HIBYTE(v261) = v171;
  size_t v173 = (void **)&__dst;
  if (v171) {
LABEL_300:
  }
    memmove(v173, v170, v172);
  *((unsigned char *)v173 + v172) = 0;
  v187[0] = MEMORY[0x263EF8330];
  v187[1] = 1174405120;
  v187[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_151;
  v187[3] = &__block_descriptor_tmp_154;
  v187[4] = v3;
  v188 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  size_t v176 = _Block_copy(v187);
  unint64_t v189 = v176;
  Service::registerCommandHandler((uint64_t)v1, (uint64_t)&__dst, &v189);
  if (v176) {
    _Block_release(v176);
  }
  if (SHIBYTE(v261) < 0) {
    operator delete(__dst);
  }
  size_t v177 = (const void *)*MEMORY[0x263F26588];
  size_t v178 = strlen((const char *)*MEMORY[0x263F26588]);
  if (v178 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v179 = v178;
  if (v178 >= 0x17)
  {
    uint64_t v181 = (v178 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v178 | 7) != 0x17) {
      uint64_t v181 = v178 | 7;
    }
    uint64_t v182 = v181 + 1;
    __n128 v180 = (void **)operator new(v181 + 1);
    size_t v260 = v179;
    unint64_t v261 = v182 | 0x8000000000000000;
    long long __dst = v180;
    goto LABEL_312;
  }
  HIBYTE(v261) = v178;
  __n128 v180 = (void **)&__dst;
  if (v178) {
LABEL_312:
  }
    memmove(v180, v177, v179);
  *((unsigned char *)v180 + v179) = 0;
  v184[0] = MEMORY[0x263EF8330];
  v184[1] = 1174405120;
  v184[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_155;
  v184[3] = &__block_descriptor_tmp_158;
  v184[4] = v3;
  uint64_t v185 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  v183 = _Block_copy(v184);
  unint64_t v186 = v183;
  Service::registerCommandHandler((uint64_t)v1, (uint64_t)&__dst, &v186);
  if (v183) {
    _Block_release(v183);
  }
  if (SHIBYTE(v261) < 0) {
    operator delete(__dst);
  }
  if (v185) {
    std::__shared_weak_count::__release_weak(v185);
  }
  if (v188) {
    std::__shared_weak_count::__release_weak(v188);
  }
  if (v191) {
    std::__shared_weak_count::__release_weak(v191);
  }
  if (v197) {
    std::__shared_weak_count::__release_weak(v197);
  }
  if (v200) {
    std::__shared_weak_count::__release_weak(v200);
  }
  if (v203) {
    std::__shared_weak_count::__release_weak(v203);
  }
  if (v206) {
    std::__shared_weak_count::__release_weak(v206);
  }
  if (v218) {
    std::__shared_weak_count::__release_weak(v218);
  }
  if (v221) {
    std::__shared_weak_count::__release_weak(v221);
  }
  if (v224) {
    std::__shared_weak_count::__release_weak(v224);
  }
  if (v227) {
    std::__shared_weak_count::__release_weak(v227);
  }
  if (v230) {
    std::__shared_weak_count::__release_weak(v230);
  }
  if (v233) {
    std::__shared_weak_count::__release_weak(v233);
  }
  if (v236) {
    std::__shared_weak_count::__release_weak(v236);
  }
  if (v239) {
    std::__shared_weak_count::__release_weak(v239);
  }
  if (v242) {
    std::__shared_weak_count::__release_weak(v242);
  }
  if (v245) {
    std::__shared_weak_count::__release_weak(v245);
  }
  if (v248) {
    std::__shared_weak_count::__release_weak(v248);
  }
  if (v251) {
    std::__shared_weak_count::__release_weak(v251);
  }
  if (v254) {
    std::__shared_weak_count::__release_weak(v254);
  }
  if (v257) {
    std::__shared_weak_count::__release_weak(v257);
  }
  std::__shared_weak_count::__release_weak(v5);
}

void sub_2636DA248(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,std::__shared_weak_count *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,std::__shared_weak_count *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,std::__shared_weak_count *a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,std::__shared_weak_count *a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,std::__shared_weak_count *a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,std::__shared_weak_count *a61,uint64_t a62,uint64_t a63)
{
  if (v70) {
    _Block_release(v70);
  }
  if (a37) {
    std::__shared_weak_count::__release_weak(a37);
  }
  if (*(char *)(v71 - 105) < 0) {
    operator delete(*(void **)(v71 - 128));
  }
  if (a45) {
    std::__shared_weak_count::__release_weak(a45);
  }
  if (a53) {
    std::__shared_weak_count::__release_weak(a53);
  }
  if (a61) {
    std::__shared_weak_count::__release_weak(a61);
  }
  if (a69) {
    std::__shared_weak_count::__release_weak(a69);
  }
  if (STACK[0x2E0]) {
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)STACK[0x2E0]);
  }
  if (STACK[0x320]) {
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)STACK[0x320]);
  }
  if (STACK[0x360]) {
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)STACK[0x360]);
  }
  if (STACK[0x3A0]) {
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)STACK[0x3A0]);
  }
  if (STACK[0x3E0]) {
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)STACK[0x3E0]);
  }
  if (STACK[0x420]) {
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)STACK[0x420]);
  }
  if (STACK[0x460]) {
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)STACK[0x460]);
  }
  if (STACK[0x4A0]) {
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)STACK[0x4A0]);
  }
  if (STACK[0x4E0]) {
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)STACK[0x4E0]);
  }
  if (STACK[0x520]) {
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)STACK[0x520]);
  }
  if (STACK[0x560]) {
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)STACK[0x560]);
  }
  if (STACK[0x5A0]) {
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)STACK[0x5A0]);
  }
  uint64_t v73 = *(std::__shared_weak_count **)(v71 - 208);
  if (v73) {
    std::__shared_weak_count::__release_weak(v73);
  }
  uint64_t v74 = *(std::__shared_weak_count **)(v71 - 144);
  if (v74) {
    std::__shared_weak_count::__release_weak(v74);
  }
  std::__shared_weak_count::__release_weak(v69);
  _Unwind_Resume(a1);
}

void sub_2636DA9D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (!a69) {
    JUMPOUT(0x2636DA918);
  }
  JUMPOUT(0x2636DA914);
}

void sub_2636DA9E0()
{
}

void sub_2636DA9E8()
{
  if (!STACK[0x320]) {
    JUMPOUT(0x2636DA930);
  }
  JUMPOUT(0x2636DA92CLL);
}

void sub_2636DA9F8()
{
}

void sub_2636DAA00()
{
  if (!STACK[0x3A0]) {
    JUMPOUT(0x2636DA948);
  }
  JUMPOUT(0x2636DA944);
}

void sub_2636DAA10()
{
}

void sub_2636DAA18()
{
  if (!STACK[0x420]) {
    JUMPOUT(0x2636DA960);
  }
  JUMPOUT(0x2636DA95CLL);
}

void sub_2636DAA28()
{
}

void sub_2636DAA30()
{
  if (!STACK[0x4A0]) {
    JUMPOUT(0x2636DA978);
  }
  JUMPOUT(0x2636DA974);
}

void sub_2636DAA40()
{
}

void sub_2636DAA48()
{
  if (!STACK[0x520]) {
    JUMPOUT(0x2636DA990);
  }
  JUMPOUT(0x2636DA98CLL);
}

void sub_2636DAA58()
{
}

void sub_2636DAA60()
{
  if (!STACK[0x5A0]) {
    JUMPOUT(0x2636DA9A8);
  }
  JUMPOUT(0x2636DA9A4);
}

void sub_2636DAA70()
{
}

void sub_2636DAA78()
{
  if (!*(void *)(v0 - 144)) {
    JUMPOUT(0x2636DA9C0);
  }
  JUMPOUT(0x2636DA9BCLL);
}

void sub_2636DAA88(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_weak(v1);
  _Unwind_Resume(a1);
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_2(void *a1, uint64_t a2, const void **a3)
{
  uint64_t v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    uint64_t v6 = a1[4];
    size_t v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      size_t v8 = v7;
      uint64_t v9 = a1[5];
      if (!v9)
      {
LABEL_11:
        if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
        return;
      }
      v14[0] = MEMORY[0x263EF8330];
      v14[1] = 1174405120;
      v14[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_3;
      void v14[3] = &__block_descriptor_tmp_11;
      v14[4] = v6;
      if (*a3)
      {
        uint64_t v10 = _Block_copy(*a3);
        uint64_t v11 = a1[5];
        uint64_t v12 = (uint64_t *)(v6 + 120);
        aBlocunint64_t k = v10;
        uint64_t v16 = v11;
        uint64_t v13 = (std::__shared_weak_count *)a1[6];
        uint64_t v17 = v13;
        if (!v13)
        {
LABEL_7:
          ctu::SharedSynchronizable<RadioModule>::execute_wrapped(v12, (uint64_t)v14);
          if (v17) {
            std::__shared_weak_count::__release_weak(v17);
          }
          if (aBlock) {
            _Block_release(aBlock);
          }
          goto LABEL_11;
        }
      }
      else
      {
        uint64_t v12 = (uint64_t *)(v6 + 120);
        aBlocunint64_t k = 0;
        uint64_t v16 = v9;
        uint64_t v13 = (std::__shared_weak_count *)a1[6];
        uint64_t v17 = v13;
        if (!v13) {
          goto LABEL_7;
        }
      }
      atomic_fetch_add_explicit(&v13->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      goto LABEL_7;
    }
  }
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_3(void *a1)
{
  uint64_t v52 = *MEMORY[0x263EF8340];
  uint64_t v2 = (void *)a1[4];
  if ((*(unsigned int (**)(void *))(*v2 + 88))(v2))
  {
    memset(__p, 170, 24);
    uint64_t v3 = (const void *)*MEMORY[0x263F26250];
    size_t v4 = strlen((const char *)*MEMORY[0x263F26250]);
    if (v4 >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    std::string::size_type v5 = v4;
    if (v4 >= 0x17)
    {
      uint64_t v21 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v4 | 7) != 0x17) {
        uint64_t v21 = v4 | 7;
      }
      uint64_t v22 = v21 + 1;
      p_dst = (std::string *)operator new(v21 + 1);
      __dst.__r_.__value_.__l.__size_ = v5;
      __dst.__r_.__value_.__r.__words[2] = v22 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v4;
      p_dst = &__dst;
      if (!v4)
      {
LABEL_53:
        p_dst->__r_.__value_.__s.__data_[v5] = 0;
        xpc_object_t v23 = (char *)operator new(0x28uLL);
        strcpy(v23, " rejected; ABM is shutting down ");
        uint64_t v24 = std::string::append(&__dst, v23, 0x20uLL);
        long long v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
        __p[2] = (void *)v24->__r_.__value_.__r.__words[2];
        *(_OWORD *)tm __p = v25;
        v24->__r_.__value_.__l.__size_ = 0;
        v24->__r_.__value_.__r.__words[2] = 0;
        v24->__r_.__value_.__r.__words[0] = 0;
        operator delete(v23);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__dst.__r_.__value_.__l.__data_);
          uint64_t v26 = v2[11];
          if (!os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
          {
LABEL_55:
            uint64_t v28 = a1[5];
            int v27 = a1 + 5;
            if (!v28)
            {
LABEL_79:
              if (SHIBYTE(__p[2]) < 0) {
                operator delete(__p[0]);
              }
              return;
            }
LABEL_61:
            __dst.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
            uint64_t v31 = (void *)HIBYTE(__p[2]);
            if (SHIBYTE(__p[2]) < 0) {
              uint64_t v31 = __p[1];
            }
            if (v31)
            {
              xpc_object_t v32 = xpc_dictionary_create(0, 0, 0);
              if (v32 || (xpc_object_t v32 = xpc_null_create()) != 0)
              {
                if (MEMORY[0x263E6A240](v32) == MEMORY[0x263EF8708])
                {
                  xpc_retain(v32);
                  xpc_object_t v33 = v32;
                }
                else
                {
                  xpc_object_t v33 = xpc_null_create();
                }
              }
              else
              {
                xpc_object_t v33 = xpc_null_create();
                xpc_object_t v32 = 0;
              }
              xpc_release(v32);
              xpc_object_t v34 = xpc_null_create();
              size_t v35 = (void *)__dst.__r_.__value_.__r.__words[0];
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v33;
              xpc_release(v35);
              xpc_release(v34);
              if (SHIBYTE(__p[2]) >= 0) {
                size_t v36 = __p;
              }
              else {
                size_t v36 = (void **)__p[0];
              }
              xpc_object_t v37 = xpc_string_create((const char *)v36);
              if (!v37) {
                xpc_object_t v37 = xpc_null_create();
              }
              xpc_dictionary_set_value(v33, (const char *)*MEMORY[0x263F25EB8], v37);
              xpc_object_t v38 = xpc_null_create();
              xpc_release(v37);
              xpc_release(v38);
            }
            LODWORD(v45) = -534716415;
            dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(v27, (unsigned int *)&v45, (void **)&__dst.__r_.__value_.__l.__data_);
            xpc_release(__dst.__r_.__value_.__l.__data_);
            goto LABEL_79;
          }
        }
        else
        {
          uint64_t v26 = v2[11];
          if (!os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_55;
          }
        }
        size_t v29 = __p;
        if (SHIBYTE(__p[2]) < 0) {
          size_t v29 = (void **)__p[0];
        }
        LODWORD(__dst.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = (std::string::size_type)v29;
        _os_log_impl(&dword_26368A000, v26, OS_LOG_TYPE_DEFAULT, "#I %s", (uint8_t *)&__dst, 0xCu);
        uint64_t v30 = a1[5];
        int v27 = a1 + 5;
        if (!v30) {
          goto LABEL_79;
        }
        goto LABEL_61;
      }
    }
    memmove(p_dst, v3, v5);
    goto LABEL_53;
  }
  __dst.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
  __dst.__r_.__value_.__l.__size_ = 0xAAAAAAAAAAAAAAAALL;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_7;
  aBlock[3] = &__block_descriptor_tmp_10_0;
  uint64_t v8 = a1[6];
  size_t v7 = (std::__shared_weak_count *)a1[7];
  aBlock[4] = v2;
  aBlock[5] = v8;
  uint64_t v48 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v9 = (void *)a1[5];
  if (v9) {
    uint64_t v9 = _Block_copy(v9);
  }
  size_t v49 = v9;
  uint64_t v10 = _Block_copy(aBlock);
  uint64_t v11 = v2[17];
  if (v11) {
    dispatch_retain(v11);
  }
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v10;
  __dst.__r_.__value_.__l.__size_ = (std::string::size_type)v11;
  unint64_t v45 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v46 = (std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL;
  uint64_t v12 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  uint64_t v13 = off_26A99F170;
  if (!off_26A99F170)
  {
    CommandDriverFactory::create_default_global((uint64_t *)__p, v12);
    long long v14 = *(_OWORD *)__p;
    __p[0] = 0;
    __p[1] = 0;
    size_t v15 = (std::__shared_weak_count *)*(&off_26A99F170 + 1);
    off_26A99F170 = v14;
    if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
    uint64_t v16 = (std::__shared_weak_count *)__p[1];
    if (__p[1] && !atomic_fetch_add((atomic_ullong *volatile)__p[1] + 1, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
    uint64_t v13 = off_26A99F170;
  }
  uint64_t v17 = (std::__shared_weak_count *)*(&off_26A99F170 + 1);
  uint64_t v41 = v13;
  uint64_t v42 = *(&off_26A99F170 + 1);
  if (*(&off_26A99F170 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_26A99F170 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(unint64_t *__return_ptr, uint64_t))(*(void *)v13 + 16))(&v43, v13);
  unint64_t v45 = 0;
  uint64_t v46 = 0;
  if (v44)
  {
    uint64_t v46 = std::__shared_weak_count::lock(v44);
    if (v46) {
      unint64_t v45 = v43;
    }
    if (v44) {
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  if (v17 && !atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
    unint64_t v18 = v45;
    if (v45) {
      goto LABEL_30;
    }
  }
  else
  {
    unint64_t v18 = v45;
    if (v45)
    {
LABEL_30:
      uint64_t v19 = (void *)__dst.__r_.__value_.__r.__words[0];
      if (__dst.__r_.__value_.__r.__words[0]) {
        uint64_t v19 = _Block_copy(__dst.__r_.__value_.__l.__data_);
      }
      uint64_t v39 = v19;
      dispatch_object_t object = (dispatch_object_t)__dst.__r_.__value_.__l.__size_;
      if (__dst.__r_.__value_.__l.__size_) {
        dispatch_retain((dispatch_object_t)__dst.__r_.__value_.__l.__size_);
      }
      (*(void (**)(unint64_t, void **))(*(void *)v18 + 96))(v18, &v39);
      if (object) {
        dispatch_release(object);
      }
      if (v39) {
        _Block_release(v39);
      }
    }
  }
  uint64_t v20 = v46;
  if (v46 && !atomic_fetch_add(&v46->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
  if (__dst.__r_.__value_.__l.__size_) {
    dispatch_release((dispatch_object_t)__dst.__r_.__value_.__l.__size_);
  }
  if (__dst.__r_.__value_.__r.__words[0]) {
    _Block_release(__dst.__r_.__value_.__l.__data_);
  }
  if (v49) {
    _Block_release(v49);
  }
  if (v48) {
    std::__shared_weak_count::__release_weak(v48);
  }
}

void sub_2636DB26C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,std::__shared_weak_count *a23,void *aBlock,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(uint64_t *a1, unsigned int *a2, void **a3)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *a2;
  std::string::size_type v5 = *a3;
  xpc_object_t object = v5;
  if (v5) {
    xpc_retain(v5);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  (*(void (**)(uint64_t, uint64_t, xpc_object_t *))(v3 + 16))(v3, v4, &object);
  xpc_release(object);
}

void sub_2636DB40C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_7(void *a1, uint64_t *a2, const __CFDictionary **a3)
{
  uint64_t v41 = *MEMORY[0x263EF8340];
  uint64_t v4 = (std::__shared_weak_count *)a1[6];
  if (!v4) {
    return;
  }
  uint64_t v7 = a1[4];
  uint64_t v8 = std::__shared_weak_count::lock(v4);
  xpc_object_t v38 = v8;
  if (!v8) {
    return;
  }
  if (!a1[5])
  {
    uint64_t v11 = v8;
LABEL_41:
    if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    return;
  }
  unsigned int v36 = 0;
  xpc_object_t v9 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v10 = v9;
  if (v9)
  {
    xpc_object_t xdict = v9;
  }
  else
  {
    xpc_object_t v10 = xpc_null_create();
    xpc_object_t xdict = v10;
    if (!v10)
    {
      xpc_object_t v12 = xpc_null_create();
      xpc_object_t v10 = 0;
      goto LABEL_12;
    }
  }
  if (MEMORY[0x263E6A240](v10) == MEMORY[0x263EF8708])
  {
    xpc_retain(v10);
    goto LABEL_13;
  }
  xpc_object_t v12 = xpc_null_create();
LABEL_12:
  xpc_object_t xdict = v12;
LABEL_13:
  xpc_release(v10);
  v33[1] = (void *)0xAAAAAAAAAAAAAAAALL;
  uint64_t v34 = 0xAAAAAAAAAAAAAALL;
  int64_t value = 0;
  v33[0] = (void *)0xAAAAAAAAAAAAAA00;
  int64_t valuePtr = 0;
  uint64_t v13 = *a2;
  if (v13) {
    long long v14 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  }
  else {
    long long v14 = 0;
  }
  if (v14)
  {
    unsigned int v36 = -534716416;
    size_t v15 = *(NSObject **)(v7 + 88);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 138412290;
      *(void *)&uint8_t buf[4] = v13;
      _os_log_error_impl(&dword_26368A000, v15, OS_LOG_TYPE_ERROR, "%@", buf, 0xCu);
    }
    xpc_object_t v16 = xpc_string_create("Unknown error");
    if (!v16) {
      xpc_object_t v16 = xpc_null_create();
    }
    xpc_dictionary_set_value(xdict, (const char *)*MEMORY[0x263F25EB8], v16);
    xpc_object_t v17 = xpc_null_create();
    xpc_release(v16);
    xpc_release(v17);
  }
  else
  {
    CFDictionaryRef v18 = *a3;
    if (*a3) {
      uint64_t v19 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
    }
    else {
      uint64_t v19 = 0;
    }
    if (v19)
    {
      v30[0] = 0xAAAAAAAAAAAAAAAALL;
      v30[1] = 0xAAAAAAAAAAAAAAAALL;
      ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v30, v18);
      CFNumberRef v20 = (const __CFNumber *)ctu::cf::map_adapter::copyCFNumberRef((ctu::cf::map_adapter *)v30, (const __CFString *)*MEMORY[0x263F8B840]);
      CFNumberRef v21 = v20;
      if (v20)
      {
        CFNumberGetValue(v20, kCFNumberLongType, &valuePtr);
        CFRelease(v21);
        LODWORD(value) = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v30, (const __CFString *)*MEMORY[0x263F8B860]);
      }
      ctu::cf::map_adapter::getString();
      *(_OWORD *)xpc_object_t v33 = *(_OWORD *)buf;
      uint64_t v34 = v40;
      HIBYTE(v40) = 0;
      buf[0] = 0;
      xpc_object_t v22 = xpc_int64_create(valuePtr);
      if (!v22) {
        xpc_object_t v22 = xpc_null_create();
      }
      xpc_object_t v23 = xdict;
      xpc_dictionary_set_value(xdict, (const char *)*MEMORY[0x263F262C0], v22);
      xpc_object_t v24 = xpc_null_create();
      xpc_release(v22);
      xpc_release(v24);
      xpc_object_t v25 = xpc_int64_create((int)value);
      if (!v25) {
        xpc_object_t v25 = xpc_null_create();
      }
      xpc_dictionary_set_value(v23, (const char *)*MEMORY[0x263F265D0], v25);
      xpc_object_t v26 = xpc_null_create();
      xpc_release(v25);
      xpc_release(v26);
      if (v34 >= 0) {
        int v27 = v33;
      }
      else {
        int v27 = (void **)v33[0];
      }
      xpc_object_t v28 = xpc_string_create((const char *)v27);
      if (!v28) {
        xpc_object_t v28 = xpc_null_create();
      }
      xpc_dictionary_set_value(v23, (const char *)*MEMORY[0x263F26378], v28);
      xpc_object_t v29 = xpc_null_create();
      xpc_release(v28);
      xpc_release(v29);
      MEMORY[0x263E68CD0](v30);
    }
  }
  dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int &,xpc::dict&>(a1 + 7, &v36, &xdict);
  if (SHIBYTE(v34) < 0) {
    operator delete(v33[0]);
  }
  xpc_release(xdict);
  uint64_t v11 = v38;
  if (v38) {
    goto LABEL_41;
  }
}

void sub_2636DB848(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,xpc_object_t object)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int &,xpc::dict&>(uint64_t *a1, unsigned int *a2, void **a3)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *a2;
  std::string::size_type v5 = *a3;
  xpc_object_t object = v5;
  if (v5) {
    xpc_retain(v5);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  (*(void (**)(uint64_t, uint64_t, xpc_object_t *))(v3 + 16))(v3, v4, &object);
  xpc_release(object);
}

void sub_2636DB99C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
}

void *__copy_helper_block_e8_40c36_ZTSNSt3__18weak_ptrI11RadioModuleEE56c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE(void *a1, void *a2)
{
  uint64_t v3 = a2[6];
  a1[5] = a2[5];
  a1[6] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  uint64_t result = (void *)a2[7];
  if (result) {
    uint64_t result = _Block_copy(result);
  }
  a1[7] = result;
  return result;
}

void __destroy_helper_block_e8_40c36_ZTSNSt3__18weak_ptrI11RadioModuleEE56c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 56);
  if (v2) {
    _Block_release(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3)
  {
    std::__shared_weak_count::__release_weak(v3);
  }
}

void *__copy_helper_block_e8_40c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE48c36_ZTSNSt3__18weak_ptrI11RadioModuleEE(void *a1, void *a2)
{
  uint64_t result = (void *)a2[5];
  if (result) {
    uint64_t result = _Block_copy(result);
  }
  uint64_t v6 = a2[6];
  uint64_t v5 = a2[7];
  a1[5] = result;
  a1[6] = v6;
  a1[7] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE48c36_ZTSNSt3__18weak_ptrI11RadioModuleEE(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 56);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = *(const void **)(a1 + 40);
  if (v3) {
    _Block_release(v3);
  }
}

uint64_t __copy_helper_block_e8_40c36_ZTSNSt3__18weak_ptrI11RadioModuleEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c36_ZTSNSt3__18weak_ptrI11RadioModuleEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_14(void *a1, uint64_t a2, void **a3)
{
  uint64_t v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    uint64_t v6 = a1[4];
    uint64_t v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      uint64_t v8 = v7;
      if (a1[5])
      {
        v10[0] = MEMORY[0x263EF8330];
        v10[1] = 1174405120;
        v10[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_2_15;
        v10[3] = &__block_descriptor_tmp_21_1;
        v10[4] = v6;
        xpc_object_t v9 = *a3;
        if (*a3) {
          xpc_object_t v9 = _Block_copy(v9);
        }
        aBlocunint64_t k = v9;
        ctu::SharedSynchronizable<RadioModule>::execute_wrapped((uint64_t *)(v6 + 120), (uint64_t)v10);
        if (aBlock) {
          _Block_release(aBlock);
        }
      }
      if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_2_15(uint64_t a1)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void **)(a1 + 32);
  if ((*(unsigned int (**)(void *))(*v2 + 88))(v2))
  {
    memset(__p, 170, 24);
    uint64_t v3 = (const void *)*MEMORY[0x263F26680];
    size_t v4 = strlen((const char *)*MEMORY[0x263F26680]);
    if (v4 >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    std::string::size_type v5 = v4;
    if (v4 >= 0x17)
    {
      uint64_t v9 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v4 | 7) != 0x17) {
        uint64_t v9 = v4 | 7;
      }
      uint64_t v10 = v9 + 1;
      p_dst = (std::string *)operator new(v9 + 1);
      __dst.__r_.__value_.__l.__size_ = v5;
      __dst.__r_.__value_.__r.__words[2] = v10 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v4;
      p_dst = &__dst;
      if (!v4)
      {
LABEL_16:
        p_dst->__r_.__value_.__s.__data_[v5] = 0;
        uint64_t v11 = (char *)operator new(0x28uLL);
        strcpy(v11, " rejected; ABM is shutting down ");
        xpc_object_t v12 = std::string::append(&__dst, v11, 0x20uLL);
        long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
        __p[2] = (void *)v12->__r_.__value_.__r.__words[2];
        *(_OWORD *)tm __p = v13;
        v12->__r_.__value_.__l.__size_ = 0;
        v12->__r_.__value_.__r.__words[2] = 0;
        v12->__r_.__value_.__r.__words[0] = 0;
        operator delete(v11);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__dst.__r_.__value_.__l.__data_);
          long long v14 = v2[11];
          if (!os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
          {
LABEL_18:
            uint64_t v16 = *(void *)(a1 + 40);
            size_t v15 = (uint64_t *)(a1 + 40);
            if (!v16)
            {
LABEL_40:
              if (SHIBYTE(__p[2]) < 0) {
                operator delete(__p[0]);
              }
              return;
            }
LABEL_24:
            __dst.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
            uint64_t v19 = (void *)HIBYTE(__p[2]);
            if (SHIBYTE(__p[2]) < 0) {
              uint64_t v19 = __p[1];
            }
            if (v19)
            {
              xpc_object_t v20 = xpc_dictionary_create(0, 0, 0);
              if (v20 || (xpc_object_t v20 = xpc_null_create()) != 0)
              {
                if (MEMORY[0x263E6A240](v20) == MEMORY[0x263EF8708])
                {
                  xpc_retain(v20);
                  xpc_object_t v21 = v20;
                }
                else
                {
                  xpc_object_t v21 = xpc_null_create();
                }
              }
              else
              {
                xpc_object_t v21 = xpc_null_create();
                xpc_object_t v20 = 0;
              }
              xpc_release(v20);
              xpc_object_t v22 = xpc_null_create();
              xpc_object_t v23 = (void *)__dst.__r_.__value_.__r.__words[0];
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v21;
              xpc_release(v23);
              xpc_release(v22);
              if (SHIBYTE(__p[2]) >= 0) {
                xpc_object_t v24 = __p;
              }
              else {
                xpc_object_t v24 = (void **)__p[0];
              }
              xpc_object_t v25 = xpc_string_create((const char *)v24);
              if (!v25) {
                xpc_object_t v25 = xpc_null_create();
              }
              xpc_dictionary_set_value(v21, (const char *)*MEMORY[0x263F25EB8], v25);
              xpc_object_t v26 = xpc_null_create();
              xpc_release(v25);
              xpc_release(v26);
            }
            unsigned int v30 = -534716415;
            dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(v15, &v30, (void **)&__dst.__r_.__value_.__l.__data_);
            xpc_release(__dst.__r_.__value_.__l.__data_);
            goto LABEL_40;
          }
        }
        else
        {
          long long v14 = v2[11];
          if (!os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_18;
          }
        }
        xpc_object_t v17 = __p;
        if (SHIBYTE(__p[2]) < 0) {
          xpc_object_t v17 = (void **)__p[0];
        }
        LODWORD(__dst.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = (std::string::size_type)v17;
        _os_log_impl(&dword_26368A000, v14, OS_LOG_TYPE_DEFAULT, "#I %s", (uint8_t *)&__dst, 0xCu);
        uint64_t v18 = *(void *)(a1 + 40);
        size_t v15 = (uint64_t *)(a1 + 40);
        if (!v18) {
          goto LABEL_40;
        }
        goto LABEL_24;
      }
    }
    memmove(p_dst, v3, v5);
    goto LABEL_16;
  }
  v27[0] = MEMORY[0x263EF8330];
  v27[1] = 1174405120;
  v27[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_16;
  _OWORD v27[3] = &__block_descriptor_tmp_18;
  v27[4] = v2;
  uint64_t v7 = *(void **)(a1 + 40);
  if (v7) {
    uint64_t v7 = _Block_copy(v7);
  }
  aBlocunint64_t k = v7;
  uint64_t v8 = (void (**)(void *, std::string *))_Block_copy(v27);
  xpc_object_t v29 = v8;
  RadioModule::getVersion_sync((uint64_t)v2, &v29);
  if (v8) {
    _Block_release(v8);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
}

void sub_2636DC010(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *aBlock, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void RadioModule::getVersion_sync(uint64_t a1, void (***a2)(void *, std::string *))
{
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 128);
  if (!v3 || (uint64_t v5 = *(void *)(a1 + 120), (v6 = std::__shared_weak_count::lock(v3)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v7 = v6;
  atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    uint64_t v8 = (std::string *)(a1 + 152);
    int v9 = *(char *)(a1 + 175);
    if ((v9 & 0x80000000) == 0) {
      goto LABEL_5;
    }
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v7);
    uint64_t v8 = (std::string *)(a1 + 152);
    int v9 = *(char *)(a1 + 175);
    if ((v9 & 0x80000000) == 0)
    {
LABEL_5:
      if (v9)
      {
        uint64_t v10 = *a2;
        std::string v37 = *v8;
        goto LABEL_10;
      }
      goto LABEL_12;
    }
  }
  std::string::size_type v11 = *(void *)(a1 + 160);
  if (v11)
  {
    uint64_t v10 = *a2;
    std::string::__init_copy_ctor_external(&v37, v8->__r_.__value_.__l.__data_, v11);
LABEL_10:
    v10[2](v10, &v37);
    if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v37.__r_.__value_.__l.__data_);
    }
    goto LABEL_53;
  }
LABEL_12:
  size_t v35 = (void *)0xAAAAAAAAAAAAAAAALL;
  dispatch_object_t v36 = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN11RadioModule15getVersion_syncEN8dispatch5blockIU13block_pointerFvNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEEE_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_177;
  aBlock[4] = a1;
  aBlock[5] = v5;
  uint64_t v33 = v7;
  atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  xpc_object_t v12 = *a2;
  if (*a2) {
    xpc_object_t v12 = (void (**)(void *, std::string *))_Block_copy(v12);
  }
  uint64_t v34 = v12;
  long long v13 = _Block_copy(aBlock);
  long long v14 = *(NSObject **)(a1 + 136);
  if (v14) {
    dispatch_retain(v14);
  }
  size_t v35 = v13;
  dispatch_object_t v36 = v14;
  unint64_t v30 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v31 = (std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL;
  size_t v15 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  uint64_t v16 = off_26A99F170;
  if (!off_26A99F170)
  {
    CommandDriverFactory::create_default_global((uint64_t *)&v37, v15);
    long long v17 = *(_OWORD *)&v37.__r_.__value_.__l.__data_;
    *(_OWORD *)&v37.__r_.__value_.__l.__data_ = 0uLL;
    uint64_t v18 = (std::__shared_weak_count *)*(&off_26A99F170 + 1);
    off_26A99F170 = v17;
    if (v18 && !atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
    int64_t size = (std::__shared_weak_count *)v37.__r_.__value_.__l.__size_;
    if (v37.__r_.__value_.__l.__size_
      && !atomic_fetch_add((atomic_ullong *volatile)(v37.__r_.__value_.__l.__size_ + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
    uint64_t v16 = off_26A99F170;
  }
  xpc_object_t v20 = (std::__shared_weak_count *)*(&off_26A99F170 + 1);
  uint64_t v26 = v16;
  uint64_t v27 = *(&off_26A99F170 + 1);
  if (*(&off_26A99F170 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_26A99F170 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(unint64_t *__return_ptr, uint64_t))(*(void *)v16 + 16))(&v28, v16);
  unint64_t v30 = 0;
  uint64_t v31 = 0;
  if (v29)
  {
    uint64_t v31 = std::__shared_weak_count::lock(v29);
    if (v31) {
      unint64_t v30 = v28;
    }
    if (v29) {
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  if (v20 && !atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
    unint64_t v21 = v30;
    if (v30) {
      goto LABEL_34;
    }
  }
  else
  {
    unint64_t v21 = v30;
    if (v30)
    {
LABEL_34:
      xpc_object_t v22 = v35;
      if (v35) {
        xpc_object_t v22 = _Block_copy(v35);
      }
      xpc_object_t v24 = v22;
      dispatch_object_t object = v36;
      if (v36) {
        dispatch_retain(v36);
      }
      (*(void (**)(unint64_t, void **))(*(void *)v21 + 112))(v21, &v24);
      if (object) {
        dispatch_release(object);
      }
      if (v24) {
        _Block_release(v24);
      }
    }
  }
  xpc_object_t v23 = v31;
  if (v31 && !atomic_fetch_add(&v31->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
  }
  if (v36) {
    dispatch_release(v36);
  }
  if (v35) {
    _Block_release(v35);
  }
  if (v34) {
    _Block_release(v34);
  }
  if (v33) {
    std::__shared_weak_count::__release_weak(v33);
  }
LABEL_53:
  std::__shared_weak_count::__release_weak(v7);
}

void sub_2636DC518(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,std::__shared_weak_count *a23,void *aBlock)
{
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>::~callback(v25 - 80);
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (a23)
  {
    std::__shared_weak_count::__release_weak(a23);
    std::__shared_weak_count::__release_weak(v24);
    _Unwind_Resume(a1);
  }
  std::__shared_weak_count::__release_weak(v24);
  _Unwind_Resume(a1);
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_16(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *(void *)(a1 + 32);
  unsigned int v86 = 0;
  xpc_object_t v5 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v6 = v5;
  if (v5)
  {
    xpc_object_t xdict = v5;
  }
  else
  {
    xpc_object_t v6 = xpc_null_create();
    xpc_object_t xdict = v6;
    if (!v6)
    {
      xpc_object_t v7 = xpc_null_create();
      xpc_object_t v6 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x263E6A240](v6) == MEMORY[0x263EF8708])
  {
    xpc_retain(v6);
    goto LABEL_9;
  }
  xpc_object_t v7 = xpc_null_create();
LABEL_8:
  xpc_object_t xdict = v7;
LABEL_9:
  xpc_release(v6);
  if ((*((char *)a2 + 23) & 0x80000000) == 0)
  {
    if (*((unsigned char *)a2 + 23)) {
      goto LABEL_11;
    }
LABEL_32:
    unsigned int v86 = -534716416;
    xpc_object_t v21 = xpc_string_create("Unknown error");
    if (!v21) {
      xpc_object_t v21 = xpc_null_create();
    }
    xpc_dictionary_set_value(xdict, (const char *)*MEMORY[0x263F25EB8], v21);
    xpc_object_t v22 = xpc_null_create();
    xpc_release(v21);
    xpc_release(v22);
    goto LABEL_143;
  }
  if (!a2[1]) {
    goto LABEL_32;
  }
LABEL_11:
  uint64_t v8 = (char *)operator new(0x28uLL);
  strcpy(v8, "AppleBasebandServices_Manager-1211");
  xpc_object_t v9 = xpc_string_create(v8);
  if (!v9) {
    xpc_object_t v9 = xpc_null_create();
  }
  xpc_dictionary_set_value(xdict, (const char *)*MEMORY[0x263F264B0], v9);
  xpc_object_t v10 = xpc_null_create();
  xpc_release(v9);
  xpc_release(v10);
  operator delete(v8);
  if (*((char *)a2 + 23) < 0) {
    a2 = (uint64_t *)*a2;
  }
  xpc_object_t v11 = xpc_string_create((const char *)a2);
  if (!v11) {
    xpc_object_t v11 = xpc_null_create();
  }
  xpc_dictionary_set_value(xdict, (const char *)*MEMORY[0x263F26000], v11);
  xpc_object_t v12 = xpc_null_create();
  xpc_release(v11);
  xpc_release(v12);
  CFTypeRef cf = 0;
  pthread_mutex_lock(&ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance);
  long long v13 = (os_unfair_lock_s *)xmmword_26A99F080;
  if (!(void)xmmword_26A99F080)
  {
    SharedData::create_default_global(&__dst);
    long long v14 = __dst;
    long long __dst = 0uLL;
    size_t v15 = (std::__shared_weak_count *)*((void *)&xmmword_26A99F080 + 1);
    xmmword_26A99F080 = v14;
    if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
    uint64_t v16 = (std::__shared_weak_count *)*((void *)&__dst + 1);
    if (*((void *)&__dst + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&__dst + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
    long long v13 = (os_unfair_lock_s *)xmmword_26A99F080;
  }
  tm __p = v13;
  size_t v78 = (std::__shared_weak_count *)*((void *)&xmmword_26A99F080 + 1);
  if (*((void *)&xmmword_26A99F080 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&xmmword_26A99F080 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance);
  long long v17 = (const void *)*MEMORY[0x263F260F0];
  size_t v18 = strlen((const char *)*MEMORY[0x263F260F0]);
  if (v18 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v19 = v18;
  if (v18 >= 0x17)
  {
    uint64_t v23 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v18 | 7) != 0x17) {
      uint64_t v23 = v18 | 7;
    }
    uint64_t v24 = v23 + 1;
    p_dst = (long long *)operator new(v23 + 1);
    *((void *)&__dst + 1) = v19;
    int64_t v83 = v24 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
    goto LABEL_38;
  }
  HIBYTE(v83) = v18;
  p_dst = &__dst;
  if (v18) {
LABEL_38:
  }
    memmove(p_dst, v17, v19);
  *((unsigned char *)p_dst + v19) = 0;
  os_unfair_lock_lock(v13 + 10);
  Preferences::getPreference<__CFDictionary const*>(v13, (const char *)&__dst, &cf);
  os_unfair_lock_unlock(v13 + 10);
  if (SHIBYTE(v83) < 0)
  {
    operator delete((void *)__dst);
    uint64_t v25 = v78;
    if (!v78) {
      goto LABEL_44;
    }
  }
  else
  {
    uint64_t v25 = v78;
    if (!v78)
    {
LABEL_44:
      CFTypeRef v26 = cf;
      if (!cf) {
        goto LABEL_53;
      }
      goto LABEL_45;
    }
  }
  if (atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_44;
  }
  ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
  std::__shared_weak_count::__release_weak(v25);
  CFTypeRef v26 = cf;
  if (!cf)
  {
LABEL_53:
    uint64_t v33 = *(NSObject **)(v4 + 88);
    if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
    {
      LOWORD(__dst) = 0;
      _os_log_error_impl(&dword_26368A000, v33, OS_LOG_TYPE_ERROR, "Failed to get ABM Shared Data", (uint8_t *)&__dst, 2u);
    }
    goto LABEL_143;
  }
LABEL_45:
  CFTypeID v27 = CFGetTypeID(v26);
  if (v27 != CFDictionaryGetTypeID()) {
    goto LABEL_53;
  }
  CFDictionaryRef v28 = (const __CFDictionary *)cf;
  CFTypeRef v81 = cf;
  if (cf) {
    CFRetain(cf);
  }
  v80[0] = 0xAAAAAAAAAAAAAAAALL;
  v80[1] = 0xAAAAAAAAAAAAAAAALL;
  ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v80, v28);
  xpc_object_t v29 = (const void *)*MEMORY[0x263F268C0];
  size_t v30 = strlen((const char *)*MEMORY[0x263F268C0]);
  if (v30 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v31 = v30;
  if (v30 >= 0x17)
  {
    uint64_t v34 = (v30 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v30 | 7) != 0x17) {
      uint64_t v34 = v30 | 7;
    }
    uint64_t v35 = v34 + 1;
    uint64_t p_p = operator new(v34 + 1);
    size_t v78 = (std::__shared_weak_count *)v31;
    unint64_t v79 = v35 | 0x8000000000000000;
    tm __p = p_p;
    goto LABEL_58;
  }
  HIBYTE(v79) = v30;
  uint64_t p_p = &__p;
  if (v30) {
LABEL_58:
  }
    memmove(p_p, v29, v31);
  dispatch_object_t v36 = (const char *)*MEMORY[0x263F26120];
  *((unsigned char *)p_p + v31) = 0;
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v87, v36);
  ctu::cf::map_adapter::getString();
  MEMORY[0x263E68C90](&v87);
  if (v83 >= 0) {
    std::string v37 = (const char *)&__dst;
  }
  else {
    std::string v37 = (const char *)__dst;
  }
  xpc_object_t v38 = xpc_string_create(v37);
  if (!v38) {
    xpc_object_t v38 = xpc_null_create();
  }
  xpc_dictionary_set_value(xdict, v36, v38);
  xpc_object_t v39 = xpc_null_create();
  xpc_release(v38);
  xpc_release(v39);
  if (SHIBYTE(v83) < 0)
  {
    operator delete((void *)__dst);
    if ((SHIBYTE(v79) & 0x80000000) == 0)
    {
LABEL_66:
      size_t v40 = strlen((const char *)v29);
      if (v40 <= 0x7FFFFFFFFFFFFFF7) {
        goto LABEL_67;
      }
LABEL_130:
      std::string::__throw_length_error[abi:ne180100]();
    }
  }
  else if ((SHIBYTE(v79) & 0x80000000) == 0)
  {
    goto LABEL_66;
  }
  operator delete(__p);
  size_t v40 = strlen((const char *)v29);
  if (v40 > 0x7FFFFFFFFFFFFFF7) {
    goto LABEL_130;
  }
LABEL_67:
  size_t v41 = v40;
  if (v40 >= 0x17)
  {
    uint64_t v43 = (v40 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v40 | 7) != 0x17) {
      uint64_t v43 = v40 | 7;
    }
    uint64_t v44 = v43 + 1;
    uint64_t v42 = operator new(v43 + 1);
    size_t v78 = (std::__shared_weak_count *)v41;
    unint64_t v79 = v44 | 0x8000000000000000;
    tm __p = v42;
    goto LABEL_73;
  }
  HIBYTE(v79) = v40;
  uint64_t v42 = &__p;
  if (v40) {
LABEL_73:
  }
    memmove(v42, v29, v41);
  unint64_t v45 = (const char *)*MEMORY[0x263F26068];
  *((unsigned char *)v42 + v41) = 0;
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v87, v45);
  ctu::cf::map_adapter::getString();
  MEMORY[0x263E68C90](&v87);
  if (v83 >= 0) {
    uint64_t v46 = (const char *)&__dst;
  }
  else {
    uint64_t v46 = (const char *)__dst;
  }
  xpc_object_t v47 = xpc_string_create(v46);
  if (!v47) {
    xpc_object_t v47 = xpc_null_create();
  }
  xpc_dictionary_set_value(xdict, v45, v47);
  xpc_object_t v48 = xpc_null_create();
  xpc_release(v47);
  xpc_release(v48);
  if (SHIBYTE(v83) < 0)
  {
    operator delete((void *)__dst);
    if ((SHIBYTE(v79) & 0x80000000) == 0)
    {
LABEL_81:
      size_t v49 = strlen((const char *)v29);
      if (v49 <= 0x7FFFFFFFFFFFFFF7) {
        goto LABEL_82;
      }
LABEL_133:
      std::string::__throw_length_error[abi:ne180100]();
    }
  }
  else if ((SHIBYTE(v79) & 0x80000000) == 0)
  {
    goto LABEL_81;
  }
  operator delete(__p);
  size_t v49 = strlen((const char *)v29);
  if (v49 > 0x7FFFFFFFFFFFFFF7) {
    goto LABEL_133;
  }
LABEL_82:
  size_t v50 = v49;
  if (v49 >= 0x17)
  {
    uint64_t v52 = (v49 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v49 | 7) != 0x17) {
      uint64_t v52 = v49 | 7;
    }
    uint64_t v53 = v52 + 1;
    uint64_t v51 = operator new(v52 + 1);
    size_t v78 = (std::__shared_weak_count *)v50;
    unint64_t v79 = v53 | 0x8000000000000000;
    tm __p = v51;
    goto LABEL_88;
  }
  HIBYTE(v79) = v49;
  uint64_t v51 = &__p;
  if (v49) {
LABEL_88:
  }
    memmove(v51, v29, v50);
  uint64_t v54 = (const char *)*MEMORY[0x263F261C8];
  *((unsigned char *)v51 + v50) = 0;
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v87, v54);
  ctu::cf::map_adapter::getString();
  MEMORY[0x263E68C90](&v87);
  if (v83 >= 0) {
    uint64_t v55 = (const char *)&__dst;
  }
  else {
    uint64_t v55 = (const char *)__dst;
  }
  xpc_object_t v56 = xpc_string_create(v55);
  if (!v56) {
    xpc_object_t v56 = xpc_null_create();
  }
  xpc_dictionary_set_value(xdict, v54, v56);
  xpc_object_t v57 = xpc_null_create();
  xpc_release(v56);
  xpc_release(v57);
  if (SHIBYTE(v83) < 0)
  {
    operator delete((void *)__dst);
    if ((SHIBYTE(v79) & 0x80000000) == 0)
    {
LABEL_96:
      size_t v58 = strlen((const char *)v29);
      if (v58 <= 0x7FFFFFFFFFFFFFF7) {
        goto LABEL_97;
      }
LABEL_136:
      std::string::__throw_length_error[abi:ne180100]();
    }
  }
  else if ((SHIBYTE(v79) & 0x80000000) == 0)
  {
    goto LABEL_96;
  }
  operator delete(__p);
  size_t v58 = strlen((const char *)v29);
  if (v58 > 0x7FFFFFFFFFFFFFF7) {
    goto LABEL_136;
  }
LABEL_97:
  size_t v59 = v58;
  if (v58 >= 0x17)
  {
    uint64_t v61 = (v58 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v58 | 7) != 0x17) {
      uint64_t v61 = v58 | 7;
    }
    uint64_t v62 = v61 + 1;
    uint64_t v60 = operator new(v61 + 1);
    size_t v78 = (std::__shared_weak_count *)v59;
    unint64_t v79 = v62 | 0x8000000000000000;
    tm __p = v60;
    goto LABEL_103;
  }
  HIBYTE(v79) = v58;
  uint64_t v60 = &__p;
  if (v58) {
LABEL_103:
  }
    memmove(v60, v29, v59);
  size_t v63 = (const char *)*MEMORY[0x263F25EF8];
  *((unsigned char *)v60 + v59) = 0;
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v87, v63);
  ctu::cf::map_adapter::getString();
  MEMORY[0x263E68C90](&v87);
  if (v83 >= 0) {
    size_t v64 = (const char *)&__dst;
  }
  else {
    size_t v64 = (const char *)__dst;
  }
  xpc_object_t v65 = xpc_string_create(v64);
  if (!v65) {
    xpc_object_t v65 = xpc_null_create();
  }
  xpc_dictionary_set_value(xdict, v63, v65);
  xpc_object_t v66 = xpc_null_create();
  xpc_release(v65);
  xpc_release(v66);
  if (SHIBYTE(v83) < 0)
  {
    operator delete((void *)__dst);
    if ((SHIBYTE(v79) & 0x80000000) == 0)
    {
LABEL_111:
      size_t v67 = strlen((const char *)v29);
      if (v67 <= 0x7FFFFFFFFFFFFFF7) {
        goto LABEL_112;
      }
LABEL_139:
      std::string::__throw_length_error[abi:ne180100]();
    }
  }
  else if ((SHIBYTE(v79) & 0x80000000) == 0)
  {
    goto LABEL_111;
  }
  operator delete(__p);
  size_t v67 = strlen((const char *)v29);
  if (v67 > 0x7FFFFFFFFFFFFFF7) {
    goto LABEL_139;
  }
LABEL_112:
  size_t v68 = v67;
  if (v67 >= 0x17)
  {
    uint64_t v70 = (v67 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v67 | 7) != 0x17) {
      uint64_t v70 = v67 | 7;
    }
    uint64_t v71 = v70 + 1;
    __n128 v69 = operator new(v70 + 1);
    size_t v78 = (std::__shared_weak_count *)v68;
    unint64_t v79 = v71 | 0x8000000000000000;
    tm __p = v69;
  }
  else
  {
    HIBYTE(v79) = v67;
    __n128 v69 = &__p;
    if (!v67) {
      goto LABEL_119;
    }
  }
  memmove(v69, v29, v68);
LABEL_119:
  __n128 v72 = (const char *)*MEMORY[0x263F261D0];
  *((unsigned char *)v69 + v68) = 0;
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v87, v72);
  ctu::cf::map_adapter::getString();
  MEMORY[0x263E68C90](&v87);
  if (v83 >= 0) {
    uint64_t v73 = (const char *)&__dst;
  }
  else {
    uint64_t v73 = (const char *)__dst;
  }
  xpc_object_t v74 = xpc_string_create(v73);
  if (!v74) {
    xpc_object_t v74 = xpc_null_create();
  }
  xpc_dictionary_set_value(xdict, v72, v74);
  xpc_object_t v75 = xpc_null_create();
  xpc_release(v74);
  xpc_release(v75);
  if (SHIBYTE(v83) < 0)
  {
    operator delete((void *)__dst);
    if ((SHIBYTE(v79) & 0x80000000) == 0)
    {
LABEL_126:
      MEMORY[0x263E68CD0](v80);
      CFTypeRef v76 = v81;
      if (!v81) {
        goto LABEL_143;
      }
      goto LABEL_142;
    }
  }
  else if ((SHIBYTE(v79) & 0x80000000) == 0)
  {
    goto LABEL_126;
  }
  operator delete(__p);
  MEMORY[0x263E68CD0](v80);
  CFTypeRef v76 = v81;
  if (v81) {
LABEL_142:
  }
    CFRelease(v76);
LABEL_143:
  dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int &,xpc::dict&>((uint64_t *)(a1 + 40), &v86, &xdict);
  xpc_release(xdict);
}

void sub_2636DD0F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, const void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,xpc_object_t object)
{
  MEMORY[0x263E68C90](v23 - 72);
  if (a14 < 0) {
    operator delete(__p);
  }
  MEMORY[0x263E68CD0](&a15);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&a17);
  xpc_release(object);
  _Unwind_Resume(a1);
}

void *__copy_helper_block_e8_40c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void **)(a2 + 40);
  if (result) {
    uint64_t result = _Block_copy(result);
  }
  *(void *)(a1 + 40) = result;
  return result;
}

void __destroy_helper_block_e8_40c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE(uint64_t a1)
{
  uint64_t v1 = *(const void **)(a1 + 40);
  if (v1) {
    _Block_release(v1);
  }
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_25(void *a1, uint64_t a2, void **a3)
{
  uint64_t v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    uint64_t v6 = a1[4];
    xpc_object_t v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      uint64_t v8 = v7;
      if (a1[5])
      {
        v10[0] = MEMORY[0x263EF8330];
        v10[1] = 1174405120;
        v10[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_2_26;
        v10[3] = &__block_descriptor_tmp_32;
        v10[4] = v6;
        xpc_object_t v9 = *a3;
        if (*a3) {
          xpc_object_t v9 = _Block_copy(v9);
        }
        aBlocunint64_t k = v9;
        ctu::SharedSynchronizable<RadioModule>::execute_wrapped((uint64_t *)(v6 + 120), (uint64_t)v10);
        if (aBlock) {
          _Block_release(aBlock);
        }
      }
      if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_2_26(uint64_t a1)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void **)(a1 + 32);
  if ((*(unsigned int (**)(void *))(*v2 + 88))(v2))
  {
    memset(__p, 170, 24);
    uint64_t v3 = (const void *)*MEMORY[0x263F26728];
    size_t v4 = strlen((const char *)*MEMORY[0x263F26728]);
    if (v4 >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    std::string::size_type v5 = v4;
    if (v4 >= 0x17)
    {
      uint64_t v9 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v4 | 7) != 0x17) {
        uint64_t v9 = v4 | 7;
      }
      uint64_t v10 = v9 + 1;
      p_dst = (std::string *)operator new(v9 + 1);
      __dst.__r_.__value_.__l.__size_ = v5;
      __dst.__r_.__value_.__r.__words[2] = v10 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v4;
      p_dst = &__dst;
      if (!v4)
      {
LABEL_16:
        p_dst->__r_.__value_.__s.__data_[v5] = 0;
        xpc_object_t v11 = (char *)operator new(0x28uLL);
        strcpy(v11, " rejected; ABM is shutting down ");
        xpc_object_t v12 = std::string::append(&__dst, v11, 0x20uLL);
        long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
        __p[2] = (void *)v12->__r_.__value_.__r.__words[2];
        *(_OWORD *)tm __p = v13;
        v12->__r_.__value_.__l.__size_ = 0;
        v12->__r_.__value_.__r.__words[2] = 0;
        v12->__r_.__value_.__r.__words[0] = 0;
        operator delete(v11);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__dst.__r_.__value_.__l.__data_);
          long long v14 = v2[11];
          if (!os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
          {
LABEL_18:
            uint64_t v16 = *(void *)(a1 + 40);
            size_t v15 = (uint64_t *)(a1 + 40);
            if (!v16)
            {
LABEL_40:
              if (SHIBYTE(__p[2]) < 0) {
                operator delete(__p[0]);
              }
              return;
            }
LABEL_24:
            __dst.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
            size_t v19 = (void *)HIBYTE(__p[2]);
            if (SHIBYTE(__p[2]) < 0) {
              size_t v19 = __p[1];
            }
            if (v19)
            {
              xpc_object_t v20 = xpc_dictionary_create(0, 0, 0);
              if (v20 || (xpc_object_t v20 = xpc_null_create()) != 0)
              {
                if (MEMORY[0x263E6A240](v20) == MEMORY[0x263EF8708])
                {
                  xpc_retain(v20);
                  xpc_object_t v21 = v20;
                }
                else
                {
                  xpc_object_t v21 = xpc_null_create();
                }
              }
              else
              {
                xpc_object_t v21 = xpc_null_create();
                xpc_object_t v20 = 0;
              }
              xpc_release(v20);
              xpc_object_t v22 = xpc_null_create();
              uint64_t v23 = (void *)__dst.__r_.__value_.__r.__words[0];
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v21;
              xpc_release(v23);
              xpc_release(v22);
              if (SHIBYTE(__p[2]) >= 0) {
                uint64_t v24 = __p;
              }
              else {
                uint64_t v24 = (void **)__p[0];
              }
              xpc_object_t v25 = xpc_string_create((const char *)v24);
              if (!v25) {
                xpc_object_t v25 = xpc_null_create();
              }
              xpc_dictionary_set_value(v21, (const char *)*MEMORY[0x263F25EB8], v25);
              xpc_object_t v26 = xpc_null_create();
              xpc_release(v25);
              xpc_release(v26);
            }
            unsigned int v30 = -534716415;
            dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(v15, &v30, (void **)&__dst.__r_.__value_.__l.__data_);
            xpc_release(__dst.__r_.__value_.__l.__data_);
            goto LABEL_40;
          }
        }
        else
        {
          long long v14 = v2[11];
          if (!os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_18;
          }
        }
        long long v17 = __p;
        if (SHIBYTE(__p[2]) < 0) {
          long long v17 = (void **)__p[0];
        }
        LODWORD(__dst.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = (std::string::size_type)v17;
        _os_log_impl(&dword_26368A000, v14, OS_LOG_TYPE_DEFAULT, "#I %s", (uint8_t *)&__dst, 0xCu);
        uint64_t v18 = *(void *)(a1 + 40);
        size_t v15 = (uint64_t *)(a1 + 40);
        if (!v18) {
          goto LABEL_40;
        }
        goto LABEL_24;
      }
    }
    memmove(p_dst, v3, v5);
    goto LABEL_16;
  }
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_27;
  aBlock[3] = &__block_descriptor_tmp_29;
  xpc_object_t v7 = *(void **)(a1 + 40);
  if (v7) {
    xpc_object_t v7 = _Block_copy(v7);
  }
  CFDictionaryRef v28 = v7;
  uint64_t v8 = _Block_copy(aBlock);
  xpc_object_t v29 = v8;
  RadioModule::getOperatingMode_sync((uint64_t)v2, &v29);
  if (v8) {
    _Block_release(v8);
  }
  if (v28) {
    _Block_release(v28);
  }
}

void sub_2636DD7B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *aBlock, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void RadioModule::getOperatingMode_sync(uint64_t a1, void **a2)
{
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 128);
  if (!v3 || (uint64_t v5 = *(void *)(a1 + 120), (v6 = std::__shared_weak_count::lock(v3)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  xpc_object_t v7 = v6;
  p_shared_weak_owners = &v6->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v7);
  }
  uint64_t v33 = (void *)0xAAAAAAAAAAAAAAAALL;
  dispatch_object_t v34 = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN11RadioModule21getOperatingMode_syncEN8dispatch5blockIU13block_pointerFviEEE_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_178;
  void aBlock[4] = a1;
  aBlock[5] = v5;
  size_t v31 = v7;
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  uint64_t v9 = *a2;
  if (*a2) {
    uint64_t v9 = _Block_copy(v9);
  }
  xpc_object_t v32 = v9;
  uint64_t v10 = _Block_copy(aBlock);
  xpc_object_t v11 = *(NSObject **)(a1 + 136);
  if (v11) {
    dispatch_retain(*(dispatch_object_t *)(a1 + 136));
  }
  uint64_t v33 = v10;
  dispatch_object_t v34 = v11;
  unint64_t v28 = 0xAAAAAAAAAAAAAAAALL;
  xpc_object_t v29 = (std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL;
  xpc_object_t v12 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  uint64_t v13 = off_26A99F170;
  if (!off_26A99F170)
  {
    CommandDriverFactory::create_default_global((uint64_t *)buf, v12);
    long long v14 = *(_OWORD *)buf;
    memset(buf, 0, sizeof(buf));
    size_t v15 = (std::__shared_weak_count *)*(&off_26A99F170 + 1);
    off_26A99F170 = v14;
    if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
    uint64_t v16 = *(std::__shared_weak_count **)&buf[8];
    if (*(void *)&buf[8]
      && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
    uint64_t v13 = off_26A99F170;
  }
  long long v17 = (std::__shared_weak_count *)*(&off_26A99F170 + 1);
  uint64_t v24 = v13;
  uint64_t v25 = *(&off_26A99F170 + 1);
  if (*(&off_26A99F170 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_26A99F170 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(unint64_t *__return_ptr, uint64_t))(*(void *)v13 + 16))(&v26, v13);
  unint64_t v28 = 0;
  xpc_object_t v29 = 0;
  if (v27)
  {
    xpc_object_t v29 = std::__shared_weak_count::lock(v27);
    if (v29) {
      unint64_t v28 = v26;
    }
    if (v27) {
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  if (v17 && !atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
    unint64_t v18 = v28;
    if (!v28) {
      goto LABEL_37;
    }
  }
  else
  {
    unint64_t v18 = v28;
    if (!v28) {
      goto LABEL_37;
    }
  }
  size_t v19 = *(NSObject **)(a1 + 88);
  if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl(&dword_26368A000, v19, OS_LOG_TYPE_DEFAULT, "#I Request to get operating mode", buf, 2u);
  }
  xpc_object_t v20 = v33;
  if (v33) {
    xpc_object_t v20 = _Block_copy(v33);
  }
  xpc_object_t v22 = v20;
  dispatch_object_t object = v34;
  if (v34) {
    dispatch_retain(v34);
  }
  (*(void (**)(unint64_t, void **))(*(void *)v18 + 160))(v18, &v22);
  if (object) {
    dispatch_release(object);
  }
  if (v22) {
    _Block_release(v22);
  }
LABEL_37:
  xpc_object_t v21 = v29;
  if (v29 && !atomic_fetch_add(&v29->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v21);
  }
  if (v34) {
    dispatch_release(v34);
  }
  if (v33) {
    _Block_release(v33);
  }
  if (v32) {
    _Block_release(v32);
  }
  if (v31) {
    std::__shared_weak_count::__release_weak(v31);
  }
  std::__shared_weak_count::__release_weak(v7);
}

void sub_2636DDC84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,std::__shared_weak_count *a23,void *aBlock)
{
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>::~callback(v25 - 80);
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (a23) {
    std::__shared_weak_count::__release_weak(a23);
  }
  std::__shared_weak_count::__release_weak(v24);
  _Unwind_Resume(a1);
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_27(uint64_t a1, int a2)
{
  xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v5 = v4;
  if (v4)
  {
    xpc_object_t xdict = v4;
  }
  else
  {
    xpc_object_t v5 = xpc_null_create();
    xpc_object_t xdict = v5;
    if (!v5)
    {
      xpc_object_t v6 = xpc_null_create();
      xpc_object_t v5 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x263E6A240](v5) == MEMORY[0x263EF8708])
  {
    xpc_retain(v5);
    goto LABEL_9;
  }
  xpc_object_t v6 = xpc_null_create();
LABEL_8:
  xpc_object_t xdict = v6;
LABEL_9:
  xpc_release(v5);
  xpc_object_t v7 = xpc_int64_create(a2);
  if (!v7) {
    xpc_object_t v7 = xpc_null_create();
  }
  xpc_dictionary_set_value(xdict, (const char *)*MEMORY[0x263F26430], v7);
  xpc_object_t v8 = xpc_null_create();
  xpc_release(v7);
  xpc_release(v8);
  unsigned int v9 = (a2 >> 31) & 0xE020E002;
  dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>((uint64_t *)(a1 + 32), &v9, &xdict);
  xpc_release(xdict);
}

void sub_2636DDE38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
}

void *__copy_helper_block_e8_32c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void **)(a2 + 32);
  if (result) {
    uint64_t result = _Block_copy(result);
  }
  *(void *)(a1 + 32) = result;
  return result;
}

void __destroy_helper_block_e8_32c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE(uint64_t a1)
{
  uint64_t v1 = *(const void **)(a1 + 32);
  if (v1) {
    _Block_release(v1);
  }
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_36(void *a1, xpc_object_t *a2, void (***a3)(void *, uint64_t, xpc_object_t *))
{
  xpc_object_t v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    uint64_t v7 = a1[4];
    xpc_object_t v8 = std::__shared_weak_count::lock(v4);
    unint64_t v26 = v8;
    if (v8)
    {
      unsigned int v9 = v8;
      if (a1[5])
      {
        xpc_object_t value = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x263F25DB8]);
        xpc_object_t v27 = value;
        if (value) {
          xpc_retain(value);
        }
        else {
          xpc_object_t v27 = xpc_null_create();
        }
        int v11 = xpc::dyn_cast_or_default((xpc *)&v27, (const object *)0x2710);
        xpc_release(v27);
        xpc_object_t v12 = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x263F26430]);
        xpc_object_t v27 = v12;
        if (v12) {
          xpc_retain(v12);
        }
        else {
          xpc_object_t v27 = xpc_null_create();
        }
        int v13 = xpc::dyn_cast_or_default((xpc *)&v27, (const object *)0xFFFFFFFFLL);
        xpc_release(v27);
        xpc_object_t v14 = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x263F26698]);
        xpc_object_t v27 = v14;
        if (v14) {
          xpc_retain(v14);
        }
        else {
          xpc_object_t v27 = xpc_null_create();
        }
        char v15 = xpc::dyn_cast_or_default((xpc *)&v27, 0);
        xpc_release(v27);
        if (v13 < 0)
        {
          xpc_object_t v17 = xpc_null_create();
          unint64_t v18 = *a3;
          xpc_object_t v27 = v17;
          xpc_object_t v19 = xpc_null_create();
          v18[2](v18, 3760250882, &v27);
          xpc_release(v27);
          xpc_release(v19);
        }
        else
        {
          v20[0] = MEMORY[0x263EF8330];
          v20[1] = 1174405120;
          v20[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_2_37;
          void v20[3] = &__block_descriptor_tmp_45_1;
          v20[4] = v7;
          uint64_t v16 = *a3;
          if (*a3) {
            uint64_t v16 = (void (**)(void *, uint64_t, xpc_object_t *))_Block_copy(v16);
          }
          aBlocunint64_t k = v16;
          int v22 = v11;
          int v23 = v13;
          char v24 = v15;
          ctu::SharedSynchronizable<RadioModule>::execute_wrapped((uint64_t *)(v7 + 120), (uint64_t)v20);
          if (aBlock) {
            _Block_release(aBlock);
          }
        }
      }
      if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
}

void sub_2636DE120(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  xpc_release(*(xpc_object_t *)(v11 - 56));
  xpc_release(v10);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_2_37(uint64_t a1)
{
  uint64_t v36 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void **)(a1 + 32);
  if ((*(unsigned int (**)(void *))(*v2 + 88))(v2))
  {
    memset(__p, 170, 24);
    uint64_t v3 = (const void *)*MEMORY[0x263F26738];
    size_t v4 = strlen((const char *)*MEMORY[0x263F26738]);
    if (v4 >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    std::string::size_type v5 = v4;
    if (v4 >= 0x17)
    {
      uint64_t v12 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v4 | 7) != 0x17) {
        uint64_t v12 = v4 | 7;
      }
      uint64_t v13 = v12 + 1;
      p_dst = (std::string *)operator new(v12 + 1);
      __dst.__r_.__value_.__l.__size_ = v5;
      __dst.__r_.__value_.__r.__words[2] = v13 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v4;
      p_dst = &__dst;
      if (!v4)
      {
LABEL_16:
        p_dst->__r_.__value_.__s.__data_[v5] = 0;
        xpc_object_t v14 = (char *)operator new(0x28uLL);
        strcpy(v14, " rejected; ABM is shutting down ");
        char v15 = std::string::append(&__dst, v14, 0x20uLL);
        long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
        __p[2] = (void *)v15->__r_.__value_.__r.__words[2];
        *(_OWORD *)tm __p = v16;
        v15->__r_.__value_.__l.__size_ = 0;
        v15->__r_.__value_.__r.__words[2] = 0;
        v15->__r_.__value_.__r.__words[0] = 0;
        operator delete(v14);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__dst.__r_.__value_.__l.__data_);
          xpc_object_t v17 = v2[11];
          if (!os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
          {
LABEL_18:
            uint64_t v19 = *(void *)(a1 + 40);
            unint64_t v18 = (uint64_t *)(a1 + 40);
            if (!v19)
            {
LABEL_40:
              if (SHIBYTE(__p[2]) < 0) {
                operator delete(__p[0]);
              }
              return;
            }
LABEL_24:
            __dst.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
            int v22 = (void *)HIBYTE(__p[2]);
            if (SHIBYTE(__p[2]) < 0) {
              int v22 = __p[1];
            }
            if (v22)
            {
              xpc_object_t v23 = xpc_dictionary_create(0, 0, 0);
              if (v23 || (xpc_object_t v23 = xpc_null_create()) != 0)
              {
                if (MEMORY[0x263E6A240](v23) == MEMORY[0x263EF8708])
                {
                  xpc_retain(v23);
                  xpc_object_t v24 = v23;
                }
                else
                {
                  xpc_object_t v24 = xpc_null_create();
                }
              }
              else
              {
                xpc_object_t v24 = xpc_null_create();
                xpc_object_t v23 = 0;
              }
              xpc_release(v23);
              xpc_object_t v25 = xpc_null_create();
              unint64_t v26 = (void *)__dst.__r_.__value_.__r.__words[0];
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v24;
              xpc_release(v26);
              xpc_release(v25);
              if (SHIBYTE(__p[2]) >= 0) {
                xpc_object_t v27 = __p;
              }
              else {
                xpc_object_t v27 = (void **)__p[0];
              }
              xpc_object_t v28 = xpc_string_create((const char *)v27);
              if (!v28) {
                xpc_object_t v28 = xpc_null_create();
              }
              xpc_dictionary_set_value(v24, (const char *)*MEMORY[0x263F25EB8], v28);
              xpc_object_t v29 = xpc_null_create();
              xpc_release(v28);
              xpc_release(v29);
            }
            unsigned int v33 = -534716415;
            dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(v18, &v33, (void **)&__dst.__r_.__value_.__l.__data_);
            xpc_release(__dst.__r_.__value_.__l.__data_);
            goto LABEL_40;
          }
        }
        else
        {
          xpc_object_t v17 = v2[11];
          if (!os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_18;
          }
        }
        xpc_object_t v20 = __p;
        if (SHIBYTE(__p[2]) < 0) {
          xpc_object_t v20 = (void **)__p[0];
        }
        LODWORD(__dst.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = (std::string::size_type)v20;
        _os_log_impl(&dword_26368A000, v17, OS_LOG_TYPE_DEFAULT, "#I %s", (uint8_t *)&__dst, 0xCu);
        uint64_t v21 = *(void *)(a1 + 40);
        unint64_t v18 = (uint64_t *)(a1 + 40);
        if (!v21) {
          goto LABEL_40;
        }
        goto LABEL_24;
      }
    }
    memmove(p_dst, v3, v5);
    goto LABEL_16;
  }
  unsigned int v7 = *(_DWORD *)(a1 + 48);
  int v8 = *(_DWORD *)(a1 + 52);
  int v9 = *(unsigned __int8 *)(a1 + 56);
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_38;
  aBlock[3] = &__block_descriptor_tmp_42_0;
  uint64_t v10 = *(void **)(a1 + 40);
  if (v10) {
    uint64_t v10 = _Block_copy(v10);
  }
  size_t v31 = v10;
  uint64_t v11 = _Block_copy(aBlock);
  xpc_object_t v32 = v11;
  RadioModule::setOperatingMode_sync(v2, v7, v8, v9 != 0, &v32);
  if (v11) {
    _Block_release(v11);
  }
  if (v31) {
    _Block_release(v31);
  }
}

void sub_2636DE5D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *aBlock, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void RadioModule::setOperatingMode_sync(void *a1, unsigned int a2, uint64_t a3, int a4, void **a5)
{
  xpc_object_t v6 = (std::__shared_weak_count *)a1[16];
  if (!v6 || (uint64_t v11 = a1[15], (v12 = std::__shared_weak_count::lock(v6)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v13 = v12;
  p_shared_weak_owners = &v12->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v12->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v13);
  }
  size_t v41 = (void *)0xAAAAAAAAAAAAAAAALL;
  dispatch_object_t v42 = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN11RadioModule21setOperatingMode_syncEjN5radio13OperatingModeEbN8dispatch5blockIU13block_pointerFvbEEE_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_197;
  void aBlock[4] = a1;
  aBlock[5] = v11;
  xpc_object_t v39 = v13;
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  char v15 = *a5;
  if (*a5) {
    char v15 = _Block_copy(v15);
  }
  size_t v40 = v15;
  long long v16 = _Block_copy(aBlock);
  xpc_object_t v17 = a1[17];
  if (v17) {
    dispatch_retain(v17);
  }
  size_t v41 = v16;
  dispatch_object_t v42 = v17;
  unint64_t v36 = 0xAAAAAAAAAAAAAAAALL;
  std::string v37 = (std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL;
  unint64_t v18 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  uint64_t v19 = off_26A99F170;
  if (!off_26A99F170)
  {
    CommandDriverFactory::create_default_global((uint64_t *)&v43, v18);
    long long v20 = v43;
    long long v43 = 0uLL;
    uint64_t v21 = (std::__shared_weak_count *)*(&off_26A99F170 + 1);
    off_26A99F170 = v20;
    if (v21 && !atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
    int v22 = (std::__shared_weak_count *)*((void *)&v43 + 1);
    if (*((void *)&v43 + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v43 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
    uint64_t v19 = off_26A99F170;
  }
  xpc_object_t v23 = (std::__shared_weak_count *)*(&off_26A99F170 + 1);
  uint64_t v32 = v19;
  uint64_t v33 = *(&off_26A99F170 + 1);
  if (*(&off_26A99F170 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_26A99F170 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(unint64_t *__return_ptr, uint64_t))(*(void *)v19 + 16))(&v34, v19);
  unint64_t v36 = 0;
  std::string v37 = 0;
  if (v35)
  {
    std::string v37 = std::__shared_weak_count::lock(v35);
    if (v37) {
      unint64_t v36 = v34;
    }
    if (v35) {
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  if (v23 && !atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
    unint64_t v24 = v36;
    if (!v36) {
      goto LABEL_45;
    }
  }
  else
  {
    unint64_t v24 = v36;
    if (!v36) {
      goto LABEL_45;
    }
  }
  uint64_t v25 = 1000000 * a2;
  unint64_t v26 = v41;
  if (a4)
  {
    if (v41) {
      unint64_t v26 = _Block_copy(v41);
    }
    unsigned int v30 = v26;
    dispatch_object_t object = v42;
    if (v42) {
      dispatch_retain(v42);
    }
    (*(void (**)(unint64_t, uint64_t, uint64_t, void **))(*(void *)v24 + 152))(v24, v25, a3, &v30);
    if (object) {
      dispatch_release(object);
    }
    if (v30) {
      _Block_release(v30);
    }
  }
  else
  {
    if (v41) {
      unint64_t v26 = _Block_copy(v41);
    }
    xpc_object_t v28 = v26;
    dispatch_object_t v29 = v42;
    if (v42) {
      dispatch_retain(v42);
    }
    (*(void (**)(unint64_t, uint64_t, uint64_t, void **))(*(void *)v24 + 144))(v24, v25, a3, &v28);
    if (v29) {
      dispatch_release(v29);
    }
    if (v28) {
      _Block_release(v28);
    }
  }
LABEL_45:
  xpc_object_t v27 = v37;
  if (v37 && !atomic_fetch_add(&v37->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
    std::__shared_weak_count::__release_weak(v27);
  }
  if (v42) {
    dispatch_release(v42);
  }
  if (v41) {
    _Block_release(v41);
  }
  if (v40) {
    _Block_release(v40);
  }
  if (v39) {
    std::__shared_weak_count::__release_weak(v39);
  }
  std::__shared_weak_count::__release_weak(v13);
}

void sub_2636DEB10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,std::__shared_weak_count *a25,void *aBlock)
{
  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>::~callback((uint64_t)&a9);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>::~callback(v27 - 112);
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (a25) {
    std::__shared_weak_count::__release_weak(a25);
  }
  std::__shared_weak_count::__release_weak(v26);
  _Unwind_Resume(a1);
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_38(uint64_t a1, int a2)
{
  if (a2) {
    uint64_t v3 = 0;
  }
  else {
    uint64_t v3 = 3760250880;
  }
  xpc_object_t v4 = xpc_null_create();
  uint64_t v5 = *(void *)(a1 + 32);
  xpc_object_t object = v4;
  xpc_object_t v6 = xpc_null_create();
  (*(void (**)(uint64_t, uint64_t, xpc_object_t *))(v5 + 16))(v5, v3, &object);
  xpc_release(object);
  xpc_release(v6);
}

void sub_2636DEC2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  xpc_release(object);
  xpc_release(v10);
  _Unwind_Resume(a1);
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_49(void *a1, uint64_t a2, const void **a3)
{
  xpc_object_t v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    uint64_t v6 = a1[4];
    unsigned int v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      int v8 = v7;
      uint64_t v9 = a1[5];
      if (!v9)
      {
LABEL_11:
        if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
        return;
      }
      v14[0] = MEMORY[0x263EF8330];
      v14[1] = 1174405120;
      v14[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_2_50;
      void v14[3] = &__block_descriptor_tmp_57_1;
      v14[4] = v6;
      if (*a3)
      {
        uint64_t v10 = _Block_copy(*a3);
        uint64_t v11 = a1[5];
        uint64_t v12 = (uint64_t *)(v6 + 120);
        aBlocunint64_t k = v10;
        uint64_t v16 = v11;
        uint64_t v13 = (std::__shared_weak_count *)a1[6];
        xpc_object_t v17 = v13;
        if (!v13)
        {
LABEL_7:
          ctu::SharedSynchronizable<RadioModule>::execute_wrapped(v12, (uint64_t)v14);
          if (v17) {
            std::__shared_weak_count::__release_weak(v17);
          }
          if (aBlock) {
            _Block_release(aBlock);
          }
          goto LABEL_11;
        }
      }
      else
      {
        uint64_t v12 = (uint64_t *)(v6 + 120);
        aBlocunint64_t k = 0;
        uint64_t v16 = v9;
        uint64_t v13 = (std::__shared_weak_count *)a1[6];
        xpc_object_t v17 = v13;
        if (!v13) {
          goto LABEL_7;
        }
      }
      atomic_fetch_add_explicit(&v13->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      goto LABEL_7;
    }
  }
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_2_50(void *a1)
{
  uint64_t v52 = *MEMORY[0x263EF8340];
  uint64_t v2 = (void *)a1[4];
  if ((*(unsigned int (**)(void *))(*v2 + 88))(v2))
  {
    memset(__p, 170, 24);
    uint64_t v3 = (const void *)*MEMORY[0x263F26720];
    size_t v4 = strlen((const char *)*MEMORY[0x263F26720]);
    if (v4 >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    std::string::size_type v5 = v4;
    if (v4 >= 0x17)
    {
      uint64_t v21 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v4 | 7) != 0x17) {
        uint64_t v21 = v4 | 7;
      }
      uint64_t v22 = v21 + 1;
      p_dst = (std::string *)operator new(v21 + 1);
      __dst.__r_.__value_.__l.__size_ = v5;
      __dst.__r_.__value_.__r.__words[2] = v22 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v4;
      p_dst = &__dst;
      if (!v4)
      {
LABEL_53:
        p_dst->__r_.__value_.__s.__data_[v5] = 0;
        xpc_object_t v23 = (char *)operator new(0x28uLL);
        strcpy(v23, " rejected; ABM is shutting down ");
        unint64_t v24 = std::string::append(&__dst, v23, 0x20uLL);
        long long v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
        __p[2] = (void *)v24->__r_.__value_.__r.__words[2];
        *(_OWORD *)tm __p = v25;
        v24->__r_.__value_.__l.__size_ = 0;
        v24->__r_.__value_.__r.__words[2] = 0;
        v24->__r_.__value_.__r.__words[0] = 0;
        operator delete(v23);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__dst.__r_.__value_.__l.__data_);
          unint64_t v26 = v2[11];
          if (!os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
          {
LABEL_55:
            uint64_t v28 = a1[5];
            uint64_t v27 = a1 + 5;
            if (!v28)
            {
LABEL_79:
              if (SHIBYTE(__p[2]) < 0) {
                operator delete(__p[0]);
              }
              return;
            }
LABEL_61:
            __dst.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
            size_t v31 = (void *)HIBYTE(__p[2]);
            if (SHIBYTE(__p[2]) < 0) {
              size_t v31 = __p[1];
            }
            if (v31)
            {
              xpc_object_t v32 = xpc_dictionary_create(0, 0, 0);
              if (v32 || (xpc_object_t v32 = xpc_null_create()) != 0)
              {
                if (MEMORY[0x263E6A240](v32) == MEMORY[0x263EF8708])
                {
                  xpc_retain(v32);
                  xpc_object_t v33 = v32;
                }
                else
                {
                  xpc_object_t v33 = xpc_null_create();
                }
              }
              else
              {
                xpc_object_t v33 = xpc_null_create();
                xpc_object_t v32 = 0;
              }
              xpc_release(v32);
              xpc_object_t v34 = xpc_null_create();
              uint64_t v35 = (void *)__dst.__r_.__value_.__r.__words[0];
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v33;
              xpc_release(v35);
              xpc_release(v34);
              if (SHIBYTE(__p[2]) >= 0) {
                unint64_t v36 = __p;
              }
              else {
                unint64_t v36 = (void **)__p[0];
              }
              xpc_object_t v37 = xpc_string_create((const char *)v36);
              if (!v37) {
                xpc_object_t v37 = xpc_null_create();
              }
              xpc_dictionary_set_value(v33, (const char *)*MEMORY[0x263F25EB8], v37);
              xpc_object_t v38 = xpc_null_create();
              xpc_release(v37);
              xpc_release(v38);
            }
            LODWORD(v45) = -534716415;
            dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(v27, (unsigned int *)&v45, (void **)&__dst.__r_.__value_.__l.__data_);
            xpc_release(__dst.__r_.__value_.__l.__data_);
            goto LABEL_79;
          }
        }
        else
        {
          unint64_t v26 = v2[11];
          if (!os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_55;
          }
        }
        dispatch_object_t v29 = __p;
        if (SHIBYTE(__p[2]) < 0) {
          dispatch_object_t v29 = (void **)__p[0];
        }
        LODWORD(__dst.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = (std::string::size_type)v29;
        _os_log_impl(&dword_26368A000, v26, OS_LOG_TYPE_DEFAULT, "#I %s", (uint8_t *)&__dst, 0xCu);
        uint64_t v30 = a1[5];
        uint64_t v27 = a1 + 5;
        if (!v30) {
          goto LABEL_79;
        }
        goto LABEL_61;
      }
    }
    memmove(p_dst, v3, v5);
    goto LABEL_53;
  }
  __dst.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
  __dst.__r_.__value_.__l.__size_ = 0xAAAAAAAAAAAAAAAALL;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_51;
  aBlock[3] = &__block_descriptor_tmp_54_0;
  uint64_t v8 = a1[6];
  unsigned int v7 = (std::__shared_weak_count *)a1[7];
  void aBlock[4] = v2;
  aBlock[5] = v8;
  xpc_object_t v48 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v9 = (void *)a1[5];
  if (v9) {
    uint64_t v9 = _Block_copy(v9);
  }
  size_t v49 = v9;
  uint64_t v10 = _Block_copy(aBlock);
  uint64_t v11 = v2[17];
  if (v11) {
    dispatch_retain(v11);
  }
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v10;
  __dst.__r_.__value_.__l.__size_ = (std::string::size_type)v11;
  unint64_t v45 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v46 = (std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL;
  uint64_t v12 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  uint64_t v13 = off_26A99F170;
  if (!off_26A99F170)
  {
    CommandDriverFactory::create_default_global((uint64_t *)__p, v12);
    long long v14 = *(_OWORD *)__p;
    __p[0] = 0;
    __p[1] = 0;
    char v15 = (std::__shared_weak_count *)*(&off_26A99F170 + 1);
    off_26A99F170 = v14;
    if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
    uint64_t v16 = (std::__shared_weak_count *)__p[1];
    if (__p[1] && !atomic_fetch_add((atomic_ullong *volatile)__p[1] + 1, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
    uint64_t v13 = off_26A99F170;
  }
  xpc_object_t v17 = (std::__shared_weak_count *)*(&off_26A99F170 + 1);
  uint64_t v41 = v13;
  uint64_t v42 = *(&off_26A99F170 + 1);
  if (*(&off_26A99F170 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_26A99F170 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(unint64_t *__return_ptr, uint64_t))(*(void *)v13 + 16))(&v43, v13);
  unint64_t v45 = 0;
  uint64_t v46 = 0;
  if (v44)
  {
    uint64_t v46 = std::__shared_weak_count::lock(v44);
    if (v46) {
      unint64_t v45 = v43;
    }
    if (v44) {
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  if (v17 && !atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
    unint64_t v18 = v45;
    if (v45) {
      goto LABEL_30;
    }
  }
  else
  {
    unint64_t v18 = v45;
    if (v45)
    {
LABEL_30:
      uint64_t v19 = (void *)__dst.__r_.__value_.__r.__words[0];
      if (__dst.__r_.__value_.__r.__words[0]) {
        uint64_t v19 = _Block_copy(__dst.__r_.__value_.__l.__data_);
      }
      xpc_object_t v39 = v19;
      dispatch_object_t object = (dispatch_object_t)__dst.__r_.__value_.__l.__size_;
      if (__dst.__r_.__value_.__l.__size_) {
        dispatch_retain((dispatch_object_t)__dst.__r_.__value_.__l.__size_);
      }
      (*(void (**)(unint64_t, void **))(*(void *)v18 + 104))(v18, &v39);
      if (object) {
        dispatch_release(object);
      }
      if (v39) {
        _Block_release(v39);
      }
    }
  }
  long long v20 = v46;
  if (v46 && !atomic_fetch_add(&v46->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
  if (__dst.__r_.__value_.__l.__size_) {
    dispatch_release((dispatch_object_t)__dst.__r_.__value_.__l.__size_);
  }
  if (__dst.__r_.__value_.__r.__words[0]) {
    _Block_release(__dst.__r_.__value_.__l.__data_);
  }
  if (v49) {
    _Block_release(v49);
  }
  if (v48) {
    std::__shared_weak_count::__release_weak(v48);
  }
}

void sub_2636DF428(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,std::__shared_weak_count *a23,void *aBlock,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_51(void *a1, uint64_t *a2, ctu **a3)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  size_t v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    uint64_t v7 = a1[4];
    uint64_t v8 = std::__shared_weak_count::lock(v4);
    long long v25 = v8;
    if (v8)
    {
      uint64_t v9 = v8;
      if (!a1[5]) {
        goto LABEL_23;
      }
      xpc_object_t v11 = xpc_null_create();
      xpc_object_t object = v11;
      unsigned int v22 = -534716416;
      uint64_t v12 = *a2;
      if (v12) {
        uint64_t v13 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
      }
      else {
        uint64_t v13 = 0;
      }
      if (v13)
      {
        long long v14 = *(NSObject **)(v7 + 88);
        if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)std::string buf = 138412290;
          *(void *)&uint8_t buf[4] = v12;
          char v15 = "%@";
          uint64_t v16 = v14;
          uint32_t v17 = 12;
LABEL_10:
          _os_log_error_impl(&dword_26368A000, v16, OS_LOG_TYPE_ERROR, v15, buf, v17);
        }
      }
      else
      {
        if (*a3) {
          unint64_t v18 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
        }
        else {
          unint64_t v18 = 0;
        }
        if (v18)
        {
          ctu::cf_to_xpc((uint64_t *)buf, *a3, v10);
          xpc_object_t v19 = *(xpc_object_t *)buf;
          if (*(void *)buf && MEMORY[0x263E6A240](*(void *)buf) == MEMORY[0x263EF8708]) {
            xpc_retain(v19);
          }
          else {
            xpc_object_t v19 = xpc_null_create();
          }
          xpc_object_t v21 = xpc_null_create();
          xpc_object_t object = v19;
          xpc_release(v11);
          xpc_release(v21);
          xpc_release(*(xpc_object_t *)buf);
          unsigned int v22 = 0;
          goto LABEL_22;
        }
        long long v20 = *(NSObject **)(v7 + 88);
        if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)std::string buf = 0;
          char v15 = "Empty response received with no error";
          uint64_t v16 = v20;
          uint32_t v17 = 2;
          goto LABEL_10;
        }
      }
LABEL_22:
      dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int &,xpc::dict&>(a1 + 7, &v22, &object);
      xpc_release(object);
LABEL_23:
      if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
}

void sub_2636DF78C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_61(void *a1, uint64_t a2, void **a3)
{
  size_t v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    uint64_t v6 = a1[4];
    uint64_t v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      uint64_t v8 = v7;
      if (a1[5])
      {
        v10[0] = MEMORY[0x263EF8330];
        v10[1] = 1174405120;
        v10[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_2_62;
        v10[3] = &__block_descriptor_tmp_65_0;
        v10[4] = v6;
        uint64_t v9 = *a3;
        if (*a3) {
          uint64_t v9 = _Block_copy(v9);
        }
        aBlocunint64_t k = v9;
        ctu::SharedSynchronizable<RadioModule>::execute_wrapped((uint64_t *)(v6 + 120), (uint64_t)v10);
        if (aBlock) {
          _Block_release(aBlock);
        }
      }
      if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_2_62(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  unsigned int v2 = 0;
  dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>((uint64_t *)(a1 + 40), &v2, (void **)(v1 + 248));
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_69(void *a1, void **a2, const void **a3)
{
  size_t v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    uint64_t v7 = a1[4];
    uint64_t v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      uint64_t v9 = v8;
      if (!a1[5])
      {
LABEL_12:
        if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
        return;
      }
      v14[0] = MEMORY[0x263EF8330];
      v14[1] = 1174405120;
      v14[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_2_70;
      void v14[3] = &__block_descriptor_tmp_77;
      v14[4] = v7;
      if (*a3)
      {
        uint64_t v10 = _Block_copy(*a3);
        xpc_object_t v11 = *a2;
        aBlocunint64_t k = v10;
        xpc_object_t object = v11;
        if (v11) {
          goto LABEL_6;
        }
      }
      else
      {
        xpc_object_t v11 = *a2;
        aBlocunint64_t k = 0;
        xpc_object_t object = v11;
        if (v11)
        {
LABEL_6:
          xpc_retain(v11);
          uint64_t v12 = (uint64_t *)(v7 + 120);
          uint64_t v13 = (std::__shared_weak_count *)a1[6];
          uint64_t v17 = a1[5];
          unint64_t v18 = v13;
          if (!v13)
          {
LABEL_8:
            ctu::SharedSynchronizable<RadioModule>::execute_wrapped(v12, (uint64_t)v14);
            if (v18) {
              std::__shared_weak_count::__release_weak(v18);
            }
            xpc_release(object);
            xpc_object_t object = 0;
            if (aBlock) {
              _Block_release(aBlock);
            }
            goto LABEL_12;
          }
LABEL_7:
          atomic_fetch_add_explicit(&v13->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          goto LABEL_8;
        }
      }
      xpc_object_t object = xpc_null_create();
      uint64_t v12 = (uint64_t *)(v7 + 120);
      uint64_t v13 = (std::__shared_weak_count *)a1[6];
      uint64_t v17 = a1[5];
      unint64_t v18 = v13;
      if (!v13) {
        goto LABEL_8;
      }
      goto LABEL_7;
    }
  }
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_2_70(void *a1)
{
  uint64_t v55 = *MEMORY[0x263EF8340];
  unsigned int v2 = (void *)a1[4];
  if ((*(unsigned int (**)(void *))(*v2 + 88))(v2))
  {
    memset(object, 170, 24);
    uint64_t v3 = (const void *)*MEMORY[0x263F26590];
    size_t v4 = strlen((const char *)*MEMORY[0x263F26590]);
    if (v4 >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    std::string::size_type v5 = v4;
    if (v4 >= 0x17)
    {
      uint64_t v10 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v4 | 7) != 0x17) {
        uint64_t v10 = v4 | 7;
      }
      uint64_t v11 = v10 + 1;
      p_dst = (std::string *)operator new(v10 + 1);
      __dst.__r_.__value_.__l.__size_ = v5;
      __dst.__r_.__value_.__r.__words[2] = v11 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v4;
      p_dst = &__dst;
      if (!v4)
      {
LABEL_12:
        p_dst->__r_.__value_.__s.__data_[v5] = 0;
        uint64_t v12 = (char *)operator new(0x28uLL);
        strcpy(v12, " rejected; ABM is shutting down ");
        uint64_t v13 = std::string::append(&__dst, v12, 0x20uLL);
        long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
        object[2] = (xpc_object_t)v13->__r_.__value_.__r.__words[2];
        *(_OWORD *)xpc_object_t object = v14;
        v13->__r_.__value_.__l.__size_ = 0;
        v13->__r_.__value_.__r.__words[2] = 0;
        v13->__r_.__value_.__r.__words[0] = 0;
        operator delete(v12);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__dst.__r_.__value_.__l.__data_);
          char v15 = v2[11];
          if (!os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
          {
LABEL_14:
            uint64_t v17 = a1[5];
            uint64_t v16 = a1 + 5;
            if (!v17)
            {
LABEL_83:
              if (SHIBYTE(object[2]) < 0) {
                operator delete(object[0]);
              }
              return;
            }
LABEL_41:
            __dst.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
            xpc_object_t v29 = (xpc_object_t)HIBYTE(object[2]);
            if (SHIBYTE(object[2]) < 0) {
              xpc_object_t v29 = object[1];
            }
            if (v29)
            {
              xpc_object_t v30 = xpc_dictionary_create(0, 0, 0);
              if (v30 || (xpc_object_t v30 = xpc_null_create()) != 0)
              {
                if (MEMORY[0x263E6A240](v30) == MEMORY[0x263EF8708])
                {
                  xpc_retain(v30);
                  xpc_object_t v31 = v30;
                }
                else
                {
                  xpc_object_t v31 = xpc_null_create();
                }
              }
              else
              {
                xpc_object_t v31 = xpc_null_create();
                xpc_object_t v30 = 0;
              }
              xpc_release(v30);
              xpc_object_t v40 = xpc_null_create();
              uint64_t v41 = (void *)__dst.__r_.__value_.__r.__words[0];
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v31;
              xpc_release(v41);
              xpc_release(v40);
              if (SHIBYTE(object[2]) >= 0) {
                uint64_t v42 = object;
              }
              else {
                uint64_t v42 = (xpc_object_t *)object[0];
              }
              xpc_object_t v43 = xpc_string_create((const char *)v42);
              if (!v43) {
                xpc_object_t v43 = xpc_null_create();
              }
              xpc_dictionary_set_value(v31, (const char *)*MEMORY[0x263F25EB8], v43);
              xpc_object_t v44 = xpc_null_create();
              xpc_release(v43);
              xpc_release(v44);
            }
            LODWORD(v51) = -534716415;
            dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(v16, (unsigned int *)&v51, (void **)&__dst.__r_.__value_.__l.__data_);
            xpc_release(__dst.__r_.__value_.__l.__data_);
            goto LABEL_83;
          }
        }
        else
        {
          char v15 = v2[11];
          if (!os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_14;
          }
        }
        uint64_t v27 = object;
        if (SHIBYTE(object[2]) < 0) {
          uint64_t v27 = (xpc_object_t *)object[0];
        }
        LODWORD(__dst.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = (std::string::size_type)v27;
        _os_log_impl(&dword_26368A000, v15, OS_LOG_TYPE_DEFAULT, "#I %s", (uint8_t *)&__dst, 0xCu);
        uint64_t v28 = a1[5];
        uint64_t v16 = a1 + 5;
        if (!v28) {
          goto LABEL_83;
        }
        goto LABEL_41;
      }
    }
    memmove(p_dst, v3, v5);
    goto LABEL_12;
  }
  if (MEMORY[0x263E6A240](a1[6]) == MEMORY[0x263EF8708])
  {
    __dst.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
    __dst.__r_.__value_.__l.__size_ = 0xAAAAAAAAAAAAAAAALL;
    unint64_t v18 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
    xpc_object_t v19 = (const void *)off_26A99F170;
    if (!off_26A99F170)
    {
      CommandDriverFactory::create_default_global((uint64_t *)object, v18);
      long long v20 = *(_OWORD *)object;
      object[0] = 0;
      object[1] = 0;
      xpc_object_t v21 = (std::__shared_weak_count *)*(&off_26A99F170 + 1);
      off_26A99F170 = v20;
      if (v21 && !atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
      unsigned int v22 = (std::__shared_weak_count *)object[1];
      if (object[1] && !atomic_fetch_add((atomic_ullong *volatile)object[1] + 1, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
      xpc_object_t v19 = (const void *)off_26A99F170;
    }
    xpc_object_t v23 = (std::__shared_weak_count *)*(&off_26A99F170 + 1);
    cf[1] = v19;
    cf[2] = *((CFTypeRef *)&off_26A99F170 + 1);
    if (*(&off_26A99F170 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_26A99F170 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
    (*(void (**)(xpc_object_t *__return_ptr, const void *))(*(void *)v19 + 16))(&v51, v19);
    *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = 0uLL;
    if (v52)
    {
      __dst.__r_.__value_.__l.__size_ = (std::string::size_type)std::__shared_weak_count::lock(v52);
      if (__dst.__r_.__value_.__l.__size_) {
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v51;
      }
      if (v52) {
        std::__shared_weak_count::__release_weak(v52);
      }
    }
    if (v23 && !atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
    std::string::size_type v24 = __dst.__r_.__value_.__r.__words[0];
    if (__dst.__r_.__value_.__r.__words[0])
    {
      long long v25 = (void *)a1[6];
      xpc_object_t v51 = v25;
      if (v25) {
        xpc_retain(v25);
      }
      else {
        xpc_object_t v51 = xpc_null_create();
      }
      xpc::bridge((uint64_t *)object, (xpc *)&v51, v26);
      xpc_object_t v32 = object[0];
      if (object[0] && (CFTypeID v33 = CFGetTypeID(object[0]), v33 == CFDictionaryGetTypeID()))
      {
        cf[0] = v32;
        CFRetain(v32);
      }
      else
      {
        cf[0] = 0;
      }
      aBlock[0] = MEMORY[0x263EF8330];
      aBlock[1] = 1174405120;
      aBlock[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_71;
      aBlock[3] = &__block_descriptor_tmp_76_0;
      uint64_t v35 = a1[7];
      xpc_object_t v34 = (std::__shared_weak_count *)a1[8];
      void aBlock[4] = v2;
      aBlock[5] = v35;
      uint64_t v46 = v34;
      if (v34) {
        atomic_fetch_add_explicit(&v34->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      unint64_t v36 = (void *)a1[5];
      if (v36) {
        unint64_t v36 = _Block_copy(v36);
      }
      xpc_object_t v47 = v36;
      xpc_object_t v37 = _Block_copy(aBlock);
      xpc_object_t v38 = v2[17];
      if (v38) {
        dispatch_retain(v38);
      }
      xpc_object_t v48 = v37;
      dispatch_object_t v49 = v38;
      (*(void (**)(std::string::size_type, CFTypeRef *, void **))(*(void *)v24 + 192))(v24, cf, &v48);
      if (v49) {
        dispatch_release(v49);
      }
      if (v48) {
        _Block_release(v48);
      }
      if (cf[0]) {
        CFRelease(cf[0]);
      }
      if (object[0]) {
        CFRelease(object[0]);
      }
      xpc_release(v51);
      if (v47) {
        _Block_release(v47);
      }
      if (v46) {
        std::__shared_weak_count::__release_weak(v46);
      }
    }
    int64_t size = (std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_;
    if (__dst.__r_.__value_.__l.__size_
      && !atomic_fetch_add((atomic_ullong *volatile)(__dst.__r_.__value_.__l.__size_ + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  else
  {
    xpc_object_t v7 = xpc_null_create();
    uint64_t v8 = a1[5];
    object[0] = v7;
    xpc_object_t v9 = xpc_null_create();
    (*(void (**)(uint64_t, uint64_t, xpc_object_t *))(v8 + 16))(v8, 3760250882, object);
    xpc_release(object[0]);
    xpc_release(v9);
  }
}

void sub_2636E01DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, void *aBlock, char a18, uint64_t a19, char a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,xpc_object_t object,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void sub_2636E033C(_Unwind_Exception *a1)
{
  operator delete(v1);
  if (*(char *)(v2 - 73) < 0)
  {
    operator delete(*(void **)(v2 - 96));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x2636E032CLL);
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_71(void *a1, uint64_t *a2)
{
  uint64_t v37 = *MEMORY[0x263EF8340];
  uint64_t v3 = (std::__shared_weak_count *)a1[6];
  if (!v3) {
    return;
  }
  uint64_t v5 = a1[4];
  uint64_t v6 = std::__shared_weak_count::lock(v3);
  xpc_object_t v34 = v6;
  if (!v6) {
    return;
  }
  if (!a1[5])
  {
    uint64_t v10 = v6;
LABEL_45:
    if (!atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
    return;
  }
  uint64_t v7 = *a2;
  if (*a2) {
    uint64_t v8 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  }
  else {
    uint64_t v8 = 0;
  }
  if (v8)
  {
    xpc_object_t v9 = *(NSObject **)(v5 + 88);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf) = 138412290;
      *(void *)((char *)&buf + 4) = v7;
      _os_log_error_impl(&dword_26368A000, v9, OS_LOG_TYPE_ERROR, "%@", (uint8_t *)&buf, 0xCu);
    }
    goto LABEL_38;
  }
  if (!*(void *)(v5 + 176)) {
    goto LABEL_38;
  }
  xpc_object_t v11 = xpc_dictionary_create(0, 0, 0);
  if (v11 || (xpc_object_t v11 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x263E6A240](v11) == MEMORY[0x263EF8708])
    {
      xpc_retain(v11);
      xpc_object_t v12 = v11;
    }
    else
    {
      xpc_object_t v12 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v12 = xpc_null_create();
    xpc_object_t v11 = 0;
  }
  xpc_release(v11);
  xpc_object_t v13 = xpc_string_create((const char *)*MEMORY[0x263F26180]);
  if (!v13) {
    xpc_object_t v13 = xpc_null_create();
  }
  xpc_dictionary_set_value(v12, (const char *)*MEMORY[0x263F26148], v13);
  xpc_object_t v14 = xpc_null_create();
  xpc_release(v13);
  xpc_release(v14);
  xpc_object_t v15 = xpc_string_create((const char *)*MEMORY[0x263F267A8]);
  if (!v15) {
    xpc_object_t v15 = xpc_null_create();
  }
  xpc_dictionary_set_value(v12, (const char *)*MEMORY[0x263F26368], v15);
  xpc_object_t v16 = xpc_null_create();
  xpc_release(v15);
  xpc_release(v16);
  uint64_t v17 = (char *)operator new(0x38uLL);
  strcpy(v17, "User requested to change Baseband field test config");
  xpc_object_t v18 = xpc_string_create(v17);
  if (!v18) {
    xpc_object_t v18 = xpc_null_create();
  }
  xpc_dictionary_set_value(v12, (const char *)*MEMORY[0x263F262A8], v18);
  xpc_object_t v19 = xpc_null_create();
  xpc_release(v18);
  xpc_release(v19);
  operator delete(v17);
  long long v20 = (const void *)*MEMORY[0x263F26118];
  size_t v21 = strlen((const char *)*MEMORY[0x263F26118]);
  if (v21 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v22 = v21;
  if (v21 >= 0x17)
  {
    uint64_t v24 = (v21 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v21 | 7) != 0x17) {
      uint64_t v24 = v21 | 7;
    }
    uint64_t v25 = v24 + 1;
    p_long long buf = (long long *)operator new(v24 + 1);
    *((void *)&buf + 1) = v22;
    unint64_t v36 = v25 | 0x8000000000000000;
    *(void *)&long long buf = p_buf;
  }
  else
  {
    HIBYTE(v36) = v21;
    p_long long buf = &buf;
    if (!v21) {
      goto LABEL_32;
    }
  }
  memmove(p_buf, v20, v22);
LABEL_32:
  *((unsigned char *)p_buf + v22) = 0;
  xpc_object_t object = v12;
  if (v12) {
    xpc_retain(v12);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  xpc_object_t v31 = 0;
  Service::runCommand(v5, (uint64_t)&buf, &object, &v31);
  xpc_release(object);
  xpc_object_t object = 0;
  if (SHIBYTE(v36) < 0) {
    operator delete((void *)buf);
  }
  xpc_release(v12);
LABEL_38:
  if (*a2) {
    unint64_t v26 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  }
  else {
    unint64_t v26 = 0;
  }
  if (v26) {
    uint64_t v27 = 3760250880;
  }
  else {
    uint64_t v27 = 0;
  }
  xpc_object_t v28 = xpc_null_create();
  uint64_t v29 = a1[7];
  *(void *)&long long buf = v28;
  xpc_object_t v30 = xpc_null_create();
  (*(void (**)(uint64_t, uint64_t, long long *))(v29 + 16))(v29, v27, &buf);
  xpc_release((xpc_object_t)buf);
  xpc_release(v30);
  uint64_t v10 = v34;
  if (v34) {
    goto LABEL_45;
  }
}

void sub_2636E079C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, char a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>::~callback(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 8);
  if (v2) {
    dispatch_release(v2);
  }
  if (*(void *)a1) {
    _Block_release(*(const void **)a1);
  }
  return a1;
}

const void **ctu::cf::CFSharedRef<void const>::~CFSharedRef(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

xpc_object_t __copy_helper_block_e8_40c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE48c15_ZTSN3xpc4dictE56c36_ZTSNSt3__18weak_ptrI11RadioModuleEE(void *a1, void *a2)
{
  size_t v4 = (const void *)a2[5];
  if (v4)
  {
    uint64_t v5 = _Block_copy(v4);
    uint64_t v6 = (void *)a2[6];
    a1[5] = v5;
    a1[6] = v6;
    if (v6) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v6 = (void *)a2[6];
    a1[5] = 0;
    a1[6] = v6;
    if (v6)
    {
LABEL_3:
      xpc_object_t result = xpc_retain(v6);
      uint64_t v8 = a2[8];
      a1[7] = a2[7];
      a1[8] = v8;
      if (!v8) {
        return result;
      }
      goto LABEL_4;
    }
  }
  xpc_object_t result = xpc_null_create();
  a1[6] = result;
  uint64_t v8 = a2[8];
  a1[7] = a2[7];
  a1[8] = v8;
  if (!v8) {
    return result;
  }
LABEL_4:
  atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 16), 1uLL, memory_order_relaxed);
  return result;
}

void __destroy_helper_block_e8_40c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE48c15_ZTSN3xpc4dictE56c36_ZTSNSt3__18weak_ptrI11RadioModuleEE(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 64);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  xpc_release(*(xpc_object_t *)(a1 + 48));
  *(void *)(a1 + 48) = 0;
  uint64_t v3 = *(const void **)(a1 + 40);
  if (v3) {
    _Block_release(v3);
  }
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_81(void *a1, void **a2, const void **a3)
{
  size_t v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    uint64_t v7 = a1[4];
    uint64_t v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      xpc_object_t v9 = v8;
      if (!a1[5])
      {
LABEL_12:
        if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
        return;
      }
      v14[0] = MEMORY[0x263EF8330];
      v14[1] = 1174405120;
      v14[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_2_82;
      void v14[3] = &__block_descriptor_tmp_89_0;
      v14[4] = v7;
      if (*a3)
      {
        uint64_t v10 = _Block_copy(*a3);
        xpc_object_t v11 = *a2;
        aBlocunint64_t k = v10;
        xpc_object_t object = v11;
        if (v11) {
          goto LABEL_6;
        }
      }
      else
      {
        xpc_object_t v11 = *a2;
        aBlocunint64_t k = 0;
        xpc_object_t object = v11;
        if (v11)
        {
LABEL_6:
          xpc_retain(v11);
          xpc_object_t v12 = (uint64_t *)(v7 + 120);
          xpc_object_t v13 = (std::__shared_weak_count *)a1[6];
          uint64_t v17 = a1[5];
          xpc_object_t v18 = v13;
          if (!v13)
          {
LABEL_8:
            ctu::SharedSynchronizable<RadioModule>::execute_wrapped(v12, (uint64_t)v14);
            if (v18) {
              std::__shared_weak_count::__release_weak(v18);
            }
            xpc_release(object);
            xpc_object_t object = 0;
            if (aBlock) {
              _Block_release(aBlock);
            }
            goto LABEL_12;
          }
LABEL_7:
          atomic_fetch_add_explicit(&v13->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          goto LABEL_8;
        }
      }
      xpc_object_t object = xpc_null_create();
      xpc_object_t v12 = (uint64_t *)(v7 + 120);
      xpc_object_t v13 = (std::__shared_weak_count *)a1[6];
      uint64_t v17 = a1[5];
      xpc_object_t v18 = v13;
      if (!v13) {
        goto LABEL_8;
      }
      goto LABEL_7;
    }
  }
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_2_82(uint64_t a1)
{
  uint64_t v55 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void **)(a1 + 32);
  if ((*(unsigned int (**)(void *))(*v2 + 88))(v2))
  {
    memset(&v53, 170, sizeof(v53));
    uint64_t v3 = (const void *)*MEMORY[0x263F25EA0];
    size_t v4 = strlen((const char *)*MEMORY[0x263F25EA0]);
    if (v4 >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    std::string::size_type v5 = v4;
    if (v4 >= 0x17)
    {
      uint64_t v10 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v4 | 7) != 0x17) {
        uint64_t v10 = v4 | 7;
      }
      uint64_t v11 = v10 + 1;
      p_dst = (std::string *)operator new(v10 + 1);
      __dst.__r_.__value_.__l.__size_ = v5;
      __dst.__r_.__value_.__r.__words[2] = v11 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v4;
      p_dst = &__dst;
      if (!v4)
      {
LABEL_12:
        p_dst->__r_.__value_.__s.__data_[v5] = 0;
        xpc_object_t v12 = (char *)operator new(0x28uLL);
        strcpy(v12, " rejected; ABM is shutting down ");
        xpc_object_t v13 = std::string::append(&__dst, v12, 0x20uLL);
        long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
        v53.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v53.__r_.__value_.__l.__data_ = v14;
        v13->__r_.__value_.__l.__size_ = 0;
        v13->__r_.__value_.__r.__words[2] = 0;
        v13->__r_.__value_.__r.__words[0] = 0;
        operator delete(v12);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__dst.__r_.__value_.__l.__data_);
          xpc_object_t v15 = v2[11];
          if (!os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
          {
LABEL_14:
            uint64_t v17 = *(void *)(a1 + 40);
            xpc_object_t v16 = (uint64_t *)(a1 + 40);
            if (!v17)
            {
LABEL_82:
              if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v53.__r_.__value_.__l.__data_);
              }
              return;
            }
LABEL_41:
            __dst.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
            std::string::size_type size = HIBYTE(v53.__r_.__value_.__r.__words[2]);
            if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              std::string::size_type size = v53.__r_.__value_.__l.__size_;
            }
            if (size)
            {
              xpc_object_t v30 = xpc_dictionary_create(0, 0, 0);
              if (v30 || (xpc_object_t v30 = xpc_null_create()) != 0)
              {
                if (MEMORY[0x263E6A240](v30) == MEMORY[0x263EF8708])
                {
                  xpc_retain(v30);
                  xpc_object_t v31 = v30;
                }
                else
                {
                  xpc_object_t v31 = xpc_null_create();
                }
              }
              else
              {
                xpc_object_t v31 = xpc_null_create();
                xpc_object_t v30 = 0;
              }
              xpc_release(v30);
              xpc_object_t v38 = xpc_null_create();
              xpc_object_t v39 = (void *)__dst.__r_.__value_.__r.__words[0];
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v31;
              xpc_release(v39);
              xpc_release(v38);
              if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                xpc_object_t v40 = &v53;
              }
              else {
                xpc_object_t v40 = (std::string *)v53.__r_.__value_.__r.__words[0];
              }
              xpc_object_t v41 = xpc_string_create((const char *)v40);
              if (!v41) {
                xpc_object_t v41 = xpc_null_create();
              }
              xpc_dictionary_set_value(v31, (const char *)*MEMORY[0x263F25EB8], v41);
              xpc_object_t v42 = xpc_null_create();
              xpc_release(v41);
              xpc_release(v42);
            }
            LODWORD(object) = -534716415;
            dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(v16, (unsigned int *)&object, (void **)&__dst.__r_.__value_.__l.__data_);
            xpc_release(__dst.__r_.__value_.__l.__data_);
            goto LABEL_82;
          }
        }
        else
        {
          xpc_object_t v15 = v2[11];
          if (!os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_14;
          }
        }
        uint64_t v27 = &v53;
        if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          uint64_t v27 = (std::string *)v53.__r_.__value_.__r.__words[0];
        }
        LODWORD(__dst.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = (std::string::size_type)v27;
        _os_log_impl(&dword_26368A000, v15, OS_LOG_TYPE_DEFAULT, "#I %s", (uint8_t *)&__dst, 0xCu);
        uint64_t v28 = *(void *)(a1 + 40);
        xpc_object_t v16 = (uint64_t *)(a1 + 40);
        if (!v28) {
          goto LABEL_82;
        }
        goto LABEL_41;
      }
    }
    memmove(p_dst, v3, v5);
    goto LABEL_12;
  }
  if (MEMORY[0x263E6A240](*(void *)(a1 + 48)) == MEMORY[0x263EF8708])
  {
    __dst.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
    __dst.__r_.__value_.__l.__size_ = 0xAAAAAAAAAAAAAAAALL;
    xpc_object_t v18 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
    uint64_t v19 = off_26A99F170;
    if (!off_26A99F170)
    {
      CommandDriverFactory::create_default_global((uint64_t *)&v53, v18);
      long long v20 = *(_OWORD *)&v53.__r_.__value_.__l.__data_;
      *(_OWORD *)&v53.__r_.__value_.__l.__data_ = 0uLL;
      size_t v21 = (std::__shared_weak_count *)*(&off_26A99F170 + 1);
      off_26A99F170 = v20;
      if (v21 && !atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
      size_t v22 = (std::__shared_weak_count *)v53.__r_.__value_.__l.__size_;
      if (v53.__r_.__value_.__l.__size_
        && !atomic_fetch_add((atomic_ullong *volatile)(v53.__r_.__value_.__l.__size_ + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
      uint64_t v19 = off_26A99F170;
    }
    xpc_object_t v23 = (std::__shared_weak_count *)*(&off_26A99F170 + 1);
    uint64_t v49 = v19;
    uint64_t v50 = *(&off_26A99F170 + 1);
    if (*(&off_26A99F170 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_26A99F170 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
    (*(void (**)(xpc_object_t *__return_ptr, uint64_t))(*(void *)v19 + 16))(&object, v19);
    *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = 0uLL;
    if (v52)
    {
      __dst.__r_.__value_.__l.__size_ = (std::string::size_type)std::__shared_weak_count::lock(v52);
      if (__dst.__r_.__value_.__l.__size_) {
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)object;
      }
      if (v52) {
        std::__shared_weak_count::__release_weak(v52);
      }
    }
    if (v23 && !atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
    std::string::size_type v24 = __dst.__r_.__value_.__r.__words[0];
    if (__dst.__r_.__value_.__r.__words[0])
    {
      memset(&v53, 170, sizeof(v53));
      xpc_object_t value = xpc_dictionary_get_value(*(xpc_object_t *)(a1 + 48), (const char *)*MEMORY[0x263F25FD8]);
      xpc_object_t object = value;
      if (value) {
        xpc_retain(value);
      }
      else {
        xpc_object_t object = xpc_null_create();
      }
      xpc::dyn_cast_or_default((uint64_t *)&v53, (xpc *)&object, (const object *)"", v26);
      xpc_release(object);
      if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v48, v53.__r_.__value_.__l.__data_, v53.__r_.__value_.__l.__size_);
      }
      else {
        std::string v48 = v53;
      }
      v43[0] = MEMORY[0x263EF8330];
      v43[1] = 1174405120;
      v43[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_83;
      v43[3] = &__block_descriptor_tmp_86;
      uint64_t v33 = *(void *)(a1 + 56);
      xpc_object_t v32 = *(std::__shared_weak_count **)(a1 + 64);
      v43[4] = v2;
      v43[5] = v33;
      xpc_object_t v44 = v32;
      if (v32) {
        atomic_fetch_add_explicit(&v32->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      xpc_object_t v34 = *(void **)(a1 + 40);
      if (v34) {
        xpc_object_t v34 = _Block_copy(v34);
      }
      unint64_t v45 = v34;
      uint64_t v35 = _Block_copy(v43);
      unint64_t v36 = v2[17];
      if (v36) {
        dispatch_retain(v36);
      }
      aBlocunint64_t k = v35;
      dispatch_object_t v47 = v36;
      (*(void (**)(std::string::size_type, std::string *, void **))(*(void *)v24 + 216))(v24, &v48, &aBlock);
      if (v47) {
        dispatch_release(v47);
      }
      if (aBlock) {
        _Block_release(aBlock);
      }
      if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v48.__r_.__value_.__l.__data_);
      }
      if (v45) {
        _Block_release(v45);
      }
      if (v44) {
        std::__shared_weak_count::__release_weak(v44);
      }
      if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v53.__r_.__value_.__l.__data_);
      }
    }
    uint64_t v37 = (std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_;
    if (__dst.__r_.__value_.__l.__size_
      && !atomic_fetch_add((atomic_ullong *volatile)(__dst.__r_.__value_.__l.__size_ + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  else
  {
    xpc_object_t v7 = xpc_null_create();
    uint64_t v8 = *(void *)(a1 + 40);
    v53.__r_.__value_.__r.__words[0] = (std::string::size_type)v7;
    xpc_object_t v9 = xpc_null_create();
    (*(void (**)(uint64_t, uint64_t, std::string *))(v8 + 16))(v8, 3760250882, &v53);
    xpc_release(v53.__r_.__value_.__l.__data_);
    xpc_release(v9);
  }
}

void sub_2636E1298(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, void *aBlock, char a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,xpc_object_t object)
{
  if (*(char *)(v28 - 105) < 0)
  {
    operator delete(*(void **)(v28 - 128));
    std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100](v28 - 96);
    _Unwind_Resume(a1);
  }
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100](v28 - 96);
  _Unwind_Resume(a1);
}

void sub_2636E1374(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2636E13B8(_Unwind_Exception *a1)
{
  xpc_release(*(xpc_object_t *)(v1 - 96));
  if (*(char *)(v1 - 105) < 0)
  {
    operator delete(*(void **)(v1 - 128));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x2636E141CLL);
}

void sub_2636E13EC()
{
  xpc_release(*(xpc_object_t *)(v1 - 128));
  xpc_release(v0);
  JUMPOUT(0x2636E141CLL);
}

void sub_2636E1414(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void sub_2636E142C(_Unwind_Exception *a1)
{
  operator delete(v1);
  if (*(char *)(v2 - 73) < 0)
  {
    operator delete(*(void **)(v2 - 96));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x2636E141CLL);
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_83(void *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  size_t v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    uint64_t v7 = a1[4];
    uint64_t v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      xpc_object_t v9 = v8;
      if (a1[5])
      {
        uint64_t v10 = *a2;
        if (*a2) {
          uint64_t v11 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
        }
        else {
          uint64_t v11 = 0;
        }
        if (v11)
        {
          xpc_object_t v12 = *(NSObject **)(v7 + 88);
          if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)xpc_object_t object = 138412290;
            *(void *)&xpc_object_t object[4] = v10;
            _os_log_error_impl(&dword_26368A000, v12, OS_LOG_TYPE_ERROR, "%@", object, 0xCu);
          }
        }
        else
        {
          uint64_t v18 = *a3;
          if (*a3) {
            uint64_t v19 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
          }
          else {
            uint64_t v19 = 0;
          }
          if (v19)
          {
            long long v20 = *(NSObject **)(v7 + 88);
            if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)xpc_object_t object = 138412290;
              *(void *)&xpc_object_t object[4] = v18;
              _os_log_impl(&dword_26368A000, v20, OS_LOG_TYPE_DEFAULT, "#I %@", object, 0xCu);
            }
          }
        }
        if (*a2) {
          xpc_object_t v13 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
        }
        else {
          xpc_object_t v13 = 0;
        }
        if (v13) {
          uint64_t v14 = 3760250880;
        }
        else {
          uint64_t v14 = 0;
        }
        xpc_object_t v15 = xpc_null_create();
        uint64_t v16 = a1[7];
        *(void *)xpc_object_t object = v15;
        xpc_object_t v17 = xpc_null_create();
        (*(void (**)(uint64_t, uint64_t, unsigned char *))(v16 + 16))(v16, v14, object);
        xpc_release(*(xpc_object_t *)object);
        xpc_release(v17);
      }
      if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
}

void sub_2636E1670(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, xpc_object_t object)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_93(void *a1, uint64_t a2, const void **a3)
{
  size_t v4 = (std::__shared_weak_count *)a1[6];
  if (!v4) {
    return;
  }
  uint64_t v6 = (void *)a1[4];
  uint64_t v7 = std::__shared_weak_count::lock(v4);
  if (!v7) {
    return;
  }
  uint64_t v8 = v7;
  uint64_t v9 = a1[5];
  if (v9)
  {
    if (*a3)
    {
      uint64_t v10 = _Block_copy(*a3);
      uint64_t v9 = a1[5];
      uint64_t v11 = (std::__shared_weak_count *)a1[6];
      if (!v11) {
        goto LABEL_7;
      }
    }
    else
    {
      uint64_t v10 = 0;
      uint64_t v11 = (std::__shared_weak_count *)a1[6];
      if (!v11)
      {
LABEL_7:
        xpc_object_t v12 = (std::__shared_weak_count *)v6[16];
        if (!v12 || (v13 = v6[15], (uint64_t v14 = std::__shared_weak_count::lock(v12)) == 0)) {
          std::__throw_bad_weak_ptr[abi:ne180100]();
        }
        xpc_object_t v15 = v14;
        uint64_t v16 = operator new(0x20uLL);
        void *v16 = v6;
        v16[1] = v10;
        void v16[2] = v9;
        v16[3] = v11;
        if (v11) {
          atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        }
        xpc_object_t v17 = v6[17];
        atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
        uint64_t v18 = operator new(0x18uLL);
        void *v18 = v16;
        v18[1] = v13;
        v18[2] = v15;
        dispatch_async_f(v17, v18, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI11RadioModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb0_E3__0EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_);
        if (!atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
        if (v11) {
          std::__shared_weak_count::__release_weak(v11);
        }
        goto LABEL_15;
      }
    }
    atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    goto LABEL_7;
  }
LABEL_15:
  if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_97(void *a1, uint64_t a2, const void **a3)
{
  size_t v4 = (std::__shared_weak_count *)a1[6];
  if (!v4) {
    return;
  }
  uint64_t v6 = (void *)a1[4];
  uint64_t v7 = std::__shared_weak_count::lock(v4);
  if (!v7) {
    return;
  }
  uint64_t v8 = v7;
  uint64_t v9 = a1[5];
  if (v9)
  {
    if (*a3)
    {
      uint64_t v10 = _Block_copy(*a3);
      uint64_t v9 = a1[5];
      uint64_t v11 = (std::__shared_weak_count *)a1[6];
      if (!v11) {
        goto LABEL_7;
      }
    }
    else
    {
      uint64_t v10 = 0;
      uint64_t v11 = (std::__shared_weak_count *)a1[6];
      if (!v11)
      {
LABEL_7:
        xpc_object_t v12 = (std::__shared_weak_count *)v6[16];
        if (!v12 || (v13 = v6[15], (uint64_t v14 = std::__shared_weak_count::lock(v12)) == 0)) {
          std::__throw_bad_weak_ptr[abi:ne180100]();
        }
        xpc_object_t v15 = v14;
        uint64_t v16 = operator new(0x20uLL);
        void *v16 = v6;
        v16[1] = v10;
        void v16[2] = v9;
        v16[3] = v11;
        if (v11) {
          atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        }
        xpc_object_t v17 = v6[17];
        atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
        uint64_t v18 = operator new(0x18uLL);
        void *v18 = v16;
        v18[1] = v13;
        v18[2] = v15;
        dispatch_async_f(v17, v18, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI11RadioModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb1_E3__1EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_);
        if (!atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
        if (v11) {
          std::__shared_weak_count::__release_weak(v11);
        }
        goto LABEL_15;
      }
    }
    atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    goto LABEL_7;
  }
LABEL_15:
  if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_101(void *a1, uint64_t a2, const void **a3)
{
  size_t v4 = (std::__shared_weak_count *)a1[6];
  if (!v4) {
    return;
  }
  uint64_t v6 = (void *)a1[4];
  uint64_t v7 = std::__shared_weak_count::lock(v4);
  if (!v7) {
    return;
  }
  uint64_t v8 = v7;
  uint64_t v9 = a1[5];
  if (v9)
  {
    if (*a3)
    {
      uint64_t v10 = _Block_copy(*a3);
      uint64_t v9 = a1[5];
      uint64_t v11 = (std::__shared_weak_count *)a1[6];
      if (!v11) {
        goto LABEL_7;
      }
    }
    else
    {
      uint64_t v10 = 0;
      uint64_t v11 = (std::__shared_weak_count *)a1[6];
      if (!v11)
      {
LABEL_7:
        xpc_object_t v12 = (std::__shared_weak_count *)v6[16];
        if (!v12 || (v13 = v6[15], (uint64_t v14 = std::__shared_weak_count::lock(v12)) == 0)) {
          std::__throw_bad_weak_ptr[abi:ne180100]();
        }
        xpc_object_t v15 = v14;
        uint64_t v16 = operator new(0x20uLL);
        void *v16 = v6;
        v16[1] = v10;
        void v16[2] = v9;
        v16[3] = v11;
        if (v11) {
          atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        }
        xpc_object_t v17 = v6[17];
        atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
        uint64_t v18 = operator new(0x18uLL);
        void *v18 = v16;
        v18[1] = v13;
        v18[2] = v15;
        dispatch_async_f(v17, v18, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI11RadioModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb2_E3__2EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_);
        if (!atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
        if (v11) {
          std::__shared_weak_count::__release_weak(v11);
        }
        goto LABEL_15;
      }
    }
    atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    goto LABEL_7;
  }
LABEL_15:
  if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_105(void *a1, uint64_t a2, const void **a3)
{
  size_t v4 = (std::__shared_weak_count *)a1[6];
  if (!v4) {
    return;
  }
  uint64_t v6 = (void *)a1[4];
  uint64_t v7 = std::__shared_weak_count::lock(v4);
  if (!v7) {
    return;
  }
  uint64_t v8 = v7;
  uint64_t v9 = a1[5];
  if (v9)
  {
    if (*a3)
    {
      uint64_t v10 = _Block_copy(*a3);
      uint64_t v9 = a1[5];
      uint64_t v11 = (std::__shared_weak_count *)a1[6];
      if (!v11) {
        goto LABEL_7;
      }
    }
    else
    {
      uint64_t v10 = 0;
      uint64_t v11 = (std::__shared_weak_count *)a1[6];
      if (!v11)
      {
LABEL_7:
        xpc_object_t v12 = (std::__shared_weak_count *)v6[16];
        if (!v12 || (v13 = v6[15], (uint64_t v14 = std::__shared_weak_count::lock(v12)) == 0)) {
          std::__throw_bad_weak_ptr[abi:ne180100]();
        }
        xpc_object_t v15 = v14;
        uint64_t v16 = operator new(0x20uLL);
        void *v16 = v6;
        v16[1] = v10;
        void v16[2] = v9;
        v16[3] = v11;
        if (v11) {
          atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        }
        xpc_object_t v17 = v6[17];
        atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
        uint64_t v18 = operator new(0x18uLL);
        void *v18 = v16;
        v18[1] = v13;
        v18[2] = v15;
        dispatch_async_f(v17, v18, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI11RadioModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb3_E3__3EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_);
        if (!atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
        if (v11) {
          std::__shared_weak_count::__release_weak(v11);
        }
        goto LABEL_15;
      }
    }
    atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    goto LABEL_7;
  }
LABEL_15:
  if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_109(void *a1, uint64_t a2, const void **a3)
{
  size_t v4 = (std::__shared_weak_count *)a1[6];
  if (!v4) {
    return;
  }
  uint64_t v6 = (void *)a1[4];
  uint64_t v7 = std::__shared_weak_count::lock(v4);
  if (!v7) {
    return;
  }
  uint64_t v8 = v7;
  uint64_t v9 = a1[5];
  if (v9)
  {
    if (*a3)
    {
      uint64_t v10 = _Block_copy(*a3);
      uint64_t v9 = a1[5];
      uint64_t v11 = (std::__shared_weak_count *)a1[6];
      if (!v11) {
        goto LABEL_7;
      }
    }
    else
    {
      uint64_t v10 = 0;
      uint64_t v11 = (std::__shared_weak_count *)a1[6];
      if (!v11)
      {
LABEL_7:
        xpc_object_t v12 = (std::__shared_weak_count *)v6[16];
        if (!v12 || (v13 = v6[15], (uint64_t v14 = std::__shared_weak_count::lock(v12)) == 0)) {
          std::__throw_bad_weak_ptr[abi:ne180100]();
        }
        xpc_object_t v15 = v14;
        uint64_t v16 = operator new(0x20uLL);
        void *v16 = v6;
        v16[1] = v10;
        void v16[2] = v9;
        v16[3] = v11;
        if (v11) {
          atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        }
        xpc_object_t v17 = v6[17];
        atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
        uint64_t v18 = operator new(0x18uLL);
        void *v18 = v16;
        v18[1] = v13;
        v18[2] = v15;
        dispatch_async_f(v17, v18, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI11RadioModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb4_E3__4EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_);
        if (!atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
        if (v11) {
          std::__shared_weak_count::__release_weak(v11);
        }
        goto LABEL_15;
      }
    }
    atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    goto LABEL_7;
  }
LABEL_15:
  if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_113(void *a1, uint64_t a2, const void **a3)
{
  size_t v4 = (std::__shared_weak_count *)a1[6];
  if (!v4) {
    return;
  }
  uint64_t v6 = (void *)a1[4];
  uint64_t v7 = std::__shared_weak_count::lock(v4);
  if (!v7) {
    return;
  }
  uint64_t v8 = v7;
  uint64_t v9 = a1[5];
  if (v9)
  {
    if (*a3)
    {
      uint64_t v10 = _Block_copy(*a3);
      uint64_t v9 = a1[5];
      uint64_t v11 = (std::__shared_weak_count *)a1[6];
      if (!v11) {
        goto LABEL_7;
      }
    }
    else
    {
      uint64_t v10 = 0;
      uint64_t v11 = (std::__shared_weak_count *)a1[6];
      if (!v11)
      {
LABEL_7:
        xpc_object_t v12 = (std::__shared_weak_count *)v6[16];
        if (!v12 || (v13 = v6[15], (uint64_t v14 = std::__shared_weak_count::lock(v12)) == 0)) {
          std::__throw_bad_weak_ptr[abi:ne180100]();
        }
        xpc_object_t v15 = v14;
        uint64_t v16 = operator new(0x20uLL);
        void *v16 = v6;
        v16[1] = v10;
        void v16[2] = v9;
        v16[3] = v11;
        if (v11) {
          atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        }
        xpc_object_t v17 = v6[17];
        atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
        uint64_t v18 = operator new(0x18uLL);
        void *v18 = v16;
        v18[1] = v13;
        v18[2] = v15;
        dispatch_async_f(v17, v18, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI11RadioModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb5_E3__5EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_);
        if (!atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
        if (v11) {
          std::__shared_weak_count::__release_weak(v11);
        }
        goto LABEL_15;
      }
    }
    atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    goto LABEL_7;
  }
LABEL_15:
  if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_117(void *a1, xpc_object_t *a2, const void **a3)
{
  size_t v4 = (std::__shared_weak_count *)a1[6];
  if (!v4) {
    return;
  }
  uint64_t v7 = (void *)a1[4];
  uint64_t v8 = std::__shared_weak_count::lock(v4);
  if (!v8) {
    return;
  }
  uint64_t v9 = v8;
  if (a1[5])
  {
    xpc_object_t v10 = *a2;
    if (v10)
    {
      xpc_retain(v10);
      uint64_t v11 = *a3;
      if (*a3) {
        goto LABEL_6;
      }
    }
    else
    {
      xpc_object_t v10 = xpc_null_create();
      uint64_t v11 = *a3;
      if (*a3)
      {
LABEL_6:
        xpc_object_t v12 = _Block_copy(v11);
        uint64_t v14 = a1[5];
        uint64_t v13 = (std::__shared_weak_count *)a1[6];
        if (!v13) {
          goto LABEL_8;
        }
        goto LABEL_7;
      }
    }
    xpc_object_t v12 = 0;
    uint64_t v14 = a1[5];
    uint64_t v13 = (std::__shared_weak_count *)a1[6];
    if (!v13)
    {
LABEL_8:
      xpc_object_t v15 = (std::__shared_weak_count *)v7[16];
      if (!v15 || (uint64_t v16 = v7[15], (v17 = std::__shared_weak_count::lock(v15)) == 0)) {
        std::__throw_bad_weak_ptr[abi:ne180100]();
      }
      uint64_t v18 = v17;
      uint64_t v19 = operator new(0x28uLL);
      void *v19 = v7;
      v19[1] = v10;
      xpc_object_t v20 = xpc_null_create();
      v19[2] = v12;
      v19[3] = v14;
      void v19[4] = v13;
      if (v13) {
        atomic_fetch_add_explicit(&v13->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      size_t v21 = v7[17];
      atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v22 = operator new(0x18uLL);
      void *v22 = v19;
      v22[1] = v16;
      void v22[2] = v18;
      dispatch_async_f(v21, v22, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI11RadioModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb6_E3__6EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_);
      if (!atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
      if (v13) {
        std::__shared_weak_count::__release_weak(v13);
      }
      xpc_release(v20);
      goto LABEL_17;
    }
LABEL_7:
    atomic_fetch_add_explicit(&v13->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    goto LABEL_8;
  }
LABEL_17:
  if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_121(void *a1, xpc_object_t *a2, const void **a3)
{
  size_t v4 = (std::__shared_weak_count *)a1[6];
  if (!v4) {
    return;
  }
  uint64_t v7 = (void *)a1[4];
  uint64_t v8 = std::__shared_weak_count::lock(v4);
  if (!v8) {
    return;
  }
  uint64_t v9 = v8;
  if (a1[5])
  {
    xpc_object_t v10 = *a2;
    if (v10)
    {
      xpc_retain(v10);
      uint64_t v11 = *a3;
      if (*a3) {
        goto LABEL_6;
      }
    }
    else
    {
      xpc_object_t v10 = xpc_null_create();
      uint64_t v11 = *a3;
      if (*a3)
      {
LABEL_6:
        xpc_object_t v12 = _Block_copy(v11);
        uint64_t v14 = a1[5];
        uint64_t v13 = (std::__shared_weak_count *)a1[6];
        if (!v13) {
          goto LABEL_8;
        }
        goto LABEL_7;
      }
    }
    xpc_object_t v12 = 0;
    uint64_t v14 = a1[5];
    uint64_t v13 = (std::__shared_weak_count *)a1[6];
    if (!v13)
    {
LABEL_8:
      xpc_object_t v15 = (std::__shared_weak_count *)v7[16];
      if (!v15 || (uint64_t v16 = v7[15], (v17 = std::__shared_weak_count::lock(v15)) == 0)) {
        std::__throw_bad_weak_ptr[abi:ne180100]();
      }
      uint64_t v18 = v17;
      uint64_t v19 = operator new(0x28uLL);
      void *v19 = v7;
      v19[1] = v10;
      xpc_object_t v20 = xpc_null_create();
      v19[2] = v12;
      v19[3] = v14;
      void v19[4] = v13;
      if (v13) {
        atomic_fetch_add_explicit(&v13->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      size_t v21 = v7[17];
      atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v22 = operator new(0x18uLL);
      void *v22 = v19;
      v22[1] = v16;
      void v22[2] = v18;
      dispatch_async_f(v21, v22, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI11RadioModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb7_E3__7EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_);
      if (!atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
      if (v13) {
        std::__shared_weak_count::__release_weak(v13);
      }
      xpc_release(v20);
      goto LABEL_17;
    }
LABEL_7:
    atomic_fetch_add_explicit(&v13->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    goto LABEL_8;
  }
LABEL_17:
  if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_125(void *a1, xpc_object_t *a2, const void **a3)
{
  size_t v4 = (std::__shared_weak_count *)a1[6];
  if (!v4) {
    return;
  }
  uint64_t v7 = (void *)a1[4];
  uint64_t v8 = std::__shared_weak_count::lock(v4);
  if (!v8) {
    return;
  }
  uint64_t v9 = v8;
  if (a1[5])
  {
    xpc_object_t v10 = *a2;
    if (v10)
    {
      xpc_retain(v10);
      uint64_t v11 = *a3;
      if (*a3) {
        goto LABEL_6;
      }
    }
    else
    {
      xpc_object_t v10 = xpc_null_create();
      uint64_t v11 = *a3;
      if (*a3)
      {
LABEL_6:
        xpc_object_t v12 = _Block_copy(v11);
        uint64_t v14 = a1[5];
        uint64_t v13 = (std::__shared_weak_count *)a1[6];
        if (!v13) {
          goto LABEL_8;
        }
        goto LABEL_7;
      }
    }
    xpc_object_t v12 = 0;
    uint64_t v14 = a1[5];
    uint64_t v13 = (std::__shared_weak_count *)a1[6];
    if (!v13)
    {
LABEL_8:
      xpc_object_t v15 = (std::__shared_weak_count *)v7[16];
      if (!v15 || (uint64_t v16 = v7[15], (v17 = std::__shared_weak_count::lock(v15)) == 0)) {
        std::__throw_bad_weak_ptr[abi:ne180100]();
      }
      uint64_t v18 = v17;
      uint64_t v19 = operator new(0x28uLL);
      void *v19 = v7;
      v19[1] = v10;
      xpc_object_t v20 = xpc_null_create();
      v19[2] = v12;
      v19[3] = v14;
      void v19[4] = v13;
      if (v13) {
        atomic_fetch_add_explicit(&v13->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      size_t v21 = v7[17];
      atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v22 = operator new(0x18uLL);
      void *v22 = v19;
      v22[1] = v16;
      void v22[2] = v18;
      dispatch_async_f(v21, v22, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI11RadioModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb8_E3__8EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_);
      if (!atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
      if (v13) {
        std::__shared_weak_count::__release_weak(v13);
      }
      xpc_release(v20);
      goto LABEL_17;
    }
LABEL_7:
    atomic_fetch_add_explicit(&v13->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    goto LABEL_8;
  }
LABEL_17:
  if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_129(void *a1, uint64_t a2, const void **a3)
{
  size_t v4 = (std::__shared_weak_count *)a1[6];
  if (!v4) {
    return;
  }
  uint64_t v6 = (void *)a1[4];
  uint64_t v7 = std::__shared_weak_count::lock(v4);
  if (!v7) {
    return;
  }
  uint64_t v8 = v7;
  uint64_t v9 = a1[5];
  if (v9)
  {
    if (*a3)
    {
      xpc_object_t v10 = _Block_copy(*a3);
      uint64_t v9 = a1[5];
      uint64_t v11 = (std::__shared_weak_count *)a1[6];
      if (!v11) {
        goto LABEL_7;
      }
    }
    else
    {
      xpc_object_t v10 = 0;
      uint64_t v11 = (std::__shared_weak_count *)a1[6];
      if (!v11)
      {
LABEL_7:
        xpc_object_t v12 = (std::__shared_weak_count *)v6[16];
        if (!v12 || (v13 = v6[15], (uint64_t v14 = std::__shared_weak_count::lock(v12)) == 0)) {
          std::__throw_bad_weak_ptr[abi:ne180100]();
        }
        xpc_object_t v15 = v14;
        uint64_t v16 = operator new(0x20uLL);
        void *v16 = v6;
        v16[1] = v10;
        void v16[2] = v9;
        v16[3] = v11;
        if (v11) {
          atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        }
        xpc_object_t v17 = v6[17];
        atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
        uint64_t v18 = operator new(0x18uLL);
        void *v18 = v16;
        v18[1] = v13;
        v18[2] = v15;
        dispatch_async_f(v17, v18, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI11RadioModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb9_E3__9EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_);
        if (!atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
        if (v11) {
          std::__shared_weak_count::__release_weak(v11);
        }
        goto LABEL_15;
      }
    }
    atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    goto LABEL_7;
  }
LABEL_15:
  if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_133(void *a1, xpc_object_t *a2, const void **a3)
{
  size_t v4 = (std::__shared_weak_count *)a1[6];
  if (!v4) {
    return;
  }
  uint64_t v7 = (void *)a1[4];
  uint64_t v8 = std::__shared_weak_count::lock(v4);
  if (!v8) {
    return;
  }
  uint64_t v9 = v8;
  uint64_t v10 = a1[5];
  if (v10)
  {
    if (*a3)
    {
      uint64_t v11 = _Block_copy(*a3);
      uint64_t v10 = a1[5];
      xpc_object_t v12 = (std::__shared_weak_count *)a1[6];
      if (!v12)
      {
LABEL_7:
        xpc_object_t v13 = *a2;
        if (*a2)
        {
          xpc_retain(*a2);
          uint64_t v14 = (std::__shared_weak_count *)v7[16];
          if (!v14) {
LABEL_25:
          }
            std::__throw_bad_weak_ptr[abi:ne180100]();
        }
        else
        {
          xpc_object_t v13 = xpc_null_create();
          uint64_t v14 = (std::__shared_weak_count *)v7[16];
          if (!v14) {
            goto LABEL_25;
          }
        }
        uint64_t v15 = v7[15];
        uint64_t v16 = std::__shared_weak_count::lock(v14);
        if (!v16) {
          goto LABEL_25;
        }
        xpc_object_t v17 = v16;
        uint64_t v18 = operator new(0x28uLL);
        uint64_t v19 = v18;
        void *v18 = v7;
        v18[1] = v11;
        v18[2] = v10;
        void v18[3] = v12;
        if (v12) {
          atomic_fetch_add_explicit(&v12->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        }
        v18[4] = v13;
        xpc_object_t v20 = xpc_null_create();
        size_t v21 = v7[17];
        atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
        uint64_t v22 = operator new(0x18uLL);
        void *v22 = v19;
        v22[1] = v15;
        void v22[2] = v17;
        dispatch_async_f(v21, v22, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI11RadioModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb10_E4__10EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_);
        if (!atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
        xpc_release(v20);
        if (v12) {
          std::__shared_weak_count::__release_weak(v12);
        }
        goto LABEL_20;
      }
    }
    else
    {
      uint64_t v11 = 0;
      xpc_object_t v12 = (std::__shared_weak_count *)a1[6];
      if (!v12) {
        goto LABEL_7;
      }
    }
    atomic_fetch_add_explicit(&v12->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    goto LABEL_7;
  }
LABEL_20:
  if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_137(void *a1, xpc_object_t *a2, const void **a3)
{
  size_t v4 = (std::__shared_weak_count *)a1[6];
  if (!v4) {
    return;
  }
  uint64_t v7 = (void *)a1[4];
  uint64_t v8 = std::__shared_weak_count::lock(v4);
  if (!v8) {
    return;
  }
  uint64_t v9 = v8;
  uint64_t v10 = a1[5];
  if (v10)
  {
    if (*a3)
    {
      uint64_t v11 = _Block_copy(*a3);
      uint64_t v10 = a1[5];
      xpc_object_t v12 = (std::__shared_weak_count *)a1[6];
      if (!v12)
      {
LABEL_7:
        xpc_object_t v13 = *a2;
        if (*a2)
        {
          xpc_retain(*a2);
          uint64_t v14 = (std::__shared_weak_count *)v7[16];
          if (!v14) {
LABEL_25:
          }
            std::__throw_bad_weak_ptr[abi:ne180100]();
        }
        else
        {
          xpc_object_t v13 = xpc_null_create();
          uint64_t v14 = (std::__shared_weak_count *)v7[16];
          if (!v14) {
            goto LABEL_25;
          }
        }
        uint64_t v15 = v7[15];
        uint64_t v16 = std::__shared_weak_count::lock(v14);
        if (!v16) {
          goto LABEL_25;
        }
        xpc_object_t v17 = v16;
        uint64_t v18 = operator new(0x28uLL);
        uint64_t v19 = v18;
        void *v18 = v7;
        v18[1] = v11;
        v18[2] = v10;
        void v18[3] = v12;
        if (v12) {
          atomic_fetch_add_explicit(&v12->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        }
        v18[4] = v13;
        xpc_object_t v20 = xpc_null_create();
        size_t v21 = v7[17];
        atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
        uint64_t v22 = operator new(0x18uLL);
        void *v22 = v19;
        v22[1] = v15;
        void v22[2] = v17;
        dispatch_async_f(v21, v22, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI11RadioModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb11_E4__11EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_);
        if (!atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
        xpc_release(v20);
        if (v12) {
          std::__shared_weak_count::__release_weak(v12);
        }
        goto LABEL_20;
      }
    }
    else
    {
      uint64_t v11 = 0;
      xpc_object_t v12 = (std::__shared_weak_count *)a1[6];
      if (!v12) {
        goto LABEL_7;
      }
    }
    atomic_fetch_add_explicit(&v12->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    goto LABEL_7;
  }
LABEL_20:
  if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_141(void *a1, xpc_object_t *a2, const void **a3)
{
  size_t v4 = (std::__shared_weak_count *)a1[6];
  if (!v4) {
    return;
  }
  uint64_t v7 = (void *)a1[4];
  uint64_t v8 = std::__shared_weak_count::lock(v4);
  if (!v8) {
    return;
  }
  uint64_t v9 = v8;
  uint64_t v10 = a1[5];
  if (v10)
  {
    if (*a3)
    {
      uint64_t v11 = _Block_copy(*a3);
      uint64_t v10 = a1[5];
      xpc_object_t v12 = (std::__shared_weak_count *)a1[6];
      if (!v12)
      {
LABEL_7:
        xpc_object_t v13 = *a2;
        if (*a2)
        {
          xpc_retain(*a2);
          uint64_t v14 = (std::__shared_weak_count *)v7[16];
          if (!v14) {
LABEL_25:
          }
            std::__throw_bad_weak_ptr[abi:ne180100]();
        }
        else
        {
          xpc_object_t v13 = xpc_null_create();
          uint64_t v14 = (std::__shared_weak_count *)v7[16];
          if (!v14) {
            goto LABEL_25;
          }
        }
        uint64_t v15 = v7[15];
        uint64_t v16 = std::__shared_weak_count::lock(v14);
        if (!v16) {
          goto LABEL_25;
        }
        xpc_object_t v17 = v16;
        uint64_t v18 = operator new(0x28uLL);
        uint64_t v19 = v18;
        void *v18 = v7;
        v18[1] = v11;
        v18[2] = v10;
        void v18[3] = v12;
        if (v12) {
          atomic_fetch_add_explicit(&v12->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        }
        v18[4] = v13;
        xpc_object_t v20 = xpc_null_create();
        size_t v21 = v7[17];
        atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
        uint64_t v22 = operator new(0x18uLL);
        void *v22 = v19;
        v22[1] = v15;
        void v22[2] = v17;
        dispatch_async_f(v21, v22, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI11RadioModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb12_E4__12EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_);
        if (!atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
        xpc_release(v20);
        if (v12) {
          std::__shared_weak_count::__release_weak(v12);
        }
        goto LABEL_20;
      }
    }
    else
    {
      uint64_t v11 = 0;
      xpc_object_t v12 = (std::__shared_weak_count *)a1[6];
      if (!v12) {
        goto LABEL_7;
      }
    }
    atomic_fetch_add_explicit(&v12->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    goto LABEL_7;
  }
LABEL_20:
  if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_145(void *a1, uint64_t a2, const void **a3)
{
  size_t v4 = (std::__shared_weak_count *)a1[6];
  if (!v4) {
    return;
  }
  uint64_t v6 = (void *)a1[4];
  uint64_t v7 = std::__shared_weak_count::lock(v4);
  if (!v7) {
    return;
  }
  uint64_t v8 = v7;
  uint64_t v9 = a1[5];
  if (v9)
  {
    if (*a3)
    {
      uint64_t v10 = _Block_copy(*a3);
      uint64_t v9 = a1[5];
      uint64_t v11 = (std::__shared_weak_count *)a1[6];
      if (!v11) {
        goto LABEL_7;
      }
    }
    else
    {
      uint64_t v10 = 0;
      uint64_t v11 = (std::__shared_weak_count *)a1[6];
      if (!v11)
      {
LABEL_7:
        xpc_object_t v12 = (std::__shared_weak_count *)v6[16];
        if (!v12 || (v13 = v6[15], (uint64_t v14 = std::__shared_weak_count::lock(v12)) == 0)) {
          std::__throw_bad_weak_ptr[abi:ne180100]();
        }
        uint64_t v15 = v14;
        uint64_t v16 = operator new(0x20uLL);
        void *v16 = v6;
        v16[1] = v10;
        void v16[2] = v9;
        v16[3] = v11;
        if (v11) {
          atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        }
        xpc_object_t v17 = v6[17];
        atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
        uint64_t v18 = operator new(0x18uLL);
        void *v18 = v16;
        v18[1] = v13;
        v18[2] = v15;
        dispatch_async_f(v17, v18, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI11RadioModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb13_E4__13EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_);
        if (!atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
        if (v11) {
          std::__shared_weak_count::__release_weak(v11);
        }
        goto LABEL_15;
      }
    }
    atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    goto LABEL_7;
  }
LABEL_15:
  if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_149(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  size_t v4 = *(std::__shared_weak_count **)(a1 + 40);
  if (!v4) {
    return;
  }
  uint64_t v6 = std::__shared_weak_count::lock(v4);
  xpc_object_t v17 = v6;
  if (!v6) {
    return;
  }
  if (!*(void *)(a1 + 32))
  {
    uint64_t v10 = v6;
LABEL_19:
    if (!atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
    return;
  }
  CFTypeRef cf = (CFTypeRef)TelephonyBasebandCreateController();
  int v7 = TelephonyBasebandPowerDebugUnblock();
  xpc_object_t v8 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v9 = v8;
  if (v8)
  {
    xpc_object_t object = v8;
  }
  else
  {
    xpc_object_t v9 = xpc_null_create();
    xpc_object_t object = v9;
    if (!v9)
    {
      xpc_object_t v11 = xpc_null_create();
      xpc_object_t v9 = 0;
      goto LABEL_12;
    }
  }
  if (MEMORY[0x263E6A240](v9) == MEMORY[0x263EF8708])
  {
    xpc_retain(v9);
    goto LABEL_13;
  }
  xpc_object_t v11 = xpc_null_create();
LABEL_12:
  xpc_object_t object = v11;
LABEL_13:
  xpc_release(v9);
  if (v7) {
    unsigned int v12 = 0;
  }
  else {
    unsigned int v12 = -534716414;
  }
  unsigned int v13 = v12;
  dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(a3, &v13, &object);
  xpc_release(object);
  if (cf) {
    CFRelease(cf);
  }
  uint64_t v10 = v17;
  if (v17) {
    goto LABEL_19;
  }
}

void sub_2636E3324(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, xpc_object_t object, const void *a12, __int16 a13, char a14, char a15)
{
}

void sub_2636E335C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_32c36_ZTSNSt3__18weak_ptrI11RadioModuleEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c36_ZTSNSt3__18weak_ptrI11RadioModuleEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_151(uint64_t a1, xpc_object_t *a2, uint64_t *a3)
{
  size_t v4 = *(std::__shared_weak_count **)(a1 + 40);
  if (!v4) {
    return;
  }
  int v7 = std::__shared_weak_count::lock(v4);
  unint64_t v45 = v7;
  if (!v7) {
    return;
  }
  if (!*(void *)(a1 + 32))
  {
    xpc_object_t v9 = v7;
LABEL_65:
    if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
    return;
  }
  uint64_t v42 = 0;
  uint64_t v43 = 0;
  xpc_object_t value = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x263F26808]);
  xpc_object_t object = value;
  if (value) {
    xpc_retain(value);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  int v10 = xpc::dyn_cast_or_default((xpc *)&object, 0);
  xpc_release(object);
  xpc_object_t v11 = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x263F26868]);
  xpc_object_t object = v11;
  if (v11) {
    xpc_retain(v11);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  int v12 = xpc::dyn_cast_or_default((xpc *)&object, 0);
  xpc_release(object);
  xpc_object_t v13 = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x263F26848]);
  xpc_object_t object = v13;
  if (v13) {
    xpc_retain(v13);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  int v14 = xpc::dyn_cast_or_default((xpc *)&object, 0);
  xpc_release(object);
  xpc_object_t v15 = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x263F26870]);
  xpc_object_t object = v15;
  if (v15) {
    xpc_retain(v15);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  int v16 = xpc::dyn_cast_or_default((xpc *)&object, 0);
  xpc_release(object);
  xpc_object_t v17 = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x263F26878]);
  xpc_object_t object = v17;
  if (v17) {
    xpc_retain(v17);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  int v18 = xpc::dyn_cast_or_default((xpc *)&object, 0);
  xpc_release(object);
  xpc_object_t v19 = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x263F26890]);
  xpc_object_t object = v19;
  if (v19) {
    xpc_retain(v19);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  int v20 = xpc::dyn_cast_or_default((xpc *)&object, 0);
  xpc_release(object);
  xpc_object_t v21 = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x263F26860]);
  xpc_object_t object = v21;
  if (v21) {
    xpc_retain(v21);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  int v22 = xpc::dyn_cast_or_default((xpc *)&object, 0);
  xpc_release(object);
  if (v12) {
    int v23 = 2;
  }
  else {
    int v23 = 0;
  }
  int v24 = v23 | v10;
  if (v14) {
    int v25 = 4;
  }
  else {
    int v25 = 0;
  }
  if (v16) {
    int v26 = 8;
  }
  else {
    int v26 = 0;
  }
  int v27 = v24 | v25 | v26;
  if (v18) {
    int v28 = 16;
  }
  else {
    int v28 = 0;
  }
  if (v20) {
    int v29 = 32;
  }
  else {
    int v29 = 0;
  }
  int v30 = v28 | v29;
  if (v22) {
    int v31 = 64;
  }
  else {
    int v31 = 0;
  }
  LODWORD(v42) = v27 | v30 | v31;
  xpc_object_t v32 = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x263F25F00]);
  xpc_object_t object = v32;
  if (v32) {
    xpc_retain(v32);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  HIDWORD(v42) = xpc::dyn_cast_or_default((xpc *)&object, 0);
  xpc_release(object);
  xpc_object_t v33 = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x263F262D8]);
  xpc_object_t object = v33;
  if (v33) {
    xpc_retain(v33);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  LODWORD(v43) = xpc::dyn_cast_or_default((xpc *)&object, 0);
  xpc_release(object);
  xpc_object_t v34 = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x263F26850]);
  xpc_object_t object = v34;
  if (v34) {
    xpc_retain(v34);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  BYTE4(v43) = xpc::dyn_cast_or_default((xpc *)&object, 0);
  xpc_release(object);
  BYTE5(v43) = 0;
  int v35 = TelephonyBasebandSetPowerDebugOptions();
  xpc_object_t object = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  xpc_object_t v36 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v37 = v36;
  if (v36)
  {
    xpc_object_t object = v36;
  }
  else
  {
    xpc_object_t v37 = xpc_null_create();
    xpc_object_t object = v37;
    if (!v37)
    {
      xpc_object_t v38 = xpc_null_create();
      xpc_object_t v37 = 0;
      goto LABEL_60;
    }
  }
  if (MEMORY[0x263E6A240](v37) == MEMORY[0x263EF8708])
  {
    xpc_retain(v37);
    goto LABEL_61;
  }
  xpc_object_t v38 = xpc_null_create();
LABEL_60:
  xpc_object_t object = v38;
LABEL_61:
  xpc_release(v37);
  if (v35) {
    unsigned int v39 = 0;
  }
  else {
    unsigned int v39 = -534716414;
  }
  unsigned int v40 = v39;
  dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(a3, &v40, &object);
  xpc_release(object);
  xpc_object_t v9 = v45;
  if (v45) {
    goto LABEL_65;
  }
}

void sub_2636E382C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, uint64_t a11, uint64_t a12, char a13)
{
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_155(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  size_t v4 = *(std::__shared_weak_count **)(a1 + 40);
  if (!v4) {
    return;
  }
  uint64_t v6 = std::__shared_weak_count::lock(v4);
  xpc_object_t v41 = v6;
  if (!v6) {
    return;
  }
  if (!*(void *)(a1 + 32))
  {
    xpc_object_t v11 = v6;
LABEL_41:
    if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    return;
  }
  int64_t value = 0;
  int64_t v39 = 0;
  int v7 = MEMORY[0x263E68370](&value);
  xpc_object_t object = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  xpc_object_t v8 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v9 = v8;
  uint64_t v10 = MEMORY[0x263EF8708];
  if (v8)
  {
    xpc_object_t object = v8;
  }
  else
  {
    xpc_object_t v9 = xpc_null_create();
    xpc_object_t object = v9;
    if (!v9)
    {
      xpc_object_t v12 = xpc_null_create();
      xpc_object_t v9 = 0;
      goto LABEL_12;
    }
  }
  if (MEMORY[0x263E6A240](v9) == v10)
  {
    xpc_retain(v9);
    goto LABEL_13;
  }
  xpc_object_t v12 = xpc_null_create();
LABEL_12:
  xpc_object_t object = v12;
LABEL_13:
  xpc_release(v9);
  if (v7)
  {
    if (MEMORY[0x263E6A240](object) == v10)
    {
      xpc_object_t v13 = xpc_BOOL_create(value & 1);
      if (!v13) {
        xpc_object_t v13 = xpc_null_create();
      }
      xpc_dictionary_set_value(object, (const char *)*MEMORY[0x263F26808], v13);
      xpc_object_t v14 = xpc_null_create();
      xpc_release(v13);
      xpc_release(v14);
      xpc_object_t v15 = xpc_BOOL_create((value & 2) != 0);
      if (!v15) {
        xpc_object_t v15 = xpc_null_create();
      }
      xpc_dictionary_set_value(object, (const char *)*MEMORY[0x263F26868], v15);
      xpc_object_t v16 = xpc_null_create();
      xpc_release(v15);
      xpc_release(v16);
      xpc_object_t v17 = xpc_BOOL_create((value & 4) != 0);
      if (!v17) {
        xpc_object_t v17 = xpc_null_create();
      }
      xpc_dictionary_set_value(object, (const char *)*MEMORY[0x263F26848], v17);
      xpc_object_t v18 = xpc_null_create();
      xpc_release(v17);
      xpc_release(v18);
      xpc_object_t v19 = xpc_BOOL_create((value & 8) != 0);
      if (!v19) {
        xpc_object_t v19 = xpc_null_create();
      }
      xpc_dictionary_set_value(object, (const char *)*MEMORY[0x263F26870], v19);
      xpc_object_t v20 = xpc_null_create();
      xpc_release(v19);
      xpc_release(v20);
      xpc_object_t v21 = xpc_BOOL_create((value & 0x10) != 0);
      if (!v21) {
        xpc_object_t v21 = xpc_null_create();
      }
      xpc_dictionary_set_value(object, (const char *)*MEMORY[0x263F26878], v21);
      xpc_object_t v22 = xpc_null_create();
      xpc_release(v21);
      xpc_release(v22);
      xpc_object_t v23 = xpc_BOOL_create((value & 0x20) != 0);
      if (!v23) {
        xpc_object_t v23 = xpc_null_create();
      }
      xpc_dictionary_set_value(object, (const char *)*MEMORY[0x263F26890], v23);
      xpc_object_t v24 = xpc_null_create();
      xpc_release(v23);
      xpc_release(v24);
      xpc_object_t v25 = xpc_BOOL_create((value & 0x40) != 0);
      if (!v25) {
        xpc_object_t v25 = xpc_null_create();
      }
      xpc_dictionary_set_value(object, (const char *)*MEMORY[0x263F26860], v25);
      xpc_object_t v26 = xpc_null_create();
      xpc_release(v25);
      xpc_release(v26);
      xpc_object_t v27 = xpc_int64_create(HIDWORD(value));
      if (!v27) {
        xpc_object_t v27 = xpc_null_create();
      }
      xpc_dictionary_set_value(object, (const char *)*MEMORY[0x263F25F00], v27);
      xpc_object_t v28 = xpc_null_create();
      xpc_release(v27);
      xpc_release(v28);
      xpc_object_t v29 = xpc_int64_create(v39);
      if (!v29) {
        xpc_object_t v29 = xpc_null_create();
      }
      xpc_dictionary_set_value(object, (const char *)*MEMORY[0x263F262D8], v29);
      xpc_object_t v30 = xpc_null_create();
      xpc_release(v29);
      xpc_release(v30);
      xpc_object_t v31 = xpc_BOOL_create(SBYTE4(v39));
      if (!v31) {
        xpc_object_t v31 = xpc_null_create();
      }
      xpc_dictionary_set_value(object, (const char *)*MEMORY[0x263F26850], v31);
      xpc_object_t v32 = xpc_null_create();
      xpc_release(v31);
      xpc_release(v32);
      xpc_object_t v33 = xpc_BOOL_create(SBYTE5(v39));
      if (!v33) {
        xpc_object_t v33 = xpc_null_create();
      }
      xpc_dictionary_set_value(object, (const char *)*MEMORY[0x263F26760], v33);
      xpc_object_t v34 = xpc_null_create();
      xpc_release(v33);
      xpc_release(v34);
    }
    unsigned int v35 = 0;
  }
  else
  {
    unsigned int v35 = -534716414;
  }
  unsigned int v36 = v35;
  dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(a3, &v36, &object);
  xpc_release(object);
  xpc_object_t v11 = v41;
  if (v41) {
    goto LABEL_41;
  }
}

void sub_2636E4004(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  xpc_release(v13);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void RadioModule::finishInitialization_sync(RadioModule *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 16);
  if (!v2 || (uint64_t v3 = *((void *)this + 15), (v4 = std::__shared_weak_count::lock(v2)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  std::string::size_type v5 = v4;
  atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v5);
  }
  unint64_t v66 = 0xAAAAAAAAAAAAAAAALL;
  size_t v67 = (std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL;
  uint64_t v6 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  uint64_t v7 = off_26A99F170;
  if (!off_26A99F170)
  {
    CommandDriverFactory::create_default_global((uint64_t *)&v68, v6);
    long long v8 = v68;
    long long v68 = 0uLL;
    xpc_object_t v9 = (std::__shared_weak_count *)*(&off_26A99F170 + 1);
    off_26A99F170 = v8;
    if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
    uint64_t v10 = (std::__shared_weak_count *)*((void *)&v68 + 1);
    if (*((void *)&v68 + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v68 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
    uint64_t v7 = off_26A99F170;
  }
  xpc_object_t v11 = (std::__shared_weak_count *)*(&off_26A99F170 + 1);
  uint64_t v62 = v7;
  uint64_t v63 = *(&off_26A99F170 + 1);
  if (*(&off_26A99F170 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_26A99F170 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(unint64_t *__return_ptr, uint64_t))(*(void *)v7 + 16))(&v64, v7);
  unint64_t v66 = 0;
  size_t v67 = 0;
  if (v65)
  {
    size_t v67 = std::__shared_weak_count::lock(v65);
    if (v67) {
      unint64_t v66 = v64;
    }
    if (v65) {
      std::__shared_weak_count::__release_weak(v65);
    }
  }
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
    xpc_object_t v12 = (void *)&loc_2637A4000;
    if (!v66) {
      goto LABEL_31;
    }
  }
  else
  {
    xpc_object_t v12 = &loc_2637A4000;
    if (!v66) {
      goto LABEL_31;
    }
  }
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = v12[427];
  aBlock[2] = ___ZN11RadioModule25finishInitialization_syncEv_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_166;
  void aBlock[4] = this;
  aBlock[5] = v3;
  size_t v59 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  xpc_object_t v13 = _Block_copy(aBlock);
  xpc_object_t v14 = *((void *)this + 17);
  if (v14) {
    dispatch_retain(*((dispatch_object_t *)this + 17));
  }
  uint64_t v60 = v13;
  dispatch_object_t v61 = v14;
  radio::CommandDriver::watchOperatingMode();
  if (v61) {
    dispatch_release(v61);
  }
  if (v60) {
    _Block_release(v60);
  }
  if (v59) {
    std::__shared_weak_count::__release_weak(v59);
  }
LABEL_31:
  xpc_object_t v15 = (const char *)(*(uint64_t (**)(RadioModule *))(*(void *)this + 16))(this);
  size_t v16 = strlen(v15);
  if (v16 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  xpc_object_t v17 = (void *)v16;
  if (v16 >= 0x17)
  {
    uint64_t v19 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v16 | 7) != 0x17) {
      uint64_t v19 = v16 | 7;
    }
    uint64_t v20 = v19 + 1;
    xpc_object_t v18 = (void **)operator new(v19 + 1);
    __dst[1] = v17;
    unint64_t v57 = v20 | 0x8000000000000000;
    __dst[0] = v18;
  }
  else
  {
    HIBYTE(v57) = v16;
    xpc_object_t v18 = __dst;
    if (!v16) {
      goto LABEL_39;
    }
  }
  memmove(v18, v15, (size_t)v17);
LABEL_39:
  *((unsigned char *)v17 + (void)v18) = 0;
  CFTypeRef cf = 0;
  AppleBasebandManager::create();
  long long v21 = v68;
  long long v68 = 0uLL;
  xpc_object_t v22 = (std::__shared_weak_count *)*((void *)this + 23);
  *((_OWORD *)this + 11) = v21;
  if (v22 && !atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
    xpc_object_t v23 = (std::__shared_weak_count *)*((void *)&v68 + 1);
    if (!*((void *)&v68 + 1))
    {
LABEL_43:
      CFTypeRef v24 = cf;
      if (!cf) {
        goto LABEL_45;
      }
      goto LABEL_44;
    }
  }
  else
  {
    xpc_object_t v23 = (std::__shared_weak_count *)*((void *)&v68 + 1);
    if (!*((void *)&v68 + 1)) {
      goto LABEL_43;
    }
  }
  if (atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_43;
  }
  ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
  std::__shared_weak_count::__release_weak(v23);
  CFTypeRef v24 = cf;
  if (cf) {
LABEL_44:
  }
    CFRelease(v24);
LABEL_45:
  if (SHIBYTE(v57) < 0) {
    operator delete(__dst[0]);
  }
  xpc_object_t v25 = (const void *)*MEMORY[0x263F26650];
  size_t v26 = strlen((const char *)*MEMORY[0x263F26650]);
  if (v26 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  xpc_object_t v27 = (void *)v26;
  if (v26 >= 0x17)
  {
    uint64_t v29 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v26 | 7) != 0x17) {
      uint64_t v29 = v26 | 7;
    }
    uint64_t v30 = v29 + 1;
    xpc_object_t v28 = operator new(v29 + 1);
    __p[1] = v27;
    unint64_t v54 = v30 | 0x8000000000000000;
    __p[0] = v28;
    goto LABEL_54;
  }
  HIBYTE(v54) = v26;
  xpc_object_t v28 = __p;
  if (v26) {
LABEL_54:
  }
    memmove(v28, v25, (size_t)v27);
  *((unsigned char *)v27 + (void)v28) = 0;
  v49[0] = MEMORY[0x263EF8330];
  uint64_t v31 = v12[427];
  v49[1] = v31;
  std::vector<std::csub_match> v49[2] = ___ZN11RadioModule25finishInitialization_syncEv_block_invoke_167;
  v49[3] = &__block_descriptor_tmp_172;
  v49[4] = this;
  v49[5] = v3;
  uint64_t v50 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  xpc_object_t v32 = _Block_copy(v49);
  xpc_object_t v33 = *((void *)this + 17);
  if (v33) {
    dispatch_retain(*((dispatch_object_t *)this + 17));
  }
  xpc_object_t v51 = v32;
  dispatch_object_t object = v33;
  AppleBasebandManager::setEventHandler();
  if (object) {
    dispatch_release(object);
  }
  if (v51) {
    _Block_release(v51);
  }
  if (SHIBYTE(v54) < 0) {
    operator delete(__p[0]);
  }
  xpc_object_t v34 = (const void *)*MEMORY[0x263F263F0];
  size_t v35 = strlen((const char *)*MEMORY[0x263F263F0]);
  if (v35 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  unsigned int v36 = (void *)v35;
  if (v35 >= 0x17)
  {
    uint64_t v38 = (v35 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v35 | 7) != 0x17) {
      uint64_t v38 = v35 | 7;
    }
    uint64_t v39 = v38 + 1;
    xpc_object_t v37 = operator new(v38 + 1);
    v47[1] = v36;
    unint64_t v48 = v39 | 0x8000000000000000;
    v47[0] = v37;
    goto LABEL_70;
  }
  HIBYTE(v48) = v35;
  xpc_object_t v37 = v47;
  if (v35) {
LABEL_70:
  }
    memmove(v37, v34, (size_t)v36);
  *((unsigned char *)v36 + (void)v37) = 0;
  v43[0] = MEMORY[0x263EF8330];
  v43[1] = v31;
  v43[2] = ___ZN11RadioModule25finishInitialization_syncEv_block_invoke_173;
  v43[3] = &__block_descriptor_tmp_176;
  v43[4] = this;
  v43[5] = v3;
  xpc_object_t v44 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  unsigned int v40 = _Block_copy(v43);
  xpc_object_t v41 = *((void *)this + 17);
  if (v41) {
    dispatch_retain(*((dispatch_object_t *)this + 17));
  }
  unint64_t v45 = v40;
  dispatch_object_t v46 = v41;
  AppleBasebandManager::setEventHandler();
  if (v46) {
    dispatch_release(v46);
  }
  if (v45) {
    _Block_release(v45);
  }
  if (SHIBYTE(v48) < 0) {
    operator delete(v47[0]);
  }
  AppleBasebandManager::eventsOn(*((AppleBasebandManager **)this + 22));
  if (v44) {
    std::__shared_weak_count::__release_weak(v44);
  }
  if (v50) {
    std::__shared_weak_count::__release_weak(v50);
  }
  uint64_t v42 = v67;
  if (v67 && !atomic_fetch_add(&v67->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
    std::__shared_weak_count::__release_weak(v42);
  }
  std::__shared_weak_count::__release_weak(v5);
}

void sub_2636E47BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, char a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,std::__shared_weak_count *a31,char a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,char a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,std::__shared_weak_count *a53)
{
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  std::__shared_weak_count::__release_weak(v53);
  _Unwind_Resume(a1);
}

void ___ZN11RadioModule25finishInitialization_syncEv_block_invoke(void *a1, uint64_t *a2, const __CFDictionary **a3)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  uint64_t v4 = a1[4];
  uint64_t v29 = 0;
  uint64_t v30 = 0;
  std::string::size_type v5 = (std::__shared_weak_count *)a1[6];
  if (v5)
  {
    uint64_t v30 = std::__shared_weak_count::lock(v5);
    if (!v30) {
      return;
    }
    uint64_t v29 = a1[5];
    if (v29)
    {
      uint64_t v8 = *a2;
      if (v8) {
        xpc_object_t v9 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
      }
      else {
        xpc_object_t v9 = 0;
      }
      if (v9)
      {
        uint64_t v10 = *(NSObject **)(v4 + 88);
        if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)xpc_object_t v32 = 138412290;
          *(void *)&v32[4] = v8;
          _os_log_error_impl(&dword_26368A000, v10, OS_LOG_TYPE_ERROR, "%@", v32, 0xCu);
        }
        goto LABEL_10;
      }
      if (*a3
         ? ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get
         : 0)
      {
        xpc_object_t v13 = (const void *)*MEMORY[0x263F26788];
        size_t v14 = strlen((const char *)*MEMORY[0x263F26788]);
        if (v14 >= 0x7FFFFFFFFFFFFFF8) {
          std::string::__throw_length_error[abi:ne180100]();
        }
        xpc_object_t v15 = (void *)v14;
        if (v14 >= 0x17)
        {
          uint64_t v17 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v14 | 7) != 0x17) {
            uint64_t v17 = v14 | 7;
          }
          uint64_t v18 = v17 + 1;
          size_t v16 = (void **)operator new(v17 + 1);
          __dst[1] = v15;
          unint64_t v28 = v18 | 0x8000000000000000;
          __dst[0] = v16;
        }
        else
        {
          HIBYTE(v28) = v14;
          size_t v16 = __dst;
          if (!v14) {
            goto LABEL_26;
          }
        }
        memmove(v16, v13, (size_t)v15);
LABEL_26:
        *((unsigned char *)v15 + (void)v16) = 0;
        CFDictionaryRef v19 = *a3;
        CFTypeRef cf = v19;
        if (v19) {
          CFRetain(v19);
        }
        aBlocunint64_t k = 0;
        Service::broadcastEvent(v4, (uint64_t)__dst, &cf, (const void **)&aBlock);
        if (aBlock) {
          _Block_release(aBlock);
        }
        uint64_t v20 = (capabilities::abs *)cf;
        if (cf) {
          CFRelease(cf);
        }
        if (SHIBYTE(v28) < 0) {
          operator delete(__dst[0]);
        }
        long long v21 = (capabilities::txpower *)capabilities::abs::supportsChargerDesense(v20);
        if (v21 && capabilities::txpower::supportsPowerChargerDesense(v21))
        {
          memset(v32, 170, 16);
          ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v32, *a3);
          ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)buf, (const char *)*MEMORY[0x263F26430]);
          int Int = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v32, *(const __CFString **)buf);
          MEMORY[0x263E68C90](buf);
          TelephonyBasebandSetChargerDesense();
          xpc_object_t v23 = *(NSObject **)(v4 + 88);
          if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
          {
            CFTypeRef v24 = "Off";
            if (!Int) {
              CFTypeRef v24 = "On";
            }
            *(_DWORD *)long long buf = 136315138;
            *(void *)&uint8_t buf[4] = v24;
            _os_log_impl(&dword_26368A000, v23, OS_LOG_TYPE_DEFAULT, "#I Charger Desense: %s", buf, 0xCu);
          }
          MEMORY[0x263E68CD0](v32);
        }
      }
    }
  }
LABEL_10:
  xpc_object_t v11 = v30;
  if (v30)
  {
    if (!atomic_fetch_add(&v30->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

void ___ZN11RadioModule25finishInitialization_syncEv_block_invoke_167(void *a1, abm::client::Event **a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[6];
  if (!v3) {
    return;
  }
  uint64_t v5 = a1[4];
  uint64_t v6 = std::__shared_weak_count::lock(v3);
  xpc_object_t v44 = v6;
  if (!v6) {
    return;
  }
  if (!a1[5])
  {
    size_t v16 = v6;
LABEL_76:
    if (!atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
    return;
  }
  CFDictionaryRef v42 = (const __CFDictionary *)0xAAAAAAAAAAAAAAAALL;
  abm::client::Event::getData((uint64_t *)&v42, *a2);
  CFDictionaryRef v7 = v42;
  if (v42) {
    uint64_t v8 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
  }
  else {
    uint64_t v8 = 0;
  }
  if (v8)
  {
    v41[0] = 0xAAAAAAAAAAAAAAAALL;
    v41[1] = 0xAAAAAAAAAAAAAAAALL;
    ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v41, v42);
    long long v39 = 0uLL;
    uint64_t v40 = 0;
    ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v33, (const char *)*MEMORY[0x263F26140]);
    ctu::cf::map_adapter::getString();
    MEMORY[0x263E68C90](&v33);
    if (SHIBYTE(v40) < 0) {
      operator delete((void *)v39);
    }
    uint64_t v40 = v38;
    long long v39 = *(_OWORD *)buf;
    int v9 = SHIBYTE(v38);
    if (v38 >= 0) {
      size_t v10 = HIBYTE(v40);
    }
    else {
      size_t v10 = *((void *)&v39 + 1);
    }
    if (v10 == strlen((const char *)*MEMORY[0x263F263E8])
      && (v38 >= 0 ? (xpc_object_t v11 = &v39) : (xpc_object_t v11 = (long long *)v39),
          xpc_object_t v12 = (capabilities::radio *)memcmp(v11, (const void *)*MEMORY[0x263F263E8], v10),
          !v12))
    {
      uint64_t v17 = (capabilities::abs *)capabilities::radio::supportsBasebandStateController(v12);
      if (v17) {
        RadioModule::getResetProperties_sync((RadioModule *)v5);
      }
      uint64_t v18 = (RadioModule *)capabilities::abs::supportsBatteryInfoMonitoring(v17);
      if (v18)
      {
        *(_WORD *)(v5 + 320) = 0;
        *(unsigned char *)(v5 + 322) = 0;
        RadioModule::monitorBatteryInfo_sync((RadioModule *)v5);
      }
      RadioModule::setRegion_sync(v18);
      RadioModule::startHealthService_sync((RadioModule *)v5);
      aBlock[0] = MEMORY[0x263EF8330];
      aBlock[1] = 0x40000000;
      aBlock[2] = ___ZN11RadioModule25finishInitialization_syncEv_block_invoke_2;
      aBlock[3] = &__block_descriptor_tmp_168;
      void aBlock[4] = v5;
      CFDictionaryRef v19 = (void (**)(void *, std::string *))_Block_copy(aBlock);
      unsigned int v36 = v19;
      RadioModule::getVersion_sync(v5, &v36);
      if (v19) {
        _Block_release(v19);
      }
      long long v21 = (capabilities::abs *)capabilities::abs::supportsCalibrationQuery(v20);
      if (v21)
      {
        if (*(unsigned char *)(v5 + 192) == 3) {
          RadioModule::queryFactoryCalibrationStatus_sync((RadioModule *)v5);
        }
        if (*(unsigned char *)(v5 + 200) == 2) {
          RadioModule::queryRFCalibrationStatus_sync((RadioModule *)v5);
        }
      }
      xpc_object_t v22 = (capabilities::abs *)capabilities::abs::supportsFieldTestConfig(v21);
      if (v22) {
        RadioModule::queryFieldTestConfig_sync((RadioModule *)v5);
      }
      if (capabilities::abs::supportsResetSPMIEvent(v22))
      {
        unint64_t v33 = 0xAAAAAAAAAAAAAAAALL;
        xpc_object_t v34 = (std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL;
        xpc_object_t v23 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
        uint64_t v24 = off_26A99F170;
        if (!off_26A99F170)
        {
          CommandDriverFactory::create_default_global((uint64_t *)buf, v23);
          long long v25 = *(_OWORD *)buf;
          memset(buf, 0, sizeof(buf));
          size_t v26 = (std::__shared_weak_count *)*(&off_26A99F170 + 1);
          off_26A99F170 = v25;
          if (v26 && !atomic_fetch_add(&v26->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
            std::__shared_weak_count::__release_weak(v26);
          }
          xpc_object_t v27 = *(std::__shared_weak_count **)&buf[8];
          if (*(void *)&buf[8]
            && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
            std::__shared_weak_count::__release_weak(v27);
          }
          uint64_t v24 = off_26A99F170;
        }
        unint64_t v28 = (std::__shared_weak_count *)*(&off_26A99F170 + 1);
        if (*(&off_26A99F170 + 1)) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_26A99F170 + 1) + 8), 1uLL, memory_order_relaxed);
        }
        pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
        (*(void (**)(unint64_t *__return_ptr, uint64_t))(*(void *)v24 + 16))(&v31, v24);
        unint64_t v33 = 0;
        xpc_object_t v34 = 0;
        if (v32)
        {
          xpc_object_t v34 = std::__shared_weak_count::lock(v32);
          if (v34) {
            unint64_t v33 = v31;
          }
          if (v32) {
            std::__shared_weak_count::__release_weak(v32);
          }
        }
        if (v28 && !atomic_fetch_add(&v28->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
          std::__shared_weak_count::__release_weak(v28);
        }
        if (v33) {
          (*(void (**)(unint64_t))(*(void *)v33 + 392))(v33);
        }
        uint64_t v29 = v34;
        if (v34)
        {
          if (!atomic_fetch_add(&v34->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
            std::__shared_weak_count::__release_weak(v29);
            if (SHIBYTE(v40) < 0) {
              goto LABEL_71;
            }
            goto LABEL_72;
          }
        }
      }
    }
    else if (v10 == strlen((const char *)*MEMORY[0x263F26508]) {
           && (v9 >= 0 ? (xpc_object_t v13 = &v39) : (xpc_object_t v13 = (long long *)v39), !memcmp(v13, (const void *)*MEMORY[0x263F26508], v10))
    }
           || v10 == strlen((const char *)*MEMORY[0x263F26678])
           && (v9 >= 0 ? (size_t v14 = &v39) : (size_t v14 = (long long *)v39), !memcmp(v14, (const void *)*MEMORY[0x263F26678], v10)))
    {
      xpc_object_t v15 = *(ctu::iokit::Controller **)(v5 + 304);
      if (v15)
      {
        ctu::iokit::Controller::stopBatteryInfoNotifications(v15);
      }
      else
      {
        uint64_t v30 = *(NSObject **)(v5 + 88);
        if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)long long buf = 0;
          _os_log_error_impl(&dword_26368A000, v30, OS_LOG_TYPE_ERROR, "Invalid fIOKitController", buf, 2u);
          if ((SHIBYTE(v40) & 0x80000000) == 0) {
            goto LABEL_72;
          }
          goto LABEL_71;
        }
      }
    }
    if (SHIBYTE(v40) < 0) {
LABEL_71:
    }
      operator delete((void *)v39);
LABEL_72:
    MEMORY[0x263E68CD0](v41);
    CFDictionaryRef v7 = v42;
  }
  if (v7) {
    CFRelease(v7);
  }
  size_t v16 = v44;
  if (v44) {
    goto LABEL_76;
  }
}

void sub_2636E5234(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  if (*(char *)(v1 - 73) < 0) {
    operator delete(*(void **)(v1 - 96));
  }
  MEMORY[0x263E68CD0](v1 - 72);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)(v1 - 56));
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100](v1 - 48);
  _Unwind_Resume(a1);
}

void RadioModule::getResetProperties_sync(RadioModule *this)
{
  uint64_t v37 = *MEMORY[0x263EF8340];
  if (*((unsigned char *)this + 296))
  {
    uint64_t v2 = *((void *)this + 11);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      if (*((unsigned char *)this + 289)) {
        uint64_t v3 = "true";
      }
      else {
        uint64_t v3 = "false";
      }
      int v4 = *((unsigned __int16 *)this + 145);
      int v5 = *((_DWORD *)this + 73);
      *(_DWORD *)long long buf = 136315650;
      *(void *)&uint8_t buf[4] = v3;
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = v4;
      __int16 v35 = 1024;
      int v36 = v5;
      _os_log_impl(&dword_26368A000, v2, OS_LOG_TYPE_DEFAULT, "#I Baseband properties (cached):\n    Coredump supported: %s\n    PowerSequence index: %u\n    Baseband version: 0x%08x", buf, 0x18u);
    }
    return;
  }
  uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 16);
  if (!v6 || (uint64_t v7 = *((void *)this + 15), (v8 = std::__shared_weak_count::lock(v6)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  int v9 = v8;
  p_shared_weak_owners = &v8->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
  }
  xpc_object_t v32 = (void *)0xAAAAAAAAAAAAAAAALL;
  dispatch_object_t v33 = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN11RadioModule23getResetProperties_syncEv_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_188;
  void aBlock[4] = this;
  void aBlock[5] = v7;
  unint64_t v31 = v9;
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  xpc_object_t v11 = _Block_copy(aBlock);
  xpc_object_t v12 = *((void *)this + 17);
  if (v12) {
    dispatch_retain(v12);
  }
  xpc_object_t v32 = v11;
  dispatch_object_t v33 = v12;
  unint64_t v28 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v29 = (std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL;
  xpc_object_t v13 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  uint64_t v14 = off_26A99F170;
  if (!off_26A99F170)
  {
    CommandDriverFactory::create_default_global((uint64_t *)buf, v13);
    long long v15 = *(_OWORD *)buf;
    *(void *)long long buf = 0;
    *(void *)&uint8_t buf[8] = 0;
    size_t v16 = (std::__shared_weak_count *)*(&off_26A99F170 + 1);
    off_26A99F170 = v15;
    if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
    uint64_t v17 = *(std::__shared_weak_count **)&buf[8];
    if (*(void *)&buf[8]
      && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
    uint64_t v14 = off_26A99F170;
  }
  uint64_t v18 = (std::__shared_weak_count *)*(&off_26A99F170 + 1);
  uint64_t v24 = v14;
  uint64_t v25 = *(&off_26A99F170 + 1);
  if (*(&off_26A99F170 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_26A99F170 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(unint64_t *__return_ptr, uint64_t))(*(void *)v14 + 16))(&v26, v14);
  unint64_t v28 = 0;
  uint64_t v29 = 0;
  if (v27)
  {
    uint64_t v29 = std::__shared_weak_count::lock(v27);
    if (v29) {
      unint64_t v28 = v26;
    }
    if (v27) {
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  if (v18 && !atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
    unint64_t v19 = v28;
    if (v28) {
      goto LABEL_31;
    }
  }
  else
  {
    unint64_t v19 = v28;
    if (v28)
    {
LABEL_31:
      uint64_t v20 = v32;
      if (v32) {
        uint64_t v20 = _Block_copy(v32);
      }
      xpc_object_t v22 = v20;
      dispatch_object_t object = v33;
      if (v33) {
        dispatch_retain(v33);
      }
      (*(void (**)(unint64_t, void **))(*(void *)v19 + 168))(v19, &v22);
      if (object) {
        dispatch_release(object);
      }
      if (v22) {
        _Block_release(v22);
      }
    }
  }
  long long v21 = v29;
  if (v29 && !atomic_fetch_add(&v29->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v21);
  }
  if (v33) {
    dispatch_release(v33);
  }
  if (v32) {
    _Block_release(v32);
  }
  if (v31) {
    std::__shared_weak_count::__release_weak(v31);
  }
  std::__shared_weak_count::__release_weak(v9);
}

void sub_2636E575C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,std::__shared_weak_count *a24)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void RadioModule::monitorBatteryInfo_sync(RadioModule *this)
{
  if (*((void *)this + 38))
  {
    uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 16);
    if (!v2 || (uint64_t v3 = *((void *)this + 15), (v4 = std::__shared_weak_count::lock(v2)) == 0)) {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    int v5 = v4;
    p_shared_weak_owners = &v4->__shared_weak_owners_;
    atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v5);
    }
    memset(v25, 170, sizeof(v25));
    aBlock[0] = MEMORY[0x263EF8330];
    aBlock[1] = 1174405120;
    aBlock[2] = ___ZN11RadioModule23monitorBatteryInfo_syncEv_block_invoke;
    aBlock[3] = &__block_descriptor_tmp_191;
    void aBlock[4] = this;
    void aBlock[5] = v3;
    uint64_t v24 = v5;
    atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
    uint64_t v7 = _Block_copy(aBlock);
    uint64_t v8 = *((void *)this + 17);
    if (v8) {
      dispatch_retain(*((dispatch_object_t *)this + 17));
    }
    *(void *)uint64_t v25 = v7;
    *(void *)&v25[8] = v8;
    int v9 = *((void *)this + 11);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_26368A000, v9, OS_LOG_TYPE_DEFAULT, "#I Registering for battery info updates", buf, 2u);
    }
    v16[0] = MEMORY[0x263EF8330];
    v16[1] = 1174405120;
    void v16[2] = ___ZN11RadioModule23monitorBatteryInfo_syncEv_block_invoke_192;
    v16[3] = &__block_descriptor_tmp_196;
    v16[4] = this;
    v16[5] = v3;
    uint64_t v17 = v5;
    atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    if (v7)
    {
      uint64_t v18 = _Block_copy(v7);
      dispatch_object_t v19 = v8;
      if (!v8) {
        goto LABEL_13;
      }
    }
    else
    {
      uint64_t v18 = 0;
      dispatch_object_t v19 = v8;
      if (!v8)
      {
LABEL_13:
        size_t v10 = _Block_copy(v16);
        xpc_object_t v11 = *((void *)this + 17);
        if (v11) {
          dispatch_retain(*((dispatch_object_t *)this + 17));
        }
        uint64_t v20 = v10;
        dispatch_object_t object = v11;
        char v12 = ctu::iokit::Controller::registerForBatteryInfoChange();
        if (object) {
          dispatch_release(object);
        }
        if (v20) {
          _Block_release(v20);
        }
        if ((v12 & 1) == 0 && (xpc_object_t v13 = *((void *)this + 11), os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)))
        {
          *(_WORD *)long long buf = 0;
          _os_log_error_impl(&dword_26368A000, v13, OS_LOG_TYPE_ERROR, "Failed to register for battery info updates", buf, 2u);
          uint64_t v14 = v19;
          if (!v19) {
            goto LABEL_23;
          }
        }
        else
        {
          uint64_t v14 = v19;
          if (!v19)
          {
LABEL_23:
            if (v18) {
              _Block_release(v18);
            }
            if (v17) {
              std::__shared_weak_count::__release_weak(v17);
            }
            if (v8) {
              dispatch_release(v8);
            }
            if (v7) {
              _Block_release(v7);
            }
            if (v24) {
              std::__shared_weak_count::__release_weak(v24);
            }
            std::__shared_weak_count::__release_weak(v5);
            return;
          }
        }
        dispatch_release(v14);
        goto LABEL_23;
      }
    }
    dispatch_retain(v8);
    goto LABEL_13;
  }
  long long v15 = *((void *)this + 11);
  if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)uint64_t v25 = 0;
    _os_log_error_impl(&dword_26368A000, v15, OS_LOG_TYPE_ERROR, "Invalid fIOKitController", v25, 2u);
  }
}

void sub_2636E5B20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,std::__shared_weak_count *a28)
{
  dispatch::callback<void({block_pointer})(ctu::iokit::TelephonyIOKitBatteryInfo)>::~callback((uint64_t)&a19);
  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>::~callback(v29);
  if (a16)
  {
    std::__shared_weak_count::__release_weak(a16);
    dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>::~callback(v30 - 112);
    xpc_object_t v32 = a28;
    if (!a28)
    {
LABEL_3:
      std::__shared_weak_count::__release_weak(v28);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>::~callback(v30 - 112);
    xpc_object_t v32 = a28;
    if (!a28) {
      goto LABEL_3;
    }
  }
  std::__shared_weak_count::__release_weak(v32);
  std::__shared_weak_count::__release_weak(v28);
  _Unwind_Resume(a1);
}

void RadioModule::setRegion_sync(RadioModule *this)
{
  if (!capabilities::abs::shouldSetRegion(this)) {
    return;
  }
  unint64_t v16 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v17 = (std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL;
  uint64_t v1 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  uint64_t v2 = off_26A99F170;
  if (!off_26A99F170)
  {
    CommandDriverFactory::create_default_global((uint64_t *)&v18, v1);
    long long v3 = v18;
    long long v18 = 0uLL;
    int v4 = (std::__shared_weak_count *)*(&off_26A99F170 + 1);
    off_26A99F170 = v3;
    if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    int v5 = (std::__shared_weak_count *)*((void *)&v18 + 1);
    if (*((void *)&v18 + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v18 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    uint64_t v2 = off_26A99F170;
  }
  uint64_t v6 = (std::__shared_weak_count *)*(&off_26A99F170 + 1);
  uint64_t v12 = v2;
  uint64_t v13 = *(&off_26A99F170 + 1);
  if (*(&off_26A99F170 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_26A99F170 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(unint64_t *__return_ptr, uint64_t))(*(void *)v2 + 16))(&v14, v2);
  unint64_t v16 = 0;
  uint64_t v17 = 0;
  uint64_t v7 = (config::hw *)v15;
  if (v15)
  {
    uint64_t v17 = std::__shared_weak_count::lock(v15);
    if (v17) {
      unint64_t v16 = v14;
    }
    uint64_t v7 = (config::hw *)v15;
    if (v15) {
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    unint64_t v8 = v16;
    if (v16)
    {
LABEL_20:
      config::hw::regionCode(v7);
      (*(void (**)(unint64_t, void **))(*(void *)v8 + 304))(v8, &__p);
      if (v11 < 0) {
        operator delete(__p);
      }
    }
  }
  else
  {
    unint64_t v8 = v16;
    if (v16) {
      goto LABEL_20;
    }
  }
  int v9 = v17;
  if (v17)
  {
    if (!atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_2636E5DF8(_Unwind_Exception *a1)
{
}

void sub_2636E5E14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100](v15 - 48);
    _Unwind_Resume(a1);
  }
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100](v15 - 48);
  _Unwind_Resume(a1);
}

void sub_2636E5E4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void RadioModule::startHealthService_sync(RadioModule *this)
{
  CFMutableDictionaryRef v27 = 0;
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  if (Mutable) {
    CFMutableDictionaryRef v27 = Mutable;
  }
  GetABMLogServer(&v24);
  DataStallDetection::create((capabilities::abs *)&v24, (uint64_t *)&v26);
  long long v3 = v26;
  long long v26 = 0uLL;
  int v4 = (std::__shared_weak_count *)*((void *)this + 33);
  *((_OWORD *)this + 16) = v3;
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  int v5 = (std::__shared_weak_count *)*((void *)&v26 + 1);
  if (*((void *)&v26 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v26 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  uint64_t v6 = v25;
  if (!v25 || atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    uint64_t v7 = (DataStallDetection *)*((void *)this + 32);
    if (!v7) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
  std::__shared_weak_count::__release_weak(v6);
  uint64_t v7 = (DataStallDetection *)*((void *)this + 32);
  if (v7) {
LABEL_12:
  }
    DataStallDetection::start(v7);
LABEL_13:
  unint64_t v8 = (capabilities::radio *)operator new(0x10uLL);
  GetABMLogServer(&v22);
  char v11 = (std::__shared_weak_count *)*((void *)this + 33);
  cf[1] = *((CFTypeRef *)this + 32);
  long long v21 = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  CFMutableDictionaryRef v12 = v27;
  if (v27 && (CFTypeID v13 = CFGetTypeID(v27), v13 == CFDictionaryGetTypeID()))
  {
    cf[0] = v12;
    CFRetain(v12);
  }
  else
  {
    cf[0] = 0;
  }
  radio::HealthService::HealthService(v8, v9, v10, cf);
  unint64_t v14 = operator new(0x20uLL);
  *unint64_t v14 = &unk_270EA8520;
  v14[1] = 0;
  v14[2] = 0;
  void v14[3] = v8;
  uint64_t v15 = (std::__shared_weak_count *)*((void *)this + 35);
  *((void *)this + 34) = v8;
  *((void *)this + 35) = v14;
  if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
    CFTypeRef v16 = cf[0];
    if (!cf[0]) {
      goto LABEL_23;
    }
    goto LABEL_22;
  }
  CFTypeRef v16 = cf[0];
  if (cf[0]) {
LABEL_22:
  }
    CFRelease(v16);
LABEL_23:
  uint64_t v17 = v21;
  if (v21 && !atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  long long v18 = v23;
  if (v23 && !atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
    CFMutableDictionaryRef v19 = v27;
    if (!v27) {
      return;
    }
  }
  else
  {
    CFMutableDictionaryRef v19 = v27;
    if (!v27) {
      return;
    }
  }
  CFRelease(v19);
}

void sub_2636E6180(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10, __int16 a11, char a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17)
{
  uint64_t v20 = (std::__shared_weak_count *)v17[1];
  if (v20)
  {
    if (!atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  operator delete(v17);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&a10);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)(v18 - 40));
  _Unwind_Resume(a1);
}

void ___ZN11RadioModule25finishInitialization_syncEv_block_invoke_2(uint64_t a1, size_t *a2)
{
  uint64_t v2 = a2;
  uint64_t v84 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 32);
  int v4 = (void **)(v3 + 152);
  if ((size_t *)(v3 + 152) == a2) {
    goto LABEL_10;
  }
  if (*(char *)(v3 + 175) < 0)
  {
    if (*((char *)a2 + 23) >= 0)
    {
      size_t v7 = *((unsigned __int8 *)a2 + 23);
    }
    else
    {
      a2 = (size_t *)*a2;
      size_t v7 = v2[1];
    }
    int v4 = std::string::__assign_no_alias<false>(v4, a2, v7);
LABEL_10:
    BOOL isHardwareModelChanged = sys::isHardwareModelChanged((sys *)v4);
    if (isHardwareModelChanged) {
      goto LABEL_15;
    }
    goto LABEL_11;
  }
  if ((*((unsigned char *)a2 + 23) & 0x80) != 0)
  {
    uint64_t v9 = (sys *)std::string::__assign_no_alias<true>(v4, (void *)*a2, a2[1]);
    BOOL isHardwareModelChanged = sys::isHardwareModelChanged(v9);
    if (isHardwareModelChanged) {
      goto LABEL_15;
    }
  }
  else
  {
    long long v5 = *(_OWORD *)a2;
    *(void *)(v3 + 168) = a2[2];
    *(_OWORD *)int v4 = v5;
    BOOL isHardwareModelChanged = sys::isHardwareModelChanged((sys *)v4);
    if (isHardwareModelChanged) {
      goto LABEL_15;
    }
  }
LABEL_11:
  BOOL isHardwareModelChanged = sys::isFWVersionChanged((unsigned __int8 *)v2);
  if (!isHardwareModelChanged)
  {
    BOOL isHardwareModelChanged = sys::isOSVersionChanged((sys *)isHardwareModelChanged);
    if (!isHardwareModelChanged)
    {
      CFAllocatorRef v8 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
      goto LABEL_80;
    }
  }
LABEL_15:
  *(void *)&long long v10 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v10 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v80 = v10;
  long long v81 = v10;
  long long v78 = v10;
  long long v79 = v10;
  long long v76 = v10;
  long long v77 = v10;
  config::hw::product((config::hw *)isHardwareModelChanged);
  config::build::version(v11);
  if (*((char *)v2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)&v79, (const std::string::value_type *)*v2, v2[1]);
  }
  else
  {
    long long v79 = *(_OWORD *)v2;
    *(void *)&long long v80 = v2[2];
  }
  Timestamp::Timestamp((Timestamp *)&buf);
  Timestamp::asString(v12, 0, 9, (unsigned char *)&v80 + 8);
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&buf, (void *)buf.__r_.__value_.__l.__size_);
  pthread_mutex_lock(&ctu::Singleton<DeviceHistoryDB,DeviceHistoryDB,ctu::PthreadMutexGuardPolicy<DeviceHistoryDB>>::sInstance);
  if (!(void)xmmword_26A99F280)
  {
    unint64_t v14 = (char *)operator new(0x60uLL);
    DeviceHistoryDB::DeviceHistoryDB((DeviceHistoryDB *)v14);
    CFTypeID v13 = operator new(0x20uLL);
    *CFTypeID v13 = &unk_270EA8490;
    v13[1] = 0;
    void v13[2] = 0;
    v13[3] = v14;
    uint64_t v15 = (std::__shared_weak_count *)*((void *)&xmmword_26A99F280 + 1);
    *(void *)&xmmword_26A99F280 = v14;
    *((void *)&xmmword_26A99F280 + 1) = v13;
    if (!v15)
    {
      buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v14;
      buf.__r_.__value_.__l.__size_ = (std::string::size_type)v13;
      goto LABEL_25;
    }
    if (!atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  CFTypeID v13 = (void *)*((void *)&xmmword_26A99F280 + 1);
  unint64_t v14 = (char *)xmmword_26A99F280;
  *(_OWORD *)&buf.__r_.__value_.__l.__data_ = xmmword_26A99F280;
  if (*((void *)&xmmword_26A99F280 + 1)) {
LABEL_25:
  }
    atomic_fetch_add_explicit(v13 + 1, 1uLL, memory_order_relaxed);
  pthread_mutex_unlock(&ctu::Singleton<DeviceHistoryDB,DeviceHistoryDB,ctu::PthreadMutexGuardPolicy<DeviceHistoryDB>>::sInstance);
  _DeviceHistoryItem::_DeviceHistoryItem(&v69, (const _DeviceHistoryItem *)&v76);
  unint64_t v16 = *((void *)v14 + 10);
  if (v16 >= *((void *)v14 + 11))
  {
    uint64_t v17 = std::vector<_DeviceHistoryItem>::__push_back_slow_path<_DeviceHistoryItem const&>((int64x2_t *)(v14 + 72), (const _DeviceHistoryItem *)&v69);
  }
  else
  {
    _DeviceHistoryItem::_DeviceHistoryItem(*((std::string **)v14 + 10), (const _DeviceHistoryItem *)&v69);
    uint64_t v17 = v16 + 96;
    *((void *)v14 + 10) = v16 + 96;
  }
  *((void *)v14 + 10) = v17;
  DeviceHistoryDB::commitToDisk((DeviceHistoryDB *)v14);
  if (v75 < 0)
  {
    operator delete(__p);
    if ((v73 & 0x80000000) == 0)
    {
LABEL_31:
      if ((v71 & 0x80000000) == 0) {
        goto LABEL_32;
      }
      goto LABEL_37;
    }
  }
  else if ((v73 & 0x80000000) == 0)
  {
    goto LABEL_31;
  }
  operator delete(v72);
  if ((v71 & 0x80000000) == 0)
  {
LABEL_32:
    if ((SHIBYTE(v69.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_33;
    }
    goto LABEL_38;
  }
LABEL_37:
  operator delete(v70);
  if ((SHIBYTE(v69.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_33:
    std::string::size_type size = (std::__shared_weak_count *)buf.__r_.__value_.__l.__size_;
    if (!buf.__r_.__value_.__l.__size_) {
      goto LABEL_41;
    }
    goto LABEL_39;
  }
LABEL_38:
  operator delete(v69.__r_.__value_.__l.__data_);
  std::string::size_type size = (std::__shared_weak_count *)buf.__r_.__value_.__l.__size_;
  if (!buf.__r_.__value_.__l.__size_) {
    goto LABEL_41;
  }
LABEL_39:
  if (!atomic_fetch_add(&size->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
    std::__shared_weak_count::__release_weak(size);
  }
LABEL_41:
  CFMutableDictionaryRef v19 = *(NSObject **)(v3 + 88);
  BOOL v20 = os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT);
  long long v21 = (const __CFString ***)MEMORY[0x263F26268];
  if (v20)
  {
    std::string::size_type v22 = *MEMORY[0x263F26268];
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v22;
    _os_log_impl(&dword_26368A000, v19, OS_LOG_TYPE_DEFAULT, "#I Broadcasting %s", (uint8_t *)&buf, 0xCu);
  }
  memset(&v68, 0, sizeof(v68));
  if (sys::isHardwareModelChanged((sys *)v20))
  {
    xpc_object_t v23 = (const std::string::value_type **)MEMORY[0x263F26800];
  }
  else
  {
    BOOL isFWVersionChanged = sys::isFWVersionChanged((unsigned __int8 *)v2);
    xpc_object_t v23 = (const std::string::value_type **)MEMORY[0x263F26748];
    if (isFWVersionChanged) {
      xpc_object_t v23 = (const std::string::value_type **)MEMORY[0x263F267B8];
    }
  }
  std::string::__assign_external(&v68, *v23);
  CFMutableDictionaryRef v82 = 0;
  CFAllocatorRef v8 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  CFMutableDictionaryRef v27 = Mutable;
  if (Mutable) {
    CFMutableDictionaryRef v82 = Mutable;
  }
  if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&buf, v68.__r_.__value_.__l.__data_, v68.__r_.__value_.__l.__size_);
  }
  else {
    std::string buf = v68;
  }
  ctu::cf::insert<char const*,std::string>(v27, *v21, (uint64_t)&buf, (uint64_t)v8, v26);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf.__r_.__value_.__l.__data_);
  }
  unint64_t v28 = (const void *)*MEMORY[0x263F26238];
  size_t v29 = strlen((const char *)*MEMORY[0x263F26238]);
  if (v29 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v30 = (void *)v29;
  if (v29 >= 0x17)
  {
    uint64_t v33 = (v29 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v29 | 7) != 0x17) {
      uint64_t v33 = v29 | 7;
    }
    uint64_t v34 = v33 + 1;
    unint64_t v31 = (void **)operator new(v33 + 1);
    __dst[1] = v30;
    unint64_t v67 = v34 | 0x8000000000000000;
    __dst[0] = v31;
LABEL_62:
    memmove(v31, v28, (size_t)v30);
    *((unsigned char *)v30 + (void)v31) = 0;
    CFMutableDictionaryRef v32 = v82;
    if (!v82) {
      goto LABEL_65;
    }
    goto LABEL_63;
  }
  HIBYTE(v67) = v29;
  unint64_t v31 = __dst;
  if (v29) {
    goto LABEL_62;
  }
  LOBYTE(__dst[0]) = 0;
  CFMutableDictionaryRef v32 = v82;
  if (!v82) {
    goto LABEL_65;
  }
LABEL_63:
  CFTypeID v35 = CFGetTypeID(v32);
  if (v35 == CFDictionaryGetTypeID())
  {
    CFTypeRef cf = v32;
    CFRetain(v32);
    goto LABEL_66;
  }
LABEL_65:
  CFTypeRef cf = 0;
LABEL_66:
  aBlocunint64_t k = 0;
  Service::broadcastEvent(v3, (uint64_t)__dst, &cf, (const void **)&aBlock);
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (SHIBYTE(v67) < 0)
  {
    operator delete(__dst[0]);
    if (!v32) {
      goto LABEL_75;
    }
    goto LABEL_74;
  }
  if (v32) {
LABEL_74:
  }
    CFRelease(v32);
LABEL_75:
  if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v68.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v81) & 0x80000000) == 0)
    {
LABEL_77:
      if ((SBYTE7(v80) & 0x80000000) == 0) {
        goto LABEL_78;
      }
      goto LABEL_87;
    }
  }
  else if ((SHIBYTE(v81) & 0x80000000) == 0)
  {
    goto LABEL_77;
  }
  operator delete(*((void **)&v80 + 1));
  if ((SBYTE7(v80) & 0x80000000) == 0)
  {
LABEL_78:
    if ((SHIBYTE(v78) & 0x80000000) == 0) {
      goto LABEL_79;
    }
LABEL_88:
    operator delete(*((void **)&v77 + 1));
    if ((SBYTE7(v77) & 0x80000000) == 0) {
      goto LABEL_80;
    }
    goto LABEL_89;
  }
LABEL_87:
  operator delete((void *)v79);
  if (SHIBYTE(v78) < 0) {
    goto LABEL_88;
  }
LABEL_79:
  if ((SBYTE7(v77) & 0x80000000) == 0) {
    goto LABEL_80;
  }
LABEL_89:
  operator delete((void *)v76);
LABEL_80:
  CFMutableDictionaryRef v36 = CFDictionaryCreateMutable(v8, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  uint64_t v38 = v36;
  if (v36)
  {
    CFMutableDictionaryRef v63 = v36;
    if (*((char *)v2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&v76, (const std::string::value_type *)*v2, v2[1]);
    }
    else
    {
      long long v76 = *(_OWORD *)v2;
      *(void *)&long long v77 = v2[2];
    }
    uint64_t v40 = (config::build *)ctu::cf::insert<char const*,std::string>(v38, (const __CFString **)*MEMORY[0x263F261C0], (uint64_t)&v76, (uint64_t)v8, v37);
    if (SBYTE7(v77) < 0) {
      operator delete((void *)v76);
    }
    config::build::version(v40);
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&v76, buf.__r_.__value_.__l.__data_, buf.__r_.__value_.__l.__size_);
    }
    else
    {
      long long v76 = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
      *(void *)&long long v77 = *((void *)&buf.__r_.__value_.__l + 2);
    }
    ctu::cf::insert<char const*,std::string>(v38, (const __CFString **)*MEMORY[0x263F261C8], (uint64_t)&v76, (uint64_t)v8, v41);
    if (SBYTE7(v77) < 0)
    {
      operator delete((void *)v76);
      if ((SHIBYTE(buf.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_98;
      }
    }
    else if ((SHIBYTE(buf.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_98;
    }
    operator delete(buf.__r_.__value_.__l.__data_);
LABEL_98:
    CFDictionaryRef v42 = (char *)operator new(0x28uLL);
    strcpy(v42, "AppleBasebandServices_Manager-1211");
    std::string::__init_copy_ctor_external((std::string *)&v76, v42, 0x22uLL);
    ctu::cf::insert<char const*,std::string>(v38, (const __CFString **)*MEMORY[0x263F26070], (uint64_t)&v76, (uint64_t)v8, v43);
    if (SBYTE7(v77) < 0) {
      operator delete((void *)v76);
    }
    operator delete(v42);
    config::hw::product(v44);
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&v76, buf.__r_.__value_.__l.__data_, buf.__r_.__value_.__l.__size_);
    }
    else
    {
      long long v76 = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
      *(void *)&long long v77 = *((void *)&buf.__r_.__value_.__l + 2);
    }
    ctu::cf::insert<char const*,std::string>(v38, (const __CFString **)*MEMORY[0x263F26068], (uint64_t)&v76, (uint64_t)v8, v45);
    if (SBYTE7(v77) < 0)
    {
      operator delete((void *)v76);
      if ((SHIBYTE(buf.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_107;
      }
    }
    else if ((SHIBYTE(buf.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_107;
    }
    operator delete(buf.__r_.__value_.__l.__data_);
LABEL_107:
    pid_t v46 = getpid();
    std::to_string(&buf, v46);
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&v76, buf.__r_.__value_.__l.__data_, buf.__r_.__value_.__l.__size_);
    }
    else
    {
      long long v76 = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
      *(void *)&long long v77 = *((void *)&buf.__r_.__value_.__l + 2);
    }
    unint64_t v48 = (capabilities::radio *)ctu::cf::insert<char const*,std::string>(v38, (const __CFString **)*MEMORY[0x263F25EF8], (uint64_t)&v76, (uint64_t)v8, v47);
    if (SBYTE7(v77) < 0)
    {
      operator delete((void *)v76);
      if ((SHIBYTE(buf.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_114;
      }
    }
    else if ((SHIBYTE(buf.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_114;
    }
    operator delete(buf.__r_.__value_.__l.__data_);
LABEL_114:
    capabilities::radio::radioType((uint64_t *)&buf, v48);
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&v76, buf.__r_.__value_.__l.__data_, buf.__r_.__value_.__l.__size_);
    }
    else
    {
      long long v76 = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
      *(void *)&long long v77 = *((void *)&buf.__r_.__value_.__l + 2);
    }
    ctu::cf::insert<char const*,std::string>(v38, (const __CFString **)*MEMORY[0x263F261D0], (uint64_t)&v76, (uint64_t)v8, v49);
    if (SBYTE7(v77) < 0)
    {
      operator delete((void *)v76);
      if ((SHIBYTE(buf.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_121;
      }
    }
    else if ((SHIBYTE(buf.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_121;
    }
    operator delete(buf.__r_.__value_.__l.__data_);
LABEL_121:
    config::hw::getBootArgs(&buf);
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&v76, buf.__r_.__value_.__l.__data_, buf.__r_.__value_.__l.__size_);
    }
    else
    {
      long long v76 = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
      *(void *)&long long v77 = *((void *)&buf.__r_.__value_.__l + 2);
    }
    ctu::cf::insert<char const*,std::string>(v38, (const __CFString **)*MEMORY[0x263F26120], (uint64_t)&v76, (uint64_t)v8, v50);
    if (SBYTE7(v77) < 0)
    {
      operator delete((void *)v76);
      if ((SHIBYTE(buf.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_128;
      }
    }
    else if ((SHIBYTE(buf.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_128;
    }
    operator delete(buf.__r_.__value_.__l.__data_);
LABEL_128:
    pthread_mutex_lock(&ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance);
    xpc_object_t v51 = (os_unfair_lock_s *)xmmword_26A99F080;
    if (!(void)xmmword_26A99F080)
    {
      SharedData::create_default_global(&v76);
      long long v52 = v76;
      long long v76 = 0uLL;
      std::string v53 = (std::__shared_weak_count *)*((void *)&xmmword_26A99F080 + 1);
      xmmword_26A99F080 = v52;
      if (v53 && !atomic_fetch_add(&v53->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
        std::__shared_weak_count::__release_weak(v53);
      }
      unint64_t v54 = (std::__shared_weak_count *)*((void *)&v76 + 1);
      if (*((void *)&v76 + 1)
        && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v76 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
        std::__shared_weak_count::__release_weak(v54);
      }
      xpc_object_t v51 = (os_unfair_lock_s *)xmmword_26A99F080;
    }
    v68.__r_.__value_.__r.__words[0] = (std::string::size_type)v51;
    v68.__r_.__value_.__l.__size_ = *((void *)&xmmword_26A99F080 + 1);
    if (*((void *)&xmmword_26A99F080 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&xmmword_26A99F080 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    pthread_mutex_unlock(&ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance);
    uint64_t v55 = (const void *)*MEMORY[0x263F260F0];
    size_t v56 = strlen((const char *)*MEMORY[0x263F260F0]);
    if (v56 > 0x7FFFFFFFFFFFFFF7) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    std::string::size_type v57 = v56;
    if (v56 >= 0x17)
    {
      uint64_t v59 = (v56 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v56 | 7) != 0x17) {
        uint64_t v59 = v56 | 7;
      }
      uint64_t v60 = v59 + 1;
      p_std::string buf = (std::string *)operator new(v59 + 1);
      buf.__r_.__value_.__l.__size_ = v57;
      buf.__r_.__value_.__r.__words[2] = v60 | 0x8000000000000000;
      buf.__r_.__value_.__r.__words[0] = (std::string::size_type)p_buf;
    }
    else
    {
      *((unsigned char *)&buf.__r_.__value_.__s + 23) = v56;
      p_std::string buf = &buf;
      if (!v56) {
        goto LABEL_146;
      }
    }
    memmove(p_buf, v55, v57);
LABEL_146:
    p_buf->__r_.__value_.__s.__data_[v57] = 0;
    CFMutableDictionaryRef v82 = v63;
    *(void *)&long long v76 = &buf;
    *((void *)&v76 + 1) = &v82;
    *(void *)&long long v77 = v51;
    ctu::SharedLockable<SharedData>::execute_sync<BOOL SharedData::setPreference<__CFDictionary *>(std::string const&,__CFDictionary *)::{lambda(void)#1}>(v51 + 6, (uint64_t *)&v76);
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf.__r_.__value_.__l.__data_);
    }
    dispatch_object_t v61 = (std::__shared_weak_count *)v68.__r_.__value_.__l.__size_;
    if (v68.__r_.__value_.__l.__size_
      && !atomic_fetch_add((atomic_ullong *volatile)(v68.__r_.__value_.__l.__size_ + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
      CFMutableDictionaryRef v62 = v63;
    }
    else
    {
      CFMutableDictionaryRef v62 = v63;
    }
    CFRelease(v62);
    return;
  }
  long long v39 = *(NSObject **)(v3 + 88);
  if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
  {
    LOWORD(v76) = 0;
    _os_log_error_impl(&dword_26368A000, v39, OS_LOG_TYPE_ERROR, "Failed to create dictionary to update abm domain preferences", (uint8_t *)&v76, 2u);
  }
}

void sub_2636E6E1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10, void *aBlock, char a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,void *__p,uint64_t a44,int a45,__int16 a46,char a47,char a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
}

void sub_2636E70E0()
{
}

void RadioModule::queryFactoryCalibrationStatus_sync(RadioModule *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 16);
  if (!v2 || (uint64_t v3 = *((void *)this + 15), (v4 = std::__shared_weak_count::lock(v2)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  long long v5 = v4;
  p_shared_weak_owners = &v4->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v5);
  }
  unint64_t v28 = (void *)0xAAAAAAAAAAAAAAAALL;
  dispatch_object_t v29 = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN11RadioModule34queryFactoryCalibrationStatus_syncEv_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_200;
  void aBlock[4] = this;
  void aBlock[5] = v3;
  CFMutableDictionaryRef v27 = v5;
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  size_t v7 = _Block_copy(aBlock);
  CFAllocatorRef v8 = *((void *)this + 17);
  if (v8) {
    dispatch_retain(v8);
  }
  unint64_t v28 = v7;
  dispatch_object_t v29 = v8;
  unint64_t v24 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v25 = (std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL;
  uint64_t v9 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  uint64_t v10 = off_26A99F170;
  if (!off_26A99F170)
  {
    CommandDriverFactory::create_default_global((uint64_t *)&v30, v9);
    long long v11 = v30;
    long long v30 = 0uLL;
    uint64_t v12 = (std::__shared_weak_count *)*(&off_26A99F170 + 1);
    off_26A99F170 = v11;
    if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
    CFTypeID v13 = (std::__shared_weak_count *)*((void *)&v30 + 1);
    if (*((void *)&v30 + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v30 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
    uint64_t v10 = off_26A99F170;
  }
  unint64_t v14 = (std::__shared_weak_count *)*(&off_26A99F170 + 1);
  uint64_t v20 = v10;
  uint64_t v21 = *(&off_26A99F170 + 1);
  if (*(&off_26A99F170 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_26A99F170 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(unint64_t *__return_ptr, uint64_t))(*(void *)v10 + 16))(&v22, v10);
  unint64_t v24 = 0;
  uint64_t v25 = 0;
  if (v23)
  {
    uint64_t v25 = std::__shared_weak_count::lock(v23);
    if (v25) {
      unint64_t v24 = v22;
    }
    if (v23) {
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
    unint64_t v15 = v24;
    if (!v24) {
      goto LABEL_33;
    }
  }
  else
  {
    unint64_t v15 = v24;
    if (!v24) {
      goto LABEL_33;
    }
  }
  unint64_t v16 = v28;
  if (v28) {
    unint64_t v16 = _Block_copy(v28);
  }
  uint64_t v18 = v16;
  dispatch_object_t object = v29;
  if (v29) {
    dispatch_retain(v29);
  }
  (*(void (**)(unint64_t, void **))(*(void *)v15 + 120))(v15, &v18);
  if (object) {
    dispatch_release(object);
  }
  if (v18) {
    _Block_release(v18);
  }
LABEL_33:
  uint64_t v17 = v25;
  if (v25 && !atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  if (v29) {
    dispatch_release(v29);
  }
  if (v28) {
    _Block_release(v28);
  }
  if (v27) {
    std::__shared_weak_count::__release_weak(v27);
  }
  std::__shared_weak_count::__release_weak(v5);
}

void sub_2636E74A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,std::__shared_weak_count *a24)
{
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>::~callback(v25 - 64);
  if (a24) {
    std::__shared_weak_count::__release_weak(a24);
  }
  std::__shared_weak_count::__release_weak(v24);
  _Unwind_Resume(a1);
}

void RadioModule::queryRFCalibrationStatus_sync(RadioModule *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 16);
  if (!v2 || (uint64_t v3 = *((void *)this + 15), (v4 = std::__shared_weak_count::lock(v2)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  long long v5 = v4;
  p_shared_weak_owners = &v4->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v5);
  }
  unint64_t v28 = (void *)0xAAAAAAAAAAAAAAAALL;
  dispatch_object_t v29 = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN11RadioModule29queryRFCalibrationStatus_syncEv_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_203;
  void aBlock[4] = this;
  void aBlock[5] = v3;
  CFMutableDictionaryRef v27 = v5;
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  size_t v7 = _Block_copy(aBlock);
  CFAllocatorRef v8 = *((void *)this + 17);
  if (v8) {
    dispatch_retain(v8);
  }
  unint64_t v28 = v7;
  dispatch_object_t v29 = v8;
  unint64_t v24 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v25 = (std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL;
  uint64_t v9 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  uint64_t v10 = off_26A99F170;
  if (!off_26A99F170)
  {
    CommandDriverFactory::create_default_global((uint64_t *)&v30, v9);
    long long v11 = v30;
    long long v30 = 0uLL;
    uint64_t v12 = (std::__shared_weak_count *)*(&off_26A99F170 + 1);
    off_26A99F170 = v11;
    if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
    CFTypeID v13 = (std::__shared_weak_count *)*((void *)&v30 + 1);
    if (*((void *)&v30 + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v30 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
    uint64_t v10 = off_26A99F170;
  }
  unint64_t v14 = (std::__shared_weak_count *)*(&off_26A99F170 + 1);
  uint64_t v20 = v10;
  uint64_t v21 = *(&off_26A99F170 + 1);
  if (*(&off_26A99F170 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_26A99F170 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(unint64_t *__return_ptr, uint64_t))(*(void *)v10 + 16))(&v22, v10);
  unint64_t v24 = 0;
  uint64_t v25 = 0;
  if (v23)
  {
    uint64_t v25 = std::__shared_weak_count::lock(v23);
    if (v25) {
      unint64_t v24 = v22;
    }
    if (v23) {
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
    unint64_t v15 = v24;
    if (!v24) {
      goto LABEL_33;
    }
  }
  else
  {
    unint64_t v15 = v24;
    if (!v24) {
      goto LABEL_33;
    }
  }
  unint64_t v16 = v28;
  if (v28) {
    unint64_t v16 = _Block_copy(v28);
  }
  uint64_t v18 = v16;
  dispatch_object_t object = v29;
  if (v29) {
    dispatch_retain(v29);
  }
  (*(void (**)(unint64_t, void **))(*(void *)v15 + 128))(v15, &v18);
  if (object) {
    dispatch_release(object);
  }
  if (v18) {
    _Block_release(v18);
  }
LABEL_33:
  uint64_t v17 = v25;
  if (v25 && !atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  if (v29) {
    dispatch_release(v29);
  }
  if (v28) {
    _Block_release(v28);
  }
  if (v27) {
    std::__shared_weak_count::__release_weak(v27);
  }
  std::__shared_weak_count::__release_weak(v5);
}

void sub_2636E78A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,std::__shared_weak_count *a24)
{
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>::~callback(v25 - 64);
  if (a24) {
    std::__shared_weak_count::__release_weak(a24);
  }
  std::__shared_weak_count::__release_weak(v24);
  _Unwind_Resume(a1);
}

void RadioModule::queryFieldTestConfig_sync(RadioModule *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 16);
  if (!v2 || (uint64_t v3 = *((void *)this + 15), (v4 = std::__shared_weak_count::lock(v2)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  long long v5 = v4;
  p_shared_weak_owners = &v4->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v5);
  }
  unint64_t v28 = (void *)0xAAAAAAAAAAAAAAAALL;
  dispatch_object_t v29 = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN11RadioModule25queryFieldTestConfig_syncEv_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_206;
  void aBlock[4] = this;
  void aBlock[5] = v3;
  CFMutableDictionaryRef v27 = v5;
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  size_t v7 = _Block_copy(aBlock);
  CFAllocatorRef v8 = *((void *)this + 17);
  if (v8) {
    dispatch_retain(v8);
  }
  unint64_t v28 = v7;
  dispatch_object_t v29 = v8;
  unint64_t v24 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v25 = (std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL;
  uint64_t v9 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  uint64_t v10 = off_26A99F170;
  if (!off_26A99F170)
  {
    CommandDriverFactory::create_default_global((uint64_t *)&v30, v9);
    long long v11 = v30;
    long long v30 = 0uLL;
    uint64_t v12 = (std::__shared_weak_count *)*(&off_26A99F170 + 1);
    off_26A99F170 = v11;
    if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
    CFTypeID v13 = (std::__shared_weak_count *)*((void *)&v30 + 1);
    if (*((void *)&v30 + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v30 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
    uint64_t v10 = off_26A99F170;
  }
  unint64_t v14 = (std::__shared_weak_count *)*(&off_26A99F170 + 1);
  uint64_t v20 = v10;
  uint64_t v21 = *(&off_26A99F170 + 1);
  if (*(&off_26A99F170 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_26A99F170 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(unint64_t *__return_ptr, uint64_t))(*(void *)v10 + 16))(&v22, v10);
  unint64_t v24 = 0;
  uint64_t v25 = 0;
  if (v23)
  {
    uint64_t v25 = std::__shared_weak_count::lock(v23);
    if (v25) {
      unint64_t v24 = v22;
    }
    if (v23) {
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
    unint64_t v15 = v24;
    if (!v24) {
      goto LABEL_33;
    }
  }
  else
  {
    unint64_t v15 = v24;
    if (!v24) {
      goto LABEL_33;
    }
  }
  unint64_t v16 = v28;
  if (v28) {
    unint64_t v16 = _Block_copy(v28);
  }
  uint64_t v18 = v16;
  dispatch_object_t object = v29;
  if (v29) {
    dispatch_retain(v29);
  }
  (*(void (**)(unint64_t, void **))(*(void *)v15 + 184))(v15, &v18);
  if (object) {
    dispatch_release(object);
  }
  if (v18) {
    _Block_release(v18);
  }
LABEL_33:
  uint64_t v17 = v25;
  if (v25 && !atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  if (v29) {
    dispatch_release(v29);
  }
  if (v28) {
    _Block_release(v28);
  }
  if (v27) {
    std::__shared_weak_count::__release_weak(v27);
  }
  std::__shared_weak_count::__release_weak(v5);
}

void sub_2636E7CAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,std::__shared_weak_count *a24)
{
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>::~callback(v25 - 64);
  if (a24) {
    std::__shared_weak_count::__release_weak(a24);
  }
  std::__shared_weak_count::__release_weak(v24);
  _Unwind_Resume(a1);
}

void RadioModule::stopMonitoringBatteryInfo_sync(RadioModule *this)
{
  if (*((void *)this + 38))
  {
    uint64_t v1 = (ctu::iokit::Controller *)*((void *)this + 38);
    ctu::iokit::Controller::stopBatteryInfoNotifications(v1);
  }
  else
  {
    uint64_t v2 = *((void *)this + 11);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v3 = 0;
      _os_log_error_impl(&dword_26368A000, v2, OS_LOG_TYPE_ERROR, "Invalid fIOKitController", v3, 2u);
    }
  }
}

void ___ZN11RadioModule25finishInitialization_syncEv_block_invoke_173(void *a1)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    uint64_t v3 = a1[4];
    int v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      long long v5 = v4;
      if (a1[5])
      {
        uint64_t v6 = *(NSObject **)(v3 + 88);
        BOOL v7 = os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
        if (v7)
        {
          CFAllocatorRef v8 = (void *)(v3 + 152);
          if (*(char *)(v3 + 175) < 0) {
            CFAllocatorRef v8 = (void *)*v8;
          }
          *(_DWORD *)std::string buf = 136315138;
          *(void *)&uint8_t buf[4] = v8;
          _os_log_impl(&dword_26368A000, v6, OS_LOG_TYPE_DEFAULT, "#I Baseband FW Version: %s", buf, 0xCu);
        }
        if (capabilities::abs::supportsCalibrationQuery((capabilities::abs *)v7))
        {
          uint64_t v9 = *(NSObject **)(v3 + 88);
          BOOL v10 = os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
          if (v10)
          {
            uint64_t v11 = capabilities::radio::supportsFactoryCalibrationV2((capabilities::radio *)v10)
                ? radio::asStringV2()
                : radio::asString();
            uint64_t v12 = v11;
            radio::RFCalibration_t::toString((uint64_t *)buf, (radio::RFCalibration_t *)(v3 + 200));
            CFTypeID v13 = v17 >= 0 ? buf : *(unsigned char **)buf;
            *(_DWORD *)uint64_t v18 = 136315394;
            CFMutableDictionaryRef v19 = (unsigned char *)v12;
            __int16 v20 = 2080;
            uint64_t v21 = v13;
            _os_log_impl(&dword_26368A000, v9, OS_LOG_TYPE_DEFAULT, "#I \n--- Factory and RF calibration ---\n%s\n%s\n----------------------------------", v18, 0x16u);
            if (v17 < 0) {
              operator delete(*(void **)buf);
            }
          }
        }
        if (MEMORY[0x263E6A240](*(void *)(v3 + 248)) == MEMORY[0x263EF8708])
        {
          unint64_t v14 = *(NSObject **)(v3 + 88);
          if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
          {
            xpc::object::to_string((uint64_t *)buf, (xpc::object *)(v3 + 248));
            if (v17 >= 0) {
              unint64_t v15 = buf;
            }
            else {
              unint64_t v15 = *(unsigned char **)buf;
            }
            *(_DWORD *)uint64_t v18 = 136315138;
            CFMutableDictionaryRef v19 = v15;
            _os_log_impl(&dword_26368A000, v14, OS_LOG_TYPE_DEFAULT, "#I Baseband field test config:\n%s", v18, 0xCu);
            if (v17 < 0) {
              operator delete(*(void **)buf);
            }
          }
        }
      }
      if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void sub_2636E8020(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_2636E8034(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_2636E8048(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_2636E805C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void RadioModule::sleep(void *a1, dispatch_object_t *a2)
{
  uint64_t v3 = *a2;
  if (*a2)
  {
    dispatch_retain(*a2);
    dispatch_group_enter(v3);
  }
  int v4 = (std::__shared_weak_count *)a1[16];
  if (!v4 || (uint64_t v5 = a1[15], (v6 = std::__shared_weak_count::lock(v4)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  BOOL v7 = v6;
  CFAllocatorRef v8 = operator new(0x10uLL);
  void *v8 = a1;
  v8[1] = v3;
  uint64_t v9 = a1[17];
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  BOOL v10 = operator new(0x18uLL);
  void *v10 = v8;
  v10[1] = v5;
  v10[2] = v7;
  dispatch_async_f(v9, v10, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<RadioModule>::execute_wrapped<RadioModule::sleep(dispatch::group_session)::$_0>(RadioModule::sleep(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<RadioModule::sleep(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<RadioModule::sleep(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke);
  if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void RadioModule::wake(void *a1, dispatch_object_t *a2)
{
  uint64_t v3 = *a2;
  if (*a2)
  {
    dispatch_retain(*a2);
    dispatch_group_enter(v3);
  }
  int v4 = (std::__shared_weak_count *)a1[16];
  if (!v4 || (uint64_t v5 = a1[15], (v6 = std::__shared_weak_count::lock(v4)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  BOOL v7 = v6;
  CFAllocatorRef v8 = operator new(0x10uLL);
  void *v8 = a1;
  v8[1] = v3;
  uint64_t v9 = a1[17];
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  BOOL v10 = operator new(0x18uLL);
  void *v10 = v8;
  v10[1] = v5;
  v10[2] = v7;
  dispatch_async_f(v9, v10, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<RadioModule>::execute_wrapped<RadioModule::wake(dispatch::group_session)::$_0>(RadioModule::wake(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<RadioModule::wake(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<RadioModule::wake(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke);
  if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void ___ZN11RadioModule15getVersion_syncEN8dispatch5blockIU13block_pointerFvNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEEE_block_invoke(void *a1, std::string::size_type *a2, const __CFDictionary **a3)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  int v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    uint64_t v7 = a1[4];
    CFAllocatorRef v8 = std::__shared_weak_count::lock(v4);
    CFMutableDictionaryRef v19 = v8;
    if (v8)
    {
      uint64_t v9 = v8;
      if (!a1[5]) {
        goto LABEL_28;
      }
      std::string::size_type v10 = *a2;
      if (v10 ? ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get : 0)
      {
        uint64_t v12 = *(NSObject **)(v7 + 88);
        if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
        {
          LODWORD(buf.__r_.__value_.__l.__data_) = 138412290;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v10;
          _os_log_error_impl(&dword_26368A000, v12, OS_LOG_TYPE_ERROR, "%@", (uint8_t *)&buf, 0xCu);
        }
      }
      else
      {
        CFDictionaryRef v13 = *a3;
        if (*a3) {
          unint64_t v14 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
        }
        else {
          unint64_t v14 = 0;
        }
        if (v14)
        {
          v17[0] = 0xAAAAAAAAAAAAAAAALL;
          v17[1] = 0xAAAAAAAAAAAAAAAALL;
          ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v17, v13);
          ctu::cf::map_adapter::getString();
          unint64_t v15 = (void **)(v7 + 152);
          if (*(char *)(v7 + 175) < 0) {
            operator delete(*v15);
          }
          *(_OWORD *)unint64_t v15 = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
          *(void *)(v7 + 168) = *((void *)&buf.__r_.__value_.__l + 2);
          *((unsigned char *)&buf.__r_.__value_.__s + 23) = 0;
          buf.__r_.__value_.__s.__data_[0] = 0;
          MEMORY[0x263E68CD0](v17);
        }
      }
      uint64_t v16 = a1[7];
      if (*(char *)(v7 + 175) < 0) {
        std::string::__init_copy_ctor_external(&buf, *(const std::string::value_type **)(v7 + 152), *(void *)(v7 + 160));
      }
      else {
        std::string buf = *(std::string *)(v7 + 152);
      }
      (*(void (**)(uint64_t, std::string *))(v16 + 16))(v16, &buf);
      if ((SHIBYTE(buf.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_28:
        if (atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
          return;
        }
        goto LABEL_22;
      }
      operator delete(buf.__r_.__value_.__l.__data_);
      if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
LABEL_22:
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
}

void sub_2636E84E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, char a18)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  MEMORY[0x263E68CD0](&a16);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  _Unwind_Resume(a1);
}

void sub_2636E8510(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2636E8528(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void *__copy_helper_block_e8_40c36_ZTSNSt3__18weak_ptrI11RadioModuleEE56c106_ZTSN8dispatch5blockIU13block_pointerFvNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEEE(void *a1, void *a2)
{
  uint64_t v3 = a2[6];
  a1[5] = a2[5];
  a1[6] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  xpc_object_t result = (void *)a2[7];
  if (result) {
    xpc_object_t result = _Block_copy(result);
  }
  a1[7] = result;
  return result;
}

void __destroy_helper_block_e8_40c36_ZTSNSt3__18weak_ptrI11RadioModuleEE56c106_ZTSN8dispatch5blockIU13block_pointerFvNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEEE(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 56);
  if (v2) {
    _Block_release(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3)
  {
    std::__shared_weak_count::__release_weak(v3);
  }
}

void ___ZN11RadioModule21getOperatingMode_syncEN8dispatch5blockIU13block_pointerFviEEE_block_invoke(void *a1, uint64_t *a2, const __CFDictionary **a3)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  int v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    uint64_t v7 = a1[4];
    CFAllocatorRef v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      uint64_t v9 = v8;
      if (a1[5])
      {
        uint64_t v10 = *a2;
        if (v10) {
          uint64_t v11 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
        }
        else {
          uint64_t v11 = 0;
        }
        if (v11)
        {
          uint64_t v12 = *(NSObject **)(v7 + 88);
          if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)std::string buf = 138412290;
            *(void *)&uint8_t buf[4] = v10;
            _os_log_error_impl(&dword_26368A000, v12, OS_LOG_TYPE_ERROR, "%@", buf, 0xCu);
          }
        }
        else
        {
          CFDictionaryRef v13 = *a3;
          if (*a3) {
            unint64_t v14 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
          }
          else {
            unint64_t v14 = 0;
          }
          if (v14)
          {
            memset(buf, 170, 16);
            ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)buf, v13);
            ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)buf, (const __CFString *)*MEMORY[0x263F8B8D0]);
            MEMORY[0x263E68CD0](buf);
          }
        }
        (*(void (**)(void))(a1[7] + 16))();
      }
      if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
}

void *__copy_helper_block_e8_40c36_ZTSNSt3__18weak_ptrI11RadioModuleEE56c43_ZTSN8dispatch5blockIU13block_pointerFviEEE(void *a1, void *a2)
{
  uint64_t v3 = a2[6];
  a1[5] = a2[5];
  a1[6] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  xpc_object_t result = (void *)a2[7];
  if (result) {
    xpc_object_t result = _Block_copy(result);
  }
  a1[7] = result;
  return result;
}

void __destroy_helper_block_e8_40c36_ZTSNSt3__18weak_ptrI11RadioModuleEE56c43_ZTSN8dispatch5blockIU13block_pointerFviEEE(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 56);
  if (v2) {
    _Block_release(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3)
  {
    std::__shared_weak_count::__release_weak(v3);
  }
}

void ___ZN11RadioModule23getResetProperties_syncEv_block_invoke(void *a1, CFErrorRef *a2, const void **a3)
{
  uint64_t v150 = *MEMORY[0x263EF8340];
  int v4 = (std::__shared_weak_count *)a1[6];
  if (!v4) {
    return;
  }
  uint64_t v7 = a1[4];
  CFAllocatorRef v8 = std::__shared_weak_count::lock(v4);
  uint64_t v145 = v8;
  if (!v8) {
    return;
  }
  uint64_t v144 = a1[5];
  if (!v144)
  {
    uint64_t v11 = v8;
LABEL_257:
    if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    return;
  }
  memset(&v143, 0, sizeof(v143));
  if (*a2) {
    uint64_t v9 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  }
  else {
    uint64_t v9 = 0;
  }
  if (v9)
  {
    std::string::__assign_external(&v143, "Failed to get reset properties", 0x1EuLL);
    uint64_t v10 = *(NSObject **)(v7 + 88);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      xpc_object_t v23 = &v143;
      if ((v143.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        xpc_object_t v23 = (std::string *)v143.__r_.__value_.__r.__words[0];
      }
      CFErrorRef v24 = *a2;
      *(_DWORD *)std::string buf = 136315394;
      *(void *)&uint8_t buf[4] = v23;
      *(_WORD *)&unsigned char buf[12] = 2112;
      *(void *)&buf[14] = v24;
      _os_log_error_impl(&dword_26368A000, v10, OS_LOG_TYPE_ERROR, "%s\n:%@", buf, 0x16u);
    }
    CFErrorGetCode(*a2);
    goto LABEL_254;
  }
  uint64_t v12 = *a3;
  CFTypeRef cf = v12;
  if (v12) {
    CFRetain(v12);
  }
  uint64_t v13 = radio::BasebandProperties::create();
  *(void *)(v7 + 288) = v13;
  if (cf)
  {
    CFRelease(cf);
    if (*(unsigned char *)(v7 + 288)) {
      goto LABEL_15;
    }
LABEL_27:
    std::string::__assign_external(&v143, "Invalid reset properties", 0x18uLL);
    __int16 v20 = *(NSObject **)(v7 + 88);
    if (!os_log_type_enabled(v20, OS_LOG_TYPE_ERROR)) {
      goto LABEL_222;
    }
    uint64_t v21 = &v143;
    if ((v143.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      uint64_t v21 = (std::string *)v143.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)std::string buf = 136315138;
    *(void *)&uint8_t buf[4] = v21;
LABEL_263:
    _os_log_error_impl(&dword_26368A000, v20, OS_LOG_TYPE_ERROR, "%s", buf, 0xCu);
    goto LABEL_222;
  }
  if (!(_BYTE)v13) {
    goto LABEL_27;
  }
LABEL_15:
  unint64_t v14 = *(NSObject **)(v7 + 88);
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    if (*(unsigned char *)(v7 + 289)) {
      unint64_t v15 = "true";
    }
    else {
      unint64_t v15 = "false";
    }
    int v16 = *(unsigned __int16 *)(v7 + 290);
    int v17 = *(_DWORD *)(v7 + 292);
    *(_DWORD *)std::string buf = 136315650;
    *(void *)&uint8_t buf[4] = v15;
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = v16;
    *(_WORD *)&unsigned char buf[18] = 1024;
    *(_DWORD *)&buf[20] = v17;
    _os_log_impl(&dword_26368A000, v14, OS_LOG_TYPE_DEFAULT, "#I Baseband properties:\n    Coredump supported: %s\n    PowerSequence index: %u\n    Baseband version: 0x%08x", buf, 0x18u);
  }
  if ((TelephonyUtilIsInternalBuild() & 1) == 0
    && (TelephonyUtilIsCarrierBuild() & 1) == 0
    && !TelephonyUtilIsVendorBuild())
  {
    goto LABEL_219;
  }
  LOBYTE(v146) = *(unsigned char *)(v7 + 289) ^ 1;
  pthread_mutex_lock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
  if (!qword_26A99F2D0)
  {
    CFMutableDictionaryRef v19 = (CFStringRef *)operator new(0x18uLL);
    MEMORY[0x263E68CE0](v19, @"com.apple.AppleBasebandManager", *MEMORY[0x263EFFE70]);
    uint64_t v18 = (std::__shared_weak_count *)operator new(0x20uLL);
    v18->__vftable = (std::__shared_weak_count_vtbl *)&unk_270EA8570;
    v18->__shared_owners_ = 0;
    v18->__shared_weak_owners_ = 0;
    v18[1].__vftable = (std::__shared_weak_count_vtbl *)v19;
    uint64_t v22 = (std::__shared_weak_count *)off_26A99F2D8;
    qword_26A99F2D0 = (uint64_t)v19;
    off_26A99F2D8 = v18;
    if (!v22)
    {
      uint64_t v140 = (uint64_t)v19;
      size_t v141 = v18;
      goto LABEL_38;
    }
    if (!atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  CFMutableDictionaryRef v19 = (CFStringRef *)qword_26A99F2D0;
  uint64_t v18 = (std::__shared_weak_count *)off_26A99F2D8;
  uint64_t v140 = qword_26A99F2D0;
  size_t v141 = (std::__shared_weak_count *)off_26A99F2D8;
  if (off_26A99F2D8) {
LABEL_38:
  }
    atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
  pthread_mutex_unlock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
  uint64_t v25 = (const void *)*MEMORY[0x263F8B8F0];
  size_t v26 = strlen((const char *)*MEMORY[0x263F8B8F0]);
  if (v26 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v27 = v26;
  if (v26 >= 0x17)
  {
    uint64_t v29 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v26 | 7) != 0x17) {
      uint64_t v29 = v26 | 7;
    }
    uint64_t v30 = v29 + 1;
    unint64_t v28 = operator new(v29 + 1);
    *(void *)&uint8_t buf[8] = v27;
    *(void *)&uint8_t buf[16] = v30 | 0x8000000000000000;
    *(void *)std::string buf = v28;
    goto LABEL_46;
  }
  uint8_t buf[23] = v26;
  unint64_t v28 = buf;
  if (v26) {
LABEL_46:
  }
    memmove(v28, v25, v27);
  v28[v27] = 0;
  int v31 = *(unsigned __int8 *)(v7 + 289);
  if (buf[23] >= 0) {
    CFMutableDictionaryRef v32 = buf;
  }
  else {
    CFMutableDictionaryRef v32 = *(const char **)buf;
  }
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&key, v32);
  uint64_t v33 = (const void **)MEMORY[0x263EFFB40];
  if (!v31) {
    uint64_t v33 = (const void **)MEMORY[0x263EFFB38];
  }
  uint64_t v34 = *v33;
  int64_t valuePtr = v34;
  CFTypeID v35 = (CFStringRef *)MEMORY[0x263EFFE68];
  if (v34)
  {
    CFStringRef v36 = (const __CFString *)*MEMORY[0x263EFFE68];
    CFPreferencesSetValue(key, v34, v19[1], v19[2], (CFStringRef)*MEMORY[0x263EFFE68]);
    BOOL v37 = CFPreferencesSynchronize(v19[1], v19[2], v36) != 0;
    CFRelease(v34);
    MEMORY[0x263E68C90](&key);
    if ((buf[23] & 0x80000000) == 0) {
      goto LABEL_54;
    }
  }
  else
  {
    BOOL v37 = 0;
    MEMORY[0x263E68C90](&key);
    if ((buf[23] & 0x80000000) == 0)
    {
LABEL_54:
      uint64_t v38 = v141;
      if (!v141) {
        goto LABEL_60;
      }
      goto LABEL_58;
    }
  }
  operator delete(*(void **)buf);
  uint64_t v38 = v141;
  if (!v141) {
    goto LABEL_60;
  }
LABEL_58:
  if (!atomic_fetch_add(&v38->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
    std::__shared_weak_count::__release_weak(v38);
  }
LABEL_60:
  if (!v37)
  {
LABEL_93:
    std::string v53 = *(NSObject **)(v7 + 88);
    if (os_log_type_enabled(v53, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_error_impl(&dword_26368A000, v53, OS_LOG_TYPE_ERROR, "Failed to save CoredumpSupported property in ABMPreferences file", buf, 2u);
    }
    goto LABEL_95;
  }
  pthread_mutex_lock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
  if (!qword_26A99F2D0)
  {
    uint64_t v40 = (std::__shared_weak_count_vtbl *)operator new(0x18uLL);
    MEMORY[0x263E68CE0](v40, @"com.apple.AppleBasebandManager", *MEMORY[0x263EFFE70]);
    long long v39 = (std::__shared_weak_count *)operator new(0x20uLL);
    v39->__vftable = (std::__shared_weak_count_vtbl *)&unk_270EA8570;
    v39->__shared_owners_ = 0;
    v39->__shared_weak_owners_ = 0;
    v39[1].__vftable = v40;
    CFAllocatorRef v41 = (std::__shared_weak_count *)off_26A99F2D8;
    qword_26A99F2D0 = (uint64_t)v40;
    off_26A99F2D8 = v39;
    if (!v41)
    {
      uint64_t v140 = (uint64_t)v40;
      size_t v141 = v39;
      goto LABEL_68;
    }
    if (!atomic_fetch_add(&v41->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  uint64_t v40 = (std::__shared_weak_count_vtbl *)qword_26A99F2D0;
  long long v39 = (std::__shared_weak_count *)off_26A99F2D8;
  uint64_t v140 = qword_26A99F2D0;
  size_t v141 = (std::__shared_weak_count *)off_26A99F2D8;
  if (off_26A99F2D8) {
LABEL_68:
  }
    atomic_fetch_add_explicit(&v39->__shared_owners_, 1uLL, memory_order_relaxed);
  pthread_mutex_unlock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
  size_t v42 = strlen((const char *)v25);
  if (v42 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v43 = v42;
  if (v42 >= 0x17)
  {
    uint64_t v45 = (v42 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v42 | 7) != 0x17) {
      uint64_t v45 = v42 | 7;
    }
    uint64_t v46 = v45 + 1;
    xpc_object_t v44 = operator new(v45 + 1);
    *(void *)&uint8_t buf[8] = v43;
    *(void *)&uint8_t buf[16] = v46 | 0x8000000000000000;
    *(void *)std::string buf = v44;
    goto LABEL_76;
  }
  uint8_t buf[23] = v42;
  xpc_object_t v44 = buf;
  if (v42) {
LABEL_76:
  }
    memmove(v44, v25, v43);
  v44[v43] = 0;
  if (buf[23] >= 0) {
    CFAllocatorRef v47 = buf;
  }
  else {
    CFAllocatorRef v47 = *(const char **)buf;
  }
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&valuePtr, v47);
  unint64_t v48 = (BOOL *)(*(uint64_t (**)(std::__shared_weak_count_vtbl *, const void *))v40->~__shared_weak_count)(v40, valuePtr);
  CFAllocatorRef v49 = v48;
  if (v48)
  {
    CFTypeID v50 = CFGetTypeID(v48);
    if (v50 == CFBooleanGetTypeID()) {
      int v52 = ctu::cf::assign((ctu::cf *)&v146, v49, v51);
    }
    else {
      int v52 = 0;
    }
    CFRelease(v49);
  }
  else
  {
    int v52 = 0;
  }
  MEMORY[0x263E68C90](&valuePtr);
  if ((buf[23] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  if (v141 && !atomic_fetch_add(&v141->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v141->__on_zero_shared)(v141);
    std::__shared_weak_count::__release_weak(v141);
  }
  if (!v52 || v146 != *(unsigned __int8 *)(v7 + 289)) {
    goto LABEL_93;
  }
LABEL_95:
  LOWORD(v139) = *(_WORD *)(v7 + 290) == 0;
  pthread_mutex_lock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
  if (!qword_26A99F2D0)
  {
    uint64_t v55 = (CFStringRef *)operator new(0x18uLL);
    MEMORY[0x263E68CE0](v55, @"com.apple.AppleBasebandManager", *MEMORY[0x263EFFE70]);
    unint64_t v54 = (std::__shared_weak_count *)operator new(0x20uLL);
    v54->__vftable = (std::__shared_weak_count_vtbl *)&unk_270EA8570;
    v54->__shared_owners_ = 0;
    v54->__shared_weak_owners_ = 0;
    v54[1].__vftable = (std::__shared_weak_count_vtbl *)v55;
    size_t v56 = (std::__shared_weak_count *)off_26A99F2D8;
    qword_26A99F2D0 = (uint64_t)v55;
    off_26A99F2D8 = v54;
    if (!v56)
    {
      uint64_t v140 = (uint64_t)v55;
      size_t v141 = v54;
      goto LABEL_102;
    }
    if (!atomic_fetch_add(&v56->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
  uint64_t v55 = (CFStringRef *)qword_26A99F2D0;
  unint64_t v54 = (std::__shared_weak_count *)off_26A99F2D8;
  uint64_t v140 = qword_26A99F2D0;
  size_t v141 = (std::__shared_weak_count *)off_26A99F2D8;
  if (off_26A99F2D8) {
LABEL_102:
  }
    atomic_fetch_add_explicit(&v54->__shared_owners_, 1uLL, memory_order_relaxed);
  pthread_mutex_unlock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
  std::string::size_type v57 = (const void *)*MEMORY[0x263F8B8F8];
  size_t v58 = strlen((const char *)*MEMORY[0x263F8B8F8]);
  if (v58 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v59 = v58;
  if (v58 >= 0x17)
  {
    uint64_t v61 = (v58 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v58 | 7) != 0x17) {
      uint64_t v61 = v58 | 7;
    }
    uint64_t v62 = v61 + 1;
    uint64_t v60 = operator new(v61 + 1);
    *(void *)&uint8_t buf[8] = v59;
    *(void *)&uint8_t buf[16] = v62 | 0x8000000000000000;
    *(void *)std::string buf = v60;
    goto LABEL_110;
  }
  uint8_t buf[23] = v58;
  uint64_t v60 = buf;
  if (v58) {
LABEL_110:
  }
    memmove(v60, v57, v59);
  v60[v59] = 0;
  CFMutableDictionaryRef v63 = (const void *)*(unsigned __int16 *)(v7 + 290);
  if (buf[23] >= 0) {
    unint64_t v64 = buf;
  }
  else {
    unint64_t v64 = *(const char **)buf;
  }
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v146, v64);
  CFStringRef v65 = v146;
  CFAllocatorRef v66 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  int64_t valuePtr = v63;
  CFStringRef v67 = (const __CFString *)CFNumberCreate(v66, kCFNumberLongLongType, &valuePtr);
  CFStringRef key = v67;
  if (v67)
  {
    CFStringRef v68 = *v35;
    CFPreferencesSetValue(v65, v67, v55[1], v55[2], *v35);
    BOOL v69 = CFPreferencesSynchronize(v55[1], v55[2], v68) != 0;
    CFRelease(v67);
    MEMORY[0x263E68C90](&v146);
    if ((buf[23] & 0x80000000) == 0) {
      goto LABEL_116;
    }
  }
  else
  {
    BOOL v69 = 0;
    MEMORY[0x263E68C90](&v146);
    if ((buf[23] & 0x80000000) == 0)
    {
LABEL_116:
      uint64_t v70 = v141;
      if (!v141) {
        goto LABEL_122;
      }
      goto LABEL_120;
    }
  }
  operator delete(*(void **)buf);
  uint64_t v70 = v141;
  if (!v141) {
    goto LABEL_122;
  }
LABEL_120:
  if (!atomic_fetch_add(&v70->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
    std::__shared_weak_count::__release_weak(v70);
  }
LABEL_122:
  if (!v69)
  {
LABEL_155:
    unsigned int v86 = *(NSObject **)(v7 + 88);
    if (os_log_type_enabled(v86, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_error_impl(&dword_26368A000, v86, OS_LOG_TYPE_ERROR, "Failed to save PowerSequence property in ABMPreferences file", buf, 2u);
    }
    goto LABEL_157;
  }
  pthread_mutex_lock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
  if (!qword_26A99F2D0)
  {
    __n128 v72 = (std::__shared_weak_count_vtbl *)operator new(0x18uLL);
    MEMORY[0x263E68CE0](v72, @"com.apple.AppleBasebandManager", *MEMORY[0x263EFFE70]);
    char v71 = (std::__shared_weak_count *)operator new(0x20uLL);
    v71->__vftable = (std::__shared_weak_count_vtbl *)&unk_270EA8570;
    v71->__shared_owners_ = 0;
    v71->__shared_weak_owners_ = 0;
    v71[1].__vftable = v72;
    char v73 = (std::__shared_weak_count *)off_26A99F2D8;
    qword_26A99F2D0 = (uint64_t)v72;
    off_26A99F2D8 = v71;
    if (!v73)
    {
      uint64_t v140 = (uint64_t)v72;
      size_t v141 = v71;
      goto LABEL_130;
    }
    if (!atomic_fetch_add(&v73->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
      std::__shared_weak_count::__release_weak(v73);
    }
  }
  __n128 v72 = (std::__shared_weak_count_vtbl *)qword_26A99F2D0;
  char v71 = (std::__shared_weak_count *)off_26A99F2D8;
  uint64_t v140 = qword_26A99F2D0;
  size_t v141 = (std::__shared_weak_count *)off_26A99F2D8;
  if (off_26A99F2D8) {
LABEL_130:
  }
    atomic_fetch_add_explicit(&v71->__shared_owners_, 1uLL, memory_order_relaxed);
  pthread_mutex_unlock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
  size_t v74 = strlen((const char *)v57);
  if (v74 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v75 = v74;
  if (v74 >= 0x17)
  {
    uint64_t v77 = (v74 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v74 | 7) != 0x17) {
      uint64_t v77 = v74 | 7;
    }
    uint64_t v78 = v77 + 1;
    long long v76 = operator new(v77 + 1);
    *(void *)&uint8_t buf[8] = v75;
    *(void *)&uint8_t buf[16] = v78 | 0x8000000000000000;
    *(void *)std::string buf = v76;
    goto LABEL_138;
  }
  uint8_t buf[23] = v74;
  long long v76 = buf;
  if (v74) {
LABEL_138:
  }
    memmove(v76, v57, v75);
  v76[v75] = 0;
  if (buf[23] >= 0) {
    long long v79 = buf;
  }
  else {
    long long v79 = *(const char **)buf;
  }
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&valuePtr, v79);
  long long v80 = (unsigned __int16 *)(*(uint64_t (**)(std::__shared_weak_count_vtbl *, const void *))v72->~__shared_weak_count)(v72, valuePtr);
  long long v81 = v80;
  if (v80)
  {
    CFTypeID v82 = CFGetTypeID(v80);
    if (v82 == CFNumberGetTypeID()) {
      int v84 = ctu::cf::assign((ctu::cf *)&v139, v81, v83);
    }
    else {
      int v84 = 0;
    }
    CFRelease(v81);
  }
  else
  {
    int v84 = 0;
  }
  MEMORY[0x263E68C90](&valuePtr);
  if ((buf[23] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  size_t v85 = v141;
  if (v141 && !atomic_fetch_add(&v141->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
    std::__shared_weak_count::__release_weak(v85);
  }
  if (!v84 || (unsigned __int16)v139 != *(unsigned __int16 *)(v7 + 290)) {
    goto LABEL_155;
  }
LABEL_157:
  int v139 = *(_DWORD *)(v7 + 292) == 0;
  pthread_mutex_lock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
  if (!qword_26A99F2D0)
  {
    uint64_t v88 = (CFStringRef *)operator new(0x18uLL);
    MEMORY[0x263E68CE0](v88, @"com.apple.AppleBasebandManager", *MEMORY[0x263EFFE70]);
    uint64_t v87 = (std::__shared_weak_count *)operator new(0x20uLL);
    v87->__vftable = (std::__shared_weak_count_vtbl *)&unk_270EA8570;
    v87->__shared_owners_ = 0;
    v87->__shared_weak_owners_ = 0;
    v87[1].__vftable = (std::__shared_weak_count_vtbl *)v88;
    uint64_t v89 = (std::__shared_weak_count *)off_26A99F2D8;
    qword_26A99F2D0 = (uint64_t)v88;
    off_26A99F2D8 = v87;
    if (!v89)
    {
      uint64_t v140 = (uint64_t)v88;
      size_t v141 = v87;
      goto LABEL_164;
    }
    if (!atomic_fetch_add(&v89->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
      std::__shared_weak_count::__release_weak(v89);
    }
  }
  uint64_t v88 = (CFStringRef *)qword_26A99F2D0;
  uint64_t v87 = (std::__shared_weak_count *)off_26A99F2D8;
  uint64_t v140 = qword_26A99F2D0;
  size_t v141 = (std::__shared_weak_count *)off_26A99F2D8;
  if (off_26A99F2D8) {
LABEL_164:
  }
    atomic_fetch_add_explicit(&v87->__shared_owners_, 1uLL, memory_order_relaxed);
  pthread_mutex_unlock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
  long long v90 = (const void *)*MEMORY[0x263F8B8E0];
  size_t v91 = strlen((const char *)*MEMORY[0x263F8B8E0]);
  if (v91 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v92 = v91;
  if (v91 >= 0x17)
  {
    uint64_t v94 = (v91 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v91 | 7) != 0x17) {
      uint64_t v94 = v91 | 7;
    }
    uint64_t v95 = v94 + 1;
    size_t v93 = operator new(v94 + 1);
    *(void *)&uint8_t buf[8] = v92;
    *(void *)&uint8_t buf[16] = v95 | 0x8000000000000000;
    *(void *)std::string buf = v93;
    goto LABEL_172;
  }
  uint8_t buf[23] = v91;
  size_t v93 = buf;
  if (v91) {
LABEL_172:
  }
    memmove(v93, v90, v92);
  v93[v92] = 0;
  long long v96 = (const void *)*(unsigned int *)(v7 + 292);
  if (buf[23] >= 0) {
    long long v97 = buf;
  }
  else {
    long long v97 = *(const char **)buf;
  }
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v146, v97);
  CFStringRef v98 = v146;
  int64_t valuePtr = v96;
  CFStringRef v99 = (const __CFString *)CFNumberCreate(v66, kCFNumberLongLongType, &valuePtr);
  CFStringRef key = v99;
  if (v99)
  {
    CFStringRef v100 = *v35;
    CFPreferencesSetValue(v98, v99, v88[1], v88[2], *v35);
    BOOL v101 = CFPreferencesSynchronize(v88[1], v88[2], v100) != 0;
    CFRelease(v99);
    MEMORY[0x263E68C90](&v146);
    if ((buf[23] & 0x80000000) == 0) {
      goto LABEL_178;
    }
  }
  else
  {
    BOOL v101 = 0;
    MEMORY[0x263E68C90](&v146);
    if ((buf[23] & 0x80000000) == 0)
    {
LABEL_178:
      uint64_t v102 = v141;
      if (!v141) {
        goto LABEL_184;
      }
      goto LABEL_182;
    }
  }
  operator delete(*(void **)buf);
  uint64_t v102 = v141;
  if (!v141) {
    goto LABEL_184;
  }
LABEL_182:
  if (!atomic_fetch_add(&v102->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
    std::__shared_weak_count::__release_weak(v102);
  }
LABEL_184:
  if (!v101)
  {
LABEL_217:
    uint64_t v118 = *(NSObject **)(v7 + 88);
    if (os_log_type_enabled(v118, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_error_impl(&dword_26368A000, v118, OS_LOG_TYPE_ERROR, "Failed to save BasebandVersion property in ABMPreferences file", buf, 2u);
    }
    goto LABEL_219;
  }
  pthread_mutex_lock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
  if (!qword_26A99F2D0)
  {
    size_t v104 = (std::__shared_weak_count_vtbl *)operator new(0x18uLL);
    MEMORY[0x263E68CE0](v104, @"com.apple.AppleBasebandManager", *MEMORY[0x263EFFE70]);
    unint64_t v103 = (std::__shared_weak_count *)operator new(0x20uLL);
    v103->__vftable = (std::__shared_weak_count_vtbl *)&unk_270EA8570;
    v103->__shared_owners_ = 0;
    v103->__shared_weak_owners_ = 0;
    v103[1].__vftable = v104;
    int v105 = (std::__shared_weak_count *)off_26A99F2D8;
    qword_26A99F2D0 = (uint64_t)v104;
    off_26A99F2D8 = v103;
    if (!v105)
    {
      uint64_t v140 = (uint64_t)v104;
      size_t v141 = v103;
      goto LABEL_192;
    }
    if (!atomic_fetch_add(&v105->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
      std::__shared_weak_count::__release_weak(v105);
    }
  }
  size_t v104 = (std::__shared_weak_count_vtbl *)qword_26A99F2D0;
  unint64_t v103 = (std::__shared_weak_count *)off_26A99F2D8;
  uint64_t v140 = qword_26A99F2D0;
  size_t v141 = (std::__shared_weak_count *)off_26A99F2D8;
  if (off_26A99F2D8) {
LABEL_192:
  }
    atomic_fetch_add_explicit(&v103->__shared_owners_, 1uLL, memory_order_relaxed);
  pthread_mutex_unlock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
  size_t v106 = strlen((const char *)v90);
  if (v106 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v107 = v106;
  if (v106 >= 0x17)
  {
    uint64_t v109 = (v106 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v106 | 7) != 0x17) {
      uint64_t v109 = v106 | 7;
    }
    uint64_t v110 = v109 + 1;
    uint64_t v108 = operator new(v109 + 1);
    *(void *)&uint8_t buf[8] = v107;
    *(void *)&uint8_t buf[16] = v110 | 0x8000000000000000;
    *(void *)std::string buf = v108;
    goto LABEL_200;
  }
  uint8_t buf[23] = v106;
  uint64_t v108 = buf;
  if (v106) {
LABEL_200:
  }
    memmove(v108, v90, v107);
  v108[v107] = 0;
  if (buf[23] >= 0) {
    uint64_t v111 = buf;
  }
  else {
    uint64_t v111 = *(const char **)buf;
  }
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&valuePtr, v111);
  uint64_t v112 = (unsigned int *)(*(uint64_t (**)(std::__shared_weak_count_vtbl *, const void *))v104->~__shared_weak_count)(v104, valuePtr);
  __n128 v113 = v112;
  if (v112)
  {
    CFTypeID v114 = CFGetTypeID(v112);
    if (v114 == CFNumberGetTypeID()) {
      int v116 = ctu::cf::assign((ctu::cf *)&v139, v113, v115);
    }
    else {
      int v116 = 0;
    }
    CFRelease(v113);
  }
  else
  {
    int v116 = 0;
  }
  MEMORY[0x263E68C90](&valuePtr);
  if ((buf[23] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  uint64_t v117 = v141;
  if (v141 && !atomic_fetch_add(&v141->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
    std::__shared_weak_count::__release_weak(v117);
  }
  if (!v116 || v139 != *(_DWORD *)(v7 + 292)) {
    goto LABEL_217;
  }
LABEL_219:
  int v119 = TelephonyBasebandSetBasebandProperty();
  if (TelephonyBasebandSetBasebandProperty() & v119)
  {
    *(unsigned char *)(v7 + 296) = 1;
    goto LABEL_254;
  }
  *(unsigned char *)(v7 + 296) = 0;
  std::string::__assign_external(&v143, "Failed to send reset properties to AppleBaseband driver", 0x37uLL);
  __int16 v20 = *(NSObject **)(v7 + 88);
  if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
  {
    size_t v136 = &v143;
    if ((v143.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      size_t v136 = (std::string *)v143.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)std::string buf = 136315138;
    *(void *)&uint8_t buf[4] = v136;
    goto LABEL_263;
  }
LABEL_222:
  if ((TelephonyUtilIsInternalBuild() & 1) == 0
    && (TelephonyUtilIsCarrierBuild() & 1) == 0
    && !TelephonyUtilIsVendorBuild())
  {
    goto LABEL_254;
  }
  xpc_object_t v120 = xpc_dictionary_create(0, 0, 0);
  if (v120 || (xpc_object_t v120 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x263E6A240](v120) == MEMORY[0x263EF8708])
    {
      xpc_retain(v120);
      xpc_object_t v121 = v120;
    }
    else
    {
      xpc_object_t v121 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v121 = xpc_null_create();
    xpc_object_t v120 = 0;
  }
  xpc_release(v120);
  xpc_object_t v122 = xpc_string_create((const char *)*MEMORY[0x263F26178]);
  if (!v122) {
    xpc_object_t v122 = xpc_null_create();
  }
  xpc_dictionary_set_value(v121, (const char *)*MEMORY[0x263F26148], v122);
  xpc_object_t v123 = xpc_null_create();
  xpc_release(v122);
  xpc_release(v123);
  xpc_object_t v124 = xpc_string_create((const char *)*MEMORY[0x263F26718]);
  if (!v124) {
    xpc_object_t v124 = xpc_null_create();
  }
  xpc_dictionary_set_value(v121, (const char *)*MEMORY[0x263F26368], v124);
  xpc_object_t v125 = xpc_null_create();
  xpc_release(v124);
  xpc_release(v125);
  if ((v143.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    long long v126 = &v143;
  }
  else {
    long long v126 = (std::string *)v143.__r_.__value_.__r.__words[0];
  }
  xpc_object_t v127 = xpc_string_create((const char *)v126);
  if (!v127) {
    xpc_object_t v127 = xpc_null_create();
  }
  xpc_dictionary_set_value(v121, (const char *)*MEMORY[0x263F262A8], v127);
  xpc_object_t v128 = xpc_null_create();
  xpc_release(v127);
  xpc_release(v128);
  uint64_t v129 = v144;
  long long v130 = (const void *)*MEMORY[0x263F26118];
  size_t v131 = strlen((const char *)*MEMORY[0x263F26118]);
  if (v131 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v132 = v131;
  if (v131 >= 0x17)
  {
    uint64_t v134 = (v131 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v131 | 7) != 0x17) {
      uint64_t v134 = v131 | 7;
    }
    uint64_t v135 = v134 + 1;
    uint64_t v133 = operator new(v134 + 1);
    *(void *)&uint8_t buf[8] = v132;
    *(void *)&uint8_t buf[16] = v135 | 0x8000000000000000;
    *(void *)std::string buf = v133;
  }
  else
  {
    uint8_t buf[23] = v131;
    uint64_t v133 = buf;
    if (!v131) {
      goto LABEL_248;
    }
  }
  memmove(v133, v130, v132);
LABEL_248:
  v133[v132] = 0;
  xpc_object_t object = v121;
  if (v121) {
    xpc_retain(v121);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  size_t v137 = 0;
  Service::runCommand(v129, (uint64_t)buf, &object, &v137);
  xpc_release(object);
  xpc_object_t object = 0;
  if ((buf[23] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  xpc_release(v121);
LABEL_254:
  if (SHIBYTE(v143.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v143.__r_.__value_.__l.__data_);
  }
  uint64_t v11 = v145;
  if (v145) {
    goto LABEL_257;
  }
}

void ___ZN11RadioModule23monitorBatteryInfo_syncEv_block_invoke(void *a1, uint64_t *a2)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  uint64_t v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    uint64_t v5 = a1[4];
    uint64_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      uint64_t v7 = v6;
      if (a1[5])
      {
        uint64_t v8 = *a2;
        if (*a2) {
          uint64_t v9 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
        }
        else {
          uint64_t v9 = 0;
        }
        uint64_t v10 = *(NSObject **)(v5 + 88);
        if (v9)
        {
          if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
          {
            int v11 = 138412290;
            uint64_t v12 = v8;
            _os_log_error_impl(&dword_26368A000, v10, OS_LOG_TYPE_ERROR, "Failed to send battery info update\n:%@", (uint8_t *)&v11, 0xCu);
          }
        }
        else if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(v11) = 0;
          _os_log_impl(&dword_26368A000, v10, OS_LOG_TYPE_DEFAULT, "#I Success sending battery info update", (uint8_t *)&v11, 2u);
        }
      }
      if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void ___ZN11RadioModule23monitorBatteryInfo_syncEv_block_invoke_192(void *a1, unsigned int a2)
{
  uint64_t v41 = *MEMORY[0x263EF8340];
  uint64_t v3 = (std::__shared_weak_count *)a1[6];
  if (!v3) {
    return;
  }
  uint64_t v5 = a1[4];
  uint64_t v6 = std::__shared_weak_count::lock(v3);
  CFTypeID v35 = v6;
  if (!v6) {
    return;
  }
  uint64_t v7 = v6;
  if (!a1[5])
  {
LABEL_51:
    if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    return;
  }
  unsigned int v8 = *(unsigned __int8 *)(v5 + 320);
  if (*(unsigned char *)(v5 + 320)
    && (v8 > 0x27 || a2 <= 0x29u)
    && (v8 < 0x28 || a2 >= 0x26u))
  {
    BOOL v9 = ((a2 >> 8) & 1) != *(unsigned __int8 *)(v5 + 321);
    uint64_t v10 = *(NSObject **)(v5 + 88);
    if (!os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_19;
    }
  }
  else
  {
    BOOL v9 = 1;
    uint64_t v10 = *(NSObject **)(v5 + 88);
    if (!os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_19;
    }
  }
  int v11 = "TRUE";
  if ((a2 & 0x100) != 0) {
    uint64_t v12 = "TRUE";
  }
  else {
    uint64_t v12 = "FALSE";
  }
  *(_DWORD *)std::string buf = 67109890;
  *(_DWORD *)&uint8_t buf[4] = a2;
  if ((*(void *)&a2 & 0x10000) != 0) {
    uint64_t v13 = "TRUE";
  }
  else {
    uint64_t v13 = "FALSE";
  }
  *(_WORD *)&uint8_t buf[8] = 2080;
  *(void *)&buf[10] = v12;
  __int16 v37 = 2080;
  if (!v9) {
    int v11 = "FALSE";
  }
  uint64_t v38 = v13;
  __int16 v39 = 2080;
  uint64_t v40 = v11;
  _os_log_impl(&dword_26368A000, v10, OS_LOG_TYPE_DEFAULT, "#I Battery Info Update:\n   chargeLevel:        %u\n   charging:           %s\n   fully charged:      %s\n   reportToBaseband:   %s", buf, 0x26u);
LABEL_19:
  if (!v9) {
    goto LABEL_51;
  }
  *(_WORD *)(v5 + 320) = a2;
  *(unsigned char *)(v5 + 322) = BYTE2(a2);
  unint64_t v32 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v33 = (std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL;
  unint64_t v14 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  uint64_t v15 = off_26A99F170;
  if (!off_26A99F170)
  {
    CommandDriverFactory::create_default_global((uint64_t *)buf, v14);
    long long v16 = *(_OWORD *)buf;
    *(void *)std::string buf = 0;
    *(void *)&uint8_t buf[8] = 0;
    int v17 = (std::__shared_weak_count *)*(&off_26A99F170 + 1);
    off_26A99F170 = v16;
    if (v17 && !atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
    uint64_t v18 = *(std::__shared_weak_count **)&buf[8];
    if (*(void *)&buf[8]
      && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
    uint64_t v15 = off_26A99F170;
  }
  CFMutableDictionaryRef v19 = (std::__shared_weak_count *)*(&off_26A99F170 + 1);
  uint64_t v28 = v15;
  uint64_t v29 = *(&off_26A99F170 + 1);
  if (*(&off_26A99F170 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_26A99F170 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(unint64_t *__return_ptr, uint64_t))(*(void *)v15 + 16))(&v30, v15);
  unint64_t v32 = 0;
  uint64_t v33 = 0;
  if (v31)
  {
    uint64_t v33 = std::__shared_weak_count::lock(v31);
    if (v33) {
      unint64_t v32 = v30;
    }
    if (v31) {
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
  unint64_t v20 = v32;
  if (v32)
  {
    uint64_t v21 = *(unsigned __int8 *)(v5 + 320);
    int v22 = *(unsigned __int8 *)(v5 + 321);
    xpc_object_t v23 = (void *)a1[7];
    if (v23) {
      xpc_object_t v23 = _Block_copy(v23);
    }
    CFErrorRef v24 = a1[8];
    aBlocunint64_t k = v23;
    dispatch_object_t object = v24;
    if (v24) {
      dispatch_retain(v24);
    }
    (*(void (**)(unint64_t, uint64_t, BOOL, void **))(*(void *)v20 + 176))(v20, v21, v22 != 0, &aBlock);
    if (object) {
      dispatch_release(object);
    }
    if (aBlock) {
      _Block_release(aBlock);
    }
  }
  uint64_t v25 = v33;
  if (v33 && !atomic_fetch_add(&v33->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
    std::__shared_weak_count::__release_weak(v25);
  }
  uint64_t v7 = v35;
  if (v35) {
    goto LABEL_51;
  }
}

void sub_2636EA690(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void __copy_helper_block_e8_40c36_ZTSNSt3__18weak_ptrI11RadioModuleEE56c79_ZTSN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE(void *a1, void *a2)
{
  uint64_t v4 = a2[6];
  a1[5] = a2[5];
  a1[6] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 16), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = (void *)a2[7];
  if (v5) {
    uint64_t v5 = _Block_copy(v5);
  }
  uint64_t v6 = a2[8];
  a1[7] = v5;
  a1[8] = v6;
  if (v6)
  {
    dispatch_retain(v6);
  }
}

void __destroy_helper_block_e8_40c36_ZTSNSt3__18weak_ptrI11RadioModuleEE56c79_ZTSN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE(void *a1)
{
  uint64_t v2 = a1[8];
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = (const void *)a1[7];
  if (v3) {
    _Block_release(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    std::__shared_weak_count::__release_weak(v4);
  }
}

uint64_t dispatch::callback<void({block_pointer})(ctu::iokit::TelephonyIOKitBatteryInfo)>::~callback(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 8);
  if (v2) {
    dispatch_release(v2);
  }
  if (*(void *)a1) {
    _Block_release(*(const void **)a1);
  }
  return a1;
}

void ___ZN11RadioModule21setOperatingMode_syncEjN5radio13OperatingModeEbN8dispatch5blockIU13block_pointerFvbEEE_block_invoke(void *a1, uint64_t *a2)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  uint64_t v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    uint64_t v5 = a1[4];
    uint64_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      uint64_t v7 = v6;
      if (a1[5])
      {
        uint64_t v8 = *a2;
        if (*a2) {
          BOOL v9 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
        }
        else {
          BOOL v9 = 0;
        }
        if (v9)
        {
          uint64_t v10 = *(NSObject **)(v5 + 88);
          if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)std::string buf = 138412290;
            uint64_t v12 = v8;
            _os_log_error_impl(&dword_26368A000, v10, OS_LOG_TYPE_ERROR, "%@", buf, 0xCu);
          }
        }
        (*(void (**)(void))(a1[7] + 16))();
      }
      if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_2636EA984(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *__copy_helper_block_e8_40c36_ZTSNSt3__18weak_ptrI11RadioModuleEE56c43_ZTSN8dispatch5blockIU13block_pointerFvbEEE(void *a1, void *a2)
{
  uint64_t v3 = a2[6];
  a1[5] = a2[5];
  a1[6] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  xpc_object_t result = (void *)a2[7];
  if (result) {
    xpc_object_t result = _Block_copy(result);
  }
  a1[7] = result;
  return result;
}

void __destroy_helper_block_e8_40c36_ZTSNSt3__18weak_ptrI11RadioModuleEE56c43_ZTSN8dispatch5blockIU13block_pointerFvbEEE(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 56);
  if (v2) {
    _Block_release(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3)
  {
    std::__shared_weak_count::__release_weak(v3);
  }
}

void ___ZN11RadioModule34queryFactoryCalibrationStatus_syncEv_block_invoke(void *a1, uint64_t *a2, const __CFDictionary **a3)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  uint64_t v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    uint64_t v7 = a1[4];
    uint64_t v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      BOOL v9 = v8;
      if (a1[5])
      {
        uint64_t v10 = *a2;
        if (v10) {
          int v11 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
        }
        else {
          int v11 = 0;
        }
        if (v11)
        {
          uint64_t v12 = *(NSObject **)(v7 + 88);
          if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)std::string buf = 138412290;
            *(void *)&uint8_t buf[4] = v10;
            _os_log_error_impl(&dword_26368A000, v12, OS_LOG_TYPE_ERROR, "%@", buf, 0xCu);
          }
        }
        else
        {
          CFDictionaryRef v13 = *a3;
          if (*a3) {
            unint64_t v14 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
          }
          else {
            unint64_t v14 = 0;
          }
          if (v14)
          {
            memset(buf, 170, 16);
            ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)buf, v13);
            *(unsigned char *)(v7 + 192) = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)buf, (const __CFString *)*MEMORY[0x263F8B908]);
            MEMORY[0x263E68CD0](buf);
          }
        }
      }
      if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
}

void ___ZN11RadioModule29queryRFCalibrationStatus_syncEv_block_invoke(void *a1, uint64_t *a2, const void **a3)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  uint64_t v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    uint64_t v7 = a1[4];
    uint64_t v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      BOOL v9 = v8;
      if (a1[5])
      {
        uint64_t v10 = *a2;
        if (v10) {
          int v11 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
        }
        else {
          int v11 = 0;
        }
        if (v11)
        {
          uint64_t v12 = *(NSObject **)(v7 + 88);
          if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)std::string buf = 138412290;
            uint64_t v17 = v10;
            _os_log_error_impl(&dword_26368A000, v12, OS_LOG_TYPE_ERROR, "%@", buf, 0xCu);
          }
        }
        else
        {
          CFDictionaryRef v13 = *a3;
          if (*a3) {
            unint64_t v14 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
          }
          else {
            unint64_t v14 = 0;
          }
          if (v14)
          {
            CFTypeRef cf = *a3;
            if (v13) {
              CFRetain(v13);
            }
            radio::RFCalibration_t::fill();
            if (cf) {
              CFRelease(cf);
            }
          }
        }
      }
      if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
}

void sub_2636EAD88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, __int16 a12, char a13, char a14)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN11RadioModule25queryFieldTestConfig_syncEv_block_invoke(void *a1, uint64_t *a2, ctu **a3)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  uint64_t v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    uint64_t v7 = a1[4];
    uint64_t v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      uint64_t v10 = v8;
      if (a1[5])
      {
        uint64_t v11 = *a2;
        if (v11) {
          uint64_t v12 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
        }
        else {
          uint64_t v12 = 0;
        }
        if (v12)
        {
          CFDictionaryRef v13 = *(NSObject **)(v7 + 88);
          if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)dispatch_object_t object = 138412290;
            *(void *)&xpc_object_t object[4] = v11;
            _os_log_error_impl(&dword_26368A000, v13, OS_LOG_TYPE_ERROR, "%@", object, 0xCu);
          }
        }
        else
        {
          if (*a3) {
            unint64_t v14 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
          }
          else {
            unint64_t v14 = 0;
          }
          if (v14)
          {
            ctu::cf_to_xpc((uint64_t *)object, *a3, v9);
            xpc_object_t v15 = *(xpc_object_t *)object;
            if (*(void *)object && MEMORY[0x263E6A240](*(void *)object) == MEMORY[0x263EF8708]) {
              xpc_retain(v15);
            }
            else {
              xpc_object_t v15 = xpc_null_create();
            }
            xpc_object_t v16 = xpc_null_create();
            uint64_t v17 = *(void **)(v7 + 248);
            *(void *)(v7 + 248) = v15;
            xpc_release(v17);
            xpc_release(v16);
            xpc_release(*(xpc_object_t *)object);
            uint64_t v18 = *(NSObject **)(v7 + 88);
            if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
            {
              xpc::object::to_string((uint64_t *)object, (xpc::object *)(v7 + 248));
              CFMutableDictionaryRef v19 = v21 >= 0 ? object : *(unsigned char **)object;
              *(_DWORD *)std::string buf = 136315138;
              xpc_object_t v23 = v19;
              _os_log_impl(&dword_26368A000, v18, OS_LOG_TYPE_DEFAULT, "#I Baseband field test config:\n%s", buf, 0xCu);
              if (v21 < 0) {
                operator delete(*(void **)object);
              }
            }
          }
        }
      }
      if (!atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
  }
}

void sub_2636EAFF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void RadioModule::handleResetSPMI_sync(RadioModule *this, int a2)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t v4 = *((void *)this + 11);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = 67109120;
    LODWORD(v9) = a2;
    _os_log_impl(&dword_26368A000, v4, OS_LOG_TYPE_DEFAULT, "#I Received request to reset SPMI with data (0x%x)", (uint8_t *)&v8, 8u);
  }
  int v5 = TelephonyBasebandResetSPMI();
  uint64_t v6 = *((void *)this + 11);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = " not ";
    if (v5) {
      uint64_t v7 = " ";
    }
    int v8 = 136315138;
    BOOL v9 = v7;
    _os_log_impl(&dword_26368A000, v6, OS_LOG_TYPE_DEFAULT, "#I Request to reset SPMI was%ssuccessful", (uint8_t *)&v8, 0xCu);
  }
}

uint64_t ctu::Loggable<RadioModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig(uint64_t a1)
{
  return MEMORY[0x270F97428](a1 + 8);
}

size_t ctu::Loggable<RadioModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = (const char *)(*(uint64_t (**)(void))(*(void *)(a1 - 48) + 16))();
  size_t result = strlen(v3);
  if (result >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v5 = result;
  if (result >= 0x17)
  {
    uint64_t v6 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17) {
      uint64_t v6 = result | 7;
    }
    uint64_t v7 = v6 + 1;
    int v8 = operator new(v6 + 1);
    a2[1] = v5;
    a2[2] = v7 | 0x8000000000000000;
    *a2 = v8;
    a2 = v8;
  }
  else
  {
    *((unsigned char *)a2 + 23) = result;
    if (!result)
    {
      *(unsigned char *)a2 = 0;
      return result;
    }
  }
  size_t result = (size_t)memmove(a2, v3, v5);
  *((unsigned char *)a2 + v5) = 0;
  return result;
}

uint64_t ctu::Loggable<RadioModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return MEMORY[0x270F978E0](a1 + 8);
}

uint64_t ctu::PthreadMutexGuardPolicy<DeviceHistoryDB>::~PthreadMutexGuardPolicy(uint64_t a1)
{
  pthread_mutex_lock((pthread_mutex_t *)a1);
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 72);
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 72);
  if (!v3 || atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void *ctu::Loggable<RadioModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_270EA8118;
  MEMORY[0x263E68AF0](a1 + 1);
  return a1;
}

void ctu::Loggable<RadioModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_270EA8118;
  MEMORY[0x263E68AF0](a1 + 1);

  operator delete(a1);
}

void std::__shared_ptr_pointer<RadioModule *,std::shared_ptr<RadioModule> ctu::SharedSynchronizable<RadioModule>::make_shared_ptr<RadioModule>(RadioModule*)::{lambda(RadioModule *)#1},std::allocator<RadioModule>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<RadioModule *,std::shared_ptr<RadioModule> ctu::SharedSynchronizable<RadioModule>::make_shared_ptr<RadioModule>(RadioModule*)::{lambda(RadioModule *)#1},std::allocator<RadioModule>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<RadioModule *,std::shared_ptr<RadioModule> ctu::SharedSynchronizable<RadioModule>::make_shared_ptr<RadioModule>(RadioModule*)::{lambda(RadioModule *)#1},std::allocator<RadioModule>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableI11RadioModuleE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_") {
    return a1 + 24;
  }
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableI11RadioModuleE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableI11RadioModuleE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_"))return 0; {
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableI11RadioModuleE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  }
  return 0;
}

uint64_t std::shared_ptr<RadioModule> ctu::SharedSynchronizable<RadioModule>::make_shared_ptr<RadioModule>(RadioModule*)::{lambda(RadioModule*)#1}::operator() const(RadioModule*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void ctu::SharedLoggable<RadioModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(void *a1)
{
  *a1 = &unk_270EA8118;
  MEMORY[0x263E68AF0](a1 + 1);
  uint64_t v2 = a1[12];
  if (v2) {
    dispatch_release(v2);
  }
  unint64_t v3 = a1[11];
  if (v3) {
    dispatch_release(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[10];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }

  operator delete(a1);
}

void ctu::SharedSynchronizable<RadioModule>::execute_wrapped(uint64_t *a1, uint64_t a2)
{
  unint64_t v3 = (std::__shared_weak_count *)a1[1];
  if (!v3 || (uint64_t v5 = *a1, (v6 = std::__shared_weak_count::lock(v3)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v7 = v6;
  int v8 = a1[2];
  block[0] = MEMORY[0x263EF8330];
  block[1] = 1174405120;
  block[2] = ___ZNK3ctu20SharedSynchronizableI11RadioModuleE15execute_wrappedEU13block_pointerFvvE_block_invoke;
  block[3] = &unk_270EA81E0;
  void block[5] = v5;
  uint64_t v12 = v7;
  p_shared_owners = &v7->__shared_owners_;
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  block[4] = a2;
  dispatch_async(v8, block);
  uint64_t v10 = v12;
  if (!v12 || atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      return;
    }
LABEL_8:
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    return;
  }
  ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
  std::__shared_weak_count::__release_weak(v10);
  if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_8;
  }
}

uint64_t ___ZNK3ctu20SharedSynchronizableI11RadioModuleE15execute_wrappedEU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t __copy_helper_block_e8_40c40_ZTSNSt3__110shared_ptrIK11RadioModuleEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c40_ZTSNSt3__110shared_ptrIK11RadioModuleEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI11RadioModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb0_E3__0EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_(void *a1)
{
  uint64_t v44 = *MEMORY[0x263EF8340];
  uint64_t v2 = (void *)*a1;
  unint64_t v3 = *(void **)*a1;
  if ((*(unsigned int (**)(void *))(*v3 + 88))(v3))
  {
    memset(__p, 170, 24);
    uint64_t v4 = (const void *)*MEMORY[0x263F267F0];
    size_t v5 = strlen((const char *)*MEMORY[0x263F267F0]);
    if (v5 >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    std::string::size_type v6 = v5;
    if (v5 >= 0x17)
    {
      uint64_t v16 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v5 | 7) != 0x17) {
        uint64_t v16 = v5 | 7;
      }
      uint64_t v17 = v16 + 1;
      p_dst = (std::string *)operator new(v16 + 1);
      __dst.__r_.__value_.__l.__size_ = v6;
      __dst.__r_.__value_.__r.__words[2] = v17 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v5;
      p_dst = &__dst;
      if (!v5)
      {
LABEL_28:
        p_dst->__r_.__value_.__s.__data_[v6] = 0;
        uint64_t v18 = (char *)operator new(0x28uLL);
        strcpy(v18, " rejected; ABM is shutting down ");
        CFMutableDictionaryRef v19 = std::string::append(&__dst, v18, 0x20uLL);
        long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
        __p[2] = (void *)v19->__r_.__value_.__r.__words[2];
        *(_OWORD *)tm __p = v20;
        v19->__r_.__value_.__l.__size_ = 0;
        v19->__r_.__value_.__r.__words[2] = 0;
        v19->__r_.__value_.__r.__words[0] = 0;
        operator delete(v18);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__dst.__r_.__value_.__l.__data_);
          char v21 = v3[11];
          if (!os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
          {
LABEL_30:
            int v22 = v2 + 1;
            if (!v2[1])
            {
LABEL_74:
              if (SHIBYTE(__p[2]) < 0) {
                operator delete(__p[0]);
              }
              goto LABEL_76;
            }
LABEL_56:
            __dst.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
            uint64_t v28 = (void *)HIBYTE(__p[2]);
            if (SHIBYTE(__p[2]) < 0) {
              uint64_t v28 = __p[1];
            }
            if (v28)
            {
              xpc_object_t v29 = xpc_dictionary_create(0, 0, 0);
              if (v29 || (xpc_object_t v29 = xpc_null_create()) != 0)
              {
                if (MEMORY[0x263E6A240](v29) == MEMORY[0x263EF8708])
                {
                  xpc_retain(v29);
                  xpc_object_t v30 = v29;
                }
                else
                {
                  xpc_object_t v30 = xpc_null_create();
                }
              }
              else
              {
                xpc_object_t v30 = xpc_null_create();
                xpc_object_t v29 = 0;
              }
              xpc_release(v29);
              xpc_object_t v31 = xpc_null_create();
              unint64_t v32 = (void *)__dst.__r_.__value_.__r.__words[0];
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v30;
              xpc_release(v32);
              xpc_release(v31);
              if (SHIBYTE(__p[2]) >= 0) {
                uint64_t v33 = __p;
              }
              else {
                uint64_t v33 = (void **)__p[0];
              }
              xpc_object_t v34 = xpc_string_create((const char *)v33);
              if (!v34) {
                xpc_object_t v34 = xpc_null_create();
              }
              xpc_dictionary_set_value(v30, (const char *)*MEMORY[0x263F25EB8], v34);
              xpc_object_t v35 = xpc_null_create();
              xpc_release(v34);
              xpc_release(v35);
            }
            unsigned int v42 = -534716415;
            dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(v22, &v42, (void **)&__dst.__r_.__value_.__l.__data_);
            xpc_release(__dst.__r_.__value_.__l.__data_);
            goto LABEL_74;
          }
        }
        else
        {
          char v21 = v3[11];
          if (!os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_30;
          }
        }
        size_t v27 = __p;
        if (SHIBYTE(__p[2]) < 0) {
          size_t v27 = (void **)__p[0];
        }
        LODWORD(__dst.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = (std::string::size_type)v27;
        _os_log_impl(&dword_26368A000, v21, OS_LOG_TYPE_DEFAULT, "#I %s", (uint8_t *)&__dst, 0xCu);
        int v22 = v2 + 1;
        if (!v2[1]) {
          goto LABEL_74;
        }
        goto LABEL_56;
      }
    }
    memmove(p_dst, v4, v6);
    goto LABEL_28;
  }
  int v8 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  uint64_t v9 = off_26A99F170;
  if (!off_26A99F170)
  {
    CommandDriverFactory::create_default_global((uint64_t *)__p, v8);
    long long v10 = *(_OWORD *)__p;
    __p[0] = 0;
    __p[1] = 0;
    uint64_t v11 = (std::__shared_weak_count *)*(&off_26A99F170 + 1);
    off_26A99F170 = v10;
    if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    uint64_t v12 = (std::__shared_weak_count *)__p[1];
    if (__p[1] && !atomic_fetch_add((atomic_ullong *volatile)__p[1] + 1, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
    uint64_t v9 = off_26A99F170;
  }
  CFDictionaryRef v13 = (std::__shared_weak_count *)*(&off_26A99F170 + 1);
  if (*(&off_26A99F170 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_26A99F170 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)v9 + 16))(&__dst, v9);
  if (__dst.__r_.__value_.__l.__size_)
  {
    unint64_t v14 = std::__shared_weak_count::lock((std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_);
    if (v14) {
      std::string::size_type v15 = __dst.__r_.__value_.__r.__words[0];
    }
    else {
      std::string::size_type v15 = 0;
    }
    if (__dst.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_);
    }
    if (!v13) {
      goto LABEL_34;
    }
  }
  else
  {
    unint64_t v14 = 0;
    std::string::size_type v15 = 0;
    if (!v13) {
      goto LABEL_34;
    }
  }
  if (!atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
    if (v15) {
      goto LABEL_35;
    }
    goto LABEL_49;
  }
LABEL_34:
  if (v15)
  {
LABEL_35:
    __p[0] = (void *)MEMORY[0x263EF8330];
    __p[1] = (void *)1174405120;
    __p[2] = ___ZZZZN11RadioModule10initializeEN8dispatch13group_sessionEEUb_EUb0_ENK3__0clEv_block_invoke;
    __p[3] = &__block_descriptor_tmp_240;
    __p[4] = *((void **)v2 + 2);
    xpc_object_t v23 = (std::__shared_weak_count *)v2[3];
    uint64_t v40 = v23;
    if (v23) {
      atomic_fetch_add_explicit(&v23->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v24 = (void *)v2[1];
    if (v24) {
      uint64_t v24 = _Block_copy(v24);
    }
    aBlocunint64_t k = v24;
    uint64_t v25 = _Block_copy(__p);
    size_t v26 = v3[17];
    if (v26) {
      dispatch_retain(v26);
    }
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v25;
    __dst.__r_.__value_.__l.__size_ = (std::string::size_type)v26;
    (*(void (**)(std::string::size_type, std::string *))(*(void *)v15 + 224))(v15, &__dst);
    if (__dst.__r_.__value_.__l.__size_) {
      dispatch_release((dispatch_object_t)__dst.__r_.__value_.__l.__size_);
    }
    if (__dst.__r_.__value_.__r.__words[0]) {
      _Block_release(__dst.__r_.__value_.__l.__data_);
    }
    if (aBlock) {
      _Block_release(aBlock);
    }
    if (v40) {
      std::__shared_weak_count::__release_weak(v40);
    }
  }
LABEL_49:
  if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
LABEL_76:
  CFStringRef v36 = (std::__shared_weak_count *)v2[3];
  if (v36) {
    std::__shared_weak_count::__release_weak(v36);
  }
  __int16 v37 = (const void *)v2[1];
  if (v37) {
    _Block_release(v37);
  }
  operator delete(v2);
  uint64_t v38 = (std::__shared_weak_count *)a1[2];
  if (v38 && !atomic_fetch_add(&v38->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
    std::__shared_weak_count::__release_weak(v38);
  }
  operator delete(a1);
}

void sub_2636EBE18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17, void *aBlock, uint64_t a19, xpc_object_t object,dispatch_object_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void ___ZZZZN11RadioModule10initializeEN8dispatch13group_sessionEEUb_EUb0_ENK3__0clEv_block_invoke(void *a1, void *a2, xpc_object_t *a3)
{
  uint64_t v4 = (std::__shared_weak_count *)a1[5];
  if (!v4) {
    return;
  }
  uint64_t v7 = std::__shared_weak_count::lock(v4);
  uint64_t v24 = v7;
  if (!v7) {
    return;
  }
  if (!a1[4])
  {
    long long v10 = v7;
LABEL_29:
    if (!atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
    return;
  }
  xpc_object_t v8 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v9 = v8;
  if (v8)
  {
    xpc_object_t xdict = v8;
  }
  else
  {
    xpc_object_t v9 = xpc_null_create();
    xpc_object_t xdict = v9;
    if (!v9)
    {
      xpc_object_t v11 = xpc_null_create();
      xpc_object_t v9 = 0;
      goto LABEL_12;
    }
  }
  if (MEMORY[0x263E6A240](v9) == MEMORY[0x263EF8708])
  {
    xpc_retain(v9);
    goto LABEL_13;
  }
  xpc_object_t v11 = xpc_null_create();
LABEL_12:
  xpc_object_t xdict = v11;
LABEL_13:
  xpc_release(v9);
  uint64_t v12 = MEMORY[0x263E6A240](*a2);
  uint64_t v13 = MEMORY[0x263EF8758];
  if (v12 == MEMORY[0x263EF8758])
  {
    xpc_object_t v17 = *a3;
    if (v17) {
      xpc_retain(v17);
    }
    else {
      xpc_object_t v17 = xpc_null_create();
    }
    xpc_dictionary_set_value(xdict, (const char *)*MEMORY[0x263F268E0], v17);
    xpc_object_t v18 = xpc_null_create();
    xpc_release(v17);
    xpc_release(v18);
  }
  else
  {
    memset(__p, 0, sizeof(__p));
    xpc::dyn_cast_or_default();
    if (v21 >= 0) {
      unint64_t v14 = (const char *)&v20;
    }
    else {
      unint64_t v14 = (const char *)v20;
    }
    xpc_object_t v15 = xpc_string_create(v14);
    if (!v15) {
      xpc_object_t v15 = xpc_null_create();
    }
    xpc_dictionary_set_value(xdict, (const char *)*MEMORY[0x263F25FD0], v15);
    xpc_object_t v16 = xpc_null_create();
    xpc_release(v15);
    xpc_release(v16);
    if (v21 < 0) {
      operator delete(v20);
    }
  }
  if (MEMORY[0x263E6A240](*a2) == v13) {
    int v19 = 0;
  }
  else {
    int v19 = -534716416;
  }
  LODWORD(__p[0]) = v19;
  dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(a1 + 6, (unsigned int *)__p, &xdict);
  xpc_release(xdict);
  long long v10 = v24;
  if (v24) {
    goto LABEL_29;
  }
}

void sub_2636EC2CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, xpc_object_t object, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  xpc_release(object);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)&a14);
  _Unwind_Resume(a1);
}

void *__copy_helper_block_e8_32c36_ZTSNSt3__18weak_ptrI11RadioModuleEE48c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE(void *a1, void *a2)
{
  uint64_t v3 = a2[5];
  a1[4] = a2[4];
  a1[5] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  size_t result = (void *)a2[6];
  if (result) {
    size_t result = _Block_copy(result);
  }
  a1[6] = result;
  return result;
}

void __destroy_helper_block_e8_32c36_ZTSNSt3__18weak_ptrI11RadioModuleEE48c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 48);
  if (v2) {
    _Block_release(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 40);
  if (v3)
  {
    std::__shared_weak_count::__release_weak(v3);
  }
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI11RadioModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb1_E3__1EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_(void *a1)
{
  uint64_t v44 = *MEMORY[0x263EF8340];
  uint64_t v2 = (void *)*a1;
  uint64_t v3 = *(void **)*a1;
  if ((*(unsigned int (**)(void *))(*v3 + 88))(v3))
  {
    memset(__p, 170, 24);
    uint64_t v4 = (const void *)*MEMORY[0x263F260A8];
    size_t v5 = strlen((const char *)*MEMORY[0x263F260A8]);
    if (v5 >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    std::string::size_type v6 = v5;
    if (v5 >= 0x17)
    {
      uint64_t v16 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v5 | 7) != 0x17) {
        uint64_t v16 = v5 | 7;
      }
      uint64_t v17 = v16 + 1;
      p_dst = (std::string *)operator new(v16 + 1);
      __dst.__r_.__value_.__l.__size_ = v6;
      __dst.__r_.__value_.__r.__words[2] = v17 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v5;
      p_dst = &__dst;
      if (!v5)
      {
LABEL_28:
        p_dst->__r_.__value_.__s.__data_[v6] = 0;
        xpc_object_t v18 = (char *)operator new(0x28uLL);
        strcpy(v18, " rejected; ABM is shutting down ");
        int v19 = std::string::append(&__dst, v18, 0x20uLL);
        long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
        __p[2] = (void *)v19->__r_.__value_.__r.__words[2];
        *(_OWORD *)tm __p = v20;
        v19->__r_.__value_.__l.__size_ = 0;
        v19->__r_.__value_.__r.__words[2] = 0;
        v19->__r_.__value_.__r.__words[0] = 0;
        operator delete(v18);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__dst.__r_.__value_.__l.__data_);
          char v21 = v3[11];
          if (!os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
          {
LABEL_30:
            int v22 = v2 + 1;
            if (!v2[1])
            {
LABEL_74:
              if (SHIBYTE(__p[2]) < 0) {
                operator delete(__p[0]);
              }
              goto LABEL_76;
            }
LABEL_56:
            __dst.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
            uint64_t v28 = (void *)HIBYTE(__p[2]);
            if (SHIBYTE(__p[2]) < 0) {
              uint64_t v28 = __p[1];
            }
            if (v28)
            {
              xpc_object_t v29 = xpc_dictionary_create(0, 0, 0);
              if (v29 || (xpc_object_t v29 = xpc_null_create()) != 0)
              {
                if (MEMORY[0x263E6A240](v29) == MEMORY[0x263EF8708])
                {
                  xpc_retain(v29);
                  xpc_object_t v30 = v29;
                }
                else
                {
                  xpc_object_t v30 = xpc_null_create();
                }
              }
              else
              {
                xpc_object_t v30 = xpc_null_create();
                xpc_object_t v29 = 0;
              }
              xpc_release(v29);
              xpc_object_t v31 = xpc_null_create();
              unint64_t v32 = (void *)__dst.__r_.__value_.__r.__words[0];
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v30;
              xpc_release(v32);
              xpc_release(v31);
              if (SHIBYTE(__p[2]) >= 0) {
                uint64_t v33 = __p;
              }
              else {
                uint64_t v33 = (void **)__p[0];
              }
              xpc_object_t v34 = xpc_string_create((const char *)v33);
              if (!v34) {
                xpc_object_t v34 = xpc_null_create();
              }
              xpc_dictionary_set_value(v30, (const char *)*MEMORY[0x263F25EB8], v34);
              xpc_object_t v35 = xpc_null_create();
              xpc_release(v34);
              xpc_release(v35);
            }
            unsigned int v42 = -534716415;
            dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(v22, &v42, (void **)&__dst.__r_.__value_.__l.__data_);
            xpc_release(__dst.__r_.__value_.__l.__data_);
            goto LABEL_74;
          }
        }
        else
        {
          char v21 = v3[11];
          if (!os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_30;
          }
        }
        size_t v27 = __p;
        if (SHIBYTE(__p[2]) < 0) {
          size_t v27 = (void **)__p[0];
        }
        LODWORD(__dst.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = (std::string::size_type)v27;
        _os_log_impl(&dword_26368A000, v21, OS_LOG_TYPE_DEFAULT, "#I %s", (uint8_t *)&__dst, 0xCu);
        int v22 = v2 + 1;
        if (!v2[1]) {
          goto LABEL_74;
        }
        goto LABEL_56;
      }
    }
    memmove(p_dst, v4, v6);
    goto LABEL_28;
  }
  xpc_object_t v8 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  uint64_t v9 = off_26A99F170;
  if (!off_26A99F170)
  {
    CommandDriverFactory::create_default_global((uint64_t *)__p, v8);
    long long v10 = *(_OWORD *)__p;
    __p[0] = 0;
    __p[1] = 0;
    xpc_object_t v11 = (std::__shared_weak_count *)*(&off_26A99F170 + 1);
    off_26A99F170 = v10;
    if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    uint64_t v12 = (std::__shared_weak_count *)__p[1];
    if (__p[1] && !atomic_fetch_add((atomic_ullong *volatile)__p[1] + 1, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
    uint64_t v9 = off_26A99F170;
  }
  uint64_t v13 = (std::__shared_weak_count *)*(&off_26A99F170 + 1);
  if (*(&off_26A99F170 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_26A99F170 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)v9 + 16))(&__dst, v9);
  if (__dst.__r_.__value_.__l.__size_)
  {
    unint64_t v14 = std::__shared_weak_count::lock((std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_);
    if (v14) {
      std::string::size_type v15 = __dst.__r_.__value_.__r.__words[0];
    }
    else {
      std::string::size_type v15 = 0;
    }
    if (__dst.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_);
    }
    if (!v13) {
      goto LABEL_34;
    }
  }
  else
  {
    unint64_t v14 = 0;
    std::string::size_type v15 = 0;
    if (!v13) {
      goto LABEL_34;
    }
  }
  if (!atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
    if (v15) {
      goto LABEL_35;
    }
    goto LABEL_49;
  }
LABEL_34:
  if (v15)
  {
LABEL_35:
    __p[0] = (void *)MEMORY[0x263EF8330];
    __p[1] = (void *)1174405120;
    __p[2] = ___ZZZZN11RadioModule10initializeEN8dispatch13group_sessionEEUb_EUb1_ENK3__1clEv_block_invoke;
    __p[3] = &__block_descriptor_tmp_243;
    __p[4] = *((void **)v2 + 2);
    xpc_object_t v23 = (std::__shared_weak_count *)v2[3];
    uint64_t v40 = v23;
    if (v23) {
      atomic_fetch_add_explicit(&v23->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v24 = (void *)v2[1];
    if (v24) {
      uint64_t v24 = _Block_copy(v24);
    }
    aBlocunint64_t k = v24;
    uint64_t v25 = _Block_copy(__p);
    size_t v26 = v3[17];
    if (v26) {
      dispatch_retain(v26);
    }
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v25;
    __dst.__r_.__value_.__l.__size_ = (std::string::size_type)v26;
    (*(void (**)(std::string::size_type, std::string *))(*(void *)v15 + 264))(v15, &__dst);
    if (__dst.__r_.__value_.__l.__size_) {
      dispatch_release((dispatch_object_t)__dst.__r_.__value_.__l.__size_);
    }
    if (__dst.__r_.__value_.__r.__words[0]) {
      _Block_release(__dst.__r_.__value_.__l.__data_);
    }
    if (aBlock) {
      _Block_release(aBlock);
    }
    if (v40) {
      std::__shared_weak_count::__release_weak(v40);
    }
  }
LABEL_49:
  if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
LABEL_76:
  CFStringRef v36 = (std::__shared_weak_count *)v2[3];
  if (v36) {
    std::__shared_weak_count::__release_weak(v36);
  }
  __int16 v37 = (const void *)v2[1];
  if (v37) {
    _Block_release(v37);
  }
  operator delete(v2);
  uint64_t v38 = (std::__shared_weak_count *)a1[2];
  if (v38 && !atomic_fetch_add(&v38->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
    std::__shared_weak_count::__release_weak(v38);
  }
  operator delete(a1);
}

void sub_2636ECA58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17, void *aBlock, uint64_t a19, xpc_object_t object,dispatch_object_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void ___ZZZZN11RadioModule10initializeEN8dispatch13group_sessionEEUb_EUb1_ENK3__1clEv_block_invoke(void *a1, xpc_object_t *a2, xpc_object_t *a3)
{
  uint64_t v4 = (std::__shared_weak_count *)a1[5];
  if (v4)
  {
    uint64_t v7 = std::__shared_weak_count::lock(v4);
    uint64_t v24 = v7;
    if (v7)
    {
      if (!a1[4])
      {
        uint64_t v13 = v7;
LABEL_25:
        if (!atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
        return;
      }
      xpc_object_t v8 = xpc_null_create();
      xpc_object_t object = v8;
      uint64_t v9 = MEMORY[0x263E6A240](*a2);
      uint64_t v10 = MEMORY[0x263EF8758];
      if (v9 == MEMORY[0x263EF8758])
      {
        xpc_object_t v14 = *a3;
        if (v14 && MEMORY[0x263E6A240](v14) == MEMORY[0x263EF8708]) {
          xpc_retain(v14);
        }
        else {
          xpc_object_t v14 = xpc_null_create();
        }
        xpc_object_t v15 = xpc_null_create();
        xpc_object_t object = v14;
        xpc_release(v8);
        xpc_release(v15);
      }
      else
      {
        xpc_object_t v11 = xpc_dictionary_create(0, 0, 0);
        if (v11 || (xpc_object_t v11 = xpc_null_create()) != 0)
        {
          if (MEMORY[0x263E6A240](v11) == MEMORY[0x263EF8708])
          {
            xpc_retain(v11);
            xpc_object_t v12 = v11;
          }
          else
          {
            xpc_object_t v12 = xpc_null_create();
          }
        }
        else
        {
          xpc_object_t v12 = xpc_null_create();
          xpc_object_t v11 = 0;
        }
        xpc_release(v11);
        xpc_object_t v16 = xpc_null_create();
        xpc_object_t v17 = object;
        xpc_object_t object = v12;
        xpc_release(v17);
        xpc_release(v16);
        xpc_object_t v18 = *a2;
        if (*a2) {
          xpc_retain(*a2);
        }
        else {
          xpc_object_t v18 = xpc_null_create();
        }
        xpc_dictionary_set_value(v12, (const char *)*MEMORY[0x263F25FD0], v18);
        xpc_object_t v19 = xpc_null_create();
        xpc_release(v18);
        xpc_release(v19);
      }
      if (MEMORY[0x263E6A240](*a2) == v10) {
        unsigned int v20 = 0;
      }
      else {
        unsigned int v20 = -534716416;
      }
      unsigned int v21 = v20;
      dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(a1 + 6, &v21, &object);
      xpc_release(object);
      uint64_t v13 = v24;
      if (v24) {
        goto LABEL_25;
      }
    }
  }
}

void sub_2636ECF00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  xpc_release(v11);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI11RadioModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb2_E3__2EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_(void *a1)
{
  uint64_t v44 = *MEMORY[0x263EF8340];
  uint64_t v2 = (void *)*a1;
  uint64_t v3 = *(void **)*a1;
  if ((*(unsigned int (**)(void *))(*v3 + 88))(v3))
  {
    memset(__p, 170, 24);
    uint64_t v4 = (const void *)*MEMORY[0x263F264E8];
    size_t v5 = strlen((const char *)*MEMORY[0x263F264E8]);
    if (v5 >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    std::string::size_type v6 = v5;
    if (v5 >= 0x17)
    {
      uint64_t v16 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v5 | 7) != 0x17) {
        uint64_t v16 = v5 | 7;
      }
      uint64_t v17 = v16 + 1;
      p_dst = (std::string *)operator new(v16 + 1);
      __dst.__r_.__value_.__l.__size_ = v6;
      __dst.__r_.__value_.__r.__words[2] = v17 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v5;
      p_dst = &__dst;
      if (!v5)
      {
LABEL_28:
        p_dst->__r_.__value_.__s.__data_[v6] = 0;
        xpc_object_t v18 = (char *)operator new(0x28uLL);
        strcpy(v18, " rejected; ABM is shutting down ");
        xpc_object_t v19 = std::string::append(&__dst, v18, 0x20uLL);
        long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
        __p[2] = (void *)v19->__r_.__value_.__r.__words[2];
        *(_OWORD *)tm __p = v20;
        v19->__r_.__value_.__l.__size_ = 0;
        v19->__r_.__value_.__r.__words[2] = 0;
        v19->__r_.__value_.__r.__words[0] = 0;
        operator delete(v18);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__dst.__r_.__value_.__l.__data_);
          unsigned int v21 = v3[11];
          if (!os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
          {
LABEL_30:
            int v22 = v2 + 1;
            if (!v2[1])
            {
LABEL_74:
              if (SHIBYTE(__p[2]) < 0) {
                operator delete(__p[0]);
              }
              goto LABEL_76;
            }
LABEL_56:
            __dst.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
            uint64_t v28 = (void *)HIBYTE(__p[2]);
            if (SHIBYTE(__p[2]) < 0) {
              uint64_t v28 = __p[1];
            }
            if (v28)
            {
              xpc_object_t v29 = xpc_dictionary_create(0, 0, 0);
              if (v29 || (xpc_object_t v29 = xpc_null_create()) != 0)
              {
                if (MEMORY[0x263E6A240](v29) == MEMORY[0x263EF8708])
                {
                  xpc_retain(v29);
                  xpc_object_t v30 = v29;
                }
                else
                {
                  xpc_object_t v30 = xpc_null_create();
                }
              }
              else
              {
                xpc_object_t v30 = xpc_null_create();
                xpc_object_t v29 = 0;
              }
              xpc_release(v29);
              xpc_object_t v31 = xpc_null_create();
              unint64_t v32 = (void *)__dst.__r_.__value_.__r.__words[0];
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v30;
              xpc_release(v32);
              xpc_release(v31);
              if (SHIBYTE(__p[2]) >= 0) {
                uint64_t v33 = __p;
              }
              else {
                uint64_t v33 = (void **)__p[0];
              }
              xpc_object_t v34 = xpc_string_create((const char *)v33);
              if (!v34) {
                xpc_object_t v34 = xpc_null_create();
              }
              xpc_dictionary_set_value(v30, (const char *)*MEMORY[0x263F25EB8], v34);
              xpc_object_t v35 = xpc_null_create();
              xpc_release(v34);
              xpc_release(v35);
            }
            unsigned int v42 = -534716415;
            dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(v22, &v42, (void **)&__dst.__r_.__value_.__l.__data_);
            xpc_release(__dst.__r_.__value_.__l.__data_);
            goto LABEL_74;
          }
        }
        else
        {
          unsigned int v21 = v3[11];
          if (!os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_30;
          }
        }
        size_t v27 = __p;
        if (SHIBYTE(__p[2]) < 0) {
          size_t v27 = (void **)__p[0];
        }
        LODWORD(__dst.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = (std::string::size_type)v27;
        _os_log_impl(&dword_26368A000, v21, OS_LOG_TYPE_DEFAULT, "#I %s", (uint8_t *)&__dst, 0xCu);
        int v22 = v2 + 1;
        if (!v2[1]) {
          goto LABEL_74;
        }
        goto LABEL_56;
      }
    }
    memmove(p_dst, v4, v6);
    goto LABEL_28;
  }
  xpc_object_t v8 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  uint64_t v9 = off_26A99F170;
  if (!off_26A99F170)
  {
    CommandDriverFactory::create_default_global((uint64_t *)__p, v8);
    long long v10 = *(_OWORD *)__p;
    __p[0] = 0;
    __p[1] = 0;
    xpc_object_t v11 = (std::__shared_weak_count *)*(&off_26A99F170 + 1);
    off_26A99F170 = v10;
    if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    xpc_object_t v12 = (std::__shared_weak_count *)__p[1];
    if (__p[1] && !atomic_fetch_add((atomic_ullong *volatile)__p[1] + 1, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
    uint64_t v9 = off_26A99F170;
  }
  uint64_t v13 = (std::__shared_weak_count *)*(&off_26A99F170 + 1);
  if (*(&off_26A99F170 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_26A99F170 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)v9 + 16))(&__dst, v9);
  if (__dst.__r_.__value_.__l.__size_)
  {
    xpc_object_t v14 = std::__shared_weak_count::lock((std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_);
    if (v14) {
      std::string::size_type v15 = __dst.__r_.__value_.__r.__words[0];
    }
    else {
      std::string::size_type v15 = 0;
    }
    if (__dst.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_);
    }
    if (!v13) {
      goto LABEL_34;
    }
  }
  else
  {
    xpc_object_t v14 = 0;
    std::string::size_type v15 = 0;
    if (!v13) {
      goto LABEL_34;
    }
  }
  if (!atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
    if (v15) {
      goto LABEL_35;
    }
    goto LABEL_49;
  }
LABEL_34:
  if (v15)
  {
LABEL_35:
    __p[0] = (void *)MEMORY[0x263EF8330];
    __p[1] = (void *)1174405120;
    __p[2] = ___ZZZZN11RadioModule10initializeEN8dispatch13group_sessionEEUb_EUb2_ENK3__2clEv_block_invoke;
    __p[3] = &__block_descriptor_tmp_246;
    __p[4] = *((void **)v2 + 2);
    xpc_object_t v23 = (std::__shared_weak_count *)v2[3];
    uint64_t v40 = v23;
    if (v23) {
      atomic_fetch_add_explicit(&v23->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v24 = (void *)v2[1];
    if (v24) {
      uint64_t v24 = _Block_copy(v24);
    }
    aBlocunint64_t k = v24;
    uint64_t v25 = _Block_copy(__p);
    size_t v26 = v3[17];
    if (v26) {
      dispatch_retain(v26);
    }
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v25;
    __dst.__r_.__value_.__l.__size_ = (std::string::size_type)v26;
    (*(void (**)(std::string::size_type, std::string *))(*(void *)v15 + 280))(v15, &__dst);
    if (__dst.__r_.__value_.__l.__size_) {
      dispatch_release((dispatch_object_t)__dst.__r_.__value_.__l.__size_);
    }
    if (__dst.__r_.__value_.__r.__words[0]) {
      _Block_release(__dst.__r_.__value_.__l.__data_);
    }
    if (aBlock) {
      _Block_release(aBlock);
    }
    if (v40) {
      std::__shared_weak_count::__release_weak(v40);
    }
  }
LABEL_49:
  if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
LABEL_76:
  CFStringRef v36 = (std::__shared_weak_count *)v2[3];
  if (v36) {
    std::__shared_weak_count::__release_weak(v36);
  }
  __int16 v37 = (const void *)v2[1];
  if (v37) {
    _Block_release(v37);
  }
  operator delete(v2);
  uint64_t v38 = (std::__shared_weak_count *)a1[2];
  if (v38 && !atomic_fetch_add(&v38->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
    std::__shared_weak_count::__release_weak(v38);
  }
  operator delete(a1);
}

void sub_2636ED5D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17, void *aBlock, uint64_t a19, xpc_object_t object,dispatch_object_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void ___ZZZZN11RadioModule10initializeEN8dispatch13group_sessionEEUb_EUb2_ENK3__2clEv_block_invoke(void *a1, xpc_object_t *a2, xpc_object_t *a3)
{
  uint64_t v4 = (std::__shared_weak_count *)a1[5];
  if (v4)
  {
    uint64_t v7 = std::__shared_weak_count::lock(v4);
    uint64_t v24 = v7;
    if (v7)
    {
      if (!a1[4])
      {
        uint64_t v13 = v7;
LABEL_25:
        if (!atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
        return;
      }
      xpc_object_t v8 = xpc_null_create();
      xpc_object_t object = v8;
      uint64_t v9 = MEMORY[0x263E6A240](*a2);
      uint64_t v10 = MEMORY[0x263EF8758];
      if (v9 == MEMORY[0x263EF8758])
      {
        xpc_object_t v14 = *a3;
        if (v14 && MEMORY[0x263E6A240](v14) == MEMORY[0x263EF8708]) {
          xpc_retain(v14);
        }
        else {
          xpc_object_t v14 = xpc_null_create();
        }
        xpc_object_t v15 = xpc_null_create();
        xpc_object_t object = v14;
        xpc_release(v8);
        xpc_release(v15);
      }
      else
      {
        xpc_object_t v11 = xpc_dictionary_create(0, 0, 0);
        if (v11 || (xpc_object_t v11 = xpc_null_create()) != 0)
        {
          if (MEMORY[0x263E6A240](v11) == MEMORY[0x263EF8708])
          {
            xpc_retain(v11);
            xpc_object_t v12 = v11;
          }
          else
          {
            xpc_object_t v12 = xpc_null_create();
          }
        }
        else
        {
          xpc_object_t v12 = xpc_null_create();
          xpc_object_t v11 = 0;
        }
        xpc_release(v11);
        xpc_object_t v16 = xpc_null_create();
        xpc_object_t v17 = object;
        xpc_object_t object = v12;
        xpc_release(v17);
        xpc_release(v16);
        xpc_object_t v18 = *a2;
        if (*a2) {
          xpc_retain(*a2);
        }
        else {
          xpc_object_t v18 = xpc_null_create();
        }
        xpc_dictionary_set_value(v12, (const char *)*MEMORY[0x263F25FD0], v18);
        xpc_object_t v19 = xpc_null_create();
        xpc_release(v18);
        xpc_release(v19);
      }
      if (MEMORY[0x263E6A240](*a2) == v10) {
        unsigned int v20 = 0;
      }
      else {
        unsigned int v20 = -534716416;
      }
      unsigned int v21 = v20;
      dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(a1 + 6, &v21, &object);
      xpc_release(object);
      uint64_t v13 = v24;
      if (v24) {
        goto LABEL_25;
      }
    }
  }
}

void sub_2636EDA7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  xpc_release(v11);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI11RadioModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb3_E3__3EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_(void *a1)
{
  uint64_t v44 = *MEMORY[0x263EF8340];
  uint64_t v2 = (void *)*a1;
  uint64_t v3 = *(void **)*a1;
  if ((*(unsigned int (**)(void *))(*v3 + 88))(v3))
  {
    memset(__p, 170, 24);
    uint64_t v4 = (const void *)*MEMORY[0x263F265F0];
    size_t v5 = strlen((const char *)*MEMORY[0x263F265F0]);
    if (v5 >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    std::string::size_type v6 = v5;
    if (v5 >= 0x17)
    {
      uint64_t v16 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v5 | 7) != 0x17) {
        uint64_t v16 = v5 | 7;
      }
      uint64_t v17 = v16 + 1;
      p_dst = (std::string *)operator new(v16 + 1);
      __dst.__r_.__value_.__l.__size_ = v6;
      __dst.__r_.__value_.__r.__words[2] = v17 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v5;
      p_dst = &__dst;
      if (!v5)
      {
LABEL_28:
        p_dst->__r_.__value_.__s.__data_[v6] = 0;
        xpc_object_t v18 = (char *)operator new(0x28uLL);
        strcpy(v18, " rejected; ABM is shutting down ");
        xpc_object_t v19 = std::string::append(&__dst, v18, 0x20uLL);
        long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
        __p[2] = (void *)v19->__r_.__value_.__r.__words[2];
        *(_OWORD *)tm __p = v20;
        v19->__r_.__value_.__l.__size_ = 0;
        v19->__r_.__value_.__r.__words[2] = 0;
        v19->__r_.__value_.__r.__words[0] = 0;
        operator delete(v18);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__dst.__r_.__value_.__l.__data_);
          unsigned int v21 = v3[11];
          if (!os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
          {
LABEL_30:
            int v22 = v2 + 1;
            if (!v2[1])
            {
LABEL_74:
              if (SHIBYTE(__p[2]) < 0) {
                operator delete(__p[0]);
              }
              goto LABEL_76;
            }
LABEL_56:
            __dst.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
            uint64_t v28 = (void *)HIBYTE(__p[2]);
            if (SHIBYTE(__p[2]) < 0) {
              uint64_t v28 = __p[1];
            }
            if (v28)
            {
              xpc_object_t v29 = xpc_dictionary_create(0, 0, 0);
              if (v29 || (xpc_object_t v29 = xpc_null_create()) != 0)
              {
                if (MEMORY[0x263E6A240](v29) == MEMORY[0x263EF8708])
                {
                  xpc_retain(v29);
                  xpc_object_t v30 = v29;
                }
                else
                {
                  xpc_object_t v30 = xpc_null_create();
                }
              }
              else
              {
                xpc_object_t v30 = xpc_null_create();
                xpc_object_t v29 = 0;
              }
              xpc_release(v29);
              xpc_object_t v31 = xpc_null_create();
              unint64_t v32 = (void *)__dst.__r_.__value_.__r.__words[0];
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v30;
              xpc_release(v32);
              xpc_release(v31);
              if (SHIBYTE(__p[2]) >= 0) {
                uint64_t v33 = __p;
              }
              else {
                uint64_t v33 = (void **)__p[0];
              }
              xpc_object_t v34 = xpc_string_create((const char *)v33);
              if (!v34) {
                xpc_object_t v34 = xpc_null_create();
              }
              xpc_dictionary_set_value(v30, (const char *)*MEMORY[0x263F25EB8], v34);
              xpc_object_t v35 = xpc_null_create();
              xpc_release(v34);
              xpc_release(v35);
            }
            unsigned int v42 = -534716415;
            dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(v22, &v42, (void **)&__dst.__r_.__value_.__l.__data_);
            xpc_release(__dst.__r_.__value_.__l.__data_);
            goto LABEL_74;
          }
        }
        else
        {
          unsigned int v21 = v3[11];
          if (!os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_30;
          }
        }
        size_t v27 = __p;
        if (SHIBYTE(__p[2]) < 0) {
          size_t v27 = (void **)__p[0];
        }
        LODWORD(__dst.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = (std::string::size_type)v27;
        _os_log_impl(&dword_26368A000, v21, OS_LOG_TYPE_DEFAULT, "#I %s", (uint8_t *)&__dst, 0xCu);
        int v22 = v2 + 1;
        if (!v2[1]) {
          goto LABEL_74;
        }
        goto LABEL_56;
      }
    }
    memmove(p_dst, v4, v6);
    goto LABEL_28;
  }
  xpc_object_t v8 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  uint64_t v9 = off_26A99F170;
  if (!off_26A99F170)
  {
    CommandDriverFactory::create_default_global((uint64_t *)__p, v8);
    long long v10 = *(_OWORD *)__p;
    __p[0] = 0;
    __p[1] = 0;
    xpc_object_t v11 = (std::__shared_weak_count *)*(&off_26A99F170 + 1);
    off_26A99F170 = v10;
    if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    xpc_object_t v12 = (std::__shared_weak_count *)__p[1];
    if (__p[1] && !atomic_fetch_add((atomic_ullong *volatile)__p[1] + 1, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
    uint64_t v9 = off_26A99F170;
  }
  uint64_t v13 = (std::__shared_weak_count *)*(&off_26A99F170 + 1);
  if (*(&off_26A99F170 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_26A99F170 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)v9 + 16))(&__dst, v9);
  if (__dst.__r_.__value_.__l.__size_)
  {
    xpc_object_t v14 = std::__shared_weak_count::lock((std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_);
    if (v14) {
      std::string::size_type v15 = __dst.__r_.__value_.__r.__words[0];
    }
    else {
      std::string::size_type v15 = 0;
    }
    if (__dst.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_);
    }
    if (!v13) {
      goto LABEL_34;
    }
  }
  else
  {
    xpc_object_t v14 = 0;
    std::string::size_type v15 = 0;
    if (!v13) {
      goto LABEL_34;
    }
  }
  if (!atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
    if (v15) {
      goto LABEL_35;
    }
    goto LABEL_49;
  }
LABEL_34:
  if (v15)
  {
LABEL_35:
    __p[0] = (void *)MEMORY[0x263EF8330];
    __p[1] = (void *)1174405120;
    __p[2] = ___ZZZZN11RadioModule10initializeEN8dispatch13group_sessionEEUb_EUb3_ENK3__3clEv_block_invoke;
    __p[3] = &__block_descriptor_tmp_249;
    __p[4] = *((void **)v2 + 2);
    xpc_object_t v23 = (std::__shared_weak_count *)v2[3];
    uint64_t v40 = v23;
    if (v23) {
      atomic_fetch_add_explicit(&v23->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v24 = (void *)v2[1];
    if (v24) {
      uint64_t v24 = _Block_copy(v24);
    }
    aBlocunint64_t k = v24;
    uint64_t v25 = _Block_copy(__p);
    size_t v26 = v3[17];
    if (v26) {
      dispatch_retain(v26);
    }
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v25;
    __dst.__r_.__value_.__l.__size_ = (std::string::size_type)v26;
    (*(void (**)(std::string::size_type, std::string *))(*(void *)v15 + 288))(v15, &__dst);
    if (__dst.__r_.__value_.__l.__size_) {
      dispatch_release((dispatch_object_t)__dst.__r_.__value_.__l.__size_);
    }
    if (__dst.__r_.__value_.__r.__words[0]) {
      _Block_release(__dst.__r_.__value_.__l.__data_);
    }
    if (aBlock) {
      _Block_release(aBlock);
    }
    if (v40) {
      std::__shared_weak_count::__release_weak(v40);
    }
  }
LABEL_49:
  if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
LABEL_76:
  CFStringRef v36 = (std::__shared_weak_count *)v2[3];
  if (v36) {
    std::__shared_weak_count::__release_weak(v36);
  }
  __int16 v37 = (const void *)v2[1];
  if (v37) {
    _Block_release(v37);
  }
  operator delete(v2);
  uint64_t v38 = (std::__shared_weak_count *)a1[2];
  if (v38 && !atomic_fetch_add(&v38->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
    std::__shared_weak_count::__release_weak(v38);
  }
  operator delete(a1);
}

void sub_2636EE150(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17, void *aBlock, uint64_t a19, xpc_object_t object,dispatch_object_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void ___ZZZZN11RadioModule10initializeEN8dispatch13group_sessionEEUb_EUb3_ENK3__3clEv_block_invoke(void *a1, void *a2, xpc_object_t *a3)
{
  uint64_t v4 = (std::__shared_weak_count *)a1[5];
  if (v4)
  {
    uint64_t v7 = std::__shared_weak_count::lock(v4);
    xpc_object_t v18 = v7;
    if (v7)
    {
      xpc_object_t v8 = v7;
      if (a1[4])
      {
        xpc_object_t v9 = xpc_null_create();
        xpc_object_t object = v9;
        uint64_t v10 = MEMORY[0x263E6A240](*a2);
        uint64_t v11 = MEMORY[0x263EF8758];
        if (v10 == MEMORY[0x263EF8758])
        {
          xpc_object_t v12 = *a3;
          if (v12 && MEMORY[0x263E6A240](v12) == MEMORY[0x263EF8708]) {
            xpc_retain(v12);
          }
          else {
            xpc_object_t v12 = xpc_null_create();
          }
          xpc_object_t v13 = xpc_null_create();
          xpc_object_t object = v12;
          xpc_release(v9);
          xpc_release(v13);
        }
        if (MEMORY[0x263E6A240](*a2) == v11) {
          unsigned int v14 = 0;
        }
        else {
          unsigned int v14 = -534716416;
        }
        unsigned int v15 = v14;
        dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(a1 + 6, &v15, &object);
        xpc_release(object);
      }
      if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
}

void sub_2636EE4D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  xpc_release(v11);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI11RadioModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb4_E3__4EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_(void *a1)
{
  uint64_t v44 = *MEMORY[0x263EF8340];
  uint64_t v2 = (void *)*a1;
  uint64_t v3 = *(void **)*a1;
  if ((*(unsigned int (**)(void *))(*v3 + 88))(v3))
  {
    memset(__p, 170, 24);
    uint64_t v4 = (const void *)*MEMORY[0x263F26200];
    size_t v5 = strlen((const char *)*MEMORY[0x263F26200]);
    if (v5 >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    std::string::size_type v6 = v5;
    if (v5 >= 0x17)
    {
      uint64_t v16 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v5 | 7) != 0x17) {
        uint64_t v16 = v5 | 7;
      }
      uint64_t v17 = v16 + 1;
      p_dst = (std::string *)operator new(v16 + 1);
      __dst.__r_.__value_.__l.__size_ = v6;
      __dst.__r_.__value_.__r.__words[2] = v17 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v5;
      p_dst = &__dst;
      if (!v5)
      {
LABEL_28:
        p_dst->__r_.__value_.__s.__data_[v6] = 0;
        xpc_object_t v18 = (char *)operator new(0x28uLL);
        strcpy(v18, " rejected; ABM is shutting down ");
        xpc_object_t v19 = std::string::append(&__dst, v18, 0x20uLL);
        long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
        __p[2] = (void *)v19->__r_.__value_.__r.__words[2];
        *(_OWORD *)tm __p = v20;
        v19->__r_.__value_.__l.__size_ = 0;
        v19->__r_.__value_.__r.__words[2] = 0;
        v19->__r_.__value_.__r.__words[0] = 0;
        operator delete(v18);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__dst.__r_.__value_.__l.__data_);
          unsigned int v21 = v3[11];
          if (!os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
          {
LABEL_30:
            int v22 = v2 + 1;
            if (!v2[1])
            {
LABEL_74:
              if (SHIBYTE(__p[2]) < 0) {
                operator delete(__p[0]);
              }
              goto LABEL_76;
            }
LABEL_56:
            __dst.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
            uint64_t v28 = (void *)HIBYTE(__p[2]);
            if (SHIBYTE(__p[2]) < 0) {
              uint64_t v28 = __p[1];
            }
            if (v28)
            {
              xpc_object_t v29 = xpc_dictionary_create(0, 0, 0);
              if (v29 || (xpc_object_t v29 = xpc_null_create()) != 0)
              {
                if (MEMORY[0x263E6A240](v29) == MEMORY[0x263EF8708])
                {
                  xpc_retain(v29);
                  xpc_object_t v30 = v29;
                }
                else
                {
                  xpc_object_t v30 = xpc_null_create();
                }
              }
              else
              {
                xpc_object_t v30 = xpc_null_create();
                xpc_object_t v29 = 0;
              }
              xpc_release(v29);
              xpc_object_t v31 = xpc_null_create();
              unint64_t v32 = (void *)__dst.__r_.__value_.__r.__words[0];
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v30;
              xpc_release(v32);
              xpc_release(v31);
              if (SHIBYTE(__p[2]) >= 0) {
                uint64_t v33 = __p;
              }
              else {
                uint64_t v33 = (void **)__p[0];
              }
              xpc_object_t v34 = xpc_string_create((const char *)v33);
              if (!v34) {
                xpc_object_t v34 = xpc_null_create();
              }
              xpc_dictionary_set_value(v30, (const char *)*MEMORY[0x263F25EB8], v34);
              xpc_object_t v35 = xpc_null_create();
              xpc_release(v34);
              xpc_release(v35);
            }
            unsigned int v42 = -534716415;
            dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(v22, &v42, (void **)&__dst.__r_.__value_.__l.__data_);
            xpc_release(__dst.__r_.__value_.__l.__data_);
            goto LABEL_74;
          }
        }
        else
        {
          unsigned int v21 = v3[11];
          if (!os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_30;
          }
        }
        size_t v27 = __p;
        if (SHIBYTE(__p[2]) < 0) {
          size_t v27 = (void **)__p[0];
        }
        LODWORD(__dst.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = (std::string::size_type)v27;
        _os_log_impl(&dword_26368A000, v21, OS_LOG_TYPE_DEFAULT, "#I %s", (uint8_t *)&__dst, 0xCu);
        int v22 = v2 + 1;
        if (!v2[1]) {
          goto LABEL_74;
        }
        goto LABEL_56;
      }
    }
    memmove(p_dst, v4, v6);
    goto LABEL_28;
  }
  xpc_object_t v8 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  uint64_t v9 = off_26A99F170;
  if (!off_26A99F170)
  {
    CommandDriverFactory::create_default_global((uint64_t *)__p, v8);
    long long v10 = *(_OWORD *)__p;
    __p[0] = 0;
    __p[1] = 0;
    uint64_t v11 = (std::__shared_weak_count *)*(&off_26A99F170 + 1);
    off_26A99F170 = v10;
    if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    xpc_object_t v12 = (std::__shared_weak_count *)__p[1];
    if (__p[1] && !atomic_fetch_add((atomic_ullong *volatile)__p[1] + 1, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
    uint64_t v9 = off_26A99F170;
  }
  xpc_object_t v13 = (std::__shared_weak_count *)*(&off_26A99F170 + 1);
  if (*(&off_26A99F170 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_26A99F170 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)v9 + 16))(&__dst, v9);
  if (__dst.__r_.__value_.__l.__size_)
  {
    unsigned int v14 = std::__shared_weak_count::lock((std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_);
    if (v14) {
      std::string::size_type v15 = __dst.__r_.__value_.__r.__words[0];
    }
    else {
      std::string::size_type v15 = 0;
    }
    if (__dst.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_);
    }
    if (!v13) {
      goto LABEL_34;
    }
  }
  else
  {
    unsigned int v14 = 0;
    std::string::size_type v15 = 0;
    if (!v13) {
      goto LABEL_34;
    }
  }
  if (!atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
    if (v15) {
      goto LABEL_35;
    }
    goto LABEL_49;
  }
LABEL_34:
  if (v15)
  {
LABEL_35:
    __p[0] = (void *)MEMORY[0x263EF8330];
    __p[1] = (void *)1174405120;
    __p[2] = ___ZZZZN11RadioModule10initializeEN8dispatch13group_sessionEEUb_EUb4_ENK3__4clEv_block_invoke;
    __p[3] = &__block_descriptor_tmp_252;
    __p[4] = *((void **)v2 + 2);
    xpc_object_t v23 = (std::__shared_weak_count *)v2[3];
    uint64_t v40 = v23;
    if (v23) {
      atomic_fetch_add_explicit(&v23->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v24 = (void *)v2[1];
    if (v24) {
      uint64_t v24 = _Block_copy(v24);
    }
    aBlocunint64_t k = v24;
    uint64_t v25 = _Block_copy(__p);
    size_t v26 = v3[17];
    if (v26) {
      dispatch_retain(v26);
    }
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v25;
    __dst.__r_.__value_.__l.__size_ = (std::string::size_type)v26;
    (*(void (**)(std::string::size_type, std::string *))(*(void *)v15 + 296))(v15, &__dst);
    if (__dst.__r_.__value_.__l.__size_) {
      dispatch_release((dispatch_object_t)__dst.__r_.__value_.__l.__size_);
    }
    if (__dst.__r_.__value_.__r.__words[0]) {
      _Block_release(__dst.__r_.__value_.__l.__data_);
    }
    if (aBlock) {
      _Block_release(aBlock);
    }
    if (v40) {
      std::__shared_weak_count::__release_weak(v40);
    }
  }
LABEL_49:
  if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
LABEL_76:
  CFStringRef v36 = (std::__shared_weak_count *)v2[3];
  if (v36) {
    std::__shared_weak_count::__release_weak(v36);
  }
  __int16 v37 = (const void *)v2[1];
  if (v37) {
    _Block_release(v37);
  }
  operator delete(v2);
  uint64_t v38 = (std::__shared_weak_count *)a1[2];
  if (v38 && !atomic_fetch_add(&v38->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
    std::__shared_weak_count::__release_weak(v38);
  }
  operator delete(a1);
}

void sub_2636EEBA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17, void *aBlock, uint64_t a19, xpc_object_t object,dispatch_object_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void ___ZZZZN11RadioModule10initializeEN8dispatch13group_sessionEEUb_EUb4_ENK3__4clEv_block_invoke(void *a1, void *a2, xpc_object_t *a3)
{
  uint64_t v4 = (std::__shared_weak_count *)a1[5];
  if (v4)
  {
    uint64_t v7 = std::__shared_weak_count::lock(v4);
    xpc_object_t v18 = v7;
    if (v7)
    {
      xpc_object_t v8 = v7;
      if (a1[4])
      {
        xpc_object_t v9 = xpc_null_create();
        xpc_object_t object = v9;
        uint64_t v10 = MEMORY[0x263E6A240](*a2);
        uint64_t v11 = MEMORY[0x263EF8758];
        if (v10 == MEMORY[0x263EF8758])
        {
          xpc_object_t v12 = *a3;
          if (v12 && MEMORY[0x263E6A240](v12) == MEMORY[0x263EF8708]) {
            xpc_retain(v12);
          }
          else {
            xpc_object_t v12 = xpc_null_create();
          }
          xpc_object_t v13 = xpc_null_create();
          xpc_object_t object = v12;
          xpc_release(v9);
          xpc_release(v13);
        }
        if (MEMORY[0x263E6A240](*a2) == v11) {
          unsigned int v14 = 0;
        }
        else {
          unsigned int v14 = -534716416;
        }
        unsigned int v15 = v14;
        dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(a1 + 6, &v15, &object);
        xpc_release(object);
      }
      if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
}

void sub_2636EEF30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  xpc_release(v11);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI11RadioModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb5_E3__5EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_(void *a1)
{
  uint64_t v44 = *MEMORY[0x263EF8340];
  uint64_t v2 = (void *)*a1;
  uint64_t v3 = *(void **)*a1;
  if ((*(unsigned int (**)(void *))(*v3 + 88))(v3))
  {
    memset(__p, 170, 24);
    uint64_t v4 = (const void *)*MEMORY[0x263F267B0];
    size_t v5 = strlen((const char *)*MEMORY[0x263F267B0]);
    if (v5 >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    std::string::size_type v6 = v5;
    if (v5 >= 0x17)
    {
      uint64_t v16 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v5 | 7) != 0x17) {
        uint64_t v16 = v5 | 7;
      }
      uint64_t v17 = v16 + 1;
      p_dst = (std::string *)operator new(v16 + 1);
      __dst.__r_.__value_.__l.__size_ = v6;
      __dst.__r_.__value_.__r.__words[2] = v17 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v5;
      p_dst = &__dst;
      if (!v5)
      {
LABEL_28:
        p_dst->__r_.__value_.__s.__data_[v6] = 0;
        xpc_object_t v18 = (char *)operator new(0x28uLL);
        strcpy(v18, " rejected; ABM is shutting down ");
        xpc_object_t v19 = std::string::append(&__dst, v18, 0x20uLL);
        long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
        __p[2] = (void *)v19->__r_.__value_.__r.__words[2];
        *(_OWORD *)tm __p = v20;
        v19->__r_.__value_.__l.__size_ = 0;
        v19->__r_.__value_.__r.__words[2] = 0;
        v19->__r_.__value_.__r.__words[0] = 0;
        operator delete(v18);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__dst.__r_.__value_.__l.__data_);
          unsigned int v21 = v3[11];
          if (!os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
          {
LABEL_30:
            int v22 = v2 + 1;
            if (!v2[1])
            {
LABEL_74:
              if (SHIBYTE(__p[2]) < 0) {
                operator delete(__p[0]);
              }
              goto LABEL_76;
            }
LABEL_56:
            __dst.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
            uint64_t v28 = (void *)HIBYTE(__p[2]);
            if (SHIBYTE(__p[2]) < 0) {
              uint64_t v28 = __p[1];
            }
            if (v28)
            {
              xpc_object_t v29 = xpc_dictionary_create(0, 0, 0);
              if (v29 || (xpc_object_t v29 = xpc_null_create()) != 0)
              {
                if (MEMORY[0x263E6A240](v29) == MEMORY[0x263EF8708])
                {
                  xpc_retain(v29);
                  xpc_object_t v30 = v29;
                }
                else
                {
                  xpc_object_t v30 = xpc_null_create();
                }
              }
              else
              {
                xpc_object_t v30 = xpc_null_create();
                xpc_object_t v29 = 0;
              }
              xpc_release(v29);
              xpc_object_t v31 = xpc_null_create();
              unint64_t v32 = (void *)__dst.__r_.__value_.__r.__words[0];
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v30;
              xpc_release(v32);
              xpc_release(v31);
              if (SHIBYTE(__p[2]) >= 0) {
                uint64_t v33 = __p;
              }
              else {
                uint64_t v33 = (void **)__p[0];
              }
              xpc_object_t v34 = xpc_string_create((const char *)v33);
              if (!v34) {
                xpc_object_t v34 = xpc_null_create();
              }
              xpc_dictionary_set_value(v30, (const char *)*MEMORY[0x263F25EB8], v34);
              xpc_object_t v35 = xpc_null_create();
              xpc_release(v34);
              xpc_release(v35);
            }
            unsigned int v42 = -534716415;
            dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(v22, &v42, (void **)&__dst.__r_.__value_.__l.__data_);
            xpc_release(__dst.__r_.__value_.__l.__data_);
            goto LABEL_74;
          }
        }
        else
        {
          unsigned int v21 = v3[11];
          if (!os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_30;
          }
        }
        size_t v27 = __p;
        if (SHIBYTE(__p[2]) < 0) {
          size_t v27 = (void **)__p[0];
        }
        LODWORD(__dst.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = (std::string::size_type)v27;
        _os_log_impl(&dword_26368A000, v21, OS_LOG_TYPE_DEFAULT, "#I %s", (uint8_t *)&__dst, 0xCu);
        int v22 = v2 + 1;
        if (!v2[1]) {
          goto LABEL_74;
        }
        goto LABEL_56;
      }
    }
    memmove(p_dst, v4, v6);
    goto LABEL_28;
  }
  xpc_object_t v8 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  uint64_t v9 = off_26A99F170;
  if (!off_26A99F170)
  {
    CommandDriverFactory::create_default_global((uint64_t *)__p, v8);
    long long v10 = *(_OWORD *)__p;
    __p[0] = 0;
    __p[1] = 0;
    uint64_t v11 = (std::__shared_weak_count *)*(&off_26A99F170 + 1);
    off_26A99F170 = v10;
    if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    xpc_object_t v12 = (std::__shared_weak_count *)__p[1];
    if (__p[1] && !atomic_fetch_add((atomic_ullong *volatile)__p[1] + 1, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
    uint64_t v9 = off_26A99F170;
  }
  xpc_object_t v13 = (std::__shared_weak_count *)*(&off_26A99F170 + 1);
  if (*(&off_26A99F170 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_26A99F170 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)v9 + 16))(&__dst, v9);
  if (__dst.__r_.__value_.__l.__size_)
  {
    unsigned int v14 = std::__shared_weak_count::lock((std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_);
    if (v14) {
      std::string::size_type v15 = __dst.__r_.__value_.__r.__words[0];
    }
    else {
      std::string::size_type v15 = 0;
    }
    if (__dst.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_);
    }
    if (!v13) {
      goto LABEL_34;
    }
  }
  else
  {
    unsigned int v14 = 0;
    std::string::size_type v15 = 0;
    if (!v13) {
      goto LABEL_34;
    }
  }
  if (!atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
    if (v15) {
      goto LABEL_35;
    }
    goto LABEL_49;
  }
LABEL_34:
  if (v15)
  {
LABEL_35:
    __p[0] = (void *)MEMORY[0x263EF8330];
    __p[1] = (void *)1174405120;
    __p[2] = ___ZZZZN11RadioModule10initializeEN8dispatch13group_sessionEEUb_EUb5_ENK3__5clEv_block_invoke;
    __p[3] = &__block_descriptor_tmp_255;
    __p[4] = *((void **)v2 + 2);
    xpc_object_t v23 = (std::__shared_weak_count *)v2[3];
    uint64_t v40 = v23;
    if (v23) {
      atomic_fetch_add_explicit(&v23->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v24 = (void *)v2[1];
    if (v24) {
      uint64_t v24 = _Block_copy(v24);
    }
    aBlocunint64_t k = v24;
    uint64_t v25 = _Block_copy(__p);
    size_t v26 = v3[17];
    if (v26) {
      dispatch_retain(v26);
    }
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v25;
    __dst.__r_.__value_.__l.__size_ = (std::string::size_type)v26;
    (*(void (**)(std::string::size_type, std::string *))(*(void *)v15 + 232))(v15, &__dst);
    if (__dst.__r_.__value_.__l.__size_) {
      dispatch_release((dispatch_object_t)__dst.__r_.__value_.__l.__size_);
    }
    if (__dst.__r_.__value_.__r.__words[0]) {
      _Block_release(__dst.__r_.__value_.__l.__data_);
    }
    if (aBlock) {
      _Block_release(aBlock);
    }
    if (v40) {
      std::__shared_weak_count::__release_weak(v40);
    }
  }
LABEL_49:
  if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
LABEL_76:
  CFStringRef v36 = (std::__shared_weak_count *)v2[3];
  if (v36) {
    std::__shared_weak_count::__release_weak(v36);
  }
  __int16 v37 = (const void *)v2[1];
  if (v37) {
    _Block_release(v37);
  }
  operator delete(v2);
  uint64_t v38 = (std::__shared_weak_count *)a1[2];
  if (v38 && !atomic_fetch_add(&v38->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
    std::__shared_weak_count::__release_weak(v38);
  }
  operator delete(a1);
}

void sub_2636EF5F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17, void *aBlock, uint64_t a19, xpc_object_t object,dispatch_object_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void ___ZZZZN11RadioModule10initializeEN8dispatch13group_sessionEEUb_EUb5_ENK3__5clEv_block_invoke(void *a1, void *a2, void *a3)
{
  uint64_t v4 = (std::__shared_weak_count *)a1[5];
  if (!v4) {
    return;
  }
  uint64_t v7 = std::__shared_weak_count::lock(v4);
  long long v20 = v7;
  if (!v7) {
    return;
  }
  if (!a1[4])
  {
    long long v10 = v7;
LABEL_22:
    if (!atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
    return;
  }
  xpc_object_t v8 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v9 = v8;
  if (v8)
  {
    xpc_object_t xdict = v8;
  }
  else
  {
    xpc_object_t v9 = xpc_null_create();
    xpc_object_t xdict = v9;
    if (!v9)
    {
      xpc_object_t v11 = xpc_null_create();
      xpc_object_t v9 = 0;
      goto LABEL_12;
    }
  }
  if (MEMORY[0x263E6A240](v9) == MEMORY[0x263EF8708])
  {
    xpc_retain(v9);
    goto LABEL_13;
  }
  xpc_object_t v11 = xpc_null_create();
LABEL_12:
  xpc_object_t xdict = v11;
LABEL_13:
  xpc_release(v9);
  uint64_t v12 = MEMORY[0x263E6A240](*a3);
  uint64_t v13 = MEMORY[0x263EF8758];
  if (v12 != MEMORY[0x263EF8758])
  {
    xpc_object_t v14 = (xpc_object_t)*a3;
    if (v14) {
      xpc_retain(v14);
    }
    else {
      xpc_object_t v14 = xpc_null_create();
    }
    xpc_dictionary_set_value(xdict, (const char *)*MEMORY[0x263F268E0], v14);
    xpc_object_t v15 = xpc_null_create();
    xpc_release(v14);
    xpc_release(v15);
  }
  if (MEMORY[0x263E6A240](*a2) == v13) {
    unsigned int v16 = 0;
  }
  else {
    unsigned int v16 = -534716416;
  }
  unsigned int v17 = v16;
  dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(a1 + 6, &v17, &xdict);
  xpc_release(xdict);
  long long v10 = v20;
  if (v20) {
    goto LABEL_22;
  }
}

void sub_2636EFA04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, char a11)
{
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI11RadioModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb6_E3__6EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_(void *a1)
{
  uint64_t v54 = *MEMORY[0x263EF8340];
  uint64_t v2 = (void *)*a1;
  uint64_t v3 = *(void **)*a1;
  if ((*(unsigned int (**)(void *))(*v3 + 88))(v3))
  {
    memset(object, 170, 24);
    uint64_t v4 = (const void *)*MEMORY[0x263F26778];
    size_t v5 = strlen((const char *)*MEMORY[0x263F26778]);
    if (v5 >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    std::string::size_type v6 = v5;
    if (v5 >= 0x17)
    {
      uint64_t v16 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v5 | 7) != 0x17) {
        uint64_t v16 = v5 | 7;
      }
      uint64_t v17 = v16 + 1;
      p_dst = (std::string *)operator new(v16 + 1);
      __dst.__r_.__value_.__l.__size_ = v6;
      __dst.__r_.__value_.__r.__words[2] = v17 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v5;
      p_dst = &__dst;
      if (!v5)
      {
LABEL_28:
        p_dst->__r_.__value_.__s.__data_[v6] = 0;
        xpc_object_t v18 = (char *)operator new(0x28uLL);
        strcpy(v18, " rejected; ABM is shutting down ");
        xpc_object_t v19 = std::string::append(&__dst, v18, 0x20uLL);
        long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
        object[2] = (xpc_object_t)v19->__r_.__value_.__r.__words[2];
        *(_OWORD *)xpc_object_t object = v20;
        v19->__r_.__value_.__l.__size_ = 0;
        v19->__r_.__value_.__r.__words[2] = 0;
        v19->__r_.__value_.__r.__words[0] = 0;
        operator delete(v18);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__dst.__r_.__value_.__l.__data_);
          unsigned int v21 = v3[11];
          if (!os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
          {
LABEL_30:
            int v22 = v2 + 2;
            if (!v2[2])
            {
LABEL_87:
              if (SHIBYTE(object[2]) < 0) {
                operator delete(object[0]);
              }
              goto LABEL_89;
            }
LABEL_41:
            __dst.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
            xpc_object_t v26 = (xpc_object_t)HIBYTE(object[2]);
            if (SHIBYTE(object[2]) < 0) {
              xpc_object_t v26 = object[1];
            }
            if (v26)
            {
              xpc_object_t v27 = xpc_dictionary_create(0, 0, 0);
              if (v27 || (xpc_object_t v27 = xpc_null_create()) != 0)
              {
                if (MEMORY[0x263E6A240](v27) == MEMORY[0x263EF8708])
                {
                  xpc_retain(v27);
                  xpc_object_t v28 = v27;
                }
                else
                {
                  xpc_object_t v28 = xpc_null_create();
                }
              }
              else
              {
                xpc_object_t v28 = xpc_null_create();
                xpc_object_t v27 = 0;
              }
              xpc_release(v27);
              xpc_object_t v39 = xpc_null_create();
              uint64_t v40 = (void *)__dst.__r_.__value_.__r.__words[0];
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v28;
              xpc_release(v40);
              xpc_release(v39);
              if (SHIBYTE(object[2]) >= 0) {
                uint64_t v41 = object;
              }
              else {
                uint64_t v41 = (xpc_object_t *)object[0];
              }
              xpc_object_t v42 = xpc_string_create((const char *)v41);
              if (!v42) {
                xpc_object_t v42 = xpc_null_create();
              }
              xpc_dictionary_set_value(v28, (const char *)*MEMORY[0x263F25EB8], v42);
              xpc_object_t v43 = xpc_null_create();
              xpc_release(v42);
              xpc_release(v43);
            }
            LODWORD(v52) = -534716415;
            dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(v22, (unsigned int *)&v52, (void **)&__dst.__r_.__value_.__l.__data_);
            xpc_release(__dst.__r_.__value_.__l.__data_);
            goto LABEL_87;
          }
        }
        else
        {
          unsigned int v21 = v3[11];
          if (!os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_30;
          }
        }
        uint64_t v25 = object;
        if (SHIBYTE(object[2]) < 0) {
          uint64_t v25 = (xpc_object_t *)object[0];
        }
        LODWORD(__dst.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = (std::string::size_type)v25;
        _os_log_impl(&dword_26368A000, v21, OS_LOG_TYPE_DEFAULT, "#I %s", (uint8_t *)&__dst, 0xCu);
        int v22 = v2 + 2;
        if (!v2[2]) {
          goto LABEL_87;
        }
        goto LABEL_41;
      }
    }
    memmove(p_dst, v4, v6);
    goto LABEL_28;
  }
  xpc_object_t v8 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  uint64_t v9 = off_26A99F170;
  if (!off_26A99F170)
  {
    CommandDriverFactory::create_default_global((uint64_t *)object, v8);
    long long v10 = *(_OWORD *)object;
    object[0] = 0;
    object[1] = 0;
    xpc_object_t v11 = (std::__shared_weak_count *)*(&off_26A99F170 + 1);
    off_26A99F170 = v10;
    if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    uint64_t v12 = (std::__shared_weak_count *)object[1];
    if (object[1] && !atomic_fetch_add((atomic_ullong *volatile)object[1] + 1, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
    uint64_t v9 = off_26A99F170;
  }
  uint64_t v13 = (std::__shared_weak_count *)*(&off_26A99F170 + 1);
  if (*(&off_26A99F170 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_26A99F170 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)v9 + 16))(&__dst, v9);
  if (__dst.__r_.__value_.__l.__size_)
  {
    xpc_object_t v14 = std::__shared_weak_count::lock((std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_);
    if (v14) {
      std::string::size_type v15 = __dst.__r_.__value_.__r.__words[0];
    }
    else {
      std::string::size_type v15 = 0;
    }
    if (__dst.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_);
    }
    if (!v13) {
      goto LABEL_34;
    }
  }
  else
  {
    xpc_object_t v14 = 0;
    std::string::size_type v15 = 0;
    if (!v13) {
      goto LABEL_34;
    }
  }
  if (!atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
    if (v15) {
      goto LABEL_35;
    }
LABEL_49:
    xpc_object_t v29 = v3[11];
    if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
    {
      LOWORD(object[0]) = 0;
      _os_log_error_impl(&dword_26368A000, v29, OS_LOG_TYPE_ERROR, "No radio driver", (uint8_t *)object, 2u);
    }
    xpc_object_t v30 = xpc_null_create();
    uint64_t v31 = v2[2];
    object[0] = v30;
    xpc_object_t v32 = xpc_null_create();
    (*(void (**)(uint64_t, uint64_t, xpc_object_t *))(v31 + 16))(v31, 3760250880, object);
    xpc_release(object[0]);
    xpc_release(v32);
    goto LABEL_75;
  }
LABEL_34:
  if (!v15) {
    goto LABEL_49;
  }
LABEL_35:
  xpc_object_t v23 = (void *)v2[1];
  xpc_object_t v50 = v23;
  if (v23) {
    xpc_retain(v23);
  }
  else {
    xpc_object_t v50 = xpc_null_create();
  }
  xpc::bridge((uint64_t *)&cf, (xpc *)&v50, v24);
  CFTypeRef v33 = cf;
  if (cf && (CFTypeID v34 = CFGetTypeID(cf), v34 == CFDictionaryGetTypeID()))
  {
    CFTypeRef v52 = v33;
    CFRetain(v33);
  }
  else
  {
    CFTypeRef v52 = 0;
  }
  object[0] = (xpc_object_t)MEMORY[0x263EF8330];
  object[1] = (xpc_object_t)1174405120;
  object[2] = ___ZZZZN11RadioModule10initializeEN8dispatch13group_sessionEEUb_EUb6_ENK3__6clEv_block_invoke;
  xpc_object_t object[3] = &__block_descriptor_tmp_258;
  xpc_object_t object[4] = v3;
  object[5] = *((xpc_object_t *)v2 + 3);
  xpc_object_t v35 = (std::__shared_weak_count *)v2[4];
  unint64_t v48 = v35;
  if (v35) {
    atomic_fetch_add_explicit(&v35->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  CFStringRef v36 = (void *)v2[2];
  if (v36) {
    CFStringRef v36 = _Block_copy(v36);
  }
  aBlocunint64_t k = v36;
  __int16 v37 = _Block_copy(object);
  uint64_t v38 = v3[17];
  if (v38) {
    dispatch_retain(v38);
  }
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v37;
  __dst.__r_.__value_.__l.__size_ = (std::string::size_type)v38;
  (*(void (**)(std::string::size_type, CFTypeRef *, std::string *))(*(void *)v15 + 248))(v15, &v52, &__dst);
  if (__dst.__r_.__value_.__l.__size_) {
    dispatch_release((dispatch_object_t)__dst.__r_.__value_.__l.__size_);
  }
  if (__dst.__r_.__value_.__r.__words[0]) {
    _Block_release(__dst.__r_.__value_.__l.__data_);
  }
  if (v52) {
    CFRelease(v52);
  }
  if (cf) {
    CFRelease(cf);
  }
  xpc_release(v50);
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v48) {
    std::__shared_weak_count::__release_weak(v48);
  }
LABEL_75:
  if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
LABEL_89:
  uint64_t v44 = (std::__shared_weak_count *)v2[4];
  if (v44) {
    std::__shared_weak_count::__release_weak(v44);
  }
  uint64_t v45 = (const void *)v2[2];
  if (v45) {
    _Block_release(v45);
  }
  xpc_release((xpc_object_t)v2[1]);
  operator delete(v2);
  uint64_t v46 = (std::__shared_weak_count *)a1[2];
  if (v46 && !atomic_fetch_add(&v46->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
    std::__shared_weak_count::__release_weak(v46);
  }
  operator delete(a1);
}

void sub_2636F01D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18, void *a19, uint64_t a20,xpc_object_t a21,CFTypeRef a22,CFTypeRef cf,xpc_object_t aBlock,dispatch_object_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void ___ZZZZN11RadioModule10initializeEN8dispatch13group_sessionEEUb_EUb6_ENK3__6clEv_block_invoke(void *a1, uint64_t *a2)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  uint64_t v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    uint64_t v5 = a1[4];
    std::string::size_type v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      uint64_t v7 = v6;
      if (a1[5])
      {
        uint64_t v8 = *a2;
        if (*a2) {
          uint64_t v9 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
        }
        else {
          uint64_t v9 = 0;
        }
        if (v9)
        {
          long long v10 = *(NSObject **)(v5 + 88);
          if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)xpc_object_t object = 138412290;
            *(void *)&xpc_object_t object[4] = v8;
            _os_log_error_impl(&dword_26368A000, v10, OS_LOG_TYPE_ERROR, "%@", object, 0xCu);
            uint64_t v8 = *a2;
          }
        }
        if (v8) {
          xpc_object_t v11 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
        }
        else {
          xpc_object_t v11 = 0;
        }
        if (v11) {
          uint64_t v12 = 3760250880;
        }
        else {
          uint64_t v12 = 0;
        }
        xpc_object_t v13 = xpc_null_create();
        uint64_t v14 = a1[7];
        *(void *)xpc_object_t object = v13;
        xpc_object_t v15 = xpc_null_create();
        (*(void (**)(uint64_t, uint64_t, unsigned char *))(v14 + 16))(v14, v12, object);
        xpc_release(*(xpc_object_t *)object);
        xpc_release(v15);
      }
      if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_2636F0628(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, xpc_object_t object)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI11RadioModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb7_E3__7EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_(uint64_t **a1)
{
  uint64_t v68 = *MEMORY[0x263EF8340];
  uint64_t v2 = *a1;
  uint64_t v3 = (void *)**a1;
  if ((*(unsigned int (**)(void *))(*v3 + 88))(v3))
  {
    memset(&object, 170, sizeof(object));
    uint64_t v4 = (const void *)*MEMORY[0x263F26778];
    size_t v5 = strlen((const char *)*MEMORY[0x263F26778]);
    if (v5 >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    std::string::size_type v6 = v5;
    if (v5 >= 0x17)
    {
      uint64_t v16 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v5 | 7) != 0x17) {
        uint64_t v16 = v5 | 7;
      }
      uint64_t v17 = v16 + 1;
      p_dst = (std::string *)operator new(v16 + 1);
      __dst.__r_.__value_.__l.__size_ = v6;
      __dst.__r_.__value_.__r.__words[2] = v17 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v5;
      p_dst = &__dst;
      if (!v5)
      {
LABEL_28:
        p_dst->__r_.__value_.__s.__data_[v6] = 0;
        xpc_object_t v18 = (char *)operator new(0x28uLL);
        strcpy(v18, " rejected; ABM is shutting down ");
        xpc_object_t v19 = std::string::append(&__dst, v18, 0x20uLL);
        long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
        object.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
        *(_OWORD *)&object.__r_.__value_.__l.__data_ = v20;
        v19->__r_.__value_.__l.__size_ = 0;
        v19->__r_.__value_.__r.__words[2] = 0;
        v19->__r_.__value_.__r.__words[0] = 0;
        operator delete(v18);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__dst.__r_.__value_.__l.__data_);
          unsigned int v21 = v3[11];
          if (!os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
          {
LABEL_30:
            int v22 = v2 + 2;
            if (!v2[2])
            {
LABEL_104:
              if (SHIBYTE(object.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(object.__r_.__value_.__l.__data_);
              }
              goto LABEL_106;
            }
LABEL_41:
            __dst.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
            std::string::size_type size = HIBYTE(object.__r_.__value_.__r.__words[2]);
            if ((object.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              std::string::size_type size = object.__r_.__value_.__l.__size_;
            }
            if (size)
            {
              xpc_object_t v26 = xpc_dictionary_create(0, 0, 0);
              if (v26 || (xpc_object_t v26 = xpc_null_create()) != 0)
              {
                if (MEMORY[0x263E6A240](v26) == MEMORY[0x263EF8708])
                {
                  xpc_retain(v26);
                  xpc_object_t v27 = v26;
                }
                else
                {
                  xpc_object_t v27 = xpc_null_create();
                }
              }
              else
              {
                xpc_object_t v27 = xpc_null_create();
                xpc_object_t v26 = 0;
              }
              xpc_release(v26);
              xpc_object_t v50 = xpc_null_create();
              CFBooleanRef v51 = (void *)__dst.__r_.__value_.__r.__words[0];
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v27;
              xpc_release(v51);
              xpc_release(v50);
              if ((object.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                p_std::string object = &object;
              }
              else {
                p_std::string object = (std::string *)object.__r_.__value_.__r.__words[0];
              }
              xpc_object_t v53 = xpc_string_create((const char *)p_object);
              if (!v53) {
                xpc_object_t v53 = xpc_null_create();
              }
              xpc_dictionary_set_value(v27, (const char *)*MEMORY[0x263F25EB8], v53);
              xpc_object_t v54 = xpc_null_create();
              xpc_release(v53);
              xpc_release(v54);
            }
            LODWORD(v66) = -534716415;
            dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(v22, (unsigned int *)&v66, (void **)&__dst.__r_.__value_.__l.__data_);
            xpc_release(__dst.__r_.__value_.__l.__data_);
            goto LABEL_104;
          }
        }
        else
        {
          unsigned int v21 = v3[11];
          if (!os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_30;
          }
        }
        uint64_t v24 = &object;
        if ((object.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          uint64_t v24 = (std::string *)object.__r_.__value_.__r.__words[0];
        }
        LODWORD(__dst.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = (std::string::size_type)v24;
        _os_log_impl(&dword_26368A000, v21, OS_LOG_TYPE_DEFAULT, "#I %s", (uint8_t *)&__dst, 0xCu);
        int v22 = v2 + 2;
        if (!v2[2]) {
          goto LABEL_104;
        }
        goto LABEL_41;
      }
    }
    memmove(p_dst, v4, v6);
    goto LABEL_28;
  }
  uint64_t v8 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  uint64_t v9 = off_26A99F170;
  if (!off_26A99F170)
  {
    CommandDriverFactory::create_default_global((uint64_t *)&object, v8);
    long long v10 = *(_OWORD *)&object.__r_.__value_.__l.__data_;
    *(_OWORD *)&object.__r_.__value_.__l.__data_ = 0uLL;
    xpc_object_t v11 = (std::__shared_weak_count *)*(&off_26A99F170 + 1);
    off_26A99F170 = v10;
    if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    uint64_t v12 = (std::__shared_weak_count *)object.__r_.__value_.__l.__size_;
    if (object.__r_.__value_.__l.__size_
      && !atomic_fetch_add((atomic_ullong *volatile)(object.__r_.__value_.__l.__size_ + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
    uint64_t v9 = off_26A99F170;
  }
  xpc_object_t v13 = (std::__shared_weak_count *)*(&off_26A99F170 + 1);
  if (*(&off_26A99F170 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_26A99F170 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)v9 + 16))(&__dst, v9);
  if (__dst.__r_.__value_.__l.__size_)
  {
    uint64_t v14 = std::__shared_weak_count::lock((std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_);
    if (v14) {
      std::string::size_type v15 = __dst.__r_.__value_.__r.__words[0];
    }
    else {
      std::string::size_type v15 = 0;
    }
    if (__dst.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_);
    }
    if (!v13)
    {
LABEL_34:
      if (v15) {
        goto LABEL_35;
      }
LABEL_49:
      xpc_object_t v28 = v3[11];
      if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
      {
        LOWORD(object.__r_.__value_.__l.__data_) = 0;
        _os_log_error_impl(&dword_26368A000, v28, OS_LOG_TYPE_ERROR, "No radio driver", (uint8_t *)&object, 2u);
      }
      xpc_object_t v29 = xpc_null_create();
      uint64_t v30 = v2[2];
      object.__r_.__value_.__r.__words[0] = (std::string::size_type)v29;
      xpc_object_t v31 = xpc_null_create();
      (*(void (**)(uint64_t, uint64_t, std::string *))(v30 + 16))(v30, 3760250880, &object);
      xpc_release(object.__r_.__value_.__l.__data_);
      xpc_release(v31);
      goto LABEL_93;
    }
  }
  else
  {
    uint64_t v14 = 0;
    std::string::size_type v15 = 0;
    if (!v13) {
      goto LABEL_34;
    }
  }
  if (atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_34;
  }
  ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
  std::__shared_weak_count::__release_weak(v13);
  if (!v15) {
    goto LABEL_49;
  }
LABEL_35:
  xpc_object_t value = xpc_dictionary_get_value((xpc_object_t)v2[1], (const char *)*MEMORY[0x263F264B8]);
  object.__r_.__value_.__r.__words[0] = (std::string::size_type)value;
  if (value) {
    xpc_retain(value);
  }
  else {
    object.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
  }
  int v32 = xpc::dyn_cast_or_default((xpc *)&object, 0);
  xpc_release(object.__r_.__value_.__l.__data_);
  CFTypeRef v33 = v3[11];
  BOOL v34 = os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT);
  if (v32 == 1)
  {
    if (v34)
    {
      LOWORD(object.__r_.__value_.__l.__data_) = 0;
      _os_log_impl(&dword_26368A000, v33, OS_LOG_TYPE_DEFAULT, "#I RF Self Test in FTM requested", (uint8_t *)&object, 2u);
    }
    goto LABEL_63;
  }
  if (v34)
  {
    LOWORD(object.__r_.__value_.__l.__data_) = 0;
    _os_log_impl(&dword_26368A000, v33, OS_LOG_TYPE_DEFAULT, "#I RF Self Test in AST2 mode requested", (uint8_t *)&object, 2u);
  }
  memset(&object, 0, sizeof(object));
  ctu::cf::assign();
  std::string __dst = object;
  if ((object.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    xpc_object_t v35 = &__dst;
  }
  else {
    xpc_object_t v35 = (std::string *)object.__r_.__value_.__r.__words[0];
  }
  xpc_object_t v36 = xpc_dictionary_get_value((xpc_object_t)v2[1], (const char *)v35);
  xpc_object_t v37 = v36;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__dst.__r_.__value_.__l.__data_);
    if (v37) {
      goto LABEL_63;
    }
LABEL_90:
    uint64_t v46 = v3[11];
    if (os_log_type_enabled(v46, OS_LOG_TYPE_ERROR))
    {
      LOWORD(object.__r_.__value_.__l.__data_) = 0;
      _os_log_error_impl(&dword_26368A000, v46, OS_LOG_TYPE_ERROR, "Ticket was not provided", (uint8_t *)&object, 2u);
    }
    xpc_object_t v47 = xpc_null_create();
    uint64_t v48 = v2[2];
    object.__r_.__value_.__r.__words[0] = (std::string::size_type)v47;
    xpc_object_t v49 = xpc_null_create();
    (*(void (**)(uint64_t, uint64_t, std::string *))(v48 + 16))(v48, 3760250882, &object);
    xpc_release(object.__r_.__value_.__l.__data_);
    xpc_release(v49);
    goto LABEL_93;
  }
  if (!v36) {
    goto LABEL_90;
  }
LABEL_63:
  uint64_t v38 = (void *)v2[1];
  xpc_object_t v64 = v38;
  if (v38) {
    xpc_retain(v38);
  }
  else {
    xpc_object_t v64 = xpc_null_create();
  }
  xpc::bridge((uint64_t *)&cf, (xpc *)&v64, v39);
  CFTypeRef v40 = cf;
  if (cf && (CFTypeID v41 = CFGetTypeID(cf), v41 == CFDictionaryGetTypeID()))
  {
    CFTypeRef v66 = v40;
    CFRetain(v40);
  }
  else
  {
    CFTypeRef v66 = 0;
  }
  object.__r_.__value_.__r.__words[0] = MEMORY[0x263EF8330];
  object.__r_.__value_.__l.__size_ = 1174405120;
  object.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZZZZN11RadioModule10initializeEN8dispatch13group_sessionEEUb_EUb7_ENK3__7clEv_block_invoke;
  size_t v59 = &__block_descriptor_tmp_261;
  uint64_t v60 = v3;
  uint64_t v61 = v2[3];
  xpc_object_t v42 = (std::__shared_weak_count *)v2[4];
  uint64_t v62 = v42;
  if (v42) {
    atomic_fetch_add_explicit(&v42->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  xpc_object_t v43 = (void *)v2[2];
  if (v43) {
    xpc_object_t v43 = _Block_copy(v43);
  }
  aBlocunint64_t k = v43;
  uint64_t v44 = _Block_copy(&object);
  uint64_t v45 = v3[17];
  if (v45) {
    dispatch_retain(v45);
  }
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v44;
  __dst.__r_.__value_.__l.__size_ = (std::string::size_type)v45;
  (*(void (**)(std::string::size_type, CFTypeRef *, std::string *))(*(void *)v15 + 256))(v15, &v66, &__dst);
  if (__dst.__r_.__value_.__l.__size_) {
    dispatch_release((dispatch_object_t)__dst.__r_.__value_.__l.__size_);
  }
  if (__dst.__r_.__value_.__r.__words[0]) {
    _Block_release(__dst.__r_.__value_.__l.__data_);
  }
  if (v66) {
    CFRelease(v66);
  }
  if (cf) {
    CFRelease(cf);
  }
  xpc_release(v64);
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v62) {
    std::__shared_weak_count::__release_weak(v62);
  }
LABEL_93:
  if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
LABEL_106:
  uint64_t v55 = (std::__shared_weak_count *)v2[4];
  if (v55) {
    std::__shared_weak_count::__release_weak(v55);
  }
  size_t v56 = (const void *)v2[2];
  if (v56) {
    _Block_release(v56);
  }
  xpc_release((xpc_object_t)v2[1]);
  operator delete(v2);
  std::string::size_type v57 = (std::__shared_weak_count *)a1[2];
  if (v57 && !atomic_fetch_add(&v57->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
    std::__shared_weak_count::__release_weak(v57);
  }
  operator delete(a1);
}

void sub_2636F0FC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18, void *a19, uint64_t a20,xpc_object_t a21,CFTypeRef a22,CFTypeRef cf,void *aBlock,dispatch_object_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void ___ZZZZN11RadioModule10initializeEN8dispatch13group_sessionEEUb_EUb7_ENK3__7clEv_block_invoke(void *a1, uint64_t *a2, ctu **a3)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  uint64_t v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    uint64_t v7 = a1[4];
    uint64_t v8 = std::__shared_weak_count::lock(v4);
    xpc_object_t v18 = v8;
    if (v8)
    {
      long long v10 = v8;
      if (a1[5])
      {
        uint64_t v11 = *a2;
        if (*a2) {
          uint64_t v12 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
        }
        else {
          uint64_t v12 = 0;
        }
        if (v12)
        {
          xpc_object_t v13 = *(NSObject **)(v7 + 88);
          if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)std::string object = 138412290;
            *(void *)&xpc_object_t object[4] = v11;
            _os_log_error_impl(&dword_26368A000, v13, OS_LOG_TYPE_ERROR, "%@", object, 0xCu);
            uint64_t v11 = *a2;
          }
        }
        if (v11) {
          uint64_t v14 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
        }
        else {
          uint64_t v14 = 0;
        }
        if (v14) {
          unsigned int v15 = -534716416;
        }
        else {
          unsigned int v15 = 0;
        }
        unsigned int v16 = v15;
        ctu::cf_to_xpc((uint64_t *)object, *a3, v9);
        dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::object>(a1 + 7, &v16, (void **)object);
        xpc_release(*(xpc_object_t *)object);
      }
      if (!atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
  }
}

void sub_2636F1488(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, xpc_object_t object)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::object>(uint64_t *a1, unsigned int *a2, void **a3)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *a2;
  size_t v5 = *a3;
  xpc_object_t object = v5;
  if (v5 && MEMORY[0x263E6A240](v5) == MEMORY[0x263EF8708]) {
    xpc_retain(v5);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  (*(void (**)(uint64_t, uint64_t, xpc_object_t *))(v3 + 16))(v3, v4, &object);
  xpc_release(object);
}

void sub_2636F1558(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI11RadioModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb8_E3__8EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_(uint64_t **a1)
{
  uint64_t v64 = *MEMORY[0x263EF8340];
  uint64_t v2 = *a1;
  uint64_t v3 = (void *)**a1;
  if ((*(unsigned int (**)(void *))(*v3 + 88))(v3))
  {
    memset(&object, 170, sizeof(object));
    uint64_t v4 = (const void *)*MEMORY[0x263F267E0];
    size_t v5 = strlen((const char *)*MEMORY[0x263F267E0]);
    if (v5 >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    std::string::size_type v6 = v5;
    if (v5 >= 0x17)
    {
      uint64_t v16 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v5 | 7) != 0x17) {
        uint64_t v16 = v5 | 7;
      }
      uint64_t v17 = v16 + 1;
      p_dst = (std::string *)operator new(v16 + 1);
      __dst.__r_.__value_.__l.__size_ = v6;
      __dst.__r_.__value_.__r.__words[2] = v17 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v5;
      p_dst = &__dst;
      if (!v5)
      {
LABEL_28:
        p_dst->__r_.__value_.__s.__data_[v6] = 0;
        xpc_object_t v18 = (char *)operator new(0x28uLL);
        strcpy(v18, " rejected; ABM is shutting down ");
        xpc_object_t v19 = std::string::append(&__dst, v18, 0x20uLL);
        long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
        object.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
        *(_OWORD *)&object.__r_.__value_.__l.__data_ = v20;
        v19->__r_.__value_.__l.__size_ = 0;
        v19->__r_.__value_.__r.__words[2] = 0;
        v19->__r_.__value_.__r.__words[0] = 0;
        operator delete(v18);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__dst.__r_.__value_.__l.__data_);
          unsigned int v21 = v3[11];
          if (!os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
          {
LABEL_30:
            int v22 = v2 + 2;
            if (!v2[2])
            {
LABEL_96:
              if (SHIBYTE(object.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(object.__r_.__value_.__l.__data_);
              }
              goto LABEL_98;
            }
LABEL_46:
            __dst.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
            std::string::size_type size = HIBYTE(object.__r_.__value_.__r.__words[2]);
            if ((object.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              std::string::size_type size = object.__r_.__value_.__l.__size_;
            }
            if (size)
            {
              xpc_object_t v30 = xpc_dictionary_create(0, 0, 0);
              if (v30 || (xpc_object_t v30 = xpc_null_create()) != 0)
              {
                if (MEMORY[0x263E6A240](v30) == MEMORY[0x263EF8708])
                {
                  xpc_retain(v30);
                  xpc_object_t v31 = v30;
                }
                else
                {
                  xpc_object_t v31 = xpc_null_create();
                }
              }
              else
              {
                xpc_object_t v31 = xpc_null_create();
                xpc_object_t v30 = 0;
              }
              xpc_release(v30);
              xpc_object_t v46 = xpc_null_create();
              xpc_object_t v47 = (void *)__dst.__r_.__value_.__r.__words[0];
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v31;
              xpc_release(v47);
              xpc_release(v46);
              if ((object.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                p_std::string object = &object;
              }
              else {
                p_std::string object = (std::string *)object.__r_.__value_.__r.__words[0];
              }
              xpc_object_t v49 = xpc_string_create((const char *)p_object);
              if (!v49) {
                xpc_object_t v49 = xpc_null_create();
              }
              xpc_dictionary_set_value(v31, (const char *)*MEMORY[0x263F25EB8], v49);
              xpc_object_t v50 = xpc_null_create();
              xpc_release(v49);
              xpc_release(v50);
            }
            LODWORD(v62) = -534716415;
            dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(v22, (unsigned int *)&v62, (void **)&__dst.__r_.__value_.__l.__data_);
            xpc_release(__dst.__r_.__value_.__l.__data_);
            goto LABEL_96;
          }
        }
        else
        {
          unsigned int v21 = v3[11];
          if (!os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_30;
          }
        }
        xpc_object_t v28 = &object;
        if ((object.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          xpc_object_t v28 = (std::string *)object.__r_.__value_.__r.__words[0];
        }
        LODWORD(__dst.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = (std::string::size_type)v28;
        _os_log_impl(&dword_26368A000, v21, OS_LOG_TYPE_DEFAULT, "#I %s", (uint8_t *)&__dst, 0xCu);
        int v22 = v2 + 2;
        if (!v2[2]) {
          goto LABEL_96;
        }
        goto LABEL_46;
      }
    }
    memmove(p_dst, v4, v6);
    goto LABEL_28;
  }
  uint64_t v8 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  uint64_t v9 = off_26A99F170;
  if (!off_26A99F170)
  {
    CommandDriverFactory::create_default_global((uint64_t *)&object, v8);
    long long v10 = *(_OWORD *)&object.__r_.__value_.__l.__data_;
    *(_OWORD *)&object.__r_.__value_.__l.__data_ = 0uLL;
    uint64_t v11 = (std::__shared_weak_count *)*(&off_26A99F170 + 1);
    off_26A99F170 = v10;
    if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    uint64_t v12 = (std::__shared_weak_count *)object.__r_.__value_.__l.__size_;
    if (object.__r_.__value_.__l.__size_
      && !atomic_fetch_add((atomic_ullong *volatile)(object.__r_.__value_.__l.__size_ + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
    uint64_t v9 = off_26A99F170;
  }
  xpc_object_t v13 = (std::__shared_weak_count *)*(&off_26A99F170 + 1);
  if (*(&off_26A99F170 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_26A99F170 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)v9 + 16))(&__dst, v9);
  if (__dst.__r_.__value_.__l.__size_)
  {
    uint64_t v14 = std::__shared_weak_count::lock((std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_);
    if (v14) {
      std::string::size_type v15 = __dst.__r_.__value_.__r.__words[0];
    }
    else {
      std::string::size_type v15 = 0;
    }
    if (__dst.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_);
    }
    if (!v13)
    {
LABEL_34:
      if (v15) {
        goto LABEL_35;
      }
LABEL_54:
      int v32 = v3[11];
      if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
      {
        LOWORD(object.__r_.__value_.__l.__data_) = 0;
        _os_log_error_impl(&dword_26368A000, v32, OS_LOG_TYPE_ERROR, "No radio driver", (uint8_t *)&object, 2u);
      }
      xpc_object_t v33 = xpc_null_create();
      uint64_t v34 = v2[2];
      object.__r_.__value_.__r.__words[0] = (std::string::size_type)v33;
      xpc_object_t v35 = xpc_null_create();
      (*(void (**)(uint64_t, uint64_t, std::string *))(v34 + 16))(v34, 3760250880, &object);
      xpc_release(object.__r_.__value_.__l.__data_);
      xpc_release(v35);
      goto LABEL_84;
    }
  }
  else
  {
    uint64_t v14 = 0;
    std::string::size_type v15 = 0;
    if (!v13) {
      goto LABEL_34;
    }
  }
  if (atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_34;
  }
  ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
  std::__shared_weak_count::__release_weak(v13);
  if (!v15) {
    goto LABEL_54;
  }
LABEL_35:
  memset(&object, 0, sizeof(object));
  ctu::cf::assign();
  std::string __dst = object;
  if ((object.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    xpc_object_t v23 = &__dst;
  }
  else {
    xpc_object_t v23 = (std::string *)object.__r_.__value_.__r.__words[0];
  }
  xpc_object_t value = xpc_dictionary_get_value((xpc_object_t)v2[1], (const char *)v23);
  xpc_object_t v25 = value;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__dst.__r_.__value_.__l.__data_);
    if (v25) {
      goto LABEL_40;
    }
LABEL_58:
    xpc_object_t v36 = v3[11];
    if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
    {
      LOWORD(object.__r_.__value_.__l.__data_) = 0;
      _os_log_error_impl(&dword_26368A000, v36, OS_LOG_TYPE_ERROR, "Ticket was not provided", (uint8_t *)&object, 2u);
    }
    xpc_object_t v37 = xpc_null_create();
    uint64_t v38 = v2[2];
    object.__r_.__value_.__r.__words[0] = (std::string::size_type)v37;
    xpc_object_t v39 = xpc_null_create();
    (*(void (**)(uint64_t, uint64_t, std::string *))(v38 + 16))(v38, 3760250882, &object);
    xpc_release(object.__r_.__value_.__l.__data_);
    xpc_release(v39);
    goto LABEL_84;
  }
  if (!value) {
    goto LABEL_58;
  }
LABEL_40:
  xpc_object_t v26 = (void *)v2[1];
  xpc_object_t v60 = v26;
  if (v26) {
    xpc_retain(v26);
  }
  else {
    xpc_object_t v60 = xpc_null_create();
  }
  xpc::bridge((uint64_t *)&cf, (xpc *)&v60, v27);
  CFTypeRef v40 = cf;
  if (cf && (CFTypeID v41 = CFGetTypeID(cf), v41 == CFDictionaryGetTypeID()))
  {
    CFTypeRef v62 = v40;
    CFRetain(v40);
  }
  else
  {
    CFTypeRef v62 = 0;
  }
  object.__r_.__value_.__r.__words[0] = MEMORY[0x263EF8330];
  object.__r_.__value_.__l.__size_ = 1174405120;
  object.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZZZZN11RadioModule10initializeEN8dispatch13group_sessionEEUb_EUb8_ENK3__8clEv_block_invoke;
  uint64_t v55 = &__block_descriptor_tmp_264;
  size_t v56 = v3;
  uint64_t v57 = v2[3];
  xpc_object_t v42 = (std::__shared_weak_count *)v2[4];
  size_t v58 = v42;
  if (v42) {
    atomic_fetch_add_explicit(&v42->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  xpc_object_t v43 = (void *)v2[2];
  if (v43) {
    xpc_object_t v43 = _Block_copy(v43);
  }
  aBlocunint64_t k = v43;
  uint64_t v44 = _Block_copy(&object);
  uint64_t v45 = v3[17];
  if (v45) {
    dispatch_retain(v45);
  }
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v44;
  __dst.__r_.__value_.__l.__size_ = (std::string::size_type)v45;
  (*(void (**)(std::string::size_type, CFTypeRef *, std::string *))(*(void *)v15 + 240))(v15, &v62, &__dst);
  if (__dst.__r_.__value_.__l.__size_) {
    dispatch_release((dispatch_object_t)__dst.__r_.__value_.__l.__size_);
  }
  if (__dst.__r_.__value_.__r.__words[0]) {
    _Block_release(__dst.__r_.__value_.__l.__data_);
  }
  if (v62) {
    CFRelease(v62);
  }
  if (cf) {
    CFRelease(cf);
  }
  xpc_release(v60);
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v58) {
    std::__shared_weak_count::__release_weak(v58);
  }
LABEL_84:
  if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
LABEL_98:
  CFBooleanRef v51 = (std::__shared_weak_count *)v2[4];
  if (v51) {
    std::__shared_weak_count::__release_weak(v51);
  }
  CFTypeRef v52 = (const void *)v2[2];
  if (v52) {
    _Block_release(v52);
  }
  xpc_release((xpc_object_t)v2[1]);
  operator delete(v2);
  xpc_object_t v53 = (std::__shared_weak_count *)a1[2];
  if (v53 && !atomic_fetch_add(&v53->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
    std::__shared_weak_count::__release_weak(v53);
  }
  operator delete(a1);
}

void sub_2636F1E00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18, void *a19, uint64_t a20,xpc_object_t a21,CFTypeRef a22,CFTypeRef cf,void *aBlock,dispatch_object_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void ___ZZZZN11RadioModule10initializeEN8dispatch13group_sessionEEUb_EUb8_ENK3__8clEv_block_invoke(void *a1, uint64_t *a2)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  uint64_t v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    uint64_t v5 = a1[4];
    std::string::size_type v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      uint64_t v7 = v6;
      if (a1[5])
      {
        uint64_t v8 = *a2;
        if (*a2) {
          uint64_t v9 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
        }
        else {
          uint64_t v9 = 0;
        }
        if (v9)
        {
          long long v10 = *(NSObject **)(v5 + 88);
          if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)std::string object = 138412290;
            *(void *)&xpc_object_t object[4] = v8;
            _os_log_error_impl(&dword_26368A000, v10, OS_LOG_TYPE_ERROR, "%@", object, 0xCu);
            uint64_t v8 = *a2;
          }
        }
        if (v8) {
          uint64_t v11 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
        }
        else {
          uint64_t v11 = 0;
        }
        if (v11) {
          uint64_t v12 = 3760250880;
        }
        else {
          uint64_t v12 = 0;
        }
        xpc_object_t v13 = xpc_null_create();
        uint64_t v14 = a1[7];
        *(void *)std::string object = v13;
        xpc_object_t v15 = xpc_null_create();
        (*(void (**)(uint64_t, uint64_t, unsigned char *))(v14 + 16))(v14, v12, object);
        xpc_release(*(xpc_object_t *)object);
        xpc_release(v15);
      }
      if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_2636F22B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, xpc_object_t object)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI11RadioModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb9_E3__9EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_(uint64_t **a1)
{
  uint64_t v44 = *MEMORY[0x263EF8340];
  uint64_t v2 = *a1;
  uint64_t v3 = (void *)**a1;
  if ((*(unsigned int (**)(void *))(*v3 + 88))(v3))
  {
    memset(object, 170, 24);
    uint64_t v4 = (const void *)*MEMORY[0x263F26338];
    size_t v5 = strlen((const char *)*MEMORY[0x263F26338]);
    if (v5 >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    std::string::size_type v6 = v5;
    if (v5 >= 0x17)
    {
      uint64_t v16 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v5 | 7) != 0x17) {
        uint64_t v16 = v5 | 7;
      }
      uint64_t v17 = v16 + 1;
      p_dst = (std::string *)operator new(v16 + 1);
      __dst.__r_.__value_.__l.__size_ = v6;
      __dst.__r_.__value_.__r.__words[2] = v17 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v5;
      p_dst = &__dst;
      if (!v5)
      {
LABEL_28:
        p_dst->__r_.__value_.__s.__data_[v6] = 0;
        xpc_object_t v18 = (char *)operator new(0x28uLL);
        strcpy(v18, " rejected; ABM is shutting down ");
        xpc_object_t v19 = std::string::append(&__dst, v18, 0x20uLL);
        long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
        object[2] = (xpc_object_t)v19->__r_.__value_.__r.__words[2];
        *(_OWORD *)std::string object = v20;
        v19->__r_.__value_.__l.__size_ = 0;
        v19->__r_.__value_.__r.__words[2] = 0;
        v19->__r_.__value_.__r.__words[0] = 0;
        operator delete(v18);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__dst.__r_.__value_.__l.__data_);
          unsigned int v21 = v3[11];
          if (!os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
          {
LABEL_30:
            int v22 = v2 + 1;
            if (!v2[1])
            {
LABEL_61:
              if (SHIBYTE(object[2]) < 0) {
                operator delete(object[0]);
              }
              goto LABEL_63;
            }
LABEL_40:
            __dst.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
            xpc_object_t v27 = (xpc_object_t)HIBYTE(object[2]);
            if (SHIBYTE(object[2]) < 0) {
              xpc_object_t v27 = object[1];
            }
            if (v27)
            {
              xpc_object_t v28 = xpc_dictionary_create(0, 0, 0);
              if (v28 || (xpc_object_t v28 = xpc_null_create()) != 0)
              {
                if (MEMORY[0x263E6A240](v28) == MEMORY[0x263EF8708])
                {
                  xpc_retain(v28);
                  xpc_object_t v29 = v28;
                }
                else
                {
                  xpc_object_t v29 = xpc_null_create();
                }
              }
              else
              {
                xpc_object_t v29 = xpc_null_create();
                xpc_object_t v28 = 0;
              }
              xpc_release(v28);
              xpc_object_t v33 = xpc_null_create();
              uint64_t v34 = (void *)__dst.__r_.__value_.__r.__words[0];
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v29;
              xpc_release(v34);
              xpc_release(v33);
              if (SHIBYTE(object[2]) >= 0) {
                xpc_object_t v35 = object;
              }
              else {
                xpc_object_t v35 = (xpc_object_t *)object[0];
              }
              xpc_object_t v36 = xpc_string_create((const char *)v35);
              if (!v36) {
                xpc_object_t v36 = xpc_null_create();
              }
              xpc_dictionary_set_value(v29, (const char *)*MEMORY[0x263F25EB8], v36);
              xpc_object_t v37 = xpc_null_create();
              xpc_release(v36);
              xpc_release(v37);
            }
            unsigned int v41 = -534716415;
            dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(v22, &v41, (void **)&__dst.__r_.__value_.__l.__data_);
            xpc_release(__dst.__r_.__value_.__l.__data_);
            goto LABEL_61;
          }
        }
        else
        {
          unsigned int v21 = v3[11];
          if (!os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_30;
          }
        }
        xpc_object_t v26 = object;
        if (SHIBYTE(object[2]) < 0) {
          xpc_object_t v26 = (xpc_object_t *)object[0];
        }
        LODWORD(__dst.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = (std::string::size_type)v26;
        _os_log_impl(&dword_26368A000, v21, OS_LOG_TYPE_DEFAULT, "#I %s", (uint8_t *)&__dst, 0xCu);
        int v22 = v2 + 1;
        if (!v2[1]) {
          goto LABEL_61;
        }
        goto LABEL_40;
      }
    }
    memmove(p_dst, v4, v6);
    goto LABEL_28;
  }
  uint64_t v8 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  uint64_t v9 = off_26A99F170;
  if (!off_26A99F170)
  {
    CommandDriverFactory::create_default_global((uint64_t *)object, v8);
    long long v10 = *(_OWORD *)object;
    object[0] = 0;
    object[1] = 0;
    uint64_t v11 = (std::__shared_weak_count *)*(&off_26A99F170 + 1);
    off_26A99F170 = v10;
    if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    uint64_t v12 = (std::__shared_weak_count *)object[1];
    if (object[1] && !atomic_fetch_add((atomic_ullong *volatile)object[1] + 1, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
    uint64_t v9 = off_26A99F170;
  }
  xpc_object_t v13 = (std::__shared_weak_count *)*(&off_26A99F170 + 1);
  if (*(&off_26A99F170 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_26A99F170 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)v9 + 16))(&__dst, v9);
  if (__dst.__r_.__value_.__l.__size_)
  {
    uint64_t v14 = std::__shared_weak_count::lock((std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_);
    if (v14) {
      std::string::size_type v15 = __dst.__r_.__value_.__r.__words[0];
    }
    else {
      std::string::size_type v15 = 0;
    }
    if (__dst.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_);
    }
    if (!v13) {
      goto LABEL_34;
    }
  }
  else
  {
    uint64_t v14 = 0;
    std::string::size_type v15 = 0;
    if (!v13) {
      goto LABEL_34;
    }
  }
  if (!atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
    if (v15) {
      goto LABEL_35;
    }
LABEL_48:
    xpc_object_t v30 = xpc_null_create();
    uint64_t v31 = v2[1];
    object[0] = v30;
    xpc_object_t v32 = xpc_null_create();
    (*(void (**)(uint64_t, uint64_t, xpc_object_t *))(v31 + 16))(v31, 3760250880, object);
    xpc_release(object[0]);
    xpc_release(v32);
    goto LABEL_49;
  }
LABEL_34:
  if (!v15) {
    goto LABEL_48;
  }
LABEL_35:
  (*(void (**)(std::string::size_type, void))(*(void *)v15 + 312))(v15, 0);
  (*(void (**)(std::string::size_type, uint64_t))(*(void *)v15 + 312))(v15, 1);
  (*(void (**)(std::string::size_type))(*(void *)v15 + 320))(v15);
  xpc_object_t v23 = xpc_null_create();
  uint64_t v24 = v2[1];
  object[0] = v23;
  xpc_object_t v25 = xpc_null_create();
  (*(void (**)(uint64_t, void, xpc_object_t *))(v24 + 16))(v24, 0, object);
  xpc_release(object[0]);
  xpc_release(v25);
LABEL_49:
  if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
LABEL_63:
  uint64_t v38 = (std::__shared_weak_count *)v2[3];
  if (v38) {
    std::__shared_weak_count::__release_weak(v38);
  }
  xpc_object_t v39 = (const void *)v2[1];
  if (v39) {
    _Block_release(v39);
  }
  operator delete(v2);
  CFTypeRef v40 = (std::__shared_weak_count *)a1[2];
  if (v40 && !atomic_fetch_add(&v40->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
    std::__shared_weak_count::__release_weak(v40);
  }
  operator delete(a1);
}

void sub_2636F29BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, xpc_object_t object, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, xpc_object_t __p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI11RadioModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb10_E4__10EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_(uint64_t **a1)
{
  uint64_t v56 = *MEMORY[0x263EF8340];
  uint64_t v2 = *a1;
  uint64_t v3 = (void *)**a1;
  if ((*(unsigned int (**)(void *))(*v3 + 88))(v3))
  {
    memset(aBlock, 170, sizeof(aBlock));
    uint64_t v4 = (const void *)*MEMORY[0x263F26198];
    size_t v5 = strlen((const char *)*MEMORY[0x263F26198]);
    if (v5 >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    std::string::size_type v6 = v5;
    if (v5 >= 0x17)
    {
      uint64_t v16 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v5 | 7) != 0x17) {
        uint64_t v16 = v5 | 7;
      }
      uint64_t v17 = v16 + 1;
      p_dst = (std::string *)operator new(v16 + 1);
      __dst.__r_.__value_.__l.__size_ = v6;
      __dst.__r_.__value_.__r.__words[2] = v17 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v5;
      p_dst = &__dst;
      if (!v5)
      {
LABEL_28:
        p_dst->__r_.__value_.__s.__data_[v6] = 0;
        xpc_object_t v18 = (char *)operator new(0x28uLL);
        strcpy(v18, " rejected; ABM is shutting down ");
        xpc_object_t v19 = std::string::append(&__dst, v18, 0x20uLL);
        long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
        *(void *)&aBlock[16] = *((void *)&v19->__r_.__value_.__l + 2);
        *(_OWORD *)aBlocunint64_t k = v20;
        v19->__r_.__value_.__l.__size_ = 0;
        v19->__r_.__value_.__r.__words[2] = 0;
        v19->__r_.__value_.__r.__words[0] = 0;
        operator delete(v18);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__dst.__r_.__value_.__l.__data_);
          unsigned int v21 = v3[11];
          if (!os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
          {
LABEL_30:
            int v22 = v2 + 1;
            if (!v2[1])
            {
LABEL_85:
              if ((aBlock[23] & 0x80000000) != 0) {
                operator delete(*(void **)aBlock);
              }
              goto LABEL_87;
            }
LABEL_47:
            __dst.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
            uint64_t v30 = aBlock[23];
            if (aBlock[23] < 0) {
              uint64_t v30 = *(void *)&aBlock[8];
            }
            if (v30)
            {
              xpc_object_t v31 = xpc_dictionary_create(0, 0, 0);
              if (v31 || (xpc_object_t v31 = xpc_null_create()) != 0)
              {
                if (MEMORY[0x263E6A240](v31) == MEMORY[0x263EF8708])
                {
                  xpc_retain(v31);
                  xpc_object_t v32 = v31;
                }
                else
                {
                  xpc_object_t v32 = xpc_null_create();
                }
              }
              else
              {
                xpc_object_t v32 = xpc_null_create();
                xpc_object_t v31 = 0;
              }
              xpc_release(v31);
              xpc_object_t v38 = xpc_null_create();
              xpc_object_t v39 = (void *)__dst.__r_.__value_.__r.__words[0];
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v32;
              xpc_release(v39);
              xpc_release(v38);
              if (aBlock[23] >= 0) {
                CFTypeRef v40 = aBlock;
              }
              else {
                CFTypeRef v40 = *(const char **)aBlock;
              }
              xpc_object_t v41 = xpc_string_create(v40);
              if (!v41) {
                xpc_object_t v41 = xpc_null_create();
              }
              xpc_dictionary_set_value(v32, (const char *)*MEMORY[0x263F25EB8], v41);
              xpc_object_t v42 = xpc_null_create();
              xpc_release(v41);
              xpc_release(v42);
            }
            LODWORD(v48) = -534716415;
            dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(v22, (unsigned int *)&v48, (void **)&__dst.__r_.__value_.__l.__data_);
            xpc_release(__dst.__r_.__value_.__l.__data_);
            goto LABEL_85;
          }
        }
        else
        {
          unsigned int v21 = v3[11];
          if (!os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_30;
          }
        }
        xpc_object_t v29 = aBlock;
        if (aBlock[23] < 0) {
          xpc_object_t v29 = *(unsigned char **)aBlock;
        }
        LODWORD(__dst.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = (std::string::size_type)v29;
        _os_log_impl(&dword_26368A000, v21, OS_LOG_TYPE_DEFAULT, "#I %s", (uint8_t *)&__dst, 0xCu);
        int v22 = v2 + 1;
        if (!v2[1]) {
          goto LABEL_85;
        }
        goto LABEL_47;
      }
    }
    memmove(p_dst, v4, v6);
    goto LABEL_28;
  }
  uint64_t v8 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  uint64_t v9 = off_26A99F170;
  if (!off_26A99F170)
  {
    CommandDriverFactory::create_default_global((uint64_t *)aBlock, v8);
    long long v10 = *(_OWORD *)aBlock;
    *(_OWORD *)aBlocunint64_t k = 0uLL;
    uint64_t v11 = (std::__shared_weak_count *)*(&off_26A99F170 + 1);
    off_26A99F170 = v10;
    if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    uint64_t v12 = *(std::__shared_weak_count **)&aBlock[8];
    if (*(void *)&aBlock[8]
      && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&aBlock[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
    uint64_t v9 = off_26A99F170;
  }
  xpc_object_t v13 = (std::__shared_weak_count *)*(&off_26A99F170 + 1);
  if (*(&off_26A99F170 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_26A99F170 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)v9 + 16))(&__dst, v9);
  if (__dst.__r_.__value_.__l.__size_)
  {
    uint64_t v14 = std::__shared_weak_count::lock((std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_);
    if (v14) {
      std::string::size_type v15 = __dst.__r_.__value_.__r.__words[0];
    }
    else {
      std::string::size_type v15 = 0;
    }
    if (__dst.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_);
    }
    if (!v13) {
      goto LABEL_34;
    }
  }
  else
  {
    uint64_t v14 = 0;
    std::string::size_type v15 = 0;
    if (!v13) {
      goto LABEL_34;
    }
  }
  if (!atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
    if (v15) {
      goto LABEL_35;
    }
    goto LABEL_55;
  }
LABEL_34:
  if (v15)
  {
LABEL_35:
    *(void *)aBlocunint64_t k = MEMORY[0x263EF8330];
    *(void *)&aBlock[8] = 1174405120;
    *(void *)&aBlock[16] = ___ZZZZN11RadioModule10initializeEN8dispatch13group_sessionEEUb_EUb10_ENK4__10clEv_block_invoke;
    xpc_object_t v50 = &__block_descriptor_tmp_267;
    CFBooleanRef v51 = v3;
    uint64_t v52 = v2[2];
    xpc_object_t v23 = (std::__shared_weak_count *)v2[3];
    xpc_object_t v53 = v23;
    if (v23) {
      atomic_fetch_add_explicit(&v23->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v24 = (void *)v2[1];
    if (v24) {
      uint64_t v24 = _Block_copy(v24);
    }
    xpc_object_t v54 = v24;
    xpc_object_t v25 = _Block_copy(aBlock);
    xpc_object_t v26 = v3[17];
    if (v26) {
      dispatch_retain(v26);
    }
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v25;
    __dst.__r_.__value_.__l.__size_ = (std::string::size_type)v26;
    xpc_object_t v27 = (void *)v2[4];
    xpc_object_t object = v27;
    if (v27) {
      xpc_retain(v27);
    }
    else {
      xpc_object_t object = xpc_null_create();
    }
    xpc::bridge((uint64_t *)&cf, (xpc *)&object, v28);
    CFTypeRef v36 = cf;
    if (cf && (CFTypeID v37 = CFGetTypeID(cf), v37 == CFDictionaryGetTypeID()))
    {
      CFTypeRef v48 = v36;
      CFRetain(v36);
    }
    else
    {
      CFTypeRef v48 = 0;
    }
    (*(void (**)(std::string::size_type, std::string *, CFTypeRef *))(*(void *)v15 + 344))(v15, &__dst, &v48);
    if (v48) {
      CFRelease(v48);
    }
    if (cf) {
      CFRelease(cf);
    }
    xpc_release(object);
    if (__dst.__r_.__value_.__l.__size_) {
      dispatch_release((dispatch_object_t)__dst.__r_.__value_.__l.__size_);
    }
    if (__dst.__r_.__value_.__r.__words[0]) {
      _Block_release(__dst.__r_.__value_.__l.__data_);
    }
    if (v54) {
      _Block_release(v54);
    }
    if (v53) {
      std::__shared_weak_count::__release_weak(v53);
    }
    goto LABEL_73;
  }
LABEL_55:
  xpc_object_t v33 = xpc_null_create();
  uint64_t v34 = v2[1];
  *(void *)aBlocunint64_t k = v33;
  xpc_object_t v35 = xpc_null_create();
  (*(void (**)(uint64_t, uint64_t, unsigned char *))(v34 + 16))(v34, 3760250880, aBlock);
  xpc_release(*(xpc_object_t *)aBlock);
  xpc_release(v35);
LABEL_73:
  if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
LABEL_87:
  xpc_release((xpc_object_t)v2[4]);
  v2[4] = 0;
  xpc_object_t v43 = (std::__shared_weak_count *)v2[3];
  if (v43) {
    std::__shared_weak_count::__release_weak(v43);
  }
  uint64_t v44 = (const void *)v2[1];
  if (v44) {
    _Block_release(v44);
  }
  operator delete(v2);
  uint64_t v45 = (std::__shared_weak_count *)a1[2];
  if (v45 && !atomic_fetch_add(&v45->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
    std::__shared_weak_count::__release_weak(v45);
  }
  operator delete(a1);
}

void sub_2636F3328(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t a10, CFTypeRef a11, CFTypeRef cf, xpc_object_t object, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,std::__shared_weak_count *a22,void *a23,xpc_object_t aBlock,dispatch_object_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void ___ZZZZN11RadioModule10initializeEN8dispatch13group_sessionEEUb_EUb10_ENK4__10clEv_block_invoke(void *a1, uint64_t *a2, ctu **a3)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  uint64_t v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    uint64_t v7 = a1[4];
    uint64_t v8 = std::__shared_weak_count::lock(v4);
    unsigned int v21 = v8;
    if (v8)
    {
      long long v10 = v8;
      if (a1[5])
      {
        uint64_t v11 = *a2;
        if (*a2) {
          uint64_t v12 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
        }
        else {
          uint64_t v12 = 0;
        }
        if (v12)
        {
          xpc_object_t v13 = *(NSObject **)(v7 + 88);
          if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)xpc_object_t object = 138412290;
            *(void *)&xpc_object_t object[4] = v11;
            _os_log_error_impl(&dword_26368A000, v13, OS_LOG_TYPE_ERROR, "%@", object, 0xCu);
          }
        }
        else
        {
          uint64_t v16 = *a3;
          if (*a3) {
            uint64_t v17 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
          }
          else {
            uint64_t v17 = 0;
          }
          if (v17)
          {
            xpc_object_t v18 = *(NSObject **)(v7 + 88);
            if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)xpc_object_t object = 138412290;
              *(void *)&xpc_object_t object[4] = v16;
              _os_log_impl(&dword_26368A000, v18, OS_LOG_TYPE_DEFAULT, "#I Get Antenna Port Info: %@", object, 0xCu);
            }
          }
        }
        if (*a2) {
          uint64_t v14 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
        }
        else {
          uint64_t v14 = 0;
        }
        if (v14) {
          unsigned int v15 = -534716416;
        }
        else {
          unsigned int v15 = 0;
        }
        unsigned int v19 = v15;
        ctu::cf_to_xpc((uint64_t *)object, *a3, v9);
        dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::object>(a1 + 7, &v19, (void **)object);
        xpc_release(*(xpc_object_t *)object);
      }
      if (!atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
  }
}

void sub_2636F37D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, xpc_object_t object)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI11RadioModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb11_E4__11EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_(void *a1)
{
  uint64_t v53 = *MEMORY[0x263EF8340];
  uint64_t v2 = (void *)*a1;
  uint64_t v3 = *(void **)*a1;
  if ((*(unsigned int (**)(void *))(*v3 + 88))(v3))
  {
    memset(object, 170, 24);
    uint64_t v4 = (const void *)*MEMORY[0x263F261A8];
    size_t v5 = strlen((const char *)*MEMORY[0x263F261A8]);
    if (v5 >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    std::string::size_type v6 = v5;
    if (v5 >= 0x17)
    {
      uint64_t v16 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v5 | 7) != 0x17) {
        uint64_t v16 = v5 | 7;
      }
      uint64_t v17 = v16 + 1;
      p_dst = (std::string *)operator new(v16 + 1);
      __dst.__r_.__value_.__l.__size_ = v6;
      __dst.__r_.__value_.__r.__words[2] = v17 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v5;
      p_dst = &__dst;
      if (!v5)
      {
LABEL_28:
        p_dst->__r_.__value_.__s.__data_[v6] = 0;
        xpc_object_t v18 = (char *)operator new(0x28uLL);
        strcpy(v18, " rejected; ABM is shutting down ");
        unsigned int v19 = std::string::append(&__dst, v18, 0x20uLL);
        long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
        object[2] = (xpc_object_t)v19->__r_.__value_.__r.__words[2];
        *(_OWORD *)xpc_object_t object = v20;
        v19->__r_.__value_.__l.__size_ = 0;
        v19->__r_.__value_.__r.__words[2] = 0;
        v19->__r_.__value_.__r.__words[0] = 0;
        operator delete(v18);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__dst.__r_.__value_.__l.__data_);
          unsigned int v21 = v3[11];
          if (!os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
          {
LABEL_30:
            int v22 = v2 + 1;
            if (!v2[1])
            {
LABEL_85:
              if (SHIBYTE(object[2]) < 0) {
                operator delete(object[0]);
              }
              goto LABEL_87;
            }
LABEL_41:
            __dst.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
            xpc_object_t v26 = (xpc_object_t)HIBYTE(object[2]);
            if (SHIBYTE(object[2]) < 0) {
              xpc_object_t v26 = object[1];
            }
            if (v26)
            {
              xpc_object_t v27 = xpc_dictionary_create(0, 0, 0);
              if (v27 || (xpc_object_t v27 = xpc_null_create()) != 0)
              {
                if (MEMORY[0x263E6A240](v27) == MEMORY[0x263EF8708])
                {
                  xpc_retain(v27);
                  xpc_object_t v28 = v27;
                }
                else
                {
                  xpc_object_t v28 = xpc_null_create();
                }
              }
              else
              {
                xpc_object_t v28 = xpc_null_create();
                xpc_object_t v27 = 0;
              }
              xpc_release(v27);
              xpc_object_t v38 = xpc_null_create();
              xpc_object_t v39 = (void *)__dst.__r_.__value_.__r.__words[0];
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v28;
              xpc_release(v39);
              xpc_release(v38);
              if (SHIBYTE(object[2]) >= 0) {
                CFTypeRef v40 = object;
              }
              else {
                CFTypeRef v40 = (xpc_object_t *)object[0];
              }
              xpc_object_t v41 = xpc_string_create((const char *)v40);
              if (!v41) {
                xpc_object_t v41 = xpc_null_create();
              }
              xpc_dictionary_set_value(v28, (const char *)*MEMORY[0x263F25EB8], v41);
              xpc_object_t v42 = xpc_null_create();
              xpc_release(v41);
              xpc_release(v42);
            }
            LODWORD(v51) = -534716415;
            dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(v22, (unsigned int *)&v51, (void **)&__dst.__r_.__value_.__l.__data_);
            xpc_release(__dst.__r_.__value_.__l.__data_);
            goto LABEL_85;
          }
        }
        else
        {
          unsigned int v21 = v3[11];
          if (!os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_30;
          }
        }
        xpc_object_t v25 = object;
        if (SHIBYTE(object[2]) < 0) {
          xpc_object_t v25 = (xpc_object_t *)object[0];
        }
        LODWORD(__dst.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = (std::string::size_type)v25;
        _os_log_impl(&dword_26368A000, v21, OS_LOG_TYPE_DEFAULT, "#I %s", (uint8_t *)&__dst, 0xCu);
        int v22 = v2 + 1;
        if (!v2[1]) {
          goto LABEL_85;
        }
        goto LABEL_41;
      }
    }
    memmove(p_dst, v4, v6);
    goto LABEL_28;
  }
  uint64_t v8 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  uint64_t v9 = off_26A99F170;
  if (!off_26A99F170)
  {
    CommandDriverFactory::create_default_global((uint64_t *)object, v8);
    long long v10 = *(_OWORD *)object;
    object[0] = 0;
    object[1] = 0;
    uint64_t v11 = (std::__shared_weak_count *)*(&off_26A99F170 + 1);
    off_26A99F170 = v10;
    if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    uint64_t v12 = (std::__shared_weak_count *)object[1];
    if (object[1] && !atomic_fetch_add((atomic_ullong *volatile)object[1] + 1, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
    uint64_t v9 = off_26A99F170;
  }
  xpc_object_t v13 = (std::__shared_weak_count *)*(&off_26A99F170 + 1);
  if (*(&off_26A99F170 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_26A99F170 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)v9 + 16))(&__dst, v9);
  if (__dst.__r_.__value_.__l.__size_)
  {
    uint64_t v14 = std::__shared_weak_count::lock((std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_);
    if (v14) {
      std::string::size_type v15 = __dst.__r_.__value_.__r.__words[0];
    }
    else {
      std::string::size_type v15 = 0;
    }
    if (__dst.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_);
    }
    if (!v13) {
      goto LABEL_34;
    }
  }
  else
  {
    uint64_t v14 = 0;
    std::string::size_type v15 = 0;
    if (!v13) {
      goto LABEL_34;
    }
  }
  if (!atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
    if (v15) {
      goto LABEL_35;
    }
    goto LABEL_49;
  }
LABEL_34:
  if (v15)
  {
LABEL_35:
    uint64_t v23 = (void *)v2[4];
    xpc_object_t v49 = v23;
    if (v23) {
      xpc_retain(v23);
    }
    else {
      xpc_object_t v49 = xpc_null_create();
    }
    xpc::bridge((uint64_t *)&cf, (xpc *)&v49, v24);
    CFTypeRef v32 = cf;
    if (cf && (CFTypeID v33 = CFGetTypeID(cf), v33 == CFDictionaryGetTypeID()))
    {
      CFTypeRef v51 = v32;
      CFRetain(v32);
    }
    else
    {
      CFTypeRef v51 = 0;
    }
    object[0] = (xpc_object_t)MEMORY[0x263EF8330];
    object[1] = (xpc_object_t)1174405120;
    object[2] = ___ZZZZN11RadioModule10initializeEN8dispatch13group_sessionEEUb_EUb11_ENK4__11clEv_block_invoke;
    xpc_object_t object[3] = &__block_descriptor_tmp_270;
    xpc_object_t object[4] = v3;
    object[5] = *((xpc_object_t *)v2 + 2);
    uint64_t v34 = (std::__shared_weak_count *)v2[3];
    xpc_object_t v47 = v34;
    if (v34) {
      atomic_fetch_add_explicit(&v34->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    xpc_object_t v35 = (void *)v2[1];
    if (v35) {
      xpc_object_t v35 = _Block_copy(v35);
    }
    aBlocunint64_t k = v35;
    CFTypeRef v36 = _Block_copy(object);
    CFTypeID v37 = v3[17];
    if (v37) {
      dispatch_retain(v37);
    }
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v36;
    __dst.__r_.__value_.__l.__size_ = (std::string::size_type)v37;
    (*(void (**)(std::string::size_type, CFTypeRef *, std::string *))(*(void *)v15 + 352))(v15, &v51, &__dst);
    if (__dst.__r_.__value_.__l.__size_) {
      dispatch_release((dispatch_object_t)__dst.__r_.__value_.__l.__size_);
    }
    if (__dst.__r_.__value_.__r.__words[0]) {
      _Block_release(__dst.__r_.__value_.__l.__data_);
    }
    if (v51) {
      CFRelease(v51);
    }
    if (cf) {
      CFRelease(cf);
    }
    xpc_release(v49);
    if (aBlock) {
      _Block_release(aBlock);
    }
    if (v47) {
      std::__shared_weak_count::__release_weak(v47);
    }
    goto LABEL_73;
  }
LABEL_49:
  xpc_object_t v29 = xpc_null_create();
  uint64_t v30 = v2[1];
  object[0] = v29;
  xpc_object_t v31 = xpc_null_create();
  (*(void (**)(uint64_t, uint64_t, xpc_object_t *))(v30 + 16))(v30, 3760250880, object);
  xpc_release(object[0]);
  xpc_release(v31);
LABEL_73:
  if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
LABEL_87:
  xpc_release((xpc_object_t)v2[4]);
  v2[4] = 0;
  xpc_object_t v43 = (std::__shared_weak_count *)v2[3];
  if (v43) {
    std::__shared_weak_count::__release_weak(v43);
  }
  uint64_t v44 = (const void *)v2[1];
  if (v44) {
    _Block_release(v44);
  }
  operator delete(v2);
  uint64_t v45 = (std::__shared_weak_count *)a1[2];
  if (v45 && !atomic_fetch_add(&v45->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
    std::__shared_weak_count::__release_weak(v45);
  }
  operator delete(a1);
}

void sub_2636F3F80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18, void *a19, uint64_t a20,xpc_object_t a21,CFTypeRef a22,CFTypeRef cf,xpc_object_t aBlock,dispatch_object_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void ___ZZZZN11RadioModule10initializeEN8dispatch13group_sessionEEUb_EUb11_ENK4__11clEv_block_invoke(void *a1, uint64_t *a2)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  uint64_t v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    uint64_t v5 = a1[4];
    std::string::size_type v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      uint64_t v7 = v6;
      if (a1[5])
      {
        uint64_t v8 = *a2;
        if (*a2) {
          uint64_t v9 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
        }
        else {
          uint64_t v9 = 0;
        }
        if (v9)
        {
          long long v10 = *(NSObject **)(v5 + 88);
          if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)xpc_object_t object = 138412290;
            *(void *)&xpc_object_t object[4] = v8;
            _os_log_error_impl(&dword_26368A000, v10, OS_LOG_TYPE_ERROR, "%@", object, 0xCu);
            uint64_t v8 = *a2;
          }
        }
        if (v8) {
          uint64_t v11 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
        }
        else {
          uint64_t v11 = 0;
        }
        if (v11) {
          uint64_t v12 = 3760250880;
        }
        else {
          uint64_t v12 = 0;
        }
        xpc_object_t v13 = xpc_null_create();
        uint64_t v14 = a1[7];
        *(void *)xpc_object_t object = v13;
        xpc_object_t v15 = xpc_null_create();
        (*(void (**)(uint64_t, uint64_t, unsigned char *))(v14 + 16))(v14, v12, object);
        xpc_release(*(xpc_object_t *)object);
        xpc_release(v15);
      }
      if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_2636F43D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, xpc_object_t object)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI11RadioModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb12_E4__12EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_(void *a1)
{
  uint64_t v53 = *MEMORY[0x263EF8340];
  uint64_t v2 = (void *)*a1;
  uint64_t v3 = *(void **)*a1;
  if ((*(unsigned int (**)(void *))(*v3 + 88))(v3))
  {
    memset(object, 170, 24);
    uint64_t v4 = (const void *)*MEMORY[0x263F25E50];
    size_t v5 = strlen((const char *)*MEMORY[0x263F25E50]);
    if (v5 >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    std::string::size_type v6 = v5;
    if (v5 >= 0x17)
    {
      uint64_t v16 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v5 | 7) != 0x17) {
        uint64_t v16 = v5 | 7;
      }
      uint64_t v17 = v16 + 1;
      p_dst = (std::string *)operator new(v16 + 1);
      __dst.__r_.__value_.__l.__size_ = v6;
      __dst.__r_.__value_.__r.__words[2] = v17 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v5;
      p_dst = &__dst;
      if (!v5)
      {
LABEL_28:
        p_dst->__r_.__value_.__s.__data_[v6] = 0;
        xpc_object_t v18 = (char *)operator new(0x28uLL);
        strcpy(v18, " rejected; ABM is shutting down ");
        unsigned int v19 = std::string::append(&__dst, v18, 0x20uLL);
        long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
        object[2] = (xpc_object_t)v19->__r_.__value_.__r.__words[2];
        *(_OWORD *)xpc_object_t object = v20;
        v19->__r_.__value_.__l.__size_ = 0;
        v19->__r_.__value_.__r.__words[2] = 0;
        v19->__r_.__value_.__r.__words[0] = 0;
        operator delete(v18);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__dst.__r_.__value_.__l.__data_);
          unsigned int v21 = v3[11];
          if (!os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
          {
LABEL_30:
            int v22 = v2 + 1;
            if (!v2[1])
            {
LABEL_85:
              if (SHIBYTE(object[2]) < 0) {
                operator delete(object[0]);
              }
              goto LABEL_87;
            }
LABEL_41:
            __dst.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
            xpc_object_t v26 = (xpc_object_t)HIBYTE(object[2]);
            if (SHIBYTE(object[2]) < 0) {
              xpc_object_t v26 = object[1];
            }
            if (v26)
            {
              xpc_object_t v27 = xpc_dictionary_create(0, 0, 0);
              if (v27 || (xpc_object_t v27 = xpc_null_create()) != 0)
              {
                if (MEMORY[0x263E6A240](v27) == MEMORY[0x263EF8708])
                {
                  xpc_retain(v27);
                  xpc_object_t v28 = v27;
                }
                else
                {
                  xpc_object_t v28 = xpc_null_create();
                }
              }
              else
              {
                xpc_object_t v28 = xpc_null_create();
                xpc_object_t v27 = 0;
              }
              xpc_release(v27);
              xpc_object_t v38 = xpc_null_create();
              xpc_object_t v39 = (void *)__dst.__r_.__value_.__r.__words[0];
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v28;
              xpc_release(v39);
              xpc_release(v38);
              if (SHIBYTE(object[2]) >= 0) {
                CFTypeRef v40 = object;
              }
              else {
                CFTypeRef v40 = (xpc_object_t *)object[0];
              }
              xpc_object_t v41 = xpc_string_create((const char *)v40);
              if (!v41) {
                xpc_object_t v41 = xpc_null_create();
              }
              xpc_dictionary_set_value(v28, (const char *)*MEMORY[0x263F25EB8], v41);
              xpc_object_t v42 = xpc_null_create();
              xpc_release(v41);
              xpc_release(v42);
            }
            LODWORD(v51) = -534716415;
            dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(v22, (unsigned int *)&v51, (void **)&__dst.__r_.__value_.__l.__data_);
            xpc_release(__dst.__r_.__value_.__l.__data_);
            goto LABEL_85;
          }
        }
        else
        {
          unsigned int v21 = v3[11];
          if (!os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_30;
          }
        }
        xpc_object_t v25 = object;
        if (SHIBYTE(object[2]) < 0) {
          xpc_object_t v25 = (xpc_object_t *)object[0];
        }
        LODWORD(__dst.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = (std::string::size_type)v25;
        _os_log_impl(&dword_26368A000, v21, OS_LOG_TYPE_DEFAULT, "#I %s", (uint8_t *)&__dst, 0xCu);
        int v22 = v2 + 1;
        if (!v2[1]) {
          goto LABEL_85;
        }
        goto LABEL_41;
      }
    }
    memmove(p_dst, v4, v6);
    goto LABEL_28;
  }
  uint64_t v8 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  uint64_t v9 = off_26A99F170;
  if (!off_26A99F170)
  {
    CommandDriverFactory::create_default_global((uint64_t *)object, v8);
    long long v10 = *(_OWORD *)object;
    object[0] = 0;
    object[1] = 0;
    uint64_t v11 = (std::__shared_weak_count *)*(&off_26A99F170 + 1);
    off_26A99F170 = v10;
    if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    uint64_t v12 = (std::__shared_weak_count *)object[1];
    if (object[1] && !atomic_fetch_add((atomic_ullong *volatile)object[1] + 1, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
    uint64_t v9 = off_26A99F170;
  }
  xpc_object_t v13 = (std::__shared_weak_count *)*(&off_26A99F170 + 1);
  if (*(&off_26A99F170 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_26A99F170 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)v9 + 16))(&__dst, v9);
  if (__dst.__r_.__value_.__l.__size_)
  {
    uint64_t v14 = std::__shared_weak_count::lock((std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_);
    if (v14) {
      std::string::size_type v15 = __dst.__r_.__value_.__r.__words[0];
    }
    else {
      std::string::size_type v15 = 0;
    }
    if (__dst.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_);
    }
    if (!v13) {
      goto LABEL_34;
    }
  }
  else
  {
    uint64_t v14 = 0;
    std::string::size_type v15 = 0;
    if (!v13) {
      goto LABEL_34;
    }
  }
  if (!atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
    if (v15) {
      goto LABEL_35;
    }
    goto LABEL_49;
  }
LABEL_34:
  if (v15)
  {
LABEL_35:
    uint64_t v23 = (void *)v2[4];
    xpc_object_t v49 = v23;
    if (v23) {
      xpc_retain(v23);
    }
    else {
      xpc_object_t v49 = xpc_null_create();
    }
    xpc::bridge((uint64_t *)&cf, (xpc *)&v49, v24);
    CFTypeRef v32 = cf;
    if (cf && (CFTypeID v33 = CFGetTypeID(cf), v33 == CFDictionaryGetTypeID()))
    {
      CFTypeRef v51 = v32;
      CFRetain(v32);
    }
    else
    {
      CFTypeRef v51 = 0;
    }
    object[0] = (xpc_object_t)MEMORY[0x263EF8330];
    object[1] = (xpc_object_t)1174405120;
    object[2] = ___ZZZZN11RadioModule10initializeEN8dispatch13group_sessionEEUb_EUb12_ENK4__12clEv_block_invoke;
    xpc_object_t object[3] = &__block_descriptor_tmp_273;
    xpc_object_t object[4] = v3;
    object[5] = *((xpc_object_t *)v2 + 2);
    uint64_t v34 = (std::__shared_weak_count *)v2[3];
    xpc_object_t v47 = v34;
    if (v34) {
      atomic_fetch_add_explicit(&v34->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    xpc_object_t v35 = (void *)v2[1];
    if (v35) {
      xpc_object_t v35 = _Block_copy(v35);
    }
    aBlocunint64_t k = v35;
    CFTypeRef v36 = _Block_copy(object);
    CFTypeID v37 = v3[17];
    if (v37) {
      dispatch_retain(v37);
    }
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v36;
    __dst.__r_.__value_.__l.__size_ = (std::string::size_type)v37;
    (*(void (**)(std::string::size_type, CFTypeRef *, std::string *))(*(void *)v15 + 360))(v15, &v51, &__dst);
    if (__dst.__r_.__value_.__l.__size_) {
      dispatch_release((dispatch_object_t)__dst.__r_.__value_.__l.__size_);
    }
    if (__dst.__r_.__value_.__r.__words[0]) {
      _Block_release(__dst.__r_.__value_.__l.__data_);
    }
    if (v51) {
      CFRelease(v51);
    }
    if (cf) {
      CFRelease(cf);
    }
    xpc_release(v49);
    if (aBlock) {
      _Block_release(aBlock);
    }
    if (v47) {
      std::__shared_weak_count::__release_weak(v47);
    }
    goto LABEL_73;
  }
LABEL_49:
  xpc_object_t v29 = xpc_null_create();
  uint64_t v30 = v2[1];
  object[0] = v29;
  xpc_object_t v31 = xpc_null_create();
  (*(void (**)(uint64_t, uint64_t, xpc_object_t *))(v30 + 16))(v30, 3760250880, object);
  xpc_release(object[0]);
  xpc_release(v31);
LABEL_73:
  if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
LABEL_87:
  xpc_release((xpc_object_t)v2[4]);
  v2[4] = 0;
  xpc_object_t v43 = (std::__shared_weak_count *)v2[3];
  if (v43) {
    std::__shared_weak_count::__release_weak(v43);
  }
  uint64_t v44 = (const void *)v2[1];
  if (v44) {
    _Block_release(v44);
  }
  operator delete(v2);
  uint64_t v45 = (std::__shared_weak_count *)a1[2];
  if (v45 && !atomic_fetch_add(&v45->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
    std::__shared_weak_count::__release_weak(v45);
  }
  operator delete(a1);
}

void sub_2636F4B94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18, void *a19, uint64_t a20,xpc_object_t a21,CFTypeRef a22,CFTypeRef cf,xpc_object_t aBlock,dispatch_object_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void ___ZZZZN11RadioModule10initializeEN8dispatch13group_sessionEEUb_EUb12_ENK4__12clEv_block_invoke(void *a1, uint64_t *a2)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  uint64_t v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    uint64_t v5 = a1[4];
    std::string::size_type v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      uint64_t v7 = v6;
      if (a1[5])
      {
        uint64_t v8 = *a2;
        if (*a2) {
          uint64_t v9 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
        }
        else {
          uint64_t v9 = 0;
        }
        if (v9)
        {
          long long v10 = *(NSObject **)(v5 + 88);
          if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)xpc_object_t object = 138412290;
            *(void *)&xpc_object_t object[4] = v8;
            _os_log_error_impl(&dword_26368A000, v10, OS_LOG_TYPE_ERROR, "%@", object, 0xCu);
            uint64_t v8 = *a2;
          }
        }
        if (v8) {
          uint64_t v11 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
        }
        else {
          uint64_t v11 = 0;
        }
        if (v11) {
          uint64_t v12 = 3760250880;
        }
        else {
          uint64_t v12 = 0;
        }
        xpc_object_t v13 = xpc_null_create();
        uint64_t v14 = a1[7];
        *(void *)xpc_object_t object = v13;
        xpc_object_t v15 = xpc_null_create();
        (*(void (**)(uint64_t, uint64_t, unsigned char *))(v14 + 16))(v14, v12, object);
        xpc_release(*(xpc_object_t *)object);
        xpc_release(v15);
      }
      if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_2636F4FE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, xpc_object_t object)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI11RadioModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb13_E4__13EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_(void *a1)
{
  uint64_t v44 = *MEMORY[0x263EF8340];
  uint64_t v2 = (void *)*a1;
  uint64_t v3 = *(void **)*a1;
  if ((*(unsigned int (**)(void *))(*v3 + 88))(v3))
  {
    memset(__p, 170, 24);
    uint64_t v4 = (const void *)*MEMORY[0x263F266D0];
    size_t v5 = strlen((const char *)*MEMORY[0x263F266D0]);
    if (v5 >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    std::string::size_type v6 = v5;
    if (v5 >= 0x17)
    {
      uint64_t v16 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v5 | 7) != 0x17) {
        uint64_t v16 = v5 | 7;
      }
      uint64_t v17 = v16 + 1;
      p_dst = (std::string *)operator new(v16 + 1);
      __dst.__r_.__value_.__l.__size_ = v6;
      __dst.__r_.__value_.__r.__words[2] = v17 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v5;
      p_dst = &__dst;
      if (!v5)
      {
LABEL_28:
        p_dst->__r_.__value_.__s.__data_[v6] = 0;
        xpc_object_t v18 = (char *)operator new(0x28uLL);
        strcpy(v18, " rejected; ABM is shutting down ");
        unsigned int v19 = std::string::append(&__dst, v18, 0x20uLL);
        long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
        __p[2] = (void *)v19->__r_.__value_.__r.__words[2];
        *(_OWORD *)tm __p = v20;
        v19->__r_.__value_.__l.__size_ = 0;
        v19->__r_.__value_.__r.__words[2] = 0;
        v19->__r_.__value_.__r.__words[0] = 0;
        operator delete(v18);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__dst.__r_.__value_.__l.__data_);
          unsigned int v21 = v3[11];
          if (!os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
          {
LABEL_30:
            int v22 = v2 + 1;
            if (!v2[1])
            {
LABEL_74:
              if (SHIBYTE(__p[2]) < 0) {
                operator delete(__p[0]);
              }
              goto LABEL_76;
            }
LABEL_56:
            __dst.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
            xpc_object_t v28 = (void *)HIBYTE(__p[2]);
            if (SHIBYTE(__p[2]) < 0) {
              xpc_object_t v28 = __p[1];
            }
            if (v28)
            {
              xpc_object_t v29 = xpc_dictionary_create(0, 0, 0);
              if (v29 || (xpc_object_t v29 = xpc_null_create()) != 0)
              {
                if (MEMORY[0x263E6A240](v29) == MEMORY[0x263EF8708])
                {
                  xpc_retain(v29);
                  xpc_object_t v30 = v29;
                }
                else
                {
                  xpc_object_t v30 = xpc_null_create();
                }
              }
              else
              {
                xpc_object_t v30 = xpc_null_create();
                xpc_object_t v29 = 0;
              }
              xpc_release(v29);
              xpc_object_t v31 = xpc_null_create();
              CFTypeRef v32 = (void *)__dst.__r_.__value_.__r.__words[0];
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v30;
              xpc_release(v32);
              xpc_release(v31);
              if (SHIBYTE(__p[2]) >= 0) {
                CFTypeID v33 = __p;
              }
              else {
                CFTypeID v33 = (void **)__p[0];
              }
              xpc_object_t v34 = xpc_string_create((const char *)v33);
              if (!v34) {
                xpc_object_t v34 = xpc_null_create();
              }
              xpc_dictionary_set_value(v30, (const char *)*MEMORY[0x263F25EB8], v34);
              xpc_object_t v35 = xpc_null_create();
              xpc_release(v34);
              xpc_release(v35);
            }
            unsigned int v42 = -534716415;
            dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(v22, &v42, (void **)&__dst.__r_.__value_.__l.__data_);
            xpc_release(__dst.__r_.__value_.__l.__data_);
            goto LABEL_74;
          }
        }
        else
        {
          unsigned int v21 = v3[11];
          if (!os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_30;
          }
        }
        xpc_object_t v27 = __p;
        if (SHIBYTE(__p[2]) < 0) {
          xpc_object_t v27 = (void **)__p[0];
        }
        LODWORD(__dst.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = (std::string::size_type)v27;
        _os_log_impl(&dword_26368A000, v21, OS_LOG_TYPE_DEFAULT, "#I %s", (uint8_t *)&__dst, 0xCu);
        int v22 = v2 + 1;
        if (!v2[1]) {
          goto LABEL_74;
        }
        goto LABEL_56;
      }
    }
    memmove(p_dst, v4, v6);
    goto LABEL_28;
  }
  uint64_t v8 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  uint64_t v9 = off_26A99F170;
  if (!off_26A99F170)
  {
    CommandDriverFactory::create_default_global((uint64_t *)__p, v8);
    long long v10 = *(_OWORD *)__p;
    __p[0] = 0;
    __p[1] = 0;
    uint64_t v11 = (std::__shared_weak_count *)*(&off_26A99F170 + 1);
    off_26A99F170 = v10;
    if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    uint64_t v12 = (std::__shared_weak_count *)__p[1];
    if (__p[1] && !atomic_fetch_add((atomic_ullong *volatile)__p[1] + 1, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
    uint64_t v9 = off_26A99F170;
  }
  xpc_object_t v13 = (std::__shared_weak_count *)*(&off_26A99F170 + 1);
  if (*(&off_26A99F170 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_26A99F170 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)v9 + 16))(&__dst, v9);
  if (__dst.__r_.__value_.__l.__size_)
  {
    uint64_t v14 = std::__shared_weak_count::lock((std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_);
    if (v14) {
      std::string::size_type v15 = __dst.__r_.__value_.__r.__words[0];
    }
    else {
      std::string::size_type v15 = 0;
    }
    if (__dst.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_);
    }
    if (!v13) {
      goto LABEL_34;
    }
  }
  else
  {
    uint64_t v14 = 0;
    std::string::size_type v15 = 0;
    if (!v13) {
      goto LABEL_34;
    }
  }
  if (!atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
    if (v15) {
      goto LABEL_35;
    }
    goto LABEL_49;
  }
LABEL_34:
  if (v15)
  {
LABEL_35:
    __p[0] = (void *)MEMORY[0x263EF8330];
    __p[1] = (void *)1174405120;
    __p[2] = ___ZZZZN11RadioModule10initializeEN8dispatch13group_sessionEEUb_EUb13_ENK4__13clEv_block_invoke;
    __p[3] = &__block_descriptor_tmp_276;
    __p[4] = *((void **)v2 + 2);
    uint64_t v23 = (std::__shared_weak_count *)v2[3];
    CFTypeRef v40 = v23;
    if (v23) {
      atomic_fetch_add_explicit(&v23->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v24 = (void *)v2[1];
    if (v24) {
      uint64_t v24 = _Block_copy(v24);
    }
    aBlocunint64_t k = v24;
    xpc_object_t v25 = _Block_copy(__p);
    xpc_object_t v26 = v3[17];
    if (v26) {
      dispatch_retain(v26);
    }
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v25;
    __dst.__r_.__value_.__l.__size_ = (std::string::size_type)v26;
    (*(void (**)(std::string::size_type, std::string *))(*(void *)v15 + 384))(v15, &__dst);
    if (__dst.__r_.__value_.__l.__size_) {
      dispatch_release((dispatch_object_t)__dst.__r_.__value_.__l.__size_);
    }
    if (__dst.__r_.__value_.__r.__words[0]) {
      _Block_release(__dst.__r_.__value_.__l.__data_);
    }
    if (aBlock) {
      _Block_release(aBlock);
    }
    if (v40) {
      std::__shared_weak_count::__release_weak(v40);
    }
  }
LABEL_49:
  if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
LABEL_76:
  CFTypeRef v36 = (std::__shared_weak_count *)v2[3];
  if (v36) {
    std::__shared_weak_count::__release_weak(v36);
  }
  CFTypeID v37 = (const void *)v2[1];
  if (v37) {
    _Block_release(v37);
  }
  operator delete(v2);
  xpc_object_t v38 = (std::__shared_weak_count *)a1[2];
  if (v38 && !atomic_fetch_add(&v38->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
    std::__shared_weak_count::__release_weak(v38);
  }
  operator delete(a1);
}

void sub_2636F56D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17, void *aBlock, uint64_t a19, xpc_object_t object,dispatch_object_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void ___ZZZZN11RadioModule10initializeEN8dispatch13group_sessionEEUb_EUb13_ENK4__13clEv_block_invoke(void *a1, void *a2, void *a3)
{
  uint64_t v4 = (std::__shared_weak_count *)a1[5];
  if (!v4) {
    return;
  }
  uint64_t v7 = std::__shared_weak_count::lock(v4);
  long long v20 = v7;
  if (!v7) {
    return;
  }
  if (!a1[4])
  {
    long long v10 = v7;
LABEL_22:
    if (!atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
    return;
  }
  xpc_object_t v8 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v9 = v8;
  if (v8)
  {
    xpc_object_t xdict = v8;
  }
  else
  {
    xpc_object_t v9 = xpc_null_create();
    xpc_object_t xdict = v9;
    if (!v9)
    {
      xpc_object_t v11 = xpc_null_create();
      xpc_object_t v9 = 0;
      goto LABEL_12;
    }
  }
  if (MEMORY[0x263E6A240](v9) == MEMORY[0x263EF8708])
  {
    xpc_retain(v9);
    goto LABEL_13;
  }
  xpc_object_t v11 = xpc_null_create();
LABEL_12:
  xpc_object_t xdict = v11;
LABEL_13:
  xpc_release(v9);
  uint64_t v12 = MEMORY[0x263E6A240](*a3);
  uint64_t v13 = MEMORY[0x263EF8758];
  if (v12 != MEMORY[0x263EF8758])
  {
    xpc_object_t v14 = (xpc_object_t)*a3;
    if (v14) {
      xpc_retain(v14);
    }
    else {
      xpc_object_t v14 = xpc_null_create();
    }
    xpc_dictionary_set_value(xdict, (const char *)*MEMORY[0x263F26090], v14);
    xpc_object_t v15 = xpc_null_create();
    xpc_release(v14);
    xpc_release(v15);
  }
  if (MEMORY[0x263E6A240](*a2) == v13) {
    unsigned int v16 = 0;
  }
  else {
    unsigned int v16 = -534716416;
  }
  unsigned int v17 = v16;
  dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(a1 + 6, &v17, &xdict);
  xpc_release(xdict);
  long long v10 = v20;
  if (v20) {
    goto LABEL_22;
  }
}

void sub_2636F5AE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, char a11)
{
}

void dispatch::async<void ctu::SharedSynchronizable<RadioModule>::execute_wrapped<RadioModule::initialize(dispatch::group_session)::$_0>(RadioModule::initialize(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<RadioModule::initialize(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<RadioModule::initialize(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  uint64_t v2 = *(RadioModule ***)a1;
  RadioModule::finishInitialization_sync(**(RadioModule ***)a1);
  operator delete(v2);
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    uint64_t v4 = (void *)a1;
  }
  else
  {
    uint64_t v4 = (void *)a1;
  }
  operator delete(v4);
}

void sub_2636F5BD0(_Unwind_Exception *a1)
{
  operator delete(v2);
  uint64_t v4 = (std::__shared_weak_count *)v1[2];
  if (v4)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<DeviceHistoryDB *,std::shared_ptr<DeviceHistoryDB>::__shared_ptr_default_delete<DeviceHistoryDB,DeviceHistoryDB>,std::allocator<DeviceHistoryDB>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t std::__shared_ptr_pointer<DeviceHistoryDB *,std::shared_ptr<DeviceHistoryDB>::__shared_ptr_default_delete<DeviceHistoryDB,DeviceHistoryDB>,std::allocator<DeviceHistoryDB>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<DeviceHistoryDB *,std::shared_ptr<DeviceHistoryDB>::__shared_ptr_default_delete<DeviceHistoryDB,DeviceHistoryDB>,std::allocator<DeviceHistoryDB>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x80000002637A6F2ELL) {
    return a1 + 24;
  }
  if (((v3 & 0x80000002637A6F2ELL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000002637A6F2ELL)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000002637A6F2ELL & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 24;
  }
  return 0;
}

BOOL ctu::SharedLockable<SharedData>::execute_sync<BOOL SharedData::setPreference<__CFDictionary *>(std::string const&,__CFDictionary *)::{lambda(void)#1}>(os_unfair_lock_s *a1, uint64_t *a2)
{
  uint64_t v3 = a1 + 4;
  os_unfair_lock_lock(a1 + 4);
  uint64_t v4 = a2[2];
  uint64_t v5 = *a2;
  std::string::size_type v6 = *(const void **)a2[1];
  if (*(char *)(v5 + 23) >= 0) {
    uint64_t v7 = (const char *)v5;
  }
  else {
    uint64_t v7 = *(const char **)v5;
  }
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v10, v7);
  BOOL v8 = ctu::cf::plist_adapter::set<__CFArray *>(v4, v6, v10, 1);
  MEMORY[0x263E68C90](&v10);
  os_unfair_lock_unlock(v3);
  return v8;
}

void dispatch::async<void ctu::SharedSynchronizable<RadioModule>::execute_wrapped<RadioModule::sleep(dispatch::group_session)::$_0>(RadioModule::sleep(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<RadioModule::sleep(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<RadioModule::sleep(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = **a1;
  uint64_t v4 = *(uint64_t **)(v3 + 272);
  if (v4)
  {
    uint64_t v5 = _Block_copy(&__block_literal_global_0);
    std::string::size_type v6 = v5;
    uint64_t v7 = *(NSObject **)(v3 + 136);
    if (v7)
    {
      dispatch_retain(v7);
      xpc_object_t v11 = v6;
      uint64_t v12 = v7;
      radio::HealthService::enterLowPower(v4, (uint64_t)&v11);
      dispatch_release(v7);
      if (!v6) {
        goto LABEL_7;
      }
      goto LABEL_6;
    }
    xpc_object_t v11 = v5;
    uint64_t v12 = 0;
    radio::HealthService::enterLowPower(v4, (uint64_t)&v11);
    if (v6) {
LABEL_6:
    }
      _Block_release(v6);
  }
LABEL_7:
  BOOL v8 = v2[1];
  if (v8)
  {
    dispatch_group_leave(v8);
    xpc_object_t v9 = v2[1];
    if (v9) {
      dispatch_release(v9);
    }
  }
  operator delete(v2);
  CFStringRef v10 = (std::__shared_weak_count *)a1[2];
  if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }

  operator delete(a1);
}

void dispatch::async<void ctu::SharedSynchronizable<RadioModule>::execute_wrapped<RadioModule::wake(dispatch::group_session)::$_0>(RadioModule::wake(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<RadioModule::wake(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<RadioModule::wake(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = **a1;
  uint64_t v4 = *(uint64_t **)(v3 + 272);
  if (v4)
  {
    uint64_t v5 = _Block_copy(&__block_literal_global_280);
    std::string::size_type v6 = v5;
    uint64_t v7 = *(NSObject **)(v3 + 136);
    if (v7)
    {
      dispatch_retain(v7);
      xpc_object_t v11 = v6;
      uint64_t v12 = v7;
      radio::HealthService::exitLowPower(v4, (uint64_t)&v11);
      dispatch_release(v7);
      if (!v6) {
        goto LABEL_7;
      }
      goto LABEL_6;
    }
    xpc_object_t v11 = v5;
    uint64_t v12 = 0;
    radio::HealthService::exitLowPower(v4, (uint64_t)&v11);
    if (v6) {
LABEL_6:
    }
      _Block_release(v6);
  }
LABEL_7:
  BOOL v8 = v2[1];
  if (v8)
  {
    dispatch_group_leave(v8);
    xpc_object_t v9 = v2[1];
    if (v9) {
      dispatch_release(v9);
    }
  }
  operator delete(v2);
  CFStringRef v10 = (std::__shared_weak_count *)a1[2];
  if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }

  operator delete(a1);
}

void std::__shared_ptr_pointer<radio::HealthService *,std::shared_ptr<radio::HealthService>::__shared_ptr_default_delete<radio::HealthService,radio::HealthService>,std::allocator<radio::HealthService>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<radio::HealthService *,std::shared_ptr<radio::HealthService>::__shared_ptr_default_delete<radio::HealthService,radio::HealthService>,std::allocator<radio::HealthService>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count ***)(a1 + 24);
  if (v1)
  {
    uint64_t v2 = v1[1];
    if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      uint64_t v3 = v1;
    }
    else
    {
      uint64_t v3 = v1;
    }
    operator delete(v3);
  }
}

uint64_t std::__shared_ptr_pointer<radio::HealthService *,std::shared_ptr<radio::HealthService>::__shared_ptr_default_delete<radio::HealthService,radio::HealthService>,std::allocator<radio::HealthService>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x80000002637A7001) {
    return a1 + 24;
  }
  if (((v3 & 0x80000002637A7001 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000002637A7001)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000002637A7001 & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 24;
  }
  return 0;
}

void std::__shared_ptr_pointer<ABMProperties *,std::shared_ptr<ABMProperties>::__shared_ptr_default_delete<ABMProperties,ABMProperties>,std::allocator<ABMProperties>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<ABMProperties *,std::shared_ptr<ABMProperties>::__shared_ptr_default_delete<ABMProperties,ABMProperties>,std::allocator<ABMProperties>>::__on_zero_shared(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    uint64_t v1 = (void *)MEMORY[0x263E68CF0]();
    operator delete(v1);
  }
}

uint64_t std::__shared_ptr_pointer<ABMProperties *,std::shared_ptr<ABMProperties>::__shared_ptr_default_delete<ABMProperties,ABMProperties>,std::allocator<ABMProperties>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x80000002637A70D2) {
    return a1 + 24;
  }
  if (((v3 & 0x80000002637A70D2 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000002637A70D2)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000002637A70D2 & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 24;
  }
  return 0;
}

uint64_t ctu::PthreadMutexGuardPolicy<ABMProperties>::~PthreadMutexGuardPolicy(uint64_t a1)
{
  pthread_mutex_lock((pthread_mutex_t *)a1);
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 72);
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 72);
  if (!v3 || atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v3);
  return a1;
}

uint64_t __cxx_global_var_init_209()
{
  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<CommandDriverFactory>::~PthreadMutexGuardPolicy, &ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance, &dword_26368A000);
  }
  return result;
}

uint64_t __cxx_global_var_init_210()
{
  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<ABMServer>::~PthreadMutexGuardPolicy, &ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance, &dword_26368A000);
  }
  return result;
}

uint64_t __cxx_global_var_init_211()
{
  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<SharedData>::~PthreadMutexGuardPolicy, &ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance, &dword_26368A000);
  }
  return result;
}

uint64_t __cxx_global_var_init_212()
{
  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<DeviceHistoryDB>::~PthreadMutexGuardPolicy, &ctu::Singleton<DeviceHistoryDB,DeviceHistoryDB,ctu::PthreadMutexGuardPolicy<DeviceHistoryDB>>::sInstance, &dword_26368A000);
  }
  return result;
}

uint64_t __cxx_global_var_init_213()
{
  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<ABMProperties>::~PthreadMutexGuardPolicy, &ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance, &dword_26368A000);
  }
  return result;
}

uint64_t TraceFilter::determineFilterAction(std::string *a1)
{
  uint64_t v79 = *MEMORY[0x263EF8340];
  std::string::__assign_external(a1, (const std::string::value_type *)*MEMORY[0x263F26230]);
  if (TelephonyUtilIsInternalBuild())
  {
    unsigned int v69 = -1431655766;
    uint64_t v2 = (const void *)*MEMORY[0x263F26168];
    size_t v3 = strlen((const char *)*MEMORY[0x263F26168]);
    if (v3 > 0x7FFFFFFFFFFFFFF7) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    size_t v4 = v3;
    if (v3 >= 0x17)
    {
      uint64_t v7 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v3 | 7) != 0x17) {
        uint64_t v7 = v3 | 7;
      }
      uint64_t v8 = v7 + 1;
      p_dst = (long long *)operator new(v7 + 1);
      *((void *)&__dst + 1) = v4;
      int64_t v74 = v8 | 0x8000000000000000;
      *(void *)&long long __dst = p_dst;
    }
    else
    {
      HIBYTE(v74) = v3;
      p_dst = &__dst;
      if (!v3)
      {
LABEL_11:
        *((unsigned char *)p_dst + v4) = 0;
        memset(&__p, 0, 24);
        if (prop::logfilter::get((char *)&__dst, (uint64_t)&__p))
        {
          int v9 = util::convert<int>((const std::string *)&__p, &v69, 0);
          if ((SHIBYTE(__p.st_gid) & 0x80000000) == 0) {
            goto LABEL_16;
          }
        }
        else
        {
          int v9 = 0;
          if ((SHIBYTE(__p.st_gid) & 0x80000000) == 0) {
            goto LABEL_16;
          }
        }
        operator delete(*(void **)&__p.st_dev);
LABEL_16:
        if (SHIBYTE(v74) < 0)
        {
          operator delete((void *)__dst);
          if (v9)
          {
LABEL_18:
            __darwin_ino64_t v10 = v69;
            v72.__r_.__value_.__l.__size_ = 0xAAAAAAAAAAAAAAAALL;
            v72.__r_.__value_.__r.__words[2] = 0xAAAAAAAAAAAAAALL;
            v72.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAA00;
            xpc_object_t v11 = (const void *)*MEMORY[0x263F204D0];
            size_t v12 = strlen((const char *)*MEMORY[0x263F204D0]);
            if (v12 > 0x7FFFFFFFFFFFFFF7) {
              std::string::__throw_length_error[abi:ne180100]();
            }
            size_t v13 = v12;
            if (v12 >= 0x17)
            {
              uint64_t v25 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v12 | 7) != 0x17) {
                uint64_t v25 = v12 | 7;
              }
              uint64_t v26 = v25 + 1;
              xpc_object_t v14 = (long long *)operator new(v25 + 1);
              *((void *)&__dst + 1) = v13;
              int64_t v74 = v26 | 0x8000000000000000;
              *(void *)&long long __dst = v14;
            }
            else
            {
              HIBYTE(v74) = v12;
              xpc_object_t v14 = &__dst;
              if (!v12)
              {
                LOBYTE(__dst) = 0;
                int v15 = SHIBYTE(v74);
                if ((SHIBYTE(v74) & 0x80000000) == 0) {
                  goto LABEL_22;
                }
                goto LABEL_40;
              }
            }
            memmove(v14, v11, v13);
            *((unsigned char *)v14 + v13) = 0;
            int v15 = SHIBYTE(v74);
            if ((SHIBYTE(v74) & 0x80000000) == 0)
            {
LABEL_22:
              if (v15)
              {
                memset(&__p, 0, 64);
                int v16 = statvfs((const char *)&__dst, (statvfs *)&__p);
                __darwin_ino64_t st_ino = __p.st_ino;
                uint64_t st_rdev = __p.st_rdev;
                if ((v15 & 0x80000000) == 0) {
                  goto LABEL_25;
                }
                goto LABEL_24;
              }
              goto LABEL_44;
            }
LABEL_40:
            if (*((void *)&__dst + 1))
            {
              memset(&__p, 0, 64);
              int v16 = statvfs((const char *)__dst, (statvfs *)&__p);
              __darwin_ino64_t st_ino = __p.st_ino;
              uint64_t st_rdev = __p.st_rdev;
              if ((v15 & 0x80000000) == 0)
              {
LABEL_25:
                if (!v16)
                {
                  __darwin_ino64_t v19 = (st_ino * st_rdev) >> 20;
                  if ((v10 & 0x80000000) == 0 && v19 <= v10) {
                    std::string::__assign_external(&v72, (const std::string::value_type *)*MEMORY[0x263F26228]);
                  }
                  GetABMLogServer(buf);
                  long long v20 = *((void *)GetGlobalLogger(buf) + 4);
                  unsigned int v21 = *(std::__shared_weak_count **)&buf[8];
                  if (*(void *)&buf[8]
                    && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
                  {
                    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
                    std::__shared_weak_count::__release_weak(v21);
                  }
                  if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
                  {
                    __p.st_dev = 136315394;
                    *(void *)&__p.st_mode = "trace.filter";
                    WORD2(__p.st_ino) = 2048;
                    *(__darwin_ino64_t *)((char *)&__p.st_ino + 6) = v19;
                    _os_log_impl(&dword_26368A000, v20, OS_LOG_TYPE_DEFAULT, "#I %s: Free disk space = %lu MB", (uint8_t *)&__p, 0x16u);
                  }
                }
                goto LABEL_44;
              }
LABEL_24:
              operator delete((void *)__dst);
              goto LABEL_25;
            }
            operator delete((void *)__dst);
LABEL_44:
            std::string::size_type size = v72.__r_.__value_.__l.__size_;
            int v22 = (void *)v72.__r_.__value_.__r.__words[0];
            uint64_t v24 = v72.__r_.__value_.__r.__words[2];
LABEL_45:
            int v68 = -1431655766;
            xpc_object_t v27 = (const void *)*MEMORY[0x263F26300];
            size_t v28 = strlen((const char *)*MEMORY[0x263F26300]);
            if (v28 > 0x7FFFFFFFFFFFFFF7) {
              std::string::__throw_length_error[abi:ne180100]();
            }
            size_t v29 = v28;
            if (v28 >= 0x17)
            {
              uint64_t v31 = (v28 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v28 | 7) != 0x17) {
                uint64_t v31 = v28 | 7;
              }
              uint64_t v32 = v31 + 1;
              xpc_object_t v30 = (long long *)operator new(v31 + 1);
              *((void *)&__dst + 1) = v29;
              int64_t v74 = v32 | 0x8000000000000000;
              *(void *)&long long __dst = v30;
            }
            else
            {
              HIBYTE(v74) = v28;
              xpc_object_t v30 = &__dst;
              if (!v28)
              {
LABEL_53:
                *((unsigned char *)v30 + v29) = 0;
                memset(&__p, 0, 24);
                if (prop::logfilter::get((char *)&__dst, (uint64_t)&__p))
                {
                  uint64_t v6 = util::convert<int>((const std::string *)&__p, &v68, 0);
                  if ((SHIBYTE(__p.st_gid) & 0x80000000) == 0) {
                    goto LABEL_58;
                  }
                }
                else
                {
                  uint64_t v6 = 0;
                  if ((SHIBYTE(__p.st_gid) & 0x80000000) == 0) {
                    goto LABEL_58;
                  }
                }
                operator delete(*(void **)&__p.st_dev);
LABEL_58:
                if (SHIBYTE(v74) < 0)
                {
                  operator delete((void *)__dst);
                  if (v6)
                  {
LABEL_60:
                    int v33 = v68;
                    memset(&v67, 0, sizeof(v67));
                    if (v68 < 0)
                    {
                      unsigned __int8 v44 = 0;
                      std::string::size_type v43 = 0;
                      unsigned int v42 = 0;
                      unint64_t v46 = HIBYTE(v24);
                      if (v24 < 0) {
                        unint64_t v46 = size;
                      }
                      if (v46) {
                        goto LABEL_139;
                      }
                      goto LABEL_136;
                    }
                    long long __dst = 0uLL;
                    int64_t v74 = 0;
                    pthread_mutex_lock(&ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance);
                    xpc_object_t v34 = (os_unfair_lock_s *)xmmword_26A99F080;
                    if (!(void)xmmword_26A99F080)
                    {
                      SharedData::create_default_global(&__p);
                      long long v35 = *(_OWORD *)&__p.st_dev;
                      *(void *)&__p.st_dev = 0;
                      __p.__darwin_ino64_t st_ino = 0;
                      CFTypeRef v36 = (std::__shared_weak_count *)*((void *)&xmmword_26A99F080 + 1);
                      xmmword_26A99F080 = v35;
                      if (v36 && !atomic_fetch_add(&v36->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                      {
                        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
                        std::__shared_weak_count::__release_weak(v36);
                      }
                      CFTypeID v37 = (std::__shared_weak_count *)__p.st_ino;
                      if (__p.st_ino
                        && !atomic_fetch_add((atomic_ullong *volatile)(__p.st_ino + 8), 0xFFFFFFFFFFFFFFFFLL))
                      {
                        ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
                        std::__shared_weak_count::__release_weak(v37);
                      }
                      xpc_object_t v34 = (os_unfair_lock_s *)xmmword_26A99F080;
                    }
                    *(void *)std::string buf = v34;
                    *(void *)&uint8_t buf[8] = *((void *)&xmmword_26A99F080 + 1);
                    if (*((void *)&xmmword_26A99F080 + 1)) {
                      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&xmmword_26A99F080 + 1) + 8), 1uLL, memory_order_relaxed);
                    }
                    pthread_mutex_unlock(&ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance);
                    xpc_object_t v38 = (const void *)*MEMORY[0x263F204F8];
                    size_t v39 = strlen((const char *)*MEMORY[0x263F204F8]);
                    if (v39 > 0x7FFFFFFFFFFFFFF7) {
                      std::string::__throw_length_error[abi:ne180100]();
                    }
                    std::string::size_type v40 = v39;
                    if (v39 >= 0x17)
                    {
                      CFStringRef v65 = v22;
                      uint64_t v47 = (v39 & 0xFFFFFFFFFFFFFFF8) + 8;
                      if ((v39 | 7) != 0x17) {
                        uint64_t v47 = v39 | 7;
                      }
                      uint64_t v48 = v47 + 1;
                      xpc_object_t v41 = operator new(v47 + 1);
                      v72.__r_.__value_.__l.__size_ = v40;
                      v72.__r_.__value_.__r.__words[2] = v48 | 0x8000000000000000;
                      v72.__r_.__value_.__r.__words[0] = (std::string::size_type)v41;
                      int v22 = v65;
                    }
                    else
                    {
                      *((unsigned char *)&v72.__r_.__value_.__s + 23) = v39;
                      xpc_object_t v41 = &v72;
                      if (!v39)
                      {
LABEL_88:
                        v41[v40] = 0;
                        *(void *)&__p.st_dev = &v72;
                        __p.__darwin_ino64_t st_ino = (__darwin_ino64_t)&__dst;
                        *(void *)&__p.st_uid = v34;
                        ctu::SharedLockable<SharedData>::execute_sync<BOOL SharedData::getPreference<std::string>(std::string const&,std::string &)::{lambda(void)#1}>(v34 + 6, (uint64_t)&__p);
                        if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0) {
                          operator delete(v72.__r_.__value_.__l.__data_);
                        }
                        xpc_object_t v49 = *(std::__shared_weak_count **)&buf[8];
                        if (*(void *)&buf[8]
                          && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
                        {
                          ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
                          std::__shared_weak_count::__release_weak(v49);
                        }
                        v50.tv_seCC_SHA256_CTX c = 0xAAAAAAAAAAAAAAAALL;
                        v50.tv_nseCC_SHA256_CTX c = 0xAAAAAAAAAAAAAAAALL;
                        *(timespec *)&__p.st_blkstd::string::size_type size = v50;
                        *(timespec *)__p.st_qspare = v50;
                        __p.st_birthtimespeCC_SHA256_CTX c = v50;
                        *(timespec *)&__p.st_std::string::size_type size = v50;
                        __p.st_mtimespeCC_SHA256_CTX c = v50;
                        __p.st_ctimespeCC_SHA256_CTX c = v50;
                        *(timespec *)&__p.st_uid = v50;
                        __p.st_atimespeCC_SHA256_CTX c = v50;
                        *(timespec *)&__p.st_dev = v50;
                        if (v74 >= 0) {
                          CFTypeRef v51 = (const char *)&__dst;
                        }
                        else {
                          CFTypeRef v51 = (const char *)__dst;
                        }
                        if (stat(v51, &__p))
                        {
                          int v52 = -1;
                          goto LABEL_123;
                        }
                        if (SHIBYTE(v74) < 0)
                        {
                          std::string::__init_copy_ctor_external((std::string *)&__p, (const std::string::value_type *)__dst, *((std::string::size_type *)&__dst + 1));
                        }
                        else
                        {
                          *(_OWORD *)&__p.st_dev = __dst;
                          *(void *)&__p.st_uid = v74;
                        }
                        uint64_t v53 = (const void *)*MEMORY[0x263F204C8];
                        size_t v54 = strlen((const char *)*MEMORY[0x263F204C8]);
                        if (v54 > 0x7FFFFFFFFFFFFFF7) {
                          std::string::__throw_length_error[abi:ne180100]();
                        }
                        std::string::size_type v55 = v54;
                        if (v54 >= 0x17)
                        {
                          CFTypeRef v66 = v22;
                          uint64_t v57 = (v54 & 0xFFFFFFFFFFFFFFF8) + 8;
                          if ((v54 | 7) != 0x17) {
                            uint64_t v57 = v54 | 7;
                          }
                          uint64_t v58 = v57 + 1;
                          uint64_t v56 = operator new(v57 + 1);
                          v72.__r_.__value_.__l.__size_ = v55;
                          v72.__r_.__value_.__r.__words[2] = v58 | 0x8000000000000000;
                          v72.__r_.__value_.__r.__words[0] = (std::string::size_type)v56;
                          int v22 = v66;
                        }
                        else
                        {
                          *((unsigned char *)&v72.__r_.__value_.__s + 23) = v54;
                          uint64_t v56 = &v72;
                          if (!v54)
                          {
LABEL_109:
                            v56[v55] = 0;
                            unint64_t NumberOfLogDumps = util::getNumberOfLogDumps((uint64_t)&__p, (const void **)&v72.__r_.__value_.__l.__data_);
                            if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0)
                            {
                              operator delete(v72.__r_.__value_.__l.__data_);
                              if ((SHIBYTE(__p.st_gid) & 0x80000000) == 0)
                              {
LABEL_111:
                                if (NumberOfLogDumps >> 31) {
                                  int v52 = -1;
                                }
                                else {
                                  int v52 = NumberOfLogDumps;
                                }
                                if (v52 == -1) {
                                  goto LABEL_123;
                                }
LABEL_121:
                                if (v52 >= v33)
                                {
                                  std::string::__assign_external(&v67, (const std::string::value_type *)*MEMORY[0x263F26228]);
                                  int v52 = NumberOfLogDumps;
                                }
LABEL_123:
                                GetABMLogServer(&v70);
                                xpc_object_t v60 = *((void *)GetGlobalLogger(&v70) + 4);
                                uint64_t v61 = v71;
                                if (v71 && !atomic_fetch_add(&v71->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                                {
                                  ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
                                  std::__shared_weak_count::__release_weak(v61);
                                }
                                if (os_log_type_enabled(v60, OS_LOG_TYPE_DEFAULT))
                                {
                                  *(_DWORD *)std::string buf = 136315650;
                                  *(void *)&uint8_t buf[4] = "trace.filter";
                                  *(_WORD *)&unsigned char buf[12] = 1024;
                                  *(_DWORD *)&buf[14] = v52;
                                  __int16 v76 = 1024;
                                  int v77 = v33;
                                  _os_log_impl(&dword_26368A000, v60, OS_LOG_TYPE_DEFAULT, "#I %s: log dump size_t count = %d, max log limit = %d", buf, 0x18u);
                                }
                                if (SHIBYTE(v74) < 0)
                                {
                                  operator delete((void *)__dst);
                                  std::string::size_type v43 = v67.__r_.__value_.__l.__size_;
                                  unsigned int v42 = (void *)v67.__r_.__value_.__r.__words[0];
                                  unsigned __int8 v44 = HIBYTE(v67.__r_.__value_.__r.__words[2]);
                                  unint64_t v63 = HIBYTE(v24);
                                  if (v24 < 0) {
                                    unint64_t v63 = size;
                                  }
                                  if (v63) {
                                    goto LABEL_139;
                                  }
                                }
                                else
                                {
                                  std::string::size_type v43 = v67.__r_.__value_.__l.__size_;
                                  unsigned int v42 = (void *)v67.__r_.__value_.__r.__words[0];
                                  unsigned __int8 v44 = HIBYTE(v67.__r_.__value_.__r.__words[2]);
                                  unint64_t v62 = HIBYTE(v24);
                                  if (v24 < 0) {
                                    unint64_t v62 = size;
                                  }
                                  if (v62) {
                                    goto LABEL_139;
                                  }
                                }
LABEL_136:
                                if ((v44 & 0x80u) == 0) {
                                  std::string::size_type v43 = v44;
                                }
                                if (!v43)
                                {
LABEL_140:
                                  if ((v44 & 0x80) != 0)
                                  {
                                    operator delete(v42);
                                    if ((v24 & 0x8000000000000000) == 0) {
                                      return v6;
                                    }
                                  }
                                  else if ((v24 & 0x8000000000000000) == 0)
                                  {
                                    return v6;
                                  }
                                  operator delete(v22);
                                  return v6;
                                }
LABEL_139:
                                std::string::__assign_external(a1, (const std::string::value_type *)*MEMORY[0x263F26228]);
                                goto LABEL_140;
                              }
                            }
                            else if ((SHIBYTE(__p.st_gid) & 0x80000000) == 0)
                            {
                              goto LABEL_111;
                            }
                            operator delete(*(void **)&__p.st_dev);
                            if (NumberOfLogDumps >> 31) {
                              int v52 = -1;
                            }
                            else {
                              int v52 = NumberOfLogDumps;
                            }
                            if (v52 == -1) {
                              goto LABEL_123;
                            }
                            goto LABEL_121;
                          }
                        }
                        memmove(v56, v53, v55);
                        goto LABEL_109;
                      }
                    }
                    memmove(v41, v38, v40);
                    goto LABEL_88;
                  }
                }
                else if (v6)
                {
                  goto LABEL_60;
                }
                unsigned int v42 = 0;
                std::string::size_type v43 = 0;
                unsigned __int8 v44 = 0;
                unint64_t v45 = HIBYTE(v24);
                if (v24 < 0) {
                  unint64_t v45 = size;
                }
                if (v45) {
                  goto LABEL_139;
                }
                goto LABEL_136;
              }
            }
            memmove(v30, v27, v29);
            goto LABEL_53;
          }
        }
        else if (v9)
        {
          goto LABEL_18;
        }
        int v22 = 0;
        std::string::size_type size = 0;
        uint64_t v24 = 0;
        goto LABEL_45;
      }
    }
    memmove(p_dst, v2, v4);
    goto LABEL_11;
  }
  return 1;
}

void sub_2636F6E5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  if (a31 < 0) {
    operator delete(__p);
  }
  if (a16 < 0) {
    operator delete(a11);
  }
  if (v42 < 0) {
    operator delete(v41);
  }
  _Unwind_Resume(exception_object);
}

void sub_2636F6F9C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a35 < 0) {
    operator delete(__p);
  }
  if (a25 < 0) {
    JUMPOUT(0x2636F6F90);
  }
  JUMPOUT(0x2636F6F94);
}

uint64_t ctu::SharedLockable<SharedData>::execute_sync<BOOL SharedData::getPreference<std::string>(std::string const&,std::string &)::{lambda(void)#1}>(os_unfair_lock_s *a1, uint64_t a2)
{
  size_t v3 = a1 + 4;
  os_unfair_lock_lock(a1 + 4);
  size_t v4 = *(uint64_t (****)(void, uint64_t))(a2 + 16);
  if (*(char *)(*(void *)a2 + 23) >= 0) {
    uint64_t v5 = *(const char **)a2;
  }
  else {
    uint64_t v5 = **(const char ***)a2;
  }
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v9, v5);
  uint64_t v6 = (const void *)(**v4)(v4, v9);
  if (v6)
  {
    uint64_t v7 = ctu::cf::assign();
    CFRelease(v6);
  }
  else
  {
    uint64_t v7 = 0;
  }
  MEMORY[0x263E68C90](&v9);
  os_unfair_lock_unlock(v3);
  return v7;
}

uint64_t __cxx_global_var_init_6()
{
  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<SharedData>::~PthreadMutexGuardPolicy, &ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance, &dword_26368A000);
  }
  return result;
}

{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<support::log::manager_global>::~PthreadMutexGuardPolicy, &ctu::Singleton<support::log::manager_global,support::log::manager_global,ctu::PthreadMutexGuardPolicy<support::log::manager_global>>::sInstance, &dword_26368A000);
  }
  return result;
}

void *PowerManager::PowerManager(void *a1, uint64_t *a2)
{
  *a1 = &unk_270EA85C0;
  size_t v3 = a1 + 1;
  size_t v4 = (std::__shared_weak_count *)a2[1];
  uint64_t v6 = *a2;
  uint64_t v7 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  PowerManager::State::create(&v6, v3);
  if (v7) {
    std::__shared_weak_count::__release_weak(v7);
  }
  PowerManager::State::init((PowerManager::State *)*v3);
  return a1;
}

{
  uint64_t *v3;
  std::__shared_weak_count *v4;
  uint64_t v6;
  std::__shared_weak_count *v7;

  *a1 = &unk_270EA85C0;
  size_t v3 = a1 + 1;
  size_t v4 = (std::__shared_weak_count *)a2[1];
  uint64_t v6 = *a2;
  uint64_t v7 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  PowerManager::State::create(&v6, v3);
  if (v7) {
    std::__shared_weak_count::__release_weak(v7);
  }
  PowerManager::State::init((PowerManager::State *)*v3);
  return a1;
}

void sub_2636F7164(_Unwind_Exception *a1)
{
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_2636F7178(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (!a10) {
    _Unwind_Resume(exception_object);
  }
  std::__shared_weak_count::__release_weak(a10);
  _Unwind_Resume(exception_object);
}

void PowerManager::State::create(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  size_t v4 = operator new(0x120uLL);
  uint64_t v5 = (uint64_t)v4;
  uint64_t v6 = (std::__shared_weak_count *)a1[1];
  uint64_t v7 = *a1;
  uint64_t v8 = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  PowerManager::State::State((uint64_t)v4, &v7);
  *a2 = 0xAAAAAAAAAAAAAAAALL;
  a2[1] = 0xAAAAAAAAAAAAAAAALL;
  std::shared_ptr<PowerManager::State>::shared_ptr[abi:ne180100]<PowerManager::State,std::shared_ptr<PowerManager::State> ctu::SharedSynchronizable<PowerManager::State>::make_shared_ptr<PowerManager::State>(PowerManager::State*)::{lambda(PowerManager::State*)#1},void>(a2, v5);
  ctu::Loggable<PowerManager::State,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(*a2);
  if (v8) {
    std::__shared_weak_count::__release_weak(v8);
  }
}

void sub_2636F722C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100](v10);
  if (a10) {
    std::__shared_weak_count::__release_weak(a10);
  }
  _Unwind_Resume(a1);
}

void PowerManager::State::init(PowerManager::State *this)
{
  uint64_t v5 = *((void *)this + 9);
  size_t v3 = (std::__shared_weak_count *)*((void *)this + 10);
  size_t v4 = (char *)this + 72;
  if (!v3 || (uint64_t v6 = std::__shared_weak_count::lock(v3)) == 0) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v7 = v6;
  p_shared_weak_owners = &v6->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v7);
  }
  v11[0] = MEMORY[0x263EF8330];
  v11[1] = 1174405120;
  v11[2] = ___ZN12PowerManager5State4initEv_block_invoke;
  v11[3] = &__block_descriptor_tmp_32_0;
  v11[4] = this;
  void v11[5] = v5;
  size_t v12 = v7;
  size_t v13 = v11;
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  block[0] = MEMORY[0x263EF8330];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableIN12PowerManager5StateEE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS8__block_invoke;
  block[3] = &__block_descriptor_tmp_33_0;
  block[4] = v4;
  void block[5] = &v13;
  uint64_t v9 = *((void *)this + 11);
  if (!*((void *)this + 12))
  {
    dispatch_sync(v9, block);
    uint64_t v10 = v12;
    if (!v12) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  dispatch_async_and_wait(v9, block);
  uint64_t v10 = v12;
  if (v12) {
LABEL_7:
  }
    std::__shared_weak_count::__release_weak(v10);
LABEL_8:
  std::__shared_weak_count::__release_weak(v7);
}

void sub_2636F7468(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  size_t v12 = *(std::__shared_weak_count **)(v10 + 16);
  if (v12)
  {
    if (!atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  _Unwind_Resume(exception_object);
}

void PowerManager::create(uint64_t *a1@<X0>, void *a2@<X8>)
{
  size_t v4 = operator new(0x18uLL);
  uint64_t v5 = v4;
  uint64_t v6 = *a1;
  uint64_t v7 = (std::__shared_weak_count *)a1[1];
  v9[0] = v6;
  v9[1] = (uint64_t)v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  PowerManager::PowerManager(v4, v9);
  *a2 = v5;
  uint64_t v8 = operator new(0x20uLL);
  void *v8 = &unk_270EA8AB8;
  v8[1] = 0;
  _OWORD v8[2] = 0;
  v8[3] = v5;
  a2[1] = v8;
  if (v7)
  {
    std::__shared_weak_count::__release_weak(v7);
  }
}

void sub_2636F758C(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 48))(v1);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  _Unwind_Resume(a1);
}

void PowerManager::registerForPowerEvents(uint64_t a1, const void **a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (*a2) {
    size_t v3 = _Block_copy(*a2);
  }
  else {
    size_t v3 = 0;
  }
  v5[0] = MEMORY[0x263EF8330];
  v5[1] = 1174405120;
  v5[2] = ___ZN12PowerManager5State22registerForPowerEventsEN8dispatch5blockIU13block_pointerFv10PowerStateNS1_13group_sessionEEEE_block_invoke;
  v5[3] = &__block_descriptor_tmp_38;
  v5[4] = v2;
  if (v3) {
    size_t v4 = _Block_copy(v3);
  }
  else {
    size_t v4 = 0;
  }
  aBlocunint64_t k = v4;
  ctu::SharedSynchronizable<PowerManager::State>::execute_wrapped((uint64_t *)(v2 + 72), (uint64_t)v5);
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v3) {
    _Block_release(v3);
  }
}

void PowerManager::createPowerAssertion(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, NSObject **a4@<X8>)
{
  uint64_t v6 = *(void **)(a1 + 8);
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v17, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v17 = *(std::string *)a2;
  }
  uint64_t v7 = dispatch_group_create();
  *a4 = v7;
  xpc_object_t v18 = v6;
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__p, v17.__r_.__value_.__l.__data_, v17.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = v17;
  }
  uint64_t v20 = a3;
  dispatch_group_t group = v7;
  if (v7)
  {
    dispatch_retain(v7);
    if (group) {
      dispatch_group_enter(group);
    }
  }
  uint64_t v8 = (std::__shared_weak_count *)v6[10];
  if (!v8 || (uint64_t v9 = v6[9], (v10 = std::__shared_weak_count::lock(v8)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  xpc_object_t v11 = v10;
  size_t v12 = operator new(0x30uLL);
  void *v12 = v18;
  size_t v13 = (std::string *)(v12 + 1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v13, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v13->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    v12[3] = *((void *)&__p.__r_.__value_.__l + 2);
  }
  dispatch_group_t v14 = group;
  v12[4] = v20;
  void v12[5] = v14;
  dispatch_group_t group = 0;
  int v15 = v6[11];
  atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  int v16 = operator new(0x18uLL);
  void *v16 = v12;
  v16[1] = v9;
  void v16[2] = v11;
  dispatch_async_f(v15, v16, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<PowerManager::State>::execute_wrapped<PowerManager::State::createPowerAssertion(std::string,std::chrono::duration<long long,std::ratio<1l,1000l>>)::{lambda(void)#1}>(PowerManager::State::createPowerAssertion(std::string,std::chrono::duration<long long,std::ratio<1l,1000l>>)::{lambda(void)#1} &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<PowerManager::State::createPowerAssertion(std::string,std::chrono::duration<long long,std::ratio<1l,1000l>>)::{lambda(void)#1},std::default_delete<PowerManager::State::createPowerAssertion(std::string,std::chrono::duration<long long,std::ratio<1l,1000l>>)::{lambda(void)#1}>>)::{lambda(void *)#1}::__invoke);
  if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  if (group)
  {
    dispatch_group_leave(group);
    if (group) {
      dispatch_release(group);
    }
  }
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v17.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
LABEL_24:
    operator delete(v17.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_24;
  }
}

void sub_2636F78C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (v14)
  {
    dispatch_release(v14);
    if ((a14 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a14 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

void PowerManager::releasePowerAssertion(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)(a1 + 8);
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v11, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    size_t v12 = v2;
    if ((SHIBYTE(v11.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_3;
    }
LABEL_5:
    std::string::__init_copy_ctor_external(&__p, v11.__r_.__value_.__l.__data_, v11.__r_.__value_.__l.__size_);
    goto LABEL_6;
  }
  std::string v11 = *(std::string *)a2;
  size_t v12 = v2;
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_5;
  }
LABEL_3:
  std::string __p = v11;
LABEL_6:
  size_t v3 = (std::__shared_weak_count *)v2[10];
  if (!v3 || (uint64_t v4 = v2[9], (v5 = std::__shared_weak_count::lock(v3)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v6 = v5;
  uint64_t v7 = operator new(0x20uLL);
  void *v7 = v12;
  uint64_t v8 = (std::string *)(v7 + 1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v8, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    v7[3] = *((void *)&__p.__r_.__value_.__l + 2);
  }
  uint64_t v9 = v2[11];
  atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v10 = operator new(0x18uLL);
  void *v10 = v7;
  v10[1] = v4;
  v10[2] = v6;
  dispatch_async_f(v9, v10, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<PowerManager::State>::execute_wrapped<PowerManager::State::releasePowerAssertion(std::string)::{lambda(void)#1}>(PowerManager::State::releasePowerAssertion(std::string)::{lambda(void)#1} &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<PowerManager::State::releasePowerAssertion(std::string)::{lambda(void)#1},std::default_delete<PowerManager::State::releasePowerAssertion(std::string)::{lambda(void)#1}>>)::{lambda(void *)#1}::__invoke);
  if (atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_13;
    }
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_13:
      if ((SHIBYTE(v11.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        return;
      }
LABEL_17:
      operator delete(v11.__r_.__value_.__l.__data_);
      return;
    }
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_17;
  }
}

void sub_2636F7AC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void PowerManager::initialize(PowerManager *this)
{
  uint64_t v1 = *((void *)this + 1);
  v2[0] = MEMORY[0x263EF8330];
  v2[1] = 0x40000000;
  v2[2] = ___ZN12PowerManager5State10initializeEv_block_invoke;
  v2[3] = &__block_descriptor_tmp_60_1;
  v2[4] = v1;
  ctu::SharedSynchronizable<PowerManager::State>::execute_wrapped((uint64_t *)(v1 + 72), (uint64_t)v2);
}

void PowerManager::shutdown(PowerManager *this)
{
  uint64_t v1 = *((void *)this + 1);
  v2[0] = MEMORY[0x263EF8330];
  v2[1] = 0x40000000;
  v2[2] = ___ZN12PowerManager5State8shutdownEv_block_invoke;
  v2[3] = &__block_descriptor_tmp_61_1;
  v2[4] = v1;
  ctu::SharedSynchronizable<PowerManager::State>::execute_wrapped((uint64_t *)(v1 + 72), (uint64_t)v2);
}

void PowerManager::~PowerManager(PowerManager *this)
{
  *(void *)this = &unk_270EA85C0;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v1)
  {
    if (!atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void PowerManager::~PowerManager(std::__shared_weak_count **this)
{
  uint64_t v1 = (PowerManager *)this;
  *this = (std::__shared_weak_count *)&unk_270EA85C0;
  uint64_t v2 = this[2];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    this = (std::__shared_weak_count **)v1;
  }
  else if (((vars8 ^ (2 * vars8)) & 0x4000000000000000) != 0)
  {
    __break(0xC471u);
  }
  operator delete(this);
}

void ctu::Loggable<PowerManager::State,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(uint64_t a1)
{
  uint64_t v1 = a1 + 56;
  if (*(void *)(a1 + 56))
  {
    if (!*(void *)(a1 + 80) || (uint64_t v2 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(a1 + 80))) == 0) {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    size_t v3 = v2;
    ctu::LoggerCommonBase::getLogDomain((ctu::LoggerCommonBase *)(v1 - 48));
    ctu::TrackedLogger::registerLoggerToServer();
    if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_2636F7E44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

void sub_2636F7E60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void *std::shared_ptr<PowerManager::State>::shared_ptr[abi:ne180100]<PowerManager::State,std::shared_ptr<PowerManager::State> ctu::SharedSynchronizable<PowerManager::State>::make_shared_ptr<PowerManager::State>(PowerManager::State*)::{lambda(PowerManager::State*)#1},void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  uint64_t v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = &v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&unk_270EA8630;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)a2;
  a1[1] = v4;
  if (!a2) {
    return a1;
  }
  uint64_t v6 = *(std::__shared_weak_count **)(a2 + 80);
  if (v6)
  {
    if (v6->__shared_owners_ == -1)
    {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      *(void *)(a2 + 72) = a2;
      *(void *)(a2 + 80) = v4;
      std::__shared_weak_count::__release_weak(v6);
      if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
        goto LABEL_8;
      }
    }
    return a1;
  }
  atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  *(void *)(a2 + 72) = a2;
  *(void *)(a2 + 80) = v4;
  if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
LABEL_8:
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void sub_2636F7F8C(void *a1)
{
  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[11], v1, (dispatch_function_t)std::shared_ptr<PowerManager::State> ctu::SharedSynchronizable<PowerManager::State>::make_shared_ptr<PowerManager::State>(PowerManager::State*)::{lambda(PowerManager::State*)#1}::operator() const(PowerManager::State*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_2636F7FB4(_Unwind_Exception *a1)
{
}

void std::__shared_ptr_pointer<PowerManager::State *,std::shared_ptr<PowerManager::State> ctu::SharedSynchronizable<PowerManager::State>::make_shared_ptr<PowerManager::State>(PowerManager::State*)::{lambda(PowerManager::State *)#1},std::allocator<PowerManager::State>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<PowerManager::State *,std::shared_ptr<PowerManager::State> ctu::SharedSynchronizable<PowerManager::State>::make_shared_ptr<PowerManager::State>(PowerManager::State*)::{lambda(PowerManager::State *)#1},std::allocator<PowerManager::State>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<PowerManager::State *,std::shared_ptr<PowerManager::State> ctu::SharedSynchronizable<PowerManager::State>::make_shared_ptr<PowerManager::State>(PowerManager::State*)::{lambda(PowerManager::State *)#1},std::allocator<PowerManager::State>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableIN12PowerManager5StateEE15make_shared_ptrIS2_EENSt3__110shared_ptrIT_EEPS7_EUlPS2_E_") {
    return a1 + 24;
  }
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableIN12PowerManager5StateEE15make_shared_ptrIS2_EENSt3__110shar"
                                "ed_ptrIT_EEPS7_EUlPS2_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableIN12PowerManager5StateEE15make_shared_ptrIS2_EENSt3__110shared_ptrIT_EEPS7_EUlPS2_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableIN12PowerManager5StateEE15make_shared_ptrIS2_EENSt3__110shared_ptrIT_EEPS7_EUlPS2_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24; {
  return 0;
  }
}

uint64_t std::shared_ptr<PowerManager::State> ctu::SharedSynchronizable<PowerManager::State>::make_shared_ptr<PowerManager::State>(PowerManager::State*)::{lambda(PowerManager::State*)#1}::operator() const(PowerManager::State*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t PowerManager::State::State(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_270EA8680;
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v14, "com.apple.telephony.abm", "power.mgr");
  GetABMLogServer(&v12);
  initially_inactive = dispatch_queue_attr_make_initially_inactive(0);
  uint64_t v5 = dispatch_queue_create_with_target_V2("power.mgr", initially_inactive, 0);
  dispatch_set_qos_class_floor(v5, QOS_CLASS_DEFAULT, 0);
  dispatch_activate(v5);
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = v5;
  if (v5)
  {
    dispatch_retain(v5);
    *(void *)(a1 + 96) = 0;
    dispatch_release(v5);
  }
  else
  {
    *(void *)(a1 + 96) = 0;
  }
  *(void *)a1 = &unk_270EA8790;
  ctu::OsLogContext::OsLogContext();
  ctu::OsLogContext::OsLogContext();
  ctu::LoggerCommonBase::LoggerCommonBase();
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v16);
  *(void *)(a1 + 8) = &unk_270EA5428;
  uint64_t v6 = v13;
  *(void *)(a1 + 56) = v12;
  *(void *)(a1 + 64) = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v15);
  *(void *)a1 = &unk_270EA8750;
  uint64_t v7 = v13;
  if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v14);
  *(void *)a1 = &unk_270EA8680;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = 0x200000001;
  *(_DWORD *)(a1 + 128) = -536870144;
  uint64_t v8 = (PowerStats *)operator new(0x88uLL);
  PowerStats::PowerStats(v8);
  *(void *)(a1 + 136) = v8;
  uint64_t v9 = operator new(0x20uLL);
  *uint64_t v9 = &unk_270EA9A68;
  v9[1] = 0;
  uint64_t v9[2] = 0;
  v9[3] = v8;
  *(_OWORD *)(a1 + 152) = 0u;
  *(void *)(a1 + 144) = v9;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(void *)(a1 + 208) = 0;
  *(void *)(a1 + 200) = a1 + 208;
  *(void *)(a1 + 232) = 0;
  *(void *)(a1 + 216) = 0;
  *(void *)(a1 + 224) = a1 + 232;
  *(void *)(a1 + 264) = 0;
  *(void *)(a1 + 256) = 0;
  *(void *)(a1 + 240) = 0;
  *(void *)(a1 + 248) = a1 + 256;
  *(void *)(a1 + 272) = *a2;
  uint64_t v10 = a2[1];
  *(void *)(a1 + 280) = v10;
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 16), 1uLL, memory_order_relaxed);
  }
  ctu::LoggerCommonBase::setLogLevel();
  return a1;
}

void sub_2636F8368(_Unwind_Exception *a1)
{
  uint64_t v8 = *(std::__shared_weak_count **)(v1 + 280);
  if (v8) {
    std::__shared_weak_count::__release_weak(v8);
  }
  std::__tree<std::__value_type<std::string,dispatch::group_session>,std::__map_value_compare<std::string,std::__value_type<std::string,dispatch::group_session>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dispatch::group_session>>>::destroy(*(char **)(v1 + 256));
  std::__tree<std::__value_type<std::string,std::shared_ptr<support::misc::Watchdog>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<support::misc::Watchdog>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<support::misc::Watchdog>>>>::destroy(*(void *)(v1 + 232));
  std::__tree<std::__value_type<std::string,std::shared_ptr<support::misc::Watchdog>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<support::misc::Watchdog>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<support::misc::Watchdog>>>>::destroy(*(void *)(v1 + 208));
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100](v5);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100](v4);
  uint64_t v9 = *(const void **)(v1 + 160);
  if (v9) {
    _Block_release(v9);
  }
  if (*v6) {
    _Block_release(*v6);
  }
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100](v3);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100](v2);
  ctu::SharedLoggable<PowerManager::State,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable((void *)v1);
  _Unwind_Resume(a1);
}

void sub_2636F83E0(_Unwind_Exception *a1)
{
  PowerStats::~PowerStats(v3);
  operator delete(v3);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100](v2);
  ctu::SharedLoggable<PowerManager::State,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(v1);
  _Unwind_Resume(a1);
}

void sub_2636F8414(_Unwind_Exception *a1)
{
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100](v2);
  ctu::SharedLoggable<PowerManager::State,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(v1);
  _Unwind_Resume(a1);
}

void sub_2636F8430(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15)
{
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&a15);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&a13);
  ctu::SharedSynchronizable<data::TransportService::State>::~SharedSynchronizable(v15);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&a11);
  _Unwind_Resume(a1);
}

void sub_2636F8464(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)va);
  _Unwind_Resume(a1);
}

void *ctu::SharedLoggable<PowerManager::State,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(void *a1)
{
  *a1 = &unk_270EA8790;
  MEMORY[0x263E68AF0](a1 + 1);
  uint64_t v2 = a1[12];
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = a1[11];
  if (v3) {
    dispatch_release(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[10];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = &unk_270EA8790;
  MEMORY[0x263E68AF0](a1 + 1);
  uint64_t v2 = a1[12];
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = a1[11];
  if (v3) {
    dispatch_release(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[10];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

void PowerManager::State::~State(PowerManager::State *this)
{
  PowerManager::State::~State(this);

  operator delete(v1);
}

{
  uint64_t v2;
  const void *v3;
  NSObject *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  const void *v8;
  const void *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  NSObject *v12;
  NSObject *v13;
  std::__shared_weak_count *v14;
  uint8_t v15[16];

  *(void *)this = &unk_270EA8680;
  uint64_t v2 = *((void *)this + 20);
  if (v2)
  {
    (*(void (**)(uint64_t, uint64_t))(v2 + 16))(v2, 1);
    uint64_t v3 = (const void *)*((void *)this + 20);
    *((void *)this + 20) = 0;
    if (v3) {
      _Block_release(v3);
    }
  }
  uint64_t v4 = *((void *)this + 5);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int v15 = 0;
    _os_log_impl(&dword_26368A000, v4, OS_LOG_TYPE_DEFAULT, "#I Gone!", v15, 2u);
  }
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 35);
  if (v5) {
    std::__shared_weak_count::__release_weak(v5);
  }
  std::__tree<std::__value_type<std::string,dispatch::group_session>,std::__map_value_compare<std::string,std::__value_type<std::string,dispatch::group_session>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dispatch::group_session>>>::destroy(*((char **)this + 32));
  std::__tree<std::__value_type<std::string,std::shared_ptr<support::misc::Watchdog>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<support::misc::Watchdog>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<support::misc::Watchdog>>>>::destroy(*((void *)this + 29));
  std::__tree<std::__value_type<std::string,std::shared_ptr<support::misc::Watchdog>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<support::misc::Watchdog>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<support::misc::Watchdog>>>>::destroy(*((void *)this + 26));
  uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 24);
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  uint64_t v7 = (std::__shared_weak_count *)*((void *)this + 22);
  if (!v7 || atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    uint64_t v8 = (const void *)*((void *)this + 20);
    if (!v8) {
      goto LABEL_15;
    }
    goto LABEL_14;
  }
  ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
  std::__shared_weak_count::__release_weak(v7);
  uint64_t v8 = (const void *)*((void *)this + 20);
  if (v8) {
LABEL_14:
  }
    _Block_release(v8);
LABEL_15:
  uint64_t v9 = (const void *)*((void *)this + 19);
  if (v9) {
    _Block_release(v9);
  }
  uint64_t v10 = (std::__shared_weak_count *)*((void *)this + 18);
  if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  std::string v11 = (std::__shared_weak_count *)*((void *)this + 14);
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  *(void *)this = &unk_270EA8790;
  MEMORY[0x263E68AF0]((char *)this + 8);
  uint64_t v12 = *((void *)this + 12);
  if (v12) {
    dispatch_release(v12);
  }
  size_t v13 = *((void *)this + 11);
  if (v13) {
    dispatch_release(v13);
  }
  dispatch_group_t v14 = (std::__shared_weak_count *)*((void *)this + 10);
  if (v14) {
    std::__shared_weak_count::__release_weak(v14);
  }
}

uint64_t ctu::Loggable<PowerManager::State,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig(uint64_t a1)
{
  return MEMORY[0x270F97428](a1 + 8);
}

void ctu::Loggable<PowerManager::State,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName(char *a1@<X8>)
{
  a1[23] = 9;
  strcpy(a1, "power.mgr");
}

uint64_t ctu::Loggable<PowerManager::State,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return MEMORY[0x270F978E0](a1 + 8);
}

void ctu::SharedLoggable<PowerManager::State,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(void *a1)
{
  *a1 = &unk_270EA8790;
  MEMORY[0x263E68AF0](a1 + 1);
  uint64_t v2 = a1[12];
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = a1[11];
  if (v3) {
    dispatch_release(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[10];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }

  operator delete(a1);
}

void *ctu::Loggable<PowerManager::State,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_270EA8790;
  MEMORY[0x263E68AF0](a1 + 1);
  return a1;
}

void ctu::Loggable<PowerManager::State,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_270EA8790;
  MEMORY[0x263E68AF0](a1 + 1);

  operator delete(a1);
}

void std::__tree<std::__value_type<std::string,dispatch::group_session>,std::__map_value_compare<std::string,std::__value_type<std::string,dispatch::group_session>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dispatch::group_session>>>::destroy(char *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,dispatch::group_session>,std::__map_value_compare<std::string,std::__value_type<std::string,dispatch::group_session>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dispatch::group_session>>>::destroy(*(void *)a1);
    std::__tree<std::__value_type<std::string,dispatch::group_session>,std::__map_value_compare<std::string,std::__value_type<std::string,dispatch::group_session>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dispatch::group_session>>>::destroy(*((void *)a1 + 1));
    uint64_t v2 = *((void *)a1 + 7);
    if (v2)
    {
      dispatch_group_leave(v2);
      uint64_t v3 = *((void *)a1 + 7);
      if (v3) {
        dispatch_release(v3);
      }
    }
    if (a1[55] < 0)
    {
      operator delete(*((void **)a1 + 4));
      uint64_t v4 = a1;
    }
    else
    {
      uint64_t v4 = a1;
    }
    operator delete(v4);
  }
}

void std::__tree<std::__value_type<std::string,std::shared_ptr<support::misc::Watchdog>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<support::misc::Watchdog>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<support::misc::Watchdog>>>>::destroy(uint64_t a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,std::shared_ptr<support::misc::Watchdog>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<support::misc::Watchdog>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<support::misc::Watchdog>>>>::destroy(*(void *)a1);
    std::__tree<std::__value_type<std::string,std::shared_ptr<support::misc::Watchdog>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<support::misc::Watchdog>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<support::misc::Watchdog>>>>::destroy(*(void *)(a1 + 8));
    uint64_t v2 = *(std::__shared_weak_count **)(a1 + 64);
    if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      {
LABEL_5:
        uint64_t v3 = (void *)a1;
LABEL_7:
        operator delete(v3);
        return;
      }
    }
    else if ((*(char *)(a1 + 55) & 0x80000000) == 0)
    {
      goto LABEL_5;
    }
    operator delete(*(void **)(a1 + 32));
    uint64_t v3 = (void *)a1;
    goto LABEL_7;
  }
}

void ___ZN12PowerManager5State4initEv_block_invoke(uint64_t a1)
{
  v40.__r_.__value_.__r.__words[2] = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v2 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v2 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v39 = v2;
  *(_OWORD *)&v40.__r_.__value_.__l.__data_ = v2;
  long long v38 = v2;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN12PowerManager5State4initEv_block_invoke_2;
  aBlock[3] = &__block_descriptor_tmp_18;
  long long v21 = *(_OWORD *)(a1 + 32);
  long long v36 = v21;
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 48);
  CFTypeID v37 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = _Block_copy(aBlock);
  uint64_t v5 = *(NSObject **)(v21 + 88);
  *(void *)&long long v38 = 1;
  *((void *)&v38 + 1) = v5;
  if (v5) {
    dispatch_retain(v5);
  }
  if (v4)
  {
    long long v39 = (unint64_t)_Block_copy(v4);
    v40.__r_.__value_.__r.__words[0] = 5063233;
    *((unsigned char *)&v40.__r_.__value_.__s + 23) = 3;
    _Block_release(v4);
  }
  else
  {
    long long v39 = 0uLL;
    v40.__r_.__value_.__r.__words[0] = 5063233;
    *((unsigned char *)&v40.__r_.__value_.__s + 23) = 3;
  }
  ctu::power::manager::get(buf, (ctu::power::manager *)v5);
  long long v6 = *(_OWORD *)buf;
  memset(buf, 0, 16);
  uint64_t v7 = *(std::__shared_weak_count **)(v21 + 176);
  *(_OWORD *)(v21 + 168) = v6;
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  uint64_t v8 = (std::__shared_weak_count *)buf[1];
  if (buf[1] && !atomic_fetch_add((atomic_ullong *volatile)(buf[1] + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  long long v30 = v38;
  if (*((void *)&v38 + 1)) {
    dispatch_retain(*((dispatch_object_t *)&v38 + 1));
  }
  uint64_t v9 = (void *)v39;
  if ((void)v39) {
    uint64_t v9 = _Block_copy((const void *)v39);
  }
  uint64_t v31 = v9;
  uint64_t v10 = (void *)*((void *)&v39 + 1);
  if (*((void *)&v39 + 1)) {
    uint64_t v10 = _Block_copy(*((const void **)&v39 + 1));
  }
  uint64_t v32 = v10;
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__p, v40.__r_.__value_.__l.__data_, v40.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = v40;
  }
  ctu::power::manager::registerListener();
  long long v11 = *(_OWORD *)buf;
  memset(buf, 0, 16);
  uint64_t v12 = *(std::__shared_weak_count **)(v21 + 192);
  *(_OWORD *)(v21 + 184) = v11;
  if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  size_t v13 = (std::__shared_weak_count *)buf[1];
  if (!buf[1] || atomic_fetch_add((atomic_ullong *volatile)(buf[1] + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_29;
    }
LABEL_32:
    operator delete(__p.__r_.__value_.__l.__data_);
    dispatch_group_t v14 = v32;
    if (!v32) {
      goto LABEL_34;
    }
    goto LABEL_33;
  }
  ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
  std::__shared_weak_count::__release_weak(v13);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_32;
  }
LABEL_29:
  dispatch_group_t v14 = v32;
  if (v32) {
LABEL_33:
  }
    _Block_release(v14);
LABEL_34:
  if (v31) {
    _Block_release(v31);
  }
  if (*((void *)&v30 + 1)) {
    dispatch_release(*((dispatch_object_t *)&v30 + 1));
  }
  int v15 = *(NSObject **)(v21 + 40);
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf[0]) = 0;
    _os_log_impl(&dword_26368A000, v15, OS_LOG_TYPE_DEFAULT, "#I Registered power listener", (uint8_t *)buf, 2u);
  }
  memset(buf, 170, 16);
  abm::AWDHelperGetConnection(buf);
  if (buf[0])
  {
    uint64_t v23 = MEMORY[0x263EF8330];
    uint64_t v24 = 1174405120;
    uint64_t v25 = ___ZN12PowerManager5State4initEv_block_invoke_22;
    uint64_t v26 = &__block_descriptor_tmp_29_0;
    uint64_t v17 = *(void *)(a1 + 40);
    int v16 = *(std::__shared_weak_count **)(a1 + 48);
    uint64_t v27 = v21;
    uint64_t v28 = v17;
    size_t v29 = v16;
    if (v16) {
      atomic_fetch_add_explicit(&v16->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    wis::WISServerConnection::RegisterQueriableMetricCallbackForIdentifier();
    if (v29)
    {
      std::__shared_weak_count::__release_weak(v29);
      xpc_object_t v18 = (std::__shared_weak_count *)buf[1];
      if (!buf[1]) {
        goto LABEL_50;
      }
      goto LABEL_48;
    }
  }
  else
  {
    __darwin_ino64_t v19 = *(NSObject **)(v21 + 40);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)int v22 = 0;
      _os_log_error_impl(&dword_26368A000, v19, OS_LOG_TYPE_ERROR, "AWD connection setup failed", v22, 2u);
      xpc_object_t v18 = (std::__shared_weak_count *)buf[1];
      if (!buf[1]) {
        goto LABEL_50;
      }
      goto LABEL_48;
    }
  }
  xpc_object_t v18 = (std::__shared_weak_count *)buf[1];
  if (!buf[1]) {
    goto LABEL_50;
  }
LABEL_48:
  if (!atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
LABEL_50:
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v40.__r_.__value_.__l.__data_);
    uint64_t v20 = (const void *)*((void *)&v39 + 1);
    if (!*((void *)&v39 + 1)) {
      goto LABEL_55;
    }
    goto LABEL_54;
  }
  uint64_t v20 = (const void *)*((void *)&v39 + 1);
  if (*((void *)&v39 + 1)) {
LABEL_54:
  }
    _Block_release(v20);
LABEL_55:
  if ((void)v39) {
    _Block_release((const void *)v39);
  }
  if (*((void *)&v38 + 1)) {
    dispatch_release(*((dispatch_object_t *)&v38 + 1));
  }
  if (v37) {
    std::__shared_weak_count::__release_weak(v37);
  }
}

void sub_2636F8F7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, std::__shared_weak_count *a19, char a20,dispatch_object_t object,void *a22,void *aBlock,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,std::__shared_weak_count *a36)
{
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (a22) {
    _Block_release(a22);
  }
  if (object)
  {
    dispatch_release(object);
    ctu::power::manager::parameters::~parameters((void **)(v36 - 128));
    long long v38 = a36;
    if (!a36) {
LABEL_7:
    }
      _Unwind_Resume(a1);
  }
  else
  {
    ctu::power::manager::parameters::~parameters((void **)(v36 - 128));
    long long v38 = a36;
    if (!a36) {
      goto LABEL_7;
    }
  }
  std::__shared_weak_count::__release_weak(v38);
  _Unwind_Resume(a1);
}

void ___ZN12PowerManager5State4initEv_block_invoke_2(void *a1, ctu::power::manager *a2, const void **a3)
{
  uint64_t v64 = *MEMORY[0x263EF8340];
  uint64_t v5 = a1[4];
  long long v6 = (std::__shared_weak_count *)a1[6];
  if (!v6)
  {
    uint64_t v8 = 0;
    goto LABEL_7;
  }
  uint64_t v8 = std::__shared_weak_count::lock(v6);
  if (!v8 || !a1[5])
  {
LABEL_7:
    (*((void (**)(void))*a3 + 2))();
    if (!v8) {
      return;
    }
    goto LABEL_90;
  }
  if (*a3) {
    uint64_t v9 = (void (**)(void *, uint64_t))_Block_copy(*a3);
  }
  else {
    uint64_t v9 = 0;
  }
  int v10 = *(_DWORD *)(v5 + 120);
  uint64_t v11 = *(void *)(v5 + 124);
  int v46 = v11;
  HIDWORD(v12) = a2;
  LODWORD(v12) = a2 + 536870288;
  switch((v12 >> 4))
  {
    case 0u:
      if (v10 != 1) {
        goto LABEL_34;
      }
      int v13 = 0;
      int v14 = 1;
      if (*(void *)(v5 + 216)) {
        goto LABEL_31;
      }
      goto LABEL_49;
    case 1u:
      if (v10 != 1) {
        goto LABEL_34;
      }
      int v14 = 0;
      int v13 = v11 != 0;
      if (!*(void *)(v5 + 216)) {
        goto LABEL_49;
      }
      goto LABEL_31;
    case 2u:
      if (!v11) {
        goto LABEL_24;
      }
      goto LABEL_34;
    case 9u:
      if (v10) {
        BOOL v15 = 0;
      }
      else {
        BOOL v15 = v11 == 2;
      }
      if (!v15) {
        goto LABEL_34;
      }
LABEL_24:
      int v13 = 2;
      int v14 = 1;
      if (!*(void *)(v5 + 216)) {
        goto LABEL_49;
      }
      goto LABEL_31;
    case 0xBu:
      if (v10) {
        BOOL v16 = 1;
      }
      else {
        BOOL v16 = v11 == 2;
      }
      if (v16) {
        goto LABEL_34;
      }
      int v14 = 0;
      int v13 = 2;
      if (!*(void *)(v5 + 216)) {
        goto LABEL_49;
      }
LABEL_31:
      if (a2 == -536870288) {
        goto LABEL_34;
      }
      if (a2 != -536870272)
      {
LABEL_49:
        *(_DWORD *)(v5 + 120) = v14;
        *(_DWORD *)(v5 + 124) = v13;
        *(_DWORD *)(v5 + 128) = a2;
        uint64_t v26 = *(void *)(v5 + 136);
        int v54 = (int)a2;
        int v55 = v10;
        uint64_t v56 = v11;
        unint64_t v53 = __PAIR64__(v13, v14);
        PowerStats::reportSystemStateChange(v26, (uint64_t)&v55, (uint64_t *)&v53);
        uint64_t v27 = *(NSObject **)(v5 + 40);
        if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v28 = ctu::power::manager::asCString(a2);
          size_t v29 = "Unknown";
          long long v30 = "PoweredOn";
          int v31 = *(_DWORD *)(v5 + 120);
          uint64_t v32 = *(int *)(v5 + 124);
          if (v31 != 1) {
            long long v30 = "Unknown";
          }
          if (!v31) {
            long long v30 = "LowPower";
          }
          if (v32 <= 2) {
            size_t v29 = off_2655D5008[v32];
          }
          *(_DWORD *)std::string buf = 136315650;
          *(void *)&uint8_t buf[4] = v28;
          __int16 v58 = 2080;
          *(void *)size_t v59 = v30;
          *(_WORD *)&v59[8] = 2080;
          *(void *)&v59[10] = v29;
          _os_log_impl(&dword_26368A000, v27, OS_LOG_TYPE_DEFAULT, "#I Power notification: %s, Power state: %s, Sleep state: %s", buf, 0x20u);
        }
        int v33 = *(_DWORD *)(v5 + 128);
        switch(v33)
        {
          case -536870144:
            goto LABEL_60;
          case -536870256:
            v9[2](v9, 1);
            uint64_t v42 = *(void *)(v5 + 264);
            if (v42)
            {
              std::string::size_type v43 = *(NSObject **)(v5 + 40);
              if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)std::string buf = 134217984;
                *(void *)&uint8_t buf[4] = v42;
                _os_log_impl(&dword_26368A000, v43, OS_LOG_TYPE_DEFAULT, "#I Allowing deferred work to run (after WillNotSleep); count=%zd",
                  buf,
                  0xCu);
              }
              std::__tree<std::__value_type<std::string,dispatch::group_session>,std::__map_value_compare<std::string,std::__value_type<std::string,dispatch::group_session>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dispatch::group_session>>>::destroy(*(char **)(v5 + 256));
              *(void *)(v5 + 256) = 0;
              *(void *)(v5 + 264) = 0;
              *(void *)(v5 + 248) = v5 + 256;
            }
            break;
          case -536870272:
LABEL_60:
            uint64_t v34 = *(unsigned int *)(v5 + 120);
            long long v35 = dispatch_group_create();
            uint64_t v36 = *(void *)(v5 + 152);
            if (v36)
            {
              if (v35)
              {
                dispatch_retain(v35);
                dispatch_group_enter(v35);
                uint64_t v36 = *(void *)(v5 + 152);
              }
              *(void *)std::string buf = v35;
              (*(void (**)(uint64_t, uint64_t, unsigned char *))(v36 + 16))(v36, v34, buf);
              if (*(void *)buf)
              {
                dispatch_group_leave(*(dispatch_group_t *)buf);
                if (*(void *)buf) {
                  dispatch_release(*(dispatch_object_t *)buf);
                }
              }
            }
            CFTypeID v37 = *(std::__shared_weak_count **)(v5 + 80);
            if (!v37 || (v38 = *(void *)(v5 + 72), (long long v39 = std::__shared_weak_count::lock(v37)) == 0)) {
              std::__throw_bad_weak_ptr[abi:ne180100]();
            }
            std::string v40 = v39;
            atomic_fetch_add_explicit(&v39->__shared_weak_owners_, 1uLL, memory_order_relaxed);
            if (!atomic_fetch_add(&v39->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
              std::__shared_weak_count::__release_weak(v40);
            }
            block[0] = MEMORY[0x263EF8330];
            block[1] = 1174405120;
            block[2] = ___ZN12PowerManager5State28handlePowerNotification_syncEN8dispatch5blockIU13block_pointerFvbEEEj_block_invoke;
            block[3] = &__block_descriptor_tmp_36;
            block[4] = v5;
            dispatch_object_t object = v35;
            if (v35) {
              dispatch_retain(v35);
            }
            if (v9) {
              xpc_object_t v41 = _Block_copy(v9);
            }
            else {
              xpc_object_t v41 = 0;
            }
            aBlocunint64_t k = v41;
            uint64_t v50 = v38;
            CFTypeRef v51 = v40;
            atomic_fetch_add_explicit(&v40->__shared_weak_owners_, 1uLL, memory_order_relaxed);
            int v52 = v34;
            dispatch_group_notify(v35, *(dispatch_queue_t *)(v5 + 88), block);
            if (v51) {
              std::__shared_weak_count::__release_weak(v51);
            }
            if (aBlock) {
              _Block_release(aBlock);
            }
            if (object) {
              dispatch_release(object);
            }
            std::__shared_weak_count::__release_weak(v40);
            if (v35) {
              dispatch_release(v35);
            }
LABEL_88:
            if (!v9) {
              goto LABEL_90;
            }
            break;
          default:
            v9[2](v9, 1);
            break;
        }
LABEL_89:
        _Block_release(v9);
        goto LABEL_90;
      }
      if (*(void *)(v5 + 264))
      {
LABEL_34:
        v9[2](v9, 0);
        int v17 = 0;
        xpc_object_t v18 = *(NSObject **)(v5 + 40);
        if (!os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_42;
        }
        goto LABEL_35;
      }
      if (v9) {
        unsigned __int8 v44 = _Block_copy(v9);
      }
      else {
        unsigned __int8 v44 = 0;
      }
      unint64_t v45 = *(const void **)(v5 + 160);
      *(void *)(v5 + 160) = v44;
      if (v45) {
        _Block_release(v45);
      }
      int v17 = 1;
      xpc_object_t v18 = *(NSObject **)(v5 + 40);
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
      {
LABEL_35:
        uint64_t v19 = ctu::power::manager::asCString(a2);
        uint64_t v20 = *(void *)(v5 + 216);
        long long v21 = "Unknown";
        uint64_t v22 = *(void *)(v5 + 264);
        if (v10 == 1) {
          long long v21 = "PoweredOn";
        }
        *(_DWORD *)std::string buf = 136316418;
        *(void *)&uint8_t buf[4] = v19;
        __int16 v58 = 1024;
        if (!v10) {
          long long v21 = "LowPower";
        }
        *(_DWORD *)size_t v59 = v46;
        uint64_t v23 = "false";
        *(_WORD *)&v59[4] = 2080;
        *(void *)&v59[6] = v21;
        *(_WORD *)&v59[14] = 2048;
        if (v17) {
          uint64_t v23 = "true";
        }
        *(void *)&v59[16] = v20;
        __int16 v60 = 2048;
        uint64_t v61 = v22;
        __int16 v62 = 2080;
        unint64_t v63 = v23;
        _os_log_impl(&dword_26368A000, v18, OS_LOG_TYPE_DEFAULT, "#I Cannot accept notification: %s, SleepState: %u, PowerState: %s, Assertions: %lu, Assertions-deferred: %lu, Deferred-ack: %s", buf, 0x3Au);
      }
LABEL_42:
      if (a2 != -536870144 && a2 != -536870256) {
        goto LABEL_88;
      }
      uint64_t v24 = *(void *)(v5 + 264);
      if (!v24) {
        goto LABEL_88;
      }
      uint64_t v25 = *(NSObject **)(v5 + 40);
      if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)std::string buf = 134217984;
        *(void *)&uint8_t buf[4] = v24;
        _os_log_impl(&dword_26368A000, v25, OS_LOG_TYPE_DEFAULT, "#I Allowing deferred work to run (skipping power event); count=%zd",
          buf,
          0xCu);
      }
      std::__tree<std::__value_type<std::string,dispatch::group_session>,std::__map_value_compare<std::string,std::__value_type<std::string,dispatch::group_session>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dispatch::group_session>>>::destroy(*(char **)(v5 + 256));
      *(void *)(v5 + 256) = 0;
      *(void *)(v5 + 264) = 0;
      *(void *)(v5 + 248) = v5 + 256;
      if (v9) {
        goto LABEL_89;
      }
LABEL_90:
      if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
      return;
    default:
      goto LABEL_34;
  }
}

void sub_2636F9788(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,dispatch_group_t group)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_40c45_ZTSNSt3__18weak_ptrIN12PowerManager5StateEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c45_ZTSNSt3__18weak_ptrIN12PowerManager5StateEEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void ___ZN12PowerManager5State4initEv_block_invoke_22(void *a1, int a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    uint64_t v5 = a1[4];
    long long v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      uint64_t v7 = v6;
      if (a1[5])
      {
        v8[0] = MEMORY[0x263EF8330];
        v8[1] = 0x40000000;
        _OWORD v8[2] = ___ZN12PowerManager5State4initEv_block_invoke_2_23;
        v8[3] = &__block_descriptor_tmp_25;
        v8[4] = v5;
        int v9 = a2;
        ctu::SharedSynchronizable<PowerManager::State>::execute_wrapped((uint64_t *)(v5 + 72), (uint64_t)v8);
      }
      if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void ___ZN12PowerManager5State4initEv_block_invoke_2_23(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 40) == 524466) {
    PowerStats::submitLowPowerStatsMetric_sync(*(os_log_t **)(*(void *)(a1 + 32) + 136));
  }
}

void *___ZNK3ctu20SharedSynchronizableIN12PowerManager5StateEE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS8__block_invoke(uint64_t a1)
{
  return (*(void *(**)(void *__return_ptr))(**(void **)(a1 + 40) + 16))(*(void **)(a1 + 40));
}

void ___ZN12PowerManager5State28handlePowerNotification_syncEN8dispatch5blockIU13block_pointerFvbEEEj_block_invoke(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 32);
  (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 64);
  if (v3)
  {
    uint64_t v4 = std::__shared_weak_count::lock(v3);
    if (v4)
    {
      uint64_t v5 = v4;
      if (*(void *)(a1 + 56))
      {
        if (*(_DWORD *)(a1 + 72) == 1)
        {
          uint64_t v6 = *(void *)(v2 + 264);
          if (v6)
          {
            uint64_t v7 = *(NSObject **)(v2 + 40);
            if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
            {
              int v8 = 134217984;
              uint64_t v9 = v6;
              _os_log_impl(&dword_26368A000, v7, OS_LOG_TYPE_DEFAULT, "#I Allowing deferred work to run; count=%zd",
                (uint8_t *)&v8,
                0xCu);
            }
            std::__tree<std::__value_type<std::string,dispatch::group_session>,std::__map_value_compare<std::string,std::__value_type<std::string,dispatch::group_session>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dispatch::group_session>>>::destroy(*(char **)(v2 + 256));
            *(void *)(v2 + 256) = 0;
            *(void *)(v2 + 264) = 0;
            *(void *)(v2 + 248) = v2 + 256;
          }
        }
      }
      if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void *__copy_helper_block_e8_40c21_ZTSN8dispatch5groupE48c43_ZTSN8dispatch5blockIU13block_pointerFvbEEE56c45_ZTSNSt3__18weak_ptrIN12PowerManager5StateEEE(void *a1, void *a2)
{
  uint64_t v4 = a2[5];
  a1[5] = v4;
  if (v4) {
    dispatch_retain(v4);
  }
  uint64_t result = (void *)a2[6];
  if (result) {
    uint64_t result = _Block_copy(result);
  }
  uint64_t v7 = a2[7];
  uint64_t v6 = a2[8];
  a1[6] = result;
  a1[7] = v7;
  a1[8] = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c21_ZTSN8dispatch5groupE48c43_ZTSN8dispatch5blockIU13block_pointerFvbEEE56c45_ZTSNSt3__18weak_ptrIN12PowerManager5StateEEE(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[8];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = (const void *)a1[6];
  if (v3) {
    _Block_release(v3);
  }
  uint64_t v4 = a1[5];
  if (v4)
  {
    dispatch_release(v4);
  }
}

void ctu::power::manager::parameters::~parameters(void **this)
{
  if (*((char *)this + 55) < 0)
  {
    operator delete(this[4]);
    uint64_t v2 = this[3];
    if (!v2) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  uint64_t v2 = this[3];
  if (v2) {
LABEL_5:
  }
    _Block_release(v2);
LABEL_6:
  uint64_t v3 = this[2];
  if (v3) {
    _Block_release(v3);
  }
  uint64_t v4 = this[1];
  if (v4) {
    dispatch_release(v4);
  }
}

void ctu::SharedSynchronizable<PowerManager::State>::execute_wrapped(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[1];
  if (!v3 || (uint64_t v5 = *a1, (v6 = std::__shared_weak_count::lock(v3)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v7 = v6;
  int v8 = a1[2];
  block[0] = MEMORY[0x263EF8330];
  block[1] = 1174405120;
  block[2] = ___ZNK3ctu20SharedSynchronizableIN12PowerManager5StateEE15execute_wrappedEU13block_pointerFvvE_block_invoke;
  block[3] = &unk_270EA8888;
  void block[5] = v5;
  unint64_t v12 = v7;
  p_shared_owners = &v7->__shared_owners_;
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  block[4] = a2;
  dispatch_async(v8, block);
  uint64_t v10 = v12;
  if (!v12 || atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      return;
    }
LABEL_8:
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    return;
  }
  ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
  std::__shared_weak_count::__release_weak(v10);
  if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_8;
  }
}

uint64_t ___ZNK3ctu20SharedSynchronizableIN12PowerManager5StateEE15execute_wrappedEU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t __copy_helper_block_e8_40c49_ZTSNSt3__110shared_ptrIKN12PowerManager5StateEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c49_ZTSNSt3__110shared_ptrIKN12PowerManager5StateEEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void ___ZN12PowerManager5State22registerForPowerEventsEN8dispatch5blockIU13block_pointerFv10PowerStateNS1_13group_sessionEEEE_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v1 = *(void **)(a1 + 40);
  if (v1) {
    uint64_t v1 = _Block_copy(v1);
  }
  uint64_t v3 = *(const void **)(v2 + 152);
  *(void *)(v2 + 152) = v1;
  if (v3) {
    _Block_release(v3);
  }
}

void *__copy_helper_block_e8_40c73_ZTSN8dispatch5blockIU13block_pointerFv10PowerStateNS_13group_sessionEEEE(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void **)(a2 + 40);
  if (result) {
    uint64_t result = _Block_copy(result);
  }
  *(void *)(a1 + 40) = result;
  return result;
}

void __destroy_helper_block_e8_40c73_ZTSN8dispatch5blockIU13block_pointerFv10PowerStateNS_13group_sessionEEEE(uint64_t a1)
{
  uint64_t v1 = *(const void **)(a1 + 40);
  if (v1) {
    _Block_release(v1);
  }
}

void dispatch::async<void ctu::SharedSynchronizable<PowerManager::State>::execute_wrapped<PowerManager::State::createPowerAssertion(std::string,std::chrono::duration<long long,std::ratio<1l,1000l>>)::{lambda(void)#1}>(PowerManager::State::createPowerAssertion(std::string,std::chrono::duration<long long,std::ratio<1l,1000l>>)::{lambda(void)#1} &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<PowerManager::State::createPowerAssertion(std::string,std::chrono::duration<long long,std::ratio<1l,1000l>>)::{lambda(void)#1},std::default_delete<PowerManager::State::createPowerAssertion(std::string,std::chrono::duration<long long,std::ratio<1l,1000l>>)::{lambda(void)#1}>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t v173 = *MEMORY[0x263EF8340];
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  uint64_t v164 = (uint64_t)(*a1 + 1);
  unint64_t v166 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v167 = 0xAAAAAAAAAAAAAAAALL;
  size_t v163 = v1;
  pthread_mutex_lock(&ctu::Singleton<ctu::power::assertion,ctu::power::assertion,ctu::PthreadMutexGuardPolicy<ctu::power::assertion>>::sInstance);
  if (qword_26A99F120) {
    goto LABEL_11;
  }
  uint64_t v3 = (std::__shared_weak_count_vtbl *)operator new(0x38uLL);
  MEMORY[0x263E68E80]();
  uint64_t v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = &v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&unk_270EA8928;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = v3;
  uint64_t v6 = (std::__shared_weak_count *)v3->~__shared_weak_count_0;
  if (v6)
  {
    if (v6->__shared_owners_ == -1)
    {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      v3->~__shared_weak_size_t count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v3;
      v3->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v4;
      std::__shared_weak_count::__release_weak(v6);
      if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
        goto LABEL_7;
      }
    }
  }
  else
  {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v3->~__shared_weak_size_t count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v3;
    v3->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v4;
    if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL))
    {
LABEL_7:
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  uint64_t v7 = (std::__shared_weak_count *)off_26A99F128;
  qword_26A99F120 = (uint64_t)v3;
  off_26A99F128 = v4;
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
LABEL_11:
  int v8 = (std::__shared_weak_count *)off_26A99F128;
  if (off_26A99F128) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)off_26A99F128 + 1, 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<ctu::power::assertion,ctu::power::assertion,ctu::PthreadMutexGuardPolicy<ctu::power::assertion>>::sInstance);
  ctu::power::assertion::createInternal();
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    unint64_t v9 = v166;
    if (v166) {
      goto LABEL_16;
    }
LABEL_57:
    uint64_t v32 = *(NSObject **)(v2 + 40);
    if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
    {
      uint64_t v33 = v164;
      if (*((char *)v1 + 31) < 0) {
        uint64_t v33 = *(void *)v164;
      }
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v33;
      _os_log_error_impl(&dword_26368A000, v32, OS_LOG_TYPE_ERROR, "Failed to create power assertion '%s'", (uint8_t *)&buf, 0xCu);
    }
    goto LABEL_315;
  }
  unint64_t v9 = v166;
  if (!v166) {
    goto LABEL_57;
  }
LABEL_16:
  uint64_t v159 = v9;
  uint64_t v161 = v2;
  uint64_t v10 = (uint64_t **)(v2 + 208);
  uint64_t v11 = *(uint64_t **)(v2 + 208);
  if (!v11)
  {
    uint64_t v24 = (uint64_t **)(v2 + 208);
    if (*(uint64_t ***)(v2 + 200) == v10)
    {
      uint64_t v34 = 0;
      uint64_t v24 = (uint64_t **)(v2 + 208);
      long long v35 = (uint64_t **)(v2 + 208);
      goto LABEL_114;
    }
LABEL_72:
    long long v35 = v24;
    do
    {
      uint64_t v38 = (uint64_t *)v35;
      long long v35 = (uint64_t **)v35[2];
    }
    while (*v35 == v38);
    uint64_t v34 = 0;
    size_t v12 = *((unsigned __int8 *)v1 + 31);
    int v13 = (const void *)v1[1];
    size_t v14 = v1[2];
    char v37 = *((unsigned char *)v1 + 31);
    goto LABEL_75;
  }
  size_t v12 = *((unsigned __int8 *)v1 + 31);
  int v13 = (const void *)v1[1];
  size_t v14 = v1[2];
  if ((v12 & 0x80u) == 0) {
    BOOL v15 = (const void *)v164;
  }
  else {
    BOOL v15 = (const void *)v1[1];
  }
  if ((v12 & 0x80u) == 0) {
    size_t v16 = *((unsigned __int8 *)v1 + 31);
  }
  else {
    size_t v16 = v1[2];
  }
  int v17 = v10;
  xpc_object_t v18 = v11;
  do
  {
    while (1)
    {
      int v19 = *((char *)v18 + 55);
      uint64_t v20 = v19 >= 0 ? v18 + 4 : (uint64_t *)v18[4];
      size_t v21 = v19 >= 0 ? *((unsigned __int8 *)v18 + 55) : v18[5];
      size_t v22 = v16 >= v21 ? v21 : v16;
      int v23 = memcmp(v20, v15, v22);
      if (v23) {
        break;
      }
      if (v21 >= v16) {
        goto LABEL_38;
      }
LABEL_24:
      xpc_object_t v18 = (uint64_t *)v18[1];
      if (!v18) {
        goto LABEL_39;
      }
    }
    if (v23 < 0) {
      goto LABEL_24;
    }
LABEL_38:
    int v17 = (uint64_t **)v18;
    xpc_object_t v18 = (uint64_t *)*v18;
  }
  while (v18);
LABEL_39:
  uint64_t v24 = v10;
  if (v17 != v10)
  {
    int v25 = *((char *)v17 + 55);
    if (v25 >= 0) {
      uint64_t v26 = (uint64_t *)(v17 + 4);
    }
    else {
      uint64_t v26 = v17[4];
    }
    if (v25 >= 0) {
      size_t v27 = *((unsigned __int8 *)v17 + 55);
    }
    else {
      size_t v27 = (size_t)v17[5];
    }
    if (v27 >= v16) {
      size_t v28 = v16;
    }
    else {
      size_t v28 = v27;
    }
    int v29 = memcmp(v15, v26, v28);
    if (v29)
    {
      if ((v29 & 0x80000000) == 0)
      {
LABEL_51:
        unint64_t v30 = v167;
        if (v167) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v167 + 8), 1uLL, memory_order_relaxed);
        }
        int v31 = (std::__shared_weak_count *)v17[8];
        uint64_t v2 = v161;
        void v17[7] = (uint64_t *)v159;
        v17[8] = (uint64_t *)v30;
        if (v31 && !atomic_fetch_add(&v31->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
          std::__shared_weak_count::__release_weak(v31);
        }
        goto LABEL_130;
      }
    }
    else if (v16 >= v27)
    {
      goto LABEL_51;
    }
    uint64_t v24 = v17;
  }
  uint64_t v34 = *v24;
  if (*(uint64_t ***)(v161 + 200) == v24)
  {
    long long v35 = v24;
    uint64_t v2 = v161;
    goto LABEL_114;
  }
  if (!v34)
  {
    uint64_t v1 = v163;
    goto LABEL_72;
  }
  uint64_t v36 = *v24;
  do
  {
    long long v35 = (uint64_t **)v36;
    uint64_t v36 = (uint64_t *)v36[1];
  }
  while (v36);
  char v37 = v12;
LABEL_75:
  int v39 = *((char *)v35 + 55);
  if (v39 >= 0) {
    std::string v40 = (uint64_t *)(v35 + 4);
  }
  else {
    std::string v40 = v35[4];
  }
  if (v39 >= 0) {
    size_t v41 = *((unsigned __int8 *)v35 + 55);
  }
  else {
    size_t v41 = (size_t)v35[5];
  }
  char __p = v37;
  if (v37 >= 0) {
    uint64_t v42 = (const void *)v164;
  }
  else {
    uint64_t v42 = v13;
  }
  if (v37 >= 0) {
    size_t v14 = v12;
  }
  if (v14 >= v41) {
    size_t v43 = v41;
  }
  else {
    size_t v43 = v14;
  }
  int v44 = memcmp(v40, v42, v43);
  if (!v44)
  {
    uint64_t v2 = v161;
    if (v41 >= v14) {
      goto LABEL_91;
    }
LABEL_114:
    if (v34) {
      uint64_t v10 = v35 + 1;
    }
    else {
      uint64_t v10 = v24;
    }
    if (!*v10)
    {
      if (v34) {
        unint64_t v45 = v35;
      }
      else {
        unint64_t v45 = v24;
      }
      int v52 = v163;
      char v53 = *((unsigned char *)v163 + 31);
      goto LABEL_124;
    }
    goto LABEL_130;
  }
  uint64_t v2 = v161;
  if (v44 < 0) {
    goto LABEL_114;
  }
LABEL_91:
  if (!v11)
  {
    unint64_t v45 = v10;
    goto LABEL_123;
  }
  while (2)
  {
    while (2)
    {
      unint64_t v45 = (uint64_t **)v11;
      int v46 = *((char *)v11 + 55);
      if (v46 >= 0) {
        uint64_t v47 = v11 + 4;
      }
      else {
        uint64_t v47 = (const void *)v11[4];
      }
      if (v46 >= 0) {
        size_t v48 = *((unsigned __int8 *)v11 + 55);
      }
      else {
        size_t v48 = v11[5];
      }
      if (v48 >= v14) {
        size_t v49 = v14;
      }
      else {
        size_t v49 = v48;
      }
      int v50 = memcmp(v42, v47, v49);
      if (v50)
      {
        if (v50 < 0) {
          break;
        }
        goto LABEL_107;
      }
      if (v14 >= v48)
      {
LABEL_107:
        int v51 = memcmp(v47, v42, v49);
        if (v51)
        {
          if ((v51 & 0x80000000) == 0) {
            goto LABEL_130;
          }
        }
        else if (v48 >= v14)
        {
          goto LABEL_130;
        }
        uint64_t v11 = v45[1];
        if (!v11)
        {
          uint64_t v10 = v45 + 1;
          goto LABEL_123;
        }
        continue;
      }
      break;
    }
    uint64_t v11 = *v45;
    if (*v45) {
      continue;
    }
    break;
  }
  uint64_t v10 = v45;
LABEL_123:
  int v52 = v163;
  char v53 = __p;
LABEL_124:
  int v54 = (uint64_t *)operator new(0x48uLL);
  int v55 = (std::string *)(v54 + 4);
  if (v53 < 0)
  {
    std::string::__init_copy_ctor_external(v55, (const std::string::value_type *)v52[1], v52[2]);
    unint64_t v57 = v167;
    v54[7] = v166;
    v54[8] = v57;
    if (v57) {
LABEL_126:
    }
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v57 + 8), 1uLL, memory_order_relaxed);
  }
  else
  {
    long long v56 = *(_OWORD *)v164;
    v54[6] = *(void *)(v164 + 16);
    *(_OWORD *)&v55->__r_.__value_.__l.__data_ = v56;
    unint64_t v57 = v167;
    v54[7] = v159;
    v54[8] = v57;
    if (v57) {
      goto LABEL_126;
    }
  }
  uint64_t *v54 = 0;
  v54[1] = 0;
  v54[2] = (uint64_t)v45;
  std::__shared_weak_count *v10 = v54;
  uint64_t v58 = **(void **)(v2 + 200);
  if (v58)
  {
    *(void *)(v2 + 200) = v58;
    int v54 = *v10;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v2 + 208), v54);
  ++*(void *)(v2 + 216);
LABEL_130:
  int v59 = *(_DWORD *)(v166 + 32);
  int v60 = *(_DWORD *)(v2 + 120);
  uint64_t v61 = *(NSObject **)(v2 + 40);
  BOOL v62 = os_log_type_enabled(v61, OS_LOG_TYPE_DEFAULT);
  if (!v60)
  {
    uint64_t v1 = v163;
    if (!v62)
    {
LABEL_145:
      uint64_t v70 = *(void *)(v2 + 160);
      if (v70)
      {
        (*(void (**)(uint64_t, uint64_t))(v70 + 16))(v70, 1);
        char v71 = *(const void **)(v2 + 160);
        *(void *)(v2 + 160) = 0;
        if (v71) {
          _Block_release(v71);
        }
        std::string v72 = *(NSObject **)(v2 + 40);
        if (os_log_type_enabled(v72, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(buf.__r_.__value_.__l.__data_) = 0;
          int v59 = 2;
          _os_log_impl(&dword_26368A000, v72, OS_LOG_TYPE_DEFAULT, "#I Assertion held, but action will be deferred; acknowledging previous notification",
            (uint8_t *)&buf,
            2u);
          uint64_t v65 = *(void *)(v2 + 136);
          if (*((char *)v163 + 31) < 0) {
            goto LABEL_135;
          }
        }
        else
        {
          int v59 = 2;
          uint64_t v65 = *(void *)(v2 + 136);
          if (*((char *)v163 + 31) < 0) {
            goto LABEL_135;
          }
        }
        goto LABEL_153;
      }
      int v59 = 2;
      goto LABEL_152;
    }
    std::string::size_type v66 = v164;
    if (*((char *)v163 + 31) < 0)
    {
      std::string::size_type v66 = *(void *)v164;
      std::string::size_type v67 = v163[4];
      uint64_t v68 = *(int *)(v2 + 124);
      if (v68 <= 2) {
        goto LABEL_139;
      }
    }
    else
    {
      std::string::size_type v67 = v163[4];
      uint64_t v68 = *(int *)(v2 + 124);
      if (v68 <= 2)
      {
LABEL_139:
        unsigned int v69 = off_2655D5008[v68];
LABEL_144:
        LODWORD(buf.__r_.__value_.__l.__data_) = 136316162;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v66;
        WORD2(buf.__r_.__value_.__r.__words[1]) = 2048;
        *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v67;
        HIWORD(buf.__r_.__value_.__r.__words[2]) = 1024;
        *(_DWORD *)dispatch_group_t group = v59;
        *(_WORD *)&group[4] = 1024;
        *(_DWORD *)&group[6] = 2;
        *(_WORD *)&group[10] = 2080;
        *(void *)&group[12] = v69;
        _os_log_impl(&dword_26368A000, v61, OS_LOG_TYPE_DEFAULT, "#I Power assertion created for '%s' during sleep; Timeout (millisec): %llu, Status = %d, Override = %d; Sleep state: %s",
          (uint8_t *)&buf,
          0x2Cu);
        goto LABEL_145;
      }
    }
    unsigned int v69 = "Unknown";
    goto LABEL_144;
  }
  uint64_t v1 = v163;
  if (!v62)
  {
LABEL_152:
    uint64_t v65 = *(void *)(v2 + 136);
    if (*((char *)v1 + 31) < 0) {
      goto LABEL_135;
    }
    goto LABEL_153;
  }
  std::string::size_type v63 = v164;
  if (*((char *)v163 + 31) < 0) {
    std::string::size_type v63 = *(void *)v164;
  }
  std::string::size_type v64 = v163[4];
  LODWORD(buf.__r_.__value_.__l.__data_) = 136315650;
  *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v63;
  WORD2(buf.__r_.__value_.__r.__words[1]) = 2048;
  *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v64;
  HIWORD(buf.__r_.__value_.__r.__words[2]) = 1024;
  *(_DWORD *)dispatch_group_t group = v59;
  _os_log_impl(&dword_26368A000, v61, OS_LOG_TYPE_DEFAULT, "#I Power assertion created for '%s'; Timeout (millisec): %llu, Status = %d",
    (uint8_t *)&buf,
    0x1Cu);
  uint64_t v65 = *(void *)(v2 + 136);
  if (*((char *)v163 + 31) < 0)
  {
LABEL_135:
    std::string::__init_copy_ctor_external(&v165, (const std::string::value_type *)v1[1], v1[2]);
    goto LABEL_154;
  }
LABEL_153:
  long long v73 = *(_OWORD *)v164;
  v165.__r_.__value_.__r.__words[2] = *(void *)(v164 + 16);
  *(_OWORD *)&v165.__r_.__value_.__l.__data_ = v73;
LABEL_154:
  PowerStats::gotAssertion(v65, (uint64_t)&v165, v59);
  if ((SHIBYTE(v165.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (v59 == 2) {
      goto LABEL_156;
    }
LABEL_159:
    if (v1[4] < 1) {
      goto LABEL_315;
    }
    size_t v75 = *(std::__shared_weak_count **)(v2 + 80);
    if (!v75 || (uint64_t v76 = *(void *)(v2 + 72), (v77 = std::__shared_weak_count::lock(v75)) == 0)) {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    uint64_t v78 = v77;
    p_shared_weak_owners = &v77->__shared_weak_owners_;
    atomic_fetch_add_explicit(&v77->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v77->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
      std::__shared_weak_count::__release_weak(v78);
    }
    long long v80 = v163;
    buf.__r_.__value_.__r.__words[0] = MEMORY[0x263EF8330];
    buf.__r_.__value_.__l.__size_ = 1174405120;
    buf.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZZN12PowerManager5State20createPowerAssertionENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS1_6chrono8durationIxNS1_5ratioILl1ELl1000EEEEEENKUlvE_clEv_block_invoke;
    *(void *)dispatch_group_t group = &__block_descriptor_tmp_39_2;
    *(void *)&group[8] = v2;
    *(void *)&group[16] = v76;
    unint64_t v170 = v78;
    atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
    uint64_t v160 = v78;
    if (*((char *)v163 + 31) < 0)
    {
      std::string::__init_copy_ctor_external(&v171, (const std::string::value_type *)v163[1], v163[2]);
    }
    else
    {
      long long v81 = *(_OWORD *)v164;
      v171.__r_.__value_.__r.__words[2] = *(void *)(v164 + 16);
      *(_OWORD *)&v171.__r_.__value_.__l.__data_ = v81;
    }
    uint64_t v172 = v163[4];
    CFStringRef v100 = (uint64_t *)operator new(0x10uLL);
    BOOL v101 = _Block_copy(&buf);
    uint64_t *v100 = (uint64_t)"Watchdog timed out";
    TelephonyBasebandWatchdogStart();
    if (v101) {
      _Block_release(v101);
    }
    __pa = v100;
    uint64_t v102 = (uint64_t **)(v2 + 232);
    unint64_t v103 = *(uint64_t **)(v2 + 232);
    if (v103)
    {
      size_t v104 = *((unsigned __int8 *)v163 + 31);
      int v105 = (const void *)v163[1];
      size_t v106 = v163[2];
      if ((v104 & 0x80u) == 0) {
        size_t v107 = (const void *)v164;
      }
      else {
        size_t v107 = (const void *)v163[1];
      }
      if ((v104 & 0x80u) == 0) {
        size_t v108 = *((unsigned __int8 *)v163 + 31);
      }
      else {
        size_t v108 = v163[2];
      }
      uint64_t v109 = v102;
      uint64_t v110 = v103;
      while (2)
      {
        while (1)
        {
          int v111 = *((char *)v110 + 55);
          uint64_t v112 = v111 >= 0 ? v110 + 4 : (uint64_t *)v110[4];
          size_t v113 = v111 >= 0 ? *((unsigned __int8 *)v110 + 55) : v110[5];
          size_t v114 = v108 >= v113 ? v113 : v108;
          int v115 = memcmp(v112, v107, v114);
          if (!v115) {
            break;
          }
          if ((v115 & 0x80000000) == 0) {
            goto LABEL_236;
          }
LABEL_222:
          uint64_t v110 = (uint64_t *)v110[1];
          if (!v110) {
            goto LABEL_237;
          }
        }
        if (v113 < v108) {
          goto LABEL_222;
        }
LABEL_236:
        uint64_t v109 = (uint64_t **)v110;
        uint64_t v110 = (uint64_t *)*v110;
        if (v110) {
          continue;
        }
        break;
      }
LABEL_237:
      int v116 = v102;
      if (v109 == v102) {
        goto LABEL_257;
      }
      int v117 = *((char *)v109 + 55);
      if (v117 >= 0) {
        uint64_t v118 = (uint64_t *)(v109 + 4);
      }
      else {
        uint64_t v118 = v109[4];
      }
      if (v117 >= 0) {
        size_t v119 = *((unsigned __int8 *)v109 + 55);
      }
      else {
        size_t v119 = (size_t)v109[5];
      }
      if (v119 >= v108) {
        size_t v120 = v108;
      }
      else {
        size_t v120 = v119;
      }
      int v121 = memcmp(v107, v118, v120);
      if (!v121)
      {
        if (v108 < v119) {
          goto LABEL_256;
        }
LABEL_249:
        xpc_object_t v122 = v160;
        xpc_object_t v123 = (uint64_t *)operator new(0x20uLL);
        *xpc_object_t v123 = (uint64_t)&unk_270EA8978;
        v123[1] = 0;
        v123[2] = 0;
        v123[3] = (uint64_t)__pa;
        xpc_object_t v124 = (std::__shared_weak_count *)v109[8];
        v109[7] = __pa;
        v109[8] = v123;
        if (v124 && !atomic_fetch_add(&v124->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
          std::__shared_weak_count::__release_weak(v124);
          if (SHIBYTE(v171.__r_.__value_.__r.__words[2]) < 0) {
            goto LABEL_339;
          }
          goto LABEL_312;
        }
        goto LABEL_311;
      }
      if ((v121 & 0x80000000) == 0) {
        goto LABEL_249;
      }
LABEL_256:
      int v116 = v109;
LABEL_257:
      xpc_object_t v125 = *v116;
      if (*(uint64_t ***)(v161 + 224) == v116)
      {
        long long v126 = v116;
        goto LABEL_306;
      }
      if (v125)
      {
        xpc_object_t v127 = *v116;
        do
        {
          long long v126 = (uint64_t **)v127;
          xpc_object_t v127 = (uint64_t *)v127[1];
        }
        while (v127);
        char v128 = v104;
LABEL_267:
        int v130 = *((char *)v126 + 55);
        if (v130 >= 0) {
          size_t v131 = (uint64_t *)(v126 + 4);
        }
        else {
          size_t v131 = v126[4];
        }
        if (v130 >= 0) {
          size_t v132 = *((unsigned __int8 *)v126 + 55);
        }
        else {
          size_t v132 = (size_t)v126[5];
        }
        char v156 = v128;
        if (v128 >= 0) {
          uint64_t v133 = (const void *)v164;
        }
        else {
          uint64_t v133 = v105;
        }
        if (v128 >= 0) {
          size_t v106 = v104;
        }
        if (v106 >= v132) {
          size_t v134 = v132;
        }
        else {
          size_t v134 = v106;
        }
        int v135 = memcmp(v131, v133, v134);
        if (v135)
        {
          if ((v135 & 0x80000000) == 0)
          {
LABEL_283:
            if (!v103)
            {
              size_t v136 = v102;
              goto LABEL_332;
            }
            while (1)
            {
              size_t v136 = (uint64_t **)v103;
              size_t v137 = *((unsigned __int8 *)v103 + 55);
              size_t v138 = v103[5];
              if ((v137 & 0x80u) == 0) {
                int v139 = v103 + 4;
              }
              else {
                int v139 = (const void *)v103[4];
              }
              if ((v137 & 0x80u) == 0) {
                size_t v140 = v137;
              }
              else {
                size_t v140 = v138;
              }
              if (v140 >= v106) {
                size_t v141 = v106;
              }
              else {
                size_t v141 = v140;
              }
              int v142 = memcmp(v133, v139, v141);
              if (v142)
              {
                if (v142 < 0) {
                  goto LABEL_285;
                }
LABEL_299:
                int v143 = memcmp(v139, v133, v141);
                if (v143)
                {
                  if ((v143 & 0x80000000) == 0) {
                    goto LABEL_310;
                  }
                }
                else if (v140 >= v106)
                {
                  goto LABEL_310;
                }
                unint64_t v103 = v136[1];
                if (!v103)
                {
                  uint64_t v102 = v136 + 1;
                  goto LABEL_332;
                }
              }
              else
              {
                if (v106 >= v140) {
                  goto LABEL_299;
                }
LABEL_285:
                unint64_t v103 = *v136;
                if (!*v136)
                {
                  uint64_t v102 = v136;
LABEL_332:
                  size_t v149 = v163;
                  char v150 = v156;
LABEL_333:
                  xpc_object_t v122 = v160;
                  size_t v151 = (char *)operator new(0x48uLL);
                  uint64_t v152 = (uint64_t *)v151;
                  if (v150 < 0)
                  {
                    std::string::__init_copy_ctor_external((std::string *)(v151 + 32), (const std::string::value_type *)v149[1], v149[2]);
                  }
                  else
                  {
                    long long v153 = *(_OWORD *)v164;
                    *((void *)v151 + 6) = *(void *)(v164 + 16);
                    *((_OWORD *)v151 + 2) = v153;
                  }
                  v152[7] = (uint64_t)__pa;
                  int64_t v154 = operator new(0x20uLL);
                  *int64_t v154 = &unk_270EA8978;
                  v154[1] = 0;
                  v154[2] = 0;
                  v154[3] = __pa;
                  v152[8] = (uint64_t)v154;
                  uint64_t *v152 = 0;
                  v152[1] = 0;
                  v152[2] = (uint64_t)v136;
                  std::__shared_weak_count *v102 = v152;
                  uint64_t v155 = **(void **)(v161 + 224);
                  if (v155)
                  {
                    *(void *)(v161 + 224) = v155;
                    uint64_t v152 = *v102;
                  }
                  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v161 + 232), v152);
                  ++*(void *)(v161 + 240);
                  if (SHIBYTE(v171.__r_.__value_.__r.__words[2]) < 0)
                  {
LABEL_339:
                    operator delete(v171.__r_.__value_.__l.__data_);
                    uint64_t v144 = v170;
                    uint64_t v1 = v163;
                    if (!v170) {
                      goto LABEL_314;
                    }
LABEL_313:
                    std::__shared_weak_count::__release_weak(v144);
LABEL_314:
                    std::__shared_weak_count::__release_weak(v122);
                    goto LABEL_315;
                  }
LABEL_312:
                  uint64_t v144 = v170;
                  uint64_t v1 = v163;
                  if (v170) {
                    goto LABEL_313;
                  }
                  goto LABEL_314;
                }
              }
            }
          }
        }
        else if (v132 >= v106)
        {
          goto LABEL_283;
        }
LABEL_306:
        if (v125) {
          uint64_t v102 = v126 + 1;
        }
        else {
          uint64_t v102 = v116;
        }
        if (!*v102)
        {
          if (v125) {
            size_t v136 = v126;
          }
          else {
            size_t v136 = v116;
          }
          size_t v149 = v163;
          char v150 = *((unsigned char *)v163 + 31);
          goto LABEL_333;
        }
LABEL_310:
        TelephonyBasebandWatchdogStop();
        operator delete(__pa);
        xpc_object_t v122 = v160;
LABEL_311:
        if (SHIBYTE(v171.__r_.__value_.__r.__words[2]) < 0) {
          goto LABEL_339;
        }
        goto LABEL_312;
      }
      long long v80 = v163;
    }
    else
    {
      int v116 = (uint64_t **)(v2 + 232);
      if (*(uint64_t ***)(v2 + 224) == v102)
      {
        xpc_object_t v125 = 0;
        int v116 = (uint64_t **)(v2 + 232);
        long long v126 = (uint64_t **)(v2 + 232);
        goto LABEL_306;
      }
    }
    long long v126 = v116;
    do
    {
      uint64_t v129 = (uint64_t *)v126;
      long long v126 = (uint64_t **)v126[2];
    }
    while (*v126 == v129);
    xpc_object_t v125 = 0;
    size_t v104 = *((unsigned __int8 *)v80 + 31);
    int v105 = (const void *)v80[1];
    size_t v106 = v80[2];
    char v128 = *((unsigned char *)v80 + 31);
    goto LABEL_267;
  }
  operator delete(v165.__r_.__value_.__l.__data_);
  if (v59 != 2) {
    goto LABEL_159;
  }
LABEL_156:
  if (*((char *)v1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&buf, (const std::string::value_type *)v1[1], v1[2]);
  }
  else
  {
    long long v74 = *(_OWORD *)v164;
    buf.__r_.__value_.__r.__words[2] = *(void *)(v164 + 16);
    *(_OWORD *)&buf.__r_.__value_.__l.__data_ = v74;
  }
  CFTypeID v82 = v1[5];
  *(void *)dispatch_group_t group = v82;
  if (v82)
  {
    dispatch_retain(v82);
    if (*(void *)group) {
      dispatch_group_enter(*(dispatch_group_t *)group);
    }
  }
  CFNumberRef v83 = *(uint64_t **)(v2 + 256);
  if (!v83)
  {
    unsigned int v86 = (uint64_t **)(v2 + 256);
    uint64_t v87 = (uint64_t **)(v2 + 256);
    goto LABEL_198;
  }
  if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_std::string buf = &buf;
  }
  else {
    p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
  }
  if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(buf.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = buf.__r_.__value_.__l.__size_;
  }
  do
  {
    while (2)
    {
      uint64_t v87 = (uint64_t **)v83;
      long long v90 = (const void *)v83[4];
      uint64_t v88 = v83 + 4;
      uint64_t v89 = v90;
      int v91 = *((char *)v88 + 23);
      if (v91 >= 0) {
        size_t v92 = v88;
      }
      else {
        size_t v92 = v89;
      }
      if (v91 >= 0) {
        size_t v93 = *((unsigned __int8 *)v88 + 23);
      }
      else {
        size_t v93 = v88[1];
      }
      if (v93 >= size) {
        size_t v94 = size;
      }
      else {
        size_t v94 = v93;
      }
      int v95 = memcmp(p_buf, v92, v94);
      if (v95)
      {
        if (v95 < 0) {
          goto LABEL_177;
        }
      }
      else if (size < v93)
      {
LABEL_177:
        CFNumberRef v83 = *v87;
        unsigned int v86 = v87;
        if (!*v87) {
          goto LABEL_198;
        }
        continue;
      }
      break;
    }
    int v96 = memcmp(v92, p_buf, v94);
    if (v96)
    {
      if ((v96 & 0x80000000) == 0) {
        goto LABEL_204;
      }
    }
    else if (v93 >= size)
    {
      goto LABEL_204;
    }
    CFNumberRef v83 = v87[1];
  }
  while (v83);
  unsigned int v86 = v87 + 1;
LABEL_198:
  long long v97 = (uint64_t *)operator new(0x40uLL);
  CFStringRef v98 = (std::string *)(v97 + 4);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v98, buf.__r_.__value_.__l.__data_, buf.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v98->__r_.__value_.__l.__data_ = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
    v97[6] = buf.__r_.__value_.__r.__words[2];
  }
  v97[7] = *(void *)group;
  *(void *)dispatch_group_t group = 0;
  uint64_t *v97 = 0;
  v97[1] = 0;
  v97[2] = (uint64_t)v87;
  *unsigned int v86 = v97;
  uint64_t v99 = **(void **)(v2 + 248);
  if (v99)
  {
    *(void *)(v2 + 248) = v99;
    long long v97 = *v86;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v2 + 256), v97);
  ++*(void *)(v2 + 264);
LABEL_204:
  if (*(void *)group)
  {
    dispatch_group_leave(*(dispatch_group_t *)group);
    if (*(void *)group) {
      dispatch_release(*(dispatch_object_t *)group);
    }
  }
  uint64_t v1 = v163;
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf.__r_.__value_.__l.__data_);
  }
LABEL_315:
  uint64_t v145 = (std::__shared_weak_count *)v167;
  if (v167 && !atomic_fetch_add((atomic_ullong *volatile)(v167 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v145->__on_zero_shared)(v145);
    std::__shared_weak_count::__release_weak(v145);
  }
  CFStringRef v146 = v1[5];
  if (v146)
  {
    dispatch_group_leave(v146);
    uint64_t v147 = v1[5];
    if (v147) {
      dispatch_release(v147);
    }
  }
  if (*((char *)v1 + 31) < 0) {
    operator delete(*(void **)v164);
  }
  operator delete(v1);
  int v148 = (std::__shared_weak_count *)a1[2];
  if (v148 && !atomic_fetch_add(&v148->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v148->__on_zero_shared)(v148);
    std::__shared_weak_count::__release_weak(v148);
  }
  operator delete(a1);
}

void sub_2636FAF44(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, std::__shared_weak_count *a12, uint64_t a13, void *a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,dispatch_group_t group,uint64_t a30,uint64_t a31,std::__shared_weak_count *a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
}

void sub_2636FB078(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, void **a16)
{
  __cxa_end_catch();
  pthread_mutex_unlock(&ctu::Singleton<ctu::power::assertion,ctu::power::assertion,ctu::PthreadMutexGuardPolicy<ctu::power::assertion>>::sInstance);
  size_t v16 = *(NSObject **)(a15 + 40);
  if (v16)
  {
    dispatch_group_leave(v16);
    int v17 = *(NSObject **)(a15 + 40);
    if (v17) {
      dispatch_release(v17);
    }
  }
  if (*(char *)(a15 + 31) < 0) {
    operator delete(*a16);
  }
  operator delete((void *)a15);
  xpc_object_t v18 = (std::__shared_weak_count *)a14[2];
  if (v18 && !atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
  operator delete(a14);
  JUMPOUT(0x2636FB21CLL);
}

void sub_2636FB0AC()
{
}

void sub_2636FB0B8()
{
}

void sub_2636FB0C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    JUMPOUT(0x2636FB0D0);
  }
  JUMPOUT(0x2636FB0D4);
}

void sub_2636FB128(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, void **a16)
{
  if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
  }
  int v17 = *(NSObject **)(a15 + 40);
  if (v17)
  {
    dispatch_group_leave(v17);
    xpc_object_t v18 = *(NSObject **)(a15 + 40);
    if (v18) {
      dispatch_release(v18);
    }
  }
  if (*(char *)(a15 + 31) < 0) {
    operator delete(*a16);
  }
  operator delete((void *)a15);
  int v19 = (std::__shared_weak_count *)a14[2];
  if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
  operator delete(a14);
  JUMPOUT(0x2636FB21CLL);
}

void sub_2636FB174(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void ___ZZN12PowerManager5State20createPowerAssertionENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS1_6chrono8durationIxNS1_5ratioILl1ELl1000EEEEEENKUlvE_clEv_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = std::__shared_weak_count::lock(v2);
    int v19 = v4;
    if (v4)
    {
      uint64_t v5 = *(void **)(a1 + 40);
      xpc_object_t v18 = v5;
      if (!v5)
      {
        uint64_t v6 = v4;
LABEL_19:
        if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
        return;
      }
      uint64_t v15 = v3;
      if (*(char *)(a1 + 79) < 0) {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a1 + 56), *(void *)(a1 + 64));
      }
      else {
        std::string __p = *(std::string *)(a1 + 56);
      }
      uint64_t v17 = *(void *)(a1 + 80);
      uint64_t v7 = (std::__shared_weak_count *)v5[10];
      if (!v7 || (v8 = v5[9], (unint64_t v9 = std::__shared_weak_count::lock(v7)) == 0)) {
        std::__throw_bad_weak_ptr[abi:ne180100]();
      }
      uint64_t v10 = v9;
      uint64_t v11 = operator new(0x28uLL);
      void *v11 = v15;
      size_t v12 = (std::string *)(v11 + 1);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(v12, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
      }
      else
      {
        *(_OWORD *)&v12->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        v11[3] = *((void *)&__p.__r_.__value_.__l + 2);
      }
      v11[4] = v17;
      int v13 = v5[11];
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      size_t v14 = operator new(0x18uLL);
      *size_t v14 = v11;
      v14[1] = v8;
      v14[2] = v10;
      dispatch_async_f(v13, v14, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN12PowerManager5StateEE15execute_wrappedIZZZNS4_20createPowerAssertionENSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEENS7_6chrono8durationIxNS7_5ratioILl1ELl1000EEEEEENKUlvE_clEvEUb_EUlvE_EEvOT_EUlvE_EEvP16dispatch_queue_sNS7_10unique_ptrISL_NS7_14default_deleteISL_EEEEENUlPvE_8__invokeESU_);
      if (atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_15;
        }
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
        if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_15:
          uint64_t v6 = v19;
          if (!v19) {
            return;
          }
          goto LABEL_19;
        }
      }
      operator delete(__p.__r_.__value_.__l.__data_);
      uint64_t v6 = v19;
      if (!v19) {
        return;
      }
      goto LABEL_19;
    }
  }
}

void sub_2636FB420(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void __copy_helper_block_e8_40c45_ZTSNSt3__18weak_ptrIN12PowerManager5StateEEE56c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(void *a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 48);
  a1[5] = *(void *)(a2 + 40);
  a1[6] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = (std::string *)(a1 + 7);
  if (*(char *)(a2 + 79) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)(a2 + 56), *(void *)(a2 + 64));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 56);
    a1[9] = *(void *)(a2 + 72);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  }
}

void sub_2636FB4AC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 48);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_40c45_ZTSNSt3__18weak_ptrIN12PowerManager5StateEEE56c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1)
{
  if (*(char *)(a1 + 79) < 0)
  {
    operator delete(*(void **)(a1 + 56));
    uint64_t v2 = *(std::__shared_weak_count **)(a1 + 48);
    if (!v2) {
      return;
    }
  }
  else
  {
    uint64_t v2 = *(std::__shared_weak_count **)(a1 + 48);
    if (!v2) {
      return;
    }
  }

  std::__shared_weak_count::__release_weak(v2);
}

void std::__shared_ptr_pointer<ctu::power::assertion *,std::shared_ptr<ctu::power::assertion> ctu::SharedSynchronizable<ctu::power::assertion>::make_shared_ptr<ctu::power::assertion>(ctu::power::assertion*)::{lambda(ctu::power::assertion *)#1},std::allocator<ctu::power::assertion>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<ctu::power::assertion *,std::shared_ptr<ctu::power::assertion> ctu::SharedSynchronizable<ctu::power::assertion>::make_shared_ptr<ctu::power::assertion>(ctu::power::assertion*)::{lambda(ctu::power::assertion *)#1},std::allocator<ctu::power::assertion>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<ctu::power::assertion *,std::shared_ptr<ctu::power::assertion> ctu::SharedSynchronizable<ctu::power::assertion>::make_shared_ptr<ctu::power::assertion>(ctu::power::assertion*)::{lambda(ctu::power::assertion *)#1},std::allocator<ctu::power::assertion>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableINS_5power9assertionEE15make_shared_ptrIS2_EENSt3__110shared_ptrIT_EEPS7_EUlPS2_E_") {
    return a1 + 24;
  }
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableINS_5power9assertionEE15make_shared_ptrIS2_EENSt3__110shared"
                                "_ptrIT_EEPS7_EUlPS2_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableINS_5power9assertionEE15make_shared_ptrIS2_EENSt3__110shared_ptrIT_EEPS7_EUlPS2_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableINS_5power9assertionEE15make_shared_ptrIS2_EENSt3__110shared_ptrIT_EEPS7_EUlPS2_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24; {
  return 0;
  }
}

void std::shared_ptr<ctu::power::assertion> ctu::SharedSynchronizable<ctu::power::assertion>::make_shared_ptr<ctu::power::assertion>(ctu::power::assertion*)::{lambda(ctu::power::assertion*)#1}::operator() const(ctu::power::assertion*)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,std::weak_ptr<ctu::power::assertion::HandleRaw>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::weak_ptr<ctu::power::assertion::HandleRaw>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::weak_ptr<ctu::power::assertion::HandleRaw>>>>::destroy(*(char **)(a1 + 40));
    uint64_t v2 = *(NSObject **)(a1 + 24);
    if (v2) {
      dispatch_release(v2);
    }
    unint64_t v3 = *(NSObject **)(a1 + 16);
    if (v3) {
      dispatch_release(v3);
    }
    uint64_t v4 = *(std::__shared_weak_count **)(a1 + 8);
    if (v4) {
      std::__shared_weak_count::__release_weak(v4);
    }
    operator delete((void *)a1);
  }
}

void std::__tree<std::__value_type<std::string,std::weak_ptr<ctu::power::assertion::HandleRaw>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::weak_ptr<ctu::power::assertion::HandleRaw>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::weak_ptr<ctu::power::assertion::HandleRaw>>>>::destroy(char *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,std::weak_ptr<ctu::power::assertion::HandleRaw>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::weak_ptr<ctu::power::assertion::HandleRaw>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::weak_ptr<ctu::power::assertion::HandleRaw>>>>::destroy(*(void *)a1);
    std::__tree<std::__value_type<std::string,std::weak_ptr<ctu::power::assertion::HandleRaw>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::weak_ptr<ctu::power::assertion::HandleRaw>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::weak_ptr<ctu::power::assertion::HandleRaw>>>>::destroy(*((void *)a1 + 1));
    uint64_t v2 = (std::__shared_weak_count *)*((void *)a1 + 8);
    if (v2) {
      std::__shared_weak_count::__release_weak(v2);
    }
    if (a1[55] < 0)
    {
      operator delete(*((void **)a1 + 4));
      unint64_t v3 = a1;
    }
    else
    {
      unint64_t v3 = a1;
    }
    operator delete(v3);
  }
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN12PowerManager5StateEE15execute_wrappedIZZZNS4_20createPowerAssertionENSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEENS7_6chrono8durationIxNS7_5ratioILl1ELl1000EEEEEENKUlvE_clEvEUb_EUlvE_EEvOT_EUlvE_EEvP16dispatch_queue_sNS7_10unique_ptrISL_NS7_14default_deleteISL_EEEEENUlPvE_8__invokeESU_(void ***a1)
{
  uint64_t v64 = *MEMORY[0x263EF8340];
  uint64_t v2 = *a1;
  unint64_t v3 = **a1;
  unint64_t v62 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v61[7] = v4;
  v61[8] = v4;
  v61[5] = v4;
  v61[6] = v4;
  v61[3] = v4;
  v61[4] = v4;
  v61[1] = v4;
  v61[2] = v4;
  long long v60 = v4;
  v61[0] = v4;
  *(_OWORD *)std::string __p = v4;
  long long v59 = v4;
  long long v56 = v4;
  long long v57 = v4;
  long long v54 = v4;
  long long v55 = v4;
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v54);
  long long v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v54, (uint64_t)"Power assertion watchdog fired for '", 36);
  uint64_t v6 = v2 + 1;
  int v7 = *((char *)v2 + 31);
  if (v7 >= 0) {
    uint64_t v8 = (uint64_t)(v2 + 1);
  }
  else {
    uint64_t v8 = (uint64_t)v2[1];
  }
  if (v7 >= 0) {
    uint64_t v9 = *((unsigned __int8 *)v2 + 31);
  }
  else {
    uint64_t v9 = (uint64_t)v2[2];
  }
  uint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, v8, v9);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"'; Timeout (millisec): ",
    23);
  std::ostream::operator<<();
  if (*((char *)v2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v53, (const std::string::value_type *)v2[1], (std::string::size_type)v2[2]);
  }
  else
  {
    long long v11 = *(_OWORD *)v6;
    v53.__r_.__value_.__r.__words[2] = (std::string::size_type)v2[3];
    *(_OWORD *)&v53.__r_.__value_.__l.__data_ = v11;
  }
  PowerManager::State::releasePowerAssertion_sync(v3, (const void **)&v53.__r_.__value_.__l.__data_);
  if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v53.__r_.__value_.__l.__data_);
  }
  if (TelephonyUtilIsInternalBuild())
  {
    size_t v12 = (std::__shared_weak_count *)v3[35];
    if (!v12) {
      goto LABEL_89;
    }
    int v13 = std::__shared_weak_count::lock(v12);
    if (!v13) {
      goto LABEL_89;
    }
    size_t v14 = v13;
    uint64_t v15 = v3[34];
    if (!v15) {
      goto LABEL_69;
    }
    xpc_object_t v16 = xpc_dictionary_create(0, 0, 0);
    if (v16 || (xpc_object_t v16 = xpc_null_create()) != 0)
    {
      if (MEMORY[0x263E6A240](v16) == MEMORY[0x263EF8708])
      {
        xpc_retain(v16);
        xpc_object_t v17 = v16;
      }
      else
      {
        xpc_object_t v17 = xpc_null_create();
      }
    }
    else
    {
      xpc_object_t v17 = xpc_null_create();
      xpc_object_t v16 = 0;
    }
    xpc_release(v16);
    if ((BYTE8(v60) & 0x10) != 0)
    {
      uint64_t v23 = v60;
      if ((unint64_t)v60 < *((void *)&v57 + 1))
      {
        *(void *)&long long v60 = *((void *)&v57 + 1);
        uint64_t v23 = *((void *)&v57 + 1);
      }
      uint64_t v24 = (const void *)v57;
      size_t v21 = v23 - v57;
      if ((unint64_t)(v23 - v57) > 0x7FFFFFFFFFFFFFF7) {
        goto LABEL_72;
      }
    }
    else
    {
      if ((BYTE8(v60) & 8) == 0)
      {
        size_t v21 = 0;
        HIBYTE(v52) = 0;
        p_dst = (void **)&__dst;
        goto LABEL_39;
      }
      uint64_t v24 = (const void *)*((void *)&v55 + 1);
      size_t v21 = *((void *)&v56 + 1) - *((void *)&v55 + 1);
      if (*((void *)&v56 + 1) - *((void *)&v55 + 1) > 0x7FFFFFFFFFFFFFF7uLL) {
LABEL_72:
      }
        std::string::__throw_length_error[abi:ne180100]();
    }
    if (v21 >= 0x17)
    {
      uint64_t v25 = (v21 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v21 | 7) != 0x17) {
        uint64_t v25 = v21 | 7;
      }
      uint64_t v26 = v25 + 1;
      p_dst = (void **)operator new(v25 + 1);
      size_t v51 = v21;
      int64_t v52 = v26 | 0x8000000000000000;
      long long __dst = p_dst;
    }
    else
    {
      HIBYTE(v52) = v21;
      p_dst = (void **)&__dst;
      if (!v21)
      {
LABEL_39:
        *((unsigned char *)p_dst + v21) = 0;
        if (v52 >= 0) {
          size_t v27 = (const char *)&__dst;
        }
        else {
          size_t v27 = (const char *)__dst;
        }
        xpc_object_t v28 = xpc_string_create(v27);
        if (!v28) {
          xpc_object_t v28 = xpc_null_create();
        }
        xpc_dictionary_set_value(v17, (const char *)*MEMORY[0x263F263C0], v28);
        xpc_object_t v29 = xpc_null_create();
        xpc_release(v28);
        xpc_release(v29);
        if (SHIBYTE(v52) < 0) {
          operator delete(__dst);
        }
        xpc_object_t v30 = xpc_int64_create(0);
        if (!v30) {
          xpc_object_t v30 = xpc_null_create();
        }
        xpc_dictionary_set_value(v17, (const char *)*MEMORY[0x263F25E10], v30);
        xpc_object_t v31 = xpc_null_create();
        xpc_release(v30);
        xpc_release(v31);
        Timestamp::Timestamp((Timestamp *)buf);
        Timestamp::asString(v32, 0, 9, &__dst);
        if (v52 >= 0) {
          uint64_t v33 = (const char *)&__dst;
        }
        else {
          uint64_t v33 = (const char *)__dst;
        }
        xpc_object_t v34 = xpc_string_create(v33);
        if (!v34) {
          xpc_object_t v34 = xpc_null_create();
        }
        xpc_dictionary_set_value(v17, (const char *)*MEMORY[0x263F26030], v34);
        xpc_object_t v35 = xpc_null_create();
        xpc_release(v34);
        xpc_release(v35);
        if (SHIBYTE(v52) < 0) {
          operator delete(__dst);
        }
        std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)buf, *((void **)&buf[0] + 1));
        uint64_t v36 = (const void *)*MEMORY[0x263F261B0];
        size_t v37 = strlen((const char *)*MEMORY[0x263F261B0]);
        if (v37 > 0x7FFFFFFFFFFFFFF7) {
          std::string::__throw_length_error[abi:ne180100]();
        }
        size_t v38 = v37;
        if (v37 >= 0x17)
        {
          uint64_t v40 = (v37 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v37 | 7) != 0x17) {
            uint64_t v40 = v37 | 7;
          }
          uint64_t v41 = v40 + 1;
          int v39 = (void **)operator new(v40 + 1);
          size_t v51 = v38;
          int64_t v52 = v41 | 0x8000000000000000;
          long long __dst = v39;
        }
        else
        {
          HIBYTE(v52) = v37;
          int v39 = (void **)&__dst;
          if (!v37) {
            goto LABEL_63;
          }
        }
        memmove(v39, v36, v38);
LABEL_63:
        *((unsigned char *)v39 + v38) = 0;
        *(void *)&buf[0] = v17;
        if (v17) {
          xpc_retain(v17);
        }
        else {
          *(void *)&buf[0] = xpc_null_create();
        }
        size_t v49 = 0;
        ServiceManager::runCommand(v15, (uint64_t)&__dst, (void **)buf, &v49);
        xpc_release(*(xpc_object_t *)&buf[0]);
        *(void *)&buf[0] = 0;
        if (SHIBYTE(v52) < 0) {
          operator delete(__dst);
        }
        xpc_release(v17);
LABEL_69:
        if (!atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
        goto LABEL_89;
      }
    }
    memmove(p_dst, v24, v21);
    goto LABEL_39;
  }
  xpc_object_t v18 = v3[5];
  if (!os_log_type_enabled(v18, OS_LOG_TYPE_FAULT)) {
    goto LABEL_89;
  }
  if ((BYTE8(v60) & 0x10) != 0)
  {
    uint64_t v42 = v60;
    if ((unint64_t)v60 < *((void *)&v57 + 1))
    {
      *(void *)&long long v60 = *((void *)&v57 + 1);
      uint64_t v42 = *((void *)&v57 + 1);
    }
    size_t v43 = (const void **)&v57;
  }
  else
  {
    if ((BYTE8(v60) & 8) == 0)
    {
      size_t v19 = 0;
      HIBYTE(v52) = 0;
      uint64_t v20 = (void **)&__dst;
      goto LABEL_85;
    }
    size_t v43 = (const void **)&v55 + 1;
    uint64_t v42 = *((void *)&v56 + 1);
  }
  int v44 = *v43;
  size_t v19 = v42 - (void)*v43;
  if (v19 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v19 >= 0x17)
  {
    uint64_t v45 = (v19 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v19 | 7) != 0x17) {
      uint64_t v45 = v19 | 7;
    }
    uint64_t v46 = v45 + 1;
    uint64_t v20 = (void **)operator new(v45 + 1);
    size_t v51 = v19;
    int64_t v52 = v46 | 0x8000000000000000;
    long long __dst = v20;
  }
  else
  {
    HIBYTE(v52) = v42 - *(unsigned char *)v43;
    uint64_t v20 = (void **)&__dst;
    if (!v19) {
      goto LABEL_85;
    }
  }
  memmove(v20, v44, v19);
LABEL_85:
  *((unsigned char *)v20 + v19) = 0;
  uint64_t v47 = (void **)&__dst;
  if (v52 < 0) {
    uint64_t v47 = __dst;
  }
  LODWORD(buf[0]) = 136315138;
  *(void *)((char *)buf + 4) = v47;
  _os_log_fault_impl(&dword_26368A000, v18, OS_LOG_TYPE_FAULT, "%s", (uint8_t *)buf, 0xCu);
  if (SHIBYTE(v52) < 0) {
    operator delete(__dst);
  }
LABEL_89:
  *(void *)&long long v54 = *MEMORY[0x263F8C2C8];
  *(void *)((char *)&v54 + *(void *)(v54 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  *((void *)&v54 + 1) = MEMORY[0x263F8C318] + 16;
  if (SHIBYTE(v59) < 0) {
    operator delete(__p[1]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x263E69630](v61);
  if (*((char *)v2 + 31) < 0) {
    operator delete(*v6);
  }
  operator delete(v2);
  size_t v48 = (std::__shared_weak_count *)a1[2];
  if (v48 && !atomic_fetch_add(&v48->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
    std::__shared_weak_count::__release_weak(v48);
  }
  operator delete(a1);
}

void sub_2636FBE58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void PowerManager::State::releasePowerAssertion_sync(void *a1, const void **a2)
{
  uint64_t v2 = a2;
  uint64_t v56 = *MEMORY[0x263EF8340];
  long long v5 = a1 + 26;
  long long v4 = (uint64_t *)a1[26];
  if (!v4) {
    goto LABEL_40;
  }
  char v6 = *((unsigned char *)a2 + 23);
  if (v6 >= 0) {
    int v7 = a2;
  }
  else {
    int v7 = *a2;
  }
  if (v6 >= 0) {
    size_t v8 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v8 = (size_t)a2[1];
  }
  uint64_t v9 = a1 + 26;
  uint64_t v10 = (uint64_t *)a1[26];
  do
  {
    while (1)
    {
      int v11 = *((char *)v10 + 55);
      size_t v12 = v11 >= 0 ? v10 + 4 : (uint64_t *)v10[4];
      size_t v13 = v11 >= 0 ? *((unsigned __int8 *)v10 + 55) : v10[5];
      size_t v14 = v8 >= v13 ? v13 : v8;
      int v15 = memcmp(v12, v7, v14);
      if (v15) {
        break;
      }
      if (v13 >= v8) {
        goto LABEL_23;
      }
LABEL_9:
      uint64_t v10 = (uint64_t *)v10[1];
      if (!v10) {
        goto LABEL_24;
      }
    }
    if (v15 < 0) {
      goto LABEL_9;
    }
LABEL_23:
    uint64_t v9 = v10;
    uint64_t v10 = (uint64_t *)*v10;
  }
  while (v10);
LABEL_24:
  if (v9 == v5) {
    goto LABEL_40;
  }
  int v16 = *((char *)v9 + 55);
  if (v16 >= 0) {
    xpc_object_t v17 = v9 + 4;
  }
  else {
    xpc_object_t v17 = (const void *)v9[4];
  }
  if (v16 >= 0) {
    size_t v18 = *((unsigned __int8 *)v9 + 55);
  }
  else {
    size_t v18 = v9[5];
  }
  if (v18 >= v8) {
    size_t v19 = v8;
  }
  else {
    size_t v19 = v18;
  }
  int v20 = memcmp(v7, v17, v19);
  if (v20)
  {
    if ((v20 & 0x80000000) == 0) {
      goto LABEL_36;
    }
LABEL_40:
    uint64_t v23 = a1[5];
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v24 = v2;
      if (*((char *)v2 + 23) < 0) {
        uint64_t v24 = (const void **)*v2;
      }
      int v54 = 136315138;
      long long v55 = v24;
      uint64_t v25 = "#I Attempt to release non-existent power assertion '%s'";
LABEL_58:
      _os_log_impl(&dword_26368A000, v23, OS_LOG_TYPE_DEFAULT, v25, (uint8_t *)&v54, 0xCu);
    }
  }
  else
  {
    if (v8 < v18) {
      goto LABEL_40;
    }
LABEL_36:
    size_t v21 = (void *)v9[1];
    if (v21)
    {
      do
      {
        size_t v22 = v21;
        size_t v21 = (void *)*v21;
      }
      while (v21);
    }
    else
    {
      uint64_t v26 = v9;
      do
      {
        size_t v22 = (void *)v26[2];
        BOOL v27 = *v22 == (void)v26;
        uint64_t v26 = v22;
      }
      while (!v27);
    }
    if ((void *)a1[25] == v9) {
      a1[25] = v22;
    }
    --a1[27];
    std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v4, v9);
    xpc_object_t v28 = (std::__shared_weak_count *)v9[8];
    if (v28 && !atomic_fetch_add(&v28->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
    if (*((char *)v9 + 55) < 0) {
      operator delete((void *)v9[4]);
    }
    operator delete(v9);
    uint64_t v23 = a1[5];
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
    {
      xpc_object_t v29 = v2;
      if (*((char *)v2 + 23) < 0) {
        xpc_object_t v29 = (const void **)*v2;
      }
      int v54 = 136315138;
      long long v55 = v29;
      uint64_t v25 = "#I Released power assertion '%s'";
      goto LABEL_58;
    }
  }
  xpc_object_t v30 = (uint64_t *)a1[29];
  if (!v30) {
    goto LABEL_113;
  }
  char v31 = *((unsigned char *)v2 + 23);
  if (v31 >= 0) {
    uint64_t v32 = v2;
  }
  else {
    uint64_t v32 = *v2;
  }
  if (v31 >= 0) {
    size_t v33 = *((unsigned __int8 *)v2 + 23);
  }
  else {
    size_t v33 = (size_t)v2[1];
  }
  xpc_object_t v34 = a1 + 29;
  xpc_object_t v35 = (uint64_t *)a1[29];
  while (2)
  {
    while (2)
    {
      int v36 = *((char *)v35 + 55);
      if (v36 >= 0) {
        size_t v37 = v35 + 4;
      }
      else {
        size_t v37 = (const void *)v35[4];
      }
      if (v36 >= 0) {
        size_t v38 = *((unsigned __int8 *)v35 + 55);
      }
      else {
        size_t v38 = v35[5];
      }
      if (v33 >= v38) {
        size_t v39 = v38;
      }
      else {
        size_t v39 = v33;
      }
      int v40 = memcmp(v37, v32, v39);
      if (v40)
      {
        if ((v40 & 0x80000000) == 0) {
          break;
        }
        goto LABEL_67;
      }
      if (v38 < v33)
      {
LABEL_67:
        xpc_object_t v35 = (uint64_t *)v35[1];
        if (!v35) {
          goto LABEL_82;
        }
        continue;
      }
      break;
    }
    xpc_object_t v34 = v35;
    xpc_object_t v35 = (uint64_t *)*v35;
    if (v35) {
      continue;
    }
    break;
  }
LABEL_82:
  if (v34 != a1 + 29)
  {
    int v41 = *((char *)v34 + 55);
    if (v41 >= 0) {
      uint64_t v42 = v34 + 4;
    }
    else {
      uint64_t v42 = (const void *)v34[4];
    }
    if (v41 >= 0) {
      size_t v43 = *((unsigned __int8 *)v34 + 55);
    }
    else {
      size_t v43 = v34[5];
    }
    if (v43 >= v33) {
      size_t v44 = v33;
    }
    else {
      size_t v44 = v43;
    }
    int v45 = memcmp(v32, v42, v44);
    if (v45)
    {
      if (v45 < 0) {
        goto LABEL_113;
      }
LABEL_96:
      uint64_t v46 = (void *)v34[1];
      if (v46)
      {
        do
        {
          uint64_t v47 = v46;
          uint64_t v46 = (void *)*v46;
        }
        while (v46);
      }
      else
      {
        size_t v48 = v34;
        do
        {
          uint64_t v47 = (void *)v48[2];
          BOOL v27 = *v47 == (void)v48;
          size_t v48 = v47;
        }
        while (!v27);
      }
      if ((void *)a1[28] == v34) {
        a1[28] = v47;
      }
      --a1[30];
      std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v30, v34);
      size_t v49 = (std::__shared_weak_count *)v34[8];
      if (v49 && !atomic_fetch_add(&v49->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
        std::__shared_weak_count::__release_weak(v49);
      }
      if (*((char *)v34 + 55) < 0) {
        operator delete((void *)v34[4]);
      }
      operator delete(v34);
      int v50 = a1[5];
      if (os_log_type_enabled(v50, OS_LOG_TYPE_DEFAULT))
      {
        if (*((char *)v2 + 23) < 0) {
          uint64_t v2 = (const void **)*v2;
        }
        int v54 = 136315138;
        long long v55 = v2;
        _os_log_impl(&dword_26368A000, v50, OS_LOG_TYPE_DEFAULT, "#I Clear watchdog timer for power assertion '%s'", (uint8_t *)&v54, 0xCu);
      }
    }
    else if (v33 >= v43)
    {
      goto LABEL_96;
    }
  }
LABEL_113:
  if (!a1[27])
  {
    *(unsigned char *)(a1[17] + 88) = 0;
    uint64_t v51 = a1[20];
    if (v51)
    {
      int64_t v52 = a1[5];
      if (os_log_type_enabled(v52, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v54) = 0;
        _os_log_impl(&dword_26368A000, v52, OS_LOG_TYPE_DEFAULT, "#I No more assertions held, acknowledging previous notification", (uint8_t *)&v54, 2u);
        uint64_t v51 = a1[20];
      }
      (*(void (**)(uint64_t, uint64_t))(v51 + 16))(v51, 1);
      std::string v53 = (const void *)a1[20];
      a1[20] = 0;
      if (v53) {
        _Block_release(v53);
      }
    }
  }
}

void sub_2636FC5DC(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<support::misc::Watchdog  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<support::misc::Watchdog  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 24);
  if (v1)
  {
    TelephonyBasebandWatchdogStop();
    operator delete(v1);
  }
}

uint64_t std::__shared_ptr_pointer<support::misc::Watchdog  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x80000002637A752CLL) {
    return a1 + 24;
  }
  if (((v3 & 0x80000002637A752CLL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000002637A752CLL)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000002637A752CLL & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 24;
  }
  return 0;
}

void dispatch::async<void ctu::SharedSynchronizable<PowerManager::State>::execute_wrapped<PowerManager::State::releasePowerAssertion(std::string)::{lambda(void)#1}>(PowerManager::State::releasePowerAssertion(std::string)::{lambda(void)#1} &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<PowerManager::State::releasePowerAssertion(std::string)::{lambda(void)#1},std::default_delete<PowerManager::State::releasePowerAssertion(std::string)::{lambda(void)#1}>>)::{lambda(void *)#1}::__invoke(void *a1)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = **(void ***)a1;
  long long v4 = (void **)(*(void *)a1 + 8);
  if (*(char *)(*(void *)a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v7, (const std::string::value_type *)v2[1], v2[2]);
  }
  else
  {
    long long v5 = *(_OWORD *)v4;
    v7.__r_.__value_.__r.__words[2] = v2[3];
    *(_OWORD *)&v7.__r_.__value_.__l.__data_ = v5;
  }
  PowerManager::State::releasePowerAssertion_sync(v3, (const void **)&v7.__r_.__value_.__l.__data_);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v7.__r_.__value_.__l.__data_);
    if ((*((char *)v2 + 31) & 0x80000000) == 0)
    {
LABEL_6:
      operator delete(v2);
      char v6 = (std::__shared_weak_count *)*((void *)a1 + 2);
      if (!v6) {
        goto LABEL_12;
      }
      goto LABEL_10;
    }
  }
  else if ((*((char *)v2 + 31) & 0x80000000) == 0)
  {
    goto LABEL_6;
  }
  operator delete(*v4);
  operator delete(v2);
  char v6 = (std::__shared_weak_count *)*((void *)a1 + 2);
  if (!v6) {
    goto LABEL_12;
  }
LABEL_10:
  if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
LABEL_12:

  operator delete(a1);
}

void sub_2636FC7FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  std::unique_ptr<PowerManager::State::releasePowerAssertion(std::string)::{lambda(void)#1},std::default_delete<PowerManager::State::releasePowerAssertion(std::string)::{lambda(void)#1}>>::~unique_ptr[abi:ne180100](&a10);
  size_t v18 = (std::__shared_weak_count *)v16[2];
  if (v18)
  {
    if (!atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  operator delete(v16);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<PowerManager::State::releasePowerAssertion(std::string)::{lambda(void)#1},std::default_delete<PowerManager::State::releasePowerAssertion(std::string)::{lambda(void)#1}>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*(char *)(v2 + 31) < 0) {
      operator delete(*(void **)(v2 + 8));
    }
    operator delete((void *)v2);
  }
  return a1;
}

void ___ZN12PowerManager5State10initializeEv_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(std::__shared_weak_count **)(v1 + 80);
  if (!v2 || (uint64_t v3 = *(void *)(v1 + 72), (v4 = std::__shared_weak_count::lock(v2)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  long long v5 = v4;
  atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    uint64_t v67 = 0;
    uint64_t v68 = 0;
    char v6 = *(std::__shared_weak_count **)(v1 + 280);
    if (!v6) {
      goto LABEL_90;
    }
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v5);
    uint64_t v67 = 0;
    uint64_t v68 = 0;
    char v6 = *(std::__shared_weak_count **)(v1 + 280);
    if (!v6) {
      goto LABEL_90;
    }
  }
  uint64_t v68 = std::__shared_weak_count::lock(v6);
  if (!v68) {
    goto LABEL_93;
  }
  uint64_t v7 = *(void *)(v1 + 272);
  uint64_t v67 = v7;
  if (v7)
  {
    size_t v8 = abm::kCommandSetPowerDownMessageList;
    size_t v9 = strlen(abm::kCommandSetPowerDownMessageList);
    if (v9 > 0x7FFFFFFFFFFFFFF7) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    size_t v10 = v9;
    if (v9 >= 0x17)
    {
      uint64_t v12 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v9 | 7) != 0x17) {
        uint64_t v12 = v9 | 7;
      }
      uint64_t v13 = v12 + 1;
      p_dst = (long long *)operator new(v12 + 1);
      *((void *)&__dst + 1) = v10;
      unint64_t v66 = v13 | 0x8000000000000000;
      *(void *)&long long __dst = p_dst;
    }
    else
    {
      HIBYTE(v66) = v9;
      p_dst = &__dst;
      if (!v9)
      {
LABEL_17:
        *((unsigned char *)p_dst + v10) = 0;
        aBlock[0] = MEMORY[0x263EF8330];
        aBlock[1] = 1174405120;
        aBlock[2] = ___ZN12PowerManager5State10initializeEv_block_invoke_2;
        aBlock[3] = &__block_descriptor_tmp_47_0;
        void aBlock[4] = v1;
        void aBlock[5] = v3;
        std::string::size_type v63 = v5;
        atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        size_t v14 = _Block_copy(aBlock);
        uint64_t v64 = v14;
        ServiceManager::registerCommandHandler(v7, (uint64_t)&__dst, &v64);
        if (v14) {
          _Block_release(v14);
        }
        if (SHIBYTE(v66) < 0) {
          operator delete((void *)__dst);
        }
        char v61 = 9;
        long long v59 = 0;
        strcpy((char *)v60, "power.mgr");
        AppleBasebandManager::create();
        long long v15 = __dst;
        long long __dst = 0uLL;
        int v16 = *(std::__shared_weak_count **)(v1 + 112);
        *(_OWORD *)(v1 + 104) = v15;
        if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
        xpc_object_t v17 = (std::__shared_weak_count *)*((void *)&__dst + 1);
        if (*((void *)&__dst + 1)
          && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&__dst + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
          size_t v18 = v59;
          if (!v59)
          {
LABEL_28:
            if (v61 < 0) {
              operator delete(v60[0]);
            }
            size_t v19 = (const void *)*MEMORY[0x263F263F0];
            size_t v20 = strlen((const char *)*MEMORY[0x263F263F0]);
            if (v20 > 0x7FFFFFFFFFFFFFF7) {
              std::string::__throw_length_error[abi:ne180100]();
            }
            size_t v21 = (void *)v20;
            if (v20 >= 0x17)
            {
              uint64_t v23 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v20 | 7) != 0x17) {
                uint64_t v23 = v20 | 7;
              }
              uint64_t v24 = v23 + 1;
              size_t v22 = operator new(v23 + 1);
              __p[1] = v21;
              unint64_t v58 = v24 | 0x8000000000000000;
              __p[0] = v22;
            }
            else
            {
              HIBYTE(v58) = v20;
              size_t v22 = __p;
              if (!v20)
              {
LABEL_38:
                *((unsigned char *)v21 + (void)v22) = 0;
                v53[0] = MEMORY[0x263EF8330];
                v53[1] = 1174405120;
                v53[2] = ___ZN12PowerManager5State10initializeEv_block_invoke_48;
                v53[3] = &__block_descriptor_tmp_52_0;
                v53[4] = v1;
                v53[5] = v3;
                int v54 = v5;
                atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
                uint64_t v25 = _Block_copy(v53);
                uint64_t v26 = *(NSObject **)(v1 + 88);
                if (v26) {
                  dispatch_retain(*(dispatch_object_t *)(v1 + 88));
                }
                long long v55 = v25;
                dispatch_object_t object = v26;
                AppleBasebandManager::setEventHandler();
                if (object) {
                  dispatch_release(object);
                }
                if (v55) {
                  _Block_release(v55);
                }
                if (SHIBYTE(v58) < 0) {
                  operator delete(__p[0]);
                }
                BOOL v27 = (const void *)*MEMORY[0x263F263F8];
                size_t v28 = strlen((const char *)*MEMORY[0x263F263F8]);
                if (v28 > 0x7FFFFFFFFFFFFFF7) {
                  std::string::__throw_length_error[abi:ne180100]();
                }
                xpc_object_t v29 = (void *)v28;
                if (v28 >= 0x17)
                {
                  uint64_t v31 = (v28 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v28 | 7) != 0x17) {
                    uint64_t v31 = v28 | 7;
                  }
                  uint64_t v32 = v31 + 1;
                  xpc_object_t v30 = operator new(v31 + 1);
                  v51[1] = v29;
                  unint64_t v52 = v32 | 0x8000000000000000;
                  v51[0] = v30;
                }
                else
                {
                  HIBYTE(v52) = v28;
                  xpc_object_t v30 = v51;
                  if (!v28)
                  {
LABEL_54:
                    *((unsigned char *)v29 + (void)v30) = 0;
                    v47[0] = MEMORY[0x263EF8330];
                    v47[1] = 1174405120;
                    v47[2] = ___ZN12PowerManager5State10initializeEv_block_invoke_53;
                    _OWORD v47[3] = &__block_descriptor_tmp_56_1;
                    v47[4] = v1;
                    v47[5] = v3;
                    size_t v48 = v5;
                    atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
                    size_t v33 = _Block_copy(v47);
                    xpc_object_t v34 = *(NSObject **)(v1 + 88);
                    if (v34) {
                      dispatch_retain(*(dispatch_object_t *)(v1 + 88));
                    }
                    size_t v49 = v33;
                    dispatch_object_t v50 = v34;
                    AppleBasebandManager::setEventHandler();
                    if (v50) {
                      dispatch_release(v50);
                    }
                    if (v49) {
                      _Block_release(v49);
                    }
                    if (SHIBYTE(v52) < 0) {
                      operator delete(v51[0]);
                    }
                    AppleBasebandManager::eventsOn(*(AppleBasebandManager **)(v1 + 104));
                    uint64_t v35 = *(void *)(v1 + 136);
                    v43[0] = MEMORY[0x263EF8330];
                    v43[1] = 1174405120;
                    v43[2] = ___ZN12PowerManager5State10initializeEv_block_invoke_57;
                    v43[3] = &__block_descriptor_tmp_59_2;
                    v43[4] = v3;
                    size_t v44 = v5;
                    atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
                    uint64_t v45 = v67;
                    uint64_t v46 = v68;
                    if (v68) {
                      atomic_fetch_add_explicit(&v68->__shared_owners_, 1uLL, memory_order_relaxed);
                    }
                    int v36 = _Block_copy(v43);
                    size_t v37 = *(NSObject **)(v1 + 88);
                    if (v37) {
                      dispatch_retain(*(dispatch_object_t *)(v1 + 88));
                    }
                    if (v36)
                    {
                      size_t v38 = _Block_copy(v36);
                      size_t v39 = *(const void **)(v35 + 104);
                      *(void *)(v35 + 104) = v38;
                      if (!v39) {
                        goto LABEL_71;
                      }
                    }
                    else
                    {
                      size_t v39 = *(const void **)(v35 + 104);
                      *(void *)(v35 + 104) = 0;
                      if (!v39)
                      {
LABEL_71:
                        if (v37) {
                          dispatch_retain(v37);
                        }
                        int v40 = *(NSObject **)(v35 + 112);
                        *(void *)(v35 + 112) = v37;
                        if (v40) {
                          dispatch_release(v40);
                        }
                        if (v37) {
                          dispatch_release(v37);
                        }
                        if (v36) {
                          _Block_release(v36);
                        }
                        int v41 = v46;
                        if (v46 && !atomic_fetch_add(&v46->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                        {
                          ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
                          std::__shared_weak_count::__release_weak(v41);
                        }
                        if (v44) {
                          std::__shared_weak_count::__release_weak(v44);
                        }
                        if (v48) {
                          std::__shared_weak_count::__release_weak(v48);
                        }
                        if (v54) {
                          std::__shared_weak_count::__release_weak(v54);
                        }
                        if (v63) {
                          std::__shared_weak_count::__release_weak(v63);
                        }
                        goto LABEL_90;
                      }
                    }
                    _Block_release(v39);
                    goto LABEL_71;
                  }
                }
                memmove(v30, v27, (size_t)v29);
                goto LABEL_54;
              }
            }
            memmove(v22, v19, (size_t)v21);
            goto LABEL_38;
          }
        }
        else
        {
          size_t v18 = v59;
          if (!v59) {
            goto LABEL_28;
          }
        }
        CFRelease(v18);
        goto LABEL_28;
      }
    }
    memmove(p_dst, v8, v10);
    goto LABEL_17;
  }
LABEL_90:
  uint64_t v42 = v68;
  if (v68 && !atomic_fetch_add(&v68->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
    std::__shared_weak_count::__release_weak(v42);
  }
LABEL_93:
  std::__shared_weak_count::__release_weak(v5);
}

void sub_2636FD008(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,std::__shared_weak_count *a23,char a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,std::__shared_weak_count *a38,char a39,uint64_t a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  if (a23) {
    std::__shared_weak_count::__release_weak(a23);
  }
  if (a38) {
    std::__shared_weak_count::__release_weak(a38);
  }
  size_t v49 = *(std::__shared_weak_count **)(v47 - 160);
  if (v49)
  {
    std::__shared_weak_count::__release_weak(v49);
    std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100](v47 - 112);
    std::__shared_weak_count::__release_weak(v46);
    _Unwind_Resume(a1);
  }
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100](v47 - 112);
  std::__shared_weak_count::__release_weak(v46);
  _Unwind_Resume(a1);
}

void ___ZN12PowerManager5State10initializeEv_block_invoke_2(void *a1, void **a2, void **a3)
{
  long long v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    uint64_t v7 = a1[4];
    size_t v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      size_t v9 = v8;
      if (!a1[5])
      {
LABEL_12:
        if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
        return;
      }
      v12[0] = MEMORY[0x263EF8330];
      v12[1] = 1174405120;
      v12[2] = ___ZN12PowerManager5State10initializeEv_block_invoke_3;
      v12[3] = &__block_descriptor_tmp_43_0;
      size_t v10 = *a2;
      v12[4] = v7;
      xpc_object_t object = v10;
      if (v10)
      {
        xpc_retain(v10);
        int v11 = *a3;
        if (!*a3) {
          goto LABEL_9;
        }
      }
      else
      {
        xpc_object_t object = xpc_null_create();
        int v11 = *a3;
        if (!*a3)
        {
LABEL_9:
          aBlocunint64_t k = v11;
          ctu::SharedSynchronizable<PowerManager::State>::execute_wrapped((uint64_t *)(v7 + 72), (uint64_t)v12);
          if (aBlock) {
            _Block_release(aBlock);
          }
          xpc_release(object);
          xpc_object_t object = 0;
          goto LABEL_12;
        }
      }
      int v11 = _Block_copy(v11);
      goto LABEL_9;
    }
  }
}

void ___ZN12PowerManager5State10initializeEv_block_invoke_3(void *a1)
{
  uint64_t v3 = a1[4];
  uint64_t v2 = (void *)a1[5];
  uint64_t v4 = *(void *)(v3 + 136);
  xpc_object_t object = v2;
  if (v2) {
    xpc_retain(v2);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  PowerStats::setPowerdownMessage(v4, &object);
  xpc_release(object);
  xpc_object_t object = 0;
  xpc_object_t v5 = xpc_null_create();
  uint64_t v6 = a1[6];
  xpc_object_t v9 = v5;
  xpc_object_t v7 = xpc_null_create();
  (*(void (**)(uint64_t, void, xpc_object_t *))(v6 + 16))(v6, 0, &v9);
  xpc_release(v9);
  xpc_release(v7);
}

void sub_2636FD34C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t a9, xpc_object_t object)
{
  xpc_release(object);
  xpc_release(v10);
  _Unwind_Resume(a1);
}

void ___ZN12PowerManager5State10initializeEv_block_invoke_48(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    uint64_t v3 = a1[4];
    uint64_t v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      xpc_object_t v5 = v4;
      if (a1[5]) {
        PowerStats::dumpState(*(os_log_t **)(v3 + 136));
      }
      if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void sub_2636FD454(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void ___ZN12PowerManager5State10initializeEv_block_invoke_53(void *a1)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    uint64_t v3 = (void *)a1[4];
    uint64_t v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      xpc_object_t v5 = v4;
      uint64_t v6 = a1[5];
      if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v5);
      }
      if (v6)
      {
        xpc_object_t v7 = (os_log_t *)v3[17];
        if (v7) {
          PowerStats::dumpState(v7);
        }
        size_t v8 = (void *)v3[25];
        if (v8 != v3 + 26)
        {
          do
          {
            xpc_object_t v9 = v3[5];
            if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
            {
              size_t v10 = v8 + 4;
              if (*((char *)v8 + 55) < 0) {
                size_t v10 = (void *)*v10;
              }
              *(_DWORD *)std::string buf = 136315138;
              size_t v20 = v10;
              _os_log_impl(&dword_26368A000, v9, OS_LOG_TYPE_DEFAULT, "#I Pending power assertion '%s'", buf, 0xCu);
            }
            int v11 = (void *)v8[1];
            if (v11)
            {
              do
              {
                uint64_t v12 = v11;
                int v11 = (void *)*v11;
              }
              while (v11);
            }
            else
            {
              do
              {
                uint64_t v12 = (void *)v8[2];
                BOOL v13 = *v12 == (void)v8;
                size_t v8 = v12;
              }
              while (!v13);
            }
            size_t v8 = v12;
          }
          while (v12 != v3 + 26);
        }
        size_t v14 = (void *)v3[31];
        if (v14 != v3 + 32)
        {
          do
          {
            long long v15 = v3[5];
            if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
            {
              int v16 = v14 + 4;
              if (*((char *)v14 + 55) < 0) {
                int v16 = (void *)*v16;
              }
              *(_DWORD *)std::string buf = 136315138;
              size_t v20 = v16;
              _os_log_impl(&dword_26368A000, v15, OS_LOG_TYPE_DEFAULT, "#I Deferred work due to sleep '%s'", buf, 0xCu);
            }
            xpc_object_t v17 = (void *)v14[1];
            if (v17)
            {
              do
              {
                size_t v18 = v17;
                xpc_object_t v17 = (void *)*v17;
              }
              while (v17);
            }
            else
            {
              do
              {
                size_t v18 = (void *)v14[2];
                BOOL v13 = *v18 == (void)v14;
                size_t v14 = v18;
              }
              while (!v13);
            }
            size_t v14 = v18;
          }
          while (v18 != v3 + 32);
        }
      }
    }
  }
}

void ___ZN12PowerManager5State10initializeEv_block_invoke_57(void *a1, xpc_object_t *a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[5];
  if (!v3) {
    return;
  }
  xpc_object_t v5 = std::__shared_weak_count::lock(v3);
  size_t v20 = v5;
  if (!v5) {
    return;
  }
  uint64_t v6 = v5;
  uint64_t v19 = a1[4];
  if (!v19 || (uint64_t v7 = a1[6]) == 0)
  {
LABEL_18:
    if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
    return;
  }
  size_t v8 = (const void *)*MEMORY[0x263F261A0];
  size_t v9 = strlen((const char *)*MEMORY[0x263F261A0]);
  if (v9 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v10 = (void *)v9;
  if (v9 >= 0x17)
  {
    uint64_t v13 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v13 = v9 | 7;
    }
    uint64_t v14 = v13 + 1;
    int v11 = (void **)operator new(v13 + 1);
    __dst[1] = v10;
    unint64_t v18 = v14 | 0x8000000000000000;
    __dst[0] = v11;
LABEL_13:
    memmove(v11, v8, (size_t)v10);
    *((unsigned char *)v10 + (void)v11) = 0;
    xpc_object_t v12 = *a2;
    int v16 = v12;
    if (v12) {
      goto LABEL_9;
    }
    goto LABEL_14;
  }
  HIBYTE(v18) = v9;
  int v11 = __dst;
  if (v9) {
    goto LABEL_13;
  }
  LOBYTE(__dst[0]) = 0;
  xpc_object_t v12 = *a2;
  int v16 = v12;
  if (v12)
  {
LABEL_9:
    xpc_retain(v12);
    goto LABEL_15;
  }
LABEL_14:
  xpc_object_t v12 = xpc_null_create();
  int v16 = v12;
LABEL_15:
  long long v15 = 0;
  ServiceManager::runCommand(v7, (uint64_t)__dst, &v16, &v15);
  xpc_release(v12);
  int v16 = 0;
  if (SHIBYTE(v18) < 0) {
    operator delete(__dst[0]);
  }
  uint64_t v6 = v20;
  if (v20) {
    goto LABEL_18;
  }
}

void sub_2636FD864(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  xpc_release(v18);
  if (a17 < 0)
  {
    operator delete(__p);
    std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
    _Unwind_Resume(a1);
  }
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  _Unwind_Resume(a1);
}

void *__copy_helper_block_e8_32c45_ZTSNSt3__18weak_ptrIN12PowerManager5StateEEE48c42_ZTSNSt3__110shared_ptrI14ServiceManagerEE(void *result, void *a2)
{
  uint64_t v2 = a2[5];
  result[4] = a2[4];
  result[5] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  uint64_t v3 = a2[7];
  result[6] = a2[6];
  result[7] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c45_ZTSNSt3__18weak_ptrIN12PowerManager5StateEEE48c42_ZTSNSt3__110shared_ptrI14ServiceManagerEE(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 56);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = *(std::__shared_weak_count **)(a1 + 40);
    if (!v3) {
      return;
    }
  }
  else
  {
    uint64_t v3 = *(std::__shared_weak_count **)(a1 + 40);
    if (!v3) {
      return;
    }
  }

  std::__shared_weak_count::__release_weak(v3);
}

uint64_t dispatch::callback<void({block_pointer})(xpc::dict)>::~callback(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 8);
  if (v2) {
    dispatch_release(v2);
  }
  if (*(void *)a1) {
    _Block_release(*(const void **)a1);
  }
  return a1;
}

void ___ZN12PowerManager5State8shutdownEv_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  uint64_t v2 = (std::__shared_weak_count *)v1[10];
  if (!v2 || (uint64_t v3 = v1[9], (v4 = std::__shared_weak_count::lock(v2)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  xpc_object_t v5 = v4;
  uint64_t v6 = operator new(8uLL);
  void *v6 = v1;
  uint64_t v7 = v1[11];
  atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  size_t v8 = operator new(0x18uLL);
  void *v8 = v6;
  v8[1] = v3;
  _OWORD v8[2] = v5;
  dispatch_async_f(v7, v8, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<PowerManager::State>::execute_wrapped<PowerManager::State::releasePendingPowerAssertions(void)::{lambda(void)#1}>(PowerManager::State::releasePendingPowerAssertions(void)::{lambda(void)#1} &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<PowerManager::State::releasePendingPowerAssertions(void)::{lambda(void)#1},dispatch_queue_s *::default_delete<PowerManager::State::releasePendingPowerAssertions(void)::{lambda(void)#1}>>)::{lambda(void *)#1}::__invoke);
  if (atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    size_t v9 = (std::__shared_weak_count *)v1[14];
    v1[13] = 0;
    v1[14] = 0;
    if (!v9) {
      return;
    }
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    size_t v9 = (std::__shared_weak_count *)v1[14];
    v1[13] = 0;
    v1[14] = 0;
    if (!v9) {
      return;
    }
  }
  if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
}

void dispatch::async<void ctu::SharedSynchronizable<PowerManager::State>::execute_wrapped<PowerManager::State::releasePendingPowerAssertions(void)::{lambda(void)#1}>(PowerManager::State::releasePendingPowerAssertions(void)::{lambda(void)#1} &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<PowerManager::State::releasePendingPowerAssertions(void)::{lambda(void)#1},dispatch_queue_s *::default_delete<PowerManager::State::releasePendingPowerAssertions(void)::{lambda(void)#1}>>)::{lambda(void *)#1}::__invoke(void *a1)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  uint64_t v2 = (void *)*a1;
  uint64_t v3 = *(void **)*a1;
  uint64_t v4 = (void *)v3[25];
  xpc_object_t v5 = v3 + 26;
  if (v4 != v3 + 26)
  {
    do
    {
      uint64_t v6 = v3[5];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v7 = v4 + 4;
        if (*((char *)v4 + 55) < 0) {
          uint64_t v7 = (void *)*v7;
        }
        *(_DWORD *)std::string buf = 136315138;
        xpc_object_t v17 = v7;
        _os_log_impl(&dword_26368A000, v6, OS_LOG_TYPE_DEFAULT, "#I Forcefully releasing power assertion '%s'", buf, 0xCu);
      }
      size_t v8 = (void *)v4[1];
      if (v8)
      {
        do
        {
          size_t v9 = v8;
          size_t v8 = (void *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          size_t v9 = (void *)v4[2];
          BOOL v10 = *v9 == (void)v4;
          uint64_t v4 = v9;
        }
        while (!v10);
      }
      uint64_t v4 = v9;
    }
    while (v9 != v5);
  }
  std::__tree<std::__value_type<std::string,std::shared_ptr<support::misc::Watchdog>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<support::misc::Watchdog>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<support::misc::Watchdog>>>>::destroy(v3[26]);
  uint64_t v11 = v3[29];
  v3[25] = v5;
  v3[26] = 0;
  v3[27] = 0;
  std::__tree<std::__value_type<std::string,std::shared_ptr<support::misc::Watchdog>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<support::misc::Watchdog>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<support::misc::Watchdog>>>>::destroy(v11);
  v3[28] = v3 + 29;
  v3[29] = 0;
  v3[30] = 0;
  *(unsigned char *)(v3[17] + 88) = 0;
  uint64_t v12 = v3[20];
  if (v12)
  {
    uint64_t v13 = v3[5];
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl(&dword_26368A000, v13, OS_LOG_TYPE_DEFAULT, "#I No more assertions held, acknowledging previous notification", buf, 2u);
      uint64_t v12 = v3[20];
    }
    (*(void (**)(uint64_t, uint64_t))(v12 + 16))(v12, 1);
    uint64_t v14 = (const void *)v3[20];
    v3[20] = 0;
    if (v14) {
      _Block_release(v14);
    }
  }
  operator delete(v2);
  long long v15 = (std::__shared_weak_count *)a1[2];
  if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }

  operator delete(a1);
}

void sub_2636FDD3C(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<PowerManager *,std::shared_ptr<PowerManager>::__shared_ptr_default_delete<PowerManager,PowerManager>,std::allocator<PowerManager>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t std::__shared_ptr_pointer<PowerManager *,std::shared_ptr<PowerManager>::__shared_ptr_default_delete<PowerManager,PowerManager>,std::allocator<PowerManager>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 48))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<PowerManager *,std::shared_ptr<PowerManager>::__shared_ptr_default_delete<PowerManager,PowerManager>,std::allocator<PowerManager>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x80000002637A75DCLL) {
    return a1 + 24;
  }
  if (((v3 & 0x80000002637A75DCLL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000002637A75DCLL)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000002637A75DCLL & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 24;
  }
  return 0;
}

void *ABMServer::create_default_global@<X0>(void *a1@<X8>)
{
  uint64_t v3 = operator new(0x10uLL);
  *uint64_t v3 = 0xAAAAAAAAAAAAAAAALL;
  v3[1] = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v4 = (ABMServerInternal *)operator new(0x130uLL);
  ABMServerInternal::ABMServerInternal(v4);
  std::shared_ptr<ABMServerInternal>::shared_ptr[abi:ne180100]<ABMServerInternal,std::shared_ptr<ABMServerInternal> ctu::SharedSynchronizable<ctu::XpcServer>::make_shared_ptr<ABMServerInternal>(ABMServerInternal*)::{lambda(ABMServerInternal*)#1},void>(v3, (uint64_t)v4);
  *a1 = v3;
  uint64_t result = operator new(0x20uLL);
  *uint64_t result = &unk_270EA8F20;
  result[1] = 0;
  result[2] = 0;
  result[3] = v3;
  a1[1] = result;
  return result;
}

void sub_2636FDF58(_Unwind_Exception *a1)
{
  uint64_t v3 = (std::__shared_weak_count *)v1[1];
  if (v3)
  {
    if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
      operator delete(v1);
      _Unwind_Resume(a1);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void ABMServer::ABMServer(ABMServer *this)
{
  *(void *)this = 0xAAAAAAAAAAAAAAAALL;
  *((void *)this + 1) = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v2 = (ABMServerInternal *)operator new(0x130uLL);
  ABMServerInternal::ABMServerInternal(v2);

  std::shared_ptr<ABMServerInternal>::shared_ptr[abi:ne180100]<ABMServerInternal,std::shared_ptr<ABMServerInternal> ctu::SharedSynchronizable<ctu::XpcServer>::make_shared_ptr<ABMServerInternal>(ABMServerInternal*)::{lambda(ABMServerInternal*)#1},void>(this, (uint64_t)v2);
}

{
  ABMServerInternal *v2;
  uint64_t vars8;

  *(void *)this = 0xAAAAAAAAAAAAAAAALL;
  *((void *)this + 1) = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v2 = (ABMServerInternal *)operator new(0x130uLL);
  ABMServerInternal::ABMServerInternal(v2);

  std::shared_ptr<ABMServerInternal>::shared_ptr[abi:ne180100]<ABMServerInternal,std::shared_ptr<ABMServerInternal> ctu::SharedSynchronizable<ctu::XpcServer>::make_shared_ptr<ABMServerInternal>(ABMServerInternal*)::{lambda(ABMServerInternal*)#1},void>(this, (uint64_t)v2);
}

void sub_2636FE034(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_2636FE098(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *ABMServerInternal::create@<X0>(void *a1@<X8>)
{
  *a1 = 0xAAAAAAAAAAAAAAAALL;
  a1[1] = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v3 = (ABMServerInternal *)operator new(0x130uLL);
  ABMServerInternal::ABMServerInternal(v3);

  return std::shared_ptr<ABMServerInternal>::shared_ptr[abi:ne180100]<ABMServerInternal,std::shared_ptr<ABMServerInternal> ctu::SharedSynchronizable<ctu::XpcServer>::make_shared_ptr<ABMServerInternal>(ABMServerInternal*)::{lambda(ABMServerInternal*)#1},void>(a1, (uint64_t)v3);
}

void sub_2636FE0FC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void ABMServer::init(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *a1;
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string __p = *(std::string *)a2;
  }
  ABMServerInternal::init(v4, (uint64_t)&__p, a3);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_2636FE198(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ABMServerInternal::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1 + 8;
  v6[0] = MEMORY[0x263EF8330];
  v6[1] = 1174405120;
  v6[2] = ___ZN17ABMServerInternal4initENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEERKN3abm9OverridesE_block_invoke;
  v6[3] = &__block_descriptor_tmp_6_2;
  void v6[4] = a1;
  v6[5] = a3;
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string __p = *(std::string *)a2;
  }
  size_t v8 = v6;
  block[0] = MEMORY[0x263EF8330];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableINS_9XpcServerEE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  block[3] = &__block_descriptor_tmp_63;
  block[4] = v4;
  void block[5] = &v8;
  xpc_object_t v5 = *(NSObject **)(a1 + 24);
  if (*(void *)(a1 + 32))
  {
    dispatch_async_and_wait(v5, block);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
LABEL_8:
    operator delete(__p.__r_.__value_.__l.__data_);
    return;
  }
  dispatch_sync(v5, block);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_8;
  }
}

BOOL ABMServer::start(ABMServerInternal **this, NSObject *a2)
{
  return ABMServerInternal::start(*this, a2);
}

BOOL ABMServerInternal::start(ABMServerInternal *this, NSObject *a2)
{
  uint64_t v4 = *((void *)this + 14);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl(&dword_26368A000, v4, OS_LOG_TYPE_DEFAULT, "#I Request to start server", buf, 2u);
  }
  if (a2)
  {
    dispatch_retain(a2);
    dispatch_retain(a2);
    dispatch_group_enter(a2);
    dispatch_release(a2);
  }
  uint64_t v11 = 0;
  uint64_t v12 = &v11;
  uint64_t v13 = 0x2000000000;
  char v14 = 0;
  v9[0] = MEMORY[0x263EF8330];
  v9[1] = 1174405120;
  uint64_t v9[2] = ___ZN17ABMServerInternal5startEP16dispatch_group_s_block_invoke;
  v9[3] = &unk_270EA8BB0;
  void v9[5] = this;
  dispatch_group_t group = a2;
  if (a2)
  {
    dispatch_retain(a2);
    dispatch_group_enter(group);
  }
  v9[4] = &v11;
  long long v15 = v9;
  *(void *)std::string buf = MEMORY[0x263EF8330];
  uint64_t v17 = 0x40000000;
  uint64_t v18 = ___ZNK3ctu20SharedSynchronizableINS_9XpcServerEE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  uint64_t v19 = &__block_descriptor_tmp_63;
  size_t v20 = (char *)this + 8;
  uint64_t v21 = &v15;
  xpc_object_t v5 = *((void *)this + 3);
  if (*((void *)this + 4))
  {
    dispatch_async_and_wait(v5, buf);
    int v6 = *((unsigned __int8 *)v12 + 24);
    uint64_t v7 = group;
    if (!group) {
      goto LABEL_13;
    }
  }
  else
  {
    dispatch_sync(v5, buf);
    int v6 = *((unsigned __int8 *)v12 + 24);
    uint64_t v7 = group;
    if (!group) {
      goto LABEL_13;
    }
  }
  dispatch_group_leave(v7);
  if (group) {
    dispatch_release(group);
  }
LABEL_13:
  _Block_object_dispose(&v11, 8);
  if (a2)
  {
    dispatch_group_leave(a2);
    dispatch_release(a2);
  }
  return v6 != 0;
}

BOOL ABMServer::stop(ABMServerInternal **this, NSObject *a2)
{
  return ABMServerInternal::stop(*this, a2);
}

BOOL ABMServerInternal::stop(ABMServerInternal *this, NSObject *a2)
{
  uint64_t v4 = *((void *)this + 14);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl(&dword_26368A000, v4, OS_LOG_TYPE_DEFAULT, "#I Request to stop server", buf, 2u);
  }
  if (a2)
  {
    dispatch_retain(a2);
    dispatch_retain(a2);
    dispatch_group_enter(a2);
    dispatch_release(a2);
  }
  uint64_t v11 = 0;
  uint64_t v12 = &v11;
  uint64_t v13 = 0x2000000000;
  char v14 = 0;
  v9[0] = MEMORY[0x263EF8330];
  v9[1] = 1174405120;
  uint64_t v9[2] = ___ZN17ABMServerInternal4stopEP16dispatch_group_s_block_invoke;
  v9[3] = &unk_270EA8BE8;
  void v9[5] = this;
  dispatch_group_t group = a2;
  if (a2)
  {
    dispatch_retain(a2);
    dispatch_group_enter(group);
  }
  v9[4] = &v11;
  long long v15 = v9;
  *(void *)std::string buf = MEMORY[0x263EF8330];
  uint64_t v17 = 0x40000000;
  uint64_t v18 = ___ZNK3ctu20SharedSynchronizableINS_9XpcServerEE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  uint64_t v19 = &__block_descriptor_tmp_63;
  size_t v20 = (char *)this + 8;
  uint64_t v21 = &v15;
  xpc_object_t v5 = *((void *)this + 3);
  if (*((void *)this + 4))
  {
    dispatch_async_and_wait(v5, buf);
    int v6 = *((unsigned __int8 *)v12 + 24);
    uint64_t v7 = group;
    if (!group) {
      goto LABEL_13;
    }
  }
  else
  {
    dispatch_sync(v5, buf);
    int v6 = *((unsigned __int8 *)v12 + 24);
    uint64_t v7 = group;
    if (!group) {
      goto LABEL_13;
    }
  }
  dispatch_group_leave(v7);
  if (group) {
    dispatch_release(group);
  }
LABEL_13:
  _Block_object_dispose(&v11, 8);
  if (a2)
  {
    dispatch_group_leave(a2);
    dispatch_release(a2);
  }
  return v6 != 0;
}

BOOL ABMServer::shutdown(ABMServerInternal **this, NSObject *a2)
{
  return ABMServerInternal::shutdown(*this, a2);
}

BOOL ABMServerInternal::shutdown(ABMServerInternal *this, NSObject *a2)
{
  uint64_t v4 = *((void *)this + 14);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl(&dword_26368A000, v4, OS_LOG_TYPE_DEFAULT, "#I Request to shutdown server", buf, 2u);
  }
  if (a2)
  {
    dispatch_retain(a2);
    dispatch_retain(a2);
    dispatch_group_enter(a2);
    dispatch_release(a2);
LABEL_5:
    xpc_object_t v5 = 0;
    goto LABEL_8;
  }
  int v6 = (dispatch_group_s *)dispatch_group_create();
  a2 = v6;
  if (!v6) {
    goto LABEL_5;
  }
  dispatch_retain((dispatch_object_t)v6);
  dispatch_group_enter(a2);
  xpc_object_t v5 = a2;
LABEL_8:
  uint64_t v13 = 0;
  char v14 = &v13;
  uint64_t v15 = 0x2000000000;
  char v16 = 0;
  v11[0] = MEMORY[0x263EF8330];
  v11[1] = 1174405120;
  v11[2] = ___ZN17ABMServerInternal8shutdownEP16dispatch_group_s_block_invoke;
  v11[3] = &unk_270EA8C20;
  v11[4] = &v13;
  void v11[5] = this;
  dispatch_group_t group = a2;
  if (a2)
  {
    dispatch_retain(a2);
    dispatch_group_enter(group);
  }
  uint64_t v17 = v11;
  *(void *)std::string buf = MEMORY[0x263EF8330];
  uint64_t v19 = 0x40000000;
  size_t v20 = ___ZNK3ctu20SharedSynchronizableINS_9XpcServerEE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  uint64_t v21 = &__block_descriptor_tmp_63;
  size_t v22 = (char *)this + 8;
  uint64_t v23 = &v17;
  uint64_t v7 = *((void *)this + 3);
  if (*((void *)this + 4))
  {
    dispatch_async_and_wait(v7, buf);
    int v8 = *((unsigned __int8 *)v14 + 24);
    size_t v9 = group;
    if (!group) {
      goto LABEL_16;
    }
  }
  else
  {
    dispatch_sync(v7, buf);
    int v8 = *((unsigned __int8 *)v14 + 24);
    size_t v9 = group;
    if (!group) {
      goto LABEL_16;
    }
  }
  dispatch_group_leave(v9);
  if (group) {
    dispatch_release(group);
  }
LABEL_16:
  _Block_object_dispose(&v13, 8);
  if (v5) {
    dispatch_release(v5);
  }
  if (a2)
  {
    dispatch_group_leave(a2);
    dispatch_release(a2);
  }
  return v8 != 0;
}

void ABMServer::broadcast(uint64_t *a1, uint64_t a2, const void **a3, const void **a4)
{
  uint64_t v6 = *a1;
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v11, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    uint64_t v7 = *a3;
    BOOL v10 = v7;
    if (!v7) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  std::string v11 = *(std::string *)a2;
  uint64_t v7 = *a3;
  BOOL v10 = v7;
  if (v7) {
LABEL_5:
  }
    CFRetain(v7);
LABEL_6:
  if (*a4) {
    int v8 = _Block_copy(*a4);
  }
  else {
    int v8 = 0;
  }
  size_t v9 = v8;
  ABMServerInternal::broadcast(v6, (uint64_t)&v11, &v10, &v9);
  if (v8) {
    _Block_release(v8);
  }
  if (v7) {
    CFRelease(v7);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
}

void sub_2636FE9B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (v16) {
    _Block_release(v16);
  }
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&a10);
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void ABMServerInternal::broadcast(uint64_t a1, uint64_t a2, const void **a3, void **a4)
{
  v9[0] = MEMORY[0x263EF8330];
  v9[1] = 1174405120;
  uint64_t v9[2] = ___ZN17ABMServerInternal9broadcastENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch5blockIU13block_pointerFvvEEE_block_invoke;
  v9[3] = &__block_descriptor_tmp_29_1;
  v9[4] = a1;
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    uint64_t v7 = *a3;
    CFTypeRef cf = v7;
    if (!v7) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  std::string __p = *(std::string *)a2;
  uint64_t v7 = *a3;
  CFTypeRef cf = v7;
  if (v7) {
LABEL_5:
  }
    CFRetain(v7);
LABEL_6:
  int v8 = *a4;
  if (*a4) {
    int v8 = _Block_copy(v8);
  }
  aBlocunint64_t k = v8;
  ctu::SharedSynchronizable<ctu::XpcServer>::execute_wrapped((uint64_t *)(a1 + 8), (uint64_t)v9);
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void ABMServerInternal::ABMServerInternal(ABMServerInternal *this)
{
  *(void *)this = &unk_270EA8B08;
  *((void *)this + 9) = &unk_270EA8B48;
  char v16 = 11;
  strcpy((char *)__p, "server.main");
  xpc_object_t v14 = xpc_null_create();
  object[0] = 0;
  ctu::XpcServer::XpcServer();
  xpc_release(v14);
  xpc_object_t v14 = 0;
  *(void *)this = &unk_270EA8B08;
  *((void *)this + 9) = &unk_270EA8B48;
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v13, "com.apple.telephony.abm", "server.main");
  GetABMLogServer(&v11);
  *((void *)this + 9) = &unk_270EA8EE0;
  ctu::OsLogContext::OsLogContext();
  ctu::OsLogContext::OsLogContext();
  ctu::LoggerCommonBase::LoggerCommonBase();
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)__p);
  *((void *)this + 10) = &unk_270EA5428;
  uint64_t v2 = v12;
  *((void *)this + 16) = v11;
  *((void *)this + 17) = v2;
  if (v2) {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)object);
  uint64_t v3 = v12;
  if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v13);
  *(void *)this = &unk_270EA8B08;
  *((void *)this + 9) = &unk_270EA8B48;
  *((void *)this + 19) = 0;
  *((void *)this + 20) = 0;
  *((void *)this + 21) = 0;
  *((void *)this + 18) = (char *)this + 152;
  *((void *)this + 22) = 0;
  *((void *)this + 23) = 0;
  *((_DWORD *)this + 48) = 3;
  *((void *)this + 25) = 0;
  *((void *)this + 26) = 0;
  *((void *)this + 27) = 0;
  uint64_t v4 = (std::__shared_weak_count *)operator new(0x38uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = &v4->__shared_owners_;
  v4->__shared_weak_owners_ = 0;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&unk_270EA8FC0;
  Registry::Registry((Registry *)&v4[1]);
  *((void *)this + 28) = v6;
  *((void *)this + 29) = v4;
  shared_owners = (std::__shared_weak_count *)v4[1].__shared_owners_;
  if (!shared_owners)
  {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v4[1].__vftable = (std::__shared_weak_count_vtbl *)&v4[1];
    v4[1].__shared_owners_ = (uint64_t)v4;
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }
  if (shared_owners->__shared_owners_ == -1)
  {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v4[1].__vftable = (std::__shared_weak_count_vtbl *)&v4[1];
    v4[1].__shared_owners_ = (uint64_t)v4;
    std::__shared_weak_count::__release_weak(shared_owners);
    if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL))
    {
LABEL_11:
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
LABEL_12:
  _ZNSt3__115allocate_sharedB8ne180100I16ABMServerFactoryNS_9allocatorIS1_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_((uint64_t *)__p);
  size_t v9 = __p[0];
  int v8 = (std::__shared_weak_count *)__p[1];
  *((void **)this + 30) = __p[0];
  *((void *)this + 31) = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  BOOL v10 = operator new(0x28uLL);
  v10[1] = 0;
  v10[2] = 0;
  void *v10 = &unk_270EA9D40;
  if (v8)
  {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    v10[3] = v9;
    v10[4] = v8;
    *((void *)this + 32) = v10 + 3;
    *((void *)this + 33) = v10;
    if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  else
  {
    v10[3] = v9;
    v10[4] = 0;
    *((void *)this + 32) = v10 + 3;
    *((void *)this + 33) = v10;
  }
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 18) = 0u;
  ctu::LoggerCommonBase::setLogLevel();
}

void sub_2636FEF14(_Unwind_Exception *a1)
{
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)(v1 + 288));
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100](v5);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100](v4);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)(v1 + 240));
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)(v1 + 224));
  if (*v9)
  {
    dispatch_group_leave(*v9);
    if (*v9) {
      dispatch_release(*v9);
    }
  }
  if (v1[191] < 0) {
    operator delete(*v8);
  }
  std::__tree<std::__value_type<xpc::connection,ServerClientState>,std::__map_value_compare<xpc::connection,std::__value_type<xpc::connection,ServerClientState>,std::less<xpc::connection>,true>,std::allocator<std::__value_type<xpc::connection,ServerClientState>>>::destroy(*v7);
  void *v6 = v2;
  MEMORY[0x263E68AF0](v3);
  ctu::XpcServer::~XpcServer((ctu::XpcServer *)v1);
  _Unwind_Resume(a1);
}

void sub_2636FEFFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, xpc_object_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,dispatch_object_t object)
{
  if (object) {
    dispatch_release(object);
  }
  xpc_release(a15);
  if (a21 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x2636FEFF0);
}

const char *ABMServerInternal::getName(ABMServerInternal *this)
{
  return "server.main";
}

void xpc::connection::~connection(xpc_object_t *this)
{
  *this = 0;
}

void ABMServerInternal::~ABMServerInternal(ABMServerInternal *this)
{
  *(void *)this = &unk_270EA8B08;
  *((void *)this + 9) = &unk_270EA8B48;
  ABMServerInternal::finishShutdown_sync(this);
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 37);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 35);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 33);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 31);
  if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 29);
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  uint64_t v7 = *((void *)this + 25);
  if (v7)
  {
    dispatch_group_leave(v7);
    int v8 = *((void *)this + 25);
    if (v8) {
      dispatch_release(v8);
    }
  }
  if (*((char *)this + 191) < 0) {
    operator delete(*((void **)this + 21));
  }
  std::__tree<std::__value_type<xpc::connection,ServerClientState>,std::__map_value_compare<xpc::connection,std::__value_type<xpc::connection,ServerClientState>,std::less<xpc::connection>,true>,std::allocator<std::__value_type<xpc::connection,ServerClientState>>>::destroy(*((void **)this + 19));
  *((void *)this + 9) = &unk_270EA8EE0;
  MEMORY[0x263E68AF0]((char *)this + 80);

  ctu::XpcServer::~XpcServer(this);
}

{
  void *v1;
  uint64_t vars8;

  ABMServerInternal::~ABMServerInternal(this);

  operator delete(v1);
}

void ABMServerInternal::finishShutdown_sync(ABMServerInternal *this)
{
  uint64_t v2 = (void *)((char *)this + 152);
  std::__tree<std::__value_type<xpc::connection,ServerClientState>,std::__map_value_compare<xpc::connection,std::__value_type<xpc::connection,ServerClientState>,std::less<xpc::connection>,true>,std::allocator<std::__value_type<xpc::connection,ServerClientState>>>::destroy(*((void **)this + 19));
  *((void *)this + 18) = v2;
  *((void *)this + 20) = 0;
  void *v2 = 0;
  dispatch_group_t group = (dispatch_group_t)0xAAAAAAAAAAAAAAAALL;
  ServiceManager::shutdownGlobalServices(*((ServiceManager **)this + 36), &group);
  dispatch_group_wait(group, 0xFFFFFFFFFFFFFFFFLL);
  Listener_synCC_SHA256_CTX c = (xpc_connection_t *)ctu::XpcServer::getListener_sync(this);
  xpc_connection_cancel(*Listener_sync);
  xpc_object_t object = xpc_null_create();
  ctu::XpcServer::setListener_sync();
  xpc_release(object);
  xpc_object_t object = 0;
  ABMServerInternal::changeState_sync(this, 5);
  (*(void (**)(void, uint64_t))(**((void **)this + 34) + 88))(*((void *)this + 34), 5);
  uint64_t v4 = *((void *)this + 14);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl(&dword_26368A000, v4, OS_LOG_TYPE_DEFAULT, "#I --------- ABM shutdown completed ---------", v5, 2u);
  }
  ABMServerInternal::stopRunLoop_sync(this);
  if (group) {
    dispatch_release(group);
  }
}

void sub_2636FF3D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, xpc_object_t object, dispatch_object_t a12)
{
  if (a12) {
    dispatch_release(a12);
  }
  _Unwind_Resume(a1);
}

void non-virtual thunk to'ABMServerInternal::~ABMServerInternal(ABMServerInternal *this)
{
}

{
  void *v1;
  uint64_t vars8;

  ABMServerInternal::~ABMServerInternal((ABMServerInternal *)((char *)this - 72));

  operator delete(v1);
}

void ___ZN17ABMServerInternal4initENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEERKN3abm9OverridesE_block_invoke(uint64_t a1)
{
  void (***v18)(uint8_t *__return_ptr);
  std::__shared_weak_count *v19;
  long long v20;
  std::__shared_weak_count *v21;
  std::__shared_weak_count *v22;
  uint64_t v23;
  void *v24;
  const void *v25;
  void *v26;
  const void *v27;
  char v28;
  char v29;
  NSObject *v30;
  BOOL v31;
  int v32;
  uint64_t v33;
  void (**v34)(void);
  __int16 v35[6];
  int v36;
  void aBlock[6];
  std::__shared_weak_count *v38;
  xpc_object_t object;
  uint64_t v40;
  std::__shared_weak_count *v41;
  dispatch_group_t buf[3];
  uint64_t v43;

  size_t v43 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(NSObject **)(v2 + 112);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf[0]) = 0;
    _os_log_impl(&dword_26368A000, v3, OS_LOG_TYPE_DEFAULT, "#I Request to init server", (uint8_t *)buf, 2u);
  }
  uint64_t v4 = *(void *)(v2 + 256);
  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v7 = *(void *)(v5 + 16);
  uint64_t v6 = *(std::__shared_weak_count **)(v5 + 24);
  int v40 = v7;
  int v41 = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  ABMServerRegistryBuilder::setupQMIServer(v4, (Registry **)(v2 + 224), &v40);
  size_t v9 = v41;
  if (v41 && !atomic_fetch_add(&v41->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  capabilities::radio::vendor(v8);
  ABMServerInternal::startRunLoop_sync((ABMServerInternal *)v2);
  xpc_object_t object = xpc_connection_create_mach_service(kABMDefaultServiceName[0], 0, 1uLL);
  if (!object) {
    xpc_object_t object = xpc_null_create();
  }
  ctu::XpcServer::setListener_sync();
  xpc_release(object);
  xpc_object_t object = 0;
  ctu::XpcServer::startListener_sync((ctu::XpcServer *)v2);
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterPostNotification(DarwinNotifyCenter, @"kAppleBasebandManagerDaemonReady", 0, 0, 1u);
  uint64_t v11 = (a1 + 48);
  uint64_t v12 = (void **)(v2 + 168);
  if (v2 + 168 != a1 + 48)
  {
    char v13 = *(unsigned char *)(a1 + 71);
    if (*(char *)(v2 + 191) < 0)
    {
      if (v13 >= 0) {
        uint64_t v15 = (void *)(a1 + 48);
      }
      else {
        uint64_t v15 = *(void **)(a1 + 48);
      }
      if (v13 >= 0) {
        size_t v16 = *(unsigned __int8 *)(a1 + 71);
      }
      else {
        size_t v16 = *(void *)(a1 + 56);
      }
      std::string::__assign_no_alias<false>(v12, v15, v16);
    }
    else if ((*(unsigned char *)(a1 + 71) & 0x80) != 0)
    {
      std::string::__assign_no_alias<true>(v12, *(void **)(a1 + 48), *(void *)(a1 + 56));
    }
    else
    {
      long long v14 = *(_OWORD *)&v11->isa;
      *(void *)(v2 + 184) = *(void *)(a1 + 64);
      *(_OWORD *)uint64_t v12 = v14;
    }
  }
  uint64_t v17 = *(NSObject **)(v2 + 112);
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
  {
    if (*(char *)(a1 + 71) < 0) {
      uint64_t v11 = v11->isa;
    }
    LODWORD(buf[0]) = 136315138;
    *(dispatch_group_t *)((char *)buf + 4) = v11;
    _os_log_impl(&dword_26368A000, v17, OS_LOG_TYPE_DEFAULT, "#I host: %s", (uint8_t *)buf, 0xCu);
  }
  ABMServerInternal::changeState_sync(v2, 3u);
  uint64_t v19 = *(std::__shared_weak_count **)(v2 + 232);
  uint64_t v18 = *(void (****)(uint8_t *__return_ptr))(v2 + 240);
  void aBlock[5] = *(void *)(v2 + 224);
  size_t v38 = v19;
  if (v19) {
    atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (**v18)((uint8_t *)buf);
  size_t v20 = *(_OWORD *)buf;
  memset(buf, 0, 16);
  uint64_t v21 = *(std::__shared_weak_count **)(v2 + 296);
  *(_OWORD *)(v2 + 288) = v20;
  if (v21 && !atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v21);
  }
  size_t v22 = (std::__shared_weak_count *)buf[1];
  if (buf[1] && !atomic_fetch_add((atomic_ullong *volatile)&buf[1][1], 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
  }
  if (v38 && !atomic_fetch_add(&v38->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
    std::__shared_weak_count::__release_weak(v38);
  }
  uint64_t v23 = *(void *)(v2 + 288);
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZN17ABMServerInternal4initENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEERKN3abm9OverridesE_block_invoke_3;
  aBlock[3] = &__block_descriptor_tmp_6;
  void aBlock[4] = v2;
  uint64_t v24 = _Block_copy(aBlock);
  uint64_t v25 = v24;
  if (!v24)
  {
    BOOL v27 = *(const void **)(v23 + 184);
    *(void *)(v23 + 184) = 0;
    if (!v27) {
      goto LABEL_42;
    }
    goto LABEL_41;
  }
  uint64_t v26 = _Block_copy(v24);
  BOOL v27 = *(const void **)(v23 + 184);
  *(void *)(v23 + 184) = v26;
  if (v27) {
LABEL_41:
  }
    _Block_release(v27);
LABEL_42:
  if (v25) {
    _Block_release(v25);
  }
  (*(void (**)(void))(**(void **)(v2 + 288) + 64))(*(void *)(v2 + 288));
  buf[0] = (dispatch_group_t)0xAAAAAAAAAAAAAAAALL;
  ServiceManager::initializeGlobalServices(*(ServiceManager **)(v2 + 288), buf);
  dispatch_group_wait(buf[0], 0xFFFFFFFFFFFFFFFFLL);
  int v36 = 6;
  size_t v28 = (*(uint64_t (**)(void, int *))(**(void **)(v2 + 272) + 96))(*(void *)(v2 + 272), &v36);
  if (v36 == 3) {
    xpc_object_t v29 = v28;
  }
  else {
    xpc_object_t v29 = 0;
  }
  if ((v29 & 1) == 0)
  {
    xpc_object_t v30 = *(NSObject **)(v2 + 112);
    uint64_t v31 = os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT);
    if (v31)
    {
      v35[0] = 0;
      _os_log_impl(&dword_26368A000, v30, OS_LOG_TYPE_DEFAULT, "#I Previous shutdown was not clean", (uint8_t *)v35, 2u);
    }
    uint64_t v32 = capabilities::radio::ice((capabilities::radio *)v31);
    size_t v33 = **(void **)(v2 + 272);
    if (v32) {
      xpc_object_t v34 = (void (**)(void))(v33 + 80);
    }
    else {
      xpc_object_t v34 = (void (**)(void))(v33 + 72);
    }
    (*v34)();
    (*(void (**)(void, uint64_t))(**(void **)(v2 + 272) + 88))(*(void *)(v2 + 272), 3);
  }
  if (buf[0]) {
    dispatch_release(buf[0]);
  }
}

void sub_2636FF9BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, xpc_object_t object, char a19)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void ABMServerInternal::startRunLoop_sync(ABMServerInternal *this)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  uint64_t v2 = *((void *)this + 14);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf.__sig) = 0;
    _os_log_impl(&dword_26368A000, v2, OS_LOG_TYPE_DEFAULT, "#I Starting ABM RunLoop", (uint8_t *)&buf, 2u);
  }
  uint64_t v3 = dispatch_group_create();
  dispatch_group_enter(v3);
  v5[0] = MEMORY[0x263EF8330];
  v5[1] = 1174405120;
  v5[2] = ___ZN17ABMServerInternal17startRunLoop_syncEv_block_invoke;
  v5[3] = &__block_descriptor_tmp_15;
  v5[4] = this;
  dispatch_object_t object = v3;
  if (v3) {
    dispatch_retain(v3);
  }
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&buf.__opaque[24] = v4;
  *(_OWORD *)&buf.__opaque[40] = v4;
  *(_OWORD *)&buf.__sig = v4;
  *(_OWORD *)&buf.__opaque[8] = v4;
  pthread_attr_init(&buf);
  pthread_attr_set_qos_class_np(&buf, QOS_CLASS_USER_INITIATED, 0);
  pthread_create((pthread_t *)this + 27, &buf, (void *(__cdecl *)(void *))sServerRunLoopMain, v5);
  dispatch_group_wait(v3, 0xFFFFFFFFFFFFFFFFLL);
  if (object) {
    dispatch_release(object);
  }
  if (v3) {
    dispatch_release(v3);
  }
}

void sub_2636FFB98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, dispatch_object_t object)
{
  if (object)
  {
    dispatch_release(object);
    if (!v14) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if (!v14)
  {
    goto LABEL_3;
  }
  dispatch_release(v14);
  _Unwind_Resume(exception_object);
}

void ABMServerInternal::changeState_sync(uint64_t a1, unsigned int a2)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  long long v4 = *(NSObject **)(a1 + 112);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = to_string(*(_DWORD *)(a1 + 192));
    *(_DWORD *)pthread_attr_t buf = 136315394;
    size_t v9 = v5;
    __int16 v10 = 2080;
    uint64_t v11 = to_string(a2);
    _os_log_impl(&dword_26368A000, v4, OS_LOG_TYPE_DEFAULT, "#I State change: %s -> %s", buf, 0x16u);
  }
  *(_DWORD *)(a1 + 192) = a2;
  uint64_t v6 = *(NSObject **)(a1 + 200);
  if (v6)
  {
    dispatch_object_t v7 = *(dispatch_object_t *)(a1 + 200);
    dispatch_retain(v6);
    dispatch_group_enter(v6);
    ABMServerInternal::checkShutdown_sync((ABMServerInternal *)a1, &v7);
    dispatch_group_leave(v6);
    dispatch_release(v6);
  }
}

void sub_2636FFCCC(_Unwind_Exception *a1)
{
  dispatch_group_leave(v1);
  dispatch_release(v1);
  _Unwind_Resume(a1);
}

void ___ZN17ABMServerInternal4initENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEERKN3abm9OverridesE_block_invoke_3(uint64_t a1, uint64_t a2, void **a3, void **a4)
{
  uint64_t v6 = *(void **)(a1 + 32);
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    dispatch_object_t v7 = *a3;
    aBlock[0] = v7;
    if (!v7) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  std::string __p = *(std::string *)a2;
  dispatch_object_t v7 = *a3;
  aBlock[0] = v7;
  if (v7) {
LABEL_5:
  }
    CFRetain(v7);
LABEL_6:
  uint64_t v8 = *a4;
  if (*a4) {
    uint64_t v8 = _Block_copy(v8);
  }
  aBlock[1] = v8;
  size_t v9 = (std::__shared_weak_count *)v6[2];
  if (!v9 || (uint64_t v10 = v6[1], (v11 = std::__shared_weak_count::lock(v9)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v12 = v11;
  char v13 = (char *)operator new(0x30uLL);
  *(void *)char v13 = v6;
  long long v14 = (std::string *)(v13 + 8);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v14, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v14->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *((void *)v13 + 3) = *((void *)&__p.__r_.__value_.__l + 2);
  }
  *((_OWORD *)v13 + 2) = *(_OWORD *)aBlock;
  aBlock[0] = 0;
  aBlock[1] = 0;
  uint64_t v15 = v6[3];
  atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  size_t v16 = operator new(0x18uLL);
  void *v16 = v13;
  v16[1] = v10;
  void v16[2] = v12;
  dispatch_async_f(v15, v16, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableINS1_9XpcServerEE15execute_wrappedIZZZN17ABMServerInternal4initENSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEERKN3abm9OverridesEEUb_EUb0_E3__0EEvOT_EUlvE_EEvP16dispatch_queue_sNS7_10unique_ptrISJ_NS7_14default_deleteISJ_EEEEENUlPvE_8__invokeESS_);
  if (!atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
    uint64_t v17 = aBlock[1];
    if (!aBlock[1]) {
      goto LABEL_18;
    }
    goto LABEL_17;
  }
  uint64_t v17 = aBlock[1];
  if (aBlock[1]) {
LABEL_17:
  }
    _Block_release(v17);
LABEL_18:
  if (aBlock[0]) {
    CFRelease(aBlock[0]);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void __copy_helper_block_e8_48c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(std::string *a1, uint64_t a2)
{
  uint64_t v2 = a1 + 2;
  if (*(char *)(a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a2 + 48), *(void *)(a2 + 56));
  }
  else
  {
    long long v3 = *(_OWORD *)(a2 + 48);
    v2->__r_.__value_.__r.__words[2] = *(void *)(a2 + 64);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void __destroy_helper_block_e8_48c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1)
{
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
}

void ___ZN17ABMServerInternal5startEP16dispatch_group_s_block_invoke(void *a1)
{
  uint64_t v1 = a1[5];
  unsigned int v2 = *(_DWORD *)(v1 + 192);
  if (v2 > 5) {
    return;
  }
  if (((1 << v2) & 0x35) != 0)
  {
    *(unsigned char *)(*(void *)(a1[4] + 8) + 24) = 0;
    return;
  }
  if (v2 == 1)
  {
    *(unsigned char *)(*(void *)(a1[4] + 8) + 24) = 1;
    return;
  }
  ABMServerInternal::changeState_sync(a1[5], 0);
  long long v4 = (const void *)*MEMORY[0x263F260F8];
  size_t v5 = strlen((const char *)*MEMORY[0x263F260F8]);
  if (v5 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v6 = (void *)v5;
  if (v5 >= 0x17)
  {
    uint64_t v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17) {
      uint64_t v8 = v5 | 7;
    }
    uint64_t v9 = v8 + 1;
    dispatch_object_t v7 = (void **)operator new(v8 + 1);
    __dst[1] = v6;
    unint64_t v13 = v9 | 0x8000000000000000;
    __dst[0] = v7;
  }
  else
  {
    HIBYTE(v13) = v5;
    dispatch_object_t v7 = __dst;
    if (!v5) {
      goto LABEL_15;
    }
  }
  memmove(v7, v4, (size_t)v6);
LABEL_15:
  *((unsigned char *)v6 + (void)v7) = 0;
  ABMServerInternal::broadcastServerState_sync((void *)v1, (uint64_t)__dst);
  if (SHIBYTE(v13) < 0) {
    operator delete(__dst[0]);
  }
  *(unsigned char *)(*(void *)(a1[4] + 8) + 24) = 1;
  uint64_t v10 = a1[6];
  uint64_t v11 = v10;
  if (v10)
  {
    dispatch_retain(v10);
    dispatch_group_enter(v10);
  }
  ABMServerInternal::start_sync(v1, &v11);
  if (v10)
  {
    dispatch_group_leave(v10);
    dispatch_release(v10);
  }
}

void sub_2637000C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (v15)
  {
    dispatch_group_leave(v15);
    dispatch_release(v15);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ABMServerInternal::getState_sync(ABMServerInternal *this)
{
  return *((unsigned int *)this + 48);
}

void ABMServerInternal::broadcastServerState_sync(void *a1, uint64_t a2)
{
  CFTypeRef cf = 0;
  uint64_t v4 = *MEMORY[0x263EFFB08];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  dispatch_object_t v7 = Mutable;
  if (Mutable) {
    CFTypeRef cf = Mutable;
  }
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v22, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v22 = *(std::string *)a2;
  }
  ctu::cf::insert<char const*,std::string>(v7, (const __CFString **)*MEMORY[0x263F25EC8], (uint64_t)&v22, v4, v6);
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v22.__r_.__value_.__l.__data_);
  }
  uint64_t v8 = (const void *)*MEMORY[0x263F26260];
  size_t v9 = strlen((const char *)*MEMORY[0x263F26260]);
  if (v9 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v10 = (void *)v9;
  if (v9 >= 0x17)
  {
    uint64_t v13 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v13 = v9 | 7;
    }
    uint64_t v14 = v13 + 1;
    uint64_t v11 = (void **)operator new(v13 + 1);
    __dst[1] = v10;
    unint64_t v20 = v14 | 0x8000000000000000;
    __dst[0] = v11;
LABEL_16:
    memmove(v11, v8, (size_t)v10);
    *((unsigned char *)v10 + (void)v11) = 0;
    CFTypeRef v12 = cf;
    if (!cf) {
      goto LABEL_19;
    }
    goto LABEL_17;
  }
  HIBYTE(v20) = v9;
  uint64_t v11 = __dst;
  if (v9) {
    goto LABEL_16;
  }
  LOBYTE(__dst[0]) = 0;
  CFTypeRef v12 = cf;
  if (!cf) {
    goto LABEL_19;
  }
LABEL_17:
  CFTypeID v15 = CFGetTypeID(v12);
  if (v15 == CFDictionaryGetTypeID())
  {
    uint64_t v18 = (ctu *)v12;
    CFRetain(v12);
    size_t v16 = v12;
    goto LABEL_20;
  }
LABEL_19:
  size_t v16 = 0;
  uint64_t v18 = 0;
LABEL_20:
  uint64_t v17 = 0;
  ABMServerInternal::broadcast_sync(a1, (uint64_t)__dst, &v18, &v17);
  if (v16) {
    CFRelease(v16);
  }
  if (SHIBYTE(v20) < 0)
  {
    operator delete(__dst[0]);
    if (!v12) {
      return;
    }
  }
  else if (!v12)
  {
    return;
  }
  CFRelease(v12);
}

void sub_2637002FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, const void *a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a16 < 0)
  {
    operator delete(__p);
    ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(&a17);
    _Unwind_Resume(a1);
  }
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(&a17);
  _Unwind_Resume(a1);
}

void ABMServerInternal::start_sync(uint64_t a1, NSObject **a2)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  uint64_t v4 = *(NSObject **)(a1 + 112);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    abm::asString();
    size_t v5 = v18 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)pthread_attr_t buf = 136315138;
    unint64_t v20 = v5;
    _os_log_impl(&dword_26368A000, v4, OS_LOG_TYPE_DEFAULT, "#I Starting ABM with profile: %s", buf, 0xCu);
    if (v18 < 0) {
      operator delete(__p[0]);
    }
  }
  (*(void (**)(void, void))(**(void **)(a1 + 272) + 88))(*(void *)(a1 + 272), 0);
  (*(void (**)(void))(**(void **)(a1 + 288) + 72))(*(void *)(a1 + 288));
  __p[0] = (void *)0xAAAAAAAAAAAAAAAALL;
  ServiceManager::initializeDynamicServices(*(ServiceManager **)(a1 + 288), (NSObject **)__p);
  CFAllocatorRef v6 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v6 || (uint64_t v7 = *(void *)(a1 + 8), (v8 = std::__shared_weak_count::lock(v6)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  size_t v9 = v8;
  uint64_t v10 = __p[0];
  uint64_t v11 = *(NSObject **)(a1 + 24);
  block[0] = MEMORY[0x263EF8330];
  block[1] = 1174405120;
  block[2] = ___ZN17ABMServerInternal10start_syncEN8dispatch13group_sessionE_block_invoke;
  block[3] = &__block_descriptor_tmp_16_0;
  block[4] = a1;
  void block[5] = v7;
  CFTypeID v15 = v8;
  atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  CFTypeRef v12 = *a2;
  dispatch_group_t group = v12;
  if (v12)
  {
    dispatch_retain(v12);
    dispatch_group_enter(group);
  }
  dispatch_group_notify(v10, v11, block);
  if (group)
  {
    dispatch_group_leave(group);
    if (group) {
      dispatch_release(group);
    }
  }
  uint64_t v13 = v15;
  if (!v15 || atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_18;
    }
    goto LABEL_17;
  }
  ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
  std::__shared_weak_count::__release_weak(v13);
  if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
LABEL_17:
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
LABEL_18:
  if (__p[0]) {
    dispatch_release((dispatch_object_t)__p[0]);
  }
}

void sub_263700610(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, dispatch_object_t object)
{
  if (object)
  {
    dispatch_release(object);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void __copy_helper_block_e8_48c30_ZTSN8dispatch13group_sessionE(uint64_t a1, uint64_t a2)
{
  long long v3 = *(NSObject **)(a2 + 48);
  *(void *)(a1 + 48) = v3;
  if (v3)
  {
    dispatch_retain(v3);
    uint64_t v4 = *(NSObject **)(a1 + 48);
    if (v4)
    {
      dispatch_group_enter(v4);
    }
  }
}

void __destroy_helper_block_e8_48c30_ZTSN8dispatch13group_sessionE(uint64_t a1)
{
  unsigned int v2 = *(NSObject **)(a1 + 48);
  if (v2)
  {
    dispatch_group_leave(v2);
    long long v3 = *(NSObject **)(a1 + 48);
    if (v3)
    {
      dispatch_release(v3);
    }
  }
}

void ___ZN17ABMServerInternal4stopEP16dispatch_group_s_block_invoke(void *a1)
{
  uint64_t v1 = a1[5];
  unsigned int v2 = *(_DWORD *)(v1 + 192);
  if (v2 <= 5)
  {
    char v4 = 1;
    if (((1 << v2) & 0x15) != 0)
    {
      char v4 = 0;
LABEL_20:
      *(unsigned char *)(*(void *)(a1[4] + 8) + 24) = v4;
      return;
    }
    if (((1 << v2) & 0x28) != 0) {
      goto LABEL_20;
    }
    ABMServerInternal::changeState_sync(a1[5], 2u);
    size_t v5 = (const void *)*MEMORY[0x263F26100];
    size_t v6 = strlen((const char *)*MEMORY[0x263F26100]);
    if (v6 >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    uint64_t v7 = (void *)v6;
    if (v6 >= 0x17)
    {
      uint64_t v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v6 | 7) != 0x17) {
        uint64_t v9 = v6 | 7;
      }
      uint64_t v10 = v9 + 1;
      uint64_t v8 = (void **)operator new(v9 + 1);
      __dst[1] = v7;
      unint64_t v14 = v10 | 0x8000000000000000;
      __dst[0] = v8;
    }
    else
    {
      HIBYTE(v14) = v6;
      uint64_t v8 = __dst;
      if (!v6) {
        goto LABEL_13;
      }
    }
    memmove(v8, v5, (size_t)v7);
LABEL_13:
    *((unsigned char *)v7 + (void)v8) = 0;
    ABMServerInternal::broadcastServerState_sync((void *)v1, (uint64_t)__dst);
    if (SHIBYTE(v14) < 0) {
      operator delete(__dst[0]);
    }
    uint64_t v11 = a1[6];
    CFTypeRef v12 = v11;
    if (v11)
    {
      dispatch_retain(v11);
      dispatch_group_enter(v11);
    }
    ABMServerInternal::stop_sync(v1, &v12);
    if (v11)
    {
      dispatch_group_leave(v11);
      dispatch_release(v11);
    }
    char v4 = 1;
    goto LABEL_20;
  }
}

void sub_26370084C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (v15)
  {
    dispatch_group_leave(v15);
    dispatch_release(v15);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void ABMServerInternal::stop_sync(uint64_t a1, NSObject **a2)
{
  (*(void (**)(void, uint64_t))(**(void **)(a1 + 272) + 88))(*(void *)(a1 + 272), 2);
  CFTypeID v15 = 0xAAAAAAAAAAAAAAAALL;
  ServiceManager::shutdownDynamicServices(*(ServiceManager **)(a1 + 288), &v15);
  char v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v4 || (uint64_t v5 = *(void *)(a1 + 8), (v6 = std::__shared_weak_count::lock(v4)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v7 = v6;
  uint64_t v8 = v15;
  uint64_t v9 = *(NSObject **)(a1 + 24);
  block[0] = MEMORY[0x263EF8330];
  block[1] = 1174405120;
  block[2] = ___ZN17ABMServerInternal9stop_syncEN8dispatch13group_sessionE_block_invoke;
  block[3] = &__block_descriptor_tmp_19_0;
  block[4] = a1;
  void block[5] = v5;
  uint64_t v13 = v6;
  atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v10 = *a2;
  dispatch_group_t group = v10;
  if (v10)
  {
    dispatch_retain(v10);
    dispatch_group_enter(group);
  }
  dispatch_group_notify(v8, v9, block);
  if (group)
  {
    dispatch_group_leave(group);
    if (group) {
      dispatch_release(group);
    }
  }
  uint64_t v11 = v13;
  if (!v13 || atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }
  ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
  std::__shared_weak_count::__release_weak(v11);
  if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
LABEL_11:
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
LABEL_12:
  if (v15) {
    dispatch_release(v15);
  }
}

void sub_263700A70(_Unwind_Exception *exception_object)
{
  long long v3 = *(NSObject **)(v1 - 56);
  if (v3) {
    dispatch_release(v3);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN17ABMServerInternal8shutdownEP16dispatch_group_s_block_invoke(void *a1)
{
  long long v3 = (ABMServerInternal *)a1[5];
  unsigned int v2 = a1[6];
  dispatch_object_t v4 = v2;
  if (v2)
  {
    dispatch_retain(v2);
    dispatch_group_enter(v2);
  }
  *(unsigned char *)(*(void *)(a1[4] + 8) + 24) = ABMServerInternal::checkShutdown_sync(v3, &v4);
  if (v2)
  {
    dispatch_group_leave(v2);
    dispatch_release(v2);
  }
}

void sub_263700B20(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    dispatch_group_leave(v1);
    dispatch_release(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ABMServerInternal::checkShutdown_sync(ABMServerInternal *this, dispatch_object_t *a2)
{
  switch(*((_DWORD *)this + 48))
  {
    case 0:
    case 2:
      dispatch_object_t v4 = *a2;
      if (*a2)
      {
        dispatch_retain(*a2);
        dispatch_group_enter(v4);
      }
      uint64_t v5 = *((void *)this + 25);
      *((void *)this + 25) = v4;
      if (!v5) {
        return 1;
      }
      dispatch_group_leave(v5);
      size_t v6 = v5;
      goto LABEL_25;
    case 1:
      ABMServerInternal::changeState_sync(this, 4);
      uint64_t v7 = (const void *)*MEMORY[0x263F26100];
      size_t v8 = strlen((const char *)*MEMORY[0x263F26100]);
      if (v8 >= 0x7FFFFFFFFFFFFFF8) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      uint64_t v9 = (void *)v8;
      if (v8 >= 0x17)
      {
        uint64_t v13 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v8 | 7) != 0x17) {
          uint64_t v13 = v8 | 7;
        }
        uint64_t v14 = v13 + 1;
        uint64_t v10 = (void **)operator new(v13 + 1);
        __dst[1] = v9;
        unint64_t v17 = v14 | 0x8000000000000000;
        __dst[0] = v10;
      }
      else
      {
        HIBYTE(v17) = v8;
        uint64_t v10 = __dst;
        if (!v8) {
          goto LABEL_19;
        }
      }
      memmove(v10, v7, (size_t)v9);
LABEL_19:
      *((unsigned char *)v9 + (void)v10) = 0;
      ABMServerInternal::broadcastServerState_sync(this, (uint64_t)__dst);
      if (SHIBYTE(v17) < 0) {
        operator delete(__dst[0]);
      }
      uint64_t v11 = *a2;
      CFTypeID v15 = v11;
      if (v11)
      {
        dispatch_retain(v11);
        dispatch_group_enter(v11);
      }
      ABMServerInternal::shutdown_sync((uint64_t)this, &v15);
      if (v11)
      {
LABEL_24:
        dispatch_group_leave(v11);
        size_t v6 = v11;
LABEL_25:
        dispatch_release(v6);
      }
      return 1;
    case 3:
      ABMServerInternal::finishShutdown_sync(this);
      uint64_t v11 = *((void *)this + 25);
      *((void *)this + 25) = 0;
      if (!v11) {
        return 1;
      }
      goto LABEL_24;
    case 4:
      return 0;
    case 5:
      uint64_t v11 = *((void *)this + 25);
      *((void *)this + 25) = 0;
      if (!v11) {
        return 1;
      }
      goto LABEL_24;
    default:
      return 1;
  }
}

void sub_263700D10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (v15)
  {
    dispatch_group_leave(v15);
    dispatch_release(v15);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ABMServerInternal::getRunLoop(ABMServerInternal *this)
{
  return *((void *)this + 26);
}

void ABMServerInternal::shutdown_sync(uint64_t a1, NSObject **a2)
{
  (*(void (**)(void, uint64_t))(**(void **)(a1 + 272) + 88))(*(void *)(a1 + 272), 4);
  dispatch_object_t v4 = *a2;
  uint64_t v5 = v4;
  if (v4)
  {
    dispatch_retain(v4);
    dispatch_group_enter(v4);
  }
  ABMServerInternal::stop_sync(a1, &v5);
  if (v4)
  {
    dispatch_group_leave(v4);
    dispatch_release(v4);
  }
}

void sub_263700E1C(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    dispatch_group_leave(v1);
    dispatch_release(v1);
  }
  _Unwind_Resume(exception_object);
}

char *to_string(unsigned int a1)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  if (a1 >= 6)
  {
    GetABMLogServer(v6);
    long long v3 = *((void *)GetGlobalLogger(v6) + 4);
    std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)v6);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)pthread_attr_t buf = 67109120;
      LODWORD(v8) = a1;
      _os_log_fault_impl(&dword_26368A000, v3, OS_LOG_TYPE_FAULT, "Unknown server state %d", buf, 8u);
    }
    GetABMLogServer(v5);
    dispatch_object_t v4 = *((void *)GetGlobalLogger(v5) + 4);
    std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)v5);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)pthread_attr_t buf = 136315906;
      size_t v8 = "ABM ASSERT";
      __int16 v9 = 2080;
      uint64_t v10 = "false";
      __int16 v11 = 2080;
      CFTypeRef v12 = "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices_Manager/AppleBasebandManager/BasebandManager/Ser"
            "ver/ABMServer.cpp";
      __int16 v13 = 1024;
      int v14 = 87;
      _os_log_fault_impl(&dword_26368A000, v4, OS_LOG_TYPE_FAULT, "%s (%s): File: %s Line: %d", buf, 0x26u);
    }
    __break(1u);
  }
  return off_2655D50A8[a1];
}

void sub_263700FA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_263700FB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void ___ZN17ABMServerInternal17startRunLoop_syncEv_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  pthread_setname_np("ABM.Server.RunLoop");
  pthread_set_qos_class_self_np(QOS_CLASS_DEFAULT, 0);
  *(void *)(v2 + 208) = CFRunLoopGetCurrent();
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
  long long v3 = *(NSObject **)(v2 + 112);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)dispatch_object_t v4 = 0;
    _os_log_impl(&dword_26368A000, v3, OS_LOG_TYPE_DEFAULT, "#I ABM RunLoop Started", v4, 2u);
  }
}

void __copy_helper_block_e8_40c21_ZTSN8dispatch5groupE(uint64_t a1, uint64_t a2)
{
  long long v3 = *(NSObject **)(a2 + 40);
  *(void *)(a1 + 40) = v3;
  if (v3) {
    dispatch_retain(v3);
  }
}

void __destroy_helper_block_e8_40c21_ZTSN8dispatch5groupE(uint64_t a1)
{
  uint64_t v1 = *(NSObject **)(a1 + 40);
  if (v1) {
    dispatch_release(v1);
  }
}

uint64_t sServerRunLoopMain(void (**a1)(void))
{
  memset(&context, 0, sizeof(context));
  CFRunLoopSourceRef v2 = CFRunLoopSourceCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, &context);
  if (v2)
  {
    long long v3 = v2;
    Current = CFRunLoopGetCurrent();
    CFStringRef v5 = (const __CFString *)*MEMORY[0x263EFFE88];
    CFRunLoopAddSource(Current, v3, (CFRunLoopMode)*MEMORY[0x263EFFE88]);
    a1[2](a1);
    while ((CFRunLoopRunInMode(v5, 1.79769313e308, 1u) - 1) > 1)
      ;
    size_t v6 = CFRunLoopGetCurrent();
    CFRunLoopRemoveSource(v6, v3, v5);
    CFRelease(v3);
    return 0;
  }
  size_t v8 = GetOsLogContext()[1];
  if (!os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT)) {
    return 0;
  }
  *(_WORD *)__int16 v9 = 0;
  _os_log_impl(&dword_26368A000, v8, OS_LOG_TYPE_DEFAULT, "Failed to create dummySource for runloop", v9, 2u);
  return 0;
}

void ABMServerInternal::stopRunLoop_sync(ABMServerInternal *this)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  CFRunLoopSourceRef v2 = *((void *)this + 14);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v5[0]) = 0;
    _os_log_impl(&dword_26368A000, v2, OS_LOG_TYPE_DEFAULT, "#I Stopping ABM RunLoop", (uint8_t *)v5, 2u);
  }
  usleep(0x7A120u);
  CFRunLoopStop(*((CFRunLoopRef *)this + 26));
  *((void *)this + 26) = 0;
  int v3 = pthread_join(*((pthread_t *)this + 27), 0);
  *((void *)this + 27) = 0;
  dispatch_object_t v4 = *((void *)this + 14);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v5[0] = 67109120;
    v5[1] = v3;
    _os_log_impl(&dword_26368A000, v4, OS_LOG_TYPE_DEFAULT, "#I Stopped ABM RunLoop: %d", (uint8_t *)v5, 8u);
  }
}

uint64_t ABMServer::getProfile(ABMServer *this)
{
  return 3;
}

uint64_t ___ZN17ABMServerInternal10start_syncEN8dispatch13group_sessionE_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  ABMServerInternal::changeState_sync(v1, 1u);
  CFRunLoopSourceRef v2 = (const void *)*MEMORY[0x263F26040];
  size_t v3 = strlen((const char *)*MEMORY[0x263F26040]);
  if (v3 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  dispatch_object_t v4 = (void *)v3;
  if (v3 >= 0x17)
  {
    uint64_t v6 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17) {
      uint64_t v6 = v3 | 7;
    }
    uint64_t v7 = v6 + 1;
    CFStringRef v5 = (void **)operator new(v6 + 1);
    __dst[1] = v4;
    unint64_t v15 = v7 | 0x8000000000000000;
    __dst[0] = v5;
    goto LABEL_8;
  }
  HIBYTE(v15) = v3;
  CFStringRef v5 = __dst;
  if (v3) {
LABEL_8:
  }
    memmove(v5, v2, (size_t)v4);
  *((unsigned char *)v4 + (void)v5) = 0;
  ABMServerInternal::broadcastServerState_sync((void *)v1, (uint64_t)__dst);
  if (SHIBYTE(v15) < 0)
  {
    operator delete(__dst[0]);
    BOOL isBootSessionChanged = sys::isBootSessionChanged(v10);
    if (!isBootSessionChanged) {
      return (*(uint64_t (**)(void, uint64_t))(**(void **)(v1 + 272) + 88))(*(void *)(v1 + 272), 1);
    }
  }
  else
  {
    BOOL isBootSessionChanged = sys::isBootSessionChanged(v8);
    if (!isBootSessionChanged) {
      return (*(uint64_t (**)(void, uint64_t))(**(void **)(v1 + 272) + 88))(*(void *)(v1 + 272), 1);
    }
  }
  if ((sys::updateBootSessionUUID((sys *)isBootSessionChanged) & 1) == 0)
  {
    __int16 v11 = *(NSObject **)(v1 + 112);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)__int16 v13 = 0;
      _os_log_error_impl(&dword_26368A000, v11, OS_LOG_TYPE_ERROR, "Failed to update session id", v13, 2u);
    }
  }
  return (*(uint64_t (**)(void, uint64_t))(**(void **)(v1 + 272) + 88))(*(void *)(v1 + 272), 1);
}

void sub_263701424(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void __copy_helper_block_e8_40c42_ZTSNSt3__110shared_ptrIN3ctu9XpcServerEEE56c30_ZTSN8dispatch13group_sessionE(void *a1, void *a2)
{
  uint64_t v3 = a2[6];
  a1[5] = a2[5];
  a1[6] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  dispatch_object_t v4 = a2[7];
  a1[7] = v4;
  if (v4)
  {
    dispatch_retain(v4);
    CFStringRef v5 = a1[7];
    if (v5)
    {
      dispatch_group_enter(v5);
    }
  }
}

void __destroy_helper_block_e8_40c42_ZTSNSt3__110shared_ptrIN3ctu9XpcServerEEE56c30_ZTSN8dispatch13group_sessionE(uint64_t a1)
{
  CFRunLoopSourceRef v2 = *(NSObject **)(a1 + 56);
  if (v2)
  {
    dispatch_group_leave(v2);
    uint64_t v3 = *(NSObject **)(a1 + 56);
    if (v3) {
      dispatch_release(v3);
    }
  }
  dispatch_object_t v4 = *(std::__shared_weak_count **)(a1 + 48);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
}

void ___ZN17ABMServerInternal9stop_syncEN8dispatch13group_sessionE_block_invoke(uint64_t a1)
{
  CFRunLoopSourceRef v2 = *(ABMServerInternal **)(a1 + 32);
  uint64_t v1 = v2;
  if (*((_DWORD *)v2 + 48) == 4)
  {
    ABMServerInternal::finishShutdown_sync(v2);
  }
  else
  {
    ABMServerInternal::changeState_sync(v2, 3);
    (*(void (**)(void, uint64_t))(**((void **)v1 + 34) + 88))(*((void *)v1 + 34), 3);
    dispatch_object_t v4 = *((void *)v1 + 14);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf.__pn_.__r_.__value_.__l.__data_) = 0;
      _os_log_impl(&dword_26368A000, v4, OS_LOG_TYPE_DEFAULT, "#I --------- ABM stop completed ---------", (uint8_t *)&buf, 2u);
    }
  }
  *((unsigned char *)&buf.__pn_.__r_.__value_.__s + 23) = 17;
  strcpy((char *)&buf, "/tmp/abm.shutdown");
  if (remove(&buf, v3)) {
    unlink((const char *)&buf);
  }
  CFStringRef v5 = (const void *)*MEMORY[0x263F26048];
  size_t v6 = strlen((const char *)*MEMORY[0x263F26048]);
  if (v6 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (void *)v6;
  if (v6 >= 0x17)
  {
    uint64_t v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17) {
      uint64_t v9 = v6 | 7;
    }
    uint64_t v10 = v9 + 1;
    size_t v8 = (void **)operator new(v9 + 1);
    __dst[1] = v7;
    unint64_t v22 = v10 | 0x8000000000000000;
    __dst[0] = v8;
    goto LABEL_14;
  }
  HIBYTE(v22) = v6;
  size_t v8 = __dst;
  if (v6) {
LABEL_14:
  }
    memmove(v8, v5, (size_t)v7);
  *((unsigned char *)v7 + (void)v8) = 0;
  ABMServerInternal::broadcastServerState_sync(v1, (uint64_t)__dst);
  if (SHIBYTE(v22) < 0) {
    operator delete(__dst[0]);
  }
  __int16 v11 = (const void *)*MEMORY[0x263F26060];
  size_t v12 = strlen((const char *)*MEMORY[0x263F26060]);
  if (v12 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  __int16 v13 = (void *)v12;
  if (v12 >= 0x17)
  {
    uint64_t v15 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v12 | 7) != 0x17) {
      uint64_t v15 = v12 | 7;
    }
    uint64_t v16 = v15 + 1;
    int v14 = operator new(v15 + 1);
    __p[1] = v13;
    unint64_t v20 = v16 | 0x8000000000000000;
    __p[0] = v14;
    goto LABEL_24;
  }
  HIBYTE(v20) = v12;
  int v14 = __p;
  if (v12) {
LABEL_24:
  }
    memmove(v14, v11, (size_t)v13);
  *((unsigned char *)v13 + (void)v14) = 0;
  unint64_t v17 = 0;
  char v18 = 0;
  ABMServerInternal::broadcast_sync(v1, (uint64_t)__p, &v18, &v17);
  if (SHIBYTE(v20) < 0) {
    operator delete(__p[0]);
  }
}

void sub_2637017A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, const void *a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(a11);
  }
  _Unwind_Resume(a1);
}

void ABMServerInternal::finishStop_sync(ABMServerInternal *this)
{
  ABMServerInternal::changeState_sync((uint64_t)this, 3u);
  (*(void (**)(void, uint64_t))(**((void **)this + 34) + 88))(*((void *)this + 34), 3);
  CFRunLoopSourceRef v2 = *((void *)this + 14);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl(&dword_26368A000, v2, OS_LOG_TYPE_DEFAULT, "#I --------- ABM stop completed ---------", v3, 2u);
  }
}

void ABMServerInternal::broadcast_sync(void *a1, uint64_t a2, ctu **a3, void **a4)
{
  uint64_t v70 = *MEMORY[0x263EF8340];
  xpc_object_t v7 = xpc_dictionary_create(0, 0, 0);
  if (v7 || (xpc_object_t v7 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x263E6A240](v7) == MEMORY[0x263EF8708])
    {
      xpc_retain(v7);
      xpc_object_t v8 = v7;
    }
    else
    {
      xpc_object_t v8 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v8 = xpc_null_create();
    xpc_object_t v7 = 0;
  }
  xpc_release(v7);
  if (*a3) {
    uint64_t v10 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
  }
  else {
    uint64_t v10 = 0;
  }
  xpc_object_t v40 = v8;
  if (v10)
  {
    ctu::cf_to_xpc((uint64_t *)&v63, *a3, v9);
    xpc_dictionary_set_value(v8, kKeyEventData[0], v63);
    xpc_object_t v11 = v63;
    xpc_object_t v63 = xpc_null_create();
    xpc_release(v11);
    xpc_release(v63);
    xpc_object_t v63 = 0;
  }
  xpc_object_t v12 = xpc_string_create(kCommandSignalNotification[0]);
  if (!v12) {
    xpc_object_t v12 = xpc_null_create();
  }
  xpc_dictionary_set_value(v8, kKeyCommand[0], v12);
  xpc_object_t v13 = xpc_null_create();
  xpc_release(v12);
  xpc_release(v13);
  int v14 = (const char *)a2;
  if (*(char *)(a2 + 23) < 0) {
    int v14 = *(const char **)a2;
  }
  xpc_object_t v15 = xpc_string_create(v14);
  if (!v15) {
    xpc_object_t v15 = xpc_null_create();
  }
  xpc_dictionary_set_value(v8, kKeyEvent[0], v15);
  xpc_object_t v16 = xpc_null_create();
  xpc_release(v15);
  xpc_release(v16);
  dispatch_group_t group = dispatch_group_create();
  unint64_t v17 = (std::__shared_weak_count *)a1[2];
  if (!v17 || (v41 = a1[1], (char v18 = std::__shared_weak_count::lock(v17)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v19 = v18;
  atomic_fetch_add_explicit(&v18->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v19);
    uint64_t v42 = v19;
    unint64_t v20 = (void *)a1[18];
    uint64_t v45 = a1;
    uint64_t v21 = a1 + 19;
    if (v20 == a1 + 19) {
      goto LABEL_76;
    }
LABEL_26:
    while (1)
    {
      unint64_t v61 = 0xAAAAAAAAAAAAAAAALL;
      unint64_t v62 = 0xAAAAAAAAAAAAAAAALL;
      xpc_object_t v22 = (xpc_object_t)v20[4];
      xpc_object_t v60 = v22;
      if (v22) {
        break;
      }
      xpc_object_t v22 = xpc_null_create();
      xpc_object_t v60 = v22;
      unint64_t v24 = v20[5];
      unint64_t v23 = v20[6];
      unint64_t v61 = v24;
      unint64_t v62 = v23;
      if (v23) {
        goto LABEL_28;
      }
LABEL_29:
      if (v22)
      {
        xpc_retain(v22);
        unint64_t v58 = v24;
        long long v59 = (std::__shared_weak_count *)v23;
        if (!v23) {
          goto LABEL_32;
        }
LABEL_31:
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v23 + 8), 1uLL, memory_order_relaxed);
        goto LABEL_32;
      }
      xpc_object_t v22 = xpc_null_create();
      unint64_t v58 = v24;
      long long v59 = (std::__shared_weak_count *)v23;
      if (v23) {
        goto LABEL_31;
      }
LABEL_32:
      if ((uint64_t *)(v24 + 40) == std::__tree<std::__value_type<std::string,std::map<std::string,xpc::dict>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,xpc::dict>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,xpc::dict>>>>::find<std::string>(v24 + 32, (const void **)a2))goto LABEL_62; {
      uint64_t SystemTime = TelephonyUtilGetSystemTime();
      }
      uint64_t v26 = v45[14];
      if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
      {
        BOOL v27 = (const void *)a2;
        if (*(char *)(a2 + 23) < 0)
        {
          BOOL v27 = *(const void **)a2;
          if (*(char *)(v24 + 23) < 0) {
            goto LABEL_42;
          }
LABEL_36:
          long long v28 = *(_OWORD *)v24;
          v57.__r_.__value_.__r.__words[2] = *(void *)(v24 + 16);
          *(_OWORD *)&v57.__r_.__value_.__l.__data_ = v28;
        }
        else
        {
          if ((*(char *)(v24 + 23) & 0x80000000) == 0) {
            goto LABEL_36;
          }
LABEL_42:
          std::string::__init_copy_ctor_external(&v57, *(const std::string::value_type **)v24, *(void *)(v24 + 8));
        }
        xpc_object_t v29 = &v57;
        if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          xpc_object_t v29 = (std::string *)v57.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)std::__fs::filesystem::path buf = 136315650;
        uint64_t v65 = v27;
        __int16 v66 = 2080;
        uint64_t v67 = v29;
        __int16 v68 = 2048;
        uint64_t v69 = SystemTime;
        _os_log_impl(&dword_26368A000, v26, OS_LOG_TYPE_DEFAULT, "#I Sending %s to %s at %llu", buf, 0x20u);
        if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v57.__r_.__value_.__l.__data_);
        }
        xpc_object_t v8 = v40;
      }
      if (!*a4)
      {
        xpc_connection_send_message((xpc_connection_t)v22, v8);
        goto LABEL_62;
      }
      dispatch_group_enter(group);
      xpc_object_t v30 = v45[3];
      handler[0] = MEMORY[0x263EF8330];
      handler[1] = 1174405120;
      handler[2] = ___ZN17ABMServerInternal14broadcast_syncENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch5blockIU13block_pointerFvvEEE_block_invoke;
      handler[3] = &__block_descriptor_tmp_31;
      handler[4] = v45;
      handler[5] = v41;
      uint64_t v51 = v42;
      atomic_fetch_add_explicit(&v42->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      unint64_t v52 = v24;
      std::string v53 = (std::__shared_weak_count *)v23;
      if (v23) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v23 + 8), 1uLL, memory_order_relaxed);
      }
      if (*(char *)(a2 + 23) < 0) {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
      }
      else {
        std::string __p = *(std::string *)a2;
      }
      uint64_t v55 = SystemTime;
      uint64_t v56 = group;
      xpc_connection_send_message_with_reply((xpc_connection_t)v22, v8, v30, handler);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        uint64_t v31 = v53;
        if (!v53) {
          goto LABEL_60;
        }
      }
      else
      {
        uint64_t v31 = v53;
        if (!v53) {
          goto LABEL_60;
        }
      }
      if (atomic_fetch_add(&v31->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
LABEL_60:
        uint64_t v32 = v51;
        if (!v51) {
          goto LABEL_62;
        }
LABEL_61:
        std::__shared_weak_count::__release_weak(v32);
        goto LABEL_62;
      }
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
      uint64_t v32 = v51;
      if (v51) {
        goto LABEL_61;
      }
LABEL_62:
      size_t v33 = v59;
      if (v59 && !atomic_fetch_add(&v59->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
      xpc_release(v22);
      xpc_object_t v34 = (std::__shared_weak_count *)v62;
      if (v62 && !atomic_fetch_add((atomic_ullong *volatile)(v62 + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
      }
      xpc_release(v60);
      uint64_t v35 = (void *)v20[1];
      if (v35)
      {
        do
        {
          int v36 = v35;
          uint64_t v35 = (void *)*v35;
        }
        while (v35);
      }
      else
      {
        do
        {
          int v36 = (void *)v20[2];
          BOOL v37 = *v36 == (void)v20;
          unint64_t v20 = v36;
        }
        while (!v37);
      }
      unint64_t v20 = v36;
      if (v36 == v21) {
        goto LABEL_76;
      }
    }
    xpc_retain(v22);
    unint64_t v24 = v20[5];
    unint64_t v23 = v20[6];
    unint64_t v61 = v24;
    unint64_t v62 = v23;
    if (!v23) {
      goto LABEL_29;
    }
LABEL_28:
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v23 + 8), 1uLL, memory_order_relaxed);
    goto LABEL_29;
  }
  uint64_t v42 = v18;
  unint64_t v20 = (void *)a1[18];
  uint64_t v45 = a1;
  uint64_t v21 = a1 + 19;
  if (v20 != a1 + 19) {
    goto LABEL_26;
  }
LABEL_76:
  if (*a4)
  {
    size_t v38 = v45[3];
    block[0] = MEMORY[0x263EF8330];
    block[1] = 1174405120;
    block[2] = ___ZN17ABMServerInternal14broadcast_syncENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch5blockIU13block_pointerFvvEEE_block_invoke_32;
    block[3] = &__block_descriptor_tmp_33_1;
    block[4] = v45;
    void block[5] = v41;
    uint64_t v47 = v42;
    atomic_fetch_add_explicit(&v42->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    if (*(char *)(a2 + 23) < 0) {
      std::string::__init_copy_ctor_external(&v48, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    }
    else {
      std::string v48 = *(std::string *)a2;
    }
    size_t v39 = *a4;
    if (*a4) {
      size_t v39 = _Block_copy(v39);
    }
    aBlocunint64_t k = v39;
    dispatch_group_notify(group, v38, block);
    if (aBlock) {
      _Block_release(aBlock);
    }
    if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v48.__r_.__value_.__l.__data_);
    }
    if (v47) {
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  dispatch_release(group);
  std::__shared_weak_count::__release_weak(v42);
  xpc_release(v8);
}